// automatically generated by the FlatBuffers compiler, do not modify


// @generated

use core::mem;
use core::cmp::Ordering;

extern crate flatbuffers;
use self::flatbuffers::{EndianScalar, Follow};

#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
pub const ENUM_MIN_ATTITUDE_SET_INGEST_DATA_MODE_ENUM: i8 = 0;
#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
pub const ENUM_MAX_ATTITUDE_SET_INGEST_DATA_MODE_ENUM: i8 = 3;
#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
#[allow(non_camel_case_types)]
pub const ENUM_VALUES_ATTITUDE_SET_INGEST_DATA_MODE_ENUM: [AttitudeSet_Ingest_dataMode_Enum; 4] = [
  AttitudeSet_Ingest_dataMode_Enum::REAL,
  AttitudeSet_Ingest_dataMode_Enum::TEST,
  AttitudeSet_Ingest_dataMode_Enum::SIMULATED,
  AttitudeSet_Ingest_dataMode_Enum::EXERCISE,
];

#[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, Default)]
#[repr(transparent)]
pub struct AttitudeSet_Ingest_dataMode_Enum(pub i8);
#[allow(non_upper_case_globals)]
impl AttitudeSet_Ingest_dataMode_Enum {
  /// Data collected or produced that pertains to real-world objects, events, and analysis.
  pub const REAL: Self = Self(0);
  /// Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  pub const TEST: Self = Self(1);
  /// Synthetic data generated by a model to mimic real-world datasets.
  pub const SIMULATED: Self = Self(2);
  /// Data pertaining to a government or military exercise. The data may include both real and simulated data.
  pub const EXERCISE: Self = Self(3);

  pub const ENUM_MIN: i8 = 0;
  pub const ENUM_MAX: i8 = 3;
  pub const ENUM_VALUES: &'static [Self] = &[
    Self::REAL,
    Self::TEST,
    Self::SIMULATED,
    Self::EXERCISE,
  ];
  /// Returns the variant's name or "" if unknown.
  pub fn variant_name(self) -> Option<&'static str> {
    match self {
      Self::REAL => Some("REAL"),
      Self::TEST => Some("TEST"),
      Self::SIMULATED => Some("SIMULATED"),
      Self::EXERCISE => Some("EXERCISE"),
      _ => None,
    }
  }
}
impl core::fmt::Debug for AttitudeSet_Ingest_dataMode_Enum {
  fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
    if let Some(name) = self.variant_name() {
      f.write_str(name)
    } else {
      f.write_fmt(format_args!("<UNKNOWN {:?}>", self.0))
    }
  }
}
impl<'a> flatbuffers::Follow<'a> for AttitudeSet_Ingest_dataMode_Enum {
  type Inner = Self;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    let b = flatbuffers::read_scalar_at::<i8>(buf, loc);
    Self(b)
  }
}

impl flatbuffers::Push for AttitudeSet_Ingest_dataMode_Enum {
    type Output = AttitudeSet_Ingest_dataMode_Enum;
    #[inline]
    unsafe fn push(&self, dst: &mut [u8], _written_len: usize) {
        flatbuffers::emplace_scalar::<i8>(dst, self.0);
    }
}

impl flatbuffers::EndianScalar for AttitudeSet_Ingest_dataMode_Enum {
  type Scalar = i8;
  #[inline]
  fn to_little_endian(self) -> i8 {
    self.0.to_le()
  }
  #[inline]
  #[allow(clippy::wrong_self_convention)]
  fn from_little_endian(v: i8) -> Self {
    let b = i8::from_le(v);
    Self(b)
  }
}

impl<'a> flatbuffers::Verifiable for AttitudeSet_Ingest_dataMode_Enum {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    i8::run_verifier(v, pos)
  }
}

impl flatbuffers::SimpleToVerifyInSlice for AttitudeSet_Ingest_dataMode_Enum {}
pub enum AttitudeSet_IngestOffset {}
#[derive(Copy, Clone, PartialEq)]

/// /// AttitudeSet represents a wrapper or collection of Onorbit Attitude 'points' and meta data indicating the specifics of the orientation of an on-orbit object.  Attitude is typically distributed in a flat file containing details of the attitude generation as well as a large collection of individual points at varying time steps. AttitudeSet is analogous to this flat file.
pub struct AttitudeSet_Ingest<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for AttitudeSet_Ingest<'a> {
  type Inner = AttitudeSet_Ingest<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> AttitudeSet_Ingest<'a> {
  pub const VT_ID: flatbuffers::VOffsetT = 4;
  pub const VT_CLASSIFICATIONMARKING: flatbuffers::VOffsetT = 6;
  pub const VT_IDONORBIT: flatbuffers::VOffsetT = 8;
  pub const VT_SATNO: flatbuffers::VOffsetT = 10;
  pub const VT_ORIGOBJECTID: flatbuffers::VOffsetT = 12;
  pub const VT_TYPE_: flatbuffers::VOffsetT = 14;
  pub const VT_ESID: flatbuffers::VOffsetT = 16;
  pub const VT_ASREF: flatbuffers::VOffsetT = 18;
  pub const VT_IDSENSOR: flatbuffers::VOffsetT = 20;
  pub const VT_ORIGSENSORID: flatbuffers::VOffsetT = 22;
  pub const VT_STARTTIME: flatbuffers::VOffsetT = 24;
  pub const VT_ENDTIME: flatbuffers::VOffsetT = 26;
  pub const VT_FRAME1: flatbuffers::VOffsetT = 28;
  pub const VT_FRAME2: flatbuffers::VOffsetT = 30;
  pub const VT_NUMPOINTS: flatbuffers::VOffsetT = 32;
  pub const VT_STEPSIZE: flatbuffers::VOffsetT = 34;
  pub const VT_PRECANGLEINIT: flatbuffers::VOffsetT = 36;
  pub const VT_SPINANGLEINIT: flatbuffers::VOffsetT = 38;
  pub const VT_EULERROTSEQ: flatbuffers::VOffsetT = 40;
  pub const VT_ATTITUDELIST: flatbuffers::VOffsetT = 42;
  pub const VT_INTERPOLATOR: flatbuffers::VOffsetT = 44;
  pub const VT_INTERPOLATORDEGREE: flatbuffers::VOffsetT = 46;
  pub const VT_NOTES: flatbuffers::VOffsetT = 48;
  pub const VT_CREATEDAT: flatbuffers::VOffsetT = 50;
  pub const VT_CREATEDBY: flatbuffers::VOffsetT = 52;
  pub const VT_SOURCE: flatbuffers::VOffsetT = 54;
  pub const VT_ORIGIN: flatbuffers::VOffsetT = 56;
  pub const VT_DATAMODE: flatbuffers::VOffsetT = 58;
  pub const VT_ORIGNETWORK: flatbuffers::VOffsetT = 60;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    AttitudeSet_Ingest { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args AttitudeSet_IngestArgs<'args>
  ) -> flatbuffers::WIPOffset<AttitudeSet_Ingest<'bldr>> {
    let mut builder = AttitudeSet_IngestBuilder::new(_fbb);
    builder.add_spinAngleInit(args.spinAngleInit);
    builder.add_precAngleInit(args.precAngleInit);
    if let Some(x) = args.origNetwork { builder.add_origNetwork(x); }
    if let Some(x) = args.origin { builder.add_origin(x); }
    if let Some(x) = args.source { builder.add_source(x); }
    if let Some(x) = args.createdBy { builder.add_createdBy(x); }
    if let Some(x) = args.createdAt { builder.add_createdAt(x); }
    if let Some(x) = args.notes { builder.add_notes(x); }
    builder.add_interpolatorDegree(args.interpolatorDegree);
    if let Some(x) = args.interpolator { builder.add_interpolator(x); }
    if let Some(x) = args.attitudeList { builder.add_attitudeList(x); }
    if let Some(x) = args.eulerRotSeq { builder.add_eulerRotSeq(x); }
    builder.add_stepSize(args.stepSize);
    builder.add_numPoints(args.numPoints);
    if let Some(x) = args.frame2 { builder.add_frame2(x); }
    if let Some(x) = args.frame1 { builder.add_frame1(x); }
    if let Some(x) = args.endTime { builder.add_endTime(x); }
    if let Some(x) = args.startTime { builder.add_startTime(x); }
    if let Some(x) = args.origSensorId { builder.add_origSensorId(x); }
    if let Some(x) = args.idSensor { builder.add_idSensor(x); }
    if let Some(x) = args.asRef { builder.add_asRef(x); }
    if let Some(x) = args.esId { builder.add_esId(x); }
    if let Some(x) = args.type_ { builder.add_type_(x); }
    if let Some(x) = args.origObjectId { builder.add_origObjectId(x); }
    builder.add_satNo(args.satNo);
    if let Some(x) = args.idOnOrbit { builder.add_idOnOrbit(x); }
    if let Some(x) = args.classificationMarking { builder.add_classificationMarking(x); }
    if let Some(x) = args.id { builder.add_id(x); }
    builder.add_dataMode(args.dataMode);
    builder.finish()
  }

  pub fn unpack(&self) -> AttitudeSet_IngestT {
    let id = self.id().map(|x| {
      x.to_string()
    });
    let classificationMarking = self.classificationMarking().map(|x| {
      x.to_string()
    });
    let idOnOrbit = self.idOnOrbit().map(|x| {
      x.to_string()
    });
    let satNo = self.satNo();
    let origObjectId = self.origObjectId().map(|x| {
      x.to_string()
    });
    let type_ = self.type_().map(|x| {
      x.to_string()
    });
    let esId = self.esId().map(|x| {
      x.to_string()
    });
    let asRef = self.asRef().map(|x| {
      x.iter().map(|s| s.to_string()).collect()
    });
    let idSensor = self.idSensor().map(|x| {
      x.to_string()
    });
    let origSensorId = self.origSensorId().map(|x| {
      x.to_string()
    });
    let startTime = self.startTime().map(|x| {
      x.to_string()
    });
    let endTime = self.endTime().map(|x| {
      x.to_string()
    });
    let frame1 = self.frame1().map(|x| {
      x.to_string()
    });
    let frame2 = self.frame2().map(|x| {
      x.to_string()
    });
    let numPoints = self.numPoints();
    let stepSize = self.stepSize();
    let precAngleInit = self.precAngleInit();
    let spinAngleInit = self.spinAngleInit();
    let eulerRotSeq = self.eulerRotSeq().map(|x| {
      x.to_string()
    });
    let attitudeList = self.attitudeList().map(|x| {
      x.iter().map(|s| s.to_string()).collect()
    });
    let interpolator = self.interpolator().map(|x| {
      x.to_string()
    });
    let interpolatorDegree = self.interpolatorDegree();
    let notes = self.notes().map(|x| {
      x.to_string()
    });
    let createdAt = self.createdAt().map(|x| {
      x.to_string()
    });
    let createdBy = self.createdBy().map(|x| {
      x.to_string()
    });
    let source = self.source().map(|x| {
      x.to_string()
    });
    let origin = self.origin().map(|x| {
      x.to_string()
    });
    let dataMode = self.dataMode();
    let origNetwork = self.origNetwork().map(|x| {
      x.to_string()
    });
    AttitudeSet_IngestT {
      id,
      classificationMarking,
      idOnOrbit,
      satNo,
      origObjectId,
      type_,
      esId,
      asRef,
      idSensor,
      origSensorId,
      startTime,
      endTime,
      frame1,
      frame2,
      numPoints,
      stepSize,
      precAngleInit,
      spinAngleInit,
      eulerRotSeq,
      attitudeList,
      interpolator,
      interpolatorDegree,
      notes,
      createdAt,
      createdBy,
      source,
      origin,
      dataMode,
      origNetwork,
    }
  }

  /// Unique identifier of the record, auto-generated by the system.
  /// Example: /// Example: ATTITUDESET-ID
  /// Constraints: Minimum length = 1, Maximum length = 36
  #[inline]
  pub fn id(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(AttitudeSet_Ingest::VT_ID, None)}
  }
  /// Classification marking of the data in IC/CAPCO Portion-marked format.
  /// Example: /// Example: U
  /// Constraints: Minimum length = 1, Maximum length = 128
  #[inline]
  pub fn classificationMarking(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(AttitudeSet_Ingest::VT_CLASSIFICATIONMARKING, None)}
  }
  /// Unique identifier of the on-orbit satellite to which this attitude set applies.
  /// Example: /// Example: 41947
  /// Constraints: Minimum length = 0, Maximum length = 36
  #[inline]
  pub fn idOnOrbit(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(AttitudeSet_Ingest::VT_IDONORBIT, None)}
  }
  /// Satellite/catalog number of the on-orbit object to which this attitude set applies.
  /// Example: /// Example: 41947
  /// Constraints: No constraints specified.
  #[inline]
  pub fn satNo(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(AttitudeSet_Ingest::VT_SATNO, Some(0)).unwrap()}
  }
  /// Optional identifier provided by the record source to indicate the target object of this attitude set. This may be an internal identifier and not necessarily map to a valid satellite number.
  /// Example: /// Example: D6593
  /// Constraints: Minimum length = 0, Maximum length = 36
  #[inline]
  pub fn origObjectId(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(AttitudeSet_Ingest::VT_ORIGOBJECTID, None)}
  }
  /// The type of attitude message or messages associated with this set.
  /// AEM = Attitude Ephemeris Message, specifying the attitude state of a single object at multiple epochs.
  /// APM = Attitude Parameters Message, specifying the attitude state of a single object at a single epoch.
  /// Example: /// Example: AEM
  /// Constraints: Minimum length = 1, Maximum length = 3
  #[inline]
  pub fn type_(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(AttitudeSet_Ingest::VT_TYPE_, None)}
  }
  /// Unique identifier of the parent (positional) Ephemeris Set, if this data is correlated with an Ephemeris.
  /// Example: /// Example: 60f7a241-b7be-48d8-acf3-786670af53f9
  /// Constraints: Minimum length = 0, Maximum length = 36
  #[inline]
  pub fn esId(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(AttitudeSet_Ingest::VT_ESID, None)}
  }
  /// Array of UDL UUIDs of one or more AttitudeSet records associated with this set.  For example, a spacecraft Attitude Ephemeris Set might include a reference to an Attitude Parameter Message defining the sensor to body frame transformation for a sensor onboard the spacecraft, which allows for calculation of the sensor orientation in frame2 of the attitude ephemeris.
  /// Example: /// Example: ['2ea97de6-4680-4767-a07e-35d16398ef60']
  /// Constraints: No constraints specified.
  #[inline]
  pub fn asRef(&self) -> Option<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>(AttitudeSet_Ingest::VT_ASREF, None)}
  }
  /// Unique identifier of the sensor to which this attitude set applies IF this set is reporting a single sensor orientation.
  /// Example: /// Example: a7e99418-b6d6-29ab-e767-440a989cce26
  /// Constraints: Minimum length = 0, Maximum length = 36
  #[inline]
  pub fn idSensor(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(AttitudeSet_Ingest::VT_IDSENSOR, None)}
  }
  /// Optional identifier provided by the record source to indicate the sensor identifier to which this attitude set applies IF this set is reporting a single sensor orientation. This may be an internal identifier and not necessarily a valid sensor ID.
  /// Example: /// Example: ORIGSENSOR-ID
  /// Constraints: Minimum length = 0, Maximum length = 64
  #[inline]
  pub fn origSensorId(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(AttitudeSet_Ingest::VT_ORIGSENSORID, None)}
  }
  /// The epoch or start time of the attitude parameter or attitude ephemeris, in ISO 8601 UTC format, with microsecond precision.  If this set is constituted by a single attitude parameter message then startTime is the epoch.
  /// Example: /// Example: 2022-07-07T16:00:00.123456Z
  /// Constraints: No constraints specified.
  #[inline]
  pub fn startTime(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(AttitudeSet_Ingest::VT_STARTTIME, None)}
  }
  /// The end time of the attitude ephemeris, in ISO 8601 UTC format, with microsecond precision.  If this set is constituted by a single epoch attitude message then endTime should match the startTime.
  /// Example: /// Example: 2022-07-07T18:00:00.654321Z
  /// Constraints: No constraints specified.
  #[inline]
  pub fn endTime(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(AttitudeSet_Ingest::VT_ENDTIME, None)}
  }
  /// Reference frame 1 of the quaternion or Euler angle transformation utilized in this attitude parameter or attitude ephemeris.  The UDL convention is that transformations occur FROM frame1 TO frame2.  A specific spacecraft frame or instrument name may be provided with the assumption the consumer understands the location of these frames (ex. SC BODY, J2000, LVLH, ICRF, INSTRUMENTx, THRUSTERx, etc.).
  /// Example: /// Example: SCBODY
  /// Constraints: Minimum length = 1, Maximum length = 36
  #[inline]
  pub fn frame1(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(AttitudeSet_Ingest::VT_FRAME1, None)}
  }
  /// Reference frame 2 of the quaternion or Euler angle transformation utilized in this attitude parameter or attitude ephemeris.  The UDL convention is that transformations occur FROM frame1 TO frame2.  A specific spacecraft frame or instrument name may be provided with the assumption the consumer understands the location of these frames (ex. SC BODY, J2000, LVLH, ICRF, INSTRUMENTx, THRUSTERx, etc.).
  /// Example: /// Example: J2000
  /// Constraints: Minimum length = 1, Maximum length = 36
  #[inline]
  pub fn frame2(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(AttitudeSet_Ingest::VT_FRAME2, None)}
  }
  /// Number of attitude records contained in this set.
  /// Example: /// Example: 120
  /// Constraints: No constraints specified.
  #[inline]
  pub fn numPoints(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(AttitudeSet_Ingest::VT_NUMPOINTS, Some(0)).unwrap()}
  }
  /// Attitude ephemeris step size, in seconds. This applies to Attitude Ephemeris Messages (AEM) that employ a fixed step size.
  /// Example: /// Example: 60
  /// Constraints: No constraints specified.
  #[inline]
  pub fn stepSize(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(AttitudeSet_Ingest::VT_STEPSIZE, Some(0)).unwrap()}
  }
  /// Initial precession angle (ECI J2000 frame) in degrees.
  /// Example: /// Example: 30.5
  /// Constraints: No constraints specified.
  #[inline]
  pub fn precAngleInit(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(AttitudeSet_Ingest::VT_PRECANGLEINIT, Some(0.0)).unwrap()}
  }
  /// Initial spin angle (ECI J2000 frame) in degrees.
  /// Example: /// Example: 25.5
  /// Constraints: No constraints specified.
  #[inline]
  pub fn spinAngleInit(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(AttitudeSet_Ingest::VT_SPINANGLEINIT, Some(0.0)).unwrap()}
  }
  /// The rotation sequence of the Euler angles in which attitude reference frame transformation occurs (from left to right). One, two, or three axis rotations are supported and are represented by one, two, or three characters respectively.  Repeated axis rotations are also supported, however, these rotations should not be sequential.  The numeric sequence values correspond to the body angles/rates as follows: 1 - xAngle/xRate, 2 - yAngle/yRate, and 3 - zAngle/zRate.  Valid sequences are: 123, 132, 213, 231, 312, 321, 121, 131, 212, 232, 313, 323, 12, 13, 21, 23, 31, 32, 1, 2, and 3. 
  /// The following represent examples of possible rotation sequences:  A single rotation about the Y-axis can be expressed as '2', a double rotation with X-Z sequence can be expressed as '13', and a triple rotation with Z-X-Y sequence can be expressed as '312'.
  /// Example: /// Example: 123
  /// Constraints: Minimum length = 0, Maximum length = 3
  #[inline]
  pub fn eulerRotSeq(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(AttitudeSet_Ingest::VT_EULERROTSEQ, None)}
  }
  /// Collection of attitude data associated with this Attitude Set.
  /// Example: /// Example: No example provided.
  /// Constraints: No constraints specified.
  #[inline]
  pub fn attitudeList(&self) -> Option<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>(AttitudeSet_Ingest::VT_ATTITUDELIST, None)}
  }
  /// Recommended interpolation method for estimating attitude ephemeris data.
  /// Example: /// Example: LINEAR
  /// Constraints: Minimum length = 0, Maximum length = 16
  #[inline]
  pub fn interpolator(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(AttitudeSet_Ingest::VT_INTERPOLATOR, None)}
  }
  /// Recommended polynomial interpolation degree.
  /// Example: /// Example: 2
  /// Constraints: No constraints specified.
  #[inline]
  pub fn interpolatorDegree(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(AttitudeSet_Ingest::VT_INTERPOLATORDEGREE, Some(0)).unwrap()}
  }
  /// Optional notes/comments for this attitude set.
  /// Example: /// Example: Notes for this attitude set
  /// Constraints: Minimum length = 0, Maximum length = 1024
  #[inline]
  pub fn notes(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(AttitudeSet_Ingest::VT_NOTES, None)}
  }
  /// Time the row was created in the database, auto-populated by the system.
  /// Example: /// Example: 2022-07-05T12:00:00.123Z
  /// Constraints: No constraints specified.
  #[inline]
  pub fn createdAt(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(AttitudeSet_Ingest::VT_CREATEDAT, None)}
  }
  /// Application user who created the row in the database, auto-populated by the system.
  /// Example: /// Example: some.user
  /// Constraints: Minimum length = 1, Maximum length = 64
  #[inline]
  pub fn createdBy(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(AttitudeSet_Ingest::VT_CREATEDBY, None)}
  }
  /// Source of the data.
  /// Example: /// Example: Bluestaq
  /// Constraints: Minimum length = 1, Maximum length = 36
  #[inline]
  pub fn source(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(AttitudeSet_Ingest::VT_SOURCE, None)}
  }
  /// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
  /// Example: /// Example: THIRD_PARTY_DATASOURCE
  /// Constraints: Minimum length = 0, Maximum length = 64
  #[inline]
  pub fn origin(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(AttitudeSet_Ingest::VT_ORIGIN, None)}
  }
  /// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
  /// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
  /// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
  /// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
  /// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  /// Example: /// Example: TEST
  /// Constraints: Minimum length = 1, Maximum length = 32
  #[inline]
  pub fn dataMode(&self) -> AttitudeSet_Ingest_dataMode_Enum {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<AttitudeSet_Ingest_dataMode_Enum>(AttitudeSet_Ingest::VT_DATAMODE, Some(AttitudeSet_Ingest_dataMode_Enum::REAL)).unwrap()}
  }
  /// The originating source network on which this record was created, auto-populated by the system.
  /// Example: /// Example: ORIG
  /// Constraints: Minimum length = 1, Maximum length = 32
  #[inline]
  pub fn origNetwork(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(AttitudeSet_Ingest::VT_ORIGNETWORK, None)}
  }
}

impl flatbuffers::Verifiable for AttitudeSet_Ingest<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("id", Self::VT_ID, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("classificationMarking", Self::VT_CLASSIFICATIONMARKING, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("idOnOrbit", Self::VT_IDONORBIT, false)?
     .visit_field::<i32>("satNo", Self::VT_SATNO, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("origObjectId", Self::VT_ORIGOBJECTID, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("type_", Self::VT_TYPE_, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("esId", Self::VT_ESID, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<&'_ str>>>>("asRef", Self::VT_ASREF, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("idSensor", Self::VT_IDSENSOR, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("origSensorId", Self::VT_ORIGSENSORID, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("startTime", Self::VT_STARTTIME, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("endTime", Self::VT_ENDTIME, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("frame1", Self::VT_FRAME1, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("frame2", Self::VT_FRAME2, false)?
     .visit_field::<i32>("numPoints", Self::VT_NUMPOINTS, false)?
     .visit_field::<i32>("stepSize", Self::VT_STEPSIZE, false)?
     .visit_field::<f64>("precAngleInit", Self::VT_PRECANGLEINIT, false)?
     .visit_field::<f64>("spinAngleInit", Self::VT_SPINANGLEINIT, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("eulerRotSeq", Self::VT_EULERROTSEQ, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<&'_ str>>>>("attitudeList", Self::VT_ATTITUDELIST, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("interpolator", Self::VT_INTERPOLATOR, false)?
     .visit_field::<i32>("interpolatorDegree", Self::VT_INTERPOLATORDEGREE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("notes", Self::VT_NOTES, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("createdAt", Self::VT_CREATEDAT, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("createdBy", Self::VT_CREATEDBY, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("source", Self::VT_SOURCE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("origin", Self::VT_ORIGIN, false)?
     .visit_field::<AttitudeSet_Ingest_dataMode_Enum>("dataMode", Self::VT_DATAMODE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("origNetwork", Self::VT_ORIGNETWORK, false)?
     .finish();
    Ok(())
  }
}
pub struct AttitudeSet_IngestArgs<'a> {
    pub id: Option<flatbuffers::WIPOffset<&'a str>>,
    pub classificationMarking: Option<flatbuffers::WIPOffset<&'a str>>,
    pub idOnOrbit: Option<flatbuffers::WIPOffset<&'a str>>,
    pub satNo: i32,
    pub origObjectId: Option<flatbuffers::WIPOffset<&'a str>>,
    pub type_: Option<flatbuffers::WIPOffset<&'a str>>,
    pub esId: Option<flatbuffers::WIPOffset<&'a str>>,
    pub asRef: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>,
    pub idSensor: Option<flatbuffers::WIPOffset<&'a str>>,
    pub origSensorId: Option<flatbuffers::WIPOffset<&'a str>>,
    pub startTime: Option<flatbuffers::WIPOffset<&'a str>>,
    pub endTime: Option<flatbuffers::WIPOffset<&'a str>>,
    pub frame1: Option<flatbuffers::WIPOffset<&'a str>>,
    pub frame2: Option<flatbuffers::WIPOffset<&'a str>>,
    pub numPoints: i32,
    pub stepSize: i32,
    pub precAngleInit: f64,
    pub spinAngleInit: f64,
    pub eulerRotSeq: Option<flatbuffers::WIPOffset<&'a str>>,
    pub attitudeList: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>,
    pub interpolator: Option<flatbuffers::WIPOffset<&'a str>>,
    pub interpolatorDegree: i32,
    pub notes: Option<flatbuffers::WIPOffset<&'a str>>,
    pub createdAt: Option<flatbuffers::WIPOffset<&'a str>>,
    pub createdBy: Option<flatbuffers::WIPOffset<&'a str>>,
    pub source: Option<flatbuffers::WIPOffset<&'a str>>,
    pub origin: Option<flatbuffers::WIPOffset<&'a str>>,
    pub dataMode: AttitudeSet_Ingest_dataMode_Enum,
    pub origNetwork: Option<flatbuffers::WIPOffset<&'a str>>,
}
impl<'a> Default for AttitudeSet_IngestArgs<'a> {
  #[inline]
  fn default() -> Self {
    AttitudeSet_IngestArgs {
      id: None,
      classificationMarking: None,
      idOnOrbit: None,
      satNo: 0,
      origObjectId: None,
      type_: None,
      esId: None,
      asRef: None,
      idSensor: None,
      origSensorId: None,
      startTime: None,
      endTime: None,
      frame1: None,
      frame2: None,
      numPoints: 0,
      stepSize: 0,
      precAngleInit: 0.0,
      spinAngleInit: 0.0,
      eulerRotSeq: None,
      attitudeList: None,
      interpolator: None,
      interpolatorDegree: 0,
      notes: None,
      createdAt: None,
      createdBy: None,
      source: None,
      origin: None,
      dataMode: AttitudeSet_Ingest_dataMode_Enum::REAL,
      origNetwork: None,
    }
  }
}

pub struct AttitudeSet_IngestBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> AttitudeSet_IngestBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_id(&mut self, id: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(AttitudeSet_Ingest::VT_ID, id);
  }
  #[inline]
  pub fn add_classificationMarking(&mut self, classificationMarking: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(AttitudeSet_Ingest::VT_CLASSIFICATIONMARKING, classificationMarking);
  }
  #[inline]
  pub fn add_idOnOrbit(&mut self, idOnOrbit: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(AttitudeSet_Ingest::VT_IDONORBIT, idOnOrbit);
  }
  #[inline]
  pub fn add_satNo(&mut self, satNo: i32) {
    self.fbb_.push_slot::<i32>(AttitudeSet_Ingest::VT_SATNO, satNo, 0);
  }
  #[inline]
  pub fn add_origObjectId(&mut self, origObjectId: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(AttitudeSet_Ingest::VT_ORIGOBJECTID, origObjectId);
  }
  #[inline]
  pub fn add_type_(&mut self, type_: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(AttitudeSet_Ingest::VT_TYPE_, type_);
  }
  #[inline]
  pub fn add_esId(&mut self, esId: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(AttitudeSet_Ingest::VT_ESID, esId);
  }
  #[inline]
  pub fn add_asRef(&mut self, asRef: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<&'b  str>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(AttitudeSet_Ingest::VT_ASREF, asRef);
  }
  #[inline]
  pub fn add_idSensor(&mut self, idSensor: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(AttitudeSet_Ingest::VT_IDSENSOR, idSensor);
  }
  #[inline]
  pub fn add_origSensorId(&mut self, origSensorId: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(AttitudeSet_Ingest::VT_ORIGSENSORID, origSensorId);
  }
  #[inline]
  pub fn add_startTime(&mut self, startTime: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(AttitudeSet_Ingest::VT_STARTTIME, startTime);
  }
  #[inline]
  pub fn add_endTime(&mut self, endTime: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(AttitudeSet_Ingest::VT_ENDTIME, endTime);
  }
  #[inline]
  pub fn add_frame1(&mut self, frame1: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(AttitudeSet_Ingest::VT_FRAME1, frame1);
  }
  #[inline]
  pub fn add_frame2(&mut self, frame2: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(AttitudeSet_Ingest::VT_FRAME2, frame2);
  }
  #[inline]
  pub fn add_numPoints(&mut self, numPoints: i32) {
    self.fbb_.push_slot::<i32>(AttitudeSet_Ingest::VT_NUMPOINTS, numPoints, 0);
  }
  #[inline]
  pub fn add_stepSize(&mut self, stepSize: i32) {
    self.fbb_.push_slot::<i32>(AttitudeSet_Ingest::VT_STEPSIZE, stepSize, 0);
  }
  #[inline]
  pub fn add_precAngleInit(&mut self, precAngleInit: f64) {
    self.fbb_.push_slot::<f64>(AttitudeSet_Ingest::VT_PRECANGLEINIT, precAngleInit, 0.0);
  }
  #[inline]
  pub fn add_spinAngleInit(&mut self, spinAngleInit: f64) {
    self.fbb_.push_slot::<f64>(AttitudeSet_Ingest::VT_SPINANGLEINIT, spinAngleInit, 0.0);
  }
  #[inline]
  pub fn add_eulerRotSeq(&mut self, eulerRotSeq: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(AttitudeSet_Ingest::VT_EULERROTSEQ, eulerRotSeq);
  }
  #[inline]
  pub fn add_attitudeList(&mut self, attitudeList: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<&'b  str>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(AttitudeSet_Ingest::VT_ATTITUDELIST, attitudeList);
  }
  #[inline]
  pub fn add_interpolator(&mut self, interpolator: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(AttitudeSet_Ingest::VT_INTERPOLATOR, interpolator);
  }
  #[inline]
  pub fn add_interpolatorDegree(&mut self, interpolatorDegree: i32) {
    self.fbb_.push_slot::<i32>(AttitudeSet_Ingest::VT_INTERPOLATORDEGREE, interpolatorDegree, 0);
  }
  #[inline]
  pub fn add_notes(&mut self, notes: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(AttitudeSet_Ingest::VT_NOTES, notes);
  }
  #[inline]
  pub fn add_createdAt(&mut self, createdAt: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(AttitudeSet_Ingest::VT_CREATEDAT, createdAt);
  }
  #[inline]
  pub fn add_createdBy(&mut self, createdBy: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(AttitudeSet_Ingest::VT_CREATEDBY, createdBy);
  }
  #[inline]
  pub fn add_source(&mut self, source: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(AttitudeSet_Ingest::VT_SOURCE, source);
  }
  #[inline]
  pub fn add_origin(&mut self, origin: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(AttitudeSet_Ingest::VT_ORIGIN, origin);
  }
  #[inline]
  pub fn add_dataMode(&mut self, dataMode: AttitudeSet_Ingest_dataMode_Enum) {
    self.fbb_.push_slot::<AttitudeSet_Ingest_dataMode_Enum>(AttitudeSet_Ingest::VT_DATAMODE, dataMode, AttitudeSet_Ingest_dataMode_Enum::REAL);
  }
  #[inline]
  pub fn add_origNetwork(&mut self, origNetwork: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(AttitudeSet_Ingest::VT_ORIGNETWORK, origNetwork);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> AttitudeSet_IngestBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    AttitudeSet_IngestBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<AttitudeSet_Ingest<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for AttitudeSet_Ingest<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("AttitudeSet_Ingest");
      ds.field("id", &self.id());
      ds.field("classificationMarking", &self.classificationMarking());
      ds.field("idOnOrbit", &self.idOnOrbit());
      ds.field("satNo", &self.satNo());
      ds.field("origObjectId", &self.origObjectId());
      ds.field("type_", &self.type_());
      ds.field("esId", &self.esId());
      ds.field("asRef", &self.asRef());
      ds.field("idSensor", &self.idSensor());
      ds.field("origSensorId", &self.origSensorId());
      ds.field("startTime", &self.startTime());
      ds.field("endTime", &self.endTime());
      ds.field("frame1", &self.frame1());
      ds.field("frame2", &self.frame2());
      ds.field("numPoints", &self.numPoints());
      ds.field("stepSize", &self.stepSize());
      ds.field("precAngleInit", &self.precAngleInit());
      ds.field("spinAngleInit", &self.spinAngleInit());
      ds.field("eulerRotSeq", &self.eulerRotSeq());
      ds.field("attitudeList", &self.attitudeList());
      ds.field("interpolator", &self.interpolator());
      ds.field("interpolatorDegree", &self.interpolatorDegree());
      ds.field("notes", &self.notes());
      ds.field("createdAt", &self.createdAt());
      ds.field("createdBy", &self.createdBy());
      ds.field("source", &self.source());
      ds.field("origin", &self.origin());
      ds.field("dataMode", &self.dataMode());
      ds.field("origNetwork", &self.origNetwork());
      ds.finish()
  }
}
#[non_exhaustive]
#[derive(Debug, Clone, PartialEq)]
pub struct AttitudeSet_IngestT {
  pub id: Option<String>,
  pub classificationMarking: Option<String>,
  pub idOnOrbit: Option<String>,
  pub satNo: i32,
  pub origObjectId: Option<String>,
  pub type_: Option<String>,
  pub esId: Option<String>,
  pub asRef: Option<Vec<String>>,
  pub idSensor: Option<String>,
  pub origSensorId: Option<String>,
  pub startTime: Option<String>,
  pub endTime: Option<String>,
  pub frame1: Option<String>,
  pub frame2: Option<String>,
  pub numPoints: i32,
  pub stepSize: i32,
  pub precAngleInit: f64,
  pub spinAngleInit: f64,
  pub eulerRotSeq: Option<String>,
  pub attitudeList: Option<Vec<String>>,
  pub interpolator: Option<String>,
  pub interpolatorDegree: i32,
  pub notes: Option<String>,
  pub createdAt: Option<String>,
  pub createdBy: Option<String>,
  pub source: Option<String>,
  pub origin: Option<String>,
  pub dataMode: AttitudeSet_Ingest_dataMode_Enum,
  pub origNetwork: Option<String>,
}
impl Default for AttitudeSet_IngestT {
  fn default() -> Self {
    Self {
      id: None,
      classificationMarking: None,
      idOnOrbit: None,
      satNo: 0,
      origObjectId: None,
      type_: None,
      esId: None,
      asRef: None,
      idSensor: None,
      origSensorId: None,
      startTime: None,
      endTime: None,
      frame1: None,
      frame2: None,
      numPoints: 0,
      stepSize: 0,
      precAngleInit: 0.0,
      spinAngleInit: 0.0,
      eulerRotSeq: None,
      attitudeList: None,
      interpolator: None,
      interpolatorDegree: 0,
      notes: None,
      createdAt: None,
      createdBy: None,
      source: None,
      origin: None,
      dataMode: AttitudeSet_Ingest_dataMode_Enum::REAL,
      origNetwork: None,
    }
  }
}
impl AttitudeSet_IngestT {
  pub fn pack<'b, A: flatbuffers::Allocator + 'b>(
    &self,
    _fbb: &mut flatbuffers::FlatBufferBuilder<'b, A>
  ) -> flatbuffers::WIPOffset<AttitudeSet_Ingest<'b>> {
    let id = self.id.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let classificationMarking = self.classificationMarking.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let idOnOrbit = self.idOnOrbit.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let satNo = self.satNo;
    let origObjectId = self.origObjectId.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let type_ = self.type_.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let esId = self.esId.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let asRef = self.asRef.as_ref().map(|x|{
      let w: Vec<_> = x.iter().map(|s| _fbb.create_string(s)).collect();_fbb.create_vector(&w)
    });
    let idSensor = self.idSensor.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let origSensorId = self.origSensorId.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let startTime = self.startTime.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let endTime = self.endTime.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let frame1 = self.frame1.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let frame2 = self.frame2.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let numPoints = self.numPoints;
    let stepSize = self.stepSize;
    let precAngleInit = self.precAngleInit;
    let spinAngleInit = self.spinAngleInit;
    let eulerRotSeq = self.eulerRotSeq.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let attitudeList = self.attitudeList.as_ref().map(|x|{
      let w: Vec<_> = x.iter().map(|s| _fbb.create_string(s)).collect();_fbb.create_vector(&w)
    });
    let interpolator = self.interpolator.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let interpolatorDegree = self.interpolatorDegree;
    let notes = self.notes.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let createdAt = self.createdAt.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let createdBy = self.createdBy.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let source = self.source.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let origin = self.origin.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let dataMode = self.dataMode;
    let origNetwork = self.origNetwork.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    AttitudeSet_Ingest::create(_fbb, &AttitudeSet_IngestArgs{
      id,
      classificationMarking,
      idOnOrbit,
      satNo,
      origObjectId,
      type_,
      esId,
      asRef,
      idSensor,
      origSensorId,
      startTime,
      endTime,
      frame1,
      frame2,
      numPoints,
      stepSize,
      precAngleInit,
      spinAngleInit,
      eulerRotSeq,
      attitudeList,
      interpolator,
      interpolatorDegree,
      notes,
      createdAt,
      createdBy,
      source,
      origin,
      dataMode,
      origNetwork,
    })
  }
}
#[inline]
/// Verifies that a buffer of bytes contains a `AttitudeSet_Ingest`
/// and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_attitude_set_ingest_unchecked`.
pub fn root_as_attitude_set_ingest(buf: &[u8]) -> Result<AttitudeSet_Ingest, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root::<AttitudeSet_Ingest>(buf)
}
#[inline]
/// Verifies that a buffer of bytes contains a size prefixed
/// `AttitudeSet_Ingest` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `size_prefixed_root_as_attitude_set_ingest_unchecked`.
pub fn size_prefixed_root_as_attitude_set_ingest(buf: &[u8]) -> Result<AttitudeSet_Ingest, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root::<AttitudeSet_Ingest>(buf)
}
#[inline]
/// Verifies, with the given options, that a buffer of bytes
/// contains a `AttitudeSet_Ingest` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_attitude_set_ingest_unchecked`.
pub fn root_as_attitude_set_ingest_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<AttitudeSet_Ingest<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root_with_opts::<AttitudeSet_Ingest<'b>>(opts, buf)
}
#[inline]
/// Verifies, with the given verifier options, that a buffer of
/// bytes contains a size prefixed `AttitudeSet_Ingest` and returns
/// it. Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_attitude_set_ingest_unchecked`.
pub fn size_prefixed_root_as_attitude_set_ingest_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<AttitudeSet_Ingest<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root_with_opts::<AttitudeSet_Ingest<'b>>(opts, buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a AttitudeSet_Ingest and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid `AttitudeSet_Ingest`.
pub unsafe fn root_as_attitude_set_ingest_unchecked(buf: &[u8]) -> AttitudeSet_Ingest {
  flatbuffers::root_unchecked::<AttitudeSet_Ingest>(buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a size prefixed AttitudeSet_Ingest and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid size prefixed `AttitudeSet_Ingest`.
pub unsafe fn size_prefixed_root_as_attitude_set_ingest_unchecked(buf: &[u8]) -> AttitudeSet_Ingest {
  flatbuffers::size_prefixed_root_unchecked::<AttitudeSet_Ingest>(buf)
}
pub const ATTITUDE_SET_INGEST_IDENTIFIER: &str = "ATTI";

#[inline]
pub fn attitude_set_ingest_buffer_has_identifier(buf: &[u8]) -> bool {
  flatbuffers::buffer_has_identifier(buf, ATTITUDE_SET_INGEST_IDENTIFIER, false)
}

#[inline]
pub fn attitude_set_ingest_size_prefixed_buffer_has_identifier(buf: &[u8]) -> bool {
  flatbuffers::buffer_has_identifier(buf, ATTITUDE_SET_INGEST_IDENTIFIER, true)
}

#[inline]
pub fn finish_attitude_set_ingest_buffer<'a, 'b, A: flatbuffers::Allocator + 'a>(
    fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
    root: flatbuffers::WIPOffset<AttitudeSet_Ingest<'a>>) {
  fbb.finish(root, Some(ATTITUDE_SET_INGEST_IDENTIFIER));
}

#[inline]
pub fn finish_size_prefixed_attitude_set_ingest_buffer<'a, 'b, A: flatbuffers::Allocator + 'a>(fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>, root: flatbuffers::WIPOffset<AttitudeSet_Ingest<'a>>) {
  fbb.finish_size_prefixed(root, Some(ATTITUDE_SET_INGEST_IDENTIFIER));
}
