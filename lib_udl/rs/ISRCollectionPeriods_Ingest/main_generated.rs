// automatically generated by the FlatBuffers compiler, do not modify


// @generated

use core::mem;
use core::cmp::Ordering;

extern crate flatbuffers;
use self::flatbuffers::{EndianScalar, Follow};

pub enum ISRCollectionPeriods_IngestOffset {}
#[derive(Copy, Clone, PartialEq)]

/// /// Tasking collection periods.
pub struct ISRCollectionPeriods_Ingest<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for ISRCollectionPeriods_Ingest<'a> {
  type Inner = ISRCollectionPeriods_Ingest<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> ISRCollectionPeriods_Ingest<'a> {
  pub const VT_PLANNED: flatbuffers::VOffsetT = 4;
  pub const VT_ACTUAL: flatbuffers::VOffsetT = 6;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    ISRCollectionPeriods_Ingest { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args ISRCollectionPeriods_IngestArgs<'args>
  ) -> flatbuffers::WIPOffset<ISRCollectionPeriods_Ingest<'bldr>> {
    let mut builder = ISRCollectionPeriods_IngestBuilder::new(_fbb);
    if let Some(x) = args.actual { builder.add_actual(x); }
    if let Some(x) = args.planned { builder.add_planned(x); }
    builder.finish()
  }

  pub fn unpack(&self) -> ISRCollectionPeriods_IngestT {
    let planned = self.planned().map(|x| {
      x.to_string()
    });
    let actual = self.actual().map(|x| {
      x.iter().map(|s| s.to_string()).collect()
    });
    ISRCollectionPeriods_IngestT {
      planned,
      actual,
    }
  }

  /// No description provided.
  /// Example: /// Example: No example provided.
  /// Constraints: No constraints specified.
  #[inline]
  pub fn planned(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(ISRCollectionPeriods_Ingest::VT_PLANNED, None)}
  }
  /// Actual start and stop for the collection.
  /// Example: /// Example: No example provided.
  /// Constraints: No constraints specified.
  #[inline]
  pub fn actual(&self) -> Option<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>(ISRCollectionPeriods_Ingest::VT_ACTUAL, None)}
  }
}

impl flatbuffers::Verifiable for ISRCollectionPeriods_Ingest<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("planned", Self::VT_PLANNED, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<&'_ str>>>>("actual", Self::VT_ACTUAL, false)?
     .finish();
    Ok(())
  }
}
pub struct ISRCollectionPeriods_IngestArgs<'a> {
    pub planned: Option<flatbuffers::WIPOffset<&'a str>>,
    pub actual: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>,
}
impl<'a> Default for ISRCollectionPeriods_IngestArgs<'a> {
  #[inline]
  fn default() -> Self {
    ISRCollectionPeriods_IngestArgs {
      planned: None,
      actual: None,
    }
  }
}

pub struct ISRCollectionPeriods_IngestBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> ISRCollectionPeriods_IngestBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_planned(&mut self, planned: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(ISRCollectionPeriods_Ingest::VT_PLANNED, planned);
  }
  #[inline]
  pub fn add_actual(&mut self, actual: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<&'b  str>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(ISRCollectionPeriods_Ingest::VT_ACTUAL, actual);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> ISRCollectionPeriods_IngestBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    ISRCollectionPeriods_IngestBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<ISRCollectionPeriods_Ingest<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for ISRCollectionPeriods_Ingest<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("ISRCollectionPeriods_Ingest");
      ds.field("planned", &self.planned());
      ds.field("actual", &self.actual());
      ds.finish()
  }
}
#[non_exhaustive]
#[derive(Debug, Clone, PartialEq)]
pub struct ISRCollectionPeriods_IngestT {
  pub planned: Option<String>,
  pub actual: Option<Vec<String>>,
}
impl Default for ISRCollectionPeriods_IngestT {
  fn default() -> Self {
    Self {
      planned: None,
      actual: None,
    }
  }
}
impl ISRCollectionPeriods_IngestT {
  pub fn pack<'b, A: flatbuffers::Allocator + 'b>(
    &self,
    _fbb: &mut flatbuffers::FlatBufferBuilder<'b, A>
  ) -> flatbuffers::WIPOffset<ISRCollectionPeriods_Ingest<'b>> {
    let planned = self.planned.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let actual = self.actual.as_ref().map(|x|{
      let w: Vec<_> = x.iter().map(|s| _fbb.create_string(s)).collect();_fbb.create_vector(&w)
    });
    ISRCollectionPeriods_Ingest::create(_fbb, &ISRCollectionPeriods_IngestArgs{
      planned,
      actual,
    })
  }
}
#[inline]
/// Verifies that a buffer of bytes contains a `ISRCollectionPeriods_Ingest`
/// and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_isrcollection_periods_ingest_unchecked`.
pub fn root_as_isrcollection_periods_ingest(buf: &[u8]) -> Result<ISRCollectionPeriods_Ingest, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root::<ISRCollectionPeriods_Ingest>(buf)
}
#[inline]
/// Verifies that a buffer of bytes contains a size prefixed
/// `ISRCollectionPeriods_Ingest` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `size_prefixed_root_as_isrcollection_periods_ingest_unchecked`.
pub fn size_prefixed_root_as_isrcollection_periods_ingest(buf: &[u8]) -> Result<ISRCollectionPeriods_Ingest, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root::<ISRCollectionPeriods_Ingest>(buf)
}
#[inline]
/// Verifies, with the given options, that a buffer of bytes
/// contains a `ISRCollectionPeriods_Ingest` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_isrcollection_periods_ingest_unchecked`.
pub fn root_as_isrcollection_periods_ingest_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<ISRCollectionPeriods_Ingest<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root_with_opts::<ISRCollectionPeriods_Ingest<'b>>(opts, buf)
}
#[inline]
/// Verifies, with the given verifier options, that a buffer of
/// bytes contains a size prefixed `ISRCollectionPeriods_Ingest` and returns
/// it. Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_isrcollection_periods_ingest_unchecked`.
pub fn size_prefixed_root_as_isrcollection_periods_ingest_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<ISRCollectionPeriods_Ingest<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root_with_opts::<ISRCollectionPeriods_Ingest<'b>>(opts, buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a ISRCollectionPeriods_Ingest and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid `ISRCollectionPeriods_Ingest`.
pub unsafe fn root_as_isrcollection_periods_ingest_unchecked(buf: &[u8]) -> ISRCollectionPeriods_Ingest {
  flatbuffers::root_unchecked::<ISRCollectionPeriods_Ingest>(buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a size prefixed ISRCollectionPeriods_Ingest and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid size prefixed `ISRCollectionPeriods_Ingest`.
pub unsafe fn size_prefixed_root_as_isrcollection_periods_ingest_unchecked(buf: &[u8]) -> ISRCollectionPeriods_Ingest {
  flatbuffers::size_prefixed_root_unchecked::<ISRCollectionPeriods_Ingest>(buf)
}
pub const ISRCOLLECTION_PERIODS_INGEST_IDENTIFIER: &str = "ISRC";

#[inline]
pub fn isrcollection_periods_ingest_buffer_has_identifier(buf: &[u8]) -> bool {
  flatbuffers::buffer_has_identifier(buf, ISRCOLLECTION_PERIODS_INGEST_IDENTIFIER, false)
}

#[inline]
pub fn isrcollection_periods_ingest_size_prefixed_buffer_has_identifier(buf: &[u8]) -> bool {
  flatbuffers::buffer_has_identifier(buf, ISRCOLLECTION_PERIODS_INGEST_IDENTIFIER, true)
}

#[inline]
pub fn finish_isrcollection_periods_ingest_buffer<'a, 'b, A: flatbuffers::Allocator + 'a>(
    fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
    root: flatbuffers::WIPOffset<ISRCollectionPeriods_Ingest<'a>>) {
  fbb.finish(root, Some(ISRCOLLECTION_PERIODS_INGEST_IDENTIFIER));
}

#[inline]
pub fn finish_size_prefixed_isrcollection_periods_ingest_buffer<'a, 'b, A: flatbuffers::Allocator + 'a>(fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>, root: flatbuffers::WIPOffset<ISRCollectionPeriods_Ingest<'a>>) {
  fbb.finish_size_prefixed(root, Some(ISRCOLLECTION_PERIODS_INGEST_IDENTIFIER));
}
