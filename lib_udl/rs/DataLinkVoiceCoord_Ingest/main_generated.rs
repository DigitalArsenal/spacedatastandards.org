// automatically generated by the FlatBuffers compiler, do not modify


// @generated

use core::mem;
use core::cmp::Ordering;

extern crate flatbuffers;
use self::flatbuffers::{EndianScalar, Follow};

pub enum DataLinkVoiceCoord_IngestOffset {}
#[derive(Copy, Clone, PartialEq)]

/// /// Collection of information regarding the function, frequency, and priority of interface control and coordination nets for this data link message. There can be 1 to many DataLinkVoiceCoord collections within the datalink service.
pub struct DataLinkVoiceCoord_Ingest<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for DataLinkVoiceCoord_Ingest<'a> {
  type Inner = DataLinkVoiceCoord_Ingest<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> DataLinkVoiceCoord_Ingest<'a> {
  pub const VT_VOICENETDES: flatbuffers::VOffsetT = 4;
  pub const VT_FREQDES: flatbuffers::VOffsetT = 6;
  pub const VT_COMMPRI: flatbuffers::VOffsetT = 8;
  pub const VT_TELEFREQNUMS: flatbuffers::VOffsetT = 10;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    DataLinkVoiceCoord_Ingest { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args DataLinkVoiceCoord_IngestArgs<'args>
  ) -> flatbuffers::WIPOffset<DataLinkVoiceCoord_Ingest<'bldr>> {
    let mut builder = DataLinkVoiceCoord_IngestBuilder::new(_fbb);
    if let Some(x) = args.teleFreqNums { builder.add_teleFreqNums(x); }
    if let Some(x) = args.commPri { builder.add_commPri(x); }
    if let Some(x) = args.freqDes { builder.add_freqDes(x); }
    if let Some(x) = args.voiceNetDes { builder.add_voiceNetDes(x); }
    builder.finish()
  }

  pub fn unpack(&self) -> DataLinkVoiceCoord_IngestT {
    let voiceNetDes = self.voiceNetDes().map(|x| {
      x.to_string()
    });
    let freqDes = self.freqDes().map(|x| {
      x.to_string()
    });
    let commPri = self.commPri().map(|x| {
      x.to_string()
    });
    let teleFreqNums = self.teleFreqNums().map(|x| {
      x.iter().map(|s| s.to_string()).collect()
    });
    DataLinkVoiceCoord_IngestT {
      voiceNetDes,
      freqDes,
      commPri,
      teleFreqNums,
    }
  }

  /// Designator assigned to a voice interface control and coordination net for this data link message (e.g. ADCCN, DCN, VPN, etc.).
  /// Example: /// Example: VPN
  /// Constraints: Minimum length = 0, Maximum length = 5
  #[inline]
  pub fn voiceNetDes(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(DataLinkVoiceCoord_Ingest::VT_VOICENETDES, None)}
  }
  /// Designator used in nonsecure communications to refer to a radio frequency for this data link message.
  /// Example: /// Example: ST300A
  /// Constraints: Minimum length = 0, Maximum length = 8
  #[inline]
  pub fn freqDes(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(DataLinkVoiceCoord_Ingest::VT_FREQDES, None)}
  }
  /// Priority of a communication circuit, channel or frequency for this data link message such as P (Primary), M (Monitor), etc.
  /// Example: /// Example: P
  /// Constraints: Minimum length = 0, Maximum length = 1
  #[inline]
  pub fn commPri(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(DataLinkVoiceCoord_Ingest::VT_COMMPRI, None)}
  }
  /// Array of telephone numbers or contact frequencies used for interface control for this data link message.
  /// Example: /// Example: ['TEL:804-555-4142', 'TEL:804-867-5309']
  /// Constraints: No constraints specified.
  #[inline]
  pub fn teleFreqNums(&self) -> Option<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>(DataLinkVoiceCoord_Ingest::VT_TELEFREQNUMS, None)}
  }
}

impl flatbuffers::Verifiable for DataLinkVoiceCoord_Ingest<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("voiceNetDes", Self::VT_VOICENETDES, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("freqDes", Self::VT_FREQDES, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("commPri", Self::VT_COMMPRI, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<&'_ str>>>>("teleFreqNums", Self::VT_TELEFREQNUMS, false)?
     .finish();
    Ok(())
  }
}
pub struct DataLinkVoiceCoord_IngestArgs<'a> {
    pub voiceNetDes: Option<flatbuffers::WIPOffset<&'a str>>,
    pub freqDes: Option<flatbuffers::WIPOffset<&'a str>>,
    pub commPri: Option<flatbuffers::WIPOffset<&'a str>>,
    pub teleFreqNums: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>,
}
impl<'a> Default for DataLinkVoiceCoord_IngestArgs<'a> {
  #[inline]
  fn default() -> Self {
    DataLinkVoiceCoord_IngestArgs {
      voiceNetDes: None,
      freqDes: None,
      commPri: None,
      teleFreqNums: None,
    }
  }
}

pub struct DataLinkVoiceCoord_IngestBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> DataLinkVoiceCoord_IngestBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_voiceNetDes(&mut self, voiceNetDes: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(DataLinkVoiceCoord_Ingest::VT_VOICENETDES, voiceNetDes);
  }
  #[inline]
  pub fn add_freqDes(&mut self, freqDes: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(DataLinkVoiceCoord_Ingest::VT_FREQDES, freqDes);
  }
  #[inline]
  pub fn add_commPri(&mut self, commPri: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(DataLinkVoiceCoord_Ingest::VT_COMMPRI, commPri);
  }
  #[inline]
  pub fn add_teleFreqNums(&mut self, teleFreqNums: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<&'b  str>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(DataLinkVoiceCoord_Ingest::VT_TELEFREQNUMS, teleFreqNums);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> DataLinkVoiceCoord_IngestBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    DataLinkVoiceCoord_IngestBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<DataLinkVoiceCoord_Ingest<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for DataLinkVoiceCoord_Ingest<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("DataLinkVoiceCoord_Ingest");
      ds.field("voiceNetDes", &self.voiceNetDes());
      ds.field("freqDes", &self.freqDes());
      ds.field("commPri", &self.commPri());
      ds.field("teleFreqNums", &self.teleFreqNums());
      ds.finish()
  }
}
#[non_exhaustive]
#[derive(Debug, Clone, PartialEq)]
pub struct DataLinkVoiceCoord_IngestT {
  pub voiceNetDes: Option<String>,
  pub freqDes: Option<String>,
  pub commPri: Option<String>,
  pub teleFreqNums: Option<Vec<String>>,
}
impl Default for DataLinkVoiceCoord_IngestT {
  fn default() -> Self {
    Self {
      voiceNetDes: None,
      freqDes: None,
      commPri: None,
      teleFreqNums: None,
    }
  }
}
impl DataLinkVoiceCoord_IngestT {
  pub fn pack<'b, A: flatbuffers::Allocator + 'b>(
    &self,
    _fbb: &mut flatbuffers::FlatBufferBuilder<'b, A>
  ) -> flatbuffers::WIPOffset<DataLinkVoiceCoord_Ingest<'b>> {
    let voiceNetDes = self.voiceNetDes.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let freqDes = self.freqDes.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let commPri = self.commPri.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let teleFreqNums = self.teleFreqNums.as_ref().map(|x|{
      let w: Vec<_> = x.iter().map(|s| _fbb.create_string(s)).collect();_fbb.create_vector(&w)
    });
    DataLinkVoiceCoord_Ingest::create(_fbb, &DataLinkVoiceCoord_IngestArgs{
      voiceNetDes,
      freqDes,
      commPri,
      teleFreqNums,
    })
  }
}
#[inline]
/// Verifies that a buffer of bytes contains a `DataLinkVoiceCoord_Ingest`
/// and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_data_link_voice_coord_ingest_unchecked`.
pub fn root_as_data_link_voice_coord_ingest(buf: &[u8]) -> Result<DataLinkVoiceCoord_Ingest, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root::<DataLinkVoiceCoord_Ingest>(buf)
}
#[inline]
/// Verifies that a buffer of bytes contains a size prefixed
/// `DataLinkVoiceCoord_Ingest` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `size_prefixed_root_as_data_link_voice_coord_ingest_unchecked`.
pub fn size_prefixed_root_as_data_link_voice_coord_ingest(buf: &[u8]) -> Result<DataLinkVoiceCoord_Ingest, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root::<DataLinkVoiceCoord_Ingest>(buf)
}
#[inline]
/// Verifies, with the given options, that a buffer of bytes
/// contains a `DataLinkVoiceCoord_Ingest` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_data_link_voice_coord_ingest_unchecked`.
pub fn root_as_data_link_voice_coord_ingest_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<DataLinkVoiceCoord_Ingest<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root_with_opts::<DataLinkVoiceCoord_Ingest<'b>>(opts, buf)
}
#[inline]
/// Verifies, with the given verifier options, that a buffer of
/// bytes contains a size prefixed `DataLinkVoiceCoord_Ingest` and returns
/// it. Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_data_link_voice_coord_ingest_unchecked`.
pub fn size_prefixed_root_as_data_link_voice_coord_ingest_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<DataLinkVoiceCoord_Ingest<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root_with_opts::<DataLinkVoiceCoord_Ingest<'b>>(opts, buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a DataLinkVoiceCoord_Ingest and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid `DataLinkVoiceCoord_Ingest`.
pub unsafe fn root_as_data_link_voice_coord_ingest_unchecked(buf: &[u8]) -> DataLinkVoiceCoord_Ingest {
  flatbuffers::root_unchecked::<DataLinkVoiceCoord_Ingest>(buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a size prefixed DataLinkVoiceCoord_Ingest and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid size prefixed `DataLinkVoiceCoord_Ingest`.
pub unsafe fn size_prefixed_root_as_data_link_voice_coord_ingest_unchecked(buf: &[u8]) -> DataLinkVoiceCoord_Ingest {
  flatbuffers::size_prefixed_root_unchecked::<DataLinkVoiceCoord_Ingest>(buf)
}
pub const DATA_LINK_VOICE_COORD_INGEST_IDENTIFIER: &str = "DATA";

#[inline]
pub fn data_link_voice_coord_ingest_buffer_has_identifier(buf: &[u8]) -> bool {
  flatbuffers::buffer_has_identifier(buf, DATA_LINK_VOICE_COORD_INGEST_IDENTIFIER, false)
}

#[inline]
pub fn data_link_voice_coord_ingest_size_prefixed_buffer_has_identifier(buf: &[u8]) -> bool {
  flatbuffers::buffer_has_identifier(buf, DATA_LINK_VOICE_COORD_INGEST_IDENTIFIER, true)
}

#[inline]
pub fn finish_data_link_voice_coord_ingest_buffer<'a, 'b, A: flatbuffers::Allocator + 'a>(
    fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
    root: flatbuffers::WIPOffset<DataLinkVoiceCoord_Ingest<'a>>) {
  fbb.finish(root, Some(DATA_LINK_VOICE_COORD_INGEST_IDENTIFIER));
}

#[inline]
pub fn finish_size_prefixed_data_link_voice_coord_ingest_buffer<'a, 'b, A: flatbuffers::Allocator + 'a>(fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>, root: flatbuffers::WIPOffset<DataLinkVoiceCoord_Ingest<'a>>) {
  fbb.finish_size_prefixed(root, Some(DATA_LINK_VOICE_COORD_INGEST_IDENTIFIER));
}
