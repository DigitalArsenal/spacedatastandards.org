// automatically generated by the FlatBuffers compiler, do not modify


// @generated

use core::mem;
use core::cmp::Ordering;

extern crate flatbuffers;
use self::flatbuffers::{EndianScalar, Follow};

#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
pub const ENUM_MIN_SERADATA_COMM_DETAILS_FULL_DATA_MODE_ENUM: i8 = 0;
#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
pub const ENUM_MAX_SERADATA_COMM_DETAILS_FULL_DATA_MODE_ENUM: i8 = 3;
#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
#[allow(non_camel_case_types)]
pub const ENUM_VALUES_SERADATA_COMM_DETAILS_FULL_DATA_MODE_ENUM: [SeradataCommDetails_Full_dataMode_Enum; 4] = [
  SeradataCommDetails_Full_dataMode_Enum::REAL,
  SeradataCommDetails_Full_dataMode_Enum::TEST,
  SeradataCommDetails_Full_dataMode_Enum::SIMULATED,
  SeradataCommDetails_Full_dataMode_Enum::EXERCISE,
];

#[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, Default)]
#[repr(transparent)]
pub struct SeradataCommDetails_Full_dataMode_Enum(pub i8);
#[allow(non_upper_case_globals)]
impl SeradataCommDetails_Full_dataMode_Enum {
  /// Data collected or produced that pertains to real-world objects, events, and analysis.
  pub const REAL: Self = Self(0);
  /// Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  pub const TEST: Self = Self(1);
  /// Synthetic data generated by a model to mimic real-world datasets.
  pub const SIMULATED: Self = Self(2);
  /// Data pertaining to a government or military exercise. The data may include both real and simulated data.
  pub const EXERCISE: Self = Self(3);

  pub const ENUM_MIN: i8 = 0;
  pub const ENUM_MAX: i8 = 3;
  pub const ENUM_VALUES: &'static [Self] = &[
    Self::REAL,
    Self::TEST,
    Self::SIMULATED,
    Self::EXERCISE,
  ];
  /// Returns the variant's name or "" if unknown.
  pub fn variant_name(self) -> Option<&'static str> {
    match self {
      Self::REAL => Some("REAL"),
      Self::TEST => Some("TEST"),
      Self::SIMULATED => Some("SIMULATED"),
      Self::EXERCISE => Some("EXERCISE"),
      _ => None,
    }
  }
}
impl core::fmt::Debug for SeradataCommDetails_Full_dataMode_Enum {
  fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
    if let Some(name) = self.variant_name() {
      f.write_str(name)
    } else {
      f.write_fmt(format_args!("<UNKNOWN {:?}>", self.0))
    }
  }
}
impl<'a> flatbuffers::Follow<'a> for SeradataCommDetails_Full_dataMode_Enum {
  type Inner = Self;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    let b = flatbuffers::read_scalar_at::<i8>(buf, loc);
    Self(b)
  }
}

impl flatbuffers::Push for SeradataCommDetails_Full_dataMode_Enum {
    type Output = SeradataCommDetails_Full_dataMode_Enum;
    #[inline]
    unsafe fn push(&self, dst: &mut [u8], _written_len: usize) {
        flatbuffers::emplace_scalar::<i8>(dst, self.0);
    }
}

impl flatbuffers::EndianScalar for SeradataCommDetails_Full_dataMode_Enum {
  type Scalar = i8;
  #[inline]
  fn to_little_endian(self) -> i8 {
    self.0.to_le()
  }
  #[inline]
  #[allow(clippy::wrong_self_convention)]
  fn from_little_endian(v: i8) -> Self {
    let b = i8::from_le(v);
    Self(b)
  }
}

impl<'a> flatbuffers::Verifiable for SeradataCommDetails_Full_dataMode_Enum {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    i8::run_verifier(v, pos)
  }
}

impl flatbuffers::SimpleToVerifyInSlice for SeradataCommDetails_Full_dataMode_Enum {}
pub enum SeradataCommDetails_FullOffset {}
#[derive(Copy, Clone, PartialEq)]

/// /// Seradata-compiled information on communications payloads.
pub struct SeradataCommDetails_Full<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for SeradataCommDetails_Full<'a> {
  type Inner = SeradataCommDetails_Full<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> SeradataCommDetails_Full<'a> {
  pub const VT_ID: flatbuffers::VOffsetT = 4;
  pub const VT_IDCOMM: flatbuffers::VOffsetT = 6;
  pub const VT_CLASSIFICATIONMARKING: flatbuffers::VOffsetT = 8;
  pub const VT_SPACECRAFTID: flatbuffers::VOffsetT = 10;
  pub const VT_BAND: flatbuffers::VOffsetT = 12;
  pub const VT_SOLIDSTATEPOWERAMP: flatbuffers::VOffsetT = 14;
  pub const VT_TRAVELINGWAVETUBEAMPLIFIER: flatbuffers::VOffsetT = 16;
  pub const VT_GATEWAYUPLINKFROM: flatbuffers::VOffsetT = 18;
  pub const VT_GATEWAYUPLINKTO: flatbuffers::VOffsetT = 20;
  pub const VT_GATEWAYDOWNLINKFROM: flatbuffers::VOffsetT = 22;
  pub const VT_GATEWAYDOWNLINKTO: flatbuffers::VOffsetT = 24;
  pub const VT_POLARIZATION: flatbuffers::VOffsetT = 26;
  pub const VT_EIRP: flatbuffers::VOffsetT = 28;
  pub const VT_BANDWIDTH: flatbuffers::VOffsetT = 30;
  pub const VT_NUMOPERATIONALTRANSPONDERS: flatbuffers::VOffsetT = 32;
  pub const VT_NUMSPARETRANSPONDERS: flatbuffers::VOffsetT = 34;
  pub const VT_HOSTEDFORCOMPANYORGID: flatbuffers::VOffsetT = 36;
  pub const VT_MANUFACTURERORGID: flatbuffers::VOffsetT = 38;
  pub const VT_TRADELEASEORGID: flatbuffers::VOffsetT = 40;
  pub const VT_NUM36MHZEQUIVALENTTRANSPONDERS: flatbuffers::VOffsetT = 42;
  pub const VT_HTSNUMUSERSPOTBEAMS: flatbuffers::VOffsetT = 44;
  pub const VT_HTSUSERDOWNLINKBANDWIDTHPERBEAM: flatbuffers::VOffsetT = 46;
  pub const VT_HTSUSERUPLINKBANDWIDTHPERBEAM: flatbuffers::VOffsetT = 48;
  pub const VT_ESTHTSTOTALUSERDOWNLINKBANDWIDTHPERBEAM: flatbuffers::VOffsetT = 50;
  pub const VT_ESTHTSTOTALUSERUPLINKBANDWIDTHPERBEAM: flatbuffers::VOffsetT = 52;
  pub const VT_ESTHTSTOTALCAPACITY: flatbuffers::VOffsetT = 54;
  pub const VT_USERDOWNLINKFROM: flatbuffers::VOffsetT = 56;
  pub const VT_USERDOWNLINKTO: flatbuffers::VOffsetT = 58;
  pub const VT_USERUPLINKFROM: flatbuffers::VOffsetT = 60;
  pub const VT_USERUPLINKTO: flatbuffers::VOffsetT = 62;
  pub const VT_PAYLOADNOTES: flatbuffers::VOffsetT = 64;
  pub const VT_SOURCE: flatbuffers::VOffsetT = 66;
  pub const VT_ORIGIN: flatbuffers::VOffsetT = 68;
  pub const VT_ORIGNETWORK: flatbuffers::VOffsetT = 70;
  pub const VT_DATAMODE: flatbuffers::VOffsetT = 72;
  pub const VT_CREATEDAT: flatbuffers::VOffsetT = 74;
  pub const VT_CREATEDBY: flatbuffers::VOffsetT = 76;
  pub const VT_UPDATEDAT: flatbuffers::VOffsetT = 78;
  pub const VT_UPDATEDBY: flatbuffers::VOffsetT = 80;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    SeradataCommDetails_Full { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args SeradataCommDetails_FullArgs<'args>
  ) -> flatbuffers::WIPOffset<SeradataCommDetails_Full<'bldr>> {
    let mut builder = SeradataCommDetails_FullBuilder::new(_fbb);
    builder.add_userUplinkTo(args.userUplinkTo);
    builder.add_userUplinkFrom(args.userUplinkFrom);
    builder.add_userDownlinkTo(args.userDownlinkTo);
    builder.add_userDownlinkFrom(args.userDownlinkFrom);
    builder.add_estHtsTotalCapacity(args.estHtsTotalCapacity);
    builder.add_estHtsTotalUserUplinkBandwidthPerBeam(args.estHtsTotalUserUplinkBandwidthPerBeam);
    builder.add_estHtsTotalUserDownlinkBandwidthPerBeam(args.estHtsTotalUserDownlinkBandwidthPerBeam);
    builder.add_htsUserUplinkBandwidthPerBeam(args.htsUserUplinkBandwidthPerBeam);
    builder.add_htsUserDownlinkBandwidthPerBeam(args.htsUserDownlinkBandwidthPerBeam);
    builder.add_bandwidth(args.bandwidth);
    builder.add_eirp(args.eirp);
    builder.add_gatewayDownlinkTo(args.gatewayDownlinkTo);
    builder.add_gatewayDownlinkFrom(args.gatewayDownlinkFrom);
    builder.add_gatewayUplinkTo(args.gatewayUplinkTo);
    builder.add_gatewayUplinkFrom(args.gatewayUplinkFrom);
    builder.add_travelingWaveTubeAmplifier(args.travelingWaveTubeAmplifier);
    builder.add_solidStatePowerAmp(args.solidStatePowerAmp);
    if let Some(x) = args.updatedBy { builder.add_updatedBy(x); }
    if let Some(x) = args.updatedAt { builder.add_updatedAt(x); }
    if let Some(x) = args.createdBy { builder.add_createdBy(x); }
    if let Some(x) = args.createdAt { builder.add_createdAt(x); }
    if let Some(x) = args.origNetwork { builder.add_origNetwork(x); }
    if let Some(x) = args.origin { builder.add_origin(x); }
    if let Some(x) = args.source { builder.add_source(x); }
    if let Some(x) = args.payloadNotes { builder.add_payloadNotes(x); }
    builder.add_htsNumUserSpotBeams(args.htsNumUserSpotBeams);
    builder.add_num36MhzEquivalentTransponders(args.num36MhzEquivalentTransponders);
    if let Some(x) = args.tradeLeaseOrgId { builder.add_tradeLeaseOrgId(x); }
    if let Some(x) = args.manufacturerOrgId { builder.add_manufacturerOrgId(x); }
    if let Some(x) = args.hostedForCompanyOrgId { builder.add_hostedForCompanyOrgId(x); }
    builder.add_numSpareTransponders(args.numSpareTransponders);
    builder.add_numOperationalTransponders(args.numOperationalTransponders);
    if let Some(x) = args.polarization { builder.add_polarization(x); }
    if let Some(x) = args.band { builder.add_band(x); }
    if let Some(x) = args.spacecraftId { builder.add_spacecraftId(x); }
    if let Some(x) = args.classificationMarking { builder.add_classificationMarking(x); }
    if let Some(x) = args.idComm { builder.add_idComm(x); }
    if let Some(x) = args.id { builder.add_id(x); }
    builder.add_dataMode(args.dataMode);
    builder.finish()
  }

  pub fn unpack(&self) -> SeradataCommDetails_FullT {
    let id = self.id().map(|x| {
      x.to_string()
    });
    let idComm = self.idComm().map(|x| {
      x.to_string()
    });
    let classificationMarking = self.classificationMarking().map(|x| {
      x.to_string()
    });
    let spacecraftId = self.spacecraftId().map(|x| {
      x.to_string()
    });
    let band = self.band().map(|x| {
      x.to_string()
    });
    let solidStatePowerAmp = self.solidStatePowerAmp();
    let travelingWaveTubeAmplifier = self.travelingWaveTubeAmplifier();
    let gatewayUplinkFrom = self.gatewayUplinkFrom();
    let gatewayUplinkTo = self.gatewayUplinkTo();
    let gatewayDownlinkFrom = self.gatewayDownlinkFrom();
    let gatewayDownlinkTo = self.gatewayDownlinkTo();
    let polarization = self.polarization().map(|x| {
      x.to_string()
    });
    let eirp = self.eirp();
    let bandwidth = self.bandwidth();
    let numOperationalTransponders = self.numOperationalTransponders();
    let numSpareTransponders = self.numSpareTransponders();
    let hostedForCompanyOrgId = self.hostedForCompanyOrgId().map(|x| {
      x.to_string()
    });
    let manufacturerOrgId = self.manufacturerOrgId().map(|x| {
      x.to_string()
    });
    let tradeLeaseOrgId = self.tradeLeaseOrgId().map(|x| {
      x.to_string()
    });
    let num36MhzEquivalentTransponders = self.num36MhzEquivalentTransponders();
    let htsNumUserSpotBeams = self.htsNumUserSpotBeams();
    let htsUserDownlinkBandwidthPerBeam = self.htsUserDownlinkBandwidthPerBeam();
    let htsUserUplinkBandwidthPerBeam = self.htsUserUplinkBandwidthPerBeam();
    let estHtsTotalUserDownlinkBandwidthPerBeam = self.estHtsTotalUserDownlinkBandwidthPerBeam();
    let estHtsTotalUserUplinkBandwidthPerBeam = self.estHtsTotalUserUplinkBandwidthPerBeam();
    let estHtsTotalCapacity = self.estHtsTotalCapacity();
    let userDownlinkFrom = self.userDownlinkFrom();
    let userDownlinkTo = self.userDownlinkTo();
    let userUplinkFrom = self.userUplinkFrom();
    let userUplinkTo = self.userUplinkTo();
    let payloadNotes = self.payloadNotes().map(|x| {
      x.to_string()
    });
    let source = self.source().map(|x| {
      x.to_string()
    });
    let origin = self.origin().map(|x| {
      x.to_string()
    });
    let origNetwork = self.origNetwork().map(|x| {
      x.to_string()
    });
    let dataMode = self.dataMode();
    let createdAt = self.createdAt().map(|x| {
      x.to_string()
    });
    let createdBy = self.createdBy().map(|x| {
      x.to_string()
    });
    let updatedAt = self.updatedAt().map(|x| {
      x.to_string()
    });
    let updatedBy = self.updatedBy().map(|x| {
      x.to_string()
    });
    SeradataCommDetails_FullT {
      id,
      idComm,
      classificationMarking,
      spacecraftId,
      band,
      solidStatePowerAmp,
      travelingWaveTubeAmplifier,
      gatewayUplinkFrom,
      gatewayUplinkTo,
      gatewayDownlinkFrom,
      gatewayDownlinkTo,
      polarization,
      eirp,
      bandwidth,
      numOperationalTransponders,
      numSpareTransponders,
      hostedForCompanyOrgId,
      manufacturerOrgId,
      tradeLeaseOrgId,
      num36MhzEquivalentTransponders,
      htsNumUserSpotBeams,
      htsUserDownlinkBandwidthPerBeam,
      htsUserUplinkBandwidthPerBeam,
      estHtsTotalUserDownlinkBandwidthPerBeam,
      estHtsTotalUserUplinkBandwidthPerBeam,
      estHtsTotalCapacity,
      userDownlinkFrom,
      userDownlinkTo,
      userUplinkFrom,
      userUplinkTo,
      payloadNotes,
      source,
      origin,
      origNetwork,
      dataMode,
      createdAt,
      createdBy,
      updatedAt,
      updatedBy,
    }
  }

  /// Unique identifier of the record, auto-generated by the system.
  /// Example: /// Example: SERADATACOMMDETAILS-ID
  /// Constraints: Minimum length = 1, Maximum length = 36
  #[inline]
  pub fn id(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(SeradataCommDetails_Full::VT_ID, None)}
  }
  /// UUID of the parent Comm record.
  /// Example: /// Example: idComm
  /// Constraints: Minimum length = 0, Maximum length = 36
  #[inline]
  pub fn idComm(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(SeradataCommDetails_Full::VT_IDCOMM, None)}
  }
  /// Classification marking of the data in IC/CAPCO Portion-marked format.
  /// Example: /// Example: U
  /// Constraints: Minimum length = 1, Maximum length = 128
  #[inline]
  pub fn classificationMarking(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(SeradataCommDetails_Full::VT_CLASSIFICATIONMARKING, None)}
  }
  /// Seradata ID of the spacecraft (SeradataSpacecraftDetails ID).
  /// Example: /// Example: spacecraftId
  /// Constraints: Minimum length = 0, Maximum length = 36
  #[inline]
  pub fn spacecraftId(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(SeradataCommDetails_Full::VT_SPACECRAFTID, None)}
  }
  /// Name of the band of this RF range (e.g. X,K,Ku,Ka,L,S,C,UHF,VHF,EHF,SHF,UNK,VLF,HF,E,Q,V,W). See RFBandType for more details and descriptions of each band name.
  /// Example: /// Example: X
  /// Constraints: Minimum length = 0, Maximum length = 5
  #[inline]
  pub fn band(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(SeradataCommDetails_Full::VT_BAND, None)}
  }
  /// Solid state power amplifier, in Watts.
  /// Example: /// Example: 1.23
  /// Constraints: No constraints specified.
  #[inline]
  pub fn solidStatePowerAmp(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(SeradataCommDetails_Full::VT_SOLIDSTATEPOWERAMP, Some(0.0)).unwrap()}
  }
  /// Comm travelingWaveTubeAmplifier in Watts.
  /// Example: /// Example: 1.23
  /// Constraints: No constraints specified.
  #[inline]
  pub fn travelingWaveTubeAmplifier(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(SeradataCommDetails_Full::VT_TRAVELINGWAVETUBEAMPLIFIER, Some(0.0)).unwrap()}
  }
  /// Comm gatewayUplinkFrom in Ghz.
  /// Example: /// Example: 1.23
  /// Constraints: No constraints specified.
  #[inline]
  pub fn gatewayUplinkFrom(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(SeradataCommDetails_Full::VT_GATEWAYUPLINKFROM, Some(0.0)).unwrap()}
  }
  /// Comm gatewayUplinkTo in Ghz.
  /// Example: /// Example: 1.23
  /// Constraints: No constraints specified.
  #[inline]
  pub fn gatewayUplinkTo(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(SeradataCommDetails_Full::VT_GATEWAYUPLINKTO, Some(0.0)).unwrap()}
  }
  /// Comm gatewayDownlinkFrom in Ghz.
  /// Example: /// Example: 1.23
  /// Constraints: No constraints specified.
  #[inline]
  pub fn gatewayDownlinkFrom(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(SeradataCommDetails_Full::VT_GATEWAYDOWNLINKFROM, Some(0.0)).unwrap()}
  }
  /// Comm gatewayDownlinkTo in Ghz.
  /// Example: /// Example: 1.23
  /// Constraints: No constraints specified.
  #[inline]
  pub fn gatewayDownlinkTo(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(SeradataCommDetails_Full::VT_GATEWAYDOWNLINKTO, Some(0.0)).unwrap()}
  }
  /// Comm polarization.
  /// Example: /// Example: polarization
  /// Constraints: Minimum length = 0, Maximum length = 64
  #[inline]
  pub fn polarization(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(SeradataCommDetails_Full::VT_POLARIZATION, None)}
  }
  /// Effective isotropic radiated power in dB.
  /// Example: /// Example: 1.23
  /// Constraints: No constraints specified.
  #[inline]
  pub fn eirp(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(SeradataCommDetails_Full::VT_EIRP, Some(0.0)).unwrap()}
  }
  /// Comm bandwidth in Mhz.
  /// Example: /// Example: 1.23
  /// Constraints: No constraints specified.
  #[inline]
  pub fn bandwidth(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(SeradataCommDetails_Full::VT_BANDWIDTH, Some(0.0)).unwrap()}
  }
  /// Comm numOperationalTransponders.
  /// Example: /// Example: 1
  /// Constraints: No constraints specified.
  #[inline]
  pub fn numOperationalTransponders(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(SeradataCommDetails_Full::VT_NUMOPERATIONALTRANSPONDERS, Some(0)).unwrap()}
  }
  /// Comm numSpareTransponders.
  /// Example: /// Example: 1
  /// Constraints: No constraints specified.
  #[inline]
  pub fn numSpareTransponders(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(SeradataCommDetails_Full::VT_NUMSPARETRANSPONDERS, Some(0)).unwrap()}
  }
  /// Comm hostedForCompanyOrgId.
  /// Example: /// Example: hostedForCompanyOrgId
  /// Constraints: Minimum length = 0, Maximum length = 36
  #[inline]
  pub fn hostedForCompanyOrgId(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(SeradataCommDetails_Full::VT_HOSTEDFORCOMPANYORGID, None)}
  }
  /// Comm manufacturerOrgId.
  /// Example: /// Example: manufacturerOrgId
  /// Constraints: Minimum length = 0, Maximum length = 36
  #[inline]
  pub fn manufacturerOrgId(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(SeradataCommDetails_Full::VT_MANUFACTURERORGID, None)}
  }
  /// Comm tradeLeaseOrgId.
  /// Example: /// Example: tradeLeaseOrgId
  /// Constraints: Minimum length = 0, Maximum length = 36
  #[inline]
  pub fn tradeLeaseOrgId(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(SeradataCommDetails_Full::VT_TRADELEASEORGID, None)}
  }
  /// Comm num36MhzEquivalentTransponders.
  /// Example: /// Example: 1
  /// Constraints: No constraints specified.
  #[inline]
  pub fn num36MhzEquivalentTransponders(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(SeradataCommDetails_Full::VT_NUM36MHZEQUIVALENTTRANSPONDERS, Some(0)).unwrap()}
  }
  /// Comm htsNumUserSpotBeams.
  /// Example: /// Example: 1
  /// Constraints: No constraints specified.
  #[inline]
  pub fn htsNumUserSpotBeams(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(SeradataCommDetails_Full::VT_HTSNUMUSERSPOTBEAMS, Some(0)).unwrap()}
  }
  /// Comm htsUserDownlinkBandwidthPerBeam in Mhz.
  /// Example: /// Example: 1.23
  /// Constraints: No constraints specified.
  #[inline]
  pub fn htsUserDownlinkBandwidthPerBeam(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(SeradataCommDetails_Full::VT_HTSUSERDOWNLINKBANDWIDTHPERBEAM, Some(0.0)).unwrap()}
  }
  /// Comm htsUserUplinkBandwidthPerBeam in Mhz.
  /// Example: /// Example: 1.23
  /// Constraints: No constraints specified.
  #[inline]
  pub fn htsUserUplinkBandwidthPerBeam(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(SeradataCommDetails_Full::VT_HTSUSERUPLINKBANDWIDTHPERBEAM, Some(0.0)).unwrap()}
  }
  /// Comm estimated HtsTotalUserDownlinkBandwidthPerBeam in Mhz.
  /// Example: /// Example: 1.23
  /// Constraints: No constraints specified.
  #[inline]
  pub fn estHtsTotalUserDownlinkBandwidthPerBeam(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(SeradataCommDetails_Full::VT_ESTHTSTOTALUSERDOWNLINKBANDWIDTHPERBEAM, Some(0.0)).unwrap()}
  }
  /// Comm estimated HtsTotalUserUplinkBandwidthPerBeam in Mhz.
  /// Example: /// Example: 1.23
  /// Constraints: No constraints specified.
  #[inline]
  pub fn estHtsTotalUserUplinkBandwidthPerBeam(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(SeradataCommDetails_Full::VT_ESTHTSTOTALUSERUPLINKBANDWIDTHPERBEAM, Some(0.0)).unwrap()}
  }
  /// Comm estimated HtsTotalCapacity in Gbps.
  /// Example: /// Example: 1.23
  /// Constraints: No constraints specified.
  #[inline]
  pub fn estHtsTotalCapacity(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(SeradataCommDetails_Full::VT_ESTHTSTOTALCAPACITY, Some(0.0)).unwrap()}
  }
  /// Comm userDownlinkFrom in Ghz.
  /// Example: /// Example: 1.23
  /// Constraints: No constraints specified.
  #[inline]
  pub fn userDownlinkFrom(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(SeradataCommDetails_Full::VT_USERDOWNLINKFROM, Some(0.0)).unwrap()}
  }
  /// Comm userDownlinkTo in Ghz.
  /// Example: /// Example: 1.23
  /// Constraints: No constraints specified.
  #[inline]
  pub fn userDownlinkTo(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(SeradataCommDetails_Full::VT_USERDOWNLINKTO, Some(0.0)).unwrap()}
  }
  /// Comm userUplinkFrom in Ghz.
  /// Example: /// Example: 1.23
  /// Constraints: No constraints specified.
  #[inline]
  pub fn userUplinkFrom(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(SeradataCommDetails_Full::VT_USERUPLINKFROM, Some(0.0)).unwrap()}
  }
  /// Comm userUplinkTo in Ghz.
  /// Example: /// Example: 1.23
  /// Constraints: No constraints specified.
  #[inline]
  pub fn userUplinkTo(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(SeradataCommDetails_Full::VT_USERUPLINKTO, Some(0.0)).unwrap()}
  }
  /// Payload notes.
  /// Example: /// Example: Sample Notes
  /// Constraints: Minimum length = 0, Maximum length = 2147483647
  #[inline]
  pub fn payloadNotes(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(SeradataCommDetails_Full::VT_PAYLOADNOTES, None)}
  }
  /// Source of the data.
  /// Example: /// Example: Bluestaq
  /// Constraints: Minimum length = 1, Maximum length = 64
  #[inline]
  pub fn source(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(SeradataCommDetails_Full::VT_SOURCE, None)}
  }
  /// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
  /// Example: /// Example: THIRD_PARTY_DATASOURCE
  /// Constraints: Minimum length = 0, Maximum length = 64
  #[inline]
  pub fn origin(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(SeradataCommDetails_Full::VT_ORIGIN, None)}
  }
  /// The originating source network on which this record was created, auto-populated by the system.
  /// Example: /// Example: ORIG
  /// Constraints: Minimum length = 1, Maximum length = 32
  #[inline]
  pub fn origNetwork(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(SeradataCommDetails_Full::VT_ORIGNETWORK, None)}
  }
  /// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
  /// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
  /// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
  /// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
  /// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  /// Example: /// Example: TEST
  /// Constraints: Minimum length = 1, Maximum length = 32
  #[inline]
  pub fn dataMode(&self) -> SeradataCommDetails_Full_dataMode_Enum {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<SeradataCommDetails_Full_dataMode_Enum>(SeradataCommDetails_Full::VT_DATAMODE, Some(SeradataCommDetails_Full_dataMode_Enum::REAL)).unwrap()}
  }
  /// Time the row was created in the database, auto-populated by the system.
  /// Example: /// Example: 2018-01-01T16:00:00.123Z
  /// Constraints: No constraints specified.
  #[inline]
  pub fn createdAt(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(SeradataCommDetails_Full::VT_CREATEDAT, None)}
  }
  /// Application user who created the row in the database, auto-populated by the system.
  /// Example: /// Example: some.user
  /// Constraints: Minimum length = 1, Maximum length = 64
  #[inline]
  pub fn createdBy(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(SeradataCommDetails_Full::VT_CREATEDBY, None)}
  }
  /// Time the row was last updated in the database, auto-populated by the system.
  /// Example: /// Example: 2018-01-01T16:00:00.123Z
  /// Constraints: No constraints specified.
  #[inline]
  pub fn updatedAt(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(SeradataCommDetails_Full::VT_UPDATEDAT, None)}
  }
  /// Application user who updated the row in the database, auto-populated by the system.
  /// Example: /// Example: some.user
  /// Constraints: Minimum length = 1, Maximum length = 64
  #[inline]
  pub fn updatedBy(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(SeradataCommDetails_Full::VT_UPDATEDBY, None)}
  }
}

impl flatbuffers::Verifiable for SeradataCommDetails_Full<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("id", Self::VT_ID, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("idComm", Self::VT_IDCOMM, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("classificationMarking", Self::VT_CLASSIFICATIONMARKING, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("spacecraftId", Self::VT_SPACECRAFTID, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("band", Self::VT_BAND, false)?
     .visit_field::<f64>("solidStatePowerAmp", Self::VT_SOLIDSTATEPOWERAMP, false)?
     .visit_field::<f64>("travelingWaveTubeAmplifier", Self::VT_TRAVELINGWAVETUBEAMPLIFIER, false)?
     .visit_field::<f64>("gatewayUplinkFrom", Self::VT_GATEWAYUPLINKFROM, false)?
     .visit_field::<f64>("gatewayUplinkTo", Self::VT_GATEWAYUPLINKTO, false)?
     .visit_field::<f64>("gatewayDownlinkFrom", Self::VT_GATEWAYDOWNLINKFROM, false)?
     .visit_field::<f64>("gatewayDownlinkTo", Self::VT_GATEWAYDOWNLINKTO, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("polarization", Self::VT_POLARIZATION, false)?
     .visit_field::<f64>("eirp", Self::VT_EIRP, false)?
     .visit_field::<f64>("bandwidth", Self::VT_BANDWIDTH, false)?
     .visit_field::<i32>("numOperationalTransponders", Self::VT_NUMOPERATIONALTRANSPONDERS, false)?
     .visit_field::<i32>("numSpareTransponders", Self::VT_NUMSPARETRANSPONDERS, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("hostedForCompanyOrgId", Self::VT_HOSTEDFORCOMPANYORGID, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("manufacturerOrgId", Self::VT_MANUFACTURERORGID, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("tradeLeaseOrgId", Self::VT_TRADELEASEORGID, false)?
     .visit_field::<i32>("num36MhzEquivalentTransponders", Self::VT_NUM36MHZEQUIVALENTTRANSPONDERS, false)?
     .visit_field::<i32>("htsNumUserSpotBeams", Self::VT_HTSNUMUSERSPOTBEAMS, false)?
     .visit_field::<f64>("htsUserDownlinkBandwidthPerBeam", Self::VT_HTSUSERDOWNLINKBANDWIDTHPERBEAM, false)?
     .visit_field::<f64>("htsUserUplinkBandwidthPerBeam", Self::VT_HTSUSERUPLINKBANDWIDTHPERBEAM, false)?
     .visit_field::<f64>("estHtsTotalUserDownlinkBandwidthPerBeam", Self::VT_ESTHTSTOTALUSERDOWNLINKBANDWIDTHPERBEAM, false)?
     .visit_field::<f64>("estHtsTotalUserUplinkBandwidthPerBeam", Self::VT_ESTHTSTOTALUSERUPLINKBANDWIDTHPERBEAM, false)?
     .visit_field::<f64>("estHtsTotalCapacity", Self::VT_ESTHTSTOTALCAPACITY, false)?
     .visit_field::<f64>("userDownlinkFrom", Self::VT_USERDOWNLINKFROM, false)?
     .visit_field::<f64>("userDownlinkTo", Self::VT_USERDOWNLINKTO, false)?
     .visit_field::<f64>("userUplinkFrom", Self::VT_USERUPLINKFROM, false)?
     .visit_field::<f64>("userUplinkTo", Self::VT_USERUPLINKTO, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("payloadNotes", Self::VT_PAYLOADNOTES, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("source", Self::VT_SOURCE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("origin", Self::VT_ORIGIN, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("origNetwork", Self::VT_ORIGNETWORK, false)?
     .visit_field::<SeradataCommDetails_Full_dataMode_Enum>("dataMode", Self::VT_DATAMODE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("createdAt", Self::VT_CREATEDAT, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("createdBy", Self::VT_CREATEDBY, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("updatedAt", Self::VT_UPDATEDAT, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("updatedBy", Self::VT_UPDATEDBY, false)?
     .finish();
    Ok(())
  }
}
pub struct SeradataCommDetails_FullArgs<'a> {
    pub id: Option<flatbuffers::WIPOffset<&'a str>>,
    pub idComm: Option<flatbuffers::WIPOffset<&'a str>>,
    pub classificationMarking: Option<flatbuffers::WIPOffset<&'a str>>,
    pub spacecraftId: Option<flatbuffers::WIPOffset<&'a str>>,
    pub band: Option<flatbuffers::WIPOffset<&'a str>>,
    pub solidStatePowerAmp: f64,
    pub travelingWaveTubeAmplifier: f64,
    pub gatewayUplinkFrom: f64,
    pub gatewayUplinkTo: f64,
    pub gatewayDownlinkFrom: f64,
    pub gatewayDownlinkTo: f64,
    pub polarization: Option<flatbuffers::WIPOffset<&'a str>>,
    pub eirp: f64,
    pub bandwidth: f64,
    pub numOperationalTransponders: i32,
    pub numSpareTransponders: i32,
    pub hostedForCompanyOrgId: Option<flatbuffers::WIPOffset<&'a str>>,
    pub manufacturerOrgId: Option<flatbuffers::WIPOffset<&'a str>>,
    pub tradeLeaseOrgId: Option<flatbuffers::WIPOffset<&'a str>>,
    pub num36MhzEquivalentTransponders: i32,
    pub htsNumUserSpotBeams: i32,
    pub htsUserDownlinkBandwidthPerBeam: f64,
    pub htsUserUplinkBandwidthPerBeam: f64,
    pub estHtsTotalUserDownlinkBandwidthPerBeam: f64,
    pub estHtsTotalUserUplinkBandwidthPerBeam: f64,
    pub estHtsTotalCapacity: f64,
    pub userDownlinkFrom: f64,
    pub userDownlinkTo: f64,
    pub userUplinkFrom: f64,
    pub userUplinkTo: f64,
    pub payloadNotes: Option<flatbuffers::WIPOffset<&'a str>>,
    pub source: Option<flatbuffers::WIPOffset<&'a str>>,
    pub origin: Option<flatbuffers::WIPOffset<&'a str>>,
    pub origNetwork: Option<flatbuffers::WIPOffset<&'a str>>,
    pub dataMode: SeradataCommDetails_Full_dataMode_Enum,
    pub createdAt: Option<flatbuffers::WIPOffset<&'a str>>,
    pub createdBy: Option<flatbuffers::WIPOffset<&'a str>>,
    pub updatedAt: Option<flatbuffers::WIPOffset<&'a str>>,
    pub updatedBy: Option<flatbuffers::WIPOffset<&'a str>>,
}
impl<'a> Default for SeradataCommDetails_FullArgs<'a> {
  #[inline]
  fn default() -> Self {
    SeradataCommDetails_FullArgs {
      id: None,
      idComm: None,
      classificationMarking: None,
      spacecraftId: None,
      band: None,
      solidStatePowerAmp: 0.0,
      travelingWaveTubeAmplifier: 0.0,
      gatewayUplinkFrom: 0.0,
      gatewayUplinkTo: 0.0,
      gatewayDownlinkFrom: 0.0,
      gatewayDownlinkTo: 0.0,
      polarization: None,
      eirp: 0.0,
      bandwidth: 0.0,
      numOperationalTransponders: 0,
      numSpareTransponders: 0,
      hostedForCompanyOrgId: None,
      manufacturerOrgId: None,
      tradeLeaseOrgId: None,
      num36MhzEquivalentTransponders: 0,
      htsNumUserSpotBeams: 0,
      htsUserDownlinkBandwidthPerBeam: 0.0,
      htsUserUplinkBandwidthPerBeam: 0.0,
      estHtsTotalUserDownlinkBandwidthPerBeam: 0.0,
      estHtsTotalUserUplinkBandwidthPerBeam: 0.0,
      estHtsTotalCapacity: 0.0,
      userDownlinkFrom: 0.0,
      userDownlinkTo: 0.0,
      userUplinkFrom: 0.0,
      userUplinkTo: 0.0,
      payloadNotes: None,
      source: None,
      origin: None,
      origNetwork: None,
      dataMode: SeradataCommDetails_Full_dataMode_Enum::REAL,
      createdAt: None,
      createdBy: None,
      updatedAt: None,
      updatedBy: None,
    }
  }
}

pub struct SeradataCommDetails_FullBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> SeradataCommDetails_FullBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_id(&mut self, id: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(SeradataCommDetails_Full::VT_ID, id);
  }
  #[inline]
  pub fn add_idComm(&mut self, idComm: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(SeradataCommDetails_Full::VT_IDCOMM, idComm);
  }
  #[inline]
  pub fn add_classificationMarking(&mut self, classificationMarking: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(SeradataCommDetails_Full::VT_CLASSIFICATIONMARKING, classificationMarking);
  }
  #[inline]
  pub fn add_spacecraftId(&mut self, spacecraftId: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(SeradataCommDetails_Full::VT_SPACECRAFTID, spacecraftId);
  }
  #[inline]
  pub fn add_band(&mut self, band: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(SeradataCommDetails_Full::VT_BAND, band);
  }
  #[inline]
  pub fn add_solidStatePowerAmp(&mut self, solidStatePowerAmp: f64) {
    self.fbb_.push_slot::<f64>(SeradataCommDetails_Full::VT_SOLIDSTATEPOWERAMP, solidStatePowerAmp, 0.0);
  }
  #[inline]
  pub fn add_travelingWaveTubeAmplifier(&mut self, travelingWaveTubeAmplifier: f64) {
    self.fbb_.push_slot::<f64>(SeradataCommDetails_Full::VT_TRAVELINGWAVETUBEAMPLIFIER, travelingWaveTubeAmplifier, 0.0);
  }
  #[inline]
  pub fn add_gatewayUplinkFrom(&mut self, gatewayUplinkFrom: f64) {
    self.fbb_.push_slot::<f64>(SeradataCommDetails_Full::VT_GATEWAYUPLINKFROM, gatewayUplinkFrom, 0.0);
  }
  #[inline]
  pub fn add_gatewayUplinkTo(&mut self, gatewayUplinkTo: f64) {
    self.fbb_.push_slot::<f64>(SeradataCommDetails_Full::VT_GATEWAYUPLINKTO, gatewayUplinkTo, 0.0);
  }
  #[inline]
  pub fn add_gatewayDownlinkFrom(&mut self, gatewayDownlinkFrom: f64) {
    self.fbb_.push_slot::<f64>(SeradataCommDetails_Full::VT_GATEWAYDOWNLINKFROM, gatewayDownlinkFrom, 0.0);
  }
  #[inline]
  pub fn add_gatewayDownlinkTo(&mut self, gatewayDownlinkTo: f64) {
    self.fbb_.push_slot::<f64>(SeradataCommDetails_Full::VT_GATEWAYDOWNLINKTO, gatewayDownlinkTo, 0.0);
  }
  #[inline]
  pub fn add_polarization(&mut self, polarization: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(SeradataCommDetails_Full::VT_POLARIZATION, polarization);
  }
  #[inline]
  pub fn add_eirp(&mut self, eirp: f64) {
    self.fbb_.push_slot::<f64>(SeradataCommDetails_Full::VT_EIRP, eirp, 0.0);
  }
  #[inline]
  pub fn add_bandwidth(&mut self, bandwidth: f64) {
    self.fbb_.push_slot::<f64>(SeradataCommDetails_Full::VT_BANDWIDTH, bandwidth, 0.0);
  }
  #[inline]
  pub fn add_numOperationalTransponders(&mut self, numOperationalTransponders: i32) {
    self.fbb_.push_slot::<i32>(SeradataCommDetails_Full::VT_NUMOPERATIONALTRANSPONDERS, numOperationalTransponders, 0);
  }
  #[inline]
  pub fn add_numSpareTransponders(&mut self, numSpareTransponders: i32) {
    self.fbb_.push_slot::<i32>(SeradataCommDetails_Full::VT_NUMSPARETRANSPONDERS, numSpareTransponders, 0);
  }
  #[inline]
  pub fn add_hostedForCompanyOrgId(&mut self, hostedForCompanyOrgId: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(SeradataCommDetails_Full::VT_HOSTEDFORCOMPANYORGID, hostedForCompanyOrgId);
  }
  #[inline]
  pub fn add_manufacturerOrgId(&mut self, manufacturerOrgId: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(SeradataCommDetails_Full::VT_MANUFACTURERORGID, manufacturerOrgId);
  }
  #[inline]
  pub fn add_tradeLeaseOrgId(&mut self, tradeLeaseOrgId: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(SeradataCommDetails_Full::VT_TRADELEASEORGID, tradeLeaseOrgId);
  }
  #[inline]
  pub fn add_num36MhzEquivalentTransponders(&mut self, num36MhzEquivalentTransponders: i32) {
    self.fbb_.push_slot::<i32>(SeradataCommDetails_Full::VT_NUM36MHZEQUIVALENTTRANSPONDERS, num36MhzEquivalentTransponders, 0);
  }
  #[inline]
  pub fn add_htsNumUserSpotBeams(&mut self, htsNumUserSpotBeams: i32) {
    self.fbb_.push_slot::<i32>(SeradataCommDetails_Full::VT_HTSNUMUSERSPOTBEAMS, htsNumUserSpotBeams, 0);
  }
  #[inline]
  pub fn add_htsUserDownlinkBandwidthPerBeam(&mut self, htsUserDownlinkBandwidthPerBeam: f64) {
    self.fbb_.push_slot::<f64>(SeradataCommDetails_Full::VT_HTSUSERDOWNLINKBANDWIDTHPERBEAM, htsUserDownlinkBandwidthPerBeam, 0.0);
  }
  #[inline]
  pub fn add_htsUserUplinkBandwidthPerBeam(&mut self, htsUserUplinkBandwidthPerBeam: f64) {
    self.fbb_.push_slot::<f64>(SeradataCommDetails_Full::VT_HTSUSERUPLINKBANDWIDTHPERBEAM, htsUserUplinkBandwidthPerBeam, 0.0);
  }
  #[inline]
  pub fn add_estHtsTotalUserDownlinkBandwidthPerBeam(&mut self, estHtsTotalUserDownlinkBandwidthPerBeam: f64) {
    self.fbb_.push_slot::<f64>(SeradataCommDetails_Full::VT_ESTHTSTOTALUSERDOWNLINKBANDWIDTHPERBEAM, estHtsTotalUserDownlinkBandwidthPerBeam, 0.0);
  }
  #[inline]
  pub fn add_estHtsTotalUserUplinkBandwidthPerBeam(&mut self, estHtsTotalUserUplinkBandwidthPerBeam: f64) {
    self.fbb_.push_slot::<f64>(SeradataCommDetails_Full::VT_ESTHTSTOTALUSERUPLINKBANDWIDTHPERBEAM, estHtsTotalUserUplinkBandwidthPerBeam, 0.0);
  }
  #[inline]
  pub fn add_estHtsTotalCapacity(&mut self, estHtsTotalCapacity: f64) {
    self.fbb_.push_slot::<f64>(SeradataCommDetails_Full::VT_ESTHTSTOTALCAPACITY, estHtsTotalCapacity, 0.0);
  }
  #[inline]
  pub fn add_userDownlinkFrom(&mut self, userDownlinkFrom: f64) {
    self.fbb_.push_slot::<f64>(SeradataCommDetails_Full::VT_USERDOWNLINKFROM, userDownlinkFrom, 0.0);
  }
  #[inline]
  pub fn add_userDownlinkTo(&mut self, userDownlinkTo: f64) {
    self.fbb_.push_slot::<f64>(SeradataCommDetails_Full::VT_USERDOWNLINKTO, userDownlinkTo, 0.0);
  }
  #[inline]
  pub fn add_userUplinkFrom(&mut self, userUplinkFrom: f64) {
    self.fbb_.push_slot::<f64>(SeradataCommDetails_Full::VT_USERUPLINKFROM, userUplinkFrom, 0.0);
  }
  #[inline]
  pub fn add_userUplinkTo(&mut self, userUplinkTo: f64) {
    self.fbb_.push_slot::<f64>(SeradataCommDetails_Full::VT_USERUPLINKTO, userUplinkTo, 0.0);
  }
  #[inline]
  pub fn add_payloadNotes(&mut self, payloadNotes: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(SeradataCommDetails_Full::VT_PAYLOADNOTES, payloadNotes);
  }
  #[inline]
  pub fn add_source(&mut self, source: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(SeradataCommDetails_Full::VT_SOURCE, source);
  }
  #[inline]
  pub fn add_origin(&mut self, origin: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(SeradataCommDetails_Full::VT_ORIGIN, origin);
  }
  #[inline]
  pub fn add_origNetwork(&mut self, origNetwork: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(SeradataCommDetails_Full::VT_ORIGNETWORK, origNetwork);
  }
  #[inline]
  pub fn add_dataMode(&mut self, dataMode: SeradataCommDetails_Full_dataMode_Enum) {
    self.fbb_.push_slot::<SeradataCommDetails_Full_dataMode_Enum>(SeradataCommDetails_Full::VT_DATAMODE, dataMode, SeradataCommDetails_Full_dataMode_Enum::REAL);
  }
  #[inline]
  pub fn add_createdAt(&mut self, createdAt: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(SeradataCommDetails_Full::VT_CREATEDAT, createdAt);
  }
  #[inline]
  pub fn add_createdBy(&mut self, createdBy: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(SeradataCommDetails_Full::VT_CREATEDBY, createdBy);
  }
  #[inline]
  pub fn add_updatedAt(&mut self, updatedAt: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(SeradataCommDetails_Full::VT_UPDATEDAT, updatedAt);
  }
  #[inline]
  pub fn add_updatedBy(&mut self, updatedBy: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(SeradataCommDetails_Full::VT_UPDATEDBY, updatedBy);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> SeradataCommDetails_FullBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    SeradataCommDetails_FullBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<SeradataCommDetails_Full<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for SeradataCommDetails_Full<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("SeradataCommDetails_Full");
      ds.field("id", &self.id());
      ds.field("idComm", &self.idComm());
      ds.field("classificationMarking", &self.classificationMarking());
      ds.field("spacecraftId", &self.spacecraftId());
      ds.field("band", &self.band());
      ds.field("solidStatePowerAmp", &self.solidStatePowerAmp());
      ds.field("travelingWaveTubeAmplifier", &self.travelingWaveTubeAmplifier());
      ds.field("gatewayUplinkFrom", &self.gatewayUplinkFrom());
      ds.field("gatewayUplinkTo", &self.gatewayUplinkTo());
      ds.field("gatewayDownlinkFrom", &self.gatewayDownlinkFrom());
      ds.field("gatewayDownlinkTo", &self.gatewayDownlinkTo());
      ds.field("polarization", &self.polarization());
      ds.field("eirp", &self.eirp());
      ds.field("bandwidth", &self.bandwidth());
      ds.field("numOperationalTransponders", &self.numOperationalTransponders());
      ds.field("numSpareTransponders", &self.numSpareTransponders());
      ds.field("hostedForCompanyOrgId", &self.hostedForCompanyOrgId());
      ds.field("manufacturerOrgId", &self.manufacturerOrgId());
      ds.field("tradeLeaseOrgId", &self.tradeLeaseOrgId());
      ds.field("num36MhzEquivalentTransponders", &self.num36MhzEquivalentTransponders());
      ds.field("htsNumUserSpotBeams", &self.htsNumUserSpotBeams());
      ds.field("htsUserDownlinkBandwidthPerBeam", &self.htsUserDownlinkBandwidthPerBeam());
      ds.field("htsUserUplinkBandwidthPerBeam", &self.htsUserUplinkBandwidthPerBeam());
      ds.field("estHtsTotalUserDownlinkBandwidthPerBeam", &self.estHtsTotalUserDownlinkBandwidthPerBeam());
      ds.field("estHtsTotalUserUplinkBandwidthPerBeam", &self.estHtsTotalUserUplinkBandwidthPerBeam());
      ds.field("estHtsTotalCapacity", &self.estHtsTotalCapacity());
      ds.field("userDownlinkFrom", &self.userDownlinkFrom());
      ds.field("userDownlinkTo", &self.userDownlinkTo());
      ds.field("userUplinkFrom", &self.userUplinkFrom());
      ds.field("userUplinkTo", &self.userUplinkTo());
      ds.field("payloadNotes", &self.payloadNotes());
      ds.field("source", &self.source());
      ds.field("origin", &self.origin());
      ds.field("origNetwork", &self.origNetwork());
      ds.field("dataMode", &self.dataMode());
      ds.field("createdAt", &self.createdAt());
      ds.field("createdBy", &self.createdBy());
      ds.field("updatedAt", &self.updatedAt());
      ds.field("updatedBy", &self.updatedBy());
      ds.finish()
  }
}
#[non_exhaustive]
#[derive(Debug, Clone, PartialEq)]
pub struct SeradataCommDetails_FullT {
  pub id: Option<String>,
  pub idComm: Option<String>,
  pub classificationMarking: Option<String>,
  pub spacecraftId: Option<String>,
  pub band: Option<String>,
  pub solidStatePowerAmp: f64,
  pub travelingWaveTubeAmplifier: f64,
  pub gatewayUplinkFrom: f64,
  pub gatewayUplinkTo: f64,
  pub gatewayDownlinkFrom: f64,
  pub gatewayDownlinkTo: f64,
  pub polarization: Option<String>,
  pub eirp: f64,
  pub bandwidth: f64,
  pub numOperationalTransponders: i32,
  pub numSpareTransponders: i32,
  pub hostedForCompanyOrgId: Option<String>,
  pub manufacturerOrgId: Option<String>,
  pub tradeLeaseOrgId: Option<String>,
  pub num36MhzEquivalentTransponders: i32,
  pub htsNumUserSpotBeams: i32,
  pub htsUserDownlinkBandwidthPerBeam: f64,
  pub htsUserUplinkBandwidthPerBeam: f64,
  pub estHtsTotalUserDownlinkBandwidthPerBeam: f64,
  pub estHtsTotalUserUplinkBandwidthPerBeam: f64,
  pub estHtsTotalCapacity: f64,
  pub userDownlinkFrom: f64,
  pub userDownlinkTo: f64,
  pub userUplinkFrom: f64,
  pub userUplinkTo: f64,
  pub payloadNotes: Option<String>,
  pub source: Option<String>,
  pub origin: Option<String>,
  pub origNetwork: Option<String>,
  pub dataMode: SeradataCommDetails_Full_dataMode_Enum,
  pub createdAt: Option<String>,
  pub createdBy: Option<String>,
  pub updatedAt: Option<String>,
  pub updatedBy: Option<String>,
}
impl Default for SeradataCommDetails_FullT {
  fn default() -> Self {
    Self {
      id: None,
      idComm: None,
      classificationMarking: None,
      spacecraftId: None,
      band: None,
      solidStatePowerAmp: 0.0,
      travelingWaveTubeAmplifier: 0.0,
      gatewayUplinkFrom: 0.0,
      gatewayUplinkTo: 0.0,
      gatewayDownlinkFrom: 0.0,
      gatewayDownlinkTo: 0.0,
      polarization: None,
      eirp: 0.0,
      bandwidth: 0.0,
      numOperationalTransponders: 0,
      numSpareTransponders: 0,
      hostedForCompanyOrgId: None,
      manufacturerOrgId: None,
      tradeLeaseOrgId: None,
      num36MhzEquivalentTransponders: 0,
      htsNumUserSpotBeams: 0,
      htsUserDownlinkBandwidthPerBeam: 0.0,
      htsUserUplinkBandwidthPerBeam: 0.0,
      estHtsTotalUserDownlinkBandwidthPerBeam: 0.0,
      estHtsTotalUserUplinkBandwidthPerBeam: 0.0,
      estHtsTotalCapacity: 0.0,
      userDownlinkFrom: 0.0,
      userDownlinkTo: 0.0,
      userUplinkFrom: 0.0,
      userUplinkTo: 0.0,
      payloadNotes: None,
      source: None,
      origin: None,
      origNetwork: None,
      dataMode: SeradataCommDetails_Full_dataMode_Enum::REAL,
      createdAt: None,
      createdBy: None,
      updatedAt: None,
      updatedBy: None,
    }
  }
}
impl SeradataCommDetails_FullT {
  pub fn pack<'b, A: flatbuffers::Allocator + 'b>(
    &self,
    _fbb: &mut flatbuffers::FlatBufferBuilder<'b, A>
  ) -> flatbuffers::WIPOffset<SeradataCommDetails_Full<'b>> {
    let id = self.id.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let idComm = self.idComm.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let classificationMarking = self.classificationMarking.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let spacecraftId = self.spacecraftId.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let band = self.band.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let solidStatePowerAmp = self.solidStatePowerAmp;
    let travelingWaveTubeAmplifier = self.travelingWaveTubeAmplifier;
    let gatewayUplinkFrom = self.gatewayUplinkFrom;
    let gatewayUplinkTo = self.gatewayUplinkTo;
    let gatewayDownlinkFrom = self.gatewayDownlinkFrom;
    let gatewayDownlinkTo = self.gatewayDownlinkTo;
    let polarization = self.polarization.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let eirp = self.eirp;
    let bandwidth = self.bandwidth;
    let numOperationalTransponders = self.numOperationalTransponders;
    let numSpareTransponders = self.numSpareTransponders;
    let hostedForCompanyOrgId = self.hostedForCompanyOrgId.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let manufacturerOrgId = self.manufacturerOrgId.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let tradeLeaseOrgId = self.tradeLeaseOrgId.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let num36MhzEquivalentTransponders = self.num36MhzEquivalentTransponders;
    let htsNumUserSpotBeams = self.htsNumUserSpotBeams;
    let htsUserDownlinkBandwidthPerBeam = self.htsUserDownlinkBandwidthPerBeam;
    let htsUserUplinkBandwidthPerBeam = self.htsUserUplinkBandwidthPerBeam;
    let estHtsTotalUserDownlinkBandwidthPerBeam = self.estHtsTotalUserDownlinkBandwidthPerBeam;
    let estHtsTotalUserUplinkBandwidthPerBeam = self.estHtsTotalUserUplinkBandwidthPerBeam;
    let estHtsTotalCapacity = self.estHtsTotalCapacity;
    let userDownlinkFrom = self.userDownlinkFrom;
    let userDownlinkTo = self.userDownlinkTo;
    let userUplinkFrom = self.userUplinkFrom;
    let userUplinkTo = self.userUplinkTo;
    let payloadNotes = self.payloadNotes.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let source = self.source.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let origin = self.origin.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let origNetwork = self.origNetwork.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let dataMode = self.dataMode;
    let createdAt = self.createdAt.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let createdBy = self.createdBy.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let updatedAt = self.updatedAt.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let updatedBy = self.updatedBy.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    SeradataCommDetails_Full::create(_fbb, &SeradataCommDetails_FullArgs{
      id,
      idComm,
      classificationMarking,
      spacecraftId,
      band,
      solidStatePowerAmp,
      travelingWaveTubeAmplifier,
      gatewayUplinkFrom,
      gatewayUplinkTo,
      gatewayDownlinkFrom,
      gatewayDownlinkTo,
      polarization,
      eirp,
      bandwidth,
      numOperationalTransponders,
      numSpareTransponders,
      hostedForCompanyOrgId,
      manufacturerOrgId,
      tradeLeaseOrgId,
      num36MhzEquivalentTransponders,
      htsNumUserSpotBeams,
      htsUserDownlinkBandwidthPerBeam,
      htsUserUplinkBandwidthPerBeam,
      estHtsTotalUserDownlinkBandwidthPerBeam,
      estHtsTotalUserUplinkBandwidthPerBeam,
      estHtsTotalCapacity,
      userDownlinkFrom,
      userDownlinkTo,
      userUplinkFrom,
      userUplinkTo,
      payloadNotes,
      source,
      origin,
      origNetwork,
      dataMode,
      createdAt,
      createdBy,
      updatedAt,
      updatedBy,
    })
  }
}
#[inline]
/// Verifies that a buffer of bytes contains a `SeradataCommDetails_Full`
/// and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_seradata_comm_details_full_unchecked`.
pub fn root_as_seradata_comm_details_full(buf: &[u8]) -> Result<SeradataCommDetails_Full, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root::<SeradataCommDetails_Full>(buf)
}
#[inline]
/// Verifies that a buffer of bytes contains a size prefixed
/// `SeradataCommDetails_Full` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `size_prefixed_root_as_seradata_comm_details_full_unchecked`.
pub fn size_prefixed_root_as_seradata_comm_details_full(buf: &[u8]) -> Result<SeradataCommDetails_Full, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root::<SeradataCommDetails_Full>(buf)
}
#[inline]
/// Verifies, with the given options, that a buffer of bytes
/// contains a `SeradataCommDetails_Full` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_seradata_comm_details_full_unchecked`.
pub fn root_as_seradata_comm_details_full_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<SeradataCommDetails_Full<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root_with_opts::<SeradataCommDetails_Full<'b>>(opts, buf)
}
#[inline]
/// Verifies, with the given verifier options, that a buffer of
/// bytes contains a size prefixed `SeradataCommDetails_Full` and returns
/// it. Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_seradata_comm_details_full_unchecked`.
pub fn size_prefixed_root_as_seradata_comm_details_full_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<SeradataCommDetails_Full<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root_with_opts::<SeradataCommDetails_Full<'b>>(opts, buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a SeradataCommDetails_Full and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid `SeradataCommDetails_Full`.
pub unsafe fn root_as_seradata_comm_details_full_unchecked(buf: &[u8]) -> SeradataCommDetails_Full {
  flatbuffers::root_unchecked::<SeradataCommDetails_Full>(buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a size prefixed SeradataCommDetails_Full and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid size prefixed `SeradataCommDetails_Full`.
pub unsafe fn size_prefixed_root_as_seradata_comm_details_full_unchecked(buf: &[u8]) -> SeradataCommDetails_Full {
  flatbuffers::size_prefixed_root_unchecked::<SeradataCommDetails_Full>(buf)
}
pub const SERADATA_COMM_DETAILS_FULL_IDENTIFIER: &str = "SERA";

#[inline]
pub fn seradata_comm_details_full_buffer_has_identifier(buf: &[u8]) -> bool {
  flatbuffers::buffer_has_identifier(buf, SERADATA_COMM_DETAILS_FULL_IDENTIFIER, false)
}

#[inline]
pub fn seradata_comm_details_full_size_prefixed_buffer_has_identifier(buf: &[u8]) -> bool {
  flatbuffers::buffer_has_identifier(buf, SERADATA_COMM_DETAILS_FULL_IDENTIFIER, true)
}

#[inline]
pub fn finish_seradata_comm_details_full_buffer<'a, 'b, A: flatbuffers::Allocator + 'a>(
    fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
    root: flatbuffers::WIPOffset<SeradataCommDetails_Full<'a>>) {
  fbb.finish(root, Some(SERADATA_COMM_DETAILS_FULL_IDENTIFIER));
}

#[inline]
pub fn finish_size_prefixed_seradata_comm_details_full_buffer<'a, 'b, A: flatbuffers::Allocator + 'a>(fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>, root: flatbuffers::WIPOffset<SeradataCommDetails_Full<'a>>) {
  fbb.finish_size_prefixed(root, Some(SERADATA_COMM_DETAILS_FULL_IDENTIFIER));
}
