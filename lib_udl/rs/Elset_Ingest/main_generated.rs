// automatically generated by the FlatBuffers compiler, do not modify


// @generated

use core::mem;
use core::cmp::Ordering;

extern crate flatbuffers;
use self::flatbuffers::{EndianScalar, Follow};

#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
pub const ENUM_MIN_ELSET_INGEST_DATA_MODE_ENUM: i8 = 0;
#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
pub const ENUM_MAX_ELSET_INGEST_DATA_MODE_ENUM: i8 = 3;
#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
#[allow(non_camel_case_types)]
pub const ENUM_VALUES_ELSET_INGEST_DATA_MODE_ENUM: [Elset_Ingest_dataMode_Enum; 4] = [
  Elset_Ingest_dataMode_Enum::REAL,
  Elset_Ingest_dataMode_Enum::TEST,
  Elset_Ingest_dataMode_Enum::SIMULATED,
  Elset_Ingest_dataMode_Enum::EXERCISE,
];

#[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, Default)]
#[repr(transparent)]
pub struct Elset_Ingest_dataMode_Enum(pub i8);
#[allow(non_upper_case_globals)]
impl Elset_Ingest_dataMode_Enum {
  /// Data collected or produced that pertains to real-world objects, events, and analysis.
  pub const REAL: Self = Self(0);
  /// Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  pub const TEST: Self = Self(1);
  /// Synthetic data generated by a model to mimic real-world datasets.
  pub const SIMULATED: Self = Self(2);
  /// Data pertaining to a government or military exercise. The data may include both real and simulated data.
  pub const EXERCISE: Self = Self(3);

  pub const ENUM_MIN: i8 = 0;
  pub const ENUM_MAX: i8 = 3;
  pub const ENUM_VALUES: &'static [Self] = &[
    Self::REAL,
    Self::TEST,
    Self::SIMULATED,
    Self::EXERCISE,
  ];
  /// Returns the variant's name or "" if unknown.
  pub fn variant_name(self) -> Option<&'static str> {
    match self {
      Self::REAL => Some("REAL"),
      Self::TEST => Some("TEST"),
      Self::SIMULATED => Some("SIMULATED"),
      Self::EXERCISE => Some("EXERCISE"),
      _ => None,
    }
  }
}
impl core::fmt::Debug for Elset_Ingest_dataMode_Enum {
  fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
    if let Some(name) = self.variant_name() {
      f.write_str(name)
    } else {
      f.write_fmt(format_args!("<UNKNOWN {:?}>", self.0))
    }
  }
}
impl<'a> flatbuffers::Follow<'a> for Elset_Ingest_dataMode_Enum {
  type Inner = Self;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    let b = flatbuffers::read_scalar_at::<i8>(buf, loc);
    Self(b)
  }
}

impl flatbuffers::Push for Elset_Ingest_dataMode_Enum {
    type Output = Elset_Ingest_dataMode_Enum;
    #[inline]
    unsafe fn push(&self, dst: &mut [u8], _written_len: usize) {
        flatbuffers::emplace_scalar::<i8>(dst, self.0);
    }
}

impl flatbuffers::EndianScalar for Elset_Ingest_dataMode_Enum {
  type Scalar = i8;
  #[inline]
  fn to_little_endian(self) -> i8 {
    self.0.to_le()
  }
  #[inline]
  #[allow(clippy::wrong_self_convention)]
  fn from_little_endian(v: i8) -> Self {
    let b = i8::from_le(v);
    Self(b)
  }
}

impl<'a> flatbuffers::Verifiable for Elset_Ingest_dataMode_Enum {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    i8::run_verifier(v, pos)
  }
}

impl flatbuffers::SimpleToVerifyInSlice for Elset_Ingest_dataMode_Enum {}
#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
pub const ENUM_MIN_ELSET_INGEST_SOURCED_DATA_TYPES_ENUM: i8 = 0;
#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
pub const ENUM_MAX_ELSET_INGEST_SOURCED_DATA_TYPES_ENUM: i8 = 5;
#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
#[allow(non_camel_case_types)]
pub const ENUM_VALUES_ELSET_INGEST_SOURCED_DATA_TYPES_ENUM: [Elset_Ingest_sourcedDataTypes_Enum; 6] = [
  Elset_Ingest_sourcedDataTypes_Enum::EO,
  Elset_Ingest_sourcedDataTypes_Enum::RADAR,
  Elset_Ingest_sourcedDataTypes_Enum::RF,
  Elset_Ingest_sourcedDataTypes_Enum::DOA,
  Elset_Ingest_sourcedDataTypes_Enum::ELSET,
  Elset_Ingest_sourcedDataTypes_Enum::SV,
];

#[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, Default)]
#[repr(transparent)]
pub struct Elset_Ingest_sourcedDataTypes_Enum(pub i8);
#[allow(non_upper_case_globals)]
impl Elset_Ingest_sourcedDataTypes_Enum {
  /// No description available.
  pub const EO: Self = Self(0);
  /// No description available.
  pub const RADAR: Self = Self(1);
  /// No description available.
  pub const RF: Self = Self(2);
  /// No description available.
  pub const DOA: Self = Self(3);
  /// No description available.
  pub const ELSET: Self = Self(4);
  /// No description available.
  pub const SV: Self = Self(5);

  pub const ENUM_MIN: i8 = 0;
  pub const ENUM_MAX: i8 = 5;
  pub const ENUM_VALUES: &'static [Self] = &[
    Self::EO,
    Self::RADAR,
    Self::RF,
    Self::DOA,
    Self::ELSET,
    Self::SV,
  ];
  /// Returns the variant's name or "" if unknown.
  pub fn variant_name(self) -> Option<&'static str> {
    match self {
      Self::EO => Some("EO"),
      Self::RADAR => Some("RADAR"),
      Self::RF => Some("RF"),
      Self::DOA => Some("DOA"),
      Self::ELSET => Some("ELSET"),
      Self::SV => Some("SV"),
      _ => None,
    }
  }
}
impl core::fmt::Debug for Elset_Ingest_sourcedDataTypes_Enum {
  fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
    if let Some(name) = self.variant_name() {
      f.write_str(name)
    } else {
      f.write_fmt(format_args!("<UNKNOWN {:?}>", self.0))
    }
  }
}
impl<'a> flatbuffers::Follow<'a> for Elset_Ingest_sourcedDataTypes_Enum {
  type Inner = Self;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    let b = flatbuffers::read_scalar_at::<i8>(buf, loc);
    Self(b)
  }
}

impl flatbuffers::Push for Elset_Ingest_sourcedDataTypes_Enum {
    type Output = Elset_Ingest_sourcedDataTypes_Enum;
    #[inline]
    unsafe fn push(&self, dst: &mut [u8], _written_len: usize) {
        flatbuffers::emplace_scalar::<i8>(dst, self.0);
    }
}

impl flatbuffers::EndianScalar for Elset_Ingest_sourcedDataTypes_Enum {
  type Scalar = i8;
  #[inline]
  fn to_little_endian(self) -> i8 {
    self.0.to_le()
  }
  #[inline]
  #[allow(clippy::wrong_self_convention)]
  fn from_little_endian(v: i8) -> Self {
    let b = i8::from_le(v);
    Self(b)
  }
}

impl<'a> flatbuffers::Verifiable for Elset_Ingest_sourcedDataTypes_Enum {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    i8::run_verifier(v, pos)
  }
}

impl flatbuffers::SimpleToVerifyInSlice for Elset_Ingest_sourcedDataTypes_Enum {}
pub enum Elset_IngestOffset {}
#[derive(Copy, Clone, PartialEq)]

/// /// An element set is a collection of Keplerian orbital elements describing an orbit of a particular satellite. The data is used along with an orbit propagator in order to predict the motion of a satellite. The element set, or elset for short, consists of identification data, the classical elements and drag parameters.
pub struct Elset_Ingest<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for Elset_Ingest<'a> {
  type Inner = Elset_Ingest<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> Elset_Ingest<'a> {
  pub const VT_IDELSET: flatbuffers::VOffsetT = 4;
  pub const VT_CLASSIFICATIONMARKING: flatbuffers::VOffsetT = 6;
  pub const VT_SATNO: flatbuffers::VOffsetT = 8;
  pub const VT_EPOCH: flatbuffers::VOffsetT = 10;
  pub const VT_MEANMOTION: flatbuffers::VOffsetT = 12;
  pub const VT_IDONORBIT: flatbuffers::VOffsetT = 14;
  pub const VT_UCT: flatbuffers::VOffsetT = 16;
  pub const VT_ECCENTRICITY: flatbuffers::VOffsetT = 18;
  pub const VT_INCLINATION: flatbuffers::VOffsetT = 20;
  pub const VT_RAAN: flatbuffers::VOffsetT = 22;
  pub const VT_ARGOFPERIGEE: flatbuffers::VOffsetT = 24;
  pub const VT_MEANANOMALY: flatbuffers::VOffsetT = 26;
  pub const VT_REVNO: flatbuffers::VOffsetT = 28;
  pub const VT_BSTAR: flatbuffers::VOffsetT = 30;
  pub const VT_AGOM: flatbuffers::VOffsetT = 32;
  pub const VT_BALLISTICCOEFF: flatbuffers::VOffsetT = 34;
  pub const VT_MEANMOTIONDOT: flatbuffers::VOffsetT = 36;
  pub const VT_MEANMOTIONDDOT: flatbuffers::VOffsetT = 38;
  pub const VT_SEMIMAJORAXIS: flatbuffers::VOffsetT = 40;
  pub const VT_PERIOD: flatbuffers::VOffsetT = 42;
  pub const VT_APOGEE: flatbuffers::VOffsetT = 44;
  pub const VT_PERIGEE: flatbuffers::VOffsetT = 46;
  pub const VT_ORIGOBJECTID: flatbuffers::VOffsetT = 48;
  pub const VT_IDORBITDETERMINATION: flatbuffers::VOffsetT = 50;
  pub const VT_LINE1: flatbuffers::VOffsetT = 52;
  pub const VT_LINE2: flatbuffers::VOffsetT = 54;
  pub const VT_DESCRIPTOR: flatbuffers::VOffsetT = 56;
  pub const VT_CREATEDAT: flatbuffers::VOffsetT = 58;
  pub const VT_CREATEDBY: flatbuffers::VOffsetT = 60;
  pub const VT_RAWFILEURI: flatbuffers::VOffsetT = 62;
  pub const VT_ORIGIN: flatbuffers::VOffsetT = 64;
  pub const VT_SOURCEDL: flatbuffers::VOffsetT = 66;
  pub const VT_SOURCE: flatbuffers::VOffsetT = 68;
  pub const VT_DATAMODE: flatbuffers::VOffsetT = 70;
  pub const VT_TAGS: flatbuffers::VOffsetT = 72;
  pub const VT_ALGORITHM: flatbuffers::VOffsetT = 74;
  pub const VT_SOURCEDDATA: flatbuffers::VOffsetT = 76;
  pub const VT_SOURCEDDATATYPES: flatbuffers::VOffsetT = 78;
  pub const VT_TRANSACTIONID: flatbuffers::VOffsetT = 80;
  pub const VT_EPHEMTYPE: flatbuffers::VOffsetT = 82;
  pub const VT_ORIGNETWORK: flatbuffers::VOffsetT = 84;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    Elset_Ingest { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args Elset_IngestArgs<'args>
  ) -> flatbuffers::WIPOffset<Elset_Ingest<'bldr>> {
    let mut builder = Elset_IngestBuilder::new(_fbb);
    builder.add_perigee(args.perigee);
    builder.add_apogee(args.apogee);
    builder.add_period(args.period);
    builder.add_semiMajorAxis(args.semiMajorAxis);
    builder.add_meanMotionDDot(args.meanMotionDDot);
    builder.add_meanMotionDot(args.meanMotionDot);
    builder.add_ballisticCoeff(args.ballisticCoeff);
    builder.add_agom(args.agom);
    builder.add_bStar(args.bStar);
    builder.add_meanAnomaly(args.meanAnomaly);
    builder.add_argOfPerigee(args.argOfPerigee);
    builder.add_raan(args.raan);
    builder.add_inclination(args.inclination);
    builder.add_eccentricity(args.eccentricity);
    builder.add_meanMotion(args.meanMotion);
    if let Some(x) = args.origNetwork { builder.add_origNetwork(x); }
    builder.add_ephemType(args.ephemType);
    if let Some(x) = args.transactionId { builder.add_transactionId(x); }
    if let Some(x) = args.sourcedData { builder.add_sourcedData(x); }
    if let Some(x) = args.algorithm { builder.add_algorithm(x); }
    if let Some(x) = args.tags { builder.add_tags(x); }
    if let Some(x) = args.source { builder.add_source(x); }
    if let Some(x) = args.sourceDL { builder.add_sourceDL(x); }
    if let Some(x) = args.origin { builder.add_origin(x); }
    if let Some(x) = args.rawFileURI { builder.add_rawFileURI(x); }
    if let Some(x) = args.createdBy { builder.add_createdBy(x); }
    if let Some(x) = args.createdAt { builder.add_createdAt(x); }
    if let Some(x) = args.descriptor { builder.add_descriptor(x); }
    if let Some(x) = args.line2 { builder.add_line2(x); }
    if let Some(x) = args.line1 { builder.add_line1(x); }
    if let Some(x) = args.idOrbitDetermination { builder.add_idOrbitDetermination(x); }
    if let Some(x) = args.origObjectId { builder.add_origObjectId(x); }
    builder.add_revNo(args.revNo);
    if let Some(x) = args.idOnOrbit { builder.add_idOnOrbit(x); }
    if let Some(x) = args.epoch { builder.add_epoch(x); }
    builder.add_satNo(args.satNo);
    if let Some(x) = args.classificationMarking { builder.add_classificationMarking(x); }
    if let Some(x) = args.idElset { builder.add_idElset(x); }
    builder.add_sourcedDataTypes(args.sourcedDataTypes);
    builder.add_dataMode(args.dataMode);
    builder.add_uct(args.uct);
    builder.finish()
  }

  pub fn unpack(&self) -> Elset_IngestT {
    let idElset = self.idElset().map(|x| {
      x.to_string()
    });
    let classificationMarking = self.classificationMarking().map(|x| {
      x.to_string()
    });
    let satNo = self.satNo();
    let epoch = self.epoch().map(|x| {
      x.to_string()
    });
    let meanMotion = self.meanMotion();
    let idOnOrbit = self.idOnOrbit().map(|x| {
      x.to_string()
    });
    let uct = self.uct();
    let eccentricity = self.eccentricity();
    let inclination = self.inclination();
    let raan = self.raan();
    let argOfPerigee = self.argOfPerigee();
    let meanAnomaly = self.meanAnomaly();
    let revNo = self.revNo();
    let bStar = self.bStar();
    let agom = self.agom();
    let ballisticCoeff = self.ballisticCoeff();
    let meanMotionDot = self.meanMotionDot();
    let meanMotionDDot = self.meanMotionDDot();
    let semiMajorAxis = self.semiMajorAxis();
    let period = self.period();
    let apogee = self.apogee();
    let perigee = self.perigee();
    let origObjectId = self.origObjectId().map(|x| {
      x.to_string()
    });
    let idOrbitDetermination = self.idOrbitDetermination().map(|x| {
      x.to_string()
    });
    let line1 = self.line1().map(|x| {
      x.to_string()
    });
    let line2 = self.line2().map(|x| {
      x.to_string()
    });
    let descriptor = self.descriptor().map(|x| {
      x.to_string()
    });
    let createdAt = self.createdAt().map(|x| {
      x.to_string()
    });
    let createdBy = self.createdBy().map(|x| {
      x.to_string()
    });
    let rawFileURI = self.rawFileURI().map(|x| {
      x.to_string()
    });
    let origin = self.origin().map(|x| {
      x.to_string()
    });
    let sourceDL = self.sourceDL().map(|x| {
      x.to_string()
    });
    let source = self.source().map(|x| {
      x.to_string()
    });
    let dataMode = self.dataMode();
    let tags = self.tags().map(|x| {
      x.iter().map(|s| s.to_string()).collect()
    });
    let algorithm = self.algorithm().map(|x| {
      x.to_string()
    });
    let sourcedData = self.sourcedData().map(|x| {
      x.iter().map(|s| s.to_string()).collect()
    });
    let sourcedDataTypes = self.sourcedDataTypes();
    let transactionId = self.transactionId().map(|x| {
      x.to_string()
    });
    let ephemType = self.ephemType();
    let origNetwork = self.origNetwork().map(|x| {
      x.to_string()
    });
    Elset_IngestT {
      idElset,
      classificationMarking,
      satNo,
      epoch,
      meanMotion,
      idOnOrbit,
      uct,
      eccentricity,
      inclination,
      raan,
      argOfPerigee,
      meanAnomaly,
      revNo,
      bStar,
      agom,
      ballisticCoeff,
      meanMotionDot,
      meanMotionDDot,
      semiMajorAxis,
      period,
      apogee,
      perigee,
      origObjectId,
      idOrbitDetermination,
      line1,
      line2,
      descriptor,
      createdAt,
      createdBy,
      rawFileURI,
      origin,
      sourceDL,
      source,
      dataMode,
      tags,
      algorithm,
      sourcedData,
      sourcedDataTypes,
      transactionId,
      ephemType,
      origNetwork,
    }
  }

  /// Unique identifier of the record, auto-generated by the system.
  /// Example: /// Example: ELSET-ID
  /// Constraints: Minimum length = 1, Maximum length = 36
  #[inline]
  pub fn idElset(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(Elset_Ingest::VT_IDELSET, None)}
  }
  /// Classification marking of the data in IC/CAPCO Portion-marked format.
  /// Example: /// Example: U
  /// Constraints: Minimum length = 1, Maximum length = 128
  #[inline]
  pub fn classificationMarking(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(Elset_Ingest::VT_CLASSIFICATIONMARKING, None)}
  }
  /// Satellite/catalog number of the target on-orbit object.
  /// Example: /// Example: 12
  /// Constraints: No constraints specified.
  #[inline]
  pub fn satNo(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(Elset_Ingest::VT_SATNO, Some(0)).unwrap()}
  }
  /// Elset epoch time in ISO 8601 UTC format, with microsecond precision.
  /// Example: /// Example: 2018-01-01T16:00:00.123456Z
  /// Constraints: No constraints specified.
  #[inline]
  pub fn epoch(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(Elset_Ingest::VT_EPOCH, None)}
  }
  /// Mean motion is the angular speed required for a body to complete one orbit, assuming constant speed in a circular orbit which completes in the same time as the variable speed, elliptical orbit of the actual body. Measured in revolutions per day.
  /// Example: /// Example: 1.1
  /// Constraints: No constraints specified.
  #[inline]
  pub fn meanMotion(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(Elset_Ingest::VT_MEANMOTION, Some(0.0)).unwrap()}
  }
  /// Unique identifier of the satellite on-orbit object, if correlated. For the public catalog, the idOnOrbit is typically the satellite number as a string, but may be a UUID for analyst or other unknown or untracked satellites.
  /// Example: /// Example: ONORBIT-ID
  /// Constraints: Minimum length = 0, Maximum length = 36
  #[inline]
  pub fn idOnOrbit(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(Elset_Ingest::VT_IDONORBIT, None)}
  }
  /// Boolean indicating this Elset was unable to be correlated to a known object. This flag should only be set to true by data providers after an attempt to correlate to an on-orbit object was made and failed. If unable to correlate, the 'origObjectId' field may be populated with an internal data provider specific identifier.
  /// Example: /// Example: False
  /// Constraints: No constraints specified.
  #[inline]
  pub fn uct(&self) -> bool {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<bool>(Elset_Ingest::VT_UCT, Some(false)).unwrap()}
  }
  /// The orbital eccentricity of an astronomical object is a parameter that determines the amount by which its orbit around another body deviates from a perfect circle. A value of 0 is a circular orbit, values between 0 and 1 form an elliptic orbit, 1 is a parabolic escape orbit, and greater than 1 is a hyperbolic escape orbit.
  /// Example: /// Example: 0.333
  /// Constraints: No constraints specified.
  #[inline]
  pub fn eccentricity(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(Elset_Ingest::VT_ECCENTRICITY, Some(0.0)).unwrap()}
  }
  /// The angle between the equator and the orbit when looking from the center of the Earth. If the orbit went exactly around the equator from left to right, then the inclination would be 0. The inclination ranges from 0 to 180 degrees.
  /// Example: /// Example: 45.1
  /// Constraints: No constraints specified.
  #[inline]
  pub fn inclination(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(Elset_Ingest::VT_INCLINATION, Some(0.0)).unwrap()}
  }
  /// Right ascension of the ascending node, or RAAN is the angle as measured in degrees eastwards (or, as seen from the north, counterclockwise) from the First Point of Aries to the ascending node, which is where the orbit crosses the equator when traveling north.
  /// Example: /// Example: 1.1
  /// Constraints: No constraints specified.
  #[inline]
  pub fn raan(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(Elset_Ingest::VT_RAAN, Some(0.0)).unwrap()}
  }
  /// The argument of perigee is the angle in degrees formed between the perigee and the ascending node. If the perigee would occur at the ascending node, the argument of perigee would be 0.
  /// Example: /// Example: 1.1
  /// Constraints: No constraints specified.
  #[inline]
  pub fn argOfPerigee(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(Elset_Ingest::VT_ARGOFPERIGEE, Some(0.0)).unwrap()}
  }
  /// Where the satellite is in its orbital path. The mean anomaly ranges from 0 to 360 degrees. The mean anomaly is referenced to the perigee. If the satellite were at the perigee, the mean anomaly would be 0.
  /// Example: /// Example: 179.1
  /// Constraints: No constraints specified.
  #[inline]
  pub fn meanAnomaly(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(Elset_Ingest::VT_MEANANOMALY, Some(0.0)).unwrap()}
  }
  /// The current revolution number. The value is incremented when a satellite crosses the equator on an ascending pass.
  /// Example: /// Example: 111
  /// Constraints: No constraints specified.
  #[inline]
  pub fn revNo(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(Elset_Ingest::VT_REVNO, Some(0)).unwrap()}
  }
  /// The drag term for SGP4 orbital model, used for calculating decay constants for altitude, eccentricity etc, measured in inverse earth radii.
  /// Example: /// Example: 1.1
  /// Constraints: No constraints specified.
  #[inline]
  pub fn bStar(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(Elset_Ingest::VT_BSTAR, Some(0.0)).unwrap()}
  }
  /// AGOM, expressed in m^2/kg, is the value of the (averaged) object Area times the solar radiation pressure coefficient(Gamma) over the object Mass. Applicable only with ephemType4.
  /// Example: /// Example: 0.0126
  /// Constraints: No constraints specified.
  #[inline]
  pub fn agom(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(Elset_Ingest::VT_AGOM, Some(0.0)).unwrap()}
  }
  /// Ballistic coefficient, in m^2/kg. Applicable only with ephemType4.
  /// Example: /// Example: 0.00815
  /// Constraints: No constraints specified.
  #[inline]
  pub fn ballisticCoeff(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(Elset_Ingest::VT_BALLISTICCOEFF, Some(0.0)).unwrap()}
  }
  /// 1st derivative of the mean motion with respect to time. Units are revolutions per day squared.
  /// Example: /// Example: 1.1
  /// Constraints: No constraints specified.
  #[inline]
  pub fn meanMotionDot(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(Elset_Ingest::VT_MEANMOTIONDOT, Some(0.0)).unwrap()}
  }
  /// 2nd derivative of the mean motion with respect to time. Units are revolutions per day cubed.
  /// Example: /// Example: 1.1
  /// Constraints: No constraints specified.
  #[inline]
  pub fn meanMotionDDot(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(Elset_Ingest::VT_MEANMOTIONDDOT, Some(0.0)).unwrap()}
  }
  /// The sum of the periapsis and apoapsis distances divided by two. For circular orbits, the semimajor axis is the distance between the centers of the bodies, not the distance of the bodies from the center of mass. Units are kilometers.
  /// Example: /// Example: 1.1
  /// Constraints: No constraints specified.
  #[inline]
  pub fn semiMajorAxis(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(Elset_Ingest::VT_SEMIMAJORAXIS, Some(0.0)).unwrap()}
  }
  /// Period of the orbit equal to inverse of mean motion, in minutes.
  /// Example: /// Example: 1.1
  /// Constraints: No constraints specified.
  #[inline]
  pub fn period(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(Elset_Ingest::VT_PERIOD, Some(0.0)).unwrap()}
  }
  /// The orbit point furthest from the center of the earth in kilometers. If not provided, apogee will be computed from the TLE according to the following. Using mu, the standard gravitational parameter for the earth (398600.4418), semi-major axis A = (mu/(n * 2 * pi/(24*3600))^2)(1/3). Using semi-major axis A, eccentricity E, apogee = (A * (1 + E)) in km. Note that the calculations are for computing the apogee radius from the center of the earth, to compute apogee altitude the radius of the earth should be subtracted (6378.135 km).
  /// Example: /// Example: 1.1
  /// Constraints: No constraints specified.
  #[inline]
  pub fn apogee(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(Elset_Ingest::VT_APOGEE, Some(0.0)).unwrap()}
  }
  /// The orbit point nearest to the center of the earth in kilometers. If not provided, perigee will be computed from the TLE according to the following. Using mu, the standard gravitational parameter for the earth (398600.4418), semi-major axis A = (mu/(n * 2 * pi/(24*3600))^2)(1/3). Using semi-major axis A, eccentricity E, perigee = (A * (1 - E)) in km. Note that the calculations are for computing the perigee radius from the center of the earth, to compute perigee altitude the radius of the earth should be subtracted (6378.135 km).
  /// Example: /// Example: 1.1
  /// Constraints: No constraints specified.
  #[inline]
  pub fn perigee(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(Elset_Ingest::VT_PERIGEE, Some(0.0)).unwrap()}
  }
  /// Optional identifier provided by elset source to indicate the target onorbit object of this elset. This may be an internal identifier and not necessarily map to a valid satellite number.
  /// Example: /// Example: ORIGOBJECT-ID
  /// Constraints: Minimum length = 0, Maximum length = 64
  #[inline]
  pub fn origObjectId(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(Elset_Ingest::VT_ORIGOBJECTID, None)}
  }
  /// Unique identifier of the OD solution record that produced this elset. This ID can be used to obtain additional information on an OrbitDetermination object using the 'get by ID' operation (e.g. /udl/orbitdetermination/{id}). For example, the OrbitDetermination with idOrbitDetermination = abc would be queried as /udl/orbitdetermination/abc.
  /// Example: /// Example: 026dd511-8ba5-47d3-9909-836149f87686
  /// Constraints: Minimum length = 0, Maximum length = 36
  #[inline]
  pub fn idOrbitDetermination(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(Elset_Ingest::VT_IDORBITDETERMINATION, None)}
  }
  /// Read only derived/generated line1 of a legacy TLE (two line element set) format, ignored on create/edit operations.
  /// Example: /// Example: Example line1
  /// Constraints: Minimum length = 0, Maximum length = 69
  #[inline]
  pub fn line1(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(Elset_Ingest::VT_LINE1, None)}
  }
  /// Read only derived/generated line2 of a legacy TLE (two line element set) format, ignored on create/edit operations.
  /// Example: /// Example: Example line2
  /// Constraints: Minimum length = 0, Maximum length = 69
  #[inline]
  pub fn line2(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(Elset_Ingest::VT_LINE2, None)}
  }
  /// Optional source-provided and searchable metadata or descriptor of the data.
  /// Example: /// Example: Example description
  /// Constraints: Minimum length = 0, Maximum length = 64
  #[inline]
  pub fn descriptor(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(Elset_Ingest::VT_DESCRIPTOR, None)}
  }
  /// Time the row was created in the database, auto-populated by the system.
  /// Example: /// Example: 2018-01-01T16:00:00.123Z
  /// Constraints: No constraints specified.
  #[inline]
  pub fn createdAt(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(Elset_Ingest::VT_CREATEDAT, None)}
  }
  /// Application user who created the row in the database, auto-populated by the system.
  /// Example: /// Example: some.user
  /// Constraints: Minimum length = 1, Maximum length = 64
  #[inline]
  pub fn createdBy(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(Elset_Ingest::VT_CREATEDBY, None)}
  }
  /// Optional URI location in the document repository of the raw file parsed by the system to produce this record. To download the raw file, prepend https://udl-hostname/scs/download?id= to this value.
  /// Example: /// Example: Example URI
  /// Constraints: Minimum length = 0, Maximum length = 256
  #[inline]
  pub fn rawFileURI(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(Elset_Ingest::VT_RAWFILEURI, None)}
  }
  /// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
  /// Example: /// Example: THIRD_PARTY_DATASOURCE
  /// Constraints: Minimum length = 0, Maximum length = 64
  #[inline]
  pub fn origin(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(Elset_Ingest::VT_ORIGIN, None)}
  }
  /// The source data library from which this record was received. This could be a remote or tactical UDL or another data library. If null, the record should be assumed to have originated from the primary Enterprise UDL.
  /// Example: /// Example: AXE
  /// Constraints: Minimum length = 0, Maximum length = 64
  #[inline]
  pub fn sourceDL(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(Elset_Ingest::VT_SOURCEDL, None)}
  }
  /// Source of the data.
  /// Example: /// Example: Bluestaq
  /// Constraints: Minimum length = 1, Maximum length = 64
  #[inline]
  pub fn source(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(Elset_Ingest::VT_SOURCE, None)}
  }
  /// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
  /// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
  /// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
  /// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
  /// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  /// Example: /// Example: TEST
  /// Constraints: Minimum length = 1, Maximum length = 32
  #[inline]
  pub fn dataMode(&self) -> Elset_Ingest_dataMode_Enum {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<Elset_Ingest_dataMode_Enum>(Elset_Ingest::VT_DATAMODE, Some(Elset_Ingest_dataMode_Enum::REAL)).unwrap()}
  }
  /// Optional array of provider/source specific tags for this data, where each element is no longer than 32 characters, used for implementing data owner conditional access controls to restrict access to the data. Should be left null by data providers unless conditional access controls are coordinated with the UDL team.
  /// Example: /// Example: ['PROVIDER_TAG1', 'PROVIDER_TAG2']
  /// Constraints: No constraints specified.
  #[inline]
  pub fn tags(&self) -> Option<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>(Elset_Ingest::VT_TAGS, None)}
  }
  /// Optional algorithm used to produce this record.
  /// Example: /// Example: Example algorithm
  /// Constraints: Minimum length = 0, Maximum length = 64
  #[inline]
  pub fn algorithm(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(Elset_Ingest::VT_ALGORITHM, None)}
  }
  /// Optional array of UDL data (observation) UUIDs used to build this element set. See the associated sourcedDataTypes array for the specific types of observations for the positionally corresponding UUIDs in this array (the two arrays must match in size).
  /// Example: /// Example: ['OBSERVATION_UUID1', 'OBSERVATION_UUID2']
  /// Constraints: No constraints specified.
  #[inline]
  pub fn sourcedData(&self) -> Option<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>(Elset_Ingest::VT_SOURCEDDATA, None)}
  }
  /// Optional array of UDL observation data types used to build this element set (e.g. EO, RADAR, RF, DOA). See the associated sourcedData array for the specific UUIDs of observations for the positionally corresponding data types in this array (the two arrays must match in size).
  /// Example: /// Example: ['RADAR', 'RF']
  /// Constraints: No constraints specified.
  #[inline]
  pub fn sourcedDataTypes(&self) -> Elset_Ingest_sourcedDataTypes_Enum {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<Elset_Ingest_sourcedDataTypes_Enum>(Elset_Ingest::VT_SOURCEDDATATYPES, Some(Elset_Ingest_sourcedDataTypes_Enum::EO)).unwrap()}
  }
  /// Optional identifier to track a commercial or marketplace transaction executed to produce this data.
  /// Example: /// Example: TRANSACTION-ID
  /// Constraints: Minimum length = 0, Maximum length = 64
  #[inline]
  pub fn transactionId(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(Elset_Ingest::VT_TRANSACTIONID, None)}
  }
  /// The ephemeris type associated with this TLE:
  /// 0:&nbsp;SGP4 if orbital period&nbsp;&lt;&nbsp;225 minutes, and SDP4 otherwise
  /// 1:&nbsp;SGP
  /// 2:&nbsp;SGP4
  /// 3:&nbsp;SDP4
  /// 4:&nbsp;SGP8, also referred to as SGP4-XP
  /// 5:&nbsp;SDP8
  /// Example: /// Example: 1
  /// Constraints: No constraints specified.
  #[inline]
  pub fn ephemType(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(Elset_Ingest::VT_EPHEMTYPE, Some(0)).unwrap()}
  }
  /// The originating source network on which this record was created, auto-populated by the system.
  /// Example: /// Example: ORIG
  /// Constraints: Minimum length = 1, Maximum length = 32
  #[inline]
  pub fn origNetwork(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(Elset_Ingest::VT_ORIGNETWORK, None)}
  }
}

impl flatbuffers::Verifiable for Elset_Ingest<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("idElset", Self::VT_IDELSET, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("classificationMarking", Self::VT_CLASSIFICATIONMARKING, false)?
     .visit_field::<i32>("satNo", Self::VT_SATNO, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("epoch", Self::VT_EPOCH, false)?
     .visit_field::<f64>("meanMotion", Self::VT_MEANMOTION, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("idOnOrbit", Self::VT_IDONORBIT, false)?
     .visit_field::<bool>("uct", Self::VT_UCT, false)?
     .visit_field::<f64>("eccentricity", Self::VT_ECCENTRICITY, false)?
     .visit_field::<f64>("inclination", Self::VT_INCLINATION, false)?
     .visit_field::<f64>("raan", Self::VT_RAAN, false)?
     .visit_field::<f64>("argOfPerigee", Self::VT_ARGOFPERIGEE, false)?
     .visit_field::<f64>("meanAnomaly", Self::VT_MEANANOMALY, false)?
     .visit_field::<i32>("revNo", Self::VT_REVNO, false)?
     .visit_field::<f64>("bStar", Self::VT_BSTAR, false)?
     .visit_field::<f64>("agom", Self::VT_AGOM, false)?
     .visit_field::<f64>("ballisticCoeff", Self::VT_BALLISTICCOEFF, false)?
     .visit_field::<f64>("meanMotionDot", Self::VT_MEANMOTIONDOT, false)?
     .visit_field::<f64>("meanMotionDDot", Self::VT_MEANMOTIONDDOT, false)?
     .visit_field::<f64>("semiMajorAxis", Self::VT_SEMIMAJORAXIS, false)?
     .visit_field::<f64>("period", Self::VT_PERIOD, false)?
     .visit_field::<f64>("apogee", Self::VT_APOGEE, false)?
     .visit_field::<f64>("perigee", Self::VT_PERIGEE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("origObjectId", Self::VT_ORIGOBJECTID, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("idOrbitDetermination", Self::VT_IDORBITDETERMINATION, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("line1", Self::VT_LINE1, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("line2", Self::VT_LINE2, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("descriptor", Self::VT_DESCRIPTOR, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("createdAt", Self::VT_CREATEDAT, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("createdBy", Self::VT_CREATEDBY, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("rawFileURI", Self::VT_RAWFILEURI, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("origin", Self::VT_ORIGIN, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("sourceDL", Self::VT_SOURCEDL, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("source", Self::VT_SOURCE, false)?
     .visit_field::<Elset_Ingest_dataMode_Enum>("dataMode", Self::VT_DATAMODE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<&'_ str>>>>("tags", Self::VT_TAGS, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("algorithm", Self::VT_ALGORITHM, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<&'_ str>>>>("sourcedData", Self::VT_SOURCEDDATA, false)?
     .visit_field::<Elset_Ingest_sourcedDataTypes_Enum>("sourcedDataTypes", Self::VT_SOURCEDDATATYPES, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("transactionId", Self::VT_TRANSACTIONID, false)?
     .visit_field::<i32>("ephemType", Self::VT_EPHEMTYPE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("origNetwork", Self::VT_ORIGNETWORK, false)?
     .finish();
    Ok(())
  }
}
pub struct Elset_IngestArgs<'a> {
    pub idElset: Option<flatbuffers::WIPOffset<&'a str>>,
    pub classificationMarking: Option<flatbuffers::WIPOffset<&'a str>>,
    pub satNo: i32,
    pub epoch: Option<flatbuffers::WIPOffset<&'a str>>,
    pub meanMotion: f64,
    pub idOnOrbit: Option<flatbuffers::WIPOffset<&'a str>>,
    pub uct: bool,
    pub eccentricity: f64,
    pub inclination: f64,
    pub raan: f64,
    pub argOfPerigee: f64,
    pub meanAnomaly: f64,
    pub revNo: i32,
    pub bStar: f64,
    pub agom: f64,
    pub ballisticCoeff: f64,
    pub meanMotionDot: f64,
    pub meanMotionDDot: f64,
    pub semiMajorAxis: f64,
    pub period: f64,
    pub apogee: f64,
    pub perigee: f64,
    pub origObjectId: Option<flatbuffers::WIPOffset<&'a str>>,
    pub idOrbitDetermination: Option<flatbuffers::WIPOffset<&'a str>>,
    pub line1: Option<flatbuffers::WIPOffset<&'a str>>,
    pub line2: Option<flatbuffers::WIPOffset<&'a str>>,
    pub descriptor: Option<flatbuffers::WIPOffset<&'a str>>,
    pub createdAt: Option<flatbuffers::WIPOffset<&'a str>>,
    pub createdBy: Option<flatbuffers::WIPOffset<&'a str>>,
    pub rawFileURI: Option<flatbuffers::WIPOffset<&'a str>>,
    pub origin: Option<flatbuffers::WIPOffset<&'a str>>,
    pub sourceDL: Option<flatbuffers::WIPOffset<&'a str>>,
    pub source: Option<flatbuffers::WIPOffset<&'a str>>,
    pub dataMode: Elset_Ingest_dataMode_Enum,
    pub tags: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>,
    pub algorithm: Option<flatbuffers::WIPOffset<&'a str>>,
    pub sourcedData: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>,
    pub sourcedDataTypes: Elset_Ingest_sourcedDataTypes_Enum,
    pub transactionId: Option<flatbuffers::WIPOffset<&'a str>>,
    pub ephemType: i32,
    pub origNetwork: Option<flatbuffers::WIPOffset<&'a str>>,
}
impl<'a> Default for Elset_IngestArgs<'a> {
  #[inline]
  fn default() -> Self {
    Elset_IngestArgs {
      idElset: None,
      classificationMarking: None,
      satNo: 0,
      epoch: None,
      meanMotion: 0.0,
      idOnOrbit: None,
      uct: false,
      eccentricity: 0.0,
      inclination: 0.0,
      raan: 0.0,
      argOfPerigee: 0.0,
      meanAnomaly: 0.0,
      revNo: 0,
      bStar: 0.0,
      agom: 0.0,
      ballisticCoeff: 0.0,
      meanMotionDot: 0.0,
      meanMotionDDot: 0.0,
      semiMajorAxis: 0.0,
      period: 0.0,
      apogee: 0.0,
      perigee: 0.0,
      origObjectId: None,
      idOrbitDetermination: None,
      line1: None,
      line2: None,
      descriptor: None,
      createdAt: None,
      createdBy: None,
      rawFileURI: None,
      origin: None,
      sourceDL: None,
      source: None,
      dataMode: Elset_Ingest_dataMode_Enum::REAL,
      tags: None,
      algorithm: None,
      sourcedData: None,
      sourcedDataTypes: Elset_Ingest_sourcedDataTypes_Enum::EO,
      transactionId: None,
      ephemType: 0,
      origNetwork: None,
    }
  }
}

pub struct Elset_IngestBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> Elset_IngestBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_idElset(&mut self, idElset: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Elset_Ingest::VT_IDELSET, idElset);
  }
  #[inline]
  pub fn add_classificationMarking(&mut self, classificationMarking: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Elset_Ingest::VT_CLASSIFICATIONMARKING, classificationMarking);
  }
  #[inline]
  pub fn add_satNo(&mut self, satNo: i32) {
    self.fbb_.push_slot::<i32>(Elset_Ingest::VT_SATNO, satNo, 0);
  }
  #[inline]
  pub fn add_epoch(&mut self, epoch: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Elset_Ingest::VT_EPOCH, epoch);
  }
  #[inline]
  pub fn add_meanMotion(&mut self, meanMotion: f64) {
    self.fbb_.push_slot::<f64>(Elset_Ingest::VT_MEANMOTION, meanMotion, 0.0);
  }
  #[inline]
  pub fn add_idOnOrbit(&mut self, idOnOrbit: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Elset_Ingest::VT_IDONORBIT, idOnOrbit);
  }
  #[inline]
  pub fn add_uct(&mut self, uct: bool) {
    self.fbb_.push_slot::<bool>(Elset_Ingest::VT_UCT, uct, false);
  }
  #[inline]
  pub fn add_eccentricity(&mut self, eccentricity: f64) {
    self.fbb_.push_slot::<f64>(Elset_Ingest::VT_ECCENTRICITY, eccentricity, 0.0);
  }
  #[inline]
  pub fn add_inclination(&mut self, inclination: f64) {
    self.fbb_.push_slot::<f64>(Elset_Ingest::VT_INCLINATION, inclination, 0.0);
  }
  #[inline]
  pub fn add_raan(&mut self, raan: f64) {
    self.fbb_.push_slot::<f64>(Elset_Ingest::VT_RAAN, raan, 0.0);
  }
  #[inline]
  pub fn add_argOfPerigee(&mut self, argOfPerigee: f64) {
    self.fbb_.push_slot::<f64>(Elset_Ingest::VT_ARGOFPERIGEE, argOfPerigee, 0.0);
  }
  #[inline]
  pub fn add_meanAnomaly(&mut self, meanAnomaly: f64) {
    self.fbb_.push_slot::<f64>(Elset_Ingest::VT_MEANANOMALY, meanAnomaly, 0.0);
  }
  #[inline]
  pub fn add_revNo(&mut self, revNo: i32) {
    self.fbb_.push_slot::<i32>(Elset_Ingest::VT_REVNO, revNo, 0);
  }
  #[inline]
  pub fn add_bStar(&mut self, bStar: f64) {
    self.fbb_.push_slot::<f64>(Elset_Ingest::VT_BSTAR, bStar, 0.0);
  }
  #[inline]
  pub fn add_agom(&mut self, agom: f64) {
    self.fbb_.push_slot::<f64>(Elset_Ingest::VT_AGOM, agom, 0.0);
  }
  #[inline]
  pub fn add_ballisticCoeff(&mut self, ballisticCoeff: f64) {
    self.fbb_.push_slot::<f64>(Elset_Ingest::VT_BALLISTICCOEFF, ballisticCoeff, 0.0);
  }
  #[inline]
  pub fn add_meanMotionDot(&mut self, meanMotionDot: f64) {
    self.fbb_.push_slot::<f64>(Elset_Ingest::VT_MEANMOTIONDOT, meanMotionDot, 0.0);
  }
  #[inline]
  pub fn add_meanMotionDDot(&mut self, meanMotionDDot: f64) {
    self.fbb_.push_slot::<f64>(Elset_Ingest::VT_MEANMOTIONDDOT, meanMotionDDot, 0.0);
  }
  #[inline]
  pub fn add_semiMajorAxis(&mut self, semiMajorAxis: f64) {
    self.fbb_.push_slot::<f64>(Elset_Ingest::VT_SEMIMAJORAXIS, semiMajorAxis, 0.0);
  }
  #[inline]
  pub fn add_period(&mut self, period: f64) {
    self.fbb_.push_slot::<f64>(Elset_Ingest::VT_PERIOD, period, 0.0);
  }
  #[inline]
  pub fn add_apogee(&mut self, apogee: f64) {
    self.fbb_.push_slot::<f64>(Elset_Ingest::VT_APOGEE, apogee, 0.0);
  }
  #[inline]
  pub fn add_perigee(&mut self, perigee: f64) {
    self.fbb_.push_slot::<f64>(Elset_Ingest::VT_PERIGEE, perigee, 0.0);
  }
  #[inline]
  pub fn add_origObjectId(&mut self, origObjectId: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Elset_Ingest::VT_ORIGOBJECTID, origObjectId);
  }
  #[inline]
  pub fn add_idOrbitDetermination(&mut self, idOrbitDetermination: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Elset_Ingest::VT_IDORBITDETERMINATION, idOrbitDetermination);
  }
  #[inline]
  pub fn add_line1(&mut self, line1: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Elset_Ingest::VT_LINE1, line1);
  }
  #[inline]
  pub fn add_line2(&mut self, line2: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Elset_Ingest::VT_LINE2, line2);
  }
  #[inline]
  pub fn add_descriptor(&mut self, descriptor: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Elset_Ingest::VT_DESCRIPTOR, descriptor);
  }
  #[inline]
  pub fn add_createdAt(&mut self, createdAt: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Elset_Ingest::VT_CREATEDAT, createdAt);
  }
  #[inline]
  pub fn add_createdBy(&mut self, createdBy: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Elset_Ingest::VT_CREATEDBY, createdBy);
  }
  #[inline]
  pub fn add_rawFileURI(&mut self, rawFileURI: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Elset_Ingest::VT_RAWFILEURI, rawFileURI);
  }
  #[inline]
  pub fn add_origin(&mut self, origin: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Elset_Ingest::VT_ORIGIN, origin);
  }
  #[inline]
  pub fn add_sourceDL(&mut self, sourceDL: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Elset_Ingest::VT_SOURCEDL, sourceDL);
  }
  #[inline]
  pub fn add_source(&mut self, source: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Elset_Ingest::VT_SOURCE, source);
  }
  #[inline]
  pub fn add_dataMode(&mut self, dataMode: Elset_Ingest_dataMode_Enum) {
    self.fbb_.push_slot::<Elset_Ingest_dataMode_Enum>(Elset_Ingest::VT_DATAMODE, dataMode, Elset_Ingest_dataMode_Enum::REAL);
  }
  #[inline]
  pub fn add_tags(&mut self, tags: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<&'b  str>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Elset_Ingest::VT_TAGS, tags);
  }
  #[inline]
  pub fn add_algorithm(&mut self, algorithm: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Elset_Ingest::VT_ALGORITHM, algorithm);
  }
  #[inline]
  pub fn add_sourcedData(&mut self, sourcedData: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<&'b  str>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Elset_Ingest::VT_SOURCEDDATA, sourcedData);
  }
  #[inline]
  pub fn add_sourcedDataTypes(&mut self, sourcedDataTypes: Elset_Ingest_sourcedDataTypes_Enum) {
    self.fbb_.push_slot::<Elset_Ingest_sourcedDataTypes_Enum>(Elset_Ingest::VT_SOURCEDDATATYPES, sourcedDataTypes, Elset_Ingest_sourcedDataTypes_Enum::EO);
  }
  #[inline]
  pub fn add_transactionId(&mut self, transactionId: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Elset_Ingest::VT_TRANSACTIONID, transactionId);
  }
  #[inline]
  pub fn add_ephemType(&mut self, ephemType: i32) {
    self.fbb_.push_slot::<i32>(Elset_Ingest::VT_EPHEMTYPE, ephemType, 0);
  }
  #[inline]
  pub fn add_origNetwork(&mut self, origNetwork: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Elset_Ingest::VT_ORIGNETWORK, origNetwork);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> Elset_IngestBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    Elset_IngestBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<Elset_Ingest<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for Elset_Ingest<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("Elset_Ingest");
      ds.field("idElset", &self.idElset());
      ds.field("classificationMarking", &self.classificationMarking());
      ds.field("satNo", &self.satNo());
      ds.field("epoch", &self.epoch());
      ds.field("meanMotion", &self.meanMotion());
      ds.field("idOnOrbit", &self.idOnOrbit());
      ds.field("uct", &self.uct());
      ds.field("eccentricity", &self.eccentricity());
      ds.field("inclination", &self.inclination());
      ds.field("raan", &self.raan());
      ds.field("argOfPerigee", &self.argOfPerigee());
      ds.field("meanAnomaly", &self.meanAnomaly());
      ds.field("revNo", &self.revNo());
      ds.field("bStar", &self.bStar());
      ds.field("agom", &self.agom());
      ds.field("ballisticCoeff", &self.ballisticCoeff());
      ds.field("meanMotionDot", &self.meanMotionDot());
      ds.field("meanMotionDDot", &self.meanMotionDDot());
      ds.field("semiMajorAxis", &self.semiMajorAxis());
      ds.field("period", &self.period());
      ds.field("apogee", &self.apogee());
      ds.field("perigee", &self.perigee());
      ds.field("origObjectId", &self.origObjectId());
      ds.field("idOrbitDetermination", &self.idOrbitDetermination());
      ds.field("line1", &self.line1());
      ds.field("line2", &self.line2());
      ds.field("descriptor", &self.descriptor());
      ds.field("createdAt", &self.createdAt());
      ds.field("createdBy", &self.createdBy());
      ds.field("rawFileURI", &self.rawFileURI());
      ds.field("origin", &self.origin());
      ds.field("sourceDL", &self.sourceDL());
      ds.field("source", &self.source());
      ds.field("dataMode", &self.dataMode());
      ds.field("tags", &self.tags());
      ds.field("algorithm", &self.algorithm());
      ds.field("sourcedData", &self.sourcedData());
      ds.field("sourcedDataTypes", &self.sourcedDataTypes());
      ds.field("transactionId", &self.transactionId());
      ds.field("ephemType", &self.ephemType());
      ds.field("origNetwork", &self.origNetwork());
      ds.finish()
  }
}
#[non_exhaustive]
#[derive(Debug, Clone, PartialEq)]
pub struct Elset_IngestT {
  pub idElset: Option<String>,
  pub classificationMarking: Option<String>,
  pub satNo: i32,
  pub epoch: Option<String>,
  pub meanMotion: f64,
  pub idOnOrbit: Option<String>,
  pub uct: bool,
  pub eccentricity: f64,
  pub inclination: f64,
  pub raan: f64,
  pub argOfPerigee: f64,
  pub meanAnomaly: f64,
  pub revNo: i32,
  pub bStar: f64,
  pub agom: f64,
  pub ballisticCoeff: f64,
  pub meanMotionDot: f64,
  pub meanMotionDDot: f64,
  pub semiMajorAxis: f64,
  pub period: f64,
  pub apogee: f64,
  pub perigee: f64,
  pub origObjectId: Option<String>,
  pub idOrbitDetermination: Option<String>,
  pub line1: Option<String>,
  pub line2: Option<String>,
  pub descriptor: Option<String>,
  pub createdAt: Option<String>,
  pub createdBy: Option<String>,
  pub rawFileURI: Option<String>,
  pub origin: Option<String>,
  pub sourceDL: Option<String>,
  pub source: Option<String>,
  pub dataMode: Elset_Ingest_dataMode_Enum,
  pub tags: Option<Vec<String>>,
  pub algorithm: Option<String>,
  pub sourcedData: Option<Vec<String>>,
  pub sourcedDataTypes: Elset_Ingest_sourcedDataTypes_Enum,
  pub transactionId: Option<String>,
  pub ephemType: i32,
  pub origNetwork: Option<String>,
}
impl Default for Elset_IngestT {
  fn default() -> Self {
    Self {
      idElset: None,
      classificationMarking: None,
      satNo: 0,
      epoch: None,
      meanMotion: 0.0,
      idOnOrbit: None,
      uct: false,
      eccentricity: 0.0,
      inclination: 0.0,
      raan: 0.0,
      argOfPerigee: 0.0,
      meanAnomaly: 0.0,
      revNo: 0,
      bStar: 0.0,
      agom: 0.0,
      ballisticCoeff: 0.0,
      meanMotionDot: 0.0,
      meanMotionDDot: 0.0,
      semiMajorAxis: 0.0,
      period: 0.0,
      apogee: 0.0,
      perigee: 0.0,
      origObjectId: None,
      idOrbitDetermination: None,
      line1: None,
      line2: None,
      descriptor: None,
      createdAt: None,
      createdBy: None,
      rawFileURI: None,
      origin: None,
      sourceDL: None,
      source: None,
      dataMode: Elset_Ingest_dataMode_Enum::REAL,
      tags: None,
      algorithm: None,
      sourcedData: None,
      sourcedDataTypes: Elset_Ingest_sourcedDataTypes_Enum::EO,
      transactionId: None,
      ephemType: 0,
      origNetwork: None,
    }
  }
}
impl Elset_IngestT {
  pub fn pack<'b, A: flatbuffers::Allocator + 'b>(
    &self,
    _fbb: &mut flatbuffers::FlatBufferBuilder<'b, A>
  ) -> flatbuffers::WIPOffset<Elset_Ingest<'b>> {
    let idElset = self.idElset.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let classificationMarking = self.classificationMarking.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let satNo = self.satNo;
    let epoch = self.epoch.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let meanMotion = self.meanMotion;
    let idOnOrbit = self.idOnOrbit.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let uct = self.uct;
    let eccentricity = self.eccentricity;
    let inclination = self.inclination;
    let raan = self.raan;
    let argOfPerigee = self.argOfPerigee;
    let meanAnomaly = self.meanAnomaly;
    let revNo = self.revNo;
    let bStar = self.bStar;
    let agom = self.agom;
    let ballisticCoeff = self.ballisticCoeff;
    let meanMotionDot = self.meanMotionDot;
    let meanMotionDDot = self.meanMotionDDot;
    let semiMajorAxis = self.semiMajorAxis;
    let period = self.period;
    let apogee = self.apogee;
    let perigee = self.perigee;
    let origObjectId = self.origObjectId.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let idOrbitDetermination = self.idOrbitDetermination.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let line1 = self.line1.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let line2 = self.line2.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let descriptor = self.descriptor.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let createdAt = self.createdAt.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let createdBy = self.createdBy.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let rawFileURI = self.rawFileURI.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let origin = self.origin.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let sourceDL = self.sourceDL.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let source = self.source.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let dataMode = self.dataMode;
    let tags = self.tags.as_ref().map(|x|{
      let w: Vec<_> = x.iter().map(|s| _fbb.create_string(s)).collect();_fbb.create_vector(&w)
    });
    let algorithm = self.algorithm.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let sourcedData = self.sourcedData.as_ref().map(|x|{
      let w: Vec<_> = x.iter().map(|s| _fbb.create_string(s)).collect();_fbb.create_vector(&w)
    });
    let sourcedDataTypes = self.sourcedDataTypes;
    let transactionId = self.transactionId.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let ephemType = self.ephemType;
    let origNetwork = self.origNetwork.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    Elset_Ingest::create(_fbb, &Elset_IngestArgs{
      idElset,
      classificationMarking,
      satNo,
      epoch,
      meanMotion,
      idOnOrbit,
      uct,
      eccentricity,
      inclination,
      raan,
      argOfPerigee,
      meanAnomaly,
      revNo,
      bStar,
      agom,
      ballisticCoeff,
      meanMotionDot,
      meanMotionDDot,
      semiMajorAxis,
      period,
      apogee,
      perigee,
      origObjectId,
      idOrbitDetermination,
      line1,
      line2,
      descriptor,
      createdAt,
      createdBy,
      rawFileURI,
      origin,
      sourceDL,
      source,
      dataMode,
      tags,
      algorithm,
      sourcedData,
      sourcedDataTypes,
      transactionId,
      ephemType,
      origNetwork,
    })
  }
}
#[inline]
/// Verifies that a buffer of bytes contains a `Elset_Ingest`
/// and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_elset_ingest_unchecked`.
pub fn root_as_elset_ingest(buf: &[u8]) -> Result<Elset_Ingest, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root::<Elset_Ingest>(buf)
}
#[inline]
/// Verifies that a buffer of bytes contains a size prefixed
/// `Elset_Ingest` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `size_prefixed_root_as_elset_ingest_unchecked`.
pub fn size_prefixed_root_as_elset_ingest(buf: &[u8]) -> Result<Elset_Ingest, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root::<Elset_Ingest>(buf)
}
#[inline]
/// Verifies, with the given options, that a buffer of bytes
/// contains a `Elset_Ingest` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_elset_ingest_unchecked`.
pub fn root_as_elset_ingest_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<Elset_Ingest<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root_with_opts::<Elset_Ingest<'b>>(opts, buf)
}
#[inline]
/// Verifies, with the given verifier options, that a buffer of
/// bytes contains a size prefixed `Elset_Ingest` and returns
/// it. Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_elset_ingest_unchecked`.
pub fn size_prefixed_root_as_elset_ingest_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<Elset_Ingest<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root_with_opts::<Elset_Ingest<'b>>(opts, buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a Elset_Ingest and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid `Elset_Ingest`.
pub unsafe fn root_as_elset_ingest_unchecked(buf: &[u8]) -> Elset_Ingest {
  flatbuffers::root_unchecked::<Elset_Ingest>(buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a size prefixed Elset_Ingest and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid size prefixed `Elset_Ingest`.
pub unsafe fn size_prefixed_root_as_elset_ingest_unchecked(buf: &[u8]) -> Elset_Ingest {
  flatbuffers::size_prefixed_root_unchecked::<Elset_Ingest>(buf)
}
pub const ELSET_INGEST_IDENTIFIER: &str = "ELSE";

#[inline]
pub fn elset_ingest_buffer_has_identifier(buf: &[u8]) -> bool {
  flatbuffers::buffer_has_identifier(buf, ELSET_INGEST_IDENTIFIER, false)
}

#[inline]
pub fn elset_ingest_size_prefixed_buffer_has_identifier(buf: &[u8]) -> bool {
  flatbuffers::buffer_has_identifier(buf, ELSET_INGEST_IDENTIFIER, true)
}

#[inline]
pub fn finish_elset_ingest_buffer<'a, 'b, A: flatbuffers::Allocator + 'a>(
    fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
    root: flatbuffers::WIPOffset<Elset_Ingest<'a>>) {
  fbb.finish(root, Some(ELSET_INGEST_IDENTIFIER));
}

#[inline]
pub fn finish_size_prefixed_elset_ingest_buffer<'a, 'b, A: flatbuffers::Allocator + 'a>(fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>, root: flatbuffers::WIPOffset<Elset_Ingest<'a>>) {
  fbb.finish_size_prefixed(root, Some(ELSET_INGEST_IDENTIFIER));
}
