// automatically generated by the FlatBuffers compiler, do not modify


// @generated

use core::mem;
use core::cmp::Ordering;

extern crate flatbuffers;
use self::flatbuffers::{EndianScalar, Follow};

#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
pub const ENUM_MIN_SITE_STATUS_INGEST_INST_STATUS_ENUM: i8 = 0;
#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
pub const ENUM_MAX_SITE_STATUS_INGEST_INST_STATUS_ENUM: i8 = 3;
#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
#[allow(non_camel_case_types)]
pub const ENUM_VALUES_SITE_STATUS_INGEST_INST_STATUS_ENUM: [SiteStatus_Ingest_instStatus_Enum; 4] = [
  SiteStatus_Ingest_instStatus_Enum::FMC,
  SiteStatus_Ingest_instStatus_Enum::PMC,
  SiteStatus_Ingest_instStatus_Enum::NMC,
  SiteStatus_Ingest_instStatus_Enum::UNK,
];

#[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, Default)]
#[repr(transparent)]
pub struct SiteStatus_Ingest_instStatus_Enum(pub i8);
#[allow(non_upper_case_globals)]
impl SiteStatus_Ingest_instStatus_Enum {
  /// No description available.
  pub const FMC: Self = Self(0);
  /// No description available.
  pub const PMC: Self = Self(1);
  /// No description available.
  pub const NMC: Self = Self(2);
  /// No description available.
  pub const UNK: Self = Self(3);

  pub const ENUM_MIN: i8 = 0;
  pub const ENUM_MAX: i8 = 3;
  pub const ENUM_VALUES: &'static [Self] = &[
    Self::FMC,
    Self::PMC,
    Self::NMC,
    Self::UNK,
  ];
  /// Returns the variant's name or "" if unknown.
  pub fn variant_name(self) -> Option<&'static str> {
    match self {
      Self::FMC => Some("FMC"),
      Self::PMC => Some("PMC"),
      Self::NMC => Some("NMC"),
      Self::UNK => Some("UNK"),
      _ => None,
    }
  }
}
impl core::fmt::Debug for SiteStatus_Ingest_instStatus_Enum {
  fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
    if let Some(name) = self.variant_name() {
      f.write_str(name)
    } else {
      f.write_fmt(format_args!("<UNKNOWN {:?}>", self.0))
    }
  }
}
impl<'a> flatbuffers::Follow<'a> for SiteStatus_Ingest_instStatus_Enum {
  type Inner = Self;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    let b = flatbuffers::read_scalar_at::<i8>(buf, loc);
    Self(b)
  }
}

impl flatbuffers::Push for SiteStatus_Ingest_instStatus_Enum {
    type Output = SiteStatus_Ingest_instStatus_Enum;
    #[inline]
    unsafe fn push(&self, dst: &mut [u8], _written_len: usize) {
        flatbuffers::emplace_scalar::<i8>(dst, self.0);
    }
}

impl flatbuffers::EndianScalar for SiteStatus_Ingest_instStatus_Enum {
  type Scalar = i8;
  #[inline]
  fn to_little_endian(self) -> i8 {
    self.0.to_le()
  }
  #[inline]
  #[allow(clippy::wrong_self_convention)]
  fn from_little_endian(v: i8) -> Self {
    let b = i8::from_le(v);
    Self(b)
  }
}

impl<'a> flatbuffers::Verifiable for SiteStatus_Ingest_instStatus_Enum {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    i8::run_verifier(v, pos)
  }
}

impl flatbuffers::SimpleToVerifyInSlice for SiteStatus_Ingest_instStatus_Enum {}
#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
pub const ENUM_MIN_SITE_STATUS_INGEST_FPCON_ENUM: i8 = 0;
#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
pub const ENUM_MAX_SITE_STATUS_INGEST_FPCON_ENUM: i8 = 4;
#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
#[allow(non_camel_case_types)]
pub const ENUM_VALUES_SITE_STATUS_INGEST_FPCON_ENUM: [SiteStatus_Ingest_fpcon_Enum; 5] = [
  SiteStatus_Ingest_fpcon_Enum::NORMAL,
  SiteStatus_Ingest_fpcon_Enum::ALPHA,
  SiteStatus_Ingest_fpcon_Enum::BRAVO,
  SiteStatus_Ingest_fpcon_Enum::CHARLIE,
  SiteStatus_Ingest_fpcon_Enum::DELTA,
];

#[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, Default)]
#[repr(transparent)]
pub struct SiteStatus_Ingest_fpcon_Enum(pub i8);
#[allow(non_upper_case_globals)]
impl SiteStatus_Ingest_fpcon_Enum {
  /// No description available.
  pub const NORMAL: Self = Self(0);
  /// No description available.
  pub const ALPHA: Self = Self(1);
  /// No description available.
  pub const BRAVO: Self = Self(2);
  /// No description available.
  pub const CHARLIE: Self = Self(3);
  /// No description available.
  pub const DELTA: Self = Self(4);

  pub const ENUM_MIN: i8 = 0;
  pub const ENUM_MAX: i8 = 4;
  pub const ENUM_VALUES: &'static [Self] = &[
    Self::NORMAL,
    Self::ALPHA,
    Self::BRAVO,
    Self::CHARLIE,
    Self::DELTA,
  ];
  /// Returns the variant's name or "" if unknown.
  pub fn variant_name(self) -> Option<&'static str> {
    match self {
      Self::NORMAL => Some("NORMAL"),
      Self::ALPHA => Some("ALPHA"),
      Self::BRAVO => Some("BRAVO"),
      Self::CHARLIE => Some("CHARLIE"),
      Self::DELTA => Some("DELTA"),
      _ => None,
    }
  }
}
impl core::fmt::Debug for SiteStatus_Ingest_fpcon_Enum {
  fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
    if let Some(name) = self.variant_name() {
      f.write_str(name)
    } else {
      f.write_fmt(format_args!("<UNKNOWN {:?}>", self.0))
    }
  }
}
impl<'a> flatbuffers::Follow<'a> for SiteStatus_Ingest_fpcon_Enum {
  type Inner = Self;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    let b = flatbuffers::read_scalar_at::<i8>(buf, loc);
    Self(b)
  }
}

impl flatbuffers::Push for SiteStatus_Ingest_fpcon_Enum {
    type Output = SiteStatus_Ingest_fpcon_Enum;
    #[inline]
    unsafe fn push(&self, dst: &mut [u8], _written_len: usize) {
        flatbuffers::emplace_scalar::<i8>(dst, self.0);
    }
}

impl flatbuffers::EndianScalar for SiteStatus_Ingest_fpcon_Enum {
  type Scalar = i8;
  #[inline]
  fn to_little_endian(self) -> i8 {
    self.0.to_le()
  }
  #[inline]
  #[allow(clippy::wrong_self_convention)]
  fn from_little_endian(v: i8) -> Self {
    let b = i8::from_le(v);
    Self(b)
  }
}

impl<'a> flatbuffers::Verifiable for SiteStatus_Ingest_fpcon_Enum {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    i8::run_verifier(v, pos)
  }
}

impl flatbuffers::SimpleToVerifyInSlice for SiteStatus_Ingest_fpcon_Enum {}
#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
pub const ENUM_MIN_SITE_STATUS_INGEST_HPCON_ENUM: i8 = 0;
#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
pub const ENUM_MAX_SITE_STATUS_INGEST_HPCON_ENUM: i8 = 4;
#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
#[allow(non_camel_case_types)]
pub const ENUM_VALUES_SITE_STATUS_INGEST_HPCON_ENUM: [SiteStatus_Ingest_hpcon_Enum; 5] = [
  SiteStatus_Ingest_hpcon_Enum::E0,
  SiteStatus_Ingest_hpcon_Enum::ALPHA,
  SiteStatus_Ingest_hpcon_Enum::BRAVO,
  SiteStatus_Ingest_hpcon_Enum::CHARLIE,
  SiteStatus_Ingest_hpcon_Enum::DELTA,
];

#[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, Default)]
#[repr(transparent)]
pub struct SiteStatus_Ingest_hpcon_Enum(pub i8);
#[allow(non_upper_case_globals)]
impl SiteStatus_Ingest_hpcon_Enum {
  /// No description available.
  pub const E0: Self = Self(0);
  /// No description available.
  pub const ALPHA: Self = Self(1);
  /// No description available.
  pub const BRAVO: Self = Self(2);
  /// No description available.
  pub const CHARLIE: Self = Self(3);
  /// No description available.
  pub const DELTA: Self = Self(4);

  pub const ENUM_MIN: i8 = 0;
  pub const ENUM_MAX: i8 = 4;
  pub const ENUM_VALUES: &'static [Self] = &[
    Self::E0,
    Self::ALPHA,
    Self::BRAVO,
    Self::CHARLIE,
    Self::DELTA,
  ];
  /// Returns the variant's name or "" if unknown.
  pub fn variant_name(self) -> Option<&'static str> {
    match self {
      Self::E0 => Some("E0"),
      Self::ALPHA => Some("ALPHA"),
      Self::BRAVO => Some("BRAVO"),
      Self::CHARLIE => Some("CHARLIE"),
      Self::DELTA => Some("DELTA"),
      _ => None,
    }
  }
}
impl core::fmt::Debug for SiteStatus_Ingest_hpcon_Enum {
  fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
    if let Some(name) = self.variant_name() {
      f.write_str(name)
    } else {
      f.write_fmt(format_args!("<UNKNOWN {:?}>", self.0))
    }
  }
}
impl<'a> flatbuffers::Follow<'a> for SiteStatus_Ingest_hpcon_Enum {
  type Inner = Self;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    let b = flatbuffers::read_scalar_at::<i8>(buf, loc);
    Self(b)
  }
}

impl flatbuffers::Push for SiteStatus_Ingest_hpcon_Enum {
    type Output = SiteStatus_Ingest_hpcon_Enum;
    #[inline]
    unsafe fn push(&self, dst: &mut [u8], _written_len: usize) {
        flatbuffers::emplace_scalar::<i8>(dst, self.0);
    }
}

impl flatbuffers::EndianScalar for SiteStatus_Ingest_hpcon_Enum {
  type Scalar = i8;
  #[inline]
  fn to_little_endian(self) -> i8 {
    self.0.to_le()
  }
  #[inline]
  #[allow(clippy::wrong_self_convention)]
  fn from_little_endian(v: i8) -> Self {
    let b = i8::from_le(v);
    Self(b)
  }
}

impl<'a> flatbuffers::Verifiable for SiteStatus_Ingest_hpcon_Enum {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    i8::run_verifier(v, pos)
  }
}

impl flatbuffers::SimpleToVerifyInSlice for SiteStatus_Ingest_hpcon_Enum {}
#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
pub const ENUM_MIN_SITE_STATUS_INGEST_CPCON_ENUM: i8 = 0;
#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
pub const ENUM_MAX_SITE_STATUS_INGEST_CPCON_ENUM: i8 = 4;
#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
#[allow(non_camel_case_types)]
pub const ENUM_VALUES_SITE_STATUS_INGEST_CPCON_ENUM: [SiteStatus_Ingest_cpcon_Enum; 5] = [
  SiteStatus_Ingest_cpcon_Enum::E1,
  SiteStatus_Ingest_cpcon_Enum::E2,
  SiteStatus_Ingest_cpcon_Enum::E3,
  SiteStatus_Ingest_cpcon_Enum::E4,
  SiteStatus_Ingest_cpcon_Enum::E5,
];

#[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, Default)]
#[repr(transparent)]
pub struct SiteStatus_Ingest_cpcon_Enum(pub i8);
#[allow(non_upper_case_globals)]
impl SiteStatus_Ingest_cpcon_Enum {
  /// No description available.
  pub const E1: Self = Self(0);
  /// No description available.
  pub const E2: Self = Self(1);
  /// No description available.
  pub const E3: Self = Self(2);
  /// No description available.
  pub const E4: Self = Self(3);
  /// No description available.
  pub const E5: Self = Self(4);

  pub const ENUM_MIN: i8 = 0;
  pub const ENUM_MAX: i8 = 4;
  pub const ENUM_VALUES: &'static [Self] = &[
    Self::E1,
    Self::E2,
    Self::E3,
    Self::E4,
    Self::E5,
  ];
  /// Returns the variant's name or "" if unknown.
  pub fn variant_name(self) -> Option<&'static str> {
    match self {
      Self::E1 => Some("E1"),
      Self::E2 => Some("E2"),
      Self::E3 => Some("E3"),
      Self::E4 => Some("E4"),
      Self::E5 => Some("E5"),
      _ => None,
    }
  }
}
impl core::fmt::Debug for SiteStatus_Ingest_cpcon_Enum {
  fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
    if let Some(name) = self.variant_name() {
      f.write_str(name)
    } else {
      f.write_fmt(format_args!("<UNKNOWN {:?}>", self.0))
    }
  }
}
impl<'a> flatbuffers::Follow<'a> for SiteStatus_Ingest_cpcon_Enum {
  type Inner = Self;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    let b = flatbuffers::read_scalar_at::<i8>(buf, loc);
    Self(b)
  }
}

impl flatbuffers::Push for SiteStatus_Ingest_cpcon_Enum {
    type Output = SiteStatus_Ingest_cpcon_Enum;
    #[inline]
    unsafe fn push(&self, dst: &mut [u8], _written_len: usize) {
        flatbuffers::emplace_scalar::<i8>(dst, self.0);
    }
}

impl flatbuffers::EndianScalar for SiteStatus_Ingest_cpcon_Enum {
  type Scalar = i8;
  #[inline]
  fn to_little_endian(self) -> i8 {
    self.0.to_le()
  }
  #[inline]
  #[allow(clippy::wrong_self_convention)]
  fn from_little_endian(v: i8) -> Self {
    let b = i8::from_le(v);
    Self(b)
  }
}

impl<'a> flatbuffers::Verifiable for SiteStatus_Ingest_cpcon_Enum {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    i8::run_verifier(v, pos)
  }
}

impl flatbuffers::SimpleToVerifyInSlice for SiteStatus_Ingest_cpcon_Enum {}
#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
pub const ENUM_MIN_SITE_STATUS_INGEST_CAT_ENUM: i8 = 0;
#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
pub const ENUM_MAX_SITE_STATUS_INGEST_CAT_ENUM: i8 = 2;
#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
#[allow(non_camel_case_types)]
pub const ENUM_VALUES_SITE_STATUS_INGEST_CAT_ENUM: [SiteStatus_Ingest_cat_Enum; 3] = [
  SiteStatus_Ingest_cat_Enum::COLD,
  SiteStatus_Ingest_cat_Enum::WARM,
  SiteStatus_Ingest_cat_Enum::HOT,
];

#[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, Default)]
#[repr(transparent)]
pub struct SiteStatus_Ingest_cat_Enum(pub i8);
#[allow(non_upper_case_globals)]
impl SiteStatus_Ingest_cat_Enum {
  /// No description available.
  pub const COLD: Self = Self(0);
  /// No description available.
  pub const WARM: Self = Self(1);
  /// No description available.
  pub const HOT: Self = Self(2);

  pub const ENUM_MIN: i8 = 0;
  pub const ENUM_MAX: i8 = 2;
  pub const ENUM_VALUES: &'static [Self] = &[
    Self::COLD,
    Self::WARM,
    Self::HOT,
  ];
  /// Returns the variant's name or "" if unknown.
  pub fn variant_name(self) -> Option<&'static str> {
    match self {
      Self::COLD => Some("COLD"),
      Self::WARM => Some("WARM"),
      Self::HOT => Some("HOT"),
      _ => None,
    }
  }
}
impl core::fmt::Debug for SiteStatus_Ingest_cat_Enum {
  fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
    if let Some(name) = self.variant_name() {
      f.write_str(name)
    } else {
      f.write_fmt(format_args!("<UNKNOWN {:?}>", self.0))
    }
  }
}
impl<'a> flatbuffers::Follow<'a> for SiteStatus_Ingest_cat_Enum {
  type Inner = Self;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    let b = flatbuffers::read_scalar_at::<i8>(buf, loc);
    Self(b)
  }
}

impl flatbuffers::Push for SiteStatus_Ingest_cat_Enum {
    type Output = SiteStatus_Ingest_cat_Enum;
    #[inline]
    unsafe fn push(&self, dst: &mut [u8], _written_len: usize) {
        flatbuffers::emplace_scalar::<i8>(dst, self.0);
    }
}

impl flatbuffers::EndianScalar for SiteStatus_Ingest_cat_Enum {
  type Scalar = i8;
  #[inline]
  fn to_little_endian(self) -> i8 {
    self.0.to_le()
  }
  #[inline]
  #[allow(clippy::wrong_self_convention)]
  fn from_little_endian(v: i8) -> Self {
    let b = i8::from_le(v);
    Self(b)
  }
}

impl<'a> flatbuffers::Verifiable for SiteStatus_Ingest_cat_Enum {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    i8::run_verifier(v, pos)
  }
}

impl flatbuffers::SimpleToVerifyInSlice for SiteStatus_Ingest_cat_Enum {}
#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
pub const ENUM_MIN_SITE_STATUS_INGEST_EOC_ENUM: i8 = 0;
#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
pub const ENUM_MAX_SITE_STATUS_INGEST_EOC_ENUM: i8 = 2;
#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
#[allow(non_camel_case_types)]
pub const ENUM_VALUES_SITE_STATUS_INGEST_EOC_ENUM: [SiteStatus_Ingest_eoc_Enum; 3] = [
  SiteStatus_Ingest_eoc_Enum::COLD,
  SiteStatus_Ingest_eoc_Enum::WARM,
  SiteStatus_Ingest_eoc_Enum::HOT,
];

#[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, Default)]
#[repr(transparent)]
pub struct SiteStatus_Ingest_eoc_Enum(pub i8);
#[allow(non_upper_case_globals)]
impl SiteStatus_Ingest_eoc_Enum {
  /// No description available.
  pub const COLD: Self = Self(0);
  /// No description available.
  pub const WARM: Self = Self(1);
  /// No description available.
  pub const HOT: Self = Self(2);

  pub const ENUM_MIN: i8 = 0;
  pub const ENUM_MAX: i8 = 2;
  pub const ENUM_VALUES: &'static [Self] = &[
    Self::COLD,
    Self::WARM,
    Self::HOT,
  ];
  /// Returns the variant's name or "" if unknown.
  pub fn variant_name(self) -> Option<&'static str> {
    match self {
      Self::COLD => Some("COLD"),
      Self::WARM => Some("WARM"),
      Self::HOT => Some("HOT"),
      _ => None,
    }
  }
}
impl core::fmt::Debug for SiteStatus_Ingest_eoc_Enum {
  fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
    if let Some(name) = self.variant_name() {
      f.write_str(name)
    } else {
      f.write_fmt(format_args!("<UNKNOWN {:?}>", self.0))
    }
  }
}
impl<'a> flatbuffers::Follow<'a> for SiteStatus_Ingest_eoc_Enum {
  type Inner = Self;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    let b = flatbuffers::read_scalar_at::<i8>(buf, loc);
    Self(b)
  }
}

impl flatbuffers::Push for SiteStatus_Ingest_eoc_Enum {
    type Output = SiteStatus_Ingest_eoc_Enum;
    #[inline]
    unsafe fn push(&self, dst: &mut [u8], _written_len: usize) {
        flatbuffers::emplace_scalar::<i8>(dst, self.0);
    }
}

impl flatbuffers::EndianScalar for SiteStatus_Ingest_eoc_Enum {
  type Scalar = i8;
  #[inline]
  fn to_little_endian(self) -> i8 {
    self.0.to_le()
  }
  #[inline]
  #[allow(clippy::wrong_self_convention)]
  fn from_little_endian(v: i8) -> Self {
    let b = i8::from_le(v);
    Self(b)
  }
}

impl<'a> flatbuffers::Verifiable for SiteStatus_Ingest_eoc_Enum {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    i8::run_verifier(v, pos)
  }
}

impl flatbuffers::SimpleToVerifyInSlice for SiteStatus_Ingest_eoc_Enum {}
#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
pub const ENUM_MIN_SITE_STATUS_INGEST_DATA_MODE_ENUM: i8 = 0;
#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
pub const ENUM_MAX_SITE_STATUS_INGEST_DATA_MODE_ENUM: i8 = 3;
#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
#[allow(non_camel_case_types)]
pub const ENUM_VALUES_SITE_STATUS_INGEST_DATA_MODE_ENUM: [SiteStatus_Ingest_dataMode_Enum; 4] = [
  SiteStatus_Ingest_dataMode_Enum::REAL,
  SiteStatus_Ingest_dataMode_Enum::TEST,
  SiteStatus_Ingest_dataMode_Enum::SIMULATED,
  SiteStatus_Ingest_dataMode_Enum::EXERCISE,
];

#[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, Default)]
#[repr(transparent)]
pub struct SiteStatus_Ingest_dataMode_Enum(pub i8);
#[allow(non_upper_case_globals)]
impl SiteStatus_Ingest_dataMode_Enum {
  /// Data collected or produced that pertains to real-world objects, events, and analysis.
  pub const REAL: Self = Self(0);
  /// Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  pub const TEST: Self = Self(1);
  /// Synthetic data generated by a model to mimic real-world datasets.
  pub const SIMULATED: Self = Self(2);
  /// Data pertaining to a government or military exercise. The data may include both real and simulated data.
  pub const EXERCISE: Self = Self(3);

  pub const ENUM_MIN: i8 = 0;
  pub const ENUM_MAX: i8 = 3;
  pub const ENUM_VALUES: &'static [Self] = &[
    Self::REAL,
    Self::TEST,
    Self::SIMULATED,
    Self::EXERCISE,
  ];
  /// Returns the variant's name or "" if unknown.
  pub fn variant_name(self) -> Option<&'static str> {
    match self {
      Self::REAL => Some("REAL"),
      Self::TEST => Some("TEST"),
      Self::SIMULATED => Some("SIMULATED"),
      Self::EXERCISE => Some("EXERCISE"),
      _ => None,
    }
  }
}
impl core::fmt::Debug for SiteStatus_Ingest_dataMode_Enum {
  fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
    if let Some(name) = self.variant_name() {
      f.write_str(name)
    } else {
      f.write_fmt(format_args!("<UNKNOWN {:?}>", self.0))
    }
  }
}
impl<'a> flatbuffers::Follow<'a> for SiteStatus_Ingest_dataMode_Enum {
  type Inner = Self;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    let b = flatbuffers::read_scalar_at::<i8>(buf, loc);
    Self(b)
  }
}

impl flatbuffers::Push for SiteStatus_Ingest_dataMode_Enum {
    type Output = SiteStatus_Ingest_dataMode_Enum;
    #[inline]
    unsafe fn push(&self, dst: &mut [u8], _written_len: usize) {
        flatbuffers::emplace_scalar::<i8>(dst, self.0);
    }
}

impl flatbuffers::EndianScalar for SiteStatus_Ingest_dataMode_Enum {
  type Scalar = i8;
  #[inline]
  fn to_little_endian(self) -> i8 {
    self.0.to_le()
  }
  #[inline]
  #[allow(clippy::wrong_self_convention)]
  fn from_little_endian(v: i8) -> Self {
    let b = i8::from_le(v);
    Self(b)
  }
}

impl<'a> flatbuffers::Verifiable for SiteStatus_Ingest_dataMode_Enum {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    i8::run_verifier(v, pos)
  }
}

impl flatbuffers::SimpleToVerifyInSlice for SiteStatus_Ingest_dataMode_Enum {}
pub enum SiteStatus_IngestOffset {}
#[derive(Copy, Clone, PartialEq)]

/// /// No description available.
pub struct SiteStatus_Ingest<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for SiteStatus_Ingest<'a> {
  type Inner = SiteStatus_Ingest<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> SiteStatus_Ingest<'a> {
  pub const VT_ID: flatbuffers::VOffsetT = 4;
  pub const VT_CLASSIFICATIONMARKING: flatbuffers::VOffsetT = 6;
  pub const VT_IDSITE: flatbuffers::VOffsetT = 8;
  pub const VT_SITETYPE: flatbuffers::VOffsetT = 10;
  pub const VT_MOBILEALTID: flatbuffers::VOffsetT = 12;
  pub const VT_POIID: flatbuffers::VOffsetT = 14;
  pub const VT_TRACKID: flatbuffers::VOffsetT = 16;
  pub const VT_TRACKREFL16: flatbuffers::VOffsetT = 18;
  pub const VT_OPSCAPABILITY: flatbuffers::VOffsetT = 20;
  pub const VT_INSTSTATUS: flatbuffers::VOffsetT = 22;
  pub const VT_FPCON: flatbuffers::VOffsetT = 24;
  pub const VT_HPCON: flatbuffers::VOffsetT = 26;
  pub const VT_CPCON: flatbuffers::VOffsetT = 28;
  pub const VT_REPORTTIME: flatbuffers::VOffsetT = 30;
  pub const VT_TIMEFUNCTION: flatbuffers::VOffsetT = 32;
  pub const VT_WEATHERMESSAGE: flatbuffers::VOffsetT = 34;
  pub const VT_PES: flatbuffers::VOffsetT = 36;
  pub const VT_HOTINVENTORY: flatbuffers::VOffsetT = 38;
  pub const VT_COLDINVENTORY: flatbuffers::VOffsetT = 40;
  pub const VT_SAMMODE: flatbuffers::VOffsetT = 42;
  pub const VT_RADIATEMODE: flatbuffers::VOffsetT = 44;
  pub const VT_OPSIMPAIRMENT: flatbuffers::VOffsetT = 46;
  pub const VT_COMMIMPAIRMENT: flatbuffers::VOffsetT = 48;
  pub const VT_CAT: flatbuffers::VOffsetT = 50;
  pub const VT_EOC: flatbuffers::VOffsetT = 52;
  pub const VT_LINK: flatbuffers::VOffsetT = 54;
  pub const VT_LINKSTATUS: flatbuffers::VOffsetT = 56;
  pub const VT_RADARSYSTEM: flatbuffers::VOffsetT = 58;
  pub const VT_RADARSTATUS: flatbuffers::VOffsetT = 60;
  pub const VT_MISSILE: flatbuffers::VOffsetT = 62;
  pub const VT_MISSILEINVENTORY: flatbuffers::VOffsetT = 64;
  pub const VT_CREATEDAT: flatbuffers::VOffsetT = 66;
  pub const VT_CREATEDBY: flatbuffers::VOffsetT = 68;
  pub const VT_SOURCE: flatbuffers::VOffsetT = 70;
  pub const VT_ORIGIN: flatbuffers::VOffsetT = 72;
  pub const VT_ORIGNETWORK: flatbuffers::VOffsetT = 74;
  pub const VT_DATAMODE: flatbuffers::VOffsetT = 76;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    SiteStatus_Ingest { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args SiteStatus_IngestArgs<'args>
  ) -> flatbuffers::WIPOffset<SiteStatus_Ingest<'bldr>> {
    let mut builder = SiteStatus_IngestBuilder::new(_fbb);
    if let Some(x) = args.origNetwork { builder.add_origNetwork(x); }
    if let Some(x) = args.origin { builder.add_origin(x); }
    if let Some(x) = args.source { builder.add_source(x); }
    if let Some(x) = args.createdBy { builder.add_createdBy(x); }
    if let Some(x) = args.createdAt { builder.add_createdAt(x); }
    if let Some(x) = args.missileInventory { builder.add_missileInventory(x); }
    if let Some(x) = args.missile { builder.add_missile(x); }
    if let Some(x) = args.radarStatus { builder.add_radarStatus(x); }
    if let Some(x) = args.radarSystem { builder.add_radarSystem(x); }
    if let Some(x) = args.linkStatus { builder.add_linkStatus(x); }
    if let Some(x) = args.link { builder.add_link(x); }
    if let Some(x) = args.commImpairment { builder.add_commImpairment(x); }
    if let Some(x) = args.opsImpairment { builder.add_opsImpairment(x); }
    if let Some(x) = args.radiateMode { builder.add_radiateMode(x); }
    if let Some(x) = args.samMode { builder.add_samMode(x); }
    builder.add_coldInventory(args.coldInventory);
    builder.add_hotInventory(args.hotInventory);
    if let Some(x) = args.weatherMessage { builder.add_weatherMessage(x); }
    if let Some(x) = args.timeFunction { builder.add_timeFunction(x); }
    if let Some(x) = args.reportTime { builder.add_reportTime(x); }
    if let Some(x) = args.opsCapability { builder.add_opsCapability(x); }
    if let Some(x) = args.trackRefL16 { builder.add_trackRefL16(x); }
    if let Some(x) = args.trackId { builder.add_trackId(x); }
    if let Some(x) = args.poiid { builder.add_poiid(x); }
    if let Some(x) = args.mobileAltId { builder.add_mobileAltId(x); }
    if let Some(x) = args.siteType { builder.add_siteType(x); }
    if let Some(x) = args.idSite { builder.add_idSite(x); }
    if let Some(x) = args.classificationMarking { builder.add_classificationMarking(x); }
    if let Some(x) = args.id { builder.add_id(x); }
    builder.add_dataMode(args.dataMode);
    builder.add_eoc(args.eoc);
    builder.add_cat(args.cat);
    builder.add_pes(args.pes);
    builder.add_cpcon(args.cpcon);
    builder.add_hpcon(args.hpcon);
    builder.add_fpcon(args.fpcon);
    builder.add_instStatus(args.instStatus);
    builder.finish()
  }

  pub fn unpack(&self) -> SiteStatus_IngestT {
    let id = self.id().map(|x| {
      x.to_string()
    });
    let classificationMarking = self.classificationMarking().map(|x| {
      x.to_string()
    });
    let idSite = self.idSite().map(|x| {
      x.to_string()
    });
    let siteType = self.siteType().map(|x| {
      x.to_string()
    });
    let mobileAltId = self.mobileAltId().map(|x| {
      x.to_string()
    });
    let poiid = self.poiid().map(|x| {
      x.to_string()
    });
    let trackId = self.trackId().map(|x| {
      x.to_string()
    });
    let trackRefL16 = self.trackRefL16().map(|x| {
      x.to_string()
    });
    let opsCapability = self.opsCapability().map(|x| {
      x.to_string()
    });
    let instStatus = self.instStatus();
    let fpcon = self.fpcon();
    let hpcon = self.hpcon();
    let cpcon = self.cpcon();
    let reportTime = self.reportTime().map(|x| {
      x.to_string()
    });
    let timeFunction = self.timeFunction().map(|x| {
      x.to_string()
    });
    let weatherMessage = self.weatherMessage().map(|x| {
      x.to_string()
    });
    let pes = self.pes();
    let hotInventory = self.hotInventory();
    let coldInventory = self.coldInventory();
    let samMode = self.samMode().map(|x| {
      x.to_string()
    });
    let radiateMode = self.radiateMode().map(|x| {
      x.to_string()
    });
    let opsImpairment = self.opsImpairment().map(|x| {
      x.to_string()
    });
    let commImpairment = self.commImpairment().map(|x| {
      x.to_string()
    });
    let cat = self.cat();
    let eoc = self.eoc();
    let link = self.link().map(|x| {
      x.iter().map(|s| s.to_string()).collect()
    });
    let linkStatus = self.linkStatus().map(|x| {
      x.iter().map(|s| s.to_string()).collect()
    });
    let radarSystem = self.radarSystem().map(|x| {
      x.iter().map(|s| s.to_string()).collect()
    });
    let radarStatus = self.radarStatus().map(|x| {
      x.iter().map(|s| s.to_string()).collect()
    });
    let missile = self.missile().map(|x| {
      x.iter().map(|s| s.to_string()).collect()
    });
    let missileInventory = self.missileInventory().map(|x| {
      x.iter().map(|s| s.to_string()).collect()
    });
    let createdAt = self.createdAt().map(|x| {
      x.to_string()
    });
    let createdBy = self.createdBy().map(|x| {
      x.to_string()
    });
    let source = self.source().map(|x| {
      x.to_string()
    });
    let origin = self.origin().map(|x| {
      x.to_string()
    });
    let origNetwork = self.origNetwork().map(|x| {
      x.to_string()
    });
    let dataMode = self.dataMode();
    SiteStatus_IngestT {
      id,
      classificationMarking,
      idSite,
      siteType,
      mobileAltId,
      poiid,
      trackId,
      trackRefL16,
      opsCapability,
      instStatus,
      fpcon,
      hpcon,
      cpcon,
      reportTime,
      timeFunction,
      weatherMessage,
      pes,
      hotInventory,
      coldInventory,
      samMode,
      radiateMode,
      opsImpairment,
      commImpairment,
      cat,
      eoc,
      link,
      linkStatus,
      radarSystem,
      radarStatus,
      missile,
      missileInventory,
      createdAt,
      createdBy,
      source,
      origin,
      origNetwork,
      dataMode,
    }
  }

  /// Unique identifier of the record, auto-generated by the system.
  /// Example: /// Example: SITESTATUS-ID
  /// Constraints: Minimum length = 1, Maximum length = 36
  #[inline]
  pub fn id(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(SiteStatus_Ingest::VT_ID, None)}
  }
  /// Classification marking of the data in IC/CAPCO Portion-marked format.
  /// Example: /// Example: U
  /// Constraints: Minimum length = 1, Maximum length = 128
  #[inline]
  pub fn classificationMarking(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(SiteStatus_Ingest::VT_CLASSIFICATIONMARKING, None)}
  }
  /// The ID of the site, if this status is associated with a fixed site or platform.
  /// Example: /// Example: 41e3e554-9790-40b9-bd7b-f30d864dcad8
  /// Constraints: Minimum length = 1, Maximum length = 36
  #[inline]
  pub fn idSite(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(SiteStatus_Ingest::VT_IDSITE, None)}
  }
  /// Optional site type or further detail of type.  Intended for, but not limited to, Link-16 site type specifications (e.g. ADOC, GACC, SOC, TACC, etc.).
  /// Example: /// Example: ADOC
  /// Constraints: Minimum length = 0, Maximum length = 36
  #[inline]
  pub fn siteType(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(SiteStatus_Ingest::VT_SITETYPE, None)}
  }
  /// Alternate Identifier for a mobile or transportable platform provided by source.
  /// Example: /// Example: MOBILEALT-ID
  /// Constraints: Minimum length = 0, Maximum length = 36
  #[inline]
  pub fn mobileAltId(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(SiteStatus_Ingest::VT_MOBILEALTID, None)}
  }
  /// The POI (point of interest) ID related to this platform, if available.
  /// Example: /// Example: d4a91864-6140-4b8d-67cd-45421c75f696
  /// Constraints: Minimum length = 0, Maximum length = 36
  #[inline]
  pub fn poiid(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(SiteStatus_Ingest::VT_POIID, None)}
  }
  /// The track ID related to this platform (if mobile or transportable), if available.
  /// Example: /// Example: PCM4923-1656174732-4-1-257
  /// Constraints: Minimum length = 0, Maximum length = 36
  #[inline]
  pub fn trackId(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(SiteStatus_Ingest::VT_TRACKID, None)}
  }
  /// Link-16 specific reference track number.
  /// Example: /// Example: TrkNm
  /// Constraints: Minimum length = 0, Maximum length = 5
  #[inline]
  pub fn trackRefL16(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(SiteStatus_Ingest::VT_TRACKREFL16, None)}
  }
  /// The operational status of the platform (e.g. Fully Operational, Partially Operational, Not Operational, etc.).
  /// Example: /// Example: Fully Operational
  /// Constraints: Minimum length = 0, Maximum length = 24
  #[inline]
  pub fn opsCapability(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(SiteStatus_Ingest::VT_OPSCAPABILITY, None)}
  }
  /// The status of the installation.
  /// FMC - Fully Mission Capable
  ///  PMC - Partially Mission Capable
  /// NMC - Non Mission Capable
  /// UNK - Unknown.
  /// Example: /// Example: PMC
  /// Constraints: Minimum length = 0, Maximum length = 3
  #[inline]
  pub fn instStatus(&self) -> SiteStatus_Ingest_instStatus_Enum {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<SiteStatus_Ingest_instStatus_Enum>(SiteStatus_Ingest::VT_INSTSTATUS, Some(SiteStatus_Ingest_instStatus_Enum::FMC)).unwrap()}
  }
  /// Force Protection Condition (FPCON).
  /// NORMAL - Applies when a general global threat of possible terrorist activity exists and warrants a routine security posture.
  /// ALPHA - Applies when an increased general threat of possible terrorist activity against personnel or facilities. Nature and extent of threat are unpredictable.
  /// BRAVO - Applies when an increased or predictable threat of terrorist activity exists.
  /// CHARLIE - Applies when an incident occurs or intelligence is received indicating some form of terrorist action against personnel and facilities is imminent.
  /// DELTA - Applies in the immediate area where an attack has occurred or when intelligence is received indicating terrorist action against a location is imminent.
  /// Example: /// Example: BRAVO
  /// Constraints: Minimum length = 0, Maximum length = 7
  #[inline]
  pub fn fpcon(&self) -> SiteStatus_Ingest_fpcon_Enum {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<SiteStatus_Ingest_fpcon_Enum>(SiteStatus_Ingest::VT_FPCON, Some(SiteStatus_Ingest_fpcon_Enum::NORMAL)).unwrap()}
  }
  /// Health Protection Condition (HPCON).
  /// 0 - Routine, no community transmission.
  /// ALPHA - Limited, community transmission beginning.
  /// BRAVO - Moderate, increased community transmission.
  /// CHARLIE - Substantial, sustained community transmission.
  /// DELTA - Severe, widespread community transmission.
  /// Example: /// Example: CHARLIE
  /// Constraints: Minimum length = 0, Maximum length = 7
  #[inline]
  pub fn hpcon(&self) -> SiteStatus_Ingest_hpcon_Enum {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<SiteStatus_Ingest_hpcon_Enum>(SiteStatus_Ingest::VT_HPCON, Some(SiteStatus_Ingest_hpcon_Enum::E0)).unwrap()}
  }
  /// Cyberspace Protection Condition (CPCON).
  /// 1 - VERY HIGH - Critical functions.
  /// 2 - HIGH - Critical and essential functions.
  /// 3 - MEDIUM - Critical, essential, and support functions.
  /// 4 - LOW - All functions.
  /// 5 - VERY LOW - All functions.
  /// Example: /// Example: 4
  /// Constraints: Minimum length = 0, Maximum length = 1
  #[inline]
  pub fn cpcon(&self) -> SiteStatus_Ingest_cpcon_Enum {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<SiteStatus_Ingest_cpcon_Enum>(SiteStatus_Ingest::VT_CPCON, Some(SiteStatus_Ingest_cpcon_Enum::E1)).unwrap()}
  }
  /// Time of report, in ISO8601 UTC format.
  /// Example: /// Example: 2021-01-01T01:01:01.123Z
  /// Constraints: No constraints specified.
  #[inline]
  pub fn reportTime(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(SiteStatus_Ingest::VT_REPORTTIME, None)}
  }
  /// Description of the time function associated with the reportTime (e.g. Activation, Deactivation, Arrival, Departure, etc.), if applicable.
  /// Example: /// Example: Activation
  /// Constraints: Minimum length = 0, Maximum length = 24
  #[inline]
  pub fn timeFunction(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(SiteStatus_Ingest::VT_TIMEFUNCTION, None)}
  }
  /// Description of the current weather conditions over a site.
  /// Example: /// Example: Heavy rain
  /// Constraints: Minimum length = 0, Maximum length = 512
  #[inline]
  pub fn weatherMessage(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(SiteStatus_Ingest::VT_WEATHERMESSAGE, None)}
  }
  /// Position Engagement Status flag, Indicating whether this platform is initiating multiple simultaneous engagements.  A value of 1/True indicates the platform is initiating multiple simultaneous engagements.
  /// Example: /// Example: True
  /// Constraints: No constraints specified.
  #[inline]
  pub fn pes(&self) -> bool {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<bool>(SiteStatus_Ingest::VT_PES, Some(false)).unwrap()}
  }
  /// Estimated number of hot missiles of all types remaining in weapons system inventory.
  /// Example: /// Example: 1
  /// Constraints: No constraints specified.
  #[inline]
  pub fn hotInventory(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(SiteStatus_Ingest::VT_HOTINVENTORY, Some(0)).unwrap()}
  }
  /// Estimated number of cold missiles of all types remaining in weapons system inventory.
  /// Example: /// Example: 1
  /// Constraints: No constraints specified.
  #[inline]
  pub fn coldInventory(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(SiteStatus_Ingest::VT_COLDINVENTORY, Some(0)).unwrap()}
  }
  /// The state of a SAM unit (e.g. Initialization, Standby, Reorientation, etc.).
  /// Example: /// Example: Initialization
  /// Constraints: Minimum length = 0, Maximum length = 48
  #[inline]
  pub fn samMode(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(SiteStatus_Ingest::VT_SAMMODE, None)}
  }
  /// SAM sensor radar surveillance mode (Active, Passive, Off).
  /// Example: /// Example: Active
  /// Constraints: Minimum length = 0, Maximum length = 24
  #[inline]
  pub fn radiateMode(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(SiteStatus_Ingest::VT_RADIATEMODE, None)}
  }
  /// The primary component degrading the operational capability of the platform or system.
  /// Example: /// Example: opsImpairment
  /// Constraints: Minimum length = 0, Maximum length = 48
  #[inline]
  pub fn opsImpairment(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(SiteStatus_Ingest::VT_OPSIMPAIRMENT, None)}
  }
  /// The communications component causing the platform or system to be less than fully operational.
  /// Example: /// Example: commImpairment
  /// Constraints: Minimum length = 0, Maximum length = 24
  #[inline]
  pub fn commImpairment(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(SiteStatus_Ingest::VT_COMMIMPAIRMENT, None)}
  }
  /// Crisis Action Team (CAT).
  /// COLD - Not in use.
  /// WARM - Facility prepped/possible skeleton crew.
  /// HOT - Fully active.
  /// Example: /// Example: COLD
  /// Constraints: Minimum length = 0, Maximum length = 4
  #[inline]
  pub fn cat(&self) -> SiteStatus_Ingest_cat_Enum {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<SiteStatus_Ingest_cat_Enum>(SiteStatus_Ingest::VT_CAT, Some(SiteStatus_Ingest_cat_Enum::COLD)).unwrap()}
  }
  /// Emergency Operations Center (EOC) status.
  /// COLD - Not in use.
  /// WARM - Facility prepped/possible skeleton crew.
  /// HOT - Fully active.
  /// Example: /// Example: WARM
  /// Constraints: Minimum length = 0, Maximum length = 4
  #[inline]
  pub fn eoc(&self) -> SiteStatus_Ingest_eoc_Enum {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<SiteStatus_Ingest_eoc_Enum>(SiteStatus_Ingest::VT_EOC, Some(SiteStatus_Ingest_eoc_Enum::COLD)).unwrap()}
  }
  /// Array of Link item(s) for which status is available and reported (ATDL, IJMS,  LINK-1, LINK-11, LINK-11B, LINK-16).  This array must be the same length as the linkStatus array.
  /// Example: /// Example: ['ATDL', 'IJMS', 'LINK-1']
  /// Constraints: No constraints specified.
  #[inline]
  pub fn link(&self) -> Option<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>(SiteStatus_Ingest::VT_LINK, None)}
  }
  /// Array of the status (AVAILABLE, DEGRADED, NOT AVAILABLE, etc.) for each links in the link array. This array must be the same length as the link array, and the status must correspond to the appropriate position index in the link array.
  /// Example: /// Example: ['AVAILABLE', 'DEGRADED', 'NOT AVAILABLE']
  /// Constraints: No constraints specified.
  #[inline]
  pub fn linkStatus(&self) -> Option<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>(SiteStatus_Ingest::VT_LINKSTATUS, None)}
  }
  /// Array of radar system(s) for which status is available and reported (ACQUISITION, IFFSIF, ILLUMINATING, MODE-4, PRIMARY SURVEILLANCE, SECONDARY SURVEILLANCE, TERTIARY SURVEILLANCE). This array must be the same length as the radarStatus array.
  /// Example: /// Example: ['ILLUMINATING', 'MODE-4', 'MODE-3']
  /// Constraints: No constraints specified.
  #[inline]
  pub fn radarSystem(&self) -> Option<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>(SiteStatus_Ingest::VT_RADARSYSTEM, None)}
  }
  /// Array of the status (NON-OPERATIONAL, OPERATIONAL, OFF) for each radar system in the radarSystem array. This array must be the same length as the radarSystem array, and the status must correspond to the appropriate position index in the radarSystem array.
  /// Example: /// Example: ['OPERATIONAL', 'OFF', 'NON-OPERATIONAL']
  /// Constraints: No constraints specified.
  #[inline]
  pub fn radarStatus(&self) -> Option<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>(SiteStatus_Ingest::VT_RADARSTATUS, None)}
  }
  /// Array of specific missile types for which an estimated inventory count is available (e.g. GMD TYPE A, HARPOON, TOMAHAWK, etc.).  This array must be the same length as the missileInventory array.
  /// Example: /// Example: ['GMD', 'HARPOON', 'JAVELIN']
  /// Constraints: No constraints specified.
  #[inline]
  pub fn missile(&self) -> Option<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>(SiteStatus_Ingest::VT_MISSILE, None)}
  }
  /// Array of the quantity of each of the missile items.  This array must be the same length as the missile array, and the values must correspond to appropriate position index in the missile array.
  /// Example: /// Example: [5, 10, 100]
  /// Constraints: No constraints specified.
  #[inline]
  pub fn missileInventory(&self) -> Option<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>(SiteStatus_Ingest::VT_MISSILEINVENTORY, None)}
  }
  /// Time the row was created in the database, auto-populated by the system.
  /// Example: /// Example: 2018-01-01T16:00:00.123Z
  /// Constraints: No constraints specified.
  #[inline]
  pub fn createdAt(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(SiteStatus_Ingest::VT_CREATEDAT, None)}
  }
  /// Application user who created the row in the database, auto-populated by the system.
  /// Example: /// Example: some.user
  /// Constraints: Minimum length = 1, Maximum length = 64
  #[inline]
  pub fn createdBy(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(SiteStatus_Ingest::VT_CREATEDBY, None)}
  }
  /// Source of the data.
  /// Example: /// Example: Bluestaq
  /// Constraints: Minimum length = 1, Maximum length = 64
  #[inline]
  pub fn source(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(SiteStatus_Ingest::VT_SOURCE, None)}
  }
  /// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
  /// Example: /// Example: THIRD_PARTY_DATASOURCE
  /// Constraints: Minimum length = 0, Maximum length = 64
  #[inline]
  pub fn origin(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(SiteStatus_Ingest::VT_ORIGIN, None)}
  }
  /// The originating source network on which this record was created, auto-populated by the system.
  /// Example: /// Example: ORIG
  /// Constraints: Minimum length = 1, Maximum length = 32
  #[inline]
  pub fn origNetwork(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(SiteStatus_Ingest::VT_ORIGNETWORK, None)}
  }
  /// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
  /// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
  /// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
  /// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
  /// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  /// Example: /// Example: TEST
  /// Constraints: Minimum length = 1, Maximum length = 32
  #[inline]
  pub fn dataMode(&self) -> SiteStatus_Ingest_dataMode_Enum {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<SiteStatus_Ingest_dataMode_Enum>(SiteStatus_Ingest::VT_DATAMODE, Some(SiteStatus_Ingest_dataMode_Enum::REAL)).unwrap()}
  }
}

impl flatbuffers::Verifiable for SiteStatus_Ingest<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("id", Self::VT_ID, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("classificationMarking", Self::VT_CLASSIFICATIONMARKING, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("idSite", Self::VT_IDSITE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("siteType", Self::VT_SITETYPE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("mobileAltId", Self::VT_MOBILEALTID, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("poiid", Self::VT_POIID, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("trackId", Self::VT_TRACKID, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("trackRefL16", Self::VT_TRACKREFL16, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("opsCapability", Self::VT_OPSCAPABILITY, false)?
     .visit_field::<SiteStatus_Ingest_instStatus_Enum>("instStatus", Self::VT_INSTSTATUS, false)?
     .visit_field::<SiteStatus_Ingest_fpcon_Enum>("fpcon", Self::VT_FPCON, false)?
     .visit_field::<SiteStatus_Ingest_hpcon_Enum>("hpcon", Self::VT_HPCON, false)?
     .visit_field::<SiteStatus_Ingest_cpcon_Enum>("cpcon", Self::VT_CPCON, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("reportTime", Self::VT_REPORTTIME, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("timeFunction", Self::VT_TIMEFUNCTION, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("weatherMessage", Self::VT_WEATHERMESSAGE, false)?
     .visit_field::<bool>("pes", Self::VT_PES, false)?
     .visit_field::<i32>("hotInventory", Self::VT_HOTINVENTORY, false)?
     .visit_field::<i32>("coldInventory", Self::VT_COLDINVENTORY, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("samMode", Self::VT_SAMMODE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("radiateMode", Self::VT_RADIATEMODE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("opsImpairment", Self::VT_OPSIMPAIRMENT, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("commImpairment", Self::VT_COMMIMPAIRMENT, false)?
     .visit_field::<SiteStatus_Ingest_cat_Enum>("cat", Self::VT_CAT, false)?
     .visit_field::<SiteStatus_Ingest_eoc_Enum>("eoc", Self::VT_EOC, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<&'_ str>>>>("link", Self::VT_LINK, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<&'_ str>>>>("linkStatus", Self::VT_LINKSTATUS, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<&'_ str>>>>("radarSystem", Self::VT_RADARSYSTEM, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<&'_ str>>>>("radarStatus", Self::VT_RADARSTATUS, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<&'_ str>>>>("missile", Self::VT_MISSILE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<&'_ str>>>>("missileInventory", Self::VT_MISSILEINVENTORY, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("createdAt", Self::VT_CREATEDAT, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("createdBy", Self::VT_CREATEDBY, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("source", Self::VT_SOURCE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("origin", Self::VT_ORIGIN, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("origNetwork", Self::VT_ORIGNETWORK, false)?
     .visit_field::<SiteStatus_Ingest_dataMode_Enum>("dataMode", Self::VT_DATAMODE, false)?
     .finish();
    Ok(())
  }
}
pub struct SiteStatus_IngestArgs<'a> {
    pub id: Option<flatbuffers::WIPOffset<&'a str>>,
    pub classificationMarking: Option<flatbuffers::WIPOffset<&'a str>>,
    pub idSite: Option<flatbuffers::WIPOffset<&'a str>>,
    pub siteType: Option<flatbuffers::WIPOffset<&'a str>>,
    pub mobileAltId: Option<flatbuffers::WIPOffset<&'a str>>,
    pub poiid: Option<flatbuffers::WIPOffset<&'a str>>,
    pub trackId: Option<flatbuffers::WIPOffset<&'a str>>,
    pub trackRefL16: Option<flatbuffers::WIPOffset<&'a str>>,
    pub opsCapability: Option<flatbuffers::WIPOffset<&'a str>>,
    pub instStatus: SiteStatus_Ingest_instStatus_Enum,
    pub fpcon: SiteStatus_Ingest_fpcon_Enum,
    pub hpcon: SiteStatus_Ingest_hpcon_Enum,
    pub cpcon: SiteStatus_Ingest_cpcon_Enum,
    pub reportTime: Option<flatbuffers::WIPOffset<&'a str>>,
    pub timeFunction: Option<flatbuffers::WIPOffset<&'a str>>,
    pub weatherMessage: Option<flatbuffers::WIPOffset<&'a str>>,
    pub pes: bool,
    pub hotInventory: i32,
    pub coldInventory: i32,
    pub samMode: Option<flatbuffers::WIPOffset<&'a str>>,
    pub radiateMode: Option<flatbuffers::WIPOffset<&'a str>>,
    pub opsImpairment: Option<flatbuffers::WIPOffset<&'a str>>,
    pub commImpairment: Option<flatbuffers::WIPOffset<&'a str>>,
    pub cat: SiteStatus_Ingest_cat_Enum,
    pub eoc: SiteStatus_Ingest_eoc_Enum,
    pub link: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>,
    pub linkStatus: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>,
    pub radarSystem: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>,
    pub radarStatus: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>,
    pub missile: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>,
    pub missileInventory: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>,
    pub createdAt: Option<flatbuffers::WIPOffset<&'a str>>,
    pub createdBy: Option<flatbuffers::WIPOffset<&'a str>>,
    pub source: Option<flatbuffers::WIPOffset<&'a str>>,
    pub origin: Option<flatbuffers::WIPOffset<&'a str>>,
    pub origNetwork: Option<flatbuffers::WIPOffset<&'a str>>,
    pub dataMode: SiteStatus_Ingest_dataMode_Enum,
}
impl<'a> Default for SiteStatus_IngestArgs<'a> {
  #[inline]
  fn default() -> Self {
    SiteStatus_IngestArgs {
      id: None,
      classificationMarking: None,
      idSite: None,
      siteType: None,
      mobileAltId: None,
      poiid: None,
      trackId: None,
      trackRefL16: None,
      opsCapability: None,
      instStatus: SiteStatus_Ingest_instStatus_Enum::FMC,
      fpcon: SiteStatus_Ingest_fpcon_Enum::NORMAL,
      hpcon: SiteStatus_Ingest_hpcon_Enum::E0,
      cpcon: SiteStatus_Ingest_cpcon_Enum::E1,
      reportTime: None,
      timeFunction: None,
      weatherMessage: None,
      pes: false,
      hotInventory: 0,
      coldInventory: 0,
      samMode: None,
      radiateMode: None,
      opsImpairment: None,
      commImpairment: None,
      cat: SiteStatus_Ingest_cat_Enum::COLD,
      eoc: SiteStatus_Ingest_eoc_Enum::COLD,
      link: None,
      linkStatus: None,
      radarSystem: None,
      radarStatus: None,
      missile: None,
      missileInventory: None,
      createdAt: None,
      createdBy: None,
      source: None,
      origin: None,
      origNetwork: None,
      dataMode: SiteStatus_Ingest_dataMode_Enum::REAL,
    }
  }
}

pub struct SiteStatus_IngestBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> SiteStatus_IngestBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_id(&mut self, id: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(SiteStatus_Ingest::VT_ID, id);
  }
  #[inline]
  pub fn add_classificationMarking(&mut self, classificationMarking: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(SiteStatus_Ingest::VT_CLASSIFICATIONMARKING, classificationMarking);
  }
  #[inline]
  pub fn add_idSite(&mut self, idSite: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(SiteStatus_Ingest::VT_IDSITE, idSite);
  }
  #[inline]
  pub fn add_siteType(&mut self, siteType: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(SiteStatus_Ingest::VT_SITETYPE, siteType);
  }
  #[inline]
  pub fn add_mobileAltId(&mut self, mobileAltId: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(SiteStatus_Ingest::VT_MOBILEALTID, mobileAltId);
  }
  #[inline]
  pub fn add_poiid(&mut self, poiid: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(SiteStatus_Ingest::VT_POIID, poiid);
  }
  #[inline]
  pub fn add_trackId(&mut self, trackId: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(SiteStatus_Ingest::VT_TRACKID, trackId);
  }
  #[inline]
  pub fn add_trackRefL16(&mut self, trackRefL16: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(SiteStatus_Ingest::VT_TRACKREFL16, trackRefL16);
  }
  #[inline]
  pub fn add_opsCapability(&mut self, opsCapability: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(SiteStatus_Ingest::VT_OPSCAPABILITY, opsCapability);
  }
  #[inline]
  pub fn add_instStatus(&mut self, instStatus: SiteStatus_Ingest_instStatus_Enum) {
    self.fbb_.push_slot::<SiteStatus_Ingest_instStatus_Enum>(SiteStatus_Ingest::VT_INSTSTATUS, instStatus, SiteStatus_Ingest_instStatus_Enum::FMC);
  }
  #[inline]
  pub fn add_fpcon(&mut self, fpcon: SiteStatus_Ingest_fpcon_Enum) {
    self.fbb_.push_slot::<SiteStatus_Ingest_fpcon_Enum>(SiteStatus_Ingest::VT_FPCON, fpcon, SiteStatus_Ingest_fpcon_Enum::NORMAL);
  }
  #[inline]
  pub fn add_hpcon(&mut self, hpcon: SiteStatus_Ingest_hpcon_Enum) {
    self.fbb_.push_slot::<SiteStatus_Ingest_hpcon_Enum>(SiteStatus_Ingest::VT_HPCON, hpcon, SiteStatus_Ingest_hpcon_Enum::E0);
  }
  #[inline]
  pub fn add_cpcon(&mut self, cpcon: SiteStatus_Ingest_cpcon_Enum) {
    self.fbb_.push_slot::<SiteStatus_Ingest_cpcon_Enum>(SiteStatus_Ingest::VT_CPCON, cpcon, SiteStatus_Ingest_cpcon_Enum::E1);
  }
  #[inline]
  pub fn add_reportTime(&mut self, reportTime: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(SiteStatus_Ingest::VT_REPORTTIME, reportTime);
  }
  #[inline]
  pub fn add_timeFunction(&mut self, timeFunction: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(SiteStatus_Ingest::VT_TIMEFUNCTION, timeFunction);
  }
  #[inline]
  pub fn add_weatherMessage(&mut self, weatherMessage: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(SiteStatus_Ingest::VT_WEATHERMESSAGE, weatherMessage);
  }
  #[inline]
  pub fn add_pes(&mut self, pes: bool) {
    self.fbb_.push_slot::<bool>(SiteStatus_Ingest::VT_PES, pes, false);
  }
  #[inline]
  pub fn add_hotInventory(&mut self, hotInventory: i32) {
    self.fbb_.push_slot::<i32>(SiteStatus_Ingest::VT_HOTINVENTORY, hotInventory, 0);
  }
  #[inline]
  pub fn add_coldInventory(&mut self, coldInventory: i32) {
    self.fbb_.push_slot::<i32>(SiteStatus_Ingest::VT_COLDINVENTORY, coldInventory, 0);
  }
  #[inline]
  pub fn add_samMode(&mut self, samMode: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(SiteStatus_Ingest::VT_SAMMODE, samMode);
  }
  #[inline]
  pub fn add_radiateMode(&mut self, radiateMode: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(SiteStatus_Ingest::VT_RADIATEMODE, radiateMode);
  }
  #[inline]
  pub fn add_opsImpairment(&mut self, opsImpairment: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(SiteStatus_Ingest::VT_OPSIMPAIRMENT, opsImpairment);
  }
  #[inline]
  pub fn add_commImpairment(&mut self, commImpairment: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(SiteStatus_Ingest::VT_COMMIMPAIRMENT, commImpairment);
  }
  #[inline]
  pub fn add_cat(&mut self, cat: SiteStatus_Ingest_cat_Enum) {
    self.fbb_.push_slot::<SiteStatus_Ingest_cat_Enum>(SiteStatus_Ingest::VT_CAT, cat, SiteStatus_Ingest_cat_Enum::COLD);
  }
  #[inline]
  pub fn add_eoc(&mut self, eoc: SiteStatus_Ingest_eoc_Enum) {
    self.fbb_.push_slot::<SiteStatus_Ingest_eoc_Enum>(SiteStatus_Ingest::VT_EOC, eoc, SiteStatus_Ingest_eoc_Enum::COLD);
  }
  #[inline]
  pub fn add_link(&mut self, link: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<&'b  str>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(SiteStatus_Ingest::VT_LINK, link);
  }
  #[inline]
  pub fn add_linkStatus(&mut self, linkStatus: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<&'b  str>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(SiteStatus_Ingest::VT_LINKSTATUS, linkStatus);
  }
  #[inline]
  pub fn add_radarSystem(&mut self, radarSystem: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<&'b  str>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(SiteStatus_Ingest::VT_RADARSYSTEM, radarSystem);
  }
  #[inline]
  pub fn add_radarStatus(&mut self, radarStatus: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<&'b  str>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(SiteStatus_Ingest::VT_RADARSTATUS, radarStatus);
  }
  #[inline]
  pub fn add_missile(&mut self, missile: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<&'b  str>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(SiteStatus_Ingest::VT_MISSILE, missile);
  }
  #[inline]
  pub fn add_missileInventory(&mut self, missileInventory: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<&'b  str>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(SiteStatus_Ingest::VT_MISSILEINVENTORY, missileInventory);
  }
  #[inline]
  pub fn add_createdAt(&mut self, createdAt: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(SiteStatus_Ingest::VT_CREATEDAT, createdAt);
  }
  #[inline]
  pub fn add_createdBy(&mut self, createdBy: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(SiteStatus_Ingest::VT_CREATEDBY, createdBy);
  }
  #[inline]
  pub fn add_source(&mut self, source: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(SiteStatus_Ingest::VT_SOURCE, source);
  }
  #[inline]
  pub fn add_origin(&mut self, origin: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(SiteStatus_Ingest::VT_ORIGIN, origin);
  }
  #[inline]
  pub fn add_origNetwork(&mut self, origNetwork: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(SiteStatus_Ingest::VT_ORIGNETWORK, origNetwork);
  }
  #[inline]
  pub fn add_dataMode(&mut self, dataMode: SiteStatus_Ingest_dataMode_Enum) {
    self.fbb_.push_slot::<SiteStatus_Ingest_dataMode_Enum>(SiteStatus_Ingest::VT_DATAMODE, dataMode, SiteStatus_Ingest_dataMode_Enum::REAL);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> SiteStatus_IngestBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    SiteStatus_IngestBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<SiteStatus_Ingest<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for SiteStatus_Ingest<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("SiteStatus_Ingest");
      ds.field("id", &self.id());
      ds.field("classificationMarking", &self.classificationMarking());
      ds.field("idSite", &self.idSite());
      ds.field("siteType", &self.siteType());
      ds.field("mobileAltId", &self.mobileAltId());
      ds.field("poiid", &self.poiid());
      ds.field("trackId", &self.trackId());
      ds.field("trackRefL16", &self.trackRefL16());
      ds.field("opsCapability", &self.opsCapability());
      ds.field("instStatus", &self.instStatus());
      ds.field("fpcon", &self.fpcon());
      ds.field("hpcon", &self.hpcon());
      ds.field("cpcon", &self.cpcon());
      ds.field("reportTime", &self.reportTime());
      ds.field("timeFunction", &self.timeFunction());
      ds.field("weatherMessage", &self.weatherMessage());
      ds.field("pes", &self.pes());
      ds.field("hotInventory", &self.hotInventory());
      ds.field("coldInventory", &self.coldInventory());
      ds.field("samMode", &self.samMode());
      ds.field("radiateMode", &self.radiateMode());
      ds.field("opsImpairment", &self.opsImpairment());
      ds.field("commImpairment", &self.commImpairment());
      ds.field("cat", &self.cat());
      ds.field("eoc", &self.eoc());
      ds.field("link", &self.link());
      ds.field("linkStatus", &self.linkStatus());
      ds.field("radarSystem", &self.radarSystem());
      ds.field("radarStatus", &self.radarStatus());
      ds.field("missile", &self.missile());
      ds.field("missileInventory", &self.missileInventory());
      ds.field("createdAt", &self.createdAt());
      ds.field("createdBy", &self.createdBy());
      ds.field("source", &self.source());
      ds.field("origin", &self.origin());
      ds.field("origNetwork", &self.origNetwork());
      ds.field("dataMode", &self.dataMode());
      ds.finish()
  }
}
#[non_exhaustive]
#[derive(Debug, Clone, PartialEq)]
pub struct SiteStatus_IngestT {
  pub id: Option<String>,
  pub classificationMarking: Option<String>,
  pub idSite: Option<String>,
  pub siteType: Option<String>,
  pub mobileAltId: Option<String>,
  pub poiid: Option<String>,
  pub trackId: Option<String>,
  pub trackRefL16: Option<String>,
  pub opsCapability: Option<String>,
  pub instStatus: SiteStatus_Ingest_instStatus_Enum,
  pub fpcon: SiteStatus_Ingest_fpcon_Enum,
  pub hpcon: SiteStatus_Ingest_hpcon_Enum,
  pub cpcon: SiteStatus_Ingest_cpcon_Enum,
  pub reportTime: Option<String>,
  pub timeFunction: Option<String>,
  pub weatherMessage: Option<String>,
  pub pes: bool,
  pub hotInventory: i32,
  pub coldInventory: i32,
  pub samMode: Option<String>,
  pub radiateMode: Option<String>,
  pub opsImpairment: Option<String>,
  pub commImpairment: Option<String>,
  pub cat: SiteStatus_Ingest_cat_Enum,
  pub eoc: SiteStatus_Ingest_eoc_Enum,
  pub link: Option<Vec<String>>,
  pub linkStatus: Option<Vec<String>>,
  pub radarSystem: Option<Vec<String>>,
  pub radarStatus: Option<Vec<String>>,
  pub missile: Option<Vec<String>>,
  pub missileInventory: Option<Vec<String>>,
  pub createdAt: Option<String>,
  pub createdBy: Option<String>,
  pub source: Option<String>,
  pub origin: Option<String>,
  pub origNetwork: Option<String>,
  pub dataMode: SiteStatus_Ingest_dataMode_Enum,
}
impl Default for SiteStatus_IngestT {
  fn default() -> Self {
    Self {
      id: None,
      classificationMarking: None,
      idSite: None,
      siteType: None,
      mobileAltId: None,
      poiid: None,
      trackId: None,
      trackRefL16: None,
      opsCapability: None,
      instStatus: SiteStatus_Ingest_instStatus_Enum::FMC,
      fpcon: SiteStatus_Ingest_fpcon_Enum::NORMAL,
      hpcon: SiteStatus_Ingest_hpcon_Enum::E0,
      cpcon: SiteStatus_Ingest_cpcon_Enum::E1,
      reportTime: None,
      timeFunction: None,
      weatherMessage: None,
      pes: false,
      hotInventory: 0,
      coldInventory: 0,
      samMode: None,
      radiateMode: None,
      opsImpairment: None,
      commImpairment: None,
      cat: SiteStatus_Ingest_cat_Enum::COLD,
      eoc: SiteStatus_Ingest_eoc_Enum::COLD,
      link: None,
      linkStatus: None,
      radarSystem: None,
      radarStatus: None,
      missile: None,
      missileInventory: None,
      createdAt: None,
      createdBy: None,
      source: None,
      origin: None,
      origNetwork: None,
      dataMode: SiteStatus_Ingest_dataMode_Enum::REAL,
    }
  }
}
impl SiteStatus_IngestT {
  pub fn pack<'b, A: flatbuffers::Allocator + 'b>(
    &self,
    _fbb: &mut flatbuffers::FlatBufferBuilder<'b, A>
  ) -> flatbuffers::WIPOffset<SiteStatus_Ingest<'b>> {
    let id = self.id.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let classificationMarking = self.classificationMarking.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let idSite = self.idSite.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let siteType = self.siteType.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let mobileAltId = self.mobileAltId.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let poiid = self.poiid.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let trackId = self.trackId.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let trackRefL16 = self.trackRefL16.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let opsCapability = self.opsCapability.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let instStatus = self.instStatus;
    let fpcon = self.fpcon;
    let hpcon = self.hpcon;
    let cpcon = self.cpcon;
    let reportTime = self.reportTime.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let timeFunction = self.timeFunction.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let weatherMessage = self.weatherMessage.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let pes = self.pes;
    let hotInventory = self.hotInventory;
    let coldInventory = self.coldInventory;
    let samMode = self.samMode.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let radiateMode = self.radiateMode.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let opsImpairment = self.opsImpairment.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let commImpairment = self.commImpairment.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let cat = self.cat;
    let eoc = self.eoc;
    let link = self.link.as_ref().map(|x|{
      let w: Vec<_> = x.iter().map(|s| _fbb.create_string(s)).collect();_fbb.create_vector(&w)
    });
    let linkStatus = self.linkStatus.as_ref().map(|x|{
      let w: Vec<_> = x.iter().map(|s| _fbb.create_string(s)).collect();_fbb.create_vector(&w)
    });
    let radarSystem = self.radarSystem.as_ref().map(|x|{
      let w: Vec<_> = x.iter().map(|s| _fbb.create_string(s)).collect();_fbb.create_vector(&w)
    });
    let radarStatus = self.radarStatus.as_ref().map(|x|{
      let w: Vec<_> = x.iter().map(|s| _fbb.create_string(s)).collect();_fbb.create_vector(&w)
    });
    let missile = self.missile.as_ref().map(|x|{
      let w: Vec<_> = x.iter().map(|s| _fbb.create_string(s)).collect();_fbb.create_vector(&w)
    });
    let missileInventory = self.missileInventory.as_ref().map(|x|{
      let w: Vec<_> = x.iter().map(|s| _fbb.create_string(s)).collect();_fbb.create_vector(&w)
    });
    let createdAt = self.createdAt.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let createdBy = self.createdBy.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let source = self.source.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let origin = self.origin.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let origNetwork = self.origNetwork.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let dataMode = self.dataMode;
    SiteStatus_Ingest::create(_fbb, &SiteStatus_IngestArgs{
      id,
      classificationMarking,
      idSite,
      siteType,
      mobileAltId,
      poiid,
      trackId,
      trackRefL16,
      opsCapability,
      instStatus,
      fpcon,
      hpcon,
      cpcon,
      reportTime,
      timeFunction,
      weatherMessage,
      pes,
      hotInventory,
      coldInventory,
      samMode,
      radiateMode,
      opsImpairment,
      commImpairment,
      cat,
      eoc,
      link,
      linkStatus,
      radarSystem,
      radarStatus,
      missile,
      missileInventory,
      createdAt,
      createdBy,
      source,
      origin,
      origNetwork,
      dataMode,
    })
  }
}
#[inline]
/// Verifies that a buffer of bytes contains a `SiteStatus_Ingest`
/// and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_site_status_ingest_unchecked`.
pub fn root_as_site_status_ingest(buf: &[u8]) -> Result<SiteStatus_Ingest, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root::<SiteStatus_Ingest>(buf)
}
#[inline]
/// Verifies that a buffer of bytes contains a size prefixed
/// `SiteStatus_Ingest` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `size_prefixed_root_as_site_status_ingest_unchecked`.
pub fn size_prefixed_root_as_site_status_ingest(buf: &[u8]) -> Result<SiteStatus_Ingest, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root::<SiteStatus_Ingest>(buf)
}
#[inline]
/// Verifies, with the given options, that a buffer of bytes
/// contains a `SiteStatus_Ingest` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_site_status_ingest_unchecked`.
pub fn root_as_site_status_ingest_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<SiteStatus_Ingest<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root_with_opts::<SiteStatus_Ingest<'b>>(opts, buf)
}
#[inline]
/// Verifies, with the given verifier options, that a buffer of
/// bytes contains a size prefixed `SiteStatus_Ingest` and returns
/// it. Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_site_status_ingest_unchecked`.
pub fn size_prefixed_root_as_site_status_ingest_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<SiteStatus_Ingest<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root_with_opts::<SiteStatus_Ingest<'b>>(opts, buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a SiteStatus_Ingest and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid `SiteStatus_Ingest`.
pub unsafe fn root_as_site_status_ingest_unchecked(buf: &[u8]) -> SiteStatus_Ingest {
  flatbuffers::root_unchecked::<SiteStatus_Ingest>(buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a size prefixed SiteStatus_Ingest and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid size prefixed `SiteStatus_Ingest`.
pub unsafe fn size_prefixed_root_as_site_status_ingest_unchecked(buf: &[u8]) -> SiteStatus_Ingest {
  flatbuffers::size_prefixed_root_unchecked::<SiteStatus_Ingest>(buf)
}
pub const SITE_STATUS_INGEST_IDENTIFIER: &str = "SITE";

#[inline]
pub fn site_status_ingest_buffer_has_identifier(buf: &[u8]) -> bool {
  flatbuffers::buffer_has_identifier(buf, SITE_STATUS_INGEST_IDENTIFIER, false)
}

#[inline]
pub fn site_status_ingest_size_prefixed_buffer_has_identifier(buf: &[u8]) -> bool {
  flatbuffers::buffer_has_identifier(buf, SITE_STATUS_INGEST_IDENTIFIER, true)
}

#[inline]
pub fn finish_site_status_ingest_buffer<'a, 'b, A: flatbuffers::Allocator + 'a>(
    fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
    root: flatbuffers::WIPOffset<SiteStatus_Ingest<'a>>) {
  fbb.finish(root, Some(SITE_STATUS_INGEST_IDENTIFIER));
}

#[inline]
pub fn finish_size_prefixed_site_status_ingest_buffer<'a, 'b, A: flatbuffers::Allocator + 'a>(fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>, root: flatbuffers::WIPOffset<SiteStatus_Ingest<'a>>) {
  fbb.finish_size_prefixed(root, Some(SITE_STATUS_INGEST_IDENTIFIER));
}
