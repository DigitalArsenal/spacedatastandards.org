// automatically generated by the FlatBuffers compiler, do not modify


// @generated

use core::mem;
use core::cmp::Ordering;

extern crate flatbuffers;
use self::flatbuffers::{EndianScalar, Follow};

#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
pub const ENUM_MIN_MANIFOLD_ELSET_INGEST_DATA_MODE_ENUM: i8 = 0;
#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
pub const ENUM_MAX_MANIFOLD_ELSET_INGEST_DATA_MODE_ENUM: i8 = 3;
#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
#[allow(non_camel_case_types)]
pub const ENUM_VALUES_MANIFOLD_ELSET_INGEST_DATA_MODE_ENUM: [ManifoldElset_Ingest_dataMode_Enum; 4] = [
  ManifoldElset_Ingest_dataMode_Enum::REAL,
  ManifoldElset_Ingest_dataMode_Enum::TEST,
  ManifoldElset_Ingest_dataMode_Enum::SIMULATED,
  ManifoldElset_Ingest_dataMode_Enum::EXERCISE,
];

#[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, Default)]
#[repr(transparent)]
pub struct ManifoldElset_Ingest_dataMode_Enum(pub i8);
#[allow(non_upper_case_globals)]
impl ManifoldElset_Ingest_dataMode_Enum {
  /// Data collected or produced that pertains to real-world objects, events, and analysis.
  pub const REAL: Self = Self(0);
  /// Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  pub const TEST: Self = Self(1);
  /// Synthetic data generated by a model to mimic real-world datasets.
  pub const SIMULATED: Self = Self(2);
  /// Data pertaining to a government or military exercise. The data may include both real and simulated data.
  pub const EXERCISE: Self = Self(3);

  pub const ENUM_MIN: i8 = 0;
  pub const ENUM_MAX: i8 = 3;
  pub const ENUM_VALUES: &'static [Self] = &[
    Self::REAL,
    Self::TEST,
    Self::SIMULATED,
    Self::EXERCISE,
  ];
  /// Returns the variant's name or "" if unknown.
  pub fn variant_name(self) -> Option<&'static str> {
    match self {
      Self::REAL => Some("REAL"),
      Self::TEST => Some("TEST"),
      Self::SIMULATED => Some("SIMULATED"),
      Self::EXERCISE => Some("EXERCISE"),
      _ => None,
    }
  }
}
impl core::fmt::Debug for ManifoldElset_Ingest_dataMode_Enum {
  fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
    if let Some(name) = self.variant_name() {
      f.write_str(name)
    } else {
      f.write_fmt(format_args!("<UNKNOWN {:?}>", self.0))
    }
  }
}
impl<'a> flatbuffers::Follow<'a> for ManifoldElset_Ingest_dataMode_Enum {
  type Inner = Self;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    let b = flatbuffers::read_scalar_at::<i8>(buf, loc);
    Self(b)
  }
}

impl flatbuffers::Push for ManifoldElset_Ingest_dataMode_Enum {
    type Output = ManifoldElset_Ingest_dataMode_Enum;
    #[inline]
    unsafe fn push(&self, dst: &mut [u8], _written_len: usize) {
        flatbuffers::emplace_scalar::<i8>(dst, self.0);
    }
}

impl flatbuffers::EndianScalar for ManifoldElset_Ingest_dataMode_Enum {
  type Scalar = i8;
  #[inline]
  fn to_little_endian(self) -> i8 {
    self.0.to_le()
  }
  #[inline]
  #[allow(clippy::wrong_self_convention)]
  fn from_little_endian(v: i8) -> Self {
    let b = i8::from_le(v);
    Self(b)
  }
}

impl<'a> flatbuffers::Verifiable for ManifoldElset_Ingest_dataMode_Enum {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    i8::run_verifier(v, pos)
  }
}

impl flatbuffers::SimpleToVerifyInSlice for ManifoldElset_Ingest_dataMode_Enum {}
pub enum ManifoldElset_IngestOffset {}
#[derive(Copy, Clone, PartialEq)]

/// /// Theoretical Keplarian orbital elements belonging to an object of interest's manifold describing a possible/theoretical orbit for an object of interest for tasking purposes.
pub struct ManifoldElset_Ingest<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for ManifoldElset_Ingest<'a> {
  type Inner = ManifoldElset_Ingest<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> ManifoldElset_Ingest<'a> {
  pub const VT_ID: flatbuffers::VOffsetT = 4;
  pub const VT_IDMANIFOLD: flatbuffers::VOffsetT = 6;
  pub const VT_CLASSIFICATIONMARKING: flatbuffers::VOffsetT = 8;
  pub const VT_TMPSATNO: flatbuffers::VOffsetT = 10;
  pub const VT_EPOCH: flatbuffers::VOffsetT = 12;
  pub const VT_MEANMOTION: flatbuffers::VOffsetT = 14;
  pub const VT_ECCENTRICITY: flatbuffers::VOffsetT = 16;
  pub const VT_INCLINATION: flatbuffers::VOffsetT = 18;
  pub const VT_RAAN: flatbuffers::VOffsetT = 20;
  pub const VT_ARGOFPERIGEE: flatbuffers::VOffsetT = 22;
  pub const VT_MEANANOMALY: flatbuffers::VOffsetT = 24;
  pub const VT_REVNO: flatbuffers::VOffsetT = 26;
  pub const VT_BSTAR: flatbuffers::VOffsetT = 28;
  pub const VT_MEANMOTIONDOT: flatbuffers::VOffsetT = 30;
  pub const VT_MEANMOTIONDDOT: flatbuffers::VOffsetT = 32;
  pub const VT_SEMIMAJORAXIS: flatbuffers::VOffsetT = 34;
  pub const VT_PERIOD: flatbuffers::VOffsetT = 36;
  pub const VT_APOGEE: flatbuffers::VOffsetT = 38;
  pub const VT_PERIGEE: flatbuffers::VOffsetT = 40;
  pub const VT_LINE1: flatbuffers::VOffsetT = 42;
  pub const VT_LINE2: flatbuffers::VOffsetT = 44;
  pub const VT_CREATEDAT: flatbuffers::VOffsetT = 46;
  pub const VT_CREATEDBY: flatbuffers::VOffsetT = 48;
  pub const VT_SOURCE: flatbuffers::VOffsetT = 50;
  pub const VT_ORIGIN: flatbuffers::VOffsetT = 52;
  pub const VT_DATAMODE: flatbuffers::VOffsetT = 54;
  pub const VT_ORIGNETWORK: flatbuffers::VOffsetT = 56;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    ManifoldElset_Ingest { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args ManifoldElset_IngestArgs<'args>
  ) -> flatbuffers::WIPOffset<ManifoldElset_Ingest<'bldr>> {
    let mut builder = ManifoldElset_IngestBuilder::new(_fbb);
    builder.add_perigee(args.perigee);
    builder.add_apogee(args.apogee);
    builder.add_period(args.period);
    builder.add_semiMajorAxis(args.semiMajorAxis);
    builder.add_meanMotionDDot(args.meanMotionDDot);
    builder.add_meanMotionDot(args.meanMotionDot);
    builder.add_bStar(args.bStar);
    builder.add_meanAnomaly(args.meanAnomaly);
    builder.add_argOfPerigee(args.argOfPerigee);
    builder.add_raan(args.raan);
    builder.add_inclination(args.inclination);
    builder.add_eccentricity(args.eccentricity);
    builder.add_meanMotion(args.meanMotion);
    if let Some(x) = args.origNetwork { builder.add_origNetwork(x); }
    if let Some(x) = args.origin { builder.add_origin(x); }
    if let Some(x) = args.source { builder.add_source(x); }
    if let Some(x) = args.createdBy { builder.add_createdBy(x); }
    if let Some(x) = args.createdAt { builder.add_createdAt(x); }
    if let Some(x) = args.line2 { builder.add_line2(x); }
    if let Some(x) = args.line1 { builder.add_line1(x); }
    builder.add_revNo(args.revNo);
    if let Some(x) = args.epoch { builder.add_epoch(x); }
    builder.add_tmpSatNo(args.tmpSatNo);
    if let Some(x) = args.classificationMarking { builder.add_classificationMarking(x); }
    if let Some(x) = args.idManifold { builder.add_idManifold(x); }
    if let Some(x) = args.id { builder.add_id(x); }
    builder.add_dataMode(args.dataMode);
    builder.finish()
  }

  pub fn unpack(&self) -> ManifoldElset_IngestT {
    let id = self.id().map(|x| {
      x.to_string()
    });
    let idManifold = self.idManifold().map(|x| {
      x.to_string()
    });
    let classificationMarking = self.classificationMarking().map(|x| {
      x.to_string()
    });
    let tmpSatNo = self.tmpSatNo();
    let epoch = self.epoch().map(|x| {
      x.to_string()
    });
    let meanMotion = self.meanMotion();
    let eccentricity = self.eccentricity();
    let inclination = self.inclination();
    let raan = self.raan();
    let argOfPerigee = self.argOfPerigee();
    let meanAnomaly = self.meanAnomaly();
    let revNo = self.revNo();
    let bStar = self.bStar();
    let meanMotionDot = self.meanMotionDot();
    let meanMotionDDot = self.meanMotionDDot();
    let semiMajorAxis = self.semiMajorAxis();
    let period = self.period();
    let apogee = self.apogee();
    let perigee = self.perigee();
    let line1 = self.line1().map(|x| {
      x.to_string()
    });
    let line2 = self.line2().map(|x| {
      x.to_string()
    });
    let createdAt = self.createdAt().map(|x| {
      x.to_string()
    });
    let createdBy = self.createdBy().map(|x| {
      x.to_string()
    });
    let source = self.source().map(|x| {
      x.to_string()
    });
    let origin = self.origin().map(|x| {
      x.to_string()
    });
    let dataMode = self.dataMode();
    let origNetwork = self.origNetwork().map(|x| {
      x.to_string()
    });
    ManifoldElset_IngestT {
      id,
      idManifold,
      classificationMarking,
      tmpSatNo,
      epoch,
      meanMotion,
      eccentricity,
      inclination,
      raan,
      argOfPerigee,
      meanAnomaly,
      revNo,
      bStar,
      meanMotionDot,
      meanMotionDDot,
      semiMajorAxis,
      period,
      apogee,
      perigee,
      line1,
      line2,
      createdAt,
      createdBy,
      source,
      origin,
      dataMode,
      origNetwork,
    }
  }

  /// Unique identifier of the record, auto-generated by the system.
  /// Example: /// Example: MANIFOLDELSET-ID
  /// Constraints: Minimum length = 1, Maximum length = 36
  #[inline]
  pub fn id(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(ManifoldElset_Ingest::VT_ID, None)}
  }
  /// Identifier of the parent Manifold record.
  /// Example: /// Example: REF-MANIFOLD-ID
  /// Constraints: Minimum length = 1, Maximum length = 36
  #[inline]
  pub fn idManifold(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(ManifoldElset_Ingest::VT_IDMANIFOLD, None)}
  }
  /// Classification marking of the data in IC/CAPCO Portion-marked format.
  /// Example: /// Example: U
  /// Constraints: Minimum length = 1, Maximum length = 128
  #[inline]
  pub fn classificationMarking(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(ManifoldElset_Ingest::VT_CLASSIFICATIONMARKING, None)}
  }
  /// A placeholder satellite number and not a true NORAD catalog number.
  /// Example: /// Example: 10
  /// Constraints: No constraints specified.
  #[inline]
  pub fn tmpSatNo(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(ManifoldElset_Ingest::VT_TMPSATNO, Some(0)).unwrap()}
  }
  /// Elset epoch time in ISO 8601 UTC format, with microsecond precision.
  /// Example: /// Example: 2021-01-01T01:01:01.123456Z
  /// Constraints: No constraints specified.
  #[inline]
  pub fn epoch(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(ManifoldElset_Ingest::VT_EPOCH, None)}
  }
  /// The constant angular speed required for the body to complete one circular orbit in the same amount of time as the actual elliptical orbit with variable speed. Measured in revolutions per day.
  /// Example: /// Example: 10.23
  /// Constraints: No constraints specified.
  #[inline]
  pub fn meanMotion(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(ManifoldElset_Ingest::VT_MEANMOTION, Some(0.0)).unwrap()}
  }
  /// The orbital eccentricity of an astronomical object is a parameter that determines the amount by which its orbit around another body deviates from a perfect circle. A value of 0 is a circular orbit, values between 0 and 1 form an elliptic orbit, 1 is a parabolic escape orbit, and greater than 1 is a hyperbolic escape orbit.
  /// Example: /// Example: 0.5
  /// Constraints: No constraints specified.
  #[inline]
  pub fn eccentricity(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(ManifoldElset_Ingest::VT_ECCENTRICITY, Some(0.0)).unwrap()}
  }
  /// The angle between the equator and the orbit when looking from the center of the Earth. If the orbit went exactly around the equator from left to right, then the inclination would be 0. The inclination ranges from 0 to 180 degrees.
  /// Example: /// Example: 90.23
  /// Constraints: No constraints specified.
  #[inline]
  pub fn inclination(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(ManifoldElset_Ingest::VT_INCLINATION, Some(0.0)).unwrap()}
  }
  /// Right ascension of the ascending node, or RAAN is the angle as measured in degrees eastwards (or, as seen from the north, counterclockwise) from the First Point of Aries to the ascending node, which is where the orbit crosses the equator when traveling north.
  /// Example: /// Example: 10.23
  /// Constraints: No constraints specified.
  #[inline]
  pub fn raan(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(ManifoldElset_Ingest::VT_RAAN, Some(0.0)).unwrap()}
  }
  /// The argument of perigee is the angle in degrees formed between the perigee and the ascending node. If the perigee would occur at the ascending node, the argument of perigee would be 0.
  /// Example: /// Example: 10.23
  /// Constraints: No constraints specified.
  #[inline]
  pub fn argOfPerigee(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(ManifoldElset_Ingest::VT_ARGOFPERIGEE, Some(0.0)).unwrap()}
  }
  /// Where the satellite is in its orbital path. The mean anomaly ranges from 0 to 360 degrees. The mean anomaly is referenced to the perigee. If the satellite were at the perigee, the mean anomaly would be 0.
  /// Example: /// Example: 10.23
  /// Constraints: No constraints specified.
  #[inline]
  pub fn meanAnomaly(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(ManifoldElset_Ingest::VT_MEANANOMALY, Some(0.0)).unwrap()}
  }
  /// The current revolution number. The value is incremented when a satellite crosses the equator on an ascending pass.
  /// Example: /// Example: 123
  /// Constraints: No constraints specified.
  #[inline]
  pub fn revNo(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(ManifoldElset_Ingest::VT_REVNO, Some(0)).unwrap()}
  }
  /// The drag term for SGP4 orbital model, used for calculating decay constants for altitude, eccentricity etc, measured in inverse earth radii.
  /// Example: /// Example: 10.23
  /// Constraints: No constraints specified.
  #[inline]
  pub fn bStar(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(ManifoldElset_Ingest::VT_BSTAR, Some(0.0)).unwrap()}
  }
  /// 1st derivative of the mean motion with respect to time. Units are revolutions per day squared.
  /// Example: /// Example: 10.23
  /// Constraints: No constraints specified.
  #[inline]
  pub fn meanMotionDot(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(ManifoldElset_Ingest::VT_MEANMOTIONDOT, Some(0.0)).unwrap()}
  }
  /// 2nd derivative of the mean motion with respect to time. Units are revolutions per day cubed.
  /// Example: /// Example: 10.23
  /// Constraints: No constraints specified.
  #[inline]
  pub fn meanMotionDDot(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(ManifoldElset_Ingest::VT_MEANMOTIONDDOT, Some(0.0)).unwrap()}
  }
  /// The sum of the periapsis and apoapsis distances divided by two. For circular orbits, the semimajor axis is the distance between the centers of the bodies, not the distance of the bodies from the center of mass.
  /// Example: /// Example: 10.23
  /// Constraints: No constraints specified.
  #[inline]
  pub fn semiMajorAxis(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(ManifoldElset_Ingest::VT_SEMIMAJORAXIS, Some(0.0)).unwrap()}
  }
  /// Period of the orbit equal to inverse of mean motion.
  /// Example: /// Example: 10.23
  /// Constraints: No constraints specified.
  #[inline]
  pub fn period(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(ManifoldElset_Ingest::VT_PERIOD, Some(0.0)).unwrap()}
  }
  /// The Orbit point furthest from the center of the earth in kilometers.
  /// Example: /// Example: 10.23
  /// Constraints: No constraints specified.
  #[inline]
  pub fn apogee(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(ManifoldElset_Ingest::VT_APOGEE, Some(0.0)).unwrap()}
  }
  /// The orbit point nearest to the center of the earth in kilometers.
  /// Example: /// Example: 10.23
  /// Constraints: No constraints specified.
  #[inline]
  pub fn perigee(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(ManifoldElset_Ingest::VT_PERIGEE, Some(0.0)).unwrap()}
  }
  /// Read only derived/generated line1 of a legacy TLE (two line element set) format, ignored on create/edit operations.
  /// Example: /// Example: No example provided.
  /// Constraints: Minimum length = 0, Maximum length = 69
  #[inline]
  pub fn line1(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(ManifoldElset_Ingest::VT_LINE1, None)}
  }
  /// Read only derived/generated line2 of a legacy TLE (two line element set) format, ignored on create/edit operations.
  /// Example: /// Example: No example provided.
  /// Constraints: Minimum length = 0, Maximum length = 69
  #[inline]
  pub fn line2(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(ManifoldElset_Ingest::VT_LINE2, None)}
  }
  /// Time the row was created in the database, auto-populated by the system.
  /// Example: /// Example: 2018-01-01T16:00:00.123Z
  /// Constraints: No constraints specified.
  #[inline]
  pub fn createdAt(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(ManifoldElset_Ingest::VT_CREATEDAT, None)}
  }
  /// Application user who created the row in the database, auto-populated by the system.
  /// Example: /// Example: some.user
  /// Constraints: Minimum length = 1, Maximum length = 64
  #[inline]
  pub fn createdBy(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(ManifoldElset_Ingest::VT_CREATEDBY, None)}
  }
  /// Source of the data.
  /// Example: /// Example: Bluestaq
  /// Constraints: Minimum length = 1, Maximum length = 64
  #[inline]
  pub fn source(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(ManifoldElset_Ingest::VT_SOURCE, None)}
  }
  /// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
  /// Example: /// Example: THIRD_PARTY_DATASOURCE
  /// Constraints: Minimum length = 0, Maximum length = 64
  #[inline]
  pub fn origin(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(ManifoldElset_Ingest::VT_ORIGIN, None)}
  }
  /// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
  /// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
  /// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
  /// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
  /// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  /// Example: /// Example: TEST
  /// Constraints: Minimum length = 1, Maximum length = 32
  #[inline]
  pub fn dataMode(&self) -> ManifoldElset_Ingest_dataMode_Enum {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<ManifoldElset_Ingest_dataMode_Enum>(ManifoldElset_Ingest::VT_DATAMODE, Some(ManifoldElset_Ingest_dataMode_Enum::REAL)).unwrap()}
  }
  /// The originating source network on which this record was created, auto-populated by the system.
  /// Example: /// Example: ORIG
  /// Constraints: Minimum length = 0, Maximum length = 32
  #[inline]
  pub fn origNetwork(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(ManifoldElset_Ingest::VT_ORIGNETWORK, None)}
  }
}

impl flatbuffers::Verifiable for ManifoldElset_Ingest<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("id", Self::VT_ID, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("idManifold", Self::VT_IDMANIFOLD, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("classificationMarking", Self::VT_CLASSIFICATIONMARKING, false)?
     .visit_field::<i32>("tmpSatNo", Self::VT_TMPSATNO, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("epoch", Self::VT_EPOCH, false)?
     .visit_field::<f64>("meanMotion", Self::VT_MEANMOTION, false)?
     .visit_field::<f64>("eccentricity", Self::VT_ECCENTRICITY, false)?
     .visit_field::<f64>("inclination", Self::VT_INCLINATION, false)?
     .visit_field::<f64>("raan", Self::VT_RAAN, false)?
     .visit_field::<f64>("argOfPerigee", Self::VT_ARGOFPERIGEE, false)?
     .visit_field::<f64>("meanAnomaly", Self::VT_MEANANOMALY, false)?
     .visit_field::<i32>("revNo", Self::VT_REVNO, false)?
     .visit_field::<f64>("bStar", Self::VT_BSTAR, false)?
     .visit_field::<f64>("meanMotionDot", Self::VT_MEANMOTIONDOT, false)?
     .visit_field::<f64>("meanMotionDDot", Self::VT_MEANMOTIONDDOT, false)?
     .visit_field::<f64>("semiMajorAxis", Self::VT_SEMIMAJORAXIS, false)?
     .visit_field::<f64>("period", Self::VT_PERIOD, false)?
     .visit_field::<f64>("apogee", Self::VT_APOGEE, false)?
     .visit_field::<f64>("perigee", Self::VT_PERIGEE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("line1", Self::VT_LINE1, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("line2", Self::VT_LINE2, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("createdAt", Self::VT_CREATEDAT, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("createdBy", Self::VT_CREATEDBY, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("source", Self::VT_SOURCE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("origin", Self::VT_ORIGIN, false)?
     .visit_field::<ManifoldElset_Ingest_dataMode_Enum>("dataMode", Self::VT_DATAMODE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("origNetwork", Self::VT_ORIGNETWORK, false)?
     .finish();
    Ok(())
  }
}
pub struct ManifoldElset_IngestArgs<'a> {
    pub id: Option<flatbuffers::WIPOffset<&'a str>>,
    pub idManifold: Option<flatbuffers::WIPOffset<&'a str>>,
    pub classificationMarking: Option<flatbuffers::WIPOffset<&'a str>>,
    pub tmpSatNo: i32,
    pub epoch: Option<flatbuffers::WIPOffset<&'a str>>,
    pub meanMotion: f64,
    pub eccentricity: f64,
    pub inclination: f64,
    pub raan: f64,
    pub argOfPerigee: f64,
    pub meanAnomaly: f64,
    pub revNo: i32,
    pub bStar: f64,
    pub meanMotionDot: f64,
    pub meanMotionDDot: f64,
    pub semiMajorAxis: f64,
    pub period: f64,
    pub apogee: f64,
    pub perigee: f64,
    pub line1: Option<flatbuffers::WIPOffset<&'a str>>,
    pub line2: Option<flatbuffers::WIPOffset<&'a str>>,
    pub createdAt: Option<flatbuffers::WIPOffset<&'a str>>,
    pub createdBy: Option<flatbuffers::WIPOffset<&'a str>>,
    pub source: Option<flatbuffers::WIPOffset<&'a str>>,
    pub origin: Option<flatbuffers::WIPOffset<&'a str>>,
    pub dataMode: ManifoldElset_Ingest_dataMode_Enum,
    pub origNetwork: Option<flatbuffers::WIPOffset<&'a str>>,
}
impl<'a> Default for ManifoldElset_IngestArgs<'a> {
  #[inline]
  fn default() -> Self {
    ManifoldElset_IngestArgs {
      id: None,
      idManifold: None,
      classificationMarking: None,
      tmpSatNo: 0,
      epoch: None,
      meanMotion: 0.0,
      eccentricity: 0.0,
      inclination: 0.0,
      raan: 0.0,
      argOfPerigee: 0.0,
      meanAnomaly: 0.0,
      revNo: 0,
      bStar: 0.0,
      meanMotionDot: 0.0,
      meanMotionDDot: 0.0,
      semiMajorAxis: 0.0,
      period: 0.0,
      apogee: 0.0,
      perigee: 0.0,
      line1: None,
      line2: None,
      createdAt: None,
      createdBy: None,
      source: None,
      origin: None,
      dataMode: ManifoldElset_Ingest_dataMode_Enum::REAL,
      origNetwork: None,
    }
  }
}

pub struct ManifoldElset_IngestBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> ManifoldElset_IngestBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_id(&mut self, id: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(ManifoldElset_Ingest::VT_ID, id);
  }
  #[inline]
  pub fn add_idManifold(&mut self, idManifold: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(ManifoldElset_Ingest::VT_IDMANIFOLD, idManifold);
  }
  #[inline]
  pub fn add_classificationMarking(&mut self, classificationMarking: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(ManifoldElset_Ingest::VT_CLASSIFICATIONMARKING, classificationMarking);
  }
  #[inline]
  pub fn add_tmpSatNo(&mut self, tmpSatNo: i32) {
    self.fbb_.push_slot::<i32>(ManifoldElset_Ingest::VT_TMPSATNO, tmpSatNo, 0);
  }
  #[inline]
  pub fn add_epoch(&mut self, epoch: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(ManifoldElset_Ingest::VT_EPOCH, epoch);
  }
  #[inline]
  pub fn add_meanMotion(&mut self, meanMotion: f64) {
    self.fbb_.push_slot::<f64>(ManifoldElset_Ingest::VT_MEANMOTION, meanMotion, 0.0);
  }
  #[inline]
  pub fn add_eccentricity(&mut self, eccentricity: f64) {
    self.fbb_.push_slot::<f64>(ManifoldElset_Ingest::VT_ECCENTRICITY, eccentricity, 0.0);
  }
  #[inline]
  pub fn add_inclination(&mut self, inclination: f64) {
    self.fbb_.push_slot::<f64>(ManifoldElset_Ingest::VT_INCLINATION, inclination, 0.0);
  }
  #[inline]
  pub fn add_raan(&mut self, raan: f64) {
    self.fbb_.push_slot::<f64>(ManifoldElset_Ingest::VT_RAAN, raan, 0.0);
  }
  #[inline]
  pub fn add_argOfPerigee(&mut self, argOfPerigee: f64) {
    self.fbb_.push_slot::<f64>(ManifoldElset_Ingest::VT_ARGOFPERIGEE, argOfPerigee, 0.0);
  }
  #[inline]
  pub fn add_meanAnomaly(&mut self, meanAnomaly: f64) {
    self.fbb_.push_slot::<f64>(ManifoldElset_Ingest::VT_MEANANOMALY, meanAnomaly, 0.0);
  }
  #[inline]
  pub fn add_revNo(&mut self, revNo: i32) {
    self.fbb_.push_slot::<i32>(ManifoldElset_Ingest::VT_REVNO, revNo, 0);
  }
  #[inline]
  pub fn add_bStar(&mut self, bStar: f64) {
    self.fbb_.push_slot::<f64>(ManifoldElset_Ingest::VT_BSTAR, bStar, 0.0);
  }
  #[inline]
  pub fn add_meanMotionDot(&mut self, meanMotionDot: f64) {
    self.fbb_.push_slot::<f64>(ManifoldElset_Ingest::VT_MEANMOTIONDOT, meanMotionDot, 0.0);
  }
  #[inline]
  pub fn add_meanMotionDDot(&mut self, meanMotionDDot: f64) {
    self.fbb_.push_slot::<f64>(ManifoldElset_Ingest::VT_MEANMOTIONDDOT, meanMotionDDot, 0.0);
  }
  #[inline]
  pub fn add_semiMajorAxis(&mut self, semiMajorAxis: f64) {
    self.fbb_.push_slot::<f64>(ManifoldElset_Ingest::VT_SEMIMAJORAXIS, semiMajorAxis, 0.0);
  }
  #[inline]
  pub fn add_period(&mut self, period: f64) {
    self.fbb_.push_slot::<f64>(ManifoldElset_Ingest::VT_PERIOD, period, 0.0);
  }
  #[inline]
  pub fn add_apogee(&mut self, apogee: f64) {
    self.fbb_.push_slot::<f64>(ManifoldElset_Ingest::VT_APOGEE, apogee, 0.0);
  }
  #[inline]
  pub fn add_perigee(&mut self, perigee: f64) {
    self.fbb_.push_slot::<f64>(ManifoldElset_Ingest::VT_PERIGEE, perigee, 0.0);
  }
  #[inline]
  pub fn add_line1(&mut self, line1: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(ManifoldElset_Ingest::VT_LINE1, line1);
  }
  #[inline]
  pub fn add_line2(&mut self, line2: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(ManifoldElset_Ingest::VT_LINE2, line2);
  }
  #[inline]
  pub fn add_createdAt(&mut self, createdAt: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(ManifoldElset_Ingest::VT_CREATEDAT, createdAt);
  }
  #[inline]
  pub fn add_createdBy(&mut self, createdBy: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(ManifoldElset_Ingest::VT_CREATEDBY, createdBy);
  }
  #[inline]
  pub fn add_source(&mut self, source: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(ManifoldElset_Ingest::VT_SOURCE, source);
  }
  #[inline]
  pub fn add_origin(&mut self, origin: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(ManifoldElset_Ingest::VT_ORIGIN, origin);
  }
  #[inline]
  pub fn add_dataMode(&mut self, dataMode: ManifoldElset_Ingest_dataMode_Enum) {
    self.fbb_.push_slot::<ManifoldElset_Ingest_dataMode_Enum>(ManifoldElset_Ingest::VT_DATAMODE, dataMode, ManifoldElset_Ingest_dataMode_Enum::REAL);
  }
  #[inline]
  pub fn add_origNetwork(&mut self, origNetwork: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(ManifoldElset_Ingest::VT_ORIGNETWORK, origNetwork);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> ManifoldElset_IngestBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    ManifoldElset_IngestBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<ManifoldElset_Ingest<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for ManifoldElset_Ingest<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("ManifoldElset_Ingest");
      ds.field("id", &self.id());
      ds.field("idManifold", &self.idManifold());
      ds.field("classificationMarking", &self.classificationMarking());
      ds.field("tmpSatNo", &self.tmpSatNo());
      ds.field("epoch", &self.epoch());
      ds.field("meanMotion", &self.meanMotion());
      ds.field("eccentricity", &self.eccentricity());
      ds.field("inclination", &self.inclination());
      ds.field("raan", &self.raan());
      ds.field("argOfPerigee", &self.argOfPerigee());
      ds.field("meanAnomaly", &self.meanAnomaly());
      ds.field("revNo", &self.revNo());
      ds.field("bStar", &self.bStar());
      ds.field("meanMotionDot", &self.meanMotionDot());
      ds.field("meanMotionDDot", &self.meanMotionDDot());
      ds.field("semiMajorAxis", &self.semiMajorAxis());
      ds.field("period", &self.period());
      ds.field("apogee", &self.apogee());
      ds.field("perigee", &self.perigee());
      ds.field("line1", &self.line1());
      ds.field("line2", &self.line2());
      ds.field("createdAt", &self.createdAt());
      ds.field("createdBy", &self.createdBy());
      ds.field("source", &self.source());
      ds.field("origin", &self.origin());
      ds.field("dataMode", &self.dataMode());
      ds.field("origNetwork", &self.origNetwork());
      ds.finish()
  }
}
#[non_exhaustive]
#[derive(Debug, Clone, PartialEq)]
pub struct ManifoldElset_IngestT {
  pub id: Option<String>,
  pub idManifold: Option<String>,
  pub classificationMarking: Option<String>,
  pub tmpSatNo: i32,
  pub epoch: Option<String>,
  pub meanMotion: f64,
  pub eccentricity: f64,
  pub inclination: f64,
  pub raan: f64,
  pub argOfPerigee: f64,
  pub meanAnomaly: f64,
  pub revNo: i32,
  pub bStar: f64,
  pub meanMotionDot: f64,
  pub meanMotionDDot: f64,
  pub semiMajorAxis: f64,
  pub period: f64,
  pub apogee: f64,
  pub perigee: f64,
  pub line1: Option<String>,
  pub line2: Option<String>,
  pub createdAt: Option<String>,
  pub createdBy: Option<String>,
  pub source: Option<String>,
  pub origin: Option<String>,
  pub dataMode: ManifoldElset_Ingest_dataMode_Enum,
  pub origNetwork: Option<String>,
}
impl Default for ManifoldElset_IngestT {
  fn default() -> Self {
    Self {
      id: None,
      idManifold: None,
      classificationMarking: None,
      tmpSatNo: 0,
      epoch: None,
      meanMotion: 0.0,
      eccentricity: 0.0,
      inclination: 0.0,
      raan: 0.0,
      argOfPerigee: 0.0,
      meanAnomaly: 0.0,
      revNo: 0,
      bStar: 0.0,
      meanMotionDot: 0.0,
      meanMotionDDot: 0.0,
      semiMajorAxis: 0.0,
      period: 0.0,
      apogee: 0.0,
      perigee: 0.0,
      line1: None,
      line2: None,
      createdAt: None,
      createdBy: None,
      source: None,
      origin: None,
      dataMode: ManifoldElset_Ingest_dataMode_Enum::REAL,
      origNetwork: None,
    }
  }
}
impl ManifoldElset_IngestT {
  pub fn pack<'b, A: flatbuffers::Allocator + 'b>(
    &self,
    _fbb: &mut flatbuffers::FlatBufferBuilder<'b, A>
  ) -> flatbuffers::WIPOffset<ManifoldElset_Ingest<'b>> {
    let id = self.id.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let idManifold = self.idManifold.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let classificationMarking = self.classificationMarking.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let tmpSatNo = self.tmpSatNo;
    let epoch = self.epoch.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let meanMotion = self.meanMotion;
    let eccentricity = self.eccentricity;
    let inclination = self.inclination;
    let raan = self.raan;
    let argOfPerigee = self.argOfPerigee;
    let meanAnomaly = self.meanAnomaly;
    let revNo = self.revNo;
    let bStar = self.bStar;
    let meanMotionDot = self.meanMotionDot;
    let meanMotionDDot = self.meanMotionDDot;
    let semiMajorAxis = self.semiMajorAxis;
    let period = self.period;
    let apogee = self.apogee;
    let perigee = self.perigee;
    let line1 = self.line1.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let line2 = self.line2.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let createdAt = self.createdAt.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let createdBy = self.createdBy.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let source = self.source.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let origin = self.origin.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let dataMode = self.dataMode;
    let origNetwork = self.origNetwork.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    ManifoldElset_Ingest::create(_fbb, &ManifoldElset_IngestArgs{
      id,
      idManifold,
      classificationMarking,
      tmpSatNo,
      epoch,
      meanMotion,
      eccentricity,
      inclination,
      raan,
      argOfPerigee,
      meanAnomaly,
      revNo,
      bStar,
      meanMotionDot,
      meanMotionDDot,
      semiMajorAxis,
      period,
      apogee,
      perigee,
      line1,
      line2,
      createdAt,
      createdBy,
      source,
      origin,
      dataMode,
      origNetwork,
    })
  }
}
#[inline]
/// Verifies that a buffer of bytes contains a `ManifoldElset_Ingest`
/// and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_manifold_elset_ingest_unchecked`.
pub fn root_as_manifold_elset_ingest(buf: &[u8]) -> Result<ManifoldElset_Ingest, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root::<ManifoldElset_Ingest>(buf)
}
#[inline]
/// Verifies that a buffer of bytes contains a size prefixed
/// `ManifoldElset_Ingest` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `size_prefixed_root_as_manifold_elset_ingest_unchecked`.
pub fn size_prefixed_root_as_manifold_elset_ingest(buf: &[u8]) -> Result<ManifoldElset_Ingest, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root::<ManifoldElset_Ingest>(buf)
}
#[inline]
/// Verifies, with the given options, that a buffer of bytes
/// contains a `ManifoldElset_Ingest` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_manifold_elset_ingest_unchecked`.
pub fn root_as_manifold_elset_ingest_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<ManifoldElset_Ingest<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root_with_opts::<ManifoldElset_Ingest<'b>>(opts, buf)
}
#[inline]
/// Verifies, with the given verifier options, that a buffer of
/// bytes contains a size prefixed `ManifoldElset_Ingest` and returns
/// it. Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_manifold_elset_ingest_unchecked`.
pub fn size_prefixed_root_as_manifold_elset_ingest_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<ManifoldElset_Ingest<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root_with_opts::<ManifoldElset_Ingest<'b>>(opts, buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a ManifoldElset_Ingest and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid `ManifoldElset_Ingest`.
pub unsafe fn root_as_manifold_elset_ingest_unchecked(buf: &[u8]) -> ManifoldElset_Ingest {
  flatbuffers::root_unchecked::<ManifoldElset_Ingest>(buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a size prefixed ManifoldElset_Ingest and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid size prefixed `ManifoldElset_Ingest`.
pub unsafe fn size_prefixed_root_as_manifold_elset_ingest_unchecked(buf: &[u8]) -> ManifoldElset_Ingest {
  flatbuffers::size_prefixed_root_unchecked::<ManifoldElset_Ingest>(buf)
}
pub const MANIFOLD_ELSET_INGEST_IDENTIFIER: &str = "MANI";

#[inline]
pub fn manifold_elset_ingest_buffer_has_identifier(buf: &[u8]) -> bool {
  flatbuffers::buffer_has_identifier(buf, MANIFOLD_ELSET_INGEST_IDENTIFIER, false)
}

#[inline]
pub fn manifold_elset_ingest_size_prefixed_buffer_has_identifier(buf: &[u8]) -> bool {
  flatbuffers::buffer_has_identifier(buf, MANIFOLD_ELSET_INGEST_IDENTIFIER, true)
}

#[inline]
pub fn finish_manifold_elset_ingest_buffer<'a, 'b, A: flatbuffers::Allocator + 'a>(
    fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
    root: flatbuffers::WIPOffset<ManifoldElset_Ingest<'a>>) {
  fbb.finish(root, Some(MANIFOLD_ELSET_INGEST_IDENTIFIER));
}

#[inline]
pub fn finish_size_prefixed_manifold_elset_ingest_buffer<'a, 'b, A: flatbuffers::Allocator + 'a>(fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>, root: flatbuffers::WIPOffset<ManifoldElset_Ingest<'a>>) {
  fbb.finish_size_prefixed(root, Some(MANIFOLD_ELSET_INGEST_IDENTIFIER));
}
