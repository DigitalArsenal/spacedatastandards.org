// automatically generated by the FlatBuffers compiler, do not modify


// @generated

use core::mem;
use core::cmp::Ordering;

extern crate flatbuffers;
use self::flatbuffers::{EndianScalar, Follow};

pub enum AltitudeBlocks_IngestOffset {}
#[derive(Copy, Clone, PartialEq)]

/// /// Minimum and maximum altitude bounds for the track.
pub struct AltitudeBlocks_Ingest<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for AltitudeBlocks_Ingest<'a> {
  type Inner = AltitudeBlocks_Ingest<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> AltitudeBlocks_Ingest<'a> {
  pub const VT_ALTITUDESEQUENCEID: flatbuffers::VOffsetT = 4;
  pub const VT_LOWERALTITUDE: flatbuffers::VOffsetT = 6;
  pub const VT_UPPERALTITUDE: flatbuffers::VOffsetT = 8;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    AltitudeBlocks_Ingest { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args AltitudeBlocks_IngestArgs<'args>
  ) -> flatbuffers::WIPOffset<AltitudeBlocks_Ingest<'bldr>> {
    let mut builder = AltitudeBlocks_IngestBuilder::new(_fbb);
    builder.add_upperAltitude(args.upperAltitude);
    builder.add_lowerAltitude(args.lowerAltitude);
    if let Some(x) = args.altitudeSequenceId { builder.add_altitudeSequenceId(x); }
    builder.finish()
  }

  pub fn unpack(&self) -> AltitudeBlocks_IngestT {
    let altitudeSequenceId = self.altitudeSequenceId().map(|x| {
      x.to_string()
    });
    let lowerAltitude = self.lowerAltitude();
    let upperAltitude = self.upperAltitude();
    AltitudeBlocks_IngestT {
      altitudeSequenceId,
      lowerAltitude,
      upperAltitude,
    }
  }

  /// Sequencing field for the altitude block.
  /// Example: /// Example: A1
  /// Constraints: Minimum length = 0, Maximum length = 24
  #[inline]
  pub fn altitudeSequenceId(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(AltitudeBlocks_Ingest::VT_ALTITUDESEQUENCEID, None)}
  }
  /// Lowest altitude of the track route altitude block above mean sea level in feet.
  /// Example: /// Example: 27000.1
  /// Constraints: No constraints specified.
  #[inline]
  pub fn lowerAltitude(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(AltitudeBlocks_Ingest::VT_LOWERALTITUDE, Some(0.0)).unwrap()}
  }
  /// Highest altitude of the track route altitude block above mean sea level in feet.
  /// Example: /// Example: 27200.5
  /// Constraints: No constraints specified.
  #[inline]
  pub fn upperAltitude(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(AltitudeBlocks_Ingest::VT_UPPERALTITUDE, Some(0.0)).unwrap()}
  }
}

impl flatbuffers::Verifiable for AltitudeBlocks_Ingest<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("altitudeSequenceId", Self::VT_ALTITUDESEQUENCEID, false)?
     .visit_field::<f64>("lowerAltitude", Self::VT_LOWERALTITUDE, false)?
     .visit_field::<f64>("upperAltitude", Self::VT_UPPERALTITUDE, false)?
     .finish();
    Ok(())
  }
}
pub struct AltitudeBlocks_IngestArgs<'a> {
    pub altitudeSequenceId: Option<flatbuffers::WIPOffset<&'a str>>,
    pub lowerAltitude: f64,
    pub upperAltitude: f64,
}
impl<'a> Default for AltitudeBlocks_IngestArgs<'a> {
  #[inline]
  fn default() -> Self {
    AltitudeBlocks_IngestArgs {
      altitudeSequenceId: None,
      lowerAltitude: 0.0,
      upperAltitude: 0.0,
    }
  }
}

pub struct AltitudeBlocks_IngestBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> AltitudeBlocks_IngestBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_altitudeSequenceId(&mut self, altitudeSequenceId: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(AltitudeBlocks_Ingest::VT_ALTITUDESEQUENCEID, altitudeSequenceId);
  }
  #[inline]
  pub fn add_lowerAltitude(&mut self, lowerAltitude: f64) {
    self.fbb_.push_slot::<f64>(AltitudeBlocks_Ingest::VT_LOWERALTITUDE, lowerAltitude, 0.0);
  }
  #[inline]
  pub fn add_upperAltitude(&mut self, upperAltitude: f64) {
    self.fbb_.push_slot::<f64>(AltitudeBlocks_Ingest::VT_UPPERALTITUDE, upperAltitude, 0.0);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> AltitudeBlocks_IngestBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    AltitudeBlocks_IngestBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<AltitudeBlocks_Ingest<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for AltitudeBlocks_Ingest<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("AltitudeBlocks_Ingest");
      ds.field("altitudeSequenceId", &self.altitudeSequenceId());
      ds.field("lowerAltitude", &self.lowerAltitude());
      ds.field("upperAltitude", &self.upperAltitude());
      ds.finish()
  }
}
#[non_exhaustive]
#[derive(Debug, Clone, PartialEq)]
pub struct AltitudeBlocks_IngestT {
  pub altitudeSequenceId: Option<String>,
  pub lowerAltitude: f64,
  pub upperAltitude: f64,
}
impl Default for AltitudeBlocks_IngestT {
  fn default() -> Self {
    Self {
      altitudeSequenceId: None,
      lowerAltitude: 0.0,
      upperAltitude: 0.0,
    }
  }
}
impl AltitudeBlocks_IngestT {
  pub fn pack<'b, A: flatbuffers::Allocator + 'b>(
    &self,
    _fbb: &mut flatbuffers::FlatBufferBuilder<'b, A>
  ) -> flatbuffers::WIPOffset<AltitudeBlocks_Ingest<'b>> {
    let altitudeSequenceId = self.altitudeSequenceId.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let lowerAltitude = self.lowerAltitude;
    let upperAltitude = self.upperAltitude;
    AltitudeBlocks_Ingest::create(_fbb, &AltitudeBlocks_IngestArgs{
      altitudeSequenceId,
      lowerAltitude,
      upperAltitude,
    })
  }
}
#[inline]
/// Verifies that a buffer of bytes contains a `AltitudeBlocks_Ingest`
/// and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_altitude_blocks_ingest_unchecked`.
pub fn root_as_altitude_blocks_ingest(buf: &[u8]) -> Result<AltitudeBlocks_Ingest, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root::<AltitudeBlocks_Ingest>(buf)
}
#[inline]
/// Verifies that a buffer of bytes contains a size prefixed
/// `AltitudeBlocks_Ingest` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `size_prefixed_root_as_altitude_blocks_ingest_unchecked`.
pub fn size_prefixed_root_as_altitude_blocks_ingest(buf: &[u8]) -> Result<AltitudeBlocks_Ingest, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root::<AltitudeBlocks_Ingest>(buf)
}
#[inline]
/// Verifies, with the given options, that a buffer of bytes
/// contains a `AltitudeBlocks_Ingest` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_altitude_blocks_ingest_unchecked`.
pub fn root_as_altitude_blocks_ingest_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<AltitudeBlocks_Ingest<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root_with_opts::<AltitudeBlocks_Ingest<'b>>(opts, buf)
}
#[inline]
/// Verifies, with the given verifier options, that a buffer of
/// bytes contains a size prefixed `AltitudeBlocks_Ingest` and returns
/// it. Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_altitude_blocks_ingest_unchecked`.
pub fn size_prefixed_root_as_altitude_blocks_ingest_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<AltitudeBlocks_Ingest<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root_with_opts::<AltitudeBlocks_Ingest<'b>>(opts, buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a AltitudeBlocks_Ingest and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid `AltitudeBlocks_Ingest`.
pub unsafe fn root_as_altitude_blocks_ingest_unchecked(buf: &[u8]) -> AltitudeBlocks_Ingest {
  flatbuffers::root_unchecked::<AltitudeBlocks_Ingest>(buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a size prefixed AltitudeBlocks_Ingest and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid size prefixed `AltitudeBlocks_Ingest`.
pub unsafe fn size_prefixed_root_as_altitude_blocks_ingest_unchecked(buf: &[u8]) -> AltitudeBlocks_Ingest {
  flatbuffers::size_prefixed_root_unchecked::<AltitudeBlocks_Ingest>(buf)
}
pub const ALTITUDE_BLOCKS_INGEST_IDENTIFIER: &str = "ALTI";

#[inline]
pub fn altitude_blocks_ingest_buffer_has_identifier(buf: &[u8]) -> bool {
  flatbuffers::buffer_has_identifier(buf, ALTITUDE_BLOCKS_INGEST_IDENTIFIER, false)
}

#[inline]
pub fn altitude_blocks_ingest_size_prefixed_buffer_has_identifier(buf: &[u8]) -> bool {
  flatbuffers::buffer_has_identifier(buf, ALTITUDE_BLOCKS_INGEST_IDENTIFIER, true)
}

#[inline]
pub fn finish_altitude_blocks_ingest_buffer<'a, 'b, A: flatbuffers::Allocator + 'a>(
    fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
    root: flatbuffers::WIPOffset<AltitudeBlocks_Ingest<'a>>) {
  fbb.finish(root, Some(ALTITUDE_BLOCKS_INGEST_IDENTIFIER));
}

#[inline]
pub fn finish_size_prefixed_altitude_blocks_ingest_buffer<'a, 'b, A: flatbuffers::Allocator + 'a>(fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>, root: flatbuffers::WIPOffset<AltitudeBlocks_Ingest<'a>>) {
  fbb.finish_size_prefixed(root, Some(ALTITUDE_BLOCKS_INGEST_IDENTIFIER));
}
