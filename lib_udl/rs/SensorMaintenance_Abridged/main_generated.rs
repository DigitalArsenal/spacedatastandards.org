// automatically generated by the FlatBuffers compiler, do not modify


// @generated

use core::mem;
use core::cmp::Ordering;

extern crate flatbuffers;
use self::flatbuffers::{EndianScalar, Follow};

#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
pub const ENUM_MIN_SENSOR_MAINTENANCE_ABRIDGED_DATA_MODE_ENUM: i8 = 0;
#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
pub const ENUM_MAX_SENSOR_MAINTENANCE_ABRIDGED_DATA_MODE_ENUM: i8 = 3;
#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
#[allow(non_camel_case_types)]
pub const ENUM_VALUES_SENSOR_MAINTENANCE_ABRIDGED_DATA_MODE_ENUM: [SensorMaintenance_Abridged_dataMode_Enum; 4] = [
  SensorMaintenance_Abridged_dataMode_Enum::REAL,
  SensorMaintenance_Abridged_dataMode_Enum::TEST,
  SensorMaintenance_Abridged_dataMode_Enum::SIMULATED,
  SensorMaintenance_Abridged_dataMode_Enum::EXERCISE,
];

#[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, Default)]
#[repr(transparent)]
pub struct SensorMaintenance_Abridged_dataMode_Enum(pub i8);
#[allow(non_upper_case_globals)]
impl SensorMaintenance_Abridged_dataMode_Enum {
  /// Data collected or produced that pertains to real-world objects, events, and analysis.
  pub const REAL: Self = Self(0);
  /// Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  pub const TEST: Self = Self(1);
  /// Synthetic data generated by a model to mimic real-world datasets.
  pub const SIMULATED: Self = Self(2);
  /// Data pertaining to a government or military exercise. The data may include both real and simulated data.
  pub const EXERCISE: Self = Self(3);

  pub const ENUM_MIN: i8 = 0;
  pub const ENUM_MAX: i8 = 3;
  pub const ENUM_VALUES: &'static [Self] = &[
    Self::REAL,
    Self::TEST,
    Self::SIMULATED,
    Self::EXERCISE,
  ];
  /// Returns the variant's name or "" if unknown.
  pub fn variant_name(self) -> Option<&'static str> {
    match self {
      Self::REAL => Some("REAL"),
      Self::TEST => Some("TEST"),
      Self::SIMULATED => Some("SIMULATED"),
      Self::EXERCISE => Some("EXERCISE"),
      _ => None,
    }
  }
}
impl core::fmt::Debug for SensorMaintenance_Abridged_dataMode_Enum {
  fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
    if let Some(name) = self.variant_name() {
      f.write_str(name)
    } else {
      f.write_fmt(format_args!("<UNKNOWN {:?}>", self.0))
    }
  }
}
impl<'a> flatbuffers::Follow<'a> for SensorMaintenance_Abridged_dataMode_Enum {
  type Inner = Self;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    let b = flatbuffers::read_scalar_at::<i8>(buf, loc);
    Self(b)
  }
}

impl flatbuffers::Push for SensorMaintenance_Abridged_dataMode_Enum {
    type Output = SensorMaintenance_Abridged_dataMode_Enum;
    #[inline]
    unsafe fn push(&self, dst: &mut [u8], _written_len: usize) {
        flatbuffers::emplace_scalar::<i8>(dst, self.0);
    }
}

impl flatbuffers::EndianScalar for SensorMaintenance_Abridged_dataMode_Enum {
  type Scalar = i8;
  #[inline]
  fn to_little_endian(self) -> i8 {
    self.0.to_le()
  }
  #[inline]
  #[allow(clippy::wrong_self_convention)]
  fn from_little_endian(v: i8) -> Self {
    let b = i8::from_le(v);
    Self(b)
  }
}

impl<'a> flatbuffers::Verifiable for SensorMaintenance_Abridged_dataMode_Enum {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    i8::run_verifier(v, pos)
  }
}

impl flatbuffers::SimpleToVerifyInSlice for SensorMaintenance_Abridged_dataMode_Enum {}
pub enum SensorMaintenance_AbridgedOffset {}
#[derive(Copy, Clone, PartialEq)]

/// /// Maintenance schedule and operational status of Sensor.
pub struct SensorMaintenance_Abridged<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for SensorMaintenance_Abridged<'a> {
  type Inner = SensorMaintenance_Abridged<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> SensorMaintenance_Abridged<'a> {
  pub const VT_ID: flatbuffers::VOffsetT = 4;
  pub const VT_CLASSIFICATIONMARKING: flatbuffers::VOffsetT = 6;
  pub const VT_SITECODE: flatbuffers::VOffsetT = 8;
  pub const VT_IDSENSOR: flatbuffers::VOffsetT = 10;
  pub const VT_STARTTIME: flatbuffers::VOffsetT = 12;
  pub const VT_ENDTIME: flatbuffers::VOffsetT = 14;
  pub const VT_RECALL: flatbuffers::VOffsetT = 16;
  pub const VT_DURATION: flatbuffers::VOffsetT = 18;
  pub const VT_MWOPSCAP: flatbuffers::VOffsetT = 20;
  pub const VT_SSOPSCAP: flatbuffers::VOffsetT = 22;
  pub const VT_MDOPSCAP: flatbuffers::VOffsetT = 24;
  pub const VT_IMPACTEDFACES: flatbuffers::VOffsetT = 26;
  pub const VT_EQUIPSTATUS: flatbuffers::VOffsetT = 28;
  pub const VT_ACTIVITY: flatbuffers::VOffsetT = 30;
  pub const VT_REMARK: flatbuffers::VOffsetT = 32;
  pub const VT_REQUESTOR: flatbuffers::VOffsetT = 34;
  pub const VT_CHANGER: flatbuffers::VOffsetT = 36;
  pub const VT_APPROVER: flatbuffers::VOffsetT = 38;
  pub const VT_EOWID: flatbuffers::VOffsetT = 40;
  pub const VT_REV: flatbuffers::VOffsetT = 42;
  pub const VT_PRIORITY: flatbuffers::VOffsetT = 44;
  pub const VT_REL: flatbuffers::VOffsetT = 46;
  pub const VT_LINENUMBER: flatbuffers::VOffsetT = 48;
  pub const VT_RESOURCE: flatbuffers::VOffsetT = 50;
  pub const VT_INACTIVEDATE: flatbuffers::VOffsetT = 52;
  pub const VT_CREATEDAT: flatbuffers::VOffsetT = 54;
  pub const VT_CREATEDBY: flatbuffers::VOffsetT = 56;
  pub const VT_SOURCE: flatbuffers::VOffsetT = 58;
  pub const VT_ORIGIN: flatbuffers::VOffsetT = 60;
  pub const VT_DATAMODE: flatbuffers::VOffsetT = 62;
  pub const VT_ORIGNETWORK: flatbuffers::VOffsetT = 64;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    SensorMaintenance_Abridged { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args SensorMaintenance_AbridgedArgs<'args>
  ) -> flatbuffers::WIPOffset<SensorMaintenance_Abridged<'bldr>> {
    let mut builder = SensorMaintenance_AbridgedBuilder::new(_fbb);
    if let Some(x) = args.origNetwork { builder.add_origNetwork(x); }
    if let Some(x) = args.origin { builder.add_origin(x); }
    if let Some(x) = args.source { builder.add_source(x); }
    if let Some(x) = args.createdBy { builder.add_createdBy(x); }
    if let Some(x) = args.createdAt { builder.add_createdAt(x); }
    if let Some(x) = args.inactiveDate { builder.add_inactiveDate(x); }
    if let Some(x) = args.resource { builder.add_resource(x); }
    if let Some(x) = args.lineNumber { builder.add_lineNumber(x); }
    if let Some(x) = args.rel { builder.add_rel(x); }
    if let Some(x) = args.priority { builder.add_priority(x); }
    if let Some(x) = args.rev { builder.add_rev(x); }
    if let Some(x) = args.eowId { builder.add_eowId(x); }
    if let Some(x) = args.approver { builder.add_approver(x); }
    if let Some(x) = args.changer { builder.add_changer(x); }
    if let Some(x) = args.requestor { builder.add_requestor(x); }
    if let Some(x) = args.remark { builder.add_remark(x); }
    if let Some(x) = args.activity { builder.add_activity(x); }
    if let Some(x) = args.equipStatus { builder.add_equipStatus(x); }
    if let Some(x) = args.impactedFaces { builder.add_impactedFaces(x); }
    if let Some(x) = args.mdOpsCap { builder.add_mdOpsCap(x); }
    if let Some(x) = args.ssOpsCap { builder.add_ssOpsCap(x); }
    if let Some(x) = args.mwOpsCap { builder.add_mwOpsCap(x); }
    if let Some(x) = args.duration { builder.add_duration(x); }
    if let Some(x) = args.recall { builder.add_recall(x); }
    if let Some(x) = args.endTime { builder.add_endTime(x); }
    if let Some(x) = args.startTime { builder.add_startTime(x); }
    if let Some(x) = args.idSensor { builder.add_idSensor(x); }
    if let Some(x) = args.siteCode { builder.add_siteCode(x); }
    if let Some(x) = args.classificationMarking { builder.add_classificationMarking(x); }
    if let Some(x) = args.id { builder.add_id(x); }
    builder.add_dataMode(args.dataMode);
    builder.finish()
  }

  pub fn unpack(&self) -> SensorMaintenance_AbridgedT {
    let id = self.id().map(|x| {
      x.to_string()
    });
    let classificationMarking = self.classificationMarking().map(|x| {
      x.to_string()
    });
    let siteCode = self.siteCode().map(|x| {
      x.to_string()
    });
    let idSensor = self.idSensor().map(|x| {
      x.to_string()
    });
    let startTime = self.startTime().map(|x| {
      x.to_string()
    });
    let endTime = self.endTime().map(|x| {
      x.to_string()
    });
    let recall = self.recall().map(|x| {
      x.to_string()
    });
    let duration = self.duration().map(|x| {
      x.to_string()
    });
    let mwOpsCap = self.mwOpsCap().map(|x| {
      x.to_string()
    });
    let ssOpsCap = self.ssOpsCap().map(|x| {
      x.to_string()
    });
    let mdOpsCap = self.mdOpsCap().map(|x| {
      x.to_string()
    });
    let impactedFaces = self.impactedFaces().map(|x| {
      x.to_string()
    });
    let equipStatus = self.equipStatus().map(|x| {
      x.to_string()
    });
    let activity = self.activity().map(|x| {
      x.to_string()
    });
    let remark = self.remark().map(|x| {
      x.to_string()
    });
    let requestor = self.requestor().map(|x| {
      x.to_string()
    });
    let changer = self.changer().map(|x| {
      x.to_string()
    });
    let approver = self.approver().map(|x| {
      x.to_string()
    });
    let eowId = self.eowId().map(|x| {
      x.to_string()
    });
    let rev = self.rev().map(|x| {
      x.to_string()
    });
    let priority = self.priority().map(|x| {
      x.to_string()
    });
    let rel = self.rel().map(|x| {
      x.to_string()
    });
    let lineNumber = self.lineNumber().map(|x| {
      x.to_string()
    });
    let resource = self.resource().map(|x| {
      x.to_string()
    });
    let inactiveDate = self.inactiveDate().map(|x| {
      x.to_string()
    });
    let createdAt = self.createdAt().map(|x| {
      x.to_string()
    });
    let createdBy = self.createdBy().map(|x| {
      x.to_string()
    });
    let source = self.source().map(|x| {
      x.to_string()
    });
    let origin = self.origin().map(|x| {
      x.to_string()
    });
    let dataMode = self.dataMode();
    let origNetwork = self.origNetwork().map(|x| {
      x.to_string()
    });
    SensorMaintenance_AbridgedT {
      id,
      classificationMarking,
      siteCode,
      idSensor,
      startTime,
      endTime,
      recall,
      duration,
      mwOpsCap,
      ssOpsCap,
      mdOpsCap,
      impactedFaces,
      equipStatus,
      activity,
      remark,
      requestor,
      changer,
      approver,
      eowId,
      rev,
      priority,
      rel,
      lineNumber,
      resource,
      inactiveDate,
      createdAt,
      createdBy,
      source,
      origin,
      dataMode,
      origNetwork,
    }
  }

  /// Unique identifier of the record, auto-generated by the system.
  /// Example: /// Example: SENSORMAINTENANCE-ID
  /// Constraints: Minimum length = 1, Maximum length = 36
  #[inline]
  pub fn id(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(SensorMaintenance_Abridged::VT_ID, None)}
  }
  /// Classification marking of the data in IC/CAPCO Portion-marked format.
  /// Example: /// Example: U
  /// Constraints: Minimum length = 1, Maximum length = 128
  #[inline]
  pub fn classificationMarking(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(SensorMaintenance_Abridged::VT_CLASSIFICATIONMARKING, None)}
  }
  /// The site to which this item applies.  NOTE - this site code is COLT specific and may not identically correspond to other UDL site IDs.
  /// Example: /// Example: site01
  /// Constraints: Minimum length = 1, Maximum length = 6
  #[inline]
  pub fn siteCode(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(SensorMaintenance_Abridged::VT_SITECODE, None)}
  }
  /// UUID of the sensor.
  /// Example: /// Example: idSensor
  /// Constraints: Minimum length = 0, Maximum length = 36
  #[inline]
  pub fn idSensor(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(SensorMaintenance_Abridged::VT_IDSENSOR, None)}
  }
  /// The planned outage start time in ISO8601 UTC format.
  /// Example: /// Example: 2018-01-01T16:00:00.123456Z
  /// Constraints: No constraints specified.
  #[inline]
  pub fn startTime(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(SensorMaintenance_Abridged::VT_STARTTIME, None)}
  }
  /// The planned outage end time in ISO8601 UTC format.
  /// Example: /// Example: 2018-01-01T16:00:00.123456Z
  /// Constraints: No constraints specified.
  #[inline]
  pub fn endTime(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(SensorMaintenance_Abridged::VT_ENDTIME, None)}
  }
  /// The minimum time required to recall this activity, expressed as ddd:hh:mm.
  /// Example: /// Example: 128:16:52
  /// Constraints: Minimum length = 0, Maximum length = 20
  #[inline]
  pub fn recall(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(SensorMaintenance_Abridged::VT_RECALL, None)}
  }
  /// The duration of the planned outage, expressed as ddd:hh:mm.
  /// Example: /// Example: 128:16:52
  /// Constraints: Minimum length = 0, Maximum length = 20
  #[inline]
  pub fn duration(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(SensorMaintenance_Abridged::VT_DURATION, None)}
  }
  /// The Missile Warning operational capability of this maintenance item.  Typical values are G, Y, R, and - for non-applicable sites.
  /// Example: /// Example: G
  /// Constraints: Minimum length = 0, Maximum length = 3
  #[inline]
  pub fn mwOpsCap(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(SensorMaintenance_Abridged::VT_MWOPSCAP, None)}
  }
  /// The Space Surveillance operational capability of this maintenance item.  Typical values are G, Y, R, and - for non-applicable sites.
  /// Example: /// Example: Y
  /// Constraints: Minimum length = 0, Maximum length = 3
  #[inline]
  pub fn ssOpsCap(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(SensorMaintenance_Abridged::VT_SSOPSCAP, None)}
  }
  /// The Missile Defense operational capability of this maintenance item.  Typical values are G, Y, R, and - for non-applicable sites.
  /// Example: /// Example: R
  /// Constraints: Minimum length = 0, Maximum length = 3
  #[inline]
  pub fn mdOpsCap(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(SensorMaintenance_Abridged::VT_MDOPSCAP, None)}
  }
  /// The sensor face(s) to which this COLT maintenance item applies, if applicable.
  /// Example: /// Example: impactedFaces
  /// Constraints: Minimum length = 0, Maximum length = 50
  #[inline]
  pub fn impactedFaces(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(SensorMaintenance_Abridged::VT_IMPACTEDFACES, None)}
  }
  /// The mission capability status of the equipment (e.g. FMC, NMC, PMC, UNK, etc.).
  /// Example: /// Example: FMC
  /// Constraints: Minimum length = 0, Maximum length = 20
  #[inline]
  pub fn equipStatus(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(SensorMaintenance_Abridged::VT_EQUIPSTATUS, None)}
  }
  /// Description of the activity taking place during this outage.
  /// Example: /// Example: Activity Description
  /// Constraints: No constraints specified.
  #[inline]
  pub fn activity(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(SensorMaintenance_Abridged::VT_ACTIVITY, None)}
  }
  /// Remarks concerning this outage.
  /// Example: /// Example: Remarks
  /// Constraints: No constraints specified.
  #[inline]
  pub fn remark(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(SensorMaintenance_Abridged::VT_REMARK, None)}
  }
  /// The name of the requestor.
  /// Example: /// Example: requestor
  /// Constraints: Minimum length = 0, Maximum length = 50
  #[inline]
  pub fn requestor(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(SensorMaintenance_Abridged::VT_REQUESTOR, None)}
  }
  /// The name of the changer, if applicable.
  /// Example: /// Example: changer
  /// Constraints: Minimum length = 0, Maximum length = 50
  #[inline]
  pub fn changer(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(SensorMaintenance_Abridged::VT_CHANGER, None)}
  }
  /// The name of the approver.
  /// Example: /// Example: approver
  /// Constraints: Minimum length = 0, Maximum length = 50
  #[inline]
  pub fn approver(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(SensorMaintenance_Abridged::VT_APPROVER, None)}
  }
  /// COLT EOWID.
  /// Example: /// Example: eowId
  /// Constraints: Minimum length = 0, Maximum length = 20
  #[inline]
  pub fn eowId(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(SensorMaintenance_Abridged::VT_EOWID, None)}
  }
  /// The revision number for this maintenance item.
  /// Example: /// Example: rev
  /// Constraints: Minimum length = 0, Maximum length = 5
  #[inline]
  pub fn rev(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(SensorMaintenance_Abridged::VT_REV, None)}
  }
  /// The priority of this maintenance item.
  /// Example: /// Example: low
  /// Constraints: Minimum length = 0, Maximum length = 5
  #[inline]
  pub fn priority(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(SensorMaintenance_Abridged::VT_PRIORITY, None)}
  }
  /// Release.
  /// Example: /// Example: rel
  /// Constraints: Minimum length = 0, Maximum length = 5
  #[inline]
  pub fn rel(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(SensorMaintenance_Abridged::VT_REL, None)}
  }
  /// The internal COLT line number assigned to this item.
  /// Example: /// Example: lineNumber
  /// Constraints: Minimum length = 0, Maximum length = 20
  #[inline]
  pub fn lineNumber(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(SensorMaintenance_Abridged::VT_LINENUMBER, None)}
  }
  /// The name of the resource(s) affected by this maintenance item.
  /// Example: /// Example: resource
  /// Constraints: Minimum length = 0, Maximum length = 255
  #[inline]
  pub fn resource(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(SensorMaintenance_Abridged::VT_RESOURCE, None)}
  }
  /// The date that this item became inactive in ISO8601 UTC format.
  /// Example: /// Example: 2018-01-01T16:00:00.123Z
  /// Constraints: No constraints specified.
  #[inline]
  pub fn inactiveDate(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(SensorMaintenance_Abridged::VT_INACTIVEDATE, None)}
  }
  /// Time the row was created in the database, auto-populated by the system.
  /// Example: /// Example: 2018-01-01T16:00:00.123Z
  /// Constraints: No constraints specified.
  #[inline]
  pub fn createdAt(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(SensorMaintenance_Abridged::VT_CREATEDAT, None)}
  }
  /// Application user who created the row in the database, auto-populated by the system.
  /// Example: /// Example: some.user
  /// Constraints: Minimum length = 1, Maximum length = 64
  #[inline]
  pub fn createdBy(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(SensorMaintenance_Abridged::VT_CREATEDBY, None)}
  }
  /// Source of the data.
  /// Example: /// Example: Bluestaq
  /// Constraints: Minimum length = 1, Maximum length = 64
  #[inline]
  pub fn source(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(SensorMaintenance_Abridged::VT_SOURCE, None)}
  }
  /// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
  /// Example: /// Example: THIRD_PARTY_DATASOURCE
  /// Constraints: Minimum length = 0, Maximum length = 64
  #[inline]
  pub fn origin(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(SensorMaintenance_Abridged::VT_ORIGIN, None)}
  }
  /// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
  /// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
  /// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
  /// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
  /// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  /// Example: /// Example: TEST
  /// Constraints: Minimum length = 1, Maximum length = 32
  #[inline]
  pub fn dataMode(&self) -> SensorMaintenance_Abridged_dataMode_Enum {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<SensorMaintenance_Abridged_dataMode_Enum>(SensorMaintenance_Abridged::VT_DATAMODE, Some(SensorMaintenance_Abridged_dataMode_Enum::REAL)).unwrap()}
  }
  /// The originating source network on which this record was created, auto-populated by the system.
  /// Example: /// Example: ORIG
  /// Constraints: Minimum length = 1, Maximum length = 32
  #[inline]
  pub fn origNetwork(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(SensorMaintenance_Abridged::VT_ORIGNETWORK, None)}
  }
}

impl flatbuffers::Verifiable for SensorMaintenance_Abridged<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("id", Self::VT_ID, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("classificationMarking", Self::VT_CLASSIFICATIONMARKING, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("siteCode", Self::VT_SITECODE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("idSensor", Self::VT_IDSENSOR, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("startTime", Self::VT_STARTTIME, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("endTime", Self::VT_ENDTIME, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("recall", Self::VT_RECALL, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("duration", Self::VT_DURATION, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("mwOpsCap", Self::VT_MWOPSCAP, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("ssOpsCap", Self::VT_SSOPSCAP, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("mdOpsCap", Self::VT_MDOPSCAP, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("impactedFaces", Self::VT_IMPACTEDFACES, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("equipStatus", Self::VT_EQUIPSTATUS, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("activity", Self::VT_ACTIVITY, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("remark", Self::VT_REMARK, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("requestor", Self::VT_REQUESTOR, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("changer", Self::VT_CHANGER, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("approver", Self::VT_APPROVER, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("eowId", Self::VT_EOWID, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("rev", Self::VT_REV, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("priority", Self::VT_PRIORITY, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("rel", Self::VT_REL, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("lineNumber", Self::VT_LINENUMBER, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("resource", Self::VT_RESOURCE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("inactiveDate", Self::VT_INACTIVEDATE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("createdAt", Self::VT_CREATEDAT, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("createdBy", Self::VT_CREATEDBY, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("source", Self::VT_SOURCE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("origin", Self::VT_ORIGIN, false)?
     .visit_field::<SensorMaintenance_Abridged_dataMode_Enum>("dataMode", Self::VT_DATAMODE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("origNetwork", Self::VT_ORIGNETWORK, false)?
     .finish();
    Ok(())
  }
}
pub struct SensorMaintenance_AbridgedArgs<'a> {
    pub id: Option<flatbuffers::WIPOffset<&'a str>>,
    pub classificationMarking: Option<flatbuffers::WIPOffset<&'a str>>,
    pub siteCode: Option<flatbuffers::WIPOffset<&'a str>>,
    pub idSensor: Option<flatbuffers::WIPOffset<&'a str>>,
    pub startTime: Option<flatbuffers::WIPOffset<&'a str>>,
    pub endTime: Option<flatbuffers::WIPOffset<&'a str>>,
    pub recall: Option<flatbuffers::WIPOffset<&'a str>>,
    pub duration: Option<flatbuffers::WIPOffset<&'a str>>,
    pub mwOpsCap: Option<flatbuffers::WIPOffset<&'a str>>,
    pub ssOpsCap: Option<flatbuffers::WIPOffset<&'a str>>,
    pub mdOpsCap: Option<flatbuffers::WIPOffset<&'a str>>,
    pub impactedFaces: Option<flatbuffers::WIPOffset<&'a str>>,
    pub equipStatus: Option<flatbuffers::WIPOffset<&'a str>>,
    pub activity: Option<flatbuffers::WIPOffset<&'a str>>,
    pub remark: Option<flatbuffers::WIPOffset<&'a str>>,
    pub requestor: Option<flatbuffers::WIPOffset<&'a str>>,
    pub changer: Option<flatbuffers::WIPOffset<&'a str>>,
    pub approver: Option<flatbuffers::WIPOffset<&'a str>>,
    pub eowId: Option<flatbuffers::WIPOffset<&'a str>>,
    pub rev: Option<flatbuffers::WIPOffset<&'a str>>,
    pub priority: Option<flatbuffers::WIPOffset<&'a str>>,
    pub rel: Option<flatbuffers::WIPOffset<&'a str>>,
    pub lineNumber: Option<flatbuffers::WIPOffset<&'a str>>,
    pub resource: Option<flatbuffers::WIPOffset<&'a str>>,
    pub inactiveDate: Option<flatbuffers::WIPOffset<&'a str>>,
    pub createdAt: Option<flatbuffers::WIPOffset<&'a str>>,
    pub createdBy: Option<flatbuffers::WIPOffset<&'a str>>,
    pub source: Option<flatbuffers::WIPOffset<&'a str>>,
    pub origin: Option<flatbuffers::WIPOffset<&'a str>>,
    pub dataMode: SensorMaintenance_Abridged_dataMode_Enum,
    pub origNetwork: Option<flatbuffers::WIPOffset<&'a str>>,
}
impl<'a> Default for SensorMaintenance_AbridgedArgs<'a> {
  #[inline]
  fn default() -> Self {
    SensorMaintenance_AbridgedArgs {
      id: None,
      classificationMarking: None,
      siteCode: None,
      idSensor: None,
      startTime: None,
      endTime: None,
      recall: None,
      duration: None,
      mwOpsCap: None,
      ssOpsCap: None,
      mdOpsCap: None,
      impactedFaces: None,
      equipStatus: None,
      activity: None,
      remark: None,
      requestor: None,
      changer: None,
      approver: None,
      eowId: None,
      rev: None,
      priority: None,
      rel: None,
      lineNumber: None,
      resource: None,
      inactiveDate: None,
      createdAt: None,
      createdBy: None,
      source: None,
      origin: None,
      dataMode: SensorMaintenance_Abridged_dataMode_Enum::REAL,
      origNetwork: None,
    }
  }
}

pub struct SensorMaintenance_AbridgedBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> SensorMaintenance_AbridgedBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_id(&mut self, id: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(SensorMaintenance_Abridged::VT_ID, id);
  }
  #[inline]
  pub fn add_classificationMarking(&mut self, classificationMarking: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(SensorMaintenance_Abridged::VT_CLASSIFICATIONMARKING, classificationMarking);
  }
  #[inline]
  pub fn add_siteCode(&mut self, siteCode: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(SensorMaintenance_Abridged::VT_SITECODE, siteCode);
  }
  #[inline]
  pub fn add_idSensor(&mut self, idSensor: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(SensorMaintenance_Abridged::VT_IDSENSOR, idSensor);
  }
  #[inline]
  pub fn add_startTime(&mut self, startTime: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(SensorMaintenance_Abridged::VT_STARTTIME, startTime);
  }
  #[inline]
  pub fn add_endTime(&mut self, endTime: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(SensorMaintenance_Abridged::VT_ENDTIME, endTime);
  }
  #[inline]
  pub fn add_recall(&mut self, recall: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(SensorMaintenance_Abridged::VT_RECALL, recall);
  }
  #[inline]
  pub fn add_duration(&mut self, duration: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(SensorMaintenance_Abridged::VT_DURATION, duration);
  }
  #[inline]
  pub fn add_mwOpsCap(&mut self, mwOpsCap: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(SensorMaintenance_Abridged::VT_MWOPSCAP, mwOpsCap);
  }
  #[inline]
  pub fn add_ssOpsCap(&mut self, ssOpsCap: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(SensorMaintenance_Abridged::VT_SSOPSCAP, ssOpsCap);
  }
  #[inline]
  pub fn add_mdOpsCap(&mut self, mdOpsCap: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(SensorMaintenance_Abridged::VT_MDOPSCAP, mdOpsCap);
  }
  #[inline]
  pub fn add_impactedFaces(&mut self, impactedFaces: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(SensorMaintenance_Abridged::VT_IMPACTEDFACES, impactedFaces);
  }
  #[inline]
  pub fn add_equipStatus(&mut self, equipStatus: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(SensorMaintenance_Abridged::VT_EQUIPSTATUS, equipStatus);
  }
  #[inline]
  pub fn add_activity(&mut self, activity: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(SensorMaintenance_Abridged::VT_ACTIVITY, activity);
  }
  #[inline]
  pub fn add_remark(&mut self, remark: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(SensorMaintenance_Abridged::VT_REMARK, remark);
  }
  #[inline]
  pub fn add_requestor(&mut self, requestor: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(SensorMaintenance_Abridged::VT_REQUESTOR, requestor);
  }
  #[inline]
  pub fn add_changer(&mut self, changer: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(SensorMaintenance_Abridged::VT_CHANGER, changer);
  }
  #[inline]
  pub fn add_approver(&mut self, approver: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(SensorMaintenance_Abridged::VT_APPROVER, approver);
  }
  #[inline]
  pub fn add_eowId(&mut self, eowId: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(SensorMaintenance_Abridged::VT_EOWID, eowId);
  }
  #[inline]
  pub fn add_rev(&mut self, rev: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(SensorMaintenance_Abridged::VT_REV, rev);
  }
  #[inline]
  pub fn add_priority(&mut self, priority: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(SensorMaintenance_Abridged::VT_PRIORITY, priority);
  }
  #[inline]
  pub fn add_rel(&mut self, rel: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(SensorMaintenance_Abridged::VT_REL, rel);
  }
  #[inline]
  pub fn add_lineNumber(&mut self, lineNumber: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(SensorMaintenance_Abridged::VT_LINENUMBER, lineNumber);
  }
  #[inline]
  pub fn add_resource(&mut self, resource: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(SensorMaintenance_Abridged::VT_RESOURCE, resource);
  }
  #[inline]
  pub fn add_inactiveDate(&mut self, inactiveDate: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(SensorMaintenance_Abridged::VT_INACTIVEDATE, inactiveDate);
  }
  #[inline]
  pub fn add_createdAt(&mut self, createdAt: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(SensorMaintenance_Abridged::VT_CREATEDAT, createdAt);
  }
  #[inline]
  pub fn add_createdBy(&mut self, createdBy: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(SensorMaintenance_Abridged::VT_CREATEDBY, createdBy);
  }
  #[inline]
  pub fn add_source(&mut self, source: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(SensorMaintenance_Abridged::VT_SOURCE, source);
  }
  #[inline]
  pub fn add_origin(&mut self, origin: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(SensorMaintenance_Abridged::VT_ORIGIN, origin);
  }
  #[inline]
  pub fn add_dataMode(&mut self, dataMode: SensorMaintenance_Abridged_dataMode_Enum) {
    self.fbb_.push_slot::<SensorMaintenance_Abridged_dataMode_Enum>(SensorMaintenance_Abridged::VT_DATAMODE, dataMode, SensorMaintenance_Abridged_dataMode_Enum::REAL);
  }
  #[inline]
  pub fn add_origNetwork(&mut self, origNetwork: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(SensorMaintenance_Abridged::VT_ORIGNETWORK, origNetwork);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> SensorMaintenance_AbridgedBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    SensorMaintenance_AbridgedBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<SensorMaintenance_Abridged<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for SensorMaintenance_Abridged<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("SensorMaintenance_Abridged");
      ds.field("id", &self.id());
      ds.field("classificationMarking", &self.classificationMarking());
      ds.field("siteCode", &self.siteCode());
      ds.field("idSensor", &self.idSensor());
      ds.field("startTime", &self.startTime());
      ds.field("endTime", &self.endTime());
      ds.field("recall", &self.recall());
      ds.field("duration", &self.duration());
      ds.field("mwOpsCap", &self.mwOpsCap());
      ds.field("ssOpsCap", &self.ssOpsCap());
      ds.field("mdOpsCap", &self.mdOpsCap());
      ds.field("impactedFaces", &self.impactedFaces());
      ds.field("equipStatus", &self.equipStatus());
      ds.field("activity", &self.activity());
      ds.field("remark", &self.remark());
      ds.field("requestor", &self.requestor());
      ds.field("changer", &self.changer());
      ds.field("approver", &self.approver());
      ds.field("eowId", &self.eowId());
      ds.field("rev", &self.rev());
      ds.field("priority", &self.priority());
      ds.field("rel", &self.rel());
      ds.field("lineNumber", &self.lineNumber());
      ds.field("resource", &self.resource());
      ds.field("inactiveDate", &self.inactiveDate());
      ds.field("createdAt", &self.createdAt());
      ds.field("createdBy", &self.createdBy());
      ds.field("source", &self.source());
      ds.field("origin", &self.origin());
      ds.field("dataMode", &self.dataMode());
      ds.field("origNetwork", &self.origNetwork());
      ds.finish()
  }
}
#[non_exhaustive]
#[derive(Debug, Clone, PartialEq)]
pub struct SensorMaintenance_AbridgedT {
  pub id: Option<String>,
  pub classificationMarking: Option<String>,
  pub siteCode: Option<String>,
  pub idSensor: Option<String>,
  pub startTime: Option<String>,
  pub endTime: Option<String>,
  pub recall: Option<String>,
  pub duration: Option<String>,
  pub mwOpsCap: Option<String>,
  pub ssOpsCap: Option<String>,
  pub mdOpsCap: Option<String>,
  pub impactedFaces: Option<String>,
  pub equipStatus: Option<String>,
  pub activity: Option<String>,
  pub remark: Option<String>,
  pub requestor: Option<String>,
  pub changer: Option<String>,
  pub approver: Option<String>,
  pub eowId: Option<String>,
  pub rev: Option<String>,
  pub priority: Option<String>,
  pub rel: Option<String>,
  pub lineNumber: Option<String>,
  pub resource: Option<String>,
  pub inactiveDate: Option<String>,
  pub createdAt: Option<String>,
  pub createdBy: Option<String>,
  pub source: Option<String>,
  pub origin: Option<String>,
  pub dataMode: SensorMaintenance_Abridged_dataMode_Enum,
  pub origNetwork: Option<String>,
}
impl Default for SensorMaintenance_AbridgedT {
  fn default() -> Self {
    Self {
      id: None,
      classificationMarking: None,
      siteCode: None,
      idSensor: None,
      startTime: None,
      endTime: None,
      recall: None,
      duration: None,
      mwOpsCap: None,
      ssOpsCap: None,
      mdOpsCap: None,
      impactedFaces: None,
      equipStatus: None,
      activity: None,
      remark: None,
      requestor: None,
      changer: None,
      approver: None,
      eowId: None,
      rev: None,
      priority: None,
      rel: None,
      lineNumber: None,
      resource: None,
      inactiveDate: None,
      createdAt: None,
      createdBy: None,
      source: None,
      origin: None,
      dataMode: SensorMaintenance_Abridged_dataMode_Enum::REAL,
      origNetwork: None,
    }
  }
}
impl SensorMaintenance_AbridgedT {
  pub fn pack<'b, A: flatbuffers::Allocator + 'b>(
    &self,
    _fbb: &mut flatbuffers::FlatBufferBuilder<'b, A>
  ) -> flatbuffers::WIPOffset<SensorMaintenance_Abridged<'b>> {
    let id = self.id.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let classificationMarking = self.classificationMarking.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let siteCode = self.siteCode.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let idSensor = self.idSensor.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let startTime = self.startTime.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let endTime = self.endTime.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let recall = self.recall.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let duration = self.duration.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let mwOpsCap = self.mwOpsCap.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let ssOpsCap = self.ssOpsCap.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let mdOpsCap = self.mdOpsCap.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let impactedFaces = self.impactedFaces.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let equipStatus = self.equipStatus.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let activity = self.activity.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let remark = self.remark.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let requestor = self.requestor.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let changer = self.changer.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let approver = self.approver.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let eowId = self.eowId.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let rev = self.rev.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let priority = self.priority.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let rel = self.rel.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let lineNumber = self.lineNumber.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let resource = self.resource.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let inactiveDate = self.inactiveDate.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let createdAt = self.createdAt.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let createdBy = self.createdBy.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let source = self.source.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let origin = self.origin.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let dataMode = self.dataMode;
    let origNetwork = self.origNetwork.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    SensorMaintenance_Abridged::create(_fbb, &SensorMaintenance_AbridgedArgs{
      id,
      classificationMarking,
      siteCode,
      idSensor,
      startTime,
      endTime,
      recall,
      duration,
      mwOpsCap,
      ssOpsCap,
      mdOpsCap,
      impactedFaces,
      equipStatus,
      activity,
      remark,
      requestor,
      changer,
      approver,
      eowId,
      rev,
      priority,
      rel,
      lineNumber,
      resource,
      inactiveDate,
      createdAt,
      createdBy,
      source,
      origin,
      dataMode,
      origNetwork,
    })
  }
}
#[inline]
/// Verifies that a buffer of bytes contains a `SensorMaintenance_Abridged`
/// and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_sensor_maintenance_abridged_unchecked`.
pub fn root_as_sensor_maintenance_abridged(buf: &[u8]) -> Result<SensorMaintenance_Abridged, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root::<SensorMaintenance_Abridged>(buf)
}
#[inline]
/// Verifies that a buffer of bytes contains a size prefixed
/// `SensorMaintenance_Abridged` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `size_prefixed_root_as_sensor_maintenance_abridged_unchecked`.
pub fn size_prefixed_root_as_sensor_maintenance_abridged(buf: &[u8]) -> Result<SensorMaintenance_Abridged, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root::<SensorMaintenance_Abridged>(buf)
}
#[inline]
/// Verifies, with the given options, that a buffer of bytes
/// contains a `SensorMaintenance_Abridged` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_sensor_maintenance_abridged_unchecked`.
pub fn root_as_sensor_maintenance_abridged_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<SensorMaintenance_Abridged<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root_with_opts::<SensorMaintenance_Abridged<'b>>(opts, buf)
}
#[inline]
/// Verifies, with the given verifier options, that a buffer of
/// bytes contains a size prefixed `SensorMaintenance_Abridged` and returns
/// it. Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_sensor_maintenance_abridged_unchecked`.
pub fn size_prefixed_root_as_sensor_maintenance_abridged_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<SensorMaintenance_Abridged<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root_with_opts::<SensorMaintenance_Abridged<'b>>(opts, buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a SensorMaintenance_Abridged and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid `SensorMaintenance_Abridged`.
pub unsafe fn root_as_sensor_maintenance_abridged_unchecked(buf: &[u8]) -> SensorMaintenance_Abridged {
  flatbuffers::root_unchecked::<SensorMaintenance_Abridged>(buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a size prefixed SensorMaintenance_Abridged and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid size prefixed `SensorMaintenance_Abridged`.
pub unsafe fn size_prefixed_root_as_sensor_maintenance_abridged_unchecked(buf: &[u8]) -> SensorMaintenance_Abridged {
  flatbuffers::size_prefixed_root_unchecked::<SensorMaintenance_Abridged>(buf)
}
pub const SENSOR_MAINTENANCE_ABRIDGED_IDENTIFIER: &str = "SENS";

#[inline]
pub fn sensor_maintenance_abridged_buffer_has_identifier(buf: &[u8]) -> bool {
  flatbuffers::buffer_has_identifier(buf, SENSOR_MAINTENANCE_ABRIDGED_IDENTIFIER, false)
}

#[inline]
pub fn sensor_maintenance_abridged_size_prefixed_buffer_has_identifier(buf: &[u8]) -> bool {
  flatbuffers::buffer_has_identifier(buf, SENSOR_MAINTENANCE_ABRIDGED_IDENTIFIER, true)
}

#[inline]
pub fn finish_sensor_maintenance_abridged_buffer<'a, 'b, A: flatbuffers::Allocator + 'a>(
    fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
    root: flatbuffers::WIPOffset<SensorMaintenance_Abridged<'a>>) {
  fbb.finish(root, Some(SENSOR_MAINTENANCE_ABRIDGED_IDENTIFIER));
}

#[inline]
pub fn finish_size_prefixed_sensor_maintenance_abridged_buffer<'a, 'b, A: flatbuffers::Allocator + 'a>(fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>, root: flatbuffers::WIPOffset<SensorMaintenance_Abridged<'a>>) {
  fbb.finish_size_prefixed(root, Some(SENSOR_MAINTENANCE_ABRIDGED_IDENTIFIER));
}
