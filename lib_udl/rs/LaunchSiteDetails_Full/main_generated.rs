// automatically generated by the FlatBuffers compiler, do not modify


// @generated

use core::mem;
use core::cmp::Ordering;

extern crate flatbuffers;
use self::flatbuffers::{EndianScalar, Follow};

#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
pub const ENUM_MIN_LAUNCH_SITE_DETAILS_FULL_DATA_MODE_ENUM: i8 = 0;
#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
pub const ENUM_MAX_LAUNCH_SITE_DETAILS_FULL_DATA_MODE_ENUM: i8 = 3;
#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
#[allow(non_camel_case_types)]
pub const ENUM_VALUES_LAUNCH_SITE_DETAILS_FULL_DATA_MODE_ENUM: [LaunchSiteDetails_Full_dataMode_Enum; 4] = [
  LaunchSiteDetails_Full_dataMode_Enum::REAL,
  LaunchSiteDetails_Full_dataMode_Enum::TEST,
  LaunchSiteDetails_Full_dataMode_Enum::SIMULATED,
  LaunchSiteDetails_Full_dataMode_Enum::EXERCISE,
];

#[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, Default)]
#[repr(transparent)]
pub struct LaunchSiteDetails_Full_dataMode_Enum(pub i8);
#[allow(non_upper_case_globals)]
impl LaunchSiteDetails_Full_dataMode_Enum {
  /// Data collected or produced that pertains to real-world objects, events, and analysis.
  pub const REAL: Self = Self(0);
  /// Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  pub const TEST: Self = Self(1);
  /// Synthetic data generated by a model to mimic real-world datasets.
  pub const SIMULATED: Self = Self(2);
  /// Data pertaining to a government or military exercise. The data may include both real and simulated data.
  pub const EXERCISE: Self = Self(3);

  pub const ENUM_MIN: i8 = 0;
  pub const ENUM_MAX: i8 = 3;
  pub const ENUM_VALUES: &'static [Self] = &[
    Self::REAL,
    Self::TEST,
    Self::SIMULATED,
    Self::EXERCISE,
  ];
  /// Returns the variant's name or "" if unknown.
  pub fn variant_name(self) -> Option<&'static str> {
    match self {
      Self::REAL => Some("REAL"),
      Self::TEST => Some("TEST"),
      Self::SIMULATED => Some("SIMULATED"),
      Self::EXERCISE => Some("EXERCISE"),
      _ => None,
    }
  }
}
impl core::fmt::Debug for LaunchSiteDetails_Full_dataMode_Enum {
  fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
    if let Some(name) = self.variant_name() {
      f.write_str(name)
    } else {
      f.write_fmt(format_args!("<UNKNOWN {:?}>", self.0))
    }
  }
}
impl<'a> flatbuffers::Follow<'a> for LaunchSiteDetails_Full_dataMode_Enum {
  type Inner = Self;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    let b = flatbuffers::read_scalar_at::<i8>(buf, loc);
    Self(b)
  }
}

impl flatbuffers::Push for LaunchSiteDetails_Full_dataMode_Enum {
    type Output = LaunchSiteDetails_Full_dataMode_Enum;
    #[inline]
    unsafe fn push(&self, dst: &mut [u8], _written_len: usize) {
        flatbuffers::emplace_scalar::<i8>(dst, self.0);
    }
}

impl flatbuffers::EndianScalar for LaunchSiteDetails_Full_dataMode_Enum {
  type Scalar = i8;
  #[inline]
  fn to_little_endian(self) -> i8 {
    self.0.to_le()
  }
  #[inline]
  #[allow(clippy::wrong_self_convention)]
  fn from_little_endian(v: i8) -> Self {
    let b = i8::from_le(v);
    Self(b)
  }
}

impl<'a> flatbuffers::Verifiable for LaunchSiteDetails_Full_dataMode_Enum {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    i8::run_verifier(v, pos)
  }
}

impl flatbuffers::SimpleToVerifyInSlice for LaunchSiteDetails_Full_dataMode_Enum {}
pub enum LaunchSiteDetails_FullOffset {}
#[derive(Copy, Clone, PartialEq)]

/// /// Model representation of details compiled/collected on a launch site by a particular source. A launch site may have several details records.
pub struct LaunchSiteDetails_Full<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for LaunchSiteDetails_Full<'a> {
  type Inner = LaunchSiteDetails_Full<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> LaunchSiteDetails_Full<'a> {
  pub const VT_ID: flatbuffers::VOffsetT = 4;
  pub const VT_IDLAUNCHSITE: flatbuffers::VOffsetT = 6;
  pub const VT_CLASSIFICATIONMARKING: flatbuffers::VOffsetT = 8;
  pub const VT_IDLOCATION: flatbuffers::VOffsetT = 10;
  pub const VT_LAUNCHGROUP: flatbuffers::VOffsetT = 12;
  pub const VT_AVAILABLEINCLINATIONS: flatbuffers::VOffsetT = 14;
  pub const VT_DESCRIPTION: flatbuffers::VOffsetT = 16;
  pub const VT_CREATEDAT: flatbuffers::VOffsetT = 18;
  pub const VT_CREATEDBY: flatbuffers::VOffsetT = 20;
  pub const VT_UPDATEDAT: flatbuffers::VOffsetT = 22;
  pub const VT_UPDATEDBY: flatbuffers::VOffsetT = 24;
  pub const VT_SOURCE: flatbuffers::VOffsetT = 26;
  pub const VT_ORIGIN: flatbuffers::VOffsetT = 28;
  pub const VT_ORIGNETWORK: flatbuffers::VOffsetT = 30;
  pub const VT_DATAMODE: flatbuffers::VOffsetT = 32;
  pub const VT_TAGS: flatbuffers::VOffsetT = 34;
  pub const VT_LOCATION: flatbuffers::VOffsetT = 36;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    LaunchSiteDetails_Full { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args LaunchSiteDetails_FullArgs<'args>
  ) -> flatbuffers::WIPOffset<LaunchSiteDetails_Full<'bldr>> {
    let mut builder = LaunchSiteDetails_FullBuilder::new(_fbb);
    if let Some(x) = args.location { builder.add_location(x); }
    if let Some(x) = args.tags { builder.add_tags(x); }
    if let Some(x) = args.origNetwork { builder.add_origNetwork(x); }
    if let Some(x) = args.origin { builder.add_origin(x); }
    if let Some(x) = args.source { builder.add_source(x); }
    if let Some(x) = args.updatedBy { builder.add_updatedBy(x); }
    if let Some(x) = args.updatedAt { builder.add_updatedAt(x); }
    if let Some(x) = args.createdBy { builder.add_createdBy(x); }
    if let Some(x) = args.createdAt { builder.add_createdAt(x); }
    if let Some(x) = args.description { builder.add_description(x); }
    if let Some(x) = args.availableInclinations { builder.add_availableInclinations(x); }
    if let Some(x) = args.launchGroup { builder.add_launchGroup(x); }
    if let Some(x) = args.idLocation { builder.add_idLocation(x); }
    if let Some(x) = args.classificationMarking { builder.add_classificationMarking(x); }
    if let Some(x) = args.idLaunchSite { builder.add_idLaunchSite(x); }
    if let Some(x) = args.id { builder.add_id(x); }
    builder.add_dataMode(args.dataMode);
    builder.finish()
  }

  pub fn unpack(&self) -> LaunchSiteDetails_FullT {
    let id = self.id().map(|x| {
      x.to_string()
    });
    let idLaunchSite = self.idLaunchSite().map(|x| {
      x.to_string()
    });
    let classificationMarking = self.classificationMarking().map(|x| {
      x.to_string()
    });
    let idLocation = self.idLocation().map(|x| {
      x.to_string()
    });
    let launchGroup = self.launchGroup().map(|x| {
      x.to_string()
    });
    let availableInclinations = self.availableInclinations().map(|x| {
      x.iter().map(|s| s.to_string()).collect()
    });
    let description = self.description().map(|x| {
      x.to_string()
    });
    let createdAt = self.createdAt().map(|x| {
      x.to_string()
    });
    let createdBy = self.createdBy().map(|x| {
      x.to_string()
    });
    let updatedAt = self.updatedAt().map(|x| {
      x.to_string()
    });
    let updatedBy = self.updatedBy().map(|x| {
      x.to_string()
    });
    let source = self.source().map(|x| {
      x.to_string()
    });
    let origin = self.origin().map(|x| {
      x.to_string()
    });
    let origNetwork = self.origNetwork().map(|x| {
      x.to_string()
    });
    let dataMode = self.dataMode();
    let tags = self.tags().map(|x| {
      x.iter().map(|s| s.to_string()).collect()
    });
    let location = self.location().map(|x| {
      x.to_string()
    });
    LaunchSiteDetails_FullT {
      id,
      idLaunchSite,
      classificationMarking,
      idLocation,
      launchGroup,
      availableInclinations,
      description,
      createdAt,
      createdBy,
      updatedAt,
      updatedBy,
      source,
      origin,
      origNetwork,
      dataMode,
      tags,
      location,
    }
  }

  /// Unique identifier of the record, auto-generated by the system.
  /// Example: /// Example: LAUNCHSITEDETAILS-ID
  /// Constraints: Minimum length = 1, Maximum length = 36
  #[inline]
  pub fn id(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(LaunchSiteDetails_Full::VT_ID, None)}
  }
  /// Identifier of the parent launch site record.
  /// Example: /// Example: LAUNCHSITE-ID
  /// Constraints: Minimum length = 1, Maximum length = 36
  #[inline]
  pub fn idLaunchSite(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(LaunchSiteDetails_Full::VT_IDLAUNCHSITE, None)}
  }
  /// Classification marking of the data in IC/CAPCO Portion-marked format.
  /// Example: /// Example: U
  /// Constraints: Minimum length = 1, Maximum length = 128
  #[inline]
  pub fn classificationMarking(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(LaunchSiteDetails_Full::VT_CLASSIFICATIONMARKING, None)}
  }
  /// ID of the location data for the launch site, or null if mobile (e.g. sea launch platform in international waters).
  /// Example: /// Example: LOCATION-ID
  /// Constraints: Minimum length = 0, Maximum length = 36
  #[inline]
  pub fn idLocation(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(LaunchSiteDetails_Full::VT_IDLOCATION, None)}
  }
  /// Launch site group name. Multiple launch sites may be colocated within a launch ''group''.
  /// Example: /// Example: Example-group-name
  /// Constraints: Minimum length = 0, Maximum length = 64
  #[inline]
  pub fn launchGroup(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(LaunchSiteDetails_Full::VT_LAUNCHGROUP, None)}
  }
  /// Array of supported launch inclinations known for this site. The array is always sized as a multiple of two and includes start/end values to support ranges.  For example, if a site support inclinations of 10 and 12-14, the array would have the following values: [10,10, 12,14].
  /// Example: /// Example: [10.23, 10.23, 12.23, 14.23]
  /// Constraints: No constraints specified.
  #[inline]
  pub fn availableInclinations(&self) -> Option<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>(LaunchSiteDetails_Full::VT_AVAILABLEINCLINATIONS, None)}
  }
  /// Notes/description of the launch site.
  /// Example: /// Example: Example notes
  /// Constraints: Minimum length = 0, Maximum length = 256
  #[inline]
  pub fn description(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(LaunchSiteDetails_Full::VT_DESCRIPTION, None)}
  }
  /// Time the row was created in the database, auto-populated by the system.
  /// Example: /// Example: 2018-01-01T16:00:00.123Z
  /// Constraints: No constraints specified.
  #[inline]
  pub fn createdAt(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(LaunchSiteDetails_Full::VT_CREATEDAT, None)}
  }
  /// Application user who created the row in the database, auto-populated by the system.
  /// Example: /// Example: some.user
  /// Constraints: Minimum length = 1, Maximum length = 64
  #[inline]
  pub fn createdBy(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(LaunchSiteDetails_Full::VT_CREATEDBY, None)}
  }
  /// Time the row was last updated in the database, auto-populated by the system.
  /// Example: /// Example: 2018-01-01T16:00:00.123Z
  /// Constraints: No constraints specified.
  #[inline]
  pub fn updatedAt(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(LaunchSiteDetails_Full::VT_UPDATEDAT, None)}
  }
  /// Application user who updated the row in the database, auto-populated by the system.
  /// Example: /// Example: some.user
  /// Constraints: Minimum length = 0, Maximum length = 64
  #[inline]
  pub fn updatedBy(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(LaunchSiteDetails_Full::VT_UPDATEDBY, None)}
  }
  /// Source of the data.
  /// Example: /// Example: Bluestaq
  /// Constraints: Minimum length = 1, Maximum length = 64
  #[inline]
  pub fn source(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(LaunchSiteDetails_Full::VT_SOURCE, None)}
  }
  /// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
  /// Example: /// Example: THIRD_PARTY_DATASOURCE
  /// Constraints: Minimum length = 0, Maximum length = 64
  #[inline]
  pub fn origin(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(LaunchSiteDetails_Full::VT_ORIGIN, None)}
  }
  /// The originating source network on which this record was created, auto-populated by the system.
  /// Example: /// Example: ORIG
  /// Constraints: Minimum length = 1, Maximum length = 32
  #[inline]
  pub fn origNetwork(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(LaunchSiteDetails_Full::VT_ORIGNETWORK, None)}
  }
  /// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
  /// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
  /// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
  /// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
  /// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  /// Example: /// Example: TEST
  /// Constraints: Minimum length = 1, Maximum length = 32
  #[inline]
  pub fn dataMode(&self) -> LaunchSiteDetails_Full_dataMode_Enum {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<LaunchSiteDetails_Full_dataMode_Enum>(LaunchSiteDetails_Full::VT_DATAMODE, Some(LaunchSiteDetails_Full_dataMode_Enum::REAL)).unwrap()}
  }
  /// Optional array of provider/source specific tags for this data, where each element is no longer than 32 characters, used for implementing data owner conditional access controls to restrict access to the data. Should be left null by data providers unless conditional access controls are coordinated with the UDL team.
  /// Example: /// Example: ['PROVIDER_TAG1', 'PROVIDER_TAG2']
  /// Constraints: No constraints specified.
  #[inline]
  pub fn tags(&self) -> Option<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>(LaunchSiteDetails_Full::VT_TAGS, None)}
  }
  /// No description provided.
  /// Example: /// Example: No example provided.
  /// Constraints: No constraints specified.
  #[inline]
  pub fn location(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(LaunchSiteDetails_Full::VT_LOCATION, None)}
  }
}

impl flatbuffers::Verifiable for LaunchSiteDetails_Full<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("id", Self::VT_ID, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("idLaunchSite", Self::VT_IDLAUNCHSITE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("classificationMarking", Self::VT_CLASSIFICATIONMARKING, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("idLocation", Self::VT_IDLOCATION, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("launchGroup", Self::VT_LAUNCHGROUP, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<&'_ str>>>>("availableInclinations", Self::VT_AVAILABLEINCLINATIONS, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("description", Self::VT_DESCRIPTION, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("createdAt", Self::VT_CREATEDAT, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("createdBy", Self::VT_CREATEDBY, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("updatedAt", Self::VT_UPDATEDAT, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("updatedBy", Self::VT_UPDATEDBY, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("source", Self::VT_SOURCE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("origin", Self::VT_ORIGIN, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("origNetwork", Self::VT_ORIGNETWORK, false)?
     .visit_field::<LaunchSiteDetails_Full_dataMode_Enum>("dataMode", Self::VT_DATAMODE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<&'_ str>>>>("tags", Self::VT_TAGS, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("location", Self::VT_LOCATION, false)?
     .finish();
    Ok(())
  }
}
pub struct LaunchSiteDetails_FullArgs<'a> {
    pub id: Option<flatbuffers::WIPOffset<&'a str>>,
    pub idLaunchSite: Option<flatbuffers::WIPOffset<&'a str>>,
    pub classificationMarking: Option<flatbuffers::WIPOffset<&'a str>>,
    pub idLocation: Option<flatbuffers::WIPOffset<&'a str>>,
    pub launchGroup: Option<flatbuffers::WIPOffset<&'a str>>,
    pub availableInclinations: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>,
    pub description: Option<flatbuffers::WIPOffset<&'a str>>,
    pub createdAt: Option<flatbuffers::WIPOffset<&'a str>>,
    pub createdBy: Option<flatbuffers::WIPOffset<&'a str>>,
    pub updatedAt: Option<flatbuffers::WIPOffset<&'a str>>,
    pub updatedBy: Option<flatbuffers::WIPOffset<&'a str>>,
    pub source: Option<flatbuffers::WIPOffset<&'a str>>,
    pub origin: Option<flatbuffers::WIPOffset<&'a str>>,
    pub origNetwork: Option<flatbuffers::WIPOffset<&'a str>>,
    pub dataMode: LaunchSiteDetails_Full_dataMode_Enum,
    pub tags: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>,
    pub location: Option<flatbuffers::WIPOffset<&'a str>>,
}
impl<'a> Default for LaunchSiteDetails_FullArgs<'a> {
  #[inline]
  fn default() -> Self {
    LaunchSiteDetails_FullArgs {
      id: None,
      idLaunchSite: None,
      classificationMarking: None,
      idLocation: None,
      launchGroup: None,
      availableInclinations: None,
      description: None,
      createdAt: None,
      createdBy: None,
      updatedAt: None,
      updatedBy: None,
      source: None,
      origin: None,
      origNetwork: None,
      dataMode: LaunchSiteDetails_Full_dataMode_Enum::REAL,
      tags: None,
      location: None,
    }
  }
}

pub struct LaunchSiteDetails_FullBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> LaunchSiteDetails_FullBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_id(&mut self, id: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(LaunchSiteDetails_Full::VT_ID, id);
  }
  #[inline]
  pub fn add_idLaunchSite(&mut self, idLaunchSite: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(LaunchSiteDetails_Full::VT_IDLAUNCHSITE, idLaunchSite);
  }
  #[inline]
  pub fn add_classificationMarking(&mut self, classificationMarking: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(LaunchSiteDetails_Full::VT_CLASSIFICATIONMARKING, classificationMarking);
  }
  #[inline]
  pub fn add_idLocation(&mut self, idLocation: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(LaunchSiteDetails_Full::VT_IDLOCATION, idLocation);
  }
  #[inline]
  pub fn add_launchGroup(&mut self, launchGroup: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(LaunchSiteDetails_Full::VT_LAUNCHGROUP, launchGroup);
  }
  #[inline]
  pub fn add_availableInclinations(&mut self, availableInclinations: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<&'b  str>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(LaunchSiteDetails_Full::VT_AVAILABLEINCLINATIONS, availableInclinations);
  }
  #[inline]
  pub fn add_description(&mut self, description: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(LaunchSiteDetails_Full::VT_DESCRIPTION, description);
  }
  #[inline]
  pub fn add_createdAt(&mut self, createdAt: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(LaunchSiteDetails_Full::VT_CREATEDAT, createdAt);
  }
  #[inline]
  pub fn add_createdBy(&mut self, createdBy: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(LaunchSiteDetails_Full::VT_CREATEDBY, createdBy);
  }
  #[inline]
  pub fn add_updatedAt(&mut self, updatedAt: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(LaunchSiteDetails_Full::VT_UPDATEDAT, updatedAt);
  }
  #[inline]
  pub fn add_updatedBy(&mut self, updatedBy: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(LaunchSiteDetails_Full::VT_UPDATEDBY, updatedBy);
  }
  #[inline]
  pub fn add_source(&mut self, source: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(LaunchSiteDetails_Full::VT_SOURCE, source);
  }
  #[inline]
  pub fn add_origin(&mut self, origin: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(LaunchSiteDetails_Full::VT_ORIGIN, origin);
  }
  #[inline]
  pub fn add_origNetwork(&mut self, origNetwork: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(LaunchSiteDetails_Full::VT_ORIGNETWORK, origNetwork);
  }
  #[inline]
  pub fn add_dataMode(&mut self, dataMode: LaunchSiteDetails_Full_dataMode_Enum) {
    self.fbb_.push_slot::<LaunchSiteDetails_Full_dataMode_Enum>(LaunchSiteDetails_Full::VT_DATAMODE, dataMode, LaunchSiteDetails_Full_dataMode_Enum::REAL);
  }
  #[inline]
  pub fn add_tags(&mut self, tags: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<&'b  str>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(LaunchSiteDetails_Full::VT_TAGS, tags);
  }
  #[inline]
  pub fn add_location(&mut self, location: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(LaunchSiteDetails_Full::VT_LOCATION, location);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> LaunchSiteDetails_FullBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    LaunchSiteDetails_FullBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<LaunchSiteDetails_Full<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for LaunchSiteDetails_Full<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("LaunchSiteDetails_Full");
      ds.field("id", &self.id());
      ds.field("idLaunchSite", &self.idLaunchSite());
      ds.field("classificationMarking", &self.classificationMarking());
      ds.field("idLocation", &self.idLocation());
      ds.field("launchGroup", &self.launchGroup());
      ds.field("availableInclinations", &self.availableInclinations());
      ds.field("description", &self.description());
      ds.field("createdAt", &self.createdAt());
      ds.field("createdBy", &self.createdBy());
      ds.field("updatedAt", &self.updatedAt());
      ds.field("updatedBy", &self.updatedBy());
      ds.field("source", &self.source());
      ds.field("origin", &self.origin());
      ds.field("origNetwork", &self.origNetwork());
      ds.field("dataMode", &self.dataMode());
      ds.field("tags", &self.tags());
      ds.field("location", &self.location());
      ds.finish()
  }
}
#[non_exhaustive]
#[derive(Debug, Clone, PartialEq)]
pub struct LaunchSiteDetails_FullT {
  pub id: Option<String>,
  pub idLaunchSite: Option<String>,
  pub classificationMarking: Option<String>,
  pub idLocation: Option<String>,
  pub launchGroup: Option<String>,
  pub availableInclinations: Option<Vec<String>>,
  pub description: Option<String>,
  pub createdAt: Option<String>,
  pub createdBy: Option<String>,
  pub updatedAt: Option<String>,
  pub updatedBy: Option<String>,
  pub source: Option<String>,
  pub origin: Option<String>,
  pub origNetwork: Option<String>,
  pub dataMode: LaunchSiteDetails_Full_dataMode_Enum,
  pub tags: Option<Vec<String>>,
  pub location: Option<String>,
}
impl Default for LaunchSiteDetails_FullT {
  fn default() -> Self {
    Self {
      id: None,
      idLaunchSite: None,
      classificationMarking: None,
      idLocation: None,
      launchGroup: None,
      availableInclinations: None,
      description: None,
      createdAt: None,
      createdBy: None,
      updatedAt: None,
      updatedBy: None,
      source: None,
      origin: None,
      origNetwork: None,
      dataMode: LaunchSiteDetails_Full_dataMode_Enum::REAL,
      tags: None,
      location: None,
    }
  }
}
impl LaunchSiteDetails_FullT {
  pub fn pack<'b, A: flatbuffers::Allocator + 'b>(
    &self,
    _fbb: &mut flatbuffers::FlatBufferBuilder<'b, A>
  ) -> flatbuffers::WIPOffset<LaunchSiteDetails_Full<'b>> {
    let id = self.id.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let idLaunchSite = self.idLaunchSite.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let classificationMarking = self.classificationMarking.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let idLocation = self.idLocation.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let launchGroup = self.launchGroup.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let availableInclinations = self.availableInclinations.as_ref().map(|x|{
      let w: Vec<_> = x.iter().map(|s| _fbb.create_string(s)).collect();_fbb.create_vector(&w)
    });
    let description = self.description.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let createdAt = self.createdAt.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let createdBy = self.createdBy.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let updatedAt = self.updatedAt.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let updatedBy = self.updatedBy.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let source = self.source.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let origin = self.origin.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let origNetwork = self.origNetwork.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let dataMode = self.dataMode;
    let tags = self.tags.as_ref().map(|x|{
      let w: Vec<_> = x.iter().map(|s| _fbb.create_string(s)).collect();_fbb.create_vector(&w)
    });
    let location = self.location.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    LaunchSiteDetails_Full::create(_fbb, &LaunchSiteDetails_FullArgs{
      id,
      idLaunchSite,
      classificationMarking,
      idLocation,
      launchGroup,
      availableInclinations,
      description,
      createdAt,
      createdBy,
      updatedAt,
      updatedBy,
      source,
      origin,
      origNetwork,
      dataMode,
      tags,
      location,
    })
  }
}
#[inline]
/// Verifies that a buffer of bytes contains a `LaunchSiteDetails_Full`
/// and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_launch_site_details_full_unchecked`.
pub fn root_as_launch_site_details_full(buf: &[u8]) -> Result<LaunchSiteDetails_Full, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root::<LaunchSiteDetails_Full>(buf)
}
#[inline]
/// Verifies that a buffer of bytes contains a size prefixed
/// `LaunchSiteDetails_Full` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `size_prefixed_root_as_launch_site_details_full_unchecked`.
pub fn size_prefixed_root_as_launch_site_details_full(buf: &[u8]) -> Result<LaunchSiteDetails_Full, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root::<LaunchSiteDetails_Full>(buf)
}
#[inline]
/// Verifies, with the given options, that a buffer of bytes
/// contains a `LaunchSiteDetails_Full` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_launch_site_details_full_unchecked`.
pub fn root_as_launch_site_details_full_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<LaunchSiteDetails_Full<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root_with_opts::<LaunchSiteDetails_Full<'b>>(opts, buf)
}
#[inline]
/// Verifies, with the given verifier options, that a buffer of
/// bytes contains a size prefixed `LaunchSiteDetails_Full` and returns
/// it. Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_launch_site_details_full_unchecked`.
pub fn size_prefixed_root_as_launch_site_details_full_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<LaunchSiteDetails_Full<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root_with_opts::<LaunchSiteDetails_Full<'b>>(opts, buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a LaunchSiteDetails_Full and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid `LaunchSiteDetails_Full`.
pub unsafe fn root_as_launch_site_details_full_unchecked(buf: &[u8]) -> LaunchSiteDetails_Full {
  flatbuffers::root_unchecked::<LaunchSiteDetails_Full>(buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a size prefixed LaunchSiteDetails_Full and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid size prefixed `LaunchSiteDetails_Full`.
pub unsafe fn size_prefixed_root_as_launch_site_details_full_unchecked(buf: &[u8]) -> LaunchSiteDetails_Full {
  flatbuffers::size_prefixed_root_unchecked::<LaunchSiteDetails_Full>(buf)
}
pub const LAUNCH_SITE_DETAILS_FULL_IDENTIFIER: &str = "LAUN";

#[inline]
pub fn launch_site_details_full_buffer_has_identifier(buf: &[u8]) -> bool {
  flatbuffers::buffer_has_identifier(buf, LAUNCH_SITE_DETAILS_FULL_IDENTIFIER, false)
}

#[inline]
pub fn launch_site_details_full_size_prefixed_buffer_has_identifier(buf: &[u8]) -> bool {
  flatbuffers::buffer_has_identifier(buf, LAUNCH_SITE_DETAILS_FULL_IDENTIFIER, true)
}

#[inline]
pub fn finish_launch_site_details_full_buffer<'a, 'b, A: flatbuffers::Allocator + 'a>(
    fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
    root: flatbuffers::WIPOffset<LaunchSiteDetails_Full<'a>>) {
  fbb.finish(root, Some(LAUNCH_SITE_DETAILS_FULL_IDENTIFIER));
}

#[inline]
pub fn finish_size_prefixed_launch_site_details_full_buffer<'a, 'b, A: flatbuffers::Allocator + 'a>(fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>, root: flatbuffers::WIPOffset<LaunchSiteDetails_Full<'a>>) {
  fbb.finish_size_prefixed(root, Some(LAUNCH_SITE_DETAILS_FULL_IDENTIFIER));
}
