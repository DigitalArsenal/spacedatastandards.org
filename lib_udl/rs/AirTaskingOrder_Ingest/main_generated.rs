// automatically generated by the FlatBuffers compiler, do not modify


// @generated

use core::mem;
use core::cmp::Ordering;

extern crate flatbuffers;
use self::flatbuffers::{EndianScalar, Follow};

#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
pub const ENUM_MIN_AIR_TASKING_ORDER_INGEST_DATA_MODE_ENUM: i8 = 0;
#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
pub const ENUM_MAX_AIR_TASKING_ORDER_INGEST_DATA_MODE_ENUM: i8 = 3;
#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
#[allow(non_camel_case_types)]
pub const ENUM_VALUES_AIR_TASKING_ORDER_INGEST_DATA_MODE_ENUM: [AirTaskingOrder_Ingest_dataMode_Enum; 4] = [
  AirTaskingOrder_Ingest_dataMode_Enum::REAL,
  AirTaskingOrder_Ingest_dataMode_Enum::TEST,
  AirTaskingOrder_Ingest_dataMode_Enum::SIMULATED,
  AirTaskingOrder_Ingest_dataMode_Enum::EXERCISE,
];

#[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, Default)]
#[repr(transparent)]
pub struct AirTaskingOrder_Ingest_dataMode_Enum(pub i8);
#[allow(non_upper_case_globals)]
impl AirTaskingOrder_Ingest_dataMode_Enum {
  /// Data collected or produced that pertains to real-world objects, events, and analysis.
  pub const REAL: Self = Self(0);
  /// Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  pub const TEST: Self = Self(1);
  /// Synthetic data generated by a model to mimic real-world datasets.
  pub const SIMULATED: Self = Self(2);
  /// Data pertaining to a government or military exercise. The data may include both real and simulated data.
  pub const EXERCISE: Self = Self(3);

  pub const ENUM_MIN: i8 = 0;
  pub const ENUM_MAX: i8 = 3;
  pub const ENUM_VALUES: &'static [Self] = &[
    Self::REAL,
    Self::TEST,
    Self::SIMULATED,
    Self::EXERCISE,
  ];
  /// Returns the variant's name or "" if unknown.
  pub fn variant_name(self) -> Option<&'static str> {
    match self {
      Self::REAL => Some("REAL"),
      Self::TEST => Some("TEST"),
      Self::SIMULATED => Some("SIMULATED"),
      Self::EXERCISE => Some("EXERCISE"),
      _ => None,
    }
  }
}
impl core::fmt::Debug for AirTaskingOrder_Ingest_dataMode_Enum {
  fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
    if let Some(name) = self.variant_name() {
      f.write_str(name)
    } else {
      f.write_fmt(format_args!("<UNKNOWN {:?}>", self.0))
    }
  }
}
impl<'a> flatbuffers::Follow<'a> for AirTaskingOrder_Ingest_dataMode_Enum {
  type Inner = Self;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    let b = flatbuffers::read_scalar_at::<i8>(buf, loc);
    Self(b)
  }
}

impl flatbuffers::Push for AirTaskingOrder_Ingest_dataMode_Enum {
    type Output = AirTaskingOrder_Ingest_dataMode_Enum;
    #[inline]
    unsafe fn push(&self, dst: &mut [u8], _written_len: usize) {
        flatbuffers::emplace_scalar::<i8>(dst, self.0);
    }
}

impl flatbuffers::EndianScalar for AirTaskingOrder_Ingest_dataMode_Enum {
  type Scalar = i8;
  #[inline]
  fn to_little_endian(self) -> i8 {
    self.0.to_le()
  }
  #[inline]
  #[allow(clippy::wrong_self_convention)]
  fn from_little_endian(v: i8) -> Self {
    let b = i8::from_le(v);
    Self(b)
  }
}

impl<'a> flatbuffers::Verifiable for AirTaskingOrder_Ingest_dataMode_Enum {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    i8::run_verifier(v, pos)
  }
}

impl flatbuffers::SimpleToVerifyInSlice for AirTaskingOrder_Ingest_dataMode_Enum {}
pub enum AirTaskingOrder_IngestOffset {}
#[derive(Copy, Clone, PartialEq)]

/// /// Beta Version Air Tasking Order: The ATO is used to task air missions, assign cross force tasking as well as intraservice tasking.
pub struct AirTaskingOrder_Ingest<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for AirTaskingOrder_Ingest<'a> {
  type Inner = AirTaskingOrder_Ingest<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> AirTaskingOrder_Ingest<'a> {
  pub const VT_ID: flatbuffers::VOffsetT = 4;
  pub const VT_CLASSIFICATIONMARKING: flatbuffers::VOffsetT = 6;
  pub const VT_RAWFILEURI: flatbuffers::VOffsetT = 8;
  pub const VT_OPEXERNAME: flatbuffers::VOffsetT = 10;
  pub const VT_MSGORIGINATOR: flatbuffers::VOffsetT = 12;
  pub const VT_MSGSN: flatbuffers::VOffsetT = 14;
  pub const VT_MSGMONTH: flatbuffers::VOffsetT = 16;
  pub const VT_MSGQUALIFIER: flatbuffers::VOffsetT = 18;
  pub const VT_ACKREQIND: flatbuffers::VOffsetT = 20;
  pub const VT_ACKUNITINSTRUCTIONS: flatbuffers::VOffsetT = 22;
  pub const VT_BEGINTS: flatbuffers::VOffsetT = 24;
  pub const VT_ENDTS: flatbuffers::VOffsetT = 26;
  pub const VT_GENTEXT: flatbuffers::VOffsetT = 28;
  pub const VT_ACMSNTASKING: flatbuffers::VOffsetT = 30;
  pub const VT_NAVALFLTOPS: flatbuffers::VOffsetT = 32;
  pub const VT_CREATEDAT: flatbuffers::VOffsetT = 34;
  pub const VT_CREATEDBY: flatbuffers::VOffsetT = 36;
  pub const VT_SOURCE: flatbuffers::VOffsetT = 38;
  pub const VT_SOURCEDL: flatbuffers::VOffsetT = 40;
  pub const VT_ORIGIN: flatbuffers::VOffsetT = 42;
  pub const VT_ORIGNETWORK: flatbuffers::VOffsetT = 44;
  pub const VT_DATAMODE: flatbuffers::VOffsetT = 46;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    AirTaskingOrder_Ingest { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args AirTaskingOrder_IngestArgs<'args>
  ) -> flatbuffers::WIPOffset<AirTaskingOrder_Ingest<'bldr>> {
    let mut builder = AirTaskingOrder_IngestBuilder::new(_fbb);
    if let Some(x) = args.origNetwork { builder.add_origNetwork(x); }
    if let Some(x) = args.origin { builder.add_origin(x); }
    if let Some(x) = args.sourceDL { builder.add_sourceDL(x); }
    if let Some(x) = args.source { builder.add_source(x); }
    if let Some(x) = args.createdBy { builder.add_createdBy(x); }
    if let Some(x) = args.createdAt { builder.add_createdAt(x); }
    if let Some(x) = args.navalFltOps { builder.add_navalFltOps(x); }
    if let Some(x) = args.acMsnTasking { builder.add_acMsnTasking(x); }
    if let Some(x) = args.genText { builder.add_genText(x); }
    if let Some(x) = args.endTs { builder.add_endTs(x); }
    if let Some(x) = args.beginTs { builder.add_beginTs(x); }
    if let Some(x) = args.ackUnitInstructions { builder.add_ackUnitInstructions(x); }
    if let Some(x) = args.ackReqInd { builder.add_ackReqInd(x); }
    if let Some(x) = args.msgQualifier { builder.add_msgQualifier(x); }
    if let Some(x) = args.msgMonth { builder.add_msgMonth(x); }
    if let Some(x) = args.msgSN { builder.add_msgSN(x); }
    if let Some(x) = args.msgOriginator { builder.add_msgOriginator(x); }
    if let Some(x) = args.opExerName { builder.add_opExerName(x); }
    if let Some(x) = args.rawFileURI { builder.add_rawFileURI(x); }
    if let Some(x) = args.classificationMarking { builder.add_classificationMarking(x); }
    if let Some(x) = args.id { builder.add_id(x); }
    builder.add_dataMode(args.dataMode);
    builder.finish()
  }

  pub fn unpack(&self) -> AirTaskingOrder_IngestT {
    let id = self.id().map(|x| {
      x.to_string()
    });
    let classificationMarking = self.classificationMarking().map(|x| {
      x.to_string()
    });
    let rawFileURI = self.rawFileURI().map(|x| {
      x.to_string()
    });
    let opExerName = self.opExerName().map(|x| {
      x.to_string()
    });
    let msgOriginator = self.msgOriginator().map(|x| {
      x.to_string()
    });
    let msgSN = self.msgSN().map(|x| {
      x.to_string()
    });
    let msgMonth = self.msgMonth().map(|x| {
      x.to_string()
    });
    let msgQualifier = self.msgQualifier().map(|x| {
      x.to_string()
    });
    let ackReqInd = self.ackReqInd().map(|x| {
      x.to_string()
    });
    let ackUnitInstructions = self.ackUnitInstructions().map(|x| {
      x.to_string()
    });
    let beginTs = self.beginTs().map(|x| {
      x.to_string()
    });
    let endTs = self.endTs().map(|x| {
      x.to_string()
    });
    let genText = self.genText().map(|x| {
      x.iter().map(|s| s.to_string()).collect()
    });
    let acMsnTasking = self.acMsnTasking().map(|x| {
      x.iter().map(|s| s.to_string()).collect()
    });
    let navalFltOps = self.navalFltOps().map(|x| {
      x.iter().map(|s| s.to_string()).collect()
    });
    let createdAt = self.createdAt().map(|x| {
      x.to_string()
    });
    let createdBy = self.createdBy().map(|x| {
      x.to_string()
    });
    let source = self.source().map(|x| {
      x.to_string()
    });
    let sourceDL = self.sourceDL().map(|x| {
      x.to_string()
    });
    let origin = self.origin().map(|x| {
      x.to_string()
    });
    let origNetwork = self.origNetwork().map(|x| {
      x.to_string()
    });
    let dataMode = self.dataMode();
    AirTaskingOrder_IngestT {
      id,
      classificationMarking,
      rawFileURI,
      opExerName,
      msgOriginator,
      msgSN,
      msgMonth,
      msgQualifier,
      ackReqInd,
      ackUnitInstructions,
      beginTs,
      endTs,
      genText,
      acMsnTasking,
      navalFltOps,
      createdAt,
      createdBy,
      source,
      sourceDL,
      origin,
      origNetwork,
      dataMode,
    }
  }

  /// Unique identifier of the record, auto-generated by the system.
  /// Example: /// Example: POI-ID
  /// Constraints: Minimum length = 1, Maximum length = 36
  #[inline]
  pub fn id(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(AirTaskingOrder_Ingest::VT_ID, None)}
  }
  /// Classification marking of the data in IC/CAPCO Portion-marked format.
  /// Example: /// Example: U
  /// Constraints: Minimum length = 1, Maximum length = 128
  #[inline]
  pub fn classificationMarking(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(AirTaskingOrder_Ingest::VT_CLASSIFICATIONMARKING, None)}
  }
  /// Optional URI location in the document repository of the raw file parsed by the system to produce this record. To download the raw file, prepend https://udl-hostname/scs/download?id= to this value.
  /// Example: /// Example: Example URI
  /// Constraints: Minimum length = 0, Maximum length = 256
  #[inline]
  pub fn rawFileURI(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(AirTaskingOrder_Ingest::VT_RAWFILEURI, None)}
  }
  /// Specifies the unique operation or exercise name, nickname, or codeword assigned to a joint exercise or operation plan.
  /// Example: /// Example: DESERT WIND
  /// Constraints: Minimum length = 1, Maximum length = 64
  #[inline]
  pub fn opExerName(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(AirTaskingOrder_Ingest::VT_OPEXERNAME, None)}
  }
  /// The identifier of the originator of the message.
  /// Example: /// Example: USCENTCOM
  /// Constraints: Minimum length = 0, Maximum length = 36
  #[inline]
  pub fn msgOriginator(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(AirTaskingOrder_Ingest::VT_MSGORIGINATOR, None)}
  }
  /// The unique message identifier sequentially assigned by the originator.
  /// Example: /// Example: ATO A
  /// Constraints: Minimum length = 0, Maximum length = 16
  #[inline]
  pub fn msgSN(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(AirTaskingOrder_Ingest::VT_MSGSN, None)}
  }
  /// The month in which the message originated.
  /// Example: /// Example: OCT
  /// Constraints: Minimum length = 0, Maximum length = 16
  #[inline]
  pub fn msgMonth(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(AirTaskingOrder_Ingest::VT_MSGMONTH, None)}
  }
  /// The qualifier which caveats the message status.
  /// Example: /// Example: CHG
  /// Constraints: Minimum length = 0, Maximum length = 8
  #[inline]
  pub fn msgQualifier(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(AirTaskingOrder_Ingest::VT_MSGQUALIFIER, None)}
  }
  /// The indicator specifying an affirmative or a negatice condition for this message.
  /// Example: /// Example: YES
  /// Constraints: Minimum length = 0, Maximum length = 8
  #[inline]
  pub fn ackReqInd(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(AirTaskingOrder_Ingest::VT_ACKREQIND, None)}
  }
  /// Specifies textual data amplifying the data contained in the acknowledgement requirement indicator (ackRedInd) field or the unit required to acknowledge.
  /// Example: /// Example: INST:45TS
  /// Constraints: Minimum length = 0, Maximum length = 36
  #[inline]
  pub fn ackUnitInstructions(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(AirTaskingOrder_Ingest::VT_ACKUNITINSTRUCTIONS, None)}
  }
  /// The effective begin time for this ATO in ISO 8601 UTC format with millisecond precision.
  /// Example: /// Example: 2023-10-25T12:00:00.123Z
  /// Constraints: No constraints specified.
  #[inline]
  pub fn beginTs(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(AirTaskingOrder_Ingest::VT_BEGINTS, None)}
  }
  /// The effective end time for this ATO in ISO 8601 UTC format with millisecond precision.
  /// Example: /// Example: 2023-10-27T12:00:00.123Z
  /// Constraints: No constraints specified.
  #[inline]
  pub fn endTs(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(AirTaskingOrder_Ingest::VT_ENDTS, None)}
  }
  /// A collection that details special instructions, important information, guidance, and amplifying information regarding this ATO.
  /// Example: /// Example: No example provided.
  /// Constraints: No constraints specified.
  #[inline]
  pub fn genText(&self) -> Option<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>(AirTaskingOrder_Ingest::VT_GENTEXT, None)}
  }
  /// A collection that specifies the tasked country, tasked service, unit and mission level tasking for this ATO.
  /// Example: /// Example: No example provided.
  /// Constraints: No constraints specified.
  #[inline]
  pub fn acMsnTasking(&self) -> Option<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>(AirTaskingOrder_Ingest::VT_ACMSNTASKING, None)}
  }
  /// A collection that specifies the naval flight operations for this ATO.
  /// Example: /// Example: No example provided.
  /// Constraints: No constraints specified.
  #[inline]
  pub fn navalFltOps(&self) -> Option<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>(AirTaskingOrder_Ingest::VT_NAVALFLTOPS, None)}
  }
  /// Time the row was created in the database.
  /// Example: /// Example: 2018-01-01T16:00:00.123Z
  /// Constraints: No constraints specified.
  #[inline]
  pub fn createdAt(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(AirTaskingOrder_Ingest::VT_CREATEDAT, None)}
  }
  /// Application user who created the row in the database.
  /// Example: /// Example: some.user
  /// Constraints: Minimum length = 1, Maximum length = 64
  #[inline]
  pub fn createdBy(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(AirTaskingOrder_Ingest::VT_CREATEDBY, None)}
  }
  /// Source of the data.
  /// Example: /// Example: Bluestaq
  /// Constraints: Minimum length = 1, Maximum length = 36
  #[inline]
  pub fn source(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(AirTaskingOrder_Ingest::VT_SOURCE, None)}
  }
  /// The source data library from which this record was received. This could be a remote or tactical UDL or another data library. If null, the record should be assumed to have originated from the primary Enterprise UDL.
  /// Example: /// Example: AXE
  /// Constraints: Minimum length = 0, Maximum length = 64
  #[inline]
  pub fn sourceDL(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(AirTaskingOrder_Ingest::VT_SOURCEDL, None)}
  }
  /// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
  /// Example: /// Example: THIRD_PARTY_DATASOURCE
  /// Constraints: Minimum length = 0, Maximum length = 64
  #[inline]
  pub fn origin(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(AirTaskingOrder_Ingest::VT_ORIGIN, None)}
  }
  /// The originating source network on which this record was created, auto-populated by the system.
  /// Example: /// Example: ORIG
  /// Constraints: Minimum length = 0, Maximum length = 32
  #[inline]
  pub fn origNetwork(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(AirTaskingOrder_Ingest::VT_ORIGNETWORK, None)}
  }
  /// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
  /// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
  /// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
  /// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
  /// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  /// Example: /// Example: TEST
  /// Constraints: Minimum length = 1, Maximum length = 32
  #[inline]
  pub fn dataMode(&self) -> AirTaskingOrder_Ingest_dataMode_Enum {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<AirTaskingOrder_Ingest_dataMode_Enum>(AirTaskingOrder_Ingest::VT_DATAMODE, Some(AirTaskingOrder_Ingest_dataMode_Enum::REAL)).unwrap()}
  }
}

impl flatbuffers::Verifiable for AirTaskingOrder_Ingest<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("id", Self::VT_ID, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("classificationMarking", Self::VT_CLASSIFICATIONMARKING, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("rawFileURI", Self::VT_RAWFILEURI, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("opExerName", Self::VT_OPEXERNAME, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("msgOriginator", Self::VT_MSGORIGINATOR, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("msgSN", Self::VT_MSGSN, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("msgMonth", Self::VT_MSGMONTH, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("msgQualifier", Self::VT_MSGQUALIFIER, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("ackReqInd", Self::VT_ACKREQIND, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("ackUnitInstructions", Self::VT_ACKUNITINSTRUCTIONS, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("beginTs", Self::VT_BEGINTS, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("endTs", Self::VT_ENDTS, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<&'_ str>>>>("genText", Self::VT_GENTEXT, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<&'_ str>>>>("acMsnTasking", Self::VT_ACMSNTASKING, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<&'_ str>>>>("navalFltOps", Self::VT_NAVALFLTOPS, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("createdAt", Self::VT_CREATEDAT, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("createdBy", Self::VT_CREATEDBY, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("source", Self::VT_SOURCE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("sourceDL", Self::VT_SOURCEDL, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("origin", Self::VT_ORIGIN, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("origNetwork", Self::VT_ORIGNETWORK, false)?
     .visit_field::<AirTaskingOrder_Ingest_dataMode_Enum>("dataMode", Self::VT_DATAMODE, false)?
     .finish();
    Ok(())
  }
}
pub struct AirTaskingOrder_IngestArgs<'a> {
    pub id: Option<flatbuffers::WIPOffset<&'a str>>,
    pub classificationMarking: Option<flatbuffers::WIPOffset<&'a str>>,
    pub rawFileURI: Option<flatbuffers::WIPOffset<&'a str>>,
    pub opExerName: Option<flatbuffers::WIPOffset<&'a str>>,
    pub msgOriginator: Option<flatbuffers::WIPOffset<&'a str>>,
    pub msgSN: Option<flatbuffers::WIPOffset<&'a str>>,
    pub msgMonth: Option<flatbuffers::WIPOffset<&'a str>>,
    pub msgQualifier: Option<flatbuffers::WIPOffset<&'a str>>,
    pub ackReqInd: Option<flatbuffers::WIPOffset<&'a str>>,
    pub ackUnitInstructions: Option<flatbuffers::WIPOffset<&'a str>>,
    pub beginTs: Option<flatbuffers::WIPOffset<&'a str>>,
    pub endTs: Option<flatbuffers::WIPOffset<&'a str>>,
    pub genText: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>,
    pub acMsnTasking: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>,
    pub navalFltOps: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>,
    pub createdAt: Option<flatbuffers::WIPOffset<&'a str>>,
    pub createdBy: Option<flatbuffers::WIPOffset<&'a str>>,
    pub source: Option<flatbuffers::WIPOffset<&'a str>>,
    pub sourceDL: Option<flatbuffers::WIPOffset<&'a str>>,
    pub origin: Option<flatbuffers::WIPOffset<&'a str>>,
    pub origNetwork: Option<flatbuffers::WIPOffset<&'a str>>,
    pub dataMode: AirTaskingOrder_Ingest_dataMode_Enum,
}
impl<'a> Default for AirTaskingOrder_IngestArgs<'a> {
  #[inline]
  fn default() -> Self {
    AirTaskingOrder_IngestArgs {
      id: None,
      classificationMarking: None,
      rawFileURI: None,
      opExerName: None,
      msgOriginator: None,
      msgSN: None,
      msgMonth: None,
      msgQualifier: None,
      ackReqInd: None,
      ackUnitInstructions: None,
      beginTs: None,
      endTs: None,
      genText: None,
      acMsnTasking: None,
      navalFltOps: None,
      createdAt: None,
      createdBy: None,
      source: None,
      sourceDL: None,
      origin: None,
      origNetwork: None,
      dataMode: AirTaskingOrder_Ingest_dataMode_Enum::REAL,
    }
  }
}

pub struct AirTaskingOrder_IngestBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> AirTaskingOrder_IngestBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_id(&mut self, id: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(AirTaskingOrder_Ingest::VT_ID, id);
  }
  #[inline]
  pub fn add_classificationMarking(&mut self, classificationMarking: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(AirTaskingOrder_Ingest::VT_CLASSIFICATIONMARKING, classificationMarking);
  }
  #[inline]
  pub fn add_rawFileURI(&mut self, rawFileURI: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(AirTaskingOrder_Ingest::VT_RAWFILEURI, rawFileURI);
  }
  #[inline]
  pub fn add_opExerName(&mut self, opExerName: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(AirTaskingOrder_Ingest::VT_OPEXERNAME, opExerName);
  }
  #[inline]
  pub fn add_msgOriginator(&mut self, msgOriginator: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(AirTaskingOrder_Ingest::VT_MSGORIGINATOR, msgOriginator);
  }
  #[inline]
  pub fn add_msgSN(&mut self, msgSN: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(AirTaskingOrder_Ingest::VT_MSGSN, msgSN);
  }
  #[inline]
  pub fn add_msgMonth(&mut self, msgMonth: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(AirTaskingOrder_Ingest::VT_MSGMONTH, msgMonth);
  }
  #[inline]
  pub fn add_msgQualifier(&mut self, msgQualifier: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(AirTaskingOrder_Ingest::VT_MSGQUALIFIER, msgQualifier);
  }
  #[inline]
  pub fn add_ackReqInd(&mut self, ackReqInd: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(AirTaskingOrder_Ingest::VT_ACKREQIND, ackReqInd);
  }
  #[inline]
  pub fn add_ackUnitInstructions(&mut self, ackUnitInstructions: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(AirTaskingOrder_Ingest::VT_ACKUNITINSTRUCTIONS, ackUnitInstructions);
  }
  #[inline]
  pub fn add_beginTs(&mut self, beginTs: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(AirTaskingOrder_Ingest::VT_BEGINTS, beginTs);
  }
  #[inline]
  pub fn add_endTs(&mut self, endTs: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(AirTaskingOrder_Ingest::VT_ENDTS, endTs);
  }
  #[inline]
  pub fn add_genText(&mut self, genText: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<&'b  str>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(AirTaskingOrder_Ingest::VT_GENTEXT, genText);
  }
  #[inline]
  pub fn add_acMsnTasking(&mut self, acMsnTasking: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<&'b  str>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(AirTaskingOrder_Ingest::VT_ACMSNTASKING, acMsnTasking);
  }
  #[inline]
  pub fn add_navalFltOps(&mut self, navalFltOps: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<&'b  str>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(AirTaskingOrder_Ingest::VT_NAVALFLTOPS, navalFltOps);
  }
  #[inline]
  pub fn add_createdAt(&mut self, createdAt: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(AirTaskingOrder_Ingest::VT_CREATEDAT, createdAt);
  }
  #[inline]
  pub fn add_createdBy(&mut self, createdBy: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(AirTaskingOrder_Ingest::VT_CREATEDBY, createdBy);
  }
  #[inline]
  pub fn add_source(&mut self, source: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(AirTaskingOrder_Ingest::VT_SOURCE, source);
  }
  #[inline]
  pub fn add_sourceDL(&mut self, sourceDL: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(AirTaskingOrder_Ingest::VT_SOURCEDL, sourceDL);
  }
  #[inline]
  pub fn add_origin(&mut self, origin: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(AirTaskingOrder_Ingest::VT_ORIGIN, origin);
  }
  #[inline]
  pub fn add_origNetwork(&mut self, origNetwork: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(AirTaskingOrder_Ingest::VT_ORIGNETWORK, origNetwork);
  }
  #[inline]
  pub fn add_dataMode(&mut self, dataMode: AirTaskingOrder_Ingest_dataMode_Enum) {
    self.fbb_.push_slot::<AirTaskingOrder_Ingest_dataMode_Enum>(AirTaskingOrder_Ingest::VT_DATAMODE, dataMode, AirTaskingOrder_Ingest_dataMode_Enum::REAL);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> AirTaskingOrder_IngestBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    AirTaskingOrder_IngestBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<AirTaskingOrder_Ingest<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for AirTaskingOrder_Ingest<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("AirTaskingOrder_Ingest");
      ds.field("id", &self.id());
      ds.field("classificationMarking", &self.classificationMarking());
      ds.field("rawFileURI", &self.rawFileURI());
      ds.field("opExerName", &self.opExerName());
      ds.field("msgOriginator", &self.msgOriginator());
      ds.field("msgSN", &self.msgSN());
      ds.field("msgMonth", &self.msgMonth());
      ds.field("msgQualifier", &self.msgQualifier());
      ds.field("ackReqInd", &self.ackReqInd());
      ds.field("ackUnitInstructions", &self.ackUnitInstructions());
      ds.field("beginTs", &self.beginTs());
      ds.field("endTs", &self.endTs());
      ds.field("genText", &self.genText());
      ds.field("acMsnTasking", &self.acMsnTasking());
      ds.field("navalFltOps", &self.navalFltOps());
      ds.field("createdAt", &self.createdAt());
      ds.field("createdBy", &self.createdBy());
      ds.field("source", &self.source());
      ds.field("sourceDL", &self.sourceDL());
      ds.field("origin", &self.origin());
      ds.field("origNetwork", &self.origNetwork());
      ds.field("dataMode", &self.dataMode());
      ds.finish()
  }
}
#[non_exhaustive]
#[derive(Debug, Clone, PartialEq)]
pub struct AirTaskingOrder_IngestT {
  pub id: Option<String>,
  pub classificationMarking: Option<String>,
  pub rawFileURI: Option<String>,
  pub opExerName: Option<String>,
  pub msgOriginator: Option<String>,
  pub msgSN: Option<String>,
  pub msgMonth: Option<String>,
  pub msgQualifier: Option<String>,
  pub ackReqInd: Option<String>,
  pub ackUnitInstructions: Option<String>,
  pub beginTs: Option<String>,
  pub endTs: Option<String>,
  pub genText: Option<Vec<String>>,
  pub acMsnTasking: Option<Vec<String>>,
  pub navalFltOps: Option<Vec<String>>,
  pub createdAt: Option<String>,
  pub createdBy: Option<String>,
  pub source: Option<String>,
  pub sourceDL: Option<String>,
  pub origin: Option<String>,
  pub origNetwork: Option<String>,
  pub dataMode: AirTaskingOrder_Ingest_dataMode_Enum,
}
impl Default for AirTaskingOrder_IngestT {
  fn default() -> Self {
    Self {
      id: None,
      classificationMarking: None,
      rawFileURI: None,
      opExerName: None,
      msgOriginator: None,
      msgSN: None,
      msgMonth: None,
      msgQualifier: None,
      ackReqInd: None,
      ackUnitInstructions: None,
      beginTs: None,
      endTs: None,
      genText: None,
      acMsnTasking: None,
      navalFltOps: None,
      createdAt: None,
      createdBy: None,
      source: None,
      sourceDL: None,
      origin: None,
      origNetwork: None,
      dataMode: AirTaskingOrder_Ingest_dataMode_Enum::REAL,
    }
  }
}
impl AirTaskingOrder_IngestT {
  pub fn pack<'b, A: flatbuffers::Allocator + 'b>(
    &self,
    _fbb: &mut flatbuffers::FlatBufferBuilder<'b, A>
  ) -> flatbuffers::WIPOffset<AirTaskingOrder_Ingest<'b>> {
    let id = self.id.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let classificationMarking = self.classificationMarking.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let rawFileURI = self.rawFileURI.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let opExerName = self.opExerName.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let msgOriginator = self.msgOriginator.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let msgSN = self.msgSN.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let msgMonth = self.msgMonth.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let msgQualifier = self.msgQualifier.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let ackReqInd = self.ackReqInd.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let ackUnitInstructions = self.ackUnitInstructions.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let beginTs = self.beginTs.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let endTs = self.endTs.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let genText = self.genText.as_ref().map(|x|{
      let w: Vec<_> = x.iter().map(|s| _fbb.create_string(s)).collect();_fbb.create_vector(&w)
    });
    let acMsnTasking = self.acMsnTasking.as_ref().map(|x|{
      let w: Vec<_> = x.iter().map(|s| _fbb.create_string(s)).collect();_fbb.create_vector(&w)
    });
    let navalFltOps = self.navalFltOps.as_ref().map(|x|{
      let w: Vec<_> = x.iter().map(|s| _fbb.create_string(s)).collect();_fbb.create_vector(&w)
    });
    let createdAt = self.createdAt.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let createdBy = self.createdBy.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let source = self.source.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let sourceDL = self.sourceDL.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let origin = self.origin.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let origNetwork = self.origNetwork.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let dataMode = self.dataMode;
    AirTaskingOrder_Ingest::create(_fbb, &AirTaskingOrder_IngestArgs{
      id,
      classificationMarking,
      rawFileURI,
      opExerName,
      msgOriginator,
      msgSN,
      msgMonth,
      msgQualifier,
      ackReqInd,
      ackUnitInstructions,
      beginTs,
      endTs,
      genText,
      acMsnTasking,
      navalFltOps,
      createdAt,
      createdBy,
      source,
      sourceDL,
      origin,
      origNetwork,
      dataMode,
    })
  }
}
#[inline]
/// Verifies that a buffer of bytes contains a `AirTaskingOrder_Ingest`
/// and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_air_tasking_order_ingest_unchecked`.
pub fn root_as_air_tasking_order_ingest(buf: &[u8]) -> Result<AirTaskingOrder_Ingest, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root::<AirTaskingOrder_Ingest>(buf)
}
#[inline]
/// Verifies that a buffer of bytes contains a size prefixed
/// `AirTaskingOrder_Ingest` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `size_prefixed_root_as_air_tasking_order_ingest_unchecked`.
pub fn size_prefixed_root_as_air_tasking_order_ingest(buf: &[u8]) -> Result<AirTaskingOrder_Ingest, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root::<AirTaskingOrder_Ingest>(buf)
}
#[inline]
/// Verifies, with the given options, that a buffer of bytes
/// contains a `AirTaskingOrder_Ingest` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_air_tasking_order_ingest_unchecked`.
pub fn root_as_air_tasking_order_ingest_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<AirTaskingOrder_Ingest<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root_with_opts::<AirTaskingOrder_Ingest<'b>>(opts, buf)
}
#[inline]
/// Verifies, with the given verifier options, that a buffer of
/// bytes contains a size prefixed `AirTaskingOrder_Ingest` and returns
/// it. Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_air_tasking_order_ingest_unchecked`.
pub fn size_prefixed_root_as_air_tasking_order_ingest_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<AirTaskingOrder_Ingest<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root_with_opts::<AirTaskingOrder_Ingest<'b>>(opts, buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a AirTaskingOrder_Ingest and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid `AirTaskingOrder_Ingest`.
pub unsafe fn root_as_air_tasking_order_ingest_unchecked(buf: &[u8]) -> AirTaskingOrder_Ingest {
  flatbuffers::root_unchecked::<AirTaskingOrder_Ingest>(buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a size prefixed AirTaskingOrder_Ingest and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid size prefixed `AirTaskingOrder_Ingest`.
pub unsafe fn size_prefixed_root_as_air_tasking_order_ingest_unchecked(buf: &[u8]) -> AirTaskingOrder_Ingest {
  flatbuffers::size_prefixed_root_unchecked::<AirTaskingOrder_Ingest>(buf)
}
pub const AIR_TASKING_ORDER_INGEST_IDENTIFIER: &str = "AIRT";

#[inline]
pub fn air_tasking_order_ingest_buffer_has_identifier(buf: &[u8]) -> bool {
  flatbuffers::buffer_has_identifier(buf, AIR_TASKING_ORDER_INGEST_IDENTIFIER, false)
}

#[inline]
pub fn air_tasking_order_ingest_size_prefixed_buffer_has_identifier(buf: &[u8]) -> bool {
  flatbuffers::buffer_has_identifier(buf, AIR_TASKING_ORDER_INGEST_IDENTIFIER, true)
}

#[inline]
pub fn finish_air_tasking_order_ingest_buffer<'a, 'b, A: flatbuffers::Allocator + 'a>(
    fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
    root: flatbuffers::WIPOffset<AirTaskingOrder_Ingest<'a>>) {
  fbb.finish(root, Some(AIR_TASKING_ORDER_INGEST_IDENTIFIER));
}

#[inline]
pub fn finish_size_prefixed_air_tasking_order_ingest_buffer<'a, 'b, A: flatbuffers::Allocator + 'a>(fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>, root: flatbuffers::WIPOffset<AirTaskingOrder_Ingest<'a>>) {
  fbb.finish_size_prefixed(root, Some(AIR_TASKING_ORDER_INGEST_IDENTIFIER));
}
