// automatically generated by the FlatBuffers compiler, do not modify


// @generated

use core::mem;
use core::cmp::Ordering;

extern crate flatbuffers;
use self::flatbuffers::{EndianScalar, Follow};

pub enum ISRCollectionExploitationRequirement_FullOffset {}
#[derive(Copy, Clone, PartialEq)]

/// /// What it is that is trying to be exploited.
pub struct ISRCollectionExploitationRequirement_Full<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for ISRCollectionExploitationRequirement_Full<'a> {
  type Inner = ISRCollectionExploitationRequirement_Full<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> ISRCollectionExploitationRequirement_Full<'a> {
  pub const VT_ID: flatbuffers::VOffsetT = 4;
  pub const VT_AMPLIFICATION: flatbuffers::VOffsetT = 6;
  pub const VT_REPORTINGCRITERIA: flatbuffers::VOffsetT = 8;
  pub const VT_DISSEMINATION: flatbuffers::VOffsetT = 10;
  pub const VT_EEI: flatbuffers::VOffsetT = 12;
  pub const VT_POC: flatbuffers::VOffsetT = 14;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    ISRCollectionExploitationRequirement_Full { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args ISRCollectionExploitationRequirement_FullArgs<'args>
  ) -> flatbuffers::WIPOffset<ISRCollectionExploitationRequirement_Full<'bldr>> {
    let mut builder = ISRCollectionExploitationRequirement_FullBuilder::new(_fbb);
    if let Some(x) = args.poc { builder.add_poc(x); }
    if let Some(x) = args.eei { builder.add_eei(x); }
    if let Some(x) = args.dissemination { builder.add_dissemination(x); }
    if let Some(x) = args.reportingCriteria { builder.add_reportingCriteria(x); }
    if let Some(x) = args.amplification { builder.add_amplification(x); }
    if let Some(x) = args.id { builder.add_id(x); }
    builder.finish()
  }

  pub fn unpack(&self) -> ISRCollectionExploitationRequirement_FullT {
    let id = self.id().map(|x| {
      x.to_string()
    });
    let amplification = self.amplification().map(|x| {
      x.to_string()
    });
    let reportingCriteria = self.reportingCriteria().map(|x| {
      x.to_string()
    });
    let dissemination = self.dissemination().map(|x| {
      x.to_string()
    });
    let eei = self.eei().map(|x| {
      x.to_string()
    });
    let poc = self.poc().map(|x| {
      x.to_string()
    });
    ISRCollectionExploitationRequirement_FullT {
      id,
      amplification,
      reportingCriteria,
      dissemination,
      eei,
      poc,
    }
  }

  /// Exploitation requirement id.
  /// Example: /// Example: ISRCOLLECTIONEXPLOITATIONREQUIREMENT
  /// Constraints: Minimum length = 0, Maximum length = 36
  #[inline]
  pub fn id(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(ISRCollectionExploitationRequirement_Full::VT_ID, None)}
  }
  /// Amplifying data for the exploitation requirement.
  /// Example: /// Example: AMPLIFICATION
  /// Constraints: Minimum length = 0, Maximum length = 256
  #[inline]
  pub fn amplification(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(ISRCollectionExploitationRequirement_Full::VT_AMPLIFICATION, None)}
  }
  /// The reporting criteria of the collection requirement.
  /// Example: /// Example: CRITERIA
  /// Constraints: Minimum length = 0, Maximum length = 32
  #[inline]
  pub fn reportingCriteria(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(ISRCollectionExploitationRequirement_Full::VT_REPORTINGCRITERIA, None)}
  }
  /// List of e-mails to disseminate collection verification information.
  /// Example: /// Example: EMAILS
  /// Constraints: Minimum length = 0, Maximum length = 32
  #[inline]
  pub fn dissemination(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(ISRCollectionExploitationRequirement_Full::VT_DISSEMINATION, None)}
  }
  /// Essential Elements of Information.
  /// Example: /// Example: ESSENTIAL_ELEMENTS
  /// Constraints: Minimum length = 0, Maximum length = 32
  #[inline]
  pub fn eei(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(ISRCollectionExploitationRequirement_Full::VT_EEI, None)}
  }
  /// No description provided.
  /// Example: /// Example: No example provided.
  /// Constraints: No constraints specified.
  #[inline]
  pub fn poc(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(ISRCollectionExploitationRequirement_Full::VT_POC, None)}
  }
}

impl flatbuffers::Verifiable for ISRCollectionExploitationRequirement_Full<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("id", Self::VT_ID, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("amplification", Self::VT_AMPLIFICATION, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("reportingCriteria", Self::VT_REPORTINGCRITERIA, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("dissemination", Self::VT_DISSEMINATION, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("eei", Self::VT_EEI, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("poc", Self::VT_POC, false)?
     .finish();
    Ok(())
  }
}
pub struct ISRCollectionExploitationRequirement_FullArgs<'a> {
    pub id: Option<flatbuffers::WIPOffset<&'a str>>,
    pub amplification: Option<flatbuffers::WIPOffset<&'a str>>,
    pub reportingCriteria: Option<flatbuffers::WIPOffset<&'a str>>,
    pub dissemination: Option<flatbuffers::WIPOffset<&'a str>>,
    pub eei: Option<flatbuffers::WIPOffset<&'a str>>,
    pub poc: Option<flatbuffers::WIPOffset<&'a str>>,
}
impl<'a> Default for ISRCollectionExploitationRequirement_FullArgs<'a> {
  #[inline]
  fn default() -> Self {
    ISRCollectionExploitationRequirement_FullArgs {
      id: None,
      amplification: None,
      reportingCriteria: None,
      dissemination: None,
      eei: None,
      poc: None,
    }
  }
}

pub struct ISRCollectionExploitationRequirement_FullBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> ISRCollectionExploitationRequirement_FullBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_id(&mut self, id: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(ISRCollectionExploitationRequirement_Full::VT_ID, id);
  }
  #[inline]
  pub fn add_amplification(&mut self, amplification: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(ISRCollectionExploitationRequirement_Full::VT_AMPLIFICATION, amplification);
  }
  #[inline]
  pub fn add_reportingCriteria(&mut self, reportingCriteria: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(ISRCollectionExploitationRequirement_Full::VT_REPORTINGCRITERIA, reportingCriteria);
  }
  #[inline]
  pub fn add_dissemination(&mut self, dissemination: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(ISRCollectionExploitationRequirement_Full::VT_DISSEMINATION, dissemination);
  }
  #[inline]
  pub fn add_eei(&mut self, eei: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(ISRCollectionExploitationRequirement_Full::VT_EEI, eei);
  }
  #[inline]
  pub fn add_poc(&mut self, poc: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(ISRCollectionExploitationRequirement_Full::VT_POC, poc);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> ISRCollectionExploitationRequirement_FullBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    ISRCollectionExploitationRequirement_FullBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<ISRCollectionExploitationRequirement_Full<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for ISRCollectionExploitationRequirement_Full<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("ISRCollectionExploitationRequirement_Full");
      ds.field("id", &self.id());
      ds.field("amplification", &self.amplification());
      ds.field("reportingCriteria", &self.reportingCriteria());
      ds.field("dissemination", &self.dissemination());
      ds.field("eei", &self.eei());
      ds.field("poc", &self.poc());
      ds.finish()
  }
}
#[non_exhaustive]
#[derive(Debug, Clone, PartialEq)]
pub struct ISRCollectionExploitationRequirement_FullT {
  pub id: Option<String>,
  pub amplification: Option<String>,
  pub reportingCriteria: Option<String>,
  pub dissemination: Option<String>,
  pub eei: Option<String>,
  pub poc: Option<String>,
}
impl Default for ISRCollectionExploitationRequirement_FullT {
  fn default() -> Self {
    Self {
      id: None,
      amplification: None,
      reportingCriteria: None,
      dissemination: None,
      eei: None,
      poc: None,
    }
  }
}
impl ISRCollectionExploitationRequirement_FullT {
  pub fn pack<'b, A: flatbuffers::Allocator + 'b>(
    &self,
    _fbb: &mut flatbuffers::FlatBufferBuilder<'b, A>
  ) -> flatbuffers::WIPOffset<ISRCollectionExploitationRequirement_Full<'b>> {
    let id = self.id.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let amplification = self.amplification.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let reportingCriteria = self.reportingCriteria.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let dissemination = self.dissemination.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let eei = self.eei.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let poc = self.poc.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    ISRCollectionExploitationRequirement_Full::create(_fbb, &ISRCollectionExploitationRequirement_FullArgs{
      id,
      amplification,
      reportingCriteria,
      dissemination,
      eei,
      poc,
    })
  }
}
#[inline]
/// Verifies that a buffer of bytes contains a `ISRCollectionExploitationRequirement_Full`
/// and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_isrcollection_exploitation_requirement_full_unchecked`.
pub fn root_as_isrcollection_exploitation_requirement_full(buf: &[u8]) -> Result<ISRCollectionExploitationRequirement_Full, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root::<ISRCollectionExploitationRequirement_Full>(buf)
}
#[inline]
/// Verifies that a buffer of bytes contains a size prefixed
/// `ISRCollectionExploitationRequirement_Full` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `size_prefixed_root_as_isrcollection_exploitation_requirement_full_unchecked`.
pub fn size_prefixed_root_as_isrcollection_exploitation_requirement_full(buf: &[u8]) -> Result<ISRCollectionExploitationRequirement_Full, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root::<ISRCollectionExploitationRequirement_Full>(buf)
}
#[inline]
/// Verifies, with the given options, that a buffer of bytes
/// contains a `ISRCollectionExploitationRequirement_Full` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_isrcollection_exploitation_requirement_full_unchecked`.
pub fn root_as_isrcollection_exploitation_requirement_full_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<ISRCollectionExploitationRequirement_Full<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root_with_opts::<ISRCollectionExploitationRequirement_Full<'b>>(opts, buf)
}
#[inline]
/// Verifies, with the given verifier options, that a buffer of
/// bytes contains a size prefixed `ISRCollectionExploitationRequirement_Full` and returns
/// it. Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_isrcollection_exploitation_requirement_full_unchecked`.
pub fn size_prefixed_root_as_isrcollection_exploitation_requirement_full_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<ISRCollectionExploitationRequirement_Full<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root_with_opts::<ISRCollectionExploitationRequirement_Full<'b>>(opts, buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a ISRCollectionExploitationRequirement_Full and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid `ISRCollectionExploitationRequirement_Full`.
pub unsafe fn root_as_isrcollection_exploitation_requirement_full_unchecked(buf: &[u8]) -> ISRCollectionExploitationRequirement_Full {
  flatbuffers::root_unchecked::<ISRCollectionExploitationRequirement_Full>(buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a size prefixed ISRCollectionExploitationRequirement_Full and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid size prefixed `ISRCollectionExploitationRequirement_Full`.
pub unsafe fn size_prefixed_root_as_isrcollection_exploitation_requirement_full_unchecked(buf: &[u8]) -> ISRCollectionExploitationRequirement_Full {
  flatbuffers::size_prefixed_root_unchecked::<ISRCollectionExploitationRequirement_Full>(buf)
}
pub const ISRCOLLECTION_EXPLOITATION_REQUIREMENT_FULL_IDENTIFIER: &str = "ISRC";

#[inline]
pub fn isrcollection_exploitation_requirement_full_buffer_has_identifier(buf: &[u8]) -> bool {
  flatbuffers::buffer_has_identifier(buf, ISRCOLLECTION_EXPLOITATION_REQUIREMENT_FULL_IDENTIFIER, false)
}

#[inline]
pub fn isrcollection_exploitation_requirement_full_size_prefixed_buffer_has_identifier(buf: &[u8]) -> bool {
  flatbuffers::buffer_has_identifier(buf, ISRCOLLECTION_EXPLOITATION_REQUIREMENT_FULL_IDENTIFIER, true)
}

#[inline]
pub fn finish_isrcollection_exploitation_requirement_full_buffer<'a, 'b, A: flatbuffers::Allocator + 'a>(
    fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
    root: flatbuffers::WIPOffset<ISRCollectionExploitationRequirement_Full<'a>>) {
  fbb.finish(root, Some(ISRCOLLECTION_EXPLOITATION_REQUIREMENT_FULL_IDENTIFIER));
}

#[inline]
pub fn finish_size_prefixed_isrcollection_exploitation_requirement_full_buffer<'a, 'b, A: flatbuffers::Allocator + 'a>(fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>, root: flatbuffers::WIPOffset<ISRCollectionExploitationRequirement_Full<'a>>) {
  fbb.finish_size_prefixed(root, Some(ISRCOLLECTION_EXPLOITATION_REQUIREMENT_FULL_IDENTIFIER));
}
