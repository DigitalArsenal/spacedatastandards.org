// automatically generated by the FlatBuffers compiler, do not modify


// @generated

use core::mem;
use core::cmp::Ordering;

extern crate flatbuffers;
use self::flatbuffers::{EndianScalar, Follow};

pub enum MtiMission_IngestOffset {}
#[derive(Copy, Clone, PartialEq)]

/// /// Information on the mission and flight plans, the type and configuration of the platform, and the reference time.
pub struct MtiMission_Ingest<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for MtiMission_Ingest<'a> {
  type Inner = MtiMission_Ingest<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> MtiMission_Ingest<'a> {
  pub const VT_M1: flatbuffers::VOffsetT = 4;
  pub const VT_M2: flatbuffers::VOffsetT = 6;
  pub const VT_M3: flatbuffers::VOffsetT = 8;
  pub const VT_M4: flatbuffers::VOffsetT = 10;
  pub const VT_MSNREFTS: flatbuffers::VOffsetT = 12;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    MtiMission_Ingest { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args MtiMission_IngestArgs<'args>
  ) -> flatbuffers::WIPOffset<MtiMission_Ingest<'bldr>> {
    let mut builder = MtiMission_IngestBuilder::new(_fbb);
    if let Some(x) = args.msnRefTs { builder.add_msnRefTs(x); }
    if let Some(x) = args.m4 { builder.add_m4(x); }
    if let Some(x) = args.m3 { builder.add_m3(x); }
    if let Some(x) = args.m2 { builder.add_m2(x); }
    if let Some(x) = args.m1 { builder.add_m1(x); }
    builder.finish()
  }

  pub fn unpack(&self) -> MtiMission_IngestT {
    let m1 = self.m1().map(|x| {
      x.to_string()
    });
    let m2 = self.m2().map(|x| {
      x.to_string()
    });
    let m3 = self.m3().map(|x| {
      x.to_string()
    });
    let m4 = self.m4().map(|x| {
      x.to_string()
    });
    let msnRefTs = self.msnRefTs().map(|x| {
      x.to_string()
    });
    MtiMission_IngestT {
      m1,
      m2,
      m3,
      m4,
      msnRefTs,
    }
  }

  /// The mission plan id.
  /// Example: /// Example: M1-ID
  /// Constraints: Minimum length = 0, Maximum length = 64
  #[inline]
  pub fn m1(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(MtiMission_Ingest::VT_M1, None)}
  }
  /// Unique identification of the flight plan.
  /// Example: /// Example: M2-ID
  /// Constraints: Minimum length = 0, Maximum length = 64
  #[inline]
  pub fn m2(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(MtiMission_Ingest::VT_M2, None)}
  }
  /// Platform type that originated the data.
  /// Example: /// Example: PLATFORM
  /// Constraints: Minimum length = 0, Maximum length = 64
  #[inline]
  pub fn m3(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(MtiMission_Ingest::VT_M3, None)}
  }
  /// Identification of the platform variant, modifications, etc.
  /// Example: /// Example: IDENT
  /// Constraints: Minimum length = 0, Maximum length = 16
  #[inline]
  pub fn m4(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(MtiMission_Ingest::VT_M4, None)}
  }
  /// Mission origination date.
  /// Example: /// Example: 2018-01-01
  /// Constraints: No constraints specified.
  #[inline]
  pub fn msnRefTs(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(MtiMission_Ingest::VT_MSNREFTS, None)}
  }
}

impl flatbuffers::Verifiable for MtiMission_Ingest<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("m1", Self::VT_M1, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("m2", Self::VT_M2, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("m3", Self::VT_M3, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("m4", Self::VT_M4, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("msnRefTs", Self::VT_MSNREFTS, false)?
     .finish();
    Ok(())
  }
}
pub struct MtiMission_IngestArgs<'a> {
    pub m1: Option<flatbuffers::WIPOffset<&'a str>>,
    pub m2: Option<flatbuffers::WIPOffset<&'a str>>,
    pub m3: Option<flatbuffers::WIPOffset<&'a str>>,
    pub m4: Option<flatbuffers::WIPOffset<&'a str>>,
    pub msnRefTs: Option<flatbuffers::WIPOffset<&'a str>>,
}
impl<'a> Default for MtiMission_IngestArgs<'a> {
  #[inline]
  fn default() -> Self {
    MtiMission_IngestArgs {
      m1: None,
      m2: None,
      m3: None,
      m4: None,
      msnRefTs: None,
    }
  }
}

pub struct MtiMission_IngestBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> MtiMission_IngestBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_m1(&mut self, m1: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(MtiMission_Ingest::VT_M1, m1);
  }
  #[inline]
  pub fn add_m2(&mut self, m2: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(MtiMission_Ingest::VT_M2, m2);
  }
  #[inline]
  pub fn add_m3(&mut self, m3: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(MtiMission_Ingest::VT_M3, m3);
  }
  #[inline]
  pub fn add_m4(&mut self, m4: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(MtiMission_Ingest::VT_M4, m4);
  }
  #[inline]
  pub fn add_msnRefTs(&mut self, msnRefTs: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(MtiMission_Ingest::VT_MSNREFTS, msnRefTs);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> MtiMission_IngestBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    MtiMission_IngestBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<MtiMission_Ingest<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for MtiMission_Ingest<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("MtiMission_Ingest");
      ds.field("m1", &self.m1());
      ds.field("m2", &self.m2());
      ds.field("m3", &self.m3());
      ds.field("m4", &self.m4());
      ds.field("msnRefTs", &self.msnRefTs());
      ds.finish()
  }
}
#[non_exhaustive]
#[derive(Debug, Clone, PartialEq)]
pub struct MtiMission_IngestT {
  pub m1: Option<String>,
  pub m2: Option<String>,
  pub m3: Option<String>,
  pub m4: Option<String>,
  pub msnRefTs: Option<String>,
}
impl Default for MtiMission_IngestT {
  fn default() -> Self {
    Self {
      m1: None,
      m2: None,
      m3: None,
      m4: None,
      msnRefTs: None,
    }
  }
}
impl MtiMission_IngestT {
  pub fn pack<'b, A: flatbuffers::Allocator + 'b>(
    &self,
    _fbb: &mut flatbuffers::FlatBufferBuilder<'b, A>
  ) -> flatbuffers::WIPOffset<MtiMission_Ingest<'b>> {
    let m1 = self.m1.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let m2 = self.m2.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let m3 = self.m3.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let m4 = self.m4.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let msnRefTs = self.msnRefTs.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    MtiMission_Ingest::create(_fbb, &MtiMission_IngestArgs{
      m1,
      m2,
      m3,
      m4,
      msnRefTs,
    })
  }
}
#[inline]
/// Verifies that a buffer of bytes contains a `MtiMission_Ingest`
/// and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_mti_mission_ingest_unchecked`.
pub fn root_as_mti_mission_ingest(buf: &[u8]) -> Result<MtiMission_Ingest, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root::<MtiMission_Ingest>(buf)
}
#[inline]
/// Verifies that a buffer of bytes contains a size prefixed
/// `MtiMission_Ingest` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `size_prefixed_root_as_mti_mission_ingest_unchecked`.
pub fn size_prefixed_root_as_mti_mission_ingest(buf: &[u8]) -> Result<MtiMission_Ingest, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root::<MtiMission_Ingest>(buf)
}
#[inline]
/// Verifies, with the given options, that a buffer of bytes
/// contains a `MtiMission_Ingest` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_mti_mission_ingest_unchecked`.
pub fn root_as_mti_mission_ingest_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<MtiMission_Ingest<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root_with_opts::<MtiMission_Ingest<'b>>(opts, buf)
}
#[inline]
/// Verifies, with the given verifier options, that a buffer of
/// bytes contains a size prefixed `MtiMission_Ingest` and returns
/// it. Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_mti_mission_ingest_unchecked`.
pub fn size_prefixed_root_as_mti_mission_ingest_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<MtiMission_Ingest<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root_with_opts::<MtiMission_Ingest<'b>>(opts, buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a MtiMission_Ingest and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid `MtiMission_Ingest`.
pub unsafe fn root_as_mti_mission_ingest_unchecked(buf: &[u8]) -> MtiMission_Ingest {
  flatbuffers::root_unchecked::<MtiMission_Ingest>(buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a size prefixed MtiMission_Ingest and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid size prefixed `MtiMission_Ingest`.
pub unsafe fn size_prefixed_root_as_mti_mission_ingest_unchecked(buf: &[u8]) -> MtiMission_Ingest {
  flatbuffers::size_prefixed_root_unchecked::<MtiMission_Ingest>(buf)
}
pub const MTI_MISSION_INGEST_IDENTIFIER: &str = "MTIM";

#[inline]
pub fn mti_mission_ingest_buffer_has_identifier(buf: &[u8]) -> bool {
  flatbuffers::buffer_has_identifier(buf, MTI_MISSION_INGEST_IDENTIFIER, false)
}

#[inline]
pub fn mti_mission_ingest_size_prefixed_buffer_has_identifier(buf: &[u8]) -> bool {
  flatbuffers::buffer_has_identifier(buf, MTI_MISSION_INGEST_IDENTIFIER, true)
}

#[inline]
pub fn finish_mti_mission_ingest_buffer<'a, 'b, A: flatbuffers::Allocator + 'a>(
    fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
    root: flatbuffers::WIPOffset<MtiMission_Ingest<'a>>) {
  fbb.finish(root, Some(MTI_MISSION_INGEST_IDENTIFIER));
}

#[inline]
pub fn finish_size_prefixed_mti_mission_ingest_buffer<'a, 'b, A: flatbuffers::Allocator + 'a>(fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>, root: flatbuffers::WIPOffset<MtiMission_Ingest<'a>>) {
  fbb.finish_size_prefixed(root, Some(MTI_MISSION_INGEST_IDENTIFIER));
}
