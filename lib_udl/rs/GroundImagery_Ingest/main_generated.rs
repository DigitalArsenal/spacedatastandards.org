// automatically generated by the FlatBuffers compiler, do not modify


// @generated

use core::mem;
use core::cmp::Ordering;

extern crate flatbuffers;
use self::flatbuffers::{EndianScalar, Follow};

#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
pub const ENUM_MIN_GROUND_IMAGERY_INGEST_DATA_MODE_ENUM: i8 = 0;
#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
pub const ENUM_MAX_GROUND_IMAGERY_INGEST_DATA_MODE_ENUM: i8 = 3;
#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
#[allow(non_camel_case_types)]
pub const ENUM_VALUES_GROUND_IMAGERY_INGEST_DATA_MODE_ENUM: [GroundImagery_Ingest_dataMode_Enum; 4] = [
  GroundImagery_Ingest_dataMode_Enum::REAL,
  GroundImagery_Ingest_dataMode_Enum::TEST,
  GroundImagery_Ingest_dataMode_Enum::SIMULATED,
  GroundImagery_Ingest_dataMode_Enum::EXERCISE,
];

#[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, Default)]
#[repr(transparent)]
pub struct GroundImagery_Ingest_dataMode_Enum(pub i8);
#[allow(non_upper_case_globals)]
impl GroundImagery_Ingest_dataMode_Enum {
  /// Data collected or produced that pertains to real-world objects, events, and analysis.
  pub const REAL: Self = Self(0);
  /// Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  pub const TEST: Self = Self(1);
  /// Synthetic data generated by a model to mimic real-world datasets.
  pub const SIMULATED: Self = Self(2);
  /// Data pertaining to a government or military exercise. The data may include both real and simulated data.
  pub const EXERCISE: Self = Self(3);

  pub const ENUM_MIN: i8 = 0;
  pub const ENUM_MAX: i8 = 3;
  pub const ENUM_VALUES: &'static [Self] = &[
    Self::REAL,
    Self::TEST,
    Self::SIMULATED,
    Self::EXERCISE,
  ];
  /// Returns the variant's name or "" if unknown.
  pub fn variant_name(self) -> Option<&'static str> {
    match self {
      Self::REAL => Some("REAL"),
      Self::TEST => Some("TEST"),
      Self::SIMULATED => Some("SIMULATED"),
      Self::EXERCISE => Some("EXERCISE"),
      _ => None,
    }
  }
}
impl core::fmt::Debug for GroundImagery_Ingest_dataMode_Enum {
  fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
    if let Some(name) = self.variant_name() {
      f.write_str(name)
    } else {
      f.write_fmt(format_args!("<UNKNOWN {:?}>", self.0))
    }
  }
}
impl<'a> flatbuffers::Follow<'a> for GroundImagery_Ingest_dataMode_Enum {
  type Inner = Self;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    let b = flatbuffers::read_scalar_at::<i8>(buf, loc);
    Self(b)
  }
}

impl flatbuffers::Push for GroundImagery_Ingest_dataMode_Enum {
    type Output = GroundImagery_Ingest_dataMode_Enum;
    #[inline]
    unsafe fn push(&self, dst: &mut [u8], _written_len: usize) {
        flatbuffers::emplace_scalar::<i8>(dst, self.0);
    }
}

impl flatbuffers::EndianScalar for GroundImagery_Ingest_dataMode_Enum {
  type Scalar = i8;
  #[inline]
  fn to_little_endian(self) -> i8 {
    self.0.to_le()
  }
  #[inline]
  #[allow(clippy::wrong_self_convention)]
  fn from_little_endian(v: i8) -> Self {
    let b = i8::from_le(v);
    Self(b)
  }
}

impl<'a> flatbuffers::Verifiable for GroundImagery_Ingest_dataMode_Enum {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    i8::run_verifier(v, pos)
  }
}

impl flatbuffers::SimpleToVerifyInSlice for GroundImagery_Ingest_dataMode_Enum {}
pub enum GroundImagery_IngestOffset {}
#[derive(Copy, Clone, PartialEq)]

/// /// Imagery of terrestrial regions from on-orbit, air, and other sensors.
pub struct GroundImagery_Ingest<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for GroundImagery_Ingest<'a> {
  type Inner = GroundImagery_Ingest<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> GroundImagery_Ingest<'a> {
  pub const VT_ID: flatbuffers::VOffsetT = 4;
  pub const VT_IDSENSOR: flatbuffers::VOffsetT = 6;
  pub const VT_CLASSIFICATIONMARKING: flatbuffers::VOffsetT = 8;
  pub const VT_IMAGETIME: flatbuffers::VOffsetT = 10;
  pub const VT_FILENAME: flatbuffers::VOffsetT = 12;
  pub const VT_REGION: flatbuffers::VOffsetT = 14;
  pub const VT_REGIONTEXT: flatbuffers::VOffsetT = 16;
  pub const VT_REGIONGEOJSON: flatbuffers::VOffsetT = 18;
  pub const VT_REGIONTYPE: flatbuffers::VOffsetT = 20;
  pub const VT_REGIONNDIMS: flatbuffers::VOffsetT = 22;
  pub const VT_REGIONSRID: flatbuffers::VOffsetT = 24;
  pub const VT_ORIGSENSORID: flatbuffers::VOffsetT = 26;
  pub const VT_SUBJECTID: flatbuffers::VOffsetT = 28;
  pub const VT_NAME: flatbuffers::VOffsetT = 30;
  pub const VT_SOURCE: flatbuffers::VOffsetT = 32;
  pub const VT_ORIGIN: flatbuffers::VOffsetT = 34;
  pub const VT_ORIGNETWORK: flatbuffers::VOffsetT = 36;
  pub const VT_SOURCEDL: flatbuffers::VOffsetT = 38;
  pub const VT_DATAMODE: flatbuffers::VOffsetT = 40;
  pub const VT_CREATEDAT: flatbuffers::VOffsetT = 42;
  pub const VT_CREATEDBY: flatbuffers::VOffsetT = 44;
  pub const VT_TRANSACTIONID: flatbuffers::VOffsetT = 46;
  pub const VT_TAGS: flatbuffers::VOffsetT = 48;
  pub const VT_KEYWORDS: flatbuffers::VOffsetT = 50;
  pub const VT_NOTES: flatbuffers::VOffsetT = 52;
  pub const VT_FORMAT: flatbuffers::VOffsetT = 54;
  pub const VT_FILESIZE: flatbuffers::VOffsetT = 56;
  pub const VT_CHECKSUMVALUE: flatbuffers::VOffsetT = 58;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    GroundImagery_Ingest { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args GroundImagery_IngestArgs<'args>
  ) -> flatbuffers::WIPOffset<GroundImagery_Ingest<'bldr>> {
    let mut builder = GroundImagery_IngestBuilder::new(_fbb);
    builder.add_filesize(args.filesize);
    if let Some(x) = args.checksumValue { builder.add_checksumValue(x); }
    if let Some(x) = args.format { builder.add_format(x); }
    if let Some(x) = args.notes { builder.add_notes(x); }
    if let Some(x) = args.keywords { builder.add_keywords(x); }
    if let Some(x) = args.tags { builder.add_tags(x); }
    if let Some(x) = args.transactionId { builder.add_transactionId(x); }
    if let Some(x) = args.createdBy { builder.add_createdBy(x); }
    if let Some(x) = args.createdAt { builder.add_createdAt(x); }
    if let Some(x) = args.sourceDL { builder.add_sourceDL(x); }
    if let Some(x) = args.origNetwork { builder.add_origNetwork(x); }
    if let Some(x) = args.origin { builder.add_origin(x); }
    if let Some(x) = args.source { builder.add_source(x); }
    if let Some(x) = args.name { builder.add_name(x); }
    if let Some(x) = args.subjectId { builder.add_subjectId(x); }
    if let Some(x) = args.origSensorId { builder.add_origSensorId(x); }
    builder.add_regionSRid(args.regionSRid);
    builder.add_regionNDims(args.regionNDims);
    if let Some(x) = args.regionType { builder.add_regionType(x); }
    if let Some(x) = args.regionGeoJSON { builder.add_regionGeoJSON(x); }
    if let Some(x) = args.regionText { builder.add_regionText(x); }
    if let Some(x) = args.region { builder.add_region(x); }
    if let Some(x) = args.filename { builder.add_filename(x); }
    if let Some(x) = args.imageTime { builder.add_imageTime(x); }
    if let Some(x) = args.classificationMarking { builder.add_classificationMarking(x); }
    if let Some(x) = args.idSensor { builder.add_idSensor(x); }
    if let Some(x) = args.id { builder.add_id(x); }
    builder.add_dataMode(args.dataMode);
    builder.finish()
  }

  pub fn unpack(&self) -> GroundImagery_IngestT {
    let id = self.id().map(|x| {
      x.to_string()
    });
    let idSensor = self.idSensor().map(|x| {
      x.to_string()
    });
    let classificationMarking = self.classificationMarking().map(|x| {
      x.to_string()
    });
    let imageTime = self.imageTime().map(|x| {
      x.to_string()
    });
    let filename = self.filename().map(|x| {
      x.to_string()
    });
    let region = self.region().map(|x| {
      x.to_string()
    });
    let regionText = self.regionText().map(|x| {
      x.to_string()
    });
    let regionGeoJSON = self.regionGeoJSON().map(|x| {
      x.to_string()
    });
    let regionType = self.regionType().map(|x| {
      x.to_string()
    });
    let regionNDims = self.regionNDims();
    let regionSRid = self.regionSRid();
    let origSensorId = self.origSensorId().map(|x| {
      x.to_string()
    });
    let subjectId = self.subjectId().map(|x| {
      x.to_string()
    });
    let name = self.name().map(|x| {
      x.to_string()
    });
    let source = self.source().map(|x| {
      x.to_string()
    });
    let origin = self.origin().map(|x| {
      x.to_string()
    });
    let origNetwork = self.origNetwork().map(|x| {
      x.to_string()
    });
    let sourceDL = self.sourceDL().map(|x| {
      x.to_string()
    });
    let dataMode = self.dataMode();
    let createdAt = self.createdAt().map(|x| {
      x.to_string()
    });
    let createdBy = self.createdBy().map(|x| {
      x.to_string()
    });
    let transactionId = self.transactionId().map(|x| {
      x.to_string()
    });
    let tags = self.tags().map(|x| {
      x.iter().map(|s| s.to_string()).collect()
    });
    let keywords = self.keywords().map(|x| {
      x.iter().map(|s| s.to_string()).collect()
    });
    let notes = self.notes().map(|x| {
      x.to_string()
    });
    let format = self.format().map(|x| {
      x.to_string()
    });
    let filesize = self.filesize();
    let checksumValue = self.checksumValue().map(|x| {
      x.to_string()
    });
    GroundImagery_IngestT {
      id,
      idSensor,
      classificationMarking,
      imageTime,
      filename,
      region,
      regionText,
      regionGeoJSON,
      regionType,
      regionNDims,
      regionSRid,
      origSensorId,
      subjectId,
      name,
      source,
      origin,
      origNetwork,
      sourceDL,
      dataMode,
      createdAt,
      createdBy,
      transactionId,
      tags,
      keywords,
      notes,
      format,
      filesize,
      checksumValue,
    }
  }

  /// Unique identifier of the record, auto-generated by the system.
  /// Example: /// Example: GROUNDIMAGERY-ID
  /// Constraints: Minimum length = 1, Maximum length = 36
  #[inline]
  pub fn id(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(GroundImagery_Ingest::VT_ID, None)}
  }
  /// Optional ID of the sensor that produced this ground image.
  /// Example: /// Example: SENSOR-ID
  /// Constraints: Minimum length = 0, Maximum length = 36
  #[inline]
  pub fn idSensor(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(GroundImagery_Ingest::VT_IDSENSOR, None)}
  }
  /// Classification marking of the data in IC/CAPCO Portion-marked format.
  /// Example: /// Example: U
  /// Constraints: Minimum length = 1, Maximum length = 128
  #[inline]
  pub fn classificationMarking(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(GroundImagery_Ingest::VT_CLASSIFICATIONMARKING, None)}
  }
  /// Timestamp the image was captured/produced.
  /// Example: /// Example: 2021-01-01T01:01:01.123456Z
  /// Constraints: No constraints specified.
  #[inline]
  pub fn imageTime(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(GroundImagery_Ingest::VT_IMAGETIME, None)}
  }
  /// Name of the image file.
  /// Example: /// Example: Example file name
  /// Constraints: Minimum length = 1, Maximum length = 128
  #[inline]
  pub fn filename(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(GroundImagery_Ingest::VT_FILENAME, None)}
  }
  /// Geographical region or polygon (lon/lat pairs) of the image as projected on the ground in geoJSON or geoText format. This is an optional convenience field only used for create operations. The system will auto-detect the format (Well Known Text or GeoJSON) and populate both regionText and regionGeoJSON fields appropriately. When omitted, regionText or regionGeoJSON is expected.
  /// Example: /// Example: POLYGON((26.156175339112 67.3291113966927,26.0910220642717 67.2580009640721,26.6637992964562 67.1795862381682,26.730115808233 67.2501237475598,26.156175339112 67.3291113966927))
  /// Constraints: Minimum length = 0, Maximum length = 65535
  #[inline]
  pub fn region(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(GroundImagery_Ingest::VT_REGION, None)}
  }
  /// Geographical region or polygon (lon/lat pairs), as depicted by the Well-Known Text representation of the geometry/geography, of the image as projected on the ground. WKT reference: https://www.opengeospatial.org/standards/wkt-crs. Ignored if included with a create operation that also specifies a valid region.
  /// Example: /// Example: POLYGON((67.3291113966927 26.156175339112,67.2580009640721 26.091022064271,67.1795862381682 26.6637992964562,67.2501237475598 26.730115808233,67.3291113966927 26.156175339112))
  /// Constraints: Minimum length = 0, Maximum length = 65535
  #[inline]
  pub fn regionText(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(GroundImagery_Ingest::VT_REGIONTEXT, None)}
  }
  /// Geographical region or polygon (lat/lon pairs), as depicted by the GeoJSON representation of the geometry/geography, of the image as projected on the ground. Reference: https://geojson.org/. Ignored if included with a create operation that also specifies a valid region or regionText.
  /// Example: /// Example: {"type":"Polygon","coordinates":[[[67.3291113966927,26.156175339112],[67.2580009640721,26.091022064271],[67.1795862381682,26.6637992964562],[67.2501237475598,26.730115808233],[67.3291113966927,26.156175339112]]]}
  /// Constraints: Minimum length = 0, Maximum length = 65535
  #[inline]
  pub fn regionGeoJSON(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(GroundImagery_Ingest::VT_REGIONGEOJSON, None)}
  }
  /// Type of region as projected on the ground.
  /// Example: /// Example: Polygon
  /// Constraints: Minimum length = 0, Maximum length = 64
  #[inline]
  pub fn regionType(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(GroundImagery_Ingest::VT_REGIONTYPE, None)}
  }
  /// Number of dimensions of the geometry depicted by region.
  /// Example: /// Example: 2
  /// Constraints: No constraints specified.
  #[inline]
  pub fn regionNDims(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(GroundImagery_Ingest::VT_REGIONNDIMS, Some(0)).unwrap()}
  }
  /// Geographical spatial_ref_sys for region.
  /// Example: /// Example: 4326
  /// Constraints: No constraints specified.
  #[inline]
  pub fn regionSRid(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(GroundImagery_Ingest::VT_REGIONSRID, Some(0)).unwrap()}
  }
  /// Optional identifier provided by source to indicate the sensor identifier used to detect this event. This may be an internal identifier and not necessarily a valid sensor ID.
  /// Example: /// Example: ORIGSENSOR-ID
  /// Constraints: Minimum length = 0, Maximum length = 36
  #[inline]
  pub fn origSensorId(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(GroundImagery_Ingest::VT_ORIGSENSORID, None)}
  }
  /// Optional identifier of the subject/target of the image, useful for correlating multiple images of the same subject.
  /// Example: /// Example: SUBJECT-ID
  /// Constraints: Minimum length = 0, Maximum length = 36
  #[inline]
  pub fn subjectId(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(GroundImagery_Ingest::VT_SUBJECTID, None)}
  }
  /// Optional name/description associated with this image.
  /// Example: /// Example: Example name
  /// Constraints: Minimum length = 0, Maximum length = 128
  #[inline]
  pub fn name(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(GroundImagery_Ingest::VT_NAME, None)}
  }
  /// Source of the data.
  /// Example: /// Example: Bluestaq
  /// Constraints: Minimum length = 1, Maximum length = 64
  #[inline]
  pub fn source(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(GroundImagery_Ingest::VT_SOURCE, None)}
  }
  /// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
  /// Example: /// Example: THIRD_PARTY_DATASOURCE
  /// Constraints: Minimum length = 0, Maximum length = 64
  #[inline]
  pub fn origin(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(GroundImagery_Ingest::VT_ORIGIN, None)}
  }
  /// The originating source network on which this record was created, auto-populated by the system.
  /// Example: /// Example: ORIG
  /// Constraints: Minimum length = 1, Maximum length = 32
  #[inline]
  pub fn origNetwork(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(GroundImagery_Ingest::VT_ORIGNETWORK, None)}
  }
  /// The source data library from which this record was received. This could be a remote or tactical UDL or another data library. If null, the record should be assumed to have originated from the primary Enterprise UDL.
  /// Example: /// Example: AXE
  /// Constraints: Minimum length = 0, Maximum length = 64
  #[inline]
  pub fn sourceDL(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(GroundImagery_Ingest::VT_SOURCEDL, None)}
  }
  /// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
  /// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
  /// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
  /// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
  /// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  /// Example: /// Example: TEST
  /// Constraints: Minimum length = 1, Maximum length = 32
  #[inline]
  pub fn dataMode(&self) -> GroundImagery_Ingest_dataMode_Enum {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<GroundImagery_Ingest_dataMode_Enum>(GroundImagery_Ingest::VT_DATAMODE, Some(GroundImagery_Ingest_dataMode_Enum::REAL)).unwrap()}
  }
  /// Time the row was created in the database, auto-populated by the system.
  /// Example: /// Example: 2018-01-01T16:00:00.123Z
  /// Constraints: No constraints specified.
  #[inline]
  pub fn createdAt(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(GroundImagery_Ingest::VT_CREATEDAT, None)}
  }
  /// Application user who created the row in the database, auto-populated by the system.
  /// Example: /// Example: some.user
  /// Constraints: Minimum length = 1, Maximum length = 64
  #[inline]
  pub fn createdBy(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(GroundImagery_Ingest::VT_CREATEDBY, None)}
  }
  /// Optional identifier to track a commercial or marketplace transaction executed to produce this data.
  /// Example: /// Example: 37bdef1f-5a4f-4776-bee4-7a1e0ec7d35a
  /// Constraints: Minimum length = 0, Maximum length = 64
  #[inline]
  pub fn transactionId(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(GroundImagery_Ingest::VT_TRANSACTIONID, None)}
  }
  /// Optional array of provider/source specific tags for this data, where each element is no longer than 32 characters, used for implementing data owner conditional access controls to restrict access to the data. Should be left null by data providers unless conditional access controls are coordinated with the UDL team.
  /// Example: /// Example: ['PROVIDER_TAG1', 'PROVIDER_TAG2']
  /// Constraints: No constraints specified.
  #[inline]
  pub fn tags(&self) -> Option<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>(GroundImagery_Ingest::VT_TAGS, None)}
  }
  /// Optional array of keywords for this image.
  /// Example: /// Example: ['KEYWORD1', 'KEYWORD2']
  /// Constraints: No constraints specified.
  #[inline]
  pub fn keywords(&self) -> Option<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>(GroundImagery_Ingest::VT_KEYWORDS, None)}
  }
  /// Description and notes of the image.
  /// Example: /// Example: Example notes
  /// Constraints: Minimum length = 0, Maximum length = 1024
  #[inline]
  pub fn notes(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(GroundImagery_Ingest::VT_NOTES, None)}
  }
  /// Optional, field indicating type of image, NITF, PNG, etc.
  /// Example: /// Example: PNG
  /// Constraints: Minimum length = 1, Maximum length = 16
  #[inline]
  pub fn format(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(GroundImagery_Ingest::VT_FORMAT, None)}
  }
  /// Size of the image file. Units in bytes. If filesize is provided without an associated file, it defaults to 0.
  /// Example: /// Example: 0
  /// Constraints: No constraints specified.
  #[inline]
  pub fn filesize(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(GroundImagery_Ingest::VT_FILESIZE, Some(0)).unwrap()}
  }
  /// MD5 value of the file. The ingest/create operation will automatically generate the value.
  /// Example: /// Example: 120EA8A25E5D487BF68B5F7096440019
  /// Constraints: Minimum length = 1, Maximum length = 256
  #[inline]
  pub fn checksumValue(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(GroundImagery_Ingest::VT_CHECKSUMVALUE, None)}
  }
}

impl flatbuffers::Verifiable for GroundImagery_Ingest<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("id", Self::VT_ID, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("idSensor", Self::VT_IDSENSOR, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("classificationMarking", Self::VT_CLASSIFICATIONMARKING, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("imageTime", Self::VT_IMAGETIME, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("filename", Self::VT_FILENAME, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("region", Self::VT_REGION, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("regionText", Self::VT_REGIONTEXT, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("regionGeoJSON", Self::VT_REGIONGEOJSON, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("regionType", Self::VT_REGIONTYPE, false)?
     .visit_field::<i32>("regionNDims", Self::VT_REGIONNDIMS, false)?
     .visit_field::<i32>("regionSRid", Self::VT_REGIONSRID, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("origSensorId", Self::VT_ORIGSENSORID, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("subjectId", Self::VT_SUBJECTID, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("name", Self::VT_NAME, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("source", Self::VT_SOURCE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("origin", Self::VT_ORIGIN, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("origNetwork", Self::VT_ORIGNETWORK, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("sourceDL", Self::VT_SOURCEDL, false)?
     .visit_field::<GroundImagery_Ingest_dataMode_Enum>("dataMode", Self::VT_DATAMODE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("createdAt", Self::VT_CREATEDAT, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("createdBy", Self::VT_CREATEDBY, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("transactionId", Self::VT_TRANSACTIONID, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<&'_ str>>>>("tags", Self::VT_TAGS, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<&'_ str>>>>("keywords", Self::VT_KEYWORDS, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("notes", Self::VT_NOTES, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("format", Self::VT_FORMAT, false)?
     .visit_field::<i64>("filesize", Self::VT_FILESIZE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("checksumValue", Self::VT_CHECKSUMVALUE, false)?
     .finish();
    Ok(())
  }
}
pub struct GroundImagery_IngestArgs<'a> {
    pub id: Option<flatbuffers::WIPOffset<&'a str>>,
    pub idSensor: Option<flatbuffers::WIPOffset<&'a str>>,
    pub classificationMarking: Option<flatbuffers::WIPOffset<&'a str>>,
    pub imageTime: Option<flatbuffers::WIPOffset<&'a str>>,
    pub filename: Option<flatbuffers::WIPOffset<&'a str>>,
    pub region: Option<flatbuffers::WIPOffset<&'a str>>,
    pub regionText: Option<flatbuffers::WIPOffset<&'a str>>,
    pub regionGeoJSON: Option<flatbuffers::WIPOffset<&'a str>>,
    pub regionType: Option<flatbuffers::WIPOffset<&'a str>>,
    pub regionNDims: i32,
    pub regionSRid: i32,
    pub origSensorId: Option<flatbuffers::WIPOffset<&'a str>>,
    pub subjectId: Option<flatbuffers::WIPOffset<&'a str>>,
    pub name: Option<flatbuffers::WIPOffset<&'a str>>,
    pub source: Option<flatbuffers::WIPOffset<&'a str>>,
    pub origin: Option<flatbuffers::WIPOffset<&'a str>>,
    pub origNetwork: Option<flatbuffers::WIPOffset<&'a str>>,
    pub sourceDL: Option<flatbuffers::WIPOffset<&'a str>>,
    pub dataMode: GroundImagery_Ingest_dataMode_Enum,
    pub createdAt: Option<flatbuffers::WIPOffset<&'a str>>,
    pub createdBy: Option<flatbuffers::WIPOffset<&'a str>>,
    pub transactionId: Option<flatbuffers::WIPOffset<&'a str>>,
    pub tags: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>,
    pub keywords: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>,
    pub notes: Option<flatbuffers::WIPOffset<&'a str>>,
    pub format: Option<flatbuffers::WIPOffset<&'a str>>,
    pub filesize: i64,
    pub checksumValue: Option<flatbuffers::WIPOffset<&'a str>>,
}
impl<'a> Default for GroundImagery_IngestArgs<'a> {
  #[inline]
  fn default() -> Self {
    GroundImagery_IngestArgs {
      id: None,
      idSensor: None,
      classificationMarking: None,
      imageTime: None,
      filename: None,
      region: None,
      regionText: None,
      regionGeoJSON: None,
      regionType: None,
      regionNDims: 0,
      regionSRid: 0,
      origSensorId: None,
      subjectId: None,
      name: None,
      source: None,
      origin: None,
      origNetwork: None,
      sourceDL: None,
      dataMode: GroundImagery_Ingest_dataMode_Enum::REAL,
      createdAt: None,
      createdBy: None,
      transactionId: None,
      tags: None,
      keywords: None,
      notes: None,
      format: None,
      filesize: 0,
      checksumValue: None,
    }
  }
}

pub struct GroundImagery_IngestBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> GroundImagery_IngestBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_id(&mut self, id: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(GroundImagery_Ingest::VT_ID, id);
  }
  #[inline]
  pub fn add_idSensor(&mut self, idSensor: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(GroundImagery_Ingest::VT_IDSENSOR, idSensor);
  }
  #[inline]
  pub fn add_classificationMarking(&mut self, classificationMarking: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(GroundImagery_Ingest::VT_CLASSIFICATIONMARKING, classificationMarking);
  }
  #[inline]
  pub fn add_imageTime(&mut self, imageTime: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(GroundImagery_Ingest::VT_IMAGETIME, imageTime);
  }
  #[inline]
  pub fn add_filename(&mut self, filename: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(GroundImagery_Ingest::VT_FILENAME, filename);
  }
  #[inline]
  pub fn add_region(&mut self, region: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(GroundImagery_Ingest::VT_REGION, region);
  }
  #[inline]
  pub fn add_regionText(&mut self, regionText: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(GroundImagery_Ingest::VT_REGIONTEXT, regionText);
  }
  #[inline]
  pub fn add_regionGeoJSON(&mut self, regionGeoJSON: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(GroundImagery_Ingest::VT_REGIONGEOJSON, regionGeoJSON);
  }
  #[inline]
  pub fn add_regionType(&mut self, regionType: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(GroundImagery_Ingest::VT_REGIONTYPE, regionType);
  }
  #[inline]
  pub fn add_regionNDims(&mut self, regionNDims: i32) {
    self.fbb_.push_slot::<i32>(GroundImagery_Ingest::VT_REGIONNDIMS, regionNDims, 0);
  }
  #[inline]
  pub fn add_regionSRid(&mut self, regionSRid: i32) {
    self.fbb_.push_slot::<i32>(GroundImagery_Ingest::VT_REGIONSRID, regionSRid, 0);
  }
  #[inline]
  pub fn add_origSensorId(&mut self, origSensorId: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(GroundImagery_Ingest::VT_ORIGSENSORID, origSensorId);
  }
  #[inline]
  pub fn add_subjectId(&mut self, subjectId: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(GroundImagery_Ingest::VT_SUBJECTID, subjectId);
  }
  #[inline]
  pub fn add_name(&mut self, name: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(GroundImagery_Ingest::VT_NAME, name);
  }
  #[inline]
  pub fn add_source(&mut self, source: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(GroundImagery_Ingest::VT_SOURCE, source);
  }
  #[inline]
  pub fn add_origin(&mut self, origin: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(GroundImagery_Ingest::VT_ORIGIN, origin);
  }
  #[inline]
  pub fn add_origNetwork(&mut self, origNetwork: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(GroundImagery_Ingest::VT_ORIGNETWORK, origNetwork);
  }
  #[inline]
  pub fn add_sourceDL(&mut self, sourceDL: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(GroundImagery_Ingest::VT_SOURCEDL, sourceDL);
  }
  #[inline]
  pub fn add_dataMode(&mut self, dataMode: GroundImagery_Ingest_dataMode_Enum) {
    self.fbb_.push_slot::<GroundImagery_Ingest_dataMode_Enum>(GroundImagery_Ingest::VT_DATAMODE, dataMode, GroundImagery_Ingest_dataMode_Enum::REAL);
  }
  #[inline]
  pub fn add_createdAt(&mut self, createdAt: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(GroundImagery_Ingest::VT_CREATEDAT, createdAt);
  }
  #[inline]
  pub fn add_createdBy(&mut self, createdBy: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(GroundImagery_Ingest::VT_CREATEDBY, createdBy);
  }
  #[inline]
  pub fn add_transactionId(&mut self, transactionId: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(GroundImagery_Ingest::VT_TRANSACTIONID, transactionId);
  }
  #[inline]
  pub fn add_tags(&mut self, tags: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<&'b  str>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(GroundImagery_Ingest::VT_TAGS, tags);
  }
  #[inline]
  pub fn add_keywords(&mut self, keywords: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<&'b  str>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(GroundImagery_Ingest::VT_KEYWORDS, keywords);
  }
  #[inline]
  pub fn add_notes(&mut self, notes: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(GroundImagery_Ingest::VT_NOTES, notes);
  }
  #[inline]
  pub fn add_format(&mut self, format: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(GroundImagery_Ingest::VT_FORMAT, format);
  }
  #[inline]
  pub fn add_filesize(&mut self, filesize: i64) {
    self.fbb_.push_slot::<i64>(GroundImagery_Ingest::VT_FILESIZE, filesize, 0);
  }
  #[inline]
  pub fn add_checksumValue(&mut self, checksumValue: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(GroundImagery_Ingest::VT_CHECKSUMVALUE, checksumValue);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> GroundImagery_IngestBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    GroundImagery_IngestBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<GroundImagery_Ingest<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for GroundImagery_Ingest<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("GroundImagery_Ingest");
      ds.field("id", &self.id());
      ds.field("idSensor", &self.idSensor());
      ds.field("classificationMarking", &self.classificationMarking());
      ds.field("imageTime", &self.imageTime());
      ds.field("filename", &self.filename());
      ds.field("region", &self.region());
      ds.field("regionText", &self.regionText());
      ds.field("regionGeoJSON", &self.regionGeoJSON());
      ds.field("regionType", &self.regionType());
      ds.field("regionNDims", &self.regionNDims());
      ds.field("regionSRid", &self.regionSRid());
      ds.field("origSensorId", &self.origSensorId());
      ds.field("subjectId", &self.subjectId());
      ds.field("name", &self.name());
      ds.field("source", &self.source());
      ds.field("origin", &self.origin());
      ds.field("origNetwork", &self.origNetwork());
      ds.field("sourceDL", &self.sourceDL());
      ds.field("dataMode", &self.dataMode());
      ds.field("createdAt", &self.createdAt());
      ds.field("createdBy", &self.createdBy());
      ds.field("transactionId", &self.transactionId());
      ds.field("tags", &self.tags());
      ds.field("keywords", &self.keywords());
      ds.field("notes", &self.notes());
      ds.field("format", &self.format());
      ds.field("filesize", &self.filesize());
      ds.field("checksumValue", &self.checksumValue());
      ds.finish()
  }
}
#[non_exhaustive]
#[derive(Debug, Clone, PartialEq)]
pub struct GroundImagery_IngestT {
  pub id: Option<String>,
  pub idSensor: Option<String>,
  pub classificationMarking: Option<String>,
  pub imageTime: Option<String>,
  pub filename: Option<String>,
  pub region: Option<String>,
  pub regionText: Option<String>,
  pub regionGeoJSON: Option<String>,
  pub regionType: Option<String>,
  pub regionNDims: i32,
  pub regionSRid: i32,
  pub origSensorId: Option<String>,
  pub subjectId: Option<String>,
  pub name: Option<String>,
  pub source: Option<String>,
  pub origin: Option<String>,
  pub origNetwork: Option<String>,
  pub sourceDL: Option<String>,
  pub dataMode: GroundImagery_Ingest_dataMode_Enum,
  pub createdAt: Option<String>,
  pub createdBy: Option<String>,
  pub transactionId: Option<String>,
  pub tags: Option<Vec<String>>,
  pub keywords: Option<Vec<String>>,
  pub notes: Option<String>,
  pub format: Option<String>,
  pub filesize: i64,
  pub checksumValue: Option<String>,
}
impl Default for GroundImagery_IngestT {
  fn default() -> Self {
    Self {
      id: None,
      idSensor: None,
      classificationMarking: None,
      imageTime: None,
      filename: None,
      region: None,
      regionText: None,
      regionGeoJSON: None,
      regionType: None,
      regionNDims: 0,
      regionSRid: 0,
      origSensorId: None,
      subjectId: None,
      name: None,
      source: None,
      origin: None,
      origNetwork: None,
      sourceDL: None,
      dataMode: GroundImagery_Ingest_dataMode_Enum::REAL,
      createdAt: None,
      createdBy: None,
      transactionId: None,
      tags: None,
      keywords: None,
      notes: None,
      format: None,
      filesize: 0,
      checksumValue: None,
    }
  }
}
impl GroundImagery_IngestT {
  pub fn pack<'b, A: flatbuffers::Allocator + 'b>(
    &self,
    _fbb: &mut flatbuffers::FlatBufferBuilder<'b, A>
  ) -> flatbuffers::WIPOffset<GroundImagery_Ingest<'b>> {
    let id = self.id.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let idSensor = self.idSensor.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let classificationMarking = self.classificationMarking.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let imageTime = self.imageTime.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let filename = self.filename.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let region = self.region.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let regionText = self.regionText.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let regionGeoJSON = self.regionGeoJSON.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let regionType = self.regionType.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let regionNDims = self.regionNDims;
    let regionSRid = self.regionSRid;
    let origSensorId = self.origSensorId.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let subjectId = self.subjectId.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let name = self.name.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let source = self.source.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let origin = self.origin.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let origNetwork = self.origNetwork.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let sourceDL = self.sourceDL.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let dataMode = self.dataMode;
    let createdAt = self.createdAt.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let createdBy = self.createdBy.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let transactionId = self.transactionId.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let tags = self.tags.as_ref().map(|x|{
      let w: Vec<_> = x.iter().map(|s| _fbb.create_string(s)).collect();_fbb.create_vector(&w)
    });
    let keywords = self.keywords.as_ref().map(|x|{
      let w: Vec<_> = x.iter().map(|s| _fbb.create_string(s)).collect();_fbb.create_vector(&w)
    });
    let notes = self.notes.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let format = self.format.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let filesize = self.filesize;
    let checksumValue = self.checksumValue.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    GroundImagery_Ingest::create(_fbb, &GroundImagery_IngestArgs{
      id,
      idSensor,
      classificationMarking,
      imageTime,
      filename,
      region,
      regionText,
      regionGeoJSON,
      regionType,
      regionNDims,
      regionSRid,
      origSensorId,
      subjectId,
      name,
      source,
      origin,
      origNetwork,
      sourceDL,
      dataMode,
      createdAt,
      createdBy,
      transactionId,
      tags,
      keywords,
      notes,
      format,
      filesize,
      checksumValue,
    })
  }
}
#[inline]
/// Verifies that a buffer of bytes contains a `GroundImagery_Ingest`
/// and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_ground_imagery_ingest_unchecked`.
pub fn root_as_ground_imagery_ingest(buf: &[u8]) -> Result<GroundImagery_Ingest, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root::<GroundImagery_Ingest>(buf)
}
#[inline]
/// Verifies that a buffer of bytes contains a size prefixed
/// `GroundImagery_Ingest` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `size_prefixed_root_as_ground_imagery_ingest_unchecked`.
pub fn size_prefixed_root_as_ground_imagery_ingest(buf: &[u8]) -> Result<GroundImagery_Ingest, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root::<GroundImagery_Ingest>(buf)
}
#[inline]
/// Verifies, with the given options, that a buffer of bytes
/// contains a `GroundImagery_Ingest` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_ground_imagery_ingest_unchecked`.
pub fn root_as_ground_imagery_ingest_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<GroundImagery_Ingest<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root_with_opts::<GroundImagery_Ingest<'b>>(opts, buf)
}
#[inline]
/// Verifies, with the given verifier options, that a buffer of
/// bytes contains a size prefixed `GroundImagery_Ingest` and returns
/// it. Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_ground_imagery_ingest_unchecked`.
pub fn size_prefixed_root_as_ground_imagery_ingest_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<GroundImagery_Ingest<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root_with_opts::<GroundImagery_Ingest<'b>>(opts, buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a GroundImagery_Ingest and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid `GroundImagery_Ingest`.
pub unsafe fn root_as_ground_imagery_ingest_unchecked(buf: &[u8]) -> GroundImagery_Ingest {
  flatbuffers::root_unchecked::<GroundImagery_Ingest>(buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a size prefixed GroundImagery_Ingest and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid size prefixed `GroundImagery_Ingest`.
pub unsafe fn size_prefixed_root_as_ground_imagery_ingest_unchecked(buf: &[u8]) -> GroundImagery_Ingest {
  flatbuffers::size_prefixed_root_unchecked::<GroundImagery_Ingest>(buf)
}
pub const GROUND_IMAGERY_INGEST_IDENTIFIER: &str = "GROU";

#[inline]
pub fn ground_imagery_ingest_buffer_has_identifier(buf: &[u8]) -> bool {
  flatbuffers::buffer_has_identifier(buf, GROUND_IMAGERY_INGEST_IDENTIFIER, false)
}

#[inline]
pub fn ground_imagery_ingest_size_prefixed_buffer_has_identifier(buf: &[u8]) -> bool {
  flatbuffers::buffer_has_identifier(buf, GROUND_IMAGERY_INGEST_IDENTIFIER, true)
}

#[inline]
pub fn finish_ground_imagery_ingest_buffer<'a, 'b, A: flatbuffers::Allocator + 'a>(
    fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
    root: flatbuffers::WIPOffset<GroundImagery_Ingest<'a>>) {
  fbb.finish(root, Some(GROUND_IMAGERY_INGEST_IDENTIFIER));
}

#[inline]
pub fn finish_size_prefixed_ground_imagery_ingest_buffer<'a, 'b, A: flatbuffers::Allocator + 'a>(fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>, root: flatbuffers::WIPOffset<GroundImagery_Ingest<'a>>) {
  fbb.finish_size_prefixed(root, Some(GROUND_IMAGERY_INGEST_IDENTIFIER));
}
