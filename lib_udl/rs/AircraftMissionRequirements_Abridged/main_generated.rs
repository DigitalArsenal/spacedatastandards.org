// automatically generated by the FlatBuffers compiler, do not modify


// @generated

use core::mem;
use core::cmp::Ordering;

extern crate flatbuffers;
use self::flatbuffers::{EndianScalar, Follow};

pub enum AircraftMissionRequirements_AbridgedOffset {}
#[derive(Copy, Clone, PartialEq)]

/// /// Collection of Requirements associated with this Air Transport Mission.
pub struct AircraftMissionRequirements_Abridged<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for AircraftMissionRequirements_Abridged<'a> {
  type Inner = AircraftMissionRequirements_Abridged<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> AircraftMissionRequirements_Abridged<'a> {
  pub const VT_GDSSREQID: flatbuffers::VOffsetT = 4;
  pub const VT_ONLOADID: flatbuffers::VOffsetT = 6;
  pub const VT_ONLOADLOCODE: flatbuffers::VOffsetT = 8;
  pub const VT_OFFLOADID: flatbuffers::VOffsetT = 10;
  pub const VT_OFFLOADLOCODE: flatbuffers::VOffsetT = 12;
  pub const VT_ULN: flatbuffers::VOffsetT = 14;
  pub const VT_TRANSREQNUM: flatbuffers::VOffsetT = 16;
  pub const VT_PROJNAME: flatbuffers::VOffsetT = 18;
  pub const VT_OPLAN: flatbuffers::VOffsetT = 20;
  pub const VT_NUMPAX: flatbuffers::VOffsetT = 22;
  pub const VT_NUMLITTER: flatbuffers::VOffsetT = 24;
  pub const VT_NUMAMBULATORY: flatbuffers::VOffsetT = 26;
  pub const VT_NUMATTENDANT: flatbuffers::VOffsetT = 28;
  pub const VT_BULKWEIGHT: flatbuffers::VOffsetT = 30;
  pub const VT_OVERSIZEWEIGHT: flatbuffers::VOffsetT = 32;
  pub const VT_OUTSIZEWEIGHT: flatbuffers::VOffsetT = 34;
  pub const VT_EAD: flatbuffers::VOffsetT = 36;
  pub const VT_LAD: flatbuffers::VOffsetT = 38;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    AircraftMissionRequirements_Abridged { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args AircraftMissionRequirements_AbridgedArgs<'args>
  ) -> flatbuffers::WIPOffset<AircraftMissionRequirements_Abridged<'bldr>> {
    let mut builder = AircraftMissionRequirements_AbridgedBuilder::new(_fbb);
    builder.add_outsizeWeight(args.outsizeWeight);
    builder.add_oversizeWeight(args.oversizeWeight);
    builder.add_bulkWeight(args.bulkWeight);
    if let Some(x) = args.lad { builder.add_lad(x); }
    if let Some(x) = args.ead { builder.add_ead(x); }
    builder.add_numAttendant(args.numAttendant);
    builder.add_numAmbulatory(args.numAmbulatory);
    builder.add_numLitter(args.numLitter);
    builder.add_numPax(args.numPax);
    if let Some(x) = args.oplan { builder.add_oplan(x); }
    if let Some(x) = args.projName { builder.add_projName(x); }
    if let Some(x) = args.transReqNum { builder.add_transReqNum(x); }
    if let Some(x) = args.uln { builder.add_uln(x); }
    if let Some(x) = args.offloadLOCode { builder.add_offloadLOCode(x); }
    builder.add_offloadId(args.offloadId);
    if let Some(x) = args.onloadLOCode { builder.add_onloadLOCode(x); }
    builder.add_onloadId(args.onloadId);
    if let Some(x) = args.gdssReqId { builder.add_gdssReqId(x); }
    builder.finish()
  }

  pub fn unpack(&self) -> AircraftMissionRequirements_AbridgedT {
    let gdssReqId = self.gdssReqId().map(|x| {
      x.to_string()
    });
    let onloadId = self.onloadId();
    let onloadLOCode = self.onloadLOCode().map(|x| {
      x.to_string()
    });
    let offloadId = self.offloadId();
    let offloadLOCode = self.offloadLOCode().map(|x| {
      x.to_string()
    });
    let uln = self.uln().map(|x| {
      x.to_string()
    });
    let transReqNum = self.transReqNum().map(|x| {
      x.to_string()
    });
    let projName = self.projName().map(|x| {
      x.to_string()
    });
    let oplan = self.oplan().map(|x| {
      x.to_string()
    });
    let numPax = self.numPax();
    let numLitter = self.numLitter();
    let numAmbulatory = self.numAmbulatory();
    let numAttendant = self.numAttendant();
    let bulkWeight = self.bulkWeight();
    let oversizeWeight = self.oversizeWeight();
    let outsizeWeight = self.outsizeWeight();
    let ead = self.ead().map(|x| {
      x.to_string()
    });
    let lad = self.lad().map(|x| {
      x.to_string()
    });
    AircraftMissionRequirements_AbridgedT {
      gdssReqId,
      onloadId,
      onloadLOCode,
      offloadId,
      offloadLOCode,
      uln,
      transReqNum,
      projName,
      oplan,
      numPax,
      numLitter,
      numAmbulatory,
      numAttendant,
      bulkWeight,
      oversizeWeight,
      outsizeWeight,
      ead,
      lad,
    }
  }

  /// Global Decision Support System (GDSS) mission requirement identifier.
  /// Example: /// Example: 23a1fb67-cc2d-5ebe-6b99-68130cb1aa6c
  /// Constraints: Minimum length = 0, Maximum length = 36
  #[inline]
  pub fn gdssReqId(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(AircraftMissionRequirements_Abridged::VT_GDSSREQID, None)}
  }
  /// Identifier of the onload itinerary location.
  /// Example: /// Example: 200
  /// Constraints: No constraints specified.
  #[inline]
  pub fn onloadId(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(AircraftMissionRequirements_Abridged::VT_ONLOADID, Some(0)).unwrap()}
  }
  /// Onload location code.
  /// Example: /// Example: KCHS
  /// Constraints: Minimum length = 0, Maximum length = 20
  #[inline]
  pub fn onloadLOCode(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(AircraftMissionRequirements_Abridged::VT_ONLOADLOCODE, None)}
  }
  /// Identifier of the offload itinerary location.
  /// Example: /// Example: 300
  /// Constraints: No constraints specified.
  #[inline]
  pub fn offloadId(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(AircraftMissionRequirements_Abridged::VT_OFFLOADID, Some(0)).unwrap()}
  }
  /// Offload location code.
  /// Example: /// Example: KHOP
  /// Constraints: Minimum length = 0, Maximum length = 20
  #[inline]
  pub fn offloadLOCode(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(AircraftMissionRequirements_Abridged::VT_OFFLOADLOCODE, None)}
  }
  /// Unit line number.
  /// Example: /// Example: T01ME01
  /// Constraints: Minimum length = 0, Maximum length = 8
  #[inline]
  pub fn uln(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(AircraftMissionRequirements_Abridged::VT_ULN, None)}
  }
  /// Transportation requirement number.
  /// Example: /// Example: T01ME01
  /// Constraints: Minimum length = 0, Maximum length = 50
  #[inline]
  pub fn transReqNum(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(AircraftMissionRequirements_Abridged::VT_TRANSREQNUM, None)}
  }
  /// Project name.
  /// Example: /// Example: CENTINTRA21
  /// Constraints: Minimum length = 0, Maximum length = 50
  #[inline]
  pub fn projName(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(AircraftMissionRequirements_Abridged::VT_PROJNAME, None)}
  }
  /// Identification number of the Operation Plan (OPLAN) associated with this mission.
  /// Example: /// Example: 5027
  /// Constraints: Minimum length = 0, Maximum length = 32
  #[inline]
  pub fn oplan(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(AircraftMissionRequirements_Abridged::VT_OPLAN, None)}
  }
  /// Number of passengers associated with the mission.
  /// Example: /// Example: 44
  /// Constraints: No constraints specified.
  #[inline]
  pub fn numPax(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(AircraftMissionRequirements_Abridged::VT_NUMPAX, Some(0)).unwrap()}
  }
  /// Number of litter patients tasked for the mission.
  /// Example: /// Example: 10
  /// Constraints: No constraints specified.
  #[inline]
  pub fn numLitter(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(AircraftMissionRequirements_Abridged::VT_NUMLITTER, Some(0)).unwrap()}
  }
  /// Number of ambulatory patients tasked for the mission.
  /// Example: /// Example: 10
  /// Constraints: No constraints specified.
  #[inline]
  pub fn numAmbulatory(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(AircraftMissionRequirements_Abridged::VT_NUMAMBULATORY, Some(0)).unwrap()}
  }
  /// Number of attendants tasked for the mission.
  /// Example: /// Example: 10
  /// Constraints: No constraints specified.
  #[inline]
  pub fn numAttendant(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(AircraftMissionRequirements_Abridged::VT_NUMATTENDANT, Some(0)).unwrap()}
  }
  /// Total weight of the bulk cargo, in kilograms.
  /// Example: /// Example: 1.3
  /// Constraints: No constraints specified.
  #[inline]
  pub fn bulkWeight(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(AircraftMissionRequirements_Abridged::VT_BULKWEIGHT, Some(0.0)).unwrap()}
  }
  /// Total weight of the oversized cargo, in kilograms.
  /// Example: /// Example: 1.3
  /// Constraints: No constraints specified.
  #[inline]
  pub fn oversizeWeight(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(AircraftMissionRequirements_Abridged::VT_OVERSIZEWEIGHT, Some(0.0)).unwrap()}
  }
  /// Total weight of the outsize cargo, in kilograms.
  /// Example: /// Example: 1.3
  /// Constraints: No constraints specified.
  #[inline]
  pub fn outsizeWeight(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(AircraftMissionRequirements_Abridged::VT_OUTSIZEWEIGHT, Some(0.0)).unwrap()}
  }
  /// Earliest available date the cargo can be picked up.
  /// Example: /// Example: 2024-01-01T16:00:00Z
  /// Constraints: No constraints specified.
  #[inline]
  pub fn ead(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(AircraftMissionRequirements_Abridged::VT_EAD, None)}
  }
  /// Latest available date the cargo may be delivered.
  /// Example: /// Example: 2024-01-01T16:00:00Z
  /// Constraints: No constraints specified.
  #[inline]
  pub fn lad(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(AircraftMissionRequirements_Abridged::VT_LAD, None)}
  }
}

impl flatbuffers::Verifiable for AircraftMissionRequirements_Abridged<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("gdssReqId", Self::VT_GDSSREQID, false)?
     .visit_field::<i32>("onloadId", Self::VT_ONLOADID, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("onloadLOCode", Self::VT_ONLOADLOCODE, false)?
     .visit_field::<i32>("offloadId", Self::VT_OFFLOADID, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("offloadLOCode", Self::VT_OFFLOADLOCODE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("uln", Self::VT_ULN, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("transReqNum", Self::VT_TRANSREQNUM, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("projName", Self::VT_PROJNAME, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("oplan", Self::VT_OPLAN, false)?
     .visit_field::<i32>("numPax", Self::VT_NUMPAX, false)?
     .visit_field::<i32>("numLitter", Self::VT_NUMLITTER, false)?
     .visit_field::<i32>("numAmbulatory", Self::VT_NUMAMBULATORY, false)?
     .visit_field::<i32>("numAttendant", Self::VT_NUMATTENDANT, false)?
     .visit_field::<f64>("bulkWeight", Self::VT_BULKWEIGHT, false)?
     .visit_field::<f64>("oversizeWeight", Self::VT_OVERSIZEWEIGHT, false)?
     .visit_field::<f64>("outsizeWeight", Self::VT_OUTSIZEWEIGHT, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("ead", Self::VT_EAD, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("lad", Self::VT_LAD, false)?
     .finish();
    Ok(())
  }
}
pub struct AircraftMissionRequirements_AbridgedArgs<'a> {
    pub gdssReqId: Option<flatbuffers::WIPOffset<&'a str>>,
    pub onloadId: i32,
    pub onloadLOCode: Option<flatbuffers::WIPOffset<&'a str>>,
    pub offloadId: i32,
    pub offloadLOCode: Option<flatbuffers::WIPOffset<&'a str>>,
    pub uln: Option<flatbuffers::WIPOffset<&'a str>>,
    pub transReqNum: Option<flatbuffers::WIPOffset<&'a str>>,
    pub projName: Option<flatbuffers::WIPOffset<&'a str>>,
    pub oplan: Option<flatbuffers::WIPOffset<&'a str>>,
    pub numPax: i32,
    pub numLitter: i32,
    pub numAmbulatory: i32,
    pub numAttendant: i32,
    pub bulkWeight: f64,
    pub oversizeWeight: f64,
    pub outsizeWeight: f64,
    pub ead: Option<flatbuffers::WIPOffset<&'a str>>,
    pub lad: Option<flatbuffers::WIPOffset<&'a str>>,
}
impl<'a> Default for AircraftMissionRequirements_AbridgedArgs<'a> {
  #[inline]
  fn default() -> Self {
    AircraftMissionRequirements_AbridgedArgs {
      gdssReqId: None,
      onloadId: 0,
      onloadLOCode: None,
      offloadId: 0,
      offloadLOCode: None,
      uln: None,
      transReqNum: None,
      projName: None,
      oplan: None,
      numPax: 0,
      numLitter: 0,
      numAmbulatory: 0,
      numAttendant: 0,
      bulkWeight: 0.0,
      oversizeWeight: 0.0,
      outsizeWeight: 0.0,
      ead: None,
      lad: None,
    }
  }
}

pub struct AircraftMissionRequirements_AbridgedBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> AircraftMissionRequirements_AbridgedBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_gdssReqId(&mut self, gdssReqId: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(AircraftMissionRequirements_Abridged::VT_GDSSREQID, gdssReqId);
  }
  #[inline]
  pub fn add_onloadId(&mut self, onloadId: i32) {
    self.fbb_.push_slot::<i32>(AircraftMissionRequirements_Abridged::VT_ONLOADID, onloadId, 0);
  }
  #[inline]
  pub fn add_onloadLOCode(&mut self, onloadLOCode: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(AircraftMissionRequirements_Abridged::VT_ONLOADLOCODE, onloadLOCode);
  }
  #[inline]
  pub fn add_offloadId(&mut self, offloadId: i32) {
    self.fbb_.push_slot::<i32>(AircraftMissionRequirements_Abridged::VT_OFFLOADID, offloadId, 0);
  }
  #[inline]
  pub fn add_offloadLOCode(&mut self, offloadLOCode: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(AircraftMissionRequirements_Abridged::VT_OFFLOADLOCODE, offloadLOCode);
  }
  #[inline]
  pub fn add_uln(&mut self, uln: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(AircraftMissionRequirements_Abridged::VT_ULN, uln);
  }
  #[inline]
  pub fn add_transReqNum(&mut self, transReqNum: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(AircraftMissionRequirements_Abridged::VT_TRANSREQNUM, transReqNum);
  }
  #[inline]
  pub fn add_projName(&mut self, projName: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(AircraftMissionRequirements_Abridged::VT_PROJNAME, projName);
  }
  #[inline]
  pub fn add_oplan(&mut self, oplan: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(AircraftMissionRequirements_Abridged::VT_OPLAN, oplan);
  }
  #[inline]
  pub fn add_numPax(&mut self, numPax: i32) {
    self.fbb_.push_slot::<i32>(AircraftMissionRequirements_Abridged::VT_NUMPAX, numPax, 0);
  }
  #[inline]
  pub fn add_numLitter(&mut self, numLitter: i32) {
    self.fbb_.push_slot::<i32>(AircraftMissionRequirements_Abridged::VT_NUMLITTER, numLitter, 0);
  }
  #[inline]
  pub fn add_numAmbulatory(&mut self, numAmbulatory: i32) {
    self.fbb_.push_slot::<i32>(AircraftMissionRequirements_Abridged::VT_NUMAMBULATORY, numAmbulatory, 0);
  }
  #[inline]
  pub fn add_numAttendant(&mut self, numAttendant: i32) {
    self.fbb_.push_slot::<i32>(AircraftMissionRequirements_Abridged::VT_NUMATTENDANT, numAttendant, 0);
  }
  #[inline]
  pub fn add_bulkWeight(&mut self, bulkWeight: f64) {
    self.fbb_.push_slot::<f64>(AircraftMissionRequirements_Abridged::VT_BULKWEIGHT, bulkWeight, 0.0);
  }
  #[inline]
  pub fn add_oversizeWeight(&mut self, oversizeWeight: f64) {
    self.fbb_.push_slot::<f64>(AircraftMissionRequirements_Abridged::VT_OVERSIZEWEIGHT, oversizeWeight, 0.0);
  }
  #[inline]
  pub fn add_outsizeWeight(&mut self, outsizeWeight: f64) {
    self.fbb_.push_slot::<f64>(AircraftMissionRequirements_Abridged::VT_OUTSIZEWEIGHT, outsizeWeight, 0.0);
  }
  #[inline]
  pub fn add_ead(&mut self, ead: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(AircraftMissionRequirements_Abridged::VT_EAD, ead);
  }
  #[inline]
  pub fn add_lad(&mut self, lad: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(AircraftMissionRequirements_Abridged::VT_LAD, lad);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> AircraftMissionRequirements_AbridgedBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    AircraftMissionRequirements_AbridgedBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<AircraftMissionRequirements_Abridged<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for AircraftMissionRequirements_Abridged<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("AircraftMissionRequirements_Abridged");
      ds.field("gdssReqId", &self.gdssReqId());
      ds.field("onloadId", &self.onloadId());
      ds.field("onloadLOCode", &self.onloadLOCode());
      ds.field("offloadId", &self.offloadId());
      ds.field("offloadLOCode", &self.offloadLOCode());
      ds.field("uln", &self.uln());
      ds.field("transReqNum", &self.transReqNum());
      ds.field("projName", &self.projName());
      ds.field("oplan", &self.oplan());
      ds.field("numPax", &self.numPax());
      ds.field("numLitter", &self.numLitter());
      ds.field("numAmbulatory", &self.numAmbulatory());
      ds.field("numAttendant", &self.numAttendant());
      ds.field("bulkWeight", &self.bulkWeight());
      ds.field("oversizeWeight", &self.oversizeWeight());
      ds.field("outsizeWeight", &self.outsizeWeight());
      ds.field("ead", &self.ead());
      ds.field("lad", &self.lad());
      ds.finish()
  }
}
#[non_exhaustive]
#[derive(Debug, Clone, PartialEq)]
pub struct AircraftMissionRequirements_AbridgedT {
  pub gdssReqId: Option<String>,
  pub onloadId: i32,
  pub onloadLOCode: Option<String>,
  pub offloadId: i32,
  pub offloadLOCode: Option<String>,
  pub uln: Option<String>,
  pub transReqNum: Option<String>,
  pub projName: Option<String>,
  pub oplan: Option<String>,
  pub numPax: i32,
  pub numLitter: i32,
  pub numAmbulatory: i32,
  pub numAttendant: i32,
  pub bulkWeight: f64,
  pub oversizeWeight: f64,
  pub outsizeWeight: f64,
  pub ead: Option<String>,
  pub lad: Option<String>,
}
impl Default for AircraftMissionRequirements_AbridgedT {
  fn default() -> Self {
    Self {
      gdssReqId: None,
      onloadId: 0,
      onloadLOCode: None,
      offloadId: 0,
      offloadLOCode: None,
      uln: None,
      transReqNum: None,
      projName: None,
      oplan: None,
      numPax: 0,
      numLitter: 0,
      numAmbulatory: 0,
      numAttendant: 0,
      bulkWeight: 0.0,
      oversizeWeight: 0.0,
      outsizeWeight: 0.0,
      ead: None,
      lad: None,
    }
  }
}
impl AircraftMissionRequirements_AbridgedT {
  pub fn pack<'b, A: flatbuffers::Allocator + 'b>(
    &self,
    _fbb: &mut flatbuffers::FlatBufferBuilder<'b, A>
  ) -> flatbuffers::WIPOffset<AircraftMissionRequirements_Abridged<'b>> {
    let gdssReqId = self.gdssReqId.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let onloadId = self.onloadId;
    let onloadLOCode = self.onloadLOCode.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let offloadId = self.offloadId;
    let offloadLOCode = self.offloadLOCode.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let uln = self.uln.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let transReqNum = self.transReqNum.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let projName = self.projName.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let oplan = self.oplan.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let numPax = self.numPax;
    let numLitter = self.numLitter;
    let numAmbulatory = self.numAmbulatory;
    let numAttendant = self.numAttendant;
    let bulkWeight = self.bulkWeight;
    let oversizeWeight = self.oversizeWeight;
    let outsizeWeight = self.outsizeWeight;
    let ead = self.ead.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let lad = self.lad.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    AircraftMissionRequirements_Abridged::create(_fbb, &AircraftMissionRequirements_AbridgedArgs{
      gdssReqId,
      onloadId,
      onloadLOCode,
      offloadId,
      offloadLOCode,
      uln,
      transReqNum,
      projName,
      oplan,
      numPax,
      numLitter,
      numAmbulatory,
      numAttendant,
      bulkWeight,
      oversizeWeight,
      outsizeWeight,
      ead,
      lad,
    })
  }
}
#[inline]
/// Verifies that a buffer of bytes contains a `AircraftMissionRequirements_Abridged`
/// and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_aircraft_mission_requirements_abridged_unchecked`.
pub fn root_as_aircraft_mission_requirements_abridged(buf: &[u8]) -> Result<AircraftMissionRequirements_Abridged, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root::<AircraftMissionRequirements_Abridged>(buf)
}
#[inline]
/// Verifies that a buffer of bytes contains a size prefixed
/// `AircraftMissionRequirements_Abridged` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `size_prefixed_root_as_aircraft_mission_requirements_abridged_unchecked`.
pub fn size_prefixed_root_as_aircraft_mission_requirements_abridged(buf: &[u8]) -> Result<AircraftMissionRequirements_Abridged, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root::<AircraftMissionRequirements_Abridged>(buf)
}
#[inline]
/// Verifies, with the given options, that a buffer of bytes
/// contains a `AircraftMissionRequirements_Abridged` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_aircraft_mission_requirements_abridged_unchecked`.
pub fn root_as_aircraft_mission_requirements_abridged_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<AircraftMissionRequirements_Abridged<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root_with_opts::<AircraftMissionRequirements_Abridged<'b>>(opts, buf)
}
#[inline]
/// Verifies, with the given verifier options, that a buffer of
/// bytes contains a size prefixed `AircraftMissionRequirements_Abridged` and returns
/// it. Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_aircraft_mission_requirements_abridged_unchecked`.
pub fn size_prefixed_root_as_aircraft_mission_requirements_abridged_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<AircraftMissionRequirements_Abridged<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root_with_opts::<AircraftMissionRequirements_Abridged<'b>>(opts, buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a AircraftMissionRequirements_Abridged and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid `AircraftMissionRequirements_Abridged`.
pub unsafe fn root_as_aircraft_mission_requirements_abridged_unchecked(buf: &[u8]) -> AircraftMissionRequirements_Abridged {
  flatbuffers::root_unchecked::<AircraftMissionRequirements_Abridged>(buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a size prefixed AircraftMissionRequirements_Abridged and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid size prefixed `AircraftMissionRequirements_Abridged`.
pub unsafe fn size_prefixed_root_as_aircraft_mission_requirements_abridged_unchecked(buf: &[u8]) -> AircraftMissionRequirements_Abridged {
  flatbuffers::size_prefixed_root_unchecked::<AircraftMissionRequirements_Abridged>(buf)
}
pub const AIRCRAFT_MISSION_REQUIREMENTS_ABRIDGED_IDENTIFIER: &str = "AIRC";

#[inline]
pub fn aircraft_mission_requirements_abridged_buffer_has_identifier(buf: &[u8]) -> bool {
  flatbuffers::buffer_has_identifier(buf, AIRCRAFT_MISSION_REQUIREMENTS_ABRIDGED_IDENTIFIER, false)
}

#[inline]
pub fn aircraft_mission_requirements_abridged_size_prefixed_buffer_has_identifier(buf: &[u8]) -> bool {
  flatbuffers::buffer_has_identifier(buf, AIRCRAFT_MISSION_REQUIREMENTS_ABRIDGED_IDENTIFIER, true)
}

#[inline]
pub fn finish_aircraft_mission_requirements_abridged_buffer<'a, 'b, A: flatbuffers::Allocator + 'a>(
    fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
    root: flatbuffers::WIPOffset<AircraftMissionRequirements_Abridged<'a>>) {
  fbb.finish(root, Some(AIRCRAFT_MISSION_REQUIREMENTS_ABRIDGED_IDENTIFIER));
}

#[inline]
pub fn finish_size_prefixed_aircraft_mission_requirements_abridged_buffer<'a, 'b, A: flatbuffers::Allocator + 'a>(fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>, root: flatbuffers::WIPOffset<AircraftMissionRequirements_Abridged<'a>>) {
  fbb.finish_size_prefixed(root, Some(AIRCRAFT_MISSION_REQUIREMENTS_ABRIDGED_IDENTIFIER));
}
