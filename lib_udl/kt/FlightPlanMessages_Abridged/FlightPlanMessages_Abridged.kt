// automatically generated by the FlatBuffers compiler, do not modify

import com.google.flatbuffers.BaseVector
import com.google.flatbuffers.BooleanVector
import com.google.flatbuffers.ByteVector
import com.google.flatbuffers.Constants
import com.google.flatbuffers.DoubleVector
import com.google.flatbuffers.FlatBufferBuilder
import com.google.flatbuffers.FloatVector
import com.google.flatbuffers.LongVector
import com.google.flatbuffers.StringVector
import com.google.flatbuffers.Struct
import com.google.flatbuffers.Table
import com.google.flatbuffers.UnionVector
import java.nio.ByteBuffer
import java.nio.ByteOrder
import kotlin.math.sign

/**
 * /// Collection of messages associated with this flight plan indicating the severity, the point where the message was generated, the path (Primary, Alternate, etc.), and the text of the message.
 */
@Suppress("unused")
class FlightPlanMessages_Abridged : Table() {

    fun __init(_i: Int, _bb: ByteBuffer)  {
        __reset(_i, _bb)
    }
    fun __assign(_i: Int, _bb: ByteBuffer) : FlightPlanMessages_Abridged {
        __init(_i, _bb)
        return this
    }
    /**
     * The severity of the message.
     * Example: /// Example: SEVERE
     * Constraints: Minimum length = 0, Maximum length = 16
     */
    val severity : String?
        get() {
            val o = __offset(4)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val severityAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(4, 1)
    fun severityInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 4, 1)
    /**
     * The waypoint number for which the message was generated, or enter "PLAN" for a message impacting the entire route.
     * Example: /// Example: 20
     * Constraints: Minimum length = 0, Maximum length = 8
     */
    val wpNum : String?
        get() {
            val o = __offset(6)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val wpNumAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(6, 1)
    fun wpNumInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 6, 1)
    /**
     * The flight path that generated the message (PRIMARY, ALTERNATE, etc.).
     * Example: /// Example: PRIMARY
     * Constraints: Minimum length = 0, Maximum length = 16
     */
    val routePath : String?
        get() {
            val o = __offset(8)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val routePathAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(8, 1)
    fun routePathInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 8, 1)
    /**
     * The text of the message.
     * Example: /// Example: Message text
     * Constraints: Minimum length = 0, Maximum length = 256
     */
    val msgText : String?
        get() {
            val o = __offset(10)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val msgTextAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(10, 1)
    fun msgTextInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 10, 1)
    companion object {
        fun validateVersion() = Constants.FLATBUFFERS_24_3_25()
        fun getRootAsFlightPlanMessages_Abridged(_bb: ByteBuffer): FlightPlanMessages_Abridged = getRootAsFlightPlanMessages_Abridged(_bb, FlightPlanMessages_Abridged())
        fun getRootAsFlightPlanMessages_Abridged(_bb: ByteBuffer, obj: FlightPlanMessages_Abridged): FlightPlanMessages_Abridged {
            _bb.order(ByteOrder.LITTLE_ENDIAN)
            return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb))
        }
        fun FlightPlanMessages_AbridgedBufferHasIdentifier(_bb: ByteBuffer) : Boolean = __has_identifier(_bb, "FLIG")
        fun createFlightPlanMessages_Abridged(builder: FlatBufferBuilder, severityOffset: Int, wpNumOffset: Int, routePathOffset: Int, msgTextOffset: Int) : Int {
            builder.startTable(4)
            addMsgText(builder, msgTextOffset)
            addRoutePath(builder, routePathOffset)
            addWpNum(builder, wpNumOffset)
            addSeverity(builder, severityOffset)
            return endFlightPlanMessages_Abridged(builder)
        }
        fun startFlightPlanMessages_Abridged(builder: FlatBufferBuilder) = builder.startTable(4)
        fun addSeverity(builder: FlatBufferBuilder, severity: Int) = builder.addOffset(0, severity, 0)
        fun addWpNum(builder: FlatBufferBuilder, wpNum: Int) = builder.addOffset(1, wpNum, 0)
        fun addRoutePath(builder: FlatBufferBuilder, routePath: Int) = builder.addOffset(2, routePath, 0)
        fun addMsgText(builder: FlatBufferBuilder, msgText: Int) = builder.addOffset(3, msgText, 0)
        fun endFlightPlanMessages_Abridged(builder: FlatBufferBuilder) : Int {
            val o = builder.endTable()
            return o
        }
        fun finishFlightPlanMessagesAbridgedBuffer(builder: FlatBufferBuilder, offset: Int) = builder.finish(offset, "FLIG")
        fun finishSizePrefixedFlightPlanMessages_AbridgedBuffer(builder: FlatBufferBuilder, offset: Int) = builder.finishSizePrefixed(offset, "FLIG")
    }
}
