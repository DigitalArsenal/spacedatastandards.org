// automatically generated by the FlatBuffers compiler, do not modify

import com.google.flatbuffers.BaseVector
import com.google.flatbuffers.BooleanVector
import com.google.flatbuffers.ByteVector
import com.google.flatbuffers.Constants
import com.google.flatbuffers.DoubleVector
import com.google.flatbuffers.FlatBufferBuilder
import com.google.flatbuffers.FloatVector
import com.google.flatbuffers.LongVector
import com.google.flatbuffers.StringVector
import com.google.flatbuffers.Struct
import com.google.flatbuffers.Table
import com.google.flatbuffers.UnionVector
import java.nio.ByteBuffer
import java.nio.ByteOrder
import kotlin.math.sign

/**
 * /// List of COA metrics associated with this effect response.
 */
@Suppress("unused")
class EffectResponseMetrics_Ingest : Table() {

    fun __init(_i: Int, _bb: ByteBuffer)  {
        __reset(_i, _bb)
    }
    fun __assign(_i: Int, _bb: ByteBuffer) : EffectResponseMetrics_Ingest {
        __init(_i, _bb)
        return this
    }
    /**
     * The type of the metric (e.g. CollateralDamage, GoalAchievement, OpportunityCost, Timeliness, Unavailable, etc.).
     * Example: /// Example: GoalAchievement
     * Constraints: Minimum length = 0, Maximum length = 64
     */
    val metricType : String?
        get() {
            val o = __offset(4)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val metricTypeAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(4, 1)
    fun metricTypeInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 4, 1)
    /**
     * The metric score specific to its domain.
     * Example: /// Example: 10.1
     * Constraints: No constraints specified.
     */
    val domainValue : Double
        get() {
            val o = __offset(6)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * The metric score adjusted to be relative and comparable to other domains.
     * Example: /// Example: 10.1
     * Constraints: No constraints specified.
     */
    val relativeValue : Double
        get() {
            val o = __offset(8)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * The metric that was used to score this task.
     * Example: /// Example: Example metric
     * Constraints: Minimum length = 0, Maximum length = 1024
     */
    val provenance : String?
        get() {
            val o = __offset(10)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val provenanceAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(10, 1)
    fun provenanceInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 10, 1)
    companion object {
        fun validateVersion() = Constants.FLATBUFFERS_24_3_25()
        fun getRootAsEffectResponseMetrics_Ingest(_bb: ByteBuffer): EffectResponseMetrics_Ingest = getRootAsEffectResponseMetrics_Ingest(_bb, EffectResponseMetrics_Ingest())
        fun getRootAsEffectResponseMetrics_Ingest(_bb: ByteBuffer, obj: EffectResponseMetrics_Ingest): EffectResponseMetrics_Ingest {
            _bb.order(ByteOrder.LITTLE_ENDIAN)
            return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb))
        }
        fun EffectResponseMetrics_IngestBufferHasIdentifier(_bb: ByteBuffer) : Boolean = __has_identifier(_bb, "EFFE")
        fun createEffectResponseMetrics_Ingest(builder: FlatBufferBuilder, metricTypeOffset: Int, domainValue: Double, relativeValue: Double, provenanceOffset: Int) : Int {
            builder.startTable(4)
            addRelativeValue(builder, relativeValue)
            addDomainValue(builder, domainValue)
            addProvenance(builder, provenanceOffset)
            addMetricType(builder, metricTypeOffset)
            return endEffectResponseMetrics_Ingest(builder)
        }
        fun startEffectResponseMetrics_Ingest(builder: FlatBufferBuilder) = builder.startTable(4)
        fun addMetricType(builder: FlatBufferBuilder, metricType: Int) = builder.addOffset(0, metricType, 0)
        fun addDomainValue(builder: FlatBufferBuilder, domainValue: Double) = builder.addDouble(1, domainValue, 0.0)
        fun addRelativeValue(builder: FlatBufferBuilder, relativeValue: Double) = builder.addDouble(2, relativeValue, 0.0)
        fun addProvenance(builder: FlatBufferBuilder, provenance: Int) = builder.addOffset(3, provenance, 0)
        fun endEffectResponseMetrics_Ingest(builder: FlatBufferBuilder) : Int {
            val o = builder.endTable()
            return o
        }
        fun finishEffectResponseMetricsIngestBuffer(builder: FlatBufferBuilder, offset: Int) = builder.finish(offset, "EFFE")
        fun finishSizePrefixedEffectResponseMetrics_IngestBuffer(builder: FlatBufferBuilder, offset: Int) = builder.finishSizePrefixed(offset, "EFFE")
    }
}
