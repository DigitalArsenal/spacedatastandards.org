// automatically generated by the FlatBuffers compiler, do not modify

import com.google.flatbuffers.BaseVector
import com.google.flatbuffers.BooleanVector
import com.google.flatbuffers.ByteVector
import com.google.flatbuffers.Constants
import com.google.flatbuffers.DoubleVector
import com.google.flatbuffers.FlatBufferBuilder
import com.google.flatbuffers.FloatVector
import com.google.flatbuffers.LongVector
import com.google.flatbuffers.StringVector
import com.google.flatbuffers.Struct
import com.google.flatbuffers.Table
import com.google.flatbuffers.UnionVector
import java.nio.ByteBuffer
import java.nio.ByteOrder
import kotlin.math.sign

/**
 * /// Objective Area Information.
 */
@Suppress("unused")
class PersonnelRecoveryObjectiveAreaInfo_Abridged : Table() {

    fun __init(_i: Int, _bb: ByteBuffer)  {
        __reset(_i, _bb)
    }
    fun __assign(_i: Int, _bb: ByteBuffer) : PersonnelRecoveryObjectiveAreaInfo_Abridged {
        __init(_i, _bb)
        return this
    }
    /**
     * Array of the WGS-84 latitude (-90 to 90, negative values south of the equator) in degrees, longitude (-180 to 180, negative values west of Prime Meridian) in degrees, and altitude, in meters, of the pz location.  This array must contain a minimum of 2 elements (latitude and longitude), and may contain an optional 3rd element (altitude).
     * Example: /// Example: [103.23, 30.445]
     * Constraints: No constraints specified.
     */
    fun pzLocation(j: Int) : String? {
        val o = __offset(4)
        return if (o != 0) {
            __string(__vector(o) + j * 4)
        } else {
            null
        }
    }
    val pzLocationLength : Int
        get() {
            val o = __offset(4); return if (o != 0) __vector_len(o) else 0
        }
    /**
     * Description of the pickup zone location.
     * Example: /// Example: Near the lake.
     * Constraints: Minimum length = 0, Maximum length = 1024
     */
    val pzDesc : String?
        get() {
            val o = __offset(6)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val pzDescAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(6, 1)
    fun pzDescInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 6, 1)
    /**
     * The call sign of the on-scene commander.
     * Example: /// Example: STARFOX
     * Constraints: Minimum length = 0, Maximum length = 128
     */
    val oscCallSign : String?
        get() {
            val o = __offset(8)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val oscCallSignAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(8, 1)
    fun oscCallSignInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 8, 1)
    /**
     * The radio frequency of the on-scene commander.
     * Example: /// Example: 12.55
     * Constraints: No constraints specified.
     */
    val oscFreq : Double
        get() {
            val o = __offset(10)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Information detailing knowledge of enemies in the area.
     * Example: /// Example: No example provided.
     * Constraints: No constraints specified.
     */
    fun enemyData(j: Int) : String? {
        val o = __offset(12)
        return if (o != 0) {
            __string(__vector(o) + j * 4)
        } else {
            null
        }
    }
    val enemyDataLength : Int
        get() {
            val o = __offset(12); return if (o != 0) __vector_len(o) else 0
        }
    companion object {
        fun validateVersion() = Constants.FLATBUFFERS_24_3_25()
        fun getRootAsPersonnelRecoveryObjectiveAreaInfo_Abridged(_bb: ByteBuffer): PersonnelRecoveryObjectiveAreaInfo_Abridged = getRootAsPersonnelRecoveryObjectiveAreaInfo_Abridged(_bb, PersonnelRecoveryObjectiveAreaInfo_Abridged())
        fun getRootAsPersonnelRecoveryObjectiveAreaInfo_Abridged(_bb: ByteBuffer, obj: PersonnelRecoveryObjectiveAreaInfo_Abridged): PersonnelRecoveryObjectiveAreaInfo_Abridged {
            _bb.order(ByteOrder.LITTLE_ENDIAN)
            return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb))
        }
        fun PersonnelRecoveryObjectiveAreaInfo_AbridgedBufferHasIdentifier(_bb: ByteBuffer) : Boolean = __has_identifier(_bb, "PERS")
        fun createPersonnelRecoveryObjectiveAreaInfo_Abridged(builder: FlatBufferBuilder, pzLocationOffset: Int, pzDescOffset: Int, oscCallSignOffset: Int, oscFreq: Double, enemyDataOffset: Int) : Int {
            builder.startTable(5)
            addOscFreq(builder, oscFreq)
            addEnemyData(builder, enemyDataOffset)
            addOscCallSign(builder, oscCallSignOffset)
            addPzDesc(builder, pzDescOffset)
            addPzLocation(builder, pzLocationOffset)
            return endPersonnelRecoveryObjectiveAreaInfo_Abridged(builder)
        }
        fun startPersonnelRecoveryObjectiveAreaInfo_Abridged(builder: FlatBufferBuilder) = builder.startTable(5)
        fun addPzLocation(builder: FlatBufferBuilder, pzLocation: Int) = builder.addOffset(0, pzLocation, 0)
        fun createPzLocationVector(builder: FlatBufferBuilder, data: IntArray) : Int {
            builder.startVector(4, data.size, 4)
            for (i in data.size - 1 downTo 0) {
                builder.addOffset(data[i])
            }
            return builder.endVector()
        }
        fun startPzLocationVector(builder: FlatBufferBuilder, numElems: Int) = builder.startVector(4, numElems, 4)
        fun addPzDesc(builder: FlatBufferBuilder, pzDesc: Int) = builder.addOffset(1, pzDesc, 0)
        fun addOscCallSign(builder: FlatBufferBuilder, oscCallSign: Int) = builder.addOffset(2, oscCallSign, 0)
        fun addOscFreq(builder: FlatBufferBuilder, oscFreq: Double) = builder.addDouble(3, oscFreq, 0.0)
        fun addEnemyData(builder: FlatBufferBuilder, enemyData: Int) = builder.addOffset(4, enemyData, 0)
        fun createEnemyDataVector(builder: FlatBufferBuilder, data: IntArray) : Int {
            builder.startVector(4, data.size, 4)
            for (i in data.size - 1 downTo 0) {
                builder.addOffset(data[i])
            }
            return builder.endVector()
        }
        fun startEnemyDataVector(builder: FlatBufferBuilder, numElems: Int) = builder.startVector(4, numElems, 4)
        fun endPersonnelRecoveryObjectiveAreaInfo_Abridged(builder: FlatBufferBuilder) : Int {
            val o = builder.endTable()
            return o
        }
        fun finishPersonnelRecoveryObjectiveAreaInfoAbridgedBuffer(builder: FlatBufferBuilder, offset: Int) = builder.finish(offset, "PERS")
        fun finishSizePrefixedPersonnelRecoveryObjectiveAreaInfo_AbridgedBuffer(builder: FlatBufferBuilder, offset: Int) = builder.finishSizePrefixed(offset, "PERS")
    }
}
