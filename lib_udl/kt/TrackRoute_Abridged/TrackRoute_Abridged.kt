// automatically generated by the FlatBuffers compiler, do not modify

import com.google.flatbuffers.BaseVector
import com.google.flatbuffers.BooleanVector
import com.google.flatbuffers.ByteVector
import com.google.flatbuffers.Constants
import com.google.flatbuffers.DoubleVector
import com.google.flatbuffers.FlatBufferBuilder
import com.google.flatbuffers.FloatVector
import com.google.flatbuffers.LongVector
import com.google.flatbuffers.StringVector
import com.google.flatbuffers.Struct
import com.google.flatbuffers.Table
import com.google.flatbuffers.UnionVector
import java.nio.ByteBuffer
import java.nio.ByteOrder
import kotlin.math.sign

/**
 * /// A track route is a prescribed route for performing training events or operations such as air refueling.
 */
@Suppress("unused")
class TrackRoute_Abridged : Table() {

    fun __init(_i: Int, _bb: ByteBuffer)  {
        __reset(_i, _bb)
    }
    fun __assign(_i: Int, _bb: ByteBuffer) : TrackRoute_Abridged {
        __init(_i, _bb)
        return this
    }
    /**
     * Unique identifier of the record, auto-generated by the system.
     * Example: /// Example: 026dd511-8ba5-47d3-9909-836149f87686
     * Constraints: Minimum length = 1, Maximum length = 36
     */
    val id : String?
        get() {
            val o = __offset(4)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val idAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(4, 1)
    fun idInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 4, 1)
    /**
     * Classification marking of the data in IC/CAPCO Portion-marked format.
     * Example: /// Example: U
     * Constraints: Minimum length = 1, Maximum length = 128
     */
    val classificationMarking : String?
        get() {
            val o = __offset(6)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val classificationMarkingAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(6, 1)
    fun classificationMarkingInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 6, 1)
    /**
     * The track route type represented by this record (ex. AIR REFUELING).
     * Example: /// Example: AIR REFUELING
     * Constraints: Minimum length = 1, Maximum length = 36
     */
    val type : String?
        get() {
            val o = __offset(8)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val typeAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(8, 1)
    fun typeInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 8, 1)
    /**
     * Optional air refueling track ID from external systems. This field has no meaning within UDL and is provided as a convenience for systems that require tracking of an internal system generated ID.
     * Example: /// Example: GDSSMH121004232315303094
     * Constraints: Minimum length = 0, Maximum length = 36
     */
    val externalId : String?
        get() {
            val o = __offset(10)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val externalIdAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(10, 1)
    fun externalIdInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 10, 1)
    /**
     * The principal compass direction (cardinal or ordinal) of the track route.
     * Example: /// Example: NE
     * Constraints: Minimum length = 0, Maximum length = 2
     */
    val direction : String?
        get() {
            val o = __offset(12)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val directionAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(12, 1)
    fun directionInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 12, 1)
    /**
     * The name of the creating organization of the track route.
     * Example: /// Example: HQPAC
     * Constraints: Minimum length = 0, Maximum length = 250
     */
    val creatingOrg : String?
        get() {
            val o = __offset(14)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val creatingOrgAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(14, 1)
    fun creatingOrgInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 14, 1)
    /**
     * Track location ID.
     * Example: /// Example: POACHR
     * Constraints: Minimum length = 0, Maximum length = 36
     */
    val locationTrackId : String?
        get() {
            val o = __offset(16)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val locationTrackIdAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(16, 1)
    fun locationTrackIdInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 16, 1)
    /**
     * Identifier of the track.
     * Example: /// Example: CH61A
     * Constraints: Minimum length = 0, Maximum length = 36
     */
    val trackId : String?
        get() {
            val o = __offset(18)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val trackIdAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(18, 1)
    fun trackIdInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 18, 1)
    /**
     * Name of the track.
     * Example: /// Example: CH61 POST
     * Constraints: Minimum length = 0, Maximum length = 50
     */
    val trackName : String?
        get() {
            val o = __offset(20)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val trackNameAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(20, 1)
    fun trackNameInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 20, 1)
    /**
     * Abbreviated name of the track.
     * Example: /// Example: CH61
     * Constraints: Minimum length = 0, Maximum length = 16
     */
    val shortName : String?
        get() {
            val o = __offset(22)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val shortNameAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(22, 1)
    fun shortNameInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 22, 1)
    /**
     * Type of process used by AMC to schedule an air refueling event. Possible values are A (Matched Long Range), F (Matched AMC Short Notice), N (Unmatched Theater Operation Short Notice (Theater Assets)), R, Unmatched Long Range, S (Soft Air Refueling), T (Matched Theater Operation Short Notice (Theater Assets)), V (Unmatched AMC Short Notice), X (Unmatched Theater Operation Short Notice (AMC Assets)), Y (Matched Theater Operation Short Notice (AMC Assets)), Z (Other Air Refueling).
     * Example: /// Example: V
     * Constraints: Minimum length = 0, Maximum length = 2
     */
    val typeCode : String?
        get() {
            val o = __offset(24)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val typeCodeAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(24, 1)
    fun typeCodeInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 24, 1)
    /**
     * Region code indicating where the track resides as determined by the data source.
     * Example: /// Example: 5
     * Constraints: Minimum length = 0, Maximum length = 36
     */
    val regionCode : String?
        get() {
            val o = __offset(26)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val regionCodeAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(26, 1)
    fun regionCodeInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 26, 1)
    /**
     * Region where the track resides.
     * Example: /// Example: North America
     * Constraints: Minimum length = 0, Maximum length = 32
     */
    val regionName : String?
        get() {
            val o = __offset(28)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val regionNameAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(28, 1)
    fun regionNameInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 28, 1)
    /**
     * The APX radar code sent and received by the aircraft for identification.
     * Example: /// Example: 5/1
     * Constraints: Minimum length = 0, Maximum length = 36
     */
    val apxBeaconCode : String?
        get() {
            val o = __offset(30)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val apxBeaconCodeAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(30, 1)
    fun apxBeaconCodeInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 30, 1)
    /**
     * The receiver tanker channel identifer for air refueling tracks.
     * Example: /// Example: 31/094
     * Constraints: Minimum length = 0, Maximum length = 36
     */
    val receiverTankerChcode : String?
        get() {
            val o = __offset(32)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val receiverTankerChcodeAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(32, 1)
    fun receiverTankerChcodeInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 32, 1)
    /**
     * The APN radar code sent and received by the aircraft for identification.
     * Example: /// Example: 1-3-1
     * Constraints: Minimum length = 0, Maximum length = 36
     */
    val apnSetting : String?
        get() {
            val o = __offset(34)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val apnSettingAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(34, 1)
    fun apnSettingInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 34, 1)
    /**
     * Standard Indicator Code of the air refueling track.
     * Example: /// Example: N
     * Constraints: Minimum length = 0, Maximum length = 36
     */
    val sic : String?
        get() {
            val o = __offset(36)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val sicAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(36, 1)
    fun sicInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 36, 1)
    /**
     * Date the track needs to be reviewed for accuracy or deletion in ISO 8601 UTC format with millisecond precision.
     * Example: /// Example: 2024-09-16T16:00:00.123Z
     * Constraints: No constraints specified.
     */
    val reviewDate : String?
        get() {
            val o = __offset(38)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val reviewDateAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(38, 1)
    fun reviewDateInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 38, 1)
    /**
     * Used to show last time the track route was added to an itinerary in ISO 8601 UTC format with millisecond precision.
     * Example: /// Example: 2024-09-17T16:00:00.123Z
     * Constraints: No constraints specified.
     */
    val lastUsedDate : String?
        get() {
            val o = __offset(40)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val lastUsedDateAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(40, 1)
    fun lastUsedDateInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 40, 1)
    /**
     * The last updated date of the track route in ISO 8601 UTC format with millisecond precision.
     * Example: /// Example: 2024-09-17T16:00:00.123Z
     * Constraints: No constraints specified.
     */
    val lastUpdateDate : String?
        get() {
            val o = __offset(42)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val lastUpdateDateAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(42, 1)
    fun lastUpdateDateInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 42, 1)
    /**
     * The primary UHF radio frequency used for the track route in megahertz.
     * Example: /// Example: 357.5
     * Constraints: No constraints specified.
     */
    val priFreq : Double
        get() {
            val o = __offset(44)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * The secondary UHF radio frequency used for the track route in megahertz.
     * Example: /// Example: 319.7
     * Constraints: No constraints specified.
     */
    val secFreq : Double
        get() {
            val o = __offset(46)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Air Refueling Track Control Center message.
     * Example: /// Example: OAKLAND CTR/GUAM CERAP
     * Constraints: Minimum length = 0, Maximum length = 256
     */
    val artccMessage : String?
        get() {
            val o = __offset(48)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val artccMessageAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(48, 1)
    fun artccMessageInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 48, 1)
    /**
     * Point of contact for the air refueling track route scheduler.
     * Example: /// Example: 97 OSS/OSOS DSN 866-5555
     * Constraints: Minimum length = 0, Maximum length = 256
     */
    val schedulerOrgName : String?
        get() {
            val o = __offset(50)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val schedulerOrgNameAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(50, 1)
    fun schedulerOrgNameInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 50, 1)
    /**
     * The unit responsible for scheduling the track route.
     * Example: /// Example: 612 AOC
     * Constraints: Minimum length = 0, Maximum length = 32
     */
    val schedulerOrgUnit : String?
        get() {
            val o = __offset(52)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val schedulerOrgUnitAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(52, 1)
    fun schedulerOrgUnitInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 52, 1)
    /**
     * The date which the DAFIF track was last updated/validated in ISO 8601 UTC format with millisecond precision.
     * Example: /// Example: 2024-09-17T16:00:00.123Z
     * Constraints: No constraints specified.
     */
    val effectiveDate : String?
        get() {
            val o = __offset(54)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val effectiveDateAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(54, 1)
    fun effectiveDateInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 54, 1)
    /**
     * Points identified within the route.
     * Example: /// Example: No example provided.
     * Constraints: No constraints specified.
     */
    fun routePoints(j: Int) : String? {
        val o = __offset(56)
        return if (o != 0) {
            __string(__vector(o) + j * 4)
        } else {
            null
        }
    }
    val routePointsLength : Int
        get() {
            val o = __offset(56); return if (o != 0) __vector_len(o) else 0
        }
    /**
     * Minimum and maximum altitude bounds for the track.
     * Example: /// Example: No example provided.
     * Constraints: No constraints specified.
     */
    fun altitudeBlocks(j: Int) : String? {
        val o = __offset(58)
        return if (o != 0) {
            __string(__vector(o) + j * 4)
        } else {
            null
        }
    }
    val altitudeBlocksLength : Int
        get() {
            val o = __offset(58); return if (o != 0) __vector_len(o) else 0
        }
    /**
     * Point of contacts for scheduling or modifying the route.
     * Example: /// Example: No example provided.
     * Constraints: No constraints specified.
     */
    fun poc(j: Int) : String? {
        val o = __offset(60)
        return if (o != 0) {
            __string(__vector(o) + j * 4)
        } else {
            null
        }
    }
    val pocLength : Int
        get() {
            val o = __offset(60); return if (o != 0) __vector_len(o) else 0
        }
    /**
     * Time the row was created in the database, auto-populated by the system.
     * Example: /// Example: 2022-01-01T16:00:00.123Z
     * Constraints: No constraints specified.
     */
    val createdAt : String?
        get() {
            val o = __offset(62)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val createdAtAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(62, 1)
    fun createdAtInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 62, 1)
    /**
     * Application user who created the row in the database, auto-populated by the system.
     * Example: /// Example: some.user
     * Constraints: Minimum length = 1, Maximum length = 64
     */
    val createdBy : String?
        get() {
            val o = __offset(64)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val createdByAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(64, 1)
    fun createdByInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 64, 1)
    /**
     * Time the row was updated in the database, auto-populated by the system.
     * Example: /// Example: 2022-01-01T16:00:00.123Z
     * Constraints: No constraints specified.
     */
    val updatedAt : String?
        get() {
            val o = __offset(66)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val updatedAtAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(66, 1)
    fun updatedAtInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 66, 1)
    /**
     * Application user who updated the row in the database, auto-populated by the system.
     * Example: /// Example: some.user
     * Constraints: Minimum length = 1, Maximum length = 64
     */
    val updatedBy : String?
        get() {
            val o = __offset(68)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val updatedByAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(68, 1)
    fun updatedByInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 68, 1)
    /**
     * The source data library from which this record was received. This could be a remote or tactical UDL or another data library. If null, the record should be assumed to have originated from the primary Enterprise UDL.
     * Example: /// Example: AXE
     * Constraints: Minimum length = 0, Maximum length = 64
     */
    val sourceDl : String?
        get() {
            val o = __offset(70)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val sourceDlAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(70, 1)
    fun sourceDlInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 70, 1)
    /**
     * Source of the data.
     * Example: /// Example: Bluestaq
     * Constraints: Minimum length = 1, Maximum length = 36
     */
    val source : String?
        get() {
            val o = __offset(72)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val sourceAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(72, 1)
    fun sourceInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 72, 1)
    /**
     * Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
     * Example: /// Example: THIRD_PARTY_DATASOURCE
     * Constraints: Minimum length = 0, Maximum length = 64
     */
    val origin : String?
        get() {
            val o = __offset(74)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val originAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(74, 1)
    fun originInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 74, 1)
    /**
     * The originating source network on which this record was created, auto-populated by the system.
     * Example: /// Example: OPS1
     * Constraints: Minimum length = 0, Maximum length = 32
     */
    val origNetwork : String?
        get() {
            val o = __offset(76)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val origNetworkAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(76, 1)
    fun origNetworkInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 76, 1)
    /**
     * Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
     * EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
     * REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
     * SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
     * TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
     * Example: /// Example: TEST
     * Constraints: Minimum length = 1, Maximum length = 32
     */
    val dataMode : Byte
        get() {
            val o = __offset(78)
            return if(o != 0) bb.get(o + bb_pos) else 0
        }
    companion object {
        fun validateVersion() = Constants.FLATBUFFERS_24_3_25()
        fun getRootAsTrackRoute_Abridged(_bb: ByteBuffer): TrackRoute_Abridged = getRootAsTrackRoute_Abridged(_bb, TrackRoute_Abridged())
        fun getRootAsTrackRoute_Abridged(_bb: ByteBuffer, obj: TrackRoute_Abridged): TrackRoute_Abridged {
            _bb.order(ByteOrder.LITTLE_ENDIAN)
            return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb))
        }
        fun TrackRoute_AbridgedBufferHasIdentifier(_bb: ByteBuffer) : Boolean = __has_identifier(_bb, "TRAC")
        fun createTrackRoute_Abridged(builder: FlatBufferBuilder, idOffset: Int, classificationMarkingOffset: Int, typeOffset: Int, externalIdOffset: Int, directionOffset: Int, creatingOrgOffset: Int, locationTrackIdOffset: Int, trackIdOffset: Int, trackNameOffset: Int, shortNameOffset: Int, typeCodeOffset: Int, regionCodeOffset: Int, regionNameOffset: Int, apxBeaconCodeOffset: Int, receiverTankerChcodeOffset: Int, apnSettingOffset: Int, sicOffset: Int, reviewDateOffset: Int, lastUsedDateOffset: Int, lastUpdateDateOffset: Int, priFreq: Double, secFreq: Double, artccMessageOffset: Int, schedulerOrgNameOffset: Int, schedulerOrgUnitOffset: Int, effectiveDateOffset: Int, routePointsOffset: Int, altitudeBlocksOffset: Int, pocOffset: Int, createdAtOffset: Int, createdByOffset: Int, updatedAtOffset: Int, updatedByOffset: Int, sourceDlOffset: Int, sourceOffset: Int, originOffset: Int, origNetworkOffset: Int, dataMode: Byte) : Int {
            builder.startTable(38)
            addSecFreq(builder, secFreq)
            addPriFreq(builder, priFreq)
            addOrigNetwork(builder, origNetworkOffset)
            addOrigin(builder, originOffset)
            addSource(builder, sourceOffset)
            addSourceDL(builder, sourceDlOffset)
            addUpdatedBy(builder, updatedByOffset)
            addUpdatedAt(builder, updatedAtOffset)
            addCreatedBy(builder, createdByOffset)
            addCreatedAt(builder, createdAtOffset)
            addPoc(builder, pocOffset)
            addAltitudeBlocks(builder, altitudeBlocksOffset)
            addRoutePoints(builder, routePointsOffset)
            addEffectiveDate(builder, effectiveDateOffset)
            addSchedulerOrgUnit(builder, schedulerOrgUnitOffset)
            addSchedulerOrgName(builder, schedulerOrgNameOffset)
            addArtccMessage(builder, artccMessageOffset)
            addLastUpdateDate(builder, lastUpdateDateOffset)
            addLastUsedDate(builder, lastUsedDateOffset)
            addReviewDate(builder, reviewDateOffset)
            addSic(builder, sicOffset)
            addApnSetting(builder, apnSettingOffset)
            addReceiverTankerCHCode(builder, receiverTankerChcodeOffset)
            addApxBeaconCode(builder, apxBeaconCodeOffset)
            addRegionName(builder, regionNameOffset)
            addRegionCode(builder, regionCodeOffset)
            addTypeCode(builder, typeCodeOffset)
            addShortName(builder, shortNameOffset)
            addTrackName(builder, trackNameOffset)
            addTrackId(builder, trackIdOffset)
            addLocationTrackId(builder, locationTrackIdOffset)
            addCreatingOrg(builder, creatingOrgOffset)
            addDirection(builder, directionOffset)
            addExternalId(builder, externalIdOffset)
            addType(builder, typeOffset)
            addClassificationMarking(builder, classificationMarkingOffset)
            addId(builder, idOffset)
            addDataMode(builder, dataMode)
            return endTrackRoute_Abridged(builder)
        }
        fun startTrackRoute_Abridged(builder: FlatBufferBuilder) = builder.startTable(38)
        fun addId(builder: FlatBufferBuilder, id: Int) = builder.addOffset(0, id, 0)
        fun addClassificationMarking(builder: FlatBufferBuilder, classificationMarking: Int) = builder.addOffset(1, classificationMarking, 0)
        fun addType(builder: FlatBufferBuilder, type: Int) = builder.addOffset(2, type, 0)
        fun addExternalId(builder: FlatBufferBuilder, externalId: Int) = builder.addOffset(3, externalId, 0)
        fun addDirection(builder: FlatBufferBuilder, direction: Int) = builder.addOffset(4, direction, 0)
        fun addCreatingOrg(builder: FlatBufferBuilder, creatingOrg: Int) = builder.addOffset(5, creatingOrg, 0)
        fun addLocationTrackId(builder: FlatBufferBuilder, locationTrackId: Int) = builder.addOffset(6, locationTrackId, 0)
        fun addTrackId(builder: FlatBufferBuilder, trackId: Int) = builder.addOffset(7, trackId, 0)
        fun addTrackName(builder: FlatBufferBuilder, trackName: Int) = builder.addOffset(8, trackName, 0)
        fun addShortName(builder: FlatBufferBuilder, shortName: Int) = builder.addOffset(9, shortName, 0)
        fun addTypeCode(builder: FlatBufferBuilder, typeCode: Int) = builder.addOffset(10, typeCode, 0)
        fun addRegionCode(builder: FlatBufferBuilder, regionCode: Int) = builder.addOffset(11, regionCode, 0)
        fun addRegionName(builder: FlatBufferBuilder, regionName: Int) = builder.addOffset(12, regionName, 0)
        fun addApxBeaconCode(builder: FlatBufferBuilder, apxBeaconCode: Int) = builder.addOffset(13, apxBeaconCode, 0)
        fun addReceiverTankerCHCode(builder: FlatBufferBuilder, receiverTankerChcode: Int) = builder.addOffset(14, receiverTankerChcode, 0)
        fun addApnSetting(builder: FlatBufferBuilder, apnSetting: Int) = builder.addOffset(15, apnSetting, 0)
        fun addSic(builder: FlatBufferBuilder, sic: Int) = builder.addOffset(16, sic, 0)
        fun addReviewDate(builder: FlatBufferBuilder, reviewDate: Int) = builder.addOffset(17, reviewDate, 0)
        fun addLastUsedDate(builder: FlatBufferBuilder, lastUsedDate: Int) = builder.addOffset(18, lastUsedDate, 0)
        fun addLastUpdateDate(builder: FlatBufferBuilder, lastUpdateDate: Int) = builder.addOffset(19, lastUpdateDate, 0)
        fun addPriFreq(builder: FlatBufferBuilder, priFreq: Double) = builder.addDouble(20, priFreq, 0.0)
        fun addSecFreq(builder: FlatBufferBuilder, secFreq: Double) = builder.addDouble(21, secFreq, 0.0)
        fun addArtccMessage(builder: FlatBufferBuilder, artccMessage: Int) = builder.addOffset(22, artccMessage, 0)
        fun addSchedulerOrgName(builder: FlatBufferBuilder, schedulerOrgName: Int) = builder.addOffset(23, schedulerOrgName, 0)
        fun addSchedulerOrgUnit(builder: FlatBufferBuilder, schedulerOrgUnit: Int) = builder.addOffset(24, schedulerOrgUnit, 0)
        fun addEffectiveDate(builder: FlatBufferBuilder, effectiveDate: Int) = builder.addOffset(25, effectiveDate, 0)
        fun addRoutePoints(builder: FlatBufferBuilder, routePoints: Int) = builder.addOffset(26, routePoints, 0)
        fun createRoutePointsVector(builder: FlatBufferBuilder, data: IntArray) : Int {
            builder.startVector(4, data.size, 4)
            for (i in data.size - 1 downTo 0) {
                builder.addOffset(data[i])
            }
            return builder.endVector()
        }
        fun startRoutePointsVector(builder: FlatBufferBuilder, numElems: Int) = builder.startVector(4, numElems, 4)
        fun addAltitudeBlocks(builder: FlatBufferBuilder, altitudeBlocks: Int) = builder.addOffset(27, altitudeBlocks, 0)
        fun createAltitudeBlocksVector(builder: FlatBufferBuilder, data: IntArray) : Int {
            builder.startVector(4, data.size, 4)
            for (i in data.size - 1 downTo 0) {
                builder.addOffset(data[i])
            }
            return builder.endVector()
        }
        fun startAltitudeBlocksVector(builder: FlatBufferBuilder, numElems: Int) = builder.startVector(4, numElems, 4)
        fun addPoc(builder: FlatBufferBuilder, poc: Int) = builder.addOffset(28, poc, 0)
        fun createPocVector(builder: FlatBufferBuilder, data: IntArray) : Int {
            builder.startVector(4, data.size, 4)
            for (i in data.size - 1 downTo 0) {
                builder.addOffset(data[i])
            }
            return builder.endVector()
        }
        fun startPocVector(builder: FlatBufferBuilder, numElems: Int) = builder.startVector(4, numElems, 4)
        fun addCreatedAt(builder: FlatBufferBuilder, createdAt: Int) = builder.addOffset(29, createdAt, 0)
        fun addCreatedBy(builder: FlatBufferBuilder, createdBy: Int) = builder.addOffset(30, createdBy, 0)
        fun addUpdatedAt(builder: FlatBufferBuilder, updatedAt: Int) = builder.addOffset(31, updatedAt, 0)
        fun addUpdatedBy(builder: FlatBufferBuilder, updatedBy: Int) = builder.addOffset(32, updatedBy, 0)
        fun addSourceDL(builder: FlatBufferBuilder, sourceDl: Int) = builder.addOffset(33, sourceDl, 0)
        fun addSource(builder: FlatBufferBuilder, source: Int) = builder.addOffset(34, source, 0)
        fun addOrigin(builder: FlatBufferBuilder, origin: Int) = builder.addOffset(35, origin, 0)
        fun addOrigNetwork(builder: FlatBufferBuilder, origNetwork: Int) = builder.addOffset(36, origNetwork, 0)
        fun addDataMode(builder: FlatBufferBuilder, dataMode: Byte) = builder.addByte(37, dataMode, 0)
        fun endTrackRoute_Abridged(builder: FlatBufferBuilder) : Int {
            val o = builder.endTable()
            return o
        }
        fun finishTrackRouteAbridgedBuffer(builder: FlatBufferBuilder, offset: Int) = builder.finish(offset, "TRAC")
        fun finishSizePrefixedTrackRoute_AbridgedBuffer(builder: FlatBufferBuilder, offset: Int) = builder.finishSizePrefixed(offset, "TRAC")
    }
}
