// automatically generated by the FlatBuffers compiler, do not modify

import com.google.flatbuffers.BaseVector
import com.google.flatbuffers.BooleanVector
import com.google.flatbuffers.ByteVector
import com.google.flatbuffers.Constants
import com.google.flatbuffers.DoubleVector
import com.google.flatbuffers.FlatBufferBuilder
import com.google.flatbuffers.FloatVector
import com.google.flatbuffers.LongVector
import com.google.flatbuffers.StringVector
import com.google.flatbuffers.Struct
import com.google.flatbuffers.Table
import com.google.flatbuffers.UnionVector
import java.nio.ByteBuffer
import java.nio.ByteOrder
import kotlin.math.sign

/**
 * /// The information in an Air Transport Mission contains unique identification, description of the mission objective, aircraft and crew assignments, mission alias, embarkation/debarkation cargo locations, priority, and other mission characteristics.
 */
@Suppress("unused")
class AirTransportMission_Abridged : Table() {

    fun __init(_i: Int, _bb: ByteBuffer)  {
        __reset(_i, _bb)
    }
    fun __assign(_i: Int, _bb: ByteBuffer) : AirTransportMission_Abridged {
        __init(_i, _bb)
        return this
    }
    /**
     * Unique identifier of the record, auto-generated by the system.
     * Example: /// Example: bdad6945-c9e4-b829-f7be-1ad075541921
     * Constraints: Minimum length = 1, Maximum length = 36
     */
    val id : String?
        get() {
            val o = __offset(4)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val idAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(4, 1)
    fun idInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 4, 1)
    /**
     * Classification marking of the data in IC/CAPCO Portion-marked format.
     * Example: /// Example: U
     * Constraints: Minimum length = 1, Maximum length = 128
     */
    val classificationMarking : String?
        get() {
            val o = __offset(6)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val classificationMarkingAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(6, 1)
    fun classificationMarkingInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 6, 1)
    /**
     * The mission identifier provided by the originating source.
     * Example: /// Example: 614bebb6-a62e-053c-ca51-e79f8a402b28
     * Constraints: Minimum length = 0, Maximum length = 36
     */
    val origMissionId : String?
        get() {
            val o = __offset(8)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val origMissionIdAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(8, 1)
    fun origMissionIdInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 8, 1)
    /**
     * Air Mobility Command (AMC) mission identifier according to Mobility Air Forces (MAF) Encode/Decode procedures.
     * Example: /// Example: AJM7939B1123
     * Constraints: Minimum length = 0, Maximum length = 36
     */
    val amcMissionId : String?
        get() {
            val o = __offset(10)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val amcMissionIdAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(10, 1)
    fun amcMissionIdInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 10, 1)
    /**
     * Global Decision Support System (GDSS) mission unique identifier.
     * Example: /// Example: 1e6edeec-72e9-aaec-d33c-51147cb5ffdd
     * Constraints: Minimum length = 0, Maximum length = 36
     */
    val gdssMissionId : String?
        get() {
            val o = __offset(12)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val gdssMissionIdAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(12, 1)
    fun gdssMissionIdInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 12, 1)
    /**
     * Unique identifier of the previous air transport mission provided by the originating source. Provides a method for the data provider to link air transport missions together chronologically for tasking and planning purposes.
     * Example: /// Example: a77055df-edc3-4047-a5fa-604f80b9fe3c
     * Constraints: Minimum length = 0, Maximum length = 36
     */
    val prevMissionId : String?
        get() {
            val o = __offset(14)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val prevMissionIdAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(14, 1)
    fun prevMissionIdInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 14, 1)
    /**
     * Air Mobility Command (AMC) mission identifier of the previous air transport mission. Provides a method for AMC to link air transport missions together chronologically for tasking and planning purposes.
     * Example: /// Example: AJM7939B1122
     * Constraints: Minimum length = 0, Maximum length = 36
     */
    val prevAmcmissionId : String?
        get() {
            val o = __offset(16)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val prevAmcmissionIdAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(16, 1)
    fun prevAmcmissionIdInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 16, 1)
    /**
     * Unique identifier of the next mission provided by the originating source. Provides a method for the data provider to link air transport missions together chronologically for tasking and planning purposes.
     * Example: /// Example: 186e5658-1079-45c0-bccc-02d2fa31b663
     * Constraints: Minimum length = 0, Maximum length = 36
     */
    val nextMissionId : String?
        get() {
            val o = __offset(18)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val nextMissionIdAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(18, 1)
    fun nextMissionIdInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 18, 1)
    /**
     * Air Mobility Command (AMC) mission identifier of the next air transport mission. Provides a method for AMC to link air transport missions together chronologically for tasking and planning purposes.
     * Example: /// Example: AJM7939B1124
     * Constraints: Minimum length = 0, Maximum length = 36
     */
    val nextAmcmissionId : String?
        get() {
            val o = __offset(20)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val nextAmcmissionIdAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(20, 1)
    fun nextAmcmissionIdInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 20, 1)
    /**
     * A description of this mission's objective.
     * Example: /// Example: Deliver water to island X.
     * Constraints: Minimum length = 0, Maximum length = 1024
     */
    val objective : String?
        get() {
            val o = __offset(22)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val objectiveAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(22, 1)
    fun objectiveInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 22, 1)
    /**
     * A description of this mission's purpose (e.g. why this mission needs to happen, what is the mission supporting, etc.).
     * Example: /// Example: People at island X need water ASAP. Two previous attempts failed due to weather.
     * Constraints: Minimum length = 0, Maximum length = 1024
     */
    val purpose : String?
        get() {
            val o = __offset(24)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val purposeAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(24, 1)
    fun purposeInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 24, 1)
    /**
     * Highest Joint Chiefs of Staff priority of this mission.
     * Example: /// Example: 1A3
     * Constraints: Minimum length = 3, Maximum length = 3
     */
    val jcsPriority : String?
        get() {
            val o = __offset(26)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val jcsPriorityAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(26, 1)
    fun jcsPriorityInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 26, 1)
    /**
     * Flag indicating this is a close watch mission.
     * Example: /// Example: True
     * Constraints: No constraints specified.
     */
    val cw : Boolean
        get() {
            val o = __offset(28)
            return if(o != 0) 0.toByte() != bb.get(o + bb_pos) else false
        }
    /**
     * The type of mission (e.g. SAAM, CHNL, etc.).
     * Example: /// Example: SAAM
     * Constraints: Minimum length = 0, Maximum length = 32
     */
    val type : String?
        get() {
            val o = __offset(30)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val typeAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(30, 1)
    fun typeInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 30, 1)
    /**
     * The International Civil Aviation Organization (ICAO) site code of first cargo pick up.
     * Example: /// Example: KFAY
     * Constraints: Minimum length = 4, Maximum length = 4
     */
    val firstPickUp : String?
        get() {
            val o = __offset(32)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val firstPickUpAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(32, 1)
    fun firstPickUpInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 32, 1)
    /**
     * The International Civil Aviation Organization (ICAO) site code of last cargo drop off.
     * Example: /// Example: PGUA
     * Constraints: Minimum length = 4, Maximum length = 4
     */
    val lastDropOff : String?
        get() {
            val o = __offset(34)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val lastDropOffAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(34, 1)
    fun lastDropOffInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 34, 1)
    /**
     * Mission alias.
     * Example: /// Example: PACIFIC DEPLOY / CHAP 3 MOVEMENT
     * Constraints: Minimum length = 0, Maximum length = 48
     */
    val alias : String?
        get() {
            val o = __offset(36)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val aliasAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(36, 1)
    fun aliasInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 36, 1)
    /**
     * The call sign for this mission.
     * Example: /// Example: RCH123
     * Constraints: Minimum length = 0, Maximum length = 32
     */
    val callSign : String?
        get() {
            val o = __offset(38)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val callSignAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(38, 1)
    fun callSignInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 38, 1)
    /**
     * The name of the operation that this mission supports.
     * Example: /// Example: Golden Eye
     * Constraints: Minimum length = 0, Maximum length = 100
     */
    val operation : String?
        get() {
            val o = __offset(40)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val operationAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(40, 1)
    fun operationInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 40, 1)
    /**
     * Numbered Air Force (NAF) organization that owns the mission.
     * Example: /// Example: 18AF
     * Constraints: Minimum length = 0, Maximum length = 100
     */
    val naf : String?
        get() {
            val o = __offset(42)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val nafAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(42, 1)
    fun nafInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 42, 1)
    /**
     * The unit the mission is allocated to.
     * Example: /// Example: 437 AEW
     * Constraints: Minimum length = 0, Maximum length = 256
     */
    val allocatedUnit : String?
        get() {
            val o = __offset(44)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val allocatedUnitAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(44, 1)
    fun allocatedUnitInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 44, 1)
    /**
     * Load type of this mission (e.g. CARGO, MIXED, PASSENGER).
     * Example: /// Example: MIXED
     * Constraints: Minimum length = 0, Maximum length = 32
     */
    val loadCategoryType : String?
        get() {
            val o = __offset(46)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val loadCategoryTypeAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(46, 1)
    fun loadCategoryTypeInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 46, 1)
    /**
     * Current state of the mission.
     * Example: /// Example: EXECUTION
     * Constraints: Minimum length = 0, Maximum length = 32
     */
    val state : String?
        get() {
            val o = __offset(48)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val stateAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(48, 1)
    fun stateInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 48, 1)
    /**
     * The number of minutes a mission is off schedule based on the source system's business rules. Positive numbers are early, negative numbers are late.
     * Example: /// Example: -90.12
     * Constraints: No constraints specified.
     */
    val sourceSysDeviation : Double
        get() {
            val o = __offset(50)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * The Aircraft and Personnel Automated Clearance System (APACS) system identifier used to process and approve clearance requests.
     * Example: /// Example: 1083034
     * Constraints: Minimum length = 0, Maximum length = 64
     */
    val apacsId : String?
        get() {
            val o = __offset(52)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val apacsIdAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(52, 1)
    fun apacsIdInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 52, 1)
    /**
     * Identifier of the Diplomatic Clearance Worksheet used to coordinate aircraft clearance requests.
     * Example: /// Example: G2-182402-AB
     * Constraints: Minimum length = 0, Maximum length = 256
     */
    val dipWorksheetName : String?
        get() {
            val o = __offset(54)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val dipWorksheetNameAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(54, 1)
    fun dipWorksheetNameInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 54, 1)
    /**
     * Time the row was created in the database, auto-populated by the system.
     * Example: /// Example: 2022-01-01T16:00:00.123Z
     * Constraints: No constraints specified.
     */
    val createdAt : String?
        get() {
            val o = __offset(56)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val createdAtAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(56, 1)
    fun createdAtInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 56, 1)
    /**
     * Application user who created the row in the database, auto-populated by the system.
     * Example: /// Example: some.user
     * Constraints: Minimum length = 1, Maximum length = 64
     */
    val createdBy : String?
        get() {
            val o = __offset(58)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val createdByAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(58, 1)
    fun createdByInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 58, 1)
    /**
     * Time the row was updated in the database, auto-populated by the system.
     * Example: /// Example: 2022-01-01T16:00:00.123Z
     * Constraints: No constraints specified.
     */
    val updatedAt : String?
        get() {
            val o = __offset(60)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val updatedAtAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(60, 1)
    fun updatedAtInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 60, 1)
    /**
     * Application user who updated the row in the database, auto-populated by the system.
     * Example: /// Example: some.user
     * Constraints: Minimum length = 1, Maximum length = 64
     */
    val updatedBy : String?
        get() {
            val o = __offset(62)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val updatedByAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(62, 1)
    fun updatedByInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 62, 1)
    /**
     * The source data library from which this record was received. This could be a remote or tactical UDL or another data library. If null, the record should be assumed to have originated from the primary Enterprise UDL.
     * Example: /// Example: AXE
     * Constraints: Minimum length = 0, Maximum length = 64
     */
    val sourceDl : String?
        get() {
            val o = __offset(64)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val sourceDlAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(64, 1)
    fun sourceDlInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 64, 1)
    /**
     * Source of the data.
     * Example: /// Example: Bluestaq
     * Constraints: Minimum length = 1, Maximum length = 36
     */
    val source : String?
        get() {
            val o = __offset(66)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val sourceAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(66, 1)
    fun sourceInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 66, 1)
    /**
     * Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
     * Example: /// Example: THIRD_PARTY_DATASOURCE
     * Constraints: Minimum length = 0, Maximum length = 64
     */
    val origin : String?
        get() {
            val o = __offset(68)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val originAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(68, 1)
    fun originInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 68, 1)
    /**
     * Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
     * EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
     * REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
     * SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
     * TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
     * Example: /// Example: TEST
     * Constraints: Minimum length = 1, Maximum length = 32
     */
    val dataMode : Byte
        get() {
            val o = __offset(70)
            return if(o != 0) bb.get(o + bb_pos) else 0
        }
    /**
     * The originating source network on which this record was created, auto-populated by the system.
     * Example: /// Example: OPS1
     * Constraints: Minimum length = 0, Maximum length = 32
     */
    val origNetwork : String?
        get() {
            val o = __offset(72)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val origNetworkAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(72, 1)
    fun origNetworkInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 72, 1)
    /**
     * Information related to the planning, load, status, and deployment or dispatch of one aircraft to carry out a mission.
     * Example: /// Example: No example provided.
     * Constraints: No constraints specified.
     */
    fun requirements(j: Int) : String? {
        val o = __offset(74)
        return if (o != 0) {
            __string(__vector(o) + j * 4)
        } else {
            null
        }
    }
    val requirementsLength : Int
        get() {
            val o = __offset(74); return if (o != 0) __vector_len(o) else 0
        }
    /**
     * Information related to the planning, load, status, and deployment or dispatch of one aircraft to carry out a mission.
     * Example: /// Example: No example provided.
     * Constraints: No constraints specified.
     */
    fun remarks(j: Int) : String? {
        val o = __offset(76)
        return if (o != 0) {
            __string(__vector(o) + j * 4)
        } else {
            null
        }
    }
    val remarksLength : Int
        get() {
            val o = __offset(76); return if (o != 0) __vector_len(o) else 0
        }
    /**
     * Collection of Hazardous Material information associated with this Air Transport Mission.
     * Example: /// Example: No example provided.
     * Constraints: No constraints specified.
     */
    fun hazMat(j: Int) : String? {
        val o = __offset(78)
        return if (o != 0) {
            __string(__vector(o) + j * 4)
        } else {
            null
        }
    }
    val hazMatLength : Int
        get() {
            val o = __offset(78); return if (o != 0) __vector_len(o) else 0
        }
    companion object {
        fun validateVersion() = Constants.FLATBUFFERS_24_3_25()
        fun getRootAsAirTransportMission_Abridged(_bb: ByteBuffer): AirTransportMission_Abridged = getRootAsAirTransportMission_Abridged(_bb, AirTransportMission_Abridged())
        fun getRootAsAirTransportMission_Abridged(_bb: ByteBuffer, obj: AirTransportMission_Abridged): AirTransportMission_Abridged {
            _bb.order(ByteOrder.LITTLE_ENDIAN)
            return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb))
        }
        fun AirTransportMission_AbridgedBufferHasIdentifier(_bb: ByteBuffer) : Boolean = __has_identifier(_bb, "AIRT")
        fun createAirTransportMission_Abridged(builder: FlatBufferBuilder, idOffset: Int, classificationMarkingOffset: Int, origMissionIdOffset: Int, amcMissionIdOffset: Int, gdssMissionIdOffset: Int, prevMissionIdOffset: Int, prevAmcmissionIdOffset: Int, nextMissionIdOffset: Int, nextAmcmissionIdOffset: Int, objectiveOffset: Int, purposeOffset: Int, jcsPriorityOffset: Int, cw: Boolean, typeOffset: Int, firstPickUpOffset: Int, lastDropOffOffset: Int, aliasOffset: Int, callSignOffset: Int, operationOffset: Int, nafOffset: Int, allocatedUnitOffset: Int, loadCategoryTypeOffset: Int, stateOffset: Int, sourceSysDeviation: Double, apacsIdOffset: Int, dipWorksheetNameOffset: Int, createdAtOffset: Int, createdByOffset: Int, updatedAtOffset: Int, updatedByOffset: Int, sourceDlOffset: Int, sourceOffset: Int, originOffset: Int, dataMode: Byte, origNetworkOffset: Int, requirementsOffset: Int, remarksOffset: Int, hazMatOffset: Int) : Int {
            builder.startTable(38)
            addSourceSysDeviation(builder, sourceSysDeviation)
            addHazMat(builder, hazMatOffset)
            addRemarks(builder, remarksOffset)
            addRequirements(builder, requirementsOffset)
            addOrigNetwork(builder, origNetworkOffset)
            addOrigin(builder, originOffset)
            addSource(builder, sourceOffset)
            addSourceDL(builder, sourceDlOffset)
            addUpdatedBy(builder, updatedByOffset)
            addUpdatedAt(builder, updatedAtOffset)
            addCreatedBy(builder, createdByOffset)
            addCreatedAt(builder, createdAtOffset)
            addDipWorksheetName(builder, dipWorksheetNameOffset)
            addApacsId(builder, apacsIdOffset)
            addState(builder, stateOffset)
            addLoadCategoryType(builder, loadCategoryTypeOffset)
            addAllocatedUnit(builder, allocatedUnitOffset)
            addNaf(builder, nafOffset)
            addOperation(builder, operationOffset)
            addCallSign(builder, callSignOffset)
            addAlias(builder, aliasOffset)
            addLastDropOff(builder, lastDropOffOffset)
            addFirstPickUp(builder, firstPickUpOffset)
            addType(builder, typeOffset)
            addJcsPriority(builder, jcsPriorityOffset)
            addPurpose(builder, purposeOffset)
            addObjective(builder, objectiveOffset)
            addNextAMCMissionId(builder, nextAmcmissionIdOffset)
            addNextMissionId(builder, nextMissionIdOffset)
            addPrevAMCMissionId(builder, prevAmcmissionIdOffset)
            addPrevMissionId(builder, prevMissionIdOffset)
            addGdssMissionId(builder, gdssMissionIdOffset)
            addAmcMissionId(builder, amcMissionIdOffset)
            addOrigMissionId(builder, origMissionIdOffset)
            addClassificationMarking(builder, classificationMarkingOffset)
            addId(builder, idOffset)
            addDataMode(builder, dataMode)
            addCw(builder, cw)
            return endAirTransportMission_Abridged(builder)
        }
        fun startAirTransportMission_Abridged(builder: FlatBufferBuilder) = builder.startTable(38)
        fun addId(builder: FlatBufferBuilder, id: Int) = builder.addOffset(0, id, 0)
        fun addClassificationMarking(builder: FlatBufferBuilder, classificationMarking: Int) = builder.addOffset(1, classificationMarking, 0)
        fun addOrigMissionId(builder: FlatBufferBuilder, origMissionId: Int) = builder.addOffset(2, origMissionId, 0)
        fun addAmcMissionId(builder: FlatBufferBuilder, amcMissionId: Int) = builder.addOffset(3, amcMissionId, 0)
        fun addGdssMissionId(builder: FlatBufferBuilder, gdssMissionId: Int) = builder.addOffset(4, gdssMissionId, 0)
        fun addPrevMissionId(builder: FlatBufferBuilder, prevMissionId: Int) = builder.addOffset(5, prevMissionId, 0)
        fun addPrevAMCMissionId(builder: FlatBufferBuilder, prevAmcmissionId: Int) = builder.addOffset(6, prevAmcmissionId, 0)
        fun addNextMissionId(builder: FlatBufferBuilder, nextMissionId: Int) = builder.addOffset(7, nextMissionId, 0)
        fun addNextAMCMissionId(builder: FlatBufferBuilder, nextAmcmissionId: Int) = builder.addOffset(8, nextAmcmissionId, 0)
        fun addObjective(builder: FlatBufferBuilder, objective: Int) = builder.addOffset(9, objective, 0)
        fun addPurpose(builder: FlatBufferBuilder, purpose: Int) = builder.addOffset(10, purpose, 0)
        fun addJcsPriority(builder: FlatBufferBuilder, jcsPriority: Int) = builder.addOffset(11, jcsPriority, 0)
        fun addCw(builder: FlatBufferBuilder, cw: Boolean) = builder.addBoolean(12, cw, false)
        fun addType(builder: FlatBufferBuilder, type: Int) = builder.addOffset(13, type, 0)
        fun addFirstPickUp(builder: FlatBufferBuilder, firstPickUp: Int) = builder.addOffset(14, firstPickUp, 0)
        fun addLastDropOff(builder: FlatBufferBuilder, lastDropOff: Int) = builder.addOffset(15, lastDropOff, 0)
        fun addAlias(builder: FlatBufferBuilder, alias: Int) = builder.addOffset(16, alias, 0)
        fun addCallSign(builder: FlatBufferBuilder, callSign: Int) = builder.addOffset(17, callSign, 0)
        fun addOperation(builder: FlatBufferBuilder, operation: Int) = builder.addOffset(18, operation, 0)
        fun addNaf(builder: FlatBufferBuilder, naf: Int) = builder.addOffset(19, naf, 0)
        fun addAllocatedUnit(builder: FlatBufferBuilder, allocatedUnit: Int) = builder.addOffset(20, allocatedUnit, 0)
        fun addLoadCategoryType(builder: FlatBufferBuilder, loadCategoryType: Int) = builder.addOffset(21, loadCategoryType, 0)
        fun addState(builder: FlatBufferBuilder, state: Int) = builder.addOffset(22, state, 0)
        fun addSourceSysDeviation(builder: FlatBufferBuilder, sourceSysDeviation: Double) = builder.addDouble(23, sourceSysDeviation, 0.0)
        fun addApacsId(builder: FlatBufferBuilder, apacsId: Int) = builder.addOffset(24, apacsId, 0)
        fun addDipWorksheetName(builder: FlatBufferBuilder, dipWorksheetName: Int) = builder.addOffset(25, dipWorksheetName, 0)
        fun addCreatedAt(builder: FlatBufferBuilder, createdAt: Int) = builder.addOffset(26, createdAt, 0)
        fun addCreatedBy(builder: FlatBufferBuilder, createdBy: Int) = builder.addOffset(27, createdBy, 0)
        fun addUpdatedAt(builder: FlatBufferBuilder, updatedAt: Int) = builder.addOffset(28, updatedAt, 0)
        fun addUpdatedBy(builder: FlatBufferBuilder, updatedBy: Int) = builder.addOffset(29, updatedBy, 0)
        fun addSourceDL(builder: FlatBufferBuilder, sourceDl: Int) = builder.addOffset(30, sourceDl, 0)
        fun addSource(builder: FlatBufferBuilder, source: Int) = builder.addOffset(31, source, 0)
        fun addOrigin(builder: FlatBufferBuilder, origin: Int) = builder.addOffset(32, origin, 0)
        fun addDataMode(builder: FlatBufferBuilder, dataMode: Byte) = builder.addByte(33, dataMode, 0)
        fun addOrigNetwork(builder: FlatBufferBuilder, origNetwork: Int) = builder.addOffset(34, origNetwork, 0)
        fun addRequirements(builder: FlatBufferBuilder, requirements: Int) = builder.addOffset(35, requirements, 0)
        fun createRequirementsVector(builder: FlatBufferBuilder, data: IntArray) : Int {
            builder.startVector(4, data.size, 4)
            for (i in data.size - 1 downTo 0) {
                builder.addOffset(data[i])
            }
            return builder.endVector()
        }
        fun startRequirementsVector(builder: FlatBufferBuilder, numElems: Int) = builder.startVector(4, numElems, 4)
        fun addRemarks(builder: FlatBufferBuilder, remarks: Int) = builder.addOffset(36, remarks, 0)
        fun createRemarksVector(builder: FlatBufferBuilder, data: IntArray) : Int {
            builder.startVector(4, data.size, 4)
            for (i in data.size - 1 downTo 0) {
                builder.addOffset(data[i])
            }
            return builder.endVector()
        }
        fun startRemarksVector(builder: FlatBufferBuilder, numElems: Int) = builder.startVector(4, numElems, 4)
        fun addHazMat(builder: FlatBufferBuilder, hazMat: Int) = builder.addOffset(37, hazMat, 0)
        fun createHazMatVector(builder: FlatBufferBuilder, data: IntArray) : Int {
            builder.startVector(4, data.size, 4)
            for (i in data.size - 1 downTo 0) {
                builder.addOffset(data[i])
            }
            return builder.endVector()
        }
        fun startHazMatVector(builder: FlatBufferBuilder, numElems: Int) = builder.startVector(4, numElems, 4)
        fun endAirTransportMission_Abridged(builder: FlatBufferBuilder) : Int {
            val o = builder.endTable()
            return o
        }
        fun finishAirTransportMissionAbridgedBuffer(builder: FlatBufferBuilder, offset: Int) = builder.finish(offset, "AIRT")
        fun finishSizePrefixedAirTransportMission_AbridgedBuffer(builder: FlatBufferBuilder, offset: Int) = builder.finishSizePrefixed(offset, "AIRT")
    }
}
