// automatically generated by the FlatBuffers compiler, do not modify

import com.google.flatbuffers.BaseVector
import com.google.flatbuffers.BooleanVector
import com.google.flatbuffers.ByteVector
import com.google.flatbuffers.Constants
import com.google.flatbuffers.DoubleVector
import com.google.flatbuffers.FlatBufferBuilder
import com.google.flatbuffers.FloatVector
import com.google.flatbuffers.LongVector
import com.google.flatbuffers.StringVector
import com.google.flatbuffers.Struct
import com.google.flatbuffers.Table
import com.google.flatbuffers.UnionVector
import java.nio.ByteBuffer
import java.nio.ByteOrder
import kotlin.math.sign

/**
 * /// Model representation of observation data for SAR based sensor phenomenologies. J2000 is the preferred coordinate frame for all observations, but in some cases observations may be in another frame depending on the provider. Please see the 'Discover' tab in the storefront to confirm coordinate frames by data provider.
 */
@Suppress("unused")
class SARObservation_Full : Table() {

    fun __init(_i: Int, _bb: ByteBuffer)  {
        __reset(_i, _bb)
    }
    fun __assign(_i: Int, _bb: ByteBuffer) : SARObservation_Full {
        __init(_i, _bb)
        return this
    }
    /**
     * Unique identifier of the record, auto-generated by the system.
     * Example: /// Example: SAROBSERVATION-ID
     * Constraints: Minimum length = 1, Maximum length = 36
     */
    val id : String?
        get() {
            val o = __offset(4)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val idAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(4, 1)
    fun idInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 4, 1)
    /**
     * Classification marking of the data in IC/CAPCO Portion-marked format.
     * Example: /// Example: U
     * Constraints: Minimum length = 1, Maximum length = 128
     */
    val classificationMarking : String?
        get() {
            val o = __offset(6)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val classificationMarkingAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(6, 1)
    fun classificationMarkingInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 6, 1)
    /**
     * Unique identifier of the spacecraft hosting the sensor associated with this collection.
     * Example: /// Example: 36036
     * Constraints: Minimum length = 0, Maximum length = 36
     */
    val idOnOrbit : String?
        get() {
            val o = __offset(8)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val idOnOrbitAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(8, 1)
    fun idOnOrbitInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 8, 1)
    /**
     * Satellite/Catalog number of the spacecraft hosting the sensor associated with this collection.
     * Example: /// Example: 36036
     * Constraints: No constraints specified.
     */
    val satNo : Int
        get() {
            val o = __offset(10)
            return if(o != 0) bb.getInt(o + bb_pos) else 0
        }
    /**
     * Optional identifier provided by the source to indicate the onorbit object hosting the sensor associated with this collection. This may be an internal identifier and not necessarily a valid satellite number.
     * Example: /// Example: 36036
     * Constraints: Minimum length = 0, Maximum length = 64
     */
    val origObjectId : String?
        get() {
            val o = __offset(12)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val origObjectIdAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(12, 1)
    fun origObjectIdInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 12, 1)
    /**
     * Unique identifier of the reporting sensor.
     * Example: /// Example: 36036-1L
     * Constraints: Minimum length = 0, Maximum length = 36
     */
    val idSensor : String?
        get() {
            val o = __offset(14)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val idSensorAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(14, 1)
    fun idSensorInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 14, 1)
    /**
     * Optional identifier provided by the source to indicate the sensor for this collection. This may be an internal identifier and not necessarily a valid sensor ID.
     * Example: /// Example: SMOS-1L
     * Constraints: Minimum length = 0, Maximum length = 64
     */
    val origSensorId : String?
        get() {
            val o = __offset(16)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val origSensorIdAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(16, 1)
    fun origSensorIdInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 16, 1)
    /**
     * Optional ID from external systems. This field has no meaning within UDL and is provided as a convenience for systems that require tracking of an internal system generated ID.
     * Example: /// Example: EXTERNAL-ID
     * Constraints: Minimum length = 0, Maximum length = 36
     */
    val externalId : String?
        get() {
            val o = __offset(18)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val externalIdAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(18, 1)
    fun externalIdInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 18, 1)
    /**
     * Optional identifier to indicate the specific collection tasking which produced this observation.
     * Example: /// Example: COLLECTION-ID
     * Constraints: Minimum length = 0, Maximum length = 36
     */
    val collectionId : String?
        get() {
            val o = __offset(20)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val collectionIdAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(20, 1)
    fun collectionIdInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 20, 1)
    /**
     * Identifier of the specific detection within a collection which produced this observation.
     * Example: /// Example: DETECTION-ID
     * Constraints: Minimum length = 0, Maximum length = 36
     */
    val detectionId : String?
        get() {
            val o = __offset(22)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val detectionIdAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(22, 1)
    fun detectionIdInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 22, 1)
    /**
     * Collection start time in ISO 8601 UTC format with microsecond precision.
     * Example: /// Example: 2023-04-22T17:35:00.123456Z
     * Constraints: No constraints specified.
     */
    val collectionStart : String?
        get() {
            val o = __offset(24)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val collectionStartAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(24, 1)
    fun collectionStartInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 24, 1)
    /**
     * Collection end time in ISO 8601 UTC format with microsecond precision.
     * Example: /// Example: 2023-04-22T17:38:10.20177Z
     * Constraints: No constraints specified.
     */
    val collectionEnd : String?
        get() {
            val o = __offset(26)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val collectionEndAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(26, 1)
    fun collectionEndInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 26, 1)
    /**
     * The datetime at the center point of the collection in ISO 8601 UTC format with microsecond precision.
     * Example: /// Example: 2023-04-22T17:36:35.100885Z
     * Constraints: No constraints specified.
     */
    val centerTime : String?
        get() {
            val o = __offset(28)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val centerTimeAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(28, 1)
    fun centerTimeInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 28, 1)
    /**
     * The detection start time in ISO 8601 UTC format, with microsecond precision.
     * Example: /// Example: 2023-07-08T17:35:01.615396Z
     * Constraints: No constraints specified.
     */
    val detectionStart : String?
        get() {
            val o = __offset(30)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val detectionStartAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(30, 1)
    fun detectionStartInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 30, 1)
    /**
     * The detection end time in ISO 8601 UTC format, with microsecond precision.
     * Example: /// Example: 2023-07-08T17:35:20.77219Z
     * Constraints: No constraints specified.
     */
    val detectionEnd : String?
        get() {
            val o = __offset(32)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val detectionEndAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(32, 1)
    fun detectionEndInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 32, 1)
    /**
     * The duration, in seconds, of this detection.
     * Example: /// Example: 79.156794
     * Constraints: No constraints specified.
     */
    val dwellTime : Double
        get() {
            val o = __offset(34)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * The orbital direction (ASCENDING, DESCENDING) of the platform during the collection.
     * Example: /// Example: ASCENDING
     * Constraints: Minimum length = 0, Maximum length = 16
     */
    val orbitState : String?
        get() {
            val o = __offset(36)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val orbitStateAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(36, 1)
    fun orbitStateInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 36, 1)
    /**
     * Collection mode setting for this collection (e.g. AREA, SPOTLIGHT, STRIP, etc.).
     * Example: /// Example: SPOTLIGHT
     * Constraints: Minimum length = 1, Maximum length = 36
     */
    val sarMode : String?
        get() {
            val o = __offset(38)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val sarModeAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(38, 1)
    fun sarModeInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 38, 1)
    /**
     * Name of the band containing operating frequency for the collection (e.g. C, E, EHF, HF, K, Ka, Ku, L, Q, S, SHF, UNK, UHF, V, VHF, VLF, W, X). See RFBandType for more details and descriptions of each band name.
     * Example: /// Example: L
     * Constraints: Minimum length = 0, Maximum length = 5
     */
    val operatingBand : String?
        get() {
            val o = __offset(40)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val operatingBandAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(40, 1)
    fun operatingBandInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 40, 1)
    /**
     * The operating frequency, in Mhz, for the collection.
     * Example: /// Example: 2345.6
     * Constraints: No constraints specified.
     */
    val operatingFreq : Double
        get() {
            val o = __offset(42)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Signal to noise ratio, in dB.
     * Example: /// Example: 10.1
     * Constraints: No constraints specified.
     */
    val snr : Double
        get() {
            val o = __offset(44)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Transmit polarization e.g. H - (Horizontally Polarized) Perpendicular to Earth's surface, V - (Vertically Polarized) Parallel to Earth's surface, L - (Left Hand Circularly Polarized) Rotating left relative to the earth's surface, R - (Right Hand Circularly Polarized) Rotating right relative to the earth's surface.
     * Example: /// Example: H
     * Constraints: Minimum length = 0, Maximum length = 4
     */
    val txPolarization : String?
        get() {
            val o = __offset(46)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val txPolarizationAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(46, 1)
    fun txPolarizationInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 46, 1)
    /**
     * Receive polarization e.g. H - (Horizontally Polarized) Perpendicular to Earth's surface, V - (Vertically Polarized) Parallel to Earth's surface, L - (Left Hand Circularly Polarized) Rotating left relative to the earth's surface, R - (Right Hand Circularly Polarized) Rotating right relative to the earth's surface.
     * Example: /// Example: H
     * Constraints: Minimum length = 0, Maximum length = 4
     */
    val rxPolarization : String?
        get() {
            val o = __offset(48)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val rxPolarizationAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(48, 1)
    fun rxPolarizationInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 48, 1)
    /**
     * The graze angle (also referred to as look angle) for the collection in degrees.
     * Example: /// Example: 45.1
     * Constraints: No constraints specified.
     */
    val grazeAngle : Double
        get() {
            val o = __offset(50)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * The center incidence angle in degrees.
     * Example: /// Example: 45.1
     * Constraints: No constraints specified.
     */
    val incidenceAngle : Double
        get() {
            val o = __offset(52)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * The squint angle for the collection in degrees.
     * Example: /// Example: 1.2
     * Constraints: No constraints specified.
     */
    val squintAngle : Double
        get() {
            val o = __offset(54)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * The bandwidth frequency of the pulse in Mhz.
     * Example: /// Example: 500.1
     * Constraints: No constraints specified.
     */
    val pulseBandwidth : Double
        get() {
            val o = __offset(56)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * The duration of a pulse in seconds.
     * Example: /// Example: 1.1e-05
     * Constraints: No constraints specified.
     */
    val pulseDuration : Double
        get() {
            val o = __offset(58)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Required sweep angle for the continuous spot scene in degrees.
     * Example: /// Example: 45.1
     * Constraints: No constraints specified.
     */
    val continuousSpotAngle : Double
        get() {
            val o = __offset(60)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Slant distance from sensor to center point of imaging event in kilometers.
     * Example: /// Example: 60.1
     * Constraints: No constraints specified.
     */
    val slantRange : Double
        get() {
            val o = __offset(62)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Specifies the closest range, in kilometers, from the flight path to target during the collection.
     * Example: /// Example: 12.1
     * Constraints: No constraints specified.
     */
    val nearRange : Double
        get() {
            val o = __offset(64)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Specifies the farthest range, in kilometers, from the flight path to target during the collection.
     * Example: /// Example: 34.1
     * Constraints: No constraints specified.
     */
    val farRange : Double
        get() {
            val o = __offset(66)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * The length of the collection as projected on the ground in kilometers.
     * Example: /// Example: 12.1
     * Constraints: No constraints specified.
     */
    val swathLength : Double
        get() {
            val o = __offset(68)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Optional geographical region or polygon (lat/lon pairs) of the area surrounding the image event as projected on the ground.
     * Example: /// Example: POLYGON((67.3291113966927 26.156175339112,67.2580009640721 26.091022064271,67.1795862381682 26.6637992964562,67.2501237475598 26.730115808233,67.3291113966927 26.156175339112))
     * Constraints: No constraints specified.
     */
    val area : String?
        get() {
            val o = __offset(70)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val areaAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(70, 1)
    fun areaInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 70, 1)
    /**
     * Geographical region or polygon (lon/lat pairs), as depicted by the Well-Known Text representation of the geometry/geography, of the image as projected on the ground. WKT reference: https://www.opengeospatial.org/standards/wkt-crs. Ignored if included with a POST or PUT request that also specifies a valid 'area' field.
     * Example: /// Example: POLYGON((67.3291113966927 26.156175339112,67.2580009640721 26.091022064271,67.1795862381682 26.6637992964562,67.2501237475598 26.730115808233,67.3291113966927 26.156175339112))
     * Constraints: No constraints specified.
     */
    val atext : String?
        get() {
            val o = __offset(72)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val atextAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(72, 1)
    fun atextInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 72, 1)
    /**
     * Geographical region or polygon (lat/lon pairs), as depicted by the GeoJSON representation of the geometry/geography, of the image as projected on the ground. GeoJSON Reference: https://geojson.org/. Ignored if included with a POST or PUT request that also specifies a valid 'area' or 'atext' field.
     * Example: /// Example: {"type":"Polygon","coordinates":[[[67.3291113966927,26.156175339112],[67.2580009640721,26.091022064271],[67.1795862381682,26.6637992964562],[67.2501237475598,26.730115808233],[67.3291113966927,26.156175339112]]]}
     * Constraints: No constraints specified.
     */
    val agjson : String?
        get() {
            val o = __offset(74)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val agjsonAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(74, 1)
    fun agjsonInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 74, 1)
    /**
     * Type of region as projected on the ground (POLYGON, POINT, LINE).
     * Example: /// Example: POLYGON
     * Constraints: Minimum length = 0, Maximum length = 128
     */
    val atype : String?
        get() {
            val o = __offset(76)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val atypeAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(76, 1)
    fun atypeInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 76, 1)
    /**
     * Number of dimensions of the geometry depicted by region.
     * Example: /// Example: 3
     * Constraints: No constraints specified.
     */
    val andims : Int
        get() {
            val o = __offset(78)
            return if(o != 0) bb.getInt(o + bb_pos) else 0
        }
    /**
     * Geographical spatial_ref_sys for region.
     * Example: /// Example: 3
     * Constraints: No constraints specified.
     */
    val asrid : Int
        get() {
            val o = __offset(80)
            return if(o != 0) bb.getInt(o + bb_pos) else 0
        }
    /**
     * The pixel spacing in the range direction measured in meters.
     * Example: /// Example: 0.123
     * Constraints: No constraints specified.
     */
    val spacingRange : Double
        get() {
            val o = __offset(82)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * The pixel spacing in the azimuth direction measured in meters.
     * Example: /// Example: 0.123
     * Constraints: No constraints specified.
     */
    val spacingAzimuth : Double
        get() {
            val o = __offset(84)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * The number of looks in the azimuth direction.
     * Example: /// Example: 2
     * Constraints: No constraints specified.
     */
    val looksAzimuth : Int
        get() {
            val o = __offset(86)
            return if(o != 0) bb.getInt(o + bb_pos) else 0
        }
    /**
     * The number of looks in the range direction.
     * Example: /// Example: 1
     * Constraints: No constraints specified.
     */
    val looksRange : Int
        get() {
            val o = __offset(88)
            return if(o != 0) bb.getInt(o + bb_pos) else 0
        }
    /**
     * The resolution in the range direction measured in meters.
     * Example: /// Example: 0.123
     * Constraints: No constraints specified.
     */
    val resolutionRange : Double
        get() {
            val o = __offset(90)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * The resolution in the azimuth direction measured in meters.
     * Example: /// Example: 0.123
     * Constraints: No constraints specified.
     */
    val resolutionAzimuth : Double
        get() {
            val o = __offset(92)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * The antenna pointing direction (LEFT, RIGHT).
     * Example: /// Example: RIGHT
     * Constraints: Minimum length = 0, Maximum length = 16
     */
    val obDirection : String?
        get() {
            val o = __offset(94)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val obDirectionAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(94, 1)
    fun obDirectionInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 94, 1)
    /**
     * The coordinate system used for the sensor velocity and target position vectors for the collection.
     * Example: /// Example: ECEF
     * Constraints: Minimum length = 0, Maximum length = 16
     */
    val coordSys : String?
        get() {
            val o = __offset(96)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val coordSysAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(96, 1)
    fun coordSysInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 96, 1)
    /**
     * The collection target X position in kilometers.
     * Example: /// Example: 50.23
     * Constraints: No constraints specified.
     */
    val targetposx : Double
        get() {
            val o = __offset(98)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * The collection target Y position in kilometers.
     * Example: /// Example: 50.23
     * Constraints: No constraints specified.
     */
    val targetposy : Double
        get() {
            val o = __offset(100)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * The collection target Z position in kilometers.
     * Example: /// Example: 50.23
     * Constraints: No constraints specified.
     */
    val targetposz : Double
        get() {
            val o = __offset(102)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Sensor altitude during collection in kilometers.
     * Example: /// Example: 1.1
     * Constraints: No constraints specified.
     */
    val senalt : Double
        get() {
            val o = __offset(104)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Sensor platform X-velocity during collection in kilometers/second.
     * Example: /// Example: 1.1
     * Constraints: No constraints specified.
     */
    val senvelx : Double
        get() {
            val o = __offset(106)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Sensor platform Y-velocity during collection in kilometers/second.
     * Example: /// Example: 1.1
     * Constraints: No constraints specified.
     */
    val senvely : Double
        get() {
            val o = __offset(108)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Sensor platform Z-velocity during collection in kilometers/second.
     * Example: /// Example: 1.1
     * Constraints: No constraints specified.
     */
    val senvelz : Double
        get() {
            val o = __offset(110)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * WGS-84 sensor latitude sub-point at collect start time (collectionStart), represented as -90 to 90 degrees (negative values south of equator).
     * Example: /// Example: 45.1
     * Constraints: No constraints specified.
     */
    val senlatStart : Double
        get() {
            val o = __offset(112)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * WGS-84 sensor longitude sub-point at collect start time (collectionStart), represented as -180 to 180 degrees (negative values west of Prime Meridian).
     * Example: /// Example: 179.1
     * Constraints: No constraints specified.
     */
    val senlonStart : Double
        get() {
            val o = __offset(114)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * WGS-84 sensor latitude sub-point at collect end time (collectionEnd), represented as -90 to 90 degrees (negative values south of equator).
     * Example: /// Example: 45.1
     * Constraints: No constraints specified.
     */
    val senlatEnd : Double
        get() {
            val o = __offset(116)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * WGS-84 sensor longitude sub-point at collect end time (collectionEnd), represented as -180 to 180 degrees (negative values west of Prime Meridian).
     * Example: /// Example: 179.1
     * Constraints: No constraints specified.
     */
    val senlonEnd : Double
        get() {
            val o = __offset(118)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Optional identifier to track a commercial or marketplace transaction executed to produce this data.
     * Example: /// Example: TRANSACTION-ID
     * Constraints: Minimum length = 0, Maximum length = 64
     */
    val transactionId : String?
        get() {
            val o = __offset(120)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val transactionIdAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(120, 1)
    fun transactionIdInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 120, 1)
    /**
     * Optional array of provider/source specific tags for this data, where each element is no longer than 32 characters, used for implementing data owner conditional access controls to restrict access to the data. Should be left null by data providers unless conditional access controls are coordinated with the UDL team.
     * Example: /// Example: ['PROVIDER_TAG1', 'PROVIDER_TAG2']
     * Constraints: No constraints specified.
     */
    fun tags(j: Int) : String? {
        val o = __offset(122)
        return if (o != 0) {
            __string(__vector(o) + j * 4)
        } else {
            null
        }
    }
    val tagsLength : Int
        get() {
            val o = __offset(122); return if (o != 0) __vector_len(o) else 0
        }
    /**
     * Array of UDL record types (e.g. ANALYTICMAGERY, ESID, GROUNDIMAGE, NOTIFICATION, POI, SV, TRACK) that are related to the SAR Observation. See the associated 'srcIds' array for the record UUIDs, positionally corresponding to the record types in this array. The 'srcTyps' and 'srcIds' arrays must match in size.
     * Example: /// Example: ['ESID', 'GROUNDIMAGE']
     * Constraints: No constraints specified.
     */
    fun srcTyps(j: Int) : String? {
        val o = __offset(124)
        return if (o != 0) {
            __string(__vector(o) + j * 4)
        } else {
            null
        }
    }
    val srcTypsLength : Int
        get() {
            val o = __offset(124); return if (o != 0) __vector_len(o) else 0
        }
    /**
     * Array of UUIDs of the UDL data records that are related to the SAR Observation. See the associated 'srcTyps' array for the specific types of data, positionally corresponding to the UUIDs in this array. The 'srcTyps' and 'srcIds' arrays must match in size. See the corresponding srcTyps array element for the data type of the UUID and use the appropriate API operation to retrieve that object (e.g. /udl/sarobservation/{uuid}).
     * Example: /// Example: ['f7e01cd4-626b-441f-a423-17b160eb78ba', '223833c4-be0d-4fdb-a2e4-325a48eccced']
     * Constraints: No constraints specified.
     */
    fun srcIds(j: Int) : String? {
        val o = __offset(126)
        return if (o != 0) {
            __string(__vector(o) + j * 4)
        } else {
            null
        }
    }
    val srcIdsLength : Int
        get() {
            val o = __offset(126); return if (o != 0) __vector_len(o) else 0
        }
    /**
     * No description provided.
     * Example: /// Example: No example provided.
     * Constraints: No constraints specified.
     */
    val onOrbit : String?
        get() {
            val o = __offset(128)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val onOrbitAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(128, 1)
    fun onOrbitInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 128, 1)
    /**
     * Time the row was created in the database, auto-populated by the system.
     * Example: /// Example: 2023-04-22T17:51:40.854Z
     * Constraints: No constraints specified.
     */
    val createdAt : String?
        get() {
            val o = __offset(130)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val createdAtAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(130, 1)
    fun createdAtInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 130, 1)
    /**
     * Application user who created the row in the database, auto-populated by the system.
     * Example: /// Example: some.user
     * Constraints: Minimum length = 1, Maximum length = 64
     */
    val createdBy : String?
        get() {
            val o = __offset(132)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val createdByAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(132, 1)
    fun createdByInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 132, 1)
    /**
     * Source of the data.
     * Example: /// Example: Bluestaq
     * Constraints: Minimum length = 1, Maximum length = 64
     */
    val source : String?
        get() {
            val o = __offset(134)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val sourceAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(134, 1)
    fun sourceInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 134, 1)
    /**
     * Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
     * Example: /// Example: THIRD_PARTY_DATASOURCE
     * Constraints: Minimum length = 0, Maximum length = 64
     */
    val origin : String?
        get() {
            val o = __offset(136)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val originAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(136, 1)
    fun originInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 136, 1)
    /**
     * The originating source network on which this record was created, auto-populated by the system.
     * Example: /// Example: OPS1
     * Constraints: Minimum length = 1, Maximum length = 32
     */
    val origNetwork : String?
        get() {
            val o = __offset(138)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val origNetworkAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(138, 1)
    fun origNetworkInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 138, 1)
    /**
     * The source data library from which this record was received. This could be a remote or tactical UDL or another data library. If null, the record should be assumed to have originated from the primary Enterprise UDL.
     * Example: /// Example: AXE
     * Constraints: Minimum length = 0, Maximum length = 64
     */
    val sourceDl : String?
        get() {
            val o = __offset(140)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val sourceDlAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(140, 1)
    fun sourceDlInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 140, 1)
    /**
     * Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
     * EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
     * REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
     * SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
     * TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
     * Example: /// Example: TEST
     * Constraints: Minimum length = 1, Maximum length = 32
     */
    val dataMode : Byte
        get() {
            val o = __offset(142)
            return if(o != 0) bb.get(o + bb_pos) else 0
        }
    companion object {
        fun validateVersion() = Constants.FLATBUFFERS_24_3_25()
        fun getRootAsSARObservation_Full(_bb: ByteBuffer): SARObservation_Full = getRootAsSARObservation_Full(_bb, SARObservation_Full())
        fun getRootAsSARObservation_Full(_bb: ByteBuffer, obj: SARObservation_Full): SARObservation_Full {
            _bb.order(ByteOrder.LITTLE_ENDIAN)
            return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb))
        }
        fun SARObservation_FullBufferHasIdentifier(_bb: ByteBuffer) : Boolean = __has_identifier(_bb, "SARO")
        fun createSARObservation_Full(builder: FlatBufferBuilder, idOffset: Int, classificationMarkingOffset: Int, idOnOrbitOffset: Int, satNo: Int, origObjectIdOffset: Int, idSensorOffset: Int, origSensorIdOffset: Int, externalIdOffset: Int, collectionIdOffset: Int, detectionIdOffset: Int, collectionStartOffset: Int, collectionEndOffset: Int, centerTimeOffset: Int, detectionStartOffset: Int, detectionEndOffset: Int, dwellTime: Double, orbitStateOffset: Int, sarModeOffset: Int, operatingBandOffset: Int, operatingFreq: Double, snr: Double, txPolarizationOffset: Int, rxPolarizationOffset: Int, grazeAngle: Double, incidenceAngle: Double, squintAngle: Double, pulseBandwidth: Double, pulseDuration: Double, continuousSpotAngle: Double, slantRange: Double, nearRange: Double, farRange: Double, swathLength: Double, areaOffset: Int, atextOffset: Int, agjsonOffset: Int, atypeOffset: Int, andims: Int, asrid: Int, spacingRange: Double, spacingAzimuth: Double, looksAzimuth: Int, looksRange: Int, resolutionRange: Double, resolutionAzimuth: Double, obDirectionOffset: Int, coordSysOffset: Int, targetposx: Double, targetposy: Double, targetposz: Double, senalt: Double, senvelx: Double, senvely: Double, senvelz: Double, senlatStart: Double, senlonStart: Double, senlatEnd: Double, senlonEnd: Double, transactionIdOffset: Int, tagsOffset: Int, srcTypsOffset: Int, srcIdsOffset: Int, onOrbitOffset: Int, createdAtOffset: Int, createdByOffset: Int, sourceOffset: Int, originOffset: Int, origNetworkOffset: Int, sourceDlOffset: Int, dataMode: Byte) : Int {
            builder.startTable(70)
            addSenlonEnd(builder, senlonEnd)
            addSenlatEnd(builder, senlatEnd)
            addSenlonStart(builder, senlonStart)
            addSenlatStart(builder, senlatStart)
            addSenvelz(builder, senvelz)
            addSenvely(builder, senvely)
            addSenvelx(builder, senvelx)
            addSenalt(builder, senalt)
            addTargetposz(builder, targetposz)
            addTargetposy(builder, targetposy)
            addTargetposx(builder, targetposx)
            addResolutionAzimuth(builder, resolutionAzimuth)
            addResolutionRange(builder, resolutionRange)
            addSpacingAzimuth(builder, spacingAzimuth)
            addSpacingRange(builder, spacingRange)
            addSwathLength(builder, swathLength)
            addFarRange(builder, farRange)
            addNearRange(builder, nearRange)
            addSlantRange(builder, slantRange)
            addContinuousSpotAngle(builder, continuousSpotAngle)
            addPulseDuration(builder, pulseDuration)
            addPulseBandwidth(builder, pulseBandwidth)
            addSquintAngle(builder, squintAngle)
            addIncidenceAngle(builder, incidenceAngle)
            addGrazeAngle(builder, grazeAngle)
            addSnr(builder, snr)
            addOperatingFreq(builder, operatingFreq)
            addDwellTime(builder, dwellTime)
            addSourceDL(builder, sourceDlOffset)
            addOrigNetwork(builder, origNetworkOffset)
            addOrigin(builder, originOffset)
            addSource(builder, sourceOffset)
            addCreatedBy(builder, createdByOffset)
            addCreatedAt(builder, createdAtOffset)
            addOnOrbit(builder, onOrbitOffset)
            addSrcIds(builder, srcIdsOffset)
            addSrcTyps(builder, srcTypsOffset)
            addTags(builder, tagsOffset)
            addTransactionId(builder, transactionIdOffset)
            addCoordSys(builder, coordSysOffset)
            addObDirection(builder, obDirectionOffset)
            addLooksRange(builder, looksRange)
            addLooksAzimuth(builder, looksAzimuth)
            addAsrid(builder, asrid)
            addAndims(builder, andims)
            addAtype(builder, atypeOffset)
            addAgjson(builder, agjsonOffset)
            addAtext(builder, atextOffset)
            addArea(builder, areaOffset)
            addRxPolarization(builder, rxPolarizationOffset)
            addTxPolarization(builder, txPolarizationOffset)
            addOperatingBand(builder, operatingBandOffset)
            addSarMode(builder, sarModeOffset)
            addOrbitState(builder, orbitStateOffset)
            addDetectionEnd(builder, detectionEndOffset)
            addDetectionStart(builder, detectionStartOffset)
            addCenterTime(builder, centerTimeOffset)
            addCollectionEnd(builder, collectionEndOffset)
            addCollectionStart(builder, collectionStartOffset)
            addDetectionId(builder, detectionIdOffset)
            addCollectionId(builder, collectionIdOffset)
            addExternalId(builder, externalIdOffset)
            addOrigSensorId(builder, origSensorIdOffset)
            addIdSensor(builder, idSensorOffset)
            addOrigObjectId(builder, origObjectIdOffset)
            addSatNo(builder, satNo)
            addIdOnOrbit(builder, idOnOrbitOffset)
            addClassificationMarking(builder, classificationMarkingOffset)
            addId(builder, idOffset)
            addDataMode(builder, dataMode)
            return endSARObservation_Full(builder)
        }
        fun startSARObservation_Full(builder: FlatBufferBuilder) = builder.startTable(70)
        fun addId(builder: FlatBufferBuilder, id: Int) = builder.addOffset(0, id, 0)
        fun addClassificationMarking(builder: FlatBufferBuilder, classificationMarking: Int) = builder.addOffset(1, classificationMarking, 0)
        fun addIdOnOrbit(builder: FlatBufferBuilder, idOnOrbit: Int) = builder.addOffset(2, idOnOrbit, 0)
        fun addSatNo(builder: FlatBufferBuilder, satNo: Int) = builder.addInt(3, satNo, 0)
        fun addOrigObjectId(builder: FlatBufferBuilder, origObjectId: Int) = builder.addOffset(4, origObjectId, 0)
        fun addIdSensor(builder: FlatBufferBuilder, idSensor: Int) = builder.addOffset(5, idSensor, 0)
        fun addOrigSensorId(builder: FlatBufferBuilder, origSensorId: Int) = builder.addOffset(6, origSensorId, 0)
        fun addExternalId(builder: FlatBufferBuilder, externalId: Int) = builder.addOffset(7, externalId, 0)
        fun addCollectionId(builder: FlatBufferBuilder, collectionId: Int) = builder.addOffset(8, collectionId, 0)
        fun addDetectionId(builder: FlatBufferBuilder, detectionId: Int) = builder.addOffset(9, detectionId, 0)
        fun addCollectionStart(builder: FlatBufferBuilder, collectionStart: Int) = builder.addOffset(10, collectionStart, 0)
        fun addCollectionEnd(builder: FlatBufferBuilder, collectionEnd: Int) = builder.addOffset(11, collectionEnd, 0)
        fun addCenterTime(builder: FlatBufferBuilder, centerTime: Int) = builder.addOffset(12, centerTime, 0)
        fun addDetectionStart(builder: FlatBufferBuilder, detectionStart: Int) = builder.addOffset(13, detectionStart, 0)
        fun addDetectionEnd(builder: FlatBufferBuilder, detectionEnd: Int) = builder.addOffset(14, detectionEnd, 0)
        fun addDwellTime(builder: FlatBufferBuilder, dwellTime: Double) = builder.addDouble(15, dwellTime, 0.0)
        fun addOrbitState(builder: FlatBufferBuilder, orbitState: Int) = builder.addOffset(16, orbitState, 0)
        fun addSarMode(builder: FlatBufferBuilder, sarMode: Int) = builder.addOffset(17, sarMode, 0)
        fun addOperatingBand(builder: FlatBufferBuilder, operatingBand: Int) = builder.addOffset(18, operatingBand, 0)
        fun addOperatingFreq(builder: FlatBufferBuilder, operatingFreq: Double) = builder.addDouble(19, operatingFreq, 0.0)
        fun addSnr(builder: FlatBufferBuilder, snr: Double) = builder.addDouble(20, snr, 0.0)
        fun addTxPolarization(builder: FlatBufferBuilder, txPolarization: Int) = builder.addOffset(21, txPolarization, 0)
        fun addRxPolarization(builder: FlatBufferBuilder, rxPolarization: Int) = builder.addOffset(22, rxPolarization, 0)
        fun addGrazeAngle(builder: FlatBufferBuilder, grazeAngle: Double) = builder.addDouble(23, grazeAngle, 0.0)
        fun addIncidenceAngle(builder: FlatBufferBuilder, incidenceAngle: Double) = builder.addDouble(24, incidenceAngle, 0.0)
        fun addSquintAngle(builder: FlatBufferBuilder, squintAngle: Double) = builder.addDouble(25, squintAngle, 0.0)
        fun addPulseBandwidth(builder: FlatBufferBuilder, pulseBandwidth: Double) = builder.addDouble(26, pulseBandwidth, 0.0)
        fun addPulseDuration(builder: FlatBufferBuilder, pulseDuration: Double) = builder.addDouble(27, pulseDuration, 0.0)
        fun addContinuousSpotAngle(builder: FlatBufferBuilder, continuousSpotAngle: Double) = builder.addDouble(28, continuousSpotAngle, 0.0)
        fun addSlantRange(builder: FlatBufferBuilder, slantRange: Double) = builder.addDouble(29, slantRange, 0.0)
        fun addNearRange(builder: FlatBufferBuilder, nearRange: Double) = builder.addDouble(30, nearRange, 0.0)
        fun addFarRange(builder: FlatBufferBuilder, farRange: Double) = builder.addDouble(31, farRange, 0.0)
        fun addSwathLength(builder: FlatBufferBuilder, swathLength: Double) = builder.addDouble(32, swathLength, 0.0)
        fun addArea(builder: FlatBufferBuilder, area: Int) = builder.addOffset(33, area, 0)
        fun addAtext(builder: FlatBufferBuilder, atext: Int) = builder.addOffset(34, atext, 0)
        fun addAgjson(builder: FlatBufferBuilder, agjson: Int) = builder.addOffset(35, agjson, 0)
        fun addAtype(builder: FlatBufferBuilder, atype: Int) = builder.addOffset(36, atype, 0)
        fun addAndims(builder: FlatBufferBuilder, andims: Int) = builder.addInt(37, andims, 0)
        fun addAsrid(builder: FlatBufferBuilder, asrid: Int) = builder.addInt(38, asrid, 0)
        fun addSpacingRange(builder: FlatBufferBuilder, spacingRange: Double) = builder.addDouble(39, spacingRange, 0.0)
        fun addSpacingAzimuth(builder: FlatBufferBuilder, spacingAzimuth: Double) = builder.addDouble(40, spacingAzimuth, 0.0)
        fun addLooksAzimuth(builder: FlatBufferBuilder, looksAzimuth: Int) = builder.addInt(41, looksAzimuth, 0)
        fun addLooksRange(builder: FlatBufferBuilder, looksRange: Int) = builder.addInt(42, looksRange, 0)
        fun addResolutionRange(builder: FlatBufferBuilder, resolutionRange: Double) = builder.addDouble(43, resolutionRange, 0.0)
        fun addResolutionAzimuth(builder: FlatBufferBuilder, resolutionAzimuth: Double) = builder.addDouble(44, resolutionAzimuth, 0.0)
        fun addObDirection(builder: FlatBufferBuilder, obDirection: Int) = builder.addOffset(45, obDirection, 0)
        fun addCoordSys(builder: FlatBufferBuilder, coordSys: Int) = builder.addOffset(46, coordSys, 0)
        fun addTargetposx(builder: FlatBufferBuilder, targetposx: Double) = builder.addDouble(47, targetposx, 0.0)
        fun addTargetposy(builder: FlatBufferBuilder, targetposy: Double) = builder.addDouble(48, targetposy, 0.0)
        fun addTargetposz(builder: FlatBufferBuilder, targetposz: Double) = builder.addDouble(49, targetposz, 0.0)
        fun addSenalt(builder: FlatBufferBuilder, senalt: Double) = builder.addDouble(50, senalt, 0.0)
        fun addSenvelx(builder: FlatBufferBuilder, senvelx: Double) = builder.addDouble(51, senvelx, 0.0)
        fun addSenvely(builder: FlatBufferBuilder, senvely: Double) = builder.addDouble(52, senvely, 0.0)
        fun addSenvelz(builder: FlatBufferBuilder, senvelz: Double) = builder.addDouble(53, senvelz, 0.0)
        fun addSenlatStart(builder: FlatBufferBuilder, senlatStart: Double) = builder.addDouble(54, senlatStart, 0.0)
        fun addSenlonStart(builder: FlatBufferBuilder, senlonStart: Double) = builder.addDouble(55, senlonStart, 0.0)
        fun addSenlatEnd(builder: FlatBufferBuilder, senlatEnd: Double) = builder.addDouble(56, senlatEnd, 0.0)
        fun addSenlonEnd(builder: FlatBufferBuilder, senlonEnd: Double) = builder.addDouble(57, senlonEnd, 0.0)
        fun addTransactionId(builder: FlatBufferBuilder, transactionId: Int) = builder.addOffset(58, transactionId, 0)
        fun addTags(builder: FlatBufferBuilder, tags: Int) = builder.addOffset(59, tags, 0)
        fun createTagsVector(builder: FlatBufferBuilder, data: IntArray) : Int {
            builder.startVector(4, data.size, 4)
            for (i in data.size - 1 downTo 0) {
                builder.addOffset(data[i])
            }
            return builder.endVector()
        }
        fun startTagsVector(builder: FlatBufferBuilder, numElems: Int) = builder.startVector(4, numElems, 4)
        fun addSrcTyps(builder: FlatBufferBuilder, srcTyps: Int) = builder.addOffset(60, srcTyps, 0)
        fun createSrcTypsVector(builder: FlatBufferBuilder, data: IntArray) : Int {
            builder.startVector(4, data.size, 4)
            for (i in data.size - 1 downTo 0) {
                builder.addOffset(data[i])
            }
            return builder.endVector()
        }
        fun startSrcTypsVector(builder: FlatBufferBuilder, numElems: Int) = builder.startVector(4, numElems, 4)
        fun addSrcIds(builder: FlatBufferBuilder, srcIds: Int) = builder.addOffset(61, srcIds, 0)
        fun createSrcIdsVector(builder: FlatBufferBuilder, data: IntArray) : Int {
            builder.startVector(4, data.size, 4)
            for (i in data.size - 1 downTo 0) {
                builder.addOffset(data[i])
            }
            return builder.endVector()
        }
        fun startSrcIdsVector(builder: FlatBufferBuilder, numElems: Int) = builder.startVector(4, numElems, 4)
        fun addOnOrbit(builder: FlatBufferBuilder, onOrbit: Int) = builder.addOffset(62, onOrbit, 0)
        fun addCreatedAt(builder: FlatBufferBuilder, createdAt: Int) = builder.addOffset(63, createdAt, 0)
        fun addCreatedBy(builder: FlatBufferBuilder, createdBy: Int) = builder.addOffset(64, createdBy, 0)
        fun addSource(builder: FlatBufferBuilder, source: Int) = builder.addOffset(65, source, 0)
        fun addOrigin(builder: FlatBufferBuilder, origin: Int) = builder.addOffset(66, origin, 0)
        fun addOrigNetwork(builder: FlatBufferBuilder, origNetwork: Int) = builder.addOffset(67, origNetwork, 0)
        fun addSourceDL(builder: FlatBufferBuilder, sourceDl: Int) = builder.addOffset(68, sourceDl, 0)
        fun addDataMode(builder: FlatBufferBuilder, dataMode: Byte) = builder.addByte(69, dataMode, 0)
        fun endSARObservation_Full(builder: FlatBufferBuilder) : Int {
            val o = builder.endTable()
            return o
        }
        fun finishSARObservationFullBuffer(builder: FlatBufferBuilder, offset: Int) = builder.finish(offset, "SARO")
        fun finishSizePrefixedSARObservation_FullBuffer(builder: FlatBufferBuilder, offset: Int) = builder.finishSizePrefixed(offset, "SARO")
    }
}
