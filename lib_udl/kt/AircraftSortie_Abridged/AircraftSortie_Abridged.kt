// automatically generated by the FlatBuffers compiler, do not modify

import com.google.flatbuffers.BaseVector
import com.google.flatbuffers.BooleanVector
import com.google.flatbuffers.ByteVector
import com.google.flatbuffers.Constants
import com.google.flatbuffers.DoubleVector
import com.google.flatbuffers.FlatBufferBuilder
import com.google.flatbuffers.FloatVector
import com.google.flatbuffers.LongVector
import com.google.flatbuffers.StringVector
import com.google.flatbuffers.Struct
import com.google.flatbuffers.Table
import com.google.flatbuffers.UnionVector
import java.nio.ByteBuffer
import java.nio.ByteOrder
import kotlin.math.sign

/**
 * /// Information related to the planning, load, status, and deployment or dispatch of one aircraft to carry out a mission.
 */
@Suppress("unused")
class AircraftSortie_Abridged : Table() {

    fun __init(_i: Int, _bb: ByteBuffer)  {
        __reset(_i, _bb)
    }
    fun __assign(_i: Int, _bb: ByteBuffer) : AircraftSortie_Abridged {
        __init(_i, _bb)
        return this
    }
    /**
     * Unique identifier of the record, auto-generated by the system.
     * Example: /// Example: AIRCRAFTSORTIE-ID
     * Constraints: Minimum length = 1, Maximum length = 36
     */
    val id : String?
        get() {
            val o = __offset(4)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val idAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(4, 1)
    fun idInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 4, 1)
    /**
     * Classification marking of the data in IC/CAPCO Portion-marked format.
     * Example: /// Example: U
     * Constraints: Minimum length = 1, Maximum length = 128
     */
    val classificationMarking : String?
        get() {
            val o = __offset(6)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val classificationMarkingAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(6, 1)
    fun classificationMarkingInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 6, 1)
    /**
     * The sortie identifier provided by the originating source.
     * Example: /// Example: A0640
     * Constraints: Minimum length = 0, Maximum length = 36
     */
    val origSortieId : String?
        get() {
            val o = __offset(8)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val origSortieIdAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(8, 1)
    fun origSortieIdInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 8, 1)
    /**
     * Unique identifier of the aircraft.
     * Example: /// Example: REF-AIRCRAFT-ID
     * Constraints: Minimum length = 0, Maximum length = 36
     */
    val idAircraft : String?
        get() {
            val o = __offset(10)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val idAircraftAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(10, 1)
    fun idAircraftInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 10, 1)
    /**
     * Alternate Aircraft Identifier provided by source.
     * Example: /// Example: ALT-AIRCRAFT-ID
     * Constraints: Minimum length = 0, Maximum length = 36
     */
    val aircraftAltId : String?
        get() {
            val o = __offset(12)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val aircraftAltIdAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(12, 1)
    fun aircraftAltIdInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 12, 1)
    /**
     * The tail number of the aircraft assigned to this sortie.
     * Example: /// Example: Tail_1
     * Constraints: Minimum length = 0, Maximum length = 16
     */
    val tailNumber : String?
        get() {
            val o = __offset(14)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val tailNumberAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(14, 1)
    fun tailNumberInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 14, 1)
    /**
     * The aircraft Model Design Series designation assigned to this sortie.
     * Example: /// Example: C017A
     * Constraints: Minimum length = 0, Maximum length = 36
     */
    val aircraftMds : String?
        get() {
            val o = __offset(16)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val aircraftMdsAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(16, 1)
    fun aircraftMdsInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 16, 1)
    /**
     * The Automatic Dependent Surveillance-Broadcast (ADS-B) device identifier.
     * Example: /// Example: AE123C
     * Constraints: Minimum length = 0, Maximum length = 16
     */
    val aircraftAdsb : String?
        get() {
            val o = __offset(18)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val aircraftAdsbAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(18, 1)
    fun aircraftAdsbInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 18, 1)
    /**
     * The scheduled UTC date for this sortie, in ISO 8601 date-only format (ex. YYYY-MM-DD).
     * Example: /// Example: 2021-01-01
     * Constraints: No constraints specified.
     */
    val sortieDate : String?
        get() {
            val o = __offset(20)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val sortieDateAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(20, 1)
    fun sortieDateInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 20, 1)
    /**
     * The external system line number of this sortie.
     * Example: /// Example: 99
     * Constraints: No constraints specified.
     */
    val lineNumber : Int
        get() {
            val o = __offset(22)
            return if(o != 0) bb.getInt(o + bb_pos) else 0
        }
    /**
     * The unique identifier of the mission to which this sortie is assigned.
     * Example: /// Example: fa18d96e-91ea-60da-a7a8-1af6500066c8
     * Constraints: Minimum length = 0, Maximum length = 36
     */
    val idMission : String?
        get() {
            val o = __offset(24)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val idMissionAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(24, 1)
    fun idMissionInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 24, 1)
    /**
     * The mission ID according to the source system.
     * Example: /// Example: ABLE
     * Constraints: Minimum length = 0, Maximum length = 24
     */
    val missionId : String?
        get() {
            val o = __offset(26)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val missionIdAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(26, 1)
    fun missionIdInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 26, 1)
    /**
     * The Air Mobility Command (AMC) mission number of the sortie.
     * Example: /// Example: AJM512571333
     * Constraints: Minimum length = 0, Maximum length = 36
     */
    val amcMsnNum : String?
        get() {
            val o = __offset(28)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val amcMsnNumAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(28, 1)
    fun amcMsnNumInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 28, 1)
    /**
     * The type of mission (e.g. SAAM, CHNL, etc.).
     * Example: /// Example: SAAM
     * Constraints: Minimum length = 0, Maximum length = 36
     */
    val amcMsnType : String?
        get() {
            val o = __offset(30)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val amcMsnTypeAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(30, 1)
    fun amcMsnTypeInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 30, 1)
    /**
     * The call sign assigned to the aircraft on this sortie.
     * Example: /// Example: BAKER
     * Constraints: Minimum length = 0, Maximum length = 24
     */
    val callSign : String?
        get() {
            val o = __offset(32)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val callSignAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(32, 1)
    fun callSignInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 32, 1)
    /**
     * Joint Chiefs of Staff priority of this sortie.
     * Example: /// Example: 1A3
     * Constraints: Minimum length = 0, Maximum length = 3
     */
    val jcsPriority : String?
        get() {
            val o = __offset(34)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val jcsPriorityAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(34, 1)
    fun jcsPriorityInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 34, 1)
    /**
     * The planned primary Standard Conventional Load of the aircraft for this sortie.
     * Example: /// Example: ABC
     * Constraints: Minimum length = 0, Maximum length = 24
     */
    val primaryScl : String?
        get() {
            val o = __offset(36)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val primarySclAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(36, 1)
    fun primarySclInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 36, 1)
    /**
     * The planned secondary Standard Conventional Load of the aircraft for this sortie.
     * Example: /// Example: ABC
     * Constraints: Minimum length = 0, Maximum length = 24
     */
    val secondaryScl : String?
        get() {
            val o = __offset(38)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val secondarySclAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(38, 1)
    fun secondarySclInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 38, 1)
    /**
     * Aircraft configuration required for the mission.
     * Example: /// Example: C-1
     * Constraints: Minimum length = 0, Maximum length = 8
     */
    val reqConfig : String?
        get() {
            val o = __offset(40)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val reqConfigAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(40, 1)
    fun reqConfigInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 40, 1)
    /**
     * Description of the cargo configuration (e.g. C-1, C-2, C-3, DV-1, DV-2, AE-1, etc.) currently on board the aircraft. Configuration meanings are determined by the data source.
     * Example: /// Example: C-1
     * Constraints: Minimum length = 0, Maximum length = 8
     */
    val cargoConfig : String?
        get() {
            val o = __offset(42)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val cargoConfigAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(42, 1)
    fun cargoConfigInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 42, 1)
    /**
     * Mass of fuel required for this leg of the sortie, in kilograms.
     * Example: /// Example: 20000.1
     * Constraints: No constraints specified.
     */
    val fuelReq : Double
        get() {
            val o = __offset(44)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Liquid oxygen required on the aircraft for the crew compartment, in liters.
     * Example: /// Example: 12.3
     * Constraints: No constraints specified.
     */
    val oxyReqCrew : Double
        get() {
            val o = __offset(46)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Liquid oxygen onboard the aircraft for the crew compartment, in liters.
     * Example: /// Example: 12.3
     * Constraints: No constraints specified.
     */
    val oxyOnCrew : Double
        get() {
            val o = __offset(48)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Liquid oxygen required on the aircraft for the troop compartment, in liters.
     * Example: /// Example: 12.3
     * Constraints: No constraints specified.
     */
    val oxyReqPax : Double
        get() {
            val o = __offset(50)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Liquid oxygen onboard the aircraft for the troop compartment, in liters.
     * Example: /// Example: 12.3
     * Constraints: No constraints specified.
     */
    val oxyOnPax : Double
        get() {
            val o = __offset(52)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * The Alert Status code.
     * Example: /// Example: C1
     * Constraints: Minimum length = 0, Maximum length = 24
     */
    val alertStatusCode : String?
        get() {
            val o = __offset(54)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val alertStatusCodeAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(54, 1)
    fun alertStatusCodeInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 54, 1)
    /**
     * The amount of time allowed between launch order and takeoff, in seconds.
     * Example: /// Example: 22
     * Constraints: No constraints specified.
     */
    val alertStatus : Int
        get() {
            val o = __offset(56)
            return if(o != 0) bb.getInt(o + bb_pos) else 0
        }
    /**
     * The current state of this sortie.
     * Example: /// Example: Park
     * Constraints: Minimum length = 0, Maximum length = 32
     */
    val currentState : String?
        get() {
            val o = __offset(58)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val currentStateAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(58, 1)
    fun currentStateInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 58, 1)
    /**
     * The itinerary identifier of the departure location.
     * Example: /// Example: 100
     * Constraints: No constraints specified.
     */
    val depItinerary : Int
        get() {
            val o = __offset(60)
            return if(o != 0) bb.getInt(o + bb_pos) else 0
        }
    /**
     * The departure International Civil Aviation Organization (ICAO) of this sortie.
     * Example: /// Example: KCOS
     * Constraints: Minimum length = 0, Maximum length = 4
     */
    val depIcao : String?
        get() {
            val o = __offset(62)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val depIcaoAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(62, 1)
    fun depIcaoInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 62, 1)
    /**
     * The departure International Aviation Transport Association (IATA) code of this sortie.
     * Example: /// Example: AAA
     * Constraints: Minimum length = 0, Maximum length = 3
     */
    val depIata : String?
        get() {
            val o = __offset(64)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val depIataAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(64, 1)
    fun depIataInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 64, 1)
    /**
     * The departure Federal Aviation Administration (FAA) code of this sortie.
     * Example: /// Example: FAA1
     * Constraints: Minimum length = 0, Maximum length = 5
     */
    val depFaa : String?
        get() {
            val o = __offset(66)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val depFaaAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(66, 1)
    fun depFaaInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 66, 1)
    /**
     * The scheduled time that the Aircraft sortie is planned to depart, in ISO 8601 UTC format with millisecond precision.
     * Example: /// Example: 2021-01-01T01:01:01.123Z
     * Constraints: No constraints specified.
     */
    val plannedDepTime : String?
        get() {
            val o = __offset(68)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val plannedDepTimeAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(68, 1)
    fun plannedDepTimeInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 68, 1)
    /**
     * The current estimated time that the Aircraft is planned to depart, in ISO 8601 UTC format with millisecond precision.
     * Example: /// Example: 2021-01-01T01:01:01.123Z
     * Constraints: No constraints specified.
     */
    val estDepTime : String?
        get() {
            val o = __offset(70)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val estDepTimeAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(70, 1)
    fun estDepTimeInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 70, 1)
    /**
     * The actual departure time, in ISO 8601 UTC format.
     * Example: /// Example: 2021-01-01T01:01:01.123Z
     * Constraints: No constraints specified.
     */
    val actualDepTime : String?
        get() {
            val o = __offset(72)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val actualDepTimeAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(72, 1)
    fun actualDepTimeInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 72, 1)
    /**
     * The estimated time the Aircraft will begin to taxi from its parking position, in ISO 8601 UTC format with millisecond precision.
     * Example: /// Example: 2021-01-01T00:55:01.123Z
     * Constraints: No constraints specified.
     */
    val estBlockOutTime : String?
        get() {
            val o = __offset(74)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val estBlockOutTimeAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(74, 1)
    fun estBlockOutTimeInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 74, 1)
    /**
     * The actual time the Aircraft begins to taxi from its parking position, in ISO 8601 UTC format with millisecond precision.
     * Example: /// Example: 2021-01-01T00:55:01.123Z
     * Constraints: No constraints specified.
     */
    val actualBlockOutTime : String?
        get() {
            val o = __offset(76)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val actualBlockOutTimeAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(76, 1)
    fun actualBlockOutTimeInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 76, 1)
    /**
     * Purpose code at the departure location of this sortie.
     * Example: /// Example: P
     * Constraints: Minimum length = 0, Maximum length = 10
     */
    val depPurposeCode : String?
        get() {
            val o = __offset(78)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val depPurposeCodeAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(78, 1)
    fun depPurposeCodeInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 78, 1)
    /**
     * The itinerary identifier of the arrival location.
     * Example: /// Example: 101
     * Constraints: No constraints specified.
     */
    val arrItinerary : Int
        get() {
            val o = __offset(80)
            return if(o != 0) bb.getInt(o + bb_pos) else 0
        }
    /**
     * The arrival International Civil Aviation Organization (ICAO) of this sortie.
     * Example: /// Example: KCOS
     * Constraints: Minimum length = 0, Maximum length = 4
     */
    val arrIcao : String?
        get() {
            val o = __offset(82)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val arrIcaoAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(82, 1)
    fun arrIcaoInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 82, 1)
    /**
     * The arrival International Aviation Transport Association (IATA) code of this sortie.
     * Example: /// Example: AAA
     * Constraints: Minimum length = 0, Maximum length = 3
     */
    val arrIata : String?
        get() {
            val o = __offset(84)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val arrIataAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(84, 1)
    fun arrIataInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 84, 1)
    /**
     * The arrival Federal Aviation Administration (FAA) code of this sortie.
     * Example: /// Example: FAA1
     * Constraints: Minimum length = 0, Maximum length = 5
     */
    val arrFaa : String?
        get() {
            val o = __offset(86)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val arrFaaAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(86, 1)
    fun arrFaaInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 86, 1)
    /**
     * The scheduled time that the Aircraft sortie is planned to arrive,  in ISO 8601 UTC format with millisecond precision.
     * Example: /// Example: 2021-01-01T01:01:01.123Z
     * Constraints: No constraints specified.
     */
    val plannedArrTime : String?
        get() {
            val o = __offset(88)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val plannedArrTimeAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(88, 1)
    fun plannedArrTimeInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 88, 1)
    /**
     * The current estimated time that the Aircraft is planned to arrive, in ISO 8601 UTC format with millisecond precision.
     * Example: /// Example: 2021-01-01T01:01:01.123Z
     * Constraints: No constraints specified.
     */
    val estArrTime : String?
        get() {
            val o = __offset(90)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val estArrTimeAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(90, 1)
    fun estArrTimeInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 90, 1)
    /**
     * The actual arrival time, in ISO 8601 UTC format with millisecond precision.
     * Example: /// Example: 2021-01-01T01:01:01.123Z
     * Constraints: No constraints specified.
     */
    val actualArrTime : String?
        get() {
            val o = __offset(92)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val actualArrTimeAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(92, 1)
    fun actualArrTimeInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 92, 1)
    /**
     * The estimated time the Aircraft will come to a complete stop in its parking position, in ISO 8601 UTC format with millisecond precision.
     * Example: /// Example: 2021-01-01T01:06:01.123Z
     * Constraints: No constraints specified.
     */
    val estBlockInTime : String?
        get() {
            val o = __offset(94)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val estBlockInTimeAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(94, 1)
    fun estBlockInTimeInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 94, 1)
    /**
     * The actual time the Aircraft comes to a complete stop in its parking position, in ISO 8601 UTC format with millisecond precision.
     * Example: /// Example: 2021-01-01T01:06:01.123Z
     * Constraints: No constraints specified.
     */
    val actualBlockInTime : String?
        get() {
            val o = __offset(96)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val actualBlockInTimeAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(96, 1)
    fun actualBlockInTimeInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 96, 1)
    /**
     * Purpose code at the arrival location of this sortie.
     * Example: /// Example: O
     * Constraints: Minimum length = 0, Maximum length = 10
     */
    val arrPurposeCode : String?
        get() {
            val o = __offset(98)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val arrPurposeCodeAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(98, 1)
    fun arrPurposeCodeInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 98, 1)
    /**
     * Due home date by which the aircraft must return to its home station, in ISO 8601 UTC format with millisecond precision.
     * Example: /// Example: 2021-01-03T01:01:01.123Z
     * Constraints: No constraints specified.
     */
    val dhd : String?
        get() {
            val o = __offset(100)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val dhdAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(100, 1)
    fun dhdInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 100, 1)
    /**
     * Reason the aircraft must return to home station by its due home date.
     * Example: /// Example: Due for maintenance
     * Constraints: Minimum length = 0, Maximum length = 32
     */
    val dhdReason : String?
        get() {
            val o = __offset(102)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val dhdReasonAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(102, 1)
    fun dhdReasonInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 102, 1)
    /**
     * Aircraft event text.
     * Example: /// Example: Example event
     * Constraints: Minimum length = 0, Maximum length = 128
     */
    val aircraftEvent : String?
        get() {
            val o = __offset(104)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val aircraftEventAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(104, 1)
    fun aircraftEventInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 104, 1)
    /**
     * Indicates the group responsible for recording the completion time of the next event in the sequence of events assigned to this sortie (e.g. OPS - Operations, MX - Maintenance, TR - Transportation, etc.).
     * Example: /// Example: OPS
     * Constraints: Minimum length = 0, Maximum length = 16
     */
    val soe : String?
        get() {
            val o = __offset(106)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val soeAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(106, 1)
    fun soeInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 106, 1)
    /**
     * The leg number of this sortie.
     * Example: /// Example: 14
     * Constraints: No constraints specified.
     */
    val legNum : Int
        get() {
            val o = __offset(108)
            return if(o != 0) bb.getInt(o + bb_pos) else 0
        }
    /**
     * The planned flight time for this sortie, in minutes.
     * Example: /// Example: 104.5
     * Constraints: No constraints specified.
     */
    val flightTime : Double
        get() {
            val o = __offset(110)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Scheduled ground time, in minutes.
     * Example: /// Example: 387.8
     * Constraints: No constraints specified.
     */
    val gndTime : Double
        get() {
            val o = __offset(112)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * When crew papers are associated to this sortie, the system updates this value. This field is the URI location in the document repository of that raw file. To download the raw file, prepend https://udl-hostname/scs/download?id= to this field's value.
     * Example: /// Example: Example URI
     * Constraints: Minimum length = 0, Maximum length = 256
     */
    val rawFileUri : String?
        get() {
            val o = __offset(114)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val rawFileUriAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(114, 1)
    fun rawFileUriInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 114, 1)
    /**
     * The version number of the crew paper.
     * Example: /// Example: 1.1
     * Constraints: Minimum length = 0, Maximum length = 16
     */
    val papersVersion : String?
        get() {
            val o = __offset(116)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val papersVersionAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(116, 1)
    fun papersVersionInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 116, 1)
    /**
     * Name of the uploaded PDF.
     * Example: /// Example: ExampleFileName
     * Constraints: Minimum length = 0, Maximum length = 512
     */
    val filename : String?
        get() {
            val o = __offset(118)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val filenameAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(118, 1)
    fun filenameInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 118, 1)
    /**
     * Size of the supporting PDF, in bytes.
     * Example: /// Example: 12
     * Constraints: No constraints specified.
     */
    val filesize : Int
        get() {
            val o = __offset(120)
            return if(o != 0) bb.getInt(o + bb_pos) else 0
        }
    /**
     * The status of the supporting document.
     * Example: /// Example: PUBLISHED
     * Constraints: Minimum length = 0, Maximum length = 9
     */
    val paperStatus : Byte
        get() {
            val o = __offset(122)
            return if(o != 0) bb.get(o + bb_pos) else 0
        }
    /**
     * The prior permission required (PPR) status.
     * Example: /// Example: PENDING
     * Constraints: Minimum length = 0, Maximum length = 22
     */
    val pprStatus : Byte
        get() {
            val o = __offset(124)
            return if(o != 0) bb.get(o + bb_pos) else 0
        }
    /**
     * Time the associated mission data was last updated in relation to the aircraft assignment, in ISO 8601 UTC format with millisecond precision. If this time is coming from an external system, it may not sync with the latest mission time associated to this record.
     * Example: /// Example: 2024-09-09T01:01:01.123Z
     * Constraints: No constraints specified.
     */
    val missionUpdate : String?
        get() {
            val o = __offset(126)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val missionUpdateAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(126, 1)
    fun missionUpdateInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 126, 1)
    /**
     * The primary delay code.
     * Example: /// Example: 500
     * Constraints: Minimum length = 0, Maximum length = 10
     */
    val delayCode : String?
        get() {
            val o = __offset(128)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val delayCodeAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(128, 1)
    fun delayCodeInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 128, 1)
    /**
     * The last name of the aircraft commander.
     * Example: /// Example: Smith
     * Constraints: Minimum length = 0, Maximum length = 36
     */
    val commanderName : String?
        get() {
            val o = __offset(130)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val commanderNameAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(130, 1)
    fun commanderNameInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 130, 1)
    /**
     * Desk phone number of the flight manager assigned to the sortie. Null when no flight manager is assigned.
     * Example: /// Example: 7198675309
     * Constraints: Minimum length = 0, Maximum length = 45
     */
    val fmDeskNum : String?
        get() {
            val o = __offset(132)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val fmDeskNumAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(132, 1)
    fun fmDeskNumInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 132, 1)
    /**
     * Last name of the flight manager assigned to the sortie. Null when no flight manager is assigned.
     * Example: /// Example: Smith
     * Constraints: Minimum length = 0, Maximum length = 64
     */
    val fmName : String?
        get() {
            val o = __offset(134)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val fmNameAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(134, 1)
    fun fmNameInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 134, 1)
    /**
     * Type of Ravens required for this sortie (N - None, R - Raven (Security Team) required, C6 - Consider ravens (Ground time over 6 hours), R6 - Ravens required (Ground time over 6 hours)).
     * Example: /// Example: R
     * Constraints: Minimum length = 0, Maximum length = 2
     */
    val rvnReq : Byte
        get() {
            val o = __offset(136)
            return if(o != 0) bb.get(o + bb_pos) else 0
        }
    /**
     * The number of passengers tasked for this sortie.
     * Example: /// Example: 17
     * Constraints: No constraints specified.
     */
    val passengers : Int
        get() {
            val o = __offset(138)
            return if(o != 0) bb.getInt(o + bb_pos) else 0
        }
    /**
     * The POI parking location.
     * Example: /// Example: KCOS
     * Constraints: Minimum length = 0, Maximum length = 32
     */
    val parkingLoc : String?
        get() {
            val o = __offset(140)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val parkingLocAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(140, 1)
    fun parkingLocInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 140, 1)
    /**
     * Remarks concerning the sortie objective.
     * Example: /// Example: Some objective remark about aircraft A
     * Constraints: Minimum length = 0, Maximum length = 512
     */
    val objectiveRemarks : String?
        get() {
            val o = __offset(142)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val objectiveRemarksAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(142, 1)
    fun objectiveRemarksInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 142, 1)
    /**
     * Remarks concerning the aircraft.
     * Example: /// Example: Some remark about aircraft A
     * Constraints: Minimum length = 0, Maximum length = 512
     */
    val aircraftRemarks : String?
        get() {
            val o = __offset(144)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val aircraftRemarksAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(144, 1)
    fun aircraftRemarksInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 144, 1)
    /**
     * Remarks concerning the schedule.
     * Example: /// Example: Some schedule remark about aircraft A
     * Constraints: Minimum length = 0, Maximum length = 512
     */
    val scheduleRemarks : String?
        get() {
            val o = __offset(146)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val scheduleRemarksAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(146, 1)
    fun scheduleRemarksInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 146, 1)
    /**
     * Remarks concerning the results of this sortie.
     * Example: /// Example: Some remark about aircraft A
     * Constraints: Minimum length = 0, Maximum length = 512
     */
    val resultRemarks : String?
        get() {
            val o = __offset(148)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val resultRemarksAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(148, 1)
    fun resultRemarksInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 148, 1)
    /**
     * Time the row was created in the database, auto-populated by the system.
     * Example: /// Example: 2022-01-01T16:00:00.123Z
     * Constraints: No constraints specified.
     */
    val createdAt : String?
        get() {
            val o = __offset(150)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val createdAtAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(150, 1)
    fun createdAtInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 150, 1)
    /**
     * Application user who created the row in the database, auto-populated by the system.
     * Example: /// Example: some.user
     * Constraints: Minimum length = 1, Maximum length = 64
     */
    val createdBy : String?
        get() {
            val o = __offset(152)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val createdByAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(152, 1)
    fun createdByInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 152, 1)
    /**
     * The source data library from which this record was received. This could be a remote or tactical UDL or another data library. If null, the record should be assumed to have originated from the primary Enterprise UDL.
     * Example: /// Example: AXE
     * Constraints: Minimum length = 0, Maximum length = 64
     */
    val sourceDl : String?
        get() {
            val o = __offset(154)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val sourceDlAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(154, 1)
    fun sourceDlInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 154, 1)
    /**
     * Source of the data.
     * Example: /// Example: Bluestaq
     * Constraints: Minimum length = 1, Maximum length = 64
     */
    val source : String?
        get() {
            val o = __offset(156)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val sourceAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(156, 1)
    fun sourceInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 156, 1)
    /**
     * Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
     * Example: /// Example: THIRD_PARTY_DATASOURCE
     * Constraints: Minimum length = 0, Maximum length = 64
     */
    val origin : String?
        get() {
            val o = __offset(158)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val originAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(158, 1)
    fun originInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 158, 1)
    /**
     * Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
     * EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
     * REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
     * SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
     * TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
     * Example: /// Example: TEST
     * Constraints: Minimum length = 1, Maximum length = 32
     */
    val dataMode : Byte
        get() {
            val o = __offset(160)
            return if(o != 0) bb.get(o + bb_pos) else 0
        }
    /**
     * The originating source network on which this record was created, auto-populated by the system.
     * Example: /// Example: OPS1
     * Constraints: Minimum length = 1, Maximum length = 32
     */
    val origNetwork : String?
        get() {
            val o = __offset(162)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val origNetworkAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(162, 1)
    fun origNetworkInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 162, 1)
    companion object {
        fun validateVersion() = Constants.FLATBUFFERS_24_3_25()
        fun getRootAsAircraftSortie_Abridged(_bb: ByteBuffer): AircraftSortie_Abridged = getRootAsAircraftSortie_Abridged(_bb, AircraftSortie_Abridged())
        fun getRootAsAircraftSortie_Abridged(_bb: ByteBuffer, obj: AircraftSortie_Abridged): AircraftSortie_Abridged {
            _bb.order(ByteOrder.LITTLE_ENDIAN)
            return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb))
        }
        fun AircraftSortie_AbridgedBufferHasIdentifier(_bb: ByteBuffer) : Boolean = __has_identifier(_bb, "AIRC")
        fun createAircraftSortie_Abridged(builder: FlatBufferBuilder, idOffset: Int, classificationMarkingOffset: Int, origSortieIdOffset: Int, idAircraftOffset: Int, aircraftAltIdOffset: Int, tailNumberOffset: Int, aircraftMdsOffset: Int, aircraftAdsbOffset: Int, sortieDateOffset: Int, lineNumber: Int, idMissionOffset: Int, missionIdOffset: Int, amcMsnNumOffset: Int, amcMsnTypeOffset: Int, callSignOffset: Int, jcsPriorityOffset: Int, primarySclOffset: Int, secondarySclOffset: Int, reqConfigOffset: Int, cargoConfigOffset: Int, fuelReq: Double, oxyReqCrew: Double, oxyOnCrew: Double, oxyReqPax: Double, oxyOnPax: Double, alertStatusCodeOffset: Int, alertStatus: Int, currentStateOffset: Int, depItinerary: Int, depIcaoOffset: Int, depIataOffset: Int, depFaaOffset: Int, plannedDepTimeOffset: Int, estDepTimeOffset: Int, actualDepTimeOffset: Int, estBlockOutTimeOffset: Int, actualBlockOutTimeOffset: Int, depPurposeCodeOffset: Int, arrItinerary: Int, arrIcaoOffset: Int, arrIataOffset: Int, arrFaaOffset: Int, plannedArrTimeOffset: Int, estArrTimeOffset: Int, actualArrTimeOffset: Int, estBlockInTimeOffset: Int, actualBlockInTimeOffset: Int, arrPurposeCodeOffset: Int, dhdOffset: Int, dhdReasonOffset: Int, aircraftEventOffset: Int, soeOffset: Int, legNum: Int, flightTime: Double, gndTime: Double, rawFileUriOffset: Int, papersVersionOffset: Int, filenameOffset: Int, filesize: Int, paperStatus: Byte, pprStatus: Byte, missionUpdateOffset: Int, delayCodeOffset: Int, commanderNameOffset: Int, fmDeskNumOffset: Int, fmNameOffset: Int, rvnReq: Byte, passengers: Int, parkingLocOffset: Int, objectiveRemarksOffset: Int, aircraftRemarksOffset: Int, scheduleRemarksOffset: Int, resultRemarksOffset: Int, createdAtOffset: Int, createdByOffset: Int, sourceDlOffset: Int, sourceOffset: Int, originOffset: Int, dataMode: Byte, origNetworkOffset: Int) : Int {
            builder.startTable(80)
            addGndTime(builder, gndTime)
            addFlightTime(builder, flightTime)
            addOxyOnPax(builder, oxyOnPax)
            addOxyReqPax(builder, oxyReqPax)
            addOxyOnCrew(builder, oxyOnCrew)
            addOxyReqCrew(builder, oxyReqCrew)
            addFuelReq(builder, fuelReq)
            addOrigNetwork(builder, origNetworkOffset)
            addOrigin(builder, originOffset)
            addSource(builder, sourceOffset)
            addSourceDL(builder, sourceDlOffset)
            addCreatedBy(builder, createdByOffset)
            addCreatedAt(builder, createdAtOffset)
            addResultRemarks(builder, resultRemarksOffset)
            addScheduleRemarks(builder, scheduleRemarksOffset)
            addAircraftRemarks(builder, aircraftRemarksOffset)
            addObjectiveRemarks(builder, objectiveRemarksOffset)
            addParkingLoc(builder, parkingLocOffset)
            addPassengers(builder, passengers)
            addFmName(builder, fmNameOffset)
            addFmDeskNum(builder, fmDeskNumOffset)
            addCommanderName(builder, commanderNameOffset)
            addDelayCode(builder, delayCodeOffset)
            addMissionUpdate(builder, missionUpdateOffset)
            addFilesize(builder, filesize)
            addFilename(builder, filenameOffset)
            addPapersVersion(builder, papersVersionOffset)
            addRawFileURI(builder, rawFileUriOffset)
            addLegNum(builder, legNum)
            addSoe(builder, soeOffset)
            addAircraftEvent(builder, aircraftEventOffset)
            addDhdReason(builder, dhdReasonOffset)
            addDhd(builder, dhdOffset)
            addArrPurposeCode(builder, arrPurposeCodeOffset)
            addActualBlockInTime(builder, actualBlockInTimeOffset)
            addEstBlockInTime(builder, estBlockInTimeOffset)
            addActualArrTime(builder, actualArrTimeOffset)
            addEstArrTime(builder, estArrTimeOffset)
            addPlannedArrTime(builder, plannedArrTimeOffset)
            addArrFAA(builder, arrFaaOffset)
            addArrIATA(builder, arrIataOffset)
            addArrICAO(builder, arrIcaoOffset)
            addArrItinerary(builder, arrItinerary)
            addDepPurposeCode(builder, depPurposeCodeOffset)
            addActualBlockOutTime(builder, actualBlockOutTimeOffset)
            addEstBlockOutTime(builder, estBlockOutTimeOffset)
            addActualDepTime(builder, actualDepTimeOffset)
            addEstDepTime(builder, estDepTimeOffset)
            addPlannedDepTime(builder, plannedDepTimeOffset)
            addDepFAA(builder, depFaaOffset)
            addDepIATA(builder, depIataOffset)
            addDepICAO(builder, depIcaoOffset)
            addDepItinerary(builder, depItinerary)
            addCurrentState(builder, currentStateOffset)
            addAlertStatus(builder, alertStatus)
            addAlertStatusCode(builder, alertStatusCodeOffset)
            addCargoConfig(builder, cargoConfigOffset)
            addReqConfig(builder, reqConfigOffset)
            addSecondarySCL(builder, secondarySclOffset)
            addPrimarySCL(builder, primarySclOffset)
            addJcsPriority(builder, jcsPriorityOffset)
            addCallSign(builder, callSignOffset)
            addAmcMsnType(builder, amcMsnTypeOffset)
            addAmcMsnNum(builder, amcMsnNumOffset)
            addMissionId(builder, missionIdOffset)
            addIdMission(builder, idMissionOffset)
            addLineNumber(builder, lineNumber)
            addSortieDate(builder, sortieDateOffset)
            addAircraftADSB(builder, aircraftAdsbOffset)
            addAircraftMDS(builder, aircraftMdsOffset)
            addTailNumber(builder, tailNumberOffset)
            addAircraftAltId(builder, aircraftAltIdOffset)
            addIdAircraft(builder, idAircraftOffset)
            addOrigSortieId(builder, origSortieIdOffset)
            addClassificationMarking(builder, classificationMarkingOffset)
            addId(builder, idOffset)
            addDataMode(builder, dataMode)
            addRvnReq(builder, rvnReq)
            addPprStatus(builder, pprStatus)
            addPaperStatus(builder, paperStatus)
            return endAircraftSortie_Abridged(builder)
        }
        fun startAircraftSortie_Abridged(builder: FlatBufferBuilder) = builder.startTable(80)
        fun addId(builder: FlatBufferBuilder, id: Int) = builder.addOffset(0, id, 0)
        fun addClassificationMarking(builder: FlatBufferBuilder, classificationMarking: Int) = builder.addOffset(1, classificationMarking, 0)
        fun addOrigSortieId(builder: FlatBufferBuilder, origSortieId: Int) = builder.addOffset(2, origSortieId, 0)
        fun addIdAircraft(builder: FlatBufferBuilder, idAircraft: Int) = builder.addOffset(3, idAircraft, 0)
        fun addAircraftAltId(builder: FlatBufferBuilder, aircraftAltId: Int) = builder.addOffset(4, aircraftAltId, 0)
        fun addTailNumber(builder: FlatBufferBuilder, tailNumber: Int) = builder.addOffset(5, tailNumber, 0)
        fun addAircraftMDS(builder: FlatBufferBuilder, aircraftMds: Int) = builder.addOffset(6, aircraftMds, 0)
        fun addAircraftADSB(builder: FlatBufferBuilder, aircraftAdsb: Int) = builder.addOffset(7, aircraftAdsb, 0)
        fun addSortieDate(builder: FlatBufferBuilder, sortieDate: Int) = builder.addOffset(8, sortieDate, 0)
        fun addLineNumber(builder: FlatBufferBuilder, lineNumber: Int) = builder.addInt(9, lineNumber, 0)
        fun addIdMission(builder: FlatBufferBuilder, idMission: Int) = builder.addOffset(10, idMission, 0)
        fun addMissionId(builder: FlatBufferBuilder, missionId: Int) = builder.addOffset(11, missionId, 0)
        fun addAmcMsnNum(builder: FlatBufferBuilder, amcMsnNum: Int) = builder.addOffset(12, amcMsnNum, 0)
        fun addAmcMsnType(builder: FlatBufferBuilder, amcMsnType: Int) = builder.addOffset(13, amcMsnType, 0)
        fun addCallSign(builder: FlatBufferBuilder, callSign: Int) = builder.addOffset(14, callSign, 0)
        fun addJcsPriority(builder: FlatBufferBuilder, jcsPriority: Int) = builder.addOffset(15, jcsPriority, 0)
        fun addPrimarySCL(builder: FlatBufferBuilder, primaryScl: Int) = builder.addOffset(16, primaryScl, 0)
        fun addSecondarySCL(builder: FlatBufferBuilder, secondaryScl: Int) = builder.addOffset(17, secondaryScl, 0)
        fun addReqConfig(builder: FlatBufferBuilder, reqConfig: Int) = builder.addOffset(18, reqConfig, 0)
        fun addCargoConfig(builder: FlatBufferBuilder, cargoConfig: Int) = builder.addOffset(19, cargoConfig, 0)
        fun addFuelReq(builder: FlatBufferBuilder, fuelReq: Double) = builder.addDouble(20, fuelReq, 0.0)
        fun addOxyReqCrew(builder: FlatBufferBuilder, oxyReqCrew: Double) = builder.addDouble(21, oxyReqCrew, 0.0)
        fun addOxyOnCrew(builder: FlatBufferBuilder, oxyOnCrew: Double) = builder.addDouble(22, oxyOnCrew, 0.0)
        fun addOxyReqPax(builder: FlatBufferBuilder, oxyReqPax: Double) = builder.addDouble(23, oxyReqPax, 0.0)
        fun addOxyOnPax(builder: FlatBufferBuilder, oxyOnPax: Double) = builder.addDouble(24, oxyOnPax, 0.0)
        fun addAlertStatusCode(builder: FlatBufferBuilder, alertStatusCode: Int) = builder.addOffset(25, alertStatusCode, 0)
        fun addAlertStatus(builder: FlatBufferBuilder, alertStatus: Int) = builder.addInt(26, alertStatus, 0)
        fun addCurrentState(builder: FlatBufferBuilder, currentState: Int) = builder.addOffset(27, currentState, 0)
        fun addDepItinerary(builder: FlatBufferBuilder, depItinerary: Int) = builder.addInt(28, depItinerary, 0)
        fun addDepICAO(builder: FlatBufferBuilder, depIcao: Int) = builder.addOffset(29, depIcao, 0)
        fun addDepIATA(builder: FlatBufferBuilder, depIata: Int) = builder.addOffset(30, depIata, 0)
        fun addDepFAA(builder: FlatBufferBuilder, depFaa: Int) = builder.addOffset(31, depFaa, 0)
        fun addPlannedDepTime(builder: FlatBufferBuilder, plannedDepTime: Int) = builder.addOffset(32, plannedDepTime, 0)
        fun addEstDepTime(builder: FlatBufferBuilder, estDepTime: Int) = builder.addOffset(33, estDepTime, 0)
        fun addActualDepTime(builder: FlatBufferBuilder, actualDepTime: Int) = builder.addOffset(34, actualDepTime, 0)
        fun addEstBlockOutTime(builder: FlatBufferBuilder, estBlockOutTime: Int) = builder.addOffset(35, estBlockOutTime, 0)
        fun addActualBlockOutTime(builder: FlatBufferBuilder, actualBlockOutTime: Int) = builder.addOffset(36, actualBlockOutTime, 0)
        fun addDepPurposeCode(builder: FlatBufferBuilder, depPurposeCode: Int) = builder.addOffset(37, depPurposeCode, 0)
        fun addArrItinerary(builder: FlatBufferBuilder, arrItinerary: Int) = builder.addInt(38, arrItinerary, 0)
        fun addArrICAO(builder: FlatBufferBuilder, arrIcao: Int) = builder.addOffset(39, arrIcao, 0)
        fun addArrIATA(builder: FlatBufferBuilder, arrIata: Int) = builder.addOffset(40, arrIata, 0)
        fun addArrFAA(builder: FlatBufferBuilder, arrFaa: Int) = builder.addOffset(41, arrFaa, 0)
        fun addPlannedArrTime(builder: FlatBufferBuilder, plannedArrTime: Int) = builder.addOffset(42, plannedArrTime, 0)
        fun addEstArrTime(builder: FlatBufferBuilder, estArrTime: Int) = builder.addOffset(43, estArrTime, 0)
        fun addActualArrTime(builder: FlatBufferBuilder, actualArrTime: Int) = builder.addOffset(44, actualArrTime, 0)
        fun addEstBlockInTime(builder: FlatBufferBuilder, estBlockInTime: Int) = builder.addOffset(45, estBlockInTime, 0)
        fun addActualBlockInTime(builder: FlatBufferBuilder, actualBlockInTime: Int) = builder.addOffset(46, actualBlockInTime, 0)
        fun addArrPurposeCode(builder: FlatBufferBuilder, arrPurposeCode: Int) = builder.addOffset(47, arrPurposeCode, 0)
        fun addDhd(builder: FlatBufferBuilder, dhd: Int) = builder.addOffset(48, dhd, 0)
        fun addDhdReason(builder: FlatBufferBuilder, dhdReason: Int) = builder.addOffset(49, dhdReason, 0)
        fun addAircraftEvent(builder: FlatBufferBuilder, aircraftEvent: Int) = builder.addOffset(50, aircraftEvent, 0)
        fun addSoe(builder: FlatBufferBuilder, soe: Int) = builder.addOffset(51, soe, 0)
        fun addLegNum(builder: FlatBufferBuilder, legNum: Int) = builder.addInt(52, legNum, 0)
        fun addFlightTime(builder: FlatBufferBuilder, flightTime: Double) = builder.addDouble(53, flightTime, 0.0)
        fun addGndTime(builder: FlatBufferBuilder, gndTime: Double) = builder.addDouble(54, gndTime, 0.0)
        fun addRawFileURI(builder: FlatBufferBuilder, rawFileUri: Int) = builder.addOffset(55, rawFileUri, 0)
        fun addPapersVersion(builder: FlatBufferBuilder, papersVersion: Int) = builder.addOffset(56, papersVersion, 0)
        fun addFilename(builder: FlatBufferBuilder, filename: Int) = builder.addOffset(57, filename, 0)
        fun addFilesize(builder: FlatBufferBuilder, filesize: Int) = builder.addInt(58, filesize, 0)
        fun addPaperStatus(builder: FlatBufferBuilder, paperStatus: Byte) = builder.addByte(59, paperStatus, 0)
        fun addPprStatus(builder: FlatBufferBuilder, pprStatus: Byte) = builder.addByte(60, pprStatus, 0)
        fun addMissionUpdate(builder: FlatBufferBuilder, missionUpdate: Int) = builder.addOffset(61, missionUpdate, 0)
        fun addDelayCode(builder: FlatBufferBuilder, delayCode: Int) = builder.addOffset(62, delayCode, 0)
        fun addCommanderName(builder: FlatBufferBuilder, commanderName: Int) = builder.addOffset(63, commanderName, 0)
        fun addFmDeskNum(builder: FlatBufferBuilder, fmDeskNum: Int) = builder.addOffset(64, fmDeskNum, 0)
        fun addFmName(builder: FlatBufferBuilder, fmName: Int) = builder.addOffset(65, fmName, 0)
        fun addRvnReq(builder: FlatBufferBuilder, rvnReq: Byte) = builder.addByte(66, rvnReq, 0)
        fun addPassengers(builder: FlatBufferBuilder, passengers: Int) = builder.addInt(67, passengers, 0)
        fun addParkingLoc(builder: FlatBufferBuilder, parkingLoc: Int) = builder.addOffset(68, parkingLoc, 0)
        fun addObjectiveRemarks(builder: FlatBufferBuilder, objectiveRemarks: Int) = builder.addOffset(69, objectiveRemarks, 0)
        fun addAircraftRemarks(builder: FlatBufferBuilder, aircraftRemarks: Int) = builder.addOffset(70, aircraftRemarks, 0)
        fun addScheduleRemarks(builder: FlatBufferBuilder, scheduleRemarks: Int) = builder.addOffset(71, scheduleRemarks, 0)
        fun addResultRemarks(builder: FlatBufferBuilder, resultRemarks: Int) = builder.addOffset(72, resultRemarks, 0)
        fun addCreatedAt(builder: FlatBufferBuilder, createdAt: Int) = builder.addOffset(73, createdAt, 0)
        fun addCreatedBy(builder: FlatBufferBuilder, createdBy: Int) = builder.addOffset(74, createdBy, 0)
        fun addSourceDL(builder: FlatBufferBuilder, sourceDl: Int) = builder.addOffset(75, sourceDl, 0)
        fun addSource(builder: FlatBufferBuilder, source: Int) = builder.addOffset(76, source, 0)
        fun addOrigin(builder: FlatBufferBuilder, origin: Int) = builder.addOffset(77, origin, 0)
        fun addDataMode(builder: FlatBufferBuilder, dataMode: Byte) = builder.addByte(78, dataMode, 0)
        fun addOrigNetwork(builder: FlatBufferBuilder, origNetwork: Int) = builder.addOffset(79, origNetwork, 0)
        fun endAircraftSortie_Abridged(builder: FlatBufferBuilder) : Int {
            val o = builder.endTable()
            return o
        }
        fun finishAircraftSortieAbridgedBuffer(builder: FlatBufferBuilder, offset: Int) = builder.finish(offset, "AIRC")
        fun finishSizePrefixedAircraftSortie_AbridgedBuffer(builder: FlatBufferBuilder, offset: Int) = builder.finishSizePrefixed(offset, "AIRC")
    }
}
