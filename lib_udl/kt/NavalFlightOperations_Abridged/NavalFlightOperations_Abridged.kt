// automatically generated by the FlatBuffers compiler, do not modify

import com.google.flatbuffers.BaseVector
import com.google.flatbuffers.BooleanVector
import com.google.flatbuffers.ByteVector
import com.google.flatbuffers.Constants
import com.google.flatbuffers.DoubleVector
import com.google.flatbuffers.FlatBufferBuilder
import com.google.flatbuffers.FloatVector
import com.google.flatbuffers.LongVector
import com.google.flatbuffers.StringVector
import com.google.flatbuffers.Struct
import com.google.flatbuffers.Table
import com.google.flatbuffers.UnionVector
import java.nio.ByteBuffer
import java.nio.ByteOrder
import kotlin.math.sign

/**
 * /// Collection that specifies the naval flight operations for this ATO.
 */
@Suppress("unused")
class NavalFlightOperations_Abridged : Table() {

    fun __init(_i: Int, _bb: ByteBuffer)  {
        __reset(_i, _bb)
    }
    fun __assign(_i: Int, _bb: ByteBuffer) : NavalFlightOperations_Abridged {
        __init(_i, _bb)
        return this
    }
    /**
     * The name of a ship or maritime vessel. Specify UNKNOWN if name is not known.
     * Example: /// Example: USS WASP
     * Constraints: Minimum length = 1, Maximum length = 48
     */
    val shipName : String?
        get() {
            val o = __offset(4)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val shipNameAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(4, 1)
    fun shipNameInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 4, 1)
    /**
     * The time when flight operations begin in ISO8601 UTC format with millisecond precision.
     * Example: /// Example: 2021-02-25T12:00:00.123Z
     * Constraints: No constraints specified.
     */
    val fltOpStart : String?
        get() {
            val o = __offset(6)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val fltOpStartAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(6, 1)
    fun fltOpStartInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 6, 1)
    /**
     * The time when flight operations end in ISO8601 UTC format with millisecond precision.
     * Example: /// Example: 2021-02-25T12:00:00.123Z
     * Constraints: No constraints specified.
     */
    val fltOpStop : String?
        get() {
            val o = __offset(8)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val fltOpStopAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(8, 1)
    fun fltOpStopInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 8, 1)
    /**
     * An array of times at which an aircraft will be launched and/or recovered in ISO8601 UTC format with millisecond precision.
     * Example: /// Example: ['2021-02-25T12:00:00.123Z']
     * Constraints: No constraints specified.
     */
    fun schdLaunchRcvyTime(j: Int) : String? {
        val o = __offset(10)
        return if (o != 0) {
            __string(__vector(o) + j * 4)
        } else {
            null
        }
    }
    val schdLaunchRcvyTimeLength : Int
        get() {
            val o = __offset(10); return if (o != 0) __vector_len(o) else 0
        }
    companion object {
        fun validateVersion() = Constants.FLATBUFFERS_24_3_25()
        fun getRootAsNavalFlightOperations_Abridged(_bb: ByteBuffer): NavalFlightOperations_Abridged = getRootAsNavalFlightOperations_Abridged(_bb, NavalFlightOperations_Abridged())
        fun getRootAsNavalFlightOperations_Abridged(_bb: ByteBuffer, obj: NavalFlightOperations_Abridged): NavalFlightOperations_Abridged {
            _bb.order(ByteOrder.LITTLE_ENDIAN)
            return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb))
        }
        fun NavalFlightOperations_AbridgedBufferHasIdentifier(_bb: ByteBuffer) : Boolean = __has_identifier(_bb, "NAVA")
        fun createNavalFlightOperations_Abridged(builder: FlatBufferBuilder, shipNameOffset: Int, fltOpStartOffset: Int, fltOpStopOffset: Int, schdLaunchRcvyTimeOffset: Int) : Int {
            builder.startTable(4)
            addSchdLaunchRcvyTime(builder, schdLaunchRcvyTimeOffset)
            addFltOpStop(builder, fltOpStopOffset)
            addFltOpStart(builder, fltOpStartOffset)
            addShipName(builder, shipNameOffset)
            return endNavalFlightOperations_Abridged(builder)
        }
        fun startNavalFlightOperations_Abridged(builder: FlatBufferBuilder) = builder.startTable(4)
        fun addShipName(builder: FlatBufferBuilder, shipName: Int) = builder.addOffset(0, shipName, 0)
        fun addFltOpStart(builder: FlatBufferBuilder, fltOpStart: Int) = builder.addOffset(1, fltOpStart, 0)
        fun addFltOpStop(builder: FlatBufferBuilder, fltOpStop: Int) = builder.addOffset(2, fltOpStop, 0)
        fun addSchdLaunchRcvyTime(builder: FlatBufferBuilder, schdLaunchRcvyTime: Int) = builder.addOffset(3, schdLaunchRcvyTime, 0)
        fun createSchdLaunchRcvyTimeVector(builder: FlatBufferBuilder, data: IntArray) : Int {
            builder.startVector(4, data.size, 4)
            for (i in data.size - 1 downTo 0) {
                builder.addOffset(data[i])
            }
            return builder.endVector()
        }
        fun startSchdLaunchRcvyTimeVector(builder: FlatBufferBuilder, numElems: Int) = builder.startVector(4, numElems, 4)
        fun endNavalFlightOperations_Abridged(builder: FlatBufferBuilder) : Int {
            val o = builder.endTable()
            return o
        }
        fun finishNavalFlightOperationsAbridgedBuffer(builder: FlatBufferBuilder, offset: Int) = builder.finish(offset, "NAVA")
        fun finishSizePrefixedNavalFlightOperations_AbridgedBuffer(builder: FlatBufferBuilder, offset: Int) = builder.finishSizePrefixed(offset, "NAVA")
    }
}
