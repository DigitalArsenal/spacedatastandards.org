// automatically generated by the FlatBuffers compiler, do not modify

import com.google.flatbuffers.BaseVector
import com.google.flatbuffers.BooleanVector
import com.google.flatbuffers.ByteVector
import com.google.flatbuffers.Constants
import com.google.flatbuffers.DoubleVector
import com.google.flatbuffers.FlatBufferBuilder
import com.google.flatbuffers.FloatVector
import com.google.flatbuffers.LongVector
import com.google.flatbuffers.StringVector
import com.google.flatbuffers.Struct
import com.google.flatbuffers.Table
import com.google.flatbuffers.UnionVector
import java.nio.ByteBuffer
import java.nio.ByteOrder
import kotlin.math.sign

/**
 * /// Tasking collection periods.
 */
@Suppress("unused")
class ISRCollectionPeriods_Abridged : Table() {

    fun __init(_i: Int, _bb: ByteBuffer)  {
        __reset(_i, _bb)
    }
    fun __assign(_i: Int, _bb: ByteBuffer) : ISRCollectionPeriods_Abridged {
        __init(_i, _bb)
        return this
    }
    /**
     * No description provided.
     * Example: /// Example: No example provided.
     * Constraints: No constraints specified.
     */
    val planned : String?
        get() {
            val o = __offset(4)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val plannedAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(4, 1)
    fun plannedInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 4, 1)
    /**
     * Actual start and stop for the collection.
     * Example: /// Example: No example provided.
     * Constraints: No constraints specified.
     */
    fun actual(j: Int) : String? {
        val o = __offset(6)
        return if (o != 0) {
            __string(__vector(o) + j * 4)
        } else {
            null
        }
    }
    val actualLength : Int
        get() {
            val o = __offset(6); return if (o != 0) __vector_len(o) else 0
        }
    companion object {
        fun validateVersion() = Constants.FLATBUFFERS_24_3_25()
        fun getRootAsISRCollectionPeriods_Abridged(_bb: ByteBuffer): ISRCollectionPeriods_Abridged = getRootAsISRCollectionPeriods_Abridged(_bb, ISRCollectionPeriods_Abridged())
        fun getRootAsISRCollectionPeriods_Abridged(_bb: ByteBuffer, obj: ISRCollectionPeriods_Abridged): ISRCollectionPeriods_Abridged {
            _bb.order(ByteOrder.LITTLE_ENDIAN)
            return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb))
        }
        fun ISRCollectionPeriods_AbridgedBufferHasIdentifier(_bb: ByteBuffer) : Boolean = __has_identifier(_bb, "ISRC")
        fun createISRCollectionPeriods_Abridged(builder: FlatBufferBuilder, plannedOffset: Int, actualOffset: Int) : Int {
            builder.startTable(2)
            addActual(builder, actualOffset)
            addPlanned(builder, plannedOffset)
            return endISRCollectionPeriods_Abridged(builder)
        }
        fun startISRCollectionPeriods_Abridged(builder: FlatBufferBuilder) = builder.startTable(2)
        fun addPlanned(builder: FlatBufferBuilder, planned: Int) = builder.addOffset(0, planned, 0)
        fun addActual(builder: FlatBufferBuilder, actual: Int) = builder.addOffset(1, actual, 0)
        fun createActualVector(builder: FlatBufferBuilder, data: IntArray) : Int {
            builder.startVector(4, data.size, 4)
            for (i in data.size - 1 downTo 0) {
                builder.addOffset(data[i])
            }
            return builder.endVector()
        }
        fun startActualVector(builder: FlatBufferBuilder, numElems: Int) = builder.startVector(4, numElems, 4)
        fun endISRCollectionPeriods_Abridged(builder: FlatBufferBuilder) : Int {
            val o = builder.endTable()
            return o
        }
        fun finishISRCollectionPeriodsAbridgedBuffer(builder: FlatBufferBuilder, offset: Int) = builder.finish(offset, "ISRC")
        fun finishSizePrefixedISRCollectionPeriods_AbridgedBuffer(builder: FlatBufferBuilder, offset: Int) = builder.finishSizePrefixed(offset, "ISRC")
    }
}
