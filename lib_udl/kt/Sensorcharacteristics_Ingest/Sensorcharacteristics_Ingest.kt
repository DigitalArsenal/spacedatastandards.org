// automatically generated by the FlatBuffers compiler, do not modify

import com.google.flatbuffers.BaseVector
import com.google.flatbuffers.BooleanVector
import com.google.flatbuffers.ByteVector
import com.google.flatbuffers.Constants
import com.google.flatbuffers.DoubleVector
import com.google.flatbuffers.FlatBufferBuilder
import com.google.flatbuffers.FloatVector
import com.google.flatbuffers.LongVector
import com.google.flatbuffers.StringVector
import com.google.flatbuffers.Struct
import com.google.flatbuffers.Table
import com.google.flatbuffers.UnionVector
import java.nio.ByteBuffer
import java.nio.ByteOrder
import kotlin.math.sign

/**
 * /// Model representation of characteristics and capabilities of a sensor.
 */
@Suppress("unused")
class Sensorcharacteristics_Ingest : Table() {

    fun __init(_i: Int, _bb: ByteBuffer)  {
        __reset(_i, _bb)
    }
    fun __assign(_i: Int, _bb: ByteBuffer) : Sensorcharacteristics_Ingest {
        __init(_i, _bb)
        return this
    }
    /**
     * Unique identifier of the record, auto-generated by the system.
     * Example: /// Example: SENSORCHARACTERISTICS-ID
     * Constraints: Minimum length = 1, Maximum length = 36
     */
    val id : String?
        get() {
            val o = __offset(4)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val idAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(4, 1)
    fun idInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 4, 1)
    /**
     * Unique identifier of the parent sensor.
     * Example: /// Example: SENSOR-ID
     * Constraints: Minimum length = 1, Maximum length = 36
     */
    val idSensor : String?
        get() {
            val o = __offset(6)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val idSensorAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(6, 1)
    fun idSensorInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 6, 1)
    /**
     * Classification marking of the data in IC/CAPCO Portion-marked format.
     * Example: /// Example: U
     * Constraints: Minimum length = 1, Maximum length = 128
     */
    val classificationMarking : String?
        get() {
            val o = __offset(8)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val classificationMarkingAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(8, 1)
    fun classificationMarkingInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 8, 1)
    /**
     * The originating source network on which this record was created, auto-populated by the system.
     * Example: /// Example: ORIG
     * Constraints: Minimum length = 1, Maximum length = 32
     */
    val origNetwork : String?
        get() {
            val o = __offset(10)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val origNetworkAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(10, 1)
    fun origNetworkInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 10, 1)
    /**
     * Azimuth rate acquisition limit (rad/min).
     * Example: /// Example: 10.23
     * Constraints: No constraints specified.
     */
    val azimuthRate : Double
        get() {
            val o = __offset(12)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Elevation rate acquisition limit (rad/min).
     * Example: /// Example: 10.23
     * Constraints: No constraints specified.
     */
    val elevationRateGeolm : Double
        get() {
            val o = __offset(14)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Minimum range measurement capability of the sensor (km).
     * Example: /// Example: 20.23
     * Constraints: No constraints specified.
     */
    val minRangeLimit : Double
        get() {
            val o = __offset(16)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Maximum observable range limit (km) -- sensor cannot acquire beyond this range.
     * Example: /// Example: 20.23
     * Constraints: No constraints specified.
     */
    val maxRangeLimit : Double
        get() {
            val o = __offset(18)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * For Orbiting Sensors, First Card Azimuth limit #1 (left, deg).
     * Example: /// Example: 20.23
     * Constraints: No constraints specified.
     */
    val leftClockAngle : Double
        get() {
            val o = __offset(20)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * For Orbiting Sensors, First Card Azimuth limit #3 (left, deg).
     * Example: /// Example: 20.23
     * Constraints: No constraints specified.
     */
    val rightClockAngle : Double
        get() {
            val o = __offset(22)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * The angle of the center of a phased array sensor.
     * Example: /// Example: 20.23
     * Constraints: No constraints specified.
     */
    val boresight : Double
        get() {
            val o = __offset(24)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * The number of degrees off of the boresight for the sensor (degrees).
     * Example: /// Example: 20.23
     * Constraints: No constraints specified.
     */
    val boresightOffAngle : Double
        get() {
            val o = __offset(26)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Negative Range-rate/relative velocity limit (km/sec).
     * Example: /// Example: 20.23
     * Constraints: No constraints specified.
     */
    val negativeRangeRateLimit : Double
        get() {
            val o = __offset(28)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Positive Range-rate/relative velocity limit (km/sec).
     * Example: /// Example: 20.23
     * Constraints: No constraints specified.
     */
    val positiveRangeRateLimit : Double
        get() {
            val o = __offset(30)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Absolute magnitude acquisition limit for optical sensors.
     * Example: /// Example: 20.23
     * Constraints: No constraints specified.
     */
    val magnitudeLimit : Double
        get() {
            val o = __offset(32)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Beginning track angle limit (rad). Track angle is the angle between the camera axis and the gimbal plane. Values range from 0 - PI/2.
     * Example: /// Example: 1.23
     * Constraints: No constraints specified.
     */
    val trackAngle : Double
        get() {
            val o = __offset(34)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Signal to Noise Ratio (in db). The values for this range from 0.0 - + 99.99 dB.
     * Example: /// Example: 20.23
     * Constraints: No constraints specified.
     */
    val minSignalNoiseRatio : Double
        get() {
            val o = __offset(36)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * The beam width of a Sensor's Fan (range). The values for this range from (0.0 to PI).
     * Example: /// Example: 3.1
     * Constraints: No constraints specified.
     */
    val fanBeamWidth : Double
        get() {
            val o = __offset(38)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Maximum taskable range of the sensor (km).
     * Example: /// Example: 20.23
     * Constraints: No constraints specified.
     */
    val taskableRange : Double
        get() {
            val o = __offset(40)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Maximum observable sensor range (km).
     * Example: /// Example: 20.23
     * Constraints: No constraints specified.
     */
    val maxObservableRange : Double
        get() {
            val o = __offset(42)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Radio frequency (if sensor is RF).
     * Example: /// Example: 20.23
     * Constraints: No constraints specified.
     */
    val radioFrequency : Double
        get() {
            val o = __offset(44)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Radar frequency of the sensor (if a radar sensor).
     * Example: /// Example: 20.23
     * Constraints: No constraints specified.
     */
    val radarFrequency : Double
        get() {
            val o = __offset(46)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Radar transmit power in Watts.
     * Example: /// Example: 20.23
     * Constraints: No constraints specified.
     */
    val transmitPower : Double
        get() {
            val o = __offset(48)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Horizontal field of view.
     * Example: /// Example: 20.23
     * Constraints: No constraints specified.
     */
    val hFov : Double
        get() {
            val o = __offset(50)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Vertical field of view.
     * Example: /// Example: 20.23
     * Constraints: No constraints specified.
     */
    val vFov : Double
        get() {
            val o = __offset(52)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Horizontal pixel resolution.
     * Example: /// Example: 1000
     * Constraints: No constraints specified.
     */
    val hResPixels : Int
        get() {
            val o = __offset(54)
            return if(o != 0) bb.getInt(o + bb_pos) else 0
        }
    /**
     * Vertical pixel resolution.
     * Example: /// Example: 1000
     * Constraints: No constraints specified.
     */
    val vResPixels : Int
        get() {
            val o = __offset(56)
            return if(o != 0) bb.getInt(o + bb_pos) else 0
        }
    /**
     * Sensor band.
     * Example: /// Example: BAND
     * Constraints: Minimum length = 0, Maximum length = 36
     */
    val band : String?
        get() {
            val o = __offset(58)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val bandAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(58, 1)
    fun bandInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 58, 1)
    /**
     * Max deviation angle of the sensor in degrees.
     * Example: /// Example: 20.23
     * Constraints: No constraints specified.
     */
    val maxDeviationAngle : Double
        get() {
            val o = __offset(60)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Optical sensor camera aperture.
     * Example: /// Example: 2.23
     * Constraints: No constraints specified.
     */
    val aperture : Double
        get() {
            val o = __offset(62)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Leftmost GEO belt longitude limit for this sensor (if applicable).
     * Example: /// Example: 20.23
     * Constraints: No constraints specified.
     */
    val leftGeoBeltLimit : Double
        get() {
            val o = __offset(64)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Rightmost GEO belt longitude limit for this sensor (if applicable).
     * Example: /// Example: 20.23
     * Constraints: No constraints specified.
     */
    val rightGeoBeltLimit : Double
        get() {
            val o = __offset(66)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * For ASR (Air Surveillance Radar) sensors, the scan (360 deg sweep) rate of the radar, in scans/minute.
     * Example: /// Example: 20.23
     * Constraints: No constraints specified.
     */
    val asrScanRate : Double
        get() {
            val o = __offset(68)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * For radar based sensors, K-factor is a relative indicator of refractivity that infers the amount of radar beam bending due to atmosphere. (1<K<2).
     * Example: /// Example: 1.4
     * Constraints: No constraints specified.
     */
    val k : Double
        get() {
            val o = __offset(70)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * For radar based sensors, the focal point elevation of the radar at the site, in meters.
     * Example: /// Example: 20.23
     * Constraints: No constraints specified.
     */
    val focalPoint : Double
        get() {
            val o = __offset(72)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * For tower sensors, the physical height of the sensor tower, in meters.
     * Example: /// Example: 20.23
     * Constraints: No constraints specified.
     */
    val towerHeight : Double
        get() {
            val o = __offset(74)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * True North correction for the sensor, in ACP (Azimunth Change Pulse) count.
     * Example: /// Example: 10
     * Constraints: No constraints specified.
     */
    val trueNorthCorrector : Int
        get() {
            val o = __offset(76)
            return if(o != 0) bb.getInt(o + bb_pos) else 0
        }
    /**
     * Angle between magnetic north and true north at the sensor site, in degrees.
     * Example: /// Example: 45.23
     * Constraints: No constraints specified.
     */
    val magDec : Double
        get() {
            val o = __offset(78)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Peformance zone-1 minimum range, in km. Note that the zones apply only to the PSR/Search radars.
     * Example: /// Example: 20.23
     * Constraints: No constraints specified.
     */
    val z1MinRange : Double
        get() {
            val o = __offset(80)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Peformance zone-2 minimum range, in km. Note that the zones apply only to the PSR/Search radars.
     * Example: /// Example: 20.23
     * Constraints: No constraints specified.
     */
    val z2MinRange : Double
        get() {
            val o = __offset(82)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Peformance zone-1 maximum range, in km. Note that the zones apply only to the PSR/Search radars.
     * Example: /// Example: 50.23
     * Constraints: No constraints specified.
     */
    val z1MaxRange : Double
        get() {
            val o = __offset(84)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Peformance zone-2 maximum range, in km. Note that the zones apply only to the PSR/Search radars.
     * Example: /// Example: 50.23
     * Constraints: No constraints specified.
     */
    val z2MaxRange : Double
        get() {
            val o = __offset(86)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * For radar based sensors, radar maximum unambiguous range, in km.
     * Example: /// Example: 20.23
     * Constraints: No constraints specified.
     */
    val radarMur : Double
        get() {
            val o = __offset(88)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * For radar based sensors, probability of the indication of the presence of a radar target due to noise or interference.
     * Example: /// Example: 0.5
     * Constraints: No constraints specified.
     */
    val probFalseAlarm : Double
        get() {
            val o = __offset(90)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * For radar based sensors, pulse repetition frequency, in Hz. Number of new pulses tranmistted per second.
     * Example: /// Example: 20.23
     * Constraints: No constraints specified.
     */
    val prf : Double
        get() {
            val o = __offset(92)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * For radar based sensors, radar pulse width, in microseconds. The transmit time of a pulse.
     * Example: /// Example: 20.23
     * Constraints: No constraints specified.
     */
    val radarPulseWidth : Double
        get() {
            val o = __offset(94)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * For radar based sensors, number of integrated pulses in a transmit cycle.
     * Example: /// Example: 10
     * Constraints: No constraints specified.
     */
    val numIntegratedPulses : Int
        get() {
            val o = __offset(96)
            return if(o != 0) bb.getInt(o + bb_pos) else 0
        }
    /**
     * Antenna true tilt, in degrees.
     * Example: /// Example: 20.23
     * Constraints: No constraints specified.
     */
    val trueTilt : Double
        get() {
            val o = __offset(98)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Message data format transmitted by the sensor digitizer.
     * Example: /// Example: DATA_FORMAT
     * Constraints: Minimum length = 0, Maximum length = 32
     */
    val radarMessageFormat : String?
        get() {
            val o = __offset(100)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val radarMessageFormatAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(100, 1)
    fun radarMessageFormatInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 100, 1)
    /**
     * For radar based sensors, expression of the radar system noise, aggregated as an equivalent thermal noise value, in degrees Kelvin.
     * Example: /// Example: 3.5
     * Constraints: No constraints specified.
     */
    val systemNoiseTemperature : Double
        get() {
            val o = __offset(102)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Source of the data.
     * Example: /// Example: Bluestaq
     * Constraints: Minimum length = 1, Maximum length = 64
     */
    val source : String?
        get() {
            val o = __offset(104)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val sourceAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(104, 1)
    fun sourceInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 104, 1)
    /**
     * Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
     * EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
     * REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
     * SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
     * TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
     * Example: /// Example: TEST
     * Constraints: Minimum length = 1, Maximum length = 32
     */
    val dataMode : Byte
        get() {
            val o = __offset(106)
            return if(o != 0) bb.get(o + bb_pos) else 0
        }
    /**
     * Time the row was created in the database, auto-populated by the system.
     * Example: /// Example: 2018-01-01T16:00:00.123Z
     * Constraints: No constraints specified.
     */
    val createdAt : String?
        get() {
            val o = __offset(108)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val createdAtAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(108, 1)
    fun createdAtInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 108, 1)
    /**
     * Application user who created the row in the database, auto-populated by the system.
     * Example: /// Example: some.user
     * Constraints: Minimum length = 1, Maximum length = 64
     */
    val createdBy : String?
        get() {
            val o = __offset(110)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val createdByAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(110, 1)
    fun createdByInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 110, 1)
    companion object {
        fun validateVersion() = Constants.FLATBUFFERS_24_3_25()
        fun getRootAsSensorcharacteristics_Ingest(_bb: ByteBuffer): Sensorcharacteristics_Ingest = getRootAsSensorcharacteristics_Ingest(_bb, Sensorcharacteristics_Ingest())
        fun getRootAsSensorcharacteristics_Ingest(_bb: ByteBuffer, obj: Sensorcharacteristics_Ingest): Sensorcharacteristics_Ingest {
            _bb.order(ByteOrder.LITTLE_ENDIAN)
            return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb))
        }
        fun Sensorcharacteristics_IngestBufferHasIdentifier(_bb: ByteBuffer) : Boolean = __has_identifier(_bb, "SENS")
        fun createSensorcharacteristics_Ingest(builder: FlatBufferBuilder, idOffset: Int, idSensorOffset: Int, classificationMarkingOffset: Int, origNetworkOffset: Int, azimuthRate: Double, elevationRateGeolm: Double, minRangeLimit: Double, maxRangeLimit: Double, leftClockAngle: Double, rightClockAngle: Double, boresight: Double, boresightOffAngle: Double, negativeRangeRateLimit: Double, positiveRangeRateLimit: Double, magnitudeLimit: Double, trackAngle: Double, minSignalNoiseRatio: Double, fanBeamWidth: Double, taskableRange: Double, maxObservableRange: Double, radioFrequency: Double, radarFrequency: Double, transmitPower: Double, hFov: Double, vFov: Double, hResPixels: Int, vResPixels: Int, bandOffset: Int, maxDeviationAngle: Double, aperture: Double, leftGeoBeltLimit: Double, rightGeoBeltLimit: Double, asrScanRate: Double, k: Double, focalPoint: Double, towerHeight: Double, trueNorthCorrector: Int, magDec: Double, z1MinRange: Double, z2MinRange: Double, z1MaxRange: Double, z2MaxRange: Double, radarMur: Double, probFalseAlarm: Double, prf: Double, radarPulseWidth: Double, numIntegratedPulses: Int, trueTilt: Double, radarMessageFormatOffset: Int, systemNoiseTemperature: Double, sourceOffset: Int, dataMode: Byte, createdAtOffset: Int, createdByOffset: Int) : Int {
            builder.startTable(54)
            addSystemNoiseTemperature(builder, systemNoiseTemperature)
            addTrueTilt(builder, trueTilt)
            addRadarPulseWidth(builder, radarPulseWidth)
            addPrf(builder, prf)
            addProbFalseAlarm(builder, probFalseAlarm)
            addRadarMUR(builder, radarMur)
            addZ2MaxRange(builder, z2MaxRange)
            addZ1MaxRange(builder, z1MaxRange)
            addZ2MinRange(builder, z2MinRange)
            addZ1MinRange(builder, z1MinRange)
            addMagDec(builder, magDec)
            addTowerHeight(builder, towerHeight)
            addFocalPoint(builder, focalPoint)
            addK(builder, k)
            addAsrScanRate(builder, asrScanRate)
            addRightGeoBeltLimit(builder, rightGeoBeltLimit)
            addLeftGeoBeltLimit(builder, leftGeoBeltLimit)
            addAperture(builder, aperture)
            addMaxDeviationAngle(builder, maxDeviationAngle)
            addVFOV(builder, vFov)
            addHFOV(builder, hFov)
            addTransmitPower(builder, transmitPower)
            addRadarFrequency(builder, radarFrequency)
            addRadioFrequency(builder, radioFrequency)
            addMaxObservableRange(builder, maxObservableRange)
            addTaskableRange(builder, taskableRange)
            addFanBeamWidth(builder, fanBeamWidth)
            addMinSignalNoiseRatio(builder, minSignalNoiseRatio)
            addTrackAngle(builder, trackAngle)
            addMagnitudeLimit(builder, magnitudeLimit)
            addPositiveRangeRateLimit(builder, positiveRangeRateLimit)
            addNegativeRangeRateLimit(builder, negativeRangeRateLimit)
            addBoresightOffAngle(builder, boresightOffAngle)
            addBoresight(builder, boresight)
            addRightClockAngle(builder, rightClockAngle)
            addLeftClockAngle(builder, leftClockAngle)
            addMaxRangeLimit(builder, maxRangeLimit)
            addMinRangeLimit(builder, minRangeLimit)
            addElevationRateGeolm(builder, elevationRateGeolm)
            addAzimuthRate(builder, azimuthRate)
            addCreatedBy(builder, createdByOffset)
            addCreatedAt(builder, createdAtOffset)
            addSource(builder, sourceOffset)
            addRadarMessageFormat(builder, radarMessageFormatOffset)
            addNumIntegratedPulses(builder, numIntegratedPulses)
            addTrueNorthCorrector(builder, trueNorthCorrector)
            addBand(builder, bandOffset)
            addVResPixels(builder, vResPixels)
            addHResPixels(builder, hResPixels)
            addOrigNetwork(builder, origNetworkOffset)
            addClassificationMarking(builder, classificationMarkingOffset)
            addIdSensor(builder, idSensorOffset)
            addId(builder, idOffset)
            addDataMode(builder, dataMode)
            return endSensorcharacteristics_Ingest(builder)
        }
        fun startSensorcharacteristics_Ingest(builder: FlatBufferBuilder) = builder.startTable(54)
        fun addId(builder: FlatBufferBuilder, id: Int) = builder.addOffset(0, id, 0)
        fun addIdSensor(builder: FlatBufferBuilder, idSensor: Int) = builder.addOffset(1, idSensor, 0)
        fun addClassificationMarking(builder: FlatBufferBuilder, classificationMarking: Int) = builder.addOffset(2, classificationMarking, 0)
        fun addOrigNetwork(builder: FlatBufferBuilder, origNetwork: Int) = builder.addOffset(3, origNetwork, 0)
        fun addAzimuthRate(builder: FlatBufferBuilder, azimuthRate: Double) = builder.addDouble(4, azimuthRate, 0.0)
        fun addElevationRateGeolm(builder: FlatBufferBuilder, elevationRateGeolm: Double) = builder.addDouble(5, elevationRateGeolm, 0.0)
        fun addMinRangeLimit(builder: FlatBufferBuilder, minRangeLimit: Double) = builder.addDouble(6, minRangeLimit, 0.0)
        fun addMaxRangeLimit(builder: FlatBufferBuilder, maxRangeLimit: Double) = builder.addDouble(7, maxRangeLimit, 0.0)
        fun addLeftClockAngle(builder: FlatBufferBuilder, leftClockAngle: Double) = builder.addDouble(8, leftClockAngle, 0.0)
        fun addRightClockAngle(builder: FlatBufferBuilder, rightClockAngle: Double) = builder.addDouble(9, rightClockAngle, 0.0)
        fun addBoresight(builder: FlatBufferBuilder, boresight: Double) = builder.addDouble(10, boresight, 0.0)
        fun addBoresightOffAngle(builder: FlatBufferBuilder, boresightOffAngle: Double) = builder.addDouble(11, boresightOffAngle, 0.0)
        fun addNegativeRangeRateLimit(builder: FlatBufferBuilder, negativeRangeRateLimit: Double) = builder.addDouble(12, negativeRangeRateLimit, 0.0)
        fun addPositiveRangeRateLimit(builder: FlatBufferBuilder, positiveRangeRateLimit: Double) = builder.addDouble(13, positiveRangeRateLimit, 0.0)
        fun addMagnitudeLimit(builder: FlatBufferBuilder, magnitudeLimit: Double) = builder.addDouble(14, magnitudeLimit, 0.0)
        fun addTrackAngle(builder: FlatBufferBuilder, trackAngle: Double) = builder.addDouble(15, trackAngle, 0.0)
        fun addMinSignalNoiseRatio(builder: FlatBufferBuilder, minSignalNoiseRatio: Double) = builder.addDouble(16, minSignalNoiseRatio, 0.0)
        fun addFanBeamWidth(builder: FlatBufferBuilder, fanBeamWidth: Double) = builder.addDouble(17, fanBeamWidth, 0.0)
        fun addTaskableRange(builder: FlatBufferBuilder, taskableRange: Double) = builder.addDouble(18, taskableRange, 0.0)
        fun addMaxObservableRange(builder: FlatBufferBuilder, maxObservableRange: Double) = builder.addDouble(19, maxObservableRange, 0.0)
        fun addRadioFrequency(builder: FlatBufferBuilder, radioFrequency: Double) = builder.addDouble(20, radioFrequency, 0.0)
        fun addRadarFrequency(builder: FlatBufferBuilder, radarFrequency: Double) = builder.addDouble(21, radarFrequency, 0.0)
        fun addTransmitPower(builder: FlatBufferBuilder, transmitPower: Double) = builder.addDouble(22, transmitPower, 0.0)
        fun addHFOV(builder: FlatBufferBuilder, hFov: Double) = builder.addDouble(23, hFov, 0.0)
        fun addVFOV(builder: FlatBufferBuilder, vFov: Double) = builder.addDouble(24, vFov, 0.0)
        fun addHResPixels(builder: FlatBufferBuilder, hResPixels: Int) = builder.addInt(25, hResPixels, 0)
        fun addVResPixels(builder: FlatBufferBuilder, vResPixels: Int) = builder.addInt(26, vResPixels, 0)
        fun addBand(builder: FlatBufferBuilder, band: Int) = builder.addOffset(27, band, 0)
        fun addMaxDeviationAngle(builder: FlatBufferBuilder, maxDeviationAngle: Double) = builder.addDouble(28, maxDeviationAngle, 0.0)
        fun addAperture(builder: FlatBufferBuilder, aperture: Double) = builder.addDouble(29, aperture, 0.0)
        fun addLeftGeoBeltLimit(builder: FlatBufferBuilder, leftGeoBeltLimit: Double) = builder.addDouble(30, leftGeoBeltLimit, 0.0)
        fun addRightGeoBeltLimit(builder: FlatBufferBuilder, rightGeoBeltLimit: Double) = builder.addDouble(31, rightGeoBeltLimit, 0.0)
        fun addAsrScanRate(builder: FlatBufferBuilder, asrScanRate: Double) = builder.addDouble(32, asrScanRate, 0.0)
        fun addK(builder: FlatBufferBuilder, k: Double) = builder.addDouble(33, k, 0.0)
        fun addFocalPoint(builder: FlatBufferBuilder, focalPoint: Double) = builder.addDouble(34, focalPoint, 0.0)
        fun addTowerHeight(builder: FlatBufferBuilder, towerHeight: Double) = builder.addDouble(35, towerHeight, 0.0)
        fun addTrueNorthCorrector(builder: FlatBufferBuilder, trueNorthCorrector: Int) = builder.addInt(36, trueNorthCorrector, 0)
        fun addMagDec(builder: FlatBufferBuilder, magDec: Double) = builder.addDouble(37, magDec, 0.0)
        fun addZ1MinRange(builder: FlatBufferBuilder, z1MinRange: Double) = builder.addDouble(38, z1MinRange, 0.0)
        fun addZ2MinRange(builder: FlatBufferBuilder, z2MinRange: Double) = builder.addDouble(39, z2MinRange, 0.0)
        fun addZ1MaxRange(builder: FlatBufferBuilder, z1MaxRange: Double) = builder.addDouble(40, z1MaxRange, 0.0)
        fun addZ2MaxRange(builder: FlatBufferBuilder, z2MaxRange: Double) = builder.addDouble(41, z2MaxRange, 0.0)
        fun addRadarMUR(builder: FlatBufferBuilder, radarMur: Double) = builder.addDouble(42, radarMur, 0.0)
        fun addProbFalseAlarm(builder: FlatBufferBuilder, probFalseAlarm: Double) = builder.addDouble(43, probFalseAlarm, 0.0)
        fun addPrf(builder: FlatBufferBuilder, prf: Double) = builder.addDouble(44, prf, 0.0)
        fun addRadarPulseWidth(builder: FlatBufferBuilder, radarPulseWidth: Double) = builder.addDouble(45, radarPulseWidth, 0.0)
        fun addNumIntegratedPulses(builder: FlatBufferBuilder, numIntegratedPulses: Int) = builder.addInt(46, numIntegratedPulses, 0)
        fun addTrueTilt(builder: FlatBufferBuilder, trueTilt: Double) = builder.addDouble(47, trueTilt, 0.0)
        fun addRadarMessageFormat(builder: FlatBufferBuilder, radarMessageFormat: Int) = builder.addOffset(48, radarMessageFormat, 0)
        fun addSystemNoiseTemperature(builder: FlatBufferBuilder, systemNoiseTemperature: Double) = builder.addDouble(49, systemNoiseTemperature, 0.0)
        fun addSource(builder: FlatBufferBuilder, source: Int) = builder.addOffset(50, source, 0)
        fun addDataMode(builder: FlatBufferBuilder, dataMode: Byte) = builder.addByte(51, dataMode, 0)
        fun addCreatedAt(builder: FlatBufferBuilder, createdAt: Int) = builder.addOffset(52, createdAt, 0)
        fun addCreatedBy(builder: FlatBufferBuilder, createdBy: Int) = builder.addOffset(53, createdBy, 0)
        fun endSensorcharacteristics_Ingest(builder: FlatBufferBuilder) : Int {
            val o = builder.endTable()
            return o
        }
        fun finishSensorcharacteristicsIngestBuffer(builder: FlatBufferBuilder, offset: Int) = builder.finish(offset, "SENS")
        fun finishSizePrefixedSensorcharacteristics_IngestBuffer(builder: FlatBufferBuilder, offset: Int) = builder.finishSizePrefixed(offset, "SENS")
    }
}
