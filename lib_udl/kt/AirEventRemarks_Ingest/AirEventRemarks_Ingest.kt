// automatically generated by the FlatBuffers compiler, do not modify

import com.google.flatbuffers.BaseVector
import com.google.flatbuffers.BooleanVector
import com.google.flatbuffers.ByteVector
import com.google.flatbuffers.Constants
import com.google.flatbuffers.DoubleVector
import com.google.flatbuffers.FlatBufferBuilder
import com.google.flatbuffers.FloatVector
import com.google.flatbuffers.LongVector
import com.google.flatbuffers.StringVector
import com.google.flatbuffers.Struct
import com.google.flatbuffers.Table
import com.google.flatbuffers.UnionVector
import java.nio.ByteBuffer
import java.nio.ByteOrder
import kotlin.math.sign

/**
 * /// Collection of remarks associated with this Air Event.
 */
@Suppress("unused")
class AirEventRemarks_Ingest : Table() {

    fun __init(_i: Int, _bb: ByteBuffer)  {
        __reset(_i, _bb)
    }
    fun __assign(_i: Int, _bb: ByteBuffer) : AirEventRemarks_Ingest {
        __init(_i, _bb)
        return this
    }
    /**
     * Optional remark ID from external systems. This field has no meaning within UDL and is provided as a convenience for systems that require tracking of an internal system generated ID.
     * Example: /// Example: 23ea2877a6f74d7d8f309567a5896441
     * Constraints: Minimum length = 0, Maximum length = 36
     */
    val externalRemarkId : String?
        get() {
            val o = __offset(4)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val externalRemarkIdAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(4, 1)
    fun externalRemarkIdInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 4, 1)
    /**
     * Text of the remark.
     * Example: /// Example: Example air event remarks.
     * Constraints: Minimum length = 0, Maximum length = 1024
     */
    val text : String?
        get() {
            val o = __offset(6)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val textAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(6, 1)
    fun textInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 6, 1)
    /**
     * Date the remark was published, in ISO 8601 UTC format, with millisecond precision.
     * Example: /// Example: 2024-01-01T01:01:01.123Z
     * Constraints: No constraints specified.
     */
    val date : String?
        get() {
            val o = __offset(8)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val dateAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(8, 1)
    fun dateInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 8, 1)
    /**
     * User who published the remark.
     * Example: /// Example: John Doe
     * Constraints: Minimum length = 0, Maximum length = 20
     */
    val user : String?
        get() {
            val o = __offset(10)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val userAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(10, 1)
    fun userInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 10, 1)
    companion object {
        fun validateVersion() = Constants.FLATBUFFERS_24_3_25()
        fun getRootAsAirEventRemarks_Ingest(_bb: ByteBuffer): AirEventRemarks_Ingest = getRootAsAirEventRemarks_Ingest(_bb, AirEventRemarks_Ingest())
        fun getRootAsAirEventRemarks_Ingest(_bb: ByteBuffer, obj: AirEventRemarks_Ingest): AirEventRemarks_Ingest {
            _bb.order(ByteOrder.LITTLE_ENDIAN)
            return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb))
        }
        fun AirEventRemarks_IngestBufferHasIdentifier(_bb: ByteBuffer) : Boolean = __has_identifier(_bb, "AIRE")
        fun createAirEventRemarks_Ingest(builder: FlatBufferBuilder, externalRemarkIdOffset: Int, textOffset: Int, dateOffset: Int, userOffset: Int) : Int {
            builder.startTable(4)
            addUser(builder, userOffset)
            addDate(builder, dateOffset)
            addText(builder, textOffset)
            addExternalRemarkId(builder, externalRemarkIdOffset)
            return endAirEventRemarks_Ingest(builder)
        }
        fun startAirEventRemarks_Ingest(builder: FlatBufferBuilder) = builder.startTable(4)
        fun addExternalRemarkId(builder: FlatBufferBuilder, externalRemarkId: Int) = builder.addOffset(0, externalRemarkId, 0)
        fun addText(builder: FlatBufferBuilder, text: Int) = builder.addOffset(1, text, 0)
        fun addDate(builder: FlatBufferBuilder, date: Int) = builder.addOffset(2, date, 0)
        fun addUser(builder: FlatBufferBuilder, user: Int) = builder.addOffset(3, user, 0)
        fun endAirEventRemarks_Ingest(builder: FlatBufferBuilder) : Int {
            val o = builder.endTable()
            return o
        }
        fun finishAirEventRemarksIngestBuffer(builder: FlatBufferBuilder, offset: Int) = builder.finish(offset, "AIRE")
        fun finishSizePrefixedAirEventRemarks_IngestBuffer(builder: FlatBufferBuilder, offset: Int) = builder.finishSizePrefixed(offset, "AIRE")
    }
}
