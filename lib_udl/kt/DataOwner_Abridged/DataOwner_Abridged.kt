// automatically generated by the FlatBuffers compiler, do not modify

import com.google.flatbuffers.BaseVector
import com.google.flatbuffers.BooleanVector
import com.google.flatbuffers.ByteVector
import com.google.flatbuffers.Constants
import com.google.flatbuffers.DoubleVector
import com.google.flatbuffers.FlatBufferBuilder
import com.google.flatbuffers.FloatVector
import com.google.flatbuffers.LongVector
import com.google.flatbuffers.StringVector
import com.google.flatbuffers.Struct
import com.google.flatbuffers.Table
import com.google.flatbuffers.UnionVector
import java.nio.ByteBuffer
import java.nio.ByteOrder
import kotlin.math.sign

/**
 * /// Information pertaining to UDL data owners.
 */
@Suppress("unused")
class DataOwner_Abridged : Table() {

    fun __init(_i: Int, _bb: ByteBuffer)  {
        __reset(_i, _bb)
    }
    fun __assign(_i: Int, _bb: ByteBuffer) : DataOwner_Abridged {
        __init(_i, _bb)
        return this
    }
    /**
     * The name of the data owner.
     * Example: /// Example: Data owner name
     * Constraints: Minimum length = 1, Maximum length = 64
     */
    val doName : String?
        get() {
            val o = __offset(4)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val doNameAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(4, 1)
    fun doNameInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 4, 1)
    /**
     * Classification marking of the data in IC/CAPCO Portion-marked format.
     * Example: /// Example: U
     * Constraints: Minimum length = 1, Maximum length = 128
     */
    val classificationMarking : String?
        get() {
            val o = __offset(6)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val classificationMarkingAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(6, 1)
    fun classificationMarkingInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 6, 1)
    /**
     * Type of organization which this data owner belongs to (e.g. Commercial, Government, Academic, Consortium, etc.).
     * Example: /// Example: Commercial
     * Constraints: Minimum length = 1, Maximum length = 32
     */
    val ownerType : String?
        get() {
            val o = __offset(8)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val ownerTypeAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(8, 1)
    fun ownerTypeInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 8, 1)
    /**
     * Type of data this data owner owns (e.g. EPHEMERIS, IMAGERY, MANEUVER, etc.).
     * Example: /// Example: ELSET
     * Constraints: Minimum length = 1, Maximum length = 64
     */
    val dataType : String?
        get() {
            val o = __offset(10)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val dataTypeAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(10, 1)
    fun dataTypeInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 10, 1)
    /**
     * Organization name for the data provider.
     * Example: /// Example: ACME
     * Constraints: Minimum length = 1, Maximum length = 64
     */
    val provider : String?
        get() {
            val o = __offset(12)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val providerAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(12, 1)
    fun providerInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 12, 1)
    /**
     * The country code. This value is typically the ISO 3166 Alpha-2 two-character country code, however it can also represent various consortiums that do not appear in the ISO document. The code must correspond to an existing country in the UDLâ€™s country API. Call udl/country/{code} to get any associated FIPS code, ISO Alpha-3 code, or alternate code values that exist for the specified country code.
     * Example: /// Example: US
     * Constraints: Minimum length = 1, Maximum length = 4
     */
    val countryCode : String?
        get() {
            val o = __offset(14)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val countryCodeAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(14, 1)
    fun countryCodeInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 14, 1)
    /**
     * Unique identifier of the contact for this data owner.
     * Example: /// Example: 026dd511-8ba5-47d3-9909-836149f87686
     * Constraints: Minimum length = 1, Maximum length = 36
     */
    val idContact : String?
        get() {
            val o = __offset(16)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val idContactAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(16, 1)
    fun idContactInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 16, 1)
    /**
     * Description of this data owner.
     * Example: /// Example: Description of this data owner.
     * Constraints: No constraints specified.
     */
    val description : String?
        get() {
            val o = __offset(18)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val descriptionAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(18, 1)
    fun descriptionInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 18, 1)
    /**
     * Optional control required to access this data type from this owner.
     * Example: /// Example: PR-ACME-ELSETS
     * Constraints: Minimum length = 1, Maximum length = 128
     */
    val control : String?
        get() {
            val o = __offset(20)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val controlAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(20, 1)
    fun controlInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 20, 1)
    /**
     * Boolean indicating if the data owner is enabled (if not enabled, they should not appear on the data products screen on the storefront).
     * Example: /// Example: False
     * Constraints: No constraints specified.
     */
    val enabled : Boolean
        get() {
            val o = __offset(22)
            return if(o != 0) 0.toByte() != bb.get(o + bb_pos) else false
        }
    /**
     * Boolean indicating if the data owner is coming soon or not yet available.
     * Example: /// Example: False
     * Constraints: No constraints specified.
     */
    val comingSoon : Boolean
        get() {
            val o = __offset(24)
            return if(o != 0) 0.toByte() != bb.get(o + bb_pos) else false
        }
    /**
     * Source of the data.
     * Example: /// Example: some.user
     * Constraints: Minimum length = 1, Maximum length = 64
     */
    val source : String?
        get() {
            val o = __offset(26)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val sourceAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(26, 1)
    fun sourceInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 26, 1)
    companion object {
        fun validateVersion() = Constants.FLATBUFFERS_24_3_25()
        fun getRootAsDataOwner_Abridged(_bb: ByteBuffer): DataOwner_Abridged = getRootAsDataOwner_Abridged(_bb, DataOwner_Abridged())
        fun getRootAsDataOwner_Abridged(_bb: ByteBuffer, obj: DataOwner_Abridged): DataOwner_Abridged {
            _bb.order(ByteOrder.LITTLE_ENDIAN)
            return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb))
        }
        fun DataOwner_AbridgedBufferHasIdentifier(_bb: ByteBuffer) : Boolean = __has_identifier(_bb, "DATA")
        fun createDataOwner_Abridged(builder: FlatBufferBuilder, doNameOffset: Int, classificationMarkingOffset: Int, ownerTypeOffset: Int, dataTypeOffset: Int, providerOffset: Int, countryCodeOffset: Int, idContactOffset: Int, descriptionOffset: Int, controlOffset: Int, enabled: Boolean, comingSoon: Boolean, sourceOffset: Int) : Int {
            builder.startTable(12)
            addSource(builder, sourceOffset)
            addControl(builder, controlOffset)
            addDescription(builder, descriptionOffset)
            addIdContact(builder, idContactOffset)
            addCountryCode(builder, countryCodeOffset)
            addProvider(builder, providerOffset)
            addDataType(builder, dataTypeOffset)
            addOwnerType(builder, ownerTypeOffset)
            addClassificationMarking(builder, classificationMarkingOffset)
            addDoName(builder, doNameOffset)
            addComingSoon(builder, comingSoon)
            addEnabled(builder, enabled)
            return endDataOwner_Abridged(builder)
        }
        fun startDataOwner_Abridged(builder: FlatBufferBuilder) = builder.startTable(12)
        fun addDoName(builder: FlatBufferBuilder, doName: Int) = builder.addOffset(0, doName, 0)
        fun addClassificationMarking(builder: FlatBufferBuilder, classificationMarking: Int) = builder.addOffset(1, classificationMarking, 0)
        fun addOwnerType(builder: FlatBufferBuilder, ownerType: Int) = builder.addOffset(2, ownerType, 0)
        fun addDataType(builder: FlatBufferBuilder, dataType: Int) = builder.addOffset(3, dataType, 0)
        fun addProvider(builder: FlatBufferBuilder, provider: Int) = builder.addOffset(4, provider, 0)
        fun addCountryCode(builder: FlatBufferBuilder, countryCode: Int) = builder.addOffset(5, countryCode, 0)
        fun addIdContact(builder: FlatBufferBuilder, idContact: Int) = builder.addOffset(6, idContact, 0)
        fun addDescription(builder: FlatBufferBuilder, description: Int) = builder.addOffset(7, description, 0)
        fun addControl(builder: FlatBufferBuilder, control: Int) = builder.addOffset(8, control, 0)
        fun addEnabled(builder: FlatBufferBuilder, enabled: Boolean) = builder.addBoolean(9, enabled, false)
        fun addComingSoon(builder: FlatBufferBuilder, comingSoon: Boolean) = builder.addBoolean(10, comingSoon, false)
        fun addSource(builder: FlatBufferBuilder, source: Int) = builder.addOffset(11, source, 0)
        fun endDataOwner_Abridged(builder: FlatBufferBuilder) : Int {
            val o = builder.endTable()
            return o
        }
        fun finishDataOwnerAbridgedBuffer(builder: FlatBufferBuilder, offset: Int) = builder.finish(offset, "DATA")
        fun finishSizePrefixedDataOwner_AbridgedBuffer(builder: FlatBufferBuilder, offset: Int) = builder.finishSizePrefixed(offset, "DATA")
    }
}
