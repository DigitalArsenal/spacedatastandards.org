// automatically generated by the FlatBuffers compiler, do not modify

import com.google.flatbuffers.BaseVector
import com.google.flatbuffers.BooleanVector
import com.google.flatbuffers.ByteVector
import com.google.flatbuffers.Constants
import com.google.flatbuffers.DoubleVector
import com.google.flatbuffers.FlatBufferBuilder
import com.google.flatbuffers.FloatVector
import com.google.flatbuffers.LongVector
import com.google.flatbuffers.StringVector
import com.google.flatbuffers.Struct
import com.google.flatbuffers.Table
import com.google.flatbuffers.UnionVector
import java.nio.ByteBuffer
import java.nio.ByteOrder
import kotlin.math.sign

/**
 * /// HRR Scatterer record for a target pixel that exceeds the target detection threshold.
 */
@Suppress("unused")
class MtiHRRScatterer_Ingest : Table() {

    fun __init(_i: Int, _bb: ByteBuffer)  {
        __reset(_i, _bb)
    }
    fun __assign(_i: Int, _bb: ByteBuffer) : MtiHRRScatterer_Ingest {
        __init(_i, _bb)
        return this
    }
    /**
     * Scatterer’s power magnitude.
     * Example: /// Example: 1
     * Constraints: No constraints specified.
     */
    val h321 : Int
        get() {
            val o = __offset(4)
            return if(o != 0) bb.getInt(o + bb_pos) else 0
        }
    /**
     * Scatterer’s complex phase, in degrees.
     * Example: /// Example: 1
     * Constraints: No constraints specified.
     */
    val h322 : Int
        get() {
            val o = __offset(6)
            return if(o != 0) bb.getInt(o + bb_pos) else 0
        }
    /**
     * Scatterer’s Range index relative to Range-Doppler chip, where increasing index equates to increasing range.
     * Example: /// Example: 1
     * Constraints: No constraints specified.
     */
    val h323 : Int
        get() {
            val o = __offset(8)
            return if(o != 0) bb.getInt(o + bb_pos) else 0
        }
    /**
     * Scatterer’s Doppler index relative to Range-Doppler chip, where increasing index equates to increasing Doppler.
     * Example: /// Example: 1
     * Constraints: No constraints specified.
     */
    val h324 : Int
        get() {
            val o = __offset(10)
            return if(o != 0) bb.getInt(o + bb_pos) else 0
        }
    companion object {
        fun validateVersion() = Constants.FLATBUFFERS_24_3_25()
        fun getRootAsMtiHRRScatterer_Ingest(_bb: ByteBuffer): MtiHRRScatterer_Ingest = getRootAsMtiHRRScatterer_Ingest(_bb, MtiHRRScatterer_Ingest())
        fun getRootAsMtiHRRScatterer_Ingest(_bb: ByteBuffer, obj: MtiHRRScatterer_Ingest): MtiHRRScatterer_Ingest {
            _bb.order(ByteOrder.LITTLE_ENDIAN)
            return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb))
        }
        fun MtiHRRScatterer_IngestBufferHasIdentifier(_bb: ByteBuffer) : Boolean = __has_identifier(_bb, "MTIH")
        fun createMtiHRRScatterer_Ingest(builder: FlatBufferBuilder, h321: Int, h322: Int, h323: Int, h324: Int) : Int {
            builder.startTable(4)
            addH324(builder, h324)
            addH323(builder, h323)
            addH322(builder, h322)
            addH321(builder, h321)
            return endMtiHRRScatterer_Ingest(builder)
        }
        fun startMtiHRRScatterer_Ingest(builder: FlatBufferBuilder) = builder.startTable(4)
        fun addH321(builder: FlatBufferBuilder, h321: Int) = builder.addInt(0, h321, 0)
        fun addH322(builder: FlatBufferBuilder, h322: Int) = builder.addInt(1, h322, 0)
        fun addH323(builder: FlatBufferBuilder, h323: Int) = builder.addInt(2, h323, 0)
        fun addH324(builder: FlatBufferBuilder, h324: Int) = builder.addInt(3, h324, 0)
        fun endMtiHRRScatterer_Ingest(builder: FlatBufferBuilder) : Int {
            val o = builder.endTable()
            return o
        }
        fun finishMtiHRRScattererIngestBuffer(builder: FlatBufferBuilder, offset: Int) = builder.finish(offset, "MTIH")
        fun finishSizePrefixedMtiHRRScatterer_IngestBuffer(builder: FlatBufferBuilder, offset: Int) = builder.finishSizePrefixed(offset, "MTIH")
    }
}
