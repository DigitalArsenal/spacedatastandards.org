// automatically generated by the FlatBuffers compiler, do not modify

import com.google.flatbuffers.BaseVector
import com.google.flatbuffers.BooleanVector
import com.google.flatbuffers.ByteVector
import com.google.flatbuffers.Constants
import com.google.flatbuffers.DoubleVector
import com.google.flatbuffers.FlatBufferBuilder
import com.google.flatbuffers.FloatVector
import com.google.flatbuffers.LongVector
import com.google.flatbuffers.StringVector
import com.google.flatbuffers.Struct
import com.google.flatbuffers.Table
import com.google.flatbuffers.UnionVector
import java.nio.ByteBuffer
import java.nio.ByteOrder
import kotlin.math.sign

/**
 * /// A bus is the physical and software infrastructure backbone to which on-orbit satellite payloads are attached for power, control, and other support functions.
 */
@Suppress("unused")
class Bus_Ingest : Table() {

    fun __init(_i: Int, _bb: ByteBuffer)  {
        __reset(_i, _bb)
    }
    fun __assign(_i: Int, _bb: ByteBuffer) : Bus_Ingest {
        __init(_i, _bb)
        return this
    }
    /**
     * Unique identifier of the record, auto-generated by the system.
     * Example: /// Example: BUS-ID
     * Constraints: Minimum length = 1, Maximum length = 36
     */
    val id : String?
        get() {
            val o = __offset(4)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val idAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(4, 1)
    fun idInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 4, 1)
    /**
     * Name of this bus.
     * Example: /// Example: Example name
     * Constraints: Minimum length = 1, Maximum length = 128
     */
    val name : String?
        get() {
            val o = __offset(6)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val nameAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(6, 1)
    fun nameInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 6, 1)
    /**
     * Classification marking of the data in IC/CAPCO Portion-marked format.
     * Example: /// Example: U
     * Constraints: Minimum length = 1, Maximum length = 128
     */
    val classificationMarking : String?
        get() {
            val o = __offset(8)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val classificationMarkingAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(8, 1)
    fun classificationMarkingInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 8, 1)
    /**
     * ID of the parent entity for this bus.
     * Example: /// Example: 0167f577-e06c-358e-85aa-0a07a730bdd0
     * Constraints: Minimum length = 0, Maximum length = 36
     */
    val idEntity : String?
        get() {
            val o = __offset(10)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val idEntityAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(10, 1)
    fun idEntityInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 10, 1)
    /**
     * Type of this bus.
     * Example: /// Example: Example type
     * Constraints: Minimum length = 0, Maximum length = 128
     */
    val type : String?
        get() {
            val o = __offset(12)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val typeAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(12, 1)
    fun typeInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 12, 1)
    /**
     * Maximum mass at launch, lower bounds, in kilograms.
     * Example: /// Example: 10.1
     * Constraints: No constraints specified.
     */
    val maxLaunchMassLower : Double
        get() {
            val o = __offset(14)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Maximum mass at launch, upper bounds, in kilograms.
     * Example: /// Example: 10.1
     * Constraints: No constraints specified.
     */
    val maxLaunchMassUpper : Double
        get() {
            val o = __offset(16)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Maximum mass on station at beginning of life, in kilograms.
     * Example: /// Example: 10.1
     * Constraints: No constraints specified.
     */
    val maxBolstationMass : Double
        get() {
            val o = __offset(18)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Average mass available on this bus for payloads, in kilograms.
     * Example: /// Example: 10.1
     * Constraints: No constraints specified.
     */
    val avgPayloadMass : Double
        get() {
            val o = __offset(20)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Maximum payload mass available, in kilograms.
     * Example: /// Example: 10.1
     * Constraints: No constraints specified.
     */
    val maxPayloadMass : Double
        get() {
            val o = __offset(22)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Minimum mass of this bus without payloads or fuel, in kilograms.
     * Example: /// Example: 2858.1
     * Constraints: No constraints specified.
     */
    val minDryMass : Double
        get() {
            val o = __offset(24)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Average mass of this bus without payloads or fuel, in kilograms.
     * Example: /// Example: 2879.1
     * Constraints: No constraints specified.
     */
    val avgDryMass : Double
        get() {
            val o = __offset(26)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Median mass of this bus without payloads or fuel, in kilograms.
     * Example: /// Example: 2950.1
     * Constraints: No constraints specified.
     */
    val medianDryMass : Double
        get() {
            val o = __offset(28)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Maximum mass of this bus without payloads or fuel, in kilograms.
     * Example: /// Example: 2900.1
     * Constraints: No constraints specified.
     */
    val maxDryMass : Double
        get() {
            val o = __offset(30)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Minimum mass of this bus with fuel, but without payloads, in kilograms.
     * Example: /// Example: 5192.1
     * Constraints: No constraints specified.
     */
    val minWetMass : Double
        get() {
            val o = __offset(32)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Average mass of this bus with fuel, but without payloads, in kilograms.
     * Example: /// Example: 5246.1
     * Constraints: No constraints specified.
     */
    val avgWetMass : Double
        get() {
            val o = __offset(34)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Median mass of this bus with fuel, but without payloads, in kilograms.
     * Example: /// Example: 5260.1
     * Constraints: No constraints specified.
     */
    val medianWetMass : Double
        get() {
            val o = __offset(36)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Maximum mass of this bus with fuel, but without payloads, in kilograms.
     * Example: /// Example: 5300.0
     * Constraints: No constraints specified.
     */
    val maxWetMass : Double
        get() {
            val o = __offset(38)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Maximum power at beginning of life, lower bounds, in kilowatts.
     * Example: /// Example: 10.1
     * Constraints: No constraints specified.
     */
    val maxBolpowerLower : Double
        get() {
            val o = __offset(40)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Maximum power at beginning of life, upper bounds, in kilowatts.
     * Example: /// Example: 10.1
     * Constraints: No constraints specified.
     */
    val maxBolpowerUpper : Double
        get() {
            val o = __offset(42)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Maximum power at end of life, lower bounds, in kilowatts.
     * Example: /// Example: 10.1
     * Constraints: No constraints specified.
     */
    val maxEolpowerLower : Double
        get() {
            val o = __offset(44)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Maximum power at end of life, upper bounds, in kilowatts.
     * Example: /// Example: 10.1
     * Constraints: No constraints specified.
     */
    val maxEolpowerUpper : Double
        get() {
            val o = __offset(46)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Average power available on this bus, in kilowatts.
     * Example: /// Example: 10.1
     * Constraints: No constraints specified.
     */
    val avgSpacecraftPower : Double
        get() {
            val o = __offset(48)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Maximum power available on this bus, in kilowatts.
     * Example: /// Example: 10.1
     * Constraints: No constraints specified.
     */
    val maxSpacecraftPower : Double
        get() {
            val o = __offset(50)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Orbit averaged power (the power averaged over one orbit) available on this bus, in kilowatts.
     * Example: /// Example: 10.1
     * Constraints: No constraints specified.
     */
    val oapSpacecraftPower : Double
        get() {
            val o = __offset(52)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Average power available on this bus for payloads, in kilowatts.
     * Example: /// Example: 10.1
     * Constraints: No constraints specified.
     */
    val avgPayloadPower : Double
        get() {
            val o = __offset(54)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Maximum payload power available, in kilowatts.
     * Example: /// Example: 10.1
     * Constraints: No constraints specified.
     */
    val maxPayloadPower : Double
        get() {
            val o = __offset(56)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Orbit averaged power (the power averaged over one orbit) available on this bus for payloads, in kilowatts.
     * Example: /// Example: 10.1
     * Constraints: No constraints specified.
     */
    val oapPayloadPower : Double
        get() {
            val o = __offset(58)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Body dimension in X direction pertaining to length, in meters.
     * Example: /// Example: 10.1
     * Constraints: No constraints specified.
     */
    val bodyDimensionX : Double
        get() {
            val o = __offset(60)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Body dimension in Y direction pertaining to height, in meters.
     * Example: /// Example: 10.1
     * Constraints: No constraints specified.
     */
    val bodyDimensionY : Double
        get() {
            val o = __offset(62)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Body dimension in Z direction pertaining to width, in meters.
     * Example: /// Example: 10.1
     * Constraints: No constraints specified.
     */
    val bodyDimensionZ : Double
        get() {
            val o = __offset(64)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * The radial dimension available on this bus for payloads, in meters.
     * Example: /// Example: 1.1
     * Constraints: No constraints specified.
     */
    val payloadDimensionX : Double
        get() {
            val o = __offset(66)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * The in-track dimension available on this bus for payloads, in meters.
     * Example: /// Example: 1.1
     * Constraints: No constraints specified.
     */
    val payloadDimensionY : Double
        get() {
            val o = __offset(68)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * The cross-track dimension available on this bus for payloads, in meters.
     * Example: /// Example: 1.1
     * Constraints: No constraints specified.
     */
    val payloadDimensionZ : Double
        get() {
            val o = __offset(70)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * The volume available on this bus for payloads, in cubic meters.
     * Example: /// Example: 1.1
     * Constraints: No constraints specified.
     */
    val payloadVolume : Double
        get() {
            val o = __offset(72)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Launch envelope dimension in X direction, in meters.
     * Example: /// Example: 10.1
     * Constraints: No constraints specified.
     */
    val launchEnvelopeDimensionX : Double
        get() {
            val o = __offset(74)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Launch envelope dimension in Y direction, in meters.
     * Example: /// Example: 10.1
     * Constraints: No constraints specified.
     */
    val launchEnvelopeDimensionY : Double
        get() {
            val o = __offset(76)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Launch envelope dimension in Z direction, in meters.
     * Example: /// Example: 10.1
     * Constraints: No constraints specified.
     */
    val launchEnvelopeDimensionZ : Double
        get() {
            val o = __offset(78)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * The number of orbit types this bus can support.
     * Example: /// Example: 3
     * Constraints: No constraints specified.
     */
    val numOrbitType : Int
        get() {
            val o = __offset(80)
            return if(o != 0) bb.getInt(o + bb_pos) else 0
        }
    /**
     * Array of orbit types this bus can support (e.g. GEO, LEO, etc.). Must contain the same number of elements as the value of numOrbitType.
     * Example: /// Example: ['LEO', 'HEO', 'GEO']
     * Constraints: No constraints specified.
     */
    fun orbitTypes(j: Int) : String? {
        val o = __offset(82)
        return if (o != 0) {
            __string(__vector(o) + j * 4)
        } else {
            null
        }
    }
    val orbitTypesLength : Int
        get() {
            val o = __offset(82); return if (o != 0) __vector_len(o) else 0
        }
    /**
     * Unique identifier of the organization which manufactures the telemetry tracking and command subsystem for this bus.
     * Example: /// Example: TELEMETRYTRACKINGMANUFACTURERORG-ID
     * Constraints: Minimum length = 0, Maximum length = 36
     */
    val telemetryTrackingManufacturerOrgId : String?
        get() {
            val o = __offset(84)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val telemetryTrackingManufacturerOrgIdAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(84, 1)
    fun telemetryTrackingManufacturerOrgIdInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 84, 1)
    /**
     * Unique identifier of the organization which manufactures the main onboard computer for this bus.
     * Example: /// Example: MAINCOMPUTERMANUFACTURERORG-ID
     * Constraints: Minimum length = 0, Maximum length = 36
     */
    val mainComputerManufacturerOrgId : String?
        get() {
            val o = __offset(86)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val mainComputerManufacturerOrgIdAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(86, 1)
    fun mainComputerManufacturerOrgIdInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 86, 1)
    /**
     * Unique identifier of the organization which manufactures this bus.
     * Example: /// Example: MANUFACTURERORG-ID
     * Constraints: Minimum length = 0, Maximum length = 36
     */
    val manufacturerOrgId : String?
        get() {
            val o = __offset(88)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val manufacturerOrgIdAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(88, 1)
    fun manufacturerOrgIdInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 88, 1)
    /**
     * Unique identifier of the organization which designs the bus kit.
     * Example: /// Example: BUSKITDESIGNERORG-ID
     * Constraints: Minimum length = 0, Maximum length = 36
     */
    val busKitDesignerOrgId : String?
        get() {
            val o = __offset(90)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val busKitDesignerOrgIdAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(90, 1)
    fun busKitDesignerOrgIdInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 90, 1)
    /**
     * Country where this bus was manufactured. This value is typically the ISO 3166 Alpha-2 two-character country code, however it can also represent various consortiums that do not appear in the ISO document. The code must correspond to an existing country in the UDL’s country API. Call udl/country/{code} to get any associated FIPS code, ISO Alpha-3 code, or alternate code values that exist for the specified country code.
     * Example: /// Example: US
     * Constraints: Minimum length = 0, Maximum length = 4
     */
    val countryCode : String?
        get() {
            val o = __offset(92)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val countryCodeAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(92, 1)
    fun countryCodeInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 92, 1)
    /**
     * Mass category of this bus (e.g. 1 - 10 kg: Nanosatellite, 10 - 100 kg: Microsatellite, 100 - 500 kg: Minisatellite, 1000 - 2500kg: Medium satellite, etc.).
     * Example: /// Example: Nanosatellite
     * Constraints: Minimum length = 0, Maximum length = 64
     */
    val massCategory : String?
        get() {
            val o = __offset(94)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val massCategoryAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(94, 1)
    fun massCategoryInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 94, 1)
    /**
     * Power category of this bus (e.g. 0-1kW low power, etc).
     * Example: /// Example: low power
     * Constraints: Minimum length = 0, Maximum length = 64
     */
    val powerCategory : String?
        get() {
            val o = __offset(96)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val powerCategoryAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(96, 1)
    fun powerCategoryInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 96, 1)
    /**
     * Boolean indicating if this bus is generic.
     * Example: /// Example: False
     * Constraints: No constraints specified.
     */
    val generic : Boolean
        get() {
            val o = __offset(98)
            return if(o != 0) 0.toByte() != bb.get(o + bb_pos) else false
        }
    /**
     * Notes/description of the bus.
     * Example: /// Example: Dedicated small spacecraft bus.
     * Constraints: Minimum length = 0, Maximum length = 128
     */
    val description : String?
        get() {
            val o = __offset(100)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val descriptionAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(100, 1)
    fun descriptionInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 100, 1)
    /**
     * Attitude and Orbital Control Notes/description for the bus.
     * Example: /// Example: Example notes
     * Constraints: Minimum length = 0, Maximum length = 256
     */
    val aocsNotes : String?
        get() {
            val o = __offset(102)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val aocsNotesAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(102, 1)
    fun aocsNotesInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 102, 1)
    /**
     * Source of the data.
     * Example: /// Example: Bluestaq
     * Constraints: Minimum length = 1, Maximum length = 64
     */
    val source : String?
        get() {
            val o = __offset(104)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val sourceAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(104, 1)
    fun sourceInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 104, 1)
    /**
     * Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
     * Example: /// Example: THIRD_PARTY_DATASOURCE
     * Constraints: Minimum length = 0, Maximum length = 64
     */
    val origin : String?
        get() {
            val o = __offset(106)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val originAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(106, 1)
    fun originInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 106, 1)
    /**
     * The originating source network on which this record was created, auto-populated by the system.
     * Example: /// Example: ORIG
     * Constraints: Minimum length = 1, Maximum length = 32
     */
    val origNetwork : String?
        get() {
            val o = __offset(108)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val origNetworkAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(108, 1)
    fun origNetworkInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 108, 1)
    /**
     * Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
     * EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
     * REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
     * SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
     * TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
     * Example: /// Example: TEST
     * Constraints: Minimum length = 1, Maximum length = 32
     */
    val dataMode : Byte
        get() {
            val o = __offset(110)
            return if(o != 0) bb.get(o + bb_pos) else 0
        }
    /**
     * Time the row was created in the database, auto-populated by the system.
     * Example: /// Example: 2018-01-01T16:00:00.123Z
     * Constraints: No constraints specified.
     */
    val createdAt : String?
        get() {
            val o = __offset(112)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val createdAtAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(112, 1)
    fun createdAtInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 112, 1)
    /**
     * Application user who created the row in the database, auto-populated by the system.
     * Example: /// Example: some.user
     * Constraints: Minimum length = 1, Maximum length = 64
     */
    val createdBy : String?
        get() {
            val o = __offset(114)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val createdByAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(114, 1)
    fun createdByInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 114, 1)
    /**
     * No description provided.
     * Example: /// Example: No example provided.
     * Constraints: No constraints specified.
     */
    val entity : String?
        get() {
            val o = __offset(116)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val entityAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(116, 1)
    fun entityInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 116, 1)
    companion object {
        fun validateVersion() = Constants.FLATBUFFERS_24_3_25()
        fun getRootAsBus_Ingest(_bb: ByteBuffer): Bus_Ingest = getRootAsBus_Ingest(_bb, Bus_Ingest())
        fun getRootAsBus_Ingest(_bb: ByteBuffer, obj: Bus_Ingest): Bus_Ingest {
            _bb.order(ByteOrder.LITTLE_ENDIAN)
            return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb))
        }
        fun Bus_IngestBufferHasIdentifier(_bb: ByteBuffer) : Boolean = __has_identifier(_bb, "BUSI")
        fun createBus_Ingest(builder: FlatBufferBuilder, idOffset: Int, nameOffset: Int, classificationMarkingOffset: Int, idEntityOffset: Int, typeOffset: Int, maxLaunchMassLower: Double, maxLaunchMassUpper: Double, maxBolstationMass: Double, avgPayloadMass: Double, maxPayloadMass: Double, minDryMass: Double, avgDryMass: Double, medianDryMass: Double, maxDryMass: Double, minWetMass: Double, avgWetMass: Double, medianWetMass: Double, maxWetMass: Double, maxBolpowerLower: Double, maxBolpowerUpper: Double, maxEolpowerLower: Double, maxEolpowerUpper: Double, avgSpacecraftPower: Double, maxSpacecraftPower: Double, oapSpacecraftPower: Double, avgPayloadPower: Double, maxPayloadPower: Double, oapPayloadPower: Double, bodyDimensionX: Double, bodyDimensionY: Double, bodyDimensionZ: Double, payloadDimensionX: Double, payloadDimensionY: Double, payloadDimensionZ: Double, payloadVolume: Double, launchEnvelopeDimensionX: Double, launchEnvelopeDimensionY: Double, launchEnvelopeDimensionZ: Double, numOrbitType: Int, orbitTypesOffset: Int, telemetryTrackingManufacturerOrgIdOffset: Int, mainComputerManufacturerOrgIdOffset: Int, manufacturerOrgIdOffset: Int, busKitDesignerOrgIdOffset: Int, countryCodeOffset: Int, massCategoryOffset: Int, powerCategoryOffset: Int, generic: Boolean, descriptionOffset: Int, aocsNotesOffset: Int, sourceOffset: Int, originOffset: Int, origNetworkOffset: Int, dataMode: Byte, createdAtOffset: Int, createdByOffset: Int, entityOffset: Int) : Int {
            builder.startTable(57)
            addLaunchEnvelopeDimensionZ(builder, launchEnvelopeDimensionZ)
            addLaunchEnvelopeDimensionY(builder, launchEnvelopeDimensionY)
            addLaunchEnvelopeDimensionX(builder, launchEnvelopeDimensionX)
            addPayloadVolume(builder, payloadVolume)
            addPayloadDimensionZ(builder, payloadDimensionZ)
            addPayloadDimensionY(builder, payloadDimensionY)
            addPayloadDimensionX(builder, payloadDimensionX)
            addBodyDimensionZ(builder, bodyDimensionZ)
            addBodyDimensionY(builder, bodyDimensionY)
            addBodyDimensionX(builder, bodyDimensionX)
            addOapPayloadPower(builder, oapPayloadPower)
            addMaxPayloadPower(builder, maxPayloadPower)
            addAvgPayloadPower(builder, avgPayloadPower)
            addOapSpacecraftPower(builder, oapSpacecraftPower)
            addMaxSpacecraftPower(builder, maxSpacecraftPower)
            addAvgSpacecraftPower(builder, avgSpacecraftPower)
            addMaxEOLPowerUpper(builder, maxEolpowerUpper)
            addMaxEOLPowerLower(builder, maxEolpowerLower)
            addMaxBOLPowerUpper(builder, maxBolpowerUpper)
            addMaxBOLPowerLower(builder, maxBolpowerLower)
            addMaxWetMass(builder, maxWetMass)
            addMedianWetMass(builder, medianWetMass)
            addAvgWetMass(builder, avgWetMass)
            addMinWetMass(builder, minWetMass)
            addMaxDryMass(builder, maxDryMass)
            addMedianDryMass(builder, medianDryMass)
            addAvgDryMass(builder, avgDryMass)
            addMinDryMass(builder, minDryMass)
            addMaxPayloadMass(builder, maxPayloadMass)
            addAvgPayloadMass(builder, avgPayloadMass)
            addMaxBOLStationMass(builder, maxBolstationMass)
            addMaxLaunchMassUpper(builder, maxLaunchMassUpper)
            addMaxLaunchMassLower(builder, maxLaunchMassLower)
            addEntity(builder, entityOffset)
            addCreatedBy(builder, createdByOffset)
            addCreatedAt(builder, createdAtOffset)
            addOrigNetwork(builder, origNetworkOffset)
            addOrigin(builder, originOffset)
            addSource(builder, sourceOffset)
            addAocsNotes(builder, aocsNotesOffset)
            addDescription(builder, descriptionOffset)
            addPowerCategory(builder, powerCategoryOffset)
            addMassCategory(builder, massCategoryOffset)
            addCountryCode(builder, countryCodeOffset)
            addBusKitDesignerOrgId(builder, busKitDesignerOrgIdOffset)
            addManufacturerOrgId(builder, manufacturerOrgIdOffset)
            addMainComputerManufacturerOrgId(builder, mainComputerManufacturerOrgIdOffset)
            addTelemetryTrackingManufacturerOrgId(builder, telemetryTrackingManufacturerOrgIdOffset)
            addOrbitTypes(builder, orbitTypesOffset)
            addNumOrbitType(builder, numOrbitType)
            addType(builder, typeOffset)
            addIdEntity(builder, idEntityOffset)
            addClassificationMarking(builder, classificationMarkingOffset)
            addName(builder, nameOffset)
            addId(builder, idOffset)
            addDataMode(builder, dataMode)
            addGeneric(builder, generic)
            return endBus_Ingest(builder)
        }
        fun startBus_Ingest(builder: FlatBufferBuilder) = builder.startTable(57)
        fun addId(builder: FlatBufferBuilder, id: Int) = builder.addOffset(0, id, 0)
        fun addName(builder: FlatBufferBuilder, name: Int) = builder.addOffset(1, name, 0)
        fun addClassificationMarking(builder: FlatBufferBuilder, classificationMarking: Int) = builder.addOffset(2, classificationMarking, 0)
        fun addIdEntity(builder: FlatBufferBuilder, idEntity: Int) = builder.addOffset(3, idEntity, 0)
        fun addType(builder: FlatBufferBuilder, type: Int) = builder.addOffset(4, type, 0)
        fun addMaxLaunchMassLower(builder: FlatBufferBuilder, maxLaunchMassLower: Double) = builder.addDouble(5, maxLaunchMassLower, 0.0)
        fun addMaxLaunchMassUpper(builder: FlatBufferBuilder, maxLaunchMassUpper: Double) = builder.addDouble(6, maxLaunchMassUpper, 0.0)
        fun addMaxBOLStationMass(builder: FlatBufferBuilder, maxBolstationMass: Double) = builder.addDouble(7, maxBolstationMass, 0.0)
        fun addAvgPayloadMass(builder: FlatBufferBuilder, avgPayloadMass: Double) = builder.addDouble(8, avgPayloadMass, 0.0)
        fun addMaxPayloadMass(builder: FlatBufferBuilder, maxPayloadMass: Double) = builder.addDouble(9, maxPayloadMass, 0.0)
        fun addMinDryMass(builder: FlatBufferBuilder, minDryMass: Double) = builder.addDouble(10, minDryMass, 0.0)
        fun addAvgDryMass(builder: FlatBufferBuilder, avgDryMass: Double) = builder.addDouble(11, avgDryMass, 0.0)
        fun addMedianDryMass(builder: FlatBufferBuilder, medianDryMass: Double) = builder.addDouble(12, medianDryMass, 0.0)
        fun addMaxDryMass(builder: FlatBufferBuilder, maxDryMass: Double) = builder.addDouble(13, maxDryMass, 0.0)
        fun addMinWetMass(builder: FlatBufferBuilder, minWetMass: Double) = builder.addDouble(14, minWetMass, 0.0)
        fun addAvgWetMass(builder: FlatBufferBuilder, avgWetMass: Double) = builder.addDouble(15, avgWetMass, 0.0)
        fun addMedianWetMass(builder: FlatBufferBuilder, medianWetMass: Double) = builder.addDouble(16, medianWetMass, 0.0)
        fun addMaxWetMass(builder: FlatBufferBuilder, maxWetMass: Double) = builder.addDouble(17, maxWetMass, 0.0)
        fun addMaxBOLPowerLower(builder: FlatBufferBuilder, maxBolpowerLower: Double) = builder.addDouble(18, maxBolpowerLower, 0.0)
        fun addMaxBOLPowerUpper(builder: FlatBufferBuilder, maxBolpowerUpper: Double) = builder.addDouble(19, maxBolpowerUpper, 0.0)
        fun addMaxEOLPowerLower(builder: FlatBufferBuilder, maxEolpowerLower: Double) = builder.addDouble(20, maxEolpowerLower, 0.0)
        fun addMaxEOLPowerUpper(builder: FlatBufferBuilder, maxEolpowerUpper: Double) = builder.addDouble(21, maxEolpowerUpper, 0.0)
        fun addAvgSpacecraftPower(builder: FlatBufferBuilder, avgSpacecraftPower: Double) = builder.addDouble(22, avgSpacecraftPower, 0.0)
        fun addMaxSpacecraftPower(builder: FlatBufferBuilder, maxSpacecraftPower: Double) = builder.addDouble(23, maxSpacecraftPower, 0.0)
        fun addOapSpacecraftPower(builder: FlatBufferBuilder, oapSpacecraftPower: Double) = builder.addDouble(24, oapSpacecraftPower, 0.0)
        fun addAvgPayloadPower(builder: FlatBufferBuilder, avgPayloadPower: Double) = builder.addDouble(25, avgPayloadPower, 0.0)
        fun addMaxPayloadPower(builder: FlatBufferBuilder, maxPayloadPower: Double) = builder.addDouble(26, maxPayloadPower, 0.0)
        fun addOapPayloadPower(builder: FlatBufferBuilder, oapPayloadPower: Double) = builder.addDouble(27, oapPayloadPower, 0.0)
        fun addBodyDimensionX(builder: FlatBufferBuilder, bodyDimensionX: Double) = builder.addDouble(28, bodyDimensionX, 0.0)
        fun addBodyDimensionY(builder: FlatBufferBuilder, bodyDimensionY: Double) = builder.addDouble(29, bodyDimensionY, 0.0)
        fun addBodyDimensionZ(builder: FlatBufferBuilder, bodyDimensionZ: Double) = builder.addDouble(30, bodyDimensionZ, 0.0)
        fun addPayloadDimensionX(builder: FlatBufferBuilder, payloadDimensionX: Double) = builder.addDouble(31, payloadDimensionX, 0.0)
        fun addPayloadDimensionY(builder: FlatBufferBuilder, payloadDimensionY: Double) = builder.addDouble(32, payloadDimensionY, 0.0)
        fun addPayloadDimensionZ(builder: FlatBufferBuilder, payloadDimensionZ: Double) = builder.addDouble(33, payloadDimensionZ, 0.0)
        fun addPayloadVolume(builder: FlatBufferBuilder, payloadVolume: Double) = builder.addDouble(34, payloadVolume, 0.0)
        fun addLaunchEnvelopeDimensionX(builder: FlatBufferBuilder, launchEnvelopeDimensionX: Double) = builder.addDouble(35, launchEnvelopeDimensionX, 0.0)
        fun addLaunchEnvelopeDimensionY(builder: FlatBufferBuilder, launchEnvelopeDimensionY: Double) = builder.addDouble(36, launchEnvelopeDimensionY, 0.0)
        fun addLaunchEnvelopeDimensionZ(builder: FlatBufferBuilder, launchEnvelopeDimensionZ: Double) = builder.addDouble(37, launchEnvelopeDimensionZ, 0.0)
        fun addNumOrbitType(builder: FlatBufferBuilder, numOrbitType: Int) = builder.addInt(38, numOrbitType, 0)
        fun addOrbitTypes(builder: FlatBufferBuilder, orbitTypes: Int) = builder.addOffset(39, orbitTypes, 0)
        fun createOrbitTypesVector(builder: FlatBufferBuilder, data: IntArray) : Int {
            builder.startVector(4, data.size, 4)
            for (i in data.size - 1 downTo 0) {
                builder.addOffset(data[i])
            }
            return builder.endVector()
        }
        fun startOrbitTypesVector(builder: FlatBufferBuilder, numElems: Int) = builder.startVector(4, numElems, 4)
        fun addTelemetryTrackingManufacturerOrgId(builder: FlatBufferBuilder, telemetryTrackingManufacturerOrgId: Int) = builder.addOffset(40, telemetryTrackingManufacturerOrgId, 0)
        fun addMainComputerManufacturerOrgId(builder: FlatBufferBuilder, mainComputerManufacturerOrgId: Int) = builder.addOffset(41, mainComputerManufacturerOrgId, 0)
        fun addManufacturerOrgId(builder: FlatBufferBuilder, manufacturerOrgId: Int) = builder.addOffset(42, manufacturerOrgId, 0)
        fun addBusKitDesignerOrgId(builder: FlatBufferBuilder, busKitDesignerOrgId: Int) = builder.addOffset(43, busKitDesignerOrgId, 0)
        fun addCountryCode(builder: FlatBufferBuilder, countryCode: Int) = builder.addOffset(44, countryCode, 0)
        fun addMassCategory(builder: FlatBufferBuilder, massCategory: Int) = builder.addOffset(45, massCategory, 0)
        fun addPowerCategory(builder: FlatBufferBuilder, powerCategory: Int) = builder.addOffset(46, powerCategory, 0)
        fun addGeneric(builder: FlatBufferBuilder, generic: Boolean) = builder.addBoolean(47, generic, false)
        fun addDescription(builder: FlatBufferBuilder, description: Int) = builder.addOffset(48, description, 0)
        fun addAocsNotes(builder: FlatBufferBuilder, aocsNotes: Int) = builder.addOffset(49, aocsNotes, 0)
        fun addSource(builder: FlatBufferBuilder, source: Int) = builder.addOffset(50, source, 0)
        fun addOrigin(builder: FlatBufferBuilder, origin: Int) = builder.addOffset(51, origin, 0)
        fun addOrigNetwork(builder: FlatBufferBuilder, origNetwork: Int) = builder.addOffset(52, origNetwork, 0)
        fun addDataMode(builder: FlatBufferBuilder, dataMode: Byte) = builder.addByte(53, dataMode, 0)
        fun addCreatedAt(builder: FlatBufferBuilder, createdAt: Int) = builder.addOffset(54, createdAt, 0)
        fun addCreatedBy(builder: FlatBufferBuilder, createdBy: Int) = builder.addOffset(55, createdBy, 0)
        fun addEntity(builder: FlatBufferBuilder, entity: Int) = builder.addOffset(56, entity, 0)
        fun endBus_Ingest(builder: FlatBufferBuilder) : Int {
            val o = builder.endTable()
            return o
        }
        fun finishBusIngestBuffer(builder: FlatBufferBuilder, offset: Int) = builder.finish(offset, "BUSI")
        fun finishSizePrefixedBus_IngestBuffer(builder: FlatBufferBuilder, offset: Int) = builder.finishSizePrefixed(offset, "BUSI")
    }
}
