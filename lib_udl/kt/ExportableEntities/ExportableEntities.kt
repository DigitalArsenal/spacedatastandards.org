// automatically generated by the FlatBuffers compiler, do not modify

import com.google.flatbuffers.BaseVector
import com.google.flatbuffers.BooleanVector
import com.google.flatbuffers.ByteVector
import com.google.flatbuffers.Constants
import com.google.flatbuffers.DoubleVector
import com.google.flatbuffers.FlatBufferBuilder
import com.google.flatbuffers.FloatVector
import com.google.flatbuffers.LongVector
import com.google.flatbuffers.StringVector
import com.google.flatbuffers.Struct
import com.google.flatbuffers.Table
import com.google.flatbuffers.UnionVector
import java.nio.ByteBuffer
import java.nio.ByteOrder
import kotlin.math.sign

/**
 * /// No description available.
 */
@Suppress("unused")
class ExportableEntities : Table() {

    fun __init(_i: Int, _bb: ByteBuffer)  {
        __reset(_i, _bb)
    }
    fun __assign(_i: Int, _bb: ByteBuffer) : ExportableEntities {
        __init(_i, _bb)
        return this
    }
    companion object {
        fun validateVersion() = Constants.FLATBUFFERS_24_3_25()
        fun getRootAsExportableEntities(_bb: ByteBuffer): ExportableEntities = getRootAsExportableEntities(_bb, ExportableEntities())
        fun getRootAsExportableEntities(_bb: ByteBuffer, obj: ExportableEntities): ExportableEntities {
            _bb.order(ByteOrder.LITTLE_ENDIAN)
            return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb))
        }
        fun ExportableEntitiesBufferHasIdentifier(_bb: ByteBuffer) : Boolean = __has_identifier(_bb, "EXPO")
        fun startExportableEntities(builder: FlatBufferBuilder) = builder.startTable(0)
        fun endExportableEntities(builder: FlatBufferBuilder) : Int {
            val o = builder.endTable()
            return o
        }
        fun finishExportableEntitiesBuffer(builder: FlatBufferBuilder, offset: Int) = builder.finish(offset, "EXPO")
        fun finishSizePrefixedExportableEntitiesBuffer(builder: FlatBufferBuilder, offset: Int) = builder.finishSizePrefixed(offset, "EXPO")
    }
}
