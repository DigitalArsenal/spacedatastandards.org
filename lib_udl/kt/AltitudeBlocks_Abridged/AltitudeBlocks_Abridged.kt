// automatically generated by the FlatBuffers compiler, do not modify

import com.google.flatbuffers.BaseVector
import com.google.flatbuffers.BooleanVector
import com.google.flatbuffers.ByteVector
import com.google.flatbuffers.Constants
import com.google.flatbuffers.DoubleVector
import com.google.flatbuffers.FlatBufferBuilder
import com.google.flatbuffers.FloatVector
import com.google.flatbuffers.LongVector
import com.google.flatbuffers.StringVector
import com.google.flatbuffers.Struct
import com.google.flatbuffers.Table
import com.google.flatbuffers.UnionVector
import java.nio.ByteBuffer
import java.nio.ByteOrder
import kotlin.math.sign

/**
 * /// Minimum and maximum altitude bounds for the track.
 */
@Suppress("unused")
class AltitudeBlocks_Abridged : Table() {

    fun __init(_i: Int, _bb: ByteBuffer)  {
        __reset(_i, _bb)
    }
    fun __assign(_i: Int, _bb: ByteBuffer) : AltitudeBlocks_Abridged {
        __init(_i, _bb)
        return this
    }
    /**
     * Sequencing field for the altitude block.
     * Example: /// Example: A1
     * Constraints: Minimum length = 0, Maximum length = 24
     */
    val altitudeSequenceId : String?
        get() {
            val o = __offset(4)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val altitudeSequenceIdAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(4, 1)
    fun altitudeSequenceIdInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 4, 1)
    /**
     * Lowest altitude of the track route altitude block above mean sea level in feet.
     * Example: /// Example: 27000.1
     * Constraints: No constraints specified.
     */
    val lowerAltitude : Double
        get() {
            val o = __offset(6)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Highest altitude of the track route altitude block above mean sea level in feet.
     * Example: /// Example: 27200.5
     * Constraints: No constraints specified.
     */
    val upperAltitude : Double
        get() {
            val o = __offset(8)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    companion object {
        fun validateVersion() = Constants.FLATBUFFERS_24_3_25()
        fun getRootAsAltitudeBlocks_Abridged(_bb: ByteBuffer): AltitudeBlocks_Abridged = getRootAsAltitudeBlocks_Abridged(_bb, AltitudeBlocks_Abridged())
        fun getRootAsAltitudeBlocks_Abridged(_bb: ByteBuffer, obj: AltitudeBlocks_Abridged): AltitudeBlocks_Abridged {
            _bb.order(ByteOrder.LITTLE_ENDIAN)
            return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb))
        }
        fun AltitudeBlocks_AbridgedBufferHasIdentifier(_bb: ByteBuffer) : Boolean = __has_identifier(_bb, "ALTI")
        fun createAltitudeBlocks_Abridged(builder: FlatBufferBuilder, altitudeSequenceIdOffset: Int, lowerAltitude: Double, upperAltitude: Double) : Int {
            builder.startTable(3)
            addUpperAltitude(builder, upperAltitude)
            addLowerAltitude(builder, lowerAltitude)
            addAltitudeSequenceId(builder, altitudeSequenceIdOffset)
            return endAltitudeBlocks_Abridged(builder)
        }
        fun startAltitudeBlocks_Abridged(builder: FlatBufferBuilder) = builder.startTable(3)
        fun addAltitudeSequenceId(builder: FlatBufferBuilder, altitudeSequenceId: Int) = builder.addOffset(0, altitudeSequenceId, 0)
        fun addLowerAltitude(builder: FlatBufferBuilder, lowerAltitude: Double) = builder.addDouble(1, lowerAltitude, 0.0)
        fun addUpperAltitude(builder: FlatBufferBuilder, upperAltitude: Double) = builder.addDouble(2, upperAltitude, 0.0)
        fun endAltitudeBlocks_Abridged(builder: FlatBufferBuilder) : Int {
            val o = builder.endTable()
            return o
        }
        fun finishAltitudeBlocksAbridgedBuffer(builder: FlatBufferBuilder, offset: Int) = builder.finish(offset, "ALTI")
        fun finishSizePrefixedAltitudeBlocks_AbridgedBuffer(builder: FlatBufferBuilder, offset: Int) = builder.finishSizePrefixed(offset, "ALTI")
    }
}
