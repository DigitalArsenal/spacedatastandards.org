// automatically generated by the FlatBuffers compiler, do not modify

import com.google.flatbuffers.BaseVector
import com.google.flatbuffers.BooleanVector
import com.google.flatbuffers.ByteVector
import com.google.flatbuffers.Constants
import com.google.flatbuffers.DoubleVector
import com.google.flatbuffers.FlatBufferBuilder
import com.google.flatbuffers.FloatVector
import com.google.flatbuffers.LongVector
import com.google.flatbuffers.StringVector
import com.google.flatbuffers.Struct
import com.google.flatbuffers.Table
import com.google.flatbuffers.UnionVector
import java.nio.ByteBuffer
import java.nio.ByteOrder
import kotlin.math.sign

/**
 * /// Coefficients to describe either the E, F1, and bottomside F2 profile shapes or the height uncertainty boundaries.
 */
@Suppress("unused")
class IonoObservationDensityProfileShiftedChebyshev_Full : Table() {

    fun __init(_i: Int, _bb: ByteBuffer)  {
        __reset(_i, _bb)
    }
    fun __assign(_i: Int, _bb: ByteBuffer) : IonoObservationDensityProfileShiftedChebyshev_Full {
        __init(_i, _bb)
        return this
    }
    /**
     * Description of the computation technique.
     * Example: /// Example: Best-fit Huang-Reinisch formalism based on shifted Chebyshev expansion.
     * Constraints: No constraints specified.
     */
    val description : String?
        get() {
            val o = __offset(4)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val descriptionAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(4, 1)
    fun descriptionInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 4, 1)
    /**
     * Up to 3 groups of coefficients, using “shiftedChebyshev” sub-field, to describe E, F1, and bottomside F2 profile shapes, or up to 6 groups of coefficients to describe height uncertainty boundaries (upper and lower).
     * Example: /// Example: No example provided.
     * Constraints: No constraints specified.
     */
    fun shiftedChebyshevs(j: Int) : String? {
        val o = __offset(6)
        return if (o != 0) {
            __string(__vector(o) + j * 4)
        } else {
            null
        }
    }
    val shiftedChebyshevsLength : Int
        get() {
            val o = __offset(6); return if (o != 0) __vector_len(o) else 0
        }
    companion object {
        fun validateVersion() = Constants.FLATBUFFERS_24_3_25()
        fun getRootAsIonoObservationDensityProfileShiftedChebyshev_Full(_bb: ByteBuffer): IonoObservationDensityProfileShiftedChebyshev_Full = getRootAsIonoObservationDensityProfileShiftedChebyshev_Full(_bb, IonoObservationDensityProfileShiftedChebyshev_Full())
        fun getRootAsIonoObservationDensityProfileShiftedChebyshev_Full(_bb: ByteBuffer, obj: IonoObservationDensityProfileShiftedChebyshev_Full): IonoObservationDensityProfileShiftedChebyshev_Full {
            _bb.order(ByteOrder.LITTLE_ENDIAN)
            return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb))
        }
        fun IonoObservationDensityProfileShiftedChebyshev_FullBufferHasIdentifier(_bb: ByteBuffer) : Boolean = __has_identifier(_bb, "IONO")
        fun createIonoObservationDensityProfileShiftedChebyshev_Full(builder: FlatBufferBuilder, descriptionOffset: Int, shiftedChebyshevsOffset: Int) : Int {
            builder.startTable(2)
            addShiftedChebyshevs(builder, shiftedChebyshevsOffset)
            addDescription(builder, descriptionOffset)
            return endIonoObservationDensityProfileShiftedChebyshev_Full(builder)
        }
        fun startIonoObservationDensityProfileShiftedChebyshev_Full(builder: FlatBufferBuilder) = builder.startTable(2)
        fun addDescription(builder: FlatBufferBuilder, description: Int) = builder.addOffset(0, description, 0)
        fun addShiftedChebyshevs(builder: FlatBufferBuilder, shiftedChebyshevs: Int) = builder.addOffset(1, shiftedChebyshevs, 0)
        fun createShiftedChebyshevsVector(builder: FlatBufferBuilder, data: IntArray) : Int {
            builder.startVector(4, data.size, 4)
            for (i in data.size - 1 downTo 0) {
                builder.addOffset(data[i])
            }
            return builder.endVector()
        }
        fun startShiftedChebyshevsVector(builder: FlatBufferBuilder, numElems: Int) = builder.startVector(4, numElems, 4)
        fun endIonoObservationDensityProfileShiftedChebyshev_Full(builder: FlatBufferBuilder) : Int {
            val o = builder.endTable()
            return o
        }
        fun finishIonoObservationDensityProfileShiftedChebyshevFullBuffer(builder: FlatBufferBuilder, offset: Int) = builder.finish(offset, "IONO")
        fun finishSizePrefixedIonoObservationDensityProfileShiftedChebyshev_FullBuffer(builder: FlatBufferBuilder, offset: Int) = builder.finishSizePrefixed(offset, "IONO")
    }
}
