// automatically generated by the FlatBuffers compiler, do not modify

import com.google.flatbuffers.BaseVector
import com.google.flatbuffers.BooleanVector
import com.google.flatbuffers.ByteVector
import com.google.flatbuffers.Constants
import com.google.flatbuffers.DoubleVector
import com.google.flatbuffers.FlatBufferBuilder
import com.google.flatbuffers.FloatVector
import com.google.flatbuffers.LongVector
import com.google.flatbuffers.StringVector
import com.google.flatbuffers.Struct
import com.google.flatbuffers.Table
import com.google.flatbuffers.UnionVector
import java.nio.ByteBuffer
import java.nio.ByteOrder
import kotlin.math.sign

/**
 * /// Collection of waypoints associated with this flight plan.
 */
@Suppress("unused")
class FlightPlanWaypoints_Abridged : Table() {

    fun __init(_i: Int, _bb: ByteBuffer)  {
        __reset(_i, _bb)
    }
    fun __assign(_i: Int, _bb: ByteBuffer) : FlightPlanWaypoints_Abridged {
        __init(_i, _bb)
        return this
    }
    /**
     * Points are designated by type as either a comment point or a waypoint. A comment point conveys important information about the point for pilots but is not entered into a flight management system. A waypoint is a point that is entered into a flight management system and/or filed with Air Traffic Control.
     * Example: /// Example: COMMENT
     * Constraints: Minimum length = 1, Maximum length = 16
     */
    val type : String?
        get() {
            val o = __offset(4)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val typeAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(4, 1)
    fun typeInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 4, 1)
    /**
     * Name of the point. The name of a comment point identifies important information about that point, e.g. Top of Climb. The name of a waypoint identifies the location of that point.
     * Example: /// Example: KCHS
     * Constraints: Minimum length = 1, Maximum length = 32
     */
    val waypointName : String?
        get() {
            val o = __offset(6)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val waypointNameAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(6, 1)
    fun waypointNameInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 6, 1)
    /**
     * The waypoint number on the route. Comment points do not get a waypoint number.
     * Example: /// Example: 20
     * Constraints: No constraints specified.
     */
    val waypointNum : Int
        get() {
            val o = __offset(8)
            return if(o != 0) bb.getInt(o + bb_pos) else 0
        }
    /**
     * The flight path flown for this leg.
     * Example: /// Example: W15
     * Constraints: Minimum length = 0, Maximum length = 16
     */
    val airway : String?
        get() {
            val o = __offset(10)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val airwayAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(10, 1)
    fun airwayInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 10, 1)
    /**
     * Point identifying an air refueling track/anchor or fixed track.
     * Example: /// Example: ARIP
     * Constraints: Minimum length = 0, Maximum length = 16
     */
    val arpt : String?
        get() {
            val o = __offset(12)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val arptAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(12, 1)
    fun arptInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 12, 1)
    /**
     * WGS84 latitude of the point location, in degrees. -90 to 90 degrees (negative values south of equator).
     * Example: /// Example: 45.23
     * Constraints: No constraints specified.
     */
    val lat : Double
        get() {
            val o = __offset(14)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * WGS84 longitude of the point location, in degrees. -180 to 180 degrees (negative values west of Prime Meridian).
     * Example: /// Example: 179.1
     * Constraints: No constraints specified.
     */
    val lon : Double
        get() {
            val o = __offset(16)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * The ID of the air refueling track/anchor or fixed track.
     * Example: /// Example: AR202
     * Constraints: Minimum length = 0, Maximum length = 16
     */
    val arId : String?
        get() {
            val o = __offset(18)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val arIdAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(18, 1)
    fun arIdInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 18, 1)
    /**
     * Navigational Aid (NAVAID) identification code.
     * Example: /// Example: HTO
     * Constraints: Minimum length = 0, Maximum length = 16
     */
    val navaid : String?
        get() {
            val o = __offset(20)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val navaidAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(20, 1)
    fun navaidInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 20, 1)
    /**
     * Tactical Air Navigation (TACAN) channel for the Navigational Aid (NAVAID).
     * Example: /// Example: 83X
     * Constraints: Minimum length = 0, Maximum length = 16
     */
    val tacanChannel : String?
        get() {
            val o = __offset(22)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val tacanChannelAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(22, 1)
    fun tacanChannelInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 22, 1)
    /**
     * VHF Omni-directional Range (VOR) frequency for the Navigational Aid (NAVAID) in megahertz.
     * Example: /// Example: 113.6
     * Constraints: No constraints specified.
     */
    val vorFreq : Double
        get() {
            val o = __offset(24)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * The turbulence intensity classification for this flight (LIGHT, MODERATE, etc).
     * Example: /// Example: EXTREME
     * Constraints: Minimum length = 0, Maximum length = 16
     */
    val turbCat : String?
        get() {
            val o = __offset(26)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val turbCatAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(26, 1)
    fun turbCatInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 26, 1)
    /**
     * The icing intensity classification for this flight (LIGHT, MODERATE, etc).
     * Example: /// Example: MODERATE
     * Constraints: Minimum length = 0, Maximum length = 16
     */
    val iceCat : String?
        get() {
            val o = __offset(28)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val iceCatAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(28, 1)
    fun iceCatInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 28, 1)
    /**
     * The thunderstorm intensity classification for this flight (LIGHT, MODERATE, etc).
     * Example: /// Example: MODERATE
     * Constraints: Minimum length = 0, Maximum length = 16
     */
    val thunderCat : String?
        get() {
            val o = __offset(30)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val thunderCatAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(30, 1)
    fun thunderCatInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 30, 1)
    /**
     * Altitude of a level, point, or object measured in feet above mean sea level.
     * Example: /// Example: 27000.1
     * Constraints: No constraints specified.
     */
    val alt : Double
        get() {
            val o = __offset(32)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Average temperature deviation from standard day profile for this leg in degrees Celsius.
     * Example: /// Example: 12.1
     * Constraints: No constraints specified.
     */
    val tempDev : Double
        get() {
            val o = __offset(34)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * The fuel degrade percentage used for this leg.
     * Example: /// Example: 10.1
     * Constraints: No constraints specified.
     */
    val legFuelDegrade : Double
        get() {
            val o = __offset(36)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * The average Mach speed for this leg.
     * Example: /// Example: 0.74
     * Constraints: No constraints specified.
     */
    val legMach : Double
        get() {
            val o = __offset(38)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * The mission index value for this leg. The mission index is the ratio of time-related cost of aircraft operation to the cost of fuel.
     * Example: /// Example: 65
     * Constraints: No constraints specified.
     */
    val legMsnIndex : Double
        get() {
            val o = __offset(40)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * The percent degrade due to drag for this aircraft for this leg.
     * Example: /// Example: 1.2
     * Constraints: No constraints specified.
     */
    val legDragIndex : Double
        get() {
            val o = __offset(42)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * The average calibrated airspeed (CAS) for this leg in knots.
     * Example: /// Example: 200.1
     * Constraints: No constraints specified.
     */
    val avgCalAirspeed : Double
        get() {
            val o = __offset(44)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * The average true airspeed (TAS) for this leg in knots.
     * Example: /// Example: 210.1
     * Constraints: No constraints specified.
     */
    val avgTrueAirspeed : Double
        get() {
            val o = __offset(46)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * The average ground speed for this leg in knots.
     * Example: /// Example: 300.1
     * Constraints: No constraints specified.
     */
    val avgGroundSpeed : Double
        get() {
            val o = __offset(48)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * The primary UHF radio frequency used for the air refueling track or anchor in megahertz.
     * Example: /// Example: 357.5
     * Constraints: No constraints specified.
     */
    val priFreq : Double
        get() {
            val o = __offset(50)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * The wind direction at this specific point in degrees from true north.
     * Example: /// Example: 165.5
     * Constraints: No constraints specified.
     */
    val pointWindDir : Double
        get() {
            val o = __offset(52)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * The wind velocity at this specific point in knots.
     * Example: /// Example: 14.4
     * Constraints: No constraints specified.
     */
    val pointWindSpeed : Double
        get() {
            val o = __offset(54)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * The average wind direction for this leg in degrees from true north.
     * Example: /// Example: 165.5
     * Constraints: No constraints specified.
     */
    val avgWindDir : Double
        get() {
            val o = __offset(56)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * The average wind speed for this leg in knots.
     * Example: /// Example: 14.4
     * Constraints: No constraints specified.
     */
    val avgWindSpeed : Double
        get() {
            val o = __offset(58)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * The wind factor for this leg in knots. A positive value indicates a headwind, while a negative value indicates a tailwind.
     * Example: /// Example: -32.1
     * Constraints: No constraints specified.
     */
    val legWindFac : Double
        get() {
            val o = __offset(60)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * The average drift angle for this leg in degrees from true north.
     * Example: /// Example: -3.2
     * Constraints: No constraints specified.
     */
    val avgDriftAng : Double
        get() {
            val o = __offset(62)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * The secondary UHF radio frequency used for the air refueling track or anchor in megahertz.
     * Example: /// Example: 357.5
     * Constraints: No constraints specified.
     */
    val secFreq : Double
        get() {
            val o = __offset(64)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * The magnetic course at leg midpoint in degrees from true north.
     * Example: /// Example: 338.1
     * Constraints: No constraints specified.
     */
    val magCourse : Double
        get() {
            val o = __offset(66)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * The true course at leg midpoint in degrees from true north.
     * Example: /// Example: 328.1
     * Constraints: No constraints specified.
     */
    val trueCourse : Double
        get() {
            val o = __offset(68)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * The magnetic heading at leg midpoint in degrees from true north.
     * Example: /// Example: 212.1
     * Constraints: No constraints specified.
     */
    val magHeading : Double
        get() {
            val o = __offset(70)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * The air-to-air Tactical Air Navigation (TACAN) channels used by the receiver/tanker during air refueling.
     * Example: /// Example: 31/94
     * Constraints: Minimum length = 0, Maximum length = 16
     */
    val aaTacanChannel : String?
        get() {
            val o = __offset(72)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val aaTacanChannelAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(72, 1)
    fun aaTacanChannelInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 72, 1)
    /**
     * The zone/leg distance flown in nautical miles.
     * Example: /// Example: 212.1
     * Constraints: No constraints specified.
     */
    val zoneDistance : Double
        get() {
            val o = __offset(74)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * The total distance flown to this waypoint calculated from point of departure in nautical miles.
     * Example: /// Example: 688.1
     * Constraints: No constraints specified.
     */
    val totalFlownDistance : Double
        get() {
            val o = __offset(76)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * The total distance remaining from this waypoint to the point of arrival in nautical miles.
     * Example: /// Example: 1288.1
     * Constraints: No constraints specified.
     */
    val totalRemDistance : Double
        get() {
            val o = __offset(78)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * The time to fly this zone/leg in minutes.
     * Example: /// Example: 36.1
     * Constraints: No constraints specified.
     */
    val zoneTime : Double
        get() {
            val o = __offset(80)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * The total time accumulated from takeoff to this waypoint expressed as HH:MM.
     * Example: /// Example: 08:45
     * Constraints: Minimum length = 0, Maximum length = 6
     */
    val totalTime : String?
        get() {
            val o = __offset(82)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val totalTimeAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(82, 1)
    fun totalTimeInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 82, 1)
    /**
     * The total time remaining from this waypoint to the point of arrival expressed as HH:MM.
     * Example: /// Example: 01:43
     * Constraints: Minimum length = 0, Maximum length = 6
     */
    val totalTimeRem : String?
        get() {
            val o = __offset(84)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val totalTimeRemAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(84, 1)
    fun totalTimeRemInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 84, 1)
    /**
     * The amount of fuel used on this zone/leg in pounds.
     * Example: /// Example: 1120.1
     * Constraints: No constraints specified.
     */
    val zoneFuel : Double
        get() {
            val o = __offset(86)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * The total fuel used to this waypoint from point of departure in pounds.
     * Example: /// Example: 70431.1
     * Constraints: No constraints specified.
     */
    val totalUsedFuel : Double
        get() {
            val o = __offset(88)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * The total fuel remaining at this waypoint in pounds.
     * Example: /// Example: 30453.1
     * Constraints: No constraints specified.
     */
    val totalRemFuel : Double
        get() {
            val o = __offset(90)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * The amount of fuel onloaded or offloaded at this waypoint in pounds (negative value for offload).
     * Example: /// Example: -30400.1
     * Constraints: No constraints specified.
     */
    val exchangedFuel : Double
        get() {
            val o = __offset(92)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * The air distance of this leg in nautical miles.
     * Example: /// Example: 321.1
     * Constraints: No constraints specified.
     */
    val airDistance : Double
        get() {
            val o = __offset(94)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * The total air distance to this waypoint in nautical miles.
     * Example: /// Example: 3251.1
     * Constraints: No constraints specified.
     */
    val totalAirDistance : Double
        get() {
            val o = __offset(96)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * The total weight of the aircraft at this waypoint in pounds.
     * Example: /// Example: 207123.1
     * Constraints: No constraints specified.
     */
    val totalWeight : Double
        get() {
            val o = __offset(98)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Estimated Time of Arrival (ETA) at this waypoint in ISO 8601 UTC format, with millisecond precision.
     * Example: /// Example: 2023-09-09T01:00:00.123Z
     * Constraints: No constraints specified.
     */
    val eta : String?
        get() {
            val o = __offset(100)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val etaAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(100, 1)
    fun etaInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 100, 1)
    /**
     * Actual Time of Arrival (ATA) at this waypoint in ISO 8601 UTC format, with millisecond precision.
     * Example: /// Example: 2023-09-09T01:00:00.123Z
     * Constraints: No constraints specified.
     */
    val ata : String?
        get() {
            val o = __offset(102)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val ataAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(102, 1)
    fun ataInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 102, 1)
    /**
     * The leg fuel flow in pounds per hour.
     * Example: /// Example: 17654.1
     * Constraints: No constraints specified.
     */
    val fuelFlow : Double
        get() {
            val o = __offset(104)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * The planned alternate leg based on user-defined constraints, International Civil Aviation Organization (ICAO) code preferred.
     * Example: /// Example: KCHS
     * Constraints: Minimum length = 0, Maximum length = 16
     */
    val legAlternate : String?
        get() {
            val o = __offset(106)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val legAlternateAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(106, 1)
    fun legAlternateInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 106, 1)
    /**
     * The magnetic variation for this leg in degrees.
     * Example: /// Example: -13.2
     * Constraints: No constraints specified.
     */
    val magVar : Double
        get() {
            val o = __offset(108)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * The day low level altitude in feet above sea level for the leg ending at this waypoint.
     * Example: /// Example: 1500.1
     * Constraints: No constraints specified.
     */
    val dayLowAlt : Double
        get() {
            val o = __offset(110)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * The night low level altitude in feet above sea level for the leg ending at this waypoint.
     * Example: /// Example: 2300.1
     * Constraints: No constraints specified.
     */
    val nightLowAlt : Double
        get() {
            val o = __offset(112)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * The night vision goggle low level altitude in feet above sea level for the leg ending at this waypoint.
     * Example: /// Example: 2450.1
     * Constraints: No constraints specified.
     */
    val nvgLowAlt : Double
        get() {
            val o = __offset(114)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    companion object {
        fun validateVersion() = Constants.FLATBUFFERS_24_3_25()
        fun getRootAsFlightPlanWaypoints_Abridged(_bb: ByteBuffer): FlightPlanWaypoints_Abridged = getRootAsFlightPlanWaypoints_Abridged(_bb, FlightPlanWaypoints_Abridged())
        fun getRootAsFlightPlanWaypoints_Abridged(_bb: ByteBuffer, obj: FlightPlanWaypoints_Abridged): FlightPlanWaypoints_Abridged {
            _bb.order(ByteOrder.LITTLE_ENDIAN)
            return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb))
        }
        fun FlightPlanWaypoints_AbridgedBufferHasIdentifier(_bb: ByteBuffer) : Boolean = __has_identifier(_bb, "FLIG")
        fun createFlightPlanWaypoints_Abridged(builder: FlatBufferBuilder, typeOffset: Int, waypointNameOffset: Int, waypointNum: Int, airwayOffset: Int, arptOffset: Int, lat: Double, lon: Double, arIdOffset: Int, navaidOffset: Int, tacanChannelOffset: Int, vorFreq: Double, turbCatOffset: Int, iceCatOffset: Int, thunderCatOffset: Int, alt: Double, tempDev: Double, legFuelDegrade: Double, legMach: Double, legMsnIndex: Double, legDragIndex: Double, avgCalAirspeed: Double, avgTrueAirspeed: Double, avgGroundSpeed: Double, priFreq: Double, pointWindDir: Double, pointWindSpeed: Double, avgWindDir: Double, avgWindSpeed: Double, legWindFac: Double, avgDriftAng: Double, secFreq: Double, magCourse: Double, trueCourse: Double, magHeading: Double, aaTacanChannelOffset: Int, zoneDistance: Double, totalFlownDistance: Double, totalRemDistance: Double, zoneTime: Double, totalTimeOffset: Int, totalTimeRemOffset: Int, zoneFuel: Double, totalUsedFuel: Double, totalRemFuel: Double, exchangedFuel: Double, airDistance: Double, totalAirDistance: Double, totalWeight: Double, etaOffset: Int, ataOffset: Int, fuelFlow: Double, legAlternateOffset: Int, magVar: Double, dayLowAlt: Double, nightLowAlt: Double, nvgLowAlt: Double) : Int {
            builder.startTable(56)
            addNvgLowAlt(builder, nvgLowAlt)
            addNightLowAlt(builder, nightLowAlt)
            addDayLowAlt(builder, dayLowAlt)
            addMagVar(builder, magVar)
            addFuelFlow(builder, fuelFlow)
            addTotalWeight(builder, totalWeight)
            addTotalAirDistance(builder, totalAirDistance)
            addAirDistance(builder, airDistance)
            addExchangedFuel(builder, exchangedFuel)
            addTotalRemFuel(builder, totalRemFuel)
            addTotalUsedFuel(builder, totalUsedFuel)
            addZoneFuel(builder, zoneFuel)
            addZoneTime(builder, zoneTime)
            addTotalRemDistance(builder, totalRemDistance)
            addTotalFlownDistance(builder, totalFlownDistance)
            addZoneDistance(builder, zoneDistance)
            addMagHeading(builder, magHeading)
            addTrueCourse(builder, trueCourse)
            addMagCourse(builder, magCourse)
            addSecFreq(builder, secFreq)
            addAvgDriftAng(builder, avgDriftAng)
            addLegWindFac(builder, legWindFac)
            addAvgWindSpeed(builder, avgWindSpeed)
            addAvgWindDir(builder, avgWindDir)
            addPointWindSpeed(builder, pointWindSpeed)
            addPointWindDir(builder, pointWindDir)
            addPriFreq(builder, priFreq)
            addAvgGroundSpeed(builder, avgGroundSpeed)
            addAvgTrueAirspeed(builder, avgTrueAirspeed)
            addAvgCalAirspeed(builder, avgCalAirspeed)
            addLegDragIndex(builder, legDragIndex)
            addLegMsnIndex(builder, legMsnIndex)
            addLegMach(builder, legMach)
            addLegFuelDegrade(builder, legFuelDegrade)
            addTempDev(builder, tempDev)
            addAlt(builder, alt)
            addVorFreq(builder, vorFreq)
            addLon(builder, lon)
            addLat(builder, lat)
            addLegAlternate(builder, legAlternateOffset)
            addAta(builder, ataOffset)
            addEta(builder, etaOffset)
            addTotalTimeRem(builder, totalTimeRemOffset)
            addTotalTime(builder, totalTimeOffset)
            addAaTacanChannel(builder, aaTacanChannelOffset)
            addThunderCat(builder, thunderCatOffset)
            addIceCat(builder, iceCatOffset)
            addTurbCat(builder, turbCatOffset)
            addTacanChannel(builder, tacanChannelOffset)
            addNavaid(builder, navaidOffset)
            addArId(builder, arIdOffset)
            addArpt(builder, arptOffset)
            addAirway(builder, airwayOffset)
            addWaypointNum(builder, waypointNum)
            addWaypointName(builder, waypointNameOffset)
            addType(builder, typeOffset)
            return endFlightPlanWaypoints_Abridged(builder)
        }
        fun startFlightPlanWaypoints_Abridged(builder: FlatBufferBuilder) = builder.startTable(56)
        fun addType(builder: FlatBufferBuilder, type: Int) = builder.addOffset(0, type, 0)
        fun addWaypointName(builder: FlatBufferBuilder, waypointName: Int) = builder.addOffset(1, waypointName, 0)
        fun addWaypointNum(builder: FlatBufferBuilder, waypointNum: Int) = builder.addInt(2, waypointNum, 0)
        fun addAirway(builder: FlatBufferBuilder, airway: Int) = builder.addOffset(3, airway, 0)
        fun addArpt(builder: FlatBufferBuilder, arpt: Int) = builder.addOffset(4, arpt, 0)
        fun addLat(builder: FlatBufferBuilder, lat: Double) = builder.addDouble(5, lat, 0.0)
        fun addLon(builder: FlatBufferBuilder, lon: Double) = builder.addDouble(6, lon, 0.0)
        fun addArId(builder: FlatBufferBuilder, arId: Int) = builder.addOffset(7, arId, 0)
        fun addNavaid(builder: FlatBufferBuilder, navaid: Int) = builder.addOffset(8, navaid, 0)
        fun addTacanChannel(builder: FlatBufferBuilder, tacanChannel: Int) = builder.addOffset(9, tacanChannel, 0)
        fun addVorFreq(builder: FlatBufferBuilder, vorFreq: Double) = builder.addDouble(10, vorFreq, 0.0)
        fun addTurbCat(builder: FlatBufferBuilder, turbCat: Int) = builder.addOffset(11, turbCat, 0)
        fun addIceCat(builder: FlatBufferBuilder, iceCat: Int) = builder.addOffset(12, iceCat, 0)
        fun addThunderCat(builder: FlatBufferBuilder, thunderCat: Int) = builder.addOffset(13, thunderCat, 0)
        fun addAlt(builder: FlatBufferBuilder, alt: Double) = builder.addDouble(14, alt, 0.0)
        fun addTempDev(builder: FlatBufferBuilder, tempDev: Double) = builder.addDouble(15, tempDev, 0.0)
        fun addLegFuelDegrade(builder: FlatBufferBuilder, legFuelDegrade: Double) = builder.addDouble(16, legFuelDegrade, 0.0)
        fun addLegMach(builder: FlatBufferBuilder, legMach: Double) = builder.addDouble(17, legMach, 0.0)
        fun addLegMsnIndex(builder: FlatBufferBuilder, legMsnIndex: Double) = builder.addDouble(18, legMsnIndex, 0.0)
        fun addLegDragIndex(builder: FlatBufferBuilder, legDragIndex: Double) = builder.addDouble(19, legDragIndex, 0.0)
        fun addAvgCalAirspeed(builder: FlatBufferBuilder, avgCalAirspeed: Double) = builder.addDouble(20, avgCalAirspeed, 0.0)
        fun addAvgTrueAirspeed(builder: FlatBufferBuilder, avgTrueAirspeed: Double) = builder.addDouble(21, avgTrueAirspeed, 0.0)
        fun addAvgGroundSpeed(builder: FlatBufferBuilder, avgGroundSpeed: Double) = builder.addDouble(22, avgGroundSpeed, 0.0)
        fun addPriFreq(builder: FlatBufferBuilder, priFreq: Double) = builder.addDouble(23, priFreq, 0.0)
        fun addPointWindDir(builder: FlatBufferBuilder, pointWindDir: Double) = builder.addDouble(24, pointWindDir, 0.0)
        fun addPointWindSpeed(builder: FlatBufferBuilder, pointWindSpeed: Double) = builder.addDouble(25, pointWindSpeed, 0.0)
        fun addAvgWindDir(builder: FlatBufferBuilder, avgWindDir: Double) = builder.addDouble(26, avgWindDir, 0.0)
        fun addAvgWindSpeed(builder: FlatBufferBuilder, avgWindSpeed: Double) = builder.addDouble(27, avgWindSpeed, 0.0)
        fun addLegWindFac(builder: FlatBufferBuilder, legWindFac: Double) = builder.addDouble(28, legWindFac, 0.0)
        fun addAvgDriftAng(builder: FlatBufferBuilder, avgDriftAng: Double) = builder.addDouble(29, avgDriftAng, 0.0)
        fun addSecFreq(builder: FlatBufferBuilder, secFreq: Double) = builder.addDouble(30, secFreq, 0.0)
        fun addMagCourse(builder: FlatBufferBuilder, magCourse: Double) = builder.addDouble(31, magCourse, 0.0)
        fun addTrueCourse(builder: FlatBufferBuilder, trueCourse: Double) = builder.addDouble(32, trueCourse, 0.0)
        fun addMagHeading(builder: FlatBufferBuilder, magHeading: Double) = builder.addDouble(33, magHeading, 0.0)
        fun addAaTacanChannel(builder: FlatBufferBuilder, aaTacanChannel: Int) = builder.addOffset(34, aaTacanChannel, 0)
        fun addZoneDistance(builder: FlatBufferBuilder, zoneDistance: Double) = builder.addDouble(35, zoneDistance, 0.0)
        fun addTotalFlownDistance(builder: FlatBufferBuilder, totalFlownDistance: Double) = builder.addDouble(36, totalFlownDistance, 0.0)
        fun addTotalRemDistance(builder: FlatBufferBuilder, totalRemDistance: Double) = builder.addDouble(37, totalRemDistance, 0.0)
        fun addZoneTime(builder: FlatBufferBuilder, zoneTime: Double) = builder.addDouble(38, zoneTime, 0.0)
        fun addTotalTime(builder: FlatBufferBuilder, totalTime: Int) = builder.addOffset(39, totalTime, 0)
        fun addTotalTimeRem(builder: FlatBufferBuilder, totalTimeRem: Int) = builder.addOffset(40, totalTimeRem, 0)
        fun addZoneFuel(builder: FlatBufferBuilder, zoneFuel: Double) = builder.addDouble(41, zoneFuel, 0.0)
        fun addTotalUsedFuel(builder: FlatBufferBuilder, totalUsedFuel: Double) = builder.addDouble(42, totalUsedFuel, 0.0)
        fun addTotalRemFuel(builder: FlatBufferBuilder, totalRemFuel: Double) = builder.addDouble(43, totalRemFuel, 0.0)
        fun addExchangedFuel(builder: FlatBufferBuilder, exchangedFuel: Double) = builder.addDouble(44, exchangedFuel, 0.0)
        fun addAirDistance(builder: FlatBufferBuilder, airDistance: Double) = builder.addDouble(45, airDistance, 0.0)
        fun addTotalAirDistance(builder: FlatBufferBuilder, totalAirDistance: Double) = builder.addDouble(46, totalAirDistance, 0.0)
        fun addTotalWeight(builder: FlatBufferBuilder, totalWeight: Double) = builder.addDouble(47, totalWeight, 0.0)
        fun addEta(builder: FlatBufferBuilder, eta: Int) = builder.addOffset(48, eta, 0)
        fun addAta(builder: FlatBufferBuilder, ata: Int) = builder.addOffset(49, ata, 0)
        fun addFuelFlow(builder: FlatBufferBuilder, fuelFlow: Double) = builder.addDouble(50, fuelFlow, 0.0)
        fun addLegAlternate(builder: FlatBufferBuilder, legAlternate: Int) = builder.addOffset(51, legAlternate, 0)
        fun addMagVar(builder: FlatBufferBuilder, magVar: Double) = builder.addDouble(52, magVar, 0.0)
        fun addDayLowAlt(builder: FlatBufferBuilder, dayLowAlt: Double) = builder.addDouble(53, dayLowAlt, 0.0)
        fun addNightLowAlt(builder: FlatBufferBuilder, nightLowAlt: Double) = builder.addDouble(54, nightLowAlt, 0.0)
        fun addNvgLowAlt(builder: FlatBufferBuilder, nvgLowAlt: Double) = builder.addDouble(55, nvgLowAlt, 0.0)
        fun endFlightPlanWaypoints_Abridged(builder: FlatBufferBuilder) : Int {
            val o = builder.endTable()
            return o
        }
        fun finishFlightPlanWaypointsAbridgedBuffer(builder: FlatBufferBuilder, offset: Int) = builder.finish(offset, "FLIG")
        fun finishSizePrefixedFlightPlanWaypoints_AbridgedBuffer(builder: FlatBufferBuilder, offset: Int) = builder.finishSizePrefixed(offset, "FLIG")
    }
}
