// automatically generated by the FlatBuffers compiler, do not modify

import com.google.flatbuffers.BaseVector
import com.google.flatbuffers.BooleanVector
import com.google.flatbuffers.ByteVector
import com.google.flatbuffers.Constants
import com.google.flatbuffers.DoubleVector
import com.google.flatbuffers.FlatBufferBuilder
import com.google.flatbuffers.FloatVector
import com.google.flatbuffers.LongVector
import com.google.flatbuffers.StringVector
import com.google.flatbuffers.Struct
import com.google.flatbuffers.Table
import com.google.flatbuffers.UnionVector
import java.nio.ByteBuffer
import java.nio.ByteOrder
import kotlin.math.sign

/**
 * /// Details for a navigation payload from  Seradata.
 */
@Suppress("unused")
class SeradataNavigation_Ingest : Table() {

    fun __init(_i: Int, _bb: ByteBuffer)  {
        __reset(_i, _bb)
    }
    fun __assign(_i: Int, _bb: ByteBuffer) : SeradataNavigation_Ingest {
        __init(_i, _bb)
        return this
    }
    /**
     * Unique identifier of the record, auto-generated by the system.
     * Example: /// Example: SERADATANAVIGATION-ID
     * Constraints: Minimum length = 1, Maximum length = 36
     */
    val id : String?
        get() {
            val o = __offset(4)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val idAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(4, 1)
    fun idInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 4, 1)
    /**
     * Classification marking of the data in IC/CAPCO Portion-marked format.
     * Example: /// Example: U
     * Constraints: Minimum length = 1, Maximum length = 128
     */
    val classificationMarking : String?
        get() {
            val o = __offset(6)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val classificationMarkingAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(6, 1)
    fun classificationMarkingInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 6, 1)
    /**
     * UUID of the parent Navigation record.
     * Example: /// Example: idNavigation
     * Constraints: Minimum length = 0, Maximum length = 36
     */
    val idNavigation : String?
        get() {
            val o = __offset(8)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val idNavigationAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(8, 1)
    fun idNavigationInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 8, 1)
    /**
     * Seradata ID of the spacecraft (SeradataSpacecraftDetails ID).
     * Example: /// Example: spacecraftId
     * Constraints: Minimum length = 1, Maximum length = 36
     */
    val spacecraftId : String?
        get() {
            val o = __offset(10)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val spacecraftIdAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(10, 1)
    fun spacecraftIdInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 10, 1)
    /**
     * Hosted for company/Organization Id.
     * Example: /// Example: hostedForCompanyOrgId
     * Constraints: Minimum length = 0, Maximum length = 36
     */
    val hostedForCompanyOrgId : String?
        get() {
            val o = __offset(12)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val hostedForCompanyOrgIdAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(12, 1)
    fun hostedForCompanyOrgIdInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 12, 1)
    /**
     * Manufacturer Organization Id.
     * Example: /// Example: manufacturerOrgId
     * Constraints: Minimum length = 0, Maximum length = 36
     */
    val manufacturerOrgId : String?
        get() {
            val o = __offset(14)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val manufacturerOrgIdAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(14, 1)
    fun manufacturerOrgIdInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 14, 1)
    /**
     * Navigation payload type, e.g. WAAS, GAGAN, etc.
     * Example: /// Example: WAAS
     * Constraints: Minimum length = 0, Maximum length = 100
     */
    val payloadType : String?
        get() {
            val o = __offset(16)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val payloadTypeAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(16, 1)
    fun payloadTypeInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 16, 1)
    /**
     * Modes of operation.
     * Example: /// Example: Military
     * Constraints: Minimum length = 0, Maximum length = 100
     */
    val modes : String?
        get() {
            val o = __offset(18)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val modesAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(18, 1)
    fun modesInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 18, 1)
    /**
     * Frequency for this payload.
     * Example: /// Example: 1234
     * Constraints: Minimum length = 0, Maximum length = 100
     */
    val modeFrequency : String?
        get() {
            val o = __offset(20)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val modeFrequencyAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(20, 1)
    fun modeFrequencyInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 20, 1)
    /**
     * Location accuracy in meters.
     * Example: /// Example: 1.23
     * Constraints: No constraints specified.
     */
    val locationAccuracy : Double
        get() {
            val o = __offset(22)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Seradata ID of the spacecraft (SeradataSpacecraftDetails ID).
     * Example: /// Example: partnerSpacecraftId
     * Constraints: Minimum length = 0, Maximum length = 36
     */
    val partnerSpacecraftId : String?
        get() {
            val o = __offset(24)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val partnerSpacecraftIdAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(24, 1)
    fun partnerSpacecraftIdInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 24, 1)
    /**
     * Area of coverage, e.g. Worldwide, India, etc.
     * Example: /// Example: Worldwide
     * Constraints: Minimum length = 0, Maximum length = 50
     */
    val areaCoverage : String?
        get() {
            val o = __offset(26)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val areaCoverageAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(26, 1)
    fun areaCoverageInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 26, 1)
    /**
     * Payload notes.
     * Example: /// Example: Sample Notes
     * Constraints: Minimum length = 0, Maximum length = 2147483647
     */
    val notes : String?
        get() {
            val o = __offset(28)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val notesAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(28, 1)
    fun notesInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 28, 1)
    /**
     * Sensor name from Seradata, e.g. WAAS GEO-5, etc.
     * Example: /// Example: WAAS GEO-5
     * Constraints: Minimum length = 0, Maximum length = 50
     */
    val name : String?
        get() {
            val o = __offset(30)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val nameAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(30, 1)
    fun nameInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 30, 1)
    /**
     * Type of clock, e.g. Rubidium, Hydrogen Maser, etc.
     * Example: /// Example: Rubidium
     * Constraints: Minimum length = 0, Maximum length = 20
     */
    val clockType : String?
        get() {
            val o = __offset(32)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val clockTypeAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(32, 1)
    fun clockTypeInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 32, 1)
    /**
     * Time the row was created in the database, auto-populated by the system.
     * Example: /// Example: 2018-01-01T16:00:00.123Z
     * Constraints: No constraints specified.
     */
    val createdAt : String?
        get() {
            val o = __offset(34)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val createdAtAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(34, 1)
    fun createdAtInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 34, 1)
    /**
     * Application user who created the row in the database, auto-populated by the system.
     * Example: /// Example: some.user
     * Constraints: Minimum length = 1, Maximum length = 64
     */
    val createdBy : String?
        get() {
            val o = __offset(36)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val createdByAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(36, 1)
    fun createdByInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 36, 1)
    /**
     * Source of the data.
     * Example: /// Example: Bluestaq
     * Constraints: Minimum length = 1, Maximum length = 64
     */
    val source : String?
        get() {
            val o = __offset(38)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val sourceAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(38, 1)
    fun sourceInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 38, 1)
    /**
     * Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
     * Example: /// Example: THIRD_PARTY_DATASOURCE
     * Constraints: Minimum length = 0, Maximum length = 64
     */
    val origin : String?
        get() {
            val o = __offset(40)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val originAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(40, 1)
    fun originInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 40, 1)
    /**
     * The originating source network on which this record was created, auto-populated by the system.
     * Example: /// Example: ORIG
     * Constraints: Minimum length = 1, Maximum length = 32
     */
    val origNetwork : String?
        get() {
            val o = __offset(42)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val origNetworkAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(42, 1)
    fun origNetworkInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 42, 1)
    /**
     * Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
     * EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
     * REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
     * SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
     * TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
     * Example: /// Example: TEST
     * Constraints: Minimum length = 1, Maximum length = 32
     */
    val dataMode : Byte
        get() {
            val o = __offset(44)
            return if(o != 0) bb.get(o + bb_pos) else 0
        }
    companion object {
        fun validateVersion() = Constants.FLATBUFFERS_24_3_25()
        fun getRootAsSeradataNavigation_Ingest(_bb: ByteBuffer): SeradataNavigation_Ingest = getRootAsSeradataNavigation_Ingest(_bb, SeradataNavigation_Ingest())
        fun getRootAsSeradataNavigation_Ingest(_bb: ByteBuffer, obj: SeradataNavigation_Ingest): SeradataNavigation_Ingest {
            _bb.order(ByteOrder.LITTLE_ENDIAN)
            return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb))
        }
        fun SeradataNavigation_IngestBufferHasIdentifier(_bb: ByteBuffer) : Boolean = __has_identifier(_bb, "SERA")
        fun createSeradataNavigation_Ingest(builder: FlatBufferBuilder, idOffset: Int, classificationMarkingOffset: Int, idNavigationOffset: Int, spacecraftIdOffset: Int, hostedForCompanyOrgIdOffset: Int, manufacturerOrgIdOffset: Int, payloadTypeOffset: Int, modesOffset: Int, modeFrequencyOffset: Int, locationAccuracy: Double, partnerSpacecraftIdOffset: Int, areaCoverageOffset: Int, notesOffset: Int, nameOffset: Int, clockTypeOffset: Int, createdAtOffset: Int, createdByOffset: Int, sourceOffset: Int, originOffset: Int, origNetworkOffset: Int, dataMode: Byte) : Int {
            builder.startTable(21)
            addLocationAccuracy(builder, locationAccuracy)
            addOrigNetwork(builder, origNetworkOffset)
            addOrigin(builder, originOffset)
            addSource(builder, sourceOffset)
            addCreatedBy(builder, createdByOffset)
            addCreatedAt(builder, createdAtOffset)
            addClockType(builder, clockTypeOffset)
            addName(builder, nameOffset)
            addNotes(builder, notesOffset)
            addAreaCoverage(builder, areaCoverageOffset)
            addPartnerSpacecraftId(builder, partnerSpacecraftIdOffset)
            addModeFrequency(builder, modeFrequencyOffset)
            addModes(builder, modesOffset)
            addPayloadType(builder, payloadTypeOffset)
            addManufacturerOrgId(builder, manufacturerOrgIdOffset)
            addHostedForCompanyOrgId(builder, hostedForCompanyOrgIdOffset)
            addSpacecraftId(builder, spacecraftIdOffset)
            addIdNavigation(builder, idNavigationOffset)
            addClassificationMarking(builder, classificationMarkingOffset)
            addId(builder, idOffset)
            addDataMode(builder, dataMode)
            return endSeradataNavigation_Ingest(builder)
        }
        fun startSeradataNavigation_Ingest(builder: FlatBufferBuilder) = builder.startTable(21)
        fun addId(builder: FlatBufferBuilder, id: Int) = builder.addOffset(0, id, 0)
        fun addClassificationMarking(builder: FlatBufferBuilder, classificationMarking: Int) = builder.addOffset(1, classificationMarking, 0)
        fun addIdNavigation(builder: FlatBufferBuilder, idNavigation: Int) = builder.addOffset(2, idNavigation, 0)
        fun addSpacecraftId(builder: FlatBufferBuilder, spacecraftId: Int) = builder.addOffset(3, spacecraftId, 0)
        fun addHostedForCompanyOrgId(builder: FlatBufferBuilder, hostedForCompanyOrgId: Int) = builder.addOffset(4, hostedForCompanyOrgId, 0)
        fun addManufacturerOrgId(builder: FlatBufferBuilder, manufacturerOrgId: Int) = builder.addOffset(5, manufacturerOrgId, 0)
        fun addPayloadType(builder: FlatBufferBuilder, payloadType: Int) = builder.addOffset(6, payloadType, 0)
        fun addModes(builder: FlatBufferBuilder, modes: Int) = builder.addOffset(7, modes, 0)
        fun addModeFrequency(builder: FlatBufferBuilder, modeFrequency: Int) = builder.addOffset(8, modeFrequency, 0)
        fun addLocationAccuracy(builder: FlatBufferBuilder, locationAccuracy: Double) = builder.addDouble(9, locationAccuracy, 0.0)
        fun addPartnerSpacecraftId(builder: FlatBufferBuilder, partnerSpacecraftId: Int) = builder.addOffset(10, partnerSpacecraftId, 0)
        fun addAreaCoverage(builder: FlatBufferBuilder, areaCoverage: Int) = builder.addOffset(11, areaCoverage, 0)
        fun addNotes(builder: FlatBufferBuilder, notes: Int) = builder.addOffset(12, notes, 0)
        fun addName(builder: FlatBufferBuilder, name: Int) = builder.addOffset(13, name, 0)
        fun addClockType(builder: FlatBufferBuilder, clockType: Int) = builder.addOffset(14, clockType, 0)
        fun addCreatedAt(builder: FlatBufferBuilder, createdAt: Int) = builder.addOffset(15, createdAt, 0)
        fun addCreatedBy(builder: FlatBufferBuilder, createdBy: Int) = builder.addOffset(16, createdBy, 0)
        fun addSource(builder: FlatBufferBuilder, source: Int) = builder.addOffset(17, source, 0)
        fun addOrigin(builder: FlatBufferBuilder, origin: Int) = builder.addOffset(18, origin, 0)
        fun addOrigNetwork(builder: FlatBufferBuilder, origNetwork: Int) = builder.addOffset(19, origNetwork, 0)
        fun addDataMode(builder: FlatBufferBuilder, dataMode: Byte) = builder.addByte(20, dataMode, 0)
        fun endSeradataNavigation_Ingest(builder: FlatBufferBuilder) : Int {
            val o = builder.endTable()
            return o
        }
        fun finishSeradataNavigationIngestBuffer(builder: FlatBufferBuilder, offset: Int) = builder.finish(offset, "SERA")
        fun finishSizePrefixedSeradataNavigation_IngestBuffer(builder: FlatBufferBuilder, offset: Int) = builder.finishSizePrefixed(offset, "SERA")
    }
}
