// automatically generated by the FlatBuffers compiler, do not modify

import com.google.flatbuffers.BaseVector
import com.google.flatbuffers.BooleanVector
import com.google.flatbuffers.ByteVector
import com.google.flatbuffers.Constants
import com.google.flatbuffers.DoubleVector
import com.google.flatbuffers.FlatBufferBuilder
import com.google.flatbuffers.FloatVector
import com.google.flatbuffers.LongVector
import com.google.flatbuffers.StringVector
import com.google.flatbuffers.Struct
import com.google.flatbuffers.Table
import com.google.flatbuffers.UnionVector
import java.nio.ByteBuffer
import java.nio.ByteOrder
import kotlin.math.sign

/**
 * /// Maintenance schedule and operational status of Sensor.
 */
@Suppress("unused")
class SensorMaintenance_Ingest : Table() {

    fun __init(_i: Int, _bb: ByteBuffer)  {
        __reset(_i, _bb)
    }
    fun __assign(_i: Int, _bb: ByteBuffer) : SensorMaintenance_Ingest {
        __init(_i, _bb)
        return this
    }
    /**
     * Unique identifier of the record, auto-generated by the system.
     * Example: /// Example: SENSORMAINTENANCE-ID
     * Constraints: Minimum length = 1, Maximum length = 36
     */
    val id : String?
        get() {
            val o = __offset(4)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val idAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(4, 1)
    fun idInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 4, 1)
    /**
     * Classification marking of the data in IC/CAPCO Portion-marked format.
     * Example: /// Example: U
     * Constraints: Minimum length = 1, Maximum length = 128
     */
    val classificationMarking : String?
        get() {
            val o = __offset(6)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val classificationMarkingAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(6, 1)
    fun classificationMarkingInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 6, 1)
    /**
     * The site to which this item applies.  NOTE - this site code is COLT specific and may not identically correspond to other UDL site IDs.
     * Example: /// Example: site01
     * Constraints: Minimum length = 1, Maximum length = 6
     */
    val siteCode : String?
        get() {
            val o = __offset(8)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val siteCodeAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(8, 1)
    fun siteCodeInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 8, 1)
    /**
     * UUID of the sensor.
     * Example: /// Example: idSensor
     * Constraints: Minimum length = 0, Maximum length = 36
     */
    val idSensor : String?
        get() {
            val o = __offset(10)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val idSensorAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(10, 1)
    fun idSensorInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 10, 1)
    /**
     * The planned outage start time in ISO8601 UTC format.
     * Example: /// Example: 2018-01-01T16:00:00.123456Z
     * Constraints: No constraints specified.
     */
    val startTime : String?
        get() {
            val o = __offset(12)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val startTimeAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(12, 1)
    fun startTimeInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 12, 1)
    /**
     * The planned outage end time in ISO8601 UTC format.
     * Example: /// Example: 2018-01-01T16:00:00.123456Z
     * Constraints: No constraints specified.
     */
    val endTime : String?
        get() {
            val o = __offset(14)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val endTimeAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(14, 1)
    fun endTimeInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 14, 1)
    /**
     * The minimum time required to recall this activity, expressed as ddd:hh:mm.
     * Example: /// Example: 128:16:52
     * Constraints: Minimum length = 0, Maximum length = 20
     */
    val recall : String?
        get() {
            val o = __offset(16)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val recallAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(16, 1)
    fun recallInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 16, 1)
    /**
     * The duration of the planned outage, expressed as ddd:hh:mm.
     * Example: /// Example: 128:16:52
     * Constraints: Minimum length = 0, Maximum length = 20
     */
    val duration : String?
        get() {
            val o = __offset(18)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val durationAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(18, 1)
    fun durationInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 18, 1)
    /**
     * The Missile Warning operational capability of this maintenance item.  Typical values are G, Y, R, and - for non-applicable sites.
     * Example: /// Example: G
     * Constraints: Minimum length = 0, Maximum length = 3
     */
    val mwOpsCap : String?
        get() {
            val o = __offset(20)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val mwOpsCapAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(20, 1)
    fun mwOpsCapInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 20, 1)
    /**
     * The Space Surveillance operational capability of this maintenance item.  Typical values are G, Y, R, and - for non-applicable sites.
     * Example: /// Example: Y
     * Constraints: Minimum length = 0, Maximum length = 3
     */
    val ssOpsCap : String?
        get() {
            val o = __offset(22)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val ssOpsCapAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(22, 1)
    fun ssOpsCapInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 22, 1)
    /**
     * The Missile Defense operational capability of this maintenance item.  Typical values are G, Y, R, and - for non-applicable sites.
     * Example: /// Example: R
     * Constraints: Minimum length = 0, Maximum length = 3
     */
    val mdOpsCap : String?
        get() {
            val o = __offset(24)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val mdOpsCapAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(24, 1)
    fun mdOpsCapInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 24, 1)
    /**
     * The sensor face(s) to which this COLT maintenance item applies, if applicable.
     * Example: /// Example: impactedFaces
     * Constraints: Minimum length = 0, Maximum length = 50
     */
    val impactedFaces : String?
        get() {
            val o = __offset(26)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val impactedFacesAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(26, 1)
    fun impactedFacesInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 26, 1)
    /**
     * The mission capability status of the equipment (e.g. FMC, NMC, PMC, UNK, etc.).
     * Example: /// Example: FMC
     * Constraints: Minimum length = 0, Maximum length = 20
     */
    val equipStatus : String?
        get() {
            val o = __offset(28)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val equipStatusAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(28, 1)
    fun equipStatusInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 28, 1)
    /**
     * Description of the activity taking place during this outage.
     * Example: /// Example: Activity Description
     * Constraints: No constraints specified.
     */
    val activity : String?
        get() {
            val o = __offset(30)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val activityAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(30, 1)
    fun activityInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 30, 1)
    /**
     * Remarks concerning this outage.
     * Example: /// Example: Remarks
     * Constraints: No constraints specified.
     */
    val remark : String?
        get() {
            val o = __offset(32)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val remarkAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(32, 1)
    fun remarkInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 32, 1)
    /**
     * The name of the requestor.
     * Example: /// Example: requestor
     * Constraints: Minimum length = 0, Maximum length = 50
     */
    val requestor : String?
        get() {
            val o = __offset(34)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val requestorAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(34, 1)
    fun requestorInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 34, 1)
    /**
     * The name of the changer, if applicable.
     * Example: /// Example: changer
     * Constraints: Minimum length = 0, Maximum length = 50
     */
    val changer : String?
        get() {
            val o = __offset(36)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val changerAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(36, 1)
    fun changerInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 36, 1)
    /**
     * The name of the approver.
     * Example: /// Example: approver
     * Constraints: Minimum length = 0, Maximum length = 50
     */
    val approver : String?
        get() {
            val o = __offset(38)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val approverAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(38, 1)
    fun approverInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 38, 1)
    /**
     * COLT EOWID.
     * Example: /// Example: eowId
     * Constraints: Minimum length = 0, Maximum length = 20
     */
    val eowId : String?
        get() {
            val o = __offset(40)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val eowIdAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(40, 1)
    fun eowIdInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 40, 1)
    /**
     * The revision number for this maintenance item.
     * Example: /// Example: rev
     * Constraints: Minimum length = 0, Maximum length = 5
     */
    val rev : String?
        get() {
            val o = __offset(42)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val revAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(42, 1)
    fun revInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 42, 1)
    /**
     * The priority of this maintenance item.
     * Example: /// Example: low
     * Constraints: Minimum length = 0, Maximum length = 5
     */
    val priority : String?
        get() {
            val o = __offset(44)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val priorityAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(44, 1)
    fun priorityInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 44, 1)
    /**
     * Release.
     * Example: /// Example: rel
     * Constraints: Minimum length = 0, Maximum length = 5
     */
    val rel : String?
        get() {
            val o = __offset(46)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val relAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(46, 1)
    fun relInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 46, 1)
    /**
     * The internal COLT line number assigned to this item.
     * Example: /// Example: lineNumber
     * Constraints: Minimum length = 0, Maximum length = 20
     */
    val lineNumber : String?
        get() {
            val o = __offset(48)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val lineNumberAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(48, 1)
    fun lineNumberInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 48, 1)
    /**
     * The name of the resource(s) affected by this maintenance item.
     * Example: /// Example: resource
     * Constraints: Minimum length = 0, Maximum length = 255
     */
    val resource : String?
        get() {
            val o = __offset(50)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val resourceAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(50, 1)
    fun resourceInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 50, 1)
    /**
     * The date that this item became inactive in ISO8601 UTC format.
     * Example: /// Example: 2018-01-01T16:00:00.123Z
     * Constraints: No constraints specified.
     */
    val inactiveDate : String?
        get() {
            val o = __offset(52)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val inactiveDateAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(52, 1)
    fun inactiveDateInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 52, 1)
    /**
     * Time the row was created in the database, auto-populated by the system.
     * Example: /// Example: 2018-01-01T16:00:00.123Z
     * Constraints: No constraints specified.
     */
    val createdAt : String?
        get() {
            val o = __offset(54)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val createdAtAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(54, 1)
    fun createdAtInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 54, 1)
    /**
     * Application user who created the row in the database, auto-populated by the system.
     * Example: /// Example: some.user
     * Constraints: Minimum length = 1, Maximum length = 64
     */
    val createdBy : String?
        get() {
            val o = __offset(56)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val createdByAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(56, 1)
    fun createdByInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 56, 1)
    /**
     * Source of the data.
     * Example: /// Example: Bluestaq
     * Constraints: Minimum length = 1, Maximum length = 64
     */
    val source : String?
        get() {
            val o = __offset(58)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val sourceAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(58, 1)
    fun sourceInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 58, 1)
    /**
     * Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
     * Example: /// Example: THIRD_PARTY_DATASOURCE
     * Constraints: Minimum length = 0, Maximum length = 64
     */
    val origin : String?
        get() {
            val o = __offset(60)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val originAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(60, 1)
    fun originInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 60, 1)
    /**
     * Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
     * EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
     * REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
     * SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
     * TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
     * Example: /// Example: TEST
     * Constraints: Minimum length = 1, Maximum length = 32
     */
    val dataMode : Byte
        get() {
            val o = __offset(62)
            return if(o != 0) bb.get(o + bb_pos) else 0
        }
    /**
     * The originating source network on which this record was created, auto-populated by the system.
     * Example: /// Example: ORIG
     * Constraints: Minimum length = 1, Maximum length = 32
     */
    val origNetwork : String?
        get() {
            val o = __offset(64)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val origNetworkAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(64, 1)
    fun origNetworkInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 64, 1)
    companion object {
        fun validateVersion() = Constants.FLATBUFFERS_24_3_25()
        fun getRootAsSensorMaintenance_Ingest(_bb: ByteBuffer): SensorMaintenance_Ingest = getRootAsSensorMaintenance_Ingest(_bb, SensorMaintenance_Ingest())
        fun getRootAsSensorMaintenance_Ingest(_bb: ByteBuffer, obj: SensorMaintenance_Ingest): SensorMaintenance_Ingest {
            _bb.order(ByteOrder.LITTLE_ENDIAN)
            return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb))
        }
        fun SensorMaintenance_IngestBufferHasIdentifier(_bb: ByteBuffer) : Boolean = __has_identifier(_bb, "SENS")
        fun createSensorMaintenance_Ingest(builder: FlatBufferBuilder, idOffset: Int, classificationMarkingOffset: Int, siteCodeOffset: Int, idSensorOffset: Int, startTimeOffset: Int, endTimeOffset: Int, recallOffset: Int, durationOffset: Int, mwOpsCapOffset: Int, ssOpsCapOffset: Int, mdOpsCapOffset: Int, impactedFacesOffset: Int, equipStatusOffset: Int, activityOffset: Int, remarkOffset: Int, requestorOffset: Int, changerOffset: Int, approverOffset: Int, eowIdOffset: Int, revOffset: Int, priorityOffset: Int, relOffset: Int, lineNumberOffset: Int, resourceOffset: Int, inactiveDateOffset: Int, createdAtOffset: Int, createdByOffset: Int, sourceOffset: Int, originOffset: Int, dataMode: Byte, origNetworkOffset: Int) : Int {
            builder.startTable(31)
            addOrigNetwork(builder, origNetworkOffset)
            addOrigin(builder, originOffset)
            addSource(builder, sourceOffset)
            addCreatedBy(builder, createdByOffset)
            addCreatedAt(builder, createdAtOffset)
            addInactiveDate(builder, inactiveDateOffset)
            addResource(builder, resourceOffset)
            addLineNumber(builder, lineNumberOffset)
            addRel(builder, relOffset)
            addPriority(builder, priorityOffset)
            addRev(builder, revOffset)
            addEowId(builder, eowIdOffset)
            addApprover(builder, approverOffset)
            addChanger(builder, changerOffset)
            addRequestor(builder, requestorOffset)
            addRemark(builder, remarkOffset)
            addActivity(builder, activityOffset)
            addEquipStatus(builder, equipStatusOffset)
            addImpactedFaces(builder, impactedFacesOffset)
            addMdOpsCap(builder, mdOpsCapOffset)
            addSsOpsCap(builder, ssOpsCapOffset)
            addMwOpsCap(builder, mwOpsCapOffset)
            addDuration(builder, durationOffset)
            addRecall(builder, recallOffset)
            addEndTime(builder, endTimeOffset)
            addStartTime(builder, startTimeOffset)
            addIdSensor(builder, idSensorOffset)
            addSiteCode(builder, siteCodeOffset)
            addClassificationMarking(builder, classificationMarkingOffset)
            addId(builder, idOffset)
            addDataMode(builder, dataMode)
            return endSensorMaintenance_Ingest(builder)
        }
        fun startSensorMaintenance_Ingest(builder: FlatBufferBuilder) = builder.startTable(31)
        fun addId(builder: FlatBufferBuilder, id: Int) = builder.addOffset(0, id, 0)
        fun addClassificationMarking(builder: FlatBufferBuilder, classificationMarking: Int) = builder.addOffset(1, classificationMarking, 0)
        fun addSiteCode(builder: FlatBufferBuilder, siteCode: Int) = builder.addOffset(2, siteCode, 0)
        fun addIdSensor(builder: FlatBufferBuilder, idSensor: Int) = builder.addOffset(3, idSensor, 0)
        fun addStartTime(builder: FlatBufferBuilder, startTime: Int) = builder.addOffset(4, startTime, 0)
        fun addEndTime(builder: FlatBufferBuilder, endTime: Int) = builder.addOffset(5, endTime, 0)
        fun addRecall(builder: FlatBufferBuilder, recall: Int) = builder.addOffset(6, recall, 0)
        fun addDuration(builder: FlatBufferBuilder, duration: Int) = builder.addOffset(7, duration, 0)
        fun addMwOpsCap(builder: FlatBufferBuilder, mwOpsCap: Int) = builder.addOffset(8, mwOpsCap, 0)
        fun addSsOpsCap(builder: FlatBufferBuilder, ssOpsCap: Int) = builder.addOffset(9, ssOpsCap, 0)
        fun addMdOpsCap(builder: FlatBufferBuilder, mdOpsCap: Int) = builder.addOffset(10, mdOpsCap, 0)
        fun addImpactedFaces(builder: FlatBufferBuilder, impactedFaces: Int) = builder.addOffset(11, impactedFaces, 0)
        fun addEquipStatus(builder: FlatBufferBuilder, equipStatus: Int) = builder.addOffset(12, equipStatus, 0)
        fun addActivity(builder: FlatBufferBuilder, activity: Int) = builder.addOffset(13, activity, 0)
        fun addRemark(builder: FlatBufferBuilder, remark: Int) = builder.addOffset(14, remark, 0)
        fun addRequestor(builder: FlatBufferBuilder, requestor: Int) = builder.addOffset(15, requestor, 0)
        fun addChanger(builder: FlatBufferBuilder, changer: Int) = builder.addOffset(16, changer, 0)
        fun addApprover(builder: FlatBufferBuilder, approver: Int) = builder.addOffset(17, approver, 0)
        fun addEowId(builder: FlatBufferBuilder, eowId: Int) = builder.addOffset(18, eowId, 0)
        fun addRev(builder: FlatBufferBuilder, rev: Int) = builder.addOffset(19, rev, 0)
        fun addPriority(builder: FlatBufferBuilder, priority: Int) = builder.addOffset(20, priority, 0)
        fun addRel(builder: FlatBufferBuilder, rel: Int) = builder.addOffset(21, rel, 0)
        fun addLineNumber(builder: FlatBufferBuilder, lineNumber: Int) = builder.addOffset(22, lineNumber, 0)
        fun addResource(builder: FlatBufferBuilder, resource: Int) = builder.addOffset(23, resource, 0)
        fun addInactiveDate(builder: FlatBufferBuilder, inactiveDate: Int) = builder.addOffset(24, inactiveDate, 0)
        fun addCreatedAt(builder: FlatBufferBuilder, createdAt: Int) = builder.addOffset(25, createdAt, 0)
        fun addCreatedBy(builder: FlatBufferBuilder, createdBy: Int) = builder.addOffset(26, createdBy, 0)
        fun addSource(builder: FlatBufferBuilder, source: Int) = builder.addOffset(27, source, 0)
        fun addOrigin(builder: FlatBufferBuilder, origin: Int) = builder.addOffset(28, origin, 0)
        fun addDataMode(builder: FlatBufferBuilder, dataMode: Byte) = builder.addByte(29, dataMode, 0)
        fun addOrigNetwork(builder: FlatBufferBuilder, origNetwork: Int) = builder.addOffset(30, origNetwork, 0)
        fun endSensorMaintenance_Ingest(builder: FlatBufferBuilder) : Int {
            val o = builder.endTable()
            return o
        }
        fun finishSensorMaintenanceIngestBuffer(builder: FlatBufferBuilder, offset: Int) = builder.finish(offset, "SENS")
        fun finishSizePrefixedSensorMaintenance_IngestBuffer(builder: FlatBufferBuilder, offset: Int) = builder.finishSizePrefixed(offset, "SENS")
    }
}
