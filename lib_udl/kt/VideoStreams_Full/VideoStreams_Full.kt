// automatically generated by the FlatBuffers compiler, do not modify

import com.google.flatbuffers.BaseVector
import com.google.flatbuffers.BooleanVector
import com.google.flatbuffers.ByteVector
import com.google.flatbuffers.Constants
import com.google.flatbuffers.DoubleVector
import com.google.flatbuffers.FlatBufferBuilder
import com.google.flatbuffers.FloatVector
import com.google.flatbuffers.LongVector
import com.google.flatbuffers.StringVector
import com.google.flatbuffers.Struct
import com.google.flatbuffers.Table
import com.google.flatbuffers.UnionVector
import java.nio.ByteBuffer
import java.nio.ByteOrder
import kotlin.math.sign

/**
 * /// The table captures metadata associated with the published videos in UDL.
 */
@Suppress("unused")
class VideoStreams_Full : Table() {

    fun __init(_i: Int, _bb: ByteBuffer)  {
        __reset(_i, _bb)
    }
    fun __assign(_i: Int, _bb: ByteBuffer) : VideoStreams_Full {
        __init(_i, _bb)
        return this
    }
    /**
     * Unique identifier of the record, auto-generated by the system.
     * Example: /// Example: VIDEOSTREAMS-ID
     * Constraints: Minimum length = 1, Maximum length = 36
     */
    val id : String?
        get() {
            val o = __offset(4)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val idAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(4, 1)
    fun idInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 4, 1)
    /**
     * Classification marking of the data in IC/CAPCO Portion-marked format.
     * Example: /// Example: U
     * Constraints: Minimum length = 1, Maximum length = 128
     */
    val classificationMarking : String?
        get() {
            val o = __offset(6)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val classificationMarkingAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(6, 1)
    fun classificationMarkingInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 6, 1)
    /**
     * Name of the video stream.
     * Example: /// Example: name
     * Constraints: Minimum length = 1, Maximum length = 128
     */
    val name : String?
        get() {
            val o = __offset(8)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val nameAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(8, 1)
    fun nameInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 8, 1)
    /**
     * Description/notes associated with the video stream.
     * Example: /// Example: description
     * Constraints: Minimum length = 1, Maximum length = 1024
     */
    val description : String?
        get() {
            val o = __offset(10)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val descriptionAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(10, 1)
    fun descriptionInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 10, 1)
    /**
     * The timestamp when the stream is available from. The unit is ISO 8601 format.
     * Example: /// Example: 2021-01-01T01:01:01.123456Z
     * Constraints: No constraints specified.
     */
    val startTime : String?
        get() {
            val o = __offset(12)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val startTimeAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(12, 1)
    fun startTimeInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 12, 1)
    /**
     * The timestamp when the stream is available until. The unit is ISO 8601 format.
     * Example: /// Example: 2021-01-01T01:01:01.123456Z
     * Constraints: No constraints specified.
     */
    val stopTime : String?
        get() {
            val o = __offset(14)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val stopTimeAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(14, 1)
    fun stopTimeInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 14, 1)
    /**
     * Source of the data.
     * Example: /// Example: Bluestaq
     * Constraints: Minimum length = 1, Maximum length = 36
     */
    val source : String?
        get() {
            val o = __offset(16)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val sourceAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(16, 1)
    fun sourceInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 16, 1)
    /**
     * Video Publisher Token.
     * Example: /// Example: tokenValue
     * Constraints: Minimum length = 1, Maximum length = 1024
     */
    val tokenValue : String?
        get() {
            val o = __offset(18)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val tokenValueAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(18, 1)
    fun tokenValueInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 18, 1)
    /**
     * Video Streaming Support URLs.
     * Example: /// Example: ['videoUrls', 'videoUrls2']
     * Constraints: No constraints specified.
     */
    fun videoUrls(j: Int) : String? {
        val o = __offset(20)
        return if (o != 0) {
            __string(__vector(o) + j * 4)
        } else {
            null
        }
    }
    val videoUrlsLength : Int
        get() {
            val o = __offset(20); return if (o != 0) __vector_len(o) else 0
        }
    /**
     * Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
     * EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
     * REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
     * SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
     * TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
     * Example: /// Example: TEST
     * Constraints: Minimum length = 1, Maximum length = 32
     */
    val dataMode : Byte
        get() {
            val o = __offset(22)
            return if(o != 0) bb.get(o + bb_pos) else 0
        }
    /**
     * Time the row was created in the database.
     * Example: /// Example: 2018-01-01T16:00:00.123Z
     * Constraints: No constraints specified.
     */
    val createdAt : String?
        get() {
            val o = __offset(24)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val createdAtAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(24, 1)
    fun createdAtInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 24, 1)
    /**
     * Application user who created the row in the database, auto-populated by the system.
     * Example: /// Example: some.user
     * Constraints: Minimum length = 1, Maximum length = 64
     */
    val createdBy : String?
        get() {
            val o = __offset(26)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val createdByAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(26, 1)
    fun createdByInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 26, 1)
    /**
     * Time the row was last updated in the database, auto-populated by the system.
     * Example: /// Example: 2018-01-01T16:00:00.123Z
     * Constraints: No constraints specified.
     */
    val updatedAt : String?
        get() {
            val o = __offset(28)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val updatedAtAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(28, 1)
    fun updatedAtInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 28, 1)
    /**
     * Application user who updated the row in the database, auto-populated by the system.
     * Example: /// Example: some.user
     * Constraints: Minimum length = 1, Maximum length = 64
     */
    val updatedBy : String?
        get() {
            val o = __offset(30)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val updatedByAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(30, 1)
    fun updatedByInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 30, 1)
    /**
     * The originating source network on which this record was created, auto-populated by the system.
     * Example: /// Example: OPS1
     * Constraints: Minimum length = 1, Maximum length = 32
     */
    val origNetwork : String?
        get() {
            val o = __offset(32)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val origNetworkAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(32, 1)
    fun origNetworkInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 32, 1)
    /**
     * No description provided.
     * Example: /// Example: No example provided.
     * Constraints: No constraints specified.
     */
    val origin : String?
        get() {
            val o = __offset(34)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val originAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(34, 1)
    fun originInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 34, 1)
    companion object {
        fun validateVersion() = Constants.FLATBUFFERS_24_3_25()
        fun getRootAsVideoStreams_Full(_bb: ByteBuffer): VideoStreams_Full = getRootAsVideoStreams_Full(_bb, VideoStreams_Full())
        fun getRootAsVideoStreams_Full(_bb: ByteBuffer, obj: VideoStreams_Full): VideoStreams_Full {
            _bb.order(ByteOrder.LITTLE_ENDIAN)
            return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb))
        }
        fun VideoStreams_FullBufferHasIdentifier(_bb: ByteBuffer) : Boolean = __has_identifier(_bb, "VIDE")
        fun createVideoStreams_Full(builder: FlatBufferBuilder, idOffset: Int, classificationMarkingOffset: Int, nameOffset: Int, descriptionOffset: Int, startTimeOffset: Int, stopTimeOffset: Int, sourceOffset: Int, tokenValueOffset: Int, videoUrlsOffset: Int, dataMode: Byte, createdAtOffset: Int, createdByOffset: Int, updatedAtOffset: Int, updatedByOffset: Int, origNetworkOffset: Int, originOffset: Int) : Int {
            builder.startTable(16)
            addOrigin(builder, originOffset)
            addOrigNetwork(builder, origNetworkOffset)
            addUpdatedBy(builder, updatedByOffset)
            addUpdatedAt(builder, updatedAtOffset)
            addCreatedBy(builder, createdByOffset)
            addCreatedAt(builder, createdAtOffset)
            addVideoUrls(builder, videoUrlsOffset)
            addTokenValue(builder, tokenValueOffset)
            addSource(builder, sourceOffset)
            addStopTime(builder, stopTimeOffset)
            addStartTime(builder, startTimeOffset)
            addDescription(builder, descriptionOffset)
            addName(builder, nameOffset)
            addClassificationMarking(builder, classificationMarkingOffset)
            addId(builder, idOffset)
            addDataMode(builder, dataMode)
            return endVideoStreams_Full(builder)
        }
        fun startVideoStreams_Full(builder: FlatBufferBuilder) = builder.startTable(16)
        fun addId(builder: FlatBufferBuilder, id: Int) = builder.addOffset(0, id, 0)
        fun addClassificationMarking(builder: FlatBufferBuilder, classificationMarking: Int) = builder.addOffset(1, classificationMarking, 0)
        fun addName(builder: FlatBufferBuilder, name: Int) = builder.addOffset(2, name, 0)
        fun addDescription(builder: FlatBufferBuilder, description: Int) = builder.addOffset(3, description, 0)
        fun addStartTime(builder: FlatBufferBuilder, startTime: Int) = builder.addOffset(4, startTime, 0)
        fun addStopTime(builder: FlatBufferBuilder, stopTime: Int) = builder.addOffset(5, stopTime, 0)
        fun addSource(builder: FlatBufferBuilder, source: Int) = builder.addOffset(6, source, 0)
        fun addTokenValue(builder: FlatBufferBuilder, tokenValue: Int) = builder.addOffset(7, tokenValue, 0)
        fun addVideoUrls(builder: FlatBufferBuilder, videoUrls: Int) = builder.addOffset(8, videoUrls, 0)
        fun createVideoUrlsVector(builder: FlatBufferBuilder, data: IntArray) : Int {
            builder.startVector(4, data.size, 4)
            for (i in data.size - 1 downTo 0) {
                builder.addOffset(data[i])
            }
            return builder.endVector()
        }
        fun startVideoUrlsVector(builder: FlatBufferBuilder, numElems: Int) = builder.startVector(4, numElems, 4)
        fun addDataMode(builder: FlatBufferBuilder, dataMode: Byte) = builder.addByte(9, dataMode, 0)
        fun addCreatedAt(builder: FlatBufferBuilder, createdAt: Int) = builder.addOffset(10, createdAt, 0)
        fun addCreatedBy(builder: FlatBufferBuilder, createdBy: Int) = builder.addOffset(11, createdBy, 0)
        fun addUpdatedAt(builder: FlatBufferBuilder, updatedAt: Int) = builder.addOffset(12, updatedAt, 0)
        fun addUpdatedBy(builder: FlatBufferBuilder, updatedBy: Int) = builder.addOffset(13, updatedBy, 0)
        fun addOrigNetwork(builder: FlatBufferBuilder, origNetwork: Int) = builder.addOffset(14, origNetwork, 0)
        fun addOrigin(builder: FlatBufferBuilder, origin: Int) = builder.addOffset(15, origin, 0)
        fun endVideoStreams_Full(builder: FlatBufferBuilder) : Int {
            val o = builder.endTable()
            return o
        }
        fun finishVideoStreamsFullBuffer(builder: FlatBufferBuilder, offset: Int) = builder.finish(offset, "VIDE")
        fun finishSizePrefixedVideoStreams_FullBuffer(builder: FlatBufferBuilder, offset: Int) = builder.finishSizePrefixed(offset, "VIDE")
    }
}
