// automatically generated by the FlatBuffers compiler, do not modify

import com.google.flatbuffers.BaseVector
import com.google.flatbuffers.BooleanVector
import com.google.flatbuffers.ByteVector
import com.google.flatbuffers.Constants
import com.google.flatbuffers.DoubleVector
import com.google.flatbuffers.FlatBufferBuilder
import com.google.flatbuffers.FloatVector
import com.google.flatbuffers.LongVector
import com.google.flatbuffers.StringVector
import com.google.flatbuffers.Struct
import com.google.flatbuffers.Table
import com.google.flatbuffers.UnionVector
import java.nio.ByteBuffer
import java.nio.ByteOrder
import kotlin.math.sign

/**
 * /// Data to analyze launch detections.
 */
@Suppress("unused")
class LaunchDetection_Ingest : Table() {

    fun __init(_i: Int, _bb: ByteBuffer)  {
        __reset(_i, _bb)
    }
    fun __assign(_i: Int, _bb: ByteBuffer) : LaunchDetection_Ingest {
        __init(_i, _bb)
        return this
    }
    /**
     * Unique identifier of the record, auto-generated by the system.
     * Example: /// Example: LAUNCHDETECTION-ID
     * Constraints: Minimum length = 1, Maximum length = 36
     */
    val id : String?
        get() {
            val o = __offset(4)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val idAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(4, 1)
    fun idInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 4, 1)
    /**
     * Classification marking of the data in IC/CAPCO Portion-marked format.
     * Example: /// Example: U
     * Constraints: Minimum length = 1, Maximum length = 128
     */
    val classificationMarking : String?
        get() {
            val o = __offset(6)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val classificationMarkingAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(6, 1)
    fun classificationMarkingInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 6, 1)
    /**
     * Time of Launch.
     * Example: /// Example: 2018-01-01T16:00:00.123Z
     * Constraints: No constraints specified.
     */
    val launchTime : String?
        get() {
            val o = __offset(8)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val launchTimeAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(8, 1)
    fun launchTimeInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 8, 1)
    /**
     * Type of message for the data.
     * Example: /// Example: Example-Msg-Type
     * Constraints: Minimum length = 1, Maximum length = 16
     */
    val messageType : String?
        get() {
            val o = __offset(10)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val messageTypeAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(10, 1)
    fun messageTypeInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 10, 1)
    /**
     * Geodetic Latitude of launch origin (in Degrees). -90 to 90 degrees (negative values south of equator).
     * Example: /// Example: 1.23
     * Constraints: No constraints specified.
     */
    val launchLatitude : Double
        get() {
            val o = __offset(12)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Geodetic Longitude of launch origin (in Degrees). -180 to 180 degrees (negative values west of Prime Meridian).
     * Example: /// Example: 1.23
     * Constraints: No constraints specified.
     */
    val launchLongitude : Double
        get() {
            val o = __offset(14)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Angle measured clockwise from North for the launch heading (in Degrees).
     * Example: /// Example: 1.23
     * Constraints: No constraints specified.
     */
    val launchAzimuth : Double
        get() {
            val o = __offset(16)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Orbit Right Ascension of Ascending Node (in Degrees).
     * Example: /// Example: 1.23
     * Constraints: No constraints specified.
     */
    val raan : Double
        get() {
            val o = __offset(18)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Orbit Inclination (in Degrees).
     * Example: /// Example: 1.23
     * Constraints: No constraints specified.
     */
    val inclination : Double
        get() {
            val o = __offset(20)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Time of observation.
     * Example: /// Example: 2018-01-01T16:00:00.123Z
     * Constraints: No constraints specified.
     */
    val observationTime : String?
        get() {
            val o = __offset(22)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val observationTimeAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(22, 1)
    fun observationTimeInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 22, 1)
    /**
     * Latitude of launch vehicle at observation time (in Degrees). -90 to 90 degrees (negative values south of equator).
     * Example: /// Example: 45.23
     * Constraints: No constraints specified.
     */
    val observationLatitude : Double
        get() {
            val o = __offset(24)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Longitude of launch vehicle at observation time (in Degrees).
     * Example: /// Example: 1.23
     * Constraints: No constraints specified.
     */
    val observationLongitude : Double
        get() {
            val o = __offset(26)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Altitude of launch vehicle at observation time (in KM).
     * Example: /// Example: 1.23
     * Constraints: No constraints specified.
     */
    val observationAltitude : Double
        get() {
            val o = __offset(28)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Flag indicating multiple observers were used.
     * Example: /// Example: False
     * Constraints: No constraints specified.
     */
    val stereoFlag : Boolean
        get() {
            val o = __offset(30)
            return if(o != 0) 0.toByte() != bb.get(o + bb_pos) else false
        }
    /**
     * Flag indicating that the Launch azimuth is uncertain due to near vertical flight path.
     * Example: /// Example: False
     * Constraints: No constraints specified.
     */
    val highZenithAzimuth : Boolean
        get() {
            val o = __offset(32)
            return if(o != 0) 0.toByte() != bb.get(o + bb_pos) else false
        }
    /**
     * Integer indicating how messages should be sequenced for a specific event.
     * Example: /// Example: 5
     * Constraints: No constraints specified.
     */
    val sequenceNumber : Int
        get() {
            val o = __offset(34)
            return if(o != 0) bb.getInt(o + bb_pos) else 0
        }
    /**
     * Id to be able to correlate different messages to a specific event.
     * Example: /// Example: EVENT-ID
     * Constraints: Minimum length = 0, Maximum length = 36
     */
    val eventId : String?
        get() {
            val o = __offset(36)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val eventIdAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(36, 1)
    fun eventIdInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 36, 1)
    /**
     * Source of the data.
     * Example: /// Example: Bluestaq
     * Constraints: Minimum length = 1, Maximum length = 64
     */
    val source : String?
        get() {
            val o = __offset(38)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val sourceAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(38, 1)
    fun sourceInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 38, 1)
    /**
     * Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
     * Example: /// Example: THIRD_PARTY_DATASOURCE
     * Constraints: Minimum length = 0, Maximum length = 64
     */
    val origin : String?
        get() {
            val o = __offset(40)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val originAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(40, 1)
    fun originInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 40, 1)
    /**
     * Optional source-provided and searchable metadata or descriptor of the data.
     * Example: /// Example: Example descriptor
     * Constraints: Minimum length = 0, Maximum length = 64
     */
    val descriptor : String?
        get() {
            val o = __offset(42)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val descriptorAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(42, 1)
    fun descriptorInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 42, 1)
    /**
     * Optional array of provider/source specific tags for this data, where each element is no longer than 32 characters, used for implementing data owner conditional access controls to restrict access to the data. Should be left null by data providers unless conditional access controls are coordinated with the UDL team.
     * Example: /// Example: ['PROVIDER_TAG1', 'PROVIDER_TAG2']
     * Constraints: No constraints specified.
     */
    fun tags(j: Int) : String? {
        val o = __offset(44)
        return if (o != 0) {
            __string(__vector(o) + j * 4)
        } else {
            null
        }
    }
    val tagsLength : Int
        get() {
            val o = __offset(44); return if (o != 0) __vector_len(o) else 0
        }
    /**
     * The originating source network on which this record was created, auto-populated by the system.
     * Example: /// Example: ORIG
     * Constraints: Minimum length = 1, Maximum length = 32
     */
    val origNetwork : String?
        get() {
            val o = __offset(46)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val origNetworkAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(46, 1)
    fun origNetworkInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 46, 1)
    /**
     * Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
     * EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
     * REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
     * SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
     * TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
     * Example: /// Example: TEST
     * Constraints: Minimum length = 1, Maximum length = 32
     */
    val dataMode : Byte
        get() {
            val o = __offset(48)
            return if(o != 0) bb.get(o + bb_pos) else 0
        }
    /**
     * Time the row was created in the database.
     * Example: /// Example: 2018-01-01T16:00:00.123Z
     * Constraints: No constraints specified.
     */
    val createdAt : String?
        get() {
            val o = __offset(50)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val createdAtAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(50, 1)
    fun createdAtInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 50, 1)
    /**
     * Application user who created the row in the database.
     * Example: /// Example: some.user
     * Constraints: Minimum length = 1, Maximum length = 64
     */
    val createdBy : String?
        get() {
            val o = __offset(52)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val createdByAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(52, 1)
    fun createdByInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 52, 1)
    /**
     * Read-only time the row was updated in the database, set automatically by the system on update.
     * Example: /// Example: 2018-01-01T16:00:00.123Z
     * Constraints: No constraints specified.
     */
    val updatedAt : String?
        get() {
            val o = __offset(54)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val updatedAtAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(54, 1)
    fun updatedAtInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 54, 1)
    /**
     * Application user who last updated the row in the database, set by the system automatically and ignored on create/edit operations.
     * Example: /// Example: some.user
     * Constraints: Minimum length = 0, Maximum length = 64
     */
    val updatedBy : String?
        get() {
            val o = __offset(56)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val updatedByAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(56, 1)
    fun updatedByInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 56, 1)
    companion object {
        fun validateVersion() = Constants.FLATBUFFERS_24_3_25()
        fun getRootAsLaunchDetection_Ingest(_bb: ByteBuffer): LaunchDetection_Ingest = getRootAsLaunchDetection_Ingest(_bb, LaunchDetection_Ingest())
        fun getRootAsLaunchDetection_Ingest(_bb: ByteBuffer, obj: LaunchDetection_Ingest): LaunchDetection_Ingest {
            _bb.order(ByteOrder.LITTLE_ENDIAN)
            return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb))
        }
        fun LaunchDetection_IngestBufferHasIdentifier(_bb: ByteBuffer) : Boolean = __has_identifier(_bb, "LAUN")
        fun createLaunchDetection_Ingest(builder: FlatBufferBuilder, idOffset: Int, classificationMarkingOffset: Int, launchTimeOffset: Int, messageTypeOffset: Int, launchLatitude: Double, launchLongitude: Double, launchAzimuth: Double, raan: Double, inclination: Double, observationTimeOffset: Int, observationLatitude: Double, observationLongitude: Double, observationAltitude: Double, stereoFlag: Boolean, highZenithAzimuth: Boolean, sequenceNumber: Int, eventIdOffset: Int, sourceOffset: Int, originOffset: Int, descriptorOffset: Int, tagsOffset: Int, origNetworkOffset: Int, dataMode: Byte, createdAtOffset: Int, createdByOffset: Int, updatedAtOffset: Int, updatedByOffset: Int) : Int {
            builder.startTable(27)
            addObservationAltitude(builder, observationAltitude)
            addObservationLongitude(builder, observationLongitude)
            addObservationLatitude(builder, observationLatitude)
            addInclination(builder, inclination)
            addRaan(builder, raan)
            addLaunchAzimuth(builder, launchAzimuth)
            addLaunchLongitude(builder, launchLongitude)
            addLaunchLatitude(builder, launchLatitude)
            addUpdatedBy(builder, updatedByOffset)
            addUpdatedAt(builder, updatedAtOffset)
            addCreatedBy(builder, createdByOffset)
            addCreatedAt(builder, createdAtOffset)
            addOrigNetwork(builder, origNetworkOffset)
            addTags(builder, tagsOffset)
            addDescriptor(builder, descriptorOffset)
            addOrigin(builder, originOffset)
            addSource(builder, sourceOffset)
            addEventId(builder, eventIdOffset)
            addSequenceNumber(builder, sequenceNumber)
            addObservationTime(builder, observationTimeOffset)
            addMessageType(builder, messageTypeOffset)
            addLaunchTime(builder, launchTimeOffset)
            addClassificationMarking(builder, classificationMarkingOffset)
            addId(builder, idOffset)
            addDataMode(builder, dataMode)
            addHighZenithAzimuth(builder, highZenithAzimuth)
            addStereoFlag(builder, stereoFlag)
            return endLaunchDetection_Ingest(builder)
        }
        fun startLaunchDetection_Ingest(builder: FlatBufferBuilder) = builder.startTable(27)
        fun addId(builder: FlatBufferBuilder, id: Int) = builder.addOffset(0, id, 0)
        fun addClassificationMarking(builder: FlatBufferBuilder, classificationMarking: Int) = builder.addOffset(1, classificationMarking, 0)
        fun addLaunchTime(builder: FlatBufferBuilder, launchTime: Int) = builder.addOffset(2, launchTime, 0)
        fun addMessageType(builder: FlatBufferBuilder, messageType: Int) = builder.addOffset(3, messageType, 0)
        fun addLaunchLatitude(builder: FlatBufferBuilder, launchLatitude: Double) = builder.addDouble(4, launchLatitude, 0.0)
        fun addLaunchLongitude(builder: FlatBufferBuilder, launchLongitude: Double) = builder.addDouble(5, launchLongitude, 0.0)
        fun addLaunchAzimuth(builder: FlatBufferBuilder, launchAzimuth: Double) = builder.addDouble(6, launchAzimuth, 0.0)
        fun addRaan(builder: FlatBufferBuilder, raan: Double) = builder.addDouble(7, raan, 0.0)
        fun addInclination(builder: FlatBufferBuilder, inclination: Double) = builder.addDouble(8, inclination, 0.0)
        fun addObservationTime(builder: FlatBufferBuilder, observationTime: Int) = builder.addOffset(9, observationTime, 0)
        fun addObservationLatitude(builder: FlatBufferBuilder, observationLatitude: Double) = builder.addDouble(10, observationLatitude, 0.0)
        fun addObservationLongitude(builder: FlatBufferBuilder, observationLongitude: Double) = builder.addDouble(11, observationLongitude, 0.0)
        fun addObservationAltitude(builder: FlatBufferBuilder, observationAltitude: Double) = builder.addDouble(12, observationAltitude, 0.0)
        fun addStereoFlag(builder: FlatBufferBuilder, stereoFlag: Boolean) = builder.addBoolean(13, stereoFlag, false)
        fun addHighZenithAzimuth(builder: FlatBufferBuilder, highZenithAzimuth: Boolean) = builder.addBoolean(14, highZenithAzimuth, false)
        fun addSequenceNumber(builder: FlatBufferBuilder, sequenceNumber: Int) = builder.addInt(15, sequenceNumber, 0)
        fun addEventId(builder: FlatBufferBuilder, eventId: Int) = builder.addOffset(16, eventId, 0)
        fun addSource(builder: FlatBufferBuilder, source: Int) = builder.addOffset(17, source, 0)
        fun addOrigin(builder: FlatBufferBuilder, origin: Int) = builder.addOffset(18, origin, 0)
        fun addDescriptor(builder: FlatBufferBuilder, descriptor: Int) = builder.addOffset(19, descriptor, 0)
        fun addTags(builder: FlatBufferBuilder, tags: Int) = builder.addOffset(20, tags, 0)
        fun createTagsVector(builder: FlatBufferBuilder, data: IntArray) : Int {
            builder.startVector(4, data.size, 4)
            for (i in data.size - 1 downTo 0) {
                builder.addOffset(data[i])
            }
            return builder.endVector()
        }
        fun startTagsVector(builder: FlatBufferBuilder, numElems: Int) = builder.startVector(4, numElems, 4)
        fun addOrigNetwork(builder: FlatBufferBuilder, origNetwork: Int) = builder.addOffset(21, origNetwork, 0)
        fun addDataMode(builder: FlatBufferBuilder, dataMode: Byte) = builder.addByte(22, dataMode, 0)
        fun addCreatedAt(builder: FlatBufferBuilder, createdAt: Int) = builder.addOffset(23, createdAt, 0)
        fun addCreatedBy(builder: FlatBufferBuilder, createdBy: Int) = builder.addOffset(24, createdBy, 0)
        fun addUpdatedAt(builder: FlatBufferBuilder, updatedAt: Int) = builder.addOffset(25, updatedAt, 0)
        fun addUpdatedBy(builder: FlatBufferBuilder, updatedBy: Int) = builder.addOffset(26, updatedBy, 0)
        fun endLaunchDetection_Ingest(builder: FlatBufferBuilder) : Int {
            val o = builder.endTable()
            return o
        }
        fun finishLaunchDetectionIngestBuffer(builder: FlatBufferBuilder, offset: Int) = builder.finish(offset, "LAUN")
        fun finishSizePrefixedLaunchDetection_IngestBuffer(builder: FlatBufferBuilder, offset: Int) = builder.finishSizePrefixed(offset, "LAUN")
    }
}
