// automatically generated by the FlatBuffers compiler, do not modify

import com.google.flatbuffers.BaseVector
import com.google.flatbuffers.BooleanVector
import com.google.flatbuffers.ByteVector
import com.google.flatbuffers.Constants
import com.google.flatbuffers.DoubleVector
import com.google.flatbuffers.FlatBufferBuilder
import com.google.flatbuffers.FloatVector
import com.google.flatbuffers.LongVector
import com.google.flatbuffers.StringVector
import com.google.flatbuffers.Struct
import com.google.flatbuffers.Table
import com.google.flatbuffers.UnionVector
import java.nio.ByteBuffer
import java.nio.ByteOrder
import kotlin.math.sign

/**
 * /// Collection of air refueling events occurring on this flight.
 */
@Suppress("unused")
class FlightPlanAirRefuelEvents_Full : Table() {

    fun __init(_i: Int, _bb: ByteBuffer)  {
        __reset(_i, _bb)
    }
    fun __assign(_i: Int, _bb: ByteBuffer) : FlightPlanAirRefuelEvents_Full {
        __init(_i, _bb)
        return this
    }
    /**
     * Additional degrade for air refueling, cumulative with fuelDegrade field percent.
     * Example: /// Example: 3.1
     * Constraints: No constraints specified.
     */
    val arDegrade : Double
        get() {
            val o = __offset(4)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * The number of this air refueling event within the flight plan.
     * Example: /// Example: 2
     * Constraints: No constraints specified.
     */
    val arNum : Int
        get() {
            val o = __offset(6)
            return if(o != 0) bb.getInt(o + bb_pos) else 0
        }
    /**
     * Fuel onloaded (use positive numbers) or fuel offloaded (use negative numbers) in pounds.
     * Example: /// Example: 1500.1
     * Constraints: No constraints specified.
     */
    val arExchangedFuel : Double
        get() {
            val o = __offset(8)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Fuel required to fly from air refueling exit point to air refueling divert alternate airfield in pounds.
     * Example: /// Example: 143000.1
     * Constraints: No constraints specified.
     */
    val divertFuel : Double
        get() {
            val o = __offset(10)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Fuel remaining at the air refueling exit in pounds.
     * Example: /// Example: 160000.1
     * Constraints: No constraints specified.
     */
    val exitFuel : Double
        get() {
            val o = __offset(12)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    companion object {
        fun validateVersion() = Constants.FLATBUFFERS_24_3_25()
        fun getRootAsFlightPlanAirRefuelEvents_Full(_bb: ByteBuffer): FlightPlanAirRefuelEvents_Full = getRootAsFlightPlanAirRefuelEvents_Full(_bb, FlightPlanAirRefuelEvents_Full())
        fun getRootAsFlightPlanAirRefuelEvents_Full(_bb: ByteBuffer, obj: FlightPlanAirRefuelEvents_Full): FlightPlanAirRefuelEvents_Full {
            _bb.order(ByteOrder.LITTLE_ENDIAN)
            return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb))
        }
        fun FlightPlanAirRefuelEvents_FullBufferHasIdentifier(_bb: ByteBuffer) : Boolean = __has_identifier(_bb, "FLIG")
        fun createFlightPlanAirRefuelEvents_Full(builder: FlatBufferBuilder, arDegrade: Double, arNum: Int, arExchangedFuel: Double, divertFuel: Double, exitFuel: Double) : Int {
            builder.startTable(5)
            addExitFuel(builder, exitFuel)
            addDivertFuel(builder, divertFuel)
            addArExchangedFuel(builder, arExchangedFuel)
            addArDegrade(builder, arDegrade)
            addArNum(builder, arNum)
            return endFlightPlanAirRefuelEvents_Full(builder)
        }
        fun startFlightPlanAirRefuelEvents_Full(builder: FlatBufferBuilder) = builder.startTable(5)
        fun addArDegrade(builder: FlatBufferBuilder, arDegrade: Double) = builder.addDouble(0, arDegrade, 0.0)
        fun addArNum(builder: FlatBufferBuilder, arNum: Int) = builder.addInt(1, arNum, 0)
        fun addArExchangedFuel(builder: FlatBufferBuilder, arExchangedFuel: Double) = builder.addDouble(2, arExchangedFuel, 0.0)
        fun addDivertFuel(builder: FlatBufferBuilder, divertFuel: Double) = builder.addDouble(3, divertFuel, 0.0)
        fun addExitFuel(builder: FlatBufferBuilder, exitFuel: Double) = builder.addDouble(4, exitFuel, 0.0)
        fun endFlightPlanAirRefuelEvents_Full(builder: FlatBufferBuilder) : Int {
            val o = builder.endTable()
            return o
        }
        fun finishFlightPlanAirRefuelEventsFullBuffer(builder: FlatBufferBuilder, offset: Int) = builder.finish(offset, "FLIG")
        fun finishSizePrefixedFlightPlanAirRefuelEvents_FullBuffer(builder: FlatBufferBuilder, offset: Int) = builder.finishSizePrefixed(offset, "FLIG")
    }
}
