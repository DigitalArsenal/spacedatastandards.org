// automatically generated by the FlatBuffers compiler, do not modify

import com.google.flatbuffers.BaseVector
import com.google.flatbuffers.BooleanVector
import com.google.flatbuffers.ByteVector
import com.google.flatbuffers.Constants
import com.google.flatbuffers.DoubleVector
import com.google.flatbuffers.FlatBufferBuilder
import com.google.flatbuffers.FloatVector
import com.google.flatbuffers.LongVector
import com.google.flatbuffers.StringVector
import com.google.flatbuffers.Struct
import com.google.flatbuffers.Table
import com.google.flatbuffers.UnionVector
import java.nio.ByteBuffer
import java.nio.ByteOrder
import kotlin.math.sign

/**
 * /// Collection of point groups generated for this flight plan. Groups include point sets for Extended Operations (ETOPS), Critical Fuel Point, and Equal Time Point (ETP).
 */
@Suppress("unused")
class FlightPlanPointGroups_Abridged : Table() {

    fun __init(_i: Int, _bb: ByteBuffer)  {
        __reset(_i, _bb)
    }
    fun __assign(_i: Int, _bb: ByteBuffer) : FlightPlanPointGroups_Abridged {
        __init(_i, _bb)
        return this
    }
    /**
     * Name of the point group, usually Extended Operations (ETOPS), Critical Fuel Point, and Equal Time Point (ETP) sections.
     * Example: /// Example: ETOPS_CF_POINT_1
     * Constraints: Minimum length = 0, Maximum length = 36
     */
    val pointGroupName : String?
        get() {
            val o = __offset(4)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val pointGroupNameAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(4, 1)
    fun pointGroupNameInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 4, 1)
    /**
     * Specifies which Point Group case requires the most fuel.
     * Example: /// Example: DEPRESSURIZED ENGINE OUT ETP
     * Constraints: Minimum length = 0, Maximum length = 48
     */
    val worstFuelCase : String?
        get() {
            val o = __offset(6)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val worstFuelCaseAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(6, 1)
    fun worstFuelCaseInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 6, 1)
    /**
     * Name of the last suitable airfield, International Civil Aviation Organization (ICAO) code preferred.
     * Example: /// Example: LPPD
     * Constraints: Minimum length = 0, Maximum length = 5
     */
    val lsafName : String?
        get() {
            val o = __offset(8)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val lsafNameAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(8, 1)
    fun lsafNameInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 8, 1)
    /**
     * Distance from the Equal Time Point (ETP) to the last suitable airfield in nautical miles.
     * Example: /// Example: 684.1
     * Constraints: No constraints specified.
     */
    val lsafDistance : Double
        get() {
            val o = __offset(10)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Distance from the Equal Time Point (ETP) to the first suitable airfield in nautical miles.
     * Example: /// Example: 684.1
     * Constraints: No constraints specified.
     */
    val fsafDistance : Double
        get() {
            val o = __offset(12)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Distance from the Extended Operations (ETOPS) point to the recovery airfield in nautical miles.
     * Example: /// Example: 684.1
     * Constraints: No constraints specified.
     */
    val etopsDistance : Double
        get() {
            val o = __offset(14)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Time to fly from the Equal Time Point (ETP) to the last suitable airfield expressed in HH:MM format.
     * Example: /// Example: 01:23
     * Constraints: Minimum length = 0, Maximum length = 6
     */
    val lsafTime : String?
        get() {
            val o = __offset(16)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val lsafTimeAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(16, 1)
    fun lsafTimeInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 16, 1)
    /**
     * Time to fly from the Equal Time Point (ETP) to the first suitable airfield expressed in HH:MM format.
     * Example: /// Example: 01:23
     * Constraints: Minimum length = 0, Maximum length = 6
     */
    val fsafTime : String?
        get() {
            val o = __offset(18)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val fsafTimeAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(18, 1)
    fun fsafTimeInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 18, 1)
    /**
     * Time to fly from the Extended Operations (ETOPS) point to the recovery airfield expressed in HH:MM format.
     * Example: /// Example: 01:23
     * Constraints: Minimum length = 0, Maximum length = 6
     */
    val etopsTime : String?
        get() {
            val o = __offset(20)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val etopsTimeAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(20, 1)
    fun etopsTimeInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 20, 1)
    /**
     * Average wind factor from the Equal Time Point (ETP) to the last suitable airfield in knots.
     * Example: /// Example: 13.1
     * Constraints: No constraints specified.
     */
    val lsafAvgWindFactor : Double
        get() {
            val o = __offset(22)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Average wind factor from the Equal Time Point (ETP) to the first suitable airfield in knots.
     * Example: /// Example: 10.1
     * Constraints: No constraints specified.
     */
    val fsafAvgWindFactor : Double
        get() {
            val o = __offset(24)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Average wind factor from the Extended Operations (ETOPS) point to the recovery airfield in knots.
     * Example: /// Example: 10.1
     * Constraints: No constraints specified.
     */
    val etopsAvgWindFactor : Double
        get() {
            val o = __offset(26)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Temperature deviation from the Equal Time Point (ETP) to the last suitable airfield in degrees Celsius.
     * Example: /// Example: 9.1
     * Constraints: No constraints specified.
     */
    val lsafTempDev : Double
        get() {
            val o = __offset(28)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Temperature deviation from the Equal Time Point (ETP) to the first suitable airfield in degrees Celsius.
     * Example: /// Example: 9.1
     * Constraints: No constraints specified.
     */
    val fsafTempDev : Double
        get() {
            val o = __offset(30)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Temperature deviation from the Extended Operations (ETOPS) point to the recovery airfield in degrees Celsius.
     * Example: /// Example: 9.1
     * Constraints: No constraints specified.
     */
    val etopsTempDev : Double
        get() {
            val o = __offset(32)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Fuel required to fly from the Equal Time Point (ETP) to the last suitable airfield in pounds.
     * Example: /// Example: 50787.1
     * Constraints: No constraints specified.
     */
    val lsafReqFuel : Double
        get() {
            val o = __offset(34)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Fuel required to fly from the Equal Time Point (ETP) to the first suitable airfield in pounds.
     * Example: /// Example: 50380.1
     * Constraints: No constraints specified.
     */
    val fsafReqFuel : Double
        get() {
            val o = __offset(36)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Fuel required to fly from the Extended Operations (ETOPS) point to the recovery airfield in pounds.
     * Example: /// Example: 4412.1
     * Constraints: No constraints specified.
     */
    val etopsReqFuel : Double
        get() {
            val o = __offset(38)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Total time from takeoff when the point is reached expressed in HH:MM format.
     * Example: /// Example: 07:29
     * Constraints: Minimum length = 0, Maximum length = 6
     */
    val fromTakeoffTime : String?
        get() {
            val o = __offset(40)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val fromTakeoffTimeAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(40, 1)
    fun fromTakeoffTimeInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 40, 1)
    /**
     * Amount of planned fuel on board when the point is reached in pounds.
     * Example: /// Example: 190319.1
     * Constraints: No constraints specified.
     */
    val plannedFuel : Double
        get() {
            val o = __offset(42)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Flight level of the point at which the fuel was calculated in feet.
     * Example: /// Example: 100.1
     * Constraints: No constraints specified.
     */
    val fuelCalcAlt : Double
        get() {
            val o = __offset(44)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * True airspeed at which the fuel was calculated in knots.
     * Example: /// Example: 365.1
     * Constraints: No constraints specified.
     */
    val fuelCalcSpd : Double
        get() {
            val o = __offset(46)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Average fuel flow at which the fuel was calculated in pounds per hour.
     * Example: /// Example: 19693.1
     * Constraints: No constraints specified.
     */
    val avgFuelFlow : Double
        get() {
            val o = __offset(48)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Array of point data for this Point Group.
     * Example: /// Example: No example provided.
     * Constraints: No constraints specified.
     */
    fun flightPlanPoints(j: Int) : String? {
        val o = __offset(50)
        return if (o != 0) {
            __string(__vector(o) + j * 4)
        } else {
            null
        }
    }
    val flightPlanPointsLength : Int
        get() {
            val o = __offset(50); return if (o != 0) __vector_len(o) else 0
        }
    companion object {
        fun validateVersion() = Constants.FLATBUFFERS_24_3_25()
        fun getRootAsFlightPlanPointGroups_Abridged(_bb: ByteBuffer): FlightPlanPointGroups_Abridged = getRootAsFlightPlanPointGroups_Abridged(_bb, FlightPlanPointGroups_Abridged())
        fun getRootAsFlightPlanPointGroups_Abridged(_bb: ByteBuffer, obj: FlightPlanPointGroups_Abridged): FlightPlanPointGroups_Abridged {
            _bb.order(ByteOrder.LITTLE_ENDIAN)
            return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb))
        }
        fun FlightPlanPointGroups_AbridgedBufferHasIdentifier(_bb: ByteBuffer) : Boolean = __has_identifier(_bb, "FLIG")
        fun createFlightPlanPointGroups_Abridged(builder: FlatBufferBuilder, pointGroupNameOffset: Int, worstFuelCaseOffset: Int, lsafNameOffset: Int, lsafDistance: Double, fsafDistance: Double, etopsDistance: Double, lsafTimeOffset: Int, fsafTimeOffset: Int, etopsTimeOffset: Int, lsafAvgWindFactor: Double, fsafAvgWindFactor: Double, etopsAvgWindFactor: Double, lsafTempDev: Double, fsafTempDev: Double, etopsTempDev: Double, lsafReqFuel: Double, fsafReqFuel: Double, etopsReqFuel: Double, fromTakeoffTimeOffset: Int, plannedFuel: Double, fuelCalcAlt: Double, fuelCalcSpd: Double, avgFuelFlow: Double, flightPlanPointsOffset: Int) : Int {
            builder.startTable(24)
            addAvgFuelFlow(builder, avgFuelFlow)
            addFuelCalcSpd(builder, fuelCalcSpd)
            addFuelCalcAlt(builder, fuelCalcAlt)
            addPlannedFuel(builder, plannedFuel)
            addEtopsReqFuel(builder, etopsReqFuel)
            addFsafReqFuel(builder, fsafReqFuel)
            addLsafReqFuel(builder, lsafReqFuel)
            addEtopsTempDev(builder, etopsTempDev)
            addFsafTempDev(builder, fsafTempDev)
            addLsafTempDev(builder, lsafTempDev)
            addEtopsAvgWindFactor(builder, etopsAvgWindFactor)
            addFsafAvgWindFactor(builder, fsafAvgWindFactor)
            addLsafAvgWindFactor(builder, lsafAvgWindFactor)
            addEtopsDistance(builder, etopsDistance)
            addFsafDistance(builder, fsafDistance)
            addLsafDistance(builder, lsafDistance)
            addFlightPlanPoints(builder, flightPlanPointsOffset)
            addFromTakeoffTime(builder, fromTakeoffTimeOffset)
            addEtopsTime(builder, etopsTimeOffset)
            addFsafTime(builder, fsafTimeOffset)
            addLsafTime(builder, lsafTimeOffset)
            addLsafName(builder, lsafNameOffset)
            addWorstFuelCase(builder, worstFuelCaseOffset)
            addPointGroupName(builder, pointGroupNameOffset)
            return endFlightPlanPointGroups_Abridged(builder)
        }
        fun startFlightPlanPointGroups_Abridged(builder: FlatBufferBuilder) = builder.startTable(24)
        fun addPointGroupName(builder: FlatBufferBuilder, pointGroupName: Int) = builder.addOffset(0, pointGroupName, 0)
        fun addWorstFuelCase(builder: FlatBufferBuilder, worstFuelCase: Int) = builder.addOffset(1, worstFuelCase, 0)
        fun addLsafName(builder: FlatBufferBuilder, lsafName: Int) = builder.addOffset(2, lsafName, 0)
        fun addLsafDistance(builder: FlatBufferBuilder, lsafDistance: Double) = builder.addDouble(3, lsafDistance, 0.0)
        fun addFsafDistance(builder: FlatBufferBuilder, fsafDistance: Double) = builder.addDouble(4, fsafDistance, 0.0)
        fun addEtopsDistance(builder: FlatBufferBuilder, etopsDistance: Double) = builder.addDouble(5, etopsDistance, 0.0)
        fun addLsafTime(builder: FlatBufferBuilder, lsafTime: Int) = builder.addOffset(6, lsafTime, 0)
        fun addFsafTime(builder: FlatBufferBuilder, fsafTime: Int) = builder.addOffset(7, fsafTime, 0)
        fun addEtopsTime(builder: FlatBufferBuilder, etopsTime: Int) = builder.addOffset(8, etopsTime, 0)
        fun addLsafAvgWindFactor(builder: FlatBufferBuilder, lsafAvgWindFactor: Double) = builder.addDouble(9, lsafAvgWindFactor, 0.0)
        fun addFsafAvgWindFactor(builder: FlatBufferBuilder, fsafAvgWindFactor: Double) = builder.addDouble(10, fsafAvgWindFactor, 0.0)
        fun addEtopsAvgWindFactor(builder: FlatBufferBuilder, etopsAvgWindFactor: Double) = builder.addDouble(11, etopsAvgWindFactor, 0.0)
        fun addLsafTempDev(builder: FlatBufferBuilder, lsafTempDev: Double) = builder.addDouble(12, lsafTempDev, 0.0)
        fun addFsafTempDev(builder: FlatBufferBuilder, fsafTempDev: Double) = builder.addDouble(13, fsafTempDev, 0.0)
        fun addEtopsTempDev(builder: FlatBufferBuilder, etopsTempDev: Double) = builder.addDouble(14, etopsTempDev, 0.0)
        fun addLsafReqFuel(builder: FlatBufferBuilder, lsafReqFuel: Double) = builder.addDouble(15, lsafReqFuel, 0.0)
        fun addFsafReqFuel(builder: FlatBufferBuilder, fsafReqFuel: Double) = builder.addDouble(16, fsafReqFuel, 0.0)
        fun addEtopsReqFuel(builder: FlatBufferBuilder, etopsReqFuel: Double) = builder.addDouble(17, etopsReqFuel, 0.0)
        fun addFromTakeoffTime(builder: FlatBufferBuilder, fromTakeoffTime: Int) = builder.addOffset(18, fromTakeoffTime, 0)
        fun addPlannedFuel(builder: FlatBufferBuilder, plannedFuel: Double) = builder.addDouble(19, plannedFuel, 0.0)
        fun addFuelCalcAlt(builder: FlatBufferBuilder, fuelCalcAlt: Double) = builder.addDouble(20, fuelCalcAlt, 0.0)
        fun addFuelCalcSpd(builder: FlatBufferBuilder, fuelCalcSpd: Double) = builder.addDouble(21, fuelCalcSpd, 0.0)
        fun addAvgFuelFlow(builder: FlatBufferBuilder, avgFuelFlow: Double) = builder.addDouble(22, avgFuelFlow, 0.0)
        fun addFlightPlanPoints(builder: FlatBufferBuilder, flightPlanPoints: Int) = builder.addOffset(23, flightPlanPoints, 0)
        fun createFlightPlanPointsVector(builder: FlatBufferBuilder, data: IntArray) : Int {
            builder.startVector(4, data.size, 4)
            for (i in data.size - 1 downTo 0) {
                builder.addOffset(data[i])
            }
            return builder.endVector()
        }
        fun startFlightPlanPointsVector(builder: FlatBufferBuilder, numElems: Int) = builder.startVector(4, numElems, 4)
        fun endFlightPlanPointGroups_Abridged(builder: FlatBufferBuilder) : Int {
            val o = builder.endTable()
            return o
        }
        fun finishFlightPlanPointGroupsAbridgedBuffer(builder: FlatBufferBuilder, offset: Int) = builder.finish(offset, "FLIG")
        fun finishSizePrefixedFlightPlanPointGroups_AbridgedBuffer(builder: FlatBufferBuilder, offset: Int) = builder.finishSizePrefixed(offset, "FLIG")
    }
}
