// automatically generated by the FlatBuffers compiler, do not modify

import com.google.flatbuffers.BaseVector
import com.google.flatbuffers.BooleanVector
import com.google.flatbuffers.ByteVector
import com.google.flatbuffers.Constants
import com.google.flatbuffers.DoubleVector
import com.google.flatbuffers.FlatBufferBuilder
import com.google.flatbuffers.FloatVector
import com.google.flatbuffers.LongVector
import com.google.flatbuffers.StringVector
import com.google.flatbuffers.Struct
import com.google.flatbuffers.Table
import com.google.flatbuffers.UnionVector
import java.nio.ByteBuffer
import java.nio.ByteOrder
import kotlin.math.sign

/**
 * /// A grouping of zero or more target reports for which the sensor provides a single time, sensor position, reference position on the ground with simple estimates for the observed area at the reported time, and other pertinent data.
 */
@Suppress("unused")
class MtiDwell_Ingest : Table() {

    fun __init(_i: Int, _bb: ByteBuffer)  {
        __reset(_i, _bb)
    }
    fun __assign(_i: Int, _bb: ByteBuffer) : MtiDwell_Ingest {
        __init(_i, _bb)
        return this
    }
    /**
     * Sequential count of a revisit of the bounding area in the last sent Job Definition Segment, where a Revisit Index of '0' indicates the first revisit.
     * Example: /// Example: 12
     * Constraints: No constraints specified.
     */
    val d2 : Int
        get() {
            val o = __offset(4)
            return if(o != 0) bb.getInt(o + bb_pos) else 0
        }
    /**
     * Temporally sequential count of a dwell within the revisit of a particular bounding area for a given job ID.
     * Example: /// Example: 12
     * Constraints: No constraints specified.
     */
    val d3 : Int
        get() {
            val o = __offset(6)
            return if(o != 0) bb.getInt(o + bb_pos) else 0
        }
    /**
     * Flag indicating the last dwell of the revisit.
     * Example: /// Example: False
     * Constraints: No constraints specified.
     */
    val d4 : Boolean
        get() {
            val o = __offset(8)
            return if(o != 0) 0.toByte() != bb.get(o + bb_pos) else false
        }
    /**
     * Count of the total number of targets reported during this dwell and sent in this Dwell Segment.
     * Example: /// Example: 12
     * Constraints: No constraints specified.
     */
    val d5 : Int
        get() {
            val o = __offset(10)
            return if(o != 0) bb.getInt(o + bb_pos) else 0
        }
    /**
     * Elapsed time, expressed in milliseconds, from midnight at the beginning of the day specified in the Reference Time fields (missionRefTime) of the Mission Segment.
     * Example: /// Example: 1234567890
     * Constraints: No constraints specified.
     */
    val d6 : Long
        get() {
            val o = __offset(12)
            return if(o != 0) bb.getLong(o + bb_pos) else 0L
        }
    /**
     * North-South position of the sensor at the temporal center of the dwell, in degrees.
     * Example: /// Example: 1.2
     * Constraints: No constraints specified.
     */
    val d7 : Double
        get() {
            val o = __offset(14)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * The East-West position of the sensor at the temporal center of the dwell, in degrees East (positive, 0 to 180) or West (negative, 0 to -180) of the Prime Meridian.
     * Example: /// Example: 12
     * Constraints: No constraints specified.
     */
    val d8 : Double
        get() {
            val o = __offset(16)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * The altitude of the sensor at temporal center of the dwell, above the WGS 84 ellipsoid, expressed in centimeters.
     * Example: /// Example: 12
     * Constraints: No constraints specified.
     */
    val d9 : Int
        get() {
            val o = __offset(18)
            return if(o != 0) bb.getInt(o + bb_pos) else 0
        }
    /**
     * Factor which modifies the value of the reported target latitude (Delta Latitude, field D32.4).
     * Example: /// Example: 1.2
     * Constraints: No constraints specified.
     */
    val d10 : Double
        get() {
            val o = __offset(20)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Factor which modifies the value of the reported target longitude (Delta Longitude, field D32.5).
     * Example: /// Example: 1.2
     * Constraints: No constraints specified.
     */
    val d11 : Double
        get() {
            val o = __offset(22)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Standard deviation in the estimated horizontal sensor location at the time of the dwell, measured along the sensor track direction (field D15), in centimeters.
     * Example: /// Example: 12
     * Constraints: No constraints specified.
     */
    val d12 : Int
        get() {
            val o = __offset(24)
            return if(o != 0) bb.getInt(o + bb_pos) else 0
        }
    /**
     * Standard deviation in the estimated horizontal sensor location at the time of the dwell, measured orthogonal to the sensor track direction (field D15), in centimeters.
     * Example: /// Example: 12
     * Constraints: No constraints specified.
     */
    val d13 : Int
        get() {
            val o = __offset(26)
            return if(o != 0) bb.getInt(o + bb_pos) else 0
        }
    /**
     * Standard deviation of the sensor altitude estimate (field D9), in centimeters.
     * Example: /// Example: 12
     * Constraints: No constraints specified.
     */
    val d14 : Int
        get() {
            val o = __offset(28)
            return if(o != 0) bb.getInt(o + bb_pos) else 0
        }
    /**
     * Ground track of the sensor at the time of the dwell, as the angle in degrees (clockwise) from True North.
     * Example: /// Example: 1.2
     * Constraints: No constraints specified.
     */
    val d15 : Double
        get() {
            val o = __offset(30)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Ground speed of the sensor at the time of the dwell, in millimeters per second.
     * Example: /// Example: 12
     * Constraints: No constraints specified.
     */
    val d16 : Int
        get() {
            val o = __offset(32)
            return if(o != 0) bb.getInt(o + bb_pos) else 0
        }
    /**
     * Velocity of the sensor in the vertical direction, in decimeters per second.
     * Example: /// Example: 2
     * Constraints: No constraints specified.
     */
    val d17 : Int
        get() {
            val o = __offset(34)
            return if(o != 0) bb.getInt(o + bb_pos) else 0
        }
    /**
     * Standard deviation of the estimate of the sensor track, in degrees.
     * Example: /// Example: 2
     * Constraints: No constraints specified.
     */
    val d18 : Int
        get() {
            val o = __offset(36)
            return if(o != 0) bb.getInt(o + bb_pos) else 0
        }
    /**
     * Standard deviation of estimate of the sensor speed, in millimeters per second.
     * Example: /// Example: 12
     * Constraints: No constraints specified.
     */
    val d19 : Int
        get() {
            val o = __offset(38)
            return if(o != 0) bb.getInt(o + bb_pos) else 0
        }
    /**
     * Standard deviation of estimate of the sensor vertical velocity, expressed in centimeters per second.
     * Example: /// Example: 12
     * Constraints: No constraints specified.
     */
    val d20 : Int
        get() {
            val o = __offset(40)
            return if(o != 0) bb.getInt(o + bb_pos) else 0
        }
    /**
     * Heading of the platform at the time of the dwell, as the angle in degrees (clockwise) from True North to the roll axis of the platform.
     * Example: /// Example: 1.2
     * Constraints: No constraints specified.
     */
    val d21 : Double
        get() {
            val o = __offset(42)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Pitch angle of the platform at the time of the dwell, in degrees.
     * Example: /// Example: 12.23
     * Constraints: No constraints specified.
     */
    val d22 : Double
        get() {
            val o = __offset(44)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Roll angle of the platform at the time of the dwell, in degrees.
     * Example: /// Example: 12.23
     * Constraints: No constraints specified.
     */
    val d23 : Double
        get() {
            val o = __offset(46)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * The North-South position of the center of the dwell area, expressed as degrees North (positive) or South (negative) of the Equator.
     * Example: /// Example: 12.23
     * Constraints: No constraints specified.
     */
    val d24 : Double
        get() {
            val o = __offset(48)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * The East-West position of the center of the dwell area, expressed as degrees East (positive, 0 to 180) or West (negative, 0 to -180) of the Prime Meridian.
     * Example: /// Example: 12.23
     * Constraints: No constraints specified.
     */
    val d25 : Double
        get() {
            val o = __offset(50)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Distance on the earth surface, expressed in kilometers, from the near edge to the center of the dwell area.
     * Example: /// Example: 12.23
     * Constraints: No constraints specified.
     */
    val d26 : Double
        get() {
            val o = __offset(52)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * For dwell based radars, one-half of the 3-dB beamwidth.  For non-dwell based radars, the angle between the beginning of the dwell to the center of the dwell.  Measured in degrees.
     * Example: /// Example: 12.23
     * Constraints: No constraints specified.
     */
    val d27 : Double
        get() {
            val o = __offset(54)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Rotation of the sensor broadside face about the local vertical axis of the platform, in degrees.
     * Example: /// Example: 12.23
     * Constraints: No constraints specified.
     */
    val d28 : Double
        get() {
            val o = __offset(56)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Rotation angle of the sensor about the transverse axis of the sensor broadside, in degrees.
     * Example: /// Example: 12.23
     * Constraints: No constraints specified.
     */
    val d29 : Double
        get() {
            val o = __offset(58)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Rotation angle of the sensor about the transverse axis of the sensor broadside, in degrees.
     * Example: /// Example: 12.23
     * Constraints: No constraints specified.
     */
    val d30 : Double
        get() {
            val o = __offset(60)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Minimum velocity component, along the line of sight, which can be detected by the sensor, in decimeters per second.
     * Example: /// Example: 1
     * Constraints: No constraints specified.
     */
    val d31 : Int
        get() {
            val o = __offset(62)
            return if(o != 0) bb.getInt(o + bb_pos) else 0
        }
    /**
     * Minimum velocity component, along the line of sight, which can be detected by the sensor, in decimeters per second.
     * Example: /// Example: No example provided.
     * Constraints: No constraints specified.
     */
    fun d32(j: Int) : String? {
        val o = __offset(64)
        return if (o != 0) {
            __string(__vector(o) + j * 4)
        } else {
            null
        }
    }
    val d32Length : Int
        get() {
            val o = __offset(64); return if (o != 0) __vector_len(o) else 0
        }
    /**
     * Dwell timestamp in ISO8601 UTC format.
     * Example: /// Example: 2018-01-01T16:00:00.123Z
     * Constraints: No constraints specified.
     */
    val dwellts : String?
        get() {
            val o = __offset(66)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val dwelltsAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(66, 1)
    fun dwelltsInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 66, 1)
    companion object {
        fun validateVersion() = Constants.FLATBUFFERS_24_3_25()
        fun getRootAsMtiDwell_Ingest(_bb: ByteBuffer): MtiDwell_Ingest = getRootAsMtiDwell_Ingest(_bb, MtiDwell_Ingest())
        fun getRootAsMtiDwell_Ingest(_bb: ByteBuffer, obj: MtiDwell_Ingest): MtiDwell_Ingest {
            _bb.order(ByteOrder.LITTLE_ENDIAN)
            return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb))
        }
        fun MtiDwell_IngestBufferHasIdentifier(_bb: ByteBuffer) : Boolean = __has_identifier(_bb, "MTID")
        fun createMtiDwell_Ingest(builder: FlatBufferBuilder, d2: Int, d3: Int, d4: Boolean, d5: Int, d6: Long, d7: Double, d8: Double, d9: Int, d10: Double, d11: Double, d12: Int, d13: Int, d14: Int, d15: Double, d16: Int, d17: Int, d18: Int, d19: Int, d20: Int, d21: Double, d22: Double, d23: Double, d24: Double, d25: Double, d26: Double, d27: Double, d28: Double, d29: Double, d30: Double, d31: Int, d32Offset: Int, dwelltsOffset: Int) : Int {
            builder.startTable(32)
            addD30(builder, d30)
            addD29(builder, d29)
            addD28(builder, d28)
            addD27(builder, d27)
            addD26(builder, d26)
            addD25(builder, d25)
            addD24(builder, d24)
            addD23(builder, d23)
            addD22(builder, d22)
            addD21(builder, d21)
            addD15(builder, d15)
            addD11(builder, d11)
            addD10(builder, d10)
            addD8(builder, d8)
            addD7(builder, d7)
            addD6(builder, d6)
            addDwellts(builder, dwelltsOffset)
            addD32(builder, d32Offset)
            addD31(builder, d31)
            addD20(builder, d20)
            addD19(builder, d19)
            addD18(builder, d18)
            addD17(builder, d17)
            addD16(builder, d16)
            addD14(builder, d14)
            addD13(builder, d13)
            addD12(builder, d12)
            addD9(builder, d9)
            addD5(builder, d5)
            addD3(builder, d3)
            addD2(builder, d2)
            addD4(builder, d4)
            return endMtiDwell_Ingest(builder)
        }
        fun startMtiDwell_Ingest(builder: FlatBufferBuilder) = builder.startTable(32)
        fun addD2(builder: FlatBufferBuilder, d2: Int) = builder.addInt(0, d2, 0)
        fun addD3(builder: FlatBufferBuilder, d3: Int) = builder.addInt(1, d3, 0)
        fun addD4(builder: FlatBufferBuilder, d4: Boolean) = builder.addBoolean(2, d4, false)
        fun addD5(builder: FlatBufferBuilder, d5: Int) = builder.addInt(3, d5, 0)
        fun addD6(builder: FlatBufferBuilder, d6: Long) = builder.addLong(4, d6, 0L)
        fun addD7(builder: FlatBufferBuilder, d7: Double) = builder.addDouble(5, d7, 0.0)
        fun addD8(builder: FlatBufferBuilder, d8: Double) = builder.addDouble(6, d8, 0.0)
        fun addD9(builder: FlatBufferBuilder, d9: Int) = builder.addInt(7, d9, 0)
        fun addD10(builder: FlatBufferBuilder, d10: Double) = builder.addDouble(8, d10, 0.0)
        fun addD11(builder: FlatBufferBuilder, d11: Double) = builder.addDouble(9, d11, 0.0)
        fun addD12(builder: FlatBufferBuilder, d12: Int) = builder.addInt(10, d12, 0)
        fun addD13(builder: FlatBufferBuilder, d13: Int) = builder.addInt(11, d13, 0)
        fun addD14(builder: FlatBufferBuilder, d14: Int) = builder.addInt(12, d14, 0)
        fun addD15(builder: FlatBufferBuilder, d15: Double) = builder.addDouble(13, d15, 0.0)
        fun addD16(builder: FlatBufferBuilder, d16: Int) = builder.addInt(14, d16, 0)
        fun addD17(builder: FlatBufferBuilder, d17: Int) = builder.addInt(15, d17, 0)
        fun addD18(builder: FlatBufferBuilder, d18: Int) = builder.addInt(16, d18, 0)
        fun addD19(builder: FlatBufferBuilder, d19: Int) = builder.addInt(17, d19, 0)
        fun addD20(builder: FlatBufferBuilder, d20: Int) = builder.addInt(18, d20, 0)
        fun addD21(builder: FlatBufferBuilder, d21: Double) = builder.addDouble(19, d21, 0.0)
        fun addD22(builder: FlatBufferBuilder, d22: Double) = builder.addDouble(20, d22, 0.0)
        fun addD23(builder: FlatBufferBuilder, d23: Double) = builder.addDouble(21, d23, 0.0)
        fun addD24(builder: FlatBufferBuilder, d24: Double) = builder.addDouble(22, d24, 0.0)
        fun addD25(builder: FlatBufferBuilder, d25: Double) = builder.addDouble(23, d25, 0.0)
        fun addD26(builder: FlatBufferBuilder, d26: Double) = builder.addDouble(24, d26, 0.0)
        fun addD27(builder: FlatBufferBuilder, d27: Double) = builder.addDouble(25, d27, 0.0)
        fun addD28(builder: FlatBufferBuilder, d28: Double) = builder.addDouble(26, d28, 0.0)
        fun addD29(builder: FlatBufferBuilder, d29: Double) = builder.addDouble(27, d29, 0.0)
        fun addD30(builder: FlatBufferBuilder, d30: Double) = builder.addDouble(28, d30, 0.0)
        fun addD31(builder: FlatBufferBuilder, d31: Int) = builder.addInt(29, d31, 0)
        fun addD32(builder: FlatBufferBuilder, d32: Int) = builder.addOffset(30, d32, 0)
        fun createD32Vector(builder: FlatBufferBuilder, data: IntArray) : Int {
            builder.startVector(4, data.size, 4)
            for (i in data.size - 1 downTo 0) {
                builder.addOffset(data[i])
            }
            return builder.endVector()
        }
        fun startD32Vector(builder: FlatBufferBuilder, numElems: Int) = builder.startVector(4, numElems, 4)
        fun addDwellts(builder: FlatBufferBuilder, dwellts: Int) = builder.addOffset(31, dwellts, 0)
        fun endMtiDwell_Ingest(builder: FlatBufferBuilder) : Int {
            val o = builder.endTable()
            return o
        }
        fun finishMtiDwellIngestBuffer(builder: FlatBufferBuilder, offset: Int) = builder.finish(offset, "MTID")
        fun finishSizePrefixedMtiDwell_IngestBuffer(builder: FlatBufferBuilder, offset: Int) = builder.finishSizePrefixed(offset, "MTID")
    }
}
