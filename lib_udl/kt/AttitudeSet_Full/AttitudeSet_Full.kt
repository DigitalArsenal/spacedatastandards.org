// automatically generated by the FlatBuffers compiler, do not modify

import com.google.flatbuffers.BaseVector
import com.google.flatbuffers.BooleanVector
import com.google.flatbuffers.ByteVector
import com.google.flatbuffers.Constants
import com.google.flatbuffers.DoubleVector
import com.google.flatbuffers.FlatBufferBuilder
import com.google.flatbuffers.FloatVector
import com.google.flatbuffers.LongVector
import com.google.flatbuffers.StringVector
import com.google.flatbuffers.Struct
import com.google.flatbuffers.Table
import com.google.flatbuffers.UnionVector
import java.nio.ByteBuffer
import java.nio.ByteOrder
import kotlin.math.sign

/**
 * /// AttitudeSet represents a wrapper or collection of Onorbit Attitude 'points' and meta data indicating the specifics of the orientation of an on-orbit object.  Attitude is typically distributed in a flat file containing details of the attitude generation as well as a large collection of individual points at varying time steps. AttitudeSet is analogous to this flat file.
 */
@Suppress("unused")
class AttitudeSet_Full : Table() {

    fun __init(_i: Int, _bb: ByteBuffer)  {
        __reset(_i, _bb)
    }
    fun __assign(_i: Int, _bb: ByteBuffer) : AttitudeSet_Full {
        __init(_i, _bb)
        return this
    }
    /**
     * Unique identifier of the record, auto-generated by the system.
     * Example: /// Example: ATTITUDESET-ID
     * Constraints: Minimum length = 1, Maximum length = 36
     */
    val id : String?
        get() {
            val o = __offset(4)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val idAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(4, 1)
    fun idInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 4, 1)
    /**
     * Classification marking of the data in IC/CAPCO Portion-marked format.
     * Example: /// Example: U
     * Constraints: Minimum length = 1, Maximum length = 128
     */
    val classificationMarking : String?
        get() {
            val o = __offset(6)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val classificationMarkingAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(6, 1)
    fun classificationMarkingInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 6, 1)
    /**
     * Unique identifier of the on-orbit satellite to which this attitude set applies.
     * Example: /// Example: 41947
     * Constraints: Minimum length = 0, Maximum length = 36
     */
    val idOnOrbit : String?
        get() {
            val o = __offset(8)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val idOnOrbitAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(8, 1)
    fun idOnOrbitInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 8, 1)
    /**
     * Satellite/catalog number of the on-orbit object to which this attitude set applies.
     * Example: /// Example: 41947
     * Constraints: No constraints specified.
     */
    val satNo : Int
        get() {
            val o = __offset(10)
            return if(o != 0) bb.getInt(o + bb_pos) else 0
        }
    /**
     * Optional identifier provided by the record source to indicate the target object of this attitude set. This may be an internal identifier and not necessarily map to a valid satellite number.
     * Example: /// Example: D6593
     * Constraints: Minimum length = 0, Maximum length = 36
     */
    val origObjectId : String?
        get() {
            val o = __offset(12)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val origObjectIdAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(12, 1)
    fun origObjectIdInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 12, 1)
    /**
     * The type of attitude message or messages associated with this set.
     * AEM = Attitude Ephemeris Message, specifying the attitude state of a single object at multiple epochs.
     * APM = Attitude Parameters Message, specifying the attitude state of a single object at a single epoch.
     * Example: /// Example: AEM
     * Constraints: Minimum length = 1, Maximum length = 3
     */
    val type : String?
        get() {
            val o = __offset(14)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val typeAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(14, 1)
    fun typeInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 14, 1)
    /**
     * Unique identifier of the parent (positional) Ephemeris Set, if this data is correlated with an Ephemeris.
     * Example: /// Example: 60f7a241-b7be-48d8-acf3-786670af53f9
     * Constraints: Minimum length = 0, Maximum length = 36
     */
    val esId : String?
        get() {
            val o = __offset(16)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val esIdAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(16, 1)
    fun esIdInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 16, 1)
    /**
     * Array of UDL UUIDs of one or more AttitudeSet records associated with this set.  For example, a spacecraft Attitude Ephemeris Set might include a reference to an Attitude Parameter Message defining the sensor to body frame transformation for a sensor onboard the spacecraft, which allows for calculation of the sensor orientation in frame2 of the attitude ephemeris.
     * Example: /// Example: ['2ea97de6-4680-4767-a07e-35d16398ef60']
     * Constraints: No constraints specified.
     */
    fun asRef(j: Int) : String? {
        val o = __offset(18)
        return if (o != 0) {
            __string(__vector(o) + j * 4)
        } else {
            null
        }
    }
    val asRefLength : Int
        get() {
            val o = __offset(18); return if (o != 0) __vector_len(o) else 0
        }
    /**
     * Unique identifier of the sensor to which this attitude set applies IF this set is reporting a single sensor orientation.
     * Example: /// Example: a7e99418-b6d6-29ab-e767-440a989cce26
     * Constraints: Minimum length = 0, Maximum length = 36
     */
    val idSensor : String?
        get() {
            val o = __offset(20)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val idSensorAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(20, 1)
    fun idSensorInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 20, 1)
    /**
     * Optional identifier provided by the record source to indicate the sensor identifier to which this attitude set applies IF this set is reporting a single sensor orientation. This may be an internal identifier and not necessarily a valid sensor ID.
     * Example: /// Example: ORIGSENSOR-ID
     * Constraints: Minimum length = 0, Maximum length = 64
     */
    val origSensorId : String?
        get() {
            val o = __offset(22)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val origSensorIdAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(22, 1)
    fun origSensorIdInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 22, 1)
    /**
     * The epoch or start time of the attitude parameter or attitude ephemeris, in ISO 8601 UTC format, with microsecond precision.  If this set is constituted by a single attitude parameter message then startTime is the epoch.
     * Example: /// Example: 2022-07-07T16:00:00.123456Z
     * Constraints: No constraints specified.
     */
    val startTime : String?
        get() {
            val o = __offset(24)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val startTimeAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(24, 1)
    fun startTimeInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 24, 1)
    /**
     * The end time of the attitude ephemeris, in ISO 8601 UTC format, with microsecond precision.  If this set is constituted by a single epoch attitude message then endTime should match the startTime.
     * Example: /// Example: 2022-07-07T18:00:00.654321Z
     * Constraints: No constraints specified.
     */
    val endTime : String?
        get() {
            val o = __offset(26)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val endTimeAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(26, 1)
    fun endTimeInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 26, 1)
    /**
     * Reference frame 1 of the quaternion or Euler angle transformation utilized in this attitude parameter or attitude ephemeris.  The UDL convention is that transformations occur FROM frame1 TO frame2.  A specific spacecraft frame or instrument name may be provided with the assumption the consumer understands the location of these frames (ex. SC BODY, J2000, LVLH, ICRF, INSTRUMENTx, THRUSTERx, etc.).
     * Example: /// Example: SCBODY
     * Constraints: Minimum length = 1, Maximum length = 36
     */
    val frame1 : String?
        get() {
            val o = __offset(28)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val frame1AsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(28, 1)
    fun frame1InByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 28, 1)
    /**
     * Reference frame 2 of the quaternion or Euler angle transformation utilized in this attitude parameter or attitude ephemeris.  The UDL convention is that transformations occur FROM frame1 TO frame2.  A specific spacecraft frame or instrument name may be provided with the assumption the consumer understands the location of these frames (ex. SC BODY, J2000, LVLH, ICRF, INSTRUMENTx, THRUSTERx, etc.).
     * Example: /// Example: J2000
     * Constraints: Minimum length = 1, Maximum length = 36
     */
    val frame2 : String?
        get() {
            val o = __offset(30)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val frame2AsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(30, 1)
    fun frame2InByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 30, 1)
    /**
     * Number of attitude records contained in this set.
     * Example: /// Example: 120
     * Constraints: No constraints specified.
     */
    val numPoints : Int
        get() {
            val o = __offset(32)
            return if(o != 0) bb.getInt(o + bb_pos) else 0
        }
    /**
     * Attitude ephemeris step size, in seconds. This applies to Attitude Ephemeris Messages (AEM) that employ a fixed step size.
     * Example: /// Example: 60
     * Constraints: No constraints specified.
     */
    val stepSize : Int
        get() {
            val o = __offset(34)
            return if(o != 0) bb.getInt(o + bb_pos) else 0
        }
    /**
     * Initial precession angle (ECI J2000 frame) in degrees.
     * Example: /// Example: 30.5
     * Constraints: No constraints specified.
     */
    val precAngleInit : Double
        get() {
            val o = __offset(36)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Initial spin angle (ECI J2000 frame) in degrees.
     * Example: /// Example: 25.5
     * Constraints: No constraints specified.
     */
    val spinAngleInit : Double
        get() {
            val o = __offset(38)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * The rotation sequence of the Euler angles in which attitude reference frame transformation occurs (from left to right). One, two, or three axis rotations are supported and are represented by one, two, or three characters respectively.  Repeated axis rotations are also supported, however, these rotations should not be sequential.  The numeric sequence values correspond to the body angles/rates as follows: 1 - xAngle/xRate, 2 - yAngle/yRate, and 3 - zAngle/zRate.  Valid sequences are: 123, 132, 213, 231, 312, 321, 121, 131, 212, 232, 313, 323, 12, 13, 21, 23, 31, 32, 1, 2, and 3. 
     * The following represent examples of possible rotation sequences:  A single rotation about the Y-axis can be expressed as '2', a double rotation with X-Z sequence can be expressed as '13', and a triple rotation with Z-X-Y sequence can be expressed as '312'.
     * Example: /// Example: 123
     * Constraints: Minimum length = 0, Maximum length = 3
     */
    val eulerRotSeq : String?
        get() {
            val o = __offset(40)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val eulerRotSeqAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(40, 1)
    fun eulerRotSeqInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 40, 1)
    /**
     * Collection of attitude data associated with this Attitude Set.
     * Example: /// Example: No example provided.
     * Constraints: No constraints specified.
     */
    fun attitudeList(j: Int) : String? {
        val o = __offset(42)
        return if (o != 0) {
            __string(__vector(o) + j * 4)
        } else {
            null
        }
    }
    val attitudeListLength : Int
        get() {
            val o = __offset(42); return if (o != 0) __vector_len(o) else 0
        }
    /**
     * Recommended interpolation method for estimating attitude ephemeris data.
     * Example: /// Example: LINEAR
     * Constraints: Minimum length = 0, Maximum length = 16
     */
    val interpolator : String?
        get() {
            val o = __offset(44)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val interpolatorAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(44, 1)
    fun interpolatorInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 44, 1)
    /**
     * Recommended polynomial interpolation degree.
     * Example: /// Example: 2
     * Constraints: No constraints specified.
     */
    val interpolatorDegree : Int
        get() {
            val o = __offset(46)
            return if(o != 0) bb.getInt(o + bb_pos) else 0
        }
    /**
     * Optional notes/comments for this attitude set.
     * Example: /// Example: Notes for this attitude set
     * Constraints: Minimum length = 0, Maximum length = 1024
     */
    val notes : String?
        get() {
            val o = __offset(48)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val notesAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(48, 1)
    fun notesInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 48, 1)
    /**
     * Time the row was created in the database, auto-populated by the system.
     * Example: /// Example: 2022-07-05T12:00:00.123Z
     * Constraints: No constraints specified.
     */
    val createdAt : String?
        get() {
            val o = __offset(50)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val createdAtAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(50, 1)
    fun createdAtInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 50, 1)
    /**
     * Application user who created the row in the database, auto-populated by the system.
     * Example: /// Example: some.user
     * Constraints: Minimum length = 1, Maximum length = 64
     */
    val createdBy : String?
        get() {
            val o = __offset(52)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val createdByAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(52, 1)
    fun createdByInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 52, 1)
    /**
     * Source of the data.
     * Example: /// Example: Bluestaq
     * Constraints: Minimum length = 1, Maximum length = 36
     */
    val source : String?
        get() {
            val o = __offset(54)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val sourceAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(54, 1)
    fun sourceInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 54, 1)
    /**
     * Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
     * Example: /// Example: THIRD_PARTY_DATASOURCE
     * Constraints: Minimum length = 0, Maximum length = 64
     */
    val origin : String?
        get() {
            val o = __offset(56)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val originAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(56, 1)
    fun originInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 56, 1)
    /**
     * Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
     * EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
     * REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
     * SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
     * TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
     * Example: /// Example: TEST
     * Constraints: Minimum length = 1, Maximum length = 32
     */
    val dataMode : Byte
        get() {
            val o = __offset(58)
            return if(o != 0) bb.get(o + bb_pos) else 0
        }
    /**
     * The originating source network on which this record was created, auto-populated by the system.
     * Example: /// Example: ORIG
     * Constraints: Minimum length = 1, Maximum length = 32
     */
    val origNetwork : String?
        get() {
            val o = __offset(60)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val origNetworkAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(60, 1)
    fun origNetworkInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 60, 1)
    /**
     * No description provided.
     * Example: /// Example: No example provided.
     * Constraints: No constraints specified.
     */
    val onOrbit : String?
        get() {
            val o = __offset(62)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val onOrbitAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(62, 1)
    fun onOrbitInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 62, 1)
    companion object {
        fun validateVersion() = Constants.FLATBUFFERS_24_3_25()
        fun getRootAsAttitudeSet_Full(_bb: ByteBuffer): AttitudeSet_Full = getRootAsAttitudeSet_Full(_bb, AttitudeSet_Full())
        fun getRootAsAttitudeSet_Full(_bb: ByteBuffer, obj: AttitudeSet_Full): AttitudeSet_Full {
            _bb.order(ByteOrder.LITTLE_ENDIAN)
            return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb))
        }
        fun AttitudeSet_FullBufferHasIdentifier(_bb: ByteBuffer) : Boolean = __has_identifier(_bb, "ATTI")
        fun createAttitudeSet_Full(builder: FlatBufferBuilder, idOffset: Int, classificationMarkingOffset: Int, idOnOrbitOffset: Int, satNo: Int, origObjectIdOffset: Int, typeOffset: Int, esIdOffset: Int, asRefOffset: Int, idSensorOffset: Int, origSensorIdOffset: Int, startTimeOffset: Int, endTimeOffset: Int, frame1Offset: Int, frame2Offset: Int, numPoints: Int, stepSize: Int, precAngleInit: Double, spinAngleInit: Double, eulerRotSeqOffset: Int, attitudeListOffset: Int, interpolatorOffset: Int, interpolatorDegree: Int, notesOffset: Int, createdAtOffset: Int, createdByOffset: Int, sourceOffset: Int, originOffset: Int, dataMode: Byte, origNetworkOffset: Int, onOrbitOffset: Int) : Int {
            builder.startTable(30)
            addSpinAngleInit(builder, spinAngleInit)
            addPrecAngleInit(builder, precAngleInit)
            addOnOrbit(builder, onOrbitOffset)
            addOrigNetwork(builder, origNetworkOffset)
            addOrigin(builder, originOffset)
            addSource(builder, sourceOffset)
            addCreatedBy(builder, createdByOffset)
            addCreatedAt(builder, createdAtOffset)
            addNotes(builder, notesOffset)
            addInterpolatorDegree(builder, interpolatorDegree)
            addInterpolator(builder, interpolatorOffset)
            addAttitudeList(builder, attitudeListOffset)
            addEulerRotSeq(builder, eulerRotSeqOffset)
            addStepSize(builder, stepSize)
            addNumPoints(builder, numPoints)
            addFrame2(builder, frame2Offset)
            addFrame1(builder, frame1Offset)
            addEndTime(builder, endTimeOffset)
            addStartTime(builder, startTimeOffset)
            addOrigSensorId(builder, origSensorIdOffset)
            addIdSensor(builder, idSensorOffset)
            addAsRef(builder, asRefOffset)
            addEsId(builder, esIdOffset)
            addType(builder, typeOffset)
            addOrigObjectId(builder, origObjectIdOffset)
            addSatNo(builder, satNo)
            addIdOnOrbit(builder, idOnOrbitOffset)
            addClassificationMarking(builder, classificationMarkingOffset)
            addId(builder, idOffset)
            addDataMode(builder, dataMode)
            return endAttitudeSet_Full(builder)
        }
        fun startAttitudeSet_Full(builder: FlatBufferBuilder) = builder.startTable(30)
        fun addId(builder: FlatBufferBuilder, id: Int) = builder.addOffset(0, id, 0)
        fun addClassificationMarking(builder: FlatBufferBuilder, classificationMarking: Int) = builder.addOffset(1, classificationMarking, 0)
        fun addIdOnOrbit(builder: FlatBufferBuilder, idOnOrbit: Int) = builder.addOffset(2, idOnOrbit, 0)
        fun addSatNo(builder: FlatBufferBuilder, satNo: Int) = builder.addInt(3, satNo, 0)
        fun addOrigObjectId(builder: FlatBufferBuilder, origObjectId: Int) = builder.addOffset(4, origObjectId, 0)
        fun addType(builder: FlatBufferBuilder, type: Int) = builder.addOffset(5, type, 0)
        fun addEsId(builder: FlatBufferBuilder, esId: Int) = builder.addOffset(6, esId, 0)
        fun addAsRef(builder: FlatBufferBuilder, asRef: Int) = builder.addOffset(7, asRef, 0)
        fun createAsRefVector(builder: FlatBufferBuilder, data: IntArray) : Int {
            builder.startVector(4, data.size, 4)
            for (i in data.size - 1 downTo 0) {
                builder.addOffset(data[i])
            }
            return builder.endVector()
        }
        fun startAsRefVector(builder: FlatBufferBuilder, numElems: Int) = builder.startVector(4, numElems, 4)
        fun addIdSensor(builder: FlatBufferBuilder, idSensor: Int) = builder.addOffset(8, idSensor, 0)
        fun addOrigSensorId(builder: FlatBufferBuilder, origSensorId: Int) = builder.addOffset(9, origSensorId, 0)
        fun addStartTime(builder: FlatBufferBuilder, startTime: Int) = builder.addOffset(10, startTime, 0)
        fun addEndTime(builder: FlatBufferBuilder, endTime: Int) = builder.addOffset(11, endTime, 0)
        fun addFrame1(builder: FlatBufferBuilder, frame1: Int) = builder.addOffset(12, frame1, 0)
        fun addFrame2(builder: FlatBufferBuilder, frame2: Int) = builder.addOffset(13, frame2, 0)
        fun addNumPoints(builder: FlatBufferBuilder, numPoints: Int) = builder.addInt(14, numPoints, 0)
        fun addStepSize(builder: FlatBufferBuilder, stepSize: Int) = builder.addInt(15, stepSize, 0)
        fun addPrecAngleInit(builder: FlatBufferBuilder, precAngleInit: Double) = builder.addDouble(16, precAngleInit, 0.0)
        fun addSpinAngleInit(builder: FlatBufferBuilder, spinAngleInit: Double) = builder.addDouble(17, spinAngleInit, 0.0)
        fun addEulerRotSeq(builder: FlatBufferBuilder, eulerRotSeq: Int) = builder.addOffset(18, eulerRotSeq, 0)
        fun addAttitudeList(builder: FlatBufferBuilder, attitudeList: Int) = builder.addOffset(19, attitudeList, 0)
        fun createAttitudeListVector(builder: FlatBufferBuilder, data: IntArray) : Int {
            builder.startVector(4, data.size, 4)
            for (i in data.size - 1 downTo 0) {
                builder.addOffset(data[i])
            }
            return builder.endVector()
        }
        fun startAttitudeListVector(builder: FlatBufferBuilder, numElems: Int) = builder.startVector(4, numElems, 4)
        fun addInterpolator(builder: FlatBufferBuilder, interpolator: Int) = builder.addOffset(20, interpolator, 0)
        fun addInterpolatorDegree(builder: FlatBufferBuilder, interpolatorDegree: Int) = builder.addInt(21, interpolatorDegree, 0)
        fun addNotes(builder: FlatBufferBuilder, notes: Int) = builder.addOffset(22, notes, 0)
        fun addCreatedAt(builder: FlatBufferBuilder, createdAt: Int) = builder.addOffset(23, createdAt, 0)
        fun addCreatedBy(builder: FlatBufferBuilder, createdBy: Int) = builder.addOffset(24, createdBy, 0)
        fun addSource(builder: FlatBufferBuilder, source: Int) = builder.addOffset(25, source, 0)
        fun addOrigin(builder: FlatBufferBuilder, origin: Int) = builder.addOffset(26, origin, 0)
        fun addDataMode(builder: FlatBufferBuilder, dataMode: Byte) = builder.addByte(27, dataMode, 0)
        fun addOrigNetwork(builder: FlatBufferBuilder, origNetwork: Int) = builder.addOffset(28, origNetwork, 0)
        fun addOnOrbit(builder: FlatBufferBuilder, onOrbit: Int) = builder.addOffset(29, onOrbit, 0)
        fun endAttitudeSet_Full(builder: FlatBufferBuilder) : Int {
            val o = builder.endTable()
            return o
        }
        fun finishAttitudeSetFullBuffer(builder: FlatBufferBuilder, offset: Int) = builder.finish(offset, "ATTI")
        fun finishSizePrefixedAttitudeSet_FullBuffer(builder: FlatBufferBuilder, offset: Int) = builder.finishSizePrefixed(offset, "ATTI")
    }
}
