// automatically generated by the FlatBuffers compiler, do not modify

import com.google.flatbuffers.BaseVector
import com.google.flatbuffers.BooleanVector
import com.google.flatbuffers.ByteVector
import com.google.flatbuffers.Constants
import com.google.flatbuffers.DoubleVector
import com.google.flatbuffers.FlatBufferBuilder
import com.google.flatbuffers.FloatVector
import com.google.flatbuffers.LongVector
import com.google.flatbuffers.StringVector
import com.google.flatbuffers.Struct
import com.google.flatbuffers.Table
import com.google.flatbuffers.UnionVector
import java.nio.ByteBuffer
import java.nio.ByteOrder
import kotlin.math.sign

/**
 * /// Keplerian orbital elements describing an orbit for a particular on-orbit satellite and applicable sensor data aiding in the orbit prediction.
 */
@Suppress("unused")
class OrbitTrack_Full : Table() {

    fun __init(_i: Int, _bb: ByteBuffer)  {
        __reset(_i, _bb)
    }
    fun __assign(_i: Int, _bb: ByteBuffer) : OrbitTrack_Full {
        __init(_i, _bb)
        return this
    }
    /**
     * Unique identifier of the record, auto-generated by the system if not provided on create operations.
     * Example: /// Example: ORBIT_TRACK_ID
     * Constraints: Minimum length = 1, Maximum length = 36
     */
    val id : String?
        get() {
            val o = __offset(4)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val idAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(4, 1)
    fun idInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 4, 1)
    /**
     * Classification marking of the data in IC/CAPCO Portion-marked format.
     * Example: /// Example: U
     * Constraints: Minimum length = 1, Maximum length = 128
     */
    val classificationMarking : String?
        get() {
            val o = __offset(6)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val classificationMarkingAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(6, 1)
    fun classificationMarkingInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 6, 1)
    /**
     * Unique identifier of the target on-orbit object, if correlated.
     * Example: /// Example: 32375
     * Constraints: Minimum length = 0, Maximum length = 36
     */
    val idOnOrbit : String?
        get() {
            val o = __offset(8)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val idOnOrbitAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(8, 1)
    fun idOnOrbitInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 8, 1)
    /**
     * Satellite/catalog number of the target on-orbit object.
     * Example: /// Example: 37375
     * Constraints: No constraints specified.
     */
    val satNo : Int
        get() {
            val o = __offset(10)
            return if(o != 0) bb.getInt(o + bb_pos) else 0
        }
    /**
     * No description provided.
     * Example: /// Example: No example provided.
     * Constraints: No constraints specified.
     */
    val onOrbit : String?
        get() {
            val o = __offset(12)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val onOrbitAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(12, 1)
    fun onOrbitInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 12, 1)
    /**
     * Optional identifier provided by observation source to indicate the target on-orbit object of this track. This may be an internal identifier and not necessarily a valid satellite number.
     * Example: /// Example: L2045
     * Constraints: Minimum length = 0, Maximum length = 64
     */
    val origObjectId : String?
        get() {
            val o = __offset(14)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val origObjectIdAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(14, 1)
    fun origObjectIdInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 14, 1)
    /**
     * Unique identifier of the Elset associated with this object.
     * Example: /// Example: c715a619-8695-44d2-9e7d-effd257b4843
     * Constraints: Minimum length = 0, Maximum length = 36
     */
    val idElset : String?
        get() {
            val o = __offset(16)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val idElsetAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(16, 1)
    fun idElsetInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 16, 1)
    /**
     * Track timestamp in ISO8601 UTC format, with microsecond precision.
     * Example: /// Example: 2021-02-25T12:00:00.123456Z
     * Constraints: No constraints specified.
     */
    val ts : String?
        get() {
            val o = __offset(18)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val tsAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(18, 1)
    fun tsInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 18, 1)
    /**
     * WGS-84 latitude of the track object subpoint, in degrees. -90 to 90 degrees (negative values south of equator).
     * Example: /// Example: 19.88550102
     * Constraints: No constraints specified.
     */
    val lat : Double
        get() {
            val o = __offset(20)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * WGS-84 longitude of the track object subpoint, in degrees. -180 to 180 degrees (negative values west of Prime Meridian).
     * Example: /// Example: 46.74596844
     * Constraints: No constraints specified.
     */
    val lon : Double
        get() {
            val o = __offset(22)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Track point altitude relative to WGS-84 ellipsoid, in meters.
     * Example: /// Example: 585.71
     * Constraints: No constraints specified.
     */
    val alt : Double
        get() {
            val o = __offset(24)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Radio frequency of the track, measured in megahertz (MHz).
     * Example: /// Example: 1.5273
     * Constraints: No constraints specified.
     */
    val rdfRf : Double
        get() {
            val o = __offset(26)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * International radio call sign assigned to the track. This is an 8-character alphanumeric code.
     * Example: /// Example: Charlie
     * Constraints: Minimum length = 0, Maximum length = 8
     */
    val callSign : String?
        get() {
            val o = __offset(28)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val callSignAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(28, 1)
    fun callSignInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 28, 1)
    /**
     * Report number received from the reporting source for this track.
     * Example: /// Example: 123
     * Constraints: Minimum length = 0, Maximum length = 32
     */
    val rptNum : String?
        get() {
            val o = __offset(30)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val rptNumAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(30, 1)
    fun rptNumInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 30, 1)
    /**
     * The estimated identity of the track object (ASSUMED FRIEND, FRIEND, HOSTILE, NEUTRAL, PENDING, SUSPECT, UNKNOWN):
     *  ASSUMED FRIEND: Track assumed to be a friend due to the object characteristics, behavior, and/or origin.
     *  FRIEND: Track object supporting friendly forces and belonging to a declared friendly nation or entity.
     *  HOSTILE: Track object belonging to an opposing nation, party, group, or entity deemed to contribute to a threat to friendly forces or their mission due to its behavior, characteristics, nationality, or origin.
     *  NEUTRAL: Track object whose characteristics, behavior, nationality, and/or origin indicate that it is neither supporting nor opposing friendly forces or their mission.
     *  PENDING: Track object which has not been evaluated.
     *  SUSPECT: Track object deemed potentially hostile due to the object characteristics, behavior, nationality, and/or origin.
     *  UNKNOWN: Track object which has been evaluated and does not meet criteria for any standard identity.
     * Example: /// Example: FRIEND
     * Constraints: Minimum length = 0, Maximum length = 32
     */
    val objIdent : Byte
        get() {
            val o = __offset(32)
            return if(o != 0) bb.get(o + bb_pos) else 0
        }
    /**
     * Additional track object identity/status information, typically used for EXERCISE identity amplification (FAKER, JOKER, KILO, TRAVELLER, ZOMBIE):
     *  FAKER: Friendly track, object, or entity acting as an exercise hostile.
     *  JOKER: Friendly track, object, or entity acting as an exercise suspect.
     *  KILO: Friendly high-value object.
     *  TRAVELLER: Suspect land or surface track following a recognized traffic route.
     *  ZOMBIE: Suspect track, object, or entity of special interest.
     * Example: /// Example: JOKER
     * Constraints: Minimum length = 0, Maximum length = 32
     */
    val identAmp : String?
        get() {
            val o = __offset(34)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val identAmpAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(34, 1)
    fun identAmpInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 34, 1)
    /**
     * Status of the satellite.
     * Example: /// Example: INACTIVE
     * Constraints: Minimum length = 0, Maximum length = 64
     */
    val satStatus : String?
        get() {
            val o = __offset(36)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val satStatusAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(36, 1)
    fun satStatusInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 36, 1)
    /**
     * The on-orbit category assigned to this track object (DEBRIS, MANNED, PAYLOAD, PLATFORM, ROCKET BODY, UNKNOWN).
     * Example: /// Example: PAYLOAD
     * Constraints: Minimum length = 0, Maximum length = 32
     */
    val objectType : Byte
        get() {
            val o = __offset(38)
            return if(o != 0) bb.get(o + bb_pos) else 0
        }
    /**
     * The country code. This value is typically the ISO 3166 Alpha-2 two-character country code, however it can also represent various consortiums that do not appear in the ISO document. The code must correspond to an existing country in the UDL’s country API. Call udl/country/{code} to get any associated FIPS code, ISO Alpha-3 code, or alternate code values that exist for the specified country code.
     * Example: /// Example: US
     * Constraints: Minimum length = 0, Maximum length = 8
     */
    val countryCode : String?
        get() {
            val o = __offset(40)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val countryCodeAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(40, 1)
    fun countryCodeInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 40, 1)
    /**
     * Predicted change in Mean Motion (velocity) in radians/herg^2.  herg is a unit of time measure equal to 806.8120769 seconds, and is the orbital period of an imaginary satellite rotating about the Earth at zero altitude.
     * Example: /// Example: 0.5868
     * Constraints: No constraints specified.
     */
    val decay : Double
        get() {
            val o = __offset(42)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * One-line Charlie elements set.
     * Example: /// Example: 323751332255940400010000003635829600010200072500098205001150
     * Constraints: Minimum length = 0, Maximum length = 100
     */
    val charlieLine : String?
        get() {
            val o = __offset(44)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val charlieLineAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(44, 1)
    fun charlieLineInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 44, 1)
    /**
     * The Area of Uncertainty (AoU) type (BEARING, ELLIPSE, OTHER) definition. This type defines the elements of the aouData array and is required if aouData is not null. See the aouData field definition for specific information.
     * Example: /// Example: ELLIPSE
     * Constraints: Minimum length = 0, Maximum length = 16
     */
    val aouType : String?
        get() {
            val o = __offset(46)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val aouTypeAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(46, 1)
    fun aouTypeInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 46, 1)
    /**
     * Three element array representing an Area of Uncertainty (AoU).  The array element definitions and units are type specific depending on the aouType specified in this record:
     * ELLIPSE:
     *    brg - orientation in degrees of the ellipse
     *    a1 - semi-major axis in meters
     *    a2 - semi-minor axis in meters
     * BEARING (BEARING BOX or MTST BEARING BOX):
     *    brg - orientation in degrees of the bearing box 
     *    a1 - length of bearing box in meters 
     *    a2 - half-width of bearing box in meters 
     * OTHER (All other type values):
     *    brg - line of bearing in degrees true 
     *    a1 - bearing error in degrees 
     *    a2 - estimated range in meters.
     * Example: /// Example: [34.3, 26.5, 1.2]
     * Constraints: No constraints specified.
     */
    fun aouData(j: Int) : String? {
        val o = __offset(48)
        return if (o != 0) {
            __string(__vector(o) + j * 4)
        } else {
            null
        }
    }
    val aouDataLength : Int
        get() {
            val o = __offset(48); return if (o != 0) __vector_len(o) else 0
        }
    /**
     * Track object speed, in km/sec.
     * Example: /// Example: 15.03443
     * Constraints: No constraints specified.
     */
    val spd : Double
        get() {
            val o = __offset(50)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * The angle formed between the line of sight of the observer and the horizon at track timestamp, in degrees.  The angular range is -90 to 90, with negative values representing angle of depression.
     * Example: /// Example: 15.2
     * Constraints: No constraints specified.
     */
    val angElev : Double
        get() {
            val o = __offset(52)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * The Area Of Uncertainty (AOU) percentage (0 - 100) containment value. The percentage of time (90%) that the estimated area of uncertainty will cover the true position of the track object.
     * Example: /// Example: 90
     * Constraints: No constraints specified.
     */
    val cntnmnt : Double
        get() {
            val o = __offset(54)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Source cross-reference code for the command that originated the track report.
     * Example: /// Example: XE
     * Constraints: Minimum length = 0, Maximum length = 8
     */
    val xref : String?
        get() {
            val o = __offset(56)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val xrefAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(56, 1)
    fun xrefInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 56, 1)
    /**
     * The cross-reference code of the channel on which this track report was received, if the report came over a comms channel.
     * Example: /// Example: FHKX
     * Constraints: Minimum length = 0, Maximum length = 32
     */
    val chXref : String?
        get() {
            val o = __offset(58)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val chXrefAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(58, 1)
    fun chXrefInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 58, 1)
    /**
     * Free-form remarks entered for the satellite.
     * Example: /// Example: A note regarding this spacecraft
     * Constraints: Minimum length = 0, Maximum length = 256
     */
    val amplification : String?
        get() {
            val o = __offset(60)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val amplificationAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(60, 1)
    fun amplificationInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 60, 1)
    /**
     * A text aplifier displaying IFF/SIF/AIS Identification modes and codes.
     * Example: /// Example: ID Mode
     * Constraints: Minimum length = 0, Maximum length = 64
     */
    val iff : String?
        get() {
            val o = __offset(62)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val iffAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(62, 1)
    fun iffInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 62, 1)
    /**
     * Flag indicating that this track represents a reinforced object or group.  Based on MIL-STD-2525 symbology definitions.
     * Example: /// Example: False
     * Constraints: No constraints specified.
     */
    val reinforced : Boolean
        get() {
            val o = __offset(64)
            return if(o != 0) 0.toByte() != bb.get(o + bb_pos) else false
        }
    /**
     * Flag indicating that this track represents a reduced object or group.  Based on MIL-STD-2525 symbology definitions.
     * Example: /// Example: False
     * Constraints: No constraints specified.
     */
    val reduced : Boolean
        get() {
            val o = __offset(66)
            return if(o != 0) 0.toByte() != bb.get(o + bb_pos) else false
        }
    /**
     * Flag indicating that this track represents a headquarters object.  Based on MIL-STD-2525 symbology definitions.
     * Example: /// Example: False
     * Constraints: No constraints specified.
     */
    val hq : Boolean
        get() {
            val o = __offset(68)
            return if(o != 0) 0.toByte() != bb.get(o + bb_pos) else false
        }
    /**
     * Flag indicating that this track represents a dummy object or group.  Identifies offensive or defensive units, equipment and/or installations intended to draw the enemy's attention away from the area of the main attack.  Based on MIL-STD-2525 symbology definitions.
     * Example: /// Example: False
     * Constraints: No constraints specified.
     */
    val dummy : Boolean
        get() {
            val o = __offset(70)
            return if(o != 0) 0.toByte() != bb.get(o + bb_pos) else false
        }
    /**
     * Flag indicating that this track represents a task force.  Based on MIL-STD-2525 symbology definitions.
     * Example: /// Example: False
     * Constraints: No constraints specified.
     */
    val taskForce : Boolean
        get() {
            val o = __offset(72)
            return if(o != 0) 0.toByte() != bb.get(o + bb_pos) else false
        }
    /**
     * Flag indicating that this track represents a feint object or group.  Identifies offensive or defensive units, equipment and/or installations intended to draw the enemy's attention away from the area of the main attack.  Based on MIL-STD-2525 symbology definitions.
     * Example: /// Example: False
     * Constraints: No constraints specified.
     */
    val feint : Boolean
        get() {
            val o = __offset(74)
            return if(o != 0) 0.toByte() != bb.get(o + bb_pos) else false
        }
    /**
     * Flag indicating that this track represents an installation.  Based on MIL-STD-2525 symbology definitions.
     * Example: /// Example: False
     * Constraints: No constraints specified.
     */
    val installation : Boolean
        get() {
            val o = __offset(76)
            return if(o != 0) 0.toByte() != bb.get(o + bb_pos) else false
        }
    /**
     * The type of vehicle with which the device is associated.  Based on MIL-STD-2525 symbology definitions.
     * Example: /// Example: SPACE
     * Constraints: Minimum length = 0, Maximum length = 10
     */
    val vehType : String?
        get() {
            val o = __offset(78)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val vehTypeAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(78, 1)
    fun vehTypeInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 78, 1)
    /**
     * UUID identifying the track, which should remain the same on subsequent tracks of the same object.
     * Example: /// Example: 3668f135-fcba-4630-a43d-e7782e11d988
     * Constraints: Minimum length = 0, Maximum length = 36
     */
    val trkId : String?
        get() {
            val o = __offset(80)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val trkIdAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(80, 1)
    fun trkIdInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 80, 1)
    /**
     * TrackSensor Collection.
     * Example: /// Example: No example provided.
     * Constraints: No constraints specified.
     */
    fun trackSensors(j: Int) : String? {
        val o = __offset(82)
        return if (o != 0) {
            __string(__vector(o) + j * 4)
        } else {
            null
        }
    }
    val trackSensorsLength : Int
        get() {
            val o = __offset(82); return if (o != 0) __vector_len(o) else 0
        }
    /**
     * Time the row was created in the database.
     * Example: /// Example: 2021-02-25T12:00:00.123Z
     * Constraints: No constraints specified.
     */
    val createdAt : String?
        get() {
            val o = __offset(84)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val createdAtAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(84, 1)
    fun createdAtInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 84, 1)
    /**
     * Application user who created the row in the database.
     * Example: /// Example: some.user
     * Constraints: Minimum length = 0, Maximum length = 64
     */
    val createdBy : String?
        get() {
            val o = __offset(86)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val createdByAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(86, 1)
    fun createdByInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 86, 1)
    /**
     * Source of the data.
     * Example: /// Example: Bluestaq
     * Constraints: Minimum length = 1, Maximum length = 64
     */
    val source : String?
        get() {
            val o = __offset(88)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val sourceAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(88, 1)
    fun sourceInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 88, 1)
    /**
     * Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
     * Example: /// Example: THIRD_PARTY_DATASOURCE
     * Constraints: Minimum length = 0, Maximum length = 64
     */
    val origin : String?
        get() {
            val o = __offset(90)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val originAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(90, 1)
    fun originInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 90, 1)
    /**
     * Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
     * EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
     * REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
     * SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
     * TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
     * Example: /// Example: TEST
     * Constraints: Minimum length = 1, Maximum length = 32
     */
    val dataMode : Byte
        get() {
            val o = __offset(92)
            return if(o != 0) bb.get(o + bb_pos) else 0
        }
    /**
     * The originating source network on which this record was created, auto-populated by the system.
     * Example: /// Example: ORIG
     * Constraints: Minimum length = 1, Maximum length = 32
     */
    val origNetwork : String?
        get() {
            val o = __offset(94)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val origNetworkAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(94, 1)
    fun origNetworkInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 94, 1)
    companion object {
        fun validateVersion() = Constants.FLATBUFFERS_24_3_25()
        fun getRootAsOrbitTrack_Full(_bb: ByteBuffer): OrbitTrack_Full = getRootAsOrbitTrack_Full(_bb, OrbitTrack_Full())
        fun getRootAsOrbitTrack_Full(_bb: ByteBuffer, obj: OrbitTrack_Full): OrbitTrack_Full {
            _bb.order(ByteOrder.LITTLE_ENDIAN)
            return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb))
        }
        fun OrbitTrack_FullBufferHasIdentifier(_bb: ByteBuffer) : Boolean = __has_identifier(_bb, "ORBI")
        fun createOrbitTrack_Full(builder: FlatBufferBuilder, idOffset: Int, classificationMarkingOffset: Int, idOnOrbitOffset: Int, satNo: Int, onOrbitOffset: Int, origObjectIdOffset: Int, idElsetOffset: Int, tsOffset: Int, lat: Double, lon: Double, alt: Double, rdfRf: Double, callSignOffset: Int, rptNumOffset: Int, objIdent: Byte, identAmpOffset: Int, satStatusOffset: Int, objectType: Byte, countryCodeOffset: Int, decay: Double, charlieLineOffset: Int, aouTypeOffset: Int, aouDataOffset: Int, spd: Double, angElev: Double, cntnmnt: Double, xrefOffset: Int, chXrefOffset: Int, amplificationOffset: Int, iffOffset: Int, reinforced: Boolean, reduced: Boolean, hq: Boolean, dummy: Boolean, taskForce: Boolean, feint: Boolean, installation: Boolean, vehTypeOffset: Int, trkIdOffset: Int, trackSensorsOffset: Int, createdAtOffset: Int, createdByOffset: Int, sourceOffset: Int, originOffset: Int, dataMode: Byte, origNetworkOffset: Int) : Int {
            builder.startTable(46)
            addCntnmnt(builder, cntnmnt)
            addAngElev(builder, angElev)
            addSpd(builder, spd)
            addDecay(builder, decay)
            addRdfRF(builder, rdfRf)
            addAlt(builder, alt)
            addLon(builder, lon)
            addLat(builder, lat)
            addOrigNetwork(builder, origNetworkOffset)
            addOrigin(builder, originOffset)
            addSource(builder, sourceOffset)
            addCreatedBy(builder, createdByOffset)
            addCreatedAt(builder, createdAtOffset)
            addTrackSensors(builder, trackSensorsOffset)
            addTrkId(builder, trkIdOffset)
            addVehType(builder, vehTypeOffset)
            addIff(builder, iffOffset)
            addAmplification(builder, amplificationOffset)
            addChXRef(builder, chXrefOffset)
            addXref(builder, xrefOffset)
            addAouData(builder, aouDataOffset)
            addAouType(builder, aouTypeOffset)
            addCharlieLine(builder, charlieLineOffset)
            addCountryCode(builder, countryCodeOffset)
            addSatStatus(builder, satStatusOffset)
            addIdentAmp(builder, identAmpOffset)
            addRptNum(builder, rptNumOffset)
            addCallSign(builder, callSignOffset)
            addTs(builder, tsOffset)
            addIdElset(builder, idElsetOffset)
            addOrigObjectId(builder, origObjectIdOffset)
            addOnOrbit(builder, onOrbitOffset)
            addSatNo(builder, satNo)
            addIdOnOrbit(builder, idOnOrbitOffset)
            addClassificationMarking(builder, classificationMarkingOffset)
            addId(builder, idOffset)
            addDataMode(builder, dataMode)
            addInstallation(builder, installation)
            addFeint(builder, feint)
            addTaskForce(builder, taskForce)
            addDummy(builder, dummy)
            addHq(builder, hq)
            addReduced(builder, reduced)
            addReinforced(builder, reinforced)
            addObjectType(builder, objectType)
            addObjIdent(builder, objIdent)
            return endOrbitTrack_Full(builder)
        }
        fun startOrbitTrack_Full(builder: FlatBufferBuilder) = builder.startTable(46)
        fun addId(builder: FlatBufferBuilder, id: Int) = builder.addOffset(0, id, 0)
        fun addClassificationMarking(builder: FlatBufferBuilder, classificationMarking: Int) = builder.addOffset(1, classificationMarking, 0)
        fun addIdOnOrbit(builder: FlatBufferBuilder, idOnOrbit: Int) = builder.addOffset(2, idOnOrbit, 0)
        fun addSatNo(builder: FlatBufferBuilder, satNo: Int) = builder.addInt(3, satNo, 0)
        fun addOnOrbit(builder: FlatBufferBuilder, onOrbit: Int) = builder.addOffset(4, onOrbit, 0)
        fun addOrigObjectId(builder: FlatBufferBuilder, origObjectId: Int) = builder.addOffset(5, origObjectId, 0)
        fun addIdElset(builder: FlatBufferBuilder, idElset: Int) = builder.addOffset(6, idElset, 0)
        fun addTs(builder: FlatBufferBuilder, ts: Int) = builder.addOffset(7, ts, 0)
        fun addLat(builder: FlatBufferBuilder, lat: Double) = builder.addDouble(8, lat, 0.0)
        fun addLon(builder: FlatBufferBuilder, lon: Double) = builder.addDouble(9, lon, 0.0)
        fun addAlt(builder: FlatBufferBuilder, alt: Double) = builder.addDouble(10, alt, 0.0)
        fun addRdfRF(builder: FlatBufferBuilder, rdfRf: Double) = builder.addDouble(11, rdfRf, 0.0)
        fun addCallSign(builder: FlatBufferBuilder, callSign: Int) = builder.addOffset(12, callSign, 0)
        fun addRptNum(builder: FlatBufferBuilder, rptNum: Int) = builder.addOffset(13, rptNum, 0)
        fun addObjIdent(builder: FlatBufferBuilder, objIdent: Byte) = builder.addByte(14, objIdent, 0)
        fun addIdentAmp(builder: FlatBufferBuilder, identAmp: Int) = builder.addOffset(15, identAmp, 0)
        fun addSatStatus(builder: FlatBufferBuilder, satStatus: Int) = builder.addOffset(16, satStatus, 0)
        fun addObjectType(builder: FlatBufferBuilder, objectType: Byte) = builder.addByte(17, objectType, 0)
        fun addCountryCode(builder: FlatBufferBuilder, countryCode: Int) = builder.addOffset(18, countryCode, 0)
        fun addDecay(builder: FlatBufferBuilder, decay: Double) = builder.addDouble(19, decay, 0.0)
        fun addCharlieLine(builder: FlatBufferBuilder, charlieLine: Int) = builder.addOffset(20, charlieLine, 0)
        fun addAouType(builder: FlatBufferBuilder, aouType: Int) = builder.addOffset(21, aouType, 0)
        fun addAouData(builder: FlatBufferBuilder, aouData: Int) = builder.addOffset(22, aouData, 0)
        fun createAouDataVector(builder: FlatBufferBuilder, data: IntArray) : Int {
            builder.startVector(4, data.size, 4)
            for (i in data.size - 1 downTo 0) {
                builder.addOffset(data[i])
            }
            return builder.endVector()
        }
        fun startAouDataVector(builder: FlatBufferBuilder, numElems: Int) = builder.startVector(4, numElems, 4)
        fun addSpd(builder: FlatBufferBuilder, spd: Double) = builder.addDouble(23, spd, 0.0)
        fun addAngElev(builder: FlatBufferBuilder, angElev: Double) = builder.addDouble(24, angElev, 0.0)
        fun addCntnmnt(builder: FlatBufferBuilder, cntnmnt: Double) = builder.addDouble(25, cntnmnt, 0.0)
        fun addXref(builder: FlatBufferBuilder, xref: Int) = builder.addOffset(26, xref, 0)
        fun addChXRef(builder: FlatBufferBuilder, chXref: Int) = builder.addOffset(27, chXref, 0)
        fun addAmplification(builder: FlatBufferBuilder, amplification: Int) = builder.addOffset(28, amplification, 0)
        fun addIff(builder: FlatBufferBuilder, iff: Int) = builder.addOffset(29, iff, 0)
        fun addReinforced(builder: FlatBufferBuilder, reinforced: Boolean) = builder.addBoolean(30, reinforced, false)
        fun addReduced(builder: FlatBufferBuilder, reduced: Boolean) = builder.addBoolean(31, reduced, false)
        fun addHq(builder: FlatBufferBuilder, hq: Boolean) = builder.addBoolean(32, hq, false)
        fun addDummy(builder: FlatBufferBuilder, dummy: Boolean) = builder.addBoolean(33, dummy, false)
        fun addTaskForce(builder: FlatBufferBuilder, taskForce: Boolean) = builder.addBoolean(34, taskForce, false)
        fun addFeint(builder: FlatBufferBuilder, feint: Boolean) = builder.addBoolean(35, feint, false)
        fun addInstallation(builder: FlatBufferBuilder, installation: Boolean) = builder.addBoolean(36, installation, false)
        fun addVehType(builder: FlatBufferBuilder, vehType: Int) = builder.addOffset(37, vehType, 0)
        fun addTrkId(builder: FlatBufferBuilder, trkId: Int) = builder.addOffset(38, trkId, 0)
        fun addTrackSensors(builder: FlatBufferBuilder, trackSensors: Int) = builder.addOffset(39, trackSensors, 0)
        fun createTrackSensorsVector(builder: FlatBufferBuilder, data: IntArray) : Int {
            builder.startVector(4, data.size, 4)
            for (i in data.size - 1 downTo 0) {
                builder.addOffset(data[i])
            }
            return builder.endVector()
        }
        fun startTrackSensorsVector(builder: FlatBufferBuilder, numElems: Int) = builder.startVector(4, numElems, 4)
        fun addCreatedAt(builder: FlatBufferBuilder, createdAt: Int) = builder.addOffset(40, createdAt, 0)
        fun addCreatedBy(builder: FlatBufferBuilder, createdBy: Int) = builder.addOffset(41, createdBy, 0)
        fun addSource(builder: FlatBufferBuilder, source: Int) = builder.addOffset(42, source, 0)
        fun addOrigin(builder: FlatBufferBuilder, origin: Int) = builder.addOffset(43, origin, 0)
        fun addDataMode(builder: FlatBufferBuilder, dataMode: Byte) = builder.addByte(44, dataMode, 0)
        fun addOrigNetwork(builder: FlatBufferBuilder, origNetwork: Int) = builder.addOffset(45, origNetwork, 0)
        fun endOrbitTrack_Full(builder: FlatBufferBuilder) : Int {
            val o = builder.endTable()
            return o
        }
        fun finishOrbitTrackFullBuffer(builder: FlatBufferBuilder, offset: Int) = builder.finish(offset, "ORBI")
        fun finishSizePrefixedOrbitTrack_FullBuffer(builder: FlatBufferBuilder, offset: Int) = builder.finishSizePrefixed(offset, "ORBI")
    }
}
