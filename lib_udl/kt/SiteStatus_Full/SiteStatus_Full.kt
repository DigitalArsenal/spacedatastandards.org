// automatically generated by the FlatBuffers compiler, do not modify

import com.google.flatbuffers.BaseVector
import com.google.flatbuffers.BooleanVector
import com.google.flatbuffers.ByteVector
import com.google.flatbuffers.Constants
import com.google.flatbuffers.DoubleVector
import com.google.flatbuffers.FlatBufferBuilder
import com.google.flatbuffers.FloatVector
import com.google.flatbuffers.LongVector
import com.google.flatbuffers.StringVector
import com.google.flatbuffers.Struct
import com.google.flatbuffers.Table
import com.google.flatbuffers.UnionVector
import java.nio.ByteBuffer
import java.nio.ByteOrder
import kotlin.math.sign

/**
 * /// No description available.
 */
@Suppress("unused")
class SiteStatus_Full : Table() {

    fun __init(_i: Int, _bb: ByteBuffer)  {
        __reset(_i, _bb)
    }
    fun __assign(_i: Int, _bb: ByteBuffer) : SiteStatus_Full {
        __init(_i, _bb)
        return this
    }
    /**
     * Unique identifier of the record, auto-generated by the system.
     * Example: /// Example: SITESTATUS-ID
     * Constraints: Minimum length = 1, Maximum length = 36
     */
    val id : String?
        get() {
            val o = __offset(4)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val idAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(4, 1)
    fun idInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 4, 1)
    /**
     * Classification marking of the data in IC/CAPCO Portion-marked format.
     * Example: /// Example: U
     * Constraints: Minimum length = 1, Maximum length = 128
     */
    val classificationMarking : String?
        get() {
            val o = __offset(6)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val classificationMarkingAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(6, 1)
    fun classificationMarkingInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 6, 1)
    /**
     * The ID of the site, if this status is associated with a fixed site or platform.
     * Example: /// Example: 41e3e554-9790-40b9-bd7b-f30d864dcad8
     * Constraints: Minimum length = 1, Maximum length = 36
     */
    val idSite : String?
        get() {
            val o = __offset(8)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val idSiteAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(8, 1)
    fun idSiteInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 8, 1)
    /**
     * Optional site type or further detail of type.  Intended for, but not limited to, Link-16 site type specifications (e.g. ADOC, GACC, SOC, TACC, etc.).
     * Example: /// Example: ADOC
     * Constraints: Minimum length = 0, Maximum length = 36
     */
    val siteType : String?
        get() {
            val o = __offset(10)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val siteTypeAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(10, 1)
    fun siteTypeInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 10, 1)
    /**
     * Alternate Identifier for a mobile or transportable platform provided by source.
     * Example: /// Example: MOBILEALT-ID
     * Constraints: Minimum length = 0, Maximum length = 36
     */
    val mobileAltId : String?
        get() {
            val o = __offset(12)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val mobileAltIdAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(12, 1)
    fun mobileAltIdInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 12, 1)
    /**
     * The POI (point of interest) ID related to this platform, if available.
     * Example: /// Example: d4a91864-6140-4b8d-67cd-45421c75f696
     * Constraints: Minimum length = 0, Maximum length = 36
     */
    val poiid : String?
        get() {
            val o = __offset(14)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val poiidAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(14, 1)
    fun poiidInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 14, 1)
    /**
     * The track ID related to this platform (if mobile or transportable), if available.
     * Example: /// Example: PCM4923-1656174732-4-1-257
     * Constraints: Minimum length = 0, Maximum length = 36
     */
    val trackId : String?
        get() {
            val o = __offset(16)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val trackIdAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(16, 1)
    fun trackIdInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 16, 1)
    /**
     * Link-16 specific reference track number.
     * Example: /// Example: TrkNm
     * Constraints: Minimum length = 0, Maximum length = 5
     */
    val trackRefL16 : String?
        get() {
            val o = __offset(18)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val trackRefL16AsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(18, 1)
    fun trackRefL16InByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 18, 1)
    /**
     * The operational status of the platform (e.g. Fully Operational, Partially Operational, Not Operational, etc.).
     * Example: /// Example: Fully Operational
     * Constraints: Minimum length = 0, Maximum length = 24
     */
    val opsCapability : String?
        get() {
            val o = __offset(20)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val opsCapabilityAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(20, 1)
    fun opsCapabilityInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 20, 1)
    /**
     * The status of the installation.
     * FMC - Fully Mission Capable
     *  PMC - Partially Mission Capable
     * NMC - Non Mission Capable
     * UNK - Unknown.
     * Example: /// Example: PMC
     * Constraints: Minimum length = 0, Maximum length = 3
     */
    val instStatus : Byte
        get() {
            val o = __offset(22)
            return if(o != 0) bb.get(o + bb_pos) else 0
        }
    /**
     * Force Protection Condition (FPCON).
     * NORMAL - Applies when a general global threat of possible terrorist activity exists and warrants a routine security posture.
     * ALPHA - Applies when an increased general threat of possible terrorist activity against personnel or facilities. Nature and extent of threat are unpredictable.
     * BRAVO - Applies when an increased or predictable threat of terrorist activity exists.
     * CHARLIE - Applies when an incident occurs or intelligence is received indicating some form of terrorist action against personnel and facilities is imminent.
     * DELTA - Applies in the immediate area where an attack has occurred or when intelligence is received indicating terrorist action against a location is imminent.
     * Example: /// Example: BRAVO
     * Constraints: Minimum length = 0, Maximum length = 7
     */
    val fpcon : Byte
        get() {
            val o = __offset(24)
            return if(o != 0) bb.get(o + bb_pos) else 0
        }
    /**
     * Health Protection Condition (HPCON).
     * 0 - Routine, no community transmission.
     * ALPHA - Limited, community transmission beginning.
     * BRAVO - Moderate, increased community transmission.
     * CHARLIE - Substantial, sustained community transmission.
     * DELTA - Severe, widespread community transmission.
     * Example: /// Example: CHARLIE
     * Constraints: Minimum length = 0, Maximum length = 7
     */
    val hpcon : Byte
        get() {
            val o = __offset(26)
            return if(o != 0) bb.get(o + bb_pos) else 0
        }
    /**
     * Cyberspace Protection Condition (CPCON).
     * 1 - VERY HIGH - Critical functions.
     * 2 - HIGH - Critical and essential functions.
     * 3 - MEDIUM - Critical, essential, and support functions.
     * 4 - LOW - All functions.
     * 5 - VERY LOW - All functions.
     * Example: /// Example: 4
     * Constraints: Minimum length = 0, Maximum length = 1
     */
    val cpcon : Byte
        get() {
            val o = __offset(28)
            return if(o != 0) bb.get(o + bb_pos) else 0
        }
    /**
     * Time of report, in ISO8601 UTC format.
     * Example: /// Example: 2021-01-01T01:01:01.123Z
     * Constraints: No constraints specified.
     */
    val reportTime : String?
        get() {
            val o = __offset(30)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val reportTimeAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(30, 1)
    fun reportTimeInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 30, 1)
    /**
     * Description of the time function associated with the reportTime (e.g. Activation, Deactivation, Arrival, Departure, etc.), if applicable.
     * Example: /// Example: Activation
     * Constraints: Minimum length = 0, Maximum length = 24
     */
    val timeFunction : String?
        get() {
            val o = __offset(32)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val timeFunctionAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(32, 1)
    fun timeFunctionInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 32, 1)
    /**
     * Description of the current weather conditions over a site.
     * Example: /// Example: Heavy rain
     * Constraints: Minimum length = 0, Maximum length = 512
     */
    val weatherMessage : String?
        get() {
            val o = __offset(34)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val weatherMessageAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(34, 1)
    fun weatherMessageInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 34, 1)
    /**
     * Position Engagement Status flag, Indicating whether this platform is initiating multiple simultaneous engagements.  A value of 1/True indicates the platform is initiating multiple simultaneous engagements.
     * Example: /// Example: True
     * Constraints: No constraints specified.
     */
    val pes : Boolean
        get() {
            val o = __offset(36)
            return if(o != 0) 0.toByte() != bb.get(o + bb_pos) else false
        }
    /**
     * Estimated number of hot missiles of all types remaining in weapons system inventory.
     * Example: /// Example: 1
     * Constraints: No constraints specified.
     */
    val hotInventory : Int
        get() {
            val o = __offset(38)
            return if(o != 0) bb.getInt(o + bb_pos) else 0
        }
    /**
     * Estimated number of cold missiles of all types remaining in weapons system inventory.
     * Example: /// Example: 1
     * Constraints: No constraints specified.
     */
    val coldInventory : Int
        get() {
            val o = __offset(40)
            return if(o != 0) bb.getInt(o + bb_pos) else 0
        }
    /**
     * The state of a SAM unit (e.g. Initialization, Standby, Reorientation, etc.).
     * Example: /// Example: Initialization
     * Constraints: Minimum length = 0, Maximum length = 48
     */
    val samMode : String?
        get() {
            val o = __offset(42)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val samModeAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(42, 1)
    fun samModeInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 42, 1)
    /**
     * SAM sensor radar surveillance mode (Active, Passive, Off).
     * Example: /// Example: Active
     * Constraints: Minimum length = 0, Maximum length = 24
     */
    val radiateMode : String?
        get() {
            val o = __offset(44)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val radiateModeAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(44, 1)
    fun radiateModeInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 44, 1)
    /**
     * The primary component degrading the operational capability of the platform or system.
     * Example: /// Example: opsImpairment
     * Constraints: Minimum length = 0, Maximum length = 48
     */
    val opsImpairment : String?
        get() {
            val o = __offset(46)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val opsImpairmentAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(46, 1)
    fun opsImpairmentInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 46, 1)
    /**
     * The communications component causing the platform or system to be less than fully operational.
     * Example: /// Example: commImpairment
     * Constraints: Minimum length = 0, Maximum length = 24
     */
    val commImpairment : String?
        get() {
            val o = __offset(48)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val commImpairmentAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(48, 1)
    fun commImpairmentInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 48, 1)
    /**
     * Crisis Action Team (CAT).
     * COLD - Not in use.
     * WARM - Facility prepped/possible skeleton crew.
     * HOT - Fully active.
     * Example: /// Example: COLD
     * Constraints: Minimum length = 0, Maximum length = 4
     */
    val cat : Byte
        get() {
            val o = __offset(50)
            return if(o != 0) bb.get(o + bb_pos) else 0
        }
    /**
     * Emergency Operations Center (EOC) status.
     * COLD - Not in use.
     * WARM - Facility prepped/possible skeleton crew.
     * HOT - Fully active.
     * Example: /// Example: WARM
     * Constraints: Minimum length = 0, Maximum length = 4
     */
    val eoc : Byte
        get() {
            val o = __offset(52)
            return if(o != 0) bb.get(o + bb_pos) else 0
        }
    /**
     * Array of Link item(s) for which status is available and reported (ATDL, IJMS,  LINK-1, LINK-11, LINK-11B, LINK-16).  This array must be the same length as the linkStatus array.
     * Example: /// Example: ['ATDL', 'IJMS', 'LINK-1']
     * Constraints: No constraints specified.
     */
    fun link(j: Int) : String? {
        val o = __offset(54)
        return if (o != 0) {
            __string(__vector(o) + j * 4)
        } else {
            null
        }
    }
    val linkLength : Int
        get() {
            val o = __offset(54); return if (o != 0) __vector_len(o) else 0
        }
    /**
     * Array of the status (AVAILABLE, DEGRADED, NOT AVAILABLE, etc.) for each links in the link array. This array must be the same length as the link array, and the status must correspond to the appropriate position index in the link array.
     * Example: /// Example: ['AVAILABLE', 'DEGRADED', 'NOT AVAILABLE']
     * Constraints: No constraints specified.
     */
    fun linkStatus(j: Int) : String? {
        val o = __offset(56)
        return if (o != 0) {
            __string(__vector(o) + j * 4)
        } else {
            null
        }
    }
    val linkStatusLength : Int
        get() {
            val o = __offset(56); return if (o != 0) __vector_len(o) else 0
        }
    /**
     * Array of radar system(s) for which status is available and reported (ACQUISITION, IFFSIF, ILLUMINATING, MODE-4, PRIMARY SURVEILLANCE, SECONDARY SURVEILLANCE, TERTIARY SURVEILLANCE). This array must be the same length as the radarStatus array.
     * Example: /// Example: ['ILLUMINATING', 'MODE-4', 'MODE-3']
     * Constraints: No constraints specified.
     */
    fun radarSystem(j: Int) : String? {
        val o = __offset(58)
        return if (o != 0) {
            __string(__vector(o) + j * 4)
        } else {
            null
        }
    }
    val radarSystemLength : Int
        get() {
            val o = __offset(58); return if (o != 0) __vector_len(o) else 0
        }
    /**
     * Array of the status (NON-OPERATIONAL, OPERATIONAL, OFF) for each radar system in the radarSystem array. This array must be the same length as the radarSystem array, and the status must correspond to the appropriate position index in the radarSystem array.
     * Example: /// Example: ['OPERATIONAL', 'OFF', 'NON-OPERATIONAL']
     * Constraints: No constraints specified.
     */
    fun radarStatus(j: Int) : String? {
        val o = __offset(60)
        return if (o != 0) {
            __string(__vector(o) + j * 4)
        } else {
            null
        }
    }
    val radarStatusLength : Int
        get() {
            val o = __offset(60); return if (o != 0) __vector_len(o) else 0
        }
    /**
     * Array of specific missile types for which an estimated inventory count is available (e.g. GMD TYPE A, HARPOON, TOMAHAWK, etc.).  This array must be the same length as the missileInventory array.
     * Example: /// Example: ['GMD', 'HARPOON', 'JAVELIN']
     * Constraints: No constraints specified.
     */
    fun missile(j: Int) : String? {
        val o = __offset(62)
        return if (o != 0) {
            __string(__vector(o) + j * 4)
        } else {
            null
        }
    }
    val missileLength : Int
        get() {
            val o = __offset(62); return if (o != 0) __vector_len(o) else 0
        }
    /**
     * Array of the quantity of each of the missile items.  This array must be the same length as the missile array, and the values must correspond to appropriate position index in the missile array.
     * Example: /// Example: [5, 10, 100]
     * Constraints: No constraints specified.
     */
    fun missileInventory(j: Int) : String? {
        val o = __offset(64)
        return if (o != 0) {
            __string(__vector(o) + j * 4)
        } else {
            null
        }
    }
    val missileInventoryLength : Int
        get() {
            val o = __offset(64); return if (o != 0) __vector_len(o) else 0
        }
    /**
     * Time the row was created in the database, auto-populated by the system.
     * Example: /// Example: 2018-01-01T16:00:00.123Z
     * Constraints: No constraints specified.
     */
    val createdAt : String?
        get() {
            val o = __offset(66)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val createdAtAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(66, 1)
    fun createdAtInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 66, 1)
    /**
     * Application user who created the row in the database, auto-populated by the system.
     * Example: /// Example: some.user
     * Constraints: Minimum length = 1, Maximum length = 64
     */
    val createdBy : String?
        get() {
            val o = __offset(68)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val createdByAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(68, 1)
    fun createdByInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 68, 1)
    /**
     * Time the row was updated in the database, auto-populated by the system.
     * Example: /// Example: 2018-01-01T16:00:00.123Z
     * Constraints: No constraints specified.
     */
    val updatedAt : String?
        get() {
            val o = __offset(70)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val updatedAtAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(70, 1)
    fun updatedAtInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 70, 1)
    /**
     * Application user who updated the row in the database, auto-populated by the system.
     * Example: /// Example: some.user
     * Constraints: Minimum length = 0, Maximum length = 64
     */
    val updatedBy : String?
        get() {
            val o = __offset(72)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val updatedByAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(72, 1)
    fun updatedByInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 72, 1)
    /**
     * Source of the data.
     * Example: /// Example: Bluestaq
     * Constraints: Minimum length = 1, Maximum length = 64
     */
    val source : String?
        get() {
            val o = __offset(74)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val sourceAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(74, 1)
    fun sourceInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 74, 1)
    /**
     * Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
     * Example: /// Example: THIRD_PARTY_DATASOURCE
     * Constraints: Minimum length = 0, Maximum length = 64
     */
    val origin : String?
        get() {
            val o = __offset(76)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val originAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(76, 1)
    fun originInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 76, 1)
    /**
     * The originating source network on which this record was created, auto-populated by the system.
     * Example: /// Example: ORIG
     * Constraints: Minimum length = 1, Maximum length = 32
     */
    val origNetwork : String?
        get() {
            val o = __offset(78)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val origNetworkAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(78, 1)
    fun origNetworkInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 78, 1)
    /**
     * Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
     * EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
     * REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
     * SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
     * TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
     * Example: /// Example: TEST
     * Constraints: Minimum length = 1, Maximum length = 32
     */
    val dataMode : Byte
        get() {
            val o = __offset(80)
            return if(o != 0) bb.get(o + bb_pos) else 0
        }
    companion object {
        fun validateVersion() = Constants.FLATBUFFERS_24_3_25()
        fun getRootAsSiteStatus_Full(_bb: ByteBuffer): SiteStatus_Full = getRootAsSiteStatus_Full(_bb, SiteStatus_Full())
        fun getRootAsSiteStatus_Full(_bb: ByteBuffer, obj: SiteStatus_Full): SiteStatus_Full {
            _bb.order(ByteOrder.LITTLE_ENDIAN)
            return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb))
        }
        fun SiteStatus_FullBufferHasIdentifier(_bb: ByteBuffer) : Boolean = __has_identifier(_bb, "SITE")
        fun createSiteStatus_Full(builder: FlatBufferBuilder, idOffset: Int, classificationMarkingOffset: Int, idSiteOffset: Int, siteTypeOffset: Int, mobileAltIdOffset: Int, poiidOffset: Int, trackIdOffset: Int, trackRefL16Offset: Int, opsCapabilityOffset: Int, instStatus: Byte, fpcon: Byte, hpcon: Byte, cpcon: Byte, reportTimeOffset: Int, timeFunctionOffset: Int, weatherMessageOffset: Int, pes: Boolean, hotInventory: Int, coldInventory: Int, samModeOffset: Int, radiateModeOffset: Int, opsImpairmentOffset: Int, commImpairmentOffset: Int, cat: Byte, eoc: Byte, linkOffset: Int, linkStatusOffset: Int, radarSystemOffset: Int, radarStatusOffset: Int, missileOffset: Int, missileInventoryOffset: Int, createdAtOffset: Int, createdByOffset: Int, updatedAtOffset: Int, updatedByOffset: Int, sourceOffset: Int, originOffset: Int, origNetworkOffset: Int, dataMode: Byte) : Int {
            builder.startTable(39)
            addOrigNetwork(builder, origNetworkOffset)
            addOrigin(builder, originOffset)
            addSource(builder, sourceOffset)
            addUpdatedBy(builder, updatedByOffset)
            addUpdatedAt(builder, updatedAtOffset)
            addCreatedBy(builder, createdByOffset)
            addCreatedAt(builder, createdAtOffset)
            addMissileInventory(builder, missileInventoryOffset)
            addMissile(builder, missileOffset)
            addRadarStatus(builder, radarStatusOffset)
            addRadarSystem(builder, radarSystemOffset)
            addLinkStatus(builder, linkStatusOffset)
            addLink(builder, linkOffset)
            addCommImpairment(builder, commImpairmentOffset)
            addOpsImpairment(builder, opsImpairmentOffset)
            addRadiateMode(builder, radiateModeOffset)
            addSamMode(builder, samModeOffset)
            addColdInventory(builder, coldInventory)
            addHotInventory(builder, hotInventory)
            addWeatherMessage(builder, weatherMessageOffset)
            addTimeFunction(builder, timeFunctionOffset)
            addReportTime(builder, reportTimeOffset)
            addOpsCapability(builder, opsCapabilityOffset)
            addTrackRefL16(builder, trackRefL16Offset)
            addTrackId(builder, trackIdOffset)
            addPoiid(builder, poiidOffset)
            addMobileAltId(builder, mobileAltIdOffset)
            addSiteType(builder, siteTypeOffset)
            addIdSite(builder, idSiteOffset)
            addClassificationMarking(builder, classificationMarkingOffset)
            addId(builder, idOffset)
            addDataMode(builder, dataMode)
            addEoc(builder, eoc)
            addCat(builder, cat)
            addPes(builder, pes)
            addCpcon(builder, cpcon)
            addHpcon(builder, hpcon)
            addFpcon(builder, fpcon)
            addInstStatus(builder, instStatus)
            return endSiteStatus_Full(builder)
        }
        fun startSiteStatus_Full(builder: FlatBufferBuilder) = builder.startTable(39)
        fun addId(builder: FlatBufferBuilder, id: Int) = builder.addOffset(0, id, 0)
        fun addClassificationMarking(builder: FlatBufferBuilder, classificationMarking: Int) = builder.addOffset(1, classificationMarking, 0)
        fun addIdSite(builder: FlatBufferBuilder, idSite: Int) = builder.addOffset(2, idSite, 0)
        fun addSiteType(builder: FlatBufferBuilder, siteType: Int) = builder.addOffset(3, siteType, 0)
        fun addMobileAltId(builder: FlatBufferBuilder, mobileAltId: Int) = builder.addOffset(4, mobileAltId, 0)
        fun addPoiid(builder: FlatBufferBuilder, poiid: Int) = builder.addOffset(5, poiid, 0)
        fun addTrackId(builder: FlatBufferBuilder, trackId: Int) = builder.addOffset(6, trackId, 0)
        fun addTrackRefL16(builder: FlatBufferBuilder, trackRefL16: Int) = builder.addOffset(7, trackRefL16, 0)
        fun addOpsCapability(builder: FlatBufferBuilder, opsCapability: Int) = builder.addOffset(8, opsCapability, 0)
        fun addInstStatus(builder: FlatBufferBuilder, instStatus: Byte) = builder.addByte(9, instStatus, 0)
        fun addFpcon(builder: FlatBufferBuilder, fpcon: Byte) = builder.addByte(10, fpcon, 0)
        fun addHpcon(builder: FlatBufferBuilder, hpcon: Byte) = builder.addByte(11, hpcon, 0)
        fun addCpcon(builder: FlatBufferBuilder, cpcon: Byte) = builder.addByte(12, cpcon, 0)
        fun addReportTime(builder: FlatBufferBuilder, reportTime: Int) = builder.addOffset(13, reportTime, 0)
        fun addTimeFunction(builder: FlatBufferBuilder, timeFunction: Int) = builder.addOffset(14, timeFunction, 0)
        fun addWeatherMessage(builder: FlatBufferBuilder, weatherMessage: Int) = builder.addOffset(15, weatherMessage, 0)
        fun addPes(builder: FlatBufferBuilder, pes: Boolean) = builder.addBoolean(16, pes, false)
        fun addHotInventory(builder: FlatBufferBuilder, hotInventory: Int) = builder.addInt(17, hotInventory, 0)
        fun addColdInventory(builder: FlatBufferBuilder, coldInventory: Int) = builder.addInt(18, coldInventory, 0)
        fun addSamMode(builder: FlatBufferBuilder, samMode: Int) = builder.addOffset(19, samMode, 0)
        fun addRadiateMode(builder: FlatBufferBuilder, radiateMode: Int) = builder.addOffset(20, radiateMode, 0)
        fun addOpsImpairment(builder: FlatBufferBuilder, opsImpairment: Int) = builder.addOffset(21, opsImpairment, 0)
        fun addCommImpairment(builder: FlatBufferBuilder, commImpairment: Int) = builder.addOffset(22, commImpairment, 0)
        fun addCat(builder: FlatBufferBuilder, cat: Byte) = builder.addByte(23, cat, 0)
        fun addEoc(builder: FlatBufferBuilder, eoc: Byte) = builder.addByte(24, eoc, 0)
        fun addLink(builder: FlatBufferBuilder, link: Int) = builder.addOffset(25, link, 0)
        fun createLinkVector(builder: FlatBufferBuilder, data: IntArray) : Int {
            builder.startVector(4, data.size, 4)
            for (i in data.size - 1 downTo 0) {
                builder.addOffset(data[i])
            }
            return builder.endVector()
        }
        fun startLinkVector(builder: FlatBufferBuilder, numElems: Int) = builder.startVector(4, numElems, 4)
        fun addLinkStatus(builder: FlatBufferBuilder, linkStatus: Int) = builder.addOffset(26, linkStatus, 0)
        fun createLinkStatusVector(builder: FlatBufferBuilder, data: IntArray) : Int {
            builder.startVector(4, data.size, 4)
            for (i in data.size - 1 downTo 0) {
                builder.addOffset(data[i])
            }
            return builder.endVector()
        }
        fun startLinkStatusVector(builder: FlatBufferBuilder, numElems: Int) = builder.startVector(4, numElems, 4)
        fun addRadarSystem(builder: FlatBufferBuilder, radarSystem: Int) = builder.addOffset(27, radarSystem, 0)
        fun createRadarSystemVector(builder: FlatBufferBuilder, data: IntArray) : Int {
            builder.startVector(4, data.size, 4)
            for (i in data.size - 1 downTo 0) {
                builder.addOffset(data[i])
            }
            return builder.endVector()
        }
        fun startRadarSystemVector(builder: FlatBufferBuilder, numElems: Int) = builder.startVector(4, numElems, 4)
        fun addRadarStatus(builder: FlatBufferBuilder, radarStatus: Int) = builder.addOffset(28, radarStatus, 0)
        fun createRadarStatusVector(builder: FlatBufferBuilder, data: IntArray) : Int {
            builder.startVector(4, data.size, 4)
            for (i in data.size - 1 downTo 0) {
                builder.addOffset(data[i])
            }
            return builder.endVector()
        }
        fun startRadarStatusVector(builder: FlatBufferBuilder, numElems: Int) = builder.startVector(4, numElems, 4)
        fun addMissile(builder: FlatBufferBuilder, missile: Int) = builder.addOffset(29, missile, 0)
        fun createMissileVector(builder: FlatBufferBuilder, data: IntArray) : Int {
            builder.startVector(4, data.size, 4)
            for (i in data.size - 1 downTo 0) {
                builder.addOffset(data[i])
            }
            return builder.endVector()
        }
        fun startMissileVector(builder: FlatBufferBuilder, numElems: Int) = builder.startVector(4, numElems, 4)
        fun addMissileInventory(builder: FlatBufferBuilder, missileInventory: Int) = builder.addOffset(30, missileInventory, 0)
        fun createMissileInventoryVector(builder: FlatBufferBuilder, data: IntArray) : Int {
            builder.startVector(4, data.size, 4)
            for (i in data.size - 1 downTo 0) {
                builder.addOffset(data[i])
            }
            return builder.endVector()
        }
        fun startMissileInventoryVector(builder: FlatBufferBuilder, numElems: Int) = builder.startVector(4, numElems, 4)
        fun addCreatedAt(builder: FlatBufferBuilder, createdAt: Int) = builder.addOffset(31, createdAt, 0)
        fun addCreatedBy(builder: FlatBufferBuilder, createdBy: Int) = builder.addOffset(32, createdBy, 0)
        fun addUpdatedAt(builder: FlatBufferBuilder, updatedAt: Int) = builder.addOffset(33, updatedAt, 0)
        fun addUpdatedBy(builder: FlatBufferBuilder, updatedBy: Int) = builder.addOffset(34, updatedBy, 0)
        fun addSource(builder: FlatBufferBuilder, source: Int) = builder.addOffset(35, source, 0)
        fun addOrigin(builder: FlatBufferBuilder, origin: Int) = builder.addOffset(36, origin, 0)
        fun addOrigNetwork(builder: FlatBufferBuilder, origNetwork: Int) = builder.addOffset(37, origNetwork, 0)
        fun addDataMode(builder: FlatBufferBuilder, dataMode: Byte) = builder.addByte(38, dataMode, 0)
        fun endSiteStatus_Full(builder: FlatBufferBuilder) : Int {
            val o = builder.endTable()
            return o
        }
        fun finishSiteStatusFullBuffer(builder: FlatBufferBuilder, offset: Int) = builder.finish(offset, "SITE")
        fun finishSizePrefixedSiteStatus_FullBuffer(builder: FlatBufferBuilder, offset: Int) = builder.finishSizePrefixed(offset, "SITE")
    }
}
