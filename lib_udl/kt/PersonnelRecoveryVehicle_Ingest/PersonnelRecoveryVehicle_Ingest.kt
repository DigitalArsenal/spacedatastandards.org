// automatically generated by the FlatBuffers compiler, do not modify

import com.google.flatbuffers.BaseVector
import com.google.flatbuffers.BooleanVector
import com.google.flatbuffers.ByteVector
import com.google.flatbuffers.Constants
import com.google.flatbuffers.DoubleVector
import com.google.flatbuffers.FlatBufferBuilder
import com.google.flatbuffers.FloatVector
import com.google.flatbuffers.LongVector
import com.google.flatbuffers.StringVector
import com.google.flatbuffers.Struct
import com.google.flatbuffers.Table
import com.google.flatbuffers.UnionVector
import java.nio.ByteBuffer
import java.nio.ByteOrder
import kotlin.math.sign

/**
 * /// Information regarding the recovery vehicle.
 */
@Suppress("unused")
class PersonnelRecoveryVehicle_Ingest : Table() {

    fun __init(_i: Int, _bb: ByteBuffer)  {
        __reset(_i, _bb)
    }
    fun __assign(_i: Int, _bb: ByteBuffer) : PersonnelRecoveryVehicle_Ingest {
        __init(_i, _bb)
        return this
    }
    /**
     * The call sign of the recovery vehicle.
     * Example: /// Example: FALCO
     * Constraints: Minimum length = 0, Maximum length = 128
     */
    val callSign : String?
        get() {
            val o = __offset(4)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val callSignAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(4, 1)
    fun callSignInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 4, 1)
    /**
     * The particular type of recovery vehicle to be used.
     * Example: /// Example: C17
     * Constraints: Minimum length = 0, Maximum length = 64
     */
    val type : String?
        get() {
            val o = __offset(6)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val typeAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(6, 1)
    fun typeInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 6, 1)
    /**
     * Primary contact frequency of the recovery vehicle.
     * Example: /// Example: 34.55
     * Constraints: No constraints specified.
     */
    val primaryFreq : Double
        get() {
            val o = __offset(8)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * The number of objects or units moving as a group and represented as a single entity in this recovery vehicle message. If null, the strength is assumed to represent a single object.  Note that if this recovery derives from a J-series message then special definitions apply for the following values: 13 indicates an estimated 2-7 units, 14 indicates an estimated more than 7 units, and 15 indicates an estimated more than 12 units.
     * Example: /// Example: 5
     * Constraints: No constraints specified.
     */
    val strength : Int
        get() {
            val o = __offset(10)
            return if(o != 0) bb.getInt(o + bb_pos) else 0
        }
    companion object {
        fun validateVersion() = Constants.FLATBUFFERS_24_3_25()
        fun getRootAsPersonnelRecoveryVehicle_Ingest(_bb: ByteBuffer): PersonnelRecoveryVehicle_Ingest = getRootAsPersonnelRecoveryVehicle_Ingest(_bb, PersonnelRecoveryVehicle_Ingest())
        fun getRootAsPersonnelRecoveryVehicle_Ingest(_bb: ByteBuffer, obj: PersonnelRecoveryVehicle_Ingest): PersonnelRecoveryVehicle_Ingest {
            _bb.order(ByteOrder.LITTLE_ENDIAN)
            return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb))
        }
        fun PersonnelRecoveryVehicle_IngestBufferHasIdentifier(_bb: ByteBuffer) : Boolean = __has_identifier(_bb, "PERS")
        fun createPersonnelRecoveryVehicle_Ingest(builder: FlatBufferBuilder, callSignOffset: Int, typeOffset: Int, primaryFreq: Double, strength: Int) : Int {
            builder.startTable(4)
            addPrimaryFreq(builder, primaryFreq)
            addStrength(builder, strength)
            addType(builder, typeOffset)
            addCallSign(builder, callSignOffset)
            return endPersonnelRecoveryVehicle_Ingest(builder)
        }
        fun startPersonnelRecoveryVehicle_Ingest(builder: FlatBufferBuilder) = builder.startTable(4)
        fun addCallSign(builder: FlatBufferBuilder, callSign: Int) = builder.addOffset(0, callSign, 0)
        fun addType(builder: FlatBufferBuilder, type: Int) = builder.addOffset(1, type, 0)
        fun addPrimaryFreq(builder: FlatBufferBuilder, primaryFreq: Double) = builder.addDouble(2, primaryFreq, 0.0)
        fun addStrength(builder: FlatBufferBuilder, strength: Int) = builder.addInt(3, strength, 0)
        fun endPersonnelRecoveryVehicle_Ingest(builder: FlatBufferBuilder) : Int {
            val o = builder.endTable()
            return o
        }
        fun finishPersonnelRecoveryVehicleIngestBuffer(builder: FlatBufferBuilder, offset: Int) = builder.finish(offset, "PERS")
        fun finishSizePrefixedPersonnelRecoveryVehicle_IngestBuffer(builder: FlatBufferBuilder, offset: Int) = builder.finishSizePrefixed(offset, "PERS")
    }
}
