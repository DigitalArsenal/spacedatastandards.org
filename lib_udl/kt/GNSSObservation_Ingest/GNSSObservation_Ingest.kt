// automatically generated by the FlatBuffers compiler, do not modify

import com.google.flatbuffers.BaseVector
import com.google.flatbuffers.BooleanVector
import com.google.flatbuffers.ByteVector
import com.google.flatbuffers.Constants
import com.google.flatbuffers.DoubleVector
import com.google.flatbuffers.FlatBufferBuilder
import com.google.flatbuffers.FloatVector
import com.google.flatbuffers.LongVector
import com.google.flatbuffers.StringVector
import com.google.flatbuffers.Struct
import com.google.flatbuffers.Table
import com.google.flatbuffers.UnionVector
import java.nio.ByteBuffer
import java.nio.ByteOrder
import kotlin.math.sign

/**
 * /// Information for Global Navigation Satellite Systems (GNSS) Observations collected from GNSS receivers, including the specific GNSS sat from which each signal was received, and the observation codes of each observation in the record. Each GNSS Observation is associated with a GNSS Observation Set record containing data which applies to all observations in the set, including observation time, receiver location, and Dilution of Precision (DOP) values. Users can Reference RINEX 3+ documentation for further information concerning many of the standards and conventions for GNSS observations.
 */
@Suppress("unused")
class GNSSObservation_Ingest : Table() {

    fun __init(_i: Int, _bb: ByteBuffer)  {
        __reset(_i, _bb)
    }
    fun __assign(_i: Int, _bb: ByteBuffer) : GNSSObservation_Ingest {
        __init(_i, _bb)
        return this
    }
    /**
     * RINEX 3+ compliant GNSS System and Satellite Identifier (represented as SNN, where S is the system code, and NN is the satellite identifier) associated with this observation:
     * G - GPS (NN = PRN)
     * R - GLONASS (NN = Slot Number)
     * S - SBAS Payload (NN = PRN-100)
     * E - Galileo (NN = PRN)
     * C - BeiDou (NN = PRN)
     * J - QZSS (NN = PRN - 1923)
     * I - IRNSS (NN = PRN)
     * Example: /// Example: GEJ
     * Constraints: Minimum length = 0, Maximum length = 6
     */
    val gnssSatId : String?
        get() {
            val o = __offset(4)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val gnssSatIdAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(4, 1)
    fun gnssSatIdInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 4, 1)
    /**
     * Status of the GNSS receiver signal. Status options are 0, 1 or 2 (0 being the best).
     * Example: /// Example: 0
     * Constraints: No constraints specified.
     */
    val trackingStatus : Int
        get() {
            val o = __offset(6)
            return if(o != 0) bb.getInt(o + bb_pos) else 0
        }
    /**
     * GNSS Automatic Gain Control State.
     * Example: /// Example: 20
     * Constraints: No constraints specified.
     */
    val agcState : Int
        get() {
            val o = __offset(8)
            return if(o != 0) bb.getInt(o + bb_pos) else 0
        }
    /**
     * The observation code set that applies to this observation record.  Reference RINEX 3+ for further information concerning observation code set conventions.
     * Example: /// Example: ['S1C', 'C1C', 'C1D']
     * Constraints: No constraints specified.
     */
    fun obsCodeSet(j: Int) : String? {
        val o = __offset(10)
        return if (o != 0) {
            __string(__vector(o) + j * 4)
        } else {
            null
        }
    }
    val obsCodeSetLength : Int
        get() {
            val o = __offset(10); return if (o != 0) __vector_len(o) else 0
        }
    /**
     * Array of observation(s).  The ob array must be the same length as the obsCodeSet.  Pseudorange (C) is expressed meters, carrier phase (L) in cycles,  doppler (D) in Hz where + values indicate approaching sats, and signal strength C/No (S) in dB-Hz.
     * Example: /// Example: [42.1, 1000.0, 0.9]
     * Constraints: No constraints specified.
     */
    fun ob(j: Int) : String? {
        val o = __offset(12)
        return if (o != 0) {
            __string(__vector(o) + j * 4)
        } else {
            null
        }
    }
    val obLength : Int
        get() {
            val o = __offset(12); return if (o != 0) __vector_len(o) else 0
        }
    companion object {
        fun validateVersion() = Constants.FLATBUFFERS_24_3_25()
        fun getRootAsGNSSObservation_Ingest(_bb: ByteBuffer): GNSSObservation_Ingest = getRootAsGNSSObservation_Ingest(_bb, GNSSObservation_Ingest())
        fun getRootAsGNSSObservation_Ingest(_bb: ByteBuffer, obj: GNSSObservation_Ingest): GNSSObservation_Ingest {
            _bb.order(ByteOrder.LITTLE_ENDIAN)
            return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb))
        }
        fun GNSSObservation_IngestBufferHasIdentifier(_bb: ByteBuffer) : Boolean = __has_identifier(_bb, "GNSS")
        fun createGNSSObservation_Ingest(builder: FlatBufferBuilder, gnssSatIdOffset: Int, trackingStatus: Int, agcState: Int, obsCodeSetOffset: Int, obOffset: Int) : Int {
            builder.startTable(5)
            addOb(builder, obOffset)
            addObsCodeSet(builder, obsCodeSetOffset)
            addAgcState(builder, agcState)
            addTrackingStatus(builder, trackingStatus)
            addGnssSatId(builder, gnssSatIdOffset)
            return endGNSSObservation_Ingest(builder)
        }
        fun startGNSSObservation_Ingest(builder: FlatBufferBuilder) = builder.startTable(5)
        fun addGnssSatId(builder: FlatBufferBuilder, gnssSatId: Int) = builder.addOffset(0, gnssSatId, 0)
        fun addTrackingStatus(builder: FlatBufferBuilder, trackingStatus: Int) = builder.addInt(1, trackingStatus, 0)
        fun addAgcState(builder: FlatBufferBuilder, agcState: Int) = builder.addInt(2, agcState, 0)
        fun addObsCodeSet(builder: FlatBufferBuilder, obsCodeSet: Int) = builder.addOffset(3, obsCodeSet, 0)
        fun createObsCodeSetVector(builder: FlatBufferBuilder, data: IntArray) : Int {
            builder.startVector(4, data.size, 4)
            for (i in data.size - 1 downTo 0) {
                builder.addOffset(data[i])
            }
            return builder.endVector()
        }
        fun startObsCodeSetVector(builder: FlatBufferBuilder, numElems: Int) = builder.startVector(4, numElems, 4)
        fun addOb(builder: FlatBufferBuilder, ob: Int) = builder.addOffset(4, ob, 0)
        fun createObVector(builder: FlatBufferBuilder, data: IntArray) : Int {
            builder.startVector(4, data.size, 4)
            for (i in data.size - 1 downTo 0) {
                builder.addOffset(data[i])
            }
            return builder.endVector()
        }
        fun startObVector(builder: FlatBufferBuilder, numElems: Int) = builder.startVector(4, numElems, 4)
        fun endGNSSObservation_Ingest(builder: FlatBufferBuilder) : Int {
            val o = builder.endTable()
            return o
        }
        fun finishGNSSObservationIngestBuffer(builder: FlatBufferBuilder, offset: Int) = builder.finish(offset, "GNSS")
        fun finishSizePrefixedGNSSObservation_IngestBuffer(builder: FlatBufferBuilder, offset: Int) = builder.finishSizePrefixed(offset, "GNSS")
    }
}
