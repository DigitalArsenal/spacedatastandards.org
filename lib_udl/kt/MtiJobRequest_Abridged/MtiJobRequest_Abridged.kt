// automatically generated by the FlatBuffers compiler, do not modify

import com.google.flatbuffers.BaseVector
import com.google.flatbuffers.BooleanVector
import com.google.flatbuffers.ByteVector
import com.google.flatbuffers.Constants
import com.google.flatbuffers.DoubleVector
import com.google.flatbuffers.FlatBufferBuilder
import com.google.flatbuffers.FloatVector
import com.google.flatbuffers.LongVector
import com.google.flatbuffers.StringVector
import com.google.flatbuffers.Struct
import com.google.flatbuffers.Table
import com.google.flatbuffers.UnionVector
import java.nio.ByteBuffer
import java.nio.ByteOrder
import kotlin.math.sign

/**
 * /// A grouping of zero or more target reports for which the sensor provides a single time, sensor position, reference position on the ground with simple estimates for the observed area at the reported time, and other pertinent data.
 */
@Suppress("unused")
class MtiJobRequest_Abridged : Table() {

    fun __init(_i: Int, _bb: ByteBuffer)  {
        __reset(_i, _bb)
    }
    fun __assign(_i: Int, _bb: ByteBuffer) : MtiJobRequest_Abridged {
        __init(_i, _bb)
        return this
    }
    /**
     * The requestor of the sensor service.
     * Example: /// Example: REQUESTER
     * Constraints: Minimum length = 0, Maximum length = 10
     */
    val r1 : String?
        get() {
            val o = __offset(4)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val r1AsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(4, 1)
    fun r1InByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 4, 1)
    /**
     * Identifier for the tasking message sent by the requesting station.
     * Example: /// Example: IDENTIFIER
     * Constraints: Minimum length = 0, Maximum length = 10
     */
    val r2 : String?
        get() {
            val o = __offset(6)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val r2AsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(6, 1)
    fun r2InByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 6, 1)
    /**
     * The priority of the request relative to other requests originated by the requesting station.
     * Example: /// Example: 15
     * Constraints: No constraints specified.
     */
    val r3 : Int
        get() {
            val o = __offset(8)
            return if(o != 0) bb.getInt(o + bb_pos) else 0
        }
    /**
     * North-South position of the first corner (Point A) defining the requested area for service, expressed as degrees North (positive) or South (negative) of the Equator.
     * Example: /// Example: 10.23
     * Constraints: No constraints specified.
     */
    val r4 : Double
        get() {
            val o = __offset(10)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * East-West position of the first corner (Point A) defining the requested area for service, expressed as degrees East (positive, 0 to 180) or West (negative, 0 to -180) of the Prime Meridian.
     * Example: /// Example: 10.23
     * Constraints: No constraints specified.
     */
    val r5 : Double
        get() {
            val o = __offset(12)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * North-South position of the second corner (Point B) defining the requested area for service, expressed as degrees North (positive) or South (negative) of the Equator.
     * Example: /// Example: 10.23
     * Constraints: No constraints specified.
     */
    val r6 : Double
        get() {
            val o = __offset(14)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * East-West position of the second corner (Point B) defining the requested area for service, expressed as degrees East (positive, 0 to 180) or West (negative, 0 to -180) of the Prime Meridian.
     * Example: /// Example: 10.23
     * Constraints: No constraints specified.
     */
    val r7 : Double
        get() {
            val o = __offset(16)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * North-South position of the third corner (Point C) defining the requested area for service, expressed as degrees North (positive) or South (negative) of the Equator.
     * Example: /// Example: 10.23
     * Constraints: No constraints specified.
     */
    val r8 : Double
        get() {
            val o = __offset(18)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * East-West position of the third corner (Point C) defining the requested area for service, expressed as degrees East (positive, 0 to 180) or West (negative, 0 to -180) of the Prime Meridian.
     * Example: /// Example: 10.23
     * Constraints: No constraints specified.
     */
    val r9 : Double
        get() {
            val o = __offset(20)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * North-South position of the fourth corner (Point D) defining the requested area for service, expressed as degrees North (positive) or South (negative) of the Equator.
     * Example: /// Example: 10.23
     * Constraints: No constraints specified.
     */
    val r10 : Double
        get() {
            val o = __offset(22)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * East-West position of the fourth corner (Point D) defining the requested area for service, expressed as degrees East (positive, 0 to 180) or West (negative, 0 to -180) of the Prime Meridian.
     * Example: /// Example: 10.23
     * Constraints: No constraints specified.
     */
    val r11 : Double
        get() {
            val o = __offset(24)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Identifies the radar mode requested by the requestor.
     * Example: /// Example: MODE
     * Constraints: Minimum length = 0, Maximum length = 32
     */
    val r12 : String?
        get() {
            val o = __offset(26)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val r12AsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(26, 1)
    fun r12InByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 26, 1)
    /**
     * Specifies the radar range resolution requested by the requestor, expressed in centimeters.
     * Example: /// Example: 10
     * Constraints: No constraints specified.
     */
    val r13 : Int
        get() {
            val o = __offset(28)
            return if(o != 0) bb.getInt(o + bb_pos) else 0
        }
    /**
     * Specifies the radar cross-range resolution requested by the requestor, expressed in decimeters.
     * Example: /// Example: 100
     * Constraints: No constraints specified.
     */
    val r14 : Int
        get() {
            val o = __offset(30)
            return if(o != 0) bb.getInt(o + bb_pos) else 0
        }
    /**
     * Specifies the Earliest Start Time for which the service is requested.  Composite of fields R15-R20.
     * Example: /// Example: 2018-01-01T16:00:00.123456Z
     * Constraints: No constraints specified.
     */
    val jobReqEst : String?
        get() {
            val o = __offset(32)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val jobReqEstAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(32, 1)
    fun jobReqEstInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 32, 1)
    /**
     * Specifies the maximum time from the requested start time after which the request is to be abandoned, expressed in seconds.
     * Example: /// Example: 10
     * Constraints: No constraints specified.
     */
    val r21 : Int
        get() {
            val o = __offset(34)
            return if(o != 0) bb.getInt(o + bb_pos) else 0
        }
    /**
     * Specifies the time duration for the radar job, measured from the actual start of the job, expressed in seconds.
     * Example: /// Example: 10
     * Constraints: No constraints specified.
     */
    val r22 : Int
        get() {
            val o = __offset(36)
            return if(o != 0) bb.getInt(o + bb_pos) else 0
        }
    /**
     * Specifies the revisit interval for the radar job, expressed in deciseconds.
     * Example: /// Example: 100
     * Constraints: No constraints specified.
     */
    val r23 : Int
        get() {
            val o = __offset(38)
            return if(o != 0) bb.getInt(o + bb_pos) else 0
        }
    /**
     * the type of sensor or the platform.
     * Example: /// Example: TYPE
     * Constraints: Minimum length = 0, Maximum length = 32
     */
    val r24 : String?
        get() {
            val o = __offset(40)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val r24AsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(40, 1)
    fun r24InByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 40, 1)
    /**
     * The particular variant of the sensor type.
     * Example: /// Example: VARIANT
     * Constraints: Minimum length = 0, Maximum length = 8
     */
    val r25 : String?
        get() {
            val o = __offset(42)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val r25AsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(42, 1)
    fun r25InByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 42, 1)
    /**
     * Flag field indicating that it is an initial request (flag = 0) or the desire of the requestor to cancel (flag = 1) the requested job.
     * Example: /// Example: True
     * Constraints: No constraints specified.
     */
    val r26 : Boolean
        get() {
            val o = __offset(44)
            return if(o != 0) 0.toByte() != bb.get(o + bb_pos) else false
        }
    companion object {
        fun validateVersion() = Constants.FLATBUFFERS_24_3_25()
        fun getRootAsMtiJobRequest_Abridged(_bb: ByteBuffer): MtiJobRequest_Abridged = getRootAsMtiJobRequest_Abridged(_bb, MtiJobRequest_Abridged())
        fun getRootAsMtiJobRequest_Abridged(_bb: ByteBuffer, obj: MtiJobRequest_Abridged): MtiJobRequest_Abridged {
            _bb.order(ByteOrder.LITTLE_ENDIAN)
            return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb))
        }
        fun MtiJobRequest_AbridgedBufferHasIdentifier(_bb: ByteBuffer) : Boolean = __has_identifier(_bb, "MTIJ")
        fun createMtiJobRequest_Abridged(builder: FlatBufferBuilder, r1Offset: Int, r2Offset: Int, r3: Int, r4: Double, r5: Double, r6: Double, r7: Double, r8: Double, r9: Double, r10: Double, r11: Double, r12Offset: Int, r13: Int, r14: Int, jobReqEstOffset: Int, r21: Int, r22: Int, r23: Int, r24Offset: Int, r25Offset: Int, r26: Boolean) : Int {
            builder.startTable(21)
            addR11(builder, r11)
            addR10(builder, r10)
            addR9(builder, r9)
            addR8(builder, r8)
            addR7(builder, r7)
            addR6(builder, r6)
            addR5(builder, r5)
            addR4(builder, r4)
            addR25(builder, r25Offset)
            addR24(builder, r24Offset)
            addR23(builder, r23)
            addR22(builder, r22)
            addR21(builder, r21)
            addJobReqEst(builder, jobReqEstOffset)
            addR14(builder, r14)
            addR13(builder, r13)
            addR12(builder, r12Offset)
            addR3(builder, r3)
            addR2(builder, r2Offset)
            addR1(builder, r1Offset)
            addR26(builder, r26)
            return endMtiJobRequest_Abridged(builder)
        }
        fun startMtiJobRequest_Abridged(builder: FlatBufferBuilder) = builder.startTable(21)
        fun addR1(builder: FlatBufferBuilder, r1: Int) = builder.addOffset(0, r1, 0)
        fun addR2(builder: FlatBufferBuilder, r2: Int) = builder.addOffset(1, r2, 0)
        fun addR3(builder: FlatBufferBuilder, r3: Int) = builder.addInt(2, r3, 0)
        fun addR4(builder: FlatBufferBuilder, r4: Double) = builder.addDouble(3, r4, 0.0)
        fun addR5(builder: FlatBufferBuilder, r5: Double) = builder.addDouble(4, r5, 0.0)
        fun addR6(builder: FlatBufferBuilder, r6: Double) = builder.addDouble(5, r6, 0.0)
        fun addR7(builder: FlatBufferBuilder, r7: Double) = builder.addDouble(6, r7, 0.0)
        fun addR8(builder: FlatBufferBuilder, r8: Double) = builder.addDouble(7, r8, 0.0)
        fun addR9(builder: FlatBufferBuilder, r9: Double) = builder.addDouble(8, r9, 0.0)
        fun addR10(builder: FlatBufferBuilder, r10: Double) = builder.addDouble(9, r10, 0.0)
        fun addR11(builder: FlatBufferBuilder, r11: Double) = builder.addDouble(10, r11, 0.0)
        fun addR12(builder: FlatBufferBuilder, r12: Int) = builder.addOffset(11, r12, 0)
        fun addR13(builder: FlatBufferBuilder, r13: Int) = builder.addInt(12, r13, 0)
        fun addR14(builder: FlatBufferBuilder, r14: Int) = builder.addInt(13, r14, 0)
        fun addJobReqEst(builder: FlatBufferBuilder, jobReqEst: Int) = builder.addOffset(14, jobReqEst, 0)
        fun addR21(builder: FlatBufferBuilder, r21: Int) = builder.addInt(15, r21, 0)
        fun addR22(builder: FlatBufferBuilder, r22: Int) = builder.addInt(16, r22, 0)
        fun addR23(builder: FlatBufferBuilder, r23: Int) = builder.addInt(17, r23, 0)
        fun addR24(builder: FlatBufferBuilder, r24: Int) = builder.addOffset(18, r24, 0)
        fun addR25(builder: FlatBufferBuilder, r25: Int) = builder.addOffset(19, r25, 0)
        fun addR26(builder: FlatBufferBuilder, r26: Boolean) = builder.addBoolean(20, r26, false)
        fun endMtiJobRequest_Abridged(builder: FlatBufferBuilder) : Int {
            val o = builder.endTable()
            return o
        }
        fun finishMtiJobRequestAbridgedBuffer(builder: FlatBufferBuilder, offset: Int) = builder.finish(offset, "MTIJ")
        fun finishSizePrefixedMtiJobRequest_AbridgedBuffer(builder: FlatBufferBuilder, offset: Int) = builder.finishSizePrefixed(offset, "MTIJ")
    }
}
