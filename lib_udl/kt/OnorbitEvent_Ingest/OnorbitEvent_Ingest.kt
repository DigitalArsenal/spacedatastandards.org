// automatically generated by the FlatBuffers compiler, do not modify

import com.google.flatbuffers.BaseVector
import com.google.flatbuffers.BooleanVector
import com.google.flatbuffers.ByteVector
import com.google.flatbuffers.Constants
import com.google.flatbuffers.DoubleVector
import com.google.flatbuffers.FlatBufferBuilder
import com.google.flatbuffers.FloatVector
import com.google.flatbuffers.LongVector
import com.google.flatbuffers.StringVector
import com.google.flatbuffers.Struct
import com.google.flatbuffers.Table
import com.google.flatbuffers.UnionVector
import java.nio.ByteBuffer
import java.nio.ByteOrder
import kotlin.math.sign

/**
 * /// No description available.
 */
@Suppress("unused")
class OnorbitEvent_Ingest : Table() {

    fun __init(_i: Int, _bb: ByteBuffer)  {
        __reset(_i, _bb)
    }
    fun __assign(_i: Int, _bb: ByteBuffer) : OnorbitEvent_Ingest {
        __init(_i, _bb)
        return this
    }
    /**
     * Unique identifier of the record, auto-generated by the system.
     * Example: /// Example: ONORBITEVENT-ID
     * Constraints: Minimum length = 1, Maximum length = 36
     */
    val id : String?
        get() {
            val o = __offset(4)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val idAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(4, 1)
    fun idInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 4, 1)
    /**
     * Classification marking of the data in IC/CAPCO Portion-marked format.
     * Example: /// Example: U
     * Constraints: Minimum length = 1, Maximum length = 128
     */
    val classificationMarking : String?
        get() {
            val o = __offset(6)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val classificationMarkingAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(6, 1)
    fun classificationMarkingInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 6, 1)
    /**
     * The sources or SCG references from which the classification of this data is derived.
     * Example: /// Example: DERIVED_SOURCE
     * Constraints: Minimum length = 0, Maximum length = 128
     */
    val derivedFrom : String?
        get() {
            val o = __offset(8)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val derivedFromAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(8, 1)
    fun derivedFromInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 8, 1)
    /**
     * The declassification date of this data, in ISO 8601 UTC format.
     * Example: /// Example: 2021-01-01T01:02:02.123Z
     * Constraints: No constraints specified.
     */
    val declassificationDate : String?
        get() {
            val o = __offset(10)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val declassificationDateAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(10, 1)
    fun declassificationDateInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 10, 1)
    /**
     * Declassification string of this data.
     * Example: /// Example: DECLASS_STRING
     * Constraints: Minimum length = 0, Maximum length = 256
     */
    val declassificationString : String?
        get() {
            val o = __offset(12)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val declassificationStringAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(12, 1)
    fun declassificationStringInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 12, 1)
    /**
     * Unique identifier of the on-orbit object for this event.
     * Example: /// Example: ONORBIT-ID
     * Constraints: Minimum length = 1, Maximum length = 36
     */
    val idOnOrbit : String?
        get() {
            val o = __offset(14)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val idOnOrbitAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(14, 1)
    fun idOnOrbitInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 14, 1)
    /**
     * Satellite/Catalog number of the target on-orbit object.
     * Example: /// Example: 1
     * Constraints: No constraints specified.
     */
    val satNo : Int
        get() {
            val o = __offset(16)
            return if(o != 0) bb.getInt(o + bb_pos) else 0
        }
    /**
     * Original object ID or Catalog Number provided by source (may not map to an existing idOnOrbit in UDL).
     * Example: /// Example: ORIGOBJECT-ID
     * Constraints: Minimum length = 0, Maximum length = 64
     */
    val origObjectId : String?
        get() {
            val o = __offset(18)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val origObjectIdAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(18, 1)
    fun origObjectIdInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 18, 1)
    /**
     * Date/Time of the event. See eventTimeNotes for remarks on the accuracy of the date time.
     * Example: /// Example: 2018-01-01T16:00:00.123Z
     * Constraints: No constraints specified.
     */
    val eventTime : String?
        get() {
            val o = __offset(20)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val eventTimeAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(20, 1)
    fun eventTimeInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 20, 1)
    /**
     * Notes/remarks on the validity/accuracy of the eventTime.
     * Example: /// Example: Notes on validity
     * Constraints: Minimum length = 0, Maximum length = 128
     */
    val eventTimeNotes : String?
        get() {
            val o = __offset(22)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val eventTimeNotesAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(22, 1)
    fun eventTimeNotesInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 22, 1)
    /**
     * Organization ID of the operator of the on-orbit spacecraft at the time of the event.
     * Example: /// Example: OPERATORORG-ID
     * Constraints: Minimum length = 0, Maximum length = 36
     */
    val operatorOrgId : String?
        get() {
            val o = __offset(24)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val operatorOrgIdAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(24, 1)
    fun operatorOrgIdInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 24, 1)
    /**
     * Organization ID of the owner of the on-orbit spacecraft at the time of the event.
     * Example: /// Example: OWNERORG-ID
     * Constraints: Minimum length = 0, Maximum length = 36
     */
    val ownerOrgId : String?
        get() {
            val o = __offset(26)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val ownerOrgIdAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(26, 1)
    fun ownerOrgIdInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 26, 1)
    /**
     * Unique identifier of the organization which leases this on-orbit spacecraft.
     * Example: /// Example: LESSEEORG-ID
     * Constraints: Minimum length = 0, Maximum length = 36
     */
    val lesseeOrgId : String?
        get() {
            val o = __offset(28)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val lesseeOrgIdAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(28, 1)
    fun lesseeOrgIdInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 28, 1)
    /**
     * Unique identifier of the organization on whose behalf the on-orbit spacecraft is operated.
     * Example: /// Example: OPERATEDONBEHALFOFORG-ID
     * Constraints: Minimum length = 0, Maximum length = 36
     */
    val operatedOnBehalfOfOrgId : String?
        get() {
            val o = __offset(30)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val operatedOnBehalfOfOrgIdAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(30, 1)
    fun operatedOnBehalfOfOrgIdInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 30, 1)
    /**
     * GEO position longitude at event time if applicable. Negative values are west.
     * Example: /// Example: 45.23
     * Constraints: No constraints specified.
     */
    val geoPosition : Double
        get() {
            val o = __offset(32)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * GEO plane slot of the spacecraft at event time.
     * Example: /// Example: example_slot
     * Constraints: Minimum length = 0, Maximum length = 16
     */
    val planeSlot : String?
        get() {
            val o = __offset(34)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val planeSlotAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(34, 1)
    fun planeSlotInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 34, 1)
    /**
     * GEO slot plane number/designator of the spacecraft at event time.
     * Example: /// Example: PL_1
     * Constraints: Minimum length = 0, Maximum length = 4
     */
    val planeNumber : String?
        get() {
            val o = __offset(36)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val planeNumberAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(36, 1)
    fun planeNumberInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 36, 1)
    /**
     * Position status of the spacecraft at event time (e.g. Stable, Drifting/Tumbling, etc).
     * Example: /// Example: Stable
     * Constraints: Minimum length = 0, Maximum length = 128
     */
    val positionStatus : String?
        get() {
            val o = __offset(38)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val positionStatusAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(38, 1)
    fun positionStatusInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 38, 1)
    /**
     * Maximum validity time of the event.
     * Example: /// Example: 2021-01-01T01:01:01.123Z
     * Constraints: No constraints specified.
     */
    val untilTime : String?
        get() {
            val o = __offset(40)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val untilTimeAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(40, 1)
    fun untilTimeInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 40, 1)
    /**
     * Date time of official loss of the spacecraft.
     * Example: /// Example: 2021-01-01T01:01:01.123Z
     * Constraints: No constraints specified.
     */
    val officialLossDate : String?
        get() {
            val o = __offset(42)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val officialLossDateAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(42, 1)
    fun officialLossDateInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 42, 1)
    /**
     * Net amount of the insurance claim for the event, in USD.
     * Example: /// Example: 10000.23
     * Constraints: No constraints specified.
     */
    val netAmount : Double
        get() {
            val o = __offset(44)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Underlying cause of the event.
     * Example: /// Example: CAUSE_EXAMPLE
     * Constraints: Minimum length = 0, Maximum length = 128
     */
    val underlyingCause : String?
        get() {
            val o = __offset(46)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val underlyingCauseAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(46, 1)
    fun underlyingCauseInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 46, 1)
    /**
     * Spacecraft capability loss incurred, as a fraction of 1.
     * Example: /// Example: 0.5
     * Constraints: No constraints specified.
     */
    val capabilityLoss : Double
        get() {
            val o = __offset(48)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Spacecraft capacity loss incurred, as a fraction of 1.
     * Example: /// Example: 0.5
     * Constraints: No constraints specified.
     */
    val capacityLoss : Double
        get() {
            val o = __offset(50)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Insurance loss incurred, as a fraction of 1.
     * Example: /// Example: 0.5
     * Constraints: No constraints specified.
     */
    val insuranceLoss : Double
        get() {
            val o = __offset(52)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Insurance loss incurred by 3rd party insurance, in USD.
     * Example: /// Example: 10000.23
     * Constraints: No constraints specified.
     */
    val thirdPartyInsuranceLoss : Double
        get() {
            val o = __offset(54)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Number of humans injured in the event.
     * Example: /// Example: 1
     * Constraints: No constraints specified.
     */
    val injured : Int
        get() {
            val o = __offset(56)
            return if(o != 0) bb.getInt(o + bb_pos) else 0
        }
    /**
     * Number of humans killed in the event.
     * Example: /// Example: 23
     * Constraints: No constraints specified.
     */
    val killed : Int
        get() {
            val o = __offset(58)
            return if(o != 0) bb.getInt(o + bb_pos) else 0
        }
    /**
     * Spacecraft life lost due to the event as a percent/fraction of 1.
     * Example: /// Example: 0.5
     * Constraints: No constraints specified.
     */
    val lifeLost : Double
        get() {
            val o = __offset(60)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Spacecraft age at the event in years.
     * Example: /// Example: 5.23
     * Constraints: No constraints specified.
     */
    val ageAtEvent : Double
        get() {
            val o = __offset(62)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Achieved phase of flight prior to the event.
     * Example: /// Example: Phase 2
     * Constraints: Minimum length = 0, Maximum length = 64
     */
    val achievedFlightPhase : String?
        get() {
            val o = __offset(64)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val achievedFlightPhaseAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(64, 1)
    fun achievedFlightPhaseInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 64, 1)
    /**
     * Phase of flight during which the event occurred.
     * Example: /// Example: Phase 2
     * Constraints: Minimum length = 0, Maximum length = 64
     */
    val occurrenceFlightPhase : String?
        get() {
            val o = __offset(66)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val occurrenceFlightPhaseAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(66, 1)
    fun occurrenceFlightPhaseInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 66, 1)
    /**
     * Faulty stage of flight for the event.
     * Example: /// Example: Phase 2
     * Constraints: Minimum length = 0, Maximum length = 64
     */
    val stageAtFault : String?
        get() {
            val o = __offset(68)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val stageAtFaultAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(68, 1)
    fun stageAtFaultInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 68, 1)
    /**
     * Equipment on the spacecraft which caused the event.
     * Example: /// Example: Example Equipment
     * Constraints: Minimum length = 0, Maximum length = 64
     */
    val equipmentAtFault : String?
        get() {
            val o = __offset(70)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val equipmentAtFaultAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(70, 1)
    fun equipmentAtFaultInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 70, 1)
    /**
     * Type of the equipment on the spacecraft which caused the event.
     * Example: /// Example: Example Equipment
     * Constraints: Minimum length = 0, Maximum length = 64
     */
    val equipmentTypeAtFault : String?
        get() {
            val o = __offset(72)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val equipmentTypeAtFaultAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(72, 1)
    fun equipmentTypeAtFaultInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 72, 1)
    /**
     * Specific part of the equipment on the spacecraft which caused the event.
     * Example: /// Example: Example Equipment
     * Constraints: Minimum length = 0, Maximum length = 64
     */
    val equipmentPartAtFault : String?
        get() {
            val o = __offset(74)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val equipmentPartAtFaultAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(74, 1)
    fun equipmentPartAtFaultInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 74, 1)
    /**
     * Additional equipment which failed as a result of faulty equipment on the spacecraft during the event.
     * Example: /// Example: Example Equipment
     * Constraints: Minimum length = 0, Maximum length = 64
     */
    val consequentialEquipmentFailure : String?
        get() {
            val o = __offset(76)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val consequentialEquipmentFailureAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(76, 1)
    fun consequentialEquipmentFailureInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 76, 1)
    /**
     * Boolean indicating if the spacecraft is inclined.
     * Example: /// Example: False
     * Constraints: No constraints specified.
     */
    val inclined : Boolean
        get() {
            val o = __offset(78)
            return if(o != 0) 0.toByte() != bb.get(o + bb_pos) else false
        }
    /**
     * Notes/description of the event.
     * Example: /// Example: Example notes
     * Constraints: Minimum length = 0, Maximum length = 256
     */
    val description : String?
        get() {
            val o = __offset(80)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val descriptionAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(80, 1)
    fun descriptionInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 80, 1)
    /**
     * Additional remarks on the event description.
     * Example: /// Example: Example remarks
     * Constraints: Minimum length = 0, Maximum length = 512
     */
    val remarks : String?
        get() {
            val o = __offset(82)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val remarksAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(82, 1)
    fun remarksInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 82, 1)
    /**
     * Additional insurance notes if the event is an official loss.
     * Example: /// Example: Insurance notes
     * Constraints: Minimum length = 0, Maximum length = 512
     */
    val insuranceLossNotes : String?
        get() {
            val o = __offset(84)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val insuranceLossNotesAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(84, 1)
    fun insuranceLossNotesInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 84, 1)
    /**
     * Notes on capability loss at the time of event.
     * Example: /// Example: Example notes
     * Constraints: Minimum length = 0, Maximum length = 512
     */
    val capabilityLossNotes : String?
        get() {
            val o = __offset(86)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val capabilityLossNotesAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(86, 1)
    fun capabilityLossNotesInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 86, 1)
    /**
     * Additional insurance notes on coverages at the time of event.
     * Example: /// Example: Insurance notes
     * Constraints: Minimum length = 0, Maximum length = 512
     */
    val insuranceCarriedNotes : String?
        get() {
            val o = __offset(88)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val insuranceCarriedNotesAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(88, 1)
    fun insuranceCarriedNotesInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 88, 1)
    /**
     * Additional notes on the equipment causing the event/loss.
     * Example: /// Example: Example notes
     * Constraints: Minimum length = 0, Maximum length = 512
     */
    val equipmentCausingLossNotes : String?
        get() {
            val o = __offset(90)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val equipmentCausingLossNotesAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(90, 1)
    fun equipmentCausingLossNotesInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 90, 1)
    /**
     * The type of on-orbit event being reported.
     * Example: /// Example: Type1
     * Constraints: Minimum length = 0, Maximum length = 128
     */
    val eventType : String?
        get() {
            val o = __offset(92)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val eventTypeAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(92, 1)
    fun eventTypeInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 92, 1)
    /**
     * The result of the reported event.
     * Example: /// Example: Example results
     * Constraints: Minimum length = 0, Maximum length = 128
     */
    val eventResult : String?
        get() {
            val o = __offset(94)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val eventResultAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(94, 1)
    fun eventResultInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 94, 1)
    /**
     * The status of the on-orbit object.
     * Example: /// Example: Status1
     * Constraints: Minimum length = 0, Maximum length = 128
     */
    val objectStatus : String?
        get() {
            val o = __offset(96)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val objectStatusAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(96, 1)
    fun objectStatusInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 96, 1)
    /**
     * Description of the satellite orbital position or regime.
     * Example: /// Example: Example description
     * Constraints: Minimum length = 0, Maximum length = 128
     */
    val satellitePosition : String?
        get() {
            val o = __offset(98)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val satellitePositionAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(98, 1)
    fun satellitePositionInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 98, 1)
    /**
     * Source of the data.
     * Example: /// Example: Bluestaq
     * Constraints: Minimum length = 1, Maximum length = 64
     */
    val source : String?
        get() {
            val o = __offset(100)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val sourceAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(100, 1)
    fun sourceInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 100, 1)
    /**
     * Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
     * Example: /// Example: THIRD_PARTY_DATASOURCE
     * Constraints: Minimum length = 0, Maximum length = 64
     */
    val origin : String?
        get() {
            val o = __offset(102)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val originAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(102, 1)
    fun originInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 102, 1)
    /**
     * Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
     * EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
     * REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
     * SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
     * TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
     * Example: /// Example: TEST
     * Constraints: Minimum length = 1, Maximum length = 32
     */
    val dataMode : Byte
        get() {
            val o = __offset(104)
            return if(o != 0) bb.get(o + bb_pos) else 0
        }
    /**
     * Time the row was created in the database, auto-populated by the system.
     * Example: /// Example: 2018-01-01T16:00:00.123Z
     * Constraints: No constraints specified.
     */
    val createdAt : String?
        get() {
            val o = __offset(106)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val createdAtAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(106, 1)
    fun createdAtInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 106, 1)
    /**
     * Application user who created the row in the database, auto-populated by the system.
     * Example: /// Example: some.user
     * Constraints: Minimum length = 1, Maximum length = 64
     */
    val createdBy : String?
        get() {
            val o = __offset(108)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val createdByAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(108, 1)
    fun createdByInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 108, 1)
    /**
     * The originating source network on which this record was created, auto-populated by the system.
     * Example: /// Example: OPS1
     * Constraints: Minimum length = 1, Maximum length = 32
     */
    val origNetwork : String?
        get() {
            val o = __offset(110)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val origNetworkAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(110, 1)
    fun origNetworkInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 110, 1)
    companion object {
        fun validateVersion() = Constants.FLATBUFFERS_24_3_25()
        fun getRootAsOnorbitEvent_Ingest(_bb: ByteBuffer): OnorbitEvent_Ingest = getRootAsOnorbitEvent_Ingest(_bb, OnorbitEvent_Ingest())
        fun getRootAsOnorbitEvent_Ingest(_bb: ByteBuffer, obj: OnorbitEvent_Ingest): OnorbitEvent_Ingest {
            _bb.order(ByteOrder.LITTLE_ENDIAN)
            return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb))
        }
        fun OnorbitEvent_IngestBufferHasIdentifier(_bb: ByteBuffer) : Boolean = __has_identifier(_bb, "ONOR")
        fun createOnorbitEvent_Ingest(builder: FlatBufferBuilder, idOffset: Int, classificationMarkingOffset: Int, derivedFromOffset: Int, declassificationDateOffset: Int, declassificationStringOffset: Int, idOnOrbitOffset: Int, satNo: Int, origObjectIdOffset: Int, eventTimeOffset: Int, eventTimeNotesOffset: Int, operatorOrgIdOffset: Int, ownerOrgIdOffset: Int, lesseeOrgIdOffset: Int, operatedOnBehalfOfOrgIdOffset: Int, geoPosition: Double, planeSlotOffset: Int, planeNumberOffset: Int, positionStatusOffset: Int, untilTimeOffset: Int, officialLossDateOffset: Int, netAmount: Double, underlyingCauseOffset: Int, capabilityLoss: Double, capacityLoss: Double, insuranceLoss: Double, thirdPartyInsuranceLoss: Double, injured: Int, killed: Int, lifeLost: Double, ageAtEvent: Double, achievedFlightPhaseOffset: Int, occurrenceFlightPhaseOffset: Int, stageAtFaultOffset: Int, equipmentAtFaultOffset: Int, equipmentTypeAtFaultOffset: Int, equipmentPartAtFaultOffset: Int, consequentialEquipmentFailureOffset: Int, inclined: Boolean, descriptionOffset: Int, remarksOffset: Int, insuranceLossNotesOffset: Int, capabilityLossNotesOffset: Int, insuranceCarriedNotesOffset: Int, equipmentCausingLossNotesOffset: Int, eventTypeOffset: Int, eventResultOffset: Int, objectStatusOffset: Int, satellitePositionOffset: Int, sourceOffset: Int, originOffset: Int, dataMode: Byte, createdAtOffset: Int, createdByOffset: Int, origNetworkOffset: Int) : Int {
            builder.startTable(54)
            addAgeAtEvent(builder, ageAtEvent)
            addLifeLost(builder, lifeLost)
            addThirdPartyInsuranceLoss(builder, thirdPartyInsuranceLoss)
            addInsuranceLoss(builder, insuranceLoss)
            addCapacityLoss(builder, capacityLoss)
            addCapabilityLoss(builder, capabilityLoss)
            addNetAmount(builder, netAmount)
            addGeoPosition(builder, geoPosition)
            addOrigNetwork(builder, origNetworkOffset)
            addCreatedBy(builder, createdByOffset)
            addCreatedAt(builder, createdAtOffset)
            addOrigin(builder, originOffset)
            addSource(builder, sourceOffset)
            addSatellitePosition(builder, satellitePositionOffset)
            addObjectStatus(builder, objectStatusOffset)
            addEventResult(builder, eventResultOffset)
            addEventType(builder, eventTypeOffset)
            addEquipmentCausingLossNotes(builder, equipmentCausingLossNotesOffset)
            addInsuranceCarriedNotes(builder, insuranceCarriedNotesOffset)
            addCapabilityLossNotes(builder, capabilityLossNotesOffset)
            addInsuranceLossNotes(builder, insuranceLossNotesOffset)
            addRemarks(builder, remarksOffset)
            addDescription(builder, descriptionOffset)
            addConsequentialEquipmentFailure(builder, consequentialEquipmentFailureOffset)
            addEquipmentPartAtFault(builder, equipmentPartAtFaultOffset)
            addEquipmentTypeAtFault(builder, equipmentTypeAtFaultOffset)
            addEquipmentAtFault(builder, equipmentAtFaultOffset)
            addStageAtFault(builder, stageAtFaultOffset)
            addOccurrenceFlightPhase(builder, occurrenceFlightPhaseOffset)
            addAchievedFlightPhase(builder, achievedFlightPhaseOffset)
            addKilled(builder, killed)
            addInjured(builder, injured)
            addUnderlyingCause(builder, underlyingCauseOffset)
            addOfficialLossDate(builder, officialLossDateOffset)
            addUntilTime(builder, untilTimeOffset)
            addPositionStatus(builder, positionStatusOffset)
            addPlaneNumber(builder, planeNumberOffset)
            addPlaneSlot(builder, planeSlotOffset)
            addOperatedOnBehalfOfOrgId(builder, operatedOnBehalfOfOrgIdOffset)
            addLesseeOrgId(builder, lesseeOrgIdOffset)
            addOwnerOrgId(builder, ownerOrgIdOffset)
            addOperatorOrgId(builder, operatorOrgIdOffset)
            addEventTimeNotes(builder, eventTimeNotesOffset)
            addEventTime(builder, eventTimeOffset)
            addOrigObjectId(builder, origObjectIdOffset)
            addSatNo(builder, satNo)
            addIdOnOrbit(builder, idOnOrbitOffset)
            addDeclassificationString(builder, declassificationStringOffset)
            addDeclassificationDate(builder, declassificationDateOffset)
            addDerivedFrom(builder, derivedFromOffset)
            addClassificationMarking(builder, classificationMarkingOffset)
            addId(builder, idOffset)
            addDataMode(builder, dataMode)
            addInclined(builder, inclined)
            return endOnorbitEvent_Ingest(builder)
        }
        fun startOnorbitEvent_Ingest(builder: FlatBufferBuilder) = builder.startTable(54)
        fun addId(builder: FlatBufferBuilder, id: Int) = builder.addOffset(0, id, 0)
        fun addClassificationMarking(builder: FlatBufferBuilder, classificationMarking: Int) = builder.addOffset(1, classificationMarking, 0)
        fun addDerivedFrom(builder: FlatBufferBuilder, derivedFrom: Int) = builder.addOffset(2, derivedFrom, 0)
        fun addDeclassificationDate(builder: FlatBufferBuilder, declassificationDate: Int) = builder.addOffset(3, declassificationDate, 0)
        fun addDeclassificationString(builder: FlatBufferBuilder, declassificationString: Int) = builder.addOffset(4, declassificationString, 0)
        fun addIdOnOrbit(builder: FlatBufferBuilder, idOnOrbit: Int) = builder.addOffset(5, idOnOrbit, 0)
        fun addSatNo(builder: FlatBufferBuilder, satNo: Int) = builder.addInt(6, satNo, 0)
        fun addOrigObjectId(builder: FlatBufferBuilder, origObjectId: Int) = builder.addOffset(7, origObjectId, 0)
        fun addEventTime(builder: FlatBufferBuilder, eventTime: Int) = builder.addOffset(8, eventTime, 0)
        fun addEventTimeNotes(builder: FlatBufferBuilder, eventTimeNotes: Int) = builder.addOffset(9, eventTimeNotes, 0)
        fun addOperatorOrgId(builder: FlatBufferBuilder, operatorOrgId: Int) = builder.addOffset(10, operatorOrgId, 0)
        fun addOwnerOrgId(builder: FlatBufferBuilder, ownerOrgId: Int) = builder.addOffset(11, ownerOrgId, 0)
        fun addLesseeOrgId(builder: FlatBufferBuilder, lesseeOrgId: Int) = builder.addOffset(12, lesseeOrgId, 0)
        fun addOperatedOnBehalfOfOrgId(builder: FlatBufferBuilder, operatedOnBehalfOfOrgId: Int) = builder.addOffset(13, operatedOnBehalfOfOrgId, 0)
        fun addGeoPosition(builder: FlatBufferBuilder, geoPosition: Double) = builder.addDouble(14, geoPosition, 0.0)
        fun addPlaneSlot(builder: FlatBufferBuilder, planeSlot: Int) = builder.addOffset(15, planeSlot, 0)
        fun addPlaneNumber(builder: FlatBufferBuilder, planeNumber: Int) = builder.addOffset(16, planeNumber, 0)
        fun addPositionStatus(builder: FlatBufferBuilder, positionStatus: Int) = builder.addOffset(17, positionStatus, 0)
        fun addUntilTime(builder: FlatBufferBuilder, untilTime: Int) = builder.addOffset(18, untilTime, 0)
        fun addOfficialLossDate(builder: FlatBufferBuilder, officialLossDate: Int) = builder.addOffset(19, officialLossDate, 0)
        fun addNetAmount(builder: FlatBufferBuilder, netAmount: Double) = builder.addDouble(20, netAmount, 0.0)
        fun addUnderlyingCause(builder: FlatBufferBuilder, underlyingCause: Int) = builder.addOffset(21, underlyingCause, 0)
        fun addCapabilityLoss(builder: FlatBufferBuilder, capabilityLoss: Double) = builder.addDouble(22, capabilityLoss, 0.0)
        fun addCapacityLoss(builder: FlatBufferBuilder, capacityLoss: Double) = builder.addDouble(23, capacityLoss, 0.0)
        fun addInsuranceLoss(builder: FlatBufferBuilder, insuranceLoss: Double) = builder.addDouble(24, insuranceLoss, 0.0)
        fun addThirdPartyInsuranceLoss(builder: FlatBufferBuilder, thirdPartyInsuranceLoss: Double) = builder.addDouble(25, thirdPartyInsuranceLoss, 0.0)
        fun addInjured(builder: FlatBufferBuilder, injured: Int) = builder.addInt(26, injured, 0)
        fun addKilled(builder: FlatBufferBuilder, killed: Int) = builder.addInt(27, killed, 0)
        fun addLifeLost(builder: FlatBufferBuilder, lifeLost: Double) = builder.addDouble(28, lifeLost, 0.0)
        fun addAgeAtEvent(builder: FlatBufferBuilder, ageAtEvent: Double) = builder.addDouble(29, ageAtEvent, 0.0)
        fun addAchievedFlightPhase(builder: FlatBufferBuilder, achievedFlightPhase: Int) = builder.addOffset(30, achievedFlightPhase, 0)
        fun addOccurrenceFlightPhase(builder: FlatBufferBuilder, occurrenceFlightPhase: Int) = builder.addOffset(31, occurrenceFlightPhase, 0)
        fun addStageAtFault(builder: FlatBufferBuilder, stageAtFault: Int) = builder.addOffset(32, stageAtFault, 0)
        fun addEquipmentAtFault(builder: FlatBufferBuilder, equipmentAtFault: Int) = builder.addOffset(33, equipmentAtFault, 0)
        fun addEquipmentTypeAtFault(builder: FlatBufferBuilder, equipmentTypeAtFault: Int) = builder.addOffset(34, equipmentTypeAtFault, 0)
        fun addEquipmentPartAtFault(builder: FlatBufferBuilder, equipmentPartAtFault: Int) = builder.addOffset(35, equipmentPartAtFault, 0)
        fun addConsequentialEquipmentFailure(builder: FlatBufferBuilder, consequentialEquipmentFailure: Int) = builder.addOffset(36, consequentialEquipmentFailure, 0)
        fun addInclined(builder: FlatBufferBuilder, inclined: Boolean) = builder.addBoolean(37, inclined, false)
        fun addDescription(builder: FlatBufferBuilder, description: Int) = builder.addOffset(38, description, 0)
        fun addRemarks(builder: FlatBufferBuilder, remarks: Int) = builder.addOffset(39, remarks, 0)
        fun addInsuranceLossNotes(builder: FlatBufferBuilder, insuranceLossNotes: Int) = builder.addOffset(40, insuranceLossNotes, 0)
        fun addCapabilityLossNotes(builder: FlatBufferBuilder, capabilityLossNotes: Int) = builder.addOffset(41, capabilityLossNotes, 0)
        fun addInsuranceCarriedNotes(builder: FlatBufferBuilder, insuranceCarriedNotes: Int) = builder.addOffset(42, insuranceCarriedNotes, 0)
        fun addEquipmentCausingLossNotes(builder: FlatBufferBuilder, equipmentCausingLossNotes: Int) = builder.addOffset(43, equipmentCausingLossNotes, 0)
        fun addEventType(builder: FlatBufferBuilder, eventType: Int) = builder.addOffset(44, eventType, 0)
        fun addEventResult(builder: FlatBufferBuilder, eventResult: Int) = builder.addOffset(45, eventResult, 0)
        fun addObjectStatus(builder: FlatBufferBuilder, objectStatus: Int) = builder.addOffset(46, objectStatus, 0)
        fun addSatellitePosition(builder: FlatBufferBuilder, satellitePosition: Int) = builder.addOffset(47, satellitePosition, 0)
        fun addSource(builder: FlatBufferBuilder, source: Int) = builder.addOffset(48, source, 0)
        fun addOrigin(builder: FlatBufferBuilder, origin: Int) = builder.addOffset(49, origin, 0)
        fun addDataMode(builder: FlatBufferBuilder, dataMode: Byte) = builder.addByte(50, dataMode, 0)
        fun addCreatedAt(builder: FlatBufferBuilder, createdAt: Int) = builder.addOffset(51, createdAt, 0)
        fun addCreatedBy(builder: FlatBufferBuilder, createdBy: Int) = builder.addOffset(52, createdBy, 0)
        fun addOrigNetwork(builder: FlatBufferBuilder, origNetwork: Int) = builder.addOffset(53, origNetwork, 0)
        fun endOnorbitEvent_Ingest(builder: FlatBufferBuilder) : Int {
            val o = builder.endTable()
            return o
        }
        fun finishOnorbitEventIngestBuffer(builder: FlatBufferBuilder, offset: Int) = builder.finish(offset, "ONOR")
        fun finishSizePrefixedOnorbitEvent_IngestBuffer(builder: FlatBufferBuilder, offset: Int) = builder.finishSizePrefixed(offset, "ONOR")
    }
}
