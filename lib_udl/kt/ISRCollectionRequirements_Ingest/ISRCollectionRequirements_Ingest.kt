// automatically generated by the FlatBuffers compiler, do not modify

import com.google.flatbuffers.BaseVector
import com.google.flatbuffers.BooleanVector
import com.google.flatbuffers.ByteVector
import com.google.flatbuffers.Constants
import com.google.flatbuffers.DoubleVector
import com.google.flatbuffers.FlatBufferBuilder
import com.google.flatbuffers.FloatVector
import com.google.flatbuffers.LongVector
import com.google.flatbuffers.StringVector
import com.google.flatbuffers.Struct
import com.google.flatbuffers.Table
import com.google.flatbuffers.UnionVector
import java.nio.ByteBuffer
import java.nio.ByteOrder
import kotlin.math.sign

/**
 * /// Tasking desired collection requirements.
 */
@Suppress("unused")
class ISRCollectionRequirements_Ingest : Table() {

    fun __init(_i: Int, _bb: ByteBuffer)  {
        __reset(_i, _bb)
    }
    fun __assign(_i: Int, _bb: ByteBuffer) : ISRCollectionRequirements_Ingest {
        __init(_i, _bb)
        return this
    }
    /**
     * Collection Requirement Unique Identifier.
     * Example: /// Example: ISCRCOLLECTIONREQUIREMENTS
     * Constraints: Minimum length = 0, Maximum length = 36
     */
    val id : String?
        get() {
            val o = __offset(4)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val idAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(4, 1)
    fun idInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 4, 1)
    /**
     * Encryption hashing algorithm.
     * Example: /// Example: HASH
     * Constraints: Minimum length = 0, Maximum length = 128
     */
    val hash : String?
        get() {
            val o = __offset(6)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val hashAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(6, 1)
    fun hashInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 6, 1)
    /**
     * Type collection this requirement applies to.
     * Example: /// Example: COLLECTION_TYPE
     * Constraints: Minimum length = 0, Maximum length = 128
     */
    val type : String?
        get() {
            val o = __offset(8)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val typeAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(8, 1)
    fun typeInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 8, 1)
    /**
     * Collection Requirement Unique Identifier.
     * Example: /// Example: CRID
     * Constraints: Minimum length = 0, Maximum length = 256
     */
    val cridNumbers : String?
        get() {
            val o = __offset(10)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val cridNumbersAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(10, 1)
    fun cridNumbersInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 10, 1)
    /**
     * 1-n priority for this collection requirement.
     * Example: /// Example: 20.23
     * Constraints: No constraints specified.
     */
    val priority : Double
        get() {
            val o = __offset(12)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Record id.
     * Example: /// Example: RECORD-ID
     * Constraints: Minimum length = 0, Maximum length = 36
     */
    val recordId : String?
        get() {
            val o = __offset(14)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val recordIdAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(14, 1)
    fun recordIdInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 14, 1)
    /**
     * Reconnaissance Survey information the operator needs.
     * Example: /// Example: SURVEY_INFO
     * Constraints: Minimum length = 0, Maximum length = 32
     */
    val reconSurvey : String?
        get() {
            val o = __offset(16)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val reconSurveyAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(16, 1)
    fun reconSurveyInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 16, 1)
    /**
     * Primary type of intelligence to be collected for this requirement.
     * Example: /// Example: Sig
     * Constraints: Minimum length = 0, Maximum length = 32
     */
    val intelDiscipline : String?
        get() {
            val o = __offset(18)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val intelDisciplineAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(18, 1)
    fun intelDisciplineInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 18, 1)
    /**
     * Sub category of primary intelligence to be collected for this requirement.
     * Example: /// Example: False
     * Constraints: No constraints specified.
     */
    val secondary : Boolean
        get() {
            val o = __offset(20)
            return if(o != 0) 0.toByte() != bb.get(o + bb_pos) else false
        }
    /**
     * Is this collection requirement an emphasized/critical requirement.
     * Example: /// Example: False
     * Constraints: No constraints specified.
     */
    val emphasized : Boolean
        get() {
            val o = __offset(22)
            return if(o != 0) 0.toByte() != bb.get(o + bb_pos) else false
        }
    /**
     * Is this collection request for the Prism system?.
     * Example: /// Example: True
     * Constraints: No constraints specified.
     */
    val isPrismCr : Boolean
        get() {
            val o = __offset(24)
            return if(o != 0) 0.toByte() != bb.get(o + bb_pos) else false
        }
    /**
     * Start time for this requirement, should be within the mission time window.
     * Example: /// Example: 2021-01-19T01:01:15.001Z
     * Constraints: No constraints specified.
     */
    val start : String?
        get() {
            val o = __offset(26)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val startAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(26, 1)
    fun startInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 26, 1)
    /**
     * Stop time for this requirement, should be within the mission time window.
     * Example: /// Example: 2021-01-19T01:20:01.001Z
     * Constraints: No constraints specified.
     */
    val stop : String?
        get() {
            val o = __offset(28)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val stopAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(28, 1)
    fun stopInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 28, 1)
    /**
     * Human readable name for this operation.
     * Example: /// Example: NAME
     * Constraints: Minimum length = 0, Maximum length = 32
     */
    val operation : String?
        get() {
            val o = __offset(30)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val operationAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(30, 1)
    fun operationInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 30, 1)
    /**
     * The name of the military unit that this assigned collection requirement will support.
     * Example: /// Example: UNIT
     * Constraints: Minimum length = 0, Maximum length = 32
     */
    val supportedUnit : String?
        get() {
            val o = __offset(32)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val supportedUnitAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(32, 1)
    fun supportedUnitInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 32, 1)
    /**
     * Country code of the collection requirement. A Country may represent countries, multi-national consortiums, and international organizations.
     * Example: /// Example: COUNTRY_CODE
     * Constraints: Minimum length = 0, Maximum length = 4
     */
    val country : String?
        get() {
            val o = __offset(34)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val countryAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(34, 1)
    fun countryInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 34, 1)
    /**
     * Region of the collection requirement.
     * Example: /// Example: REGION
     * Constraints: Minimum length = 0, Maximum length = 32
     */
    val region : String?
        get() {
            val o = __offset(36)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val regionAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(36, 1)
    fun regionInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 36, 1)
    /**
     * Subregion of the collection requirement.
     * Example: /// Example: SUBREGION
     * Constraints: Minimum length = 0, Maximum length = 32
     */
    val subregion : String?
        get() {
            val o = __offset(38)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val subregionAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(38, 1)
    fun subregionInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 38, 1)
    /**
     * Free text field for the user to specify special instructions needed for this collection.
     * Example: /// Example: TEXT
     * Constraints: Minimum length = 0, Maximum length = 256
     */
    val specialComGuidance : String?
        get() {
            val o = __offset(40)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val specialComGuidanceAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(40, 1)
    fun specialComGuidanceInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 40, 1)
    /**
     * No description provided.
     * Example: /// Example: No example provided.
     * Constraints: No constraints specified.
     */
    val criticalTimes : String?
        get() {
            val o = __offset(42)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val criticalTimesAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(42, 1)
    fun criticalTimesInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 42, 1)
    /**
     * No description provided.
     * Example: /// Example: No example provided.
     * Constraints: No constraints specified.
     */
    val exploitationRequirement : String?
        get() {
            val o = __offset(44)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val exploitationRequirementAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(44, 1)
    fun exploitationRequirementInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 44, 1)
    /**
     * Array of POI Id's for the targets being tasked.
     * Example: /// Example: No example provided.
     * Constraints: No constraints specified.
     */
    fun targetList(j: Int) : String? {
        val o = __offset(46)
        return if (o != 0) {
            __string(__vector(o) + j * 4)
        } else {
            null
        }
    }
    val targetListLength : Int
        get() {
            val o = __offset(46); return if (o != 0) __vector_len(o) else 0
        }
    companion object {
        fun validateVersion() = Constants.FLATBUFFERS_24_3_25()
        fun getRootAsISRCollectionRequirements_Ingest(_bb: ByteBuffer): ISRCollectionRequirements_Ingest = getRootAsISRCollectionRequirements_Ingest(_bb, ISRCollectionRequirements_Ingest())
        fun getRootAsISRCollectionRequirements_Ingest(_bb: ByteBuffer, obj: ISRCollectionRequirements_Ingest): ISRCollectionRequirements_Ingest {
            _bb.order(ByteOrder.LITTLE_ENDIAN)
            return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb))
        }
        fun ISRCollectionRequirements_IngestBufferHasIdentifier(_bb: ByteBuffer) : Boolean = __has_identifier(_bb, "ISRC")
        fun createISRCollectionRequirements_Ingest(builder: FlatBufferBuilder, idOffset: Int, hashOffset: Int, typeOffset: Int, cridNumbersOffset: Int, priority: Double, recordIdOffset: Int, reconSurveyOffset: Int, intelDisciplineOffset: Int, secondary: Boolean, emphasized: Boolean, isPrismCr: Boolean, startOffset: Int, stopOffset: Int, operationOffset: Int, supportedUnitOffset: Int, countryOffset: Int, regionOffset: Int, subregionOffset: Int, specialComGuidanceOffset: Int, criticalTimesOffset: Int, exploitationRequirementOffset: Int, targetListOffset: Int) : Int {
            builder.startTable(22)
            addPriority(builder, priority)
            addTargetList(builder, targetListOffset)
            addExploitationRequirement(builder, exploitationRequirementOffset)
            addCriticalTimes(builder, criticalTimesOffset)
            addSpecialComGuidance(builder, specialComGuidanceOffset)
            addSubregion(builder, subregionOffset)
            addRegion(builder, regionOffset)
            addCountry(builder, countryOffset)
            addSupportedUnit(builder, supportedUnitOffset)
            addOperation(builder, operationOffset)
            addStop(builder, stopOffset)
            addStart(builder, startOffset)
            addIntelDiscipline(builder, intelDisciplineOffset)
            addReconSurvey(builder, reconSurveyOffset)
            addRecordId(builder, recordIdOffset)
            addCridNumbers(builder, cridNumbersOffset)
            addType(builder, typeOffset)
            addHash(builder, hashOffset)
            addId(builder, idOffset)
            addIsPrismCr(builder, isPrismCr)
            addEmphasized(builder, emphasized)
            addSecondary(builder, secondary)
            return endISRCollectionRequirements_Ingest(builder)
        }
        fun startISRCollectionRequirements_Ingest(builder: FlatBufferBuilder) = builder.startTable(22)
        fun addId(builder: FlatBufferBuilder, id: Int) = builder.addOffset(0, id, 0)
        fun addHash(builder: FlatBufferBuilder, hash: Int) = builder.addOffset(1, hash, 0)
        fun addType(builder: FlatBufferBuilder, type: Int) = builder.addOffset(2, type, 0)
        fun addCridNumbers(builder: FlatBufferBuilder, cridNumbers: Int) = builder.addOffset(3, cridNumbers, 0)
        fun addPriority(builder: FlatBufferBuilder, priority: Double) = builder.addDouble(4, priority, 0.0)
        fun addRecordId(builder: FlatBufferBuilder, recordId: Int) = builder.addOffset(5, recordId, 0)
        fun addReconSurvey(builder: FlatBufferBuilder, reconSurvey: Int) = builder.addOffset(6, reconSurvey, 0)
        fun addIntelDiscipline(builder: FlatBufferBuilder, intelDiscipline: Int) = builder.addOffset(7, intelDiscipline, 0)
        fun addSecondary(builder: FlatBufferBuilder, secondary: Boolean) = builder.addBoolean(8, secondary, false)
        fun addEmphasized(builder: FlatBufferBuilder, emphasized: Boolean) = builder.addBoolean(9, emphasized, false)
        fun addIsPrismCr(builder: FlatBufferBuilder, isPrismCr: Boolean) = builder.addBoolean(10, isPrismCr, false)
        fun addStart(builder: FlatBufferBuilder, start: Int) = builder.addOffset(11, start, 0)
        fun addStop(builder: FlatBufferBuilder, stop: Int) = builder.addOffset(12, stop, 0)
        fun addOperation(builder: FlatBufferBuilder, operation: Int) = builder.addOffset(13, operation, 0)
        fun addSupportedUnit(builder: FlatBufferBuilder, supportedUnit: Int) = builder.addOffset(14, supportedUnit, 0)
        fun addCountry(builder: FlatBufferBuilder, country: Int) = builder.addOffset(15, country, 0)
        fun addRegion(builder: FlatBufferBuilder, region: Int) = builder.addOffset(16, region, 0)
        fun addSubregion(builder: FlatBufferBuilder, subregion: Int) = builder.addOffset(17, subregion, 0)
        fun addSpecialComGuidance(builder: FlatBufferBuilder, specialComGuidance: Int) = builder.addOffset(18, specialComGuidance, 0)
        fun addCriticalTimes(builder: FlatBufferBuilder, criticalTimes: Int) = builder.addOffset(19, criticalTimes, 0)
        fun addExploitationRequirement(builder: FlatBufferBuilder, exploitationRequirement: Int) = builder.addOffset(20, exploitationRequirement, 0)
        fun addTargetList(builder: FlatBufferBuilder, targetList: Int) = builder.addOffset(21, targetList, 0)
        fun createTargetListVector(builder: FlatBufferBuilder, data: IntArray) : Int {
            builder.startVector(4, data.size, 4)
            for (i in data.size - 1 downTo 0) {
                builder.addOffset(data[i])
            }
            return builder.endVector()
        }
        fun startTargetListVector(builder: FlatBufferBuilder, numElems: Int) = builder.startVector(4, numElems, 4)
        fun endISRCollectionRequirements_Ingest(builder: FlatBufferBuilder) : Int {
            val o = builder.endTable()
            return o
        }
        fun finishISRCollectionRequirementsIngestBuffer(builder: FlatBufferBuilder, offset: Int) = builder.finish(offset, "ISRC")
        fun finishSizePrefixedISRCollectionRequirements_IngestBuffer(builder: FlatBufferBuilder, offset: Int) = builder.finishSizePrefixed(offset, "ISRC")
    }
}
