// automatically generated by the FlatBuffers compiler, do not modify

import com.google.flatbuffers.BaseVector
import com.google.flatbuffers.BooleanVector
import com.google.flatbuffers.ByteVector
import com.google.flatbuffers.Constants
import com.google.flatbuffers.DoubleVector
import com.google.flatbuffers.FlatBufferBuilder
import com.google.flatbuffers.FloatVector
import com.google.flatbuffers.LongVector
import com.google.flatbuffers.StringVector
import com.google.flatbuffers.Struct
import com.google.flatbuffers.Table
import com.google.flatbuffers.UnionVector
import java.nio.ByteBuffer
import java.nio.ByteOrder
import kotlin.math.sign

/**
 * /// Collection that specifies the tasked country, tasked service, unit and mission level tasking for this ATO.
 */
@Suppress("unused")
class AircraftMissionTasking_Ingest : Table() {

    fun __init(_i: Int, _bb: ByteBuffer)  {
        __reset(_i, _bb)
    }
    fun __assign(_i: Int, _bb: ByteBuffer) : AircraftMissionTasking_Ingest {
        __init(_i, _bb)
        return this
    }
    /**
     * The country code responsible for conducting this aircraft mission tasking for the exercise or operation.
     * Example: /// Example: US
     * Constraints: Minimum length = 1, Maximum length = 4
     */
    val countryCode : String?
        get() {
            val o = __offset(4)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val countryCodeAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(4, 1)
    fun countryCodeInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 4, 1)
    /**
     * The service tasked with conducting this aircraft mission tasking for the exercise or operation.
     * Example: /// Example: A
     * Constraints: Minimum length = 1, Maximum length = 1
     */
    val taskedService : String?
        get() {
            val o = __offset(6)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val taskedServiceAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(6, 1)
    fun taskedServiceInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 6, 1)
    /**
     * The designator of the unit that is tasked to perform this aircraft mission tasking.
     * Example: /// Example: AMPHIB5DIV
     * Constraints: Minimum length = 1, Maximum length = 36
     */
    val unitDesignator : String?
        get() {
            val o = __offset(8)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val unitDesignatorAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(8, 1)
    fun unitDesignatorInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 8, 1)
    /**
     * The tasked units location expressed as an ICAO or a place name.
     * Example: /// Example: ICAO:KXXQ
     * Constraints: Minimum length = 0, Maximum length = 36
     */
    val unitLocName : String?
        get() {
            val o = __offset(10)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val unitLocNameAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(10, 1)
    fun unitLocNameInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 10, 1)
    /**
     * An indicator of whether a mission is or will be a residual mission.
     * Example: /// Example: N
     * Constraints: Minimum length = 0, Maximum length = 1
     */
    val resMsnInd : String?
        get() {
            val o = __offset(12)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val resMsnIndAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(12, 1)
    fun resMsnIndInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 12, 1)
    /**
     * The AMC number assigned to identify one aircraft from another.
     * Example: /// Example: AMC:JJXD123HA045
     * Constraints: Minimum length = 0, Maximum length = 16
     */
    val amcMsnNum : String?
        get() {
            val o = __offset(14)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val amcMsnNumAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(14, 1)
    fun amcMsnNumInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 14, 1)
    /**
     * The identifier for the composite set of missions for this operation/exercise.
     * Example: /// Example: ZZ
     * Constraints: Minimum length = 0, Maximum length = 8
     */
    val pkgId : String?
        get() {
            val o = __offset(16)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val pkgIdAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(16, 1)
    fun pkgIdInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 16, 1)
    /**
     * The commander responsible for the planning and execution of the forces necessary to achieve desired objectives.
     * Example: /// Example: MC
     * Constraints: Minimum length = 0, Maximum length = 8
     */
    val msnCommander : String?
        get() {
            val o = __offset(18)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val msnCommanderAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(18, 1)
    fun msnCommanderInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 18, 1)
    /**
     * The mission number assigned to this mission.
     * Example: /// Example: D123HA
     * Constraints: Minimum length = 0, Maximum length = 8
     */
    val msnNum : String?
        get() {
            val o = __offset(20)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val msnNumAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(20, 1)
    fun msnNumInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 20, 1)
    /**
     * The code for the preferred type or designator for a tasked air mission.
     * Example: /// Example: CAS
     * Constraints: Minimum length = 0, Maximum length = 8
     */
    val priMsnType : String?
        get() {
            val o = __offset(22)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val priMsnTypeAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(22, 1)
    fun priMsnTypeInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 22, 1)
    /**
     * The code for the alternative type of a tasked air mission.
     * Example: /// Example: SEAD
     * Constraints: Minimum length = 0, Maximum length = 8
     */
    val secMsnType : String?
        get() {
            val o = __offset(24)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val secMsnTypeAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(24, 1)
    fun secMsnTypeInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 24, 1)
    /**
     * The readiness status expressed in time (minutes) for an aircraft to be airborne after the launch order is received or the time required for a missile unit to assume battle stations.
     * Example: /// Example: 30
     * Constraints: No constraints specified.
     */
    val alertStatus : Int
        get() {
            val o = __offset(26)
            return if(o != 0) bb.getInt(o + bb_pos) else 0
        }
    /**
     * The location or name specified for the departure of the tasked air mission.
     * Example: /// Example: ICAO:KBIF
     * Constraints: Minimum length = 0, Maximum length = 36
     */
    val depLocName : String?
        get() {
            val o = __offset(28)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val depLocNameAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(28, 1)
    fun depLocNameInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 28, 1)
    /**
     * The departure location specified in UTM (100 meter) coordinates for the tasked air mission.
     * Example: /// Example: 32WDL123123
     * Constraints: Minimum length = 0, Maximum length = 36
     */
    val depLocUtm : String?
        get() {
            val o = __offset(30)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val depLocUtmAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(30, 1)
    fun depLocUtmInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 30, 1)
    /**
     * WGS-84 latitude of the departure location, in degrees. -90 to 90 degrees (negative values south of equator) for this tasked air mission.
     * Example: /// Example: 35.123
     * Constraints: No constraints specified.
     */
    val depLocLat : Double
        get() {
            val o = __offset(32)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * WGS-84 longitude of the departure location, in degrees. -180 to 180 degrees (negative values west of Prime Meridian) for this tasked air mission.
     * Example: /// Example: 79.2354
     * Constraints: No constraints specified.
     */
    val depLocLon : Double
        get() {
            val o = __offset(34)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * The time of departure for the tasked air mission in ISO8601 UTC format with millisecond precision.
     * Example: /// Example: 2021-10-25T12:00:00.123Z
     * Constraints: No constraints specified.
     */
    val depTime : String?
        get() {
            val o = __offset(36)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val depTimeAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(36, 1)
    fun depTimeInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 36, 1)
    /**
     * An array of locations specified for the recovery of the tasked air mission represented by varying formats.
     * Example: /// Example: ['ARRLOC:KBIF', 'ARRLOC:KDZ7']
     * Constraints: No constraints specified.
     */
    fun rcvyLocName(j: Int) : String? {
        val o = __offset(38)
        return if (o != 0) {
            __string(__vector(o) + j * 4)
        } else {
            null
        }
    }
    val rcvyLocNameLength : Int
        get() {
            val o = __offset(38); return if (o != 0) __vector_len(o) else 0
        }
    /**
     * An array of recovery locations specified in UTM (100 meter) coordinates for the tasked air mission.
     * Example: /// Example: ['ARRUTMO:32WDL123123', 'ARRUTMO:32WDL321321']
     * Constraints: No constraints specified.
     */
    fun rcvyLocUtm(j: Int) : String? {
        val o = __offset(40)
        return if (o != 0) {
            __string(__vector(o) + j * 4)
        } else {
            null
        }
    }
    val rcvyLocUtmLength : Int
        get() {
            val o = __offset(40); return if (o != 0) __vector_len(o) else 0
        }
    /**
     * An array of WGS-84 latitude of the recovery locations, in degrees. -90 to 90 degrees (negative values south of equator) for this tasked air mission.
     * Example: /// Example: [48.8584, 40.7554]
     * Constraints: No constraints specified.
     */
    fun rcvyLocLat(j: Int) : String? {
        val o = __offset(42)
        return if (o != 0) {
            __string(__vector(o) + j * 4)
        } else {
            null
        }
    }
    val rcvyLocLatLength : Int
        get() {
            val o = __offset(42); return if (o != 0) __vector_len(o) else 0
        }
    /**
     * An array of WGS-84 longitude of the recovery locations, in degrees. -180 to 180 degrees (negative values west of Prime Meridian) for this tasked air mission.
     * Example: /// Example: [2.2945, -73.9866]
     * Constraints: No constraints specified.
     */
    fun rcvyLocLon(j: Int) : String? {
        val o = __offset(44)
        return if (o != 0) {
            __string(__vector(o) + j * 4)
        } else {
            null
        }
    }
    val rcvyLocLonLength : Int
        get() {
            val o = __offset(44); return if (o != 0) __vector_len(o) else 0
        }
    /**
     * An array of recovery times for the tasked air mission in ISO8601 UTC format with millisecond precision.
     * Example: /// Example: ['2021-10-25T16:00:00.234Z', '2021-10-26T16:00:00.234Z']
     * Constraints: No constraints specified.
     */
    fun rcvyTime(j: Int) : String? {
        val o = __offset(46)
        return if (o != 0) {
            __string(__vector(o) + j * 4)
        } else {
            null
        }
    }
    val rcvyTimeLength : Int
        get() {
            val o = __offset(46); return if (o != 0) __vector_len(o) else 0
        }
    /**
     * A collection of the individual aircraft assigned to this aircraft mission tasking.
     * Example: /// Example: No example provided.
     * Constraints: No constraints specified.
     */
    fun indActasking(j: Int) : String? {
        val o = __offset(48)
        return if (o != 0) {
            __string(__vector(o) + j * 4)
        } else {
            null
        }
    }
    val indActaskingLength : Int
        get() {
            val o = __offset(48); return if (o != 0) __vector_len(o) else 0
        }
    /**
     * A collection of aircraft mission location information for this aircraft mission tasking.
     * Example: /// Example: No example provided.
     * Constraints: No constraints specified.
     */
    fun acMsnLocSeg(j: Int) : String? {
        val o = __offset(50)
        return if (o != 0) {
            __string(__vector(o) + j * 4)
        } else {
            null
        }
    }
    val acMsnLocSegLength : Int
        get() {
            val o = __offset(50); return if (o != 0) __vector_len(o) else 0
        }
    companion object {
        fun validateVersion() = Constants.FLATBUFFERS_24_3_25()
        fun getRootAsAircraftMissionTasking_Ingest(_bb: ByteBuffer): AircraftMissionTasking_Ingest = getRootAsAircraftMissionTasking_Ingest(_bb, AircraftMissionTasking_Ingest())
        fun getRootAsAircraftMissionTasking_Ingest(_bb: ByteBuffer, obj: AircraftMissionTasking_Ingest): AircraftMissionTasking_Ingest {
            _bb.order(ByteOrder.LITTLE_ENDIAN)
            return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb))
        }
        fun AircraftMissionTasking_IngestBufferHasIdentifier(_bb: ByteBuffer) : Boolean = __has_identifier(_bb, "AIRC")
        fun createAircraftMissionTasking_Ingest(builder: FlatBufferBuilder, countryCodeOffset: Int, taskedServiceOffset: Int, unitDesignatorOffset: Int, unitLocNameOffset: Int, resMsnIndOffset: Int, amcMsnNumOffset: Int, pkgIdOffset: Int, msnCommanderOffset: Int, msnNumOffset: Int, priMsnTypeOffset: Int, secMsnTypeOffset: Int, alertStatus: Int, depLocNameOffset: Int, depLocUtmOffset: Int, depLocLat: Double, depLocLon: Double, depTimeOffset: Int, rcvyLocNameOffset: Int, rcvyLocUtmOffset: Int, rcvyLocLatOffset: Int, rcvyLocLonOffset: Int, rcvyTimeOffset: Int, indActaskingOffset: Int, acMsnLocSegOffset: Int) : Int {
            builder.startTable(24)
            addDepLocLon(builder, depLocLon)
            addDepLocLat(builder, depLocLat)
            addAcMsnLocSeg(builder, acMsnLocSegOffset)
            addIndACTasking(builder, indActaskingOffset)
            addRcvyTime(builder, rcvyTimeOffset)
            addRcvyLocLon(builder, rcvyLocLonOffset)
            addRcvyLocLat(builder, rcvyLocLatOffset)
            addRcvyLocUTM(builder, rcvyLocUtmOffset)
            addRcvyLocName(builder, rcvyLocNameOffset)
            addDepTime(builder, depTimeOffset)
            addDepLocUTM(builder, depLocUtmOffset)
            addDepLocName(builder, depLocNameOffset)
            addAlertStatus(builder, alertStatus)
            addSecMsnType(builder, secMsnTypeOffset)
            addPriMsnType(builder, priMsnTypeOffset)
            addMsnNum(builder, msnNumOffset)
            addMsnCommander(builder, msnCommanderOffset)
            addPkgId(builder, pkgIdOffset)
            addAmcMsnNum(builder, amcMsnNumOffset)
            addResMsnInd(builder, resMsnIndOffset)
            addUnitLocName(builder, unitLocNameOffset)
            addUnitDesignator(builder, unitDesignatorOffset)
            addTaskedService(builder, taskedServiceOffset)
            addCountryCode(builder, countryCodeOffset)
            return endAircraftMissionTasking_Ingest(builder)
        }
        fun startAircraftMissionTasking_Ingest(builder: FlatBufferBuilder) = builder.startTable(24)
        fun addCountryCode(builder: FlatBufferBuilder, countryCode: Int) = builder.addOffset(0, countryCode, 0)
        fun addTaskedService(builder: FlatBufferBuilder, taskedService: Int) = builder.addOffset(1, taskedService, 0)
        fun addUnitDesignator(builder: FlatBufferBuilder, unitDesignator: Int) = builder.addOffset(2, unitDesignator, 0)
        fun addUnitLocName(builder: FlatBufferBuilder, unitLocName: Int) = builder.addOffset(3, unitLocName, 0)
        fun addResMsnInd(builder: FlatBufferBuilder, resMsnInd: Int) = builder.addOffset(4, resMsnInd, 0)
        fun addAmcMsnNum(builder: FlatBufferBuilder, amcMsnNum: Int) = builder.addOffset(5, amcMsnNum, 0)
        fun addPkgId(builder: FlatBufferBuilder, pkgId: Int) = builder.addOffset(6, pkgId, 0)
        fun addMsnCommander(builder: FlatBufferBuilder, msnCommander: Int) = builder.addOffset(7, msnCommander, 0)
        fun addMsnNum(builder: FlatBufferBuilder, msnNum: Int) = builder.addOffset(8, msnNum, 0)
        fun addPriMsnType(builder: FlatBufferBuilder, priMsnType: Int) = builder.addOffset(9, priMsnType, 0)
        fun addSecMsnType(builder: FlatBufferBuilder, secMsnType: Int) = builder.addOffset(10, secMsnType, 0)
        fun addAlertStatus(builder: FlatBufferBuilder, alertStatus: Int) = builder.addInt(11, alertStatus, 0)
        fun addDepLocName(builder: FlatBufferBuilder, depLocName: Int) = builder.addOffset(12, depLocName, 0)
        fun addDepLocUTM(builder: FlatBufferBuilder, depLocUtm: Int) = builder.addOffset(13, depLocUtm, 0)
        fun addDepLocLat(builder: FlatBufferBuilder, depLocLat: Double) = builder.addDouble(14, depLocLat, 0.0)
        fun addDepLocLon(builder: FlatBufferBuilder, depLocLon: Double) = builder.addDouble(15, depLocLon, 0.0)
        fun addDepTime(builder: FlatBufferBuilder, depTime: Int) = builder.addOffset(16, depTime, 0)
        fun addRcvyLocName(builder: FlatBufferBuilder, rcvyLocName: Int) = builder.addOffset(17, rcvyLocName, 0)
        fun createRcvyLocNameVector(builder: FlatBufferBuilder, data: IntArray) : Int {
            builder.startVector(4, data.size, 4)
            for (i in data.size - 1 downTo 0) {
                builder.addOffset(data[i])
            }
            return builder.endVector()
        }
        fun startRcvyLocNameVector(builder: FlatBufferBuilder, numElems: Int) = builder.startVector(4, numElems, 4)
        fun addRcvyLocUTM(builder: FlatBufferBuilder, rcvyLocUtm: Int) = builder.addOffset(18, rcvyLocUtm, 0)
        fun createRcvyLocUtmVector(builder: FlatBufferBuilder, data: IntArray) : Int {
            builder.startVector(4, data.size, 4)
            for (i in data.size - 1 downTo 0) {
                builder.addOffset(data[i])
            }
            return builder.endVector()
        }
        fun startRcvyLocUtmVector(builder: FlatBufferBuilder, numElems: Int) = builder.startVector(4, numElems, 4)
        fun addRcvyLocLat(builder: FlatBufferBuilder, rcvyLocLat: Int) = builder.addOffset(19, rcvyLocLat, 0)
        fun createRcvyLocLatVector(builder: FlatBufferBuilder, data: IntArray) : Int {
            builder.startVector(4, data.size, 4)
            for (i in data.size - 1 downTo 0) {
                builder.addOffset(data[i])
            }
            return builder.endVector()
        }
        fun startRcvyLocLatVector(builder: FlatBufferBuilder, numElems: Int) = builder.startVector(4, numElems, 4)
        fun addRcvyLocLon(builder: FlatBufferBuilder, rcvyLocLon: Int) = builder.addOffset(20, rcvyLocLon, 0)
        fun createRcvyLocLonVector(builder: FlatBufferBuilder, data: IntArray) : Int {
            builder.startVector(4, data.size, 4)
            for (i in data.size - 1 downTo 0) {
                builder.addOffset(data[i])
            }
            return builder.endVector()
        }
        fun startRcvyLocLonVector(builder: FlatBufferBuilder, numElems: Int) = builder.startVector(4, numElems, 4)
        fun addRcvyTime(builder: FlatBufferBuilder, rcvyTime: Int) = builder.addOffset(21, rcvyTime, 0)
        fun createRcvyTimeVector(builder: FlatBufferBuilder, data: IntArray) : Int {
            builder.startVector(4, data.size, 4)
            for (i in data.size - 1 downTo 0) {
                builder.addOffset(data[i])
            }
            return builder.endVector()
        }
        fun startRcvyTimeVector(builder: FlatBufferBuilder, numElems: Int) = builder.startVector(4, numElems, 4)
        fun addIndACTasking(builder: FlatBufferBuilder, indActasking: Int) = builder.addOffset(22, indActasking, 0)
        fun createIndActaskingVector(builder: FlatBufferBuilder, data: IntArray) : Int {
            builder.startVector(4, data.size, 4)
            for (i in data.size - 1 downTo 0) {
                builder.addOffset(data[i])
            }
            return builder.endVector()
        }
        fun startIndActaskingVector(builder: FlatBufferBuilder, numElems: Int) = builder.startVector(4, numElems, 4)
        fun addAcMsnLocSeg(builder: FlatBufferBuilder, acMsnLocSeg: Int) = builder.addOffset(23, acMsnLocSeg, 0)
        fun createAcMsnLocSegVector(builder: FlatBufferBuilder, data: IntArray) : Int {
            builder.startVector(4, data.size, 4)
            for (i in data.size - 1 downTo 0) {
                builder.addOffset(data[i])
            }
            return builder.endVector()
        }
        fun startAcMsnLocSegVector(builder: FlatBufferBuilder, numElems: Int) = builder.startVector(4, numElems, 4)
        fun endAircraftMissionTasking_Ingest(builder: FlatBufferBuilder) : Int {
            val o = builder.endTable()
            return o
        }
        fun finishAircraftMissionTaskingIngestBuffer(builder: FlatBufferBuilder, offset: Int) = builder.finish(offset, "AIRC")
        fun finishSizePrefixedAircraftMissionTasking_IngestBuffer(builder: FlatBufferBuilder, offset: Int) = builder.finishSizePrefixed(offset, "AIRC")
    }
}
