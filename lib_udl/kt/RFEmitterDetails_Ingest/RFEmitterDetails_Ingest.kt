// automatically generated by the FlatBuffers compiler, do not modify

import com.google.flatbuffers.BaseVector
import com.google.flatbuffers.BooleanVector
import com.google.flatbuffers.ByteVector
import com.google.flatbuffers.Constants
import com.google.flatbuffers.DoubleVector
import com.google.flatbuffers.FlatBufferBuilder
import com.google.flatbuffers.FloatVector
import com.google.flatbuffers.LongVector
import com.google.flatbuffers.StringVector
import com.google.flatbuffers.Struct
import com.google.flatbuffers.Table
import com.google.flatbuffers.UnionVector
import java.nio.ByteBuffer
import java.nio.ByteOrder
import kotlin.math.sign

/**
 * /// Details for a particular RF Emitter, collected by a particular source. An RF Emitter may have multiple details records from various sources.
 */
@Suppress("unused")
class RFEmitterDetails_Ingest : Table() {

    fun __init(_i: Int, _bb: ByteBuffer)  {
        __reset(_i, _bb)
    }
    fun __assign(_i: Int, _bb: ByteBuffer) : RFEmitterDetails_Ingest {
        __init(_i, _bb)
        return this
    }
    /**
     * Unique identifier of the record, auto-generated by the system.
     * Example: /// Example: RFEMITTERDETAILS-ID
     * Constraints: Minimum length = 1, Maximum length = 36
     */
    val id : String?
        get() {
            val o = __offset(4)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val idAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(4, 1)
    fun idInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 4, 1)
    /**
     * Unique identifier of the parent RF Emitter.
     * Example: /// Example: RFEMITTER-ID
     * Constraints: Minimum length = 1, Maximum length = 36
     */
    val idRfemitter : String?
        get() {
            val o = __offset(6)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val idRfemitterAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(6, 1)
    fun idRfemitterInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 6, 1)
    /**
     * Classification marking of the data in IC/CAPCO Portion-marked format.
     * Example: /// Example: U
     * Constraints: Minimum length = 1, Maximum length = 128
     */
    val classificationMarking : String?
        get() {
            val o = __offset(8)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val classificationMarkingAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(8, 1)
    fun classificationMarkingInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 8, 1)
    /**
     * Designator of this RF Emitter.
     * Example: /// Example: DESIGNATOR
     * Constraints: Minimum length = 0, Maximum length = 128
     */
    val designator : String?
        get() {
            val o = __offset(10)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val designatorAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(10, 1)
    fun designatorInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 10, 1)
    /**
     * Optional alternate name or alias for this RF Emitter.
     * Example: /// Example: ALTERNATE_NAME
     * Constraints: Minimum length = 0, Maximum length = 128
     */
    val altName : String?
        get() {
            val o = __offset(12)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val altNameAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(12, 1)
    fun altNameInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 12, 1)
    /**
     * Family of this RF Emitter type.
     * Example: /// Example: FAMILY
     * Constraints: Minimum length = 0, Maximum length = 128
     */
    val family : String?
        get() {
            val o = __offset(14)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val familyAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(14, 1)
    fun familyInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 14, 1)
    /**
     * Name of the production facility for this RF Emitter.
     * Example: /// Example: PRODUCTION_FACILITY
     * Constraints: Minimum length = 0, Maximum length = 128
     */
    val productionFacilityName : String?
        get() {
            val o = __offset(16)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val productionFacilityNameAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(16, 1)
    fun productionFacilityNameInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 16, 1)
    /**
     * Alternate facility name for this RF Emitter.
     * Example: /// Example: ALTERNATE_FACILITY_NAME
     * Constraints: Minimum length = 0, Maximum length = 128
     */
    val alternateFacilityName : String?
        get() {
            val o = __offset(18)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val alternateFacilityNameAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(18, 1)
    fun alternateFacilityNameInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 18, 1)
    /**
     * Unique identifier of the organization which manufactures this RF Emitter.
     * Example: /// Example: MANUFACTURERORG-ID
     * Constraints: Minimum length = 0, Maximum length = 36
     */
    val manufacturerOrgId : String?
        get() {
            val o = __offset(20)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val manufacturerOrgIdAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(20, 1)
    fun manufacturerOrgIdInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 20, 1)
    /**
     * Unique identifier of the location of the production facility for this RF Emitter.
     * Example: /// Example: PRODUCTIONFACILITYLOCATION-ID
     * Constraints: Minimum length = 0, Maximum length = 36
     */
    val productionFacilityLocationId : String?
        get() {
            val o = __offset(22)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val productionFacilityLocationIdAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(22, 1)
    fun productionFacilityLocationIdInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 22, 1)
    /**
     * Receiver sensitivity is the lowest power level at which the receiver can detect an RF signal and demodulate data. Sensitivity is purely a receiver specification and is independent of the transmitter. Start sensitivity range, in dBm.
     * Example: /// Example: 50.23
     * Constraints: No constraints specified.
     */
    val systemSensitivityStart : Double
        get() {
            val o = __offset(24)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Receiver sensitivity is the lowest power level at which the receiver can detect an RF signal and demodulate data. Sensitivity is purely a receiver specification and is independent of the transmitter. End sensitivity range, in dBm.
     * Example: /// Example: 150.23
     * Constraints: No constraints specified.
     */
    val systemSensitivityEnd : Double
        get() {
            val o = __offset(26)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Type or name of receiver.
     * Example: /// Example: RECEIVER_TYPE
     * Constraints: Minimum length = 0, Maximum length = 64
     */
    val receiverType : String?
        get() {
            val o = __offset(28)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val receiverTypeAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(28, 1)
    fun receiverTypeInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 28, 1)
    /**
     * Receiver sensitivity in dBm.
     * Example: /// Example: 10.23
     * Constraints: No constraints specified.
     */
    val receiverSensitivity : Double
        get() {
            val o = __offset(30)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Receiver bandwidth in Mhz.
     * Example: /// Example: 15.23
     * Constraints: No constraints specified.
     */
    val receiverBandwidth : Double
        get() {
            val o = __offset(32)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Transmitter frequency in Mhz.
     * Example: /// Example: 105.9
     * Constraints: No constraints specified.
     */
    val transmitterFrequency : Double
        get() {
            val o = __offset(34)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Transmitter bandwidth in Mhz.
     * Example: /// Example: 0.125
     * Constraints: No constraints specified.
     */
    val transmitterBandwidth : Double
        get() {
            val o = __offset(36)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Transmit power in Watts.
     * Example: /// Example: 100.23
     * Constraints: No constraints specified.
     */
    val transmitPower : Double
        get() {
            val o = __offset(38)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Barrage noise bandwidth in Mhz.
     * Example: /// Example: 5.23
     * Constraints: No constraints specified.
     */
    val barrageNoiseBandwidth : Double
        get() {
            val o = __offset(40)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Doppler noise value in Mhz.
     * Example: /// Example: 10.23
     * Constraints: No constraints specified.
     */
    val dopplerNoise : Double
        get() {
            val o = __offset(42)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Digital Form Radio Memory instantaneous bandwidth in Mhz.
     * Example: /// Example: 20.23
     * Constraints: No constraints specified.
     */
    val drfmInstantaneousBandwidth : Double
        get() {
            val o = __offset(44)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Number of channels.
     * Example: /// Example: 10
     * Constraints: No constraints specified.
     */
    val numChannels : Int
        get() {
            val o = __offset(46)
            return if(o != 0) bb.getInt(o + bb_pos) else 0
        }
    /**
     * Number of bits.
     * Example: /// Example: 256
     * Constraints: No constraints specified.
     */
    val numBits : Int
        get() {
            val o = __offset(48)
            return if(o != 0) bb.getInt(o + bb_pos) else 0
        }
    /**
     * Array with 1-2 values specifying the length and width (for rectangular) and just length for dipole antennas in meters.
     * Example: /// Example: [1.1, 2.2]
     * Constraints: No constraints specified.
     */
    fun antennaSize(j: Int) : String? {
        val o = __offset(50)
        return if (o != 0) {
            __string(__vector(o) + j * 4)
        } else {
            null
        }
    }
    val antennaSizeLength : Int
        get() {
            val o = __offset(50); return if (o != 0) __vector_len(o) else 0
        }
    /**
     * For parabolic/dish antennas, the diameter of the antenna in meters.
     * Example: /// Example: 20.23
     * Constraints: No constraints specified.
     */
    val antennaDiameter : Double
        get() {
            val o = __offset(52)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Notes on the RF Emitter.
     * Example: /// Example: NOTES
     * Constraints: Minimum length = 0, Maximum length = 2147483647
     */
    val notes : String?
        get() {
            val o = __offset(54)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val notesAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(54, 1)
    fun notesInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 54, 1)
    /**
     * Secondary notes on the RF Emitter.
     * Example: /// Example: MORE_NOTES
     * Constraints: Minimum length = 0, Maximum length = 2147483647
     */
    val secondaryNotes : String?
        get() {
            val o = __offset(56)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val secondaryNotesAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(56, 1)
    fun secondaryNotesInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 56, 1)
    /**
     * Detailed description of the RF Emitter.
     * Example: /// Example: DESCRIPTION
     * Constraints: Minimum length = 0, Maximum length = 2147483647
     */
    val description : String?
        get() {
            val o = __offset(58)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val descriptionAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(58, 1)
    fun descriptionInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 58, 1)
    /**
     * Array of URLs containing additional information on this RF Emitter.
     * Example: /// Example: ['TAG1', 'TAG2']
     * Constraints: No constraints specified.
     */
    fun urls(j: Int) : String? {
        val o = __offset(60)
        return if (o != 0) {
            __string(__vector(o) + j * 4)
        } else {
            null
        }
    }
    val urlsLength : Int
        get() {
            val o = __offset(60); return if (o != 0) __vector_len(o) else 0
        }
    /**
     * Source of the data.
     * Example: /// Example: Bluestaq
     * Constraints: Minimum length = 1, Maximum length = 64
     */
    val source : String?
        get() {
            val o = __offset(62)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val sourceAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(62, 1)
    fun sourceInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 62, 1)
    /**
     * Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
     * Example: /// Example: THIRD_PARTY_DATASOURCE
     * Constraints: Minimum length = 0, Maximum length = 64
     */
    val origin : String?
        get() {
            val o = __offset(64)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val originAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(64, 1)
    fun originInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 64, 1)
    /**
     * The originating source network on which this record was created, auto-populated by the system.
     * Example: /// Example: ORIG
     * Constraints: Minimum length = 1, Maximum length = 32
     */
    val origNetwork : String?
        get() {
            val o = __offset(66)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val origNetworkAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(66, 1)
    fun origNetworkInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 66, 1)
    /**
     * Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
     * EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
     * REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
     * SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
     * TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
     * Example: /// Example: TEST
     * Constraints: Minimum length = 1, Maximum length = 32
     */
    val dataMode : Byte
        get() {
            val o = __offset(68)
            return if(o != 0) bb.get(o + bb_pos) else 0
        }
    /**
     * Time the row was created in the database, auto-populated by the system.
     * Example: /// Example: 2018-01-01T16:00:00.123Z
     * Constraints: No constraints specified.
     */
    val createdAt : String?
        get() {
            val o = __offset(70)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val createdAtAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(70, 1)
    fun createdAtInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 70, 1)
    /**
     * Application user who created the row in the database, auto-populated by the system.
     * Example: /// Example: some.user
     * Constraints: Minimum length = 1, Maximum length = 64
     */
    val createdBy : String?
        get() {
            val o = __offset(72)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val createdByAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(72, 1)
    fun createdByInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 72, 1)
    companion object {
        fun validateVersion() = Constants.FLATBUFFERS_24_3_25()
        fun getRootAsRFEmitterDetails_Ingest(_bb: ByteBuffer): RFEmitterDetails_Ingest = getRootAsRFEmitterDetails_Ingest(_bb, RFEmitterDetails_Ingest())
        fun getRootAsRFEmitterDetails_Ingest(_bb: ByteBuffer, obj: RFEmitterDetails_Ingest): RFEmitterDetails_Ingest {
            _bb.order(ByteOrder.LITTLE_ENDIAN)
            return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb))
        }
        fun RFEmitterDetails_IngestBufferHasIdentifier(_bb: ByteBuffer) : Boolean = __has_identifier(_bb, "RFEM")
        fun createRFEmitterDetails_Ingest(builder: FlatBufferBuilder, idOffset: Int, idRfemitterOffset: Int, classificationMarkingOffset: Int, designatorOffset: Int, altNameOffset: Int, familyOffset: Int, productionFacilityNameOffset: Int, alternateFacilityNameOffset: Int, manufacturerOrgIdOffset: Int, productionFacilityLocationIdOffset: Int, systemSensitivityStart: Double, systemSensitivityEnd: Double, receiverTypeOffset: Int, receiverSensitivity: Double, receiverBandwidth: Double, transmitterFrequency: Double, transmitterBandwidth: Double, transmitPower: Double, barrageNoiseBandwidth: Double, dopplerNoise: Double, drfmInstantaneousBandwidth: Double, numChannels: Int, numBits: Int, antennaSizeOffset: Int, antennaDiameter: Double, notesOffset: Int, secondaryNotesOffset: Int, descriptionOffset: Int, urlsOffset: Int, sourceOffset: Int, originOffset: Int, origNetworkOffset: Int, dataMode: Byte, createdAtOffset: Int, createdByOffset: Int) : Int {
            builder.startTable(35)
            addAntennaDiameter(builder, antennaDiameter)
            addDrfmInstantaneousBandwidth(builder, drfmInstantaneousBandwidth)
            addDopplerNoise(builder, dopplerNoise)
            addBarrageNoiseBandwidth(builder, barrageNoiseBandwidth)
            addTransmitPower(builder, transmitPower)
            addTransmitterBandwidth(builder, transmitterBandwidth)
            addTransmitterFrequency(builder, transmitterFrequency)
            addReceiverBandwidth(builder, receiverBandwidth)
            addReceiverSensitivity(builder, receiverSensitivity)
            addSystemSensitivityEnd(builder, systemSensitivityEnd)
            addSystemSensitivityStart(builder, systemSensitivityStart)
            addCreatedBy(builder, createdByOffset)
            addCreatedAt(builder, createdAtOffset)
            addOrigNetwork(builder, origNetworkOffset)
            addOrigin(builder, originOffset)
            addSource(builder, sourceOffset)
            addUrls(builder, urlsOffset)
            addDescription(builder, descriptionOffset)
            addSecondaryNotes(builder, secondaryNotesOffset)
            addNotes(builder, notesOffset)
            addAntennaSize(builder, antennaSizeOffset)
            addNumBits(builder, numBits)
            addNumChannels(builder, numChannels)
            addReceiverType(builder, receiverTypeOffset)
            addProductionFacilityLocationId(builder, productionFacilityLocationIdOffset)
            addManufacturerOrgId(builder, manufacturerOrgIdOffset)
            addAlternateFacilityName(builder, alternateFacilityNameOffset)
            addProductionFacilityName(builder, productionFacilityNameOffset)
            addFamily(builder, familyOffset)
            addAltName(builder, altNameOffset)
            addDesignator(builder, designatorOffset)
            addClassificationMarking(builder, classificationMarkingOffset)
            addIdRFEmitter(builder, idRfemitterOffset)
            addId(builder, idOffset)
            addDataMode(builder, dataMode)
            return endRFEmitterDetails_Ingest(builder)
        }
        fun startRFEmitterDetails_Ingest(builder: FlatBufferBuilder) = builder.startTable(35)
        fun addId(builder: FlatBufferBuilder, id: Int) = builder.addOffset(0, id, 0)
        fun addIdRFEmitter(builder: FlatBufferBuilder, idRfemitter: Int) = builder.addOffset(1, idRfemitter, 0)
        fun addClassificationMarking(builder: FlatBufferBuilder, classificationMarking: Int) = builder.addOffset(2, classificationMarking, 0)
        fun addDesignator(builder: FlatBufferBuilder, designator: Int) = builder.addOffset(3, designator, 0)
        fun addAltName(builder: FlatBufferBuilder, altName: Int) = builder.addOffset(4, altName, 0)
        fun addFamily(builder: FlatBufferBuilder, family: Int) = builder.addOffset(5, family, 0)
        fun addProductionFacilityName(builder: FlatBufferBuilder, productionFacilityName: Int) = builder.addOffset(6, productionFacilityName, 0)
        fun addAlternateFacilityName(builder: FlatBufferBuilder, alternateFacilityName: Int) = builder.addOffset(7, alternateFacilityName, 0)
        fun addManufacturerOrgId(builder: FlatBufferBuilder, manufacturerOrgId: Int) = builder.addOffset(8, manufacturerOrgId, 0)
        fun addProductionFacilityLocationId(builder: FlatBufferBuilder, productionFacilityLocationId: Int) = builder.addOffset(9, productionFacilityLocationId, 0)
        fun addSystemSensitivityStart(builder: FlatBufferBuilder, systemSensitivityStart: Double) = builder.addDouble(10, systemSensitivityStart, 0.0)
        fun addSystemSensitivityEnd(builder: FlatBufferBuilder, systemSensitivityEnd: Double) = builder.addDouble(11, systemSensitivityEnd, 0.0)
        fun addReceiverType(builder: FlatBufferBuilder, receiverType: Int) = builder.addOffset(12, receiverType, 0)
        fun addReceiverSensitivity(builder: FlatBufferBuilder, receiverSensitivity: Double) = builder.addDouble(13, receiverSensitivity, 0.0)
        fun addReceiverBandwidth(builder: FlatBufferBuilder, receiverBandwidth: Double) = builder.addDouble(14, receiverBandwidth, 0.0)
        fun addTransmitterFrequency(builder: FlatBufferBuilder, transmitterFrequency: Double) = builder.addDouble(15, transmitterFrequency, 0.0)
        fun addTransmitterBandwidth(builder: FlatBufferBuilder, transmitterBandwidth: Double) = builder.addDouble(16, transmitterBandwidth, 0.0)
        fun addTransmitPower(builder: FlatBufferBuilder, transmitPower: Double) = builder.addDouble(17, transmitPower, 0.0)
        fun addBarrageNoiseBandwidth(builder: FlatBufferBuilder, barrageNoiseBandwidth: Double) = builder.addDouble(18, barrageNoiseBandwidth, 0.0)
        fun addDopplerNoise(builder: FlatBufferBuilder, dopplerNoise: Double) = builder.addDouble(19, dopplerNoise, 0.0)
        fun addDrfmInstantaneousBandwidth(builder: FlatBufferBuilder, drfmInstantaneousBandwidth: Double) = builder.addDouble(20, drfmInstantaneousBandwidth, 0.0)
        fun addNumChannels(builder: FlatBufferBuilder, numChannels: Int) = builder.addInt(21, numChannels, 0)
        fun addNumBits(builder: FlatBufferBuilder, numBits: Int) = builder.addInt(22, numBits, 0)
        fun addAntennaSize(builder: FlatBufferBuilder, antennaSize: Int) = builder.addOffset(23, antennaSize, 0)
        fun createAntennaSizeVector(builder: FlatBufferBuilder, data: IntArray) : Int {
            builder.startVector(4, data.size, 4)
            for (i in data.size - 1 downTo 0) {
                builder.addOffset(data[i])
            }
            return builder.endVector()
        }
        fun startAntennaSizeVector(builder: FlatBufferBuilder, numElems: Int) = builder.startVector(4, numElems, 4)
        fun addAntennaDiameter(builder: FlatBufferBuilder, antennaDiameter: Double) = builder.addDouble(24, antennaDiameter, 0.0)
        fun addNotes(builder: FlatBufferBuilder, notes: Int) = builder.addOffset(25, notes, 0)
        fun addSecondaryNotes(builder: FlatBufferBuilder, secondaryNotes: Int) = builder.addOffset(26, secondaryNotes, 0)
        fun addDescription(builder: FlatBufferBuilder, description: Int) = builder.addOffset(27, description, 0)
        fun addUrls(builder: FlatBufferBuilder, urls: Int) = builder.addOffset(28, urls, 0)
        fun createUrlsVector(builder: FlatBufferBuilder, data: IntArray) : Int {
            builder.startVector(4, data.size, 4)
            for (i in data.size - 1 downTo 0) {
                builder.addOffset(data[i])
            }
            return builder.endVector()
        }
        fun startUrlsVector(builder: FlatBufferBuilder, numElems: Int) = builder.startVector(4, numElems, 4)
        fun addSource(builder: FlatBufferBuilder, source: Int) = builder.addOffset(29, source, 0)
        fun addOrigin(builder: FlatBufferBuilder, origin: Int) = builder.addOffset(30, origin, 0)
        fun addOrigNetwork(builder: FlatBufferBuilder, origNetwork: Int) = builder.addOffset(31, origNetwork, 0)
        fun addDataMode(builder: FlatBufferBuilder, dataMode: Byte) = builder.addByte(32, dataMode, 0)
        fun addCreatedAt(builder: FlatBufferBuilder, createdAt: Int) = builder.addOffset(33, createdAt, 0)
        fun addCreatedBy(builder: FlatBufferBuilder, createdBy: Int) = builder.addOffset(34, createdBy, 0)
        fun endRFEmitterDetails_Ingest(builder: FlatBufferBuilder) : Int {
            val o = builder.endTable()
            return o
        }
        fun finishRFEmitterDetailsIngestBuffer(builder: FlatBufferBuilder, offset: Int) = builder.finish(offset, "RFEM")
        fun finishSizePrefixedRFEmitterDetails_IngestBuffer(builder: FlatBufferBuilder, offset: Int) = builder.finishSizePrefixed(offset, "RFEM")
    }
}
