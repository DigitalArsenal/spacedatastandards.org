// automatically generated by the FlatBuffers compiler, do not modify

import com.google.flatbuffers.BaseVector
import com.google.flatbuffers.BooleanVector
import com.google.flatbuffers.ByteVector
import com.google.flatbuffers.Constants
import com.google.flatbuffers.DoubleVector
import com.google.flatbuffers.FlatBufferBuilder
import com.google.flatbuffers.FloatVector
import com.google.flatbuffers.LongVector
import com.google.flatbuffers.StringVector
import com.google.flatbuffers.Struct
import com.google.flatbuffers.Table
import com.google.flatbuffers.UnionVector
import java.nio.ByteBuffer
import java.nio.ByteOrder
import kotlin.math.sign

/**
 * /// Channel information on a particular transponder.
 */
@Suppress("unused")
class Channel_Full : Table() {

    fun __init(_i: Int, _bb: ByteBuffer)  {
        __reset(_i, _bb)
    }
    fun __assign(_i: Int, _bb: ByteBuffer) : Channel_Full {
        __init(_i, _bb)
        return this
    }
    /**
     * Unique identifier of the record, auto-generated by the system.
     * Example: /// Example: CHANNEL-ID
     * Constraints: Minimum length = 1, Maximum length = 36
     */
    val id : String?
        get() {
            val o = __offset(4)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val idAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(4, 1)
    fun idInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 4, 1)
    /**
     * ID of the parent transponder object for this Channel.
     * Example: /// Example: REF-TRANSPONDER-ID
     * Constraints: Minimum length = 1, Maximum length = 36
     */
    val idTransponder : String?
        get() {
            val o = __offset(6)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val idTransponderAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(6, 1)
    fun idTransponderInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 6, 1)
    /**
     * Channel name.
     * Example: /// Example: Example name
     * Constraints: Minimum length = 1, Maximum length = 128
     */
    val name : String?
        get() {
            val o = __offset(8)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val nameAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(8, 1)
    fun nameInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 8, 1)
    /**
     * Classification marking of the data in IC/CAPCO Portion-marked format.
     * Example: /// Example: U
     * Constraints: Minimum length = 1, Maximum length = 128
     */
    val classificationMarking : String?
        get() {
            val o = __offset(10)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val classificationMarkingAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(10, 1)
    fun classificationMarkingInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 10, 1)
    /**
     * Channel type.
     * Example: /// Example: Example type
     * Constraints: Minimum length = 0, Maximum length = 45
     */
    val type : String?
        get() {
            val o = __offset(12)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val typeAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(12, 1)
    fun typeInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 12, 1)
    /**
     * Identifier of the particular beam for this channel.
     * Example: /// Example: REF-BEAM-ID
     * Constraints: Minimum length = 0, Maximum length = 36
     */
    val idBeam : String?
        get() {
            val o = __offset(14)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val idBeamAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(14, 1)
    fun idBeamInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 14, 1)
    /**
     * The antenna beam ID of the particular beam for this channel.  beamName is not unique across payloads.
     * Example: /// Example: B8VD
     * Constraints: Minimum length = 0, Maximum length = 36
     */
    val beamName : String?
        get() {
            val o = __offset(16)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val beamNameAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(16, 1)
    fun beamNameInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 16, 1)
    /**
     * ID of the RF Band object for this channel.
     * Example: /// Example: REF-RFBAND-ID
     * Constraints: Minimum length = 0, Maximum length = 36
     */
    val idRfband : String?
        get() {
            val o = __offset(18)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val idRfbandAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(18, 1)
    fun idRfbandInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 18, 1)
    /**
     * Channel encryption.
     * Example: /// Example: Example encryption
     * Constraints: Minimum length = 0, Maximum length = 45
     */
    val encryption : String?
        get() {
            val o = __offset(20)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val encryptionAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(20, 1)
    fun encryptionInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 20, 1)
    /**
     * Pkg.
     * Example: /// Example: Example pkg
     * Constraints: Minimum length = 0, Maximum length = 45
     */
    val pkg : String?
        get() {
            val o = __offset(22)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val pkgAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(22, 1)
    fun pkgInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 22, 1)
    /**
     * Res.
     * Example: /// Example: Example res
     * Constraints: Minimum length = 0, Maximum length = 45
     */
    val res : String?
        get() {
            val o = __offset(24)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val resAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(24, 1)
    fun resInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 24, 1)
    /**
     * Channel compression.
     * Example: /// Example: Example compression
     * Constraints: Minimum length = 0, Maximum length = 45
     */
    val compression : String?
        get() {
            val o = __offset(26)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val compressionAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(26, 1)
    fun compressionInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 26, 1)
    /**
     * Channel vPid.
     * Example: /// Example: VP-ID
     * Constraints: Minimum length = 0, Maximum length = 45
     */
    val vpid : String?
        get() {
            val o = __offset(28)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val vpidAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(28, 1)
    fun vpidInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 28, 1)
    /**
     * Channel aPid.
     * Example: /// Example: AP-ID
     * Constraints: Minimum length = 0, Maximum length = 45
     */
    val apid : String?
        get() {
            val o = __offset(30)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val apidAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(30, 1)
    fun apidInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 30, 1)
    /**
     * SID.
     * Example: /// Example: S-ID
     * Constraints: Minimum length = 0, Maximum length = 45
     */
    val sid : String?
        get() {
            val o = __offset(32)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val sidAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(32, 1)
    fun sidInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 32, 1)
    /**
     * Owner.
     * Example: /// Example: example_owner
     * Constraints: Minimum length = 0, Maximum length = 128
     */
    val owner : String?
        get() {
            val o = __offset(34)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val ownerAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(34, 1)
    fun ownerInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 34, 1)
    /**
     * Source of the data.
     * Example: /// Example: system.source
     * Constraints: Minimum length = 1, Maximum length = 64
     */
    val source : String?
        get() {
            val o = __offset(36)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val sourceAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(36, 1)
    fun sourceInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 36, 1)
    /**
     * Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
     * Example: /// Example: example_origin
     * Constraints: Minimum length = 0, Maximum length = 64
     */
    val origin : String?
        get() {
            val o = __offset(38)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val originAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(38, 1)
    fun originInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 38, 1)
    /**
     * The originating source network on which this record was created, auto-populated by the system.
     * Example: /// Example: ORIG
     * Constraints: Minimum length = 1, Maximum length = 32
     */
    val origNetwork : String?
        get() {
            val o = __offset(40)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val origNetworkAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(40, 1)
    fun origNetworkInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 40, 1)
    /**
     * Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
     * EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
     * REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
     * SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
     * TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
     * Example: /// Example: TEST
     * Constraints: Minimum length = 1, Maximum length = 32
     */
    val dataMode : Byte
        get() {
            val o = __offset(42)
            return if(o != 0) bb.get(o + bb_pos) else 0
        }
    /**
     * Time the row was created in the database, auto-populated by the system.
     * Example: /// Example: 2018-01-01T16:00:00.123Z
     * Constraints: No constraints specified.
     */
    val createdAt : String?
        get() {
            val o = __offset(44)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val createdAtAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(44, 1)
    fun createdAtInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 44, 1)
    /**
     * Application user who created the row in the database, auto-populated by the system.
     * Example: /// Example: some.user
     * Constraints: Minimum length = 1, Maximum length = 64
     */
    val createdBy : String?
        get() {
            val o = __offset(46)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val createdByAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(46, 1)
    fun createdByInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 46, 1)
    /**
     * Time the row was last updated in the database, auto-populated by the system.
     * Example: /// Example: 2018-01-01T16:00:00.123Z
     * Constraints: No constraints specified.
     */
    val updatedAt : String?
        get() {
            val o = __offset(48)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val updatedAtAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(48, 1)
    fun updatedAtInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 48, 1)
    /**
     * Application user who updated the row in the database, auto-populated by the system.
     * Example: /// Example: some.user
     * Constraints: Minimum length = 0, Maximum length = 64
     */
    val updatedBy : String?
        get() {
            val o = __offset(50)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val updatedByAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(50, 1)
    fun updatedByInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 50, 1)
    companion object {
        fun validateVersion() = Constants.FLATBUFFERS_24_3_25()
        fun getRootAsChannel_Full(_bb: ByteBuffer): Channel_Full = getRootAsChannel_Full(_bb, Channel_Full())
        fun getRootAsChannel_Full(_bb: ByteBuffer, obj: Channel_Full): Channel_Full {
            _bb.order(ByteOrder.LITTLE_ENDIAN)
            return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb))
        }
        fun Channel_FullBufferHasIdentifier(_bb: ByteBuffer) : Boolean = __has_identifier(_bb, "CHAN")
        fun createChannel_Full(builder: FlatBufferBuilder, idOffset: Int, idTransponderOffset: Int, nameOffset: Int, classificationMarkingOffset: Int, typeOffset: Int, idBeamOffset: Int, beamNameOffset: Int, idRfbandOffset: Int, encryptionOffset: Int, pkgOffset: Int, resOffset: Int, compressionOffset: Int, vpidOffset: Int, apidOffset: Int, sidOffset: Int, ownerOffset: Int, sourceOffset: Int, originOffset: Int, origNetworkOffset: Int, dataMode: Byte, createdAtOffset: Int, createdByOffset: Int, updatedAtOffset: Int, updatedByOffset: Int) : Int {
            builder.startTable(24)
            addUpdatedBy(builder, updatedByOffset)
            addUpdatedAt(builder, updatedAtOffset)
            addCreatedBy(builder, createdByOffset)
            addCreatedAt(builder, createdAtOffset)
            addOrigNetwork(builder, origNetworkOffset)
            addOrigin(builder, originOffset)
            addSource(builder, sourceOffset)
            addOwner(builder, ownerOffset)
            addSid(builder, sidOffset)
            addApid(builder, apidOffset)
            addVpid(builder, vpidOffset)
            addCompression(builder, compressionOffset)
            addRes(builder, resOffset)
            addPkg(builder, pkgOffset)
            addEncryption(builder, encryptionOffset)
            addIdRFBand(builder, idRfbandOffset)
            addBeamName(builder, beamNameOffset)
            addIdBeam(builder, idBeamOffset)
            addType(builder, typeOffset)
            addClassificationMarking(builder, classificationMarkingOffset)
            addName(builder, nameOffset)
            addIdTransponder(builder, idTransponderOffset)
            addId(builder, idOffset)
            addDataMode(builder, dataMode)
            return endChannel_Full(builder)
        }
        fun startChannel_Full(builder: FlatBufferBuilder) = builder.startTable(24)
        fun addId(builder: FlatBufferBuilder, id: Int) = builder.addOffset(0, id, 0)
        fun addIdTransponder(builder: FlatBufferBuilder, idTransponder: Int) = builder.addOffset(1, idTransponder, 0)
        fun addName(builder: FlatBufferBuilder, name: Int) = builder.addOffset(2, name, 0)
        fun addClassificationMarking(builder: FlatBufferBuilder, classificationMarking: Int) = builder.addOffset(3, classificationMarking, 0)
        fun addType(builder: FlatBufferBuilder, type: Int) = builder.addOffset(4, type, 0)
        fun addIdBeam(builder: FlatBufferBuilder, idBeam: Int) = builder.addOffset(5, idBeam, 0)
        fun addBeamName(builder: FlatBufferBuilder, beamName: Int) = builder.addOffset(6, beamName, 0)
        fun addIdRFBand(builder: FlatBufferBuilder, idRfband: Int) = builder.addOffset(7, idRfband, 0)
        fun addEncryption(builder: FlatBufferBuilder, encryption: Int) = builder.addOffset(8, encryption, 0)
        fun addPkg(builder: FlatBufferBuilder, pkg: Int) = builder.addOffset(9, pkg, 0)
        fun addRes(builder: FlatBufferBuilder, res: Int) = builder.addOffset(10, res, 0)
        fun addCompression(builder: FlatBufferBuilder, compression: Int) = builder.addOffset(11, compression, 0)
        fun addVpid(builder: FlatBufferBuilder, vpid: Int) = builder.addOffset(12, vpid, 0)
        fun addApid(builder: FlatBufferBuilder, apid: Int) = builder.addOffset(13, apid, 0)
        fun addSid(builder: FlatBufferBuilder, sid: Int) = builder.addOffset(14, sid, 0)
        fun addOwner(builder: FlatBufferBuilder, owner: Int) = builder.addOffset(15, owner, 0)
        fun addSource(builder: FlatBufferBuilder, source: Int) = builder.addOffset(16, source, 0)
        fun addOrigin(builder: FlatBufferBuilder, origin: Int) = builder.addOffset(17, origin, 0)
        fun addOrigNetwork(builder: FlatBufferBuilder, origNetwork: Int) = builder.addOffset(18, origNetwork, 0)
        fun addDataMode(builder: FlatBufferBuilder, dataMode: Byte) = builder.addByte(19, dataMode, 0)
        fun addCreatedAt(builder: FlatBufferBuilder, createdAt: Int) = builder.addOffset(20, createdAt, 0)
        fun addCreatedBy(builder: FlatBufferBuilder, createdBy: Int) = builder.addOffset(21, createdBy, 0)
        fun addUpdatedAt(builder: FlatBufferBuilder, updatedAt: Int) = builder.addOffset(22, updatedAt, 0)
        fun addUpdatedBy(builder: FlatBufferBuilder, updatedBy: Int) = builder.addOffset(23, updatedBy, 0)
        fun endChannel_Full(builder: FlatBufferBuilder) : Int {
            val o = builder.endTable()
            return o
        }
        fun finishChannelFullBuffer(builder: FlatBufferBuilder, offset: Int) = builder.finish(offset, "CHAN")
        fun finishSizePrefixedChannel_FullBuffer(builder: FlatBufferBuilder, offset: Int) = builder.finishSizePrefixed(offset, "CHAN")
    }
}
