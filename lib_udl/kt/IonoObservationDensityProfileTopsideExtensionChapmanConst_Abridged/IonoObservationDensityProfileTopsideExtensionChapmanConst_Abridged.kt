// automatically generated by the FlatBuffers compiler, do not modify

import com.google.flatbuffers.BaseVector
import com.google.flatbuffers.BooleanVector
import com.google.flatbuffers.ByteVector
import com.google.flatbuffers.Constants
import com.google.flatbuffers.DoubleVector
import com.google.flatbuffers.FlatBufferBuilder
import com.google.flatbuffers.FloatVector
import com.google.flatbuffers.LongVector
import com.google.flatbuffers.StringVector
import com.google.flatbuffers.Struct
import com.google.flatbuffers.Table
import com.google.flatbuffers.UnionVector
import java.nio.ByteBuffer
import java.nio.ByteOrder
import kotlin.math.sign

/**
 * /// Parameters of the constant-scale-height Chapman layer.
 */
@Suppress("unused")
class IonoObservationDensityProfileTopsideExtensionChapmanConst_Abridged : Table() {

    fun __init(_i: Int, _bb: ByteBuffer)  {
        __reset(_i, _bb)
    }
    fun __assign(_i: Int, _bb: ByteBuffer) : IonoObservationDensityProfileTopsideExtensionChapmanConst_Abridged {
        __init(_i, _bb)
        return this
    }
    /**
     * Description of the Chapman computation technique.
     * Example: /// Example: Constant scale height Chapman topside layer determined using bottomside peak density parameters and placed chi km above the ionosonde-determined peak height.
     * Constraints: No constraints specified.
     */
    val description : String?
        get() {
            val o = __offset(4)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val descriptionAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(4, 1)
    fun descriptionInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 4, 1)
    /**
     * Peak density of F2 layer, in grams per cubic centimeter.
     * Example: /// Example: 313283.1
     * Constraints: No constraints specified.
     */
    val nmF2 : Double
        get() {
            val o = __offset(6)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Peak height of F2 layer, in kilometers.
     * Example: /// Example: 265.42
     * Constraints: No constraints specified.
     */
    val hmF2 : Double
        get() {
            val o = __offset(8)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Scale height if F2 layer at the peak, in kilometers.
     * Example: /// Example: 45.191
     * Constraints: No constraints specified.
     */
    val scaleF2 : Double
        get() {
            val o = __offset(10)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Peak Density Thickness (PDT) for description of the flat-nose shape, in kilometers.
     * Example: /// Example: 35.1
     * Constraints: No constraints specified.
     */
    val chi : Double
        get() {
            val o = __offset(12)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    companion object {
        fun validateVersion() = Constants.FLATBUFFERS_24_3_25()
        fun getRootAsIonoObservationDensityProfileTopsideExtensionChapmanConst_Abridged(_bb: ByteBuffer): IonoObservationDensityProfileTopsideExtensionChapmanConst_Abridged = getRootAsIonoObservationDensityProfileTopsideExtensionChapmanConst_Abridged(_bb, IonoObservationDensityProfileTopsideExtensionChapmanConst_Abridged())
        fun getRootAsIonoObservationDensityProfileTopsideExtensionChapmanConst_Abridged(_bb: ByteBuffer, obj: IonoObservationDensityProfileTopsideExtensionChapmanConst_Abridged): IonoObservationDensityProfileTopsideExtensionChapmanConst_Abridged {
            _bb.order(ByteOrder.LITTLE_ENDIAN)
            return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb))
        }
        fun IonoObservationDensityProfileTopsideExtensionChapmanConst_AbridgedBufferHasIdentifier(_bb: ByteBuffer) : Boolean = __has_identifier(_bb, "IONO")
        fun createIonoObservationDensityProfileTopsideExtensionChapmanConst_Abridged(builder: FlatBufferBuilder, descriptionOffset: Int, nmF2: Double, hmF2: Double, scaleF2: Double, chi: Double) : Int {
            builder.startTable(5)
            addChi(builder, chi)
            addScaleF2(builder, scaleF2)
            addHmF2(builder, hmF2)
            addNmF2(builder, nmF2)
            addDescription(builder, descriptionOffset)
            return endIonoObservationDensityProfileTopsideExtensionChapmanConst_Abridged(builder)
        }
        fun startIonoObservationDensityProfileTopsideExtensionChapmanConst_Abridged(builder: FlatBufferBuilder) = builder.startTable(5)
        fun addDescription(builder: FlatBufferBuilder, description: Int) = builder.addOffset(0, description, 0)
        fun addNmF2(builder: FlatBufferBuilder, nmF2: Double) = builder.addDouble(1, nmF2, 0.0)
        fun addHmF2(builder: FlatBufferBuilder, hmF2: Double) = builder.addDouble(2, hmF2, 0.0)
        fun addScaleF2(builder: FlatBufferBuilder, scaleF2: Double) = builder.addDouble(3, scaleF2, 0.0)
        fun addChi(builder: FlatBufferBuilder, chi: Double) = builder.addDouble(4, chi, 0.0)
        fun endIonoObservationDensityProfileTopsideExtensionChapmanConst_Abridged(builder: FlatBufferBuilder) : Int {
            val o = builder.endTable()
            return o
        }
        fun finishIonoObservationDensityProfileTopsideExtensionChapmanConstAbridgedBuffer(builder: FlatBufferBuilder, offset: Int) = builder.finish(offset, "IONO")
        fun finishSizePrefixedIonoObservationDensityProfileTopsideExtensionChapmanConst_AbridgedBuffer(builder: FlatBufferBuilder, offset: Int) = builder.finishSizePrefixed(offset, "IONO")
    }
}
