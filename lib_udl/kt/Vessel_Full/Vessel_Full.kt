// automatically generated by the FlatBuffers compiler, do not modify

import com.google.flatbuffers.BaseVector
import com.google.flatbuffers.BooleanVector
import com.google.flatbuffers.ByteVector
import com.google.flatbuffers.Constants
import com.google.flatbuffers.DoubleVector
import com.google.flatbuffers.FlatBufferBuilder
import com.google.flatbuffers.FloatVector
import com.google.flatbuffers.LongVector
import com.google.flatbuffers.StringVector
import com.google.flatbuffers.Struct
import com.google.flatbuffers.Table
import com.google.flatbuffers.UnionVector
import java.nio.ByteBuffer
import java.nio.ByteOrder
import kotlin.math.sign

/**
 * /// This service provides operations for manipulation and querying of maritime Vessel data. Vessel contains the static data of the specific vessel: mmsi, cruise speed, max speed, etc.
 */
@Suppress("unused")
class Vessel_Full : Table() {

    fun __init(_i: Int, _bb: ByteBuffer)  {
        __reset(_i, _bb)
    }
    fun __assign(_i: Int, _bb: ByteBuffer) : Vessel_Full {
        __init(_i, _bb)
        return this
    }
    /**
     * Unique identifier of the record, auto-generated by the system.
     * Example: /// Example: 0167f577-e06c-358e-85aa-0a07a730bdd0
     * Constraints: Minimum length = 1, Maximum length = 36
     */
    val id : String?
        get() {
            val o = __offset(4)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val idAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(4, 1)
    fun idInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 4, 1)
    /**
     * Classification marking of the data in IC/CAPCO Portion-marked format.
     * Example: /// Example: U
     * Constraints: Minimum length = 1, Maximum length = 128
     */
    val classificationMarking : String?
        get() {
            val o = __offset(6)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val classificationMarkingAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(6, 1)
    fun classificationMarkingInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 6, 1)
    /**
     * No description provided.
     * Example: /// Example: No example provided.
     * Constraints: No constraints specified.
     */
    val entity : String?
        get() {
            val o = __offset(8)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val entityAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(8, 1)
    fun entityInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 8, 1)
    /**
     * Unique identifier of the parent entity. idEntity is required for Put.
     * Example: /// Example: ENTITY-ID
     * Constraints: Minimum length = 0, Maximum length = 36
     */
    val idEntity : String?
        get() {
            val o = __offset(10)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val idEntityAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(10, 1)
    fun idEntityInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 10, 1)
    /**
     * The original source Id for this vessel.
     * Example: /// Example: 590b5194fc32e75dd00682ba
     * Constraints: Minimum length = 0, Maximum length = 36
     */
    val altVesselId : String?
        get() {
            val o = __offset(12)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val altVesselIdAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(12, 1)
    fun altVesselIdInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 12, 1)
    /**
     * The UDL ID of the organization that owns the vessel.
     * Example: /// Example: 0147f777-w09a-835f-85aa-0a07a730fgg0
     * Constraints: Minimum length = 0, Maximum length = 36
     */
    val idOrganization : String?
        get() {
            val o = __offset(14)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val idOrganizationAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(14, 1)
    fun idOrganizationInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 14, 1)
    /**
     * The name of this vessel. Vessel names that exceed the AIS 20 character are shortened (not truncated) to 15 character-spaces, followed by an underscore and the last 4 characters-spaces of the vessel full name.
     * Example: /// Example: DORNUM
     * Constraints: Minimum length = 0, Maximum length = 24
     */
    val vesselName : String?
        get() {
            val o = __offset(16)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val vesselNameAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(16, 1)
    fun vesselNameInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 16, 1)
    /**
     * The reported ship type (e.g. Passenger, Tanker, Cargo, Other, etc.).
     * Example: /// Example: Passenger
     * Constraints: Minimum length = 0, Maximum length = 48
     */
    val vesselType : String?
        get() {
            val o = __offset(18)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val vesselTypeAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(18, 1)
    fun vesselTypeInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 18, 1)
    /**
     * The common name for a group of ships with similar design, usually named for the first vessel of the class.
     * Example: /// Example: Nimitz
     * Constraints: Minimum length = 0, Maximum length = 64
     */
    val vesselClass : String?
        get() {
            val o = __offset(20)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val vesselClassAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(20, 1)
    fun vesselClassInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 20, 1)
    /**
     * Further description or explanation of the vessel or type.
     * Example: /// Example: Search and Rescue Vessel
     * Constraints: Minimum length = 0, Maximum length = 100
     */
    val vesselDescription : String?
        get() {
            val o = __offset(22)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val vesselDescriptionAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(22, 1)
    fun vesselDescriptionInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 22, 1)
    /**
     * The Ship Control Number (SCONUM) is a naval vessel identification number (alphanumeric code) assigned by the Office of Naval Intelligence. SCONUM is sometimes referred to as NOIC ID. SCONUMs are typically of the form A#####, where A is an alpha character and # is numerical.
     * Example: /// Example: B45524
     * Constraints: Minimum length = 0, Maximum length = 36
     */
    val sconum : String?
        get() {
            val o = __offset(24)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val sconumAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(24, 1)
    fun sconumInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 24, 1)
    /**
     * The International Maritime Organization Number of the vessel. IMON is a seven-digit number that uniquely identifies the vessel.
     * Example: /// Example: 9566356
     * Constraints: No constraints specified.
     */
    val imon : Int
        get() {
            val o = __offset(26)
            return if(o != 0) bb.getInt(o + bb_pos) else 0
        }
    /**
     * The Maritime Mobile Service Identity of the vessel. MMSI is a nine-digit number that identifies the transmitter station of the vessel.
     * Example: /// Example: 416450000
     * Constraints: Minimum length = 0, Maximum length = 9
     */
    val mmsi : String?
        get() {
            val o = __offset(28)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val mmsiAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(28, 1)
    fun mmsiInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 28, 1)
    /**
     * A uniquely designated identifier for the vessel's transmitter station. All radio transmissions must be individually identified by the call sign. Merchant and naval vessels are assigned call signs by their national licensing authorities.
     * Example: /// Example: V2OZ
     * Constraints: Minimum length = 0, Maximum length = 24
     */
    val callsign : String?
        get() {
            val o = __offset(30)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val callsignAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(30, 1)
    fun callsignInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 30, 1)
    /**
     * The flag of the subject vessel.
     * Example: /// Example: United States
     * Constraints: Minimum length = 0, Maximum length = 36
     */
    val vesselFlag : String?
        get() {
            val o = __offset(32)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val vesselFlagAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(32, 1)
    fun vesselFlagInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 32, 1)
    /**
     * Year the vessel went into service.
     * Example: /// Example: 2014
     * Constraints: Minimum length = 0, Maximum length = 4
     */
    val yearBuilt : String?
        get() {
            val o = __offset(34)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val yearBuiltAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(34, 1)
    fun yearBuiltInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 34, 1)
    /**
     * The shipbuilder who built this vessel.
     * Example: /// Example: Samsung Heavy Inds - Geoje
     * Constraints: Minimum length = 0, Maximum length = 64
     */
    val vesselBuilder : String?
        get() {
            val o = __offset(36)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val vesselBuilderAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(36, 1)
    fun vesselBuilderInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 36, 1)
    /**
     * The status of this vessel.
     * Example: /// Example: In Service/Commission
     * Constraints: Minimum length = 0, Maximum length = 64
     */
    val status : String?
        get() {
            val o = __offset(38)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val statusAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(38, 1)
    fun statusInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 38, 1)
    /**
     * The date this vessel was first seen.
     * Example: /// Example: 2018-01-01T16:00:00.123Z
     * Constraints: No constraints specified.
     */
    val firstSeen : String?
        get() {
            val o = __offset(40)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val firstSeenAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(40, 1)
    fun firstSeenInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 40, 1)
    /**
     * The overall length of the vessel, in meters. A value of 511 indicates a vessel length of 511 meters or greater.
     * Example: /// Example: 511.1
     * Constraints: No constraints specified.
     */
    val length : Double
        get() {
            val o = __offset(42)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * The breadth of the vessel, in meters. A value of 63 indicates a vessel breadth of 63 meters or greater.
     * Example: /// Example: 24.1
     * Constraints: No constraints specified.
     */
    val width : Double
        get() {
            val o = __offset(44)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * The maximum static draught, in meters, of the vessel defined as the distance between the ship’s keel and the waterline of the vessel.
     * Example: /// Example: 21.1
     * Constraints: No constraints specified.
     */
    val maxDraught : Double
        get() {
            val o = __offset(46)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * The weight in tons, of this vessel.
     * Example: /// Example: 3423.76
     * Constraints: No constraints specified.
     */
    val vslWt : Double
        get() {
            val o = __offset(48)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * The maximum possible speed of this vessel in meters per second.
     * Example: /// Example: 32.5
     * Constraints: No constraints specified.
     */
    val maxSpeed : Double
        get() {
            val o = __offset(50)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * The stern type code (Counter, Cruiser) associated with this vessel.
     * Example: /// Example: Cruiser
     * Constraints: Minimum length = 0, Maximum length = 16
     */
    val sternType : String?
        get() {
            val o = __offset(52)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val sternTypeAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(52, 1)
    fun sternTypeInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 52, 1)
    /**
     * The number of blades per shaft for this vessel.
     * Example: /// Example: 4
     * Constraints: No constraints specified.
     */
    val numBlades : Int
        get() {
            val o = __offset(54)
            return if(o != 0) bb.getInt(o + bb_pos) else 0
        }
    /**
     * The number of shafts on this vessel.
     * Example: /// Example: 3
     * Constraints: No constraints specified.
     */
    val numShafts : Int
        get() {
            val o = __offset(56)
            return if(o != 0) bb.getInt(o + bb_pos) else 0
        }
    /**
     * The type of propulsion employed by this vessel.
     * Example: /// Example: Diesel
     * Constraints: Minimum length = 0, Maximum length = 6
     */
    val propType : String?
        get() {
            val o = __offset(58)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val propTypeAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(58, 1)
    fun propTypeInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 58, 1)
    /**
     * The vessel hull number designation of this maritime vessel. The hull number is a 1-6 character alphanumeric entry assigned to a ship and painted on the hull.
     * Example: /// Example: A30081
     * Constraints: Minimum length = 0, Maximum length = 7
     */
    val hullNum : String?
        get() {
            val o = __offset(60)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val hullNumAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(60, 1)
    fun hullNumInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 60, 1)
    /**
     * Time the row was created in the database, auto-populated by the system.
     * Example: /// Example: 2018-01-01T16:00:00.123Z
     * Constraints: No constraints specified.
     */
    val createdAt : String?
        get() {
            val o = __offset(62)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val createdAtAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(62, 1)
    fun createdAtInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 62, 1)
    /**
     * Application user who created the row in the database, auto-populated by the system.
     * Example: /// Example: some.user
     * Constraints: Minimum length = 1, Maximum length = 64
     */
    val createdBy : String?
        get() {
            val o = __offset(64)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val createdByAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(64, 1)
    fun createdByInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 64, 1)
    /**
     * Time the row was updated in the database, auto-populated by the system.
     * Example: /// Example: 2018-01-01T16:00:00.123Z
     * Constraints: No constraints specified.
     */
    val updatedAt : String?
        get() {
            val o = __offset(66)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val updatedAtAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(66, 1)
    fun updatedAtInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 66, 1)
    /**
     * Application user who updated the row in the database, auto-populated by the system.
     * Example: /// Example: some.user
     * Constraints: Minimum length = 1, Maximum length = 64
     */
    val updatedBy : String?
        get() {
            val o = __offset(68)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val updatedByAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(68, 1)
    fun updatedByInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 68, 1)
    /**
     * Source of the data.
     * Example: /// Example: Bluestaq
     * Constraints: Minimum length = 1, Maximum length = 64
     */
    val source : String?
        get() {
            val o = __offset(70)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val sourceAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(70, 1)
    fun sourceInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 70, 1)
    /**
     * The source data library from which this record was received. This could be a remote or tactical UDL or another data library. If null, the record should be assumed to have originated from the primary Enterprise UDL.
     * Example: /// Example: AXE
     * Constraints: Minimum length = 1, Maximum length = 64
     */
    val sourceDl : String?
        get() {
            val o = __offset(72)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val sourceDlAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(72, 1)
    fun sourceDlInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 72, 1)
    /**
     * Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
     * Example: /// Example: THIRD_PARTY_DATASOURCE
     * Constraints: Minimum length = 0, Maximum length = 64
     */
    val origin : String?
        get() {
            val o = __offset(74)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val originAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(74, 1)
    fun originInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 74, 1)
    /**
     * Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
     * EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
     * REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
     * SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
     * TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
     * Example: /// Example: TEST
     * Constraints: Minimum length = 1, Maximum length = 64
     */
    val dataMode : Byte
        get() {
            val o = __offset(76)
            return if(o != 0) bb.get(o + bb_pos) else 0
        }
    /**
     * The originating source network on which this record was created, auto-populated by the system.
     * Example: /// Example: OPS1
     * Constraints: Minimum length = 1, Maximum length = 32
     */
    val origNetwork : String?
        get() {
            val o = __offset(78)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val origNetworkAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(78, 1)
    fun origNetworkInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 78, 1)
    companion object {
        fun validateVersion() = Constants.FLATBUFFERS_24_3_25()
        fun getRootAsVessel_Full(_bb: ByteBuffer): Vessel_Full = getRootAsVessel_Full(_bb, Vessel_Full())
        fun getRootAsVessel_Full(_bb: ByteBuffer, obj: Vessel_Full): Vessel_Full {
            _bb.order(ByteOrder.LITTLE_ENDIAN)
            return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb))
        }
        fun Vessel_FullBufferHasIdentifier(_bb: ByteBuffer) : Boolean = __has_identifier(_bb, "VESS")
        fun createVessel_Full(builder: FlatBufferBuilder, idOffset: Int, classificationMarkingOffset: Int, entityOffset: Int, idEntityOffset: Int, altVesselIdOffset: Int, idOrganizationOffset: Int, vesselNameOffset: Int, vesselTypeOffset: Int, vesselClassOffset: Int, vesselDescriptionOffset: Int, sconumOffset: Int, imon: Int, mmsiOffset: Int, callsignOffset: Int, vesselFlagOffset: Int, yearBuiltOffset: Int, vesselBuilderOffset: Int, statusOffset: Int, firstSeenOffset: Int, length: Double, width: Double, maxDraught: Double, vslWt: Double, maxSpeed: Double, sternTypeOffset: Int, numBlades: Int, numShafts: Int, propTypeOffset: Int, hullNumOffset: Int, createdAtOffset: Int, createdByOffset: Int, updatedAtOffset: Int, updatedByOffset: Int, sourceOffset: Int, sourceDlOffset: Int, originOffset: Int, dataMode: Byte, origNetworkOffset: Int) : Int {
            builder.startTable(38)
            addMaxSpeed(builder, maxSpeed)
            addVslWt(builder, vslWt)
            addMaxDraught(builder, maxDraught)
            addWidth(builder, width)
            addLength(builder, length)
            addOrigNetwork(builder, origNetworkOffset)
            addOrigin(builder, originOffset)
            addSourceDL(builder, sourceDlOffset)
            addSource(builder, sourceOffset)
            addUpdatedBy(builder, updatedByOffset)
            addUpdatedAt(builder, updatedAtOffset)
            addCreatedBy(builder, createdByOffset)
            addCreatedAt(builder, createdAtOffset)
            addHullNum(builder, hullNumOffset)
            addPropType(builder, propTypeOffset)
            addNumShafts(builder, numShafts)
            addNumBlades(builder, numBlades)
            addSternType(builder, sternTypeOffset)
            addFirstSeen(builder, firstSeenOffset)
            addStatus(builder, statusOffset)
            addVesselBuilder(builder, vesselBuilderOffset)
            addYearBuilt(builder, yearBuiltOffset)
            addVesselFlag(builder, vesselFlagOffset)
            addCallsign(builder, callsignOffset)
            addMmsi(builder, mmsiOffset)
            addImon(builder, imon)
            addSconum(builder, sconumOffset)
            addVesselDescription(builder, vesselDescriptionOffset)
            addVesselClass(builder, vesselClassOffset)
            addVesselType(builder, vesselTypeOffset)
            addVesselName(builder, vesselNameOffset)
            addIdOrganization(builder, idOrganizationOffset)
            addAltVesselId(builder, altVesselIdOffset)
            addIdEntity(builder, idEntityOffset)
            addEntity(builder, entityOffset)
            addClassificationMarking(builder, classificationMarkingOffset)
            addId(builder, idOffset)
            addDataMode(builder, dataMode)
            return endVessel_Full(builder)
        }
        fun startVessel_Full(builder: FlatBufferBuilder) = builder.startTable(38)
        fun addId(builder: FlatBufferBuilder, id: Int) = builder.addOffset(0, id, 0)
        fun addClassificationMarking(builder: FlatBufferBuilder, classificationMarking: Int) = builder.addOffset(1, classificationMarking, 0)
        fun addEntity(builder: FlatBufferBuilder, entity: Int) = builder.addOffset(2, entity, 0)
        fun addIdEntity(builder: FlatBufferBuilder, idEntity: Int) = builder.addOffset(3, idEntity, 0)
        fun addAltVesselId(builder: FlatBufferBuilder, altVesselId: Int) = builder.addOffset(4, altVesselId, 0)
        fun addIdOrganization(builder: FlatBufferBuilder, idOrganization: Int) = builder.addOffset(5, idOrganization, 0)
        fun addVesselName(builder: FlatBufferBuilder, vesselName: Int) = builder.addOffset(6, vesselName, 0)
        fun addVesselType(builder: FlatBufferBuilder, vesselType: Int) = builder.addOffset(7, vesselType, 0)
        fun addVesselClass(builder: FlatBufferBuilder, vesselClass: Int) = builder.addOffset(8, vesselClass, 0)
        fun addVesselDescription(builder: FlatBufferBuilder, vesselDescription: Int) = builder.addOffset(9, vesselDescription, 0)
        fun addSconum(builder: FlatBufferBuilder, sconum: Int) = builder.addOffset(10, sconum, 0)
        fun addImon(builder: FlatBufferBuilder, imon: Int) = builder.addInt(11, imon, 0)
        fun addMmsi(builder: FlatBufferBuilder, mmsi: Int) = builder.addOffset(12, mmsi, 0)
        fun addCallsign(builder: FlatBufferBuilder, callsign: Int) = builder.addOffset(13, callsign, 0)
        fun addVesselFlag(builder: FlatBufferBuilder, vesselFlag: Int) = builder.addOffset(14, vesselFlag, 0)
        fun addYearBuilt(builder: FlatBufferBuilder, yearBuilt: Int) = builder.addOffset(15, yearBuilt, 0)
        fun addVesselBuilder(builder: FlatBufferBuilder, vesselBuilder: Int) = builder.addOffset(16, vesselBuilder, 0)
        fun addStatus(builder: FlatBufferBuilder, status: Int) = builder.addOffset(17, status, 0)
        fun addFirstSeen(builder: FlatBufferBuilder, firstSeen: Int) = builder.addOffset(18, firstSeen, 0)
        fun addLength(builder: FlatBufferBuilder, length: Double) = builder.addDouble(19, length, 0.0)
        fun addWidth(builder: FlatBufferBuilder, width: Double) = builder.addDouble(20, width, 0.0)
        fun addMaxDraught(builder: FlatBufferBuilder, maxDraught: Double) = builder.addDouble(21, maxDraught, 0.0)
        fun addVslWt(builder: FlatBufferBuilder, vslWt: Double) = builder.addDouble(22, vslWt, 0.0)
        fun addMaxSpeed(builder: FlatBufferBuilder, maxSpeed: Double) = builder.addDouble(23, maxSpeed, 0.0)
        fun addSternType(builder: FlatBufferBuilder, sternType: Int) = builder.addOffset(24, sternType, 0)
        fun addNumBlades(builder: FlatBufferBuilder, numBlades: Int) = builder.addInt(25, numBlades, 0)
        fun addNumShafts(builder: FlatBufferBuilder, numShafts: Int) = builder.addInt(26, numShafts, 0)
        fun addPropType(builder: FlatBufferBuilder, propType: Int) = builder.addOffset(27, propType, 0)
        fun addHullNum(builder: FlatBufferBuilder, hullNum: Int) = builder.addOffset(28, hullNum, 0)
        fun addCreatedAt(builder: FlatBufferBuilder, createdAt: Int) = builder.addOffset(29, createdAt, 0)
        fun addCreatedBy(builder: FlatBufferBuilder, createdBy: Int) = builder.addOffset(30, createdBy, 0)
        fun addUpdatedAt(builder: FlatBufferBuilder, updatedAt: Int) = builder.addOffset(31, updatedAt, 0)
        fun addUpdatedBy(builder: FlatBufferBuilder, updatedBy: Int) = builder.addOffset(32, updatedBy, 0)
        fun addSource(builder: FlatBufferBuilder, source: Int) = builder.addOffset(33, source, 0)
        fun addSourceDL(builder: FlatBufferBuilder, sourceDl: Int) = builder.addOffset(34, sourceDl, 0)
        fun addOrigin(builder: FlatBufferBuilder, origin: Int) = builder.addOffset(35, origin, 0)
        fun addDataMode(builder: FlatBufferBuilder, dataMode: Byte) = builder.addByte(36, dataMode, 0)
        fun addOrigNetwork(builder: FlatBufferBuilder, origNetwork: Int) = builder.addOffset(37, origNetwork, 0)
        fun endVessel_Full(builder: FlatBufferBuilder) : Int {
            val o = builder.endTable()
            return o
        }
        fun finishVesselFullBuffer(builder: FlatBufferBuilder, offset: Int) = builder.finish(offset, "VESS")
        fun finishSizePrefixedVessel_FullBuffer(builder: FlatBufferBuilder, offset: Int) = builder.finishSizePrefixed(offset, "VESS")
    }
}
