// automatically generated by the FlatBuffers compiler, do not modify

import com.google.flatbuffers.BaseVector
import com.google.flatbuffers.BooleanVector
import com.google.flatbuffers.ByteVector
import com.google.flatbuffers.Constants
import com.google.flatbuffers.DoubleVector
import com.google.flatbuffers.FlatBufferBuilder
import com.google.flatbuffers.FloatVector
import com.google.flatbuffers.LongVector
import com.google.flatbuffers.StringVector
import com.google.flatbuffers.Struct
import com.google.flatbuffers.Table
import com.google.flatbuffers.UnionVector
import java.nio.ByteBuffer
import java.nio.ByteOrder
import kotlin.math.sign

/**
 * /// Model representation of launch vehicle details and characteristics, compiled by a particular source. A vehicle may have multiple details records from various sources.
 */
@Suppress("unused")
class LaunchVehicleDetails_Abridged : Table() {

    fun __init(_i: Int, _bb: ByteBuffer)  {
        __reset(_i, _bb)
    }
    fun __assign(_i: Int, _bb: ByteBuffer) : LaunchVehicleDetails_Abridged {
        __init(_i, _bb)
        return this
    }
    /**
     * Unique identifier of the record, auto-generated by the system.
     * Example: /// Example: LAUNCHVEHICLEDETAILS-ID
     * Constraints: Minimum length = 1, Maximum length = 36
     */
    val id : String?
        get() {
            val o = __offset(4)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val idAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(4, 1)
    fun idInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 4, 1)
    /**
     * Identifier of the parent launch vehicle record.
     * Example: /// Example: LAUNCHVEHICLE-ID
     * Constraints: Minimum length = 1, Maximum length = 36
     */
    val idLaunchVehicle : String?
        get() {
            val o = __offset(6)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val idLaunchVehicleAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(6, 1)
    fun idLaunchVehicleInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 6, 1)
    /**
     * Classification marking of the data in IC/CAPCO Portion-marked format.
     * Example: /// Example: U
     * Constraints: Minimum length = 1, Maximum length = 128
     */
    val classificationMarking : String?
        get() {
            val o = __offset(8)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val classificationMarkingAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(8, 1)
    fun classificationMarkingInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 8, 1)
    /**
     * Vehicle variant.
     * Example: /// Example: Example-variant
     * Constraints: Minimum length = 0, Maximum length = 64
     */
    val variant : String?
        get() {
            val o = __offset(10)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val variantAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(10, 1)
    fun variantInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 10, 1)
    /**
     * Vehicle minor variant.
     * Example: /// Example: Example-minor-variant
     * Constraints: Minimum length = 0, Maximum length = 64
     */
    val minorVariant : String?
        get() {
            val o = __offset(12)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val minorVariantAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(12, 1)
    fun minorVariantInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 12, 1)
    /**
     * Vehicle category.
     * Example: /// Example: Example-category
     * Constraints: Minimum length = 0, Maximum length = 64
     */
    val category : String?
        get() {
            val o = __offset(14)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val categoryAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(14, 1)
    fun categoryInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 14, 1)
    /**
     * ID of the organization that manufactures the launch vehicle.
     * Example: /// Example: MANUFACTURERORG-ID
     * Constraints: Minimum length = 0, Maximum length = 36
     */
    val manufacturerOrgId : String?
        get() {
            val o = __offset(16)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val manufacturerOrgIdAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(16, 1)
    fun manufacturerOrgIdInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 16, 1)
    /**
     * Vehicle launch prefix.
     * Example: /// Example: AX011
     * Constraints: Minimum length = 0, Maximum length = 8
     */
    val launchPrefix : String?
        get() {
            val o = __offset(18)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val launchPrefixAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(18, 1)
    fun launchPrefixInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 18, 1)
    /**
     * Vehicle family.
     * Example: /// Example: Example-family
     * Constraints: Minimum length = 0, Maximum length = 64
     */
    val family : String?
        get() {
            val o = __offset(20)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val familyAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(20, 1)
    fun familyInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 20, 1)
    /**
     * Propellant type.
     * Example: /// Example: Nitrogen
     * Constraints: Minimum length = 0, Maximum length = 64
     */
    val propellant : String?
        get() {
            val o = __offset(22)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val propellantAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(22, 1)
    fun propellantInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 22, 1)
    /**
     * Oxidizer type.
     * Example: /// Example: Bromine
     * Constraints: Minimum length = 0, Maximum length = 64
     */
    val oxidizer : String?
        get() {
            val o = __offset(24)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val oxidizerAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(24, 1)
    fun oxidizerInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 24, 1)
    /**
     * Vehicle length in meters.
     * Example: /// Example: 10.23
     * Constraints: No constraints specified.
     */
    val length : Double
        get() {
            val o = __offset(26)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Vehicle diameter in meters.
     * Example: /// Example: 10.23
     * Constraints: No constraints specified.
     */
    val diameter : Double
        get() {
            val o = __offset(28)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Vehicle total mass at launch time in kg (including all boosters).
     * Example: /// Example: 10.23
     * Constraints: No constraints specified.
     */
    val launchMass : Double
        get() {
            val o = __offset(30)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Maximum vehicle payload mass to GEO orbit in kg.
     * Example: /// Example: 10.23
     * Constraints: No constraints specified.
     */
    val geoPayloadMass : Double
        get() {
            val o = __offset(32)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Max vehicle payload mass to Geo-Transfer Orbit in kg.
     * Example: /// Example: 10.23
     * Constraints: No constraints specified.
     */
    val gtoPayloadMass : Double
        get() {
            val o = __offset(34)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Max vehicle payload mass to LEO orbit in kg.
     * Example: /// Example: 10.23
     * Constraints: No constraints specified.
     */
    val leoPayloadMass : Double
        get() {
            val o = __offset(36)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Max vehicle payload mass to Sun-Synchronous Orbit in kg.
     * Example: /// Example: 10.23
     * Constraints: No constraints specified.
     */
    val ssoPayloadMass : Double
        get() {
            val o = __offset(38)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Vehicle fairing length in meters.
     * Example: /// Example: 10.23
     * Constraints: No constraints specified.
     */
    val fairingLength : Double
        get() {
            val o = __offset(40)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Name of the fairing.
     * Example: /// Example: Example-fairing-name
     * Constraints: Minimum length = 0, Maximum length = 64
     */
    val fairingName : String?
        get() {
            val o = __offset(42)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val fairingNameAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(42, 1)
    fun fairingNameInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 42, 1)
    /**
     * Vehicle fairing maximum external diameter in meters.
     * Example: /// Example: 10.23
     * Constraints: No constraints specified.
     */
    val fairingExternalDiameter : Double
        get() {
            val o = __offset(44)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Vehicle fairing maximum internal diameter in meters.
     * Example: /// Example: 10.23
     * Constraints: No constraints specified.
     */
    val fairingInternalDiameter : Double
        get() {
            val o = __offset(46)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Vehicle fairing mass in kg.
     * Example: /// Example: 10.23
     * Constraints: No constraints specified.
     */
    val fairingMass : Double
        get() {
            val o = __offset(48)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Fairing material.
     * Example: /// Example: Example-fairing-material
     * Constraints: Minimum length = 0, Maximum length = 64
     */
    val fairingMaterial : String?
        get() {
            val o = __offset(50)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val fairingMaterialAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(50, 1)
    fun fairingMaterialInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 50, 1)
    /**
     * Vehicle maximum acceleration load in g.
     * Example: /// Example: 10.23
     * Constraints: No constraints specified.
     */
    val maxAccelLoad : Double
        get() {
            val o = __offset(52)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Vehicle maximum payload lateral frequency in Hz.
     * Example: /// Example: 10.23
     * Constraints: No constraints specified.
     */
    val maxPayloadFreqLat : Double
        get() {
            val o = __offset(54)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Vehicle maximum payload longitudinal frequency in Hz.
     * Example: /// Example: 10.23
     * Constraints: No constraints specified.
     */
    val maxPayloadFreqLon : Double
        get() {
            val o = __offset(56)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Vehicle maximum acoustic level in dB.
     * Example: /// Example: 10.23
     * Constraints: No constraints specified.
     */
    val maxAcousticLevel : Double
        get() {
            val o = __offset(58)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Vehicle maximum acoustic level range in Hz.
     * Example: /// Example: 10.23
     * Constraints: No constraints specified.
     */
    val maxAcousticLevelRange : Double
        get() {
            val o = __offset(60)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Vehicle overall sound pressure level in dB.
     * Example: /// Example: 10.23
     * Constraints: No constraints specified.
     */
    val soundPressureLevel : Double
        get() {
            val o = __offset(62)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Vehicle maximum flight shock force in g.
     * Example: /// Example: 10.23
     * Constraints: No constraints specified.
     */
    val maxFlightShockForce : Double
        get() {
            val o = __offset(64)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Vehicle maximum flight shock frequency in Hz.
     * Example: /// Example: 10.23
     * Constraints: No constraints specified.
     */
    val maxFlightShockFreq : Double
        get() {
            val o = __offset(66)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Vehicle fairing maximum pressure change in kPa/sec.
     * Example: /// Example: 10.23
     * Constraints: No constraints specified.
     */
    val maxFairingPressureChange : Double
        get() {
            val o = __offset(68)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Launch vehicle estimated launch price in US dollars.
     * Example: /// Example: 10.23
     * Constraints: No constraints specified.
     */
    val estLaunchPrice : Double
        get() {
            val o = __offset(70)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Launch vehicle typical estimated launch price in US dollars.
     * Example: /// Example: 10.23
     * Constraints: No constraints specified.
     */
    val estLaunchPriceTypical : Double
        get() {
            val o = __offset(72)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Launch vehicle GTO Injection 3 Sigma Accuracy Apogee Target (degrees).
     * Example: /// Example: 10.23
     * Constraints: No constraints specified.
     */
    val gtoInj3SigAccuracyApogeeTarget : Double
        get() {
            val o = __offset(74)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Launch vehicle GTO Injection 3 Sigma Accuracy Apogee Margin (degrees).
     * Example: /// Example: 10.23
     * Constraints: No constraints specified.
     */
    val gtoInj3SigAccuracyApogeeMargin : Double
        get() {
            val o = __offset(76)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Launch vehicle GTO Injection 3 Sigma Accuracy Perigee Target (degrees).
     * Example: /// Example: 10.23
     * Constraints: No constraints specified.
     */
    val gtoInj3SigAccuracyPerigeeTarget : Double
        get() {
            val o = __offset(78)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Launch vehicle GTO Injection 3 Sigma Accuracy Perigee Margin (degrees).
     * Example: /// Example: 10.23
     * Constraints: No constraints specified.
     */
    val gtoInj3SigAccuracyPerigeeMargin : Double
        get() {
            val o = __offset(80)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Launch vehicle GTO Injection 3 Sigma Accuracy Inclination Target (degrees).
     * Example: /// Example: 10.23
     * Constraints: No constraints specified.
     */
    val gtoInj3SigAccuracyInclinationTarget : Double
        get() {
            val o = __offset(82)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Launch vehicle GTO Injection 3 Sigma Accuracy Inclination Margin (degrees).
     * Example: /// Example: 10.23
     * Constraints: No constraints specified.
     */
    val gtoInj3SigAccuracyInclinationMargin : Double
        get() {
            val o = __offset(84)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Launch vehicle attitude accuracy (degrees).
     * Example: /// Example: 10.23
     * Constraints: No constraints specified.
     */
    val attitudeAccuracy : Double
        get() {
            val o = __offset(86)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Launch vehicle payload separation rate in m/s.
     * Example: /// Example: 10.23
     * Constraints: No constraints specified.
     */
    val payloadSeparationRate : Double
        get() {
            val o = __offset(88)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Launch vehicle deployment rotation rate in RPM.
     * Example: /// Example: 10.23
     * Constraints: No constraints specified.
     */
    val deploymentRotationRate : Double
        get() {
            val o = __offset(90)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Optional URL for additional information on the vehicle.
     * Example: /// Example: Example URL
     * Constraints: Minimum length = 0, Maximum length = 256
     */
    val sourceUrl : String?
        get() {
            val o = __offset(92)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val sourceUrlAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(92, 1)
    fun sourceUrlInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 92, 1)
    /**
     * Notes/Description of the launch vehicle.
     * Example: /// Example: Example notes
     * Constraints: Minimum length = 0, Maximum length = 512
     */
    val notes : String?
        get() {
            val o = __offset(94)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val notesAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(94, 1)
    fun notesInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 94, 1)
    /**
     * Notes/Description of the launch vehicle fairing.
     * Example: /// Example: Example notes
     * Constraints: Minimum length = 0, Maximum length = 512
     */
    val fairingNotes : String?
        get() {
            val o = __offset(96)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val fairingNotesAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(96, 1)
    fun fairingNotesInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 96, 1)
    /**
     * Notes/Description of the launch vehicle payload.
     * Example: /// Example: Example notes
     * Constraints: Minimum length = 0, Maximum length = 512
     */
    val payloadNotes : String?
        get() {
            val o = __offset(98)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val payloadNotesAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(98, 1)
    fun payloadNotesInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 98, 1)
    /**
     * Time the row was created in the database, auto-populated by the system.
     * Example: /// Example: 2018-01-01T16:00:00.123Z
     * Constraints: No constraints specified.
     */
    val createdAt : String?
        get() {
            val o = __offset(100)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val createdAtAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(100, 1)
    fun createdAtInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 100, 1)
    /**
     * Application user who created the row in the database, auto-populated by the system.
     * Example: /// Example: some.user
     * Constraints: Minimum length = 1, Maximum length = 64
     */
    val createdBy : String?
        get() {
            val o = __offset(102)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val createdByAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(102, 1)
    fun createdByInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 102, 1)
    /**
     * Source of the data.
     * Example: /// Example: Bluestaq
     * Constraints: Minimum length = 1, Maximum length = 64
     */
    val source : String?
        get() {
            val o = __offset(104)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val sourceAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(104, 1)
    fun sourceInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 104, 1)
    /**
     * Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
     * Example: /// Example: THIRD_PARTY_DATASOURCE
     * Constraints: Minimum length = 0, Maximum length = 64
     */
    val origin : String?
        get() {
            val o = __offset(106)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val originAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(106, 1)
    fun originInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 106, 1)
    /**
     * The originating source network on which this record was created, auto-populated by the system.
     * Example: /// Example: ORIG
     * Constraints: Minimum length = 1, Maximum length = 32
     */
    val origNetwork : String?
        get() {
            val o = __offset(108)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val origNetworkAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(108, 1)
    fun origNetworkInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 108, 1)
    /**
     * Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
     * EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
     * REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
     * SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
     * TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
     * Example: /// Example: TEST
     * Constraints: Minimum length = 1, Maximum length = 32
     */
    val dataMode : Byte
        get() {
            val o = __offset(110)
            return if(o != 0) bb.get(o + bb_pos) else 0
        }
    companion object {
        fun validateVersion() = Constants.FLATBUFFERS_24_3_25()
        fun getRootAsLaunchVehicleDetails_Abridged(_bb: ByteBuffer): LaunchVehicleDetails_Abridged = getRootAsLaunchVehicleDetails_Abridged(_bb, LaunchVehicleDetails_Abridged())
        fun getRootAsLaunchVehicleDetails_Abridged(_bb: ByteBuffer, obj: LaunchVehicleDetails_Abridged): LaunchVehicleDetails_Abridged {
            _bb.order(ByteOrder.LITTLE_ENDIAN)
            return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb))
        }
        fun LaunchVehicleDetails_AbridgedBufferHasIdentifier(_bb: ByteBuffer) : Boolean = __has_identifier(_bb, "LAUN")
        fun createLaunchVehicleDetails_Abridged(builder: FlatBufferBuilder, idOffset: Int, idLaunchVehicleOffset: Int, classificationMarkingOffset: Int, variantOffset: Int, minorVariantOffset: Int, categoryOffset: Int, manufacturerOrgIdOffset: Int, launchPrefixOffset: Int, familyOffset: Int, propellantOffset: Int, oxidizerOffset: Int, length: Double, diameter: Double, launchMass: Double, geoPayloadMass: Double, gtoPayloadMass: Double, leoPayloadMass: Double, ssoPayloadMass: Double, fairingLength: Double, fairingNameOffset: Int, fairingExternalDiameter: Double, fairingInternalDiameter: Double, fairingMass: Double, fairingMaterialOffset: Int, maxAccelLoad: Double, maxPayloadFreqLat: Double, maxPayloadFreqLon: Double, maxAcousticLevel: Double, maxAcousticLevelRange: Double, soundPressureLevel: Double, maxFlightShockForce: Double, maxFlightShockFreq: Double, maxFairingPressureChange: Double, estLaunchPrice: Double, estLaunchPriceTypical: Double, gtoInj3SigAccuracyApogeeTarget: Double, gtoInj3SigAccuracyApogeeMargin: Double, gtoInj3SigAccuracyPerigeeTarget: Double, gtoInj3SigAccuracyPerigeeMargin: Double, gtoInj3SigAccuracyInclinationTarget: Double, gtoInj3SigAccuracyInclinationMargin: Double, attitudeAccuracy: Double, payloadSeparationRate: Double, deploymentRotationRate: Double, sourceUrlOffset: Int, notesOffset: Int, fairingNotesOffset: Int, payloadNotesOffset: Int, createdAtOffset: Int, createdByOffset: Int, sourceOffset: Int, originOffset: Int, origNetworkOffset: Int, dataMode: Byte) : Int {
            builder.startTable(54)
            addDeploymentRotationRate(builder, deploymentRotationRate)
            addPayloadSeparationRate(builder, payloadSeparationRate)
            addAttitudeAccuracy(builder, attitudeAccuracy)
            addGtoInj3SigAccuracyInclinationMargin(builder, gtoInj3SigAccuracyInclinationMargin)
            addGtoInj3SigAccuracyInclinationTarget(builder, gtoInj3SigAccuracyInclinationTarget)
            addGtoInj3SigAccuracyPerigeeMargin(builder, gtoInj3SigAccuracyPerigeeMargin)
            addGtoInj3SigAccuracyPerigeeTarget(builder, gtoInj3SigAccuracyPerigeeTarget)
            addGtoInj3SigAccuracyApogeeMargin(builder, gtoInj3SigAccuracyApogeeMargin)
            addGtoInj3SigAccuracyApogeeTarget(builder, gtoInj3SigAccuracyApogeeTarget)
            addEstLaunchPriceTypical(builder, estLaunchPriceTypical)
            addEstLaunchPrice(builder, estLaunchPrice)
            addMaxFairingPressureChange(builder, maxFairingPressureChange)
            addMaxFlightShockFreq(builder, maxFlightShockFreq)
            addMaxFlightShockForce(builder, maxFlightShockForce)
            addSoundPressureLevel(builder, soundPressureLevel)
            addMaxAcousticLevelRange(builder, maxAcousticLevelRange)
            addMaxAcousticLevel(builder, maxAcousticLevel)
            addMaxPayloadFreqLon(builder, maxPayloadFreqLon)
            addMaxPayloadFreqLat(builder, maxPayloadFreqLat)
            addMaxAccelLoad(builder, maxAccelLoad)
            addFairingMass(builder, fairingMass)
            addFairingInternalDiameter(builder, fairingInternalDiameter)
            addFairingExternalDiameter(builder, fairingExternalDiameter)
            addFairingLength(builder, fairingLength)
            addSsoPayloadMass(builder, ssoPayloadMass)
            addLeoPayloadMass(builder, leoPayloadMass)
            addGtoPayloadMass(builder, gtoPayloadMass)
            addGeoPayloadMass(builder, geoPayloadMass)
            addLaunchMass(builder, launchMass)
            addDiameter(builder, diameter)
            addLength(builder, length)
            addOrigNetwork(builder, origNetworkOffset)
            addOrigin(builder, originOffset)
            addSource(builder, sourceOffset)
            addCreatedBy(builder, createdByOffset)
            addCreatedAt(builder, createdAtOffset)
            addPayloadNotes(builder, payloadNotesOffset)
            addFairingNotes(builder, fairingNotesOffset)
            addNotes(builder, notesOffset)
            addSourceURL(builder, sourceUrlOffset)
            addFairingMaterial(builder, fairingMaterialOffset)
            addFairingName(builder, fairingNameOffset)
            addOxidizer(builder, oxidizerOffset)
            addPropellant(builder, propellantOffset)
            addFamily(builder, familyOffset)
            addLaunchPrefix(builder, launchPrefixOffset)
            addManufacturerOrgId(builder, manufacturerOrgIdOffset)
            addCategory(builder, categoryOffset)
            addMinorVariant(builder, minorVariantOffset)
            addVariant(builder, variantOffset)
            addClassificationMarking(builder, classificationMarkingOffset)
            addIdLaunchVehicle(builder, idLaunchVehicleOffset)
            addId(builder, idOffset)
            addDataMode(builder, dataMode)
            return endLaunchVehicleDetails_Abridged(builder)
        }
        fun startLaunchVehicleDetails_Abridged(builder: FlatBufferBuilder) = builder.startTable(54)
        fun addId(builder: FlatBufferBuilder, id: Int) = builder.addOffset(0, id, 0)
        fun addIdLaunchVehicle(builder: FlatBufferBuilder, idLaunchVehicle: Int) = builder.addOffset(1, idLaunchVehicle, 0)
        fun addClassificationMarking(builder: FlatBufferBuilder, classificationMarking: Int) = builder.addOffset(2, classificationMarking, 0)
        fun addVariant(builder: FlatBufferBuilder, variant: Int) = builder.addOffset(3, variant, 0)
        fun addMinorVariant(builder: FlatBufferBuilder, minorVariant: Int) = builder.addOffset(4, minorVariant, 0)
        fun addCategory(builder: FlatBufferBuilder, category: Int) = builder.addOffset(5, category, 0)
        fun addManufacturerOrgId(builder: FlatBufferBuilder, manufacturerOrgId: Int) = builder.addOffset(6, manufacturerOrgId, 0)
        fun addLaunchPrefix(builder: FlatBufferBuilder, launchPrefix: Int) = builder.addOffset(7, launchPrefix, 0)
        fun addFamily(builder: FlatBufferBuilder, family: Int) = builder.addOffset(8, family, 0)
        fun addPropellant(builder: FlatBufferBuilder, propellant: Int) = builder.addOffset(9, propellant, 0)
        fun addOxidizer(builder: FlatBufferBuilder, oxidizer: Int) = builder.addOffset(10, oxidizer, 0)
        fun addLength(builder: FlatBufferBuilder, length: Double) = builder.addDouble(11, length, 0.0)
        fun addDiameter(builder: FlatBufferBuilder, diameter: Double) = builder.addDouble(12, diameter, 0.0)
        fun addLaunchMass(builder: FlatBufferBuilder, launchMass: Double) = builder.addDouble(13, launchMass, 0.0)
        fun addGeoPayloadMass(builder: FlatBufferBuilder, geoPayloadMass: Double) = builder.addDouble(14, geoPayloadMass, 0.0)
        fun addGtoPayloadMass(builder: FlatBufferBuilder, gtoPayloadMass: Double) = builder.addDouble(15, gtoPayloadMass, 0.0)
        fun addLeoPayloadMass(builder: FlatBufferBuilder, leoPayloadMass: Double) = builder.addDouble(16, leoPayloadMass, 0.0)
        fun addSsoPayloadMass(builder: FlatBufferBuilder, ssoPayloadMass: Double) = builder.addDouble(17, ssoPayloadMass, 0.0)
        fun addFairingLength(builder: FlatBufferBuilder, fairingLength: Double) = builder.addDouble(18, fairingLength, 0.0)
        fun addFairingName(builder: FlatBufferBuilder, fairingName: Int) = builder.addOffset(19, fairingName, 0)
        fun addFairingExternalDiameter(builder: FlatBufferBuilder, fairingExternalDiameter: Double) = builder.addDouble(20, fairingExternalDiameter, 0.0)
        fun addFairingInternalDiameter(builder: FlatBufferBuilder, fairingInternalDiameter: Double) = builder.addDouble(21, fairingInternalDiameter, 0.0)
        fun addFairingMass(builder: FlatBufferBuilder, fairingMass: Double) = builder.addDouble(22, fairingMass, 0.0)
        fun addFairingMaterial(builder: FlatBufferBuilder, fairingMaterial: Int) = builder.addOffset(23, fairingMaterial, 0)
        fun addMaxAccelLoad(builder: FlatBufferBuilder, maxAccelLoad: Double) = builder.addDouble(24, maxAccelLoad, 0.0)
        fun addMaxPayloadFreqLat(builder: FlatBufferBuilder, maxPayloadFreqLat: Double) = builder.addDouble(25, maxPayloadFreqLat, 0.0)
        fun addMaxPayloadFreqLon(builder: FlatBufferBuilder, maxPayloadFreqLon: Double) = builder.addDouble(26, maxPayloadFreqLon, 0.0)
        fun addMaxAcousticLevel(builder: FlatBufferBuilder, maxAcousticLevel: Double) = builder.addDouble(27, maxAcousticLevel, 0.0)
        fun addMaxAcousticLevelRange(builder: FlatBufferBuilder, maxAcousticLevelRange: Double) = builder.addDouble(28, maxAcousticLevelRange, 0.0)
        fun addSoundPressureLevel(builder: FlatBufferBuilder, soundPressureLevel: Double) = builder.addDouble(29, soundPressureLevel, 0.0)
        fun addMaxFlightShockForce(builder: FlatBufferBuilder, maxFlightShockForce: Double) = builder.addDouble(30, maxFlightShockForce, 0.0)
        fun addMaxFlightShockFreq(builder: FlatBufferBuilder, maxFlightShockFreq: Double) = builder.addDouble(31, maxFlightShockFreq, 0.0)
        fun addMaxFairingPressureChange(builder: FlatBufferBuilder, maxFairingPressureChange: Double) = builder.addDouble(32, maxFairingPressureChange, 0.0)
        fun addEstLaunchPrice(builder: FlatBufferBuilder, estLaunchPrice: Double) = builder.addDouble(33, estLaunchPrice, 0.0)
        fun addEstLaunchPriceTypical(builder: FlatBufferBuilder, estLaunchPriceTypical: Double) = builder.addDouble(34, estLaunchPriceTypical, 0.0)
        fun addGtoInj3SigAccuracyApogeeTarget(builder: FlatBufferBuilder, gtoInj3SigAccuracyApogeeTarget: Double) = builder.addDouble(35, gtoInj3SigAccuracyApogeeTarget, 0.0)
        fun addGtoInj3SigAccuracyApogeeMargin(builder: FlatBufferBuilder, gtoInj3SigAccuracyApogeeMargin: Double) = builder.addDouble(36, gtoInj3SigAccuracyApogeeMargin, 0.0)
        fun addGtoInj3SigAccuracyPerigeeTarget(builder: FlatBufferBuilder, gtoInj3SigAccuracyPerigeeTarget: Double) = builder.addDouble(37, gtoInj3SigAccuracyPerigeeTarget, 0.0)
        fun addGtoInj3SigAccuracyPerigeeMargin(builder: FlatBufferBuilder, gtoInj3SigAccuracyPerigeeMargin: Double) = builder.addDouble(38, gtoInj3SigAccuracyPerigeeMargin, 0.0)
        fun addGtoInj3SigAccuracyInclinationTarget(builder: FlatBufferBuilder, gtoInj3SigAccuracyInclinationTarget: Double) = builder.addDouble(39, gtoInj3SigAccuracyInclinationTarget, 0.0)
        fun addGtoInj3SigAccuracyInclinationMargin(builder: FlatBufferBuilder, gtoInj3SigAccuracyInclinationMargin: Double) = builder.addDouble(40, gtoInj3SigAccuracyInclinationMargin, 0.0)
        fun addAttitudeAccuracy(builder: FlatBufferBuilder, attitudeAccuracy: Double) = builder.addDouble(41, attitudeAccuracy, 0.0)
        fun addPayloadSeparationRate(builder: FlatBufferBuilder, payloadSeparationRate: Double) = builder.addDouble(42, payloadSeparationRate, 0.0)
        fun addDeploymentRotationRate(builder: FlatBufferBuilder, deploymentRotationRate: Double) = builder.addDouble(43, deploymentRotationRate, 0.0)
        fun addSourceURL(builder: FlatBufferBuilder, sourceUrl: Int) = builder.addOffset(44, sourceUrl, 0)
        fun addNotes(builder: FlatBufferBuilder, notes: Int) = builder.addOffset(45, notes, 0)
        fun addFairingNotes(builder: FlatBufferBuilder, fairingNotes: Int) = builder.addOffset(46, fairingNotes, 0)
        fun addPayloadNotes(builder: FlatBufferBuilder, payloadNotes: Int) = builder.addOffset(47, payloadNotes, 0)
        fun addCreatedAt(builder: FlatBufferBuilder, createdAt: Int) = builder.addOffset(48, createdAt, 0)
        fun addCreatedBy(builder: FlatBufferBuilder, createdBy: Int) = builder.addOffset(49, createdBy, 0)
        fun addSource(builder: FlatBufferBuilder, source: Int) = builder.addOffset(50, source, 0)
        fun addOrigin(builder: FlatBufferBuilder, origin: Int) = builder.addOffset(51, origin, 0)
        fun addOrigNetwork(builder: FlatBufferBuilder, origNetwork: Int) = builder.addOffset(52, origNetwork, 0)
        fun addDataMode(builder: FlatBufferBuilder, dataMode: Byte) = builder.addByte(53, dataMode, 0)
        fun endLaunchVehicleDetails_Abridged(builder: FlatBufferBuilder) : Int {
            val o = builder.endTable()
            return o
        }
        fun finishLaunchVehicleDetailsAbridgedBuffer(builder: FlatBufferBuilder, offset: Int) = builder.finish(offset, "LAUN")
        fun finishSizePrefixedLaunchVehicleDetails_AbridgedBuffer(builder: FlatBufferBuilder, offset: Int) = builder.finishSizePrefixed(offset, "LAUN")
    }
}
