// automatically generated by the FlatBuffers compiler, do not modify

import com.google.flatbuffers.BaseVector
import com.google.flatbuffers.BooleanVector
import com.google.flatbuffers.ByteVector
import com.google.flatbuffers.Constants
import com.google.flatbuffers.DoubleVector
import com.google.flatbuffers.FlatBufferBuilder
import com.google.flatbuffers.FloatVector
import com.google.flatbuffers.LongVector
import com.google.flatbuffers.StringVector
import com.google.flatbuffers.Struct
import com.google.flatbuffers.Table
import com.google.flatbuffers.UnionVector
import java.nio.ByteBuffer
import java.nio.ByteOrder
import kotlin.math.sign

/**
 * /// Model representation of a unit or organization which operates or controls an space-related Entity such as an on-orbit payload, a sensor, etc.  A contact may belong to an organization.
 */
@Suppress("unused")
class Operatingunit_Ingest : Table() {

    fun __init(_i: Int, _bb: ByteBuffer)  {
        __reset(_i, _bb)
    }
    fun __assign(_i: Int, _bb: ByteBuffer) : Operatingunit_Ingest {
        __init(_i, _bb)
        return this
    }
    /**
     * Unique identifier of the record, auto-generated by the system.
     * Example: /// Example: OPERATINGUNIT-ID
     * Constraints: Minimum length = 1, Maximum length = 36
     */
    val idOperatingUnit : String?
        get() {
            val o = __offset(4)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val idOperatingUnitAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(4, 1)
    fun idOperatingUnitInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 4, 1)
    /**
     * Classification marking of the data in IC/CAPCO Portion-marked format.
     * Example: /// Example: U
     * Constraints: Minimum length = 1, Maximum length = 128
     */
    val classificationMarking : String?
        get() {
            val o = __offset(6)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val classificationMarkingAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(6, 1)
    fun classificationMarkingInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 6, 1)
    /**
     * Unique identifier of the operating unit record from the originating system.
     * Example: /// Example: 32100000000021
     * Constraints: Minimum length = 0, Maximum length = 36
     */
    val altOperatingUnitId : String?
        get() {
            val o = __offset(8)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val altOperatingUnitIdAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(8, 1)
    fun altOperatingUnitIdInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 8, 1)
    /**
     * Name of the operating unit.
     * Example: /// Example: SOME_NAME
     * Constraints: Minimum length = 1, Maximum length = 128
     */
    val name : String?
        get() {
            val o = __offset(10)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val nameAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(10, 1)
    fun nameInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 10, 1)
    /**
     * Description of the operating unit.
     * Example: /// Example: Description of unit
     * Constraints: Minimum length = 0, Maximum length = 256
     */
    val description : String?
        get() {
            val o = __offset(12)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val descriptionAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(12, 1)
    fun descriptionInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 12, 1)
    /**
     * Unique identifier of the location record for this operating unit.
     * Example: /// Example: LOCATION-ID
     * Constraints: Minimum length = 0, Maximum length = 36
     */
    val idLocation : String?
        get() {
            val o = __offset(14)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val idLocationAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(14, 1)
    fun idLocationInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 14, 1)
    /**
     * Unique identifier of the contact for this operating unit.
     * Example: /// Example: CONTACT-ID
     * Constraints: Minimum length = 0, Maximum length = 36
     */
    val idContact : String?
        get() {
            val o = __offset(16)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val idContactAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(16, 1)
    fun idContactInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 16, 1)
    /**
     * Unique identifier of the organization record for this operating unit.
     * Example: /// Example: ORGANIZATION-ID
     * Constraints: Minimum length = 0, Maximum length = 36
     */
    val idOrganization : String?
        get() {
            val o = __offset(18)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val idOrganizationAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(18, 1)
    fun idOrganizationInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 18, 1)
    /**
     * An optional identifier for this operating unit that may be composed from items such as the originating organization, allegiance, one-up number, etc.
     * Example: /// Example: AZXAZ12345
     * Constraints: Minimum length = 0, Maximum length = 10
     */
    val unitIdentifier : String?
        get() {
            val o = __offset(20)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val unitIdentifierAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(20, 1)
    fun unitIdentifierInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 20, 1)
    /**
     * The DoD Standard country code designator for the country or political entity to which the operating unit geographic coordinates reside . This field will be set to "OTHR" if the source value does not match a UDL country code value (ISO-3166-ALPHA-2).
     * Example: /// Example: IQ
     * Constraints: Minimum length = 0, Maximum length = 4
     */
    val countryCode : String?
        get() {
            val o = __offset(22)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val countryCodeAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(22, 1)
    fun countryCodeInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 22, 1)
    /**
     * Specifies an alternate country code if the data provider code is not part of an official Country Code standard such as ISO-3166 or FIPS. This field will be set to the value provided by the source and should be used for all Queries specifying a Country Code.
     * Example: /// Example: IZ
     * Constraints: Minimum length = 0, Maximum length = 4
     */
    val altCountryCode : String?
        get() {
            val o = __offset(24)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val altCountryCodeAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(24, 1)
    fun altCountryCodeInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 24, 1)
    /**
     * World Aeronautical Chart identifier for the area in which a designated operating unit is located.
     * Example: /// Example: 0427
     * Constraints: Minimum length = 0, Maximum length = 4
     */
    val wac : String?
        get() {
            val o = __offset(26)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val wacAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(26, 1)
    fun wacInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 26, 1)
    /**
     * The Degree to which an operating unit is ready to perform the overall operational mission(s) for which it was organized and equipped.  The specific usage and enumerations contained in this field may be found in the documentation provided in the referenceDoc field.  If referenceDoc not provided, users may consult the data provider.
     * Example: /// Example: OPR
     * Constraints: Minimum length = 0, Maximum length = 3
     */
    val operStatus : String?
        get() {
            val o = __offset(28)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val operStatusAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(28, 1)
    fun operStatusInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 28, 1)
    /**
     * The physical manner of being or state of existence of the operating unit.  A physical condition that must be considered in the determining of a course of action.  The specific usage and enumerations contained in this field may be found in the documentation provided in the referenceDoc field.  If referenceDoc not provided, users may consult the data provider.
     * Example: /// Example: RDY
     * Constraints: Minimum length = 0, Maximum length = 4
     */
    val condition : String?
        get() {
            val o = __offset(30)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val conditionAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(30, 1)
    fun conditionInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 30, 1)
    /**
     * Availability of the operating unit relative to its condition.  Indicates the reason the operating unit is not fully operational.  The specific usage and enumerations contained in this field may be found in the documentation provided in the referenceDoc field.  If referenceDoc not provided, users may consult the data provider.
     * Example: /// Example: A
     * Constraints: Minimum length = 0, Maximum length = 4
     */
    val conditionAvail : String?
        get() {
            val o = __offset(32)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val conditionAvailAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(32, 1)
    fun conditionAvailInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 32, 1)
    /**
     * The Intelligence Confidence Level or the Reliability/degree of confidence that the analyst has assigned to the data within this record. The numerical range is from 1 to 9 with 1 representing the highest confidence level.
     * Example: /// Example: 7
     * Constraints: No constraints specified.
     */
    val eval : Int
        get() {
            val o = __offset(34)
            return if(o != 0) bb.getInt(o + bb_pos) else 0
        }
    /**
     * Functional Production Area (FPA) under the Shared Production Program (SPP). Producers are defined per country per FPA.  The specific usage and enumerations contained in this field may be found in the documentation provided in the referenceDoc field.  If referenceDoc not provided, users may consult the data provider.
     * Example: /// Example: EOB
     * Constraints: Minimum length = 0, Maximum length = 5
     */
    val fpa : String?
        get() {
            val o = __offset(36)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val fpaAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(36, 1)
    fun fpaInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 36, 1)
    /**
     * Estimated identity of the Site (ASSUMED FRIEND, FRIEND, HOSTILE, FAKER, JOKER, NEUTRAL, PENDING, SUSPECT, UNKNOWN): 
     * ASSUMED FRIEND: Track assumed to be a friend due to the object characteristics, behavior, and/or origin.
     * FRIEND: Track object supporting friendly forces and belonging to a declared friendly nation or entity.
     * HOSTILE: Track object belonging to an opposing nation, party, group, or entity deemed to contribute to a threat to friendly forces or their mission due to its behavior, characteristics, nationality, or origin.
     * FAKER: Friendly track, object, or entity acting as an exercise hostile.
     * JOKER: Friendly track, object, or entity acting as an exercise suspect.
     * NEUTRAL: Track object whose characteristics, behavior, nationality, and/or origin indicate that it is neither supporting nor opposing friendly forces or their mission.
     * PENDING: Track object which has not been evaluated.
     * SUSPECT: Track object deemed potentially hostile due to the object characteristics, behavior, nationality, and/or origin.
     * UNKNOWN: Track object which has been evaluated and does not meet criteria for any standard identity.
     * Example: /// Example: FRIEND
     * Constraints: Minimum length = 0, Maximum length = 32
     */
    val ident : String?
        get() {
            val o = __offset(38)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val identAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(38, 1)
    fun identInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 38, 1)
    /**
     * The DoD Standard country code designator for the country or political entity to which the operating unit owes its allegiance.  This field will be set to "OTHR" if the source value does not match a UDL country code value (ISO-3166-ALPHA-2).
     * Example: /// Example: OTHR
     * Constraints: Minimum length = 0, Maximum length = 4
     */
    val allegiance : String?
        get() {
            val o = __offset(40)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val allegianceAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(40, 1)
    fun allegianceInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 40, 1)
    /**
     * Specifies an alternate allegiance code if the data provider code is not part of an official Country Code standard such as ISO-3166 or FIPS. This field will be set to the value provided by the source and should be used for all Queries specifying allegiance.
     * Example: /// Example: HL
     * Constraints: Minimum length = 0, Maximum length = 4
     */
    val altAllegiance : String?
        get() {
            val o = __offset(42)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val altAllegianceAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(42, 1)
    fun altAllegianceInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 42, 1)
    /**
     * Location name for the coordinates.
     * Example: /// Example: LOCATION_NAME
     * Constraints: Minimum length = 0, Maximum length = 54
     */
    val locName : String?
        get() {
            val o = __offset(44)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val locNameAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(44, 1)
    fun locNameInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 44, 1)
    /**
     * Indicates the reason that the operating unit is at that location.  The specific usage and enumerations contained in this field may be found in the documentation provided in the referenceDoc field.  If referenceDoc not provided, users may consult the data provider.
     * Example: /// Example: GR
     * Constraints: Minimum length = 0, Maximum length = 9
     */
    val locReason : String?
        get() {
            val o = __offset(46)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val locReasonAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(46, 1)
    fun locReasonInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 46, 1)
    /**
     * An aggregation of military units within a single service (i.e., ARMY, AIR FORCE, etc.) which operates under a single authority to accomplish a common mission. The specific usage and enumerations contained in this field may be found in the documentation provided in the referenceDoc field.  If referenceDoc not provided, users may consult the data provider.
     * Example: /// Example: NV
     * Constraints: Minimum length = 0, Maximum length = 4
     */
    val force : String?
        get() {
            val o = __offset(48)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val forceAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(48, 1)
    fun forceInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 48, 1)
    /**
     * The specific name for a given force.  For example, Force = ADF (Air Defense Force) and Force Name = Army Air Defense Force.
     * Example: /// Example: FORCE-NAME
     * Constraints: Minimum length = 0, Maximum length = 54
     */
    val forceName : String?
        get() {
            val o = __offset(50)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val forceNameAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(50, 1)
    fun forceNameInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 50, 1)
    /**
     * Principal combat-related role that an operating unit is organized, structured and equipped to perform.  Or, the specialized military or paramilitary branch in which an individual serves, their specialization.  The specific usage and enumerations contained in this field may be found in the documentation provided in the referenceDoc field.  If referenceDoc not provided, users may consult the data provider.
     * Example: /// Example: MIL
     * Constraints: Minimum length = 0, Maximum length = 3
     */
    val functRole : String?
        get() {
            val o = __offset(52)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val functRoleAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(52, 1)
    fun functRoleInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 52, 1)
    /**
     * Indicates the principal type of mission that an operating unit is organized and equipped to perform.  The specific usage and enumerations contained in this field may be found in the documentation provided in the referenceDoc field.  If referenceDoc not provided, users may consult the data provider.
     * Example: /// Example: W6
     * Constraints: Minimum length = 0, Maximum length = 4
     */
    val msnPrimary : String?
        get() {
            val o = __offset(54)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val msnPrimaryAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(54, 1)
    fun msnPrimaryInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 54, 1)
    /**
     * Indicates the principal specialty type of mission that an operating unit is organized and equipped to perform.  The specific usage and enumerations contained in this field may be found in the documentation provided in the referenceDoc field.  If referenceDoc not provided, users may consult the data provider.
     * Example: /// Example: QK
     * Constraints: Minimum length = 0, Maximum length = 4
     */
    val msnPrimarySpecialty : String?
        get() {
            val o = __offset(56)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val msnPrimarySpecialtyAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(56, 1)
    fun msnPrimarySpecialtyInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 56, 1)
    /**
     * This field contains a value indicating whether the record is a master unit record (True) or a detail record (False).  Master records contain basic information that does not change over time for each unit that has been selected to be projected.
     * Example: /// Example: True
     * Constraints: No constraints specified.
     */
    val masterUnit : Boolean
        get() {
            val o = __offset(58)
            return if(o != 0) 0.toByte() != bb.get(o + bb_pos) else false
        }
    /**
     * This field contains a value indicating whether the record is a stylized operating unit record (True) or a regular operating unit  record (False).  A stylized operating unit is a type of operating unit with one set of equipment that can be assigned to one or more superiors.  A stylized operating unit is generally useful for lower echelon operating units where the number of operating units and types of equipment are equal for multiple organizations.  In lieu of creating unique operating unit records for each operating unit, a template is created for the operating unit and its equipment.  This template enables the user to assign the operating unit to multiple organizations.
     * Example: /// Example: True
     * Constraints: No constraints specified.
     */
    val stylizedUnit : Boolean
        get() {
            val o = __offset(60)
            return if(o != 0) 0.toByte() != bb.get(o + bb_pos) else false
        }
    /**
     * Combat status of a divisional or equivalent operating unit.  Currently, this data element applies only to operating units of the Former Soviet Union.  The specific usage and enumerations contained in this field may be found in the documentation provided in the referenceDoc field.  If referenceDoc not provided, users may consult the data provider.
     * Example: /// Example: 5
     * Constraints: Minimum length = 0, Maximum length = 1
     */
    val divCat : String?
        get() {
            val o = __offset(62)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val divCatAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(62, 1)
    fun divCatInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 62, 1)
    /**
     * Organizational level of the operating unit.  The specific usage and enumerations contained in this field may be found in the documentation provided in the referenceDoc field.  If referenceDoc not provided, users may consult the data provider.
     * Example: /// Example: SHIP
     * Constraints: Minimum length = 0, Maximum length = 4
     */
    val echelon : String?
        get() {
            val o = __offset(64)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val echelonAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(64, 1)
    fun echelonInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 64, 1)
    /**
     * Indicates the major group or level to which an echelon belongs.   The specific usage and enumerations contained in this field may be found in the documentation provided in the referenceDoc field.  If referenceDoc not provided, users may consult the data provider.
     * Example: /// Example: 68
     * Constraints: Minimum length = 0, Maximum length = 2
     */
    val echelonTier : String?
        get() {
            val o = __offset(66)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val echelonTierAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(66, 1)
    fun echelonTierInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 66, 1)
    /**
     * Naval fleet to which an operating unit is assigned.   The specific usage and enumerations contained in this field may be found in the documentation provided in the referenceDoc field.  If referenceDoc not provided, users may consult the data provider.
     * Example: /// Example: A
     * Constraints: Minimum length = 0, Maximum length = 1
     */
    val fleetId : String?
        get() {
            val o = __offset(68)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val fleetIdAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(68, 1)
    fun fleetIdInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 68, 1)
    /**
     * A code describing the amount of operating unit participation in a deployment.   The specific usage and enumerations contained in this field may be found in the documentation provided in the referenceDoc field.  If referenceDoc not provided, users may consult the data provider.
     * Example: /// Example: ND
     * Constraints: Minimum length = 0, Maximum length = 2
     */
    val deployStatus : String?
        get() {
            val o = __offset(70)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val deployStatusAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(70, 1)
    fun deployStatusInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 70, 1)
    /**
     * The country code of the observed flag flown.
     * Example: /// Example: IZ
     * Constraints: Minimum length = 0, Maximum length = 4
     */
    val flagFlown : String?
        get() {
            val o = __offset(72)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val flagFlownAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(72, 1)
    fun flagFlownInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 72, 1)
    /**
     * A mathematical model of the earth used to calculate coordinates on a map.  US Forces use the World Geodetic System 1984 (WGS 84), but also use maps by allied countries with local datums.  The datum must be specified to ensure accuracy of coordinates.  The specific usage and enumerations contained in this field may be found in the documentation provided in the referenceDoc field.  If referenceDoc not provided, users may consult the data provider.
     * Example: /// Example: WGS
     * Constraints: Minimum length = 0, Maximum length = 16
     */
    val coordDatum : String?
        get() {
            val o = __offset(74)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val coordDatumAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(74, 1)
    fun coordDatumInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 74, 1)
    /**
     * "Indicates any of the magnitudes that serve to define the position of a point by reference to a fixed figure, system of lines, etc.
     * Pos. 1-2.  Latitude Degrees     [00-90]
     * Pos. 3-4.  Latitude Minutes     [00-59]
     * Pos. 5-6.  Latitude Seconds     [00-59]
     * Pos. 7-9.  Latitude Thousandths Of Seconds   [000-999]  
     * Pos. 10. Latitude Hemisphere       [NS] 
     * Pos. 11-13. Longitude Degrees     [00-180] 
     * Pos. 14-15. Longitude Minutes     [00-59] 
     * Pos. 16-17. Longitude Seconds     [00-59] 
     * Pos. 18-20. Longitude Thousandths Of Seconds      [000-999]
     * Pos. 21. Longitude Hemisphere     [EW]
     * Pos. 1-21.  Unknown Latitude and Unknown Longitude [000000000U000000000U]]".
     * Example: /// Example: 340000000N0430000000E
     * Constraints: Minimum length = 0, Maximum length = 21
     */
    val coord : String?
        get() {
            val o = __offset(76)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val coordAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(76, 1)
    fun coordInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 76, 1)
    /**
     * Indicates the plus or minus error assessed against the method used to derive the coordinate.
     * Example: /// Example: 12.345
     * Constraints: No constraints specified.
     */
    val coordDerivAcc : Double
        get() {
            val o = __offset(78)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * WGS84 latitude of the location, in degrees. -90 to 90 degrees (negative values south of equator).
     * Example: /// Example: 45.23
     * Constraints: No constraints specified.
     */
    val lat : Double
        get() {
            val o = __offset(80)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * WGS84 longitude of the location, in degrees. -180 to 180 degrees (negative values west of Prime Meridian).
     * Example: /// Example: 179.1
     * Constraints: No constraints specified.
     */
    val lon : Double
        get() {
            val o = __offset(82)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Ground elevation of the geographic coordinates referenced to (above or below) Mean Sea Level (MSL) vertical datum.
     * Example: /// Example: 123.45
     * Constraints: No constraints specified.
     */
    val elevMsl : Double
        get() {
            val o = __offset(84)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Indicates the confidence level expressed as a percent that a specific geometric spatial element, ELEVATION_MSL linear accuracy, has been vertically positioned to within a specified vertical accuracy.
     * Example: /// Example: 50
     * Constraints: No constraints specified.
     */
    val elevMslConfLvl : Int
        get() {
            val o = __offset(86)
            return if(o != 0) bb.getInt(o + bb_pos) else 0
        }
    /**
     * Indicates the plus or minus error assessed against the method used to derive the elevation.
     * Example: /// Example: 12.34
     * Constraints: No constraints specified.
     */
    val elevMslDerivAcc : Double
        get() {
            val o = __offset(88)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * The distance between Mean Sea Level and a referenced ellipsoid.
     * Example: /// Example: 12.34
     * Constraints: No constraints specified.
     */
    val geoidalMslSep : Double
        get() {
            val o = __offset(90)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * "Indicates the grid system used in the development of the milGrid coordinates. Values are:
     * UPS - Universal Polar System
     * UTM - Universal Transverse Mercator".
     * Example: /// Example: UTM
     * Constraints: Minimum length = 0, Maximum length = 3
     */
    val milGridSys : String?
        get() {
            val o = __offset(92)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val milGridSysAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(92, 1)
    fun milGridSysInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 92, 1)
    /**
     * The Military Grid Reference System is the geocoordinate standard used by NATO militaries for locating points on Earth. The MGRS is derived from the Universal Transverse Mercator (UTM) grid system and the Universal Polar Stereographic (UPS) grid system, but uses a different labeling convention. The MGRS is used as geocode for the entire Earth. Example of an milgrid coordinate, or grid reference, would be 4QFJ12345678, which consists of three parts:
     * 4Q (grid zone designator, GZD)
     * FJ (the 100,000-meter square identifier)
     * 12345678 (numerical location; easting is 1234 and northing is 5678, in this case specifying a location with 10 m resolution).
     * Example: /// Example: 4QFJ12345678
     * Constraints: Minimum length = 0, Maximum length = 15
     */
    val milGrid : String?
        get() {
            val o = __offset(94)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val milGridAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(94, 1)
    fun milGridInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 94, 1)
    /**
     * Universal Transverse Mercator (UTM) grid coordinates.
     * Pos. 1-2, UTM Zone Column   [01-60
     * Pos. 3, UTM Zone Row   [C-HJ-NP-X]
     * Pos. 4, UTM False Easting   [0-9]
     * Pos. 5-9, UTM Meter Easting    [0-9][0-9][0-9][0-9][0-9]
     * Pos. 10-11, UTM False Northing    [0-9][0-9]
     * Pos. 12-16, UTM Meter Northing    [0-9][0-9][0-9][0-9][0-9].
     * Example: /// Example: 19P4390691376966
     * Constraints: Minimum length = 0, Maximum length = 16
     */
    val utm : String?
        get() {
            val o = __offset(96)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val utmAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(96, 1)
    fun utmInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 96, 1)
    /**
     * Air Defense District (ADD) or Air Defense Area (ADA) in which the geographic coordinates reside.
     * Example: /// Example: AL006
     * Constraints: Minimum length = 0, Maximum length = 5
     */
    val airDefArea : String?
        get() {
            val o = __offset(98)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val airDefAreaAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(98, 1)
    fun airDefAreaInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 98, 1)
    /**
     * Political subdivision in which the geographic coordinates reside.  The specific usage and enumerations contained in this field may be found in the documentation provided in the referenceDoc field.  If referenceDoc not provided, users may consult the data provider.
     * Example: /// Example: IZ07
     * Constraints: Minimum length = 0, Maximum length = 7
     */
    val polSubdiv : String?
        get() {
            val o = __offset(100)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val polSubdivAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(100, 1)
    fun polSubdivInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 100, 1)
    /**
     * A standard scheme for symbol coding enabling the transfer, display and use of symbols and graphics among information systems, as per MIL-STD 2525B, and supported by the element AFFILIATION.
     * Example: /// Example: SOGPU----------
     * Constraints: Minimum length = 0, Maximum length = 15
     */
    val symCode : String?
        get() {
            val o = __offset(102)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val symCodeAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(102, 1)
    fun symCodeInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 102, 1)
    /**
     * Indicates the importance of the operating unit to the OES or MIR system.  This data element is restricted to update by DIA (DB-4). Valid values are:
     * 0 - Does not meet criteria above
     * 1 - Primary importance to system
     * 2 - Secondary importance to system
     * 3 - Tertiary importance to system
     * O - Other. Explain in Remarks.
     * Example: /// Example: 1
     * Constraints: Minimum length = 0, Maximum length = 1
     */
    val classRating : String?
        get() {
            val o = __offset(104)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val classRatingAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(104, 1)
    fun classRatingInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 104, 1)
    /**
     * Validity and currency of the data in the record to be used in conjunction with the other elements in the record as defined by SOPs. Values are:
     * A - Active
     * I - Inactive
     * K - Acknowledged
     * L - Local
     * Q - A nominated (NOM) or Data Change Request (DCR) record
     * R - Production reduced by CMD decision
     * W - Working Record.
     * Example: /// Example: A
     * Constraints: Minimum length = 0, Maximum length = 1
     */
    val recStatus : String?
        get() {
            val o = __offset(106)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val recStatusAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(106, 1)
    fun recStatusInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 106, 1)
    /**
     * Date on which the data in the record was last reviewed by the responsible analyst for accuracy and currency.  This date cannot be greater than the current date.
     * Example: /// Example: 2008-06-10
     * Constraints: No constraints specified.
     */
    val reviewDate : String?
        get() {
            val o = __offset(108)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val reviewDateAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(108, 1)
    fun reviewDateInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 108, 1)
    /**
     * Responsible Producer - Organization that is responsible for the maintenance of the record.
     * Example: /// Example: RT
     * Constraints: Minimum length = 0, Maximum length = 4
     */
    val resProd : String?
        get() {
            val o = __offset(110)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val resProdAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(110, 1)
    fun resProdInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 110, 1)
    /**
     * The reference documentiation that specifies the usage and enumerations contained in this record. If referenceDoc not provided, users may consult the data provider.
     * Example: /// Example: Provider Reference Documentation
     * Constraints: Minimum length = 0, Maximum length = 128
     */
    val referenceDoc : String?
        get() {
            val o = __offset(112)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val referenceDocAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(112, 1)
    fun referenceDocInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 112, 1)
    /**
     * Time the row was created in the database, auto-populated by the system.
     * Example: /// Example: 2018-01-01T16:00:00.123Z
     * Constraints: No constraints specified.
     */
    val createdAt : String?
        get() {
            val o = __offset(114)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val createdAtAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(114, 1)
    fun createdAtInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 114, 1)
    /**
     * Application user who created the row in the database, auto-populated by the system.
     * Example: /// Example: some.user
     * Constraints: Minimum length = 1, Maximum length = 64
     */
    val createdBy : String?
        get() {
            val o = __offset(116)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val createdByAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(116, 1)
    fun createdByInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 116, 1)
    /**
     * Source of the data.
     * Example: /// Example: some.user
     * Constraints: Minimum length = 1, Maximum length = 64
     */
    val source : String?
        get() {
            val o = __offset(118)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val sourceAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(118, 1)
    fun sourceInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 118, 1)
    /**
     * Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
     * Example: /// Example: THIRD_PARTY_DATASOURCE
     * Constraints: Minimum length = 0, Maximum length = 64
     */
    val origin : String?
        get() {
            val o = __offset(120)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val originAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(120, 1)
    fun originInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 120, 1)
    /**
     * Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
     * EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
     * REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
     * SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
     * TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
     * Example: /// Example: TEST
     * Constraints: Minimum length = 1, Maximum length = 32
     */
    val dataMode : Byte
        get() {
            val o = __offset(122)
            return if(o != 0) bb.get(o + bb_pos) else 0
        }
    companion object {
        fun validateVersion() = Constants.FLATBUFFERS_24_3_25()
        fun getRootAsOperatingunit_Ingest(_bb: ByteBuffer): Operatingunit_Ingest = getRootAsOperatingunit_Ingest(_bb, Operatingunit_Ingest())
        fun getRootAsOperatingunit_Ingest(_bb: ByteBuffer, obj: Operatingunit_Ingest): Operatingunit_Ingest {
            _bb.order(ByteOrder.LITTLE_ENDIAN)
            return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb))
        }
        fun Operatingunit_IngestBufferHasIdentifier(_bb: ByteBuffer) : Boolean = __has_identifier(_bb, "OPER")
        fun createOperatingunit_Ingest(builder: FlatBufferBuilder, idOperatingUnitOffset: Int, classificationMarkingOffset: Int, altOperatingUnitIdOffset: Int, nameOffset: Int, descriptionOffset: Int, idLocationOffset: Int, idContactOffset: Int, idOrganizationOffset: Int, unitIdentifierOffset: Int, countryCodeOffset: Int, altCountryCodeOffset: Int, wacOffset: Int, operStatusOffset: Int, conditionOffset: Int, conditionAvailOffset: Int, eval: Int, fpaOffset: Int, identOffset: Int, allegianceOffset: Int, altAllegianceOffset: Int, locNameOffset: Int, locReasonOffset: Int, forceOffset: Int, forceNameOffset: Int, functRoleOffset: Int, msnPrimaryOffset: Int, msnPrimarySpecialtyOffset: Int, masterUnit: Boolean, stylizedUnit: Boolean, divCatOffset: Int, echelonOffset: Int, echelonTierOffset: Int, fleetIdOffset: Int, deployStatusOffset: Int, flagFlownOffset: Int, coordDatumOffset: Int, coordOffset: Int, coordDerivAcc: Double, lat: Double, lon: Double, elevMsl: Double, elevMslConfLvl: Int, elevMslDerivAcc: Double, geoidalMslSep: Double, milGridSysOffset: Int, milGridOffset: Int, utmOffset: Int, airDefAreaOffset: Int, polSubdivOffset: Int, symCodeOffset: Int, classRatingOffset: Int, recStatusOffset: Int, reviewDateOffset: Int, resProdOffset: Int, referenceDocOffset: Int, createdAtOffset: Int, createdByOffset: Int, sourceOffset: Int, originOffset: Int, dataMode: Byte) : Int {
            builder.startTable(60)
            addGeoidalMslSep(builder, geoidalMslSep)
            addElevMslDerivAcc(builder, elevMslDerivAcc)
            addElevMsl(builder, elevMsl)
            addLon(builder, lon)
            addLat(builder, lat)
            addCoordDerivAcc(builder, coordDerivAcc)
            addOrigin(builder, originOffset)
            addSource(builder, sourceOffset)
            addCreatedBy(builder, createdByOffset)
            addCreatedAt(builder, createdAtOffset)
            addReferenceDoc(builder, referenceDocOffset)
            addResProd(builder, resProdOffset)
            addReviewDate(builder, reviewDateOffset)
            addRecStatus(builder, recStatusOffset)
            addClassRating(builder, classRatingOffset)
            addSymCode(builder, symCodeOffset)
            addPolSubdiv(builder, polSubdivOffset)
            addAirDefArea(builder, airDefAreaOffset)
            addUtm(builder, utmOffset)
            addMilGrid(builder, milGridOffset)
            addMilGridSys(builder, milGridSysOffset)
            addElevMslConfLvl(builder, elevMslConfLvl)
            addCoord(builder, coordOffset)
            addCoordDatum(builder, coordDatumOffset)
            addFlagFlown(builder, flagFlownOffset)
            addDeployStatus(builder, deployStatusOffset)
            addFleetId(builder, fleetIdOffset)
            addEchelonTier(builder, echelonTierOffset)
            addEchelon(builder, echelonOffset)
            addDivCat(builder, divCatOffset)
            addMsnPrimarySpecialty(builder, msnPrimarySpecialtyOffset)
            addMsnPrimary(builder, msnPrimaryOffset)
            addFunctRole(builder, functRoleOffset)
            addForceName(builder, forceNameOffset)
            addForce(builder, forceOffset)
            addLocReason(builder, locReasonOffset)
            addLocName(builder, locNameOffset)
            addAltAllegiance(builder, altAllegianceOffset)
            addAllegiance(builder, allegianceOffset)
            addIdent(builder, identOffset)
            addFpa(builder, fpaOffset)
            addEval(builder, eval)
            addConditionAvail(builder, conditionAvailOffset)
            addCondition(builder, conditionOffset)
            addOperStatus(builder, operStatusOffset)
            addWac(builder, wacOffset)
            addAltCountryCode(builder, altCountryCodeOffset)
            addCountryCode(builder, countryCodeOffset)
            addUnitIdentifier(builder, unitIdentifierOffset)
            addIdOrganization(builder, idOrganizationOffset)
            addIdContact(builder, idContactOffset)
            addIdLocation(builder, idLocationOffset)
            addDescription(builder, descriptionOffset)
            addName(builder, nameOffset)
            addAltOperatingUnitId(builder, altOperatingUnitIdOffset)
            addClassificationMarking(builder, classificationMarkingOffset)
            addIdOperatingUnit(builder, idOperatingUnitOffset)
            addDataMode(builder, dataMode)
            addStylizedUnit(builder, stylizedUnit)
            addMasterUnit(builder, masterUnit)
            return endOperatingunit_Ingest(builder)
        }
        fun startOperatingunit_Ingest(builder: FlatBufferBuilder) = builder.startTable(60)
        fun addIdOperatingUnit(builder: FlatBufferBuilder, idOperatingUnit: Int) = builder.addOffset(0, idOperatingUnit, 0)
        fun addClassificationMarking(builder: FlatBufferBuilder, classificationMarking: Int) = builder.addOffset(1, classificationMarking, 0)
        fun addAltOperatingUnitId(builder: FlatBufferBuilder, altOperatingUnitId: Int) = builder.addOffset(2, altOperatingUnitId, 0)
        fun addName(builder: FlatBufferBuilder, name: Int) = builder.addOffset(3, name, 0)
        fun addDescription(builder: FlatBufferBuilder, description: Int) = builder.addOffset(4, description, 0)
        fun addIdLocation(builder: FlatBufferBuilder, idLocation: Int) = builder.addOffset(5, idLocation, 0)
        fun addIdContact(builder: FlatBufferBuilder, idContact: Int) = builder.addOffset(6, idContact, 0)
        fun addIdOrganization(builder: FlatBufferBuilder, idOrganization: Int) = builder.addOffset(7, idOrganization, 0)
        fun addUnitIdentifier(builder: FlatBufferBuilder, unitIdentifier: Int) = builder.addOffset(8, unitIdentifier, 0)
        fun addCountryCode(builder: FlatBufferBuilder, countryCode: Int) = builder.addOffset(9, countryCode, 0)
        fun addAltCountryCode(builder: FlatBufferBuilder, altCountryCode: Int) = builder.addOffset(10, altCountryCode, 0)
        fun addWac(builder: FlatBufferBuilder, wac: Int) = builder.addOffset(11, wac, 0)
        fun addOperStatus(builder: FlatBufferBuilder, operStatus: Int) = builder.addOffset(12, operStatus, 0)
        fun addCondition(builder: FlatBufferBuilder, condition: Int) = builder.addOffset(13, condition, 0)
        fun addConditionAvail(builder: FlatBufferBuilder, conditionAvail: Int) = builder.addOffset(14, conditionAvail, 0)
        fun addEval(builder: FlatBufferBuilder, eval: Int) = builder.addInt(15, eval, 0)
        fun addFpa(builder: FlatBufferBuilder, fpa: Int) = builder.addOffset(16, fpa, 0)
        fun addIdent(builder: FlatBufferBuilder, ident: Int) = builder.addOffset(17, ident, 0)
        fun addAllegiance(builder: FlatBufferBuilder, allegiance: Int) = builder.addOffset(18, allegiance, 0)
        fun addAltAllegiance(builder: FlatBufferBuilder, altAllegiance: Int) = builder.addOffset(19, altAllegiance, 0)
        fun addLocName(builder: FlatBufferBuilder, locName: Int) = builder.addOffset(20, locName, 0)
        fun addLocReason(builder: FlatBufferBuilder, locReason: Int) = builder.addOffset(21, locReason, 0)
        fun addForce(builder: FlatBufferBuilder, force: Int) = builder.addOffset(22, force, 0)
        fun addForceName(builder: FlatBufferBuilder, forceName: Int) = builder.addOffset(23, forceName, 0)
        fun addFunctRole(builder: FlatBufferBuilder, functRole: Int) = builder.addOffset(24, functRole, 0)
        fun addMsnPrimary(builder: FlatBufferBuilder, msnPrimary: Int) = builder.addOffset(25, msnPrimary, 0)
        fun addMsnPrimarySpecialty(builder: FlatBufferBuilder, msnPrimarySpecialty: Int) = builder.addOffset(26, msnPrimarySpecialty, 0)
        fun addMasterUnit(builder: FlatBufferBuilder, masterUnit: Boolean) = builder.addBoolean(27, masterUnit, false)
        fun addStylizedUnit(builder: FlatBufferBuilder, stylizedUnit: Boolean) = builder.addBoolean(28, stylizedUnit, false)
        fun addDivCat(builder: FlatBufferBuilder, divCat: Int) = builder.addOffset(29, divCat, 0)
        fun addEchelon(builder: FlatBufferBuilder, echelon: Int) = builder.addOffset(30, echelon, 0)
        fun addEchelonTier(builder: FlatBufferBuilder, echelonTier: Int) = builder.addOffset(31, echelonTier, 0)
        fun addFleetId(builder: FlatBufferBuilder, fleetId: Int) = builder.addOffset(32, fleetId, 0)
        fun addDeployStatus(builder: FlatBufferBuilder, deployStatus: Int) = builder.addOffset(33, deployStatus, 0)
        fun addFlagFlown(builder: FlatBufferBuilder, flagFlown: Int) = builder.addOffset(34, flagFlown, 0)
        fun addCoordDatum(builder: FlatBufferBuilder, coordDatum: Int) = builder.addOffset(35, coordDatum, 0)
        fun addCoord(builder: FlatBufferBuilder, coord: Int) = builder.addOffset(36, coord, 0)
        fun addCoordDerivAcc(builder: FlatBufferBuilder, coordDerivAcc: Double) = builder.addDouble(37, coordDerivAcc, 0.0)
        fun addLat(builder: FlatBufferBuilder, lat: Double) = builder.addDouble(38, lat, 0.0)
        fun addLon(builder: FlatBufferBuilder, lon: Double) = builder.addDouble(39, lon, 0.0)
        fun addElevMsl(builder: FlatBufferBuilder, elevMsl: Double) = builder.addDouble(40, elevMsl, 0.0)
        fun addElevMslConfLvl(builder: FlatBufferBuilder, elevMslConfLvl: Int) = builder.addInt(41, elevMslConfLvl, 0)
        fun addElevMslDerivAcc(builder: FlatBufferBuilder, elevMslDerivAcc: Double) = builder.addDouble(42, elevMslDerivAcc, 0.0)
        fun addGeoidalMslSep(builder: FlatBufferBuilder, geoidalMslSep: Double) = builder.addDouble(43, geoidalMslSep, 0.0)
        fun addMilGridSys(builder: FlatBufferBuilder, milGridSys: Int) = builder.addOffset(44, milGridSys, 0)
        fun addMilGrid(builder: FlatBufferBuilder, milGrid: Int) = builder.addOffset(45, milGrid, 0)
        fun addUtm(builder: FlatBufferBuilder, utm: Int) = builder.addOffset(46, utm, 0)
        fun addAirDefArea(builder: FlatBufferBuilder, airDefArea: Int) = builder.addOffset(47, airDefArea, 0)
        fun addPolSubdiv(builder: FlatBufferBuilder, polSubdiv: Int) = builder.addOffset(48, polSubdiv, 0)
        fun addSymCode(builder: FlatBufferBuilder, symCode: Int) = builder.addOffset(49, symCode, 0)
        fun addClassRating(builder: FlatBufferBuilder, classRating: Int) = builder.addOffset(50, classRating, 0)
        fun addRecStatus(builder: FlatBufferBuilder, recStatus: Int) = builder.addOffset(51, recStatus, 0)
        fun addReviewDate(builder: FlatBufferBuilder, reviewDate: Int) = builder.addOffset(52, reviewDate, 0)
        fun addResProd(builder: FlatBufferBuilder, resProd: Int) = builder.addOffset(53, resProd, 0)
        fun addReferenceDoc(builder: FlatBufferBuilder, referenceDoc: Int) = builder.addOffset(54, referenceDoc, 0)
        fun addCreatedAt(builder: FlatBufferBuilder, createdAt: Int) = builder.addOffset(55, createdAt, 0)
        fun addCreatedBy(builder: FlatBufferBuilder, createdBy: Int) = builder.addOffset(56, createdBy, 0)
        fun addSource(builder: FlatBufferBuilder, source: Int) = builder.addOffset(57, source, 0)
        fun addOrigin(builder: FlatBufferBuilder, origin: Int) = builder.addOffset(58, origin, 0)
        fun addDataMode(builder: FlatBufferBuilder, dataMode: Byte) = builder.addByte(59, dataMode, 0)
        fun endOperatingunit_Ingest(builder: FlatBufferBuilder) : Int {
            val o = builder.endTable()
            return o
        }
        fun finishOperatingunitIngestBuffer(builder: FlatBufferBuilder, offset: Int) = builder.finish(offset, "OPER")
        fun finishSizePrefixedOperatingunit_IngestBuffer(builder: FlatBufferBuilder, offset: Int) = builder.finishSizePrefixed(offset, "OPER")
    }
}
