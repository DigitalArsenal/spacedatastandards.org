// automatically generated by the FlatBuffers compiler, do not modify

import com.google.flatbuffers.BaseVector
import com.google.flatbuffers.BooleanVector
import com.google.flatbuffers.ByteVector
import com.google.flatbuffers.Constants
import com.google.flatbuffers.DoubleVector
import com.google.flatbuffers.FlatBufferBuilder
import com.google.flatbuffers.FloatVector
import com.google.flatbuffers.LongVector
import com.google.flatbuffers.StringVector
import com.google.flatbuffers.Struct
import com.google.flatbuffers.Table
import com.google.flatbuffers.UnionVector
import java.nio.ByteBuffer
import java.nio.ByteOrder
import kotlin.math.sign

/**
 * /// Collection of remarks associated with this data link message.
 */
@Suppress("unused")
class DataLinkRemarks_Abridged : Table() {

    fun __init(_i: Int, _bb: ByteBuffer)  {
        __reset(_i, _bb)
    }
    fun __assign(_i: Int, _bb: ByteBuffer) : DataLinkRemarks_Abridged {
        __init(_i, _bb)
        return this
    }
    /**
     * Indicates the subject matter of the remark.
     * Example: /// Example: CONTINGENCY PROCEDURES
     * Constraints: Minimum length = 0, Maximum length = 64
     */
    val type : String?
        get() {
            val o = __offset(4)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val typeAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(4, 1)
    fun typeInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 4, 1)
    /**
     * Text of the remark.
     * Example: /// Example: Example data link remarks
     * Constraints: Minimum length = 0, Maximum length = 128
     */
    val text : String?
        get() {
            val o = __offset(6)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val textAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(6, 1)
    fun textInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 6, 1)
    companion object {
        fun validateVersion() = Constants.FLATBUFFERS_24_3_25()
        fun getRootAsDataLinkRemarks_Abridged(_bb: ByteBuffer): DataLinkRemarks_Abridged = getRootAsDataLinkRemarks_Abridged(_bb, DataLinkRemarks_Abridged())
        fun getRootAsDataLinkRemarks_Abridged(_bb: ByteBuffer, obj: DataLinkRemarks_Abridged): DataLinkRemarks_Abridged {
            _bb.order(ByteOrder.LITTLE_ENDIAN)
            return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb))
        }
        fun DataLinkRemarks_AbridgedBufferHasIdentifier(_bb: ByteBuffer) : Boolean = __has_identifier(_bb, "DATA")
        fun createDataLinkRemarks_Abridged(builder: FlatBufferBuilder, typeOffset: Int, textOffset: Int) : Int {
            builder.startTable(2)
            addText(builder, textOffset)
            addType(builder, typeOffset)
            return endDataLinkRemarks_Abridged(builder)
        }
        fun startDataLinkRemarks_Abridged(builder: FlatBufferBuilder) = builder.startTable(2)
        fun addType(builder: FlatBufferBuilder, type: Int) = builder.addOffset(0, type, 0)
        fun addText(builder: FlatBufferBuilder, text: Int) = builder.addOffset(1, text, 0)
        fun endDataLinkRemarks_Abridged(builder: FlatBufferBuilder) : Int {
            val o = builder.endTable()
            return o
        }
        fun finishDataLinkRemarksAbridgedBuffer(builder: FlatBufferBuilder, offset: Int) = builder.finish(offset, "DATA")
        fun finishSizePrefixedDataLinkRemarks_AbridgedBuffer(builder: FlatBufferBuilder, offset: Int) = builder.finishSizePrefixed(offset, "DATA")
    }
}
