// automatically generated by the FlatBuffers compiler, do not modify

import com.google.flatbuffers.BaseVector
import com.google.flatbuffers.BooleanVector
import com.google.flatbuffers.ByteVector
import com.google.flatbuffers.Constants
import com.google.flatbuffers.DoubleVector
import com.google.flatbuffers.FlatBufferBuilder
import com.google.flatbuffers.FloatVector
import com.google.flatbuffers.LongVector
import com.google.flatbuffers.StringVector
import com.google.flatbuffers.Struct
import com.google.flatbuffers.Table
import com.google.flatbuffers.UnionVector
import java.nio.ByteBuffer
import java.nio.ByteOrder
import kotlin.math.sign

/**
 * /// Casualty report and evacuation request. Used to report and request support to evacuate friendly and enemy casualties.
 */
@Suppress("unused")
class Evac_Ingest : Table() {

    fun __init(_i: Int, _bb: ByteBuffer)  {
        __reset(_i, _bb)
    }
    fun __assign(_i: Int, _bb: ByteBuffer) : Evac_Ingest {
        __init(_i, _bb)
        return this
    }
    /**
     * Unique identifier of the record, auto-generated by the system.
     * Example: /// Example: MEDEVACEVENT-ID
     * Constraints: Minimum length = 1, Maximum length = 36
     */
    val id : String?
        get() {
            val o = __offset(4)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val idAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(4, 1)
    fun idInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 4, 1)
    /**
     * Classification marking of the data in IC/CAPCO Portion-marked format.
     * Example: /// Example: U
     * Constraints: Minimum length = 1, Maximum length = 128
     */
    val classificationMarking : String?
        get() {
            val o = __offset(6)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val classificationMarkingAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(6, 1)
    fun classificationMarkingInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 6, 1)
    /**
     * UUID identifying the medevac mission, which should remain the same on subsequent posts related to the same medevac mission.
     * Example: /// Example: MedEvac-ID
     * Constraints: Minimum length = 0, Maximum length = 36
     */
    val medevacId : String?
        get() {
            val o = __offset(8)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val medevacIdAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(8, 1)
    fun medevacIdInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 8, 1)
    /**
     * The type of this medevac record (REQUEST, RESPONSE).
     * Example: /// Example: REQUEST
     * Constraints: Minimum length = 1, Maximum length = 8
     */
    val type : Byte
        get() {
            val o = __offset(10)
            return if(o != 0) bb.get(o + bb_pos) else 0
        }
    /**
     * The operation type of the evacuation. (NOT SPECIFIED, AIR, GROUND, SURFACE).
     * Example: /// Example: GROUND
     * Constraints: Minimum length = 0, Maximum length = 8
     */
    val missionType : String?
        get() {
            val o = __offset(12)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val missionTypeAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(12, 1)
    fun missionTypeInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 12, 1)
    /**
     * Unique identifier of a weather report associated with this evacuation.
     * Example: /// Example: WeatherReport-ID
     * Constraints: Minimum length = 0, Maximum length = 36
     */
    val idWeatherReport : String?
        get() {
            val o = __offset(14)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val idWeatherReportAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(14, 1)
    fun idWeatherReportInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 14, 1)
    /**
     * Number of people Killed In Action.
     * Example: /// Example: 0
     * Constraints: No constraints specified.
     */
    val numKia : Int
        get() {
            val o = __offset(16)
            return if(o != 0) bb.getInt(o + bb_pos) else 0
        }
    /**
     * Number of people Wounded In Action.
     * Example: /// Example: 3
     * Constraints: No constraints specified.
     */
    val numWia : Int
        get() {
            val o = __offset(18)
            return if(o != 0) bb.getInt(o + bb_pos) else 0
        }
    /**
     * Number of littered personnel requiring evacuation.
     * Example: /// Example: 0
     * Constraints: No constraints specified.
     */
    val numLitter : Int
        get() {
            val o = __offset(20)
            return if(o != 0) bb.getInt(o + bb_pos) else 0
        }
    /**
     * Number of ambulatory personnel requiring evacuation.
     * Example: /// Example: 5
     * Constraints: No constraints specified.
     */
    val numAmbulatory : Int
        get() {
            val o = __offset(22)
            return if(o != 0) bb.getInt(o + bb_pos) else 0
        }
    /**
     * Flag indicating whether the mission requires medical personnel.
     * Example: /// Example: True
     * Constraints: No constraints specified.
     */
    val medicReq : Boolean
        get() {
            val o = __offset(24)
            return if(o != 0) 0.toByte() != bb.get(o + bb_pos) else false
        }
    /**
     * Externally provided Medevac request number (e.g. MED.1.223908).
     * Example: /// Example: MED.1.234567
     * Constraints: Minimum length = 0, Maximum length = 36
     */
    val reqNum : String?
        get() {
            val o = __offset(26)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val reqNumAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(26, 1)
    fun reqNumInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 26, 1)
    /**
     * The request time, in ISO 8601 UTC format.
     * Example: /// Example: 2021-10-15T16:00:00.123Z
     * Constraints: No constraints specified.
     */
    val reqTime : String?
        get() {
            val o = __offset(28)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val reqTimeAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(28, 1)
    fun reqTimeInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 28, 1)
    /**
     * The call sign of this medevac requestor.
     * Example: /// Example: Bravo
     * Constraints: Minimum length = 0, Maximum length = 36
     */
    val reqCallSign : String?
        get() {
            val o = __offset(30)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val reqCallSignAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(30, 1)
    fun reqCallSignInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 30, 1)
    /**
     * The expected pickup time, in ISO 8601 UTC format.
     * Example: /// Example: 2021-10-20T16:00:00.123Z
     * Constraints: No constraints specified.
     */
    val pickupTime : String?
        get() {
            val o = __offset(32)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val pickupTimeAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(32, 1)
    fun pickupTimeInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 32, 1)
    /**
     * WGS-84 latitude of the pickup location, in degrees. -90 to 90 degrees (negative values south of equator).
     * Example: /// Example: 75.1234
     * Constraints: No constraints specified.
     */
    val pickupLat : Double
        get() {
            val o = __offset(34)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * WGS-84 longitude of the pickup location, in degrees. -180 to 180 degrees (negative values west of Prime Meridian).
     * Example: /// Example: 175.1234
     * Constraints: No constraints specified.
     */
    val pickupLon : Double
        get() {
            val o = __offset(36)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Altitude relative to WGS-84 ellipsoid, in meters. Positive values indicate a point height above ellipsoid, and negative values indicate a point height below ellipsoid.
     * Example: /// Example: 30.1234
     * Constraints: No constraints specified.
     */
    val pickupAlt : Double
        get() {
            val o = __offset(38)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Radius of circular area about lat/lon point, in meters (1-sigma, if representing error).
     * Example: /// Example: 10.1234
     * Constraints: No constraints specified.
     */
    val ce : Double
        get() {
            val o = __offset(40)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Height above lat/lon point, in meters (1-sigma, if representing linear error).
     * Example: /// Example: 5.1234
     * Constraints: No constraints specified.
     */
    val le : Double
        get() {
            val o = __offset(42)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Short description of the terrain features of the pickup location (WOODS, TREES, PLOWED FIELDS, FLAT, STANDING WATER, MARSH, URBAN BUILT-UP AREA, MOUNTAIN, HILL, SAND TD, ROCKY, VALLEY, METAMORPHIC ICE, UNKNOWN TD, SEA, NO STATEMENT).
     * Example: /// Example: ROCKY
     * Constraints: Minimum length = 0, Maximum length = 32
     */
    val terrain : String?
        get() {
            val o = __offset(44)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val terrainAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(44, 1)
    fun terrainInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 44, 1)
    /**
     * Amplifying data for the terrain describing important obstacles in or around the zone.
     * Example: /// Example: N/A
     * Constraints: Minimum length = 0, Maximum length = 64
     */
    val obstaclesRemarks : String?
        get() {
            val o = __offset(46)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val obstaclesRemarksAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(46, 1)
    fun obstaclesRemarksInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 46, 1)
    /**
     * Amplifying data for the terrain describing any notable additional terrain features.
     * Example: /// Example: N/A
     * Constraints: Minimum length = 0, Maximum length = 64
     */
    val terrainRemarks : String?
        get() {
            val o = __offset(48)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val terrainRemarksAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(48, 1)
    fun terrainRemarksInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 48, 1)
    /**
     * The name of the zone.
     * Example: /// Example: example-zone
     * Constraints: Minimum length = 0, Maximum length = 128
     */
    val zoneName : String?
        get() {
            val o = __offset(50)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val zoneNameAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(50, 1)
    fun zoneNameInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 50, 1)
    /**
     * The expected marker identifying the pickup site (SMOKE ZONE MARKING, FLARES, MIRROR, GLIDE ANGLE INDICATOR LIGHT, LIGHT ZONE MARKING, PANELS, FIRE, LASER DESIGNATOR,  STROBE LIGHTS, VEHICLE LIGHTS, COLORED SMOKE, WHITE PHOSPHERUS, INFRARED, ILLUMINATION, FRATRICIDE FENCE).
     * Example: /// Example: ILLUMINATION
     * Constraints: Minimum length = 0, Maximum length = 64
     */
    val zoneMarking : String?
        get() {
            val o = __offset(52)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val zoneMarkingAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(52, 1)
    fun zoneMarkingInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 52, 1)
    /**
     * The pickup site security (UNKNOWN ZONESECURITY, NO ENEMY, POSSIBLE ENEMY, ENEMY IN AREA USE CAUTION, ENEMY IN AREA ARMED ESCORT REQUIRED).
     * Example: /// Example: NO ENEMY
     * Constraints: Minimum length = 0, Maximum length = 64
     */
    val zoneSecurity : String?
        get() {
            val o = __offset(54)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val zoneSecurityAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(54, 1)
    fun zoneSecurityInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 54, 1)
    /**
     * Color used for the pickup site marking (RED, WHITE, BLUE, YELLOW, GREEN, ORANGE, BLACK, PURPLE, BROWN, TAN, GRAY, SILVER, CAMOUFLAGE, OTHER COLOR).
     * Example: /// Example: RED
     * Constraints: Minimum length = 0, Maximum length = 32
     */
    val zoneMarkingColor : String?
        get() {
            val o = __offset(56)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val zoneMarkingColorAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(56, 1)
    fun zoneMarkingColorInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 56, 1)
    /**
     * Flag indicating that the pickup site is hot and hostiles are in the area.
     * Example: /// Example: False
     * Constraints: No constraints specified.
     */
    val zoneHot : Boolean
        get() {
            val o = __offset(58)
            return if(o != 0) 0.toByte() != bb.get(o + bb_pos) else false
        }
    /**
     * The contact frequency, in Hz, of the agency or zone controller.
     * Example: /// Example: 3.11
     * Constraints: No constraints specified.
     */
    val cntctFreq : Double
        get() {
            val o = __offset(60)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * The call sign of the zone controller.
     * Example: /// Example: Tango
     * Constraints: Minimum length = 0, Maximum length = 128
     */
    val zoneContrCallSign : String?
        get() {
            val o = __offset(62)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val zoneContrCallSignAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(62, 1)
    fun zoneContrCallSignInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 62, 1)
    /**
     * The count of people requiring medevac.
     * Example: /// Example: 5
     * Constraints: No constraints specified.
     */
    val numCasualties : Int
        get() {
            val o = __offset(64)
            return if(o != 0) bb.getInt(o + bb_pos) else 0
        }
    /**
     * Additional comments for the medevac mission.
     * Example: /// Example: Comments concerning mission
     * Constraints: Minimum length = 0, Maximum length = 1024
     */
    val comments : String?
        get() {
            val o = __offset(66)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val commentsAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(66, 1)
    fun commentsInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 66, 1)
    /**
     * No description provided.
     * Example: /// Example: No example provided.
     * Constraints: No constraints specified.
     */
    fun casualtyInfo(j: Int) : String? {
        val o = __offset(68)
        return if (o != 0) {
            __string(__vector(o) + j * 4)
        } else {
            null
        }
    }
    val casualtyInfoLength : Int
        get() {
            val o = __offset(68); return if (o != 0) __vector_len(o) else 0
        }
    /**
     * No description provided.
     * Example: /// Example: No example provided.
     * Constraints: No constraints specified.
     */
    fun enemyData(j: Int) : String? {
        val o = __offset(70)
        return if (o != 0) {
            __string(__vector(o) + j * 4)
        } else {
            null
        }
    }
    val enemyDataLength : Int
        get() {
            val o = __offset(70); return if (o != 0) __vector_len(o) else 0
        }
    /**
     * The originating source network on which this record was created, auto-populated by the system.
     * Example: /// Example: ORIG
     * Constraints: Minimum length = 0, Maximum length = 32
     */
    val origNetwork : String?
        get() {
            val o = __offset(72)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val origNetworkAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(72, 1)
    fun origNetworkInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 72, 1)
    /**
     * Time the row was created in the database, auto-populated by the system.
     * Example: /// Example: 2018-01-01T16:00:00.123Z
     * Constraints: No constraints specified.
     */
    val createdAt : String?
        get() {
            val o = __offset(74)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val createdAtAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(74, 1)
    fun createdAtInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 74, 1)
    /**
     * Application user who created the row in the database, auto-populated by the system.
     * Example: /// Example: some.user
     * Constraints: Minimum length = 0, Maximum length = 64
     */
    val createdBy : String?
        get() {
            val o = __offset(76)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val createdByAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(76, 1)
    fun createdByInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 76, 1)
    /**
     * Source of the data.
     * Example: /// Example: Bluestaq
     * Constraints: Minimum length = 1, Maximum length = 64
     */
    val source : String?
        get() {
            val o = __offset(78)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val sourceAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(78, 1)
    fun sourceInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 78, 1)
    /**
     * Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
     * Example: /// Example: THIRD_PARTY_DATASOURCE
     * Constraints: Minimum length = 0, Maximum length = 64
     */
    val origin : String?
        get() {
            val o = __offset(80)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val originAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(80, 1)
    fun originInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 80, 1)
    /**
     * Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
     * EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
     * REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
     * SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
     * TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
     * Example: /// Example: TEST
     * Constraints: Minimum length = 1, Maximum length = 32
     */
    val dataMode : Byte
        get() {
            val o = __offset(82)
            return if(o != 0) bb.get(o + bb_pos) else 0
        }
    companion object {
        fun validateVersion() = Constants.FLATBUFFERS_24_3_25()
        fun getRootAsEvac_Ingest(_bb: ByteBuffer): Evac_Ingest = getRootAsEvac_Ingest(_bb, Evac_Ingest())
        fun getRootAsEvac_Ingest(_bb: ByteBuffer, obj: Evac_Ingest): Evac_Ingest {
            _bb.order(ByteOrder.LITTLE_ENDIAN)
            return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb))
        }
        fun Evac_IngestBufferHasIdentifier(_bb: ByteBuffer) : Boolean = __has_identifier(_bb, "EVAC")
        fun createEvac_Ingest(builder: FlatBufferBuilder, idOffset: Int, classificationMarkingOffset: Int, medevacIdOffset: Int, type: Byte, missionTypeOffset: Int, idWeatherReportOffset: Int, numKia: Int, numWia: Int, numLitter: Int, numAmbulatory: Int, medicReq: Boolean, reqNumOffset: Int, reqTimeOffset: Int, reqCallSignOffset: Int, pickupTimeOffset: Int, pickupLat: Double, pickupLon: Double, pickupAlt: Double, ce: Double, le: Double, terrainOffset: Int, obstaclesRemarksOffset: Int, terrainRemarksOffset: Int, zoneNameOffset: Int, zoneMarkingOffset: Int, zoneSecurityOffset: Int, zoneMarkingColorOffset: Int, zoneHot: Boolean, cntctFreq: Double, zoneContrCallSignOffset: Int, numCasualties: Int, commentsOffset: Int, casualtyInfoOffset: Int, enemyDataOffset: Int, origNetworkOffset: Int, createdAtOffset: Int, createdByOffset: Int, sourceOffset: Int, originOffset: Int, dataMode: Byte) : Int {
            builder.startTable(40)
            addCntctFreq(builder, cntctFreq)
            addLe(builder, le)
            addCe(builder, ce)
            addPickupAlt(builder, pickupAlt)
            addPickupLon(builder, pickupLon)
            addPickupLat(builder, pickupLat)
            addOrigin(builder, originOffset)
            addSource(builder, sourceOffset)
            addCreatedBy(builder, createdByOffset)
            addCreatedAt(builder, createdAtOffset)
            addOrigNetwork(builder, origNetworkOffset)
            addEnemyData(builder, enemyDataOffset)
            addCasualtyInfo(builder, casualtyInfoOffset)
            addComments(builder, commentsOffset)
            addNumCasualties(builder, numCasualties)
            addZoneContrCallSign(builder, zoneContrCallSignOffset)
            addZoneMarkingColor(builder, zoneMarkingColorOffset)
            addZoneSecurity(builder, zoneSecurityOffset)
            addZoneMarking(builder, zoneMarkingOffset)
            addZoneName(builder, zoneNameOffset)
            addTerrainRemarks(builder, terrainRemarksOffset)
            addObstaclesRemarks(builder, obstaclesRemarksOffset)
            addTerrain(builder, terrainOffset)
            addPickupTime(builder, pickupTimeOffset)
            addReqCallSign(builder, reqCallSignOffset)
            addReqTime(builder, reqTimeOffset)
            addReqNum(builder, reqNumOffset)
            addNumAmbulatory(builder, numAmbulatory)
            addNumLitter(builder, numLitter)
            addNumWIA(builder, numWia)
            addNumKIA(builder, numKia)
            addIdWeatherReport(builder, idWeatherReportOffset)
            addMissionType(builder, missionTypeOffset)
            addMedevacId(builder, medevacIdOffset)
            addClassificationMarking(builder, classificationMarkingOffset)
            addId(builder, idOffset)
            addDataMode(builder, dataMode)
            addZoneHot(builder, zoneHot)
            addMedicReq(builder, medicReq)
            addType(builder, type)
            return endEvac_Ingest(builder)
        }
        fun startEvac_Ingest(builder: FlatBufferBuilder) = builder.startTable(40)
        fun addId(builder: FlatBufferBuilder, id: Int) = builder.addOffset(0, id, 0)
        fun addClassificationMarking(builder: FlatBufferBuilder, classificationMarking: Int) = builder.addOffset(1, classificationMarking, 0)
        fun addMedevacId(builder: FlatBufferBuilder, medevacId: Int) = builder.addOffset(2, medevacId, 0)
        fun addType(builder: FlatBufferBuilder, type: Byte) = builder.addByte(3, type, 0)
        fun addMissionType(builder: FlatBufferBuilder, missionType: Int) = builder.addOffset(4, missionType, 0)
        fun addIdWeatherReport(builder: FlatBufferBuilder, idWeatherReport: Int) = builder.addOffset(5, idWeatherReport, 0)
        fun addNumKIA(builder: FlatBufferBuilder, numKia: Int) = builder.addInt(6, numKia, 0)
        fun addNumWIA(builder: FlatBufferBuilder, numWia: Int) = builder.addInt(7, numWia, 0)
        fun addNumLitter(builder: FlatBufferBuilder, numLitter: Int) = builder.addInt(8, numLitter, 0)
        fun addNumAmbulatory(builder: FlatBufferBuilder, numAmbulatory: Int) = builder.addInt(9, numAmbulatory, 0)
        fun addMedicReq(builder: FlatBufferBuilder, medicReq: Boolean) = builder.addBoolean(10, medicReq, false)
        fun addReqNum(builder: FlatBufferBuilder, reqNum: Int) = builder.addOffset(11, reqNum, 0)
        fun addReqTime(builder: FlatBufferBuilder, reqTime: Int) = builder.addOffset(12, reqTime, 0)
        fun addReqCallSign(builder: FlatBufferBuilder, reqCallSign: Int) = builder.addOffset(13, reqCallSign, 0)
        fun addPickupTime(builder: FlatBufferBuilder, pickupTime: Int) = builder.addOffset(14, pickupTime, 0)
        fun addPickupLat(builder: FlatBufferBuilder, pickupLat: Double) = builder.addDouble(15, pickupLat, 0.0)
        fun addPickupLon(builder: FlatBufferBuilder, pickupLon: Double) = builder.addDouble(16, pickupLon, 0.0)
        fun addPickupAlt(builder: FlatBufferBuilder, pickupAlt: Double) = builder.addDouble(17, pickupAlt, 0.0)
        fun addCe(builder: FlatBufferBuilder, ce: Double) = builder.addDouble(18, ce, 0.0)
        fun addLe(builder: FlatBufferBuilder, le: Double) = builder.addDouble(19, le, 0.0)
        fun addTerrain(builder: FlatBufferBuilder, terrain: Int) = builder.addOffset(20, terrain, 0)
        fun addObstaclesRemarks(builder: FlatBufferBuilder, obstaclesRemarks: Int) = builder.addOffset(21, obstaclesRemarks, 0)
        fun addTerrainRemarks(builder: FlatBufferBuilder, terrainRemarks: Int) = builder.addOffset(22, terrainRemarks, 0)
        fun addZoneName(builder: FlatBufferBuilder, zoneName: Int) = builder.addOffset(23, zoneName, 0)
        fun addZoneMarking(builder: FlatBufferBuilder, zoneMarking: Int) = builder.addOffset(24, zoneMarking, 0)
        fun addZoneSecurity(builder: FlatBufferBuilder, zoneSecurity: Int) = builder.addOffset(25, zoneSecurity, 0)
        fun addZoneMarkingColor(builder: FlatBufferBuilder, zoneMarkingColor: Int) = builder.addOffset(26, zoneMarkingColor, 0)
        fun addZoneHot(builder: FlatBufferBuilder, zoneHot: Boolean) = builder.addBoolean(27, zoneHot, false)
        fun addCntctFreq(builder: FlatBufferBuilder, cntctFreq: Double) = builder.addDouble(28, cntctFreq, 0.0)
        fun addZoneContrCallSign(builder: FlatBufferBuilder, zoneContrCallSign: Int) = builder.addOffset(29, zoneContrCallSign, 0)
        fun addNumCasualties(builder: FlatBufferBuilder, numCasualties: Int) = builder.addInt(30, numCasualties, 0)
        fun addComments(builder: FlatBufferBuilder, comments: Int) = builder.addOffset(31, comments, 0)
        fun addCasualtyInfo(builder: FlatBufferBuilder, casualtyInfo: Int) = builder.addOffset(32, casualtyInfo, 0)
        fun createCasualtyInfoVector(builder: FlatBufferBuilder, data: IntArray) : Int {
            builder.startVector(4, data.size, 4)
            for (i in data.size - 1 downTo 0) {
                builder.addOffset(data[i])
            }
            return builder.endVector()
        }
        fun startCasualtyInfoVector(builder: FlatBufferBuilder, numElems: Int) = builder.startVector(4, numElems, 4)
        fun addEnemyData(builder: FlatBufferBuilder, enemyData: Int) = builder.addOffset(33, enemyData, 0)
        fun createEnemyDataVector(builder: FlatBufferBuilder, data: IntArray) : Int {
            builder.startVector(4, data.size, 4)
            for (i in data.size - 1 downTo 0) {
                builder.addOffset(data[i])
            }
            return builder.endVector()
        }
        fun startEnemyDataVector(builder: FlatBufferBuilder, numElems: Int) = builder.startVector(4, numElems, 4)
        fun addOrigNetwork(builder: FlatBufferBuilder, origNetwork: Int) = builder.addOffset(34, origNetwork, 0)
        fun addCreatedAt(builder: FlatBufferBuilder, createdAt: Int) = builder.addOffset(35, createdAt, 0)
        fun addCreatedBy(builder: FlatBufferBuilder, createdBy: Int) = builder.addOffset(36, createdBy, 0)
        fun addSource(builder: FlatBufferBuilder, source: Int) = builder.addOffset(37, source, 0)
        fun addOrigin(builder: FlatBufferBuilder, origin: Int) = builder.addOffset(38, origin, 0)
        fun addDataMode(builder: FlatBufferBuilder, dataMode: Byte) = builder.addByte(39, dataMode, 0)
        fun endEvac_Ingest(builder: FlatBufferBuilder) : Int {
            val o = builder.endTable()
            return o
        }
        fun finishEvacIngestBuffer(builder: FlatBufferBuilder, offset: Int) = builder.finish(offset, "EVAC")
        fun finishSizePrefixedEvac_IngestBuffer(builder: FlatBufferBuilder, offset: Int) = builder.finishSizePrefixed(offset, "EVAC")
    }
}
