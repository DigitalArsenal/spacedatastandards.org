// automatically generated by the FlatBuffers compiler, do not modify

import com.google.flatbuffers.BaseVector
import com.google.flatbuffers.BooleanVector
import com.google.flatbuffers.ByteVector
import com.google.flatbuffers.Constants
import com.google.flatbuffers.DoubleVector
import com.google.flatbuffers.FlatBufferBuilder
import com.google.flatbuffers.FloatVector
import com.google.flatbuffers.LongVector
import com.google.flatbuffers.StringVector
import com.google.flatbuffers.Struct
import com.google.flatbuffers.Table
import com.google.flatbuffers.UnionVector
import java.nio.ByteBuffer
import java.nio.ByteOrder
import kotlin.math.sign

/**
 * /// Self-reported information obtained from Automatic Identification System (AIS) equipment. This contains information such as unique identification, status, position, course, and speed. The AIS is an automatic tracking system that uses transceivers on ships and is used by vessel traffic services. Although technically and operationally distinct, the AIS system is analogous to ADS-B that performs a similar function for aircraft. AIS is intended to assist a vessel's watchstanding officers and allow maritime authorities to track and monitor vessel movements. AIS integrates a standardized VHF transceiver with a positioning system such as Global Positioning System receiver, with other electronic navigation sensors, such as gyrocompass or rate of turn indicator. Vessels fitted with AIS transceivers can be tracked by AIS base stations located along coast lines or, when out of range of terrestrial networks, through a growing number of satellites that are fitted with special AIS receivers which are capable of deconflicting a large number of signatures.
 */
@Suppress("unused")
class AIS_Abridged : Table() {

    fun __init(_i: Int, _bb: ByteBuffer)  {
        __reset(_i, _bb)
    }
    fun __assign(_i: Int, _bb: ByteBuffer) : AIS_Abridged {
        __init(_i, _bb)
        return this
    }
    /**
     * Unique identifier of the record, auto-generated by the system.
     * Example: /// Example: AIS-ID
     * Constraints: Minimum length = 1, Maximum length = 36
     */
    val id : String?
        get() {
            val o = __offset(4)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val idAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(4, 1)
    fun idInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 4, 1)
    /**
     * Classification marking of the data in IC/CAPCO Portion-marked format.
     * Example: /// Example: U
     * Constraints: Minimum length = 1, Maximum length = 128
     */
    val classificationMarking : String?
        get() {
            val o = __offset(6)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val classificationMarkingAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(6, 1)
    fun classificationMarkingInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 6, 1)
    /**
     * Unique identifier of the Track.
     * Example: /// Example: TRACK-ID
     * Constraints: Minimum length = 0, Maximum length = 36
     */
    val idTrack : String?
        get() {
            val o = __offset(8)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val idTrackAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(8, 1)
    fun idTrackInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 8, 1)
    /**
     * Unique identifier of the vessel.
     * Example: /// Example: VESSEL-ID
     * Constraints: Minimum length = 0, Maximum length = 36
     */
    val idVessel : String?
        get() {
            val o = __offset(10)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val idVesselAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(10, 1)
    fun idVesselInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 10, 1)
    /**
     * The Maritime Mobile Service Identity of the vessel.  MMSI is a nine-digit number that identifies the transmitter station of the vessel.
     * Example: /// Example: 304010417
     * Constraints: No constraints specified.
     */
    val mmsi : Long
        get() {
            val o = __offset(12)
            return if(o != 0) bb.getLong(o + bb_pos) else 0L
        }
    /**
     * The International Maritime Organization Number of the vessel.  IMON is a seven-digit number that uniquely identifies the vessel.
     * Example: /// Example: 9015462
     * Constraints: No constraints specified.
     */
    val imon : Long
        get() {
            val o = __offset(14)
            return if(o != 0) bb.getLong(o + bb_pos) else 0L
        }
    /**
     * The timestamp that the vessel position was recorded, in ISO 8601 UTC format.
     * Example: /// Example: 2021-02-25T12:00:00.123456Z
     * Constraints: No constraints specified.
     */
    val ts : String?
        get() {
            val o = __offset(16)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val tsAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(16, 1)
    fun tsInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 16, 1)
    /**
     * The name of the vessel.  Vessel names that exceed the AIS 20 character are shortened (not truncated) to 15 character-spaces, followed by an underscore and the last 4 characters-spaces of the vessel full name.
     * Example: /// Example: DORNUM
     * Constraints: Minimum length = 0, Maximum length = 24
     */
    val shipName : String?
        get() {
            val o = __offset(18)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val shipNameAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(18, 1)
    fun shipNameInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 18, 1)
    /**
     * The reported ship type (e.g. Passenger, Tanker, Cargo, Other, etc.).  See the engagedIn and specialCraft entries for additional information on certain types of vessels.
     * Example: /// Example: Passenger
     * Constraints: Minimum length = 0, Maximum length = 48
     */
    val shipType : String?
        get() {
            val o = __offset(20)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val shipTypeAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(20, 1)
    fun shipTypeInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 20, 1)
    /**
     * The activity that the vessel is engaged in.  This entry applies only when the shipType = Other.
     * Example: /// Example: Cargo
     * Constraints: Minimum length = 0, Maximum length = 48
     */
    val engagedIn : String?
        get() {
            val o = __offset(22)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val engagedInAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(22, 1)
    fun engagedInInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 22, 1)
    /**
     * The type of special craft designation of the vessel.  This entry applies only when the shipType = Special Craft.
     * Example: /// Example: Tug
     * Constraints: Minimum length = 0, Maximum length = 48
     */
    val specialCraft : String?
        get() {
            val o = __offset(24)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val specialCraftAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(24, 1)
    fun specialCraftInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 24, 1)
    /**
     * The reported cargo type. Intended as, but not constrained to, the USCG NAVCEN AIS cargo definitions. Users should refer to USCG Navigation Center documentation for specific definitions associated with ship and cargo types. USCG NAVCEN documentation may be found at https://www.navcen.uscg.gov.
     * Example: /// Example: Freight
     * Constraints: Minimum length = 0, Maximum length = 48
     */
    val cargoType : String?
        get() {
            val o = __offset(26)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val cargoTypeAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(26, 1)
    fun cargoTypeInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 26, 1)
    /**
     * A uniquely designated identifier for the vessel's transmitter station.
     * Example: /// Example: V2OZ
     * Constraints: Minimum length = 0, Maximum length = 24
     */
    val callSign : String?
        get() {
            val o = __offset(28)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val callSignAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(28, 1)
    fun callSignInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 28, 1)
    /**
     * The flag of the subject vessel according to AIS transmission.
     * Example: /// Example: United States
     * Constraints: Minimum length = 0, Maximum length = 36
     */
    val vesselFlag : String?
        get() {
            val o = __offset(30)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val vesselFlagAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(30, 1)
    fun vesselFlagInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 30, 1)
    /**
     * WGS-84 latitude of the vessel position, in degrees.  -90 to 90 degrees (negative values south of equator).
     * Example: /// Example: 47.758499
     * Constraints: No constraints specified.
     */
    val lat : Double
        get() {
            val o = __offset(32)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * WGS-84 longitude of the vessel position, in degrees.  -180 to 180 degrees (negative values west of Prime Meridian).
     * Example: /// Example: -5.154223
     * Constraints: No constraints specified.
     */
    val lon : Double
        get() {
            val o = __offset(34)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Flag indicating high reported position accuracy (less than or equal to 10 meters).  A value of 0/false indicates low accuracy (greater than 10 meters).
     * Example: /// Example: True
     * Constraints: No constraints specified.
     */
    val posHiAccuracy : Boolean
        get() {
            val o = __offset(36)
            return if(o != 0) 0.toByte() != bb.get(o + bb_pos) else false
        }
    /**
     * Flag indicating high reported position latency (greater than 5 seconds).  A value of 0/false indicates low latency (less than 5 seconds).
     * Example: /// Example: True
     * Constraints: No constraints specified.
     */
    val posHiLatency : Boolean
        get() {
            val o = __offset(38)
            return if(o != 0) 0.toByte() != bb.get(o + bb_pos) else false
        }
    /**
     * The speed-over-ground reported by the vessel, in kilometers/hour.
     * Example: /// Example: 10.5
     * Constraints: No constraints specified.
     */
    val speed : Double
        get() {
            val o = __offset(40)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * The true heading reported by the vessel, in degrees.
     * Example: /// Example: 329.1
     * Constraints: No constraints specified.
     */
    val trueHeading : Double
        get() {
            val o = __offset(42)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * The course-over-ground reported by the vessel, in degrees.
     * Example: /// Example: 157.1
     * Constraints: No constraints specified.
     */
    val course : Double
        get() {
            val o = __offset(44)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * The Rate-of-Turn for the vessel, in degrees/minute.  Positive value indicates that the vessel is turning right.
     * Example: /// Example: 22.1
     * Constraints: No constraints specified.
     */
    val rateOfTurn : Double
        get() {
            val o = __offset(46)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Flag indicating that the vessel is engaged in a special maneuver (e.g. Waterway Navigation).
     * Example: /// Example: False
     * Constraints: No constraints specified.
     */
    val specialManeuver : Boolean
        get() {
            val o = __offset(48)
            return if(o != 0) 0.toByte() != bb.get(o + bb_pos) else false
        }
    /**
     * The AIS Navigational Status of the vessel (e.g. Underway Using Engine, Moored, Aground, etc.). Intended as, but not constrained to, the USCG NAVCEN navigation status definitions. Users should refer to USCG Navigation Center documentation for specific definitions associated with navigation status. USCG NAVCEN documentation may be found at https://www.navcen.uscg.gov.
     * Example: /// Example: Underway Using Engine
     * Constraints: Minimum length = 0, Maximum length = 64
     */
    val navStatus : String?
        get() {
            val o = __offset(50)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val navStatusAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(50, 1)
    fun navStatusInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 50, 1)
    /**
     * The type of electronic position fixing device (e.g. GPS, GLONASS, etc.). Intended as, but not constrained to, the USCG NAVCEN electronic position fixing device definitions. Users should refer to USCG Navigation Center documentation for specific device type information. USCG NAVCEN documentation may be found at https://www.navcen.uscg.gov.
     * Example: /// Example: GPS
     * Constraints: Minimum length = 0, Maximum length = 24
     */
    val posDeviceType : String?
        get() {
            val o = __offset(52)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val posDeviceTypeAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(52, 1)
    fun posDeviceTypeInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 52, 1)
    /**
     * The reference dimensions of the vessel, reported as [A, B, C, D], in meters.  Where the array values represent the distance fore (A), aft (B), to port (C), and to starboard (D) of the navigation antenna.  Array with values A = C = 0 and B, D > 0 indicate the length (B) and width (D) of the vessel without antenna position reference.
     * Example: /// Example: [50.1, 50.1, 20.1, 20.1]
     * Constraints: No constraints specified.
     */
    fun antennaRefDimensions(j: Int) : String? {
        val o = __offset(54)
        return if (o != 0) {
            __string(__vector(o) + j * 4)
        } else {
            null
        }
    }
    val antennaRefDimensionsLength : Int
        get() {
            val o = __offset(54); return if (o != 0) __vector_len(o) else 0
        }
    /**
     * The overall length of the vessel, in meters.  A value of 511 indicates a vessel length of 511 meters or greater.
     * Example: /// Example: 511.1
     * Constraints: No constraints specified.
     */
    val length : Double
        get() {
            val o = __offset(56)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * The breadth of the vessel, in meters.  A value of 63 indicates a vessel breadth of 63 meters or greater.
     * Example: /// Example: 24.1
     * Constraints: No constraints specified.
     */
    val width : Double
        get() {
            val o = __offset(58)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * The maximum static draught, in meters, of the vessel according to the AIS transmission.
     * Example: /// Example: 21.1
     * Constraints: No constraints specified.
     */
    val draught : Double
        get() {
            val o = __offset(60)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Further description or explanation of the vessel or type.
     * Example: /// Example: Search and rescue vessels
     * Constraints: Minimum length = 0, Maximum length = 100
     */
    val shipDescription : String?
        get() {
            val o = __offset(62)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val shipDescriptionAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(62, 1)
    fun shipDescriptionInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 62, 1)
    /**
     * The destination of the vessel according to the AIS transmission.
     * Example: /// Example: USCLE
     * Constraints: Minimum length = 0, Maximum length = 20
     */
    val destination : String?
        get() {
            val o = __offset(64)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val destinationAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(64, 1)
    fun destinationInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 64, 1)
    /**
     * The Estimated Time of Arrival of the vessel at the destination, in ISO 8601 UTC format.
     * Example: /// Example: 2021-02-25T12:00:00.123456Z
     * Constraints: No constraints specified.
     */
    val destinationEta : String?
        get() {
            val o = __offset(66)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val destinationEtaAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(66, 1)
    fun destinationEtaInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 66, 1)
    /**
     * The US Geographic Unique Identifier of the current port hosting the vessel.
     * Example: /// Example: 0ABC
     * Constraints: Minimum length = 0, Maximum length = 4
     */
    val currentPortGuid : String?
        get() {
            val o = __offset(68)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val currentPortGuidAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(68, 1)
    fun currentPortGuidInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 68, 1)
    /**
     * The UN Location Code of the current port hosting the vessel.
     * Example: /// Example: XF013
     * Constraints: Minimum length = 0, Maximum length = 5
     */
    val currentPortLocode : String?
        get() {
            val o = __offset(70)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val currentPortLocodeAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(70, 1)
    fun currentPortLocodeInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 70, 1)
    /**
     * The US Geographic Unique Identifier of the last port visited by the vessel.
     * Example: /// Example: 0VAX
     * Constraints: Minimum length = 0, Maximum length = 4
     */
    val lastPortGuid : String?
        get() {
            val o = __offset(72)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val lastPortGuidAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(72, 1)
    fun lastPortGuidInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 72, 1)
    /**
     * The UN Location Code of the last port visited by the vessel.
     * Example: /// Example: USSKY
     * Constraints: Minimum length = 0, Maximum length = 5
     */
    val lastPortLocode : String?
        get() {
            val o = __offset(74)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val lastPortLocodeAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(74, 1)
    fun lastPortLocodeInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 74, 1)
    /**
     * The US Geographic Unique Identifier of the next destination port of the vessel.
     * Example: /// Example: 0Z8Q
     * Constraints: Minimum length = 0, Maximum length = 4
     */
    val nextPortGuid : String?
        get() {
            val o = __offset(76)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val nextPortGuidAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(76, 1)
    fun nextPortGuidInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 76, 1)
    /**
     * The UN  Location Code of the next destination port of the vessel.
     * Example: /// Example: USCLE
     * Constraints: Minimum length = 0, Maximum length = 5
     */
    val nextPortLocode : String?
        get() {
            val o = __offset(78)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val nextPortLocodeAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(78, 1)
    fun nextPortLocodeInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 78, 1)
    /**
     * The Estimated Time of Arrival of the vessel at the destination port, according to MarineTraffic calculations, in ISO 8601 UTC format.
     * Example: /// Example: 2021-02-25T12:00:00.123456Z
     * Constraints: No constraints specified.
     */
    val etaCalculated : String?
        get() {
            val o = __offset(80)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val etaCalculatedAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(80, 1)
    fun etaCalculatedInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 80, 1)
    /**
     * The date and time that the ETA was calculated by MarineTraffic, in ISO 8601 UTC format.
     * Example: /// Example: 2021-02-25T12:00:00.123456Z
     * Constraints: No constraints specified.
     */
    val etaUpdated : String?
        get() {
            val o = __offset(82)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val etaUpdatedAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(82, 1)
    fun etaUpdatedInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 82, 1)
    /**
     * The remaining distance, in kilometers, for the vessel to reach the reported destination.
     * Example: /// Example: 150.5
     * Constraints: No constraints specified.
     */
    val distanceToGo : Double
        get() {
            val o = __offset(84)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * The distance, in kilometers, that the vessel has travelled since departing the last port.
     * Example: /// Example: 200.3
     * Constraints: No constraints specified.
     */
    val distanceTravelled : Double
        get() {
            val o = __offset(86)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * The average speed, in kilometers/hour, calculated for the subject vessel during the latest voyage (port to port).
     * Example: /// Example: 12.1
     * Constraints: No constraints specified.
     */
    val avgSpeed : Double
        get() {
            val o = __offset(88)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * The maximum speed, in kilometers/hour, reported by the subject vessel during the latest voyage (port to port).
     * Example: /// Example: 13.3
     * Constraints: No constraints specified.
     */
    val maxSpeed : Double
        get() {
            val o = __offset(90)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Time the row was created in the database, auto-populated by the system.
     * Example: /// Example: 2018-01-01T16:00:00.123Z
     * Constraints: No constraints specified.
     */
    val createdAt : String?
        get() {
            val o = __offset(92)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val createdAtAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(92, 1)
    fun createdAtInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 92, 1)
    /**
     * Application user who created the row in the database, auto-populated by the system.
     * Example: /// Example: some.user
     * Constraints: Minimum length = 1, Maximum length = 64
     */
    val createdBy : String?
        get() {
            val o = __offset(94)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val createdByAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(94, 1)
    fun createdByInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 94, 1)
    /**
     * Source of the data.
     * Example: /// Example: Bluestaq
     * Constraints: Minimum length = 1, Maximum length = 36
     */
    val source : String?
        get() {
            val o = __offset(96)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val sourceAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(96, 1)
    fun sourceInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 96, 1)
    /**
     * The source data library from which this record was received. This could be a remote or tactical UDL or another data library. If null, the record should be assumed to have originated from the primary Enterprise UDL.
     * Example: /// Example: AXE
     * Constraints: Minimum length = 0, Maximum length = 64
     */
    val sourceDl : String?
        get() {
            val o = __offset(98)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val sourceDlAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(98, 1)
    fun sourceDlInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 98, 1)
    /**
     * Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
     * Example: /// Example: THIRD_PARTY_DATASOURCE
     * Constraints: Minimum length = 0, Maximum length = 64
     */
    val origin : String?
        get() {
            val o = __offset(100)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val originAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(100, 1)
    fun originInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 100, 1)
    /**
     * Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
     * EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
     * REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
     * SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
     * TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
     * Example: /// Example: TEST
     * Constraints: Minimum length = 1, Maximum length = 32
     */
    val dataMode : Byte
        get() {
            val o = __offset(102)
            return if(o != 0) bb.get(o + bb_pos) else 0
        }
    /**
     * The originating source network on which this record was created, auto-populated by the system.
     * Example: /// Example: ORIG
     * Constraints: Minimum length = 1, Maximum length = 32
     */
    val origNetwork : String?
        get() {
            val o = __offset(104)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val origNetworkAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(104, 1)
    fun origNetworkInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 104, 1)
    companion object {
        fun validateVersion() = Constants.FLATBUFFERS_24_3_25()
        fun getRootAsAIS_Abridged(_bb: ByteBuffer): AIS_Abridged = getRootAsAIS_Abridged(_bb, AIS_Abridged())
        fun getRootAsAIS_Abridged(_bb: ByteBuffer, obj: AIS_Abridged): AIS_Abridged {
            _bb.order(ByteOrder.LITTLE_ENDIAN)
            return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb))
        }
        fun AIS_AbridgedBufferHasIdentifier(_bb: ByteBuffer) : Boolean = __has_identifier(_bb, "AISA")
        fun createAIS_Abridged(builder: FlatBufferBuilder, idOffset: Int, classificationMarkingOffset: Int, idTrackOffset: Int, idVesselOffset: Int, mmsi: Long, imon: Long, tsOffset: Int, shipNameOffset: Int, shipTypeOffset: Int, engagedInOffset: Int, specialCraftOffset: Int, cargoTypeOffset: Int, callSignOffset: Int, vesselFlagOffset: Int, lat: Double, lon: Double, posHiAccuracy: Boolean, posHiLatency: Boolean, speed: Double, trueHeading: Double, course: Double, rateOfTurn: Double, specialManeuver: Boolean, navStatusOffset: Int, posDeviceTypeOffset: Int, antennaRefDimensionsOffset: Int, length: Double, width: Double, draught: Double, shipDescriptionOffset: Int, destinationOffset: Int, destinationEtaOffset: Int, currentPortGuidOffset: Int, currentPortLocodeOffset: Int, lastPortGuidOffset: Int, lastPortLocodeOffset: Int, nextPortGuidOffset: Int, nextPortLocodeOffset: Int, etaCalculatedOffset: Int, etaUpdatedOffset: Int, distanceToGo: Double, distanceTravelled: Double, avgSpeed: Double, maxSpeed: Double, createdAtOffset: Int, createdByOffset: Int, sourceOffset: Int, sourceDlOffset: Int, originOffset: Int, dataMode: Byte, origNetworkOffset: Int) : Int {
            builder.startTable(51)
            addMaxSpeed(builder, maxSpeed)
            addAvgSpeed(builder, avgSpeed)
            addDistanceTravelled(builder, distanceTravelled)
            addDistanceToGo(builder, distanceToGo)
            addDraught(builder, draught)
            addWidth(builder, width)
            addLength(builder, length)
            addRateOfTurn(builder, rateOfTurn)
            addCourse(builder, course)
            addTrueHeading(builder, trueHeading)
            addSpeed(builder, speed)
            addLon(builder, lon)
            addLat(builder, lat)
            addImon(builder, imon)
            addMmsi(builder, mmsi)
            addOrigNetwork(builder, origNetworkOffset)
            addOrigin(builder, originOffset)
            addSourceDL(builder, sourceDlOffset)
            addSource(builder, sourceOffset)
            addCreatedBy(builder, createdByOffset)
            addCreatedAt(builder, createdAtOffset)
            addEtaUpdated(builder, etaUpdatedOffset)
            addEtaCalculated(builder, etaCalculatedOffset)
            addNextPortLOCODE(builder, nextPortLocodeOffset)
            addNextPortGUID(builder, nextPortGuidOffset)
            addLastPortLOCODE(builder, lastPortLocodeOffset)
            addLastPortGUID(builder, lastPortGuidOffset)
            addCurrentPortLOCODE(builder, currentPortLocodeOffset)
            addCurrentPortGUID(builder, currentPortGuidOffset)
            addDestinationETA(builder, destinationEtaOffset)
            addDestination(builder, destinationOffset)
            addShipDescription(builder, shipDescriptionOffset)
            addAntennaRefDimensions(builder, antennaRefDimensionsOffset)
            addPosDeviceType(builder, posDeviceTypeOffset)
            addNavStatus(builder, navStatusOffset)
            addVesselFlag(builder, vesselFlagOffset)
            addCallSign(builder, callSignOffset)
            addCargoType(builder, cargoTypeOffset)
            addSpecialCraft(builder, specialCraftOffset)
            addEngagedIn(builder, engagedInOffset)
            addShipType(builder, shipTypeOffset)
            addShipName(builder, shipNameOffset)
            addTs(builder, tsOffset)
            addIdVessel(builder, idVesselOffset)
            addIdTrack(builder, idTrackOffset)
            addClassificationMarking(builder, classificationMarkingOffset)
            addId(builder, idOffset)
            addDataMode(builder, dataMode)
            addSpecialManeuver(builder, specialManeuver)
            addPosHiLatency(builder, posHiLatency)
            addPosHiAccuracy(builder, posHiAccuracy)
            return endAIS_Abridged(builder)
        }
        fun startAIS_Abridged(builder: FlatBufferBuilder) = builder.startTable(51)
        fun addId(builder: FlatBufferBuilder, id: Int) = builder.addOffset(0, id, 0)
        fun addClassificationMarking(builder: FlatBufferBuilder, classificationMarking: Int) = builder.addOffset(1, classificationMarking, 0)
        fun addIdTrack(builder: FlatBufferBuilder, idTrack: Int) = builder.addOffset(2, idTrack, 0)
        fun addIdVessel(builder: FlatBufferBuilder, idVessel: Int) = builder.addOffset(3, idVessel, 0)
        fun addMmsi(builder: FlatBufferBuilder, mmsi: Long) = builder.addLong(4, mmsi, 0L)
        fun addImon(builder: FlatBufferBuilder, imon: Long) = builder.addLong(5, imon, 0L)
        fun addTs(builder: FlatBufferBuilder, ts: Int) = builder.addOffset(6, ts, 0)
        fun addShipName(builder: FlatBufferBuilder, shipName: Int) = builder.addOffset(7, shipName, 0)
        fun addShipType(builder: FlatBufferBuilder, shipType: Int) = builder.addOffset(8, shipType, 0)
        fun addEngagedIn(builder: FlatBufferBuilder, engagedIn: Int) = builder.addOffset(9, engagedIn, 0)
        fun addSpecialCraft(builder: FlatBufferBuilder, specialCraft: Int) = builder.addOffset(10, specialCraft, 0)
        fun addCargoType(builder: FlatBufferBuilder, cargoType: Int) = builder.addOffset(11, cargoType, 0)
        fun addCallSign(builder: FlatBufferBuilder, callSign: Int) = builder.addOffset(12, callSign, 0)
        fun addVesselFlag(builder: FlatBufferBuilder, vesselFlag: Int) = builder.addOffset(13, vesselFlag, 0)
        fun addLat(builder: FlatBufferBuilder, lat: Double) = builder.addDouble(14, lat, 0.0)
        fun addLon(builder: FlatBufferBuilder, lon: Double) = builder.addDouble(15, lon, 0.0)
        fun addPosHiAccuracy(builder: FlatBufferBuilder, posHiAccuracy: Boolean) = builder.addBoolean(16, posHiAccuracy, false)
        fun addPosHiLatency(builder: FlatBufferBuilder, posHiLatency: Boolean) = builder.addBoolean(17, posHiLatency, false)
        fun addSpeed(builder: FlatBufferBuilder, speed: Double) = builder.addDouble(18, speed, 0.0)
        fun addTrueHeading(builder: FlatBufferBuilder, trueHeading: Double) = builder.addDouble(19, trueHeading, 0.0)
        fun addCourse(builder: FlatBufferBuilder, course: Double) = builder.addDouble(20, course, 0.0)
        fun addRateOfTurn(builder: FlatBufferBuilder, rateOfTurn: Double) = builder.addDouble(21, rateOfTurn, 0.0)
        fun addSpecialManeuver(builder: FlatBufferBuilder, specialManeuver: Boolean) = builder.addBoolean(22, specialManeuver, false)
        fun addNavStatus(builder: FlatBufferBuilder, navStatus: Int) = builder.addOffset(23, navStatus, 0)
        fun addPosDeviceType(builder: FlatBufferBuilder, posDeviceType: Int) = builder.addOffset(24, posDeviceType, 0)
        fun addAntennaRefDimensions(builder: FlatBufferBuilder, antennaRefDimensions: Int) = builder.addOffset(25, antennaRefDimensions, 0)
        fun createAntennaRefDimensionsVector(builder: FlatBufferBuilder, data: IntArray) : Int {
            builder.startVector(4, data.size, 4)
            for (i in data.size - 1 downTo 0) {
                builder.addOffset(data[i])
            }
            return builder.endVector()
        }
        fun startAntennaRefDimensionsVector(builder: FlatBufferBuilder, numElems: Int) = builder.startVector(4, numElems, 4)
        fun addLength(builder: FlatBufferBuilder, length: Double) = builder.addDouble(26, length, 0.0)
        fun addWidth(builder: FlatBufferBuilder, width: Double) = builder.addDouble(27, width, 0.0)
        fun addDraught(builder: FlatBufferBuilder, draught: Double) = builder.addDouble(28, draught, 0.0)
        fun addShipDescription(builder: FlatBufferBuilder, shipDescription: Int) = builder.addOffset(29, shipDescription, 0)
        fun addDestination(builder: FlatBufferBuilder, destination: Int) = builder.addOffset(30, destination, 0)
        fun addDestinationETA(builder: FlatBufferBuilder, destinationEta: Int) = builder.addOffset(31, destinationEta, 0)
        fun addCurrentPortGUID(builder: FlatBufferBuilder, currentPortGuid: Int) = builder.addOffset(32, currentPortGuid, 0)
        fun addCurrentPortLOCODE(builder: FlatBufferBuilder, currentPortLocode: Int) = builder.addOffset(33, currentPortLocode, 0)
        fun addLastPortGUID(builder: FlatBufferBuilder, lastPortGuid: Int) = builder.addOffset(34, lastPortGuid, 0)
        fun addLastPortLOCODE(builder: FlatBufferBuilder, lastPortLocode: Int) = builder.addOffset(35, lastPortLocode, 0)
        fun addNextPortGUID(builder: FlatBufferBuilder, nextPortGuid: Int) = builder.addOffset(36, nextPortGuid, 0)
        fun addNextPortLOCODE(builder: FlatBufferBuilder, nextPortLocode: Int) = builder.addOffset(37, nextPortLocode, 0)
        fun addEtaCalculated(builder: FlatBufferBuilder, etaCalculated: Int) = builder.addOffset(38, etaCalculated, 0)
        fun addEtaUpdated(builder: FlatBufferBuilder, etaUpdated: Int) = builder.addOffset(39, etaUpdated, 0)
        fun addDistanceToGo(builder: FlatBufferBuilder, distanceToGo: Double) = builder.addDouble(40, distanceToGo, 0.0)
        fun addDistanceTravelled(builder: FlatBufferBuilder, distanceTravelled: Double) = builder.addDouble(41, distanceTravelled, 0.0)
        fun addAvgSpeed(builder: FlatBufferBuilder, avgSpeed: Double) = builder.addDouble(42, avgSpeed, 0.0)
        fun addMaxSpeed(builder: FlatBufferBuilder, maxSpeed: Double) = builder.addDouble(43, maxSpeed, 0.0)
        fun addCreatedAt(builder: FlatBufferBuilder, createdAt: Int) = builder.addOffset(44, createdAt, 0)
        fun addCreatedBy(builder: FlatBufferBuilder, createdBy: Int) = builder.addOffset(45, createdBy, 0)
        fun addSource(builder: FlatBufferBuilder, source: Int) = builder.addOffset(46, source, 0)
        fun addSourceDL(builder: FlatBufferBuilder, sourceDl: Int) = builder.addOffset(47, sourceDl, 0)
        fun addOrigin(builder: FlatBufferBuilder, origin: Int) = builder.addOffset(48, origin, 0)
        fun addDataMode(builder: FlatBufferBuilder, dataMode: Byte) = builder.addByte(49, dataMode, 0)
        fun addOrigNetwork(builder: FlatBufferBuilder, origNetwork: Int) = builder.addOffset(50, origNetwork, 0)
        fun endAIS_Abridged(builder: FlatBufferBuilder) : Int {
            val o = builder.endTable()
            return o
        }
        fun finishAISAbridgedBuffer(builder: FlatBufferBuilder, offset: Int) = builder.finish(offset, "AISA")
        fun finishSizePrefixedAIS_AbridgedBuffer(builder: FlatBufferBuilder, offset: Int) = builder.finishSizePrefixed(offset, "AISA")
    }
}
