// automatically generated by the FlatBuffers compiler, do not modify

import com.google.flatbuffers.BaseVector
import com.google.flatbuffers.BooleanVector
import com.google.flatbuffers.ByteVector
import com.google.flatbuffers.Constants
import com.google.flatbuffers.DoubleVector
import com.google.flatbuffers.FlatBufferBuilder
import com.google.flatbuffers.FloatVector
import com.google.flatbuffers.LongVector
import com.google.flatbuffers.StringVector
import com.google.flatbuffers.Struct
import com.google.flatbuffers.Table
import com.google.flatbuffers.UnionVector
import java.nio.ByteBuffer
import java.nio.ByteOrder
import kotlin.math.sign

/**
 * /// Schema for SOI Calibration data.
 */
@Suppress("unused")
class SOICalibration_Full : Table() {

    fun __init(_i: Int, _bb: ByteBuffer)  {
        __reset(_i, _bb)
    }
    fun __assign(_i: Int, _bb: ByteBuffer) : SOICalibration_Full {
        __init(_i, _bb)
        return this
    }
    /**
     * Coefficient value for how much signal would be lost to atmospheric attenuation for a star at zenith, in magnitudes per air mass.
     * Example: /// Example: 0.2
     * Constraints: No constraints specified.
     */
    val calExtinctionCoeff : Double
        get() {
            val o = __offset(4)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Average Sky Background signals in magnitudes, at calibration. Sky Background refers to the incoming light from an apparently empty part of the night sky.
     * Example: /// Example: 30086.25
     * Constraints: No constraints specified.
     */
    val calSkyBg : Double
        get() {
            val o = __offset(6)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Background intensity, at calibration, specified in kilowatts per steradian per micrometer.
     * Example: /// Example: 1.1
     * Constraints: No constraints specified.
     */
    val calBgIntensity : Double
        get() {
            val o = __offset(8)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * In-band solar magnitudes at 1 A.U, at calibration (e.g. -5.0 to 30.0).
     * Example: /// Example: 19.23664587
     * Constraints: No constraints specified.
     */
    val calSpectralFilterSolarMag : Double
        get() {
            val o = __offset(10)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Value representing the difference between the catalog magnitude and instrumental magnitude for a set of standard stars, at calibration (e.g. -5.0 to 30.0).
     * Example: /// Example: 25.15682157
     * Constraints: No constraints specified.
     */
    val calZeroPoint : Double
        get() {
            val o = __offset(12)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Number of detected stars in the FOV with the target object, at calibration. Helps identify frames with clouds.
     * Example: /// Example: 1
     * Constraints: No constraints specified.
     */
    val calNumDetectedStars : Int
        get() {
            val o = __offset(14)
            return if(o != 0) bb.getInt(o + bb_pos) else 0
        }
    /**
     * Number of correlated stars in the FOV with the target object, at calibration. Can be 0 for narrow FOV sensors.
     * Example: /// Example: 1
     * Constraints: No constraints specified.
     */
    val calNumCorrelatedStars : Int
        get() {
            val o = __offset(16)
            return if(o != 0) bb.getInt(o + bb_pos) else 0
        }
    /**
     * Extinction coefficient uncertainty in magnitudes, at calibration, which represents the difference between the measured brightness and predicted brightness of the star with the extinction removed, making it exo-atmospheric (e.g. -5.0 to 30.0).
     * Example: /// Example: 0.06474939
     * Constraints: No constraints specified.
     */
    val calExtinctionCoeffUnc : Double
        get() {
            val o = __offset(18)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Maximum extinction coefficient uncertainty in magnitudes, at calibration (e.g. -5.0 to 30.0).
     * Example: /// Example: 0.19708838
     * Constraints: No constraints specified.
     */
    val calExtinctionCoeffMaxUnc : Double
        get() {
            val o = __offset(20)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Start time of calibration in ISO 8601 UTC time, with millisecond precision.
     * Example: /// Example: 2023-01-02T16:00:00.123Z
     * Constraints: No constraints specified.
     */
    val calTime : String?
        get() {
            val o = __offset(22)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val calTimeAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(22, 1)
    fun calTimeInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 22, 1)
    /**
     * Type of calibration (e.g. PRE, MID, POST).
     * Example: /// Example: PRE
     * Constraints: Minimum length = 0, Maximum length = 24
     */
    val calType : String?
        get() {
            val o = __offset(24)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val calTypeAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(24, 1)
    fun calTypeInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 24, 1)
    companion object {
        fun validateVersion() = Constants.FLATBUFFERS_24_3_25()
        fun getRootAsSOICalibration_Full(_bb: ByteBuffer): SOICalibration_Full = getRootAsSOICalibration_Full(_bb, SOICalibration_Full())
        fun getRootAsSOICalibration_Full(_bb: ByteBuffer, obj: SOICalibration_Full): SOICalibration_Full {
            _bb.order(ByteOrder.LITTLE_ENDIAN)
            return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb))
        }
        fun SOICalibration_FullBufferHasIdentifier(_bb: ByteBuffer) : Boolean = __has_identifier(_bb, "SOIC")
        fun createSOICalibration_Full(builder: FlatBufferBuilder, calExtinctionCoeff: Double, calSkyBg: Double, calBgIntensity: Double, calSpectralFilterSolarMag: Double, calZeroPoint: Double, calNumDetectedStars: Int, calNumCorrelatedStars: Int, calExtinctionCoeffUnc: Double, calExtinctionCoeffMaxUnc: Double, calTimeOffset: Int, calTypeOffset: Int) : Int {
            builder.startTable(11)
            addCalExtinctionCoeffMaxUnc(builder, calExtinctionCoeffMaxUnc)
            addCalExtinctionCoeffUnc(builder, calExtinctionCoeffUnc)
            addCalZeroPoint(builder, calZeroPoint)
            addCalSpectralFilterSolarMag(builder, calSpectralFilterSolarMag)
            addCalBgIntensity(builder, calBgIntensity)
            addCalSkyBg(builder, calSkyBg)
            addCalExtinctionCoeff(builder, calExtinctionCoeff)
            addCalType(builder, calTypeOffset)
            addCalTime(builder, calTimeOffset)
            addCalNumCorrelatedStars(builder, calNumCorrelatedStars)
            addCalNumDetectedStars(builder, calNumDetectedStars)
            return endSOICalibration_Full(builder)
        }
        fun startSOICalibration_Full(builder: FlatBufferBuilder) = builder.startTable(11)
        fun addCalExtinctionCoeff(builder: FlatBufferBuilder, calExtinctionCoeff: Double) = builder.addDouble(0, calExtinctionCoeff, 0.0)
        fun addCalSkyBg(builder: FlatBufferBuilder, calSkyBg: Double) = builder.addDouble(1, calSkyBg, 0.0)
        fun addCalBgIntensity(builder: FlatBufferBuilder, calBgIntensity: Double) = builder.addDouble(2, calBgIntensity, 0.0)
        fun addCalSpectralFilterSolarMag(builder: FlatBufferBuilder, calSpectralFilterSolarMag: Double) = builder.addDouble(3, calSpectralFilterSolarMag, 0.0)
        fun addCalZeroPoint(builder: FlatBufferBuilder, calZeroPoint: Double) = builder.addDouble(4, calZeroPoint, 0.0)
        fun addCalNumDetectedStars(builder: FlatBufferBuilder, calNumDetectedStars: Int) = builder.addInt(5, calNumDetectedStars, 0)
        fun addCalNumCorrelatedStars(builder: FlatBufferBuilder, calNumCorrelatedStars: Int) = builder.addInt(6, calNumCorrelatedStars, 0)
        fun addCalExtinctionCoeffUnc(builder: FlatBufferBuilder, calExtinctionCoeffUnc: Double) = builder.addDouble(7, calExtinctionCoeffUnc, 0.0)
        fun addCalExtinctionCoeffMaxUnc(builder: FlatBufferBuilder, calExtinctionCoeffMaxUnc: Double) = builder.addDouble(8, calExtinctionCoeffMaxUnc, 0.0)
        fun addCalTime(builder: FlatBufferBuilder, calTime: Int) = builder.addOffset(9, calTime, 0)
        fun addCalType(builder: FlatBufferBuilder, calType: Int) = builder.addOffset(10, calType, 0)
        fun endSOICalibration_Full(builder: FlatBufferBuilder) : Int {
            val o = builder.endTable()
            return o
        }
        fun finishSOICalibrationFullBuffer(builder: FlatBufferBuilder, offset: Int) = builder.finish(offset, "SOIC")
        fun finishSizePrefixedSOICalibration_FullBuffer(builder: FlatBufferBuilder, offset: Int) = builder.finishSizePrefixed(offset, "SOIC")
    }
}
