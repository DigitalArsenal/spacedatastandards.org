// automatically generated by the FlatBuffers compiler, do not modify

import com.google.flatbuffers.BaseVector
import com.google.flatbuffers.BooleanVector
import com.google.flatbuffers.ByteVector
import com.google.flatbuffers.Constants
import com.google.flatbuffers.DoubleVector
import com.google.flatbuffers.FlatBufferBuilder
import com.google.flatbuffers.FloatVector
import com.google.flatbuffers.LongVector
import com.google.flatbuffers.StringVector
import com.google.flatbuffers.Struct
import com.google.flatbuffers.Table
import com.google.flatbuffers.UnionVector
import java.nio.ByteBuffer
import java.nio.ByteOrder
import kotlin.math.sign

/**
 * /// Point of contacts for scheduling or modifying the route.
 */
@Suppress("unused")
class PointOfContact_Ingest : Table() {

    fun __init(_i: Int, _bb: ByteBuffer)  {
        __reset(_i, _bb)
    }
    fun __assign(_i: Int, _bb: ByteBuffer) : PointOfContact_Ingest {
        __init(_i, _bb)
        return this
    }
    /**
     * Sequencing field for point of contact.
     * Example: /// Example: 1
     * Constraints: No constraints specified.
     */
    val pocSequenceId : Int
        get() {
            val o = __offset(4)
            return if(o != 0) bb.getInt(o + bb_pos) else 0
        }
    /**
     * A code or name that represents the contact's role in association to the track route (ex. Originator, Scheduler, Maintainer, etc.).
     * Example: /// Example: Originator
     * Constraints: Minimum length = 0, Maximum length = 36
     */
    val pocTypeName : String?
        get() {
            val o = __offset(6)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val pocTypeNameAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(6, 1)
    fun pocTypeNameInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 6, 1)
    /**
     * The name of the contact.
     * Example: /// Example: Fred Smith
     * Constraints: Minimum length = 0, Maximum length = 36
     */
    val pocName : String?
        get() {
            val o = __offset(8)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val pocNameAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(8, 1)
    fun pocNameInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 8, 1)
    /**
     * Office name for which the contact belongs.
     * Example: /// Example: A34
     * Constraints: Minimum length = 0, Maximum length = 36
     */
    val office : String?
        get() {
            val o = __offset(10)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val officeAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(10, 1)
    fun officeInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 10, 1)
    /**
     * The username of the contact.
     * Example: /// Example: fgsmith
     * Constraints: Minimum length = 0, Maximum length = 64
     */
    val username : String?
        get() {
            val o = __offset(12)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val usernameAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(12, 1)
    fun usernameInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 12, 1)
    /**
     * The rank of contact.
     * Example: /// Example: Capt
     * Constraints: Minimum length = 0, Maximum length = 32
     */
    val rank : String?
        get() {
            val o = __offset(14)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val rankAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(14, 1)
    fun rankInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 14, 1)
    /**
     * Organization name for which the contact belongs.
     * Example: /// Example: HQAF
     * Constraints: Minimum length = 0, Maximum length = 36
     */
    val pocOrg : String?
        get() {
            val o = __offset(16)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val pocOrgAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(16, 1)
    fun pocOrgInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 16, 1)
    /**
     * Phone number of the contact.
     * Example: /// Example: 8675309
     * Constraints: Minimum length = 0, Maximum length = 45
     */
    val phone : String?
        get() {
            val o = __offset(18)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val phoneAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(18, 1)
    fun phoneInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 18, 1)
    /**
     * Text of the remark.
     * Example: /// Example: POC remark.
     * Constraints: Minimum length = 0, Maximum length = 1024
     */
    val remark : String?
        get() {
            val o = __offset(20)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val remarkAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(20, 1)
    fun remarkInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 20, 1)
    companion object {
        fun validateVersion() = Constants.FLATBUFFERS_24_3_25()
        fun getRootAsPointOfContact_Ingest(_bb: ByteBuffer): PointOfContact_Ingest = getRootAsPointOfContact_Ingest(_bb, PointOfContact_Ingest())
        fun getRootAsPointOfContact_Ingest(_bb: ByteBuffer, obj: PointOfContact_Ingest): PointOfContact_Ingest {
            _bb.order(ByteOrder.LITTLE_ENDIAN)
            return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb))
        }
        fun PointOfContact_IngestBufferHasIdentifier(_bb: ByteBuffer) : Boolean = __has_identifier(_bb, "POIN")
        fun createPointOfContact_Ingest(builder: FlatBufferBuilder, pocSequenceId: Int, pocTypeNameOffset: Int, pocNameOffset: Int, officeOffset: Int, usernameOffset: Int, rankOffset: Int, pocOrgOffset: Int, phoneOffset: Int, remarkOffset: Int) : Int {
            builder.startTable(9)
            addRemark(builder, remarkOffset)
            addPhone(builder, phoneOffset)
            addPocOrg(builder, pocOrgOffset)
            addRank(builder, rankOffset)
            addUsername(builder, usernameOffset)
            addOffice(builder, officeOffset)
            addPocName(builder, pocNameOffset)
            addPocTypeName(builder, pocTypeNameOffset)
            addPocSequenceId(builder, pocSequenceId)
            return endPointOfContact_Ingest(builder)
        }
        fun startPointOfContact_Ingest(builder: FlatBufferBuilder) = builder.startTable(9)
        fun addPocSequenceId(builder: FlatBufferBuilder, pocSequenceId: Int) = builder.addInt(0, pocSequenceId, 0)
        fun addPocTypeName(builder: FlatBufferBuilder, pocTypeName: Int) = builder.addOffset(1, pocTypeName, 0)
        fun addPocName(builder: FlatBufferBuilder, pocName: Int) = builder.addOffset(2, pocName, 0)
        fun addOffice(builder: FlatBufferBuilder, office: Int) = builder.addOffset(3, office, 0)
        fun addUsername(builder: FlatBufferBuilder, username: Int) = builder.addOffset(4, username, 0)
        fun addRank(builder: FlatBufferBuilder, rank: Int) = builder.addOffset(5, rank, 0)
        fun addPocOrg(builder: FlatBufferBuilder, pocOrg: Int) = builder.addOffset(6, pocOrg, 0)
        fun addPhone(builder: FlatBufferBuilder, phone: Int) = builder.addOffset(7, phone, 0)
        fun addRemark(builder: FlatBufferBuilder, remark: Int) = builder.addOffset(8, remark, 0)
        fun endPointOfContact_Ingest(builder: FlatBufferBuilder) : Int {
            val o = builder.endTable()
            return o
        }
        fun finishPointOfContactIngestBuffer(builder: FlatBufferBuilder, offset: Int) = builder.finish(offset, "POIN")
        fun finishSizePrefixedPointOfContact_IngestBuffer(builder: FlatBufferBuilder, offset: Int) = builder.finishSizePrefixed(offset, "POIN")
    }
}
