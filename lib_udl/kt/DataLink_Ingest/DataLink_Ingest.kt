// automatically generated by the FlatBuffers compiler, do not modify

import com.google.flatbuffers.BaseVector
import com.google.flatbuffers.BooleanVector
import com.google.flatbuffers.ByteVector
import com.google.flatbuffers.Constants
import com.google.flatbuffers.DoubleVector
import com.google.flatbuffers.FlatBufferBuilder
import com.google.flatbuffers.FloatVector
import com.google.flatbuffers.LongVector
import com.google.flatbuffers.StringVector
import com.google.flatbuffers.Struct
import com.google.flatbuffers.Table
import com.google.flatbuffers.UnionVector
import java.nio.ByteBuffer
import java.nio.ByteOrder
import kotlin.math.sign

/**
 * /// Beta Version DataLink: Detailed instructions regarding the operations of data links.
 */
@Suppress("unused")
class DataLink_Ingest : Table() {

    fun __init(_i: Int, _bb: ByteBuffer)  {
        __reset(_i, _bb)
    }
    fun __assign(_i: Int, _bb: ByteBuffer) : DataLink_Ingest {
        __init(_i, _bb)
        return this
    }
    /**
     * Unique identifier of the record, auto-generated by the system if not provided on create operations.
     * Example: /// Example: 026dd511-8ba5-47d3-9909-836149f87686
     * Constraints: Minimum length = 1, Maximum length = 36
     */
    val id : String?
        get() {
            val o = __offset(4)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val idAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(4, 1)
    fun idInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 4, 1)
    /**
     * Classification marking of the data in IC/CAPCO Portion-marked format.
     * Example: /// Example: U
     * Constraints: Minimum length = 1, Maximum length = 128
     */
    val classificationMarking : String?
        get() {
            val o = __offset(6)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val classificationMarkingAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(6, 1)
    fun classificationMarkingInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 6, 1)
    /**
     * Specifies the unique operation or exercise name, nickname, or codeword assigned to a joint exercise or operation plan.
     * Example: /// Example: DESERT WIND
     * Constraints: Minimum length = 1, Maximum length = 64
     */
    val opExName : String?
        get() {
            val o = __offset(8)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val opExNameAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(8, 1)
    fun opExNameInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 8, 1)
    /**
     * The identifier of the originator of this message.
     * Example: /// Example: USCENTCOM
     * Constraints: Minimum length = 1, Maximum length = 36
     */
    val originator : String?
        get() {
            val o = __offset(10)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val originatorAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(10, 1)
    fun originatorInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 10, 1)
    /**
     * The start of the effective time period of this data link message, in ISO 8601 UTC format with millisecond precision.
     * Example: /// Example: 2024-01-07T13:55:43.123Z
     * Constraints: No constraints specified.
     */
    val startTime : String?
        get() {
            val o = __offset(12)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val startTimeAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(12, 1)
    fun startTimeInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 12, 1)
    /**
     * The end of the effective time period of this data link message, in ISO 8601 UTC format with millisecond precision. This may be a relative stop time if used with stopTimeMod.
     * Example: /// Example: 2024-01-08T13:55:43.123Z
     * Constraints: No constraints specified.
     */
    val stopTime : String?
        get() {
            val o = __offset(14)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val stopTimeAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(14, 1)
    fun stopTimeInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 14, 1)
    /**
     * A qualifier for the end of the effective time period of this data link message, such as AFTER, ASOF, NLT, etc. Used with field stopTime to indicate a relative time.
     * Example: /// Example: AFTER
     * Constraints: Minimum length = 0, Maximum length = 8
     */
    val stopTimeMod : String?
        get() {
            val o = __offset(16)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val stopTimeModAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(16, 1)
    fun stopTimeModInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 16, 1)
    /**
     * The official identifier of the military establishment responsible for the operation plan and the identification number assigned to this plan.
     * Example: /// Example: SACEUR 106
     * Constraints: Minimum length = 0, Maximum length = 36
     */
    val planOrigNum : String?
        get() {
            val o = __offset(18)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val planOrigNumAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(18, 1)
    fun planOrigNumInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 18, 1)
    /**
     * Provides an additional caveat further identifying the exercise or modifies the exercise nickname.
     * Example: /// Example: CONTROL
     * Constraints: Minimum length = 0, Maximum length = 32
     */
    val opExInfo : String?
        get() {
            val o = __offset(20)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val opExInfoAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(20, 1)
    fun opExInfoInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 20, 1)
    /**
     * The secondary nickname of the option or the alternative of the operational plan or order.
     * Example: /// Example: ORANGE
     * Constraints: Minimum length = 0, Maximum length = 24
     */
    val opExInfoAlt : String?
        get() {
            val o = __offset(22)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val opExInfoAltAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(22, 1)
    fun opExInfoAltInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 22, 1)
    /**
     * The unique message identifier assigned by the originator.
     * Example: /// Example: 1201003
     * Constraints: Minimum length = 0, Maximum length = 16
     */
    val serialNum : String?
        get() {
            val o = __offset(24)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val serialNumAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(24, 1)
    fun serialNumInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 24, 1)
    /**
     * The month in which this message originated.
     * Example: /// Example: OCT
     * Constraints: Minimum length = 0, Maximum length = 12
     */
    val month : String?
        get() {
            val o = __offset(26)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val monthAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(26, 1)
    fun monthInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 26, 1)
    /**
     * The qualifier which caveats the message status such as AMP (Amplification), CHG (Change), etc.
     * Example: /// Example: CHG
     * Constraints: Minimum length = 0, Maximum length = 8
     */
    val qualifier : String?
        get() {
            val o = __offset(28)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val qualifierAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(28, 1)
    fun qualifierInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 28, 1)
    /**
     * The serial number associated with the message qualifier.
     * Example: /// Example: 1
     * Constraints: No constraints specified.
     */
    val qualSn : Int
        get() {
            val o = __offset(30)
            return if(o != 0) bb.getInt(o + bb_pos) else 0
        }
    /**
     * Collection of reference information. There can be 0 to many DataLinkReferences collections within the datalink service.
     * Example: /// Example: No example provided.
     * Constraints: No constraints specified.
     */
    fun references(j: Int) : String? {
        val o = __offset(32)
        return if (o != 0) {
            __string(__vector(o) + j * 4)
        } else {
            null
        }
    }
    val referencesLength : Int
        get() {
            val o = __offset(32); return if (o != 0) __vector_len(o) else 0
        }
    /**
     * The identifier for this data link message cancellation.
     * Example: /// Example: ABSTAT
     * Constraints: Minimum length = 0, Maximum length = 20
     */
    val canxId : String?
        get() {
            val o = __offset(34)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val canxIdAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(34, 1)
    fun canxIdInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 34, 1)
    /**
     * The originator of this data link message cancellation.
     * Example: /// Example: 505 AOC
     * Constraints: Minimum length = 0, Maximum length = 30
     */
    val canxOriginator : String?
        get() {
            val o = __offset(36)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val canxOriginatorAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(36, 1)
    fun canxOriginatorInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 36, 1)
    /**
     * Timestamp of the data link message cancellation, in ISO 8601 UTC format with millisecond precision.
     * Example: /// Example: 2024-01-07T13:55:43.123Z
     * Constraints: No constraints specified.
     */
    val canxTs : String?
        get() {
            val o = __offset(38)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val canxTsAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(38, 1)
    fun canxTsInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 38, 1)
    /**
     * Serial number assigned to this data link message cancellation.
     * Example: /// Example: ABC1234567
     * Constraints: Minimum length = 0, Maximum length = 10
     */
    val canxSerialNum : String?
        get() {
            val o = __offset(40)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val canxSerialNumAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(40, 1)
    fun canxSerialNumInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 40, 1)
    /**
     * Indicates any special actions, restrictions, guidance, or information relating to this data link message cancellation.
     * Example: /// Example: PASEP
     * Constraints: Minimum length = 0, Maximum length = 5
     */
    val canxSpecialNotation : String?
        get() {
            val o = __offset(42)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val canxSpecialNotationAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(42, 1)
    fun canxSpecialNotationInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 42, 1)
    /**
     * Array of NATO Subject Indicator Codes (SIC) or filing numbers of this data link message or document being cancelled.
     * Example: /// Example: ['RDU', 'X234BS']
     * Constraints: No constraints specified.
     */
    fun canxSics(j: Int) : String? {
        val o = __offset(44)
        return if (o != 0) {
            __string(__vector(o) + j * 4)
        } else {
            null
        }
    }
    val canxSicsLength : Int
        get() {
            val o = __offset(44); return if (o != 0) __vector_len(o) else 0
        }
    /**
     * The name of the point of contact for this data link message.
     * Example: /// Example: F. BURNS
     * Constraints: Minimum length = 0, Maximum length = 32
     */
    val pocName : String?
        get() {
            val o = __offset(46)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val pocNameAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(46, 1)
    fun pocNameInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 46, 1)
    /**
     * The rank or position of the point of contact for this data link message in a military or civilian organization.
     * Example: /// Example: MAJ
     * Constraints: Minimum length = 0, Maximum length = 16
     */
    val pocRank : String?
        get() {
            val o = __offset(48)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val pocRankAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(48, 1)
    fun pocRankInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 48, 1)
    /**
     * The unit identifier or call sign of the point of contact for this data link message.
     * Example: /// Example: 4077 MASH
     * Constraints: Minimum length = 0, Maximum length = 38
     */
    val pocCallSign : String?
        get() {
            val o = __offset(50)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val pocCallSignAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(50, 1)
    fun pocCallSignInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 50, 1)
    /**
     * The location name of the point of contact for this data link message.
     * Example: /// Example: CAMP SWAMPY
     * Constraints: Minimum length = 0, Maximum length = 20
     */
    val pocLocName : String?
        get() {
            val o = __offset(52)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val pocLocNameAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(52, 1)
    fun pocLocNameInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 52, 1)
    /**
     * WGS84 latitude of the point of contact for this data link message, in degrees. -90 to 90 degrees (negative values south of equator).
     * Example: /// Example: 45.23
     * Constraints: No constraints specified.
     */
    val pocLat : Double
        get() {
            val o = __offset(54)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * WGS84 longitude of the point of contact for this data link message, in degrees. -180 to 180 degrees (negative values west of Prime Meridian).
     * Example: /// Example: 179.1
     * Constraints: No constraints specified.
     */
    val pocLon : Double
        get() {
            val o = __offset(56)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Array of telephone numbers, radio frequency values, or email addresses of the point of contact for this data link message.
     * Example: /// Example: ['TEL:804-555-4142', 'TEL:804-867-5309']
     * Constraints: No constraints specified.
     */
    fun pocNums(j: Int) : String? {
        val o = __offset(58)
        return if (o != 0) {
            __string(__vector(o) + j * 4)
        } else {
            null
        }
    }
    val pocNumsLength : Int
        get() {
            val o = __offset(58); return if (o != 0) __vector_len(o) else 0
        }
    /**
     * The code for the point of reference from which the coordinates and networks are computed.
     * Example: /// Example: EUR-T
     * Constraints: Minimum length = 0, Maximum length = 5
     */
    val geoDatum : String?
        get() {
            val o = __offset(60)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val geoDatumAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(60, 1)
    fun geoDatumInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 60, 1)
    /**
     * Collection that identifies points of reference used in the establishment of the data links. There can be 1 to many DataLinkRefPoints collections within the datalink service.
     * Example: /// Example: No example provided.
     * Constraints: No constraints specified.
     */
    fun refPoints(j: Int) : String? {
        val o = __offset(62)
        return if (o != 0) {
            __string(__vector(o) + j * 4)
        } else {
            null
        }
    }
    val refPointsLength : Int
        get() {
            val o = __offset(62); return if (o != 0) __vector_len(o) else 0
        }
    /**
     * Collection of information regarding the function, frequency, and priority of interface control and coordination nets for this data link message. There can be 1 to many DataLinkVoiceCoord collections within the datalink service.
     * Example: /// Example: No example provided.
     * Constraints: No constraints specified.
     */
    fun voiceCoord(j: Int) : String? {
        val o = __offset(64)
        return if (o != 0) {
            __string(__vector(o) + j * 4)
        } else {
            null
        }
    }
    val voiceCoordLength : Int
        get() {
            val o = __offset(64); return if (o != 0) __vector_len(o) else 0
        }
    /**
     * Indicates the data terminal settings the system defaults to, either automatic correlation/decorrelation (AUTO) or manual (MAN).
     * Example: /// Example: MAN
     * Constraints: Minimum length = 0, Maximum length = 4
     */
    val sysDefaultCode : String?
        get() {
            val o = __offset(66)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val sysDefaultCodeAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(66, 1)
    fun sysDefaultCodeInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 66, 1)
    /**
     * The correlation window size multiplier to stretch or reduce the window size. Required if sysDefaultCode field is "MAN". Allowable entries are 0.5 to 3.0 in increments of 0.1.
     * Example: /// Example: 2.1
     * Constraints: No constraints specified.
     */
    val winSizeMult : Double
        get() {
            val o = __offset(68)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Number added to the basic window calculated from track qualities to ensure that windows still allow valid correlations. Required if sysDefaultCode field is "MAN". Allowable entries are 0.0 to 2.0 in increments of 0.25.
     * Example: /// Example: 1.25
     * Constraints: No constraints specified.
     */
    val winSizeMin : Double
        get() {
            val o = __offset(70)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Track quality to prevent correlation windows from being unrealistically large. Required if sysDefaultCode field is "MAN". Allowable entries are integers from 3 to 7.
     * Example: /// Example: 6
     * Constraints: No constraints specified.
     */
    val minTrackQual : Int
        get() {
            val o = __offset(72)
            return if(o != 0) bb.getInt(o + bb_pos) else 0
        }
    /**
     * Track quality to prevent correlation windows from being unrealistically small. Required if sysDefaultCode field is "MAN". Allowable entries are integers from 8 to 15.
     * Example: /// Example: 12
     * Constraints: No constraints specified.
     */
    val maxTrackQual : Int
        get() {
            val o = __offset(74)
            return if(o != 0) bb.getInt(o + bb_pos) else 0
        }
    /**
     * Track quality to enter if too many duals involving low track quality tracks are occurring. Required if sysDefaultCode field is "MAN". Allowable entries are integers from 2 to 6.
     * Example: /// Example: 3
     * Constraints: No constraints specified.
     */
    val resTrackQual : Int
        get() {
            val o = __offset(76)
            return if(o != 0) bb.getInt(o + bb_pos) else 0
        }
    /**
     * Maximum difference between the reported course of the remote track and the calculated course of the local track. Required if sysDefaultCode field is "MAN". Allowable entries are 15 to 90 in increments of 15 degrees.
     * Example: /// Example: 60
     * Constraints: No constraints specified.
     */
    val courseDiff : Int
        get() {
            val o = __offset(78)
            return if(o != 0) bb.getInt(o + bb_pos) else 0
        }
    /**
     * Maximum percentage the faster track speed may differ from the slower track speed. Required if sysDefaultCode field is "MAN". Allowable entries are 10 to 100 in increments of 10.
     * Example: /// Example: 50
     * Constraints: No constraints specified.
     */
    val speedDiff : Int
        get() {
            val o = __offset(80)
            return if(o != 0) bb.getInt(o + bb_pos) else 0
        }
    /**
     * Maximum altitude difference between two air tracks, in thousands of feet. Required if sysDefaultCode field is "MAN". Allowable entires are 5 to 50 in increments of 5000 feet.
     * Example: /// Example: 20
     * Constraints: No constraints specified.
     */
    val altDiff : Int
        get() {
            val o = __offset(82)
            return if(o != 0) bb.getInt(o + bb_pos) else 0
        }
    /**
     * Number used for minimum geodetic position quality. Required if sysDefaultCode field is "MAN". Allowable entries are integers from 1 to 5.
     * Example: /// Example: 3
     * Constraints: No constraints specified.
     */
    val minGeoPosQual : Int
        get() {
            val o = __offset(84)
            return if(o != 0) bb.getInt(o + bb_pos) else 0
        }
    /**
     * Number used for maximum geodetic position quality. Required if sysDefaultCode field is "MAN". Allowable entires are integers from 1 to 15.
     * Example: /// Example: 12
     * Constraints: No constraints specified.
     */
    val maxGeoPosQual : Int
        get() {
            val o = __offset(86)
            return if(o != 0) bb.getInt(o + bb_pos) else 0
        }
    /**
     * Distance between the common and remote track is to exceed the applicable correlation window for the two tracks in order to be decorrelated. Required if sysDefaultCode field is "MAN". Allowable entries are 1.0 to 2.0 in increments of 0.1.
     * Example: /// Example: 1.7
     * Constraints: No constraints specified.
     */
    val decorrWinMult : Double
        get() {
            val o = __offset(88)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Number of consecutive remote track reports that must meet the decorrelation criteria before the decorrelation is executed. Required if sysDefaultCode field is "MAN". Allowable entries are integers from 1 to 5.
     * Example: /// Example: 3
     * Constraints: No constraints specified.
     */
    val consecDecorr : Int
        get() {
            val o = __offset(90)
            return if(o != 0) bb.getInt(o + bb_pos) else 0
        }
    /**
     * Collection of contact and identification information for designated multilink coordinator duty assignments. There can be 0 to many DataLinkMultiDuty collections within the datalink service.
     * Example: /// Example: No example provided.
     * Constraints: No constraints specified.
     */
    fun multiDuty(j: Int) : String? {
        val o = __offset(92)
        return if (o != 0) {
            __string(__vector(o) + j * 4)
        } else {
            null
        }
    }
    val multiDutyLength : Int
        get() {
            val o = __offset(92); return if (o != 0) __vector_len(o) else 0
        }
    /**
     * Collection of information describing the establishment and detailed operation of tactical data links. There can be 0 to many DataLinkOps collections within the datalink service.
     * Example: /// Example: No example provided.
     * Constraints: No constraints specified.
     */
    fun ops(j: Int) : String? {
        val o = __offset(94)
        return if (o != 0) {
            __string(__vector(o) + j * 4)
        } else {
            null
        }
    }
    val opsLength : Int
        get() {
            val o = __offset(94); return if (o != 0) __vector_len(o) else 0
        }
    /**
     * Designator of the unit for Joint Range Extension (JRE).
     * Example: /// Example: CVN-72
     * Constraints: Minimum length = 0, Maximum length = 30
     */
    val jreUnitDes : String?
        get() {
            val o = __offset(96)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val jreUnitDesAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(96, 1)
    fun jreUnitDesInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 96, 1)
    /**
     * Call sign which identifies one or more communications facilities, commands, authorities, or activities for Joint Range Extension (JRE) units.
     * Example: /// Example: CHARLIE ONE
     * Constraints: Minimum length = 0, Maximum length = 38
     */
    val jreCallSign : String?
        get() {
            val o = __offset(98)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val jreCallSignAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(98, 1)
    fun jreCallSignInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 98, 1)
    /**
     * Link-16 octal track number assigned as the primary JTIDS unit address.
     * Example: /// Example: 71777
     * Constraints: No constraints specified.
     */
    val jrePriAdd : Int
        get() {
            val o = __offset(100)
            return if(o != 0) bb.getInt(o + bb_pos) else 0
        }
    /**
     * Link-16 octal track number assigned as the secondary JTIDS unit address.
     * Example: /// Example: 77771
     * Constraints: No constraints specified.
     */
    val jreSecAdd : Int
        get() {
            val o = __offset(102)
            return if(o != 0) bb.getInt(o + bb_pos) else 0
        }
    /**
     * Joint Range Extension (JRE) unit details.
     * Example: /// Example: JRE details
     * Constraints: Minimum length = 0, Maximum length = 3000
     */
    val jreDetails : String?
        get() {
            val o = __offset(104)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val jreDetailsAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(104, 1)
    fun jreDetailsInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 104, 1)
    /**
     * Collection of special track numbers used on the data links. There can be 0 to many DataLinkSpecTracks collections within the datalink service.
     * Example: /// Example: No example provided.
     * Constraints: No constraints specified.
     */
    fun specTracks(j: Int) : String? {
        val o = __offset(106)
        return if (o != 0) {
            __string(__vector(o) + j * 4)
        } else {
            null
        }
    }
    val specTracksLength : Int
        get() {
            val o = __offset(106); return if (o != 0) __vector_len(o) else 0
        }
    /**
     * Array of non-link specific data unit designators.
     * Example: /// Example: ['CS:GRAY GHOST', 'CS:WHITE WHALE']
     * Constraints: No constraints specified.
     */
    fun nonLinkUnitDes(j: Int) : String? {
        val o = __offset(108)
        return if (o != 0) {
            __string(__vector(o) + j * 4)
        } else {
            null
        }
    }
    val nonLinkUnitDesLength : Int
        get() {
            val o = __offset(108); return if (o != 0) __vector_len(o) else 0
        }
    /**
     * Array of Link-16 octal track numbers used as the lower limit of a track block.
     * Example: /// Example: [1234, 2345]
     * Constraints: No constraints specified.
     */
    fun trackNumBlockLls(j: Int) : String? {
        val o = __offset(110)
        return if (o != 0) {
            __string(__vector(o) + j * 4)
        } else {
            null
        }
    }
    val trackNumBlockLlsLength : Int
        get() {
            val o = __offset(110); return if (o != 0) __vector_len(o) else 0
        }
    /**
     * Array of defined ranges of Link-11/11B track numbers assigned to a participating unit or reporting unit.
     * Example: /// Example: ['0200-0300', '0400-4412']
     * Constraints: No constraints specified.
     */
    fun trackNumBlocks(j: Int) : String? {
        val o = __offset(112)
        return if (o != 0) {
            __string(__vector(o) + j * 4)
        } else {
            null
        }
    }
    val trackNumBlocksLength : Int
        get() {
            val o = __offset(112); return if (o != 0) __vector_len(o) else 0
        }
    /**
     * Data link management code word.
     * Example: /// Example: VICTOR
     * Constraints: Minimum length = 0, Maximum length = 15
     */
    val mgmtCode : String?
        get() {
            val o = __offset(114)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val mgmtCodeAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(114, 1)
    fun mgmtCodeInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 114, 1)
    /**
     * Data link management code word meaning.
     * Example: /// Example: ORBIT AT POINT BRAVO
     * Constraints: Minimum length = 0, Maximum length = 50
     */
    val mgmtCodeMeaning : String?
        get() {
            val o = __offset(116)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val mgmtCodeMeaningAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(116, 1)
    fun mgmtCodeMeaningInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 116, 1)
    /**
     * Flag Indicating if formal acknowledgement is required for the particular data link message being sent.
     * Example: /// Example: True
     * Constraints: No constraints specified.
     */
    val ackReq : Boolean
        get() {
            val o = __offset(118)
            return if(o != 0) 0.toByte() != bb.get(o + bb_pos) else false
        }
    /**
     * Array of instructions for acknowledging and the force or units required to acknowledge the data link message being sent.
     * Example: /// Example: ['AOC EXT 2345', '317 AW']
     * Constraints: No constraints specified.
     */
    fun ackInstUnits(j: Int) : String? {
        val o = __offset(120)
        return if (o != 0) {
            __string(__vector(o) + j * 4)
        } else {
            null
        }
    }
    val ackInstUnitsLength : Int
        get() {
            val o = __offset(120); return if (o != 0) __vector_len(o) else 0
        }
    /**
     * Markings that define the source material or the original classification authority for this data link message.
     * Example: /// Example: USJFCOM EXORD SOLID WASTE 98
     * Constraints: Minimum length = 0, Maximum length = 55
     */
    val classSource : String?
        get() {
            val o = __offset(122)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val classSourceAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(122, 1)
    fun classSourceInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 122, 1)
    /**
     * Array of codes that indicate the reasons material is classified.
     * Example: /// Example: ['15C', '15D']
     * Constraints: No constraints specified.
     */
    fun classReasons(j: Int) : String? {
        val o = __offset(124)
        return if (o != 0) {
            __string(__vector(o) + j * 4)
        } else {
            null
        }
    }
    val classReasonsLength : Int
        get() {
            val o = __offset(124); return if (o != 0) __vector_len(o) else 0
        }
    /**
     * Array of markings that provide the literal guidance or dates for the downgrading or declassification of this data link message.
     * Example: /// Example: ['AT EXERCISE ENDEX', 'DATE:25NOV1997']
     * Constraints: No constraints specified.
     */
    fun decInstDates(j: Int) : String? {
        val o = __offset(126)
        return if (o != 0) {
            __string(__vector(o) + j * 4)
        } else {
            null
        }
    }
    val decInstDatesLength : Int
        get() {
            val o = __offset(126); return if (o != 0) __vector_len(o) else 0
        }
    /**
     * Array of codes that provide justification for exemption from automatic downgrading or declassification.
     * Example: /// Example: ['X1', 'X2']
     * Constraints: No constraints specified.
     */
    fun decExemptCodes(j: Int) : String? {
        val o = __offset(128)
        return if (o != 0) {
            __string(__vector(o) + j * 4)
        } else {
            null
        }
    }
    val decExemptCodesLength : Int
        get() {
            val o = __offset(128); return if (o != 0) __vector_len(o) else 0
        }
    /**
     * Collection of remarks associated with this data link message.
     * Example: /// Example: No example provided.
     * Constraints: No constraints specified.
     */
    fun remarks(j: Int) : String? {
        val o = __offset(130)
        return if (o != 0) {
            __string(__vector(o) + j * 4)
        } else {
            null
        }
    }
    val remarksLength : Int
        get() {
            val o = __offset(130); return if (o != 0) __vector_len(o) else 0
        }
    /**
     * Optional URI location in the document repository of the raw file parsed by the system to produce this record. To download the raw file, prepend https://udl-hostname/scs/download?id= to this value.
     * Example: /// Example: Example URI
     * Constraints: Minimum length = 0, Maximum length = 256
     */
    val rawFileUri : String?
        get() {
            val o = __offset(132)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val rawFileUriAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(132, 1)
    fun rawFileUriInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 132, 1)
    /**
     * Time the row was created in the database, auto-populated by the system.
     * Example: /// Example: 2018-01-01T16:00:00.123Z
     * Constraints: No constraints specified.
     */
    val createdAt : String?
        get() {
            val o = __offset(134)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val createdAtAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(134, 1)
    fun createdAtInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 134, 1)
    /**
     * Application user who created the row in the database, auto-populated by the system.
     * Example: /// Example: some.user
     * Constraints: Minimum length = 1, Maximum length = 64
     */
    val createdBy : String?
        get() {
            val o = __offset(136)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val createdByAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(136, 1)
    fun createdByInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 136, 1)
    /**
     * Time the row was updated in the database, auto-populated by the system.
     * Example: /// Example: 2018-01-01T16:00:00.123Z
     * Constraints: No constraints specified.
     */
    val updatedAt : String?
        get() {
            val o = __offset(138)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val updatedAtAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(138, 1)
    fun updatedAtInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 138, 1)
    /**
     * Application user who updated the row in the database, auto-populated by the system.
     * Example: /// Example: some.user
     * Constraints: Minimum length = 0, Maximum length = 64
     */
    val updatedBy : String?
        get() {
            val o = __offset(140)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val updatedByAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(140, 1)
    fun updatedByInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 140, 1)
    /**
     * The source data library from which this record was received. This could be a remote or tactical UDL or another data library. If null, the record should be assumed to have originated from the primary Enterprise UDL.
     * Example: /// Example: AXE
     * Constraints: Minimum length = 0, Maximum length = 64
     */
    val sourceDl : String?
        get() {
            val o = __offset(142)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val sourceDlAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(142, 1)
    fun sourceDlInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 142, 1)
    /**
     * Source of the data.
     * Example: /// Example: Bluestaq
     * Constraints: Minimum length = 1, Maximum length = 64
     */
    val source : String?
        get() {
            val o = __offset(144)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val sourceAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(144, 1)
    fun sourceInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 144, 1)
    /**
     * Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
     * Example: /// Example: THIRD_PARTY_DATASOURCE
     * Constraints: Minimum length = 0, Maximum length = 64
     */
    val origin : String?
        get() {
            val o = __offset(146)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val originAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(146, 1)
    fun originInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 146, 1)
    /**
     * The originating source network on which this record was created, auto-populated by the system.
     * Example: /// Example: OPS1
     * Constraints: Minimum length = 0, Maximum length = 32
     */
    val origNetwork : String?
        get() {
            val o = __offset(148)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val origNetworkAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(148, 1)
    fun origNetworkInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 148, 1)
    /**
     * Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
     * EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
     * REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
     * SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
     * TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
     * Example: /// Example: TEST
     * Constraints: Minimum length = 1, Maximum length = 32
     */
    val dataMode : Byte
        get() {
            val o = __offset(150)
            return if(o != 0) bb.get(o + bb_pos) else 0
        }
    companion object {
        fun validateVersion() = Constants.FLATBUFFERS_24_3_25()
        fun getRootAsDataLink_Ingest(_bb: ByteBuffer): DataLink_Ingest = getRootAsDataLink_Ingest(_bb, DataLink_Ingest())
        fun getRootAsDataLink_Ingest(_bb: ByteBuffer, obj: DataLink_Ingest): DataLink_Ingest {
            _bb.order(ByteOrder.LITTLE_ENDIAN)
            return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb))
        }
        fun DataLink_IngestBufferHasIdentifier(_bb: ByteBuffer) : Boolean = __has_identifier(_bb, "DATA")
        fun createDataLink_Ingest(builder: FlatBufferBuilder, idOffset: Int, classificationMarkingOffset: Int, opExNameOffset: Int, originatorOffset: Int, startTimeOffset: Int, stopTimeOffset: Int, stopTimeModOffset: Int, planOrigNumOffset: Int, opExInfoOffset: Int, opExInfoAltOffset: Int, serialNumOffset: Int, monthOffset: Int, qualifierOffset: Int, qualSn: Int, referencesOffset: Int, canxIdOffset: Int, canxOriginatorOffset: Int, canxTsOffset: Int, canxSerialNumOffset: Int, canxSpecialNotationOffset: Int, canxSicsOffset: Int, pocNameOffset: Int, pocRankOffset: Int, pocCallSignOffset: Int, pocLocNameOffset: Int, pocLat: Double, pocLon: Double, pocNumsOffset: Int, geoDatumOffset: Int, refPointsOffset: Int, voiceCoordOffset: Int, sysDefaultCodeOffset: Int, winSizeMult: Double, winSizeMin: Double, minTrackQual: Int, maxTrackQual: Int, resTrackQual: Int, courseDiff: Int, speedDiff: Int, altDiff: Int, minGeoPosQual: Int, maxGeoPosQual: Int, decorrWinMult: Double, consecDecorr: Int, multiDutyOffset: Int, opsOffset: Int, jreUnitDesOffset: Int, jreCallSignOffset: Int, jrePriAdd: Int, jreSecAdd: Int, jreDetailsOffset: Int, specTracksOffset: Int, nonLinkUnitDesOffset: Int, trackNumBlockLlsOffset: Int, trackNumBlocksOffset: Int, mgmtCodeOffset: Int, mgmtCodeMeaningOffset: Int, ackReq: Boolean, ackInstUnitsOffset: Int, classSourceOffset: Int, classReasonsOffset: Int, decInstDatesOffset: Int, decExemptCodesOffset: Int, remarksOffset: Int, rawFileUriOffset: Int, createdAtOffset: Int, createdByOffset: Int, updatedAtOffset: Int, updatedByOffset: Int, sourceDlOffset: Int, sourceOffset: Int, originOffset: Int, origNetworkOffset: Int, dataMode: Byte) : Int {
            builder.startTable(74)
            addDecorrWinMult(builder, decorrWinMult)
            addWinSizeMin(builder, winSizeMin)
            addWinSizeMult(builder, winSizeMult)
            addPocLon(builder, pocLon)
            addPocLat(builder, pocLat)
            addOrigNetwork(builder, origNetworkOffset)
            addOrigin(builder, originOffset)
            addSource(builder, sourceOffset)
            addSourceDL(builder, sourceDlOffset)
            addUpdatedBy(builder, updatedByOffset)
            addUpdatedAt(builder, updatedAtOffset)
            addCreatedBy(builder, createdByOffset)
            addCreatedAt(builder, createdAtOffset)
            addRawFileURI(builder, rawFileUriOffset)
            addRemarks(builder, remarksOffset)
            addDecExemptCodes(builder, decExemptCodesOffset)
            addDecInstDates(builder, decInstDatesOffset)
            addClassReasons(builder, classReasonsOffset)
            addClassSource(builder, classSourceOffset)
            addAckInstUnits(builder, ackInstUnitsOffset)
            addMgmtCodeMeaning(builder, mgmtCodeMeaningOffset)
            addMgmtCode(builder, mgmtCodeOffset)
            addTrackNumBlocks(builder, trackNumBlocksOffset)
            addTrackNumBlockLLs(builder, trackNumBlockLlsOffset)
            addNonLinkUnitDes(builder, nonLinkUnitDesOffset)
            addSpecTracks(builder, specTracksOffset)
            addJreDetails(builder, jreDetailsOffset)
            addJreSecAdd(builder, jreSecAdd)
            addJrePriAdd(builder, jrePriAdd)
            addJreCallSign(builder, jreCallSignOffset)
            addJreUnitDes(builder, jreUnitDesOffset)
            addOps(builder, opsOffset)
            addMultiDuty(builder, multiDutyOffset)
            addConsecDecorr(builder, consecDecorr)
            addMaxGeoPosQual(builder, maxGeoPosQual)
            addMinGeoPosQual(builder, minGeoPosQual)
            addAltDiff(builder, altDiff)
            addSpeedDiff(builder, speedDiff)
            addCourseDiff(builder, courseDiff)
            addResTrackQual(builder, resTrackQual)
            addMaxTrackQual(builder, maxTrackQual)
            addMinTrackQual(builder, minTrackQual)
            addSysDefaultCode(builder, sysDefaultCodeOffset)
            addVoiceCoord(builder, voiceCoordOffset)
            addRefPoints(builder, refPointsOffset)
            addGeoDatum(builder, geoDatumOffset)
            addPocNums(builder, pocNumsOffset)
            addPocLocName(builder, pocLocNameOffset)
            addPocCallSign(builder, pocCallSignOffset)
            addPocRank(builder, pocRankOffset)
            addPocName(builder, pocNameOffset)
            addCanxSICs(builder, canxSicsOffset)
            addCanxSpecialNotation(builder, canxSpecialNotationOffset)
            addCanxSerialNum(builder, canxSerialNumOffset)
            addCanxTs(builder, canxTsOffset)
            addCanxOriginator(builder, canxOriginatorOffset)
            addCanxId(builder, canxIdOffset)
            addReferences(builder, referencesOffset)
            addQualSN(builder, qualSn)
            addQualifier(builder, qualifierOffset)
            addMonth(builder, monthOffset)
            addSerialNum(builder, serialNumOffset)
            addOpExInfoAlt(builder, opExInfoAltOffset)
            addOpExInfo(builder, opExInfoOffset)
            addPlanOrigNum(builder, planOrigNumOffset)
            addStopTimeMod(builder, stopTimeModOffset)
            addStopTime(builder, stopTimeOffset)
            addStartTime(builder, startTimeOffset)
            addOriginator(builder, originatorOffset)
            addOpExName(builder, opExNameOffset)
            addClassificationMarking(builder, classificationMarkingOffset)
            addId(builder, idOffset)
            addDataMode(builder, dataMode)
            addAckReq(builder, ackReq)
            return endDataLink_Ingest(builder)
        }
        fun startDataLink_Ingest(builder: FlatBufferBuilder) = builder.startTable(74)
        fun addId(builder: FlatBufferBuilder, id: Int) = builder.addOffset(0, id, 0)
        fun addClassificationMarking(builder: FlatBufferBuilder, classificationMarking: Int) = builder.addOffset(1, classificationMarking, 0)
        fun addOpExName(builder: FlatBufferBuilder, opExName: Int) = builder.addOffset(2, opExName, 0)
        fun addOriginator(builder: FlatBufferBuilder, originator: Int) = builder.addOffset(3, originator, 0)
        fun addStartTime(builder: FlatBufferBuilder, startTime: Int) = builder.addOffset(4, startTime, 0)
        fun addStopTime(builder: FlatBufferBuilder, stopTime: Int) = builder.addOffset(5, stopTime, 0)
        fun addStopTimeMod(builder: FlatBufferBuilder, stopTimeMod: Int) = builder.addOffset(6, stopTimeMod, 0)
        fun addPlanOrigNum(builder: FlatBufferBuilder, planOrigNum: Int) = builder.addOffset(7, planOrigNum, 0)
        fun addOpExInfo(builder: FlatBufferBuilder, opExInfo: Int) = builder.addOffset(8, opExInfo, 0)
        fun addOpExInfoAlt(builder: FlatBufferBuilder, opExInfoAlt: Int) = builder.addOffset(9, opExInfoAlt, 0)
        fun addSerialNum(builder: FlatBufferBuilder, serialNum: Int) = builder.addOffset(10, serialNum, 0)
        fun addMonth(builder: FlatBufferBuilder, month: Int) = builder.addOffset(11, month, 0)
        fun addQualifier(builder: FlatBufferBuilder, qualifier: Int) = builder.addOffset(12, qualifier, 0)
        fun addQualSN(builder: FlatBufferBuilder, qualSn: Int) = builder.addInt(13, qualSn, 0)
        fun addReferences(builder: FlatBufferBuilder, references: Int) = builder.addOffset(14, references, 0)
        fun createReferencesVector(builder: FlatBufferBuilder, data: IntArray) : Int {
            builder.startVector(4, data.size, 4)
            for (i in data.size - 1 downTo 0) {
                builder.addOffset(data[i])
            }
            return builder.endVector()
        }
        fun startReferencesVector(builder: FlatBufferBuilder, numElems: Int) = builder.startVector(4, numElems, 4)
        fun addCanxId(builder: FlatBufferBuilder, canxId: Int) = builder.addOffset(15, canxId, 0)
        fun addCanxOriginator(builder: FlatBufferBuilder, canxOriginator: Int) = builder.addOffset(16, canxOriginator, 0)
        fun addCanxTs(builder: FlatBufferBuilder, canxTs: Int) = builder.addOffset(17, canxTs, 0)
        fun addCanxSerialNum(builder: FlatBufferBuilder, canxSerialNum: Int) = builder.addOffset(18, canxSerialNum, 0)
        fun addCanxSpecialNotation(builder: FlatBufferBuilder, canxSpecialNotation: Int) = builder.addOffset(19, canxSpecialNotation, 0)
        fun addCanxSICs(builder: FlatBufferBuilder, canxSics: Int) = builder.addOffset(20, canxSics, 0)
        fun createCanxSicsVector(builder: FlatBufferBuilder, data: IntArray) : Int {
            builder.startVector(4, data.size, 4)
            for (i in data.size - 1 downTo 0) {
                builder.addOffset(data[i])
            }
            return builder.endVector()
        }
        fun startCanxSicsVector(builder: FlatBufferBuilder, numElems: Int) = builder.startVector(4, numElems, 4)
        fun addPocName(builder: FlatBufferBuilder, pocName: Int) = builder.addOffset(21, pocName, 0)
        fun addPocRank(builder: FlatBufferBuilder, pocRank: Int) = builder.addOffset(22, pocRank, 0)
        fun addPocCallSign(builder: FlatBufferBuilder, pocCallSign: Int) = builder.addOffset(23, pocCallSign, 0)
        fun addPocLocName(builder: FlatBufferBuilder, pocLocName: Int) = builder.addOffset(24, pocLocName, 0)
        fun addPocLat(builder: FlatBufferBuilder, pocLat: Double) = builder.addDouble(25, pocLat, 0.0)
        fun addPocLon(builder: FlatBufferBuilder, pocLon: Double) = builder.addDouble(26, pocLon, 0.0)
        fun addPocNums(builder: FlatBufferBuilder, pocNums: Int) = builder.addOffset(27, pocNums, 0)
        fun createPocNumsVector(builder: FlatBufferBuilder, data: IntArray) : Int {
            builder.startVector(4, data.size, 4)
            for (i in data.size - 1 downTo 0) {
                builder.addOffset(data[i])
            }
            return builder.endVector()
        }
        fun startPocNumsVector(builder: FlatBufferBuilder, numElems: Int) = builder.startVector(4, numElems, 4)
        fun addGeoDatum(builder: FlatBufferBuilder, geoDatum: Int) = builder.addOffset(28, geoDatum, 0)
        fun addRefPoints(builder: FlatBufferBuilder, refPoints: Int) = builder.addOffset(29, refPoints, 0)
        fun createRefPointsVector(builder: FlatBufferBuilder, data: IntArray) : Int {
            builder.startVector(4, data.size, 4)
            for (i in data.size - 1 downTo 0) {
                builder.addOffset(data[i])
            }
            return builder.endVector()
        }
        fun startRefPointsVector(builder: FlatBufferBuilder, numElems: Int) = builder.startVector(4, numElems, 4)
        fun addVoiceCoord(builder: FlatBufferBuilder, voiceCoord: Int) = builder.addOffset(30, voiceCoord, 0)
        fun createVoiceCoordVector(builder: FlatBufferBuilder, data: IntArray) : Int {
            builder.startVector(4, data.size, 4)
            for (i in data.size - 1 downTo 0) {
                builder.addOffset(data[i])
            }
            return builder.endVector()
        }
        fun startVoiceCoordVector(builder: FlatBufferBuilder, numElems: Int) = builder.startVector(4, numElems, 4)
        fun addSysDefaultCode(builder: FlatBufferBuilder, sysDefaultCode: Int) = builder.addOffset(31, sysDefaultCode, 0)
        fun addWinSizeMult(builder: FlatBufferBuilder, winSizeMult: Double) = builder.addDouble(32, winSizeMult, 0.0)
        fun addWinSizeMin(builder: FlatBufferBuilder, winSizeMin: Double) = builder.addDouble(33, winSizeMin, 0.0)
        fun addMinTrackQual(builder: FlatBufferBuilder, minTrackQual: Int) = builder.addInt(34, minTrackQual, 0)
        fun addMaxTrackQual(builder: FlatBufferBuilder, maxTrackQual: Int) = builder.addInt(35, maxTrackQual, 0)
        fun addResTrackQual(builder: FlatBufferBuilder, resTrackQual: Int) = builder.addInt(36, resTrackQual, 0)
        fun addCourseDiff(builder: FlatBufferBuilder, courseDiff: Int) = builder.addInt(37, courseDiff, 0)
        fun addSpeedDiff(builder: FlatBufferBuilder, speedDiff: Int) = builder.addInt(38, speedDiff, 0)
        fun addAltDiff(builder: FlatBufferBuilder, altDiff: Int) = builder.addInt(39, altDiff, 0)
        fun addMinGeoPosQual(builder: FlatBufferBuilder, minGeoPosQual: Int) = builder.addInt(40, minGeoPosQual, 0)
        fun addMaxGeoPosQual(builder: FlatBufferBuilder, maxGeoPosQual: Int) = builder.addInt(41, maxGeoPosQual, 0)
        fun addDecorrWinMult(builder: FlatBufferBuilder, decorrWinMult: Double) = builder.addDouble(42, decorrWinMult, 0.0)
        fun addConsecDecorr(builder: FlatBufferBuilder, consecDecorr: Int) = builder.addInt(43, consecDecorr, 0)
        fun addMultiDuty(builder: FlatBufferBuilder, multiDuty: Int) = builder.addOffset(44, multiDuty, 0)
        fun createMultiDutyVector(builder: FlatBufferBuilder, data: IntArray) : Int {
            builder.startVector(4, data.size, 4)
            for (i in data.size - 1 downTo 0) {
                builder.addOffset(data[i])
            }
            return builder.endVector()
        }
        fun startMultiDutyVector(builder: FlatBufferBuilder, numElems: Int) = builder.startVector(4, numElems, 4)
        fun addOps(builder: FlatBufferBuilder, ops: Int) = builder.addOffset(45, ops, 0)
        fun createOpsVector(builder: FlatBufferBuilder, data: IntArray) : Int {
            builder.startVector(4, data.size, 4)
            for (i in data.size - 1 downTo 0) {
                builder.addOffset(data[i])
            }
            return builder.endVector()
        }
        fun startOpsVector(builder: FlatBufferBuilder, numElems: Int) = builder.startVector(4, numElems, 4)
        fun addJreUnitDes(builder: FlatBufferBuilder, jreUnitDes: Int) = builder.addOffset(46, jreUnitDes, 0)
        fun addJreCallSign(builder: FlatBufferBuilder, jreCallSign: Int) = builder.addOffset(47, jreCallSign, 0)
        fun addJrePriAdd(builder: FlatBufferBuilder, jrePriAdd: Int) = builder.addInt(48, jrePriAdd, 0)
        fun addJreSecAdd(builder: FlatBufferBuilder, jreSecAdd: Int) = builder.addInt(49, jreSecAdd, 0)
        fun addJreDetails(builder: FlatBufferBuilder, jreDetails: Int) = builder.addOffset(50, jreDetails, 0)
        fun addSpecTracks(builder: FlatBufferBuilder, specTracks: Int) = builder.addOffset(51, specTracks, 0)
        fun createSpecTracksVector(builder: FlatBufferBuilder, data: IntArray) : Int {
            builder.startVector(4, data.size, 4)
            for (i in data.size - 1 downTo 0) {
                builder.addOffset(data[i])
            }
            return builder.endVector()
        }
        fun startSpecTracksVector(builder: FlatBufferBuilder, numElems: Int) = builder.startVector(4, numElems, 4)
        fun addNonLinkUnitDes(builder: FlatBufferBuilder, nonLinkUnitDes: Int) = builder.addOffset(52, nonLinkUnitDes, 0)
        fun createNonLinkUnitDesVector(builder: FlatBufferBuilder, data: IntArray) : Int {
            builder.startVector(4, data.size, 4)
            for (i in data.size - 1 downTo 0) {
                builder.addOffset(data[i])
            }
            return builder.endVector()
        }
        fun startNonLinkUnitDesVector(builder: FlatBufferBuilder, numElems: Int) = builder.startVector(4, numElems, 4)
        fun addTrackNumBlockLLs(builder: FlatBufferBuilder, trackNumBlockLls: Int) = builder.addOffset(53, trackNumBlockLls, 0)
        fun createTrackNumBlockLlsVector(builder: FlatBufferBuilder, data: IntArray) : Int {
            builder.startVector(4, data.size, 4)
            for (i in data.size - 1 downTo 0) {
                builder.addOffset(data[i])
            }
            return builder.endVector()
        }
        fun startTrackNumBlockLlsVector(builder: FlatBufferBuilder, numElems: Int) = builder.startVector(4, numElems, 4)
        fun addTrackNumBlocks(builder: FlatBufferBuilder, trackNumBlocks: Int) = builder.addOffset(54, trackNumBlocks, 0)
        fun createTrackNumBlocksVector(builder: FlatBufferBuilder, data: IntArray) : Int {
            builder.startVector(4, data.size, 4)
            for (i in data.size - 1 downTo 0) {
                builder.addOffset(data[i])
            }
            return builder.endVector()
        }
        fun startTrackNumBlocksVector(builder: FlatBufferBuilder, numElems: Int) = builder.startVector(4, numElems, 4)
        fun addMgmtCode(builder: FlatBufferBuilder, mgmtCode: Int) = builder.addOffset(55, mgmtCode, 0)
        fun addMgmtCodeMeaning(builder: FlatBufferBuilder, mgmtCodeMeaning: Int) = builder.addOffset(56, mgmtCodeMeaning, 0)
        fun addAckReq(builder: FlatBufferBuilder, ackReq: Boolean) = builder.addBoolean(57, ackReq, false)
        fun addAckInstUnits(builder: FlatBufferBuilder, ackInstUnits: Int) = builder.addOffset(58, ackInstUnits, 0)
        fun createAckInstUnitsVector(builder: FlatBufferBuilder, data: IntArray) : Int {
            builder.startVector(4, data.size, 4)
            for (i in data.size - 1 downTo 0) {
                builder.addOffset(data[i])
            }
            return builder.endVector()
        }
        fun startAckInstUnitsVector(builder: FlatBufferBuilder, numElems: Int) = builder.startVector(4, numElems, 4)
        fun addClassSource(builder: FlatBufferBuilder, classSource: Int) = builder.addOffset(59, classSource, 0)
        fun addClassReasons(builder: FlatBufferBuilder, classReasons: Int) = builder.addOffset(60, classReasons, 0)
        fun createClassReasonsVector(builder: FlatBufferBuilder, data: IntArray) : Int {
            builder.startVector(4, data.size, 4)
            for (i in data.size - 1 downTo 0) {
                builder.addOffset(data[i])
            }
            return builder.endVector()
        }
        fun startClassReasonsVector(builder: FlatBufferBuilder, numElems: Int) = builder.startVector(4, numElems, 4)
        fun addDecInstDates(builder: FlatBufferBuilder, decInstDates: Int) = builder.addOffset(61, decInstDates, 0)
        fun createDecInstDatesVector(builder: FlatBufferBuilder, data: IntArray) : Int {
            builder.startVector(4, data.size, 4)
            for (i in data.size - 1 downTo 0) {
                builder.addOffset(data[i])
            }
            return builder.endVector()
        }
        fun startDecInstDatesVector(builder: FlatBufferBuilder, numElems: Int) = builder.startVector(4, numElems, 4)
        fun addDecExemptCodes(builder: FlatBufferBuilder, decExemptCodes: Int) = builder.addOffset(62, decExemptCodes, 0)
        fun createDecExemptCodesVector(builder: FlatBufferBuilder, data: IntArray) : Int {
            builder.startVector(4, data.size, 4)
            for (i in data.size - 1 downTo 0) {
                builder.addOffset(data[i])
            }
            return builder.endVector()
        }
        fun startDecExemptCodesVector(builder: FlatBufferBuilder, numElems: Int) = builder.startVector(4, numElems, 4)
        fun addRemarks(builder: FlatBufferBuilder, remarks: Int) = builder.addOffset(63, remarks, 0)
        fun createRemarksVector(builder: FlatBufferBuilder, data: IntArray) : Int {
            builder.startVector(4, data.size, 4)
            for (i in data.size - 1 downTo 0) {
                builder.addOffset(data[i])
            }
            return builder.endVector()
        }
        fun startRemarksVector(builder: FlatBufferBuilder, numElems: Int) = builder.startVector(4, numElems, 4)
        fun addRawFileURI(builder: FlatBufferBuilder, rawFileUri: Int) = builder.addOffset(64, rawFileUri, 0)
        fun addCreatedAt(builder: FlatBufferBuilder, createdAt: Int) = builder.addOffset(65, createdAt, 0)
        fun addCreatedBy(builder: FlatBufferBuilder, createdBy: Int) = builder.addOffset(66, createdBy, 0)
        fun addUpdatedAt(builder: FlatBufferBuilder, updatedAt: Int) = builder.addOffset(67, updatedAt, 0)
        fun addUpdatedBy(builder: FlatBufferBuilder, updatedBy: Int) = builder.addOffset(68, updatedBy, 0)
        fun addSourceDL(builder: FlatBufferBuilder, sourceDl: Int) = builder.addOffset(69, sourceDl, 0)
        fun addSource(builder: FlatBufferBuilder, source: Int) = builder.addOffset(70, source, 0)
        fun addOrigin(builder: FlatBufferBuilder, origin: Int) = builder.addOffset(71, origin, 0)
        fun addOrigNetwork(builder: FlatBufferBuilder, origNetwork: Int) = builder.addOffset(72, origNetwork, 0)
        fun addDataMode(builder: FlatBufferBuilder, dataMode: Byte) = builder.addByte(73, dataMode, 0)
        fun endDataLink_Ingest(builder: FlatBufferBuilder) : Int {
            val o = builder.endTable()
            return o
        }
        fun finishDataLinkIngestBuffer(builder: FlatBufferBuilder, offset: Int) = builder.finish(offset, "DATA")
        fun finishSizePrefixedDataLink_IngestBuffer(builder: FlatBufferBuilder, offset: Int) = builder.finishSizePrefixed(offset, "DATA")
    }
}
