// automatically generated by the FlatBuffers compiler, do not modify

import com.google.flatbuffers.BaseVector
import com.google.flatbuffers.BooleanVector
import com.google.flatbuffers.ByteVector
import com.google.flatbuffers.Constants
import com.google.flatbuffers.DoubleVector
import com.google.flatbuffers.FlatBufferBuilder
import com.google.flatbuffers.FloatVector
import com.google.flatbuffers.LongVector
import com.google.flatbuffers.StringVector
import com.google.flatbuffers.Struct
import com.google.flatbuffers.Table
import com.google.flatbuffers.UnionVector
import java.nio.ByteBuffer
import java.nio.ByteOrder
import kotlin.math.sign

/**
 * /// Global Navigation Satellite System (GNSS) Raw Intermediate Frequency (IF) data are the recorded streams of raw signal samples after down-conversion of the received signal to IF and prior to any processing onboard the receiving spacecraft.  These data sets are processed in various geophysical applications and used to characterize Electromagnetic Interference (EMI) in the operating environment.
 */
@Suppress("unused")
class GNSSRawIF_Abridged : Table() {

    fun __init(_i: Int, _bb: ByteBuffer)  {
        __reset(_i, _bb)
    }
    fun __assign(_i: Int, _bb: ByteBuffer) : GNSSRawIF_Abridged {
        __init(_i, _bb)
        return this
    }
    /**
     * Unique identifier of the record, auto-generated by the system.
     * Example: /// Example: GNSSRawIF-ID
     * Constraints: Minimum length = 1, Maximum length = 36
     */
    val id : String?
        get() {
            val o = __offset(4)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val idAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(4, 1)
    fun idInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 4, 1)
    /**
     * Classification marking of the data in IC/CAPCO Portion-marked format.
     * Example: /// Example: U
     * Constraints: Minimum length = 1, Maximum length = 128
     */
    val classificationMarking : String?
        get() {
            val o = __offset(6)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val classificationMarkingAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(6, 1)
    fun classificationMarkingInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 6, 1)
    /**
     * Unique identifier of the primary satellite on-orbit object.
     * Example: /// Example: 32375
     * Constraints: Minimum length = 0, Maximum length = 36
     */
    val idOnOrbit : String?
        get() {
            val o = __offset(8)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val idOnOrbitAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(8, 1)
    fun idOnOrbitInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 8, 1)
    /**
     * Satellite/catalog number of the target on-orbit object.
     * Example: /// Example: 32375
     * Constraints: No constraints specified.
     */
    val satNo : Int
        get() {
            val o = __offset(10)
            return if(o != 0) bb.getInt(o + bb_pos) else 0
        }
    /**
     * Optional identifier provided by the data source to indicate the target object of this record. This may be an internal identifier and not necessarily map to a valid satellite number.
     * Example: /// Example: L2045
     * Constraints: Minimum length = 0, Maximum length = 36
     */
    val origObjectId : String?
        get() {
            val o = __offset(12)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val origObjectIdAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(12, 1)
    fun origObjectIdInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 12, 1)
    /**
     * Unique identifier of the parent Ephemeris Set, if this data is correlated with an Ephemeris. If reporting for a spacecraft with multiple onboard GNSS receivers, this ID may be associated with multiple GNSS Raw IF records if each receiver is synced to the ephemeris points.
     * Example: /// Example: 60f7a241-b7be-48d8-acf3-786670af53f9
     * Constraints: Minimum length = 0, Maximum length = 36
     */
    val esId : String?
        get() {
            val o = __offset(14)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val esIdAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(14, 1)
    fun esIdInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 14, 1)
    /**
     * The number or ID of the GNSS receiver associated with this data.  If reporting for multiple receivers a separate record should be generated for each. If null, it  is assumed to indicate that only one receiver is present, or reported.
     * Example: /// Example: GPS1
     * Constraints: Minimum length = 0, Maximum length = 36
     */
    val receiver : String?
        get() {
            val o = __offset(16)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val receiverAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(16, 1)
    fun receiverInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 16, 1)
    /**
     * Unit vector of the outward facing direction of the receiver boresight in a body-fixed coordinate system.
     * Example: /// Example: [0, 1, 0]
     * Constraints: No constraints specified.
     */
    fun boresight(j: Int) : String? {
        val o = __offset(18)
        return if (o != 0) {
            __string(__vector(o) + j * 4)
        } else {
            null
        }
    }
    val boresightLength : Int
        get() {
            val o = __offset(18); return if (o != 0) __vector_len(o) else 0
        }
    /**
     * The quaternion describing the rotation of the body-fixed frame used for this system into the local geodetic frame, at the sample start time (startTime). The array element order convention is scalar component first, followed by the three vector components. For a vector u in the body-fixed frame, the corresponding vector u' in the geodetic frame should satisfy u' = quq*, where q is this quaternion. The quaternion should be normalized to 1.
     * Example: /// Example: [0, -0.2734104, 0.1562345, 0.9491246]
     * Constraints: No constraints specified.
     */
    fun quat(j: Int) : String? {
        val o = __offset(20)
        return if (o != 0) {
            __string(__vector(o) + j * 4)
        } else {
            null
        }
    }
    val quatLength : Int
        get() {
            val o = __offset(20); return if (o != 0) __vector_len(o) else 0
        }
    /**
     * The index of the sample within the associated binary file that corresponds to the startTime indicated in this record.  This is especially useful on high sample-rate sensors when some samples are less than one microsecond before the value of startTime.  This index is 0-based.  If null, the startIndex is assumed to be 0.
     * Example: /// Example: 2
     * Constraints: No constraints specified.
     */
    val startIndex : Int
        get() {
            val o = __offset(22)
            return if(o != 0) bb.getInt(o + bb_pos) else 0
        }
    /**
     * Start time of the data contained in the associated binary file, in ISO 8601 UTC format with microsecond precision.
     * Example: /// Example: 2022-04-09T18:11:28.919768Z
     * Constraints: No constraints specified.
     */
    val startTime : String?
        get() {
            val o = __offset(24)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val startTimeAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(24, 1)
    fun startTimeInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 24, 1)
    /**
     * End time of the data contained in the associated binary file, in ISO 8601 UTC format with microsecond precision.
     * Example: /// Example: 2022-04-09T18:12:28.919768Z
     * Constraints: No constraints specified.
     */
    val endTime : String?
        get() {
            val o = __offset(26)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val endTimeAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(26, 1)
    fun endTimeInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 26, 1)
    /**
     * WGS-84 spacecraft latitude sub-point at start time (startTime), represented as -90 to 90 degrees (negative values south of equator).
     * Example: /// Example: 38.834
     * Constraints: No constraints specified.
     */
    val startLat : Double
        get() {
            val o = __offset(28)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * WGS-84 spacecraft longitude sub-point at start time (startTime), represented as -180 to 180 degrees (negative values west of Prime Meridian).
     * Example: /// Example: -104.821
     * Constraints: No constraints specified.
     */
    val startLon : Double
        get() {
            val o = __offset(30)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Spacecraft altitude at start time (startTime), expressed in kilometers above WGS-84 ellipsoid.
     * Example: /// Example: 525.664
     * Constraints: No constraints specified.
     */
    val startAlt : Double
        get() {
            val o = __offset(32)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * WGS-84 spacecraft latitude sub-point at end time (endTime), represented as -90 to 90 degrees (negative values south of equator).
     * Example: /// Example: 38.922
     * Constraints: No constraints specified.
     */
    val endLat : Double
        get() {
            val o = __offset(34)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * WGS-84 spacecraft longitude sub-point at end time (endTime), represented as -180 to 180 degrees (negative values west of Prime Meridian).
     * Example: /// Example: -104.67
     * Constraints: No constraints specified.
     */
    val endLon : Double
        get() {
            val o = __offset(36)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Spacecraft altitude at end time (endTime), expressed in kilometers above WGS-84 ellipsoid.
     * Example: /// Example: 525.626
     * Constraints: No constraints specified.
     */
    val endAlt : Double
        get() {
            val o = __offset(38)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * The center frequency, in MHz, of the observation bands.  More than one band may be reported in each binary file, so this is an array of the center frequency of each band (including an array of length 1 if only one band is present).
     * Example: /// Example: [1227.6, 1575.4]
     * Constraints: No constraints specified.
     */
    fun centerFreq(j: Int) : String? {
        val o = __offset(40)
        return if (o != 0) {
            __string(__vector(o) + j * 4)
        } else {
            null
        }
    }
    val centerFreqLength : Int
        get() {
            val o = __offset(40); return if (o != 0) __vector_len(o) else 0
        }
    /**
     * The center frequency, in MHz, after downconversion to intermediate frequency.  If provided, this array should have the same length as centerFreqs.
     * Example: /// Example: [4.09, 5.87]
     * Constraints: No constraints specified.
     */
    fun ifFreq(j: Int) : String? {
        val o = __offset(42)
        return if (o != 0) {
            __string(__vector(o) + j * 4)
        } else {
            null
        }
    }
    val ifFreqLength : Int
        get() {
            val o = __offset(42); return if (o != 0) __vector_len(o) else 0
        }
    /**
     * The number of samples taken per second.
     * Example: /// Example: [8000, 9000]
     * Constraints: No constraints specified.
     */
    fun sampleRate(j: Int) : String? {
        val o = __offset(44)
        return if (o != 0) {
            __string(__vector(o) + j * 4)
        } else {
            null
        }
    }
    val sampleRateLength : Int
        get() {
            val o = __offset(44); return if (o != 0) __vector_len(o) else 0
        }
    /**
     * After converting the raw data in the file, to generate (frequency-space) spectra some sets require an additional transformation or correction based on details of the hardware that recorded it.  This field marks any such transformations.  Currently supported options are NONE (no correction) and MIRRORED (frequency axis is flipped around the corresponding value of ifFreq). If null, it is assumed that NONE applies to all frequency bands.
     * Example: /// Example: ['NONE', 'NONE']
     * Constraints: No constraints specified.
     */
    fun postFourier(j: Int) : String? {
        val o = __offset(46)
        return if (o != 0) {
            __string(__vector(o) + j * 4)
        } else {
            null
        }
    }
    val postFourierLength : Int
        get() {
            val o = __offset(46); return if (o != 0) __vector_len(o) else 0
        }
    /**
     * The sample type associated with the IF data.  REAL for data with only an I-component or COMPLEX for data with both I & Q components.
     * Example: /// Example: COMPLEX
     * Constraints: Minimum length = 0, Maximum length = 10
     */
    val sampleType : String?
        get() {
            val o = __offset(48)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val sampleTypeAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(48, 1)
    fun sampleTypeInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 48, 1)
    /**
     * The number of bits in each datum, for example 2 for 2-bit integers or 8 for 8-bit integers.
     * Example: /// Example: 8
     * Constraints: No constraints specified.
     */
    val bitDepth : Int
        get() {
            val o = __offset(50)
            return if(o != 0) bb.getInt(o + bb_pos) else 0
        }
    /**
     * Differential Code Biases (DCBs) are the systematic errors, or biases, between two GNSS code observations at the same or different frequencies.  If applicable, this field should contain an array of DBC with length equal to the number of frequencies in the binary file.  The reference frequency should show DCB equal to 0.  If null, it is assumed that there is no DCB (all values are 0).
     * Example: /// Example: [0.0271, 0.0016]
     * Constraints: No constraints specified.
     */
    fun diffCodeBias(j: Int) : String? {
        val o = __offset(52)
        return if (o != 0) {
            __string(__vector(o) + j * 4)
        } else {
            null
        }
    }
    val diffCodeBiasLength : Int
        get() {
            val o = __offset(52); return if (o != 0) __vector_len(o) else 0
        }
    /**
     * The amount of data generated per unit time, expressed in Megabytes/minute.
     * Example: /// Example: 0.205
     * Constraints: No constraints specified.
     */
    val dataRate : Double
        get() {
            val o = __offset(54)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * User-defined ID of a set or sequence of records/files.  Used to associate a set of related raw IF records.
     * Example: /// Example: 2b0b1b1a-a3c0-4267-894a-0c40cb84a5af
     * Constraints: No constraints specified.
     */
    val setId : String?
        get() {
            val o = __offset(56)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val setIdAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(56, 1)
    fun setIdInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 56, 1)
    /**
     * The number of raw IF records/files in a set.
     * Example: /// Example: 7
     * Constraints: No constraints specified.
     */
    val setLength : Int
        get() {
            val o = __offset(58)
            return if(o != 0) bb.getInt(o + bb_pos) else 0
        }
    /**
     * The sequence number of a raw IF record/file within a set.  Sequence number should start at 1.  If null, then it is assumed that the order of records within a raw IF set is not relevant.
     * Example: /// Example: 1
     * Constraints: No constraints specified.
     */
    val sequenceId : Int
        get() {
            val o = __offset(60)
            return if(o != 0) bb.getInt(o + bb_pos) else 0
        }
    /**
     * The file name of the Raw IF Binary file.  The files should be in the Hierarchical Data Format (HDF5).
     * Example: /// Example: somefile.hdf5
     * Constraints: Minimum length = 0, Maximum length = 128
     */
    val fileName : String?
        get() {
            val o = __offset(62)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val fileNameAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(62, 1)
    fun fileNameInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 62, 1)
    /**
     * Array of UDL record types (GNSSSET) associated with this GNSSRawIF record. See the associated 'srcIds' array for the record UUIDs, positionally corresponding to the record types in this array. The 'srcTyps' and 'srcIds' arrays must match in size.
     * Example: /// Example: ['GNSSSET']
     * Constraints: No constraints specified.
     */
    fun srcTyps(j: Int) : String? {
        val o = __offset(64)
        return if (o != 0) {
            __string(__vector(o) + j * 4)
        } else {
            null
        }
    }
    val srcTypsLength : Int
        get() {
            val o = __offset(64); return if (o != 0) __vector_len(o) else 0
        }
    /**
     * Array of UUIDs of the UDL data records associated with this GNSSRawIF record. See the associated 'srcTyps' array for the specific types of data, positionally corresponding to the UUIDs in this array. The 'srcTyps' and 'srcIds' arrays must match in size. See the corresponding srcTyps array element for the data type of the UUID and use the appropriate API operation to retrieve that object (e.g. /udl/gnssobservationset/{uuid}).
     * Example: /// Example: ['GNSSSET_ID']
     * Constraints: No constraints specified.
     */
    fun srcIds(j: Int) : String? {
        val o = __offset(66)
        return if (o != 0) {
            __string(__vector(o) + j * 4)
        } else {
            null
        }
    }
    val srcIdsLength : Int
        get() {
            val o = __offset(66); return if (o != 0) __vector_len(o) else 0
        }
    /**
     * The binary file size, in bytes, auto-populated by the system.  The maximum file size for this service is 5,000,000 Bytes (5 MB). Files exceeding the maximum size will be rejected.
     * Example: /// Example: 3168895
     * Constraints: No constraints specified.
     */
    val fileSize : Long
        get() {
            val o = __offset(68)
            return if(o != 0) bb.getLong(o + bb_pos) else 0L
        }
    /**
     * Optional array of provider/source specific tags for this data, where each element is no longer than 32 characters, used for implementing data owner conditional access controls to restrict access to the data. Should be left null by data providers unless conditional access controls are coordinated with the UDL team.
     * Example: /// Example: ['TAG1', 'TAG2']
     * Constraints: No constraints specified.
     */
    fun tags(j: Int) : String? {
        val o = __offset(70)
        return if (o != 0) {
            __string(__vector(o) + j * 4)
        } else {
            null
        }
    }
    val tagsLength : Int
        get() {
            val o = __offset(70); return if (o != 0) __vector_len(o) else 0
        }
    /**
     * Time the row was created in the database, auto-populated by the system.
     * Example: /// Example: 2018-01-01T16:00:00.123Z
     * Constraints: No constraints specified.
     */
    val createdAt : String?
        get() {
            val o = __offset(72)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val createdAtAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(72, 1)
    fun createdAtInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 72, 1)
    /**
     * Application user who created the row in the database, auto-populated by the system.
     * Example: /// Example: some.user
     * Constraints: Minimum length = 1, Maximum length = 64
     */
    val createdBy : String?
        get() {
            val o = __offset(74)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val createdByAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(74, 1)
    fun createdByInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 74, 1)
    /**
     * Source of the data.
     * Example: /// Example: Bluestaq
     * Constraints: Minimum length = 1, Maximum length = 64
     */
    val source : String?
        get() {
            val o = __offset(76)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val sourceAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(76, 1)
    fun sourceInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 76, 1)
    /**
     * Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
     * Example: /// Example: THIRD_PARTY_DATASOURCE
     * Constraints: Minimum length = 0, Maximum length = 64
     */
    val origin : String?
        get() {
            val o = __offset(78)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val originAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(78, 1)
    fun originInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 78, 1)
    /**
     * Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
     * EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
     * REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
     * SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
     * TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
     * Example: /// Example: TEST
     * Constraints: Minimum length = 1, Maximum length = 32
     */
    val dataMode : Byte
        get() {
            val o = __offset(80)
            return if(o != 0) bb.get(o + bb_pos) else 0
        }
    /**
     * The originating source network on which this record was created, auto-populated by the system.
     * Example: /// Example: ORIG
     * Constraints: Minimum length = 1, Maximum length = 32
     */
    val origNetwork : String?
        get() {
            val o = __offset(82)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val origNetworkAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(82, 1)
    fun origNetworkInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 82, 1)
    companion object {
        fun validateVersion() = Constants.FLATBUFFERS_24_3_25()
        fun getRootAsGNSSRawIF_Abridged(_bb: ByteBuffer): GNSSRawIF_Abridged = getRootAsGNSSRawIF_Abridged(_bb, GNSSRawIF_Abridged())
        fun getRootAsGNSSRawIF_Abridged(_bb: ByteBuffer, obj: GNSSRawIF_Abridged): GNSSRawIF_Abridged {
            _bb.order(ByteOrder.LITTLE_ENDIAN)
            return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb))
        }
        fun GNSSRawIF_AbridgedBufferHasIdentifier(_bb: ByteBuffer) : Boolean = __has_identifier(_bb, "GNSS")
        fun createGNSSRawIF_Abridged(builder: FlatBufferBuilder, idOffset: Int, classificationMarkingOffset: Int, idOnOrbitOffset: Int, satNo: Int, origObjectIdOffset: Int, esIdOffset: Int, receiverOffset: Int, boresightOffset: Int, quatOffset: Int, startIndex: Int, startTimeOffset: Int, endTimeOffset: Int, startLat: Double, startLon: Double, startAlt: Double, endLat: Double, endLon: Double, endAlt: Double, centerFreqOffset: Int, ifFreqOffset: Int, sampleRateOffset: Int, postFourierOffset: Int, sampleTypeOffset: Int, bitDepth: Int, diffCodeBiasOffset: Int, dataRate: Double, setIdOffset: Int, setLength: Int, sequenceId: Int, fileNameOffset: Int, srcTypsOffset: Int, srcIdsOffset: Int, fileSize: Long, tagsOffset: Int, createdAtOffset: Int, createdByOffset: Int, sourceOffset: Int, originOffset: Int, dataMode: Byte, origNetworkOffset: Int) : Int {
            builder.startTable(40)
            addFileSize(builder, fileSize)
            addDataRate(builder, dataRate)
            addEndAlt(builder, endAlt)
            addEndLon(builder, endLon)
            addEndLat(builder, endLat)
            addStartAlt(builder, startAlt)
            addStartLon(builder, startLon)
            addStartLat(builder, startLat)
            addOrigNetwork(builder, origNetworkOffset)
            addOrigin(builder, originOffset)
            addSource(builder, sourceOffset)
            addCreatedBy(builder, createdByOffset)
            addCreatedAt(builder, createdAtOffset)
            addTags(builder, tagsOffset)
            addSrcIds(builder, srcIdsOffset)
            addSrcTyps(builder, srcTypsOffset)
            addFileName(builder, fileNameOffset)
            addSequenceID(builder, sequenceId)
            addSetLength(builder, setLength)
            addSetId(builder, setIdOffset)
            addDiffCodeBias(builder, diffCodeBiasOffset)
            addBitDepth(builder, bitDepth)
            addSampleType(builder, sampleTypeOffset)
            addPostFourier(builder, postFourierOffset)
            addSampleRate(builder, sampleRateOffset)
            addIfFreq(builder, ifFreqOffset)
            addCenterFreq(builder, centerFreqOffset)
            addEndTime(builder, endTimeOffset)
            addStartTime(builder, startTimeOffset)
            addStartIndex(builder, startIndex)
            addQuat(builder, quatOffset)
            addBoresight(builder, boresightOffset)
            addReceiver(builder, receiverOffset)
            addEsId(builder, esIdOffset)
            addOrigObjectId(builder, origObjectIdOffset)
            addSatNo(builder, satNo)
            addIdOnOrbit(builder, idOnOrbitOffset)
            addClassificationMarking(builder, classificationMarkingOffset)
            addId(builder, idOffset)
            addDataMode(builder, dataMode)
            return endGNSSRawIF_Abridged(builder)
        }
        fun startGNSSRawIF_Abridged(builder: FlatBufferBuilder) = builder.startTable(40)
        fun addId(builder: FlatBufferBuilder, id: Int) = builder.addOffset(0, id, 0)
        fun addClassificationMarking(builder: FlatBufferBuilder, classificationMarking: Int) = builder.addOffset(1, classificationMarking, 0)
        fun addIdOnOrbit(builder: FlatBufferBuilder, idOnOrbit: Int) = builder.addOffset(2, idOnOrbit, 0)
        fun addSatNo(builder: FlatBufferBuilder, satNo: Int) = builder.addInt(3, satNo, 0)
        fun addOrigObjectId(builder: FlatBufferBuilder, origObjectId: Int) = builder.addOffset(4, origObjectId, 0)
        fun addEsId(builder: FlatBufferBuilder, esId: Int) = builder.addOffset(5, esId, 0)
        fun addReceiver(builder: FlatBufferBuilder, receiver: Int) = builder.addOffset(6, receiver, 0)
        fun addBoresight(builder: FlatBufferBuilder, boresight: Int) = builder.addOffset(7, boresight, 0)
        fun createBoresightVector(builder: FlatBufferBuilder, data: IntArray) : Int {
            builder.startVector(4, data.size, 4)
            for (i in data.size - 1 downTo 0) {
                builder.addOffset(data[i])
            }
            return builder.endVector()
        }
        fun startBoresightVector(builder: FlatBufferBuilder, numElems: Int) = builder.startVector(4, numElems, 4)
        fun addQuat(builder: FlatBufferBuilder, quat: Int) = builder.addOffset(8, quat, 0)
        fun createQuatVector(builder: FlatBufferBuilder, data: IntArray) : Int {
            builder.startVector(4, data.size, 4)
            for (i in data.size - 1 downTo 0) {
                builder.addOffset(data[i])
            }
            return builder.endVector()
        }
        fun startQuatVector(builder: FlatBufferBuilder, numElems: Int) = builder.startVector(4, numElems, 4)
        fun addStartIndex(builder: FlatBufferBuilder, startIndex: Int) = builder.addInt(9, startIndex, 0)
        fun addStartTime(builder: FlatBufferBuilder, startTime: Int) = builder.addOffset(10, startTime, 0)
        fun addEndTime(builder: FlatBufferBuilder, endTime: Int) = builder.addOffset(11, endTime, 0)
        fun addStartLat(builder: FlatBufferBuilder, startLat: Double) = builder.addDouble(12, startLat, 0.0)
        fun addStartLon(builder: FlatBufferBuilder, startLon: Double) = builder.addDouble(13, startLon, 0.0)
        fun addStartAlt(builder: FlatBufferBuilder, startAlt: Double) = builder.addDouble(14, startAlt, 0.0)
        fun addEndLat(builder: FlatBufferBuilder, endLat: Double) = builder.addDouble(15, endLat, 0.0)
        fun addEndLon(builder: FlatBufferBuilder, endLon: Double) = builder.addDouble(16, endLon, 0.0)
        fun addEndAlt(builder: FlatBufferBuilder, endAlt: Double) = builder.addDouble(17, endAlt, 0.0)
        fun addCenterFreq(builder: FlatBufferBuilder, centerFreq: Int) = builder.addOffset(18, centerFreq, 0)
        fun createCenterFreqVector(builder: FlatBufferBuilder, data: IntArray) : Int {
            builder.startVector(4, data.size, 4)
            for (i in data.size - 1 downTo 0) {
                builder.addOffset(data[i])
            }
            return builder.endVector()
        }
        fun startCenterFreqVector(builder: FlatBufferBuilder, numElems: Int) = builder.startVector(4, numElems, 4)
        fun addIfFreq(builder: FlatBufferBuilder, ifFreq: Int) = builder.addOffset(19, ifFreq, 0)
        fun createIfFreqVector(builder: FlatBufferBuilder, data: IntArray) : Int {
            builder.startVector(4, data.size, 4)
            for (i in data.size - 1 downTo 0) {
                builder.addOffset(data[i])
            }
            return builder.endVector()
        }
        fun startIfFreqVector(builder: FlatBufferBuilder, numElems: Int) = builder.startVector(4, numElems, 4)
        fun addSampleRate(builder: FlatBufferBuilder, sampleRate: Int) = builder.addOffset(20, sampleRate, 0)
        fun createSampleRateVector(builder: FlatBufferBuilder, data: IntArray) : Int {
            builder.startVector(4, data.size, 4)
            for (i in data.size - 1 downTo 0) {
                builder.addOffset(data[i])
            }
            return builder.endVector()
        }
        fun startSampleRateVector(builder: FlatBufferBuilder, numElems: Int) = builder.startVector(4, numElems, 4)
        fun addPostFourier(builder: FlatBufferBuilder, postFourier: Int) = builder.addOffset(21, postFourier, 0)
        fun createPostFourierVector(builder: FlatBufferBuilder, data: IntArray) : Int {
            builder.startVector(4, data.size, 4)
            for (i in data.size - 1 downTo 0) {
                builder.addOffset(data[i])
            }
            return builder.endVector()
        }
        fun startPostFourierVector(builder: FlatBufferBuilder, numElems: Int) = builder.startVector(4, numElems, 4)
        fun addSampleType(builder: FlatBufferBuilder, sampleType: Int) = builder.addOffset(22, sampleType, 0)
        fun addBitDepth(builder: FlatBufferBuilder, bitDepth: Int) = builder.addInt(23, bitDepth, 0)
        fun addDiffCodeBias(builder: FlatBufferBuilder, diffCodeBias: Int) = builder.addOffset(24, diffCodeBias, 0)
        fun createDiffCodeBiasVector(builder: FlatBufferBuilder, data: IntArray) : Int {
            builder.startVector(4, data.size, 4)
            for (i in data.size - 1 downTo 0) {
                builder.addOffset(data[i])
            }
            return builder.endVector()
        }
        fun startDiffCodeBiasVector(builder: FlatBufferBuilder, numElems: Int) = builder.startVector(4, numElems, 4)
        fun addDataRate(builder: FlatBufferBuilder, dataRate: Double) = builder.addDouble(25, dataRate, 0.0)
        fun addSetId(builder: FlatBufferBuilder, setId: Int) = builder.addOffset(26, setId, 0)
        fun addSetLength(builder: FlatBufferBuilder, setLength: Int) = builder.addInt(27, setLength, 0)
        fun addSequenceID(builder: FlatBufferBuilder, sequenceId: Int) = builder.addInt(28, sequenceId, 0)
        fun addFileName(builder: FlatBufferBuilder, fileName: Int) = builder.addOffset(29, fileName, 0)
        fun addSrcTyps(builder: FlatBufferBuilder, srcTyps: Int) = builder.addOffset(30, srcTyps, 0)
        fun createSrcTypsVector(builder: FlatBufferBuilder, data: IntArray) : Int {
            builder.startVector(4, data.size, 4)
            for (i in data.size - 1 downTo 0) {
                builder.addOffset(data[i])
            }
            return builder.endVector()
        }
        fun startSrcTypsVector(builder: FlatBufferBuilder, numElems: Int) = builder.startVector(4, numElems, 4)
        fun addSrcIds(builder: FlatBufferBuilder, srcIds: Int) = builder.addOffset(31, srcIds, 0)
        fun createSrcIdsVector(builder: FlatBufferBuilder, data: IntArray) : Int {
            builder.startVector(4, data.size, 4)
            for (i in data.size - 1 downTo 0) {
                builder.addOffset(data[i])
            }
            return builder.endVector()
        }
        fun startSrcIdsVector(builder: FlatBufferBuilder, numElems: Int) = builder.startVector(4, numElems, 4)
        fun addFileSize(builder: FlatBufferBuilder, fileSize: Long) = builder.addLong(32, fileSize, 0L)
        fun addTags(builder: FlatBufferBuilder, tags: Int) = builder.addOffset(33, tags, 0)
        fun createTagsVector(builder: FlatBufferBuilder, data: IntArray) : Int {
            builder.startVector(4, data.size, 4)
            for (i in data.size - 1 downTo 0) {
                builder.addOffset(data[i])
            }
            return builder.endVector()
        }
        fun startTagsVector(builder: FlatBufferBuilder, numElems: Int) = builder.startVector(4, numElems, 4)
        fun addCreatedAt(builder: FlatBufferBuilder, createdAt: Int) = builder.addOffset(34, createdAt, 0)
        fun addCreatedBy(builder: FlatBufferBuilder, createdBy: Int) = builder.addOffset(35, createdBy, 0)
        fun addSource(builder: FlatBufferBuilder, source: Int) = builder.addOffset(36, source, 0)
        fun addOrigin(builder: FlatBufferBuilder, origin: Int) = builder.addOffset(37, origin, 0)
        fun addDataMode(builder: FlatBufferBuilder, dataMode: Byte) = builder.addByte(38, dataMode, 0)
        fun addOrigNetwork(builder: FlatBufferBuilder, origNetwork: Int) = builder.addOffset(39, origNetwork, 0)
        fun endGNSSRawIF_Abridged(builder: FlatBufferBuilder) : Int {
            val o = builder.endTable()
            return o
        }
        fun finishGNSSRawIFAbridgedBuffer(builder: FlatBufferBuilder, offset: Int) = builder.finish(offset, "GNSS")
        fun finishSizePrefixedGNSSRawIF_AbridgedBuffer(builder: FlatBufferBuilder, offset: Int) = builder.finishSizePrefixed(offset, "GNSS")
    }
}
