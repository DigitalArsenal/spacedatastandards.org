// automatically generated by the FlatBuffers compiler, do not modify

import com.google.flatbuffers.BaseVector
import com.google.flatbuffers.BooleanVector
import com.google.flatbuffers.ByteVector
import com.google.flatbuffers.Constants
import com.google.flatbuffers.DoubleVector
import com.google.flatbuffers.FlatBufferBuilder
import com.google.flatbuffers.FloatVector
import com.google.flatbuffers.LongVector
import com.google.flatbuffers.StringVector
import com.google.flatbuffers.Struct
import com.google.flatbuffers.Table
import com.google.flatbuffers.UnionVector
import java.nio.ByteBuffer
import java.nio.ByteOrder
import kotlin.math.sign

/**
 * /// Status information for OnorbitThruster objects.
 */
@Suppress("unused")
class OnorbitThrusterStatus_Abridged : Table() {

    fun __init(_i: Int, _bb: ByteBuffer)  {
        __reset(_i, _bb)
    }
    fun __assign(_i: Int, _bb: ByteBuffer) : OnorbitThrusterStatus_Abridged {
        __init(_i, _bb)
        return this
    }
    /**
     * Unique identifier of the record, auto-generated by the system.
     * Example: /// Example: af103c-1f917dc-002c1bd
     * Constraints: Minimum length = 1, Maximum length = 36
     */
    val id : String?
        get() {
            val o = __offset(4)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val idAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(4, 1)
    fun idInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 4, 1)
    /**
     * Classification marking of the data in IC/CAPCO Portion-marked format.
     * Example: /// Example: U
     * Constraints: Minimum length = 1, Maximum length = 128
     */
    val classificationMarking : String?
        get() {
            val o = __offset(6)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val classificationMarkingAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(6, 1)
    fun classificationMarkingInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 6, 1)
    /**
     * ID of the associated OnorbitThruster record. This ID can be used to obtain additional information on an onorbit thruster object using the 'get  by ID' operation (e.g. /udl/onorbitthruster/{id}). For example, the OnorbitThruster object with idOnorbitThruster = abc would be queried as /udl/onorbitthruster/abc.
     * Example: /// Example: ff7dc909-e8b4-4a54-8529-1963d4e9b353
     * Constraints: Minimum length = 1, Maximum length = 36
     */
    val idOnorbitThruster : String?
        get() {
            val o = __offset(8)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val idOnorbitThrusterAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(8, 1)
    fun idOnorbitThrusterInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 8, 1)
    /**
     * Identifier of this thruster.
     * Example: /// Example: REA1
     * Constraints: Minimum length = 0, Maximum length = 32
     */
    val name : String?
        get() {
            val o = __offset(10)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val nameAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(10, 1)
    fun nameInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 10, 1)
    /**
     * Datetime of the thruster status observation in ISO 8601 UTC datetime format with millisecond precision.
     * Example: /// Example: 2024-01-01T16:00:00.123Z
     * Constraints: No constraints specified.
     */
    val statusTime : String?
        get() {
            val o = __offset(12)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val statusTimeAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(12, 1)
    fun statusTimeInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 12, 1)
    /**
     * Minimum available propellant mass for this thruster's type, in kilograms.
     * Example: /// Example: 0.1
     * Constraints: No constraints specified.
     */
    val propMassMin : Double
        get() {
            val o = __offset(14)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Average available propellant mass for this thruster's type, in kilograms.
     * Example: /// Example: 907.6
     * Constraints: No constraints specified.
     */
    val propMassAvg : Double
        get() {
            val o = __offset(16)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Median available propellant mass for this thruster's type, in kilograms.
     * Example: /// Example: 200.1
     * Constraints: No constraints specified.
     */
    val propMassMedian : Double
        get() {
            val o = __offset(18)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Maximum available propellant mass for this thruster's type, in kilograms.
     * Example: /// Example: 2333.3
     * Constraints: No constraints specified.
     */
    val propMassMax : Double
        get() {
            val o = __offset(20)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Total fuel mass available for this thruster's type, in kilograms.
     * Example: /// Example: 100.1
     * Constraints: No constraints specified.
     */
    val fuelMass : Double
        get() {
            val o = __offset(22)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * 1-sigma uncertainty of the total fuel mass available for this thruster type, in kilograms.
     * Example: /// Example: 10.1
     * Constraints: No constraints specified.
     */
    val fuelMassUnc : Double
        get() {
            val o = __offset(24)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Total delta-velocity available for this thruster's type, in meters per second.
     * Example: /// Example: 100.1
     * Constraints: No constraints specified.
     */
    val totalDeltaV : Double
        get() {
            val o = __offset(26)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Minimum available delta-velocity for this thruster, in meters per second.
     * Example: /// Example: 0.1
     * Constraints: No constraints specified.
     */
    val minDeltaV : Double
        get() {
            val o = __offset(28)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Estimated available delta-velocity for this thruster, in meters per second.
     * Example: /// Example: 10.1
     * Constraints: No constraints specified.
     */
    val estDeltaV : Double
        get() {
            val o = __offset(30)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Maximum available delta-velocity for this thruster, in meters per second.
     * Example: /// Example: 100.1
     * Constraints: No constraints specified.
     */
    val maxDeltaV : Double
        get() {
            val o = __offset(32)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Maximum available thrust for this thruster, in newtons.
     * Example: /// Example: 22.1
     * Constraints: No constraints specified.
     */
    val thrustMax : Double
        get() {
            val o = __offset(34)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Specific impulse for this thruster, in seconds.
     * Example: /// Example: 300.1
     * Constraints: No constraints specified.
     */
    val isp : Double
        get() {
            val o = __offset(36)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Flag indicating if this thruster is operational.
     * Example: /// Example: True
     * Constraints: No constraints specified.
     */
    val operational : Boolean
        get() {
            val o = __offset(38)
            return if(o != 0) 0.toByte() != bb.get(o + bb_pos) else false
        }
    /**
     * Time the row was created in the database, auto-populated by the system.
     * Example: /// Example: 2018-01-01T16:00:00.123Z
     * Constraints: No constraints specified.
     */
    val createdAt : String?
        get() {
            val o = __offset(40)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val createdAtAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(40, 1)
    fun createdAtInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 40, 1)
    /**
     * Application user who created the row in the database, auto-populated by the system.
     * Example: /// Example: some.user
     * Constraints: Minimum length = 1, Maximum length = 64
     */
    val createdBy : String?
        get() {
            val o = __offset(42)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val createdByAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(42, 1)
    fun createdByInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 42, 1)
    /**
     * Source of the data.
     * Example: /// Example: Bluestaq
     * Constraints: Minimum length = 1, Maximum length = 36
     */
    val source : String?
        get() {
            val o = __offset(44)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val sourceAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(44, 1)
    fun sourceInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 44, 1)
    /**
     * Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
     * Example: /// Example: THIRD_PARTY_DATASOURCE
     * Constraints: Minimum length = 0, Maximum length = 64
     */
    val origin : String?
        get() {
            val o = __offset(46)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val originAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(46, 1)
    fun originInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 46, 1)
    /**
     * The originating source network on which this record was created, auto-populated by the system.
     * Example: /// Example: ORIG
     * Constraints: Minimum length = 0, Maximum length = 32
     */
    val origNetwork : String?
        get() {
            val o = __offset(48)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val origNetworkAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(48, 1)
    fun origNetworkInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 48, 1)
    /**
     * Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
     * EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
     * REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
     * SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
     * TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
     * Example: /// Example: TEST
     * Constraints: Minimum length = 1, Maximum length = 32
     */
    val dataMode : Byte
        get() {
            val o = __offset(50)
            return if(o != 0) bb.get(o + bb_pos) else 0
        }
    companion object {
        fun validateVersion() = Constants.FLATBUFFERS_24_3_25()
        fun getRootAsOnorbitThrusterStatus_Abridged(_bb: ByteBuffer): OnorbitThrusterStatus_Abridged = getRootAsOnorbitThrusterStatus_Abridged(_bb, OnorbitThrusterStatus_Abridged())
        fun getRootAsOnorbitThrusterStatus_Abridged(_bb: ByteBuffer, obj: OnorbitThrusterStatus_Abridged): OnorbitThrusterStatus_Abridged {
            _bb.order(ByteOrder.LITTLE_ENDIAN)
            return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb))
        }
        fun OnorbitThrusterStatus_AbridgedBufferHasIdentifier(_bb: ByteBuffer) : Boolean = __has_identifier(_bb, "ONOR")
        fun createOnorbitThrusterStatus_Abridged(builder: FlatBufferBuilder, idOffset: Int, classificationMarkingOffset: Int, idOnorbitThrusterOffset: Int, nameOffset: Int, statusTimeOffset: Int, propMassMin: Double, propMassAvg: Double, propMassMedian: Double, propMassMax: Double, fuelMass: Double, fuelMassUnc: Double, totalDeltaV: Double, minDeltaV: Double, estDeltaV: Double, maxDeltaV: Double, thrustMax: Double, isp: Double, operational: Boolean, createdAtOffset: Int, createdByOffset: Int, sourceOffset: Int, originOffset: Int, origNetworkOffset: Int, dataMode: Byte) : Int {
            builder.startTable(24)
            addIsp(builder, isp)
            addThrustMax(builder, thrustMax)
            addMaxDeltaV(builder, maxDeltaV)
            addEstDeltaV(builder, estDeltaV)
            addMinDeltaV(builder, minDeltaV)
            addTotalDeltaV(builder, totalDeltaV)
            addFuelMassUnc(builder, fuelMassUnc)
            addFuelMass(builder, fuelMass)
            addPropMassMax(builder, propMassMax)
            addPropMassMedian(builder, propMassMedian)
            addPropMassAvg(builder, propMassAvg)
            addPropMassMin(builder, propMassMin)
            addOrigNetwork(builder, origNetworkOffset)
            addOrigin(builder, originOffset)
            addSource(builder, sourceOffset)
            addCreatedBy(builder, createdByOffset)
            addCreatedAt(builder, createdAtOffset)
            addStatusTime(builder, statusTimeOffset)
            addName(builder, nameOffset)
            addIdOnorbitThruster(builder, idOnorbitThrusterOffset)
            addClassificationMarking(builder, classificationMarkingOffset)
            addId(builder, idOffset)
            addDataMode(builder, dataMode)
            addOperational(builder, operational)
            return endOnorbitThrusterStatus_Abridged(builder)
        }
        fun startOnorbitThrusterStatus_Abridged(builder: FlatBufferBuilder) = builder.startTable(24)
        fun addId(builder: FlatBufferBuilder, id: Int) = builder.addOffset(0, id, 0)
        fun addClassificationMarking(builder: FlatBufferBuilder, classificationMarking: Int) = builder.addOffset(1, classificationMarking, 0)
        fun addIdOnorbitThruster(builder: FlatBufferBuilder, idOnorbitThruster: Int) = builder.addOffset(2, idOnorbitThruster, 0)
        fun addName(builder: FlatBufferBuilder, name: Int) = builder.addOffset(3, name, 0)
        fun addStatusTime(builder: FlatBufferBuilder, statusTime: Int) = builder.addOffset(4, statusTime, 0)
        fun addPropMassMin(builder: FlatBufferBuilder, propMassMin: Double) = builder.addDouble(5, propMassMin, 0.0)
        fun addPropMassAvg(builder: FlatBufferBuilder, propMassAvg: Double) = builder.addDouble(6, propMassAvg, 0.0)
        fun addPropMassMedian(builder: FlatBufferBuilder, propMassMedian: Double) = builder.addDouble(7, propMassMedian, 0.0)
        fun addPropMassMax(builder: FlatBufferBuilder, propMassMax: Double) = builder.addDouble(8, propMassMax, 0.0)
        fun addFuelMass(builder: FlatBufferBuilder, fuelMass: Double) = builder.addDouble(9, fuelMass, 0.0)
        fun addFuelMassUnc(builder: FlatBufferBuilder, fuelMassUnc: Double) = builder.addDouble(10, fuelMassUnc, 0.0)
        fun addTotalDeltaV(builder: FlatBufferBuilder, totalDeltaV: Double) = builder.addDouble(11, totalDeltaV, 0.0)
        fun addMinDeltaV(builder: FlatBufferBuilder, minDeltaV: Double) = builder.addDouble(12, minDeltaV, 0.0)
        fun addEstDeltaV(builder: FlatBufferBuilder, estDeltaV: Double) = builder.addDouble(13, estDeltaV, 0.0)
        fun addMaxDeltaV(builder: FlatBufferBuilder, maxDeltaV: Double) = builder.addDouble(14, maxDeltaV, 0.0)
        fun addThrustMax(builder: FlatBufferBuilder, thrustMax: Double) = builder.addDouble(15, thrustMax, 0.0)
        fun addIsp(builder: FlatBufferBuilder, isp: Double) = builder.addDouble(16, isp, 0.0)
        fun addOperational(builder: FlatBufferBuilder, operational: Boolean) = builder.addBoolean(17, operational, false)
        fun addCreatedAt(builder: FlatBufferBuilder, createdAt: Int) = builder.addOffset(18, createdAt, 0)
        fun addCreatedBy(builder: FlatBufferBuilder, createdBy: Int) = builder.addOffset(19, createdBy, 0)
        fun addSource(builder: FlatBufferBuilder, source: Int) = builder.addOffset(20, source, 0)
        fun addOrigin(builder: FlatBufferBuilder, origin: Int) = builder.addOffset(21, origin, 0)
        fun addOrigNetwork(builder: FlatBufferBuilder, origNetwork: Int) = builder.addOffset(22, origNetwork, 0)
        fun addDataMode(builder: FlatBufferBuilder, dataMode: Byte) = builder.addByte(23, dataMode, 0)
        fun endOnorbitThrusterStatus_Abridged(builder: FlatBufferBuilder) : Int {
            val o = builder.endTable()
            return o
        }
        fun finishOnorbitThrusterStatusAbridgedBuffer(builder: FlatBufferBuilder, offset: Int) = builder.finish(offset, "ONOR")
        fun finishSizePrefixedOnorbitThrusterStatus_AbridgedBuffer(builder: FlatBufferBuilder, offset: Int) = builder.finishSizePrefixed(offset, "ONOR")
    }
}
