// automatically generated by the FlatBuffers compiler, do not modify

import com.google.flatbuffers.BaseVector
import com.google.flatbuffers.BooleanVector
import com.google.flatbuffers.ByteVector
import com.google.flatbuffers.Constants
import com.google.flatbuffers.DoubleVector
import com.google.flatbuffers.FlatBufferBuilder
import com.google.flatbuffers.FloatVector
import com.google.flatbuffers.LongVector
import com.google.flatbuffers.StringVector
import com.google.flatbuffers.Struct
import com.google.flatbuffers.Table
import com.google.flatbuffers.UnionVector
import java.nio.ByteBuffer
import java.nio.ByteOrder
import kotlin.math.sign

/**
 * /// Model representation of Signal time and frequency difference of arrival (TDOA/FDOA) information obtained by using passive RF based sensor phenomenologies and sensor triangulation.
 */
@Suppress("unused")
class DiffOfArrival_Ingest : Table() {

    fun __init(_i: Int, _bb: ByteBuffer)  {
        __reset(_i, _bb)
    }
    fun __assign(_i: Int, _bb: ByteBuffer) : DiffOfArrival_Ingest {
        __init(_i, _bb)
        return this
    }
    /**
     * Unique identifier of the record, auto-generated by the system.
     * Example: /// Example: DIFFOFARRIVAL-ID
     * Constraints: Minimum length = 1, Maximum length = 36
     */
    val id : String?
        get() {
            val o = __offset(4)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val idAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(4, 1)
    fun idInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 4, 1)
    /**
     * Classification marking of the data in IC/CAPCO Portion-marked format.
     * Example: /// Example: U
     * Constraints: Minimum length = 1, Maximum length = 128
     */
    val classificationMarking : String?
        get() {
            val o = __offset(6)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val classificationMarkingAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(6, 1)
    fun classificationMarkingInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 6, 1)
    /**
     * Ob detection time in ISO 8601 UTC with microsecond precision.
     * Example: /// Example: 2018-01-01T16:00:00.123456Z
     * Constraints: No constraints specified.
     */
    val obTime : String?
        get() {
            val o = __offset(8)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val obTimeAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(8, 1)
    fun obTimeInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 8, 1)
    /**
     * Unique identifier of the target on-orbit object, if correlated.
     * Example: /// Example: ONORBIT-ID
     * Constraints: Minimum length = 0, Maximum length = 36
     */
    val idOnOrbit : String?
        get() {
            val o = __offset(10)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val idOnOrbitAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(10, 1)
    fun idOnOrbitInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 10, 1)
    /**
     * Sensor ID of the primary/1st sensor used for this measurement.
     * Example: /// Example: SENSOR1-ID
     * Constraints: Minimum length = 0, Maximum length = 36
     */
    val idSensor1 : String?
        get() {
            val o = __offset(12)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val idSensor1AsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(12, 1)
    fun idSensor1InByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 12, 1)
    /**
     * Sensor ID of the secondary/2nd sensor used for this measurement.
     * Example: /// Example: SENSOR2-ID
     * Constraints: Minimum length = 0, Maximum length = 36
     */
    val idSensor2 : String?
        get() {
            val o = __offset(14)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val idSensor2AsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(14, 1)
    fun idSensor2InByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 14, 1)
    /**
     * Catalog number of the target on-orbit object.
     * Example: /// Example: 25544
     * Constraints: No constraints specified.
     */
    val satNo : Int
        get() {
            val o = __offset(16)
            return if(o != 0) bb.getInt(o + bb_pos) else 0
        }
    /**
     * Optional identifier to indicate the specific tasking which produced this observation.
     * Example: /// Example: TASK-ID
     * Constraints: Minimum length = 0, Maximum length = 36
     */
    val taskId : String?
        get() {
            val o = __offset(18)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val taskIdAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(18, 1)
    fun taskIdInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 18, 1)
    /**
     * Optional identifier provided by observation source to indicate the target onorbit object of this observation. This may be an internal identifier and not necessarily a valid satellite number.
     * Example: /// Example: ORIGOBJECT-ID
     * Constraints: Minimum length = 0, Maximum length = 64
     */
    val origObjectId : String?
        get() {
            val o = __offset(20)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val origObjectIdAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(20, 1)
    fun origObjectIdInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 20, 1)
    /**
     * Optional identifier provided by DOA source to indicate the primary/1st sensor identifier used for this measurement. This may be an internal identifier and not necessarily a valid sensor ID.
     * Example: /// Example: ORIGSENSOR1-ID
     * Constraints: Minimum length = 0, Maximum length = 64
     */
    val origSensorId1 : String?
        get() {
            val o = __offset(22)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val origSensorId1AsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(22, 1)
    fun origSensorId1InByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 22, 1)
    /**
     * Optional identifier provided by DOA source to indicate the secondary/2nd sensor identifier used for this this observation. This may be an internal identifier and not necessarily a valid sensor ID.
     * Example: /// Example: ORIGSENSOR2-ID
     * Constraints: Minimum length = 0, Maximum length = 64
     */
    val origSensorId2 : String?
        get() {
            val o = __offset(24)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val origSensorId2AsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(24, 1)
    fun origSensorId2InByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 24, 1)
    /**
     * Boolean indicating this observation is part of an uncorrelated track or was unable to be correlated to a known object. This flag should only be set to true by data providers after an attempt to correlate to an on-orbit object was made and failed. If unable to correlate, the 'origObjectId' field may be populated with an internal data provider specific identifier.
     * Example: /// Example: False
     * Constraints: No constraints specified.
     */
    val uct : Boolean
        get() {
            val o = __offset(26)
            return if(o != 0) 0.toByte() != bb.get(o + bb_pos) else false
        }
    /**
     * The signal arrival delay relative to sensor 1 in seconds.
     * Example: /// Example: 1.1
     * Constraints: No constraints specified.
     */
    val sensor1Delay : Double
        get() {
            val o = __offset(28)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * The signal arrival delay relative to sensor 2 in seconds.
     * Example: /// Example: 1.1
     * Constraints: No constraints specified.
     */
    val sensor2Delay : Double
        get() {
            val o = __offset(30)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Sensor WGS84 latitude at obTime (if mobile/onorbit) in degrees. If null, can be obtained from sensor info. -90 to 90 degrees (negative values south of equator).
     * Example: /// Example: 45.1
     * Constraints: No constraints specified.
     */
    val senlat : Double
        get() {
            val o = __offset(32)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Sensor WGS84 longitude at obTime (if mobile/onorbit) in degrees. If null, can be obtained from sensor info. -180 to 180 degrees (negative values west of Prime Meridian).
     * Example: /// Example: 120.1
     * Constraints: No constraints specified.
     */
    val senlon : Double
        get() {
            val o = __offset(34)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Sensor altitude at obTime (if mobile/onorbit) in km. If null, can be obtained from sensor info.
     * Example: /// Example: 1.1
     * Constraints: No constraints specified.
     */
    val senalt : Double
        get() {
            val o = __offset(36)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Sensor 2 WGS84 latitude at obTime (if mobile/onorbit) in degrees. If null, can be obtained from sensor info.
     * Example: /// Example: 1.1
     * Constraints: No constraints specified.
     */
    val sen2lat : Double
        get() {
            val o = __offset(38)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Sensor 2 WGS84 longitude at obTime (if mobile/onorbit) in degrees. If null, can be obtained from sensor info.
     * Example: /// Example: 1.1
     * Constraints: No constraints specified.
     */
    val sen2lon : Double
        get() {
            val o = __offset(40)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Sensor 2 altitude at obTime (if mobile/onorbit) in km. If null, can be obtained from sensor info.
     * Example: /// Example: 1.1
     * Constraints: No constraints specified.
     */
    val sen2alt : Double
        get() {
            val o = __offset(42)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Center frequency of the collect in Hz.
     * Example: /// Example: 1.1
     * Constraints: No constraints specified.
     */
    val frequency : Double
        get() {
            val o = __offset(44)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Bandwidth of the signal in Hz.
     * Example: /// Example: 1.1
     * Constraints: No constraints specified.
     */
    val bandwidth : Double
        get() {
            val o = __offset(46)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Delta range, in km. Delta range calculation convention is (sensor2 - sensor1).
     * Example: /// Example: 1.1
     * Constraints: No constraints specified.
     */
    val deltaRange : Double
        get() {
            val o = __offset(48)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * One sigma uncertainty in delta range, in km.
     * Example: /// Example: 1.1
     * Constraints: No constraints specified.
     */
    val deltaRangeUnc : Double
        get() {
            val o = __offset(50)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Delta range rate, in km/sec. Delta range rate calculation convention is (sensor2 - sensor1).
     * Example: /// Example: 1.1
     * Constraints: No constraints specified.
     */
    val deltaRangeRate : Double
        get() {
            val o = __offset(52)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * One sigma uncertainty in the delta range rate, in km/sec.
     * Example: /// Example: 1.1
     * Constraints: No constraints specified.
     */
    val deltaRangeRateUnc : Double
        get() {
            val o = __offset(54)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Signal to noise ratio, in dB.
     * Example: /// Example: 1.1
     * Constraints: No constraints specified.
     */
    val snr : Double
        get() {
            val o = __offset(56)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Time difference of arrival of the center frequency signal, in seconds.  TDOA calculation convention is (sensor2 - sensor1).
     * Example: /// Example: 1.1
     * Constraints: No constraints specified.
     */
    val tdoa : Double
        get() {
            val o = __offset(58)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * One sigma uncertainty in time difference of arrival of the center frequency signal, in seconds.
     * Example: /// Example: 1.1
     * Constraints: No constraints specified.
     */
    val tdoaUnc : Double
        get() {
            val o = __offset(60)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Frequency difference of arrival of the center frequency signal, in Hz.  FDOA calculation convention is (sensor2 - sensor1).
     * Example: /// Example: 1.1
     * Constraints: No constraints specified.
     */
    val fdoa : Double
        get() {
            val o = __offset(62)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * One sigma uncertainty in frequency difference of arrival of the center frequency signal, in Hz.
     * Example: /// Example: 1.1
     * Constraints: No constraints specified.
     */
    val fdoaUnc : Double
        get() {
            val o = __offset(64)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Collection mode (e.g. SURVEY, SPOT_SEARCH, NEIGHBORHOOD_WATCH, DIRECTED_SEARCH, MANUAL, etc).
     * Example: /// Example: SURVEY
     * Constraints: Minimum length = 0, Maximum length = 32
     */
    val collectionMode : String?
        get() {
            val o = __offset(66)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val collectionModeAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(66, 1)
    fun collectionModeInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 66, 1)
    /**
     * Optional URI location in the document repository of the raw file parsed by the system to produce this record. To download the raw file, prepend https://udl-hostname/scs/download?id= to this value.
     * Example: /// Example: No example provided.
     * Constraints: Minimum length = 0, Maximum length = 256
     */
    val rawFileUri : String?
        get() {
            val o = __offset(68)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val rawFileUriAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(68, 1)
    fun rawFileUriInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 68, 1)
    /**
     * Source of the data.
     * Example: /// Example: Bluestaq
     * Constraints: Minimum length = 1, Maximum length = 64
     */
    val source : String?
        get() {
            val o = __offset(70)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val sourceAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(70, 1)
    fun sourceInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 70, 1)
    /**
     * Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
     * EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
     * REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
     * SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
     * TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
     * Example: /// Example: TEST
     * Constraints: Minimum length = 1, Maximum length = 32
     */
    val dataMode : Byte
        get() {
            val o = __offset(72)
            return if(o != 0) bb.get(o + bb_pos) else 0
        }
    /**
     * Optional array of provider/source specific tags for this data, where each element is no longer than 32 characters, used for implementing data owner conditional access controls to restrict access to the data. Should be left null by data providers unless conditional access controls are coordinated with the UDL team.
     * Example: /// Example: ['PROVIDER_TAG1', 'PROVIDER_TAG2']
     * Constraints: No constraints specified.
     */
    fun tags(j: Int) : String? {
        val o = __offset(74)
        return if (o != 0) {
            __string(__vector(o) + j * 4)
        } else {
            null
        }
    }
    val tagsLength : Int
        get() {
            val o = __offset(74); return if (o != 0) __vector_len(o) else 0
        }
    /**
     * Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
     * Example: /// Example: THIRD_PARTY_DATASOURCE
     * Constraints: Minimum length = 0, Maximum length = 64
     */
    val origin : String?
        get() {
            val o = __offset(76)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val originAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(76, 1)
    fun originInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 76, 1)
    /**
     * Time the row was created in the database, auto-populated by the system.
     * Example: /// Example: 2018-01-01T16:00:00.123Z
     * Constraints: No constraints specified.
     */
    val createdAt : String?
        get() {
            val o = __offset(78)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val createdAtAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(78, 1)
    fun createdAtInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 78, 1)
    /**
     * Application user who created the row in the database, auto-populated by the system.
     * Example: /// Example: some.user
     * Constraints: Minimum length = 1, Maximum length = 64
     */
    val createdBy : String?
        get() {
            val o = __offset(80)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val createdByAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(80, 1)
    fun createdByInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 80, 1)
    /**
     * Optional source-provided and searchable metadata or descriptor of the data.
     * Example: /// Example: Example descriptor
     * Constraints: Minimum length = 0, Maximum length = 64
     */
    val descriptor : String?
        get() {
            val o = __offset(82)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val descriptorAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(82, 1)
    fun descriptorInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 82, 1)
    /**
     * Optional identifier to track a commercial or marketplace transaction executed to produce this data.
     * Example: /// Example: TRANSACTION-ID
     * Constraints: Minimum length = 0, Maximum length = 64
     */
    val transactionId : String?
        get() {
            val o = __offset(84)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val transactionIdAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(84, 1)
    fun transactionIdInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 84, 1)
    /**
     * The originating source network on which this record was created, auto-populated by the system.
     * Example: /// Example: ORIG
     * Constraints: Minimum length = 0, Maximum length = 32
     */
    val origNetwork : String?
        get() {
            val o = __offset(86)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val origNetworkAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(86, 1)
    fun origNetworkInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 86, 1)
    /**
     * The source data library from which this record was received. This could be a remote or tactical UDL or another data library. If null, the record should be assumed to have originated from the primary Enterprise UDL.
     * Example: /// Example: AXE
     * Constraints: Minimum length = 0, Maximum length = 64
     */
    val sourceDl : String?
        get() {
            val o = __offset(88)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val sourceDlAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(88, 1)
    fun sourceDlInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 88, 1)
    companion object {
        fun validateVersion() = Constants.FLATBUFFERS_24_3_25()
        fun getRootAsDiffOfArrival_Ingest(_bb: ByteBuffer): DiffOfArrival_Ingest = getRootAsDiffOfArrival_Ingest(_bb, DiffOfArrival_Ingest())
        fun getRootAsDiffOfArrival_Ingest(_bb: ByteBuffer, obj: DiffOfArrival_Ingest): DiffOfArrival_Ingest {
            _bb.order(ByteOrder.LITTLE_ENDIAN)
            return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb))
        }
        fun DiffOfArrival_IngestBufferHasIdentifier(_bb: ByteBuffer) : Boolean = __has_identifier(_bb, "DIFF")
        fun createDiffOfArrival_Ingest(builder: FlatBufferBuilder, idOffset: Int, classificationMarkingOffset: Int, obTimeOffset: Int, idOnOrbitOffset: Int, idSensor1Offset: Int, idSensor2Offset: Int, satNo: Int, taskIdOffset: Int, origObjectIdOffset: Int, origSensorId1Offset: Int, origSensorId2Offset: Int, uct: Boolean, sensor1Delay: Double, sensor2Delay: Double, senlat: Double, senlon: Double, senalt: Double, sen2lat: Double, sen2lon: Double, sen2alt: Double, frequency: Double, bandwidth: Double, deltaRange: Double, deltaRangeUnc: Double, deltaRangeRate: Double, deltaRangeRateUnc: Double, snr: Double, tdoa: Double, tdoaUnc: Double, fdoa: Double, fdoaUnc: Double, collectionModeOffset: Int, rawFileUriOffset: Int, sourceOffset: Int, dataMode: Byte, tagsOffset: Int, originOffset: Int, createdAtOffset: Int, createdByOffset: Int, descriptorOffset: Int, transactionIdOffset: Int, origNetworkOffset: Int, sourceDlOffset: Int) : Int {
            builder.startTable(43)
            addFdoaUnc(builder, fdoaUnc)
            addFdoa(builder, fdoa)
            addTdoaUnc(builder, tdoaUnc)
            addTdoa(builder, tdoa)
            addSnr(builder, snr)
            addDeltaRangeRateUnc(builder, deltaRangeRateUnc)
            addDeltaRangeRate(builder, deltaRangeRate)
            addDeltaRangeUnc(builder, deltaRangeUnc)
            addDeltaRange(builder, deltaRange)
            addBandwidth(builder, bandwidth)
            addFrequency(builder, frequency)
            addSen2alt(builder, sen2alt)
            addSen2lon(builder, sen2lon)
            addSen2lat(builder, sen2lat)
            addSenalt(builder, senalt)
            addSenlon(builder, senlon)
            addSenlat(builder, senlat)
            addSensor2Delay(builder, sensor2Delay)
            addSensor1Delay(builder, sensor1Delay)
            addSourceDL(builder, sourceDlOffset)
            addOrigNetwork(builder, origNetworkOffset)
            addTransactionId(builder, transactionIdOffset)
            addDescriptor(builder, descriptorOffset)
            addCreatedBy(builder, createdByOffset)
            addCreatedAt(builder, createdAtOffset)
            addOrigin(builder, originOffset)
            addTags(builder, tagsOffset)
            addSource(builder, sourceOffset)
            addRawFileURI(builder, rawFileUriOffset)
            addCollectionMode(builder, collectionModeOffset)
            addOrigSensorId2(builder, origSensorId2Offset)
            addOrigSensorId1(builder, origSensorId1Offset)
            addOrigObjectId(builder, origObjectIdOffset)
            addTaskId(builder, taskIdOffset)
            addSatNo(builder, satNo)
            addIdSensor2(builder, idSensor2Offset)
            addIdSensor1(builder, idSensor1Offset)
            addIdOnOrbit(builder, idOnOrbitOffset)
            addObTime(builder, obTimeOffset)
            addClassificationMarking(builder, classificationMarkingOffset)
            addId(builder, idOffset)
            addDataMode(builder, dataMode)
            addUct(builder, uct)
            return endDiffOfArrival_Ingest(builder)
        }
        fun startDiffOfArrival_Ingest(builder: FlatBufferBuilder) = builder.startTable(43)
        fun addId(builder: FlatBufferBuilder, id: Int) = builder.addOffset(0, id, 0)
        fun addClassificationMarking(builder: FlatBufferBuilder, classificationMarking: Int) = builder.addOffset(1, classificationMarking, 0)
        fun addObTime(builder: FlatBufferBuilder, obTime: Int) = builder.addOffset(2, obTime, 0)
        fun addIdOnOrbit(builder: FlatBufferBuilder, idOnOrbit: Int) = builder.addOffset(3, idOnOrbit, 0)
        fun addIdSensor1(builder: FlatBufferBuilder, idSensor1: Int) = builder.addOffset(4, idSensor1, 0)
        fun addIdSensor2(builder: FlatBufferBuilder, idSensor2: Int) = builder.addOffset(5, idSensor2, 0)
        fun addSatNo(builder: FlatBufferBuilder, satNo: Int) = builder.addInt(6, satNo, 0)
        fun addTaskId(builder: FlatBufferBuilder, taskId: Int) = builder.addOffset(7, taskId, 0)
        fun addOrigObjectId(builder: FlatBufferBuilder, origObjectId: Int) = builder.addOffset(8, origObjectId, 0)
        fun addOrigSensorId1(builder: FlatBufferBuilder, origSensorId1: Int) = builder.addOffset(9, origSensorId1, 0)
        fun addOrigSensorId2(builder: FlatBufferBuilder, origSensorId2: Int) = builder.addOffset(10, origSensorId2, 0)
        fun addUct(builder: FlatBufferBuilder, uct: Boolean) = builder.addBoolean(11, uct, false)
        fun addSensor1Delay(builder: FlatBufferBuilder, sensor1Delay: Double) = builder.addDouble(12, sensor1Delay, 0.0)
        fun addSensor2Delay(builder: FlatBufferBuilder, sensor2Delay: Double) = builder.addDouble(13, sensor2Delay, 0.0)
        fun addSenlat(builder: FlatBufferBuilder, senlat: Double) = builder.addDouble(14, senlat, 0.0)
        fun addSenlon(builder: FlatBufferBuilder, senlon: Double) = builder.addDouble(15, senlon, 0.0)
        fun addSenalt(builder: FlatBufferBuilder, senalt: Double) = builder.addDouble(16, senalt, 0.0)
        fun addSen2lat(builder: FlatBufferBuilder, sen2lat: Double) = builder.addDouble(17, sen2lat, 0.0)
        fun addSen2lon(builder: FlatBufferBuilder, sen2lon: Double) = builder.addDouble(18, sen2lon, 0.0)
        fun addSen2alt(builder: FlatBufferBuilder, sen2alt: Double) = builder.addDouble(19, sen2alt, 0.0)
        fun addFrequency(builder: FlatBufferBuilder, frequency: Double) = builder.addDouble(20, frequency, 0.0)
        fun addBandwidth(builder: FlatBufferBuilder, bandwidth: Double) = builder.addDouble(21, bandwidth, 0.0)
        fun addDeltaRange(builder: FlatBufferBuilder, deltaRange: Double) = builder.addDouble(22, deltaRange, 0.0)
        fun addDeltaRangeUnc(builder: FlatBufferBuilder, deltaRangeUnc: Double) = builder.addDouble(23, deltaRangeUnc, 0.0)
        fun addDeltaRangeRate(builder: FlatBufferBuilder, deltaRangeRate: Double) = builder.addDouble(24, deltaRangeRate, 0.0)
        fun addDeltaRangeRateUnc(builder: FlatBufferBuilder, deltaRangeRateUnc: Double) = builder.addDouble(25, deltaRangeRateUnc, 0.0)
        fun addSnr(builder: FlatBufferBuilder, snr: Double) = builder.addDouble(26, snr, 0.0)
        fun addTdoa(builder: FlatBufferBuilder, tdoa: Double) = builder.addDouble(27, tdoa, 0.0)
        fun addTdoaUnc(builder: FlatBufferBuilder, tdoaUnc: Double) = builder.addDouble(28, tdoaUnc, 0.0)
        fun addFdoa(builder: FlatBufferBuilder, fdoa: Double) = builder.addDouble(29, fdoa, 0.0)
        fun addFdoaUnc(builder: FlatBufferBuilder, fdoaUnc: Double) = builder.addDouble(30, fdoaUnc, 0.0)
        fun addCollectionMode(builder: FlatBufferBuilder, collectionMode: Int) = builder.addOffset(31, collectionMode, 0)
        fun addRawFileURI(builder: FlatBufferBuilder, rawFileUri: Int) = builder.addOffset(32, rawFileUri, 0)
        fun addSource(builder: FlatBufferBuilder, source: Int) = builder.addOffset(33, source, 0)
        fun addDataMode(builder: FlatBufferBuilder, dataMode: Byte) = builder.addByte(34, dataMode, 0)
        fun addTags(builder: FlatBufferBuilder, tags: Int) = builder.addOffset(35, tags, 0)
        fun createTagsVector(builder: FlatBufferBuilder, data: IntArray) : Int {
            builder.startVector(4, data.size, 4)
            for (i in data.size - 1 downTo 0) {
                builder.addOffset(data[i])
            }
            return builder.endVector()
        }
        fun startTagsVector(builder: FlatBufferBuilder, numElems: Int) = builder.startVector(4, numElems, 4)
        fun addOrigin(builder: FlatBufferBuilder, origin: Int) = builder.addOffset(36, origin, 0)
        fun addCreatedAt(builder: FlatBufferBuilder, createdAt: Int) = builder.addOffset(37, createdAt, 0)
        fun addCreatedBy(builder: FlatBufferBuilder, createdBy: Int) = builder.addOffset(38, createdBy, 0)
        fun addDescriptor(builder: FlatBufferBuilder, descriptor: Int) = builder.addOffset(39, descriptor, 0)
        fun addTransactionId(builder: FlatBufferBuilder, transactionId: Int) = builder.addOffset(40, transactionId, 0)
        fun addOrigNetwork(builder: FlatBufferBuilder, origNetwork: Int) = builder.addOffset(41, origNetwork, 0)
        fun addSourceDL(builder: FlatBufferBuilder, sourceDl: Int) = builder.addOffset(42, sourceDl, 0)
        fun endDiffOfArrival_Ingest(builder: FlatBufferBuilder) : Int {
            val o = builder.endTable()
            return o
        }
        fun finishDiffOfArrivalIngestBuffer(builder: FlatBufferBuilder, offset: Int) = builder.finish(offset, "DIFF")
        fun finishSizePrefixedDiffOfArrival_IngestBuffer(builder: FlatBufferBuilder, offset: Int) = builder.finishSizePrefixed(offset, "DIFF")
    }
}
