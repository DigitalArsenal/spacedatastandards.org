// automatically generated by the FlatBuffers compiler, do not modify

import com.google.flatbuffers.BaseVector
import com.google.flatbuffers.BooleanVector
import com.google.flatbuffers.ByteVector
import com.google.flatbuffers.Constants
import com.google.flatbuffers.DoubleVector
import com.google.flatbuffers.FlatBufferBuilder
import com.google.flatbuffers.FloatVector
import com.google.flatbuffers.LongVector
import com.google.flatbuffers.StringVector
import com.google.flatbuffers.Struct
import com.google.flatbuffers.Table
import com.google.flatbuffers.UnionVector
import java.nio.ByteBuffer
import java.nio.ByteOrder
import kotlin.math.sign

/**
 * /// Seradata-compiled information on communications payloads.
 */
@Suppress("unused")
class SeradataCommDetails_Full : Table() {

    fun __init(_i: Int, _bb: ByteBuffer)  {
        __reset(_i, _bb)
    }
    fun __assign(_i: Int, _bb: ByteBuffer) : SeradataCommDetails_Full {
        __init(_i, _bb)
        return this
    }
    /**
     * Unique identifier of the record, auto-generated by the system.
     * Example: /// Example: SERADATACOMMDETAILS-ID
     * Constraints: Minimum length = 1, Maximum length = 36
     */
    val id : String?
        get() {
            val o = __offset(4)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val idAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(4, 1)
    fun idInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 4, 1)
    /**
     * UUID of the parent Comm record.
     * Example: /// Example: idComm
     * Constraints: Minimum length = 0, Maximum length = 36
     */
    val idComm : String?
        get() {
            val o = __offset(6)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val idCommAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(6, 1)
    fun idCommInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 6, 1)
    /**
     * Classification marking of the data in IC/CAPCO Portion-marked format.
     * Example: /// Example: U
     * Constraints: Minimum length = 1, Maximum length = 128
     */
    val classificationMarking : String?
        get() {
            val o = __offset(8)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val classificationMarkingAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(8, 1)
    fun classificationMarkingInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 8, 1)
    /**
     * Seradata ID of the spacecraft (SeradataSpacecraftDetails ID).
     * Example: /// Example: spacecraftId
     * Constraints: Minimum length = 0, Maximum length = 36
     */
    val spacecraftId : String?
        get() {
            val o = __offset(10)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val spacecraftIdAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(10, 1)
    fun spacecraftIdInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 10, 1)
    /**
     * Name of the band of this RF range (e.g. X,K,Ku,Ka,L,S,C,UHF,VHF,EHF,SHF,UNK,VLF,HF,E,Q,V,W). See RFBandType for more details and descriptions of each band name.
     * Example: /// Example: X
     * Constraints: Minimum length = 0, Maximum length = 5
     */
    val band : String?
        get() {
            val o = __offset(12)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val bandAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(12, 1)
    fun bandInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 12, 1)
    /**
     * Solid state power amplifier, in Watts.
     * Example: /// Example: 1.23
     * Constraints: No constraints specified.
     */
    val solidStatePowerAmp : Double
        get() {
            val o = __offset(14)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Comm travelingWaveTubeAmplifier in Watts.
     * Example: /// Example: 1.23
     * Constraints: No constraints specified.
     */
    val travelingWaveTubeAmplifier : Double
        get() {
            val o = __offset(16)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Comm gatewayUplinkFrom in Ghz.
     * Example: /// Example: 1.23
     * Constraints: No constraints specified.
     */
    val gatewayUplinkFrom : Double
        get() {
            val o = __offset(18)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Comm gatewayUplinkTo in Ghz.
     * Example: /// Example: 1.23
     * Constraints: No constraints specified.
     */
    val gatewayUplinkTo : Double
        get() {
            val o = __offset(20)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Comm gatewayDownlinkFrom in Ghz.
     * Example: /// Example: 1.23
     * Constraints: No constraints specified.
     */
    val gatewayDownlinkFrom : Double
        get() {
            val o = __offset(22)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Comm gatewayDownlinkTo in Ghz.
     * Example: /// Example: 1.23
     * Constraints: No constraints specified.
     */
    val gatewayDownlinkTo : Double
        get() {
            val o = __offset(24)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Comm polarization.
     * Example: /// Example: polarization
     * Constraints: Minimum length = 0, Maximum length = 64
     */
    val polarization : String?
        get() {
            val o = __offset(26)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val polarizationAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(26, 1)
    fun polarizationInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 26, 1)
    /**
     * Effective isotropic radiated power in dB.
     * Example: /// Example: 1.23
     * Constraints: No constraints specified.
     */
    val eirp : Double
        get() {
            val o = __offset(28)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Comm bandwidth in Mhz.
     * Example: /// Example: 1.23
     * Constraints: No constraints specified.
     */
    val bandwidth : Double
        get() {
            val o = __offset(30)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Comm numOperationalTransponders.
     * Example: /// Example: 1
     * Constraints: No constraints specified.
     */
    val numOperationalTransponders : Int
        get() {
            val o = __offset(32)
            return if(o != 0) bb.getInt(o + bb_pos) else 0
        }
    /**
     * Comm numSpareTransponders.
     * Example: /// Example: 1
     * Constraints: No constraints specified.
     */
    val numSpareTransponders : Int
        get() {
            val o = __offset(34)
            return if(o != 0) bb.getInt(o + bb_pos) else 0
        }
    /**
     * Comm hostedForCompanyOrgId.
     * Example: /// Example: hostedForCompanyOrgId
     * Constraints: Minimum length = 0, Maximum length = 36
     */
    val hostedForCompanyOrgId : String?
        get() {
            val o = __offset(36)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val hostedForCompanyOrgIdAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(36, 1)
    fun hostedForCompanyOrgIdInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 36, 1)
    /**
     * Comm manufacturerOrgId.
     * Example: /// Example: manufacturerOrgId
     * Constraints: Minimum length = 0, Maximum length = 36
     */
    val manufacturerOrgId : String?
        get() {
            val o = __offset(38)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val manufacturerOrgIdAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(38, 1)
    fun manufacturerOrgIdInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 38, 1)
    /**
     * Comm tradeLeaseOrgId.
     * Example: /// Example: tradeLeaseOrgId
     * Constraints: Minimum length = 0, Maximum length = 36
     */
    val tradeLeaseOrgId : String?
        get() {
            val o = __offset(40)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val tradeLeaseOrgIdAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(40, 1)
    fun tradeLeaseOrgIdInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 40, 1)
    /**
     * Comm num36MhzEquivalentTransponders.
     * Example: /// Example: 1
     * Constraints: No constraints specified.
     */
    val num36MhzEquivalentTransponders : Int
        get() {
            val o = __offset(42)
            return if(o != 0) bb.getInt(o + bb_pos) else 0
        }
    /**
     * Comm htsNumUserSpotBeams.
     * Example: /// Example: 1
     * Constraints: No constraints specified.
     */
    val htsNumUserSpotBeams : Int
        get() {
            val o = __offset(44)
            return if(o != 0) bb.getInt(o + bb_pos) else 0
        }
    /**
     * Comm htsUserDownlinkBandwidthPerBeam in Mhz.
     * Example: /// Example: 1.23
     * Constraints: No constraints specified.
     */
    val htsUserDownlinkBandwidthPerBeam : Double
        get() {
            val o = __offset(46)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Comm htsUserUplinkBandwidthPerBeam in Mhz.
     * Example: /// Example: 1.23
     * Constraints: No constraints specified.
     */
    val htsUserUplinkBandwidthPerBeam : Double
        get() {
            val o = __offset(48)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Comm estimated HtsTotalUserDownlinkBandwidthPerBeam in Mhz.
     * Example: /// Example: 1.23
     * Constraints: No constraints specified.
     */
    val estHtsTotalUserDownlinkBandwidthPerBeam : Double
        get() {
            val o = __offset(50)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Comm estimated HtsTotalUserUplinkBandwidthPerBeam in Mhz.
     * Example: /// Example: 1.23
     * Constraints: No constraints specified.
     */
    val estHtsTotalUserUplinkBandwidthPerBeam : Double
        get() {
            val o = __offset(52)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Comm estimated HtsTotalCapacity in Gbps.
     * Example: /// Example: 1.23
     * Constraints: No constraints specified.
     */
    val estHtsTotalCapacity : Double
        get() {
            val o = __offset(54)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Comm userDownlinkFrom in Ghz.
     * Example: /// Example: 1.23
     * Constraints: No constraints specified.
     */
    val userDownlinkFrom : Double
        get() {
            val o = __offset(56)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Comm userDownlinkTo in Ghz.
     * Example: /// Example: 1.23
     * Constraints: No constraints specified.
     */
    val userDownlinkTo : Double
        get() {
            val o = __offset(58)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Comm userUplinkFrom in Ghz.
     * Example: /// Example: 1.23
     * Constraints: No constraints specified.
     */
    val userUplinkFrom : Double
        get() {
            val o = __offset(60)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Comm userUplinkTo in Ghz.
     * Example: /// Example: 1.23
     * Constraints: No constraints specified.
     */
    val userUplinkTo : Double
        get() {
            val o = __offset(62)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Payload notes.
     * Example: /// Example: Sample Notes
     * Constraints: Minimum length = 0, Maximum length = 2147483647
     */
    val payloadNotes : String?
        get() {
            val o = __offset(64)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val payloadNotesAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(64, 1)
    fun payloadNotesInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 64, 1)
    /**
     * Source of the data.
     * Example: /// Example: Bluestaq
     * Constraints: Minimum length = 1, Maximum length = 64
     */
    val source : String?
        get() {
            val o = __offset(66)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val sourceAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(66, 1)
    fun sourceInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 66, 1)
    /**
     * Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
     * Example: /// Example: THIRD_PARTY_DATASOURCE
     * Constraints: Minimum length = 0, Maximum length = 64
     */
    val origin : String?
        get() {
            val o = __offset(68)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val originAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(68, 1)
    fun originInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 68, 1)
    /**
     * The originating source network on which this record was created, auto-populated by the system.
     * Example: /// Example: ORIG
     * Constraints: Minimum length = 1, Maximum length = 32
     */
    val origNetwork : String?
        get() {
            val o = __offset(70)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val origNetworkAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(70, 1)
    fun origNetworkInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 70, 1)
    /**
     * Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
     * EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
     * REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
     * SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
     * TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
     * Example: /// Example: TEST
     * Constraints: Minimum length = 1, Maximum length = 32
     */
    val dataMode : Byte
        get() {
            val o = __offset(72)
            return if(o != 0) bb.get(o + bb_pos) else 0
        }
    /**
     * Time the row was created in the database, auto-populated by the system.
     * Example: /// Example: 2018-01-01T16:00:00.123Z
     * Constraints: No constraints specified.
     */
    val createdAt : String?
        get() {
            val o = __offset(74)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val createdAtAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(74, 1)
    fun createdAtInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 74, 1)
    /**
     * Application user who created the row in the database, auto-populated by the system.
     * Example: /// Example: some.user
     * Constraints: Minimum length = 1, Maximum length = 64
     */
    val createdBy : String?
        get() {
            val o = __offset(76)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val createdByAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(76, 1)
    fun createdByInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 76, 1)
    /**
     * Time the row was last updated in the database, auto-populated by the system.
     * Example: /// Example: 2018-01-01T16:00:00.123Z
     * Constraints: No constraints specified.
     */
    val updatedAt : String?
        get() {
            val o = __offset(78)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val updatedAtAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(78, 1)
    fun updatedAtInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 78, 1)
    /**
     * Application user who updated the row in the database, auto-populated by the system.
     * Example: /// Example: some.user
     * Constraints: Minimum length = 1, Maximum length = 64
     */
    val updatedBy : String?
        get() {
            val o = __offset(80)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val updatedByAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(80, 1)
    fun updatedByInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 80, 1)
    companion object {
        fun validateVersion() = Constants.FLATBUFFERS_24_3_25()
        fun getRootAsSeradataCommDetails_Full(_bb: ByteBuffer): SeradataCommDetails_Full = getRootAsSeradataCommDetails_Full(_bb, SeradataCommDetails_Full())
        fun getRootAsSeradataCommDetails_Full(_bb: ByteBuffer, obj: SeradataCommDetails_Full): SeradataCommDetails_Full {
            _bb.order(ByteOrder.LITTLE_ENDIAN)
            return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb))
        }
        fun SeradataCommDetails_FullBufferHasIdentifier(_bb: ByteBuffer) : Boolean = __has_identifier(_bb, "SERA")
        fun createSeradataCommDetails_Full(builder: FlatBufferBuilder, idOffset: Int, idCommOffset: Int, classificationMarkingOffset: Int, spacecraftIdOffset: Int, bandOffset: Int, solidStatePowerAmp: Double, travelingWaveTubeAmplifier: Double, gatewayUplinkFrom: Double, gatewayUplinkTo: Double, gatewayDownlinkFrom: Double, gatewayDownlinkTo: Double, polarizationOffset: Int, eirp: Double, bandwidth: Double, numOperationalTransponders: Int, numSpareTransponders: Int, hostedForCompanyOrgIdOffset: Int, manufacturerOrgIdOffset: Int, tradeLeaseOrgIdOffset: Int, num36MhzEquivalentTransponders: Int, htsNumUserSpotBeams: Int, htsUserDownlinkBandwidthPerBeam: Double, htsUserUplinkBandwidthPerBeam: Double, estHtsTotalUserDownlinkBandwidthPerBeam: Double, estHtsTotalUserUplinkBandwidthPerBeam: Double, estHtsTotalCapacity: Double, userDownlinkFrom: Double, userDownlinkTo: Double, userUplinkFrom: Double, userUplinkTo: Double, payloadNotesOffset: Int, sourceOffset: Int, originOffset: Int, origNetworkOffset: Int, dataMode: Byte, createdAtOffset: Int, createdByOffset: Int, updatedAtOffset: Int, updatedByOffset: Int) : Int {
            builder.startTable(39)
            addUserUplinkTo(builder, userUplinkTo)
            addUserUplinkFrom(builder, userUplinkFrom)
            addUserDownlinkTo(builder, userDownlinkTo)
            addUserDownlinkFrom(builder, userDownlinkFrom)
            addEstHtsTotalCapacity(builder, estHtsTotalCapacity)
            addEstHtsTotalUserUplinkBandwidthPerBeam(builder, estHtsTotalUserUplinkBandwidthPerBeam)
            addEstHtsTotalUserDownlinkBandwidthPerBeam(builder, estHtsTotalUserDownlinkBandwidthPerBeam)
            addHtsUserUplinkBandwidthPerBeam(builder, htsUserUplinkBandwidthPerBeam)
            addHtsUserDownlinkBandwidthPerBeam(builder, htsUserDownlinkBandwidthPerBeam)
            addBandwidth(builder, bandwidth)
            addEirp(builder, eirp)
            addGatewayDownlinkTo(builder, gatewayDownlinkTo)
            addGatewayDownlinkFrom(builder, gatewayDownlinkFrom)
            addGatewayUplinkTo(builder, gatewayUplinkTo)
            addGatewayUplinkFrom(builder, gatewayUplinkFrom)
            addTravelingWaveTubeAmplifier(builder, travelingWaveTubeAmplifier)
            addSolidStatePowerAmp(builder, solidStatePowerAmp)
            addUpdatedBy(builder, updatedByOffset)
            addUpdatedAt(builder, updatedAtOffset)
            addCreatedBy(builder, createdByOffset)
            addCreatedAt(builder, createdAtOffset)
            addOrigNetwork(builder, origNetworkOffset)
            addOrigin(builder, originOffset)
            addSource(builder, sourceOffset)
            addPayloadNotes(builder, payloadNotesOffset)
            addHtsNumUserSpotBeams(builder, htsNumUserSpotBeams)
            addNum36MhzEquivalentTransponders(builder, num36MhzEquivalentTransponders)
            addTradeLeaseOrgId(builder, tradeLeaseOrgIdOffset)
            addManufacturerOrgId(builder, manufacturerOrgIdOffset)
            addHostedForCompanyOrgId(builder, hostedForCompanyOrgIdOffset)
            addNumSpareTransponders(builder, numSpareTransponders)
            addNumOperationalTransponders(builder, numOperationalTransponders)
            addPolarization(builder, polarizationOffset)
            addBand(builder, bandOffset)
            addSpacecraftId(builder, spacecraftIdOffset)
            addClassificationMarking(builder, classificationMarkingOffset)
            addIdComm(builder, idCommOffset)
            addId(builder, idOffset)
            addDataMode(builder, dataMode)
            return endSeradataCommDetails_Full(builder)
        }
        fun startSeradataCommDetails_Full(builder: FlatBufferBuilder) = builder.startTable(39)
        fun addId(builder: FlatBufferBuilder, id: Int) = builder.addOffset(0, id, 0)
        fun addIdComm(builder: FlatBufferBuilder, idComm: Int) = builder.addOffset(1, idComm, 0)
        fun addClassificationMarking(builder: FlatBufferBuilder, classificationMarking: Int) = builder.addOffset(2, classificationMarking, 0)
        fun addSpacecraftId(builder: FlatBufferBuilder, spacecraftId: Int) = builder.addOffset(3, spacecraftId, 0)
        fun addBand(builder: FlatBufferBuilder, band: Int) = builder.addOffset(4, band, 0)
        fun addSolidStatePowerAmp(builder: FlatBufferBuilder, solidStatePowerAmp: Double) = builder.addDouble(5, solidStatePowerAmp, 0.0)
        fun addTravelingWaveTubeAmplifier(builder: FlatBufferBuilder, travelingWaveTubeAmplifier: Double) = builder.addDouble(6, travelingWaveTubeAmplifier, 0.0)
        fun addGatewayUplinkFrom(builder: FlatBufferBuilder, gatewayUplinkFrom: Double) = builder.addDouble(7, gatewayUplinkFrom, 0.0)
        fun addGatewayUplinkTo(builder: FlatBufferBuilder, gatewayUplinkTo: Double) = builder.addDouble(8, gatewayUplinkTo, 0.0)
        fun addGatewayDownlinkFrom(builder: FlatBufferBuilder, gatewayDownlinkFrom: Double) = builder.addDouble(9, gatewayDownlinkFrom, 0.0)
        fun addGatewayDownlinkTo(builder: FlatBufferBuilder, gatewayDownlinkTo: Double) = builder.addDouble(10, gatewayDownlinkTo, 0.0)
        fun addPolarization(builder: FlatBufferBuilder, polarization: Int) = builder.addOffset(11, polarization, 0)
        fun addEirp(builder: FlatBufferBuilder, eirp: Double) = builder.addDouble(12, eirp, 0.0)
        fun addBandwidth(builder: FlatBufferBuilder, bandwidth: Double) = builder.addDouble(13, bandwidth, 0.0)
        fun addNumOperationalTransponders(builder: FlatBufferBuilder, numOperationalTransponders: Int) = builder.addInt(14, numOperationalTransponders, 0)
        fun addNumSpareTransponders(builder: FlatBufferBuilder, numSpareTransponders: Int) = builder.addInt(15, numSpareTransponders, 0)
        fun addHostedForCompanyOrgId(builder: FlatBufferBuilder, hostedForCompanyOrgId: Int) = builder.addOffset(16, hostedForCompanyOrgId, 0)
        fun addManufacturerOrgId(builder: FlatBufferBuilder, manufacturerOrgId: Int) = builder.addOffset(17, manufacturerOrgId, 0)
        fun addTradeLeaseOrgId(builder: FlatBufferBuilder, tradeLeaseOrgId: Int) = builder.addOffset(18, tradeLeaseOrgId, 0)
        fun addNum36MhzEquivalentTransponders(builder: FlatBufferBuilder, num36MhzEquivalentTransponders: Int) = builder.addInt(19, num36MhzEquivalentTransponders, 0)
        fun addHtsNumUserSpotBeams(builder: FlatBufferBuilder, htsNumUserSpotBeams: Int) = builder.addInt(20, htsNumUserSpotBeams, 0)
        fun addHtsUserDownlinkBandwidthPerBeam(builder: FlatBufferBuilder, htsUserDownlinkBandwidthPerBeam: Double) = builder.addDouble(21, htsUserDownlinkBandwidthPerBeam, 0.0)
        fun addHtsUserUplinkBandwidthPerBeam(builder: FlatBufferBuilder, htsUserUplinkBandwidthPerBeam: Double) = builder.addDouble(22, htsUserUplinkBandwidthPerBeam, 0.0)
        fun addEstHtsTotalUserDownlinkBandwidthPerBeam(builder: FlatBufferBuilder, estHtsTotalUserDownlinkBandwidthPerBeam: Double) = builder.addDouble(23, estHtsTotalUserDownlinkBandwidthPerBeam, 0.0)
        fun addEstHtsTotalUserUplinkBandwidthPerBeam(builder: FlatBufferBuilder, estHtsTotalUserUplinkBandwidthPerBeam: Double) = builder.addDouble(24, estHtsTotalUserUplinkBandwidthPerBeam, 0.0)
        fun addEstHtsTotalCapacity(builder: FlatBufferBuilder, estHtsTotalCapacity: Double) = builder.addDouble(25, estHtsTotalCapacity, 0.0)
        fun addUserDownlinkFrom(builder: FlatBufferBuilder, userDownlinkFrom: Double) = builder.addDouble(26, userDownlinkFrom, 0.0)
        fun addUserDownlinkTo(builder: FlatBufferBuilder, userDownlinkTo: Double) = builder.addDouble(27, userDownlinkTo, 0.0)
        fun addUserUplinkFrom(builder: FlatBufferBuilder, userUplinkFrom: Double) = builder.addDouble(28, userUplinkFrom, 0.0)
        fun addUserUplinkTo(builder: FlatBufferBuilder, userUplinkTo: Double) = builder.addDouble(29, userUplinkTo, 0.0)
        fun addPayloadNotes(builder: FlatBufferBuilder, payloadNotes: Int) = builder.addOffset(30, payloadNotes, 0)
        fun addSource(builder: FlatBufferBuilder, source: Int) = builder.addOffset(31, source, 0)
        fun addOrigin(builder: FlatBufferBuilder, origin: Int) = builder.addOffset(32, origin, 0)
        fun addOrigNetwork(builder: FlatBufferBuilder, origNetwork: Int) = builder.addOffset(33, origNetwork, 0)
        fun addDataMode(builder: FlatBufferBuilder, dataMode: Byte) = builder.addByte(34, dataMode, 0)
        fun addCreatedAt(builder: FlatBufferBuilder, createdAt: Int) = builder.addOffset(35, createdAt, 0)
        fun addCreatedBy(builder: FlatBufferBuilder, createdBy: Int) = builder.addOffset(36, createdBy, 0)
        fun addUpdatedAt(builder: FlatBufferBuilder, updatedAt: Int) = builder.addOffset(37, updatedAt, 0)
        fun addUpdatedBy(builder: FlatBufferBuilder, updatedBy: Int) = builder.addOffset(38, updatedBy, 0)
        fun endSeradataCommDetails_Full(builder: FlatBufferBuilder) : Int {
            val o = builder.endTable()
            return o
        }
        fun finishSeradataCommDetailsFullBuffer(builder: FlatBufferBuilder, offset: Int) = builder.finish(offset, "SERA")
        fun finishSizePrefixedSeradataCommDetails_FullBuffer(builder: FlatBufferBuilder, offset: Int) = builder.finishSizePrefixed(offset, "SERA")
    }
}
