// automatically generated by the FlatBuffers compiler, do not modify

import com.google.flatbuffers.BaseVector
import com.google.flatbuffers.BooleanVector
import com.google.flatbuffers.ByteVector
import com.google.flatbuffers.Constants
import com.google.flatbuffers.DoubleVector
import com.google.flatbuffers.FlatBufferBuilder
import com.google.flatbuffers.FloatVector
import com.google.flatbuffers.LongVector
import com.google.flatbuffers.StringVector
import com.google.flatbuffers.Struct
import com.google.flatbuffers.Table
import com.google.flatbuffers.UnionVector
import java.nio.ByteBuffer
import java.nio.ByteOrder
import kotlin.math.sign

/**
 * /// Full set of the IRI formalism coefficients.
 */
@Suppress("unused")
class IonoObservationDensityProfileIRI_Ingest : Table() {

    fun __init(_i: Int, _bb: ByteBuffer)  {
        __reset(_i, _bb)
    }
    fun __assign(_i: Int, _bb: ByteBuffer) : IonoObservationDensityProfileIRI_Ingest {
        __init(_i, _bb)
        return this
    }
    /**
     * Description of IRI implementation.
     * Example: /// Example: Full altitude range of 1D vertical plasma density profile for D, E, and F regions of the ionosphere provided by IRI, in which model parameters are replaced with observed ionogram-derived data where available.
     * Constraints: No constraints specified.
     */
    val description : String?
        get() {
            val o = __offset(4)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val descriptionAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(4, 1)
    fun descriptionInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 4, 1)
    /**
     * Peak density of F2 layer, in grams per cubic centimeter.
     * Example: /// Example: 313283.1
     * Constraints: No constraints specified.
     */
    val nmF2 : Double
        get() {
            val o = __offset(6)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Peak height of F2 layer, in kilometers.
     * Example: /// Example: 265.42
     * Constraints: No constraints specified.
     */
    val hmF2 : Double
        get() {
            val o = __offset(8)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * B0 parameter of the F2 layer shape.
     * Example: /// Example: 245.1
     * Constraints: No constraints specified.
     */
    val b0 : Double
        get() {
            val o = __offset(10)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * B1 parameter of the F2 layer shape.
     * Example: /// Example: 3.45
     * Constraints: No constraints specified.
     */
    val b1 : Double
        get() {
            val o = __offset(12)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Peak density of the F1 layer, in grams per cubic centimeter.
     * Example: /// Example: 210486
     * Constraints: No constraints specified.
     */
    val nmF1 : Double
        get() {
            val o = __offset(14)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Peak height of the F1 layer, in kilometers.
     * Example: /// Example: 210.3
     * Constraints: No constraints specified.
     */
    val hmF1 : Double
        get() {
            val o = __offset(16)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * D1 parameter of the F1 layer shape.
     * Example: /// Example: 0
     * Constraints: No constraints specified.
     */
    val d1 : Double
        get() {
            val o = __offset(18)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Height HZ of the interim layer, in kilometers.
     * Example: /// Example: 142.7
     * Constraints: No constraints specified.
     */
    val hz : Double
        get() {
            val o = __offset(20)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * The valley height, in kilometers.
     * Example: /// Example: 116.2
     * Constraints: No constraints specified.
     */
    val hValTop : Double
        get() {
            val o = __offset(22)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * The valley depth, in grams per cubic centimeter.
     * Example: /// Example: 147025.1
     * Constraints: No constraints specified.
     */
    val nValB : Double
        get() {
            val o = __offset(24)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Peak density of the E layer, in per cubic centimeter.
     * Example: /// Example: 154164.1
     * Constraints: No constraints specified.
     */
    val nmE : Double
        get() {
            val o = __offset(26)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Peak height of the F2 layer, in kilometers.
     * Example: /// Example: 99.8
     * Constraints: No constraints specified.
     */
    val hmE : Double
        get() {
            val o = __offset(28)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Height of the intermediate region at the top of D region, in kilometers.
     * Example: /// Example: 85.6
     * Constraints: No constraints specified.
     */
    val hdx : Double
        get() {
            val o = __offset(30)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Peak density of the D layer, in per cubic centimeter.
     * Example: /// Example: 937543116.1
     * Constraints: No constraints specified.
     */
    val nmD : Double
        get() {
            val o = __offset(32)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Peak height of the D layer, in kilometers.
     * Example: /// Example: 81.1
     * Constraints: No constraints specified.
     */
    val hmD : Double
        get() {
            val o = __offset(34)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Starting height of the D layer, in kilometers.
     * Example: /// Example: 50.1
     * Constraints: No constraints specified.
     */
    val ha : Double
        get() {
            val o = __offset(36)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * TBD.
     * Example: /// Example: 0.0474732023322638
     * Constraints: No constraints specified.
     */
    val fp1 : Double
        get() {
            val o = __offset(38)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * TBD.
     * Example: /// Example: -0.00112685246984002
     * Constraints: No constraints specified.
     */
    val fp2 : Double
        get() {
            val o = __offset(40)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * TBD.
     * Example: /// Example: 0.00827559450035957
     * Constraints: No constraints specified.
     */
    val fp30 : Double
        get() {
            val o = __offset(42)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * TBD.
     * Example: /// Example: 0.000201178475411428
     * Constraints: No constraints specified.
     */
    val fp3U : Double
        get() {
            val o = __offset(44)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Peak Density Thickness (PDT) for description of the flat-nose shape, in kilometers.
     * Example: /// Example: 35.1
     * Constraints: No constraints specified.
     */
    val chi : Double
        get() {
            val o = __offset(46)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    companion object {
        fun validateVersion() = Constants.FLATBUFFERS_24_3_25()
        fun getRootAsIonoObservationDensityProfileIRI_Ingest(_bb: ByteBuffer): IonoObservationDensityProfileIRI_Ingest = getRootAsIonoObservationDensityProfileIRI_Ingest(_bb, IonoObservationDensityProfileIRI_Ingest())
        fun getRootAsIonoObservationDensityProfileIRI_Ingest(_bb: ByteBuffer, obj: IonoObservationDensityProfileIRI_Ingest): IonoObservationDensityProfileIRI_Ingest {
            _bb.order(ByteOrder.LITTLE_ENDIAN)
            return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb))
        }
        fun IonoObservationDensityProfileIRI_IngestBufferHasIdentifier(_bb: ByteBuffer) : Boolean = __has_identifier(_bb, "IONO")
        fun createIonoObservationDensityProfileIRI_Ingest(builder: FlatBufferBuilder, descriptionOffset: Int, nmF2: Double, hmF2: Double, b0: Double, b1: Double, nmF1: Double, hmF1: Double, d1: Double, hz: Double, hValTop: Double, nValB: Double, nmE: Double, hmE: Double, hdx: Double, nmD: Double, hmD: Double, ha: Double, fp1: Double, fp2: Double, fp30: Double, fp3U: Double, chi: Double) : Int {
            builder.startTable(22)
            addChi(builder, chi)
            addFp3U(builder, fp3U)
            addFp30(builder, fp30)
            addFp2(builder, fp2)
            addFp1(builder, fp1)
            addHa(builder, ha)
            addHmD(builder, hmD)
            addNmD(builder, nmD)
            addHdx(builder, hdx)
            addHmE(builder, hmE)
            addNmE(builder, nmE)
            addNValB(builder, nValB)
            addHValTop(builder, hValTop)
            addHz(builder, hz)
            addD1(builder, d1)
            addHmF1(builder, hmF1)
            addNmF1(builder, nmF1)
            addB1(builder, b1)
            addB0(builder, b0)
            addHmF2(builder, hmF2)
            addNmF2(builder, nmF2)
            addDescription(builder, descriptionOffset)
            return endIonoObservationDensityProfileIRI_Ingest(builder)
        }
        fun startIonoObservationDensityProfileIRI_Ingest(builder: FlatBufferBuilder) = builder.startTable(22)
        fun addDescription(builder: FlatBufferBuilder, description: Int) = builder.addOffset(0, description, 0)
        fun addNmF2(builder: FlatBufferBuilder, nmF2: Double) = builder.addDouble(1, nmF2, 0.0)
        fun addHmF2(builder: FlatBufferBuilder, hmF2: Double) = builder.addDouble(2, hmF2, 0.0)
        fun addB0(builder: FlatBufferBuilder, b0: Double) = builder.addDouble(3, b0, 0.0)
        fun addB1(builder: FlatBufferBuilder, b1: Double) = builder.addDouble(4, b1, 0.0)
        fun addNmF1(builder: FlatBufferBuilder, nmF1: Double) = builder.addDouble(5, nmF1, 0.0)
        fun addHmF1(builder: FlatBufferBuilder, hmF1: Double) = builder.addDouble(6, hmF1, 0.0)
        fun addD1(builder: FlatBufferBuilder, d1: Double) = builder.addDouble(7, d1, 0.0)
        fun addHz(builder: FlatBufferBuilder, hz: Double) = builder.addDouble(8, hz, 0.0)
        fun addHValTop(builder: FlatBufferBuilder, hValTop: Double) = builder.addDouble(9, hValTop, 0.0)
        fun addNValB(builder: FlatBufferBuilder, nValB: Double) = builder.addDouble(10, nValB, 0.0)
        fun addNmE(builder: FlatBufferBuilder, nmE: Double) = builder.addDouble(11, nmE, 0.0)
        fun addHmE(builder: FlatBufferBuilder, hmE: Double) = builder.addDouble(12, hmE, 0.0)
        fun addHdx(builder: FlatBufferBuilder, hdx: Double) = builder.addDouble(13, hdx, 0.0)
        fun addNmD(builder: FlatBufferBuilder, nmD: Double) = builder.addDouble(14, nmD, 0.0)
        fun addHmD(builder: FlatBufferBuilder, hmD: Double) = builder.addDouble(15, hmD, 0.0)
        fun addHa(builder: FlatBufferBuilder, ha: Double) = builder.addDouble(16, ha, 0.0)
        fun addFp1(builder: FlatBufferBuilder, fp1: Double) = builder.addDouble(17, fp1, 0.0)
        fun addFp2(builder: FlatBufferBuilder, fp2: Double) = builder.addDouble(18, fp2, 0.0)
        fun addFp30(builder: FlatBufferBuilder, fp30: Double) = builder.addDouble(19, fp30, 0.0)
        fun addFp3U(builder: FlatBufferBuilder, fp3U: Double) = builder.addDouble(20, fp3U, 0.0)
        fun addChi(builder: FlatBufferBuilder, chi: Double) = builder.addDouble(21, chi, 0.0)
        fun endIonoObservationDensityProfileIRI_Ingest(builder: FlatBufferBuilder) : Int {
            val o = builder.endTable()
            return o
        }
        fun finishIonoObservationDensityProfileIRIIngestBuffer(builder: FlatBufferBuilder, offset: Int) = builder.finish(offset, "IONO")
        fun finishSizePrefixedIonoObservationDensityProfileIRI_IngestBuffer(builder: FlatBufferBuilder, offset: Int) = builder.finishSizePrefixed(offset, "IONO")
    }
}
