// automatically generated by the FlatBuffers compiler, do not modify

import com.google.flatbuffers.BaseVector
import com.google.flatbuffers.BooleanVector
import com.google.flatbuffers.ByteVector
import com.google.flatbuffers.Constants
import com.google.flatbuffers.DoubleVector
import com.google.flatbuffers.FlatBufferBuilder
import com.google.flatbuffers.FloatVector
import com.google.flatbuffers.LongVector
import com.google.flatbuffers.StringVector
import com.google.flatbuffers.Struct
import com.google.flatbuffers.Table
import com.google.flatbuffers.UnionVector
import java.nio.ByteBuffer
import java.nio.ByteOrder
import kotlin.math.sign

/**
 * /// Array to support sparse data collections.
 */
@Suppress("unused")
class IonoObservationDatum_Ingest : Table() {

    fun __init(_i: Int, _bb: ByteBuffer)  {
        __reset(_i, _bb)
    }
    fun __assign(_i: Int, _bb: ByteBuffer) : IonoObservationDatum_Ingest {
        __init(_i, _bb)
        return this
    }
    /**
     * Notes for the datum with details of what the data is, units, etc.
     * Example: /// Example: NOTES
     * Constraints: Minimum length = 0, Maximum length = 512
     */
    val notes : String?
        get() {
            val o = __offset(4)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val notesAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(4, 1)
    fun notesInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 4, 1)
    /**
     * Array to support sparse data collections.
     * Example: /// Example: [1.1, 2.1, 3.1]
     * Constraints: No constraints specified.
     */
    fun data(j: Int) : String? {
        val o = __offset(6)
        return if (o != 0) {
            __string(__vector(o) + j * 4)
        } else {
            null
        }
    }
    val dataLength : Int
        get() {
            val o = __offset(6); return if (o != 0) __vector_len(o) else 0
        }
    companion object {
        fun validateVersion() = Constants.FLATBUFFERS_24_3_25()
        fun getRootAsIonoObservationDatum_Ingest(_bb: ByteBuffer): IonoObservationDatum_Ingest = getRootAsIonoObservationDatum_Ingest(_bb, IonoObservationDatum_Ingest())
        fun getRootAsIonoObservationDatum_Ingest(_bb: ByteBuffer, obj: IonoObservationDatum_Ingest): IonoObservationDatum_Ingest {
            _bb.order(ByteOrder.LITTLE_ENDIAN)
            return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb))
        }
        fun IonoObservationDatum_IngestBufferHasIdentifier(_bb: ByteBuffer) : Boolean = __has_identifier(_bb, "IONO")
        fun createIonoObservationDatum_Ingest(builder: FlatBufferBuilder, notesOffset: Int, dataOffset: Int) : Int {
            builder.startTable(2)
            addData(builder, dataOffset)
            addNotes(builder, notesOffset)
            return endIonoObservationDatum_Ingest(builder)
        }
        fun startIonoObservationDatum_Ingest(builder: FlatBufferBuilder) = builder.startTable(2)
        fun addNotes(builder: FlatBufferBuilder, notes: Int) = builder.addOffset(0, notes, 0)
        fun addData(builder: FlatBufferBuilder, data: Int) = builder.addOffset(1, data, 0)
        fun createDataVector(builder: FlatBufferBuilder, data: IntArray) : Int {
            builder.startVector(4, data.size, 4)
            for (i in data.size - 1 downTo 0) {
                builder.addOffset(data[i])
            }
            return builder.endVector()
        }
        fun startDataVector(builder: FlatBufferBuilder, numElems: Int) = builder.startVector(4, numElems, 4)
        fun endIonoObservationDatum_Ingest(builder: FlatBufferBuilder) : Int {
            val o = builder.endTable()
            return o
        }
        fun finishIonoObservationDatumIngestBuffer(builder: FlatBufferBuilder, offset: Int) = builder.finish(offset, "IONO")
        fun finishSizePrefixedIonoObservationDatum_IngestBuffer(builder: FlatBufferBuilder, offset: Int) = builder.finishSizePrefixed(offset, "IONO")
    }
}
