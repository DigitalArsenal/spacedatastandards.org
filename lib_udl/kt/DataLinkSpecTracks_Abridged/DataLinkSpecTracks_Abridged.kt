// automatically generated by the FlatBuffers compiler, do not modify

import com.google.flatbuffers.BaseVector
import com.google.flatbuffers.BooleanVector
import com.google.flatbuffers.ByteVector
import com.google.flatbuffers.Constants
import com.google.flatbuffers.DoubleVector
import com.google.flatbuffers.FlatBufferBuilder
import com.google.flatbuffers.FloatVector
import com.google.flatbuffers.LongVector
import com.google.flatbuffers.StringVector
import com.google.flatbuffers.Struct
import com.google.flatbuffers.Table
import com.google.flatbuffers.UnionVector
import java.nio.ByteBuffer
import java.nio.ByteOrder
import kotlin.math.sign

/**
 * /// Collection of special track numbers used on the data links. There can be 0 to many DataLinkSpecTracks collections within the datalink service.
 */
@Suppress("unused")
class DataLinkSpecTracks_Abridged : Table() {

    fun __init(_i: Int, _bb: ByteBuffer)  {
        __reset(_i, _bb)
    }
    fun __assign(_i: Int, _bb: ByteBuffer) : DataLinkSpecTracks_Abridged {
        __init(_i, _bb)
        return this
    }
    /**
     * The special track number used on the data link entered as an octal reference number. Used to identify a particular type of platform (e.g. MPA, KRESTA) or platform name (e.g. TROMP, MOUNT WHITNEY) which is not included in assigned track blocks.
     * Example: /// Example: 12345
     * Constraints: Minimum length = 0, Maximum length = 16
     */
    val specTrackNum : String?
        get() {
            val o = __offset(4)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val specTrackNumAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(4, 1)
    fun specTrackNumInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 4, 1)
    /**
     * Description of the special track number.
     * Example: /// Example: SAM SITE CHARLIE
     * Constraints: Minimum length = 0, Maximum length = 40
     */
    val specTrackNumDesc : String?
        get() {
            val o = __offset(6)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val specTrackNumDescAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(6, 1)
    fun specTrackNumDescInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 6, 1)
    companion object {
        fun validateVersion() = Constants.FLATBUFFERS_24_3_25()
        fun getRootAsDataLinkSpecTracks_Abridged(_bb: ByteBuffer): DataLinkSpecTracks_Abridged = getRootAsDataLinkSpecTracks_Abridged(_bb, DataLinkSpecTracks_Abridged())
        fun getRootAsDataLinkSpecTracks_Abridged(_bb: ByteBuffer, obj: DataLinkSpecTracks_Abridged): DataLinkSpecTracks_Abridged {
            _bb.order(ByteOrder.LITTLE_ENDIAN)
            return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb))
        }
        fun DataLinkSpecTracks_AbridgedBufferHasIdentifier(_bb: ByteBuffer) : Boolean = __has_identifier(_bb, "DATA")
        fun createDataLinkSpecTracks_Abridged(builder: FlatBufferBuilder, specTrackNumOffset: Int, specTrackNumDescOffset: Int) : Int {
            builder.startTable(2)
            addSpecTrackNumDesc(builder, specTrackNumDescOffset)
            addSpecTrackNum(builder, specTrackNumOffset)
            return endDataLinkSpecTracks_Abridged(builder)
        }
        fun startDataLinkSpecTracks_Abridged(builder: FlatBufferBuilder) = builder.startTable(2)
        fun addSpecTrackNum(builder: FlatBufferBuilder, specTrackNum: Int) = builder.addOffset(0, specTrackNum, 0)
        fun addSpecTrackNumDesc(builder: FlatBufferBuilder, specTrackNumDesc: Int) = builder.addOffset(1, specTrackNumDesc, 0)
        fun endDataLinkSpecTracks_Abridged(builder: FlatBufferBuilder) : Int {
            val o = builder.endTable()
            return o
        }
        fun finishDataLinkSpecTracksAbridgedBuffer(builder: FlatBufferBuilder, offset: Int) = builder.finish(offset, "DATA")
        fun finishSizePrefixedDataLinkSpecTracks_AbridgedBuffer(builder: FlatBufferBuilder, offset: Int) = builder.finishSizePrefixed(offset, "DATA")
    }
}
