// automatically generated by the FlatBuffers compiler, do not modify

import com.google.flatbuffers.BaseVector
import com.google.flatbuffers.BooleanVector
import com.google.flatbuffers.ByteVector
import com.google.flatbuffers.Constants
import com.google.flatbuffers.DoubleVector
import com.google.flatbuffers.FlatBufferBuilder
import com.google.flatbuffers.FloatVector
import com.google.flatbuffers.LongVector
import com.google.flatbuffers.StringVector
import com.google.flatbuffers.Struct
import com.google.flatbuffers.Table
import com.google.flatbuffers.UnionVector
import java.nio.ByteBuffer
import java.nio.ByteOrder
import kotlin.math.sign

/**
 * /// Collection of diplomatic clearance details.
 */
@Suppress("unused")
class DiplomaticClearanceDetails_Ingest : Table() {

    fun __init(_i: Int, _bb: ByteBuffer)  {
        __reset(_i, _bb)
    }
    fun __assign(_i: Int, _bb: ByteBuffer) : DiplomaticClearanceDetails_Ingest {
        __init(_i, _bb)
        return this
    }
    /**
     * Unique identifier of the Aircraft Sortie associated with this diplomatic clearance record.
     * Example: /// Example: 207010e0-f97d-431c-8c00-7e46acfef0f5
     * Constraints: Minimum length = 0, Maximum length = 36
     */
    val idSortie : String?
        get() {
            val o = __offset(4)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val idSortieAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(4, 1)
    fun idSortieInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 4, 1)
    /**
     * Identifies the Itinerary point of a sortie where an air event occurs.
     * Example: /// Example: 825
     * Constraints: No constraints specified.
     */
    val legNum : Int
        get() {
            val o = __offset(6)
            return if(o != 0) bb.getInt(o + bb_pos) else 0
        }
    /**
     * The 1801 fileable route of flight string associated with this diplomatic clearance. The route of flight string contains route designators, significant points, change of speed/altitude, change of flight rules, and cruise climbs.
     * Example: /// Example: DCT DOH P430 BAYAN/M062F150 P430 RAMKI
     * Constraints: Minimum length = 0, Maximum length = 4000
     */
    val routeString : String?
        get() {
            val o = __offset(8)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val routeStringAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(8, 1)
    fun routeStringInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 8, 1)
    /**
     * The start time of the validity of this diplomatic clearance, in ISO 8601 UTC format with millisecond precision.
     * Example: /// Example: 2024-01-01T01:01:01.123Z
     * Constraints: No constraints specified.
     */
    val validStartTime : String?
        get() {
            val o = __offset(10)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val validStartTimeAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(10, 1)
    fun validStartTimeInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 10, 1)
    /**
     * The end time of the validity of this diplomatic clearance, in ISO 8601 UTC format with millisecond precision.
     * Example: /// Example: 2024-01-01T01:01:01.123Z
     * Constraints: No constraints specified.
     */
    val validEndTime : String?
        get() {
            val o = __offset(12)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val validEndTimeAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(12, 1)
    fun validEndTimeInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 12, 1)
    /**
     * Identifier of this diplomatic clearance issued by the host country.
     * Example: /// Example: MFMW225662GHQ
     * Constraints: Minimum length = 0, Maximum length = 32
     */
    val clearanceId : String?
        get() {
            val o = __offset(14)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val clearanceIdAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(14, 1)
    fun clearanceIdInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 14, 1)
    /**
     * Optional clearance ID from external systems. This field has no meaning within UDL and is provided as a convenience for systems that require tracking of an internal system generated ID.
     * Example: /// Example: aa714f4d52a37ab1a00b21af9566e379
     * Constraints: Minimum length = 0, Maximum length = 36
     */
    val externalClearanceId : String?
        get() {
            val o = __offset(16)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val externalClearanceIdAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(16, 1)
    fun externalClearanceIdInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 16, 1)
    /**
     * The call sign of the sortie cleared with this diplomatic clearance.
     * Example: /// Example: FALCN09
     * Constraints: Minimum length = 0, Maximum length = 24
     */
    val clearedCallSign : String?
        get() {
            val o = __offset(18)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val clearedCallSignAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(18, 1)
    fun clearedCallSignInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 18, 1)
    /**
     * The placement of this diplomatic clearance within a sequence of clearances used on a sortie. For example, a sequence value of 3 means that it is the third diplomatic clearance the aircraft will use.
     * Example: /// Example: 3
     * Constraints: No constraints specified.
     */
    val sequenceNum : Int
        get() {
            val o = __offset(20)
            return if(o != 0) bb.getInt(o + bb_pos) else 0
        }
    /**
     * The DoD Standard Country Code designator for the country issuing the diplomatic clearance. This field will be set to "OTHR" if the source value does not match a UDL Country code value (ISO-3166-ALPHA-2).
     * Example: /// Example: NL
     * Constraints: Minimum length = 0, Maximum length = 4
     */
    val countryCode : String?
        get() {
            val o = __offset(22)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val countryCodeAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(22, 1)
    fun countryCodeInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 22, 1)
    /**
     * Specifies an alternate country code if the data provider code is not part of an official Country Code standard such as ISO-3166 or FIPS. This field will be set to the value provided by the source and should be used for all Queries specifying a Country Code.
     * Example: /// Example: IZ
     * Constraints: Minimum length = 0, Maximum length = 16
     */
    val altCountryCode : String?
        get() {
            val o = __offset(24)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val altCountryCodeAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(24, 1)
    fun altCountryCodeInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 24, 1)
    /**
     * Name of the country issuing this diplomatic clearance.
     * Example: /// Example: NETHERLANDS
     * Constraints: Minimum length = 0, Maximum length = 50
     */
    val countryName : String?
        get() {
            val o = __offset(26)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val countryNameAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(26, 1)
    fun countryNameInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 26, 1)
    /**
     * Description of when this diplomatic clearance is valid.
     * Example: /// Example: CY2023
     * Constraints: Minimum length = 0, Maximum length = 256
     */
    val validDesc : String?
        get() {
            val o = __offset(28)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val validDescAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(28, 1)
    fun validDescInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 28, 1)
    /**
     * Remarks concerning the valid diplomatic clearance window.
     * Example: /// Example: Period remarks
     * Constraints: Minimum length = 0, Maximum length = 256
     */
    val windowRemark : String?
        get() {
            val o = __offset(30)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val windowRemarkAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(30, 1)
    fun windowRemarkInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 30, 1)
    /**
     * The navigation point name where the aircraft must enter the country.
     * Example: /// Example: LOMOS
     * Constraints: Minimum length = 0, Maximum length = 38
     */
    val entryPoint : String?
        get() {
            val o = __offset(32)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val entryPointAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(32, 1)
    fun entryPointInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 32, 1)
    /**
     * Earliest time the aircraft may enter the country, in ISO 8601 UTC format with millisecond precision.
     * Example: /// Example: 2024-01-01T01:01:01.123Z
     * Constraints: No constraints specified.
     */
    val entryNet : String?
        get() {
            val o = __offset(34)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val entryNetAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(34, 1)
    fun entryNetInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 34, 1)
    /**
     * The navigation point name where the aircraft must exit the country.
     * Example: /// Example: BUDOP
     * Constraints: Minimum length = 0, Maximum length = 38
     */
    val exitPoint : String?
        get() {
            val o = __offset(36)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val exitPointAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(36, 1)
    fun exitPointInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 36, 1)
    /**
     * Latest time the aircraft may exit the country, in ISO 8601 UTC format with millisecond precision.
     * Example: /// Example: 2024-01-01T01:01:01.123Z
     * Constraints: No constraints specified.
     */
    val exitNlt : String?
        get() {
            val o = __offset(38)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val exitNltAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(38, 1)
    fun exitNltInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 38, 1)
    /**
     * Flag indicating whether the clearance request requires ICAO specific information.
     * Example: /// Example: True
     * Constraints: No constraints specified.
     */
    val reqIcao : Boolean
        get() {
            val o = __offset(40)
            return if(o != 0) 0.toByte() != bb.get(o + bb_pos) else false
        }
    /**
     * The type of action the aircraft can take with this diplomatic clearance (e.g. O for Overfly, L for Land, etc.).
     * Example: /// Example: O
     * Constraints: Minimum length = 0, Maximum length = 1
     */
    val action : String?
        get() {
            val o = __offset(42)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val actionAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(42, 1)
    fun actionInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 42, 1)
    /**
     * Indicates the current status of the diplomatic clearance request.
     * Example: /// Example: IN WORK
     * Constraints: Minimum length = 0, Maximum length = 16
     */
    val status : String?
        get() {
            val o = __offset(44)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val statusAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(44, 1)
    fun statusInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 44, 1)
    /**
     * The diplomatic clearance profile name used within clearance management systems.
     * Example: /// Example: T LAND/OFLY IATA COMPLIANT CARGO 23
     * Constraints: Minimum length = 0, Maximum length = 100
     */
    val profile : String?
        get() {
            val o = __offset(46)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val profileAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(46, 1)
    fun profileInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 46, 1)
    /**
     * Flag indicating whether entry/exit points are required for clearances.
     * Example: /// Example: True
     * Constraints: No constraints specified.
     */
    val reqPoint : Boolean
        get() {
            val o = __offset(48)
            return if(o != 0) 0.toByte() != bb.get(o + bb_pos) else false
        }
    /**
     * Remarks concerning this diplomatic clearance.
     * Example: /// Example: Clearance remarks
     * Constraints: Minimum length = 0, Maximum length = 1024
     */
    val clearanceRemark : String?
        get() {
            val o = __offset(50)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val clearanceRemarkAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(50, 1)
    fun clearanceRemarkInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 50, 1)
    companion object {
        fun validateVersion() = Constants.FLATBUFFERS_24_3_25()
        fun getRootAsDiplomaticClearanceDetails_Ingest(_bb: ByteBuffer): DiplomaticClearanceDetails_Ingest = getRootAsDiplomaticClearanceDetails_Ingest(_bb, DiplomaticClearanceDetails_Ingest())
        fun getRootAsDiplomaticClearanceDetails_Ingest(_bb: ByteBuffer, obj: DiplomaticClearanceDetails_Ingest): DiplomaticClearanceDetails_Ingest {
            _bb.order(ByteOrder.LITTLE_ENDIAN)
            return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb))
        }
        fun DiplomaticClearanceDetails_IngestBufferHasIdentifier(_bb: ByteBuffer) : Boolean = __has_identifier(_bb, "DIPL")
        fun createDiplomaticClearanceDetails_Ingest(builder: FlatBufferBuilder, idSortieOffset: Int, legNum: Int, routeStringOffset: Int, validStartTimeOffset: Int, validEndTimeOffset: Int, clearanceIdOffset: Int, externalClearanceIdOffset: Int, clearedCallSignOffset: Int, sequenceNum: Int, countryCodeOffset: Int, altCountryCodeOffset: Int, countryNameOffset: Int, validDescOffset: Int, windowRemarkOffset: Int, entryPointOffset: Int, entryNetOffset: Int, exitPointOffset: Int, exitNltOffset: Int, reqIcao: Boolean, actionOffset: Int, statusOffset: Int, profileOffset: Int, reqPoint: Boolean, clearanceRemarkOffset: Int) : Int {
            builder.startTable(24)
            addClearanceRemark(builder, clearanceRemarkOffset)
            addProfile(builder, profileOffset)
            addStatus(builder, statusOffset)
            addAction(builder, actionOffset)
            addExitNLT(builder, exitNltOffset)
            addExitPoint(builder, exitPointOffset)
            addEntryNET(builder, entryNetOffset)
            addEntryPoint(builder, entryPointOffset)
            addWindowRemark(builder, windowRemarkOffset)
            addValidDesc(builder, validDescOffset)
            addCountryName(builder, countryNameOffset)
            addAltCountryCode(builder, altCountryCodeOffset)
            addCountryCode(builder, countryCodeOffset)
            addSequenceNum(builder, sequenceNum)
            addClearedCallSign(builder, clearedCallSignOffset)
            addExternalClearanceId(builder, externalClearanceIdOffset)
            addClearanceId(builder, clearanceIdOffset)
            addValidEndTime(builder, validEndTimeOffset)
            addValidStartTime(builder, validStartTimeOffset)
            addRouteString(builder, routeStringOffset)
            addLegNum(builder, legNum)
            addIdSortie(builder, idSortieOffset)
            addReqPoint(builder, reqPoint)
            addReqICAO(builder, reqIcao)
            return endDiplomaticClearanceDetails_Ingest(builder)
        }
        fun startDiplomaticClearanceDetails_Ingest(builder: FlatBufferBuilder) = builder.startTable(24)
        fun addIdSortie(builder: FlatBufferBuilder, idSortie: Int) = builder.addOffset(0, idSortie, 0)
        fun addLegNum(builder: FlatBufferBuilder, legNum: Int) = builder.addInt(1, legNum, 0)
        fun addRouteString(builder: FlatBufferBuilder, routeString: Int) = builder.addOffset(2, routeString, 0)
        fun addValidStartTime(builder: FlatBufferBuilder, validStartTime: Int) = builder.addOffset(3, validStartTime, 0)
        fun addValidEndTime(builder: FlatBufferBuilder, validEndTime: Int) = builder.addOffset(4, validEndTime, 0)
        fun addClearanceId(builder: FlatBufferBuilder, clearanceId: Int) = builder.addOffset(5, clearanceId, 0)
        fun addExternalClearanceId(builder: FlatBufferBuilder, externalClearanceId: Int) = builder.addOffset(6, externalClearanceId, 0)
        fun addClearedCallSign(builder: FlatBufferBuilder, clearedCallSign: Int) = builder.addOffset(7, clearedCallSign, 0)
        fun addSequenceNum(builder: FlatBufferBuilder, sequenceNum: Int) = builder.addInt(8, sequenceNum, 0)
        fun addCountryCode(builder: FlatBufferBuilder, countryCode: Int) = builder.addOffset(9, countryCode, 0)
        fun addAltCountryCode(builder: FlatBufferBuilder, altCountryCode: Int) = builder.addOffset(10, altCountryCode, 0)
        fun addCountryName(builder: FlatBufferBuilder, countryName: Int) = builder.addOffset(11, countryName, 0)
        fun addValidDesc(builder: FlatBufferBuilder, validDesc: Int) = builder.addOffset(12, validDesc, 0)
        fun addWindowRemark(builder: FlatBufferBuilder, windowRemark: Int) = builder.addOffset(13, windowRemark, 0)
        fun addEntryPoint(builder: FlatBufferBuilder, entryPoint: Int) = builder.addOffset(14, entryPoint, 0)
        fun addEntryNET(builder: FlatBufferBuilder, entryNet: Int) = builder.addOffset(15, entryNet, 0)
        fun addExitPoint(builder: FlatBufferBuilder, exitPoint: Int) = builder.addOffset(16, exitPoint, 0)
        fun addExitNLT(builder: FlatBufferBuilder, exitNlt: Int) = builder.addOffset(17, exitNlt, 0)
        fun addReqICAO(builder: FlatBufferBuilder, reqIcao: Boolean) = builder.addBoolean(18, reqIcao, false)
        fun addAction(builder: FlatBufferBuilder, action: Int) = builder.addOffset(19, action, 0)
        fun addStatus(builder: FlatBufferBuilder, status: Int) = builder.addOffset(20, status, 0)
        fun addProfile(builder: FlatBufferBuilder, profile: Int) = builder.addOffset(21, profile, 0)
        fun addReqPoint(builder: FlatBufferBuilder, reqPoint: Boolean) = builder.addBoolean(22, reqPoint, false)
        fun addClearanceRemark(builder: FlatBufferBuilder, clearanceRemark: Int) = builder.addOffset(23, clearanceRemark, 0)
        fun endDiplomaticClearanceDetails_Ingest(builder: FlatBufferBuilder) : Int {
            val o = builder.endTable()
            return o
        }
        fun finishDiplomaticClearanceDetailsIngestBuffer(builder: FlatBufferBuilder, offset: Int) = builder.finish(offset, "DIPL")
        fun finishSizePrefixedDiplomaticClearanceDetails_IngestBuffer(builder: FlatBufferBuilder, offset: Int) = builder.finishSizePrefixed(offset, "DIPL")
    }
}
