// automatically generated by the FlatBuffers compiler, do not modify

import com.google.flatbuffers.BaseVector
import com.google.flatbuffers.BooleanVector
import com.google.flatbuffers.ByteVector
import com.google.flatbuffers.Constants
import com.google.flatbuffers.DoubleVector
import com.google.flatbuffers.FlatBufferBuilder
import com.google.flatbuffers.FloatVector
import com.google.flatbuffers.LongVector
import com.google.flatbuffers.StringVector
import com.google.flatbuffers.Struct
import com.google.flatbuffers.Table
import com.google.flatbuffers.UnionVector
import java.nio.ByteBuffer
import java.nio.ByteOrder
import kotlin.math.sign

/**
 * /// The controlPoint set describes any reference/controlling/rendevous point for a given airspace control means.
 */
@Suppress("unused")
class AirspaceControlPoint_Ingest : Table() {

    fun __init(_i: Int, _bb: ByteBuffer)  {
        __reset(_i, _bb)
    }
    fun __assign(_i: Int, _bb: ByteBuffer) : AirspaceControlPoint_Ingest {
        __init(_i, _bb)
        return this
    }
    /**
     * One of possible control point type codes, such as CP, ER, OT, etc.
     * Example: /// Example: CP
     * Constraints: Minimum length = 0, Maximum length = 2
     */
    val ctrlPtType : String?
        get() {
            val o = __offset(4)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val ctrlPtTypeAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(4, 1)
    fun ctrlPtTypeInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 4, 1)
    /**
     * The name applied to the control point, used as a reference.
     * Example: /// Example: APPLE
     * Constraints: Minimum length = 0, Maximum length = 32
     */
    val ctrlPtName : String?
        get() {
            val o = __offset(6)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val ctrlPtNameAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(6, 1)
    fun ctrlPtNameInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 6, 1)
    /**
     * A geospatial point coordinate specified in DMS (Degrees, Minutes, Seconds) format that represents the location of the control point.
     * Example: /// Example: 203632N0594256E
     * Constraints: Minimum length = 0, Maximum length = 16
     */
    val ctrlPtLocation : String?
        get() {
            val o = __offset(8)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val ctrlPtLocationAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(8, 1)
    fun ctrlPtLocationInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 8, 1)
    /**
     * The altitude of the control point.
     * Example: /// Example: BRFL:MSL-FL230
     * Constraints: Minimum length = 0, Maximum length = 32
     */
    val ctrlPtAltitude : String?
        get() {
            val o = __offset(10)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val ctrlPtAltitudeAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(10, 1)
    fun ctrlPtAltitudeInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 10, 1)
    companion object {
        fun validateVersion() = Constants.FLATBUFFERS_24_3_25()
        fun getRootAsAirspaceControlPoint_Ingest(_bb: ByteBuffer): AirspaceControlPoint_Ingest = getRootAsAirspaceControlPoint_Ingest(_bb, AirspaceControlPoint_Ingest())
        fun getRootAsAirspaceControlPoint_Ingest(_bb: ByteBuffer, obj: AirspaceControlPoint_Ingest): AirspaceControlPoint_Ingest {
            _bb.order(ByteOrder.LITTLE_ENDIAN)
            return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb))
        }
        fun AirspaceControlPoint_IngestBufferHasIdentifier(_bb: ByteBuffer) : Boolean = __has_identifier(_bb, "AIRS")
        fun createAirspaceControlPoint_Ingest(builder: FlatBufferBuilder, ctrlPtTypeOffset: Int, ctrlPtNameOffset: Int, ctrlPtLocationOffset: Int, ctrlPtAltitudeOffset: Int) : Int {
            builder.startTable(4)
            addCtrlPtAltitude(builder, ctrlPtAltitudeOffset)
            addCtrlPtLocation(builder, ctrlPtLocationOffset)
            addCtrlPtName(builder, ctrlPtNameOffset)
            addCtrlPtType(builder, ctrlPtTypeOffset)
            return endAirspaceControlPoint_Ingest(builder)
        }
        fun startAirspaceControlPoint_Ingest(builder: FlatBufferBuilder) = builder.startTable(4)
        fun addCtrlPtType(builder: FlatBufferBuilder, ctrlPtType: Int) = builder.addOffset(0, ctrlPtType, 0)
        fun addCtrlPtName(builder: FlatBufferBuilder, ctrlPtName: Int) = builder.addOffset(1, ctrlPtName, 0)
        fun addCtrlPtLocation(builder: FlatBufferBuilder, ctrlPtLocation: Int) = builder.addOffset(2, ctrlPtLocation, 0)
        fun addCtrlPtAltitude(builder: FlatBufferBuilder, ctrlPtAltitude: Int) = builder.addOffset(3, ctrlPtAltitude, 0)
        fun endAirspaceControlPoint_Ingest(builder: FlatBufferBuilder) : Int {
            val o = builder.endTable()
            return o
        }
        fun finishAirspaceControlPointIngestBuffer(builder: FlatBufferBuilder, offset: Int) = builder.finish(offset, "AIRS")
        fun finishSizePrefixedAirspaceControlPoint_IngestBuffer(builder: FlatBufferBuilder, offset: Int) = builder.finishSizePrefixed(offset, "AIRS")
    }
}
