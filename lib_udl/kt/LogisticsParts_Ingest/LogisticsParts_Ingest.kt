// automatically generated by the FlatBuffers compiler, do not modify

import com.google.flatbuffers.BaseVector
import com.google.flatbuffers.BooleanVector
import com.google.flatbuffers.ByteVector
import com.google.flatbuffers.Constants
import com.google.flatbuffers.DoubleVector
import com.google.flatbuffers.FlatBufferBuilder
import com.google.flatbuffers.FloatVector
import com.google.flatbuffers.LongVector
import com.google.flatbuffers.StringVector
import com.google.flatbuffers.Struct
import com.google.flatbuffers.Table
import com.google.flatbuffers.UnionVector
import java.nio.ByteBuffer
import java.nio.ByteOrder
import kotlin.math.sign

/**
 * /// The parts associated with this support item.
 */
@Suppress("unused")
class LogisticsParts_Ingest : Table() {

    fun __init(_i: Int, _bb: ByteBuffer)  {
        __reset(_i, _bb)
    }
    fun __assign(_i: Int, _bb: ByteBuffer) : LogisticsParts_Ingest {
        __init(_i, _bb)
        return this
    }
    /**
     * Requested or supplied part number.
     * Example: /// Example: MS35338-42
     * Constraints: Minimum length = 0, Maximum length = 20
     */
    val partNumber : String?
        get() {
            val o = __offset(4)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val partNumberAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(4, 1)
    fun partNumberInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 4, 1)
    /**
     * The National Stock Number of the part being requested or supplied.
     * Example: /// Example: 5310-00-045-3299
     * Constraints: Minimum length = 0, Maximum length = 20
     */
    val nationalStockNumber : String?
        get() {
            val o = __offset(6)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val nationalStockNumberAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(6, 1)
    fun nationalStockNumberInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 6, 1)
    /**
     * Code for a unit of measurement.
     * Example: /// Example: EA
     * Constraints: Minimum length = 0, Maximum length = 2
     */
    val measurementUnitCode : String?
        get() {
            val o = __offset(8)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val measurementUnitCodeAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(8, 1)
    fun measurementUnitCodeInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 8, 1)
    /**
     * Work Unit Code (WUC), or for some aircraft types, the Reference Designator.
     * Example: /// Example: 5611UU001
     * Constraints: Minimum length = 0, Maximum length = 10
     */
    val workUnitCode : String?
        get() {
            val o = __offset(10)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val workUnitCodeAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(10, 1)
    fun workUnitCodeInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 10, 1)
    /**
     * Indicates the specified Technical Order manual holding the aircraft information for use in diagnosing a problem or condition.
     * Example: /// Example: 1C-17A-4
     * Constraints: Minimum length = 0, Maximum length = 15
     */
    val technicalOrderText : String?
        get() {
            val o = __offset(12)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val technicalOrderTextAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(12, 1)
    fun technicalOrderTextInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 12, 1)
    /**
     * Technical order manual figure number for the requested / supplied part.
     * Example: /// Example: 3
     * Constraints: Minimum length = 0, Maximum length = 7
     */
    val figureNumber : String?
        get() {
            val o = __offset(14)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val figureNumberAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(14, 1)
    fun figureNumberInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 14, 1)
    /**
     * Technical order manual index number for the requested part.
     * Example: /// Example: 4
     * Constraints: Minimum length = 0, Maximum length = 4
     */
    val indexNumber : String?
        get() {
            val o = __offset(16)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val indexNumberAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(16, 1)
    fun indexNumberInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 16, 1)
    /**
     * The person who validated the request for parts.
     * Example: /// Example: JOHN SMITH
     * Constraints: Minimum length = 0, Maximum length = 25
     */
    val requestVerifier : String?
        get() {
            val o = __offset(18)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val requestVerifierAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(18, 1)
    fun requestVerifierInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 18, 1)
    /**
     * The person who validated that the sourced location has, and can supply, the requested parts.
     * Example: /// Example: JANE DOE
     * Constraints: Minimum length = 0, Maximum length = 25
     */
    val locationVerifier : String?
        get() {
            val o = __offset(20)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val locationVerifierAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(20, 1)
    fun locationVerifierInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 20, 1)
    /**
     * The supply document number.
     * Example: /// Example: J223FU31908300
     * Constraints: Minimum length = 0, Maximum length = 17
     */
    val supplyDocumentNumber : String?
        get() {
            val o = __offset(22)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val supplyDocumentNumberAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(22, 1)
    fun supplyDocumentNumberInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 22, 1)
    /**
     * The supply stocks for this support item.
     * Example: /// Example: No example provided.
     * Constraints: No constraints specified.
     */
    fun logisticsStocks(j: Int) : String? {
        val o = __offset(24)
        return if (o != 0) {
            __string(__vector(o) + j * 4)
        } else {
            null
        }
    }
    val logisticsStocksLength : Int
        get() {
            val o = __offset(24); return if (o != 0) __vector_len(o) else 0
        }
    companion object {
        fun validateVersion() = Constants.FLATBUFFERS_24_3_25()
        fun getRootAsLogisticsParts_Ingest(_bb: ByteBuffer): LogisticsParts_Ingest = getRootAsLogisticsParts_Ingest(_bb, LogisticsParts_Ingest())
        fun getRootAsLogisticsParts_Ingest(_bb: ByteBuffer, obj: LogisticsParts_Ingest): LogisticsParts_Ingest {
            _bb.order(ByteOrder.LITTLE_ENDIAN)
            return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb))
        }
        fun LogisticsParts_IngestBufferHasIdentifier(_bb: ByteBuffer) : Boolean = __has_identifier(_bb, "LOGI")
        fun createLogisticsParts_Ingest(builder: FlatBufferBuilder, partNumberOffset: Int, nationalStockNumberOffset: Int, measurementUnitCodeOffset: Int, workUnitCodeOffset: Int, technicalOrderTextOffset: Int, figureNumberOffset: Int, indexNumberOffset: Int, requestVerifierOffset: Int, locationVerifierOffset: Int, supplyDocumentNumberOffset: Int, logisticsStocksOffset: Int) : Int {
            builder.startTable(11)
            addLogisticsStocks(builder, logisticsStocksOffset)
            addSupplyDocumentNumber(builder, supplyDocumentNumberOffset)
            addLocationVerifier(builder, locationVerifierOffset)
            addRequestVerifier(builder, requestVerifierOffset)
            addIndexNumber(builder, indexNumberOffset)
            addFigureNumber(builder, figureNumberOffset)
            addTechnicalOrderText(builder, technicalOrderTextOffset)
            addWorkUnitCode(builder, workUnitCodeOffset)
            addMeasurementUnitCode(builder, measurementUnitCodeOffset)
            addNationalStockNumber(builder, nationalStockNumberOffset)
            addPartNumber(builder, partNumberOffset)
            return endLogisticsParts_Ingest(builder)
        }
        fun startLogisticsParts_Ingest(builder: FlatBufferBuilder) = builder.startTable(11)
        fun addPartNumber(builder: FlatBufferBuilder, partNumber: Int) = builder.addOffset(0, partNumber, 0)
        fun addNationalStockNumber(builder: FlatBufferBuilder, nationalStockNumber: Int) = builder.addOffset(1, nationalStockNumber, 0)
        fun addMeasurementUnitCode(builder: FlatBufferBuilder, measurementUnitCode: Int) = builder.addOffset(2, measurementUnitCode, 0)
        fun addWorkUnitCode(builder: FlatBufferBuilder, workUnitCode: Int) = builder.addOffset(3, workUnitCode, 0)
        fun addTechnicalOrderText(builder: FlatBufferBuilder, technicalOrderText: Int) = builder.addOffset(4, technicalOrderText, 0)
        fun addFigureNumber(builder: FlatBufferBuilder, figureNumber: Int) = builder.addOffset(5, figureNumber, 0)
        fun addIndexNumber(builder: FlatBufferBuilder, indexNumber: Int) = builder.addOffset(6, indexNumber, 0)
        fun addRequestVerifier(builder: FlatBufferBuilder, requestVerifier: Int) = builder.addOffset(7, requestVerifier, 0)
        fun addLocationVerifier(builder: FlatBufferBuilder, locationVerifier: Int) = builder.addOffset(8, locationVerifier, 0)
        fun addSupplyDocumentNumber(builder: FlatBufferBuilder, supplyDocumentNumber: Int) = builder.addOffset(9, supplyDocumentNumber, 0)
        fun addLogisticsStocks(builder: FlatBufferBuilder, logisticsStocks: Int) = builder.addOffset(10, logisticsStocks, 0)
        fun createLogisticsStocksVector(builder: FlatBufferBuilder, data: IntArray) : Int {
            builder.startVector(4, data.size, 4)
            for (i in data.size - 1 downTo 0) {
                builder.addOffset(data[i])
            }
            return builder.endVector()
        }
        fun startLogisticsStocksVector(builder: FlatBufferBuilder, numElems: Int) = builder.startVector(4, numElems, 4)
        fun endLogisticsParts_Ingest(builder: FlatBufferBuilder) : Int {
            val o = builder.endTable()
            return o
        }
        fun finishLogisticsPartsIngestBuffer(builder: FlatBufferBuilder, offset: Int) = builder.finish(offset, "LOGI")
        fun finishSizePrefixedLogisticsParts_IngestBuffer(builder: FlatBufferBuilder, offset: Int) = builder.finishSizePrefixed(offset, "LOGI")
    }
}
