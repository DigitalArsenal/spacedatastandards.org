// automatically generated by the FlatBuffers compiler, do not modify

import com.google.flatbuffers.BaseVector
import com.google.flatbuffers.BooleanVector
import com.google.flatbuffers.ByteVector
import com.google.flatbuffers.Constants
import com.google.flatbuffers.DoubleVector
import com.google.flatbuffers.FlatBufferBuilder
import com.google.flatbuffers.FloatVector
import com.google.flatbuffers.LongVector
import com.google.flatbuffers.StringVector
import com.google.flatbuffers.Struct
import com.google.flatbuffers.Table
import com.google.flatbuffers.UnionVector
import java.nio.ByteBuffer
import java.nio.ByteOrder
import kotlin.math.sign

/**
 * /// Properties and characteristics of an airfield, which includes location, airfield codes, suitability codes, and remarks.
 */
@Suppress("unused")
class Airfield_Ingest : Table() {

    fun __init(_i: Int, _bb: ByteBuffer)  {
        __reset(_i, _bb)
    }
    fun __assign(_i: Int, _bb: ByteBuffer) : Airfield_Ingest {
        __init(_i, _bb)
        return this
    }
    /**
     * Unique identifier of the record, auto-generated by the system.
     * Example: /// Example: 3f28f60b-3a50-2aef-ac88-8e9d0e39912b
     * Constraints: Minimum length = 1, Maximum length = 36
     */
    val id : String?
        get() {
            val o = __offset(4)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val idAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(4, 1)
    fun idInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 4, 1)
    /**
     * Classification marking of the data in IC/CAPCO Portion-marked format.
     * Example: /// Example: U
     * Constraints: Minimum length = 1, Maximum length = 128
     */
    val classificationMarking : String?
        get() {
            val o = __offset(6)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val classificationMarkingAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(6, 1)
    fun classificationMarkingInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 6, 1)
    /**
     * The ID of the parent site.
     * Example: /// Example: a150b3ee-884b-b9ac-60a0-6408b4b16088
     * Constraints: Minimum length = 0, Maximum length = 36
     */
    val idSite : String?
        get() {
            val o = __offset(8)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val idSiteAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(8, 1)
    fun idSiteInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 8, 1)
    /**
     * Alternate Airfield identifier provided by source.
     * Example: /// Example: 45301
     * Constraints: Minimum length = 0, Maximum length = 36
     */
    val altAirfieldId : String?
        get() {
            val o = __offset(10)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val altAirfieldIdAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(10, 1)
    fun altAirfieldIdInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 10, 1)
    /**
     * The airfield's World Area Code installation number (WAC-INNR).
     * Example: /// Example: 0409-00039
     * Constraints: Minimum length = 0, Maximum length = 32
     */
    val wacInnr : String?
        get() {
            val o = __offset(12)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val wacInnrAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(12, 1)
    fun wacInnrInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 12, 1)
    /**
     * Air Mobility Command (AMC) Zone availability Report identifier.
     * Example: /// Example: 231
     * Constraints: Minimum length = 0, Maximum length = 32
     */
    val zarId : String?
        get() {
            val o = __offset(14)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val zarIdAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(14, 1)
    fun zarIdInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 14, 1)
    /**
     * The International Civil Aviation Organization (ICAO) code of the airfield.
     * Example: /// Example: KCOS
     * Constraints: Minimum length = 0, Maximum length = 4
     */
    val icao : String?
        get() {
            val o = __offset(16)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val icaoAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(16, 1)
    fun icaoInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 16, 1)
    /**
     * The International Aviation Transport Association (IATA) code of the airfield.
     * Example: /// Example: AAA
     * Constraints: Minimum length = 0, Maximum length = 3
     */
    val iata : String?
        get() {
            val o = __offset(18)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val iataAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(18, 1)
    fun iataInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 18, 1)
    /**
     * The Federal Aviation Administration (FAA) location identifier of this airfield.
     * Example: /// Example: FAA1
     * Constraints: Minimum length = 0, Maximum length = 5
     */
    val faa : String?
        get() {
            val o = __offset(20)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val faaAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(20, 1)
    fun faaInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 20, 1)
    /**
     * The host nation code of this airfield, used for non-DoD/FAA locations.
     * Example: /// Example: ZPU
     * Constraints: Minimum length = 0, Maximum length = 16
     */
    val hostNatCode : String?
        get() {
            val o = __offset(22)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val hostNatCodeAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(22, 1)
    fun hostNatCodeInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 22, 1)
    /**
     * The name of the airfield.
     * Example: /// Example: USAF Academy AFLD
     * Constraints: Minimum length = 1, Maximum length = 64
     */
    val name : String?
        get() {
            val o = __offset(24)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val nameAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(24, 1)
    fun nameInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 24, 1)
    /**
     * The airfield activity use type (e.g. Commercial, Airport, Heliport, Gliderport, etc.).
     * Example: /// Example: Commercial
     * Constraints: Minimum length = 1, Maximum length = 32
     */
    val type : String?
        get() {
            val o = __offset(26)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val typeAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(26, 1)
    fun typeInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 26, 1)
    /**
     * WGS84 latitude of the location, in degrees. -90 to 90 degrees (negative values south of equator).
     * Example: /// Example: 45.23
     * Constraints: No constraints specified.
     */
    val lat : Double
        get() {
            val o = __offset(28)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * WGS84 longitude of the location, in degrees. -180 to 180 degrees (negative values west of Prime Meridian).
     * Example: /// Example: 179.1
     * Constraints: No constraints specified.
     */
    val lon : Double
        get() {
            val o = __offset(30)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Elevation of the airfield above mean sea level, in feet.
     * Note: The corresponding equivalent field is not converted by the UDL and may or may not be supplied by the provider. The provider/consumer is responsible for all unit conversions.
     * Example: /// Example: 33.562
     * Constraints: No constraints specified.
     */
    val elevFt : Double
        get() {
            val o = __offset(32)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Elevation of the airfield above mean sea level, in meters.
     * Note: The corresponding equivalent field is not converted by the UDL and may or may not be supplied by the provider. The provider/consumer is responsible for all unit conversions.
     * Example: /// Example: 10.29
     * Constraints: No constraints specified.
     */
    val elevM : Double
        get() {
            val o = __offset(34)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * The magnetic declination/variation of the airfield's location from true north, in degrees.  Positive values east of true north and negative values west of true north.
     * Example: /// Example: 7.35
     * Constraints: No constraints specified.
     */
    val magDec : Double
        get() {
            val o = __offset(36)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Region where the airfield resides.
     * Example: /// Example: North America
     * Constraints: Minimum length = 0, Maximum length = 32
     */
    val regionName : String?
        get() {
            val o = __offset(38)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val regionNameAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(38, 1)
    fun regionNameInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 38, 1)
    /**
     * The country code. This value is typically the ISO 3166 Alpha-2 two-character country code, however it can also represent various consortiums that do not appear in the ISO document. The code must correspond to an existing country in the UDL’s country API. Call udl/country/{code} to get any associated FIPS code, ISO Alpha-3 code, or alternate code values that exist for the specified country code.
     * Example: /// Example: US
     * Constraints: Minimum length = 0, Maximum length = 4
     */
    val countryCode : String?
        get() {
            val o = __offset(40)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val countryCodeAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(40, 1)
    fun countryCodeInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 40, 1)
    /**
     * Closest city to the airfield's location.
     * Example: /// Example: Colorado Springs
     * Constraints: Minimum length = 0, Maximum length = 64
     */
    val city : String?
        get() {
            val o = __offset(42)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val cityAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(42, 1)
    fun cityInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 42, 1)
    /**
     * State or province of the airfield's location.
     * Example: /// Example: Colorado
     * Constraints: Minimum length = 0, Maximum length = 32
     */
    val state : String?
        get() {
            val o = __offset(44)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val stateAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(44, 1)
    fun stateInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 44, 1)
    /**
     * Air Force geographic location code of the airfield.
     * Example: /// Example: XLSX
     * Constraints: Minimum length = 0, Maximum length = 16
     */
    val geoloc : String?
        get() {
            val o = __offset(46)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val geolocAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(46, 1)
    fun geolocInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 46, 1)
    /**
     * Time difference between the location of the airfield and the Greenwich Mean Time (GMT), expressed as +/-HH:MM. Time zones east of Greenwich have positive offsets and time zones west of Greenwich are negative.
     * Example: /// Example: -4:30
     * Constraints: Minimum length = 0, Maximum length = 6
     */
    val gmtOffset : String?
        get() {
            val o = __offset(48)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val gmtOffsetAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(48, 1)
    fun gmtOffsetInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 48, 1)
    /**
     * Associated suitability codes according to the Airfield Suitability and Restrictions Report (ASRR) for this airfield.
     * Example: /// Example: ABCDEF
     * Constraints: Minimum length = 0, Maximum length = 36
     */
    val suitabilityCodes : String?
        get() {
            val o = __offset(50)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val suitabilityCodesAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(50, 1)
    fun suitabilityCodesInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 50, 1)
    /**
     * Applicable miscellaneous codes according to the Airfield Suitability and Restrictions Report (ASRR) for this airfield.
     * Example: /// Example: AMZ
     * Constraints: Minimum length = 0, Maximum length = 36
     */
    val miscCodes : String?
        get() {
            val o = __offset(52)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val miscCodesAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(52, 1)
    fun miscCodesInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 52, 1)
    /**
     * The number of runways at the site.
     * Example: /// Example: 5
     * Constraints: No constraints specified.
     */
    val runways : Int
        get() {
            val o = __offset(54)
            return if(o != 0) bb.getInt(o + bb_pos) else 0
        }
    /**
     * The length of the longest runway at this airfield in feet.
     * Example: /// Example: 1000
     * Constraints: No constraints specified.
     */
    val maxRunwayLength : Int
        get() {
            val o = __offset(56)
            return if(o != 0) bb.getInt(o + bb_pos) else 0
        }
    /**
     * The URL link to information about airfield.
     * Example: /// Example: URL Link to the Airfield
     * Constraints: Minimum length = 0, Maximum length = 256
     */
    val infoUrl : String?
        get() {
            val o = __offset(58)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val infoUrlAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(58, 1)
    fun infoUrlInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 58, 1)
    /**
     * Time the row was created in the database, auto-populated by the system.
     * Example: /// Example: 2022-01-01T16:00:00.123Z
     * Constraints: No constraints specified.
     */
    val createdAt : String?
        get() {
            val o = __offset(60)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val createdAtAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(60, 1)
    fun createdAtInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 60, 1)
    /**
     * Application user who created the row in the database, auto-populated by the system.
     * Example: /// Example: some.user
     * Constraints: Minimum length = 1, Maximum length = 64
     */
    val createdBy : String?
        get() {
            val o = __offset(62)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val createdByAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(62, 1)
    fun createdByInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 62, 1)
    /**
     * The source data library from which this record was received. This could be a remote or tactical UDL or another data library. If null, the record should be assumed to have originated from the primary Enterprise UDL.
     * Example: /// Example: AXE
     * Constraints: Minimum length = 0, Maximum length = 64
     */
    val sourceDl : String?
        get() {
            val o = __offset(64)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val sourceDlAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(64, 1)
    fun sourceDlInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 64, 1)
    /**
     * Source of the data.
     * Example: /// Example: Bluestaq
     * Constraints: Minimum length = 1, Maximum length = 64
     */
    val source : String?
        get() {
            val o = __offset(66)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val sourceAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(66, 1)
    fun sourceInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 66, 1)
    /**
     * Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
     * Example: /// Example: THIRD_PARTY_DATASOURCE
     * Constraints: Minimum length = 0, Maximum length = 64
     */
    val origin : String?
        get() {
            val o = __offset(68)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val originAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(68, 1)
    fun originInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 68, 1)
    /**
     * The originating source network on which this record was created, auto-populated by the system.
     * Example: /// Example: OPS1
     * Constraints: Minimum length = 1, Maximum length = 32
     */
    val origNetwork : String?
        get() {
            val o = __offset(70)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val origNetworkAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(70, 1)
    fun origNetworkInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 70, 1)
    /**
     * Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
     * EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
     * REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
     * SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
     * TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
     * Example: /// Example: TEST
     * Constraints: Minimum length = 1, Maximum length = 32
     */
    val dataMode : Byte
        get() {
            val o = __offset(72)
            return if(o != 0) bb.get(o + bb_pos) else 0
        }
    companion object {
        fun validateVersion() = Constants.FLATBUFFERS_24_3_25()
        fun getRootAsAirfield_Ingest(_bb: ByteBuffer): Airfield_Ingest = getRootAsAirfield_Ingest(_bb, Airfield_Ingest())
        fun getRootAsAirfield_Ingest(_bb: ByteBuffer, obj: Airfield_Ingest): Airfield_Ingest {
            _bb.order(ByteOrder.LITTLE_ENDIAN)
            return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb))
        }
        fun Airfield_IngestBufferHasIdentifier(_bb: ByteBuffer) : Boolean = __has_identifier(_bb, "AIRF")
        fun createAirfield_Ingest(builder: FlatBufferBuilder, idOffset: Int, classificationMarkingOffset: Int, idSiteOffset: Int, altAirfieldIdOffset: Int, wacInnrOffset: Int, zarIdOffset: Int, icaoOffset: Int, iataOffset: Int, faaOffset: Int, hostNatCodeOffset: Int, nameOffset: Int, typeOffset: Int, lat: Double, lon: Double, elevFt: Double, elevM: Double, magDec: Double, regionNameOffset: Int, countryCodeOffset: Int, cityOffset: Int, stateOffset: Int, geolocOffset: Int, gmtOffsetOffset: Int, suitabilityCodesOffset: Int, miscCodesOffset: Int, runways: Int, maxRunwayLength: Int, infoUrlOffset: Int, createdAtOffset: Int, createdByOffset: Int, sourceDlOffset: Int, sourceOffset: Int, originOffset: Int, origNetworkOffset: Int, dataMode: Byte) : Int {
            builder.startTable(35)
            addMagDec(builder, magDec)
            addElevM(builder, elevM)
            addElevFt(builder, elevFt)
            addLon(builder, lon)
            addLat(builder, lat)
            addOrigNetwork(builder, origNetworkOffset)
            addOrigin(builder, originOffset)
            addSource(builder, sourceOffset)
            addSourceDL(builder, sourceDlOffset)
            addCreatedBy(builder, createdByOffset)
            addCreatedAt(builder, createdAtOffset)
            addInfoURL(builder, infoUrlOffset)
            addMaxRunwayLength(builder, maxRunwayLength)
            addRunways(builder, runways)
            addMiscCodes(builder, miscCodesOffset)
            addSuitabilityCodes(builder, suitabilityCodesOffset)
            addGmtOffset(builder, gmtOffsetOffset)
            addGeoloc(builder, geolocOffset)
            addState(builder, stateOffset)
            addCity(builder, cityOffset)
            addCountryCode(builder, countryCodeOffset)
            addRegionName(builder, regionNameOffset)
            addType(builder, typeOffset)
            addName(builder, nameOffset)
            addHostNatCode(builder, hostNatCodeOffset)
            addFaa(builder, faaOffset)
            addIata(builder, iataOffset)
            addIcao(builder, icaoOffset)
            addZarId(builder, zarIdOffset)
            addWacINNR(builder, wacInnrOffset)
            addAltAirfieldId(builder, altAirfieldIdOffset)
            addIdSite(builder, idSiteOffset)
            addClassificationMarking(builder, classificationMarkingOffset)
            addId(builder, idOffset)
            addDataMode(builder, dataMode)
            return endAirfield_Ingest(builder)
        }
        fun startAirfield_Ingest(builder: FlatBufferBuilder) = builder.startTable(35)
        fun addId(builder: FlatBufferBuilder, id: Int) = builder.addOffset(0, id, 0)
        fun addClassificationMarking(builder: FlatBufferBuilder, classificationMarking: Int) = builder.addOffset(1, classificationMarking, 0)
        fun addIdSite(builder: FlatBufferBuilder, idSite: Int) = builder.addOffset(2, idSite, 0)
        fun addAltAirfieldId(builder: FlatBufferBuilder, altAirfieldId: Int) = builder.addOffset(3, altAirfieldId, 0)
        fun addWacINNR(builder: FlatBufferBuilder, wacInnr: Int) = builder.addOffset(4, wacInnr, 0)
        fun addZarId(builder: FlatBufferBuilder, zarId: Int) = builder.addOffset(5, zarId, 0)
        fun addIcao(builder: FlatBufferBuilder, icao: Int) = builder.addOffset(6, icao, 0)
        fun addIata(builder: FlatBufferBuilder, iata: Int) = builder.addOffset(7, iata, 0)
        fun addFaa(builder: FlatBufferBuilder, faa: Int) = builder.addOffset(8, faa, 0)
        fun addHostNatCode(builder: FlatBufferBuilder, hostNatCode: Int) = builder.addOffset(9, hostNatCode, 0)
        fun addName(builder: FlatBufferBuilder, name: Int) = builder.addOffset(10, name, 0)
        fun addType(builder: FlatBufferBuilder, type: Int) = builder.addOffset(11, type, 0)
        fun addLat(builder: FlatBufferBuilder, lat: Double) = builder.addDouble(12, lat, 0.0)
        fun addLon(builder: FlatBufferBuilder, lon: Double) = builder.addDouble(13, lon, 0.0)
        fun addElevFt(builder: FlatBufferBuilder, elevFt: Double) = builder.addDouble(14, elevFt, 0.0)
        fun addElevM(builder: FlatBufferBuilder, elevM: Double) = builder.addDouble(15, elevM, 0.0)
        fun addMagDec(builder: FlatBufferBuilder, magDec: Double) = builder.addDouble(16, magDec, 0.0)
        fun addRegionName(builder: FlatBufferBuilder, regionName: Int) = builder.addOffset(17, regionName, 0)
        fun addCountryCode(builder: FlatBufferBuilder, countryCode: Int) = builder.addOffset(18, countryCode, 0)
        fun addCity(builder: FlatBufferBuilder, city: Int) = builder.addOffset(19, city, 0)
        fun addState(builder: FlatBufferBuilder, state: Int) = builder.addOffset(20, state, 0)
        fun addGeoloc(builder: FlatBufferBuilder, geoloc: Int) = builder.addOffset(21, geoloc, 0)
        fun addGmtOffset(builder: FlatBufferBuilder, gmtOffset: Int) = builder.addOffset(22, gmtOffset, 0)
        fun addSuitabilityCodes(builder: FlatBufferBuilder, suitabilityCodes: Int) = builder.addOffset(23, suitabilityCodes, 0)
        fun addMiscCodes(builder: FlatBufferBuilder, miscCodes: Int) = builder.addOffset(24, miscCodes, 0)
        fun addRunways(builder: FlatBufferBuilder, runways: Int) = builder.addInt(25, runways, 0)
        fun addMaxRunwayLength(builder: FlatBufferBuilder, maxRunwayLength: Int) = builder.addInt(26, maxRunwayLength, 0)
        fun addInfoURL(builder: FlatBufferBuilder, infoUrl: Int) = builder.addOffset(27, infoUrl, 0)
        fun addCreatedAt(builder: FlatBufferBuilder, createdAt: Int) = builder.addOffset(28, createdAt, 0)
        fun addCreatedBy(builder: FlatBufferBuilder, createdBy: Int) = builder.addOffset(29, createdBy, 0)
        fun addSourceDL(builder: FlatBufferBuilder, sourceDl: Int) = builder.addOffset(30, sourceDl, 0)
        fun addSource(builder: FlatBufferBuilder, source: Int) = builder.addOffset(31, source, 0)
        fun addOrigin(builder: FlatBufferBuilder, origin: Int) = builder.addOffset(32, origin, 0)
        fun addOrigNetwork(builder: FlatBufferBuilder, origNetwork: Int) = builder.addOffset(33, origNetwork, 0)
        fun addDataMode(builder: FlatBufferBuilder, dataMode: Byte) = builder.addByte(34, dataMode, 0)
        fun endAirfield_Ingest(builder: FlatBufferBuilder) : Int {
            val o = builder.endTable()
            return o
        }
        fun finishAirfieldIngestBuffer(builder: FlatBufferBuilder, offset: Int) = builder.finish(offset, "AIRF")
        fun finishSizePrefixedAirfield_IngestBuffer(builder: FlatBufferBuilder, offset: Int) = builder.finishSizePrefixed(offset, "AIRF")
    }
}
