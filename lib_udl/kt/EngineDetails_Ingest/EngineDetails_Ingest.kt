// automatically generated by the FlatBuffers compiler, do not modify

import com.google.flatbuffers.BaseVector
import com.google.flatbuffers.BooleanVector
import com.google.flatbuffers.ByteVector
import com.google.flatbuffers.Constants
import com.google.flatbuffers.DoubleVector
import com.google.flatbuffers.FlatBufferBuilder
import com.google.flatbuffers.FloatVector
import com.google.flatbuffers.LongVector
import com.google.flatbuffers.StringVector
import com.google.flatbuffers.Struct
import com.google.flatbuffers.Table
import com.google.flatbuffers.UnionVector
import java.nio.ByteBuffer
import java.nio.ByteOrder
import kotlin.math.sign

/**
 * /// Known launch vehicle engine details and performance characteristics and limits compiled by a particular source.  A launch vehicle engine may have several details records from multiple sources.
 */
@Suppress("unused")
class EngineDetails_Ingest : Table() {

    fun __init(_i: Int, _bb: ByteBuffer)  {
        __reset(_i, _bb)
    }
    fun __assign(_i: Int, _bb: ByteBuffer) : EngineDetails_Ingest {
        __init(_i, _bb)
        return this
    }
    /**
     * Unique identifier of the record, auto-generated by the system.
     * Example: /// Example: ENGINEDETAILS-ID
     * Constraints: Minimum length = 1, Maximum length = 36
     */
    val id : String?
        get() {
            val o = __offset(4)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val idAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(4, 1)
    fun idInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 4, 1)
    /**
     * Identifier of the parent engine record.
     * Example: /// Example: ENGINE-ID
     * Constraints: Minimum length = 1, Maximum length = 36
     */
    val idEngine : String?
        get() {
            val o = __offset(6)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val idEngineAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(6, 1)
    fun idEngineInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 6, 1)
    /**
     * Classification marking of the data in IC/CAPCO Portion-marked format.
     * Example: /// Example: U
     * Constraints: Minimum length = 1, Maximum length = 128
     */
    val classificationMarking : String?
        get() {
            val o = __offset(8)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val classificationMarkingAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(8, 1)
    fun classificationMarkingInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 8, 1)
    /**
     * Engine type or family.
     * Example: /// Example: ENGINE_TYPE1
     * Constraints: Minimum length = 0, Maximum length = 64
     */
    val family : String?
        get() {
            val o = __offset(10)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val familyAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(10, 1)
    fun familyInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 10, 1)
    /**
     * Engine cycle type (e.g. Electrostatic Ion, Pressure Fed, Hall, Catalytic Decomposition, etc.).
     * Example: /// Example: Pressure Fed
     * Constraints: Minimum length = 0, Maximum length = 64
     */
    val cycleType : String?
        get() {
            val o = __offset(12)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val cycleTypeAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(12, 1)
    fun cycleTypeInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 12, 1)
    /**
     * Engine characteristic type (e.g. Electric, Mono-propellant, Bi-propellant, etc.).
     * Example: /// Example: Electric
     * Constraints: Minimum length = 0, Maximum length = 64
     */
    val characteristicType : String?
        get() {
            val o = __offset(14)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val characteristicTypeAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(14, 1)
    fun characteristicTypeInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 14, 1)
    /**
     * Organization ID of the engine manufacturer.
     * Example: /// Example: MANUFACTURERORG-ID
     * Constraints: Minimum length = 0, Maximum length = 36
     */
    val manufacturerOrgId : String?
        get() {
            val o = __offset(16)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val manufacturerOrgIdAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(16, 1)
    fun manufacturerOrgIdInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 16, 1)
    /**
     * Launch engine specific impulse in seconds.
     * Example: /// Example: 1.1
     * Constraints: No constraints specified.
     */
    val specificImpulse : Double
        get() {
            val o = __offset(18)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Launch engine maximum burn time in seconds.
     * Example: /// Example: 1.1
     * Constraints: No constraints specified.
     */
    val burnTime : Double
        get() {
            val o = __offset(20)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Engine maximum thrust at sea level in Kilo-Newtons.
     * Example: /// Example: 1.1
     * Constraints: No constraints specified.
     */
    val seaLevelThrust : Double
        get() {
            val o = __offset(22)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Engine maximum thrust in a vacuum in Kilo-Newtons.
     * Example: /// Example: 1.1
     * Constraints: No constraints specified.
     */
    val vacuumThrust : Double
        get() {
            val o = __offset(24)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Engine chamber pressure in bars.
     * Example: /// Example: 1.1
     * Constraints: No constraints specified.
     */
    val chamberPressure : Double
        get() {
            val o = __offset(26)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Engine nozzle expansion ratio.
     * Example: /// Example: 1.1
     * Constraints: No constraints specified.
     */
    val nozzleExpansionRatio : Double
        get() {
            val o = __offset(28)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Engine maximum number of firings.
     * Example: /// Example: 5
     * Constraints: No constraints specified.
     */
    val maxFirings : Int
        get() {
            val o = __offset(30)
            return if(o != 0) bb.getInt(o + bb_pos) else 0
        }
    /**
     * Propellant/fuel type of the engine (e.g. Liquid Hydrogen, Kerosene, Aerozine, etc).
     * Example: /// Example: Liquid
     * Constraints: Minimum length = 0, Maximum length = 64
     */
    val propellant : String?
        get() {
            val o = __offset(32)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val propellantAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(32, 1)
    fun propellantInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 32, 1)
    /**
     * Oxidizer type (e.g. Nitrogen Tetroxide, Liquid Oxygen, etc).
     * Example: /// Example: Liquid Oxygen
     * Constraints: Minimum length = 0, Maximum length = 64
     */
    val oxidizer : String?
        get() {
            val o = __offset(34)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val oxidizerAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(34, 1)
    fun oxidizerInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 34, 1)
    /**
     * Notes/Description of the engine.
     * Example: /// Example: Example notes
     * Constraints: Minimum length = 0, Maximum length = 1024
     */
    val notes : String?
        get() {
            val o = __offset(36)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val notesAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(36, 1)
    fun notesInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 36, 1)
    /**
     * Time the row was created in the database, auto-populated by the system.
     * Example: /// Example: 2018-01-01T16:00:00.123Z
     * Constraints: No constraints specified.
     */
    val createdAt : String?
        get() {
            val o = __offset(38)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val createdAtAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(38, 1)
    fun createdAtInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 38, 1)
    /**
     * Application user who created the row in the database, auto-populated by the system.
     * Example: /// Example: some.user
     * Constraints: Minimum length = 1, Maximum length = 64
     */
    val createdBy : String?
        get() {
            val o = __offset(40)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val createdByAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(40, 1)
    fun createdByInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 40, 1)
    /**
     * Source of the data.
     * Example: /// Example: Bluestaq
     * Constraints: Minimum length = 1, Maximum length = 64
     */
    val source : String?
        get() {
            val o = __offset(42)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val sourceAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(42, 1)
    fun sourceInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 42, 1)
    /**
     * Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
     * Example: /// Example: THIRD_PARTY_DATASOURCE
     * Constraints: Minimum length = 0, Maximum length = 64
     */
    val origin : String?
        get() {
            val o = __offset(44)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val originAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(44, 1)
    fun originInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 44, 1)
    /**
     * The originating source network on which this record was created, auto-populated by the system.
     * Example: /// Example: ORIG
     * Constraints: Minimum length = 1, Maximum length = 32
     */
    val origNetwork : String?
        get() {
            val o = __offset(46)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val origNetworkAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(46, 1)
    fun origNetworkInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 46, 1)
    /**
     * Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
     * EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
     * REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
     * SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
     * TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
     * Example: /// Example: TEST
     * Constraints: Minimum length = 1, Maximum length = 32
     */
    val dataMode : Byte
        get() {
            val o = __offset(48)
            return if(o != 0) bb.get(o + bb_pos) else 0
        }
    /**
     * Optional array of provider/source specific tags for this data, where each element is no longer than 32 characters, used for implementing data owner conditional access controls to restrict access to the data. Should be left null by data providers unless conditional access controls are coordinated with the UDL team.
     * Example: /// Example: ['PROVIDER_TAG1', 'PROVIDER_TAG2']
     * Constraints: No constraints specified.
     */
    fun tags(j: Int) : String? {
        val o = __offset(50)
        return if (o != 0) {
            __string(__vector(o) + j * 4)
        } else {
            null
        }
    }
    val tagsLength : Int
        get() {
            val o = __offset(50); return if (o != 0) __vector_len(o) else 0
        }
    companion object {
        fun validateVersion() = Constants.FLATBUFFERS_24_3_25()
        fun getRootAsEngineDetails_Ingest(_bb: ByteBuffer): EngineDetails_Ingest = getRootAsEngineDetails_Ingest(_bb, EngineDetails_Ingest())
        fun getRootAsEngineDetails_Ingest(_bb: ByteBuffer, obj: EngineDetails_Ingest): EngineDetails_Ingest {
            _bb.order(ByteOrder.LITTLE_ENDIAN)
            return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb))
        }
        fun EngineDetails_IngestBufferHasIdentifier(_bb: ByteBuffer) : Boolean = __has_identifier(_bb, "ENGI")
        fun createEngineDetails_Ingest(builder: FlatBufferBuilder, idOffset: Int, idEngineOffset: Int, classificationMarkingOffset: Int, familyOffset: Int, cycleTypeOffset: Int, characteristicTypeOffset: Int, manufacturerOrgIdOffset: Int, specificImpulse: Double, burnTime: Double, seaLevelThrust: Double, vacuumThrust: Double, chamberPressure: Double, nozzleExpansionRatio: Double, maxFirings: Int, propellantOffset: Int, oxidizerOffset: Int, notesOffset: Int, createdAtOffset: Int, createdByOffset: Int, sourceOffset: Int, originOffset: Int, origNetworkOffset: Int, dataMode: Byte, tagsOffset: Int) : Int {
            builder.startTable(24)
            addNozzleExpansionRatio(builder, nozzleExpansionRatio)
            addChamberPressure(builder, chamberPressure)
            addVacuumThrust(builder, vacuumThrust)
            addSeaLevelThrust(builder, seaLevelThrust)
            addBurnTime(builder, burnTime)
            addSpecificImpulse(builder, specificImpulse)
            addTags(builder, tagsOffset)
            addOrigNetwork(builder, origNetworkOffset)
            addOrigin(builder, originOffset)
            addSource(builder, sourceOffset)
            addCreatedBy(builder, createdByOffset)
            addCreatedAt(builder, createdAtOffset)
            addNotes(builder, notesOffset)
            addOxidizer(builder, oxidizerOffset)
            addPropellant(builder, propellantOffset)
            addMaxFirings(builder, maxFirings)
            addManufacturerOrgId(builder, manufacturerOrgIdOffset)
            addCharacteristicType(builder, characteristicTypeOffset)
            addCycleType(builder, cycleTypeOffset)
            addFamily(builder, familyOffset)
            addClassificationMarking(builder, classificationMarkingOffset)
            addIdEngine(builder, idEngineOffset)
            addId(builder, idOffset)
            addDataMode(builder, dataMode)
            return endEngineDetails_Ingest(builder)
        }
        fun startEngineDetails_Ingest(builder: FlatBufferBuilder) = builder.startTable(24)
        fun addId(builder: FlatBufferBuilder, id: Int) = builder.addOffset(0, id, 0)
        fun addIdEngine(builder: FlatBufferBuilder, idEngine: Int) = builder.addOffset(1, idEngine, 0)
        fun addClassificationMarking(builder: FlatBufferBuilder, classificationMarking: Int) = builder.addOffset(2, classificationMarking, 0)
        fun addFamily(builder: FlatBufferBuilder, family: Int) = builder.addOffset(3, family, 0)
        fun addCycleType(builder: FlatBufferBuilder, cycleType: Int) = builder.addOffset(4, cycleType, 0)
        fun addCharacteristicType(builder: FlatBufferBuilder, characteristicType: Int) = builder.addOffset(5, characteristicType, 0)
        fun addManufacturerOrgId(builder: FlatBufferBuilder, manufacturerOrgId: Int) = builder.addOffset(6, manufacturerOrgId, 0)
        fun addSpecificImpulse(builder: FlatBufferBuilder, specificImpulse: Double) = builder.addDouble(7, specificImpulse, 0.0)
        fun addBurnTime(builder: FlatBufferBuilder, burnTime: Double) = builder.addDouble(8, burnTime, 0.0)
        fun addSeaLevelThrust(builder: FlatBufferBuilder, seaLevelThrust: Double) = builder.addDouble(9, seaLevelThrust, 0.0)
        fun addVacuumThrust(builder: FlatBufferBuilder, vacuumThrust: Double) = builder.addDouble(10, vacuumThrust, 0.0)
        fun addChamberPressure(builder: FlatBufferBuilder, chamberPressure: Double) = builder.addDouble(11, chamberPressure, 0.0)
        fun addNozzleExpansionRatio(builder: FlatBufferBuilder, nozzleExpansionRatio: Double) = builder.addDouble(12, nozzleExpansionRatio, 0.0)
        fun addMaxFirings(builder: FlatBufferBuilder, maxFirings: Int) = builder.addInt(13, maxFirings, 0)
        fun addPropellant(builder: FlatBufferBuilder, propellant: Int) = builder.addOffset(14, propellant, 0)
        fun addOxidizer(builder: FlatBufferBuilder, oxidizer: Int) = builder.addOffset(15, oxidizer, 0)
        fun addNotes(builder: FlatBufferBuilder, notes: Int) = builder.addOffset(16, notes, 0)
        fun addCreatedAt(builder: FlatBufferBuilder, createdAt: Int) = builder.addOffset(17, createdAt, 0)
        fun addCreatedBy(builder: FlatBufferBuilder, createdBy: Int) = builder.addOffset(18, createdBy, 0)
        fun addSource(builder: FlatBufferBuilder, source: Int) = builder.addOffset(19, source, 0)
        fun addOrigin(builder: FlatBufferBuilder, origin: Int) = builder.addOffset(20, origin, 0)
        fun addOrigNetwork(builder: FlatBufferBuilder, origNetwork: Int) = builder.addOffset(21, origNetwork, 0)
        fun addDataMode(builder: FlatBufferBuilder, dataMode: Byte) = builder.addByte(22, dataMode, 0)
        fun addTags(builder: FlatBufferBuilder, tags: Int) = builder.addOffset(23, tags, 0)
        fun createTagsVector(builder: FlatBufferBuilder, data: IntArray) : Int {
            builder.startVector(4, data.size, 4)
            for (i in data.size - 1 downTo 0) {
                builder.addOffset(data[i])
            }
            return builder.endVector()
        }
        fun startTagsVector(builder: FlatBufferBuilder, numElems: Int) = builder.startVector(4, numElems, 4)
        fun endEngineDetails_Ingest(builder: FlatBufferBuilder) : Int {
            val o = builder.endTable()
            return o
        }
        fun finishEngineDetailsIngestBuffer(builder: FlatBufferBuilder, offset: Int) = builder.finish(offset, "ENGI")
        fun finishSizePrefixedEngineDetails_IngestBuffer(builder: FlatBufferBuilder, offset: Int) = builder.finishSizePrefixed(offset, "ENGI")
    }
}
