// automatically generated by the FlatBuffers compiler, do not modify

import com.google.flatbuffers.BaseVector
import com.google.flatbuffers.BooleanVector
import com.google.flatbuffers.ByteVector
import com.google.flatbuffers.Constants
import com.google.flatbuffers.DoubleVector
import com.google.flatbuffers.FlatBufferBuilder
import com.google.flatbuffers.FloatVector
import com.google.flatbuffers.LongVector
import com.google.flatbuffers.StringVector
import com.google.flatbuffers.Struct
import com.google.flatbuffers.Table
import com.google.flatbuffers.UnionVector
import java.nio.ByteBuffer
import java.nio.ByteOrder
import kotlin.math.sign

/**
 * /// For phased arrays, a 2D array. 1st dimension spans the dimension antenna_element (see phase or amplitude). 2nd dimension spans 3 (x, y, z) Cartesian coordinates.
 */
@Suppress("unused")
class IonoObservationAntennaElementPosition_Abridged : Table() {

    fun __init(_i: Int, _bb: ByteBuffer)  {
        __reset(_i, _bb)
    }
    fun __assign(_i: Int, _bb: ByteBuffer) : IonoObservationAntennaElementPosition_Abridged {
        __init(_i, _bb)
        return this
    }
    /**
     * Array of integers of the antenna_element dimensions.
     * Example: /// Example: [3, 4]
     * Constraints: No constraints specified.
     */
    fun dimensions(j: Int) : String? {
        val o = __offset(4)
        return if (o != 0) {
            __string(__vector(o) + j * 4)
        } else {
            null
        }
    }
    val dimensionsLength : Int
        get() {
            val o = __offset(4); return if (o != 0) __vector_len(o) else 0
        }
    /**
     * Array of names for dimensions.
     * Example: /// Example: ['NAME1', 'NAME2']
     * Constraints: No constraints specified.
     */
    fun dimensionName(j: Int) : String? {
        val o = __offset(6)
        return if (o != 0) {
            __string(__vector(o) + j * 4)
        } else {
            null
        }
    }
    val dimensionNameLength : Int
        get() {
            val o = __offset(6); return if (o != 0) __vector_len(o) else 0
        }
    /**
     * Array of 3-element tuples (x,y,z) in km.
     * Example: /// Example: [[1.23, 0.123]]
     * Constraints: No constraints specified.
     */
    fun data(j: Int) : String? {
        val o = __offset(8)
        return if (o != 0) {
            __string(__vector(o) + j * 4)
        } else {
            null
        }
    }
    val dataLength : Int
        get() {
            val o = __offset(8); return if (o != 0) __vector_len(o) else 0
        }
    companion object {
        fun validateVersion() = Constants.FLATBUFFERS_24_3_25()
        fun getRootAsIonoObservationAntennaElementPosition_Abridged(_bb: ByteBuffer): IonoObservationAntennaElementPosition_Abridged = getRootAsIonoObservationAntennaElementPosition_Abridged(_bb, IonoObservationAntennaElementPosition_Abridged())
        fun getRootAsIonoObservationAntennaElementPosition_Abridged(_bb: ByteBuffer, obj: IonoObservationAntennaElementPosition_Abridged): IonoObservationAntennaElementPosition_Abridged {
            _bb.order(ByteOrder.LITTLE_ENDIAN)
            return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb))
        }
        fun IonoObservationAntennaElementPosition_AbridgedBufferHasIdentifier(_bb: ByteBuffer) : Boolean = __has_identifier(_bb, "IONO")
        fun createIonoObservationAntennaElementPosition_Abridged(builder: FlatBufferBuilder, dimensionsOffset: Int, dimensionNameOffset: Int, dataOffset: Int) : Int {
            builder.startTable(3)
            addData(builder, dataOffset)
            addDimensionName(builder, dimensionNameOffset)
            addDimensions(builder, dimensionsOffset)
            return endIonoObservationAntennaElementPosition_Abridged(builder)
        }
        fun startIonoObservationAntennaElementPosition_Abridged(builder: FlatBufferBuilder) = builder.startTable(3)
        fun addDimensions(builder: FlatBufferBuilder, dimensions: Int) = builder.addOffset(0, dimensions, 0)
        fun createDimensionsVector(builder: FlatBufferBuilder, data: IntArray) : Int {
            builder.startVector(4, data.size, 4)
            for (i in data.size - 1 downTo 0) {
                builder.addOffset(data[i])
            }
            return builder.endVector()
        }
        fun startDimensionsVector(builder: FlatBufferBuilder, numElems: Int) = builder.startVector(4, numElems, 4)
        fun addDimensionName(builder: FlatBufferBuilder, dimensionName: Int) = builder.addOffset(1, dimensionName, 0)
        fun createDimensionNameVector(builder: FlatBufferBuilder, data: IntArray) : Int {
            builder.startVector(4, data.size, 4)
            for (i in data.size - 1 downTo 0) {
                builder.addOffset(data[i])
            }
            return builder.endVector()
        }
        fun startDimensionNameVector(builder: FlatBufferBuilder, numElems: Int) = builder.startVector(4, numElems, 4)
        fun addData(builder: FlatBufferBuilder, data: Int) = builder.addOffset(2, data, 0)
        fun createDataVector(builder: FlatBufferBuilder, data: IntArray) : Int {
            builder.startVector(4, data.size, 4)
            for (i in data.size - 1 downTo 0) {
                builder.addOffset(data[i])
            }
            return builder.endVector()
        }
        fun startDataVector(builder: FlatBufferBuilder, numElems: Int) = builder.startVector(4, numElems, 4)
        fun endIonoObservationAntennaElementPosition_Abridged(builder: FlatBufferBuilder) : Int {
            val o = builder.endTable()
            return o
        }
        fun finishIonoObservationAntennaElementPositionAbridgedBuffer(builder: FlatBufferBuilder, offset: Int) = builder.finish(offset, "IONO")
        fun finishSizePrefixedIonoObservationAntennaElementPosition_AbridgedBuffer(builder: FlatBufferBuilder, offset: Int) = builder.finishSizePrefixed(offset, "IONO")
    }
}
