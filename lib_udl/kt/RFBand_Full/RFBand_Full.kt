// automatically generated by the FlatBuffers compiler, do not modify

import com.google.flatbuffers.BaseVector
import com.google.flatbuffers.BooleanVector
import com.google.flatbuffers.ByteVector
import com.google.flatbuffers.Constants
import com.google.flatbuffers.DoubleVector
import com.google.flatbuffers.FlatBufferBuilder
import com.google.flatbuffers.FloatVector
import com.google.flatbuffers.LongVector
import com.google.flatbuffers.StringVector
import com.google.flatbuffers.Struct
import com.google.flatbuffers.Table
import com.google.flatbuffers.UnionVector
import java.nio.ByteBuffer
import java.nio.ByteOrder
import kotlin.math.sign

/**
 * /// Details on a particular Radio Frequency (RF) band, also known as a carrier, which may be in use by any type of Entity for communications or operations.
 */
@Suppress("unused")
class RFBand_Full : Table() {

    fun __init(_i: Int, _bb: ByteBuffer)  {
        __reset(_i, _bb)
    }
    fun __assign(_i: Int, _bb: ByteBuffer) : RFBand_Full {
        __init(_i, _bb)
        return this
    }
    /**
     * Unique identifier of the record, auto-generated by the system.
     * Example: /// Example: RFBAND-ID
     * Constraints: Minimum length = 1, Maximum length = 36
     */
    val id : String?
        get() {
            val o = __offset(4)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val idAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(4, 1)
    fun idInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 4, 1)
    /**
     * Unique identifier of the parent Entity which uses this band.
     * Example: /// Example: ENTITY-ID
     * Constraints: Minimum length = 1, Maximum length = 36
     */
    val idEntity : String?
        get() {
            val o = __offset(6)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val idEntityAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(6, 1)
    fun idEntityInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 6, 1)
    /**
     * Classification marking of the data in IC/CAPCO Portion-marked format.
     * Example: /// Example: U
     * Constraints: Minimum length = 1, Maximum length = 128
     */
    val classificationMarking : String?
        get() {
            val o = __offset(8)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val classificationMarkingAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(8, 1)
    fun classificationMarkingInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 8, 1)
    /**
     * RF Band name.
     * Example: /// Example: BAND_NAME
     * Constraints: Minimum length = 1, Maximum length = 128
     */
    val name : String?
        get() {
            val o = __offset(10)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val nameAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(10, 1)
    fun nameInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 10, 1)
    /**
     * Name of the band of this RF range (e.g. X,K,Ku,Ka,L,S,C,UHF,VHF,EHF,SHF,UNK,VLF,HF,E,Q,V,W). See RFBandType for more details and descriptions of each band name.
     * Example: /// Example: Ku
     * Constraints: Minimum length = 0, Maximum length = 5
     */
    val band : String?
        get() {
            val o = __offset(12)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val bandAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(12, 1)
    fun bandInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 12, 1)
    /**
     * RF Band mode (e.g. TX, RX).
     * Example: /// Example: TX
     * Constraints: Minimum length = 0, Maximum length = 4
     */
    val mode : Byte
        get() {
            val o = __offset(14)
            return if(o != 0) bb.get(o + bb_pos) else 0
        }
    /**
     * Purpose or use of the RF Band -- COMM = communications, TTC = Telemetry/Tracking/Control, OPS = Operations, OTHER = Other).
     * Example: /// Example: TTC
     * Constraints: Minimum length = 0, Maximum length = 16
     */
    val purpose : Byte
        get() {
            val o = __offset(16)
            return if(o != 0) bb.get(o + bb_pos) else 0
        }
    /**
     * Start/minimum of transmit RF frequency range, if applicable, in Mhz.
     * Example: /// Example: 50.23
     * Constraints: No constraints specified.
     */
    val freqMin : Double
        get() {
            val o = __offset(18)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * End/maximum of transmit RF frequency range, if applicable, in Mhz.
     * Example: /// Example: 2000.23
     * Constraints: No constraints specified.
     */
    val freqMax : Double
        get() {
            val o = __offset(20)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Center frequency of RF frequency range, if applicable, in Mhz.
     * Example: /// Example: 1000.23
     * Constraints: No constraints specified.
     */
    val centerFreq : Double
        get() {
            val o = __offset(22)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * RF Range maximum gain, in dBi.
     * Example: /// Example: 120.23
     * Constraints: No constraints specified.
     */
    val peakGain : Double
        get() {
            val o = __offset(24)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * RF Range edge gain, in dBi.
     * Example: /// Example: 100.23
     * Constraints: No constraints specified.
     */
    val edgeGain : Double
        get() {
            val o = __offset(26)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * RF Band frequency range bandwidth in Mhz.
     * Example: /// Example: 100.23
     * Constraints: No constraints specified.
     */
    val bandwidth : Double
        get() {
            val o = __offset(28)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Angle between the half-power (-3 dB) points of the main lobe of the antenna, in degrees.
     * Example: /// Example: 45.23
     * Constraints: No constraints specified.
     */
    val beamwidth : Double
        get() {
            val o = __offset(30)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Transponder polarization e.g. H - (Horizontally Polarized) Perpendicular to Earth's surface, V - (Vertically Polarized) Parallel to Earth's surface, L - (Left Hand Circularly Polarized) Rotating left relative to the Earth's surface, R - (Right Hand Circularly Polarized) Rotating right relative to the Earth's surface.
     * Example: /// Example: H
     * Constraints: Minimum length = 0, Maximum length = 4
     */
    val polarization : Byte
        get() {
            val o = __offset(32)
            return if(o != 0) bb.get(o + bb_pos) else 0
        }
    /**
     * Effective Radiated Power (ERP) is the total power in decibel watts radiated by an actual antenna relative to a half-wave dipole rather than a theoretical isotropic antenna. A half-wave dipole has a gain of 2.15 dB compared to an isotropic antenna.  EIRP(dB) = ERP (dB)+2.15 dB or EIRP (W) = 1.64*ERP(W). Effective radiated power and effective isotropic radiated power both measure the amount of power a radio transmitter and antenna (or other source of electromagnetic waves) radiates in a specific direction: in the direction of maximum signal strength (the "main lobe") of its radiation pattern.
     * Example: /// Example: 2.23
     * Constraints: No constraints specified.
     */
    val erp : Double
        get() {
            val o = __offset(34)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * EIRP is defined as the RMS power input in decibel watts required to a lossless half-wave dipole antenna to give the same maximum power density far from the antenna as the actual transmitter. It is equal to the power input to the transmitter's antenna multiplied by the antenna gain relative to a half-wave dipole. Effective radiated power and effective isotropic radiated power both measure the amount of power a radio transmitter and antenna (or other source of electromagnetic waves) radiates in a specific direction: in the direction of maximum signal strength (the "main lobe") of its radiation pattern.
     * Example: /// Example: 2.23
     * Constraints: No constraints specified.
     */
    val eirp : Double
        get() {
            val o = __offset(36)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Source of the data.
     * Example: /// Example: Bluestaq
     * Constraints: Minimum length = 1, Maximum length = 64
     */
    val source : String?
        get() {
            val o = __offset(38)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val sourceAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(38, 1)
    fun sourceInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 38, 1)
    /**
     * Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
     * Example: /// Example: THIRD_PARTY_DATASOURCE
     * Constraints: Minimum length = 0, Maximum length = 64
     */
    val origin : String?
        get() {
            val o = __offset(40)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val originAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(40, 1)
    fun originInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 40, 1)
    /**
     * Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
     * EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
     * REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
     * SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
     * TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
     * Example: /// Example: TEST
     * Constraints: Minimum length = 1, Maximum length = 32
     */
    val dataMode : Byte
        get() {
            val o = __offset(42)
            return if(o != 0) bb.get(o + bb_pos) else 0
        }
    /**
     * Time the row was created in the database, auto-populated by the system.
     * Example: /// Example: 2018-01-01T16:00:00.123Z
     * Constraints: No constraints specified.
     */
    val createdAt : String?
        get() {
            val o = __offset(44)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val createdAtAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(44, 1)
    fun createdAtInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 44, 1)
    /**
     * Application user who created the row in the database, auto-populated by the system.
     * Example: /// Example: some.user
     * Constraints: Minimum length = 1, Maximum length = 64
     */
    val createdBy : String?
        get() {
            val o = __offset(46)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val createdByAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(46, 1)
    fun createdByInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 46, 1)
    /**
     * Time the row was last updated in the database, auto-populated by the system.
     * Example: /// Example: 2018-01-01T16:00:00.123Z
     * Constraints: No constraints specified.
     */
    val updatedAt : String?
        get() {
            val o = __offset(48)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val updatedAtAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(48, 1)
    fun updatedAtInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 48, 1)
    /**
     * Application user who updated the row in the database, auto-populated by the system.
     * Example: /// Example: some.user
     * Constraints: Minimum length = 0, Maximum length = 64
     */
    val updatedBy : String?
        get() {
            val o = __offset(50)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val updatedByAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(50, 1)
    fun updatedByInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 50, 1)
    /**
     * The originating source network on which this record was created, auto-populated by the system.
     * Example: /// Example: OPS1
     * Constraints: Minimum length = 1, Maximum length = 32
     */
    val origNetwork : String?
        get() {
            val o = __offset(52)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val origNetworkAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(52, 1)
    fun origNetworkInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 52, 1)
    companion object {
        fun validateVersion() = Constants.FLATBUFFERS_24_3_25()
        fun getRootAsRFBand_Full(_bb: ByteBuffer): RFBand_Full = getRootAsRFBand_Full(_bb, RFBand_Full())
        fun getRootAsRFBand_Full(_bb: ByteBuffer, obj: RFBand_Full): RFBand_Full {
            _bb.order(ByteOrder.LITTLE_ENDIAN)
            return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb))
        }
        fun RFBand_FullBufferHasIdentifier(_bb: ByteBuffer) : Boolean = __has_identifier(_bb, "RFBA")
        fun createRFBand_Full(builder: FlatBufferBuilder, idOffset: Int, idEntityOffset: Int, classificationMarkingOffset: Int, nameOffset: Int, bandOffset: Int, mode: Byte, purpose: Byte, freqMin: Double, freqMax: Double, centerFreq: Double, peakGain: Double, edgeGain: Double, bandwidth: Double, beamwidth: Double, polarization: Byte, erp: Double, eirp: Double, sourceOffset: Int, originOffset: Int, dataMode: Byte, createdAtOffset: Int, createdByOffset: Int, updatedAtOffset: Int, updatedByOffset: Int, origNetworkOffset: Int) : Int {
            builder.startTable(25)
            addEirp(builder, eirp)
            addErp(builder, erp)
            addBeamwidth(builder, beamwidth)
            addBandwidth(builder, bandwidth)
            addEdgeGain(builder, edgeGain)
            addPeakGain(builder, peakGain)
            addCenterFreq(builder, centerFreq)
            addFreqMax(builder, freqMax)
            addFreqMin(builder, freqMin)
            addOrigNetwork(builder, origNetworkOffset)
            addUpdatedBy(builder, updatedByOffset)
            addUpdatedAt(builder, updatedAtOffset)
            addCreatedBy(builder, createdByOffset)
            addCreatedAt(builder, createdAtOffset)
            addOrigin(builder, originOffset)
            addSource(builder, sourceOffset)
            addBand(builder, bandOffset)
            addName(builder, nameOffset)
            addClassificationMarking(builder, classificationMarkingOffset)
            addIdEntity(builder, idEntityOffset)
            addId(builder, idOffset)
            addDataMode(builder, dataMode)
            addPolarization(builder, polarization)
            addPurpose(builder, purpose)
            addMode(builder, mode)
            return endRFBand_Full(builder)
        }
        fun startRFBand_Full(builder: FlatBufferBuilder) = builder.startTable(25)
        fun addId(builder: FlatBufferBuilder, id: Int) = builder.addOffset(0, id, 0)
        fun addIdEntity(builder: FlatBufferBuilder, idEntity: Int) = builder.addOffset(1, idEntity, 0)
        fun addClassificationMarking(builder: FlatBufferBuilder, classificationMarking: Int) = builder.addOffset(2, classificationMarking, 0)
        fun addName(builder: FlatBufferBuilder, name: Int) = builder.addOffset(3, name, 0)
        fun addBand(builder: FlatBufferBuilder, band: Int) = builder.addOffset(4, band, 0)
        fun addMode(builder: FlatBufferBuilder, mode: Byte) = builder.addByte(5, mode, 0)
        fun addPurpose(builder: FlatBufferBuilder, purpose: Byte) = builder.addByte(6, purpose, 0)
        fun addFreqMin(builder: FlatBufferBuilder, freqMin: Double) = builder.addDouble(7, freqMin, 0.0)
        fun addFreqMax(builder: FlatBufferBuilder, freqMax: Double) = builder.addDouble(8, freqMax, 0.0)
        fun addCenterFreq(builder: FlatBufferBuilder, centerFreq: Double) = builder.addDouble(9, centerFreq, 0.0)
        fun addPeakGain(builder: FlatBufferBuilder, peakGain: Double) = builder.addDouble(10, peakGain, 0.0)
        fun addEdgeGain(builder: FlatBufferBuilder, edgeGain: Double) = builder.addDouble(11, edgeGain, 0.0)
        fun addBandwidth(builder: FlatBufferBuilder, bandwidth: Double) = builder.addDouble(12, bandwidth, 0.0)
        fun addBeamwidth(builder: FlatBufferBuilder, beamwidth: Double) = builder.addDouble(13, beamwidth, 0.0)
        fun addPolarization(builder: FlatBufferBuilder, polarization: Byte) = builder.addByte(14, polarization, 0)
        fun addErp(builder: FlatBufferBuilder, erp: Double) = builder.addDouble(15, erp, 0.0)
        fun addEirp(builder: FlatBufferBuilder, eirp: Double) = builder.addDouble(16, eirp, 0.0)
        fun addSource(builder: FlatBufferBuilder, source: Int) = builder.addOffset(17, source, 0)
        fun addOrigin(builder: FlatBufferBuilder, origin: Int) = builder.addOffset(18, origin, 0)
        fun addDataMode(builder: FlatBufferBuilder, dataMode: Byte) = builder.addByte(19, dataMode, 0)
        fun addCreatedAt(builder: FlatBufferBuilder, createdAt: Int) = builder.addOffset(20, createdAt, 0)
        fun addCreatedBy(builder: FlatBufferBuilder, createdBy: Int) = builder.addOffset(21, createdBy, 0)
        fun addUpdatedAt(builder: FlatBufferBuilder, updatedAt: Int) = builder.addOffset(22, updatedAt, 0)
        fun addUpdatedBy(builder: FlatBufferBuilder, updatedBy: Int) = builder.addOffset(23, updatedBy, 0)
        fun addOrigNetwork(builder: FlatBufferBuilder, origNetwork: Int) = builder.addOffset(24, origNetwork, 0)
        fun endRFBand_Full(builder: FlatBufferBuilder) : Int {
            val o = builder.endTable()
            return o
        }
        fun finishRFBandFullBuffer(builder: FlatBufferBuilder, offset: Int) = builder.finish(offset, "RFBA")
        fun finishSizePrefixedRFBand_FullBuffer(builder: FlatBufferBuilder, offset: Int) = builder.finishSizePrefixed(offset, "RFBA")
    }
}
