// automatically generated by the FlatBuffers compiler, do not modify

import com.google.flatbuffers.BaseVector
import com.google.flatbuffers.BooleanVector
import com.google.flatbuffers.ByteVector
import com.google.flatbuffers.Constants
import com.google.flatbuffers.DoubleVector
import com.google.flatbuffers.FlatBufferBuilder
import com.google.flatbuffers.FloatVector
import com.google.flatbuffers.LongVector
import com.google.flatbuffers.StringVector
import com.google.flatbuffers.Struct
import com.google.flatbuffers.Table
import com.google.flatbuffers.UnionVector
import java.nio.ByteBuffer
import java.nio.ByteOrder
import kotlin.math.sign

/**
 * /// Surface information contains properties related to an airfield's runway, taxiway, and parking. The surface types and characteristics can dictate the airfield's capability of hosting a specific aircraft.
 */
@Suppress("unused")
class Surface_Abridged : Table() {

    fun __init(_i: Int, _bb: ByteBuffer)  {
        __reset(_i, _bb)
    }
    fun __assign(_i: Int, _bb: ByteBuffer) : Surface_Abridged {
        __init(_i, _bb)
        return this
    }
    /**
     * Unique identifier of the record, auto-generated by the system.
     * Example: /// Example: be831d39-1822-da9f-7ace-6cc5643397dc
     * Constraints: Minimum length = 1, Maximum length = 36
     */
    val id : String?
        get() {
            val o = __offset(4)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val idAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(4, 1)
    fun idInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 4, 1)
    /**
     * Classification marking of the data in IC/CAPCO Portion-marked format.
     * Example: /// Example: U
     * Constraints: Minimum length = 1, Maximum length = 128
     */
    val classificationMarking : String?
        get() {
            val o = __offset(6)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val classificationMarkingAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(6, 1)
    fun classificationMarkingInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 6, 1)
    /**
     * The surface name or identifier.
     * Example: /// Example: West lot
     * Constraints: Minimum length = 1, Maximum length = 64
     */
    val name : String?
        get() {
            val o = __offset(8)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val nameAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(8, 1)
    fun nameInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 8, 1)
    /**
     * The surface type of this record (e.g. RUNWAY, TAXIWAY, PARKING).
     * Example: /// Example: PARKING
     * Constraints: Minimum length = 1, Maximum length = 7
     */
    val type : String?
        get() {
            val o = __offset(10)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val typeAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(10, 1)
    fun typeInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 10, 1)
    /**
     * The ID of the site where this surface is located.
     * Example: /// Example: SITE-ID
     * Constraints: Minimum length = 0, Maximum length = 36
     */
    val idSite : String?
        get() {
            val o = __offset(12)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val idSiteAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(12, 1)
    fun idSiteInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 12, 1)
    /**
     * Alternate site identifier provided by the source.
     * Example: /// Example: ORIG-SITE-ID
     * Constraints: Minimum length = 0, Maximum length = 36
     */
    val altSiteId : String?
        get() {
            val o = __offset(14)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val altSiteIdAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(14, 1)
    fun altSiteIdInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 14, 1)
    /**
     * Flag indicating this is the primary runway.  Applicable for runway surface types only.
     * Example: /// Example: True
     * Constraints: No constraints specified.
     */
    val primary : Boolean
        get() {
            val o = __offset(16)
            return if(o != 0) 0.toByte() != bb.get(o + bb_pos) else false
        }
    /**
     * The length of the surface type, in feet.  Applicable for runway and parking surface types.
     * Example: /// Example: 1500
     * Constraints: No constraints specified.
     */
    val lengthFt : Int
        get() {
            val o = __offset(18)
            return if(o != 0) bb.getInt(o + bb_pos) else 0
        }
    /**
     * The landing distance available for the runway, in feet.  Applicable for runway surface types only.
     * Example: /// Example: 475
     * Constraints: No constraints specified.
     */
    val ldaFt : Int
        get() {
            val o = __offset(20)
            return if(o != 0) bb.getInt(o + bb_pos) else 0
        }
    /**
     * The width of the surface type, in feet.
     * Example: /// Example: 220
     * Constraints: No constraints specified.
     */
    val widthFt : Int
        get() {
            val o = __offset(22)
            return if(o != 0) bb.getInt(o + bb_pos) else 0
        }
    /**
     * The length of the surface type, in meters.  Applicable for runway and parking surface types.
     * Example: /// Example: 457
     * Constraints: No constraints specified.
     */
    val lengthM : Int
        get() {
            val o = __offset(24)
            return if(o != 0) bb.getInt(o + bb_pos) else 0
        }
    /**
     * The landing distance available for the runway, in meters.  Applicable for runway surface types only.
     * Example: /// Example: 145
     * Constraints: No constraints specified.
     */
    val ldaM : Int
        get() {
            val o = __offset(26)
            return if(o != 0) bb.getInt(o + bb_pos) else 0
        }
    /**
     * The width of the surface type, in meters.
     * Example: /// Example: 67
     * Constraints: No constraints specified.
     */
    val widthM : Int
        get() {
            val o = __offset(28)
            return if(o != 0) bb.getInt(o + bb_pos) else 0
        }
    /**
     * The surface material (e.g. Asphalt, Concrete, Dirt).
     * Example: /// Example: Concrete
     * Constraints: Minimum length = 0, Maximum length = 16
     */
    val material : String?
        get() {
            val o = __offset(30)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val materialAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(30, 1)
    fun materialInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 30, 1)
    /**
     * The surface condition (e.g. GOOD, FAIR, POOR, SERIOUS, FAILED, CLOSED, UNKNOWN).
     * Example: /// Example: GOOD
     * Constraints: Minimum length = 0, Maximum length = 16
     */
    val condition : String?
        get() {
            val o = __offset(32)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val conditionAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(32, 1)
    fun conditionInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 32, 1)
    /**
     * Raw weight bearing capacity value or pavement strength.
     * Example: /// Example: LCN 42
     * Constraints: Minimum length = 0, Maximum length = 16
     */
    val rawWbc : String?
        get() {
            val o = __offset(34)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val rawWbcAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(34, 1)
    fun rawWbcInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 34, 1)
    /**
     * Pavement classification number (PCN) and tire pressure code.
     * Example: /// Example: 73RBWT
     * Constraints: Minimum length = 0, Maximum length = 16
     */
    val pcn : String?
        get() {
            val o = __offset(36)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val pcnAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(36, 1)
    fun pcnInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 36, 1)
    /**
     * Load classification number or pavement rating which ranks aircraft on a scale of 1 to 120.
     * Example: /// Example: 50
     * Constraints: No constraints specified.
     */
    val lcn : Int
        get() {
            val o = __offset(38)
            return if(o != 0) bb.getInt(o + bb_pos) else 0
        }
    /**
     * The max weight allowable on this surface type for an S-type (single) landing gear configuration, in kilopounds (kip). Note: The corresponding equivalent field is not converted by the UDL and may or may not be supplied by the provider. The provider/consumer is responsible for all unit conversions.
     * Example: /// Example: 143
     * Constraints: No constraints specified.
     */
    val sWtKip : Int
        get() {
            val o = __offset(40)
            return if(o != 0) bb.getInt(o + bb_pos) else 0
        }
    /**
     * The max weight allowable on this surface type for a T-type (twin (dual)) landing gear configuration, in kilopounds (kip).Note: The corresponding equivalent field is not converted by the UDL and may or may not be supplied by the provider. The provider/consumer is responsible for all unit conversions.
     * Example: /// Example: 188
     * Constraints: No constraints specified.
     */
    val tWtKip : Int
        get() {
            val o = __offset(42)
            return if(o != 0) bb.getInt(o + bb_pos) else 0
        }
    /**
     * The max weight allowable on this surface type for an ST-type (single tandem) landing gear configuration, in kilopounds (kip).Note: The corresponding equivalent field is not converted by the UDL and may or may not be supplied by the provider. The provider/consumer is responsible for all unit conversions.
     * Example: /// Example: 195
     * Constraints: No constraints specified.
     */
    val stWtKip : Int
        get() {
            val o = __offset(44)
            return if(o != 0) bb.getInt(o + bb_pos) else 0
        }
    /**
     * The max weight allowable on this surface type for a GDSS TT-type (twin tandem) landing gear configuration, in kilopounds (kip).Note: The corresponding equivalent field is not converted by the UDL and may or may not be supplied by the provider. The provider/consumer is responsible for all unit conversions.
     * Example: /// Example: 414
     * Constraints: No constraints specified.
     */
    val ttWtKip : Int
        get() {
            val o = __offset(46)
            return if(o != 0) bb.getInt(o + bb_pos) else 0
        }
    /**
     * The max weight allowable on this surface type for an FAA 2D-type (twin tandem) landing gear configuration, in kilopounds (kip).Note: The corresponding equivalent field is not converted by the UDL and may or may not be supplied by the provider. The provider/consumer is responsible for all unit conversions.
     * Example: /// Example: 416
     * Constraints: No constraints specified.
     */
    val ddWtKip : Int
        get() {
            val o = __offset(48)
            return if(o != 0) bb.getInt(o + bb_pos) else 0
        }
    /**
     * The max weight allowable on this surface type for an SBTT-type (single belly twin tandem) landing gear configuration, in kilopounds (kip).Note: The corresponding equivalent field is not converted by the UDL and may or may not be supplied by the provider. The provider/consumer is responsible for all unit conversions.
     * Example: /// Example: 603
     * Constraints: No constraints specified.
     */
    val sbttWtKip : Int
        get() {
            val o = __offset(50)
            return if(o != 0) bb.getInt(o + bb_pos) else 0
        }
    /**
     * The max weight allowable on this surface type for a TDT-type (twin delta tandem) landing gear configuration, in kilopounds (kip).Note: The corresponding equivalent field is not converted by the UDL and may or may not be supplied by the provider. The provider/consumer is responsible for all unit conversions.
     * Example: /// Example: 870
     * Constraints: No constraints specified.
     */
    val tdtWtkip : Int
        get() {
            val o = __offset(52)
            return if(o != 0) bb.getInt(o + bb_pos) else 0
        }
    /**
     * The max weight allowable on this surface type for a TRT-type (triple tandem) landing gear configuration, in kilopounds (kip).Note: The corresponding equivalent field is not converted by the UDL and may or may not be supplied by the provider. The provider/consumer is responsible for all unit conversions.
     * Example: /// Example: 622
     * Constraints: No constraints specified.
     */
    val trtWtKip : Int
        get() {
            val o = __offset(54)
            return if(o != 0) bb.getInt(o + bb_pos) else 0
        }
    /**
     * The max weight allowable on this surface type for a DDT-type (double dual tandem) landing gear configuration, in kilopounds (kip).Note: The corresponding equivalent field is not converted by the UDL and may or may not be supplied by the provider. The provider/consumer is responsible for all unit conversions.
     * Example: /// Example: 833
     * Constraints: No constraints specified.
     */
    val ddtWtKip : Int
        get() {
            val o = __offset(56)
            return if(o != 0) bb.getInt(o + bb_pos) else 0
        }
    /**
     * The max weight allowable on this surface type for an S-type (single) landing gear configuration, in kilonewtons (kN).Note: The corresponding equivalent field is not converted by the UDL and may or may not be supplied by the provider. The provider/consumer is responsible for all unit conversions.
     * Example: /// Example: 636
     * Constraints: No constraints specified.
     */
    val sWtKn : Int
        get() {
            val o = __offset(58)
            return if(o != 0) bb.getInt(o + bb_pos) else 0
        }
    /**
     * The max weight allowable on this surface type for a T-type (twin (dual)) landing gear configuration, in kilonewtons (kN).Note: The corresponding equivalent field is not converted by the UDL and may or may not be supplied by the provider. The provider/consumer is responsible for all unit conversions.
     * Example: /// Example: 836
     * Constraints: No constraints specified.
     */
    val tWtKn : Int
        get() {
            val o = __offset(60)
            return if(o != 0) bb.getInt(o + bb_pos) else 0
        }
    /**
     * The max weight allowable on this surface type for an ST-type (single tandem) landing gear configuration, in kilonewtons (kN).Note: The corresponding equivalent field is not converted by the UDL and may or may not be supplied by the provider. The provider/consumer is responsible for all unit conversions.
     * Example: /// Example: 867
     * Constraints: No constraints specified.
     */
    val stWtKn : Int
        get() {
            val o = __offset(62)
            return if(o != 0) bb.getInt(o + bb_pos) else 0
        }
    /**
     * The max weight allowable on this surface type for a GDSS TT-type (twin tandem) landing gear configuration, in kilonewtons (kN).Note: The corresponding equivalent field is not converted by the UDL and may or may not be supplied by the provider. The provider/consumer is responsible for all unit conversions.
     * Example: /// Example: 1842
     * Constraints: No constraints specified.
     */
    val ttWtKn : Int
        get() {
            val o = __offset(64)
            return if(o != 0) bb.getInt(o + bb_pos) else 0
        }
    /**
     * The max weight allowable on this surface type for an FAA 2D-type (twin tandem) landing gear configuration, in kilonewtons (kN).Note: The corresponding equivalent field is not converted by the UDL and may or may not be supplied by the provider. The provider/consumer is responsible for all unit conversions.
     * Example: /// Example: 1850
     * Constraints: No constraints specified.
     */
    val ddWtKn : Int
        get() {
            val o = __offset(66)
            return if(o != 0) bb.getInt(o + bb_pos) else 0
        }
    /**
     * The max weight allowable on this surface type for an SBTT-type (single belly twin tandem) landing gear configuration, in kilonewtons (kN).Note: The corresponding equivalent field is not converted by the UDL and may or may not be supplied by the provider. The provider/consumer is responsible for all unit conversions.
     * Example: /// Example: 2682
     * Constraints: No constraints specified.
     */
    val sbttWtKn : Int
        get() {
            val o = __offset(68)
            return if(o != 0) bb.getInt(o + bb_pos) else 0
        }
    /**
     * The max weight allowable on this surface type for a TDT-type (twin delta tandem) landing gear configuration, in kilonewtons (kN).Note: The corresponding equivalent field is not converted by the UDL and may or may not be supplied by the provider. The provider/consumer is responsible for all unit conversions.
     * Example: /// Example: 3870
     * Constraints: No constraints specified.
     */
    val tdtWtKn : Int
        get() {
            val o = __offset(70)
            return if(o != 0) bb.getInt(o + bb_pos) else 0
        }
    /**
     * The max weight allowable on this surface type for a TRT-type (triple tandem) landing gear configuration, in kilonewtons (kN).Note: The corresponding equivalent field is not converted by the UDL and may or may not be supplied by the provider. The provider/consumer is responsible for all unit conversions.
     * Example: /// Example: 2767
     * Constraints: No constraints specified.
     */
    val trtWtKn : Int
        get() {
            val o = __offset(72)
            return if(o != 0) bb.getInt(o + bb_pos) else 0
        }
    /**
     * The max weight allowable on this surface type for a DDT-type (double dual tandem) landing gear configuration, in kilonewtons (kN).Note: The corresponding equivalent field is not converted by the UDL and may or may not be supplied by the provider. The provider/consumer is responsible for all unit conversions.
     * Example: /// Example: 3705
     * Constraints: No constraints specified.
     */
    val ddtWtKn : Int
        get() {
            val o = __offset(74)
            return if(o != 0) bb.getInt(o + bb_pos) else 0
        }
    /**
     * Flag indicating the surface has lighting.
     * Example: /// Example: True
     * Constraints: No constraints specified.
     */
    val lighting : Boolean
        get() {
            val o = __offset(76)
            return if(o != 0) 0.toByte() != bb.get(o + bb_pos) else false
        }
    /**
     * Flag indicating the runway lighting is unknown. Applicable for runway surface types only.
     * Example: /// Example: False
     * Constraints: No constraints specified.
     */
    val lightsUnkn : Boolean
        get() {
            val o = __offset(78)
            return if(o != 0) 0.toByte() != bb.get(o + bb_pos) else false
        }
    /**
     * Flag indicating the runway has approach lights. Applicable for runway surface types only.
     * Example: /// Example: True
     * Constraints: No constraints specified.
     */
    val lightsAprch : Boolean
        get() {
            val o = __offset(80)
            return if(o != 0) 0.toByte() != bb.get(o + bb_pos) else false
        }
    /**
     * Flag indicating the runway has Visual Approach Slope Indicator (VASI) lights. Applicable for runway surface types only.
     * Example: /// Example: True
     * Constraints: No constraints specified.
     */
    val lightsVasi : Boolean
        get() {
            val o = __offset(82)
            return if(o != 0) 0.toByte() != bb.get(o + bb_pos) else false
        }
    /**
     * Flag indicating the runway has Precision Approach Path Indicator (PAPI) lights. Applicable for runway surface types only.
     * Example: /// Example: True
     * Constraints: No constraints specified.
     */
    val lightsPapi : Boolean
        get() {
            val o = __offset(84)
            return if(o != 0) 0.toByte() != bb.get(o + bb_pos) else false
        }
    /**
     * Flag indicating the runway has Optical Landing System (OLS) lights. Applicable for runway surface types only.
     * Example: /// Example: True
     * Constraints: No constraints specified.
     */
    val lightsOls : Boolean
        get() {
            val o = __offset(86)
            return if(o != 0) 0.toByte() != bb.get(o + bb_pos) else false
        }
    /**
     * Flag indicating the runway has Runway End Identifier Lights (REIL). Applicable for runway surface types only.
     * Example: /// Example: True
     * Constraints: No constraints specified.
     */
    val lightsReil : Boolean
        get() {
            val o = __offset(88)
            return if(o != 0) 0.toByte() != bb.get(o + bb_pos) else false
        }
    /**
     * Flag indicating the runway has Touchdown Zone lights. Applicable for runway surface types only.
     * Example: /// Example: True
     * Constraints: No constraints specified.
     */
    val lightsTdzl : Boolean
        get() {
            val o = __offset(90)
            return if(o != 0) 0.toByte() != bb.get(o + bb_pos) else false
        }
    /**
     * Flag indicating the runway has centerline lights. Applicable for runway surface types only.
     * Example: /// Example: True
     * Constraints: No constraints specified.
     */
    val lightsCl : Boolean
        get() {
            val o = __offset(92)
            return if(o != 0) 0.toByte() != bb.get(o + bb_pos) else false
        }
    /**
     * Flag indicating the surface type has an obstacle. Applicable for taxiway and parking surface types.
     * Example: /// Example: True
     * Constraints: No constraints specified.
     */
    val obstacle : Boolean
        get() {
            val o = __offset(94)
            return if(o != 0) 0.toByte() != bb.get(o + bb_pos) else false
        }
    /**
     * Time the row was created in the database, auto-populated by the system.
     * Example: /// Example: 2022-01-01T16:00:00.123Z
     * Constraints: No constraints specified.
     */
    val createdAt : String?
        get() {
            val o = __offset(96)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val createdAtAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(96, 1)
    fun createdAtInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 96, 1)
    /**
     * Application user who created the row in the database, auto-populated by the system.
     * Example: /// Example: some.user
     * Constraints: Minimum length = 1, Maximum length = 64
     */
    val createdBy : String?
        get() {
            val o = __offset(98)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val createdByAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(98, 1)
    fun createdByInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 98, 1)
    /**
     * Source of the data.
     * Example: /// Example: Bluestaq
     * Constraints: Minimum length = 1, Maximum length = 64
     */
    val source : String?
        get() {
            val o = __offset(100)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val sourceAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(100, 1)
    fun sourceInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 100, 1)
    /**
     * Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
     * Example: /// Example: THIRD_PARTY_DATASOURCE
     * Constraints: Minimum length = 0, Maximum length = 64
     */
    val origin : String?
        get() {
            val o = __offset(102)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val originAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(102, 1)
    fun originInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 102, 1)
    /**
     * The originating source network on which this record was created, auto-populated by the system.
     * Example: /// Example: OPS1
     * Constraints: Minimum length = 1, Maximum length = 32
     */
    val origNetwork : String?
        get() {
            val o = __offset(104)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val origNetworkAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(104, 1)
    fun origNetworkInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 104, 1)
    /**
     * Indicator of whether the data is REAL, TEST, SIMULATED, or EXERCISE data.
     * Example: /// Example: TEST
     * Constraints: Minimum length = 1, Maximum length = 32
     */
    val dataMode : Byte
        get() {
            val o = __offset(106)
            return if(o != 0) bb.get(o + bb_pos) else 0
        }
    companion object {
        fun validateVersion() = Constants.FLATBUFFERS_24_3_25()
        fun getRootAsSurface_Abridged(_bb: ByteBuffer): Surface_Abridged = getRootAsSurface_Abridged(_bb, Surface_Abridged())
        fun getRootAsSurface_Abridged(_bb: ByteBuffer, obj: Surface_Abridged): Surface_Abridged {
            _bb.order(ByteOrder.LITTLE_ENDIAN)
            return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb))
        }
        fun Surface_AbridgedBufferHasIdentifier(_bb: ByteBuffer) : Boolean = __has_identifier(_bb, "SURF")
        fun createSurface_Abridged(builder: FlatBufferBuilder, idOffset: Int, classificationMarkingOffset: Int, nameOffset: Int, typeOffset: Int, idSiteOffset: Int, altSiteIdOffset: Int, primary: Boolean, lengthFt: Int, ldaFt: Int, widthFt: Int, lengthM: Int, ldaM: Int, widthM: Int, materialOffset: Int, conditionOffset: Int, rawWbcOffset: Int, pcnOffset: Int, lcn: Int, sWtKip: Int, tWtKip: Int, stWtKip: Int, ttWtKip: Int, ddWtKip: Int, sbttWtKip: Int, tdtWtkip: Int, trtWtKip: Int, ddtWtKip: Int, sWtKn: Int, tWtKn: Int, stWtKn: Int, ttWtKn: Int, ddWtKn: Int, sbttWtKn: Int, tdtWtKn: Int, trtWtKn: Int, ddtWtKn: Int, lighting: Boolean, lightsUnkn: Boolean, lightsAprch: Boolean, lightsVasi: Boolean, lightsPapi: Boolean, lightsOls: Boolean, lightsReil: Boolean, lightsTdzl: Boolean, lightsCl: Boolean, obstacle: Boolean, createdAtOffset: Int, createdByOffset: Int, sourceOffset: Int, originOffset: Int, origNetworkOffset: Int, dataMode: Byte) : Int {
            builder.startTable(52)
            addOrigNetwork(builder, origNetworkOffset)
            addOrigin(builder, originOffset)
            addSource(builder, sourceOffset)
            addCreatedBy(builder, createdByOffset)
            addCreatedAt(builder, createdAtOffset)
            addDdtWtKN(builder, ddtWtKn)
            addTrtWtKN(builder, trtWtKn)
            addTdtWtKN(builder, tdtWtKn)
            addSbttWtKN(builder, sbttWtKn)
            addDdWtKN(builder, ddWtKn)
            addTtWtKN(builder, ttWtKn)
            addStWtKN(builder, stWtKn)
            addTWtKN(builder, tWtKn)
            addSWtKN(builder, sWtKn)
            addDdtWtKip(builder, ddtWtKip)
            addTrtWtKip(builder, trtWtKip)
            addTdtWtkip(builder, tdtWtkip)
            addSbttWtKip(builder, sbttWtKip)
            addDdWtKip(builder, ddWtKip)
            addTtWtKip(builder, ttWtKip)
            addStWtKip(builder, stWtKip)
            addTWtKip(builder, tWtKip)
            addSWtKip(builder, sWtKip)
            addLcn(builder, lcn)
            addPcn(builder, pcnOffset)
            addRawWBC(builder, rawWbcOffset)
            addCondition(builder, conditionOffset)
            addMaterial(builder, materialOffset)
            addWidthM(builder, widthM)
            addLdaM(builder, ldaM)
            addLengthM(builder, lengthM)
            addWidthFt(builder, widthFt)
            addLdaFt(builder, ldaFt)
            addLengthFt(builder, lengthFt)
            addAltSiteId(builder, altSiteIdOffset)
            addIdSite(builder, idSiteOffset)
            addType(builder, typeOffset)
            addName(builder, nameOffset)
            addClassificationMarking(builder, classificationMarkingOffset)
            addId(builder, idOffset)
            addDataMode(builder, dataMode)
            addObstacle(builder, obstacle)
            addLightsCL(builder, lightsCl)
            addLightsTDZL(builder, lightsTdzl)
            addLightsREIL(builder, lightsReil)
            addLightsOLS(builder, lightsOls)
            addLightsPAPI(builder, lightsPapi)
            addLightsVASI(builder, lightsVasi)
            addLightsAPRCH(builder, lightsAprch)
            addLightsUNKN(builder, lightsUnkn)
            addLighting(builder, lighting)
            addPrimary(builder, primary)
            return endSurface_Abridged(builder)
        }
        fun startSurface_Abridged(builder: FlatBufferBuilder) = builder.startTable(52)
        fun addId(builder: FlatBufferBuilder, id: Int) = builder.addOffset(0, id, 0)
        fun addClassificationMarking(builder: FlatBufferBuilder, classificationMarking: Int) = builder.addOffset(1, classificationMarking, 0)
        fun addName(builder: FlatBufferBuilder, name: Int) = builder.addOffset(2, name, 0)
        fun addType(builder: FlatBufferBuilder, type: Int) = builder.addOffset(3, type, 0)
        fun addIdSite(builder: FlatBufferBuilder, idSite: Int) = builder.addOffset(4, idSite, 0)
        fun addAltSiteId(builder: FlatBufferBuilder, altSiteId: Int) = builder.addOffset(5, altSiteId, 0)
        fun addPrimary(builder: FlatBufferBuilder, primary: Boolean) = builder.addBoolean(6, primary, false)
        fun addLengthFt(builder: FlatBufferBuilder, lengthFt: Int) = builder.addInt(7, lengthFt, 0)
        fun addLdaFt(builder: FlatBufferBuilder, ldaFt: Int) = builder.addInt(8, ldaFt, 0)
        fun addWidthFt(builder: FlatBufferBuilder, widthFt: Int) = builder.addInt(9, widthFt, 0)
        fun addLengthM(builder: FlatBufferBuilder, lengthM: Int) = builder.addInt(10, lengthM, 0)
        fun addLdaM(builder: FlatBufferBuilder, ldaM: Int) = builder.addInt(11, ldaM, 0)
        fun addWidthM(builder: FlatBufferBuilder, widthM: Int) = builder.addInt(12, widthM, 0)
        fun addMaterial(builder: FlatBufferBuilder, material: Int) = builder.addOffset(13, material, 0)
        fun addCondition(builder: FlatBufferBuilder, condition: Int) = builder.addOffset(14, condition, 0)
        fun addRawWBC(builder: FlatBufferBuilder, rawWbc: Int) = builder.addOffset(15, rawWbc, 0)
        fun addPcn(builder: FlatBufferBuilder, pcn: Int) = builder.addOffset(16, pcn, 0)
        fun addLcn(builder: FlatBufferBuilder, lcn: Int) = builder.addInt(17, lcn, 0)
        fun addSWtKip(builder: FlatBufferBuilder, sWtKip: Int) = builder.addInt(18, sWtKip, 0)
        fun addTWtKip(builder: FlatBufferBuilder, tWtKip: Int) = builder.addInt(19, tWtKip, 0)
        fun addStWtKip(builder: FlatBufferBuilder, stWtKip: Int) = builder.addInt(20, stWtKip, 0)
        fun addTtWtKip(builder: FlatBufferBuilder, ttWtKip: Int) = builder.addInt(21, ttWtKip, 0)
        fun addDdWtKip(builder: FlatBufferBuilder, ddWtKip: Int) = builder.addInt(22, ddWtKip, 0)
        fun addSbttWtKip(builder: FlatBufferBuilder, sbttWtKip: Int) = builder.addInt(23, sbttWtKip, 0)
        fun addTdtWtkip(builder: FlatBufferBuilder, tdtWtkip: Int) = builder.addInt(24, tdtWtkip, 0)
        fun addTrtWtKip(builder: FlatBufferBuilder, trtWtKip: Int) = builder.addInt(25, trtWtKip, 0)
        fun addDdtWtKip(builder: FlatBufferBuilder, ddtWtKip: Int) = builder.addInt(26, ddtWtKip, 0)
        fun addSWtKN(builder: FlatBufferBuilder, sWtKn: Int) = builder.addInt(27, sWtKn, 0)
        fun addTWtKN(builder: FlatBufferBuilder, tWtKn: Int) = builder.addInt(28, tWtKn, 0)
        fun addStWtKN(builder: FlatBufferBuilder, stWtKn: Int) = builder.addInt(29, stWtKn, 0)
        fun addTtWtKN(builder: FlatBufferBuilder, ttWtKn: Int) = builder.addInt(30, ttWtKn, 0)
        fun addDdWtKN(builder: FlatBufferBuilder, ddWtKn: Int) = builder.addInt(31, ddWtKn, 0)
        fun addSbttWtKN(builder: FlatBufferBuilder, sbttWtKn: Int) = builder.addInt(32, sbttWtKn, 0)
        fun addTdtWtKN(builder: FlatBufferBuilder, tdtWtKn: Int) = builder.addInt(33, tdtWtKn, 0)
        fun addTrtWtKN(builder: FlatBufferBuilder, trtWtKn: Int) = builder.addInt(34, trtWtKn, 0)
        fun addDdtWtKN(builder: FlatBufferBuilder, ddtWtKn: Int) = builder.addInt(35, ddtWtKn, 0)
        fun addLighting(builder: FlatBufferBuilder, lighting: Boolean) = builder.addBoolean(36, lighting, false)
        fun addLightsUNKN(builder: FlatBufferBuilder, lightsUnkn: Boolean) = builder.addBoolean(37, lightsUnkn, false)
        fun addLightsAPRCH(builder: FlatBufferBuilder, lightsAprch: Boolean) = builder.addBoolean(38, lightsAprch, false)
        fun addLightsVASI(builder: FlatBufferBuilder, lightsVasi: Boolean) = builder.addBoolean(39, lightsVasi, false)
        fun addLightsPAPI(builder: FlatBufferBuilder, lightsPapi: Boolean) = builder.addBoolean(40, lightsPapi, false)
        fun addLightsOLS(builder: FlatBufferBuilder, lightsOls: Boolean) = builder.addBoolean(41, lightsOls, false)
        fun addLightsREIL(builder: FlatBufferBuilder, lightsReil: Boolean) = builder.addBoolean(42, lightsReil, false)
        fun addLightsTDZL(builder: FlatBufferBuilder, lightsTdzl: Boolean) = builder.addBoolean(43, lightsTdzl, false)
        fun addLightsCL(builder: FlatBufferBuilder, lightsCl: Boolean) = builder.addBoolean(44, lightsCl, false)
        fun addObstacle(builder: FlatBufferBuilder, obstacle: Boolean) = builder.addBoolean(45, obstacle, false)
        fun addCreatedAt(builder: FlatBufferBuilder, createdAt: Int) = builder.addOffset(46, createdAt, 0)
        fun addCreatedBy(builder: FlatBufferBuilder, createdBy: Int) = builder.addOffset(47, createdBy, 0)
        fun addSource(builder: FlatBufferBuilder, source: Int) = builder.addOffset(48, source, 0)
        fun addOrigin(builder: FlatBufferBuilder, origin: Int) = builder.addOffset(49, origin, 0)
        fun addOrigNetwork(builder: FlatBufferBuilder, origNetwork: Int) = builder.addOffset(50, origNetwork, 0)
        fun addDataMode(builder: FlatBufferBuilder, dataMode: Byte) = builder.addByte(51, dataMode, 0)
        fun endSurface_Abridged(builder: FlatBufferBuilder) : Int {
            val o = builder.endTable()
            return o
        }
        fun finishSurfaceAbridgedBuffer(builder: FlatBufferBuilder, offset: Int) = builder.finish(offset, "SURF")
        fun finishSizePrefixedSurface_AbridgedBuffer(builder: FlatBufferBuilder, offset: Int) = builder.finishSizePrefixed(offset, "SURF")
    }
}
