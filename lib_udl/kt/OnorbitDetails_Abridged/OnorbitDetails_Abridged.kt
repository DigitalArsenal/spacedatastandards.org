// automatically generated by the FlatBuffers compiler, do not modify

import com.google.flatbuffers.BaseVector
import com.google.flatbuffers.BooleanVector
import com.google.flatbuffers.ByteVector
import com.google.flatbuffers.Constants
import com.google.flatbuffers.DoubleVector
import com.google.flatbuffers.FlatBufferBuilder
import com.google.flatbuffers.FloatVector
import com.google.flatbuffers.LongVector
import com.google.flatbuffers.StringVector
import com.google.flatbuffers.Struct
import com.google.flatbuffers.Table
import com.google.flatbuffers.UnionVector
import java.nio.ByteBuffer
import java.nio.ByteOrder
import kotlin.math.sign

/**
 * /// Contains details of the OnOrbit object.
 */
@Suppress("unused")
class OnorbitDetails_Abridged : Table() {

    fun __init(_i: Int, _bb: ByteBuffer)  {
        __reset(_i, _bb)
    }
    fun __assign(_i: Int, _bb: ByteBuffer) : OnorbitDetails_Abridged {
        __init(_i, _bb)
        return this
    }
    /**
     * Unique identifier of the record, auto-generated by the system.
     * Example: /// Example: ONORBITDETAILS-ID
     * Constraints: Minimum length = 1, Maximum length = 36
     */
    val id : String?
        get() {
            val o = __offset(4)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val idAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(4, 1)
    fun idInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 4, 1)
    /**
     * UUID of the parent Onorbit record.
     * Example: /// Example: REF-ONORBIT-ID
     * Constraints: Minimum length = 1, Maximum length = 36
     */
    val idOnOrbit : String?
        get() {
            val o = __offset(6)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val idOnOrbitAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(6, 1)
    fun idOnOrbitInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 6, 1)
    /**
     * Classification marking of the data in IC/CAPCO Portion-marked format.
     * Example: /// Example: U
     * Constraints: Minimum length = 1, Maximum length = 128
     */
    val classificationMarking : String?
        get() {
            val o = __offset(8)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val classificationMarkingAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(8, 1)
    fun classificationMarkingInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 8, 1)
    /**
     * Time of last reported observation for this object in ISO 8601 UTC with microsecond precision.
     * Example: /// Example: 2021-01-01T01:01:01.123456Z
     * Constraints: No constraints specified.
     */
    val lastObTime : String?
        get() {
            val o = __offset(10)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val lastObTimeAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(10, 1)
    fun lastObTimeInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 10, 1)
    /**
     * Current/latest visual magnitude in M.
     * Example: /// Example: 10.23
     * Constraints: No constraints specified.
     */
    val vismag : Double
        get() {
            val o = __offset(12)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Minimum visual magnitude in M.
     * Example: /// Example: 5.23
     * Constraints: No constraints specified.
     */
    val vismagMin : Double
        get() {
            val o = __offset(14)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Maximum visual magnitude in M.
     * Example: /// Example: 15.23
     * Constraints: No constraints specified.
     */
    val vismagMax : Double
        get() {
            val o = __offset(16)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Mean visual magnitude in M.
     * Example: /// Example: 10.23
     * Constraints: No constraints specified.
     */
    val vismagMean : Double
        get() {
            val o = __offset(18)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Current/latest radar cross section in meters squared.
     * Example: /// Example: 10.23
     * Constraints: No constraints specified.
     */
    val rcs : Double
        get() {
            val o = __offset(20)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Minimum radar cross section in meters squared.
     * Example: /// Example: 5.23
     * Constraints: No constraints specified.
     */
    val rcsMin : Double
        get() {
            val o = __offset(22)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Maximum radar cross section in meters squared.
     * Example: /// Example: 15.23
     * Constraints: No constraints specified.
     */
    val rcsMax : Double
        get() {
            val o = __offset(24)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Mean radar cross section in meters squared.
     * Example: /// Example: 10.23
     * Constraints: No constraints specified.
     */
    val rcsMean : Double
        get() {
            val o = __offset(26)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * The total beginning of life delta V of the spacecraft, in meters per second.
     * Example: /// Example: 1000.1
     * Constraints: No constraints specified.
     */
    val bolDeltaV : Double
        get() {
            val o = __offset(28)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Maximum delta V available for this on-orbit spacecraft, in meters per second.
     * Example: /// Example: 10.23
     * Constraints: No constraints specified.
     */
    val maxDeltaV : Double
        get() {
            val o = __offset(30)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * The 1-sigma uncertainty of the total spacecraft delta V, in meters per second.
     * Example: /// Example: 50.1
     * Constraints: No constraints specified.
     */
    val deltaVunc : Double
        get() {
            val o = __offset(32)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Estimated maximum burn duration for the object, in seconds.
     * Example: /// Example: 10.23
     * Constraints: No constraints specified.
     */
    val estDeltaVduration : Double
        get() {
            val o = __offset(34)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * The number of distinct missions the spacecraft performs.
     * Example: /// Example: 2
     * Constraints: No constraints specified.
     */
    val numMission : Int
        get() {
            val o = __offset(36)
            return if(o != 0) bb.getInt(o + bb_pos) else 0
        }
    /**
     * Array of the type of missions the spacecraft performs. Must contain the same number of elements as the value of numMission.
     * Example: /// Example: ['Weather', 'Space Weather']
     * Constraints: No constraints specified.
     */
    fun missionTypes(j: Int) : String? {
        val o = __offset(38)
        return if (o != 0) {
            __string(__vector(o) + j * 4)
        } else {
            null
        }
    }
    val missionTypesLength : Int
        get() {
            val o = __offset(38); return if (o != 0) __vector_len(o) else 0
        }
    /**
     * Type of the bus on the spacecraft.
     * Example: /// Example: A2100
     * Constraints: Minimum length = 0, Maximum length = 32
     */
    val busType : String?
        get() {
            val o = __offset(40)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val busTypeAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(40, 1)
    fun busTypeInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 40, 1)
    /**
     * GEO slot if applicable, in degrees. -180 (West of Prime Meridian) to 180 degrees (East of Prime Meridian). Prime Meridian is 0.
     * Example: /// Example: 90.23
     * Constraints: No constraints specified.
     */
    val geoSlot : Double
        get() {
            val o = __offset(42)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * GEO drift rate, if applicable in degrees per day.
     * Example: /// Example: 1.23
     * Constraints: No constraints specified.
     */
    val driftRate : Double
        get() {
            val o = __offset(44)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Spacecraft dry mass (without fuel or disposables) in kilograms.
     * Example: /// Example: 10.23
     * Constraints: No constraints specified.
     */
    val dryMass : Double
        get() {
            val o = __offset(46)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Mass of fuel and disposables at launch time in kilograms.
     * Example: /// Example: 10.23
     * Constraints: No constraints specified.
     */
    val additionalMass : Double
        get() {
            val o = __offset(48)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Minimum (estimated) mass of spacecraft and fuel at launch time, in kilograms.
     * Example: /// Example: 5.23
     * Constraints: No constraints specified.
     */
    val launchMassMin : Double
        get() {
            val o = __offset(50)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Nominal mass of spacecraft and fuel at launch time, in kilograms.
     * Example: /// Example: 10.23
     * Constraints: No constraints specified.
     */
    val launchMass : Double
        get() {
            val o = __offset(52)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Maximum (estimated) mass of spacecraft and fuel at launch time, in kilograms.
     * Example: /// Example: 15.23
     * Constraints: No constraints specified.
     */
    val launchMassMax : Double
        get() {
            val o = __offset(54)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Spacecraft beginning of life fuel mass, in orbit, in kilograms.
     * Example: /// Example: 10.23
     * Constraints: No constraints specified.
     */
    val bolFuelMass : Double
        get() {
            val o = __offset(56)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * The estimated total current mass of the spacecraft, in kilograms.
     * Example: /// Example: 500
     * Constraints: No constraints specified.
     */
    val currentMass : Double
        get() {
            val o = __offset(58)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * The 1-sigma uncertainty of the total spacecraft mass, in kilograms.
     * Example: /// Example: 50.1
     * Constraints: No constraints specified.
     */
    val totalMassUnc : Double
        get() {
            val o = __offset(60)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Spacecraft deployed area of solar array in meters squared.
     * Example: /// Example: 10.23
     * Constraints: No constraints specified.
     */
    val solarArrayArea : Double
        get() {
            val o = __offset(62)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Boolean indicating whether a spacecraft is maneuverable. Note that a spacecraft may have propulsion capability but may not be maneuverable due to lack of fuel, anomalous condition, or other operational constraints.
     * Example: /// Example: False
     * Constraints: No constraints specified.
     */
    val maneuverable : Boolean
        get() {
            val o = __offset(64)
            return if(o != 0) 0.toByte() != bb.get(o + bb_pos) else false
        }
    /**
     * Estimated remaining fuel for the object in kilograms.
     * Example: /// Example: 10.23
     * Constraints: No constraints specified.
     */
    val fuelRemaining : Double
        get() {
            val o = __offset(66)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Average cross sectional area in meters squared.
     * Example: /// Example: 10.23
     * Constraints: No constraints specified.
     */
    val crossSection : Double
        get() {
            val o = __offset(68)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Average cross sectional area of the bus in meters squared.
     * Example: /// Example: 10.23
     * Constraints: No constraints specified.
     */
    val busCrossSection : Double
        get() {
            val o = __offset(70)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Maximum dimension across the spacecraft (e.g., tip-to-tip across the solar panel arrays) in meters.
     * Example: /// Example: 10.23
     * Constraints: No constraints specified.
     */
    val maxRadius : Double
        get() {
            val o = __offset(72)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Maximum dimension of the box circumscribing the spacecraft (d = sqrt(a*a + b*b + c*c) where a is the tip-to-tip dimension, b and c are perpendicular to that.) in meters.
     * Example: /// Example: 10.23
     * Constraints: No constraints specified.
     */
    val colaRadius : Double
        get() {
            val o = __offset(74)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * The radius used for long-term debris environment projection analyses that is not as conservative as COLA Radius, in meters.
     * Example: /// Example: 10.23
     * Constraints: No constraints specified.
     */
    val adeptRadius : Double
        get() {
            val o = __offset(76)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * The number of sub-satellites or deployable objects on the spacecraft.
     * Example: /// Example: 2
     * Constraints: No constraints specified.
     */
    val numDeployable : Int
        get() {
            val o = __offset(78)
            return if(o != 0) bb.getInt(o + bb_pos) else 0
        }
    /**
     * Array of satellite deployable objects. Must contain the same number of elements as the value of numDeployable.
     * Example: /// Example: ['GOES-18A', 'GOES-18B']
     * Constraints: No constraints specified.
     */
    fun depNames(j: Int) : String? {
        val o = __offset(80)
        return if (o != 0) {
            __string(__vector(o) + j * 4)
        } else {
            null
        }
    }
    val depNamesLength : Int
        get() {
            val o = __offset(80); return if (o != 0) __vector_len(o) else 0
        }
    /**
     * Array of the estimated mass of each deployable object, in kilograms. Must contain the same number of elements as the value of numDeployable.
     * Example: /// Example: [20, 21]
     * Constraints: No constraints specified.
     */
    fun depEstMasses(j: Int) : String? {
        val o = __offset(82)
        return if (o != 0) {
            __string(__vector(o) + j * 4)
        } else {
            null
        }
    }
    val depEstMassesLength : Int
        get() {
            val o = __offset(82); return if (o != 0) __vector_len(o) else 0
        }
    /**
     * Array of the 1-sigma uncertainty of the mass for each deployable object, in kilograms. Must contain the same number of elements as the value of numDeployable.
     * Example: /// Example: [10, 5]
     * Constraints: No constraints specified.
     */
    fun depMassUncs(j: Int) : String? {
        val o = __offset(84)
        return if (o != 0) {
            __string(__vector(o) + j * 4)
        } else {
            null
        }
    }
    val depMassUncsLength : Int
        get() {
            val o = __offset(84); return if (o != 0) __vector_len(o) else 0
        }
    /**
     * Source of the data.
     * Example: /// Example: Bluestaq
     * Constraints: Minimum length = 1, Maximum length = 64
     */
    val source : String?
        get() {
            val o = __offset(86)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val sourceAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(86, 1)
    fun sourceInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 86, 1)
    /**
     * Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
     * Example: /// Example: THIRD_PARTY_DATASOURCE
     * Constraints: Minimum length = 0, Maximum length = 64
     */
    val origin : String?
        get() {
            val o = __offset(88)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val originAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(88, 1)
    fun originInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 88, 1)
    /**
     * The name of the source who last provided an observation for this idOnOrbit.
     * Example: /// Example: THIRD_PARTY_DATASOURCE
     * Constraints: Minimum length = 0, Maximum length = 64
     */
    val lastObSource : String?
        get() {
            val o = __offset(90)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val lastObSourceAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(90, 1)
    fun lastObSourceInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 90, 1)
    /**
     * Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
     * EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
     * REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
     * SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
     * TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
     * Example: /// Example: TEST
     * Constraints: Minimum length = 1, Maximum length = 32
     */
    val dataMode : Byte
        get() {
            val o = __offset(92)
            return if(o != 0) bb.get(o + bb_pos) else 0
        }
    /**
     * Time the row was created in the database, auto-populated by the system.
     * Example: /// Example: 2018-01-01T16:00:00.123Z
     * Constraints: No constraints specified.
     */
    val createdAt : String?
        get() {
            val o = __offset(94)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val createdAtAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(94, 1)
    fun createdAtInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 94, 1)
    /**
     * Application user who created the row in the database, auto-populated by the system.
     * Example: /// Example: some.user
     * Constraints: Minimum length = 1, Maximum length = 64
     */
    val createdBy : String?
        get() {
            val o = __offset(96)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val createdByAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(96, 1)
    fun createdByInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 96, 1)
    /**
     * The originating source network on which this record was created, auto-populated by the system.
     * Example: /// Example: OPS1
     * Constraints: Minimum length = 1, Maximum length = 32
     */
    val origNetwork : String?
        get() {
            val o = __offset(98)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val origNetworkAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(98, 1)
    fun origNetworkInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 98, 1)
    companion object {
        fun validateVersion() = Constants.FLATBUFFERS_24_3_25()
        fun getRootAsOnorbitDetails_Abridged(_bb: ByteBuffer): OnorbitDetails_Abridged = getRootAsOnorbitDetails_Abridged(_bb, OnorbitDetails_Abridged())
        fun getRootAsOnorbitDetails_Abridged(_bb: ByteBuffer, obj: OnorbitDetails_Abridged): OnorbitDetails_Abridged {
            _bb.order(ByteOrder.LITTLE_ENDIAN)
            return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb))
        }
        fun OnorbitDetails_AbridgedBufferHasIdentifier(_bb: ByteBuffer) : Boolean = __has_identifier(_bb, "ONOR")
        fun createOnorbitDetails_Abridged(builder: FlatBufferBuilder, idOffset: Int, idOnOrbitOffset: Int, classificationMarkingOffset: Int, lastObTimeOffset: Int, vismag: Double, vismagMin: Double, vismagMax: Double, vismagMean: Double, rcs: Double, rcsMin: Double, rcsMax: Double, rcsMean: Double, bolDeltaV: Double, maxDeltaV: Double, deltaVunc: Double, estDeltaVduration: Double, numMission: Int, missionTypesOffset: Int, busTypeOffset: Int, geoSlot: Double, driftRate: Double, dryMass: Double, additionalMass: Double, launchMassMin: Double, launchMass: Double, launchMassMax: Double, bolFuelMass: Double, currentMass: Double, totalMassUnc: Double, solarArrayArea: Double, maneuverable: Boolean, fuelRemaining: Double, crossSection: Double, busCrossSection: Double, maxRadius: Double, colaRadius: Double, adeptRadius: Double, numDeployable: Int, depNamesOffset: Int, depEstMassesOffset: Int, depMassUncsOffset: Int, sourceOffset: Int, originOffset: Int, lastObSourceOffset: Int, dataMode: Byte, createdAtOffset: Int, createdByOffset: Int, origNetworkOffset: Int) : Int {
            builder.startTable(48)
            addAdeptRadius(builder, adeptRadius)
            addColaRadius(builder, colaRadius)
            addMaxRadius(builder, maxRadius)
            addBusCrossSection(builder, busCrossSection)
            addCrossSection(builder, crossSection)
            addFuelRemaining(builder, fuelRemaining)
            addSolarArrayArea(builder, solarArrayArea)
            addTotalMassUnc(builder, totalMassUnc)
            addCurrentMass(builder, currentMass)
            addBolFuelMass(builder, bolFuelMass)
            addLaunchMassMax(builder, launchMassMax)
            addLaunchMass(builder, launchMass)
            addLaunchMassMin(builder, launchMassMin)
            addAdditionalMass(builder, additionalMass)
            addDryMass(builder, dryMass)
            addDriftRate(builder, driftRate)
            addGeoSlot(builder, geoSlot)
            addEstDeltaVDuration(builder, estDeltaVduration)
            addDeltaVUnc(builder, deltaVunc)
            addMaxDeltaV(builder, maxDeltaV)
            addBolDeltaV(builder, bolDeltaV)
            addRcsMean(builder, rcsMean)
            addRcsMax(builder, rcsMax)
            addRcsMin(builder, rcsMin)
            addRcs(builder, rcs)
            addVismagMean(builder, vismagMean)
            addVismagMax(builder, vismagMax)
            addVismagMin(builder, vismagMin)
            addVismag(builder, vismag)
            addOrigNetwork(builder, origNetworkOffset)
            addCreatedBy(builder, createdByOffset)
            addCreatedAt(builder, createdAtOffset)
            addLastObSource(builder, lastObSourceOffset)
            addOrigin(builder, originOffset)
            addSource(builder, sourceOffset)
            addDepMassUncs(builder, depMassUncsOffset)
            addDepEstMasses(builder, depEstMassesOffset)
            addDepNames(builder, depNamesOffset)
            addNumDeployable(builder, numDeployable)
            addBusType(builder, busTypeOffset)
            addMissionTypes(builder, missionTypesOffset)
            addNumMission(builder, numMission)
            addLastObTime(builder, lastObTimeOffset)
            addClassificationMarking(builder, classificationMarkingOffset)
            addIdOnOrbit(builder, idOnOrbitOffset)
            addId(builder, idOffset)
            addDataMode(builder, dataMode)
            addManeuverable(builder, maneuverable)
            return endOnorbitDetails_Abridged(builder)
        }
        fun startOnorbitDetails_Abridged(builder: FlatBufferBuilder) = builder.startTable(48)
        fun addId(builder: FlatBufferBuilder, id: Int) = builder.addOffset(0, id, 0)
        fun addIdOnOrbit(builder: FlatBufferBuilder, idOnOrbit: Int) = builder.addOffset(1, idOnOrbit, 0)
        fun addClassificationMarking(builder: FlatBufferBuilder, classificationMarking: Int) = builder.addOffset(2, classificationMarking, 0)
        fun addLastObTime(builder: FlatBufferBuilder, lastObTime: Int) = builder.addOffset(3, lastObTime, 0)
        fun addVismag(builder: FlatBufferBuilder, vismag: Double) = builder.addDouble(4, vismag, 0.0)
        fun addVismagMin(builder: FlatBufferBuilder, vismagMin: Double) = builder.addDouble(5, vismagMin, 0.0)
        fun addVismagMax(builder: FlatBufferBuilder, vismagMax: Double) = builder.addDouble(6, vismagMax, 0.0)
        fun addVismagMean(builder: FlatBufferBuilder, vismagMean: Double) = builder.addDouble(7, vismagMean, 0.0)
        fun addRcs(builder: FlatBufferBuilder, rcs: Double) = builder.addDouble(8, rcs, 0.0)
        fun addRcsMin(builder: FlatBufferBuilder, rcsMin: Double) = builder.addDouble(9, rcsMin, 0.0)
        fun addRcsMax(builder: FlatBufferBuilder, rcsMax: Double) = builder.addDouble(10, rcsMax, 0.0)
        fun addRcsMean(builder: FlatBufferBuilder, rcsMean: Double) = builder.addDouble(11, rcsMean, 0.0)
        fun addBolDeltaV(builder: FlatBufferBuilder, bolDeltaV: Double) = builder.addDouble(12, bolDeltaV, 0.0)
        fun addMaxDeltaV(builder: FlatBufferBuilder, maxDeltaV: Double) = builder.addDouble(13, maxDeltaV, 0.0)
        fun addDeltaVUnc(builder: FlatBufferBuilder, deltaVunc: Double) = builder.addDouble(14, deltaVunc, 0.0)
        fun addEstDeltaVDuration(builder: FlatBufferBuilder, estDeltaVduration: Double) = builder.addDouble(15, estDeltaVduration, 0.0)
        fun addNumMission(builder: FlatBufferBuilder, numMission: Int) = builder.addInt(16, numMission, 0)
        fun addMissionTypes(builder: FlatBufferBuilder, missionTypes: Int) = builder.addOffset(17, missionTypes, 0)
        fun createMissionTypesVector(builder: FlatBufferBuilder, data: IntArray) : Int {
            builder.startVector(4, data.size, 4)
            for (i in data.size - 1 downTo 0) {
                builder.addOffset(data[i])
            }
            return builder.endVector()
        }
        fun startMissionTypesVector(builder: FlatBufferBuilder, numElems: Int) = builder.startVector(4, numElems, 4)
        fun addBusType(builder: FlatBufferBuilder, busType: Int) = builder.addOffset(18, busType, 0)
        fun addGeoSlot(builder: FlatBufferBuilder, geoSlot: Double) = builder.addDouble(19, geoSlot, 0.0)
        fun addDriftRate(builder: FlatBufferBuilder, driftRate: Double) = builder.addDouble(20, driftRate, 0.0)
        fun addDryMass(builder: FlatBufferBuilder, dryMass: Double) = builder.addDouble(21, dryMass, 0.0)
        fun addAdditionalMass(builder: FlatBufferBuilder, additionalMass: Double) = builder.addDouble(22, additionalMass, 0.0)
        fun addLaunchMassMin(builder: FlatBufferBuilder, launchMassMin: Double) = builder.addDouble(23, launchMassMin, 0.0)
        fun addLaunchMass(builder: FlatBufferBuilder, launchMass: Double) = builder.addDouble(24, launchMass, 0.0)
        fun addLaunchMassMax(builder: FlatBufferBuilder, launchMassMax: Double) = builder.addDouble(25, launchMassMax, 0.0)
        fun addBolFuelMass(builder: FlatBufferBuilder, bolFuelMass: Double) = builder.addDouble(26, bolFuelMass, 0.0)
        fun addCurrentMass(builder: FlatBufferBuilder, currentMass: Double) = builder.addDouble(27, currentMass, 0.0)
        fun addTotalMassUnc(builder: FlatBufferBuilder, totalMassUnc: Double) = builder.addDouble(28, totalMassUnc, 0.0)
        fun addSolarArrayArea(builder: FlatBufferBuilder, solarArrayArea: Double) = builder.addDouble(29, solarArrayArea, 0.0)
        fun addManeuverable(builder: FlatBufferBuilder, maneuverable: Boolean) = builder.addBoolean(30, maneuverable, false)
        fun addFuelRemaining(builder: FlatBufferBuilder, fuelRemaining: Double) = builder.addDouble(31, fuelRemaining, 0.0)
        fun addCrossSection(builder: FlatBufferBuilder, crossSection: Double) = builder.addDouble(32, crossSection, 0.0)
        fun addBusCrossSection(builder: FlatBufferBuilder, busCrossSection: Double) = builder.addDouble(33, busCrossSection, 0.0)
        fun addMaxRadius(builder: FlatBufferBuilder, maxRadius: Double) = builder.addDouble(34, maxRadius, 0.0)
        fun addColaRadius(builder: FlatBufferBuilder, colaRadius: Double) = builder.addDouble(35, colaRadius, 0.0)
        fun addAdeptRadius(builder: FlatBufferBuilder, adeptRadius: Double) = builder.addDouble(36, adeptRadius, 0.0)
        fun addNumDeployable(builder: FlatBufferBuilder, numDeployable: Int) = builder.addInt(37, numDeployable, 0)
        fun addDepNames(builder: FlatBufferBuilder, depNames: Int) = builder.addOffset(38, depNames, 0)
        fun createDepNamesVector(builder: FlatBufferBuilder, data: IntArray) : Int {
            builder.startVector(4, data.size, 4)
            for (i in data.size - 1 downTo 0) {
                builder.addOffset(data[i])
            }
            return builder.endVector()
        }
        fun startDepNamesVector(builder: FlatBufferBuilder, numElems: Int) = builder.startVector(4, numElems, 4)
        fun addDepEstMasses(builder: FlatBufferBuilder, depEstMasses: Int) = builder.addOffset(39, depEstMasses, 0)
        fun createDepEstMassesVector(builder: FlatBufferBuilder, data: IntArray) : Int {
            builder.startVector(4, data.size, 4)
            for (i in data.size - 1 downTo 0) {
                builder.addOffset(data[i])
            }
            return builder.endVector()
        }
        fun startDepEstMassesVector(builder: FlatBufferBuilder, numElems: Int) = builder.startVector(4, numElems, 4)
        fun addDepMassUncs(builder: FlatBufferBuilder, depMassUncs: Int) = builder.addOffset(40, depMassUncs, 0)
        fun createDepMassUncsVector(builder: FlatBufferBuilder, data: IntArray) : Int {
            builder.startVector(4, data.size, 4)
            for (i in data.size - 1 downTo 0) {
                builder.addOffset(data[i])
            }
            return builder.endVector()
        }
        fun startDepMassUncsVector(builder: FlatBufferBuilder, numElems: Int) = builder.startVector(4, numElems, 4)
        fun addSource(builder: FlatBufferBuilder, source: Int) = builder.addOffset(41, source, 0)
        fun addOrigin(builder: FlatBufferBuilder, origin: Int) = builder.addOffset(42, origin, 0)
        fun addLastObSource(builder: FlatBufferBuilder, lastObSource: Int) = builder.addOffset(43, lastObSource, 0)
        fun addDataMode(builder: FlatBufferBuilder, dataMode: Byte) = builder.addByte(44, dataMode, 0)
        fun addCreatedAt(builder: FlatBufferBuilder, createdAt: Int) = builder.addOffset(45, createdAt, 0)
        fun addCreatedBy(builder: FlatBufferBuilder, createdBy: Int) = builder.addOffset(46, createdBy, 0)
        fun addOrigNetwork(builder: FlatBufferBuilder, origNetwork: Int) = builder.addOffset(47, origNetwork, 0)
        fun endOnorbitDetails_Abridged(builder: FlatBufferBuilder) : Int {
            val o = builder.endTable()
            return o
        }
        fun finishOnorbitDetailsAbridgedBuffer(builder: FlatBufferBuilder, offset: Int) = builder.finish(offset, "ONOR")
        fun finishSizePrefixedOnorbitDetails_AbridgedBuffer(builder: FlatBufferBuilder, offset: Int) = builder.finishSizePrefixed(offset, "ONOR")
    }
}
