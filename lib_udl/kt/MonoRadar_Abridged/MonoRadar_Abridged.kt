// automatically generated by the FlatBuffers compiler, do not modify

import com.google.flatbuffers.BaseVector
import com.google.flatbuffers.BooleanVector
import com.google.flatbuffers.ByteVector
import com.google.flatbuffers.Constants
import com.google.flatbuffers.DoubleVector
import com.google.flatbuffers.FlatBufferBuilder
import com.google.flatbuffers.FloatVector
import com.google.flatbuffers.LongVector
import com.google.flatbuffers.StringVector
import com.google.flatbuffers.Struct
import com.google.flatbuffers.Table
import com.google.flatbuffers.UnionVector
import java.nio.ByteBuffer
import java.nio.ByteOrder
import kotlin.math.sign

/**
 * /// A monoradar record contains the raw, and in some cases, processed target reports from primary and secondary air surveillance radars.  All target positions for monoradar reports are recorded as range and azimuth from geographical North relative to the detecting radar site.  In the case of secondary surveillance radars, interrogation response codes are provided as well as quality and validation characteristics, when available in the particular record type used to generate the record.
 */
@Suppress("unused")
class MonoRadar_Abridged : Table() {

    fun __init(_i: Int, _bb: ByteBuffer)  {
        __reset(_i, _bb)
    }
    fun __assign(_i: Int, _bb: ByteBuffer) : MonoRadar_Abridged {
        __init(_i, _bb)
        return this
    }
    /**
     * Unique identifier of the record, auto-generated by the system.
     * Example: /// Example: MONORADAR-ID
     * Constraints: Minimum length = 1, Maximum length = 36
     */
    val id : String?
        get() {
            val o = __offset(4)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val idAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(4, 1)
    fun idInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 4, 1)
    /**
     * Classification marking of the data in IC/CAPCO Portion-marked format.
     * Example: /// Example: U
     * Constraints: Minimum length = 1, Maximum length = 128
     */
    val classificationMarking : String?
        get() {
            val o = __offset(6)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val classificationMarkingAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(6, 1)
    fun classificationMarkingInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 6, 1)
    /**
     * Test target indicator.
     * Example: /// Example: TTI
     * Constraints: Minimum length = 0, Maximum length = 16
     */
    val tti : String?
        get() {
            val o = __offset(8)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val ttiAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(8, 1)
    fun ttiInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 8, 1)
    /**
     * ID of the radar site or station providing the data.
     * Example: /// Example: REF-SENSOR-ID
     * Constraints: Minimum length = 0, Maximum length = 36
     */
    val idSensor : String?
        get() {
            val o = __offset(10)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val idSensorAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(10, 1)
    fun idSensorInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 10, 1)
    /**
     * Sensor WGS84 latitude, in degrees, at time of observation (ts). -90 to 90 degrees (negative values south of equator).
     * Example: /// Example: 45.23
     * Constraints: No constraints specified.
     */
    val senlat : Double
        get() {
            val o = __offset(12)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Sensor WGS84 longitude, in degrees, at time of observation (ts).  -180 to 180 degrees (negative values west of Prime Meridian).
     * Example: /// Example: 45.23
     * Constraints: No constraints specified.
     */
    val senlon : Double
        get() {
            val o = __offset(14)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Sensor altitude, in kilometers, at time of observation (ts).
     * Example: /// Example: 100.23
     * Constraints: No constraints specified.
     */
    val senalt : Double
        get() {
            val o = __offset(16)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * System Area Code.
     * Example: /// Example: 10
     * Constraints: No constraints specified.
     */
    val sac : Int
        get() {
            val o = __offset(18)
            return if(o != 0) bb.getInt(o + bb_pos) else 0
        }
    /**
     * System Identification Code.
     * Example: /// Example: 40
     * Constraints: No constraints specified.
     */
    val sic : Int
        get() {
            val o = __offset(20)
            return if(o != 0) bb.getInt(o + bb_pos) else 0
        }
    /**
     * Aircraft identification from an aircraft equipped with a Mode S transponder.
     * Example: /// Example: TGT-ID
     * Constraints: Minimum length = 0, Maximum length = 16
     */
    val tgtid : String?
        get() {
            val o = __offset(22)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val tgtidAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(22, 1)
    fun tgtidInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 22, 1)
    /**
     * Aircraft address (24-bits Mode S address) assigned uniquely to each aircraft.
     * Example: /// Example: ADDR-ID
     * Constraints: Minimum length = 0, Maximum length = 16
     */
    val addr : String?
        get() {
            val o = __offset(24)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val addrAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(24, 1)
    fun addrInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 24, 1)
    /**
     * Message format received (i.e. 'ASR9', 'CAT48', 'TPS70', etc..).
     * Example: /// Example: CAT48
     * Constraints: Minimum length = 1, Maximum length = 16
     */
    val msgfmt : String?
        get() {
            val o = __offset(26)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val msgfmtAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(26, 1)
    fun msgfmtInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 26, 1)
    /**
     * Message report type received (i.e. 'SRCH', 'BCN', 'REINF', 'BRTQC', 'PSR', etc..).
     * Example: /// Example: BCN
     * Constraints: Minimum length = 1, Maximum length = 16
     */
    val msgtyp : String?
        get() {
            val o = __offset(28)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val msgtypAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(28, 1)
    fun msgtypInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 28, 1)
    /**
     * Flag indicating military message.
     * Example: /// Example: True
     * Constraints: No constraints specified.
     */
    val af : Boolean
        get() {
            val o = __offset(30)
            return if(o != 0) 0.toByte() != bb.get(o + bb_pos) else false
        }
    /**
     * Flag indicating FAA/Civ message.
     * Example: /// Example: True
     * Constraints: No constraints specified.
     */
    val faa : Boolean
        get() {
            val o = __offset(32)
            return if(o != 0) 0.toByte() != bb.get(o + bb_pos) else false
        }
    /**
     * Flag indicating whether Special Position Indicator (SPI) present in interrogation response.
     * Example: /// Example: True
     * Constraints: No constraints specified.
     */
    val spi : Boolean
        get() {
            val o = __offset(34)
            return if(o != 0) 0.toByte() != bb.get(o + bb_pos) else false
        }
    /**
     * Flag indicating whether AIMS present.
     * Example: /// Example: True
     * Constraints: No constraints specified.
     */
    val aims : Boolean
        get() {
            val o = __offset(36)
            return if(o != 0) 0.toByte() != bb.get(o + bb_pos) else false
        }
    /**
     * Flag indicating that target was detected using data from an MTI receiver.
     * Example: /// Example: True
     * Constraints: No constraints specified.
     */
    val mti : Boolean
        get() {
            val o = __offset(38)
            return if(o != 0) 0.toByte() != bb.get(o + bb_pos) else false
        }
    /**
     * Number of beacon hits received on the target.
     * Example: /// Example: 12
     * Constraints: No constraints specified.
     */
    val bcnhits : Int
        get() {
            val o = __offset(40)
            return if(o != 0) bb.getInt(o + bb_pos) else 0
        }
    /**
     * Target detection time, in ISO 8601 UTC format with microsecond precision.
     * Example: /// Example: 2021-01-01T01:01:01.123456Z
     * Constraints: No constraints specified.
     */
    val ts : String?
        get() {
            val o = __offset(42)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val tsAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(42, 1)
    fun tsInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 42, 1)
    /**
     * Message time, in ISO 8601 UTC format with microsecond precision. This is the time that the data message was released from the site.
     * Example: /// Example: 2021-01-01T01:01:01.123456Z
     * Constraints: No constraints specified.
     */
    val msgts : String?
        get() {
            val o = __offset(44)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val msgtsAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(44, 1)
    fun msgtsInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 44, 1)
    /**
     * Measured slant range to target from the observing site, in km.
     * Example: /// Example: 100.23
     * Constraints: No constraints specified.
     */
    val rng : Double
        get() {
            val o = __offset(46)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Target azimuth, measured from the observing site, in degrees from true North.  If Azimuth Change Pulse (acp) count is provided, az represents the computed angle.
     * Example: /// Example: 100.23
     * Constraints: No constraints specified.
     */
    val az : Double
        get() {
            val o = __offset(48)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Azimuth Change Pulse count at target detection.
     * Example: /// Example: 100
     * Constraints: No constraints specified.
     */
    val acp : Int
        get() {
            val o = __offset(50)
            return if(o != 0) bb.getInt(o + bb_pos) else 0
        }
    /**
     * Measured height of the target, in km. (for 3D radars).
     * Example: /// Example: 100.23
     * Constraints: No constraints specified.
     */
    val alt3d : Double
        get() {
            val o = __offset(52)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Mode-C altitude (uncorrected pressure altitude), in km.
     * Example: /// Example: 100.23
     * Constraints: No constraints specified.
     */
    val mc : Double
        get() {
            val o = __offset(54)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Status of the mode-C validity bit.
     * Example: /// Example: MCV
     * Constraints: Minimum length = 0, Maximum length = 16
     */
    val mcv : String?
        get() {
            val o = __offset(56)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val mcvAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(56, 1)
    fun mcvInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 56, 1)
    /**
     * Indicator that the mode-C response was garbled.
     * Example: /// Example: True
     * Constraints: No constraints specified.
     */
    val mcg : Boolean
        get() {
            val o = __offset(58)
            return if(o != 0) 0.toByte() != bb.get(o + bb_pos) else false
        }
    /**
     * Mode-1 interrogation response (mission code).
     * Example: /// Example: MISSION_CODE
     * Constraints: Minimum length = 0, Maximum length = 128
     */
    val m1 : String?
        get() {
            val o = __offset(60)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val m1AsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(60, 1)
    fun m1InByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 60, 1)
    /**
     * Status of the mode-1 validity bit.
     * Example: /// Example: M1V
     * Constraints: Minimum length = 0, Maximum length = 16
     */
    val m1v : String?
        get() {
            val o = __offset(62)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val m1vAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(62, 1)
    fun m1vInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 62, 1)
    /**
     * Indicator that the mode-1 response was garbled.
     * Example: /// Example: True
     * Constraints: No constraints specified.
     */
    val m1g : Boolean
        get() {
            val o = __offset(64)
            return if(o != 0) 0.toByte() != bb.get(o + bb_pos) else false
        }
    /**
     * Mode-2 interrogation response (military identification code).
     * Example: /// Example: MILITARY_ID_CODE
     * Constraints: Minimum length = 0, Maximum length = 128
     */
    val m2 : String?
        get() {
            val o = __offset(66)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val m2AsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(66, 1)
    fun m2InByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 66, 1)
    /**
     * Status of the mode-2 validity bit.
     * Example: /// Example: M2V
     * Constraints: Minimum length = 0, Maximum length = 16
     */
    val m2v : String?
        get() {
            val o = __offset(68)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val m2vAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(68, 1)
    fun m2vInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 68, 1)
    /**
     * Status of the mode-2 X-Pulse response validation.
     * Example: /// Example: M2XV
     * Constraints: Minimum length = 0, Maximum length = 16
     */
    val m2xv : String?
        get() {
            val o = __offset(70)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val m2xvAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(70, 1)
    fun m2xvInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 70, 1)
    /**
     * Indicator that the mode-2 response was garbled.
     * Example: /// Example: True
     * Constraints: No constraints specified.
     */
    val m2g : Boolean
        get() {
            val o = __offset(72)
            return if(o != 0) 0.toByte() != bb.get(o + bb_pos) else false
        }
    /**
     * Mode-3/A interrogation response (aircraft identification).
     * Example: /// Example: AIRCRAFT_ID
     * Constraints: Minimum length = 0, Maximum length = 128
     */
    val m3a : String?
        get() {
            val o = __offset(74)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val m3aAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(74, 1)
    fun m3aInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 74, 1)
    /**
     * Status of the mode-3/A validity bit.
     * Example: /// Example: M3AV
     * Constraints: Minimum length = 0, Maximum length = 16
     */
    val m3av : String?
        get() {
            val o = __offset(76)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val m3avAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(76, 1)
    fun m3avInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 76, 1)
    /**
     * Indicator that the mode-3/A response was garbled.
     * Example: /// Example: True
     * Constraints: No constraints specified.
     */
    val m3ag : Boolean
        get() {
            val o = __offset(78)
            return if(o != 0) 0.toByte() != bb.get(o + bb_pos) else false
        }
    /**
     * Status of the mode-3 X-Pulse response validation.
     * Example: /// Example: M3AXV
     * Constraints: Minimum length = 0, Maximum length = 16
     */
    val m3axv : String?
        get() {
            val o = __offset(80)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val m3axvAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(80, 1)
    fun m3axvInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 80, 1)
    /**
     * Mode-4 interrogation response (Identification Friend/Foe).
     * Example: /// Example: ID_FRIEND
     * Constraints: Minimum length = 0, Maximum length = 24
     */
    val m4 : String?
        get() {
            val o = __offset(82)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val m4AsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(82, 1)
    fun m4InByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 82, 1)
    /**
     * Status of the mode-4 validity bit.
     * Example: /// Example: M4V
     * Constraints: Minimum length = 0, Maximum length = 16
     */
    val m4v : String?
        get() {
            val o = __offset(84)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val m4vAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(84, 1)
    fun m4vInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 84, 1)
    /**
     * Mode-4 D1 & D2 response status.
     * Example: /// Example: STATUS
     * Constraints: Minimum length = 0, Maximum length = 8
     */
    val m4d1d2 : String?
        get() {
            val o = __offset(86)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val m4d1d2AsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(86, 1)
    fun m4d1d2InByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 86, 1)
    /**
     * Mode-S Comm B message data.
     * Example: /// Example: MSCOMMB
     * Constraints: Minimum length = 0, Maximum length = 16
     */
    val mscommb : String?
        get() {
            val o = __offset(88)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val mscommbAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(88, 1)
    fun mscommbInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 88, 1)
    /**
     * Flag indicating military emergency.
     * Example: /// Example: False
     * Constraints: No constraints specified.
     */
    val milemrgcy : Boolean
        get() {
            val o = __offset(90)
            return if(o != 0) 0.toByte() != bb.get(o + bb_pos) else false
        }
    /**
     * 7500 squawk present (hijack).
     * Example: /// Example: False
     * Constraints: No constraints specified.
     */
    val code7500 : Boolean
        get() {
            val o = __offset(92)
            return if(o != 0) 0.toByte() != bb.get(o + bb_pos) else false
        }
    /**
     * 7600 squawk present (loss of comm).
     * Example: /// Example: False
     * Constraints: No constraints specified.
     */
    val code7600 : Boolean
        get() {
            val o = __offset(94)
            return if(o != 0) 0.toByte() != bb.get(o + bb_pos) else false
        }
    /**
     * 7700 squawk present (general emergency).
     * Example: /// Example: False
     * Constraints: No constraints specified.
     */
    val code7700 : Boolean
        get() {
            val o = __offset(96)
            return if(o != 0) 0.toByte() != bb.get(o + bb_pos) else false
        }
    /**
     * Target ground speed, in meters/second.
     * Example: /// Example: 30.23
     * Constraints: No constraints specified.
     */
    val grndspd : Double
        get() {
            val o = __offset(98)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Target heading, in degrees from true North at the target position.
     * Example: /// Example: 30.23
     * Constraints: No constraints specified.
     */
    val hdng : Double
        get() {
            val o = __offset(100)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Value representing a unique reference to a track record within a particular track file.  Included when the  radar station outputs tracks.
     * Example: /// Example: 30
     * Constraints: No constraints specified.
     */
    val trknum : Int
        get() {
            val o = __offset(102)
            return if(o != 0) bb.getInt(o + bb_pos) else 0
        }
    /**
     * Type of sensor(s) maintaining track.
     * Example: /// Example: RAD
     * Constraints: Minimum length = 0, Maximum length = 16
     */
    val rad : String?
        get() {
            val o = __offset(104)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val radAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(104, 1)
    fun radInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 104, 1)
    /**
     * Indication of Horizontal Maneuver detection.
     * Example: /// Example: MAH
     * Constraints: Minimum length = 0, Maximum length = 16
     */
    val mah : String?
        get() {
            val o = __offset(106)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val mahAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(106, 1)
    fun mahInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 106, 1)
    /**
     * Climbing/Descending mode indicator.
     * Example: /// Example: CDM
     * Constraints: Minimum length = 0, Maximum length = 24
     */
    val cdm : String?
        get() {
            val o = __offset(108)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val cdmAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(108, 1)
    fun cdmInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 108, 1)
    /**
     * Array of local 2d-cartesian [x, y] coordinates of target, in km.
     * Example: /// Example: [1.2, 2.2]
     * Constraints: No constraints specified.
     */
    fun cartpos(j: Int) : String? {
        val o = __offset(110)
        return if (o != 0) {
            __string(__vector(o) + j * 4)
        } else {
            null
        }
    }
    val cartposLength : Int
        get() {
            val o = __offset(110); return if (o != 0) __vector_len(o) else 0
        }
    /**
     * Runlength of the primary surveillance radar track, in degrees.
     * Example: /// Example: 44.23
     * Constraints: No constraints specified.
     */
    val psrrl : Double
        get() {
            val o = __offset(112)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Runlength of the secondary surveillance radar track, in degrees.
     * Example: /// Example: 44.23
     * Constraints: No constraints specified.
     */
    val ssrl : Double
        get() {
            val o = __offset(114)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Target range delta between PSR and SSR (reference PSR-SSR), in km.
     * Example: /// Example: 44.23
     * Constraints: No constraints specified.
     */
    val rngdelt : Double
        get() {
            val o = __offset(116)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Target azimuth delta between PSR and SSR (reference PSR-SSR), in degrees.
     * Example: /// Example: 44.23
     * Constraints: No constraints specified.
     */
    val azdelt : Double
        get() {
            val o = __offset(118)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Warning/Error Conditions and Target Classification.
     * Example: /// Example: ['WARNING', 'WARNING']
     * Constraints: No constraints specified.
     */
    fun wectc(j: Int) : String? {
        val o = __offset(120)
        return if (o != 0) {
            __string(__vector(o) + j * 4)
        } else {
            null
        }
    }
    val wectcLength : Int
        get() {
            val o = __offset(120); return if (o != 0) __vector_len(o) else 0
        }
    /**
     * Flag indicating report separated from different responses at same range.  Azimuth may have larger than normal error when present.
     * Example: /// Example: True
     * Constraints: No constraints specified.
     */
    val mrgrpt : Boolean
        get() {
            val o = __offset(122)
            return if(o != 0) 0.toByte() != bb.get(o + bb_pos) else false
        }
    /**
     * ARTS quality.
     * Example: /// Example: QUALITY
     * Constraints: Minimum length = 0, Maximum length = 64
     */
    val artsqual : String?
        get() {
            val o = __offset(124)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val artsqualAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(124, 1)
    fun artsqualInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 124, 1)
    /**
     * Track eligibility flag.
     * Example: /// Example: ELIGIBILITY
     * Constraints: Minimum length = 0, Maximum length = 24
     */
    val trkelig : String?
        get() {
            val o = __offset(126)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val trkeligAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(126, 1)
    fun trkeligInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 126, 1)
    /**
     * Target confidence.
     * Example: /// Example: CONFIDENCE
     * Constraints: Minimum length = 0, Maximum length = 24
     */
    val tgtconf : String?
        get() {
            val o = __offset(128)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val tgtconfAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(128, 1)
    fun tgtconfInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 128, 1)
    /**
     * Target correlation flag.
     * Example: /// Example: CORRELATION
     * Constraints: Minimum length = 0, Maximum length = 16
     */
    val tgtcorr : String?
        get() {
            val o = __offset(130)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val tgtcorrAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(130, 1)
    fun tgtcorrInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 130, 1)
    /**
     * Data time-in-storage, in seconds. This is the amount of time elapsed between target detection and message transmission.
     * Example: /// Example: 0.4
     * Constraints: No constraints specified.
     */
    val tis : Double
        get() {
            val o = __offset(132)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Optional array of provider/source specific tags for this data, where each element is no longer than 32 characters, used for implementing data owner conditional access controls to restrict access to the data. Should be left null by data providers unless conditional access controls are coordinated with the UDL team.
     * Example: /// Example: ['TAG1', 'TAG2']
     * Constraints: No constraints specified.
     */
    fun tags(j: Int) : String? {
        val o = __offset(134)
        return if (o != 0) {
            __string(__vector(o) + j * 4)
        } else {
            null
        }
    }
    val tagsLength : Int
        get() {
            val o = __offset(134); return if (o != 0) __vector_len(o) else 0
        }
    /**
     * Optional identifier provided by observation source to indicate the sensor identifier which produced this observation.This may be an internal identifier and not necessarily a valid sensor ID.
     * Example: /// Example: ORIGSENSOR-ID
     * Constraints: Minimum length = 0, Maximum length = 64
     */
    val origSensorId : String?
        get() {
            val o = __offset(136)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val origSensorIdAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(136, 1)
    fun origSensorIdInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 136, 1)
    /**
     * Source of the data.
     * Example: /// Example: Bluestaq
     * Constraints: Minimum length = 1, Maximum length = 64
     */
    val source : String?
        get() {
            val o = __offset(138)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val sourceAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(138, 1)
    fun sourceInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 138, 1)
    /**
     * Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
     * Example: /// Example: THIRD_PARTY_DATASOURCE
     * Constraints: Minimum length = 0, Maximum length = 64
     */
    val origin : String?
        get() {
            val o = __offset(140)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val originAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(140, 1)
    fun originInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 140, 1)
    /**
     * Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
     * EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
     * REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
     * SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
     * TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
     * Example: /// Example: TEST
     * Constraints: Minimum length = 1, Maximum length = 32
     */
    val dataMode : Byte
        get() {
            val o = __offset(142)
            return if(o != 0) bb.get(o + bb_pos) else 0
        }
    /**
     * Time the row was created in the database.
     * Example: /// Example: 2018-01-01T16:00:00.123Z
     * Constraints: No constraints specified.
     */
    val createdAt : String?
        get() {
            val o = __offset(144)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val createdAtAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(144, 1)
    fun createdAtInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 144, 1)
    /**
     * Application user who created the row in the database.
     * Example: /// Example: some.user
     * Constraints: Minimum length = 1, Maximum length = 64
     */
    val createdBy : String?
        get() {
            val o = __offset(146)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val createdByAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(146, 1)
    fun createdByInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 146, 1)
    /**
     * The originating source network on which this record was created, auto-populated by the system.
     * Example: /// Example: ORIG
     * Constraints: Minimum length = 1, Maximum length = 32
     */
    val origNetwork : String?
        get() {
            val o = __offset(148)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val origNetworkAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(148, 1)
    fun origNetworkInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 148, 1)
    companion object {
        fun validateVersion() = Constants.FLATBUFFERS_24_3_25()
        fun getRootAsMonoRadar_Abridged(_bb: ByteBuffer): MonoRadar_Abridged = getRootAsMonoRadar_Abridged(_bb, MonoRadar_Abridged())
        fun getRootAsMonoRadar_Abridged(_bb: ByteBuffer, obj: MonoRadar_Abridged): MonoRadar_Abridged {
            _bb.order(ByteOrder.LITTLE_ENDIAN)
            return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb))
        }
        fun MonoRadar_AbridgedBufferHasIdentifier(_bb: ByteBuffer) : Boolean = __has_identifier(_bb, "MONO")
        fun createMonoRadar_Abridged(builder: FlatBufferBuilder, idOffset: Int, classificationMarkingOffset: Int, ttiOffset: Int, idSensorOffset: Int, senlat: Double, senlon: Double, senalt: Double, sac: Int, sic: Int, tgtidOffset: Int, addrOffset: Int, msgfmtOffset: Int, msgtypOffset: Int, af: Boolean, faa: Boolean, spi: Boolean, aims: Boolean, mti: Boolean, bcnhits: Int, tsOffset: Int, msgtsOffset: Int, rng: Double, az: Double, acp: Int, alt3d: Double, mc: Double, mcvOffset: Int, mcg: Boolean, m1Offset: Int, m1vOffset: Int, m1g: Boolean, m2Offset: Int, m2vOffset: Int, m2xvOffset: Int, m2g: Boolean, m3aOffset: Int, m3avOffset: Int, m3ag: Boolean, m3axvOffset: Int, m4Offset: Int, m4vOffset: Int, m4d1d2Offset: Int, mscommbOffset: Int, milemrgcy: Boolean, code7500: Boolean, code7600: Boolean, code7700: Boolean, grndspd: Double, hdng: Double, trknum: Int, radOffset: Int, mahOffset: Int, cdmOffset: Int, cartposOffset: Int, psrrl: Double, ssrl: Double, rngdelt: Double, azdelt: Double, wectcOffset: Int, mrgrpt: Boolean, artsqualOffset: Int, trkeligOffset: Int, tgtconfOffset: Int, tgtcorrOffset: Int, tis: Double, tagsOffset: Int, origSensorIdOffset: Int, sourceOffset: Int, originOffset: Int, dataMode: Byte, createdAtOffset: Int, createdByOffset: Int, origNetworkOffset: Int) : Int {
            builder.startTable(73)
            addTis(builder, tis)
            addAzdelt(builder, azdelt)
            addRngdelt(builder, rngdelt)
            addSsrl(builder, ssrl)
            addPsrrl(builder, psrrl)
            addHdng(builder, hdng)
            addGrndspd(builder, grndspd)
            addMc(builder, mc)
            addAlt3d(builder, alt3d)
            addAz(builder, az)
            addRng(builder, rng)
            addSenalt(builder, senalt)
            addSenlon(builder, senlon)
            addSenlat(builder, senlat)
            addOrigNetwork(builder, origNetworkOffset)
            addCreatedBy(builder, createdByOffset)
            addCreatedAt(builder, createdAtOffset)
            addOrigin(builder, originOffset)
            addSource(builder, sourceOffset)
            addOrigSensorId(builder, origSensorIdOffset)
            addTags(builder, tagsOffset)
            addTgtcorr(builder, tgtcorrOffset)
            addTgtconf(builder, tgtconfOffset)
            addTrkelig(builder, trkeligOffset)
            addArtsqual(builder, artsqualOffset)
            addWectc(builder, wectcOffset)
            addCartpos(builder, cartposOffset)
            addCdm(builder, cdmOffset)
            addMah(builder, mahOffset)
            addRad(builder, radOffset)
            addTrknum(builder, trknum)
            addMscommb(builder, mscommbOffset)
            addM4d1d2(builder, m4d1d2Offset)
            addM4v(builder, m4vOffset)
            addM4(builder, m4Offset)
            addM3axv(builder, m3axvOffset)
            addM3av(builder, m3avOffset)
            addM3a(builder, m3aOffset)
            addM2xv(builder, m2xvOffset)
            addM2v(builder, m2vOffset)
            addM2(builder, m2Offset)
            addM1v(builder, m1vOffset)
            addM1(builder, m1Offset)
            addMcv(builder, mcvOffset)
            addAcp(builder, acp)
            addMsgts(builder, msgtsOffset)
            addTs(builder, tsOffset)
            addBcnhits(builder, bcnhits)
            addMsgtyp(builder, msgtypOffset)
            addMsgfmt(builder, msgfmtOffset)
            addAddr(builder, addrOffset)
            addTgtid(builder, tgtidOffset)
            addSic(builder, sic)
            addSac(builder, sac)
            addIdSensor(builder, idSensorOffset)
            addTti(builder, ttiOffset)
            addClassificationMarking(builder, classificationMarkingOffset)
            addId(builder, idOffset)
            addDataMode(builder, dataMode)
            addMrgrpt(builder, mrgrpt)
            addCode7700(builder, code7700)
            addCode7600(builder, code7600)
            addCode7500(builder, code7500)
            addMilemrgcy(builder, milemrgcy)
            addM3ag(builder, m3ag)
            addM2g(builder, m2g)
            addM1g(builder, m1g)
            addMcg(builder, mcg)
            addMti(builder, mti)
            addAims(builder, aims)
            addSpi(builder, spi)
            addFaa(builder, faa)
            addAf(builder, af)
            return endMonoRadar_Abridged(builder)
        }
        fun startMonoRadar_Abridged(builder: FlatBufferBuilder) = builder.startTable(73)
        fun addId(builder: FlatBufferBuilder, id: Int) = builder.addOffset(0, id, 0)
        fun addClassificationMarking(builder: FlatBufferBuilder, classificationMarking: Int) = builder.addOffset(1, classificationMarking, 0)
        fun addTti(builder: FlatBufferBuilder, tti: Int) = builder.addOffset(2, tti, 0)
        fun addIdSensor(builder: FlatBufferBuilder, idSensor: Int) = builder.addOffset(3, idSensor, 0)
        fun addSenlat(builder: FlatBufferBuilder, senlat: Double) = builder.addDouble(4, senlat, 0.0)
        fun addSenlon(builder: FlatBufferBuilder, senlon: Double) = builder.addDouble(5, senlon, 0.0)
        fun addSenalt(builder: FlatBufferBuilder, senalt: Double) = builder.addDouble(6, senalt, 0.0)
        fun addSac(builder: FlatBufferBuilder, sac: Int) = builder.addInt(7, sac, 0)
        fun addSic(builder: FlatBufferBuilder, sic: Int) = builder.addInt(8, sic, 0)
        fun addTgtid(builder: FlatBufferBuilder, tgtid: Int) = builder.addOffset(9, tgtid, 0)
        fun addAddr(builder: FlatBufferBuilder, addr: Int) = builder.addOffset(10, addr, 0)
        fun addMsgfmt(builder: FlatBufferBuilder, msgfmt: Int) = builder.addOffset(11, msgfmt, 0)
        fun addMsgtyp(builder: FlatBufferBuilder, msgtyp: Int) = builder.addOffset(12, msgtyp, 0)
        fun addAf(builder: FlatBufferBuilder, af: Boolean) = builder.addBoolean(13, af, false)
        fun addFaa(builder: FlatBufferBuilder, faa: Boolean) = builder.addBoolean(14, faa, false)
        fun addSpi(builder: FlatBufferBuilder, spi: Boolean) = builder.addBoolean(15, spi, false)
        fun addAims(builder: FlatBufferBuilder, aims: Boolean) = builder.addBoolean(16, aims, false)
        fun addMti(builder: FlatBufferBuilder, mti: Boolean) = builder.addBoolean(17, mti, false)
        fun addBcnhits(builder: FlatBufferBuilder, bcnhits: Int) = builder.addInt(18, bcnhits, 0)
        fun addTs(builder: FlatBufferBuilder, ts: Int) = builder.addOffset(19, ts, 0)
        fun addMsgts(builder: FlatBufferBuilder, msgts: Int) = builder.addOffset(20, msgts, 0)
        fun addRng(builder: FlatBufferBuilder, rng: Double) = builder.addDouble(21, rng, 0.0)
        fun addAz(builder: FlatBufferBuilder, az: Double) = builder.addDouble(22, az, 0.0)
        fun addAcp(builder: FlatBufferBuilder, acp: Int) = builder.addInt(23, acp, 0)
        fun addAlt3d(builder: FlatBufferBuilder, alt3d: Double) = builder.addDouble(24, alt3d, 0.0)
        fun addMc(builder: FlatBufferBuilder, mc: Double) = builder.addDouble(25, mc, 0.0)
        fun addMcv(builder: FlatBufferBuilder, mcv: Int) = builder.addOffset(26, mcv, 0)
        fun addMcg(builder: FlatBufferBuilder, mcg: Boolean) = builder.addBoolean(27, mcg, false)
        fun addM1(builder: FlatBufferBuilder, m1: Int) = builder.addOffset(28, m1, 0)
        fun addM1v(builder: FlatBufferBuilder, m1v: Int) = builder.addOffset(29, m1v, 0)
        fun addM1g(builder: FlatBufferBuilder, m1g: Boolean) = builder.addBoolean(30, m1g, false)
        fun addM2(builder: FlatBufferBuilder, m2: Int) = builder.addOffset(31, m2, 0)
        fun addM2v(builder: FlatBufferBuilder, m2v: Int) = builder.addOffset(32, m2v, 0)
        fun addM2xv(builder: FlatBufferBuilder, m2xv: Int) = builder.addOffset(33, m2xv, 0)
        fun addM2g(builder: FlatBufferBuilder, m2g: Boolean) = builder.addBoolean(34, m2g, false)
        fun addM3a(builder: FlatBufferBuilder, m3a: Int) = builder.addOffset(35, m3a, 0)
        fun addM3av(builder: FlatBufferBuilder, m3av: Int) = builder.addOffset(36, m3av, 0)
        fun addM3ag(builder: FlatBufferBuilder, m3ag: Boolean) = builder.addBoolean(37, m3ag, false)
        fun addM3axv(builder: FlatBufferBuilder, m3axv: Int) = builder.addOffset(38, m3axv, 0)
        fun addM4(builder: FlatBufferBuilder, m4: Int) = builder.addOffset(39, m4, 0)
        fun addM4v(builder: FlatBufferBuilder, m4v: Int) = builder.addOffset(40, m4v, 0)
        fun addM4d1d2(builder: FlatBufferBuilder, m4d1d2: Int) = builder.addOffset(41, m4d1d2, 0)
        fun addMscommb(builder: FlatBufferBuilder, mscommb: Int) = builder.addOffset(42, mscommb, 0)
        fun addMilemrgcy(builder: FlatBufferBuilder, milemrgcy: Boolean) = builder.addBoolean(43, milemrgcy, false)
        fun addCode7500(builder: FlatBufferBuilder, code7500: Boolean) = builder.addBoolean(44, code7500, false)
        fun addCode7600(builder: FlatBufferBuilder, code7600: Boolean) = builder.addBoolean(45, code7600, false)
        fun addCode7700(builder: FlatBufferBuilder, code7700: Boolean) = builder.addBoolean(46, code7700, false)
        fun addGrndspd(builder: FlatBufferBuilder, grndspd: Double) = builder.addDouble(47, grndspd, 0.0)
        fun addHdng(builder: FlatBufferBuilder, hdng: Double) = builder.addDouble(48, hdng, 0.0)
        fun addTrknum(builder: FlatBufferBuilder, trknum: Int) = builder.addInt(49, trknum, 0)
        fun addRad(builder: FlatBufferBuilder, rad: Int) = builder.addOffset(50, rad, 0)
        fun addMah(builder: FlatBufferBuilder, mah: Int) = builder.addOffset(51, mah, 0)
        fun addCdm(builder: FlatBufferBuilder, cdm: Int) = builder.addOffset(52, cdm, 0)
        fun addCartpos(builder: FlatBufferBuilder, cartpos: Int) = builder.addOffset(53, cartpos, 0)
        fun createCartposVector(builder: FlatBufferBuilder, data: IntArray) : Int {
            builder.startVector(4, data.size, 4)
            for (i in data.size - 1 downTo 0) {
                builder.addOffset(data[i])
            }
            return builder.endVector()
        }
        fun startCartposVector(builder: FlatBufferBuilder, numElems: Int) = builder.startVector(4, numElems, 4)
        fun addPsrrl(builder: FlatBufferBuilder, psrrl: Double) = builder.addDouble(54, psrrl, 0.0)
        fun addSsrl(builder: FlatBufferBuilder, ssrl: Double) = builder.addDouble(55, ssrl, 0.0)
        fun addRngdelt(builder: FlatBufferBuilder, rngdelt: Double) = builder.addDouble(56, rngdelt, 0.0)
        fun addAzdelt(builder: FlatBufferBuilder, azdelt: Double) = builder.addDouble(57, azdelt, 0.0)
        fun addWectc(builder: FlatBufferBuilder, wectc: Int) = builder.addOffset(58, wectc, 0)
        fun createWectcVector(builder: FlatBufferBuilder, data: IntArray) : Int {
            builder.startVector(4, data.size, 4)
            for (i in data.size - 1 downTo 0) {
                builder.addOffset(data[i])
            }
            return builder.endVector()
        }
        fun startWectcVector(builder: FlatBufferBuilder, numElems: Int) = builder.startVector(4, numElems, 4)
        fun addMrgrpt(builder: FlatBufferBuilder, mrgrpt: Boolean) = builder.addBoolean(59, mrgrpt, false)
        fun addArtsqual(builder: FlatBufferBuilder, artsqual: Int) = builder.addOffset(60, artsqual, 0)
        fun addTrkelig(builder: FlatBufferBuilder, trkelig: Int) = builder.addOffset(61, trkelig, 0)
        fun addTgtconf(builder: FlatBufferBuilder, tgtconf: Int) = builder.addOffset(62, tgtconf, 0)
        fun addTgtcorr(builder: FlatBufferBuilder, tgtcorr: Int) = builder.addOffset(63, tgtcorr, 0)
        fun addTis(builder: FlatBufferBuilder, tis: Double) = builder.addDouble(64, tis, 0.0)
        fun addTags(builder: FlatBufferBuilder, tags: Int) = builder.addOffset(65, tags, 0)
        fun createTagsVector(builder: FlatBufferBuilder, data: IntArray) : Int {
            builder.startVector(4, data.size, 4)
            for (i in data.size - 1 downTo 0) {
                builder.addOffset(data[i])
            }
            return builder.endVector()
        }
        fun startTagsVector(builder: FlatBufferBuilder, numElems: Int) = builder.startVector(4, numElems, 4)
        fun addOrigSensorId(builder: FlatBufferBuilder, origSensorId: Int) = builder.addOffset(66, origSensorId, 0)
        fun addSource(builder: FlatBufferBuilder, source: Int) = builder.addOffset(67, source, 0)
        fun addOrigin(builder: FlatBufferBuilder, origin: Int) = builder.addOffset(68, origin, 0)
        fun addDataMode(builder: FlatBufferBuilder, dataMode: Byte) = builder.addByte(69, dataMode, 0)
        fun addCreatedAt(builder: FlatBufferBuilder, createdAt: Int) = builder.addOffset(70, createdAt, 0)
        fun addCreatedBy(builder: FlatBufferBuilder, createdBy: Int) = builder.addOffset(71, createdBy, 0)
        fun addOrigNetwork(builder: FlatBufferBuilder, origNetwork: Int) = builder.addOffset(72, origNetwork, 0)
        fun endMonoRadar_Abridged(builder: FlatBufferBuilder) : Int {
            val o = builder.endTable()
            return o
        }
        fun finishMonoRadarAbridgedBuffer(builder: FlatBufferBuilder, offset: Int) = builder.finish(offset, "MONO")
        fun finishSizePrefixedMonoRadar_AbridgedBuffer(builder: FlatBufferBuilder, offset: Int) = builder.finishSizePrefixed(offset, "MONO")
    }
}
