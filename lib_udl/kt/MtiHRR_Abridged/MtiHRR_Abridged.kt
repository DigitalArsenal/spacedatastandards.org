// automatically generated by the FlatBuffers compiler, do not modify

import com.google.flatbuffers.BaseVector
import com.google.flatbuffers.BooleanVector
import com.google.flatbuffers.ByteVector
import com.google.flatbuffers.Constants
import com.google.flatbuffers.DoubleVector
import com.google.flatbuffers.FlatBufferBuilder
import com.google.flatbuffers.FloatVector
import com.google.flatbuffers.LongVector
import com.google.flatbuffers.StringVector
import com.google.flatbuffers.Struct
import com.google.flatbuffers.Table
import com.google.flatbuffers.UnionVector
import java.nio.ByteBuffer
import java.nio.ByteOrder
import kotlin.math.sign

/**
 * /// Data on High-Range Resolution (HRR) targets or High Range Resolution Range Doppler Maps (RDM) for a specified area.
 */
@Suppress("unused")
class MtiHRR_Abridged : Table() {

    fun __init(_i: Int, _bb: ByteBuffer)  {
        __reset(_i, _bb)
    }
    fun __assign(_i: Int, _bb: ByteBuffer) : MtiHRR_Abridged {
        __init(_i, _bb)
        return this
    }
    /**
     * Sequential count of a revisit of the bounding area for a given job ID.
     * Example: /// Example: 12
     * Constraints: No constraints specified.
     */
    val h2 : Int
        get() {
            val o = __offset(4)
            return if(o != 0) bb.getInt(o + bb_pos) else 0
        }
    /**
     * Sequential count of a dwell within the revisit of a particular bounding area for a given job ID.
     * Example: /// Example: 12
     * Constraints: No constraints specified.
     */
    val h3 : Int
        get() {
            val o = __offset(6)
            return if(o != 0) bb.getInt(o + bb_pos) else 0
        }
    /**
     * Flag to indicate the last dwell of the revisit.
     * Example: /// Example: True
     * Constraints: No constraints specified.
     */
    val h4 : Boolean
        get() {
            val o = __offset(8)
            return if(o != 0) 0.toByte() != bb.get(o + bb_pos) else false
        }
    /**
     * Sequential index of the associated MTI Report.
     * Example: /// Example: 12
     * Constraints: No constraints specified.
     */
    val h5 : Int
        get() {
            val o = __offset(10)
            return if(o != 0) bb.getInt(o + bb_pos) else 0
        }
    /**
     * Number of Range Doppler pixels that exceed target scatterer threshold and are reported in this segment.
     * Example: /// Example: 12
     * Constraints: No constraints specified.
     */
    val h6 : Int
        get() {
            val o = __offset(12)
            return if(o != 0) bb.getInt(o + bb_pos) else 0
        }
    /**
     * Number of Range Bins/Samples in a Range Doppler Chip.
     * Example: /// Example: 12
     * Constraints: No constraints specified.
     */
    val h7 : Int
        get() {
            val o = __offset(14)
            return if(o != 0) bb.getInt(o + bb_pos) else 0
        }
    /**
     * Number of Doppler bins in a Range-Doppler chip.
     * Example: /// Example: 12
     * Constraints: No constraints specified.
     */
    val h8 : Int
        get() {
            val o = __offset(16)
            return if(o != 0) bb.getInt(o + bb_pos) else 0
        }
    /**
     * The Peak Scatter returns the maximum power level (e.g. in milliwatts, or dBm) registered by the sensor.
     * Example: /// Example: 1
     * Constraints: No constraints specified.
     */
    val h9 : Int
        get() {
            val o = __offset(18)
            return if(o != 0) bb.getInt(o + bb_pos) else 0
        }
    /**
     * Detection threshold used to isolate significant target scatterer pixels, expressed as power relative to clutter mean in negative quarter-decibels.
     * Example: /// Example: 1
     * Constraints: No constraints specified.
     */
    val h10 : Int
        get() {
            val o = __offset(20)
            return if(o != 0) bb.getInt(o + bb_pos) else 0
        }
    /**
     * 3dB range impulse response of the radar, expressed in centimeters.
     * Example: /// Example: 12.23
     * Constraints: No constraints specified.
     */
    val h11 : Double
        get() {
            val o = __offset(22)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Slant Range pixel spacing after over sampling, expressed in centimeters.
     * Example: /// Example: 12.23
     * Constraints: No constraints specified.
     */
    val h12 : Double
        get() {
            val o = __offset(24)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * 3dB Doppler resolution of the radar, expressed in Hertz.
     * Example: /// Example: 12.23
     * Constraints: No constraints specified.
     */
    val h13 : Double
        get() {
            val o = __offset(26)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Doppler pixel spacing after over sampling, expressed in Hertz.
     * Example: /// Example: 12.23
     * Constraints: No constraints specified.
     */
    val h14 : Double
        get() {
            val o = __offset(28)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Center Frequency of the radar in GHz.
     * Example: /// Example: 12.23
     * Constraints: No constraints specified.
     */
    val h15 : Double
        get() {
            val o = __offset(30)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Enumeration table denoting the compression technique used.
     * Example: /// Example: TABLE
     * Constraints: Minimum length = 0, Maximum length = 32
     */
    val h16 : String?
        get() {
            val o = __offset(32)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val h16AsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(32, 1)
    fun h16InByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 32, 1)
    /**
     * Enumeration table indicating the spectral weighting used in the range compression process.
     * Example: /// Example: TABLE
     * Constraints: Minimum length = 0, Maximum length = 32
     */
    val h17 : String?
        get() {
            val o = __offset(34)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val h17AsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(34, 1)
    fun h17InByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 34, 1)
    /**
     * Enumeration table indicating the spectral weighting used in the cross-range or Doppler compression process.
     * Example: /// Example: TABLE
     * Constraints: Minimum length = 0, Maximum length = 32
     */
    val h18 : String?
        get() {
            val o = __offset(36)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val h18AsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(36, 1)
    fun h18InByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 36, 1)
    /**
     * Initial power of the peak scatterer, expressed in dB.
     * Example: /// Example: 12.23
     * Constraints: No constraints specified.
     */
    val h19 : Double
        get() {
            val o = __offset(38)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * RCS of the peak scatterer, expressed in half-decibels (dB/2).
     * Example: /// Example: 117
     * Constraints: No constraints specified.
     */
    val h20 : Int
        get() {
            val o = __offset(40)
            return if(o != 0) bb.getInt(o + bb_pos) else 0
        }
    /**
     * When the RDM does not correlate to a single MTI report index or when the center range bin does not correlate to the center of the dwell; provide the range sample offset in meters from Dwell Center (positive is away from the sensor) of the first scatterer record.
     * Example: /// Example: 1
     * Constraints: No constraints specified.
     */
    val h21 : Int
        get() {
            val o = __offset(42)
            return if(o != 0) bb.getInt(o + bb_pos) else 0
        }
    /**
     * When the RDM does not correlate to a single MTI report index or the center doppler bin does not correlate to the doppler centroid of the dwell; Doppler sample value in Hz of the first scatterer record.
     * Example: /// Example: 1
     * Constraints: No constraints specified.
     */
    val h22 : Int
        get() {
            val o = __offset(44)
            return if(o != 0) bb.getInt(o + bb_pos) else 0
        }
    /**
     * Enumeration field which designates the type of data being delivered.
     * Example: /// Example: FIELD
     * Constraints: Minimum length = 0, Maximum length = 32
     */
    val h23 : String?
        get() {
            val o = __offset(46)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val h23AsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(46, 1)
    fun h23InByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 46, 1)
    /**
     * Flag field to indicate the additional signal processing techniques applied to the data.
     * Example: /// Example: FLAG
     * Constraints: Minimum length = 0, Maximum length = 64
     */
    val h24 : String?
        get() {
            val o = __offset(48)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val h24AsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(48, 1)
    fun h24InByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 48, 1)
    /**
     * Number of pixels in the range dimension of the chip.
     * Example: /// Example: 1
     * Constraints: No constraints specified.
     */
    val h27 : Int
        get() {
            val o = __offset(50)
            return if(o != 0) bb.getInt(o + bb_pos) else 0
        }
    /**
     * Distance from Range Bin to closest edge in the entire chip, expressed in centimeters.
     * Example: /// Example: 1234567890
     * Constraints: No constraints specified.
     */
    val h28 : Long
        get() {
            val o = __offset(52)
            return if(o != 0) bb.getLong(o + bb_pos) else 0L
        }
    /**
     * Relative velocity to skin line.
     * Example: /// Example: 1
     * Constraints: No constraints specified.
     */
    val h29 : Int
        get() {
            val o = __offset(54)
            return if(o != 0) bb.getInt(o + bb_pos) else 0
        }
    /**
     * Computed object length based upon HRR profile, in meters.
     * Example: /// Example: 22
     * Constraints: No constraints specified.
     */
    val h30 : Int
        get() {
            val o = __offset(56)
            return if(o != 0) bb.getInt(o + bb_pos) else 0
        }
    /**
     * Standard deviation of estimate of the object length, expressed in meters.
     * Example: /// Example: 55
     * Constraints: No constraints specified.
     */
    val h31 : Int
        get() {
            val o = __offset(58)
            return if(o != 0) bb.getInt(o + bb_pos) else 0
        }
    /**
     * Standard deviation of estimate of the object length, expressed in meters.
     * Example: /// Example: No example provided.
     * Constraints: No constraints specified.
     */
    fun h32(j: Int) : String? {
        val o = __offset(60)
        return if (o != 0) {
            __string(__vector(o) + j * 4)
        } else {
            null
        }
    }
    val h32Length : Int
        get() {
            val o = __offset(60); return if (o != 0) __vector_len(o) else 0
        }
    companion object {
        fun validateVersion() = Constants.FLATBUFFERS_24_3_25()
        fun getRootAsMtiHRR_Abridged(_bb: ByteBuffer): MtiHRR_Abridged = getRootAsMtiHRR_Abridged(_bb, MtiHRR_Abridged())
        fun getRootAsMtiHRR_Abridged(_bb: ByteBuffer, obj: MtiHRR_Abridged): MtiHRR_Abridged {
            _bb.order(ByteOrder.LITTLE_ENDIAN)
            return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb))
        }
        fun MtiHRR_AbridgedBufferHasIdentifier(_bb: ByteBuffer) : Boolean = __has_identifier(_bb, "MTIH")
        fun createMtiHRR_Abridged(builder: FlatBufferBuilder, h2: Int, h3: Int, h4: Boolean, h5: Int, h6: Int, h7: Int, h8: Int, h9: Int, h10: Int, h11: Double, h12: Double, h13: Double, h14: Double, h15: Double, h16Offset: Int, h17Offset: Int, h18Offset: Int, h19: Double, h20: Int, h21: Int, h22: Int, h23Offset: Int, h24Offset: Int, h27: Int, h28: Long, h29: Int, h30: Int, h31: Int, h32Offset: Int) : Int {
            builder.startTable(29)
            addH28(builder, h28)
            addH19(builder, h19)
            addH15(builder, h15)
            addH14(builder, h14)
            addH13(builder, h13)
            addH12(builder, h12)
            addH11(builder, h11)
            addH32(builder, h32Offset)
            addH31(builder, h31)
            addH30(builder, h30)
            addH29(builder, h29)
            addH27(builder, h27)
            addH24(builder, h24Offset)
            addH23(builder, h23Offset)
            addH22(builder, h22)
            addH21(builder, h21)
            addH20(builder, h20)
            addH18(builder, h18Offset)
            addH17(builder, h17Offset)
            addH16(builder, h16Offset)
            addH10(builder, h10)
            addH9(builder, h9)
            addH8(builder, h8)
            addH7(builder, h7)
            addH6(builder, h6)
            addH5(builder, h5)
            addH3(builder, h3)
            addH2(builder, h2)
            addH4(builder, h4)
            return endMtiHRR_Abridged(builder)
        }
        fun startMtiHRR_Abridged(builder: FlatBufferBuilder) = builder.startTable(29)
        fun addH2(builder: FlatBufferBuilder, h2: Int) = builder.addInt(0, h2, 0)
        fun addH3(builder: FlatBufferBuilder, h3: Int) = builder.addInt(1, h3, 0)
        fun addH4(builder: FlatBufferBuilder, h4: Boolean) = builder.addBoolean(2, h4, false)
        fun addH5(builder: FlatBufferBuilder, h5: Int) = builder.addInt(3, h5, 0)
        fun addH6(builder: FlatBufferBuilder, h6: Int) = builder.addInt(4, h6, 0)
        fun addH7(builder: FlatBufferBuilder, h7: Int) = builder.addInt(5, h7, 0)
        fun addH8(builder: FlatBufferBuilder, h8: Int) = builder.addInt(6, h8, 0)
        fun addH9(builder: FlatBufferBuilder, h9: Int) = builder.addInt(7, h9, 0)
        fun addH10(builder: FlatBufferBuilder, h10: Int) = builder.addInt(8, h10, 0)
        fun addH11(builder: FlatBufferBuilder, h11: Double) = builder.addDouble(9, h11, 0.0)
        fun addH12(builder: FlatBufferBuilder, h12: Double) = builder.addDouble(10, h12, 0.0)
        fun addH13(builder: FlatBufferBuilder, h13: Double) = builder.addDouble(11, h13, 0.0)
        fun addH14(builder: FlatBufferBuilder, h14: Double) = builder.addDouble(12, h14, 0.0)
        fun addH15(builder: FlatBufferBuilder, h15: Double) = builder.addDouble(13, h15, 0.0)
        fun addH16(builder: FlatBufferBuilder, h16: Int) = builder.addOffset(14, h16, 0)
        fun addH17(builder: FlatBufferBuilder, h17: Int) = builder.addOffset(15, h17, 0)
        fun addH18(builder: FlatBufferBuilder, h18: Int) = builder.addOffset(16, h18, 0)
        fun addH19(builder: FlatBufferBuilder, h19: Double) = builder.addDouble(17, h19, 0.0)
        fun addH20(builder: FlatBufferBuilder, h20: Int) = builder.addInt(18, h20, 0)
        fun addH21(builder: FlatBufferBuilder, h21: Int) = builder.addInt(19, h21, 0)
        fun addH22(builder: FlatBufferBuilder, h22: Int) = builder.addInt(20, h22, 0)
        fun addH23(builder: FlatBufferBuilder, h23: Int) = builder.addOffset(21, h23, 0)
        fun addH24(builder: FlatBufferBuilder, h24: Int) = builder.addOffset(22, h24, 0)
        fun addH27(builder: FlatBufferBuilder, h27: Int) = builder.addInt(23, h27, 0)
        fun addH28(builder: FlatBufferBuilder, h28: Long) = builder.addLong(24, h28, 0L)
        fun addH29(builder: FlatBufferBuilder, h29: Int) = builder.addInt(25, h29, 0)
        fun addH30(builder: FlatBufferBuilder, h30: Int) = builder.addInt(26, h30, 0)
        fun addH31(builder: FlatBufferBuilder, h31: Int) = builder.addInt(27, h31, 0)
        fun addH32(builder: FlatBufferBuilder, h32: Int) = builder.addOffset(28, h32, 0)
        fun createH32Vector(builder: FlatBufferBuilder, data: IntArray) : Int {
            builder.startVector(4, data.size, 4)
            for (i in data.size - 1 downTo 0) {
                builder.addOffset(data[i])
            }
            return builder.endVector()
        }
        fun startH32Vector(builder: FlatBufferBuilder, numElems: Int) = builder.startVector(4, numElems, 4)
        fun endMtiHRR_Abridged(builder: FlatBufferBuilder) : Int {
            val o = builder.endTable()
            return o
        }
        fun finishMtiHRRAbridgedBuffer(builder: FlatBufferBuilder, offset: Int) = builder.finish(offset, "MTIH")
        fun finishSizePrefixedMtiHRR_AbridgedBuffer(builder: FlatBufferBuilder, offset: Int) = builder.finishSizePrefixed(offset, "MTIH")
    }
}
