// automatically generated by the FlatBuffers compiler, do not modify

import com.google.flatbuffers.BaseVector
import com.google.flatbuffers.BooleanVector
import com.google.flatbuffers.ByteVector
import com.google.flatbuffers.Constants
import com.google.flatbuffers.DoubleVector
import com.google.flatbuffers.FlatBufferBuilder
import com.google.flatbuffers.FloatVector
import com.google.flatbuffers.LongVector
import com.google.flatbuffers.StringVector
import com.google.flatbuffers.Struct
import com.google.flatbuffers.Table
import com.google.flatbuffers.UnionVector
import java.nio.ByteBuffer
import java.nio.ByteOrder
import kotlin.math.sign

/**
 * /// Collection of Hazardous Material information associated with this Air Transport Mission.
 */
@Suppress("unused")
class AirTransportMissionHazMat_Ingest : Table() {

    fun __init(_i: Int, _bb: ByteBuffer)  {
        __reset(_i, _bb)
    }
    fun __assign(_i: Int, _bb: ByteBuffer) : AirTransportMissionHazMat_Ingest {
        __init(_i, _bb)
        return this
    }
    /**
     * The hazMat identifier provided by the originating source.
     * Example: /// Example: cb6289e0f38534e01291ab6421d42724
     * Constraints: Minimum length = 0, Maximum length = 36
     */
    val extHazMatId : String?
        get() {
            val o = __offset(4)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val extHazMatIdAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(4, 1)
    fun extHazMatIdInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 4, 1)
    /**
     * United Nations proper shipping name of the hazardous material according to the Hazardous Materials Regulations issued by the U.S. Department of Transportation.
     * Example: /// Example: LITHIUM METAL BATTERIES
     * Constraints: Minimum length = 0, Maximum length = 1024
     */
    val itemName : String?
        get() {
            val o = __offset(6)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val itemNameAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(6, 1)
    fun itemNameInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 6, 1)
    /**
     * United Nations number or North America number that identifies hazardous materials according to the Hazardous Materials Regulations issued by the U.S. Department of Transportation.
     * Example: /// Example: 0181
     * Constraints: Minimum length = 0, Maximum length = 4
     */
    val unNum : String?
        get() {
            val o = __offset(8)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val unNumAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(8, 1)
    fun unNumInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 8, 1)
    /**
     * Number of pieces of hazardous cargo.
     * Example: /// Example: 29
     * Constraints: No constraints specified.
     */
    val pieces : Int
        get() {
            val o = __offset(10)
            return if(o != 0) bb.getInt(o + bb_pos) else 0
        }
    /**
     * Total weight of hazardous cargo, including non-explosive parts, in kilograms.
     * Example: /// Example: 22.1
     * Constraints: No constraints specified.
     */
    val weight : Double
        get() {
            val o = __offset(12)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Net explosive weight of the hazardous material, in kilograms.
     * Example: /// Example: 12.1
     * Constraints: No constraints specified.
     */
    val netExpWt : Double
        get() {
            val o = __offset(14)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Class and division of the hazardous material according to the Hazardous Materials Regulations issued by the U.S. Department of Transportation.
     * Example: /// Example: 1.1
     * Constraints: No constraints specified.
     */
    val classDiv : Double
        get() {
            val o = __offset(16)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Compatibility group code used to specify the controls for the transportation and storage of hazardous materials according to the Hazardous Materials Regulations issued by the U.S. Department of Transportation.
     * Example: /// Example: A
     * Constraints: Minimum length = 0, Maximum length = 2
     */
    val cgc : String?
        get() {
            val o = __offset(18)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val cgcAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(18, 1)
    fun cgcInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 18, 1)
    /**
     * Comma delimited list of Note IDs for compatibility groups, specific to GDSS systems.
     * Example: /// Example: 4,5,7,8
     * Constraints: Minimum length = 0, Maximum length = 100
     */
    val cgn : String?
        get() {
            val o = __offset(20)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val cgnAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(20, 1)
    fun cgnInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 20, 1)
    /**
     * Comma delimited list of Note IDs for Item Class Segregation groups, specific to GDSS systems.
     * Example: /// Example: 11,12
     * Constraints: Minimum length = 0, Maximum length = 100
     */
    val applicableNotes : String?
        get() {
            val o = __offset(22)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val applicableNotesAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(22, 1)
    fun applicableNotesInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 22, 1)
    /**
     * Itinerary number that identifies where the hazardous material is loaded.
     * Example: /// Example: 50
     * Constraints: No constraints specified.
     */
    val onItin : Int
        get() {
            val o = __offset(24)
            return if(o != 0) bb.getInt(o + bb_pos) else 0
        }
    /**
     * The International Civil Aviation Organization (ICAO) code of the site where the hazardous material is loaded.
     * Example: /// Example: LIRQ
     * Constraints: Minimum length = 0, Maximum length = 4
     */
    val onIcao : String?
        get() {
            val o = __offset(26)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val onIcaoAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(26, 1)
    fun onIcaoInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 26, 1)
    /**
     * Itinerary number that identifies where the hazardous material is unloaded.
     * Example: /// Example: 300
     * Constraints: No constraints specified.
     */
    val offItin : Int
        get() {
            val o = __offset(28)
            return if(o != 0) bb.getInt(o + bb_pos) else 0
        }
    /**
     * The International Civil Aviation Organization (ICAO) code of the site where the hazardous material is unloaded.
     * Example: /// Example: MBPV
     * Constraints: Minimum length = 0, Maximum length = 4
     */
    val offIcao : String?
        get() {
            val o = __offset(30)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val offIcaoAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(30, 1)
    fun offIcaoInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 30, 1)
    /**
     * Flag indicating if hazardous material is associated with this air transport mission. Possible values are P (planned to be associated with the mission) or A (actually associated with the mission). Enum: [P, A].
     * Example: /// Example: P
     * Constraints: Minimum length = 0, Maximum length = 1
     */
    val planned : String?
        get() {
            val o = __offset(32)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val plannedAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(32, 1)
    fun plannedInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 32, 1)
    companion object {
        fun validateVersion() = Constants.FLATBUFFERS_24_3_25()
        fun getRootAsAirTransportMissionHazMat_Ingest(_bb: ByteBuffer): AirTransportMissionHazMat_Ingest = getRootAsAirTransportMissionHazMat_Ingest(_bb, AirTransportMissionHazMat_Ingest())
        fun getRootAsAirTransportMissionHazMat_Ingest(_bb: ByteBuffer, obj: AirTransportMissionHazMat_Ingest): AirTransportMissionHazMat_Ingest {
            _bb.order(ByteOrder.LITTLE_ENDIAN)
            return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb))
        }
        fun AirTransportMissionHazMat_IngestBufferHasIdentifier(_bb: ByteBuffer) : Boolean = __has_identifier(_bb, "AIRT")
        fun createAirTransportMissionHazMat_Ingest(builder: FlatBufferBuilder, extHazMatIdOffset: Int, itemNameOffset: Int, unNumOffset: Int, pieces: Int, weight: Double, netExpWt: Double, classDiv: Double, cgcOffset: Int, cgnOffset: Int, applicableNotesOffset: Int, onItin: Int, onIcaoOffset: Int, offItin: Int, offIcaoOffset: Int, plannedOffset: Int) : Int {
            builder.startTable(15)
            addClassDiv(builder, classDiv)
            addNetExpWt(builder, netExpWt)
            addWeight(builder, weight)
            addPlanned(builder, plannedOffset)
            addOffICAO(builder, offIcaoOffset)
            addOffItin(builder, offItin)
            addOnICAO(builder, onIcaoOffset)
            addOnItin(builder, onItin)
            addApplicableNotes(builder, applicableNotesOffset)
            addCgn(builder, cgnOffset)
            addCgc(builder, cgcOffset)
            addPieces(builder, pieces)
            addUnNum(builder, unNumOffset)
            addItemName(builder, itemNameOffset)
            addExtHazMatId(builder, extHazMatIdOffset)
            return endAirTransportMissionHazMat_Ingest(builder)
        }
        fun startAirTransportMissionHazMat_Ingest(builder: FlatBufferBuilder) = builder.startTable(15)
        fun addExtHazMatId(builder: FlatBufferBuilder, extHazMatId: Int) = builder.addOffset(0, extHazMatId, 0)
        fun addItemName(builder: FlatBufferBuilder, itemName: Int) = builder.addOffset(1, itemName, 0)
        fun addUnNum(builder: FlatBufferBuilder, unNum: Int) = builder.addOffset(2, unNum, 0)
        fun addPieces(builder: FlatBufferBuilder, pieces: Int) = builder.addInt(3, pieces, 0)
        fun addWeight(builder: FlatBufferBuilder, weight: Double) = builder.addDouble(4, weight, 0.0)
        fun addNetExpWt(builder: FlatBufferBuilder, netExpWt: Double) = builder.addDouble(5, netExpWt, 0.0)
        fun addClassDiv(builder: FlatBufferBuilder, classDiv: Double) = builder.addDouble(6, classDiv, 0.0)
        fun addCgc(builder: FlatBufferBuilder, cgc: Int) = builder.addOffset(7, cgc, 0)
        fun addCgn(builder: FlatBufferBuilder, cgn: Int) = builder.addOffset(8, cgn, 0)
        fun addApplicableNotes(builder: FlatBufferBuilder, applicableNotes: Int) = builder.addOffset(9, applicableNotes, 0)
        fun addOnItin(builder: FlatBufferBuilder, onItin: Int) = builder.addInt(10, onItin, 0)
        fun addOnICAO(builder: FlatBufferBuilder, onIcao: Int) = builder.addOffset(11, onIcao, 0)
        fun addOffItin(builder: FlatBufferBuilder, offItin: Int) = builder.addInt(12, offItin, 0)
        fun addOffICAO(builder: FlatBufferBuilder, offIcao: Int) = builder.addOffset(13, offIcao, 0)
        fun addPlanned(builder: FlatBufferBuilder, planned: Int) = builder.addOffset(14, planned, 0)
        fun endAirTransportMissionHazMat_Ingest(builder: FlatBufferBuilder) : Int {
            val o = builder.endTable()
            return o
        }
        fun finishAirTransportMissionHazMatIngestBuffer(builder: FlatBufferBuilder, offset: Int) = builder.finish(offset, "AIRT")
        fun finishSizePrefixedAirTransportMissionHazMat_IngestBuffer(builder: FlatBufferBuilder, offset: Int) = builder.finishSizePrefixed(offset, "AIRT")
    }
}
