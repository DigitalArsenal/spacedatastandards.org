// automatically generated by the FlatBuffers compiler, do not modify

import com.google.flatbuffers.BaseVector
import com.google.flatbuffers.BooleanVector
import com.google.flatbuffers.ByteVector
import com.google.flatbuffers.Constants
import com.google.flatbuffers.DoubleVector
import com.google.flatbuffers.FlatBufferBuilder
import com.google.flatbuffers.FloatVector
import com.google.flatbuffers.LongVector
import com.google.flatbuffers.StringVector
import com.google.flatbuffers.Struct
import com.google.flatbuffers.Table
import com.google.flatbuffers.UnionVector
import java.nio.ByteBuffer
import java.nio.ByteOrder
import kotlin.math.sign

/**
 * /// On-orbit spacecraft details compiled by Seradata for a particular satellite.
 */
@Suppress("unused")
class SeradataSpacecraftDetails_Full : Table() {

    fun __init(_i: Int, _bb: ByteBuffer)  {
        __reset(_i, _bb)
    }
    fun __assign(_i: Int, _bb: ByteBuffer) : SeradataSpacecraftDetails_Full {
        __init(_i, _bb)
        return this
    }
    /**
     * Unique identifier of the record, auto-generated by the system.
     * Example: /// Example: SERADATASPACECRAFTDETAILS-ID
     * Constraints: Minimum length = 1, Maximum length = 36
     */
    val id : String?
        get() {
            val o = __offset(4)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val idAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(4, 1)
    fun idInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 4, 1)
    /**
     * UUID of the parent Onorbit record, if available.
     * Example: /// Example: 503
     * Constraints: Minimum length = 0, Maximum length = 36
     */
    val idOnOrbit : String?
        get() {
            val o = __offset(6)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val idOnOrbitAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(6, 1)
    fun idOnOrbitInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 6, 1)
    /**
     * Classification marking of the data in IC/CAPCO Portion-marked format.
     * Example: /// Example: U
     * Constraints: Minimum length = 1, Maximum length = 128
     */
    val classificationMarking : String?
        get() {
            val o = __offset(8)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val classificationMarkingAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(8, 1)
    fun classificationMarkingInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 8, 1)
    /**
     * Spacecraft name.
     * Example: /// Example: name
     * Constraints: Minimum length = 1, Maximum length = 64
     */
    val name : String?
        get() {
            val o = __offset(10)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val nameAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(10, 1)
    fun nameInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 10, 1)
    /**
     * Description associated with the spacecraft.
     * Example: /// Example: description
     * Constraints: Minimum length = 0, Maximum length = 2147483647
     */
    val description : String?
        get() {
            val o = __offset(12)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val descriptionAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(12, 1)
    fun descriptionInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 12, 1)
    /**
     * Seradata international number.
     * Example: /// Example: number
     * Constraints: Minimum length = 0, Maximum length = 16
     */
    val intlNumber : String?
        get() {
            val o = __offset(14)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val intlNumberAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(14, 1)
    fun intlNumberInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 14, 1)
    /**
     * Seradata sector (e.g. Commercial, Military, Civil/Other).
     * Example: /// Example: Commercial
     * Constraints: Minimum length = 0, Maximum length = 16
     */
    val sector : String?
        get() {
            val o = __offset(16)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val sectorAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(16, 1)
    fun sectorInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 16, 1)
    /**
     * Apogee in km.
     * Example: /// Example: 1.23
     * Constraints: No constraints specified.
     */
    val apogee : Double
        get() {
            val o = __offset(18)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Perigee in km.
     * Example: /// Example: 1.23
     * Constraints: No constraints specified.
     */
    val perigee : Double
        get() {
            val o = __offset(20)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Spacecraft period in minutes.
     * Example: /// Example: 1.23
     * Constraints: No constraints specified.
     */
    val period : Double
        get() {
            val o = __offset(22)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Seradata provided inclination in degrees.
     * Example: /// Example: 1.23
     * Constraints: No constraints specified.
     */
    val inclination : Double
        get() {
            val o = __offset(24)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * UUID of the prime manufacturer organization, if available.
     * Example: /// Example: 05c43360-382e-4aa2-b875-ed28945ff2e5
     * Constraints: Minimum length = 0, Maximum length = 36
     */
    val primeManufacturerOrgId : String?
        get() {
            val o = __offset(26)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val primeManufacturerOrgIdAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(26, 1)
    fun primeManufacturerOrgIdInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 26, 1)
    /**
     * Spacecraft stabilizer (e.g. 3-Axis, Gravity Gradiant, etc).
     * Example: /// Example: 3-Axis
     * Constraints: Minimum length = 0, Maximum length = 32
     */
    val stabilizer : String?
        get() {
            val o = __offset(28)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val stabilizerAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(28, 1)
    fun stabilizerInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 28, 1)
    /**
     * Spacecraft design life in days.
     * Example: /// Example: 231
     * Constraints: No constraints specified.
     */
    val designLife : Int
        get() {
            val o = __offset(30)
            return if(o != 0) bb.getInt(o + bb_pos) else 0
        }
    /**
     * Spacecraft expected life in days.
     * Example: /// Example: 231
     * Constraints: No constraints specified.
     */
    val expectedLife : Int
        get() {
            val o = __offset(32)
            return if(o != 0) bb.getInt(o + bb_pos) else 0
        }
    /**
     * Boolean indicating if the spacecraft was insured at launch.
     * Example: /// Example: True
     * Constraints: No constraints specified.
     */
    val insuredAtLaunch : Boolean
        get() {
            val o = __offset(34)
            return if(o != 0) 0.toByte() != bb.get(o + bb_pos) else false
        }
    /**
     * Mass at launch in kg.
     * Example: /// Example: 1.23
     * Constraints: No constraints specified.
     */
    val launchMass : Double
        get() {
            val o = __offset(36)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Mass dry in kg.
     * Example: /// Example: 1.23
     * Constraints: No constraints specified.
     */
    val dryMass : Double
        get() {
            val o = __offset(38)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * NORAD satellite number if available.
     * Example: /// Example: 1
     * Constraints: No constraints specified.
     */
    val catalogNumber : Int
        get() {
            val o = __offset(40)
            return if(o != 0) bb.getInt(o + bb_pos) else 0
        }
    /**
     * Mass dry in kg.
     * Example: /// Example: 1.23
     * Constraints: No constraints specified.
     */
    val totalPayloadPower : Double
        get() {
            val o = __offset(42)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Spacecraft constellation.
     * Example: /// Example: GPS
     * Constraints: Minimum length = 0, Maximum length = 64
     */
    val constellation : String?
        get() {
            val o = __offset(44)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val constellationAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(44, 1)
    fun constellationInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 44, 1)
    /**
     * Spacecraft orbit category (e.g GEO, LEO, etc).
     * Example: /// Example: GEO
     * Constraints: Minimum length = 0, Maximum length = 64
     */
    val orbitCategory : String?
        get() {
            val o = __offset(46)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val orbitCategoryAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(46, 1)
    fun orbitCategoryInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 46, 1)
    /**
     * Spacecraft sub orbit category (e.g LEO - Sun-synchronous, Geostationary, etc).
     * Example: /// Example: Geostationary
     * Constraints: Minimum length = 0, Maximum length = 64
     */
    val orbitSubCategory : String?
        get() {
            val o = __offset(48)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val orbitSubCategoryAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(48, 1)
    fun orbitSubCategoryInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 48, 1)
    /**
     * Cost of launch in M USD.
     * Example: /// Example: 1.23
     * Constraints: No constraints specified.
     */
    val launchCost : Double
        get() {
            val o = __offset(50)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Boolean indicating if the spacecraft launch cost is estimated.
     * Example: /// Example: True
     * Constraints: No constraints specified.
     */
    val launchCostEstimated : Boolean
        get() {
            val o = __offset(52)
            return if(o != 0) 0.toByte() != bb.get(o + bb_pos) else false
        }
    /**
     * Boolean indicating if the spacecraft cost is estimated.
     * Example: /// Example: True
     * Constraints: No constraints specified.
     */
    val costEstimated : Boolean
        get() {
            val o = __offset(54)
            return if(o != 0) 0.toByte() != bb.get(o + bb_pos) else false
        }
    /**
     * Cost of spacecraft at new in M USD.
     * Example: /// Example: 1.23
     * Constraints: No constraints specified.
     */
    val newCost : Double
        get() {
            val o = __offset(56)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Combined cost of spacecraft at new in M USD.
     * Example: /// Example: 1.23
     * Constraints: No constraints specified.
     */
    val combinedNewCost : Double
        get() {
            val o = __offset(58)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Boolean indicating if the spacecraft combined new cost is estimated.
     * Example: /// Example: True
     * Constraints: No constraints specified.
     */
    val combinedCostEstimated : Boolean
        get() {
            val o = __offset(60)
            return if(o != 0) 0.toByte() != bb.get(o + bb_pos) else false
        }
    /**
     * Insured value of spacecraft at launch in M USD.
     * Example: /// Example: 1.23
     * Constraints: No constraints specified.
     */
    val insuredValueAtLaunch : Double
        get() {
            val o = __offset(62)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Boolean indicating if the spacecraft insured value at launch is estimated.
     * Example: /// Example: True
     * Constraints: No constraints specified.
     */
    val insuredValueLaunchEstimated : Boolean
        get() {
            val o = __offset(64)
            return if(o != 0) 0.toByte() != bb.get(o + bb_pos) else false
        }
    /**
     * Annual insured depreciaion factor as a percent fraction.
     * Example: /// Example: 1.23
     * Constraints: No constraints specified.
     */
    val annualInsuredDepreciationFactor : Double
        get() {
            val o = __offset(66)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Boolean indicating if the spacecraft annualInsuredDepreciationFactor is estimated.
     * Example: /// Example: True
     * Constraints: No constraints specified.
     */
    val annualInsuredDepreciationFactorEstimated : Boolean
        get() {
            val o = __offset(68)
            return if(o != 0) 0.toByte() != bb.get(o + bb_pos) else false
        }
    /**
     * Insurance premium at launch in M USD.
     * Example: /// Example: 1.23
     * Constraints: No constraints specified.
     */
    val insurancePremiumAtLaunch : Double
        get() {
            val o = __offset(70)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Boolean indicating if the spacecraft insurancePremiumAtLaunch is estimated.
     * Example: /// Example: True
     * Constraints: No constraints specified.
     */
    val insurancePremiumAtLaunchEstimated : Boolean
        get() {
            val o = __offset(72)
            return if(o != 0) 0.toByte() != bb.get(o + bb_pos) else false
        }
    /**
     * Number of humans carried on spacecraft.
     * Example: /// Example: 1
     * Constraints: No constraints specified.
     */
    val numHumans : Int
        get() {
            val o = __offset(74)
            return if(o != 0) bb.getInt(o + bb_pos) else 0
        }
    /**
     * Cubesat dispenser type.
     * Example: /// Example: cubesatDispenserType
     * Constraints: Minimum length = 0, Maximum length = 64
     */
    val cubesatDispenserType : String?
        get() {
            val o = __offset(76)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val cubesatDispenserTypeAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(76, 1)
    fun cubesatDispenserTypeInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 76, 1)
    /**
     * Mass category (e.g.  2500 - 3500kg  - Large Satellite, 10 - 100 kg - Microsatellite, etc).
     * Example: /// Example: 2500 - 3500kg  - Large Satellite
     * Constraints: Minimum length = 0, Maximum length = 64
     */
    val massCategory : String?
        get() {
            val o = __offset(78)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val massCategoryAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(78, 1)
    fun massCategoryInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 78, 1)
    /**
     * Seradata launch ID.
     * Example: /// Example: 11573
     * Constraints: Minimum length = 0, Maximum length = 32
     */
    val launchId : String?
        get() {
            val o = __offset(80)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val launchIdAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(80, 1)
    fun launchIdInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 80, 1)
    /**
     * Seradata launch ID.
     * Example: /// Example: 123
     * Constraints: Minimum length = 0, Maximum length = 36
     */
    val launchVehicleId : String?
        get() {
            val o = __offset(82)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val launchVehicleIdAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(82, 1)
    fun launchVehicleIdInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 82, 1)
    /**
     * Seradata launch vehicle family.
     * Example: /// Example: launchProviderFlightNumber
     * Constraints: Minimum length = 0, Maximum length = 64
     */
    val launchProviderFlightNumber : String?
        get() {
            val o = __offset(84)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val launchProviderFlightNumberAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(84, 1)
    fun launchProviderFlightNumberInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 84, 1)
    /**
     * Launch Site Name.
     * Example: /// Example: launchSiteName
     * Constraints: Minimum length = 0, Maximum length = 64
     */
    val launchSiteName : String?
        get() {
            val o = __offset(86)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val launchSiteNameAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(86, 1)
    fun launchSiteNameInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 86, 1)
    /**
     * Seradata Launch Site ID.
     * Example: /// Example: 28
     * Constraints: Minimum length = 0, Maximum length = 32
     */
    val launchSiteId : String?
        get() {
            val o = __offset(88)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val launchSiteIdAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(88, 1)
    fun launchSiteIdInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 88, 1)
    /**
     * Seradata launch country.
     * Example: /// Example: USA
     * Constraints: Minimum length = 0, Maximum length = 32
     */
    val launchCountry : String?
        get() {
            val o = __offset(90)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val launchCountryAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(90, 1)
    fun launchCountryInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 90, 1)
    /**
     * Seradata launch provider.
     * Example: /// Example: launchProvider
     * Constraints: Minimum length = 0, Maximum length = 128
     */
    val launchProvider : String?
        get() {
            val o = __offset(92)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val launchProviderAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(92, 1)
    fun launchProviderInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 92, 1)
    /**
     * Seradata launch provider country.
     * Example: /// Example: USA
     * Constraints: Minimum length = 0, Maximum length = 32
     */
    val launchProviderCountry : String?
        get() {
            val o = __offset(94)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val launchProviderCountryAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(94, 1)
    fun launchProviderCountryInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 94, 1)
    /**
     * Boolean indicating if the launch was commercial.
     * Example: /// Example: True
     * Constraints: No constraints specified.
     */
    val commercialLaunch : Boolean
        get() {
            val o = __offset(96)
            return if(o != 0) 0.toByte() != bb.get(o + bb_pos) else false
        }
    /**
     * Seradata launch type (e.g. Launched, Future, etc).
     * Example: /// Example: Future
     * Constraints: Minimum length = 0, Maximum length = 32
     */
    val launchType : String?
        get() {
            val o = __offset(98)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val launchTypeAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(98, 1)
    fun launchTypeInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 98, 1)
    /**
     * Seradata launch characteristic (e.g. Expendable, Reusable (New), etc).
     * Example: /// Example: Expendable
     * Constraints: Minimum length = 0, Maximum length = 64
     */
    val launchCharacteristic : String?
        get() {
            val o = __offset(100)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val launchCharacteristicAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(100, 1)
    fun launchCharacteristicInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 100, 1)
    /**
     * Seradata launch number.
     * Example: /// Example: FN040
     * Constraints: Minimum length = 0, Maximum length = 16
     */
    val launchNumber : String?
        get() {
            val o = __offset(102)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val launchNumberAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(102, 1)
    fun launchNumberInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 102, 1)
    /**
     * Launch date.
     * Example: /// Example: 2018-01-01T16:00:00.123Z
     * Constraints: No constraints specified.
     */
    val launchDate : String?
        get() {
            val o = __offset(104)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val launchDateAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(104, 1)
    fun launchDateInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 104, 1)
    /**
     * Seradata remarks on launch date.
     * Example: /// Example: launchDateRemarks
     * Constraints: Minimum length = 0, Maximum length = 64
     */
    val launchDateRemarks : String?
        get() {
            val o = __offset(106)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val launchDateRemarksAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(106, 1)
    fun launchDateRemarksInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 106, 1)
    /**
     * Youtube link of launch.
     * Example: /// Example: youtubeLaunchLink
     * Constraints: Minimum length = 0, Maximum length = 32
     */
    val youtubeLaunchLink : String?
        get() {
            val o = __offset(108)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val youtubeLaunchLinkAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(108, 1)
    fun youtubeLaunchLinkInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 108, 1)
    /**
     * Spacecraft status (e.g. Inactive - Retired, Inactive - Re-entered, Active, etc).
     * Example: /// Example: Inactive - Retired
     * Constraints: Minimum length = 0, Maximum length = 64
     */
    val status : String?
        get() {
            val o = __offset(110)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val statusAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(110, 1)
    fun statusInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 110, 1)
    /**
     * Spacecraft owner name.
     * Example: /// Example: owner
     * Constraints: Minimum length = 0, Maximum length = 128
     */
    val owner : String?
        get() {
            val o = __offset(112)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val ownerAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(112, 1)
    fun ownerInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 112, 1)
    /**
     * Spacecraft owner country.
     * Example: /// Example: USA
     * Constraints: Minimum length = 0, Maximum length = 64
     */
    val ownerCountry : String?
        get() {
            val o = __offset(114)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val ownerCountryAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(114, 1)
    fun ownerCountryInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 114, 1)
    /**
     * Spacecraft operator name.
     * Example: /// Example: operator
     * Constraints: Minimum length = 0, Maximum length = 128
     */
    val operator : String?
        get() {
            val o = __offset(116)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val operatorAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(116, 1)
    fun operatorInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 116, 1)
    /**
     * Spacecraft operator country.
     * Example: /// Example: USA
     * Constraints: Minimum length = 0, Maximum length = 64
     */
    val operatorCountry : String?
        get() {
            val o = __offset(118)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val operatorCountryAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(118, 1)
    fun operatorCountryInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 118, 1)
    /**
     * Boolean indicating if the spacecraft was leased.
     * Example: /// Example: True
     * Constraints: No constraints specified.
     */
    val leased : Boolean
        get() {
            val o = __offset(120)
            return if(o != 0) 0.toByte() != bb.get(o + bb_pos) else false
        }
    /**
     * Spacecraft order date.
     * Example: /// Example: 2018-01-01T16:00:00.123Z
     * Constraints: No constraints specified.
     */
    val orderDate : String?
        get() {
            val o = __offset(122)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val orderDateAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(122, 1)
    fun orderDateInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 122, 1)
    /**
     * Total capability lost as a percent fraction.
     * Example: /// Example: 1.23
     * Constraints: No constraints specified.
     */
    val capabilityLost : Double
        get() {
            val o = __offset(124)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Total capacity lost as a percent fraction.
     * Example: /// Example: 1.23
     * Constraints: No constraints specified.
     */
    val capacityLost : Double
        get() {
            val o = __offset(126)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Spacecraft primary mission and group.
     * Example: /// Example: primaryMissionGroup
     * Constraints: Minimum length = 0, Maximum length = 64
     */
    val primaryMissionGroup : String?
        get() {
            val o = __offset(128)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val primaryMissionGroupAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(128, 1)
    fun primaryMissionGroupInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 128, 1)
    /**
     * Spacecraft additional missions and groups.
     * Example: /// Example: additionalMissionsGroups
     * Constraints: Minimum length = 0, Maximum length = 256
     */
    val additionalMissionsGroups : String?
        get() {
            val o = __offset(130)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val additionalMissionsGroupsAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(130, 1)
    fun additionalMissionsGroupsInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 130, 1)
    /**
     * Number of insurance claims for this spacecraft.
     * Example: /// Example: 1
     * Constraints: No constraints specified.
     */
    val totalClaims : Int
        get() {
            val o = __offset(132)
            return if(o != 0) bb.getInt(o + bb_pos) else 0
        }
    /**
     * Number of injuries related to this spacecraft.
     * Example: /// Example: 1
     * Constraints: No constraints specified.
     */
    val totalInjuries : Int
        get() {
            val o = __offset(134)
            return if(o != 0) bb.getInt(o + bb_pos) else 0
        }
    /**
     * Number of fatalities related to this spacecraft.
     * Example: /// Example: 1
     * Constraints: No constraints specified.
     */
    val totalFatalities : Int
        get() {
            val o = __offset(136)
            return if(o != 0) bb.getInt(o + bb_pos) else 0
        }
    /**
     * Spacecraft name at launch.
     * Example: /// Example: nameAtLaunch
     * Constraints: Minimum length = 0, Maximum length = 64
     */
    val nameAtLaunch : String?
        get() {
            val o = __offset(138)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val nameAtLaunchAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(138, 1)
    fun nameAtLaunchInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 138, 1)
    /**
     * Spacecraft Bus ID.
     * Example: /// Example: BUS-ID
     * Constraints: Minimum length = 0, Maximum length = 36
     */
    val busId : String?
        get() {
            val o = __offset(140)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val busIdAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(140, 1)
    fun busIdInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 140, 1)
    /**
     * Current age in years.
     * Example: /// Example: 5.898630136986301
     * Constraints: No constraints specified.
     */
    val currentAge : Double
        get() {
            val o = __offset(142)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Spacecraft life lost as a percent fraction.
     * Example: /// Example: 1.23
     * Constraints: No constraints specified.
     */
    val lifeLost : Double
        get() {
            val o = __offset(144)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * WGS84 longitude of the spacecraft’s latest GEO position, in degrees. -180 to 180 degrees (negative values west of Prime Meridian).
     * Example: /// Example: -8.23
     * Constraints: No constraints specified.
     */
    val geoPosition : Double
        get() {
            val o = __offset(146)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Spacecraft total insurance losses as a fraction.
     * Example: /// Example: 0.393
     * Constraints: No constraints specified.
     */
    val insuranceLossesTotal : Double
        get() {
            val o = __offset(148)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Spacecraft launch arranger.
     * Example: /// Example: launchArranger
     * Constraints: Minimum length = 0, Maximum length = 64
     */
    val launchArranger : String?
        get() {
            val o = __offset(150)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val launchArrangerAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(150, 1)
    fun launchArrangerInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 150, 1)
    /**
     * Spacecraft launch arranger country.
     * Example: /// Example: USA
     * Constraints: Minimum length = 0, Maximum length = 64
     */
    val launchArrangerCountry : String?
        get() {
            val o = __offset(152)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val launchArrangerCountryAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(152, 1)
    fun launchArrangerCountryInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 152, 1)
    /**
     * Spacecraft serial number.
     * Example: /// Example: serialNumber
     * Constraints: Minimum length = 0, Maximum length = 64
     */
    val serialNumber : String?
        get() {
            val o = __offset(154)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val serialNumberAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(154, 1)
    fun serialNumberInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 154, 1)
    /**
     * Spacecraft program name.
     * Example: /// Example: programName
     * Constraints: Minimum length = 0, Maximum length = 64
     */
    val programName : String?
        get() {
            val o = __offset(156)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val programNameAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(156, 1)
    fun programNameInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 156, 1)
    /**
     * Spacecraft reused hull name.
     * Example: /// Example: reusedHullName
     * Constraints: Minimum length = 0, Maximum length = 64
     */
    val reusedHullName : String?
        get() {
            val o = __offset(158)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val reusedHullNameAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(158, 1)
    fun reusedHullNameInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 158, 1)
    /**
     * Spacecraft date of observation.
     * Example: /// Example: 2018-01-01T16:00:00.123Z
     * Constraints: No constraints specified.
     */
    val dateOfObservation : String?
        get() {
            val o = __offset(160)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val dateOfObservationAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(160, 1)
    fun dateOfObservationInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 160, 1)
    /**
     * Spacecraft latest latitude in degrees.
     * Example: /// Example: 1.23
     * Constraints: No constraints specified.
     */
    val lat : Double
        get() {
            val o = __offset(162)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Spacecraft latest longitude in degrees.
     * Example: /// Example: 1.23
     * Constraints: No constraints specified.
     */
    val lon : Double
        get() {
            val o = __offset(164)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Spacecraft latest altitude in km.
     * Example: /// Example: 36036.6330576414
     * Constraints: No constraints specified.
     */
    val altitude : Double
        get() {
            val o = __offset(166)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Spacecraft collision risk 1mm sqm latest.
     * Example: /// Example: 1.33
     * Constraints: No constraints specified.
     */
    val collisionRiskMm : Double
        get() {
            val o = __offset(168)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Spacecraft collision risk 1cm sqm latest.
     * Example: /// Example: 1.43
     * Constraints: No constraints specified.
     */
    val collisionRiskCm : Double
        get() {
            val o = __offset(170)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Spacecraft quantity.
     * Example: /// Example: 1
     * Constraints: No constraints specified.
     */
    val quantity : Int
        get() {
            val o = __offset(172)
            return if(o != 0) bb.getInt(o + bb_pos) else 0
        }
    /**
     * Spacecraft reusable flights.
     * Example: /// Example: reusableFlights
     * Constraints: Minimum length = 0, Maximum length = 64
     */
    val reusableFlights : String?
        get() {
            val o = __offset(174)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val reusableFlightsAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(174, 1)
    fun reusableFlightsInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 174, 1)
    /**
     * Notes on the spacecraft.
     * Example: /// Example: Sample Notes
     * Constraints: Minimum length = 0, Maximum length = 2147483647
     */
    val notes : String?
        get() {
            val o = __offset(176)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val notesAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(176, 1)
    fun notesInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 176, 1)
    /**
     * Insurance notes for the spacecraft.
     * Example: /// Example: Sample Notes
     * Constraints: Minimum length = 0, Maximum length = 2147483647
     */
    val insuranceNotes : String?
        get() {
            val o = __offset(178)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val insuranceNotesAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(178, 1)
    fun insuranceNotesInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 178, 1)
    /**
     * Insurance notes for the spacecraft.
     * Example: /// Example: Sample Notes
     * Constraints: Minimum length = 0, Maximum length = 2147483647
     */
    val launchNotes : String?
        get() {
            val o = __offset(180)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val launchNotesAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(180, 1)
    fun launchNotesInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 180, 1)
    /**
     * Source of the data.
     * Example: /// Example: Bluestaq
     * Constraints: Minimum length = 1, Maximum length = 64
     */
    val source : String?
        get() {
            val o = __offset(182)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val sourceAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(182, 1)
    fun sourceInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 182, 1)
    /**
     * Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
     * Example: /// Example: THIRD_PARTY_DATASOURCE
     * Constraints: Minimum length = 0, Maximum length = 64
     */
    val origin : String?
        get() {
            val o = __offset(184)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val originAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(184, 1)
    fun originInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 184, 1)
    /**
     * The originating source network on which this record was created, auto-populated by the system.
     * Example: /// Example: ORIG
     * Constraints: Minimum length = 1, Maximum length = 32
     */
    val origNetwork : String?
        get() {
            val o = __offset(186)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val origNetworkAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(186, 1)
    fun origNetworkInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 186, 1)
    /**
     * Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
     * EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
     * REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
     * SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
     * TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
     * Example: /// Example: TEST
     * Constraints: Minimum length = 1, Maximum length = 32
     */
    val dataMode : Byte
        get() {
            val o = __offset(188)
            return if(o != 0) bb.get(o + bb_pos) else 0
        }
    /**
     * Time the row was created in the database, auto-populated by the system.
     * Example: /// Example: 2018-01-01T16:00:00.123Z
     * Constraints: No constraints specified.
     */
    val createdAt : String?
        get() {
            val o = __offset(190)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val createdAtAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(190, 1)
    fun createdAtInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 190, 1)
    /**
     * Application user who created the row in the database, auto-populated by the system.
     * Example: /// Example: some.user
     * Constraints: Minimum length = 1, Maximum length = 64
     */
    val createdBy : String?
        get() {
            val o = __offset(192)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val createdByAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(192, 1)
    fun createdByInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 192, 1)
    /**
     * Time the row was last updated in the database, auto-populated by the system.
     * Example: /// Example: 2018-01-01T16:00:00.123Z
     * Constraints: No constraints specified.
     */
    val updatedAt : String?
        get() {
            val o = __offset(194)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val updatedAtAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(194, 1)
    fun updatedAtInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 194, 1)
    /**
     * Application user who updated the row in the database, auto-populated by the system.
     * Example: /// Example: some.user
     * Constraints: Minimum length = 1, Maximum length = 64
     */
    val updatedBy : String?
        get() {
            val o = __offset(196)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val updatedByAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(196, 1)
    fun updatedByInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 196, 1)
    /**
     * Read-only details of the SeradataSigIntPayload object, only used during detail queries (not to be provided on create/update operations).
     * Example: /// Example: No example provided.
     * Constraints: No constraints specified.
     */
    fun seradataSigIntPayload(j: Int) : String? {
        val o = __offset(198)
        return if (o != 0) {
            __string(__vector(o) + j * 4)
        } else {
            null
        }
    }
    val seradataSigIntPayloadLength : Int
        get() {
            val o = __offset(198); return if (o != 0) __vector_len(o) else 0
        }
    /**
     * Read-only details of the SeradataRadarPayload object, only used during detail queries (not to be provided on create/update operations).
     * Example: /// Example: No example provided.
     * Constraints: No constraints specified.
     */
    fun seradataRadarPayload(j: Int) : String? {
        val o = __offset(200)
        return if (o != 0) {
            __string(__vector(o) + j * 4)
        } else {
            null
        }
    }
    val seradataRadarPayloadLength : Int
        get() {
            val o = __offset(200); return if (o != 0) __vector_len(o) else 0
        }
    /**
     * Read-only details of the SeradataNavigation object, only used during detail queries (not to be provided on create/update operations).
     * Example: /// Example: No example provided.
     * Constraints: No constraints specified.
     */
    fun seradataNavigation(j: Int) : String? {
        val o = __offset(202)
        return if (o != 0) {
            __string(__vector(o) + j * 4)
        } else {
            null
        }
    }
    val seradataNavigationLength : Int
        get() {
            val o = __offset(202); return if (o != 0) __vector_len(o) else 0
        }
    /**
     * Read-only details of the SeradataOpticalPayload object, only used during detail queries (not to be provided on create/update operations).
     * Example: /// Example: No example provided.
     * Constraints: No constraints specified.
     */
    fun seradataOpticalPayload(j: Int) : String? {
        val o = __offset(204)
        return if (o != 0) {
            __string(__vector(o) + j * 4)
        } else {
            null
        }
    }
    val seradataOpticalPayloadLength : Int
        get() {
            val o = __offset(204); return if (o != 0) __vector_len(o) else 0
        }
    /**
     * Read-only details of the SeradataEarlyWarning object, only used during detail queries (not to be provided on create/update operations).
     * Example: /// Example: No example provided.
     * Constraints: No constraints specified.
     */
    fun seradataEarlyWarning(j: Int) : String? {
        val o = __offset(206)
        return if (o != 0) {
            __string(__vector(o) + j * 4)
        } else {
            null
        }
    }
    val seradataEarlyWarningLength : Int
        get() {
            val o = __offset(206); return if (o != 0) __vector_len(o) else 0
        }
    /**
     * Read-only details of the Scientific object, only used during detail queries (not to be provided on create/update operations).
     * Example: /// Example: No example provided.
     * Constraints: No constraints specified.
     */
    fun scientific(j: Int) : String? {
        val o = __offset(208)
        return if (o != 0) {
            __string(__vector(o) + j * 4)
        } else {
            null
        }
    }
    val scientificLength : Int
        get() {
            val o = __offset(208); return if (o != 0) __vector_len(o) else 0
        }
    /**
     * Read-only details of the SeradataCommDetails object, only used during detail queries (not to be provided on create/update operations).
     * Example: /// Example: No example provided.
     * Constraints: No constraints specified.
     */
    fun seradataCommDetails(j: Int) : String? {
        val o = __offset(210)
        return if (o != 0) {
            __string(__vector(o) + j * 4)
        } else {
            null
        }
    }
    val seradataCommDetailsLength : Int
        get() {
            val o = __offset(210); return if (o != 0) __vector_len(o) else 0
        }
    /**
     * No description provided.
     * Example: /// Example: No example provided.
     * Constraints: No constraints specified.
     */
    val onOrbit : String?
        get() {
            val o = __offset(212)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val onOrbitAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(212, 1)
    fun onOrbitInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 212, 1)
    companion object {
        fun validateVersion() = Constants.FLATBUFFERS_24_3_25()
        fun getRootAsSeradataSpacecraftDetails_Full(_bb: ByteBuffer): SeradataSpacecraftDetails_Full = getRootAsSeradataSpacecraftDetails_Full(_bb, SeradataSpacecraftDetails_Full())
        fun getRootAsSeradataSpacecraftDetails_Full(_bb: ByteBuffer, obj: SeradataSpacecraftDetails_Full): SeradataSpacecraftDetails_Full {
            _bb.order(ByteOrder.LITTLE_ENDIAN)
            return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb))
        }
        fun SeradataSpacecraftDetails_FullBufferHasIdentifier(_bb: ByteBuffer) : Boolean = __has_identifier(_bb, "SERA")
        fun createSeradataSpacecraftDetails_Full(builder: FlatBufferBuilder, idOffset: Int, idOnOrbitOffset: Int, classificationMarkingOffset: Int, nameOffset: Int, descriptionOffset: Int, intlNumberOffset: Int, sectorOffset: Int, apogee: Double, perigee: Double, period: Double, inclination: Double, primeManufacturerOrgIdOffset: Int, stabilizerOffset: Int, designLife: Int, expectedLife: Int, insuredAtLaunch: Boolean, launchMass: Double, dryMass: Double, catalogNumber: Int, totalPayloadPower: Double, constellationOffset: Int, orbitCategoryOffset: Int, orbitSubCategoryOffset: Int, launchCost: Double, launchCostEstimated: Boolean, costEstimated: Boolean, newCost: Double, combinedNewCost: Double, combinedCostEstimated: Boolean, insuredValueAtLaunch: Double, insuredValueLaunchEstimated: Boolean, annualInsuredDepreciationFactor: Double, annualInsuredDepreciationFactorEstimated: Boolean, insurancePremiumAtLaunch: Double, insurancePremiumAtLaunchEstimated: Boolean, numHumans: Int, cubesatDispenserTypeOffset: Int, massCategoryOffset: Int, launchIdOffset: Int, launchVehicleIdOffset: Int, launchProviderFlightNumberOffset: Int, launchSiteNameOffset: Int, launchSiteIdOffset: Int, launchCountryOffset: Int, launchProviderOffset: Int, launchProviderCountryOffset: Int, commercialLaunch: Boolean, launchTypeOffset: Int, launchCharacteristicOffset: Int, launchNumberOffset: Int, launchDateOffset: Int, launchDateRemarksOffset: Int, youtubeLaunchLinkOffset: Int, statusOffset: Int, ownerOffset: Int, ownerCountryOffset: Int, operatorOffset: Int, operatorCountryOffset: Int, leased: Boolean, orderDateOffset: Int, capabilityLost: Double, capacityLost: Double, primaryMissionGroupOffset: Int, additionalMissionsGroupsOffset: Int, totalClaims: Int, totalInjuries: Int, totalFatalities: Int, nameAtLaunchOffset: Int, busIdOffset: Int, currentAge: Double, lifeLost: Double, geoPosition: Double, insuranceLossesTotal: Double, launchArrangerOffset: Int, launchArrangerCountryOffset: Int, serialNumberOffset: Int, programNameOffset: Int, reusedHullNameOffset: Int, dateOfObservationOffset: Int, lat: Double, lon: Double, altitude: Double, collisionRiskMm: Double, collisionRiskCm: Double, quantity: Int, reusableFlightsOffset: Int, notesOffset: Int, insuranceNotesOffset: Int, launchNotesOffset: Int, sourceOffset: Int, originOffset: Int, origNetworkOffset: Int, dataMode: Byte, createdAtOffset: Int, createdByOffset: Int, updatedAtOffset: Int, updatedByOffset: Int, seradataSigIntPayloadOffset: Int, seradataRadarPayloadOffset: Int, seradataNavigationOffset: Int, seradataOpticalPayloadOffset: Int, seradataEarlyWarningOffset: Int, scientificOffset: Int, seradataCommDetailsOffset: Int, onOrbitOffset: Int) : Int {
            builder.startTable(105)
            addCollisionRiskCM(builder, collisionRiskCm)
            addCollisionRiskMM(builder, collisionRiskMm)
            addAltitude(builder, altitude)
            addLon(builder, lon)
            addLat(builder, lat)
            addInsuranceLossesTotal(builder, insuranceLossesTotal)
            addGeoPosition(builder, geoPosition)
            addLifeLost(builder, lifeLost)
            addCurrentAge(builder, currentAge)
            addCapacityLost(builder, capacityLost)
            addCapabilityLost(builder, capabilityLost)
            addInsurancePremiumAtLaunch(builder, insurancePremiumAtLaunch)
            addAnnualInsuredDepreciationFactor(builder, annualInsuredDepreciationFactor)
            addInsuredValueAtLaunch(builder, insuredValueAtLaunch)
            addCombinedNewCost(builder, combinedNewCost)
            addNewCost(builder, newCost)
            addLaunchCost(builder, launchCost)
            addTotalPayloadPower(builder, totalPayloadPower)
            addDryMass(builder, dryMass)
            addLaunchMass(builder, launchMass)
            addInclination(builder, inclination)
            addPeriod(builder, period)
            addPerigee(builder, perigee)
            addApogee(builder, apogee)
            addOnOrbit(builder, onOrbitOffset)
            addSeradataCommDetails(builder, seradataCommDetailsOffset)
            addScientific(builder, scientificOffset)
            addSeradataEarlyWarning(builder, seradataEarlyWarningOffset)
            addSeradataOpticalPayload(builder, seradataOpticalPayloadOffset)
            addSeradataNavigation(builder, seradataNavigationOffset)
            addSeradataRadarPayload(builder, seradataRadarPayloadOffset)
            addSeradataSigIntPayload(builder, seradataSigIntPayloadOffset)
            addUpdatedBy(builder, updatedByOffset)
            addUpdatedAt(builder, updatedAtOffset)
            addCreatedBy(builder, createdByOffset)
            addCreatedAt(builder, createdAtOffset)
            addOrigNetwork(builder, origNetworkOffset)
            addOrigin(builder, originOffset)
            addSource(builder, sourceOffset)
            addLaunchNotes(builder, launchNotesOffset)
            addInsuranceNotes(builder, insuranceNotesOffset)
            addNotes(builder, notesOffset)
            addReusableFlights(builder, reusableFlightsOffset)
            addQuantity(builder, quantity)
            addDateOfObservation(builder, dateOfObservationOffset)
            addReusedHullName(builder, reusedHullNameOffset)
            addProgramName(builder, programNameOffset)
            addSerialNumber(builder, serialNumberOffset)
            addLaunchArrangerCountry(builder, launchArrangerCountryOffset)
            addLaunchArranger(builder, launchArrangerOffset)
            addBusId(builder, busIdOffset)
            addNameAtLaunch(builder, nameAtLaunchOffset)
            addTotalFatalities(builder, totalFatalities)
            addTotalInjuries(builder, totalInjuries)
            addTotalClaims(builder, totalClaims)
            addAdditionalMissionsGroups(builder, additionalMissionsGroupsOffset)
            addPrimaryMissionGroup(builder, primaryMissionGroupOffset)
            addOrderDate(builder, orderDateOffset)
            addOperatorCountry(builder, operatorCountryOffset)
            addOperator(builder, operatorOffset)
            addOwnerCountry(builder, ownerCountryOffset)
            addOwner(builder, ownerOffset)
            addStatus(builder, statusOffset)
            addYoutubeLaunchLink(builder, youtubeLaunchLinkOffset)
            addLaunchDateRemarks(builder, launchDateRemarksOffset)
            addLaunchDate(builder, launchDateOffset)
            addLaunchNumber(builder, launchNumberOffset)
            addLaunchCharacteristic(builder, launchCharacteristicOffset)
            addLaunchType(builder, launchTypeOffset)
            addLaunchProviderCountry(builder, launchProviderCountryOffset)
            addLaunchProvider(builder, launchProviderOffset)
            addLaunchCountry(builder, launchCountryOffset)
            addLaunchSiteId(builder, launchSiteIdOffset)
            addLaunchSiteName(builder, launchSiteNameOffset)
            addLaunchProviderFlightNumber(builder, launchProviderFlightNumberOffset)
            addLaunchVehicleId(builder, launchVehicleIdOffset)
            addLaunchId(builder, launchIdOffset)
            addMassCategory(builder, massCategoryOffset)
            addCubesatDispenserType(builder, cubesatDispenserTypeOffset)
            addNumHumans(builder, numHumans)
            addOrbitSubCategory(builder, orbitSubCategoryOffset)
            addOrbitCategory(builder, orbitCategoryOffset)
            addConstellation(builder, constellationOffset)
            addCatalogNumber(builder, catalogNumber)
            addExpectedLife(builder, expectedLife)
            addDesignLife(builder, designLife)
            addStabilizer(builder, stabilizerOffset)
            addPrimeManufacturerOrgId(builder, primeManufacturerOrgIdOffset)
            addSector(builder, sectorOffset)
            addIntlNumber(builder, intlNumberOffset)
            addDescription(builder, descriptionOffset)
            addName(builder, nameOffset)
            addClassificationMarking(builder, classificationMarkingOffset)
            addIdOnOrbit(builder, idOnOrbitOffset)
            addId(builder, idOffset)
            addDataMode(builder, dataMode)
            addLeased(builder, leased)
            addCommercialLaunch(builder, commercialLaunch)
            addInsurancePremiumAtLaunchEstimated(builder, insurancePremiumAtLaunchEstimated)
            addAnnualInsuredDepreciationFactorEstimated(builder, annualInsuredDepreciationFactorEstimated)
            addInsuredValueLaunchEstimated(builder, insuredValueLaunchEstimated)
            addCombinedCostEstimated(builder, combinedCostEstimated)
            addCostEstimated(builder, costEstimated)
            addLaunchCostEstimated(builder, launchCostEstimated)
            addInsuredAtLaunch(builder, insuredAtLaunch)
            return endSeradataSpacecraftDetails_Full(builder)
        }
        fun startSeradataSpacecraftDetails_Full(builder: FlatBufferBuilder) = builder.startTable(105)
        fun addId(builder: FlatBufferBuilder, id: Int) = builder.addOffset(0, id, 0)
        fun addIdOnOrbit(builder: FlatBufferBuilder, idOnOrbit: Int) = builder.addOffset(1, idOnOrbit, 0)
        fun addClassificationMarking(builder: FlatBufferBuilder, classificationMarking: Int) = builder.addOffset(2, classificationMarking, 0)
        fun addName(builder: FlatBufferBuilder, name: Int) = builder.addOffset(3, name, 0)
        fun addDescription(builder: FlatBufferBuilder, description: Int) = builder.addOffset(4, description, 0)
        fun addIntlNumber(builder: FlatBufferBuilder, intlNumber: Int) = builder.addOffset(5, intlNumber, 0)
        fun addSector(builder: FlatBufferBuilder, sector: Int) = builder.addOffset(6, sector, 0)
        fun addApogee(builder: FlatBufferBuilder, apogee: Double) = builder.addDouble(7, apogee, 0.0)
        fun addPerigee(builder: FlatBufferBuilder, perigee: Double) = builder.addDouble(8, perigee, 0.0)
        fun addPeriod(builder: FlatBufferBuilder, period: Double) = builder.addDouble(9, period, 0.0)
        fun addInclination(builder: FlatBufferBuilder, inclination: Double) = builder.addDouble(10, inclination, 0.0)
        fun addPrimeManufacturerOrgId(builder: FlatBufferBuilder, primeManufacturerOrgId: Int) = builder.addOffset(11, primeManufacturerOrgId, 0)
        fun addStabilizer(builder: FlatBufferBuilder, stabilizer: Int) = builder.addOffset(12, stabilizer, 0)
        fun addDesignLife(builder: FlatBufferBuilder, designLife: Int) = builder.addInt(13, designLife, 0)
        fun addExpectedLife(builder: FlatBufferBuilder, expectedLife: Int) = builder.addInt(14, expectedLife, 0)
        fun addInsuredAtLaunch(builder: FlatBufferBuilder, insuredAtLaunch: Boolean) = builder.addBoolean(15, insuredAtLaunch, false)
        fun addLaunchMass(builder: FlatBufferBuilder, launchMass: Double) = builder.addDouble(16, launchMass, 0.0)
        fun addDryMass(builder: FlatBufferBuilder, dryMass: Double) = builder.addDouble(17, dryMass, 0.0)
        fun addCatalogNumber(builder: FlatBufferBuilder, catalogNumber: Int) = builder.addInt(18, catalogNumber, 0)
        fun addTotalPayloadPower(builder: FlatBufferBuilder, totalPayloadPower: Double) = builder.addDouble(19, totalPayloadPower, 0.0)
        fun addConstellation(builder: FlatBufferBuilder, constellation: Int) = builder.addOffset(20, constellation, 0)
        fun addOrbitCategory(builder: FlatBufferBuilder, orbitCategory: Int) = builder.addOffset(21, orbitCategory, 0)
        fun addOrbitSubCategory(builder: FlatBufferBuilder, orbitSubCategory: Int) = builder.addOffset(22, orbitSubCategory, 0)
        fun addLaunchCost(builder: FlatBufferBuilder, launchCost: Double) = builder.addDouble(23, launchCost, 0.0)
        fun addLaunchCostEstimated(builder: FlatBufferBuilder, launchCostEstimated: Boolean) = builder.addBoolean(24, launchCostEstimated, false)
        fun addCostEstimated(builder: FlatBufferBuilder, costEstimated: Boolean) = builder.addBoolean(25, costEstimated, false)
        fun addNewCost(builder: FlatBufferBuilder, newCost: Double) = builder.addDouble(26, newCost, 0.0)
        fun addCombinedNewCost(builder: FlatBufferBuilder, combinedNewCost: Double) = builder.addDouble(27, combinedNewCost, 0.0)
        fun addCombinedCostEstimated(builder: FlatBufferBuilder, combinedCostEstimated: Boolean) = builder.addBoolean(28, combinedCostEstimated, false)
        fun addInsuredValueAtLaunch(builder: FlatBufferBuilder, insuredValueAtLaunch: Double) = builder.addDouble(29, insuredValueAtLaunch, 0.0)
        fun addInsuredValueLaunchEstimated(builder: FlatBufferBuilder, insuredValueLaunchEstimated: Boolean) = builder.addBoolean(30, insuredValueLaunchEstimated, false)
        fun addAnnualInsuredDepreciationFactor(builder: FlatBufferBuilder, annualInsuredDepreciationFactor: Double) = builder.addDouble(31, annualInsuredDepreciationFactor, 0.0)
        fun addAnnualInsuredDepreciationFactorEstimated(builder: FlatBufferBuilder, annualInsuredDepreciationFactorEstimated: Boolean) = builder.addBoolean(32, annualInsuredDepreciationFactorEstimated, false)
        fun addInsurancePremiumAtLaunch(builder: FlatBufferBuilder, insurancePremiumAtLaunch: Double) = builder.addDouble(33, insurancePremiumAtLaunch, 0.0)
        fun addInsurancePremiumAtLaunchEstimated(builder: FlatBufferBuilder, insurancePremiumAtLaunchEstimated: Boolean) = builder.addBoolean(34, insurancePremiumAtLaunchEstimated, false)
        fun addNumHumans(builder: FlatBufferBuilder, numHumans: Int) = builder.addInt(35, numHumans, 0)
        fun addCubesatDispenserType(builder: FlatBufferBuilder, cubesatDispenserType: Int) = builder.addOffset(36, cubesatDispenserType, 0)
        fun addMassCategory(builder: FlatBufferBuilder, massCategory: Int) = builder.addOffset(37, massCategory, 0)
        fun addLaunchId(builder: FlatBufferBuilder, launchId: Int) = builder.addOffset(38, launchId, 0)
        fun addLaunchVehicleId(builder: FlatBufferBuilder, launchVehicleId: Int) = builder.addOffset(39, launchVehicleId, 0)
        fun addLaunchProviderFlightNumber(builder: FlatBufferBuilder, launchProviderFlightNumber: Int) = builder.addOffset(40, launchProviderFlightNumber, 0)
        fun addLaunchSiteName(builder: FlatBufferBuilder, launchSiteName: Int) = builder.addOffset(41, launchSiteName, 0)
        fun addLaunchSiteId(builder: FlatBufferBuilder, launchSiteId: Int) = builder.addOffset(42, launchSiteId, 0)
        fun addLaunchCountry(builder: FlatBufferBuilder, launchCountry: Int) = builder.addOffset(43, launchCountry, 0)
        fun addLaunchProvider(builder: FlatBufferBuilder, launchProvider: Int) = builder.addOffset(44, launchProvider, 0)
        fun addLaunchProviderCountry(builder: FlatBufferBuilder, launchProviderCountry: Int) = builder.addOffset(45, launchProviderCountry, 0)
        fun addCommercialLaunch(builder: FlatBufferBuilder, commercialLaunch: Boolean) = builder.addBoolean(46, commercialLaunch, false)
        fun addLaunchType(builder: FlatBufferBuilder, launchType: Int) = builder.addOffset(47, launchType, 0)
        fun addLaunchCharacteristic(builder: FlatBufferBuilder, launchCharacteristic: Int) = builder.addOffset(48, launchCharacteristic, 0)
        fun addLaunchNumber(builder: FlatBufferBuilder, launchNumber: Int) = builder.addOffset(49, launchNumber, 0)
        fun addLaunchDate(builder: FlatBufferBuilder, launchDate: Int) = builder.addOffset(50, launchDate, 0)
        fun addLaunchDateRemarks(builder: FlatBufferBuilder, launchDateRemarks: Int) = builder.addOffset(51, launchDateRemarks, 0)
        fun addYoutubeLaunchLink(builder: FlatBufferBuilder, youtubeLaunchLink: Int) = builder.addOffset(52, youtubeLaunchLink, 0)
        fun addStatus(builder: FlatBufferBuilder, status: Int) = builder.addOffset(53, status, 0)
        fun addOwner(builder: FlatBufferBuilder, owner: Int) = builder.addOffset(54, owner, 0)
        fun addOwnerCountry(builder: FlatBufferBuilder, ownerCountry: Int) = builder.addOffset(55, ownerCountry, 0)
        fun addOperator(builder: FlatBufferBuilder, operator: Int) = builder.addOffset(56, operator, 0)
        fun addOperatorCountry(builder: FlatBufferBuilder, operatorCountry: Int) = builder.addOffset(57, operatorCountry, 0)
        fun addLeased(builder: FlatBufferBuilder, leased: Boolean) = builder.addBoolean(58, leased, false)
        fun addOrderDate(builder: FlatBufferBuilder, orderDate: Int) = builder.addOffset(59, orderDate, 0)
        fun addCapabilityLost(builder: FlatBufferBuilder, capabilityLost: Double) = builder.addDouble(60, capabilityLost, 0.0)
        fun addCapacityLost(builder: FlatBufferBuilder, capacityLost: Double) = builder.addDouble(61, capacityLost, 0.0)
        fun addPrimaryMissionGroup(builder: FlatBufferBuilder, primaryMissionGroup: Int) = builder.addOffset(62, primaryMissionGroup, 0)
        fun addAdditionalMissionsGroups(builder: FlatBufferBuilder, additionalMissionsGroups: Int) = builder.addOffset(63, additionalMissionsGroups, 0)
        fun addTotalClaims(builder: FlatBufferBuilder, totalClaims: Int) = builder.addInt(64, totalClaims, 0)
        fun addTotalInjuries(builder: FlatBufferBuilder, totalInjuries: Int) = builder.addInt(65, totalInjuries, 0)
        fun addTotalFatalities(builder: FlatBufferBuilder, totalFatalities: Int) = builder.addInt(66, totalFatalities, 0)
        fun addNameAtLaunch(builder: FlatBufferBuilder, nameAtLaunch: Int) = builder.addOffset(67, nameAtLaunch, 0)
        fun addBusId(builder: FlatBufferBuilder, busId: Int) = builder.addOffset(68, busId, 0)
        fun addCurrentAge(builder: FlatBufferBuilder, currentAge: Double) = builder.addDouble(69, currentAge, 0.0)
        fun addLifeLost(builder: FlatBufferBuilder, lifeLost: Double) = builder.addDouble(70, lifeLost, 0.0)
        fun addGeoPosition(builder: FlatBufferBuilder, geoPosition: Double) = builder.addDouble(71, geoPosition, 0.0)
        fun addInsuranceLossesTotal(builder: FlatBufferBuilder, insuranceLossesTotal: Double) = builder.addDouble(72, insuranceLossesTotal, 0.0)
        fun addLaunchArranger(builder: FlatBufferBuilder, launchArranger: Int) = builder.addOffset(73, launchArranger, 0)
        fun addLaunchArrangerCountry(builder: FlatBufferBuilder, launchArrangerCountry: Int) = builder.addOffset(74, launchArrangerCountry, 0)
        fun addSerialNumber(builder: FlatBufferBuilder, serialNumber: Int) = builder.addOffset(75, serialNumber, 0)
        fun addProgramName(builder: FlatBufferBuilder, programName: Int) = builder.addOffset(76, programName, 0)
        fun addReusedHullName(builder: FlatBufferBuilder, reusedHullName: Int) = builder.addOffset(77, reusedHullName, 0)
        fun addDateOfObservation(builder: FlatBufferBuilder, dateOfObservation: Int) = builder.addOffset(78, dateOfObservation, 0)
        fun addLat(builder: FlatBufferBuilder, lat: Double) = builder.addDouble(79, lat, 0.0)
        fun addLon(builder: FlatBufferBuilder, lon: Double) = builder.addDouble(80, lon, 0.0)
        fun addAltitude(builder: FlatBufferBuilder, altitude: Double) = builder.addDouble(81, altitude, 0.0)
        fun addCollisionRiskMM(builder: FlatBufferBuilder, collisionRiskMm: Double) = builder.addDouble(82, collisionRiskMm, 0.0)
        fun addCollisionRiskCM(builder: FlatBufferBuilder, collisionRiskCm: Double) = builder.addDouble(83, collisionRiskCm, 0.0)
        fun addQuantity(builder: FlatBufferBuilder, quantity: Int) = builder.addInt(84, quantity, 0)
        fun addReusableFlights(builder: FlatBufferBuilder, reusableFlights: Int) = builder.addOffset(85, reusableFlights, 0)
        fun addNotes(builder: FlatBufferBuilder, notes: Int) = builder.addOffset(86, notes, 0)
        fun addInsuranceNotes(builder: FlatBufferBuilder, insuranceNotes: Int) = builder.addOffset(87, insuranceNotes, 0)
        fun addLaunchNotes(builder: FlatBufferBuilder, launchNotes: Int) = builder.addOffset(88, launchNotes, 0)
        fun addSource(builder: FlatBufferBuilder, source: Int) = builder.addOffset(89, source, 0)
        fun addOrigin(builder: FlatBufferBuilder, origin: Int) = builder.addOffset(90, origin, 0)
        fun addOrigNetwork(builder: FlatBufferBuilder, origNetwork: Int) = builder.addOffset(91, origNetwork, 0)
        fun addDataMode(builder: FlatBufferBuilder, dataMode: Byte) = builder.addByte(92, dataMode, 0)
        fun addCreatedAt(builder: FlatBufferBuilder, createdAt: Int) = builder.addOffset(93, createdAt, 0)
        fun addCreatedBy(builder: FlatBufferBuilder, createdBy: Int) = builder.addOffset(94, createdBy, 0)
        fun addUpdatedAt(builder: FlatBufferBuilder, updatedAt: Int) = builder.addOffset(95, updatedAt, 0)
        fun addUpdatedBy(builder: FlatBufferBuilder, updatedBy: Int) = builder.addOffset(96, updatedBy, 0)
        fun addSeradataSigIntPayload(builder: FlatBufferBuilder, seradataSigIntPayload: Int) = builder.addOffset(97, seradataSigIntPayload, 0)
        fun createSeradataSigIntPayloadVector(builder: FlatBufferBuilder, data: IntArray) : Int {
            builder.startVector(4, data.size, 4)
            for (i in data.size - 1 downTo 0) {
                builder.addOffset(data[i])
            }
            return builder.endVector()
        }
        fun startSeradataSigIntPayloadVector(builder: FlatBufferBuilder, numElems: Int) = builder.startVector(4, numElems, 4)
        fun addSeradataRadarPayload(builder: FlatBufferBuilder, seradataRadarPayload: Int) = builder.addOffset(98, seradataRadarPayload, 0)
        fun createSeradataRadarPayloadVector(builder: FlatBufferBuilder, data: IntArray) : Int {
            builder.startVector(4, data.size, 4)
            for (i in data.size - 1 downTo 0) {
                builder.addOffset(data[i])
            }
            return builder.endVector()
        }
        fun startSeradataRadarPayloadVector(builder: FlatBufferBuilder, numElems: Int) = builder.startVector(4, numElems, 4)
        fun addSeradataNavigation(builder: FlatBufferBuilder, seradataNavigation: Int) = builder.addOffset(99, seradataNavigation, 0)
        fun createSeradataNavigationVector(builder: FlatBufferBuilder, data: IntArray) : Int {
            builder.startVector(4, data.size, 4)
            for (i in data.size - 1 downTo 0) {
                builder.addOffset(data[i])
            }
            return builder.endVector()
        }
        fun startSeradataNavigationVector(builder: FlatBufferBuilder, numElems: Int) = builder.startVector(4, numElems, 4)
        fun addSeradataOpticalPayload(builder: FlatBufferBuilder, seradataOpticalPayload: Int) = builder.addOffset(100, seradataOpticalPayload, 0)
        fun createSeradataOpticalPayloadVector(builder: FlatBufferBuilder, data: IntArray) : Int {
            builder.startVector(4, data.size, 4)
            for (i in data.size - 1 downTo 0) {
                builder.addOffset(data[i])
            }
            return builder.endVector()
        }
        fun startSeradataOpticalPayloadVector(builder: FlatBufferBuilder, numElems: Int) = builder.startVector(4, numElems, 4)
        fun addSeradataEarlyWarning(builder: FlatBufferBuilder, seradataEarlyWarning: Int) = builder.addOffset(101, seradataEarlyWarning, 0)
        fun createSeradataEarlyWarningVector(builder: FlatBufferBuilder, data: IntArray) : Int {
            builder.startVector(4, data.size, 4)
            for (i in data.size - 1 downTo 0) {
                builder.addOffset(data[i])
            }
            return builder.endVector()
        }
        fun startSeradataEarlyWarningVector(builder: FlatBufferBuilder, numElems: Int) = builder.startVector(4, numElems, 4)
        fun addScientific(builder: FlatBufferBuilder, scientific: Int) = builder.addOffset(102, scientific, 0)
        fun createScientificVector(builder: FlatBufferBuilder, data: IntArray) : Int {
            builder.startVector(4, data.size, 4)
            for (i in data.size - 1 downTo 0) {
                builder.addOffset(data[i])
            }
            return builder.endVector()
        }
        fun startScientificVector(builder: FlatBufferBuilder, numElems: Int) = builder.startVector(4, numElems, 4)
        fun addSeradataCommDetails(builder: FlatBufferBuilder, seradataCommDetails: Int) = builder.addOffset(103, seradataCommDetails, 0)
        fun createSeradataCommDetailsVector(builder: FlatBufferBuilder, data: IntArray) : Int {
            builder.startVector(4, data.size, 4)
            for (i in data.size - 1 downTo 0) {
                builder.addOffset(data[i])
            }
            return builder.endVector()
        }
        fun startSeradataCommDetailsVector(builder: FlatBufferBuilder, numElems: Int) = builder.startVector(4, numElems, 4)
        fun addOnOrbit(builder: FlatBufferBuilder, onOrbit: Int) = builder.addOffset(104, onOrbit, 0)
        fun endSeradataSpacecraftDetails_Full(builder: FlatBufferBuilder) : Int {
            val o = builder.endTable()
            return o
        }
        fun finishSeradataSpacecraftDetailsFullBuffer(builder: FlatBufferBuilder, offset: Int) = builder.finish(offset, "SERA")
        fun finishSizePrefixedSeradataSpacecraftDetails_FullBuffer(builder: FlatBufferBuilder, offset: Int) = builder.finishSizePrefixed(offset, "SERA")
    }
}
