// automatically generated by the FlatBuffers compiler, do not modify

import com.google.flatbuffers.BaseVector
import com.google.flatbuffers.BooleanVector
import com.google.flatbuffers.ByteVector
import com.google.flatbuffers.Constants
import com.google.flatbuffers.DoubleVector
import com.google.flatbuffers.FlatBufferBuilder
import com.google.flatbuffers.FloatVector
import com.google.flatbuffers.LongVector
import com.google.flatbuffers.StringVector
import com.google.flatbuffers.Struct
import com.google.flatbuffers.Table
import com.google.flatbuffers.UnionVector
import java.nio.ByteBuffer
import java.nio.ByteOrder
import kotlin.math.sign

/**
 * /// Crew Services.
 */
@Suppress("unused")
class Crew_Full : Table() {

    fun __init(_i: Int, _bb: ByteBuffer)  {
        __reset(_i, _bb)
    }
    fun __assign(_i: Int, _bb: ByteBuffer) : Crew_Full {
        __init(_i, _bb)
        return this
    }
    /**
     * Unique identifier of the record, auto-generated by the system.
     * Example: /// Example: bdad6945-c9e4-b829-f7be-1ad075541921
     * Constraints: Minimum length = 1, Maximum length = 36
     */
    val id : String?
        get() {
            val o = __offset(4)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val idAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(4, 1)
    fun idInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 4, 1)
    /**
     * Classification marking of the data in IC/CAPCO Portion-marked format.
     * Example: /// Example: U
     * Constraints: Minimum length = 1, Maximum length = 128
     */
    val classificationMarking : String?
        get() {
            val o = __offset(6)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val classificationMarkingAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(6, 1)
    fun classificationMarkingInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 6, 1)
    /**
     * Unique identifier of the formed crew provided by the originating source. Provided for systems that require tracking of an internal system generated ID.
     * Example: /// Example: JHJDHjhuu929o92
     * Constraints: Minimum length = 1, Maximum length = 36
     */
    val origCrewId : String?
        get() {
            val o = __offset(8)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val origCrewIdAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(8, 1)
    fun origCrewIdInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 8, 1)
    /**
     * Name of the formed crew.
     * Example: /// Example: falcon
     * Constraints: Minimum length = 0, Maximum length = 36
     */
    val crewName : String?
        get() {
            val o = __offset(10)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val crewNameAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(10, 1)
    fun crewNameInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 10, 1)
    /**
     * Crew Status (e.g. APPROVED, PENDING).
     * Example: /// Example: APPROVED
     * Constraints: Minimum length = 0, Maximum length = 64
     */
    val status : String?
        get() {
            val o = __offset(12)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val statusAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(12, 1)
    fun statusInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 12, 1)
    /**
     * Unique identifier of the Aircraft Sortie associated with this crew record.
     * Example: /// Example: 4ef3d1e8-ab08-ab70-498f-edc479734e5c
     * Constraints: Minimum length = 0, Maximum length = 36
     */
    val idSortie : String?
        get() {
            val o = __offset(14)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val idSortieAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(14, 1)
    fun idSortieInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 14, 1)
    /**
     * Time the crew is legal for alert, in ISO8601 UTC format, with millisecond precision.
     * Example: /// Example: 2022-01-01T16:00:00.123Z
     * Constraints: No constraints specified.
     */
    val legalAlertTime : String?
        get() {
            val o = __offset(16)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val legalAlertTimeAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(16, 1)
    fun legalAlertTimeInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 16, 1)
    /**
     * Time the crew is legal for bravo, in ISO8601 UTC format, with millisecond precision.
     * Example: /// Example: 2022-01-01T16:00:00.123Z
     * Constraints: No constraints specified.
     */
    val legalBravoTime : String?
        get() {
            val o = __offset(18)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val legalBravoTimeAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(18, 1)
    fun legalBravoTimeInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 18, 1)
    /**
     * Time the crew was alerted, in ISO8601 UTC format, with millisecond precision.
     * Example: /// Example: 2022-01-01T16:00:00.123Z
     * Constraints: No constraints specified.
     */
    val alertedTime : String?
        get() {
            val o = __offset(20)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val alertedTimeAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(20, 1)
    fun alertedTimeInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 20, 1)
    /**
     * Scheduled return time, in ISO8601 UTC format, with millisecond precision.
     * Example: /// Example: 2022-01-01T16:00:00.123Z
     * Constraints: No constraints specified.
     */
    val returnTime : String?
        get() {
            val o = __offset(22)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val returnTimeAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(22, 1)
    fun returnTimeInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 22, 1)
    /**
     * Crew Flight Duty Period (FDP) eligibility type.
     * Example: /// Example: A
     * Constraints: Minimum length = 0, Maximum length = 32
     */
    val fdpEligType : String?
        get() {
            val o = __offset(24)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val fdpEligTypeAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(24, 1)
    fun fdpEligTypeInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 24, 1)
    /**
     * Flight Duty Period (FDP) type.
     * Example: /// Example: A
     * Constraints: Minimum length = 0, Maximum length = 32
     */
    val fdpType : String?
        get() {
            val o = __offset(26)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val fdpTypeAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(26, 1)
    fun fdpTypeInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 26, 1)
    /**
     * Crew type.
     * Example: /// Example: AIRLAND
     * Constraints: Minimum length = 0, Maximum length = 32
     */
    val crewType : String?
        get() {
            val o = __offset(28)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val crewTypeAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(28, 1)
    fun crewTypeInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 28, 1)
    /**
     * The crew's Aviation Resource Management System (ARMS) unit.  If multiple units exist, use the Aircraft Commander's Unit.
     * Example: /// Example: 00016ALSQ
     * Constraints: Minimum length = 0, Maximum length = 32
     */
    val armsCrewUnit : String?
        get() {
            val o = __offset(30)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val armsCrewUnitAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(30, 1)
    fun armsCrewUnitInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 30, 1)
    /**
     * CrewMembers Collection.
     * Example: /// Example: No example provided.
     * Constraints: No constraints specified.
     */
    fun crewMembers(j: Int) : String? {
        val o = __offset(32)
        return if (o != 0) {
            __string(__vector(o) + j * 4)
        } else {
            null
        }
    }
    val crewMembersLength : Int
        get() {
            val o = __offset(32); return if (o != 0) __vector_len(o) else 0
        }
    /**
     * Time the row was created in the database, auto-populated by the system.
     * Example: /// Example: 2022-01-01T16:00:00.123Z
     * Constraints: No constraints specified.
     */
    val createdAt : String?
        get() {
            val o = __offset(34)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val createdAtAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(34, 1)
    fun createdAtInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 34, 1)
    /**
     * Application user who created the row in the database, auto-populated by the system.
     * Example: /// Example: some.user
     * Constraints: Minimum length = 1, Maximum length = 64
     */
    val createdBy : String?
        get() {
            val o = __offset(36)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val createdByAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(36, 1)
    fun createdByInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 36, 1)
    /**
     * Time the row was created in the database, auto-populated by the system.
     * Example: /// Example: 2022-01-01T16:00:00.123Z
     * Constraints: No constraints specified.
     */
    val updatedAt : String?
        get() {
            val o = __offset(38)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val updatedAtAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(38, 1)
    fun updatedAtInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 38, 1)
    /**
     * Application user who created the row in the database, auto-populated by the system.
     * Example: /// Example: some.user
     * Constraints: Minimum length = 0, Maximum length = 64
     */
    val updatedBy : String?
        get() {
            val o = __offset(40)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val updatedByAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(40, 1)
    fun updatedByInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 40, 1)
    /**
     * Source of the data.
     * Example: /// Example: Bluestaq
     * Constraints: Minimum length = 1, Maximum length = 64
     */
    val source : String?
        get() {
            val o = __offset(42)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val sourceAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(42, 1)
    fun sourceInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 42, 1)
    /**
     * Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
     * Example: /// Example: THIRD_PARTY_DATASOURCE
     * Constraints: Minimum length = 0, Maximum length = 64
     */
    val origin : String?
        get() {
            val o = __offset(44)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val originAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(44, 1)
    fun originInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 44, 1)
    /**
     * The originating source network on which this record was created, auto-populated by the system.
     * Example: /// Example: OPS1
     * Constraints: Minimum length = 0, Maximum length = 32
     */
    val origNetwork : String?
        get() {
            val o = __offset(46)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val origNetworkAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(46, 1)
    fun origNetworkInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 46, 1)
    /**
     * Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
     * EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
     * REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
     * SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
     * TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
     * Example: /// Example: TEST
     * Constraints: Minimum length = 1, Maximum length = 32
     */
    val dataMode : Byte
        get() {
            val o = __offset(48)
            return if(o != 0) bb.get(o + bb_pos) else 0
        }
    companion object {
        fun validateVersion() = Constants.FLATBUFFERS_24_3_25()
        fun getRootAsCrew_Full(_bb: ByteBuffer): Crew_Full = getRootAsCrew_Full(_bb, Crew_Full())
        fun getRootAsCrew_Full(_bb: ByteBuffer, obj: Crew_Full): Crew_Full {
            _bb.order(ByteOrder.LITTLE_ENDIAN)
            return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb))
        }
        fun Crew_FullBufferHasIdentifier(_bb: ByteBuffer) : Boolean = __has_identifier(_bb, "CREW")
        fun createCrew_Full(builder: FlatBufferBuilder, idOffset: Int, classificationMarkingOffset: Int, origCrewIdOffset: Int, crewNameOffset: Int, statusOffset: Int, idSortieOffset: Int, legalAlertTimeOffset: Int, legalBravoTimeOffset: Int, alertedTimeOffset: Int, returnTimeOffset: Int, fdpEligTypeOffset: Int, fdpTypeOffset: Int, crewTypeOffset: Int, armsCrewUnitOffset: Int, crewMembersOffset: Int, createdAtOffset: Int, createdByOffset: Int, updatedAtOffset: Int, updatedByOffset: Int, sourceOffset: Int, originOffset: Int, origNetworkOffset: Int, dataMode: Byte) : Int {
            builder.startTable(23)
            addOrigNetwork(builder, origNetworkOffset)
            addOrigin(builder, originOffset)
            addSource(builder, sourceOffset)
            addUpdatedBy(builder, updatedByOffset)
            addUpdatedAt(builder, updatedAtOffset)
            addCreatedBy(builder, createdByOffset)
            addCreatedAt(builder, createdAtOffset)
            addCrewMembers(builder, crewMembersOffset)
            addArmsCrewUnit(builder, armsCrewUnitOffset)
            addCrewType(builder, crewTypeOffset)
            addFdpType(builder, fdpTypeOffset)
            addFdpEligType(builder, fdpEligTypeOffset)
            addReturnTime(builder, returnTimeOffset)
            addAlertedTime(builder, alertedTimeOffset)
            addLegalBravoTime(builder, legalBravoTimeOffset)
            addLegalAlertTime(builder, legalAlertTimeOffset)
            addIdSortie(builder, idSortieOffset)
            addStatus(builder, statusOffset)
            addCrewName(builder, crewNameOffset)
            addOrigCrewId(builder, origCrewIdOffset)
            addClassificationMarking(builder, classificationMarkingOffset)
            addId(builder, idOffset)
            addDataMode(builder, dataMode)
            return endCrew_Full(builder)
        }
        fun startCrew_Full(builder: FlatBufferBuilder) = builder.startTable(23)
        fun addId(builder: FlatBufferBuilder, id: Int) = builder.addOffset(0, id, 0)
        fun addClassificationMarking(builder: FlatBufferBuilder, classificationMarking: Int) = builder.addOffset(1, classificationMarking, 0)
        fun addOrigCrewId(builder: FlatBufferBuilder, origCrewId: Int) = builder.addOffset(2, origCrewId, 0)
        fun addCrewName(builder: FlatBufferBuilder, crewName: Int) = builder.addOffset(3, crewName, 0)
        fun addStatus(builder: FlatBufferBuilder, status: Int) = builder.addOffset(4, status, 0)
        fun addIdSortie(builder: FlatBufferBuilder, idSortie: Int) = builder.addOffset(5, idSortie, 0)
        fun addLegalAlertTime(builder: FlatBufferBuilder, legalAlertTime: Int) = builder.addOffset(6, legalAlertTime, 0)
        fun addLegalBravoTime(builder: FlatBufferBuilder, legalBravoTime: Int) = builder.addOffset(7, legalBravoTime, 0)
        fun addAlertedTime(builder: FlatBufferBuilder, alertedTime: Int) = builder.addOffset(8, alertedTime, 0)
        fun addReturnTime(builder: FlatBufferBuilder, returnTime: Int) = builder.addOffset(9, returnTime, 0)
        fun addFdpEligType(builder: FlatBufferBuilder, fdpEligType: Int) = builder.addOffset(10, fdpEligType, 0)
        fun addFdpType(builder: FlatBufferBuilder, fdpType: Int) = builder.addOffset(11, fdpType, 0)
        fun addCrewType(builder: FlatBufferBuilder, crewType: Int) = builder.addOffset(12, crewType, 0)
        fun addArmsCrewUnit(builder: FlatBufferBuilder, armsCrewUnit: Int) = builder.addOffset(13, armsCrewUnit, 0)
        fun addCrewMembers(builder: FlatBufferBuilder, crewMembers: Int) = builder.addOffset(14, crewMembers, 0)
        fun createCrewMembersVector(builder: FlatBufferBuilder, data: IntArray) : Int {
            builder.startVector(4, data.size, 4)
            for (i in data.size - 1 downTo 0) {
                builder.addOffset(data[i])
            }
            return builder.endVector()
        }
        fun startCrewMembersVector(builder: FlatBufferBuilder, numElems: Int) = builder.startVector(4, numElems, 4)
        fun addCreatedAt(builder: FlatBufferBuilder, createdAt: Int) = builder.addOffset(15, createdAt, 0)
        fun addCreatedBy(builder: FlatBufferBuilder, createdBy: Int) = builder.addOffset(16, createdBy, 0)
        fun addUpdatedAt(builder: FlatBufferBuilder, updatedAt: Int) = builder.addOffset(17, updatedAt, 0)
        fun addUpdatedBy(builder: FlatBufferBuilder, updatedBy: Int) = builder.addOffset(18, updatedBy, 0)
        fun addSource(builder: FlatBufferBuilder, source: Int) = builder.addOffset(19, source, 0)
        fun addOrigin(builder: FlatBufferBuilder, origin: Int) = builder.addOffset(20, origin, 0)
        fun addOrigNetwork(builder: FlatBufferBuilder, origNetwork: Int) = builder.addOffset(21, origNetwork, 0)
        fun addDataMode(builder: FlatBufferBuilder, dataMode: Byte) = builder.addByte(22, dataMode, 0)
        fun endCrew_Full(builder: FlatBufferBuilder) : Int {
            val o = builder.endTable()
            return o
        }
        fun finishCrewFullBuffer(builder: FlatBufferBuilder, offset: Int) = builder.finish(offset, "CREW")
        fun finishSizePrefixedCrew_FullBuffer(builder: FlatBufferBuilder, offset: Int) = builder.finishSizePrefixed(offset, "CREW")
    }
}
