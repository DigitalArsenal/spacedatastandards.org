// automatically generated by the FlatBuffers compiler, do not modify

import com.google.flatbuffers.BaseVector
import com.google.flatbuffers.BooleanVector
import com.google.flatbuffers.ByteVector
import com.google.flatbuffers.Constants
import com.google.flatbuffers.DoubleVector
import com.google.flatbuffers.FlatBufferBuilder
import com.google.flatbuffers.FloatVector
import com.google.flatbuffers.LongVector
import com.google.flatbuffers.StringVector
import com.google.flatbuffers.Struct
import com.google.flatbuffers.Table
import com.google.flatbuffers.UnionVector
import java.nio.ByteBuffer
import java.nio.ByteOrder
import kotlin.math.sign

/**
 * /// Information obtained for vital signs.
 */
@Suppress("unused")
class EvacVitalSignData_Full : Table() {

    fun __init(_i: Int, _bb: ByteBuffer)  {
        __reset(_i, _bb)
    }
    fun __assign(_i: Int, _bb: ByteBuffer) : EvacVitalSignData_Full {
        __init(_i, _bb)
        return this
    }
    /**
     * Patient vital sign measured (e.g. HEART RATE, PULSE RATE, RESPIRATION RATE, TEMPERATURE CORE, etc.).
     * Example: /// Example: HEART RATE
     * Constraints: Minimum length = 0, Maximum length = 32
     */
    val vitalSign : String?
        get() {
            val o = __offset(4)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val vitalSignAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(4, 1)
    fun vitalSignInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 4, 1)
    /**
     * Vital sign value 1.  The content of this field is dependent on the type of vital sign being measured (see the vitalSign field).
     * Example: /// Example: 120
     * Constraints: No constraints specified.
     */
    val vitalSign1 : Double
        get() {
            val o = __offset(6)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Vital sign value 2.  The content of this field is dependent on the type of vital sign being measured (see the vitalSign field).
     * Example: /// Example: 80
     * Constraints: No constraints specified.
     */
    val vitalSign2 : Double
        get() {
            val o = __offset(8)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Medical confidence factor.
     * Example: /// Example: 1
     * Constraints: No constraints specified.
     */
    val medConfFactor : Int
        get() {
            val o = __offset(10)
            return if(o != 0) bb.getInt(o + bb_pos) else 0
        }
    /**
     * Datetime of the vital sign measurement in ISO 8601 UTC datetime format.
     * Example: /// Example: 2021-10-15T16:00:00.123Z
     * Constraints: No constraints specified.
     */
    val time : String?
        get() {
            val o = __offset(12)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val timeAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(12, 1)
    fun timeInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 12, 1)
    companion object {
        fun validateVersion() = Constants.FLATBUFFERS_24_3_25()
        fun getRootAsEvacVitalSignData_Full(_bb: ByteBuffer): EvacVitalSignData_Full = getRootAsEvacVitalSignData_Full(_bb, EvacVitalSignData_Full())
        fun getRootAsEvacVitalSignData_Full(_bb: ByteBuffer, obj: EvacVitalSignData_Full): EvacVitalSignData_Full {
            _bb.order(ByteOrder.LITTLE_ENDIAN)
            return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb))
        }
        fun EvacVitalSignData_FullBufferHasIdentifier(_bb: ByteBuffer) : Boolean = __has_identifier(_bb, "EVAC")
        fun createEvacVitalSignData_Full(builder: FlatBufferBuilder, vitalSignOffset: Int, vitalSign1: Double, vitalSign2: Double, medConfFactor: Int, timeOffset: Int) : Int {
            builder.startTable(5)
            addVitalSign2(builder, vitalSign2)
            addVitalSign1(builder, vitalSign1)
            addTime(builder, timeOffset)
            addMedConfFactor(builder, medConfFactor)
            addVitalSign(builder, vitalSignOffset)
            return endEvacVitalSignData_Full(builder)
        }
        fun startEvacVitalSignData_Full(builder: FlatBufferBuilder) = builder.startTable(5)
        fun addVitalSign(builder: FlatBufferBuilder, vitalSign: Int) = builder.addOffset(0, vitalSign, 0)
        fun addVitalSign1(builder: FlatBufferBuilder, vitalSign1: Double) = builder.addDouble(1, vitalSign1, 0.0)
        fun addVitalSign2(builder: FlatBufferBuilder, vitalSign2: Double) = builder.addDouble(2, vitalSign2, 0.0)
        fun addMedConfFactor(builder: FlatBufferBuilder, medConfFactor: Int) = builder.addInt(3, medConfFactor, 0)
        fun addTime(builder: FlatBufferBuilder, time: Int) = builder.addOffset(4, time, 0)
        fun endEvacVitalSignData_Full(builder: FlatBufferBuilder) : Int {
            val o = builder.endTable()
            return o
        }
        fun finishEvacVitalSignDataFullBuffer(builder: FlatBufferBuilder, offset: Int) = builder.finish(offset, "EVAC")
        fun finishSizePrefixedEvacVitalSignData_FullBuffer(builder: FlatBufferBuilder, offset: Int) = builder.finishSizePrefixed(offset, "EVAC")
    }
}
