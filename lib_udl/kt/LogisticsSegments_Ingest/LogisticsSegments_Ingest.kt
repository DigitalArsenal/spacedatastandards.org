// automatically generated by the FlatBuffers compiler, do not modify

import com.google.flatbuffers.BaseVector
import com.google.flatbuffers.BooleanVector
import com.google.flatbuffers.ByteVector
import com.google.flatbuffers.Constants
import com.google.flatbuffers.DoubleVector
import com.google.flatbuffers.FlatBufferBuilder
import com.google.flatbuffers.FloatVector
import com.google.flatbuffers.LongVector
import com.google.flatbuffers.StringVector
import com.google.flatbuffers.Struct
import com.google.flatbuffers.Table
import com.google.flatbuffers.UnionVector
import java.nio.ByteBuffer
import java.nio.ByteOrder
import kotlin.math.sign

/**
 * /// Remarks associated with this LogisticsSupport record.
 */
@Suppress("unused")
class LogisticsSegments_Ingest : Table() {

    fun __init(_i: Int, _bb: ByteBuffer)  {
        __reset(_i, _bb)
    }
    fun __assign(_i: Int, _bb: ByteBuffer) : LogisticsSegments_Ingest {
        __init(_i, _bb)
        return this
    }
    /**
     * Used to sequence the segments in the transportation plan.
     * Example: /// Example: 3
     * Constraints: No constraints specified.
     */
    val segmentNumber : Int
        get() {
            val o = __offset(4)
            return if(o != 0) bb.getInt(o + bb_pos) else 0
        }
    /**
     * Transportation mode.  AMC airlift, Commercial airlift, Other, or surface transportation.
     * Example: /// Example: A
     * Constraints: Minimum length = 1, Maximum length = 1
     */
    val modeCode : String?
        get() {
            val o = __offset(6)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val modeCodeAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(6, 1)
    fun modeCodeInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 6, 1)
    /**
     * The type of mission (e.g. SAAM, CHNL, etc.).
     * Example: /// Example: SAAM
     * Constraints: Minimum length = 0, Maximum length = 6
     */
    val missionType : String?
        get() {
            val o = __offset(8)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val missionTypeAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(8, 1)
    fun missionTypeInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 8, 1)
    /**
     * The unique identifier of the mission to which this logistics record is assigned.
     * Example: /// Example: EXAMPLE-UUID
     * Constraints: Minimum length = 0, Maximum length = 32
     */
    val idMission : String?
        get() {
            val o = __offset(10)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val idMissionAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(10, 1)
    fun idMissionInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 10, 1)
    /**
     * The GDSS mission ID for this segment.
     * Example: /// Example: 2001101RF01202307062205
     * Constraints: Minimum length = 0, Maximum length = 24
     */
    val extMissionId : String?
        get() {
            val o = __offset(12)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val extMissionIdAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(12, 1)
    fun extMissionIdInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 12, 1)
    /**
     * The user generated identifier for an air mission subgroup.
     * Example: /// Example: TAM308901196
     * Constraints: Minimum length = 0, Maximum length = 12
     */
    val missionNumber : String?
        get() {
            val o = __offset(14)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val missionNumberAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(14, 1)
    fun missionNumberInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 14, 1)
    /**
     * Start air mission itinerary point identifier.
     * Example: /// Example: 200
     * Constraints: No constraints specified.
     */
    val itin : Int
        get() {
            val o = __offset(16)
            return if(o != 0) bb.getInt(o + bb_pos) else 0
        }
    /**
     * The identifier that represents a specific aircraft within an aircraft type.
     * Example: /// Example: N819AX
     * Constraints: Minimum length = 0, Maximum length = 7
     */
    val segTailNumber : String?
        get() {
            val o = __offset(18)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val segTailNumberAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(18, 1)
    fun segTailNumberInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 18, 1)
    /**
     * The aircraft Model Design Series (MDS) designation (e.g. E-2C HAWKEYE, F-15 EAGLE, KC-130 HERCULES, etc.) of this aircraft. Intended as, but not constrained to, MIL-STD-6016 environment dependent specific type designations.
     * Example: /// Example: B7772E
     * Constraints: Minimum length = 0, Maximum length = 30
     */
    val segAircraftMds : String?
        get() {
            val o = __offset(20)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val segAircraftMdsAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(20, 1)
    fun segAircraftMdsInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 20, 1)
    /**
     * Airport ICAO departure code.
     * Example: /// Example: PHIK
     * Constraints: Minimum length = 0, Maximum length = 4
     */
    val departureIcao : String?
        get() {
            val o = __offset(22)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val departureIcaoAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(22, 1)
    fun departureIcaoInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 22, 1)
    /**
     * Actual departure time to the segment destination, in ISO 8601 UTC format with millisecond precision.
     * Example: /// Example: 2023-07-17T19:20:00.123Z
     * Constraints: No constraints specified.
     */
    val segActDepTime : String?
        get() {
            val o = __offset(24)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val segActDepTimeAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(24, 1)
    fun segActDepTimeInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 24, 1)
    /**
     * Airport ICAO arrival code.
     * Example: /// Example: YBCS
     * Constraints: Minimum length = 0, Maximum length = 4
     */
    val arrivalIcao : String?
        get() {
            val o = __offset(26)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val arrivalIcaoAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(26, 1)
    fun arrivalIcaoInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 26, 1)
    /**
     * Actual arrival time to segment destination, in ISO 8601 UTC format with millisecond precision.
     * Example: /// Example: 2023-07-17T19:20:00.123Z
     * Constraints: No constraints specified.
     */
    val segActArrTime : String?
        get() {
            val o = __offset(28)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val segActArrTimeAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(28, 1)
    fun segActArrTimeInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 28, 1)
    /**
     * GC. LGTPS_C_DT_EST_DEP.  GD2: Estimated departure time from the segment origin. Only supplied when the segment is not attached to a Mission, otherwise the ETD is derived from the Mission segment origin point. This datetime should be in ISO 8601 UTC format with millisecond precision.
     * Example: /// Example: 2023-07-17T19:20:00.123Z
     * Constraints: No constraints specified.
     */
    val segEstDepTime : String?
        get() {
            val o = __offset(30)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val segEstDepTimeAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(30, 1)
    fun segEstDepTimeInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 30, 1)
    /**
     * GC. LGTPS_C_DT_EST_ARR.  GD2: Estimated arrival time to the segment destination. Only supplied when the segment is not attached to a Mission, otherwise the ETA is derived from the Mission segment destination point. This datetime should be in ISO 8601 UTC format with millisecond precision.
     * Example: /// Example: 2023-07-17T19:20:00.123Z
     * Constraints: No constraints specified.
     */
    val segEstArrTime : String?
        get() {
            val o = __offset(32)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val segEstArrTimeAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(32, 1)
    fun segEstArrTimeInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 32, 1)
    companion object {
        fun validateVersion() = Constants.FLATBUFFERS_24_3_25()
        fun getRootAsLogisticsSegments_Ingest(_bb: ByteBuffer): LogisticsSegments_Ingest = getRootAsLogisticsSegments_Ingest(_bb, LogisticsSegments_Ingest())
        fun getRootAsLogisticsSegments_Ingest(_bb: ByteBuffer, obj: LogisticsSegments_Ingest): LogisticsSegments_Ingest {
            _bb.order(ByteOrder.LITTLE_ENDIAN)
            return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb))
        }
        fun LogisticsSegments_IngestBufferHasIdentifier(_bb: ByteBuffer) : Boolean = __has_identifier(_bb, "LOGI")
        fun createLogisticsSegments_Ingest(builder: FlatBufferBuilder, segmentNumber: Int, modeCodeOffset: Int, missionTypeOffset: Int, idMissionOffset: Int, extMissionIdOffset: Int, missionNumberOffset: Int, itin: Int, segTailNumberOffset: Int, segAircraftMdsOffset: Int, departureIcaoOffset: Int, segActDepTimeOffset: Int, arrivalIcaoOffset: Int, segActArrTimeOffset: Int, segEstDepTimeOffset: Int, segEstArrTimeOffset: Int) : Int {
            builder.startTable(15)
            addSegEstArrTime(builder, segEstArrTimeOffset)
            addSegEstDepTime(builder, segEstDepTimeOffset)
            addSegActArrTime(builder, segActArrTimeOffset)
            addArrivalICAO(builder, arrivalIcaoOffset)
            addSegActDepTime(builder, segActDepTimeOffset)
            addDepartureICAO(builder, departureIcaoOffset)
            addSegAircraftMDS(builder, segAircraftMdsOffset)
            addSegTailNumber(builder, segTailNumberOffset)
            addItin(builder, itin)
            addMissionNumber(builder, missionNumberOffset)
            addExtMissionId(builder, extMissionIdOffset)
            addIdMission(builder, idMissionOffset)
            addMissionType(builder, missionTypeOffset)
            addModeCode(builder, modeCodeOffset)
            addSegmentNumber(builder, segmentNumber)
            return endLogisticsSegments_Ingest(builder)
        }
        fun startLogisticsSegments_Ingest(builder: FlatBufferBuilder) = builder.startTable(15)
        fun addSegmentNumber(builder: FlatBufferBuilder, segmentNumber: Int) = builder.addInt(0, segmentNumber, 0)
        fun addModeCode(builder: FlatBufferBuilder, modeCode: Int) = builder.addOffset(1, modeCode, 0)
        fun addMissionType(builder: FlatBufferBuilder, missionType: Int) = builder.addOffset(2, missionType, 0)
        fun addIdMission(builder: FlatBufferBuilder, idMission: Int) = builder.addOffset(3, idMission, 0)
        fun addExtMissionId(builder: FlatBufferBuilder, extMissionId: Int) = builder.addOffset(4, extMissionId, 0)
        fun addMissionNumber(builder: FlatBufferBuilder, missionNumber: Int) = builder.addOffset(5, missionNumber, 0)
        fun addItin(builder: FlatBufferBuilder, itin: Int) = builder.addInt(6, itin, 0)
        fun addSegTailNumber(builder: FlatBufferBuilder, segTailNumber: Int) = builder.addOffset(7, segTailNumber, 0)
        fun addSegAircraftMDS(builder: FlatBufferBuilder, segAircraftMds: Int) = builder.addOffset(8, segAircraftMds, 0)
        fun addDepartureICAO(builder: FlatBufferBuilder, departureIcao: Int) = builder.addOffset(9, departureIcao, 0)
        fun addSegActDepTime(builder: FlatBufferBuilder, segActDepTime: Int) = builder.addOffset(10, segActDepTime, 0)
        fun addArrivalICAO(builder: FlatBufferBuilder, arrivalIcao: Int) = builder.addOffset(11, arrivalIcao, 0)
        fun addSegActArrTime(builder: FlatBufferBuilder, segActArrTime: Int) = builder.addOffset(12, segActArrTime, 0)
        fun addSegEstDepTime(builder: FlatBufferBuilder, segEstDepTime: Int) = builder.addOffset(13, segEstDepTime, 0)
        fun addSegEstArrTime(builder: FlatBufferBuilder, segEstArrTime: Int) = builder.addOffset(14, segEstArrTime, 0)
        fun endLogisticsSegments_Ingest(builder: FlatBufferBuilder) : Int {
            val o = builder.endTable()
            return o
        }
        fun finishLogisticsSegmentsIngestBuffer(builder: FlatBufferBuilder, offset: Int) = builder.finish(offset, "LOGI")
        fun finishSizePrefixedLogisticsSegments_IngestBuffer(builder: FlatBufferBuilder, offset: Int) = builder.finishSizePrefixed(offset, "LOGI")
    }
}
