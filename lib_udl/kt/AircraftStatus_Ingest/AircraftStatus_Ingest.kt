// automatically generated by the FlatBuffers compiler, do not modify

import com.google.flatbuffers.BaseVector
import com.google.flatbuffers.BooleanVector
import com.google.flatbuffers.ByteVector
import com.google.flatbuffers.Constants
import com.google.flatbuffers.DoubleVector
import com.google.flatbuffers.FlatBufferBuilder
import com.google.flatbuffers.FloatVector
import com.google.flatbuffers.LongVector
import com.google.flatbuffers.StringVector
import com.google.flatbuffers.Struct
import com.google.flatbuffers.Table
import com.google.flatbuffers.UnionVector
import java.nio.ByteBuffer
import java.nio.ByteOrder
import kotlin.math.sign

/**
 * /// Aircraft readiness and status data. Contains the dynamic data associated with the specific aircraft status, either in-flight or on-ground, including remaining fuel, mission readiness, and inventory, etc.
 */
@Suppress("unused")
class AircraftStatus_Ingest : Table() {

    fun __init(_i: Int, _bb: ByteBuffer)  {
        __reset(_i, _bb)
    }
    fun __assign(_i: Int, _bb: ByteBuffer) : AircraftStatus_Ingest {
        __init(_i, _bb)
        return this
    }
    /**
     * Unique identifier of the record, auto-generated by the system.
     * Example: /// Example: 0167f577-e06c-358e-85aa-0a07a730bdd0
     * Constraints: Minimum length = 1, Maximum length = 36
     */
    val id : String?
        get() {
            val o = __offset(4)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val idAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(4, 1)
    fun idInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 4, 1)
    /**
     * Classification marking of the data in IC/CAPCO Portion-marked format.
     * Example: /// Example: U
     * Constraints: Minimum length = 1, Maximum length = 128
     */
    val classificationMarking : String?
        get() {
            val o = __offset(6)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val classificationMarkingAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(6, 1)
    fun classificationMarkingInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 6, 1)
    /**
     * Unique identifier of the aircraft.
     * Example: /// Example: 29232269-e4c2-45c9-aa21-039a33209340
     * Constraints: Minimum length = 1, Maximum length = 36
     */
    val idAircraft : String?
        get() {
            val o = __offset(8)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val idAircraftAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(8, 1)
    fun idAircraftInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 8, 1)
    /**
     * Alternate Aircraft Identifier provided by source.
     * Example: /// Example: ORIG-AIRCRAFT-ID
     * Constraints: Minimum length = 0, Maximum length = 36
     */
    val altAircraftId : String?
        get() {
            val o = __offset(10)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val altAircraftIdAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(10, 1)
    fun altAircraftIdInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 10, 1)
    /**
     * The current readiness state of the aircraft (e.g. AIRBORNE, ALERTCOCKED, AVAILABLE, BATTLESTATION, RUNWAY ALERT, SUITUP).
     * Example: /// Example: AVAILABLE
     * Constraints: Minimum length = 0, Maximum length = 32
     */
    val currentState : String?
        get() {
            val o = __offset(12)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val currentStateAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(12, 1)
    fun currentStateInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 12, 1)
    /**
     * If not airborne, the unique identifier of the installation currently hosting the aircraft.
     * Example: /// Example: b89430e3-97d9-408c-9c89-fd3840c4b84d
     * Constraints: Minimum length = 0, Maximum length = 36
     */
    val idAirfield : String?
        get() {
            val o = __offset(14)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val idAirfieldAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(14, 1)
    fun idAirfieldInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 14, 1)
    /**
     * US Air Force geographic location code of the airfield where the aircraft is located.
     * Example: /// Example: AJJY
     * Constraints: Minimum length = 0, Maximum length = 16
     */
    val geoLoc : String?
        get() {
            val o = __offset(16)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val geoLocAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(16, 1)
    fun geoLocInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 16, 1)
    /**
     * The International Civil Aviation Organization (ICAO) code at which this aircraft was previously located.
     * Example: /// Example: EGLL
     * Constraints: Minimum length = 0, Maximum length = 4
     */
    val previousIcao : String?
        get() {
            val o = __offset(18)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val previousIcaoAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(18, 1)
    fun previousIcaoInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 18, 1)
    /**
     * The International Civil Aviation Organization (ICAO) code at which this aircraft is currently located or has most recently departed, if airborne.
     * Example: /// Example: KCHS
     * Constraints: Minimum length = 0, Maximum length = 4
     */
    val currentIcao : String?
        get() {
            val o = __offset(20)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val currentIcaoAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(20, 1)
    fun currentIcaoInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 20, 1)
    /**
     * The International Civil Aviation Organization (ICAO) code of the next destination of this aircraft.
     * Example: /// Example: PHNL
     * Constraints: Minimum length = 0, Maximum length = 4
     */
    val nextIcao : String?
        get() {
            val o = __offset(22)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val nextIcaoAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(22, 1)
    fun nextIcaoInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 22, 1)
    /**
     * Current flight phase (e.g. AIR REFUELING, GROUND, LANDING, etc.) of the aircraft.
     * Example: /// Example: Landing
     * Constraints: Minimum length = 0, Maximum length = 16
     */
    val flightPhase : String?
        get() {
            val o = __offset(24)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val flightPhaseAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(24, 1)
    fun flightPhaseInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 24, 1)
    /**
     * The turnaround start time, in ISO 8601 UTC format with millisecond precision.
     * Example: /// Example: 2022-01-01T16:00:00.123Z
     * Constraints: No constraints specified.
     */
    val taStartTime : String?
        get() {
            val o = __offset(26)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val taStartTimeAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(26, 1)
    fun taStartTimeInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 26, 1)
    /**
     * The earliest time that turnaround of the aircraft may complete, in ISO 8601 UTC format with millisecond precision.
     * Example: /// Example: 2022-01-01T16:00:00.123Z
     * Constraints: No constraints specified.
     */
    val earliestTaendTime : String?
        get() {
            val o = __offset(28)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val earliestTaendTimeAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(28, 1)
    fun earliestTaendTimeInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 28, 1)
    /**
     * The Operational Capability of the reported aircraft (ABLE, LOFUEL, UNABLE).
     * Example: /// Example: ABLE
     * Constraints: Minimum length = 0, Maximum length = 16
     */
    val missionReadiness : String?
        get() {
            val o = __offset(30)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val missionReadinessAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(30, 1)
    fun missionReadinessInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 30, 1)
    /**
     * The mass of fuel remaining on the aircraft, in kilograms.
     * Example: /// Example: 10
     * Constraints: No constraints specified.
     */
    val fuel : Int
        get() {
            val o = __offset(32)
            return if(o != 0) bb.getInt(o + bb_pos) else 0
        }
    /**
     * Used in conjunction with the fuel field to indicate either burnable or offload fuel.
     * Example: /// Example: Burn
     * Constraints: Minimum length = 0, Maximum length = 8
     */
    val fuelFunction : String?
        get() {
            val o = __offset(34)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val fuelFunctionAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(34, 1)
    fun fuelFunctionInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 34, 1)
    /**
     * Flag indicating that the aircraft is capable of making at least one gun pass.
     * Example: /// Example: True
     * Constraints: No constraints specified.
     */
    val gunCapable : Boolean
        get() {
            val o = __offset(36)
            return if(o != 0) 0.toByte() != bb.get(o + bb_pos) else false
        }
    /**
     * The type of gun rounds available (e.g. 7.62 MM, 20 MM, 25 MM, etc.).
     * Example: /// Example: 7.62 MM
     * Constraints: Minimum length = 0, Maximum length = 64
     */
    val gunRdsType : String?
        get() {
            val o = __offset(38)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val gunRdsTypeAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(38, 1)
    fun gunRdsTypeInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 38, 1)
    /**
     * The lower bound of the estimated number of gun rounds available.
     * Example: /// Example: 150
     * Constraints: No constraints specified.
     */
    val gunRdsMin : Int
        get() {
            val o = __offset(40)
            return if(o != 0) bb.getInt(o + bb_pos) else 0
        }
    /**
     * The upper bound of the estimated number of gun rounds available.
     * Example: /// Example: 550
     * Constraints: No constraints specified.
     */
    val gunRdsMax : Int
        get() {
            val o = __offset(42)
            return if(o != 0) bb.getInt(o + bb_pos) else 0
        }
    /**
     * The status of the air-to-air weapon release system (OPERATIONAL, NON-OPERATIONAL, OFF).
     * Example: /// Example: OPERATIONAL
     * Constraints: Minimum length = 0, Maximum length = 16
     */
    val airToAirStatus : Byte
        get() {
            val o = __offset(44)
            return if(o != 0) bb.get(o + bb_pos) else 0
        }
    /**
     * The status of the air-to-ground weapon release system (OPERATIONAL, NON-OPERATIONAL, OFF).
     * Example: /// Example: OPERATIONAL
     * Constraints: Minimum length = 0, Maximum length = 16
     */
    val airToGroundStatus : Byte
        get() {
            val o = __offset(46)
            return if(o != 0) bb.get(o + bb_pos) else 0
        }
    /**
     * Array of inventory item(s) for which estimate(s) are available (e.g. AIM-9 SIDEWINDER, AIM-120 AMRAAM, AIM-92 STINGER, CHAFF DECOY, FLARE TP 400, etc.).  Intended as, but not constrained to, MIL-STD-6016 environment dependent specific/store type designations.  This array must be the same length as inventoryMin and inventoryMax.
     * Example: /// Example: ['AIM-9 SIDEWINDER', 'AIM-120 AMRAAM']
     * Constraints: No constraints specified.
     */
    fun inventory(j: Int) : String? {
        val o = __offset(48)
        return if (o != 0) {
            __string(__vector(o) + j * 4)
        } else {
            null
        }
    }
    val inventoryLength : Int
        get() {
            val o = __offset(48); return if (o != 0) __vector_len(o) else 0
        }
    /**
     * Array of the lower bound quantity for each of the inventory items. The values in this array must correspond to position index in the inventory array. This array must be the same length as inventory and inventoryMax.
     * Example: /// Example: [1, 2]
     * Constraints: No constraints specified.
     */
    fun inventoryMin(j: Int) : String? {
        val o = __offset(50)
        return if (o != 0) {
            __string(__vector(o) + j * 4)
        } else {
            null
        }
    }
    val inventoryMinLength : Int
        get() {
            val o = __offset(50); return if (o != 0) __vector_len(o) else 0
        }
    /**
     * Array of the upper bound quantity for each of the inventory items. The values in this array must correspond to position index in the inventory array. This array must be the same length as inventory and inventoryMin.
     * Example: /// Example: [2, 2]
     * Constraints: No constraints specified.
     */
    fun inventoryMax(j: Int) : String? {
        val o = __offset(52)
        return if (o != 0) {
            __string(__vector(o) + j * 4)
        } else {
            null
        }
    }
    val inventoryMaxLength : Int
        get() {
            val o = __offset(52); return if (o != 0) __vector_len(o) else 0
        }
    /**
     * List of unavailable systems that would normally be on this aircraft.
     * Example: /// Example: ['CMDS', 'AOC']
     * Constraints: No constraints specified.
     */
    fun unavailableSys(j: Int) : String? {
        val o = __offset(54)
        return if (o != 0) {
            __string(__vector(o) + j * 4)
        } else {
            null
        }
    }
    val unavailableSysLength : Int
        get() {
            val o = __offset(54); return if (o != 0) __vector_len(o) else 0
        }
    /**
     * List of additional operational systems on this aircraft beyond what is normally available.
     * Example: /// Example: ['ATOMS', 'TUDL', 'BLOS1']
     * Constraints: No constraints specified.
     */
    fun additionalSys(j: Int) : String? {
        val o = __offset(56)
        return if (o != 0) {
            __string(__vector(o) + j * 4)
        } else {
            null
        }
    }
    val additionalSysLength : Int
        get() {
            val o = __offset(56); return if (o != 0) __vector_len(o) else 0
        }
    /**
     * Optional notes/comments concerning this aircraft status.
     * Example: /// Example: Some notes for aircraft A
     * Constraints: Minimum length = 0, Maximum length = 1024
     */
    val notes : String?
        get() {
            val o = __offset(58)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val notesAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(58, 1)
    fun notesInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 58, 1)
    /**
     * Maintenance pacing remarks assocociated with this aircraft.
     * Example: /// Example: COM2 INOP
     * Constraints: Minimum length = 0, Maximum length = 1024
     */
    val mxRemark : String?
        get() {
            val o = __offset(60)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val mxRemarkAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(60, 1)
    fun mxRemarkInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 60, 1)
    /**
     * The maintenance status of the aircraft.
     * Example: /// Example: maintenance status
     * Constraints: Minimum length = 0, Maximum length = 24
     */
    val maintStatus : String?
        get() {
            val o = __offset(62)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val maintStatusAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(62, 1)
    fun maintStatusInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 62, 1)
    /**
     * Indicates the maintenance discrepancy that drives the current maintenance status.
     * Example: /// Example: SCREW STUCK IN LEFT NLG TIRE
     * Constraints: Minimum length = 0, Maximum length = 128
     */
    val maintStatusDriver : String?
        get() {
            val o = __offset(64)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val maintStatusDriverAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(64, 1)
    fun maintStatusDriverInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 64, 1)
    /**
     * Indicates the priority of the maintenance effort.
     * Example: /// Example: 1
     * Constraints: Minimum length = 0, Maximum length = 1
     */
    val maintPriority : String?
        get() {
            val o = __offset(66)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val maintPriorityAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(66, 1)
    fun maintPriorityInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 66, 1)
    /**
     * Aircraft alpha status code that indicates the aircraft maintenance status estimated by the pilot.
     * Example: /// Example: A2
     * Constraints: Minimum length = 0, Maximum length = 2
     */
    val alphaStatusCode : String?
        get() {
            val o = __offset(68)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val alphaStatusCodeAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(68, 1)
    fun alphaStatusCodeInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 68, 1)
    /**
     * The time of the last maintenance status update, in ISO 8601 UTC format with millisecond precision.
     * Example: /// Example: 2022-01-01T16:00:00.123Z
     * Constraints: No constraints specified.
     */
    val maintStatusUpdate : String?
        get() {
            val o = __offset(70)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val maintStatusUpdateAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(70, 1)
    fun maintStatusUpdateInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 70, 1)
    /**
     * Date when the military aircraft inspection was last performed, in ISO 8601 UTC format with millisecond precision.
     * Example: /// Example: 2024-09-09T16:00:00.123Z
     * Constraints: No constraints specified.
     */
    val lastInspectionDate : String?
        get() {
            val o = __offset(72)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val lastInspectionDateAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(72, 1)
    fun lastInspectionDateInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 72, 1)
    /**
     * Military aircraft maintenance point of contact for this aircraft.
     * Example: /// Example: PSUP NIGHT SHIFT 800-555-4412
     * Constraints: Minimum length = 0, Maximum length = 32
     */
    val maintPoc : String?
        get() {
            val o = __offset(74)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val maintPocAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(74, 1)
    fun maintPocInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 74, 1)
    /**
     * The ground status of the aircraft (e.g. ALERT, CREW READY, ENGINE START, HANGAR, etc.).
     * Example: /// Example: ALERT
     * Constraints: Minimum length = 0, Maximum length = 24
     */
    val groundStatus : String?
        get() {
            val o = __offset(76)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val groundStatusAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(76, 1)
    fun groundStatusInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 76, 1)
    /**
     * The contamination status of the aircraft (e.g. CLEAR, CONTAMINATED, DECONTAMINATED, UNKNOWN, etc.).
     * Example: /// Example: CLEAR
     * Constraints: Minimum length = 0, Maximum length = 24
     */
    val contaminationStatus : String?
        get() {
            val o = __offset(78)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val contaminationStatusAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(78, 1)
    fun contaminationStatusInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 78, 1)
    /**
     * The state of the aircraft fuel status (e.g. DELIVERED, DUMPED, EMPTY, FULL, OTHER, REQUESTED, etc.).
     * Example: /// Example: DELIVERED
     * Constraints: Minimum length = 0, Maximum length = 24
     */
    val fuelStatus : String?
        get() {
            val o = __offset(80)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val fuelStatusAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(80, 1)
    fun fuelStatusInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 80, 1)
    /**
     * The name or ID of the external user that updated this status.
     * Example: /// Example: some.user
     * Constraints: Minimum length = 0, Maximum length = 36
     */
    val lastUpdatedBy : String?
        get() {
            val o = __offset(82)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val lastUpdatedByAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(82, 1)
    fun lastUpdatedByInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 82, 1)
    /**
     * Estimated Time for Completion (ETIC) of an aircraft issue, in ISO 8601 UTC format with millisecond precision. This is the estimated time when the course of action to resolve the issue will be determined.
     * Example: /// Example: 2022-01-01T16:00:00.123Z
     * Constraints: No constraints specified.
     */
    val troubleshootEtic : String?
        get() {
            val o = __offset(84)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val troubleshootEticAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(84, 1)
    fun troubleshootEticInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 84, 1)
    /**
     * The Expected Time in Commission (ETIC) for this aircraft, in ISO 8601 UTC format with millisecond precision. This is the estimated time when the issue will be resolved.
     * Example: /// Example: 2022-01-01T16:00:00.123Z
     * Constraints: No constraints specified.
     */
    val etic : String?
        get() {
            val o = __offset(86)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val eticAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(86, 1)
    fun eticInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 86, 1)
    /**
     * The parking location of this aircraft.
     * Example: /// Example: B1
     * Constraints: Minimum length = 0, Maximum length = 24
     */
    val parkLocation : String?
        get() {
            val o = __offset(88)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val parkLocationAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(88, 1)
    fun parkLocationInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 88, 1)
    /**
     * The system that designated the parking location (e.g. EMOC, GDSS, PEX, etc.).
     * Example: /// Example: GDSS
     * Constraints: Minimum length = 0, Maximum length = 24
     */
    val parkLocationSystem : String?
        get() {
            val o = __offset(90)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val parkLocationSystemAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(90, 1)
    fun parkLocationSystemInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 90, 1)
    /**
     * Unique identifier of the Point of Interest (POI) record related to this aircraft status. This will generally represent the location of an aircraft on the ground.
     * Example: /// Example: 0e52f081-a2e3-4b73-b822-88b882232691
     * Constraints: Minimum length = 0, Maximum length = 36
     */
    val idPoi : String?
        get() {
            val o = __offset(92)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val idPoiAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(92, 1)
    fun idPoiInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 92, 1)
    /**
     * Time the row was created in the database, auto-populated by the system.
     * Example: /// Example: 2018-01-01T16:00:00.123Z
     * Constraints: No constraints specified.
     */
    val createdAt : String?
        get() {
            val o = __offset(94)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val createdAtAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(94, 1)
    fun createdAtInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 94, 1)
    /**
     * Application user who created the row in the database, auto-populated by the system.
     * Example: /// Example: some.user
     * Constraints: Minimum length = 1, Maximum length = 64
     */
    val createdBy : String?
        get() {
            val o = __offset(96)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val createdByAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(96, 1)
    fun createdByInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 96, 1)
    /**
     * The source data library from which this record was received. This could be a remote or tactical UDL or another data library. If null, the record should be assumed to have originated from the primary Enterprise UDL.
     * Example: /// Example: AXE
     * Constraints: Minimum length = 0, Maximum length = 64
     */
    val sourceDl : String?
        get() {
            val o = __offset(98)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val sourceDlAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(98, 1)
    fun sourceDlInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 98, 1)
    /**
     * Source of the data.
     * Example: /// Example: Bluestaq
     * Constraints: Minimum length = 1, Maximum length = 64
     */
    val source : String?
        get() {
            val o = __offset(100)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val sourceAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(100, 1)
    fun sourceInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 100, 1)
    /**
     * Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
     * Example: /// Example: THIRD_PARTY_DATASOURCE
     * Constraints: Minimum length = 0, Maximum length = 64
     */
    val origin : String?
        get() {
            val o = __offset(102)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val originAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(102, 1)
    fun originInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 102, 1)
    /**
     * Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
     * EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
     * REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
     * SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
     * TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
     * Example: /// Example: TEST
     * Constraints: Minimum length = 1, Maximum length = 32
     */
    val dataMode : Byte
        get() {
            val o = __offset(104)
            return if(o != 0) bb.get(o + bb_pos) else 0
        }
    /**
     * The originating source network on which this record was created, auto-populated by the system.
     * Example: /// Example: OPS1
     * Constraints: Minimum length = 1, Maximum length = 32
     */
    val origNetwork : String?
        get() {
            val o = __offset(106)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val origNetworkAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(106, 1)
    fun origNetworkInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 106, 1)
    companion object {
        fun validateVersion() = Constants.FLATBUFFERS_24_3_25()
        fun getRootAsAircraftStatus_Ingest(_bb: ByteBuffer): AircraftStatus_Ingest = getRootAsAircraftStatus_Ingest(_bb, AircraftStatus_Ingest())
        fun getRootAsAircraftStatus_Ingest(_bb: ByteBuffer, obj: AircraftStatus_Ingest): AircraftStatus_Ingest {
            _bb.order(ByteOrder.LITTLE_ENDIAN)
            return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb))
        }
        fun AircraftStatus_IngestBufferHasIdentifier(_bb: ByteBuffer) : Boolean = __has_identifier(_bb, "AIRC")
        fun createAircraftStatus_Ingest(builder: FlatBufferBuilder, idOffset: Int, classificationMarkingOffset: Int, idAircraftOffset: Int, altAircraftIdOffset: Int, currentStateOffset: Int, idAirfieldOffset: Int, geoLocOffset: Int, previousIcaoOffset: Int, currentIcaoOffset: Int, nextIcaoOffset: Int, flightPhaseOffset: Int, taStartTimeOffset: Int, earliestTaendTimeOffset: Int, missionReadinessOffset: Int, fuel: Int, fuelFunctionOffset: Int, gunCapable: Boolean, gunRdsTypeOffset: Int, gunRdsMin: Int, gunRdsMax: Int, airToAirStatus: Byte, airToGroundStatus: Byte, inventoryOffset: Int, inventoryMinOffset: Int, inventoryMaxOffset: Int, unavailableSysOffset: Int, additionalSysOffset: Int, notesOffset: Int, mxRemarkOffset: Int, maintStatusOffset: Int, maintStatusDriverOffset: Int, maintPriorityOffset: Int, alphaStatusCodeOffset: Int, maintStatusUpdateOffset: Int, lastInspectionDateOffset: Int, maintPocOffset: Int, groundStatusOffset: Int, contaminationStatusOffset: Int, fuelStatusOffset: Int, lastUpdatedByOffset: Int, troubleshootEticOffset: Int, eticOffset: Int, parkLocationOffset: Int, parkLocationSystemOffset: Int, idPoiOffset: Int, createdAtOffset: Int, createdByOffset: Int, sourceDlOffset: Int, sourceOffset: Int, originOffset: Int, dataMode: Byte, origNetworkOffset: Int) : Int {
            builder.startTable(52)
            addOrigNetwork(builder, origNetworkOffset)
            addOrigin(builder, originOffset)
            addSource(builder, sourceOffset)
            addSourceDL(builder, sourceDlOffset)
            addCreatedBy(builder, createdByOffset)
            addCreatedAt(builder, createdAtOffset)
            addIdPOI(builder, idPoiOffset)
            addParkLocationSystem(builder, parkLocationSystemOffset)
            addParkLocation(builder, parkLocationOffset)
            addEtic(builder, eticOffset)
            addTroubleshootEtic(builder, troubleshootEticOffset)
            addLastUpdatedBy(builder, lastUpdatedByOffset)
            addFuelStatus(builder, fuelStatusOffset)
            addContaminationStatus(builder, contaminationStatusOffset)
            addGroundStatus(builder, groundStatusOffset)
            addMaintPoc(builder, maintPocOffset)
            addLastInspectionDate(builder, lastInspectionDateOffset)
            addMaintStatusUpdate(builder, maintStatusUpdateOffset)
            addAlphaStatusCode(builder, alphaStatusCodeOffset)
            addMaintPriority(builder, maintPriorityOffset)
            addMaintStatusDriver(builder, maintStatusDriverOffset)
            addMaintStatus(builder, maintStatusOffset)
            addMxRemark(builder, mxRemarkOffset)
            addNotes(builder, notesOffset)
            addAdditionalSys(builder, additionalSysOffset)
            addUnavailableSys(builder, unavailableSysOffset)
            addInventoryMax(builder, inventoryMaxOffset)
            addInventoryMin(builder, inventoryMinOffset)
            addInventory(builder, inventoryOffset)
            addGunRdsMax(builder, gunRdsMax)
            addGunRdsMin(builder, gunRdsMin)
            addGunRdsType(builder, gunRdsTypeOffset)
            addFuelFunction(builder, fuelFunctionOffset)
            addFuel(builder, fuel)
            addMissionReadiness(builder, missionReadinessOffset)
            addEarliestTAEndTime(builder, earliestTaendTimeOffset)
            addTaStartTime(builder, taStartTimeOffset)
            addFlightPhase(builder, flightPhaseOffset)
            addNextICAO(builder, nextIcaoOffset)
            addCurrentICAO(builder, currentIcaoOffset)
            addPreviousICAO(builder, previousIcaoOffset)
            addGeoLoc(builder, geoLocOffset)
            addIdAirfield(builder, idAirfieldOffset)
            addCurrentState(builder, currentStateOffset)
            addAltAircraftId(builder, altAircraftIdOffset)
            addIdAircraft(builder, idAircraftOffset)
            addClassificationMarking(builder, classificationMarkingOffset)
            addId(builder, idOffset)
            addDataMode(builder, dataMode)
            addAirToGroundStatus(builder, airToGroundStatus)
            addAirToAirStatus(builder, airToAirStatus)
            addGunCapable(builder, gunCapable)
            return endAircraftStatus_Ingest(builder)
        }
        fun startAircraftStatus_Ingest(builder: FlatBufferBuilder) = builder.startTable(52)
        fun addId(builder: FlatBufferBuilder, id: Int) = builder.addOffset(0, id, 0)
        fun addClassificationMarking(builder: FlatBufferBuilder, classificationMarking: Int) = builder.addOffset(1, classificationMarking, 0)
        fun addIdAircraft(builder: FlatBufferBuilder, idAircraft: Int) = builder.addOffset(2, idAircraft, 0)
        fun addAltAircraftId(builder: FlatBufferBuilder, altAircraftId: Int) = builder.addOffset(3, altAircraftId, 0)
        fun addCurrentState(builder: FlatBufferBuilder, currentState: Int) = builder.addOffset(4, currentState, 0)
        fun addIdAirfield(builder: FlatBufferBuilder, idAirfield: Int) = builder.addOffset(5, idAirfield, 0)
        fun addGeoLoc(builder: FlatBufferBuilder, geoLoc: Int) = builder.addOffset(6, geoLoc, 0)
        fun addPreviousICAO(builder: FlatBufferBuilder, previousIcao: Int) = builder.addOffset(7, previousIcao, 0)
        fun addCurrentICAO(builder: FlatBufferBuilder, currentIcao: Int) = builder.addOffset(8, currentIcao, 0)
        fun addNextICAO(builder: FlatBufferBuilder, nextIcao: Int) = builder.addOffset(9, nextIcao, 0)
        fun addFlightPhase(builder: FlatBufferBuilder, flightPhase: Int) = builder.addOffset(10, flightPhase, 0)
        fun addTaStartTime(builder: FlatBufferBuilder, taStartTime: Int) = builder.addOffset(11, taStartTime, 0)
        fun addEarliestTAEndTime(builder: FlatBufferBuilder, earliestTaendTime: Int) = builder.addOffset(12, earliestTaendTime, 0)
        fun addMissionReadiness(builder: FlatBufferBuilder, missionReadiness: Int) = builder.addOffset(13, missionReadiness, 0)
        fun addFuel(builder: FlatBufferBuilder, fuel: Int) = builder.addInt(14, fuel, 0)
        fun addFuelFunction(builder: FlatBufferBuilder, fuelFunction: Int) = builder.addOffset(15, fuelFunction, 0)
        fun addGunCapable(builder: FlatBufferBuilder, gunCapable: Boolean) = builder.addBoolean(16, gunCapable, false)
        fun addGunRdsType(builder: FlatBufferBuilder, gunRdsType: Int) = builder.addOffset(17, gunRdsType, 0)
        fun addGunRdsMin(builder: FlatBufferBuilder, gunRdsMin: Int) = builder.addInt(18, gunRdsMin, 0)
        fun addGunRdsMax(builder: FlatBufferBuilder, gunRdsMax: Int) = builder.addInt(19, gunRdsMax, 0)
        fun addAirToAirStatus(builder: FlatBufferBuilder, airToAirStatus: Byte) = builder.addByte(20, airToAirStatus, 0)
        fun addAirToGroundStatus(builder: FlatBufferBuilder, airToGroundStatus: Byte) = builder.addByte(21, airToGroundStatus, 0)
        fun addInventory(builder: FlatBufferBuilder, inventory: Int) = builder.addOffset(22, inventory, 0)
        fun createInventoryVector(builder: FlatBufferBuilder, data: IntArray) : Int {
            builder.startVector(4, data.size, 4)
            for (i in data.size - 1 downTo 0) {
                builder.addOffset(data[i])
            }
            return builder.endVector()
        }
        fun startInventoryVector(builder: FlatBufferBuilder, numElems: Int) = builder.startVector(4, numElems, 4)
        fun addInventoryMin(builder: FlatBufferBuilder, inventoryMin: Int) = builder.addOffset(23, inventoryMin, 0)
        fun createInventoryMinVector(builder: FlatBufferBuilder, data: IntArray) : Int {
            builder.startVector(4, data.size, 4)
            for (i in data.size - 1 downTo 0) {
                builder.addOffset(data[i])
            }
            return builder.endVector()
        }
        fun startInventoryMinVector(builder: FlatBufferBuilder, numElems: Int) = builder.startVector(4, numElems, 4)
        fun addInventoryMax(builder: FlatBufferBuilder, inventoryMax: Int) = builder.addOffset(24, inventoryMax, 0)
        fun createInventoryMaxVector(builder: FlatBufferBuilder, data: IntArray) : Int {
            builder.startVector(4, data.size, 4)
            for (i in data.size - 1 downTo 0) {
                builder.addOffset(data[i])
            }
            return builder.endVector()
        }
        fun startInventoryMaxVector(builder: FlatBufferBuilder, numElems: Int) = builder.startVector(4, numElems, 4)
        fun addUnavailableSys(builder: FlatBufferBuilder, unavailableSys: Int) = builder.addOffset(25, unavailableSys, 0)
        fun createUnavailableSysVector(builder: FlatBufferBuilder, data: IntArray) : Int {
            builder.startVector(4, data.size, 4)
            for (i in data.size - 1 downTo 0) {
                builder.addOffset(data[i])
            }
            return builder.endVector()
        }
        fun startUnavailableSysVector(builder: FlatBufferBuilder, numElems: Int) = builder.startVector(4, numElems, 4)
        fun addAdditionalSys(builder: FlatBufferBuilder, additionalSys: Int) = builder.addOffset(26, additionalSys, 0)
        fun createAdditionalSysVector(builder: FlatBufferBuilder, data: IntArray) : Int {
            builder.startVector(4, data.size, 4)
            for (i in data.size - 1 downTo 0) {
                builder.addOffset(data[i])
            }
            return builder.endVector()
        }
        fun startAdditionalSysVector(builder: FlatBufferBuilder, numElems: Int) = builder.startVector(4, numElems, 4)
        fun addNotes(builder: FlatBufferBuilder, notes: Int) = builder.addOffset(27, notes, 0)
        fun addMxRemark(builder: FlatBufferBuilder, mxRemark: Int) = builder.addOffset(28, mxRemark, 0)
        fun addMaintStatus(builder: FlatBufferBuilder, maintStatus: Int) = builder.addOffset(29, maintStatus, 0)
        fun addMaintStatusDriver(builder: FlatBufferBuilder, maintStatusDriver: Int) = builder.addOffset(30, maintStatusDriver, 0)
        fun addMaintPriority(builder: FlatBufferBuilder, maintPriority: Int) = builder.addOffset(31, maintPriority, 0)
        fun addAlphaStatusCode(builder: FlatBufferBuilder, alphaStatusCode: Int) = builder.addOffset(32, alphaStatusCode, 0)
        fun addMaintStatusUpdate(builder: FlatBufferBuilder, maintStatusUpdate: Int) = builder.addOffset(33, maintStatusUpdate, 0)
        fun addLastInspectionDate(builder: FlatBufferBuilder, lastInspectionDate: Int) = builder.addOffset(34, lastInspectionDate, 0)
        fun addMaintPoc(builder: FlatBufferBuilder, maintPoc: Int) = builder.addOffset(35, maintPoc, 0)
        fun addGroundStatus(builder: FlatBufferBuilder, groundStatus: Int) = builder.addOffset(36, groundStatus, 0)
        fun addContaminationStatus(builder: FlatBufferBuilder, contaminationStatus: Int) = builder.addOffset(37, contaminationStatus, 0)
        fun addFuelStatus(builder: FlatBufferBuilder, fuelStatus: Int) = builder.addOffset(38, fuelStatus, 0)
        fun addLastUpdatedBy(builder: FlatBufferBuilder, lastUpdatedBy: Int) = builder.addOffset(39, lastUpdatedBy, 0)
        fun addTroubleshootEtic(builder: FlatBufferBuilder, troubleshootEtic: Int) = builder.addOffset(40, troubleshootEtic, 0)
        fun addEtic(builder: FlatBufferBuilder, etic: Int) = builder.addOffset(41, etic, 0)
        fun addParkLocation(builder: FlatBufferBuilder, parkLocation: Int) = builder.addOffset(42, parkLocation, 0)
        fun addParkLocationSystem(builder: FlatBufferBuilder, parkLocationSystem: Int) = builder.addOffset(43, parkLocationSystem, 0)
        fun addIdPOI(builder: FlatBufferBuilder, idPoi: Int) = builder.addOffset(44, idPoi, 0)
        fun addCreatedAt(builder: FlatBufferBuilder, createdAt: Int) = builder.addOffset(45, createdAt, 0)
        fun addCreatedBy(builder: FlatBufferBuilder, createdBy: Int) = builder.addOffset(46, createdBy, 0)
        fun addSourceDL(builder: FlatBufferBuilder, sourceDl: Int) = builder.addOffset(47, sourceDl, 0)
        fun addSource(builder: FlatBufferBuilder, source: Int) = builder.addOffset(48, source, 0)
        fun addOrigin(builder: FlatBufferBuilder, origin: Int) = builder.addOffset(49, origin, 0)
        fun addDataMode(builder: FlatBufferBuilder, dataMode: Byte) = builder.addByte(50, dataMode, 0)
        fun addOrigNetwork(builder: FlatBufferBuilder, origNetwork: Int) = builder.addOffset(51, origNetwork, 0)
        fun endAircraftStatus_Ingest(builder: FlatBufferBuilder) : Int {
            val o = builder.endTable()
            return o
        }
        fun finishAircraftStatusIngestBuffer(builder: FlatBufferBuilder, offset: Int) = builder.finish(offset, "AIRC")
        fun finishSizePrefixedAircraftStatus_IngestBuffer(builder: FlatBufferBuilder, offset: Int) = builder.finishSizePrefixed(offset, "AIRC")
    }
}
