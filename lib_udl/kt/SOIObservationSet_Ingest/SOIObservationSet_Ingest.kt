// automatically generated by the FlatBuffers compiler, do not modify

import com.google.flatbuffers.BaseVector
import com.google.flatbuffers.BooleanVector
import com.google.flatbuffers.ByteVector
import com.google.flatbuffers.Constants
import com.google.flatbuffers.DoubleVector
import com.google.flatbuffers.FlatBufferBuilder
import com.google.flatbuffers.FloatVector
import com.google.flatbuffers.LongVector
import com.google.flatbuffers.StringVector
import com.google.flatbuffers.Struct
import com.google.flatbuffers.Table
import com.google.flatbuffers.UnionVector
import java.nio.ByteBuffer
import java.nio.ByteOrder
import kotlin.math.sign

/**
 * /// These services provide operations for posting space object idenfification observation sets.
 */
@Suppress("unused")
class SOIObservationSet_Ingest : Table() {

    fun __init(_i: Int, _bb: ByteBuffer)  {
        __reset(_i, _bb)
    }
    fun __assign(_i: Int, _bb: ByteBuffer) : SOIObservationSet_Ingest {
        __init(_i, _bb)
        return this
    }
    /**
     * Unique identifier of the record, auto-generated by the system.
     * Example: /// Example: 026dd511-8ba5-47d3-9909-836149f87686
     * Constraints: Minimum length = 1, Maximum length = 36
     */
    val id : String?
        get() {
            val o = __offset(4)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val idAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(4, 1)
    fun idInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 4, 1)
    /**
     * Classification marking of the data in IC/CAPCO Portion-marked format.
     * Example: /// Example: U
     * Constraints: Minimum length = 1, Maximum length = 128
     */
    val classificationMarking : String?
        get() {
            val o = __offset(6)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val classificationMarkingAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(6, 1)
    fun classificationMarkingInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 6, 1)
    /**
     * SOI msgCreateDate time in ISO 8601 UTC time, with millisecond precision.
     * Example: /// Example: 2022-07-07T16:00:00.123Z
     * Constraints: No constraints specified.
     */
    val msgCreateDate : String?
        get() {
            val o = __offset(8)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val msgCreateDateAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(8, 1)
    fun msgCreateDateInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 8, 1)
    /**
     * ID of the observing sensor.
     * Example: /// Example: SENSOR-ID
     * Constraints: Minimum length = 0, Maximum length = 36
     */
    val idSensor : String?
        get() {
            val o = __offset(10)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val idSensorAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(10, 1)
    fun idSensorInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 10, 1)
    /**
     * Optional identifier provided by the record source to indicate the sensor identifier to which this attitude set applies if this set is reporting a single sensor orientation. This may be an internal identifier and not necessarily a valid sensor ID.
     * Example: /// Example: ORIGSENSOR-ID
     * Constraints: Minimum length = 0, Maximum length = 64
     */
    val origSensorId : String?
        get() {
            val o = __offset(12)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val origSensorIdAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(12, 1)
    fun origSensorIdInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 12, 1)
    /**
     * ID of the AttitudeSet record for the observing sensor.
     * Example: /// Example: 026dd511-8ba5-47d3-9909-836149f87686
     * Constraints: Minimum length = 0, Maximum length = 36
     */
    val sensorAsId : String?
        get() {
            val o = __offset(14)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val sensorAsIdAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(14, 1)
    fun sensorAsIdInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 14, 1)
    /**
     * Unique identifier of the target on-orbit object, if correlated.
     * Example: /// Example: ONORBIT-ID
     * Constraints: Minimum length = 0, Maximum length = 36
     */
    val idOnOrbit : String?
        get() {
            val o = __offset(16)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val idOnOrbitAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(16, 1)
    fun idOnOrbitInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 16, 1)
    /**
     * Satellite/catalog number of the target on-orbit object.
     * Example: /// Example: 101
     * Constraints: No constraints specified.
     */
    val satNo : Int
        get() {
            val o = __offset(18)
            return if(o != 0) bb.getInt(o + bb_pos) else 0
        }
    /**
     * Optional identifier provided by observation source to indicate the target onorbit object of this observation. This may be an internal identifier and not necessarily a valid satellite number.
     * Example: /// Example: ORIGOBJECT-ID
     * Constraints: Minimum length = 0, Maximum length = 36
     */
    val origObjectId : String?
        get() {
            val o = __offset(20)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val origObjectIdAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(20, 1)
    fun origObjectIdInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 20, 1)
    /**
     * Sensor WGS84 latitude at startTime (if mobile/onorbit) in degrees. If null, can be obtained from sensor info. -90 to 90 degrees (negative values south of equator).
     * Example: /// Example: 45.1
     * Constraints: No constraints specified.
     */
    val senlat : Double
        get() {
            val o = __offset(22)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Sensor WGS84 longitude at startTime (if mobile/onorbit) in degrees. If null, can be obtained from sensor info. -180 to 180 degrees (negative values south of equator).
     * Example: /// Example: 179.1
     * Constraints: No constraints specified.
     */
    val senlon : Double
        get() {
            val o = __offset(24)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Sensor altitude at startTime (if mobile/onorbit) in kilometers.
     * Example: /// Example: 1.1
     * Constraints: No constraints specified.
     */
    val senalt : Double
        get() {
            val o = __offset(26)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Cartesian X position of the observing mobile/onorbit sensor at startTime, in kilometers, in the specified senReferenceFrame. If senReferenceFrame is null then J2K should be assumed.
     * Example: /// Example: 1.1
     * Constraints: No constraints specified.
     */
    val senx : Double
        get() {
            val o = __offset(28)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Cartesian Y position of the observing mobile/onorbit sensor at startTime, in kilometers, in the specified senReferenceFrame. If senReferenceFrame is null then J2K should be assumed.
     * Example: /// Example: 1.1
     * Constraints: No constraints specified.
     */
    val seny : Double
        get() {
            val o = __offset(30)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Cartesian Z position of the observing mobile/onorbit sensor at startTime, in kilometers, in the specified senReferenceFrame. If senReferenceFrame is null then J2K should be assumed.
     * Example: /// Example: 1.1
     * Constraints: No constraints specified.
     */
    val senz : Double
        get() {
            val o = __offset(32)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Cartesian X velocity of the observing mobile/onorbit sensor at startTime, in kilometers per second, in the specified senReferenceFrame. If senReferenceFrame is null then J2K should be assumed.
     * Example: /// Example: 1.1
     * Constraints: No constraints specified.
     */
    val senvelx : Double
        get() {
            val o = __offset(34)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Cartesian Y velocity of the observing mobile/onorbit sensor at startTime, in kilometers per second, in the specified senReferenceFrame. If senReferenceFrame is null then J2K should be assumed.
     * Example: /// Example: 1.1
     * Constraints: No constraints specified.
     */
    val senvely : Double
        get() {
            val o = __offset(36)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Cartesian Z velocity of the observing mobile/onorbit sensor at startTime, in kilometers per second, in the specified senReferenceFrame. If senReferenceFrame is null then J2K should be assumed.
     * Example: /// Example: 1.1
     * Constraints: No constraints specified.
     */
    val senvelz : Double
        get() {
            val o = __offset(38)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * ID of the UDL Elset of the Space Object under observation.
     * Example: /// Example: REF-ELSET-ID
     * Constraints: Minimum length = 0, Maximum length = 36
     */
    val idElset : String?
        get() {
            val o = __offset(40)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val idElsetAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(40, 1)
    fun idElsetInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 40, 1)
    /**
     * Observation set detection start time in ISO 8601 UTC with microsecond precision.
     * Example: /// Example: 2018-01-01T16:00:00.123456Z
     * Constraints: No constraints specified.
     */
    val startTime : String?
        get() {
            val o = __offset(42)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val startTimeAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(42, 1)
    fun startTimeInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 42, 1)
    /**
     * Observation set detection end time in ISO 8601 UTC with microsecond precision.
     * Example: /// Example: 2018-01-01T16:00:00.123456Z
     * Constraints: No constraints specified.
     */
    val endTime : String?
        get() {
            val o = __offset(44)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val endTimeAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(44, 1)
    fun endTimeInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 44, 1)
    /**
     * The number of observation records in the set.
     * Example: /// Example: 1
     * Constraints: No constraints specified.
     */
    val numObs : Int
        get() {
            val o = __offset(46)
            return if(o != 0) bb.getInt(o + bb_pos) else 0
        }
    /**
     * Observation type (OPTICAL, RADAR).
     * Example: /// Example: OPTICAL
     * Constraints: Minimum length = 1, Maximum length = 24
     */
    val type : Byte
        get() {
            val o = __offset(48)
            return if(o != 0) bb.get(o + bb_pos) else 0
        }
    /**
     * Polar angle of the gimbal/mount at observation set detection start time in degrees.
     * Example: /// Example: 1.1
     * Constraints: No constraints specified.
     */
    val polarAngleStart : Double
        get() {
            val o = __offset(50)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Polar angle of the gimbal/mount at observation set detection end time in degrees.
     * Example: /// Example: 1.1
     * Constraints: No constraints specified.
     */
    val polarAngleEnd : Double
        get() {
            val o = __offset(52)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * The reference frame of the observation measurements. If the referenceFrame is null it is assumed to be J2000.
     * Example: /// Example: J2000
     * Constraints: Minimum length = 0, Maximum length = 24
     */
    val referenceFrame : Byte
        get() {
            val o = __offset(54)
            return if(o != 0) bb.get(o + bb_pos) else 0
        }
    /**
     * The reference frame of the observing sensor state. If the senReferenceFrame is null it is assumed to be J2000.
     * Example: /// Example: J2000
     * Constraints: Minimum length = 0, Maximum length = 24
     */
    val senReferenceFrame : Byte
        get() {
            val o = __offset(56)
            return if(o != 0) bb.get(o + bb_pos) else 0
        }
    /**
     * Line of sight declination at observation set detection start time. Specified in degrees, in the specified referenceFrame. If referenceFrame is null then J2K should be assumed (e.g -30 to 130.0).
     * Example: /// Example: 1.1
     * Constraints: No constraints specified.
     */
    val losDeclinationStart : Double
        get() {
            val o = __offset(58)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Line of sight declination at observation set detection end time. Specified in degrees, in the specified referenceFrame. If referenceFrame is null then J2K should be assumed (e.g -30 to 130.0).
     * Example: /// Example: 1.1
     * Constraints: No constraints specified.
     */
    val losDeclinationEnd : Double
        get() {
            val o = __offset(60)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Pointing angle of the Azimuth gimbal/mount at observation set detection start time. Specified in degrees.
     * Example: /// Example: 1.1
     * Constraints: No constraints specified.
     */
    val pointingAngleAzStart : Double
        get() {
            val o = __offset(62)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Pointing angle of the Azimuth gimbal/mount at observation set detection end time. Specified in degrees.
     * Example: /// Example: 1.1
     * Constraints: No constraints specified.
     */
    val pointingAngleAzEnd : Double
        get() {
            val o = __offset(64)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Pointing angle of the Elevation gimbal/mount at observation set detection start time. Specified in degrees.
     * Example: /// Example: 1.1
     * Constraints: No constraints specified.
     */
    val pointingAngleElStart : Double
        get() {
            val o = __offset(66)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Pointing angle of the Elevation gimbal/mount at observation set detection end time. Specified in degrees.
     * Example: /// Example: 1.1
     * Constraints: No constraints specified.
     */
    val pointingAngleElEnd : Double
        get() {
            val o = __offset(68)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Pixel array size (width) in pixels.
     * Example: /// Example: 32
     * Constraints: No constraints specified.
     */
    val pixelArrayWidth : Int
        get() {
            val o = __offset(70)
            return if(o != 0) bb.getInt(o + bb_pos) else 0
        }
    /**
     * Pixel array size (height) in pixels.
     * Example: /// Example: 32
     * Constraints: No constraints specified.
     */
    val pixelArrayHeight : Int
        get() {
            val o = __offset(72)
            return if(o != 0) bb.getInt(o + bb_pos) else 0
        }
    /**
     * The value is the number of spectral filters used.
     * Example: /// Example: 10
     * Constraints: No constraints specified.
     */
    val numSpectralFilters : Int
        get() {
            val o = __offset(74)
            return if(o != 0) bb.getInt(o + bb_pos) else 0
        }
    /**
     * Array of the SpectralFilters keywords, must be present for all values n=1 to numSpectralFilters, in incrementing order of n, and for no other values of n.
     * Example: /// Example: ['Keyword1', 'Keyword2']
     * Constraints: No constraints specified.
     */
    fun spectralFilters(j: Int) : String? {
        val o = __offset(76)
        return if (o != 0) {
            __string(__vector(o) + j * 4)
        } else {
            null
        }
    }
    val spectralFiltersLength : Int
        get() {
            val o = __offset(76); return if (o != 0) __vector_len(o) else 0
        }
    /**
     * Mode indicating telescope movement during collection (AUTOTRACK, MANUAL AUTOTRACK, MANUAL RATE TRACK, MANUAL SIDEREAL, SIDEREAL, RATE TRACK).
     * Example: /// Example: RATE TRACK
     * Constraints: Minimum length = 0, Maximum length = 32
     */
    val collectionMode : String?
        get() {
            val o = __offset(78)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val collectionModeAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(78, 1)
    fun collectionModeInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 78, 1)
    /**
     * The gain used during the collection, in units of photoelectrons per analog-to-digital unit (e-/ADU). If no gain is used, the value = 1.
     * Example: /// Example: 234.2
     * Constraints: No constraints specified.
     */
    val gain : Double
        get() {
            val o = __offset(80)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * The number of pixels binned horizontally.
     * Example: /// Example: 2
     * Constraints: No constraints specified.
     */
    val binningHoriz : Int
        get() {
            val o = __offset(82)
            return if(o != 0) bb.getInt(o + bb_pos) else 0
        }
    /**
     * The number of pixels binned vertically.
     * Example: /// Example: 2
     * Constraints: No constraints specified.
     */
    val binningVert : Int
        get() {
            val o = __offset(84)
            return if(o != 0) bb.getInt(o + bb_pos) else 0
        }
    /**
     * The in-band solar magnitude at 1 A.U.
     * Example: /// Example: -26.91
     * Constraints: No constraints specified.
     */
    val solarMag : Double
        get() {
            val o = __offset(86)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * The minimum valid pixel value.
     * Example: /// Example: 0
     * Constraints: No constraints specified.
     */
    val pixelMin : Int
        get() {
            val o = __offset(88)
            return if(o != 0) bb.getInt(o + bb_pos) else 0
        }
    /**
     * The maximum valid pixel value.
     * Example: /// Example: 16383
     * Constraints: No constraints specified.
     */
    val pixelMax : Int
        get() {
            val o = __offset(90)
            return if(o != 0) bb.getInt(o + bb_pos) else 0
        }
    /**
     * Software Version used to Capture, Process, and Deliver the data.
     * Example: /// Example: GSV99/17-1
     * Constraints: Minimum length = 0, Maximum length = 70
     */
    val softwareVersion : String?
        get() {
            val o = __offset(92)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val softwareVersionAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(92, 1)
    fun softwareVersionInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 92, 1)
    /**
     * Name of the target satellite.
     * Example: /// Example: TITAN 3C TRANSTAGE R/B
     * Constraints: Minimum length = 0, Maximum length = 70
     */
    val satelliteName : String?
        get() {
            val o = __offset(94)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val satelliteNameAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(94, 1)
    fun satelliteNameInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 94, 1)
    /**
     * Name of the Star Catalog used for photometry and astrometry.
     * Example: /// Example: SSTRC5
     * Constraints: Minimum length = 0, Maximum length = 70
     */
    val starCatName : String?
        get() {
            val o = __offset(96)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val starCatNameAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(96, 1)
    fun starCatNameInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 96, 1)
    /**
     * Object Correlation Quality value. Measures how close the observed object's orbit is to matching an object in the catalog. The scale of this field may vary depending on provider. Users should consult the data provider to verify the meaning of the value (e.g. A value of 0.0 indicates a high/strong correlation, while a value closer to 1.0 indicates low/weak correlation).
     * Example: /// Example: 0.327
     * Constraints: No constraints specified.
     */
    val corrQuality : Double
        get() {
            val o = __offset(98)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Boolean indicating whether the target object was unable to be correlated to a known object. This flag should only be set to true by data providers after an attempt to correlate to an OnOrbit object was made and failed. If unable to correlate, the 'origObjectId' field may be populated with an internal data provider specific identifier.
     * Example: /// Example: True
     * Constraints: No constraints specified.
     */
    val uct : Boolean
        get() {
            val o = __offset(100)
            return if(o != 0) 0.toByte() != bb.get(o + bb_pos) else false
        }
    /**
     * Key to indicate which, if any of, the pre/post photometer calibrations are valid for use when generating data for the EOSSA file. If the field is not populated, then the provided calibration data will be used when generating the EOSSA file (e.g. PRE, POST, BOTH, NONE).
     * Example: /// Example: BOTH
     * Constraints: Minimum length = 0, Maximum length = 16
     */
    val validCalibrations : String?
        get() {
            val o = __offset(102)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val validCalibrationsAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(102, 1)
    fun validCalibrationsInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 102, 1)
    /**
     * Type of calibration used by the Sensor (e.g. ALL SKY, DIFFERENTIAL, DEFAULT, NONE).
     * Example: /// Example: ALL SKY
     * Constraints: Minimum length = 0, Maximum length = 32
     */
    val calibrationType : String?
        get() {
            val o = __offset(104)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val calibrationTypeAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(104, 1)
    fun calibrationTypeInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 104, 1)
    /**
     * A threshold for percent of pixels that make up object signal that are beyond the saturation point for the sensor that are removed in the EOSSA file, in range of 0 to 1.
     * Example: /// Example: 0.1
     * Constraints: No constraints specified.
     */
    val percentSatThreshold : Double
        get() {
            val o = __offset(106)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Boolean indicating if any change event was detected, based on historical collection data for the object.
     * Example: /// Example: True
     * Constraints: No constraints specified.
     */
    val changeDetected : Boolean
        get() {
            val o = __offset(108)
            return if(o != 0) 0.toByte() != bb.get(o + bb_pos) else false
        }
    /**
     * Boolean indicating if a periodicity change event was detected, based on historical collection data for the object.
     * Example: /// Example: True
     * Constraints: No constraints specified.
     */
    val periodicityChangeDetected : Boolean
        get() {
            val o = __offset(110)
            return if(o != 0) 0.toByte() != bb.get(o + bb_pos) else false
        }
    /**
     * Boolean indicating if a brightness variance change event was detected, based on historical collection data for the object.
     * Example: /// Example: True
     * Constraints: No constraints specified.
     */
    val brightnessVarianceChangeDetected : Boolean
        get() {
            val o = __offset(112)
            return if(o != 0) 0.toByte() != bb.get(o + bb_pos) else false
        }
    /**
     * Boolean indicating if a solar phase angle brightness change event was detected, based on historical collection data for the object.
     * Example: /// Example: True
     * Constraints: No constraints specified.
     */
    val solarPhaseAngleBrightnessChangeDetected : Boolean
        get() {
            val o = __offset(114)
            return if(o != 0) 0.toByte() != bb.get(o + bb_pos) else false
        }
    /**
     * Overall qualitative confidence assessment of change detection results (e.g. HIGH, MEDIUM, LOW).
     * Example: /// Example: MEDIUM
     * Constraints: Minimum length = 0, Maximum length = 16
     */
    val changeConf : String?
        get() {
            val o = __offset(116)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val changeConfAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(116, 1)
    fun changeConfInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 116, 1)
    /**
     * Qualitative Collection Density assessment, with respect to confidence of detecting a change event (e.g. HIGH, MEDIUM, LOW).
     * Example: /// Example: MEDIUM
     * Constraints: Minimum length = 0, Maximum length = 16
     */
    val collectionDensityConf : String?
        get() {
            val o = __offset(118)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val collectionDensityConfAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(118, 1)
    fun collectionDensityConfInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 118, 1)
    /**
     * Qualitative Periodicity Sampling assessment, with respect to confidence of detecting a change event (e.g. HIGH, MEDIUM, LOW).
     * Example: /// Example: MEDIUM
     * Constraints: Minimum length = 0, Maximum length = 16
     */
    val periodicitySamplingConf : String?
        get() {
            val o = __offset(120)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val periodicitySamplingConfAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(120, 1)
    fun periodicitySamplingConfInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 120, 1)
    /**
     * Qualitative assessment of the periodicity detection results from the Attitude and Shape Retrieval (ASR) Periodicity Assessment (PA) Tool (e.g. HIGH, MEDIUM, LOW).
     * Example: /// Example: MEDIUM
     * Constraints: Minimum length = 0, Maximum length = 16
     */
    val periodicityDetectionConf : String?
        get() {
            val o = __offset(122)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val periodicityDetectionConfAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(122, 1)
    fun periodicityDetectionConfInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 122, 1)
    /**
     * Universally Unique collection ID. Mechanism to correlate Single Point Photometry (SPP) JSON files to images.
     * Example: /// Example: b5133288-ab63-4b15-81f6-c7eec0cdb0c0
     * Constraints: Minimum length = 0, Maximum length = 36
     */
    val collectionId : String?
        get() {
            val o = __offset(124)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val collectionIdAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(124, 1)
    fun collectionIdInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 124, 1)
    /**
     * Array of SOI Calibrations associated with this SOIObservationSet.
     * Example: /// Example: No example provided.
     * Constraints: No constraints specified.
     */
    fun calibrations(j: Int) : String? {
        val o = __offset(126)
        return if (o != 0) {
            __string(__vector(o) + j * 4)
        } else {
            null
        }
    }
    val calibrationsLength : Int
        get() {
            val o = __offset(126); return if (o != 0) __vector_len(o) else 0
        }
    /**
     * Optional array of provider/source specific tags for this data, where each element is no longer than 32 characters, used for implementing data owner conditional access controls to restrict access to the data. Should be left null by data providers unless conditional access controls are coordinated with the UDL team.
     * Example: /// Example: ['TAG1', 'TAG2']
     * Constraints: No constraints specified.
     */
    fun tags(j: Int) : String? {
        val o = __offset(128)
        return if (o != 0) {
            __string(__vector(o) + j * 4)
        } else {
            null
        }
    }
    val tagsLength : Int
        get() {
            val o = __offset(128); return if (o != 0) __vector_len(o) else 0
        }
    /**
     * Optional identifier to track a commercial or marketplace transaction executed to produce this data.
     * Example: /// Example: TRANSACTION-ID
     * Constraints: Minimum length = 0, Maximum length = 64
     */
    val transactionId : String?
        get() {
            val o = __offset(130)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val transactionIdAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(130, 1)
    fun transactionIdInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 130, 1)
    /**
     * OpticalSOIObservations associated with this SOIObservationSet.
     * Example: /// Example: No example provided.
     * Constraints: No constraints specified.
     */
    fun opticalSoiobservationList(j: Int) : String? {
        val o = __offset(132)
        return if (o != 0) {
            __string(__vector(o) + j * 4)
        } else {
            null
        }
    }
    val opticalSoiobservationListLength : Int
        get() {
            val o = __offset(132); return if (o != 0) __vector_len(o) else 0
        }
    /**
     * RadarSOIObservations associated with this RadarSOIObservationSet.
     * Example: /// Example: No example provided.
     * Constraints: No constraints specified.
     */
    fun radarSoiobservationList(j: Int) : String? {
        val o = __offset(134)
        return if (o != 0) {
            __string(__vector(o) + j * 4)
        } else {
            null
        }
    }
    val radarSoiobservationListLength : Int
        get() {
            val o = __offset(134); return if (o != 0) __vector_len(o) else 0
        }
    /**
     * Time the row was created in the database, auto-populated by the system.
     * Example: /// Example: 2018-01-01T16:00:00.123Z
     * Constraints: No constraints specified.
     */
    val createdAt : String?
        get() {
            val o = __offset(136)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val createdAtAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(136, 1)
    fun createdAtInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 136, 1)
    /**
     * Application user who created the row in the database, auto-populated by the system.
     * Example: /// Example: some.user
     * Constraints: Minimum length = 0, Maximum length = 64
     */
    val createdBy : String?
        get() {
            val o = __offset(138)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val createdByAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(138, 1)
    fun createdByInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 138, 1)
    /**
     * Source of the data.
     * Example: /// Example: Bluestaq
     * Constraints: Minimum length = 1, Maximum length = 64
     */
    val source : String?
        get() {
            val o = __offset(140)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val sourceAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(140, 1)
    fun sourceInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 140, 1)
    /**
     * Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
     * Example: /// Example: THIRD_PARTY_DATASOURCE
     * Constraints: Minimum length = 0, Maximum length = 64
     */
    val origin : String?
        get() {
            val o = __offset(142)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val originAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(142, 1)
    fun originInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 142, 1)
    /**
     * The originating source network on which this record was created, auto-populated by the system.
     * Example: /// Example: OPS1
     * Constraints: Minimum length = 1, Maximum length = 32
     */
    val origNetwork : String?
        get() {
            val o = __offset(144)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val origNetworkAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(144, 1)
    fun origNetworkInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 144, 1)
    /**
     * The source data library from which this record was received. This could be a remote or tactical UDL or another data library. If null, the record should be assumed to have originated from the primary Enterprise UDL.
     * Example: /// Example: AXE
     * Constraints: Minimum length = 0, Maximum length = 64
     */
    val sourceDl : String?
        get() {
            val o = __offset(146)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val sourceDlAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(146, 1)
    fun sourceDlInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 146, 1)
    /**
     * Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
     * EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
     * REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
     * SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
     * TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
     * Example: /// Example: TEST
     * Constraints: Minimum length = 1, Maximum length = 32
     */
    val dataMode : Byte
        get() {
            val o = __offset(148)
            return if(o != 0) bb.get(o + bb_pos) else 0
        }
    companion object {
        fun validateVersion() = Constants.FLATBUFFERS_24_3_25()
        fun getRootAsSOIObservationSet_Ingest(_bb: ByteBuffer): SOIObservationSet_Ingest = getRootAsSOIObservationSet_Ingest(_bb, SOIObservationSet_Ingest())
        fun getRootAsSOIObservationSet_Ingest(_bb: ByteBuffer, obj: SOIObservationSet_Ingest): SOIObservationSet_Ingest {
            _bb.order(ByteOrder.LITTLE_ENDIAN)
            return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb))
        }
        fun SOIObservationSet_IngestBufferHasIdentifier(_bb: ByteBuffer) : Boolean = __has_identifier(_bb, "SOIO")
        fun createSOIObservationSet_Ingest(builder: FlatBufferBuilder, idOffset: Int, classificationMarkingOffset: Int, msgCreateDateOffset: Int, idSensorOffset: Int, origSensorIdOffset: Int, sensorAsIdOffset: Int, idOnOrbitOffset: Int, satNo: Int, origObjectIdOffset: Int, senlat: Double, senlon: Double, senalt: Double, senx: Double, seny: Double, senz: Double, senvelx: Double, senvely: Double, senvelz: Double, idElsetOffset: Int, startTimeOffset: Int, endTimeOffset: Int, numObs: Int, type: Byte, polarAngleStart: Double, polarAngleEnd: Double, referenceFrame: Byte, senReferenceFrame: Byte, losDeclinationStart: Double, losDeclinationEnd: Double, pointingAngleAzStart: Double, pointingAngleAzEnd: Double, pointingAngleElStart: Double, pointingAngleElEnd: Double, pixelArrayWidth: Int, pixelArrayHeight: Int, numSpectralFilters: Int, spectralFiltersOffset: Int, collectionModeOffset: Int, gain: Double, binningHoriz: Int, binningVert: Int, solarMag: Double, pixelMin: Int, pixelMax: Int, softwareVersionOffset: Int, satelliteNameOffset: Int, starCatNameOffset: Int, corrQuality: Double, uct: Boolean, validCalibrationsOffset: Int, calibrationTypeOffset: Int, percentSatThreshold: Double, changeDetected: Boolean, periodicityChangeDetected: Boolean, brightnessVarianceChangeDetected: Boolean, solarPhaseAngleBrightnessChangeDetected: Boolean, changeConfOffset: Int, collectionDensityConfOffset: Int, periodicitySamplingConfOffset: Int, periodicityDetectionConfOffset: Int, collectionIdOffset: Int, calibrationsOffset: Int, tagsOffset: Int, transactionIdOffset: Int, opticalSoiobservationListOffset: Int, radarSoiobservationListOffset: Int, createdAtOffset: Int, createdByOffset: Int, sourceOffset: Int, originOffset: Int, origNetworkOffset: Int, sourceDlOffset: Int, dataMode: Byte) : Int {
            builder.startTable(73)
            addPercentSatThreshold(builder, percentSatThreshold)
            addCorrQuality(builder, corrQuality)
            addSolarMag(builder, solarMag)
            addGain(builder, gain)
            addPointingAngleElEnd(builder, pointingAngleElEnd)
            addPointingAngleElStart(builder, pointingAngleElStart)
            addPointingAngleAzEnd(builder, pointingAngleAzEnd)
            addPointingAngleAzStart(builder, pointingAngleAzStart)
            addLosDeclinationEnd(builder, losDeclinationEnd)
            addLosDeclinationStart(builder, losDeclinationStart)
            addPolarAngleEnd(builder, polarAngleEnd)
            addPolarAngleStart(builder, polarAngleStart)
            addSenvelz(builder, senvelz)
            addSenvely(builder, senvely)
            addSenvelx(builder, senvelx)
            addSenz(builder, senz)
            addSeny(builder, seny)
            addSenx(builder, senx)
            addSenalt(builder, senalt)
            addSenlon(builder, senlon)
            addSenlat(builder, senlat)
            addSourceDL(builder, sourceDlOffset)
            addOrigNetwork(builder, origNetworkOffset)
            addOrigin(builder, originOffset)
            addSource(builder, sourceOffset)
            addCreatedBy(builder, createdByOffset)
            addCreatedAt(builder, createdAtOffset)
            addRadarSOIObservationList(builder, radarSoiobservationListOffset)
            addOpticalSOIObservationList(builder, opticalSoiobservationListOffset)
            addTransactionId(builder, transactionIdOffset)
            addTags(builder, tagsOffset)
            addCalibrations(builder, calibrationsOffset)
            addCollectionId(builder, collectionIdOffset)
            addPeriodicityDetectionConf(builder, periodicityDetectionConfOffset)
            addPeriodicitySamplingConf(builder, periodicitySamplingConfOffset)
            addCollectionDensityConf(builder, collectionDensityConfOffset)
            addChangeConf(builder, changeConfOffset)
            addCalibrationType(builder, calibrationTypeOffset)
            addValidCalibrations(builder, validCalibrationsOffset)
            addStarCatName(builder, starCatNameOffset)
            addSatelliteName(builder, satelliteNameOffset)
            addSoftwareVersion(builder, softwareVersionOffset)
            addPixelMax(builder, pixelMax)
            addPixelMin(builder, pixelMin)
            addBinningVert(builder, binningVert)
            addBinningHoriz(builder, binningHoriz)
            addCollectionMode(builder, collectionModeOffset)
            addSpectralFilters(builder, spectralFiltersOffset)
            addNumSpectralFilters(builder, numSpectralFilters)
            addPixelArrayHeight(builder, pixelArrayHeight)
            addPixelArrayWidth(builder, pixelArrayWidth)
            addNumObs(builder, numObs)
            addEndTime(builder, endTimeOffset)
            addStartTime(builder, startTimeOffset)
            addIdElset(builder, idElsetOffset)
            addOrigObjectId(builder, origObjectIdOffset)
            addSatNo(builder, satNo)
            addIdOnOrbit(builder, idOnOrbitOffset)
            addSensorAsId(builder, sensorAsIdOffset)
            addOrigSensorId(builder, origSensorIdOffset)
            addIdSensor(builder, idSensorOffset)
            addMsgCreateDate(builder, msgCreateDateOffset)
            addClassificationMarking(builder, classificationMarkingOffset)
            addId(builder, idOffset)
            addDataMode(builder, dataMode)
            addSolarPhaseAngleBrightnessChangeDetected(builder, solarPhaseAngleBrightnessChangeDetected)
            addBrightnessVarianceChangeDetected(builder, brightnessVarianceChangeDetected)
            addPeriodicityChangeDetected(builder, periodicityChangeDetected)
            addChangeDetected(builder, changeDetected)
            addUct(builder, uct)
            addSenReferenceFrame(builder, senReferenceFrame)
            addReferenceFrame(builder, referenceFrame)
            addType(builder, type)
            return endSOIObservationSet_Ingest(builder)
        }
        fun startSOIObservationSet_Ingest(builder: FlatBufferBuilder) = builder.startTable(73)
        fun addId(builder: FlatBufferBuilder, id: Int) = builder.addOffset(0, id, 0)
        fun addClassificationMarking(builder: FlatBufferBuilder, classificationMarking: Int) = builder.addOffset(1, classificationMarking, 0)
        fun addMsgCreateDate(builder: FlatBufferBuilder, msgCreateDate: Int) = builder.addOffset(2, msgCreateDate, 0)
        fun addIdSensor(builder: FlatBufferBuilder, idSensor: Int) = builder.addOffset(3, idSensor, 0)
        fun addOrigSensorId(builder: FlatBufferBuilder, origSensorId: Int) = builder.addOffset(4, origSensorId, 0)
        fun addSensorAsId(builder: FlatBufferBuilder, sensorAsId: Int) = builder.addOffset(5, sensorAsId, 0)
        fun addIdOnOrbit(builder: FlatBufferBuilder, idOnOrbit: Int) = builder.addOffset(6, idOnOrbit, 0)
        fun addSatNo(builder: FlatBufferBuilder, satNo: Int) = builder.addInt(7, satNo, 0)
        fun addOrigObjectId(builder: FlatBufferBuilder, origObjectId: Int) = builder.addOffset(8, origObjectId, 0)
        fun addSenlat(builder: FlatBufferBuilder, senlat: Double) = builder.addDouble(9, senlat, 0.0)
        fun addSenlon(builder: FlatBufferBuilder, senlon: Double) = builder.addDouble(10, senlon, 0.0)
        fun addSenalt(builder: FlatBufferBuilder, senalt: Double) = builder.addDouble(11, senalt, 0.0)
        fun addSenx(builder: FlatBufferBuilder, senx: Double) = builder.addDouble(12, senx, 0.0)
        fun addSeny(builder: FlatBufferBuilder, seny: Double) = builder.addDouble(13, seny, 0.0)
        fun addSenz(builder: FlatBufferBuilder, senz: Double) = builder.addDouble(14, senz, 0.0)
        fun addSenvelx(builder: FlatBufferBuilder, senvelx: Double) = builder.addDouble(15, senvelx, 0.0)
        fun addSenvely(builder: FlatBufferBuilder, senvely: Double) = builder.addDouble(16, senvely, 0.0)
        fun addSenvelz(builder: FlatBufferBuilder, senvelz: Double) = builder.addDouble(17, senvelz, 0.0)
        fun addIdElset(builder: FlatBufferBuilder, idElset: Int) = builder.addOffset(18, idElset, 0)
        fun addStartTime(builder: FlatBufferBuilder, startTime: Int) = builder.addOffset(19, startTime, 0)
        fun addEndTime(builder: FlatBufferBuilder, endTime: Int) = builder.addOffset(20, endTime, 0)
        fun addNumObs(builder: FlatBufferBuilder, numObs: Int) = builder.addInt(21, numObs, 0)
        fun addType(builder: FlatBufferBuilder, type: Byte) = builder.addByte(22, type, 0)
        fun addPolarAngleStart(builder: FlatBufferBuilder, polarAngleStart: Double) = builder.addDouble(23, polarAngleStart, 0.0)
        fun addPolarAngleEnd(builder: FlatBufferBuilder, polarAngleEnd: Double) = builder.addDouble(24, polarAngleEnd, 0.0)
        fun addReferenceFrame(builder: FlatBufferBuilder, referenceFrame: Byte) = builder.addByte(25, referenceFrame, 0)
        fun addSenReferenceFrame(builder: FlatBufferBuilder, senReferenceFrame: Byte) = builder.addByte(26, senReferenceFrame, 0)
        fun addLosDeclinationStart(builder: FlatBufferBuilder, losDeclinationStart: Double) = builder.addDouble(27, losDeclinationStart, 0.0)
        fun addLosDeclinationEnd(builder: FlatBufferBuilder, losDeclinationEnd: Double) = builder.addDouble(28, losDeclinationEnd, 0.0)
        fun addPointingAngleAzStart(builder: FlatBufferBuilder, pointingAngleAzStart: Double) = builder.addDouble(29, pointingAngleAzStart, 0.0)
        fun addPointingAngleAzEnd(builder: FlatBufferBuilder, pointingAngleAzEnd: Double) = builder.addDouble(30, pointingAngleAzEnd, 0.0)
        fun addPointingAngleElStart(builder: FlatBufferBuilder, pointingAngleElStart: Double) = builder.addDouble(31, pointingAngleElStart, 0.0)
        fun addPointingAngleElEnd(builder: FlatBufferBuilder, pointingAngleElEnd: Double) = builder.addDouble(32, pointingAngleElEnd, 0.0)
        fun addPixelArrayWidth(builder: FlatBufferBuilder, pixelArrayWidth: Int) = builder.addInt(33, pixelArrayWidth, 0)
        fun addPixelArrayHeight(builder: FlatBufferBuilder, pixelArrayHeight: Int) = builder.addInt(34, pixelArrayHeight, 0)
        fun addNumSpectralFilters(builder: FlatBufferBuilder, numSpectralFilters: Int) = builder.addInt(35, numSpectralFilters, 0)
        fun addSpectralFilters(builder: FlatBufferBuilder, spectralFilters: Int) = builder.addOffset(36, spectralFilters, 0)
        fun createSpectralFiltersVector(builder: FlatBufferBuilder, data: IntArray) : Int {
            builder.startVector(4, data.size, 4)
            for (i in data.size - 1 downTo 0) {
                builder.addOffset(data[i])
            }
            return builder.endVector()
        }
        fun startSpectralFiltersVector(builder: FlatBufferBuilder, numElems: Int) = builder.startVector(4, numElems, 4)
        fun addCollectionMode(builder: FlatBufferBuilder, collectionMode: Int) = builder.addOffset(37, collectionMode, 0)
        fun addGain(builder: FlatBufferBuilder, gain: Double) = builder.addDouble(38, gain, 0.0)
        fun addBinningHoriz(builder: FlatBufferBuilder, binningHoriz: Int) = builder.addInt(39, binningHoriz, 0)
        fun addBinningVert(builder: FlatBufferBuilder, binningVert: Int) = builder.addInt(40, binningVert, 0)
        fun addSolarMag(builder: FlatBufferBuilder, solarMag: Double) = builder.addDouble(41, solarMag, 0.0)
        fun addPixelMin(builder: FlatBufferBuilder, pixelMin: Int) = builder.addInt(42, pixelMin, 0)
        fun addPixelMax(builder: FlatBufferBuilder, pixelMax: Int) = builder.addInt(43, pixelMax, 0)
        fun addSoftwareVersion(builder: FlatBufferBuilder, softwareVersion: Int) = builder.addOffset(44, softwareVersion, 0)
        fun addSatelliteName(builder: FlatBufferBuilder, satelliteName: Int) = builder.addOffset(45, satelliteName, 0)
        fun addStarCatName(builder: FlatBufferBuilder, starCatName: Int) = builder.addOffset(46, starCatName, 0)
        fun addCorrQuality(builder: FlatBufferBuilder, corrQuality: Double) = builder.addDouble(47, corrQuality, 0.0)
        fun addUct(builder: FlatBufferBuilder, uct: Boolean) = builder.addBoolean(48, uct, false)
        fun addValidCalibrations(builder: FlatBufferBuilder, validCalibrations: Int) = builder.addOffset(49, validCalibrations, 0)
        fun addCalibrationType(builder: FlatBufferBuilder, calibrationType: Int) = builder.addOffset(50, calibrationType, 0)
        fun addPercentSatThreshold(builder: FlatBufferBuilder, percentSatThreshold: Double) = builder.addDouble(51, percentSatThreshold, 0.0)
        fun addChangeDetected(builder: FlatBufferBuilder, changeDetected: Boolean) = builder.addBoolean(52, changeDetected, false)
        fun addPeriodicityChangeDetected(builder: FlatBufferBuilder, periodicityChangeDetected: Boolean) = builder.addBoolean(53, periodicityChangeDetected, false)
        fun addBrightnessVarianceChangeDetected(builder: FlatBufferBuilder, brightnessVarianceChangeDetected: Boolean) = builder.addBoolean(54, brightnessVarianceChangeDetected, false)
        fun addSolarPhaseAngleBrightnessChangeDetected(builder: FlatBufferBuilder, solarPhaseAngleBrightnessChangeDetected: Boolean) = builder.addBoolean(55, solarPhaseAngleBrightnessChangeDetected, false)
        fun addChangeConf(builder: FlatBufferBuilder, changeConf: Int) = builder.addOffset(56, changeConf, 0)
        fun addCollectionDensityConf(builder: FlatBufferBuilder, collectionDensityConf: Int) = builder.addOffset(57, collectionDensityConf, 0)
        fun addPeriodicitySamplingConf(builder: FlatBufferBuilder, periodicitySamplingConf: Int) = builder.addOffset(58, periodicitySamplingConf, 0)
        fun addPeriodicityDetectionConf(builder: FlatBufferBuilder, periodicityDetectionConf: Int) = builder.addOffset(59, periodicityDetectionConf, 0)
        fun addCollectionId(builder: FlatBufferBuilder, collectionId: Int) = builder.addOffset(60, collectionId, 0)
        fun addCalibrations(builder: FlatBufferBuilder, calibrations: Int) = builder.addOffset(61, calibrations, 0)
        fun createCalibrationsVector(builder: FlatBufferBuilder, data: IntArray) : Int {
            builder.startVector(4, data.size, 4)
            for (i in data.size - 1 downTo 0) {
                builder.addOffset(data[i])
            }
            return builder.endVector()
        }
        fun startCalibrationsVector(builder: FlatBufferBuilder, numElems: Int) = builder.startVector(4, numElems, 4)
        fun addTags(builder: FlatBufferBuilder, tags: Int) = builder.addOffset(62, tags, 0)
        fun createTagsVector(builder: FlatBufferBuilder, data: IntArray) : Int {
            builder.startVector(4, data.size, 4)
            for (i in data.size - 1 downTo 0) {
                builder.addOffset(data[i])
            }
            return builder.endVector()
        }
        fun startTagsVector(builder: FlatBufferBuilder, numElems: Int) = builder.startVector(4, numElems, 4)
        fun addTransactionId(builder: FlatBufferBuilder, transactionId: Int) = builder.addOffset(63, transactionId, 0)
        fun addOpticalSOIObservationList(builder: FlatBufferBuilder, opticalSoiobservationList: Int) = builder.addOffset(64, opticalSoiobservationList, 0)
        fun createOpticalSoiobservationListVector(builder: FlatBufferBuilder, data: IntArray) : Int {
            builder.startVector(4, data.size, 4)
            for (i in data.size - 1 downTo 0) {
                builder.addOffset(data[i])
            }
            return builder.endVector()
        }
        fun startOpticalSoiobservationListVector(builder: FlatBufferBuilder, numElems: Int) = builder.startVector(4, numElems, 4)
        fun addRadarSOIObservationList(builder: FlatBufferBuilder, radarSoiobservationList: Int) = builder.addOffset(65, radarSoiobservationList, 0)
        fun createRadarSoiobservationListVector(builder: FlatBufferBuilder, data: IntArray) : Int {
            builder.startVector(4, data.size, 4)
            for (i in data.size - 1 downTo 0) {
                builder.addOffset(data[i])
            }
            return builder.endVector()
        }
        fun startRadarSoiobservationListVector(builder: FlatBufferBuilder, numElems: Int) = builder.startVector(4, numElems, 4)
        fun addCreatedAt(builder: FlatBufferBuilder, createdAt: Int) = builder.addOffset(66, createdAt, 0)
        fun addCreatedBy(builder: FlatBufferBuilder, createdBy: Int) = builder.addOffset(67, createdBy, 0)
        fun addSource(builder: FlatBufferBuilder, source: Int) = builder.addOffset(68, source, 0)
        fun addOrigin(builder: FlatBufferBuilder, origin: Int) = builder.addOffset(69, origin, 0)
        fun addOrigNetwork(builder: FlatBufferBuilder, origNetwork: Int) = builder.addOffset(70, origNetwork, 0)
        fun addSourceDL(builder: FlatBufferBuilder, sourceDl: Int) = builder.addOffset(71, sourceDl, 0)
        fun addDataMode(builder: FlatBufferBuilder, dataMode: Byte) = builder.addByte(72, dataMode, 0)
        fun endSOIObservationSet_Ingest(builder: FlatBufferBuilder) : Int {
            val o = builder.endTable()
            return o
        }
        fun finishSOIObservationSetIngestBuffer(builder: FlatBufferBuilder, offset: Int) = builder.finish(offset, "SOIO")
        fun finishSizePrefixedSOIObservationSet_IngestBuffer(builder: FlatBufferBuilder, offset: Int) = builder.finishSizePrefixed(offset, "SOIO")
    }
}
