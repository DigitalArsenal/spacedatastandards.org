// automatically generated by the FlatBuffers compiler, do not modify

import com.google.flatbuffers.BaseVector
import com.google.flatbuffers.BooleanVector
import com.google.flatbuffers.ByteVector
import com.google.flatbuffers.Constants
import com.google.flatbuffers.DoubleVector
import com.google.flatbuffers.FlatBufferBuilder
import com.google.flatbuffers.FloatVector
import com.google.flatbuffers.LongVector
import com.google.flatbuffers.StringVector
import com.google.flatbuffers.Struct
import com.google.flatbuffers.Table
import com.google.flatbuffers.UnionVector
import java.nio.ByteBuffer
import java.nio.ByteOrder
import kotlin.math.sign

/**
 * /// Array of point data for this Point Group.
 */
@Suppress("unused")
class FlightPlanPoints_Abridged : Table() {

    fun __init(_i: Int, _bb: ByteBuffer)  {
        __reset(_i, _bb)
    }
    fun __assign(_i: Int, _bb: ByteBuffer) : FlightPlanPoints_Abridged {
        __init(_i, _bb)
        return this
    }
    /**
     * Name of this point.
     * Example: /// Example: CRUISE ALTITUDE ETP
     * Constraints: Minimum length = 0, Maximum length = 36
     */
    val pointName : String?
        get() {
            val o = __offset(4)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val pointNameAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(4, 1)
    fun pointNameInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 4, 1)
    /**
     * WGS84 latitude of the point location, in degrees. -90 to 90 degrees (negative values south of equator).
     * Example: /// Example: 45.23
     * Constraints: No constraints specified.
     */
    val fppLat : Double
        get() {
            val o = __offset(6)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * WGS84 longitude of the point location, in degrees. -180 to 180 degrees (negative values west of Prime Meridian).
     * Example: /// Example: 179.1
     * Constraints: No constraints specified.
     */
    val fppLon : Double
        get() {
            val o = __offset(8)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Estimated Time of Arrival (ETA) at this point in ISO 8601 UTC format, with millisecond precision.
     * Example: /// Example: 2023-09-09T01:00:00.123Z
     * Constraints: No constraints specified.
     */
    val fppEta : String?
        get() {
            val o = __offset(10)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val fppEtaAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(10, 1)
    fun fppEtaInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 10, 1)
    /**
     * Fuel required at this point to execute an Equal Time Point (ETP) or Extended Operations (ETOPS) plan in pounds.
     * Example: /// Example: 4250.1
     * Constraints: No constraints specified.
     */
    val fppReqFuel : Double
        get() {
            val o = __offset(12)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    companion object {
        fun validateVersion() = Constants.FLATBUFFERS_24_3_25()
        fun getRootAsFlightPlanPoints_Abridged(_bb: ByteBuffer): FlightPlanPoints_Abridged = getRootAsFlightPlanPoints_Abridged(_bb, FlightPlanPoints_Abridged())
        fun getRootAsFlightPlanPoints_Abridged(_bb: ByteBuffer, obj: FlightPlanPoints_Abridged): FlightPlanPoints_Abridged {
            _bb.order(ByteOrder.LITTLE_ENDIAN)
            return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb))
        }
        fun FlightPlanPoints_AbridgedBufferHasIdentifier(_bb: ByteBuffer) : Boolean = __has_identifier(_bb, "FLIG")
        fun createFlightPlanPoints_Abridged(builder: FlatBufferBuilder, pointNameOffset: Int, fppLat: Double, fppLon: Double, fppEtaOffset: Int, fppReqFuel: Double) : Int {
            builder.startTable(5)
            addFppReqFuel(builder, fppReqFuel)
            addFppLon(builder, fppLon)
            addFppLat(builder, fppLat)
            addFppEta(builder, fppEtaOffset)
            addPointName(builder, pointNameOffset)
            return endFlightPlanPoints_Abridged(builder)
        }
        fun startFlightPlanPoints_Abridged(builder: FlatBufferBuilder) = builder.startTable(5)
        fun addPointName(builder: FlatBufferBuilder, pointName: Int) = builder.addOffset(0, pointName, 0)
        fun addFppLat(builder: FlatBufferBuilder, fppLat: Double) = builder.addDouble(1, fppLat, 0.0)
        fun addFppLon(builder: FlatBufferBuilder, fppLon: Double) = builder.addDouble(2, fppLon, 0.0)
        fun addFppEta(builder: FlatBufferBuilder, fppEta: Int) = builder.addOffset(3, fppEta, 0)
        fun addFppReqFuel(builder: FlatBufferBuilder, fppReqFuel: Double) = builder.addDouble(4, fppReqFuel, 0.0)
        fun endFlightPlanPoints_Abridged(builder: FlatBufferBuilder) : Int {
            val o = builder.endTable()
            return o
        }
        fun finishFlightPlanPointsAbridgedBuffer(builder: FlatBufferBuilder, offset: Int) = builder.finish(offset, "FLIG")
        fun finishSizePrefixedFlightPlanPoints_AbridgedBuffer(builder: FlatBufferBuilder, offset: Int) = builder.finishSizePrefixed(offset, "FLIG")
    }
}
