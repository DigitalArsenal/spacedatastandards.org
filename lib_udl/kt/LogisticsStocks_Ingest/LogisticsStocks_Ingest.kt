// automatically generated by the FlatBuffers compiler, do not modify

import com.google.flatbuffers.BaseVector
import com.google.flatbuffers.BooleanVector
import com.google.flatbuffers.ByteVector
import com.google.flatbuffers.Constants
import com.google.flatbuffers.DoubleVector
import com.google.flatbuffers.FlatBufferBuilder
import com.google.flatbuffers.FloatVector
import com.google.flatbuffers.LongVector
import com.google.flatbuffers.StringVector
import com.google.flatbuffers.Struct
import com.google.flatbuffers.Table
import com.google.flatbuffers.UnionVector
import java.nio.ByteBuffer
import java.nio.ByteOrder
import kotlin.math.sign

/**
 * /// The supply stocks for this support item.
 */
@Suppress("unused")
class LogisticsStocks_Ingest : Table() {

    fun __init(_i: Int, _bb: ByteBuffer)  {
        __reset(_i, _bb)
    }
    fun __assign(_i: Int, _bb: ByteBuffer) : LogisticsStocks_Ingest {
        __init(_i, _bb)
        return this
    }
    /**
     * The ICAO code for the primary location with available parts.
     * Example: /// Example: PHIK
     * Constraints: Minimum length = 0, Maximum length = 4
     */
    val sourceIcao : String?
        get() {
            val o = __offset(4)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val sourceIcaoAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(4, 1)
    fun sourceIcaoInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 4, 1)
    /**
     * The quantity of available parts needed from sourceICAO.
     * Example: /// Example: 4
     * Constraints: No constraints specified.
     */
    val quantity : Int
        get() {
            val o = __offset(6)
            return if(o != 0) bb.getInt(o + bb_pos) else 0
        }
    /**
     * The datetime when the parts were sourced, in ISO 8601 UTC format with millisecond precision.
     * Example: /// Example: 2023-07-13T13:47:00.123Z
     * Constraints: No constraints specified.
     */
    val stockCheckTime : String?
        get() {
            val o = __offset(8)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val stockCheckTimeAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(8, 1)
    fun stockCheckTimeInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 8, 1)
    /**
     * The point of contact at the sourced location.
     * Example: /// Example: SMITH, JOHN J
     * Constraints: Minimum length = 0, Maximum length = 68
     */
    val stockPoc : String?
        get() {
            val o = __offset(10)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val stockPocAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(10, 1)
    fun stockPocInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 10, 1)
    companion object {
        fun validateVersion() = Constants.FLATBUFFERS_24_3_25()
        fun getRootAsLogisticsStocks_Ingest(_bb: ByteBuffer): LogisticsStocks_Ingest = getRootAsLogisticsStocks_Ingest(_bb, LogisticsStocks_Ingest())
        fun getRootAsLogisticsStocks_Ingest(_bb: ByteBuffer, obj: LogisticsStocks_Ingest): LogisticsStocks_Ingest {
            _bb.order(ByteOrder.LITTLE_ENDIAN)
            return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb))
        }
        fun LogisticsStocks_IngestBufferHasIdentifier(_bb: ByteBuffer) : Boolean = __has_identifier(_bb, "LOGI")
        fun createLogisticsStocks_Ingest(builder: FlatBufferBuilder, sourceIcaoOffset: Int, quantity: Int, stockCheckTimeOffset: Int, stockPocOffset: Int) : Int {
            builder.startTable(4)
            addStockPOC(builder, stockPocOffset)
            addStockCheckTime(builder, stockCheckTimeOffset)
            addQuantity(builder, quantity)
            addSourceICAO(builder, sourceIcaoOffset)
            return endLogisticsStocks_Ingest(builder)
        }
        fun startLogisticsStocks_Ingest(builder: FlatBufferBuilder) = builder.startTable(4)
        fun addSourceICAO(builder: FlatBufferBuilder, sourceIcao: Int) = builder.addOffset(0, sourceIcao, 0)
        fun addQuantity(builder: FlatBufferBuilder, quantity: Int) = builder.addInt(1, quantity, 0)
        fun addStockCheckTime(builder: FlatBufferBuilder, stockCheckTime: Int) = builder.addOffset(2, stockCheckTime, 0)
        fun addStockPOC(builder: FlatBufferBuilder, stockPoc: Int) = builder.addOffset(3, stockPoc, 0)
        fun endLogisticsStocks_Ingest(builder: FlatBufferBuilder) : Int {
            val o = builder.endTable()
            return o
        }
        fun finishLogisticsStocksIngestBuffer(builder: FlatBufferBuilder, offset: Int) = builder.finish(offset, "LOGI")
        fun finishSizePrefixedLogisticsStocks_IngestBuffer(builder: FlatBufferBuilder, offset: Int) = builder.finishSizePrefixed(offset, "LOGI")
    }
}
