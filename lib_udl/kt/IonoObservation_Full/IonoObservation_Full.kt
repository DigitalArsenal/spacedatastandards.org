// automatically generated by the FlatBuffers compiler, do not modify

import com.google.flatbuffers.BaseVector
import com.google.flatbuffers.BooleanVector
import com.google.flatbuffers.ByteVector
import com.google.flatbuffers.Constants
import com.google.flatbuffers.DoubleVector
import com.google.flatbuffers.FlatBufferBuilder
import com.google.flatbuffers.FloatVector
import com.google.flatbuffers.LongVector
import com.google.flatbuffers.StringVector
import com.google.flatbuffers.Struct
import com.google.flatbuffers.Table
import com.google.flatbuffers.UnionVector
import java.nio.ByteBuffer
import java.nio.ByteOrder
import kotlin.math.sign

/**
 * /// These services provide operations for posting and querying ionospheric observation data. Characteristics are defined by the CHARS: URSI IIWG format for archiving monthly ionospheric characteristics, INAG Bulletin No. 62 specification. Qualifying and Descriptive letters are defined by the URSI Handbook for Ionogram Interpretation and reduction, Report UAG, No. 23A specification.
 */
@Suppress("unused")
class IonoObservation_Full : Table() {

    fun __init(_i: Int, _bb: ByteBuffer)  {
        __reset(_i, _bb)
    }
    fun __assign(_i: Int, _bb: ByteBuffer) : IonoObservation_Full {
        __init(_i, _bb)
        return this
    }
    /**
     * Unique identifier of the record, auto-generated by the system.
     * Example: /// Example: IONOOBSERVATION-ID
     * Constraints: Minimum length = 1, Maximum length = 36
     */
    val id : String?
        get() {
            val o = __offset(4)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val idAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(4, 1)
    fun idInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 4, 1)
    /**
     * Classification marking of the data in IC/CAPCO Portion-marked format.
     * Example: /// Example: U
     * Constraints: Minimum length = 1, Maximum length = 128
     */
    val classificationMarking : String?
        get() {
            val o = __offset(6)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val classificationMarkingAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(6, 1)
    fun classificationMarkingInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 6, 1)
    /**
     * Unique identifier of the reporting sensor.
     * Example: /// Example: SENSOR-ID
     * Constraints: Minimum length = 0, Maximum length = 36
     */
    val idSensor : String?
        get() {
            val o = __offset(8)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val idSensorAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(8, 1)
    fun idSensorInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 8, 1)
    /**
     * Optional identifier provided by observation source to indicate the sensor identifier which produced this observation. This may be an internal identifier and not necessarily a valid sensor ID.
     * Example: /// Example: ORIGSENSOR-ID
     * Constraints: Minimum length = 0, Maximum length = 64
     */
    val origSensorId : String?
        get() {
            val o = __offset(10)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val origSensorIdAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(10, 1)
    fun origSensorIdInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 10, 1)
    /**
     * Ionosonde hardware type or data collection type together with possible additional descriptors.
     * Example: /// Example: Example hardware type
     * Constraints: Minimum length = 1, Maximum length = 64
     */
    val system : String?
        get() {
            val o = __offset(12)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val systemAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(12, 1)
    fun systemInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 12, 1)
    /**
     * Name of the algorithm used for the electron density profile.
     * Example: /// Example: NH
     * Constraints: Minimum length = 0, Maximum length = 64
     */
    val neProfileName : String?
        get() {
            val o = __offset(14)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val neProfileNameAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(14, 1)
    fun neProfileNameInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 14, 1)
    /**
     * Version of the algorithm used for the electron density profile.
     * Example: /// Example: 4.32
     * Constraints: No constraints specified.
     */
    val neProfileVersion : Double
        get() {
            val o = __offset(16)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * No description provided.
     * Example: /// Example: No example provided.
     * Constraints: No constraints specified.
     */
    val scalerInfo : String?
        get() {
            val o = __offset(18)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val scalerInfoAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(18, 1)
    fun scalerInfoInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 18, 1)
    /**
     * No description provided.
     * Example: /// Example: No example provided.
     * Constraints: No constraints specified.
     */
    val densityProfile : String?
        get() {
            val o = __offset(20)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val densityProfileAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(20, 1)
    fun densityProfileInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 20, 1)
    /**
     * URSI code for station or stations producing the ionosonde.
     * Example: /// Example: STATION-ID
     * Constraints: Minimum length = 1, Maximum length = 64
     */
    val stationId : String?
        get() {
            val o = __offset(22)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val stationIdAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(22, 1)
    fun stationIdInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 22, 1)
    /**
     * Sounding Start time in ISO8601 UTC format.
     * Example: /// Example: 2021-01-01T01:01:01.123456Z
     * Constraints: No constraints specified.
     */
    val startTimeUtc : String?
        get() {
            val o = __offset(24)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val startTimeUtcAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(24, 1)
    fun startTimeUtcInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 24, 1)
    /**
     * Names of settings.
     * Example: /// Example: Example settings
     * Constraints: Minimum length = 1, Maximum length = 1024
     */
    val systemInfo : String?
        get() {
            val o = __offset(26)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val systemInfoAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(26, 1)
    fun systemInfoInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 26, 1)
    /**
     * Details concerning the composition/intention/interpretation/audience/etc. of any data recorded here. This field may contain all of the intended information e.g. info on signal waveforms used, antenna setup, etc. OR may describe the data/settings to be provided in the “data” field.
     * Example: /// Example: Example notes
     * Constraints: Minimum length = 0, Maximum length = 1024
     */
    val systemNotes : String?
        get() {
            val o = __offset(28)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val systemNotesAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(28, 1)
    fun systemNotesInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 28, 1)
    /**
     * List of Geodetic Latitude, Longitude, and Altitude coordinates in km of the receiver. Coordinates List must always have 3 elements. Valid ranges are -90.0 to 90.0 for Latitude and -180.0 to 180.0 for Longitude. Altitude is in km and its value must be 0 or greater.
     * Example: /// Example: [[45.5, 179.3, 35.6], [-80.2, -20.5, 43.2]]
     * Constraints: No constraints specified.
     */
    fun transmitCoordinates(j: Int) : String? {
        val o = __offset(30)
        return if (o != 0) {
            __string(__vector(o) + j * 4)
        } else {
            null
        }
    }
    val transmitCoordinatesLength : Int
        get() {
            val o = __offset(30); return if (o != 0) __vector_len(o) else 0
        }
    /**
     * Enums: Mobile, Static.
     * Example: /// Example: Mobile
     * Constraints: Minimum length = 0, Maximum length = 16
     */
    val transmitSensorType : Byte
        get() {
            val o = __offset(32)
            return if(o != 0) bb.get(o + bb_pos) else 0
        }
    /**
     * List of Geodetic Latitude, Longitude, and Altitude coordinates in km of the receiver. Coordinates List must always have 3 elements. Valid ranges are -90.0 to 90.0 for Latitude and -180.0 to 180.0 for Longitude. Altitude is in km and its value must be 0 or greater.
     * Example: /// Example: [[45.5, 179.3, 35.6], [-80.2, -20.5, 43.2]]
     * Constraints: No constraints specified.
     */
    fun receiveCoordinates(j: Int) : String? {
        val o = __offset(34)
        return if (o != 0) {
            __string(__vector(o) + j * 4)
        } else {
            null
        }
    }
    val receiveCoordinatesLength : Int
        get() {
            val o = __offset(34); return if (o != 0) __vector_len(o) else 0
        }
    /**
     * Enums: Mobile, Static.
     * Example: /// Example: Mobile
     * Constraints: Minimum length = 0, Maximum length = 16
     */
    val receiveSensorType : Byte
        get() {
            val o = __offset(36)
            return if(o != 0) bb.get(o + bb_pos) else 0
        }
    /**
     * No description provided.
     * Example: /// Example: No example provided.
     * Constraints: No constraints specified.
     */
    val antennaElementPosition : String?
        get() {
            val o = __offset(38)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val antennaElementPositionAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(38, 1)
    fun antennaElementPositionInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 38, 1)
    /**
     * Enums: J2000, ECR/ECEF, TEME, GCRF, WGS84 (GEODetic lat, long, alt), GEOCentric (lat, long, radii).
     * Example: /// Example: J2000
     * Constraints: Minimum length = 0, Maximum length = 32
     */
    val antennaElementPositionCoordinateSystem : Byte
        get() {
            val o = __offset(40)
            return if(o != 0) bb.get(o + bb_pos) else 0
        }
    /**
     * No description provided.
     * Example: /// Example: No example provided.
     * Constraints: No constraints specified.
     */
    val power : String?
        get() {
            val o = __offset(42)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val powerAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(42, 1)
    fun powerInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 42, 1)
    /**
     * No description provided.
     * Example: /// Example: No example provided.
     * Constraints: No constraints specified.
     */
    val range : String?
        get() {
            val o = __offset(44)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val rangeAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(44, 1)
    fun rangeInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 44, 1)
    /**
     * No description provided.
     * Example: /// Example: No example provided.
     * Constraints: No constraints specified.
     */
    val frequency : String?
        get() {
            val o = __offset(46)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val frequencyAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(46, 1)
    fun frequencyInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 46, 1)
    /**
     * No description provided.
     * Example: /// Example: No example provided.
     * Constraints: No constraints specified.
     */
    val polarization : String?
        get() {
            val o = __offset(48)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val polarizationAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(48, 1)
    fun polarizationInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 48, 1)
    /**
     * No description provided.
     * Example: /// Example: No example provided.
     * Constraints: No constraints specified.
     */
    val azimuth : String?
        get() {
            val o = __offset(50)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val azimuthAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(50, 1)
    fun azimuthInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 50, 1)
    /**
     * No description provided.
     * Example: /// Example: No example provided.
     * Constraints: No constraints specified.
     */
    val elevation : String?
        get() {
            val o = __offset(52)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val elevationAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(52, 1)
    fun elevationInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 52, 1)
    /**
     * Array of restricted frequencies.
     * Example: /// Example: [12.5, 34.5, 45.3]
     * Constraints: No constraints specified.
     */
    fun restrictedFrequency(j: Int) : String? {
        val o = __offset(54)
        return if (o != 0) {
            __string(__vector(o) + j * 4)
        } else {
            null
        }
    }
    val restrictedFrequencyLength : Int
        get() {
            val o = __offset(54); return if (o != 0) __vector_len(o) else 0
        }
    /**
     * Notes for the restrictedFrequency data.
     * Example: /// Example: Example notes
     * Constraints: Minimum length = 0, Maximum length = 512
     */
    val restrictedFrequencyNotes : String?
        get() {
            val o = __offset(56)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val restrictedFrequencyNotesAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(56, 1)
    fun restrictedFrequencyNotesInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 56, 1)
    /**
     * No description provided.
     * Example: /// Example: No example provided.
     * Constraints: No constraints specified.
     */
    val doppler : String?
        get() {
            val o = __offset(58)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val dopplerAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(58, 1)
    fun dopplerInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 58, 1)
    /**
     * No description provided.
     * Example: /// Example: No example provided.
     * Constraints: No constraints specified.
     */
    val time : String?
        get() {
            val o = __offset(60)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val timeAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(60, 1)
    fun timeInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 60, 1)
    /**
     * No description provided.
     * Example: /// Example: No example provided.
     * Constraints: No constraints specified.
     */
    val stokes : String?
        get() {
            val o = __offset(62)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val stokesAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(62, 1)
    fun stokesInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 62, 1)
    /**
     * No description provided.
     * Example: /// Example: No example provided.
     * Constraints: No constraints specified.
     */
    val amplitude : String?
        get() {
            val o = __offset(64)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val amplitudeAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(64, 1)
    fun amplitudeInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 64, 1)
    /**
     * No description provided.
     * Example: /// Example: No example provided.
     * Constraints: No constraints specified.
     */
    val phase : String?
        get() {
            val o = __offset(66)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val phaseAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(66, 1)
    fun phaseInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 66, 1)
    /**
     * The ordinary wave critical frequency of the highest stratification in the F region, specified in MHz. URSI ID: 00.
     * Example: /// Example: 6.75
     * Constraints: No constraints specified.
     */
    val foF2 : Double
        get() {
            val o = __offset(68)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * The ordinary wave F1 critical frequency, in MHz. URSI ID: 10.
     * Example: /// Example: 8.2
     * Constraints: No constraints specified.
     */
    val foF1 : Double
        get() {
            val o = __offset(70)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * The extraordinary wave F2 critical frequency, in MHz. URSI ID: 01.
     * Example: /// Example: 4.5
     * Constraints: No constraints specified.
     */
    val fxF2 : Double
        get() {
            val o = __offset(72)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * The extraordinary wave F1 critical frequency, in MHz. URSI ID: 11.
     * Example: /// Example: 4.2
     * Constraints: No constraints specified.
     */
    val fxF1 : Double
        get() {
            val o = __offset(74)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * MUF(D)/foF2.
     * Example: /// Example: 1.1
     * Constraints: No constraints specified.
     */
    val md : Double
        get() {
            val o = __offset(76)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Lowest usable frequency.
     * Example: /// Example: 1.1
     * Constraints: No constraints specified.
     */
    val luf : Double
        get() {
            val o = __offset(78)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Maximum Usable Frequency for ground distance D in MHz.
     * Example: /// Example: 1.1
     * Constraints: No constraints specified.
     */
    val mufd : Double
        get() {
            val o = __offset(80)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Lowest frequency at which echo traces are observed on the ionogram, in MHz. URSI ID: 42.
     * Example: /// Example: 2.025
     * Constraints: No constraints specified.
     */
    val fmin : Double
        get() {
            val o = __offset(82)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Highest ordinary wave frequency at which a mainly continuous Es trace is observed, in MHz. URSI ID: 30.
     * Example: /// Example: 2.35
     * Constraints: No constraints specified.
     */
    val foEs : Double
        get() {
            val o = __offset(84)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Minimum frequency of F layer echoes in MHz. URSI ID: 80.
     * Example: /// Example: 2.7
     * Constraints: No constraints specified.
     */
    val fminF : Double
        get() {
            val o = __offset(86)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Minimum frequency of E layer echoes in MHz. URSI ID: 81.
     * Example: /// Example: 2.025
     * Constraints: No constraints specified.
     */
    val fminE : Double
        get() {
            val o = __offset(88)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * The ordinary wave critical frequency of the lowest thick layer which causes a discontinuity, in MHz. URSI ID: 20.
     * Example: /// Example: 1.1
     * Constraints: No constraints specified.
     */
    val foE : Double
        get() {
            val o = __offset(90)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * The extraordinary wave E critical frequency, in MHz. URSI ID: 21.
     * Example: /// Example: 1.1
     * Constraints: No constraints specified.
     */
    val fxE : Double
        get() {
            val o = __offset(92)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * The highest frequency of F-trace in MHz. Note: fxI is with capital i. URSI ID: 51.
     * Example: /// Example: 7.525
     * Constraints: No constraints specified.
     */
    val fxI : Double
        get() {
            val o = __offset(94)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * The minimum virtual height of the ordinary wave trace taken as a whole, in km. URSI ID: 16.
     * Example: /// Example: 238.5
     * Constraints: No constraints specified.
     */
    val hprimeF : Double
        get() {
            val o = __offset(96)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * The minimum virtual height of ordinary wave trace for the highest stable stratification in the F region in km. URSI ID: 4.
     * Example: /// Example: 238.5
     * Constraints: No constraints specified.
     */
    val hprimeF2 : Double
        get() {
            val o = __offset(98)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * The minimum virtual height of reflection at a point where the trace is horizontal in the F region in km. URSI ID: 14.
     * Example: /// Example: 230.1
     * Constraints: No constraints specified.
     */
    val hprimeF1 : Double
        get() {
            val o = __offset(100)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * The minimum virtual height of the normal E layer trace in km. URSI ID: 24.
     * Example: /// Example: 98.47
     * Constraints: No constraints specified.
     */
    val hprimeE : Double
        get() {
            val o = __offset(102)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * The minimum height of the trace used to give foEs in km. URSI ID: 34.
     * Example: /// Example: 95
     * Constraints: No constraints specified.
     */
    val hprimeEs : Double
        get() {
            val o = __offset(104)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Peak height of E-layer in km. URSI ID: 90.
     * Example: /// Example: 91.744
     * Constraints: No constraints specified.
     */
    val zmE : Double
        get() {
            val o = __offset(106)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Parabolic E layer semi-thickness in km. URSI ID: 83.
     * Example: /// Example: 1.722
     * Constraints: No constraints specified.
     */
    val yE : Double
        get() {
            val o = __offset(108)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Average range spread of F layer in km. URSI ID: 84.
     * Example: /// Example: 1.83
     * Constraints: No constraints specified.
     */
    val qf : Double
        get() {
            val o = __offset(110)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Average range spread of E layer in km. URSI ID: 85.
     * Example: /// Example: 0.95
     * Constraints: No constraints specified.
     */
    val qe : Double
        get() {
            val o = __offset(112)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Lowering of F trace to the leading edge in km.
     * Example: /// Example: 1.1
     * Constraints: No constraints specified.
     */
    val downF : Double
        get() {
            val o = __offset(114)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Lowering of E trace to the leading edge in km.
     * Example: /// Example: 1.1
     * Constraints: No constraints specified.
     */
    val downE : Double
        get() {
            val o = __offset(116)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Lowering of Es trace to the leading edge in km.
     * Example: /// Example: 1.1
     * Constraints: No constraints specified.
     */
    val downEs : Double
        get() {
            val o = __offset(118)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Frequency spread between fxF2 and FxI in MHz. URSI ID: 86.
     * Example: /// Example: 0.075
     * Constraints: No constraints specified.
     */
    val ff : Double
        get() {
            val o = __offset(120)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Frequency spread beyond foE in MHz. URSI ID: 87.
     * Example: /// Example: 1.23
     * Constraints: No constraints specified.
     */
    val fe : Double
        get() {
            val o = __offset(122)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Distance for MUF calculation in km.
     * Example: /// Example: 1.1
     * Constraints: No constraints specified.
     */
    val d : Double
        get() {
            val o = __offset(124)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * MUF/OblFactor in MHz.
     * Example: /// Example: 1.1
     * Constraints: No constraints specified.
     */
    val fmuf : Double
        get() {
            val o = __offset(126)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Virtual height at MUF/OblFactor frequency in MHz.
     * Example: /// Example: 1.1
     * Constraints: No constraints specified.
     */
    val hprimefMuf : Double
        get() {
            val o = __offset(128)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Adjustment to the scaled foF2 during profile inversion in MHz.
     * Example: /// Example: 1.1
     * Constraints: No constraints specified.
     */
    val deltafoF2 : Double
        get() {
            val o = __offset(130)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Predicted value of foE in MHz.
     * Example: /// Example: 1.1
     * Constraints: No constraints specified.
     */
    val foEp : Double
        get() {
            val o = __offset(132)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * The frequency at which hprimeF is measured in MHz. URSI ID: 61.
     * Example: /// Example: 2.5
     * Constraints: No constraints specified.
     */
    val fhprimeF : Double
        get() {
            val o = __offset(134)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * The frequency at which hprimeF2 is measured in MHz. URSI ID: 60.
     * Example: /// Example: 2.5
     * Constraints: No constraints specified.
     */
    val fhprimeF2 : Double
        get() {
            val o = __offset(136)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Predicted value of foF1 in MHz.
     * Example: /// Example: 1.1
     * Constraints: No constraints specified.
     */
    val foF1p : Double
        get() {
            val o = __offset(138)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Predicted value of foF2 in MHz.
     * Example: /// Example: 1.1
     * Constraints: No constraints specified.
     */
    val foF2p : Double
        get() {
            val o = __offset(140)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * True height of the F2 peak in km. URSI ID: AE.
     * Example: /// Example: 240.498
     * Constraints: No constraints specified.
     */
    val hmF2 : Double
        get() {
            val o = __offset(142)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * True height of the F1 peak in km. URSI ID: BE.
     * Example: /// Example: 230.128
     * Constraints: No constraints specified.
     */
    val hmF1 : Double
        get() {
            val o = __offset(144)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * True height of the E peak in km. URSI ID: CE.
     * Example: /// Example: 215.643
     * Constraints: No constraints specified.
     */
    val hmE : Double
        get() {
            val o = __offset(146)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * True height at half peak electron density in the F2 layer in km. URSI ID: 93.
     * Example: /// Example: 240.498
     * Constraints: No constraints specified.
     */
    val zhalfNm : Double
        get() {
            val o = __offset(148)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Minimum frequency of Es layer in MHz.
     * Example: /// Example: 1.1
     * Constraints: No constraints specified.
     */
    val fminEs : Double
        get() {
            val o = __offset(150)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Parabolic F2 layer semi-thickness in km. URSI ID: 94.
     * Example: /// Example: 62.178
     * Constraints: No constraints specified.
     */
    val yF2 : Double
        get() {
            val o = __offset(152)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Parabolic F1 layer semi-thickness in km. URSI ID: 95.
     * Example: /// Example: 55.645
     * Constraints: No constraints specified.
     */
    val yF1 : Double
        get() {
            val o = __offset(154)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Total Ionospheric Electron Content *10^16e/m^2. 1 TEC Unit (TECU) = 10^16 electrons/m^2. URSI ID: 72.
     * Example: /// Example: 24.673
     * Constraints: No constraints specified.
     */
    val tec : Double
        get() {
            val o = __offset(156)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Effective scale height at hmF2 Titheridge method in km. URSI ID: 69.
     * Example: /// Example: 35.613
     * Constraints: No constraints specified.
     */
    val scaleHeightF2Peak : Double
        get() {
            val o = __offset(158)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * IRI thickness parameter in km. URSI ID: D0.
     * Example: /// Example: 68.07
     * Constraints: No constraints specified.
     */
    val b0 : Double
        get() {
            val o = __offset(160)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * IRI profile shape parameter. URSI ID: D1.
     * Example: /// Example: 1.87
     * Constraints: No constraints specified.
     */
    val b1 : Double
        get() {
            val o = __offset(162)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * IRI profile shape parameter, F1 layer. URSI ID: D2.
     * Example: /// Example: 1.94
     * Constraints: No constraints specified.
     */
    val d1 : Double
        get() {
            val o = __offset(164)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Critical frequency of night time auroral E layer in MHz. URSI ID: 23.
     * Example: /// Example: 45.764
     * Constraints: No constraints specified.
     */
    val foEa : Double
        get() {
            val o = __offset(166)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Minimum virtual height of night time auroral E layer trace in km. URSI ID: 27.
     * Example: /// Example: 102.6
     * Constraints: No constraints specified.
     */
    val hprimeEa : Double
        get() {
            val o = __offset(168)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Highest ordinary wave critical frequency of F region patch trace in MHz. URSI ID: 55.
     * Example: /// Example: 87.21
     * Constraints: No constraints specified.
     */
    val foP : Double
        get() {
            val o = __offset(170)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Minimum virtual height of the trace used to determine foP in km. URSI ID: 56.
     * Example: /// Example: 89.45
     * Constraints: No constraints specified.
     */
    val hprimeP : Double
        get() {
            val o = __offset(172)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * The blanketing frequency of layer used to derive foEs in MHz. URSI ID: 32.
     * Example: /// Example: 34.867
     * Constraints: No constraints specified.
     */
    val fbEs : Double
        get() {
            val o = __offset(174)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Characterization of the shape of Es trace. URSI ID: 36.
     * Example: /// Example: Auroral
     * Constraints: Minimum length = 0, Maximum length = 25
     */
    val typeEs : String?
        get() {
            val o = __offset(176)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val typeEsAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(176, 1)
    fun typeEsInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 176, 1)
    /**
     * List of attributes that are associated with the specified characteristics. Characteristics are defined by the CHARS: URSI IIWG format for archiving monthly ionospheric characteristics, INAG Bulletin No. 62 specification. 
     * Qualifying and Descriptive letters are defined by the URSI Handbook for Ionogram Interpretation and reduction, Report UAG, No. 23A specification.
     * Example: /// Example: No example provided.
     * Constraints: No constraints specified.
     */
    fun charAtts(j: Int) : String? {
        val o = __offset(178)
        return if (o != 0) {
            __string(__vector(o) + j * 4)
        } else {
            null
        }
    }
    val charAttsLength : Int
        get() {
            val o = __offset(178); return if (o != 0) __vector_len(o) else 0
        }
    /**
     * Array of altitudes above station level for plasma frequency/density arrays in km (must match the size of the plasmaFrequency and electronDensity Arrays).
     * Example: /// Example: [1.1, 2.1, 3.1]
     * Constraints: No constraints specified.
     */
    fun height(j: Int) : String? {
        val o = __offset(180)
        return if (o != 0) {
            __string(__vector(o) + j * 4)
        } else {
            null
        }
    }
    val heightLength : Int
        get() {
            val o = __offset(180); return if (o != 0) __vector_len(o) else 0
        }
    /**
     * Array of plasma frequencies in MHz (must match the size of the height and electronDensity arrays).
     * Example: /// Example: [1.1, 2.1, 3.1]
     * Constraints: No constraints specified.
     */
    fun plasmaFrequency(j: Int) : String? {
        val o = __offset(182)
        return if (o != 0) {
            __string(__vector(o) + j * 4)
        } else {
            null
        }
    }
    val plasmaFrequencyLength : Int
        get() {
            val o = __offset(182); return if (o != 0) __vector_len(o) else 0
        }
    /**
     * Uncertainty in specifying the electron plasma frequency at each height point of the profile (must match the size of the plasmaFrequency array).
     * Example: /// Example: [0.8, 0.2, 0.5]
     * Constraints: No constraints specified.
     */
    fun plasmaFrequencyUncertainty(j: Int) : String? {
        val o = __offset(184)
        return if (o != 0) {
            __string(__vector(o) + j * 4)
        } else {
            null
        }
    }
    val plasmaFrequencyUncertaintyLength : Int
        get() {
            val o = __offset(184); return if (o != 0) __vector_len(o) else 0
        }
    /**
     * Array of electron densities in cm^-3 (must match the size of the height and plasmaFrequency arrays).
     * Example: /// Example: [1.1, 2.1, 3.1]
     * Constraints: No constraints specified.
     */
    fun electronDensity(j: Int) : String? {
        val o = __offset(186)
        return if (o != 0) {
            __string(__vector(o) + j * 4)
        } else {
            null
        }
    }
    val electronDensityLength : Int
        get() {
            val o = __offset(186); return if (o != 0) __vector_len(o) else 0
        }
    /**
     * Uncertainty in specifying the electron density at each height point of the profile (must match the size of the electronDensity array).
     * Example: /// Example: [0.8, 0.2, 0.5]
     * Constraints: No constraints specified.
     */
    fun electronDensityUncertainty(j: Int) : String? {
        val o = __offset(188)
        return if (o != 0) {
            __string(__vector(o) + j * 4)
        } else {
            null
        }
    }
    val electronDensityUncertaintyLength : Int
        get() {
            val o = __offset(188); return if (o != 0) __vector_len(o) else 0
        }
    /**
     * Array of Legacy Artist Flags.
     * Example: /// Example: [1, 2, 3]
     * Constraints: No constraints specified.
     */
    fun artistFlags(j: Int) : String? {
        val o = __offset(190)
        return if (o != 0) {
            __string(__vector(o) + j * 4)
        } else {
            null
        }
    }
    val artistFlagsLength : Int
        get() {
            val o = __offset(190); return if (o != 0) __vector_len(o) else 0
        }
    /**
     * No description provided.
     * Example: /// Example: No example provided.
     * Constraints: No constraints specified.
     */
    val traceGeneric : String?
        get() {
            val o = __offset(192)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val traceGenericAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(192, 1)
    fun traceGenericInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 192, 1)
    /**
     * Array of speed in m/s at which the disturbance travels through the ionosphere.
     * Example: /// Example: [1.1, 2.1, 3.1]
     * Constraints: No constraints specified.
     */
    fun tidPhaseSpeeds(j: Int) : String? {
        val o = __offset(194)
        return if (o != 0) {
            __string(__vector(o) + j * 4)
        } else {
            null
        }
    }
    val tidPhaseSpeedsLength : Int
        get() {
            val o = __offset(194); return if (o != 0) __vector_len(o) else 0
        }
    /**
     * Array of degrees clockwise from true North of the TID.
     * Example: /// Example: [1.1, 2.1, 3.1]
     * Constraints: No constraints specified.
     */
    fun tidAzimuth(j: Int) : String? {
        val o = __offset(196)
        return if (o != 0) {
            __string(__vector(o) + j * 4)
        } else {
            null
        }
    }
    val tidAzimuthLength : Int
        get() {
            val o = __offset(196); return if (o != 0) __vector_len(o) else 0
        }
    /**
     * Array of 1/frequency of the TID wave.
     * Example: /// Example: [1.1, 2.1, 3.1]
     * Constraints: No constraints specified.
     */
    fun tidPeriods(j: Int) : String? {
        val o = __offset(198)
        return if (o != 0) {
            __string(__vector(o) + j * 4)
        } else {
            null
        }
    }
    val tidPeriodsLength : Int
        get() {
            val o = __offset(198); return if (o != 0) __vector_len(o) else 0
        }
    /**
     * No description provided.
     * Example: /// Example: No example provided.
     * Constraints: No constraints specified.
     */
    val datum : String?
        get() {
            val o = __offset(200)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val datumAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(200, 1)
    fun datumInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 200, 1)
    /**
     * Equipment location.
     * Example: /// Example: Millstone Hill
     * Constraints: Minimum length = 0, Maximum length = 512
     */
    val platformName : String?
        get() {
            val o = __offset(202)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val platformNameAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(202, 1)
    fun platformNameInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 202, 1)
    /**
     * Time the row was created in the database, auto-populated by the system.
     * Example: /// Example: 2018-01-01T16:00:00.123Z
     * Constraints: No constraints specified.
     */
    val createdAt : String?
        get() {
            val o = __offset(204)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val createdAtAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(204, 1)
    fun createdAtInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 204, 1)
    /**
     * Application user who created the row in the database, auto-populated by the system.
     * Example: /// Example: some.user
     * Constraints: Minimum length = 0, Maximum length = 64
     */
    val createdBy : String?
        get() {
            val o = __offset(206)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val createdByAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(206, 1)
    fun createdByInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 206, 1)
    /**
     * Time the row was updated in the database, auto-populated by the system, example = 2018-01-01T16:00:00.123Z.
     * Example: /// Example: 2018-01-01T16:00:00.123Z
     * Constraints: No constraints specified.
     */
    val updatedAt : String?
        get() {
            val o = __offset(208)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val updatedAtAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(208, 1)
    fun updatedAtInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 208, 1)
    /**
     * Application user who updated the row in the database, auto-populated by the system.
     * Example: /// Example: some.user
     * Constraints: Minimum length = 0, Maximum length = 64
     */
    val updatedBy : String?
        get() {
            val o = __offset(210)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val updatedByAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(210, 1)
    fun updatedByInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 210, 1)
    /**
     * Source of the data.
     * Example: /// Example: Bluestaq
     * Constraints: Minimum length = 1, Maximum length = 64
     */
    val source : String?
        get() {
            val o = __offset(212)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val sourceAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(212, 1)
    fun sourceInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 212, 1)
    /**
     * Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
     * Example: /// Example: THIRD_PARTY_DATASOURCE
     * Constraints: Minimum length = 0, Maximum length = 64
     */
    val origin : String?
        get() {
            val o = __offset(214)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val originAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(214, 1)
    fun originInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 214, 1)
    /**
     * Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
     * EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
     * REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
     * SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
     * TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
     * Example: /// Example: TEST
     * Constraints: Minimum length = 1, Maximum length = 32
     */
    val dataMode : Byte
        get() {
            val o = __offset(216)
            return if(o != 0) bb.get(o + bb_pos) else 0
        }
    /**
     * The originating source network on which this record was created, auto-populated by the system.
     * Example: /// Example: ORIG
     * Constraints: Minimum length = 1, Maximum length = 32
     */
    val origNetwork : String?
        get() {
            val o = __offset(218)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val origNetworkAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(218, 1)
    fun origNetworkInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 218, 1)
    companion object {
        fun validateVersion() = Constants.FLATBUFFERS_24_3_25()
        fun getRootAsIonoObservation_Full(_bb: ByteBuffer): IonoObservation_Full = getRootAsIonoObservation_Full(_bb, IonoObservation_Full())
        fun getRootAsIonoObservation_Full(_bb: ByteBuffer, obj: IonoObservation_Full): IonoObservation_Full {
            _bb.order(ByteOrder.LITTLE_ENDIAN)
            return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb))
        }
        fun IonoObservation_FullBufferHasIdentifier(_bb: ByteBuffer) : Boolean = __has_identifier(_bb, "IONO")
        fun createIonoObservation_Full(builder: FlatBufferBuilder, idOffset: Int, classificationMarkingOffset: Int, idSensorOffset: Int, origSensorIdOffset: Int, systemOffset: Int, neProfileNameOffset: Int, neProfileVersion: Double, scalerInfoOffset: Int, densityProfileOffset: Int, stationIdOffset: Int, startTimeUtcOffset: Int, systemInfoOffset: Int, systemNotesOffset: Int, transmitCoordinatesOffset: Int, transmitSensorType: Byte, receiveCoordinatesOffset: Int, receiveSensorType: Byte, antennaElementPositionOffset: Int, antennaElementPositionCoordinateSystem: Byte, powerOffset: Int, rangeOffset: Int, frequencyOffset: Int, polarizationOffset: Int, azimuthOffset: Int, elevationOffset: Int, restrictedFrequencyOffset: Int, restrictedFrequencyNotesOffset: Int, dopplerOffset: Int, timeOffset: Int, stokesOffset: Int, amplitudeOffset: Int, phaseOffset: Int, foF2: Double, foF1: Double, fxF2: Double, fxF1: Double, md: Double, luf: Double, mufd: Double, fmin: Double, foEs: Double, fminF: Double, fminE: Double, foE: Double, fxE: Double, fxI: Double, hprimeF: Double, hprimeF2: Double, hprimeF1: Double, hprimeE: Double, hprimeEs: Double, zmE: Double, yE: Double, qf: Double, qe: Double, downF: Double, downE: Double, downEs: Double, ff: Double, fe: Double, d: Double, fmuf: Double, hprimefMuf: Double, deltafoF2: Double, foEp: Double, fhprimeF: Double, fhprimeF2: Double, foF1p: Double, foF2p: Double, hmF2: Double, hmF1: Double, hmE: Double, zhalfNm: Double, fminEs: Double, yF2: Double, yF1: Double, tec: Double, scaleHeightF2Peak: Double, b0: Double, b1: Double, d1: Double, foEa: Double, hprimeEa: Double, foP: Double, hprimeP: Double, fbEs: Double, typeEsOffset: Int, charAttsOffset: Int, heightOffset: Int, plasmaFrequencyOffset: Int, plasmaFrequencyUncertaintyOffset: Int, electronDensityOffset: Int, electronDensityUncertaintyOffset: Int, artistFlagsOffset: Int, traceGenericOffset: Int, tidPhaseSpeedsOffset: Int, tidAzimuthOffset: Int, tidPeriodsOffset: Int, datumOffset: Int, platformNameOffset: Int, createdAtOffset: Int, createdByOffset: Int, updatedAtOffset: Int, updatedByOffset: Int, sourceOffset: Int, originOffset: Int, dataMode: Byte, origNetworkOffset: Int) : Int {
            builder.startTable(108)
            addFbEs(builder, fbEs)
            addHprimeP(builder, hprimeP)
            addFoP(builder, foP)
            addHprimeEa(builder, hprimeEa)
            addFoEa(builder, foEa)
            addD1(builder, d1)
            addB1(builder, b1)
            addB0(builder, b0)
            addScaleHeightF2Peak(builder, scaleHeightF2Peak)
            addTec(builder, tec)
            addYF1(builder, yF1)
            addYF2(builder, yF2)
            addFminEs(builder, fminEs)
            addZhalfNm(builder, zhalfNm)
            addHmE(builder, hmE)
            addHmF1(builder, hmF1)
            addHmF2(builder, hmF2)
            addFoF2p(builder, foF2p)
            addFoF1p(builder, foF1p)
            addFhprimeF2(builder, fhprimeF2)
            addFhprimeF(builder, fhprimeF)
            addFoEp(builder, foEp)
            addDeltafoF2(builder, deltafoF2)
            addHprimefMUF(builder, hprimefMuf)
            addFmuf(builder, fmuf)
            addD(builder, d)
            addFe(builder, fe)
            addFf(builder, ff)
            addDownEs(builder, downEs)
            addDownE(builder, downE)
            addDownF(builder, downF)
            addQe(builder, qe)
            addQf(builder, qf)
            addYE(builder, yE)
            addZmE(builder, zmE)
            addHprimeEs(builder, hprimeEs)
            addHprimeE(builder, hprimeE)
            addHprimeF1(builder, hprimeF1)
            addHprimeF2(builder, hprimeF2)
            addHprimeF(builder, hprimeF)
            addFxI(builder, fxI)
            addFxE(builder, fxE)
            addFoE(builder, foE)
            addFminE(builder, fminE)
            addFminF(builder, fminF)
            addFoEs(builder, foEs)
            addFmin(builder, fmin)
            addMufd(builder, mufd)
            addLuf(builder, luf)
            addMd(builder, md)
            addFxF1(builder, fxF1)
            addFxF2(builder, fxF2)
            addFoF1(builder, foF1)
            addFoF2(builder, foF2)
            addNeProfileVersion(builder, neProfileVersion)
            addOrigNetwork(builder, origNetworkOffset)
            addOrigin(builder, originOffset)
            addSource(builder, sourceOffset)
            addUpdatedBy(builder, updatedByOffset)
            addUpdatedAt(builder, updatedAtOffset)
            addCreatedBy(builder, createdByOffset)
            addCreatedAt(builder, createdAtOffset)
            addPlatformName(builder, platformNameOffset)
            addDatum(builder, datumOffset)
            addTidPeriods(builder, tidPeriodsOffset)
            addTidAzimuth(builder, tidAzimuthOffset)
            addTidPhaseSpeeds(builder, tidPhaseSpeedsOffset)
            addTraceGeneric(builder, traceGenericOffset)
            addArtistFlags(builder, artistFlagsOffset)
            addElectronDensityUncertainty(builder, electronDensityUncertaintyOffset)
            addElectronDensity(builder, electronDensityOffset)
            addPlasmaFrequencyUncertainty(builder, plasmaFrequencyUncertaintyOffset)
            addPlasmaFrequency(builder, plasmaFrequencyOffset)
            addHeight(builder, heightOffset)
            addCharAtts(builder, charAttsOffset)
            addTypeEs(builder, typeEsOffset)
            addPhase(builder, phaseOffset)
            addAmplitude(builder, amplitudeOffset)
            addStokes(builder, stokesOffset)
            addTime(builder, timeOffset)
            addDoppler(builder, dopplerOffset)
            addRestrictedFrequencyNotes(builder, restrictedFrequencyNotesOffset)
            addRestrictedFrequency(builder, restrictedFrequencyOffset)
            addElevation(builder, elevationOffset)
            addAzimuth(builder, azimuthOffset)
            addPolarization(builder, polarizationOffset)
            addFrequency(builder, frequencyOffset)
            addRange(builder, rangeOffset)
            addPower(builder, powerOffset)
            addAntennaElementPosition(builder, antennaElementPositionOffset)
            addReceiveCoordinates(builder, receiveCoordinatesOffset)
            addTransmitCoordinates(builder, transmitCoordinatesOffset)
            addSystemNotes(builder, systemNotesOffset)
            addSystemInfo(builder, systemInfoOffset)
            addStartTimeUTC(builder, startTimeUtcOffset)
            addStationId(builder, stationIdOffset)
            addDensityProfile(builder, densityProfileOffset)
            addScalerInfo(builder, scalerInfoOffset)
            addNeProfileName(builder, neProfileNameOffset)
            addSystem(builder, systemOffset)
            addOrigSensorId(builder, origSensorIdOffset)
            addIdSensor(builder, idSensorOffset)
            addClassificationMarking(builder, classificationMarkingOffset)
            addId(builder, idOffset)
            addDataMode(builder, dataMode)
            addAntennaElementPositionCoordinateSystem(builder, antennaElementPositionCoordinateSystem)
            addReceiveSensorType(builder, receiveSensorType)
            addTransmitSensorType(builder, transmitSensorType)
            return endIonoObservation_Full(builder)
        }
        fun startIonoObservation_Full(builder: FlatBufferBuilder) = builder.startTable(108)
        fun addId(builder: FlatBufferBuilder, id: Int) = builder.addOffset(0, id, 0)
        fun addClassificationMarking(builder: FlatBufferBuilder, classificationMarking: Int) = builder.addOffset(1, classificationMarking, 0)
        fun addIdSensor(builder: FlatBufferBuilder, idSensor: Int) = builder.addOffset(2, idSensor, 0)
        fun addOrigSensorId(builder: FlatBufferBuilder, origSensorId: Int) = builder.addOffset(3, origSensorId, 0)
        fun addSystem(builder: FlatBufferBuilder, system: Int) = builder.addOffset(4, system, 0)
        fun addNeProfileName(builder: FlatBufferBuilder, neProfileName: Int) = builder.addOffset(5, neProfileName, 0)
        fun addNeProfileVersion(builder: FlatBufferBuilder, neProfileVersion: Double) = builder.addDouble(6, neProfileVersion, 0.0)
        fun addScalerInfo(builder: FlatBufferBuilder, scalerInfo: Int) = builder.addOffset(7, scalerInfo, 0)
        fun addDensityProfile(builder: FlatBufferBuilder, densityProfile: Int) = builder.addOffset(8, densityProfile, 0)
        fun addStationId(builder: FlatBufferBuilder, stationId: Int) = builder.addOffset(9, stationId, 0)
        fun addStartTimeUTC(builder: FlatBufferBuilder, startTimeUtc: Int) = builder.addOffset(10, startTimeUtc, 0)
        fun addSystemInfo(builder: FlatBufferBuilder, systemInfo: Int) = builder.addOffset(11, systemInfo, 0)
        fun addSystemNotes(builder: FlatBufferBuilder, systemNotes: Int) = builder.addOffset(12, systemNotes, 0)
        fun addTransmitCoordinates(builder: FlatBufferBuilder, transmitCoordinates: Int) = builder.addOffset(13, transmitCoordinates, 0)
        fun createTransmitCoordinatesVector(builder: FlatBufferBuilder, data: IntArray) : Int {
            builder.startVector(4, data.size, 4)
            for (i in data.size - 1 downTo 0) {
                builder.addOffset(data[i])
            }
            return builder.endVector()
        }
        fun startTransmitCoordinatesVector(builder: FlatBufferBuilder, numElems: Int) = builder.startVector(4, numElems, 4)
        fun addTransmitSensorType(builder: FlatBufferBuilder, transmitSensorType: Byte) = builder.addByte(14, transmitSensorType, 0)
        fun addReceiveCoordinates(builder: FlatBufferBuilder, receiveCoordinates: Int) = builder.addOffset(15, receiveCoordinates, 0)
        fun createReceiveCoordinatesVector(builder: FlatBufferBuilder, data: IntArray) : Int {
            builder.startVector(4, data.size, 4)
            for (i in data.size - 1 downTo 0) {
                builder.addOffset(data[i])
            }
            return builder.endVector()
        }
        fun startReceiveCoordinatesVector(builder: FlatBufferBuilder, numElems: Int) = builder.startVector(4, numElems, 4)
        fun addReceiveSensorType(builder: FlatBufferBuilder, receiveSensorType: Byte) = builder.addByte(16, receiveSensorType, 0)
        fun addAntennaElementPosition(builder: FlatBufferBuilder, antennaElementPosition: Int) = builder.addOffset(17, antennaElementPosition, 0)
        fun addAntennaElementPositionCoordinateSystem(builder: FlatBufferBuilder, antennaElementPositionCoordinateSystem: Byte) = builder.addByte(18, antennaElementPositionCoordinateSystem, 0)
        fun addPower(builder: FlatBufferBuilder, power: Int) = builder.addOffset(19, power, 0)
        fun addRange(builder: FlatBufferBuilder, range: Int) = builder.addOffset(20, range, 0)
        fun addFrequency(builder: FlatBufferBuilder, frequency: Int) = builder.addOffset(21, frequency, 0)
        fun addPolarization(builder: FlatBufferBuilder, polarization: Int) = builder.addOffset(22, polarization, 0)
        fun addAzimuth(builder: FlatBufferBuilder, azimuth: Int) = builder.addOffset(23, azimuth, 0)
        fun addElevation(builder: FlatBufferBuilder, elevation: Int) = builder.addOffset(24, elevation, 0)
        fun addRestrictedFrequency(builder: FlatBufferBuilder, restrictedFrequency: Int) = builder.addOffset(25, restrictedFrequency, 0)
        fun createRestrictedFrequencyVector(builder: FlatBufferBuilder, data: IntArray) : Int {
            builder.startVector(4, data.size, 4)
            for (i in data.size - 1 downTo 0) {
                builder.addOffset(data[i])
            }
            return builder.endVector()
        }
        fun startRestrictedFrequencyVector(builder: FlatBufferBuilder, numElems: Int) = builder.startVector(4, numElems, 4)
        fun addRestrictedFrequencyNotes(builder: FlatBufferBuilder, restrictedFrequencyNotes: Int) = builder.addOffset(26, restrictedFrequencyNotes, 0)
        fun addDoppler(builder: FlatBufferBuilder, doppler: Int) = builder.addOffset(27, doppler, 0)
        fun addTime(builder: FlatBufferBuilder, time: Int) = builder.addOffset(28, time, 0)
        fun addStokes(builder: FlatBufferBuilder, stokes: Int) = builder.addOffset(29, stokes, 0)
        fun addAmplitude(builder: FlatBufferBuilder, amplitude: Int) = builder.addOffset(30, amplitude, 0)
        fun addPhase(builder: FlatBufferBuilder, phase: Int) = builder.addOffset(31, phase, 0)
        fun addFoF2(builder: FlatBufferBuilder, foF2: Double) = builder.addDouble(32, foF2, 0.0)
        fun addFoF1(builder: FlatBufferBuilder, foF1: Double) = builder.addDouble(33, foF1, 0.0)
        fun addFxF2(builder: FlatBufferBuilder, fxF2: Double) = builder.addDouble(34, fxF2, 0.0)
        fun addFxF1(builder: FlatBufferBuilder, fxF1: Double) = builder.addDouble(35, fxF1, 0.0)
        fun addMd(builder: FlatBufferBuilder, md: Double) = builder.addDouble(36, md, 0.0)
        fun addLuf(builder: FlatBufferBuilder, luf: Double) = builder.addDouble(37, luf, 0.0)
        fun addMufd(builder: FlatBufferBuilder, mufd: Double) = builder.addDouble(38, mufd, 0.0)
        fun addFmin(builder: FlatBufferBuilder, fmin: Double) = builder.addDouble(39, fmin, 0.0)
        fun addFoEs(builder: FlatBufferBuilder, foEs: Double) = builder.addDouble(40, foEs, 0.0)
        fun addFminF(builder: FlatBufferBuilder, fminF: Double) = builder.addDouble(41, fminF, 0.0)
        fun addFminE(builder: FlatBufferBuilder, fminE: Double) = builder.addDouble(42, fminE, 0.0)
        fun addFoE(builder: FlatBufferBuilder, foE: Double) = builder.addDouble(43, foE, 0.0)
        fun addFxE(builder: FlatBufferBuilder, fxE: Double) = builder.addDouble(44, fxE, 0.0)
        fun addFxI(builder: FlatBufferBuilder, fxI: Double) = builder.addDouble(45, fxI, 0.0)
        fun addHprimeF(builder: FlatBufferBuilder, hprimeF: Double) = builder.addDouble(46, hprimeF, 0.0)
        fun addHprimeF2(builder: FlatBufferBuilder, hprimeF2: Double) = builder.addDouble(47, hprimeF2, 0.0)
        fun addHprimeF1(builder: FlatBufferBuilder, hprimeF1: Double) = builder.addDouble(48, hprimeF1, 0.0)
        fun addHprimeE(builder: FlatBufferBuilder, hprimeE: Double) = builder.addDouble(49, hprimeE, 0.0)
        fun addHprimeEs(builder: FlatBufferBuilder, hprimeEs: Double) = builder.addDouble(50, hprimeEs, 0.0)
        fun addZmE(builder: FlatBufferBuilder, zmE: Double) = builder.addDouble(51, zmE, 0.0)
        fun addYE(builder: FlatBufferBuilder, yE: Double) = builder.addDouble(52, yE, 0.0)
        fun addQf(builder: FlatBufferBuilder, qf: Double) = builder.addDouble(53, qf, 0.0)
        fun addQe(builder: FlatBufferBuilder, qe: Double) = builder.addDouble(54, qe, 0.0)
        fun addDownF(builder: FlatBufferBuilder, downF: Double) = builder.addDouble(55, downF, 0.0)
        fun addDownE(builder: FlatBufferBuilder, downE: Double) = builder.addDouble(56, downE, 0.0)
        fun addDownEs(builder: FlatBufferBuilder, downEs: Double) = builder.addDouble(57, downEs, 0.0)
        fun addFf(builder: FlatBufferBuilder, ff: Double) = builder.addDouble(58, ff, 0.0)
        fun addFe(builder: FlatBufferBuilder, fe: Double) = builder.addDouble(59, fe, 0.0)
        fun addD(builder: FlatBufferBuilder, d: Double) = builder.addDouble(60, d, 0.0)
        fun addFmuf(builder: FlatBufferBuilder, fmuf: Double) = builder.addDouble(61, fmuf, 0.0)
        fun addHprimefMUF(builder: FlatBufferBuilder, hprimefMuf: Double) = builder.addDouble(62, hprimefMuf, 0.0)
        fun addDeltafoF2(builder: FlatBufferBuilder, deltafoF2: Double) = builder.addDouble(63, deltafoF2, 0.0)
        fun addFoEp(builder: FlatBufferBuilder, foEp: Double) = builder.addDouble(64, foEp, 0.0)
        fun addFhprimeF(builder: FlatBufferBuilder, fhprimeF: Double) = builder.addDouble(65, fhprimeF, 0.0)
        fun addFhprimeF2(builder: FlatBufferBuilder, fhprimeF2: Double) = builder.addDouble(66, fhprimeF2, 0.0)
        fun addFoF1p(builder: FlatBufferBuilder, foF1p: Double) = builder.addDouble(67, foF1p, 0.0)
        fun addFoF2p(builder: FlatBufferBuilder, foF2p: Double) = builder.addDouble(68, foF2p, 0.0)
        fun addHmF2(builder: FlatBufferBuilder, hmF2: Double) = builder.addDouble(69, hmF2, 0.0)
        fun addHmF1(builder: FlatBufferBuilder, hmF1: Double) = builder.addDouble(70, hmF1, 0.0)
        fun addHmE(builder: FlatBufferBuilder, hmE: Double) = builder.addDouble(71, hmE, 0.0)
        fun addZhalfNm(builder: FlatBufferBuilder, zhalfNm: Double) = builder.addDouble(72, zhalfNm, 0.0)
        fun addFminEs(builder: FlatBufferBuilder, fminEs: Double) = builder.addDouble(73, fminEs, 0.0)
        fun addYF2(builder: FlatBufferBuilder, yF2: Double) = builder.addDouble(74, yF2, 0.0)
        fun addYF1(builder: FlatBufferBuilder, yF1: Double) = builder.addDouble(75, yF1, 0.0)
        fun addTec(builder: FlatBufferBuilder, tec: Double) = builder.addDouble(76, tec, 0.0)
        fun addScaleHeightF2Peak(builder: FlatBufferBuilder, scaleHeightF2Peak: Double) = builder.addDouble(77, scaleHeightF2Peak, 0.0)
        fun addB0(builder: FlatBufferBuilder, b0: Double) = builder.addDouble(78, b0, 0.0)
        fun addB1(builder: FlatBufferBuilder, b1: Double) = builder.addDouble(79, b1, 0.0)
        fun addD1(builder: FlatBufferBuilder, d1: Double) = builder.addDouble(80, d1, 0.0)
        fun addFoEa(builder: FlatBufferBuilder, foEa: Double) = builder.addDouble(81, foEa, 0.0)
        fun addHprimeEa(builder: FlatBufferBuilder, hprimeEa: Double) = builder.addDouble(82, hprimeEa, 0.0)
        fun addFoP(builder: FlatBufferBuilder, foP: Double) = builder.addDouble(83, foP, 0.0)
        fun addHprimeP(builder: FlatBufferBuilder, hprimeP: Double) = builder.addDouble(84, hprimeP, 0.0)
        fun addFbEs(builder: FlatBufferBuilder, fbEs: Double) = builder.addDouble(85, fbEs, 0.0)
        fun addTypeEs(builder: FlatBufferBuilder, typeEs: Int) = builder.addOffset(86, typeEs, 0)
        fun addCharAtts(builder: FlatBufferBuilder, charAtts: Int) = builder.addOffset(87, charAtts, 0)
        fun createCharAttsVector(builder: FlatBufferBuilder, data: IntArray) : Int {
            builder.startVector(4, data.size, 4)
            for (i in data.size - 1 downTo 0) {
                builder.addOffset(data[i])
            }
            return builder.endVector()
        }
        fun startCharAttsVector(builder: FlatBufferBuilder, numElems: Int) = builder.startVector(4, numElems, 4)
        fun addHeight(builder: FlatBufferBuilder, height: Int) = builder.addOffset(88, height, 0)
        fun createHeightVector(builder: FlatBufferBuilder, data: IntArray) : Int {
            builder.startVector(4, data.size, 4)
            for (i in data.size - 1 downTo 0) {
                builder.addOffset(data[i])
            }
            return builder.endVector()
        }
        fun startHeightVector(builder: FlatBufferBuilder, numElems: Int) = builder.startVector(4, numElems, 4)
        fun addPlasmaFrequency(builder: FlatBufferBuilder, plasmaFrequency: Int) = builder.addOffset(89, plasmaFrequency, 0)
        fun createPlasmaFrequencyVector(builder: FlatBufferBuilder, data: IntArray) : Int {
            builder.startVector(4, data.size, 4)
            for (i in data.size - 1 downTo 0) {
                builder.addOffset(data[i])
            }
            return builder.endVector()
        }
        fun startPlasmaFrequencyVector(builder: FlatBufferBuilder, numElems: Int) = builder.startVector(4, numElems, 4)
        fun addPlasmaFrequencyUncertainty(builder: FlatBufferBuilder, plasmaFrequencyUncertainty: Int) = builder.addOffset(90, plasmaFrequencyUncertainty, 0)
        fun createPlasmaFrequencyUncertaintyVector(builder: FlatBufferBuilder, data: IntArray) : Int {
            builder.startVector(4, data.size, 4)
            for (i in data.size - 1 downTo 0) {
                builder.addOffset(data[i])
            }
            return builder.endVector()
        }
        fun startPlasmaFrequencyUncertaintyVector(builder: FlatBufferBuilder, numElems: Int) = builder.startVector(4, numElems, 4)
        fun addElectronDensity(builder: FlatBufferBuilder, electronDensity: Int) = builder.addOffset(91, electronDensity, 0)
        fun createElectronDensityVector(builder: FlatBufferBuilder, data: IntArray) : Int {
            builder.startVector(4, data.size, 4)
            for (i in data.size - 1 downTo 0) {
                builder.addOffset(data[i])
            }
            return builder.endVector()
        }
        fun startElectronDensityVector(builder: FlatBufferBuilder, numElems: Int) = builder.startVector(4, numElems, 4)
        fun addElectronDensityUncertainty(builder: FlatBufferBuilder, electronDensityUncertainty: Int) = builder.addOffset(92, electronDensityUncertainty, 0)
        fun createElectronDensityUncertaintyVector(builder: FlatBufferBuilder, data: IntArray) : Int {
            builder.startVector(4, data.size, 4)
            for (i in data.size - 1 downTo 0) {
                builder.addOffset(data[i])
            }
            return builder.endVector()
        }
        fun startElectronDensityUncertaintyVector(builder: FlatBufferBuilder, numElems: Int) = builder.startVector(4, numElems, 4)
        fun addArtistFlags(builder: FlatBufferBuilder, artistFlags: Int) = builder.addOffset(93, artistFlags, 0)
        fun createArtistFlagsVector(builder: FlatBufferBuilder, data: IntArray) : Int {
            builder.startVector(4, data.size, 4)
            for (i in data.size - 1 downTo 0) {
                builder.addOffset(data[i])
            }
            return builder.endVector()
        }
        fun startArtistFlagsVector(builder: FlatBufferBuilder, numElems: Int) = builder.startVector(4, numElems, 4)
        fun addTraceGeneric(builder: FlatBufferBuilder, traceGeneric: Int) = builder.addOffset(94, traceGeneric, 0)
        fun addTidPhaseSpeeds(builder: FlatBufferBuilder, tidPhaseSpeeds: Int) = builder.addOffset(95, tidPhaseSpeeds, 0)
        fun createTidPhaseSpeedsVector(builder: FlatBufferBuilder, data: IntArray) : Int {
            builder.startVector(4, data.size, 4)
            for (i in data.size - 1 downTo 0) {
                builder.addOffset(data[i])
            }
            return builder.endVector()
        }
        fun startTidPhaseSpeedsVector(builder: FlatBufferBuilder, numElems: Int) = builder.startVector(4, numElems, 4)
        fun addTidAzimuth(builder: FlatBufferBuilder, tidAzimuth: Int) = builder.addOffset(96, tidAzimuth, 0)
        fun createTidAzimuthVector(builder: FlatBufferBuilder, data: IntArray) : Int {
            builder.startVector(4, data.size, 4)
            for (i in data.size - 1 downTo 0) {
                builder.addOffset(data[i])
            }
            return builder.endVector()
        }
        fun startTidAzimuthVector(builder: FlatBufferBuilder, numElems: Int) = builder.startVector(4, numElems, 4)
        fun addTidPeriods(builder: FlatBufferBuilder, tidPeriods: Int) = builder.addOffset(97, tidPeriods, 0)
        fun createTidPeriodsVector(builder: FlatBufferBuilder, data: IntArray) : Int {
            builder.startVector(4, data.size, 4)
            for (i in data.size - 1 downTo 0) {
                builder.addOffset(data[i])
            }
            return builder.endVector()
        }
        fun startTidPeriodsVector(builder: FlatBufferBuilder, numElems: Int) = builder.startVector(4, numElems, 4)
        fun addDatum(builder: FlatBufferBuilder, datum: Int) = builder.addOffset(98, datum, 0)
        fun addPlatformName(builder: FlatBufferBuilder, platformName: Int) = builder.addOffset(99, platformName, 0)
        fun addCreatedAt(builder: FlatBufferBuilder, createdAt: Int) = builder.addOffset(100, createdAt, 0)
        fun addCreatedBy(builder: FlatBufferBuilder, createdBy: Int) = builder.addOffset(101, createdBy, 0)
        fun addUpdatedAt(builder: FlatBufferBuilder, updatedAt: Int) = builder.addOffset(102, updatedAt, 0)
        fun addUpdatedBy(builder: FlatBufferBuilder, updatedBy: Int) = builder.addOffset(103, updatedBy, 0)
        fun addSource(builder: FlatBufferBuilder, source: Int) = builder.addOffset(104, source, 0)
        fun addOrigin(builder: FlatBufferBuilder, origin: Int) = builder.addOffset(105, origin, 0)
        fun addDataMode(builder: FlatBufferBuilder, dataMode: Byte) = builder.addByte(106, dataMode, 0)
        fun addOrigNetwork(builder: FlatBufferBuilder, origNetwork: Int) = builder.addOffset(107, origNetwork, 0)
        fun endIonoObservation_Full(builder: FlatBufferBuilder) : Int {
            val o = builder.endTable()
            return o
        }
        fun finishIonoObservationFullBuffer(builder: FlatBufferBuilder, offset: Int) = builder.finish(offset, "IONO")
        fun finishSizePrefixedIonoObservation_FullBuffer(builder: FlatBufferBuilder, offset: Int) = builder.finishSizePrefixed(offset, "IONO")
    }
}
