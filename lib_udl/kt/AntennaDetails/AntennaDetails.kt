// automatically generated by the FlatBuffers compiler, do not modify

import com.google.flatbuffers.BaseVector
import com.google.flatbuffers.BooleanVector
import com.google.flatbuffers.ByteVector
import com.google.flatbuffers.Constants
import com.google.flatbuffers.DoubleVector
import com.google.flatbuffers.FlatBufferBuilder
import com.google.flatbuffers.FloatVector
import com.google.flatbuffers.LongVector
import com.google.flatbuffers.StringVector
import com.google.flatbuffers.Struct
import com.google.flatbuffers.Table
import com.google.flatbuffers.UnionVector
import java.nio.ByteBuffer
import java.nio.ByteOrder
import kotlin.math.sign

/**
 * /// Detailed information for a spacecraft communication antenna. One antenna may have multiple AntennaDetails records, compiled by various sources.
 */
@Suppress("unused")
class AntennaDetails : Table() {

    fun __init(_i: Int, _bb: ByteBuffer)  {
        __reset(_i, _bb)
    }
    fun __assign(_i: Int, _bb: ByteBuffer) : AntennaDetails {
        __init(_i, _bb)
        return this
    }
    /**
     * Unique identifier of the record, auto-generated by the system.
     * Example: /// Example: ANTENNADETAILS-ID
     * Constraints: Minimum length = 1, Maximum length = 36
     */
    val id : String?
        get() {
            val o = __offset(4)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val idAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(4, 1)
    fun idInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 4, 1)
    /**
     * Unique identifier of the parent Antenna.
     * Example: /// Example: ANTENNA-ID
     * Constraints: Minimum length = 1, Maximum length = 36
     */
    val idAntenna : String?
        get() {
            val o = __offset(6)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val idAntennaAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(6, 1)
    fun idAntennaInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 6, 1)
    /**
     * Classification marking of the data in IC/CAPCO Portion-marked format.
     * Example: /// Example: U
     * Constraints: Minimum length = 1, Maximum length = 128
     */
    val classificationMarking : String?
        get() {
            val o = __offset(8)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val classificationMarkingAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(8, 1)
    fun classificationMarkingInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 8, 1)
    /**
     * Type of antenna (e.g. Reflector, Double Reflector, Shaped Reflector, Horn, Parabolic, etc.).
     * Example: /// Example: Reflector
     * Constraints: Minimum length = 0, Maximum length = 64
     */
    val type : String?
        get() {
            val o = __offset(10)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val typeAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(10, 1)
    fun typeInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 10, 1)
    /**
     * Antenna position (e.g. Top, Nadir, Side).
     * Example: /// Example: Top
     * Constraints: Minimum length = 0, Maximum length = 128
     */
    val position : String?
        get() {
            val o = __offset(12)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val positionAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(12, 1)
    fun positionInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 12, 1)
    /**
     * Antenna mode (e.g. TX,RX).
     * Example: /// Example: TX
     * Constraints: Minimum length = 0, Maximum length = 4
     */
    val mode : Byte
        get() {
            val o = __offset(14)
            return if(o != 0) bb.get(o + bb_pos) else 0
        }
    /**
     * Boolean indicating if this antenna is steerable.
     * Example: /// Example: False
     * Constraints: No constraints specified.
     */
    val steerable : Boolean
        get() {
            val o = __offset(16)
            return if(o != 0) 0.toByte() != bb.get(o + bb_pos) else false
        }
    /**
     * Boolean indicating if this is a beam forming antenna.
     * Example: /// Example: False
     * Constraints: No constraints specified.
     */
    val beamForming : Boolean
        get() {
            val o = __offset(18)
            return if(o != 0) 0.toByte() != bb.get(o + bb_pos) else false
        }
    /**
     * ID of the organization that manufactures the antenna.
     * Example: /// Example: MANUFACTUREORG-ID
     * Constraints: Minimum length = 0, Maximum length = 36
     */
    val manufacturerOrgId : String?
        get() {
            val o = __offset(20)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val manufacturerOrgIdAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(20, 1)
    fun manufacturerOrgIdInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 20, 1)
    /**
     * Antenna diameter in meters.
     * Example: /// Example: 0.01
     * Constraints: No constraints specified.
     */
    val diameter : Double
        get() {
            val o = __offset(22)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Array with 1-2 values specifying the length and width (for rectangular) and just length for dipole antennas in meters.
     * Example: /// Example: [0.03, 0.05]
     * Constraints: No constraints specified.
     */
    fun size(j: Int) : String? {
        val o = __offset(24)
        return if (o != 0) {
            __string(__vector(o) + j * 4)
        } else {
            null
        }
    }
    val sizeLength : Int
        get() {
            val o = __offset(24); return if (o != 0) __vector_len(o) else 0
        }
    /**
     * Antenna start of frequency range in Mhz.
     * Example: /// Example: 2.1
     * Constraints: No constraints specified.
     */
    val startFrequency : Double
        get() {
            val o = __offset(26)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Antenna end of frequency range in Mhz.
     * Example: /// Example: 3.3
     * Constraints: No constraints specified.
     */
    val endFrequency : Double
        get() {
            val o = __offset(28)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Array of angles between the half-power (-3 dB) points of the main lobe of the antenna, in degrees.
     * Example: /// Example: 14.1
     * Constraints: No constraints specified.
     */
    val beamwidth : Double
        get() {
            val o = __offset(30)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Antenna maximum gain in dBi.
     * Example: /// Example: 20.1
     * Constraints: No constraints specified.
     */
    val gain : Double
        get() {
            val o = __offset(32)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Antenna gain tolerance in dB.
     * Example: /// Example: 5.1
     * Constraints: No constraints specified.
     */
    val gainTolerance : Double
        get() {
            val o = __offset(34)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Antenna polarization in degrees.
     * Example: /// Example: 45.1
     * Constraints: No constraints specified.
     */
    val polarization : Double
        get() {
            val o = __offset(36)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Antenna description.
     * Example: /// Example: Description of antenna A
     * Constraints: Minimum length = 0, Maximum length = 512
     */
    val description : String?
        get() {
            val o = __offset(38)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val descriptionAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(38, 1)
    fun descriptionInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 38, 1)
    /**
     * Time the row was created in the database, auto-populated by the system.
     * Example: /// Example: 2018-01-01T16:00:00.123Z
     * Constraints: No constraints specified.
     */
    val createdAt : String?
        get() {
            val o = __offset(40)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val createdAtAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(40, 1)
    fun createdAtInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 40, 1)
    /**
     * Application user who created the row in the database, auto-populated by the system.
     * Example: /// Example: some.user
     * Constraints: Minimum length = 1, Maximum length = 64
     */
    val createdBy : String?
        get() {
            val o = __offset(42)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val createdByAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(42, 1)
    fun createdByInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 42, 1)
    /**
     * Time the row was last updated in the database, auto-populated by the system.
     * Example: /// Example: 2018-01-01T16:00:00.123Z
     * Constraints: No constraints specified.
     */
    val updatedAt : String?
        get() {
            val o = __offset(44)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val updatedAtAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(44, 1)
    fun updatedAtInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 44, 1)
    /**
     * Application user who updated the row in the database, auto-populated by the system.
     * Example: /// Example: some.user
     * Constraints: Minimum length = 0, Maximum length = 64
     */
    val updatedBy : String?
        get() {
            val o = __offset(46)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val updatedByAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(46, 1)
    fun updatedByInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 46, 1)
    /**
     * Source of the data.
     * Example: /// Example: Bluestaq
     * Constraints: Minimum length = 1, Maximum length = 64
     */
    val source : String?
        get() {
            val o = __offset(48)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val sourceAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(48, 1)
    fun sourceInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 48, 1)
    /**
     * Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
     * Example: /// Example: THIRD_PARTY_DATASOURCE
     * Constraints: Minimum length = 0, Maximum length = 64
     */
    val origin : String?
        get() {
            val o = __offset(50)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val originAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(50, 1)
    fun originInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 50, 1)
    /**
     * The originating source network on which this record was created, auto-populated by the system.
     * Example: /// Example: ORIG
     * Constraints: Minimum length = 1, Maximum length = 32
     */
    val origNetwork : String?
        get() {
            val o = __offset(52)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val origNetworkAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(52, 1)
    fun origNetworkInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 52, 1)
    /**
     * Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
     * EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
     * REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
     * SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
     * TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
     * Example: /// Example: TEST
     * Constraints: Minimum length = 1, Maximum length = 32
     */
    val dataMode : Byte
        get() {
            val o = __offset(54)
            return if(o != 0) bb.get(o + bb_pos) else 0
        }
    /**
     * Optional array of provider/source specific tags for this data, where each element is no longer than 32 characters, used for implementing data owner conditional access controls to restrict access to the data. Should be left null by data providers unless conditional access controls are coordinated with the UDL team.
     * Example: /// Example: ['PROVIDER_TAG1', 'PROVIDER_TAG2']
     * Constraints: No constraints specified.
     */
    fun tags(j: Int) : String? {
        val o = __offset(56)
        return if (o != 0) {
            __string(__vector(o) + j * 4)
        } else {
            null
        }
    }
    val tagsLength : Int
        get() {
            val o = __offset(56); return if (o != 0) __vector_len(o) else 0
        }
    /**
     * No description provided.
     * Example: /// Example: No example provided.
     * Constraints: No constraints specified.
     */
    val manufacturerOrg : String?
        get() {
            val o = __offset(58)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val manufacturerOrgAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(58, 1)
    fun manufacturerOrgInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 58, 1)
    companion object {
        fun validateVersion() = Constants.FLATBUFFERS_24_3_25()
        fun getRootAsAntennaDetails(_bb: ByteBuffer): AntennaDetails = getRootAsAntennaDetails(_bb, AntennaDetails())
        fun getRootAsAntennaDetails(_bb: ByteBuffer, obj: AntennaDetails): AntennaDetails {
            _bb.order(ByteOrder.LITTLE_ENDIAN)
            return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb))
        }
        fun AntennaDetailsBufferHasIdentifier(_bb: ByteBuffer) : Boolean = __has_identifier(_bb, "ANTE")
        fun createAntennaDetails(builder: FlatBufferBuilder, idOffset: Int, idAntennaOffset: Int, classificationMarkingOffset: Int, typeOffset: Int, positionOffset: Int, mode: Byte, steerable: Boolean, beamForming: Boolean, manufacturerOrgIdOffset: Int, diameter: Double, sizeOffset: Int, startFrequency: Double, endFrequency: Double, beamwidth: Double, gain: Double, gainTolerance: Double, polarization: Double, descriptionOffset: Int, createdAtOffset: Int, createdByOffset: Int, updatedAtOffset: Int, updatedByOffset: Int, sourceOffset: Int, originOffset: Int, origNetworkOffset: Int, dataMode: Byte, tagsOffset: Int, manufacturerOrgOffset: Int) : Int {
            builder.startTable(28)
            addPolarization(builder, polarization)
            addGainTolerance(builder, gainTolerance)
            addGain(builder, gain)
            addBeamwidth(builder, beamwidth)
            addEndFrequency(builder, endFrequency)
            addStartFrequency(builder, startFrequency)
            addDiameter(builder, diameter)
            addManufacturerOrg(builder, manufacturerOrgOffset)
            addTags(builder, tagsOffset)
            addOrigNetwork(builder, origNetworkOffset)
            addOrigin(builder, originOffset)
            addSource(builder, sourceOffset)
            addUpdatedBy(builder, updatedByOffset)
            addUpdatedAt(builder, updatedAtOffset)
            addCreatedBy(builder, createdByOffset)
            addCreatedAt(builder, createdAtOffset)
            addDescription(builder, descriptionOffset)
            addSize(builder, sizeOffset)
            addManufacturerOrgId(builder, manufacturerOrgIdOffset)
            addPosition(builder, positionOffset)
            addType(builder, typeOffset)
            addClassificationMarking(builder, classificationMarkingOffset)
            addIdAntenna(builder, idAntennaOffset)
            addId(builder, idOffset)
            addDataMode(builder, dataMode)
            addBeamForming(builder, beamForming)
            addSteerable(builder, steerable)
            addMode(builder, mode)
            return endAntennaDetails(builder)
        }
        fun startAntennaDetails(builder: FlatBufferBuilder) = builder.startTable(28)
        fun addId(builder: FlatBufferBuilder, id: Int) = builder.addOffset(0, id, 0)
        fun addIdAntenna(builder: FlatBufferBuilder, idAntenna: Int) = builder.addOffset(1, idAntenna, 0)
        fun addClassificationMarking(builder: FlatBufferBuilder, classificationMarking: Int) = builder.addOffset(2, classificationMarking, 0)
        fun addType(builder: FlatBufferBuilder, type: Int) = builder.addOffset(3, type, 0)
        fun addPosition(builder: FlatBufferBuilder, position: Int) = builder.addOffset(4, position, 0)
        fun addMode(builder: FlatBufferBuilder, mode: Byte) = builder.addByte(5, mode, 0)
        fun addSteerable(builder: FlatBufferBuilder, steerable: Boolean) = builder.addBoolean(6, steerable, false)
        fun addBeamForming(builder: FlatBufferBuilder, beamForming: Boolean) = builder.addBoolean(7, beamForming, false)
        fun addManufacturerOrgId(builder: FlatBufferBuilder, manufacturerOrgId: Int) = builder.addOffset(8, manufacturerOrgId, 0)
        fun addDiameter(builder: FlatBufferBuilder, diameter: Double) = builder.addDouble(9, diameter, 0.0)
        fun addSize(builder: FlatBufferBuilder, size: Int) = builder.addOffset(10, size, 0)
        fun createSizeVector(builder: FlatBufferBuilder, data: IntArray) : Int {
            builder.startVector(4, data.size, 4)
            for (i in data.size - 1 downTo 0) {
                builder.addOffset(data[i])
            }
            return builder.endVector()
        }
        fun startSizeVector(builder: FlatBufferBuilder, numElems: Int) = builder.startVector(4, numElems, 4)
        fun addStartFrequency(builder: FlatBufferBuilder, startFrequency: Double) = builder.addDouble(11, startFrequency, 0.0)
        fun addEndFrequency(builder: FlatBufferBuilder, endFrequency: Double) = builder.addDouble(12, endFrequency, 0.0)
        fun addBeamwidth(builder: FlatBufferBuilder, beamwidth: Double) = builder.addDouble(13, beamwidth, 0.0)
        fun addGain(builder: FlatBufferBuilder, gain: Double) = builder.addDouble(14, gain, 0.0)
        fun addGainTolerance(builder: FlatBufferBuilder, gainTolerance: Double) = builder.addDouble(15, gainTolerance, 0.0)
        fun addPolarization(builder: FlatBufferBuilder, polarization: Double) = builder.addDouble(16, polarization, 0.0)
        fun addDescription(builder: FlatBufferBuilder, description: Int) = builder.addOffset(17, description, 0)
        fun addCreatedAt(builder: FlatBufferBuilder, createdAt: Int) = builder.addOffset(18, createdAt, 0)
        fun addCreatedBy(builder: FlatBufferBuilder, createdBy: Int) = builder.addOffset(19, createdBy, 0)
        fun addUpdatedAt(builder: FlatBufferBuilder, updatedAt: Int) = builder.addOffset(20, updatedAt, 0)
        fun addUpdatedBy(builder: FlatBufferBuilder, updatedBy: Int) = builder.addOffset(21, updatedBy, 0)
        fun addSource(builder: FlatBufferBuilder, source: Int) = builder.addOffset(22, source, 0)
        fun addOrigin(builder: FlatBufferBuilder, origin: Int) = builder.addOffset(23, origin, 0)
        fun addOrigNetwork(builder: FlatBufferBuilder, origNetwork: Int) = builder.addOffset(24, origNetwork, 0)
        fun addDataMode(builder: FlatBufferBuilder, dataMode: Byte) = builder.addByte(25, dataMode, 0)
        fun addTags(builder: FlatBufferBuilder, tags: Int) = builder.addOffset(26, tags, 0)
        fun createTagsVector(builder: FlatBufferBuilder, data: IntArray) : Int {
            builder.startVector(4, data.size, 4)
            for (i in data.size - 1 downTo 0) {
                builder.addOffset(data[i])
            }
            return builder.endVector()
        }
        fun startTagsVector(builder: FlatBufferBuilder, numElems: Int) = builder.startVector(4, numElems, 4)
        fun addManufacturerOrg(builder: FlatBufferBuilder, manufacturerOrg: Int) = builder.addOffset(27, manufacturerOrg, 0)
        fun endAntennaDetails(builder: FlatBufferBuilder) : Int {
            val o = builder.endTable()
            return o
        }
        fun finishAntennaDetailsBuffer(builder: FlatBufferBuilder, offset: Int) = builder.finish(offset, "ANTE")
        fun finishSizePrefixedAntennaDetailsBuffer(builder: FlatBufferBuilder, offset: Int) = builder.finishSizePrefixed(offset, "ANTE")
    }
}
