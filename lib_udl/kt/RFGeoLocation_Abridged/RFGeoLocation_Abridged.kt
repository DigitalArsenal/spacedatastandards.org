// automatically generated by the FlatBuffers compiler, do not modify

import com.google.flatbuffers.BaseVector
import com.google.flatbuffers.BooleanVector
import com.google.flatbuffers.ByteVector
import com.google.flatbuffers.Constants
import com.google.flatbuffers.DoubleVector
import com.google.flatbuffers.FlatBufferBuilder
import com.google.flatbuffers.FloatVector
import com.google.flatbuffers.LongVector
import com.google.flatbuffers.StringVector
import com.google.flatbuffers.Struct
import com.google.flatbuffers.Table
import com.google.flatbuffers.UnionVector
import java.nio.ByteBuffer
import java.nio.ByteOrder
import kotlin.math.sign

/**
 * /// Model representation of geolocation data for a radio frequency (RF) signal or emitter.
 */
@Suppress("unused")
class RFGeoLocation_Abridged : Table() {

    fun __init(_i: Int, _bb: ByteBuffer)  {
        __reset(_i, _bb)
    }
    fun __assign(_i: Int, _bb: ByteBuffer) : RFGeoLocation_Abridged {
        __init(_i, _bb)
        return this
    }
    /**
     * Unique identifier of the record, auto-generated by the system.
     * Example: /// Example: 026dd511-8ba5-47d3-9909-836149f87686
     * Constraints: Minimum length = 1, Maximum length = 36
     */
    val id : String?
        get() {
            val o = __offset(4)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val idAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(4, 1)
    fun idInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 4, 1)
    /**
     * Classification marking of the data in IC/CAPCO Portion-marked format.
     * Example: /// Example: U
     * Constraints: Minimum length = 1, Maximum length = 128
     */
    val classificationMarking : String?
        get() {
            val o = __offset(6)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val classificationMarkingAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(6, 1)
    fun classificationMarkingInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 6, 1)
    /**
     * The order identifier for this RF Geo Location data set.
     * Example: /// Example: 155240
     * Constraints: Minimum length = 1, Maximum length = 36
     */
    val orderId : String?
        get() {
            val o = __offset(8)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val orderIdAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(8, 1)
    fun orderIdInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 8, 1)
    /**
     * Specifies the creation time associated with the order in ISO 8601 UTC with microsecond precision.
     * Example: /// Example: 2024-05-31T23:06:18.123456Z
     * Constraints: No constraints specified.
     */
    val createdTs : String?
        get() {
            val o = __offset(10)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val createdTsAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(10, 1)
    fun createdTsInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 10, 1)
    /**
     * The time representing the mean of the constituent single-burst observations in ISO 8601 UTC with microsecond precision.
     * Example: /// Example: 2024-05-31T21:16:58.123456Z
     * Constraints: No constraints specified.
     */
    val receivedTs : String?
        get() {
            val o = __offset(12)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val receivedTsAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(12, 1)
    fun receivedTsInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 12, 1)
    /**
     * The order start time for this RF Geo Location data set in ISO 8601 UTC with microsecond precision.
     * Example: /// Example: 2024-05-31T21:12:12.123456Z
     * Constraints: No constraints specified.
     */
    val startTime : String?
        get() {
            val o = __offset(14)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val startTimeAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(14, 1)
    fun startTimeInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 14, 1)
    /**
     * The order end time for this RF Geo Location data set in ISO 8601 UTC with microsecond precision.
     * Example: /// Example: 2024-05-31T21:16:15.123456Z
     * Constraints: No constraints specified.
     */
    val endTime : String?
        get() {
            val o = __offset(16)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val endTimeAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(16, 1)
    fun endTimeInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 16, 1)
    /**
     * Unique identifier of the satellite used to identify and geolocate RF signals of interest. This ID can be used to obtain additional information on an OnOrbit object using the 'get by ID' operation (e.g. /udl/onorbit/{id}). For example, the onorbit object with idOnOrbit = abc would be queried as /udl/onorbit/abc.
     * Example: /// Example: HawkEye360-7
     * Constraints: Minimum length = 0, Maximum length = 36
     */
    val idOnOrbit : String?
        get() {
            val o = __offset(18)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val idOnOrbitAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(18, 1)
    fun idOnOrbitInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 18, 1)
    /**
     * Satellite/catalog number of the target on-orbit object.
     * Example: /// Example: 101
     * Constraints: No constraints specified.
     */
    val satNo : Int
        get() {
            val o = __offset(20)
            return if(o != 0) bb.getInt(o + bb_pos) else 0
        }
    /**
     * Optional identifier of the satellite used to identify and geolocate RF signals of interest of this observation. This may be an internal identifier and not necessarily a valid satellite number.
     * Example: /// Example: ORIGOBJECT-ID
     * Constraints: Minimum length = 0, Maximum length = 64
     */
    val origObjectId : String?
        get() {
            val o = __offset(22)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val origObjectIdAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(22, 1)
    fun origObjectIdInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 22, 1)
    /**
     * The name of the satellite constellation.
     * Example: /// Example: HawkEye360
     * Constraints: Minimum length = 0, Maximum length = 36
     */
    val constellation : String?
        get() {
            val o = __offset(24)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val constellationAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(24, 1)
    fun constellationInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 24, 1)
    /**
     * The name of the signal of interest.
     * Example: /// Example: GPS
     * Constraints: Minimum length = 0, Maximum length = 36
     */
    val signalOfInterest : String?
        get() {
            val o = __offset(26)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val signalOfInterestAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(26, 1)
    fun signalOfInterestInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 26, 1)
    /**
     * Optional identifier of the geolocated signal of interest RF Emitter for this observation. This ID can be used to obtain additional information on an RF Emitter object using the 'get by ID' operation (e.g. /udl/rfemitter/{id}). For example, the rfemitter object with idRFEmitter = abc would be queried as /udl/rfemitter/abc.
     * Example: /// Example: RFEMITTER-ID
     * Constraints: Minimum length = 0, Maximum length = 36
     */
    val idRfemitter : String?
        get() {
            val o = __offset(28)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val idRfemitterAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(28, 1)
    fun idRfemitterInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 28, 1)
    /**
     * Optional identifier of the emitter of interest for this observation. This may be an internal identifier and not necessarily a valid emitter Id.
     * Example: /// Example: ORIGRFEMITTER-ID
     * Constraints: Minimum length = 0, Maximum length = 36
     */
    val origRfemitterId : String?
        get() {
            val o = __offset(30)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val origRfemitterIdAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(30, 1)
    fun origRfemitterIdInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 30, 1)
    /**
     * The count of single-burst observations used for this geolocation observation.
     * Example: /// Example: 17
     * Constraints: No constraints specified.
     */
    val numBursts : Int
        get() {
            val o = __offset(32)
            return if(o != 0) bb.getInt(o + bb_pos) else 0
        }
    /**
     * The minimum detected frequency in megahertz.
     * Example: /// Example: 1575.42
     * Constraints: No constraints specified.
     */
    val minFreq : Double
        get() {
            val o = __offset(34)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * The maximum detected frequency in megahertz.
     * Example: /// Example: 1575.42
     * Constraints: No constraints specified.
     */
    val maxFreq : Double
        get() {
            val o = __offset(36)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * The detected signal frequency in megahertz.
     * Example: /// Example: 1575.42
     * Constraints: No constraints specified.
     */
    val centerFreq : Double
        get() {
            val o = __offset(38)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * WGS-84 latitude of the most likely emitter location coordinate point, in degrees. -90 to 90 degrees (negative values south of equator).
     * Example: /// Example: 41.172
     * Constraints: No constraints specified.
     */
    val detectLat : Double
        get() {
            val o = __offset(40)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * WGS-84 longitude of the most likely emitter location coordinate point, in degrees. -180 to 180 degrees (negative values west of Prime Meridian).
     * Example: /// Example: 37.019
     * Constraints: No constraints specified.
     */
    val detectLon : Double
        get() {
            val o = __offset(42)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * The altitude relative to WGS-84 ellipsoid, in meters.
     * Example: /// Example: 123.456
     * Constraints: No constraints specified.
     */
    val detectAlt : Double
        get() {
            val o = __offset(44)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Confidence ellipse semi-major axis about the detection location lat/lon point measured in meters.
     * Example: /// Example: 9435.896
     * Constraints: No constraints specified.
     */
    val confSemiMajor : Double
        get() {
            val o = __offset(46)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Confidence ellipse semi-minor axis about the detection location lat/lon point measured in meters.
     * Example: /// Example: 2751.929
     * Constraints: No constraints specified.
     */
    val confSemiMinor : Double
        get() {
            val o = __offset(48)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Confidence ellipse orientation of semi-major axis about the detection location lat/lon point measured in degrees.
     * Example: /// Example: 89.852
     * Constraints: No constraints specified.
     */
    val confOrientation : Double
        get() {
            val o = __offset(50)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * The area of the confidence ellipse specified in meters squared to contain the emitter with a 95% probability.
     * Example: /// Example: 81577480.056
     * Constraints: No constraints specified.
     */
    val confArea : Double
        get() {
            val o = __offset(52)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Type of region as projected on the ground.
     * Example: /// Example: MultiPolygon
     * Constraints: Minimum length = 0, Maximum length = 128
     */
    val atype : String?
        get() {
            val o = __offset(54)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val atypeAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(54, 1)
    fun atypeInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 54, 1)
    /**
     * Geographical region or polygon (lat/lon pairs), as depicted by the GeoJSON representation of the geometry/geography, of the image as projected on the ground. GeoJSON Reference: https://geojson.org/. Ignored if included with a POST or PUT request that also specifies a valid 'area' or 'atext' field.
     * Example: /// Example: {"type":"Polygon","coordinates":[[[67.3291113966927,26.156175339112],[67.2580009640721,26.091022064271],[67.1795862381682,26.6637992964562],[67.2501237475598,26.730115808233],[67.3291113966927,26.156175339112]]]}
     * Constraints: No constraints specified.
     */
    val agjson : String?
        get() {
            val o = __offset(56)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val agjsonAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(56, 1)
    fun agjsonInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 56, 1)
    /**
     * Geographical region or polygon (lon/lat pairs), as depicted by the Well-Known Text representation of the geometry/geography, of the image as projected on the ground. WKT reference: https://www.opengeospatial.org/standards/wkt-crs. Ignored if included with a POST or PUT request that also specifies a valid 'area' field.
     * Example: /// Example: POLYGON((67.3291113966927 26.156175339112,67.2580009640721 26.091022064271,67.1795862381682 26.6637992964562,67.2501237475598 26.730115808233,67.3291113966927 26.156175339112))
     * Constraints: No constraints specified.
     */
    val atext : String?
        get() {
            val o = __offset(58)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val atextAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(58, 1)
    fun atextInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 58, 1)
    /**
     * Number of dimensions of the geometry depicted by region.
     * Example: /// Example: 3
     * Constraints: No constraints specified.
     */
    val andims : Int
        get() {
            val o = __offset(60)
            return if(o != 0) bb.getInt(o + bb_pos) else 0
        }
    /**
     * Geographical spatial_ref_sys for region.
     * Example: /// Example: 3
     * Constraints: No constraints specified.
     */
    val asrid : Int
        get() {
            val o = __offset(62)
            return if(o != 0) bb.getInt(o + bb_pos) else 0
        }
    /**
     * Optional external identifier referencing the entity used in the calculation of the geolocation.
     * Example: /// Example: 80fd25a8-8b41-448d-888a-91c9dfcd940b
     * Constraints: Minimum length = 0, Maximum length = 36
     */
    val passGroupId : String?
        get() {
            val o = __offset(64)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val passGroupIdAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(64, 1)
    fun passGroupIdInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 64, 1)
    /**
     * The RFGeo algorithm type and version used in geolocation calculations.
     * Example: /// Example: v1.0-3-gps_nb_3ball
     * Constraints: Minimum length = 0, Maximum length = 36
     */
    val algVersion : String?
        get() {
            val o = __offset(66)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val algVersionAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(66, 1)
    fun algVersionInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 66, 1)
    /**
     * Optional ID from external systems. This field has no meaning within UDL and is provided as a convenience for systems that require tracking of an internal system generated ID.
     * Example: /// Example: 780180925
     * Constraints: Minimum length = 0, Maximum length = 36
     */
    val externalId : String?
        get() {
            val o = __offset(68)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val externalIdAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(68, 1)
    fun externalIdInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 68, 1)
    /**
     * Optional array of provider/source specific tags for this data, where each element is no longer than 32 characters, used for implementing data owner conditional access controls to restrict access to the data. Should be left null by data providers unless conditional access controls are coordinated with the UDL team.
     * Example: /// Example: ['TAG1', 'TAG2']
     * Constraints: No constraints specified.
     */
    fun tags(j: Int) : String? {
        val o = __offset(70)
        return if (o != 0) {
            __string(__vector(o) + j * 4)
        } else {
            null
        }
    }
    val tagsLength : Int
        get() {
            val o = __offset(70); return if (o != 0) __vector_len(o) else 0
        }
    /**
     * Time the row was created in the database, auto-populated by the system.
     * Example: /// Example: 2018-01-01T16:00:00.123Z
     * Constraints: No constraints specified.
     */
    val createdAt : String?
        get() {
            val o = __offset(72)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val createdAtAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(72, 1)
    fun createdAtInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 72, 1)
    /**
     * Application user who created the row in the database, auto-populated by the system.
     * Example: /// Example: some.user
     * Constraints: Minimum length = 1, Maximum length = 64
     */
    val createdBy : String?
        get() {
            val o = __offset(74)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val createdByAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(74, 1)
    fun createdByInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 74, 1)
    /**
     * Source of the data.
     * Example: /// Example: Bluestaq
     * Constraints: Minimum length = 1, Maximum length = 36
     */
    val source : String?
        get() {
            val o = __offset(76)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val sourceAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(76, 1)
    fun sourceInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 76, 1)
    /**
     * Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
     * Example: /// Example: THIRD_PARTY_DATASOURCE
     * Constraints: Minimum length = 0, Maximum length = 64
     */
    val origin : String?
        get() {
            val o = __offset(78)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val originAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(78, 1)
    fun originInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 78, 1)
    /**
     * The originating source network on which this record was created, auto-populated by the system.
     * Example: /// Example: OPS1
     * Constraints: Minimum length = 0, Maximum length = 32
     */
    val origNetwork : String?
        get() {
            val o = __offset(80)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val origNetworkAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(80, 1)
    fun origNetworkInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 80, 1)
    /**
     * The source data library from which this record was received. This could be a remote or tactical UDL or another data library. If null, the record should be assumed to have originated from the primary Enterprise UDL.
     * Example: /// Example: AXE
     * Constraints: Minimum length = 0, Maximum length = 64
     */
    val sourceDl : String?
        get() {
            val o = __offset(82)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val sourceDlAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(82, 1)
    fun sourceDlInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 82, 1)
    /**
     * Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
     * EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
     * REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
     * SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
     * TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
     * Example: /// Example: TEST
     * Constraints: Minimum length = 1, Maximum length = 32
     */
    val dataMode : Byte
        get() {
            val o = __offset(84)
            return if(o != 0) bb.get(o + bb_pos) else 0
        }
    companion object {
        fun validateVersion() = Constants.FLATBUFFERS_24_3_25()
        fun getRootAsRFGeoLocation_Abridged(_bb: ByteBuffer): RFGeoLocation_Abridged = getRootAsRFGeoLocation_Abridged(_bb, RFGeoLocation_Abridged())
        fun getRootAsRFGeoLocation_Abridged(_bb: ByteBuffer, obj: RFGeoLocation_Abridged): RFGeoLocation_Abridged {
            _bb.order(ByteOrder.LITTLE_ENDIAN)
            return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb))
        }
        fun RFGeoLocation_AbridgedBufferHasIdentifier(_bb: ByteBuffer) : Boolean = __has_identifier(_bb, "RFGE")
        fun createRFGeoLocation_Abridged(builder: FlatBufferBuilder, idOffset: Int, classificationMarkingOffset: Int, orderIdOffset: Int, createdTsOffset: Int, receivedTsOffset: Int, startTimeOffset: Int, endTimeOffset: Int, idOnOrbitOffset: Int, satNo: Int, origObjectIdOffset: Int, constellationOffset: Int, signalOfInterestOffset: Int, idRfemitterOffset: Int, origRfemitterIdOffset: Int, numBursts: Int, minFreq: Double, maxFreq: Double, centerFreq: Double, detectLat: Double, detectLon: Double, detectAlt: Double, confSemiMajor: Double, confSemiMinor: Double, confOrientation: Double, confArea: Double, atypeOffset: Int, agjsonOffset: Int, atextOffset: Int, andims: Int, asrid: Int, passGroupIdOffset: Int, algVersionOffset: Int, externalIdOffset: Int, tagsOffset: Int, createdAtOffset: Int, createdByOffset: Int, sourceOffset: Int, originOffset: Int, origNetworkOffset: Int, sourceDlOffset: Int, dataMode: Byte) : Int {
            builder.startTable(41)
            addConfArea(builder, confArea)
            addConfOrientation(builder, confOrientation)
            addConfSemiMinor(builder, confSemiMinor)
            addConfSemiMajor(builder, confSemiMajor)
            addDetectAlt(builder, detectAlt)
            addDetectLon(builder, detectLon)
            addDetectLat(builder, detectLat)
            addCenterFreq(builder, centerFreq)
            addMaxFreq(builder, maxFreq)
            addMinFreq(builder, minFreq)
            addSourceDL(builder, sourceDlOffset)
            addOrigNetwork(builder, origNetworkOffset)
            addOrigin(builder, originOffset)
            addSource(builder, sourceOffset)
            addCreatedBy(builder, createdByOffset)
            addCreatedAt(builder, createdAtOffset)
            addTags(builder, tagsOffset)
            addExternalId(builder, externalIdOffset)
            addAlgVersion(builder, algVersionOffset)
            addPassGroupId(builder, passGroupIdOffset)
            addAsrid(builder, asrid)
            addAndims(builder, andims)
            addAtext(builder, atextOffset)
            addAgjson(builder, agjsonOffset)
            addAtype(builder, atypeOffset)
            addNumBursts(builder, numBursts)
            addOrigRFEmitterId(builder, origRfemitterIdOffset)
            addIdRFEmitter(builder, idRfemitterOffset)
            addSignalOfInterest(builder, signalOfInterestOffset)
            addConstellation(builder, constellationOffset)
            addOrigObjectId(builder, origObjectIdOffset)
            addSatNo(builder, satNo)
            addIdOnOrbit(builder, idOnOrbitOffset)
            addEndTime(builder, endTimeOffset)
            addStartTime(builder, startTimeOffset)
            addReceivedTs(builder, receivedTsOffset)
            addCreatedTs(builder, createdTsOffset)
            addOrderId(builder, orderIdOffset)
            addClassificationMarking(builder, classificationMarkingOffset)
            addId(builder, idOffset)
            addDataMode(builder, dataMode)
            return endRFGeoLocation_Abridged(builder)
        }
        fun startRFGeoLocation_Abridged(builder: FlatBufferBuilder) = builder.startTable(41)
        fun addId(builder: FlatBufferBuilder, id: Int) = builder.addOffset(0, id, 0)
        fun addClassificationMarking(builder: FlatBufferBuilder, classificationMarking: Int) = builder.addOffset(1, classificationMarking, 0)
        fun addOrderId(builder: FlatBufferBuilder, orderId: Int) = builder.addOffset(2, orderId, 0)
        fun addCreatedTs(builder: FlatBufferBuilder, createdTs: Int) = builder.addOffset(3, createdTs, 0)
        fun addReceivedTs(builder: FlatBufferBuilder, receivedTs: Int) = builder.addOffset(4, receivedTs, 0)
        fun addStartTime(builder: FlatBufferBuilder, startTime: Int) = builder.addOffset(5, startTime, 0)
        fun addEndTime(builder: FlatBufferBuilder, endTime: Int) = builder.addOffset(6, endTime, 0)
        fun addIdOnOrbit(builder: FlatBufferBuilder, idOnOrbit: Int) = builder.addOffset(7, idOnOrbit, 0)
        fun addSatNo(builder: FlatBufferBuilder, satNo: Int) = builder.addInt(8, satNo, 0)
        fun addOrigObjectId(builder: FlatBufferBuilder, origObjectId: Int) = builder.addOffset(9, origObjectId, 0)
        fun addConstellation(builder: FlatBufferBuilder, constellation: Int) = builder.addOffset(10, constellation, 0)
        fun addSignalOfInterest(builder: FlatBufferBuilder, signalOfInterest: Int) = builder.addOffset(11, signalOfInterest, 0)
        fun addIdRFEmitter(builder: FlatBufferBuilder, idRfemitter: Int) = builder.addOffset(12, idRfemitter, 0)
        fun addOrigRFEmitterId(builder: FlatBufferBuilder, origRfemitterId: Int) = builder.addOffset(13, origRfemitterId, 0)
        fun addNumBursts(builder: FlatBufferBuilder, numBursts: Int) = builder.addInt(14, numBursts, 0)
        fun addMinFreq(builder: FlatBufferBuilder, minFreq: Double) = builder.addDouble(15, minFreq, 0.0)
        fun addMaxFreq(builder: FlatBufferBuilder, maxFreq: Double) = builder.addDouble(16, maxFreq, 0.0)
        fun addCenterFreq(builder: FlatBufferBuilder, centerFreq: Double) = builder.addDouble(17, centerFreq, 0.0)
        fun addDetectLat(builder: FlatBufferBuilder, detectLat: Double) = builder.addDouble(18, detectLat, 0.0)
        fun addDetectLon(builder: FlatBufferBuilder, detectLon: Double) = builder.addDouble(19, detectLon, 0.0)
        fun addDetectAlt(builder: FlatBufferBuilder, detectAlt: Double) = builder.addDouble(20, detectAlt, 0.0)
        fun addConfSemiMajor(builder: FlatBufferBuilder, confSemiMajor: Double) = builder.addDouble(21, confSemiMajor, 0.0)
        fun addConfSemiMinor(builder: FlatBufferBuilder, confSemiMinor: Double) = builder.addDouble(22, confSemiMinor, 0.0)
        fun addConfOrientation(builder: FlatBufferBuilder, confOrientation: Double) = builder.addDouble(23, confOrientation, 0.0)
        fun addConfArea(builder: FlatBufferBuilder, confArea: Double) = builder.addDouble(24, confArea, 0.0)
        fun addAtype(builder: FlatBufferBuilder, atype: Int) = builder.addOffset(25, atype, 0)
        fun addAgjson(builder: FlatBufferBuilder, agjson: Int) = builder.addOffset(26, agjson, 0)
        fun addAtext(builder: FlatBufferBuilder, atext: Int) = builder.addOffset(27, atext, 0)
        fun addAndims(builder: FlatBufferBuilder, andims: Int) = builder.addInt(28, andims, 0)
        fun addAsrid(builder: FlatBufferBuilder, asrid: Int) = builder.addInt(29, asrid, 0)
        fun addPassGroupId(builder: FlatBufferBuilder, passGroupId: Int) = builder.addOffset(30, passGroupId, 0)
        fun addAlgVersion(builder: FlatBufferBuilder, algVersion: Int) = builder.addOffset(31, algVersion, 0)
        fun addExternalId(builder: FlatBufferBuilder, externalId: Int) = builder.addOffset(32, externalId, 0)
        fun addTags(builder: FlatBufferBuilder, tags: Int) = builder.addOffset(33, tags, 0)
        fun createTagsVector(builder: FlatBufferBuilder, data: IntArray) : Int {
            builder.startVector(4, data.size, 4)
            for (i in data.size - 1 downTo 0) {
                builder.addOffset(data[i])
            }
            return builder.endVector()
        }
        fun startTagsVector(builder: FlatBufferBuilder, numElems: Int) = builder.startVector(4, numElems, 4)
        fun addCreatedAt(builder: FlatBufferBuilder, createdAt: Int) = builder.addOffset(34, createdAt, 0)
        fun addCreatedBy(builder: FlatBufferBuilder, createdBy: Int) = builder.addOffset(35, createdBy, 0)
        fun addSource(builder: FlatBufferBuilder, source: Int) = builder.addOffset(36, source, 0)
        fun addOrigin(builder: FlatBufferBuilder, origin: Int) = builder.addOffset(37, origin, 0)
        fun addOrigNetwork(builder: FlatBufferBuilder, origNetwork: Int) = builder.addOffset(38, origNetwork, 0)
        fun addSourceDL(builder: FlatBufferBuilder, sourceDl: Int) = builder.addOffset(39, sourceDl, 0)
        fun addDataMode(builder: FlatBufferBuilder, dataMode: Byte) = builder.addByte(40, dataMode, 0)
        fun endRFGeoLocation_Abridged(builder: FlatBufferBuilder) : Int {
            val o = builder.endTable()
            return o
        }
        fun finishRFGeoLocationAbridgedBuffer(builder: FlatBufferBuilder, offset: Int) = builder.finish(offset, "RFGE")
        fun finishSizePrefixedRFGeoLocation_AbridgedBuffer(builder: FlatBufferBuilder, offset: Int) = builder.finishSizePrefixed(offset, "RFGE")
    }
}
