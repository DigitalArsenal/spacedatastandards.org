// automatically generated by the FlatBuffers compiler, do not modify

import com.google.flatbuffers.BaseVector
import com.google.flatbuffers.BooleanVector
import com.google.flatbuffers.ByteVector
import com.google.flatbuffers.Constants
import com.google.flatbuffers.DoubleVector
import com.google.flatbuffers.FlatBufferBuilder
import com.google.flatbuffers.FloatVector
import com.google.flatbuffers.LongVector
import com.google.flatbuffers.StringVector
import com.google.flatbuffers.Struct
import com.google.flatbuffers.Table
import com.google.flatbuffers.UnionVector
import java.nio.ByteBuffer
import java.nio.ByteOrder
import kotlin.math.sign

/**
 * /// Information on known launch events.
 */
@Suppress("unused")
class LaunchEvent_Abridged : Table() {

    fun __init(_i: Int, _bb: ByteBuffer)  {
        __reset(_i, _bb)
    }
    fun __assign(_i: Int, _bb: ByteBuffer) : LaunchEvent_Abridged {
        __init(_i, _bb)
        return this
    }
    /**
     * Unique identifier of the record, auto-generated by the system.
     * Example: /// Example: LAUNCHEVENT-ID
     * Constraints: Minimum length = 1, Maximum length = 36
     */
    val id : String?
        get() {
            val o = __offset(4)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val idAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(4, 1)
    fun idInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 4, 1)
    /**
     * Unique identifier of the target on-orbit object, if correlated.
     * Example: /// Example: REF-ONORBIT-ID
     * Constraints: Minimum length = 0, Maximum length = 36
     */
    val idOnOrbit : String?
        get() {
            val o = __offset(6)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val idOnOrbitAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(6, 1)
    fun idOnOrbitInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 6, 1)
    /**
     * Optional target-id, if missing in UDL.
     * Example: /// Example: ORIGOBJECT-ID
     * Constraints: Minimum length = 0, Maximum length = 36
     */
    val origObjectId : String?
        get() {
            val o = __offset(8)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val origObjectIdAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(8, 1)
    fun origObjectIdInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 8, 1)
    /**
     * Classification marking of the data in IC/CAPCO Portion-marked format.
     * Example: /// Example: U
     * Constraints: Minimum length = 1, Maximum length = 128
     */
    val classificationMarking : String?
        get() {
            val o = __offset(10)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val classificationMarkingAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(10, 1)
    fun classificationMarkingInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 10, 1)
    /**
     * The sources or SCG references from which the classification of this data is derived.
     * Example: /// Example: Example source
     * Constraints: Minimum length = 0, Maximum length = 128
     */
    val derivedFrom : String?
        get() {
            val o = __offset(12)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val derivedFromAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(12, 1)
    fun derivedFromInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 12, 1)
    /**
     * The declassification date of this data, in ISO 8601 UTC format.
     * Example: /// Example: 2021-01-01T01:02:02.123Z
     * Constraints: No constraints specified.
     */
    val declassificationDate : String?
        get() {
            val o = __offset(14)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val declassificationDateAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(14, 1)
    fun declassificationDateInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 14, 1)
    /**
     * Declassification string of this data.
     * Example: /// Example: Example Declassification
     * Constraints: Minimum length = 0, Maximum length = 256
     */
    val declassificationString : String?
        get() {
            val o = __offset(16)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val declassificationStringAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(16, 1)
    fun declassificationStringInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 16, 1)
    /**
     * Timestamp of the originating message in ISO8601 UTC format.
     * Example: /// Example: 2020-01-01T00:00:00.123Z
     * Constraints: No constraints specified.
     */
    val msgCreateDate : String?
        get() {
            val o = __offset(18)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val msgCreateDateAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(18, 1)
    fun msgCreateDateInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 18, 1)
    /**
     * The DISOB launch Failure Code, if applicable.
     * Example: /// Example: Example failure code
     * Constraints: Minimum length = 0, Maximum length = 100
     */
    val launchFailureCode : String?
        get() {
            val o = __offset(20)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val launchFailureCodeAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(20, 1)
    fun launchFailureCodeInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 20, 1)
    /**
     * The launch date, in ISO8601 UTC format.
     * Example: /// Example: 2020-01-01T00:00:00.123Z
     * Constraints: No constraints specified.
     */
    val launchDate : String?
        get() {
            val o = __offset(22)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val launchDateAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(22, 1)
    fun launchDateInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 22, 1)
    /**
     * The Basic Encyclopedia Number, if applicable.
     * Example: /// Example: ENC-123
     * Constraints: Minimum length = 0, Maximum length = 10
     */
    val beNumber : String?
        get() {
            val o = __offset(24)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val beNumberAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(24, 1)
    fun beNumberInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 24, 1)
    /**
     * The OSuffix, if applicable.
     * Example: /// Example: oSuffix
     * Constraints: Minimum length = 0, Maximum length = 10
     */
    val oSuffix : String?
        get() {
            val o = __offset(26)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val oSuffixAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(26, 1)
    fun oSuffixInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 26, 1)
    /**
     * The Launch facility name.
     * Example: /// Example: Example launch facility name
     * Constraints: Minimum length = 0, Maximum length = 100
     */
    val launchFacilityName : String?
        get() {
            val o = __offset(28)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val launchFacilityNameAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(28, 1)
    fun launchFacilityNameInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 28, 1)
    /**
     * Time the row was created in the database, auto-populated by the system.
     * Example: /// Example: 2018-01-01T16:00:00.123Z
     * Constraints: No constraints specified.
     */
    val createdAt : String?
        get() {
            val o = __offset(30)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val createdAtAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(30, 1)
    fun createdAtInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 30, 1)
    /**
     * Application user who created the row in the database, auto-populated by the system.
     * Example: /// Example: some.user
     * Constraints: Minimum length = 1, Maximum length = 64
     */
    val createdBy : String?
        get() {
            val o = __offset(32)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val createdByAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(32, 1)
    fun createdByInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 32, 1)
    /**
     * Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
     * Example: /// Example: THIRD_PARTY_DATASOURCE
     * Constraints: Minimum length = 0, Maximum length = 64
     */
    val origin : String?
        get() {
            val o = __offset(34)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val originAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(34, 1)
    fun originInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 34, 1)
    /**
     * Source of the data.
     * Example: /// Example: Bluestaq
     * Constraints: Minimum length = 1, Maximum length = 64
     */
    val source : String?
        get() {
            val o = __offset(36)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val sourceAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(36, 1)
    fun sourceInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 36, 1)
    /**
     * Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
     * EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
     * REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
     * SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
     * TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
     * Example: /// Example: TEST
     * Constraints: Minimum length = 1, Maximum length = 32
     */
    val dataMode : Byte
        get() {
            val o = __offset(38)
            return if(o != 0) bb.get(o + bb_pos) else 0
        }
    /**
     * The originating source network on which this record was created, auto-populated by the system.
     * Example: /// Example: ORIG
     * Constraints: Minimum length = 1, Maximum length = 32
     */
    val origNetwork : String?
        get() {
            val o = __offset(40)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val origNetworkAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(40, 1)
    fun origNetworkInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 40, 1)
    /**
     * Satellite/catalog number of the target on-orbit object.
     * Example: /// Example: 12
     * Constraints: No constraints specified.
     */
    val satNo : Int
        get() {
            val o = __offset(42)
            return if(o != 0) bb.getInt(o + bb_pos) else 0
        }
    companion object {
        fun validateVersion() = Constants.FLATBUFFERS_24_3_25()
        fun getRootAsLaunchEvent_Abridged(_bb: ByteBuffer): LaunchEvent_Abridged = getRootAsLaunchEvent_Abridged(_bb, LaunchEvent_Abridged())
        fun getRootAsLaunchEvent_Abridged(_bb: ByteBuffer, obj: LaunchEvent_Abridged): LaunchEvent_Abridged {
            _bb.order(ByteOrder.LITTLE_ENDIAN)
            return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb))
        }
        fun LaunchEvent_AbridgedBufferHasIdentifier(_bb: ByteBuffer) : Boolean = __has_identifier(_bb, "LAUN")
        fun createLaunchEvent_Abridged(builder: FlatBufferBuilder, idOffset: Int, idOnOrbitOffset: Int, origObjectIdOffset: Int, classificationMarkingOffset: Int, derivedFromOffset: Int, declassificationDateOffset: Int, declassificationStringOffset: Int, msgCreateDateOffset: Int, launchFailureCodeOffset: Int, launchDateOffset: Int, beNumberOffset: Int, oSuffixOffset: Int, launchFacilityNameOffset: Int, createdAtOffset: Int, createdByOffset: Int, originOffset: Int, sourceOffset: Int, dataMode: Byte, origNetworkOffset: Int, satNo: Int) : Int {
            builder.startTable(20)
            addSatNo(builder, satNo)
            addOrigNetwork(builder, origNetworkOffset)
            addSource(builder, sourceOffset)
            addOrigin(builder, originOffset)
            addCreatedBy(builder, createdByOffset)
            addCreatedAt(builder, createdAtOffset)
            addLaunchFacilityName(builder, launchFacilityNameOffset)
            addOSuffix(builder, oSuffixOffset)
            addBeNumber(builder, beNumberOffset)
            addLaunchDate(builder, launchDateOffset)
            addLaunchFailureCode(builder, launchFailureCodeOffset)
            addMsgCreateDate(builder, msgCreateDateOffset)
            addDeclassificationString(builder, declassificationStringOffset)
            addDeclassificationDate(builder, declassificationDateOffset)
            addDerivedFrom(builder, derivedFromOffset)
            addClassificationMarking(builder, classificationMarkingOffset)
            addOrigObjectId(builder, origObjectIdOffset)
            addIdOnOrbit(builder, idOnOrbitOffset)
            addId(builder, idOffset)
            addDataMode(builder, dataMode)
            return endLaunchEvent_Abridged(builder)
        }
        fun startLaunchEvent_Abridged(builder: FlatBufferBuilder) = builder.startTable(20)
        fun addId(builder: FlatBufferBuilder, id: Int) = builder.addOffset(0, id, 0)
        fun addIdOnOrbit(builder: FlatBufferBuilder, idOnOrbit: Int) = builder.addOffset(1, idOnOrbit, 0)
        fun addOrigObjectId(builder: FlatBufferBuilder, origObjectId: Int) = builder.addOffset(2, origObjectId, 0)
        fun addClassificationMarking(builder: FlatBufferBuilder, classificationMarking: Int) = builder.addOffset(3, classificationMarking, 0)
        fun addDerivedFrom(builder: FlatBufferBuilder, derivedFrom: Int) = builder.addOffset(4, derivedFrom, 0)
        fun addDeclassificationDate(builder: FlatBufferBuilder, declassificationDate: Int) = builder.addOffset(5, declassificationDate, 0)
        fun addDeclassificationString(builder: FlatBufferBuilder, declassificationString: Int) = builder.addOffset(6, declassificationString, 0)
        fun addMsgCreateDate(builder: FlatBufferBuilder, msgCreateDate: Int) = builder.addOffset(7, msgCreateDate, 0)
        fun addLaunchFailureCode(builder: FlatBufferBuilder, launchFailureCode: Int) = builder.addOffset(8, launchFailureCode, 0)
        fun addLaunchDate(builder: FlatBufferBuilder, launchDate: Int) = builder.addOffset(9, launchDate, 0)
        fun addBeNumber(builder: FlatBufferBuilder, beNumber: Int) = builder.addOffset(10, beNumber, 0)
        fun addOSuffix(builder: FlatBufferBuilder, oSuffix: Int) = builder.addOffset(11, oSuffix, 0)
        fun addLaunchFacilityName(builder: FlatBufferBuilder, launchFacilityName: Int) = builder.addOffset(12, launchFacilityName, 0)
        fun addCreatedAt(builder: FlatBufferBuilder, createdAt: Int) = builder.addOffset(13, createdAt, 0)
        fun addCreatedBy(builder: FlatBufferBuilder, createdBy: Int) = builder.addOffset(14, createdBy, 0)
        fun addOrigin(builder: FlatBufferBuilder, origin: Int) = builder.addOffset(15, origin, 0)
        fun addSource(builder: FlatBufferBuilder, source: Int) = builder.addOffset(16, source, 0)
        fun addDataMode(builder: FlatBufferBuilder, dataMode: Byte) = builder.addByte(17, dataMode, 0)
        fun addOrigNetwork(builder: FlatBufferBuilder, origNetwork: Int) = builder.addOffset(18, origNetwork, 0)
        fun addSatNo(builder: FlatBufferBuilder, satNo: Int) = builder.addInt(19, satNo, 0)
        fun endLaunchEvent_Abridged(builder: FlatBufferBuilder) : Int {
            val o = builder.endTable()
            return o
        }
        fun finishLaunchEventAbridgedBuffer(builder: FlatBufferBuilder, offset: Int) = builder.finish(offset, "LAUN")
        fun finishSizePrefixedLaunchEvent_AbridgedBuffer(builder: FlatBufferBuilder, offset: Int) = builder.finishSizePrefixed(offset, "LAUN")
    }
}
