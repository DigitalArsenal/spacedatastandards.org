// automatically generated by the FlatBuffers compiler, do not modify

import com.google.flatbuffers.BaseVector
import com.google.flatbuffers.BooleanVector
import com.google.flatbuffers.ByteVector
import com.google.flatbuffers.Constants
import com.google.flatbuffers.DoubleVector
import com.google.flatbuffers.FlatBufferBuilder
import com.google.flatbuffers.FloatVector
import com.google.flatbuffers.LongVector
import com.google.flatbuffers.StringVector
import com.google.flatbuffers.Struct
import com.google.flatbuffers.Table
import com.google.flatbuffers.UnionVector
import java.nio.ByteBuffer
import java.nio.ByteOrder
import kotlin.math.sign

/**
 * /// General aircraft designation, characteristics, and capabilities. The aircraft schema contains static data of specific aircraft, including tail number, cruise speed, max speed, and minimum required runway length, etc.
 */
@Suppress("unused")
class Aircraft_Full : Table() {

    fun __init(_i: Int, _bb: ByteBuffer)  {
        __reset(_i, _bb)
    }
    fun __assign(_i: Int, _bb: ByteBuffer) : Aircraft_Full {
        __init(_i, _bb)
        return this
    }
    /**
     * Unique identifier of the record, auto-generated by the system.
     * Example: /// Example: 0167f577-e06c-358e-85aa-0a07a730bdd0
     * Constraints: Minimum length = 1, Maximum length = 36
     */
    val id : String?
        get() {
            val o = __offset(4)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val idAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(4, 1)
    fun idInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 4, 1)
    /**
     * Classification marking of the data in IC/CAPCO Portion-marked format.
     * Example: /// Example: U
     * Constraints: Minimum length = 1, Maximum length = 128
     */
    val classificationMarking : String?
        get() {
            val o = __offset(6)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val classificationMarkingAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(6, 1)
    fun classificationMarkingInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 6, 1)
    /**
     * No description provided.
     * Example: /// Example: No example provided.
     * Constraints: No constraints specified.
     */
    val entity : String?
        get() {
            val o = __offset(8)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val entityAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(8, 1)
    fun entityInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 8, 1)
    /**
     * ID of the parent entity for this aircraft.
     * Example: /// Example: 0167f577-e06c-358e-85aa-0a07a730bdd0
     * Constraints: Minimum length = 0, Maximum length = 36
     */
    val idEntity : String?
        get() {
            val o = __offset(10)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val idEntityAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(10, 1)
    fun idEntityInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 10, 1)
    /**
     * The aircraft Model Design Series (MDS) designation (e.g. E-2C HAWKEYE, F-15 EAGLE, KC-130 HERCULES, etc.) of this aircraft.  Intended as, but not constrained to, MIL-STD-6016 environment dependent specific type designations.
     * Example: /// Example: E-2C HAWKEYE
     * Constraints: Minimum length = 1, Maximum length = 128
     */
    val aircraftMds : String?
        get() {
            val o = __offset(12)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val aircraftMdsAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(12, 1)
    fun aircraftMdsInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 12, 1)
    /**
     * The tail number of this aircraft.
     * Example: /// Example: N702JG
     * Constraints: Minimum length = 0, Maximum length = 16
     */
    val tailNumber : String?
        get() {
            val o = __offset(14)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val tailNumberAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(14, 1)
    fun tailNumberInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 14, 1)
    /**
     * Full serial number of the aircraft.
     * Example: /// Example: 7007187
     * Constraints: Minimum length = 0, Maximum length = 32
     */
    val serialNumber : String?
        get() {
            val o = __offset(16)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val serialNumberAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(16, 1)
    fun serialNumberInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 16, 1)
    /**
     * The wing or unit that owns the aircraft.
     * Example: /// Example: 437AW
     * Constraints: Minimum length = 0, Maximum length = 32
     */
    val owner : String?
        get() {
            val o = __offset(18)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val ownerAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(18, 1)
    fun ownerInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 18, 1)
    /**
     * The Air Force major command (MAJCOM) overseeing the aircraft.
     * Example: /// Example: HQACC
     * Constraints: Minimum length = 0, Maximum length = 16
     */
    val command : String?
        get() {
            val o = __offset(20)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val commandAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(20, 1)
    fun commandInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 20, 1)
    /**
     * The category of aircraft (e.g. M = Military, C = Commercial).
     * Example: /// Example: M
     * Constraints: Minimum length = 0, Maximum length = 1
     */
    val category : String?
        get() {
            val o = __offset(22)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val categoryAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(22, 1)
    fun categoryInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 22, 1)
    /**
     * Military data network data transfer device ID for this aircraft.
     * Example: /// Example: 005
     * Constraints: Minimum length = 0, Maximum length = 16
     */
    val dtd : String?
        get() {
            val o = __offset(24)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val dtdAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(24, 1)
    fun dtdInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 24, 1)
    /**
     * The cruise speed of the aircraft, in kilometers/hour.
     * Example: /// Example: 915
     * Constraints: No constraints specified.
     */
    val cruiseSpeed : Double
        get() {
            val o = __offset(26)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * The maximum air speed of the aircraft, in kilometers/hour.
     * Example: /// Example: 2655.1
     * Constraints: No constraints specified.
     */
    val maxSpeed : Double
        get() {
            val o = __offset(28)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * The minimum length of runway required to land this aircraft, in meters. Note: The corresponding equivalent field is not converted by the UDL and may or may not be supplied by the provider. The provider/consumer is responsible for all unit conversions.
     * Example: /// Example: 1000
     * Constraints: No constraints specified.
     */
    val minReqRunwayM : Int
        get() {
            val o = __offset(30)
            return if(o != 0) bb.getInt(o + bb_pos) else 0
        }
    /**
     * The minimum length of runway required to land this aircraft, in feet. Note: The corresponding equivalent field is not converted by the UDL and may or may not be supplied by the provider. The provider/consumer is responsible for all unit conversions.
     * Example: /// Example: 3000
     * Constraints: No constraints specified.
     */
    val minReqRunwayFt : Int
        get() {
            val o = __offset(32)
            return if(o != 0) bb.getInt(o + bb_pos) else 0
        }
    /**
     * The nominal turnaround time for this aircraft, in minutes.
     * Example: /// Example: 500
     * Constraints: No constraints specified.
     */
    val nominalTatime : Int
        get() {
            val o = __offset(34)
            return if(o != 0) bb.getInt(o + bb_pos) else 0
        }
    /**
     * Optional notes/comments for this aircraft.
     * Example: /// Example: Notes for this aircraft
     * Constraints: Minimum length = 0, Maximum length = 1024
     */
    val notes : String?
        get() {
            val o = __offset(36)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val notesAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(36, 1)
    fun notesInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 36, 1)
    /**
     * Time the row was created in the database, auto-populated by the system.
     * Example: /// Example: 2018-01-01T16:00:00.123Z
     * Constraints: No constraints specified.
     */
    val createdAt : String?
        get() {
            val o = __offset(38)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val createdAtAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(38, 1)
    fun createdAtInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 38, 1)
    /**
     * Application user who created the row in the database, auto-populated by the system.
     * Example: /// Example: some.user
     * Constraints: Minimum length = 1, Maximum length = 64
     */
    val createdBy : String?
        get() {
            val o = __offset(40)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val createdByAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(40, 1)
    fun createdByInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 40, 1)
    /**
     * Time the row was updated in the database, auto-populated by the system.
     * Example: /// Example: 2018-01-01T16:00:00.123Z
     * Constraints: No constraints specified.
     */
    val updatedAt : String?
        get() {
            val o = __offset(42)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val updatedAtAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(42, 1)
    fun updatedAtInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 42, 1)
    /**
     * Application user who updated the row in the database, auto-populated by the system.
     * Example: /// Example: some.user
     * Constraints: Minimum length = 1, Maximum length = 64
     */
    val updatedBy : String?
        get() {
            val o = __offset(44)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val updatedByAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(44, 1)
    fun updatedByInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 44, 1)
    /**
     * The source data library from which this record was received. This could be a remote or tactical UDL or another data library. If null, the record should be assumed to have originated from the primary Enterprise UDL.
     * Example: /// Example: AXE
     * Constraints: Minimum length = 0, Maximum length = 64
     */
    val sourceDl : String?
        get() {
            val o = __offset(46)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val sourceDlAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(46, 1)
    fun sourceDlInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 46, 1)
    /**
     * Source of the data.
     * Example: /// Example: Bluestaq
     * Constraints: Minimum length = 1, Maximum length = 64
     */
    val source : String?
        get() {
            val o = __offset(48)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val sourceAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(48, 1)
    fun sourceInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 48, 1)
    /**
     * Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
     * Example: /// Example: THIRD_PARTY_DATASOURCE
     * Constraints: Minimum length = 0, Maximum length = 64
     */
    val origin : String?
        get() {
            val o = __offset(50)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val originAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(50, 1)
    fun originInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 50, 1)
    /**
     * Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
     * EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
     * REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
     * SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
     * TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
     * Example: /// Example: TEST
     * Constraints: Minimum length = 1, Maximum length = 64
     */
    val dataMode : Byte
        get() {
            val o = __offset(52)
            return if(o != 0) bb.get(o + bb_pos) else 0
        }
    /**
     * The originating source network on which this record was created, auto-populated by the system.
     * Example: /// Example: OPS1
     * Constraints: Minimum length = 1, Maximum length = 32
     */
    val origNetwork : String?
        get() {
            val o = __offset(54)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val origNetworkAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(54, 1)
    fun origNetworkInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 54, 1)
    companion object {
        fun validateVersion() = Constants.FLATBUFFERS_24_3_25()
        fun getRootAsAircraft_Full(_bb: ByteBuffer): Aircraft_Full = getRootAsAircraft_Full(_bb, Aircraft_Full())
        fun getRootAsAircraft_Full(_bb: ByteBuffer, obj: Aircraft_Full): Aircraft_Full {
            _bb.order(ByteOrder.LITTLE_ENDIAN)
            return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb))
        }
        fun Aircraft_FullBufferHasIdentifier(_bb: ByteBuffer) : Boolean = __has_identifier(_bb, "AIRC")
        fun createAircraft_Full(builder: FlatBufferBuilder, idOffset: Int, classificationMarkingOffset: Int, entityOffset: Int, idEntityOffset: Int, aircraftMdsOffset: Int, tailNumberOffset: Int, serialNumberOffset: Int, ownerOffset: Int, commandOffset: Int, categoryOffset: Int, dtdOffset: Int, cruiseSpeed: Double, maxSpeed: Double, minReqRunwayM: Int, minReqRunwayFt: Int, nominalTatime: Int, notesOffset: Int, createdAtOffset: Int, createdByOffset: Int, updatedAtOffset: Int, updatedByOffset: Int, sourceDlOffset: Int, sourceOffset: Int, originOffset: Int, dataMode: Byte, origNetworkOffset: Int) : Int {
            builder.startTable(26)
            addMaxSpeed(builder, maxSpeed)
            addCruiseSpeed(builder, cruiseSpeed)
            addOrigNetwork(builder, origNetworkOffset)
            addOrigin(builder, originOffset)
            addSource(builder, sourceOffset)
            addSourceDL(builder, sourceDlOffset)
            addUpdatedBy(builder, updatedByOffset)
            addUpdatedAt(builder, updatedAtOffset)
            addCreatedBy(builder, createdByOffset)
            addCreatedAt(builder, createdAtOffset)
            addNotes(builder, notesOffset)
            addNominalTATime(builder, nominalTatime)
            addMinReqRunwayFt(builder, minReqRunwayFt)
            addMinReqRunwayM(builder, minReqRunwayM)
            addDtd(builder, dtdOffset)
            addCategory(builder, categoryOffset)
            addCommand(builder, commandOffset)
            addOwner(builder, ownerOffset)
            addSerialNumber(builder, serialNumberOffset)
            addTailNumber(builder, tailNumberOffset)
            addAircraftMDS(builder, aircraftMdsOffset)
            addIdEntity(builder, idEntityOffset)
            addEntity(builder, entityOffset)
            addClassificationMarking(builder, classificationMarkingOffset)
            addId(builder, idOffset)
            addDataMode(builder, dataMode)
            return endAircraft_Full(builder)
        }
        fun startAircraft_Full(builder: FlatBufferBuilder) = builder.startTable(26)
        fun addId(builder: FlatBufferBuilder, id: Int) = builder.addOffset(0, id, 0)
        fun addClassificationMarking(builder: FlatBufferBuilder, classificationMarking: Int) = builder.addOffset(1, classificationMarking, 0)
        fun addEntity(builder: FlatBufferBuilder, entity: Int) = builder.addOffset(2, entity, 0)
        fun addIdEntity(builder: FlatBufferBuilder, idEntity: Int) = builder.addOffset(3, idEntity, 0)
        fun addAircraftMDS(builder: FlatBufferBuilder, aircraftMds: Int) = builder.addOffset(4, aircraftMds, 0)
        fun addTailNumber(builder: FlatBufferBuilder, tailNumber: Int) = builder.addOffset(5, tailNumber, 0)
        fun addSerialNumber(builder: FlatBufferBuilder, serialNumber: Int) = builder.addOffset(6, serialNumber, 0)
        fun addOwner(builder: FlatBufferBuilder, owner: Int) = builder.addOffset(7, owner, 0)
        fun addCommand(builder: FlatBufferBuilder, command: Int) = builder.addOffset(8, command, 0)
        fun addCategory(builder: FlatBufferBuilder, category: Int) = builder.addOffset(9, category, 0)
        fun addDtd(builder: FlatBufferBuilder, dtd: Int) = builder.addOffset(10, dtd, 0)
        fun addCruiseSpeed(builder: FlatBufferBuilder, cruiseSpeed: Double) = builder.addDouble(11, cruiseSpeed, 0.0)
        fun addMaxSpeed(builder: FlatBufferBuilder, maxSpeed: Double) = builder.addDouble(12, maxSpeed, 0.0)
        fun addMinReqRunwayM(builder: FlatBufferBuilder, minReqRunwayM: Int) = builder.addInt(13, minReqRunwayM, 0)
        fun addMinReqRunwayFt(builder: FlatBufferBuilder, minReqRunwayFt: Int) = builder.addInt(14, minReqRunwayFt, 0)
        fun addNominalTATime(builder: FlatBufferBuilder, nominalTatime: Int) = builder.addInt(15, nominalTatime, 0)
        fun addNotes(builder: FlatBufferBuilder, notes: Int) = builder.addOffset(16, notes, 0)
        fun addCreatedAt(builder: FlatBufferBuilder, createdAt: Int) = builder.addOffset(17, createdAt, 0)
        fun addCreatedBy(builder: FlatBufferBuilder, createdBy: Int) = builder.addOffset(18, createdBy, 0)
        fun addUpdatedAt(builder: FlatBufferBuilder, updatedAt: Int) = builder.addOffset(19, updatedAt, 0)
        fun addUpdatedBy(builder: FlatBufferBuilder, updatedBy: Int) = builder.addOffset(20, updatedBy, 0)
        fun addSourceDL(builder: FlatBufferBuilder, sourceDl: Int) = builder.addOffset(21, sourceDl, 0)
        fun addSource(builder: FlatBufferBuilder, source: Int) = builder.addOffset(22, source, 0)
        fun addOrigin(builder: FlatBufferBuilder, origin: Int) = builder.addOffset(23, origin, 0)
        fun addDataMode(builder: FlatBufferBuilder, dataMode: Byte) = builder.addByte(24, dataMode, 0)
        fun addOrigNetwork(builder: FlatBufferBuilder, origNetwork: Int) = builder.addOffset(25, origNetwork, 0)
        fun endAircraft_Full(builder: FlatBufferBuilder) : Int {
            val o = builder.endTable()
            return o
        }
        fun finishAircraftFullBuffer(builder: FlatBufferBuilder, offset: Int) = builder.finish(offset, "AIRC")
        fun finishSizePrefixedAircraft_FullBuffer(builder: FlatBufferBuilder, offset: Int) = builder.finishSizePrefixed(offset, "AIRC")
    }
}
