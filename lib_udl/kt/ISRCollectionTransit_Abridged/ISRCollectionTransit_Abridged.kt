// automatically generated by the FlatBuffers compiler, do not modify

import com.google.flatbuffers.BaseVector
import com.google.flatbuffers.BooleanVector
import com.google.flatbuffers.ByteVector
import com.google.flatbuffers.Constants
import com.google.flatbuffers.DoubleVector
import com.google.flatbuffers.FlatBufferBuilder
import com.google.flatbuffers.FloatVector
import com.google.flatbuffers.LongVector
import com.google.flatbuffers.StringVector
import com.google.flatbuffers.Struct
import com.google.flatbuffers.Table
import com.google.flatbuffers.UnionVector
import java.nio.ByteBuffer
import java.nio.ByteOrder
import kotlin.math.sign

/**
 * /// Object for data dissemination.
 */
@Suppress("unused")
class ISRCollectionTransit_Abridged : Table() {

    fun __init(_i: Int, _bb: ByteBuffer)  {
        __reset(_i, _bb)
    }
    fun __assign(_i: Int, _bb: ByteBuffer) : ISRCollectionTransit_Abridged {
        __init(_i, _bb)
        return this
    }
    /**
     * Transit Unique Identifier.
     * Example: /// Example: ISRCOLLECTIONTRANSIT-ID
     * Constraints: Minimum length = 0, Maximum length = 36
     */
    val id : String?
        get() {
            val o = __offset(4)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val idAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(4, 1)
    fun idInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 4, 1)
    /**
     * Military Base to transmit the dissemination of this data.
     * Example: /// Example: ENVOYS
     * Constraints: Minimum length = 0, Maximum length = 32
     */
    val base : String?
        get() {
            val o = __offset(6)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val baseAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(6, 1)
    fun baseInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 6, 1)
    /**
     * Length of mission in milliseconds.
     * Example: /// Example: 200.23
     * Constraints: No constraints specified.
     */
    val duration : Double
        get() {
            val o = __offset(8)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    companion object {
        fun validateVersion() = Constants.FLATBUFFERS_24_3_25()
        fun getRootAsISRCollectionTransit_Abridged(_bb: ByteBuffer): ISRCollectionTransit_Abridged = getRootAsISRCollectionTransit_Abridged(_bb, ISRCollectionTransit_Abridged())
        fun getRootAsISRCollectionTransit_Abridged(_bb: ByteBuffer, obj: ISRCollectionTransit_Abridged): ISRCollectionTransit_Abridged {
            _bb.order(ByteOrder.LITTLE_ENDIAN)
            return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb))
        }
        fun ISRCollectionTransit_AbridgedBufferHasIdentifier(_bb: ByteBuffer) : Boolean = __has_identifier(_bb, "ISRC")
        fun createISRCollectionTransit_Abridged(builder: FlatBufferBuilder, idOffset: Int, baseOffset: Int, duration: Double) : Int {
            builder.startTable(3)
            addDuration(builder, duration)
            addBase(builder, baseOffset)
            addId(builder, idOffset)
            return endISRCollectionTransit_Abridged(builder)
        }
        fun startISRCollectionTransit_Abridged(builder: FlatBufferBuilder) = builder.startTable(3)
        fun addId(builder: FlatBufferBuilder, id: Int) = builder.addOffset(0, id, 0)
        fun addBase(builder: FlatBufferBuilder, base: Int) = builder.addOffset(1, base, 0)
        fun addDuration(builder: FlatBufferBuilder, duration: Double) = builder.addDouble(2, duration, 0.0)
        fun endISRCollectionTransit_Abridged(builder: FlatBufferBuilder) : Int {
            val o = builder.endTable()
            return o
        }
        fun finishISRCollectionTransitAbridgedBuffer(builder: FlatBufferBuilder, offset: Int) = builder.finish(offset, "ISRC")
        fun finishSizePrefixedISRCollectionTransit_AbridgedBuffer(builder: FlatBufferBuilder, offset: Int) = builder.finishSizePrefixed(offset, "ISRC")
    }
}
