// automatically generated by the FlatBuffers compiler, do not modify

import com.google.flatbuffers.BaseVector
import com.google.flatbuffers.BooleanVector
import com.google.flatbuffers.ByteVector
import com.google.flatbuffers.Constants
import com.google.flatbuffers.DoubleVector
import com.google.flatbuffers.FlatBufferBuilder
import com.google.flatbuffers.FloatVector
import com.google.flatbuffers.LongVector
import com.google.flatbuffers.StringVector
import com.google.flatbuffers.Struct
import com.google.flatbuffers.Table
import com.google.flatbuffers.UnionVector
import java.nio.ByteBuffer
import java.nio.ByteOrder
import kotlin.math.sign

/**
 * /// Flight Plan contains data specifying the details of an intended flight including schedule and expected route.
 */
@Suppress("unused")
class FlightPlan_Ingest : Table() {

    fun __init(_i: Int, _bb: ByteBuffer)  {
        __reset(_i, _bb)
    }
    fun __assign(_i: Int, _bb: ByteBuffer) : FlightPlan_Ingest {
        __init(_i, _bb)
        return this
    }
    /**
     * Unique identifier of the record, auto-generated by the system if not provided on create operations.
     * Example: /// Example: c44b0a80-9fef-63d9-6267-79037fb93e4c
     * Constraints: Minimum length = 1, Maximum length = 36
     */
    val id : String?
        get() {
            val o = __offset(4)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val idAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(4, 1)
    fun idInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 4, 1)
    /**
     * Classification marking of the data in IC/CAPCO Portion-marked format.
     * Example: /// Example: U
     * Constraints: Minimum length = 1, Maximum length = 128
     */
    val classificationMarking : String?
        get() {
            val o = __offset(6)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val classificationMarkingAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(6, 1)
    fun classificationMarkingInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 6, 1)
    /**
     * Air Mobility Command (AMC) mission identifier according to Mobility Air Forces (MAF) encode/decode procedures.
     * Example: /// Example: AJM7939B1123
     * Constraints: Minimum length = 0, Maximum length = 36
     */
    val amcMissionId : String?
        get() {
            val o = __offset(8)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val amcMissionIdAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(8, 1)
    fun amcMissionIdInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 8, 1)
    /**
     * The UDL unique identifier of the aircraft sortie associated with this flight plan.
     * Example: /// Example: 9d60c1b1-10b1-b2a7-e403-84c5d7eeb170
     * Constraints: Minimum length = 0, Maximum length = 36
     */
    val idSortie : String?
        get() {
            val o = __offset(10)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val idSortieAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(10, 1)
    fun idSortieInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 10, 1)
    /**
     * The UDL unique identifier of the aircraft associated with this flight plan.
     * Example: /// Example: 4f4a67c6-40fd-11ee-be56-0242ac120002
     * Constraints: Minimum length = 0, Maximum length = 36
     */
    val idAircraft : String?
        get() {
            val o = __offset(12)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val idAircraftAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(12, 1)
    fun idAircraftInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 12, 1)
    /**
     * The leg number of this flight plan.
     * Example: /// Example: 100
     * Constraints: No constraints specified.
     */
    val legNum : Int
        get() {
            val o = __offset(14)
            return if(o != 0) bb.getInt(o + bb_pos) else 0
        }
    /**
     * The UDL unique identifier of the departure airfield associated with this flight plan.
     * Example: /// Example: 2a9020f6-40fd-11ee-be56-0242ac120002
     * Constraints: Minimum length = 0, Maximum length = 36
     */
    val idDepAirfield : String?
        get() {
            val o = __offset(16)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val idDepAirfieldAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(16, 1)
    fun idDepAirfieldInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 16, 1)
    /**
     * The airfield identifier of the departure location, International Civil Aviation Organization (ICAO) code preferred.
     * Example: /// Example: KSLV
     * Constraints: Minimum length = 1, Maximum length = 36
     */
    val depAirfield : String?
        get() {
            val o = __offset(18)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val depAirfieldAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(18, 1)
    fun depAirfieldInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 18, 1)
    /**
     * The UDL unique identifier of the arrival airfield associated with this flight plan.
     * Example: /// Example: 363080c2-40fd-11ee-be56-0242ac120002
     * Constraints: Minimum length = 0, Maximum length = 36
     */
    val idArrAirfield : String?
        get() {
            val o = __offset(20)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val idArrAirfieldAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(20, 1)
    fun idArrAirfieldInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 20, 1)
    /**
     * The airfield identifier of the arrival location, International Civil Aviation Organization (ICAO) code preferred.
     * Example: /// Example: KCHS
     * Constraints: Minimum length = 1, Maximum length = 36
     */
    val arrAirfield : String?
        get() {
            val o = __offset(22)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val arrAirfieldAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(22, 1)
    fun arrAirfieldInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 22, 1)
    /**
     * The source ID of the flight plan from the generating system.
     * Example: /// Example: AFMAPP20322347140001
     * Constraints: Minimum length = 0, Maximum length = 36
     */
    val externalId : String?
        get() {
            val o = __offset(24)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val externalIdAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(24, 1)
    fun externalIdInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 24, 1)
    /**
     * The generation time of this flight plan in ISO 8601 UTC format, with millisecond precision.
     * Example: /// Example: 2023-05-01T01:01:01.123Z
     * Constraints: No constraints specified.
     */
    val genTs : String?
        get() {
            val o = __offset(26)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val genTsAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(26, 1)
    fun genTsInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 26, 1)
    /**
     * The aircraft Model Design Series (MDS) designation (e.g. E-2C HAWKEYE, F-15 EAGLE, KC-130 HERCULES, etc.) of the aircraft associated with this flight plan. Intended as, but not constrained to, MIL-STD-6016 environment dependent specific type designations.
     * Example: /// Example: KC-130 HERCULES
     * Constraints: Minimum length = 0, Maximum length = 128
     */
    val aircraftMds : String?
        get() {
            val o = __offset(28)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val aircraftMdsAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(28, 1)
    fun aircraftMdsInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 28, 1)
    /**
     * The tail number of the aircraft associated with this flight plan.
     * Example: /// Example: 77187
     * Constraints: Minimum length = 0, Maximum length = 16
     */
    val tailNumber : String?
        get() {
            val o = __offset(30)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val tailNumberAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(30, 1)
    fun tailNumberInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 30, 1)
    /**
     * The call sign assigned to the aircraft for this flight plan.
     * Example: /// Example: HKY629
     * Constraints: Minimum length = 0, Maximum length = 8
     */
    val callSign : String?
        get() {
            val o = __offset(32)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val callSignAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(32, 1)
    fun callSignInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 32, 1)
    /**
     * The date and time the weather valid period begins in ISO 8601 UTC format, with millisecond precision.
     * Example: /// Example: 2023-05-01T01:01:01.123Z
     * Constraints: No constraints specified.
     */
    val wxValidStart : String?
        get() {
            val o = __offset(34)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val wxValidStartAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(34, 1)
    fun wxValidStartInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 34, 1)
    /**
     * The date and time the weather valid period ends in ISO 8601 UTC format, with millisecond precision.
     * Example: /// Example: 2023-05-01T01:01:01.123Z
     * Constraints: No constraints specified.
     */
    val wxValidEnd : String?
        get() {
            val o = __offset(36)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val wxValidEndAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(36, 1)
    fun wxValidEndInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 36, 1)
    /**
     * The estimated time of departure for the aircraft, in ISO 8601 UTC format, with millisecond precision.
     * Example: /// Example: 2023-05-01T01:01:01.123Z
     * Constraints: No constraints specified.
     */
    val estDepTime : String?
        get() {
            val o = __offset(38)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val estDepTimeAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(38, 1)
    fun estDepTimeInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 38, 1)
    /**
     * The percent degrade due to drag for this aircraft.
     * Example: /// Example: 16.9
     * Constraints: No constraints specified.
     */
    val dragIndex : Double
        get() {
            val o = __offset(40)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * The fuel degrade percentage used for this mission.
     * Example: /// Example: 10.3
     * Constraints: No constraints specified.
     */
    val fuelDegrade : Double
        get() {
            val o = __offset(42)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Operating weight of the aircraft in pounds.
     * Example: /// Example: 251830.5
     * Constraints: No constraints specified.
     */
    val opWeight : Double
        get() {
            val o = __offset(44)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * The mission index value for this mission. The mission index is the ratio of time-related cost of aircraft operation to the cost of fuel.
     * Example: /// Example: 44.1
     * Constraints: No constraints specified.
     */
    val msnIndex : Double
        get() {
            val o = __offset(46)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Total of all fuel required to complete the flight in pounds, including fuel to be dispensed on a refueling mission.
     * Example: /// Example: 180000.1
     * Constraints: No constraints specified.
     */
    val rampFuel : Double
        get() {
            val o = __offset(48)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Fuel required to start engines and taxi to the end of the runway in pounds.
     * Example: /// Example: 1500.1
     * Constraints: No constraints specified.
     */
    val taxiFuel : Double
        get() {
            val o = __offset(50)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Fuel at takeoff, which is calculated as the ramp fuel minus the taxi fuel in pounds.
     * Example: /// Example: 178500.1
     * Constraints: No constraints specified.
     */
    val takeoffFuel : Double
        get() {
            val o = __offset(52)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Fuel required from brake release to Top of Climb in pounds.
     * Example: /// Example: 7000.1
     * Constraints: No constraints specified.
     */
    val climbFuel : Double
        get() {
            val o = __offset(54)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Time required from brake release to Top of Climb expressed as HH:MM.
     * Example: /// Example: 00:13
     * Constraints: Minimum length = 0, Maximum length = 6
     */
    val climbTime : String?
        get() {
            val o = __offset(56)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val climbTimeAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(56, 1)
    fun climbTimeInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 56, 1)
    /**
     * Additional fuel burned at Top of Climb in pounds.
     * Example: /// Example: 500.1
     * Constraints: No constraints specified.
     */
    val holdDownFuel : Double
        get() {
            val o = __offset(58)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Additional fuel burned at Top of Climb for icing in pounds.
     * Example: /// Example: 1000.1
     * Constraints: No constraints specified.
     */
    val tocIceFuel : Double
        get() {
            val o = __offset(60)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Fuel remaining at Top of Climb in pounds.
     * Example: /// Example: 160000.1
     * Constraints: No constraints specified.
     */
    val tocFuel : Double
        get() {
            val o = __offset(62)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Fuel required to fly from Top of Climb to Top of Descent in pounds.
     * Example: /// Example: 155000.1
     * Constraints: No constraints specified.
     */
    val enrouteFuel : Double
        get() {
            val o = __offset(64)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Time required to fly from Top of Climb to Top of Descent expressed as HH:MM.
     * Example: /// Example: 06:30
     * Constraints: Minimum length = 0, Maximum length = 6
     */
    val enrouteTime : String?
        get() {
            val o = __offset(66)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val enrouteTimeAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(66, 1)
    fun enrouteTimeInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 66, 1)
    /**
     * Additional fuel burned at Top of Descent for thunderstorm avoidance in pounds.
     * Example: /// Example: 1000.1
     * Constraints: No constraints specified.
     */
    val thunderAvoidFuel : Double
        get() {
            val o = __offset(68)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Additional fuel burned at Top of Descent for icing in pounds.
     * Example: /// Example: 2000.1
     * Constraints: No constraints specified.
     */
    val todIceFuel : Double
        get() {
            val o = __offset(70)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Additional fuel burned at Top of Descent for the operational condition in pounds.
     * Example: /// Example: 5000.1
     * Constraints: No constraints specified.
     */
    val opConditionFuel : Double
        get() {
            val o = __offset(72)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Fuel remaining at Top of Descent in pounds.
     * Example: /// Example: 32000.1
     * Constraints: No constraints specified.
     */
    val todFuel : Double
        get() {
            val o = __offset(74)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Additional fuel burned at landing/missed approach for an early descent in pounds.
     * Example: /// Example: 500.1
     * Constraints: No constraints specified.
     */
    val earlyDescentFuel : Double
        get() {
            val o = __offset(76)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Additional fuel burned at landing/missed approach for icing during arrival in pounds.
     * Example: /// Example: 1000.1
     * Constraints: No constraints specified.
     */
    val arrIceFuel : Double
        get() {
            val o = __offset(78)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Additional fuel burned at the destination for holding in pounds.
     * Example: /// Example: 6000.1
     * Constraints: No constraints specified.
     */
    val holdFuel : Double
        get() {
            val o = __offset(80)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Additional time for holding at the destination expressed as HH:MM.
     * Example: /// Example: 01:00
     * Constraints: Minimum length = 0, Maximum length = 6
     */
    val holdTime : String?
        get() {
            val o = __offset(82)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val holdTimeAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(82, 1)
    fun holdTimeInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 82, 1)
    /**
     * Fuel burned from the initial approach point to landing in pounds.
     * Example: /// Example: 3000.1
     * Constraints: No constraints specified.
     */
    val appLandingFuel : Double
        get() {
            val o = __offset(84)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Fuel planned to be burned during the flight in pounds.
     * Example: /// Example: 145000.1
     * Constraints: No constraints specified.
     */
    val burnedFuel : Double
        get() {
            val o = __offset(86)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Fuel planned to be remaining on the airplane at landing in pounds.
     * Example: /// Example: 19000.1
     * Constraints: No constraints specified.
     */
    val landingFuel : Double
        get() {
            val o = __offset(88)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * The minimum fuel on board required to divert in pounds.
     * Example: /// Example: 25000.1
     * Constraints: No constraints specified.
     */
    val minDivertFuel : Double
        get() {
            val o = __offset(90)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Fuel required to fly to alternate landing site 1 and land in pounds.
     * Example: /// Example: 6000.1
     * Constraints: No constraints specified.
     */
    val arrAlternate1Fuel : Double
        get() {
            val o = __offset(92)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Fuel required to fly to alternate landing site 2 and land in pounds.
     * Example: /// Example: 6000.1
     * Constraints: No constraints specified.
     */
    val arrAlternate2Fuel : Double
        get() {
            val o = __offset(94)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * The amount of contingency fuel in pounds.
     * Example: /// Example: 3000.1
     * Constraints: No constraints specified.
     */
    val contingencyFuel : Double
        get() {
            val o = __offset(96)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * The amount of reserve fuel in pounds.
     * Example: /// Example: 10000.1
     * Constraints: No constraints specified.
     */
    val reserveFuel : Double
        get() {
            val o = __offset(98)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * The depressurization fuel required to fly from the Equal Time Point to the Last Suitable/First Suitable airfield at depressurization altitude in pounds.
     * Example: /// Example: 20000.1
     * Constraints: No constraints specified.
     */
    val depressFuel : Double
        get() {
            val o = __offset(100)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * The amount of unusable fuel in pounds.
     * Example: /// Example: 2300.1
     * Constraints: No constraints specified.
     */
    val unusableFuel : Double
        get() {
            val o = __offset(102)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * The amount of unidentified extra fuel required to get to min landing in pounds.
     * Example: /// Example: 5000.1
     * Constraints: No constraints specified.
     */
    val unidentExtraFuel : Double
        get() {
            val o = __offset(104)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * The amount of identified extra fuel carried and not available in the burn plan in pounds.
     * Example: /// Example: 5000.1
     * Constraints: No constraints specified.
     */
    val identExtraFuel : Double
        get() {
            val o = __offset(106)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Total fuel remaining at alternate landing site 1 in pounds.
     * Example: /// Example: 18000.1
     * Constraints: No constraints specified.
     */
    val remAlternate1Fuel : Double
        get() {
            val o = __offset(108)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Total fuel remaining at alternate landing site 2 in pounds.
     * Example: /// Example: 18000.1
     * Constraints: No constraints specified.
     */
    val remAlternate2Fuel : Double
        get() {
            val o = __offset(110)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Total endurance time based on the fuel on board expressed as HH:MM.
     * Example: /// Example: 08:45
     * Constraints: Minimum length = 0, Maximum length = 6
     */
    val enduranceTime : String?
        get() {
            val o = __offset(112)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val enduranceTimeAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(112, 1)
    fun enduranceTimeInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 112, 1)
    /**
     * Name of the planned Standard Instrument Departure (SID) procedure.
     * Example: /// Example: RENV3B
     * Constraints: Minimum length = 0, Maximum length = 32
     */
    val sid : String?
        get() {
            val o = __offset(114)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val sidAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(114, 1)
    fun sidInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 114, 1)
    /**
     * Name of the planned Standard Terminal Arrival (STAR) procedure.
     * Example: /// Example: ADANA
     * Constraints: Minimum length = 0, Maximum length = 32
     */
    val star : String?
        get() {
            val o = __offset(116)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val starAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(116, 1)
    fun starInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 116, 1)
    /**
     * The GPS Receiver Autonomous Integrity Monitoring (RAIM) message. A RAIM system assesses the integrity of the GPS signals. This system predicts outages for a specified geographical area. These predictions are based on the location, path, and scheduled GPS satellite outages.
     * Example: /// Example: Failed by FAA SAPT 184022AUG2022
     * Constraints: Minimum length = 0, Maximum length = 128
     */
    val gpsRaim : String?
        get() {
            val o = __offset(118)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val gpsRaimAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(118, 1)
    fun gpsRaimInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 118, 1)
    /**
     * The departure runway for this flight.
     * Example: /// Example: 05L
     * Constraints: Minimum length = 0, Maximum length = 8
     */
    val depRunway : String?
        get() {
            val o = __offset(120)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val depRunwayAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(120, 1)
    fun depRunwayInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 120, 1)
    /**
     * The arrival runway for this flight.
     * Example: /// Example: 05L
     * Constraints: Minimum length = 0, Maximum length = 8
     */
    val arrRunway : String?
        get() {
            val o = __offset(122)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val arrRunwayAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(122, 1)
    fun arrRunwayInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 122, 1)
    /**
     * The 1801 fileable route of flight string for this flight. The route of flight string contains route designators, significant points, change of speed/altitude, change of flight rules, and cruise climbs.
     * Example: /// Example: RENV3B RENVI Y86 GOSVA/N0317F260 DCT EVLIT DCT UMUGI DCT NISIX DCT GIGOD DCT DIPEB DCT
     * GORPI Z80 TILAV L87 RAKIT Z717 PODUS Z130 MAG/N0298F220 Z20 KENIG/N0319F220 Z20 ORTAG T177
     * ESEGU Z20 BEBLA DCT MASEK/N0300F200 DCT GISEM/N0319F200 DCT BOMBI/N0276F060 DCT RIDSU DCT
     * Constraints: Minimum length = 0, Maximum length = 1024
     */
    val routeString : String?
        get() {
            val o = __offset(124)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val routeStringAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(124, 1)
    fun routeStringInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 124, 1)
    /**
     * Array of country codes for the countries overflown during this flight in ISO 3166-1 Alpha-2 format.
     * Example: /// Example: ['US', 'CA', 'UK']
     * Constraints: No constraints specified.
     */
    fun countryCodes(j: Int) : String? {
        val o = __offset(126)
        return if (o != 0) {
            __string(__vector(o) + j * 4)
        } else {
            null
        }
    }
    val countryCodesLength : Int
        get() {
            val o = __offset(126); return if (o != 0) __vector_len(o) else 0
        }
    /**
     * The Extended Operations (ETOPS) rating used to calculate this flight plan.
     * Example: /// Example: 85 MINUTES
     * Constraints: Minimum length = 0, Maximum length = 16
     */
    val etopsRating : String?
        get() {
            val o = __offset(128)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val etopsRatingAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(128, 1)
    fun etopsRatingInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 128, 1)
    /**
     * Array of Extended Operations (ETOPS) adequate landing airfields that are within the mission region.
     * Example: /// Example: ['KHSV', 'KISP', 'KBG', 'LTBS']
     * Constraints: No constraints specified.
     */
    fun etopsAirfields(j: Int) : String? {
        val o = __offset(130)
        return if (o != 0) {
            __string(__vector(o) + j * 4)
        } else {
            null
        }
    }
    val etopsAirfieldsLength : Int
        get() {
            val o = __offset(130); return if (o != 0) __vector_len(o) else 0
        }
    /**
     * Array of Extended Operations (ETOPS) alternate suitable landing airfields that are within the mission region.
     * Example: /// Example: ['KHSV', 'KISP', 'KBG', 'LTBS']
     * Constraints: No constraints specified.
     */
    fun etopsAltAirfields(j: Int) : String? {
        val o = __offset(132)
        return if (o != 0) {
            __string(__vector(o) + j * 4)
        } else {
            null
        }
    }
    val etopsAltAirfieldsLength : Int
        get() {
            val o = __offset(132); return if (o != 0) __vector_len(o) else 0
        }
    /**
     * The Extended Operations (ETOPS) validity window for the alternate airfield.
     * Example: /// Example: LPLA: 0317Z-0722Z
     * Constraints: Minimum length = 0, Maximum length = 64
     */
    val etopsValWindow : String?
        get() {
            val o = __offset(134)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val etopsValWindowAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(134, 1)
    fun etopsValWindowInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 134, 1)
    /**
     * Remarks from the planners concerning this flight plan.
     * Example: /// Example: Flight plan is good for 2 days before airspace closes over the UK.
     * Constraints: Minimum length = 0, Maximum length = 512
     */
    val plannerRemark : String?
        get() {
            val o = __offset(136)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val plannerRemarkAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(136, 1)
    fun plannerRemarkInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 136, 1)
    /**
     * Remarks about the planned cargo associated with this flight plan.
     * Example: /// Example: Expecting 55,000 lbs. If different, call us.
     * Constraints: Minimum length = 0, Maximum length = 512
     */
    val cargoRemark : String?
        get() {
            val o = __offset(138)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val cargoRemarkAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(138, 1)
    fun cargoRemarkInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 138, 1)
    /**
     * Wind factor for the first half of the route. This is the average wind factor from first Top of Climb to the mid-time of the entire route in knots. A positive value indicates a headwind, while a negative value indicates a tailwind.
     * Example: /// Example: -1.1
     * Constraints: No constraints specified.
     */
    val windFac1 : Double
        get() {
            val o = __offset(140)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Wind factor for the second half of the route. This is the average wind factor from the mid-time of the entire route to last Top of Descent in knots. A positive value indicates a headwind, while a negative value indicates a tailwind.
     * Example: /// Example: 10.1
     * Constraints: No constraints specified.
     */
    val windFac2 : Double
        get() {
            val o = __offset(142)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Average wind factor from Top of Climb to Top of Descent in knots. A positive value indicates a headwind, while a negative value indicates a tailwind.
     * Example: /// Example: 5.1
     * Constraints: No constraints specified.
     */
    val windFacAvg : Double
        get() {
            val o = __offset(144)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Average temperature deviation of the primary, divert, and alternate path for the route between first Top of Climb and last Top of Descent in degrees Celsius.
     * Example: /// Example: 16.1
     * Constraints: No constraints specified.
     */
    val avgTempDev : Double
        get() {
            val o = __offset(146)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Array of Air Traffic Control (ATC) addresses.
     * Example: /// Example: ['EYCBZMFO', 'EUCHZMFP', 'ETARYXYX', 'EDUUZVZI']
     * Constraints: No constraints specified.
     */
    fun atcAddresses(j: Int) : String? {
        val o = __offset(148)
        return if (o != 0) {
            __string(__vector(o) + j * 4)
        } else {
            null
        }
    }
    val atcAddressesLength : Int
        get() {
            val o = __offset(148); return if (o != 0) __vector_len(o) else 0
        }
    /**
     * Air Traffic Control address filing the flight plan.
     * Example: /// Example: ETARYXYX
     * Constraints: Minimum length = 0, Maximum length = 24
     */
    val originator : String?
        get() {
            val o = __offset(150)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val originatorAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(150, 1)
    fun originatorInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 150, 1)
    /**
     * The number of aircraft flying this flight plan.
     * Example: /// Example: 1
     * Constraints: No constraints specified.
     */
    val numAircraft : Int
        get() {
            val o = __offset(152)
            return if(o != 0) bb.getInt(o + bb_pos) else 0
        }
    /**
     * The flight rules this flight plan is being filed under.
     * Example: /// Example: l
     * Constraints: Minimum length = 0, Maximum length = 8
     */
    val flightRules : String?
        get() {
            val o = __offset(154)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val flightRulesAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(154, 1)
    fun flightRulesInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 154, 1)
    /**
     * The type of flight (MILITARY, CIVILIAN, etc).
     * Example: /// Example: MILITARY
     * Constraints: Minimum length = 0, Maximum length = 16
     */
    val flightType : String?
        get() {
            val o = __offset(156)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val flightTypeAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(156, 1)
    fun flightTypeInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 156, 1)
    /**
     * A character string representation of the initial filed cruise speed for this flight (prepended values of K, N, and M represent kilometers per hour, knots, and Mach, respectively).
     * Example: /// Example: N0305
     * Constraints: Minimum length = 0, Maximum length = 8
     */
    val initialCruiseSpeed : String?
        get() {
            val o = __offset(158)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val initialCruiseSpeedAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(158, 1)
    fun initialCruiseSpeedInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 158, 1)
    /**
     * A character string representation of the initial filed altitude level for this flight (prepended values of F, S, A, and M represent flight level in hundreds of feet, standard metric level in tens of meters, altitude in hundreds of feet, and altitude in tens of meters, respectively).
     * Example: /// Example: F270
     * Constraints: Minimum length = 0, Maximum length = 8
     */
    val initialFlightLevel : String?
        get() {
            val o = __offset(160)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val initialFlightLevelAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(160, 1)
    fun initialFlightLevelInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 160, 1)
    /**
     * The first designated alternate arrival airfield, International Civil Aviation Organization (ICAO) code preferred.
     * Example: /// Example: EDDS
     * Constraints: Minimum length = 0, Maximum length = 36
     */
    val arrAlternate1 : String?
        get() {
            val o = __offset(162)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val arrAlternate1AsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(162, 1)
    fun arrAlternate1InByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 162, 1)
    /**
     * The second designated alternate arrival airfield, International Civil Aviation Organization (ICAO) code preferred.
     * Example: /// Example: EDDM
     * Constraints: Minimum length = 0, Maximum length = 36
     */
    val arrAlternate2 : String?
        get() {
            val o = __offset(164)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val arrAlternate2AsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(164, 1)
    fun arrAlternate2InByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 164, 1)
    /**
     * The designated alternate departure airfield, International Civil Aviation Organization (ICAO) code preferred.
     * Example: /// Example: LFPO
     * Constraints: Minimum length = 0, Maximum length = 36
     */
    val depAlternate : String?
        get() {
            val o = __offset(166)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val depAlternateAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(166, 1)
    fun depAlternateInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 166, 1)
    /**
     * The wake turbulence category for this flight. The categories are assigned by the International Civil Aviation Organization (ICAO) and are based on maximum certified takeoff mass for the purpose of separating aircraft in flight due to wake turbulence. Valid values include LIGHT, MEDIUM, LARGE, HEAVY, and SUPER.
     * Example: /// Example: MEDIUM
     * Constraints: Minimum length = 0, Maximum length = 8
     */
    val wakeTurbCat : String?
        get() {
            val o = __offset(168)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val wakeTurbCatAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(168, 1)
    fun wakeTurbCatInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 168, 1)
    /**
     * The list of equipment on the aircraft as defined in the Flight Information Publications (FLIP) General Planning (GP) manual.
     * Example: /// Example: SDFGHIRTUWXYZ/H
     * Constraints: Minimum length = 0, Maximum length = 36
     */
    val equipment : String?
        get() {
            val o = __offset(170)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val equipmentAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(170, 1)
    fun equipmentInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 170, 1)
    /**
     * Additional remarks for air traffic control for this flight.
     * Example: /// Example: STS/STATE PBN/A1B2B5C2C4D2D4 EUR/PROTECTED
     * Constraints: Minimum length = 0, Maximum length = 64
     */
    val notes : String?
        get() {
            val o = __offset(172)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val notesAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(172, 1)
    fun notesInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 172, 1)
    /**
     * Time the row was created in the database, auto-populated by the system.
     * Example: /// Example: 2018-01-01T16:00:00.123Z
     * Constraints: No constraints specified.
     */
    val createdAt : String?
        get() {
            val o = __offset(174)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val createdAtAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(174, 1)
    fun createdAtInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 174, 1)
    /**
     * Application user who created the row in the database, auto-populated by the system.
     * Example: /// Example: some.user
     * Constraints: Minimum length = 1, Maximum length = 64
     */
    val createdBy : String?
        get() {
            val o = __offset(176)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val createdByAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(176, 1)
    fun createdByInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 176, 1)
    /**
     * The source data library from which this record was received. This could be a remote or tactical UDL or another data library. If null, the record should be assumed to have originated from the primary Enterprise UDL.
     * Example: /// Example: AXE
     * Constraints: Minimum length = 0, Maximum length = 64
     */
    val sourceDl : String?
        get() {
            val o = __offset(178)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val sourceDlAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(178, 1)
    fun sourceDlInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 178, 1)
    /**
     * Source of the data.
     * Example: /// Example: Bluestaq
     * Constraints: Minimum length = 1, Maximum length = 64
     */
    val source : String?
        get() {
            val o = __offset(180)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val sourceAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(180, 1)
    fun sourceInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 180, 1)
    /**
     * Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
     * Example: /// Example: THIRD_PARTY_DATASOURCE
     * Constraints: Minimum length = 0, Maximum length = 64
     */
    val origin : String?
        get() {
            val o = __offset(182)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val originAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(182, 1)
    fun originInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 182, 1)
    /**
     * The originating source network on which this record was created, auto-populated by the system.
     * Example: /// Example: ORIG
     * Constraints: Minimum length = 1, Maximum length = 32
     */
    val origNetwork : String?
        get() {
            val o = __offset(184)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val origNetworkAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(184, 1)
    fun origNetworkInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 184, 1)
    /**
     * Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
     * EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
     * REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
     * SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
     * TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
     * Example: /// Example: TEST
     * Constraints: Minimum length = 1, Maximum length = 32
     */
    val dataMode : Byte
        get() {
            val o = __offset(186)
            return if(o != 0) bb.get(o + bb_pos) else 0
        }
    /**
     * Collection of air refueling events occurring on this flight.
     * Example: /// Example: No example provided.
     * Constraints: No constraints specified.
     */
    fun airRefuelEvents(j: Int) : String? {
        val o = __offset(188)
        return if (o != 0) {
            __string(__vector(o) + j * 4)
        } else {
            null
        }
    }
    val airRefuelEventsLength : Int
        get() {
            val o = __offset(188); return if (o != 0) __vector_len(o) else 0
        }
    /**
     * Collection of messages associated with this flight plan indicating the severity, the point where the message was generated, the path (Primary, Alternate, etc.), and the text of the message.
     * Example: /// Example: No example provided.
     * Constraints: No constraints specified.
     */
    fun flightPlanMessages(j: Int) : String? {
        val o = __offset(190)
        return if (o != 0) {
            __string(__vector(o) + j * 4)
        } else {
            null
        }
    }
    val flightPlanMessagesLength : Int
        get() {
            val o = __offset(190); return if (o != 0) __vector_len(o) else 0
        }
    /**
     * Collection of waypoints associated with this flight plan.
     * Example: /// Example: No example provided.
     * Constraints: No constraints specified.
     */
    fun flightPlanWaypoints(j: Int) : String? {
        val o = __offset(192)
        return if (o != 0) {
            __string(__vector(o) + j * 4)
        } else {
            null
        }
    }
    val flightPlanWaypointsLength : Int
        get() {
            val o = __offset(192); return if (o != 0) __vector_len(o) else 0
        }
    /**
     * Collection of point groups generated for this flight plan. Groups include point sets for Extended Operations (ETOPS), Critical Fuel Point, and Equal Time Point (ETP).
     * Example: /// Example: No example provided.
     * Constraints: No constraints specified.
     */
    fun flightPlanPointGroups(j: Int) : String? {
        val o = __offset(194)
        return if (o != 0) {
            __string(__vector(o) + j * 4)
        } else {
            null
        }
    }
    val flightPlanPointGroupsLength : Int
        get() {
            val o = __offset(194); return if (o != 0) __vector_len(o) else 0
        }
    companion object {
        fun validateVersion() = Constants.FLATBUFFERS_24_3_25()
        fun getRootAsFlightPlan_Ingest(_bb: ByteBuffer): FlightPlan_Ingest = getRootAsFlightPlan_Ingest(_bb, FlightPlan_Ingest())
        fun getRootAsFlightPlan_Ingest(_bb: ByteBuffer, obj: FlightPlan_Ingest): FlightPlan_Ingest {
            _bb.order(ByteOrder.LITTLE_ENDIAN)
            return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb))
        }
        fun FlightPlan_IngestBufferHasIdentifier(_bb: ByteBuffer) : Boolean = __has_identifier(_bb, "FLIG")
        fun createFlightPlan_Ingest(builder: FlatBufferBuilder, idOffset: Int, classificationMarkingOffset: Int, amcMissionIdOffset: Int, idSortieOffset: Int, idAircraftOffset: Int, legNum: Int, idDepAirfieldOffset: Int, depAirfieldOffset: Int, idArrAirfieldOffset: Int, arrAirfieldOffset: Int, externalIdOffset: Int, genTsOffset: Int, aircraftMdsOffset: Int, tailNumberOffset: Int, callSignOffset: Int, wxValidStartOffset: Int, wxValidEndOffset: Int, estDepTimeOffset: Int, dragIndex: Double, fuelDegrade: Double, opWeight: Double, msnIndex: Double, rampFuel: Double, taxiFuel: Double, takeoffFuel: Double, climbFuel: Double, climbTimeOffset: Int, holdDownFuel: Double, tocIceFuel: Double, tocFuel: Double, enrouteFuel: Double, enrouteTimeOffset: Int, thunderAvoidFuel: Double, todIceFuel: Double, opConditionFuel: Double, todFuel: Double, earlyDescentFuel: Double, arrIceFuel: Double, holdFuel: Double, holdTimeOffset: Int, appLandingFuel: Double, burnedFuel: Double, landingFuel: Double, minDivertFuel: Double, arrAlternate1Fuel: Double, arrAlternate2Fuel: Double, contingencyFuel: Double, reserveFuel: Double, depressFuel: Double, unusableFuel: Double, unidentExtraFuel: Double, identExtraFuel: Double, remAlternate1Fuel: Double, remAlternate2Fuel: Double, enduranceTimeOffset: Int, sidOffset: Int, starOffset: Int, gpsRaimOffset: Int, depRunwayOffset: Int, arrRunwayOffset: Int, routeStringOffset: Int, countryCodesOffset: Int, etopsRatingOffset: Int, etopsAirfieldsOffset: Int, etopsAltAirfieldsOffset: Int, etopsValWindowOffset: Int, plannerRemarkOffset: Int, cargoRemarkOffset: Int, windFac1: Double, windFac2: Double, windFacAvg: Double, avgTempDev: Double, atcAddressesOffset: Int, originatorOffset: Int, numAircraft: Int, flightRulesOffset: Int, flightTypeOffset: Int, initialCruiseSpeedOffset: Int, initialFlightLevelOffset: Int, arrAlternate1Offset: Int, arrAlternate2Offset: Int, depAlternateOffset: Int, wakeTurbCatOffset: Int, equipmentOffset: Int, notesOffset: Int, createdAtOffset: Int, createdByOffset: Int, sourceDlOffset: Int, sourceOffset: Int, originOffset: Int, origNetworkOffset: Int, dataMode: Byte, airRefuelEventsOffset: Int, flightPlanMessagesOffset: Int, flightPlanWaypointsOffset: Int, flightPlanPointGroupsOffset: Int) : Int {
            builder.startTable(96)
            addAvgTempDev(builder, avgTempDev)
            addWindFacAvg(builder, windFacAvg)
            addWindFac2(builder, windFac2)
            addWindFac1(builder, windFac1)
            addRemAlternate2Fuel(builder, remAlternate2Fuel)
            addRemAlternate1Fuel(builder, remAlternate1Fuel)
            addIdentExtraFuel(builder, identExtraFuel)
            addUnidentExtraFuel(builder, unidentExtraFuel)
            addUnusableFuel(builder, unusableFuel)
            addDepressFuel(builder, depressFuel)
            addReserveFuel(builder, reserveFuel)
            addContingencyFuel(builder, contingencyFuel)
            addArrAlternate2Fuel(builder, arrAlternate2Fuel)
            addArrAlternate1Fuel(builder, arrAlternate1Fuel)
            addMinDivertFuel(builder, minDivertFuel)
            addLandingFuel(builder, landingFuel)
            addBurnedFuel(builder, burnedFuel)
            addAppLandingFuel(builder, appLandingFuel)
            addHoldFuel(builder, holdFuel)
            addArrIceFuel(builder, arrIceFuel)
            addEarlyDescentFuel(builder, earlyDescentFuel)
            addTodFuel(builder, todFuel)
            addOpConditionFuel(builder, opConditionFuel)
            addTodIceFuel(builder, todIceFuel)
            addThunderAvoidFuel(builder, thunderAvoidFuel)
            addEnrouteFuel(builder, enrouteFuel)
            addTocFuel(builder, tocFuel)
            addTocIceFuel(builder, tocIceFuel)
            addHoldDownFuel(builder, holdDownFuel)
            addClimbFuel(builder, climbFuel)
            addTakeoffFuel(builder, takeoffFuel)
            addTaxiFuel(builder, taxiFuel)
            addRampFuel(builder, rampFuel)
            addMsnIndex(builder, msnIndex)
            addOpWeight(builder, opWeight)
            addFuelDegrade(builder, fuelDegrade)
            addDragIndex(builder, dragIndex)
            addFlightPlanPointGroups(builder, flightPlanPointGroupsOffset)
            addFlightPlanWaypoints(builder, flightPlanWaypointsOffset)
            addFlightPlanMessages(builder, flightPlanMessagesOffset)
            addAirRefuelEvents(builder, airRefuelEventsOffset)
            addOrigNetwork(builder, origNetworkOffset)
            addOrigin(builder, originOffset)
            addSource(builder, sourceOffset)
            addSourceDL(builder, sourceDlOffset)
            addCreatedBy(builder, createdByOffset)
            addCreatedAt(builder, createdAtOffset)
            addNotes(builder, notesOffset)
            addEquipment(builder, equipmentOffset)
            addWakeTurbCat(builder, wakeTurbCatOffset)
            addDepAlternate(builder, depAlternateOffset)
            addArrAlternate2(builder, arrAlternate2Offset)
            addArrAlternate1(builder, arrAlternate1Offset)
            addInitialFlightLevel(builder, initialFlightLevelOffset)
            addInitialCruiseSpeed(builder, initialCruiseSpeedOffset)
            addFlightType(builder, flightTypeOffset)
            addFlightRules(builder, flightRulesOffset)
            addNumAircraft(builder, numAircraft)
            addOriginator(builder, originatorOffset)
            addAtcAddresses(builder, atcAddressesOffset)
            addCargoRemark(builder, cargoRemarkOffset)
            addPlannerRemark(builder, plannerRemarkOffset)
            addEtopsValWindow(builder, etopsValWindowOffset)
            addEtopsAltAirfields(builder, etopsAltAirfieldsOffset)
            addEtopsAirfields(builder, etopsAirfieldsOffset)
            addEtopsRating(builder, etopsRatingOffset)
            addCountryCodes(builder, countryCodesOffset)
            addRouteString(builder, routeStringOffset)
            addArrRunway(builder, arrRunwayOffset)
            addDepRunway(builder, depRunwayOffset)
            addGpsRAIM(builder, gpsRaimOffset)
            addStar(builder, starOffset)
            addSid(builder, sidOffset)
            addEnduranceTime(builder, enduranceTimeOffset)
            addHoldTime(builder, holdTimeOffset)
            addEnrouteTime(builder, enrouteTimeOffset)
            addClimbTime(builder, climbTimeOffset)
            addEstDepTime(builder, estDepTimeOffset)
            addWxValidEnd(builder, wxValidEndOffset)
            addWxValidStart(builder, wxValidStartOffset)
            addCallSign(builder, callSignOffset)
            addTailNumber(builder, tailNumberOffset)
            addAircraftMDS(builder, aircraftMdsOffset)
            addGenTS(builder, genTsOffset)
            addExternalId(builder, externalIdOffset)
            addArrAirfield(builder, arrAirfieldOffset)
            addIdArrAirfield(builder, idArrAirfieldOffset)
            addDepAirfield(builder, depAirfieldOffset)
            addIdDepAirfield(builder, idDepAirfieldOffset)
            addLegNum(builder, legNum)
            addIdAircraft(builder, idAircraftOffset)
            addIdSortie(builder, idSortieOffset)
            addAmcMissionId(builder, amcMissionIdOffset)
            addClassificationMarking(builder, classificationMarkingOffset)
            addId(builder, idOffset)
            addDataMode(builder, dataMode)
            return endFlightPlan_Ingest(builder)
        }
        fun startFlightPlan_Ingest(builder: FlatBufferBuilder) = builder.startTable(96)
        fun addId(builder: FlatBufferBuilder, id: Int) = builder.addOffset(0, id, 0)
        fun addClassificationMarking(builder: FlatBufferBuilder, classificationMarking: Int) = builder.addOffset(1, classificationMarking, 0)
        fun addAmcMissionId(builder: FlatBufferBuilder, amcMissionId: Int) = builder.addOffset(2, amcMissionId, 0)
        fun addIdSortie(builder: FlatBufferBuilder, idSortie: Int) = builder.addOffset(3, idSortie, 0)
        fun addIdAircraft(builder: FlatBufferBuilder, idAircraft: Int) = builder.addOffset(4, idAircraft, 0)
        fun addLegNum(builder: FlatBufferBuilder, legNum: Int) = builder.addInt(5, legNum, 0)
        fun addIdDepAirfield(builder: FlatBufferBuilder, idDepAirfield: Int) = builder.addOffset(6, idDepAirfield, 0)
        fun addDepAirfield(builder: FlatBufferBuilder, depAirfield: Int) = builder.addOffset(7, depAirfield, 0)
        fun addIdArrAirfield(builder: FlatBufferBuilder, idArrAirfield: Int) = builder.addOffset(8, idArrAirfield, 0)
        fun addArrAirfield(builder: FlatBufferBuilder, arrAirfield: Int) = builder.addOffset(9, arrAirfield, 0)
        fun addExternalId(builder: FlatBufferBuilder, externalId: Int) = builder.addOffset(10, externalId, 0)
        fun addGenTS(builder: FlatBufferBuilder, genTs: Int) = builder.addOffset(11, genTs, 0)
        fun addAircraftMDS(builder: FlatBufferBuilder, aircraftMds: Int) = builder.addOffset(12, aircraftMds, 0)
        fun addTailNumber(builder: FlatBufferBuilder, tailNumber: Int) = builder.addOffset(13, tailNumber, 0)
        fun addCallSign(builder: FlatBufferBuilder, callSign: Int) = builder.addOffset(14, callSign, 0)
        fun addWxValidStart(builder: FlatBufferBuilder, wxValidStart: Int) = builder.addOffset(15, wxValidStart, 0)
        fun addWxValidEnd(builder: FlatBufferBuilder, wxValidEnd: Int) = builder.addOffset(16, wxValidEnd, 0)
        fun addEstDepTime(builder: FlatBufferBuilder, estDepTime: Int) = builder.addOffset(17, estDepTime, 0)
        fun addDragIndex(builder: FlatBufferBuilder, dragIndex: Double) = builder.addDouble(18, dragIndex, 0.0)
        fun addFuelDegrade(builder: FlatBufferBuilder, fuelDegrade: Double) = builder.addDouble(19, fuelDegrade, 0.0)
        fun addOpWeight(builder: FlatBufferBuilder, opWeight: Double) = builder.addDouble(20, opWeight, 0.0)
        fun addMsnIndex(builder: FlatBufferBuilder, msnIndex: Double) = builder.addDouble(21, msnIndex, 0.0)
        fun addRampFuel(builder: FlatBufferBuilder, rampFuel: Double) = builder.addDouble(22, rampFuel, 0.0)
        fun addTaxiFuel(builder: FlatBufferBuilder, taxiFuel: Double) = builder.addDouble(23, taxiFuel, 0.0)
        fun addTakeoffFuel(builder: FlatBufferBuilder, takeoffFuel: Double) = builder.addDouble(24, takeoffFuel, 0.0)
        fun addClimbFuel(builder: FlatBufferBuilder, climbFuel: Double) = builder.addDouble(25, climbFuel, 0.0)
        fun addClimbTime(builder: FlatBufferBuilder, climbTime: Int) = builder.addOffset(26, climbTime, 0)
        fun addHoldDownFuel(builder: FlatBufferBuilder, holdDownFuel: Double) = builder.addDouble(27, holdDownFuel, 0.0)
        fun addTocIceFuel(builder: FlatBufferBuilder, tocIceFuel: Double) = builder.addDouble(28, tocIceFuel, 0.0)
        fun addTocFuel(builder: FlatBufferBuilder, tocFuel: Double) = builder.addDouble(29, tocFuel, 0.0)
        fun addEnrouteFuel(builder: FlatBufferBuilder, enrouteFuel: Double) = builder.addDouble(30, enrouteFuel, 0.0)
        fun addEnrouteTime(builder: FlatBufferBuilder, enrouteTime: Int) = builder.addOffset(31, enrouteTime, 0)
        fun addThunderAvoidFuel(builder: FlatBufferBuilder, thunderAvoidFuel: Double) = builder.addDouble(32, thunderAvoidFuel, 0.0)
        fun addTodIceFuel(builder: FlatBufferBuilder, todIceFuel: Double) = builder.addDouble(33, todIceFuel, 0.0)
        fun addOpConditionFuel(builder: FlatBufferBuilder, opConditionFuel: Double) = builder.addDouble(34, opConditionFuel, 0.0)
        fun addTodFuel(builder: FlatBufferBuilder, todFuel: Double) = builder.addDouble(35, todFuel, 0.0)
        fun addEarlyDescentFuel(builder: FlatBufferBuilder, earlyDescentFuel: Double) = builder.addDouble(36, earlyDescentFuel, 0.0)
        fun addArrIceFuel(builder: FlatBufferBuilder, arrIceFuel: Double) = builder.addDouble(37, arrIceFuel, 0.0)
        fun addHoldFuel(builder: FlatBufferBuilder, holdFuel: Double) = builder.addDouble(38, holdFuel, 0.0)
        fun addHoldTime(builder: FlatBufferBuilder, holdTime: Int) = builder.addOffset(39, holdTime, 0)
        fun addAppLandingFuel(builder: FlatBufferBuilder, appLandingFuel: Double) = builder.addDouble(40, appLandingFuel, 0.0)
        fun addBurnedFuel(builder: FlatBufferBuilder, burnedFuel: Double) = builder.addDouble(41, burnedFuel, 0.0)
        fun addLandingFuel(builder: FlatBufferBuilder, landingFuel: Double) = builder.addDouble(42, landingFuel, 0.0)
        fun addMinDivertFuel(builder: FlatBufferBuilder, minDivertFuel: Double) = builder.addDouble(43, minDivertFuel, 0.0)
        fun addArrAlternate1Fuel(builder: FlatBufferBuilder, arrAlternate1Fuel: Double) = builder.addDouble(44, arrAlternate1Fuel, 0.0)
        fun addArrAlternate2Fuel(builder: FlatBufferBuilder, arrAlternate2Fuel: Double) = builder.addDouble(45, arrAlternate2Fuel, 0.0)
        fun addContingencyFuel(builder: FlatBufferBuilder, contingencyFuel: Double) = builder.addDouble(46, contingencyFuel, 0.0)
        fun addReserveFuel(builder: FlatBufferBuilder, reserveFuel: Double) = builder.addDouble(47, reserveFuel, 0.0)
        fun addDepressFuel(builder: FlatBufferBuilder, depressFuel: Double) = builder.addDouble(48, depressFuel, 0.0)
        fun addUnusableFuel(builder: FlatBufferBuilder, unusableFuel: Double) = builder.addDouble(49, unusableFuel, 0.0)
        fun addUnidentExtraFuel(builder: FlatBufferBuilder, unidentExtraFuel: Double) = builder.addDouble(50, unidentExtraFuel, 0.0)
        fun addIdentExtraFuel(builder: FlatBufferBuilder, identExtraFuel: Double) = builder.addDouble(51, identExtraFuel, 0.0)
        fun addRemAlternate1Fuel(builder: FlatBufferBuilder, remAlternate1Fuel: Double) = builder.addDouble(52, remAlternate1Fuel, 0.0)
        fun addRemAlternate2Fuel(builder: FlatBufferBuilder, remAlternate2Fuel: Double) = builder.addDouble(53, remAlternate2Fuel, 0.0)
        fun addEnduranceTime(builder: FlatBufferBuilder, enduranceTime: Int) = builder.addOffset(54, enduranceTime, 0)
        fun addSid(builder: FlatBufferBuilder, sid: Int) = builder.addOffset(55, sid, 0)
        fun addStar(builder: FlatBufferBuilder, star: Int) = builder.addOffset(56, star, 0)
        fun addGpsRAIM(builder: FlatBufferBuilder, gpsRaim: Int) = builder.addOffset(57, gpsRaim, 0)
        fun addDepRunway(builder: FlatBufferBuilder, depRunway: Int) = builder.addOffset(58, depRunway, 0)
        fun addArrRunway(builder: FlatBufferBuilder, arrRunway: Int) = builder.addOffset(59, arrRunway, 0)
        fun addRouteString(builder: FlatBufferBuilder, routeString: Int) = builder.addOffset(60, routeString, 0)
        fun addCountryCodes(builder: FlatBufferBuilder, countryCodes: Int) = builder.addOffset(61, countryCodes, 0)
        fun createCountryCodesVector(builder: FlatBufferBuilder, data: IntArray) : Int {
            builder.startVector(4, data.size, 4)
            for (i in data.size - 1 downTo 0) {
                builder.addOffset(data[i])
            }
            return builder.endVector()
        }
        fun startCountryCodesVector(builder: FlatBufferBuilder, numElems: Int) = builder.startVector(4, numElems, 4)
        fun addEtopsRating(builder: FlatBufferBuilder, etopsRating: Int) = builder.addOffset(62, etopsRating, 0)
        fun addEtopsAirfields(builder: FlatBufferBuilder, etopsAirfields: Int) = builder.addOffset(63, etopsAirfields, 0)
        fun createEtopsAirfieldsVector(builder: FlatBufferBuilder, data: IntArray) : Int {
            builder.startVector(4, data.size, 4)
            for (i in data.size - 1 downTo 0) {
                builder.addOffset(data[i])
            }
            return builder.endVector()
        }
        fun startEtopsAirfieldsVector(builder: FlatBufferBuilder, numElems: Int) = builder.startVector(4, numElems, 4)
        fun addEtopsAltAirfields(builder: FlatBufferBuilder, etopsAltAirfields: Int) = builder.addOffset(64, etopsAltAirfields, 0)
        fun createEtopsAltAirfieldsVector(builder: FlatBufferBuilder, data: IntArray) : Int {
            builder.startVector(4, data.size, 4)
            for (i in data.size - 1 downTo 0) {
                builder.addOffset(data[i])
            }
            return builder.endVector()
        }
        fun startEtopsAltAirfieldsVector(builder: FlatBufferBuilder, numElems: Int) = builder.startVector(4, numElems, 4)
        fun addEtopsValWindow(builder: FlatBufferBuilder, etopsValWindow: Int) = builder.addOffset(65, etopsValWindow, 0)
        fun addPlannerRemark(builder: FlatBufferBuilder, plannerRemark: Int) = builder.addOffset(66, plannerRemark, 0)
        fun addCargoRemark(builder: FlatBufferBuilder, cargoRemark: Int) = builder.addOffset(67, cargoRemark, 0)
        fun addWindFac1(builder: FlatBufferBuilder, windFac1: Double) = builder.addDouble(68, windFac1, 0.0)
        fun addWindFac2(builder: FlatBufferBuilder, windFac2: Double) = builder.addDouble(69, windFac2, 0.0)
        fun addWindFacAvg(builder: FlatBufferBuilder, windFacAvg: Double) = builder.addDouble(70, windFacAvg, 0.0)
        fun addAvgTempDev(builder: FlatBufferBuilder, avgTempDev: Double) = builder.addDouble(71, avgTempDev, 0.0)
        fun addAtcAddresses(builder: FlatBufferBuilder, atcAddresses: Int) = builder.addOffset(72, atcAddresses, 0)
        fun createAtcAddressesVector(builder: FlatBufferBuilder, data: IntArray) : Int {
            builder.startVector(4, data.size, 4)
            for (i in data.size - 1 downTo 0) {
                builder.addOffset(data[i])
            }
            return builder.endVector()
        }
        fun startAtcAddressesVector(builder: FlatBufferBuilder, numElems: Int) = builder.startVector(4, numElems, 4)
        fun addOriginator(builder: FlatBufferBuilder, originator: Int) = builder.addOffset(73, originator, 0)
        fun addNumAircraft(builder: FlatBufferBuilder, numAircraft: Int) = builder.addInt(74, numAircraft, 0)
        fun addFlightRules(builder: FlatBufferBuilder, flightRules: Int) = builder.addOffset(75, flightRules, 0)
        fun addFlightType(builder: FlatBufferBuilder, flightType: Int) = builder.addOffset(76, flightType, 0)
        fun addInitialCruiseSpeed(builder: FlatBufferBuilder, initialCruiseSpeed: Int) = builder.addOffset(77, initialCruiseSpeed, 0)
        fun addInitialFlightLevel(builder: FlatBufferBuilder, initialFlightLevel: Int) = builder.addOffset(78, initialFlightLevel, 0)
        fun addArrAlternate1(builder: FlatBufferBuilder, arrAlternate1: Int) = builder.addOffset(79, arrAlternate1, 0)
        fun addArrAlternate2(builder: FlatBufferBuilder, arrAlternate2: Int) = builder.addOffset(80, arrAlternate2, 0)
        fun addDepAlternate(builder: FlatBufferBuilder, depAlternate: Int) = builder.addOffset(81, depAlternate, 0)
        fun addWakeTurbCat(builder: FlatBufferBuilder, wakeTurbCat: Int) = builder.addOffset(82, wakeTurbCat, 0)
        fun addEquipment(builder: FlatBufferBuilder, equipment: Int) = builder.addOffset(83, equipment, 0)
        fun addNotes(builder: FlatBufferBuilder, notes: Int) = builder.addOffset(84, notes, 0)
        fun addCreatedAt(builder: FlatBufferBuilder, createdAt: Int) = builder.addOffset(85, createdAt, 0)
        fun addCreatedBy(builder: FlatBufferBuilder, createdBy: Int) = builder.addOffset(86, createdBy, 0)
        fun addSourceDL(builder: FlatBufferBuilder, sourceDl: Int) = builder.addOffset(87, sourceDl, 0)
        fun addSource(builder: FlatBufferBuilder, source: Int) = builder.addOffset(88, source, 0)
        fun addOrigin(builder: FlatBufferBuilder, origin: Int) = builder.addOffset(89, origin, 0)
        fun addOrigNetwork(builder: FlatBufferBuilder, origNetwork: Int) = builder.addOffset(90, origNetwork, 0)
        fun addDataMode(builder: FlatBufferBuilder, dataMode: Byte) = builder.addByte(91, dataMode, 0)
        fun addAirRefuelEvents(builder: FlatBufferBuilder, airRefuelEvents: Int) = builder.addOffset(92, airRefuelEvents, 0)
        fun createAirRefuelEventsVector(builder: FlatBufferBuilder, data: IntArray) : Int {
            builder.startVector(4, data.size, 4)
            for (i in data.size - 1 downTo 0) {
                builder.addOffset(data[i])
            }
            return builder.endVector()
        }
        fun startAirRefuelEventsVector(builder: FlatBufferBuilder, numElems: Int) = builder.startVector(4, numElems, 4)
        fun addFlightPlanMessages(builder: FlatBufferBuilder, flightPlanMessages: Int) = builder.addOffset(93, flightPlanMessages, 0)
        fun createFlightPlanMessagesVector(builder: FlatBufferBuilder, data: IntArray) : Int {
            builder.startVector(4, data.size, 4)
            for (i in data.size - 1 downTo 0) {
                builder.addOffset(data[i])
            }
            return builder.endVector()
        }
        fun startFlightPlanMessagesVector(builder: FlatBufferBuilder, numElems: Int) = builder.startVector(4, numElems, 4)
        fun addFlightPlanWaypoints(builder: FlatBufferBuilder, flightPlanWaypoints: Int) = builder.addOffset(94, flightPlanWaypoints, 0)
        fun createFlightPlanWaypointsVector(builder: FlatBufferBuilder, data: IntArray) : Int {
            builder.startVector(4, data.size, 4)
            for (i in data.size - 1 downTo 0) {
                builder.addOffset(data[i])
            }
            return builder.endVector()
        }
        fun startFlightPlanWaypointsVector(builder: FlatBufferBuilder, numElems: Int) = builder.startVector(4, numElems, 4)
        fun addFlightPlanPointGroups(builder: FlatBufferBuilder, flightPlanPointGroups: Int) = builder.addOffset(95, flightPlanPointGroups, 0)
        fun createFlightPlanPointGroupsVector(builder: FlatBufferBuilder, data: IntArray) : Int {
            builder.startVector(4, data.size, 4)
            for (i in data.size - 1 downTo 0) {
                builder.addOffset(data[i])
            }
            return builder.endVector()
        }
        fun startFlightPlanPointGroupsVector(builder: FlatBufferBuilder, numElems: Int) = builder.startVector(4, numElems, 4)
        fun endFlightPlan_Ingest(builder: FlatBufferBuilder) : Int {
            val o = builder.endTable()
            return o
        }
        fun finishFlightPlanIngestBuffer(builder: FlatBufferBuilder, offset: Int) = builder.finish(offset, "FLIG")
        fun finishSizePrefixedFlightPlan_IngestBuffer(builder: FlatBufferBuilder, offset: Int) = builder.finishSizePrefixed(offset, "FLIG")
    }
}
