// automatically generated by the FlatBuffers compiler, do not modify

import com.google.flatbuffers.BaseVector
import com.google.flatbuffers.BooleanVector
import com.google.flatbuffers.ByteVector
import com.google.flatbuffers.Constants
import com.google.flatbuffers.DoubleVector
import com.google.flatbuffers.FlatBufferBuilder
import com.google.flatbuffers.FloatVector
import com.google.flatbuffers.LongVector
import com.google.flatbuffers.StringVector
import com.google.flatbuffers.Struct
import com.google.flatbuffers.Table
import com.google.flatbuffers.UnionVector
import java.nio.ByteBuffer
import java.nio.ByteOrder
import kotlin.math.sign

/**
 * /// A Point of Interest is loosely based on the MITRE CoT (Cursor on Target) schema (https://www.mitre.org/publications/technical-papers/cursorontarget-message-router-users-guide) and provides a simple way to specify a point on the earth for a variety of purposes (tasking, targeting, etc).
 */
@Suppress("unused")
class POI_Ingest : Table() {

    fun __init(_i: Int, _bb: ByteBuffer)  {
        __reset(_i, _bb)
    }
    fun __assign(_i: Int, _bb: ByteBuffer) : POI_Ingest {
        __init(_i, _bb)
        return this
    }
    /**
     * Unique identifier of the record, auto-generated by the system.
     * Example: /// Example: POI-ID
     * Constraints: Minimum length = 1, Maximum length = 36
     */
    val id : String?
        get() {
            val o = __offset(4)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val idAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(4, 1)
    fun idInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 4, 1)
    /**
     * Classification marking of the data in IC/CAPCO Portion-marked format.
     * Example: /// Example: U
     * Constraints: Minimum length = 1, Maximum length = 128
     */
    val classificationMarking : String?
        get() {
            val o = __offset(6)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val classificationMarkingAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(6, 1)
    fun classificationMarkingInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 6, 1)
    /**
     * The purpose of this Point of Interest record (e.g., BDA, EQPT, EVENT, GEOL, HZRD, PPLI, SHOTBOX, SURVL, TGT, TSK, WTHR).
     * Example: /// Example: BDA
     * Constraints: Minimum length = 0, Maximum length = 36
     */
    val pps : String?
        get() {
            val o = __offset(8)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val ppsAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(8, 1)
    fun ppsInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 8, 1)
    /**
     * Optional mission ID related to the POI.
     * Example: /// Example: MSN-ID
     * Constraints: Minimum length = 0, Maximum length = 36
     */
    val msnid : String?
        get() {
            val o = __offset(10)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val msnidAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(10, 1)
    fun msnidInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 10, 1)
    /**
     * Priority of the  POI target object.
     * Example: /// Example: 2
     * Constraints: No constraints specified.
     */
    val pri : Int
        get() {
            val o = __offset(12)
            return if(o != 0) bb.getInt(o + bb_pos) else 0
        }
    /**
     * Optional ID of an associated track related to the POI object, if applicable. This track ID should correlate the Point of Interest to a track from the Track service.
     * Example: /// Example: TRK-ID
     * Constraints: Minimum length = 0, Maximum length = 36
     */
    val trkid : String?
        get() {
            val o = __offset(14)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val trkidAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(14, 1)
    fun trkidInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 14, 1)
    /**
     * Array of one or more unique identifiers of weather records associated with this POI. Each element in array must be 36 characters or less in length.
     * Example: /// Example: ['WEATHER-EVENT-ID1', 'WEATHER-EVENT-ID2']
     * Constraints: No constraints specified.
     */
    fun idWeatherReport(j: Int) : String? {
        val o = __offset(16)
        return if (o != 0) {
            __string(__vector(o) + j * 4)
        } else {
            null
        }
    }
    val idWeatherReportLength : Int
        get() {
            val o = __offset(16); return if (o != 0) __vector_len(o) else 0
        }
    /**
     * Identifier of the actual Point of Interest or target object, which should remain the same on subsequent POI records of the same Point of Interest.
     * Example: /// Example: POI-ID
     * Constraints: Minimum length = 1, Maximum length = 128
     */
    val poiid : String?
        get() {
            val o = __offset(18)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val poiidAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(18, 1)
    fun poiidInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 18, 1)
    /**
     * Name of the POI target object.
     * Example: /// Example: POI_NAME
     * Constraints: Minimum length = 1, Maximum length = 64
     */
    val name : String?
        get() {
            val o = __offset(20)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val nameAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(20, 1)
    fun nameInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 20, 1)
    /**
     * Description of the POI target object.
     * Example: /// Example: Description of the object
     * Constraints: Minimum length = 0, Maximum length = 128
     */
    val desc : String?
        get() {
            val o = __offset(22)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val descAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(22, 1)
    fun descInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 22, 1)
    /**
     * Specific point/object type (e.g., 82/GROUND, LIGHT_TANK, etc.).
     * Example: /// Example: LIGHT_TANK
     * Constraints: Minimum length = 0, Maximum length = 24
     */
    val spec : String?
        get() {
            val o = __offset(24)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val specAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(24, 1)
    fun specInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 24, 1)
    /**
     * Estimated identity of the point/object (e.g., FRIEND, HOSTILE, SUSPECT, ASSUMED_FRIEND, UNKNOWN, etc.).
     * Example: /// Example: FRIEND
     * Constraints: Minimum length = 0, Maximum length = 16
     */
    val ident : String?
        get() {
            val o = __offset(26)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val identAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(26, 1)
    fun identInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 26, 1)
    /**
     * POI environment type (e.g., LAND, SURFACE, SUBSURFACE, UNKNOWN, etc.).
     * Example: /// Example: SURFACE
     * Constraints: Minimum length = 0, Maximum length = 24
     */
    val env : String?
        get() {
            val o = __offset(28)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val envAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(28, 1)
    fun envInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 28, 1)
    /**
     * POI/object platform type (e.g., 14/GROUND, COMBAT_VEHICLE, etc.).
     * Example: /// Example: COMBAT_VEHICLE
     * Constraints: Minimum length = 0, Maximum length = 36
     */
    val plat : String?
        get() {
            val o = __offset(30)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val platAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(30, 1)
    fun platInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 30, 1)
    /**
     * The activity in which the POI subject is engaged. Intended as, but not constrained to, MIL-STD-6016 environment dependent activity designations. The activity can be reported as either a combination of the code and environment (e.g. 30/LAND) or as the descriptive enumeration (e.g. TRAINING), which are equivalent.
     * Example: /// Example: TRAINING
     * Constraints: Minimum length = 0, Maximum length = 32
     */
    val activity : String?
        get() {
            val o = __offset(32)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val activityAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(32, 1)
    fun activityInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 32, 1)
    /**
     * Activity/POI timestamp in ISO8601 UTC format.
     * Example: /// Example: 2020-01-01T16:00:00.123456Z
     * Constraints: No constraints specified.
     */
    val ts : String?
        get() {
            val o = __offset(34)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val tsAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(34, 1)
    fun tsInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 34, 1)
    /**
     * Start time of event validity (optional), in ISO8601 UTC format.
     * Example: /// Example: 2020-01-01T16:00:00.123456Z
     * Constraints: No constraints specified.
     */
    val start : String?
        get() {
            val o = __offset(36)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val startAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(36, 1)
    fun startInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 36, 1)
    /**
     * Stale timestamp (optional), in ISO8601 UTC format.
     * Example: /// Example: 2020-01-01T16:00:00.123456Z
     * Constraints: No constraints specified.
     */
    val stale : String?
        get() {
            val o = __offset(38)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val staleAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(38, 1)
    fun staleInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 38, 1)
    /**
     * How the event point was generated, in CoT object heirarchy notation (optional, CoT).
     * Example: /// Example: h-g-i-g-o
     * Constraints: Minimum length = 0, Maximum length = 36
     */
    val how : String?
        get() {
            val o = __offset(40)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val howAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(40, 1)
    fun howInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 40, 1)
    /**
     * Event type, in CoT object heirarchy notation (optional, CoT).
     * Example: /// Example: a-h-G
     * Constraints: Minimum length = 0, Maximum length = 36
     */
    val type : String?
        get() {
            val o = __offset(42)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val typeAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(42, 1)
    fun typeInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 42, 1)
    /**
     * WGS-84 latitude of the POI, in degrees (+N, -S), -90 to 90.
     * Example: /// Example: 45.23
     * Constraints: No constraints specified.
     */
    val lat : Double
        get() {
            val o = __offset(44)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * WGS-84 longitude of the POI, in degrees (+E, -W), -180 to 180.
     * Example: /// Example: 45.23
     * Constraints: No constraints specified.
     */
    val lon : Double
        get() {
            val o = __offset(46)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Point height above ellipsoid (WGS-84), in meters.
     * Example: /// Example: 5.23
     * Constraints: No constraints specified.
     */
    val alt : Double
        get() {
            val o = __offset(48)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Target object pointing azimuth angle, in degrees (for target with sensing or emitting capability).
     * Example: /// Example: 45.23
     * Constraints: No constraints specified.
     */
    val az : Double
        get() {
            val o = __offset(50)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Target object pointing elevation angle, in degrees (for target with sensing or emitting capability).
     * Example: /// Example: 45.23
     * Constraints: No constraints specified.
     */
    val el : Double
        get() {
            val o = __offset(52)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Height above lat/lon point, in meters (1-sigma, if representing linear error).
     * Example: /// Example: 10.23
     * Constraints: No constraints specified.
     */
    val le : Double
        get() {
            val o = __offset(54)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Radius of circular area about lat/lon point, in meters (1-sigma, if representing error).
     * Example: /// Example: 10.23
     * Constraints: No constraints specified.
     */
    val ce : Double
        get() {
            val o = __offset(56)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Elliptical area about the lat/lon point, specified as [semi-major axis (m), semi-minor axis (m), orientation (deg) off true North at POI].
     * Example: /// Example: [125.5, 85.1, 125.75]
     * Constraints: No constraints specified.
     */
    fun elle(j: Int) : String? {
        val o = __offset(58)
        return if (o != 0) {
            __string(__vector(o) + j * 4)
        } else {
            null
        }
    }
    val elleLength : Int
        get() {
            val o = __offset(58); return if (o != 0) __vector_len(o) else 0
        }
    /**
     * Contact information for assets reporting PPLI (Precise Participant Location and Identification). PPLI is a Link 16 message that is used by units to transmit complete location, identification, and limited status information.
     * Example: /// Example: Contact Info
     * Constraints: Minimum length = 0, Maximum length = 32
     */
    val cntct : String?
        get() {
            val o = __offset(60)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val cntctAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(60, 1)
    fun cntctInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 60, 1)
    /**
     * POI confidence estimate (not standardized, but typically a value between 0 and 1, with 0 indicating lowest confidence.
     * Example: /// Example: 0.5
     * Constraints: No constraints specified.
     */
    val conf : Double
        get() {
            val o = __offset(62)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * List of URLs to before/after images of this Point of Interest entity.
     * Example: /// Example: ['URL1', 'URL2']
     * Constraints: No constraints specified.
     */
    fun urls(j: Int) : String? {
        val o = __offset(64)
        return if (o != 0) {
            __string(__vector(o) + j * 4)
        } else {
            null
        }
    }
    val urlsLength : Int
        get() {
            val o = __offset(64); return if (o != 0) __vector_len(o) else 0
        }
    /**
     * Optional geographical region or polygon (lat/lon pairs) of the area surrounding the Point of Interest as projected on the ground.
     * Example: /// Example: POLYGON((67.3291113966927 26.156175339112,67.2580009640721 26.091022064271,67.1795862381682 26.6637992964562,67.2501237475598 26.730115808233,67.3291113966927 26.156175339112))
     * Constraints: No constraints specified.
     */
    val area : String?
        get() {
            val o = __offset(66)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val areaAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(66, 1)
    fun areaInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 66, 1)
    /**
     * Geographical region or polygon (lon/lat pairs), as depicted by the Well-Known Text representation of the geometry/geography, of the image as projected on the ground. WKT reference: https://www.opengeospatial.org/standards/wkt-crs. Ignored if included with a POST or PUT request that also specifies a valid 'area' field.
     * Example: /// Example: POLYGON((67.3291113966927 26.156175339112,67.2580009640721 26.091022064271,67.1795862381682 26.6637992964562,67.2501237475598 26.730115808233,67.3291113966927 26.156175339112))
     * Constraints: No constraints specified.
     */
    val atext : String?
        get() {
            val o = __offset(68)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val atextAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(68, 1)
    fun atextInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 68, 1)
    /**
     * Geographical region or polygon (lat/lon pairs), as depicted by the GeoJSON representation of the geometry/geography, of the image as projected on the ground. GeoJSON Reference: https://geojson.org/. Ignored if included with a POST or PUT request that also specifies a valid 'area' or 'atext' field.
     * Example: /// Example: {"type":"Polygon","coordinates":[[[67.3291113966927,26.156175339112],[67.2580009640721,26.091022064271],[67.1795862381682,26.6637992964562],[67.2501237475598,26.730115808233],[67.3291113966927,26.156175339112]]]}
     * Constraints: No constraints specified.
     */
    val agjson : String?
        get() {
            val o = __offset(70)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val agjsonAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(70, 1)
    fun agjsonInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 70, 1)
    /**
     * Type of region as projected on the ground.
     * Example: /// Example: Type1
     * Constraints: Minimum length = 0, Maximum length = 128
     */
    val atype : String?
        get() {
            val o = __offset(72)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val atypeAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(72, 1)
    fun atypeInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 72, 1)
    /**
     * Number of dimensions of the geometry depicted by region.
     * Example: /// Example: 3
     * Constraints: No constraints specified.
     */
    val andims : Int
        get() {
            val o = __offset(74)
            return if(o != 0) bb.getInt(o + bb_pos) else 0
        }
    /**
     * Geographical spatial_ref_sys for region.
     * Example: /// Example: 3
     * Constraints: No constraints specified.
     */
    val asrid : Int
        get() {
            val o = __offset(76)
            return if(o != 0) bb.getInt(o + bb_pos) else 0
        }
    /**
     * Time the row was created in the database.
     * Example: /// Example: 2018-01-01T16:00:00.123Z
     * Constraints: No constraints specified.
     */
    val createdAt : String?
        get() {
            val o = __offset(78)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val createdAtAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(78, 1)
    fun createdAtInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 78, 1)
    /**
     * Application user who created the row in the database.
     * Example: /// Example: some.user
     * Constraints: Minimum length = 1, Maximum length = 64
     */
    val createdBy : String?
        get() {
            val o = __offset(80)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val createdByAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(80, 1)
    fun createdByInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 80, 1)
    /**
     * The source data library from which this record was received. This could be a remote or tactical UDL or another data library. If null, the record should be assumed to have originated from the primary Enterprise UDL.
     * Example: /// Example: AXE
     * Constraints: Minimum length = 0, Maximum length = 64
     */
    val sourceDl : String?
        get() {
            val o = __offset(82)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val sourceDlAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(82, 1)
    fun sourceDlInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 82, 1)
    /**
     * Source of the data.
     * Example: /// Example: Bluestaq
     * Constraints: Minimum length = 1, Maximum length = 36
     */
    val source : String?
        get() {
            val o = __offset(84)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val sourceAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(84, 1)
    fun sourceInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 84, 1)
    /**
     * Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
     * EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
     * REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
     * SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
     * TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
     * Example: /// Example: TEST
     * Constraints: Minimum length = 1, Maximum length = 32
     */
    val dataMode : Byte
        get() {
            val o = __offset(86)
            return if(o != 0) bb.get(o + bb_pos) else 0
        }
    /**
     * Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
     * Example: /// Example: THIRD_PARTY_DATASOURCE
     * Constraints: Minimum length = 0, Maximum length = 64
     */
    val origin : String?
        get() {
            val o = __offset(88)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val originAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(88, 1)
    fun originInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 88, 1)
    /**
     * Optional array of groups used when a POI msg originates from a TAK server. Each group must be no longer than 256 characters. Groups identify a set of users targeted by the cot/poi msg.
     * Example: /// Example: ['GROUP1', 'GROUP2']
     * Constraints: No constraints specified.
     */
    fun groups(j: Int) : String? {
        val o = __offset(90)
        return if (o != 0) {
            __string(__vector(o) + j * 4)
        } else {
            null
        }
    }
    val groupsLength : Int
        get() {
            val o = __offset(90); return if (o != 0) __vector_len(o) else 0
        }
    /**
     * ID/name of the platform or entity providing the POI data.
     * Example: /// Example: PLATFORM_NAME
     * Constraints: Minimum length = 0, Maximum length = 64
     */
    val asset : String?
        get() {
            val o = __offset(92)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val assetAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(92, 1)
    fun assetInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 92, 1)
    /**
     * Optional array of provider/source specific tags for this data, where each element is no longer than 32 characters, used for implementing data owner conditional access controls to restrict access to the data. Should be left null by data providers unless conditional access controls are coordinated with the UDL team.
     * Example: /// Example: ['TAG1', 'TAG2']
     * Constraints: No constraints specified.
     */
    fun tags(j: Int) : String? {
        val o = __offset(94)
        return if (o != 0) {
            __string(__vector(o) + j * 4)
        } else {
            null
        }
    }
    val tagsLength : Int
        get() {
            val o = __offset(94); return if (o != 0) __vector_len(o) else 0
        }
    /**
     * Array of UDL record types (GROUNDIMAGE, RFOBS) that are related to the determination of this Point of Interest. See the associated 'srcIds' array for the record UUIDs, positionally corresponding to the record types in this array. The 'srcTyps' and 'srcIds' arrays must match in size.
     * Example: /// Example: ['TYPE1', 'TYPE2']
     * Constraints: No constraints specified.
     */
    fun srcTyps(j: Int) : String? {
        val o = __offset(96)
        return if (o != 0) {
            __string(__vector(o) + j * 4)
        } else {
            null
        }
    }
    val srcTypsLength : Int
        get() {
            val o = __offset(96); return if (o != 0) __vector_len(o) else 0
        }
    /**
     * Array of UUIDs of the UDL data records that are related to the determination of this Point of Interest. See the associated 'srcTyps' array for the specific types of data, positionally corresponding to the UUIDs in this array. The 'srcTyps' and 'srcIds' arrays must match in size.  See the corresponding srcTyps array element for the data type of the UUID and use the appropriate API operation to retrieve that object (e.g. /udl/rfobservation/{uuid}).
     * Example: /// Example: ['ID1', 'ID2']
     * Constraints: No constraints specified.
     */
    fun srcIds(j: Int) : String? {
        val o = __offset(98)
        return if (o != 0) {
            __string(__vector(o) + j * 4)
        } else {
            null
        }
    }
    val srcIdsLength : Int
        get() {
            val o = __offset(98); return if (o != 0) __vector_len(o) else 0
        }
    /**
     * The Basic Encyclopedia Number associated with the POI, if applicable.
     * Example: /// Example: 0427RT1030
     * Constraints: Minimum length = 0, Maximum length = 64
     */
    val beNumber : String?
        get() {
            val o = __offset(100)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val beNumberAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(100, 1)
    fun beNumberInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 100, 1)
    /**
     * The orientation of a vehicle, platform or other entity described by the POI. The orientation is defined as the pointing direction of the front/nose of the object in degrees clockwise from true North at the object point.
     * Example: /// Example: 45.23
     * Constraints: No constraints specified.
     */
    val orientation : Double
        get() {
            val o = __offset(102)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * The originating source network on which this record was created, auto-populated by the system.
     * Example: /// Example: ORIG
     * Constraints: Minimum length = 1, Maximum length = 32
     */
    val origNetwork : String?
        get() {
            val o = __offset(104)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val origNetworkAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(104, 1)
    fun origNetworkInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 104, 1)
    /**
     * Optional identifier to track a commercial or marketplace transaction executed to produce this data.
     * Example: /// Example: TRANSACTION-ID
     * Constraints: Minimum length = 0, Maximum length = 64
     */
    val transactionId : String?
        get() {
            val o = __offset(106)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val transactionIdAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(106, 1)
    fun transactionIdInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 106, 1)
    companion object {
        fun validateVersion() = Constants.FLATBUFFERS_24_3_25()
        fun getRootAsPOI_Ingest(_bb: ByteBuffer): POI_Ingest = getRootAsPOI_Ingest(_bb, POI_Ingest())
        fun getRootAsPOI_Ingest(_bb: ByteBuffer, obj: POI_Ingest): POI_Ingest {
            _bb.order(ByteOrder.LITTLE_ENDIAN)
            return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb))
        }
        fun POI_IngestBufferHasIdentifier(_bb: ByteBuffer) : Boolean = __has_identifier(_bb, "POII")
        fun createPOI_Ingest(builder: FlatBufferBuilder, idOffset: Int, classificationMarkingOffset: Int, ppsOffset: Int, msnidOffset: Int, pri: Int, trkidOffset: Int, idWeatherReportOffset: Int, poiidOffset: Int, nameOffset: Int, descOffset: Int, specOffset: Int, identOffset: Int, envOffset: Int, platOffset: Int, activityOffset: Int, tsOffset: Int, startOffset: Int, staleOffset: Int, howOffset: Int, typeOffset: Int, lat: Double, lon: Double, alt: Double, az: Double, el: Double, le: Double, ce: Double, elleOffset: Int, cntctOffset: Int, conf: Double, urlsOffset: Int, areaOffset: Int, atextOffset: Int, agjsonOffset: Int, atypeOffset: Int, andims: Int, asrid: Int, createdAtOffset: Int, createdByOffset: Int, sourceDlOffset: Int, sourceOffset: Int, dataMode: Byte, originOffset: Int, groupsOffset: Int, assetOffset: Int, tagsOffset: Int, srcTypsOffset: Int, srcIdsOffset: Int, beNumberOffset: Int, orientation: Double, origNetworkOffset: Int, transactionIdOffset: Int) : Int {
            builder.startTable(52)
            addOrientation(builder, orientation)
            addConf(builder, conf)
            addCe(builder, ce)
            addLe(builder, le)
            addEl(builder, el)
            addAz(builder, az)
            addAlt(builder, alt)
            addLon(builder, lon)
            addLat(builder, lat)
            addTransactionId(builder, transactionIdOffset)
            addOrigNetwork(builder, origNetworkOffset)
            addBeNumber(builder, beNumberOffset)
            addSrcIds(builder, srcIdsOffset)
            addSrcTyps(builder, srcTypsOffset)
            addTags(builder, tagsOffset)
            addAsset(builder, assetOffset)
            addGroups(builder, groupsOffset)
            addOrigin(builder, originOffset)
            addSource(builder, sourceOffset)
            addSourceDL(builder, sourceDlOffset)
            addCreatedBy(builder, createdByOffset)
            addCreatedAt(builder, createdAtOffset)
            addAsrid(builder, asrid)
            addAndims(builder, andims)
            addAtype(builder, atypeOffset)
            addAgjson(builder, agjsonOffset)
            addAtext(builder, atextOffset)
            addArea(builder, areaOffset)
            addUrls(builder, urlsOffset)
            addCntct(builder, cntctOffset)
            addElle(builder, elleOffset)
            addType(builder, typeOffset)
            addHow(builder, howOffset)
            addStale(builder, staleOffset)
            addStart(builder, startOffset)
            addTs(builder, tsOffset)
            addActivity(builder, activityOffset)
            addPlat(builder, platOffset)
            addEnv(builder, envOffset)
            addIdent(builder, identOffset)
            addSpec(builder, specOffset)
            addDesc(builder, descOffset)
            addName(builder, nameOffset)
            addPoiid(builder, poiidOffset)
            addIdWeatherReport(builder, idWeatherReportOffset)
            addTrkid(builder, trkidOffset)
            addPri(builder, pri)
            addMsnid(builder, msnidOffset)
            addPps(builder, ppsOffset)
            addClassificationMarking(builder, classificationMarkingOffset)
            addId(builder, idOffset)
            addDataMode(builder, dataMode)
            return endPOI_Ingest(builder)
        }
        fun startPOI_Ingest(builder: FlatBufferBuilder) = builder.startTable(52)
        fun addId(builder: FlatBufferBuilder, id: Int) = builder.addOffset(0, id, 0)
        fun addClassificationMarking(builder: FlatBufferBuilder, classificationMarking: Int) = builder.addOffset(1, classificationMarking, 0)
        fun addPps(builder: FlatBufferBuilder, pps: Int) = builder.addOffset(2, pps, 0)
        fun addMsnid(builder: FlatBufferBuilder, msnid: Int) = builder.addOffset(3, msnid, 0)
        fun addPri(builder: FlatBufferBuilder, pri: Int) = builder.addInt(4, pri, 0)
        fun addTrkid(builder: FlatBufferBuilder, trkid: Int) = builder.addOffset(5, trkid, 0)
        fun addIdWeatherReport(builder: FlatBufferBuilder, idWeatherReport: Int) = builder.addOffset(6, idWeatherReport, 0)
        fun createIdWeatherReportVector(builder: FlatBufferBuilder, data: IntArray) : Int {
            builder.startVector(4, data.size, 4)
            for (i in data.size - 1 downTo 0) {
                builder.addOffset(data[i])
            }
            return builder.endVector()
        }
        fun startIdWeatherReportVector(builder: FlatBufferBuilder, numElems: Int) = builder.startVector(4, numElems, 4)
        fun addPoiid(builder: FlatBufferBuilder, poiid: Int) = builder.addOffset(7, poiid, 0)
        fun addName(builder: FlatBufferBuilder, name: Int) = builder.addOffset(8, name, 0)
        fun addDesc(builder: FlatBufferBuilder, desc: Int) = builder.addOffset(9, desc, 0)
        fun addSpec(builder: FlatBufferBuilder, spec: Int) = builder.addOffset(10, spec, 0)
        fun addIdent(builder: FlatBufferBuilder, ident: Int) = builder.addOffset(11, ident, 0)
        fun addEnv(builder: FlatBufferBuilder, env: Int) = builder.addOffset(12, env, 0)
        fun addPlat(builder: FlatBufferBuilder, plat: Int) = builder.addOffset(13, plat, 0)
        fun addActivity(builder: FlatBufferBuilder, activity: Int) = builder.addOffset(14, activity, 0)
        fun addTs(builder: FlatBufferBuilder, ts: Int) = builder.addOffset(15, ts, 0)
        fun addStart(builder: FlatBufferBuilder, start: Int) = builder.addOffset(16, start, 0)
        fun addStale(builder: FlatBufferBuilder, stale: Int) = builder.addOffset(17, stale, 0)
        fun addHow(builder: FlatBufferBuilder, how: Int) = builder.addOffset(18, how, 0)
        fun addType(builder: FlatBufferBuilder, type: Int) = builder.addOffset(19, type, 0)
        fun addLat(builder: FlatBufferBuilder, lat: Double) = builder.addDouble(20, lat, 0.0)
        fun addLon(builder: FlatBufferBuilder, lon: Double) = builder.addDouble(21, lon, 0.0)
        fun addAlt(builder: FlatBufferBuilder, alt: Double) = builder.addDouble(22, alt, 0.0)
        fun addAz(builder: FlatBufferBuilder, az: Double) = builder.addDouble(23, az, 0.0)
        fun addEl(builder: FlatBufferBuilder, el: Double) = builder.addDouble(24, el, 0.0)
        fun addLe(builder: FlatBufferBuilder, le: Double) = builder.addDouble(25, le, 0.0)
        fun addCe(builder: FlatBufferBuilder, ce: Double) = builder.addDouble(26, ce, 0.0)
        fun addElle(builder: FlatBufferBuilder, elle: Int) = builder.addOffset(27, elle, 0)
        fun createElleVector(builder: FlatBufferBuilder, data: IntArray) : Int {
            builder.startVector(4, data.size, 4)
            for (i in data.size - 1 downTo 0) {
                builder.addOffset(data[i])
            }
            return builder.endVector()
        }
        fun startElleVector(builder: FlatBufferBuilder, numElems: Int) = builder.startVector(4, numElems, 4)
        fun addCntct(builder: FlatBufferBuilder, cntct: Int) = builder.addOffset(28, cntct, 0)
        fun addConf(builder: FlatBufferBuilder, conf: Double) = builder.addDouble(29, conf, 0.0)
        fun addUrls(builder: FlatBufferBuilder, urls: Int) = builder.addOffset(30, urls, 0)
        fun createUrlsVector(builder: FlatBufferBuilder, data: IntArray) : Int {
            builder.startVector(4, data.size, 4)
            for (i in data.size - 1 downTo 0) {
                builder.addOffset(data[i])
            }
            return builder.endVector()
        }
        fun startUrlsVector(builder: FlatBufferBuilder, numElems: Int) = builder.startVector(4, numElems, 4)
        fun addArea(builder: FlatBufferBuilder, area: Int) = builder.addOffset(31, area, 0)
        fun addAtext(builder: FlatBufferBuilder, atext: Int) = builder.addOffset(32, atext, 0)
        fun addAgjson(builder: FlatBufferBuilder, agjson: Int) = builder.addOffset(33, agjson, 0)
        fun addAtype(builder: FlatBufferBuilder, atype: Int) = builder.addOffset(34, atype, 0)
        fun addAndims(builder: FlatBufferBuilder, andims: Int) = builder.addInt(35, andims, 0)
        fun addAsrid(builder: FlatBufferBuilder, asrid: Int) = builder.addInt(36, asrid, 0)
        fun addCreatedAt(builder: FlatBufferBuilder, createdAt: Int) = builder.addOffset(37, createdAt, 0)
        fun addCreatedBy(builder: FlatBufferBuilder, createdBy: Int) = builder.addOffset(38, createdBy, 0)
        fun addSourceDL(builder: FlatBufferBuilder, sourceDl: Int) = builder.addOffset(39, sourceDl, 0)
        fun addSource(builder: FlatBufferBuilder, source: Int) = builder.addOffset(40, source, 0)
        fun addDataMode(builder: FlatBufferBuilder, dataMode: Byte) = builder.addByte(41, dataMode, 0)
        fun addOrigin(builder: FlatBufferBuilder, origin: Int) = builder.addOffset(42, origin, 0)
        fun addGroups(builder: FlatBufferBuilder, groups: Int) = builder.addOffset(43, groups, 0)
        fun createGroupsVector(builder: FlatBufferBuilder, data: IntArray) : Int {
            builder.startVector(4, data.size, 4)
            for (i in data.size - 1 downTo 0) {
                builder.addOffset(data[i])
            }
            return builder.endVector()
        }
        fun startGroupsVector(builder: FlatBufferBuilder, numElems: Int) = builder.startVector(4, numElems, 4)
        fun addAsset(builder: FlatBufferBuilder, asset: Int) = builder.addOffset(44, asset, 0)
        fun addTags(builder: FlatBufferBuilder, tags: Int) = builder.addOffset(45, tags, 0)
        fun createTagsVector(builder: FlatBufferBuilder, data: IntArray) : Int {
            builder.startVector(4, data.size, 4)
            for (i in data.size - 1 downTo 0) {
                builder.addOffset(data[i])
            }
            return builder.endVector()
        }
        fun startTagsVector(builder: FlatBufferBuilder, numElems: Int) = builder.startVector(4, numElems, 4)
        fun addSrcTyps(builder: FlatBufferBuilder, srcTyps: Int) = builder.addOffset(46, srcTyps, 0)
        fun createSrcTypsVector(builder: FlatBufferBuilder, data: IntArray) : Int {
            builder.startVector(4, data.size, 4)
            for (i in data.size - 1 downTo 0) {
                builder.addOffset(data[i])
            }
            return builder.endVector()
        }
        fun startSrcTypsVector(builder: FlatBufferBuilder, numElems: Int) = builder.startVector(4, numElems, 4)
        fun addSrcIds(builder: FlatBufferBuilder, srcIds: Int) = builder.addOffset(47, srcIds, 0)
        fun createSrcIdsVector(builder: FlatBufferBuilder, data: IntArray) : Int {
            builder.startVector(4, data.size, 4)
            for (i in data.size - 1 downTo 0) {
                builder.addOffset(data[i])
            }
            return builder.endVector()
        }
        fun startSrcIdsVector(builder: FlatBufferBuilder, numElems: Int) = builder.startVector(4, numElems, 4)
        fun addBeNumber(builder: FlatBufferBuilder, beNumber: Int) = builder.addOffset(48, beNumber, 0)
        fun addOrientation(builder: FlatBufferBuilder, orientation: Double) = builder.addDouble(49, orientation, 0.0)
        fun addOrigNetwork(builder: FlatBufferBuilder, origNetwork: Int) = builder.addOffset(50, origNetwork, 0)
        fun addTransactionId(builder: FlatBufferBuilder, transactionId: Int) = builder.addOffset(51, transactionId, 0)
        fun endPOI_Ingest(builder: FlatBufferBuilder) : Int {
            val o = builder.endTable()
            return o
        }
        fun finishPOIIngestBuffer(builder: FlatBufferBuilder, offset: Int) = builder.finish(offset, "POII")
        fun finishSizePrefixedPOI_IngestBuffer(builder: FlatBufferBuilder, offset: Int) = builder.finishSizePrefixed(offset, "POII")
    }
}
