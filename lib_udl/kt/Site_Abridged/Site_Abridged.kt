// automatically generated by the FlatBuffers compiler, do not modify

import com.google.flatbuffers.BaseVector
import com.google.flatbuffers.BooleanVector
import com.google.flatbuffers.ByteVector
import com.google.flatbuffers.Constants
import com.google.flatbuffers.DoubleVector
import com.google.flatbuffers.FlatBufferBuilder
import com.google.flatbuffers.FloatVector
import com.google.flatbuffers.LongVector
import com.google.flatbuffers.StringVector
import com.google.flatbuffers.Struct
import com.google.flatbuffers.Table
import com.google.flatbuffers.UnionVector
import java.nio.ByteBuffer
import java.nio.ByteOrder
import kotlin.math.sign

/**
 * /// Properties and characteristics of a site entity, such as an airbase, airfield, naval station, etc.
 */
@Suppress("unused")
class Site_Abridged : Table() {

    fun __init(_i: Int, _bb: ByteBuffer)  {
        __reset(_i, _bb)
    }
    fun __assign(_i: Int, _bb: ByteBuffer) : Site_Abridged {
        __init(_i, _bb)
        return this
    }
    /**
     * Unique identifier of the record, auto-generated by the system.
     * Example: /// Example: SITE-ID
     * Constraints: Minimum length = 1, Maximum length = 36
     */
    val id : String?
        get() {
            val o = __offset(4)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val idAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(4, 1)
    fun idInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 4, 1)
    /**
     * Unique identifier of the parent entity. idEntity is required for Put.
     * Example: /// Example: ENTITY-ID
     * Constraints: Minimum length = 0, Maximum length = 36
     */
    val idEntity : String?
        get() {
            val o = __offset(6)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val idEntityAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(6, 1)
    fun idEntityInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 6, 1)
    /**
     * Unique identifier of the Parent Site record associated with this Site record.
     * Example: /// Example: ID-Parent-Site
     * Constraints: Minimum length = 0, Maximum length = 36
     */
    val idParentSite : String?
        get() {
            val o = __offset(8)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val idParentSiteAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(8, 1)
    fun idParentSiteInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 8, 1)
    /**
     * Classification marking of the data in IC/CAPCO Portion-marked format.
     * Example: /// Example: U
     * Constraints: Minimum length = 1, Maximum length = 128
     */
    val classificationMarking : String?
        get() {
            val o = __offset(10)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val classificationMarkingAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(10, 1)
    fun classificationMarkingInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 10, 1)
    /**
     * Unique identifier of the Site record from the originating system.
     * Example: /// Example: ORIG-SITE-ID
     * Constraints: Minimum length = 0, Maximum length = 36
     */
    val origSiteId : String?
        get() {
            val o = __offset(12)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val origSiteIdAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(12, 1)
    fun origSiteIdInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 12, 1)
    /**
     * Unique identifier of the LZ record from the originating system.
     * Example: /// Example: ORIG-LZ-ID
     * Constraints: Minimum length = 0, Maximum length = 36
     */
    val origLzId : String?
        get() {
            val o = __offset(14)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val origLzIdAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(14, 1)
    fun origLzIdInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 14, 1)
    /**
     * Site number of a specific electronic site or its associated equipment.
     * Example: /// Example: 25200
     * Constraints: Minimum length = 0, Maximum length = 5
     */
    val pin : String?
        get() {
            val o = __offset(16)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val pinAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(16, 1)
    fun pinInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 16, 1)
    /**
     * The type of this site (AIRBASE, AIRFIELD, AIRPORT, NAVAL STATION, etc.).
     * Example: /// Example: AIRBASE
     * Constraints: Minimum length = 0, Maximum length = 16
     */
    val type : String?
        get() {
            val o = __offset(18)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val typeAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(18, 1)
    fun typeInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 18, 1)
    /**
     * The use authorization type of this site (e.g MILITARY, CIVIL, JOINT-USE, etc.).
     * Example: /// Example: MILITARY
     * Constraints: Minimum length = 0, Maximum length = 16
     */
    val usage : String?
        get() {
            val o = __offset(20)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val usageAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(20, 1)
    fun usageInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 20, 1)
    /**
     * Indicates the normal usage of the Landing Zone (LZ).  Intended as, but not constrained to MIDB Helocopter Landing Area usage value definitions:
     * AF - Airfield
     * FD - Field
     * HC - High Crop.  1 meter and over.
     * HY - Highway
     * LB - Lake Bed
     * LC - Low Crop.  0-1 meters
     * O - Other. Explain In Remarks.
     * PD - Paddy
     * PK - Park
     * PS - Pasture
     * RB - Riverbed
     * SP - Sport Field
     * U - Unknown
     * Z - Inconclusive Analysis.
     * Example: /// Example: AF
     * Constraints: Minimum length = 0, Maximum length = 3
     */
    val lzUsage : String?
        get() {
            val o = __offset(22)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val lzUsageAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(22, 1)
    fun lzUsageInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 22, 1)
    /**
     * The name of this site.
     * Example: /// Example: Site Name
     * Constraints: Minimum length = 1, Maximum length = 128
     */
    val name : String?
        get() {
            val o = __offset(24)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val nameAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(24, 1)
    fun nameInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 24, 1)
    /**
     * A mathematical model of the earth used to calculate coordinates on a map. US Forces use the World Geodetic System 1984 (WGS 84), but also use maps by allied countries with local datums. The datum must be specified to ensure accuracy of coordinates. The specific usage and enumerations contained in this field may be found in the documentation provided in the referenceDoc field.  If referenceDoc not provided, users may consult the data provider.
     * Example: /// Example: WGS
     * Constraints: Minimum length = 0, Maximum length = 3
     */
    val coordDatum : String?
        get() {
            val o = __offset(26)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val coordDatumAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(26, 1)
    fun coordDatumInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 26, 1)
    /**
     * Indicates any of the magnitudes that serve to define the position of a point by reference to a fixed figure, system of lines, etc.
     * Pos. 1-2.  Latitude Degrees     [00-90]
     * Pos. 3-4.  Latitude Minutes     [00-59]
     * Pos. 5-6.  Latitude Seconds     [00-59]
     * Pos. 7-9.  Latitude Thousandths Of Seconds   [000-999]  
     * Pos. 10. Latitude Hemisphere       [NS] 
     * Pos. 11-13. Longitude Degrees     [00-180] 
     * Pos. 14-15. Longitude Minutes     [00-59] 
     * Pos. 16-17. Longitude Seconds     [00-59] 
     * Pos. 18-20. Longitude Thousandths Of Seconds      [000-999]
     * Pos. 21. Longitude Hemisphere     [EW]
     * Pos. 1-21.  Unknown Latitude and Unknown Longitude [000000000U000000000U].
     * Example: /// Example: 340000000N0430000000E
     * Constraints: Minimum length = 0, Maximum length = 21
     */
    val coord : String?
        get() {
            val o = __offset(28)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val coordAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(28, 1)
    fun coordInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 28, 1)
    /**
     * Indicates the plus or minus error assessed against the method used to derive the coordinate.
     * Example: /// Example: 12.345
     * Constraints: No constraints specified.
     */
    val coordDerivAcc : Double
        get() {
            val o = __offset(30)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * The O-suffix associated with this site. The O-suffix is a five-character alpha/numeric system used to identify a site, or demographic area, within an installation. The Installation Basic Encyclopedia (beNumber), in conjunction with the O-suffix, uniquely identifies the Site. The Installation beNumber and oSuffix are also used in conjunction with the catCode to classify the function or purpose of the facility.
     * Example: /// Example: BB002
     * Constraints: Minimum length = 0, Maximum length = 5
     */
    val osuffix : String?
        get() {
            val o = __offset(32)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val osuffixAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(32, 1)
    fun osuffixInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 32, 1)
    /**
     * The International Air Transport Association (IATA) code of this site, if applicable.
     * Example: /// Example: AAA
     * Constraints: Minimum length = 0, Maximum length = 3
     */
    val iata : String?
        get() {
            val o = __offset(34)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val iataAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(34, 1)
    fun iataInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 34, 1)
    /**
     * The International Civil Aviation Organization (ICAO) code of this site, if applicable.
     * Example: /// Example: ICA1
     * Constraints: Minimum length = 0, Maximum length = 4
     */
    val icao : String?
        get() {
            val o = __offset(36)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val icaoAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(36, 1)
    fun icaoInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 36, 1)
    /**
     * The Federal Aviation Administration (FAA) Location ID of this site, if applicable.
     * Example: /// Example: FAA1
     * Constraints: Minimum length = 0, Maximum length = 5
     */
    val faa : String?
        get() {
            val o = __offset(38)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val faaAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(38, 1)
    fun faaInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 38, 1)
    /**
     * Air Defense District (ADD) or Air Defense Area (ADA) in which the geographic coordinates reside.
     * Example: /// Example: AL006
     * Constraints: Minimum length = 0, Maximum length = 5
     */
    val airDefArea : String?
        get() {
            val o = __offset(40)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val airDefAreaAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(40, 1)
    fun airDefAreaInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 40, 1)
    /**
     * Universal Transverse Mercator (UTM) grid coordinates.
     * Pos. 1-2, UTM Zone Column   [01-60
     * Pos. 3, UTM Zone Row   [C-HJ-NP-X]
     * Pos. 4, UTM False Easting   [0-9]
     * Pos. 5-9, UTM Meter Easting    [0-9][0-9][0-9][0-9][0-9]
     * Pos. 10-11, UTM False Northing    [0-9][0-9]
     * Pos. 12-16, UTM Meter Northing    [0-9][0-9][0-9][0-9][0-9].
     * Example: /// Example: 19P4390691376966
     * Constraints: Minimum length = 0, Maximum length = 16
     */
    val utm : String?
        get() {
            val o = __offset(42)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val utmAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(42, 1)
    fun utmInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 42, 1)
    /**
     * Indicates the grid system used in the development of the milGrid coordinates. Values are:
     * UPS - Universal Polar System
     * UTM - Universal Transverse Mercator.
     * Example: /// Example: UTM
     * Constraints: Minimum length = 0, Maximum length = 3
     */
    val milGridSys : String?
        get() {
            val o = __offset(44)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val milGridSysAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(44, 1)
    fun milGridSysInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 44, 1)
    /**
     * The Military Grid Reference System is the geocoordinate standard used by NATO militaries for locating points on Earth. The MGRS is derived from the Universal Transverse Mercator (UTM) grid system and the Universal Polar Stereographic (UPS) grid system, but uses a different labeling convention. The MGRS is used as geocode for the entire Earth. Example of an milgrid coordinate, or grid reference, would be 4QFJ12345678, which consists of three parts:
     * 4Q (grid zone designator, GZD)
     * FJ (the 100,000-meter square identifier)
     * 12345678 (numerical location; easting is 1234 and northing is 5678, in this case specifying a location with 10 m resolution).
     * Example: /// Example: 4QFJ12345678
     * Constraints: Minimum length = 0, Maximum length = 15
     */
    val milGrid : String?
        get() {
            val o = __offset(46)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val milGridAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(46, 1)
    fun milGridInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 46, 1)
    /**
     * The category code that represents the associated site purpose within the target system.
     * Example: /// Example: 20345
     * Constraints: Minimum length = 0, Maximum length = 16
     */
    val catCode : String?
        get() {
            val o = __offset(48)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val catCodeAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(48, 1)
    fun catCodeInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 48, 1)
    /**
     * Textual Description of Site catCode.
     * Example: /// Example: Radar Facility, General
     * Constraints: Minimum length = 0, Maximum length = 148
     */
    val catText : String?
        get() {
            val o = __offset(50)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val catTextAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(50, 1)
    fun catTextInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 50, 1)
    /**
     * World Aeronautical Chart identifier for the area in which a designated place is located.
     * Example: /// Example: 0427
     * Constraints: Minimum length = 0, Maximum length = 4
     */
    val wac : String?
        get() {
            val o = __offset(52)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val wacAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(52, 1)
    fun wacInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 52, 1)
    /**
     * Political subdivision in which the geographic coordinates reside. The specific usage and enumerations contained in this field may be found in the documentation provided in the referenceDoc field. If referenceDoc not provided, users may consult the data provider.
     * Example: /// Example: IZO7
     * Constraints: Minimum length = 0, Maximum length = 7
     */
    val polSubdiv : String?
        get() {
            val o = __offset(54)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val polSubdivAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(54, 1)
    fun polSubdivInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 54, 1)
    /**
     * Geographical region code used by the Requirements Management System (RMS) as specified by National Geospatial Agency (NGA) in Flight Information Publications (FIPS) 10-4, Appendix 3 - Country Code and Geographic Region Codes. The specific usage and enumerations contained in this field may be found in the documentation provided in the referenceDoc field. If referenceDoc not provided, users may consult the data provider.
     * Example: /// Example: E2
     * Constraints: Minimum length = 0, Maximum length = 2
     */
    val geoArea : String?
        get() {
            val o = __offset(56)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val geoAreaAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(56, 1)
    fun geoAreaInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 56, 1)
    /**
     * The distance between Mean Sea Level and a referenced ellipsoid, in meters.
     * Example: /// Example: 12.34
     * Constraints: No constraints specified.
     */
    val geoidalMslSep : Double
        get() {
            val o = __offset(58)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * The DoD Standard Country Code designator for the country or political entity to which the site owes its allegiance. This field will be set to "OTHR" if the source value does not match a UDL Country code value (ISO-3166-ALPHA-2).
     * Example: /// Example: OTHR
     * Constraints: Minimum length = 0, Maximum length = 4
     */
    val allegiance : String?
        get() {
            val o = __offset(60)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val allegianceAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(60, 1)
    fun allegianceInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 60, 1)
    /**
     * Specifies an alternate allegiance code if the data provider code is not part of an official Country Code standard such as ISO-3166 or FIPS. This field will be set to the value provided by the source and should be used for all Queries specifying allegiance.
     * Example: /// Example: HL
     * Constraints: Minimum length = 0, Maximum length = 4
     */
    val altAllegiance : String?
        get() {
            val o = __offset(62)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val altAllegianceAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(62, 1)
    fun altAllegianceInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 62, 1)
    /**
     * Indicates the importance of the entity to the OES or MIR system.  This data element is restricted to update by DIA (DB-4). Valid values are:
     * 0 - Does not meet criteria above
     * 1 - Primary importance to system
     * 2 - Secondary importance to system
     * 3 - Tertiary importance to system
     * O - Other. Explain in Remarks.
     * Example: /// Example: 1
     * Constraints: Minimum length = 0, Maximum length = 1
     */
    val classRating : String?
        get() {
            val o = __offset(64)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val classRatingAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(64, 1)
    fun classRatingInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 64, 1)
    /**
     * Functional Production Area (FPA) under the Shared Production Program (SPP). Producers are defined per country per FPA. The specific usage and enumerations contained in this field may be found in the documentation provided in the referenceDoc field. If referenceDoc not provided, users may consult the data provider.
     * Example: /// Example: EOB
     * Constraints: Minimum length = 0, Maximum length = 5
     */
    val fpa : String?
        get() {
            val o = __offset(66)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val fpaAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(66, 1)
    fun fpaInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 66, 1)
    /**
     * The Basic Encyclopedia Number associated with the Site. Uniquely identifies the installation of a site. The beNumber is generated based on the value input for the COORD to determine the appropriate World Aeronautical Chart (WAC) location identifier, the system assigned record originator and a one-up-number.
     * Example: /// Example: 0427RT1030
     * Constraints: Minimum length = 0, Maximum length = 10
     */
    val beNumber : String?
        get() {
            val o = __offset(68)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val beNumberAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(68, 1)
    fun beNumberInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 68, 1)
    /**
     * The number of runways at the site, if applicable.
     * Example: /// Example: 5
     * Constraints: No constraints specified.
     */
    val runways : Int
        get() {
            val o = __offset(70)
            return if(o != 0) bb.getInt(o + bb_pos) else 0
        }
    /**
     * The length of the longest runway at this site, if applicable, in meters.
     * Example: /// Example: 1000
     * Constraints: No constraints specified.
     */
    val maxRunwayLength : Int
        get() {
            val o = __offset(72)
            return if(o != 0) bb.getInt(o + bb_pos) else 0
        }
    /**
     * The physical manner of being or state of existence of the entity. A physical condition that must be considered in the determining of a course of action. The specific usage and enumerations contained in this field may be found in the documentation provided in the referenceDoc field. If referenceDoc not provided, users may consult the data provider.
     * Example: /// Example: RDY
     * Constraints: Minimum length = 0, Maximum length = 4
     */
    val condition : String?
        get() {
            val o = __offset(74)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val conditionAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(74, 1)
    fun conditionInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 74, 1)
    /**
     * Availability of the entity relative to its condition. Indicates the reason the entity is not fully operational. The specific usage and enumerations contained in this field may be found in the documentation provided in the referenceDoc field. If referenceDoc not provided, users may consult the data provider.
     * Example: /// Example: A
     * Constraints: Minimum length = 0, Maximum length = 4
     */
    val conditionAvail : String?
        get() {
            val o = __offset(76)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val conditionAvailAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(76, 1)
    fun conditionAvailInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 76, 1)
    /**
     * The Degree to which an entity is ready to perform the overall operational mission(s) for which it was organized and equipped. The specific usage and enumerations contained in this field may be found in the documentation provided in the referenceDoc field. If referenceDoc not provided, users may consult the data provider.
     * Example: /// Example: OPR
     * Constraints: Minimum length = 0, Maximum length = 3
     */
    val operStatus : String?
        get() {
            val o = __offset(78)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val operStatusAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(78, 1)
    fun operStatusInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 78, 1)
    /**
     * Indicates the amount or degree of deviation from the horizontal represented as a percent.  Grade is determined by the formula: vertical distance (VD) divided by horizontal distance (HD) times 100. VD is the difference between the highest and  lowest elevation within the entity. HD is the linear distance between the highest and lowest elevation.
     * Example: /// Example: 5
     * Constraints: No constraints specified.
     */
    val grade : Int
        get() {
            val o = __offset(80)
            return if(o != 0) bb.getInt(o + bb_pos) else 0
        }
    /**
     * Indicates the function or mission of an entity, which that entity may or may not be engaged in at any particular time. Typically refers to a unit, organization, or installation/site performing a specific function or mission such as a redistribution center or naval shipyard. The specific usage and enumerations contained in this field may be found in the documentation provided in the referenceDoc field. If referenceDoc not provided, users may consult the data provider.
     * Example: /// Example: OCC
     * Constraints: Minimum length = 0, Maximum length = 3
     */
    val activity : String?
        get() {
            val o = __offset(82)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val activityAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(82, 1)
    fun activityInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 82, 1)
    /**
     * Principal operational function being performed. The specific usage and enumerations contained in this field may be found in the documentation provided in the referenceDoc field. If referenceDoc not provided, users may consult the data provider.
     * Example: /// Example: JG
     * Constraints: Minimum length = 0, Maximum length = 4
     */
    val functPrimary : String?
        get() {
            val o = __offset(84)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val functPrimaryAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(84, 1)
    fun functPrimaryInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 84, 1)
    /**
     * Indicates the principal type of mission that an entity is organized and equipped to perform. The specific usage and enumerations contained in this field may be found in the documentation provided in the referenceDoc field. If referenceDoc not provided, users may consult the data provider.
     * Example: /// Example: AA
     * Constraints: Minimum length = 0, Maximum length = 4
     */
    val msnPrimary : String?
        get() {
            val o = __offset(86)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val msnPrimaryAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(86, 1)
    fun msnPrimaryInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 86, 1)
    /**
     * Indicates the principal specialty type of mission that an entity is organized and equipped to perform. The specific usage and enumerations contained in this field may be found in the documentation provided in the referenceDoc field.  If referenceDoc not provided, users may consult the data provider.
     * Example: /// Example: AB
     * Constraints: Minimum length = 0, Maximum length = 4
     */
    val msnPrimarySpec : String?
        get() {
            val o = __offset(88)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val msnPrimarySpecAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(88, 1)
    fun msnPrimarySpecInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 88, 1)
    /**
     * A sites ability to conduct nuclear warfare. Valid Values are:
     * A - Nuclear Ammo Or Warheads Available
     * N - No Nuclear Offense
     * O - Other. Explain in Remarks
     * U - Unknown
     * W - Nuclear Weapons Available
     * Y - Nuclear Warfare Offensive Capability
     * Z - Inconclusive Analysis.
     * Example: /// Example: A
     * Constraints: Minimum length = 0, Maximum length = 1
     */
    val nucCap : String?
        get() {
            val o = __offset(90)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val nucCapAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(90, 1)
    fun nucCapInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 90, 1)
    /**
     * Estimated identity of the Site (ASSUMED FRIEND, FRIEND, HOSTILE, FAKER, JOKER, NEUTRAL, PENDING, SUSPECT, UNKNOWN): 
     * ASSUMED FRIEND: Track assumed to be a friend due to the object characteristics, behavior, and/or origin.
     * FRIEND: Track object supporting friendly forces and belonging to a declared friendly nation or entity.
     * HOSTILE: Track object belonging to an opposing nation, party, group, or entity deemed to contribute to a threat to friendly forces or their mission due to its behavior, characteristics, nationality, or origin.
     * FAKER: Friendly track, object, or entity acting as an exercise hostile.
     * JOKER: Friendly track, object, or entity acting as an exercise suspect.
     * NEUTRAL: Track object whose characteristics, behavior, nationality, and/or origin indicate that it is neither supporting nor opposing friendly forces or their mission.
     * PENDING: Track object which has not been evaluated.
     * SUSPECT: Track object deemed potentially hostile due to the object characteristics, behavior, nationality, and/or origin.
     * UNKNOWN: Track object which has been evaluated and does not meet criteria for any standard identity.
     * Example: /// Example: FRIEND
     * Constraints: Minimum length = 0, Maximum length = 32
     */
    val ident : String?
        get() {
            val o = __offset(92)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val identAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(92, 1)
    fun identInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 92, 1)
    /**
     * Ground elevation of the geographic coordinates referenced to (above or below) Mean Sea Level (MSL) vertical datum, in meters.
     * Example: /// Example: 123.45
     * Constraints: No constraints specified.
     */
    val elevMsl : Double
        get() {
            val o = __offset(94)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Indicates the confidence level expressed as a percent that a specific geometric spatial element, ELEVATION_MSL linear accuracy, has been vertically positioned to within a specified vertical accuracy.
     * Example: /// Example: 50
     * Constraints: No constraints specified.
     */
    val elevMslConfLvl : Int
        get() {
            val o = __offset(96)
            return if(o != 0) bb.getInt(o + bb_pos) else 0
        }
    /**
     * Indicates the plus or minus error assessed against the method used to derive the elevation.
     * Example: /// Example: 12.34
     * Constraints: No constraints specified.
     */
    val elevMslDerivAcc : Double
        get() {
            val o = __offset(98)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Maximum expected height of the vegetation in the Landing Zone (LZ), in meters.
     * Example: /// Example: 3
     * Constraints: No constraints specified.
     */
    val vegHt : Double
        get() {
            val o = __offset(100)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * The predominant vegetation found in the Landing Zone (LZ). The specific usage and enumerations contained in this field may be found in the documentation provided in the referenceDoc field. If referenceDoc not provided, users may consult the data provider.
     * Example: /// Example: FR
     * Constraints: Minimum length = 0, Maximum length = 4
     */
    val vegType : String?
        get() {
            val o = __offset(102)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val vegTypeAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(102, 1)
    fun vegTypeInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 102, 1)
    /**
     * Indicates whether the facility is in or outside of a populated area. True, the facility is in or within 5 NM of a populated area. False, the facility is outside a populated area.
     * Example: /// Example: True
     * Constraints: No constraints specified.
     */
    val popArea : Boolean
        get() {
            val o = __offset(104)
            return if(o != 0) 0.toByte() != bb.get(o + bb_pos) else false
        }
    /**
     * Indicates the distance to nearest populated area (over 1,000 people) in nautical miles.
     * Example: /// Example: 12.345
     * Constraints: No constraints specified.
     */
    val popAreaProx : Double
        get() {
            val o = __offset(106)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Optional notes/comments for the site.
     * Example: /// Example: Example Notes
     * Constraints: Minimum length = 0, Maximum length = 1024
     */
    val notes : String?
        get() {
            val o = __offset(108)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val notesAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(108, 1)
    fun notesInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 108, 1)
    /**
     * Responsible Producer - Organization that is responsible for the maintenance of the record.
     * Example: /// Example: RT
     * Constraints: Minimum length = 0, Maximum length = 4
     */
    val resProd : String?
        get() {
            val o = __offset(110)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val resProdAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(110, 1)
    fun resProdInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 110, 1)
    /**
     * Eval represents the Intelligence Confidence Level or the Reliability/degree of confidence that the analyst has assigned to the data within this record. The numerical range is from 1 to 9 with 1 representing the highest confidence level.
     * Example: /// Example: 7
     * Constraints: No constraints specified.
     */
    val eval : Int
        get() {
            val o = __offset(112)
            return if(o != 0) bb.getInt(o + bb_pos) else 0
        }
    /**
     * Date on which the data in the record was last reviewed by the responsible analyst for accuracy and currency, in ISO8601 UTC format. This date cannot be greater than the current date.
     * Example: /// Example: 2008-06-10
     * Constraints: No constraints specified.
     */
    val reviewDate : String?
        get() {
            val o = __offset(114)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val reviewDateAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(114, 1)
    fun reviewDateInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 114, 1)
    /**
     * Validity and currency of the data in the record to be used in conjunction with the other elements in the record as defined by SOPs.
     * A - Active
     * I - Inactive
     * K - Acknowledged
     * L - Local
     * Q - A nominated (NOM) or Data Change Request (DCR) record
     * R - Production reduced by CMD decision
     * W - Working Record.
     * Example: /// Example: A
     * Constraints: Minimum length = 0, Maximum length = 1
     */
    val recStatus : String?
        get() {
            val o = __offset(116)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val recStatusAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(116, 1)
    fun recStatusInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 116, 1)
    /**
     * A standard scheme for symbol coding enabling the transfer, display and use of symbols and graphics among information systems, as per MIL-STD 2525B, and supported by the element ident.
     * Example: /// Example: SOGPU----------
     * Constraints: Minimum length = 0, Maximum length = 15
     */
    val symCode : String?
        get() {
            val o = __offset(118)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val symCodeAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(118, 1)
    fun symCodeInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 118, 1)
    /**
     * The reference documentation that specifies the usage and enumerations contained in this record. If referenceDoc not provided, users may consult the data provider.
     * Example: /// Example: Provider Reference Documentation
     * Constraints: Minimum length = 0, Maximum length = 128
     */
    val referenceDoc : String?
        get() {
            val o = __offset(120)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val referenceDocAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(120, 1)
    fun referenceDocInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 120, 1)
    /**
     * Time the row was created in the database, auto-populated by the system.
     * Example: /// Example: 2018-01-01T16:00:00.123Z
     * Constraints: No constraints specified.
     */
    val createdAt : String?
        get() {
            val o = __offset(122)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val createdAtAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(122, 1)
    fun createdAtInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 122, 1)
    /**
     * Application user who created the row in the database, auto-populated by the system.
     * Example: /// Example: some.user
     * Constraints: Minimum length = 1, Maximum length = 64
     */
    val createdBy : String?
        get() {
            val o = __offset(124)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val createdByAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(124, 1)
    fun createdByInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 124, 1)
    /**
     * Source of the data.
     * Example: /// Example: Bluestaq
     * Constraints: Minimum length = 1, Maximum length = 64
     */
    val source : String?
        get() {
            val o = __offset(126)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val sourceAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(126, 1)
    fun sourceInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 126, 1)
    /**
     * Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
     * Example: /// Example: THIRD_PARTY_DATASOURCE
     * Constraints: Minimum length = 0, Maximum length = 64
     */
    val origin : String?
        get() {
            val o = __offset(128)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val originAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(128, 1)
    fun originInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 128, 1)
    /**
     * The originating source network on which this record was created, auto-populated by the system.
     * Example: /// Example: ORIG
     * Constraints: Minimum length = 1, Maximum length = 32
     */
    val origNetwork : String?
        get() {
            val o = __offset(130)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val origNetworkAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(130, 1)
    fun origNetworkInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 130, 1)
    /**
     * Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
     * EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
     * REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
     * SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
     * TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
     * Example: /// Example: TEST
     * Constraints: Minimum length = 1, Maximum length = 32
     */
    val dataMode : Byte
        get() {
            val o = __offset(132)
            return if(o != 0) bb.get(o + bb_pos) else 0
        }
    companion object {
        fun validateVersion() = Constants.FLATBUFFERS_24_3_25()
        fun getRootAsSite_Abridged(_bb: ByteBuffer): Site_Abridged = getRootAsSite_Abridged(_bb, Site_Abridged())
        fun getRootAsSite_Abridged(_bb: ByteBuffer, obj: Site_Abridged): Site_Abridged {
            _bb.order(ByteOrder.LITTLE_ENDIAN)
            return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb))
        }
        fun Site_AbridgedBufferHasIdentifier(_bb: ByteBuffer) : Boolean = __has_identifier(_bb, "SITE")
        fun createSite_Abridged(builder: FlatBufferBuilder, idOffset: Int, idEntityOffset: Int, idParentSiteOffset: Int, classificationMarkingOffset: Int, origSiteIdOffset: Int, origLzIdOffset: Int, pinOffset: Int, typeOffset: Int, usageOffset: Int, lzUsageOffset: Int, nameOffset: Int, coordDatumOffset: Int, coordOffset: Int, coordDerivAcc: Double, osuffixOffset: Int, iataOffset: Int, icaoOffset: Int, faaOffset: Int, airDefAreaOffset: Int, utmOffset: Int, milGridSysOffset: Int, milGridOffset: Int, catCodeOffset: Int, catTextOffset: Int, wacOffset: Int, polSubdivOffset: Int, geoAreaOffset: Int, geoidalMslSep: Double, allegianceOffset: Int, altAllegianceOffset: Int, classRatingOffset: Int, fpaOffset: Int, beNumberOffset: Int, runways: Int, maxRunwayLength: Int, conditionOffset: Int, conditionAvailOffset: Int, operStatusOffset: Int, grade: Int, activityOffset: Int, functPrimaryOffset: Int, msnPrimaryOffset: Int, msnPrimarySpecOffset: Int, nucCapOffset: Int, identOffset: Int, elevMsl: Double, elevMslConfLvl: Int, elevMslDerivAcc: Double, vegHt: Double, vegTypeOffset: Int, popArea: Boolean, popAreaProx: Double, notesOffset: Int, resProdOffset: Int, eval: Int, reviewDateOffset: Int, recStatusOffset: Int, symCodeOffset: Int, referenceDocOffset: Int, createdAtOffset: Int, createdByOffset: Int, sourceOffset: Int, originOffset: Int, origNetworkOffset: Int, dataMode: Byte) : Int {
            builder.startTable(65)
            addPopAreaProx(builder, popAreaProx)
            addVegHt(builder, vegHt)
            addElevMslDerivAcc(builder, elevMslDerivAcc)
            addElevMsl(builder, elevMsl)
            addGeoidalMslSep(builder, geoidalMslSep)
            addCoordDerivAcc(builder, coordDerivAcc)
            addOrigNetwork(builder, origNetworkOffset)
            addOrigin(builder, originOffset)
            addSource(builder, sourceOffset)
            addCreatedBy(builder, createdByOffset)
            addCreatedAt(builder, createdAtOffset)
            addReferenceDoc(builder, referenceDocOffset)
            addSymCode(builder, symCodeOffset)
            addRecStatus(builder, recStatusOffset)
            addReviewDate(builder, reviewDateOffset)
            addEval(builder, eval)
            addResProd(builder, resProdOffset)
            addNotes(builder, notesOffset)
            addVegType(builder, vegTypeOffset)
            addElevMslConfLvl(builder, elevMslConfLvl)
            addIdent(builder, identOffset)
            addNucCap(builder, nucCapOffset)
            addMsnPrimarySpec(builder, msnPrimarySpecOffset)
            addMsnPrimary(builder, msnPrimaryOffset)
            addFunctPrimary(builder, functPrimaryOffset)
            addActivity(builder, activityOffset)
            addGrade(builder, grade)
            addOperStatus(builder, operStatusOffset)
            addConditionAvail(builder, conditionAvailOffset)
            addCondition(builder, conditionOffset)
            addMaxRunwayLength(builder, maxRunwayLength)
            addRunways(builder, runways)
            addBeNumber(builder, beNumberOffset)
            addFpa(builder, fpaOffset)
            addClassRating(builder, classRatingOffset)
            addAltAllegiance(builder, altAllegianceOffset)
            addAllegiance(builder, allegianceOffset)
            addGeoArea(builder, geoAreaOffset)
            addPolSubdiv(builder, polSubdivOffset)
            addWac(builder, wacOffset)
            addCatText(builder, catTextOffset)
            addCatCode(builder, catCodeOffset)
            addMilGrid(builder, milGridOffset)
            addMilGridSys(builder, milGridSysOffset)
            addUtm(builder, utmOffset)
            addAirDefArea(builder, airDefAreaOffset)
            addFaa(builder, faaOffset)
            addIcao(builder, icaoOffset)
            addIata(builder, iataOffset)
            addOsuffix(builder, osuffixOffset)
            addCoord(builder, coordOffset)
            addCoordDatum(builder, coordDatumOffset)
            addName(builder, nameOffset)
            addLzUsage(builder, lzUsageOffset)
            addUsage(builder, usageOffset)
            addType(builder, typeOffset)
            addPin(builder, pinOffset)
            addOrigLzId(builder, origLzIdOffset)
            addOrigSiteID(builder, origSiteIdOffset)
            addClassificationMarking(builder, classificationMarkingOffset)
            addIdParentSite(builder, idParentSiteOffset)
            addIdEntity(builder, idEntityOffset)
            addId(builder, idOffset)
            addDataMode(builder, dataMode)
            addPopArea(builder, popArea)
            return endSite_Abridged(builder)
        }
        fun startSite_Abridged(builder: FlatBufferBuilder) = builder.startTable(65)
        fun addId(builder: FlatBufferBuilder, id: Int) = builder.addOffset(0, id, 0)
        fun addIdEntity(builder: FlatBufferBuilder, idEntity: Int) = builder.addOffset(1, idEntity, 0)
        fun addIdParentSite(builder: FlatBufferBuilder, idParentSite: Int) = builder.addOffset(2, idParentSite, 0)
        fun addClassificationMarking(builder: FlatBufferBuilder, classificationMarking: Int) = builder.addOffset(3, classificationMarking, 0)
        fun addOrigSiteID(builder: FlatBufferBuilder, origSiteId: Int) = builder.addOffset(4, origSiteId, 0)
        fun addOrigLzId(builder: FlatBufferBuilder, origLzId: Int) = builder.addOffset(5, origLzId, 0)
        fun addPin(builder: FlatBufferBuilder, pin: Int) = builder.addOffset(6, pin, 0)
        fun addType(builder: FlatBufferBuilder, type: Int) = builder.addOffset(7, type, 0)
        fun addUsage(builder: FlatBufferBuilder, usage: Int) = builder.addOffset(8, usage, 0)
        fun addLzUsage(builder: FlatBufferBuilder, lzUsage: Int) = builder.addOffset(9, lzUsage, 0)
        fun addName(builder: FlatBufferBuilder, name: Int) = builder.addOffset(10, name, 0)
        fun addCoordDatum(builder: FlatBufferBuilder, coordDatum: Int) = builder.addOffset(11, coordDatum, 0)
        fun addCoord(builder: FlatBufferBuilder, coord: Int) = builder.addOffset(12, coord, 0)
        fun addCoordDerivAcc(builder: FlatBufferBuilder, coordDerivAcc: Double) = builder.addDouble(13, coordDerivAcc, 0.0)
        fun addOsuffix(builder: FlatBufferBuilder, osuffix: Int) = builder.addOffset(14, osuffix, 0)
        fun addIata(builder: FlatBufferBuilder, iata: Int) = builder.addOffset(15, iata, 0)
        fun addIcao(builder: FlatBufferBuilder, icao: Int) = builder.addOffset(16, icao, 0)
        fun addFaa(builder: FlatBufferBuilder, faa: Int) = builder.addOffset(17, faa, 0)
        fun addAirDefArea(builder: FlatBufferBuilder, airDefArea: Int) = builder.addOffset(18, airDefArea, 0)
        fun addUtm(builder: FlatBufferBuilder, utm: Int) = builder.addOffset(19, utm, 0)
        fun addMilGridSys(builder: FlatBufferBuilder, milGridSys: Int) = builder.addOffset(20, milGridSys, 0)
        fun addMilGrid(builder: FlatBufferBuilder, milGrid: Int) = builder.addOffset(21, milGrid, 0)
        fun addCatCode(builder: FlatBufferBuilder, catCode: Int) = builder.addOffset(22, catCode, 0)
        fun addCatText(builder: FlatBufferBuilder, catText: Int) = builder.addOffset(23, catText, 0)
        fun addWac(builder: FlatBufferBuilder, wac: Int) = builder.addOffset(24, wac, 0)
        fun addPolSubdiv(builder: FlatBufferBuilder, polSubdiv: Int) = builder.addOffset(25, polSubdiv, 0)
        fun addGeoArea(builder: FlatBufferBuilder, geoArea: Int) = builder.addOffset(26, geoArea, 0)
        fun addGeoidalMslSep(builder: FlatBufferBuilder, geoidalMslSep: Double) = builder.addDouble(27, geoidalMslSep, 0.0)
        fun addAllegiance(builder: FlatBufferBuilder, allegiance: Int) = builder.addOffset(28, allegiance, 0)
        fun addAltAllegiance(builder: FlatBufferBuilder, altAllegiance: Int) = builder.addOffset(29, altAllegiance, 0)
        fun addClassRating(builder: FlatBufferBuilder, classRating: Int) = builder.addOffset(30, classRating, 0)
        fun addFpa(builder: FlatBufferBuilder, fpa: Int) = builder.addOffset(31, fpa, 0)
        fun addBeNumber(builder: FlatBufferBuilder, beNumber: Int) = builder.addOffset(32, beNumber, 0)
        fun addRunways(builder: FlatBufferBuilder, runways: Int) = builder.addInt(33, runways, 0)
        fun addMaxRunwayLength(builder: FlatBufferBuilder, maxRunwayLength: Int) = builder.addInt(34, maxRunwayLength, 0)
        fun addCondition(builder: FlatBufferBuilder, condition: Int) = builder.addOffset(35, condition, 0)
        fun addConditionAvail(builder: FlatBufferBuilder, conditionAvail: Int) = builder.addOffset(36, conditionAvail, 0)
        fun addOperStatus(builder: FlatBufferBuilder, operStatus: Int) = builder.addOffset(37, operStatus, 0)
        fun addGrade(builder: FlatBufferBuilder, grade: Int) = builder.addInt(38, grade, 0)
        fun addActivity(builder: FlatBufferBuilder, activity: Int) = builder.addOffset(39, activity, 0)
        fun addFunctPrimary(builder: FlatBufferBuilder, functPrimary: Int) = builder.addOffset(40, functPrimary, 0)
        fun addMsnPrimary(builder: FlatBufferBuilder, msnPrimary: Int) = builder.addOffset(41, msnPrimary, 0)
        fun addMsnPrimarySpec(builder: FlatBufferBuilder, msnPrimarySpec: Int) = builder.addOffset(42, msnPrimarySpec, 0)
        fun addNucCap(builder: FlatBufferBuilder, nucCap: Int) = builder.addOffset(43, nucCap, 0)
        fun addIdent(builder: FlatBufferBuilder, ident: Int) = builder.addOffset(44, ident, 0)
        fun addElevMsl(builder: FlatBufferBuilder, elevMsl: Double) = builder.addDouble(45, elevMsl, 0.0)
        fun addElevMslConfLvl(builder: FlatBufferBuilder, elevMslConfLvl: Int) = builder.addInt(46, elevMslConfLvl, 0)
        fun addElevMslDerivAcc(builder: FlatBufferBuilder, elevMslDerivAcc: Double) = builder.addDouble(47, elevMslDerivAcc, 0.0)
        fun addVegHt(builder: FlatBufferBuilder, vegHt: Double) = builder.addDouble(48, vegHt, 0.0)
        fun addVegType(builder: FlatBufferBuilder, vegType: Int) = builder.addOffset(49, vegType, 0)
        fun addPopArea(builder: FlatBufferBuilder, popArea: Boolean) = builder.addBoolean(50, popArea, false)
        fun addPopAreaProx(builder: FlatBufferBuilder, popAreaProx: Double) = builder.addDouble(51, popAreaProx, 0.0)
        fun addNotes(builder: FlatBufferBuilder, notes: Int) = builder.addOffset(52, notes, 0)
        fun addResProd(builder: FlatBufferBuilder, resProd: Int) = builder.addOffset(53, resProd, 0)
        fun addEval(builder: FlatBufferBuilder, eval: Int) = builder.addInt(54, eval, 0)
        fun addReviewDate(builder: FlatBufferBuilder, reviewDate: Int) = builder.addOffset(55, reviewDate, 0)
        fun addRecStatus(builder: FlatBufferBuilder, recStatus: Int) = builder.addOffset(56, recStatus, 0)
        fun addSymCode(builder: FlatBufferBuilder, symCode: Int) = builder.addOffset(57, symCode, 0)
        fun addReferenceDoc(builder: FlatBufferBuilder, referenceDoc: Int) = builder.addOffset(58, referenceDoc, 0)
        fun addCreatedAt(builder: FlatBufferBuilder, createdAt: Int) = builder.addOffset(59, createdAt, 0)
        fun addCreatedBy(builder: FlatBufferBuilder, createdBy: Int) = builder.addOffset(60, createdBy, 0)
        fun addSource(builder: FlatBufferBuilder, source: Int) = builder.addOffset(61, source, 0)
        fun addOrigin(builder: FlatBufferBuilder, origin: Int) = builder.addOffset(62, origin, 0)
        fun addOrigNetwork(builder: FlatBufferBuilder, origNetwork: Int) = builder.addOffset(63, origNetwork, 0)
        fun addDataMode(builder: FlatBufferBuilder, dataMode: Byte) = builder.addByte(64, dataMode, 0)
        fun endSite_Abridged(builder: FlatBufferBuilder) : Int {
            val o = builder.endTable()
            return o
        }
        fun finishSiteAbridgedBuffer(builder: FlatBufferBuilder, offset: Int) = builder.finish(offset, "SITE")
        fun finishSizePrefixedSite_AbridgedBuffer(builder: FlatBufferBuilder, offset: Int) = builder.finishSizePrefixed(offset, "SITE")
    }
}
