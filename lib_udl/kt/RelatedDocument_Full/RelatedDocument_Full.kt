// automatically generated by the FlatBuffers compiler, do not modify

import com.google.flatbuffers.BaseVector
import com.google.flatbuffers.BooleanVector
import com.google.flatbuffers.ByteVector
import com.google.flatbuffers.Constants
import com.google.flatbuffers.DoubleVector
import com.google.flatbuffers.FlatBufferBuilder
import com.google.flatbuffers.FloatVector
import com.google.flatbuffers.LongVector
import com.google.flatbuffers.StringVector
import com.google.flatbuffers.Struct
import com.google.flatbuffers.Table
import com.google.flatbuffers.UnionVector
import java.nio.ByteBuffer
import java.nio.ByteOrder
import kotlin.math.sign

/**
 * /// Related document ids.
 */
@Suppress("unused")
class RelatedDocument_Full : Table() {

    fun __init(_i: Int, _bb: ByteBuffer)  {
        __reset(_i, _bb)
    }
    fun __assign(_i: Int, _bb: ByteBuffer) : RelatedDocument_Full {
        __init(_i, _bb)
        return this
    }
    /**
     * The document id of the related document.
     * Example: /// Example: No example provided.
     * Constraints: No constraints specified.
     */
    val documentId : String?
        get() {
            val o = __offset(4)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val documentIdAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(4, 1)
    fun documentIdInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 4, 1)
    /**
     * List of data sources related to this document.
     * Example: /// Example: No example provided.
     * Constraints: No constraints specified.
     */
    fun dataSourceRefs(j: Int) : String? {
        val o = __offset(6)
        return if (o != 0) {
            __string(__vector(o) + j * 4)
        } else {
            null
        }
    }
    val dataSourceRefsLength : Int
        get() {
            val o = __offset(6); return if (o != 0) __vector_len(o) else 0
        }
    companion object {
        fun validateVersion() = Constants.FLATBUFFERS_24_3_25()
        fun getRootAsRelatedDocument_Full(_bb: ByteBuffer): RelatedDocument_Full = getRootAsRelatedDocument_Full(_bb, RelatedDocument_Full())
        fun getRootAsRelatedDocument_Full(_bb: ByteBuffer, obj: RelatedDocument_Full): RelatedDocument_Full {
            _bb.order(ByteOrder.LITTLE_ENDIAN)
            return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb))
        }
        fun RelatedDocument_FullBufferHasIdentifier(_bb: ByteBuffer) : Boolean = __has_identifier(_bb, "RELA")
        fun createRelatedDocument_Full(builder: FlatBufferBuilder, documentIdOffset: Int, dataSourceRefsOffset: Int) : Int {
            builder.startTable(2)
            addDataSourceRefs(builder, dataSourceRefsOffset)
            addDocumentId(builder, documentIdOffset)
            return endRelatedDocument_Full(builder)
        }
        fun startRelatedDocument_Full(builder: FlatBufferBuilder) = builder.startTable(2)
        fun addDocumentId(builder: FlatBufferBuilder, documentId: Int) = builder.addOffset(0, documentId, 0)
        fun addDataSourceRefs(builder: FlatBufferBuilder, dataSourceRefs: Int) = builder.addOffset(1, dataSourceRefs, 0)
        fun createDataSourceRefsVector(builder: FlatBufferBuilder, data: IntArray) : Int {
            builder.startVector(4, data.size, 4)
            for (i in data.size - 1 downTo 0) {
                builder.addOffset(data[i])
            }
            return builder.endVector()
        }
        fun startDataSourceRefsVector(builder: FlatBufferBuilder, numElems: Int) = builder.startVector(4, numElems, 4)
        fun endRelatedDocument_Full(builder: FlatBufferBuilder) : Int {
            val o = builder.endTable()
            return o
        }
        fun finishRelatedDocumentFullBuffer(builder: FlatBufferBuilder, offset: Int) = builder.finish(offset, "RELA")
        fun finishSizePrefixedRelatedDocument_FullBuffer(builder: FlatBufferBuilder, offset: Int) = builder.finishSizePrefixed(offset, "RELA")
    }
}
