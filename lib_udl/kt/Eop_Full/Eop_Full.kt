// automatically generated by the FlatBuffers compiler, do not modify

import com.google.flatbuffers.BaseVector
import com.google.flatbuffers.BooleanVector
import com.google.flatbuffers.ByteVector
import com.google.flatbuffers.Constants
import com.google.flatbuffers.DoubleVector
import com.google.flatbuffers.FlatBufferBuilder
import com.google.flatbuffers.FloatVector
import com.google.flatbuffers.LongVector
import com.google.flatbuffers.StringVector
import com.google.flatbuffers.Struct
import com.google.flatbuffers.Table
import com.google.flatbuffers.UnionVector
import java.nio.ByteBuffer
import java.nio.ByteOrder
import kotlin.math.sign

/**
 * /// Model representation of Earth Orientation Parameters (EOP) produced by the IERS (International Earth Rotation and Reference Systems Service). Earth Orientation Parameters describe the irregularities of the earth's rotation. Technically, they are the parameters which provide the rotation of the ITRS (International Terrestrial Reference System) to the ICRS (International Celestial Reference System) as a function of time.
 * Universal time -- Universal time (UT1) is the time of the earth clock, which performs one revolution in about 24h. It is practically proportional to the sidereal time. The excess revolution time is called length of day (LOD).
 * Coordinates of the pole -- x and y are the coordinates of the Celestial Ephemeris Pole (CEP) relative to the IRP, the IERS Reference Pole. The CEP differs from the instantaneous rotation axis by quasi-diurnal terms with amplitudes under 0.01" (see Seidelmann, 1982). The x-axis is in the direction of the ITRF zero-meridian; the y-axis is in the direction 90 degrees West longitude.
 * Celestial pole offsets -- Celestial pole offsets are described in the IAU Precession and Nutation models. The observed differences with respect to the conventional celestial pole position defined by the models are monitored and reported by the IERS.
 * IERS Bulletins A and B provide current information on the Earth's orientation in the IERS Reference System.  This includes Universal Time, coordinates of the terrestrial pole, and celestial pole offsets.  Bulletin A gives an advanced solution updated weekly; the standard solution is given monthly in Bulletin B. Fields suffixed with 'B' are Bulletin B values. All solutions are continuous within their respective uncertainties.  Bulletin A is issued by the IERS Rapid Service/Prediction Centre at the U.S. Naval Observatory, Washington, DC and Bulletin B is issued by the IERS Earth Orientation Centre at the Paris Observatory. IERS Bulletin A reports the latest determinations for polar motion, UT1-UTC, and nutation offsets at daily intervals based on a combination of contributed analysis results using data from Very Long Baseline Interferometry (VLBI), Satellite Laser Ranging (SLR), Global Positioning System (GPS) satellites, and Lunar Laser Ranging (LLR). Predictions for variations a year into the future are also provided. Meteorological predictions of variations in Atmospheric Angular Momentum (AAM) are used to aid in the prediction of near-term UT1-UTC changes. This publication is prepared by the IERS Rapid Service/Prediction Center.
 */
@Suppress("unused")
class Eop_Full : Table() {

    fun __init(_i: Int, _bb: ByteBuffer)  {
        __reset(_i, _bb)
    }
    fun __assign(_i: Int, _bb: ByteBuffer) : Eop_Full {
        __init(_i, _bb)
        return this
    }
    /**
     * Unique identifier of the record, auto-generated by the system.
     * Example: /// Example: EOP-ID
     * Constraints: Minimum length = 1, Maximum length = 36
     */
    val id : String?
        get() {
            val o = __offset(4)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val idAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(4, 1)
    fun idInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 4, 1)
    /**
     * Classification marking of the data in IC/CAPCO Portion-marked format.
     * Example: /// Example: U
     * Constraints: Minimum length = 1, Maximum length = 128
     */
    val classificationMarking : String?
        get() {
            val o = __offset(6)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val classificationMarkingAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(6, 1)
    fun classificationMarkingInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 6, 1)
    /**
     * Effective date/time for the EOP values in ISO8601 UTC format.  The values could be current or predicted.
     * Example: /// Example: 2018-01-01T16:00:00.123Z
     * Constraints: No constraints specified.
     */
    val eopDate : String?
        get() {
            val o = __offset(8)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val eopDateAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(8, 1)
    fun eopDateInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 8, 1)
    /**
     * Flag indicating Issued (I), or Predicted (P) for this record's polar motion values.
     * Example: /// Example: I
     * Constraints: Minimum length = 0, Maximum length = 1
     */
    val polarMotionState : Byte
        get() {
            val o = __offset(10)
            return if(o != 0) bb.get(o + bb_pos) else 0
        }
    /**
     * The Bulletin A X coordinate value of earth polar motion at eopDate. Polar motion of the Earth is the motion of the Earth's rotational axis relative to its crust. This is measured with respect to a reference frame in which the solid Earth is fixed (a so-called Earth-centered, Earth-fixed or ECEF reference frame). Measured in arc seconds.
     * Example: /// Example: 0.182987
     * Constraints: No constraints specified.
     */
    val polarMotionX : Double
        get() {
            val o = __offset(12)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Estimated uncertainty/error in polarMotionX value in arc seconds.
     * Example: /// Example: 0.000672
     * Constraints: No constraints specified.
     */
    val polarMotionXunc : Double
        get() {
            val o = __offset(14)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * The Bulletin A Y coordinate value of earth polar motion at eopDate. Polar motion of the Earth is the motion of the Earth's rotational axis relative to its crust. This is measured with respect to a reference frame in which the solid Earth is fixed (a so-called Earth-centered, Earth-fixed or ECEF reference frame). Measured in arc seconds.
     * Example: /// Example: 0.168775
     * Constraints: No constraints specified.
     */
    val polarMotionY : Double
        get() {
            val o = __offset(16)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Estimated uncertainty/error in polarMotionY value in arc seconds.
     * Example: /// Example: 0.000345
     * Constraints: No constraints specified.
     */
    val polarMotionYunc : Double
        get() {
            val o = __offset(18)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Flag indicating Issued (I), or Predicted (P) for this record''s Bulletin A UT1-UTC values.
     * Example: /// Example: I
     * Constraints: Minimum length = 0, Maximum length = 1
     */
    val ut1Utcstate : Byte
        get() {
            val o = __offset(20)
            return if(o != 0) bb.get(o + bb_pos) else 0
        }
    /**
     * The difference between the Bulletin A UT1 and UTC time scales as of eopDate in seconds.
     * Example: /// Example: -0.1251659
     * Constraints: No constraints specified.
     */
    val ut1Utc : Double
        get() {
            val o = __offset(22)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * The estimated uncertainty/error in the ut1UTC value in seconds.
     * Example: /// Example: 2.07e-05
     * Constraints: No constraints specified.
     */
    val ut1Utcunc : Double
        get() {
            val o = __offset(24)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Bulletin A length of day or LOD in milliseconds. Universal time (UT1) is the time of the earth clock, which performs one revolution in about 24h. It is practically proportional to the sidereal time. The excess revolution time is called length of day (LOD).
     * Example: /// Example: 1.8335
     * Constraints: No constraints specified.
     */
    val lod : Double
        get() {
            val o = __offset(26)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * The estimated uncertainty/error in the lod value in seconds.
     * Example: /// Example: 0.0201
     * Constraints: No constraints specified.
     */
    val lodUnc : Double
        get() {
            val o = __offset(28)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Flag indicating Issued (I), or Predicted (P) for this record's nutation values (dPSI and dEpsilon).
     * Example: /// Example: I
     * Constraints: Minimum length = 0, Maximum length = 1
     */
    val nutationState : Byte
        get() {
            val o = __offset(30)
            return if(o != 0) bb.get(o + bb_pos) else 0
        }
    /**
     * The Bulletin A offset in longitude dDy1980 with respect to the IAU 1976 Theory of Precession and the IAU 1980 Theory of Nutation, measured in milliseconds of arc. Note: dPSI is not used when this record represents IAU 2000 data.
     * Example: /// Example: -10.437
     * Constraints: No constraints specified.
     */
    val dPsi : Double
        get() {
            val o = __offset(32)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * The estimated uncertainty/error in the dPSI value in milliseconds of arc.
     * Example: /// Example: 0.507
     * Constraints: No constraints specified.
     */
    val dPsiunc : Double
        get() {
            val o = __offset(34)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * The Bulletin A offset in obliquity dDe1980 with respect to the IAU 1976 Theory of Precession and the IAU 1980 Theory of Nutation, measured in milliseconds of arc. Note: dEpsilon is not used when this record represents IAU 2000 data.
     * Example: /// Example: -0.917
     * Constraints: No constraints specified.
     */
    val dEpsilon : Double
        get() {
            val o = __offset(36)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * The estimated uncertainty/error in the dEpsilon value in milliseconds of arc.
     * Example: /// Example: 0.165
     * Constraints: No constraints specified.
     */
    val dEpsilonUnc : Double
        get() {
            val o = __offset(38)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * The Bulletin A celestial pole offset along x-axis with respect to the IAU 2000A Theory of Precession and Nutation, measured in milliseconds of arc. Note: dX is not used when this record represents IAU 1980 data.
     * Example: /// Example: -0.086
     * Constraints: No constraints specified.
     */
    val dX : Double
        get() {
            val o = __offset(40)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * The estimated uncertainty/error in the Bulletin A dX value, in milliseconds of arc.
     * Example: /// Example: 0.202
     * Constraints: No constraints specified.
     */
    val dXunc : Double
        get() {
            val o = __offset(42)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * The Bulletin A celestial pole offset along y-axis with respect to the IAU 2000A Theory of Precession and Nutation, measured in milliseconds of arc. Note: dY is not used when this record represents IAU 1980 data.
     * Example: /// Example: 0.13
     * Constraints: No constraints specified.
     */
    val dY : Double
        get() {
            val o = __offset(44)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * The estimated uncertainty/error in the Bulletin A dY value, in milliseconds of arc.
     * Example: /// Example: 0.165
     * Constraints: No constraints specified.
     */
    val dYunc : Double
        get() {
            val o = __offset(46)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Bulletin B X coordinate value of earth polar motion at eopDate. Polar motion of the Earth is the motion of the Earth's rotational axis relative to its crust. This is measured with respect to a reference frame in which the solid Earth is fixed (a so-called Earth-centered, Earth-fixed or ECEF reference frame). Measured in arc seconds.
     * Example: /// Example: 0.1824
     * Constraints: No constraints specified.
     */
    val polarMotionXb : Double
        get() {
            val o = __offset(48)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Bulletin B Y coordinate value of earth polar motion at eopDate. Polar motion of the Earth is the motion of the Earth's rotational axis relative to its crust. This is measured with respect to a reference frame in which the solid Earth is fixed (a so-called Earth-centered, Earth-fixed or ECEF reference frame). Measured in arc seconds.
     * Example: /// Example: 0.1679
     * Constraints: No constraints specified.
     */
    val polarMotionYb : Double
        get() {
            val o = __offset(50)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * The Bulletin B difference between the UT1 and UTC time scales as of eopDate in seconds.
     * Example: /// Example: -0.1253
     * Constraints: No constraints specified.
     */
    val ut1Utcb : Double
        get() {
            val o = __offset(52)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * The Bulletin B offset in longitude dDy1980 with respect to the IAU 1976 Theory of Precession and the IAU 1980 Theory of Nutation, measured in milliseconds of arc. Note: dPSIB is not used when this record represents IAU 2000 data.
     * Example: /// Example: -9.9
     * Constraints: No constraints specified.
     */
    val dPsib : Double
        get() {
            val o = __offset(54)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * The Bulletin B offset in obliquity dDe1980 with respect to the IAU 1976 Theory of Precession and the IAU 1980 Theory of Nutation, measured in milliseconds of arc. Note: dEpsilonB is not used when this record represents IAU 2000 data.
     * Example: /// Example: -1.7
     * Constraints: No constraints specified.
     */
    val dEpsilonB : Double
        get() {
            val o = __offset(56)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * The Bulletin B celestial pole offset along the X-axis with respect to the IAU 2000A Theory of Precession and Nutation, measured in milliseconds of arc. Note: dXB is not used when this record represents IAU 1980 data.
     * Example: /// Example: 0.129
     * Constraints: No constraints specified.
     */
    val dXb : Double
        get() {
            val o = __offset(58)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * The Bulletin B celestial pole offset along the Y-axis with respect to the IAU 2000A Theory of Precession and Nutation, measured in milliseconds of arc. Note: dYB is not used when this record represents IAU 1980 data.
     * Example: /// Example: -0.653
     * Constraints: No constraints specified.
     */
    val dYb : Double
        get() {
            val o = __offset(60)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * The IAU Theory of Precession and Theory of Nutation applied to the data in this record. IAU1980 records employ the IAU 1976 Theory of Precession and IAU 1980 Theory of Nutation, and IAU2000 records employ the IAU 2000A Theory of Precession and Nutation.
     * Example: /// Example: IAU1980
     * Constraints: Minimum length = 0, Maximum length = 10
     */
    val precessionNutationStd : String?
        get() {
            val o = __offset(62)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val precessionNutationStdAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(62, 1)
    fun precessionNutationStdInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 62, 1)
    /**
     * Optional URI location in the document repository of the raw file parsed by the system to produce this record. To download the raw file, prepend https://udl-hostname/scs/download?id= to this value.
     * Example: /// Example: Example URI
     * Constraints: Minimum length = 0, Maximum length = 256
     */
    val rawFileUri : String?
        get() {
            val o = __offset(64)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val rawFileUriAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(64, 1)
    fun rawFileUriInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 64, 1)
    /**
     * Source of the data.
     * Example: /// Example: Bluestaq
     * Constraints: Minimum length = 1, Maximum length = 64
     */
    val source : String?
        get() {
            val o = __offset(66)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val sourceAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(66, 1)
    fun sourceInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 66, 1)
    /**
     * Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
     * Example: /// Example: THIRD_PARTY_DATASOURCE
     * Constraints: Minimum length = 0, Maximum length = 64
     */
    val origin : String?
        get() {
            val o = __offset(68)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val originAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(68, 1)
    fun originInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 68, 1)
    /**
     * Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
     * EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
     * REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
     * SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
     * TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
     * Example: /// Example: TEST
     * Constraints: Minimum length = 1, Maximum length = 32
     */
    val dataMode : Byte
        get() {
            val o = __offset(70)
            return if(o != 0) bb.get(o + bb_pos) else 0
        }
    /**
     * Time the row was created in the database, auto-populated by the system.
     * Example: /// Example: 2018-01-01T16:00:00.123Z
     * Constraints: No constraints specified.
     */
    val createdAt : String?
        get() {
            val o = __offset(72)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val createdAtAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(72, 1)
    fun createdAtInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 72, 1)
    /**
     * Application user who created the row in the database, auto-populated by the system.
     * Example: /// Example: some.user
     * Constraints: Minimum length = 1, Maximum length = 64
     */
    val createdBy : String?
        get() {
            val o = __offset(74)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val createdByAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(74, 1)
    fun createdByInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 74, 1)
    /**
     * Time the row was last updated in the database, auto-populated by the system.
     * Example: /// Example: 2018-01-01T16:00:00.123Z
     * Constraints: No constraints specified.
     */
    val updatedAt : String?
        get() {
            val o = __offset(76)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val updatedAtAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(76, 1)
    fun updatedAtInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 76, 1)
    /**
     * Application user who updated the row in the database, auto-populated by the system.
     * Example: /// Example: some.user
     * Constraints: Minimum length = 0, Maximum length = 64
     */
    val updatedBy : String?
        get() {
            val o = __offset(78)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val updatedByAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(78, 1)
    fun updatedByInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 78, 1)
    /**
     * The originating source network on which this record was created, auto-populated by the system.
     * Example: /// Example: ORIG
     * Constraints: Minimum length = 0, Maximum length = 32
     */
    val origNetwork : String?
        get() {
            val o = __offset(80)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val origNetworkAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(80, 1)
    fun origNetworkInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 80, 1)
    companion object {
        fun validateVersion() = Constants.FLATBUFFERS_24_3_25()
        fun getRootAsEop_Full(_bb: ByteBuffer): Eop_Full = getRootAsEop_Full(_bb, Eop_Full())
        fun getRootAsEop_Full(_bb: ByteBuffer, obj: Eop_Full): Eop_Full {
            _bb.order(ByteOrder.LITTLE_ENDIAN)
            return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb))
        }
        fun Eop_FullBufferHasIdentifier(_bb: ByteBuffer) : Boolean = __has_identifier(_bb, "EOPF")
        fun createEop_Full(builder: FlatBufferBuilder, idOffset: Int, classificationMarkingOffset: Int, eopDateOffset: Int, polarMotionState: Byte, polarMotionX: Double, polarMotionXunc: Double, polarMotionY: Double, polarMotionYunc: Double, ut1Utcstate: Byte, ut1Utc: Double, ut1Utcunc: Double, lod: Double, lodUnc: Double, nutationState: Byte, dPsi: Double, dPsiunc: Double, dEpsilon: Double, dEpsilonUnc: Double, dX: Double, dXunc: Double, dY: Double, dYunc: Double, polarMotionXb: Double, polarMotionYb: Double, ut1Utcb: Double, dPsib: Double, dEpsilonB: Double, dXb: Double, dYb: Double, precessionNutationStdOffset: Int, rawFileUriOffset: Int, sourceOffset: Int, originOffset: Int, dataMode: Byte, createdAtOffset: Int, createdByOffset: Int, updatedAtOffset: Int, updatedByOffset: Int, origNetworkOffset: Int) : Int {
            builder.startTable(39)
            addDYB(builder, dYb)
            addDXB(builder, dXb)
            addDEpsilonB(builder, dEpsilonB)
            addDPSIB(builder, dPsib)
            addUt1UTCB(builder, ut1Utcb)
            addPolarMotionYB(builder, polarMotionYb)
            addPolarMotionXB(builder, polarMotionXb)
            addDYUnc(builder, dYunc)
            addDY(builder, dY)
            addDXUnc(builder, dXunc)
            addDX(builder, dX)
            addDEpsilonUnc(builder, dEpsilonUnc)
            addDEpsilon(builder, dEpsilon)
            addDPSIUnc(builder, dPsiunc)
            addDPSI(builder, dPsi)
            addLodUnc(builder, lodUnc)
            addLod(builder, lod)
            addUt1UTCUnc(builder, ut1Utcunc)
            addUt1UTC(builder, ut1Utc)
            addPolarMotionYUnc(builder, polarMotionYunc)
            addPolarMotionY(builder, polarMotionY)
            addPolarMotionXUnc(builder, polarMotionXunc)
            addPolarMotionX(builder, polarMotionX)
            addOrigNetwork(builder, origNetworkOffset)
            addUpdatedBy(builder, updatedByOffset)
            addUpdatedAt(builder, updatedAtOffset)
            addCreatedBy(builder, createdByOffset)
            addCreatedAt(builder, createdAtOffset)
            addOrigin(builder, originOffset)
            addSource(builder, sourceOffset)
            addRawFileURI(builder, rawFileUriOffset)
            addPrecessionNutationStd(builder, precessionNutationStdOffset)
            addEopDate(builder, eopDateOffset)
            addClassificationMarking(builder, classificationMarkingOffset)
            addId(builder, idOffset)
            addDataMode(builder, dataMode)
            addNutationState(builder, nutationState)
            addUt1UTCState(builder, ut1Utcstate)
            addPolarMotionState(builder, polarMotionState)
            return endEop_Full(builder)
        }
        fun startEop_Full(builder: FlatBufferBuilder) = builder.startTable(39)
        fun addId(builder: FlatBufferBuilder, id: Int) = builder.addOffset(0, id, 0)
        fun addClassificationMarking(builder: FlatBufferBuilder, classificationMarking: Int) = builder.addOffset(1, classificationMarking, 0)
        fun addEopDate(builder: FlatBufferBuilder, eopDate: Int) = builder.addOffset(2, eopDate, 0)
        fun addPolarMotionState(builder: FlatBufferBuilder, polarMotionState: Byte) = builder.addByte(3, polarMotionState, 0)
        fun addPolarMotionX(builder: FlatBufferBuilder, polarMotionX: Double) = builder.addDouble(4, polarMotionX, 0.0)
        fun addPolarMotionXUnc(builder: FlatBufferBuilder, polarMotionXunc: Double) = builder.addDouble(5, polarMotionXunc, 0.0)
        fun addPolarMotionY(builder: FlatBufferBuilder, polarMotionY: Double) = builder.addDouble(6, polarMotionY, 0.0)
        fun addPolarMotionYUnc(builder: FlatBufferBuilder, polarMotionYunc: Double) = builder.addDouble(7, polarMotionYunc, 0.0)
        fun addUt1UTCState(builder: FlatBufferBuilder, ut1Utcstate: Byte) = builder.addByte(8, ut1Utcstate, 0)
        fun addUt1UTC(builder: FlatBufferBuilder, ut1Utc: Double) = builder.addDouble(9, ut1Utc, 0.0)
        fun addUt1UTCUnc(builder: FlatBufferBuilder, ut1Utcunc: Double) = builder.addDouble(10, ut1Utcunc, 0.0)
        fun addLod(builder: FlatBufferBuilder, lod: Double) = builder.addDouble(11, lod, 0.0)
        fun addLodUnc(builder: FlatBufferBuilder, lodUnc: Double) = builder.addDouble(12, lodUnc, 0.0)
        fun addNutationState(builder: FlatBufferBuilder, nutationState: Byte) = builder.addByte(13, nutationState, 0)
        fun addDPSI(builder: FlatBufferBuilder, dPsi: Double) = builder.addDouble(14, dPsi, 0.0)
        fun addDPSIUnc(builder: FlatBufferBuilder, dPsiunc: Double) = builder.addDouble(15, dPsiunc, 0.0)
        fun addDEpsilon(builder: FlatBufferBuilder, dEpsilon: Double) = builder.addDouble(16, dEpsilon, 0.0)
        fun addDEpsilonUnc(builder: FlatBufferBuilder, dEpsilonUnc: Double) = builder.addDouble(17, dEpsilonUnc, 0.0)
        fun addDX(builder: FlatBufferBuilder, dX: Double) = builder.addDouble(18, dX, 0.0)
        fun addDXUnc(builder: FlatBufferBuilder, dXunc: Double) = builder.addDouble(19, dXunc, 0.0)
        fun addDY(builder: FlatBufferBuilder, dY: Double) = builder.addDouble(20, dY, 0.0)
        fun addDYUnc(builder: FlatBufferBuilder, dYunc: Double) = builder.addDouble(21, dYunc, 0.0)
        fun addPolarMotionXB(builder: FlatBufferBuilder, polarMotionXb: Double) = builder.addDouble(22, polarMotionXb, 0.0)
        fun addPolarMotionYB(builder: FlatBufferBuilder, polarMotionYb: Double) = builder.addDouble(23, polarMotionYb, 0.0)
        fun addUt1UTCB(builder: FlatBufferBuilder, ut1Utcb: Double) = builder.addDouble(24, ut1Utcb, 0.0)
        fun addDPSIB(builder: FlatBufferBuilder, dPsib: Double) = builder.addDouble(25, dPsib, 0.0)
        fun addDEpsilonB(builder: FlatBufferBuilder, dEpsilonB: Double) = builder.addDouble(26, dEpsilonB, 0.0)
        fun addDXB(builder: FlatBufferBuilder, dXb: Double) = builder.addDouble(27, dXb, 0.0)
        fun addDYB(builder: FlatBufferBuilder, dYb: Double) = builder.addDouble(28, dYb, 0.0)
        fun addPrecessionNutationStd(builder: FlatBufferBuilder, precessionNutationStd: Int) = builder.addOffset(29, precessionNutationStd, 0)
        fun addRawFileURI(builder: FlatBufferBuilder, rawFileUri: Int) = builder.addOffset(30, rawFileUri, 0)
        fun addSource(builder: FlatBufferBuilder, source: Int) = builder.addOffset(31, source, 0)
        fun addOrigin(builder: FlatBufferBuilder, origin: Int) = builder.addOffset(32, origin, 0)
        fun addDataMode(builder: FlatBufferBuilder, dataMode: Byte) = builder.addByte(33, dataMode, 0)
        fun addCreatedAt(builder: FlatBufferBuilder, createdAt: Int) = builder.addOffset(34, createdAt, 0)
        fun addCreatedBy(builder: FlatBufferBuilder, createdBy: Int) = builder.addOffset(35, createdBy, 0)
        fun addUpdatedAt(builder: FlatBufferBuilder, updatedAt: Int) = builder.addOffset(36, updatedAt, 0)
        fun addUpdatedBy(builder: FlatBufferBuilder, updatedBy: Int) = builder.addOffset(37, updatedBy, 0)
        fun addOrigNetwork(builder: FlatBufferBuilder, origNetwork: Int) = builder.addOffset(38, origNetwork, 0)
        fun endEop_Full(builder: FlatBufferBuilder) : Int {
            val o = builder.endTable()
            return o
        }
        fun finishEopFullBuffer(builder: FlatBufferBuilder, offset: Int) = builder.finish(offset, "EOPF")
        fun finishSizePrefixedEop_FullBuffer(builder: FlatBufferBuilder, offset: Int) = builder.finishSizePrefixed(offset, "EOPF")
    }
}
