// automatically generated by the FlatBuffers compiler, do not modify

import com.google.flatbuffers.BaseVector
import com.google.flatbuffers.BooleanVector
import com.google.flatbuffers.ByteVector
import com.google.flatbuffers.Constants
import com.google.flatbuffers.DoubleVector
import com.google.flatbuffers.FlatBufferBuilder
import com.google.flatbuffers.FloatVector
import com.google.flatbuffers.LongVector
import com.google.flatbuffers.StringVector
import com.google.flatbuffers.Struct
import com.google.flatbuffers.Table
import com.google.flatbuffers.UnionVector
import java.nio.ByteBuffer
import java.nio.ByteOrder
import kotlin.math.sign

/**
 * /// An element set is a collection of Keplerian orbital elements describing an orbit of a particular satellite. The data is used along with an orbit propagator in order to predict the motion of a satellite. The element set, or elset for short, consists of identification data, the classical elements and drag parameters.
 */
@Suppress("unused")
class Elset_Ingest : Table() {

    fun __init(_i: Int, _bb: ByteBuffer)  {
        __reset(_i, _bb)
    }
    fun __assign(_i: Int, _bb: ByteBuffer) : Elset_Ingest {
        __init(_i, _bb)
        return this
    }
    /**
     * Unique identifier of the record, auto-generated by the system.
     * Example: /// Example: ELSET-ID
     * Constraints: Minimum length = 1, Maximum length = 36
     */
    val idElset : String?
        get() {
            val o = __offset(4)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val idElsetAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(4, 1)
    fun idElsetInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 4, 1)
    /**
     * Classification marking of the data in IC/CAPCO Portion-marked format.
     * Example: /// Example: U
     * Constraints: Minimum length = 1, Maximum length = 128
     */
    val classificationMarking : String?
        get() {
            val o = __offset(6)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val classificationMarkingAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(6, 1)
    fun classificationMarkingInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 6, 1)
    /**
     * Satellite/catalog number of the target on-orbit object.
     * Example: /// Example: 12
     * Constraints: No constraints specified.
     */
    val satNo : Int
        get() {
            val o = __offset(8)
            return if(o != 0) bb.getInt(o + bb_pos) else 0
        }
    /**
     * Elset epoch time in ISO 8601 UTC format, with microsecond precision.
     * Example: /// Example: 2018-01-01T16:00:00.123456Z
     * Constraints: No constraints specified.
     */
    val epoch : String?
        get() {
            val o = __offset(10)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val epochAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(10, 1)
    fun epochInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 10, 1)
    /**
     * Mean motion is the angular speed required for a body to complete one orbit, assuming constant speed in a circular orbit which completes in the same time as the variable speed, elliptical orbit of the actual body. Measured in revolutions per day.
     * Example: /// Example: 1.1
     * Constraints: No constraints specified.
     */
    val meanMotion : Double
        get() {
            val o = __offset(12)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Unique identifier of the satellite on-orbit object, if correlated. For the public catalog, the idOnOrbit is typically the satellite number as a string, but may be a UUID for analyst or other unknown or untracked satellites.
     * Example: /// Example: ONORBIT-ID
     * Constraints: Minimum length = 0, Maximum length = 36
     */
    val idOnOrbit : String?
        get() {
            val o = __offset(14)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val idOnOrbitAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(14, 1)
    fun idOnOrbitInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 14, 1)
    /**
     * Boolean indicating this Elset was unable to be correlated to a known object. This flag should only be set to true by data providers after an attempt to correlate to an on-orbit object was made and failed. If unable to correlate, the 'origObjectId' field may be populated with an internal data provider specific identifier.
     * Example: /// Example: False
     * Constraints: No constraints specified.
     */
    val uct : Boolean
        get() {
            val o = __offset(16)
            return if(o != 0) 0.toByte() != bb.get(o + bb_pos) else false
        }
    /**
     * The orbital eccentricity of an astronomical object is a parameter that determines the amount by which its orbit around another body deviates from a perfect circle. A value of 0 is a circular orbit, values between 0 and 1 form an elliptic orbit, 1 is a parabolic escape orbit, and greater than 1 is a hyperbolic escape orbit.
     * Example: /// Example: 0.333
     * Constraints: No constraints specified.
     */
    val eccentricity : Double
        get() {
            val o = __offset(18)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * The angle between the equator and the orbit when looking from the center of the Earth. If the orbit went exactly around the equator from left to right, then the inclination would be 0. The inclination ranges from 0 to 180 degrees.
     * Example: /// Example: 45.1
     * Constraints: No constraints specified.
     */
    val inclination : Double
        get() {
            val o = __offset(20)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Right ascension of the ascending node, or RAAN is the angle as measured in degrees eastwards (or, as seen from the north, counterclockwise) from the First Point of Aries to the ascending node, which is where the orbit crosses the equator when traveling north.
     * Example: /// Example: 1.1
     * Constraints: No constraints specified.
     */
    val raan : Double
        get() {
            val o = __offset(22)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * The argument of perigee is the angle in degrees formed between the perigee and the ascending node. If the perigee would occur at the ascending node, the argument of perigee would be 0.
     * Example: /// Example: 1.1
     * Constraints: No constraints specified.
     */
    val argOfPerigee : Double
        get() {
            val o = __offset(24)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Where the satellite is in its orbital path. The mean anomaly ranges from 0 to 360 degrees. The mean anomaly is referenced to the perigee. If the satellite were at the perigee, the mean anomaly would be 0.
     * Example: /// Example: 179.1
     * Constraints: No constraints specified.
     */
    val meanAnomaly : Double
        get() {
            val o = __offset(26)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * The current revolution number. The value is incremented when a satellite crosses the equator on an ascending pass.
     * Example: /// Example: 111
     * Constraints: No constraints specified.
     */
    val revNo : Int
        get() {
            val o = __offset(28)
            return if(o != 0) bb.getInt(o + bb_pos) else 0
        }
    /**
     * The drag term for SGP4 orbital model, used for calculating decay constants for altitude, eccentricity etc, measured in inverse earth radii.
     * Example: /// Example: 1.1
     * Constraints: No constraints specified.
     */
    val bStar : Double
        get() {
            val o = __offset(30)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * AGOM, expressed in m^2/kg, is the value of the (averaged) object Area times the solar radiation pressure coefficient(Gamma) over the object Mass. Applicable only with ephemType4.
     * Example: /// Example: 0.0126
     * Constraints: No constraints specified.
     */
    val agom : Double
        get() {
            val o = __offset(32)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Ballistic coefficient, in m^2/kg. Applicable only with ephemType4.
     * Example: /// Example: 0.00815
     * Constraints: No constraints specified.
     */
    val ballisticCoeff : Double
        get() {
            val o = __offset(34)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * 1st derivative of the mean motion with respect to time. Units are revolutions per day squared.
     * Example: /// Example: 1.1
     * Constraints: No constraints specified.
     */
    val meanMotionDot : Double
        get() {
            val o = __offset(36)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * 2nd derivative of the mean motion with respect to time. Units are revolutions per day cubed.
     * Example: /// Example: 1.1
     * Constraints: No constraints specified.
     */
    val meanMotionDdot : Double
        get() {
            val o = __offset(38)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * The sum of the periapsis and apoapsis distances divided by two. For circular orbits, the semimajor axis is the distance between the centers of the bodies, not the distance of the bodies from the center of mass. Units are kilometers.
     * Example: /// Example: 1.1
     * Constraints: No constraints specified.
     */
    val semiMajorAxis : Double
        get() {
            val o = __offset(40)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Period of the orbit equal to inverse of mean motion, in minutes.
     * Example: /// Example: 1.1
     * Constraints: No constraints specified.
     */
    val period : Double
        get() {
            val o = __offset(42)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * The orbit point furthest from the center of the earth in kilometers. If not provided, apogee will be computed from the TLE according to the following. Using mu, the standard gravitational parameter for the earth (398600.4418), semi-major axis A = (mu/(n * 2 * pi/(24*3600))^2)(1/3). Using semi-major axis A, eccentricity E, apogee = (A * (1 + E)) in km. Note that the calculations are for computing the apogee radius from the center of the earth, to compute apogee altitude the radius of the earth should be subtracted (6378.135 km).
     * Example: /// Example: 1.1
     * Constraints: No constraints specified.
     */
    val apogee : Double
        get() {
            val o = __offset(44)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * The orbit point nearest to the center of the earth in kilometers. If not provided, perigee will be computed from the TLE according to the following. Using mu, the standard gravitational parameter for the earth (398600.4418), semi-major axis A = (mu/(n * 2 * pi/(24*3600))^2)(1/3). Using semi-major axis A, eccentricity E, perigee = (A * (1 - E)) in km. Note that the calculations are for computing the perigee radius from the center of the earth, to compute perigee altitude the radius of the earth should be subtracted (6378.135 km).
     * Example: /// Example: 1.1
     * Constraints: No constraints specified.
     */
    val perigee : Double
        get() {
            val o = __offset(46)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Optional identifier provided by elset source to indicate the target onorbit object of this elset. This may be an internal identifier and not necessarily map to a valid satellite number.
     * Example: /// Example: ORIGOBJECT-ID
     * Constraints: Minimum length = 0, Maximum length = 64
     */
    val origObjectId : String?
        get() {
            val o = __offset(48)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val origObjectIdAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(48, 1)
    fun origObjectIdInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 48, 1)
    /**
     * Unique identifier of the OD solution record that produced this elset. This ID can be used to obtain additional information on an OrbitDetermination object using the 'get by ID' operation (e.g. /udl/orbitdetermination/{id}). For example, the OrbitDetermination with idOrbitDetermination = abc would be queried as /udl/orbitdetermination/abc.
     * Example: /// Example: 026dd511-8ba5-47d3-9909-836149f87686
     * Constraints: Minimum length = 0, Maximum length = 36
     */
    val idOrbitDetermination : String?
        get() {
            val o = __offset(50)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val idOrbitDeterminationAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(50, 1)
    fun idOrbitDeterminationInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 50, 1)
    /**
     * Read only derived/generated line1 of a legacy TLE (two line element set) format, ignored on create/edit operations.
     * Example: /// Example: Example line1
     * Constraints: Minimum length = 0, Maximum length = 69
     */
    val line1 : String?
        get() {
            val o = __offset(52)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val line1AsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(52, 1)
    fun line1InByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 52, 1)
    /**
     * Read only derived/generated line2 of a legacy TLE (two line element set) format, ignored on create/edit operations.
     * Example: /// Example: Example line2
     * Constraints: Minimum length = 0, Maximum length = 69
     */
    val line2 : String?
        get() {
            val o = __offset(54)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val line2AsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(54, 1)
    fun line2InByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 54, 1)
    /**
     * Optional source-provided and searchable metadata or descriptor of the data.
     * Example: /// Example: Example description
     * Constraints: Minimum length = 0, Maximum length = 64
     */
    val descriptor : String?
        get() {
            val o = __offset(56)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val descriptorAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(56, 1)
    fun descriptorInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 56, 1)
    /**
     * Time the row was created in the database, auto-populated by the system.
     * Example: /// Example: 2018-01-01T16:00:00.123Z
     * Constraints: No constraints specified.
     */
    val createdAt : String?
        get() {
            val o = __offset(58)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val createdAtAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(58, 1)
    fun createdAtInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 58, 1)
    /**
     * Application user who created the row in the database, auto-populated by the system.
     * Example: /// Example: some.user
     * Constraints: Minimum length = 1, Maximum length = 64
     */
    val createdBy : String?
        get() {
            val o = __offset(60)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val createdByAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(60, 1)
    fun createdByInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 60, 1)
    /**
     * Optional URI location in the document repository of the raw file parsed by the system to produce this record. To download the raw file, prepend https://udl-hostname/scs/download?id= to this value.
     * Example: /// Example: Example URI
     * Constraints: Minimum length = 0, Maximum length = 256
     */
    val rawFileUri : String?
        get() {
            val o = __offset(62)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val rawFileUriAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(62, 1)
    fun rawFileUriInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 62, 1)
    /**
     * Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
     * Example: /// Example: THIRD_PARTY_DATASOURCE
     * Constraints: Minimum length = 0, Maximum length = 64
     */
    val origin : String?
        get() {
            val o = __offset(64)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val originAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(64, 1)
    fun originInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 64, 1)
    /**
     * The source data library from which this record was received. This could be a remote or tactical UDL or another data library. If null, the record should be assumed to have originated from the primary Enterprise UDL.
     * Example: /// Example: AXE
     * Constraints: Minimum length = 0, Maximum length = 64
     */
    val sourceDl : String?
        get() {
            val o = __offset(66)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val sourceDlAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(66, 1)
    fun sourceDlInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 66, 1)
    /**
     * Source of the data.
     * Example: /// Example: Bluestaq
     * Constraints: Minimum length = 1, Maximum length = 64
     */
    val source : String?
        get() {
            val o = __offset(68)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val sourceAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(68, 1)
    fun sourceInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 68, 1)
    /**
     * Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
     * EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
     * REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
     * SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
     * TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
     * Example: /// Example: TEST
     * Constraints: Minimum length = 1, Maximum length = 32
     */
    val dataMode : Byte
        get() {
            val o = __offset(70)
            return if(o != 0) bb.get(o + bb_pos) else 0
        }
    /**
     * Optional array of provider/source specific tags for this data, where each element is no longer than 32 characters, used for implementing data owner conditional access controls to restrict access to the data. Should be left null by data providers unless conditional access controls are coordinated with the UDL team.
     * Example: /// Example: ['PROVIDER_TAG1', 'PROVIDER_TAG2']
     * Constraints: No constraints specified.
     */
    fun tags(j: Int) : String? {
        val o = __offset(72)
        return if (o != 0) {
            __string(__vector(o) + j * 4)
        } else {
            null
        }
    }
    val tagsLength : Int
        get() {
            val o = __offset(72); return if (o != 0) __vector_len(o) else 0
        }
    /**
     * Optional algorithm used to produce this record.
     * Example: /// Example: Example algorithm
     * Constraints: Minimum length = 0, Maximum length = 64
     */
    val algorithm : String?
        get() {
            val o = __offset(74)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val algorithmAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(74, 1)
    fun algorithmInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 74, 1)
    /**
     * Optional array of UDL data (observation) UUIDs used to build this element set. See the associated sourcedDataTypes array for the specific types of observations for the positionally corresponding UUIDs in this array (the two arrays must match in size).
     * Example: /// Example: ['OBSERVATION_UUID1', 'OBSERVATION_UUID2']
     * Constraints: No constraints specified.
     */
    fun sourcedData(j: Int) : String? {
        val o = __offset(76)
        return if (o != 0) {
            __string(__vector(o) + j * 4)
        } else {
            null
        }
    }
    val sourcedDataLength : Int
        get() {
            val o = __offset(76); return if (o != 0) __vector_len(o) else 0
        }
    /**
     * Optional array of UDL observation data types used to build this element set (e.g. EO, RADAR, RF, DOA). See the associated sourcedData array for the specific UUIDs of observations for the positionally corresponding data types in this array (the two arrays must match in size).
     * Example: /// Example: ['RADAR', 'RF']
     * Constraints: No constraints specified.
     */
    val sourcedDataTypes : Byte
        get() {
            val o = __offset(78)
            return if(o != 0) bb.get(o + bb_pos) else 0
        }
    /**
     * Optional identifier to track a commercial or marketplace transaction executed to produce this data.
     * Example: /// Example: TRANSACTION-ID
     * Constraints: Minimum length = 0, Maximum length = 64
     */
    val transactionId : String?
        get() {
            val o = __offset(80)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val transactionIdAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(80, 1)
    fun transactionIdInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 80, 1)
    /**
     * The ephemeris type associated with this TLE:
     * 0:&nbsp;SGP4 if orbital period&nbsp;&lt;&nbsp;225 minutes, and SDP4 otherwise
     * 1:&nbsp;SGP
     * 2:&nbsp;SGP4
     * 3:&nbsp;SDP4
     * 4:&nbsp;SGP8, also referred to as SGP4-XP
     * 5:&nbsp;SDP8
     * Example: /// Example: 1
     * Constraints: No constraints specified.
     */
    val ephemType : Int
        get() {
            val o = __offset(82)
            return if(o != 0) bb.getInt(o + bb_pos) else 0
        }
    /**
     * The originating source network on which this record was created, auto-populated by the system.
     * Example: /// Example: ORIG
     * Constraints: Minimum length = 1, Maximum length = 32
     */
    val origNetwork : String?
        get() {
            val o = __offset(84)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val origNetworkAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(84, 1)
    fun origNetworkInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 84, 1)
    companion object {
        fun validateVersion() = Constants.FLATBUFFERS_24_3_25()
        fun getRootAsElset_Ingest(_bb: ByteBuffer): Elset_Ingest = getRootAsElset_Ingest(_bb, Elset_Ingest())
        fun getRootAsElset_Ingest(_bb: ByteBuffer, obj: Elset_Ingest): Elset_Ingest {
            _bb.order(ByteOrder.LITTLE_ENDIAN)
            return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb))
        }
        fun Elset_IngestBufferHasIdentifier(_bb: ByteBuffer) : Boolean = __has_identifier(_bb, "ELSE")
        fun createElset_Ingest(builder: FlatBufferBuilder, idElsetOffset: Int, classificationMarkingOffset: Int, satNo: Int, epochOffset: Int, meanMotion: Double, idOnOrbitOffset: Int, uct: Boolean, eccentricity: Double, inclination: Double, raan: Double, argOfPerigee: Double, meanAnomaly: Double, revNo: Int, bStar: Double, agom: Double, ballisticCoeff: Double, meanMotionDot: Double, meanMotionDdot: Double, semiMajorAxis: Double, period: Double, apogee: Double, perigee: Double, origObjectIdOffset: Int, idOrbitDeterminationOffset: Int, line1Offset: Int, line2Offset: Int, descriptorOffset: Int, createdAtOffset: Int, createdByOffset: Int, rawFileUriOffset: Int, originOffset: Int, sourceDlOffset: Int, sourceOffset: Int, dataMode: Byte, tagsOffset: Int, algorithmOffset: Int, sourcedDataOffset: Int, sourcedDataTypes: Byte, transactionIdOffset: Int, ephemType: Int, origNetworkOffset: Int) : Int {
            builder.startTable(41)
            addPerigee(builder, perigee)
            addApogee(builder, apogee)
            addPeriod(builder, period)
            addSemiMajorAxis(builder, semiMajorAxis)
            addMeanMotionDDot(builder, meanMotionDdot)
            addMeanMotionDot(builder, meanMotionDot)
            addBallisticCoeff(builder, ballisticCoeff)
            addAgom(builder, agom)
            addBStar(builder, bStar)
            addMeanAnomaly(builder, meanAnomaly)
            addArgOfPerigee(builder, argOfPerigee)
            addRaan(builder, raan)
            addInclination(builder, inclination)
            addEccentricity(builder, eccentricity)
            addMeanMotion(builder, meanMotion)
            addOrigNetwork(builder, origNetworkOffset)
            addEphemType(builder, ephemType)
            addTransactionId(builder, transactionIdOffset)
            addSourcedData(builder, sourcedDataOffset)
            addAlgorithm(builder, algorithmOffset)
            addTags(builder, tagsOffset)
            addSource(builder, sourceOffset)
            addSourceDL(builder, sourceDlOffset)
            addOrigin(builder, originOffset)
            addRawFileURI(builder, rawFileUriOffset)
            addCreatedBy(builder, createdByOffset)
            addCreatedAt(builder, createdAtOffset)
            addDescriptor(builder, descriptorOffset)
            addLine2(builder, line2Offset)
            addLine1(builder, line1Offset)
            addIdOrbitDetermination(builder, idOrbitDeterminationOffset)
            addOrigObjectId(builder, origObjectIdOffset)
            addRevNo(builder, revNo)
            addIdOnOrbit(builder, idOnOrbitOffset)
            addEpoch(builder, epochOffset)
            addSatNo(builder, satNo)
            addClassificationMarking(builder, classificationMarkingOffset)
            addIdElset(builder, idElsetOffset)
            addSourcedDataTypes(builder, sourcedDataTypes)
            addDataMode(builder, dataMode)
            addUct(builder, uct)
            return endElset_Ingest(builder)
        }
        fun startElset_Ingest(builder: FlatBufferBuilder) = builder.startTable(41)
        fun addIdElset(builder: FlatBufferBuilder, idElset: Int) = builder.addOffset(0, idElset, 0)
        fun addClassificationMarking(builder: FlatBufferBuilder, classificationMarking: Int) = builder.addOffset(1, classificationMarking, 0)
        fun addSatNo(builder: FlatBufferBuilder, satNo: Int) = builder.addInt(2, satNo, 0)
        fun addEpoch(builder: FlatBufferBuilder, epoch: Int) = builder.addOffset(3, epoch, 0)
        fun addMeanMotion(builder: FlatBufferBuilder, meanMotion: Double) = builder.addDouble(4, meanMotion, 0.0)
        fun addIdOnOrbit(builder: FlatBufferBuilder, idOnOrbit: Int) = builder.addOffset(5, idOnOrbit, 0)
        fun addUct(builder: FlatBufferBuilder, uct: Boolean) = builder.addBoolean(6, uct, false)
        fun addEccentricity(builder: FlatBufferBuilder, eccentricity: Double) = builder.addDouble(7, eccentricity, 0.0)
        fun addInclination(builder: FlatBufferBuilder, inclination: Double) = builder.addDouble(8, inclination, 0.0)
        fun addRaan(builder: FlatBufferBuilder, raan: Double) = builder.addDouble(9, raan, 0.0)
        fun addArgOfPerigee(builder: FlatBufferBuilder, argOfPerigee: Double) = builder.addDouble(10, argOfPerigee, 0.0)
        fun addMeanAnomaly(builder: FlatBufferBuilder, meanAnomaly: Double) = builder.addDouble(11, meanAnomaly, 0.0)
        fun addRevNo(builder: FlatBufferBuilder, revNo: Int) = builder.addInt(12, revNo, 0)
        fun addBStar(builder: FlatBufferBuilder, bStar: Double) = builder.addDouble(13, bStar, 0.0)
        fun addAgom(builder: FlatBufferBuilder, agom: Double) = builder.addDouble(14, agom, 0.0)
        fun addBallisticCoeff(builder: FlatBufferBuilder, ballisticCoeff: Double) = builder.addDouble(15, ballisticCoeff, 0.0)
        fun addMeanMotionDot(builder: FlatBufferBuilder, meanMotionDot: Double) = builder.addDouble(16, meanMotionDot, 0.0)
        fun addMeanMotionDDot(builder: FlatBufferBuilder, meanMotionDdot: Double) = builder.addDouble(17, meanMotionDdot, 0.0)
        fun addSemiMajorAxis(builder: FlatBufferBuilder, semiMajorAxis: Double) = builder.addDouble(18, semiMajorAxis, 0.0)
        fun addPeriod(builder: FlatBufferBuilder, period: Double) = builder.addDouble(19, period, 0.0)
        fun addApogee(builder: FlatBufferBuilder, apogee: Double) = builder.addDouble(20, apogee, 0.0)
        fun addPerigee(builder: FlatBufferBuilder, perigee: Double) = builder.addDouble(21, perigee, 0.0)
        fun addOrigObjectId(builder: FlatBufferBuilder, origObjectId: Int) = builder.addOffset(22, origObjectId, 0)
        fun addIdOrbitDetermination(builder: FlatBufferBuilder, idOrbitDetermination: Int) = builder.addOffset(23, idOrbitDetermination, 0)
        fun addLine1(builder: FlatBufferBuilder, line1: Int) = builder.addOffset(24, line1, 0)
        fun addLine2(builder: FlatBufferBuilder, line2: Int) = builder.addOffset(25, line2, 0)
        fun addDescriptor(builder: FlatBufferBuilder, descriptor: Int) = builder.addOffset(26, descriptor, 0)
        fun addCreatedAt(builder: FlatBufferBuilder, createdAt: Int) = builder.addOffset(27, createdAt, 0)
        fun addCreatedBy(builder: FlatBufferBuilder, createdBy: Int) = builder.addOffset(28, createdBy, 0)
        fun addRawFileURI(builder: FlatBufferBuilder, rawFileUri: Int) = builder.addOffset(29, rawFileUri, 0)
        fun addOrigin(builder: FlatBufferBuilder, origin: Int) = builder.addOffset(30, origin, 0)
        fun addSourceDL(builder: FlatBufferBuilder, sourceDl: Int) = builder.addOffset(31, sourceDl, 0)
        fun addSource(builder: FlatBufferBuilder, source: Int) = builder.addOffset(32, source, 0)
        fun addDataMode(builder: FlatBufferBuilder, dataMode: Byte) = builder.addByte(33, dataMode, 0)
        fun addTags(builder: FlatBufferBuilder, tags: Int) = builder.addOffset(34, tags, 0)
        fun createTagsVector(builder: FlatBufferBuilder, data: IntArray) : Int {
            builder.startVector(4, data.size, 4)
            for (i in data.size - 1 downTo 0) {
                builder.addOffset(data[i])
            }
            return builder.endVector()
        }
        fun startTagsVector(builder: FlatBufferBuilder, numElems: Int) = builder.startVector(4, numElems, 4)
        fun addAlgorithm(builder: FlatBufferBuilder, algorithm: Int) = builder.addOffset(35, algorithm, 0)
        fun addSourcedData(builder: FlatBufferBuilder, sourcedData: Int) = builder.addOffset(36, sourcedData, 0)
        fun createSourcedDataVector(builder: FlatBufferBuilder, data: IntArray) : Int {
            builder.startVector(4, data.size, 4)
            for (i in data.size - 1 downTo 0) {
                builder.addOffset(data[i])
            }
            return builder.endVector()
        }
        fun startSourcedDataVector(builder: FlatBufferBuilder, numElems: Int) = builder.startVector(4, numElems, 4)
        fun addSourcedDataTypes(builder: FlatBufferBuilder, sourcedDataTypes: Byte) = builder.addByte(37, sourcedDataTypes, 0)
        fun addTransactionId(builder: FlatBufferBuilder, transactionId: Int) = builder.addOffset(38, transactionId, 0)
        fun addEphemType(builder: FlatBufferBuilder, ephemType: Int) = builder.addInt(39, ephemType, 0)
        fun addOrigNetwork(builder: FlatBufferBuilder, origNetwork: Int) = builder.addOffset(40, origNetwork, 0)
        fun endElset_Ingest(builder: FlatBufferBuilder) : Int {
            val o = builder.endTable()
            return o
        }
        fun finishElsetIngestBuffer(builder: FlatBufferBuilder, offset: Int) = builder.finish(offset, "ELSE")
        fun finishSizePrefixedElset_IngestBuffer(builder: FlatBufferBuilder, offset: Int) = builder.finishSizePrefixed(offset, "ELSE")
    }
}
