// automatically generated by the FlatBuffers compiler, do not modify

import com.google.flatbuffers.BaseVector
import com.google.flatbuffers.BooleanVector
import com.google.flatbuffers.ByteVector
import com.google.flatbuffers.Constants
import com.google.flatbuffers.DoubleVector
import com.google.flatbuffers.FlatBufferBuilder
import com.google.flatbuffers.FloatVector
import com.google.flatbuffers.LongVector
import com.google.flatbuffers.StringVector
import com.google.flatbuffers.Struct
import com.google.flatbuffers.Table
import com.google.flatbuffers.UnionVector
import java.nio.ByteBuffer
import java.nio.ByteOrder
import kotlin.math.sign

/**
 * /// Provides a means of sending Basic Character Set alphanumeric text messages.
 */
@Suppress("unused")
class MtiFreeText_Abridged : Table() {

    fun __init(_i: Int, _bb: ByteBuffer)  {
        __reset(_i, _bb)
    }
    fun __assign(_i: Int, _bb: ByteBuffer) : MtiFreeText_Abridged {
        __init(_i, _bb)
        return this
    }
    /**
     * The originator of the Free Text message.
     * Example: /// Example: ORIGINATOR
     * Constraints: Minimum length = 0, Maximum length = 1024
     */
    val f1 : String?
        get() {
            val o = __offset(4)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val f1AsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(4, 1)
    fun f1InByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 4, 1)
    /**
     * The recipient for which the Free Text message is intended.
     * Example: /// Example: RECIPIENT
     * Constraints: Minimum length = 0, Maximum length = 128
     */
    val f2 : String?
        get() {
            val o = __offset(6)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val f2AsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(6, 1)
    fun f2InByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 6, 1)
    /**
     * Free text data message.
     * Example: /// Example: TEXT
     * Constraints: Minimum length = 0, Maximum length = 1024
     */
    val f3 : String?
        get() {
            val o = __offset(8)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val f3AsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(8, 1)
    fun f3InByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 8, 1)
    companion object {
        fun validateVersion() = Constants.FLATBUFFERS_24_3_25()
        fun getRootAsMtiFreeText_Abridged(_bb: ByteBuffer): MtiFreeText_Abridged = getRootAsMtiFreeText_Abridged(_bb, MtiFreeText_Abridged())
        fun getRootAsMtiFreeText_Abridged(_bb: ByteBuffer, obj: MtiFreeText_Abridged): MtiFreeText_Abridged {
            _bb.order(ByteOrder.LITTLE_ENDIAN)
            return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb))
        }
        fun MtiFreeText_AbridgedBufferHasIdentifier(_bb: ByteBuffer) : Boolean = __has_identifier(_bb, "MTIF")
        fun createMtiFreeText_Abridged(builder: FlatBufferBuilder, f1Offset: Int, f2Offset: Int, f3Offset: Int) : Int {
            builder.startTable(3)
            addF3(builder, f3Offset)
            addF2(builder, f2Offset)
            addF1(builder, f1Offset)
            return endMtiFreeText_Abridged(builder)
        }
        fun startMtiFreeText_Abridged(builder: FlatBufferBuilder) = builder.startTable(3)
        fun addF1(builder: FlatBufferBuilder, f1: Int) = builder.addOffset(0, f1, 0)
        fun addF2(builder: FlatBufferBuilder, f2: Int) = builder.addOffset(1, f2, 0)
        fun addF3(builder: FlatBufferBuilder, f3: Int) = builder.addOffset(2, f3, 0)
        fun endMtiFreeText_Abridged(builder: FlatBufferBuilder) : Int {
            val o = builder.endTable()
            return o
        }
        fun finishMtiFreeTextAbridgedBuffer(builder: FlatBufferBuilder, offset: Int) = builder.finish(offset, "MTIF")
        fun finishSizePrefixedMtiFreeText_AbridgedBuffer(builder: FlatBufferBuilder, offset: Int) = builder.finishSizePrefixed(offset, "MTIF")
    }
}
