// automatically generated by the FlatBuffers compiler, do not modify

import com.google.flatbuffers.BaseVector
import com.google.flatbuffers.BooleanVector
import com.google.flatbuffers.ByteVector
import com.google.flatbuffers.Constants
import com.google.flatbuffers.DoubleVector
import com.google.flatbuffers.FlatBufferBuilder
import com.google.flatbuffers.FloatVector
import com.google.flatbuffers.LongVector
import com.google.flatbuffers.StringVector
import com.google.flatbuffers.Struct
import com.google.flatbuffers.Table
import com.google.flatbuffers.UnionVector
import java.nio.ByteBuffer
import java.nio.ByteOrder
import kotlin.math.sign

/**
 * /// Provides information on the dates, actors, locations, fatalities, and types of all reported political violence and protest events across the world.
 */
@Suppress("unused")
class SigAct_Ingest : Table() {

    fun __init(_i: Int, _bb: ByteBuffer)  {
        __reset(_i, _bb)
    }
    fun __assign(_i: Int, _bb: ByteBuffer) : SigAct_Ingest {
        __init(_i, _bb)
        return this
    }
    /**
     * Unique identifier of the record, auto-generated by the system.
     * Example: /// Example: SIGACT-ID
     * Constraints: Minimum length = 1, Maximum length = 36
     */
    val id : String?
        get() {
            val o = __offset(4)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val idAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(4, 1)
    fun idInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 4, 1)
    /**
     * Classification marking of the data in IC/CAPCO Portion-marked format.
     * Example: /// Example: U
     * Constraints: Minimum length = 1, Maximum length = 128
     */
    val classificationMarking : String?
        get() {
            val o = __offset(6)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val classificationMarkingAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(6, 1)
    fun classificationMarkingInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 6, 1)
    /**
     * The source language of the significant event using the ISO 639-3, 3 character code definition.
     * Example: /// Example: eng
     * Constraints: Minimum length = 0, Maximum length = 4
     */
    val sourceLanguage : String?
        get() {
            val o = __offset(8)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val sourceLanguageAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(8, 1)
    fun sourceLanguageInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 8, 1)
    /**
     * The country code. This value is typically the ISO 3166 Alpha-2 two-character country code, however it can also represent various consortiums that do not appear in the ISO document. The code must correspond to an existing country in the UDLâ€™s country API. Call udl/country/{code} to get any associated FIPS code, ISO Alpha-3 code, or alternate code values that exist for the specified country code.
     * Example: /// Example: US
     * Constraints: Minimum length = 0, Maximum length = 4
     */
    val countryCode : String?
        get() {
            val o = __offset(10)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val countryCodeAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(10, 1)
    fun countryCodeInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 10, 1)
    /**
     * The city in or near which this event occurred.
     * Example: /// Example: Austin
     * Constraints: Minimum length = 0, Maximum length = 128
     */
    val city : String?
        get() {
            val o = __offset(12)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val cityAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(12, 1)
    fun cityInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 12, 1)
    /**
     * The district in which this event occurred.
     * Example: /// Example: district 12
     * Constraints: Minimum length = 0, Maximum length = 128
     */
    val district : String?
        get() {
            val o = __offset(14)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val districtAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(14, 1)
    fun districtInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 14, 1)
    /**
     * The province in which this event occurred.
     * Example: /// Example: Province_Example
     * Constraints: Minimum length = 0, Maximum length = 128
     */
    val province : String?
        get() {
            val o = __offset(16)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val provinceAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(16, 1)
    fun provinceInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 16, 1)
    /**
     * WGS-84 centroid latitude of the event location, in degrees. -90 to 90 degrees (negative values south of equator).
     * Example: /// Example: 45.31
     * Constraints: No constraints specified.
     */
    val lat : Double
        get() {
            val o = __offset(18)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * WGS-84 centroid longitude of the event location, in degrees. -180 to 180 degrees (negative values west of Prime Meridian).
     * Example: /// Example: 90.23
     * Constraints: No constraints specified.
     */
    val lon : Double
        get() {
            val o = __offset(20)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * The Military Grid Reference System is the geocoordinate standard used by NATO militaries for locating points on Earth. The MGRS is derived from the Universal Transverse Mercator (UTM) grid system and the Universal Polar Stereographic (UPS) grid system, but uses a different labeling convention. The MGRS is used as geocode for the entire Earth. Example of an milgrid coordinate, or grid reference, would be 4QFJ12345678, which consists of three parts:
     * &nbsp;&nbsp;4Q (grid zone designator, GZD)
     * &nbsp;&nbsp;FJ (the 100,000-meter square identifier)
     * &nbsp;&nbsp;12345678 (numerical location; easting is 1234 and northing is 5678, in this case specifying a location with 10 m resolution).
     * Example: /// Example: 4QFJ12345678
     * Constraints: Minimum length = 0, Maximum length = 128
     */
    val milgrid : String?
        get() {
            val o = __offset(22)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val milgridAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(22, 1)
    fun milgridInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 22, 1)
    /**
     * Area in which important military events occur or are progressing.  A theater can include the entirety of the airspace, land and sea area that is or that may potentially become involved in war operations.
     * Example: /// Example: Kabul
     * Constraints: Minimum length = 0, Maximum length = 128
     */
    val theater : String?
        get() {
            val o = __offset(24)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val theaterAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(24, 1)
    fun theaterInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 24, 1)
    /**
     * Optional geographical region or polygon (lat/lon pairs) of the area surrounding the point of interest as projected on the ground.
     * Example: /// Example: POLYGON((67.3291113966927 26.156175339112,67.2580009640721 26.091022064271,67.1795862381682 26.6637992964562,67.2501237475598 26.730115808233,67.3291113966927 26.156175339112))
     * Constraints: Minimum length = 0, Maximum length = 512
     */
    val area : String?
        get() {
            val o = __offset(26)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val areaAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(26, 1)
    fun areaInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 26, 1)
    /**
     * Geographical region or polygon (lon/lat pairs), as depicted by the Well-Known Text representation of the geometry/geography, of the image as projected on the ground. WKT reference: https://www.opengeospatial.org/standards/wkt-crs. Ignored if included with a POST or PUT request that also specifies a valid 'area' field.
     * Example: /// Example: POLYGON((67.3291113966927 26.156175339112,67.2580009640721 26.091022064271,67.1795862381682 26.6637992964562,67.2501237475598 26.730115808233,67.3291113966927 26.156175339112))
     * Constraints: Minimum length = 0, Maximum length = 512
     */
    val atext : String?
        get() {
            val o = __offset(28)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val atextAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(28, 1)
    fun atextInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 28, 1)
    /**
     * Geographical region or polygon (lat/lon pairs), as depicted by the GeoJSON representation of the geometry/geography, of the image as projected on the ground. GeoJSON Reference: https://geojson.org/. Ignored if included with a POST or PUT request that also specifies a valid 'area' or 'atext' field.
     * Example: /// Example: {"type":"Polygon","coordinates":[[[67.3291113966927,26.156175339112],[67.2580009640721,26.091022064271],[67.1795862381682,26.6637992964562],[67.2501237475598,26.730115808233],[67.3291113966927,26.156175339112]]]}
     * Constraints: Minimum length = 0, Maximum length = 512
     */
    val agjson : String?
        get() {
            val o = __offset(30)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val agjsonAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(30, 1)
    fun agjsonInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 30, 1)
    /**
     * Type of region as projected on the ground.
     * Example: /// Example: Type1
     * Constraints: Minimum length = 0, Maximum length = 128
     */
    val atype : String?
        get() {
            val o = __offset(32)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val atypeAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(32, 1)
    fun atypeInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 32, 1)
    /**
     * Number of dimensions of the geometry depicted by region.
     * Example: /// Example: 3
     * Constraints: No constraints specified.
     */
    val andims : Int
        get() {
            val o = __offset(34)
            return if(o != 0) bb.getInt(o + bb_pos) else 0
        }
    /**
     * Geographical spatial_ref_sys for region.
     * Example: /// Example: 3
     * Constraints: No constraints specified.
     */
    val asrid : Int
        get() {
            val o = __offset(36)
            return if(o != 0) bb.getInt(o + bb_pos) else 0
        }
    /**
     * The approximate start time of the event, in ISO 8601 UTC format.
     * Example: /// Example: 2021-01-01T01:02:03.123Z
     * Constraints: No constraints specified.
     */
    val eventStart : String?
        get() {
            val o = __offset(38)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val eventStartAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(38, 1)
    fun eventStartInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 38, 1)
    /**
     * The approximate end time of the event, in ISO 8601 UTC format.
     * Example: /// Example: 2021-01-01T01:02:03.123Z
     * Constraints: No constraints specified.
     */
    val eventEnd : String?
        get() {
            val o = __offset(40)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val eventEndAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(40, 1)
    fun eventEndInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 40, 1)
    /**
     * Date of the report or filing.
     * Example: /// Example: 2018-01-01T16:00:00.123Z
     * Constraints: No constraints specified.
     */
    val reportDate : String?
        get() {
            val o = __offset(42)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val reportDateAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(42, 1)
    fun reportDateInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 42, 1)
    /**
     * A list of one or more actors involved in the event.
     * Example: /// Example: ['US', 'CAN']
     * Constraints: No constraints specified.
     */
    fun actors(j: Int) : String? {
        val o = __offset(44)
        return if (o != 0) {
            __string(__vector(o) + j * 4)
        } else {
            null
        }
    }
    val actorsLength : Int
        get() {
            val o = __offset(44); return if (o != 0) __vector_len(o) else 0
        }
    /**
     * Number of civilians abducted in the activity.
     * Example: /// Example: 423
     * Constraints: No constraints specified.
     */
    val civAbd : Int
        get() {
            val o = __offset(46)
            return if(o != 0) bb.getInt(o + bb_pos) else 0
        }
    /**
     * Number of civilians detained in the activity.
     * Example: /// Example: 234
     * Constraints: No constraints specified.
     */
    val civDet : Int
        get() {
            val o = __offset(48)
            return if(o != 0) bb.getInt(o + bb_pos) else 0
        }
    /**
     * Number of civilians killed in the activity.
     * Example: /// Example: 2
     * Constraints: No constraints specified.
     */
    val civKia : Int
        get() {
            val o = __offset(50)
            return if(o != 0) bb.getInt(o + bb_pos) else 0
        }
    /**
     * Number of civilians wounded in the activity.
     * Example: /// Example: 123
     * Constraints: No constraints specified.
     */
    val civWound : Int
        get() {
            val o = __offset(52)
            return if(o != 0) bb.getInt(o + bb_pos) else 0
        }
    /**
     * Number of coalition members abducted in the activity.
     * Example: /// Example: 123
     * Constraints: No constraints specified.
     */
    val coalAbd : Int
        get() {
            val o = __offset(54)
            return if(o != 0) bb.getInt(o + bb_pos) else 0
        }
    /**
     * Number of coalition members detained in the activity.
     * Example: /// Example: 123
     * Constraints: No constraints specified.
     */
    val coalDet : Int
        get() {
            val o = __offset(56)
            return if(o != 0) bb.getInt(o + bb_pos) else 0
        }
    /**
     * Number of coalition members killed in the activity.
     * Example: /// Example: 123
     * Constraints: No constraints specified.
     */
    val coalKia : Int
        get() {
            val o = __offset(58)
            return if(o != 0) bb.getInt(o + bb_pos) else 0
        }
    /**
     * Number of coalition members wounded in the activity.
     * Example: /// Example: 123
     * Constraints: No constraints specified.
     */
    val coalWound : Int
        get() {
            val o = __offset(60)
            return if(o != 0) bb.getInt(o + bb_pos) else 0
        }
    /**
     * Number of enemy combatants abducted in the activity.
     * Example: /// Example: 123
     * Constraints: No constraints specified.
     */
    val enemyAbd : Int
        get() {
            val o = __offset(62)
            return if(o != 0) bb.getInt(o + bb_pos) else 0
        }
    /**
     * Number of enemy combatants detained in the activity.
     * Example: /// Example: 123
     * Constraints: No constraints specified.
     */
    val enemyDet : Int
        get() {
            val o = __offset(64)
            return if(o != 0) bb.getInt(o + bb_pos) else 0
        }
    /**
     * Number of enemy combatants killed in the activity.
     * Example: /// Example: 123
     * Constraints: No constraints specified.
     */
    val enemyKia : Int
        get() {
            val o = __offset(66)
            return if(o != 0) bb.getInt(o + bb_pos) else 0
        }
    /**
     * Number of friendlies abducted in the activity.
     * Example: /// Example: 123
     * Constraints: No constraints specified.
     */
    val friendlyAbd : Int
        get() {
            val o = __offset(68)
            return if(o != 0) bb.getInt(o + bb_pos) else 0
        }
    /**
     * Number of friendlies in the activity.
     * Example: /// Example: 123
     * Constraints: No constraints specified.
     */
    val friendlyDet : Int
        get() {
            val o = __offset(70)
            return if(o != 0) bb.getInt(o + bb_pos) else 0
        }
    /**
     * Number of friendlies killed in the activity.
     * Example: /// Example: 123
     * Constraints: No constraints specified.
     */
    val friendlyKia : Int
        get() {
            val o = __offset(72)
            return if(o != 0) bb.getInt(o + bb_pos) else 0
        }
    /**
     * Number of friendlies wounded in the activity.
     * Example: /// Example: 123
     * Constraints: No constraints specified.
     */
    val friendlyWound : Int
        get() {
            val o = __offset(74)
            return if(o != 0) bb.getInt(o + bb_pos) else 0
        }
    /**
     * Number of Host Nation members abducted in the activity.
     * Example: /// Example: 123
     * Constraints: No constraints specified.
     */
    val hostNatAbd : Int
        get() {
            val o = __offset(76)
            return if(o != 0) bb.getInt(o + bb_pos) else 0
        }
    /**
     * Number of Host Nation members detained in the activity.
     * Example: /// Example: 123
     * Constraints: No constraints specified.
     */
    val hostNatDet : Int
        get() {
            val o = __offset(78)
            return if(o != 0) bb.getInt(o + bb_pos) else 0
        }
    /**
     * Number of Host Nation members killed in the activity.
     * Example: /// Example: 123
     * Constraints: No constraints specified.
     */
    val hostNatKia : Int
        get() {
            val o = __offset(80)
            return if(o != 0) bb.getInt(o + bb_pos) else 0
        }
    /**
     * Number of Host Nation members wounded in the activity.
     * Example: /// Example: 123
     * Constraints: No constraints specified.
     */
    val hostNatWound : Int
        get() {
            val o = __offset(82)
            return if(o != 0) bb.getInt(o + bb_pos) else 0
        }
    /**
     * Number of side A members abducted in the activity.
     * Example: /// Example: 123
     * Constraints: No constraints specified.
     */
    val sideAabd : Int
        get() {
            val o = __offset(84)
            return if(o != 0) bb.getInt(o + bb_pos) else 0
        }
    /**
     * Number of side A members detained in the activity.
     * Example: /// Example: 123
     * Constraints: No constraints specified.
     */
    val sideAdet : Int
        get() {
            val o = __offset(86)
            return if(o != 0) bb.getInt(o + bb_pos) else 0
        }
    /**
     * Number of side A members killed in the activity.
     * Example: /// Example: 123
     * Constraints: No constraints specified.
     */
    val sideAkia : Int
        get() {
            val o = __offset(88)
            return if(o != 0) bb.getInt(o + bb_pos) else 0
        }
    /**
     * Number of side A members wounded in the activity.
     * Example: /// Example: 123
     * Constraints: No constraints specified.
     */
    val sideAwound : Int
        get() {
            val o = __offset(90)
            return if(o != 0) bb.getInt(o + bb_pos) else 0
        }
    /**
     * Number of side B members abducted in the activity.
     * Example: /// Example: 123
     * Constraints: No constraints specified.
     */
    val sideBabd : Int
        get() {
            val o = __offset(92)
            return if(o != 0) bb.getInt(o + bb_pos) else 0
        }
    /**
     * Number of side B members detained in the activity.
     * Example: /// Example: 123
     * Constraints: No constraints specified.
     */
    val sideBdet : Int
        get() {
            val o = __offset(94)
            return if(o != 0) bb.getInt(o + bb_pos) else 0
        }
    /**
     * Number of side B members killed in the activity.
     * Example: /// Example: 123
     * Constraints: No constraints specified.
     */
    val sideBkia : Int
        get() {
            val o = __offset(96)
            return if(o != 0) bb.getInt(o + bb_pos) else 0
        }
    /**
     * Number of side B members wounded in the activity.
     * Example: /// Example: 123
     * Constraints: No constraints specified.
     */
    val sideBwound : Int
        get() {
            val o = __offset(98)
            return if(o != 0) bb.getInt(o + bb_pos) else 0
        }
    /**
     * The name of the target.  The target may be an individual, an entity, or a country/region.
     * Example: /// Example: US
     * Constraints: Minimum length = 0, Maximum length = 64
     */
    val target : String?
        get() {
            val o = __offset(100)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val targetAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(100, 1)
    fun targetInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 100, 1)
    /**
     * A description of the event.
     * Example: /// Example: Example_Description
     * Constraints: Minimum length = 0, Maximum length = 4096
     */
    val eventDescription : String?
        get() {
            val o = __offset(102)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val eventDescriptionAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(102, 1)
    fun eventDescriptionInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 102, 1)
    /**
     * The type of event (e.g.  Military, Natural, Political, Social, etc.).
     * Example: /// Example: Military
     * Constraints: Minimum length = 0, Maximum length = 32
     */
    val eventType : String?
        get() {
            val o = __offset(104)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val eventTypeAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(104, 1)
    fun eventTypeInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 104, 1)
    /**
     * The mode of this attack or event (e.g. Direct Fire, IED Explosion, etc.).
     * Example: /// Example: IED Explosion
     * Constraints: Minimum length = 0, Maximum length = 32
     */
    val typeOfAttack : String?
        get() {
            val o = __offset(106)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val typeOfAttackAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(106, 1)
    fun typeOfAttackInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 106, 1)
    /**
     * Flag indicating that this attack was of a complex or coordinated nature.
     * Example: /// Example: False
     * Constraints: No constraints specified.
     */
    val complexAttack : Boolean
        get() {
            val o = __offset(108)
            return if(o != 0) 0.toByte() != bb.get(o + bb_pos) else false
        }
    /**
     * Unique identifier assigned to each event record that uniquely identifies it in the master dataset.  This ID is provided for convenience of mapping to external systems.
     * Example: /// Example: NUMBER-ID
     * Constraints: Minimum length = 0, Maximum length = 64
     */
    val idNumber : String?
        get() {
            val o = __offset(110)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val idNumberAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(110, 1)
    fun idNumberInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 110, 1)
    /**
     * Estimate of the confidence that this event occurred.
     * Example: /// Example: 13
     * Constraints: No constraints specified.
     */
    val confidence : Int
        get() {
            val o = __offset(112)
            return if(o != 0) bb.getInt(o + bb_pos) else 0
        }
    /**
     * Estimate of the accuracy that this event occurred as described/reported.
     * Example: /// Example: 13
     * Constraints: No constraints specified.
     */
    val accuracy : Int
        get() {
            val o = __offset(114)
            return if(o != 0) bb.getInt(o + bb_pos) else 0
        }
    /**
     * 1 (high) for events where the reporting allows the coder to identify the event in full. That is, events where the individual happening is described by the original source in a sufficiently detailed way as to identify individual incidents, i.e. separate activities of fighting in a single location:
     * 2 (lower) for events where an aggregation of information was already made by the source material that is impossible to undo in the coding process. Such events are described by the original source only as aggregates (totals) of multiple separate activities of fighting spanning over a longer period than a single, clearly defined day.
     * Example: /// Example: 1
     * Constraints: No constraints specified.
     */
    val clarity : Int
        get() {
            val o = __offset(116)
            return if(o != 0) bb.getInt(o + bb_pos) else 0
        }
    /**
     * This is the raw CAMEO action code describing the action that Actor1 performed upon Actor2.  Additional information about Cameo Codes can be obtained from the GDELT project documentation here: https://www.gdeltproject.org/data.html#documentation.
     * Example: /// Example: CAMEO_CODE
     * Constraints: Minimum length = 0, Maximum length = 32
     */
    val cameoCode : String?
        get() {
            val o = __offset(118)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val cameoCodeAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(118, 1)
    fun cameoCodeInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 118, 1)
    /**
     * CAMEO event codes are defined in a three-level taxonomy. For events at level three in the taxonomy, this yields its level two leaf root node. For example, code 0251 (Appeal for easing of administrative sanctions) would yield an EventBaseCode of 025 (Appeal to yield). This makes it possible to aggregate events at various resolutions of specificity. For events at levels two or one, this field will be set to EventCode.
     * Example: /// Example: Example_cameoBaseCode
     * Constraints: Minimum length = 0, Maximum length = 32
     */
    val cameoBaseCode : String?
        get() {
            val o = __offset(120)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val cameoBaseCodeAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(120, 1)
    fun cameoBaseCodeInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 120, 1)
    /**
     * Similar to EventBaseCode, this defines the root-level category the event code falls under. For example, code 0251 (Appeal for easing of administrative sanctions) has a root code of 02 (Appeal). This makes it possible to aggregate events at various resolutions of specificity. For events at levels two or one, this field will be set to EventCode.
     * Example: /// Example: Example_cameoRootCode
     * Constraints: Minimum length = 0, Maximum length = 32
     */
    val cameoRootCode : String?
        get() {
            val o = __offset(122)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val cameoRootCodeAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(122, 1)
    fun cameoRootCodeInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 122, 1)
    /**
     * Each CAMEO event code is assigned a numeric score from -10 to +10, capturing the theoretical potential impact that type of event will have on the stability of a country. This is known as the Goldstein Scale. NOTE: this score is based on the type of event, not the specifics of the actual event record being recorded  thus two riots, one with 10 people and one with 10,000, will both receive the same Goldstein score. This can be aggregated to various levels of time resolution to yield an approximation of the stability of a location over time.
     * Example: /// Example: 9.32
     * Constraints: No constraints specified.
     */
    val goldstein : Double
        get() {
            val o = __offset(124)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * The source of the document or report.
     * Example: /// Example: Example_documentSource
     * Constraints: Minimum length = 0, Maximum length = 128
     */
    val documentSource : String?
        get() {
            val o = __offset(126)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val documentSourceAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(126, 1)
    fun documentSourceInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 126, 1)
    /**
     * The filename of the document or report.
     * Example: /// Example: Example_documentFilename
     * Constraints: Minimum length = 0, Maximum length = 128
     */
    val documentFilename : String?
        get() {
            val o = __offset(128)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val documentFilenameAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(128, 1)
    fun documentFilenameInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 128, 1)
    /**
     * Flag indicating this SigAct record has an associated txt file stored in the UDL. Retrieve the txt file by using the GET/udl/sigact/getFile/{id} where id is the same as the SigAct record id. The maximum file size for this service is 10,000,000 bytes (10MB). Files exceeding the maximum size will be rejected.
     * Example: /// Example: True
     * Constraints: No constraints specified.
     */
    val hasAttachment : Boolean
        get() {
            val o = __offset(130)
            return if(o != 0) 0.toByte() != bb.get(o + bb_pos) else false
        }
    /**
     * Size of the associated text file. Units in bytes. If filesize is provided without an associated file, it defaults to 0.
     * Example: /// Example: 0
     * Constraints: No constraints specified.
     */
    val filesize : Long
        get() {
            val o = __offset(132)
            return if(o != 0) bb.getLong(o + bb_pos) else 0L
        }
    /**
     * MD5 value of the file. The ingest/create operation will automatically generate the value.
     * Example: /// Example: 120EA8A25E5D487BF68B5F7096440019
     * Constraints: Minimum length = 0, Maximum length = 256
     */
    val checksumValue : String?
        get() {
            val o = __offset(134)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val checksumValueAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(134, 1)
    fun checksumValueInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 134, 1)
    /**
     * The reporting unit.
     * Example: /// Example: Unit_1
     * Constraints: Minimum length = 0, Maximum length = 128
     */
    val repUnit : String?
        get() {
            val o = __offset(136)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val repUnitAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(136, 1)
    fun repUnitInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 136, 1)
    /**
     * The reporting unit type.
     * Example: /// Example: Example_repUnitType
     * Constraints: Minimum length = 0, Maximum length = 128
     */
    val repUnitType : String?
        get() {
            val o = __offset(138)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val repUnitTypeAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(138, 1)
    fun repUnitTypeInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 138, 1)
    /**
     * The activity the unit was engaged in.
     * Example: /// Example: Example_Activity
     * Constraints: Minimum length = 0, Maximum length = 128
     */
    val repUnitActivity : String?
        get() {
            val o = __offset(140)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val repUnitActivityAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(140, 1)
    fun repUnitActivityInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 140, 1)
    /**
     * This is the total number of mentions of this event across all source documents during the 15 minute update in which it was first seen. Multiple references to an event within a single document also contribute to this count. This can be used as a method of assessing the importance of an event: the more discussion of that event, the more likely it is to be significant.
     * Example: /// Example: 8
     * Constraints: No constraints specified.
     */
    val numMentions : Int
        get() {
            val o = __offset(142)
            return if(o != 0) bb.getInt(o + bb_pos) else 0
        }
    /**
     * This is the total number of information sources containing one or more mentions of this event during the 15 minute update in which it was first seen. This can be used as a method of assessing the importance of an event: the more discussion of that event, the more likely it is to be significant.
     * Example: /// Example: 8
     * Constraints: No constraints specified.
     */
    val numSources : Int
        get() {
            val o = __offset(144)
            return if(o != 0) bb.getInt(o + bb_pos) else 0
        }
    /**
     * This is the total number of source documents containing one or more mentions of this event during the 15 minute update in which it was first seen. This can be used as a method of assessing the importance of an event: the more discussion of that event, the more likely it is to be significant.
     * Example: /// Example: 8
     * Constraints: No constraints specified.
     */
    val numArticles : Int
        get() {
            val o = __offset(146)
            return if(o != 0) bb.getInt(o + bb_pos) else 0
        }
    /**
     * This is the average tone of all documents containing one or more mentions of this event during the 15 minute update in which it was first seen. The score ranges from -100 (extremely negative) to +100 (extremely positive). Common values range between -10 and +10, with 0 indicating neutral.
     * Example: /// Example: 8.23
     * Constraints: No constraints specified.
     */
    val avgTone : Double
        get() {
            val o = __offset(148)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * This field records the URL or citation of the first news report it found this event in. In most cases this is the first report it saw the article in, but due to the timing and flow of news reports through the processing pipeline, this may not always be the very first report, but is at least in the first few reports.
     * Example: /// Example: Example_URL
     * Constraints: Minimum length = 0, Maximum length = 256
     */
    val sourceUrl : String?
        get() {
            val o = __offset(150)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val sourceUrlAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(150, 1)
    fun sourceUrlInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 150, 1)
    /**
     * Related document ids.
     * Example: /// Example: No example provided.
     * Constraints: No constraints specified.
     */
    fun relatedDocs(j: Int) : String? {
        val o = __offset(152)
        return if (o != 0) {
            __string(__vector(o) + j * 4)
        } else {
            null
        }
    }
    val relatedDocsLength : Int
        get() {
            val o = __offset(152); return if (o != 0) __vector_len(o) else 0
        }
    /**
     * A summary of the event.
     * Example: /// Example: Example_Summary
     * Constraints: Minimum length = 0, Maximum length = 4096
     */
    val summary : String?
        get() {
            val o = __offset(154)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val summaryAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(154, 1)
    fun summaryInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 154, 1)
    /**
     * Notes related to the documents or event.
     * Example: /// Example: Example_Notes
     * Constraints: Minimum length = 0, Maximum length = 4096
     */
    val notes : String?
        get() {
            val o = __offset(156)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val notesAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(156, 1)
    fun notesInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 156, 1)
    /**
     * Time the row was created in the database, auto-populated by the system, example = 2018-01-01T16:00:00.123Z.
     * Example: /// Example: 2018-01-01T16:00:00.123Z
     * Constraints: No constraints specified.
     */
    val createdAt : String?
        get() {
            val o = __offset(158)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val createdAtAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(158, 1)
    fun createdAtInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 158, 1)
    /**
     * Application user who created the row in the database, auto-populated by the system.
     * Example: /// Example: some.user
     * Constraints: No constraints specified.
     */
    val createdBy : String?
        get() {
            val o = __offset(160)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val createdByAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(160, 1)
    fun createdByInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 160, 1)
    /**
     * Source of the data.
     * Example: /// Example: Bluestaq
     * Constraints: Minimum length = 1, Maximum length = 64
     */
    val source : String?
        get() {
            val o = __offset(162)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val sourceAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(162, 1)
    fun sourceInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 162, 1)
    /**
     * Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
     * Example: /// Example: THIRD_PARTY_DATASOURCE
     * Constraints: Minimum length = 0, Maximum length = 64
     */
    val origin : String?
        get() {
            val o = __offset(164)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val originAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(164, 1)
    fun originInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 164, 1)
    /**
     * Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
     * EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
     * REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
     * SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
     * TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
     * Example: /// Example: TEST
     * Constraints: Minimum length = 1, Maximum length = 32
     */
    val dataMode : Byte
        get() {
            val o = __offset(166)
            return if(o != 0) bb.get(o + bb_pos) else 0
        }
    /**
     * The originating source network on which this record was created, auto-populated by the system.
     * Example: /// Example: ORIG
     * Constraints: Minimum length = 1, Maximum length = 32
     */
    val origNetwork : String?
        get() {
            val o = __offset(168)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val origNetworkAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(168, 1)
    fun origNetworkInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 168, 1)
    companion object {
        fun validateVersion() = Constants.FLATBUFFERS_24_3_25()
        fun getRootAsSigAct_Ingest(_bb: ByteBuffer): SigAct_Ingest = getRootAsSigAct_Ingest(_bb, SigAct_Ingest())
        fun getRootAsSigAct_Ingest(_bb: ByteBuffer, obj: SigAct_Ingest): SigAct_Ingest {
            _bb.order(ByteOrder.LITTLE_ENDIAN)
            return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb))
        }
        fun SigAct_IngestBufferHasIdentifier(_bb: ByteBuffer) : Boolean = __has_identifier(_bb, "SIGA")
        fun createSigAct_Ingest(builder: FlatBufferBuilder, idOffset: Int, classificationMarkingOffset: Int, sourceLanguageOffset: Int, countryCodeOffset: Int, cityOffset: Int, districtOffset: Int, provinceOffset: Int, lat: Double, lon: Double, milgridOffset: Int, theaterOffset: Int, areaOffset: Int, atextOffset: Int, agjsonOffset: Int, atypeOffset: Int, andims: Int, asrid: Int, eventStartOffset: Int, eventEndOffset: Int, reportDateOffset: Int, actorsOffset: Int, civAbd: Int, civDet: Int, civKia: Int, civWound: Int, coalAbd: Int, coalDet: Int, coalKia: Int, coalWound: Int, enemyAbd: Int, enemyDet: Int, enemyKia: Int, friendlyAbd: Int, friendlyDet: Int, friendlyKia: Int, friendlyWound: Int, hostNatAbd: Int, hostNatDet: Int, hostNatKia: Int, hostNatWound: Int, sideAabd: Int, sideAdet: Int, sideAkia: Int, sideAwound: Int, sideBabd: Int, sideBdet: Int, sideBkia: Int, sideBwound: Int, targetOffset: Int, eventDescriptionOffset: Int, eventTypeOffset: Int, typeOfAttackOffset: Int, complexAttack: Boolean, idNumberOffset: Int, confidence: Int, accuracy: Int, clarity: Int, cameoCodeOffset: Int, cameoBaseCodeOffset: Int, cameoRootCodeOffset: Int, goldstein: Double, documentSourceOffset: Int, documentFilenameOffset: Int, hasAttachment: Boolean, filesize: Long, checksumValueOffset: Int, repUnitOffset: Int, repUnitTypeOffset: Int, repUnitActivityOffset: Int, numMentions: Int, numSources: Int, numArticles: Int, avgTone: Double, sourceUrlOffset: Int, relatedDocsOffset: Int, summaryOffset: Int, notesOffset: Int, createdAtOffset: Int, createdByOffset: Int, sourceOffset: Int, originOffset: Int, dataMode: Byte, origNetworkOffset: Int) : Int {
            builder.startTable(83)
            addAvgTone(builder, avgTone)
            addFilesize(builder, filesize)
            addGoldstein(builder, goldstein)
            addLon(builder, lon)
            addLat(builder, lat)
            addOrigNetwork(builder, origNetworkOffset)
            addOrigin(builder, originOffset)
            addSource(builder, sourceOffset)
            addCreatedBy(builder, createdByOffset)
            addCreatedAt(builder, createdAtOffset)
            addNotes(builder, notesOffset)
            addSummary(builder, summaryOffset)
            addRelatedDocs(builder, relatedDocsOffset)
            addSourceUrl(builder, sourceUrlOffset)
            addNumArticles(builder, numArticles)
            addNumSources(builder, numSources)
            addNumMentions(builder, numMentions)
            addRepUnitActivity(builder, repUnitActivityOffset)
            addRepUnitType(builder, repUnitTypeOffset)
            addRepUnit(builder, repUnitOffset)
            addChecksumValue(builder, checksumValueOffset)
            addDocumentFilename(builder, documentFilenameOffset)
            addDocumentSource(builder, documentSourceOffset)
            addCameoRootCode(builder, cameoRootCodeOffset)
            addCameoBaseCode(builder, cameoBaseCodeOffset)
            addCameoCode(builder, cameoCodeOffset)
            addClarity(builder, clarity)
            addAccuracy(builder, accuracy)
            addConfidence(builder, confidence)
            addIdNumber(builder, idNumberOffset)
            addTypeOfAttack(builder, typeOfAttackOffset)
            addEventType(builder, eventTypeOffset)
            addEventDescription(builder, eventDescriptionOffset)
            addTarget(builder, targetOffset)
            addSideBWound(builder, sideBwound)
            addSideBKIA(builder, sideBkia)
            addSideBDet(builder, sideBdet)
            addSideBAbd(builder, sideBabd)
            addSideAWound(builder, sideAwound)
            addSideAKIA(builder, sideAkia)
            addSideADet(builder, sideAdet)
            addSideAAbd(builder, sideAabd)
            addHostNatWound(builder, hostNatWound)
            addHostNatKIA(builder, hostNatKia)
            addHostNatDet(builder, hostNatDet)
            addHostNatAbd(builder, hostNatAbd)
            addFriendlyWound(builder, friendlyWound)
            addFriendlyKIA(builder, friendlyKia)
            addFriendlyDet(builder, friendlyDet)
            addFriendlyAbd(builder, friendlyAbd)
            addEnemyKIA(builder, enemyKia)
            addEnemyDet(builder, enemyDet)
            addEnemyAbd(builder, enemyAbd)
            addCoalWound(builder, coalWound)
            addCoalKIA(builder, coalKia)
            addCoalDet(builder, coalDet)
            addCoalAbd(builder, coalAbd)
            addCivWound(builder, civWound)
            addCivKIA(builder, civKia)
            addCivDet(builder, civDet)
            addCivAbd(builder, civAbd)
            addActors(builder, actorsOffset)
            addReportDate(builder, reportDateOffset)
            addEventEnd(builder, eventEndOffset)
            addEventStart(builder, eventStartOffset)
            addAsrid(builder, asrid)
            addAndims(builder, andims)
            addAtype(builder, atypeOffset)
            addAgjson(builder, agjsonOffset)
            addAtext(builder, atextOffset)
            addArea(builder, areaOffset)
            addTheater(builder, theaterOffset)
            addMilgrid(builder, milgridOffset)
            addProvince(builder, provinceOffset)
            addDistrict(builder, districtOffset)
            addCity(builder, cityOffset)
            addCountryCode(builder, countryCodeOffset)
            addSourceLanguage(builder, sourceLanguageOffset)
            addClassificationMarking(builder, classificationMarkingOffset)
            addId(builder, idOffset)
            addDataMode(builder, dataMode)
            addHasAttachment(builder, hasAttachment)
            addComplexAttack(builder, complexAttack)
            return endSigAct_Ingest(builder)
        }
        fun startSigAct_Ingest(builder: FlatBufferBuilder) = builder.startTable(83)
        fun addId(builder: FlatBufferBuilder, id: Int) = builder.addOffset(0, id, 0)
        fun addClassificationMarking(builder: FlatBufferBuilder, classificationMarking: Int) = builder.addOffset(1, classificationMarking, 0)
        fun addSourceLanguage(builder: FlatBufferBuilder, sourceLanguage: Int) = builder.addOffset(2, sourceLanguage, 0)
        fun addCountryCode(builder: FlatBufferBuilder, countryCode: Int) = builder.addOffset(3, countryCode, 0)
        fun addCity(builder: FlatBufferBuilder, city: Int) = builder.addOffset(4, city, 0)
        fun addDistrict(builder: FlatBufferBuilder, district: Int) = builder.addOffset(5, district, 0)
        fun addProvince(builder: FlatBufferBuilder, province: Int) = builder.addOffset(6, province, 0)
        fun addLat(builder: FlatBufferBuilder, lat: Double) = builder.addDouble(7, lat, 0.0)
        fun addLon(builder: FlatBufferBuilder, lon: Double) = builder.addDouble(8, lon, 0.0)
        fun addMilgrid(builder: FlatBufferBuilder, milgrid: Int) = builder.addOffset(9, milgrid, 0)
        fun addTheater(builder: FlatBufferBuilder, theater: Int) = builder.addOffset(10, theater, 0)
        fun addArea(builder: FlatBufferBuilder, area: Int) = builder.addOffset(11, area, 0)
        fun addAtext(builder: FlatBufferBuilder, atext: Int) = builder.addOffset(12, atext, 0)
        fun addAgjson(builder: FlatBufferBuilder, agjson: Int) = builder.addOffset(13, agjson, 0)
        fun addAtype(builder: FlatBufferBuilder, atype: Int) = builder.addOffset(14, atype, 0)
        fun addAndims(builder: FlatBufferBuilder, andims: Int) = builder.addInt(15, andims, 0)
        fun addAsrid(builder: FlatBufferBuilder, asrid: Int) = builder.addInt(16, asrid, 0)
        fun addEventStart(builder: FlatBufferBuilder, eventStart: Int) = builder.addOffset(17, eventStart, 0)
        fun addEventEnd(builder: FlatBufferBuilder, eventEnd: Int) = builder.addOffset(18, eventEnd, 0)
        fun addReportDate(builder: FlatBufferBuilder, reportDate: Int) = builder.addOffset(19, reportDate, 0)
        fun addActors(builder: FlatBufferBuilder, actors: Int) = builder.addOffset(20, actors, 0)
        fun createActorsVector(builder: FlatBufferBuilder, data: IntArray) : Int {
            builder.startVector(4, data.size, 4)
            for (i in data.size - 1 downTo 0) {
                builder.addOffset(data[i])
            }
            return builder.endVector()
        }
        fun startActorsVector(builder: FlatBufferBuilder, numElems: Int) = builder.startVector(4, numElems, 4)
        fun addCivAbd(builder: FlatBufferBuilder, civAbd: Int) = builder.addInt(21, civAbd, 0)
        fun addCivDet(builder: FlatBufferBuilder, civDet: Int) = builder.addInt(22, civDet, 0)
        fun addCivKIA(builder: FlatBufferBuilder, civKia: Int) = builder.addInt(23, civKia, 0)
        fun addCivWound(builder: FlatBufferBuilder, civWound: Int) = builder.addInt(24, civWound, 0)
        fun addCoalAbd(builder: FlatBufferBuilder, coalAbd: Int) = builder.addInt(25, coalAbd, 0)
        fun addCoalDet(builder: FlatBufferBuilder, coalDet: Int) = builder.addInt(26, coalDet, 0)
        fun addCoalKIA(builder: FlatBufferBuilder, coalKia: Int) = builder.addInt(27, coalKia, 0)
        fun addCoalWound(builder: FlatBufferBuilder, coalWound: Int) = builder.addInt(28, coalWound, 0)
        fun addEnemyAbd(builder: FlatBufferBuilder, enemyAbd: Int) = builder.addInt(29, enemyAbd, 0)
        fun addEnemyDet(builder: FlatBufferBuilder, enemyDet: Int) = builder.addInt(30, enemyDet, 0)
        fun addEnemyKIA(builder: FlatBufferBuilder, enemyKia: Int) = builder.addInt(31, enemyKia, 0)
        fun addFriendlyAbd(builder: FlatBufferBuilder, friendlyAbd: Int) = builder.addInt(32, friendlyAbd, 0)
        fun addFriendlyDet(builder: FlatBufferBuilder, friendlyDet: Int) = builder.addInt(33, friendlyDet, 0)
        fun addFriendlyKIA(builder: FlatBufferBuilder, friendlyKia: Int) = builder.addInt(34, friendlyKia, 0)
        fun addFriendlyWound(builder: FlatBufferBuilder, friendlyWound: Int) = builder.addInt(35, friendlyWound, 0)
        fun addHostNatAbd(builder: FlatBufferBuilder, hostNatAbd: Int) = builder.addInt(36, hostNatAbd, 0)
        fun addHostNatDet(builder: FlatBufferBuilder, hostNatDet: Int) = builder.addInt(37, hostNatDet, 0)
        fun addHostNatKIA(builder: FlatBufferBuilder, hostNatKia: Int) = builder.addInt(38, hostNatKia, 0)
        fun addHostNatWound(builder: FlatBufferBuilder, hostNatWound: Int) = builder.addInt(39, hostNatWound, 0)
        fun addSideAAbd(builder: FlatBufferBuilder, sideAabd: Int) = builder.addInt(40, sideAabd, 0)
        fun addSideADet(builder: FlatBufferBuilder, sideAdet: Int) = builder.addInt(41, sideAdet, 0)
        fun addSideAKIA(builder: FlatBufferBuilder, sideAkia: Int) = builder.addInt(42, sideAkia, 0)
        fun addSideAWound(builder: FlatBufferBuilder, sideAwound: Int) = builder.addInt(43, sideAwound, 0)
        fun addSideBAbd(builder: FlatBufferBuilder, sideBabd: Int) = builder.addInt(44, sideBabd, 0)
        fun addSideBDet(builder: FlatBufferBuilder, sideBdet: Int) = builder.addInt(45, sideBdet, 0)
        fun addSideBKIA(builder: FlatBufferBuilder, sideBkia: Int) = builder.addInt(46, sideBkia, 0)
        fun addSideBWound(builder: FlatBufferBuilder, sideBwound: Int) = builder.addInt(47, sideBwound, 0)
        fun addTarget(builder: FlatBufferBuilder, target: Int) = builder.addOffset(48, target, 0)
        fun addEventDescription(builder: FlatBufferBuilder, eventDescription: Int) = builder.addOffset(49, eventDescription, 0)
        fun addEventType(builder: FlatBufferBuilder, eventType: Int) = builder.addOffset(50, eventType, 0)
        fun addTypeOfAttack(builder: FlatBufferBuilder, typeOfAttack: Int) = builder.addOffset(51, typeOfAttack, 0)
        fun addComplexAttack(builder: FlatBufferBuilder, complexAttack: Boolean) = builder.addBoolean(52, complexAttack, false)
        fun addIdNumber(builder: FlatBufferBuilder, idNumber: Int) = builder.addOffset(53, idNumber, 0)
        fun addConfidence(builder: FlatBufferBuilder, confidence: Int) = builder.addInt(54, confidence, 0)
        fun addAccuracy(builder: FlatBufferBuilder, accuracy: Int) = builder.addInt(55, accuracy, 0)
        fun addClarity(builder: FlatBufferBuilder, clarity: Int) = builder.addInt(56, clarity, 0)
        fun addCameoCode(builder: FlatBufferBuilder, cameoCode: Int) = builder.addOffset(57, cameoCode, 0)
        fun addCameoBaseCode(builder: FlatBufferBuilder, cameoBaseCode: Int) = builder.addOffset(58, cameoBaseCode, 0)
        fun addCameoRootCode(builder: FlatBufferBuilder, cameoRootCode: Int) = builder.addOffset(59, cameoRootCode, 0)
        fun addGoldstein(builder: FlatBufferBuilder, goldstein: Double) = builder.addDouble(60, goldstein, 0.0)
        fun addDocumentSource(builder: FlatBufferBuilder, documentSource: Int) = builder.addOffset(61, documentSource, 0)
        fun addDocumentFilename(builder: FlatBufferBuilder, documentFilename: Int) = builder.addOffset(62, documentFilename, 0)
        fun addHasAttachment(builder: FlatBufferBuilder, hasAttachment: Boolean) = builder.addBoolean(63, hasAttachment, false)
        fun addFilesize(builder: FlatBufferBuilder, filesize: Long) = builder.addLong(64, filesize, 0L)
        fun addChecksumValue(builder: FlatBufferBuilder, checksumValue: Int) = builder.addOffset(65, checksumValue, 0)
        fun addRepUnit(builder: FlatBufferBuilder, repUnit: Int) = builder.addOffset(66, repUnit, 0)
        fun addRepUnitType(builder: FlatBufferBuilder, repUnitType: Int) = builder.addOffset(67, repUnitType, 0)
        fun addRepUnitActivity(builder: FlatBufferBuilder, repUnitActivity: Int) = builder.addOffset(68, repUnitActivity, 0)
        fun addNumMentions(builder: FlatBufferBuilder, numMentions: Int) = builder.addInt(69, numMentions, 0)
        fun addNumSources(builder: FlatBufferBuilder, numSources: Int) = builder.addInt(70, numSources, 0)
        fun addNumArticles(builder: FlatBufferBuilder, numArticles: Int) = builder.addInt(71, numArticles, 0)
        fun addAvgTone(builder: FlatBufferBuilder, avgTone: Double) = builder.addDouble(72, avgTone, 0.0)
        fun addSourceUrl(builder: FlatBufferBuilder, sourceUrl: Int) = builder.addOffset(73, sourceUrl, 0)
        fun addRelatedDocs(builder: FlatBufferBuilder, relatedDocs: Int) = builder.addOffset(74, relatedDocs, 0)
        fun createRelatedDocsVector(builder: FlatBufferBuilder, data: IntArray) : Int {
            builder.startVector(4, data.size, 4)
            for (i in data.size - 1 downTo 0) {
                builder.addOffset(data[i])
            }
            return builder.endVector()
        }
        fun startRelatedDocsVector(builder: FlatBufferBuilder, numElems: Int) = builder.startVector(4, numElems, 4)
        fun addSummary(builder: FlatBufferBuilder, summary: Int) = builder.addOffset(75, summary, 0)
        fun addNotes(builder: FlatBufferBuilder, notes: Int) = builder.addOffset(76, notes, 0)
        fun addCreatedAt(builder: FlatBufferBuilder, createdAt: Int) = builder.addOffset(77, createdAt, 0)
        fun addCreatedBy(builder: FlatBufferBuilder, createdBy: Int) = builder.addOffset(78, createdBy, 0)
        fun addSource(builder: FlatBufferBuilder, source: Int) = builder.addOffset(79, source, 0)
        fun addOrigin(builder: FlatBufferBuilder, origin: Int) = builder.addOffset(80, origin, 0)
        fun addDataMode(builder: FlatBufferBuilder, dataMode: Byte) = builder.addByte(81, dataMode, 0)
        fun addOrigNetwork(builder: FlatBufferBuilder, origNetwork: Int) = builder.addOffset(82, origNetwork, 0)
        fun endSigAct_Ingest(builder: FlatBufferBuilder) : Int {
            val o = builder.endTable()
            return o
        }
        fun finishSigActIngestBuffer(builder: FlatBufferBuilder, offset: Int) = builder.finish(offset, "SIGA")
        fun finishSizePrefixedSigAct_IngestBuffer(builder: FlatBufferBuilder, offset: Int) = builder.finishSizePrefixed(offset, "SIGA")
    }
}
