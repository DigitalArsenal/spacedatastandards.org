// automatically generated by the FlatBuffers compiler, do not modify

import com.google.flatbuffers.BaseVector
import com.google.flatbuffers.BooleanVector
import com.google.flatbuffers.ByteVector
import com.google.flatbuffers.Constants
import com.google.flatbuffers.DoubleVector
import com.google.flatbuffers.FlatBufferBuilder
import com.google.flatbuffers.FloatVector
import com.google.flatbuffers.LongVector
import com.google.flatbuffers.StringVector
import com.google.flatbuffers.Struct
import com.google.flatbuffers.Table
import com.google.flatbuffers.UnionVector
import java.nio.ByteBuffer
import java.nio.ByteOrder
import kotlin.math.sign

/**
 * /// Provides information concerning search and rescue operations and other situations involving personnel recovery.
 */
@Suppress("unused")
class PersonnelRecovery_Ingest : Table() {

    fun __init(_i: Int, _bb: ByteBuffer)  {
        __reset(_i, _bb)
    }
    fun __assign(_i: Int, _bb: ByteBuffer) : PersonnelRecovery_Ingest {
        __init(_i, _bb)
        return this
    }
    /**
     * Unique identifier of the record, auto-generated by the system.
     * Example: /// Example: PERSONNEL_RECOVERY-ID
     * Constraints: Minimum length = 1, Maximum length = 36
     */
    val id : String?
        get() {
            val o = __offset(4)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val idAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(4, 1)
    fun idInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 4, 1)
    /**
     * Classification marking of the data in IC/CAPCO Portion-marked format.
     * Example: /// Example: U
     * Constraints: Minimum length = 1, Maximum length = 128
     */
    val classificationMarking : String?
        get() {
            val o = __offset(6)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val classificationMarkingAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(6, 1)
    fun classificationMarkingInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 6, 1)
    /**
     * Specifies the type of incident resulting in a recovery or evacuation mission.  Intended as, but not constrained to, MIL-STD-6016 J6.1 Emergency Type (e.g. NO STATEMENT, DOWN AIRCRAFT, MAN IN WATER, DITCHING, BAILOUT, DISTRESSED VEHICLE, GROUND INCIDENT, MEDICAL, ISOLATED PERSONS, etc.).
     * Example: /// Example: MEDICAL
     * Constraints: Minimum length = 1, Maximum length = 64
     */
    val type : String?
        get() {
            val o = __offset(8)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val typeAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(8, 1)
    fun typeInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 8, 1)
    /**
     * Time stamp of the original personnel recovery message, in ISO 8601 UTC format.
     * Example: /// Example: 2021-10-15T16:00:00.123Z
     * Constraints: No constraints specified.
     */
    val msgTime : String?
        get() {
            val o = __offset(10)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val msgTimeAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(10, 1)
    fun msgTimeInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 10, 1)
    /**
     * UUID identifying the Personnel Recovery  mission, which should remain the same on subsequent posts related to the same recovery mission.
     * Example: /// Example: RECOV-ID
     * Constraints: Minimum length = 0, Maximum length = 36
     */
    val recovId : String?
        get() {
            val o = __offset(12)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val recovIdAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(12, 1)
    fun recovIdInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 12, 1)
    /**
     * Unique identifier of a weather report associated with this recovery.
     * Example: /// Example: WEATHER_REPORT-ID
     * Constraints: Minimum length = 0, Maximum length = 36
     */
    val idWeatherReport : String?
        get() {
            val o = __offset(14)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val idWeatherReportAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(14, 1)
    fun idWeatherReportInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 14, 1)
    /**
     * WGS-84 latitude of the pickup location, in degrees. -90 to 90 degrees (negative values south of equator).
     * Example: /// Example: 75.1234
     * Constraints: No constraints specified.
     */
    val pickupLat : Double
        get() {
            val o = __offset(16)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * WGS-84 longitude of the pickup location, in degrees. -180 to 180 degrees (negative values west of Prime Meridian).
     * Example: /// Example: 175.1234
     * Constraints: No constraints specified.
     */
    val pickupLon : Double
        get() {
            val o = __offset(18)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Altitude relative to WGS-84 ellipsoid, in meters. Positive values indicate a point height above ellipsoid, and negative values indicate a point eight below ellipsoid.
     * Example: /// Example: 30.1234
     * Constraints: No constraints specified.
     */
    val pickupAlt : Double
        get() {
            val o = __offset(20)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Flag indicating the cancellation of this recovery.
     * Example: /// Example: True
     * Constraints: No constraints specified.
     */
    val termInd : Boolean
        get() {
            val o = __offset(22)
            return if(o != 0) 0.toByte() != bb.get(o + bb_pos) else false
        }
    /**
     * The confirmation status of the isolated personnel identity. Intended as, but not constrained to, MIL-STD-6016 J6.1 Authentication Status, Isolated Personnel (NO STATEMENT, AUTHENTICATED, NOT AUTHENTICATED, AUTHENTICATED UNDER DURESS, NOT APPLICABLE):
     * AUTHENTICATED:  Confirmed Friend
     * NOT AUTHENTICATED: Unconfirmed status
     * AUTHENTICATED UNDER DURESS:  Authentication comprised by hostiles.
     * NOT APPLICABLE:  Authentication not required.
     * Example: /// Example: NO STATEMENT
     * Constraints: Minimum length = 0, Maximum length = 36
     */
    val authStatus : String?
        get() {
            val o = __offset(24)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val authStatusAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(24, 1)
    fun authStatusInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 24, 1)
    /**
     * The count of persons requiring recovery.
     * Example: /// Example: 1
     * Constraints: No constraints specified.
     */
    val numPersons : Int
        get() {
            val o = __offset(26)
            return if(o != 0) bb.getInt(o + bb_pos) else 0
        }
    /**
     * The military classification of the personnel to be recovered. Intended as, but not constrained to, MIL-STD-6016 J6.1 Isolated Personnel Classification (NO STATEMENT, MILITARY, GOVERNMENT CIVILIAN, GOVERNMENT CONTRACTOR, CIVILIAN, MULTIPLE CLASSIFICATIONS).
     * Example: /// Example: CIVILIAN
     * Constraints: Minimum length = 0, Maximum length = 36
     */
    val milClass : String?
        get() {
            val o = __offset(28)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val milClassAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(28, 1)
    fun milClassInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 28, 1)
    /**
     * The country of origin or political entity of an isolated person subject to rescue or evacuation. If natAlliance is set to 126, then natAlliance1 must be non 0. If natAlliance is any number other than 126, then natAlliance1 will be set to 0 regardless. Defined in MIL-STD-6016 J6.1 Nationality/Alliance isolated person(s).
     * Example: /// Example: 1
     * Constraints: No constraints specified.
     */
    val natAlliance : Int
        get() {
            val o = __offset(30)
            return if(o != 0) bb.getInt(o + bb_pos) else 0
        }
    /**
     * Extended country of origin or political entity of an isolated person subject to rescue or evacuation. Specify an entry here only if natAlliance is 126. Defined in MIL-STD-6016 J6.1 Nationality/Alliance isolated person(s), 1.
     * Example: /// Example: 0
     * Constraints: No constraints specified.
     */
    val natAlliance1 : Int
        get() {
            val o = __offset(32)
            return if(o != 0) bb.getInt(o + bb_pos) else 0
        }
    /**
     * The survivor service identity (UNKNOWN MILITARY, UNKNOWN CIVILIAN, FRIEND MILITARY, FRIEND CIVIILIAN, NEUTRAL MILITARY, NEUTRAL CIVILIAN, HOSTILE MILITARY, HOSTILE CIVILIAN).
     * Example: /// Example: NEUTRAL CIVILIAN
     * Constraints: Minimum length = 0, Maximum length = 32
     */
    val identity : String?
        get() {
            val o = __offset(34)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val identityAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(34, 1)
    fun identityInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 34, 1)
    /**
     * Survivor communications equipment.  Intended as, but not constrained to, MIL-STD-6016 J6.1 Communications Equipment, Isolated Personnel (NO STATEMENT, SURVIVAL RADIO, RADIO BEACON, EPLRS, SIGNAL MIRROR, SMOKE FLARE, IR SIGNALLING DEVICE, SIGNALLING PANEL, FRIENDLY FORCE TRACKER, GPS BEACON, LL PHONE, TACTICAL RADIO LOS, TACTICAL RADIO BLOS).
     * Example: /// Example: LL PHONE
     * Constraints: Minimum length = 0, Maximum length = 64
     */
    val commEq1 : String?
        get() {
            val o = __offset(36)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val commEq1AsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(36, 1)
    fun commEq1InByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 36, 1)
    /**
     * Survivor communications equipment.  Intended as, but not constrained to, MIL-STD-6016 J6.1 Communications Equipment, Isolated Personnel (NO STATEMENT, SURVIVAL RADIO, RADIO BEACON, EPLRS, SIGNAL MIRROR, SMOKE FLARE, IR SIGNALLING DEVICE, SIGNALLING PANEL, FRIENDLY FORCE TRACKER, GPS BEACON, LL PHONE, TACTICAL RADIO LOS, TACTICAL RADIO BLOS).
     * Example: /// Example: LL PHONE
     * Constraints: Minimum length = 0, Maximum length = 64
     */
    val commEq2 : String?
        get() {
            val o = __offset(38)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val commEq2AsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(38, 1)
    fun commEq2InByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 38, 1)
    /**
     * Survivor communications equipment.  Intended as, but not constrained to, MIL-STD-6016 J6.1 Communications Equipment, Isolated Personnel (NO STATEMENT, SURVIVAL RADIO, RADIO BEACON, EPLRS, SIGNAL MIRROR, SMOKE FLARE, IR SIGNALLING DEVICE, SIGNALLING PANEL, FRIENDLY FORCE TRACKER, GPS BEACON, LL PHONE, TACTICAL RADIO LOS, TACTICAL RADIO BLOS).
     * Example: /// Example: LL PHONE
     * Constraints: Minimum length = 0, Maximum length = 64
     */
    val commEq3 : String?
        get() {
            val o = __offset(40)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val commEq3AsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(40, 1)
    fun commEq3InByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 40, 1)
    /**
     * Transmit voice frequency in 5Hz increments.
     * Example: /// Example: 5.5
     * Constraints: No constraints specified.
     */
    val txFreq : Double
        get() {
            val o = __offset(42)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Receive voice frequency in 5Hz increments. This field will auto populate with the txFreq value if the post element is null.
     * Example: /// Example: 5.5
     * Constraints: No constraints specified.
     */
    val rxFreq : Double
        get() {
            val o = __offset(44)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Number of littered personnel requiring recovery.
     * Example: /// Example: 0
     * Constraints: No constraints specified.
     */
    val numNonAmbulatory : Int
        get() {
            val o = __offset(46)
            return if(o != 0) bb.getInt(o + bb_pos) else 0
        }
    /**
     * Number of ambulatory personnel requiring recovery.
     * Example: /// Example: 1
     * Constraints: No constraints specified.
     */
    val numAmbulatory : Int
        get() {
            val o = __offset(48)
            return if(o != 0) bb.getInt(o + bb_pos) else 0
        }
    /**
     * Number of injured, but ambulatory, personnel requiring recovery.
     * Example: /// Example: 2
     * Constraints: No constraints specified.
     */
    val numAmbulatoryInjured : Int
        get() {
            val o = __offset(50)
            return if(o != 0) bb.getInt(o + bb_pos) else 0
        }
    /**
     * Survivor radio equipment. Intended as, but not constrained to, MIL-STD-6016 J6.1 Survivor Radio Type (NO STATEMENT, PRQ7SEL, PRC90, PRC112, PRC112B B1, PRC112C, PRC112D, PRC148 MBITR, PRC148 JEM, PRC149, PRC152, ACRPLB, OTHER).
     * Example: /// Example: NO STATEMENT
     * Constraints: Minimum length = 0, Maximum length = 32
     */
    val survivorRadio : String?
        get() {
            val o = __offset(52)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val survivorRadioAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(52, 1)
    fun survivorRadioInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 52, 1)
    /**
     * Preloaded message conveying the situation confronting the isolated person(s). Intended as, but not constrained to, MIL-STD-6016 J6.1 Survivor Radio Messages (e.g. INJURED CANT MOVE NO KNOWN HOSTILES, INJURED CANT MOVE HOSTILES NEARBY, UNINJURED CANT MOVE HOSTILES NEARBY, UNINJURED NO KNOWN HOSTILES, INJURED LIMITED MOBILITY).
     * Example: /// Example: UNINJURED CANT MOVE HOSTILES NEARBY
     * Constraints: Minimum length = 0, Maximum length = 64
     */
    val survivorMessages : String?
        get() {
            val o = __offset(54)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val survivorMessagesAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(54, 1)
    fun survivorMessagesInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 54, 1)
    /**
     * Flag indicating whether a radio identifier is reported.
     * Example: /// Example: False
     * Constraints: No constraints specified.
     */
    val beaconInd : Boolean
        get() {
            val o = __offset(56)
            return if(o != 0) 0.toByte() != bb.get(o + bb_pos) else false
        }
    /**
     * The call sign of the personnel to be recovered.
     * Example: /// Example: BADGER
     * Constraints: Minimum length = 0, Maximum length = 128
     */
    val callSign : String?
        get() {
            val o = __offset(58)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val callSignAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(58, 1)
    fun callSignInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 58, 1)
    /**
     * Additional specific messages received from survivor.
     * Example: /// Example: Additional message from survivor.
     * Constraints: Minimum length = 0, Maximum length = 1024
     */
    val textMsg : String?
        get() {
            val o = __offset(60)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val textMsgAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(60, 1)
    fun textMsgInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 60, 1)
    /**
     * Mechanism used to verify the survivors identity.
     * Example: /// Example: PASSPORT
     * Constraints: Minimum length = 0, Maximum length = 64
     */
    val authMethod : String?
        get() {
            val o = __offset(62)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val authMethodAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(62, 1)
    fun authMethodInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 62, 1)
    /**
     * No description provided.
     * Example: /// Example: No example provided.
     * Constraints: No constraints specified.
     */
    val objectiveAreaInfo : String?
        get() {
            val o = __offset(64)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val objectiveAreaInfoAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(64, 1)
    fun objectiveAreaInfoInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 64, 1)
    /**
     * No description provided.
     * Example: /// Example: No example provided.
     * Constraints: No constraints specified.
     */
    val executionInfo : String?
        get() {
            val o = __offset(66)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val executionInfoAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(66, 1)
    fun executionInfoInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 66, 1)
    /**
     * The originating source network on which this record was created, auto-populated by the system.
     * Example: /// Example: ORIG
     * Constraints: Minimum length = 0, Maximum length = 32
     */
    val origNetwork : String?
        get() {
            val o = __offset(68)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val origNetworkAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(68, 1)
    fun origNetworkInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 68, 1)
    /**
     * Time the row was created in the database, auto-populated by the system.
     * Example: /// Example: 2018-01-01T16:00:00.123Z
     * Constraints: No constraints specified.
     */
    val createdAt : String?
        get() {
            val o = __offset(70)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val createdAtAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(70, 1)
    fun createdAtInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 70, 1)
    /**
     * Application user who created the row in the database, auto-populated by the system.
     * Example: /// Example: some.user
     * Constraints: Minimum length = 0, Maximum length = 64
     */
    val createdBy : String?
        get() {
            val o = __offset(72)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val createdByAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(72, 1)
    fun createdByInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 72, 1)
    /**
     * Source of the data.
     * Example: /// Example: Bluestaq
     * Constraints: Minimum length = 1, Maximum length = 64
     */
    val source : String?
        get() {
            val o = __offset(74)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val sourceAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(74, 1)
    fun sourceInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 74, 1)
    /**
     * Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
     * Example: /// Example: THIRD_PARTY_DATASOURCE
     * Constraints: Minimum length = 0, Maximum length = 64
     */
    val origin : String?
        get() {
            val o = __offset(76)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val originAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(76, 1)
    fun originInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 76, 1)
    /**
     * Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
     * EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
     * REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
     * SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
     * TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
     * Example: /// Example: TEST
     * Constraints: Minimum length = 1, Maximum length = 32
     */
    val dataMode : Byte
        get() {
            val o = __offset(78)
            return if(o != 0) bb.get(o + bb_pos) else 0
        }
    companion object {
        fun validateVersion() = Constants.FLATBUFFERS_24_3_25()
        fun getRootAsPersonnelRecovery_Ingest(_bb: ByteBuffer): PersonnelRecovery_Ingest = getRootAsPersonnelRecovery_Ingest(_bb, PersonnelRecovery_Ingest())
        fun getRootAsPersonnelRecovery_Ingest(_bb: ByteBuffer, obj: PersonnelRecovery_Ingest): PersonnelRecovery_Ingest {
            _bb.order(ByteOrder.LITTLE_ENDIAN)
            return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb))
        }
        fun PersonnelRecovery_IngestBufferHasIdentifier(_bb: ByteBuffer) : Boolean = __has_identifier(_bb, "PERS")
        fun createPersonnelRecovery_Ingest(builder: FlatBufferBuilder, idOffset: Int, classificationMarkingOffset: Int, typeOffset: Int, msgTimeOffset: Int, recovIdOffset: Int, idWeatherReportOffset: Int, pickupLat: Double, pickupLon: Double, pickupAlt: Double, termInd: Boolean, authStatusOffset: Int, numPersons: Int, milClassOffset: Int, natAlliance: Int, natAlliance1: Int, identityOffset: Int, commEq1Offset: Int, commEq2Offset: Int, commEq3Offset: Int, txFreq: Double, rxFreq: Double, numNonAmbulatory: Int, numAmbulatory: Int, numAmbulatoryInjured: Int, survivorRadioOffset: Int, survivorMessagesOffset: Int, beaconInd: Boolean, callSignOffset: Int, textMsgOffset: Int, authMethodOffset: Int, objectiveAreaInfoOffset: Int, executionInfoOffset: Int, origNetworkOffset: Int, createdAtOffset: Int, createdByOffset: Int, sourceOffset: Int, originOffset: Int, dataMode: Byte) : Int {
            builder.startTable(38)
            addRxFreq(builder, rxFreq)
            addTxFreq(builder, txFreq)
            addPickupAlt(builder, pickupAlt)
            addPickupLon(builder, pickupLon)
            addPickupLat(builder, pickupLat)
            addOrigin(builder, originOffset)
            addSource(builder, sourceOffset)
            addCreatedBy(builder, createdByOffset)
            addCreatedAt(builder, createdAtOffset)
            addOrigNetwork(builder, origNetworkOffset)
            addExecutionInfo(builder, executionInfoOffset)
            addObjectiveAreaInfo(builder, objectiveAreaInfoOffset)
            addAuthMethod(builder, authMethodOffset)
            addTextMsg(builder, textMsgOffset)
            addCallSign(builder, callSignOffset)
            addSurvivorMessages(builder, survivorMessagesOffset)
            addSurvivorRadio(builder, survivorRadioOffset)
            addNumAmbulatoryInjured(builder, numAmbulatoryInjured)
            addNumAmbulatory(builder, numAmbulatory)
            addNumNonAmbulatory(builder, numNonAmbulatory)
            addCommEq3(builder, commEq3Offset)
            addCommEq2(builder, commEq2Offset)
            addCommEq1(builder, commEq1Offset)
            addIdentity(builder, identityOffset)
            addNatAlliance1(builder, natAlliance1)
            addNatAlliance(builder, natAlliance)
            addMilClass(builder, milClassOffset)
            addNumPersons(builder, numPersons)
            addAuthStatus(builder, authStatusOffset)
            addIdWeatherReport(builder, idWeatherReportOffset)
            addRecovId(builder, recovIdOffset)
            addMsgTime(builder, msgTimeOffset)
            addType(builder, typeOffset)
            addClassificationMarking(builder, classificationMarkingOffset)
            addId(builder, idOffset)
            addDataMode(builder, dataMode)
            addBeaconInd(builder, beaconInd)
            addTermInd(builder, termInd)
            return endPersonnelRecovery_Ingest(builder)
        }
        fun startPersonnelRecovery_Ingest(builder: FlatBufferBuilder) = builder.startTable(38)
        fun addId(builder: FlatBufferBuilder, id: Int) = builder.addOffset(0, id, 0)
        fun addClassificationMarking(builder: FlatBufferBuilder, classificationMarking: Int) = builder.addOffset(1, classificationMarking, 0)
        fun addType(builder: FlatBufferBuilder, type: Int) = builder.addOffset(2, type, 0)
        fun addMsgTime(builder: FlatBufferBuilder, msgTime: Int) = builder.addOffset(3, msgTime, 0)
        fun addRecovId(builder: FlatBufferBuilder, recovId: Int) = builder.addOffset(4, recovId, 0)
        fun addIdWeatherReport(builder: FlatBufferBuilder, idWeatherReport: Int) = builder.addOffset(5, idWeatherReport, 0)
        fun addPickupLat(builder: FlatBufferBuilder, pickupLat: Double) = builder.addDouble(6, pickupLat, 0.0)
        fun addPickupLon(builder: FlatBufferBuilder, pickupLon: Double) = builder.addDouble(7, pickupLon, 0.0)
        fun addPickupAlt(builder: FlatBufferBuilder, pickupAlt: Double) = builder.addDouble(8, pickupAlt, 0.0)
        fun addTermInd(builder: FlatBufferBuilder, termInd: Boolean) = builder.addBoolean(9, termInd, false)
        fun addAuthStatus(builder: FlatBufferBuilder, authStatus: Int) = builder.addOffset(10, authStatus, 0)
        fun addNumPersons(builder: FlatBufferBuilder, numPersons: Int) = builder.addInt(11, numPersons, 0)
        fun addMilClass(builder: FlatBufferBuilder, milClass: Int) = builder.addOffset(12, milClass, 0)
        fun addNatAlliance(builder: FlatBufferBuilder, natAlliance: Int) = builder.addInt(13, natAlliance, 0)
        fun addNatAlliance1(builder: FlatBufferBuilder, natAlliance1: Int) = builder.addInt(14, natAlliance1, 0)
        fun addIdentity(builder: FlatBufferBuilder, identity: Int) = builder.addOffset(15, identity, 0)
        fun addCommEq1(builder: FlatBufferBuilder, commEq1: Int) = builder.addOffset(16, commEq1, 0)
        fun addCommEq2(builder: FlatBufferBuilder, commEq2: Int) = builder.addOffset(17, commEq2, 0)
        fun addCommEq3(builder: FlatBufferBuilder, commEq3: Int) = builder.addOffset(18, commEq3, 0)
        fun addTxFreq(builder: FlatBufferBuilder, txFreq: Double) = builder.addDouble(19, txFreq, 0.0)
        fun addRxFreq(builder: FlatBufferBuilder, rxFreq: Double) = builder.addDouble(20, rxFreq, 0.0)
        fun addNumNonAmbulatory(builder: FlatBufferBuilder, numNonAmbulatory: Int) = builder.addInt(21, numNonAmbulatory, 0)
        fun addNumAmbulatory(builder: FlatBufferBuilder, numAmbulatory: Int) = builder.addInt(22, numAmbulatory, 0)
        fun addNumAmbulatoryInjured(builder: FlatBufferBuilder, numAmbulatoryInjured: Int) = builder.addInt(23, numAmbulatoryInjured, 0)
        fun addSurvivorRadio(builder: FlatBufferBuilder, survivorRadio: Int) = builder.addOffset(24, survivorRadio, 0)
        fun addSurvivorMessages(builder: FlatBufferBuilder, survivorMessages: Int) = builder.addOffset(25, survivorMessages, 0)
        fun addBeaconInd(builder: FlatBufferBuilder, beaconInd: Boolean) = builder.addBoolean(26, beaconInd, false)
        fun addCallSign(builder: FlatBufferBuilder, callSign: Int) = builder.addOffset(27, callSign, 0)
        fun addTextMsg(builder: FlatBufferBuilder, textMsg: Int) = builder.addOffset(28, textMsg, 0)
        fun addAuthMethod(builder: FlatBufferBuilder, authMethod: Int) = builder.addOffset(29, authMethod, 0)
        fun addObjectiveAreaInfo(builder: FlatBufferBuilder, objectiveAreaInfo: Int) = builder.addOffset(30, objectiveAreaInfo, 0)
        fun addExecutionInfo(builder: FlatBufferBuilder, executionInfo: Int) = builder.addOffset(31, executionInfo, 0)
        fun addOrigNetwork(builder: FlatBufferBuilder, origNetwork: Int) = builder.addOffset(32, origNetwork, 0)
        fun addCreatedAt(builder: FlatBufferBuilder, createdAt: Int) = builder.addOffset(33, createdAt, 0)
        fun addCreatedBy(builder: FlatBufferBuilder, createdBy: Int) = builder.addOffset(34, createdBy, 0)
        fun addSource(builder: FlatBufferBuilder, source: Int) = builder.addOffset(35, source, 0)
        fun addOrigin(builder: FlatBufferBuilder, origin: Int) = builder.addOffset(36, origin, 0)
        fun addDataMode(builder: FlatBufferBuilder, dataMode: Byte) = builder.addByte(37, dataMode, 0)
        fun endPersonnelRecovery_Ingest(builder: FlatBufferBuilder) : Int {
            val o = builder.endTable()
            return o
        }
        fun finishPersonnelRecoveryIngestBuffer(builder: FlatBufferBuilder, offset: Int) = builder.finish(offset, "PERS")
        fun finishSizePrefixedPersonnelRecovery_IngestBuffer(builder: FlatBufferBuilder, offset: Int) = builder.finishSizePrefixed(offset, "PERS")
    }
}
