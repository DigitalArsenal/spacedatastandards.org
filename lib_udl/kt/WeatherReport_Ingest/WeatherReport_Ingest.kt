// automatically generated by the FlatBuffers compiler, do not modify

import com.google.flatbuffers.BaseVector
import com.google.flatbuffers.BooleanVector
import com.google.flatbuffers.ByteVector
import com.google.flatbuffers.Constants
import com.google.flatbuffers.DoubleVector
import com.google.flatbuffers.FlatBufferBuilder
import com.google.flatbuffers.FloatVector
import com.google.flatbuffers.LongVector
import com.google.flatbuffers.StringVector
import com.google.flatbuffers.Struct
import com.google.flatbuffers.Table
import com.google.flatbuffers.UnionVector
import java.nio.ByteBuffer
import java.nio.ByteOrder
import kotlin.math.sign

/**
 * /// These services provide for posting and querying Weather Over Target information. The information contained within describes the current weather conditions over a target area or region to include navigational considerations such as altimeter settings, visibility, cloud heights etc.
 */
@Suppress("unused")
class WeatherReport_Ingest : Table() {

    fun __init(_i: Int, _bb: ByteBuffer)  {
        __reset(_i, _bb)
    }
    fun __assign(_i: Int, _bb: ByteBuffer) : WeatherReport_Ingest {
        __init(_i, _bb)
        return this
    }
    /**
     * Unique identifier of the record, auto-generated by the system.
     * Example: /// Example: WEATHER-REPORT-ID
     * Constraints: Minimum length = 1, Maximum length = 36
     */
    val id : String?
        get() {
            val o = __offset(4)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val idAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(4, 1)
    fun idInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 4, 1)
    /**
     * Classification marking of the data in IC/CAPCO Portion-marked format.
     * Example: /// Example: U
     * Constraints: Minimum length = 1, Maximum length = 128
     */
    val classificationMarking : String?
        get() {
            val o = __offset(6)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val classificationMarkingAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(6, 1)
    fun classificationMarkingInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 6, 1)
    /**
     * Unique identifier of the sensor making the weather measurement.
     * Example: /// Example: 0129f577-e04c-441e-65ca-0a04a750bed9
     * Constraints: Minimum length = 0, Maximum length = 36
     */
    val idSensor : String?
        get() {
            val o = __offset(8)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val idSensorAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(8, 1)
    fun idSensorInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 8, 1)
    /**
     * Optional identifier provided by the record source. This may be an internal identifier and not necessarily a valid sensor ID.
     * Example: /// Example: ORIGSENSOR-ID
     * Constraints: Minimum length = 0, Maximum length = 64
     */
    val origSensorId : String?
        get() {
            val o = __offset(10)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val origSensorIdAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(10, 1)
    fun origSensorIdInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 10, 1)
    /**
     * Identifier of the weather over target, which should remain the same on subsequent Weather Over Target records.
     * Example: /// Example: WEATHER-ID
     * Constraints: Minimum length = 0, Maximum length = 128
     */
    val weatherId : String?
        get() {
            val o = __offset(12)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val weatherIdAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(12, 1)
    fun weatherIdInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 12, 1)
    /**
     * Identifier of the ground imagery associated for this weather over target report.
     * Example: /// Example: GROUND-IMAGERY-ID
     * Constraints: Minimum length = 0, Maximum length = 36
     */
    val idGroundImagery : String?
        get() {
            val o = __offset(14)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val idGroundImageryAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(14, 1)
    fun idGroundImageryInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 14, 1)
    /**
     * Identifier of the Site that is associated with this weather report.
     * Example: /// Example: AIRFIELD-ID
     * Constraints: Minimum length = 0, Maximum length = 36
     */
    val idSite : String?
        get() {
            val o = __offset(16)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val idSiteAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(16, 1)
    fun idSiteInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 16, 1)
    /**
     * Identifier of the Airfield associated with this weather report.
     * Example: /// Example: 8fb38d6d-a3de-45dd-8974-4e3ed73e9449
     * Constraints: Minimum length = 0, Maximum length = 36
     */
    val idAirfield : String?
        get() {
            val o = __offset(18)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val idAirfieldAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(18, 1)
    fun idAirfieldInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 18, 1)
    /**
     * The International Civil Aviation Organization (ICAO) code of the airfield associated with this weather report.
     * Example: /// Example: KAFF
     * Constraints: Minimum length = 0, Maximum length = 4
     */
    val icao : String?
        get() {
            val o = __offset(20)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val icaoAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(20, 1)
    fun icaoInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 20, 1)
    /**
     * Optional observation or forecast ID from external systems. This field has no meaning within UDL and is provided as a convenience for systems that require tracking of an internal system generated ID.
     * Example: /// Example: GDSSMB022408301601304517
     * Constraints: Minimum length = 0, Maximum length = 36
     */
    val externalId : String?
        get() {
            val o = __offset(22)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val externalIdAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(22, 1)
    fun externalIdInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 22, 1)
    /**
     * Optional location ID from external systems. This field has no meaning within UDL and is provided as a convenience for systems that require tracking of an internal system generated ID.
     * Example: /// Example: TMDS060AD4OG03CC
     * Constraints: Minimum length = 0, Maximum length = 36
     */
    val externalLocationId : String?
        get() {
            val o = __offset(24)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val externalLocationIdAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(24, 1)
    fun externalLocationIdInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 24, 1)
    /**
     * Identifies the type of weather report (e.g. OBSERVATION, FORECAST, etc.).
     * Example: /// Example: FORECAST
     * Constraints: Minimum length = 1, Maximum length = 32
     */
    val reportType : String?
        get() {
            val o = __offset(26)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val reportTypeAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(26, 1)
    fun reportTypeInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 26, 1)
    /**
     * Datetime when a weather observation was made or forecast was issued in ISO 8601 UTC datetime format with microsecond precision.
     * Example: /// Example: 2018-01-01T16:00:00.123456Z
     * Constraints: No constraints specified.
     */
    val obTime : String?
        get() {
            val o = __offset(28)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val obTimeAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(28, 1)
    fun obTimeInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 28, 1)
    /**
     * Valid start time of a weather forecast in ISO 8601 UTC datetime format with millisecond precision.
     * Example: /// Example: 2024-01-01T16:00:00.123Z
     * Constraints: No constraints specified.
     */
    val forecastStartTime : String?
        get() {
            val o = __offset(30)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val forecastStartTimeAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(30, 1)
    fun forecastStartTimeInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 30, 1)
    /**
     * Valid end time of a weather forecast in ISO 8601 UTC datetime format with millisecond precision.
     * Example: /// Example: 2024-01-01T18:00:00.123Z
     * Constraints: No constraints specified.
     */
    val forecastEndTime : String?
        get() {
            val o = __offset(32)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val forecastEndTimeAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(32, 1)
    fun forecastEndTimeInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 32, 1)
    /**
     * The central WGS-84 latitude of the weather report, in degrees. -90 to 90 degrees (negative values south of equator).
     * Example: /// Example: 56.12
     * Constraints: No constraints specified.
     */
    val lat : Double
        get() {
            val o = __offset(34)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * The central WGS-84 longitude of the weather report, in degrees. -180 to 180 degrees (negative values west of Prime Meridian).
     * Example: /// Example: -156.6
     * Constraints: No constraints specified.
     */
    val lon : Double
        get() {
            val o = __offset(36)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Point height above ellipsoid (WGS-84), in meters.
     * Example: /// Example: 123.12
     * Constraints: No constraints specified.
     */
    val alt : Double
        get() {
            val o = __offset(38)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Altitude of a pressure surface in the atmosphere above mean sea level, in meters.
     * Example: /// Example: 1000.0
     * Constraints: No constraints specified.
     */
    val geoPotentialAlt : Double
        get() {
            val o = __offset(40)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Specific pressures or heights where measurements are taken, labeled as either MANDATORY or SIGNIFICANT levels. Mandatory levels are at particular pressures at geopotential heights. Significant levels are at particular geometric heights.
     * Example: /// Example: MANDATORY
     * Constraints: Minimum length = 0, Maximum length = 16
     */
    val dataLevel : String?
        get() {
            val o = __offset(42)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val dataLevelAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(42, 1)
    fun dataLevelInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 42, 1)
    /**
     * Optional geographical region or polygon (lat/lon pairs) of the area surrounding the point of interest as projected on the ground.
     * Example: /// Example: POLYGON((67.3291113966927 26.156175339112,67.2580009640721 26.091022064271,67.1795862381682 26.6637992964562,67.2501237475598 26.730115808233,67.3291113966927 26.156175339112))
     * Constraints: No constraints specified.
     */
    val area : String?
        get() {
            val o = __offset(44)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val areaAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(44, 1)
    fun areaInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 44, 1)
    /**
     * Geographical region or polygon (lon/lat pairs), as depicted by the Well-Known Text representation of the geometry/geography, of the image as projected on the ground. WKT reference: https://www.opengeospatial.org/standards/wkt-crs. Ignored if included with a POST or PUT request that also specifies a valid 'area' field.
     * Example: /// Example: POLYGON((67.3291113966927 26.156175339112,67.2580009640721 26.091022064271,67.1795862381682 26.6637992964562,67.2501237475598 26.730115808233,67.3291113966927 26.156175339112))
     * Constraints: No constraints specified.
     */
    val atext : String?
        get() {
            val o = __offset(46)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val atextAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(46, 1)
    fun atextInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 46, 1)
    /**
     * Geographical region or polygon (lat/lon pairs), as depicted by the GeoJSON representation of the geometry/geography, of the image as projected on the ground. GeoJSON Reference: https://geojson.org/. Ignored if included with a POST or PUT request that also specifies a valid 'area' or 'atext' field.
     * Example: /// Example: {"type":"Polygon","coordinates":[[[67.3291113966927,26.156175339112],[67.2580009640721,26.091022064271],[67.1795862381682,26.6637992964562],[67.2501237475598,26.730115808233],[67.3291113966927,26.156175339112]]]}
     * Constraints: No constraints specified.
     */
    val agjson : String?
        get() {
            val o = __offset(48)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val agjsonAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(48, 1)
    fun agjsonInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 48, 1)
    /**
     * Type of region as projected on the ground.
     * Example: /// Example: ST_Polygon
     * Constraints: Minimum length = 0, Maximum length = 128
     */
    val atype : String?
        get() {
            val o = __offset(50)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val atypeAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(50, 1)
    fun atypeInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 50, 1)
    /**
     * Number of dimensions of the geometry depicted by region.
     * Example: /// Example: 2
     * Constraints: No constraints specified.
     */
    val andims : Int
        get() {
            val o = __offset(52)
            return if(o != 0) bb.getInt(o + bb_pos) else 0
        }
    /**
     * Geographical spatial_ref_sys for region.
     * Example: /// Example: 4326
     * Constraints: No constraints specified.
     */
    val asrid : Int
        get() {
            val o = __offset(54)
            return if(o != 0) bb.getInt(o + bb_pos) else 0
        }
    /**
     * Expresses the speed of the wind in meters/second.
     * Example: /// Example: 1.23
     * Constraints: No constraints specified.
     */
    val windSpd : Double
        get() {
            val o = __offset(56)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Average wind speed over a 1 minute period, in meters/second.
     * Example: /// Example: 12.1
     * Constraints: No constraints specified.
     */
    val windSpdAvg : Double
        get() {
            val o = __offset(58)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Expresses the max gust speed of the wind, in meters/second.
     * Example: /// Example: 10.23
     * Constraints: No constraints specified.
     */
    val windGust : Double
        get() {
            val o = __offset(60)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Expresses the max gust speed of the wind recorded in a 10 minute period, in meters/second.
     * Example: /// Example: 13.2
     * Constraints: No constraints specified.
     */
    val windGust10 : Double
        get() {
            val o = __offset(62)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * The change in wind speed between two different altitudes divided by the vertical distance between them, in units of 1/sec.
     * Example: /// Example: 3.8
     * Constraints: No constraints specified.
     */
    val vshear : Double
        get() {
            val o = __offset(64)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * The change in wind speed between two different lateral positions at a given altitude divided by the horizontal distance between them, in units of 1/sec.
     * Example: /// Example: 3.8
     * Constraints: No constraints specified.
     */
    val hshear : Double
        get() {
            val o = __offset(66)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Average radial velocity of wind as measured by radar with multi-beam configurations. Radial velocity is the component of wind velocity moving directly toward or away from a sensor's radar beam, in meters per second. Values can either be positive (wind is moving away from the radar) or negative (wind is moving toward the radar).
     * Example: /// Example: -0.04
     * Constraints: No constraints specified.
     */
    val radVel : Double
        get() {
            val o = __offset(68)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Component of wind velocity moving directly toward or away from radar beam 1, in meters per second. Radial velocity values can either be positive (wind is moving away from the radar) or negative (wind is moving toward the radar). The beam number designation is defined by the data source.
     * Example: /// Example: 4.4
     * Constraints: No constraints specified.
     */
    val radVelBeam1 : Double
        get() {
            val o = __offset(70)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Component of wind velocity moving directly toward or away from radar beam 2, in meters per second. Radial velocity values can either be positive (wind is moving away from the radar) or negative (wind is moving toward the radar). The beam number designation is defined by the data source.
     * Example: /// Example: -0.2
     * Constraints: No constraints specified.
     */
    val radVelBeam2 : Double
        get() {
            val o = __offset(72)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Component of wind velocity moving directly toward or away from radar beam 3, in meters per second. Radial velocity values can either be positive (wind is moving away from the radar) or negative (wind is moving toward the radar). The beam number designation is defined by the data source.
     * Example: /// Example: -0.2
     * Constraints: No constraints specified.
     */
    val radVelBeam3 : Double
        get() {
            val o = __offset(74)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Component of wind velocity moving directly toward or away from radar beam 4, in meters per second. Radial velocity values can either be positive (wind is moving away from the radar) or negative (wind is moving toward the radar). The beam number designation is defined by the data source.
     * Example: /// Example: 11.4
     * Constraints: No constraints specified.
     */
    val radVelBeam4 : Double
        get() {
            val o = __offset(76)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Component of wind velocity moving directly toward or away from radar beam 5, in meters per second. Radial velocity values can either be positive (wind is moving away from the radar) or negative (wind is moving toward the radar). The beam number designation is defined by the data source.
     * Example: /// Example: 4.1
     * Constraints: No constraints specified.
     */
    val radVelBeam5 : Double
        get() {
            val o = __offset(78)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Direction the wind is blowing, in degrees clockwise from true north.
     * Example: /// Example: 75.1234
     * Constraints: No constraints specified.
     */
    val windDir : Double
        get() {
            val o = __offset(80)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Average wind direction over a 1 minute period, in degrees clockwise from true north.
     * Example: /// Example: 57.1
     * Constraints: No constraints specified.
     */
    val windDirAvg : Double
        get() {
            val o = __offset(82)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Wind direction corresponding to the peak wind speed during a 1 minute period, in degrees clockwise from true north.
     * Example: /// Example: 78.4
     * Constraints: No constraints specified.
     */
    val windDirPeak : Double
        get() {
            val o = __offset(84)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Wind direction corresponding to the peak wind speed during a 10 minute period, in degrees clockwise from true north.
     * Example: /// Example: 44.5
     * Constraints: No constraints specified.
     */
    val windDirPeak10 : Double
        get() {
            val o = __offset(86)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * The perceived temperature in degrees C.
     * Example: /// Example: 15.6
     * Constraints: No constraints specified.
     */
    val windChill : Double
        get() {
            val o = __offset(88)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * The difference in wind direction recorded over a period of time, in degrees.
     * Example: /// Example: 9.1
     * Constraints: No constraints specified.
     */
    val dirDev : Double
        get() {
            val o = __offset(90)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Boolean describing whether or not the wind direction and/or speed is variable.
     * Example: /// Example: False
     * Constraints: No constraints specified.
     */
    val windVar : Boolean
        get() {
            val o = __offset(92)
            return if(o != 0) 0.toByte() != bb.get(o + bb_pos) else false
        }
    /**
     * Covariance matrix, in knots and second based units.  The array values represent the lower triangular half of the covariance matrix. The size of the covariance matrix is 2x2.  The covariance elements are position dependent within the array with values ordered as follows:
     * &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;x&nbsp;&nbsp;&nbsp;&nbsp;y
     * x&nbsp;&nbsp;&nbsp;&nbsp;1
     * y&nbsp;&nbsp;&nbsp;&nbsp;2&nbsp;&nbsp;&nbsp;3
     * The cov array should contain only the lower left triangle values from top left down to bottom right, in order.
     * Example: /// Example: [1.1, 2.2]
     * Constraints: No constraints specified.
     */
    fun windCov(j: Int) : String? {
        val o = __offset(94)
        return if (o != 0) {
            __string(__vector(o) + j * 4)
        } else {
            null
        }
    }
    val windCovLength : Int
        get() {
            val o = __offset(94); return if (o != 0) __vector_len(o) else 0
        }
    /**
     * Array of cloud cover descriptions - each element can be maximum of 16 characters long. Intended as, but not constrained to, MIL-STD-6016 cloud cover designations (e.g. SKY CLEAR, SCATTERED, BROKEN, OVERCAST, SKY OBSCURED). Each element of the array corresponds to the elements in the cloudHght array specified respectively.
     * Example: /// Example: ['OVERCAST', 'BROKEN']
     * Constraints: No constraints specified.
     */
    fun cloudCover(j: Int) : String? {
        val o = __offset(96)
        return if (o != 0) {
            __string(__vector(o) + j * 4)
        } else {
            null
        }
    }
    val cloudCoverLength : Int
        get() {
            val o = __offset(96); return if (o != 0) __vector_len(o) else 0
        }
    /**
     * Array of cloud base heights in meters described by the cloudHght array. Each element of the array corresponds to the elements in the cloudCover array specified respectively.
     * Example: /// Example: [1.2, 2.2]
     * Constraints: No constraints specified.
     */
    fun cloudHght(j: Int) : String? {
        val o = __offset(98)
        return if (o != 0) {
            __string(__vector(o) + j * 4)
        } else {
            null
        }
    }
    val cloudHghtLength : Int
        get() {
            val o = __offset(98); return if (o != 0) __vector_len(o) else 0
        }
    /**
     * Describes the actual weather at position. Intended as, but not constrained to, MIL-STD-6016 actual weather (e.g. NO STATEMENT, NO SIGNIFICANT WEATHER, DRIZZLE, RAIN, SNOW, SNOW GRAINS, DIAMOND DUST, ICE PELLETS, HAIL, SMALL HAIL, MIST, FOG, SMOKE, VOLCANIC ASH, WIDESPREAD DUST, SAND, HAZE, WELL DEVELOPED DUST, SQUALLS, FUNNEL CLOUDS, SANDSTORM, DUSTSTORM, LOW CLOUDS, CLOUDY, GROUND FOG, DUST, HEAVY RAIN, THUNDERSTORMS AWT, HEAVY THUNDERSTORMS, HURRICANE TYPHOON CYCLONE, TROPICAL STORM, TORNADO, HIGH WINDS, LIGHTNING, FREEZING DRIZZLE, FREEZING RAIN, HEAVY SNOW, ICING, SNOW OR RAIN AND SNOW MIXED, SHOWERS, CLEAR).
     * Example: /// Example: NO STATEMENT
     * Constraints: Minimum length = 0, Maximum length = 32
     */
    val actWeather : String?
        get() {
            val o = __offset(100)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val actWeatherAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(100, 1)
    fun actWeatherInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 100, 1)
    /**
     * Used in conjunction with actWeather and weatherInt. Intended as, but not constrained to, MIL-STD-6016 actual weather descriptor (e.g. NO STATEMENT, SHALLOW, PATCHES, LOW DRIFTING, BLOWING, SHOWERS, THUNDERSTORMS, SUPERCOOLED).
     * Example: /// Example: NO STATEMENT
     * Constraints: Minimum length = 0, Maximum length = 32
     */
    val weatherDesc : String?
        get() {
            val o = __offset(102)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val weatherDescAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(102, 1)
    fun weatherDescInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 102, 1)
    /**
     * Weather Intensity. Used in conjunction with actWeather and weatherDesc. Intended as, but not constrained to, MIL-STD-6016 weather intensity (e.g. NO STATEMENT, LIGHT, MODERATE, HEAVY, IN VICINITY).
     * Example: /// Example: NO STATEMENT
     * Constraints: Minimum length = 0, Maximum length = 32
     */
    val weatherInt : String?
        get() {
            val o = __offset(104)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val weatherIntAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(104, 1)
    fun weatherIntInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 104, 1)
    /**
     * The Raw Meteorological Aerodrome Report (METAR) string.
     * Example: /// Example: KXYZ 241456Z 19012G20KT 10SM FEW120 SCT200 BKN250 26/M04 A2981 RMK AO2 PK WND 19026/1420 SLP068 T02611039 51015
     * Constraints: Minimum length = 0, Maximum length = 512
     */
    val rawMetar : String?
        get() {
            val o = __offset(106)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val rawMetarAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(106, 1)
    fun rawMetarInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 106, 1)
    /**
     * Terminal Aerodrome Forecast (TAF) containing detailed weather predictions for a specific airport or aerodrome.
     * Example: /// Example: KXYZ 051730Z 0518/0624 31008KT 3SM -SHRA BKN020 FM052300 30006KT 5SM -SHRA OVC030 PROB30 0604/0606 VRB20G35KT 1SM TSRA BKN015CB FM060600 25010KT 4SM -SHRA OVC050 TEMPO 0608/0611 2SM -SHRA OVC030 RMK NXT FCST BY 00Z=
     * Constraints: Minimum length = 0, Maximum length = 1024
     */
    val rawTaf : String?
        get() {
            val o = __offset(108)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val rawTafAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(108, 1)
    fun rawTafInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 108, 1)
    /**
     * Altimeter set to read zero at mean sea level in kilopascals.
     * Example: /// Example: 1234.456
     * Constraints: No constraints specified.
     */
    val qnh : Double
        get() {
            val o = __offset(110)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Visual distance in meters.
     * Example: /// Example: 1234.456
     * Constraints: No constraints specified.
     */
    val visibility : Double
        get() {
            val o = __offset(112)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * The measurement of air temperature in degrees C.
     * Example: /// Example: 23.45
     * Constraints: No constraints specified.
     */
    val temperature : Double
        get() {
            val o = __offset(114)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * The measurement of soil temperature in degrees C.
     * Example: /// Example: 22.4
     * Constraints: No constraints specified.
     */
    val soilTemp : Double
        get() {
            val o = __offset(116)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * The measurement of air pressure in the atmosphere in kilopascals.
     * Example: /// Example: 101.2
     * Constraints: No constraints specified.
     */
    val barPress : Double
        get() {
            val o = __offset(118)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * The speed at which water is being applied to a specific area in millimeters per hour.
     * Example: /// Example: 3.4
     * Constraints: No constraints specified.
     */
    val precipRate : Double
        get() {
            val o = __offset(120)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * The amount of rain that has fallen in the past hour, in centimeters.
     * Example: /// Example: 1.2
     * Constraints: No constraints specified.
     */
    val rainHour : Double
        get() {
            val o = __offset(122)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * The power per unit area received from the Sun in the form of electromagnetic radiation as measured in the wavelength range of the measuring instrument. The solar irradiance is measured in watt per square meter (W/m2).
     * Example: /// Example: 1234.456
     * Constraints: No constraints specified.
     */
    val solarRad : Double
        get() {
            val o = __offset(124)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * The amount of radiation that reaches earth's surface after being scattered by the atmosphere, in Watts per square meter.
     * Example: /// Example: 234.5
     * Constraints: No constraints specified.
     */
    val difRad : Double
        get() {
            val o = __offset(126)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * The amount of radiation that changes direction as a function of atmospheric density, in Watts per square meter.
     * Example: /// Example: 56.7
     * Constraints: No constraints specified.
     */
    val refRad : Double
        get() {
            val o = __offset(128)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Sensor WGS84 latitude at obTime in degrees. -90 to 90 degrees (negative values south of equator). This includes pilot reports or other means of weather observation.
     * Example: /// Example: 12.456
     * Constraints: No constraints specified.
     */
    val senlat : Double
        get() {
            val o = __offset(130)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Sensor WGS84 longitude at obTime in degrees. -180 to 180 degrees (negative values west of Prime Meridian). This includes pilot reports or other means of weather observation.
     * Example: /// Example: 123.456
     * Constraints: No constraints specified.
     */
    val senlon : Double
        get() {
            val o = __offset(132)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Sensor altitude at obTime in km. This includes pilot reports or other means of weather observation.
     * Example: /// Example: 1.23
     * Constraints: No constraints specified.
     */
    val senalt : Double
        get() {
            val o = __offset(134)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * The temperature at which air is saturated with water vapor, in degrees C.
     * Example: /// Example: 15.6
     * Constraints: No constraints specified.
     */
    val dewPoint : Double
        get() {
            val o = __offset(136)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * The percentage of water vapor in the atmosphere.
     * Example: /// Example: 34.456
     * Constraints: No constraints specified.
     */
    val relHumidity : Double
        get() {
            val o = __offset(138)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * An indication of how much the atmosphere refracts light.
     * Example: /// Example: 1.1
     * Constraints: No constraints specified.
     */
    val indexRefraction : Double
        get() {
            val o = __offset(140)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * The volumetric percentage of soil water contained in a given volume of soil.
     * Example: /// Example: 3.5
     * Constraints: No constraints specified.
     */
    val soilMoisture : Double
        get() {
            val o = __offset(142)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Describes in which direction (if any) that better weather conditions exist. Intended as, but not constrained to, MIL-STD-6016 surrounding weather designations (e.g. NO STATEMENT, BETTER TO NORTH, BETTER TO EAST, BETTER TO SOUTH, BETTER TO WEST).
     * Example: /// Example: NO STATEMENT
     * Constraints: Minimum length = 0, Maximum length = 32
     */
    val surroundingWeather : String?
        get() {
            val o = __offset(144)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val surroundingWeatherAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(144, 1)
    fun surroundingWeatherInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 144, 1)
    /**
     * Amplifies the actual weather being reported. Intended as, but not constrained to, MIL-STD-6016 weather amplification designations (e.g. NO STATEMENT, NO SCATTERED BROKEN MEDIUM CLOUD, SCATTERED BROKEN MEDIUM CLOUDS, GUSTY WINDS AT SERVICE, FOG IN VALLEYS, HIGHER TERRAIN OBSCURED, SURFACE CONDITIONS VARIABLE, SURFACE WIND NE, SURFACE WIND SE, SURFACE WIND SW, SURFACE WIND NW, PRESENCE OF CUMULONIMBUS).
     * Example: /// Example: NO STATEMENT
     * Constraints: Minimum length = 0, Maximum length = 32
     */
    val weatherAmp : String?
        get() {
            val o = __offset(146)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val weatherAmpAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(146, 1)
    fun weatherAmpInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 146, 1)
    /**
     * Reports the lowest altitude at which contrails are occurring, in meters.
     * Example: /// Example: 123.123
     * Constraints: No constraints specified.
     */
    val contrailHghtLower : Double
        get() {
            val o = __offset(148)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Reports the highest altitude at which contrails are occurring, in meters.
     * Example: /// Example: 123.123
     * Constraints: No constraints specified.
     */
    val contrailHghtUpper : Double
        get() {
            val o = __offset(150)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Reports the highest altitude at which icing or freezing rain is occurring, in meters.
     * Example: /// Example: 123.123
     * Constraints: No constraints specified.
     */
    val icingUpperLimit : Double
        get() {
            val o = __offset(152)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Reports the lowest altitude at which icing or freezing rain is occurring, in meters.
     * Example: /// Example: 123.123
     * Constraints: No constraints specified.
     */
    val icingLowerLimit : Double
        get() {
            val o = __offset(154)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Describes the flight conditions in route to the target  (NO STATEMENT, MAINLY IFR, MAINLY VFR, THUNDERSTORMS).
     * MAINLY IFR:&nbsp;&nbsp;Predominantly Instrument Flight Rules.
     * MAINLY VFR:&nbsp;&nbsp;Predominantly Visual Flight Rules.
     * THUNDERSTORMS:&nbsp;&nbsp;Thunderstorms expected in route.
     * Example: /// Example: THUNDERSTORMS
     * Constraints: Minimum length = 0, Maximum length = 32
     */
    val enRouteWeather : String?
        get() {
            val o = __offset(156)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val enRouteWeatherAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(156, 1)
    fun enRouteWeatherInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 156, 1)
    /**
     * Flag indicating detection of a cloud-to-cloud lightning event.
     * Example: /// Example: True
     * Constraints: No constraints specified.
     */
    val ccEvent : Boolean
        get() {
            val o = __offset(158)
            return if(o != 0) 0.toByte() != bb.get(o + bb_pos) else false
        }
    /**
     * Array of UDL record types (SENSOR, WEATHERDATA) that are related to this WeatherReport record. See the associated 'srcIds' array for the record UUIDs, positionally corresponding to the record types in this array. The 'srcTyps' and 'srcIds' arrays must match in size.
     * Example: /// Example: ['SENSOR', 'WEATHERDATA']
     * Constraints: No constraints specified.
     */
    fun srcTyps(j: Int) : String? {
        val o = __offset(160)
        return if (o != 0) {
            __string(__vector(o) + j * 4)
        } else {
            null
        }
    }
    val srcTypsLength : Int
        get() {
            val o = __offset(160); return if (o != 0) __vector_len(o) else 0
        }
    /**
     * Array of UUID(s) of the UDL data record(s) that are related to this WeatherReport record. See the associated 'srcTyps' array for the specific types of data, positionally corresponding to the UUIDs in this array. The 'srcTyps' and 'srcIds' arrays must match in size. See the corresponding srcTyps array element for the data type of the UUID and use the appropriate API operation to retrieve that object.
     * Example: /// Example: ['e609a90d-4059-4043-9f1a-fd7b49a3e1d0', 'c739fcdb-c0c9-43c0-97b6-bfc80d0ffd52']
     * Constraints: No constraints specified.
     */
    fun srcIds(j: Int) : String? {
        val o = __offset(162)
        return if (o != 0) {
            __string(__vector(o) + j * 4)
        } else {
            null
        }
    }
    val srcIdsLength : Int
        get() {
            val o = __offset(162); return if (o != 0) __vector_len(o) else 0
        }
    /**
     * The originating source network on which this record was created, auto-populated by the system.
     * Example: /// Example: ORIG
     * Constraints: Minimum length = 1, Maximum length = 32
     */
    val origNetwork : String?
        get() {
            val o = __offset(164)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val origNetworkAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(164, 1)
    fun origNetworkInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 164, 1)
    /**
     * Time the row was created in the database.
     * Example: /// Example: 2018-01-01T16:00:00.123Z
     * Constraints: No constraints specified.
     */
    val createdAt : String?
        get() {
            val o = __offset(166)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val createdAtAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(166, 1)
    fun createdAtInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 166, 1)
    /**
     * Application user who created the row in the database.
     * Example: /// Example: some.user
     * Constraints: Minimum length = 1, Maximum length = 64
     */
    val createdBy : String?
        get() {
            val o = __offset(168)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val createdByAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(168, 1)
    fun createdByInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 168, 1)
    /**
     * Source of the data.
     * Example: /// Example: Bluestaq
     * Constraints: Minimum length = 1, Maximum length = 36
     */
    val source : String?
        get() {
            val o = __offset(170)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val sourceAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(170, 1)
    fun sourceInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 170, 1)
    /**
     * Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
     * Example: /// Example: THIRD_PARTY_DATASOURCE
     * Constraints: Minimum length = 0, Maximum length = 64
     */
    val origin : String?
        get() {
            val o = __offset(172)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val originAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(172, 1)
    fun originInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 172, 1)
    /**
     * Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
     * EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
     * REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
     * SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
     * TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
     * Example: /// Example: TEST
     * Constraints: Minimum length = 1, Maximum length = 32
     */
    val dataMode : Byte
        get() {
            val o = __offset(174)
            return if(o != 0) bb.get(o + bb_pos) else 0
        }
    companion object {
        fun validateVersion() = Constants.FLATBUFFERS_24_3_25()
        fun getRootAsWeatherReport_Ingest(_bb: ByteBuffer): WeatherReport_Ingest = getRootAsWeatherReport_Ingest(_bb, WeatherReport_Ingest())
        fun getRootAsWeatherReport_Ingest(_bb: ByteBuffer, obj: WeatherReport_Ingest): WeatherReport_Ingest {
            _bb.order(ByteOrder.LITTLE_ENDIAN)
            return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb))
        }
        fun WeatherReport_IngestBufferHasIdentifier(_bb: ByteBuffer) : Boolean = __has_identifier(_bb, "WEAT")
        fun createWeatherReport_Ingest(builder: FlatBufferBuilder, idOffset: Int, classificationMarkingOffset: Int, idSensorOffset: Int, origSensorIdOffset: Int, weatherIdOffset: Int, idGroundImageryOffset: Int, idSiteOffset: Int, idAirfieldOffset: Int, icaoOffset: Int, externalIdOffset: Int, externalLocationIdOffset: Int, reportTypeOffset: Int, obTimeOffset: Int, forecastStartTimeOffset: Int, forecastEndTimeOffset: Int, lat: Double, lon: Double, alt: Double, geoPotentialAlt: Double, dataLevelOffset: Int, areaOffset: Int, atextOffset: Int, agjsonOffset: Int, atypeOffset: Int, andims: Int, asrid: Int, windSpd: Double, windSpdAvg: Double, windGust: Double, windGust10: Double, vshear: Double, hshear: Double, radVel: Double, radVelBeam1: Double, radVelBeam2: Double, radVelBeam3: Double, radVelBeam4: Double, radVelBeam5: Double, windDir: Double, windDirAvg: Double, windDirPeak: Double, windDirPeak10: Double, windChill: Double, dirDev: Double, windVar: Boolean, windCovOffset: Int, cloudCoverOffset: Int, cloudHghtOffset: Int, actWeatherOffset: Int, weatherDescOffset: Int, weatherIntOffset: Int, rawMetarOffset: Int, rawTafOffset: Int, qnh: Double, visibility: Double, temperature: Double, soilTemp: Double, barPress: Double, precipRate: Double, rainHour: Double, solarRad: Double, difRad: Double, refRad: Double, senlat: Double, senlon: Double, senalt: Double, dewPoint: Double, relHumidity: Double, indexRefraction: Double, soilMoisture: Double, surroundingWeatherOffset: Int, weatherAmpOffset: Int, contrailHghtLower: Double, contrailHghtUpper: Double, icingUpperLimit: Double, icingLowerLimit: Double, enRouteWeatherOffset: Int, ccEvent: Boolean, srcTypsOffset: Int, srcIdsOffset: Int, origNetworkOffset: Int, createdAtOffset: Int, createdByOffset: Int, sourceOffset: Int, originOffset: Int, dataMode: Byte) : Int {
            builder.startTable(86)
            addIcingLowerLimit(builder, icingLowerLimit)
            addIcingUpperLimit(builder, icingUpperLimit)
            addContrailHghtUpper(builder, contrailHghtUpper)
            addContrailHghtLower(builder, contrailHghtLower)
            addSoilMoisture(builder, soilMoisture)
            addIndexRefraction(builder, indexRefraction)
            addRelHumidity(builder, relHumidity)
            addDewPoint(builder, dewPoint)
            addSenalt(builder, senalt)
            addSenlon(builder, senlon)
            addSenlat(builder, senlat)
            addRefRad(builder, refRad)
            addDifRad(builder, difRad)
            addSolarRad(builder, solarRad)
            addRainHour(builder, rainHour)
            addPrecipRate(builder, precipRate)
            addBarPress(builder, barPress)
            addSoilTemp(builder, soilTemp)
            addTemperature(builder, temperature)
            addVisibility(builder, visibility)
            addQnh(builder, qnh)
            addDirDev(builder, dirDev)
            addWindChill(builder, windChill)
            addWindDirPeak10(builder, windDirPeak10)
            addWindDirPeak(builder, windDirPeak)
            addWindDirAvg(builder, windDirAvg)
            addWindDir(builder, windDir)
            addRadVelBeam5(builder, radVelBeam5)
            addRadVelBeam4(builder, radVelBeam4)
            addRadVelBeam3(builder, radVelBeam3)
            addRadVelBeam2(builder, radVelBeam2)
            addRadVelBeam1(builder, radVelBeam1)
            addRadVel(builder, radVel)
            addHshear(builder, hshear)
            addVshear(builder, vshear)
            addWindGust10(builder, windGust10)
            addWindGust(builder, windGust)
            addWindSpdAvg(builder, windSpdAvg)
            addWindSpd(builder, windSpd)
            addGeoPotentialAlt(builder, geoPotentialAlt)
            addAlt(builder, alt)
            addLon(builder, lon)
            addLat(builder, lat)
            addOrigin(builder, originOffset)
            addSource(builder, sourceOffset)
            addCreatedBy(builder, createdByOffset)
            addCreatedAt(builder, createdAtOffset)
            addOrigNetwork(builder, origNetworkOffset)
            addSrcIds(builder, srcIdsOffset)
            addSrcTyps(builder, srcTypsOffset)
            addEnRouteWeather(builder, enRouteWeatherOffset)
            addWeatherAmp(builder, weatherAmpOffset)
            addSurroundingWeather(builder, surroundingWeatherOffset)
            addRawTAF(builder, rawTafOffset)
            addRawMETAR(builder, rawMetarOffset)
            addWeatherInt(builder, weatherIntOffset)
            addWeatherDesc(builder, weatherDescOffset)
            addActWeather(builder, actWeatherOffset)
            addCloudHght(builder, cloudHghtOffset)
            addCloudCover(builder, cloudCoverOffset)
            addWindCov(builder, windCovOffset)
            addAsrid(builder, asrid)
            addAndims(builder, andims)
            addAtype(builder, atypeOffset)
            addAgjson(builder, agjsonOffset)
            addAtext(builder, atextOffset)
            addArea(builder, areaOffset)
            addDataLevel(builder, dataLevelOffset)
            addForecastEndTime(builder, forecastEndTimeOffset)
            addForecastStartTime(builder, forecastStartTimeOffset)
            addObTime(builder, obTimeOffset)
            addReportType(builder, reportTypeOffset)
            addExternalLocationId(builder, externalLocationIdOffset)
            addExternalId(builder, externalIdOffset)
            addIcao(builder, icaoOffset)
            addIdAirfield(builder, idAirfieldOffset)
            addIdSite(builder, idSiteOffset)
            addIdGroundImagery(builder, idGroundImageryOffset)
            addWeatherId(builder, weatherIdOffset)
            addOrigSensorId(builder, origSensorIdOffset)
            addIdSensor(builder, idSensorOffset)
            addClassificationMarking(builder, classificationMarkingOffset)
            addId(builder, idOffset)
            addDataMode(builder, dataMode)
            addCcEvent(builder, ccEvent)
            addWindVar(builder, windVar)
            return endWeatherReport_Ingest(builder)
        }
        fun startWeatherReport_Ingest(builder: FlatBufferBuilder) = builder.startTable(86)
        fun addId(builder: FlatBufferBuilder, id: Int) = builder.addOffset(0, id, 0)
        fun addClassificationMarking(builder: FlatBufferBuilder, classificationMarking: Int) = builder.addOffset(1, classificationMarking, 0)
        fun addIdSensor(builder: FlatBufferBuilder, idSensor: Int) = builder.addOffset(2, idSensor, 0)
        fun addOrigSensorId(builder: FlatBufferBuilder, origSensorId: Int) = builder.addOffset(3, origSensorId, 0)
        fun addWeatherId(builder: FlatBufferBuilder, weatherId: Int) = builder.addOffset(4, weatherId, 0)
        fun addIdGroundImagery(builder: FlatBufferBuilder, idGroundImagery: Int) = builder.addOffset(5, idGroundImagery, 0)
        fun addIdSite(builder: FlatBufferBuilder, idSite: Int) = builder.addOffset(6, idSite, 0)
        fun addIdAirfield(builder: FlatBufferBuilder, idAirfield: Int) = builder.addOffset(7, idAirfield, 0)
        fun addIcao(builder: FlatBufferBuilder, icao: Int) = builder.addOffset(8, icao, 0)
        fun addExternalId(builder: FlatBufferBuilder, externalId: Int) = builder.addOffset(9, externalId, 0)
        fun addExternalLocationId(builder: FlatBufferBuilder, externalLocationId: Int) = builder.addOffset(10, externalLocationId, 0)
        fun addReportType(builder: FlatBufferBuilder, reportType: Int) = builder.addOffset(11, reportType, 0)
        fun addObTime(builder: FlatBufferBuilder, obTime: Int) = builder.addOffset(12, obTime, 0)
        fun addForecastStartTime(builder: FlatBufferBuilder, forecastStartTime: Int) = builder.addOffset(13, forecastStartTime, 0)
        fun addForecastEndTime(builder: FlatBufferBuilder, forecastEndTime: Int) = builder.addOffset(14, forecastEndTime, 0)
        fun addLat(builder: FlatBufferBuilder, lat: Double) = builder.addDouble(15, lat, 0.0)
        fun addLon(builder: FlatBufferBuilder, lon: Double) = builder.addDouble(16, lon, 0.0)
        fun addAlt(builder: FlatBufferBuilder, alt: Double) = builder.addDouble(17, alt, 0.0)
        fun addGeoPotentialAlt(builder: FlatBufferBuilder, geoPotentialAlt: Double) = builder.addDouble(18, geoPotentialAlt, 0.0)
        fun addDataLevel(builder: FlatBufferBuilder, dataLevel: Int) = builder.addOffset(19, dataLevel, 0)
        fun addArea(builder: FlatBufferBuilder, area: Int) = builder.addOffset(20, area, 0)
        fun addAtext(builder: FlatBufferBuilder, atext: Int) = builder.addOffset(21, atext, 0)
        fun addAgjson(builder: FlatBufferBuilder, agjson: Int) = builder.addOffset(22, agjson, 0)
        fun addAtype(builder: FlatBufferBuilder, atype: Int) = builder.addOffset(23, atype, 0)
        fun addAndims(builder: FlatBufferBuilder, andims: Int) = builder.addInt(24, andims, 0)
        fun addAsrid(builder: FlatBufferBuilder, asrid: Int) = builder.addInt(25, asrid, 0)
        fun addWindSpd(builder: FlatBufferBuilder, windSpd: Double) = builder.addDouble(26, windSpd, 0.0)
        fun addWindSpdAvg(builder: FlatBufferBuilder, windSpdAvg: Double) = builder.addDouble(27, windSpdAvg, 0.0)
        fun addWindGust(builder: FlatBufferBuilder, windGust: Double) = builder.addDouble(28, windGust, 0.0)
        fun addWindGust10(builder: FlatBufferBuilder, windGust10: Double) = builder.addDouble(29, windGust10, 0.0)
        fun addVshear(builder: FlatBufferBuilder, vshear: Double) = builder.addDouble(30, vshear, 0.0)
        fun addHshear(builder: FlatBufferBuilder, hshear: Double) = builder.addDouble(31, hshear, 0.0)
        fun addRadVel(builder: FlatBufferBuilder, radVel: Double) = builder.addDouble(32, radVel, 0.0)
        fun addRadVelBeam1(builder: FlatBufferBuilder, radVelBeam1: Double) = builder.addDouble(33, radVelBeam1, 0.0)
        fun addRadVelBeam2(builder: FlatBufferBuilder, radVelBeam2: Double) = builder.addDouble(34, radVelBeam2, 0.0)
        fun addRadVelBeam3(builder: FlatBufferBuilder, radVelBeam3: Double) = builder.addDouble(35, radVelBeam3, 0.0)
        fun addRadVelBeam4(builder: FlatBufferBuilder, radVelBeam4: Double) = builder.addDouble(36, radVelBeam4, 0.0)
        fun addRadVelBeam5(builder: FlatBufferBuilder, radVelBeam5: Double) = builder.addDouble(37, radVelBeam5, 0.0)
        fun addWindDir(builder: FlatBufferBuilder, windDir: Double) = builder.addDouble(38, windDir, 0.0)
        fun addWindDirAvg(builder: FlatBufferBuilder, windDirAvg: Double) = builder.addDouble(39, windDirAvg, 0.0)
        fun addWindDirPeak(builder: FlatBufferBuilder, windDirPeak: Double) = builder.addDouble(40, windDirPeak, 0.0)
        fun addWindDirPeak10(builder: FlatBufferBuilder, windDirPeak10: Double) = builder.addDouble(41, windDirPeak10, 0.0)
        fun addWindChill(builder: FlatBufferBuilder, windChill: Double) = builder.addDouble(42, windChill, 0.0)
        fun addDirDev(builder: FlatBufferBuilder, dirDev: Double) = builder.addDouble(43, dirDev, 0.0)
        fun addWindVar(builder: FlatBufferBuilder, windVar: Boolean) = builder.addBoolean(44, windVar, false)
        fun addWindCov(builder: FlatBufferBuilder, windCov: Int) = builder.addOffset(45, windCov, 0)
        fun createWindCovVector(builder: FlatBufferBuilder, data: IntArray) : Int {
            builder.startVector(4, data.size, 4)
            for (i in data.size - 1 downTo 0) {
                builder.addOffset(data[i])
            }
            return builder.endVector()
        }
        fun startWindCovVector(builder: FlatBufferBuilder, numElems: Int) = builder.startVector(4, numElems, 4)
        fun addCloudCover(builder: FlatBufferBuilder, cloudCover: Int) = builder.addOffset(46, cloudCover, 0)
        fun createCloudCoverVector(builder: FlatBufferBuilder, data: IntArray) : Int {
            builder.startVector(4, data.size, 4)
            for (i in data.size - 1 downTo 0) {
                builder.addOffset(data[i])
            }
            return builder.endVector()
        }
        fun startCloudCoverVector(builder: FlatBufferBuilder, numElems: Int) = builder.startVector(4, numElems, 4)
        fun addCloudHght(builder: FlatBufferBuilder, cloudHght: Int) = builder.addOffset(47, cloudHght, 0)
        fun createCloudHghtVector(builder: FlatBufferBuilder, data: IntArray) : Int {
            builder.startVector(4, data.size, 4)
            for (i in data.size - 1 downTo 0) {
                builder.addOffset(data[i])
            }
            return builder.endVector()
        }
        fun startCloudHghtVector(builder: FlatBufferBuilder, numElems: Int) = builder.startVector(4, numElems, 4)
        fun addActWeather(builder: FlatBufferBuilder, actWeather: Int) = builder.addOffset(48, actWeather, 0)
        fun addWeatherDesc(builder: FlatBufferBuilder, weatherDesc: Int) = builder.addOffset(49, weatherDesc, 0)
        fun addWeatherInt(builder: FlatBufferBuilder, weatherInt: Int) = builder.addOffset(50, weatherInt, 0)
        fun addRawMETAR(builder: FlatBufferBuilder, rawMetar: Int) = builder.addOffset(51, rawMetar, 0)
        fun addRawTAF(builder: FlatBufferBuilder, rawTaf: Int) = builder.addOffset(52, rawTaf, 0)
        fun addQnh(builder: FlatBufferBuilder, qnh: Double) = builder.addDouble(53, qnh, 0.0)
        fun addVisibility(builder: FlatBufferBuilder, visibility: Double) = builder.addDouble(54, visibility, 0.0)
        fun addTemperature(builder: FlatBufferBuilder, temperature: Double) = builder.addDouble(55, temperature, 0.0)
        fun addSoilTemp(builder: FlatBufferBuilder, soilTemp: Double) = builder.addDouble(56, soilTemp, 0.0)
        fun addBarPress(builder: FlatBufferBuilder, barPress: Double) = builder.addDouble(57, barPress, 0.0)
        fun addPrecipRate(builder: FlatBufferBuilder, precipRate: Double) = builder.addDouble(58, precipRate, 0.0)
        fun addRainHour(builder: FlatBufferBuilder, rainHour: Double) = builder.addDouble(59, rainHour, 0.0)
        fun addSolarRad(builder: FlatBufferBuilder, solarRad: Double) = builder.addDouble(60, solarRad, 0.0)
        fun addDifRad(builder: FlatBufferBuilder, difRad: Double) = builder.addDouble(61, difRad, 0.0)
        fun addRefRad(builder: FlatBufferBuilder, refRad: Double) = builder.addDouble(62, refRad, 0.0)
        fun addSenlat(builder: FlatBufferBuilder, senlat: Double) = builder.addDouble(63, senlat, 0.0)
        fun addSenlon(builder: FlatBufferBuilder, senlon: Double) = builder.addDouble(64, senlon, 0.0)
        fun addSenalt(builder: FlatBufferBuilder, senalt: Double) = builder.addDouble(65, senalt, 0.0)
        fun addDewPoint(builder: FlatBufferBuilder, dewPoint: Double) = builder.addDouble(66, dewPoint, 0.0)
        fun addRelHumidity(builder: FlatBufferBuilder, relHumidity: Double) = builder.addDouble(67, relHumidity, 0.0)
        fun addIndexRefraction(builder: FlatBufferBuilder, indexRefraction: Double) = builder.addDouble(68, indexRefraction, 0.0)
        fun addSoilMoisture(builder: FlatBufferBuilder, soilMoisture: Double) = builder.addDouble(69, soilMoisture, 0.0)
        fun addSurroundingWeather(builder: FlatBufferBuilder, surroundingWeather: Int) = builder.addOffset(70, surroundingWeather, 0)
        fun addWeatherAmp(builder: FlatBufferBuilder, weatherAmp: Int) = builder.addOffset(71, weatherAmp, 0)
        fun addContrailHghtLower(builder: FlatBufferBuilder, contrailHghtLower: Double) = builder.addDouble(72, contrailHghtLower, 0.0)
        fun addContrailHghtUpper(builder: FlatBufferBuilder, contrailHghtUpper: Double) = builder.addDouble(73, contrailHghtUpper, 0.0)
        fun addIcingUpperLimit(builder: FlatBufferBuilder, icingUpperLimit: Double) = builder.addDouble(74, icingUpperLimit, 0.0)
        fun addIcingLowerLimit(builder: FlatBufferBuilder, icingLowerLimit: Double) = builder.addDouble(75, icingLowerLimit, 0.0)
        fun addEnRouteWeather(builder: FlatBufferBuilder, enRouteWeather: Int) = builder.addOffset(76, enRouteWeather, 0)
        fun addCcEvent(builder: FlatBufferBuilder, ccEvent: Boolean) = builder.addBoolean(77, ccEvent, false)
        fun addSrcTyps(builder: FlatBufferBuilder, srcTyps: Int) = builder.addOffset(78, srcTyps, 0)
        fun createSrcTypsVector(builder: FlatBufferBuilder, data: IntArray) : Int {
            builder.startVector(4, data.size, 4)
            for (i in data.size - 1 downTo 0) {
                builder.addOffset(data[i])
            }
            return builder.endVector()
        }
        fun startSrcTypsVector(builder: FlatBufferBuilder, numElems: Int) = builder.startVector(4, numElems, 4)
        fun addSrcIds(builder: FlatBufferBuilder, srcIds: Int) = builder.addOffset(79, srcIds, 0)
        fun createSrcIdsVector(builder: FlatBufferBuilder, data: IntArray) : Int {
            builder.startVector(4, data.size, 4)
            for (i in data.size - 1 downTo 0) {
                builder.addOffset(data[i])
            }
            return builder.endVector()
        }
        fun startSrcIdsVector(builder: FlatBufferBuilder, numElems: Int) = builder.startVector(4, numElems, 4)
        fun addOrigNetwork(builder: FlatBufferBuilder, origNetwork: Int) = builder.addOffset(80, origNetwork, 0)
        fun addCreatedAt(builder: FlatBufferBuilder, createdAt: Int) = builder.addOffset(81, createdAt, 0)
        fun addCreatedBy(builder: FlatBufferBuilder, createdBy: Int) = builder.addOffset(82, createdBy, 0)
        fun addSource(builder: FlatBufferBuilder, source: Int) = builder.addOffset(83, source, 0)
        fun addOrigin(builder: FlatBufferBuilder, origin: Int) = builder.addOffset(84, origin, 0)
        fun addDataMode(builder: FlatBufferBuilder, dataMode: Byte) = builder.addByte(85, dataMode, 0)
        fun endWeatherReport_Ingest(builder: FlatBufferBuilder) : Int {
            val o = builder.endTable()
            return o
        }
        fun finishWeatherReportIngestBuffer(builder: FlatBufferBuilder, offset: Int) = builder.finish(offset, "WEAT")
        fun finishSizePrefixedWeatherReport_IngestBuffer(builder: FlatBufferBuilder, offset: Int) = builder.finishSizePrefixed(offset, "WEAT")
    }
}
