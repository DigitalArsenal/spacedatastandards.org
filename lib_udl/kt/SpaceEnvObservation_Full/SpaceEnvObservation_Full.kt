// automatically generated by the FlatBuffers compiler, do not modify

import com.google.flatbuffers.BaseVector
import com.google.flatbuffers.BooleanVector
import com.google.flatbuffers.ByteVector
import com.google.flatbuffers.Constants
import com.google.flatbuffers.DoubleVector
import com.google.flatbuffers.FlatBufferBuilder
import com.google.flatbuffers.FloatVector
import com.google.flatbuffers.LongVector
import com.google.flatbuffers.StringVector
import com.google.flatbuffers.Struct
import com.google.flatbuffers.Table
import com.google.flatbuffers.UnionVector
import java.nio.ByteBuffer
import java.nio.ByteOrder
import kotlin.math.sign

/**
 * /// SpaceEnvObservation data.
 */
@Suppress("unused")
class SpaceEnvObservation_Full : Table() {

    fun __init(_i: Int, _bb: ByteBuffer)  {
        __reset(_i, _bb)
    }
    fun __assign(_i: Int, _bb: ByteBuffer) : SpaceEnvObservation_Full {
        __init(_i, _bb)
        return this
    }
    /**
     * Unique identifier of the record, auto-generated by the system.
     * Example: /// Example: f13f82b8-5d2a-407a-b3f3-1fe30ca79eae
     * Constraints: Minimum length = 1, Maximum length = 36
     */
    val id : String?
        get() {
            val o = __offset(4)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val idAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(4, 1)
    fun idInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 4, 1)
    /**
     * Classification marking of the data in IC/CAPCO Portion-marked format.
     * Example: /// Example: U
     * Constraints: Minimum length = 1, Maximum length = 128
     */
    val classificationMarking : String?
        get() {
            val o = __offset(6)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val classificationMarkingAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(6, 1)
    fun classificationMarkingInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 6, 1)
    /**
     * The type of message associated with this record.
     * Example: /// Example: SODM
     * Constraints: Minimum length = 0, Maximum length = 16
     */
    val msgType : String?
        get() {
            val o = __offset(8)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val msgTypeAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(8, 1)
    fun msgTypeInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 8, 1)
    /**
     * The external system which generated the message, if applicable.
     * Example: /// Example: System Name
     * Constraints: Minimum length = 0, Maximum length = 64
     */
    val genSystem : String?
        get() {
            val o = __offset(10)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val genSystemAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(10, 1)
    fun genSystemInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 10, 1)
    /**
     * Optional ID from external systems. This field has no meaning within UDL and is provided as a convenience for systems that require tracking of an internal system generated ID.
     * Example: /// Example: fe4ad5dc-0128-4ce8-b09c-0b404322025e
     * Constraints: Minimum length = 0, Maximum length = 36
     */
    val externalId : String?
        get() {
            val o = __offset(12)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val externalIdAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(12, 1)
    fun externalIdInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 12, 1)
    /**
     * The data type (e.g. AP, AURORAL FLUX, ECP, KINDEX, PROPAGATED SOLAR WIND, XRAY FLUX, etc.) of observations in this record.
     * Example: /// Example: ECP
     * Constraints: Minimum length = 0, Maximum length = 64
     */
    val dataType : String?
        get() {
            val o = __offset(14)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val dataTypeAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(14, 1)
    fun dataTypeInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 14, 1)
    /**
     * The time at which the associated data message was generated, in ISO 8601 UTC format with millisecond precision.
     * Example: /// Example: 2023-02-10T19:48:09.934Z
     * Constraints: No constraints specified.
     */
    val genTime : String?
        get() {
            val o = __offset(16)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val genTimeAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(16, 1)
    fun genTimeInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 16, 1)
    /**
     * Flag indicating that this record contains forecast data.
     * Example: /// Example: True
     * Constraints: No constraints specified.
     */
    val forecast : Boolean
        get() {
            val o = __offset(18)
            return if(o != 0) 0.toByte() != bb.get(o + bb_pos) else false
        }
    /**
     * Flag indicating that this record contains derived data.
     * Example: /// Example: False
     * Constraints: No constraints specified.
     */
    val derived : Boolean
        get() {
            val o = __offset(20)
            return if(o != 0) 0.toByte() != bb.get(o + bb_pos) else false
        }
    /**
     * Unique identifier of the on-orbit satellite hosting the sensor which produced this data.
     * Example: /// Example: 41866
     * Constraints: Minimum length = 0, Maximum length = 36
     */
    val idOnOrbit : String?
        get() {
            val o = __offset(22)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val idOnOrbitAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(22, 1)
    fun idOnOrbitInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 22, 1)
    /**
     * Satellite/catalog number of the on-orbit satellite hosting the sensor which produced this data.
     * Example: /// Example: 41866
     * Constraints: No constraints specified.
     */
    val satNo : Int
        get() {
            val o = __offset(24)
            return if(o != 0) bb.getInt(o + bb_pos) else 0
        }
    /**
     * Optional identifier provided by the record source to indicate the satellite hosting the sensor which produced this data. This may be an internal identifier and not necessarily map to a valid satellite number.
     * Example: /// Example: 41866
     * Constraints: Minimum length = 0, Maximum length = 36
     */
    val origObjectId : String?
        get() {
            val o = __offset(26)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val origObjectIdAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(26, 1)
    fun origObjectIdInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 26, 1)
    /**
     * Unique identifier of the reporting sensor.
     * Example: /// Example: ECP-1
     * Constraints: Minimum length = 0, Maximum length = 36
     */
    val idSensor : String?
        get() {
            val o = __offset(28)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val idSensorAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(28, 1)
    fun idSensorInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 28, 1)
    /**
     * Optional identifier provided by the observation source to indicate the sensor which produced this observation. This may be an internal identifier and not necessarily a valid sensor ID.
     * Example: /// Example: ECP-1
     * Constraints: Minimum length = 0, Maximum length = 36
     */
    val origSensorId : String?
        get() {
            val o = __offset(30)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val origSensorIdAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(30, 1)
    fun origSensorIdInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 30, 1)
    /**
     * The type of observatory from which this data was collected (e.g. FACILITY, ONORBIT, NETWORK, etc.).
     * Example: /// Example: ONORBIT
     * Constraints: Minimum length = 0, Maximum length = 64
     */
    val observatoryType : String?
        get() {
            val o = __offset(32)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val observatoryTypeAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(32, 1)
    fun observatoryTypeInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 32, 1)
    /**
     * The name of the observatory from which this data was collected.
     * Example: /// Example: GOES-16
     * Constraints: Minimum length = 0, Maximum length = 128
     */
    val observatoryName : String?
        get() {
            val o = __offset(34)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val observatoryNameAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(34, 1)
    fun observatoryNameInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 34, 1)
    /**
     * Additional notes concerning the observatory.
     * Example: /// Example: Notes
     * Constraints: Minimum length = 0, Maximum length = 256
     */
    val observatoryNotes : String?
        get() {
            val o = __offset(36)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val observatoryNotesAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(36, 1)
    fun observatoryNotesInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 36, 1)
    /**
     * The type of instrument from which this data was collected (e.g. ANTENNA, CHANNELTRON, INTERFEROMETER, MAGNETOMETER, RADIOMETER, etc.).
     * Example: /// Example: MAGNETOMETER
     * Constraints: Minimum length = 0, Maximum length = 64
     */
    val instrumentType : String?
        get() {
            val o = __offset(38)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val instrumentTypeAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(38, 1)
    fun instrumentTypeInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 38, 1)
    /**
     * WGS-84 spacecraft/sensor latitude sub-point at observation time, represented as -90 to 90 degrees (negative values south of equator).
     * Example: /// Example: 38.8339
     * Constraints: No constraints specified.
     */
    val lat : Double
        get() {
            val o = __offset(40)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * WGS-84 spacecraft/sensor longitude sub-point at observation time, represented as -180 to 180 degrees (negative values west of Prime Meridian).
     * Example: /// Example: -104.8214
     * Constraints: No constraints specified.
     */
    val lon : Double
        get() {
            val o = __offset(42)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Spacecraft/sensor altitude at observation time, expressed in kilometers above WGS-84 ellipsoid.
     * Example: /// Example: 35785.3732
     * Constraints: No constraints specified.
     */
    val alt : Double
        get() {
            val o = __offset(44)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * The reference frame of the observing spacecraft/sensor state. If the senReferenceFrame is null it is assumed to be J2000.
     * Example: /// Example: J2000
     * Constraints: Minimum length = 0, Maximum length = 24
     */
    val senReferenceFrame : Byte
        get() {
            val o = __offset(46)
            return if(o != 0) bb.get(o + bb_pos) else 0
        }
    /**
     * Three element array, expressing the observing spacecraft/sensor position vector components at observation time, in kilometers, in the specified senReferenceFrame. If senReferenceFrame is null then J2000 should be assumed. The array element order is [xpos, ypos, zpos].
     * Example: /// Example: [4174.78541785946, -9969.69867853067, 40733.9284531208]
     * Constraints: No constraints specified.
     */
    fun senPos(j: Int) : String? {
        val o = __offset(48)
        return if (o != 0) {
            __string(__vector(o) + j * 4)
        } else {
            null
        }
    }
    val senPosLength : Int
        get() {
            val o = __offset(48); return if (o != 0) __vector_len(o) else 0
        }
    /**
     * Three element array, expressing the observing spacecraft/sensor velocity vector components at observation time, in kilometers/second, in the specified senReferenceFrame. If senReferenceFrame is null then J2000 should be assumed. The array element order is [xvel, yvel, zvel].
     * Example: /// Example: [0.727059797295872, 0.298037087322647, 0.00157064850994095]
     * Constraints: No constraints specified.
     */
    fun senVel(j: Int) : String? {
        val o = __offset(50)
        return if (o != 0) {
            __string(__vector(o) + j * 4)
        } else {
            null
        }
    }
    val senVelLength : Int
        get() {
            val o = __offset(50); return if (o != 0) __vector_len(o) else 0
        }
    /**
     * The sensor measurement type of the observation data contained in this record.
     * Example: /// Example: ENERGETIC PARTICLES
     * Constraints: Minimum length = 0, Maximum length = 64
     */
    val measType : String?
        get() {
            val o = __offset(52)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val measTypeAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(52, 1)
    fun measTypeInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 52, 1)
    /**
     * The energy level bin of the sensor associated with this measurement.
     * Example: /// Example: 0500-700 keV
     * Constraints: Minimum length = 0, Maximum length = 64
     */
    val senEnergyLevel : String?
        get() {
            val o = __offset(54)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val senEnergyLevelAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(54, 1)
    fun senEnergyLevelInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 54, 1)
    /**
     * A user-defined name or ID of a set of observations, if applicable. Used for identifying multiple observation records as part of one observation set.
     * Example: /// Example: ECPOBSET-478125
     * Constraints: Minimum length = 0, Maximum length = 36
     */
    val obSetId : String?
        get() {
            val o = __offset(56)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val obSetIdAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(56, 1)
    fun obSetIdInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 56, 1)
    /**
     * The particle type (AEROSOL, ALPHA PARTICLE, ATOM, DUST, ELECTRON, ION, MOLECULE, NEUTRON, POSITRON, PROTON) associated with this measurement.
     * Example: /// Example: PROTON
     * Constraints: Minimum length = 0, Maximum length = 24
     */
    val particleType : String?
        get() {
            val o = __offset(58)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val particleTypeAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(58, 1)
    fun particleTypeInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 58, 1)
    /**
     * Time of the observation, in ISO 8601 UTC format with millisecond precision.
     * Example: /// Example: 2023-06-07T14:17:39.653Z
     * Constraints: No constraints specified.
     */
    val obTime : String?
        get() {
            val o = __offset(60)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val obTimeAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(60, 1)
    fun obTimeInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 60, 1)
    /**
     * A collection of individual space environment observations.
     * Example: /// Example: No example provided.
     * Constraints: No constraints specified.
     */
    fun seoList(j: Int) : String? {
        val o = __offset(62)
        return if (o != 0) {
            __string(__vector(o) + j * 4)
        } else {
            null
        }
    }
    val seoListLength : Int
        get() {
            val o = __offset(62); return if (o != 0) __vector_len(o) else 0
        }
    /**
     * The quality of the overall data contained in this record. The quality indicator value may vary among providers and may be a generalized statement (BAD, GOOD, UNCERTAIN, UNKNOWN) or a numeric value. Users should consult the data provider to verify the usage of the quality indicator.
     * Example: /// Example: GOOD
     * Constraints: Minimum length = 0, Maximum length = 16
     */
    val quality : String?
        get() {
            val o = __offset(64)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val qualityAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(64, 1)
    fun qualityInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 64, 1)
    /**
     * Descriptive or additional information associated with this observation record.
     * Example: /// Example: Observation Data Description Text
     * Constraints: Minimum length = 0, Maximum length = 512
     */
    val description : String?
        get() {
            val o = __offset(66)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val descriptionAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(66, 1)
    fun descriptionInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 66, 1)
    /**
     * Optional source-provided and searchable metadata or descriptor of the data.
     * Example: /// Example: energetic charged particle
     * Constraints: Minimum length = 0, Maximum length = 64
     */
    val descriptor : String?
        get() {
            val o = __offset(68)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val descriptorAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(68, 1)
    fun descriptorInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 68, 1)
    /**
     * Array of UDL record types (AIS, CONJUNCTION, DOA, ELSET, EO, ESID, GROUNDIMAGE, POI, MANEUVER, MTI, NOTIFICATION, RADAR, RF, SGI, SIGACT, SKYIMAGE, SPACEENVOB, SV, TRACK) that are related to this observation record. See the associated 'srcIds' array for the record UUIDs, positionally corresponding to the record types in this array. The 'srcTyps' and 'srcIds' arrays must match in size.
     * Example: /// Example: ['SPACEENVOB', 'SGI']
     * Constraints: No constraints specified.
     */
    fun srcTyps(j: Int) : String? {
        val o = __offset(70)
        return if (o != 0) {
            __string(__vector(o) + j * 4)
        } else {
            null
        }
    }
    val srcTypsLength : Int
        get() {
            val o = __offset(70); return if (o != 0) __vector_len(o) else 0
        }
    /**
     * Array of UUIDs of the UDL data records that are related to this observation record. See the associated 'srcTyps' array for specific types of data, positionally corresponding to the UUIDs in this array. The 'srcTyps' and 'srcIds' arrays must match in size. See the corresponding srcTyps array element of the data type of the UUID and use the appropriate API operation to retrieve that object.
     * Example: /// Example: ['615236d7-d464-4b8c-9b0b-45994e017d80', '8a38e3d6-35fd-4bda-b883-e3724e6bc6b9']
     * Constraints: No constraints specified.
     */
    fun srcIds(j: Int) : String? {
        val o = __offset(72)
        return if (o != 0) {
            __string(__vector(o) + j * 4)
        } else {
            null
        }
    }
    val srcIdsLength : Int
        get() {
            val o = __offset(72); return if (o != 0) __vector_len(o) else 0
        }
    /**
     * Time the row was created in the database, auto-populated by the system.
     * Example: /// Example: 2023-01-01T16:00:00.123Z
     * Constraints: No constraints specified.
     */
    val createdAt : String?
        get() {
            val o = __offset(74)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val createdAtAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(74, 1)
    fun createdAtInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 74, 1)
    /**
     * Application user who created the row in the database, auto-populated by the system.
     * Example: /// Example: some.user
     * Constraints: Minimum length = 1, Maximum length = 64
     */
    val createdBy : String?
        get() {
            val o = __offset(76)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val createdByAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(76, 1)
    fun createdByInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 76, 1)
    /**
     * Source of the data.
     * Example: /// Example: Bluestaq
     * Constraints: Minimum length = 1, Maximum length = 36
     */
    val source : String?
        get() {
            val o = __offset(78)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val sourceAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(78, 1)
    fun sourceInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 78, 1)
    /**
     * Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
     * Example: /// Example: OPS1
     * Constraints: Minimum length = 0, Maximum length = 64
     */
    val origin : String?
        get() {
            val o = __offset(80)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val originAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(80, 1)
    fun originInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 80, 1)
    /**
     * Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
     * EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
     * REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
     * SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
     * TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
     * Example: /// Example: TEST
     * Constraints: Minimum length = 1, Maximum length = 32
     */
    val dataMode : Byte
        get() {
            val o = __offset(82)
            return if(o != 0) bb.get(o + bb_pos) else 0
        }
    /**
     * The originating source network on which this record was created, auto-populated by the system.
     * Example: /// Example: ORIG
     * Constraints: Minimum length = 1, Maximum length = 32
     */
    val origNetwork : String?
        get() {
            val o = __offset(84)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val origNetworkAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(84, 1)
    fun origNetworkInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 84, 1)
    companion object {
        fun validateVersion() = Constants.FLATBUFFERS_24_3_25()
        fun getRootAsSpaceEnvObservation_Full(_bb: ByteBuffer): SpaceEnvObservation_Full = getRootAsSpaceEnvObservation_Full(_bb, SpaceEnvObservation_Full())
        fun getRootAsSpaceEnvObservation_Full(_bb: ByteBuffer, obj: SpaceEnvObservation_Full): SpaceEnvObservation_Full {
            _bb.order(ByteOrder.LITTLE_ENDIAN)
            return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb))
        }
        fun SpaceEnvObservation_FullBufferHasIdentifier(_bb: ByteBuffer) : Boolean = __has_identifier(_bb, "SPAC")
        fun createSpaceEnvObservation_Full(builder: FlatBufferBuilder, idOffset: Int, classificationMarkingOffset: Int, msgTypeOffset: Int, genSystemOffset: Int, externalIdOffset: Int, dataTypeOffset: Int, genTimeOffset: Int, forecast: Boolean, derived: Boolean, idOnOrbitOffset: Int, satNo: Int, origObjectIdOffset: Int, idSensorOffset: Int, origSensorIdOffset: Int, observatoryTypeOffset: Int, observatoryNameOffset: Int, observatoryNotesOffset: Int, instrumentTypeOffset: Int, lat: Double, lon: Double, alt: Double, senReferenceFrame: Byte, senPosOffset: Int, senVelOffset: Int, measTypeOffset: Int, senEnergyLevelOffset: Int, obSetIdOffset: Int, particleTypeOffset: Int, obTimeOffset: Int, seoListOffset: Int, qualityOffset: Int, descriptionOffset: Int, descriptorOffset: Int, srcTypsOffset: Int, srcIdsOffset: Int, createdAtOffset: Int, createdByOffset: Int, sourceOffset: Int, originOffset: Int, dataMode: Byte, origNetworkOffset: Int) : Int {
            builder.startTable(41)
            addAlt(builder, alt)
            addLon(builder, lon)
            addLat(builder, lat)
            addOrigNetwork(builder, origNetworkOffset)
            addOrigin(builder, originOffset)
            addSource(builder, sourceOffset)
            addCreatedBy(builder, createdByOffset)
            addCreatedAt(builder, createdAtOffset)
            addSrcIds(builder, srcIdsOffset)
            addSrcTyps(builder, srcTypsOffset)
            addDescriptor(builder, descriptorOffset)
            addDescription(builder, descriptionOffset)
            addQuality(builder, qualityOffset)
            addSeoList(builder, seoListOffset)
            addObTime(builder, obTimeOffset)
            addParticleType(builder, particleTypeOffset)
            addObSetId(builder, obSetIdOffset)
            addSenEnergyLevel(builder, senEnergyLevelOffset)
            addMeasType(builder, measTypeOffset)
            addSenVel(builder, senVelOffset)
            addSenPos(builder, senPosOffset)
            addInstrumentType(builder, instrumentTypeOffset)
            addObservatoryNotes(builder, observatoryNotesOffset)
            addObservatoryName(builder, observatoryNameOffset)
            addObservatoryType(builder, observatoryTypeOffset)
            addOrigSensorId(builder, origSensorIdOffset)
            addIdSensor(builder, idSensorOffset)
            addOrigObjectId(builder, origObjectIdOffset)
            addSatNo(builder, satNo)
            addIdOnOrbit(builder, idOnOrbitOffset)
            addGenTime(builder, genTimeOffset)
            addDataType(builder, dataTypeOffset)
            addExternalId(builder, externalIdOffset)
            addGenSystem(builder, genSystemOffset)
            addMsgType(builder, msgTypeOffset)
            addClassificationMarking(builder, classificationMarkingOffset)
            addId(builder, idOffset)
            addDataMode(builder, dataMode)
            addSenReferenceFrame(builder, senReferenceFrame)
            addDerived(builder, derived)
            addForecast(builder, forecast)
            return endSpaceEnvObservation_Full(builder)
        }
        fun startSpaceEnvObservation_Full(builder: FlatBufferBuilder) = builder.startTable(41)
        fun addId(builder: FlatBufferBuilder, id: Int) = builder.addOffset(0, id, 0)
        fun addClassificationMarking(builder: FlatBufferBuilder, classificationMarking: Int) = builder.addOffset(1, classificationMarking, 0)
        fun addMsgType(builder: FlatBufferBuilder, msgType: Int) = builder.addOffset(2, msgType, 0)
        fun addGenSystem(builder: FlatBufferBuilder, genSystem: Int) = builder.addOffset(3, genSystem, 0)
        fun addExternalId(builder: FlatBufferBuilder, externalId: Int) = builder.addOffset(4, externalId, 0)
        fun addDataType(builder: FlatBufferBuilder, dataType: Int) = builder.addOffset(5, dataType, 0)
        fun addGenTime(builder: FlatBufferBuilder, genTime: Int) = builder.addOffset(6, genTime, 0)
        fun addForecast(builder: FlatBufferBuilder, forecast: Boolean) = builder.addBoolean(7, forecast, false)
        fun addDerived(builder: FlatBufferBuilder, derived: Boolean) = builder.addBoolean(8, derived, false)
        fun addIdOnOrbit(builder: FlatBufferBuilder, idOnOrbit: Int) = builder.addOffset(9, idOnOrbit, 0)
        fun addSatNo(builder: FlatBufferBuilder, satNo: Int) = builder.addInt(10, satNo, 0)
        fun addOrigObjectId(builder: FlatBufferBuilder, origObjectId: Int) = builder.addOffset(11, origObjectId, 0)
        fun addIdSensor(builder: FlatBufferBuilder, idSensor: Int) = builder.addOffset(12, idSensor, 0)
        fun addOrigSensorId(builder: FlatBufferBuilder, origSensorId: Int) = builder.addOffset(13, origSensorId, 0)
        fun addObservatoryType(builder: FlatBufferBuilder, observatoryType: Int) = builder.addOffset(14, observatoryType, 0)
        fun addObservatoryName(builder: FlatBufferBuilder, observatoryName: Int) = builder.addOffset(15, observatoryName, 0)
        fun addObservatoryNotes(builder: FlatBufferBuilder, observatoryNotes: Int) = builder.addOffset(16, observatoryNotes, 0)
        fun addInstrumentType(builder: FlatBufferBuilder, instrumentType: Int) = builder.addOffset(17, instrumentType, 0)
        fun addLat(builder: FlatBufferBuilder, lat: Double) = builder.addDouble(18, lat, 0.0)
        fun addLon(builder: FlatBufferBuilder, lon: Double) = builder.addDouble(19, lon, 0.0)
        fun addAlt(builder: FlatBufferBuilder, alt: Double) = builder.addDouble(20, alt, 0.0)
        fun addSenReferenceFrame(builder: FlatBufferBuilder, senReferenceFrame: Byte) = builder.addByte(21, senReferenceFrame, 0)
        fun addSenPos(builder: FlatBufferBuilder, senPos: Int) = builder.addOffset(22, senPos, 0)
        fun createSenPosVector(builder: FlatBufferBuilder, data: IntArray) : Int {
            builder.startVector(4, data.size, 4)
            for (i in data.size - 1 downTo 0) {
                builder.addOffset(data[i])
            }
            return builder.endVector()
        }
        fun startSenPosVector(builder: FlatBufferBuilder, numElems: Int) = builder.startVector(4, numElems, 4)
        fun addSenVel(builder: FlatBufferBuilder, senVel: Int) = builder.addOffset(23, senVel, 0)
        fun createSenVelVector(builder: FlatBufferBuilder, data: IntArray) : Int {
            builder.startVector(4, data.size, 4)
            for (i in data.size - 1 downTo 0) {
                builder.addOffset(data[i])
            }
            return builder.endVector()
        }
        fun startSenVelVector(builder: FlatBufferBuilder, numElems: Int) = builder.startVector(4, numElems, 4)
        fun addMeasType(builder: FlatBufferBuilder, measType: Int) = builder.addOffset(24, measType, 0)
        fun addSenEnergyLevel(builder: FlatBufferBuilder, senEnergyLevel: Int) = builder.addOffset(25, senEnergyLevel, 0)
        fun addObSetId(builder: FlatBufferBuilder, obSetId: Int) = builder.addOffset(26, obSetId, 0)
        fun addParticleType(builder: FlatBufferBuilder, particleType: Int) = builder.addOffset(27, particleType, 0)
        fun addObTime(builder: FlatBufferBuilder, obTime: Int) = builder.addOffset(28, obTime, 0)
        fun addSeoList(builder: FlatBufferBuilder, seoList: Int) = builder.addOffset(29, seoList, 0)
        fun createSeoListVector(builder: FlatBufferBuilder, data: IntArray) : Int {
            builder.startVector(4, data.size, 4)
            for (i in data.size - 1 downTo 0) {
                builder.addOffset(data[i])
            }
            return builder.endVector()
        }
        fun startSeoListVector(builder: FlatBufferBuilder, numElems: Int) = builder.startVector(4, numElems, 4)
        fun addQuality(builder: FlatBufferBuilder, quality: Int) = builder.addOffset(30, quality, 0)
        fun addDescription(builder: FlatBufferBuilder, description: Int) = builder.addOffset(31, description, 0)
        fun addDescriptor(builder: FlatBufferBuilder, descriptor: Int) = builder.addOffset(32, descriptor, 0)
        fun addSrcTyps(builder: FlatBufferBuilder, srcTyps: Int) = builder.addOffset(33, srcTyps, 0)
        fun createSrcTypsVector(builder: FlatBufferBuilder, data: IntArray) : Int {
            builder.startVector(4, data.size, 4)
            for (i in data.size - 1 downTo 0) {
                builder.addOffset(data[i])
            }
            return builder.endVector()
        }
        fun startSrcTypsVector(builder: FlatBufferBuilder, numElems: Int) = builder.startVector(4, numElems, 4)
        fun addSrcIds(builder: FlatBufferBuilder, srcIds: Int) = builder.addOffset(34, srcIds, 0)
        fun createSrcIdsVector(builder: FlatBufferBuilder, data: IntArray) : Int {
            builder.startVector(4, data.size, 4)
            for (i in data.size - 1 downTo 0) {
                builder.addOffset(data[i])
            }
            return builder.endVector()
        }
        fun startSrcIdsVector(builder: FlatBufferBuilder, numElems: Int) = builder.startVector(4, numElems, 4)
        fun addCreatedAt(builder: FlatBufferBuilder, createdAt: Int) = builder.addOffset(35, createdAt, 0)
        fun addCreatedBy(builder: FlatBufferBuilder, createdBy: Int) = builder.addOffset(36, createdBy, 0)
        fun addSource(builder: FlatBufferBuilder, source: Int) = builder.addOffset(37, source, 0)
        fun addOrigin(builder: FlatBufferBuilder, origin: Int) = builder.addOffset(38, origin, 0)
        fun addDataMode(builder: FlatBufferBuilder, dataMode: Byte) = builder.addByte(39, dataMode, 0)
        fun addOrigNetwork(builder: FlatBufferBuilder, origNetwork: Int) = builder.addOffset(40, origNetwork, 0)
        fun endSpaceEnvObservation_Full(builder: FlatBufferBuilder) : Int {
            val o = builder.endTable()
            return o
        }
        fun finishSpaceEnvObservationFullBuffer(builder: FlatBufferBuilder, offset: Int) = builder.finish(offset, "SPAC")
        fun finishSizePrefixedSpaceEnvObservation_FullBuffer(builder: FlatBufferBuilder, offset: Int) = builder.finishSizePrefixed(offset, "SPAC")
    }
}
