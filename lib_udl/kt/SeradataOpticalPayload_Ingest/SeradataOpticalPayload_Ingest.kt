// automatically generated by the FlatBuffers compiler, do not modify

import com.google.flatbuffers.BaseVector
import com.google.flatbuffers.BooleanVector
import com.google.flatbuffers.ByteVector
import com.google.flatbuffers.Constants
import com.google.flatbuffers.DoubleVector
import com.google.flatbuffers.FlatBufferBuilder
import com.google.flatbuffers.FloatVector
import com.google.flatbuffers.LongVector
import com.google.flatbuffers.StringVector
import com.google.flatbuffers.Struct
import com.google.flatbuffers.Table
import com.google.flatbuffers.UnionVector
import java.nio.ByteBuffer
import java.nio.ByteOrder
import kotlin.math.sign

/**
 * /// Details for an optical payload from  Seradata.
 */
@Suppress("unused")
class SeradataOpticalPayload_Ingest : Table() {

    fun __init(_i: Int, _bb: ByteBuffer)  {
        __reset(_i, _bb)
    }
    fun __assign(_i: Int, _bb: ByteBuffer) : SeradataOpticalPayload_Ingest {
        __init(_i, _bb)
        return this
    }
    /**
     * Unique identifier of the record, auto-generated by the system.
     * Example: /// Example: SERADATAOPTICALPAYLOAD-ID
     * Constraints: Minimum length = 1, Maximum length = 36
     */
    val id : String?
        get() {
            val o = __offset(4)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val idAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(4, 1)
    fun idInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 4, 1)
    /**
     * Classification marking of the data in IC/CAPCO Portion-marked format.
     * Example: /// Example: U
     * Constraints: Minimum length = 1, Maximum length = 128
     */
    val classificationMarking : String?
        get() {
            val o = __offset(6)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val classificationMarkingAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(6, 1)
    fun classificationMarkingInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 6, 1)
    /**
     * Seradata ID of the spacecraft (SeradataSpacecraftDetails ID).
     * Example: /// Example: spacecraftId
     * Constraints: Minimum length = 1, Maximum length = 36
     */
    val spacecraftId : String?
        get() {
            val o = __offset(8)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val spacecraftIdAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(8, 1)
    fun spacecraftIdInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 8, 1)
    /**
     * UUID of the Sensor record.
     * Example: /// Example: idSensor
     * Constraints: Minimum length = 0, Maximum length = 36
     */
    val idSensor : String?
        get() {
            val o = __offset(10)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val idSensorAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(10, 1)
    fun idSensorInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 10, 1)
    /**
     * Hosted for company/Organization Id.
     * Example: /// Example: hostedForCompanyOrgId
     * Constraints: Minimum length = 0, Maximum length = 36
     */
    val hostedForCompanyOrgId : String?
        get() {
            val o = __offset(12)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val hostedForCompanyOrgIdAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(12, 1)
    fun hostedForCompanyOrgIdInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 12, 1)
    /**
     * Manufacturer Organization Id.
     * Example: /// Example: manufacturerOrgId
     * Constraints: Minimum length = 0, Maximum length = 36
     */
    val manufacturerOrgId : String?
        get() {
            val o = __offset(14)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val manufacturerOrgIdAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(14, 1)
    fun manufacturerOrgIdInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 14, 1)
    /**
     * Imaging category for this payload, e.g. Multispectral, Infrared, Panchromatic.
     * Example: /// Example: Infrared
     * Constraints: Minimum length = 0, Maximum length = 50
     */
    val imagingPayloadCategory : String?
        get() {
            val o = __offset(16)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val imagingPayloadCategoryAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(16, 1)
    fun imagingPayloadCategoryInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 16, 1)
    /**
     * Sensor name from Seradata, e.g. TOURNESOL, MESSR (Multispectral Self-Scanning Radiometer), AWFI, etc.
     * Example: /// Example: TOURNESOL
     * Constraints: Minimum length = 0, Maximum length = 50
     */
    val name : String?
        get() {
            val o = __offset(18)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val nameAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(18, 1)
    fun nameInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 18, 1)
    /**
     * Spectral Band supported by this payload, e.g. Green, Red, Mid-wave infrared, etc.
     * Example: /// Example: Green
     * Constraints: Minimum length = 0, Maximum length = 20
     */
    val spectralBand : String?
        get() {
            val o = __offset(20)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val spectralBandAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(20, 1)
    fun spectralBandInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 20, 1)
    /**
     * Frequency limit for this payload, e.g. 0.51 - 0.59.
     * Example: /// Example: 0.51
     * Constraints: Minimum length = 0, Maximum length = 50
     */
    val spectralFrequencyLimits : String?
        get() {
            val o = __offset(22)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val spectralFrequencyLimitsAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(22, 1)
    fun spectralFrequencyLimitsInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 22, 1)
    /**
     * Number of film return canisters.
     * Example: /// Example: 1
     * Constraints: No constraints specified.
     */
    val numberOfFilmReturnCanisters : Int
        get() {
            val o = __offset(24)
            return if(o != 0) bb.getInt(o + bb_pos) else 0
        }
    /**
     * Best resolution.
     * Example: /// Example: 1.23
     * Constraints: No constraints specified.
     */
    val bestResolution : Double
        get() {
            val o = __offset(26)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Swath width in kilometers.
     * Example: /// Example: 1.23
     * Constraints: No constraints specified.
     */
    val swathWidth : Double
        get() {
            val o = __offset(28)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Recorder size.
     * Example: /// Example: 1024
     * Constraints: Minimum length = 0, Maximum length = 50
     */
    val recorderSize : String?
        get() {
            val o = __offset(30)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val recorderSizeAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(30, 1)
    fun recorderSizeInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 30, 1)
    /**
     * Field of view of this radar in kilometers.
     * Example: /// Example: 1.23
     * Constraints: No constraints specified.
     */
    val fieldOfView : Double
        get() {
            val o = __offset(32)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Field of regard of this radar in degrees.
     * Example: /// Example: 1.23
     * Constraints: No constraints specified.
     */
    val fieldOfRegard : Double
        get() {
            val o = __offset(34)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Point method for this radar, e.g. Spacecraft.
     * Example: /// Example: Spacecraft
     * Constraints: Minimum length = 0, Maximum length = 50
     */
    val pointingMethod : String?
        get() {
            val o = __offset(36)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val pointingMethodAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(36, 1)
    fun pointingMethodInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 36, 1)
    /**
     * Ground Station info for this payload.
     * Example: /// Example: groundStations
     * Constraints: Minimum length = 0, Maximum length = 256
     */
    val groundStations : String?
        get() {
            val o = __offset(38)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val groundStationsAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(38, 1)
    fun groundStationsInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 38, 1)
    /**
     * Ground Station Locations for this payload.
     * Example: /// Example: groundStationLocations
     * Constraints: Minimum length = 0, Maximum length = 128
     */
    val groundStationLocations : String?
        get() {
            val o = __offset(40)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val groundStationLocationsAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(40, 1)
    fun groundStationLocationsInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 40, 1)
    /**
     * Payload notes.
     * Example: /// Example: Sample Notes
     * Constraints: Minimum length = 0, Maximum length = 2147483647
     */
    val notes : String?
        get() {
            val o = __offset(42)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val notesAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(42, 1)
    fun notesInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 42, 1)
    /**
     * Time the row was created in the database, auto-populated by the system.
     * Example: /// Example: 2018-01-01T16:00:00.123Z
     * Constraints: No constraints specified.
     */
    val createdAt : String?
        get() {
            val o = __offset(44)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val createdAtAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(44, 1)
    fun createdAtInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 44, 1)
    /**
     * Application user who created the row in the database, auto-populated by the system.
     * Example: /// Example: some.user
     * Constraints: Minimum length = 1, Maximum length = 64
     */
    val createdBy : String?
        get() {
            val o = __offset(46)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val createdByAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(46, 1)
    fun createdByInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 46, 1)
    /**
     * Source of the data.
     * Example: /// Example: Bluestaq
     * Constraints: Minimum length = 1, Maximum length = 64
     */
    val source : String?
        get() {
            val o = __offset(48)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val sourceAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(48, 1)
    fun sourceInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 48, 1)
    /**
     * Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
     * Example: /// Example: THIRD_PARTY_DATASOURCE
     * Constraints: Minimum length = 0, Maximum length = 64
     */
    val origin : String?
        get() {
            val o = __offset(50)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val originAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(50, 1)
    fun originInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 50, 1)
    /**
     * The originating source network on which this record was created, auto-populated by the system.
     * Example: /// Example: ORIG
     * Constraints: Minimum length = 1, Maximum length = 32
     */
    val origNetwork : String?
        get() {
            val o = __offset(52)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val origNetworkAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(52, 1)
    fun origNetworkInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 52, 1)
    /**
     * Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
     * EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
     * REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
     * SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
     * TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
     * Example: /// Example: TEST
     * Constraints: Minimum length = 1, Maximum length = 32
     */
    val dataMode : Byte
        get() {
            val o = __offset(54)
            return if(o != 0) bb.get(o + bb_pos) else 0
        }
    companion object {
        fun validateVersion() = Constants.FLATBUFFERS_24_3_25()
        fun getRootAsSeradataOpticalPayload_Ingest(_bb: ByteBuffer): SeradataOpticalPayload_Ingest = getRootAsSeradataOpticalPayload_Ingest(_bb, SeradataOpticalPayload_Ingest())
        fun getRootAsSeradataOpticalPayload_Ingest(_bb: ByteBuffer, obj: SeradataOpticalPayload_Ingest): SeradataOpticalPayload_Ingest {
            _bb.order(ByteOrder.LITTLE_ENDIAN)
            return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb))
        }
        fun SeradataOpticalPayload_IngestBufferHasIdentifier(_bb: ByteBuffer) : Boolean = __has_identifier(_bb, "SERA")
        fun createSeradataOpticalPayload_Ingest(builder: FlatBufferBuilder, idOffset: Int, classificationMarkingOffset: Int, spacecraftIdOffset: Int, idSensorOffset: Int, hostedForCompanyOrgIdOffset: Int, manufacturerOrgIdOffset: Int, imagingPayloadCategoryOffset: Int, nameOffset: Int, spectralBandOffset: Int, spectralFrequencyLimitsOffset: Int, numberOfFilmReturnCanisters: Int, bestResolution: Double, swathWidth: Double, recorderSizeOffset: Int, fieldOfView: Double, fieldOfRegard: Double, pointingMethodOffset: Int, groundStationsOffset: Int, groundStationLocationsOffset: Int, notesOffset: Int, createdAtOffset: Int, createdByOffset: Int, sourceOffset: Int, originOffset: Int, origNetworkOffset: Int, dataMode: Byte) : Int {
            builder.startTable(26)
            addFieldOfRegard(builder, fieldOfRegard)
            addFieldOfView(builder, fieldOfView)
            addSwathWidth(builder, swathWidth)
            addBestResolution(builder, bestResolution)
            addOrigNetwork(builder, origNetworkOffset)
            addOrigin(builder, originOffset)
            addSource(builder, sourceOffset)
            addCreatedBy(builder, createdByOffset)
            addCreatedAt(builder, createdAtOffset)
            addNotes(builder, notesOffset)
            addGroundStationLocations(builder, groundStationLocationsOffset)
            addGroundStations(builder, groundStationsOffset)
            addPointingMethod(builder, pointingMethodOffset)
            addRecorderSize(builder, recorderSizeOffset)
            addNumberOfFilmReturnCanisters(builder, numberOfFilmReturnCanisters)
            addSpectralFrequencyLimits(builder, spectralFrequencyLimitsOffset)
            addSpectralBand(builder, spectralBandOffset)
            addName(builder, nameOffset)
            addImagingPayloadCategory(builder, imagingPayloadCategoryOffset)
            addManufacturerOrgId(builder, manufacturerOrgIdOffset)
            addHostedForCompanyOrgId(builder, hostedForCompanyOrgIdOffset)
            addIdSensor(builder, idSensorOffset)
            addSpacecraftId(builder, spacecraftIdOffset)
            addClassificationMarking(builder, classificationMarkingOffset)
            addId(builder, idOffset)
            addDataMode(builder, dataMode)
            return endSeradataOpticalPayload_Ingest(builder)
        }
        fun startSeradataOpticalPayload_Ingest(builder: FlatBufferBuilder) = builder.startTable(26)
        fun addId(builder: FlatBufferBuilder, id: Int) = builder.addOffset(0, id, 0)
        fun addClassificationMarking(builder: FlatBufferBuilder, classificationMarking: Int) = builder.addOffset(1, classificationMarking, 0)
        fun addSpacecraftId(builder: FlatBufferBuilder, spacecraftId: Int) = builder.addOffset(2, spacecraftId, 0)
        fun addIdSensor(builder: FlatBufferBuilder, idSensor: Int) = builder.addOffset(3, idSensor, 0)
        fun addHostedForCompanyOrgId(builder: FlatBufferBuilder, hostedForCompanyOrgId: Int) = builder.addOffset(4, hostedForCompanyOrgId, 0)
        fun addManufacturerOrgId(builder: FlatBufferBuilder, manufacturerOrgId: Int) = builder.addOffset(5, manufacturerOrgId, 0)
        fun addImagingPayloadCategory(builder: FlatBufferBuilder, imagingPayloadCategory: Int) = builder.addOffset(6, imagingPayloadCategory, 0)
        fun addName(builder: FlatBufferBuilder, name: Int) = builder.addOffset(7, name, 0)
        fun addSpectralBand(builder: FlatBufferBuilder, spectralBand: Int) = builder.addOffset(8, spectralBand, 0)
        fun addSpectralFrequencyLimits(builder: FlatBufferBuilder, spectralFrequencyLimits: Int) = builder.addOffset(9, spectralFrequencyLimits, 0)
        fun addNumberOfFilmReturnCanisters(builder: FlatBufferBuilder, numberOfFilmReturnCanisters: Int) = builder.addInt(10, numberOfFilmReturnCanisters, 0)
        fun addBestResolution(builder: FlatBufferBuilder, bestResolution: Double) = builder.addDouble(11, bestResolution, 0.0)
        fun addSwathWidth(builder: FlatBufferBuilder, swathWidth: Double) = builder.addDouble(12, swathWidth, 0.0)
        fun addRecorderSize(builder: FlatBufferBuilder, recorderSize: Int) = builder.addOffset(13, recorderSize, 0)
        fun addFieldOfView(builder: FlatBufferBuilder, fieldOfView: Double) = builder.addDouble(14, fieldOfView, 0.0)
        fun addFieldOfRegard(builder: FlatBufferBuilder, fieldOfRegard: Double) = builder.addDouble(15, fieldOfRegard, 0.0)
        fun addPointingMethod(builder: FlatBufferBuilder, pointingMethod: Int) = builder.addOffset(16, pointingMethod, 0)
        fun addGroundStations(builder: FlatBufferBuilder, groundStations: Int) = builder.addOffset(17, groundStations, 0)
        fun addGroundStationLocations(builder: FlatBufferBuilder, groundStationLocations: Int) = builder.addOffset(18, groundStationLocations, 0)
        fun addNotes(builder: FlatBufferBuilder, notes: Int) = builder.addOffset(19, notes, 0)
        fun addCreatedAt(builder: FlatBufferBuilder, createdAt: Int) = builder.addOffset(20, createdAt, 0)
        fun addCreatedBy(builder: FlatBufferBuilder, createdBy: Int) = builder.addOffset(21, createdBy, 0)
        fun addSource(builder: FlatBufferBuilder, source: Int) = builder.addOffset(22, source, 0)
        fun addOrigin(builder: FlatBufferBuilder, origin: Int) = builder.addOffset(23, origin, 0)
        fun addOrigNetwork(builder: FlatBufferBuilder, origNetwork: Int) = builder.addOffset(24, origNetwork, 0)
        fun addDataMode(builder: FlatBufferBuilder, dataMode: Byte) = builder.addByte(25, dataMode, 0)
        fun endSeradataOpticalPayload_Ingest(builder: FlatBufferBuilder) : Int {
            val o = builder.endTable()
            return o
        }
        fun finishSeradataOpticalPayloadIngestBuffer(builder: FlatBufferBuilder, offset: Int) = builder.finish(offset, "SERA")
        fun finishSizePrefixedSeradataOpticalPayload_IngestBuffer(builder: FlatBufferBuilder, offset: Int) = builder.finishSizePrefixed(offset, "SERA")
    }
}
