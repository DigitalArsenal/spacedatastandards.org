// automatically generated by the FlatBuffers compiler, do not modify

import com.google.flatbuffers.BaseVector
import com.google.flatbuffers.BooleanVector
import com.google.flatbuffers.ByteVector
import com.google.flatbuffers.Constants
import com.google.flatbuffers.DoubleVector
import com.google.flatbuffers.FlatBufferBuilder
import com.google.flatbuffers.FloatVector
import com.google.flatbuffers.LongVector
import com.google.flatbuffers.StringVector
import com.google.flatbuffers.Struct
import com.google.flatbuffers.Table
import com.google.flatbuffers.UnionVector
import java.nio.ByteBuffer
import java.nio.ByteOrder
import kotlin.math.sign

/**
 * /// ISR Collection data.
 */
@Suppress("unused")
class ISRCollection_Full : Table() {

    fun __init(_i: Int, _bb: ByteBuffer)  {
        __reset(_i, _bb)
    }
    fun __assign(_i: Int, _bb: ByteBuffer) : ISRCollection_Full {
        __init(_i, _bb)
        return this
    }
    /**
     * Unique identifier of the record, auto-generated by the system.
     * Example: /// Example: ISRCOLLECTION-ID
     * Constraints: Minimum length = 1, Maximum length = 36
     */
    val id : String?
        get() {
            val o = __offset(4)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val idAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(4, 1)
    fun idInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 4, 1)
    /**
     * Classification marking of the data in IC/CAPCO Portion-marked format.
     * Example: /// Example: U
     * Constraints: Minimum length = 1, Maximum length = 128
     */
    val classificationMarking : String?
        get() {
            val o = __offset(6)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val classificationMarkingAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(6, 1)
    fun classificationMarkingInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 6, 1)
    /**
     * Version of the IDEX software the request came from for compatibility.
     * Example: /// Example: 2
     * Constraints: No constraints specified.
     */
    val idexVersion : Int
        get() {
            val o = __offset(8)
            return if(o != 0) bb.getInt(o + bb_pos) else 0
        }
    /**
     * Human readable Mission Name.
     * Example: /// Example: Example mission name
     * Constraints: Minimum length = 0, Maximum length = 128
     */
    val name : String?
        get() {
            val o = __offset(10)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val nameAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(10, 1)
    fun nameInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 10, 1)
    /**
     * Mission Identifier.
     * Example: /// Example: myTask-2020-04-23T00:00:00.000Z
     * Constraints: Minimum length = 0, Maximum length = 32
     */
    val missionId : String?
        get() {
            val o = __offset(12)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val missionIdAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(12, 1)
    fun missionIdInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 12, 1)
    /**
     * Designation of mission Area Of Responsibility.
     * Example: /// Example: Kandahar
     * Constraints: Minimum length = 0, Maximum length = 32
     */
    val missionAor : String?
        get() {
            val o = __offset(14)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val missionAorAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(14, 1)
    fun missionAorInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 14, 1)
    /**
     * Primary type of intelligence to be collected during the mission.
     * Example: /// Example: Sig
     * Constraints: Minimum length = 0, Maximum length = 32
     */
    val missionPrimaryIntelDiscipline : String?
        get() {
            val o = __offset(16)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val missionPrimaryIntelDisciplineAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(16, 1)
    fun missionPrimaryIntelDisciplineInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 16, 1)
    /**
     * Sub category of primary intelligence to be collected.
     * Example: /// Example: FMV
     * Constraints: Minimum length = 0, Maximum length = 32
     */
    val missionPrimarySubCategory : String?
        get() {
            val o = __offset(18)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val missionPrimarySubCategoryAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(18, 1)
    fun missionPrimarySubCategoryInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 18, 1)
    /**
     * Type of intelligence to be collected second.
     * Example: /// Example: Intelligence_2
     * Constraints: Minimum length = 0, Maximum length = 32
     */
    val missionSecondaryIntelDiscipline : String?
        get() {
            val o = __offset(20)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val missionSecondaryIntelDisciplineAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(20, 1)
    fun missionSecondaryIntelDisciplineInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 20, 1)
    /**
     * Mission sub category for secondary intelligence discipline to be collected.
     * Example: /// Example: Convoy
     * Constraints: Minimum length = 0, Maximum length = 32
     */
    val missionSecondarySubCategory : String?
        get() {
            val o = __offset(22)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val missionSecondarySubCategoryAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(22, 1)
    fun missionSecondarySubCategoryInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 22, 1)
    /**
     * What is the primary objective(Role) of this mission.
     * Example: /// Example: Targeting of Lead Vehicle
     * Constraints: Minimum length = 0, Maximum length = 32
     */
    val missionRole : String?
        get() {
            val o = __offset(24)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val missionRoleAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(24, 1)
    fun missionRoleInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 24, 1)
    /**
     * Mission operation name.
     * Example: /// Example: OP-HONEY-BADGER
     * Constraints: Minimum length = 0, Maximum length = 32
     */
    val missionOperation : String?
        get() {
            val o = __offset(26)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val missionOperationAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(26, 1)
    fun missionOperationInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 26, 1)
    /**
     * Mission Priority (1-n).
     * Example: /// Example: 1
     * Constraints: No constraints specified.
     */
    val missionPriority : Int
        get() {
            val o = __offset(28)
            return if(o != 0) bb.getInt(o + bb_pos) else 0
        }
    /**
     * Name of the Supporting unit/Location that is performing this mission.
     * Example: /// Example: ENVOYS
     * Constraints: Minimum length = 0, Maximum length = 32
     */
    val missionSupportedUnit : String?
        get() {
            val o = __offset(30)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val missionSupportedUnitAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(30, 1)
    fun missionSupportedUnitInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 30, 1)
    /**
     * Text version of what we are emphasizing in this mission.
     * Example: /// Example: Mission emphasis
     * Constraints: Minimum length = 0, Maximum length = 32
     */
    val missionEmphasis : String?
        get() {
            val o = __offset(32)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val missionEmphasisAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(32, 1)
    fun missionEmphasisInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 32, 1)
    /**
     * WGS-84 latitude of the start position, in degrees. -90 to 90 degrees (negative values south of equator).
     * Example: /// Example: 45.23
     * Constraints: No constraints specified.
     */
    val missionStartPointLat : Double
        get() {
            val o = __offset(34)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * WGS-84 longitude of the start position, in degrees. -180 to 180 degrees (negative values west of Prime Meridian).
     * Example: /// Example: 80.23
     * Constraints: No constraints specified.
     */
    val missionStartPointLong : Double
        get() {
            val o = __offset(36)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Mission geographical collection area.
     * Example: /// Example: Example collection area
     * Constraints: Minimum length = 0, Maximum length = 512
     */
    val missionCollectionArea : String?
        get() {
            val o = __offset(38)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val missionCollectionAreaAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(38, 1)
    fun missionCollectionAreaInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 38, 1)
    /**
     * Joint Operations Area.
     * Example: /// Example: Operation area
     * Constraints: Minimum length = 0, Maximum length = 32
     */
    val missionJoa : String?
        get() {
            val o = __offset(40)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val missionJoaAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(40, 1)
    fun missionJoaInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 40, 1)
    /**
     * A synchronization matrix is used to organize the logistics synchronization process during a mission.
     * Example: /// Example: MATRIX
     * Constraints: Minimum length = 0, Maximum length = 32
     */
    val missionSyncMatrixBin : String?
        get() {
            val o = __offset(42)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val missionSyncMatrixBinAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(42, 1)
    fun missionSyncMatrixBinInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 42, 1)
    /**
     * Country code of the mission.  A Country may represent countries, multi-national consortiums, and international organizations.
     * Example: /// Example: US
     * Constraints: Minimum length = 0, Maximum length = 4
     */
    val missionCountry : String?
        get() {
            val o = __offset(44)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val missionCountryAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(44, 1)
    fun missionCountryInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 44, 1)
    /**
     * Region of the mission.
     * Example: /// Example: Example Region
     * Constraints: Minimum length = 0, Maximum length = 32
     */
    val missionRegion : String?
        get() {
            val o = __offset(46)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val missionRegionAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(46, 1)
    fun missionRegionInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 46, 1)
    /**
     * Subregion of the mission.
     * Example: /// Example: Example Subregion
     * Constraints: Minimum length = 0, Maximum length = 32
     */
    val missionSubRegion : String?
        get() {
            val o = __offset(48)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val missionSubRegionAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(48, 1)
    fun missionSubRegionInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 48, 1)
    /**
     * Mission desired collection requirements.
     * Example: /// Example: No example provided.
     * Constraints: No constraints specified.
     */
    fun collectionRequirements(j: Int) : String? {
        val o = __offset(50)
        return if (o != 0) {
            __string(__vector(o) + j * 4)
        } else {
            null
        }
    }
    val collectionRequirementsLength : Int
        get() {
            val o = __offset(50); return if (o != 0) __vector_len(o) else 0
        }
    /**
     * Object for data dissemination.
     * Example: /// Example: No example provided.
     * Constraints: No constraints specified.
     */
    fun transit(j: Int) : String? {
        val o = __offset(52)
        return if (o != 0) {
            __string(__vector(o) + j * 4)
        } else {
            null
        }
    }
    val transitLength : Int
        get() {
            val o = __offset(52); return if (o != 0) __vector_len(o) else 0
        }
    /**
     * Individual taskings to complete the mission.
     * Example: /// Example: No example provided.
     * Constraints: No constraints specified.
     */
    fun taskings(j: Int) : String? {
        val o = __offset(54)
        return if (o != 0) {
            __string(__vector(o) + j * 4)
        } else {
            null
        }
    }
    val taskingsLength : Int
        get() {
            val o = __offset(54); return if (o != 0) __vector_len(o) else 0
        }
    /**
     * Time the row was created in the database, auto-populated by the system.
     * Example: /// Example: 2021-01-19T01:01:15.001Z
     * Constraints: No constraints specified.
     */
    val createdAt : String?
        get() {
            val o = __offset(56)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val createdAtAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(56, 1)
    fun createdAtInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 56, 1)
    /**
     * Application user who created the row in the database, auto-populated by the system.
     * Example: /// Example: some.user
     * Constraints: Minimum length = 1, Maximum length = 64
     */
    val createdBy : String?
        get() {
            val o = __offset(58)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val createdByAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(58, 1)
    fun createdByInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 58, 1)
    /**
     * Time the row was updated in the database, auto-populated by the system, example = 2018-01-01T16:00:00.123Z.
     * Example: /// Example: 2018-01-01T16:00:00.123Z
     * Constraints: No constraints specified.
     */
    val updatedAt : String?
        get() {
            val o = __offset(60)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val updatedAtAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(60, 1)
    fun updatedAtInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 60, 1)
    /**
     * Application user who updated the row in the database, auto-populated by the system.
     * Example: /// Example: some.user
     * Constraints: Minimum length = 0, Maximum length = 64
     */
    val updatedBy : String?
        get() {
            val o = __offset(62)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val updatedByAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(62, 1)
    fun updatedByInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 62, 1)
    /**
     * Source of the data.
     * Example: /// Example: Bluestaq
     * Constraints: Minimum length = 1, Maximum length = 64
     */
    val source : String?
        get() {
            val o = __offset(64)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val sourceAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(64, 1)
    fun sourceInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 64, 1)
    /**
     * Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
     * Example: /// Example: THIRD_PARTY_DATASOURCE
     * Constraints: Minimum length = 0, Maximum length = 64
     */
    val origin : String?
        get() {
            val o = __offset(66)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val originAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(66, 1)
    fun originInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 66, 1)
    /**
     * Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
     * EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
     * REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
     * SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
     * TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
     * Example: /// Example: TEST
     * Constraints: Minimum length = 1, Maximum length = 32
     */
    val dataMode : Byte
        get() {
            val o = __offset(68)
            return if(o != 0) bb.get(o + bb_pos) else 0
        }
    /**
     * The originating source network on which this record was created, auto-populated by the system.
     * Example: /// Example: ORIG
     * Constraints: Minimum length = 1, Maximum length = 32
     */
    val origNetwork : String?
        get() {
            val o = __offset(70)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val origNetworkAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(70, 1)
    fun origNetworkInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 70, 1)
    companion object {
        fun validateVersion() = Constants.FLATBUFFERS_24_3_25()
        fun getRootAsISRCollection_Full(_bb: ByteBuffer): ISRCollection_Full = getRootAsISRCollection_Full(_bb, ISRCollection_Full())
        fun getRootAsISRCollection_Full(_bb: ByteBuffer, obj: ISRCollection_Full): ISRCollection_Full {
            _bb.order(ByteOrder.LITTLE_ENDIAN)
            return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb))
        }
        fun ISRCollection_FullBufferHasIdentifier(_bb: ByteBuffer) : Boolean = __has_identifier(_bb, "ISRC")
        fun createISRCollection_Full(builder: FlatBufferBuilder, idOffset: Int, classificationMarkingOffset: Int, idexVersion: Int, nameOffset: Int, missionIdOffset: Int, missionAorOffset: Int, missionPrimaryIntelDisciplineOffset: Int, missionPrimarySubCategoryOffset: Int, missionSecondaryIntelDisciplineOffset: Int, missionSecondarySubCategoryOffset: Int, missionRoleOffset: Int, missionOperationOffset: Int, missionPriority: Int, missionSupportedUnitOffset: Int, missionEmphasisOffset: Int, missionStartPointLat: Double, missionStartPointLong: Double, missionCollectionAreaOffset: Int, missionJoaOffset: Int, missionSyncMatrixBinOffset: Int, missionCountryOffset: Int, missionRegionOffset: Int, missionSubRegionOffset: Int, collectionRequirementsOffset: Int, transitOffset: Int, taskingsOffset: Int, createdAtOffset: Int, createdByOffset: Int, updatedAtOffset: Int, updatedByOffset: Int, sourceOffset: Int, originOffset: Int, dataMode: Byte, origNetworkOffset: Int) : Int {
            builder.startTable(34)
            addMissionStartPointLong(builder, missionStartPointLong)
            addMissionStartPointLat(builder, missionStartPointLat)
            addOrigNetwork(builder, origNetworkOffset)
            addOrigin(builder, originOffset)
            addSource(builder, sourceOffset)
            addUpdatedBy(builder, updatedByOffset)
            addUpdatedAt(builder, updatedAtOffset)
            addCreatedBy(builder, createdByOffset)
            addCreatedAt(builder, createdAtOffset)
            addTaskings(builder, taskingsOffset)
            addTransit(builder, transitOffset)
            addCollectionRequirements(builder, collectionRequirementsOffset)
            addMissionSubRegion(builder, missionSubRegionOffset)
            addMissionRegion(builder, missionRegionOffset)
            addMissionCountry(builder, missionCountryOffset)
            addMissionSyncMatrixBin(builder, missionSyncMatrixBinOffset)
            addMissionJoa(builder, missionJoaOffset)
            addMissionCollectionArea(builder, missionCollectionAreaOffset)
            addMissionEmphasis(builder, missionEmphasisOffset)
            addMissionSupportedUnit(builder, missionSupportedUnitOffset)
            addMissionPriority(builder, missionPriority)
            addMissionOperation(builder, missionOperationOffset)
            addMissionRole(builder, missionRoleOffset)
            addMissionSecondarySubCategory(builder, missionSecondarySubCategoryOffset)
            addMissionSecondaryIntelDiscipline(builder, missionSecondaryIntelDisciplineOffset)
            addMissionPrimarySubCategory(builder, missionPrimarySubCategoryOffset)
            addMissionPrimaryIntelDiscipline(builder, missionPrimaryIntelDisciplineOffset)
            addMissionAOR(builder, missionAorOffset)
            addMissionId(builder, missionIdOffset)
            addName(builder, nameOffset)
            addIdexVersion(builder, idexVersion)
            addClassificationMarking(builder, classificationMarkingOffset)
            addId(builder, idOffset)
            addDataMode(builder, dataMode)
            return endISRCollection_Full(builder)
        }
        fun startISRCollection_Full(builder: FlatBufferBuilder) = builder.startTable(34)
        fun addId(builder: FlatBufferBuilder, id: Int) = builder.addOffset(0, id, 0)
        fun addClassificationMarking(builder: FlatBufferBuilder, classificationMarking: Int) = builder.addOffset(1, classificationMarking, 0)
        fun addIdexVersion(builder: FlatBufferBuilder, idexVersion: Int) = builder.addInt(2, idexVersion, 0)
        fun addName(builder: FlatBufferBuilder, name: Int) = builder.addOffset(3, name, 0)
        fun addMissionId(builder: FlatBufferBuilder, missionId: Int) = builder.addOffset(4, missionId, 0)
        fun addMissionAOR(builder: FlatBufferBuilder, missionAor: Int) = builder.addOffset(5, missionAor, 0)
        fun addMissionPrimaryIntelDiscipline(builder: FlatBufferBuilder, missionPrimaryIntelDiscipline: Int) = builder.addOffset(6, missionPrimaryIntelDiscipline, 0)
        fun addMissionPrimarySubCategory(builder: FlatBufferBuilder, missionPrimarySubCategory: Int) = builder.addOffset(7, missionPrimarySubCategory, 0)
        fun addMissionSecondaryIntelDiscipline(builder: FlatBufferBuilder, missionSecondaryIntelDiscipline: Int) = builder.addOffset(8, missionSecondaryIntelDiscipline, 0)
        fun addMissionSecondarySubCategory(builder: FlatBufferBuilder, missionSecondarySubCategory: Int) = builder.addOffset(9, missionSecondarySubCategory, 0)
        fun addMissionRole(builder: FlatBufferBuilder, missionRole: Int) = builder.addOffset(10, missionRole, 0)
        fun addMissionOperation(builder: FlatBufferBuilder, missionOperation: Int) = builder.addOffset(11, missionOperation, 0)
        fun addMissionPriority(builder: FlatBufferBuilder, missionPriority: Int) = builder.addInt(12, missionPriority, 0)
        fun addMissionSupportedUnit(builder: FlatBufferBuilder, missionSupportedUnit: Int) = builder.addOffset(13, missionSupportedUnit, 0)
        fun addMissionEmphasis(builder: FlatBufferBuilder, missionEmphasis: Int) = builder.addOffset(14, missionEmphasis, 0)
        fun addMissionStartPointLat(builder: FlatBufferBuilder, missionStartPointLat: Double) = builder.addDouble(15, missionStartPointLat, 0.0)
        fun addMissionStartPointLong(builder: FlatBufferBuilder, missionStartPointLong: Double) = builder.addDouble(16, missionStartPointLong, 0.0)
        fun addMissionCollectionArea(builder: FlatBufferBuilder, missionCollectionArea: Int) = builder.addOffset(17, missionCollectionArea, 0)
        fun addMissionJoa(builder: FlatBufferBuilder, missionJoa: Int) = builder.addOffset(18, missionJoa, 0)
        fun addMissionSyncMatrixBin(builder: FlatBufferBuilder, missionSyncMatrixBin: Int) = builder.addOffset(19, missionSyncMatrixBin, 0)
        fun addMissionCountry(builder: FlatBufferBuilder, missionCountry: Int) = builder.addOffset(20, missionCountry, 0)
        fun addMissionRegion(builder: FlatBufferBuilder, missionRegion: Int) = builder.addOffset(21, missionRegion, 0)
        fun addMissionSubRegion(builder: FlatBufferBuilder, missionSubRegion: Int) = builder.addOffset(22, missionSubRegion, 0)
        fun addCollectionRequirements(builder: FlatBufferBuilder, collectionRequirements: Int) = builder.addOffset(23, collectionRequirements, 0)
        fun createCollectionRequirementsVector(builder: FlatBufferBuilder, data: IntArray) : Int {
            builder.startVector(4, data.size, 4)
            for (i in data.size - 1 downTo 0) {
                builder.addOffset(data[i])
            }
            return builder.endVector()
        }
        fun startCollectionRequirementsVector(builder: FlatBufferBuilder, numElems: Int) = builder.startVector(4, numElems, 4)
        fun addTransit(builder: FlatBufferBuilder, transit: Int) = builder.addOffset(24, transit, 0)
        fun createTransitVector(builder: FlatBufferBuilder, data: IntArray) : Int {
            builder.startVector(4, data.size, 4)
            for (i in data.size - 1 downTo 0) {
                builder.addOffset(data[i])
            }
            return builder.endVector()
        }
        fun startTransitVector(builder: FlatBufferBuilder, numElems: Int) = builder.startVector(4, numElems, 4)
        fun addTaskings(builder: FlatBufferBuilder, taskings: Int) = builder.addOffset(25, taskings, 0)
        fun createTaskingsVector(builder: FlatBufferBuilder, data: IntArray) : Int {
            builder.startVector(4, data.size, 4)
            for (i in data.size - 1 downTo 0) {
                builder.addOffset(data[i])
            }
            return builder.endVector()
        }
        fun startTaskingsVector(builder: FlatBufferBuilder, numElems: Int) = builder.startVector(4, numElems, 4)
        fun addCreatedAt(builder: FlatBufferBuilder, createdAt: Int) = builder.addOffset(26, createdAt, 0)
        fun addCreatedBy(builder: FlatBufferBuilder, createdBy: Int) = builder.addOffset(27, createdBy, 0)
        fun addUpdatedAt(builder: FlatBufferBuilder, updatedAt: Int) = builder.addOffset(28, updatedAt, 0)
        fun addUpdatedBy(builder: FlatBufferBuilder, updatedBy: Int) = builder.addOffset(29, updatedBy, 0)
        fun addSource(builder: FlatBufferBuilder, source: Int) = builder.addOffset(30, source, 0)
        fun addOrigin(builder: FlatBufferBuilder, origin: Int) = builder.addOffset(31, origin, 0)
        fun addDataMode(builder: FlatBufferBuilder, dataMode: Byte) = builder.addByte(32, dataMode, 0)
        fun addOrigNetwork(builder: FlatBufferBuilder, origNetwork: Int) = builder.addOffset(33, origNetwork, 0)
        fun endISRCollection_Full(builder: FlatBufferBuilder) : Int {
            val o = builder.endTable()
            return o
        }
        fun finishISRCollectionFullBuffer(builder: FlatBufferBuilder, offset: Int) = builder.finish(offset, "ISRC")
        fun finishSizePrefixedISRCollection_FullBuffer(builder: FlatBufferBuilder, offset: Int) = builder.finishSizePrefixed(offset, "ISRC")
    }
}
