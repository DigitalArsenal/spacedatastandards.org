// automatically generated by the FlatBuffers compiler, do not modify

import com.google.flatbuffers.BaseVector
import com.google.flatbuffers.BooleanVector
import com.google.flatbuffers.ByteVector
import com.google.flatbuffers.Constants
import com.google.flatbuffers.DoubleVector
import com.google.flatbuffers.FlatBufferBuilder
import com.google.flatbuffers.FloatVector
import com.google.flatbuffers.LongVector
import com.google.flatbuffers.StringVector
import com.google.flatbuffers.Struct
import com.google.flatbuffers.Table
import com.google.flatbuffers.UnionVector
import java.nio.ByteBuffer
import java.nio.ByteOrder
import kotlin.math.sign

/**
 * /// Status for a particular Entity. An entity may have multiple status records collected by various sources.
 */
@Suppress("unused")
class Status : Table() {

    fun __init(_i: Int, _bb: ByteBuffer)  {
        __reset(_i, _bb)
    }
    fun __assign(_i: Int, _bb: ByteBuffer) : Status {
        __init(_i, _bb)
        return this
    }
    /**
     * Unique identifier of the record, auto-generated by the system.
     * Example: /// Example: STATUS-ID
     * Constraints: Minimum length = 1, Maximum length = 36
     */
    val id : String?
        get() {
            val o = __offset(4)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val idAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(4, 1)
    fun idInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 4, 1)
    /**
     * Classification marking of the data in IC/CAPCO Portion-marked format.
     * Example: /// Example: U
     * Constraints: Minimum length = 1, Maximum length = 128
     */
    val classificationMarking : String?
        get() {
            val o = __offset(6)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val classificationMarkingAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(6, 1)
    fun classificationMarkingInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 6, 1)
    /**
     * The sources or SCG references from which the classification of this data is derived.
     * Example: /// Example: SOME_SOURCE
     * Constraints: Minimum length = 0, Maximum length = 128
     */
    val derivedFrom : String?
        get() {
            val o = __offset(8)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val derivedFromAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(8, 1)
    fun derivedFromInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 8, 1)
    /**
     * The declassification date of this data, in ISO 8601 UTC format.
     * Example: /// Example: 2021-01-01T01:02:02.123Z
     * Constraints: No constraints specified.
     */
    val declassificationDate : String?
        get() {
            val o = __offset(10)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val declassificationDateAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(10, 1)
    fun declassificationDateInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 10, 1)
    /**
     * Declassification string of this data.
     * Example: /// Example: U
     * Constraints: Minimum length = 0, Maximum length = 256
     */
    val declassificationString : String?
        get() {
            val o = __offset(12)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val declassificationStringAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(12, 1)
    fun declassificationStringInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 12, 1)
    /**
     * Unique identifier of the parent entity.
     * Example: /// Example: ENTITY-ID
     * Constraints: Minimum length = 1, Maximum length = 36
     */
    val idEntity : String?
        get() {
            val o = __offset(14)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val idEntityAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(14, 1)
    fun idEntityInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 14, 1)
    /**
     * Overall state of the entity, if applicable (e.g. UNKNOWN, DEAD, ACTIVE, RF ACTIVE, STANDBY).
     * Example: /// Example: ACTIVE
     * Constraints: Minimum length = 0, Maximum length = 16
     */
    val state : Byte
        get() {
            val o = __offset(16)
            return if(o != 0) bb.get(o + bb_pos) else 0
        }
    /**
     * System capability of the entity, if applicable (e.g. FMC, NMC, PMC, UNK).
     * Example: /// Example: FMC
     * Constraints: Minimum length = 0, Maximum length = 3
     */
    val sysCap : Byte
        get() {
            val o = __offset(18)
            return if(o != 0) bb.get(o + bb_pos) else 0
        }
    /**
     * Operation capability of the entity, if applicable (e.g. FMC, NMC, PMC, UNK).
     * Example: /// Example: FMC
     * Constraints: Minimum length = 0, Maximum length = 3
     */
    val opsCap : Byte
        get() {
            val o = __offset(20)
            return if(o != 0) bb.get(o + bb_pos) else 0
        }
    /**
     * Source of the data.
     * Example: /// Example: Bluestaq
     * Constraints: Minimum length = 1, Maximum length = 64
     */
    val source : String?
        get() {
            val o = __offset(22)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val sourceAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(22, 1)
    fun sourceInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 22, 1)
    /**
     * No description provided.
     * Example: /// Example: No example provided.
     * Constraints: No constraints specified.
     */
    fun subStatusCollection(j: Int) : String? {
        val o = __offset(24)
        return if (o != 0) {
            __string(__vector(o) + j * 4)
        } else {
            null
        }
    }
    val subStatusCollectionLength : Int
        get() {
            val o = __offset(24); return if (o != 0) __vector_len(o) else 0
        }
    /**
     * Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
     * EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
     * REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
     * SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
     * TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
     * Example: /// Example: TEST
     * Constraints: Minimum length = 1, Maximum length = 32
     */
    val dataMode : Byte
        get() {
            val o = __offset(26)
            return if(o != 0) bb.get(o + bb_pos) else 0
        }
    /**
     * Comments describing the status creation and or updates to an entity.
     * Example: /// Example: Example Notes
     * Constraints: No constraints specified.
     */
    val notes : String?
        get() {
            val o = __offset(28)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val notesAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(28, 1)
    fun notesInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 28, 1)
    /**
     * Time the row was created in the database, auto-populated by the system.
     * Example: /// Example: 2018-01-01T16:00:00.123Z
     * Constraints: No constraints specified.
     */
    val createdAt : String?
        get() {
            val o = __offset(30)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val createdAtAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(30, 1)
    fun createdAtInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 30, 1)
    /**
     * Application user who created the row in the database, auto-populated by the system.
     * Example: /// Example: some.user
     * Constraints: Minimum length = 1, Maximum length = 64
     */
    val createdBy : String?
        get() {
            val o = __offset(32)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val createdByAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(32, 1)
    fun createdByInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 32, 1)
    /**
     * Time the row was last updated in the database, auto-populated by the system.
     * Example: /// Example: 2018-01-01T16:00:00.123Z
     * Constraints: No constraints specified.
     */
    val updatedAt : String?
        get() {
            val o = __offset(34)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val updatedAtAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(34, 1)
    fun updatedAtInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 34, 1)
    /**
     * Application user who updated the row in the database, auto-populated by the system.
     * Example: /// Example: some.user
     * Constraints: Minimum length = 0, Maximum length = 64
     */
    val updatedBy : String?
        get() {
            val o = __offset(36)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val updatedByAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(36, 1)
    fun updatedByInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 36, 1)
    /**
     * Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
     * Example: /// Example: THIRD_PARTY_DATASOURCE
     * Constraints: Minimum length = 0, Maximum length = 64
     */
    val origin : String?
        get() {
            val o = __offset(38)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val originAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(38, 1)
    fun originInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 38, 1)
    /**
     * The originating source network on which this record was created, auto-populated by the system.
     * Example: /// Example: TST1
     * Constraints: Minimum length = 1, Maximum length = 32
     */
    val origNetwork : String?
        get() {
            val o = __offset(40)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val origNetworkAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(40, 1)
    fun origNetworkInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 40, 1)
    companion object {
        fun validateVersion() = Constants.FLATBUFFERS_24_3_25()
        fun getRootAsStatus(_bb: ByteBuffer): Status = getRootAsStatus(_bb, Status())
        fun getRootAsStatus(_bb: ByteBuffer, obj: Status): Status {
            _bb.order(ByteOrder.LITTLE_ENDIAN)
            return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb))
        }
        fun StatusBufferHasIdentifier(_bb: ByteBuffer) : Boolean = __has_identifier(_bb, "STAT")
        fun createStatus(builder: FlatBufferBuilder, idOffset: Int, classificationMarkingOffset: Int, derivedFromOffset: Int, declassificationDateOffset: Int, declassificationStringOffset: Int, idEntityOffset: Int, state: Byte, sysCap: Byte, opsCap: Byte, sourceOffset: Int, subStatusCollectionOffset: Int, dataMode: Byte, notesOffset: Int, createdAtOffset: Int, createdByOffset: Int, updatedAtOffset: Int, updatedByOffset: Int, originOffset: Int, origNetworkOffset: Int) : Int {
            builder.startTable(19)
            addOrigNetwork(builder, origNetworkOffset)
            addOrigin(builder, originOffset)
            addUpdatedBy(builder, updatedByOffset)
            addUpdatedAt(builder, updatedAtOffset)
            addCreatedBy(builder, createdByOffset)
            addCreatedAt(builder, createdAtOffset)
            addNotes(builder, notesOffset)
            addSubStatusCollection(builder, subStatusCollectionOffset)
            addSource(builder, sourceOffset)
            addIdEntity(builder, idEntityOffset)
            addDeclassificationString(builder, declassificationStringOffset)
            addDeclassificationDate(builder, declassificationDateOffset)
            addDerivedFrom(builder, derivedFromOffset)
            addClassificationMarking(builder, classificationMarkingOffset)
            addId(builder, idOffset)
            addDataMode(builder, dataMode)
            addOpsCap(builder, opsCap)
            addSysCap(builder, sysCap)
            addState(builder, state)
            return endStatus(builder)
        }
        fun startStatus(builder: FlatBufferBuilder) = builder.startTable(19)
        fun addId(builder: FlatBufferBuilder, id: Int) = builder.addOffset(0, id, 0)
        fun addClassificationMarking(builder: FlatBufferBuilder, classificationMarking: Int) = builder.addOffset(1, classificationMarking, 0)
        fun addDerivedFrom(builder: FlatBufferBuilder, derivedFrom: Int) = builder.addOffset(2, derivedFrom, 0)
        fun addDeclassificationDate(builder: FlatBufferBuilder, declassificationDate: Int) = builder.addOffset(3, declassificationDate, 0)
        fun addDeclassificationString(builder: FlatBufferBuilder, declassificationString: Int) = builder.addOffset(4, declassificationString, 0)
        fun addIdEntity(builder: FlatBufferBuilder, idEntity: Int) = builder.addOffset(5, idEntity, 0)
        fun addState(builder: FlatBufferBuilder, state: Byte) = builder.addByte(6, state, 0)
        fun addSysCap(builder: FlatBufferBuilder, sysCap: Byte) = builder.addByte(7, sysCap, 0)
        fun addOpsCap(builder: FlatBufferBuilder, opsCap: Byte) = builder.addByte(8, opsCap, 0)
        fun addSource(builder: FlatBufferBuilder, source: Int) = builder.addOffset(9, source, 0)
        fun addSubStatusCollection(builder: FlatBufferBuilder, subStatusCollection: Int) = builder.addOffset(10, subStatusCollection, 0)
        fun createSubStatusCollectionVector(builder: FlatBufferBuilder, data: IntArray) : Int {
            builder.startVector(4, data.size, 4)
            for (i in data.size - 1 downTo 0) {
                builder.addOffset(data[i])
            }
            return builder.endVector()
        }
        fun startSubStatusCollectionVector(builder: FlatBufferBuilder, numElems: Int) = builder.startVector(4, numElems, 4)
        fun addDataMode(builder: FlatBufferBuilder, dataMode: Byte) = builder.addByte(11, dataMode, 0)
        fun addNotes(builder: FlatBufferBuilder, notes: Int) = builder.addOffset(12, notes, 0)
        fun addCreatedAt(builder: FlatBufferBuilder, createdAt: Int) = builder.addOffset(13, createdAt, 0)
        fun addCreatedBy(builder: FlatBufferBuilder, createdBy: Int) = builder.addOffset(14, createdBy, 0)
        fun addUpdatedAt(builder: FlatBufferBuilder, updatedAt: Int) = builder.addOffset(15, updatedAt, 0)
        fun addUpdatedBy(builder: FlatBufferBuilder, updatedBy: Int) = builder.addOffset(16, updatedBy, 0)
        fun addOrigin(builder: FlatBufferBuilder, origin: Int) = builder.addOffset(17, origin, 0)
        fun addOrigNetwork(builder: FlatBufferBuilder, origNetwork: Int) = builder.addOffset(18, origNetwork, 0)
        fun endStatus(builder: FlatBufferBuilder) : Int {
            val o = builder.endTable()
            return o
        }
        fun finishStatusBuffer(builder: FlatBufferBuilder, offset: Int) = builder.finish(offset, "STAT")
        fun finishSizePrefixedStatusBuffer(builder: FlatBufferBuilder, offset: Int) = builder.finishSizePrefixed(offset, "STAT")
    }
}
