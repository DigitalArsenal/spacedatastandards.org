// automatically generated by the FlatBuffers compiler, do not modify

import com.google.flatbuffers.BaseVector
import com.google.flatbuffers.BooleanVector
import com.google.flatbuffers.ByteVector
import com.google.flatbuffers.Constants
import com.google.flatbuffers.DoubleVector
import com.google.flatbuffers.FlatBufferBuilder
import com.google.flatbuffers.FloatVector
import com.google.flatbuffers.LongVector
import com.google.flatbuffers.StringVector
import com.google.flatbuffers.Struct
import com.google.flatbuffers.Table
import com.google.flatbuffers.UnionVector
import java.nio.ByteBuffer
import java.nio.ByteOrder
import kotlin.math.sign

/**
 * /// Collection of contact and identification information for designated multilink coordinator duty assignments. There can be 0 to many DataLinkMultiDuty collections within the datalink service.
 */
@Suppress("unused")
class DataLinkMultiDuty_Ingest : Table() {

    fun __init(_i: Int, _bb: ByteBuffer)  {
        __reset(_i, _bb)
    }
    fun __assign(_i: Int, _bb: ByteBuffer) : DataLinkMultiDuty_Ingest {
        __init(_i, _bb)
        return this
    }
    /**
     * Designated force of unit specified by ship name, unit call sign, or unit designator.
     * Example: /// Example: SHIP:STENNIS
     * Constraints: Minimum length = 0, Maximum length = 38
     */
    val unitDes : String?
        get() {
            val o = __offset(4)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val unitDesAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(4, 1)
    fun unitDesInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 4, 1)
    /**
     * The name of the person to be contacted for multilink coordination.
     * Example: /// Example: POPOVICH
     * Constraints: Minimum length = 0, Maximum length = 20
     */
    val name : String?
        get() {
            val o = __offset(6)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val nameAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(6, 1)
    fun nameInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 6, 1)
    /**
     * The rank or position of the person to be contacted for multilink coordination.
     * Example: /// Example: LCDR
     * Constraints: Minimum length = 0, Maximum length = 16
     */
    val rank : String?
        get() {
            val o = __offset(8)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val rankAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(8, 1)
    fun rankInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 8, 1)
    /**
     * Specific duties assigned for multilink coordination (e.g. ICO, RICO, SICO).
     * Example: /// Example: SICO
     * Constraints: Minimum length = 0, Maximum length = 4
     */
    val duty : String?
        get() {
            val o = __offset(10)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val dutyAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(10, 1)
    fun dutyInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 10, 1)
    /**
     * Array of telephone numbers or the frequency values for radio transmission of the person to be contacted for multilink coordination.
     * Example: /// Example: ['TEL:804-555-4142', 'TEL:804-867-5309']
     * Constraints: No constraints specified.
     */
    fun dutyTeleFreqNums(j: Int) : String? {
        val o = __offset(12)
        return if (o != 0) {
            __string(__vector(o) + j * 4)
        } else {
            null
        }
    }
    val dutyTeleFreqNumsLength : Int
        get() {
            val o = __offset(12); return if (o != 0) __vector_len(o) else 0
        }
    /**
     * Collection of information regarding the function, frequency, and priority of interface control and coordination nets for multilink coordination. There can be 0 to many DataLinkMultiVoiceCoord collections within a DataLinkMultiDuty collection.
     * Example: /// Example: No example provided.
     * Constraints: No constraints specified.
     */
    fun multiDutyVoiceCoord(j: Int) : String? {
        val o = __offset(14)
        return if (o != 0) {
            __string(__vector(o) + j * 4)
        } else {
            null
        }
    }
    val multiDutyVoiceCoordLength : Int
        get() {
            val o = __offset(14); return if (o != 0) __vector_len(o) else 0
        }
    companion object {
        fun validateVersion() = Constants.FLATBUFFERS_24_3_25()
        fun getRootAsDataLinkMultiDuty_Ingest(_bb: ByteBuffer): DataLinkMultiDuty_Ingest = getRootAsDataLinkMultiDuty_Ingest(_bb, DataLinkMultiDuty_Ingest())
        fun getRootAsDataLinkMultiDuty_Ingest(_bb: ByteBuffer, obj: DataLinkMultiDuty_Ingest): DataLinkMultiDuty_Ingest {
            _bb.order(ByteOrder.LITTLE_ENDIAN)
            return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb))
        }
        fun DataLinkMultiDuty_IngestBufferHasIdentifier(_bb: ByteBuffer) : Boolean = __has_identifier(_bb, "DATA")
        fun createDataLinkMultiDuty_Ingest(builder: FlatBufferBuilder, unitDesOffset: Int, nameOffset: Int, rankOffset: Int, dutyOffset: Int, dutyTeleFreqNumsOffset: Int, multiDutyVoiceCoordOffset: Int) : Int {
            builder.startTable(6)
            addMultiDutyVoiceCoord(builder, multiDutyVoiceCoordOffset)
            addDutyTeleFreqNums(builder, dutyTeleFreqNumsOffset)
            addDuty(builder, dutyOffset)
            addRank(builder, rankOffset)
            addName(builder, nameOffset)
            addUnitDes(builder, unitDesOffset)
            return endDataLinkMultiDuty_Ingest(builder)
        }
        fun startDataLinkMultiDuty_Ingest(builder: FlatBufferBuilder) = builder.startTable(6)
        fun addUnitDes(builder: FlatBufferBuilder, unitDes: Int) = builder.addOffset(0, unitDes, 0)
        fun addName(builder: FlatBufferBuilder, name: Int) = builder.addOffset(1, name, 0)
        fun addRank(builder: FlatBufferBuilder, rank: Int) = builder.addOffset(2, rank, 0)
        fun addDuty(builder: FlatBufferBuilder, duty: Int) = builder.addOffset(3, duty, 0)
        fun addDutyTeleFreqNums(builder: FlatBufferBuilder, dutyTeleFreqNums: Int) = builder.addOffset(4, dutyTeleFreqNums, 0)
        fun createDutyTeleFreqNumsVector(builder: FlatBufferBuilder, data: IntArray) : Int {
            builder.startVector(4, data.size, 4)
            for (i in data.size - 1 downTo 0) {
                builder.addOffset(data[i])
            }
            return builder.endVector()
        }
        fun startDutyTeleFreqNumsVector(builder: FlatBufferBuilder, numElems: Int) = builder.startVector(4, numElems, 4)
        fun addMultiDutyVoiceCoord(builder: FlatBufferBuilder, multiDutyVoiceCoord: Int) = builder.addOffset(5, multiDutyVoiceCoord, 0)
        fun createMultiDutyVoiceCoordVector(builder: FlatBufferBuilder, data: IntArray) : Int {
            builder.startVector(4, data.size, 4)
            for (i in data.size - 1 downTo 0) {
                builder.addOffset(data[i])
            }
            return builder.endVector()
        }
        fun startMultiDutyVoiceCoordVector(builder: FlatBufferBuilder, numElems: Int) = builder.startVector(4, numElems, 4)
        fun endDataLinkMultiDuty_Ingest(builder: FlatBufferBuilder) : Int {
            val o = builder.endTable()
            return o
        }
        fun finishDataLinkMultiDutyIngestBuffer(builder: FlatBufferBuilder, offset: Int) = builder.finish(offset, "DATA")
        fun finishSizePrefixedDataLinkMultiDuty_IngestBuffer(builder: FlatBufferBuilder, offset: Int) = builder.finishSizePrefixed(offset, "DATA")
    }
}
