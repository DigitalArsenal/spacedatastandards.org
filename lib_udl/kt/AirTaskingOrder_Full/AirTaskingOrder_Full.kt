// automatically generated by the FlatBuffers compiler, do not modify

import com.google.flatbuffers.BaseVector
import com.google.flatbuffers.BooleanVector
import com.google.flatbuffers.ByteVector
import com.google.flatbuffers.Constants
import com.google.flatbuffers.DoubleVector
import com.google.flatbuffers.FlatBufferBuilder
import com.google.flatbuffers.FloatVector
import com.google.flatbuffers.LongVector
import com.google.flatbuffers.StringVector
import com.google.flatbuffers.Struct
import com.google.flatbuffers.Table
import com.google.flatbuffers.UnionVector
import java.nio.ByteBuffer
import java.nio.ByteOrder
import kotlin.math.sign

/**
 * /// Beta Version Air Tasking Order: The ATO is used to task air missions, assign cross force tasking as well as intraservice tasking.
 */
@Suppress("unused")
class AirTaskingOrder_Full : Table() {

    fun __init(_i: Int, _bb: ByteBuffer)  {
        __reset(_i, _bb)
    }
    fun __assign(_i: Int, _bb: ByteBuffer) : AirTaskingOrder_Full {
        __init(_i, _bb)
        return this
    }
    /**
     * Unique identifier of the record, auto-generated by the system.
     * Example: /// Example: POI-ID
     * Constraints: Minimum length = 1, Maximum length = 36
     */
    val id : String?
        get() {
            val o = __offset(4)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val idAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(4, 1)
    fun idInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 4, 1)
    /**
     * Classification marking of the data in IC/CAPCO Portion-marked format.
     * Example: /// Example: U
     * Constraints: Minimum length = 1, Maximum length = 128
     */
    val classificationMarking : String?
        get() {
            val o = __offset(6)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val classificationMarkingAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(6, 1)
    fun classificationMarkingInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 6, 1)
    /**
     * Optional URI location in the document repository of the raw file parsed by the system to produce this record. To download the raw file, prepend https://udl-hostname/scs/download?id= to this value.
     * Example: /// Example: Example URI
     * Constraints: Minimum length = 0, Maximum length = 256
     */
    val rawFileUri : String?
        get() {
            val o = __offset(8)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val rawFileUriAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(8, 1)
    fun rawFileUriInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 8, 1)
    /**
     * Specifies the unique operation or exercise name, nickname, or codeword assigned to a joint exercise or operation plan.
     * Example: /// Example: DESERT WIND
     * Constraints: Minimum length = 1, Maximum length = 64
     */
    val opExerName : String?
        get() {
            val o = __offset(10)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val opExerNameAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(10, 1)
    fun opExerNameInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 10, 1)
    /**
     * The identifier of the originator of the message.
     * Example: /// Example: USCENTCOM
     * Constraints: Minimum length = 0, Maximum length = 36
     */
    val msgOriginator : String?
        get() {
            val o = __offset(12)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val msgOriginatorAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(12, 1)
    fun msgOriginatorInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 12, 1)
    /**
     * The unique message identifier sequentially assigned by the originator.
     * Example: /// Example: ATO A
     * Constraints: Minimum length = 0, Maximum length = 16
     */
    val msgSn : String?
        get() {
            val o = __offset(14)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val msgSnAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(14, 1)
    fun msgSnInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 14, 1)
    /**
     * The month in which the message originated.
     * Example: /// Example: OCT
     * Constraints: Minimum length = 0, Maximum length = 16
     */
    val msgMonth : String?
        get() {
            val o = __offset(16)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val msgMonthAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(16, 1)
    fun msgMonthInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 16, 1)
    /**
     * The qualifier which caveats the message status.
     * Example: /// Example: CHG
     * Constraints: Minimum length = 0, Maximum length = 8
     */
    val msgQualifier : String?
        get() {
            val o = __offset(18)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val msgQualifierAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(18, 1)
    fun msgQualifierInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 18, 1)
    /**
     * The indicator specifying an affirmative or a negatice condition for this message.
     * Example: /// Example: YES
     * Constraints: Minimum length = 0, Maximum length = 8
     */
    val ackReqInd : String?
        get() {
            val o = __offset(20)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val ackReqIndAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(20, 1)
    fun ackReqIndInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 20, 1)
    /**
     * Specifies textual data amplifying the data contained in the acknowledgement requirement indicator (ackRedInd) field or the unit required to acknowledge.
     * Example: /// Example: INST:45TS
     * Constraints: Minimum length = 0, Maximum length = 36
     */
    val ackUnitInstructions : String?
        get() {
            val o = __offset(22)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val ackUnitInstructionsAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(22, 1)
    fun ackUnitInstructionsInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 22, 1)
    /**
     * The effective begin time for this ATO in ISO 8601 UTC format with millisecond precision.
     * Example: /// Example: 2023-10-25T12:00:00.123Z
     * Constraints: No constraints specified.
     */
    val beginTs : String?
        get() {
            val o = __offset(24)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val beginTsAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(24, 1)
    fun beginTsInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 24, 1)
    /**
     * The effective end time for this ATO in ISO 8601 UTC format with millisecond precision.
     * Example: /// Example: 2023-10-27T12:00:00.123Z
     * Constraints: No constraints specified.
     */
    val endTs : String?
        get() {
            val o = __offset(26)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val endTsAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(26, 1)
    fun endTsInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 26, 1)
    /**
     * A collection that details special instructions, important information, guidance, and amplifying information regarding this ATO.
     * Example: /// Example: No example provided.
     * Constraints: No constraints specified.
     */
    fun genText(j: Int) : String? {
        val o = __offset(28)
        return if (o != 0) {
            __string(__vector(o) + j * 4)
        } else {
            null
        }
    }
    val genTextLength : Int
        get() {
            val o = __offset(28); return if (o != 0) __vector_len(o) else 0
        }
    /**
     * A collection that specifies the tasked country, tasked service, unit and mission level tasking for this ATO.
     * Example: /// Example: No example provided.
     * Constraints: No constraints specified.
     */
    fun acMsnTasking(j: Int) : String? {
        val o = __offset(30)
        return if (o != 0) {
            __string(__vector(o) + j * 4)
        } else {
            null
        }
    }
    val acMsnTaskingLength : Int
        get() {
            val o = __offset(30); return if (o != 0) __vector_len(o) else 0
        }
    /**
     * A collection that specifies the naval flight operations for this ATO.
     * Example: /// Example: No example provided.
     * Constraints: No constraints specified.
     */
    fun navalFltOps(j: Int) : String? {
        val o = __offset(32)
        return if (o != 0) {
            __string(__vector(o) + j * 4)
        } else {
            null
        }
    }
    val navalFltOpsLength : Int
        get() {
            val o = __offset(32); return if (o != 0) __vector_len(o) else 0
        }
    /**
     * Time the row was created in the database.
     * Example: /// Example: 2018-01-01T16:00:00.123Z
     * Constraints: No constraints specified.
     */
    val createdAt : String?
        get() {
            val o = __offset(34)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val createdAtAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(34, 1)
    fun createdAtInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 34, 1)
    /**
     * Application user who created the row in the database.
     * Example: /// Example: some.user
     * Constraints: Minimum length = 1, Maximum length = 64
     */
    val createdBy : String?
        get() {
            val o = __offset(36)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val createdByAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(36, 1)
    fun createdByInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 36, 1)
    /**
     * Source of the data.
     * Example: /// Example: Bluestaq
     * Constraints: Minimum length = 1, Maximum length = 36
     */
    val source : String?
        get() {
            val o = __offset(38)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val sourceAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(38, 1)
    fun sourceInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 38, 1)
    /**
     * The source data library from which this record was received. This could be a remote or tactical UDL or another data library. If null, the record should be assumed to have originated from the primary Enterprise UDL.
     * Example: /// Example: AXE
     * Constraints: Minimum length = 0, Maximum length = 64
     */
    val sourceDl : String?
        get() {
            val o = __offset(40)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val sourceDlAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(40, 1)
    fun sourceDlInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 40, 1)
    /**
     * Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
     * Example: /// Example: THIRD_PARTY_DATASOURCE
     * Constraints: Minimum length = 0, Maximum length = 64
     */
    val origin : String?
        get() {
            val o = __offset(42)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val originAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(42, 1)
    fun originInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 42, 1)
    /**
     * The originating source network on which this record was created, auto-populated by the system.
     * Example: /// Example: ORIG
     * Constraints: Minimum length = 0, Maximum length = 32
     */
    val origNetwork : String?
        get() {
            val o = __offset(44)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val origNetworkAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(44, 1)
    fun origNetworkInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 44, 1)
    /**
     * Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
     * EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
     * REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
     * SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
     * TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
     * Example: /// Example: TEST
     * Constraints: Minimum length = 1, Maximum length = 32
     */
    val dataMode : Byte
        get() {
            val o = __offset(46)
            return if(o != 0) bb.get(o + bb_pos) else 0
        }
    companion object {
        fun validateVersion() = Constants.FLATBUFFERS_24_3_25()
        fun getRootAsAirTaskingOrder_Full(_bb: ByteBuffer): AirTaskingOrder_Full = getRootAsAirTaskingOrder_Full(_bb, AirTaskingOrder_Full())
        fun getRootAsAirTaskingOrder_Full(_bb: ByteBuffer, obj: AirTaskingOrder_Full): AirTaskingOrder_Full {
            _bb.order(ByteOrder.LITTLE_ENDIAN)
            return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb))
        }
        fun AirTaskingOrder_FullBufferHasIdentifier(_bb: ByteBuffer) : Boolean = __has_identifier(_bb, "AIRT")
        fun createAirTaskingOrder_Full(builder: FlatBufferBuilder, idOffset: Int, classificationMarkingOffset: Int, rawFileUriOffset: Int, opExerNameOffset: Int, msgOriginatorOffset: Int, msgSnOffset: Int, msgMonthOffset: Int, msgQualifierOffset: Int, ackReqIndOffset: Int, ackUnitInstructionsOffset: Int, beginTsOffset: Int, endTsOffset: Int, genTextOffset: Int, acMsnTaskingOffset: Int, navalFltOpsOffset: Int, createdAtOffset: Int, createdByOffset: Int, sourceOffset: Int, sourceDlOffset: Int, originOffset: Int, origNetworkOffset: Int, dataMode: Byte) : Int {
            builder.startTable(22)
            addOrigNetwork(builder, origNetworkOffset)
            addOrigin(builder, originOffset)
            addSourceDL(builder, sourceDlOffset)
            addSource(builder, sourceOffset)
            addCreatedBy(builder, createdByOffset)
            addCreatedAt(builder, createdAtOffset)
            addNavalFltOps(builder, navalFltOpsOffset)
            addAcMsnTasking(builder, acMsnTaskingOffset)
            addGenText(builder, genTextOffset)
            addEndTs(builder, endTsOffset)
            addBeginTs(builder, beginTsOffset)
            addAckUnitInstructions(builder, ackUnitInstructionsOffset)
            addAckReqInd(builder, ackReqIndOffset)
            addMsgQualifier(builder, msgQualifierOffset)
            addMsgMonth(builder, msgMonthOffset)
            addMsgSN(builder, msgSnOffset)
            addMsgOriginator(builder, msgOriginatorOffset)
            addOpExerName(builder, opExerNameOffset)
            addRawFileURI(builder, rawFileUriOffset)
            addClassificationMarking(builder, classificationMarkingOffset)
            addId(builder, idOffset)
            addDataMode(builder, dataMode)
            return endAirTaskingOrder_Full(builder)
        }
        fun startAirTaskingOrder_Full(builder: FlatBufferBuilder) = builder.startTable(22)
        fun addId(builder: FlatBufferBuilder, id: Int) = builder.addOffset(0, id, 0)
        fun addClassificationMarking(builder: FlatBufferBuilder, classificationMarking: Int) = builder.addOffset(1, classificationMarking, 0)
        fun addRawFileURI(builder: FlatBufferBuilder, rawFileUri: Int) = builder.addOffset(2, rawFileUri, 0)
        fun addOpExerName(builder: FlatBufferBuilder, opExerName: Int) = builder.addOffset(3, opExerName, 0)
        fun addMsgOriginator(builder: FlatBufferBuilder, msgOriginator: Int) = builder.addOffset(4, msgOriginator, 0)
        fun addMsgSN(builder: FlatBufferBuilder, msgSn: Int) = builder.addOffset(5, msgSn, 0)
        fun addMsgMonth(builder: FlatBufferBuilder, msgMonth: Int) = builder.addOffset(6, msgMonth, 0)
        fun addMsgQualifier(builder: FlatBufferBuilder, msgQualifier: Int) = builder.addOffset(7, msgQualifier, 0)
        fun addAckReqInd(builder: FlatBufferBuilder, ackReqInd: Int) = builder.addOffset(8, ackReqInd, 0)
        fun addAckUnitInstructions(builder: FlatBufferBuilder, ackUnitInstructions: Int) = builder.addOffset(9, ackUnitInstructions, 0)
        fun addBeginTs(builder: FlatBufferBuilder, beginTs: Int) = builder.addOffset(10, beginTs, 0)
        fun addEndTs(builder: FlatBufferBuilder, endTs: Int) = builder.addOffset(11, endTs, 0)
        fun addGenText(builder: FlatBufferBuilder, genText: Int) = builder.addOffset(12, genText, 0)
        fun createGenTextVector(builder: FlatBufferBuilder, data: IntArray) : Int {
            builder.startVector(4, data.size, 4)
            for (i in data.size - 1 downTo 0) {
                builder.addOffset(data[i])
            }
            return builder.endVector()
        }
        fun startGenTextVector(builder: FlatBufferBuilder, numElems: Int) = builder.startVector(4, numElems, 4)
        fun addAcMsnTasking(builder: FlatBufferBuilder, acMsnTasking: Int) = builder.addOffset(13, acMsnTasking, 0)
        fun createAcMsnTaskingVector(builder: FlatBufferBuilder, data: IntArray) : Int {
            builder.startVector(4, data.size, 4)
            for (i in data.size - 1 downTo 0) {
                builder.addOffset(data[i])
            }
            return builder.endVector()
        }
        fun startAcMsnTaskingVector(builder: FlatBufferBuilder, numElems: Int) = builder.startVector(4, numElems, 4)
        fun addNavalFltOps(builder: FlatBufferBuilder, navalFltOps: Int) = builder.addOffset(14, navalFltOps, 0)
        fun createNavalFltOpsVector(builder: FlatBufferBuilder, data: IntArray) : Int {
            builder.startVector(4, data.size, 4)
            for (i in data.size - 1 downTo 0) {
                builder.addOffset(data[i])
            }
            return builder.endVector()
        }
        fun startNavalFltOpsVector(builder: FlatBufferBuilder, numElems: Int) = builder.startVector(4, numElems, 4)
        fun addCreatedAt(builder: FlatBufferBuilder, createdAt: Int) = builder.addOffset(15, createdAt, 0)
        fun addCreatedBy(builder: FlatBufferBuilder, createdBy: Int) = builder.addOffset(16, createdBy, 0)
        fun addSource(builder: FlatBufferBuilder, source: Int) = builder.addOffset(17, source, 0)
        fun addSourceDL(builder: FlatBufferBuilder, sourceDl: Int) = builder.addOffset(18, sourceDl, 0)
        fun addOrigin(builder: FlatBufferBuilder, origin: Int) = builder.addOffset(19, origin, 0)
        fun addOrigNetwork(builder: FlatBufferBuilder, origNetwork: Int) = builder.addOffset(20, origNetwork, 0)
        fun addDataMode(builder: FlatBufferBuilder, dataMode: Byte) = builder.addByte(21, dataMode, 0)
        fun endAirTaskingOrder_Full(builder: FlatBufferBuilder) : Int {
            val o = builder.endTable()
            return o
        }
        fun finishAirTaskingOrderFullBuffer(builder: FlatBufferBuilder, offset: Int) = builder.finish(offset, "AIRT")
        fun finishSizePrefixedAirTaskingOrder_FullBuffer(builder: FlatBufferBuilder, offset: Int) = builder.finishSizePrefixed(offset, "AIRT")
    }
}
