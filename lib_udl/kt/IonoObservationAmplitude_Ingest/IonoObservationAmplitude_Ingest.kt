// automatically generated by the FlatBuffers compiler, do not modify

import com.google.flatbuffers.BaseVector
import com.google.flatbuffers.BooleanVector
import com.google.flatbuffers.ByteVector
import com.google.flatbuffers.Constants
import com.google.flatbuffers.DoubleVector
import com.google.flatbuffers.FlatBufferBuilder
import com.google.flatbuffers.FloatVector
import com.google.flatbuffers.LongVector
import com.google.flatbuffers.StringVector
import com.google.flatbuffers.Struct
import com.google.flatbuffers.Table
import com.google.flatbuffers.UnionVector
import java.nio.ByteBuffer
import java.nio.ByteOrder
import kotlin.math.sign

/**
 * /// Multi-dimensional array with the same dimensions as power plus one additional dimension antenna_element. This variable is enabled for post-process polarization or antenna array determination. Can be combined with phase to create a phasors and subsequently enable post-processing of polarization and/or antenna array determination.
 */
@Suppress("unused")
class IonoObservationAmplitude_Ingest : Table() {

    fun __init(_i: Int, _bb: ByteBuffer)  {
        __reset(_i, _bb)
    }
    fun __assign(_i: Int, _bb: ByteBuffer) : IonoObservationAmplitude_Ingest {
        __init(_i, _bb)
        return this
    }
    /**
     * Notes for the amplitude data.
     * Example: /// Example: NOTES
     * Constraints: Minimum length = 0, Maximum length = 512
     */
    val notes : String?
        get() {
            val o = __offset(4)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val notesAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(4, 1)
    fun notesInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 4, 1)
    /**
     * Array of integers for amplitude dimensions.
     * Example: /// Example: [4, 5]
     * Constraints: No constraints specified.
     */
    fun dimensions(j: Int) : String? {
        val o = __offset(6)
        return if (o != 0) {
            __string(__vector(o) + j * 4)
        } else {
            null
        }
    }
    val dimensionsLength : Int
        get() {
            val o = __offset(6); return if (o != 0) __vector_len(o) else 0
        }
    /**
     * Array of names for dimensions.
     * Example: /// Example: ['NAME1', 'NAME2']
     * Constraints: No constraints specified.
     */
    fun dimensionName(j: Int) : String? {
        val o = __offset(8)
        return if (o != 0) {
            __string(__vector(o) + j * 4)
        } else {
            null
        }
    }
    val dimensionNameLength : Int
        get() {
            val o = __offset(8); return if (o != 0) __vector_len(o) else 0
        }
    /**
     * Array of amplitude data.
     * Example: /// Example: [[[[[[[0.02, 0.034]]]]]]]
     * Constraints: No constraints specified.
     */
    fun data(j: Int) : String? {
        val o = __offset(10)
        return if (o != 0) {
            __string(__vector(o) + j * 4)
        } else {
            null
        }
    }
    val dataLength : Int
        get() {
            val o = __offset(10); return if (o != 0) __vector_len(o) else 0
        }
    companion object {
        fun validateVersion() = Constants.FLATBUFFERS_24_3_25()
        fun getRootAsIonoObservationAmplitude_Ingest(_bb: ByteBuffer): IonoObservationAmplitude_Ingest = getRootAsIonoObservationAmplitude_Ingest(_bb, IonoObservationAmplitude_Ingest())
        fun getRootAsIonoObservationAmplitude_Ingest(_bb: ByteBuffer, obj: IonoObservationAmplitude_Ingest): IonoObservationAmplitude_Ingest {
            _bb.order(ByteOrder.LITTLE_ENDIAN)
            return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb))
        }
        fun IonoObservationAmplitude_IngestBufferHasIdentifier(_bb: ByteBuffer) : Boolean = __has_identifier(_bb, "IONO")
        fun createIonoObservationAmplitude_Ingest(builder: FlatBufferBuilder, notesOffset: Int, dimensionsOffset: Int, dimensionNameOffset: Int, dataOffset: Int) : Int {
            builder.startTable(4)
            addData(builder, dataOffset)
            addDimensionName(builder, dimensionNameOffset)
            addDimensions(builder, dimensionsOffset)
            addNotes(builder, notesOffset)
            return endIonoObservationAmplitude_Ingest(builder)
        }
        fun startIonoObservationAmplitude_Ingest(builder: FlatBufferBuilder) = builder.startTable(4)
        fun addNotes(builder: FlatBufferBuilder, notes: Int) = builder.addOffset(0, notes, 0)
        fun addDimensions(builder: FlatBufferBuilder, dimensions: Int) = builder.addOffset(1, dimensions, 0)
        fun createDimensionsVector(builder: FlatBufferBuilder, data: IntArray) : Int {
            builder.startVector(4, data.size, 4)
            for (i in data.size - 1 downTo 0) {
                builder.addOffset(data[i])
            }
            return builder.endVector()
        }
        fun startDimensionsVector(builder: FlatBufferBuilder, numElems: Int) = builder.startVector(4, numElems, 4)
        fun addDimensionName(builder: FlatBufferBuilder, dimensionName: Int) = builder.addOffset(2, dimensionName, 0)
        fun createDimensionNameVector(builder: FlatBufferBuilder, data: IntArray) : Int {
            builder.startVector(4, data.size, 4)
            for (i in data.size - 1 downTo 0) {
                builder.addOffset(data[i])
            }
            return builder.endVector()
        }
        fun startDimensionNameVector(builder: FlatBufferBuilder, numElems: Int) = builder.startVector(4, numElems, 4)
        fun addData(builder: FlatBufferBuilder, data: Int) = builder.addOffset(3, data, 0)
        fun createDataVector(builder: FlatBufferBuilder, data: IntArray) : Int {
            builder.startVector(4, data.size, 4)
            for (i in data.size - 1 downTo 0) {
                builder.addOffset(data[i])
            }
            return builder.endVector()
        }
        fun startDataVector(builder: FlatBufferBuilder, numElems: Int) = builder.startVector(4, numElems, 4)
        fun endIonoObservationAmplitude_Ingest(builder: FlatBufferBuilder) : Int {
            val o = builder.endTable()
            return o
        }
        fun finishIonoObservationAmplitudeIngestBuffer(builder: FlatBufferBuilder, offset: Int) = builder.finish(offset, "IONO")
        fun finishSizePrefixedIonoObservationAmplitude_IngestBuffer(builder: FlatBufferBuilder, offset: Int) = builder.finishSizePrefixed(offset, "IONO")
    }
}
