// automatically generated by the FlatBuffers compiler, do not modify

import com.google.flatbuffers.BaseVector
import com.google.flatbuffers.BooleanVector
import com.google.flatbuffers.ByteVector
import com.google.flatbuffers.Constants
import com.google.flatbuffers.DoubleVector
import com.google.flatbuffers.FlatBufferBuilder
import com.google.flatbuffers.FloatVector
import com.google.flatbuffers.LongVector
import com.google.flatbuffers.StringVector
import com.google.flatbuffers.Struct
import com.google.flatbuffers.Table
import com.google.flatbuffers.UnionVector
import java.nio.ByteBuffer
import java.nio.ByteOrder
import kotlin.math.sign

/**
 * /// Collection of aircraft mission location information for this aircraft mission tasking.
 */
@Suppress("unused")
class AircraftMissionLocationTasking_Full : Table() {

    fun __init(_i: Int, _bb: ByteBuffer)  {
        __reset(_i, _bb)
    }
    fun __assign(_i: Int, _bb: ByteBuffer) : AircraftMissionLocationTasking_Full {
        __init(_i, _bb)
        return this
    }
    /**
     * The start time of this mission in ISO 8601 UTC format with millisecond precision.
     * Example: /// Example: 2021-10-25T12:00:00.123Z
     * Constraints: No constraints specified.
     */
    val startTime : String?
        get() {
            val o = __offset(4)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val startTimeAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(4, 1)
    fun startTimeInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 4, 1)
    /**
     * The end time of this mission in ISO 8601 UTC format with millisecond precision.
     * Example: /// Example: 2021-10-25T12:00:00.123Z
     * Constraints: No constraints specified.
     */
    val endTime : String?
        get() {
            val o = __offset(6)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val endTimeAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(6, 1)
    fun endTimeInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 6, 1)
    /**
     * The name that identifies the location at which this mission is to be performed. This can be the name of a general target area, orbit, cap point, station, etc.
     * Example: /// Example: KLSV
     * Constraints: Minimum length = 0, Maximum length = 24
     */
    val msnLocName : String?
        get() {
            val o = __offset(8)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val msnLocNameAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(8, 1)
    fun msnLocNameInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 8, 1)
    /**
     * The altitude for this mission represented as hundreds of feet above MSL.
     * Example: /// Example: 210
     * Constraints: No constraints specified.
     */
    val alt : Int
        get() {
            val o = __offset(10)
            return if(o != 0) bb.getInt(o + bb_pos) else 0
        }
    /**
     * The code for the priority assigned to this mission.
     * Example: /// Example: 1A
     * Constraints: Minimum length = 0, Maximum length = 8
     */
    val airMsnPri : String?
        get() {
            val o = __offset(12)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val airMsnPriAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(12, 1)
    fun airMsnPriInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 12, 1)
    /**
     * The radius of the circle around the location being reported in feet.
     * Example: /// Example: 1000
     * Constraints: No constraints specified.
     */
    val areaGeoRad : Int
        get() {
            val o = __offset(14)
            return if(o != 0) bb.getInt(o + bb_pos) else 0
        }
    /**
     * The location name for this mission.
     * Example: /// Example: PT ALFA
     * Constraints: Minimum length = 0, Maximum length = 36
     */
    val msnLocPtName : String?
        get() {
            val o = __offset(16)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val msnLocPtNameAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(16, 1)
    fun msnLocPtNameInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 16, 1)
    /**
     * WGS-84 latitude of the mission location, in degrees. -90 to 90 degrees (negative values south of equator) for this tasked air mission.
     * Example: /// Example: 35.123
     * Constraints: No constraints specified.
     */
    val msnLocPtLat : Double
        get() {
            val o = __offset(18)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * WGS-84 longitude of the mission location, in degrees. -180 to 180 degrees (negative values west of Prime Meridian) for this tasked air mission.
     * Example: /// Example: 79.01
     * Constraints: No constraints specified.
     */
    val msnLocPtLon : Double
        get() {
            val o = __offset(20)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * The alpha-numeric specified location for this mission specified as a bearing angle in degrees relative to true north and a range in nautical miles (NM).
     * Example: /// Example: 330T-PT ALFA-50NM
     * Constraints: Minimum length = 0, Maximum length = 36
     */
    val msnLocPtBarT : String?
        get() {
            val o = __offset(22)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val msnLocPtBarTAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(22, 1)
    fun msnLocPtBarTInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 22, 1)
    companion object {
        fun validateVersion() = Constants.FLATBUFFERS_24_3_25()
        fun getRootAsAircraftMissionLocationTasking_Full(_bb: ByteBuffer): AircraftMissionLocationTasking_Full = getRootAsAircraftMissionLocationTasking_Full(_bb, AircraftMissionLocationTasking_Full())
        fun getRootAsAircraftMissionLocationTasking_Full(_bb: ByteBuffer, obj: AircraftMissionLocationTasking_Full): AircraftMissionLocationTasking_Full {
            _bb.order(ByteOrder.LITTLE_ENDIAN)
            return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb))
        }
        fun AircraftMissionLocationTasking_FullBufferHasIdentifier(_bb: ByteBuffer) : Boolean = __has_identifier(_bb, "AIRC")
        fun createAircraftMissionLocationTasking_Full(builder: FlatBufferBuilder, startTimeOffset: Int, endTimeOffset: Int, msnLocNameOffset: Int, alt: Int, airMsnPriOffset: Int, areaGeoRad: Int, msnLocPtNameOffset: Int, msnLocPtLat: Double, msnLocPtLon: Double, msnLocPtBarTOffset: Int) : Int {
            builder.startTable(10)
            addMsnLocPtLon(builder, msnLocPtLon)
            addMsnLocPtLat(builder, msnLocPtLat)
            addMsnLocPtBarT(builder, msnLocPtBarTOffset)
            addMsnLocPtName(builder, msnLocPtNameOffset)
            addAreaGeoRad(builder, areaGeoRad)
            addAirMsnPri(builder, airMsnPriOffset)
            addAlt(builder, alt)
            addMsnLocName(builder, msnLocNameOffset)
            addEndTime(builder, endTimeOffset)
            addStartTime(builder, startTimeOffset)
            return endAircraftMissionLocationTasking_Full(builder)
        }
        fun startAircraftMissionLocationTasking_Full(builder: FlatBufferBuilder) = builder.startTable(10)
        fun addStartTime(builder: FlatBufferBuilder, startTime: Int) = builder.addOffset(0, startTime, 0)
        fun addEndTime(builder: FlatBufferBuilder, endTime: Int) = builder.addOffset(1, endTime, 0)
        fun addMsnLocName(builder: FlatBufferBuilder, msnLocName: Int) = builder.addOffset(2, msnLocName, 0)
        fun addAlt(builder: FlatBufferBuilder, alt: Int) = builder.addInt(3, alt, 0)
        fun addAirMsnPri(builder: FlatBufferBuilder, airMsnPri: Int) = builder.addOffset(4, airMsnPri, 0)
        fun addAreaGeoRad(builder: FlatBufferBuilder, areaGeoRad: Int) = builder.addInt(5, areaGeoRad, 0)
        fun addMsnLocPtName(builder: FlatBufferBuilder, msnLocPtName: Int) = builder.addOffset(6, msnLocPtName, 0)
        fun addMsnLocPtLat(builder: FlatBufferBuilder, msnLocPtLat: Double) = builder.addDouble(7, msnLocPtLat, 0.0)
        fun addMsnLocPtLon(builder: FlatBufferBuilder, msnLocPtLon: Double) = builder.addDouble(8, msnLocPtLon, 0.0)
        fun addMsnLocPtBarT(builder: FlatBufferBuilder, msnLocPtBarT: Int) = builder.addOffset(9, msnLocPtBarT, 0)
        fun endAircraftMissionLocationTasking_Full(builder: FlatBufferBuilder) : Int {
            val o = builder.endTable()
            return o
        }
        fun finishAircraftMissionLocationTaskingFullBuffer(builder: FlatBufferBuilder, offset: Int) = builder.finish(offset, "AIRC")
        fun finishSizePrefixedAircraftMissionLocationTasking_FullBuffer(builder: FlatBufferBuilder, offset: Int) = builder.finishSizePrefixed(offset, "AIRC")
    }
}
