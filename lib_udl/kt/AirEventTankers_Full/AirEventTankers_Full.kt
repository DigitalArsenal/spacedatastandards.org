// automatically generated by the FlatBuffers compiler, do not modify

import com.google.flatbuffers.BaseVector
import com.google.flatbuffers.BooleanVector
import com.google.flatbuffers.ByteVector
import com.google.flatbuffers.Constants
import com.google.flatbuffers.DoubleVector
import com.google.flatbuffers.FlatBufferBuilder
import com.google.flatbuffers.FloatVector
import com.google.flatbuffers.LongVector
import com.google.flatbuffers.StringVector
import com.google.flatbuffers.Struct
import com.google.flatbuffers.Table
import com.google.flatbuffers.UnionVector
import java.nio.ByteBuffer
import java.nio.ByteOrder
import kotlin.math.sign

/**
 * /// Collection of tanker aircraft associated with this Air Event.
 */
@Suppress("unused")
class AirEventTankers_Full : Table() {

    fun __init(_i: Int, _bb: ByteBuffer)  {
        __reset(_i, _bb)
    }
    fun __assign(_i: Int, _bb: ByteBuffer) : AirEventTankers_Full {
        __init(_i, _bb)
        return this
    }
    /**
     * The UDL ID of the aircraft sortie this tanker is associated with for this event.
     * Example: /// Example: d833a4bc-756b-41d5-8845-f146fe563387
     * Constraints: Minimum length = 0, Maximum length = 36
     */
    val idTankerSortie : String?
        get() {
            val o = __offset(4)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val idTankerSortieAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(4, 1)
    fun idTankerSortieInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 4, 1)
    /**
     * The UDL ID of the mission this tanker is associated with for this event.
     * Example: /// Example: edef700c-9917-4dbf-a153-89ffd4446fe9
     * Constraints: Minimum length = 0, Maximum length = 36
     */
    val idTankerMission : String?
        get() {
            val o = __offset(6)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val idTankerMissionAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(6, 1)
    fun idTankerMissionInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 6, 1)
    /**
     * The UDL ID of the airfield this tanker is associated with for this event.
     * Example: /// Example: b33955d2-67d3-42be-8316-263e284ce6cc
     * Constraints: Minimum length = 0, Maximum length = 36
     */
    val idTankerAirfield : String?
        get() {
            val o = __offset(8)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val idTankerAirfieldAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(8, 1)
    fun idTankerAirfieldInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 8, 1)
    /**
     * Optional tanker identifier from external systems. This field has no meaning within UDL and is provided as a convenience for systems that require tracking of an internal system generated ID.
     * Example: /// Example: ca673c580fb949a5b733f0e0b67ffab2
     * Constraints: Minimum length = 0, Maximum length = 36
     */
    val externalTankerId : String?
        get() {
            val o = __offset(10)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val externalTankerIdAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(10, 1)
    fun externalTankerIdInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 10, 1)
    /**
     * Coordination record identifier of this tanker.
     * Example: /// Example: TTC601
     * Constraints: Minimum length = 0, Maximum length = 6
     */
    val tankerCoord : String?
        get() {
            val o = __offset(12)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val tankerCoordAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(12, 1)
    fun tankerCoordInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 12, 1)
    /**
     * The Model Design Series designation of this tanker.
     * Example: /// Example: KC135R
     * Constraints: Minimum length = 0, Maximum length = 128
     */
    val tankerMds : String?
        get() {
            val o = __offset(14)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val tankerMdsAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(14, 1)
    fun tankerMdsInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 14, 1)
    /**
     * The Air Mobility Command (AMC) mission identifier of this tanker.
     * Example: /// Example: 8PH000B1S052
     * Constraints: Minimum length = 0, Maximum length = 36
     */
    val amcTankerMissionId : String?
        get() {
            val o = __offset(16)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val amcTankerMissionIdAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(16, 1)
    fun amcTankerMissionIdInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 16, 1)
    /**
     * Alternate mission identifier of this tanker provided by source.
     * Example: /// Example: 1UN05201L121
     * Constraints: Minimum length = 0, Maximum length = 32
     */
    val altTankerMissionId : String?
        get() {
            val o = __offset(18)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val altTankerMissionIdAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(18, 1)
    fun altTankerMissionIdInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 18, 1)
    /**
     * The call sign assigned to this tanker.
     * Example: /// Example: BAKER
     * Constraints: Minimum length = 0, Maximum length = 24
     */
    val tankerCallSign : String?
        get() {
            val o = __offset(20)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val tankerCallSignAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(20, 1)
    fun tankerCallSignInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 20, 1)
    /**
     * The wing or unit that owns this tanker.
     * Example: /// Example: 117ARW
     * Constraints: Minimum length = 0, Maximum length = 256
     */
    val tankerOwner : String?
        get() {
            val o = __offset(22)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val tankerOwnerAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(22, 1)
    fun tankerOwnerInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 22, 1)
    /**
     * The name and/or number of the point of contact for this tanker.
     * Example: /// Example: JOHN SMITH (555)555-5555
     * Constraints: Minimum length = 0, Maximum length = 68
     */
    val tankerPoc : String?
        get() {
            val o = __offset(24)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val tankerPocAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(24, 1)
    fun tankerPocInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 24, 1)
    /**
     * Identifies the itinerary point of a mission that this tanker is linked to.
     * Example: /// Example: 825
     * Constraints: No constraints specified.
     */
    val tankerLegNum : Int
        get() {
            val o = __offset(26)
            return if(o != 0) bb.getInt(o + bb_pos) else 0
        }
    /**
     * Location the tanker has been deployed to in preparation for an air refueling event.
     * Example: /// Example: KOFF
     * Constraints: Minimum length = 0, Maximum length = 4
     */
    val tankerDeployedIcao : String?
        get() {
            val o = __offset(28)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val tankerDeployedIcaoAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(28, 1)
    fun tankerDeployedIcaoInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 28, 1)
    /**
     * Type of fuel delivery method used by the tanker during an air refueling event (BOOM, DROGUE, BOTH).
     * Example: /// Example: DROGUE
     * Constraints: Minimum length = 0, Maximum length = 6
     */
    val tankerDeliveryMethod : String?
        get() {
            val o = __offset(30)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val tankerDeliveryMethodAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(30, 1)
    fun tankerDeliveryMethodInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 30, 1)
    /**
     * Total weight of the fuel transferred from this tanker during an air refueling event, in pounds.
     * Example: /// Example: 15000000.1
     * Constraints: No constraints specified.
     */
    val fuelOff : Double
        get() {
            val o = __offset(32)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Position of this tanker within a group of tankers in an air refueling event.
     * Example: /// Example: 2
     * Constraints: No constraints specified.
     */
    val tankerCellPosition : Int
        get() {
            val o = __offset(34)
            return if(o != 0) bb.getInt(o + bb_pos) else 0
        }
    /**
     * Type of fuel being transferred from the tanker in an air refueling event.
     * Example: /// Example: JP8
     * Constraints: Minimum length = 0, Maximum length = 3
     */
    val tankerFuelType : String?
        get() {
            val o = __offset(36)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val tankerFuelTypeAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(36, 1)
    fun tankerFuelTypeInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 36, 1)
    /**
     * Flag indicating that this tanker is flying a dual role mission in an air refueling event.
     * Example: /// Example: True
     * Constraints: No constraints specified.
     */
    val dualRole : Boolean
        get() {
            val o = __offset(38)
            return if(o != 0) 0.toByte() != bb.get(o + bb_pos) else false
        }
    companion object {
        fun validateVersion() = Constants.FLATBUFFERS_24_3_25()
        fun getRootAsAirEventTankers_Full(_bb: ByteBuffer): AirEventTankers_Full = getRootAsAirEventTankers_Full(_bb, AirEventTankers_Full())
        fun getRootAsAirEventTankers_Full(_bb: ByteBuffer, obj: AirEventTankers_Full): AirEventTankers_Full {
            _bb.order(ByteOrder.LITTLE_ENDIAN)
            return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb))
        }
        fun AirEventTankers_FullBufferHasIdentifier(_bb: ByteBuffer) : Boolean = __has_identifier(_bb, "AIRE")
        fun createAirEventTankers_Full(builder: FlatBufferBuilder, idTankerSortieOffset: Int, idTankerMissionOffset: Int, idTankerAirfieldOffset: Int, externalTankerIdOffset: Int, tankerCoordOffset: Int, tankerMdsOffset: Int, amcTankerMissionIdOffset: Int, altTankerMissionIdOffset: Int, tankerCallSignOffset: Int, tankerOwnerOffset: Int, tankerPocOffset: Int, tankerLegNum: Int, tankerDeployedIcaoOffset: Int, tankerDeliveryMethodOffset: Int, fuelOff: Double, tankerCellPosition: Int, tankerFuelTypeOffset: Int, dualRole: Boolean) : Int {
            builder.startTable(18)
            addFuelOff(builder, fuelOff)
            addTankerFuelType(builder, tankerFuelTypeOffset)
            addTankerCellPosition(builder, tankerCellPosition)
            addTankerDeliveryMethod(builder, tankerDeliveryMethodOffset)
            addTankerDeployedICAO(builder, tankerDeployedIcaoOffset)
            addTankerLegNum(builder, tankerLegNum)
            addTankerPOC(builder, tankerPocOffset)
            addTankerOwner(builder, tankerOwnerOffset)
            addTankerCallSign(builder, tankerCallSignOffset)
            addAltTankerMissionId(builder, altTankerMissionIdOffset)
            addAmcTankerMissionId(builder, amcTankerMissionIdOffset)
            addTankerMDS(builder, tankerMdsOffset)
            addTankerCoord(builder, tankerCoordOffset)
            addExternalTankerId(builder, externalTankerIdOffset)
            addIdTankerAirfield(builder, idTankerAirfieldOffset)
            addIdTankerMission(builder, idTankerMissionOffset)
            addIdTankerSortie(builder, idTankerSortieOffset)
            addDualRole(builder, dualRole)
            return endAirEventTankers_Full(builder)
        }
        fun startAirEventTankers_Full(builder: FlatBufferBuilder) = builder.startTable(18)
        fun addIdTankerSortie(builder: FlatBufferBuilder, idTankerSortie: Int) = builder.addOffset(0, idTankerSortie, 0)
        fun addIdTankerMission(builder: FlatBufferBuilder, idTankerMission: Int) = builder.addOffset(1, idTankerMission, 0)
        fun addIdTankerAirfield(builder: FlatBufferBuilder, idTankerAirfield: Int) = builder.addOffset(2, idTankerAirfield, 0)
        fun addExternalTankerId(builder: FlatBufferBuilder, externalTankerId: Int) = builder.addOffset(3, externalTankerId, 0)
        fun addTankerCoord(builder: FlatBufferBuilder, tankerCoord: Int) = builder.addOffset(4, tankerCoord, 0)
        fun addTankerMDS(builder: FlatBufferBuilder, tankerMds: Int) = builder.addOffset(5, tankerMds, 0)
        fun addAmcTankerMissionId(builder: FlatBufferBuilder, amcTankerMissionId: Int) = builder.addOffset(6, amcTankerMissionId, 0)
        fun addAltTankerMissionId(builder: FlatBufferBuilder, altTankerMissionId: Int) = builder.addOffset(7, altTankerMissionId, 0)
        fun addTankerCallSign(builder: FlatBufferBuilder, tankerCallSign: Int) = builder.addOffset(8, tankerCallSign, 0)
        fun addTankerOwner(builder: FlatBufferBuilder, tankerOwner: Int) = builder.addOffset(9, tankerOwner, 0)
        fun addTankerPOC(builder: FlatBufferBuilder, tankerPoc: Int) = builder.addOffset(10, tankerPoc, 0)
        fun addTankerLegNum(builder: FlatBufferBuilder, tankerLegNum: Int) = builder.addInt(11, tankerLegNum, 0)
        fun addTankerDeployedICAO(builder: FlatBufferBuilder, tankerDeployedIcao: Int) = builder.addOffset(12, tankerDeployedIcao, 0)
        fun addTankerDeliveryMethod(builder: FlatBufferBuilder, tankerDeliveryMethod: Int) = builder.addOffset(13, tankerDeliveryMethod, 0)
        fun addFuelOff(builder: FlatBufferBuilder, fuelOff: Double) = builder.addDouble(14, fuelOff, 0.0)
        fun addTankerCellPosition(builder: FlatBufferBuilder, tankerCellPosition: Int) = builder.addInt(15, tankerCellPosition, 0)
        fun addTankerFuelType(builder: FlatBufferBuilder, tankerFuelType: Int) = builder.addOffset(16, tankerFuelType, 0)
        fun addDualRole(builder: FlatBufferBuilder, dualRole: Boolean) = builder.addBoolean(17, dualRole, false)
        fun endAirEventTankers_Full(builder: FlatBufferBuilder) : Int {
            val o = builder.endTable()
            return o
        }
        fun finishAirEventTankersFullBuffer(builder: FlatBufferBuilder, offset: Int) = builder.finish(offset, "AIRE")
        fun finishSizePrefixedAirEventTankers_FullBuffer(builder: FlatBufferBuilder, offset: Int) = builder.finishSizePrefixed(offset, "AIRE")
    }
}
