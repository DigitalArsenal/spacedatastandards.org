// automatically generated by the FlatBuffers compiler, do not modify

import com.google.flatbuffers.BaseVector
import com.google.flatbuffers.BooleanVector
import com.google.flatbuffers.ByteVector
import com.google.flatbuffers.Constants
import com.google.flatbuffers.DoubleVector
import com.google.flatbuffers.FlatBufferBuilder
import com.google.flatbuffers.FloatVector
import com.google.flatbuffers.LongVector
import com.google.flatbuffers.StringVector
import com.google.flatbuffers.Struct
import com.google.flatbuffers.Table
import com.google.flatbuffers.UnionVector
import java.nio.ByteBuffer
import java.nio.ByteOrder
import kotlin.math.sign

/**
 * /// Coefficients to describe the E, F1, and F2 layers as parabolic-shape segments.
 */
@Suppress("unused")
class IonoObservationDensityProfileParabolic_Abridged : Table() {

    fun __init(_i: Int, _bb: ByteBuffer)  {
        __reset(_i, _bb)
    }
    fun __assign(_i: Int, _bb: ByteBuffer) : IonoObservationDensityProfileParabolic_Abridged {
        __init(_i, _bb)
        return this
    }
    /**
     * General description of the QP computation algorithm.
     * Example: /// Example: Best-fit algorithm in NHPC software.
     * Constraints: No constraints specified.
     */
    val description : String?
        get() {
            val o = __offset(4)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val descriptionAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(4, 1)
    fun descriptionInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 4, 1)
    /**
     * Describes the E, F1, and F2 layers as parabolic-shape segments.
     * Example: /// Example: No example provided.
     * Constraints: No constraints specified.
     */
    fun parabolicItems(j: Int) : String? {
        val o = __offset(6)
        return if (o != 0) {
            __string(__vector(o) + j * 4)
        } else {
            null
        }
    }
    val parabolicItemsLength : Int
        get() {
            val o = __offset(6); return if (o != 0) __vector_len(o) else 0
        }
    companion object {
        fun validateVersion() = Constants.FLATBUFFERS_24_3_25()
        fun getRootAsIonoObservationDensityProfileParabolic_Abridged(_bb: ByteBuffer): IonoObservationDensityProfileParabolic_Abridged = getRootAsIonoObservationDensityProfileParabolic_Abridged(_bb, IonoObservationDensityProfileParabolic_Abridged())
        fun getRootAsIonoObservationDensityProfileParabolic_Abridged(_bb: ByteBuffer, obj: IonoObservationDensityProfileParabolic_Abridged): IonoObservationDensityProfileParabolic_Abridged {
            _bb.order(ByteOrder.LITTLE_ENDIAN)
            return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb))
        }
        fun IonoObservationDensityProfileParabolic_AbridgedBufferHasIdentifier(_bb: ByteBuffer) : Boolean = __has_identifier(_bb, "IONO")
        fun createIonoObservationDensityProfileParabolic_Abridged(builder: FlatBufferBuilder, descriptionOffset: Int, parabolicItemsOffset: Int) : Int {
            builder.startTable(2)
            addParabolicItems(builder, parabolicItemsOffset)
            addDescription(builder, descriptionOffset)
            return endIonoObservationDensityProfileParabolic_Abridged(builder)
        }
        fun startIonoObservationDensityProfileParabolic_Abridged(builder: FlatBufferBuilder) = builder.startTable(2)
        fun addDescription(builder: FlatBufferBuilder, description: Int) = builder.addOffset(0, description, 0)
        fun addParabolicItems(builder: FlatBufferBuilder, parabolicItems: Int) = builder.addOffset(1, parabolicItems, 0)
        fun createParabolicItemsVector(builder: FlatBufferBuilder, data: IntArray) : Int {
            builder.startVector(4, data.size, 4)
            for (i in data.size - 1 downTo 0) {
                builder.addOffset(data[i])
            }
            return builder.endVector()
        }
        fun startParabolicItemsVector(builder: FlatBufferBuilder, numElems: Int) = builder.startVector(4, numElems, 4)
        fun endIonoObservationDensityProfileParabolic_Abridged(builder: FlatBufferBuilder) : Int {
            val o = builder.endTable()
            return o
        }
        fun finishIonoObservationDensityProfileParabolicAbridgedBuffer(builder: FlatBufferBuilder, offset: Int) = builder.finish(offset, "IONO")
        fun finishSizePrefixedIonoObservationDensityProfileParabolic_AbridgedBuffer(builder: FlatBufferBuilder, offset: Int) = builder.finishSizePrefixed(offset, "IONO")
    }
}
