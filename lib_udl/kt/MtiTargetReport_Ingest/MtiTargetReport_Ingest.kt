// automatically generated by the FlatBuffers compiler, do not modify

import com.google.flatbuffers.BaseVector
import com.google.flatbuffers.BooleanVector
import com.google.flatbuffers.ByteVector
import com.google.flatbuffers.Constants
import com.google.flatbuffers.DoubleVector
import com.google.flatbuffers.FlatBufferBuilder
import com.google.flatbuffers.FloatVector
import com.google.flatbuffers.LongVector
import com.google.flatbuffers.StringVector
import com.google.flatbuffers.Struct
import com.google.flatbuffers.Table
import com.google.flatbuffers.UnionVector
import java.nio.ByteBuffer
import java.nio.ByteOrder
import kotlin.math.sign

/**
 * /// A grouping of zero or more target reports for which the sensor provides a single time, sensor position, reference position on the ground with simple estimates for the observed area at the reported time, and other pertinent data.
 */
@Suppress("unused")
class MtiTargetReport_Ingest : Table() {

    fun __init(_i: Int, _bb: ByteBuffer)  {
        __reset(_i, _bb)
    }
    fun __assign(_i: Int, _bb: ByteBuffer) : MtiTargetReport_Ingest {
        __init(_i, _bb)
        return this
    }
    /**
     * Sequential count of this MTI report within the dwell.
     * Example: /// Example: 2
     * Constraints: No constraints specified.
     */
    val d321 : Int
        get() {
            val o = __offset(4)
            return if(o != 0) bb.getInt(o + bb_pos) else 0
        }
    /**
     * The North-South position of the reported detection, expressed as degrees North (positive) or South (negative) of the Equator.
     * Example: /// Example: 20.23
     * Constraints: No constraints specified.
     */
    val d322 : Double
        get() {
            val o = __offset(6)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * The East-West position of the reported detection, expressed as degrees East (positive) from the Prime Meridian.
     * Example: /// Example: 20.23
     * Constraints: No constraints specified.
     */
    val d323 : Double
        get() {
            val o = __offset(8)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * The North-South position of the reported detection, expressed as degrees North (positive) or South (negative) from the Dwell Area Center Latitude.
     * Example: /// Example: 2
     * Constraints: No constraints specified.
     */
    val d324 : Int
        get() {
            val o = __offset(10)
            return if(o != 0) bb.getInt(o + bb_pos) else 0
        }
    /**
     * The East-West position of the reported detection, expressed as degrees East (positive, 0 to 180) or West (negative, 0 to -180) of the Prime Meridian from the Dwell Area Center Longitude.
     * Example: /// Example: 2
     * Constraints: No constraints specified.
     */
    val d325 : Int
        get() {
            val o = __offset(12)
            return if(o != 0) bb.getInt(o + bb_pos) else 0
        }
    /**
     * Height of the reported detection, referenced to its position above the WGS 84 ellipsoid, in meters.
     * Example: /// Example: 2
     * Constraints: No constraints specified.
     */
    val d326 : Int
        get() {
            val o = __offset(14)
            return if(o != 0) bb.getInt(o + bb_pos) else 0
        }
    /**
     * The component of velocity for the reported detection, expressed in centimeters per second, corrected for platform motion, along the line of sight between the sensor and the reported detection, where the positive direction is away from the sensor.
     * Example: /// Example: 2
     * Constraints: No constraints specified.
     */
    val d327 : Int
        get() {
            val o = __offset(16)
            return if(o != 0) bb.getInt(o + bb_pos) else 0
        }
    /**
     * The target wrap velocity permits trackers to un-wrap velocities for targets with line-of-sight components large enough to exceed the first velocity period.  Expressed in centimeters/sec.
     * Example: /// Example: 2
     * Constraints: No constraints specified.
     */
    val d328 : Int
        get() {
            val o = __offset(18)
            return if(o != 0) bb.getInt(o + bb_pos) else 0
        }
    /**
     * Estimated signal-to-noise ratio (SNR) of the target return, in decibels.
     * Example: /// Example: 17
     * Constraints: No constraints specified.
     */
    val d329 : Int
        get() {
            val o = __offset(20)
            return if(o != 0) bb.getInt(o + bb_pos) else 0
        }
    /**
     * The classification of the target (i.e. vehicle, aircraft, â€¦).
     * Example: /// Example: vehicle
     * Constraints: Minimum length = 0, Maximum length = 32
     */
    val d3210 : String?
        get() {
            val o = __offset(22)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val d3210AsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(22, 1)
    fun d3210InByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 22, 1)
    /**
     * Estimated probability that the target classification field is correctly classified.
     * Example: /// Example: 90
     * Constraints: No constraints specified.
     */
    val d3211 : Int
        get() {
            val o = __offset(24)
            return if(o != 0) bb.getInt(o + bb_pos) else 0
        }
    /**
     * Standard deviation of the estimated slant range of the reported detection, in centimeters.
     * Example: /// Example: 2
     * Constraints: No constraints specified.
     */
    val d3212 : Int
        get() {
            val o = __offset(26)
            return if(o != 0) bb.getInt(o + bb_pos) else 0
        }
    /**
     * Standard deviation of the position estimate, in the cross-range direction, of the reported detection, in decimeters.
     * Example: /// Example: 2
     * Constraints: No constraints specified.
     */
    val d3213 : Int
        get() {
            val o = __offset(28)
            return if(o != 0) bb.getInt(o + bb_pos) else 0
        }
    /**
     * Standard deviation of the estimated geodetic height, in meters.
     * Example: /// Example: 2
     * Constraints: No constraints specified.
     */
    val d3214 : Int
        get() {
            val o = __offset(30)
            return if(o != 0) bb.getInt(o + bb_pos) else 0
        }
    /**
     * Standard deviation of the measured line-of-sight velocity component, in centimeters per second.
     * Example: /// Example: 2
     * Constraints: No constraints specified.
     */
    val d3215 : Int
        get() {
            val o = __offset(32)
            return if(o != 0) bb.getInt(o + bb_pos) else 0
        }
    /**
     * The Truth Tag- Application is the Application Field truncated to 8 bits, from the Entity State Protocol Data Unit (PDU) used to generate the MTI Target.
     * Example: /// Example: 2
     * Constraints: No constraints specified.
     */
    val d3216 : Int
        get() {
            val o = __offset(34)
            return if(o != 0) bb.getInt(o + bb_pos) else 0
        }
    /**
     * The Truth Tag - Entity is the Entity Field from the Entity State PDU used to generate the MTI Target.
     * Example: /// Example: 1234567890
     * Constraints: No constraints specified.
     */
    val d3217 : Long
        get() {
            val o = __offset(36)
            return if(o != 0) bb.getLong(o + bb_pos) else 0L
        }
    /**
     * Estimated radar cross section of the target return, in half-decibels.
     * Example: /// Example: 98
     * Constraints: No constraints specified.
     */
    val d3218 : Int
        get() {
            val o = __offset(38)
            return if(o != 0) bb.getInt(o + bb_pos) else 0
        }
    companion object {
        fun validateVersion() = Constants.FLATBUFFERS_24_3_25()
        fun getRootAsMtiTargetReport_Ingest(_bb: ByteBuffer): MtiTargetReport_Ingest = getRootAsMtiTargetReport_Ingest(_bb, MtiTargetReport_Ingest())
        fun getRootAsMtiTargetReport_Ingest(_bb: ByteBuffer, obj: MtiTargetReport_Ingest): MtiTargetReport_Ingest {
            _bb.order(ByteOrder.LITTLE_ENDIAN)
            return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb))
        }
        fun MtiTargetReport_IngestBufferHasIdentifier(_bb: ByteBuffer) : Boolean = __has_identifier(_bb, "MTIT")
        fun createMtiTargetReport_Ingest(builder: FlatBufferBuilder, d321: Int, d322: Double, d323: Double, d324: Int, d325: Int, d326: Int, d327: Int, d328: Int, d329: Int, d3210Offset: Int, d3211: Int, d3212: Int, d3213: Int, d3214: Int, d3215: Int, d3216: Int, d3217: Long, d3218: Int) : Int {
            builder.startTable(18)
            addD3217(builder, d3217)
            addD323(builder, d323)
            addD322(builder, d322)
            addD3218(builder, d3218)
            addD3216(builder, d3216)
            addD3215(builder, d3215)
            addD3214(builder, d3214)
            addD3213(builder, d3213)
            addD3212(builder, d3212)
            addD3211(builder, d3211)
            addD3210(builder, d3210Offset)
            addD329(builder, d329)
            addD328(builder, d328)
            addD327(builder, d327)
            addD326(builder, d326)
            addD325(builder, d325)
            addD324(builder, d324)
            addD321(builder, d321)
            return endMtiTargetReport_Ingest(builder)
        }
        fun startMtiTargetReport_Ingest(builder: FlatBufferBuilder) = builder.startTable(18)
        fun addD321(builder: FlatBufferBuilder, d321: Int) = builder.addInt(0, d321, 0)
        fun addD322(builder: FlatBufferBuilder, d322: Double) = builder.addDouble(1, d322, 0.0)
        fun addD323(builder: FlatBufferBuilder, d323: Double) = builder.addDouble(2, d323, 0.0)
        fun addD324(builder: FlatBufferBuilder, d324: Int) = builder.addInt(3, d324, 0)
        fun addD325(builder: FlatBufferBuilder, d325: Int) = builder.addInt(4, d325, 0)
        fun addD326(builder: FlatBufferBuilder, d326: Int) = builder.addInt(5, d326, 0)
        fun addD327(builder: FlatBufferBuilder, d327: Int) = builder.addInt(6, d327, 0)
        fun addD328(builder: FlatBufferBuilder, d328: Int) = builder.addInt(7, d328, 0)
        fun addD329(builder: FlatBufferBuilder, d329: Int) = builder.addInt(8, d329, 0)
        fun addD3210(builder: FlatBufferBuilder, d3210: Int) = builder.addOffset(9, d3210, 0)
        fun addD3211(builder: FlatBufferBuilder, d3211: Int) = builder.addInt(10, d3211, 0)
        fun addD3212(builder: FlatBufferBuilder, d3212: Int) = builder.addInt(11, d3212, 0)
        fun addD3213(builder: FlatBufferBuilder, d3213: Int) = builder.addInt(12, d3213, 0)
        fun addD3214(builder: FlatBufferBuilder, d3214: Int) = builder.addInt(13, d3214, 0)
        fun addD3215(builder: FlatBufferBuilder, d3215: Int) = builder.addInt(14, d3215, 0)
        fun addD3216(builder: FlatBufferBuilder, d3216: Int) = builder.addInt(15, d3216, 0)
        fun addD3217(builder: FlatBufferBuilder, d3217: Long) = builder.addLong(16, d3217, 0L)
        fun addD3218(builder: FlatBufferBuilder, d3218: Int) = builder.addInt(17, d3218, 0)
        fun endMtiTargetReport_Ingest(builder: FlatBufferBuilder) : Int {
            val o = builder.endTable()
            return o
        }
        fun finishMtiTargetReportIngestBuffer(builder: FlatBufferBuilder, offset: Int) = builder.finish(offset, "MTIT")
        fun finishSizePrefixedMtiTargetReport_IngestBuffer(builder: FlatBufferBuilder, offset: Int) = builder.finishSizePrefixed(offset, "MTIT")
    }
}
