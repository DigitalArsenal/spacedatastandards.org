// automatically generated by the FlatBuffers compiler, do not modify

import com.google.flatbuffers.BaseVector
import com.google.flatbuffers.BooleanVector
import com.google.flatbuffers.ByteVector
import com.google.flatbuffers.Constants
import com.google.flatbuffers.DoubleVector
import com.google.flatbuffers.FlatBufferBuilder
import com.google.flatbuffers.FloatVector
import com.google.flatbuffers.LongVector
import com.google.flatbuffers.StringVector
import com.google.flatbuffers.Struct
import com.google.flatbuffers.Table
import com.google.flatbuffers.UnionVector
import java.nio.ByteBuffer
import java.nio.ByteOrder
import kotlin.math.sign

/**
 * /// Collection of information regarding the function, frequency, and priority of interface control and coordination nets for multilink coordination. There can be 0 to many DataLinkMultiVoiceCoord collections within a DataLinkMultiDuty collection.
 */
@Suppress("unused")
class DataLinkMultiDutyVoiceCoord_Ingest : Table() {

    fun __init(_i: Int, _bb: ByteBuffer)  {
        __reset(_i, _bb)
    }
    fun __assign(_i: Int, _bb: ByteBuffer) : DataLinkMultiDutyVoiceCoord_Ingest {
        __init(_i, _bb)
        return this
    }
    /**
     * Designator assigned to a voice interface control and coordination net for multilink coordination (e.g. ADCCN, DCN, VPN, etc.).
     * Example: /// Example: VPN
     * Constraints: Minimum length = 0, Maximum length = 5
     */
    val multiVoiceNetDes : String?
        get() {
            val o = __offset(4)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val multiVoiceNetDesAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(4, 1)
    fun multiVoiceNetDesInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 4, 1)
    /**
     * Designator used in nonsecure communications to refer to a radio frequency for multilink coordination.
     * Example: /// Example: ST300A
     * Constraints: Minimum length = 0, Maximum length = 8
     */
    val multiFreqDes : String?
        get() {
            val o = __offset(6)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val multiFreqDesAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(6, 1)
    fun multiFreqDesInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 6, 1)
    /**
     * Priority of a communication circuit, channel or frequency for multilink coordination (e.g. P - Primary, M - Monitor).
     * Example: /// Example: P
     * Constraints: Minimum length = 0, Maximum length = 1
     */
    val multiCommPri : String?
        get() {
            val o = __offset(8)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val multiCommPriAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(8, 1)
    fun multiCommPriInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 8, 1)
    /**
     * Array of telephone numbers or contact frequencies used for interface control for multilink coordination.
     * Example: /// Example: ['TEL:804-555-4142', 'TEL:804-867-5309']
     * Constraints: No constraints specified.
     */
    fun multiTeleFreqNums(j: Int) : String? {
        val o = __offset(10)
        return if (o != 0) {
            __string(__vector(o) + j * 4)
        } else {
            null
        }
    }
    val multiTeleFreqNumsLength : Int
        get() {
            val o = __offset(10); return if (o != 0) __vector_len(o) else 0
        }
    companion object {
        fun validateVersion() = Constants.FLATBUFFERS_24_3_25()
        fun getRootAsDataLinkMultiDutyVoiceCoord_Ingest(_bb: ByteBuffer): DataLinkMultiDutyVoiceCoord_Ingest = getRootAsDataLinkMultiDutyVoiceCoord_Ingest(_bb, DataLinkMultiDutyVoiceCoord_Ingest())
        fun getRootAsDataLinkMultiDutyVoiceCoord_Ingest(_bb: ByteBuffer, obj: DataLinkMultiDutyVoiceCoord_Ingest): DataLinkMultiDutyVoiceCoord_Ingest {
            _bb.order(ByteOrder.LITTLE_ENDIAN)
            return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb))
        }
        fun DataLinkMultiDutyVoiceCoord_IngestBufferHasIdentifier(_bb: ByteBuffer) : Boolean = __has_identifier(_bb, "DATA")
        fun createDataLinkMultiDutyVoiceCoord_Ingest(builder: FlatBufferBuilder, multiVoiceNetDesOffset: Int, multiFreqDesOffset: Int, multiCommPriOffset: Int, multiTeleFreqNumsOffset: Int) : Int {
            builder.startTable(4)
            addMultiTeleFreqNums(builder, multiTeleFreqNumsOffset)
            addMultiCommPri(builder, multiCommPriOffset)
            addMultiFreqDes(builder, multiFreqDesOffset)
            addMultiVoiceNetDes(builder, multiVoiceNetDesOffset)
            return endDataLinkMultiDutyVoiceCoord_Ingest(builder)
        }
        fun startDataLinkMultiDutyVoiceCoord_Ingest(builder: FlatBufferBuilder) = builder.startTable(4)
        fun addMultiVoiceNetDes(builder: FlatBufferBuilder, multiVoiceNetDes: Int) = builder.addOffset(0, multiVoiceNetDes, 0)
        fun addMultiFreqDes(builder: FlatBufferBuilder, multiFreqDes: Int) = builder.addOffset(1, multiFreqDes, 0)
        fun addMultiCommPri(builder: FlatBufferBuilder, multiCommPri: Int) = builder.addOffset(2, multiCommPri, 0)
        fun addMultiTeleFreqNums(builder: FlatBufferBuilder, multiTeleFreqNums: Int) = builder.addOffset(3, multiTeleFreqNums, 0)
        fun createMultiTeleFreqNumsVector(builder: FlatBufferBuilder, data: IntArray) : Int {
            builder.startVector(4, data.size, 4)
            for (i in data.size - 1 downTo 0) {
                builder.addOffset(data[i])
            }
            return builder.endVector()
        }
        fun startMultiTeleFreqNumsVector(builder: FlatBufferBuilder, numElems: Int) = builder.startVector(4, numElems, 4)
        fun endDataLinkMultiDutyVoiceCoord_Ingest(builder: FlatBufferBuilder) : Int {
            val o = builder.endTable()
            return o
        }
        fun finishDataLinkMultiDutyVoiceCoordIngestBuffer(builder: FlatBufferBuilder, offset: Int) = builder.finish(offset, "DATA")
        fun finishSizePrefixedDataLinkMultiDutyVoiceCoord_IngestBuffer(builder: FlatBufferBuilder, offset: Int) = builder.finishSizePrefixed(offset, "DATA")
    }
}
