// automatically generated by the FlatBuffers compiler, do not modify

import com.google.flatbuffers.BaseVector
import com.google.flatbuffers.BooleanVector
import com.google.flatbuffers.ByteVector
import com.google.flatbuffers.Constants
import com.google.flatbuffers.DoubleVector
import com.google.flatbuffers.FlatBufferBuilder
import com.google.flatbuffers.FloatVector
import com.google.flatbuffers.LongVector
import com.google.flatbuffers.StringVector
import com.google.flatbuffers.Struct
import com.google.flatbuffers.Table
import com.google.flatbuffers.UnionVector
import java.nio.ByteBuffer
import java.nio.ByteOrder
import kotlin.math.sign

/**
 * /// Airfield capacity data. Contains data associated with the airfieldslots available for parking, working, takeoff, and landing at the airfield, as well as the types of aircraft that can be accommodated.
 */
@Suppress("unused")
class AirfieldSlot_Abridged : Table() {

    fun __init(_i: Int, _bb: ByteBuffer)  {
        __reset(_i, _bb)
    }
    fun __assign(_i: Int, _bb: ByteBuffer) : AirfieldSlot_Abridged {
        __init(_i, _bb)
        return this
    }
    /**
     * Unique identifier of the record, auto-generated by the system.
     * Example: /// Example: be831d39-1822-da9f-7ace-6cc5643397dc
     * Constraints: Minimum length = 1, Maximum length = 36
     */
    val id : String?
        get() {
            val o = __offset(4)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val idAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(4, 1)
    fun idInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 4, 1)
    /**
     * Classification marking of the data in IC/CAPCO Portion-marked format.
     * Example: /// Example: U
     * Constraints: Minimum length = 1, Maximum length = 128
     */
    val classificationMarking : String?
        get() {
            val o = __offset(6)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val classificationMarkingAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(6, 1)
    fun classificationMarkingInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 6, 1)
    /**
     * The name of the airfield where this slot is located.
     * Example: /// Example: USAF Academy AFLD
     * Constraints: Minimum length = 1, Maximum length = 64
     */
    val airfieldName : String?
        get() {
            val o = __offset(8)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val airfieldNameAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(8, 1)
    fun airfieldNameInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 8, 1)
    /**
     * The International Civil Aviation Organization (ICAO) code of the airfield.
     * Example: /// Example: KCOS
     * Constraints: Minimum length = 0, Maximum length = 4
     */
    val icao : String?
        get() {
            val o = __offset(10)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val icaoAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(10, 1)
    fun icaoInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 10, 1)
    /**
     * Unique identifier of the Airfield for which this slot information applies.
     * Example: /// Example: 3136498f-2969-3535-1432-e984b2e2e686
     * Constraints: Minimum length = 0, Maximum length = 36
     */
    val idAirfield : String?
        get() {
            val o = __offset(12)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val idAirfieldAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(12, 1)
    fun idAirfieldInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 12, 1)
    /**
     * Alternate airfield identifier provided by the source.
     * Example: /// Example: ALT-AIRFIELD-ID
     * Constraints: Minimum length = 0, Maximum length = 64
     */
    val altAirfieldId : String?
        get() {
            val o = __offset(14)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val altAirfieldIdAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(14, 1)
    fun altAirfieldIdInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 14, 1)
    /**
     * Name of this slot.
     * Example: /// Example: Apron 5
     * Constraints: Minimum length = 1, Maximum length = 32
     */
    val name : String?
        get() {
            val o = __offset(16)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val nameAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(16, 1)
    fun nameInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 16, 1)
    /**
     * Designates how this slot can be used (WORKING, PARKING, TAKEOFF, LANDING, OTHER).
     * Example: /// Example: WORKING
     * Constraints: Minimum length = 0, Maximum length = 7
     */
    val type : Byte
        get() {
            val o = __offset(18)
            return if(o != 0) bb.get(o + bb_pos) else 0
        }
    /**
     * Largest category of aircraft supported in this slot (WIDE, NARROW, HELO, ALL, OTHER).
     * Example: /// Example: WIDE
     * Constraints: Minimum length = 0, Maximum length = 6
     */
    val acSlotCat : Byte
        get() {
            val o = __offset(20)
            return if(o != 0) bb.get(o + bb_pos) else 0
        }
    /**
     * Number of aircraft that can fit in this slot at the same time.
     * Example: /// Example: 5
     * Constraints: No constraints specified.
     */
    val capacity : Int
        get() {
            val o = __offset(22)
            return if(o != 0) bb.getInt(o + bb_pos) else 0
        }
    /**
     * Zulu time this slot is first available based on daily standard hours. Not applicable to slots with type PARKING. Abnormal hours, such as holidays, should be marked via the AirfieldSlotConsumption schema.
     * Example: /// Example: 0000Z
     * Constraints: Minimum length = 0, Maximum length = 5
     */
    val startTime : String?
        get() {
            val o = __offset(24)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val startTimeAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(24, 1)
    fun startTimeInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 24, 1)
    /**
     * Latest zulu time this slot is available based on daily standard hours. Not applicable to slots with type PARKING. Abnormal hours, such as holidays, should be marked via the AirfieldSlotConsumption schema.
     * Example: /// Example: 2359Z
     * Constraints: Minimum length = 0, Maximum length = 5
     */
    val endTime : String?
        get() {
            val o = __offset(26)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val endTimeAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(26, 1)
    fun endTimeInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 26, 1)
    /**
     * Minimum time that must elapse between different aircraft leaving and entering this slot, in minutes.
     * Example: /// Example: 7
     * Constraints: No constraints specified.
     */
    val minSeparation : Int
        get() {
            val o = __offset(28)
            return if(o != 0) bb.getInt(o + bb_pos) else 0
        }
    /**
     * Optional notes/comments for this airfield slot.
     * Example: /// Example: Notes for an airfield slot.
     * Constraints: Minimum length = 0, Maximum length = 128
     */
    val notes : String?
        get() {
            val o = __offset(30)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val notesAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(30, 1)
    fun notesInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 30, 1)
    /**
     * Time the row was created in the database, auto-populated by the system.
     * Example: /// Example: 2022-01-01T16:00:00.123Z
     * Constraints: No constraints specified.
     */
    val createdAt : String?
        get() {
            val o = __offset(32)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val createdAtAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(32, 1)
    fun createdAtInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 32, 1)
    /**
     * Application user who created the row in the database, auto-populated by the system.
     * Example: /// Example: some.user
     * Constraints: Minimum length = 1, Maximum length = 64
     */
    val createdBy : String?
        get() {
            val o = __offset(34)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val createdByAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(34, 1)
    fun createdByInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 34, 1)
    /**
     * The source data library from which this record was received. This could be a remote or tactical UDL or another data library. If null, the record should be assumed to have originated from the primary Enterprise UDL.
     * Example: /// Example: AXE
     * Constraints: Minimum length = 0, Maximum length = 64
     */
    val sourceDl : String?
        get() {
            val o = __offset(36)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val sourceDlAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(36, 1)
    fun sourceDlInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 36, 1)
    /**
     * Source of the data.
     * Example: /// Example: Bluestaq
     * Constraints: Minimum length = 1, Maximum length = 64
     */
    val source : String?
        get() {
            val o = __offset(38)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val sourceAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(38, 1)
    fun sourceInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 38, 1)
    /**
     * Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
     * Example: /// Example: THIRD_PARTY_DATASOURCE
     * Constraints: Minimum length = 0, Maximum length = 64
     */
    val origin : String?
        get() {
            val o = __offset(40)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val originAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(40, 1)
    fun originInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 40, 1)
    /**
     * The originating source network on which this record was created, auto-populated by the system.
     * Example: /// Example: OPS1
     * Constraints: Minimum length = 1, Maximum length = 32
     */
    val origNetwork : String?
        get() {
            val o = __offset(42)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val origNetworkAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(42, 1)
    fun origNetworkInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 42, 1)
    /**
     * Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
     * EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
     * REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
     * SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
     * TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
     * Example: /// Example: TEST
     * Constraints: Minimum length = 1, Maximum length = 32
     */
    val dataMode : Byte
        get() {
            val o = __offset(44)
            return if(o != 0) bb.get(o + bb_pos) else 0
        }
    companion object {
        fun validateVersion() = Constants.FLATBUFFERS_24_3_25()
        fun getRootAsAirfieldSlot_Abridged(_bb: ByteBuffer): AirfieldSlot_Abridged = getRootAsAirfieldSlot_Abridged(_bb, AirfieldSlot_Abridged())
        fun getRootAsAirfieldSlot_Abridged(_bb: ByteBuffer, obj: AirfieldSlot_Abridged): AirfieldSlot_Abridged {
            _bb.order(ByteOrder.LITTLE_ENDIAN)
            return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb))
        }
        fun AirfieldSlot_AbridgedBufferHasIdentifier(_bb: ByteBuffer) : Boolean = __has_identifier(_bb, "AIRF")
        fun createAirfieldSlot_Abridged(builder: FlatBufferBuilder, idOffset: Int, classificationMarkingOffset: Int, airfieldNameOffset: Int, icaoOffset: Int, idAirfieldOffset: Int, altAirfieldIdOffset: Int, nameOffset: Int, type: Byte, acSlotCat: Byte, capacity: Int, startTimeOffset: Int, endTimeOffset: Int, minSeparation: Int, notesOffset: Int, createdAtOffset: Int, createdByOffset: Int, sourceDlOffset: Int, sourceOffset: Int, originOffset: Int, origNetworkOffset: Int, dataMode: Byte) : Int {
            builder.startTable(21)
            addOrigNetwork(builder, origNetworkOffset)
            addOrigin(builder, originOffset)
            addSource(builder, sourceOffset)
            addSourceDL(builder, sourceDlOffset)
            addCreatedBy(builder, createdByOffset)
            addCreatedAt(builder, createdAtOffset)
            addNotes(builder, notesOffset)
            addMinSeparation(builder, minSeparation)
            addEndTime(builder, endTimeOffset)
            addStartTime(builder, startTimeOffset)
            addCapacity(builder, capacity)
            addName(builder, nameOffset)
            addAltAirfieldId(builder, altAirfieldIdOffset)
            addIdAirfield(builder, idAirfieldOffset)
            addIcao(builder, icaoOffset)
            addAirfieldName(builder, airfieldNameOffset)
            addClassificationMarking(builder, classificationMarkingOffset)
            addId(builder, idOffset)
            addDataMode(builder, dataMode)
            addAcSlotCat(builder, acSlotCat)
            addType(builder, type)
            return endAirfieldSlot_Abridged(builder)
        }
        fun startAirfieldSlot_Abridged(builder: FlatBufferBuilder) = builder.startTable(21)
        fun addId(builder: FlatBufferBuilder, id: Int) = builder.addOffset(0, id, 0)
        fun addClassificationMarking(builder: FlatBufferBuilder, classificationMarking: Int) = builder.addOffset(1, classificationMarking, 0)
        fun addAirfieldName(builder: FlatBufferBuilder, airfieldName: Int) = builder.addOffset(2, airfieldName, 0)
        fun addIcao(builder: FlatBufferBuilder, icao: Int) = builder.addOffset(3, icao, 0)
        fun addIdAirfield(builder: FlatBufferBuilder, idAirfield: Int) = builder.addOffset(4, idAirfield, 0)
        fun addAltAirfieldId(builder: FlatBufferBuilder, altAirfieldId: Int) = builder.addOffset(5, altAirfieldId, 0)
        fun addName(builder: FlatBufferBuilder, name: Int) = builder.addOffset(6, name, 0)
        fun addType(builder: FlatBufferBuilder, type: Byte) = builder.addByte(7, type, 0)
        fun addAcSlotCat(builder: FlatBufferBuilder, acSlotCat: Byte) = builder.addByte(8, acSlotCat, 0)
        fun addCapacity(builder: FlatBufferBuilder, capacity: Int) = builder.addInt(9, capacity, 0)
        fun addStartTime(builder: FlatBufferBuilder, startTime: Int) = builder.addOffset(10, startTime, 0)
        fun addEndTime(builder: FlatBufferBuilder, endTime: Int) = builder.addOffset(11, endTime, 0)
        fun addMinSeparation(builder: FlatBufferBuilder, minSeparation: Int) = builder.addInt(12, minSeparation, 0)
        fun addNotes(builder: FlatBufferBuilder, notes: Int) = builder.addOffset(13, notes, 0)
        fun addCreatedAt(builder: FlatBufferBuilder, createdAt: Int) = builder.addOffset(14, createdAt, 0)
        fun addCreatedBy(builder: FlatBufferBuilder, createdBy: Int) = builder.addOffset(15, createdBy, 0)
        fun addSourceDL(builder: FlatBufferBuilder, sourceDl: Int) = builder.addOffset(16, sourceDl, 0)
        fun addSource(builder: FlatBufferBuilder, source: Int) = builder.addOffset(17, source, 0)
        fun addOrigin(builder: FlatBufferBuilder, origin: Int) = builder.addOffset(18, origin, 0)
        fun addOrigNetwork(builder: FlatBufferBuilder, origNetwork: Int) = builder.addOffset(19, origNetwork, 0)
        fun addDataMode(builder: FlatBufferBuilder, dataMode: Byte) = builder.addByte(20, dataMode, 0)
        fun endAirfieldSlot_Abridged(builder: FlatBufferBuilder) : Int {
            val o = builder.endTable()
            return o
        }
        fun finishAirfieldSlotAbridgedBuffer(builder: FlatBufferBuilder, offset: Int) = builder.finish(offset, "AIRF")
        fun finishSizePrefixedAirfieldSlot_AbridgedBuffer(builder: FlatBufferBuilder, offset: Int) = builder.finishSizePrefixed(offset, "AIRF")
    }
}
