// automatically generated by the FlatBuffers compiler, do not modify

import com.google.flatbuffers.BaseVector
import com.google.flatbuffers.BooleanVector
import com.google.flatbuffers.ByteVector
import com.google.flatbuffers.Constants
import com.google.flatbuffers.DoubleVector
import com.google.flatbuffers.FlatBufferBuilder
import com.google.flatbuffers.FloatVector
import com.google.flatbuffers.LongVector
import com.google.flatbuffers.StringVector
import com.google.flatbuffers.Struct
import com.google.flatbuffers.Table
import com.google.flatbuffers.UnionVector
import java.nio.ByteBuffer
import java.nio.ByteOrder
import kotlin.math.sign

/**
 * /// Collection of receiver aircraft associated with this Air Event.
 */
@Suppress("unused")
class AirEventReceivers_Full : Table() {

    fun __init(_i: Int, _bb: ByteBuffer)  {
        __reset(_i, _bb)
    }
    fun __assign(_i: Int, _bb: ByteBuffer) : AirEventReceivers_Full {
        __init(_i, _bb)
        return this
    }
    /**
     * The UDL ID of the aircraft sortie this receiver is associated with for this event.
     * Example: /// Example: 1d03e85a-1fb9-4f6e-86a0-593306b6e3f0
     * Constraints: Minimum length = 0, Maximum length = 36
     */
    val idReceiverSortie : String?
        get() {
            val o = __offset(4)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val idReceiverSortieAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(4, 1)
    fun idReceiverSortieInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 4, 1)
    /**
     * The UDL ID of the mission this receiver is associated with for this event.
     * Example: /// Example: ce99757d-f733-461f-8939-3939d4f05946
     * Constraints: Minimum length = 0, Maximum length = 36
     */
    val idReceiverMission : String?
        get() {
            val o = __offset(6)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val idReceiverMissionAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(6, 1)
    fun idReceiverMissionInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 6, 1)
    /**
     * The UDL ID of the airfield this receiver is associated with for this event.
     * Example: /// Example: 96c4c2ba-a031-4e58-9b8e-3c6fb90a7534
     * Constraints: Minimum length = 0, Maximum length = 36
     */
    val idReceiverAirfield : String?
        get() {
            val o = __offset(8)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val idReceiverAirfieldAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(8, 1)
    fun idReceiverAirfieldInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 8, 1)
    /**
     * Optional receiver identifier from external systems. This field has no meaning within UDL and is provided as a convenience for systems that require tracking of an internal system generated ID.
     * Example: /// Example: 3fb8169f-adc1-4667-acab-8415a012d766
     * Constraints: Minimum length = 0, Maximum length = 36
     */
    val externalReceiverId : String?
        get() {
            val o = __offset(10)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val externalReceiverIdAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(10, 1)
    fun externalReceiverIdInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 10, 1)
    /**
     * Coordination record identifier of this receiver.
     * Example: /// Example: TTC601
     * Constraints: Minimum length = 0, Maximum length = 6
     */
    val receiverCoord : String?
        get() {
            val o = __offset(12)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val receiverCoordAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(12, 1)
    fun receiverCoordInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 12, 1)
    /**
     * The Model Design Series designation of this receiver.
     * Example: /// Example: KC135R
     * Constraints: Minimum length = 0, Maximum length = 128
     */
    val receiverMds : String?
        get() {
            val o = __offset(14)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val receiverMdsAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(14, 1)
    fun receiverMdsInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 14, 1)
    /**
     * The Air Mobility Command (AMC) mission identifier of this receiver.
     * Example: /// Example: 8PH000B1S052
     * Constraints: Minimum length = 0, Maximum length = 36
     */
    val amcReceiverMissionId : String?
        get() {
            val o = __offset(16)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val amcReceiverMissionIdAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(16, 1)
    fun amcReceiverMissionIdInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 16, 1)
    /**
     * Alternate mission identifier of this receiver provided by source.
     * Example: /// Example: 1UN05201L121
     * Constraints: Minimum length = 0, Maximum length = 32
     */
    val altReceiverMissionId : String?
        get() {
            val o = __offset(18)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val altReceiverMissionIdAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(18, 1)
    fun altReceiverMissionIdInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 18, 1)
    /**
     * The call sign assigned to this receiver.
     * Example: /// Example: BAKER
     * Constraints: Minimum length = 0, Maximum length = 24
     */
    val receiverCallSign : String?
        get() {
            val o = __offset(20)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val receiverCallSignAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(20, 1)
    fun receiverCallSignInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 20, 1)
    /**
     * The wing or unit that owns this receiver.
     * Example: /// Example: 117ARW
     * Constraints: Minimum length = 0, Maximum length = 256
     */
    val receiverOwner : String?
        get() {
            val o = __offset(22)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val receiverOwnerAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(22, 1)
    fun receiverOwnerInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 22, 1)
    /**
     * The name and/or number of the point of contact for this receiver.
     * Example: /// Example: JOHN SMITH (555)555-5555
     * Constraints: Minimum length = 0, Maximum length = 68
     */
    val receiverPoc : String?
        get() {
            val o = __offset(24)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val receiverPocAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(24, 1)
    fun receiverPocInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 24, 1)
    /**
     * Identifies the itinerary point of a mission that this receiver is linked to.
     * Example: /// Example: 825
     * Constraints: No constraints specified.
     */
    val receiverLegNum : Int
        get() {
            val o = __offset(26)
            return if(o != 0) bb.getInt(o + bb_pos) else 0
        }
    /**
     * Location the receiver is deployed to for an air refueling event.
     * Example: /// Example: KOFF
     * Constraints: Minimum length = 0, Maximum length = 4
     */
    val receiverDeployedIcao : String?
        get() {
            val o = __offset(28)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val receiverDeployedIcaoAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(28, 1)
    fun receiverDeployedIcaoInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 28, 1)
    /**
     * Type of fuel delivery method used by the receiver during an air refueling event (BOOM, DROGUE, BOTH).
     * Example: /// Example: DROGUE
     * Constraints: Minimum length = 0, Maximum length = 6
     */
    val receiverDeliveryMethod : String?
        get() {
            val o = __offset(30)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val receiverDeliveryMethodAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(30, 1)
    fun receiverDeliveryMethodInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 30, 1)
    /**
     * Total weight of the fuel transferred to this receiver during an air refueling event, in pounds.
     * Example: /// Example: 15000000.1
     * Constraints: No constraints specified.
     */
    val fuelOn : Double
        get() {
            val o = __offset(32)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Position of this receiver within a group of receivers in an air refueling event.
     * Example: /// Example: 2
     * Constraints: No constraints specified.
     */
    val receiverCellPosition : Int
        get() {
            val o = __offset(34)
            return if(o != 0) bb.getInt(o + bb_pos) else 0
        }
    /**
     * Indicates the unique number by Unit ID, which identifies an air refueling event.
     * Example: /// Example: 1018
     * Constraints: Minimum length = 0, Maximum length = 15
     */
    val sequenceNum : String?
        get() {
            val o = __offset(36)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val sequenceNumAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(36, 1)
    fun sequenceNumInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 36, 1)
    /**
     * The major command level (MAJCOM) or foreign military sales (FMS) name of the receiver's organization. The tanker flying hours used for an air refueling event are logged against the receiver MAJCOM or foreign government being supported.
     * Example: /// Example: AMC
     * Constraints: Minimum length = 0, Maximum length = 3
     */
    val recOrg : String?
        get() {
            val o = __offset(38)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val recOrgAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(38, 1)
    fun recOrgInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 38, 1)
    /**
     * Number of aircraft contained within one receiver coordination record for an air refueling event.
     * Example: /// Example: 3
     * Constraints: No constraints specified.
     */
    val numRecAircraft : Int
        get() {
            val o = __offset(40)
            return if(o != 0) bb.getInt(o + bb_pos) else 0
        }
    /**
     * Type of fuel being transferred to the receiver in an air refueling event.
     * Example: /// Example: JP8
     * Constraints: Minimum length = 0, Maximum length = 3
     */
    val receiverFuelType : String?
        get() {
            val o = __offset(42)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val receiverFuelTypeAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(42, 1)
    fun receiverFuelTypeInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 42, 1)
    /**
     * Name of the receiver exercise associated with an air refueling event.
     * Example: /// Example: NATO19
     * Constraints: Minimum length = 0, Maximum length = 12
     */
    val receiverExercise : String?
        get() {
            val o = __offset(44)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val receiverExerciseAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(44, 1)
    fun receiverExerciseInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 44, 1)
    /**
     * The package identifier for the receiver in an air refueling event.
     * Example: /// Example: 135
     * Constraints: Minimum length = 0, Maximum length = 3
     */
    val packageId : String?
        get() {
            val o = __offset(46)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val packageIdAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(46, 1)
    fun packageIdInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 46, 1)
    companion object {
        fun validateVersion() = Constants.FLATBUFFERS_24_3_25()
        fun getRootAsAirEventReceivers_Full(_bb: ByteBuffer): AirEventReceivers_Full = getRootAsAirEventReceivers_Full(_bb, AirEventReceivers_Full())
        fun getRootAsAirEventReceivers_Full(_bb: ByteBuffer, obj: AirEventReceivers_Full): AirEventReceivers_Full {
            _bb.order(ByteOrder.LITTLE_ENDIAN)
            return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb))
        }
        fun AirEventReceivers_FullBufferHasIdentifier(_bb: ByteBuffer) : Boolean = __has_identifier(_bb, "AIRE")
        fun createAirEventReceivers_Full(builder: FlatBufferBuilder, idReceiverSortieOffset: Int, idReceiverMissionOffset: Int, idReceiverAirfieldOffset: Int, externalReceiverIdOffset: Int, receiverCoordOffset: Int, receiverMdsOffset: Int, amcReceiverMissionIdOffset: Int, altReceiverMissionIdOffset: Int, receiverCallSignOffset: Int, receiverOwnerOffset: Int, receiverPocOffset: Int, receiverLegNum: Int, receiverDeployedIcaoOffset: Int, receiverDeliveryMethodOffset: Int, fuelOn: Double, receiverCellPosition: Int, sequenceNumOffset: Int, recOrgOffset: Int, numRecAircraft: Int, receiverFuelTypeOffset: Int, receiverExerciseOffset: Int, packageIdOffset: Int) : Int {
            builder.startTable(22)
            addFuelOn(builder, fuelOn)
            addPackageId(builder, packageIdOffset)
            addReceiverExercise(builder, receiverExerciseOffset)
            addReceiverFuelType(builder, receiverFuelTypeOffset)
            addNumRecAircraft(builder, numRecAircraft)
            addRecOrg(builder, recOrgOffset)
            addSequenceNum(builder, sequenceNumOffset)
            addReceiverCellPosition(builder, receiverCellPosition)
            addReceiverDeliveryMethod(builder, receiverDeliveryMethodOffset)
            addReceiverDeployedICAO(builder, receiverDeployedIcaoOffset)
            addReceiverLegNum(builder, receiverLegNum)
            addReceiverPOC(builder, receiverPocOffset)
            addReceiverOwner(builder, receiverOwnerOffset)
            addReceiverCallSign(builder, receiverCallSignOffset)
            addAltReceiverMissionId(builder, altReceiverMissionIdOffset)
            addAmcReceiverMissionId(builder, amcReceiverMissionIdOffset)
            addReceiverMDS(builder, receiverMdsOffset)
            addReceiverCoord(builder, receiverCoordOffset)
            addExternalReceiverId(builder, externalReceiverIdOffset)
            addIdReceiverAirfield(builder, idReceiverAirfieldOffset)
            addIdReceiverMission(builder, idReceiverMissionOffset)
            addIdReceiverSortie(builder, idReceiverSortieOffset)
            return endAirEventReceivers_Full(builder)
        }
        fun startAirEventReceivers_Full(builder: FlatBufferBuilder) = builder.startTable(22)
        fun addIdReceiverSortie(builder: FlatBufferBuilder, idReceiverSortie: Int) = builder.addOffset(0, idReceiverSortie, 0)
        fun addIdReceiverMission(builder: FlatBufferBuilder, idReceiverMission: Int) = builder.addOffset(1, idReceiverMission, 0)
        fun addIdReceiverAirfield(builder: FlatBufferBuilder, idReceiverAirfield: Int) = builder.addOffset(2, idReceiverAirfield, 0)
        fun addExternalReceiverId(builder: FlatBufferBuilder, externalReceiverId: Int) = builder.addOffset(3, externalReceiverId, 0)
        fun addReceiverCoord(builder: FlatBufferBuilder, receiverCoord: Int) = builder.addOffset(4, receiverCoord, 0)
        fun addReceiverMDS(builder: FlatBufferBuilder, receiverMds: Int) = builder.addOffset(5, receiverMds, 0)
        fun addAmcReceiverMissionId(builder: FlatBufferBuilder, amcReceiverMissionId: Int) = builder.addOffset(6, amcReceiverMissionId, 0)
        fun addAltReceiverMissionId(builder: FlatBufferBuilder, altReceiverMissionId: Int) = builder.addOffset(7, altReceiverMissionId, 0)
        fun addReceiverCallSign(builder: FlatBufferBuilder, receiverCallSign: Int) = builder.addOffset(8, receiverCallSign, 0)
        fun addReceiverOwner(builder: FlatBufferBuilder, receiverOwner: Int) = builder.addOffset(9, receiverOwner, 0)
        fun addReceiverPOC(builder: FlatBufferBuilder, receiverPoc: Int) = builder.addOffset(10, receiverPoc, 0)
        fun addReceiverLegNum(builder: FlatBufferBuilder, receiverLegNum: Int) = builder.addInt(11, receiverLegNum, 0)
        fun addReceiverDeployedICAO(builder: FlatBufferBuilder, receiverDeployedIcao: Int) = builder.addOffset(12, receiverDeployedIcao, 0)
        fun addReceiverDeliveryMethod(builder: FlatBufferBuilder, receiverDeliveryMethod: Int) = builder.addOffset(13, receiverDeliveryMethod, 0)
        fun addFuelOn(builder: FlatBufferBuilder, fuelOn: Double) = builder.addDouble(14, fuelOn, 0.0)
        fun addReceiverCellPosition(builder: FlatBufferBuilder, receiverCellPosition: Int) = builder.addInt(15, receiverCellPosition, 0)
        fun addSequenceNum(builder: FlatBufferBuilder, sequenceNum: Int) = builder.addOffset(16, sequenceNum, 0)
        fun addRecOrg(builder: FlatBufferBuilder, recOrg: Int) = builder.addOffset(17, recOrg, 0)
        fun addNumRecAircraft(builder: FlatBufferBuilder, numRecAircraft: Int) = builder.addInt(18, numRecAircraft, 0)
        fun addReceiverFuelType(builder: FlatBufferBuilder, receiverFuelType: Int) = builder.addOffset(19, receiverFuelType, 0)
        fun addReceiverExercise(builder: FlatBufferBuilder, receiverExercise: Int) = builder.addOffset(20, receiverExercise, 0)
        fun addPackageId(builder: FlatBufferBuilder, packageId: Int) = builder.addOffset(21, packageId, 0)
        fun endAirEventReceivers_Full(builder: FlatBufferBuilder) : Int {
            val o = builder.endTable()
            return o
        }
        fun finishAirEventReceiversFullBuffer(builder: FlatBufferBuilder, offset: Int) = builder.finish(offset, "AIRE")
        fun finishSizePrefixedAirEventReceivers_FullBuffer(builder: FlatBufferBuilder, offset: Int) = builder.finishSizePrefixed(offset, "AIRE")
    }
}
