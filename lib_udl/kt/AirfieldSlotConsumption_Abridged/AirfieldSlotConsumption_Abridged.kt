// automatically generated by the FlatBuffers compiler, do not modify

import com.google.flatbuffers.BaseVector
import com.google.flatbuffers.BooleanVector
import com.google.flatbuffers.ByteVector
import com.google.flatbuffers.Constants
import com.google.flatbuffers.DoubleVector
import com.google.flatbuffers.FlatBufferBuilder
import com.google.flatbuffers.FloatVector
import com.google.flatbuffers.LongVector
import com.google.flatbuffers.StringVector
import com.google.flatbuffers.Struct
import com.google.flatbuffers.Table
import com.google.flatbuffers.UnionVector
import java.nio.ByteBuffer
import java.nio.ByteOrder
import kotlin.math.sign

/**
 * /// Airfield slot use data. Contains the dynamic data associated with the status and use of specific airfield slots.
 */
@Suppress("unused")
class AirfieldSlotConsumption_Abridged : Table() {

    fun __init(_i: Int, _bb: ByteBuffer)  {
        __reset(_i, _bb)
    }
    fun __assign(_i: Int, _bb: ByteBuffer) : AirfieldSlotConsumption_Abridged {
        __init(_i, _bb)
        return this
    }
    /**
     * Unique identifier of the record, auto-generated by the system.
     * Example: /// Example: be831d39-1822-da9f-7ace-6cc5643397dc
     * Constraints: Minimum length = 1, Maximum length = 36
     */
    val id : String?
        get() {
            val o = __offset(4)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val idAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(4, 1)
    fun idInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 4, 1)
    /**
     * Classification marking of the data in IC/CAPCO Portion-marked format.
     * Example: /// Example: U
     * Constraints: Minimum length = 1, Maximum length = 128
     */
    val classificationMarking : String?
        get() {
            val o = __offset(6)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val classificationMarkingAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(6, 1)
    fun classificationMarkingInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 6, 1)
    /**
     * Unique identifier of the airfield slot for which this slot consumption record is referencing.
     * Example: /// Example: 3136498f-2969-3535-1432-e984b2e2e686
     * Constraints: Minimum length = 1, Maximum length = 36
     */
    val idAirfieldSlot : String?
        get() {
            val o = __offset(8)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val idAirfieldSlotAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(8, 1)
    fun idAirfieldSlotInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 8, 1)
    /**
     * Current status of this slot (REQUESTED / APPROVED / DENIED / BLOCKED / OTHER).
     * Example: /// Example: APPROVED
     * Constraints: Minimum length = 0, Maximum length = 9
     */
    val status : Byte
        get() {
            val o = __offset(10)
            return if(o != 0) bb.get(o + bb_pos) else 0
        }
    /**
     * Flag indicating if the slot is occupied.
     * Example: /// Example: True
     * Constraints: No constraints specified.
     */
    val occupied : Boolean
        get() {
            val o = __offset(12)
            return if(o != 0) 0.toByte() != bb.get(o + bb_pos) else false
        }
    /**
     * Identifying name of the aircraft using this slot. Names are often Prior Permission Required (PPR) numbers or other similar human-readable identifiers.
     * Example: /// Example: APRON1-230401001
     * Constraints: Minimum length = 0, Maximum length = 64
     */
    val consumer : String?
        get() {
            val o = __offset(14)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val consumerAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(14, 1)
    fun consumerInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 14, 1)
    /**
     * The aircraft Model Design Series designation of the aircraft occupying this slot.
     * Example: /// Example: C017A
     * Constraints: Minimum length = 0, Maximum length = 36
     */
    val occAircraftMds : String?
        get() {
            val o = __offset(16)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val occAircraftMdsAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(16, 1)
    fun occAircraftMdsInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 16, 1)
    /**
     * The tail number of the aircraft occupying this slot.
     * Example: /// Example: N702JG
     * Constraints: Minimum length = 0, Maximum length = 16
     */
    val occTailNumber : String?
        get() {
            val o = __offset(18)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val occTailNumberAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(18, 1)
    fun occTailNumberInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 18, 1)
    /**
     * Array of call signs of the aircraft using this slot.
     * Example: /// Example: ['RCH123', 'ABC123', 'LLS442']
     * Constraints: No constraints specified.
     */
    fun callSigns(j: Int) : String? {
        val o = __offset(20)
        return if (o != 0) {
            __string(__vector(o) + j * 4)
        } else {
            null
        }
    }
    val callSignsLength : Int
        get() {
            val o = __offset(20); return if (o != 0) __vector_len(o) else 0
        }
    /**
     * Mission identifier using this slot according to Mobility Air Forces (MAF) Encode/Decode procedures.
     * Example: /// Example: AJM123456123
     * Constraints: Minimum length = 0, Maximum length = 36
     */
    val missionId : String?
        get() {
            val o = __offset(22)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val missionIdAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(22, 1)
    fun missionIdInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 22, 1)
    /**
     * Number of aircraft using this slot for this time.
     * Example: /// Example: 1
     * Constraints: No constraints specified.
     */
    val numAircraft : Int
        get() {
            val o = __offset(24)
            return if(o != 0) bb.getInt(o + bb_pos) else 0
        }
    /**
     * Time the aircraft began occupying this slot, in ISO 8601 UTC format with millisecond precision.
     * Example: /// Example: 2023-01-01T01:01:03.123Z
     * Constraints: No constraints specified.
     */
    val occStartTime : String?
        get() {
            val o = __offset(26)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val occStartTimeAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(26, 1)
    fun occStartTimeInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 26, 1)
    /**
     * The aircraft Model Design Series designation of the aircraft this slot is reserved for.
     * Example: /// Example: C017A
     * Constraints: Minimum length = 0, Maximum length = 36
     */
    val resAircraftMds : String?
        get() {
            val o = __offset(28)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val resAircraftMdsAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(28, 1)
    fun resAircraftMdsInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 28, 1)
    /**
     * The tail number of the aircraft this slot is reserved for.
     * Example: /// Example: N702JG
     * Constraints: Minimum length = 0, Maximum length = 16
     */
    val resTailNumber : String?
        get() {
            val o = __offset(30)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val resTailNumberAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(30, 1)
    fun resTailNumberInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 30, 1)
    /**
     * Indicates the type of reservation (e.g. M for Mission, A for Aircraft, O for Other).
     * Example: /// Example: M
     * Constraints: Minimum length = 0, Maximum length = 2
     */
    val resType : String?
        get() {
            val o = __offset(32)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val resTypeAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(32, 1)
    fun resTypeInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 32, 1)
    /**
     * The reason the slot reservation was made.
     * Example: /// Example: Maintenance needed
     * Constraints: Minimum length = 0, Maximum length = 256
     */
    val resReason : String?
        get() {
            val o = __offset(34)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val resReasonAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(34, 1)
    fun resReasonInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 34, 1)
    /**
     * Mission identifier reserving this slot according to Mobility Air Forces (MAF) Encode/Decode procedures.
     * Example: /// Example: AJM123456123
     * Constraints: Minimum length = 0, Maximum length = 36
     */
    val resMissionId : String?
        get() {
            val o = __offset(36)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val resMissionIdAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(36, 1)
    fun resMissionIdInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 36, 1)
    /**
     * The start of the slot window, in ISO 8601 UTC format.
     * Example: /// Example: 2023-01-01T01:01:01.123Z
     * Constraints: No constraints specified.
     */
    val startTime : String?
        get() {
            val o = __offset(38)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val startTimeAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(38, 1)
    fun startTimeInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 38, 1)
    /**
     * The end of the slot window, in ISO 8601 UTC format.
     * Example: /// Example: 2023-01-01T01:01:01.123Z
     * Constraints: No constraints specified.
     */
    val endTime : String?
        get() {
            val o = __offset(40)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val endTimeAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(40, 1)
    fun endTimeInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 40, 1)
    /**
     * The desired time for aircraft action such as landing, take off, parking, etc., in ISO 8601 UTC format.
     * Example: /// Example: 2023-01-01T01:01:01.123Z
     * Constraints: No constraints specified.
     */
    val targetTime : String?
        get() {
            val o = __offset(42)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val targetTimeAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(42, 1)
    fun targetTimeInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 42, 1)
    /**
     * Unique identifier of the sortie arriving at the slot start time.
     * Example: /// Example: be831d39-1822-da9f-7ace-6cc5643397dc
     * Constraints: Minimum length = 0, Maximum length = 36
     */
    val idArrSortie : String?
        get() {
            val o = __offset(44)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val idArrSortieAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(44, 1)
    fun idArrSortieInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 44, 1)
    /**
     * Unique identifier of the sortie departing at the slot end time.
     * Example: /// Example: 1e6edeec-72e9-aaec-d33c-51147cb5ffdd
     * Constraints: Minimum length = 0, Maximum length = 36
     */
    val idDepSortie : String?
        get() {
            val o = __offset(46)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val idDepSortieAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(46, 1)
    fun idDepSortieInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 46, 1)
    /**
     * Alternate identifier of the sortie arriving at the slot start time provided by the source.
     * Example: /// Example: ALT-SORTIE-ID
     * Constraints: Minimum length = 0, Maximum length = 36
     */
    val altArrSortieId : String?
        get() {
            val o = __offset(48)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val altArrSortieIdAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(48, 1)
    fun altArrSortieIdInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 48, 1)
    /**
     * Alternate identifier of the sortie departing at the slot end time provided by the source.
     * Example: /// Example: ALT-SORTIE-ID
     * Constraints: Minimum length = 0, Maximum length = 36
     */
    val altDepSortieId : String?
        get() {
            val o = __offset(50)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val altDepSortieIdAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(50, 1)
    fun altDepSortieIdInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 50, 1)
    /**
     * Comments from the requester.
     * Example: /// Example: Sorry for the late notice.
     * Constraints: Minimum length = 0, Maximum length = 128
     */
    val reqComment : String?
        get() {
            val o = __offset(52)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val reqCommentAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(52, 1)
    fun reqCommentInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 52, 1)
    /**
     * Comments from the approver.
     * Example: /// Example: The request was denied due to inoperable fuel pumps.
     * Constraints: Minimum length = 0, Maximum length = 128
     */
    val appComment : String?
        get() {
            val o = __offset(54)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val appCommentAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(54, 1)
    fun appCommentInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 54, 1)
    /**
     * Short name of the organization requesting use of this slot.
     * Example: /// Example: TACC
     * Constraints: Minimum length = 0, Maximum length = 32
     */
    val reqOrg : String?
        get() {
            val o = __offset(56)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val reqOrgAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(56, 1)
    fun reqOrgInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 56, 1)
    /**
     * Initials of the person requesting the use of this slot. Use SYSTEM if this request is auto-generated by an auto-planning system.
     * Example: /// Example: CB
     * Constraints: Minimum length = 0, Maximum length = 8
     */
    val reqInitials : String?
        get() {
            val o = __offset(58)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val reqInitialsAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(58, 1)
    fun reqInitialsInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 58, 1)
    /**
     * Short name of the organization approving the use of this slot.
     * Example: /// Example: KCHS/BOPS
     * Constraints: Minimum length = 0, Maximum length = 32
     */
    val appOrg : String?
        get() {
            val o = __offset(60)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val appOrgAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(60, 1)
    fun appOrgInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 60, 1)
    /**
     * Initials of the person approving the use of this slot. Use SYSTEM if auto-approved without human involvement.
     * Example: /// Example: CB
     * Constraints: Minimum length = 0, Maximum length = 8
     */
    val appInitials : String?
        get() {
            val o = __offset(62)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val appInitialsAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(62, 1)
    fun appInitialsInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 62, 1)
    /**
     * Time the row was created in the database, auto-populated by the system.
     * Example: /// Example: 2018-01-01T16:00:00.123Z
     * Constraints: No constraints specified.
     */
    val createdAt : String?
        get() {
            val o = __offset(64)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val createdAtAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(64, 1)
    fun createdAtInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 64, 1)
    /**
     * Application user who created the row in the database, auto-populated by the system.
     * Example: /// Example: some.user
     * Constraints: Minimum length = 1, Maximum length = 64
     */
    val createdBy : String?
        get() {
            val o = __offset(66)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val createdByAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(66, 1)
    fun createdByInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 66, 1)
    /**
     * The source data library from which this record was received. This could be a remote or tactical UDL or another data library. If null, the record should be assumed to have originated from the primary Enterprise UDL.
     * Example: /// Example: AXE
     * Constraints: Minimum length = 0, Maximum length = 64
     */
    val sourceDl : String?
        get() {
            val o = __offset(68)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val sourceDlAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(68, 1)
    fun sourceDlInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 68, 1)
    /**
     * Source of the data.
     * Example: /// Example: Bluestaq
     * Constraints: Minimum length = 1, Maximum length = 64
     */
    val source : String?
        get() {
            val o = __offset(70)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val sourceAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(70, 1)
    fun sourceInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 70, 1)
    /**
     * Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
     * Example: /// Example: THIRD_PARTY_DATASOURCE
     * Constraints: Minimum length = 0, Maximum length = 64
     */
    val origin : String?
        get() {
            val o = __offset(72)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val originAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(72, 1)
    fun originInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 72, 1)
    /**
     * The originating source network on which this record was created, auto-populated by the system.
     * Example: /// Example: ORIG
     * Constraints: Minimum length = 0, Maximum length = 32
     */
    val origNetwork : String?
        get() {
            val o = __offset(74)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val origNetworkAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(74, 1)
    fun origNetworkInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 74, 1)
    /**
     * Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
     * EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
     * REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
     * SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
     * TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
     * Example: /// Example: TEST
     * Constraints: Minimum length = 1, Maximum length = 32
     */
    val dataMode : Byte
        get() {
            val o = __offset(76)
            return if(o != 0) bb.get(o + bb_pos) else 0
        }
    companion object {
        fun validateVersion() = Constants.FLATBUFFERS_24_3_25()
        fun getRootAsAirfieldSlotConsumption_Abridged(_bb: ByteBuffer): AirfieldSlotConsumption_Abridged = getRootAsAirfieldSlotConsumption_Abridged(_bb, AirfieldSlotConsumption_Abridged())
        fun getRootAsAirfieldSlotConsumption_Abridged(_bb: ByteBuffer, obj: AirfieldSlotConsumption_Abridged): AirfieldSlotConsumption_Abridged {
            _bb.order(ByteOrder.LITTLE_ENDIAN)
            return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb))
        }
        fun AirfieldSlotConsumption_AbridgedBufferHasIdentifier(_bb: ByteBuffer) : Boolean = __has_identifier(_bb, "AIRF")
        fun createAirfieldSlotConsumption_Abridged(builder: FlatBufferBuilder, idOffset: Int, classificationMarkingOffset: Int, idAirfieldSlotOffset: Int, status: Byte, occupied: Boolean, consumerOffset: Int, occAircraftMdsOffset: Int, occTailNumberOffset: Int, callSignsOffset: Int, missionIdOffset: Int, numAircraft: Int, occStartTimeOffset: Int, resAircraftMdsOffset: Int, resTailNumberOffset: Int, resTypeOffset: Int, resReasonOffset: Int, resMissionIdOffset: Int, startTimeOffset: Int, endTimeOffset: Int, targetTimeOffset: Int, idArrSortieOffset: Int, idDepSortieOffset: Int, altArrSortieIdOffset: Int, altDepSortieIdOffset: Int, reqCommentOffset: Int, appCommentOffset: Int, reqOrgOffset: Int, reqInitialsOffset: Int, appOrgOffset: Int, appInitialsOffset: Int, createdAtOffset: Int, createdByOffset: Int, sourceDlOffset: Int, sourceOffset: Int, originOffset: Int, origNetworkOffset: Int, dataMode: Byte) : Int {
            builder.startTable(37)
            addOrigNetwork(builder, origNetworkOffset)
            addOrigin(builder, originOffset)
            addSource(builder, sourceOffset)
            addSourceDL(builder, sourceDlOffset)
            addCreatedBy(builder, createdByOffset)
            addCreatedAt(builder, createdAtOffset)
            addAppInitials(builder, appInitialsOffset)
            addAppOrg(builder, appOrgOffset)
            addReqInitials(builder, reqInitialsOffset)
            addReqOrg(builder, reqOrgOffset)
            addAppComment(builder, appCommentOffset)
            addReqComment(builder, reqCommentOffset)
            addAltDepSortieId(builder, altDepSortieIdOffset)
            addAltArrSortieId(builder, altArrSortieIdOffset)
            addIdDepSortie(builder, idDepSortieOffset)
            addIdArrSortie(builder, idArrSortieOffset)
            addTargetTime(builder, targetTimeOffset)
            addEndTime(builder, endTimeOffset)
            addStartTime(builder, startTimeOffset)
            addResMissionId(builder, resMissionIdOffset)
            addResReason(builder, resReasonOffset)
            addResType(builder, resTypeOffset)
            addResTailNumber(builder, resTailNumberOffset)
            addResAircraftMDS(builder, resAircraftMdsOffset)
            addOccStartTime(builder, occStartTimeOffset)
            addNumAircraft(builder, numAircraft)
            addMissionId(builder, missionIdOffset)
            addCallSigns(builder, callSignsOffset)
            addOccTailNumber(builder, occTailNumberOffset)
            addOccAircraftMDS(builder, occAircraftMdsOffset)
            addConsumer(builder, consumerOffset)
            addIdAirfieldSlot(builder, idAirfieldSlotOffset)
            addClassificationMarking(builder, classificationMarkingOffset)
            addId(builder, idOffset)
            addDataMode(builder, dataMode)
            addOccupied(builder, occupied)
            addStatus(builder, status)
            return endAirfieldSlotConsumption_Abridged(builder)
        }
        fun startAirfieldSlotConsumption_Abridged(builder: FlatBufferBuilder) = builder.startTable(37)
        fun addId(builder: FlatBufferBuilder, id: Int) = builder.addOffset(0, id, 0)
        fun addClassificationMarking(builder: FlatBufferBuilder, classificationMarking: Int) = builder.addOffset(1, classificationMarking, 0)
        fun addIdAirfieldSlot(builder: FlatBufferBuilder, idAirfieldSlot: Int) = builder.addOffset(2, idAirfieldSlot, 0)
        fun addStatus(builder: FlatBufferBuilder, status: Byte) = builder.addByte(3, status, 0)
        fun addOccupied(builder: FlatBufferBuilder, occupied: Boolean) = builder.addBoolean(4, occupied, false)
        fun addConsumer(builder: FlatBufferBuilder, consumer: Int) = builder.addOffset(5, consumer, 0)
        fun addOccAircraftMDS(builder: FlatBufferBuilder, occAircraftMds: Int) = builder.addOffset(6, occAircraftMds, 0)
        fun addOccTailNumber(builder: FlatBufferBuilder, occTailNumber: Int) = builder.addOffset(7, occTailNumber, 0)
        fun addCallSigns(builder: FlatBufferBuilder, callSigns: Int) = builder.addOffset(8, callSigns, 0)
        fun createCallSignsVector(builder: FlatBufferBuilder, data: IntArray) : Int {
            builder.startVector(4, data.size, 4)
            for (i in data.size - 1 downTo 0) {
                builder.addOffset(data[i])
            }
            return builder.endVector()
        }
        fun startCallSignsVector(builder: FlatBufferBuilder, numElems: Int) = builder.startVector(4, numElems, 4)
        fun addMissionId(builder: FlatBufferBuilder, missionId: Int) = builder.addOffset(9, missionId, 0)
        fun addNumAircraft(builder: FlatBufferBuilder, numAircraft: Int) = builder.addInt(10, numAircraft, 0)
        fun addOccStartTime(builder: FlatBufferBuilder, occStartTime: Int) = builder.addOffset(11, occStartTime, 0)
        fun addResAircraftMDS(builder: FlatBufferBuilder, resAircraftMds: Int) = builder.addOffset(12, resAircraftMds, 0)
        fun addResTailNumber(builder: FlatBufferBuilder, resTailNumber: Int) = builder.addOffset(13, resTailNumber, 0)
        fun addResType(builder: FlatBufferBuilder, resType: Int) = builder.addOffset(14, resType, 0)
        fun addResReason(builder: FlatBufferBuilder, resReason: Int) = builder.addOffset(15, resReason, 0)
        fun addResMissionId(builder: FlatBufferBuilder, resMissionId: Int) = builder.addOffset(16, resMissionId, 0)
        fun addStartTime(builder: FlatBufferBuilder, startTime: Int) = builder.addOffset(17, startTime, 0)
        fun addEndTime(builder: FlatBufferBuilder, endTime: Int) = builder.addOffset(18, endTime, 0)
        fun addTargetTime(builder: FlatBufferBuilder, targetTime: Int) = builder.addOffset(19, targetTime, 0)
        fun addIdArrSortie(builder: FlatBufferBuilder, idArrSortie: Int) = builder.addOffset(20, idArrSortie, 0)
        fun addIdDepSortie(builder: FlatBufferBuilder, idDepSortie: Int) = builder.addOffset(21, idDepSortie, 0)
        fun addAltArrSortieId(builder: FlatBufferBuilder, altArrSortieId: Int) = builder.addOffset(22, altArrSortieId, 0)
        fun addAltDepSortieId(builder: FlatBufferBuilder, altDepSortieId: Int) = builder.addOffset(23, altDepSortieId, 0)
        fun addReqComment(builder: FlatBufferBuilder, reqComment: Int) = builder.addOffset(24, reqComment, 0)
        fun addAppComment(builder: FlatBufferBuilder, appComment: Int) = builder.addOffset(25, appComment, 0)
        fun addReqOrg(builder: FlatBufferBuilder, reqOrg: Int) = builder.addOffset(26, reqOrg, 0)
        fun addReqInitials(builder: FlatBufferBuilder, reqInitials: Int) = builder.addOffset(27, reqInitials, 0)
        fun addAppOrg(builder: FlatBufferBuilder, appOrg: Int) = builder.addOffset(28, appOrg, 0)
        fun addAppInitials(builder: FlatBufferBuilder, appInitials: Int) = builder.addOffset(29, appInitials, 0)
        fun addCreatedAt(builder: FlatBufferBuilder, createdAt: Int) = builder.addOffset(30, createdAt, 0)
        fun addCreatedBy(builder: FlatBufferBuilder, createdBy: Int) = builder.addOffset(31, createdBy, 0)
        fun addSourceDL(builder: FlatBufferBuilder, sourceDl: Int) = builder.addOffset(32, sourceDl, 0)
        fun addSource(builder: FlatBufferBuilder, source: Int) = builder.addOffset(33, source, 0)
        fun addOrigin(builder: FlatBufferBuilder, origin: Int) = builder.addOffset(34, origin, 0)
        fun addOrigNetwork(builder: FlatBufferBuilder, origNetwork: Int) = builder.addOffset(35, origNetwork, 0)
        fun addDataMode(builder: FlatBufferBuilder, dataMode: Byte) = builder.addByte(36, dataMode, 0)
        fun endAirfieldSlotConsumption_Abridged(builder: FlatBufferBuilder) : Int {
            val o = builder.endTable()
            return o
        }
        fun finishAirfieldSlotConsumptionAbridgedBuffer(builder: FlatBufferBuilder, offset: Int) = builder.finish(offset, "AIRF")
        fun finishSizePrefixedAirfieldSlotConsumption_AbridgedBuffer(builder: FlatBufferBuilder, offset: Int) = builder.finishSizePrefixed(offset, "AIRF")
    }
}
