// automatically generated by the FlatBuffers compiler, do not modify

import com.google.flatbuffers.BaseVector
import com.google.flatbuffers.BooleanVector
import com.google.flatbuffers.ByteVector
import com.google.flatbuffers.Constants
import com.google.flatbuffers.DoubleVector
import com.google.flatbuffers.FlatBufferBuilder
import com.google.flatbuffers.FloatVector
import com.google.flatbuffers.LongVector
import com.google.flatbuffers.StringVector
import com.google.flatbuffers.Struct
import com.google.flatbuffers.Table
import com.google.flatbuffers.UnionVector
import java.nio.ByteBuffer
import java.nio.ByteOrder
import kotlin.math.sign

/**
 * /// Model representation of space weather/solar, geomagnetic, and radiation belt indices.
 */
@Suppress("unused")
class SGI_Ingest : Table() {

    fun __init(_i: Int, _bb: ByteBuffer)  {
        __reset(_i, _bb)
    }
    fun __assign(_i: Int, _bb: ByteBuffer) : SGI_Ingest {
        __init(_i, _bb)
        return this
    }
    /**
     * Unique identifier of the record, auto-generated by the system.
     * Example: /// Example: SGI-ID
     * Constraints: Minimum length = 1, Maximum length = 36
     */
    val id : String?
        get() {
            val o = __offset(4)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val idAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(4, 1)
    fun idInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 4, 1)
    /**
     * Classification marking of the data in IC/CAPCO Portion-marked format.
     * Example: /// Example: U
     * Constraints: Minimum length = 1, Maximum length = 128
     */
    val classificationMarking : String?
        get() {
            val o = __offset(6)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val classificationMarkingAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(6, 1)
    fun classificationMarkingInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 6, 1)
    /**
     * ISO8601 UTC Time the data was received and processed from the source. Typically a source provides data for a date window with each transmission including past, present, and future predicted values.
     * Example: /// Example: 2018-01-01T16:00:00.123Z
     * Constraints: No constraints specified.
     */
    val effectiveDate : String?
        get() {
            val o = __offset(8)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val effectiveDateAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(8, 1)
    fun effectiveDateInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 8, 1)
    /**
     * ISO8601 UTC Time of the index value. This could be a past, current, or future predicted value. Note: sgiDate defines the start time of the time window for this  data record.
     * Example: /// Example: 2018-01-01T16:00:00.123Z
     * Constraints: No constraints specified.
     */
    val sgiDate : String?
        get() {
            val o = __offset(10)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val sgiDateAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(10, 1)
    fun sgiDateInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 10, 1)
    /**
     * The type of data contained in this record (e.g. HASDM, JBH09, K-Index, PSD-dB, RBI, RFI-SFU, etc).
     * Example: /// Example: JBH09
     * Constraints: Minimum length = 0, Maximum length = 32
     */
    val type : String?
        get() {
            val o = __offset(12)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val typeAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(12, 1)
    fun typeInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 12, 1)
    /**
     * State indicating Issued (I), Nowcast (N), or Predicted (P) values for this record.
     * Example: /// Example: I
     * Constraints: Minimum length = 0, Maximum length = 1
     */
    val state : Byte
        get() {
            val o = __offset(14)
            return if(o != 0) bb.get(o + bb_pos) else 0
        }
    /**
     * The name/location of the station that collected the geomagnetic data for this record.
     * Example: /// Example: Boulder
     * Constraints: Minimum length = 0, Maximum length = 24
     */
    val stationName : String?
        get() {
            val o = __offset(16)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val stationNameAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(16, 1)
    fun stationNameInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 16, 1)
    /**
     * Unique identifier of the reporting sensor.
     * Example: /// Example: 57c96c97-e076-48af-a068-73ee2cb37e65
     * Constraints: Minimum length = 0, Maximum length = 36
     */
    val idSensor : String?
        get() {
            val o = __offset(18)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val idSensorAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(18, 1)
    fun idSensorInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 18, 1)
    /**
     * Optional identifier provided by the reporting source to indicate the sensor identifier which produced this data. This may be an internal identifier and not necessarily a valid sensor ID.
     * Example: /// Example: ORIGSENSOR-ID
     * Constraints: Minimum length = 0, Maximum length = 64
     */
    val origSensorId : String?
        get() {
            val o = __offset(20)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val origSensorIdAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(20, 1)
    fun origSensorIdInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 20, 1)
    /**
     * The transmitted DCA mode of the record (1-3).
     * Example: /// Example: 1
     * Constraints: No constraints specified.
     */
    val mode : Int
        get() {
            val o = __offset(22)
            return if(o != 0) bb.getInt(o + bb_pos) else 0
        }
    /**
     * The precedence of data in this record (O = Immediate, P = Priority, R = Routine, Y = Emergency, Z = Flash).
     * Example: /// Example: R
     * Constraints: Minimum length = 0, Maximum length = 1
     */
    val precedence : Byte
        get() {
            val o = __offset(24)
            return if(o != 0) bb.get(o + bb_pos) else 0
        }
    /**
     * Array containing the degree of the temperature coefficients. The coeffDegree and coeffOrder arrays must be the same length.
     * Example: /// Example: [1, 2, 3]
     * Constraints: No constraints specified.
     */
    fun coeffDegree(j: Int) : String? {
        val o = __offset(26)
        return if (o != 0) {
            __string(__vector(o) + j * 4)
        } else {
            null
        }
    }
    val coeffDegreeLength : Int
        get() {
            val o = __offset(26); return if (o != 0) __vector_len(o) else 0
        }
    /**
     * Array containing the order of the temperature coefficients. The coeffDegree and coeffOrder arrays must be the same length.
     * Example: /// Example: [1, 2, 3]
     * Constraints: No constraints specified.
     */
    fun coeffOrder(j: Int) : String? {
        val o = __offset(28)
        return if (o != 0) {
            __string(__vector(o) + j * 4)
        } else {
            null
        }
    }
    val coeffOrderLength : Int
        get() {
            val o = __offset(28); return if (o != 0) __vector_len(o) else 0
        }
    /**
     * Array containing the cosine spherical-harmonic coefficients for Exospheric temperature (DTC) difference.  Each array element corresponds to the positional index of the coeffDegree and coeffOrder arrays.
     * Example: /// Example: [1.23, 342.3, 1.32]
     * Constraints: No constraints specified.
     */
    fun ctce(j: Int) : String? {
        val o = __offset(30)
        return if (o != 0) {
            __string(__vector(o) + j * 4)
        } else {
            null
        }
    }
    val ctceLength : Int
        get() {
            val o = __offset(30); return if (o != 0) __vector_len(o) else 0
        }
    /**
     * Array containing the sine spherical-harmonic coefficients for Exospheric temperature (DTC) difference.  Each array element corresponds to the positional index of the coeffDegree and coeffOrder arrays.
     * Example: /// Example: [1.23, 342.3, 1.32]
     * Constraints: No constraints specified.
     */
    fun stce(j: Int) : String? {
        val o = __offset(32)
        return if (o != 0) {
            __string(__vector(o) + j * 4)
        } else {
            null
        }
    }
    val stceLength : Int
        get() {
            val o = __offset(32); return if (o != 0) __vector_len(o) else 0
        }
    /**
     * Array containing the cosine spherical-harmonic coefficients for Inflection temperature (DTX) difference.  Each array element corresponds to the positional index of the coeffDegree and coeffOrder arrays.
     * Example: /// Example: [1.23, 342.3, 1.32]
     * Constraints: No constraints specified.
     */
    fun ctci(j: Int) : String? {
        val o = __offset(34)
        return if (o != 0) {
            __string(__vector(o) + j * 4)
        } else {
            null
        }
    }
    val ctciLength : Int
        get() {
            val o = __offset(34); return if (o != 0) __vector_len(o) else 0
        }
    /**
     * Array containing the sine spherical harmonic coefficients for Inflection temperature (DTX) difference.  Each array element corresponds to the positional index of the coeffDegree and coeffOrder arrays.
     * Example: /// Example: [1.23, 342.3, 1.32]
     * Constraints: No constraints specified.
     */
    fun stci(j: Int) : String? {
        val o = __offset(36)
        return if (o != 0) {
            __string(__vector(o) + j * 4)
        } else {
            null
        }
    }
    val stciLength : Int
        get() {
            val o = __offset(36); return if (o != 0) __vector_len(o) else 0
        }
    /**
     * Extreme Ultraviolet (EUV) proxy, E10.7, in x10-22 Watts per meter squared per Hertz, is the integrated solar EUV energy flux at the top of atmosphere and normalized to solar flux units.
     * Example: /// Example: 1.23
     * Constraints: No constraints specified.
     */
    val e10 : Double
        get() {
            val o = __offset(38)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * E54 (E10-Bar), in x10-22 Watts per meter squared per Hertz, uses the past 54-days E10 values to determine the E10 average.
     * Example: /// Example: 1.23
     * Constraints: No constraints specified.
     */
    val e54 : Double
        get() {
            val o = __offset(40)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Daily S10.7 index for >200 km heating of O by solar chromosphere. 28.4-30.4 nm emissions in x10-22 Watts per meter squared per Hertz.
     * Example: /// Example: 1.23
     * Constraints: No constraints specified.
     */
    val s10 : Double
        get() {
            val o = __offset(42)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * 54 day S10.7 index for >200 km heating of O by solar chromosphere. 28.4-30.4 nm emissions in x10-22 Watts per meter squared per Hertz.
     * Example: /// Example: 1.23
     * Constraints: No constraints specified.
     */
    val s54 : Double
        get() {
            val o = __offset(44)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Daily M10.7 index for 100-110 km heating of O2 by solar photosphere. 160 nm SRC emissions in x10-22 Watts per meter squared per Hertz.
     * Example: /// Example: 1.23
     * Constraints: No constraints specified.
     */
    val m10 : Double
        get() {
            val o = __offset(46)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * 54 day M10.7 index for 100-110 km heating of O2 by solar photosphere. 160 nm SRC emissions in x10-22 Watts per meter squared per Hertz.
     * Example: /// Example: 1.23
     * Constraints: No constraints specified.
     */
    val m54 : Double
        get() {
            val o = __offset(48)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Daily Y10.7 index for 85-90 km heating of N2, O2, H2O, NO by solar coronal. 0.1-0.8 nm and Lya 121 nm emissions in x10-22 Watts per meter squared per Hertz.
     * Example: /// Example: 1.23
     * Constraints: No constraints specified.
     */
    val y10 : Double
        get() {
            val o = __offset(50)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * 54 day Y10.7 index for 85-90 km heating of N2, O2, H2O, NO by solar coronal. 0.1-0.8 nm and Lya 121 nm emissions in x10-22 Watts per meter squared per Hertz.
     * Example: /// Example: 1.23
     * Constraints: No constraints specified.
     */
    val y54 : Double
        get() {
            val o = __offset(52)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Daily solar 10.7 cm radio flux in x10-22 Watts per meter squared per Hertz.
     * Example: /// Example: 1.23
     * Constraints: No constraints specified.
     */
    val f10 : Double
        get() {
            val o = __offset(54)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * 54 day solar 10.7 cm radio flux in x10-22 Watts per meter squared per Hertz.
     * Example: /// Example: 1.23
     * Constraints: No constraints specified.
     */
    val f54 : Double
        get() {
            val o = __offset(56)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * 81 day solar 10.7 cm radio flux in x10-22 Watts per meter squared per Hertz.
     * Example: /// Example: 1.23
     * Constraints: No constraints specified.
     */
    val f81 : Double
        get() {
            val o = __offset(58)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Ap is the planetary geomagnetic 2 nT index (00-21 UT) for the timespan specified in apDuration. If apDuration is null, a 3 hour duration should be assumed.
     * Example: /// Example: 1.23
     * Constraints: No constraints specified.
     */
    val ap : Double
        get() {
            val o = __offset(60)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * The time, in hours, for which the Ap index value is valid. If null, a span of 3 hours is assumed.
     * Example: /// Example: 3
     * Constraints: No constraints specified.
     */
    val apDuration : Int
        get() {
            val o = __offset(62)
            return if(o != 0) bb.getInt(o + bb_pos) else 0
        }
    /**
     * The maximum measured K-Index at the associated station during the kpDuration timespan. The K-Index is a unitless measure (0 - 9) of the deviation in the Earth's magnetic field from normal at the station geographic location, with 0 indicating the absence of geomagnetic disturbance, and 9 indicating the most significant disturbance. If kpDuration is null, a 3 hour duration should be assumed.
     * Example: /// Example: 1
     * Constraints: No constraints specified.
     */
    val kIndex : Int
        get() {
            val o = __offset(64)
            return if(o != 0) bb.getInt(o + bb_pos) else 0
        }
    /**
     * The Planetary K-index (Kp) over the kpDuration timespan. The Kp-Index is the average K-Index for the entire Earth, utilizing a unitless scale (0-9, in incremenets of 1/3), with 0 indicating the absence of geomagnetic disturbance, and 9 indicating the most significant disturbance. If kpDuration is null, a 3 hour duration should be assumed.
     * Example: /// Example: 4.66
     * Constraints: No constraints specified.
     */
    val kp : Double
        get() {
            val o = __offset(66)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * The time, in hours, over which the K, Kp, and/or gamma index values are measured.  If null, a span of 3 hours is assumed.
     * Example: /// Example: 3
     * Constraints: No constraints specified.
     */
    val kpDuration : Int
        get() {
            val o = __offset(68)
            return if(o != 0) bb.getInt(o + bb_pos) else 0
        }
    /**
     * The maximum measured gamma deflection during the kpDuration timespan. If kpDuration is null, a 3 hour duration should be assumed.
     * Example: /// Example: 25
     * Constraints: No constraints specified.
     */
    val gamma : Int
        get() {
            val o = __offset(70)
            return if(o != 0) bb.getInt(o + bb_pos) else 0
        }
    /**
     * Disturbance Storm Time geomagnetic index in nT.
     * Example: /// Example: 1.23
     * Constraints: No constraints specified.
     */
    val dst : Double
        get() {
            val o = __offset(72)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * delta exospheric temperature correction in units of K.
     * Example: /// Example: 1.23
     * Constraints: No constraints specified.
     */
    val dtc : Double
        get() {
            val o = __offset(74)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Region code for the associated radiation belt index. This is the code associated with the corresponding radiation belt location. See the provider card for reference to specific region code definitions.
     * Example: /// Example: 2
     * Constraints: No constraints specified.
     */
    val rbRegionCode : Int
        get() {
            val o = __offset(76)
            return if(o != 0) bb.getInt(o + bb_pos) else 0
        }
    /**
     * The value of the radiation belt index. This is the ratio of current intensity of a radiation belt to long-term average value. It's long-term average should be close to 1. Depending on the type of belt sensor, this ratio may measure Flux (number of particles / (cm^2 sec energy solid-angle)), dose rate (rad per second), or relative counts of particles per time (counts per second). The index value may also be normalized, the normalization value typically represents an average of the sensor measurements taken within a region over a given time interval. See the normFactor field for the specific normalization factor, if provided.
     * Example: /// Example: 1.02947164506
     * Constraints: No constraints specified.
     */
    val rbIndex : Double
        get() {
            val o = __offset(78)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * The normalization factor that has already been applied to the index value prior to record ingest. Typically used to normalize the index value to a particular interval. Units of the normalization factor may vary depending on the provider of this data (REACH, POES, CEASE3, etc.).
     * Example: /// Example: 2.12679e-07
     * Constraints: No constraints specified.
     */
    val normFactor : Double
        get() {
            val o = __offset(80)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * The timespan over which the associated radiation belt index is factored. If rbDuration is null, a 24 hour duration should be assumed. Note: rbDuration defines the length of the time window for this data record. The time window start time is defined by sgiDate, and the time window end time is defined by sgiDate plus rbDuration.
     * Example: /// Example: 24
     * Constraints: No constraints specified.
     */
    val rbDuration : Int
        get() {
            val o = __offset(82)
            return if(o != 0) bb.getInt(o + bb_pos) else 0
        }
    /**
     * Signal analyzer's input attenuation level, in decibels. Attenuation is a setting on the hardware that measures the power of a signal.
     * Example: /// Example: 5.1
     * Constraints: No constraints specified.
     */
    val analyzerAttenuation : Double
        get() {
            val o = __offset(84)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Observed baseline values of the frequencies specified in the frequencies field, in solar flux units. The baseline values will be used to help detect abnormal readings from the sun that might indicate a flare or other solar activity.
     * Example: /// Example: [15, 32, 25, 134, 0, 6, 19, 8]
     * Constraints: No constraints specified.
     */
    fun observedBaseline(j: Int) : String? {
        val o = __offset(86)
        return if (o != 0) {
            __string(__vector(o) + j * 4)
        } else {
            null
        }
    }
    val observedBaselineLength : Int
        get() {
            val o = __offset(86); return if (o != 0) __vector_len(o) else 0
        }
    /**
     * Array of individual power spectral density (PSD) frequencies of the signal, in megahertz. This array should correspond with the same-sized array of powers.
     * Example: /// Example: [25.0, 25.125, 25.25, 25.375, 25.5, 25.625, 25.75, 25.875]
     * Constraints: No constraints specified.
     */
    fun frequencies(j: Int) : String? {
        val o = __offset(88)
        return if (o != 0) {
            __string(__vector(o) + j * 4)
        } else {
            null
        }
    }
    val frequenciesLength : Int
        get() {
            val o = __offset(88); return if (o != 0) __vector_len(o) else 0
        }
    /**
     * Array of individual power spectral density (PSD) powers of the signal, in watts. This array should correspond with the same-sized array of frequencies.
     * Example: /// Example: [67.1, 65.2, 68.1, 74.3, 68.1, 96.4, 97.3, 68.1]
     * Constraints: No constraints specified.
     */
    fun powers(j: Int) : String? {
        val o = __offset(90)
        return if (o != 0) {
            __string(__vector(o) + j * 4)
        } else {
            null
        }
    }
    val powersLength : Int
        get() {
            val o = __offset(90); return if (o != 0) __vector_len(o) else 0
        }
    /**
     * Optional URI location in the document repository of the raw file parsed by the system to produce this record. To download the raw file, prepend https://udl-hostname/scs/download?id= to this value.
     * Example: /// Example: rawFileURI
     * Constraints: Minimum length = 0, Maximum length = 256
     */
    val rawFileUri : String?
        get() {
            val o = __offset(92)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val rawFileUriAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(92, 1)
    fun rawFileUriInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 92, 1)
    /**
     * Optional identifier to track a commercial or marketplace transaction executed to produce this data.
     * Example: /// Example: TRANSACTION-ID
     * Constraints: Minimum length = 0, Maximum length = 64
     */
    val transactionId : String?
        get() {
            val o = __offset(94)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val transactionIdAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(94, 1)
    fun transactionIdInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 94, 1)
    /**
     * Optional array of provider/source specific tags for this data, where each element is no longer than 32 characters, used for implementing data owner conditional access controls to restrict access to the data. Should be left null by data providers unless conditional access controls are coordinated with the UDL team.
     * Example: /// Example: ['PROVIDER_TAG1', 'PROVIDER_TAG2']
     * Constraints: No constraints specified.
     */
    fun tags(j: Int) : String? {
        val o = __offset(96)
        return if (o != 0) {
            __string(__vector(o) + j * 4)
        } else {
            null
        }
    }
    val tagsLength : Int
        get() {
            val o = __offset(96); return if (o != 0) __vector_len(o) else 0
        }
    /**
     * Source of the data.
     * Example: /// Example: Bluestaq
     * Constraints: Minimum length = 1, Maximum length = 64
     */
    val source : String?
        get() {
            val o = __offset(98)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val sourceAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(98, 1)
    fun sourceInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 98, 1)
    /**
     * Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
     * Example: /// Example: THIRD_PARTY_DATASOURCE
     * Constraints: Minimum length = 0, Maximum length = 64
     */
    val origin : String?
        get() {
            val o = __offset(100)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val originAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(100, 1)
    fun originInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 100, 1)
    /**
     * The originating source network on which this record was created, auto-populated by the system.
     * Example: /// Example: ORIG
     * Constraints: Minimum length = 1, Maximum length = 32
     */
    val origNetwork : String?
        get() {
            val o = __offset(102)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val origNetworkAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(102, 1)
    fun origNetworkInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 102, 1)
    /**
     * Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
     * EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
     * REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
     * SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
     * TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
     * Example: /// Example: TEST
     * Constraints: Minimum length = 1, Maximum length = 32
     */
    val dataMode : Byte
        get() {
            val o = __offset(104)
            return if(o != 0) bb.get(o + bb_pos) else 0
        }
    /**
     * Time the row was created in the database, auto-populated by the system.
     * Example: /// Example: 2018-01-01T16:00:00.123Z
     * Constraints: No constraints specified.
     */
    val createdAt : String?
        get() {
            val o = __offset(106)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val createdAtAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(106, 1)
    fun createdAtInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 106, 1)
    /**
     * Application user who created the row in the database, auto-populated by the system.
     * Example: /// Example: some.user
     * Constraints: Minimum length = 1, Maximum length = 64
     */
    val createdBy : String?
        get() {
            val o = __offset(108)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val createdByAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(108, 1)
    fun createdByInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 108, 1)
    companion object {
        fun validateVersion() = Constants.FLATBUFFERS_24_3_25()
        fun getRootAsSGI_Ingest(_bb: ByteBuffer): SGI_Ingest = getRootAsSGI_Ingest(_bb, SGI_Ingest())
        fun getRootAsSGI_Ingest(_bb: ByteBuffer, obj: SGI_Ingest): SGI_Ingest {
            _bb.order(ByteOrder.LITTLE_ENDIAN)
            return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb))
        }
        fun SGI_IngestBufferHasIdentifier(_bb: ByteBuffer) : Boolean = __has_identifier(_bb, "SGII")
        fun createSGI_Ingest(builder: FlatBufferBuilder, idOffset: Int, classificationMarkingOffset: Int, effectiveDateOffset: Int, sgiDateOffset: Int, typeOffset: Int, state: Byte, stationNameOffset: Int, idSensorOffset: Int, origSensorIdOffset: Int, mode: Int, precedence: Byte, coeffDegreeOffset: Int, coeffOrderOffset: Int, ctceOffset: Int, stceOffset: Int, ctciOffset: Int, stciOffset: Int, e10: Double, e54: Double, s10: Double, s54: Double, m10: Double, m54: Double, y10: Double, y54: Double, f10: Double, f54: Double, f81: Double, ap: Double, apDuration: Int, kIndex: Int, kp: Double, kpDuration: Int, gamma: Int, dst: Double, dtc: Double, rbRegionCode: Int, rbIndex: Double, normFactor: Double, rbDuration: Int, analyzerAttenuation: Double, observedBaselineOffset: Int, frequenciesOffset: Int, powersOffset: Int, rawFileUriOffset: Int, transactionIdOffset: Int, tagsOffset: Int, sourceOffset: Int, originOffset: Int, origNetworkOffset: Int, dataMode: Byte, createdAtOffset: Int, createdByOffset: Int) : Int {
            builder.startTable(53)
            addAnalyzerAttenuation(builder, analyzerAttenuation)
            addNormFactor(builder, normFactor)
            addRbIndex(builder, rbIndex)
            addDtc(builder, dtc)
            addDst(builder, dst)
            addKp(builder, kp)
            addAp(builder, ap)
            addF81(builder, f81)
            addF54(builder, f54)
            addF10(builder, f10)
            addY54(builder, y54)
            addY10(builder, y10)
            addM54(builder, m54)
            addM10(builder, m10)
            addS54(builder, s54)
            addS10(builder, s10)
            addE54(builder, e54)
            addE10(builder, e10)
            addCreatedBy(builder, createdByOffset)
            addCreatedAt(builder, createdAtOffset)
            addOrigNetwork(builder, origNetworkOffset)
            addOrigin(builder, originOffset)
            addSource(builder, sourceOffset)
            addTags(builder, tagsOffset)
            addTransactionId(builder, transactionIdOffset)
            addRawFileURI(builder, rawFileUriOffset)
            addPowers(builder, powersOffset)
            addFrequencies(builder, frequenciesOffset)
            addObservedBaseline(builder, observedBaselineOffset)
            addRbDuration(builder, rbDuration)
            addRbRegionCode(builder, rbRegionCode)
            addGamma(builder, gamma)
            addKpDuration(builder, kpDuration)
            addKIndex(builder, kIndex)
            addApDuration(builder, apDuration)
            addStci(builder, stciOffset)
            addCtci(builder, ctciOffset)
            addStce(builder, stceOffset)
            addCtce(builder, ctceOffset)
            addCoeffOrder(builder, coeffOrderOffset)
            addCoeffDegree(builder, coeffDegreeOffset)
            addMode(builder, mode)
            addOrigSensorId(builder, origSensorIdOffset)
            addIdSensor(builder, idSensorOffset)
            addStationName(builder, stationNameOffset)
            addType(builder, typeOffset)
            addSgiDate(builder, sgiDateOffset)
            addEffectiveDate(builder, effectiveDateOffset)
            addClassificationMarking(builder, classificationMarkingOffset)
            addId(builder, idOffset)
            addDataMode(builder, dataMode)
            addPrecedence(builder, precedence)
            addState(builder, state)
            return endSGI_Ingest(builder)
        }
        fun startSGI_Ingest(builder: FlatBufferBuilder) = builder.startTable(53)
        fun addId(builder: FlatBufferBuilder, id: Int) = builder.addOffset(0, id, 0)
        fun addClassificationMarking(builder: FlatBufferBuilder, classificationMarking: Int) = builder.addOffset(1, classificationMarking, 0)
        fun addEffectiveDate(builder: FlatBufferBuilder, effectiveDate: Int) = builder.addOffset(2, effectiveDate, 0)
        fun addSgiDate(builder: FlatBufferBuilder, sgiDate: Int) = builder.addOffset(3, sgiDate, 0)
        fun addType(builder: FlatBufferBuilder, type: Int) = builder.addOffset(4, type, 0)
        fun addState(builder: FlatBufferBuilder, state: Byte) = builder.addByte(5, state, 0)
        fun addStationName(builder: FlatBufferBuilder, stationName: Int) = builder.addOffset(6, stationName, 0)
        fun addIdSensor(builder: FlatBufferBuilder, idSensor: Int) = builder.addOffset(7, idSensor, 0)
        fun addOrigSensorId(builder: FlatBufferBuilder, origSensorId: Int) = builder.addOffset(8, origSensorId, 0)
        fun addMode(builder: FlatBufferBuilder, mode: Int) = builder.addInt(9, mode, 0)
        fun addPrecedence(builder: FlatBufferBuilder, precedence: Byte) = builder.addByte(10, precedence, 0)
        fun addCoeffDegree(builder: FlatBufferBuilder, coeffDegree: Int) = builder.addOffset(11, coeffDegree, 0)
        fun createCoeffDegreeVector(builder: FlatBufferBuilder, data: IntArray) : Int {
            builder.startVector(4, data.size, 4)
            for (i in data.size - 1 downTo 0) {
                builder.addOffset(data[i])
            }
            return builder.endVector()
        }
        fun startCoeffDegreeVector(builder: FlatBufferBuilder, numElems: Int) = builder.startVector(4, numElems, 4)
        fun addCoeffOrder(builder: FlatBufferBuilder, coeffOrder: Int) = builder.addOffset(12, coeffOrder, 0)
        fun createCoeffOrderVector(builder: FlatBufferBuilder, data: IntArray) : Int {
            builder.startVector(4, data.size, 4)
            for (i in data.size - 1 downTo 0) {
                builder.addOffset(data[i])
            }
            return builder.endVector()
        }
        fun startCoeffOrderVector(builder: FlatBufferBuilder, numElems: Int) = builder.startVector(4, numElems, 4)
        fun addCtce(builder: FlatBufferBuilder, ctce: Int) = builder.addOffset(13, ctce, 0)
        fun createCtceVector(builder: FlatBufferBuilder, data: IntArray) : Int {
            builder.startVector(4, data.size, 4)
            for (i in data.size - 1 downTo 0) {
                builder.addOffset(data[i])
            }
            return builder.endVector()
        }
        fun startCtceVector(builder: FlatBufferBuilder, numElems: Int) = builder.startVector(4, numElems, 4)
        fun addStce(builder: FlatBufferBuilder, stce: Int) = builder.addOffset(14, stce, 0)
        fun createStceVector(builder: FlatBufferBuilder, data: IntArray) : Int {
            builder.startVector(4, data.size, 4)
            for (i in data.size - 1 downTo 0) {
                builder.addOffset(data[i])
            }
            return builder.endVector()
        }
        fun startStceVector(builder: FlatBufferBuilder, numElems: Int) = builder.startVector(4, numElems, 4)
        fun addCtci(builder: FlatBufferBuilder, ctci: Int) = builder.addOffset(15, ctci, 0)
        fun createCtciVector(builder: FlatBufferBuilder, data: IntArray) : Int {
            builder.startVector(4, data.size, 4)
            for (i in data.size - 1 downTo 0) {
                builder.addOffset(data[i])
            }
            return builder.endVector()
        }
        fun startCtciVector(builder: FlatBufferBuilder, numElems: Int) = builder.startVector(4, numElems, 4)
        fun addStci(builder: FlatBufferBuilder, stci: Int) = builder.addOffset(16, stci, 0)
        fun createStciVector(builder: FlatBufferBuilder, data: IntArray) : Int {
            builder.startVector(4, data.size, 4)
            for (i in data.size - 1 downTo 0) {
                builder.addOffset(data[i])
            }
            return builder.endVector()
        }
        fun startStciVector(builder: FlatBufferBuilder, numElems: Int) = builder.startVector(4, numElems, 4)
        fun addE10(builder: FlatBufferBuilder, e10: Double) = builder.addDouble(17, e10, 0.0)
        fun addE54(builder: FlatBufferBuilder, e54: Double) = builder.addDouble(18, e54, 0.0)
        fun addS10(builder: FlatBufferBuilder, s10: Double) = builder.addDouble(19, s10, 0.0)
        fun addS54(builder: FlatBufferBuilder, s54: Double) = builder.addDouble(20, s54, 0.0)
        fun addM10(builder: FlatBufferBuilder, m10: Double) = builder.addDouble(21, m10, 0.0)
        fun addM54(builder: FlatBufferBuilder, m54: Double) = builder.addDouble(22, m54, 0.0)
        fun addY10(builder: FlatBufferBuilder, y10: Double) = builder.addDouble(23, y10, 0.0)
        fun addY54(builder: FlatBufferBuilder, y54: Double) = builder.addDouble(24, y54, 0.0)
        fun addF10(builder: FlatBufferBuilder, f10: Double) = builder.addDouble(25, f10, 0.0)
        fun addF54(builder: FlatBufferBuilder, f54: Double) = builder.addDouble(26, f54, 0.0)
        fun addF81(builder: FlatBufferBuilder, f81: Double) = builder.addDouble(27, f81, 0.0)
        fun addAp(builder: FlatBufferBuilder, ap: Double) = builder.addDouble(28, ap, 0.0)
        fun addApDuration(builder: FlatBufferBuilder, apDuration: Int) = builder.addInt(29, apDuration, 0)
        fun addKIndex(builder: FlatBufferBuilder, kIndex: Int) = builder.addInt(30, kIndex, 0)
        fun addKp(builder: FlatBufferBuilder, kp: Double) = builder.addDouble(31, kp, 0.0)
        fun addKpDuration(builder: FlatBufferBuilder, kpDuration: Int) = builder.addInt(32, kpDuration, 0)
        fun addGamma(builder: FlatBufferBuilder, gamma: Int) = builder.addInt(33, gamma, 0)
        fun addDst(builder: FlatBufferBuilder, dst: Double) = builder.addDouble(34, dst, 0.0)
        fun addDtc(builder: FlatBufferBuilder, dtc: Double) = builder.addDouble(35, dtc, 0.0)
        fun addRbRegionCode(builder: FlatBufferBuilder, rbRegionCode: Int) = builder.addInt(36, rbRegionCode, 0)
        fun addRbIndex(builder: FlatBufferBuilder, rbIndex: Double) = builder.addDouble(37, rbIndex, 0.0)
        fun addNormFactor(builder: FlatBufferBuilder, normFactor: Double) = builder.addDouble(38, normFactor, 0.0)
        fun addRbDuration(builder: FlatBufferBuilder, rbDuration: Int) = builder.addInt(39, rbDuration, 0)
        fun addAnalyzerAttenuation(builder: FlatBufferBuilder, analyzerAttenuation: Double) = builder.addDouble(40, analyzerAttenuation, 0.0)
        fun addObservedBaseline(builder: FlatBufferBuilder, observedBaseline: Int) = builder.addOffset(41, observedBaseline, 0)
        fun createObservedBaselineVector(builder: FlatBufferBuilder, data: IntArray) : Int {
            builder.startVector(4, data.size, 4)
            for (i in data.size - 1 downTo 0) {
                builder.addOffset(data[i])
            }
            return builder.endVector()
        }
        fun startObservedBaselineVector(builder: FlatBufferBuilder, numElems: Int) = builder.startVector(4, numElems, 4)
        fun addFrequencies(builder: FlatBufferBuilder, frequencies: Int) = builder.addOffset(42, frequencies, 0)
        fun createFrequenciesVector(builder: FlatBufferBuilder, data: IntArray) : Int {
            builder.startVector(4, data.size, 4)
            for (i in data.size - 1 downTo 0) {
                builder.addOffset(data[i])
            }
            return builder.endVector()
        }
        fun startFrequenciesVector(builder: FlatBufferBuilder, numElems: Int) = builder.startVector(4, numElems, 4)
        fun addPowers(builder: FlatBufferBuilder, powers: Int) = builder.addOffset(43, powers, 0)
        fun createPowersVector(builder: FlatBufferBuilder, data: IntArray) : Int {
            builder.startVector(4, data.size, 4)
            for (i in data.size - 1 downTo 0) {
                builder.addOffset(data[i])
            }
            return builder.endVector()
        }
        fun startPowersVector(builder: FlatBufferBuilder, numElems: Int) = builder.startVector(4, numElems, 4)
        fun addRawFileURI(builder: FlatBufferBuilder, rawFileUri: Int) = builder.addOffset(44, rawFileUri, 0)
        fun addTransactionId(builder: FlatBufferBuilder, transactionId: Int) = builder.addOffset(45, transactionId, 0)
        fun addTags(builder: FlatBufferBuilder, tags: Int) = builder.addOffset(46, tags, 0)
        fun createTagsVector(builder: FlatBufferBuilder, data: IntArray) : Int {
            builder.startVector(4, data.size, 4)
            for (i in data.size - 1 downTo 0) {
                builder.addOffset(data[i])
            }
            return builder.endVector()
        }
        fun startTagsVector(builder: FlatBufferBuilder, numElems: Int) = builder.startVector(4, numElems, 4)
        fun addSource(builder: FlatBufferBuilder, source: Int) = builder.addOffset(47, source, 0)
        fun addOrigin(builder: FlatBufferBuilder, origin: Int) = builder.addOffset(48, origin, 0)
        fun addOrigNetwork(builder: FlatBufferBuilder, origNetwork: Int) = builder.addOffset(49, origNetwork, 0)
        fun addDataMode(builder: FlatBufferBuilder, dataMode: Byte) = builder.addByte(50, dataMode, 0)
        fun addCreatedAt(builder: FlatBufferBuilder, createdAt: Int) = builder.addOffset(51, createdAt, 0)
        fun addCreatedBy(builder: FlatBufferBuilder, createdBy: Int) = builder.addOffset(52, createdBy, 0)
        fun endSGI_Ingest(builder: FlatBufferBuilder) : Int {
            val o = builder.endTable()
            return o
        }
        fun finishSGIIngestBuffer(builder: FlatBufferBuilder, offset: Int) = builder.finish(offset, "SGII")
        fun finishSizePrefixedSGI_IngestBuffer(builder: FlatBufferBuilder, offset: Int) = builder.finishSizePrefixed(offset, "SGII")
    }
}
