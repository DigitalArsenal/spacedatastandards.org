// automatically generated by the FlatBuffers compiler, do not modify

import com.google.flatbuffers.BaseVector
import com.google.flatbuffers.BooleanVector
import com.google.flatbuffers.ByteVector
import com.google.flatbuffers.Constants
import com.google.flatbuffers.DoubleVector
import com.google.flatbuffers.FlatBufferBuilder
import com.google.flatbuffers.FloatVector
import com.google.flatbuffers.LongVector
import com.google.flatbuffers.StringVector
import com.google.flatbuffers.Struct
import com.google.flatbuffers.Table
import com.google.flatbuffers.UnionVector
import java.nio.ByteBuffer
import java.nio.ByteOrder
import kotlin.math.sign

/**
 * /// Hazard contains information concerning the exposure of a geographic area to a Chemical, Biological, Radiological, or Nuclear (CBRN) contaminant. The Hazard schema includes the detection time and type of contamination as well as optional information regarding specific material properties, the extent of contamination, and identification of affected regions.
 */
@Suppress("unused")
class Hazard_Full : Table() {

    fun __init(_i: Int, _bb: ByteBuffer)  {
        __reset(_i, _bb)
    }
    fun __assign(_i: Int, _bb: ByteBuffer) : Hazard_Full {
        __init(_i, _bb)
        return this
    }
    /**
     * Unique identifier of the record, auto-generated by the system.
     * Example: /// Example: HAZARD-ID
     * Constraints: Minimum length = 1, Maximum length = 36
     */
    val id : String?
        get() {
            val o = __offset(4)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val idAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(4, 1)
    fun idInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 4, 1)
    /**
     * Classification marking of the data in IC/CAPCO Portion-marked format.
     * Example: /// Example: U
     * Constraints: Minimum length = 1, Maximum length = 128
     */
    val classificationMarking : String?
        get() {
            val o = __offset(6)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val classificationMarkingAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(6, 1)
    fun classificationMarkingInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 6, 1)
    /**
     * The type of hazard (Chemical, Biological, Radiological, Nuclear) detect associated with this record.
     * Example: /// Example: Chemical
     * Constraints: Minimum length = 1, Maximum length = 32
     */
    val detectType : String?
        get() {
            val o = __offset(8)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val detectTypeAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(8, 1)
    fun detectTypeInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 8, 1)
    /**
     * The detect time, in ISO 8601 UTC format, with millisecond precision.
     * Example: /// Example: 2022-03-07T14:51:39.653Z
     * Constraints: No constraints specified.
     */
    val detectTime : String?
        get() {
            val o = __offset(10)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val detectTimeAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(10, 1)
    fun detectTimeInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 10, 1)
    /**
     * Flag indicating whether this detection is harmful to humans.
     * Example: /// Example: False
     * Constraints: No constraints specified.
     */
    val harmful : Boolean
        get() {
            val o = __offset(12)
            return if(o != 0) 0.toByte() != bb.get(o + bb_pos) else false
        }
    /**
     * Array of the specific alarms associated with this detection. The alarms and alarmValues arrays must contain the same number of elements.
     * Example: /// Example: ['Alarm1', 'Alarm2']
     * Constraints: No constraints specified.
     */
    fun alarms(j: Int) : String? {
        val o = __offset(14)
        return if (o != 0) {
            __string(__vector(o) + j * 4)
        } else {
            null
        }
    }
    val alarmsLength : Int
        get() {
            val o = __offset(14); return if (o != 0) __vector_len(o) else 0
        }
    /**
     * Array of the values that correspond to each of the alarms contained in alarms. The alarms and alarmValues arrays must contain the same number of elements.
     * Example: /// Example: [2.7, 2.9]
     * Constraints: No constraints specified.
     */
    fun alarmValues(j: Int) : String? {
        val o = __offset(16)
        return if (o != 0) {
            __string(__vector(o) + j * 4)
        } else {
            null
        }
    }
    val alarmValuesLength : Int
        get() {
            val o = __offset(16); return if (o != 0) __vector_len(o) else 0
        }
    /**
     * Array of the specific readings associated with this detection. The readings, readingUnits, and readingValues arrays must contain the same number of elements.
     * Example: /// Example: ['Rad1', 'Rad2']
     * Constraints: No constraints specified.
     */
    fun readings(j: Int) : String? {
        val o = __offset(18)
        return if (o != 0) {
            __string(__vector(o) + j * 4)
        } else {
            null
        }
    }
    val readingsLength : Int
        get() {
            val o = __offset(18); return if (o != 0) __vector_len(o) else 0
        }
    /**
     * Array of the units that correspond to each of the readingValues. The readings, readingUnits, and readingValues arrays must contain the same number of elements.
     * Example: /// Example: ['Gray', 'Gray']
     * Constraints: No constraints specified.
     */
    fun readingUnits(j: Int) : String? {
        val o = __offset(20)
        return if (o != 0) {
            __string(__vector(o) + j * 4)
        } else {
            null
        }
    }
    val readingUnitsLength : Int
        get() {
            val o = __offset(20); return if (o != 0) __vector_len(o) else 0
        }
    /**
     * Array of the values that correspond to each of the readings contained in readings. The readings, readingUnits, and readingValues arrays must contain the same number of elements.
     * Example: /// Example: [107.2, 124.1]
     * Constraints: No constraints specified.
     */
    fun readingValues(j: Int) : String? {
        val o = __offset(22)
        return if (o != 0) {
            __string(__vector(o) + j * 4)
        } else {
            null
        }
    }
    val readingValuesLength : Int
        get() {
            val o = __offset(22); return if (o != 0) __vector_len(o) else 0
        }
    /**
     * The specific material type (MT) or MT Code involved in this detection, when applicable. The material type is generally associated with radiological and/or nuclear detections. For further information, reference Nuclear Materials Management and Safeguards System (NMMSS) Users Guide Rev. 2.1.
     * Example: /// Example: 21
     * Constraints: Minimum length = 0, Maximum length = 48
     */
    val matType : String?
        get() {
            val o = __offset(24)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val matTypeAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(24, 1)
    fun matTypeInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 24, 1)
    /**
     * The specific Material Class for the material associated with this detect. The material class is generally associated with chemical and biological detections.
     * Example: /// Example: Nerve Agent
     * Constraints: Minimum length = 0, Maximum length = 64
     */
    val matClass : String?
        get() {
            val o = __offset(26)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val matClassAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(26, 1)
    fun matClassInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 26, 1)
    /**
     * The material common name associated with this detection.
     * Example: /// Example: VX
     * Constraints: Minimum length = 0, Maximum length = 64
     */
    val matName : String?
        get() {
            val o = __offset(28)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val matNameAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(28, 1)
    fun matNameInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 28, 1)
    /**
     * The Radiological Category (1 - 5) which applies to the material associated with this detection, according to the following definitions: 
     * Category 1: If not safely or securely managed, would be likely to cause permanent injury to a person who handled them or was otherwise in contact with them for more than a few minutes. It would probably be fatal to be close to this amount of unshielded material for a period of a few minutes to an hour. 
     * Category 2: If not safely or securely managed, could cause permanent injury to a person who handled them or was otherwise in contact with them for a short time (minutes to hours). It could possibly be fatal to be close to this amount of unshielded radioactive material for a period of hours to days. 
     * Category 3: If not safely or securely managed, could cause permanent injury to a person who handled them or was otherwise in contact with them for hours. It could possibly - although it is unlikely to be - fatal to be close to this amount of unshielded radioactive material for a period of days to weeks. 
     * Category 4: If not safely managed or securely protected, could possibly cause temporary injury to someone who handled them or was otherwise in contact with or close to them for a period of many weeks, though this is unlikely. It is very unlikely anyone would be permanently injured by this amount of radioactive material. 
     * Category 5: Cannot cause permanent injury. This category applies to x-ray fluorescence devices and electron capture devices.
     * Example: /// Example: 3
     * Constraints: No constraints specified.
     */
    val matCat : Int
        get() {
            val o = __offset(30)
            return if(o != 0) bb.getInt(o + bb_pos) else 0
        }
    /**
     * The CAS Registry Number, also referred to as CAS Number or CAS RN, associated with the this detection. The CAS Number is a unique numerical identifier assigned by the Chemical Abstracts Service (CAS), to every chemical substance described in the open scientific literature. It includes organic and inorganic compounds, minerals, isotopes, alloys, mixtures, and nonstructurable materials (UVCBs, substances of unknown or variable composition, complex reaction products, or biological origin). For further information, reference https://www.cas.org/cas-data/cas-registry.
     * Example: /// Example: 64-17-5
     * Constraints: Minimum length = 0, Maximum length = 24
     */
    val casRn : String?
        get() {
            val o = __offset(32)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val casRnAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(32, 1)
    fun casRnInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 32, 1)
    /**
     * Measure of the concentration of the material associated with this detection, in parts per million (units of contaminant mass per million parts of total mass).
     * Example: /// Example: 27129
     * Constraints: No constraints specified.
     */
    val ppm : Int
        get() {
            val o = __offset(34)
            return if(o != 0) bb.getInt(o + bb_pos) else 0
        }
    /**
     * Measure of density of the material associated with this detection, in kg/m^3.
     * Example: /// Example: 18900.2
     * Constraints: No constraints specified.
     */
    val density : Double
        get() {
            val o = __offset(36)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Measure of radioactive concentration of the material associated with this detection, in becquerels/m^3. One becquerel (Bq) is equal to one nuclear decay per second.
     * Example: /// Example: 1.31
     * Constraints: No constraints specified.
     */
    val radCtrn : Double
        get() {
            val o = __offset(38)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Chemical Agent Monitor (CAM) G-type agent measurement, in number of display bars. In G-mode, CAMs monitor for G-series nerve agents.
     * Example: /// Example: 2.5
     * Constraints: No constraints specified.
     */
    val gBar : Double
        get() {
            val o = __offset(40)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Chemical Agent Monitor (CAM) H-type agent measurement, in number of display bars. In H-mode, CAMs monitor for blister agents.
     * Example: /// Example: 3.1
     * Constraints: No constraints specified.
     */
    val hBar : Double
        get() {
            val o = __offset(42)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * The Atomic Number of the material associated with this detection.
     * Example: /// Example: 92
     * Constraints: No constraints specified.
     */
    val z : Int
        get() {
            val o = __offset(44)
            return if(o != 0) bb.getInt(o + bb_pos) else 0
        }
    /**
     * The (rounded) Mass Number of the material associated with this detection. The rounded value is the mass number of the most abundant isotope of the element.
     * Example: /// Example: 238
     * Constraints: No constraints specified.
     */
    val a : Int
        get() {
            val o = __offset(46)
            return if(o != 0) bb.getInt(o + bb_pos) else 0
        }
    /**
     * The specific bottle ID associated with this detection.
     * Example: /// Example: 6264
     * Constraints: Minimum length = 0, Maximum length = 16
     */
    val bottleId : String?
        get() {
            val o = __offset(48)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val bottleIdAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(48, 1)
    fun bottleIdInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 48, 1)
    /**
     * The applicable channel involved in this biological material detection (e.g. Digestive, Eyes, Respiratory, Skin, etc.) .
     * Example: /// Example: Skin
     * Constraints: Minimum length = 0, Maximum length = 64
     */
    val channel : String?
        get() {
            val o = __offset(50)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val channelAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(50, 1)
    fun channelInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 50, 1)
    /**
     * The known or projected hazard duration, in seconds, associated with this material detection.
     * Example: /// Example: 14400
     * Constraints: No constraints specified.
     */
    val duration : Int
        get() {
            val o = __offset(52)
            return if(o != 0) bb.getInt(o + bb_pos) else 0
        }
    /**
     * The radioactivity measurement of the material associated with this detection, in becquerels (Bq). One becquerel (Bq) is equal to one nuclear decay per second.
     * Example: /// Example: 120.1
     * Constraints: No constraints specified.
     */
    val activity : Double
        get() {
            val o = __offset(54)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * The deposition measurement of the contaminant to surface area, in kg/m^2.
     * Example: /// Example: 1.084
     * Constraints: No constraints specified.
     */
    val dep : Double
        get() {
            val o = __offset(56)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * The deposition concentration of the contaminant to surface area, in becquerels/m^2.
     * Example: /// Example: 86.1
     * Constraints: No constraints specified.
     */
    val depCtrn : Double
        get() {
            val o = __offset(58)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Ratio of the chemical substance mass to the total mass of the mixture.
     * Example: /// Example: 0.029
     * Constraints: No constraints specified.
     */
    val massFrac : Double
        get() {
            val o = __offset(60)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * The dose associated with this detection, in gray. Dose is the measure of the energy deposited in matter by ionizing radiation per unit mass. One gray is defined as one Joule of energy absorbed per kilogram of matter.
     * Example: /// Example: 1.12
     * Constraints: No constraints specified.
     */
    val dose : Double
        get() {
            val o = __offset(62)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * The concentration time, in (kg/sec)/m^3, associated with this material detection.
     * Example: /// Example: 1.077
     * Constraints: No constraints specified.
     */
    val ctrnTime : Double
        get() {
            val o = __offset(64)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * The dose rate associated with this detection, in gray/sec. One gray is defined as one Joule of energy absorbed per kilogram of matter.
     * Example: /// Example: 1.0000001865
     * Constraints: No constraints specified.
     */
    val doseRate : Double
        get() {
            val o = __offset(66)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * ID of the Point of Interest (POI) record related to this hazard record.
     * Example: /// Example: POI-ID
     * Constraints: Minimum length = 0, Maximum length = 36
     */
    val idPoi : String?
        get() {
            val o = __offset(68)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val idPoiAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(68, 1)
    fun idPoiInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 68, 1)
    /**
     * ID of the Track record related to this hazard record.
     * Example: /// Example: TRACK-ID
     * Constraints: Minimum length = 0, Maximum length = 36
     */
    val idTrack : String?
        get() {
            val o = __offset(70)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val idTrackAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(70, 1)
    fun idTrackInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 70, 1)
    /**
     * Time the row was created in the database, auto-populated by the system.
     * Example: /// Example: 2018-01-01T16:00:00.123Z
     * Constraints: No constraints specified.
     */
    val createdAt : String?
        get() {
            val o = __offset(72)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val createdAtAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(72, 1)
    fun createdAtInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 72, 1)
    /**
     * Application user who created the row in the database, auto-populated by the system.
     * Example: /// Example: some.user
     * Constraints: Minimum length = 1, Maximum length = 64
     */
    val createdBy : String?
        get() {
            val o = __offset(74)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val createdByAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(74, 1)
    fun createdByInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 74, 1)
    /**
     * Source of the data.
     * Example: /// Example: Bluestaq
     * Constraints: Minimum length = 1, Maximum length = 36
     */
    val source : String?
        get() {
            val o = __offset(76)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val sourceAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(76, 1)
    fun sourceInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 76, 1)
    /**
     * Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
     * Example: /// Example: THIRD_PARTY_DATASOURCE
     * Constraints: Minimum length = 0, Maximum length = 64
     */
    val origin : String?
        get() {
            val o = __offset(78)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val originAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(78, 1)
    fun originInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 78, 1)
    /**
     * The originating source network on which this record was created, auto-populated by the system.
     * Example: /// Example: ORIG
     * Constraints: Minimum length = 1, Maximum length = 32
     */
    val origNetwork : String?
        get() {
            val o = __offset(80)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val origNetworkAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(80, 1)
    fun origNetworkInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 80, 1)
    /**
     * Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
     * EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
     * REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
     * SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
     * TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
     * Example: /// Example: TEST
     * Constraints: Minimum length = 1, Maximum length = 32
     */
    val dataMode : Byte
        get() {
            val o = __offset(82)
            return if(o != 0) bb.get(o + bb_pos) else 0
        }
    companion object {
        fun validateVersion() = Constants.FLATBUFFERS_24_3_25()
        fun getRootAsHazard_Full(_bb: ByteBuffer): Hazard_Full = getRootAsHazard_Full(_bb, Hazard_Full())
        fun getRootAsHazard_Full(_bb: ByteBuffer, obj: Hazard_Full): Hazard_Full {
            _bb.order(ByteOrder.LITTLE_ENDIAN)
            return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb))
        }
        fun Hazard_FullBufferHasIdentifier(_bb: ByteBuffer) : Boolean = __has_identifier(_bb, "HAZA")
        fun createHazard_Full(builder: FlatBufferBuilder, idOffset: Int, classificationMarkingOffset: Int, detectTypeOffset: Int, detectTimeOffset: Int, harmful: Boolean, alarmsOffset: Int, alarmValuesOffset: Int, readingsOffset: Int, readingUnitsOffset: Int, readingValuesOffset: Int, matTypeOffset: Int, matClassOffset: Int, matNameOffset: Int, matCat: Int, casRnOffset: Int, ppm: Int, density: Double, radCtrn: Double, gBar: Double, hBar: Double, z: Int, a: Int, bottleIdOffset: Int, channelOffset: Int, duration: Int, activity: Double, dep: Double, depCtrn: Double, massFrac: Double, dose: Double, ctrnTime: Double, doseRate: Double, idPoiOffset: Int, idTrackOffset: Int, createdAtOffset: Int, createdByOffset: Int, sourceOffset: Int, originOffset: Int, origNetworkOffset: Int, dataMode: Byte) : Int {
            builder.startTable(40)
            addDoseRate(builder, doseRate)
            addCtrnTime(builder, ctrnTime)
            addDose(builder, dose)
            addMassFrac(builder, massFrac)
            addDepCtrn(builder, depCtrn)
            addDep(builder, dep)
            addActivity(builder, activity)
            addHBar(builder, hBar)
            addGBar(builder, gBar)
            addRadCtrn(builder, radCtrn)
            addDensity(builder, density)
            addOrigNetwork(builder, origNetworkOffset)
            addOrigin(builder, originOffset)
            addSource(builder, sourceOffset)
            addCreatedBy(builder, createdByOffset)
            addCreatedAt(builder, createdAtOffset)
            addIdTrack(builder, idTrackOffset)
            addIdPOI(builder, idPoiOffset)
            addDuration(builder, duration)
            addChannel(builder, channelOffset)
            addBottleId(builder, bottleIdOffset)
            addA(builder, a)
            addZ(builder, z)
            addPpm(builder, ppm)
            addCasRN(builder, casRnOffset)
            addMatCat(builder, matCat)
            addMatName(builder, matNameOffset)
            addMatClass(builder, matClassOffset)
            addMatType(builder, matTypeOffset)
            addReadingValues(builder, readingValuesOffset)
            addReadingUnits(builder, readingUnitsOffset)
            addReadings(builder, readingsOffset)
            addAlarmValues(builder, alarmValuesOffset)
            addAlarms(builder, alarmsOffset)
            addDetectTime(builder, detectTimeOffset)
            addDetectType(builder, detectTypeOffset)
            addClassificationMarking(builder, classificationMarkingOffset)
            addId(builder, idOffset)
            addDataMode(builder, dataMode)
            addHarmful(builder, harmful)
            return endHazard_Full(builder)
        }
        fun startHazard_Full(builder: FlatBufferBuilder) = builder.startTable(40)
        fun addId(builder: FlatBufferBuilder, id: Int) = builder.addOffset(0, id, 0)
        fun addClassificationMarking(builder: FlatBufferBuilder, classificationMarking: Int) = builder.addOffset(1, classificationMarking, 0)
        fun addDetectType(builder: FlatBufferBuilder, detectType: Int) = builder.addOffset(2, detectType, 0)
        fun addDetectTime(builder: FlatBufferBuilder, detectTime: Int) = builder.addOffset(3, detectTime, 0)
        fun addHarmful(builder: FlatBufferBuilder, harmful: Boolean) = builder.addBoolean(4, harmful, false)
        fun addAlarms(builder: FlatBufferBuilder, alarms: Int) = builder.addOffset(5, alarms, 0)
        fun createAlarmsVector(builder: FlatBufferBuilder, data: IntArray) : Int {
            builder.startVector(4, data.size, 4)
            for (i in data.size - 1 downTo 0) {
                builder.addOffset(data[i])
            }
            return builder.endVector()
        }
        fun startAlarmsVector(builder: FlatBufferBuilder, numElems: Int) = builder.startVector(4, numElems, 4)
        fun addAlarmValues(builder: FlatBufferBuilder, alarmValues: Int) = builder.addOffset(6, alarmValues, 0)
        fun createAlarmValuesVector(builder: FlatBufferBuilder, data: IntArray) : Int {
            builder.startVector(4, data.size, 4)
            for (i in data.size - 1 downTo 0) {
                builder.addOffset(data[i])
            }
            return builder.endVector()
        }
        fun startAlarmValuesVector(builder: FlatBufferBuilder, numElems: Int) = builder.startVector(4, numElems, 4)
        fun addReadings(builder: FlatBufferBuilder, readings: Int) = builder.addOffset(7, readings, 0)
        fun createReadingsVector(builder: FlatBufferBuilder, data: IntArray) : Int {
            builder.startVector(4, data.size, 4)
            for (i in data.size - 1 downTo 0) {
                builder.addOffset(data[i])
            }
            return builder.endVector()
        }
        fun startReadingsVector(builder: FlatBufferBuilder, numElems: Int) = builder.startVector(4, numElems, 4)
        fun addReadingUnits(builder: FlatBufferBuilder, readingUnits: Int) = builder.addOffset(8, readingUnits, 0)
        fun createReadingUnitsVector(builder: FlatBufferBuilder, data: IntArray) : Int {
            builder.startVector(4, data.size, 4)
            for (i in data.size - 1 downTo 0) {
                builder.addOffset(data[i])
            }
            return builder.endVector()
        }
        fun startReadingUnitsVector(builder: FlatBufferBuilder, numElems: Int) = builder.startVector(4, numElems, 4)
        fun addReadingValues(builder: FlatBufferBuilder, readingValues: Int) = builder.addOffset(9, readingValues, 0)
        fun createReadingValuesVector(builder: FlatBufferBuilder, data: IntArray) : Int {
            builder.startVector(4, data.size, 4)
            for (i in data.size - 1 downTo 0) {
                builder.addOffset(data[i])
            }
            return builder.endVector()
        }
        fun startReadingValuesVector(builder: FlatBufferBuilder, numElems: Int) = builder.startVector(4, numElems, 4)
        fun addMatType(builder: FlatBufferBuilder, matType: Int) = builder.addOffset(10, matType, 0)
        fun addMatClass(builder: FlatBufferBuilder, matClass: Int) = builder.addOffset(11, matClass, 0)
        fun addMatName(builder: FlatBufferBuilder, matName: Int) = builder.addOffset(12, matName, 0)
        fun addMatCat(builder: FlatBufferBuilder, matCat: Int) = builder.addInt(13, matCat, 0)
        fun addCasRN(builder: FlatBufferBuilder, casRn: Int) = builder.addOffset(14, casRn, 0)
        fun addPpm(builder: FlatBufferBuilder, ppm: Int) = builder.addInt(15, ppm, 0)
        fun addDensity(builder: FlatBufferBuilder, density: Double) = builder.addDouble(16, density, 0.0)
        fun addRadCtrn(builder: FlatBufferBuilder, radCtrn: Double) = builder.addDouble(17, radCtrn, 0.0)
        fun addGBar(builder: FlatBufferBuilder, gBar: Double) = builder.addDouble(18, gBar, 0.0)
        fun addHBar(builder: FlatBufferBuilder, hBar: Double) = builder.addDouble(19, hBar, 0.0)
        fun addZ(builder: FlatBufferBuilder, z: Int) = builder.addInt(20, z, 0)
        fun addA(builder: FlatBufferBuilder, a: Int) = builder.addInt(21, a, 0)
        fun addBottleId(builder: FlatBufferBuilder, bottleId: Int) = builder.addOffset(22, bottleId, 0)
        fun addChannel(builder: FlatBufferBuilder, channel: Int) = builder.addOffset(23, channel, 0)
        fun addDuration(builder: FlatBufferBuilder, duration: Int) = builder.addInt(24, duration, 0)
        fun addActivity(builder: FlatBufferBuilder, activity: Double) = builder.addDouble(25, activity, 0.0)
        fun addDep(builder: FlatBufferBuilder, dep: Double) = builder.addDouble(26, dep, 0.0)
        fun addDepCtrn(builder: FlatBufferBuilder, depCtrn: Double) = builder.addDouble(27, depCtrn, 0.0)
        fun addMassFrac(builder: FlatBufferBuilder, massFrac: Double) = builder.addDouble(28, massFrac, 0.0)
        fun addDose(builder: FlatBufferBuilder, dose: Double) = builder.addDouble(29, dose, 0.0)
        fun addCtrnTime(builder: FlatBufferBuilder, ctrnTime: Double) = builder.addDouble(30, ctrnTime, 0.0)
        fun addDoseRate(builder: FlatBufferBuilder, doseRate: Double) = builder.addDouble(31, doseRate, 0.0)
        fun addIdPOI(builder: FlatBufferBuilder, idPoi: Int) = builder.addOffset(32, idPoi, 0)
        fun addIdTrack(builder: FlatBufferBuilder, idTrack: Int) = builder.addOffset(33, idTrack, 0)
        fun addCreatedAt(builder: FlatBufferBuilder, createdAt: Int) = builder.addOffset(34, createdAt, 0)
        fun addCreatedBy(builder: FlatBufferBuilder, createdBy: Int) = builder.addOffset(35, createdBy, 0)
        fun addSource(builder: FlatBufferBuilder, source: Int) = builder.addOffset(36, source, 0)
        fun addOrigin(builder: FlatBufferBuilder, origin: Int) = builder.addOffset(37, origin, 0)
        fun addOrigNetwork(builder: FlatBufferBuilder, origNetwork: Int) = builder.addOffset(38, origNetwork, 0)
        fun addDataMode(builder: FlatBufferBuilder, dataMode: Byte) = builder.addByte(39, dataMode, 0)
        fun endHazard_Full(builder: FlatBufferBuilder) : Int {
            val o = builder.endTable()
            return o
        }
        fun finishHazardFullBuffer(builder: FlatBufferBuilder, offset: Int) = builder.finish(offset, "HAZA")
        fun finishSizePrefixedHazard_FullBuffer(builder: FlatBufferBuilder, offset: Int) = builder.finishSizePrefixed(offset, "HAZA")
    }
}
