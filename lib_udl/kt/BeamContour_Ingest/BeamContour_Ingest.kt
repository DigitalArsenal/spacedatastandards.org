// automatically generated by the FlatBuffers compiler, do not modify

import com.google.flatbuffers.BaseVector
import com.google.flatbuffers.BooleanVector
import com.google.flatbuffers.ByteVector
import com.google.flatbuffers.Constants
import com.google.flatbuffers.DoubleVector
import com.google.flatbuffers.FlatBufferBuilder
import com.google.flatbuffers.FloatVector
import com.google.flatbuffers.LongVector
import com.google.flatbuffers.StringVector
import com.google.flatbuffers.Struct
import com.google.flatbuffers.Table
import com.google.flatbuffers.UnionVector
import java.nio.ByteBuffer
import java.nio.ByteOrder
import kotlin.math.sign

/**
 * /// Describes the beam contour associated with a beam entity. Beam contours are the geographic representation of the relative gain levels of beam power off of the maximum gain boresight points.
 */
@Suppress("unused")
class BeamContour_Ingest : Table() {

    fun __init(_i: Int, _bb: ByteBuffer)  {
        __reset(_i, _bb)
    }
    fun __assign(_i: Int, _bb: ByteBuffer) : BeamContour_Ingest {
        __init(_i, _bb)
        return this
    }
    /**
     * Unique identifier of the record, auto-generated by the system.
     * Example: /// Example: BEAMCONTOUR-ID
     * Constraints: Minimum length = 1, Maximum length = 36
     */
    val id : String?
        get() {
            val o = __offset(4)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val idAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(4, 1)
    fun idInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 4, 1)
    /**
     * Classification marking of the data in IC/CAPCO Portion-marked format.
     * Example: /// Example: U
     * Constraints: Minimum length = 1, Maximum length = 128
     */
    val classificationMarking : String?
        get() {
            val o = __offset(6)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val classificationMarkingAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(6, 1)
    fun classificationMarkingInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 6, 1)
    /**
     * ID of the beam.
     * Example: /// Example: REF-BEAM-ID
     * Constraints: Minimum length = 1, Maximum length = 36
     */
    val idBeam : String?
        get() {
            val o = __offset(8)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val idBeamAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(8, 1)
    fun idBeamInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 8, 1)
    /**
     * The type of object represented in this record (BORESIGHT, CONTOUR, SVC AREA).  Boresight refers to the point of maximum/peak gain, and should not be confused with the 'aim point' of the related beam.  Gain contours are regions of  coverage referenced to the relative gain of the related beam.  Service Areas are composed of one or more service regions, with each region being either discrete point(s) or a continuous contour.
     * Example: /// Example: BORESIGHT
     * Constraints: Minimum length = 1, Maximum length = 16
     */
    val type : Byte
        get() {
            val o = __offset(10)
            return if(o != 0) bb.get(o + bb_pos) else 0
        }
    /**
     * The index number of this contour. The value is required if type = CONTOUR.
     * Example: /// Example: No example provided.
     * Constraints: No constraints specified.
     */
    val contourIdx : Int
        get() {
            val o = __offset(12)
            return if(o != 0) bb.getInt(o + bb_pos) else 0
        }
    /**
     * The relative gain level in dB associated with this boresight or contour.  Gain does not apply to service area records. The value is required if type = BORESIGHT or CONTOUR.
     * Example: /// Example: 17.1
     * Constraints: No constraints specified.
     */
    val gain : Double
        get() {
            val o = __offset(14)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * The region name within the service area.
     * Example: /// Example: Example region name
     * Constraints: Minimum length = 0, Maximum length = 24
     */
    val regionName : String?
        get() {
            val o = __offset(16)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val regionNameAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(16, 1)
    fun regionNameInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 16, 1)
    /**
     * GeoJSON or Well Known Text expression of the boresight point, service area point or region, or the gain contour region in geographic longitude, latitude pairs. Boresight and service area point(s) are represented as a 'Point' or 'MultiPoint', service areas and closed gain contours as 'Polygon', and open contours as 'LineString'. This is an optional convenience field only used for create operations. The system will auto-detect the format (Well Known Text or GeoJSON) and populate both geographyText and geographyJson fields appropriately. A create request must contain one of the geography, geographyText, or geographyJson.
     * Example: /// Example: POLYGON((26.156175339112 67.3291113966927,26.0910220642717 67.2580009640721,26.6637992964562 67.1795862381682,26.730115808233 67.2501237475598,26.156175339112 67.3291113966927))
     * Constraints: No constraints specified.
     */
    val geography : String?
        get() {
            val o = __offset(18)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val geographyAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(18, 1)
    fun geographyInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 18, 1)
    /**
     * Geographical region or polygon (lon/lat pairs), as depicted by the Well-Known Text representation of the geometry/geography, of the image as projected on the ground. WKT reference: https://www.opengeospatial.org/standards/wkt-crs. Ignored if included with a POST or PUT request that also specifies a valid 'area' field.
     * Example: /// Example: POLYGON((67.3291113966927 26.156175339112,67.2580009640721 26.091022064271,67.1795862381682 26.6637992964562,67.2501237475598 26.730115808233,67.3291113966927 26.156175339112))
     * Constraints: No constraints specified.
     */
    val geographyText : String?
        get() {
            val o = __offset(20)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val geographyTextAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(20, 1)
    fun geographyTextInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 20, 1)
    /**
     * Geographical region or polygon (lat/lon pairs), as depicted by the GeoJSON representation of the geometry/geography, of the image as projected on the ground. GeoJSON Reference: https://geojson.org/. Ignored if included with a POST or PUT request that also specifies a valid 'area' or 'atext' field.
     * Example: /// Example: {"type":"Polygon","coordinates":[[[67.3291113966927,26.156175339112],[67.2580009640721,26.091022064271],[67.1795862381682,26.6637992964562],[67.2501237475598,26.730115808233],[67.3291113966927,26.156175339112]]]}
     * Constraints: No constraints specified.
     */
    val geographyJson : String?
        get() {
            val o = __offset(22)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val geographyJsonAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(22, 1)
    fun geographyJsonInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 22, 1)
    /**
     * Type of region as projected.
     * Example: /// Example: ST_Polygon
     * Constraints: Minimum length = 0, Maximum length = 128
     */
    val geographyType : String?
        get() {
            val o = __offset(24)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val geographyTypeAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(24, 1)
    fun geographyTypeInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 24, 1)
    /**
     * Number of dimensions of the geometry depicted by region.
     * Example: /// Example: No example provided.
     * Constraints: No constraints specified.
     */
    val geographyNdims : Int
        get() {
            val o = __offset(26)
            return if(o != 0) bb.getInt(o + bb_pos) else 0
        }
    /**
     * Geographical spatial_ref_sys for region.
     * Example: /// Example: 4326
     * Constraints: No constraints specified.
     */
    val geographySrid : Int
        get() {
            val o = __offset(28)
            return if(o != 0) bb.getInt(o + bb_pos) else 0
        }
    /**
     * Time the row was created in the database, auto-populated by the system, example = 2018-01-01T16:00:00.123Z.
     * Example: /// Example: 2018-01-01T16:00:00.123Z
     * Constraints: No constraints specified.
     */
    val createdAt : String?
        get() {
            val o = __offset(30)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val createdAtAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(30, 1)
    fun createdAtInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 30, 1)
    /**
     * Application user who created the row in the database, auto-populated by the system.
     * Example: /// Example: some.user
     * Constraints: Minimum length = 1, Maximum length = 64
     */
    val createdBy : String?
        get() {
            val o = __offset(32)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val createdByAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(32, 1)
    fun createdByInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 32, 1)
    /**
     * Source of the data.
     * Example: /// Example: Bluestaq
     * Constraints: Minimum length = 1, Maximum length = 64
     */
    val source : String?
        get() {
            val o = __offset(34)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val sourceAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(34, 1)
    fun sourceInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 34, 1)
    /**
     * Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
     * Example: /// Example: THIRD_PARTY_DATASOURCE
     * Constraints: Minimum length = 0, Maximum length = 64
     */
    val origin : String?
        get() {
            val o = __offset(36)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val originAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(36, 1)
    fun originInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 36, 1)
    /**
     * The originating source network on which this record was created, auto-populated by the system.
     * Example: /// Example: ORIG
     * Constraints: Minimum length = 1, Maximum length = 32
     */
    val origNetwork : String?
        get() {
            val o = __offset(38)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val origNetworkAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(38, 1)
    fun origNetworkInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 38, 1)
    /**
     * Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
     * EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
     * REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
     * SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
     * TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
     * Example: /// Example: TEST
     * Constraints: Minimum length = 1, Maximum length = 32
     */
    val dataMode : Byte
        get() {
            val o = __offset(40)
            return if(o != 0) bb.get(o + bb_pos) else 0
        }
    companion object {
        fun validateVersion() = Constants.FLATBUFFERS_24_3_25()
        fun getRootAsBeamContour_Ingest(_bb: ByteBuffer): BeamContour_Ingest = getRootAsBeamContour_Ingest(_bb, BeamContour_Ingest())
        fun getRootAsBeamContour_Ingest(_bb: ByteBuffer, obj: BeamContour_Ingest): BeamContour_Ingest {
            _bb.order(ByteOrder.LITTLE_ENDIAN)
            return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb))
        }
        fun BeamContour_IngestBufferHasIdentifier(_bb: ByteBuffer) : Boolean = __has_identifier(_bb, "BEAM")
        fun createBeamContour_Ingest(builder: FlatBufferBuilder, idOffset: Int, classificationMarkingOffset: Int, idBeamOffset: Int, type: Byte, contourIdx: Int, gain: Double, regionNameOffset: Int, geographyOffset: Int, geographyTextOffset: Int, geographyJsonOffset: Int, geographyTypeOffset: Int, geographyNdims: Int, geographySrid: Int, createdAtOffset: Int, createdByOffset: Int, sourceOffset: Int, originOffset: Int, origNetworkOffset: Int, dataMode: Byte) : Int {
            builder.startTable(19)
            addGain(builder, gain)
            addOrigNetwork(builder, origNetworkOffset)
            addOrigin(builder, originOffset)
            addSource(builder, sourceOffset)
            addCreatedBy(builder, createdByOffset)
            addCreatedAt(builder, createdAtOffset)
            addGeographySrid(builder, geographySrid)
            addGeographyNdims(builder, geographyNdims)
            addGeographyType(builder, geographyTypeOffset)
            addGeographyJson(builder, geographyJsonOffset)
            addGeographyText(builder, geographyTextOffset)
            addGeography(builder, geographyOffset)
            addRegionName(builder, regionNameOffset)
            addContourIdx(builder, contourIdx)
            addIdBeam(builder, idBeamOffset)
            addClassificationMarking(builder, classificationMarkingOffset)
            addId(builder, idOffset)
            addDataMode(builder, dataMode)
            addType(builder, type)
            return endBeamContour_Ingest(builder)
        }
        fun startBeamContour_Ingest(builder: FlatBufferBuilder) = builder.startTable(19)
        fun addId(builder: FlatBufferBuilder, id: Int) = builder.addOffset(0, id, 0)
        fun addClassificationMarking(builder: FlatBufferBuilder, classificationMarking: Int) = builder.addOffset(1, classificationMarking, 0)
        fun addIdBeam(builder: FlatBufferBuilder, idBeam: Int) = builder.addOffset(2, idBeam, 0)
        fun addType(builder: FlatBufferBuilder, type: Byte) = builder.addByte(3, type, 0)
        fun addContourIdx(builder: FlatBufferBuilder, contourIdx: Int) = builder.addInt(4, contourIdx, 0)
        fun addGain(builder: FlatBufferBuilder, gain: Double) = builder.addDouble(5, gain, 0.0)
        fun addRegionName(builder: FlatBufferBuilder, regionName: Int) = builder.addOffset(6, regionName, 0)
        fun addGeography(builder: FlatBufferBuilder, geography: Int) = builder.addOffset(7, geography, 0)
        fun addGeographyText(builder: FlatBufferBuilder, geographyText: Int) = builder.addOffset(8, geographyText, 0)
        fun addGeographyJson(builder: FlatBufferBuilder, geographyJson: Int) = builder.addOffset(9, geographyJson, 0)
        fun addGeographyType(builder: FlatBufferBuilder, geographyType: Int) = builder.addOffset(10, geographyType, 0)
        fun addGeographyNdims(builder: FlatBufferBuilder, geographyNdims: Int) = builder.addInt(11, geographyNdims, 0)
        fun addGeographySrid(builder: FlatBufferBuilder, geographySrid: Int) = builder.addInt(12, geographySrid, 0)
        fun addCreatedAt(builder: FlatBufferBuilder, createdAt: Int) = builder.addOffset(13, createdAt, 0)
        fun addCreatedBy(builder: FlatBufferBuilder, createdBy: Int) = builder.addOffset(14, createdBy, 0)
        fun addSource(builder: FlatBufferBuilder, source: Int) = builder.addOffset(15, source, 0)
        fun addOrigin(builder: FlatBufferBuilder, origin: Int) = builder.addOffset(16, origin, 0)
        fun addOrigNetwork(builder: FlatBufferBuilder, origNetwork: Int) = builder.addOffset(17, origNetwork, 0)
        fun addDataMode(builder: FlatBufferBuilder, dataMode: Byte) = builder.addByte(18, dataMode, 0)
        fun endBeamContour_Ingest(builder: FlatBufferBuilder) : Int {
            val o = builder.endTable()
            return o
        }
        fun finishBeamContourIngestBuffer(builder: FlatBufferBuilder, offset: Int) = builder.finish(offset, "BEAM")
        fun finishSizePrefixedBeamContour_IngestBuffer(builder: FlatBufferBuilder, offset: Int) = builder.finishSizePrefixed(offset, "BEAM")
    }
}
