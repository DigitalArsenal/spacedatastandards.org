// automatically generated by the FlatBuffers compiler, do not modify

import com.google.flatbuffers.BaseVector
import com.google.flatbuffers.BooleanVector
import com.google.flatbuffers.ByteVector
import com.google.flatbuffers.Constants
import com.google.flatbuffers.DoubleVector
import com.google.flatbuffers.FlatBufferBuilder
import com.google.flatbuffers.FloatVector
import com.google.flatbuffers.LongVector
import com.google.flatbuffers.StringVector
import com.google.flatbuffers.Struct
import com.google.flatbuffers.Table
import com.google.flatbuffers.UnionVector
import java.nio.ByteBuffer
import java.nio.ByteOrder
import kotlin.math.sign

/**
 * /// Discrepancy information associated with this LogisticsSupport record.
 */
@Suppress("unused")
class LogisticsDiscrepancyInfos_Ingest : Table() {

    fun __init(_i: Int, _bb: ByteBuffer)  {
        __reset(_i, _bb)
    }
    fun __assign(_i: Int, _bb: ByteBuffer) : LogisticsDiscrepancyInfos_Ingest {
        __init(_i, _bb)
        return this
    }
    /**
     * Job Control Number of the discrepancy.
     * Example: /// Example: 231942400
     * Constraints: Minimum length = 0, Maximum length = 12
     */
    val jcn : String?
        get() {
            val o = __offset(4)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val jcnAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(4, 1)
    fun jcnInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 4, 1)
    /**
     * The aircraft discrepancy description.
     * Example: /// Example: PILOT WINDSHIELD PANEL ASSY CRACKED, AND ARCING REQ R2 IAW 56.11.10
     * Constraints: Minimum length = 0, Maximum length = 680
     */
    val discrepancyInfo : String?
        get() {
            val o = __offset(6)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val discrepancyInfoAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(6, 1)
    fun discrepancyInfoInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 6, 1)
    /**
     * The job start time, in ISO 8601 UTC format with millisecond precision.
     * Example: /// Example: 2023-07-17T10:30:00.123Z
     * Constraints: No constraints specified.
     */
    val jobStTime : String?
        get() {
            val o = __offset(8)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val jobStTimeAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(8, 1)
    fun jobStTimeInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 8, 1)
    /**
     * The discrepancy closure time, in ISO 8601 UTC format with millisecond precision.
     * Example: /// Example: 2023-07-17T10:30:00.123Z
     * Constraints: No constraints specified.
     */
    val closureTime : String?
        get() {
            val o = __offset(10)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val closureTimeAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(10, 1)
    fun closureTimeInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 10, 1)
    companion object {
        fun validateVersion() = Constants.FLATBUFFERS_24_3_25()
        fun getRootAsLogisticsDiscrepancyInfos_Ingest(_bb: ByteBuffer): LogisticsDiscrepancyInfos_Ingest = getRootAsLogisticsDiscrepancyInfos_Ingest(_bb, LogisticsDiscrepancyInfos_Ingest())
        fun getRootAsLogisticsDiscrepancyInfos_Ingest(_bb: ByteBuffer, obj: LogisticsDiscrepancyInfos_Ingest): LogisticsDiscrepancyInfos_Ingest {
            _bb.order(ByteOrder.LITTLE_ENDIAN)
            return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb))
        }
        fun LogisticsDiscrepancyInfos_IngestBufferHasIdentifier(_bb: ByteBuffer) : Boolean = __has_identifier(_bb, "LOGI")
        fun createLogisticsDiscrepancyInfos_Ingest(builder: FlatBufferBuilder, jcnOffset: Int, discrepancyInfoOffset: Int, jobStTimeOffset: Int, closureTimeOffset: Int) : Int {
            builder.startTable(4)
            addClosureTime(builder, closureTimeOffset)
            addJobStTime(builder, jobStTimeOffset)
            addDiscrepancyInfo(builder, discrepancyInfoOffset)
            addJcn(builder, jcnOffset)
            return endLogisticsDiscrepancyInfos_Ingest(builder)
        }
        fun startLogisticsDiscrepancyInfos_Ingest(builder: FlatBufferBuilder) = builder.startTable(4)
        fun addJcn(builder: FlatBufferBuilder, jcn: Int) = builder.addOffset(0, jcn, 0)
        fun addDiscrepancyInfo(builder: FlatBufferBuilder, discrepancyInfo: Int) = builder.addOffset(1, discrepancyInfo, 0)
        fun addJobStTime(builder: FlatBufferBuilder, jobStTime: Int) = builder.addOffset(2, jobStTime, 0)
        fun addClosureTime(builder: FlatBufferBuilder, closureTime: Int) = builder.addOffset(3, closureTime, 0)
        fun endLogisticsDiscrepancyInfos_Ingest(builder: FlatBufferBuilder) : Int {
            val o = builder.endTable()
            return o
        }
        fun finishLogisticsDiscrepancyInfosIngestBuffer(builder: FlatBufferBuilder, offset: Int) = builder.finish(offset, "LOGI")
        fun finishSizePrefixedLogisticsDiscrepancyInfos_IngestBuffer(builder: FlatBufferBuilder, offset: Int) = builder.finishSizePrefixed(offset, "LOGI")
    }
}
