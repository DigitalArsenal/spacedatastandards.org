// automatically generated by the FlatBuffers compiler, do not modify

import com.google.flatbuffers.BaseVector
import com.google.flatbuffers.BooleanVector
import com.google.flatbuffers.ByteVector
import com.google.flatbuffers.Constants
import com.google.flatbuffers.DoubleVector
import com.google.flatbuffers.FlatBufferBuilder
import com.google.flatbuffers.FloatVector
import com.google.flatbuffers.LongVector
import com.google.flatbuffers.StringVector
import com.google.flatbuffers.Struct
import com.google.flatbuffers.Table
import com.google.flatbuffers.UnionVector
import java.nio.ByteBuffer
import java.nio.ByteOrder
import kotlin.math.sign

/**
 * /// Coefficients to describe profile shape as quasi-parabolic segments.
 */
@Suppress("unused")
class IonoObservationDensityProfileQuasiParabolic_Ingest : Table() {

    fun __init(_i: Int, _bb: ByteBuffer)  {
        __reset(_i, _bb)
    }
    fun __assign(_i: Int, _bb: ByteBuffer) : IonoObservationDensityProfileQuasiParabolic_Ingest {
        __init(_i, _bb)
        return this
    }
    /**
     * General description of the quasi-parabolic computation algorithm.
     * Example: /// Example: Array of the best-fit 3-parameter quasi-parabolas defined via A, B, C coefficients, f^2=A/r^2+B/r+C
     * Constraints: No constraints specified.
     */
    val description : String?
        get() {
            val o = __offset(4)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val descriptionAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(4, 1)
    fun descriptionInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 4, 1)
    /**
     * Value of the Earth's radius, in kilometers, used for computations.
     * Example: /// Example: 6370.1
     * Constraints: No constraints specified.
     */
    val earthRadius : Double
        get() {
            val o = __offset(6)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Array of quasi-parabolic segments. Each segment is the best-fit 3-parameter quasi-parabolas defined via A, B, C coefficients, f^2=A/r^2+B/r+C‚Äù. Usually 3 groups for E, F1, and F2 layers, but additional segments may be used to improve accuracy.
     * Example: /// Example: No example provided.
     * Constraints: No constraints specified.
     */
    fun quasiParabolicSegments(j: Int) : String? {
        val o = __offset(8)
        return if (o != 0) {
            __string(__vector(o) + j * 4)
        } else {
            null
        }
    }
    val quasiParabolicSegmentsLength : Int
        get() {
            val o = __offset(8); return if (o != 0) __vector_len(o) else 0
        }
    companion object {
        fun validateVersion() = Constants.FLATBUFFERS_24_3_25()
        fun getRootAsIonoObservationDensityProfileQuasiParabolic_Ingest(_bb: ByteBuffer): IonoObservationDensityProfileQuasiParabolic_Ingest = getRootAsIonoObservationDensityProfileQuasiParabolic_Ingest(_bb, IonoObservationDensityProfileQuasiParabolic_Ingest())
        fun getRootAsIonoObservationDensityProfileQuasiParabolic_Ingest(_bb: ByteBuffer, obj: IonoObservationDensityProfileQuasiParabolic_Ingest): IonoObservationDensityProfileQuasiParabolic_Ingest {
            _bb.order(ByteOrder.LITTLE_ENDIAN)
            return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb))
        }
        fun IonoObservationDensityProfileQuasiParabolic_IngestBufferHasIdentifier(_bb: ByteBuffer) : Boolean = __has_identifier(_bb, "IONO")
        fun createIonoObservationDensityProfileQuasiParabolic_Ingest(builder: FlatBufferBuilder, descriptionOffset: Int, earthRadius: Double, quasiParabolicSegmentsOffset: Int) : Int {
            builder.startTable(3)
            addEarthRadius(builder, earthRadius)
            addQuasiParabolicSegments(builder, quasiParabolicSegmentsOffset)
            addDescription(builder, descriptionOffset)
            return endIonoObservationDensityProfileQuasiParabolic_Ingest(builder)
        }
        fun startIonoObservationDensityProfileQuasiParabolic_Ingest(builder: FlatBufferBuilder) = builder.startTable(3)
        fun addDescription(builder: FlatBufferBuilder, description: Int) = builder.addOffset(0, description, 0)
        fun addEarthRadius(builder: FlatBufferBuilder, earthRadius: Double) = builder.addDouble(1, earthRadius, 0.0)
        fun addQuasiParabolicSegments(builder: FlatBufferBuilder, quasiParabolicSegments: Int) = builder.addOffset(2, quasiParabolicSegments, 0)
        fun createQuasiParabolicSegmentsVector(builder: FlatBufferBuilder, data: IntArray) : Int {
            builder.startVector(4, data.size, 4)
            for (i in data.size - 1 downTo 0) {
                builder.addOffset(data[i])
            }
            return builder.endVector()
        }
        fun startQuasiParabolicSegmentsVector(builder: FlatBufferBuilder, numElems: Int) = builder.startVector(4, numElems, 4)
        fun endIonoObservationDensityProfileQuasiParabolic_Ingest(builder: FlatBufferBuilder) : Int {
            val o = builder.endTable()
            return o
        }
        fun finishIonoObservationDensityProfileQuasiParabolicIngestBuffer(builder: FlatBufferBuilder, offset: Int) = builder.finish(offset, "IONO")
        fun finishSizePrefixedIonoObservationDensityProfileQuasiParabolic_IngestBuffer(builder: FlatBufferBuilder, offset: Int) = builder.finishSizePrefixed(offset, "IONO")
    }
}
