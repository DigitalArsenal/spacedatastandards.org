// automatically generated by the FlatBuffers compiler, do not modify

import com.google.flatbuffers.BaseVector
import com.google.flatbuffers.BooleanVector
import com.google.flatbuffers.ByteVector
import com.google.flatbuffers.Constants
import com.google.flatbuffers.DoubleVector
import com.google.flatbuffers.FlatBufferBuilder
import com.google.flatbuffers.FloatVector
import com.google.flatbuffers.LongVector
import com.google.flatbuffers.StringVector
import com.google.flatbuffers.Struct
import com.google.flatbuffers.Table
import com.google.flatbuffers.UnionVector
import java.nio.ByteBuffer
import java.nio.ByteOrder
import kotlin.math.sign

/**
 * /// Actual start and stop for the collection.
 */
@Suppress("unused")
class ISRCollectionActual_Abridged : Table() {

    fun __init(_i: Int, _bb: ByteBuffer)  {
        __reset(_i, _bb)
    }
    fun __assign(_i: Int, _bb: ByteBuffer) : ISRCollectionActual_Abridged {
        __init(_i, _bb)
        return this
    }
    /**
     * Unique Identifier of actual collection period for historical archive.
     * Example: /// Example: ISRCOLLECTIONACTUAL-ID
     * Constraints: Minimum length = 0, Maximum length = 36
     */
    val id : String?
        get() {
            val o = __offset(4)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val idAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(4, 1)
    fun idInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 4, 1)
    /**
     * Start time the collection actually occurred, in ISO 8601 UTC format.
     * Example: /// Example: 2021-01-19T01:01:15.001Z
     * Constraints: No constraints specified.
     */
    val start : String?
        get() {
            val o = __offset(6)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val startAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(6, 1)
    fun startInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 6, 1)
    /**
     * Stop time the collection actually occurred, in ISO 8601 UTC format.
     * Example: /// Example: 2021-01-19T01:01:15.001Z
     * Constraints: No constraints specified.
     */
    val stop : String?
        get() {
            val o = __offset(8)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val stopAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(8, 1)
    fun stopInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 8, 1)
    companion object {
        fun validateVersion() = Constants.FLATBUFFERS_24_3_25()
        fun getRootAsISRCollectionActual_Abridged(_bb: ByteBuffer): ISRCollectionActual_Abridged = getRootAsISRCollectionActual_Abridged(_bb, ISRCollectionActual_Abridged())
        fun getRootAsISRCollectionActual_Abridged(_bb: ByteBuffer, obj: ISRCollectionActual_Abridged): ISRCollectionActual_Abridged {
            _bb.order(ByteOrder.LITTLE_ENDIAN)
            return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb))
        }
        fun ISRCollectionActual_AbridgedBufferHasIdentifier(_bb: ByteBuffer) : Boolean = __has_identifier(_bb, "ISRC")
        fun createISRCollectionActual_Abridged(builder: FlatBufferBuilder, idOffset: Int, startOffset: Int, stopOffset: Int) : Int {
            builder.startTable(3)
            addStop(builder, stopOffset)
            addStart(builder, startOffset)
            addId(builder, idOffset)
            return endISRCollectionActual_Abridged(builder)
        }
        fun startISRCollectionActual_Abridged(builder: FlatBufferBuilder) = builder.startTable(3)
        fun addId(builder: FlatBufferBuilder, id: Int) = builder.addOffset(0, id, 0)
        fun addStart(builder: FlatBufferBuilder, start: Int) = builder.addOffset(1, start, 0)
        fun addStop(builder: FlatBufferBuilder, stop: Int) = builder.addOffset(2, stop, 0)
        fun endISRCollectionActual_Abridged(builder: FlatBufferBuilder) : Int {
            val o = builder.endTable()
            return o
        }
        fun finishISRCollectionActualAbridgedBuffer(builder: FlatBufferBuilder, offset: Int) = builder.finish(offset, "ISRC")
        fun finishSizePrefixedISRCollectionActual_AbridgedBuffer(builder: FlatBufferBuilder, offset: Int) = builder.finishSizePrefixed(offset, "ISRC")
    }
}
