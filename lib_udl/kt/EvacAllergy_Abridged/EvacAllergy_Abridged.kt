// automatically generated by the FlatBuffers compiler, do not modify

import com.google.flatbuffers.BaseVector
import com.google.flatbuffers.BooleanVector
import com.google.flatbuffers.ByteVector
import com.google.flatbuffers.Constants
import com.google.flatbuffers.DoubleVector
import com.google.flatbuffers.FlatBufferBuilder
import com.google.flatbuffers.FloatVector
import com.google.flatbuffers.LongVector
import com.google.flatbuffers.StringVector
import com.google.flatbuffers.Struct
import com.google.flatbuffers.Table
import com.google.flatbuffers.UnionVector
import java.nio.ByteBuffer
import java.nio.ByteOrder
import kotlin.math.sign

/**
 * /// Allergy information.
 */
@Suppress("unused")
class EvacAllergy_Abridged : Table() {

    fun __init(_i: Int, _bb: ByteBuffer)  {
        __reset(_i, _bb)
    }
    fun __assign(_i: Int, _bb: ByteBuffer) : EvacAllergy_Abridged {
        __init(_i, _bb)
        return this
    }
    /**
     * Type of patient allergy (e.g.  PENICILLIN, SULFA, OTHER).
     * Example: /// Example: PENICILLIN
     * Constraints: Minimum length = 0, Maximum length = 64
     */
    val type : String?
        get() {
            val o = __offset(4)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val typeAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(4, 1)
    fun typeInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 4, 1)
    /**
     * Additional comments on the  patient's allergy information.
     * Example: /// Example: Comments on the patient's allergies.
     * Constraints: Minimum length = 0, Maximum length = 1024
     */
    val comments : String?
        get() {
            val o = __offset(6)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val commentsAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(6, 1)
    fun commentsInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 6, 1)
    companion object {
        fun validateVersion() = Constants.FLATBUFFERS_24_3_25()
        fun getRootAsEvacAllergy_Abridged(_bb: ByteBuffer): EvacAllergy_Abridged = getRootAsEvacAllergy_Abridged(_bb, EvacAllergy_Abridged())
        fun getRootAsEvacAllergy_Abridged(_bb: ByteBuffer, obj: EvacAllergy_Abridged): EvacAllergy_Abridged {
            _bb.order(ByteOrder.LITTLE_ENDIAN)
            return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb))
        }
        fun EvacAllergy_AbridgedBufferHasIdentifier(_bb: ByteBuffer) : Boolean = __has_identifier(_bb, "EVAC")
        fun createEvacAllergy_Abridged(builder: FlatBufferBuilder, typeOffset: Int, commentsOffset: Int) : Int {
            builder.startTable(2)
            addComments(builder, commentsOffset)
            addType(builder, typeOffset)
            return endEvacAllergy_Abridged(builder)
        }
        fun startEvacAllergy_Abridged(builder: FlatBufferBuilder) = builder.startTable(2)
        fun addType(builder: FlatBufferBuilder, type: Int) = builder.addOffset(0, type, 0)
        fun addComments(builder: FlatBufferBuilder, comments: Int) = builder.addOffset(1, comments, 0)
        fun endEvacAllergy_Abridged(builder: FlatBufferBuilder) : Int {
            val o = builder.endTable()
            return o
        }
        fun finishEvacAllergyAbridgedBuffer(builder: FlatBufferBuilder, offset: Int) = builder.finish(offset, "EVAC")
        fun finishSizePrefixedEvacAllergy_AbridgedBuffer(builder: FlatBufferBuilder, offset: Int) = builder.finishSizePrefixed(offset, "EVAC")
    }
}
