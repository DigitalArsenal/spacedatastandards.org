// automatically generated by the FlatBuffers compiler, do not modify

package RFObservation_Abridged

import com.google.flatbuffers.BaseVector
import com.google.flatbuffers.BooleanVector
import com.google.flatbuffers.ByteVector
import com.google.flatbuffers.Constants
import com.google.flatbuffers.DoubleVector
import com.google.flatbuffers.FlatBufferBuilder
import com.google.flatbuffers.FloatVector
import com.google.flatbuffers.LongVector
import com.google.flatbuffers.StringVector
import com.google.flatbuffers.Struct
import com.google.flatbuffers.Table
import com.google.flatbuffers.UnionVector
import java.nio.ByteBuffer
import java.nio.ByteOrder
import kotlin.math.sign

/**
 * Model representation of observation data for active/passive radio frequency (RF) based sensor phenomenologies. J2000 is the preferred coordinate frame for all observations, but in some cases observations may be in another frame depending on the provider. Please see the 'Discover' tab in the storefront to confirm coordinate frames by data provider. RF observations include several optional ordered arrays which are used to provide detailed information on recorded signals such as power spectral density lists or active signals (code taps/fills, etc). In these cases, the sizes of the arrays must match and can be assumed to have consistent indexing across arrays (e.g. powers[0] is the measured power at frequencies[0]).
 */
@Suppress("unused")
class RFObservation_Abridged : Table() {

    fun __init(_i: Int, _bb: ByteBuffer)  {
        __reset(_i, _bb)
    }
    fun __assign(_i: Int, _bb: ByteBuffer) : RFObservation_Abridged {
        __init(_i, _bb)
        return this
    }
    /**
     * Unique identifier of the record, auto-generated by the system.
     * Example: RFOBSERVATION-ID
     * Constraints: Minimum length = 1, Maximum length = 36
     */
    val id : String?
        get() {
            val o = __offset(4)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val idAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(4, 1)
    fun idInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 4, 1)
    /**
     * Classification marking of the data in IC/CAPCO Portion-marked format.
     * Example: U
     * Constraints: Minimum length = 1, Maximum length = 128
     */
    val classificationMarking : String?
        get() {
            val o = __offset(6)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val classificationMarkingAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(6, 1)
    fun classificationMarkingInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 6, 1)
    /**
     * Ob detection time in ISO 8601 UTC with microsecond precision.
     * Example: 2018-01-01T16:00:00.123456Z
     * Constraints: No constraints specified.
     */
    val obTime : String?
        get() {
            val o = __offset(8)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val obTimeAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(8, 1)
    fun obTimeInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 8, 1)
    /**
     * Unique identifier of the target on-orbit object, if correlated.
     * Example: ONORBIT-ID
     * Constraints: Minimum length = 0, Maximum length = 36
     */
    val idOnOrbit : String?
        get() {
            val o = __offset(10)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val idOnOrbitAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(10, 1)
    fun idOnOrbitInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 10, 1)
    /**
     * Unique identifier of the reporting sensor.
     * Example: SENSOR-ID
     * Constraints: Minimum length = 0, Maximum length = 36
     */
    val idSensor : String?
        get() {
            val o = __offset(12)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val idSensorAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(12, 1)
    fun idSensorInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 12, 1)
    /**
     * Type of RF ob (e.g. RF, RF-SOSI, PSD, RFI, SPOOF, etc).
     * Example: RF
     * Constraints: Minimum length = 1, Maximum length = 32
     */
    val type : String?
        get() {
            val o = __offset(14)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val typeAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(14, 1)
    fun typeInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 14, 1)
    /**
     * Satellite/Catalog number of the target on-orbit object.
     * Example: 32258
     * Constraints: No constraints specified.
     */
    val satNo : Int
        get() {
            val o = __offset(16)
            return if(o != 0) bb.getInt(o + bb_pos) else 0
        }
    /**
     * Optional identifier to indicate the specific tasking which produced this observation.
     * Example: TASK-ID
     * Constraints: Minimum length = 0, Maximum length = 36
     */
    val taskId : String?
        get() {
            val o = __offset(18)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val taskIdAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(18, 1)
    fun taskIdInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 18, 1)
    /**
     * Optional identifier to track a commercial or marketplace transaction executed to produce this data.
     * Example: TRANSACTION-ID
     * Constraints: Minimum length = 0, Maximum length = 64
     */
    val transactionId : String?
        get() {
            val o = __offset(20)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val transactionIdAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(20, 1)
    fun transactionIdInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 20, 1)
    /**
     * Optional identifier of the track to which this observation belongs.
     * Example: TRACK-ID
     * Constraints: Minimum length = 0, Maximum length = 36
     */
    val trackId : String?
        get() {
            val o = __offset(22)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val trackIdAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(22, 1)
    fun trackIdInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 22, 1)
    /**
     * Optional identifier provided by observation source to indicate the target onorbit object of this observation. This may be an internal identifier and not necessarily a valid satellite number.
     * Example: ORIG-OBJECT-ID
     * Constraints: Minimum length = 0, Maximum length = 64
     */
    val origObjectId : String?
        get() {
            val o = __offset(24)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val origObjectIdAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(24, 1)
    fun origObjectIdInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 24, 1)
    /**
     * Optional identifier provided by observation source to indicate the sensor identifier which produced this observation. This may be an internal identifier and not necessarily a valid sensor ID.
     * Example: ORIG-SENSOR-ID
     * Constraints: Minimum length = 0, Maximum length = 64
     */
    val origSensorId : String?
        get() {
            val o = __offset(26)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val origSensorIdAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(26, 1)
    fun origSensorIdInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 26, 1)
    /**
     * Boolean indicating this observation is part of an uncorrelated track or was unable to be correlated to a known object. This flag should only be set to true by data providers after an attempt to correlate to an on-orbit object was made and failed. If unable to correlate, the 'origObjectId' field may be populated with an internal data provider specific identifier.
     * Example: False
     * Constraints: No constraints specified.
     */
    val uct : Boolean
        get() {
            val o = __offset(28)
            return if(o != 0) 0.toByte() != bb.get(o + bb_pos) else false
        }
    /**
     * Optional identifier provided by observation source to indicate the transponder used for this measurement.
     * Example: TRANSPONDER-A
     * Constraints: Minimum length = 0, Maximum length = 64
     */
    val transponder : String?
        get() {
            val o = __offset(30)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val transponderAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(30, 1)
    fun transponderInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 30, 1)
    /**
     * azimuth angle in degrees and J2000 coordinate frame.
     * Example: 10.1
     * Constraints: No constraints specified.
     */
    val azimuth : Double
        get() {
            val o = __offset(32)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * One sigma uncertainty in the azimuth angle measurement, in degrees.
     * Example: 2.1
     * Constraints: No constraints specified.
     */
    val azimuthUnc : Double
        get() {
            val o = __offset(34)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Rate of change of the azimuth in degrees per second.
     * Example: 1.1
     * Constraints: No constraints specified.
     */
    val azimuthRate : Double
        get() {
            val o = __offset(36)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * elevation in degrees and J2000 coordinate frame.
     * Example: 10.1
     * Constraints: No constraints specified.
     */
    val elevation : Double
        get() {
            val o = __offset(38)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * One sigma uncertainty in the elevation angle measurement, in degrees.
     * Example: 10.1
     * Constraints: No constraints specified.
     */
    val elevationUnc : Double
        get() {
            val o = __offset(40)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Rate of change of the elevation in degrees per second.
     * Example: 10.1
     * Constraints: No constraints specified.
     */
    val elevationRate : Double
        get() {
            val o = __offset(42)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Target range in km.
     * Example: 10.1
     * Constraints: No constraints specified.
     */
    val range : Double
        get() {
            val o = __offset(44)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * One sigma uncertainty in the range measurement, in kilometers.
     * Example: 10.1
     * Constraints: No constraints specified.
     */
    val rangeUnc : Double
        get() {
            val o = __offset(46)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Rate of change of the range in km/sec.
     * Example: 10.1
     * Constraints: No constraints specified.
     */
    val rangeRate : Double
        get() {
            val o = __offset(48)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * One sigma uncertainty in the range rate measurement, in kilometers/second.
     * Example: 10.1
     * Constraints: No constraints specified.
     */
    val rangeRateUnc : Double
        get() {
            val o = __offset(50)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Target track or apparent range in km.
     * Example: 10.1
     * Constraints: No constraints specified.
     */
    val trackRange : Double
        get() {
            val o = __offset(52)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Sensor WGS84 latitude at obTime (if mobile/onorbit) in degrees. If null, can be obtained from sensor info. -90 to 90 degrees (negative values south of equator).
     * Example: 45.2
     * Constraints: No constraints specified.
     */
    val senlat : Double
        get() {
            val o = __offset(54)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Sensor WGS84 longitude at obTime (if mobile/onorbit) in degrees. If null, can be obtained from sensor info. -180 to 180 degrees (negative values west of Prime Meridian).
     * Example: 80.3
     * Constraints: No constraints specified.
     */
    val senlon : Double
        get() {
            val o = __offset(56)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Sensor altitude at obTime (if mobile/onorbit) in km. If null, can be obtained from sensor info.
     * Example: 10.1
     * Constraints: No constraints specified.
     */
    val senalt : Double
        get() {
            val o = __offset(58)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * ELINT notation.
     * Example: Ex. ELINT
     * Constraints: Minimum length = 0, Maximum length = 10
     */
    val elnot : String?
        get() {
            val o = __offset(60)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val elnotAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(60, 1)
    fun elnotInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 60, 1)
    /**
     * Center carrier frequency in Hz.
     * Example: 10.1
     * Constraints: No constraints specified.
     */
    val frequency : Double
        get() {
            val o = __offset(62)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Nominal or expected center carrier frequency in Hz.
     * Example: 10.1
     * Constraints: No constraints specified.
     */
    val nominalFrequency : Double
        get() {
            val o = __offset(64)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Start carrier frequency in Hz.
     * Example: 10.1
     * Constraints: No constraints specified.
     */
    val startFrequency : Double
        get() {
            val o = __offset(66)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * End carrier frequency in Hz.
     * Example: 10.1
     * Constraints: No constraints specified.
     */
    val endFrequency : Double
        get() {
            val o = __offset(68)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Measured power of the center carrier frequency in dBW.
     * Example: 10.1
     * Constraints: No constraints specified.
     */
    val relativeCarrierPower : Double
        get() {
            val o = __offset(70)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Measured spectrum analyzer power of the center carrier frequency in dBW.
     * Example: 10.1
     * Constraints: No constraints specified.
     */
    val spectrumAnalyzerPower : Double
        get() {
            val o = __offset(72)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * The measure of the signal created from the sum of all the noise sources and unwanted signals within the measurement system, in dBW.
     * Example: 10.1
     * Constraints: No constraints specified.
     */
    val relativeNoiseFloor : Double
        get() {
            val o = __offset(74)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Reference signal level, in dBW.
     * Example: 10.1
     * Constraints: No constraints specified.
     */
    val referenceLevel : Double
        get() {
            val o = __offset(76)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * A pulse group repetition interval (PGRI) is a pulse train in which there are groups of closely spaced pulses separated by much longer times between these pulse groups.
     * Example: 10.1
     * Constraints: No constraints specified.
     */
    val pgri : Double
        get() {
            val o = __offset(78)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Confidence in the signal and its measurements and characterization.
     * Example: 10.1
     * Constraints: No constraints specified.
     */
    val confidence : Double
        get() {
            val o = __offset(80)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * True if the signal is incoming, false if outgoing.
     * Example: False
     * Constraints: No constraints specified.
     */
    val incoming : Boolean
        get() {
            val o = __offset(82)
            return if(o != 0) 0.toByte() != bb.get(o + bb_pos) else false
        }
    /**
     * Switch Point of the RFObservation record.
     * Example: 10
     * Constraints: No constraints specified.
     */
    val switchPoint : Int
        get() {
            val o = __offset(84)
            return if(o != 0) bb.getInt(o + bb_pos) else 0
        }
    /**
     * Baud rate is the number of symbol changes, waveform changes, or signaling events, across the transmission medium per second.
     * Example: 10.1
     * Constraints: No constraints specified.
     */
    val baudRate : Double
        get() {
            val o = __offset(86)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Signal to noise ratio, in dB.
     * Example: 10.1
     * Constraints: No constraints specified.
     */
    val snr : Double
        get() {
            val o = __offset(88)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Nominal or expected signal to noise ratio, in dB.
     * Example: 10.1
     * Constraints: No constraints specified.
     */
    val nominalSnr : Double
        get() {
            val o = __offset(90)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * The antenna pointing dependent polarizer angle, in degrees.
     * Example: 10.1
     * Constraints: No constraints specified.
     */
    val polarity : Double
        get() {
            val o = __offset(92)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Transponder polarization e.g. H - (Horizontally Polarized) Perpendicular to Earth's surface, V - (Vertically Polarized) Parallel to Earth's surface, L - (Left Hand Circularly Polarized) Rotating left relative to the earth's surface, R - (Right Hand Circularly Polarized) Rotating right relative to the earth's surface.
     * Example: H
     * Constraints: Minimum length = 0, Maximum length = 16
     */
    val polarityType : Byte
        get() {
            val o = __offset(94)
            return if(o != 0) bb.get(o + bb_pos) else 0
        }
    /**
     * Channel of the RFObservation record.
     * Example: 10
     * Constraints: No constraints specified.
     */
    val channel : Int
        get() {
            val o = __offset(96)
            return if(o != 0) bb.getInt(o + bb_pos) else 0
        }
    /**
     * Measured carrier power over noise (dBW/Hz).
     * Example: 10.1
     * Constraints: No constraints specified.
     */
    val powerOverNoise : Double
        get() {
            val o = __offset(98)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Expected carrier power over noise (dBW/Hz).
     * Example: 10.1
     * Constraints: No constraints specified.
     */
    val nominalPowerOverNoise : Double
        get() {
            val o = __offset(100)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Measured bandwidth in Hz.
     * Example: 10.1
     * Constraints: No constraints specified.
     */
    val bandwidth : Double
        get() {
            val o = __offset(102)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Expected bandwidth in Hz.
     * Example: 10.1
     * Constraints: No constraints specified.
     */
    val nominalBandwidth : Double
        get() {
            val o = __offset(104)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Resolution bandwidth in Hz.
     * Example: 10.1
     * Constraints: No constraints specified.
     */
    val resolutionBandwidth : Double
        get() {
            val o = __offset(106)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Video bandwidth in Hz.
     * Example: 10.1
     * Constraints: No constraints specified.
     */
    val videoBandwidth : Double
        get() {
            val o = __offset(108)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Measured Equivalent Isotopically Radiated Power in dBW.
     * Example: 10.1
     * Constraints: No constraints specified.
     */
    val eirp : Double
        get() {
            val o = __offset(110)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Expected Equivalent Isotopically Radiated Power in dBW.
     * Example: 10.1
     * Constraints: No constraints specified.
     */
    val nominalEirp : Double
        get() {
            val o = __offset(112)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Minimum measured PSD value of the trace in dBW.
     * Example: 10.1
     * Constraints: No constraints specified.
     */
    val minPSD : Double
        get() {
            val o = __offset(114)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Maximum measured PSD value of the trace in dBW.
     * Example: 10.1
     * Constraints: No constraints specified.
     */
    val maxPSD : Double
        get() {
            val o = __offset(116)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Frequency Shift of the RFObservation record.
     * Example: 10.1
     * Constraints: No constraints specified.
     */
    val frequencyShift : Double
        get() {
            val o = __offset(118)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Peak of the RFObservation record.
     * Example: False
     * Constraints: No constraints specified.
     */
    val peak : Boolean
        get() {
            val o = __offset(120)
            return if(o != 0) 0.toByte() != bb.get(o + bb_pos) else false
        }
    /**
     * Antenna name of the RFObservation record.
     * Example: Antenna1
     * Constraints: Minimum length = 0, Maximum length = 64
     */
    val antennaName : String?
        get() {
            val o = __offset(122)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val antennaNameAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(122, 1)
    fun antennaNameInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 122, 1)
    /**
     * Detection status (e.g. DETECTED, CARRIER_ACQUIRING, CARRIER_DETECTED, NOT_DETECTED, etc).
     * Example: DETECTED
     * Constraints: Minimum length = 0, Maximum length = 32
     */
    val detectionStatus : String?
        get() {
            val o = __offset(124)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val detectionStatusAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(124, 1)
    fun detectionStatusInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 124, 1)
    /**
     * Collection mode (e.g. SURVEY, SPOT_SEARCH, NEIGHBORHOOD_WATCH, DIRECTED_SEARCH, MANUAL, etc).
     * Example: SURVEY
     * Constraints: Minimum length = 0, Maximum length = 32
     */
    val collectionMode : String?
        get() {
            val o = __offset(126)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val collectionModeAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(126, 1)
    fun collectionModeInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 126, 1)
    /**
     * Optional URI location in the document repository of the raw file parsed by the system to produce this record. To download the raw file, prepend https://udl-hostname/scs/download?id= to this value.
     * Example: Example URI
     * Constraints: Minimum length = 0, Maximum length = 256
     */
    val rawFileURI : String?
        get() {
            val o = __offset(128)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val rawFileURIAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(128, 1)
    fun rawFileURIInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 128, 1)
    /**
     * Source of the data.
     * Example: Bluestaq
     * Constraints: Minimum length = 1, Maximum length = 64
     */
    val source : String?
        get() {
            val o = __offset(130)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val sourceAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(130, 1)
    fun sourceInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 130, 1)
    /**
     * Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
     * Example: THIRD_PARTY_DATASOURCE
     * Constraints: Minimum length = 0, Maximum length = 64
     */
    val origin : String?
        get() {
            val o = __offset(132)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val originAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(132, 1)
    fun originInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 132, 1)
    /**
     * Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data: EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data. REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis. SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets. TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics. 
     * Example: TEST
     * Constraints: Minimum length = 1, Maximum length = 32
     */
    val dataMode : Byte
        get() {
            val o = __offset(134)
            return if(o != 0) bb.get(o + bb_pos) else 0
        }
    /**
     * Time the row was created in the database, auto-populated by the system.
     * Example: 2018-01-01T16:00:00.123Z
     * Constraints: No constraints specified.
     */
    val createdAt : String?
        get() {
            val o = __offset(136)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val createdAtAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(136, 1)
    fun createdAtInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 136, 1)
    /**
     * Application user who created the row in the database, auto-populated by the system.
     * Example: some.user
     * Constraints: Minimum length = 1, Maximum length = 64
     */
    val createdBy : String?
        get() {
            val o = __offset(138)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val createdByAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(138, 1)
    fun createdByInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 138, 1)
    /**
     * Noise power density, in dBW-Hz.
     * Example: 10.1
     * Constraints: No constraints specified.
     */
    val noisePwrDensity : Double
        get() {
            val o = __offset(140)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Carrier standard (e.g. DVB-S2, 802.11g, etc.).
     * Example: DVB-S2
     * Constraints: Minimum length = 0, Maximum length = 10
     */
    val carrierStandard : String?
        get() {
            val o = __offset(142)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val carrierStandardAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(142, 1)
    fun carrierStandardInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 142, 1)
    /**
     * Transponder modulation (e.g. Auto, QPSK, 8PSK, etc).
     * Example: Auto
     * Constraints: Minimum length = 0, Maximum length = 10
     */
    val modulation : String?
        get() {
            val o = __offset(144)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val modulationAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(144, 1)
    fun modulationInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 144, 1)
    /**
     * Inner forward error correction rate:  0 = Auto, 1 = 1/2, 2 = 2/3, 3 = 3/4, 4 = 5/6, 5 = 7/8, 6 = 8/9, 7 = 3/5, 8 = 4/5, 9 = 9/10, 15 = None.
     * Example: 7
     * Constraints: No constraints specified.
     */
    val innerCodingRate : Int
        get() {
            val o = __offset(146)
            return if(o != 0) bb.getInt(o + bb_pos) else 0
        }
    /**
     * Outer forward error correction rate:  0 = Auto, 1 = 1/2, 2 = 2/3, 3 = 3/4, 4 = 5/6, 5 = 7/8, 6 = 8/9, 7 = 3/5, 8 = 4/5, 9 = 9/10, 15 = None.
     * Example: 4
     * Constraints: No constraints specified.
     */
    val outerCodingRate : Int
        get() {
            val o = __offset(148)
            return if(o != 0) bb.getInt(o + bb_pos) else 0
        }
    /**
     * Transmit pulse shaping filter typ (e.g. RRC).
     * Example: RRC
     * Constraints: Minimum length = 0, Maximum length = 10
     */
    val transmitFilterType : String?
        get() {
            val o = __offset(150)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val transmitFilterTypeAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(150, 1)
    fun transmitFilterTypeInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 150, 1)
    /**
     * Transmit pulse shaping filter roll-off value.
     * Example: 10.1
     * Constraints: No constraints specified.
     */
    val transmitFilterRollOff : Double
        get() {
            val o = __offset(152)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Symbol to noise ratio, in dB.
     * Example: 10.1
     * Constraints: No constraints specified.
     */
    val symbolToNoiseRatio : Double
        get() {
            val o = __offset(154)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * The ratio of bit errors per number of received bits.
     * Example: 10.1
     * Constraints: No constraints specified.
     */
    val bitErrorRate : Double
        get() {
            val o = __offset(156)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * The originating source network on which this record was created, auto-populated by the system.
     * Example: ORIG
     * Constraints: Minimum length = 1, Maximum length = 32
     */
    val origNetwork : String?
        get() {
            val o = __offset(158)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val origNetworkAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(158, 1)
    fun origNetworkInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 158, 1)
    /**
     * The source data library from which this record was received. This could be a remote or tactical UDL or another data library. If null, the record should be assumed to have originated from the primary Enterprise UDL.
     * Example: AXE
     * Constraints: Minimum length = 0, Maximum length = 64
     */
    val sourceDL : String?
        get() {
            val o = __offset(160)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val sourceDLAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(160, 1)
    fun sourceDLInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 160, 1)
    /**
     * Optional source-provided and searchable metadata or descriptor of the data.
     * Example: descriptor
     * Constraints: Minimum length = 0, Maximum length = 64
     */
    val descriptor : String?
        get() {
            val o = __offset(162)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val descriptorAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(162, 1)
    fun descriptorInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 162, 1)
    /**
     * Optional URL containing additional information on this observation.
     * Example: https://some-url
     * Constraints: Minimum length = 0, Maximum length = 2048
     */
    val url : String?
        get() {
            val o = __offset(164)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val urlAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(164, 1)
    fun urlInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 164, 1)
    companion object {
        fun validateVersion() = Constants.FLATBUFFERS_24_3_25()
        fun getRootAsRFObservation_Abridged(_bb: ByteBuffer): RFObservation_Abridged = getRootAsRFObservation_Abridged(_bb, RFObservation_Abridged())
        fun getRootAsRFObservation_Abridged(_bb: ByteBuffer, obj: RFObservation_Abridged): RFObservation_Abridged {
            _bb.order(ByteOrder.LITTLE_ENDIAN)
            return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb))
        }
        fun createRFObservation_Abridged(builder: FlatBufferBuilder, idOffset: Int, classificationMarkingOffset: Int, obTimeOffset: Int, idOnOrbitOffset: Int, idSensorOffset: Int, typeOffset: Int, satNo: Int, taskIdOffset: Int, transactionIdOffset: Int, trackIdOffset: Int, origObjectIdOffset: Int, origSensorIdOffset: Int, uct: Boolean, transponderOffset: Int, azimuth: Double, azimuthUnc: Double, azimuthRate: Double, elevation: Double, elevationUnc: Double, elevationRate: Double, range: Double, rangeUnc: Double, rangeRate: Double, rangeRateUnc: Double, trackRange: Double, senlat: Double, senlon: Double, senalt: Double, elnotOffset: Int, frequency: Double, nominalFrequency: Double, startFrequency: Double, endFrequency: Double, relativeCarrierPower: Double, spectrumAnalyzerPower: Double, relativeNoiseFloor: Double, referenceLevel: Double, pgri: Double, confidence: Double, incoming: Boolean, switchPoint: Int, baudRate: Double, snr: Double, nominalSnr: Double, polarity: Double, polarityType: Byte, channel: Int, powerOverNoise: Double, nominalPowerOverNoise: Double, bandwidth: Double, nominalBandwidth: Double, resolutionBandwidth: Double, videoBandwidth: Double, eirp: Double, nominalEirp: Double, minPsd: Double, maxPsd: Double, frequencyShift: Double, peak: Boolean, antennaNameOffset: Int, detectionStatusOffset: Int, collectionModeOffset: Int, rawFileUriOffset: Int, sourceOffset: Int, originOffset: Int, dataMode: Byte, createdAtOffset: Int, createdByOffset: Int, noisePwrDensity: Double, carrierStandardOffset: Int, modulationOffset: Int, innerCodingRate: Int, outerCodingRate: Int, transmitFilterTypeOffset: Int, transmitFilterRollOff: Double, symbolToNoiseRatio: Double, bitErrorRate: Double, origNetworkOffset: Int, sourceDlOffset: Int, descriptorOffset: Int, urlOffset: Int) : Int {
            builder.startTable(81)
            addBitErrorRate(builder, bitErrorRate)
            addSymbolToNoiseRatio(builder, symbolToNoiseRatio)
            addTransmitFilterRollOff(builder, transmitFilterRollOff)
            addNoisePwrDensity(builder, noisePwrDensity)
            addFrequencyShift(builder, frequencyShift)
            addMaxPSD(builder, maxPSD)
            addMinPSD(builder, minPSD)
            addNominalEirp(builder, nominalEirp)
            addEirp(builder, eirp)
            addVideoBandwidth(builder, videoBandwidth)
            addResolutionBandwidth(builder, resolutionBandwidth)
            addNominalBandwidth(builder, nominalBandwidth)
            addBandwidth(builder, bandwidth)
            addNominalPowerOverNoise(builder, nominalPowerOverNoise)
            addPowerOverNoise(builder, powerOverNoise)
            addPolarity(builder, polarity)
            addNominalSnr(builder, nominalSnr)
            addSnr(builder, snr)
            addBaudRate(builder, baudRate)
            addConfidence(builder, confidence)
            addPgri(builder, pgri)
            addReferenceLevel(builder, referenceLevel)
            addRelativeNoiseFloor(builder, relativeNoiseFloor)
            addSpectrumAnalyzerPower(builder, spectrumAnalyzerPower)
            addRelativeCarrierPower(builder, relativeCarrierPower)
            addEndFrequency(builder, endFrequency)
            addStartFrequency(builder, startFrequency)
            addNominalFrequency(builder, nominalFrequency)
            addFrequency(builder, frequency)
            addSenalt(builder, senalt)
            addSenlon(builder, senlon)
            addSenlat(builder, senlat)
            addTrackRange(builder, trackRange)
            addRangeRateUnc(builder, rangeRateUnc)
            addRangeRate(builder, rangeRate)
            addRangeUnc(builder, rangeUnc)
            addRange(builder, range)
            addElevationRate(builder, elevationRate)
            addElevationUnc(builder, elevationUnc)
            addElevation(builder, elevation)
            addAzimuthRate(builder, azimuthRate)
            addAzimuthUnc(builder, azimuthUnc)
            addAzimuth(builder, azimuth)
            addUrl(builder, urlOffset)
            addDescriptor(builder, descriptorOffset)
            addSourceDL(builder, sourceDLOffset)
            addOrigNetwork(builder, origNetworkOffset)
            addTransmitFilterType(builder, transmitFilterTypeOffset)
            addOuterCodingRate(builder, outerCodingRate)
            addInnerCodingRate(builder, innerCodingRate)
            addModulation(builder, modulationOffset)
            addCarrierStandard(builder, carrierStandardOffset)
            addCreatedBy(builder, createdByOffset)
            addCreatedAt(builder, createdAtOffset)
            addOrigin(builder, originOffset)
            addSource(builder, sourceOffset)
            addRawFileURI(builder, rawFileURIOffset)
            addCollectionMode(builder, collectionModeOffset)
            addDetectionStatus(builder, detectionStatusOffset)
            addAntennaName(builder, antennaNameOffset)
            addChannel(builder, channel)
            addSwitchPoint(builder, switchPoint)
            addElnot(builder, elnotOffset)
            addTransponder(builder, transponderOffset)
            addOrigSensorId(builder, origSensorIdOffset)
            addOrigObjectId(builder, origObjectIdOffset)
            addTrackId(builder, trackIdOffset)
            addTransactionId(builder, transactionIdOffset)
            addTaskId(builder, taskIdOffset)
            addSatNo(builder, satNo)
            addType(builder, typeOffset)
            addIdSensor(builder, idSensorOffset)
            addIdOnOrbit(builder, idOnOrbitOffset)
            addObTime(builder, obTimeOffset)
            addClassificationMarking(builder, classificationMarkingOffset)
            addId(builder, idOffset)
            addDataMode(builder, dataMode)
            addPeak(builder, peak)
            addPolarityType(builder, polarityType)
            addIncoming(builder, incoming)
            addUct(builder, uct)
            return endRFObservation_Abridged(builder)
        }
        fun startRFObservation_Abridged(builder: FlatBufferBuilder) = builder.startTable(81)
        fun addId(builder: FlatBufferBuilder, id: Int) = builder.addOffset(0, id, 0)
        fun addClassificationMarking(builder: FlatBufferBuilder, classificationMarking: Int) = builder.addOffset(1, classificationMarking, 0)
        fun addObTime(builder: FlatBufferBuilder, obTime: Int) = builder.addOffset(2, obTime, 0)
        fun addIdOnOrbit(builder: FlatBufferBuilder, idOnOrbit: Int) = builder.addOffset(3, idOnOrbit, 0)
        fun addIdSensor(builder: FlatBufferBuilder, idSensor: Int) = builder.addOffset(4, idSensor, 0)
        fun addType(builder: FlatBufferBuilder, type: Int) = builder.addOffset(5, type, 0)
        fun addSatNo(builder: FlatBufferBuilder, satNo: Int) = builder.addInt(6, satNo, 0)
        fun addTaskId(builder: FlatBufferBuilder, taskId: Int) = builder.addOffset(7, taskId, 0)
        fun addTransactionId(builder: FlatBufferBuilder, transactionId: Int) = builder.addOffset(8, transactionId, 0)
        fun addTrackId(builder: FlatBufferBuilder, trackId: Int) = builder.addOffset(9, trackId, 0)
        fun addOrigObjectId(builder: FlatBufferBuilder, origObjectId: Int) = builder.addOffset(10, origObjectId, 0)
        fun addOrigSensorId(builder: FlatBufferBuilder, origSensorId: Int) = builder.addOffset(11, origSensorId, 0)
        fun addUct(builder: FlatBufferBuilder, uct: Boolean) = builder.addBoolean(12, uct, false)
        fun addTransponder(builder: FlatBufferBuilder, transponder: Int) = builder.addOffset(13, transponder, 0)
        fun addAzimuth(builder: FlatBufferBuilder, azimuth: Double) = builder.addDouble(14, azimuth, 0.0)
        fun addAzimuthUnc(builder: FlatBufferBuilder, azimuthUnc: Double) = builder.addDouble(15, azimuthUnc, 0.0)
        fun addAzimuthRate(builder: FlatBufferBuilder, azimuthRate: Double) = builder.addDouble(16, azimuthRate, 0.0)
        fun addElevation(builder: FlatBufferBuilder, elevation: Double) = builder.addDouble(17, elevation, 0.0)
        fun addElevationUnc(builder: FlatBufferBuilder, elevationUnc: Double) = builder.addDouble(18, elevationUnc, 0.0)
        fun addElevationRate(builder: FlatBufferBuilder, elevationRate: Double) = builder.addDouble(19, elevationRate, 0.0)
        fun addRange(builder: FlatBufferBuilder, range: Double) = builder.addDouble(20, range, 0.0)
        fun addRangeUnc(builder: FlatBufferBuilder, rangeUnc: Double) = builder.addDouble(21, rangeUnc, 0.0)
        fun addRangeRate(builder: FlatBufferBuilder, rangeRate: Double) = builder.addDouble(22, rangeRate, 0.0)
        fun addRangeRateUnc(builder: FlatBufferBuilder, rangeRateUnc: Double) = builder.addDouble(23, rangeRateUnc, 0.0)
        fun addTrackRange(builder: FlatBufferBuilder, trackRange: Double) = builder.addDouble(24, trackRange, 0.0)
        fun addSenlat(builder: FlatBufferBuilder, senlat: Double) = builder.addDouble(25, senlat, 0.0)
        fun addSenlon(builder: FlatBufferBuilder, senlon: Double) = builder.addDouble(26, senlon, 0.0)
        fun addSenalt(builder: FlatBufferBuilder, senalt: Double) = builder.addDouble(27, senalt, 0.0)
        fun addElnot(builder: FlatBufferBuilder, elnot: Int) = builder.addOffset(28, elnot, 0)
        fun addFrequency(builder: FlatBufferBuilder, frequency: Double) = builder.addDouble(29, frequency, 0.0)
        fun addNominalFrequency(builder: FlatBufferBuilder, nominalFrequency: Double) = builder.addDouble(30, nominalFrequency, 0.0)
        fun addStartFrequency(builder: FlatBufferBuilder, startFrequency: Double) = builder.addDouble(31, startFrequency, 0.0)
        fun addEndFrequency(builder: FlatBufferBuilder, endFrequency: Double) = builder.addDouble(32, endFrequency, 0.0)
        fun addRelativeCarrierPower(builder: FlatBufferBuilder, relativeCarrierPower: Double) = builder.addDouble(33, relativeCarrierPower, 0.0)
        fun addSpectrumAnalyzerPower(builder: FlatBufferBuilder, spectrumAnalyzerPower: Double) = builder.addDouble(34, spectrumAnalyzerPower, 0.0)
        fun addRelativeNoiseFloor(builder: FlatBufferBuilder, relativeNoiseFloor: Double) = builder.addDouble(35, relativeNoiseFloor, 0.0)
        fun addReferenceLevel(builder: FlatBufferBuilder, referenceLevel: Double) = builder.addDouble(36, referenceLevel, 0.0)
        fun addPgri(builder: FlatBufferBuilder, pgri: Double) = builder.addDouble(37, pgri, 0.0)
        fun addConfidence(builder: FlatBufferBuilder, confidence: Double) = builder.addDouble(38, confidence, 0.0)
        fun addIncoming(builder: FlatBufferBuilder, incoming: Boolean) = builder.addBoolean(39, incoming, false)
        fun addSwitchPoint(builder: FlatBufferBuilder, switchPoint: Int) = builder.addInt(40, switchPoint, 0)
        fun addBaudRate(builder: FlatBufferBuilder, baudRate: Double) = builder.addDouble(41, baudRate, 0.0)
        fun addSnr(builder: FlatBufferBuilder, snr: Double) = builder.addDouble(42, snr, 0.0)
        fun addNominalSnr(builder: FlatBufferBuilder, nominalSnr: Double) = builder.addDouble(43, nominalSnr, 0.0)
        fun addPolarity(builder: FlatBufferBuilder, polarity: Double) = builder.addDouble(44, polarity, 0.0)
        fun addPolarityType(builder: FlatBufferBuilder, polarityType: Byte) = builder.addByte(45, polarityType, 0)
        fun addChannel(builder: FlatBufferBuilder, channel: Int) = builder.addInt(46, channel, 0)
        fun addPowerOverNoise(builder: FlatBufferBuilder, powerOverNoise: Double) = builder.addDouble(47, powerOverNoise, 0.0)
        fun addNominalPowerOverNoise(builder: FlatBufferBuilder, nominalPowerOverNoise: Double) = builder.addDouble(48, nominalPowerOverNoise, 0.0)
        fun addBandwidth(builder: FlatBufferBuilder, bandwidth: Double) = builder.addDouble(49, bandwidth, 0.0)
        fun addNominalBandwidth(builder: FlatBufferBuilder, nominalBandwidth: Double) = builder.addDouble(50, nominalBandwidth, 0.0)
        fun addResolutionBandwidth(builder: FlatBufferBuilder, resolutionBandwidth: Double) = builder.addDouble(51, resolutionBandwidth, 0.0)
        fun addVideoBandwidth(builder: FlatBufferBuilder, videoBandwidth: Double) = builder.addDouble(52, videoBandwidth, 0.0)
        fun addEirp(builder: FlatBufferBuilder, eirp: Double) = builder.addDouble(53, eirp, 0.0)
        fun addNominalEirp(builder: FlatBufferBuilder, nominalEirp: Double) = builder.addDouble(54, nominalEirp, 0.0)
        fun addMinPSD(builder: FlatBufferBuilder, minPsd: Double) = builder.addDouble(55, minPSD, 0.0)
        fun addMaxPSD(builder: FlatBufferBuilder, maxPsd: Double) = builder.addDouble(56, maxPSD, 0.0)
        fun addFrequencyShift(builder: FlatBufferBuilder, frequencyShift: Double) = builder.addDouble(57, frequencyShift, 0.0)
        fun addPeak(builder: FlatBufferBuilder, peak: Boolean) = builder.addBoolean(58, peak, false)
        fun addAntennaName(builder: FlatBufferBuilder, antennaName: Int) = builder.addOffset(59, antennaName, 0)
        fun addDetectionStatus(builder: FlatBufferBuilder, detectionStatus: Int) = builder.addOffset(60, detectionStatus, 0)
        fun addCollectionMode(builder: FlatBufferBuilder, collectionMode: Int) = builder.addOffset(61, collectionMode, 0)
        fun addRawFileURI(builder: FlatBufferBuilder, rawFileUri: Int) = builder.addOffset(62, rawFileURI, 0)
        fun addSource(builder: FlatBufferBuilder, source: Int) = builder.addOffset(63, source, 0)
        fun addOrigin(builder: FlatBufferBuilder, origin: Int) = builder.addOffset(64, origin, 0)
        fun addDataMode(builder: FlatBufferBuilder, dataMode: Byte) = builder.addByte(65, dataMode, 0)
        fun addCreatedAt(builder: FlatBufferBuilder, createdAt: Int) = builder.addOffset(66, createdAt, 0)
        fun addCreatedBy(builder: FlatBufferBuilder, createdBy: Int) = builder.addOffset(67, createdBy, 0)
        fun addNoisePwrDensity(builder: FlatBufferBuilder, noisePwrDensity: Double) = builder.addDouble(68, noisePwrDensity, 0.0)
        fun addCarrierStandard(builder: FlatBufferBuilder, carrierStandard: Int) = builder.addOffset(69, carrierStandard, 0)
        fun addModulation(builder: FlatBufferBuilder, modulation: Int) = builder.addOffset(70, modulation, 0)
        fun addInnerCodingRate(builder: FlatBufferBuilder, innerCodingRate: Int) = builder.addInt(71, innerCodingRate, 0)
        fun addOuterCodingRate(builder: FlatBufferBuilder, outerCodingRate: Int) = builder.addInt(72, outerCodingRate, 0)
        fun addTransmitFilterType(builder: FlatBufferBuilder, transmitFilterType: Int) = builder.addOffset(73, transmitFilterType, 0)
        fun addTransmitFilterRollOff(builder: FlatBufferBuilder, transmitFilterRollOff: Double) = builder.addDouble(74, transmitFilterRollOff, 0.0)
        fun addSymbolToNoiseRatio(builder: FlatBufferBuilder, symbolToNoiseRatio: Double) = builder.addDouble(75, symbolToNoiseRatio, 0.0)
        fun addBitErrorRate(builder: FlatBufferBuilder, bitErrorRate: Double) = builder.addDouble(76, bitErrorRate, 0.0)
        fun addOrigNetwork(builder: FlatBufferBuilder, origNetwork: Int) = builder.addOffset(77, origNetwork, 0)
        fun addSourceDL(builder: FlatBufferBuilder, sourceDl: Int) = builder.addOffset(78, sourceDL, 0)
        fun addDescriptor(builder: FlatBufferBuilder, descriptor: Int) = builder.addOffset(79, descriptor, 0)
        fun addUrl(builder: FlatBufferBuilder, url: Int) = builder.addOffset(80, url, 0)
        fun endRFObservation_Abridged(builder: FlatBufferBuilder) : Int {
            val o = builder.endTable()
            return o
        }
    }
}
