// automatically generated by the FlatBuffers compiler, do not modify

import com.google.flatbuffers.BaseVector
import com.google.flatbuffers.BooleanVector
import com.google.flatbuffers.ByteVector
import com.google.flatbuffers.Constants
import com.google.flatbuffers.DoubleVector
import com.google.flatbuffers.FlatBufferBuilder
import com.google.flatbuffers.FloatVector
import com.google.flatbuffers.LongVector
import com.google.flatbuffers.StringVector
import com.google.flatbuffers.Struct
import com.google.flatbuffers.Table
import com.google.flatbuffers.UnionVector
import java.nio.ByteBuffer
import java.nio.ByteOrder
import kotlin.math.sign

/**
 * /// Model representation of orbit determination algorithm results describing General Perturbations or Special Perturbations orbital updates.
 */
@Suppress("unused")
class OrbitDetermination_Ingest : Table() {

    fun __init(_i: Int, _bb: ByteBuffer)  {
        __reset(_i, _bb)
    }
    fun __assign(_i: Int, _bb: ByteBuffer) : OrbitDetermination_Ingest {
        __init(_i, _bb)
        return this
    }
    /**
     * Unique identifier of the record, auto-generated by the system.
     * Example: /// Example: 026dd511-8ba5-47d3-9909-836149f87686
     * Constraints: Minimum length = 1, Maximum length = 36
     */
    val id : String?
        get() {
            val o = __offset(4)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val idAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(4, 1)
    fun idInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 4, 1)
    /**
     * Classification marking of the data in IC/CAPCO Portion-marked format.
     * Example: /// Example: U
     * Constraints: Minimum length = 1, Maximum length = 128
     */
    val classificationMarking : String?
        get() {
            val o = __offset(6)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val classificationMarkingAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(6, 1)
    fun classificationMarkingInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 6, 1)
    /**
     * Start time for OD solution in ISO 8601 UTC datetime format, with microsecond precision.
     * Example: /// Example: 2023-08-28T11:20:21.247192Z
     * Constraints: No constraints specified.
     */
    val startTime : String?
        get() {
            val o = __offset(8)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val startTimeAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(8, 1)
    fun startTimeInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 8, 1)
    /**
     * End time for OD solution in ISO 8601 UTC datetime format, with microsecond precision.
     * Example: /// Example: 2023-08-28T15:20:21.247192Z
     * Constraints: No constraints specified.
     */
    val endTime : String?
        get() {
            val o = __offset(10)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val endTimeAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(10, 1)
    fun endTimeInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 10, 1)
    /**
     * Unique identifier of the target satellite on-orbit object. This ID can be used to obtain additional information on an OnOrbit object using the 'get by ID' operation (e.g. /udl/onorbit/{id}). For example, the OnOrbit with idOnOrbit = 25544 would be queried as /udl/onorbit/25544.
     * Example: /// Example: 54741
     * Constraints: Minimum length = 0, Maximum length = 36
     */
    val idOnOrbit : String?
        get() {
            val o = __offset(12)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val idOnOrbitAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(12, 1)
    fun idOnOrbitInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 12, 1)
    /**
     * Optional identifier provided by the OD source to indicate the target on-orbit object of this OD solution. This may be an internal identifier and not necessarily map to a valid satellite number.
     * Example: /// Example: ORIGOBJECT-ID
     * Constraints: Minimum length = 0, Maximum length = 64
     */
    val origObjectId : String?
        get() {
            val o = __offset(14)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val origObjectIdAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(14, 1)
    fun origObjectIdInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 14, 1)
    /**
     * Satellite/Catalog number of the target on-orbit object.
     * Example: /// Example: 54741
     * Constraints: No constraints specified.
     */
    val satNo : Int
        get() {
            val o = __offset(16)
            return if(o != 0) bb.getInt(o + bb_pos) else 0
        }
    /**
     * Identifier of the element set used to seed this OD solution. This ID can be used to obtain additional information on an Elset object using the 'get by ID' operation (e.g. /udl/elset/{id}). For example, the Elset with idElset = abc would be queried as /udl/elset/abc.
     * Example: /// Example: 80e544b7-6a17-4554-8abf-7301e98f8e5d
     * Constraints: Minimum length = 0, Maximum length = 36
     */
    val aprioriIdElset : String?
        get() {
            val o = __offset(18)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val aprioriIdElsetAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(18, 1)
    fun aprioriIdElsetInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 18, 1)
    /**
     * No description provided.
     * Example: /// Example: No example provided.
     * Constraints: No constraints specified.
     */
    val aprioriElset : String?
        get() {
            val o = __offset(20)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val aprioriElsetAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(20, 1)
    fun aprioriElsetInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 20, 1)
    /**
     * Identifier of the state vector used to seed this OD solution. This ID can be used to obtain additional information on a StateVector object using the 'get by ID' operation (e.g. /udl/statevector/{id}). For example, the StateVector with idStateVector = abc would be queried as /udl/statevector/abc.
     * Example: /// Example: 6e291992-8ae3-4592-bb0f-055715bf4803
     * Constraints: Minimum length = 0, Maximum length = 36
     */
    val aprioriIdStateVector : String?
        get() {
            val o = __offset(22)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val aprioriIdStateVectorAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(22, 1)
    fun aprioriIdStateVectorInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 22, 1)
    /**
     * No description provided.
     * Example: /// Example: No example provided.
     * Constraints: No constraints specified.
     */
    val aprioriStateVector : String?
        get() {
            val o = __offset(24)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val aprioriStateVectorAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(24, 1)
    fun aprioriStateVectorInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 24, 1)
    /**
     * Flag indicating whether this is an initial orbit determination.
     * Example: /// Example: False
     * Constraints: No constraints specified.
     */
    val initialOd : Boolean
        get() {
            val o = __offset(26)
            return if(o != 0) 0.toByte() != bb.get(o + bb_pos) else false
        }
    /**
     * The start of the time interval containing the time of the last accepted observation, in ISO 8601 UTC datetime format with microsecond precision. For an exact observation time, the lastObStart and lastObEnd are the same.
     * Example: /// Example: 2023-08-28T11:20:21.247192Z
     * Constraints: No constraints specified.
     */
    val lastObStart : String?
        get() {
            val o = __offset(28)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val lastObStartAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(28, 1)
    fun lastObStartInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 28, 1)
    /**
     * The end of the time interval containing the time of the last accepted observation, in ISO 8601 UTC datetime format with microsecond precision. For an exact observation time, the lastObStart and lastObEnd are the same.
     * Example: /// Example: 2023-08-28T11:20:21.247192Z
     * Constraints: No constraints specified.
     */
    val lastObEnd : String?
        get() {
            val o = __offset(30)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val lastObEndAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(30, 1)
    fun lastObEndInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 30, 1)
    /**
     * The time span used for the OD of the object, in days.
     * Example: /// Example: 3.5
     * Constraints: No constraints specified.
     */
    val timeSpan : Double
        get() {
            val o = __offset(32)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Optional start time at which this OD solution is accurate, in ISO 8601 UTC datetime format with microsecond precision.
     * Example: /// Example: 2023-08-28T11:20:21.247192Z
     * Constraints: No constraints specified.
     */
    val effectiveFrom : String?
        get() {
            val o = __offset(34)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val effectiveFromAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(34, 1)
    fun effectiveFromInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 34, 1)
    /**
     * Optional end time at which this OD solution may no longer be accurate, in ISO 8601 UTC datetime format with microsecond precision.
     * Example: /// Example: 2023-08-30T08:15:00.123456Z
     * Constraints: No constraints specified.
     */
    val effectiveUntil : String?
        get() {
            val o = __offset(36)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val effectiveUntilAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(36, 1)
    fun effectiveUntilInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 36, 1)
    /**
     * The Weighted Root Mean Squared (RMS) of the differential correction of the target object that produced this OD state. WRMS is a quality indicator of the OD update, with a value of 1.00 being optimal. WRMS applies to batch least squares (BLS) processes.
     * Example: /// Example: 0.991
     * Constraints: No constraints specified.
     */
    val wrms : Double
        get() {
            val o = __offset(38)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * The Weighted Root Mean Squared (RMS) of the differential correction from the previous overhead pass of the satellite. Provides a point of comparison for assessing changes in the quality of the OD solution between consecutive passes.
     * Example: /// Example: 1.02
     * Constraints: No constraints specified.
     */
    val previousWrms : Double
        get() {
            val o = __offset(40)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * The Weighted Root Mean Squared (RMS) calculated for the first satellite pass in the observation span. Serves as the initial quality metric for the beginning of the observation period.
     * Example: /// Example: 0.985
     * Constraints: No constraints specified.
     */
    val firstPassWrms : Double
        get() {
            val o = __offset(42)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Lowest Weighted Root Mean Squared (RMS) value achieved for any single satellite pass during the observation span, indicating the pass with the highest quality OD solution.
     * Example: /// Example: 0.975
     * Constraints: No constraints specified.
     */
    val bestPassWrms : Double
        get() {
            val o = __offset(44)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Error growth rate of the OD solution in kilometers per day.
     * Example: /// Example: 1.23
     * Constraints: No constraints specified.
     */
    val errorGrowthRate : Double
        get() {
            val o = __offset(46)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Model parameter value for energy dissipation rate (EDR) in watts per kilogram.
     * Example: /// Example: 1.23
     * Constraints: No constraints specified.
     */
    val edr : Double
        get() {
            val o = __offset(48)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Orbit determination method used to produce this record (e.g. BLS, KF, UKF, etc.).
     * Example: /// Example: BLS
     * Constraints: Minimum length = 1, Maximum length = 64
     */
    val method : String?
        get() {
            val o = __offset(50)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val methodAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(50, 1)
    fun methodInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 50, 1)
    /**
     * Source of orbit determination method used to produce this record (e.g. ASW, ACTRAC, FreeFlyer, GEODYNE, GDTS, etc.).
     * Example: /// Example: ASW
     * Constraints: Minimum length = 0, Maximum length = 64
     */
    val methodSource : String?
        get() {
            val o = __offset(52)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val methodSourceAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(52, 1)
    fun methodSourceInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 52, 1)
    /**
     * The fit span, in days, used in a Batch Least Squares (BLS) OD.
     * Example: /// Example: 0.6
     * Constraints: No constraints specified.
     */
    val fitSpan : Double
        get() {
            val o = __offset(54)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Flag indicating whether the ballistic coefficient was estimated during this OD solution.
     * Example: /// Example: False
     * Constraints: No constraints specified.
     */
    val ballisticCoeffEst : Boolean
        get() {
            val o = __offset(56)
            return if(o != 0) 0.toByte() != bb.get(o + bb_pos) else false
        }
    /**
     * Model used to estimate the ballistic coefficient.
     * Example: /// Example: GaussMarkov
     * Constraints: Minimum length = 0, Maximum length = 64
     */
    val ballisticCoeffModel : String?
        get() {
            val o = __offset(58)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val ballisticCoeffModelAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(58, 1)
    fun ballisticCoeffModelInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 58, 1)
    /**
     * Flag indicating whether the AGOM was estimated during this OD solution.
     * Example: /// Example: False
     * Constraints: No constraints specified.
     */
    val agomEst : Boolean
        get() {
            val o = __offset(60)
            return if(o != 0) 0.toByte() != bb.get(o + bb_pos) else false
        }
    /**
     * Model used to estimate the AGOM.
     * Example: /// Example: RandomWalk
     * Constraints: Minimum length = 0, Maximum length = 64
     */
    val agomModel : String?
        get() {
            val o = __offset(62)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val agomModelAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(62, 1)
    fun agomModelInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 62, 1)
    /**
     * OD parameter value for the Root Mean Square (RMS) convergence criteria to successfully close the OD solution.
     * Example: /// Example: 0.001
     * Constraints: No constraints specified.
     */
    val rmsConvergenceCriteria : Double
        get() {
            val o = __offset(64)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * The number of iterations taken for the algorithm to converge on an OD solution.
     * Example: /// Example: 8
     * Constraints: No constraints specified.
     */
    val numIterations : Int
        get() {
            val o = __offset(66)
            return if(o != 0) bb.getInt(o + bb_pos) else 0
        }
    /**
     * Array of UDL observation types (e.g. DOA, EO, RADAR, RF) of the observations that were accepted in this OD solution. See the associated acceptedObIds array for the records UUID(s), positionally corresponding to the record types in this array. The acceptedObTyps and acceptedObIds arrays must match in size.
     * Example: /// Example: ['EO', 'RADAR']
     * Constraints: No constraints specified.
     */
    fun acceptedObTyps(j: Int) : String? {
        val o = __offset(68)
        return if (o != 0) {
            __string(__vector(o) + j * 4)
        } else {
            null
        }
    }
    val acceptedObTypsLength : Int
        get() {
            val o = __offset(68); return if (o != 0) __vector_len(o) else 0
        }
    /**
     * Array of UDL data (observation) UUIDs that were accepted in this OD solution. See the associated acceptedObTyps array for the specific types of observations for the positionally corresponding UUIDs in this array (the two arrays must match in size).
     * Example: /// Example: ['EOOBSERVATION-ID1', 'RADAROBSERVATION-ID1']
     * Constraints: No constraints specified.
     */
    fun acceptedObIds(j: Int) : String? {
        val o = __offset(70)
        return if (o != 0) {
            __string(__vector(o) + j * 4)
        } else {
            null
        }
    }
    val acceptedObIdsLength : Int
        get() {
            val o = __offset(70); return if (o != 0) __vector_len(o) else 0
        }
    /**
     * Array of UDL observation types (e.g. DOA, EO, RADAR, RF) of the observations that were rejected in this OD solution. See the associated rejectedObIds array for the records UUID(s), positionally corresponding to the record types in this array. The rejectedObTyps and rejectedObIds arrays must match in size.
     * Example: /// Example: ['DOA', 'RF']
     * Constraints: No constraints specified.
     */
    fun rejectedObTyps(j: Int) : String? {
        val o = __offset(72)
        return if (o != 0) {
            __string(__vector(o) + j * 4)
        } else {
            null
        }
    }
    val rejectedObTypsLength : Int
        get() {
            val o = __offset(72); return if (o != 0) __vector_len(o) else 0
        }
    /**
     * Array of UDL data (observation) UUIDs that were rejected in this OD solution. See the associated rejectedObTyps array for the specific types of observations for the positionally corresponding UUIDs in this array (the two arrays must match in size).
     * Example: /// Example: ['DIFFOFARRIVAL-ID2', 'RFOBSERVATION-ID2']
     * Constraints: No constraints specified.
     */
    fun rejectedObIds(j: Int) : String? {
        val o = __offset(74)
        return if (o != 0) {
            __string(__vector(o) + j * 4)
        } else {
            null
        }
    }
    val rejectedObIdsLength : Int
        get() {
            val o = __offset(74); return if (o != 0) __vector_len(o) else 0
        }
    /**
     * Array of UDL UUIDs (idSensor) of the sensors that contributed observations in this OD solution.
     * Example: /// Example: ['SENSOR-ID1', 'SENSOR-ID2']
     * Constraints: No constraints specified.
     */
    fun sensorIds(j: Int) : String? {
        val o = __offset(76)
        return if (o != 0) {
            __string(__vector(o) + j * 4)
        } else {
            null
        }
    }
    val sensorIdsLength : Int
        get() {
            val o = __offset(76); return if (o != 0) __vector_len(o) else 0
        }
    /**
     * Time the row was created in the database, auto-populated by the system.
     * Example: /// Example: 2018-01-01T16:00:00.123Z
     * Constraints: No constraints specified.
     */
    val createdAt : String?
        get() {
            val o = __offset(78)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val createdAtAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(78, 1)
    fun createdAtInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 78, 1)
    /**
     * Application user who created the row in the database, auto-populated by the system.
     * Example: /// Example: some.user
     * Constraints: Minimum length = 1, Maximum length = 64
     */
    val createdBy : String?
        get() {
            val o = __offset(80)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val createdByAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(80, 1)
    fun createdByInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 80, 1)
    /**
     * The source data library from which this record was received. This could be a remote or tactical UDL or another data library. If null, the record should be assumed to have originated from the primary Enterprise UDL.
     * Example: /// Example: AXE
     * Constraints: Minimum length = 0, Maximum length = 64
     */
    val sourceDl : String?
        get() {
            val o = __offset(82)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val sourceDlAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(82, 1)
    fun sourceDlInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 82, 1)
    /**
     * Source of the data.
     * Example: /// Example: Bluestaq
     * Constraints: Minimum length = 1, Maximum length = 36
     */
    val source : String?
        get() {
            val o = __offset(84)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val sourceAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(84, 1)
    fun sourceInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 84, 1)
    /**
     * Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
     * Example: /// Example: THIRD_PARTY_DATASOURCE
     * Constraints: Minimum length = 0, Maximum length = 64
     */
    val origin : String?
        get() {
            val o = __offset(86)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val originAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(86, 1)
    fun originInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 86, 1)
    /**
     * The originating source network on which this record was created, auto-populated by the system.
     * Example: /// Example: OPS1
     * Constraints: Minimum length = 0, Maximum length = 32
     */
    val origNetwork : String?
        get() {
            val o = __offset(88)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val origNetworkAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(88, 1)
    fun origNetworkInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 88, 1)
    /**
     * Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
     * EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
     * REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
     * SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
     * TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
     * Example: /// Example: TEST
     * Constraints: Minimum length = 1, Maximum length = 32
     */
    val dataMode : Byte
        get() {
            val o = __offset(90)
            return if(o != 0) bb.get(o + bb_pos) else 0
        }
    companion object {
        fun validateVersion() = Constants.FLATBUFFERS_24_3_25()
        fun getRootAsOrbitDetermination_Ingest(_bb: ByteBuffer): OrbitDetermination_Ingest = getRootAsOrbitDetermination_Ingest(_bb, OrbitDetermination_Ingest())
        fun getRootAsOrbitDetermination_Ingest(_bb: ByteBuffer, obj: OrbitDetermination_Ingest): OrbitDetermination_Ingest {
            _bb.order(ByteOrder.LITTLE_ENDIAN)
            return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb))
        }
        fun OrbitDetermination_IngestBufferHasIdentifier(_bb: ByteBuffer) : Boolean = __has_identifier(_bb, "ORBI")
        fun createOrbitDetermination_Ingest(builder: FlatBufferBuilder, idOffset: Int, classificationMarkingOffset: Int, startTimeOffset: Int, endTimeOffset: Int, idOnOrbitOffset: Int, origObjectIdOffset: Int, satNo: Int, aprioriIdElsetOffset: Int, aprioriElsetOffset: Int, aprioriIdStateVectorOffset: Int, aprioriStateVectorOffset: Int, initialOd: Boolean, lastObStartOffset: Int, lastObEndOffset: Int, timeSpan: Double, effectiveFromOffset: Int, effectiveUntilOffset: Int, wrms: Double, previousWrms: Double, firstPassWrms: Double, bestPassWrms: Double, errorGrowthRate: Double, edr: Double, methodOffset: Int, methodSourceOffset: Int, fitSpan: Double, ballisticCoeffEst: Boolean, ballisticCoeffModelOffset: Int, agomEst: Boolean, agomModelOffset: Int, rmsConvergenceCriteria: Double, numIterations: Int, acceptedObTypsOffset: Int, acceptedObIdsOffset: Int, rejectedObTypsOffset: Int, rejectedObIdsOffset: Int, sensorIdsOffset: Int, createdAtOffset: Int, createdByOffset: Int, sourceDlOffset: Int, sourceOffset: Int, originOffset: Int, origNetworkOffset: Int, dataMode: Byte) : Int {
            builder.startTable(44)
            addRmsConvergenceCriteria(builder, rmsConvergenceCriteria)
            addFitSpan(builder, fitSpan)
            addEdr(builder, edr)
            addErrorGrowthRate(builder, errorGrowthRate)
            addBestPassWrms(builder, bestPassWrms)
            addFirstPassWrms(builder, firstPassWrms)
            addPreviousWrms(builder, previousWrms)
            addWrms(builder, wrms)
            addTimeSpan(builder, timeSpan)
            addOrigNetwork(builder, origNetworkOffset)
            addOrigin(builder, originOffset)
            addSource(builder, sourceOffset)
            addSourceDL(builder, sourceDlOffset)
            addCreatedBy(builder, createdByOffset)
            addCreatedAt(builder, createdAtOffset)
            addSensorIds(builder, sensorIdsOffset)
            addRejectedObIds(builder, rejectedObIdsOffset)
            addRejectedObTyps(builder, rejectedObTypsOffset)
            addAcceptedObIds(builder, acceptedObIdsOffset)
            addAcceptedObTyps(builder, acceptedObTypsOffset)
            addNumIterations(builder, numIterations)
            addAgomModel(builder, agomModelOffset)
            addBallisticCoeffModel(builder, ballisticCoeffModelOffset)
            addMethodSource(builder, methodSourceOffset)
            addMethod(builder, methodOffset)
            addEffectiveUntil(builder, effectiveUntilOffset)
            addEffectiveFrom(builder, effectiveFromOffset)
            addLastObEnd(builder, lastObEndOffset)
            addLastObStart(builder, lastObStartOffset)
            addAprioriStateVector(builder, aprioriStateVectorOffset)
            addAprioriIdStateVector(builder, aprioriIdStateVectorOffset)
            addAprioriElset(builder, aprioriElsetOffset)
            addAprioriIdElset(builder, aprioriIdElsetOffset)
            addSatNo(builder, satNo)
            addOrigObjectId(builder, origObjectIdOffset)
            addIdOnOrbit(builder, idOnOrbitOffset)
            addEndTime(builder, endTimeOffset)
            addStartTime(builder, startTimeOffset)
            addClassificationMarking(builder, classificationMarkingOffset)
            addId(builder, idOffset)
            addDataMode(builder, dataMode)
            addAgomEst(builder, agomEst)
            addBallisticCoeffEst(builder, ballisticCoeffEst)
            addInitialOD(builder, initialOd)
            return endOrbitDetermination_Ingest(builder)
        }
        fun startOrbitDetermination_Ingest(builder: FlatBufferBuilder) = builder.startTable(44)
        fun addId(builder: FlatBufferBuilder, id: Int) = builder.addOffset(0, id, 0)
        fun addClassificationMarking(builder: FlatBufferBuilder, classificationMarking: Int) = builder.addOffset(1, classificationMarking, 0)
        fun addStartTime(builder: FlatBufferBuilder, startTime: Int) = builder.addOffset(2, startTime, 0)
        fun addEndTime(builder: FlatBufferBuilder, endTime: Int) = builder.addOffset(3, endTime, 0)
        fun addIdOnOrbit(builder: FlatBufferBuilder, idOnOrbit: Int) = builder.addOffset(4, idOnOrbit, 0)
        fun addOrigObjectId(builder: FlatBufferBuilder, origObjectId: Int) = builder.addOffset(5, origObjectId, 0)
        fun addSatNo(builder: FlatBufferBuilder, satNo: Int) = builder.addInt(6, satNo, 0)
        fun addAprioriIdElset(builder: FlatBufferBuilder, aprioriIdElset: Int) = builder.addOffset(7, aprioriIdElset, 0)
        fun addAprioriElset(builder: FlatBufferBuilder, aprioriElset: Int) = builder.addOffset(8, aprioriElset, 0)
        fun addAprioriIdStateVector(builder: FlatBufferBuilder, aprioriIdStateVector: Int) = builder.addOffset(9, aprioriIdStateVector, 0)
        fun addAprioriStateVector(builder: FlatBufferBuilder, aprioriStateVector: Int) = builder.addOffset(10, aprioriStateVector, 0)
        fun addInitialOD(builder: FlatBufferBuilder, initialOd: Boolean) = builder.addBoolean(11, initialOd, false)
        fun addLastObStart(builder: FlatBufferBuilder, lastObStart: Int) = builder.addOffset(12, lastObStart, 0)
        fun addLastObEnd(builder: FlatBufferBuilder, lastObEnd: Int) = builder.addOffset(13, lastObEnd, 0)
        fun addTimeSpan(builder: FlatBufferBuilder, timeSpan: Double) = builder.addDouble(14, timeSpan, 0.0)
        fun addEffectiveFrom(builder: FlatBufferBuilder, effectiveFrom: Int) = builder.addOffset(15, effectiveFrom, 0)
        fun addEffectiveUntil(builder: FlatBufferBuilder, effectiveUntil: Int) = builder.addOffset(16, effectiveUntil, 0)
        fun addWrms(builder: FlatBufferBuilder, wrms: Double) = builder.addDouble(17, wrms, 0.0)
        fun addPreviousWrms(builder: FlatBufferBuilder, previousWrms: Double) = builder.addDouble(18, previousWrms, 0.0)
        fun addFirstPassWrms(builder: FlatBufferBuilder, firstPassWrms: Double) = builder.addDouble(19, firstPassWrms, 0.0)
        fun addBestPassWrms(builder: FlatBufferBuilder, bestPassWrms: Double) = builder.addDouble(20, bestPassWrms, 0.0)
        fun addErrorGrowthRate(builder: FlatBufferBuilder, errorGrowthRate: Double) = builder.addDouble(21, errorGrowthRate, 0.0)
        fun addEdr(builder: FlatBufferBuilder, edr: Double) = builder.addDouble(22, edr, 0.0)
        fun addMethod(builder: FlatBufferBuilder, method: Int) = builder.addOffset(23, method, 0)
        fun addMethodSource(builder: FlatBufferBuilder, methodSource: Int) = builder.addOffset(24, methodSource, 0)
        fun addFitSpan(builder: FlatBufferBuilder, fitSpan: Double) = builder.addDouble(25, fitSpan, 0.0)
        fun addBallisticCoeffEst(builder: FlatBufferBuilder, ballisticCoeffEst: Boolean) = builder.addBoolean(26, ballisticCoeffEst, false)
        fun addBallisticCoeffModel(builder: FlatBufferBuilder, ballisticCoeffModel: Int) = builder.addOffset(27, ballisticCoeffModel, 0)
        fun addAgomEst(builder: FlatBufferBuilder, agomEst: Boolean) = builder.addBoolean(28, agomEst, false)
        fun addAgomModel(builder: FlatBufferBuilder, agomModel: Int) = builder.addOffset(29, agomModel, 0)
        fun addRmsConvergenceCriteria(builder: FlatBufferBuilder, rmsConvergenceCriteria: Double) = builder.addDouble(30, rmsConvergenceCriteria, 0.0)
        fun addNumIterations(builder: FlatBufferBuilder, numIterations: Int) = builder.addInt(31, numIterations, 0)
        fun addAcceptedObTyps(builder: FlatBufferBuilder, acceptedObTyps: Int) = builder.addOffset(32, acceptedObTyps, 0)
        fun createAcceptedObTypsVector(builder: FlatBufferBuilder, data: IntArray) : Int {
            builder.startVector(4, data.size, 4)
            for (i in data.size - 1 downTo 0) {
                builder.addOffset(data[i])
            }
            return builder.endVector()
        }
        fun startAcceptedObTypsVector(builder: FlatBufferBuilder, numElems: Int) = builder.startVector(4, numElems, 4)
        fun addAcceptedObIds(builder: FlatBufferBuilder, acceptedObIds: Int) = builder.addOffset(33, acceptedObIds, 0)
        fun createAcceptedObIdsVector(builder: FlatBufferBuilder, data: IntArray) : Int {
            builder.startVector(4, data.size, 4)
            for (i in data.size - 1 downTo 0) {
                builder.addOffset(data[i])
            }
            return builder.endVector()
        }
        fun startAcceptedObIdsVector(builder: FlatBufferBuilder, numElems: Int) = builder.startVector(4, numElems, 4)
        fun addRejectedObTyps(builder: FlatBufferBuilder, rejectedObTyps: Int) = builder.addOffset(34, rejectedObTyps, 0)
        fun createRejectedObTypsVector(builder: FlatBufferBuilder, data: IntArray) : Int {
            builder.startVector(4, data.size, 4)
            for (i in data.size - 1 downTo 0) {
                builder.addOffset(data[i])
            }
            return builder.endVector()
        }
        fun startRejectedObTypsVector(builder: FlatBufferBuilder, numElems: Int) = builder.startVector(4, numElems, 4)
        fun addRejectedObIds(builder: FlatBufferBuilder, rejectedObIds: Int) = builder.addOffset(35, rejectedObIds, 0)
        fun createRejectedObIdsVector(builder: FlatBufferBuilder, data: IntArray) : Int {
            builder.startVector(4, data.size, 4)
            for (i in data.size - 1 downTo 0) {
                builder.addOffset(data[i])
            }
            return builder.endVector()
        }
        fun startRejectedObIdsVector(builder: FlatBufferBuilder, numElems: Int) = builder.startVector(4, numElems, 4)
        fun addSensorIds(builder: FlatBufferBuilder, sensorIds: Int) = builder.addOffset(36, sensorIds, 0)
        fun createSensorIdsVector(builder: FlatBufferBuilder, data: IntArray) : Int {
            builder.startVector(4, data.size, 4)
            for (i in data.size - 1 downTo 0) {
                builder.addOffset(data[i])
            }
            return builder.endVector()
        }
        fun startSensorIdsVector(builder: FlatBufferBuilder, numElems: Int) = builder.startVector(4, numElems, 4)
        fun addCreatedAt(builder: FlatBufferBuilder, createdAt: Int) = builder.addOffset(37, createdAt, 0)
        fun addCreatedBy(builder: FlatBufferBuilder, createdBy: Int) = builder.addOffset(38, createdBy, 0)
        fun addSourceDL(builder: FlatBufferBuilder, sourceDl: Int) = builder.addOffset(39, sourceDl, 0)
        fun addSource(builder: FlatBufferBuilder, source: Int) = builder.addOffset(40, source, 0)
        fun addOrigin(builder: FlatBufferBuilder, origin: Int) = builder.addOffset(41, origin, 0)
        fun addOrigNetwork(builder: FlatBufferBuilder, origNetwork: Int) = builder.addOffset(42, origNetwork, 0)
        fun addDataMode(builder: FlatBufferBuilder, dataMode: Byte) = builder.addByte(43, dataMode, 0)
        fun endOrbitDetermination_Ingest(builder: FlatBufferBuilder) : Int {
            val o = builder.endTable()
            return o
        }
        fun finishOrbitDeterminationIngestBuffer(builder: FlatBufferBuilder, offset: Int) = builder.finish(offset, "ORBI")
        fun finishSizePrefixedOrbitDetermination_IngestBuffer(builder: FlatBufferBuilder, offset: Int) = builder.finishSizePrefixed(offset, "ORBI")
    }
}
