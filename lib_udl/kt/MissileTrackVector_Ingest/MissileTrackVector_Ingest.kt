// automatically generated by the FlatBuffers compiler, do not modify

import com.google.flatbuffers.BaseVector
import com.google.flatbuffers.BooleanVector
import com.google.flatbuffers.ByteVector
import com.google.flatbuffers.Constants
import com.google.flatbuffers.DoubleVector
import com.google.flatbuffers.FlatBufferBuilder
import com.google.flatbuffers.FloatVector
import com.google.flatbuffers.LongVector
import com.google.flatbuffers.StringVector
import com.google.flatbuffers.Struct
import com.google.flatbuffers.Table
import com.google.flatbuffers.UnionVector
import java.nio.ByteBuffer
import java.nio.ByteOrder
import kotlin.math.sign

/**
 * /// Schema for Missile Track Vector data.
 */
@Suppress("unused")
class MissileTrackVector_Ingest : Table() {

    fun __init(_i: Int, _bb: ByteBuffer)  {
        __reset(_i, _bb)
    }
    fun __assign(_i: Int, _bb: ByteBuffer) : MissileTrackVector_Ingest {
        __init(_i, _bb)
        return this
    }
    /**
     * Type of vector represented (e.g. LOS, PREDICTED, STATE).
     * Example: /// Example: STATE
     * Constraints: Minimum length = 0, Maximum length = 16
     */
    val type : String?
        get() {
            val o = __offset(4)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val typeAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(4, 1)
    fun typeInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 4, 1)
    /**
     * Object to which this vector applies.
     * Example: /// Example: TARGET
     * Constraints: Minimum length = 0, Maximum length = 16
     */
    val object_ : String?
        get() {
            val o = __offset(6)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val object_AsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(6, 1)
    fun object_InByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 6, 1)
    /**
     * Vector timestamp in ISO8601 UTC format, with microsecond precision.
     * Example: /// Example: 2024-03-30T15:02:39.346768Z
     * Constraints: No constraints specified.
     */
    val epoch : String?
        get() {
            val o = __offset(8)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val epochAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(8, 1)
    fun epochInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 8, 1)
    /**
     * Unique identifier of the reporting sensor of the object.
     * Example: /// Example: a7e99418-b6d6-29ab-e767-440a989cce26
     * Constraints: Minimum length = 0, Maximum length = 36
     */
    val idSensor : String?
        get() {
            val o = __offset(10)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val idSensorAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(10, 1)
    fun idSensorInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 10, 1)
    /**
     * Optional identifier provided by the source to indicate the reporting sensor of the object. This may be an internal identifier and not necessarily a valid sensor ID.
     * Example: /// Example: ORIGSENSOR-ID
     * Constraints: Minimum length = 0, Maximum length = 46
     */
    val origSensorId : String?
        get() {
            val o = __offset(12)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val origSensorIdAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(12, 1)
    fun origSensorIdInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 12, 1)
    /**
     * Three element array, expressing the cartesian position vector of the target object, in kilometers, in the specified referenceFrame. If referenceFrame is null then ECEF should be assumed. The array element order is [x, y, z].
     * Example: /// Example: [-1456.91592, -2883.54041, 6165.55186]
     * Constraints: No constraints specified.
     */
    fun pos(j: Int) : String? {
        val o = __offset(14)
        return if (o != 0) {
            __string(__vector(o) + j * 4)
        } else {
            null
        }
    }
    val posLength : Int
        get() {
            val o = __offset(14); return if (o != 0) __vector_len(o) else 0
        }
    /**
     * Three element array, expressing the cartesian velocity vector of the target object, in kilometers/second, in the specified referenceFrame. If referenceFrame is null then ECEF should be assumed. The array element order is [x', y', z'].
     * Example: /// Example: [-1.21981, -6.60208, -3.36515]
     * Constraints: No constraints specified.
     */
    fun vel(j: Int) : String? {
        val o = __offset(16)
        return if (o != 0) {
            __string(__vector(o) + j * 4)
        } else {
            null
        }
    }
    val velLength : Int
        get() {
            val o = __offset(16); return if (o != 0) __vector_len(o) else 0
        }
    /**
     * Three element array, expressing the cartesian acceleration vector of the target object, in kilometers/second^2, in the specified referenceFrame. If referenceFrame is null then ECEF should be assumed. The array element order is [x'', y'', z''].
     * Example: /// Example: [0.59236, -0.03537, 0.35675]
     * Constraints: No constraints specified.
     */
    fun accel(j: Int) : String? {
        val o = __offset(18)
        return if (o != 0) {
            __string(__vector(o) + j * 4)
        } else {
            null
        }
    }
    val accelLength : Int
        get() {
            val o = __offset(18); return if (o != 0) __vector_len(o) else 0
        }
    /**
     * Track object course, in degrees clockwise from true north.
     * Example: /// Example: 7.3580153
     * Constraints: No constraints specified.
     */
    val course : Double
        get() {
            val o = __offset(20)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Track object speed, in kilometers/sec.
     * Example: /// Example: 15.03443
     * Constraints: No constraints specified.
     */
    val spd : Double
        get() {
            val o = __offset(22)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * The reference frame of the cartesian vector (ECEF, J2000). If the referenceFrame is null it is assumed to be ECEF.
     * Example: /// Example: ECEF
     * Constraints: Minimum length = 0, Maximum length = 24
     */
    val referenceFrame : String?
        get() {
            val o = __offset(24)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val referenceFrameAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(24, 1)
    fun referenceFrameInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 24, 1)
    /**
     * Covariance matrix, in kilometer and second based units, in the specified covReferenceFrame.
     * If the covReferenceFrame is null it is assumed to be UVW. The array values (1-45) represent the upper triangular half of the position-velocity-acceleration covariance matrix.
     * The covariance elements are position dependent within the array with values ordered as follows:
     * &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;x&nbsp;&nbsp;&nbsp;&nbsp;y&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;z&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;x'&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;y'&nbsp;&nbsp;&nbsp;&nbsp;z'&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;x"&nbsp;&nbsp;&nbsp;&nbsp;y"&nbsp;&nbsp;&nbsp;&nbsp;z"
     * x&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1&nbsp;&nbsp;&nbsp;&nbsp;2&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;3&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;4&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;5&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;6&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;7&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;8&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;9
     * y&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;10&nbsp;&nbsp;&nbsp;11&nbsp;&nbsp;&nbsp;12&nbsp;&nbsp;&nbsp;13&nbsp;&nbsp;&nbsp;14&nbsp;&nbsp;&nbsp;15&nbsp;&nbsp;&nbsp;16&nbsp;&nbsp;&nbsp;17
     * z&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;18&nbsp;&nbsp;&nbsp;19&nbsp;&nbsp;&nbsp;20&nbsp;&nbsp;&nbsp;21&nbsp;&nbsp;&nbsp;22&nbsp;&nbsp;&nbsp;23&nbsp;&nbsp;&nbsp;24
     * x'&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;25&nbsp;&nbsp;&nbsp;26&nbsp;&nbsp;&nbsp;27&nbsp;&nbsp;&nbsp;28&nbsp;&nbsp;&nbsp;29&nbsp;&nbsp;&nbsp;30
     * y'&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;31&nbsp;&nbsp;&nbsp;32&nbsp;&nbsp;&nbsp;33&nbsp;&nbsp;&nbsp;34&nbsp;&nbsp;&nbsp;35
     * z'&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;36&nbsp;&nbsp;&nbsp;37&nbsp;&nbsp;&nbsp;38&nbsp;&nbsp;&nbsp;39
     * x"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;40&nbsp;&nbsp;&nbsp;41&nbsp;&nbsp;&nbsp;42
     * y"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;43&nbsp;&nbsp;&nbsp;44
     * z"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;45
     * The cov array should contain only the upper right triangle values from top left down to bottom right, in order.
     * Example: /// Example: [1.1, 2.2, 3.3]
     * Constraints: No constraints specified.
     */
    fun cov(j: Int) : String? {
        val o = __offset(26)
        return if (o != 0) {
            __string(__vector(o) + j * 4)
        } else {
            null
        }
    }
    val covLength : Int
        get() {
            val o = __offset(26); return if (o != 0) __vector_len(o) else 0
        }
    /**
     * The reference frame of the covariance elements (ECEF, J2000, UVW). If the referenceFrame is null it is assumed to be UVW.
     * Example: /// Example: ECEF
     * Constraints: Minimum length = 0, Maximum length = 24
     */
    val covReferenceFrame : String?
        get() {
            val o = __offset(28)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val covReferenceFrameAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(28, 1)
    fun covReferenceFrameInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 28, 1)
    /**
     * WGS-84 object latitude subpoint at epoch, represented as -90 to 90 degrees (negative values south of equator).
     * Example: /// Example: 45.0
     * Constraints: No constraints specified.
     */
    val vectorLat : Double
        get() {
            val o = __offset(30)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * WGS-84 object longitude subpoint at epoch, represented as -180 to 180 degrees (negative values west of Prime Meridian).
     * Example: /// Example: 150.0
     * Constraints: No constraints specified.
     */
    val vectorLon : Double
        get() {
            val o = __offset(32)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Object altitude at epoch, expressed in kilometers above WGS-84 ellipsoid.
     * Example: /// Example: 25.0
     * Constraints: No constraints specified.
     */
    val vectorAlt : Double
        get() {
            val o = __offset(34)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Confidence of the vector, 0-100.
     * Example: /// Example: 100
     * Constraints: No constraints specified.
     */
    val confidence : Int
        get() {
            val o = __offset(36)
            return if(o != 0) bb.getInt(o + bb_pos) else 0
        }
    /**
     * Status of the vector (e.g. INITIAL, UPDATE).
     * Example: /// Example: INITIAL
     * Constraints: Minimum length = 0, Maximum length = 24
     */
    val status : String?
        get() {
            val o = __offset(38)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val statusAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(38, 1)
    fun statusInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 38, 1)
    /**
     * Source of the time value.
     * Example: /// Example: Sensor 1
     * Constraints: Minimum length = 0, Maximum length = 24
     */
    val timeSource : String?
        get() {
            val o = __offset(40)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val timeSourceAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(40, 1)
    fun timeSourceInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 40, 1)
    /**
     * The quaternion describing the attitude of the spacecraft with respect to the reference frame listed in the 'referenceFrame' field. The array element order convention is the three vector components, followed by the scalar component.
     * Example: /// Example: [0.03, 0.02, 0.01, 0.012]
     * Constraints: No constraints specified.
     */
    fun quat(j: Int) : String? {
        val o = __offset(42)
        return if (o != 0) {
            __string(__vector(o) + j * 4)
        } else {
            null
        }
    }
    val quatLength : Int
        get() {
            val o = __offset(42); return if (o != 0) __vector_len(o) else 0
        }
    /**
     * The flight azimuth associated with the current state vector (0-360 degrees).
     * Example: /// Example: 45.23
     * Constraints: No constraints specified.
     */
    val flightAz : Double
        get() {
            val o = __offset(44)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    companion object {
        fun validateVersion() = Constants.FLATBUFFERS_24_3_25()
        fun getRootAsMissileTrackVector_Ingest(_bb: ByteBuffer): MissileTrackVector_Ingest = getRootAsMissileTrackVector_Ingest(_bb, MissileTrackVector_Ingest())
        fun getRootAsMissileTrackVector_Ingest(_bb: ByteBuffer, obj: MissileTrackVector_Ingest): MissileTrackVector_Ingest {
            _bb.order(ByteOrder.LITTLE_ENDIAN)
            return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb))
        }
        fun MissileTrackVector_IngestBufferHasIdentifier(_bb: ByteBuffer) : Boolean = __has_identifier(_bb, "MISS")
        fun createMissileTrackVector_Ingest(builder: FlatBufferBuilder, typeOffset: Int, object_Offset: Int, epochOffset: Int, idSensorOffset: Int, origSensorIdOffset: Int, posOffset: Int, velOffset: Int, accelOffset: Int, course: Double, spd: Double, referenceFrameOffset: Int, covOffset: Int, covReferenceFrameOffset: Int, vectorLat: Double, vectorLon: Double, vectorAlt: Double, confidence: Int, statusOffset: Int, timeSourceOffset: Int, quatOffset: Int, flightAz: Double) : Int {
            builder.startTable(21)
            addFlightAz(builder, flightAz)
            addVectorAlt(builder, vectorAlt)
            addVectorLon(builder, vectorLon)
            addVectorLat(builder, vectorLat)
            addSpd(builder, spd)
            addCourse(builder, course)
            addQuat(builder, quatOffset)
            addTimeSource(builder, timeSourceOffset)
            addStatus(builder, statusOffset)
            addConfidence(builder, confidence)
            addCovReferenceFrame(builder, covReferenceFrameOffset)
            addCov(builder, covOffset)
            addReferenceFrame(builder, referenceFrameOffset)
            addAccel(builder, accelOffset)
            addVel(builder, velOffset)
            addPos(builder, posOffset)
            addOrigSensorId(builder, origSensorIdOffset)
            addIdSensor(builder, idSensorOffset)
            addEpoch(builder, epochOffset)
            addObject_(builder, object_Offset)
            addType(builder, typeOffset)
            return endMissileTrackVector_Ingest(builder)
        }
        fun startMissileTrackVector_Ingest(builder: FlatBufferBuilder) = builder.startTable(21)
        fun addType(builder: FlatBufferBuilder, type: Int) = builder.addOffset(0, type, 0)
        fun addObject_(builder: FlatBufferBuilder, object_: Int) = builder.addOffset(1, object_, 0)
        fun addEpoch(builder: FlatBufferBuilder, epoch: Int) = builder.addOffset(2, epoch, 0)
        fun addIdSensor(builder: FlatBufferBuilder, idSensor: Int) = builder.addOffset(3, idSensor, 0)
        fun addOrigSensorId(builder: FlatBufferBuilder, origSensorId: Int) = builder.addOffset(4, origSensorId, 0)
        fun addPos(builder: FlatBufferBuilder, pos: Int) = builder.addOffset(5, pos, 0)
        fun createPosVector(builder: FlatBufferBuilder, data: IntArray) : Int {
            builder.startVector(4, data.size, 4)
            for (i in data.size - 1 downTo 0) {
                builder.addOffset(data[i])
            }
            return builder.endVector()
        }
        fun startPosVector(builder: FlatBufferBuilder, numElems: Int) = builder.startVector(4, numElems, 4)
        fun addVel(builder: FlatBufferBuilder, vel: Int) = builder.addOffset(6, vel, 0)
        fun createVelVector(builder: FlatBufferBuilder, data: IntArray) : Int {
            builder.startVector(4, data.size, 4)
            for (i in data.size - 1 downTo 0) {
                builder.addOffset(data[i])
            }
            return builder.endVector()
        }
        fun startVelVector(builder: FlatBufferBuilder, numElems: Int) = builder.startVector(4, numElems, 4)
        fun addAccel(builder: FlatBufferBuilder, accel: Int) = builder.addOffset(7, accel, 0)
        fun createAccelVector(builder: FlatBufferBuilder, data: IntArray) : Int {
            builder.startVector(4, data.size, 4)
            for (i in data.size - 1 downTo 0) {
                builder.addOffset(data[i])
            }
            return builder.endVector()
        }
        fun startAccelVector(builder: FlatBufferBuilder, numElems: Int) = builder.startVector(4, numElems, 4)
        fun addCourse(builder: FlatBufferBuilder, course: Double) = builder.addDouble(8, course, 0.0)
        fun addSpd(builder: FlatBufferBuilder, spd: Double) = builder.addDouble(9, spd, 0.0)
        fun addReferenceFrame(builder: FlatBufferBuilder, referenceFrame: Int) = builder.addOffset(10, referenceFrame, 0)
        fun addCov(builder: FlatBufferBuilder, cov: Int) = builder.addOffset(11, cov, 0)
        fun createCovVector(builder: FlatBufferBuilder, data: IntArray) : Int {
            builder.startVector(4, data.size, 4)
            for (i in data.size - 1 downTo 0) {
                builder.addOffset(data[i])
            }
            return builder.endVector()
        }
        fun startCovVector(builder: FlatBufferBuilder, numElems: Int) = builder.startVector(4, numElems, 4)
        fun addCovReferenceFrame(builder: FlatBufferBuilder, covReferenceFrame: Int) = builder.addOffset(12, covReferenceFrame, 0)
        fun addVectorLat(builder: FlatBufferBuilder, vectorLat: Double) = builder.addDouble(13, vectorLat, 0.0)
        fun addVectorLon(builder: FlatBufferBuilder, vectorLon: Double) = builder.addDouble(14, vectorLon, 0.0)
        fun addVectorAlt(builder: FlatBufferBuilder, vectorAlt: Double) = builder.addDouble(15, vectorAlt, 0.0)
        fun addConfidence(builder: FlatBufferBuilder, confidence: Int) = builder.addInt(16, confidence, 0)
        fun addStatus(builder: FlatBufferBuilder, status: Int) = builder.addOffset(17, status, 0)
        fun addTimeSource(builder: FlatBufferBuilder, timeSource: Int) = builder.addOffset(18, timeSource, 0)
        fun addQuat(builder: FlatBufferBuilder, quat: Int) = builder.addOffset(19, quat, 0)
        fun createQuatVector(builder: FlatBufferBuilder, data: IntArray) : Int {
            builder.startVector(4, data.size, 4)
            for (i in data.size - 1 downTo 0) {
                builder.addOffset(data[i])
            }
            return builder.endVector()
        }
        fun startQuatVector(builder: FlatBufferBuilder, numElems: Int) = builder.startVector(4, numElems, 4)
        fun addFlightAz(builder: FlatBufferBuilder, flightAz: Double) = builder.addDouble(20, flightAz, 0.0)
        fun endMissileTrackVector_Ingest(builder: FlatBufferBuilder) : Int {
            val o = builder.endTable()
            return o
        }
        fun finishMissileTrackVectorIngestBuffer(builder: FlatBufferBuilder, offset: Int) = builder.finish(offset, "MISS")
        fun finishSizePrefixedMissileTrackVector_IngestBuffer(builder: FlatBufferBuilder, offset: Int) = builder.finishSizePrefixed(offset, "MISS")
    }
}
