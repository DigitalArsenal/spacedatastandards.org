// automatically generated by the FlatBuffers compiler, do not modify

import com.google.flatbuffers.BaseVector
import com.google.flatbuffers.BooleanVector
import com.google.flatbuffers.ByteVector
import com.google.flatbuffers.Constants
import com.google.flatbuffers.DoubleVector
import com.google.flatbuffers.FlatBufferBuilder
import com.google.flatbuffers.FloatVector
import com.google.flatbuffers.LongVector
import com.google.flatbuffers.StringVector
import com.google.flatbuffers.Struct
import com.google.flatbuffers.Table
import com.google.flatbuffers.UnionVector
import java.nio.ByteBuffer
import java.nio.ByteOrder
import kotlin.math.sign

/**
 * /// Health state information.
 */
@Suppress("unused")
class EvacHealthState_Full : Table() {

    fun __init(_i: Int, _bb: ByteBuffer)  {
        __reset(_i, _bb)
    }
    fun __assign(_i: Int, _bb: ByteBuffer) : EvacHealthState_Full {
        __init(_i, _bb)
        return this
    }
    /**
     * Generalized state of health type (BIOLOGICAL, CHEMICAL, COGNITIVE, HYDRATION, LIFE SIGN, RADIATION, SHOCK, THERMAL).
     * Example: /// Example: COGNITIVE
     * Constraints: Minimum length = 0, Maximum length = 32
     */
    val type : String?
        get() {
            val o = __offset(4)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val typeAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(4, 1)
    fun typeInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 4, 1)
    /**
     * Medical color code used to quickly identify various medical state (e.g. AMBER, BLACK, BLUE, GRAY, NORMAL, RED).
     * Example: /// Example: BLUE
     * Constraints: Minimum length = 0, Maximum length = 32
     */
    val healthStateCode : String?
        get() {
            val o = __offset(6)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val healthStateCodeAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(6, 1)
    fun healthStateCodeInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 6, 1)
    /**
     * Medical confidence factor.
     * Example: /// Example: 1
     * Constraints: No constraints specified.
     */
    val medConfFactor : Int
        get() {
            val o = __offset(8)
            return if(o != 0) bb.getInt(o + bb_pos) else 0
        }
    /**
     * Datetime of the health state diagnosis in ISO 8601 UTC datetime format.
     * Example: /// Example: 2021-10-15T16:00:00.123Z
     * Constraints: No constraints specified.
     */
    val time : String?
        get() {
            val o = __offset(10)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val timeAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(10, 1)
    fun timeInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 10, 1)
    companion object {
        fun validateVersion() = Constants.FLATBUFFERS_24_3_25()
        fun getRootAsEvacHealthState_Full(_bb: ByteBuffer): EvacHealthState_Full = getRootAsEvacHealthState_Full(_bb, EvacHealthState_Full())
        fun getRootAsEvacHealthState_Full(_bb: ByteBuffer, obj: EvacHealthState_Full): EvacHealthState_Full {
            _bb.order(ByteOrder.LITTLE_ENDIAN)
            return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb))
        }
        fun EvacHealthState_FullBufferHasIdentifier(_bb: ByteBuffer) : Boolean = __has_identifier(_bb, "EVAC")
        fun createEvacHealthState_Full(builder: FlatBufferBuilder, typeOffset: Int, healthStateCodeOffset: Int, medConfFactor: Int, timeOffset: Int) : Int {
            builder.startTable(4)
            addTime(builder, timeOffset)
            addMedConfFactor(builder, medConfFactor)
            addHealthStateCode(builder, healthStateCodeOffset)
            addType(builder, typeOffset)
            return endEvacHealthState_Full(builder)
        }
        fun startEvacHealthState_Full(builder: FlatBufferBuilder) = builder.startTable(4)
        fun addType(builder: FlatBufferBuilder, type: Int) = builder.addOffset(0, type, 0)
        fun addHealthStateCode(builder: FlatBufferBuilder, healthStateCode: Int) = builder.addOffset(1, healthStateCode, 0)
        fun addMedConfFactor(builder: FlatBufferBuilder, medConfFactor: Int) = builder.addInt(2, medConfFactor, 0)
        fun addTime(builder: FlatBufferBuilder, time: Int) = builder.addOffset(3, time, 0)
        fun endEvacHealthState_Full(builder: FlatBufferBuilder) : Int {
            val o = builder.endTable()
            return o
        }
        fun finishEvacHealthStateFullBuffer(builder: FlatBufferBuilder, offset: Int) = builder.finish(offset, "EVAC")
        fun finishSizePrefixedEvacHealthState_FullBuffer(builder: FlatBufferBuilder, offset: Int) = builder.finishSizePrefixed(offset, "EVAC")
    }
}
