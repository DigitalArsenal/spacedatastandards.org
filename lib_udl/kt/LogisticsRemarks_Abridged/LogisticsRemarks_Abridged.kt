// automatically generated by the FlatBuffers compiler, do not modify

import com.google.flatbuffers.BaseVector
import com.google.flatbuffers.BooleanVector
import com.google.flatbuffers.ByteVector
import com.google.flatbuffers.Constants
import com.google.flatbuffers.DoubleVector
import com.google.flatbuffers.FlatBufferBuilder
import com.google.flatbuffers.FloatVector
import com.google.flatbuffers.LongVector
import com.google.flatbuffers.StringVector
import com.google.flatbuffers.Struct
import com.google.flatbuffers.Table
import com.google.flatbuffers.UnionVector
import java.nio.ByteBuffer
import java.nio.ByteOrder
import kotlin.math.sign

/**
 * /// Remarks associated with this LogisticsSupport record.
 */
@Suppress("unused")
class LogisticsRemarks_Abridged : Table() {

    fun __init(_i: Int, _bb: ByteBuffer)  {
        __reset(_i, _bb)
    }
    fun __assign(_i: Int, _bb: ByteBuffer) : LogisticsRemarks_Abridged {
        __init(_i, _bb)
        return this
    }
    /**
     * User who published the remark.
     * Example: /// Example: JSMITH
     * Constraints: Minimum length = 0, Maximum length = 32
     */
    val username : String?
        get() {
            val o = __offset(4)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val usernameAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(4, 1)
    fun usernameInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 4, 1)
    /**
     * Text of the remark.
     * Example: /// Example: EXAMPLE REMARK
     * Constraints: Minimum length = 0, Maximum length = 4000
     */
    val remark : String?
        get() {
            val o = __offset(6)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val remarkAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(6, 1)
    fun remarkInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 6, 1)
    /**
     * Date the remark was published or updated, in ISO 8601 UTC format, with millisecond precision.
     * Example: /// Example: 2023-07-17T10:30:00.123Z
     * Constraints: No constraints specified.
     */
    val lastChanged : String?
        get() {
            val o = __offset(8)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val lastChangedAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(8, 1)
    fun lastChangedInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 8, 1)
    companion object {
        fun validateVersion() = Constants.FLATBUFFERS_24_3_25()
        fun getRootAsLogisticsRemarks_Abridged(_bb: ByteBuffer): LogisticsRemarks_Abridged = getRootAsLogisticsRemarks_Abridged(_bb, LogisticsRemarks_Abridged())
        fun getRootAsLogisticsRemarks_Abridged(_bb: ByteBuffer, obj: LogisticsRemarks_Abridged): LogisticsRemarks_Abridged {
            _bb.order(ByteOrder.LITTLE_ENDIAN)
            return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb))
        }
        fun LogisticsRemarks_AbridgedBufferHasIdentifier(_bb: ByteBuffer) : Boolean = __has_identifier(_bb, "LOGI")
        fun createLogisticsRemarks_Abridged(builder: FlatBufferBuilder, usernameOffset: Int, remarkOffset: Int, lastChangedOffset: Int) : Int {
            builder.startTable(3)
            addLastChanged(builder, lastChangedOffset)
            addRemark(builder, remarkOffset)
            addUsername(builder, usernameOffset)
            return endLogisticsRemarks_Abridged(builder)
        }
        fun startLogisticsRemarks_Abridged(builder: FlatBufferBuilder) = builder.startTable(3)
        fun addUsername(builder: FlatBufferBuilder, username: Int) = builder.addOffset(0, username, 0)
        fun addRemark(builder: FlatBufferBuilder, remark: Int) = builder.addOffset(1, remark, 0)
        fun addLastChanged(builder: FlatBufferBuilder, lastChanged: Int) = builder.addOffset(2, lastChanged, 0)
        fun endLogisticsRemarks_Abridged(builder: FlatBufferBuilder) : Int {
            val o = builder.endTable()
            return o
        }
        fun finishLogisticsRemarksAbridgedBuffer(builder: FlatBufferBuilder, offset: Int) = builder.finish(offset, "LOGI")
        fun finishSizePrefixedLogisticsRemarks_AbridgedBuffer(builder: FlatBufferBuilder, offset: Int) = builder.finishSizePrefixed(offset, "LOGI")
    }
}
