// automatically generated by the FlatBuffers compiler, do not modify

import com.google.flatbuffers.BaseVector
import com.google.flatbuffers.BooleanVector
import com.google.flatbuffers.ByteVector
import com.google.flatbuffers.Constants
import com.google.flatbuffers.DoubleVector
import com.google.flatbuffers.FlatBufferBuilder
import com.google.flatbuffers.FloatVector
import com.google.flatbuffers.LongVector
import com.google.flatbuffers.StringVector
import com.google.flatbuffers.Struct
import com.google.flatbuffers.Table
import com.google.flatbuffers.UnionVector
import java.nio.ByteBuffer
import java.nio.ByteOrder
import kotlin.math.sign

/**
 * /// Model representation of additional detailed observation data for electro-optical based sensor phenomenologies.
 */
@Suppress("unused")
class EOObservationDetails_Ingest : Table() {

    fun __init(_i: Int, _bb: ByteBuffer)  {
        __reset(_i, _bb)
    }
    fun __assign(_i: Int, _bb: ByteBuffer) : EOObservationDetails_Ingest {
        __init(_i, _bb)
        return this
    }
    /**
     * Unique identifier of the parent EOObservation.
     * Example: /// Example: EOOBSERVATION-ID
     * Constraints: Minimum length = 1, Maximum length = 36
     */
    val idEoobservation : String?
        get() {
            val o = __offset(4)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val idEoobservationAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(4, 1)
    fun idEoobservationInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 4, 1)
    /**
     * Classification marking of the data in IC/CAPCO Portion-marked format, will be set to EOObservation classificationMarking if blank.
     * Example: /// Example: U
     * Constraints: Minimum length = 1, Maximum length = 128
     */
    val classificationMarking : String?
        get() {
            val o = __offset(6)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val classificationMarkingAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(6, 1)
    fun classificationMarkingInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 6, 1)
    /**
     * Ob detection time in ISO 8601 UTC with microsecond precision, will be set to EOObservation obTime if blank.
     * Example: /// Example: 2018-01-01T16:00:00.123456Z
     * Constraints: No constraints specified.
     */
    val obTime : String?
        get() {
            val o = __offset(8)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val obTimeAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(8, 1)
    fun obTimeInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 8, 1)
    /**
     * Predicted Right Ascension of the Target object from the frame of reference of the sensor (J2000, geocentric velocity aberration). SGP4 and VCMs produce geocentric origin and velocity aberration and subtracting the sensor geocentric position of the sensor places in its reference frame.
     * Example: /// Example: 10.1
     * Constraints: No constraints specified.
     */
    val predictedRa : Double
        get() {
            val o = __offset(10)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Predicted Declination of the Target object from the frame of reference of the sensor (J2000, geocentric velocity aberration). SGP4 and VCMs produce geocentric origin and velocity aberration and subtracting the sensor geocentric position of the sensor places in its reference frame.
     * Example: /// Example: 10.1
     * Constraints: No constraints specified.
     */
    val predictedDeclination : Double
        get() {
            val o = __offset(12)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Predicted Azimuth angle of the target object from a ground -based sensor (no atmospheric refraction correction required). AZ_EL implies apparent topocentric place in true of date reference frame as seen from the observer with aberration due to the observer velocity and light travel time applied.
     * Example: /// Example: 10.1
     * Constraints: No constraints specified.
     */
    val predictedAzimuth : Double
        get() {
            val o = __offset(14)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Predicted elevation angle of the target object from a ground -based sensor (no atmospheric refraction correction required). AZ_EL implies apparent topocentric place in true of date reference frame as seen from the observer with aberration due to the observer velocity and light travel time applied.
     * Example: /// Example: 10.1
     * Constraints: No constraints specified.
     */
    val predictedElevation : Double
        get() {
            val o = __offset(16)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Azimuth angle of the sun from a ground-based telescope (no atmospheric refraction correction required) the observer with aberration due to the observer velocity and light travel time applied.
     * Example: /// Example: 10.1
     * Constraints: No constraints specified.
     */
    val sunAzimuth : Double
        get() {
            val o = __offset(18)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Elevation angle of the sun from a ground-based telescope (no atmospheric refraction correction required).
     * Example: /// Example: 10.1
     * Constraints: No constraints specified.
     */
    val sunElevation : Double
        get() {
            val o = __offset(20)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * The value is the number of spectral filters used.
     * Example: /// Example: 10
     * Constraints: No constraints specified.
     */
    val numSpectralFilters : Int
        get() {
            val o = __offset(22)
            return if(o != 0) bb.getInt(o + bb_pos) else 0
        }
    /**
     * Array of the SpectralFilters keywords, must be present for all values n=1 to numSpectralFilters, in incrementing order of n, and for no other values of n.
     * Example: /// Example: ['Keyword1', 'Keyword2']
     * Constraints: No constraints specified.
     */
    fun spectralFilters(j: Int) : String? {
        val o = __offset(24)
        return if (o != 0) {
            __string(__vector(o) + j * 4)
        } else {
            null
        }
    }
    val spectralFiltersLength : Int
        get() {
            val o = __offset(24); return if (o != 0) __vector_len(o) else 0
        }
    /**
     * This is the in-band average irradiance of a 0th mag source. Must be present for all values n=1 to numSpectralFilters, in incrementing order of n, and for no other values of n.  Units = W/m2/nm.
     * Example: /// Example: [1.1, 2.1, 3.1]
     * Constraints: No constraints specified.
     */
    fun spectralZmfl(j: Int) : String? {
        val o = __offset(26)
        return if (o != 0) {
            __string(__vector(o) + j * 4)
        } else {
            null
        }
    }
    val spectralZmflLength : Int
        get() {
            val o = __offset(26); return if (o != 0) __vector_len(o) else 0
        }
    /**
     * This is the in-band solar magnitude at 1 A.U. Must be present for all values n=1 to numSpectralFilters, in incrementing order of n, and for no other values of n.  Units = mag.
     * Example: /// Example: [1.1, 2.1, 3.1]
     * Constraints: No constraints specified.
     */
    fun spectralFilterSolarMag(j: Int) : String? {
        val o = __offset(28)
        return if (o != 0) {
            __string(__vector(o) + j * 4)
        } else {
            null
        }
    }
    val spectralFilterSolarMagLength : Int
        get() {
            val o = __offset(28); return if (o != 0) __vector_len(o) else 0
        }
    /**
     * This is the value for the zero-point calculated for each filter denoted in spectralFilters. It is the difference between the catalog mag and instrumental mag for a set of standard stars. For use with All Sky photometry. Must be present for all values n=1 to numSpectralFilters, in incrementing order of n, and for no other values of n.
     * Example: /// Example: [1.1, 2.1, 3.1]
     * Constraints: No constraints specified.
     */
    fun zeroPoints(j: Int) : String? {
        val o = __offset(30)
        return if (o != 0) {
            __string(__vector(o) + j * 4)
        } else {
            null
        }
    }
    val zeroPointsLength : Int
        get() {
            val o = __offset(30); return if (o != 0) __vector_len(o) else 0
        }
    /**
     * This is the uncertainty in the zero point for the filter denoted in spectralFilters. For use with All Sky photometry. Must be present for all values n=1 to numSpectralFilters, in incrementing order of n, and for no other values of n.
     * Example: /// Example: [1.1, 2.1, 3.1]
     * Constraints: No constraints specified.
     */
    fun zeroPointsUnc(j: Int) : String? {
        val o = __offset(32)
        return if (o != 0) {
            __string(__vector(o) + j * 4)
        } else {
            null
        }
    }
    val zeroPointsUncLength : Int
        get() {
            val o = __offset(32); return if (o != 0) __vector_len(o) else 0
        }
    /**
     * The extinction coefficient computed for the nth filter. Must be present for all values n=1 to numSpectralFilters, in incrementing order of n, and for no other values of n. Units = mag/airmass.
     * Example: /// Example: [1.1, 2.1, 3.1]
     * Constraints: No constraints specified.
     */
    fun extinctionCoeffs(j: Int) : String? {
        val o = __offset(34)
        return if (o != 0) {
            __string(__vector(o) + j * 4)
        } else {
            null
        }
    }
    val extinctionCoeffsLength : Int
        get() {
            val o = __offset(34); return if (o != 0) __vector_len(o) else 0
        }
    /**
     * This is the uncertainty in the extinction coefficient for the nth filter. Must be present for all values n=1 to numSpectralFilters, in incrementing order of n, and for no other values of n. -9999 for space-based sensors. Units = mag/airmass.
     * Example: /// Example: [1.1, 2.1, 3.1]
     * Constraints: No constraints specified.
     */
    fun extinctionCoeffsUnc(j: Int) : String? {
        val o = __offset(36)
        return if (o != 0) {
            __string(__vector(o) + j * 4)
        } else {
            null
        }
    }
    val extinctionCoeffsUncLength : Int
        get() {
            val o = __offset(36); return if (o != 0) __vector_len(o) else 0
        }
    /**
     * Color coefficient for filter n for a space-based sensor where there is no atmospheric extinction. Must be present for all values n=1 to numSpectralFilters, in incrementing order of n, and for no other values of n.
     * Example: /// Example: [1.1, 2.1, 3.1]
     * Constraints: No constraints specified.
     */
    fun colorCoeffs(j: Int) : String? {
        val o = __offset(38)
        return if (o != 0) {
            __string(__vector(o) + j * 4)
        } else {
            null
        }
    }
    val colorCoeffsLength : Int
        get() {
            val o = __offset(38); return if (o != 0) __vector_len(o) else 0
        }
    /**
     * The value is the number of neutral density filters used.
     * Example: /// Example: 12
     * Constraints: No constraints specified.
     */
    val numNeutralDensityFilters : Int
        get() {
            val o = __offset(40)
            return if(o != 0) bb.getInt(o + bb_pos) else 0
        }
    /**
     * Must be present for all values n=1 to numNeutralDensityFilters, in incrementing order of n, and for no other values of n.
     * Example: /// Example: ['numNeutralDensityFilters1', 'numNeutralDensityFilters2']
     * Constraints: No constraints specified.
     */
    fun neutralDensityFilterNames(j: Int) : String? {
        val o = __offset(42)
        return if (o != 0) {
            __string(__vector(o) + j * 4)
        } else {
            null
        }
    }
    val neutralDensityFilterNamesLength : Int
        get() {
            val o = __offset(42); return if (o != 0) __vector_len(o) else 0
        }
    /**
     * The transmission of the nth neutral density filter. Must be present for all values n=1 to numNeutralDensityFilters, in incrementing order of n, and for no other values of n.
     * Example: /// Example: [1.1, 2.1, 3.1]
     * Constraints: No constraints specified.
     */
    fun neutralDensityFilterTransmissions(j: Int) : String? {
        val o = __offset(44)
        return if (o != 0) {
            __string(__vector(o) + j * 4)
        } else {
            null
        }
    }
    val neutralDensityFilterTransmissionsLength : Int
        get() {
            val o = __offset(44); return if (o != 0) __vector_len(o) else 0
        }
    /**
     * This is the uncertainty in the transmission for the nth filter. Must be present for all values n=1 to numNeutralDensityFilters, in incrementing order of n, and for no other values of n.
     * Example: /// Example: [1.1, 2.1, 3.1]
     * Constraints: No constraints specified.
     */
    fun neutralDensityFilterTransmissionsUnc(j: Int) : String? {
        val o = __offset(46)
        return if (o != 0) {
            __string(__vector(o) + j * 4)
        } else {
            null
        }
    }
    val neutralDensityFilterTransmissionsUncLength : Int
        get() {
            val o = __offset(46); return if (o != 0) __vector_len(o) else 0
        }
    /**
     * Some sensors have gain settings. This value is the gain used during the observation in units e-/ADU. If no gain is used, the value = 1.
     * Example: /// Example: 234.2
     * Constraints: No constraints specified.
     */
    val gain : Double
        get() {
            val o = __offset(48)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Sensor instantaneous field of view (ratio of pixel pitch to focal length).
     * Example: /// Example: 0.2
     * Constraints: No constraints specified.
     */
    val ifov : Double
        get() {
            val o = __offset(50)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Pixel array size (width) in pixels.
     * Example: /// Example: 12
     * Constraints: No constraints specified.
     */
    val pixelArrayWidth : Int
        get() {
            val o = __offset(52)
            return if(o != 0) bb.getInt(o + bb_pos) else 0
        }
    /**
     * Pixel array size (height) in pixels.
     * Example: /// Example: 23
     * Constraints: No constraints specified.
     */
    val pixelArrayHeight : Int
        get() {
            val o = __offset(54)
            return if(o != 0) bb.getInt(o + bb_pos) else 0
        }
    /**
     * Minimum valid pixel value, this is typically 0.
     * Example: /// Example: 12
     * Constraints: No constraints specified.
     */
    val pixelMin : Int
        get() {
            val o = __offset(56)
            return if(o != 0) bb.getInt(o + bb_pos) else 0
        }
    /**
     * Maximum valid pixel value, this is defined as 2^(number of bits per pixel). For example, a CCD with 8-bitpixels, would have a maximum valid pixel value of 2^8 = 256. This can represent the saturation value of the detector, but some sensors will saturate at a value significantly lower than full well depth. This is the analog-to-digital conversion (ADC) saturation value.
     * Example: /// Example: 256
     * Constraints: No constraints specified.
     */
    val pixelMax : Int
        get() {
            val o = __offset(58)
            return if(o != 0) bb.getInt(o + bb_pos) else 0
        }
    /**
     * Observed centroid row number on the focal plane in pixels (0 is top edge, 0.5 is center of pixels along top of image).
     * Example: /// Example: 0.1
     * Constraints: No constraints specified.
     */
    val centroidRow : Double
        get() {
            val o = __offset(60)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Observed centroid column number on the focal plane in pixels (0 is left edge, 0.5 is center of pixels along left of image).
     * Example: /// Example: 0.5
     * Constraints: No constraints specified.
     */
    val centroidColumn : Double
        get() {
            val o = __offset(62)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Spatial variance of image distribution in vertical direction measured in pixels squared.
     * Example: /// Example: 0.1
     * Constraints: No constraints specified.
     */
    val rowVariance : Double
        get() {
            val o = __offset(64)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Spatial variance of image distribution in horizontal direction measured in pixels squared.
     * Example: /// Example: 0.1
     * Constraints: No constraints specified.
     */
    val columnVariance : Double
        get() {
            val o = __offset(66)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Spatial covariance of image distribution across horizontal and vertical directions measured in pixels squared.
     * Example: /// Example: 0.01
     * Constraints: No constraints specified.
     */
    val rowColCov : Double
        get() {
            val o = __offset(68)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * An array of measurements that correspond to the distance from the streak center measured from the optical image in pixels that show change over an interval of time. The array length is dependent on the length of the streak. The distFromStreakCenter, surfBrightness, and surfBrightnessUnc arrays will match in size.
     * Example: /// Example: [-127.153, -126.153, -125.153]
     * Constraints: No constraints specified.
     */
    fun distFromStreakCenter(j: Int) : String? {
        val o = __offset(70)
        return if (o != 0) {
            __string(__vector(o) + j * 4)
        } else {
            null
        }
    }
    val distFromStreakCenterLength : Int
        get() {
            val o = __offset(70); return if (o != 0) __vector_len(o) else 0
        }
    /**
     * An array of surface brightness measurements in magnitudes per square arcsecond from the optical image that show change over an interval of time. The array length is dependent on the length of the streak. The distFromStreakCenter, surfBrightness, and surfBrightnessUnc arrays will match in size.
     * Example: /// Example: [21.01, 21.382, 21.725]
     * Constraints: No constraints specified.
     */
    fun surfBrightness(j: Int) : String? {
        val o = __offset(72)
        return if (o != 0) {
            __string(__vector(o) + j * 4)
        } else {
            null
        }
    }
    val surfBrightnessLength : Int
        get() {
            val o = __offset(72); return if (o != 0) __vector_len(o) else 0
        }
    /**
     * An array of surface brightness uncertainty measurements in magnitudes per square arcsecond from the optical image that show change over an interval of time. The array length is dependent on the length of the streak. The distFromStreakCenter, surfBrightness, and surfBrightnessUnc arrays will match in size.
     * Example: /// Example: [0.165, 0.165, 0.165]
     * Constraints: No constraints specified.
     */
    fun surfBrightnessUnc(j: Int) : String? {
        val o = __offset(74)
        return if (o != 0) {
            __string(__vector(o) + j * 4)
        } else {
            null
        }
    }
    val surfBrightnessUncLength : Int
        get() {
            val o = __offset(74); return if (o != 0) __vector_len(o) else 0
        }
    /**
     * Uncertainty in the times reported in UTC in seconds.
     * Example: /// Example: 13.1
     * Constraints: No constraints specified.
     */
    val timesUnc : Double
        get() {
            val o = __offset(76)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Operating temperature of CCD recorded during exposure or measured during calibrations in K.
     * Example: /// Example: 123.4
     * Constraints: No constraints specified.
     */
    val ccdTemp : Double
        get() {
            val o = __offset(78)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * The reference number, x, where x ranges from 1 to n, where n is the number specified in spectralFilters that corresponds to the spectral filter given in the corresponding spectralFilterNames.
     * Example: /// Example: 23
     * Constraints: No constraints specified.
     */
    val currentSpectralFilterNum : Int
        get() {
            val o = __offset(80)
            return if(o != 0) bb.getInt(o + bb_pos) else 0
        }
    /**
     * The reference number n, in neutralDensityFilters for the currently used neutral density filter.
     * Example: /// Example: 3
     * Constraints: No constraints specified.
     */
    val currentNeutralDensityFilterNum : Int
        get() {
            val o = __offset(82)
            return if(o != 0) bb.getInt(o + bb_pos) else 0
        }
    /**
     * The number of pixels binned horizontally.
     * Example: /// Example: 12
     * Constraints: No constraints specified.
     */
    val binningHoriz : Int
        get() {
            val o = __offset(84)
            return if(o != 0) bb.getInt(o + bb_pos) else 0
        }
    /**
     * The number of pixels binned vertically.
     * Example: /// Example: 14
     * Constraints: No constraints specified.
     */
    val binningVert : Int
        get() {
            val o = __offset(86)
            return if(o != 0) bb.getInt(o + bb_pos) else 0
        }
    /**
     * Number of stars used in photometric fit count.
     * Example: /// Example: 23
     * Constraints: No constraints specified.
     */
    val pcalNumStars : Int
        get() {
            val o = __offset(88)
            return if(o != 0) bb.getInt(o + bb_pos) else 0
        }
    /**
     * The x centroid position on the CCD of the target object in pixels.
     * Example: /// Example: 123.3
     * Constraints: No constraints specified.
     */
    val ccdObjPosX : Double
        get() {
            val o = __offset(90)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * The y centroid position on the CCD of the target object in pixels.
     * Example: /// Example: 321.4
     * Constraints: No constraints specified.
     */
    val ccdObjPosY : Double
        get() {
            val o = __offset(92)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * This is the pixel width of the target. This is either a frame-by-frame measurement or a constant point spread function or synthetic aperture used in the extraction.
     * Example: /// Example: 133.2
     * Constraints: No constraints specified.
     */
    val ccdObjWidth : Double
        get() {
            val o = __offset(94)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * This is the background signal at or in the vicinity of the radiometric source position. Specifically, this is the average background count level (DN/pixel) divided by the exposure time in seconds of the background pixels used in the photometric extraction. DN/pixel/sec.
     * Example: /// Example: 4134.1
     * Constraints: No constraints specified.
     */
    val backgroundSignal : Double
        get() {
            val o = __offset(96)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Estimated 1-sigma uncertainty in the background signal at or in the vicinity of the radiometric source position. DN/pixel/sec.
     * Example: /// Example: 123.2
     * Constraints: No constraints specified.
     */
    val backgroundSignalUnc : Double
        get() {
            val o = __offset(98)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Peak Aperture Raw Counts is the value of the peak pixel in the real or synthetic aperture containing the target signal.
     * Example: /// Example: 123.2
     * Constraints: No constraints specified.
     */
    val peakApertureCount : Double
        get() {
            val o = __offset(100)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Peak Background Raw Counts is the largest pixel value used in background signal.
     * Example: /// Example: 321
     * Constraints: No constraints specified.
     */
    val peakBackgroundCount : Int
        get() {
            val o = __offset(102)
            return if(o != 0) bb.getInt(o + bb_pos) else 0
        }
    /**
     * Estimated signal-to-noise ratio (SNR) for the total radiometric signal. Under some algorithms, this can be a constant per target (not per observation). Note: this SNR applies to the total signal of the radiometric source (i.e., Net_Obj_Sig with units DN/sec), not to be confused with the SNR of the signal in the peak pixel (i.e., DN/pixel/sec).
     * Example: /// Example: 13.4
     * Constraints: No constraints specified.
     */
    val snrEst : Double
        get() {
            val o = __offset(104)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Instrumental magnitude of a sensor before corrections are applied for atmosphere or to transform to standard magnitude scale.
     * Example: /// Example: 123.3
     * Constraints: No constraints specified.
     */
    val magInstrumental : Double
        get() {
            val o = __offset(106)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Uncertainty in the instrumental magnitude.
     * Example: /// Example: 123.3
     * Constraints: No constraints specified.
     */
    val magInstrumentalUnc : Double
        get() {
            val o = __offset(108)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Optical Cross Section computed in units m(2)/ster.
     * Example: /// Example: 123.3
     * Constraints: No constraints specified.
     */
    val opticalCrossSection : Double
        get() {
            val o = __offset(110)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Uncertainty in Optical Cross Section computed in units m(2)/ster.
     * Example: /// Example: 123.3
     * Constraints: No constraints specified.
     */
    val opticalCrossSectionUnc : Double
        get() {
            val o = __offset(112)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Sun state vector in ECI J2000 coordinate frame in km.
     * Example: /// Example: 123.3
     * Constraints: No constraints specified.
     */
    val sunStatePosX : Double
        get() {
            val o = __offset(114)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Sun state vector in ECI J2000 coordinate frame in km.
     * Example: /// Example: 123.3
     * Constraints: No constraints specified.
     */
    val sunStatePosY : Double
        get() {
            val o = __offset(116)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Sun state vector in ECI J2000 coordinate frame in km.
     * Example: /// Example: 123.3
     * Constraints: No constraints specified.
     */
    val sunStatePosZ : Double
        get() {
            val o = __offset(118)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Sun state vector in ECI J2000 coordinate frame in km/sec.
     * Example: /// Example: 123.3
     * Constraints: No constraints specified.
     */
    val sunStateVelX : Double
        get() {
            val o = __offset(120)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Sun state vector in ECI J2000 coordinate frame in km/sec.
     * Example: /// Example: 123.3
     * Constraints: No constraints specified.
     */
    val sunStateVelY : Double
        get() {
            val o = __offset(122)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Sun state vector in ECI J2000 coordinate frame in km/sec.
     * Example: /// Example: 123.3
     * Constraints: No constraints specified.
     */
    val sunStateVelZ : Double
        get() {
            val o = __offset(124)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Number of catalog stars in the detector field of view (FOV) with the target object. Can be 0 for narrow FOV sensors.
     * Example: /// Example: 123
     * Constraints: No constraints specified.
     */
    val numCatalogStars : Int
        get() {
            val o = __offset(126)
            return if(o != 0) bb.getInt(o + bb_pos) else 0
        }
    /**
     * Number of detected stars in the FOV with the target object. Helps identify frames with clouds.
     * Example: /// Example: 123
     * Constraints: No constraints specified.
     */
    val numDetectedStars : Int
        get() {
            val o = __offset(128)
            return if(o != 0) bb.getInt(o + bb_pos) else 0
        }
    /**
     * Number of correlated stars in the FOV with the target object. Can be 0 for narrow FOV sensors.
     * Example: /// Example: 123
     * Constraints: No constraints specified.
     */
    val numCorrelatedStars : Int
        get() {
            val o = __offset(130)
            return if(o != 0) bb.getInt(o + bb_pos) else 0
        }
    /**
     * Uncertainty of predicted Right Ascension of the Target object from the frame of reference of the sensor (J2000, geocentric velocity aberration). SGP4 and VCMs produce geocentric origin and velocity aberration and subtracting the sensor geocentric position of the sensor places in its reference frame.
     * Example: /// Example: 123.2
     * Constraints: No constraints specified.
     */
    val predictedRaUnc : Double
        get() {
            val o = __offset(132)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Uncertainty of Predicted Declination of the Target object from the frame of reference of the sensor (J2000, geocentric velocity aberration). SGP4 and VCMs produce geocentric origin and velocity aberration and subtracting the sensor geocentric position of the sensor places in its reference frame.
     * Example: /// Example: 123.2
     * Constraints: No constraints specified.
     */
    val predictedDeclinationUnc : Double
        get() {
            val o = __offset(134)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Covariance (x^2) in measured Right Ascension (X) in deg^2.
     * Example: /// Example: 123.2
     * Constraints: No constraints specified.
     */
    val raCov : Double
        get() {
            val o = __offset(136)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Covariance (Y^2) in measured declination (Y) in deg^2.
     * Example: /// Example: 123.2
     * Constraints: No constraints specified.
     */
    val declinationCov : Double
        get() {
            val o = __offset(138)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Covariance (XY) in measured ra/declination (XY) in deg^2.
     * Example: /// Example: 123.2
     * Constraints: No constraints specified.
     */
    val raDeclinationCov : Double
        get() {
            val o = __offset(140)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * World Coordinate System (WCS) X pixel origin in astrometric fit.
     * Example: /// Example: 123.2
     * Constraints: No constraints specified.
     */
    val acalCrPixX : Double
        get() {
            val o = __offset(142)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * World Coordinate System (WCS) Y pixel origin in astrometric fit.
     * Example: /// Example: 123.2
     * Constraints: No constraints specified.
     */
    val acalCrPixY : Double
        get() {
            val o = __offset(144)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * World Coordinate System (WCS) equatorial coordinate X origin corresponding to CRPIX in astrometric fit in degrees.
     * Example: /// Example: 123.2
     * Constraints: No constraints specified.
     */
    val acalCrValX : Double
        get() {
            val o = __offset(146)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * World Coordinate System (WCS) equatorial coordinate Y origin corresponding to CRPIX in astrometric fit in degrees.
     * Example: /// Example: 123.2
     * Constraints: No constraints specified.
     */
    val acalCrValY : Double
        get() {
            val o = __offset(148)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Number of stars used in astrometric fit.
     * Example: /// Example: 123
     * Constraints: No constraints specified.
     */
    val acalNumStars : Int
        get() {
            val o = __offset(150)
            return if(o != 0) bb.getInt(o + bb_pos) else 0
        }
    /**
     * Distance from the target object to the sun during the observation in meters.
     * Example: /// Example: 123.2
     * Constraints: No constraints specified.
     */
    val objSunRange : Double
        get() {
            val o = __offset(152)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Solar phase angle bisector vector. The vector that bisects the solar phase angle. The phase angle bisector is the angle that is << of the value in #48. Then calculate the point on the RA/DEC (ECI J2000.0) sphere that a vector at this angle would intersect.
     * Example: /// Example: 123.2
     * Constraints: No constraints specified.
     */
    val phaseAngBisect : Double
        get() {
            val o = __offset(154)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Fraction of the sun that is illuminating the target object. This indicates if the target is in the Earth’s penumbra or umbra. (It is 0 when object is in umbra and 1 when object is fully illuminated.).
     * Example: /// Example: 123.2
     * Constraints: No constraints specified.
     */
    val solarDiskFrac : Double
        get() {
            val o = __offset(156)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Time off element set.
     * Example: /// Example: 123.2
     * Constraints: No constraints specified.
     */
    val toes : Double
        get() {
            val o = __offset(158)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Degrees Off Element Set.
     * Example: /// Example: 123.2
     * Constraints: No constraints specified.
     */
    val does : Double
        get() {
            val o = __offset(160)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Source of the data, will be set to EOObservation source if blank.
     * Example: /// Example: Bluestaq
     * Constraints: Minimum length = 1, Maximum length = 64
     */
    val source : String?
        get() {
            val o = __offset(162)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val sourceAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(162, 1)
    fun sourceInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 162, 1)
    /**
     * Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
     * EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
     * REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
     * SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
     * TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
     * , will be set to EOObservation dataMode if blank.
     * Example: /// Example: TEST
     * Constraints: Minimum length = 1, Maximum length = 32
     */
    val dataMode : Byte
        get() {
            val o = __offset(164)
            return if(o != 0) bb.get(o + bb_pos) else 0
        }
    /**
     * Time the row was created in the database, auto-populated by the system.
     * Example: /// Example: 2018-01-01T16:00:00.123Z
     * Constraints: No constraints specified.
     */
    val createdAt : String?
        get() {
            val o = __offset(166)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val createdAtAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(166, 1)
    fun createdAtInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 166, 1)
    /**
     * Application user who created the row in the database, auto-populated by the system.
     * Example: /// Example: some.user
     * Constraints: Minimum length = 1, Maximum length = 64
     */
    val createdBy : String?
        get() {
            val o = __offset(168)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val createdByAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(168, 1)
    fun createdByInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 168, 1)
    companion object {
        fun validateVersion() = Constants.FLATBUFFERS_24_3_25()
        fun getRootAsEOObservationDetails_Ingest(_bb: ByteBuffer): EOObservationDetails_Ingest = getRootAsEOObservationDetails_Ingest(_bb, EOObservationDetails_Ingest())
        fun getRootAsEOObservationDetails_Ingest(_bb: ByteBuffer, obj: EOObservationDetails_Ingest): EOObservationDetails_Ingest {
            _bb.order(ByteOrder.LITTLE_ENDIAN)
            return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb))
        }
        fun EOObservationDetails_IngestBufferHasIdentifier(_bb: ByteBuffer) : Boolean = __has_identifier(_bb, "EOOB")
        fun createEOObservationDetails_Ingest(builder: FlatBufferBuilder, idEoobservationOffset: Int, classificationMarkingOffset: Int, obTimeOffset: Int, predictedRa: Double, predictedDeclination: Double, predictedAzimuth: Double, predictedElevation: Double, sunAzimuth: Double, sunElevation: Double, numSpectralFilters: Int, spectralFiltersOffset: Int, spectralZmflOffset: Int, spectralFilterSolarMagOffset: Int, zeroPointsOffset: Int, zeroPointsUncOffset: Int, extinctionCoeffsOffset: Int, extinctionCoeffsUncOffset: Int, colorCoeffsOffset: Int, numNeutralDensityFilters: Int, neutralDensityFilterNamesOffset: Int, neutralDensityFilterTransmissionsOffset: Int, neutralDensityFilterTransmissionsUncOffset: Int, gain: Double, ifov: Double, pixelArrayWidth: Int, pixelArrayHeight: Int, pixelMin: Int, pixelMax: Int, centroidRow: Double, centroidColumn: Double, rowVariance: Double, columnVariance: Double, rowColCov: Double, distFromStreakCenterOffset: Int, surfBrightnessOffset: Int, surfBrightnessUncOffset: Int, timesUnc: Double, ccdTemp: Double, currentSpectralFilterNum: Int, currentNeutralDensityFilterNum: Int, binningHoriz: Int, binningVert: Int, pcalNumStars: Int, ccdObjPosX: Double, ccdObjPosY: Double, ccdObjWidth: Double, backgroundSignal: Double, backgroundSignalUnc: Double, peakApertureCount: Double, peakBackgroundCount: Int, snrEst: Double, magInstrumental: Double, magInstrumentalUnc: Double, opticalCrossSection: Double, opticalCrossSectionUnc: Double, sunStatePosX: Double, sunStatePosY: Double, sunStatePosZ: Double, sunStateVelX: Double, sunStateVelY: Double, sunStateVelZ: Double, numCatalogStars: Int, numDetectedStars: Int, numCorrelatedStars: Int, predictedRaUnc: Double, predictedDeclinationUnc: Double, raCov: Double, declinationCov: Double, raDeclinationCov: Double, acalCrPixX: Double, acalCrPixY: Double, acalCrValX: Double, acalCrValY: Double, acalNumStars: Int, objSunRange: Double, phaseAngBisect: Double, solarDiskFrac: Double, toes: Double, does: Double, sourceOffset: Int, dataMode: Byte, createdAtOffset: Int, createdByOffset: Int) : Int {
            builder.startTable(83)
            addDoes(builder, does)
            addToes(builder, toes)
            addSolarDiskFrac(builder, solarDiskFrac)
            addPhaseAngBisect(builder, phaseAngBisect)
            addObjSunRange(builder, objSunRange)
            addAcalCrValY(builder, acalCrValY)
            addAcalCrValX(builder, acalCrValX)
            addAcalCrPixY(builder, acalCrPixY)
            addAcalCrPixX(builder, acalCrPixX)
            addRaDeclinationCov(builder, raDeclinationCov)
            addDeclinationCov(builder, declinationCov)
            addRaCov(builder, raCov)
            addPredictedDeclinationUnc(builder, predictedDeclinationUnc)
            addPredictedRaUnc(builder, predictedRaUnc)
            addSunStateVelZ(builder, sunStateVelZ)
            addSunStateVelY(builder, sunStateVelY)
            addSunStateVelX(builder, sunStateVelX)
            addSunStatePosZ(builder, sunStatePosZ)
            addSunStatePosY(builder, sunStatePosY)
            addSunStatePosX(builder, sunStatePosX)
            addOpticalCrossSectionUnc(builder, opticalCrossSectionUnc)
            addOpticalCrossSection(builder, opticalCrossSection)
            addMagInstrumentalUnc(builder, magInstrumentalUnc)
            addMagInstrumental(builder, magInstrumental)
            addSnrEst(builder, snrEst)
            addPeakApertureCount(builder, peakApertureCount)
            addBackgroundSignalUnc(builder, backgroundSignalUnc)
            addBackgroundSignal(builder, backgroundSignal)
            addCcdObjWidth(builder, ccdObjWidth)
            addCcdObjPosY(builder, ccdObjPosY)
            addCcdObjPosX(builder, ccdObjPosX)
            addCcdTemp(builder, ccdTemp)
            addTimesUnc(builder, timesUnc)
            addRowColCov(builder, rowColCov)
            addColumnVariance(builder, columnVariance)
            addRowVariance(builder, rowVariance)
            addCentroidColumn(builder, centroidColumn)
            addCentroidRow(builder, centroidRow)
            addIfov(builder, ifov)
            addGain(builder, gain)
            addSunElevation(builder, sunElevation)
            addSunAzimuth(builder, sunAzimuth)
            addPredictedElevation(builder, predictedElevation)
            addPredictedAzimuth(builder, predictedAzimuth)
            addPredictedDeclination(builder, predictedDeclination)
            addPredictedRa(builder, predictedRa)
            addCreatedBy(builder, createdByOffset)
            addCreatedAt(builder, createdAtOffset)
            addSource(builder, sourceOffset)
            addAcalNumStars(builder, acalNumStars)
            addNumCorrelatedStars(builder, numCorrelatedStars)
            addNumDetectedStars(builder, numDetectedStars)
            addNumCatalogStars(builder, numCatalogStars)
            addPeakBackgroundCount(builder, peakBackgroundCount)
            addPcalNumStars(builder, pcalNumStars)
            addBinningVert(builder, binningVert)
            addBinningHoriz(builder, binningHoriz)
            addCurrentNeutralDensityFilterNum(builder, currentNeutralDensityFilterNum)
            addCurrentSpectralFilterNum(builder, currentSpectralFilterNum)
            addSurfBrightnessUnc(builder, surfBrightnessUncOffset)
            addSurfBrightness(builder, surfBrightnessOffset)
            addDistFromStreakCenter(builder, distFromStreakCenterOffset)
            addPixelMax(builder, pixelMax)
            addPixelMin(builder, pixelMin)
            addPixelArrayHeight(builder, pixelArrayHeight)
            addPixelArrayWidth(builder, pixelArrayWidth)
            addNeutralDensityFilterTransmissionsUnc(builder, neutralDensityFilterTransmissionsUncOffset)
            addNeutralDensityFilterTransmissions(builder, neutralDensityFilterTransmissionsOffset)
            addNeutralDensityFilterNames(builder, neutralDensityFilterNamesOffset)
            addNumNeutralDensityFilters(builder, numNeutralDensityFilters)
            addColorCoeffs(builder, colorCoeffsOffset)
            addExtinctionCoeffsUnc(builder, extinctionCoeffsUncOffset)
            addExtinctionCoeffs(builder, extinctionCoeffsOffset)
            addZeroPointsUnc(builder, zeroPointsUncOffset)
            addZeroPoints(builder, zeroPointsOffset)
            addSpectralFilterSolarMag(builder, spectralFilterSolarMagOffset)
            addSpectralZMFL(builder, spectralZmflOffset)
            addSpectralFilters(builder, spectralFiltersOffset)
            addNumSpectralFilters(builder, numSpectralFilters)
            addObTime(builder, obTimeOffset)
            addClassificationMarking(builder, classificationMarkingOffset)
            addIdEOObservation(builder, idEoobservationOffset)
            addDataMode(builder, dataMode)
            return endEOObservationDetails_Ingest(builder)
        }
        fun startEOObservationDetails_Ingest(builder: FlatBufferBuilder) = builder.startTable(83)
        fun addIdEOObservation(builder: FlatBufferBuilder, idEoobservation: Int) = builder.addOffset(0, idEoobservation, 0)
        fun addClassificationMarking(builder: FlatBufferBuilder, classificationMarking: Int) = builder.addOffset(1, classificationMarking, 0)
        fun addObTime(builder: FlatBufferBuilder, obTime: Int) = builder.addOffset(2, obTime, 0)
        fun addPredictedRa(builder: FlatBufferBuilder, predictedRa: Double) = builder.addDouble(3, predictedRa, 0.0)
        fun addPredictedDeclination(builder: FlatBufferBuilder, predictedDeclination: Double) = builder.addDouble(4, predictedDeclination, 0.0)
        fun addPredictedAzimuth(builder: FlatBufferBuilder, predictedAzimuth: Double) = builder.addDouble(5, predictedAzimuth, 0.0)
        fun addPredictedElevation(builder: FlatBufferBuilder, predictedElevation: Double) = builder.addDouble(6, predictedElevation, 0.0)
        fun addSunAzimuth(builder: FlatBufferBuilder, sunAzimuth: Double) = builder.addDouble(7, sunAzimuth, 0.0)
        fun addSunElevation(builder: FlatBufferBuilder, sunElevation: Double) = builder.addDouble(8, sunElevation, 0.0)
        fun addNumSpectralFilters(builder: FlatBufferBuilder, numSpectralFilters: Int) = builder.addInt(9, numSpectralFilters, 0)
        fun addSpectralFilters(builder: FlatBufferBuilder, spectralFilters: Int) = builder.addOffset(10, spectralFilters, 0)
        fun createSpectralFiltersVector(builder: FlatBufferBuilder, data: IntArray) : Int {
            builder.startVector(4, data.size, 4)
            for (i in data.size - 1 downTo 0) {
                builder.addOffset(data[i])
            }
            return builder.endVector()
        }
        fun startSpectralFiltersVector(builder: FlatBufferBuilder, numElems: Int) = builder.startVector(4, numElems, 4)
        fun addSpectralZMFL(builder: FlatBufferBuilder, spectralZmfl: Int) = builder.addOffset(11, spectralZmfl, 0)
        fun createSpectralZmflVector(builder: FlatBufferBuilder, data: IntArray) : Int {
            builder.startVector(4, data.size, 4)
            for (i in data.size - 1 downTo 0) {
                builder.addOffset(data[i])
            }
            return builder.endVector()
        }
        fun startSpectralZmflVector(builder: FlatBufferBuilder, numElems: Int) = builder.startVector(4, numElems, 4)
        fun addSpectralFilterSolarMag(builder: FlatBufferBuilder, spectralFilterSolarMag: Int) = builder.addOffset(12, spectralFilterSolarMag, 0)
        fun createSpectralFilterSolarMagVector(builder: FlatBufferBuilder, data: IntArray) : Int {
            builder.startVector(4, data.size, 4)
            for (i in data.size - 1 downTo 0) {
                builder.addOffset(data[i])
            }
            return builder.endVector()
        }
        fun startSpectralFilterSolarMagVector(builder: FlatBufferBuilder, numElems: Int) = builder.startVector(4, numElems, 4)
        fun addZeroPoints(builder: FlatBufferBuilder, zeroPoints: Int) = builder.addOffset(13, zeroPoints, 0)
        fun createZeroPointsVector(builder: FlatBufferBuilder, data: IntArray) : Int {
            builder.startVector(4, data.size, 4)
            for (i in data.size - 1 downTo 0) {
                builder.addOffset(data[i])
            }
            return builder.endVector()
        }
        fun startZeroPointsVector(builder: FlatBufferBuilder, numElems: Int) = builder.startVector(4, numElems, 4)
        fun addZeroPointsUnc(builder: FlatBufferBuilder, zeroPointsUnc: Int) = builder.addOffset(14, zeroPointsUnc, 0)
        fun createZeroPointsUncVector(builder: FlatBufferBuilder, data: IntArray) : Int {
            builder.startVector(4, data.size, 4)
            for (i in data.size - 1 downTo 0) {
                builder.addOffset(data[i])
            }
            return builder.endVector()
        }
        fun startZeroPointsUncVector(builder: FlatBufferBuilder, numElems: Int) = builder.startVector(4, numElems, 4)
        fun addExtinctionCoeffs(builder: FlatBufferBuilder, extinctionCoeffs: Int) = builder.addOffset(15, extinctionCoeffs, 0)
        fun createExtinctionCoeffsVector(builder: FlatBufferBuilder, data: IntArray) : Int {
            builder.startVector(4, data.size, 4)
            for (i in data.size - 1 downTo 0) {
                builder.addOffset(data[i])
            }
            return builder.endVector()
        }
        fun startExtinctionCoeffsVector(builder: FlatBufferBuilder, numElems: Int) = builder.startVector(4, numElems, 4)
        fun addExtinctionCoeffsUnc(builder: FlatBufferBuilder, extinctionCoeffsUnc: Int) = builder.addOffset(16, extinctionCoeffsUnc, 0)
        fun createExtinctionCoeffsUncVector(builder: FlatBufferBuilder, data: IntArray) : Int {
            builder.startVector(4, data.size, 4)
            for (i in data.size - 1 downTo 0) {
                builder.addOffset(data[i])
            }
            return builder.endVector()
        }
        fun startExtinctionCoeffsUncVector(builder: FlatBufferBuilder, numElems: Int) = builder.startVector(4, numElems, 4)
        fun addColorCoeffs(builder: FlatBufferBuilder, colorCoeffs: Int) = builder.addOffset(17, colorCoeffs, 0)
        fun createColorCoeffsVector(builder: FlatBufferBuilder, data: IntArray) : Int {
            builder.startVector(4, data.size, 4)
            for (i in data.size - 1 downTo 0) {
                builder.addOffset(data[i])
            }
            return builder.endVector()
        }
        fun startColorCoeffsVector(builder: FlatBufferBuilder, numElems: Int) = builder.startVector(4, numElems, 4)
        fun addNumNeutralDensityFilters(builder: FlatBufferBuilder, numNeutralDensityFilters: Int) = builder.addInt(18, numNeutralDensityFilters, 0)
        fun addNeutralDensityFilterNames(builder: FlatBufferBuilder, neutralDensityFilterNames: Int) = builder.addOffset(19, neutralDensityFilterNames, 0)
        fun createNeutralDensityFilterNamesVector(builder: FlatBufferBuilder, data: IntArray) : Int {
            builder.startVector(4, data.size, 4)
            for (i in data.size - 1 downTo 0) {
                builder.addOffset(data[i])
            }
            return builder.endVector()
        }
        fun startNeutralDensityFilterNamesVector(builder: FlatBufferBuilder, numElems: Int) = builder.startVector(4, numElems, 4)
        fun addNeutralDensityFilterTransmissions(builder: FlatBufferBuilder, neutralDensityFilterTransmissions: Int) = builder.addOffset(20, neutralDensityFilterTransmissions, 0)
        fun createNeutralDensityFilterTransmissionsVector(builder: FlatBufferBuilder, data: IntArray) : Int {
            builder.startVector(4, data.size, 4)
            for (i in data.size - 1 downTo 0) {
                builder.addOffset(data[i])
            }
            return builder.endVector()
        }
        fun startNeutralDensityFilterTransmissionsVector(builder: FlatBufferBuilder, numElems: Int) = builder.startVector(4, numElems, 4)
        fun addNeutralDensityFilterTransmissionsUnc(builder: FlatBufferBuilder, neutralDensityFilterTransmissionsUnc: Int) = builder.addOffset(21, neutralDensityFilterTransmissionsUnc, 0)
        fun createNeutralDensityFilterTransmissionsUncVector(builder: FlatBufferBuilder, data: IntArray) : Int {
            builder.startVector(4, data.size, 4)
            for (i in data.size - 1 downTo 0) {
                builder.addOffset(data[i])
            }
            return builder.endVector()
        }
        fun startNeutralDensityFilterTransmissionsUncVector(builder: FlatBufferBuilder, numElems: Int) = builder.startVector(4, numElems, 4)
        fun addGain(builder: FlatBufferBuilder, gain: Double) = builder.addDouble(22, gain, 0.0)
        fun addIfov(builder: FlatBufferBuilder, ifov: Double) = builder.addDouble(23, ifov, 0.0)
        fun addPixelArrayWidth(builder: FlatBufferBuilder, pixelArrayWidth: Int) = builder.addInt(24, pixelArrayWidth, 0)
        fun addPixelArrayHeight(builder: FlatBufferBuilder, pixelArrayHeight: Int) = builder.addInt(25, pixelArrayHeight, 0)
        fun addPixelMin(builder: FlatBufferBuilder, pixelMin: Int) = builder.addInt(26, pixelMin, 0)
        fun addPixelMax(builder: FlatBufferBuilder, pixelMax: Int) = builder.addInt(27, pixelMax, 0)
        fun addCentroidRow(builder: FlatBufferBuilder, centroidRow: Double) = builder.addDouble(28, centroidRow, 0.0)
        fun addCentroidColumn(builder: FlatBufferBuilder, centroidColumn: Double) = builder.addDouble(29, centroidColumn, 0.0)
        fun addRowVariance(builder: FlatBufferBuilder, rowVariance: Double) = builder.addDouble(30, rowVariance, 0.0)
        fun addColumnVariance(builder: FlatBufferBuilder, columnVariance: Double) = builder.addDouble(31, columnVariance, 0.0)
        fun addRowColCov(builder: FlatBufferBuilder, rowColCov: Double) = builder.addDouble(32, rowColCov, 0.0)
        fun addDistFromStreakCenter(builder: FlatBufferBuilder, distFromStreakCenter: Int) = builder.addOffset(33, distFromStreakCenter, 0)
        fun createDistFromStreakCenterVector(builder: FlatBufferBuilder, data: IntArray) : Int {
            builder.startVector(4, data.size, 4)
            for (i in data.size - 1 downTo 0) {
                builder.addOffset(data[i])
            }
            return builder.endVector()
        }
        fun startDistFromStreakCenterVector(builder: FlatBufferBuilder, numElems: Int) = builder.startVector(4, numElems, 4)
        fun addSurfBrightness(builder: FlatBufferBuilder, surfBrightness: Int) = builder.addOffset(34, surfBrightness, 0)
        fun createSurfBrightnessVector(builder: FlatBufferBuilder, data: IntArray) : Int {
            builder.startVector(4, data.size, 4)
            for (i in data.size - 1 downTo 0) {
                builder.addOffset(data[i])
            }
            return builder.endVector()
        }
        fun startSurfBrightnessVector(builder: FlatBufferBuilder, numElems: Int) = builder.startVector(4, numElems, 4)
        fun addSurfBrightnessUnc(builder: FlatBufferBuilder, surfBrightnessUnc: Int) = builder.addOffset(35, surfBrightnessUnc, 0)
        fun createSurfBrightnessUncVector(builder: FlatBufferBuilder, data: IntArray) : Int {
            builder.startVector(4, data.size, 4)
            for (i in data.size - 1 downTo 0) {
                builder.addOffset(data[i])
            }
            return builder.endVector()
        }
        fun startSurfBrightnessUncVector(builder: FlatBufferBuilder, numElems: Int) = builder.startVector(4, numElems, 4)
        fun addTimesUnc(builder: FlatBufferBuilder, timesUnc: Double) = builder.addDouble(36, timesUnc, 0.0)
        fun addCcdTemp(builder: FlatBufferBuilder, ccdTemp: Double) = builder.addDouble(37, ccdTemp, 0.0)
        fun addCurrentSpectralFilterNum(builder: FlatBufferBuilder, currentSpectralFilterNum: Int) = builder.addInt(38, currentSpectralFilterNum, 0)
        fun addCurrentNeutralDensityFilterNum(builder: FlatBufferBuilder, currentNeutralDensityFilterNum: Int) = builder.addInt(39, currentNeutralDensityFilterNum, 0)
        fun addBinningHoriz(builder: FlatBufferBuilder, binningHoriz: Int) = builder.addInt(40, binningHoriz, 0)
        fun addBinningVert(builder: FlatBufferBuilder, binningVert: Int) = builder.addInt(41, binningVert, 0)
        fun addPcalNumStars(builder: FlatBufferBuilder, pcalNumStars: Int) = builder.addInt(42, pcalNumStars, 0)
        fun addCcdObjPosX(builder: FlatBufferBuilder, ccdObjPosX: Double) = builder.addDouble(43, ccdObjPosX, 0.0)
        fun addCcdObjPosY(builder: FlatBufferBuilder, ccdObjPosY: Double) = builder.addDouble(44, ccdObjPosY, 0.0)
        fun addCcdObjWidth(builder: FlatBufferBuilder, ccdObjWidth: Double) = builder.addDouble(45, ccdObjWidth, 0.0)
        fun addBackgroundSignal(builder: FlatBufferBuilder, backgroundSignal: Double) = builder.addDouble(46, backgroundSignal, 0.0)
        fun addBackgroundSignalUnc(builder: FlatBufferBuilder, backgroundSignalUnc: Double) = builder.addDouble(47, backgroundSignalUnc, 0.0)
        fun addPeakApertureCount(builder: FlatBufferBuilder, peakApertureCount: Double) = builder.addDouble(48, peakApertureCount, 0.0)
        fun addPeakBackgroundCount(builder: FlatBufferBuilder, peakBackgroundCount: Int) = builder.addInt(49, peakBackgroundCount, 0)
        fun addSnrEst(builder: FlatBufferBuilder, snrEst: Double) = builder.addDouble(50, snrEst, 0.0)
        fun addMagInstrumental(builder: FlatBufferBuilder, magInstrumental: Double) = builder.addDouble(51, magInstrumental, 0.0)
        fun addMagInstrumentalUnc(builder: FlatBufferBuilder, magInstrumentalUnc: Double) = builder.addDouble(52, magInstrumentalUnc, 0.0)
        fun addOpticalCrossSection(builder: FlatBufferBuilder, opticalCrossSection: Double) = builder.addDouble(53, opticalCrossSection, 0.0)
        fun addOpticalCrossSectionUnc(builder: FlatBufferBuilder, opticalCrossSectionUnc: Double) = builder.addDouble(54, opticalCrossSectionUnc, 0.0)
        fun addSunStatePosX(builder: FlatBufferBuilder, sunStatePosX: Double) = builder.addDouble(55, sunStatePosX, 0.0)
        fun addSunStatePosY(builder: FlatBufferBuilder, sunStatePosY: Double) = builder.addDouble(56, sunStatePosY, 0.0)
        fun addSunStatePosZ(builder: FlatBufferBuilder, sunStatePosZ: Double) = builder.addDouble(57, sunStatePosZ, 0.0)
        fun addSunStateVelX(builder: FlatBufferBuilder, sunStateVelX: Double) = builder.addDouble(58, sunStateVelX, 0.0)
        fun addSunStateVelY(builder: FlatBufferBuilder, sunStateVelY: Double) = builder.addDouble(59, sunStateVelY, 0.0)
        fun addSunStateVelZ(builder: FlatBufferBuilder, sunStateVelZ: Double) = builder.addDouble(60, sunStateVelZ, 0.0)
        fun addNumCatalogStars(builder: FlatBufferBuilder, numCatalogStars: Int) = builder.addInt(61, numCatalogStars, 0)
        fun addNumDetectedStars(builder: FlatBufferBuilder, numDetectedStars: Int) = builder.addInt(62, numDetectedStars, 0)
        fun addNumCorrelatedStars(builder: FlatBufferBuilder, numCorrelatedStars: Int) = builder.addInt(63, numCorrelatedStars, 0)
        fun addPredictedRaUnc(builder: FlatBufferBuilder, predictedRaUnc: Double) = builder.addDouble(64, predictedRaUnc, 0.0)
        fun addPredictedDeclinationUnc(builder: FlatBufferBuilder, predictedDeclinationUnc: Double) = builder.addDouble(65, predictedDeclinationUnc, 0.0)
        fun addRaCov(builder: FlatBufferBuilder, raCov: Double) = builder.addDouble(66, raCov, 0.0)
        fun addDeclinationCov(builder: FlatBufferBuilder, declinationCov: Double) = builder.addDouble(67, declinationCov, 0.0)
        fun addRaDeclinationCov(builder: FlatBufferBuilder, raDeclinationCov: Double) = builder.addDouble(68, raDeclinationCov, 0.0)
        fun addAcalCrPixX(builder: FlatBufferBuilder, acalCrPixX: Double) = builder.addDouble(69, acalCrPixX, 0.0)
        fun addAcalCrPixY(builder: FlatBufferBuilder, acalCrPixY: Double) = builder.addDouble(70, acalCrPixY, 0.0)
        fun addAcalCrValX(builder: FlatBufferBuilder, acalCrValX: Double) = builder.addDouble(71, acalCrValX, 0.0)
        fun addAcalCrValY(builder: FlatBufferBuilder, acalCrValY: Double) = builder.addDouble(72, acalCrValY, 0.0)
        fun addAcalNumStars(builder: FlatBufferBuilder, acalNumStars: Int) = builder.addInt(73, acalNumStars, 0)
        fun addObjSunRange(builder: FlatBufferBuilder, objSunRange: Double) = builder.addDouble(74, objSunRange, 0.0)
        fun addPhaseAngBisect(builder: FlatBufferBuilder, phaseAngBisect: Double) = builder.addDouble(75, phaseAngBisect, 0.0)
        fun addSolarDiskFrac(builder: FlatBufferBuilder, solarDiskFrac: Double) = builder.addDouble(76, solarDiskFrac, 0.0)
        fun addToes(builder: FlatBufferBuilder, toes: Double) = builder.addDouble(77, toes, 0.0)
        fun addDoes(builder: FlatBufferBuilder, does: Double) = builder.addDouble(78, does, 0.0)
        fun addSource(builder: FlatBufferBuilder, source: Int) = builder.addOffset(79, source, 0)
        fun addDataMode(builder: FlatBufferBuilder, dataMode: Byte) = builder.addByte(80, dataMode, 0)
        fun addCreatedAt(builder: FlatBufferBuilder, createdAt: Int) = builder.addOffset(81, createdAt, 0)
        fun addCreatedBy(builder: FlatBufferBuilder, createdBy: Int) = builder.addOffset(82, createdBy, 0)
        fun endEOObservationDetails_Ingest(builder: FlatBufferBuilder) : Int {
            val o = builder.endTable()
            return o
        }
        fun finishEOObservationDetailsIngestBuffer(builder: FlatBufferBuilder, offset: Int) = builder.finish(offset, "EOOB")
        fun finishSizePrefixedEOObservationDetails_IngestBuffer(builder: FlatBufferBuilder, offset: Int) = builder.finishSizePrefixed(offset, "EOOB")
    }
}
