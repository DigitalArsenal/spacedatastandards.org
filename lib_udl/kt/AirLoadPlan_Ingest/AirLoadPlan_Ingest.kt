// automatically generated by the FlatBuffers compiler, do not modify

import com.google.flatbuffers.BaseVector
import com.google.flatbuffers.BooleanVector
import com.google.flatbuffers.ByteVector
import com.google.flatbuffers.Constants
import com.google.flatbuffers.DoubleVector
import com.google.flatbuffers.FlatBufferBuilder
import com.google.flatbuffers.FloatVector
import com.google.flatbuffers.LongVector
import com.google.flatbuffers.StringVector
import com.google.flatbuffers.Struct
import com.google.flatbuffers.Table
import com.google.flatbuffers.UnionVector
import java.nio.ByteBuffer
import java.nio.ByteOrder
import kotlin.math.sign

/**
 * /// Information related to how an aircraft is loaded with cargo, equipment, and passengers.
 */
@Suppress("unused")
class AirLoadPlan_Ingest : Table() {

    fun __init(_i: Int, _bb: ByteBuffer)  {
        __reset(_i, _bb)
    }
    fun __assign(_i: Int, _bb: ByteBuffer) : AirLoadPlan_Ingest {
        __init(_i, _bb)
        return this
    }
    /**
     * Unique identifier of the record, auto-generated by the system.
     * Example: /// Example: 0457f578-e29c-312e-85aa-0a04a430bdd0
     * Constraints: Minimum length = 1, Maximum length = 36
     */
    val id : String?
        get() {
            val o = __offset(4)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val idAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(4, 1)
    fun idInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 4, 1)
    /**
     * Classification marking of the data in IC/CAPCO Portion-marked format.
     * Example: /// Example: U
     * Constraints: Minimum length = 1, Maximum length = 128
     */
    val classificationMarking : String?
        get() {
            val o = __offset(6)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val classificationMarkingAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(6, 1)
    fun classificationMarkingInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 6, 1)
    /**
     * Required ID from external systems. This field has no meaning within UDL and is provided as a convenience for systems that require tracking of an internal system generated ID.
     * Example: /// Example: dec7a61a-cd97-4af0-b7bc-f4c3bb33341b
     * Constraints: Minimum length = 1, Maximum length = 64
     */
    val externalId : String?
        get() {
            val o = __offset(8)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val externalIdAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(8, 1)
    fun externalIdInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 8, 1)
    /**
     * The UDL ID of the mission this record is associated with.
     * Example: /// Example: 412bebb6-a45e-029c-ca51-e29f8a442b12
     * Constraints: Minimum length = 0, Maximum length = 36
     */
    val idMission : String?
        get() {
            val o = __offset(10)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val idMissionAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(10, 1)
    fun idMissionInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 10, 1)
    /**
     * The mission number of the mission supporting this load plan.
     * Example: /// Example: AJM123456123
     * Constraints: Minimum length = 0, Maximum length = 16
     */
    val missionNumber : String?
        get() {
            val o = __offset(12)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val missionNumberAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(12, 1)
    fun missionNumberInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 12, 1)
    /**
     * The UDL ID of the aircraft sortie this record is associated with.
     * Example: /// Example: 823acfbe6-f36a-157b-ef32-b47c9b589c3
     * Constraints: Minimum length = 0, Maximum length = 36
     */
    val idSortie : String?
        get() {
            val o = __offset(14)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val idSortieAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(14, 1)
    fun idSortieInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 14, 1)
    /**
     * The leg number of the mission supporting this load plan.
     * Example: /// Example: 200
     * Constraints: No constraints specified.
     */
    val legNum : Int
        get() {
            val o = __offset(16)
            return if(o != 0) bb.getInt(o + bb_pos) else 0
        }
    /**
     * The call sign of the mission supporting this load plan.
     * Example: /// Example: RCH1234
     * Constraints: Minimum length = 0, Maximum length = 24
     */
    val callSign : String?
        get() {
            val o = __offset(18)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val callSignAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(18, 1)
    fun callSignInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 18, 1)
    /**
     * The tail number of the aircraft supporting this load plan.
     * Example: /// Example: 77187
     * Constraints: Minimum length = 0, Maximum length = 16
     */
    val tailNumber : String?
        get() {
            val o = __offset(20)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val tailNumberAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(20, 1)
    fun tailNumberInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 20, 1)
    /**
     * The Model Design Series designation of the aircraft supporting this load plan.
     * Example: /// Example: C17A
     * Constraints: Minimum length = 1, Maximum length = 128
     */
    val aircraftMds : String?
        get() {
            val o = __offset(22)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val aircraftMdsAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(22, 1)
    fun aircraftMdsInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 22, 1)
    /**
     * The departure International Civil Organization (ICAO) code of the departure airfield.
     * Example: /// Example: KCHS
     * Constraints: Minimum length = 0, Maximum length = 4
     */
    val depIcao : String?
        get() {
            val o = __offset(24)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val depIcaoAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(24, 1)
    fun depIcaoInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 24, 1)
    /**
     * Optional identifier of departure airfield with no International Civil Organization (ICAO) code.
     * Example: /// Example: W99
     * Constraints: Minimum length = 0, Maximum length = 36
     */
    val depAirfield : String?
        get() {
            val o = __offset(26)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val depAirfieldAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(26, 1)
    fun depAirfieldInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 26, 1)
    /**
     * The current estimated time that the Aircraft is planned to depart, in ISO 8601 UTC format.
     * Example: /// Example: 2023-01-01T01:01:01.123Z
     * Constraints: No constraints specified.
     */
    val estDepTime : String?
        get() {
            val o = __offset(28)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val estDepTimeAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(28, 1)
    fun estDepTimeInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 28, 1)
    /**
     * The arrival International Civil Organization (ICAO) code of the landing airfield.
     * Example: /// Example: ETAR
     * Constraints: Minimum length = 0, Maximum length = 4
     */
    val arrIcao : String?
        get() {
            val o = __offset(30)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val arrIcaoAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(30, 1)
    fun arrIcaoInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 30, 1)
    /**
     * Optional identifier of arrival airfield with no International Civil Organization (ICAO) code.
     * Example: /// Example: W99
     * Constraints: Minimum length = 0, Maximum length = 36
     */
    val arrAirfield : String?
        get() {
            val o = __offset(32)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val arrAirfieldAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(32, 1)
    fun arrAirfieldInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 32, 1)
    /**
     * The current estimated time that the Aircraft is planned to arrive, in ISO 8601 UTC format.
     * Example: /// Example: 2021-01-01T01:01:01.123Z
     * Constraints: No constraints specified.
     */
    val estArrTime : String?
        get() {
            val o = __offset(34)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val estArrTimeAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(34, 1)
    fun estArrTimeInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 34, 1)
    /**
     * The number of crew members on the aircraft.
     * Example: /// Example: 5
     * Constraints: No constraints specified.
     */
    val crewSize : Int
        get() {
            val o = __offset(36)
            return if(o != 0) bb.getInt(o + bb_pos) else 0
        }
    /**
     * Description of the cargo configuration (e.g. C-1, C-2, C-3, DV-1, DV-2, AE-1, etc.). Configuration meanings are determined by the data source.
     * Example: /// Example: C-1
     * Constraints: Minimum length = 0, Maximum length = 128
     */
    val cargoConfig : String?
        get() {
            val o = __offset(38)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val cargoConfigAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(38, 1)
    fun cargoConfigInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 38, 1)
    /**
     * Description of the equipment configuration (e.g. Standard, Ferry, JBLM, CHS, Combat, etc.). Configuration meanings are determined by the data source.
     * Example: /// Example: Standard
     * Constraints: Minimum length = 0, Maximum length = 128
     */
    val equipConfig : String?
        get() {
            val o = __offset(40)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val equipConfigAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(40, 1)
    fun equipConfigInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 40, 1)
    /**
     * Description of the fuel tank(s) configuration (e.g. ER, NON-ER, etc.). Configuration meanings are determined by the data source.
     * Example: /// Example: ER
     * Constraints: Minimum length = 0, Maximum length = 128
     */
    val tankConfig : String?
        get() {
            val o = __offset(42)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val tankConfigAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(42, 1)
    fun tankConfigInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 42, 1)
    /**
     * The weight of the aircraft without passengers, cargo, equipment, or usable fuel, in kilograms.
     * Example: /// Example: 100.1
     * Constraints: No constraints specified.
     */
    val basicWeight : Double
        get() {
            val o = __offset(44)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * The basic weight of the aircraft multiplied by the distance between the reference datum and the aircraft's center of gravity, in Newton-meters.
     * Example: /// Example: 2500.1
     * Constraints: No constraints specified.
     */
    val basicMoment : Double
        get() {
            val o = __offset(46)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * The weight of usable fuel on board the aircraft, in kilograms.
     * Example: /// Example: 100.1
     * Constraints: No constraints specified.
     */
    val fuelWeight : Double
        get() {
            val o = __offset(48)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * The fuel weight on board the aircraft multiplied by the distance between the reference datum and the fuel's center of gravity, in Newton-meters.
     * Example: /// Example: 2500.1
     * Constraints: No constraints specified.
     */
    val fuelMoment : Double
        get() {
            val o = __offset(50)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * The estimated weight of usable fuel upon landing, in kilograms.
     * Example: /// Example: 100.1
     * Constraints: No constraints specified.
     */
    val estLandingFuelWeight : Double
        get() {
            val o = __offset(52)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * The estimated weight of usable fuel upon landing multiplied by the distance between the reference datum and the fuel's center of gravity, in Newton-meters.
     * Example: /// Example: 2500.1
     * Constraints: No constraints specified.
     */
    val estLandingFuelMoment : Double
        get() {
            val o = __offset(54)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * The basic weight of the aircraft including passengers and equipment, in kilograms.
     * Example: /// Example: 100.1
     * Constraints: No constraints specified.
     */
    val operatingWeight : Double
        get() {
            val o = __offset(56)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * The operating weight of the aircraft multiplied by the distance between the reference datum and the aircraft's center of gravity, in Newton-meters.
     * Example: /// Example: 2500.1
     * Constraints: No constraints specified.
     */
    val operatingMoment : Double
        get() {
            val o = __offset(58)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * The weight of the cargo on board the aircraft, in kilograms.
     * Example: /// Example: 100.1
     * Constraints: No constraints specified.
     */
    val cargoWeight : Double
        get() {
            val o = __offset(60)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * The sum of cargo moments of all cargo on board the aircraft, in Newton-meters. Each individual cargo moment is the weight of the cargo multiplied by the distance between the reference datum and the cargo's center of gravity.
     * Example: /// Example: 2500.1
     * Constraints: No constraints specified.
     */
    val cargoMoment : Double
        get() {
            val o = __offset(62)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * The operating weight of the aircraft including cargo but without usable fuel, in kilograms.
     * Example: /// Example: 100.1
     * Constraints: No constraints specified.
     */
    val zeroFuelWeight : Double
        get() {
            val o = __offset(64)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * The zero fuel weight of the aircraft multiplied by the distance between the reference datum and the aircraft's center of gravity, in Newton-meters.
     * Example: /// Example: 2500.1
     * Constraints: No constraints specified.
     */
    val zeroFuelMoment : Double
        get() {
            val o = __offset(66)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * The center of gravity of the aircraft using the zero fuel weight and zero fuel total moment, as a percentage of the mean aerodynamic chord (%MAC).
     * Example: /// Example: 39.5
     * Constraints: No constraints specified.
     */
    val zeroFuelCg : Double
        get() {
            val o = __offset(68)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * The total weight of the aircraft at takeoff including passengers, cargo, equipment, and usable fuel, in kilograms.
     * Example: /// Example: 100.1
     * Constraints: No constraints specified.
     */
    val grossWeight : Double
        get() {
            val o = __offset(70)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * The sum of moments of all items making up the gross weight of the aircraft, in Newton-meters.
     * Example: /// Example: 2500.1
     * Constraints: No constraints specified.
     */
    val grossMoment : Double
        get() {
            val o = __offset(72)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * The center of gravity of the aircraft using the gross weight and gross moment, as a percentage of the mean aerodynamic chord (%MAC).
     * Example: /// Example: 38.8
     * Constraints: No constraints specified.
     */
    val grossCg : Double
        get() {
            val o = __offset(74)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * The gross weight of the aircraft upon landing, in kilograms.
     * Example: /// Example: 100.1
     * Constraints: No constraints specified.
     */
    val landingWeight : Double
        get() {
            val o = __offset(76)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * The sum of moments of all items making up the gross weight of the aircraft upon landing, in Newton-meters.
     * Example: /// Example: 2500.1
     * Constraints: No constraints specified.
     */
    val landingMoment : Double
        get() {
            val o = __offset(78)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * The center of gravity of the aircraft using the landing weight and landing moment, as a percentage of the mean aerodynamic chord (%MAC).
     * Example: /// Example: 38.2
     * Constraints: No constraints specified.
     */
    val landingCg : Double
        get() {
            val o = __offset(80)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Minimum fuselage station (FS) where cargo can be stored. FS is the distance from the reference datum, in meters.
     * Example: /// Example: 10
     * Constraints: No constraints specified.
     */
    val cargoBayFsmin : Int
        get() {
            val o = __offset(82)
            return if(o != 0) bb.getInt(o + bb_pos) else 0
        }
    /**
     * Maximum fuselage station (FS) where cargo can be stored. FS is the distance from the reference datum, in meters.
     * Example: /// Example: 20
     * Constraints: No constraints specified.
     */
    val cargoBayFsmax : Int
        get() {
            val o = __offset(84)
            return if(o != 0) bb.getInt(o + bb_pos) else 0
        }
    /**
     * Width of the cargo bay, in meters.
     * Example: /// Example: 3.1
     * Constraints: No constraints specified.
     */
    val cargoBayWidth : Double
        get() {
            val o = __offset(86)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Time the row was created in the database, auto-populated by the system.
     * Example: /// Example: 2023-03-21T16:00:00.123Z
     * Constraints: No constraints specified.
     */
    val createdAt : String?
        get() {
            val o = __offset(88)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val createdAtAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(88, 1)
    fun createdAtInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 88, 1)
    /**
     * Application user who created the row in the database, auto-populated by the system.
     * Example: /// Example: some.user
     * Constraints: Minimum length = 1, Maximum length = 64
     */
    val createdBy : String?
        get() {
            val o = __offset(90)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val createdByAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(90, 1)
    fun createdByInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 90, 1)
    /**
     * The source data library from which this record was received. This could be a remote or tactical UDL or another data library. If null, the record should be assumed to have originated from the primary Enterprise UDL.
     * Example: /// Example: AXE
     * Constraints: Minimum length = 0, Maximum length = 64
     */
    val sourceDl : String?
        get() {
            val o = __offset(92)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val sourceDlAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(92, 1)
    fun sourceDlInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 92, 1)
    /**
     * Source of the data.
     * Example: /// Example: source
     * Constraints: Minimum length = 1, Maximum length = 64
     */
    val source : String?
        get() {
            val o = __offset(94)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val sourceAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(94, 1)
    fun sourceInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 94, 1)
    /**
     * Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
     * Example: /// Example: THIRD_PARTY_DATASOURCE
     * Constraints: Minimum length = 0, Maximum length = 64
     */
    val origin : String?
        get() {
            val o = __offset(96)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val originAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(96, 1)
    fun originInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 96, 1)
    /**
     * The originating source network on which this record was created, auto-populated by the system.
     * Example: /// Example: ORIG
     * Constraints: Minimum length = 0, Maximum length = 32
     */
    val origNetwork : String?
        get() {
            val o = __offset(98)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val origNetworkAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(98, 1)
    fun origNetworkInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 98, 1)
    /**
     * Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
     * EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
     * REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
     * SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
     * TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
     * Example: /// Example: TEST
     * Constraints: Minimum length = 1, Maximum length = 32
     */
    val dataMode : Byte
        get() {
            val o = __offset(100)
            return if(o != 0) bb.get(o + bb_pos) else 0
        }
    companion object {
        fun validateVersion() = Constants.FLATBUFFERS_24_3_25()
        fun getRootAsAirLoadPlan_Ingest(_bb: ByteBuffer): AirLoadPlan_Ingest = getRootAsAirLoadPlan_Ingest(_bb, AirLoadPlan_Ingest())
        fun getRootAsAirLoadPlan_Ingest(_bb: ByteBuffer, obj: AirLoadPlan_Ingest): AirLoadPlan_Ingest {
            _bb.order(ByteOrder.LITTLE_ENDIAN)
            return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb))
        }
        fun AirLoadPlan_IngestBufferHasIdentifier(_bb: ByteBuffer) : Boolean = __has_identifier(_bb, "AIRL")
        fun createAirLoadPlan_Ingest(builder: FlatBufferBuilder, idOffset: Int, classificationMarkingOffset: Int, externalIdOffset: Int, idMissionOffset: Int, missionNumberOffset: Int, idSortieOffset: Int, legNum: Int, callSignOffset: Int, tailNumberOffset: Int, aircraftMdsOffset: Int, depIcaoOffset: Int, depAirfieldOffset: Int, estDepTimeOffset: Int, arrIcaoOffset: Int, arrAirfieldOffset: Int, estArrTimeOffset: Int, crewSize: Int, cargoConfigOffset: Int, equipConfigOffset: Int, tankConfigOffset: Int, basicWeight: Double, basicMoment: Double, fuelWeight: Double, fuelMoment: Double, estLandingFuelWeight: Double, estLandingFuelMoment: Double, operatingWeight: Double, operatingMoment: Double, cargoWeight: Double, cargoMoment: Double, zeroFuelWeight: Double, zeroFuelMoment: Double, zeroFuelCg: Double, grossWeight: Double, grossMoment: Double, grossCg: Double, landingWeight: Double, landingMoment: Double, landingCg: Double, cargoBayFsmin: Int, cargoBayFsmax: Int, cargoBayWidth: Double, createdAtOffset: Int, createdByOffset: Int, sourceDlOffset: Int, sourceOffset: Int, originOffset: Int, origNetworkOffset: Int, dataMode: Byte) : Int {
            builder.startTable(49)
            addCargoBayWidth(builder, cargoBayWidth)
            addLandingCG(builder, landingCg)
            addLandingMoment(builder, landingMoment)
            addLandingWeight(builder, landingWeight)
            addGrossCG(builder, grossCg)
            addGrossMoment(builder, grossMoment)
            addGrossWeight(builder, grossWeight)
            addZeroFuelCG(builder, zeroFuelCg)
            addZeroFuelMoment(builder, zeroFuelMoment)
            addZeroFuelWeight(builder, zeroFuelWeight)
            addCargoMoment(builder, cargoMoment)
            addCargoWeight(builder, cargoWeight)
            addOperatingMoment(builder, operatingMoment)
            addOperatingWeight(builder, operatingWeight)
            addEstLandingFuelMoment(builder, estLandingFuelMoment)
            addEstLandingFuelWeight(builder, estLandingFuelWeight)
            addFuelMoment(builder, fuelMoment)
            addFuelWeight(builder, fuelWeight)
            addBasicMoment(builder, basicMoment)
            addBasicWeight(builder, basicWeight)
            addOrigNetwork(builder, origNetworkOffset)
            addOrigin(builder, originOffset)
            addSource(builder, sourceOffset)
            addSourceDL(builder, sourceDlOffset)
            addCreatedBy(builder, createdByOffset)
            addCreatedAt(builder, createdAtOffset)
            addCargoBayFSMax(builder, cargoBayFsmax)
            addCargoBayFSMin(builder, cargoBayFsmin)
            addTankConfig(builder, tankConfigOffset)
            addEquipConfig(builder, equipConfigOffset)
            addCargoConfig(builder, cargoConfigOffset)
            addCrewSize(builder, crewSize)
            addEstArrTime(builder, estArrTimeOffset)
            addArrAirfield(builder, arrAirfieldOffset)
            addArrICAO(builder, arrIcaoOffset)
            addEstDepTime(builder, estDepTimeOffset)
            addDepAirfield(builder, depAirfieldOffset)
            addDepICAO(builder, depIcaoOffset)
            addAircraftMDS(builder, aircraftMdsOffset)
            addTailNumber(builder, tailNumberOffset)
            addCallSign(builder, callSignOffset)
            addLegNum(builder, legNum)
            addIdSortie(builder, idSortieOffset)
            addMissionNumber(builder, missionNumberOffset)
            addIdMission(builder, idMissionOffset)
            addExternalId(builder, externalIdOffset)
            addClassificationMarking(builder, classificationMarkingOffset)
            addId(builder, idOffset)
            addDataMode(builder, dataMode)
            return endAirLoadPlan_Ingest(builder)
        }
        fun startAirLoadPlan_Ingest(builder: FlatBufferBuilder) = builder.startTable(49)
        fun addId(builder: FlatBufferBuilder, id: Int) = builder.addOffset(0, id, 0)
        fun addClassificationMarking(builder: FlatBufferBuilder, classificationMarking: Int) = builder.addOffset(1, classificationMarking, 0)
        fun addExternalId(builder: FlatBufferBuilder, externalId: Int) = builder.addOffset(2, externalId, 0)
        fun addIdMission(builder: FlatBufferBuilder, idMission: Int) = builder.addOffset(3, idMission, 0)
        fun addMissionNumber(builder: FlatBufferBuilder, missionNumber: Int) = builder.addOffset(4, missionNumber, 0)
        fun addIdSortie(builder: FlatBufferBuilder, idSortie: Int) = builder.addOffset(5, idSortie, 0)
        fun addLegNum(builder: FlatBufferBuilder, legNum: Int) = builder.addInt(6, legNum, 0)
        fun addCallSign(builder: FlatBufferBuilder, callSign: Int) = builder.addOffset(7, callSign, 0)
        fun addTailNumber(builder: FlatBufferBuilder, tailNumber: Int) = builder.addOffset(8, tailNumber, 0)
        fun addAircraftMDS(builder: FlatBufferBuilder, aircraftMds: Int) = builder.addOffset(9, aircraftMds, 0)
        fun addDepICAO(builder: FlatBufferBuilder, depIcao: Int) = builder.addOffset(10, depIcao, 0)
        fun addDepAirfield(builder: FlatBufferBuilder, depAirfield: Int) = builder.addOffset(11, depAirfield, 0)
        fun addEstDepTime(builder: FlatBufferBuilder, estDepTime: Int) = builder.addOffset(12, estDepTime, 0)
        fun addArrICAO(builder: FlatBufferBuilder, arrIcao: Int) = builder.addOffset(13, arrIcao, 0)
        fun addArrAirfield(builder: FlatBufferBuilder, arrAirfield: Int) = builder.addOffset(14, arrAirfield, 0)
        fun addEstArrTime(builder: FlatBufferBuilder, estArrTime: Int) = builder.addOffset(15, estArrTime, 0)
        fun addCrewSize(builder: FlatBufferBuilder, crewSize: Int) = builder.addInt(16, crewSize, 0)
        fun addCargoConfig(builder: FlatBufferBuilder, cargoConfig: Int) = builder.addOffset(17, cargoConfig, 0)
        fun addEquipConfig(builder: FlatBufferBuilder, equipConfig: Int) = builder.addOffset(18, equipConfig, 0)
        fun addTankConfig(builder: FlatBufferBuilder, tankConfig: Int) = builder.addOffset(19, tankConfig, 0)
        fun addBasicWeight(builder: FlatBufferBuilder, basicWeight: Double) = builder.addDouble(20, basicWeight, 0.0)
        fun addBasicMoment(builder: FlatBufferBuilder, basicMoment: Double) = builder.addDouble(21, basicMoment, 0.0)
        fun addFuelWeight(builder: FlatBufferBuilder, fuelWeight: Double) = builder.addDouble(22, fuelWeight, 0.0)
        fun addFuelMoment(builder: FlatBufferBuilder, fuelMoment: Double) = builder.addDouble(23, fuelMoment, 0.0)
        fun addEstLandingFuelWeight(builder: FlatBufferBuilder, estLandingFuelWeight: Double) = builder.addDouble(24, estLandingFuelWeight, 0.0)
        fun addEstLandingFuelMoment(builder: FlatBufferBuilder, estLandingFuelMoment: Double) = builder.addDouble(25, estLandingFuelMoment, 0.0)
        fun addOperatingWeight(builder: FlatBufferBuilder, operatingWeight: Double) = builder.addDouble(26, operatingWeight, 0.0)
        fun addOperatingMoment(builder: FlatBufferBuilder, operatingMoment: Double) = builder.addDouble(27, operatingMoment, 0.0)
        fun addCargoWeight(builder: FlatBufferBuilder, cargoWeight: Double) = builder.addDouble(28, cargoWeight, 0.0)
        fun addCargoMoment(builder: FlatBufferBuilder, cargoMoment: Double) = builder.addDouble(29, cargoMoment, 0.0)
        fun addZeroFuelWeight(builder: FlatBufferBuilder, zeroFuelWeight: Double) = builder.addDouble(30, zeroFuelWeight, 0.0)
        fun addZeroFuelMoment(builder: FlatBufferBuilder, zeroFuelMoment: Double) = builder.addDouble(31, zeroFuelMoment, 0.0)
        fun addZeroFuelCG(builder: FlatBufferBuilder, zeroFuelCg: Double) = builder.addDouble(32, zeroFuelCg, 0.0)
        fun addGrossWeight(builder: FlatBufferBuilder, grossWeight: Double) = builder.addDouble(33, grossWeight, 0.0)
        fun addGrossMoment(builder: FlatBufferBuilder, grossMoment: Double) = builder.addDouble(34, grossMoment, 0.0)
        fun addGrossCG(builder: FlatBufferBuilder, grossCg: Double) = builder.addDouble(35, grossCg, 0.0)
        fun addLandingWeight(builder: FlatBufferBuilder, landingWeight: Double) = builder.addDouble(36, landingWeight, 0.0)
        fun addLandingMoment(builder: FlatBufferBuilder, landingMoment: Double) = builder.addDouble(37, landingMoment, 0.0)
        fun addLandingCG(builder: FlatBufferBuilder, landingCg: Double) = builder.addDouble(38, landingCg, 0.0)
        fun addCargoBayFSMin(builder: FlatBufferBuilder, cargoBayFsmin: Int) = builder.addInt(39, cargoBayFsmin, 0)
        fun addCargoBayFSMax(builder: FlatBufferBuilder, cargoBayFsmax: Int) = builder.addInt(40, cargoBayFsmax, 0)
        fun addCargoBayWidth(builder: FlatBufferBuilder, cargoBayWidth: Double) = builder.addDouble(41, cargoBayWidth, 0.0)
        fun addCreatedAt(builder: FlatBufferBuilder, createdAt: Int) = builder.addOffset(42, createdAt, 0)
        fun addCreatedBy(builder: FlatBufferBuilder, createdBy: Int) = builder.addOffset(43, createdBy, 0)
        fun addSourceDL(builder: FlatBufferBuilder, sourceDl: Int) = builder.addOffset(44, sourceDl, 0)
        fun addSource(builder: FlatBufferBuilder, source: Int) = builder.addOffset(45, source, 0)
        fun addOrigin(builder: FlatBufferBuilder, origin: Int) = builder.addOffset(46, origin, 0)
        fun addOrigNetwork(builder: FlatBufferBuilder, origNetwork: Int) = builder.addOffset(47, origNetwork, 0)
        fun addDataMode(builder: FlatBufferBuilder, dataMode: Byte) = builder.addByte(48, dataMode, 0)
        fun endAirLoadPlan_Ingest(builder: FlatBufferBuilder) : Int {
            val o = builder.endTable()
            return o
        }
        fun finishAirLoadPlanIngestBuffer(builder: FlatBufferBuilder, offset: Int) = builder.finish(offset, "AIRL")
        fun finishSizePrefixedAirLoadPlan_IngestBuffer(builder: FlatBufferBuilder, offset: Int) = builder.finishSizePrefixed(offset, "AIRL")
    }
}
