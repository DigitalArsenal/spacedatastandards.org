// automatically generated by the FlatBuffers compiler, do not modify

import com.google.flatbuffers.BaseVector
import com.google.flatbuffers.BooleanVector
import com.google.flatbuffers.ByteVector
import com.google.flatbuffers.Constants
import com.google.flatbuffers.DoubleVector
import com.google.flatbuffers.FlatBufferBuilder
import com.google.flatbuffers.FloatVector
import com.google.flatbuffers.LongVector
import com.google.flatbuffers.StringVector
import com.google.flatbuffers.Struct
import com.google.flatbuffers.Table
import com.google.flatbuffers.UnionVector
import java.nio.ByteBuffer
import java.nio.ByteOrder
import kotlin.math.sign

/**
 * /// Beta Version Navigational Obstruction: Information describing navigational obstructions, such as applicable boundaries, locations, heights, data ownership, and currency.
 */
@Suppress("unused")
class NavigationalObstruction_Abridged : Table() {

    fun __init(_i: Int, _bb: ByteBuffer)  {
        __reset(_i, _bb)
    }
    fun __assign(_i: Int, _bb: ByteBuffer) : NavigationalObstruction_Abridged {
        __init(_i, _bb)
        return this
    }
    /**
     * Unique identifier of the record, auto-generated by the system.
     * Example: /// Example: 026dd511-8ba5-47d3-9909-836149f87686
     * Constraints: Minimum length = 1, Maximum length = 36
     */
    val id : String?
        get() {
            val o = __offset(4)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val idAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(4, 1)
    fun idInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 4, 1)
    /**
     * Classification marking of the data in IC/CAPCO Portion-marked format.
     * Example: /// Example: U
     * Constraints: Minimum length = 1, Maximum length = 128
     */
    val classificationMarking : String?
        get() {
            val o = __offset(6)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val classificationMarkingAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(6, 1)
    fun classificationMarkingInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 6, 1)
    /**
     * Start date of this obstruction data set's currency, in ISO 8601 date-only format.
     * Example: /// Example: 2024-06-13
     * Constraints: No constraints specified.
     */
    val cycleDate : String?
        get() {
            val o = __offset(8)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val cycleDateAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(8, 1)
    fun cycleDateInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 8, 1)
    /**
     * Type of obstacle (e.g. P for point, V for vector, L for line).
     * Example: /// Example: V
     * Constraints: Minimum length = 1, Maximum length = 1
     */
    val obstacleType : String?
        get() {
            val o = __offset(10)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val obstacleTypeAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(10, 1)
    fun obstacleTypeInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 10, 1)
    /**
     * The ID of this obstacle.
     * Example: /// Example: 359655
     * Constraints: Minimum length = 1, Maximum length = 32
     */
    val obstacleId : String?
        get() {
            val o = __offset(12)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val obstacleIdAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(12, 1)
    fun obstacleIdInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 12, 1)
    /**
     * Optional obstacle ID from external systems. This field has no meaning within UDL and is provided as a convenience for systems that require tracking of an internal system generated ID.
     * Example: /// Example: OU812
     * Constraints: Minimum length = 0, Maximum length = 32
     */
    val externalId : String?
        get() {
            val o = __offset(14)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val externalIdAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(14, 1)
    fun externalIdInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 14, 1)
    /**
     * The original ID for this obstacle.
     * Example: /// Example: L0000002289
     * Constraints: Minimum length = 0, Maximum length = 36
     */
    val origId : String?
        get() {
            val o = __offset(16)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val origIdAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(16, 1)
    fun origIdInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 16, 1)
    /**
     * The DoD Standard Country Code designator for the country issuing the diplomatic clearance. This field will be set to "OTHR" if the source value does not match a UDL Country code value (ISO-3166-ALPHA-2).
     * Example: /// Example: US
     * Constraints: Minimum length = 0, Maximum length = 4
     */
    val countryCode : String?
        get() {
            val o = __offset(18)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val countryCodeAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(18, 1)
    fun countryCodeInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 18, 1)
    /**
     * The Federal Information Processing Standards (FIPS) state/province numeric code of this obstacle's location.
     * Example: /// Example: 23
     * Constraints: Minimum length = 0, Maximum length = 4
     */
    val provinceCode : String?
        get() {
            val o = __offset(20)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val provinceCodeAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(20, 1)
    fun provinceCodeInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 20, 1)
    /**
     * WGS-84 latitude of this point obstacle, in degrees. -90 to 90 degrees (negative values south of equator).
     * Example: /// Example: 46.757211
     * Constraints: No constraints specified.
     */
    val pointLat : Double
        get() {
            val o = __offset(22)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * WGS-84 longitude of this point obstacle, in degrees. -180 to 180 degrees (negative values west of Prime Meridian).
     * Example: /// Example: -67.759494
     * Constraints: No constraints specified.
     */
    val pointLon : Double
        get() {
            val o = __offset(24)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * WGS-84 longitude of the northeastern point of the line, in degrees. -180 to 180 degrees (negative values west of Prime Meridian).
     * Example: /// Example: -122.197891
     * Constraints: No constraints specified.
     */
    val lineNelon : Double
        get() {
            val o = __offset(26)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * WGS-84 latitude of the northeastern point of the line, in degrees. -90 to 90 degrees (negative values south of equator).
     * Example: /// Example: 49.000584
     * Constraints: No constraints specified.
     */
    val lineNelat : Double
        get() {
            val o = __offset(28)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * WGS-84 longitude of the southwestern point of the line, in degrees. -180 to 180 degrees (negative values west of Prime Meridian).
     * Example: /// Example: -122.722946
     * Constraints: No constraints specified.
     */
    val lineSwlon : Double
        get() {
            val o = __offset(30)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * WGS-84 latitude of the southwestern point of the line, in degrees. -90 to 90 degrees (negative values south of equator).
     * Example: /// Example: 48.507027
     * Constraints: No constraints specified.
     */
    val lineSwlat : Double
        get() {
            val o = __offset(32)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * ID of the starting point of a line segment.
     * Example: /// Example: 359655
     * Constraints: No constraints specified.
     */
    val segStartPoint : Int
        get() {
            val o = __offset(34)
            return if(o != 0) bb.getInt(o + bb_pos) else 0
        }
    /**
     * ID of the end point of a line segment.
     * Example: /// Example: 359655
     * Constraints: No constraints specified.
     */
    val segEndPoint : Int
        get() {
            val o = __offset(36)
            return if(o != 0) bb.getInt(o + bb_pos) else 0
        }
    /**
     * Identifies the sequence number of a line segment.
     * Example: /// Example: 1
     * Constraints: No constraints specified.
     */
    val segNum : Int
        get() {
            val o = __offset(38)
            return if(o != 0) bb.getInt(o + bb_pos) else 0
        }
    /**
     * FACC (Feature and Attribute Coding Catalog) is a five-character code for encoding real-world entities and objects. The first letter of the code is an alphabetic value from "A" to "Z" which will map to a feature category. The second character will map to a subcategory. Characters three to five are numeric and range from 000 to 999. This value will provide a unit feature type identification within the categories.
     * Example: /// Example: AT040
     * Constraints: Minimum length = 0, Maximum length = 5
     */
    val facc : String?
        get() {
            val o = __offset(40)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val faccAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(40, 1)
    fun faccInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 40, 1)
    /**
     * Identifying code for the type of this point obstacle.
     * Example: /// Example: 540
     * Constraints: Minimum length = 0, Maximum length = 4
     */
    val featureCode : String?
        get() {
            val o = __offset(42)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val featureCodeAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(42, 1)
    fun featureCodeInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 42, 1)
    /**
     * Identifying code for the type of this point obstacle.
     * Example: /// Example: 540
     * Constraints: Minimum length = 0, Maximum length = 4
     */
    val featureType : String?
        get() {
            val o = __offset(44)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val featureTypeAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(44, 1)
    fun featureTypeInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 44, 1)
    /**
     * Type name of point obstacle.
     * Example: /// Example: PYLON
     * Constraints: Minimum length = 0, Maximum length = 64
     */
    val featureName : String?
        get() {
            val o = __offset(46)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val featureNameAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(46, 1)
    fun featureNameInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 46, 1)
    /**
     * Description of this obstacle, corresponding to the FACC (Feature and Attribute Coding Catalog) value.
     * Example: /// Example: Powerline Pylon, General
     * Constraints: Minimum length = 0, Maximum length = 64
     */
    val featureDescription : String?
        get() {
            val o = __offset(48)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val featureDescriptionAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(48, 1)
    fun featureDescriptionInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 48, 1)
    /**
     * The World Aeronautical Chart (WAC) identifier for the area in which this obstacle is located.
     * Example: /// Example: 262
     * Constraints: Minimum length = 0, Maximum length = 4
     */
    val wac : String?
        get() {
            val o = __offset(50)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val wacAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(50, 1)
    fun wacInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 50, 1)
    /**
     * This obstacle's World Area Code installation number (WAC-INNR).
     * Example: /// Example: 0409-00039
     * Constraints: Minimum length = 0, Maximum length = 32
     */
    val wacInnr : String?
        get() {
            val o = __offset(52)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val wacInnrAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(52, 1)
    fun wacInnrInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 52, 1)
    /**
     * Indicates if the feature has multiple obstructions (e.g. S = Single, M = Multiple, U = Undetermined).
     * Example: /// Example: S
     * Constraints: Minimum length = 0, Maximum length = 1
     */
    val multObs : String?
        get() {
            val o = __offset(54)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val multObsAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(54, 1)
    fun multObsInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 54, 1)
    /**
     * Indicates the number of obstructions associated with a feature.
     * Example: /// Example: 1
     * Constraints: No constraints specified.
     */
    val numObs : Int
        get() {
            val o = __offset(56)
            return if(o != 0) bb.getInt(o + bb_pos) else 0
        }
    /**
     * Code representing the mathematical model of Earth used to calculate coordinates for this obstacle (e.g. WGS-84, U for undetermined, etc.).  US Forces use the World Geodetic System 1984 (WGS-84), but also use maps by allied countries with local datums.
     * Example: /// Example: WGS-84
     * Constraints: Minimum length = 0, Maximum length = 8
     */
    val horizDatumCode : String?
        get() {
            val o = __offset(58)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val horizDatumCodeAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(58, 1)
    fun horizDatumCodeInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 58, 1)
    /**
     * The height Above Ground Level (AGL) of the point obstacle in feet.
     * Example: /// Example: 314.1
     * Constraints: No constraints specified.
     */
    val heightAgl : Double
        get() {
            val o = __offset(60)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * The accuracy of the height Above Ground Level (AGL) AGL value for this point obstacle in feet.
     * Example: /// Example: 30.1
     * Constraints: No constraints specified.
     */
    val heightAglacc : Double
        get() {
            val o = __offset(62)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * The height Above Mean Sea Level (AMSL) of the point obstacle in feet.
     * Example: /// Example: 1154.1
     * Constraints: No constraints specified.
     */
    val heightMsl : Double
        get() {
            val o = __offset(64)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * The accuracy of the height Above Mean Sea Level (AMSL) value for this point obstacle in feet.
     * Example: /// Example: 34.1
     * Constraints: No constraints specified.
     */
    val heightMslacc : Double
        get() {
            val o = __offset(66)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * The elevation at the point obstacle's location in feet.
     * Example: /// Example: 840.1
     * Constraints: No constraints specified.
     */
    val elevation : Double
        get() {
            val o = __offset(68)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * The difference between the assigned elevation of this point and its true elevation, in feet.
     * Example: /// Example: 17.1
     * Constraints: No constraints specified.
     */
    val elevationAcc : Double
        get() {
            val o = __offset(70)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * The difference between the recorded horizontal coordinates of this point obstacle and its true position, in feet.
     * Example: /// Example: 8.1
     * Constraints: No constraints specified.
     */
    val horizAcc : Double
        get() {
            val o = __offset(72)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * When horizontal and/or vertical accuracy requirements cannot be met because of inadequate source material, this code indicates the quality of the data.
     * Example: /// Example: 0
     * Constraints: Minimum length = 0, Maximum length = 1
     */
    val quality : String?
        get() {
            val o = __offset(74)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val qualityAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(74, 1)
    fun qualityInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 74, 1)
    /**
     * Code specifying if this obstacle is lit (e.g. Y = Yes, N = No, U = Unknown).
     * Example: /// Example: U
     * Constraints: Minimum length = 0, Maximum length = 1
     */
    val lightingCode : String?
        get() {
            val o = __offset(76)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val lightingCodeAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(76, 1)
    fun lightingCodeInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 76, 1)
    /**
     * The surface material composition code of this point obstacle.
     * Example: /// Example: U
     * Constraints: Minimum length = 0, Maximum length = 1
     */
    val surfaceMatCode : String?
        get() {
            val o = __offset(78)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val surfaceMatCodeAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(78, 1)
    fun surfaceMatCodeInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 78, 1)
    /**
     * The side or sides of this obstruction feature which produces the greatest reflectivity potential.
     * Example: /// Example: 2
     * Constraints: No constraints specified.
     */
    val directivityCode : Int
        get() {
            val o = __offset(80)
            return if(o != 0) bb.getInt(o + bb_pos) else 0
        }
    /**
     * Method used to confirm the existence of this obstacle.
     * Example: /// Example: 3
     * Constraints: No constraints specified.
     */
    val validationCode : Int
        get() {
            val o = __offset(82)
            return if(o != 0) bb.getInt(o + bb_pos) else 0
        }
    /**
     * The transaction type/code for this obstacle (e.g. "D", "N", "R", "S", "V", "X").
     * Example: /// Example: V
     * Constraints: Minimum length = 0, Maximum length = 1
     */
    val transactionCode : String?
        get() {
            val o = __offset(84)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val transactionCodeAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(84, 1)
    fun transactionCodeInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 84, 1)
    /**
     * Code denoting the action, review, or process that updated this obstacle.
     * Example: /// Example: OT
     * Constraints: Minimum length = 0, Maximum length = 4
     */
    val processCode : String?
        get() {
            val o = __offset(86)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val processCodeAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(86, 1)
    fun processCodeInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 86, 1)
    /**
     * Indicates if this obstacle record is Active (A) or Deleted (D).
     * Example: /// Example: A
     * Constraints: Minimum length = 0, Maximum length = 1
     */
    val actDelCode : String?
        get() {
            val o = __offset(88)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val actDelCodeAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(88, 1)
    fun actDelCodeInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 88, 1)
    /**
     * Name of the agency that produced this obstruction data set.
     * Example: /// Example: ACME
     * Constraints: Minimum length = 0, Maximum length = 128
     */
    val producer : String?
        get() {
            val o = __offset(90)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val producerAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(90, 1)
    fun producerInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 90, 1)
    /**
     * The organization that entered obstacle data other than the producer.
     * Example: /// Example: ACME
     * Constraints: Minimum length = 0, Maximum length = 64
     */
    val derivingOrg : String?
        get() {
            val o = __offset(92)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val derivingOrgAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(92, 1)
    fun derivingOrgInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 92, 1)
    /**
     * The organization that deleted this obstacle record.
     * Example: /// Example: ACME
     * Constraints: Minimum length = 0, Maximum length = 64
     */
    val deletingOrg : String?
        get() {
            val o = __offset(94)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val deletingOrgAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(94, 1)
    fun deletingOrgInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 94, 1)
    /**
     * Source date of this obstacle data, in ISO 8601 date-only format (ex. YYYY-MM-DD).
     * Example: /// Example: 2016-04-01
     * Constraints: No constraints specified.
     */
    val sourceDate : String?
        get() {
            val o = __offset(96)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val sourceDateAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(96, 1)
    fun sourceDateInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 96, 1)
    /**
     * Date this obstacle data was revised, in ISO 8601 date-only format (ex. YYYY-MM-DD).
     * Example: /// Example: 2020-02-26
     * Constraints: No constraints specified.
     */
    val revDate : String?
        get() {
            val o = __offset(98)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val revDateAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(98, 1)
    fun revDateInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 98, 1)
    /**
     * Date this obstacle was initially added to the data set, in ISO 8601 date-only format (ex. YYYY-MM-DD).
     * Example: /// Example: 1991-03-28
     * Constraints: No constraints specified.
     */
    val initRecordDate : String?
        get() {
            val o = __offset(100)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val initRecordDateAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(100, 1)
    fun initRecordDateInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 100, 1)
    /**
     * This field provides an array of keys that can be added to any obstruction feature to provide information that is not already supported. The entries in this array must correspond to the position index in the values array. This array must be the same length as values.
     * Example: /// Example: ['key1', 'key2']
     * Constraints: No constraints specified.
     */
    fun keys(j: Int) : String? {
        val o = __offset(102)
        return if (o != 0) {
            __string(__vector(o) + j * 4)
        } else {
            null
        }
    }
    val keysLength : Int
        get() {
            val o = __offset(102); return if (o != 0) __vector_len(o) else 0
        }
    /**
     * This field provides an array of values that can be added to any obstruction feature to provide information that is not already supported. The entries in this array must correspond to the position index in the keys array. This array must be the same length as keys.
     * Example: /// Example: ['value1', 'value2']
     * Constraints: No constraints specified.
     */
    fun values(j: Int) : String? {
        val o = __offset(104)
        return if (o != 0) {
            __string(__vector(o) + j * 4)
        } else {
            null
        }
    }
    val valuesLength : Int
        get() {
            val o = __offset(104); return if (o != 0) __vector_len(o) else 0
        }
    /**
     * Remarks regarding this obstacle.
     * Example: /// Example: Obstacle remarks
     * Constraints: Minimum length = 0, Maximum length = 512
     */
    val obstacleRemarks : String?
        get() {
            val o = __offset(106)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val obstacleRemarksAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(106, 1)
    fun obstacleRemarksInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 106, 1)
    /**
     * The date after which this obstruction data set’s currency is stale and should be refreshed, in ISO 8601 date-only format (e.g. YYYY-MM-DD).
     * Example: /// Example: 2024-07-11
     * Constraints: No constraints specified.
     */
    val nextCycleDate : String?
        get() {
            val o = __offset(108)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val nextCycleDateAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(108, 1)
    fun nextCycleDateInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 108, 1)
    /**
     * Earliest record date possible in this obstruction data set (not the earliest data item), in ISO 8601 date-only format (e.g. YYYY-MM-DD). If null, this data set is assumed to be a full data pull of holdings until the cutoffDate.  If this field is populated, this data set only contains updates since the last baseline data set.
     * Example: /// Example: 2024-04-23
     * Constraints: No constraints specified.
     */
    val baselineCutoffDate : String?
        get() {
            val o = __offset(110)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val baselineCutoffDateAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(110, 1)
    fun baselineCutoffDateInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 110, 1)
    /**
     * Latest record date possible in this obstruction data set (not the most recent data item), in ISO 8601 date-only format (e.g. YYYY-MM-DD).
     * Example: /// Example: 2024-05-21
     * Constraints: No constraints specified.
     */
    val cutoffDate : String?
        get() {
            val o = __offset(112)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val cutoffDateAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(112, 1)
    fun cutoffDateInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 112, 1)
    /**
     * The Aeronautical Information Regulation and Control (AIRAC) cycle of this obstruction data set. The format is YYNN where YY is the last two digits of the year and NN is the cycle number.
     * Example: /// Example: 2406
     * Constraints: No constraints specified.
     */
    val airacCycle : Int
        get() {
            val o = __offset(114)
            return if(o != 0) bb.getInt(o + bb_pos) else 0
        }
    /**
     * The baseline Aeronautical Information Regulation and Control (AIRAC) cycle for change sets only. The format is YYNN where YY is the last two digits of the year and NN is the cycle number.
     * Example: /// Example: 2405
     * Constraints: No constraints specified.
     */
    val baseAiracCycle : Int
        get() {
            val o = __offset(116)
            return if(o != 0) bb.getInt(o + bb_pos) else 0
        }
    /**
     * The DoD Standard Country Code designator for the country or political entity that owns the data set associated with this obstruction. This field will be set to "OTHR" if the source value does not match a UDL Country code value (ISO-3166-ALPHA-2).
     * Example: /// Example: US
     * Constraints: Minimum length = 0, Maximum length = 4
     */
    val ownerCountryCode : String?
        get() {
            val o = __offset(118)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val ownerCountryCodeAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(118, 1)
    fun ownerCountryCodeInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 118, 1)
    /**
     * WGS-84 longitude of the northeastern boundary for obstructions contained in this data set, in degrees. -180 to 180 degrees (negative values west of Prime Meridian).
     * Example: /// Example: 99.1
     * Constraints: No constraints specified.
     */
    val boundNelon : Double
        get() {
            val o = __offset(120)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * WGS-84 latitude of the northeastern boundary for obstructions contained in this data set, in degrees. -90 to 90 degrees (negative values south of equator).
     * Example: /// Example: 29.1
     * Constraints: No constraints specified.
     */
    val boundNelat : Double
        get() {
            val o = __offset(122)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * WGS-84 longitude of the southwestern boundary for obstructions contained in this data set, in degrees. -180 to 180 degrees (negative values west of Prime Meridian).
     * Example: /// Example: -144.1
     * Constraints: No constraints specified.
     */
    val boundSwlon : Double
        get() {
            val o = __offset(124)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * WGS-84 latitude of the southwestern boundary for obstructions contained in this data set, in degrees. -90 to 90 degrees (negative values south of equator).
     * Example: /// Example: -44.1
     * Constraints: No constraints specified.
     */
    val boundSwlat : Double
        get() {
            val o = __offset(126)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * The minimum height Above Ground Level (AGL) of the shortest obstruction contained in this data set, in feet.
     * Example: /// Example: 20.1
     * Constraints: No constraints specified.
     */
    val minHeightAgl : Double
        get() {
            val o = __offset(128)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * The number of point features associated with this obstruction data set.
     * Example: /// Example: 21830590
     * Constraints: No constraints specified.
     */
    val numPoints : Int
        get() {
            val o = __offset(130)
            return if(o != 0) bb.getInt(o + bb_pos) else 0
        }
    /**
     * The number of line features associated with this obstruction data set.
     * Example: /// Example: 45993
     * Constraints: No constraints specified.
     */
    val numLines : Int
        get() {
            val o = __offset(132)
            return if(o != 0) bb.getInt(o + bb_pos) else 0
        }
    /**
     * Remarks concerning this obstruction's data set.
     * Example: /// Example: Data set remarks
     * Constraints: Minimum length = 0, Maximum length = 512
     */
    val dataSetRemarks : String?
        get() {
            val o = __offset(134)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val dataSetRemarksAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(134, 1)
    fun dataSetRemarksInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 134, 1)
    /**
     * The name of the point file associated with this obstruction data set.
     * Example: /// Example: points.txt
     * Constraints: Minimum length = 0, Maximum length = 256
     */
    val pointsFilename : String?
        get() {
            val o = __offset(136)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val pointsFilenameAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(136, 1)
    fun pointsFilenameInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 136, 1)
    /**
     * The name of the line file associated with this obstruction data set.
     * Example: /// Example: lines.txt
     * Constraints: Minimum length = 0, Maximum length = 256
     */
    val linesFilename : String?
        get() {
            val o = __offset(138)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val linesFilenameAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(138, 1)
    fun linesFilenameInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 138, 1)
    /**
     * The name of the vector file associated with this obstruction data set.
     * Example: /// Example: vectors.txt
     * Constraints: Minimum length = 0, Maximum length = 256
     */
    val vectorsFilename : String?
        get() {
            val o = __offset(140)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val vectorsFilenameAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(140, 1)
    fun vectorsFilenameInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 140, 1)
    /**
     * Optional URI location in the document repository of the raw file parsed by the system to produce this record. To download the raw file, prepend https://udl-hostname/scs/download?id= to this value.
     * Example: /// Example: Example URI
     * Constraints: Minimum length = 0, Maximum length = 256
     */
    val rawFileUri : String?
        get() {
            val o = __offset(142)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val rawFileUriAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(142, 1)
    fun rawFileUriInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 142, 1)
    /**
     * Time the row was created in the database, auto-populated by the system.
     * Example: /// Example: 2022-01-01T16:00:00.123Z
     * Constraints: No constraints specified.
     */
    val createdAt : String?
        get() {
            val o = __offset(144)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val createdAtAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(144, 1)
    fun createdAtInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 144, 1)
    /**
     * Application user who created the row in the database, auto-populated by the system.
     * Example: /// Example: some.user
     * Constraints: Minimum length = 1, Maximum length = 64
     */
    val createdBy : String?
        get() {
            val o = __offset(146)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val createdByAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(146, 1)
    fun createdByInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 146, 1)
    /**
     * The source data library from which this record was received. This could be a remote or tactical UDL or another data library. If null, the record should be assumed to have originated from the primary Enterprise UDL.
     * Example: /// Example: AXE
     * Constraints: Minimum length = 0, Maximum length = 64
     */
    val sourceDl : String?
        get() {
            val o = __offset(148)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val sourceDlAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(148, 1)
    fun sourceDlInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 148, 1)
    /**
     * Source of the data.
     * Example: /// Example: Bluestaq
     * Constraints: Minimum length = 1, Maximum length = 36
     */
    val source : String?
        get() {
            val o = __offset(150)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val sourceAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(150, 1)
    fun sourceInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 150, 1)
    /**
     * Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
     * Example: /// Example: THIRD_PARTY_DATASOURCE
     * Constraints: Minimum length = 0, Maximum length = 64
     */
    val origin : String?
        get() {
            val o = __offset(152)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val originAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(152, 1)
    fun originInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 152, 1)
    /**
     * The originating source network on which this record was created, auto-populated by the system.
     * Example: /// Example: OPS1
     * Constraints: Minimum length = 1, Maximum length = 32
     */
    val origNetwork : String?
        get() {
            val o = __offset(154)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val origNetworkAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(154, 1)
    fun origNetworkInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 154, 1)
    /**
     * Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
     * EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
     * REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
     * SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
     * TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
     * Example: /// Example: TEST
     * Constraints: Minimum length = 1, Maximum length = 32
     */
    val dataMode : Byte
        get() {
            val o = __offset(156)
            return if(o != 0) bb.get(o + bb_pos) else 0
        }
    companion object {
        fun validateVersion() = Constants.FLATBUFFERS_24_3_25()
        fun getRootAsNavigationalObstruction_Abridged(_bb: ByteBuffer): NavigationalObstruction_Abridged = getRootAsNavigationalObstruction_Abridged(_bb, NavigationalObstruction_Abridged())
        fun getRootAsNavigationalObstruction_Abridged(_bb: ByteBuffer, obj: NavigationalObstruction_Abridged): NavigationalObstruction_Abridged {
            _bb.order(ByteOrder.LITTLE_ENDIAN)
            return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb))
        }
        fun NavigationalObstruction_AbridgedBufferHasIdentifier(_bb: ByteBuffer) : Boolean = __has_identifier(_bb, "NAVI")
        fun createNavigationalObstruction_Abridged(builder: FlatBufferBuilder, idOffset: Int, classificationMarkingOffset: Int, cycleDateOffset: Int, obstacleTypeOffset: Int, obstacleIdOffset: Int, externalIdOffset: Int, origIdOffset: Int, countryCodeOffset: Int, provinceCodeOffset: Int, pointLat: Double, pointLon: Double, lineNelon: Double, lineNelat: Double, lineSwlon: Double, lineSwlat: Double, segStartPoint: Int, segEndPoint: Int, segNum: Int, faccOffset: Int, featureCodeOffset: Int, featureTypeOffset: Int, featureNameOffset: Int, featureDescriptionOffset: Int, wacOffset: Int, wacInnrOffset: Int, multObsOffset: Int, numObs: Int, horizDatumCodeOffset: Int, heightAgl: Double, heightAglacc: Double, heightMsl: Double, heightMslacc: Double, elevation: Double, elevationAcc: Double, horizAcc: Double, qualityOffset: Int, lightingCodeOffset: Int, surfaceMatCodeOffset: Int, directivityCode: Int, validationCode: Int, transactionCodeOffset: Int, processCodeOffset: Int, actDelCodeOffset: Int, producerOffset: Int, derivingOrgOffset: Int, deletingOrgOffset: Int, sourceDateOffset: Int, revDateOffset: Int, initRecordDateOffset: Int, keysOffset: Int, valuesOffset: Int, obstacleRemarksOffset: Int, nextCycleDateOffset: Int, baselineCutoffDateOffset: Int, cutoffDateOffset: Int, airacCycle: Int, baseAiracCycle: Int, ownerCountryCodeOffset: Int, boundNelon: Double, boundNelat: Double, boundSwlon: Double, boundSwlat: Double, minHeightAgl: Double, numPoints: Int, numLines: Int, dataSetRemarksOffset: Int, pointsFilenameOffset: Int, linesFilenameOffset: Int, vectorsFilenameOffset: Int, rawFileUriOffset: Int, createdAtOffset: Int, createdByOffset: Int, sourceDlOffset: Int, sourceOffset: Int, originOffset: Int, origNetworkOffset: Int, dataMode: Byte) : Int {
            builder.startTable(77)
            addMinHeightAGL(builder, minHeightAgl)
            addBoundSWLat(builder, boundSwlat)
            addBoundSWLon(builder, boundSwlon)
            addBoundNELat(builder, boundNelat)
            addBoundNELon(builder, boundNelon)
            addHorizAcc(builder, horizAcc)
            addElevationAcc(builder, elevationAcc)
            addElevation(builder, elevation)
            addHeightMSLAcc(builder, heightMslacc)
            addHeightMSL(builder, heightMsl)
            addHeightAGLAcc(builder, heightAglacc)
            addHeightAGL(builder, heightAgl)
            addLineSWLat(builder, lineSwlat)
            addLineSWLon(builder, lineSwlon)
            addLineNELat(builder, lineNelat)
            addLineNELon(builder, lineNelon)
            addPointLon(builder, pointLon)
            addPointLat(builder, pointLat)
            addOrigNetwork(builder, origNetworkOffset)
            addOrigin(builder, originOffset)
            addSource(builder, sourceOffset)
            addSourceDL(builder, sourceDlOffset)
            addCreatedBy(builder, createdByOffset)
            addCreatedAt(builder, createdAtOffset)
            addRawFileURI(builder, rawFileUriOffset)
            addVectorsFilename(builder, vectorsFilenameOffset)
            addLinesFilename(builder, linesFilenameOffset)
            addPointsFilename(builder, pointsFilenameOffset)
            addDataSetRemarks(builder, dataSetRemarksOffset)
            addNumLines(builder, numLines)
            addNumPoints(builder, numPoints)
            addOwnerCountryCode(builder, ownerCountryCodeOffset)
            addBaseAiracCycle(builder, baseAiracCycle)
            addAiracCycle(builder, airacCycle)
            addCutoffDate(builder, cutoffDateOffset)
            addBaselineCutoffDate(builder, baselineCutoffDateOffset)
            addNextCycleDate(builder, nextCycleDateOffset)
            addObstacleRemarks(builder, obstacleRemarksOffset)
            addValues(builder, valuesOffset)
            addKeys(builder, keysOffset)
            addInitRecordDate(builder, initRecordDateOffset)
            addRevDate(builder, revDateOffset)
            addSourceDate(builder, sourceDateOffset)
            addDeletingOrg(builder, deletingOrgOffset)
            addDerivingOrg(builder, derivingOrgOffset)
            addProducer(builder, producerOffset)
            addActDelCode(builder, actDelCodeOffset)
            addProcessCode(builder, processCodeOffset)
            addTransactionCode(builder, transactionCodeOffset)
            addValidationCode(builder, validationCode)
            addDirectivityCode(builder, directivityCode)
            addSurfaceMatCode(builder, surfaceMatCodeOffset)
            addLightingCode(builder, lightingCodeOffset)
            addQuality(builder, qualityOffset)
            addHorizDatumCode(builder, horizDatumCodeOffset)
            addNumObs(builder, numObs)
            addMultObs(builder, multObsOffset)
            addWacINNR(builder, wacInnrOffset)
            addWac(builder, wacOffset)
            addFeatureDescription(builder, featureDescriptionOffset)
            addFeatureName(builder, featureNameOffset)
            addFeatureType(builder, featureTypeOffset)
            addFeatureCode(builder, featureCodeOffset)
            addFacc(builder, faccOffset)
            addSegNum(builder, segNum)
            addSegEndPoint(builder, segEndPoint)
            addSegStartPoint(builder, segStartPoint)
            addProvinceCode(builder, provinceCodeOffset)
            addCountryCode(builder, countryCodeOffset)
            addOrigId(builder, origIdOffset)
            addExternalId(builder, externalIdOffset)
            addObstacleId(builder, obstacleIdOffset)
            addObstacleType(builder, obstacleTypeOffset)
            addCycleDate(builder, cycleDateOffset)
            addClassificationMarking(builder, classificationMarkingOffset)
            addId(builder, idOffset)
            addDataMode(builder, dataMode)
            return endNavigationalObstruction_Abridged(builder)
        }
        fun startNavigationalObstruction_Abridged(builder: FlatBufferBuilder) = builder.startTable(77)
        fun addId(builder: FlatBufferBuilder, id: Int) = builder.addOffset(0, id, 0)
        fun addClassificationMarking(builder: FlatBufferBuilder, classificationMarking: Int) = builder.addOffset(1, classificationMarking, 0)
        fun addCycleDate(builder: FlatBufferBuilder, cycleDate: Int) = builder.addOffset(2, cycleDate, 0)
        fun addObstacleType(builder: FlatBufferBuilder, obstacleType: Int) = builder.addOffset(3, obstacleType, 0)
        fun addObstacleId(builder: FlatBufferBuilder, obstacleId: Int) = builder.addOffset(4, obstacleId, 0)
        fun addExternalId(builder: FlatBufferBuilder, externalId: Int) = builder.addOffset(5, externalId, 0)
        fun addOrigId(builder: FlatBufferBuilder, origId: Int) = builder.addOffset(6, origId, 0)
        fun addCountryCode(builder: FlatBufferBuilder, countryCode: Int) = builder.addOffset(7, countryCode, 0)
        fun addProvinceCode(builder: FlatBufferBuilder, provinceCode: Int) = builder.addOffset(8, provinceCode, 0)
        fun addPointLat(builder: FlatBufferBuilder, pointLat: Double) = builder.addDouble(9, pointLat, 0.0)
        fun addPointLon(builder: FlatBufferBuilder, pointLon: Double) = builder.addDouble(10, pointLon, 0.0)
        fun addLineNELon(builder: FlatBufferBuilder, lineNelon: Double) = builder.addDouble(11, lineNelon, 0.0)
        fun addLineNELat(builder: FlatBufferBuilder, lineNelat: Double) = builder.addDouble(12, lineNelat, 0.0)
        fun addLineSWLon(builder: FlatBufferBuilder, lineSwlon: Double) = builder.addDouble(13, lineSwlon, 0.0)
        fun addLineSWLat(builder: FlatBufferBuilder, lineSwlat: Double) = builder.addDouble(14, lineSwlat, 0.0)
        fun addSegStartPoint(builder: FlatBufferBuilder, segStartPoint: Int) = builder.addInt(15, segStartPoint, 0)
        fun addSegEndPoint(builder: FlatBufferBuilder, segEndPoint: Int) = builder.addInt(16, segEndPoint, 0)
        fun addSegNum(builder: FlatBufferBuilder, segNum: Int) = builder.addInt(17, segNum, 0)
        fun addFacc(builder: FlatBufferBuilder, facc: Int) = builder.addOffset(18, facc, 0)
        fun addFeatureCode(builder: FlatBufferBuilder, featureCode: Int) = builder.addOffset(19, featureCode, 0)
        fun addFeatureType(builder: FlatBufferBuilder, featureType: Int) = builder.addOffset(20, featureType, 0)
        fun addFeatureName(builder: FlatBufferBuilder, featureName: Int) = builder.addOffset(21, featureName, 0)
        fun addFeatureDescription(builder: FlatBufferBuilder, featureDescription: Int) = builder.addOffset(22, featureDescription, 0)
        fun addWac(builder: FlatBufferBuilder, wac: Int) = builder.addOffset(23, wac, 0)
        fun addWacINNR(builder: FlatBufferBuilder, wacInnr: Int) = builder.addOffset(24, wacInnr, 0)
        fun addMultObs(builder: FlatBufferBuilder, multObs: Int) = builder.addOffset(25, multObs, 0)
        fun addNumObs(builder: FlatBufferBuilder, numObs: Int) = builder.addInt(26, numObs, 0)
        fun addHorizDatumCode(builder: FlatBufferBuilder, horizDatumCode: Int) = builder.addOffset(27, horizDatumCode, 0)
        fun addHeightAGL(builder: FlatBufferBuilder, heightAgl: Double) = builder.addDouble(28, heightAgl, 0.0)
        fun addHeightAGLAcc(builder: FlatBufferBuilder, heightAglacc: Double) = builder.addDouble(29, heightAglacc, 0.0)
        fun addHeightMSL(builder: FlatBufferBuilder, heightMsl: Double) = builder.addDouble(30, heightMsl, 0.0)
        fun addHeightMSLAcc(builder: FlatBufferBuilder, heightMslacc: Double) = builder.addDouble(31, heightMslacc, 0.0)
        fun addElevation(builder: FlatBufferBuilder, elevation: Double) = builder.addDouble(32, elevation, 0.0)
        fun addElevationAcc(builder: FlatBufferBuilder, elevationAcc: Double) = builder.addDouble(33, elevationAcc, 0.0)
        fun addHorizAcc(builder: FlatBufferBuilder, horizAcc: Double) = builder.addDouble(34, horizAcc, 0.0)
        fun addQuality(builder: FlatBufferBuilder, quality: Int) = builder.addOffset(35, quality, 0)
        fun addLightingCode(builder: FlatBufferBuilder, lightingCode: Int) = builder.addOffset(36, lightingCode, 0)
        fun addSurfaceMatCode(builder: FlatBufferBuilder, surfaceMatCode: Int) = builder.addOffset(37, surfaceMatCode, 0)
        fun addDirectivityCode(builder: FlatBufferBuilder, directivityCode: Int) = builder.addInt(38, directivityCode, 0)
        fun addValidationCode(builder: FlatBufferBuilder, validationCode: Int) = builder.addInt(39, validationCode, 0)
        fun addTransactionCode(builder: FlatBufferBuilder, transactionCode: Int) = builder.addOffset(40, transactionCode, 0)
        fun addProcessCode(builder: FlatBufferBuilder, processCode: Int) = builder.addOffset(41, processCode, 0)
        fun addActDelCode(builder: FlatBufferBuilder, actDelCode: Int) = builder.addOffset(42, actDelCode, 0)
        fun addProducer(builder: FlatBufferBuilder, producer: Int) = builder.addOffset(43, producer, 0)
        fun addDerivingOrg(builder: FlatBufferBuilder, derivingOrg: Int) = builder.addOffset(44, derivingOrg, 0)
        fun addDeletingOrg(builder: FlatBufferBuilder, deletingOrg: Int) = builder.addOffset(45, deletingOrg, 0)
        fun addSourceDate(builder: FlatBufferBuilder, sourceDate: Int) = builder.addOffset(46, sourceDate, 0)
        fun addRevDate(builder: FlatBufferBuilder, revDate: Int) = builder.addOffset(47, revDate, 0)
        fun addInitRecordDate(builder: FlatBufferBuilder, initRecordDate: Int) = builder.addOffset(48, initRecordDate, 0)
        fun addKeys(builder: FlatBufferBuilder, keys: Int) = builder.addOffset(49, keys, 0)
        fun createKeysVector(builder: FlatBufferBuilder, data: IntArray) : Int {
            builder.startVector(4, data.size, 4)
            for (i in data.size - 1 downTo 0) {
                builder.addOffset(data[i])
            }
            return builder.endVector()
        }
        fun startKeysVector(builder: FlatBufferBuilder, numElems: Int) = builder.startVector(4, numElems, 4)
        fun addValues(builder: FlatBufferBuilder, values: Int) = builder.addOffset(50, values, 0)
        fun createValuesVector(builder: FlatBufferBuilder, data: IntArray) : Int {
            builder.startVector(4, data.size, 4)
            for (i in data.size - 1 downTo 0) {
                builder.addOffset(data[i])
            }
            return builder.endVector()
        }
        fun startValuesVector(builder: FlatBufferBuilder, numElems: Int) = builder.startVector(4, numElems, 4)
        fun addObstacleRemarks(builder: FlatBufferBuilder, obstacleRemarks: Int) = builder.addOffset(51, obstacleRemarks, 0)
        fun addNextCycleDate(builder: FlatBufferBuilder, nextCycleDate: Int) = builder.addOffset(52, nextCycleDate, 0)
        fun addBaselineCutoffDate(builder: FlatBufferBuilder, baselineCutoffDate: Int) = builder.addOffset(53, baselineCutoffDate, 0)
        fun addCutoffDate(builder: FlatBufferBuilder, cutoffDate: Int) = builder.addOffset(54, cutoffDate, 0)
        fun addAiracCycle(builder: FlatBufferBuilder, airacCycle: Int) = builder.addInt(55, airacCycle, 0)
        fun addBaseAiracCycle(builder: FlatBufferBuilder, baseAiracCycle: Int) = builder.addInt(56, baseAiracCycle, 0)
        fun addOwnerCountryCode(builder: FlatBufferBuilder, ownerCountryCode: Int) = builder.addOffset(57, ownerCountryCode, 0)
        fun addBoundNELon(builder: FlatBufferBuilder, boundNelon: Double) = builder.addDouble(58, boundNelon, 0.0)
        fun addBoundNELat(builder: FlatBufferBuilder, boundNelat: Double) = builder.addDouble(59, boundNelat, 0.0)
        fun addBoundSWLon(builder: FlatBufferBuilder, boundSwlon: Double) = builder.addDouble(60, boundSwlon, 0.0)
        fun addBoundSWLat(builder: FlatBufferBuilder, boundSwlat: Double) = builder.addDouble(61, boundSwlat, 0.0)
        fun addMinHeightAGL(builder: FlatBufferBuilder, minHeightAgl: Double) = builder.addDouble(62, minHeightAgl, 0.0)
        fun addNumPoints(builder: FlatBufferBuilder, numPoints: Int) = builder.addInt(63, numPoints, 0)
        fun addNumLines(builder: FlatBufferBuilder, numLines: Int) = builder.addInt(64, numLines, 0)
        fun addDataSetRemarks(builder: FlatBufferBuilder, dataSetRemarks: Int) = builder.addOffset(65, dataSetRemarks, 0)
        fun addPointsFilename(builder: FlatBufferBuilder, pointsFilename: Int) = builder.addOffset(66, pointsFilename, 0)
        fun addLinesFilename(builder: FlatBufferBuilder, linesFilename: Int) = builder.addOffset(67, linesFilename, 0)
        fun addVectorsFilename(builder: FlatBufferBuilder, vectorsFilename: Int) = builder.addOffset(68, vectorsFilename, 0)
        fun addRawFileURI(builder: FlatBufferBuilder, rawFileUri: Int) = builder.addOffset(69, rawFileUri, 0)
        fun addCreatedAt(builder: FlatBufferBuilder, createdAt: Int) = builder.addOffset(70, createdAt, 0)
        fun addCreatedBy(builder: FlatBufferBuilder, createdBy: Int) = builder.addOffset(71, createdBy, 0)
        fun addSourceDL(builder: FlatBufferBuilder, sourceDl: Int) = builder.addOffset(72, sourceDl, 0)
        fun addSource(builder: FlatBufferBuilder, source: Int) = builder.addOffset(73, source, 0)
        fun addOrigin(builder: FlatBufferBuilder, origin: Int) = builder.addOffset(74, origin, 0)
        fun addOrigNetwork(builder: FlatBufferBuilder, origNetwork: Int) = builder.addOffset(75, origNetwork, 0)
        fun addDataMode(builder: FlatBufferBuilder, dataMode: Byte) = builder.addByte(76, dataMode, 0)
        fun endNavigationalObstruction_Abridged(builder: FlatBufferBuilder) : Int {
            val o = builder.endTable()
            return o
        }
        fun finishNavigationalObstructionAbridgedBuffer(builder: FlatBufferBuilder, offset: Int) = builder.finish(offset, "NAVI")
        fun finishSizePrefixedNavigationalObstruction_AbridgedBuffer(builder: FlatBufferBuilder, offset: Int) = builder.finishSizePrefixed(offset, "NAVI")
    }
}
