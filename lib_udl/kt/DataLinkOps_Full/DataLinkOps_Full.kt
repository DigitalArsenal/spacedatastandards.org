// automatically generated by the FlatBuffers compiler, do not modify

import com.google.flatbuffers.BaseVector
import com.google.flatbuffers.BooleanVector
import com.google.flatbuffers.ByteVector
import com.google.flatbuffers.Constants
import com.google.flatbuffers.DoubleVector
import com.google.flatbuffers.FlatBufferBuilder
import com.google.flatbuffers.FloatVector
import com.google.flatbuffers.LongVector
import com.google.flatbuffers.StringVector
import com.google.flatbuffers.Struct
import com.google.flatbuffers.Table
import com.google.flatbuffers.UnionVector
import java.nio.ByteBuffer
import java.nio.ByteOrder
import kotlin.math.sign

/**
 * /// Collection of information describing the establishment and detailed operation of tactical data links. There can be 0 to many DataLinkOps collections within the datalink service.
 */
@Suppress("unused")
class DataLinkOps_Full : Table() {

    fun __init(_i: Int, _bb: ByteBuffer)  {
        __reset(_i, _bb)
    }
    fun __assign(_i: Int, _bb: ByteBuffer) : DataLinkOps_Full {
        __init(_i, _bb)
        return this
    }
    /**
     * Name of the data link.
     * Example: /// Example: Link-16
     * Constraints: Minimum length = 0, Maximum length = 24
     */
    val linkName : String?
        get() {
            val o = __offset(4)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val linkNameAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(4, 1)
    fun linkNameInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 4, 1)
    /**
     * The start of the effective time period of the data link, in ISO 8601 UTC format with millisecond precision.
     * Example: /// Example: 2024-01-07T13:55:43.123Z
     * Constraints: No constraints specified.
     */
    val linkStartTime : String?
        get() {
            val o = __offset(6)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val linkStartTimeAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(6, 1)
    fun linkStartTimeInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 6, 1)
    /**
     * The end of the effective time period of the data link, in ISO 8601 UTC format with millisecond precision.
     * Example: /// Example: 2024-01-08T13:55:43.123Z
     * Constraints: No constraints specified.
     */
    val linkStopTime : String?
        get() {
            val o = __offset(8)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val linkStopTimeAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(8, 1)
    fun linkStopTimeInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 8, 1)
    /**
     * A qualifier for the end of the effective time period of this data link, such as AFTER, ASOF, NLT, etc. Used with field linkStopTimeMod to indicate a relative time.
     * Example: /// Example: AFTER
     * Constraints: Minimum length = 0, Maximum length = 8
     */
    val linkStopTimeMod : String?
        get() {
            val o = __offset(10)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val linkStopTimeModAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(10, 1)
    fun linkStopTimeModInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 10, 1)
    /**
     * Detailed characteristics of the data link.
     * Example: /// Example: Link details
     * Constraints: Minimum length = 0, Maximum length = 3000
     */
    val linkDetails : String?
        get() {
            val o = __offset(12)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val linkDetailsAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(12, 1)
    fun linkDetailsInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 12, 1)
    companion object {
        fun validateVersion() = Constants.FLATBUFFERS_24_3_25()
        fun getRootAsDataLinkOps_Full(_bb: ByteBuffer): DataLinkOps_Full = getRootAsDataLinkOps_Full(_bb, DataLinkOps_Full())
        fun getRootAsDataLinkOps_Full(_bb: ByteBuffer, obj: DataLinkOps_Full): DataLinkOps_Full {
            _bb.order(ByteOrder.LITTLE_ENDIAN)
            return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb))
        }
        fun DataLinkOps_FullBufferHasIdentifier(_bb: ByteBuffer) : Boolean = __has_identifier(_bb, "DATA")
        fun createDataLinkOps_Full(builder: FlatBufferBuilder, linkNameOffset: Int, linkStartTimeOffset: Int, linkStopTimeOffset: Int, linkStopTimeModOffset: Int, linkDetailsOffset: Int) : Int {
            builder.startTable(5)
            addLinkDetails(builder, linkDetailsOffset)
            addLinkStopTimeMod(builder, linkStopTimeModOffset)
            addLinkStopTime(builder, linkStopTimeOffset)
            addLinkStartTime(builder, linkStartTimeOffset)
            addLinkName(builder, linkNameOffset)
            return endDataLinkOps_Full(builder)
        }
        fun startDataLinkOps_Full(builder: FlatBufferBuilder) = builder.startTable(5)
        fun addLinkName(builder: FlatBufferBuilder, linkName: Int) = builder.addOffset(0, linkName, 0)
        fun addLinkStartTime(builder: FlatBufferBuilder, linkStartTime: Int) = builder.addOffset(1, linkStartTime, 0)
        fun addLinkStopTime(builder: FlatBufferBuilder, linkStopTime: Int) = builder.addOffset(2, linkStopTime, 0)
        fun addLinkStopTimeMod(builder: FlatBufferBuilder, linkStopTimeMod: Int) = builder.addOffset(3, linkStopTimeMod, 0)
        fun addLinkDetails(builder: FlatBufferBuilder, linkDetails: Int) = builder.addOffset(4, linkDetails, 0)
        fun endDataLinkOps_Full(builder: FlatBufferBuilder) : Int {
            val o = builder.endTable()
            return o
        }
        fun finishDataLinkOpsFullBuffer(builder: FlatBufferBuilder, offset: Int) = builder.finish(offset, "DATA")
        fun finishSizePrefixedDataLinkOps_FullBuffer(builder: FlatBufferBuilder, offset: Int) = builder.finishSizePrefixed(offset, "DATA")
    }
}
