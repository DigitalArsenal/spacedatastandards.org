// automatically generated by the FlatBuffers compiler, do not modify

import com.google.flatbuffers.BaseVector
import com.google.flatbuffers.BooleanVector
import com.google.flatbuffers.ByteVector
import com.google.flatbuffers.Constants
import com.google.flatbuffers.DoubleVector
import com.google.flatbuffers.FlatBufferBuilder
import com.google.flatbuffers.FloatVector
import com.google.flatbuffers.LongVector
import com.google.flatbuffers.StringVector
import com.google.flatbuffers.Struct
import com.google.flatbuffers.Table
import com.google.flatbuffers.UnionVector
import java.nio.ByteBuffer
import java.nio.ByteOrder
import kotlin.math.sign

/**
 * /// A request for various effects on a target.
 */
@Suppress("unused")
class EffectRequest_Full : Table() {

    fun __init(_i: Int, _bb: ByteBuffer)  {
        __reset(_i, _bb)
    }
    fun __assign(_i: Int, _bb: ByteBuffer) : EffectRequest_Full {
        __init(_i, _bb)
        return this
    }
    /**
     * Unique identifier of the record, auto-generated by the system.
     * Example: /// Example: EFFECTREQUEST-ID
     * Constraints: Minimum length = 1, Maximum length = 36
     */
    val id : String?
        get() {
            val o = __offset(4)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val idAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(4, 1)
    fun idInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 4, 1)
    /**
     * Classification marking of the data in IC/CAPCO Portion-marked format.
     * Example: /// Example: U
     * Constraints: Minimum length = 1, Maximum length = 128
     */
    val classificationMarking : String?
        get() {
            val o = __offset(6)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val classificationMarkingAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(6, 1)
    fun classificationMarkingInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 6, 1)
    /**
     * The extenal system identifier of this request. A human readable unique id.
     * Example: /// Example: EXTERNALREQUEST-ID
     * Constraints: Minimum length = 0, Maximum length = 36
     */
    val externalRequestId : String?
        get() {
            val o = __offset(8)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val externalRequestIdAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(8, 1)
    fun externalRequestIdInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 8, 1)
    /**
     * List of effects to be achieved on the target (e.g. COVER, DECEIVE, DEGRADE, DENY, DESTROY, DISRUPT, DIVERSION, DIVERT, FIX, INSPECT, INTERCEPT, ISOLATE, MANIPULATE, NEUTRALIZE, SHADOW, SUPPRESS, etc.).  The effects included in this list are connected by implied AND.
     * Example: /// Example: ['COVER', 'DECEIVE']
     * Constraints: No constraints specified.
     */
    fun effectList(j: Int) : String? {
        val o = __offset(10)
        return if (o != 0) {
            __string(__vector(o) + j * 4)
        } else {
            null
        }
    }
    val effectListLength : Int
        get() {
            val o = __offset(10); return if (o != 0) __vector_len(o) else 0
        }
    /**
     * State of this effect request (e.g. CREATED, UPDATED, DELETED, etc.).
     * Example: /// Example: CREATED
     * Constraints: Minimum length = 0, Maximum length = 24
     */
    val state : String?
        get() {
            val o = __offset(12)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val stateAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(12, 1)
    fun stateInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 12, 1)
    /**
     * Specific descriptive instantiation of the effect, e.g., playbook to be used.
     * Example: /// Example: Example Notes
     * Constraints: Minimum length = 0, Maximum length = 256
     */
    val context : String?
        get() {
            val o = __offset(14)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val contextAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(14, 1)
    fun contextInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 14, 1)
    /**
     * The time the effect should start, in ISO8601 UTC format.
     * Example: /// Example: 2018-01-01T16:00:00.123456Z
     * Constraints: No constraints specified.
     */
    val startTime : String?
        get() {
            val o = __offset(16)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val startTimeAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(16, 1)
    fun startTimeInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 16, 1)
    /**
     * The time the effect should end, in ISO8601 UTC format.
     * Example: /// Example: 2018-01-01T16:00:00.123456Z
     * Constraints: No constraints specified.
     */
    val endTime : String?
        get() {
            val o = __offset(18)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val endTimeAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(18, 1)
    fun endTimeInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 18, 1)
    /**
     * The indicator of deadline of the bid request (e.g. BETWEEN, IMMEDIATE, NOEARLIERTHAN, NOLATERTHAN, etc.):
     * BETWEEN:&nbsp;Produce effect any time between the given start and end times, equal penalty for being early or late
     * IMMEDIATE:&nbsp;Start as soon as possible, earlier is always better
     * NOEARLIERTHAN:&nbsp;Produce effect at this time or later. Large penalty for being earlier, no reward for being later
     * NOLATERTHAN:&nbsp;Produce effect no later than the given startTime. Large penalty for being later, no reward for being even earlier as long as the effect starts by the given time.
     * Example: /// Example: NoLaterThan
     * Constraints: Minimum length = 0, Maximum length = 24
     */
    val deadlineType : String?
        get() {
            val o = __offset(20)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val deadlineTypeAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(20, 1)
    fun deadlineTypeInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 20, 1)
    /**
     * The source type of the targetId identifier (POI, TRACK).
     * Example: /// Example: POI
     * Constraints: Minimum length = 0, Maximum length = 24
     */
    val targetSrcType : String?
        get() {
            val o = __offset(22)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val targetSrcTypeAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(22, 1)
    fun targetSrcTypeInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 22, 1)
    /**
     * The record ID, depending on the type identified in targetSrcType, of the requested target. This identifier corresponds to either poi.poiid or track.trkId from their respective schemas.
     * Example: /// Example: TARGETSRC-ID
     * Constraints: Minimum length = 0, Maximum length = 36
     */
    val targetSrcId : String?
        get() {
            val o = __offset(24)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val targetSrcIdAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(24, 1)
    fun targetSrcIdInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 24, 1)
    /**
     * The priority (LOW, MEDIUM, HIGH) of this request.
     * Example: /// Example: LOW
     * Constraints: Minimum length = 0, Maximum length = 24
     */
    val priority : String?
        get() {
            val o = __offset(26)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val priorityAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(26, 1)
    fun priorityInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 26, 1)
    /**
     * The type or class of the preference model used to evaluate this offer.
     * Example: /// Example: Preference model
     * Constraints: Minimum length = 0, Maximum length = 256
     */
    val modelClass : String?
        get() {
            val o = __offset(28)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val modelClassAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(28, 1)
    fun modelClassInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 28, 1)
    /**
     * Array of the the metric classes to be evaluated (e.g. Cost, GoalAchievement, OpportunityCost, Risk, Timeliness, Unavailable, etc.).  See the associated 'metricWeights' array for the weighting values, positionally corresponding to these types.  The 'metricTypes' and 'metricWeights' arrays must match in size.
     * Example: /// Example: ['COST', 'RISK']
     * Constraints: No constraints specified.
     */
    fun metricTypes(j: Int) : String? {
        val o = __offset(30)
        return if (o != 0) {
            __string(__vector(o) + j * 4)
        } else {
            null
        }
    }
    val metricTypesLength : Int
        get() {
            val o = __offset(30); return if (o != 0) __vector_len(o) else 0
        }
    /**
     * Array of the weights for the metric in the final evaluation score. Normalized (0 to 1).  See the associated 'metricTypes' array for the metric classes, positionally corresponding to these values.  The 'metricTypes' and 'metricWeights' arrays must match in size.
     * Example: /// Example: [0.5, 0.6]
     * Constraints: No constraints specified.
     */
    fun metricWeights(j: Int) : String? {
        val o = __offset(32)
        return if (o != 0) {
            __string(__vector(o) + j * 4)
        } else {
            null
        }
    }
    val metricWeightsLength : Int
        get() {
            val o = __offset(32); return if (o != 0) __vector_len(o) else 0
        }
    /**
     * Time the row was created in the database, auto-populated by the system.
     * Example: /// Example: 2018-01-01T16:00:00.123Z
     * Constraints: No constraints specified.
     */
    val createdAt : String?
        get() {
            val o = __offset(34)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val createdAtAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(34, 1)
    fun createdAtInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 34, 1)
    /**
     * Application user who created the row in the database, auto-populated by the system.
     * Example: /// Example: some.user
     * Constraints: Minimum length = 0, Maximum length = 64
     */
    val createdBy : String?
        get() {
            val o = __offset(36)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val createdByAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(36, 1)
    fun createdByInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 36, 1)
    /**
     * Source of the data.
     * Example: /// Example: Bluestaq
     * Constraints: Minimum length = 1, Maximum length = 64
     */
    val source : String?
        get() {
            val o = __offset(38)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val sourceAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(38, 1)
    fun sourceInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 38, 1)
    /**
     * Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
     * Example: /// Example: THIRD_PARTY_DATASOURCE
     * Constraints: Minimum length = 0, Maximum length = 64
     */
    val origin : String?
        get() {
            val o = __offset(40)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val originAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(40, 1)
    fun originInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 40, 1)
    /**
     * Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
     * EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
     * REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
     * SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
     * TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
     * Example: /// Example: TEST
     * Constraints: Minimum length = 1, Maximum length = 32
     */
    val dataMode : Byte
        get() {
            val o = __offset(42)
            return if(o != 0) bb.get(o + bb_pos) else 0
        }
    /**
     * The originating source network on which this record was created, auto-populated by the system.
     * Example: /// Example: ORIG
     * Constraints: Minimum length = 1, Maximum length = 32
     */
    val origNetwork : String?
        get() {
            val o = __offset(44)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val origNetworkAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(44, 1)
    fun origNetworkInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 44, 1)
    companion object {
        fun validateVersion() = Constants.FLATBUFFERS_24_3_25()
        fun getRootAsEffectRequest_Full(_bb: ByteBuffer): EffectRequest_Full = getRootAsEffectRequest_Full(_bb, EffectRequest_Full())
        fun getRootAsEffectRequest_Full(_bb: ByteBuffer, obj: EffectRequest_Full): EffectRequest_Full {
            _bb.order(ByteOrder.LITTLE_ENDIAN)
            return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb))
        }
        fun EffectRequest_FullBufferHasIdentifier(_bb: ByteBuffer) : Boolean = __has_identifier(_bb, "EFFE")
        fun createEffectRequest_Full(builder: FlatBufferBuilder, idOffset: Int, classificationMarkingOffset: Int, externalRequestIdOffset: Int, effectListOffset: Int, stateOffset: Int, contextOffset: Int, startTimeOffset: Int, endTimeOffset: Int, deadlineTypeOffset: Int, targetSrcTypeOffset: Int, targetSrcIdOffset: Int, priorityOffset: Int, modelClassOffset: Int, metricTypesOffset: Int, metricWeightsOffset: Int, createdAtOffset: Int, createdByOffset: Int, sourceOffset: Int, originOffset: Int, dataMode: Byte, origNetworkOffset: Int) : Int {
            builder.startTable(21)
            addOrigNetwork(builder, origNetworkOffset)
            addOrigin(builder, originOffset)
            addSource(builder, sourceOffset)
            addCreatedBy(builder, createdByOffset)
            addCreatedAt(builder, createdAtOffset)
            addMetricWeights(builder, metricWeightsOffset)
            addMetricTypes(builder, metricTypesOffset)
            addModelClass(builder, modelClassOffset)
            addPriority(builder, priorityOffset)
            addTargetSrcId(builder, targetSrcIdOffset)
            addTargetSrcType(builder, targetSrcTypeOffset)
            addDeadlineType(builder, deadlineTypeOffset)
            addEndTime(builder, endTimeOffset)
            addStartTime(builder, startTimeOffset)
            addContext(builder, contextOffset)
            addState(builder, stateOffset)
            addEffectList(builder, effectListOffset)
            addExternalRequestId(builder, externalRequestIdOffset)
            addClassificationMarking(builder, classificationMarkingOffset)
            addId(builder, idOffset)
            addDataMode(builder, dataMode)
            return endEffectRequest_Full(builder)
        }
        fun startEffectRequest_Full(builder: FlatBufferBuilder) = builder.startTable(21)
        fun addId(builder: FlatBufferBuilder, id: Int) = builder.addOffset(0, id, 0)
        fun addClassificationMarking(builder: FlatBufferBuilder, classificationMarking: Int) = builder.addOffset(1, classificationMarking, 0)
        fun addExternalRequestId(builder: FlatBufferBuilder, externalRequestId: Int) = builder.addOffset(2, externalRequestId, 0)
        fun addEffectList(builder: FlatBufferBuilder, effectList: Int) = builder.addOffset(3, effectList, 0)
        fun createEffectListVector(builder: FlatBufferBuilder, data: IntArray) : Int {
            builder.startVector(4, data.size, 4)
            for (i in data.size - 1 downTo 0) {
                builder.addOffset(data[i])
            }
            return builder.endVector()
        }
        fun startEffectListVector(builder: FlatBufferBuilder, numElems: Int) = builder.startVector(4, numElems, 4)
        fun addState(builder: FlatBufferBuilder, state: Int) = builder.addOffset(4, state, 0)
        fun addContext(builder: FlatBufferBuilder, context: Int) = builder.addOffset(5, context, 0)
        fun addStartTime(builder: FlatBufferBuilder, startTime: Int) = builder.addOffset(6, startTime, 0)
        fun addEndTime(builder: FlatBufferBuilder, endTime: Int) = builder.addOffset(7, endTime, 0)
        fun addDeadlineType(builder: FlatBufferBuilder, deadlineType: Int) = builder.addOffset(8, deadlineType, 0)
        fun addTargetSrcType(builder: FlatBufferBuilder, targetSrcType: Int) = builder.addOffset(9, targetSrcType, 0)
        fun addTargetSrcId(builder: FlatBufferBuilder, targetSrcId: Int) = builder.addOffset(10, targetSrcId, 0)
        fun addPriority(builder: FlatBufferBuilder, priority: Int) = builder.addOffset(11, priority, 0)
        fun addModelClass(builder: FlatBufferBuilder, modelClass: Int) = builder.addOffset(12, modelClass, 0)
        fun addMetricTypes(builder: FlatBufferBuilder, metricTypes: Int) = builder.addOffset(13, metricTypes, 0)
        fun createMetricTypesVector(builder: FlatBufferBuilder, data: IntArray) : Int {
            builder.startVector(4, data.size, 4)
            for (i in data.size - 1 downTo 0) {
                builder.addOffset(data[i])
            }
            return builder.endVector()
        }
        fun startMetricTypesVector(builder: FlatBufferBuilder, numElems: Int) = builder.startVector(4, numElems, 4)
        fun addMetricWeights(builder: FlatBufferBuilder, metricWeights: Int) = builder.addOffset(14, metricWeights, 0)
        fun createMetricWeightsVector(builder: FlatBufferBuilder, data: IntArray) : Int {
            builder.startVector(4, data.size, 4)
            for (i in data.size - 1 downTo 0) {
                builder.addOffset(data[i])
            }
            return builder.endVector()
        }
        fun startMetricWeightsVector(builder: FlatBufferBuilder, numElems: Int) = builder.startVector(4, numElems, 4)
        fun addCreatedAt(builder: FlatBufferBuilder, createdAt: Int) = builder.addOffset(15, createdAt, 0)
        fun addCreatedBy(builder: FlatBufferBuilder, createdBy: Int) = builder.addOffset(16, createdBy, 0)
        fun addSource(builder: FlatBufferBuilder, source: Int) = builder.addOffset(17, source, 0)
        fun addOrigin(builder: FlatBufferBuilder, origin: Int) = builder.addOffset(18, origin, 0)
        fun addDataMode(builder: FlatBufferBuilder, dataMode: Byte) = builder.addByte(19, dataMode, 0)
        fun addOrigNetwork(builder: FlatBufferBuilder, origNetwork: Int) = builder.addOffset(20, origNetwork, 0)
        fun endEffectRequest_Full(builder: FlatBufferBuilder) : Int {
            val o = builder.endTable()
            return o
        }
        fun finishEffectRequestFullBuffer(builder: FlatBufferBuilder, offset: Int) = builder.finish(offset, "EFFE")
        fun finishSizePrefixedEffectRequest_FullBuffer(builder: FlatBufferBuilder, offset: Int) = builder.finishSizePrefixed(offset, "EFFE")
    }
}
