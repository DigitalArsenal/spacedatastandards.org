// automatically generated by the FlatBuffers compiler, do not modify

import com.google.flatbuffers.BaseVector
import com.google.flatbuffers.BooleanVector
import com.google.flatbuffers.ByteVector
import com.google.flatbuffers.Constants
import com.google.flatbuffers.DoubleVector
import com.google.flatbuffers.FlatBufferBuilder
import com.google.flatbuffers.FloatVector
import com.google.flatbuffers.LongVector
import com.google.flatbuffers.StringVector
import com.google.flatbuffers.Struct
import com.google.flatbuffers.Table
import com.google.flatbuffers.UnionVector
import java.nio.ByteBuffer
import java.nio.ByteOrder
import kotlin.math.sign

/**
 * /// No description available.
 */
@Suppress("unused")
class Item_Full : Table() {

    fun __init(_i: Int, _bb: ByteBuffer)  {
        __reset(_i, _bb)
    }
    fun __assign(_i: Int, _bb: ByteBuffer) : Item_Full {
        __init(_i, _bb)
        return this
    }
    /**
     * Unique identifier of the record, auto-generated by the system if not provided on create operations.
     * Example: /// Example: 22f1f6da-a568-655a-ea37-76d013d04853
     * Constraints: Minimum length = 1, Maximum length = 36
     */
    val id : String?
        get() {
            val o = __offset(4)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val idAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(4, 1)
    fun idInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 4, 1)
    /**
     * Classification marking of the data in IC/CAPCO Portion-marked format.
     * Example: /// Example: U
     * Constraints: Minimum length = 1, Maximum length = 128
     */
    val classificationMarking : String?
        get() {
            val o = __offset(6)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val classificationMarkingAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(6, 1)
    fun classificationMarkingInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 6, 1)
    /**
     * The UDL ID of the air load plan this item is associated with.
     * Example: /// Example: 1038c389-d38e-270f-51cc-6a12e905abe8
     * Constraints: Minimum length = 0, Maximum length = 36
     */
    val idAirLoadPlan : String?
        get() {
            val o = __offset(8)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val idAirLoadPlanAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(8, 1)
    fun idAirLoadPlanInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 8, 1)
    /**
     * The tracking identifier of an item or person. May be similar in representation of a barcode or UPC. If no scanCode or tracking number equivalent is available, 'NONE' should be used.
     * Example: /// Example: 12345ABCD
     * Constraints: Minimum length = 1, Maximum length = 36
     */
    val scanCode : String?
        get() {
            val o = __offset(10)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val scanCodeAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(10, 1)
    fun scanCodeInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 10, 1)
    /**
     * The algorithm name or standard that generated the scanCode (e.g. UPC-A, EAN-13, GTIN, SSCC, bID, JAN, etc.).
     * Example: /// Example: bID
     * Constraints: Minimum length = 0, Maximum length = 36
     */
    val scGenTool : String?
        get() {
            val o = __offset(12)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val scGenToolAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(12, 1)
    fun scGenToolInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 12, 1)
    /**
     * The item type of this record (e.g. EQUIPMENT, CARGO, PASSENGER).
     * Example: /// Example: CARGO
     * Constraints: Minimum length = 1, Maximum length = 32
     */
    val type : String?
        get() {
            val o = __offset(14)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val typeAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(14, 1)
    fun typeInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 14, 1)
    /**
     * The type of cargo (e.g. PALLET, ROLLING STOCK, LOOSE, OTHER). Applicable for cargo item types only.
     * Example: /// Example: PALLET
     * Constraints: Minimum length = 0, Maximum length = 32
     */
    val cargoType : String?
        get() {
            val o = __offset(16)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val cargoTypeAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(16, 1)
    fun cargoTypeInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 16, 1)
    /**
     * Name of the item. Applicable for equipment and cargo item types only.
     * Example: /// Example: Product Name
     * Constraints: Minimum length = 0, Maximum length = 100
     */
    val name : String?
        get() {
            val o = __offset(18)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val nameAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(18, 1)
    fun nameInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 18, 1)
    /**
     * The destination of the item, typically an ICAO or port code. Applicable for cargo and passenger item types only.
     * Example: /// Example: RMS
     * Constraints: Minimum length = 0, Maximum length = 36
     */
    val destination : String?
        get() {
            val o = __offset(20)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val destinationAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(20, 1)
    fun destinationInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 20, 1)
    /**
     * The departure code or location where this item has left or is leaving.
     * Example: /// Example: CHS
     * Constraints: Minimum length = 0, Maximum length = 36
     */
    val departure : String?
        get() {
            val o = __offset(22)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val departureAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(22, 1)
    fun departureInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 22, 1)
    /**
     * The name of the unit receiving this item.
     * Example: /// Example: 50 SBN
     * Constraints: Minimum length = 0, Maximum length = 100
     */
    val receivingUnit : String?
        get() {
            val o = __offset(24)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val receivingUnitAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(24, 1)
    fun receivingUnitInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 24, 1)
    /**
     * The military branch receiving this item.
     * Example: /// Example: Air Force
     * Constraints: Minimum length = 0, Maximum length = 32
     */
    val receivingBranch : String?
        get() {
            val o = __offset(26)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val receivingBranchAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(26, 1)
    fun receivingBranchInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 26, 1)
    /**
     * The latest acceptable arrival date of the item at the destination, in ISO 8601 date-only format (e.g. YYYY-MM-DD).
     * Example: /// Example: 2023-03-13
     * Constraints: No constraints specified.
     */
    val lastArrDate : String?
        get() {
            val o = __offset(28)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val lastArrDateAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(28, 1)
    fun lastArrDateInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 28, 1)
    /**
     * The unit line number of this item.
     * Example: /// Example: T01ME01
     * Constraints: Minimum length = 0, Maximum length = 16
     */
    val uln : String?
        get() {
            val o = __offset(30)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val ulnAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(30, 1)
    fun ulnInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 30, 1)
    /**
     * Weight of the item in kilograms (if item is a passenger, include on-person bags).
     * Example: /// Example: 5443.335
     * Constraints: No constraints specified.
     */
    val weight : Double
        get() {
            val o = __offset(32)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Timestamp when the weight was taken, in ISO 8601 UTC format with millisecond precision.
     * Example: /// Example: 2023-03-13T16:06:00.123Z
     * Constraints: No constraints specified.
     */
    val weightTs : String?
        get() {
            val o = __offset(34)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val weightTsAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(34, 1)
    fun weightTsInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 34, 1)
    /**
     * The classification code of the commodity or group of commodities.
     * Example: /// Example: 2304116
     * Constraints: Minimum length = 0, Maximum length = 50
     */
    val commodityCode : String?
        get() {
            val o = __offset(36)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val commodityCodeAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(36, 1)
    fun commodityCodeInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 36, 1)
    /**
     * The classification system denoting the commodity code, commodityCode (e.g. AIR, WATER, NMFC, UFC, STCC, DODUNQ, etc.).
     * Example: /// Example: STCC
     * Constraints: Minimum length = 0, Maximum length = 36
     */
    val commoditySys : String?
        get() {
            val o = __offset(38)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val commoditySysAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(38, 1)
    fun commoditySysInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 38, 1)
    /**
     * The code denoting the type of material item.
     * Example: /// Example: 530500234
     * Constraints: Minimum length = 0, Maximum length = 36
     */
    val productCode : String?
        get() {
            val o = __offset(40)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val productCodeAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(40, 1)
    fun productCodeInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 40, 1)
    /**
     * The assigning system that denotes the type of material item, productCode (e.g. NSN-national stock number, NDC-national drug code, MPN-manufacturer part number, etc.).
     * Example: /// Example: NSN
     * Constraints: Minimum length = 0, Maximum length = 32
     */
    val productSys : String?
        get() {
            val o = __offset(42)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val productSysAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(42, 1)
    fun productSysInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 42, 1)
    /**
     * Width of the cargo in meters. Applicable for cargo item types only.
     * Example: /// Example: 1.1
     * Constraints: No constraints specified.
     */
    val width : Double
        get() {
            val o = __offset(44)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Length of the cargo in meters. Applicable for cargo item types only.
     * Example: /// Example: 1.1
     * Constraints: No constraints specified.
     */
    val length : Double
        get() {
            val o = __offset(46)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Height of the cargo in meters. Applicable for cargo item types only.
     * Example: /// Example: 1.1
     * Constraints: No constraints specified.
     */
    val height : Double
        get() {
            val o = __offset(48)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * The volume of the item, in cubic meters. Applicable for cargo item types only.
     * Example: /// Example: 7.8902
     * Constraints: No constraints specified.
     */
    val volume : Double
        get() {
            val o = __offset(50)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Center of gravity position of the item, measured from the item's front datum, in centimeters.
     * Example: /// Example: 112.014
     * Constraints: No constraints specified.
     */
    val cg : Double
        get() {
            val o = __offset(52)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * The fuselage station of the item measured from the reference datum, in centimeters. Applicable for cargo and passenger item types only.
     * Example: /// Example: 412.1
     * Constraints: No constraints specified.
     */
    val fs : Double
        get() {
            val o = __offset(54)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * How far left or right of centerline is the item in meters. Applicable for cargo and passenger item types only.
     * Example: /// Example: 3.1
     * Constraints: No constraints specified.
     */
    val centerlineOffset : Double
        get() {
            val o = __offset(56)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Moment of the item in Newton-meters. Applicable for equipment and cargo item types only.
     * Example: /// Example: 4000.1
     * Constraints: No constraints specified.
     */
    val moment : Double
        get() {
            val o = __offset(58)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Flag indicating this item is planned to be airdropped. Applicable for cargo and passenger item types only.
     * Example: /// Example: True
     * Constraints: No constraints specified.
     */
    val airdrop : Boolean
        get() {
            val o = __offset(60)
            return if(o != 0) 0.toByte() != bb.get(o + bb_pos) else false
        }
    /**
     * Transportation Control Number of the cargo. Applicable for cargo item types only.
     * Example: /// Example: M1358232245912XXX
     * Constraints: Minimum length = 0, Maximum length = 17
     */
    val tcn : String?
        get() {
            val o = __offset(62)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val tcnAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(62, 1)
    fun tcnInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 62, 1)
    /**
     * Array of UN hazard classes or division codes that apply to this item.
     * Example: /// Example: [1.1, 1.2]
     * Constraints: No constraints specified.
     */
    fun hazCodes(j: Int) : String? {
        val o = __offset(64)
        return if (o != 0) {
            __string(__vector(o) + j * 4)
        } else {
            null
        }
    }
    val hazCodesLength : Int
        get() {
            val o = __offset(64); return if (o != 0) __vector_len(o) else 0
        }
    /**
     * Net explosive weight of the item, in kilograms.
     * Example: /// Example: 51.437
     * Constraints: No constraints specified.
     */
    val netExpWt : Double
        get() {
            val o = __offset(66)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Flag indicating this item acts as a container and contains additional items.
     * Example: /// Example: True
     * Constraints: No constraints specified.
     */
    val container : Boolean
        get() {
            val o = __offset(68)
            return if(o != 0) 0.toByte() != bb.get(o + bb_pos) else false
        }
    /**
     * Array of tracking identifiers that are contained within this item.
     * Example: /// Example: ['2UJ8843K', '745YV1T65']
     * Constraints: No constraints specified.
     */
    fun itemContains(j: Int) : String? {
        val o = __offset(70)
        return if (o != 0) {
            __string(__vector(o) + j * 4)
        } else {
            null
        }
    }
    val itemContainsLength : Int
        get() {
            val o = __offset(70); return if (o != 0) __vector_len(o) else 0
        }
    /**
     * Number of pallet positions or equivalent on the aircraft, ship, or conveyance equipment that this item occupies.
     * Example: /// Example: 2
     * Constraints: No constraints specified.
     */
    val numPalletPos : Int
        get() {
            val o = __offset(72)
            return if(o != 0) bb.getInt(o + bb_pos) else 0
        }
    /**
     * United States Distinguished Visitor Code, only applicable to people.
     * Example: /// Example: DV-2
     * Constraints: Minimum length = 0, Maximum length = 16
     */
    val dvCode : String?
        get() {
            val o = __offset(74)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val dvCodeAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(74, 1)
    fun dvCodeInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 74, 1)
    /**
     * Optional notes or comments about this item.
     * Example: /// Example: Example notes
     * Constraints: Minimum length = 0, Maximum length = 1024
     */
    val notes : String?
        get() {
            val o = __offset(76)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val notesAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(76, 1)
    fun notesInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 76, 1)
    /**
     * Array of keys that may be associated to this item. The entries in this array must correspond to the position index in the values array. This array must be the same length as values..
     * Example: /// Example: ['key1', 'key2']
     * Constraints: No constraints specified.
     */
    fun keys(j: Int) : String? {
        val o = __offset(78)
        return if (o != 0) {
            __string(__vector(o) + j * 4)
        } else {
            null
        }
    }
    val keysLength : Int
        get() {
            val o = __offset(78); return if (o != 0) __vector_len(o) else 0
        }
    /**
     * Array of values for the keys that may be associated to this tracked item. The entries in this array must correspond to the position index in the keys array. This array must be the same length as keys.
     * Example: /// Example: ['value1', 'value2']
     * Constraints: No constraints specified.
     */
    fun values(j: Int) : String? {
        val o = __offset(80)
        return if (o != 0) {
            __string(__vector(o) + j * 4)
        } else {
            null
        }
    }
    val valuesLength : Int
        get() {
            val o = __offset(80); return if (o != 0) __vector_len(o) else 0
        }
    /**
     * Name of the additional data format so downstream consuming applications can know how to parse it. Typically includes the source system name and the format name.
     * Example: /// Example: Alt Data Format
     * Constraints: Minimum length = 0, Maximum length = 100
     */
    val altDataFormat : String?
        get() {
            val o = __offset(82)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val altDataFormatAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(82, 1)
    fun altDataFormatInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 82, 1)
    /**
     * Name of the system that accepted this item from a customer. Where a user or application could go look for additional information.
     * Example: /// Example: Accepting System
     * Constraints: Minimum length = 0, Maximum length = 100
     */
    val accSystem : String?
        get() {
            val o = __offset(84)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val accSystemAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(84, 1)
    fun accSystemInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 84, 1)
    /**
     * Additional data required to find this item in the accepting system.
     * Example: /// Example: Accepting System Notes
     * Constraints: Minimum length = 0, Maximum length = 1024
     */
    val accSysNotes : String?
        get() {
            val o = __offset(86)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val accSysNotesAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(86, 1)
    fun accSysNotesInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 86, 1)
    /**
     * Array of keys that may be associated to the accepting system data. The entries in this array must correspond to the position index in accSysValues array. This array must be the same length as accSysValues.
     * Example: /// Example: ['System key1', 'System key2']
     * Constraints: No constraints specified.
     */
    fun accSysKeys(j: Int) : String? {
        val o = __offset(88)
        return if (o != 0) {
            __string(__vector(o) + j * 4)
        } else {
            null
        }
    }
    val accSysKeysLength : Int
        get() {
            val o = __offset(88); return if (o != 0) __vector_len(o) else 0
        }
    /**
     * Array of values for the keys that may be associated to the accepting system data. The entries in this array must correspond to the position index in accSysKeys array. This array must be the same length as accSysKeys.
     * Example: /// Example: ['System value1', 'System value2']
     * Constraints: No constraints specified.
     */
    fun accSysValues(j: Int) : String? {
        val o = __offset(90)
        return if (o != 0) {
            __string(__vector(o) + j * 4)
        } else {
            null
        }
    }
    val accSysValuesLength : Int
        get() {
            val o = __offset(90); return if (o != 0) __vector_len(o) else 0
        }
    /**
     * Time the row was created in the database, auto-populated by the system.
     * Example: /// Example: 2023-03-21T16:00:00.123Z
     * Constraints: No constraints specified.
     */
    val createdAt : String?
        get() {
            val o = __offset(92)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val createdAtAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(92, 1)
    fun createdAtInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 92, 1)
    /**
     * Application user who created the row in the database, auto-populated by the system.
     * Example: /// Example: some.user
     * Constraints: Minimum length = 1, Maximum length = 64
     */
    val createdBy : String?
        get() {
            val o = __offset(94)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val createdByAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(94, 1)
    fun createdByInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 94, 1)
    /**
     * Time the row was last updated in the database, auto-populated by the system.
     * Example: /// Example: 2022-01-01T16:00:00.123Z
     * Constraints: No constraints specified.
     */
    val updatedAt : String?
        get() {
            val o = __offset(96)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val updatedAtAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(96, 1)
    fun updatedAtInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 96, 1)
    /**
     * Application user who updated the row in the database, auto-populated by the system.
     * Example: /// Example: some.user
     * Constraints: Minimum length = 0, Maximum length = 64
     */
    val updatedBy : String?
        get() {
            val o = __offset(98)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val updatedByAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(98, 1)
    fun updatedByInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 98, 1)
    /**
     * The source data library from which this record was received. This could be a remote or tactical UDL or another data library. If null, the record should be assumed to have originated from the primary Enterprise UDL.
     * Example: /// Example: AXE
     * Constraints: Minimum length = 0, Maximum length = 64
     */
    val sourceDl : String?
        get() {
            val o = __offset(100)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val sourceDlAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(100, 1)
    fun sourceDlInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 100, 1)
    /**
     * Source of the data.
     * Example: /// Example: Bluestaq
     * Constraints: Minimum length = 1, Maximum length = 36
     */
    val source : String?
        get() {
            val o = __offset(102)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val sourceAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(102, 1)
    fun sourceInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 102, 1)
    /**
     * Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
     * Example: /// Example: THIRD_PARTY_DATASOURCE
     * Constraints: Minimum length = 0, Maximum length = 64
     */
    val origin : String?
        get() {
            val o = __offset(104)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val originAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(104, 1)
    fun originInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 104, 1)
    /**
     * The originating source network on which this record was created, auto-populated by the system.
     * Example: /// Example: OPS1
     * Constraints: Minimum length = 1, Maximum length = 32
     */
    val origNetwork : String?
        get() {
            val o = __offset(106)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val origNetworkAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(106, 1)
    fun origNetworkInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 106, 1)
    /**
     * Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
     * EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
     * REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
     * SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
     * TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
     * Example: /// Example: TEST
     * Constraints: Minimum length = 1, Maximum length = 32
     */
    val dataMode : Byte
        get() {
            val o = __offset(108)
            return if(o != 0) bb.get(o + bb_pos) else 0
        }
    companion object {
        fun validateVersion() = Constants.FLATBUFFERS_24_3_25()
        fun getRootAsItem_Full(_bb: ByteBuffer): Item_Full = getRootAsItem_Full(_bb, Item_Full())
        fun getRootAsItem_Full(_bb: ByteBuffer, obj: Item_Full): Item_Full {
            _bb.order(ByteOrder.LITTLE_ENDIAN)
            return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb))
        }
        fun Item_FullBufferHasIdentifier(_bb: ByteBuffer) : Boolean = __has_identifier(_bb, "ITEM")
        fun createItem_Full(builder: FlatBufferBuilder, idOffset: Int, classificationMarkingOffset: Int, idAirLoadPlanOffset: Int, scanCodeOffset: Int, scGenToolOffset: Int, typeOffset: Int, cargoTypeOffset: Int, nameOffset: Int, destinationOffset: Int, departureOffset: Int, receivingUnitOffset: Int, receivingBranchOffset: Int, lastArrDateOffset: Int, ulnOffset: Int, weight: Double, weightTsOffset: Int, commodityCodeOffset: Int, commoditySysOffset: Int, productCodeOffset: Int, productSysOffset: Int, width: Double, length: Double, height: Double, volume: Double, cg: Double, fs: Double, centerlineOffset: Double, moment: Double, airdrop: Boolean, tcnOffset: Int, hazCodesOffset: Int, netExpWt: Double, container: Boolean, itemContainsOffset: Int, numPalletPos: Int, dvCodeOffset: Int, notesOffset: Int, keysOffset: Int, valuesOffset: Int, altDataFormatOffset: Int, accSystemOffset: Int, accSysNotesOffset: Int, accSysKeysOffset: Int, accSysValuesOffset: Int, createdAtOffset: Int, createdByOffset: Int, updatedAtOffset: Int, updatedByOffset: Int, sourceDlOffset: Int, sourceOffset: Int, originOffset: Int, origNetworkOffset: Int, dataMode: Byte) : Int {
            builder.startTable(53)
            addNetExpWt(builder, netExpWt)
            addMoment(builder, moment)
            addCenterlineOffset(builder, centerlineOffset)
            addFs(builder, fs)
            addCg(builder, cg)
            addVolume(builder, volume)
            addHeight(builder, height)
            addLength(builder, length)
            addWidth(builder, width)
            addWeight(builder, weight)
            addOrigNetwork(builder, origNetworkOffset)
            addOrigin(builder, originOffset)
            addSource(builder, sourceOffset)
            addSourceDL(builder, sourceDlOffset)
            addUpdatedBy(builder, updatedByOffset)
            addUpdatedAt(builder, updatedAtOffset)
            addCreatedBy(builder, createdByOffset)
            addCreatedAt(builder, createdAtOffset)
            addAccSysValues(builder, accSysValuesOffset)
            addAccSysKeys(builder, accSysKeysOffset)
            addAccSysNotes(builder, accSysNotesOffset)
            addAccSystem(builder, accSystemOffset)
            addAltDataFormat(builder, altDataFormatOffset)
            addValues(builder, valuesOffset)
            addKeys(builder, keysOffset)
            addNotes(builder, notesOffset)
            addDvCode(builder, dvCodeOffset)
            addNumPalletPos(builder, numPalletPos)
            addItemContains(builder, itemContainsOffset)
            addHazCodes(builder, hazCodesOffset)
            addTcn(builder, tcnOffset)
            addProductSys(builder, productSysOffset)
            addProductCode(builder, productCodeOffset)
            addCommoditySys(builder, commoditySysOffset)
            addCommodityCode(builder, commodityCodeOffset)
            addWeightTS(builder, weightTsOffset)
            addUln(builder, ulnOffset)
            addLastArrDate(builder, lastArrDateOffset)
            addReceivingBranch(builder, receivingBranchOffset)
            addReceivingUnit(builder, receivingUnitOffset)
            addDeparture(builder, departureOffset)
            addDestination(builder, destinationOffset)
            addName(builder, nameOffset)
            addCargoType(builder, cargoTypeOffset)
            addType(builder, typeOffset)
            addScGenTool(builder, scGenToolOffset)
            addScanCode(builder, scanCodeOffset)
            addIdAirLoadPlan(builder, idAirLoadPlanOffset)
            addClassificationMarking(builder, classificationMarkingOffset)
            addId(builder, idOffset)
            addDataMode(builder, dataMode)
            addContainer(builder, container)
            addAirdrop(builder, airdrop)
            return endItem_Full(builder)
        }
        fun startItem_Full(builder: FlatBufferBuilder) = builder.startTable(53)
        fun addId(builder: FlatBufferBuilder, id: Int) = builder.addOffset(0, id, 0)
        fun addClassificationMarking(builder: FlatBufferBuilder, classificationMarking: Int) = builder.addOffset(1, classificationMarking, 0)
        fun addIdAirLoadPlan(builder: FlatBufferBuilder, idAirLoadPlan: Int) = builder.addOffset(2, idAirLoadPlan, 0)
        fun addScanCode(builder: FlatBufferBuilder, scanCode: Int) = builder.addOffset(3, scanCode, 0)
        fun addScGenTool(builder: FlatBufferBuilder, scGenTool: Int) = builder.addOffset(4, scGenTool, 0)
        fun addType(builder: FlatBufferBuilder, type: Int) = builder.addOffset(5, type, 0)
        fun addCargoType(builder: FlatBufferBuilder, cargoType: Int) = builder.addOffset(6, cargoType, 0)
        fun addName(builder: FlatBufferBuilder, name: Int) = builder.addOffset(7, name, 0)
        fun addDestination(builder: FlatBufferBuilder, destination: Int) = builder.addOffset(8, destination, 0)
        fun addDeparture(builder: FlatBufferBuilder, departure: Int) = builder.addOffset(9, departure, 0)
        fun addReceivingUnit(builder: FlatBufferBuilder, receivingUnit: Int) = builder.addOffset(10, receivingUnit, 0)
        fun addReceivingBranch(builder: FlatBufferBuilder, receivingBranch: Int) = builder.addOffset(11, receivingBranch, 0)
        fun addLastArrDate(builder: FlatBufferBuilder, lastArrDate: Int) = builder.addOffset(12, lastArrDate, 0)
        fun addUln(builder: FlatBufferBuilder, uln: Int) = builder.addOffset(13, uln, 0)
        fun addWeight(builder: FlatBufferBuilder, weight: Double) = builder.addDouble(14, weight, 0.0)
        fun addWeightTS(builder: FlatBufferBuilder, weightTs: Int) = builder.addOffset(15, weightTs, 0)
        fun addCommodityCode(builder: FlatBufferBuilder, commodityCode: Int) = builder.addOffset(16, commodityCode, 0)
        fun addCommoditySys(builder: FlatBufferBuilder, commoditySys: Int) = builder.addOffset(17, commoditySys, 0)
        fun addProductCode(builder: FlatBufferBuilder, productCode: Int) = builder.addOffset(18, productCode, 0)
        fun addProductSys(builder: FlatBufferBuilder, productSys: Int) = builder.addOffset(19, productSys, 0)
        fun addWidth(builder: FlatBufferBuilder, width: Double) = builder.addDouble(20, width, 0.0)
        fun addLength(builder: FlatBufferBuilder, length: Double) = builder.addDouble(21, length, 0.0)
        fun addHeight(builder: FlatBufferBuilder, height: Double) = builder.addDouble(22, height, 0.0)
        fun addVolume(builder: FlatBufferBuilder, volume: Double) = builder.addDouble(23, volume, 0.0)
        fun addCg(builder: FlatBufferBuilder, cg: Double) = builder.addDouble(24, cg, 0.0)
        fun addFs(builder: FlatBufferBuilder, fs: Double) = builder.addDouble(25, fs, 0.0)
        fun addCenterlineOffset(builder: FlatBufferBuilder, centerlineOffset: Double) = builder.addDouble(26, centerlineOffset, 0.0)
        fun addMoment(builder: FlatBufferBuilder, moment: Double) = builder.addDouble(27, moment, 0.0)
        fun addAirdrop(builder: FlatBufferBuilder, airdrop: Boolean) = builder.addBoolean(28, airdrop, false)
        fun addTcn(builder: FlatBufferBuilder, tcn: Int) = builder.addOffset(29, tcn, 0)
        fun addHazCodes(builder: FlatBufferBuilder, hazCodes: Int) = builder.addOffset(30, hazCodes, 0)
        fun createHazCodesVector(builder: FlatBufferBuilder, data: IntArray) : Int {
            builder.startVector(4, data.size, 4)
            for (i in data.size - 1 downTo 0) {
                builder.addOffset(data[i])
            }
            return builder.endVector()
        }
        fun startHazCodesVector(builder: FlatBufferBuilder, numElems: Int) = builder.startVector(4, numElems, 4)
        fun addNetExpWt(builder: FlatBufferBuilder, netExpWt: Double) = builder.addDouble(31, netExpWt, 0.0)
        fun addContainer(builder: FlatBufferBuilder, container: Boolean) = builder.addBoolean(32, container, false)
        fun addItemContains(builder: FlatBufferBuilder, itemContains: Int) = builder.addOffset(33, itemContains, 0)
        fun createItemContainsVector(builder: FlatBufferBuilder, data: IntArray) : Int {
            builder.startVector(4, data.size, 4)
            for (i in data.size - 1 downTo 0) {
                builder.addOffset(data[i])
            }
            return builder.endVector()
        }
        fun startItemContainsVector(builder: FlatBufferBuilder, numElems: Int) = builder.startVector(4, numElems, 4)
        fun addNumPalletPos(builder: FlatBufferBuilder, numPalletPos: Int) = builder.addInt(34, numPalletPos, 0)
        fun addDvCode(builder: FlatBufferBuilder, dvCode: Int) = builder.addOffset(35, dvCode, 0)
        fun addNotes(builder: FlatBufferBuilder, notes: Int) = builder.addOffset(36, notes, 0)
        fun addKeys(builder: FlatBufferBuilder, keys: Int) = builder.addOffset(37, keys, 0)
        fun createKeysVector(builder: FlatBufferBuilder, data: IntArray) : Int {
            builder.startVector(4, data.size, 4)
            for (i in data.size - 1 downTo 0) {
                builder.addOffset(data[i])
            }
            return builder.endVector()
        }
        fun startKeysVector(builder: FlatBufferBuilder, numElems: Int) = builder.startVector(4, numElems, 4)
        fun addValues(builder: FlatBufferBuilder, values: Int) = builder.addOffset(38, values, 0)
        fun createValuesVector(builder: FlatBufferBuilder, data: IntArray) : Int {
            builder.startVector(4, data.size, 4)
            for (i in data.size - 1 downTo 0) {
                builder.addOffset(data[i])
            }
            return builder.endVector()
        }
        fun startValuesVector(builder: FlatBufferBuilder, numElems: Int) = builder.startVector(4, numElems, 4)
        fun addAltDataFormat(builder: FlatBufferBuilder, altDataFormat: Int) = builder.addOffset(39, altDataFormat, 0)
        fun addAccSystem(builder: FlatBufferBuilder, accSystem: Int) = builder.addOffset(40, accSystem, 0)
        fun addAccSysNotes(builder: FlatBufferBuilder, accSysNotes: Int) = builder.addOffset(41, accSysNotes, 0)
        fun addAccSysKeys(builder: FlatBufferBuilder, accSysKeys: Int) = builder.addOffset(42, accSysKeys, 0)
        fun createAccSysKeysVector(builder: FlatBufferBuilder, data: IntArray) : Int {
            builder.startVector(4, data.size, 4)
            for (i in data.size - 1 downTo 0) {
                builder.addOffset(data[i])
            }
            return builder.endVector()
        }
        fun startAccSysKeysVector(builder: FlatBufferBuilder, numElems: Int) = builder.startVector(4, numElems, 4)
        fun addAccSysValues(builder: FlatBufferBuilder, accSysValues: Int) = builder.addOffset(43, accSysValues, 0)
        fun createAccSysValuesVector(builder: FlatBufferBuilder, data: IntArray) : Int {
            builder.startVector(4, data.size, 4)
            for (i in data.size - 1 downTo 0) {
                builder.addOffset(data[i])
            }
            return builder.endVector()
        }
        fun startAccSysValuesVector(builder: FlatBufferBuilder, numElems: Int) = builder.startVector(4, numElems, 4)
        fun addCreatedAt(builder: FlatBufferBuilder, createdAt: Int) = builder.addOffset(44, createdAt, 0)
        fun addCreatedBy(builder: FlatBufferBuilder, createdBy: Int) = builder.addOffset(45, createdBy, 0)
        fun addUpdatedAt(builder: FlatBufferBuilder, updatedAt: Int) = builder.addOffset(46, updatedAt, 0)
        fun addUpdatedBy(builder: FlatBufferBuilder, updatedBy: Int) = builder.addOffset(47, updatedBy, 0)
        fun addSourceDL(builder: FlatBufferBuilder, sourceDl: Int) = builder.addOffset(48, sourceDl, 0)
        fun addSource(builder: FlatBufferBuilder, source: Int) = builder.addOffset(49, source, 0)
        fun addOrigin(builder: FlatBufferBuilder, origin: Int) = builder.addOffset(50, origin, 0)
        fun addOrigNetwork(builder: FlatBufferBuilder, origNetwork: Int) = builder.addOffset(51, origNetwork, 0)
        fun addDataMode(builder: FlatBufferBuilder, dataMode: Byte) = builder.addByte(52, dataMode, 0)
        fun endItem_Full(builder: FlatBufferBuilder) : Int {
            val o = builder.endTable()
            return o
        }
        fun finishItemFullBuffer(builder: FlatBufferBuilder, offset: Int) = builder.finish(offset, "ITEM")
        fun finishSizePrefixedItem_FullBuffer(builder: FlatBufferBuilder, offset: Int) = builder.finishSizePrefixed(offset, "ITEM")
    }
}
