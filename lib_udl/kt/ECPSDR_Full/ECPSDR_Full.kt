// automatically generated by the FlatBuffers compiler, do not modify

import com.google.flatbuffers.BaseVector
import com.google.flatbuffers.BooleanVector
import com.google.flatbuffers.ByteVector
import com.google.flatbuffers.Constants
import com.google.flatbuffers.DoubleVector
import com.google.flatbuffers.FlatBufferBuilder
import com.google.flatbuffers.FloatVector
import com.google.flatbuffers.LongVector
import com.google.flatbuffers.StringVector
import com.google.flatbuffers.Struct
import com.google.flatbuffers.Table
import com.google.flatbuffers.UnionVector
import java.nio.ByteBuffer
import java.nio.ByteOrder
import kotlin.math.sign

/**
 * /// Supports Sensor Data Records (SDR) from space-borne Energetic Charged Particle (ECP) Sensors.  SDR contains sensor status telemetry and raw dosimeter measurements of the space environment.
 */
@Suppress("unused")
class ECPSDR_Full : Table() {

    fun __init(_i: Int, _bb: ByteBuffer)  {
        __reset(_i, _bb)
    }
    fun __assign(_i: Int, _bb: ByteBuffer) : ECPSDR_Full {
        __init(_i, _bb)
        return this
    }
    /**
     * Unique identifier of the record, auto-generated by the system.
     * Example: /// Example: ECPSDR-ID
     * Constraints: Minimum length = 1, Maximum length = 36
     */
    val id : String?
        get() {
            val o = __offset(4)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val idAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(4, 1)
    fun idInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 4, 1)
    /**
     * Classification marking of the data in IC/CAPCO Portion-marked format.
     * Example: /// Example: U
     * Constraints: Minimum length = 1, Maximum length = 128
     */
    val classificationMarking : String?
        get() {
            val o = __offset(6)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val classificationMarkingAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(6, 1)
    fun classificationMarkingInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 6, 1)
    /**
     * Unique identifier of the on-orbit satellite hosting the sensor.
     * Example: /// Example: ONORBIT-ID
     * Constraints: Minimum length = 0, Maximum length = 36
     */
    val idOnOrbit : String?
        get() {
            val o = __offset(8)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val idOnOrbitAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(8, 1)
    fun idOnOrbitInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 8, 1)
    /**
     * Satellite/catalog number of the on-orbit satellite hosting the sensor.
     * Example: /// Example: 101
     * Constraints: No constraints specified.
     */
    val satNo : Int
        get() {
            val o = __offset(10)
            return if(o != 0) bb.getInt(o + bb_pos) else 0
        }
    /**
     * Optional identifier provided by the record source to indicate the satellite hosting the sensor.  This may be an internal identifier and not necessarily map to a valid satellite number.
     * Example: /// Example: ORIGOBJECT-ID
     * Constraints: Minimum length = 0, Maximum length = 36
     */
    val origObjectId : String?
        get() {
            val o = __offset(12)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val origObjectIdAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(12, 1)
    fun origObjectIdInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 12, 1)
    /**
     * Unique identifier of the reporting sensor.
     * Example: /// Example: SENSOR-ID
     * Constraints: Minimum length = 0, Maximum length = 36
     */
    val idSensor : String?
        get() {
            val o = __offset(14)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val idSensorAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(14, 1)
    fun idSensorInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 14, 1)
    /**
     * Optional identifier provided by the record source to indicate the sensor identifier which produced this data.  This may be an internal identifier and not necessarily a valid sensor ID.
     * Example: /// Example: ORIGSENSOR-ID
     * Constraints: Minimum length = 0, Maximum length = 64
     */
    val origSensorId : String?
        get() {
            val o = __offset(16)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val origSensorIdAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(16, 1)
    fun origSensorIdInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 16, 1)
    /**
     * The type of data associated with this record (STANDARD, TRANSIENT).
     * Example: /// Example: STANDARD
     * Constraints: Minimum length = 1, Maximum length = 12
     */
    val type : String?
        get() {
            val o = __offset(18)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val typeAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(18, 1)
    fun typeInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 18, 1)
    /**
     * Time stamp of time packet receipt on ground, in ISO 8601 UTC format with millisecond precision.
     * Example: /// Example: 2018-01-01T16:00:00.123Z
     * Constraints: No constraints specified.
     */
    val msgTime : String?
        get() {
            val o = __offset(20)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val msgTimeAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(20, 1)
    fun msgTimeInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 20, 1)
    /**
     * Time of the observation, in ISO 8601 UTC format with millisecond precision.
     * Example: /// Example: 2018-01-01T16:00:00.123Z
     * Constraints: No constraints specified.
     */
    val obTime : String?
        get() {
            val o = __offset(22)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val obTimeAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(22, 1)
    fun obTimeInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 22, 1)
    /**
     * Flag indicating whether this record is an original or re-transmitted dataset (TRUE indicates a retransmit from the host).
     * Example: /// Example: True
     * Constraints: No constraints specified.
     */
    val retransmit : Boolean
        get() {
            val o = __offset(24)
            return if(o != 0) 0.toByte() != bb.get(o + bb_pos) else false
        }
    /**
     * The sensor mode associated with this measurements (NORMAL, TEST).
     * Example: /// Example: TEST
     * Constraints: Minimum length = 0, Maximum length = 12
     */
    val senMode : String?
        get() {
            val o = __offset(26)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val senModeAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(26, 1)
    fun senModeInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 26, 1)
    /**
     * Unitless dosimeter detector bias for MedLET and HiLET.  MedLET (Linear Energy Transfer) and HiLET subsensors detect particles above LET thresholds, 300keV and 1MeV, respectively.
     * Example: /// Example: 12
     * Constraints: No constraints specified.
     */
    val dosBias : Int
        get() {
            val o = __offset(28)
            return if(o != 0) bb.getInt(o + bb_pos) else 0
        }
    /**
     * Internal 5V current monitor for analog supply line.  This is sensor status telemetry.  See vRef for conversion factor to Volts.
     * Example: /// Example: 12
     * Constraints: No constraints specified.
     */
    val asl5VcurrMon : Int
        get() {
            val o = __offset(30)
            return if(o != 0) bb.getInt(o + bb_pos) else 0
        }
    /**
     * Internal 5V current monitor for digital supply line.  This is sensor status telemetry.  See vRef for conversion factor to Volts.
     * Example: /// Example: 12
     * Constraints: No constraints specified.
     */
    val dsl5VcurrMon : Int
        get() {
            val o = __offset(32)
            return if(o != 0) bb.getInt(o + bb_pos) else 0
        }
    /**
     * Power supply temperature monitor.  This is sensor status telemetry.
     * Example: /// Example: 12
     * Constraints: No constraints specified.
     */
    val psTempMon : Int
        get() {
            val o = __offset(34)
            return if(o != 0) bb.getInt(o + bb_pos) else 0
        }
    /**
     * CDS Charge Plate voltage monitor.  See vRef for conversion factor to Volts.
     * Example: /// Example: 12
     * Constraints: No constraints specified.
     */
    val cdsPlateVmon : Int
        get() {
            val o = __offset(36)
            return if(o != 0) bb.getInt(o + bb_pos) else 0
        }
    /**
     * CDS reference voltage monitor.  See vRef for conversion factor to Volts.
     * Example: /// Example: 12
     * Constraints: No constraints specified.
     */
    val cdsRefVmon : Int
        get() {
            val o = __offset(38)
            return if(o != 0) bb.getInt(o + bb_pos) else 0
        }
    /**
     * Unitless sensor mounting plate temperature.
     * Example: /// Example: 12
     * Constraints: No constraints specified.
     */
    val mpTemp : Int
        get() {
            val o = __offset(40)
            return if(o != 0) bb.getInt(o + bb_pos) else 0
        }
    /**
     * Reference voltage (volts/bit).  Conversion factor used to convert analog V monitor data from bytes to volts.
     * Example: /// Example: 12
     * Constraints: No constraints specified.
     */
    val vRef : Int
        get() {
            val o = __offset(42)
            return if(o != 0) bb.getInt(o + bb_pos) else 0
        }
    /**
     * Photodiode 1 signal level.
     * Example: /// Example: 12
     * Constraints: No constraints specified.
     */
    val pd1SigLev : Int
        get() {
            val o = __offset(44)
            return if(o != 0) bb.getInt(o + bb_pos) else 0
        }
    /**
     * Photodiode 2 signal level.
     * Example: /// Example: 12
     * Constraints: No constraints specified.
     */
    val pd2SigLev : Int
        get() {
            val o = __offset(46)
            return if(o != 0) bb.getInt(o + bb_pos) else 0
        }
    /**
     * Number of ESD triggers, low byte of 2-byte counter.
     * Example: /// Example: 12
     * Constraints: No constraints specified.
     */
    val esdTrigCountL : Int
        get() {
            val o = __offset(48)
            return if(o != 0) bb.getInt(o + bb_pos) else 0
        }
    /**
     * Number of ESD triggers, high byte of 2-byte counter.
     * Example: /// Example: 12
     * Constraints: No constraints specified.
     */
    val esdTrigCountH : Int
        get() {
            val o = __offset(50)
            return if(o != 0) bb.getInt(o + bb_pos) else 0
        }
    /**
     * LowLET dosimeter low range output.  Low byte of (LowLET) dosimeter output.
     * Example: /// Example: 2
     * Constraints: No constraints specified.
     */
    val lowLetL : Int
        get() {
            val o = __offset(52)
            return if(o != 0) bb.getInt(o + bb_pos) else 0
        }
    /**
     * LowLET dosimeter medium range output.  Medium byte of (LowLET) dosimeter output.
     * Example: /// Example: 2
     * Constraints: No constraints specified.
     */
    val lowLetM : Int
        get() {
            val o = __offset(54)
            return if(o != 0) bb.getInt(o + bb_pos) else 0
        }
    /**
     * MedLET1 dosimeter low range output.   Low byte of the 1st (MedLET) dosimeter output.
     * Example: /// Example: 2
     * Constraints: No constraints specified.
     */
    val medLet1L : Int
        get() {
            val o = __offset(56)
            return if(o != 0) bb.getInt(o + bb_pos) else 0
        }
    /**
     * MedLET1 dosimeter medium range output.  Medium byte of the 1st (MedLET) dosimeter output.
     * Example: /// Example: 2
     * Constraints: No constraints specified.
     */
    val medLet1M : Int
        get() {
            val o = __offset(58)
            return if(o != 0) bb.getInt(o + bb_pos) else 0
        }
    /**
     * MedLET2 dosimeter low range output.  Low byte of the 2nd (MedLET) dosimeter output.
     * Example: /// Example: 2
     * Constraints: No constraints specified.
     */
    val medLet2L : Int
        get() {
            val o = __offset(60)
            return if(o != 0) bb.getInt(o + bb_pos) else 0
        }
    /**
     * MedLET2 dosimeter medium range output.  Medium byte of the 2nd (MedLET) dosimeter output.
     * Example: /// Example: 2
     * Constraints: No constraints specified.
     */
    val medLet2M : Int
        get() {
            val o = __offset(62)
            return if(o != 0) bb.getInt(o + bb_pos) else 0
        }
    /**
     * MedLET3 dosimeter low range output.  Low byte of the 3rd (MedLET) dosimeter output.
     * Example: /// Example: 2
     * Constraints: No constraints specified.
     */
    val medLet3L : Int
        get() {
            val o = __offset(64)
            return if(o != 0) bb.getInt(o + bb_pos) else 0
        }
    /**
     * MedLET3 dosimeter medium range output.  Medium byte of the 3rd (MedLET) dosimeter output.
     * Example: /// Example: 2
     * Constraints: No constraints specified.
     */
    val medLet3M : Int
        get() {
            val o = __offset(66)
            return if(o != 0) bb.getInt(o + bb_pos) else 0
        }
    /**
     * MedLET4 dosimeter low range output.  Low byte of the 4th (MedLET) dosimeter output.
     * Example: /// Example: 2
     * Constraints: No constraints specified.
     */
    val medLet4L : Int
        get() {
            val o = __offset(68)
            return if(o != 0) bb.getInt(o + bb_pos) else 0
        }
    /**
     * MedLET4 dosimeter medium range output.  Medium byte of the 4th (MedLET) dosimeter output.
     * Example: /// Example: 2
     * Constraints: No constraints specified.
     */
    val medLet4M : Int
        get() {
            val o = __offset(70)
            return if(o != 0) bb.getInt(o + bb_pos) else 0
        }
    /**
     * HiLET dosimeter low range output.  Low byte of scaler (HiLET) dosimeter output.
     * Example: /// Example: 2
     * Constraints: No constraints specified.
     */
    val hiLetL : Int
        get() {
            val o = __offset(72)
            return if(o != 0) bb.getInt(o + bb_pos) else 0
        }
    /**
     * Unitless HiLET dosimeter medium range output.  Medium byte of (HiLET) dosimeter output.
     * Example: /// Example: 2
     * Constraints: No constraints specified.
     */
    val hiLetM : Int
        get() {
            val o = __offset(74)
            return if(o != 0) bb.getInt(o + bb_pos) else 0
        }
    /**
     * Surface dosimeter low range output (converts to pico-coulombs/bit).   Low byte of 3 bytes.
     * Example: /// Example: 12
     * Constraints: No constraints specified.
     */
    val surfDosL : Int
        get() {
            val o = __offset(76)
            return if(o != 0) bb.getInt(o + bb_pos) else 0
        }
    /**
     * Surface dosimeter medium range output (converts to pico-coulombs/bit).  Middle byte of 3 bytes.
     * Example: /// Example: 12
     * Constraints: No constraints specified.
     */
    val surfDosM : Int
        get() {
            val o = __offset(78)
            return if(o != 0) bb.getInt(o + bb_pos) else 0
        }
    /**
     * Surface dosimeter high range output (converts to pico-coulombs/bit).  High byte of 3 bytes.
     * Example: /// Example: 12
     * Constraints: No constraints specified.
     */
    val surfDosH : Int
        get() {
            val o = __offset(80)
            return if(o != 0) bb.getInt(o + bb_pos) else 0
        }
    /**
     * Surface dosimeter charge rate low output (converts to pico-amps/bit).  Low byte of 2 bytes.
     * Example: /// Example: 12
     * Constraints: No constraints specified.
     */
    val surfDosChargeL : Int
        get() {
            val o = __offset(82)
            return if(o != 0) bb.getInt(o + bb_pos) else 0
        }
    /**
     * Surface dosimeter charge rate high output (converts to pico-amps/bit).   High byte of 2 bytes.
     * Example: /// Example: 12
     * Constraints: No constraints specified.
     */
    val surfDosChargeH : Int
        get() {
            val o = __offset(84)
            return if(o != 0) bb.getInt(o + bb_pos) else 0
        }
    /**
     * Surface dosimeter status byte.
     * Example: /// Example: 2
     * Constraints: No constraints specified.
     */
    val surfDosStat : Int
        get() {
            val o = __offset(86)
            return if(o != 0) bb.getInt(o + bb_pos) else 0
        }
    /**
     * CDS throttle number of seconds between CDS transient capture readouts.
     * Example: /// Example: 12
     * Constraints: No constraints specified.
     */
    val cdsThrottle : Int
        get() {
            val o = __offset(88)
            return if(o != 0) bb.getInt(o + bb_pos) else 0
        }
    /**
     * CDS Threshold setting for ESD detection threshold.  The CDS Threshold is the adjustable sensitivity of recording/digitizing an ESD as a transient packet.
     * Example: /// Example: 12
     * Constraints: No constraints specified.
     */
    val cdsThreshold : Int
        get() {
            val o = __offset(90)
            return if(o != 0) bb.getInt(o + bb_pos) else 0
        }
    /**
     * Two byte CRC-16-CCITT checksum (ordered as first byte, second byte).
     * Example: /// Example: 12
     * Constraints: No constraints specified.
     */
    val checksum : Int
        get() {
            val o = __offset(92)
            return if(o != 0) bb.getInt(o + bb_pos) else 0
        }
    /**
     * Array of 144 digitized samples of ESD waveform for transient packets.
     * Example: /// Example: [1, 2, 3]
     * Constraints: No constraints specified.
     */
    fun transientData(j: Int) : String? {
        val o = __offset(94)
        return if (o != 0) {
            __string(__vector(o) + j * 4)
        } else {
            null
        }
    }
    val transientDataLength : Int
        get() {
            val o = __offset(94); return if (o != 0) __vector_len(o) else 0
        }
    /**
     * Time the row was created in the database, auto-populated by the system.
     * Example: /// Example: 2018-01-01T16:00:00.123Z
     * Constraints: No constraints specified.
     */
    val createdAt : String?
        get() {
            val o = __offset(96)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val createdAtAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(96, 1)
    fun createdAtInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 96, 1)
    /**
     * Application user who created the row in the database, auto-populated by the system.
     * Example: /// Example: some.user
     * Constraints: Minimum length = 1, Maximum length = 64
     */
    val createdBy : String?
        get() {
            val o = __offset(98)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val createdByAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(98, 1)
    fun createdByInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 98, 1)
    /**
     * Time the row was last updated in the database, auto-populated by the system.
     * Example: /// Example: 2018-01-01T16:00:00.123Z
     * Constraints: No constraints specified.
     */
    val updatedAt : String?
        get() {
            val o = __offset(100)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val updatedAtAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(100, 1)
    fun updatedAtInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 100, 1)
    /**
     * Application user who updated the row in the database, auto-populated by the system.
     * Example: /// Example: some.user
     * Constraints: Minimum length = 0, Maximum length = 64
     */
    val updatedBy : String?
        get() {
            val o = __offset(102)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val updatedByAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(102, 1)
    fun updatedByInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 102, 1)
    /**
     * Source of the data.
     * Example: /// Example: Bluestaq
     * Constraints: Minimum length = 1, Maximum length = 64
     */
    val source : String?
        get() {
            val o = __offset(104)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val sourceAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(104, 1)
    fun sourceInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 104, 1)
    /**
     * Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
     * Example: /// Example: THIRD_PARTY_DATASOURCE
     * Constraints: Minimum length = 0, Maximum length = 64
     */
    val origin : String?
        get() {
            val o = __offset(106)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val originAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(106, 1)
    fun originInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 106, 1)
    /**
     * The originating source network on which this record was created, auto-populated by the system.
     * Example: /// Example: ORIG
     * Constraints: Minimum length = 1, Maximum length = 32
     */
    val origNetwork : String?
        get() {
            val o = __offset(108)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val origNetworkAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(108, 1)
    fun origNetworkInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 108, 1)
    /**
     * Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
     * EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
     * REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
     * SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
     * TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
     * Example: /// Example: TEST
     * Constraints: Minimum length = 1, Maximum length = 32
     */
    val dataMode : Byte
        get() {
            val o = __offset(110)
            return if(o != 0) bb.get(o + bb_pos) else 0
        }
    /**
     * No description provided.
     * Example: /// Example: No example provided.
     * Constraints: No constraints specified.
     */
    val onOrbit : String?
        get() {
            val o = __offset(112)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val onOrbitAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(112, 1)
    fun onOrbitInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 112, 1)
    companion object {
        fun validateVersion() = Constants.FLATBUFFERS_24_3_25()
        fun getRootAsECPSDR_Full(_bb: ByteBuffer): ECPSDR_Full = getRootAsECPSDR_Full(_bb, ECPSDR_Full())
        fun getRootAsECPSDR_Full(_bb: ByteBuffer, obj: ECPSDR_Full): ECPSDR_Full {
            _bb.order(ByteOrder.LITTLE_ENDIAN)
            return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb))
        }
        fun ECPSDR_FullBufferHasIdentifier(_bb: ByteBuffer) : Boolean = __has_identifier(_bb, "ECPS")
        fun createECPSDR_Full(builder: FlatBufferBuilder, idOffset: Int, classificationMarkingOffset: Int, idOnOrbitOffset: Int, satNo: Int, origObjectIdOffset: Int, idSensorOffset: Int, origSensorIdOffset: Int, typeOffset: Int, msgTimeOffset: Int, obTimeOffset: Int, retransmit: Boolean, senModeOffset: Int, dosBias: Int, asl5VcurrMon: Int, dsl5VcurrMon: Int, psTempMon: Int, cdsPlateVmon: Int, cdsRefVmon: Int, mpTemp: Int, vRef: Int, pd1SigLev: Int, pd2SigLev: Int, esdTrigCountL: Int, esdTrigCountH: Int, lowLetL: Int, lowLetM: Int, medLet1L: Int, medLet1M: Int, medLet2L: Int, medLet2M: Int, medLet3L: Int, medLet3M: Int, medLet4L: Int, medLet4M: Int, hiLetL: Int, hiLetM: Int, surfDosL: Int, surfDosM: Int, surfDosH: Int, surfDosChargeL: Int, surfDosChargeH: Int, surfDosStat: Int, cdsThrottle: Int, cdsThreshold: Int, checksum: Int, transientDataOffset: Int, createdAtOffset: Int, createdByOffset: Int, updatedAtOffset: Int, updatedByOffset: Int, sourceOffset: Int, originOffset: Int, origNetworkOffset: Int, dataMode: Byte, onOrbitOffset: Int) : Int {
            builder.startTable(55)
            addOnOrbit(builder, onOrbitOffset)
            addOrigNetwork(builder, origNetworkOffset)
            addOrigin(builder, originOffset)
            addSource(builder, sourceOffset)
            addUpdatedBy(builder, updatedByOffset)
            addUpdatedAt(builder, updatedAtOffset)
            addCreatedBy(builder, createdByOffset)
            addCreatedAt(builder, createdAtOffset)
            addTransientData(builder, transientDataOffset)
            addChecksum(builder, checksum)
            addCdsThreshold(builder, cdsThreshold)
            addCdsThrottle(builder, cdsThrottle)
            addSurfDosStat(builder, surfDosStat)
            addSurfDosChargeH(builder, surfDosChargeH)
            addSurfDosChargeL(builder, surfDosChargeL)
            addSurfDosH(builder, surfDosH)
            addSurfDosM(builder, surfDosM)
            addSurfDosL(builder, surfDosL)
            addHiLetM(builder, hiLetM)
            addHiLetL(builder, hiLetL)
            addMedLet4M(builder, medLet4M)
            addMedLet4L(builder, medLet4L)
            addMedLet3M(builder, medLet3M)
            addMedLet3L(builder, medLet3L)
            addMedLet2M(builder, medLet2M)
            addMedLet2L(builder, medLet2L)
            addMedLet1M(builder, medLet1M)
            addMedLet1L(builder, medLet1L)
            addLowLetM(builder, lowLetM)
            addLowLetL(builder, lowLetL)
            addEsdTrigCountH(builder, esdTrigCountH)
            addEsdTrigCountL(builder, esdTrigCountL)
            addPd2SigLev(builder, pd2SigLev)
            addPd1SigLev(builder, pd1SigLev)
            addVRef(builder, vRef)
            addMpTemp(builder, mpTemp)
            addCdsRefVMon(builder, cdsRefVmon)
            addCdsPlateVMon(builder, cdsPlateVmon)
            addPsTempMon(builder, psTempMon)
            addDsl5VCurrMon(builder, dsl5VcurrMon)
            addAsl5VCurrMon(builder, asl5VcurrMon)
            addDosBias(builder, dosBias)
            addSenMode(builder, senModeOffset)
            addObTime(builder, obTimeOffset)
            addMsgTime(builder, msgTimeOffset)
            addType(builder, typeOffset)
            addOrigSensorId(builder, origSensorIdOffset)
            addIdSensor(builder, idSensorOffset)
            addOrigObjectId(builder, origObjectIdOffset)
            addSatNo(builder, satNo)
            addIdOnOrbit(builder, idOnOrbitOffset)
            addClassificationMarking(builder, classificationMarkingOffset)
            addId(builder, idOffset)
            addDataMode(builder, dataMode)
            addRetransmit(builder, retransmit)
            return endECPSDR_Full(builder)
        }
        fun startECPSDR_Full(builder: FlatBufferBuilder) = builder.startTable(55)
        fun addId(builder: FlatBufferBuilder, id: Int) = builder.addOffset(0, id, 0)
        fun addClassificationMarking(builder: FlatBufferBuilder, classificationMarking: Int) = builder.addOffset(1, classificationMarking, 0)
        fun addIdOnOrbit(builder: FlatBufferBuilder, idOnOrbit: Int) = builder.addOffset(2, idOnOrbit, 0)
        fun addSatNo(builder: FlatBufferBuilder, satNo: Int) = builder.addInt(3, satNo, 0)
        fun addOrigObjectId(builder: FlatBufferBuilder, origObjectId: Int) = builder.addOffset(4, origObjectId, 0)
        fun addIdSensor(builder: FlatBufferBuilder, idSensor: Int) = builder.addOffset(5, idSensor, 0)
        fun addOrigSensorId(builder: FlatBufferBuilder, origSensorId: Int) = builder.addOffset(6, origSensorId, 0)
        fun addType(builder: FlatBufferBuilder, type: Int) = builder.addOffset(7, type, 0)
        fun addMsgTime(builder: FlatBufferBuilder, msgTime: Int) = builder.addOffset(8, msgTime, 0)
        fun addObTime(builder: FlatBufferBuilder, obTime: Int) = builder.addOffset(9, obTime, 0)
        fun addRetransmit(builder: FlatBufferBuilder, retransmit: Boolean) = builder.addBoolean(10, retransmit, false)
        fun addSenMode(builder: FlatBufferBuilder, senMode: Int) = builder.addOffset(11, senMode, 0)
        fun addDosBias(builder: FlatBufferBuilder, dosBias: Int) = builder.addInt(12, dosBias, 0)
        fun addAsl5VCurrMon(builder: FlatBufferBuilder, asl5VcurrMon: Int) = builder.addInt(13, asl5VcurrMon, 0)
        fun addDsl5VCurrMon(builder: FlatBufferBuilder, dsl5VcurrMon: Int) = builder.addInt(14, dsl5VcurrMon, 0)
        fun addPsTempMon(builder: FlatBufferBuilder, psTempMon: Int) = builder.addInt(15, psTempMon, 0)
        fun addCdsPlateVMon(builder: FlatBufferBuilder, cdsPlateVmon: Int) = builder.addInt(16, cdsPlateVmon, 0)
        fun addCdsRefVMon(builder: FlatBufferBuilder, cdsRefVmon: Int) = builder.addInt(17, cdsRefVmon, 0)
        fun addMpTemp(builder: FlatBufferBuilder, mpTemp: Int) = builder.addInt(18, mpTemp, 0)
        fun addVRef(builder: FlatBufferBuilder, vRef: Int) = builder.addInt(19, vRef, 0)
        fun addPd1SigLev(builder: FlatBufferBuilder, pd1SigLev: Int) = builder.addInt(20, pd1SigLev, 0)
        fun addPd2SigLev(builder: FlatBufferBuilder, pd2SigLev: Int) = builder.addInt(21, pd2SigLev, 0)
        fun addEsdTrigCountL(builder: FlatBufferBuilder, esdTrigCountL: Int) = builder.addInt(22, esdTrigCountL, 0)
        fun addEsdTrigCountH(builder: FlatBufferBuilder, esdTrigCountH: Int) = builder.addInt(23, esdTrigCountH, 0)
        fun addLowLetL(builder: FlatBufferBuilder, lowLetL: Int) = builder.addInt(24, lowLetL, 0)
        fun addLowLetM(builder: FlatBufferBuilder, lowLetM: Int) = builder.addInt(25, lowLetM, 0)
        fun addMedLet1L(builder: FlatBufferBuilder, medLet1L: Int) = builder.addInt(26, medLet1L, 0)
        fun addMedLet1M(builder: FlatBufferBuilder, medLet1M: Int) = builder.addInt(27, medLet1M, 0)
        fun addMedLet2L(builder: FlatBufferBuilder, medLet2L: Int) = builder.addInt(28, medLet2L, 0)
        fun addMedLet2M(builder: FlatBufferBuilder, medLet2M: Int) = builder.addInt(29, medLet2M, 0)
        fun addMedLet3L(builder: FlatBufferBuilder, medLet3L: Int) = builder.addInt(30, medLet3L, 0)
        fun addMedLet3M(builder: FlatBufferBuilder, medLet3M: Int) = builder.addInt(31, medLet3M, 0)
        fun addMedLet4L(builder: FlatBufferBuilder, medLet4L: Int) = builder.addInt(32, medLet4L, 0)
        fun addMedLet4M(builder: FlatBufferBuilder, medLet4M: Int) = builder.addInt(33, medLet4M, 0)
        fun addHiLetL(builder: FlatBufferBuilder, hiLetL: Int) = builder.addInt(34, hiLetL, 0)
        fun addHiLetM(builder: FlatBufferBuilder, hiLetM: Int) = builder.addInt(35, hiLetM, 0)
        fun addSurfDosL(builder: FlatBufferBuilder, surfDosL: Int) = builder.addInt(36, surfDosL, 0)
        fun addSurfDosM(builder: FlatBufferBuilder, surfDosM: Int) = builder.addInt(37, surfDosM, 0)
        fun addSurfDosH(builder: FlatBufferBuilder, surfDosH: Int) = builder.addInt(38, surfDosH, 0)
        fun addSurfDosChargeL(builder: FlatBufferBuilder, surfDosChargeL: Int) = builder.addInt(39, surfDosChargeL, 0)
        fun addSurfDosChargeH(builder: FlatBufferBuilder, surfDosChargeH: Int) = builder.addInt(40, surfDosChargeH, 0)
        fun addSurfDosStat(builder: FlatBufferBuilder, surfDosStat: Int) = builder.addInt(41, surfDosStat, 0)
        fun addCdsThrottle(builder: FlatBufferBuilder, cdsThrottle: Int) = builder.addInt(42, cdsThrottle, 0)
        fun addCdsThreshold(builder: FlatBufferBuilder, cdsThreshold: Int) = builder.addInt(43, cdsThreshold, 0)
        fun addChecksum(builder: FlatBufferBuilder, checksum: Int) = builder.addInt(44, checksum, 0)
        fun addTransientData(builder: FlatBufferBuilder, transientData: Int) = builder.addOffset(45, transientData, 0)
        fun createTransientDataVector(builder: FlatBufferBuilder, data: IntArray) : Int {
            builder.startVector(4, data.size, 4)
            for (i in data.size - 1 downTo 0) {
                builder.addOffset(data[i])
            }
            return builder.endVector()
        }
        fun startTransientDataVector(builder: FlatBufferBuilder, numElems: Int) = builder.startVector(4, numElems, 4)
        fun addCreatedAt(builder: FlatBufferBuilder, createdAt: Int) = builder.addOffset(46, createdAt, 0)
        fun addCreatedBy(builder: FlatBufferBuilder, createdBy: Int) = builder.addOffset(47, createdBy, 0)
        fun addUpdatedAt(builder: FlatBufferBuilder, updatedAt: Int) = builder.addOffset(48, updatedAt, 0)
        fun addUpdatedBy(builder: FlatBufferBuilder, updatedBy: Int) = builder.addOffset(49, updatedBy, 0)
        fun addSource(builder: FlatBufferBuilder, source: Int) = builder.addOffset(50, source, 0)
        fun addOrigin(builder: FlatBufferBuilder, origin: Int) = builder.addOffset(51, origin, 0)
        fun addOrigNetwork(builder: FlatBufferBuilder, origNetwork: Int) = builder.addOffset(52, origNetwork, 0)
        fun addDataMode(builder: FlatBufferBuilder, dataMode: Byte) = builder.addByte(53, dataMode, 0)
        fun addOnOrbit(builder: FlatBufferBuilder, onOrbit: Int) = builder.addOffset(54, onOrbit, 0)
        fun endECPSDR_Full(builder: FlatBufferBuilder) : Int {
            val o = builder.endTable()
            return o
        }
        fun finishECPSDRFullBuffer(builder: FlatBufferBuilder, offset: Int) = builder.finish(offset, "ECPS")
        fun finishSizePrefixedECPSDR_FullBuffer(builder: FlatBufferBuilder, offset: Int) = builder.finishSizePrefixed(offset, "ECPS")
    }
}
