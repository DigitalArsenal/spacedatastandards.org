// automatically generated by the FlatBuffers compiler, do not modify

import com.google.flatbuffers.BaseVector
import com.google.flatbuffers.BooleanVector
import com.google.flatbuffers.ByteVector
import com.google.flatbuffers.Constants
import com.google.flatbuffers.DoubleVector
import com.google.flatbuffers.FlatBufferBuilder
import com.google.flatbuffers.FloatVector
import com.google.flatbuffers.LongVector
import com.google.flatbuffers.StringVector
import com.google.flatbuffers.Struct
import com.google.flatbuffers.Table
import com.google.flatbuffers.UnionVector
import java.nio.ByteBuffer
import java.nio.ByteOrder
import kotlin.math.sign

/**
 * /// Information for the specified on-orbit GEO spacecraft, including status, expected longitude limits, and drift rates.
 */
@Suppress("unused")
class GEOStatus_Ingest : Table() {

    fun __init(_i: Int, _bb: ByteBuffer)  {
        __reset(_i, _bb)
    }
    fun __assign(_i: Int, _bb: ByteBuffer) : GEOStatus_Ingest {
        __init(_i, _bb)
        return this
    }
    /**
     * Unique identifier of the record, auto-generated by the system.
     * Example: /// Example: GEOSTATUS-ID
     * Constraints: Minimum length = 1, Maximum length = 36
     */
    val id : String?
        get() {
            val o = __offset(4)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val idAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(4, 1)
    fun idInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 4, 1)
    /**
     * Classification marking of the data in IC/CAPCO Portion-marked format.
     * Example: /// Example: U
     * Constraints: Minimum length = 1, Maximum length = 128
     */
    val classificationMarking : String?
        get() {
            val o = __offset(6)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val classificationMarkingAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(6, 1)
    fun classificationMarkingInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 6, 1)
    /**
     * Unique identifier of the object on-orbit object.
     * Example: /// Example: REF-ONORBIT-ID
     * Constraints: Minimum length = 0, Maximum length = 36
     */
    val idOnOrbit : String?
        get() {
            val o = __offset(8)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val idOnOrbitAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(8, 1)
    fun idOnOrbitInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 8, 1)
    /**
     * Optional identifier provided to indicate the target onorbit. This may be an internal identifier and not necessarily map to a valid satellite number.
     * Example: /// Example: ORIGOBJECT-ID
     * Constraints: Minimum length = 0, Maximum length = 36
     */
    val origObjectId : String?
        get() {
            val o = __offset(10)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val origObjectIdAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(10, 1)
    fun origObjectIdInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 10, 1)
    /**
     * Sine of inclination times the sine of right ascension.
     * Example: /// Example: 1.1
     * Constraints: No constraints specified.
     */
    val ss : Double
        get() {
            val o = __offset(12)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Sine of inclination times the cosine of right ascension.
     * Example: /// Example: 1.1
     * Constraints: No constraints specified.
     */
    val sc : Double
        get() {
            val o = __offset(14)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Objects displacement from geostationary orbit in deg^2/day^2.
     * Example: /// Example: 1.1
     * Constraints: No constraints specified.
     */
    val relativeEnergy : Double
        get() {
            val o = __offset(16)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Corrective or overriding long term trend for longitudinal change in degrees/day.
     * Example: /// Example: 1.1
     * Constraints: No constraints specified.
     */
    val longitudeRate : Double
        get() {
            val o = __offset(18)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Minimum longitude for this object.  WGS-84 longitude of the spacecraft position, in degrees. 0 to 360 degrees.
     * Example: /// Example: 180.1
     * Constraints: No constraints specified.
     */
    val longitudeMin : Double
        get() {
            val o = __offset(20)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Maximum longitude for this object. WGS-84 longitude of the spacecraft position, in degrees. 0 to 360 degrees.
     * Example: /// Example: 1.01
     * Constraints: No constraints specified.
     */
    val longitudeMax : Double
        get() {
            val o = __offset(22)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Indicates the confidence level in the entry.  (Low, Medium, High).
     * Example: /// Example: Low
     * Constraints: Minimum length = 0, Maximum length = 8
     */
    val confidenceLevel : String?
        get() {
            val o = __offset(24)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val confidenceLevelAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(24, 1)
    fun confidenceLevelInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 24, 1)
    /**
     * Geosynchronous plane changing status.  (Current, Never, Former, Future).
     * Example: /// Example: Current
     * Constraints: Minimum length = 0, Maximum length = 8
     */
    val planeChangeStatus : String?
        get() {
            val o = __offset(26)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val planeChangeStatusAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(26, 1)
    fun planeChangeStatusInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 26, 1)
    /**
     * Indicates the trough (gravity well) or drift direction of a space object:
     * 255 - Influenced by 255° longitude trough. 
     * 75 - Influenced by 75° longitude trough. 
     * Both - Oscillating between both 255 and 75 troughs. 
     * East - Drifting eastward; large relative energy and a period less than 1436.1 minutes. 
     * West - Drifting westward; large relative energy and a period greater than 1436.2 minutes.
     * Example: /// Example: West
     * Constraints: Minimum length = 0, Maximum length = 8
     */
    val troughType : String?
        get() {
            val o = __offset(28)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val troughTypeAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(28, 1)
    fun troughTypeInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 28, 1)
    /**
     * Lost space object indicator.  (True or False).
     * Example: /// Example: False
     * Constraints: No constraints specified.
     */
    val lostFlag : Boolean
        get() {
            val o = __offset(30)
            return if(o != 0) 0.toByte() != bb.get(o + bb_pos) else false
        }
    /**
     * Semi-annual correction.  (True or False).
     * Example: /// Example: False
     * Constraints: No constraints specified.
     */
    val semiAnnualCorrFlag : Boolean
        get() {
            val o = __offset(32)
            return if(o != 0) 0.toByte() != bb.get(o + bb_pos) else false
        }
    /**
     * Space object status.  (Active, Dead, Unknown).
     * Example: /// Example: Active
     * Constraints: Minimum length = 0, Maximum length = 32
     */
    val objectStatus : String?
        get() {
            val o = __offset(34)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val objectStatusAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(34, 1)
    fun objectStatusInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 34, 1)
    /**
     * Optional URI location in the document repository of the raw file parsed by the system to produce this record. To download the raw file, prepend https://udl-hostname/scs/download?id= to this value.
     * Example: /// Example: Example URI
     * Constraints: Minimum length = 0, Maximum length = 256
     */
    val rawFileUri : String?
        get() {
            val o = __offset(36)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val rawFileUriAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(36, 1)
    fun rawFileUriInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 36, 1)
    /**
     * Time the row was created in the database, auto-populated by the system.
     * Example: /// Example: 2018-01-01T16:00:00.123Z
     * Constraints: No constraints specified.
     */
    val createdAt : String?
        get() {
            val o = __offset(38)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val createdAtAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(38, 1)
    fun createdAtInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 38, 1)
    /**
     * Application user who created the row in the database, auto-populated by the system.
     * Example: /// Example: some.user
     * Constraints: Minimum length = 1, Maximum length = 64
     */
    val createdBy : String?
        get() {
            val o = __offset(40)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val createdByAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(40, 1)
    fun createdByInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 40, 1)
    /**
     * Source of the data.
     * Example: /// Example: Bluestaq
     * Constraints: Minimum length = 1, Maximum length = 64
     */
    val source : String?
        get() {
            val o = __offset(42)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val sourceAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(42, 1)
    fun sourceInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 42, 1)
    /**
     * Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
     * Example: /// Example: THIRD_PARTY_DATASOURCE
     * Constraints: Minimum length = 0, Maximum length = 64
     */
    val origin : String?
        get() {
            val o = __offset(44)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val originAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(44, 1)
    fun originInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 44, 1)
    /**
     * Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
     * EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
     * REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
     * SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
     * TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
     * Example: /// Example: TEST
     * Constraints: Minimum length = 1, Maximum length = 32
     */
    val dataMode : Byte
        get() {
            val o = __offset(46)
            return if(o != 0) bb.get(o + bb_pos) else 0
        }
    /**
     * Satellite/catalog number of the target on-orbit object.
     * Example: /// Example: 21
     * Constraints: No constraints specified.
     */
    val satNo : Int
        get() {
            val o = __offset(48)
            return if(o != 0) bb.getInt(o + bb_pos) else 0
        }
    /**
     * The originating source network on which this record was created, auto-populated by the system.
     * Example: /// Example: ORIG
     * Constraints: Minimum length = 0, Maximum length = 32
     */
    val origNetwork : String?
        get() {
            val o = __offset(50)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val origNetworkAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(50, 1)
    fun origNetworkInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 50, 1)
    companion object {
        fun validateVersion() = Constants.FLATBUFFERS_24_3_25()
        fun getRootAsGEOStatus_Ingest(_bb: ByteBuffer): GEOStatus_Ingest = getRootAsGEOStatus_Ingest(_bb, GEOStatus_Ingest())
        fun getRootAsGEOStatus_Ingest(_bb: ByteBuffer, obj: GEOStatus_Ingest): GEOStatus_Ingest {
            _bb.order(ByteOrder.LITTLE_ENDIAN)
            return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb))
        }
        fun GEOStatus_IngestBufferHasIdentifier(_bb: ByteBuffer) : Boolean = __has_identifier(_bb, "GEOS")
        fun createGEOStatus_Ingest(builder: FlatBufferBuilder, idOffset: Int, classificationMarkingOffset: Int, idOnOrbitOffset: Int, origObjectIdOffset: Int, ss: Double, sc: Double, relativeEnergy: Double, longitudeRate: Double, longitudeMin: Double, longitudeMax: Double, confidenceLevelOffset: Int, planeChangeStatusOffset: Int, troughTypeOffset: Int, lostFlag: Boolean, semiAnnualCorrFlag: Boolean, objectStatusOffset: Int, rawFileUriOffset: Int, createdAtOffset: Int, createdByOffset: Int, sourceOffset: Int, originOffset: Int, dataMode: Byte, satNo: Int, origNetworkOffset: Int) : Int {
            builder.startTable(24)
            addLongitudeMax(builder, longitudeMax)
            addLongitudeMin(builder, longitudeMin)
            addLongitudeRate(builder, longitudeRate)
            addRelativeEnergy(builder, relativeEnergy)
            addSc(builder, sc)
            addSs(builder, ss)
            addOrigNetwork(builder, origNetworkOffset)
            addSatNo(builder, satNo)
            addOrigin(builder, originOffset)
            addSource(builder, sourceOffset)
            addCreatedBy(builder, createdByOffset)
            addCreatedAt(builder, createdAtOffset)
            addRawFileURI(builder, rawFileUriOffset)
            addObjectStatus(builder, objectStatusOffset)
            addTroughType(builder, troughTypeOffset)
            addPlaneChangeStatus(builder, planeChangeStatusOffset)
            addConfidenceLevel(builder, confidenceLevelOffset)
            addOrigObjectId(builder, origObjectIdOffset)
            addIdOnOrbit(builder, idOnOrbitOffset)
            addClassificationMarking(builder, classificationMarkingOffset)
            addId(builder, idOffset)
            addDataMode(builder, dataMode)
            addSemiAnnualCorrFlag(builder, semiAnnualCorrFlag)
            addLostFlag(builder, lostFlag)
            return endGEOStatus_Ingest(builder)
        }
        fun startGEOStatus_Ingest(builder: FlatBufferBuilder) = builder.startTable(24)
        fun addId(builder: FlatBufferBuilder, id: Int) = builder.addOffset(0, id, 0)
        fun addClassificationMarking(builder: FlatBufferBuilder, classificationMarking: Int) = builder.addOffset(1, classificationMarking, 0)
        fun addIdOnOrbit(builder: FlatBufferBuilder, idOnOrbit: Int) = builder.addOffset(2, idOnOrbit, 0)
        fun addOrigObjectId(builder: FlatBufferBuilder, origObjectId: Int) = builder.addOffset(3, origObjectId, 0)
        fun addSs(builder: FlatBufferBuilder, ss: Double) = builder.addDouble(4, ss, 0.0)
        fun addSc(builder: FlatBufferBuilder, sc: Double) = builder.addDouble(5, sc, 0.0)
        fun addRelativeEnergy(builder: FlatBufferBuilder, relativeEnergy: Double) = builder.addDouble(6, relativeEnergy, 0.0)
        fun addLongitudeRate(builder: FlatBufferBuilder, longitudeRate: Double) = builder.addDouble(7, longitudeRate, 0.0)
        fun addLongitudeMin(builder: FlatBufferBuilder, longitudeMin: Double) = builder.addDouble(8, longitudeMin, 0.0)
        fun addLongitudeMax(builder: FlatBufferBuilder, longitudeMax: Double) = builder.addDouble(9, longitudeMax, 0.0)
        fun addConfidenceLevel(builder: FlatBufferBuilder, confidenceLevel: Int) = builder.addOffset(10, confidenceLevel, 0)
        fun addPlaneChangeStatus(builder: FlatBufferBuilder, planeChangeStatus: Int) = builder.addOffset(11, planeChangeStatus, 0)
        fun addTroughType(builder: FlatBufferBuilder, troughType: Int) = builder.addOffset(12, troughType, 0)
        fun addLostFlag(builder: FlatBufferBuilder, lostFlag: Boolean) = builder.addBoolean(13, lostFlag, false)
        fun addSemiAnnualCorrFlag(builder: FlatBufferBuilder, semiAnnualCorrFlag: Boolean) = builder.addBoolean(14, semiAnnualCorrFlag, false)
        fun addObjectStatus(builder: FlatBufferBuilder, objectStatus: Int) = builder.addOffset(15, objectStatus, 0)
        fun addRawFileURI(builder: FlatBufferBuilder, rawFileUri: Int) = builder.addOffset(16, rawFileUri, 0)
        fun addCreatedAt(builder: FlatBufferBuilder, createdAt: Int) = builder.addOffset(17, createdAt, 0)
        fun addCreatedBy(builder: FlatBufferBuilder, createdBy: Int) = builder.addOffset(18, createdBy, 0)
        fun addSource(builder: FlatBufferBuilder, source: Int) = builder.addOffset(19, source, 0)
        fun addOrigin(builder: FlatBufferBuilder, origin: Int) = builder.addOffset(20, origin, 0)
        fun addDataMode(builder: FlatBufferBuilder, dataMode: Byte) = builder.addByte(21, dataMode, 0)
        fun addSatNo(builder: FlatBufferBuilder, satNo: Int) = builder.addInt(22, satNo, 0)
        fun addOrigNetwork(builder: FlatBufferBuilder, origNetwork: Int) = builder.addOffset(23, origNetwork, 0)
        fun endGEOStatus_Ingest(builder: FlatBufferBuilder) : Int {
            val o = builder.endTable()
            return o
        }
        fun finishGEOStatusIngestBuffer(builder: FlatBufferBuilder, offset: Int) = builder.finish(offset, "GEOS")
        fun finishSizePrefixedGEOStatus_IngestBuffer(builder: FlatBufferBuilder, offset: Int) = builder.finishSizePrefixed(offset, "GEOS")
    }
}
