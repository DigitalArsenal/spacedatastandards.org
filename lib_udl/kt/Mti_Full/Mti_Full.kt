// automatically generated by the FlatBuffers compiler, do not modify

import com.google.flatbuffers.BaseVector
import com.google.flatbuffers.BooleanVector
import com.google.flatbuffers.ByteVector
import com.google.flatbuffers.Constants
import com.google.flatbuffers.DoubleVector
import com.google.flatbuffers.FlatBufferBuilder
import com.google.flatbuffers.FloatVector
import com.google.flatbuffers.LongVector
import com.google.flatbuffers.StringVector
import com.google.flatbuffers.Struct
import com.google.flatbuffers.Table
import com.google.flatbuffers.UnionVector
import java.nio.ByteBuffer
import java.nio.ByteOrder
import kotlin.math.sign

/**
 * /// Information on the mission and flight plans, the type and configuration of the platform, and the reference time.
 */
@Suppress("unused")
class Mti_Full : Table() {

    fun __init(_i: Int, _bb: ByteBuffer)  {
        __reset(_i, _bb)
    }
    fun __assign(_i: Int, _bb: ByteBuffer) : Mti_Full {
        __init(_i, _bb)
        return this
    }
    /**
     * Classification marking of the data in IC/CAPCO Portion-marked format.
     * Example: /// Example: U
     * Constraints: Minimum length = 1, Maximum length = 128
     */
    val classificationMarking : String?
        get() {
            val o = __offset(4)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val classificationMarkingAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(4, 1)
    fun classificationMarkingInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 4, 1)
    /**
     * Source of the data.
     * Example: /// Example: Bluestaq
     * Constraints: Minimum length = 1, Maximum length = 64
     */
    val source : String?
        get() {
            val o = __offset(6)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val sourceAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(6, 1)
    fun sourceInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 6, 1)
    /**
     * Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
     * Example: /// Example: THIRD_PARTY_DATASOURCE
     * Constraints: Minimum length = 0, Maximum length = 64
     */
    val origin : String?
        get() {
            val o = __offset(8)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val originAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(8, 1)
    fun originInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 8, 1)
    /**
     * Unique identifier of the record, auto-generated by the system.
     * Example: /// Example: MTI-ID
     * Constraints: Minimum length = 1, Maximum length = 36
     */
    val id : String?
        get() {
            val o = __offset(10)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val idAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(10, 1)
    fun idInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 10, 1)
    /**
     * Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
     * EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
     * REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
     * SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
     * TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
     * Example: /// Example: TEST
     * Constraints: Minimum length = 1, Maximum length = 32
     */
    val dataMode : Byte
        get() {
            val o = __offset(12)
            return if(o != 0) bb.get(o + bb_pos) else 0
        }
    /**
     * Application user who created the row in the database, auto-populated by the system.
     * Example: /// Example: some.user
     * Constraints: Minimum length = 0, Maximum length = 64
     */
    val createdBy : String?
        get() {
            val o = __offset(14)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val createdByAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(14, 1)
    fun createdByInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 14, 1)
    /**
     * Time the row was created in the database, auto-populated by the system.
     * Example: /// Example: 2018-01-01T16:00:00.123Z
     * Constraints: No constraints specified.
     */
    val createdAt : String?
        get() {
            val o = __offset(16)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val createdAtAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(16, 1)
    fun createdAtInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 16, 1)
    /**
     * Nationality of the platform providing the data.
     * Example: /// Example: NATIONALITY
     * Constraints: Minimum length = 0, Maximum length = 32
     */
    val p3 : String?
        get() {
            val o = __offset(18)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val p3AsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(18, 1)
    fun p3InByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 18, 1)
    /**
     * Control / handling marking.
     * Example: /// Example: MARKING
     * Constraints: Minimum length = 0, Maximum length = 128
     */
    val p6 : String?
        get() {
            val o = __offset(20)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val p6AsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(20, 1)
    fun p6InByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 20, 1)
    /**
     * Data record exercise indicator.
     * Example: /// Example: INDICATOR
     * Constraints: Minimum length = 0, Maximum length = 32
     */
    val p7 : String?
        get() {
            val o = __offset(22)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val p7AsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(22, 1)
    fun p7InByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 22, 1)
    /**
     * ID of the platform providing the data (tail number for air platform, name and numerical designator for space-based platforms).
     * Example: /// Example: P8-ID
     * Constraints: Minimum length = 0, Maximum length = 64
     */
    val p8 : String?
        get() {
            val o = __offset(24)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val p8AsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(24, 1)
    fun p8InByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 24, 1)
    /**
     * Integer field, assigned by the platform, that uniquely identifies the mission for the platform.
     * Example: /// Example: 45
     * Constraints: No constraints specified.
     */
    val p9 : Int
        get() {
            val o = __offset(26)
            return if(o != 0) bb.getInt(o + bb_pos) else 0
        }
    /**
     * A platform-assigned number identifying the specific request or task that pertains to all Dwell, HRR, and Range-Doppler segments in the packet.  Job ID is unique within a mission.
     * Example: /// Example: 45
     * Constraints: No constraints specified.
     */
    val p10 : Int
        get() {
            val o = __offset(28)
            return if(o != 0) bb.getInt(o + bb_pos) else 0
        }
    /**
     * A platform-assigned number identifying the specific request or task that pertains to all Dwell, HRR, and Range-Doppler segments in the packet.  Job ID is unique within a mission.
     * Example: /// Example: No example provided.
     * Constraints: No constraints specified.
     */
    fun missions(j: Int) : String? {
        val o = __offset(30)
        return if (o != 0) {
            __string(__vector(o) + j * 4)
        } else {
            null
        }
    }
    val missionsLength : Int
        get() {
            val o = __offset(30); return if (o != 0) __vector_len(o) else 0
        }
    /**
     * A platform-assigned number identifying the specific request or task that pertains to all Dwell, HRR, and Range-Doppler segments in the packet.  Job ID is unique within a mission.
     * Example: /// Example: No example provided.
     * Constraints: No constraints specified.
     */
    fun dwells(j: Int) : String? {
        val o = __offset(32)
        return if (o != 0) {
            __string(__vector(o) + j * 4)
        } else {
            null
        }
    }
    val dwellsLength : Int
        get() {
            val o = __offset(32); return if (o != 0) __vector_len(o) else 0
        }
    /**
     * A platform-assigned number identifying the specific request or task that pertains to all Dwell, HRR, and Range-Doppler segments in the packet.  Job ID is unique within a mission.
     * Example: /// Example: No example provided.
     * Constraints: No constraints specified.
     */
    fun hrrs(j: Int) : String? {
        val o = __offset(34)
        return if (o != 0) {
            __string(__vector(o) + j * 4)
        } else {
            null
        }
    }
    val hrrsLength : Int
        get() {
            val o = __offset(34); return if (o != 0) __vector_len(o) else 0
        }
    /**
     * A platform-assigned number identifying the specific request or task that pertains to all Dwell, HRR, and Range-Doppler segments in the packet.  Job ID is unique within a mission.
     * Example: /// Example: No example provided.
     * Constraints: No constraints specified.
     */
    fun jobDefs(j: Int) : String? {
        val o = __offset(36)
        return if (o != 0) {
            __string(__vector(o) + j * 4)
        } else {
            null
        }
    }
    val jobDefsLength : Int
        get() {
            val o = __offset(36); return if (o != 0) __vector_len(o) else 0
        }
    /**
     * A platform-assigned number identifying the specific request or task that pertains to all Dwell, HRR, and Range-Doppler segments in the packet.  Job ID is unique within a mission.
     * Example: /// Example: No example provided.
     * Constraints: No constraints specified.
     */
    fun freeTexts(j: Int) : String? {
        val o = __offset(38)
        return if (o != 0) {
            __string(__vector(o) + j * 4)
        } else {
            null
        }
    }
    val freeTextsLength : Int
        get() {
            val o = __offset(38); return if (o != 0) __vector_len(o) else 0
        }
    /**
     * A platform-assigned number identifying the specific request or task that pertains to all Dwell, HRR, and Range-Doppler segments in the packet.  Job ID is unique within a mission.
     * Example: /// Example: No example provided.
     * Constraints: No constraints specified.
     */
    fun platformLocs(j: Int) : String? {
        val o = __offset(40)
        return if (o != 0) {
            __string(__vector(o) + j * 4)
        } else {
            null
        }
    }
    val platformLocsLength : Int
        get() {
            val o = __offset(40); return if (o != 0) __vector_len(o) else 0
        }
    /**
     * A platform-assigned number identifying the specific request or task that pertains to all Dwell, HRR, and Range-Doppler segments in the packet.  Job ID is unique within a mission.
     * Example: /// Example: No example provided.
     * Constraints: No constraints specified.
     */
    fun jobRequests(j: Int) : String? {
        val o = __offset(42)
        return if (o != 0) {
            __string(__vector(o) + j * 4)
        } else {
            null
        }
    }
    val jobRequestsLength : Int
        get() {
            val o = __offset(42); return if (o != 0) __vector_len(o) else 0
        }
    /**
     * The originating source network on which this record was created, auto-populated by the system.
     * Example: /// Example: ORIG
     * Constraints: Minimum length = 1, Maximum length = 32
     */
    val origNetwork : String?
        get() {
            val o = __offset(44)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val origNetworkAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(44, 1)
    fun origNetworkInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 44, 1)
    companion object {
        fun validateVersion() = Constants.FLATBUFFERS_24_3_25()
        fun getRootAsMti_Full(_bb: ByteBuffer): Mti_Full = getRootAsMti_Full(_bb, Mti_Full())
        fun getRootAsMti_Full(_bb: ByteBuffer, obj: Mti_Full): Mti_Full {
            _bb.order(ByteOrder.LITTLE_ENDIAN)
            return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb))
        }
        fun Mti_FullBufferHasIdentifier(_bb: ByteBuffer) : Boolean = __has_identifier(_bb, "MTIF")
        fun createMti_Full(builder: FlatBufferBuilder, classificationMarkingOffset: Int, sourceOffset: Int, originOffset: Int, idOffset: Int, dataMode: Byte, createdByOffset: Int, createdAtOffset: Int, p3Offset: Int, p6Offset: Int, p7Offset: Int, p8Offset: Int, p9: Int, p10: Int, missionsOffset: Int, dwellsOffset: Int, hrrsOffset: Int, jobDefsOffset: Int, freeTextsOffset: Int, platformLocsOffset: Int, jobRequestsOffset: Int, origNetworkOffset: Int) : Int {
            builder.startTable(21)
            addOrigNetwork(builder, origNetworkOffset)
            addJobRequests(builder, jobRequestsOffset)
            addPlatformLocs(builder, platformLocsOffset)
            addFreeTexts(builder, freeTextsOffset)
            addJobDefs(builder, jobDefsOffset)
            addHrrs(builder, hrrsOffset)
            addDwells(builder, dwellsOffset)
            addMissions(builder, missionsOffset)
            addP10(builder, p10)
            addP9(builder, p9)
            addP8(builder, p8Offset)
            addP7(builder, p7Offset)
            addP6(builder, p6Offset)
            addP3(builder, p3Offset)
            addCreatedAt(builder, createdAtOffset)
            addCreatedBy(builder, createdByOffset)
            addId(builder, idOffset)
            addOrigin(builder, originOffset)
            addSource(builder, sourceOffset)
            addClassificationMarking(builder, classificationMarkingOffset)
            addDataMode(builder, dataMode)
            return endMti_Full(builder)
        }
        fun startMti_Full(builder: FlatBufferBuilder) = builder.startTable(21)
        fun addClassificationMarking(builder: FlatBufferBuilder, classificationMarking: Int) = builder.addOffset(0, classificationMarking, 0)
        fun addSource(builder: FlatBufferBuilder, source: Int) = builder.addOffset(1, source, 0)
        fun addOrigin(builder: FlatBufferBuilder, origin: Int) = builder.addOffset(2, origin, 0)
        fun addId(builder: FlatBufferBuilder, id: Int) = builder.addOffset(3, id, 0)
        fun addDataMode(builder: FlatBufferBuilder, dataMode: Byte) = builder.addByte(4, dataMode, 0)
        fun addCreatedBy(builder: FlatBufferBuilder, createdBy: Int) = builder.addOffset(5, createdBy, 0)
        fun addCreatedAt(builder: FlatBufferBuilder, createdAt: Int) = builder.addOffset(6, createdAt, 0)
        fun addP3(builder: FlatBufferBuilder, p3: Int) = builder.addOffset(7, p3, 0)
        fun addP6(builder: FlatBufferBuilder, p6: Int) = builder.addOffset(8, p6, 0)
        fun addP7(builder: FlatBufferBuilder, p7: Int) = builder.addOffset(9, p7, 0)
        fun addP8(builder: FlatBufferBuilder, p8: Int) = builder.addOffset(10, p8, 0)
        fun addP9(builder: FlatBufferBuilder, p9: Int) = builder.addInt(11, p9, 0)
        fun addP10(builder: FlatBufferBuilder, p10: Int) = builder.addInt(12, p10, 0)
        fun addMissions(builder: FlatBufferBuilder, missions: Int) = builder.addOffset(13, missions, 0)
        fun createMissionsVector(builder: FlatBufferBuilder, data: IntArray) : Int {
            builder.startVector(4, data.size, 4)
            for (i in data.size - 1 downTo 0) {
                builder.addOffset(data[i])
            }
            return builder.endVector()
        }
        fun startMissionsVector(builder: FlatBufferBuilder, numElems: Int) = builder.startVector(4, numElems, 4)
        fun addDwells(builder: FlatBufferBuilder, dwells: Int) = builder.addOffset(14, dwells, 0)
        fun createDwellsVector(builder: FlatBufferBuilder, data: IntArray) : Int {
            builder.startVector(4, data.size, 4)
            for (i in data.size - 1 downTo 0) {
                builder.addOffset(data[i])
            }
            return builder.endVector()
        }
        fun startDwellsVector(builder: FlatBufferBuilder, numElems: Int) = builder.startVector(4, numElems, 4)
        fun addHrrs(builder: FlatBufferBuilder, hrrs: Int) = builder.addOffset(15, hrrs, 0)
        fun createHrrsVector(builder: FlatBufferBuilder, data: IntArray) : Int {
            builder.startVector(4, data.size, 4)
            for (i in data.size - 1 downTo 0) {
                builder.addOffset(data[i])
            }
            return builder.endVector()
        }
        fun startHrrsVector(builder: FlatBufferBuilder, numElems: Int) = builder.startVector(4, numElems, 4)
        fun addJobDefs(builder: FlatBufferBuilder, jobDefs: Int) = builder.addOffset(16, jobDefs, 0)
        fun createJobDefsVector(builder: FlatBufferBuilder, data: IntArray) : Int {
            builder.startVector(4, data.size, 4)
            for (i in data.size - 1 downTo 0) {
                builder.addOffset(data[i])
            }
            return builder.endVector()
        }
        fun startJobDefsVector(builder: FlatBufferBuilder, numElems: Int) = builder.startVector(4, numElems, 4)
        fun addFreeTexts(builder: FlatBufferBuilder, freeTexts: Int) = builder.addOffset(17, freeTexts, 0)
        fun createFreeTextsVector(builder: FlatBufferBuilder, data: IntArray) : Int {
            builder.startVector(4, data.size, 4)
            for (i in data.size - 1 downTo 0) {
                builder.addOffset(data[i])
            }
            return builder.endVector()
        }
        fun startFreeTextsVector(builder: FlatBufferBuilder, numElems: Int) = builder.startVector(4, numElems, 4)
        fun addPlatformLocs(builder: FlatBufferBuilder, platformLocs: Int) = builder.addOffset(18, platformLocs, 0)
        fun createPlatformLocsVector(builder: FlatBufferBuilder, data: IntArray) : Int {
            builder.startVector(4, data.size, 4)
            for (i in data.size - 1 downTo 0) {
                builder.addOffset(data[i])
            }
            return builder.endVector()
        }
        fun startPlatformLocsVector(builder: FlatBufferBuilder, numElems: Int) = builder.startVector(4, numElems, 4)
        fun addJobRequests(builder: FlatBufferBuilder, jobRequests: Int) = builder.addOffset(19, jobRequests, 0)
        fun createJobRequestsVector(builder: FlatBufferBuilder, data: IntArray) : Int {
            builder.startVector(4, data.size, 4)
            for (i in data.size - 1 downTo 0) {
                builder.addOffset(data[i])
            }
            return builder.endVector()
        }
        fun startJobRequestsVector(builder: FlatBufferBuilder, numElems: Int) = builder.startVector(4, numElems, 4)
        fun addOrigNetwork(builder: FlatBufferBuilder, origNetwork: Int) = builder.addOffset(20, origNetwork, 0)
        fun endMti_Full(builder: FlatBufferBuilder) : Int {
            val o = builder.endTable()
            return o
        }
        fun finishMtiFullBuffer(builder: FlatBufferBuilder, offset: Int) = builder.finish(offset, "MTIF")
        fun finishSizePrefixedMti_FullBuffer(builder: FlatBufferBuilder, offset: Int) = builder.finishSizePrefixed(offset, "MTIF")
    }
}
