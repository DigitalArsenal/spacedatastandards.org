// automatically generated by the FlatBuffers compiler, do not modify

import com.google.flatbuffers.BaseVector
import com.google.flatbuffers.BooleanVector
import com.google.flatbuffers.ByteVector
import com.google.flatbuffers.Constants
import com.google.flatbuffers.DoubleVector
import com.google.flatbuffers.FlatBufferBuilder
import com.google.flatbuffers.FloatVector
import com.google.flatbuffers.LongVector
import com.google.flatbuffers.StringVector
import com.google.flatbuffers.Struct
import com.google.flatbuffers.Table
import com.google.flatbuffers.UnionVector
import java.nio.ByteBuffer
import java.nio.ByteOrder
import kotlin.math.sign

/**
 * /// A response for various effects on a target.
 */
@Suppress("unused")
class EffectResponse_Ingest : Table() {

    fun __init(_i: Int, _bb: ByteBuffer)  {
        __reset(_i, _bb)
    }
    fun __assign(_i: Int, _bb: ByteBuffer) : EffectResponse_Ingest {
        __init(_i, _bb)
        return this
    }
    /**
     * Unique identifier of the record, auto-generated by the system.
     * Example: /// Example: EFFECTRESPONSE-ID
     * Constraints: Minimum length = 1, Maximum length = 36
     */
    val id : String?
        get() {
            val o = __offset(4)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val idAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(4, 1)
    fun idInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 4, 1)
    /**
     * Classification marking of the data in IC/CAPCO Portion-marked format.
     * Example: /// Example: U
     * Constraints: Minimum length = 1, Maximum length = 128
     */
    val classificationMarking : String?
        get() {
            val o = __offset(6)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val classificationMarkingAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(6, 1)
    fun classificationMarkingInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 6, 1)
    /**
     * Unique identifier of the EffectRequest associated with this response.
     * Example: /// Example: EFFECTREQUEST-ID
     * Constraints: Minimum length = 0, Maximum length = 36
     */
    val idEffectRequest : String?
        get() {
            val o = __offset(8)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val idEffectRequestAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(8, 1)
    fun idEffectRequestInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 8, 1)
    /**
     * The external system identifier of the associated effect request. A human readable unique id.
     * Example: /// Example: EXTERNALREQUEST-ID
     * Constraints: Minimum length = 0, Maximum length = 64
     */
    val externalRequestId : String?
        get() {
            val o = __offset(10)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val externalRequestIdAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(10, 1)
    fun externalRequestIdInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 10, 1)
    /**
     * The type of response in this record (e.g. COA, SCORECARD, etc.).
     * Example: /// Example: COA
     * Constraints: Minimum length = 1, Maximum length = 24
     */
    val type : String?
        get() {
            val o = __offset(12)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val typeAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(12, 1)
    fun typeInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 12, 1)
    /**
     * The source type of the asset/actor identifier (AIRCRAFT, LANDCRAFT, SEACRAFT, TRACK).
     * Example: /// Example: AIRCRAFT
     * Constraints: Minimum length = 0, Maximum length = 64
     */
    val actorSrcType : String?
        get() {
            val o = __offset(14)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val actorSrcTypeAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(14, 1)
    fun actorSrcTypeInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 14, 1)
    /**
     * The record ID, depending on the type identified in actorSrcType, of the requested asset.
     * Example: /// Example: RC-ID
     * Constraints: Minimum length = 0, Maximum length = 64
     */
    val actorSrcId : String?
        get() {
            val o = __offset(16)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val actorSrcIdAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(16, 1)
    fun actorSrcIdInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 16, 1)
    /**
     * The type of munition being fired.
     * Example: /// Example: Dummy
     * Constraints: Minimum length = 0, Maximum length = 1024
     */
    val munitionType : String?
        get() {
            val o = __offset(18)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val munitionTypeAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(18, 1)
    fun munitionTypeInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 18, 1)
    /**
     * Unique identifier of the munition.
     * Example: /// Example: MUNITION-ID
     * Constraints: Minimum length = 0, Maximum length = 64
     */
    val munitionId : String?
        get() {
            val o = __offset(20)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val munitionIdAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(20, 1)
    fun munitionIdInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 20, 1)
    /**
     * The number of shots required to destroy target.
     * Example: /// Example: 10
     * Constraints: No constraints specified.
     */
    val shotsRequired : Int
        get() {
            val o = __offset(22)
            return if(o != 0) bb.getInt(o + bb_pos) else 0
        }
    /**
     * The probability of kill (0-1) of the target being destroyed.
     * Example: /// Example: 0.7
     * Constraints: No constraints specified.
     */
    val probabilityOfKill : Double
        get() {
            val o = __offset(24)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * The collateral damage estimate (CDE) of the munition being fired.
     * Example: /// Example: 0.5
     * Constraints: No constraints specified.
     */
    val collateralDamageEst : Double
        get() {
            val o = __offset(26)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * List of actions associated with this effect response.
     * Example: /// Example: No example provided.
     * Constraints: No constraints specified.
     */
    fun actionsList(j: Int) : String? {
        val o = __offset(28)
        return if (o != 0) {
            __string(__vector(o) + j * 4)
        } else {
            null
        }
    }
    val actionsListLength : Int
        get() {
            val o = __offset(28); return if (o != 0) __vector_len(o) else 0
        }
    /**
     * List of external actions to be executed as part of this task.
     * Example: /// Example: ['ACTION1', 'ACTION2']
     * Constraints: No constraints specified.
     */
    fun externalActions(j: Int) : String? {
        val o = __offset(30)
        return if (o != 0) {
            __string(__vector(o) + j * 4)
        } else {
            null
        }
    }
    val externalActionsLength : Int
        get() {
            val o = __offset(30); return if (o != 0) __vector_len(o) else 0
        }
    /**
     * List of COA metrics associated with this effect response.
     * Example: /// Example: No example provided.
     * Constraints: No constraints specified.
     */
    fun coaMetrics(j: Int) : String? {
        val o = __offset(32)
        return if (o != 0) {
            __string(__vector(o) + j * 4)
        } else {
            null
        }
    }
    val coaMetricsLength : Int
        get() {
            val o = __offset(32); return if (o != 0) __vector_len(o) else 0
        }
    /**
     * The time to overhead for the red force to be over their target, in ISO8601 UTC format.
     * Example: /// Example: 2021-01-01T00:00:00.123456Z
     * Constraints: No constraints specified.
     */
    val redTimeToOverhead : String?
        get() {
            val o = __offset(34)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val redTimeToOverheadAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(34, 1)
    fun redTimeToOverheadInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 34, 1)
    /**
     * The deadline time to accept this COA before it's no longer valid, in ISO8601 UTC format.
     * Example: /// Example: 2021-01-01T00:00:00.123456Z
     * Constraints: No constraints specified.
     */
    val decisionDeadline : String?
        get() {
            val o = __offset(36)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val decisionDeadlineAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(36, 1)
    fun decisionDeadlineInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 36, 1)
    /**
     * The source type of the targetId identifier (POI, SITE, TRACK).
     * Example: /// Example: POI
     * Constraints: Minimum length = 0, Maximum length = 64
     */
    val redTargetSrcType : String?
        get() {
            val o = __offset(38)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val redTargetSrcTypeAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(38, 1)
    fun redTargetSrcTypeInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 38, 1)
    /**
     * The record ID, depending on the type identified in redTargetSrcType, of the red force target.  If the redTargetSrcType is POI or TRACK, then this identifier corresponds to either poi.poiid or track.trkId from their respective schemas.
     * Example: /// Example: REDTARGETSRC-ID
     * Constraints: Minimum length = 0, Maximum length = 64
     */
    val redTargetSrcId : String?
        get() {
            val o = __offset(40)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val redTargetSrcIdAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(40, 1)
    fun redTargetSrcIdInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 40, 1)
    /**
     * Time the row was created in the database, auto-populated by the system.
     * Example: /// Example: 2021-01-01T16:00:00.123Z
     * Constraints: No constraints specified.
     */
    val createdAt : String?
        get() {
            val o = __offset(42)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val createdAtAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(42, 1)
    fun createdAtInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 42, 1)
    /**
     * Application user who created the row in the database, auto-populated by the system.
     * Example: /// Example: some.user
     * Constraints: Minimum length = 1, Maximum length = 64
     */
    val createdBy : String?
        get() {
            val o = __offset(44)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val createdByAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(44, 1)
    fun createdByInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 44, 1)
    /**
     * Source of the data.
     * Example: /// Example: Bluestaq
     * Constraints: Minimum length = 1, Maximum length = 64
     */
    val source : String?
        get() {
            val o = __offset(46)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val sourceAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(46, 1)
    fun sourceInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 46, 1)
    /**
     * Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
     * Example: /// Example: THIRD_PARTY_DATASOURCE
     * Constraints: Minimum length = 0, Maximum length = 64
     */
    val origin : String?
        get() {
            val o = __offset(48)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val originAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(48, 1)
    fun originInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 48, 1)
    /**
     * Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
     * EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
     * REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
     * SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
     * TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
     * Example: /// Example: TEST
     * Constraints: Minimum length = 1, Maximum length = 32
     */
    val dataMode : Byte
        get() {
            val o = __offset(50)
            return if(o != 0) bb.get(o + bb_pos) else 0
        }
    /**
     * The originating source network on which this record was created, auto-populated by the system.
     * Example: /// Example: ORIG
     * Constraints: Minimum length = 1, Maximum length = 32
     */
    val origNetwork : String?
        get() {
            val o = __offset(52)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val origNetworkAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(52, 1)
    fun origNetworkInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 52, 1)
    companion object {
        fun validateVersion() = Constants.FLATBUFFERS_24_3_25()
        fun getRootAsEffectResponse_Ingest(_bb: ByteBuffer): EffectResponse_Ingest = getRootAsEffectResponse_Ingest(_bb, EffectResponse_Ingest())
        fun getRootAsEffectResponse_Ingest(_bb: ByteBuffer, obj: EffectResponse_Ingest): EffectResponse_Ingest {
            _bb.order(ByteOrder.LITTLE_ENDIAN)
            return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb))
        }
        fun EffectResponse_IngestBufferHasIdentifier(_bb: ByteBuffer) : Boolean = __has_identifier(_bb, "EFFE")
        fun createEffectResponse_Ingest(builder: FlatBufferBuilder, idOffset: Int, classificationMarkingOffset: Int, idEffectRequestOffset: Int, externalRequestIdOffset: Int, typeOffset: Int, actorSrcTypeOffset: Int, actorSrcIdOffset: Int, munitionTypeOffset: Int, munitionIdOffset: Int, shotsRequired: Int, probabilityOfKill: Double, collateralDamageEst: Double, actionsListOffset: Int, externalActionsOffset: Int, coaMetricsOffset: Int, redTimeToOverheadOffset: Int, decisionDeadlineOffset: Int, redTargetSrcTypeOffset: Int, redTargetSrcIdOffset: Int, createdAtOffset: Int, createdByOffset: Int, sourceOffset: Int, originOffset: Int, dataMode: Byte, origNetworkOffset: Int) : Int {
            builder.startTable(25)
            addCollateralDamageEst(builder, collateralDamageEst)
            addProbabilityOfKill(builder, probabilityOfKill)
            addOrigNetwork(builder, origNetworkOffset)
            addOrigin(builder, originOffset)
            addSource(builder, sourceOffset)
            addCreatedBy(builder, createdByOffset)
            addCreatedAt(builder, createdAtOffset)
            addRedTargetSrcId(builder, redTargetSrcIdOffset)
            addRedTargetSrcType(builder, redTargetSrcTypeOffset)
            addDecisionDeadline(builder, decisionDeadlineOffset)
            addRedTimeToOverhead(builder, redTimeToOverheadOffset)
            addCoaMetrics(builder, coaMetricsOffset)
            addExternalActions(builder, externalActionsOffset)
            addActionsList(builder, actionsListOffset)
            addShotsRequired(builder, shotsRequired)
            addMunitionId(builder, munitionIdOffset)
            addMunitionType(builder, munitionTypeOffset)
            addActorSrcId(builder, actorSrcIdOffset)
            addActorSrcType(builder, actorSrcTypeOffset)
            addType(builder, typeOffset)
            addExternalRequestId(builder, externalRequestIdOffset)
            addIdEffectRequest(builder, idEffectRequestOffset)
            addClassificationMarking(builder, classificationMarkingOffset)
            addId(builder, idOffset)
            addDataMode(builder, dataMode)
            return endEffectResponse_Ingest(builder)
        }
        fun startEffectResponse_Ingest(builder: FlatBufferBuilder) = builder.startTable(25)
        fun addId(builder: FlatBufferBuilder, id: Int) = builder.addOffset(0, id, 0)
        fun addClassificationMarking(builder: FlatBufferBuilder, classificationMarking: Int) = builder.addOffset(1, classificationMarking, 0)
        fun addIdEffectRequest(builder: FlatBufferBuilder, idEffectRequest: Int) = builder.addOffset(2, idEffectRequest, 0)
        fun addExternalRequestId(builder: FlatBufferBuilder, externalRequestId: Int) = builder.addOffset(3, externalRequestId, 0)
        fun addType(builder: FlatBufferBuilder, type: Int) = builder.addOffset(4, type, 0)
        fun addActorSrcType(builder: FlatBufferBuilder, actorSrcType: Int) = builder.addOffset(5, actorSrcType, 0)
        fun addActorSrcId(builder: FlatBufferBuilder, actorSrcId: Int) = builder.addOffset(6, actorSrcId, 0)
        fun addMunitionType(builder: FlatBufferBuilder, munitionType: Int) = builder.addOffset(7, munitionType, 0)
        fun addMunitionId(builder: FlatBufferBuilder, munitionId: Int) = builder.addOffset(8, munitionId, 0)
        fun addShotsRequired(builder: FlatBufferBuilder, shotsRequired: Int) = builder.addInt(9, shotsRequired, 0)
        fun addProbabilityOfKill(builder: FlatBufferBuilder, probabilityOfKill: Double) = builder.addDouble(10, probabilityOfKill, 0.0)
        fun addCollateralDamageEst(builder: FlatBufferBuilder, collateralDamageEst: Double) = builder.addDouble(11, collateralDamageEst, 0.0)
        fun addActionsList(builder: FlatBufferBuilder, actionsList: Int) = builder.addOffset(12, actionsList, 0)
        fun createActionsListVector(builder: FlatBufferBuilder, data: IntArray) : Int {
            builder.startVector(4, data.size, 4)
            for (i in data.size - 1 downTo 0) {
                builder.addOffset(data[i])
            }
            return builder.endVector()
        }
        fun startActionsListVector(builder: FlatBufferBuilder, numElems: Int) = builder.startVector(4, numElems, 4)
        fun addExternalActions(builder: FlatBufferBuilder, externalActions: Int) = builder.addOffset(13, externalActions, 0)
        fun createExternalActionsVector(builder: FlatBufferBuilder, data: IntArray) : Int {
            builder.startVector(4, data.size, 4)
            for (i in data.size - 1 downTo 0) {
                builder.addOffset(data[i])
            }
            return builder.endVector()
        }
        fun startExternalActionsVector(builder: FlatBufferBuilder, numElems: Int) = builder.startVector(4, numElems, 4)
        fun addCoaMetrics(builder: FlatBufferBuilder, coaMetrics: Int) = builder.addOffset(14, coaMetrics, 0)
        fun createCoaMetricsVector(builder: FlatBufferBuilder, data: IntArray) : Int {
            builder.startVector(4, data.size, 4)
            for (i in data.size - 1 downTo 0) {
                builder.addOffset(data[i])
            }
            return builder.endVector()
        }
        fun startCoaMetricsVector(builder: FlatBufferBuilder, numElems: Int) = builder.startVector(4, numElems, 4)
        fun addRedTimeToOverhead(builder: FlatBufferBuilder, redTimeToOverhead: Int) = builder.addOffset(15, redTimeToOverhead, 0)
        fun addDecisionDeadline(builder: FlatBufferBuilder, decisionDeadline: Int) = builder.addOffset(16, decisionDeadline, 0)
        fun addRedTargetSrcType(builder: FlatBufferBuilder, redTargetSrcType: Int) = builder.addOffset(17, redTargetSrcType, 0)
        fun addRedTargetSrcId(builder: FlatBufferBuilder, redTargetSrcId: Int) = builder.addOffset(18, redTargetSrcId, 0)
        fun addCreatedAt(builder: FlatBufferBuilder, createdAt: Int) = builder.addOffset(19, createdAt, 0)
        fun addCreatedBy(builder: FlatBufferBuilder, createdBy: Int) = builder.addOffset(20, createdBy, 0)
        fun addSource(builder: FlatBufferBuilder, source: Int) = builder.addOffset(21, source, 0)
        fun addOrigin(builder: FlatBufferBuilder, origin: Int) = builder.addOffset(22, origin, 0)
        fun addDataMode(builder: FlatBufferBuilder, dataMode: Byte) = builder.addByte(23, dataMode, 0)
        fun addOrigNetwork(builder: FlatBufferBuilder, origNetwork: Int) = builder.addOffset(24, origNetwork, 0)
        fun endEffectResponse_Ingest(builder: FlatBufferBuilder) : Int {
            val o = builder.endTable()
            return o
        }
        fun finishEffectResponseIngestBuffer(builder: FlatBufferBuilder, offset: Int) = builder.finish(offset, "EFFE")
        fun finishSizePrefixedEffectResponse_IngestBuffer(builder: FlatBufferBuilder, offset: Int) = builder.finishSizePrefixed(offset, "EFFE")
    }
}
