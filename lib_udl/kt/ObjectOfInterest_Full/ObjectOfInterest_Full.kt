// automatically generated by the FlatBuffers compiler, do not modify

import com.google.flatbuffers.BaseVector
import com.google.flatbuffers.BooleanVector
import com.google.flatbuffers.ByteVector
import com.google.flatbuffers.Constants
import com.google.flatbuffers.DoubleVector
import com.google.flatbuffers.FlatBufferBuilder
import com.google.flatbuffers.FloatVector
import com.google.flatbuffers.LongVector
import com.google.flatbuffers.StringVector
import com.google.flatbuffers.Struct
import com.google.flatbuffers.Table
import com.google.flatbuffers.UnionVector
import java.nio.ByteBuffer
import java.nio.ByteOrder
import kotlin.math.sign

/**
 * /// OnOrbit objects of interest, which include information about the last known state of the object.
 */
@Suppress("unused")
class ObjectOfInterest_Full : Table() {

    fun __init(_i: Int, _bb: ByteBuffer)  {
        __reset(_i, _bb)
    }
    fun __assign(_i: Int, _bb: ByteBuffer) : ObjectOfInterest_Full {
        __init(_i, _bb)
        return this
    }
    /**
     * Unique identifier of the record, auto-generated by the system.
     * Example: /// Example: OBJECTOFINTEREST-ID
     * Constraints: Minimum length = 1, Maximum length = 36
     */
    val id : String?
        get() {
            val o = __offset(4)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val idAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(4, 1)
    fun idInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 4, 1)
    /**
     * Classification marking of the data in IC/CAPCO Portion-marked format.
     * Example: /// Example: U
     * Constraints: Minimum length = 1, Maximum length = 128
     */
    val classificationMarking : String?
        get() {
            val o = __offset(6)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val classificationMarkingAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(6, 1)
    fun classificationMarkingInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 6, 1)
    /**
     * UUID of the parent Onorbit record.
     * Example: /// Example: REF-ONORBIT-ID
     * Constraints: Minimum length = 1, Maximum length = 36
     */
    val idOnOrbit : String?
        get() {
            val o = __offset(8)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val idOnOrbitAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(8, 1)
    fun idOnOrbitInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 8, 1)
    /**
     * Satellite/Catalog number of the target on-orbit object.
     * Example: /// Example: 12
     * Constraints: No constraints specified.
     */
    val satNo : Int
        get() {
            val o = __offset(10)
            return if(o != 0) bb.getInt(o + bb_pos) else 0
        }
    /**
     * Unique name of the object of interest event.
     * Example: /// Example: Example_name
     * Constraints: Minimum length = 0, Maximum length = 128
     */
    val name : String?
        get() {
            val o = __offset(12)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val nameAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(12, 1)
    fun nameInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 12, 1)
    /**
     * Sensor tasking start time for object of interest.
     * Example: /// Example: 2021-01-01T01:01:01.123Z
     * Constraints: No constraints specified.
     */
    val sensorTaskingStartTime : String?
        get() {
            val o = __offset(14)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val sensorTaskingStartTimeAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(14, 1)
    fun sensorTaskingStartTimeInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 14, 1)
    /**
     * Sensor tasking stop time for object of interest.
     * Example: /// Example: 2021-01-01T01:01:01.123Z
     * Constraints: No constraints specified.
     */
    val sensorTaskingStopTime : String?
        get() {
            val o = __offset(16)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val sensorTaskingStopTimeAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(16, 1)
    fun sensorTaskingStopTimeInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 16, 1)
    /**
     * Priority of the object of interest as an integer (1=highest priority).
     * Example: /// Example: 7
     * Constraints: No constraints specified.
     */
    val priority : Int
        get() {
            val o = __offset(18)
            return if(o != 0) bb.getInt(o + bb_pos) else 0
        }
    /**
     * Status of the object of interest event (e.g. OPEN, CLOSED, CANCELLED).
     * Example: /// Example: OPEN
     * Constraints: Minimum length = 0, Maximum length = 16
     */
    val status : String?
        get() {
            val o = __offset(20)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val statusAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(20, 1)
    fun statusInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 20, 1)
    /**
     * Time of last status change of the object of interest event.
     * Example: /// Example: 2021-01-01T01:01:01.123Z
     * Constraints: No constraints specified.
     */
    val statusDate : String?
        get() {
            val o = __offset(22)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val statusDateAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(22, 1)
    fun statusDateInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 22, 1)
    /**
     * Description of the object of interest event.
     * Example: /// Example: Example description
     * Constraints: Minimum length = 0, Maximum length = 256
     */
    val description : String?
        get() {
            val o = __offset(24)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val descriptionAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(24, 1)
    fun descriptionInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 24, 1)
    /**
     * Last reported observation time in ISO 8601 UTC time, with microsecond precision.
     * Example: /// Example: 2021-01-01T01:01:01.123456Z
     * Constraints: No constraints specified.
     */
    val lastObTime : String?
        get() {
            val o = __offset(26)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val lastObTimeAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(26, 1)
    fun lastObTimeInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 26, 1)
    /**
     * The time at which an attempted observation of the object of interest noticed it was missing, in ISO 8601 UTC time, with microsecond precision.
     * Example: /// Example: 2021-01-01T01:01:01.123456Z
     * Constraints: No constraints specified.
     */
    val missedObTime : String?
        get() {
            val o = __offset(28)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val missedObTimeAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(28, 1)
    fun missedObTimeInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 28, 1)
    /**
     * Possible delta V applications for the object of interest, in km/sec.
     * Example: /// Example: [1.1, 2.2, 3.3]
     * Constraints: No constraints specified.
     */
    fun deltaVs(j: Int) : String? {
        val o = __offset(30)
        return if (o != 0) {
            __string(__vector(o) + j * 4)
        } else {
            null
        }
    }
    val deltaVsLength : Int
        get() {
            val o = __offset(30); return if (o != 0) __vector_len(o) else 0
        }
    /**
     * Possible delta time applications for the object of interest, in seconds.
     * Example: /// Example: [1.1, 2.2, 3.3]
     * Constraints: No constraints specified.
     */
    fun deltaTs(j: Int) : String? {
        val o = __offset(32)
        return if (o != 0) {
            __string(__vector(o) + j * 4)
        } else {
            null
        }
    }
    val deltaTsLength : Int
        get() {
            val o = __offset(32); return if (o != 0) __vector_len(o) else 0
        }
    /**
     * Last reported state vector epoch time in ISO 8601 UTC time, with microsecond precision.
     * Example: /// Example: 2021-01-01T01:01:01.123456Z
     * Constraints: No constraints specified.
     */
    val svEpoch : String?
        get() {
            val o = __offset(34)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val svEpochAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(34, 1)
    fun svEpochInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 34, 1)
    /**
     * Last reported x position of the object in km, in J2000 coordinates.
     * Example: /// Example: 123.4
     * Constraints: No constraints specified.
     */
    val x : Double
        get() {
            val o = __offset(36)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Last reported y position of the object in km, in J2000 coordinates.
     * Example: /// Example: 123.4
     * Constraints: No constraints specified.
     */
    val y : Double
        get() {
            val o = __offset(38)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Last reported z position of the object in km, in J2000 coordinates.
     * Example: /// Example: 123.4
     * Constraints: No constraints specified.
     */
    val z : Double
        get() {
            val o = __offset(40)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Last reported x velocity of the object in km/sec, in J2000 coordinates.
     * Example: /// Example: 123.4
     * Constraints: No constraints specified.
     */
    val xvel : Double
        get() {
            val o = __offset(42)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Last reported y velocity of the object in km/sec, in J2000 coordinates.
     * Example: /// Example: 123.4
     * Constraints: No constraints specified.
     */
    val yvel : Double
        get() {
            val o = __offset(44)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Last reported z velocity of the object in km/sec, in J2000 coordinates.
     * Example: /// Example: 123.4
     * Constraints: No constraints specified.
     */
    val zvel : Double
        get() {
            val o = __offset(46)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Last reported elset epoch time in ISO 8601 UTC time, with microsecond precision.
     * Example: /// Example: 2021-01-01T01:01:01.123456Z
     * Constraints: No constraints specified.
     */
    val elsetEpoch : String?
        get() {
            val o = __offset(48)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val elsetEpochAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(48, 1)
    fun elsetEpochInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 48, 1)
    /**
     * Last reported mean motion of the object. Mean motion is the angular speed required for a body to complete one orbit, assuming constant speed in a circular orbit which completes in the same time as the variable speed, elliptical orbit of the actual body. Measured in revolutions per day.
     * Example: /// Example: 123.4
     * Constraints: No constraints specified.
     */
    val meanMotion : Double
        get() {
            val o = __offset(50)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Last reported eccentricity of the object. The orbital eccentricity of an astronomical object is a parameter that determines the amount by which its orbit around another body deviates from a perfect circle. A value of 0 is a circular orbit, values between 0 and 1 form an elliptic orbit, 1 is a parabolic escape orbit, and greater than 1 is a hyperbolic escape orbit.
     * Example: /// Example: 123.4
     * Constraints: No constraints specified.
     */
    val eccentricity : Double
        get() {
            val o = __offset(52)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Last reported inclination of the object. Inclination is the angle between the equator and the orbit when looking from the center of the Earth. If the orbit went exactly around the equator from left to right, then the inclination would be 0. The inclination ranges from 0 to 180 degrees.
     * Example: /// Example: 123.4
     * Constraints: No constraints specified.
     */
    val inclination : Double
        get() {
            val o = __offset(54)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Last reported raan.  Right ascension of the ascending node, or RAAN is the angle as measured in degrees eastwards (or, as seen from the north, counterclockwise) from the First Point of Aries to the ascending node, which is where the orbit crosses the equator when traveling north.
     * Example: /// Example: 123.4
     * Constraints: No constraints specified.
     */
    val raan : Double
        get() {
            val o = __offset(56)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Last reported argument of perigee. The argument of perigee is the angle in degrees formed between the perigee and the ascending node. If the perigee would occur at the ascending node, the argument of perigee would be 0.
     * Example: /// Example: 123.4
     * Constraints: No constraints specified.
     */
    val argOfPerigee : Double
        get() {
            val o = __offset(58)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Last reported meanAnomaly. Mean anomoly is where the satellite is in its orbital path. The mean anomaly ranges from 0 to 360 degrees. The mean anomaly is referenced to the perigee. If the satellite were at the perigee, the mean anomaly would be 0.
     * Example: /// Example: 123.4
     * Constraints: No constraints specified.
     */
    val meanAnomaly : Double
        get() {
            val o = __offset(60)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * The last reported revolution number. The value is incremented when a satellite crosses the equator on an ascending pass.
     * Example: /// Example: 123
     * Constraints: No constraints specified.
     */
    val revNo : Int
        get() {
            val o = __offset(62)
            return if(o != 0) bb.getInt(o + bb_pos) else 0
        }
    /**
     * Last reported drag term for SGP4 orbital model, used for calculating decay constants for altitude, eccentricity etc, measured in inverse earth radii.
     * Example: /// Example: 123.4
     * Constraints: No constraints specified.
     */
    val bStar : Double
        get() {
            val o = __offset(64)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Last reported 1st derivative of the mean motion with respect to time. Units are revolutions per day squared.
     * Example: /// Example: 123.4
     * Constraints: No constraints specified.
     */
    val meanMotionDot : Double
        get() {
            val o = __offset(66)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Last reported 2nd derivative of the mean motion with respect to time. Units are revolutions per day cubed.
     * Example: /// Example: 123.4
     * Constraints: No constraints specified.
     */
    val meanMotionDdot : Double
        get() {
            val o = __offset(68)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Last reported semi major axis, which is the sum of the periapsis and apoapsis distances divided by two. For circular orbits, the semimajor axis is the distance between the centers of the bodies, not the distance of the bodies from the center of mass.
     * Example: /// Example: 123.4
     * Constraints: No constraints specified.
     */
    val semiMajorAxis : Double
        get() {
            val o = __offset(70)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Last reported orbit period. Period of the orbit is equal to inverse of mean motion.
     * Example: /// Example: 123.4
     * Constraints: No constraints specified.
     */
    val period : Double
        get() {
            val o = __offset(72)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Last reported apogee. The Orbit point furthest from the center of the earth in kilometers.
     * Example: /// Example: 123.4
     * Constraints: No constraints specified.
     */
    val apogee : Double
        get() {
            val o = __offset(74)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Last reported perigee. The orbit point nearest to the center of the earth in kilometers.
     * Example: /// Example: 123.4
     * Constraints: No constraints specified.
     */
    val perigee : Double
        get() {
            val o = __offset(76)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Optional array of Onorbit IDs (idOnOrbit) representing satellites potentially affected by this object of interest.
     * Example: /// Example: ['AFFECTEDOBJECT1-ID', 'AFFECTEDOBJECT2-ID']
     * Constraints: No constraints specified.
     */
    fun affectedObjects(j: Int) : String? {
        val o = __offset(78)
        return if (o != 0) {
            __string(__vector(o) + j * 4)
        } else {
            null
        }
    }
    val affectedObjectsLength : Int
        get() {
            val o = __offset(78); return if (o != 0) __vector_len(o) else 0
        }
    /**
     * Time the row was created in the database, auto-populated by the system.
     * Example: /// Example: 2018-01-01T16:00:00.123Z
     * Constraints: No constraints specified.
     */
    val createdAt : String?
        get() {
            val o = __offset(80)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val createdAtAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(80, 1)
    fun createdAtInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 80, 1)
    /**
     * Application user who created the row in the database, auto-populated by the system.
     * Example: /// Example: some.user
     * Constraints: Minimum length = 1, Maximum length = 64
     */
    val createdBy : String?
        get() {
            val o = __offset(82)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val createdByAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(82, 1)
    fun createdByInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 82, 1)
    /**
     * Time the row was last updated in the database, auto-populated by the system.
     * Example: /// Example: 2018-01-01T16:00:00.123Z
     * Constraints: No constraints specified.
     */
    val updatedAt : String?
        get() {
            val o = __offset(84)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val updatedAtAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(84, 1)
    fun updatedAtInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 84, 1)
    /**
     * Application user who updated the row in the database, auto-populated by the system.
     * Example: /// Example: some.user
     * Constraints: Minimum length = 0, Maximum length = 64
     */
    val updatedBy : String?
        get() {
            val o = __offset(86)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val updatedByAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(86, 1)
    fun updatedByInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 86, 1)
    /**
     * Source of the data.
     * Example: /// Example: Bluestaq
     * Constraints: Minimum length = 1, Maximum length = 64
     */
    val source : String?
        get() {
            val o = __offset(88)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val sourceAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(88, 1)
    fun sourceInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 88, 1)
    /**
     * Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
     * Example: /// Example: THIRD_PARTY_DATASOURCE
     * Constraints: Minimum length = 0, Maximum length = 64
     */
    val origin : String?
        get() {
            val o = __offset(90)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val originAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(90, 1)
    fun originInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 90, 1)
    /**
     * The originating source network on which this record was created, auto-populated by the system.
     * Example: /// Example: ORIG
     * Constraints: Minimum length = 1, Maximum length = 32
     */
    val origNetwork : String?
        get() {
            val o = __offset(92)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val origNetworkAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(92, 1)
    fun origNetworkInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 92, 1)
    /**
     * Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
     * EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
     * REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
     * SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
     * TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
     * Example: /// Example: TEST
     * Constraints: Minimum length = 1, Maximum length = 32
     */
    val dataMode : Byte
        get() {
            val o = __offset(94)
            return if(o != 0) bb.get(o + bb_pos) else 0
        }
    /**
     * No description provided.
     * Example: /// Example: No example provided.
     * Constraints: No constraints specified.
     */
    val onOrbit : String?
        get() {
            val o = __offset(96)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val onOrbitAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(96, 1)
    fun onOrbitInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 96, 1)
    /**
     * Manifolds associated with this object of interest.
     * Example: /// Example: No example provided.
     * Constraints: No constraints specified.
     */
    fun manifolds(j: Int) : String? {
        val o = __offset(98)
        return if (o != 0) {
            __string(__vector(o) + j * 4)
        } else {
            null
        }
    }
    val manifoldsLength : Int
        get() {
            val o = __offset(98); return if (o != 0) __vector_len(o) else 0
        }
    companion object {
        fun validateVersion() = Constants.FLATBUFFERS_24_3_25()
        fun getRootAsObjectOfInterest_Full(_bb: ByteBuffer): ObjectOfInterest_Full = getRootAsObjectOfInterest_Full(_bb, ObjectOfInterest_Full())
        fun getRootAsObjectOfInterest_Full(_bb: ByteBuffer, obj: ObjectOfInterest_Full): ObjectOfInterest_Full {
            _bb.order(ByteOrder.LITTLE_ENDIAN)
            return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb))
        }
        fun ObjectOfInterest_FullBufferHasIdentifier(_bb: ByteBuffer) : Boolean = __has_identifier(_bb, "OBJE")
        fun createObjectOfInterest_Full(builder: FlatBufferBuilder, idOffset: Int, classificationMarkingOffset: Int, idOnOrbitOffset: Int, satNo: Int, nameOffset: Int, sensorTaskingStartTimeOffset: Int, sensorTaskingStopTimeOffset: Int, priority: Int, statusOffset: Int, statusDateOffset: Int, descriptionOffset: Int, lastObTimeOffset: Int, missedObTimeOffset: Int, deltaVsOffset: Int, deltaTsOffset: Int, svEpochOffset: Int, x: Double, y: Double, z: Double, xvel: Double, yvel: Double, zvel: Double, elsetEpochOffset: Int, meanMotion: Double, eccentricity: Double, inclination: Double, raan: Double, argOfPerigee: Double, meanAnomaly: Double, revNo: Int, bStar: Double, meanMotionDot: Double, meanMotionDdot: Double, semiMajorAxis: Double, period: Double, apogee: Double, perigee: Double, affectedObjectsOffset: Int, createdAtOffset: Int, createdByOffset: Int, updatedAtOffset: Int, updatedByOffset: Int, sourceOffset: Int, originOffset: Int, origNetworkOffset: Int, dataMode: Byte, onOrbitOffset: Int, manifoldsOffset: Int) : Int {
            builder.startTable(48)
            addPerigee(builder, perigee)
            addApogee(builder, apogee)
            addPeriod(builder, period)
            addSemiMajorAxis(builder, semiMajorAxis)
            addMeanMotionDDot(builder, meanMotionDdot)
            addMeanMotionDot(builder, meanMotionDot)
            addBStar(builder, bStar)
            addMeanAnomaly(builder, meanAnomaly)
            addArgOfPerigee(builder, argOfPerigee)
            addRaan(builder, raan)
            addInclination(builder, inclination)
            addEccentricity(builder, eccentricity)
            addMeanMotion(builder, meanMotion)
            addZvel(builder, zvel)
            addYvel(builder, yvel)
            addXvel(builder, xvel)
            addZ(builder, z)
            addY(builder, y)
            addX(builder, x)
            addManifolds(builder, manifoldsOffset)
            addOnOrbit(builder, onOrbitOffset)
            addOrigNetwork(builder, origNetworkOffset)
            addOrigin(builder, originOffset)
            addSource(builder, sourceOffset)
            addUpdatedBy(builder, updatedByOffset)
            addUpdatedAt(builder, updatedAtOffset)
            addCreatedBy(builder, createdByOffset)
            addCreatedAt(builder, createdAtOffset)
            addAffectedObjects(builder, affectedObjectsOffset)
            addRevNo(builder, revNo)
            addElsetEpoch(builder, elsetEpochOffset)
            addSvEpoch(builder, svEpochOffset)
            addDeltaTs(builder, deltaTsOffset)
            addDeltaVs(builder, deltaVsOffset)
            addMissedObTime(builder, missedObTimeOffset)
            addLastObTime(builder, lastObTimeOffset)
            addDescription(builder, descriptionOffset)
            addStatusDate(builder, statusDateOffset)
            addStatus(builder, statusOffset)
            addPriority(builder, priority)
            addSensorTaskingStopTime(builder, sensorTaskingStopTimeOffset)
            addSensorTaskingStartTime(builder, sensorTaskingStartTimeOffset)
            addName(builder, nameOffset)
            addSatNo(builder, satNo)
            addIdOnOrbit(builder, idOnOrbitOffset)
            addClassificationMarking(builder, classificationMarkingOffset)
            addId(builder, idOffset)
            addDataMode(builder, dataMode)
            return endObjectOfInterest_Full(builder)
        }
        fun startObjectOfInterest_Full(builder: FlatBufferBuilder) = builder.startTable(48)
        fun addId(builder: FlatBufferBuilder, id: Int) = builder.addOffset(0, id, 0)
        fun addClassificationMarking(builder: FlatBufferBuilder, classificationMarking: Int) = builder.addOffset(1, classificationMarking, 0)
        fun addIdOnOrbit(builder: FlatBufferBuilder, idOnOrbit: Int) = builder.addOffset(2, idOnOrbit, 0)
        fun addSatNo(builder: FlatBufferBuilder, satNo: Int) = builder.addInt(3, satNo, 0)
        fun addName(builder: FlatBufferBuilder, name: Int) = builder.addOffset(4, name, 0)
        fun addSensorTaskingStartTime(builder: FlatBufferBuilder, sensorTaskingStartTime: Int) = builder.addOffset(5, sensorTaskingStartTime, 0)
        fun addSensorTaskingStopTime(builder: FlatBufferBuilder, sensorTaskingStopTime: Int) = builder.addOffset(6, sensorTaskingStopTime, 0)
        fun addPriority(builder: FlatBufferBuilder, priority: Int) = builder.addInt(7, priority, 0)
        fun addStatus(builder: FlatBufferBuilder, status: Int) = builder.addOffset(8, status, 0)
        fun addStatusDate(builder: FlatBufferBuilder, statusDate: Int) = builder.addOffset(9, statusDate, 0)
        fun addDescription(builder: FlatBufferBuilder, description: Int) = builder.addOffset(10, description, 0)
        fun addLastObTime(builder: FlatBufferBuilder, lastObTime: Int) = builder.addOffset(11, lastObTime, 0)
        fun addMissedObTime(builder: FlatBufferBuilder, missedObTime: Int) = builder.addOffset(12, missedObTime, 0)
        fun addDeltaVs(builder: FlatBufferBuilder, deltaVs: Int) = builder.addOffset(13, deltaVs, 0)
        fun createDeltaVsVector(builder: FlatBufferBuilder, data: IntArray) : Int {
            builder.startVector(4, data.size, 4)
            for (i in data.size - 1 downTo 0) {
                builder.addOffset(data[i])
            }
            return builder.endVector()
        }
        fun startDeltaVsVector(builder: FlatBufferBuilder, numElems: Int) = builder.startVector(4, numElems, 4)
        fun addDeltaTs(builder: FlatBufferBuilder, deltaTs: Int) = builder.addOffset(14, deltaTs, 0)
        fun createDeltaTsVector(builder: FlatBufferBuilder, data: IntArray) : Int {
            builder.startVector(4, data.size, 4)
            for (i in data.size - 1 downTo 0) {
                builder.addOffset(data[i])
            }
            return builder.endVector()
        }
        fun startDeltaTsVector(builder: FlatBufferBuilder, numElems: Int) = builder.startVector(4, numElems, 4)
        fun addSvEpoch(builder: FlatBufferBuilder, svEpoch: Int) = builder.addOffset(15, svEpoch, 0)
        fun addX(builder: FlatBufferBuilder, x: Double) = builder.addDouble(16, x, 0.0)
        fun addY(builder: FlatBufferBuilder, y: Double) = builder.addDouble(17, y, 0.0)
        fun addZ(builder: FlatBufferBuilder, z: Double) = builder.addDouble(18, z, 0.0)
        fun addXvel(builder: FlatBufferBuilder, xvel: Double) = builder.addDouble(19, xvel, 0.0)
        fun addYvel(builder: FlatBufferBuilder, yvel: Double) = builder.addDouble(20, yvel, 0.0)
        fun addZvel(builder: FlatBufferBuilder, zvel: Double) = builder.addDouble(21, zvel, 0.0)
        fun addElsetEpoch(builder: FlatBufferBuilder, elsetEpoch: Int) = builder.addOffset(22, elsetEpoch, 0)
        fun addMeanMotion(builder: FlatBufferBuilder, meanMotion: Double) = builder.addDouble(23, meanMotion, 0.0)
        fun addEccentricity(builder: FlatBufferBuilder, eccentricity: Double) = builder.addDouble(24, eccentricity, 0.0)
        fun addInclination(builder: FlatBufferBuilder, inclination: Double) = builder.addDouble(25, inclination, 0.0)
        fun addRaan(builder: FlatBufferBuilder, raan: Double) = builder.addDouble(26, raan, 0.0)
        fun addArgOfPerigee(builder: FlatBufferBuilder, argOfPerigee: Double) = builder.addDouble(27, argOfPerigee, 0.0)
        fun addMeanAnomaly(builder: FlatBufferBuilder, meanAnomaly: Double) = builder.addDouble(28, meanAnomaly, 0.0)
        fun addRevNo(builder: FlatBufferBuilder, revNo: Int) = builder.addInt(29, revNo, 0)
        fun addBStar(builder: FlatBufferBuilder, bStar: Double) = builder.addDouble(30, bStar, 0.0)
        fun addMeanMotionDot(builder: FlatBufferBuilder, meanMotionDot: Double) = builder.addDouble(31, meanMotionDot, 0.0)
        fun addMeanMotionDDot(builder: FlatBufferBuilder, meanMotionDdot: Double) = builder.addDouble(32, meanMotionDdot, 0.0)
        fun addSemiMajorAxis(builder: FlatBufferBuilder, semiMajorAxis: Double) = builder.addDouble(33, semiMajorAxis, 0.0)
        fun addPeriod(builder: FlatBufferBuilder, period: Double) = builder.addDouble(34, period, 0.0)
        fun addApogee(builder: FlatBufferBuilder, apogee: Double) = builder.addDouble(35, apogee, 0.0)
        fun addPerigee(builder: FlatBufferBuilder, perigee: Double) = builder.addDouble(36, perigee, 0.0)
        fun addAffectedObjects(builder: FlatBufferBuilder, affectedObjects: Int) = builder.addOffset(37, affectedObjects, 0)
        fun createAffectedObjectsVector(builder: FlatBufferBuilder, data: IntArray) : Int {
            builder.startVector(4, data.size, 4)
            for (i in data.size - 1 downTo 0) {
                builder.addOffset(data[i])
            }
            return builder.endVector()
        }
        fun startAffectedObjectsVector(builder: FlatBufferBuilder, numElems: Int) = builder.startVector(4, numElems, 4)
        fun addCreatedAt(builder: FlatBufferBuilder, createdAt: Int) = builder.addOffset(38, createdAt, 0)
        fun addCreatedBy(builder: FlatBufferBuilder, createdBy: Int) = builder.addOffset(39, createdBy, 0)
        fun addUpdatedAt(builder: FlatBufferBuilder, updatedAt: Int) = builder.addOffset(40, updatedAt, 0)
        fun addUpdatedBy(builder: FlatBufferBuilder, updatedBy: Int) = builder.addOffset(41, updatedBy, 0)
        fun addSource(builder: FlatBufferBuilder, source: Int) = builder.addOffset(42, source, 0)
        fun addOrigin(builder: FlatBufferBuilder, origin: Int) = builder.addOffset(43, origin, 0)
        fun addOrigNetwork(builder: FlatBufferBuilder, origNetwork: Int) = builder.addOffset(44, origNetwork, 0)
        fun addDataMode(builder: FlatBufferBuilder, dataMode: Byte) = builder.addByte(45, dataMode, 0)
        fun addOnOrbit(builder: FlatBufferBuilder, onOrbit: Int) = builder.addOffset(46, onOrbit, 0)
        fun addManifolds(builder: FlatBufferBuilder, manifolds: Int) = builder.addOffset(47, manifolds, 0)
        fun createManifoldsVector(builder: FlatBufferBuilder, data: IntArray) : Int {
            builder.startVector(4, data.size, 4)
            for (i in data.size - 1 downTo 0) {
                builder.addOffset(data[i])
            }
            return builder.endVector()
        }
        fun startManifoldsVector(builder: FlatBufferBuilder, numElems: Int) = builder.startVector(4, numElems, 4)
        fun endObjectOfInterest_Full(builder: FlatBufferBuilder) : Int {
            val o = builder.endTable()
            return o
        }
        fun finishObjectOfInterestFullBuffer(builder: FlatBufferBuilder, offset: Int) = builder.finish(offset, "OBJE")
        fun finishSizePrefixedObjectOfInterest_FullBuffer(builder: FlatBufferBuilder, offset: Int) = builder.finishSizePrefixed(offset, "OBJE")
    }
}
