// automatically generated by the FlatBuffers compiler, do not modify

import com.google.flatbuffers.BaseVector
import com.google.flatbuffers.BooleanVector
import com.google.flatbuffers.ByteVector
import com.google.flatbuffers.Constants
import com.google.flatbuffers.DoubleVector
import com.google.flatbuffers.FlatBufferBuilder
import com.google.flatbuffers.FloatVector
import com.google.flatbuffers.LongVector
import com.google.flatbuffers.StringVector
import com.google.flatbuffers.Struct
import com.google.flatbuffers.Table
import com.google.flatbuffers.UnionVector
import java.nio.ByteBuffer
import java.nio.ByteOrder
import kotlin.math.sign

/**
 * /// Model object representing on-orbit objects or satellites in the system.
 */
@Suppress("unused")
class Onorbit : Table() {

    fun __init(_i: Int, _bb: ByteBuffer)  {
        __reset(_i, _bb)
    }
    fun __assign(_i: Int, _bb: ByteBuffer) : Onorbit {
        __init(_i, _bb)
        return this
    }
    /**
     * For the public catalog, the idOnOrbit is typically the satellite number as a string, but may be a UUID for analyst or other unknown or untracked satellites, auto-generated by the system.
     * Example: /// Example: ONORBIT-ID
     * Constraints: Minimum length = 1, Maximum length = 36
     */
    val idOnOrbit : String?
        get() {
            val o = __offset(4)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val idOnOrbitAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(4, 1)
    fun idOnOrbitInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 4, 1)
    /**
     * Classification marking of the data in IC/CAPCO Portion-marked format.
     * Example: /// Example: U
     * Constraints: Minimum length = 1, Maximum length = 128
     */
    val classificationMarking : String?
        get() {
            val o = __offset(6)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val classificationMarkingAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(6, 1)
    fun classificationMarkingInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 6, 1)
    /**
     * Satellite/Catalog number of the target on-orbit object.
     * Example: /// Example: 1
     * Constraints: No constraints specified.
     */
    val satNo : Int
        get() {
            val o = __offset(8)
            return if(o != 0) bb.getInt(o + bb_pos) else 0
        }
    /**
     * Common name of the on-orbit object.
     * Example: /// Example: Example common name
     * Constraints: Minimum length = 0, Maximum length = 128
     */
    val commonName : String?
        get() {
            val o = __offset(10)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val commonNameAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(10, 1)
    fun commonNameInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 10, 1)
    /**
     * Constellation to which this satellite belongs.
     * Example: /// Example: Big Dipper
     * Constraints: Minimum length = 0, Maximum length = 128
     */
    val constellation : String?
        get() {
            val o = __offset(12)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val constellationAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(12, 1)
    fun constellationInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 12, 1)
    /**
     * International Designator, typically of the format YYYYLLLAAA, where YYYY is the launch year, LLL is the sequential launch number of that year, and AAA is an optional launch piece designator for the launch.
     * Example: /// Example: 2021123ABC
     * Constraints: Minimum length = 0, Maximum length = 45
     */
    val intlDes : String?
        get() {
            val o = __offset(14)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val intlDesAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(14, 1)
    fun intlDesInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 14, 1)
    /**
     * Date of launch.
     * Example: /// Example: 2018-01-01
     * Constraints: No constraints specified.
     */
    val launchDate : String?
        get() {
            val o = __offset(16)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val launchDateAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(16, 1)
    fun launchDateInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 16, 1)
    /**
     * Date of decay.
     * Example: /// Example: 2018-01-01T16:00:00.123Z
     * Constraints: No constraints specified.
     */
    val decayDate : String?
        get() {
            val o = __offset(18)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val decayDateAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(18, 1)
    fun decayDateInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 18, 1)
    /**
     * Type of on-orbit object: ROCKET BODY, DEBRIS, PAYLOAD, PLATFORM, MANNED, UNKNOWN.
     * Example: /// Example: PAYLOAD
     * Constraints: Minimum length = 0, Maximum length = 32
     */
    val objectType : Byte
        get() {
            val o = __offset(20)
            return if(o != 0) bb.get(o + bb_pos) else 0
        }
    /**
     * Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
     * Example: /// Example: THIRD_PARTY_DATASOURCE
     * Constraints: Minimum length = 0, Maximum length = 64
     */
    val origin : String?
        get() {
            val o = __offset(22)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val originAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(22, 1)
    fun originInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 22, 1)
    /**
     * Mission number of the on-orbit object.
     * Example: /// Example: Expedition 1
     * Constraints: Minimum length = 0, Maximum length = 128
     */
    val missionNumber : String?
        get() {
            val o = __offset(24)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val missionNumberAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(24, 1)
    fun missionNumberInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 24, 1)
    /**
     * Category of the on-orbit object. (Unknown, On-Orbit, Decayed, Cataloged Without State, Launch Nominal, Analyst Satellite, Cislunar, Lunar, Hyperbolic, Heliocentric, Interplanetary, Lagrangian, Docked).
     * Example: /// Example: Lunar
     * Constraints: Minimum length = 0, Maximum length = 45
     */
    val category : Byte
        get() {
            val o = __offset(26)
            return if(o != 0) bb.get(o + bb_pos) else 0
        }
    /**
     * Estimated lifetime of the on-orbit payload, if known.
     * Example: /// Example: 10
     * Constraints: No constraints specified.
     */
    val lifetimeYears : Int
        get() {
            val o = __offset(28)
            return if(o != 0) bb.getInt(o + bb_pos) else 0
        }
    /**
     * Alternate name of the on-orbit object.
     * Example: /// Example: Alternate Name
     * Constraints: Minimum length = 0, Maximum length = 64
     */
    val altName : String?
        get() {
            val o = __offset(30)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val altNameAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(30, 1)
    fun altNameInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 30, 1)
    /**
     * Time the row was created in the database, auto-populated by the system.
     * Example: /// Example: 2018-01-01T16:00:00.123Z
     * Constraints: No constraints specified.
     */
    val createdAt : String?
        get() {
            val o = __offset(32)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val createdAtAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(32, 1)
    fun createdAtInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 32, 1)
    /**
     * Application user who created the row in the database, auto-populated by the system.
     * Example: /// Example: some.user
     * Constraints: Minimum length = 1, Maximum length = 64
     */
    val createdBy : String?
        get() {
            val o = __offset(34)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val createdByAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(34, 1)
    fun createdByInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 34, 1)
    /**
     * Time the row was last updated in the database, auto-populated by the system.
     * Example: /// Example: 2018-01-01T16:00:00.123Z
     * Constraints: No constraints specified.
     */
    val updatedAt : String?
        get() {
            val o = __offset(36)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val updatedAtAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(36, 1)
    fun updatedAtInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 36, 1)
    /**
     * Application user who updated the row in the database, auto-populated by the system.
     * Example: /// Example: some.user
     * Constraints: Minimum length = 0, Maximum length = 64
     */
    val updatedBy : String?
        get() {
            val o = __offset(38)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val updatedByAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(38, 1)
    fun updatedByInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 38, 1)
    /**
     * Source of the data.
     * Example: /// Example: Bluestaq
     * Constraints: Minimum length = 1, Maximum length = 64
     */
    val source : String?
        get() {
            val o = __offset(40)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val sourceAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(40, 1)
    fun sourceInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 40, 1)
    /**
     * Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
     * EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
     * REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
     * SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
     * TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
     * Example: /// Example: TEST
     * Constraints: Minimum length = 1, Maximum length = 32
     */
    val dataMode : Byte
        get() {
            val o = __offset(42)
            return if(o != 0) bb.get(o + bb_pos) else 0
        }
    /**
     * Id of the associated launchSite entity.
     * Example: /// Example: LAUNCHSITE-ID
     * Constraints: Minimum length = 0, Maximum length = 36
     */
    val launchSiteId : String?
        get() {
            val o = __offset(44)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val launchSiteIdAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(44, 1)
    fun launchSiteIdInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 44, 1)
    /**
     * Read-only collection of antennas on this on-orbit object.
     * Example: /// Example: No example provided.
     * Constraints: No constraints specified.
     */
    fun antennas(j: Int) : String? {
        val o = __offset(46)
        return if (o != 0) {
            __string(__vector(o) + j * 4)
        } else {
            null
        }
    }
    val antennasLength : Int
        get() {
            val o = __offset(46); return if (o != 0) __vector_len(o) else 0
        }
    /**
     * Read-only collection of batteries on this on-orbit object.
     * Example: /// Example: No example provided.
     * Constraints: No constraints specified.
     */
    fun batteries(j: Int) : String? {
        val o = __offset(48)
        return if (o != 0) {
            __string(__vector(o) + j * 4)
        } else {
            null
        }
    }
    val batteriesLength : Int
        get() {
            val o = __offset(48); return if (o != 0) __vector_len(o) else 0
        }
    /**
     * Read-only collection of solar arrays on this on-orbit object.
     * Example: /// Example: No example provided.
     * Constraints: No constraints specified.
     */
    fun solarArrays(j: Int) : String? {
        val o = __offset(50)
        return if (o != 0) {
            __string(__vector(o) + j * 4)
        } else {
            null
        }
    }
    val solarArraysLength : Int
        get() {
            val o = __offset(50); return if (o != 0) __vector_len(o) else 0
        }
    /**
     * Read-only collection of thrusters (engines) on this on-orbit object.
     * Example: /// Example: No example provided.
     * Constraints: No constraints specified.
     */
    fun thrusters(j: Int) : String? {
        val o = __offset(52)
        return if (o != 0) {
            __string(__vector(o) + j * 4)
        } else {
            null
        }
    }
    val thrustersLength : Int
        get() {
            val o = __offset(52); return if (o != 0) __vector_len(o) else 0
        }
    /**
     * Read-only collection of details for this on-orbit object.
     * Example: /// Example: No example provided.
     * Constraints: No constraints specified.
     */
    fun onorbitDetails(j: Int) : String? {
        val o = __offset(54)
        return if (o != 0) {
            __string(__vector(o) + j * 4)
        } else {
            null
        }
    }
    val onorbitDetailsLength : Int
        get() {
            val o = __offset(54); return if (o != 0) __vector_len(o) else 0
        }
    /**
     * The country code. This value is typically the ISO 3166 Alpha-2 two-character country code, however it can also represent various consortiums that do not appear in the ISO document. The code must correspond to an existing country in the UDL’s country API. Call udl/country/{code} to get any associated FIPS code, ISO Alpha-3 code, or alternate code values that exist for the specified country code.
     * Example: /// Example: US
     * Constraints: No constraints specified.
     */
    val countryCode : String?
        get() {
            val o = __offset(56)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val countryCodeAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(56, 1)
    fun countryCodeInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 56, 1)
    /**
     * The originating source network on which this record was created, auto-populated by the system.
     * Example: /// Example: OPS1
     * Constraints: Minimum length = 1, Maximum length = 32
     */
    val origNetwork : String?
        get() {
            val o = __offset(58)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val origNetworkAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(58, 1)
    fun origNetworkInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 58, 1)
    companion object {
        fun validateVersion() = Constants.FLATBUFFERS_24_3_25()
        fun getRootAsOnorbit(_bb: ByteBuffer): Onorbit = getRootAsOnorbit(_bb, Onorbit())
        fun getRootAsOnorbit(_bb: ByteBuffer, obj: Onorbit): Onorbit {
            _bb.order(ByteOrder.LITTLE_ENDIAN)
            return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb))
        }
        fun OnorbitBufferHasIdentifier(_bb: ByteBuffer) : Boolean = __has_identifier(_bb, "ONOR")
        fun createOnorbit(builder: FlatBufferBuilder, idOnOrbitOffset: Int, classificationMarkingOffset: Int, satNo: Int, commonNameOffset: Int, constellationOffset: Int, intlDesOffset: Int, launchDateOffset: Int, decayDateOffset: Int, objectType: Byte, originOffset: Int, missionNumberOffset: Int, category: Byte, lifetimeYears: Int, altNameOffset: Int, createdAtOffset: Int, createdByOffset: Int, updatedAtOffset: Int, updatedByOffset: Int, sourceOffset: Int, dataMode: Byte, launchSiteIdOffset: Int, antennasOffset: Int, batteriesOffset: Int, solarArraysOffset: Int, thrustersOffset: Int, onorbitDetailsOffset: Int, countryCodeOffset: Int, origNetworkOffset: Int) : Int {
            builder.startTable(28)
            addOrigNetwork(builder, origNetworkOffset)
            addCountryCode(builder, countryCodeOffset)
            addOnorbitDetails(builder, onorbitDetailsOffset)
            addThrusters(builder, thrustersOffset)
            addSolarArrays(builder, solarArraysOffset)
            addBatteries(builder, batteriesOffset)
            addAntennas(builder, antennasOffset)
            addLaunchSiteId(builder, launchSiteIdOffset)
            addSource(builder, sourceOffset)
            addUpdatedBy(builder, updatedByOffset)
            addUpdatedAt(builder, updatedAtOffset)
            addCreatedBy(builder, createdByOffset)
            addCreatedAt(builder, createdAtOffset)
            addAltName(builder, altNameOffset)
            addLifetimeYears(builder, lifetimeYears)
            addMissionNumber(builder, missionNumberOffset)
            addOrigin(builder, originOffset)
            addDecayDate(builder, decayDateOffset)
            addLaunchDate(builder, launchDateOffset)
            addIntlDes(builder, intlDesOffset)
            addConstellation(builder, constellationOffset)
            addCommonName(builder, commonNameOffset)
            addSatNo(builder, satNo)
            addClassificationMarking(builder, classificationMarkingOffset)
            addIdOnOrbit(builder, idOnOrbitOffset)
            addDataMode(builder, dataMode)
            addCategory(builder, category)
            addObjectType(builder, objectType)
            return endOnorbit(builder)
        }
        fun startOnorbit(builder: FlatBufferBuilder) = builder.startTable(28)
        fun addIdOnOrbit(builder: FlatBufferBuilder, idOnOrbit: Int) = builder.addOffset(0, idOnOrbit, 0)
        fun addClassificationMarking(builder: FlatBufferBuilder, classificationMarking: Int) = builder.addOffset(1, classificationMarking, 0)
        fun addSatNo(builder: FlatBufferBuilder, satNo: Int) = builder.addInt(2, satNo, 0)
        fun addCommonName(builder: FlatBufferBuilder, commonName: Int) = builder.addOffset(3, commonName, 0)
        fun addConstellation(builder: FlatBufferBuilder, constellation: Int) = builder.addOffset(4, constellation, 0)
        fun addIntlDes(builder: FlatBufferBuilder, intlDes: Int) = builder.addOffset(5, intlDes, 0)
        fun addLaunchDate(builder: FlatBufferBuilder, launchDate: Int) = builder.addOffset(6, launchDate, 0)
        fun addDecayDate(builder: FlatBufferBuilder, decayDate: Int) = builder.addOffset(7, decayDate, 0)
        fun addObjectType(builder: FlatBufferBuilder, objectType: Byte) = builder.addByte(8, objectType, 0)
        fun addOrigin(builder: FlatBufferBuilder, origin: Int) = builder.addOffset(9, origin, 0)
        fun addMissionNumber(builder: FlatBufferBuilder, missionNumber: Int) = builder.addOffset(10, missionNumber, 0)
        fun addCategory(builder: FlatBufferBuilder, category: Byte) = builder.addByte(11, category, 0)
        fun addLifetimeYears(builder: FlatBufferBuilder, lifetimeYears: Int) = builder.addInt(12, lifetimeYears, 0)
        fun addAltName(builder: FlatBufferBuilder, altName: Int) = builder.addOffset(13, altName, 0)
        fun addCreatedAt(builder: FlatBufferBuilder, createdAt: Int) = builder.addOffset(14, createdAt, 0)
        fun addCreatedBy(builder: FlatBufferBuilder, createdBy: Int) = builder.addOffset(15, createdBy, 0)
        fun addUpdatedAt(builder: FlatBufferBuilder, updatedAt: Int) = builder.addOffset(16, updatedAt, 0)
        fun addUpdatedBy(builder: FlatBufferBuilder, updatedBy: Int) = builder.addOffset(17, updatedBy, 0)
        fun addSource(builder: FlatBufferBuilder, source: Int) = builder.addOffset(18, source, 0)
        fun addDataMode(builder: FlatBufferBuilder, dataMode: Byte) = builder.addByte(19, dataMode, 0)
        fun addLaunchSiteId(builder: FlatBufferBuilder, launchSiteId: Int) = builder.addOffset(20, launchSiteId, 0)
        fun addAntennas(builder: FlatBufferBuilder, antennas: Int) = builder.addOffset(21, antennas, 0)
        fun createAntennasVector(builder: FlatBufferBuilder, data: IntArray) : Int {
            builder.startVector(4, data.size, 4)
            for (i in data.size - 1 downTo 0) {
                builder.addOffset(data[i])
            }
            return builder.endVector()
        }
        fun startAntennasVector(builder: FlatBufferBuilder, numElems: Int) = builder.startVector(4, numElems, 4)
        fun addBatteries(builder: FlatBufferBuilder, batteries: Int) = builder.addOffset(22, batteries, 0)
        fun createBatteriesVector(builder: FlatBufferBuilder, data: IntArray) : Int {
            builder.startVector(4, data.size, 4)
            for (i in data.size - 1 downTo 0) {
                builder.addOffset(data[i])
            }
            return builder.endVector()
        }
        fun startBatteriesVector(builder: FlatBufferBuilder, numElems: Int) = builder.startVector(4, numElems, 4)
        fun addSolarArrays(builder: FlatBufferBuilder, solarArrays: Int) = builder.addOffset(23, solarArrays, 0)
        fun createSolarArraysVector(builder: FlatBufferBuilder, data: IntArray) : Int {
            builder.startVector(4, data.size, 4)
            for (i in data.size - 1 downTo 0) {
                builder.addOffset(data[i])
            }
            return builder.endVector()
        }
        fun startSolarArraysVector(builder: FlatBufferBuilder, numElems: Int) = builder.startVector(4, numElems, 4)
        fun addThrusters(builder: FlatBufferBuilder, thrusters: Int) = builder.addOffset(24, thrusters, 0)
        fun createThrustersVector(builder: FlatBufferBuilder, data: IntArray) : Int {
            builder.startVector(4, data.size, 4)
            for (i in data.size - 1 downTo 0) {
                builder.addOffset(data[i])
            }
            return builder.endVector()
        }
        fun startThrustersVector(builder: FlatBufferBuilder, numElems: Int) = builder.startVector(4, numElems, 4)
        fun addOnorbitDetails(builder: FlatBufferBuilder, onorbitDetails: Int) = builder.addOffset(25, onorbitDetails, 0)
        fun createOnorbitDetailsVector(builder: FlatBufferBuilder, data: IntArray) : Int {
            builder.startVector(4, data.size, 4)
            for (i in data.size - 1 downTo 0) {
                builder.addOffset(data[i])
            }
            return builder.endVector()
        }
        fun startOnorbitDetailsVector(builder: FlatBufferBuilder, numElems: Int) = builder.startVector(4, numElems, 4)
        fun addCountryCode(builder: FlatBufferBuilder, countryCode: Int) = builder.addOffset(26, countryCode, 0)
        fun addOrigNetwork(builder: FlatBufferBuilder, origNetwork: Int) = builder.addOffset(27, origNetwork, 0)
        fun endOnorbit(builder: FlatBufferBuilder) : Int {
            val o = builder.endTable()
            return o
        }
        fun finishOnorbitBuffer(builder: FlatBufferBuilder, offset: Int) = builder.finish(offset, "ONOR")
        fun finishSizePrefixedOnorbitBuffer(builder: FlatBufferBuilder, offset: Int) = builder.finishSizePrefixed(offset, "ONOR")
    }
}
