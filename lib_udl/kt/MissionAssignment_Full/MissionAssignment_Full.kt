// automatically generated by the FlatBuffers compiler, do not modify

import com.google.flatbuffers.BaseVector
import com.google.flatbuffers.BooleanVector
import com.google.flatbuffers.ByteVector
import com.google.flatbuffers.Constants
import com.google.flatbuffers.DoubleVector
import com.google.flatbuffers.FlatBufferBuilder
import com.google.flatbuffers.FloatVector
import com.google.flatbuffers.LongVector
import com.google.flatbuffers.StringVector
import com.google.flatbuffers.Struct
import com.google.flatbuffers.Table
import com.google.flatbuffers.UnionVector
import java.nio.ByteBuffer
import java.nio.ByteOrder
import kotlin.math.sign

/**
 * /// Platform mission assignment data.
 */
@Suppress("unused")
class MissionAssignment_Full : Table() {

    fun __init(_i: Int, _bb: ByteBuffer)  {
        __reset(_i, _bb)
    }
    fun __assign(_i: Int, _bb: ByteBuffer) : MissionAssignment_Full {
        __init(_i, _bb)
        return this
    }
    /**
     * Unique identifier of the record, auto-generated by the system.
     * Example: /// Example: MISSIONASSIGNMENT-ID
     * Constraints: Minimum length = 1, Maximum length = 36
     */
    val id : String?
        get() {
            val o = __offset(4)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val idAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(4, 1)
    fun idInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 4, 1)
    /**
     * Classification marking of the data in IC/CAPCO Portion-marked format.
     * Example: /// Example: U
     * Constraints: Minimum length = 1, Maximum length = 128
     */
    val classificationMarking : String?
        get() {
            val o = __offset(6)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val classificationMarkingAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(6, 1)
    fun classificationMarkingInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 6, 1)
    /**
     * The track ID that the status is referencing, addressee.
     * Example: /// Example: TRK-ID
     * Constraints: Minimum length = 0, Maximum length = 36
     */
    val trkId : String?
        get() {
            val o = __offset(8)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val trkIdAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(8, 1)
    fun trkIdInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 8, 1)
    /**
     * The timestamp of the mission data, in ISO 8601 UTC format.
     * Example: /// Example: 2021-01-01T01:01:01.123456Z
     * Constraints: No constraints specified.
     */
    val ts : String?
        get() {
            val o = __offset(10)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val tsAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(10, 1)
    fun tsInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 10, 1)
    /**
     * The mission assignment discrete value.
     * Example: /// Example: MAD
     * Constraints: Minimum length = 1, Maximum length = 16
     */
    val mad : String?
        get() {
            val o = __offset(12)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val madAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(12, 1)
    fun madInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 12, 1)
    /**
     * Receipt/Compliance, values from TABLE B-9.
     * Example: /// Example: RC-123
     * Constraints: Minimum length = 0, Maximum length = 16
     */
    val rc : String?
        get() {
            val o = __offset(14)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val rcAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(14, 1)
    fun rcInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 14, 1)
    /**
     * Recurrence rate, receipt/compliance.
     * Example: /// Example: 2
     * Constraints: No constraints specified.
     */
    val rr : Int
        get() {
            val o = __offset(16)
            return if(o != 0) bb.getInt(o + bb_pos) else 0
        }
    /**
     * Track number objective.
     * Example: /// Example: TRACK_NUMBER
     * Constraints: No constraints specified.
     */
    val tno : String?
        get() {
            val o = __offset(18)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val tnoAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(18, 1)
    fun tnoInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 18, 1)
    /**
     * Threat warning environment.
     * Example: /// Example: THREAT_WARNING
     * Constraints: Minimum length = 0, Maximum length = 16
     */
    val twenv : String?
        get() {
            val o = __offset(20)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val twenvAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(20, 1)
    fun twenvInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 20, 1)
    /**
     * WGS84 latitude, in degrees. -90 to 90 degrees (negative values south of equator).
     * Example: /// Example: 45.23
     * Constraints: No constraints specified.
     */
    val lat : Double
        get() {
            val o = __offset(22)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * WGS84 longitude, in degrees. -180 to 180 degrees (negative values west of Prime Meridian).
     * Example: /// Example: 45.23
     * Constraints: No constraints specified.
     */
    val lon : Double
        get() {
            val o = __offset(24)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Origin of index number.
     * Example: /// Example: ORIGIN
     * Constraints: Minimum length = 0, Maximum length = 16
     */
    val orginx : String?
        get() {
            val o = __offset(26)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val orginxAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(26, 1)
    fun orginxInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 26, 1)
    /**
     * Environment.
     * Example: /// Example: ENV
     * Constraints: Minimum length = 0, Maximum length = 16
     */
    val env : String?
        get() {
            val o = __offset(28)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val envAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(28, 1)
    fun envInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 28, 1)
    /**
     * Strength.
     * Example: /// Example: STRENGTH
     * Constraints: Minimum length = 0, Maximum length = 16
     */
    val sz : String?
        get() {
            val o = __offset(30)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val szAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(30, 1)
    fun szInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 30, 1)
    /**
     * Index number.
     * Example: /// Example: 5
     * Constraints: No constraints specified.
     */
    val index : Int
        get() {
            val o = __offset(32)
            return if(o != 0) bb.getInt(o + bb_pos) else 0
        }
    /**
     * TARGET POSITION CONTINUATION WORD - number of associated dmpis.
     * Example: /// Example: 3
     * Constraints: No constraints specified.
     */
    val c1associateddmpis : Int
        get() {
            val o = __offset(34)
            return if(o != 0) bb.getInt(o + bb_pos) else 0
        }
    /**
     * TARGET DATA CONTINUATION WORD - space specific type, see TABLE B-39.
     * Example: /// Example: C2SPC
     * Constraints: No constraints specified.
     */
    val c2spc : String?
        get() {
            val o = __offset(36)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val c2spcAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(36, 1)
    fun c2spcInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 36, 1)
    /**
     * TARGET DATA CONTINUATION WORD - air specific type, see TABLE B-21.
     * Example: /// Example: C2AIR
     * Constraints: No constraints specified.
     */
    val c2air : String?
        get() {
            val o = __offset(38)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val c2airAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(38, 1)
    fun c2airInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 38, 1)
    /**
     * TARGET DATA CONTINUATION WORD - surface specific type, see TABLE B-21.
     * Example: /// Example: C2SUR
     * Constraints: No constraints specified.
     */
    val c2sur : String?
        get() {
            val o = __offset(40)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val c2surAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(40, 1)
    fun c2surInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 40, 1)
    /**
     * TARGET DATA CONTINUATION WORD - land specific type, see TABLE B-21.
     * Example: /// Example: C2LND
     * Constraints: No constraints specified.
     */
    val c2lnd : String?
        get() {
            val o = __offset(42)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val c2lndAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(42, 1)
    fun c2lndInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 42, 1)
    /**
     * TARGET DATA CONTINUATION WORD - identity.
     * Example: /// Example: C2ID
     * Constraints: Minimum length = 0, Maximum length = 16
     */
    val c2id : String?
        get() {
            val o = __offset(44)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val c2idAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(44, 1)
    fun c2idInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 44, 1)
    /**
     * TARGET DATA CONTINUATION WORD - identity amplifying descriptor.
     * Example: /// Example: C2IDAMP
     * Constraints: Minimum length = 0, Maximum length = 16
     */
    val c2idamplifyingdescriptor : String?
        get() {
            val o = __offset(46)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val c2idamplifyingdescriptorAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(46, 1)
    fun c2idamplifyingdescriptorInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 46, 1)
    /**
     * TARGET DATA CONTINUATION WORD - altitude, 100 FT, 2047=NS.
     * Example: /// Example: 3
     * Constraints: No constraints specified.
     */
    val c2alt : Int
        get() {
            val o = __offset(48)
            return if(o != 0) bb.getInt(o + bb_pos) else 0
        }
    /**
     * TARGET DATA CONTINUATION WORD - course in increments of 1 degree.
     * Example: /// Example: 3
     * Constraints: No constraints specified.
     */
    val c2crs : Int
        get() {
            val o = __offset(50)
            return if(o != 0) bb.getInt(o + bb_pos) else 0
        }
    /**
     * TARGET DATA CONTINUATION WORD - speed in 2 DM/HR, 2047=NS.
     * Example: /// Example: 3
     * Constraints: No constraints specified.
     */
    val c2spd : Int
        get() {
            val o = __offset(52)
            return if(o != 0) bb.getInt(o + bb_pos) else 0
        }
    /**
     * TARGET DATA CONTINUATION WORD - special interest indicator.
     * Example: /// Example: C2SPECIAL
     * Constraints: Minimum length = 0, Maximum length = 16
     */
    val c2specialinterestindicator : String?
        get() {
            val o = __offset(54)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val c2specialinterestindicatorAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(54, 1)
    fun c2specialinterestindicatorInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 54, 1)
    /**
     * TARGET DATA CONTINUATION WORD - exercise indicator.
     * Example: /// Example: C2EXERCISE
     * Constraints: Minimum length = 0, Maximum length = 16
     */
    val c2exerciseindicator : String?
        get() {
            val o = __offset(56)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val c2exerciseindicatorAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(56, 1)
    fun c2exerciseindicatorInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 56, 1)
    /**
     * TARGET DATA CONTINUATION WORD - method of fire.
     * Example: /// Example: MOF
     * Constraints: Minimum length = 0, Maximum length = 16
     */
    val c2exercisemof : String?
        get() {
            val o = __offset(58)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val c2exercisemofAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(58, 1)
    fun c2exercisemofInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 58, 1)
    /**
     * POINT LOCATION CONTINUATION WORD - latitude, 0.0013 MINUTE.
     * Example: /// Example: 10.23
     * Constraints: No constraints specified.
     */
    val c3lat : Double
        get() {
            val o = __offset(60)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * POINT LOCATION CONTINUATION WORD - longitude, 0.0013 MINUTE.
     * Example: /// Example: 10.23
     * Constraints: No constraints specified.
     */
    val c3lon : Double
        get() {
            val o = __offset(62)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * POINT LOCATION CONTINUATION WORD - elevation, 25 FT, 1023=NS.
     * Example: /// Example: 10.23
     * Constraints: No constraints specified.
     */
    val c3elv : Double
        get() {
            val o = __offset(64)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * TARGET DATA CONTINUATION WORD - point type 1.
     * Example: /// Example: C3PTL
     * Constraints: Minimum length = 0, Maximum length = 16
     */
    val c3ptl : String?
        get() {
            val o = __offset(66)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val c3ptlAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(66, 1)
    fun c3ptlInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 66, 1)
    /**
     * TARGET DATA CONTINUATION WORD - point number.
     * Example: /// Example: C3PTNUM
     * Constraints: Minimum length = 0, Maximum length = 16
     */
    val c3ptnum : String?
        get() {
            val o = __offset(68)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val c3ptnumAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(68, 1)
    fun c3ptnumInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 68, 1)
    /**
     * SURFACE ATTACK CONTINUATION WORD - target type - see TABLE B-32.
     * Example: /// Example: C4TGT
     * Constraints: Minimum length = 0, Maximum length = 16
     */
    val c4tgt : String?
        get() {
            val o = __offset(70)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val c4tgtAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(70, 1)
    fun c4tgtInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 70, 1)
    /**
     * SURFACE ATTACK CONTINUATION WORD - target defenses.
     * Example: /// Example: C4DEF
     * Constraints: Minimum length = 0, Maximum length = 16
     */
    val c4def : String?
        get() {
            val o = __offset(72)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val c4defAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(72, 1)
    fun c4defInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 72, 1)
    /**
     * SURFACE ATTACK CONTINUATION WORD - run in heading, NS=511.
     * Example: /// Example: 5
     * Constraints: No constraints specified.
     */
    val c4runin : Int
        get() {
            val o = __offset(74)
            return if(o != 0) bb.getInt(o + bb_pos) else 0
        }
    /**
     * SURFACE ATTACK CONTINUATION WORD - run in heading, NS=511.
     * Example: /// Example: 4
     * Constraints: No constraints specified.
     */
    val c4egress : Int
        get() {
            val o = __offset(76)
            return if(o != 0) bb.getInt(o + bb_pos) else 0
        }
    /**
     * SURFACE ATTACK CONTINUATION WORD - number of stores, NS=63.
     * Example: /// Example: 3
     * Constraints: No constraints specified.
     */
    val c4numberofstores : Int
        get() {
            val o = __offset(78)
            return if(o != 0) bb.getInt(o + bb_pos) else 0
        }
    /**
     * SURFACE ATTACK CONTINUATION WORD - type of stores.
     * Example: /// Example: 2
     * Constraints: No constraints specified.
     */
    val c4typeofstores : Int
        get() {
            val o = __offset(80)
            return if(o != 0) bb.getInt(o + bb_pos) else 0
        }
    /**
     * SURFACE ATTACK CONTINUATION WORD - time discrete.
     * Example: /// Example: C4TIMED
     * Constraints: Minimum length = 0, Maximum length = 16
     */
    val c4timediscrete : String?
        get() {
            val o = __offset(82)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val c4timediscreteAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(82, 1)
    fun c4timediscreteInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 82, 1)
    /**
     * SURFACE ATTACK CONTINUATION WORD - hour.
     * Example: /// Example: 4
     * Constraints: No constraints specified.
     */
    val c4tm : Int
        get() {
            val o = __offset(84)
            return if(o != 0) bb.getInt(o + bb_pos) else 0
        }
    /**
     * SURFACE ATTACK CONTINUATION WORD - minute.
     * Example: /// Example: 5
     * Constraints: No constraints specified.
     */
    val c4colon : Int
        get() {
            val o = __offset(86)
            return if(o != 0) bb.getInt(o + bb_pos) else 0
        }
    /**
     * SURFACE ATTACK CONTINUATION WORD - mode of delivery.
     * Example: /// Example: 5
     * Constraints: No constraints specified.
     */
    val c4mod : Int
        get() {
            val o = __offset(88)
            return if(o != 0) bb.getInt(o + bb_pos) else 0
        }
    /**
     * CONTINUATION WORD - hae adjustment, measured in 3.125 FT.
     * Example: /// Example: 5
     * Constraints: No constraints specified.
     */
    val c5haeadj : Int
        get() {
            val o = __offset(90)
            return if(o != 0) bb.getInt(o + bb_pos) else 0
        }
    /**
     * CONTINUATION WORD - time window.
     * Example: /// Example: 5
     * Constraints: No constraints specified.
     */
    val c5tw : Int
        get() {
            val o = __offset(92)
            return if(o != 0) bb.getInt(o + bb_pos) else 0
        }
    /**
     * CONTINUATION WORD - target bearing.
     * Example: /// Example: 5
     * Constraints: No constraints specified.
     */
    val c5tgtbrng : Int
        get() {
            val o = __offset(94)
            return if(o != 0) bb.getInt(o + bb_pos) else 0
        }
    /**
     * CONTINUATION WORD - used with c3_lat to double precision to approx 4 ft.
     * Example: /// Example: 5
     * Constraints: No constraints specified.
     */
    val c5latlsb : Int
        get() {
            val o = __offset(96)
            return if(o != 0) bb.getInt(o + bb_pos) else 0
        }
    /**
     * CONTINUATION WORD - used with c3_lon to double precision to approx 4 ft.
     * Example: /// Example: 5
     * Constraints: No constraints specified.
     */
    val c5lonlsb : Int
        get() {
            val o = __offset(98)
            return if(o != 0) bb.getInt(o + bb_pos) else 0
        }
    /**
     * CONTINUATION WORD - used with c3_elv to double precision to approx 3 ft.
     * Example: /// Example: 5
     * Constraints: No constraints specified.
     */
    val c5elevationlsbs : Int
        get() {
            val o = __offset(100)
            return if(o != 0) bb.getInt(o + bb_pos) else 0
        }
    /**
     * SURFACE ATTACK CONTINUATION WORD - seconds in increments of 1 sec.
     * Example: /// Example: 5
     * Constraints: No constraints specified.
     */
    val c5colon : Int
        get() {
            val o = __offset(102)
            return if(o != 0) bb.getInt(o + bb_pos) else 0
        }
    /**
     * TARGETING CONTINUATION WORD - laser illuminator code.
     * Example: /// Example: 5
     * Constraints: No constraints specified.
     */
    val c6laser : Int
        get() {
            val o = __offset(104)
            return if(o != 0) bb.getInt(o + bb_pos) else 0
        }
    /**
     * TARGETING CONTINUATION WORD - index number, related, 0=NS.
     * Example: /// Example: 5
     * Constraints: No constraints specified.
     */
    val c6intel : Int
        get() {
            val o = __offset(106)
            return if(o != 0) bb.getInt(o + bb_pos) else 0
        }
    /**
     * TARGETING CONTINUATION WORD - track number, related to 3.
     * Example: /// Example: 5
     * Constraints: No constraints specified.
     */
    val c6tnr3 : Int
        get() {
            val o = __offset(108)
            return if(o != 0) bb.getInt(o + bb_pos) else 0
        }
    /**
     * TARGETING CONTINUATION WORD - designator/seeker pulse code type.
     * Example: /// Example: C6DSPCT
     * Constraints: Minimum length = 0, Maximum length = 16
     */
    val c6dspct : String?
        get() {
            val o = __offset(110)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val c6dspctAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(110, 1)
    fun c6dspctInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 110, 1)
    /**
     * TARGETING CONTINUATION WORD - designator/seeker pulse code.
     * Example: /// Example: C6DSPC
     * Constraints: Minimum length = 0, Maximum length = 16
     */
    val c6dspc : String?
        get() {
            val o = __offset(112)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val c6dspcAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(112, 1)
    fun c6dspcInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 112, 1)
    /**
     * TARGETING CONTINUATION WORD - first pulse/last pulse mode.
     * Example: /// Example: C6FPLPM
     * Constraints: Minimum length = 0, Maximum length = 16
     */
    val c6fplpm : String?
        get() {
            val o = __offset(114)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val c6fplpmAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(114, 1)
    fun c6fplpmInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 114, 1)
    /**
     * TARGETING CONTINUATION WORD - long pulse mode.
     * Example: /// Example: C6LONGPM
     * Constraints: Minimum length = 0, Maximum length = 16
     */
    val c6longpm : String?
        get() {
            val o = __offset(116)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val c6longpmAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(116, 1)
    fun c6longpmInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 116, 1)
    /**
     * THIRD PARTY CONTINUATION WORD  - track number, index originator.
     * Example: /// Example: C7TNOR
     * Constraints: No constraints specified.
     */
    val c7tnor : String?
        get() {
            val o = __offset(118)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val c7tnorAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(118, 1)
    fun c7tnorInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 118, 1)
    /**
     * THIRD PARTY CONTINUATION WORD  - index number, third party.
     * Example: /// Example: 3
     * Constraints: No constraints specified.
     */
    val c7in3p : Int
        get() {
            val o = __offset(120)
            return if(o != 0) bb.getInt(o + bb_pos) else 0
        }
    /**
     * THIRD PARTY CONTINUATION WORD  - elevation angle, 2.
     * Example: /// Example: 5.23
     * Constraints: No constraints specified.
     */
    val c7elang2 : Double
        get() {
            val o = __offset(122)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Time the row was created in the database, auto-populated by the system.
     * Example: /// Example: 2018-01-01T16:00:00.123Z
     * Constraints: No constraints specified.
     */
    val createdAt : String?
        get() {
            val o = __offset(124)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val createdAtAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(124, 1)
    fun createdAtInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 124, 1)
    /**
     * Application user who created the row in the database, auto-populated by the system.
     * Example: /// Example: some.user
     * Constraints: Minimum length = 1, Maximum length = 64
     */
    val createdBy : String?
        get() {
            val o = __offset(126)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val createdByAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(126, 1)
    fun createdByInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 126, 1)
    /**
     * Time the row was updated in the database, auto-populated by the system.
     * Example: /// Example: 2018-01-01T16:00:00.123Z
     * Constraints: No constraints specified.
     */
    val updatedAt : String?
        get() {
            val o = __offset(128)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val updatedAtAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(128, 1)
    fun updatedAtInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 128, 1)
    /**
     * Application user who updated the row in the database, auto-populated by the system.
     * Example: /// Example: some.user
     * Constraints: Minimum length = 1, Maximum length = 64
     */
    val updatedBy : String?
        get() {
            val o = __offset(130)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val updatedByAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(130, 1)
    fun updatedByInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 130, 1)
    /**
     * Source of the data.
     * Example: /// Example: Bluestaq
     * Constraints: Minimum length = 1, Maximum length = 64
     */
    val source : String?
        get() {
            val o = __offset(132)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val sourceAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(132, 1)
    fun sourceInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 132, 1)
    /**
     * Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
     * Example: /// Example: THIRD_PARTY_DATASOURCE
     * Constraints: Minimum length = 0, Maximum length = 64
     */
    val origin : String?
        get() {
            val o = __offset(134)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val originAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(134, 1)
    fun originInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 134, 1)
    /**
     * Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
     * EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
     * REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
     * SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
     * TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
     * Example: /// Example: TEST
     * Constraints: Minimum length = 1, Maximum length = 32
     */
    val dataMode : Byte
        get() {
            val o = __offset(136)
            return if(o != 0) bb.get(o + bb_pos) else 0
        }
    /**
     * The originating source network on which this record was created, auto-populated by the system.
     * Example: /// Example: ORIG
     * Constraints: Minimum length = 1, Maximum length = 32
     */
    val origNetwork : String?
        get() {
            val o = __offset(138)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val origNetworkAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(138, 1)
    fun origNetworkInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 138, 1)
    companion object {
        fun validateVersion() = Constants.FLATBUFFERS_24_3_25()
        fun getRootAsMissionAssignment_Full(_bb: ByteBuffer): MissionAssignment_Full = getRootAsMissionAssignment_Full(_bb, MissionAssignment_Full())
        fun getRootAsMissionAssignment_Full(_bb: ByteBuffer, obj: MissionAssignment_Full): MissionAssignment_Full {
            _bb.order(ByteOrder.LITTLE_ENDIAN)
            return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb))
        }
        fun MissionAssignment_FullBufferHasIdentifier(_bb: ByteBuffer) : Boolean = __has_identifier(_bb, "MISS")
        fun createMissionAssignment_Full(builder: FlatBufferBuilder, idOffset: Int, classificationMarkingOffset: Int, trkIdOffset: Int, tsOffset: Int, madOffset: Int, rcOffset: Int, rr: Int, tnoOffset: Int, twenvOffset: Int, lat: Double, lon: Double, orginxOffset: Int, envOffset: Int, szOffset: Int, index: Int, c1associateddmpis: Int, c2spcOffset: Int, c2airOffset: Int, c2surOffset: Int, c2lndOffset: Int, c2idOffset: Int, c2idamplifyingdescriptorOffset: Int, c2alt: Int, c2crs: Int, c2spd: Int, c2specialinterestindicatorOffset: Int, c2exerciseindicatorOffset: Int, c2exercisemofOffset: Int, c3lat: Double, c3lon: Double, c3elv: Double, c3ptlOffset: Int, c3ptnumOffset: Int, c4tgtOffset: Int, c4defOffset: Int, c4runin: Int, c4egress: Int, c4numberofstores: Int, c4typeofstores: Int, c4timediscreteOffset: Int, c4tm: Int, c4colon: Int, c4mod: Int, c5haeadj: Int, c5tw: Int, c5tgtbrng: Int, c5latlsb: Int, c5lonlsb: Int, c5elevationlsbs: Int, c5colon: Int, c6laser: Int, c6intel: Int, c6tnr3: Int, c6dspctOffset: Int, c6dspcOffset: Int, c6fplpmOffset: Int, c6longpmOffset: Int, c7tnorOffset: Int, c7in3p: Int, c7elang2: Double, createdAtOffset: Int, createdByOffset: Int, updatedAtOffset: Int, updatedByOffset: Int, sourceOffset: Int, originOffset: Int, dataMode: Byte, origNetworkOffset: Int) : Int {
            builder.startTable(68)
            addC7elang2(builder, c7elang2)
            addC3elv(builder, c3elv)
            addC3lon(builder, c3lon)
            addC3lat(builder, c3lat)
            addLon(builder, lon)
            addLat(builder, lat)
            addOrigNetwork(builder, origNetworkOffset)
            addOrigin(builder, originOffset)
            addSource(builder, sourceOffset)
            addUpdatedBy(builder, updatedByOffset)
            addUpdatedAt(builder, updatedAtOffset)
            addCreatedBy(builder, createdByOffset)
            addCreatedAt(builder, createdAtOffset)
            addC7in3p(builder, c7in3p)
            addC7tnor(builder, c7tnorOffset)
            addC6longpm(builder, c6longpmOffset)
            addC6fplpm(builder, c6fplpmOffset)
            addC6dspc(builder, c6dspcOffset)
            addC6dspct(builder, c6dspctOffset)
            addC6tnr3(builder, c6tnr3)
            addC6intel(builder, c6intel)
            addC6laser(builder, c6laser)
            addC5colon(builder, c5colon)
            addC5elevationlsbs(builder, c5elevationlsbs)
            addC5lonlsb(builder, c5lonlsb)
            addC5latlsb(builder, c5latlsb)
            addC5tgtbrng(builder, c5tgtbrng)
            addC5tw(builder, c5tw)
            addC5haeadj(builder, c5haeadj)
            addC4mod(builder, c4mod)
            addC4colon(builder, c4colon)
            addC4tm(builder, c4tm)
            addC4timediscrete(builder, c4timediscreteOffset)
            addC4typeofstores(builder, c4typeofstores)
            addC4numberofstores(builder, c4numberofstores)
            addC4egress(builder, c4egress)
            addC4runin(builder, c4runin)
            addC4def(builder, c4defOffset)
            addC4tgt(builder, c4tgtOffset)
            addC3ptnum(builder, c3ptnumOffset)
            addC3ptl(builder, c3ptlOffset)
            addC2exercisemof(builder, c2exercisemofOffset)
            addC2exerciseindicator(builder, c2exerciseindicatorOffset)
            addC2specialinterestindicator(builder, c2specialinterestindicatorOffset)
            addC2spd(builder, c2spd)
            addC2crs(builder, c2crs)
            addC2alt(builder, c2alt)
            addC2idamplifyingdescriptor(builder, c2idamplifyingdescriptorOffset)
            addC2id(builder, c2idOffset)
            addC2lnd(builder, c2lndOffset)
            addC2sur(builder, c2surOffset)
            addC2air(builder, c2airOffset)
            addC2spc(builder, c2spcOffset)
            addC1associateddmpis(builder, c1associateddmpis)
            addIndex(builder, index)
            addSz(builder, szOffset)
            addEnv(builder, envOffset)
            addOrginx(builder, orginxOffset)
            addTwenv(builder, twenvOffset)
            addTno(builder, tnoOffset)
            addRr(builder, rr)
            addRc(builder, rcOffset)
            addMad(builder, madOffset)
            addTs(builder, tsOffset)
            addTrkId(builder, trkIdOffset)
            addClassificationMarking(builder, classificationMarkingOffset)
            addId(builder, idOffset)
            addDataMode(builder, dataMode)
            return endMissionAssignment_Full(builder)
        }
        fun startMissionAssignment_Full(builder: FlatBufferBuilder) = builder.startTable(68)
        fun addId(builder: FlatBufferBuilder, id: Int) = builder.addOffset(0, id, 0)
        fun addClassificationMarking(builder: FlatBufferBuilder, classificationMarking: Int) = builder.addOffset(1, classificationMarking, 0)
        fun addTrkId(builder: FlatBufferBuilder, trkId: Int) = builder.addOffset(2, trkId, 0)
        fun addTs(builder: FlatBufferBuilder, ts: Int) = builder.addOffset(3, ts, 0)
        fun addMad(builder: FlatBufferBuilder, mad: Int) = builder.addOffset(4, mad, 0)
        fun addRc(builder: FlatBufferBuilder, rc: Int) = builder.addOffset(5, rc, 0)
        fun addRr(builder: FlatBufferBuilder, rr: Int) = builder.addInt(6, rr, 0)
        fun addTno(builder: FlatBufferBuilder, tno: Int) = builder.addOffset(7, tno, 0)
        fun addTwenv(builder: FlatBufferBuilder, twenv: Int) = builder.addOffset(8, twenv, 0)
        fun addLat(builder: FlatBufferBuilder, lat: Double) = builder.addDouble(9, lat, 0.0)
        fun addLon(builder: FlatBufferBuilder, lon: Double) = builder.addDouble(10, lon, 0.0)
        fun addOrginx(builder: FlatBufferBuilder, orginx: Int) = builder.addOffset(11, orginx, 0)
        fun addEnv(builder: FlatBufferBuilder, env: Int) = builder.addOffset(12, env, 0)
        fun addSz(builder: FlatBufferBuilder, sz: Int) = builder.addOffset(13, sz, 0)
        fun addIndex(builder: FlatBufferBuilder, index: Int) = builder.addInt(14, index, 0)
        fun addC1associateddmpis(builder: FlatBufferBuilder, c1associateddmpis: Int) = builder.addInt(15, c1associateddmpis, 0)
        fun addC2spc(builder: FlatBufferBuilder, c2spc: Int) = builder.addOffset(16, c2spc, 0)
        fun addC2air(builder: FlatBufferBuilder, c2air: Int) = builder.addOffset(17, c2air, 0)
        fun addC2sur(builder: FlatBufferBuilder, c2sur: Int) = builder.addOffset(18, c2sur, 0)
        fun addC2lnd(builder: FlatBufferBuilder, c2lnd: Int) = builder.addOffset(19, c2lnd, 0)
        fun addC2id(builder: FlatBufferBuilder, c2id: Int) = builder.addOffset(20, c2id, 0)
        fun addC2idamplifyingdescriptor(builder: FlatBufferBuilder, c2idamplifyingdescriptor: Int) = builder.addOffset(21, c2idamplifyingdescriptor, 0)
        fun addC2alt(builder: FlatBufferBuilder, c2alt: Int) = builder.addInt(22, c2alt, 0)
        fun addC2crs(builder: FlatBufferBuilder, c2crs: Int) = builder.addInt(23, c2crs, 0)
        fun addC2spd(builder: FlatBufferBuilder, c2spd: Int) = builder.addInt(24, c2spd, 0)
        fun addC2specialinterestindicator(builder: FlatBufferBuilder, c2specialinterestindicator: Int) = builder.addOffset(25, c2specialinterestindicator, 0)
        fun addC2exerciseindicator(builder: FlatBufferBuilder, c2exerciseindicator: Int) = builder.addOffset(26, c2exerciseindicator, 0)
        fun addC2exercisemof(builder: FlatBufferBuilder, c2exercisemof: Int) = builder.addOffset(27, c2exercisemof, 0)
        fun addC3lat(builder: FlatBufferBuilder, c3lat: Double) = builder.addDouble(28, c3lat, 0.0)
        fun addC3lon(builder: FlatBufferBuilder, c3lon: Double) = builder.addDouble(29, c3lon, 0.0)
        fun addC3elv(builder: FlatBufferBuilder, c3elv: Double) = builder.addDouble(30, c3elv, 0.0)
        fun addC3ptl(builder: FlatBufferBuilder, c3ptl: Int) = builder.addOffset(31, c3ptl, 0)
        fun addC3ptnum(builder: FlatBufferBuilder, c3ptnum: Int) = builder.addOffset(32, c3ptnum, 0)
        fun addC4tgt(builder: FlatBufferBuilder, c4tgt: Int) = builder.addOffset(33, c4tgt, 0)
        fun addC4def(builder: FlatBufferBuilder, c4def: Int) = builder.addOffset(34, c4def, 0)
        fun addC4runin(builder: FlatBufferBuilder, c4runin: Int) = builder.addInt(35, c4runin, 0)
        fun addC4egress(builder: FlatBufferBuilder, c4egress: Int) = builder.addInt(36, c4egress, 0)
        fun addC4numberofstores(builder: FlatBufferBuilder, c4numberofstores: Int) = builder.addInt(37, c4numberofstores, 0)
        fun addC4typeofstores(builder: FlatBufferBuilder, c4typeofstores: Int) = builder.addInt(38, c4typeofstores, 0)
        fun addC4timediscrete(builder: FlatBufferBuilder, c4timediscrete: Int) = builder.addOffset(39, c4timediscrete, 0)
        fun addC4tm(builder: FlatBufferBuilder, c4tm: Int) = builder.addInt(40, c4tm, 0)
        fun addC4colon(builder: FlatBufferBuilder, c4colon: Int) = builder.addInt(41, c4colon, 0)
        fun addC4mod(builder: FlatBufferBuilder, c4mod: Int) = builder.addInt(42, c4mod, 0)
        fun addC5haeadj(builder: FlatBufferBuilder, c5haeadj: Int) = builder.addInt(43, c5haeadj, 0)
        fun addC5tw(builder: FlatBufferBuilder, c5tw: Int) = builder.addInt(44, c5tw, 0)
        fun addC5tgtbrng(builder: FlatBufferBuilder, c5tgtbrng: Int) = builder.addInt(45, c5tgtbrng, 0)
        fun addC5latlsb(builder: FlatBufferBuilder, c5latlsb: Int) = builder.addInt(46, c5latlsb, 0)
        fun addC5lonlsb(builder: FlatBufferBuilder, c5lonlsb: Int) = builder.addInt(47, c5lonlsb, 0)
        fun addC5elevationlsbs(builder: FlatBufferBuilder, c5elevationlsbs: Int) = builder.addInt(48, c5elevationlsbs, 0)
        fun addC5colon(builder: FlatBufferBuilder, c5colon: Int) = builder.addInt(49, c5colon, 0)
        fun addC6laser(builder: FlatBufferBuilder, c6laser: Int) = builder.addInt(50, c6laser, 0)
        fun addC6intel(builder: FlatBufferBuilder, c6intel: Int) = builder.addInt(51, c6intel, 0)
        fun addC6tnr3(builder: FlatBufferBuilder, c6tnr3: Int) = builder.addInt(52, c6tnr3, 0)
        fun addC6dspct(builder: FlatBufferBuilder, c6dspct: Int) = builder.addOffset(53, c6dspct, 0)
        fun addC6dspc(builder: FlatBufferBuilder, c6dspc: Int) = builder.addOffset(54, c6dspc, 0)
        fun addC6fplpm(builder: FlatBufferBuilder, c6fplpm: Int) = builder.addOffset(55, c6fplpm, 0)
        fun addC6longpm(builder: FlatBufferBuilder, c6longpm: Int) = builder.addOffset(56, c6longpm, 0)
        fun addC7tnor(builder: FlatBufferBuilder, c7tnor: Int) = builder.addOffset(57, c7tnor, 0)
        fun addC7in3p(builder: FlatBufferBuilder, c7in3p: Int) = builder.addInt(58, c7in3p, 0)
        fun addC7elang2(builder: FlatBufferBuilder, c7elang2: Double) = builder.addDouble(59, c7elang2, 0.0)
        fun addCreatedAt(builder: FlatBufferBuilder, createdAt: Int) = builder.addOffset(60, createdAt, 0)
        fun addCreatedBy(builder: FlatBufferBuilder, createdBy: Int) = builder.addOffset(61, createdBy, 0)
        fun addUpdatedAt(builder: FlatBufferBuilder, updatedAt: Int) = builder.addOffset(62, updatedAt, 0)
        fun addUpdatedBy(builder: FlatBufferBuilder, updatedBy: Int) = builder.addOffset(63, updatedBy, 0)
        fun addSource(builder: FlatBufferBuilder, source: Int) = builder.addOffset(64, source, 0)
        fun addOrigin(builder: FlatBufferBuilder, origin: Int) = builder.addOffset(65, origin, 0)
        fun addDataMode(builder: FlatBufferBuilder, dataMode: Byte) = builder.addByte(66, dataMode, 0)
        fun addOrigNetwork(builder: FlatBufferBuilder, origNetwork: Int) = builder.addOffset(67, origNetwork, 0)
        fun endMissionAssignment_Full(builder: FlatBufferBuilder) : Int {
            val o = builder.endTable()
            return o
        }
        fun finishMissionAssignmentFullBuffer(builder: FlatBufferBuilder, offset: Int) = builder.finish(offset, "MISS")
        fun finishSizePrefixedMissionAssignment_FullBuffer(builder: FlatBufferBuilder, offset: Int) = builder.finishSizePrefixed(offset, "MISS")
    }
}
