// automatically generated by the FlatBuffers compiler, do not modify

import com.google.flatbuffers.BaseVector
import com.google.flatbuffers.BooleanVector
import com.google.flatbuffers.ByteVector
import com.google.flatbuffers.Constants
import com.google.flatbuffers.DoubleVector
import com.google.flatbuffers.FlatBufferBuilder
import com.google.flatbuffers.FloatVector
import com.google.flatbuffers.LongVector
import com.google.flatbuffers.StringVector
import com.google.flatbuffers.Struct
import com.google.flatbuffers.Table
import com.google.flatbuffers.UnionVector
import java.nio.ByteBuffer
import java.nio.ByteOrder
import kotlin.math.sign

/**
 * /// Collection of Remarks associated with this Air Transport Mission.
 */
@Suppress("unused")
class AircraftMissionRemarks_Abridged : Table() {

    fun __init(_i: Int, _bb: ByteBuffer)  {
        __reset(_i, _bb)
    }
    fun __assign(_i: Int, _bb: ByteBuffer) : AircraftMissionRemarks_Abridged {
        __init(_i, _bb)
        return this
    }
    /**
     * Global Decision Support System (GDSS) remark identifier.
     * Example: /// Example: GDSSREMARK-ID
     * Constraints: Minimum length = 0, Maximum length = 36
     */
    val gdssRemarkId : String?
        get() {
            val o = __offset(4)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val gdssRemarkIdAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(4, 1)
    fun gdssRemarkIdInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 4, 1)
    /**
     * Remark type.
     * Example: /// Example: MP
     * Constraints: Minimum length = 0, Maximum length = 20
     */
    val type : String?
        get() {
            val o = __offset(6)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val typeAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(6, 1)
    fun typeInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 6, 1)
    /**
     * Text of the remark.
     * Example: /// Example: Example mission remarks.
     * Constraints: Minimum length = 0, Maximum length = 1024
     */
    val text : String?
        get() {
            val o = __offset(8)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val textAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(8, 1)
    fun textInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 8, 1)
    /**
     * Date the remark was published, in ISO 8601 UTC format, with millisecond precision.
     * Example: /// Example: 2022-01-01T16:00:00.123Z
     * Constraints: No constraints specified.
     */
    val date : String?
        get() {
            val o = __offset(10)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val dateAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(10, 1)
    fun dateInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 10, 1)
    /**
     * User who published the remark.
     * Example: /// Example: John Doe
     * Constraints: Minimum length = 0, Maximum length = 20
     */
    val user : String?
        get() {
            val o = __offset(12)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val userAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(12, 1)
    fun userInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 12, 1)
    /**
     * If the remark is sortie specific, this is the number of the sortie it applies to.
     * Example: /// Example: 825
     * Constraints: No constraints specified.
     */
    val itineraryNum : Int
        get() {
            val o = __offset(14)
            return if(o != 0) bb.getInt(o + bb_pos) else 0
        }
    companion object {
        fun validateVersion() = Constants.FLATBUFFERS_24_3_25()
        fun getRootAsAircraftMissionRemarks_Abridged(_bb: ByteBuffer): AircraftMissionRemarks_Abridged = getRootAsAircraftMissionRemarks_Abridged(_bb, AircraftMissionRemarks_Abridged())
        fun getRootAsAircraftMissionRemarks_Abridged(_bb: ByteBuffer, obj: AircraftMissionRemarks_Abridged): AircraftMissionRemarks_Abridged {
            _bb.order(ByteOrder.LITTLE_ENDIAN)
            return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb))
        }
        fun AircraftMissionRemarks_AbridgedBufferHasIdentifier(_bb: ByteBuffer) : Boolean = __has_identifier(_bb, "AIRC")
        fun createAircraftMissionRemarks_Abridged(builder: FlatBufferBuilder, gdssRemarkIdOffset: Int, typeOffset: Int, textOffset: Int, dateOffset: Int, userOffset: Int, itineraryNum: Int) : Int {
            builder.startTable(6)
            addItineraryNum(builder, itineraryNum)
            addUser(builder, userOffset)
            addDate(builder, dateOffset)
            addText(builder, textOffset)
            addType(builder, typeOffset)
            addGdssRemarkId(builder, gdssRemarkIdOffset)
            return endAircraftMissionRemarks_Abridged(builder)
        }
        fun startAircraftMissionRemarks_Abridged(builder: FlatBufferBuilder) = builder.startTable(6)
        fun addGdssRemarkId(builder: FlatBufferBuilder, gdssRemarkId: Int) = builder.addOffset(0, gdssRemarkId, 0)
        fun addType(builder: FlatBufferBuilder, type: Int) = builder.addOffset(1, type, 0)
        fun addText(builder: FlatBufferBuilder, text: Int) = builder.addOffset(2, text, 0)
        fun addDate(builder: FlatBufferBuilder, date: Int) = builder.addOffset(3, date, 0)
        fun addUser(builder: FlatBufferBuilder, user: Int) = builder.addOffset(4, user, 0)
        fun addItineraryNum(builder: FlatBufferBuilder, itineraryNum: Int) = builder.addInt(5, itineraryNum, 0)
        fun endAircraftMissionRemarks_Abridged(builder: FlatBufferBuilder) : Int {
            val o = builder.endTable()
            return o
        }
        fun finishAircraftMissionRemarksAbridgedBuffer(builder: FlatBufferBuilder, offset: Int) = builder.finish(offset, "AIRC")
        fun finishSizePrefixedAircraftMissionRemarks_AbridgedBuffer(builder: FlatBufferBuilder, offset: Int) = builder.finishSizePrefixed(offset, "AIRC")
    }
}
