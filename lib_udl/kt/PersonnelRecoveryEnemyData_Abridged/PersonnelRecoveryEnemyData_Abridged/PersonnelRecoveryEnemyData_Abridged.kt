// automatically generated by the FlatBuffers compiler, do not modify

package PersonnelRecoveryEnemyData_Abridged

import com.google.flatbuffers.BaseVector
import com.google.flatbuffers.BooleanVector
import com.google.flatbuffers.ByteVector
import com.google.flatbuffers.Constants
import com.google.flatbuffers.DoubleVector
import com.google.flatbuffers.FlatBufferBuilder
import com.google.flatbuffers.FloatVector
import com.google.flatbuffers.LongVector
import com.google.flatbuffers.StringVector
import com.google.flatbuffers.Struct
import com.google.flatbuffers.Table
import com.google.flatbuffers.UnionVector
import java.nio.ByteBuffer
import java.nio.ByteOrder
import kotlin.math.sign

/**
 * Information detailing knowledge of enemies in the area.
 */
@Suppress("unused")
class PersonnelRecoveryEnemyData_Abridged : Table() {

    fun __init(_i: Int, _bb: ByteBuffer)  {
        __reset(_i, _bb)
    }
    fun __assign(_i: Int, _bb: ByteBuffer) : PersonnelRecoveryEnemyData_Abridged {
        __init(_i, _bb)
        return this
    }
    /**
     * Directions to known enemies in the operation area (NORTH, NORTHEAST, EAST, SOUTHEAST, SOUTH, SOUTHWEST, WEST, NORTHWEST, SURROUNDED).
     * Example: NORTHWEST
     * Constraints: Minimum length = 0, Maximum length = 32
     */
    val dirToEnemy : String?
        get() {
            val o = __offset(4)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val dirToEnemyAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(4, 1)
    fun dirToEnemyInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 4, 1)
    /**
     * The type of hostile fire received (SMALL ARMS, MORTAR, ARTILLERY, ROCKETS).
     * Example: SMALL ARMS
     * Constraints: Minimum length = 0, Maximum length = 32
     */
    val hostileFireType : String?
        get() {
            val o = __offset(6)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val hostileFireTypeAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(6, 1)
    fun hostileFireTypeInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 6, 1)
    /**
     * Comments provided by friendlies about the evac zone.
     * Example: Comments from friendlies.
     * Constraints: Minimum length = 0, Maximum length = 128
     */
    val friendliesRemarks : String?
        get() {
            val o = __offset(8)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val friendliesRemarksAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(8, 1)
    fun friendliesRemarksInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 8, 1)
    /**
     * Hot Landing Zone remarks.
     * Example: Hot Landing Zone remarks.
     * Constraints: Minimum length = 0, Maximum length = 128
     */
    val hlzRemarks : String?
        get() {
            val o = __offset(10)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val hlzRemarksAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(10, 1)
    fun hlzRemarksInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 10, 1)
    companion object {
        fun validateVersion() = Constants.FLATBUFFERS_24_3_25()
        fun getRootAsPersonnelRecoveryEnemyData_Abridged(_bb: ByteBuffer): PersonnelRecoveryEnemyData_Abridged = getRootAsPersonnelRecoveryEnemyData_Abridged(_bb, PersonnelRecoveryEnemyData_Abridged())
        fun getRootAsPersonnelRecoveryEnemyData_Abridged(_bb: ByteBuffer, obj: PersonnelRecoveryEnemyData_Abridged): PersonnelRecoveryEnemyData_Abridged {
            _bb.order(ByteOrder.LITTLE_ENDIAN)
            return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb))
        }
        fun createPersonnelRecoveryEnemyData_Abridged(builder: FlatBufferBuilder, dirToEnemyOffset: Int, hostileFireTypeOffset: Int, friendliesRemarksOffset: Int, hlzRemarksOffset: Int) : Int {
            builder.startTable(4)
            addHlzRemarks(builder, hlzRemarksOffset)
            addFriendliesRemarks(builder, friendliesRemarksOffset)
            addHostileFireType(builder, hostileFireTypeOffset)
            addDirToEnemy(builder, dirToEnemyOffset)
            return endPersonnelRecoveryEnemyData_Abridged(builder)
        }
        fun startPersonnelRecoveryEnemyData_Abridged(builder: FlatBufferBuilder) = builder.startTable(4)
        fun addDirToEnemy(builder: FlatBufferBuilder, dirToEnemy: Int) = builder.addOffset(0, dirToEnemy, 0)
        fun addHostileFireType(builder: FlatBufferBuilder, hostileFireType: Int) = builder.addOffset(1, hostileFireType, 0)
        fun addFriendliesRemarks(builder: FlatBufferBuilder, friendliesRemarks: Int) = builder.addOffset(2, friendliesRemarks, 0)
        fun addHlzRemarks(builder: FlatBufferBuilder, hlzRemarks: Int) = builder.addOffset(3, hlzRemarks, 0)
        fun endPersonnelRecoveryEnemyData_Abridged(builder: FlatBufferBuilder) : Int {
            val o = builder.endTable()
            return o
        }
    }
}
