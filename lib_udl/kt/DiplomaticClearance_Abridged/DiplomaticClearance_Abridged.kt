// automatically generated by the FlatBuffers compiler, do not modify

import com.google.flatbuffers.BaseVector
import com.google.flatbuffers.BooleanVector
import com.google.flatbuffers.ByteVector
import com.google.flatbuffers.Constants
import com.google.flatbuffers.DoubleVector
import com.google.flatbuffers.FlatBufferBuilder
import com.google.flatbuffers.FloatVector
import com.google.flatbuffers.LongVector
import com.google.flatbuffers.StringVector
import com.google.flatbuffers.Struct
import com.google.flatbuffers.Table
import com.google.flatbuffers.UnionVector
import java.nio.ByteBuffer
import java.nio.ByteOrder
import kotlin.math.sign

/**
 * /// A diplomatic clearance is an authorization for an aircraft to traverse or land within a specified country.
 */
@Suppress("unused")
class DiplomaticClearance_Abridged : Table() {

    fun __init(_i: Int, _bb: ByteBuffer)  {
        __reset(_i, _bb)
    }
    fun __assign(_i: Int, _bb: ByteBuffer) : DiplomaticClearance_Abridged {
        __init(_i, _bb)
        return this
    }
    /**
     * Unique identifier of the record, auto-generated by the system if not provided on create operations.
     * Example: /// Example: 25059135-4afc-45c2-b78b-d6e843dbd96d
     * Constraints: Minimum length = 1, Maximum length = 36
     */
    val id : String?
        get() {
            val o = __offset(4)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val idAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(4, 1)
    fun idInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 4, 1)
    /**
     * Classification marking of the data in IC/CAPCO Portion-marked format.
     * Example: /// Example: U
     * Constraints: Minimum length = 1, Maximum length = 128
     */
    val classificationMarking : String?
        get() {
            val o = __offset(6)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val classificationMarkingAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(6, 1)
    fun classificationMarkingInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 6, 1)
    /**
     * Unique identifier of the Mission associated with this diplomatic clearance record.
     * Example: /// Example: 0dba1363-2d09-49fa-a784-4bb4cbb1674a
     * Constraints: Minimum length = 1, Maximum length = 36
     */
    val idMission : String?
        get() {
            val o = __offset(8)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val idMissionAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(8, 1)
    fun idMissionInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 8, 1)
    /**
     * Optional diplomatic clearance worksheet ID from external systems. This field has no meaning within UDL and is provided as a convenience for systems that require tracking of an internal system generated ID.
     * Example: /// Example: 990ae849089e3d6cad69655324176bb6
     * Constraints: Minimum length = 0, Maximum length = 36
     */
    val externalWorksheetId : String?
        get() {
            val o = __offset(10)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val externalWorksheetIdAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(10, 1)
    fun externalWorksheetIdInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 10, 1)
    /**
     * Identifier of the Diplomatic Clearance Worksheet used to coordinate aircraft clearance requests.
     * Example: /// Example: G2-939911-AC
     * Constraints: Minimum length = 0, Maximum length = 256
     */
    val dipWorksheetName : String?
        get() {
            val o = __offset(12)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val dipWorksheetNameAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(12, 1)
    fun dipWorksheetNameInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 12, 1)
    /**
     * The First Departure Date (FDD) the mission is scheduled for departure, in ISO 8601 UTC format with millisecond precision.
     * Example: /// Example: 2024-01-01T01:01:01.123Z
     * Constraints: No constraints specified.
     */
    val firstDepDate : String?
        get() {
            val o = __offset(14)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val firstDepDateAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(14, 1)
    fun firstDepDateInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 14, 1)
    /**
     * Suspense date for the diplomatic clearance worksheet to be worked, in ISO 8601 UTC format with millisecond precision.
     * Example: /// Example: 2024-01-01T01:01:01.123Z
     * Constraints: No constraints specified.
     */
    val docDeadline : String?
        get() {
            val o = __offset(16)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val docDeadlineAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(16, 1)
    fun docDeadlineInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 16, 1)
    /**
     * The Aircraft and Personnel Automated Clearance System (APACS) system identifier used to process and approve this clearance request.
     * Example: /// Example: 1083034
     * Constraints: Minimum length = 0, Maximum length = 40
     */
    val apacsId : String?
        get() {
            val o = __offset(18)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val apacsIdAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(18, 1)
    fun apacsIdInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 18, 1)
    /**
     * Collection of diplomatic clearance details.
     * Example: /// Example: No example provided.
     * Constraints: No constraints specified.
     */
    fun diplomaticClearanceDetails(j: Int) : String? {
        val o = __offset(20)
        return if (o != 0) {
            __string(__vector(o) + j * 4)
        } else {
            null
        }
    }
    val diplomaticClearanceDetailsLength : Int
        get() {
            val o = __offset(20); return if (o != 0) __vector_len(o) else 0
        }
    /**
     * Collection of diplomatic clearance remarks.
     * Example: /// Example: No example provided.
     * Constraints: No constraints specified.
     */
    fun diplomaticClearanceRemarks(j: Int) : String? {
        val o = __offset(22)
        return if (o != 0) {
            __string(__vector(o) + j * 4)
        } else {
            null
        }
    }
    val diplomaticClearanceRemarksLength : Int
        get() {
            val o = __offset(22); return if (o != 0) __vector_len(o) else 0
        }
    /**
     * Time the row was created in the database, auto-populated by the system.
     * Example: /// Example: 2018-01-01T16:00:00.123Z
     * Constraints: No constraints specified.
     */
    val createdAt : String?
        get() {
            val o = __offset(24)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val createdAtAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(24, 1)
    fun createdAtInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 24, 1)
    /**
     * Application user who created the row in the database, auto-populated by the system.
     * Example: /// Example: some.user
     * Constraints: Minimum length = 1, Maximum length = 64
     */
    val createdBy : String?
        get() {
            val o = __offset(26)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val createdByAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(26, 1)
    fun createdByInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 26, 1)
    /**
     * Time the row was updated in the database, auto-populated by the system.
     * Example: /// Example: 2018-01-01T16:00:00.123Z
     * Constraints: No constraints specified.
     */
    val updatedAt : String?
        get() {
            val o = __offset(28)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val updatedAtAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(28, 1)
    fun updatedAtInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 28, 1)
    /**
     * Application user who updated the row in the database, auto-populated by the system.
     * Example: /// Example: some.user
     * Constraints: Minimum length = 0, Maximum length = 64
     */
    val updatedBy : String?
        get() {
            val o = __offset(30)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val updatedByAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(30, 1)
    fun updatedByInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 30, 1)
    /**
     * The source data library from which this record was received. This could be a remote or tactical UDL or another data library. If null, the record should be assumed to have originated from the primary Enterprise UDL.
     * Example: /// Example: AXE
     * Constraints: Minimum length = 0, Maximum length = 64
     */
    val sourceDl : String?
        get() {
            val o = __offset(32)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val sourceDlAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(32, 1)
    fun sourceDlInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 32, 1)
    /**
     * Source of the data.
     * Example: /// Example: Bluestaq
     * Constraints: Minimum length = 1, Maximum length = 64
     */
    val source : String?
        get() {
            val o = __offset(34)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val sourceAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(34, 1)
    fun sourceInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 34, 1)
    /**
     * Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
     * Example: /// Example: THIRD_PARTY_DATASOURCE
     * Constraints: Minimum length = 0, Maximum length = 64
     */
    val origin : String?
        get() {
            val o = __offset(36)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val originAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(36, 1)
    fun originInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 36, 1)
    /**
     * The originating source network on which this record was created, auto-populated by the system.
     * Example: /// Example: ORIG
     * Constraints: Minimum length = 0, Maximum length = 32
     */
    val origNetwork : String?
        get() {
            val o = __offset(38)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val origNetworkAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(38, 1)
    fun origNetworkInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 38, 1)
    /**
     * Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
     * EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
     * REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
     * SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
     * TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
     * Example: /// Example: TEST
     * Constraints: Minimum length = 1, Maximum length = 32
     */
    val dataMode : Byte
        get() {
            val o = __offset(40)
            return if(o != 0) bb.get(o + bb_pos) else 0
        }
    companion object {
        fun validateVersion() = Constants.FLATBUFFERS_24_3_25()
        fun getRootAsDiplomaticClearance_Abridged(_bb: ByteBuffer): DiplomaticClearance_Abridged = getRootAsDiplomaticClearance_Abridged(_bb, DiplomaticClearance_Abridged())
        fun getRootAsDiplomaticClearance_Abridged(_bb: ByteBuffer, obj: DiplomaticClearance_Abridged): DiplomaticClearance_Abridged {
            _bb.order(ByteOrder.LITTLE_ENDIAN)
            return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb))
        }
        fun DiplomaticClearance_AbridgedBufferHasIdentifier(_bb: ByteBuffer) : Boolean = __has_identifier(_bb, "DIPL")
        fun createDiplomaticClearance_Abridged(builder: FlatBufferBuilder, idOffset: Int, classificationMarkingOffset: Int, idMissionOffset: Int, externalWorksheetIdOffset: Int, dipWorksheetNameOffset: Int, firstDepDateOffset: Int, docDeadlineOffset: Int, apacsIdOffset: Int, diplomaticClearanceDetailsOffset: Int, diplomaticClearanceRemarksOffset: Int, createdAtOffset: Int, createdByOffset: Int, updatedAtOffset: Int, updatedByOffset: Int, sourceDlOffset: Int, sourceOffset: Int, originOffset: Int, origNetworkOffset: Int, dataMode: Byte) : Int {
            builder.startTable(19)
            addOrigNetwork(builder, origNetworkOffset)
            addOrigin(builder, originOffset)
            addSource(builder, sourceOffset)
            addSourceDL(builder, sourceDlOffset)
            addUpdatedBy(builder, updatedByOffset)
            addUpdatedAt(builder, updatedAtOffset)
            addCreatedBy(builder, createdByOffset)
            addCreatedAt(builder, createdAtOffset)
            addDiplomaticClearanceRemarks(builder, diplomaticClearanceRemarksOffset)
            addDiplomaticClearanceDetails(builder, diplomaticClearanceDetailsOffset)
            addApacsId(builder, apacsIdOffset)
            addDocDeadline(builder, docDeadlineOffset)
            addFirstDepDate(builder, firstDepDateOffset)
            addDipWorksheetName(builder, dipWorksheetNameOffset)
            addExternalWorksheetId(builder, externalWorksheetIdOffset)
            addIdMission(builder, idMissionOffset)
            addClassificationMarking(builder, classificationMarkingOffset)
            addId(builder, idOffset)
            addDataMode(builder, dataMode)
            return endDiplomaticClearance_Abridged(builder)
        }
        fun startDiplomaticClearance_Abridged(builder: FlatBufferBuilder) = builder.startTable(19)
        fun addId(builder: FlatBufferBuilder, id: Int) = builder.addOffset(0, id, 0)
        fun addClassificationMarking(builder: FlatBufferBuilder, classificationMarking: Int) = builder.addOffset(1, classificationMarking, 0)
        fun addIdMission(builder: FlatBufferBuilder, idMission: Int) = builder.addOffset(2, idMission, 0)
        fun addExternalWorksheetId(builder: FlatBufferBuilder, externalWorksheetId: Int) = builder.addOffset(3, externalWorksheetId, 0)
        fun addDipWorksheetName(builder: FlatBufferBuilder, dipWorksheetName: Int) = builder.addOffset(4, dipWorksheetName, 0)
        fun addFirstDepDate(builder: FlatBufferBuilder, firstDepDate: Int) = builder.addOffset(5, firstDepDate, 0)
        fun addDocDeadline(builder: FlatBufferBuilder, docDeadline: Int) = builder.addOffset(6, docDeadline, 0)
        fun addApacsId(builder: FlatBufferBuilder, apacsId: Int) = builder.addOffset(7, apacsId, 0)
        fun addDiplomaticClearanceDetails(builder: FlatBufferBuilder, diplomaticClearanceDetails: Int) = builder.addOffset(8, diplomaticClearanceDetails, 0)
        fun createDiplomaticClearanceDetailsVector(builder: FlatBufferBuilder, data: IntArray) : Int {
            builder.startVector(4, data.size, 4)
            for (i in data.size - 1 downTo 0) {
                builder.addOffset(data[i])
            }
            return builder.endVector()
        }
        fun startDiplomaticClearanceDetailsVector(builder: FlatBufferBuilder, numElems: Int) = builder.startVector(4, numElems, 4)
        fun addDiplomaticClearanceRemarks(builder: FlatBufferBuilder, diplomaticClearanceRemarks: Int) = builder.addOffset(9, diplomaticClearanceRemarks, 0)
        fun createDiplomaticClearanceRemarksVector(builder: FlatBufferBuilder, data: IntArray) : Int {
            builder.startVector(4, data.size, 4)
            for (i in data.size - 1 downTo 0) {
                builder.addOffset(data[i])
            }
            return builder.endVector()
        }
        fun startDiplomaticClearanceRemarksVector(builder: FlatBufferBuilder, numElems: Int) = builder.startVector(4, numElems, 4)
        fun addCreatedAt(builder: FlatBufferBuilder, createdAt: Int) = builder.addOffset(10, createdAt, 0)
        fun addCreatedBy(builder: FlatBufferBuilder, createdBy: Int) = builder.addOffset(11, createdBy, 0)
        fun addUpdatedAt(builder: FlatBufferBuilder, updatedAt: Int) = builder.addOffset(12, updatedAt, 0)
        fun addUpdatedBy(builder: FlatBufferBuilder, updatedBy: Int) = builder.addOffset(13, updatedBy, 0)
        fun addSourceDL(builder: FlatBufferBuilder, sourceDl: Int) = builder.addOffset(14, sourceDl, 0)
        fun addSource(builder: FlatBufferBuilder, source: Int) = builder.addOffset(15, source, 0)
        fun addOrigin(builder: FlatBufferBuilder, origin: Int) = builder.addOffset(16, origin, 0)
        fun addOrigNetwork(builder: FlatBufferBuilder, origNetwork: Int) = builder.addOffset(17, origNetwork, 0)
        fun addDataMode(builder: FlatBufferBuilder, dataMode: Byte) = builder.addByte(18, dataMode, 0)
        fun endDiplomaticClearance_Abridged(builder: FlatBufferBuilder) : Int {
            val o = builder.endTable()
            return o
        }
        fun finishDiplomaticClearanceAbridgedBuffer(builder: FlatBufferBuilder, offset: Int) = builder.finish(offset, "DIPL")
        fun finishSizePrefixedDiplomaticClearance_AbridgedBuffer(builder: FlatBufferBuilder, offset: Int) = builder.finishSizePrefixed(offset, "DIPL")
    }
}
