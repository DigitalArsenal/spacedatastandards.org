// automatically generated by the FlatBuffers compiler, do not modify

import com.google.flatbuffers.BaseVector
import com.google.flatbuffers.BooleanVector
import com.google.flatbuffers.ByteVector
import com.google.flatbuffers.Constants
import com.google.flatbuffers.DoubleVector
import com.google.flatbuffers.FlatBufferBuilder
import com.google.flatbuffers.FloatVector
import com.google.flatbuffers.LongVector
import com.google.flatbuffers.StringVector
import com.google.flatbuffers.Struct
import com.google.flatbuffers.Table
import com.google.flatbuffers.UnionVector
import java.nio.ByteBuffer
import java.nio.ByteOrder
import kotlin.math.sign

/**
 * /// Support items associated with this LogisticsSupport record.
 */
@Suppress("unused")
class LogisticsSupportItems_Full : Table() {

    fun __init(_i: Int, _bb: ByteBuffer)  {
        __reset(_i, _bb)
    }
    fun __assign(_i: Int, _bb: ByteBuffer) : LogisticsSupportItems_Full {
        __init(_i, _bb)
        return this
    }
    /**
     * The type of recovery request needed. Contact the source provider for details.
     * Example: /// Example: E
     * Constraints: Minimum length = 1, Maximum length = 1
     */
    val recoveryRequestTypeCode : String?
        get() {
            val o = __offset(4)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val recoveryRequestTypeCodeAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(4, 1)
    fun recoveryRequestTypeCodeInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 4, 1)
    /**
     * The request or record number for this item type (Equipent, Part, or MRT).
     * Example: /// Example: 89208
     * Constraints: Minimum length = 0, Maximum length = 5
     */
    val requestNumber : String?
        get() {
            val o = __offset(6)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val requestNumberAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(6, 1)
    fun requestNumberInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 6, 1)
    /**
     * Military aircraft discrepancy logistics requisition ordered quantity. The quantity of equipment ordered that is required to fix the aircraft.
     * Example: /// Example: 1
     * Constraints: No constraints specified.
     */
    val quantity : Int
        get() {
            val o = __offset(8)
            return if(o != 0) bb.getInt(o + bb_pos) else 0
        }
    /**
     * The technical order name of the part ordered.
     * Example: /// Example: HOIST ADAPTER KIT
     * Constraints: Minimum length = 0, Maximum length = 150
     */
    val description : String?
        get() {
            val o = __offset(10)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val descriptionAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(10, 1)
    fun descriptionInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 10, 1)
    /**
     * Shipment Unit Identifier is the Transportation Control Number (TCN) for shipping that piece of equipment being requested.
     * Example: /// Example: FB44273196X501XXX
     * Constraints: Minimum length = 0, Maximum length = 17
     */
    val shipmentUnitId : String?
        get() {
            val o = __offset(12)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val shipmentUnitIdAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(12, 1)
    fun shipmentUnitIdInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 12, 1)
    /**
     * This is the Redeploy (return) Transportation Control Number/Tracking Reference Number for the selected item.
     * Example: /// Example: X400LA31949108
     * Constraints: Minimum length = 0, Maximum length = 17
     */
    val redeployShipmentUnitId : String?
        get() {
            val o = __offset(14)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val redeployShipmentUnitIdAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(14, 1)
    fun redeployShipmentUnitIdInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 14, 1)
    /**
     * A number assigned by Job Control to monitor and record maintenance actions required to correct the associated aircraft maintenance discrepancy.  It is seven, nine or twelve characters, depending on the base-specific numbering scheme.  If seven characters: characters 1-3 are Julian date, 4-7 are sequence numbers.  If nine characters: characters 1-2 are last two digits of the year, characters 3-5 are Julian date, 6-9 are sequence numbers.  If twelve characters: characters 1-2 are last two digits of the year, 3-5 are Julian date, 6-9 are sequence numbers, and 10-12 are a three-digit supplemental number.
     * Example: /// Example: 231942400
     * Constraints: Minimum length = 0, Maximum length = 12
     */
    val jobControlNumber : String?
        get() {
            val o = __offset(16)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val jobControlNumberAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(16, 1)
    fun jobControlNumberInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 16, 1)
    /**
     * The code that represents the International Civil Aviation Organization (ICAO) designations of an airport.
     * Example: /// Example: PHIK
     * Constraints: Minimum length = 0, Maximum length = 4
     */
    val sourceIcao : String?
        get() {
            val o = __offset(18)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val sourceIcaoAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(18, 1)
    fun sourceIcaoInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 18, 1)
    /**
     * System generated reference id for the transportation plan.  Format: TXXXXXNNNN  T - Transportation, Sequence Number, Node Id.
     * Example: /// Example: T89003
     * Constraints: Minimum length = 0, Maximum length = 10
     */
    val deployPlanNumber : String?
        get() {
            val o = __offset(20)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val deployPlanNumberAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(20, 1)
    fun deployPlanNumberInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 20, 1)
    /**
     * System generated reference id for the transportation plan.  Format: TXXXXXNNNN  T - Transportation, Sequence Number, Node Id.
     * Example: /// Example: T89003
     * Constraints: Minimum length = 0, Maximum length = 10
     */
    val redeployPlanNumber : String?
        get() {
            val o = __offset(22)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val redeployPlanNumberAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(22, 1)
    fun redeployPlanNumberInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 22, 1)
    /**
     * This element indicates whether or not the supplied item is contained within another item.
     * Example: /// Example: True
     * Constraints: No constraints specified.
     */
    val cannibalized : Boolean
        get() {
            val o = __offset(24)
            return if(o != 0) 0.toByte() != bb.get(o + bb_pos) else false
        }
    /**
     * The point of contact is a free text field to add information about the individual(s) with knowledge of the referenced requested or supplied item(s). The default value for this field is the last name, first name, and middle initial of the operator who created the records and/or generated the transaction.
     * Example: /// Example: SMITH, JOHN J
     * Constraints: Minimum length = 0, Maximum length = 68
     */
    val siPoc : String?
        get() {
            val o = __offset(26)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val siPocAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(26, 1)
    fun siPocInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 26, 1)
    /**
     * The time the item is ready, in ISO 8601 UTC format with millisecond precision.
     * Example: /// Example: 2023-07-17T19:04:00.123Z
     * Constraints: No constraints specified.
     */
    val readyTime : String?
        get() {
            val o = __offset(28)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val readyTimeAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(28, 1)
    fun readyTimeInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 28, 1)
    /**
     * The time the item is received, in ISO 8601 UTC format with millisecond precision.
     * Example: /// Example: 2023-07-17T19:04:00.123Z
     * Constraints: No constraints specified.
     */
    val receivedTime : String?
        get() {
            val o = __offset(30)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val receivedTimeAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(30, 1)
    fun receivedTimeInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 30, 1)
    /**
     * This element indicates if the supplied item is characterized as additional support.
     * Example: /// Example: True
     * Constraints: No constraints specified.
     */
    val resupportFlag : Boolean
        get() {
            val o = __offset(32)
            return if(o != 0) 0.toByte() != bb.get(o + bb_pos) else false
        }
    /**
     * The last time this supported item was updated, in ISO 8601 UTC format with millisecond precision.
     * Example: /// Example: 2023-07-17T19:04:00.123Z
     * Constraints: No constraints specified.
     */
    val itemLastChangedDate : String?
        get() {
            val o = __offset(34)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val itemLastChangedDateAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(34, 1)
    fun itemLastChangedDateInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 34, 1)
    /**
     * The parts associated with this support item.
     * Example: /// Example: No example provided.
     * Constraints: No constraints specified.
     */
    fun logisticsParts(j: Int) : String? {
        val o = __offset(36)
        return if (o != 0) {
            __string(__vector(o) + j * 4)
        } else {
            null
        }
    }
    val logisticsPartsLength : Int
        get() {
            val o = __offset(36); return if (o != 0) __vector_len(o) else 0
        }
    /**
     * The specialties required to implement this support item.
     * Example: /// Example: No example provided.
     * Constraints: No constraints specified.
     */
    fun logisticsSpecialties(j: Int) : String? {
        val o = __offset(38)
        return if (o != 0) {
            __string(__vector(o) + j * 4)
        } else {
            null
        }
    }
    val logisticsSpecialtiesLength : Int
        get() {
            val o = __offset(38); return if (o != 0) __vector_len(o) else 0
        }
    /**
     * Remarks associated with this support item.
     * Example: /// Example: No example provided.
     * Constraints: No constraints specified.
     */
    fun logisticsRemarks(j: Int) : String? {
        val o = __offset(40)
        return if (o != 0) {
            __string(__vector(o) + j * 4)
        } else {
            null
        }
    }
    val logisticsRemarksLength : Int
        get() {
            val o = __offset(40); return if (o != 0) __vector_len(o) else 0
        }
    companion object {
        fun validateVersion() = Constants.FLATBUFFERS_24_3_25()
        fun getRootAsLogisticsSupportItems_Full(_bb: ByteBuffer): LogisticsSupportItems_Full = getRootAsLogisticsSupportItems_Full(_bb, LogisticsSupportItems_Full())
        fun getRootAsLogisticsSupportItems_Full(_bb: ByteBuffer, obj: LogisticsSupportItems_Full): LogisticsSupportItems_Full {
            _bb.order(ByteOrder.LITTLE_ENDIAN)
            return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb))
        }
        fun LogisticsSupportItems_FullBufferHasIdentifier(_bb: ByteBuffer) : Boolean = __has_identifier(_bb, "LOGI")
        fun createLogisticsSupportItems_Full(builder: FlatBufferBuilder, recoveryRequestTypeCodeOffset: Int, requestNumberOffset: Int, quantity: Int, descriptionOffset: Int, shipmentUnitIdOffset: Int, redeployShipmentUnitIdOffset: Int, jobControlNumberOffset: Int, sourceIcaoOffset: Int, deployPlanNumberOffset: Int, redeployPlanNumberOffset: Int, cannibalized: Boolean, siPocOffset: Int, readyTimeOffset: Int, receivedTimeOffset: Int, resupportFlag: Boolean, itemLastChangedDateOffset: Int, logisticsPartsOffset: Int, logisticsSpecialtiesOffset: Int, logisticsRemarksOffset: Int) : Int {
            builder.startTable(19)
            addLogisticsRemarks(builder, logisticsRemarksOffset)
            addLogisticsSpecialties(builder, logisticsSpecialtiesOffset)
            addLogisticsParts(builder, logisticsPartsOffset)
            addItemLastChangedDate(builder, itemLastChangedDateOffset)
            addReceivedTime(builder, receivedTimeOffset)
            addReadyTime(builder, readyTimeOffset)
            addSiPOC(builder, siPocOffset)
            addRedeployPlanNumber(builder, redeployPlanNumberOffset)
            addDeployPlanNumber(builder, deployPlanNumberOffset)
            addSourceICAO(builder, sourceIcaoOffset)
            addJobControlNumber(builder, jobControlNumberOffset)
            addRedeployShipmentUnitId(builder, redeployShipmentUnitIdOffset)
            addShipmentUnitId(builder, shipmentUnitIdOffset)
            addDescription(builder, descriptionOffset)
            addQuantity(builder, quantity)
            addRequestNumber(builder, requestNumberOffset)
            addRecoveryRequestTypeCode(builder, recoveryRequestTypeCodeOffset)
            addResupportFlag(builder, resupportFlag)
            addCannibalized(builder, cannibalized)
            return endLogisticsSupportItems_Full(builder)
        }
        fun startLogisticsSupportItems_Full(builder: FlatBufferBuilder) = builder.startTable(19)
        fun addRecoveryRequestTypeCode(builder: FlatBufferBuilder, recoveryRequestTypeCode: Int) = builder.addOffset(0, recoveryRequestTypeCode, 0)
        fun addRequestNumber(builder: FlatBufferBuilder, requestNumber: Int) = builder.addOffset(1, requestNumber, 0)
        fun addQuantity(builder: FlatBufferBuilder, quantity: Int) = builder.addInt(2, quantity, 0)
        fun addDescription(builder: FlatBufferBuilder, description: Int) = builder.addOffset(3, description, 0)
        fun addShipmentUnitId(builder: FlatBufferBuilder, shipmentUnitId: Int) = builder.addOffset(4, shipmentUnitId, 0)
        fun addRedeployShipmentUnitId(builder: FlatBufferBuilder, redeployShipmentUnitId: Int) = builder.addOffset(5, redeployShipmentUnitId, 0)
        fun addJobControlNumber(builder: FlatBufferBuilder, jobControlNumber: Int) = builder.addOffset(6, jobControlNumber, 0)
        fun addSourceICAO(builder: FlatBufferBuilder, sourceIcao: Int) = builder.addOffset(7, sourceIcao, 0)
        fun addDeployPlanNumber(builder: FlatBufferBuilder, deployPlanNumber: Int) = builder.addOffset(8, deployPlanNumber, 0)
        fun addRedeployPlanNumber(builder: FlatBufferBuilder, redeployPlanNumber: Int) = builder.addOffset(9, redeployPlanNumber, 0)
        fun addCannibalized(builder: FlatBufferBuilder, cannibalized: Boolean) = builder.addBoolean(10, cannibalized, false)
        fun addSiPOC(builder: FlatBufferBuilder, siPoc: Int) = builder.addOffset(11, siPoc, 0)
        fun addReadyTime(builder: FlatBufferBuilder, readyTime: Int) = builder.addOffset(12, readyTime, 0)
        fun addReceivedTime(builder: FlatBufferBuilder, receivedTime: Int) = builder.addOffset(13, receivedTime, 0)
        fun addResupportFlag(builder: FlatBufferBuilder, resupportFlag: Boolean) = builder.addBoolean(14, resupportFlag, false)
        fun addItemLastChangedDate(builder: FlatBufferBuilder, itemLastChangedDate: Int) = builder.addOffset(15, itemLastChangedDate, 0)
        fun addLogisticsParts(builder: FlatBufferBuilder, logisticsParts: Int) = builder.addOffset(16, logisticsParts, 0)
        fun createLogisticsPartsVector(builder: FlatBufferBuilder, data: IntArray) : Int {
            builder.startVector(4, data.size, 4)
            for (i in data.size - 1 downTo 0) {
                builder.addOffset(data[i])
            }
            return builder.endVector()
        }
        fun startLogisticsPartsVector(builder: FlatBufferBuilder, numElems: Int) = builder.startVector(4, numElems, 4)
        fun addLogisticsSpecialties(builder: FlatBufferBuilder, logisticsSpecialties: Int) = builder.addOffset(17, logisticsSpecialties, 0)
        fun createLogisticsSpecialtiesVector(builder: FlatBufferBuilder, data: IntArray) : Int {
            builder.startVector(4, data.size, 4)
            for (i in data.size - 1 downTo 0) {
                builder.addOffset(data[i])
            }
            return builder.endVector()
        }
        fun startLogisticsSpecialtiesVector(builder: FlatBufferBuilder, numElems: Int) = builder.startVector(4, numElems, 4)
        fun addLogisticsRemarks(builder: FlatBufferBuilder, logisticsRemarks: Int) = builder.addOffset(18, logisticsRemarks, 0)
        fun createLogisticsRemarksVector(builder: FlatBufferBuilder, data: IntArray) : Int {
            builder.startVector(4, data.size, 4)
            for (i in data.size - 1 downTo 0) {
                builder.addOffset(data[i])
            }
            return builder.endVector()
        }
        fun startLogisticsRemarksVector(builder: FlatBufferBuilder, numElems: Int) = builder.startVector(4, numElems, 4)
        fun endLogisticsSupportItems_Full(builder: FlatBufferBuilder) : Int {
            val o = builder.endTable()
            return o
        }
        fun finishLogisticsSupportItemsFullBuffer(builder: FlatBufferBuilder, offset: Int) = builder.finish(offset, "LOGI")
        fun finishSizePrefixedLogisticsSupportItems_FullBuffer(builder: FlatBufferBuilder, offset: Int) = builder.finishSizePrefixed(offset, "LOGI")
    }
}
