// automatically generated by the FlatBuffers compiler, do not modify

import com.google.flatbuffers.BaseVector
import com.google.flatbuffers.BooleanVector
import com.google.flatbuffers.ByteVector
import com.google.flatbuffers.Constants
import com.google.flatbuffers.DoubleVector
import com.google.flatbuffers.FlatBufferBuilder
import com.google.flatbuffers.FloatVector
import com.google.flatbuffers.LongVector
import com.google.flatbuffers.StringVector
import com.google.flatbuffers.Struct
import com.google.flatbuffers.Table
import com.google.flatbuffers.UnionVector
import java.nio.ByteBuffer
import java.nio.ByteOrder
import kotlin.math.sign

/**
 * /// Launch stage information for a particular launch vehicle. A launch vehicle can have several stages, each with 1 to many engines.
 */
@Suppress("unused")
class Stage_Abridged : Table() {

    fun __init(_i: Int, _bb: ByteBuffer)  {
        __reset(_i, _bb)
    }
    fun __assign(_i: Int, _bb: ByteBuffer) : Stage_Abridged {
        __init(_i, _bb)
        return this
    }
    /**
     * Unique identifier of the record, auto-generated by the system.
     * Example: /// Example: STAGE-ID
     * Constraints: Minimum length = 1, Maximum length = 36
     */
    val id : String?
        get() {
            val o = __offset(4)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val idAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(4, 1)
    fun idInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 4, 1)
    /**
     * Identifier of the launch vehicle record for this stage.
     * Example: /// Example: LAUNCHVEHICLE-ID
     * Constraints: Minimum length = 1, Maximum length = 36
     */
    val idLaunchVehicle : String?
        get() {
            val o = __offset(6)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val idLaunchVehicleAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(6, 1)
    fun idLaunchVehicleInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 6, 1)
    /**
     * Identifier of the Engine record for this stage.
     * Example: /// Example: ENGINE-ID
     * Constraints: Minimum length = 1, Maximum length = 36
     */
    val idEngine : String?
        get() {
            val o = __offset(8)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val idEngineAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(8, 1)
    fun idEngineInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 8, 1)
    /**
     * Classification marking of the data in IC/CAPCO Portion-marked format.
     * Example: /// Example: U
     * Constraints: Minimum length = 1, Maximum length = 128
     */
    val classificationMarking : String?
        get() {
            val o = __offset(10)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val classificationMarkingAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(10, 1)
    fun classificationMarkingInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 10, 1)
    /**
     * The stage number of this launch stage.
     * Example: /// Example: 2
     * Constraints: No constraints specified.
     */
    val stageNumber : Int
        get() {
            val o = __offset(12)
            return if(o != 0) bb.getInt(o + bb_pos) else 0
        }
    /**
     * Engine cycle type (e.g. Electrostatic Ion, Pressure Fed, Hall, Catalytic Decomposition, etc.).
     * Example: /// Example: Electrostatic Ion
     * Constraints: Minimum length = 0, Maximum length = 64
     */
    val type : String?
        get() {
            val o = __offset(14)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val typeAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(14, 1)
    fun typeInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 14, 1)
    /**
     * ID of the organization that manufactures this launch stage.
     * Example: /// Example: 5feed5d7-d131-57e5-a3fd-acc173bca736
     * Constraints: Minimum length = 0, Maximum length = 36
     */
    val manufacturerOrgId : String?
        get() {
            val o = __offset(16)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val manufacturerOrgIdAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(16, 1)
    fun manufacturerOrgIdInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 16, 1)
    /**
     * The number of the specified engines on this launch stage.
     * Example: /// Example: 1
     * Constraints: No constraints specified.
     */
    val numEngines : Int
        get() {
            val o = __offset(18)
            return if(o != 0) bb.getInt(o + bb_pos) else 0
        }
    /**
     * Stage length in meters.
     * Example: /// Example: 25.13
     * Constraints: No constraints specified.
     */
    val length : Double
        get() {
            val o = __offset(20)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Stage maximum external diameter in meters.
     * Example: /// Example: 3.95
     * Constraints: No constraints specified.
     */
    val diameter : Double
        get() {
            val o = __offset(22)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Stage gross mass in kg.
     * Example: /// Example: 9956.1
     * Constraints: No constraints specified.
     */
    val mass : Double
        get() {
            val o = __offset(24)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Engine vernier or additional engine type.
     * Example: /// Example: vernier
     * Constraints: Minimum length = 0, Maximum length = 32
     */
    val vernier : String?
        get() {
            val o = __offset(26)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val vernierAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(26, 1)
    fun vernierInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 26, 1)
    /**
     * Number of vernier or additional engines.
     * Example: /// Example: 3
     * Constraints: No constraints specified.
     */
    val numVernier : Int
        get() {
            val o = __offset(28)
            return if(o != 0) bb.getInt(o + bb_pos) else 0
        }
    /**
     * Thrust of the stage main engine at sea level in kN.
     * Example: /// Example: 733.4
     * Constraints: No constraints specified.
     */
    val mainEngineThrustSeaLevel : Double
        get() {
            val o = __offset(30)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Thrust of the stage main engine in a vacuum in kN.
     * Example: /// Example: 733.4
     * Constraints: No constraints specified.
     */
    val mainEngineThrustVacuum : Double
        get() {
            val o = __offset(32)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Total thrust of the stage at sea level in kN.
     * Example: /// Example: 733.4
     * Constraints: No constraints specified.
     */
    val thrustSeaLevel : Double
        get() {
            val o = __offset(34)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Total thrust of the stage in a vacuum in kN.
     * Example: /// Example: 733.4
     * Constraints: No constraints specified.
     */
    val thrustVacuum : Double
        get() {
            val o = __offset(36)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Total burn time of the stage engines in seconds.
     * Example: /// Example: 256.3
     * Constraints: No constraints specified.
     */
    val burnTime : Double
        get() {
            val o = __offset(38)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Number of burns for the stage engines.
     * Example: /// Example: 1
     * Constraints: No constraints specified.
     */
    val numBurns : Int
        get() {
            val o = __offset(40)
            return if(o != 0) bb.getInt(o + bb_pos) else 0
        }
    /**
     * Total burn time of the vernier or additional stage engines in seconds.
     * Example: /// Example: 1.1
     * Constraints: No constraints specified.
     */
    val vernierBurnTime : Double
        get() {
            val o = __offset(42)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Total number of burns of the vernier or additional stage engines.
     * Example: /// Example: 4
     * Constraints: No constraints specified.
     */
    val vernierNumBurns : Int
        get() {
            val o = __offset(44)
            return if(o != 0) bb.getInt(o + bb_pos) else 0
        }
    /**
     * Total thrust of one of the vernier or additional engines at sea level in kN.
     * Example: /// Example: 4.1
     * Constraints: No constraints specified.
     */
    val vernierThrustSeaLevel : Double
        get() {
            val o = __offset(46)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Total thrust of one of the vernier or additional engines in a vacuum in kN.
     * Example: /// Example: 3.2
     * Constraints: No constraints specified.
     */
    val vernierThrustVacuum : Double
        get() {
            val o = __offset(48)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Number of launch stage elements used in this stage.
     * Example: /// Example: 2
     * Constraints: No constraints specified.
     */
    val numStageElements : Int
        get() {
            val o = __offset(50)
            return if(o != 0) bb.getInt(o + bb_pos) else 0
        }
    /**
     * Boolean indicating if this launch stage is reusable.
     * Example: /// Example: True
     * Constraints: No constraints specified.
     */
    val reusable : Boolean
        get() {
            val o = __offset(52)
            return if(o != 0) 0.toByte() != bb.get(o + bb_pos) else false
        }
    /**
     * Boolean indicating if this launch stage can be restarted.
     * Example: /// Example: True
     * Constraints: No constraints specified.
     */
    val restartable : Boolean
        get() {
            val o = __offset(54)
            return if(o != 0) 0.toByte() != bb.get(o + bb_pos) else false
        }
    /**
     * Control thruster 1 type.
     * Example: /// Example: controlThruster1
     * Constraints: Minimum length = 0, Maximum length = 64
     */
    val controlThruster1 : String?
        get() {
            val o = __offset(56)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val controlThruster1AsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(56, 1)
    fun controlThruster1InByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 56, 1)
    /**
     * Number of type control thruster 1.
     * Example: /// Example: 1
     * Constraints: No constraints specified.
     */
    val numControlThruster1 : Int
        get() {
            val o = __offset(58)
            return if(o != 0) bb.getInt(o + bb_pos) else 0
        }
    /**
     * Control thruster 2 type.
     * Example: /// Example: controlThruster2
     * Constraints: Minimum length = 0, Maximum length = 64
     */
    val controlThruster2 : String?
        get() {
            val o = __offset(60)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val controlThruster2AsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(60, 1)
    fun controlThruster2InByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 60, 1)
    /**
     * Number of type control thruster 2.
     * Example: /// Example: 1
     * Constraints: No constraints specified.
     */
    val numControlThruster2 : Int
        get() {
            val o = __offset(62)
            return if(o != 0) bb.getInt(o + bb_pos) else 0
        }
    /**
     * Array of URLs of photos of the stage.
     * Example: /// Example: ['photoURL']
     * Constraints: No constraints specified.
     */
    fun photoUrls(j: Int) : String? {
        val o = __offset(64)
        return if (o != 0) {
            __string(__vector(o) + j * 4)
        } else {
            null
        }
    }
    val photoUrlsLength : Int
        get() {
            val o = __offset(64); return if (o != 0) __vector_len(o) else 0
        }
    /**
     * Description/notes of the stage.
     * Example: /// Example: Sample Notes
     * Constraints: Minimum length = 0, Maximum length = 256
     */
    val notes : String?
        get() {
            val o = __offset(66)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val notesAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(66, 1)
    fun notesInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 66, 1)
    /**
     * Description/notes of the stage avionics.
     * Example: /// Example: Sample Notes
     * Constraints: Minimum length = 0, Maximum length = 256
     */
    val avionicsNotes : String?
        get() {
            val o = __offset(68)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val avionicsNotesAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(68, 1)
    fun avionicsNotesInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 68, 1)
    /**
     * Time the row was created in the database, auto-populated by the system.
     * Example: /// Example: 2018-01-01T16:00:00.123Z
     * Constraints: No constraints specified.
     */
    val createdAt : String?
        get() {
            val o = __offset(70)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val createdAtAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(70, 1)
    fun createdAtInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 70, 1)
    /**
     * Application user who created the row in the database, auto-populated by the system.
     * Example: /// Example: some.user
     * Constraints: Minimum length = 1, Maximum length = 64
     */
    val createdBy : String?
        get() {
            val o = __offset(72)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val createdByAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(72, 1)
    fun createdByInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 72, 1)
    /**
     * Source of the data.
     * Example: /// Example: Bluestaq
     * Constraints: Minimum length = 1, Maximum length = 64
     */
    val source : String?
        get() {
            val o = __offset(74)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val sourceAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(74, 1)
    fun sourceInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 74, 1)
    /**
     * Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
     * Example: /// Example: THIRD_PARTY_DATASOURCE
     * Constraints: Minimum length = 0, Maximum length = 64
     */
    val origin : String?
        get() {
            val o = __offset(76)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val originAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(76, 1)
    fun originInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 76, 1)
    /**
     * The originating source network on which this record was created, auto-populated by the system.
     * Example: /// Example: ORIG
     * Constraints: Minimum length = 1, Maximum length = 32
     */
    val origNetwork : String?
        get() {
            val o = __offset(78)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val origNetworkAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(78, 1)
    fun origNetworkInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 78, 1)
    /**
     * Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
     * EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
     * REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
     * SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
     * TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
     * Example: /// Example: TEST
     * Constraints: Minimum length = 1, Maximum length = 32
     */
    val dataMode : Byte
        get() {
            val o = __offset(80)
            return if(o != 0) bb.get(o + bb_pos) else 0
        }
    companion object {
        fun validateVersion() = Constants.FLATBUFFERS_24_3_25()
        fun getRootAsStage_Abridged(_bb: ByteBuffer): Stage_Abridged = getRootAsStage_Abridged(_bb, Stage_Abridged())
        fun getRootAsStage_Abridged(_bb: ByteBuffer, obj: Stage_Abridged): Stage_Abridged {
            _bb.order(ByteOrder.LITTLE_ENDIAN)
            return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb))
        }
        fun Stage_AbridgedBufferHasIdentifier(_bb: ByteBuffer) : Boolean = __has_identifier(_bb, "STAG")
        fun createStage_Abridged(builder: FlatBufferBuilder, idOffset: Int, idLaunchVehicleOffset: Int, idEngineOffset: Int, classificationMarkingOffset: Int, stageNumber: Int, typeOffset: Int, manufacturerOrgIdOffset: Int, numEngines: Int, length: Double, diameter: Double, mass: Double, vernierOffset: Int, numVernier: Int, mainEngineThrustSeaLevel: Double, mainEngineThrustVacuum: Double, thrustSeaLevel: Double, thrustVacuum: Double, burnTime: Double, numBurns: Int, vernierBurnTime: Double, vernierNumBurns: Int, vernierThrustSeaLevel: Double, vernierThrustVacuum: Double, numStageElements: Int, reusable: Boolean, restartable: Boolean, controlThruster1Offset: Int, numControlThruster1: Int, controlThruster2Offset: Int, numControlThruster2: Int, photoUrlsOffset: Int, notesOffset: Int, avionicsNotesOffset: Int, createdAtOffset: Int, createdByOffset: Int, sourceOffset: Int, originOffset: Int, origNetworkOffset: Int, dataMode: Byte) : Int {
            builder.startTable(39)
            addVernierThrustVacuum(builder, vernierThrustVacuum)
            addVernierThrustSeaLevel(builder, vernierThrustSeaLevel)
            addVernierBurnTime(builder, vernierBurnTime)
            addBurnTime(builder, burnTime)
            addThrustVacuum(builder, thrustVacuum)
            addThrustSeaLevel(builder, thrustSeaLevel)
            addMainEngineThrustVacuum(builder, mainEngineThrustVacuum)
            addMainEngineThrustSeaLevel(builder, mainEngineThrustSeaLevel)
            addMass(builder, mass)
            addDiameter(builder, diameter)
            addLength(builder, length)
            addOrigNetwork(builder, origNetworkOffset)
            addOrigin(builder, originOffset)
            addSource(builder, sourceOffset)
            addCreatedBy(builder, createdByOffset)
            addCreatedAt(builder, createdAtOffset)
            addAvionicsNotes(builder, avionicsNotesOffset)
            addNotes(builder, notesOffset)
            addPhotoURLs(builder, photoUrlsOffset)
            addNumControlThruster2(builder, numControlThruster2)
            addControlThruster2(builder, controlThruster2Offset)
            addNumControlThruster1(builder, numControlThruster1)
            addControlThruster1(builder, controlThruster1Offset)
            addNumStageElements(builder, numStageElements)
            addVernierNumBurns(builder, vernierNumBurns)
            addNumBurns(builder, numBurns)
            addNumVernier(builder, numVernier)
            addVernier(builder, vernierOffset)
            addNumEngines(builder, numEngines)
            addManufacturerOrgId(builder, manufacturerOrgIdOffset)
            addType(builder, typeOffset)
            addStageNumber(builder, stageNumber)
            addClassificationMarking(builder, classificationMarkingOffset)
            addIdEngine(builder, idEngineOffset)
            addIdLaunchVehicle(builder, idLaunchVehicleOffset)
            addId(builder, idOffset)
            addDataMode(builder, dataMode)
            addRestartable(builder, restartable)
            addReusable(builder, reusable)
            return endStage_Abridged(builder)
        }
        fun startStage_Abridged(builder: FlatBufferBuilder) = builder.startTable(39)
        fun addId(builder: FlatBufferBuilder, id: Int) = builder.addOffset(0, id, 0)
        fun addIdLaunchVehicle(builder: FlatBufferBuilder, idLaunchVehicle: Int) = builder.addOffset(1, idLaunchVehicle, 0)
        fun addIdEngine(builder: FlatBufferBuilder, idEngine: Int) = builder.addOffset(2, idEngine, 0)
        fun addClassificationMarking(builder: FlatBufferBuilder, classificationMarking: Int) = builder.addOffset(3, classificationMarking, 0)
        fun addStageNumber(builder: FlatBufferBuilder, stageNumber: Int) = builder.addInt(4, stageNumber, 0)
        fun addType(builder: FlatBufferBuilder, type: Int) = builder.addOffset(5, type, 0)
        fun addManufacturerOrgId(builder: FlatBufferBuilder, manufacturerOrgId: Int) = builder.addOffset(6, manufacturerOrgId, 0)
        fun addNumEngines(builder: FlatBufferBuilder, numEngines: Int) = builder.addInt(7, numEngines, 0)
        fun addLength(builder: FlatBufferBuilder, length: Double) = builder.addDouble(8, length, 0.0)
        fun addDiameter(builder: FlatBufferBuilder, diameter: Double) = builder.addDouble(9, diameter, 0.0)
        fun addMass(builder: FlatBufferBuilder, mass: Double) = builder.addDouble(10, mass, 0.0)
        fun addVernier(builder: FlatBufferBuilder, vernier: Int) = builder.addOffset(11, vernier, 0)
        fun addNumVernier(builder: FlatBufferBuilder, numVernier: Int) = builder.addInt(12, numVernier, 0)
        fun addMainEngineThrustSeaLevel(builder: FlatBufferBuilder, mainEngineThrustSeaLevel: Double) = builder.addDouble(13, mainEngineThrustSeaLevel, 0.0)
        fun addMainEngineThrustVacuum(builder: FlatBufferBuilder, mainEngineThrustVacuum: Double) = builder.addDouble(14, mainEngineThrustVacuum, 0.0)
        fun addThrustSeaLevel(builder: FlatBufferBuilder, thrustSeaLevel: Double) = builder.addDouble(15, thrustSeaLevel, 0.0)
        fun addThrustVacuum(builder: FlatBufferBuilder, thrustVacuum: Double) = builder.addDouble(16, thrustVacuum, 0.0)
        fun addBurnTime(builder: FlatBufferBuilder, burnTime: Double) = builder.addDouble(17, burnTime, 0.0)
        fun addNumBurns(builder: FlatBufferBuilder, numBurns: Int) = builder.addInt(18, numBurns, 0)
        fun addVernierBurnTime(builder: FlatBufferBuilder, vernierBurnTime: Double) = builder.addDouble(19, vernierBurnTime, 0.0)
        fun addVernierNumBurns(builder: FlatBufferBuilder, vernierNumBurns: Int) = builder.addInt(20, vernierNumBurns, 0)
        fun addVernierThrustSeaLevel(builder: FlatBufferBuilder, vernierThrustSeaLevel: Double) = builder.addDouble(21, vernierThrustSeaLevel, 0.0)
        fun addVernierThrustVacuum(builder: FlatBufferBuilder, vernierThrustVacuum: Double) = builder.addDouble(22, vernierThrustVacuum, 0.0)
        fun addNumStageElements(builder: FlatBufferBuilder, numStageElements: Int) = builder.addInt(23, numStageElements, 0)
        fun addReusable(builder: FlatBufferBuilder, reusable: Boolean) = builder.addBoolean(24, reusable, false)
        fun addRestartable(builder: FlatBufferBuilder, restartable: Boolean) = builder.addBoolean(25, restartable, false)
        fun addControlThruster1(builder: FlatBufferBuilder, controlThruster1: Int) = builder.addOffset(26, controlThruster1, 0)
        fun addNumControlThruster1(builder: FlatBufferBuilder, numControlThruster1: Int) = builder.addInt(27, numControlThruster1, 0)
        fun addControlThruster2(builder: FlatBufferBuilder, controlThruster2: Int) = builder.addOffset(28, controlThruster2, 0)
        fun addNumControlThruster2(builder: FlatBufferBuilder, numControlThruster2: Int) = builder.addInt(29, numControlThruster2, 0)
        fun addPhotoURLs(builder: FlatBufferBuilder, photoUrls: Int) = builder.addOffset(30, photoUrls, 0)
        fun createPhotoUrlsVector(builder: FlatBufferBuilder, data: IntArray) : Int {
            builder.startVector(4, data.size, 4)
            for (i in data.size - 1 downTo 0) {
                builder.addOffset(data[i])
            }
            return builder.endVector()
        }
        fun startPhotoUrlsVector(builder: FlatBufferBuilder, numElems: Int) = builder.startVector(4, numElems, 4)
        fun addNotes(builder: FlatBufferBuilder, notes: Int) = builder.addOffset(31, notes, 0)
        fun addAvionicsNotes(builder: FlatBufferBuilder, avionicsNotes: Int) = builder.addOffset(32, avionicsNotes, 0)
        fun addCreatedAt(builder: FlatBufferBuilder, createdAt: Int) = builder.addOffset(33, createdAt, 0)
        fun addCreatedBy(builder: FlatBufferBuilder, createdBy: Int) = builder.addOffset(34, createdBy, 0)
        fun addSource(builder: FlatBufferBuilder, source: Int) = builder.addOffset(35, source, 0)
        fun addOrigin(builder: FlatBufferBuilder, origin: Int) = builder.addOffset(36, origin, 0)
        fun addOrigNetwork(builder: FlatBufferBuilder, origNetwork: Int) = builder.addOffset(37, origNetwork, 0)
        fun addDataMode(builder: FlatBufferBuilder, dataMode: Byte) = builder.addByte(38, dataMode, 0)
        fun endStage_Abridged(builder: FlatBufferBuilder) : Int {
            val o = builder.endTable()
            return o
        }
        fun finishStageAbridgedBuffer(builder: FlatBufferBuilder, offset: Int) = builder.finish(offset, "STAG")
        fun finishSizePrefixedStage_AbridgedBuffer(builder: FlatBufferBuilder, offset: Int) = builder.finishSizePrefixed(offset, "STAG")
    }
}
