// automatically generated by the FlatBuffers compiler, do not modify

import com.google.flatbuffers.BaseVector
import com.google.flatbuffers.BooleanVector
import com.google.flatbuffers.ByteVector
import com.google.flatbuffers.Constants
import com.google.flatbuffers.DoubleVector
import com.google.flatbuffers.FlatBufferBuilder
import com.google.flatbuffers.FloatVector
import com.google.flatbuffers.LongVector
import com.google.flatbuffers.StringVector
import com.google.flatbuffers.Struct
import com.google.flatbuffers.Table
import com.google.flatbuffers.UnionVector
import java.nio.ByteBuffer
import java.nio.ByteOrder
import kotlin.math.sign

/**
 * /// Characteristic attributes of a IonoObservation.
 */
@Suppress("unused")
class IonoObservationCharAtts_Full : Table() {

    fun __init(_i: Int, _bb: ByteBuffer)  {
        __reset(_i, _bb)
    }
    fun __assign(_i: Int, _bb: ByteBuffer) : IonoObservationCharAtts_Full {
        __init(_i, _bb)
        return this
    }
    /**
     * Characteristic's URSI ID. See the characteristic's description for its corresponding URSI ID.
     * Example: /// Example: 04
     * Constraints: Minimum length = 0, Maximum length = 3
     */
    val ursiId : String?
        get() {
            val o = __offset(4)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val ursiIdAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(4, 1)
    fun ursiIdInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 4, 1)
    /**
     * Characteristic name. This value should reflect the UDL field name for the corresponding characteristic.
     * Example: /// Example: hprimeF2
     * Constraints: Minimum length = 0, Maximum length = 16
     */
    val charName : String?
        get() {
            val o = __offset(6)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val charNameAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(6, 1)
    fun charNameInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 6, 1)
    /**
     * Specified characteristic's lower bound. Should be less than or equal to the characteristic's current value as set in this record.
     * Example: /// Example: 1.26
     * Constraints: No constraints specified.
     */
    val lowerBound : Double
        get() {
            val o = __offset(8)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Specified characteristic's upper bound. Should be greater than or equal to the characteristic's current value as set in this record.
     * Example: /// Example: 2.57
     * Constraints: No constraints specified.
     */
    val upperBound : Double
        get() {
            val o = __offset(10)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Qualifying letter (Q) for the characteristic specified by URSI ID. Describes specific ionospheric conditions, beyond numerical values.
     * Example: /// Example: T
     * Constraints: No constraints specified.
     */
    val q : String?
        get() {
            val o = __offset(12)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val qAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(12, 1)
    fun qInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 12, 1)
    /**
     * Descriptive letter (D) for the characteristic specified by URSI ID. Describes specific ionospheric conditions, beyond numerical values.
     * Example: /// Example: K
     * Constraints: No constraints specified.
     */
    val d : String?
        get() {
            val o = __offset(14)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val dAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(14, 1)
    fun dInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 14, 1)
    /**
     * Name of the climate model.
     * Example: /// Example: IRI
     * Constraints: Minimum length = 0, Maximum length = 64
     */
    val climateModelName : String?
        get() {
            val o = __offset(16)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val climateModelNameAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(16, 1)
    fun climateModelNameInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 16, 1)
    /**
     * List of options for the climate model.
     * Example: /// Example: ['URSI-88', 'No storm']
     * Constraints: No constraints specified.
     */
    fun climateModelOptions(j: Int) : String? {
        val o = __offset(18)
        return if (o != 0) {
            __string(__vector(o) + j * 4)
        } else {
            null
        }
    }
    val climateModelOptionsLength : Int
        get() {
            val o = __offset(18); return if (o != 0) __vector_len(o) else 0
        }
    /**
     * Input parameters for the climate model.
     * Example: /// Example: ['ISSN1 88.1', 'Option 2']
     * Constraints: No constraints specified.
     */
    fun climateModelInputParams(j: Int) : String? {
        val o = __offset(20)
        return if (o != 0) {
            __string(__vector(o) + j * 4)
        } else {
            null
        }
    }
    val climateModelInputParamsLength : Int
        get() {
            val o = __offset(20); return if (o != 0) __vector_len(o) else 0
        }
    /**
     * Uncertainty Bounds (lower and upper) define an interval around reported value that contains true value at the specified probability level. Probability levels are specified in terms of percentile (from 1 to 100) or the standard deviation, sigma (e.g. 1sigma, 2sigma, 3sigma, 5percentile, 10percentile, 25percentile).
     * Example: /// Example: 1sigma
     * Constraints: No constraints specified.
     */
    val uncertaintyBoundType : String?
        get() {
            val o = __offset(22)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val uncertaintyBoundTypeAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(22, 1)
    fun uncertaintyBoundTypeInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 22, 1)
    companion object {
        fun validateVersion() = Constants.FLATBUFFERS_24_3_25()
        fun getRootAsIonoObservationCharAtts_Full(_bb: ByteBuffer): IonoObservationCharAtts_Full = getRootAsIonoObservationCharAtts_Full(_bb, IonoObservationCharAtts_Full())
        fun getRootAsIonoObservationCharAtts_Full(_bb: ByteBuffer, obj: IonoObservationCharAtts_Full): IonoObservationCharAtts_Full {
            _bb.order(ByteOrder.LITTLE_ENDIAN)
            return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb))
        }
        fun IonoObservationCharAtts_FullBufferHasIdentifier(_bb: ByteBuffer) : Boolean = __has_identifier(_bb, "IONO")
        fun createIonoObservationCharAtts_Full(builder: FlatBufferBuilder, ursiIdOffset: Int, charNameOffset: Int, lowerBound: Double, upperBound: Double, qOffset: Int, dOffset: Int, climateModelNameOffset: Int, climateModelOptionsOffset: Int, climateModelInputParamsOffset: Int, uncertaintyBoundTypeOffset: Int) : Int {
            builder.startTable(10)
            addUpperBound(builder, upperBound)
            addLowerBound(builder, lowerBound)
            addUncertaintyBoundType(builder, uncertaintyBoundTypeOffset)
            addClimateModelInputParams(builder, climateModelInputParamsOffset)
            addClimateModelOptions(builder, climateModelOptionsOffset)
            addClimateModelName(builder, climateModelNameOffset)
            addD(builder, dOffset)
            addQ(builder, qOffset)
            addCharName(builder, charNameOffset)
            addUrsiID(builder, ursiIdOffset)
            return endIonoObservationCharAtts_Full(builder)
        }
        fun startIonoObservationCharAtts_Full(builder: FlatBufferBuilder) = builder.startTable(10)
        fun addUrsiID(builder: FlatBufferBuilder, ursiId: Int) = builder.addOffset(0, ursiId, 0)
        fun addCharName(builder: FlatBufferBuilder, charName: Int) = builder.addOffset(1, charName, 0)
        fun addLowerBound(builder: FlatBufferBuilder, lowerBound: Double) = builder.addDouble(2, lowerBound, 0.0)
        fun addUpperBound(builder: FlatBufferBuilder, upperBound: Double) = builder.addDouble(3, upperBound, 0.0)
        fun addQ(builder: FlatBufferBuilder, q: Int) = builder.addOffset(4, q, 0)
        fun addD(builder: FlatBufferBuilder, d: Int) = builder.addOffset(5, d, 0)
        fun addClimateModelName(builder: FlatBufferBuilder, climateModelName: Int) = builder.addOffset(6, climateModelName, 0)
        fun addClimateModelOptions(builder: FlatBufferBuilder, climateModelOptions: Int) = builder.addOffset(7, climateModelOptions, 0)
        fun createClimateModelOptionsVector(builder: FlatBufferBuilder, data: IntArray) : Int {
            builder.startVector(4, data.size, 4)
            for (i in data.size - 1 downTo 0) {
                builder.addOffset(data[i])
            }
            return builder.endVector()
        }
        fun startClimateModelOptionsVector(builder: FlatBufferBuilder, numElems: Int) = builder.startVector(4, numElems, 4)
        fun addClimateModelInputParams(builder: FlatBufferBuilder, climateModelInputParams: Int) = builder.addOffset(8, climateModelInputParams, 0)
        fun createClimateModelInputParamsVector(builder: FlatBufferBuilder, data: IntArray) : Int {
            builder.startVector(4, data.size, 4)
            for (i in data.size - 1 downTo 0) {
                builder.addOffset(data[i])
            }
            return builder.endVector()
        }
        fun startClimateModelInputParamsVector(builder: FlatBufferBuilder, numElems: Int) = builder.startVector(4, numElems, 4)
        fun addUncertaintyBoundType(builder: FlatBufferBuilder, uncertaintyBoundType: Int) = builder.addOffset(9, uncertaintyBoundType, 0)
        fun endIonoObservationCharAtts_Full(builder: FlatBufferBuilder) : Int {
            val o = builder.endTable()
            return o
        }
        fun finishIonoObservationCharAttsFullBuffer(builder: FlatBufferBuilder, offset: Int) = builder.finish(offset, "IONO")
        fun finishSizePrefixedIonoObservationCharAtts_FullBuffer(builder: FlatBufferBuilder, offset: Int) = builder.finishSizePrefixed(offset, "IONO")
    }
}
