// automatically generated by the FlatBuffers compiler, do not modify

import com.google.flatbuffers.BaseVector
import com.google.flatbuffers.BooleanVector
import com.google.flatbuffers.ByteVector
import com.google.flatbuffers.Constants
import com.google.flatbuffers.DoubleVector
import com.google.flatbuffers.FlatBufferBuilder
import com.google.flatbuffers.FloatVector
import com.google.flatbuffers.LongVector
import com.google.flatbuffers.StringVector
import com.google.flatbuffers.Struct
import com.google.flatbuffers.Table
import com.google.flatbuffers.UnionVector
import java.nio.ByteBuffer
import java.nio.ByteOrder
import kotlin.math.sign

/**
 * /// Theoretical Keplarian orbital elements belonging to an object of interest's manifold describing a possible/theoretical orbit for an object of interest for tasking purposes.
 */
@Suppress("unused")
class ManifoldElset_Ingest : Table() {

    fun __init(_i: Int, _bb: ByteBuffer)  {
        __reset(_i, _bb)
    }
    fun __assign(_i: Int, _bb: ByteBuffer) : ManifoldElset_Ingest {
        __init(_i, _bb)
        return this
    }
    /**
     * Unique identifier of the record, auto-generated by the system.
     * Example: /// Example: MANIFOLDELSET-ID
     * Constraints: Minimum length = 1, Maximum length = 36
     */
    val id : String?
        get() {
            val o = __offset(4)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val idAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(4, 1)
    fun idInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 4, 1)
    /**
     * Identifier of the parent Manifold record.
     * Example: /// Example: REF-MANIFOLD-ID
     * Constraints: Minimum length = 1, Maximum length = 36
     */
    val idManifold : String?
        get() {
            val o = __offset(6)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val idManifoldAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(6, 1)
    fun idManifoldInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 6, 1)
    /**
     * Classification marking of the data in IC/CAPCO Portion-marked format.
     * Example: /// Example: U
     * Constraints: Minimum length = 1, Maximum length = 128
     */
    val classificationMarking : String?
        get() {
            val o = __offset(8)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val classificationMarkingAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(8, 1)
    fun classificationMarkingInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 8, 1)
    /**
     * A placeholder satellite number and not a true NORAD catalog number.
     * Example: /// Example: 10
     * Constraints: No constraints specified.
     */
    val tmpSatNo : Int
        get() {
            val o = __offset(10)
            return if(o != 0) bb.getInt(o + bb_pos) else 0
        }
    /**
     * Elset epoch time in ISO 8601 UTC format, with microsecond precision.
     * Example: /// Example: 2021-01-01T01:01:01.123456Z
     * Constraints: No constraints specified.
     */
    val epoch : String?
        get() {
            val o = __offset(12)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val epochAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(12, 1)
    fun epochInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 12, 1)
    /**
     * The constant angular speed required for the body to complete one circular orbit in the same amount of time as the actual elliptical orbit with variable speed. Measured in revolutions per day.
     * Example: /// Example: 10.23
     * Constraints: No constraints specified.
     */
    val meanMotion : Double
        get() {
            val o = __offset(14)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * The orbital eccentricity of an astronomical object is a parameter that determines the amount by which its orbit around another body deviates from a perfect circle. A value of 0 is a circular orbit, values between 0 and 1 form an elliptic orbit, 1 is a parabolic escape orbit, and greater than 1 is a hyperbolic escape orbit.
     * Example: /// Example: 0.5
     * Constraints: No constraints specified.
     */
    val eccentricity : Double
        get() {
            val o = __offset(16)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * The angle between the equator and the orbit when looking from the center of the Earth. If the orbit went exactly around the equator from left to right, then the inclination would be 0. The inclination ranges from 0 to 180 degrees.
     * Example: /// Example: 90.23
     * Constraints: No constraints specified.
     */
    val inclination : Double
        get() {
            val o = __offset(18)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Right ascension of the ascending node, or RAAN is the angle as measured in degrees eastwards (or, as seen from the north, counterclockwise) from the First Point of Aries to the ascending node, which is where the orbit crosses the equator when traveling north.
     * Example: /// Example: 10.23
     * Constraints: No constraints specified.
     */
    val raan : Double
        get() {
            val o = __offset(20)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * The argument of perigee is the angle in degrees formed between the perigee and the ascending node. If the perigee would occur at the ascending node, the argument of perigee would be 0.
     * Example: /// Example: 10.23
     * Constraints: No constraints specified.
     */
    val argOfPerigee : Double
        get() {
            val o = __offset(22)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Where the satellite is in its orbital path. The mean anomaly ranges from 0 to 360 degrees. The mean anomaly is referenced to the perigee. If the satellite were at the perigee, the mean anomaly would be 0.
     * Example: /// Example: 10.23
     * Constraints: No constraints specified.
     */
    val meanAnomaly : Double
        get() {
            val o = __offset(24)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * The current revolution number. The value is incremented when a satellite crosses the equator on an ascending pass.
     * Example: /// Example: 123
     * Constraints: No constraints specified.
     */
    val revNo : Int
        get() {
            val o = __offset(26)
            return if(o != 0) bb.getInt(o + bb_pos) else 0
        }
    /**
     * The drag term for SGP4 orbital model, used for calculating decay constants for altitude, eccentricity etc, measured in inverse earth radii.
     * Example: /// Example: 10.23
     * Constraints: No constraints specified.
     */
    val bStar : Double
        get() {
            val o = __offset(28)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * 1st derivative of the mean motion with respect to time. Units are revolutions per day squared.
     * Example: /// Example: 10.23
     * Constraints: No constraints specified.
     */
    val meanMotionDot : Double
        get() {
            val o = __offset(30)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * 2nd derivative of the mean motion with respect to time. Units are revolutions per day cubed.
     * Example: /// Example: 10.23
     * Constraints: No constraints specified.
     */
    val meanMotionDdot : Double
        get() {
            val o = __offset(32)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * The sum of the periapsis and apoapsis distances divided by two. For circular orbits, the semimajor axis is the distance between the centers of the bodies, not the distance of the bodies from the center of mass.
     * Example: /// Example: 10.23
     * Constraints: No constraints specified.
     */
    val semiMajorAxis : Double
        get() {
            val o = __offset(34)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Period of the orbit equal to inverse of mean motion.
     * Example: /// Example: 10.23
     * Constraints: No constraints specified.
     */
    val period : Double
        get() {
            val o = __offset(36)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * The Orbit point furthest from the center of the earth in kilometers.
     * Example: /// Example: 10.23
     * Constraints: No constraints specified.
     */
    val apogee : Double
        get() {
            val o = __offset(38)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * The orbit point nearest to the center of the earth in kilometers.
     * Example: /// Example: 10.23
     * Constraints: No constraints specified.
     */
    val perigee : Double
        get() {
            val o = __offset(40)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Read only derived/generated line1 of a legacy TLE (two line element set) format, ignored on create/edit operations.
     * Example: /// Example: No example provided.
     * Constraints: Minimum length = 0, Maximum length = 69
     */
    val line1 : String?
        get() {
            val o = __offset(42)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val line1AsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(42, 1)
    fun line1InByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 42, 1)
    /**
     * Read only derived/generated line2 of a legacy TLE (two line element set) format, ignored on create/edit operations.
     * Example: /// Example: No example provided.
     * Constraints: Minimum length = 0, Maximum length = 69
     */
    val line2 : String?
        get() {
            val o = __offset(44)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val line2AsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(44, 1)
    fun line2InByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 44, 1)
    /**
     * Time the row was created in the database, auto-populated by the system.
     * Example: /// Example: 2018-01-01T16:00:00.123Z
     * Constraints: No constraints specified.
     */
    val createdAt : String?
        get() {
            val o = __offset(46)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val createdAtAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(46, 1)
    fun createdAtInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 46, 1)
    /**
     * Application user who created the row in the database, auto-populated by the system.
     * Example: /// Example: some.user
     * Constraints: Minimum length = 1, Maximum length = 64
     */
    val createdBy : String?
        get() {
            val o = __offset(48)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val createdByAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(48, 1)
    fun createdByInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 48, 1)
    /**
     * Source of the data.
     * Example: /// Example: Bluestaq
     * Constraints: Minimum length = 1, Maximum length = 64
     */
    val source : String?
        get() {
            val o = __offset(50)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val sourceAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(50, 1)
    fun sourceInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 50, 1)
    /**
     * Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
     * Example: /// Example: THIRD_PARTY_DATASOURCE
     * Constraints: Minimum length = 0, Maximum length = 64
     */
    val origin : String?
        get() {
            val o = __offset(52)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val originAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(52, 1)
    fun originInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 52, 1)
    /**
     * Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
     * EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
     * REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
     * SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
     * TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
     * Example: /// Example: TEST
     * Constraints: Minimum length = 1, Maximum length = 32
     */
    val dataMode : Byte
        get() {
            val o = __offset(54)
            return if(o != 0) bb.get(o + bb_pos) else 0
        }
    /**
     * The originating source network on which this record was created, auto-populated by the system.
     * Example: /// Example: ORIG
     * Constraints: Minimum length = 0, Maximum length = 32
     */
    val origNetwork : String?
        get() {
            val o = __offset(56)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val origNetworkAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(56, 1)
    fun origNetworkInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 56, 1)
    companion object {
        fun validateVersion() = Constants.FLATBUFFERS_24_3_25()
        fun getRootAsManifoldElset_Ingest(_bb: ByteBuffer): ManifoldElset_Ingest = getRootAsManifoldElset_Ingest(_bb, ManifoldElset_Ingest())
        fun getRootAsManifoldElset_Ingest(_bb: ByteBuffer, obj: ManifoldElset_Ingest): ManifoldElset_Ingest {
            _bb.order(ByteOrder.LITTLE_ENDIAN)
            return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb))
        }
        fun ManifoldElset_IngestBufferHasIdentifier(_bb: ByteBuffer) : Boolean = __has_identifier(_bb, "MANI")
        fun createManifoldElset_Ingest(builder: FlatBufferBuilder, idOffset: Int, idManifoldOffset: Int, classificationMarkingOffset: Int, tmpSatNo: Int, epochOffset: Int, meanMotion: Double, eccentricity: Double, inclination: Double, raan: Double, argOfPerigee: Double, meanAnomaly: Double, revNo: Int, bStar: Double, meanMotionDot: Double, meanMotionDdot: Double, semiMajorAxis: Double, period: Double, apogee: Double, perigee: Double, line1Offset: Int, line2Offset: Int, createdAtOffset: Int, createdByOffset: Int, sourceOffset: Int, originOffset: Int, dataMode: Byte, origNetworkOffset: Int) : Int {
            builder.startTable(27)
            addPerigee(builder, perigee)
            addApogee(builder, apogee)
            addPeriod(builder, period)
            addSemiMajorAxis(builder, semiMajorAxis)
            addMeanMotionDDot(builder, meanMotionDdot)
            addMeanMotionDot(builder, meanMotionDot)
            addBStar(builder, bStar)
            addMeanAnomaly(builder, meanAnomaly)
            addArgOfPerigee(builder, argOfPerigee)
            addRaan(builder, raan)
            addInclination(builder, inclination)
            addEccentricity(builder, eccentricity)
            addMeanMotion(builder, meanMotion)
            addOrigNetwork(builder, origNetworkOffset)
            addOrigin(builder, originOffset)
            addSource(builder, sourceOffset)
            addCreatedBy(builder, createdByOffset)
            addCreatedAt(builder, createdAtOffset)
            addLine2(builder, line2Offset)
            addLine1(builder, line1Offset)
            addRevNo(builder, revNo)
            addEpoch(builder, epochOffset)
            addTmpSatNo(builder, tmpSatNo)
            addClassificationMarking(builder, classificationMarkingOffset)
            addIdManifold(builder, idManifoldOffset)
            addId(builder, idOffset)
            addDataMode(builder, dataMode)
            return endManifoldElset_Ingest(builder)
        }
        fun startManifoldElset_Ingest(builder: FlatBufferBuilder) = builder.startTable(27)
        fun addId(builder: FlatBufferBuilder, id: Int) = builder.addOffset(0, id, 0)
        fun addIdManifold(builder: FlatBufferBuilder, idManifold: Int) = builder.addOffset(1, idManifold, 0)
        fun addClassificationMarking(builder: FlatBufferBuilder, classificationMarking: Int) = builder.addOffset(2, classificationMarking, 0)
        fun addTmpSatNo(builder: FlatBufferBuilder, tmpSatNo: Int) = builder.addInt(3, tmpSatNo, 0)
        fun addEpoch(builder: FlatBufferBuilder, epoch: Int) = builder.addOffset(4, epoch, 0)
        fun addMeanMotion(builder: FlatBufferBuilder, meanMotion: Double) = builder.addDouble(5, meanMotion, 0.0)
        fun addEccentricity(builder: FlatBufferBuilder, eccentricity: Double) = builder.addDouble(6, eccentricity, 0.0)
        fun addInclination(builder: FlatBufferBuilder, inclination: Double) = builder.addDouble(7, inclination, 0.0)
        fun addRaan(builder: FlatBufferBuilder, raan: Double) = builder.addDouble(8, raan, 0.0)
        fun addArgOfPerigee(builder: FlatBufferBuilder, argOfPerigee: Double) = builder.addDouble(9, argOfPerigee, 0.0)
        fun addMeanAnomaly(builder: FlatBufferBuilder, meanAnomaly: Double) = builder.addDouble(10, meanAnomaly, 0.0)
        fun addRevNo(builder: FlatBufferBuilder, revNo: Int) = builder.addInt(11, revNo, 0)
        fun addBStar(builder: FlatBufferBuilder, bStar: Double) = builder.addDouble(12, bStar, 0.0)
        fun addMeanMotionDot(builder: FlatBufferBuilder, meanMotionDot: Double) = builder.addDouble(13, meanMotionDot, 0.0)
        fun addMeanMotionDDot(builder: FlatBufferBuilder, meanMotionDdot: Double) = builder.addDouble(14, meanMotionDdot, 0.0)
        fun addSemiMajorAxis(builder: FlatBufferBuilder, semiMajorAxis: Double) = builder.addDouble(15, semiMajorAxis, 0.0)
        fun addPeriod(builder: FlatBufferBuilder, period: Double) = builder.addDouble(16, period, 0.0)
        fun addApogee(builder: FlatBufferBuilder, apogee: Double) = builder.addDouble(17, apogee, 0.0)
        fun addPerigee(builder: FlatBufferBuilder, perigee: Double) = builder.addDouble(18, perigee, 0.0)
        fun addLine1(builder: FlatBufferBuilder, line1: Int) = builder.addOffset(19, line1, 0)
        fun addLine2(builder: FlatBufferBuilder, line2: Int) = builder.addOffset(20, line2, 0)
        fun addCreatedAt(builder: FlatBufferBuilder, createdAt: Int) = builder.addOffset(21, createdAt, 0)
        fun addCreatedBy(builder: FlatBufferBuilder, createdBy: Int) = builder.addOffset(22, createdBy, 0)
        fun addSource(builder: FlatBufferBuilder, source: Int) = builder.addOffset(23, source, 0)
        fun addOrigin(builder: FlatBufferBuilder, origin: Int) = builder.addOffset(24, origin, 0)
        fun addDataMode(builder: FlatBufferBuilder, dataMode: Byte) = builder.addByte(25, dataMode, 0)
        fun addOrigNetwork(builder: FlatBufferBuilder, origNetwork: Int) = builder.addOffset(26, origNetwork, 0)
        fun endManifoldElset_Ingest(builder: FlatBufferBuilder) : Int {
            val o = builder.endTable()
            return o
        }
        fun finishManifoldElsetIngestBuffer(builder: FlatBufferBuilder, offset: Int) = builder.finish(offset, "MANI")
        fun finishSizePrefixedManifoldElset_IngestBuffer(builder: FlatBufferBuilder, offset: Int) = builder.finishSizePrefixed(offset, "MANI")
    }
}
