// automatically generated by the FlatBuffers compiler, do not modify

import com.google.flatbuffers.BaseVector
import com.google.flatbuffers.BooleanVector
import com.google.flatbuffers.ByteVector
import com.google.flatbuffers.Constants
import com.google.flatbuffers.DoubleVector
import com.google.flatbuffers.FlatBufferBuilder
import com.google.flatbuffers.FloatVector
import com.google.flatbuffers.LongVector
import com.google.flatbuffers.StringVector
import com.google.flatbuffers.Struct
import com.google.flatbuffers.Table
import com.google.flatbuffers.UnionVector
import java.nio.ByteBuffer
import java.nio.ByteOrder
import kotlin.math.sign

/**
 * /// Imagery of terrestrial regions from on-orbit, air, and other sensors.
 */
@Suppress("unused")
class GroundImagery_Abridged : Table() {

    fun __init(_i: Int, _bb: ByteBuffer)  {
        __reset(_i, _bb)
    }
    fun __assign(_i: Int, _bb: ByteBuffer) : GroundImagery_Abridged {
        __init(_i, _bb)
        return this
    }
    /**
     * Unique identifier of the record, auto-generated by the system.
     * Example: /// Example: GROUNDIMAGERY-ID
     * Constraints: Minimum length = 1, Maximum length = 36
     */
    val id : String?
        get() {
            val o = __offset(4)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val idAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(4, 1)
    fun idInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 4, 1)
    /**
     * Optional ID of the sensor that produced this ground image.
     * Example: /// Example: SENSOR-ID
     * Constraints: Minimum length = 0, Maximum length = 36
     */
    val idSensor : String?
        get() {
            val o = __offset(6)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val idSensorAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(6, 1)
    fun idSensorInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 6, 1)
    /**
     * Classification marking of the data in IC/CAPCO Portion-marked format.
     * Example: /// Example: U
     * Constraints: Minimum length = 1, Maximum length = 128
     */
    val classificationMarking : String?
        get() {
            val o = __offset(8)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val classificationMarkingAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(8, 1)
    fun classificationMarkingInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 8, 1)
    /**
     * Timestamp the image was captured/produced.
     * Example: /// Example: 2021-01-01T01:01:01.123456Z
     * Constraints: No constraints specified.
     */
    val imageTime : String?
        get() {
            val o = __offset(10)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val imageTimeAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(10, 1)
    fun imageTimeInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 10, 1)
    /**
     * Name of the image file.
     * Example: /// Example: Example file name
     * Constraints: Minimum length = 1, Maximum length = 128
     */
    val filename : String?
        get() {
            val o = __offset(12)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val filenameAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(12, 1)
    fun filenameInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 12, 1)
    /**
     * Geographical region or polygon (lon/lat pairs), as depicted by the Well-Known Text representation of the geometry/geography, of the image as projected on the ground. WKT reference: https://www.opengeospatial.org/standards/wkt-crs. Ignored if included with a create operation that also specifies a valid region.
     * Example: /// Example: POLYGON((67.3291113966927 26.156175339112,67.2580009640721 26.091022064271,67.1795862381682 26.6637992964562,67.2501237475598 26.730115808233,67.3291113966927 26.156175339112))
     * Constraints: Minimum length = 0, Maximum length = 65535
     */
    val regionText : String?
        get() {
            val o = __offset(14)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val regionTextAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(14, 1)
    fun regionTextInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 14, 1)
    /**
     * Geographical region or polygon (lat/lon pairs), as depicted by the GeoJSON representation of the geometry/geography, of the image as projected on the ground. Reference: https://geojson.org/. Ignored if included with a create operation that also specifies a valid region or regionText.
     * Example: /// Example: {"type":"Polygon","coordinates":[[[67.3291113966927,26.156175339112],[67.2580009640721,26.091022064271],[67.1795862381682,26.6637992964562],[67.2501237475598,26.730115808233],[67.3291113966927,26.156175339112]]]}
     * Constraints: Minimum length = 0, Maximum length = 65535
     */
    val regionGeoJson : String?
        get() {
            val o = __offset(16)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val regionGeoJsonAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(16, 1)
    fun regionGeoJsonInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 16, 1)
    /**
     * Type of region as projected on the ground.
     * Example: /// Example: Polygon
     * Constraints: Minimum length = 0, Maximum length = 64
     */
    val regionType : String?
        get() {
            val o = __offset(18)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val regionTypeAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(18, 1)
    fun regionTypeInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 18, 1)
    /**
     * Number of dimensions of the geometry depicted by region.
     * Example: /// Example: 2
     * Constraints: No constraints specified.
     */
    val regionNdims : Int
        get() {
            val o = __offset(20)
            return if(o != 0) bb.getInt(o + bb_pos) else 0
        }
    /**
     * Geographical spatial_ref_sys for region.
     * Example: /// Example: 4326
     * Constraints: No constraints specified.
     */
    val regionSrid : Int
        get() {
            val o = __offset(22)
            return if(o != 0) bb.getInt(o + bb_pos) else 0
        }
    /**
     * Optional identifier provided by source to indicate the sensor identifier used to detect this event. This may be an internal identifier and not necessarily a valid sensor ID.
     * Example: /// Example: ORIGSENSOR-ID
     * Constraints: Minimum length = 0, Maximum length = 36
     */
    val origSensorId : String?
        get() {
            val o = __offset(24)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val origSensorIdAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(24, 1)
    fun origSensorIdInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 24, 1)
    /**
     * Optional identifier of the subject/target of the image, useful for correlating multiple images of the same subject.
     * Example: /// Example: SUBJECT-ID
     * Constraints: Minimum length = 0, Maximum length = 36
     */
    val subjectId : String?
        get() {
            val o = __offset(26)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val subjectIdAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(26, 1)
    fun subjectIdInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 26, 1)
    /**
     * Optional name/description associated with this image.
     * Example: /// Example: Example name
     * Constraints: Minimum length = 0, Maximum length = 128
     */
    val name : String?
        get() {
            val o = __offset(28)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val nameAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(28, 1)
    fun nameInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 28, 1)
    /**
     * Source of the data.
     * Example: /// Example: Bluestaq
     * Constraints: Minimum length = 1, Maximum length = 64
     */
    val source : String?
        get() {
            val o = __offset(30)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val sourceAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(30, 1)
    fun sourceInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 30, 1)
    /**
     * Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
     * Example: /// Example: THIRD_PARTY_DATASOURCE
     * Constraints: Minimum length = 0, Maximum length = 64
     */
    val origin : String?
        get() {
            val o = __offset(32)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val originAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(32, 1)
    fun originInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 32, 1)
    /**
     * The originating source network on which this record was created, auto-populated by the system.
     * Example: /// Example: ORIG
     * Constraints: Minimum length = 1, Maximum length = 32
     */
    val origNetwork : String?
        get() {
            val o = __offset(34)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val origNetworkAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(34, 1)
    fun origNetworkInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 34, 1)
    /**
     * The source data library from which this record was received. This could be a remote or tactical UDL or another data library. If null, the record should be assumed to have originated from the primary Enterprise UDL.
     * Example: /// Example: AXE
     * Constraints: Minimum length = 0, Maximum length = 64
     */
    val sourceDl : String?
        get() {
            val o = __offset(36)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val sourceDlAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(36, 1)
    fun sourceDlInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 36, 1)
    /**
     * Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
     * EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
     * REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
     * SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
     * TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
     * Example: /// Example: TEST
     * Constraints: Minimum length = 1, Maximum length = 32
     */
    val dataMode : Byte
        get() {
            val o = __offset(38)
            return if(o != 0) bb.get(o + bb_pos) else 0
        }
    /**
     * Time the row was created in the database, auto-populated by the system.
     * Example: /// Example: 2018-01-01T16:00:00.123Z
     * Constraints: No constraints specified.
     */
    val createdAt : String?
        get() {
            val o = __offset(40)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val createdAtAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(40, 1)
    fun createdAtInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 40, 1)
    /**
     * Application user who created the row in the database, auto-populated by the system.
     * Example: /// Example: some.user
     * Constraints: Minimum length = 1, Maximum length = 64
     */
    val createdBy : String?
        get() {
            val o = __offset(42)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val createdByAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(42, 1)
    fun createdByInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 42, 1)
    /**
     * Optional identifier to track a commercial or marketplace transaction executed to produce this data.
     * Example: /// Example: 37bdef1f-5a4f-4776-bee4-7a1e0ec7d35a
     * Constraints: Minimum length = 0, Maximum length = 64
     */
    val transactionId : String?
        get() {
            val o = __offset(44)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val transactionIdAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(44, 1)
    fun transactionIdInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 44, 1)
    /**
     * Description and notes of the image.
     * Example: /// Example: Example notes
     * Constraints: Minimum length = 0, Maximum length = 1024
     */
    val notes : String?
        get() {
            val o = __offset(46)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val notesAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(46, 1)
    fun notesInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 46, 1)
    /**
     * Optional, field indicating type of image, NITF, PNG, etc.
     * Example: /// Example: PNG
     * Constraints: Minimum length = 1, Maximum length = 16
     */
    val format : String?
        get() {
            val o = __offset(48)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val formatAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(48, 1)
    fun formatInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 48, 1)
    /**
     * Size of the image file. Units in bytes. If filesize is provided without an associated file, it defaults to 0.
     * Example: /// Example: 0
     * Constraints: No constraints specified.
     */
    val filesize : Long
        get() {
            val o = __offset(50)
            return if(o != 0) bb.getLong(o + bb_pos) else 0L
        }
    /**
     * MD5 value of the file. The ingest/create operation will automatically generate the value.
     * Example: /// Example: 120EA8A25E5D487BF68B5F7096440019
     * Constraints: Minimum length = 1, Maximum length = 256
     */
    val checksumValue : String?
        get() {
            val o = __offset(52)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val checksumValueAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(52, 1)
    fun checksumValueInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 52, 1)
    companion object {
        fun validateVersion() = Constants.FLATBUFFERS_24_3_25()
        fun getRootAsGroundImagery_Abridged(_bb: ByteBuffer): GroundImagery_Abridged = getRootAsGroundImagery_Abridged(_bb, GroundImagery_Abridged())
        fun getRootAsGroundImagery_Abridged(_bb: ByteBuffer, obj: GroundImagery_Abridged): GroundImagery_Abridged {
            _bb.order(ByteOrder.LITTLE_ENDIAN)
            return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb))
        }
        fun GroundImagery_AbridgedBufferHasIdentifier(_bb: ByteBuffer) : Boolean = __has_identifier(_bb, "GROU")
        fun createGroundImagery_Abridged(builder: FlatBufferBuilder, idOffset: Int, idSensorOffset: Int, classificationMarkingOffset: Int, imageTimeOffset: Int, filenameOffset: Int, regionTextOffset: Int, regionGeoJsonOffset: Int, regionTypeOffset: Int, regionNdims: Int, regionSrid: Int, origSensorIdOffset: Int, subjectIdOffset: Int, nameOffset: Int, sourceOffset: Int, originOffset: Int, origNetworkOffset: Int, sourceDlOffset: Int, dataMode: Byte, createdAtOffset: Int, createdByOffset: Int, transactionIdOffset: Int, notesOffset: Int, formatOffset: Int, filesize: Long, checksumValueOffset: Int) : Int {
            builder.startTable(25)
            addFilesize(builder, filesize)
            addChecksumValue(builder, checksumValueOffset)
            addFormat(builder, formatOffset)
            addNotes(builder, notesOffset)
            addTransactionId(builder, transactionIdOffset)
            addCreatedBy(builder, createdByOffset)
            addCreatedAt(builder, createdAtOffset)
            addSourceDL(builder, sourceDlOffset)
            addOrigNetwork(builder, origNetworkOffset)
            addOrigin(builder, originOffset)
            addSource(builder, sourceOffset)
            addName(builder, nameOffset)
            addSubjectId(builder, subjectIdOffset)
            addOrigSensorId(builder, origSensorIdOffset)
            addRegionSRid(builder, regionSrid)
            addRegionNDims(builder, regionNdims)
            addRegionType(builder, regionTypeOffset)
            addRegionGeoJSON(builder, regionGeoJsonOffset)
            addRegionText(builder, regionTextOffset)
            addFilename(builder, filenameOffset)
            addImageTime(builder, imageTimeOffset)
            addClassificationMarking(builder, classificationMarkingOffset)
            addIdSensor(builder, idSensorOffset)
            addId(builder, idOffset)
            addDataMode(builder, dataMode)
            return endGroundImagery_Abridged(builder)
        }
        fun startGroundImagery_Abridged(builder: FlatBufferBuilder) = builder.startTable(25)
        fun addId(builder: FlatBufferBuilder, id: Int) = builder.addOffset(0, id, 0)
        fun addIdSensor(builder: FlatBufferBuilder, idSensor: Int) = builder.addOffset(1, idSensor, 0)
        fun addClassificationMarking(builder: FlatBufferBuilder, classificationMarking: Int) = builder.addOffset(2, classificationMarking, 0)
        fun addImageTime(builder: FlatBufferBuilder, imageTime: Int) = builder.addOffset(3, imageTime, 0)
        fun addFilename(builder: FlatBufferBuilder, filename: Int) = builder.addOffset(4, filename, 0)
        fun addRegionText(builder: FlatBufferBuilder, regionText: Int) = builder.addOffset(5, regionText, 0)
        fun addRegionGeoJSON(builder: FlatBufferBuilder, regionGeoJson: Int) = builder.addOffset(6, regionGeoJson, 0)
        fun addRegionType(builder: FlatBufferBuilder, regionType: Int) = builder.addOffset(7, regionType, 0)
        fun addRegionNDims(builder: FlatBufferBuilder, regionNdims: Int) = builder.addInt(8, regionNdims, 0)
        fun addRegionSRid(builder: FlatBufferBuilder, regionSrid: Int) = builder.addInt(9, regionSrid, 0)
        fun addOrigSensorId(builder: FlatBufferBuilder, origSensorId: Int) = builder.addOffset(10, origSensorId, 0)
        fun addSubjectId(builder: FlatBufferBuilder, subjectId: Int) = builder.addOffset(11, subjectId, 0)
        fun addName(builder: FlatBufferBuilder, name: Int) = builder.addOffset(12, name, 0)
        fun addSource(builder: FlatBufferBuilder, source: Int) = builder.addOffset(13, source, 0)
        fun addOrigin(builder: FlatBufferBuilder, origin: Int) = builder.addOffset(14, origin, 0)
        fun addOrigNetwork(builder: FlatBufferBuilder, origNetwork: Int) = builder.addOffset(15, origNetwork, 0)
        fun addSourceDL(builder: FlatBufferBuilder, sourceDl: Int) = builder.addOffset(16, sourceDl, 0)
        fun addDataMode(builder: FlatBufferBuilder, dataMode: Byte) = builder.addByte(17, dataMode, 0)
        fun addCreatedAt(builder: FlatBufferBuilder, createdAt: Int) = builder.addOffset(18, createdAt, 0)
        fun addCreatedBy(builder: FlatBufferBuilder, createdBy: Int) = builder.addOffset(19, createdBy, 0)
        fun addTransactionId(builder: FlatBufferBuilder, transactionId: Int) = builder.addOffset(20, transactionId, 0)
        fun addNotes(builder: FlatBufferBuilder, notes: Int) = builder.addOffset(21, notes, 0)
        fun addFormat(builder: FlatBufferBuilder, format: Int) = builder.addOffset(22, format, 0)
        fun addFilesize(builder: FlatBufferBuilder, filesize: Long) = builder.addLong(23, filesize, 0L)
        fun addChecksumValue(builder: FlatBufferBuilder, checksumValue: Int) = builder.addOffset(24, checksumValue, 0)
        fun endGroundImagery_Abridged(builder: FlatBufferBuilder) : Int {
            val o = builder.endTable()
            return o
        }
        fun finishGroundImageryAbridgedBuffer(builder: FlatBufferBuilder, offset: Int) = builder.finish(offset, "GROU")
        fun finishSizePrefixedGroundImagery_AbridgedBuffer(builder: FlatBufferBuilder, offset: Int) = builder.finishSizePrefixed(offset, "GROU")
    }
}
