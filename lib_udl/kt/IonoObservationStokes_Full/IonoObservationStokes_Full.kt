// automatically generated by the FlatBuffers compiler, do not modify

import com.google.flatbuffers.BaseVector
import com.google.flatbuffers.BooleanVector
import com.google.flatbuffers.ByteVector
import com.google.flatbuffers.Constants
import com.google.flatbuffers.DoubleVector
import com.google.flatbuffers.FlatBufferBuilder
import com.google.flatbuffers.FloatVector
import com.google.flatbuffers.LongVector
import com.google.flatbuffers.StringVector
import com.google.flatbuffers.Struct
import com.google.flatbuffers.Table
import com.google.flatbuffers.UnionVector
import java.nio.ByteBuffer
import java.nio.ByteOrder
import kotlin.math.sign

/**
 * /// Multi-dimensional array with the same dimensions as power plus one additional dimension spanning an S dimension for S1, S2, and S3 (the normalized Stokes parameters 1, 2, and 3). It is advised to describe the antenna type, antenna configuration, and Stokes coordinate system as a notes to the variable.
 */
@Suppress("unused")
class IonoObservationStokes_Full : Table() {

    fun __init(_i: Int, _bb: ByteBuffer)  {
        __reset(_i, _bb)
    }
    fun __assign(_i: Int, _bb: ByteBuffer) : IonoObservationStokes_Full {
        __init(_i, _bb)
        return this
    }
    /**
     * Notes for the stokes data.
     * Example: /// Example: NOTES
     * Constraints: Minimum length = 0, Maximum length = 512
     */
    val notes : String?
        get() {
            val o = __offset(4)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val notesAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(4, 1)
    fun notesInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 4, 1)
    /**
     * Array of integers of the stoke array dimensions.
     * Example: /// Example: [2, 3]
     * Constraints: No constraints specified.
     */
    fun dimensions(j: Int) : String? {
        val o = __offset(6)
        return if (o != 0) {
            __string(__vector(o) + j * 4)
        } else {
            null
        }
    }
    val dimensionsLength : Int
        get() {
            val o = __offset(6); return if (o != 0) __vector_len(o) else 0
        }
    /**
     * Array of names for dimensions.
     * Example: /// Example: ['NAMES1', 'NAMES2']
     * Constraints: No constraints specified.
     */
    fun dimensionName(j: Int) : String? {
        val o = __offset(8)
        return if (o != 0) {
            __string(__vector(o) + j * 4)
        } else {
            null
        }
    }
    val dimensionNameLength : Int
        get() {
            val o = __offset(8); return if (o != 0) __vector_len(o) else 0
        }
    /**
     * Array of received stokes data.
     * Example: /// Example: [[[[[[[0.02, 0.034]]]]]]]
     * Constraints: No constraints specified.
     */
    fun data(j: Int) : String? {
        val o = __offset(10)
        return if (o != 0) {
            __string(__vector(o) + j * 4)
        } else {
            null
        }
    }
    val dataLength : Int
        get() {
            val o = __offset(10); return if (o != 0) __vector_len(o) else 0
        }
    /**
     * S1, S2, and S3 (the normalized Stokes parameters 1, 2, and 3).
     * Example: /// Example: [1.0, 2.0]
     * Constraints: No constraints specified.
     */
    fun s(j: Int) : String? {
        val o = __offset(12)
        return if (o != 0) {
            __string(__vector(o) + j * 4)
        } else {
            null
        }
    }
    val sLength : Int
        get() {
            val o = __offset(12); return if (o != 0) __vector_len(o) else 0
        }
    companion object {
        fun validateVersion() = Constants.FLATBUFFERS_24_3_25()
        fun getRootAsIonoObservationStokes_Full(_bb: ByteBuffer): IonoObservationStokes_Full = getRootAsIonoObservationStokes_Full(_bb, IonoObservationStokes_Full())
        fun getRootAsIonoObservationStokes_Full(_bb: ByteBuffer, obj: IonoObservationStokes_Full): IonoObservationStokes_Full {
            _bb.order(ByteOrder.LITTLE_ENDIAN)
            return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb))
        }
        fun IonoObservationStokes_FullBufferHasIdentifier(_bb: ByteBuffer) : Boolean = __has_identifier(_bb, "IONO")
        fun createIonoObservationStokes_Full(builder: FlatBufferBuilder, notesOffset: Int, dimensionsOffset: Int, dimensionNameOffset: Int, dataOffset: Int, sOffset: Int) : Int {
            builder.startTable(5)
            addS(builder, sOffset)
            addData(builder, dataOffset)
            addDimensionName(builder, dimensionNameOffset)
            addDimensions(builder, dimensionsOffset)
            addNotes(builder, notesOffset)
            return endIonoObservationStokes_Full(builder)
        }
        fun startIonoObservationStokes_Full(builder: FlatBufferBuilder) = builder.startTable(5)
        fun addNotes(builder: FlatBufferBuilder, notes: Int) = builder.addOffset(0, notes, 0)
        fun addDimensions(builder: FlatBufferBuilder, dimensions: Int) = builder.addOffset(1, dimensions, 0)
        fun createDimensionsVector(builder: FlatBufferBuilder, data: IntArray) : Int {
            builder.startVector(4, data.size, 4)
            for (i in data.size - 1 downTo 0) {
                builder.addOffset(data[i])
            }
            return builder.endVector()
        }
        fun startDimensionsVector(builder: FlatBufferBuilder, numElems: Int) = builder.startVector(4, numElems, 4)
        fun addDimensionName(builder: FlatBufferBuilder, dimensionName: Int) = builder.addOffset(2, dimensionName, 0)
        fun createDimensionNameVector(builder: FlatBufferBuilder, data: IntArray) : Int {
            builder.startVector(4, data.size, 4)
            for (i in data.size - 1 downTo 0) {
                builder.addOffset(data[i])
            }
            return builder.endVector()
        }
        fun startDimensionNameVector(builder: FlatBufferBuilder, numElems: Int) = builder.startVector(4, numElems, 4)
        fun addData(builder: FlatBufferBuilder, data: Int) = builder.addOffset(3, data, 0)
        fun createDataVector(builder: FlatBufferBuilder, data: IntArray) : Int {
            builder.startVector(4, data.size, 4)
            for (i in data.size - 1 downTo 0) {
                builder.addOffset(data[i])
            }
            return builder.endVector()
        }
        fun startDataVector(builder: FlatBufferBuilder, numElems: Int) = builder.startVector(4, numElems, 4)
        fun addS(builder: FlatBufferBuilder, s: Int) = builder.addOffset(4, s, 0)
        fun createSVector(builder: FlatBufferBuilder, data: IntArray) : Int {
            builder.startVector(4, data.size, 4)
            for (i in data.size - 1 downTo 0) {
                builder.addOffset(data[i])
            }
            return builder.endVector()
        }
        fun startSVector(builder: FlatBufferBuilder, numElems: Int) = builder.startVector(4, numElems, 4)
        fun endIonoObservationStokes_Full(builder: FlatBufferBuilder) : Int {
            val o = builder.endTable()
            return o
        }
        fun finishIonoObservationStokesFullBuffer(builder: FlatBufferBuilder, offset: Int) = builder.finish(offset, "IONO")
        fun finishSizePrefixedIonoObservationStokes_FullBuffer(builder: FlatBufferBuilder, offset: Int) = builder.finishSizePrefixed(offset, "IONO")
    }
}
