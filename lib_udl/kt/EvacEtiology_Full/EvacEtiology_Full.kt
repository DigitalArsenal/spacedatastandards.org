// automatically generated by the FlatBuffers compiler, do not modify

import com.google.flatbuffers.BaseVector
import com.google.flatbuffers.BooleanVector
import com.google.flatbuffers.ByteVector
import com.google.flatbuffers.Constants
import com.google.flatbuffers.DoubleVector
import com.google.flatbuffers.FlatBufferBuilder
import com.google.flatbuffers.FloatVector
import com.google.flatbuffers.LongVector
import com.google.flatbuffers.StringVector
import com.google.flatbuffers.Struct
import com.google.flatbuffers.Table
import com.google.flatbuffers.UnionVector
import java.nio.ByteBuffer
import java.nio.ByteOrder
import kotlin.math.sign

/**
 * /// Medical condition causation information.
 */
@Suppress("unused")
class EvacEtiology_Full : Table() {

    fun __init(_i: Int, _bb: ByteBuffer)  {
        __reset(_i, _bb)
    }
    fun __assign(_i: Int, _bb: ByteBuffer) : EvacEtiology_Full {
        __init(_i, _bb)
        return this
    }
    /**
     * The cause or manner of causation of the medical condition.  Intended as, but not constrained to, K07.1 EtiologyType Enumeration (e.g. ASSAULT, BUILDING COLLAPSE, BURN CHEMICAL, BURN ELECTRICAL, BURN, BURN HOT LIQUID, BURN RADIATION, BURN THERMAL, etc.).
     * Example: /// Example: BURN
     * Constraints: Minimum length = 0, Maximum length = 32
     */
    val type : String?
        get() {
            val o = __offset(4)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val typeAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(4, 1)
    fun typeInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 4, 1)
    /**
     * The body part or location affected from the etiology.  Intended as, but not constrained to, K07.1 Body Location Enumeration (e.g. ANKLE LEFT BACK, ANKLE LEFT FRONT, ANKLE RIGHT BACK, ANKLE RIGHT FRONT, ARM LEFT BACK, ARM LEFT ELBOW BACK, ARM LEFT ELBOW FRONT, ARM LEFT FRONT, ARM LEFT LOWER BACK, etc.).
     * Example: /// Example: ARM LEFT FRONT
     * Constraints: Minimum length = 0, Maximum length = 32
     */
    val bodyPart : String?
        get() {
            val o = __offset(6)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val bodyPartAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(6, 1)
    fun bodyPartInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 6, 1)
    /**
     * Datetime of the discovery of the etiology state in ISO 8601 UTC format.
     * Example: /// Example: 2021-10-16T16:00:00.123Z
     * Constraints: No constraints specified.
     */
    val time : String?
        get() {
            val o = __offset(8)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val timeAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(8, 1)
    fun timeInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 8, 1)
    /**
     * Additional comments on the patient's etiology information.
     * Example: /// Example: Comments on the etiology info.
     * Constraints: Minimum length = 0, Maximum length = 1024
     */
    val comments : String?
        get() {
            val o = __offset(10)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val commentsAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(10, 1)
    fun commentsInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 10, 1)
    companion object {
        fun validateVersion() = Constants.FLATBUFFERS_24_3_25()
        fun getRootAsEvacEtiology_Full(_bb: ByteBuffer): EvacEtiology_Full = getRootAsEvacEtiology_Full(_bb, EvacEtiology_Full())
        fun getRootAsEvacEtiology_Full(_bb: ByteBuffer, obj: EvacEtiology_Full): EvacEtiology_Full {
            _bb.order(ByteOrder.LITTLE_ENDIAN)
            return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb))
        }
        fun EvacEtiology_FullBufferHasIdentifier(_bb: ByteBuffer) : Boolean = __has_identifier(_bb, "EVAC")
        fun createEvacEtiology_Full(builder: FlatBufferBuilder, typeOffset: Int, bodyPartOffset: Int, timeOffset: Int, commentsOffset: Int) : Int {
            builder.startTable(4)
            addComments(builder, commentsOffset)
            addTime(builder, timeOffset)
            addBodyPart(builder, bodyPartOffset)
            addType(builder, typeOffset)
            return endEvacEtiology_Full(builder)
        }
        fun startEvacEtiology_Full(builder: FlatBufferBuilder) = builder.startTable(4)
        fun addType(builder: FlatBufferBuilder, type: Int) = builder.addOffset(0, type, 0)
        fun addBodyPart(builder: FlatBufferBuilder, bodyPart: Int) = builder.addOffset(1, bodyPart, 0)
        fun addTime(builder: FlatBufferBuilder, time: Int) = builder.addOffset(2, time, 0)
        fun addComments(builder: FlatBufferBuilder, comments: Int) = builder.addOffset(3, comments, 0)
        fun endEvacEtiology_Full(builder: FlatBufferBuilder) : Int {
            val o = builder.endTable()
            return o
        }
        fun finishEvacEtiologyFullBuffer(builder: FlatBufferBuilder, offset: Int) = builder.finish(offset, "EVAC")
        fun finishSizePrefixedEvacEtiology_FullBuffer(builder: FlatBufferBuilder, offset: Int) = builder.finishSizePrefixed(offset, "EVAC")
    }
}
