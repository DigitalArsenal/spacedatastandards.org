// automatically generated by the FlatBuffers compiler, do not modify

import com.google.flatbuffers.BaseVector
import com.google.flatbuffers.BooleanVector
import com.google.flatbuffers.ByteVector
import com.google.flatbuffers.Constants
import com.google.flatbuffers.DoubleVector
import com.google.flatbuffers.FlatBufferBuilder
import com.google.flatbuffers.FloatVector
import com.google.flatbuffers.LongVector
import com.google.flatbuffers.StringVector
import com.google.flatbuffers.Struct
import com.google.flatbuffers.Table
import com.google.flatbuffers.UnionVector
import java.nio.ByteBuffer
import java.nio.ByteOrder
import kotlin.math.sign

/**
 * /// List of actions associated with this effect response.
 */
@Suppress("unused")
class EffectResponseActionsList_Abridged : Table() {

    fun __init(_i: Int, _bb: ByteBuffer)  {
        __reset(_i, _bb)
    }
    fun __assign(_i: Int, _bb: ByteBuffer) : EffectResponseActionsList_Abridged {
        __init(_i, _bb)
        return this
    }
    /**
     * A summary string describing different aspects of the action.
     * Example: /// Example: Example summary
     * Constraints: Minimum length = 0, Maximum length = 1024
     */
    val summary : String?
        get() {
            val o = __offset(4)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val summaryAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(4, 1)
    fun summaryInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 4, 1)
    /**
     * Identifier of this action.
     * Example: /// Example: ACTION-ID
     * Constraints: Minimum length = 0, Maximum length = 64
     */
    val actionId : String?
        get() {
            val o = __offset(6)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val actionIdAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(6, 1)
    fun actionIdInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 6, 1)
    /**
     * The desired start time of this task, in ISO8601 UTC format.
     * Example: /// Example: 2021-01-01T00:00:00.123456Z
     * Constraints: No constraints specified.
     */
    val actionStartTime : String?
        get() {
            val o = __offset(8)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val actionStartTimeAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(8, 1)
    fun actionStartTimeInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 8, 1)
    /**
     * The desired end time of this task, in ISO8601 UTC format.
     * Example: /// Example: 2021-01-01T00:00:00.123456Z
     * Constraints: No constraints specified.
     */
    val actionEndTime : String?
        get() {
            val o = __offset(10)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val actionEndTimeAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(10, 1)
    fun actionEndTimeInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 10, 1)
    /**
     * The start time of the asset TOT (time over target), in ISO8601 UTC format.
     * Example: /// Example: 2021-01-01T00:00:00.123456Z
     * Constraints: No constraints specified.
     */
    val totStartTime : String?
        get() {
            val o = __offset(12)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val totStartTimeAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(12, 1)
    fun totStartTimeInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 12, 1)
    /**
     * The end time of the asset TOT (time over target), in ISO8601 UTC format.
     * Example: /// Example: 2021-01-01T00:00:00.123456Z
     * Constraints: No constraints specified.
     */
    val totEndTime : String?
        get() {
            val o = __offset(14)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val totEndTimeAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(14, 1)
    fun totEndTimeInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 14, 1)
    /**
     * The source type of the asset/actor identifier (AIRCRAFT, LANDCRAFT, SEACRAFT, TRACK).
     * Example: /// Example: AIRCRAFT
     * Constraints: Minimum length = 0, Maximum length = 64
     */
    val actionActorSrcType : String?
        get() {
            val o = __offset(16)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val actionActorSrcTypeAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(16, 1)
    fun actionActorSrcTypeInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 16, 1)
    /**
     * The record ID, depending on the type identified in actorSrcType, of the requested asset/actor.
     * Example: /// Example: ACTIONACTORSRC-ID
     * Constraints: Minimum length = 0, Maximum length = 64
     */
    val actionActorSrcId : String?
        get() {
            val o = __offset(18)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val actionActorSrcIdAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(18, 1)
    fun actionActorSrcIdInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 18, 1)
    /**
     * The type of munition or sensor used by this asset/actor.
     * Example: /// Example: SENSOR1
     * Constraints: Minimum length = 0, Maximum length = 1024
     */
    val effector : String?
        get() {
            val o = __offset(20)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val effectorAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(20, 1)
    fun effectorInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 20, 1)
    /**
     * The source type of the targetId identifier (POI, TRACK).
     * Example: /// Example: POI
     * Constraints: Minimum length = 0, Maximum length = 64
     */
    val targetSrcType : String?
        get() {
            val o = __offset(22)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val targetSrcTypeAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(22, 1)
    fun targetSrcTypeInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 22, 1)
    /**
     * The POI or TRACK ID, depending on the type identified in targetSrcType, of the requested target. This identifier corresponds to either poi.poiid or track.trkId from their respective schemas.
     * Example: /// Example: TARGETSRC-ID
     * Constraints: Minimum length = 0, Maximum length = 64
     */
    val targetSrcId : String?
        get() {
            val o = __offset(24)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val targetSrcIdAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(24, 1)
    fun targetSrcIdInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 24, 1)
    /**
     * The WGS-84 latitude of the asset/actor location at weapon launch, in degrees.  -90 to 90 degrees (negative values south of equator).
     * Example: /// Example: 45.1
     * Constraints: No constraints specified.
     */
    val actorInterceptLat : Double
        get() {
            val o = __offset(26)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * The WGS-84 longitude of the asset/actor location at weapon launch, in degrees.  -180 to 180 degrees (negative values west of Prime Meridian).
     * Example: /// Example: 180.1
     * Constraints: No constraints specified.
     */
    val actorInterceptLon : Double
        get() {
            val o = __offset(28)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * The WGS-84 altitude of the asset/actor location at weapon launch, in meters.
     * Example: /// Example: 1.1
     * Constraints: No constraints specified.
     */
    val actorInterceptAlt : Double
        get() {
            val o = __offset(30)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * The WGS-84 latitude of the weapon destination location, in degrees.  -90 to 90 degrees (negative values south of equator).
     * Example: /// Example: 45.1
     * Constraints: No constraints specified.
     */
    val weaponInterceptLat : Double
        get() {
            val o = __offset(32)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * The WGS-84 longitude of the weapon destination location, in degrees.  -180 to 180 degrees (negative values west of Prime Meridian).
     * Example: /// Example: 180.1
     * Constraints: No constraints specified.
     */
    val weaponInterceptLon : Double
        get() {
            val o = __offset(34)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * The WGS-84 altitude of the weapon destination location, in meters.
     * Example: /// Example: 1.1
     * Constraints: No constraints specified.
     */
    val weaponInterceptAlt : Double
        get() {
            val o = __offset(36)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * List of metrics associated with this action.
     * Example: /// Example: No example provided.
     * Constraints: No constraints specified.
     */
    fun actionMetrics(j: Int) : String? {
        val o = __offset(38)
        return if (o != 0) {
            __string(__vector(o) + j * 4)
        } else {
            null
        }
    }
    val actionMetricsLength : Int
        get() {
            val o = __offset(38); return if (o != 0) __vector_len(o) else 0
        }
    companion object {
        fun validateVersion() = Constants.FLATBUFFERS_24_3_25()
        fun getRootAsEffectResponseActionsList_Abridged(_bb: ByteBuffer): EffectResponseActionsList_Abridged = getRootAsEffectResponseActionsList_Abridged(_bb, EffectResponseActionsList_Abridged())
        fun getRootAsEffectResponseActionsList_Abridged(_bb: ByteBuffer, obj: EffectResponseActionsList_Abridged): EffectResponseActionsList_Abridged {
            _bb.order(ByteOrder.LITTLE_ENDIAN)
            return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb))
        }
        fun EffectResponseActionsList_AbridgedBufferHasIdentifier(_bb: ByteBuffer) : Boolean = __has_identifier(_bb, "EFFE")
        fun createEffectResponseActionsList_Abridged(builder: FlatBufferBuilder, summaryOffset: Int, actionIdOffset: Int, actionStartTimeOffset: Int, actionEndTimeOffset: Int, totStartTimeOffset: Int, totEndTimeOffset: Int, actionActorSrcTypeOffset: Int, actionActorSrcIdOffset: Int, effectorOffset: Int, targetSrcTypeOffset: Int, targetSrcIdOffset: Int, actorInterceptLat: Double, actorInterceptLon: Double, actorInterceptAlt: Double, weaponInterceptLat: Double, weaponInterceptLon: Double, weaponInterceptAlt: Double, actionMetricsOffset: Int) : Int {
            builder.startTable(18)
            addWeaponInterceptAlt(builder, weaponInterceptAlt)
            addWeaponInterceptLon(builder, weaponInterceptLon)
            addWeaponInterceptLat(builder, weaponInterceptLat)
            addActorInterceptAlt(builder, actorInterceptAlt)
            addActorInterceptLon(builder, actorInterceptLon)
            addActorInterceptLat(builder, actorInterceptLat)
            addActionMetrics(builder, actionMetricsOffset)
            addTargetSrcId(builder, targetSrcIdOffset)
            addTargetSrcType(builder, targetSrcTypeOffset)
            addEffector(builder, effectorOffset)
            addActionActorSrcId(builder, actionActorSrcIdOffset)
            addActionActorSrcType(builder, actionActorSrcTypeOffset)
            addTotEndTime(builder, totEndTimeOffset)
            addTotStartTime(builder, totStartTimeOffset)
            addActionEndTime(builder, actionEndTimeOffset)
            addActionStartTime(builder, actionStartTimeOffset)
            addActionId(builder, actionIdOffset)
            addSummary(builder, summaryOffset)
            return endEffectResponseActionsList_Abridged(builder)
        }
        fun startEffectResponseActionsList_Abridged(builder: FlatBufferBuilder) = builder.startTable(18)
        fun addSummary(builder: FlatBufferBuilder, summary: Int) = builder.addOffset(0, summary, 0)
        fun addActionId(builder: FlatBufferBuilder, actionId: Int) = builder.addOffset(1, actionId, 0)
        fun addActionStartTime(builder: FlatBufferBuilder, actionStartTime: Int) = builder.addOffset(2, actionStartTime, 0)
        fun addActionEndTime(builder: FlatBufferBuilder, actionEndTime: Int) = builder.addOffset(3, actionEndTime, 0)
        fun addTotStartTime(builder: FlatBufferBuilder, totStartTime: Int) = builder.addOffset(4, totStartTime, 0)
        fun addTotEndTime(builder: FlatBufferBuilder, totEndTime: Int) = builder.addOffset(5, totEndTime, 0)
        fun addActionActorSrcType(builder: FlatBufferBuilder, actionActorSrcType: Int) = builder.addOffset(6, actionActorSrcType, 0)
        fun addActionActorSrcId(builder: FlatBufferBuilder, actionActorSrcId: Int) = builder.addOffset(7, actionActorSrcId, 0)
        fun addEffector(builder: FlatBufferBuilder, effector: Int) = builder.addOffset(8, effector, 0)
        fun addTargetSrcType(builder: FlatBufferBuilder, targetSrcType: Int) = builder.addOffset(9, targetSrcType, 0)
        fun addTargetSrcId(builder: FlatBufferBuilder, targetSrcId: Int) = builder.addOffset(10, targetSrcId, 0)
        fun addActorInterceptLat(builder: FlatBufferBuilder, actorInterceptLat: Double) = builder.addDouble(11, actorInterceptLat, 0.0)
        fun addActorInterceptLon(builder: FlatBufferBuilder, actorInterceptLon: Double) = builder.addDouble(12, actorInterceptLon, 0.0)
        fun addActorInterceptAlt(builder: FlatBufferBuilder, actorInterceptAlt: Double) = builder.addDouble(13, actorInterceptAlt, 0.0)
        fun addWeaponInterceptLat(builder: FlatBufferBuilder, weaponInterceptLat: Double) = builder.addDouble(14, weaponInterceptLat, 0.0)
        fun addWeaponInterceptLon(builder: FlatBufferBuilder, weaponInterceptLon: Double) = builder.addDouble(15, weaponInterceptLon, 0.0)
        fun addWeaponInterceptAlt(builder: FlatBufferBuilder, weaponInterceptAlt: Double) = builder.addDouble(16, weaponInterceptAlt, 0.0)
        fun addActionMetrics(builder: FlatBufferBuilder, actionMetrics: Int) = builder.addOffset(17, actionMetrics, 0)
        fun createActionMetricsVector(builder: FlatBufferBuilder, data: IntArray) : Int {
            builder.startVector(4, data.size, 4)
            for (i in data.size - 1 downTo 0) {
                builder.addOffset(data[i])
            }
            return builder.endVector()
        }
        fun startActionMetricsVector(builder: FlatBufferBuilder, numElems: Int) = builder.startVector(4, numElems, 4)
        fun endEffectResponseActionsList_Abridged(builder: FlatBufferBuilder) : Int {
            val o = builder.endTable()
            return o
        }
        fun finishEffectResponseActionsListAbridgedBuffer(builder: FlatBufferBuilder, offset: Int) = builder.finish(offset, "EFFE")
        fun finishSizePrefixedEffectResponseActionsList_AbridgedBuffer(builder: FlatBufferBuilder, offset: Int) = builder.finishSizePrefixed(offset, "EFFE")
    }
}
