// automatically generated by the FlatBuffers compiler, do not modify

import com.google.flatbuffers.BaseVector
import com.google.flatbuffers.BooleanVector
import com.google.flatbuffers.ByteVector
import com.google.flatbuffers.Constants
import com.google.flatbuffers.DoubleVector
import com.google.flatbuffers.FlatBufferBuilder
import com.google.flatbuffers.FloatVector
import com.google.flatbuffers.LongVector
import com.google.flatbuffers.StringVector
import com.google.flatbuffers.Struct
import com.google.flatbuffers.Table
import com.google.flatbuffers.UnionVector
import java.nio.ByteBuffer
import java.nio.ByteOrder
import kotlin.math.sign

/**
 * /// Schema for the CotPositionData to post.
 */
@Suppress("unused")
class CotPositionData_Ingest : Table() {

    fun __init(_i: Int, _bb: ByteBuffer)  {
        __reset(_i, _bb)
    }
    fun __assign(_i: Int, _bb: ByteBuffer) : CotPositionData_Ingest {
        __init(_i, _bb)
        return this
    }
    /**
     * Name of the POI target Object.
     * Example: /// Example: POI_NAME
     * Constraints: Minimum length = 1, Maximum length = 2147483647
     */
    val callSign : String?
        get() {
            val o = __offset(4)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val callSignAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(4, 1)
    fun callSignInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 4, 1)
    /**
     * Team role  (Team Member| Team Lead | HQ | Sniper | Medic | Forward Observer | RTO | K9).
     * Example: /// Example: Team Member
     * Constraints: Minimum length = 1, Maximum length = 2147483647
     */
    val teamRole : String?
        get() {
            val o = __offset(6)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val teamRoleAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(6, 1)
    fun teamRoleInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 6, 1)
    /**
     * Description of the POI target Object.
     * Example: /// Example: Description of the object
     * Constraints: Minimum length = 1, Maximum length = 2147483647
     */
    val team : String?
        get() {
            val o = __offset(8)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val teamAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(8, 1)
    fun teamInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 8, 1)
    companion object {
        fun validateVersion() = Constants.FLATBUFFERS_24_3_25()
        fun getRootAsCotPositionData_Ingest(_bb: ByteBuffer): CotPositionData_Ingest = getRootAsCotPositionData_Ingest(_bb, CotPositionData_Ingest())
        fun getRootAsCotPositionData_Ingest(_bb: ByteBuffer, obj: CotPositionData_Ingest): CotPositionData_Ingest {
            _bb.order(ByteOrder.LITTLE_ENDIAN)
            return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb))
        }
        fun CotPositionData_IngestBufferHasIdentifier(_bb: ByteBuffer) : Boolean = __has_identifier(_bb, "COTP")
        fun createCotPositionData_Ingest(builder: FlatBufferBuilder, callSignOffset: Int, teamRoleOffset: Int, teamOffset: Int) : Int {
            builder.startTable(3)
            addTeam(builder, teamOffset)
            addTeamRole(builder, teamRoleOffset)
            addCallSign(builder, callSignOffset)
            return endCotPositionData_Ingest(builder)
        }
        fun startCotPositionData_Ingest(builder: FlatBufferBuilder) = builder.startTable(3)
        fun addCallSign(builder: FlatBufferBuilder, callSign: Int) = builder.addOffset(0, callSign, 0)
        fun addTeamRole(builder: FlatBufferBuilder, teamRole: Int) = builder.addOffset(1, teamRole, 0)
        fun addTeam(builder: FlatBufferBuilder, team: Int) = builder.addOffset(2, team, 0)
        fun endCotPositionData_Ingest(builder: FlatBufferBuilder) : Int {
            val o = builder.endTable()
            return o
        }
        fun finishCotPositionDataIngestBuffer(builder: FlatBufferBuilder, offset: Int) = builder.finish(offset, "COTP")
        fun finishSizePrefixedCotPositionData_IngestBuffer(builder: FlatBufferBuilder, offset: Int) = builder.finishSizePrefixed(offset, "COTP")
    }
}
