// automatically generated by the FlatBuffers compiler, do not modify

import com.google.flatbuffers.BaseVector
import com.google.flatbuffers.BooleanVector
import com.google.flatbuffers.ByteVector
import com.google.flatbuffers.Constants
import com.google.flatbuffers.DoubleVector
import com.google.flatbuffers.FlatBufferBuilder
import com.google.flatbuffers.FloatVector
import com.google.flatbuffers.LongVector
import com.google.flatbuffers.StringVector
import com.google.flatbuffers.Struct
import com.google.flatbuffers.Table
import com.google.flatbuffers.UnionVector
import java.nio.ByteBuffer
import java.nio.ByteOrder
import kotlin.math.sign

/**
 * /// Individual taskings to complete the mission.
 */
@Suppress("unused")
class ISRCollectionTaskings_Abridged : Table() {

    fun __init(_i: Int, _bb: ByteBuffer)  {
        __reset(_i, _bb)
    }
    fun __assign(_i: Int, _bb: ByteBuffer) : ISRCollectionTaskings_Abridged {
        __init(_i, _bb)
        return this
    }
    /**
     * Tasking Unique Identifier.
     * Example: /// Example: ISRCOLLECTIONTASKINGS-ID
     * Constraints: Minimum length = 0, Maximum length = 36
     */
    val id : String?
        get() {
            val o = __offset(4)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val idAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(4, 1)
    fun idInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 4, 1)
    /**
     * Type of tasking.
     * Example: /// Example: Deliberate
     * Constraints: Minimum length = 1, Maximum length = 16
     */
    val type : Byte
        get() {
            val o = __offset(6)
            return if(o != 0) bb.get(o + bb_pos) else 0
        }
    /**
     * Type of collection tasked.
     * Example: /// Example: Simultaneous
     * Constraints: Minimum length = 1, Maximum length = 16
     */
    val collectionType : Byte
        get() {
            val o = __offset(8)
            return if(o != 0) bb.get(o + bb_pos) else 0
        }
    /**
     * Human readable definition of this taskings Area Of Responsibility.
     * Example: /// Example: Kandahar
     * Constraints: Minimum length = 0, Maximum length = 32
     */
    val taskingAor : String?
        get() {
            val o = __offset(10)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val taskingAorAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(10, 1)
    fun taskingAorInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 10, 1)
    /**
     * Eight line.
     * Example: /// Example: No example provided.
     * Constraints: Minimum length = 0, Maximum length = 256
     */
    val eightLine : String?
        get() {
            val o = __offset(12)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val eightLineAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(12, 1)
    fun eightLineInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 12, 1)
    /**
     * Primary type of intelligence to be collected during the mission.
     * Example: /// Example: Sig
     * Constraints: Minimum length = 0, Maximum length = 32
     */
    val taskingPrimaryIntelDiscipline : String?
        get() {
            val o = __offset(14)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val taskingPrimaryIntelDisciplineAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(14, 1)
    fun taskingPrimaryIntelDisciplineInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 14, 1)
    /**
     * Sub category of primary intelligence to be collected.
     * Example: /// Example: FMV
     * Constraints: Minimum length = 0, Maximum length = 32
     */
    val taskingPrimarySubCategory : String?
        get() {
            val o = __offset(16)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val taskingPrimarySubCategoryAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(16, 1)
    fun taskingPrimarySubCategoryInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 16, 1)
    /**
     * Type of tasking intelligence to be collected second.
     * Example: /// Example: Intelligence_2
     * Constraints: Minimum length = 0, Maximum length = 32
     */
    val taskingSecondaryIntelDiscipline : String?
        get() {
            val o = __offset(18)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val taskingSecondaryIntelDisciplineAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(18, 1)
    fun taskingSecondaryIntelDisciplineInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 18, 1)
    /**
     * Mission sub category for secondary intelligence discipline to be collected.
     * Example: /// Example: Convoy
     * Constraints: Minimum length = 0, Maximum length = 32
     */
    val taskingSecondarySubCategory : String?
        get() {
            val o = __offset(20)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val taskingSecondarySubCategoryAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(20, 1)
    fun taskingSecondarySubCategoryInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 20, 1)
    /**
     * What is the primary objective(Role) of this task.
     * Example: /// Example: Provide Targeting of Lead Vehicle
     * Constraints: Minimum length = 0, Maximum length = 32
     */
    val taskingRole : String?
        get() {
            val o = __offset(22)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val taskingRoleAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(22, 1)
    fun taskingRoleInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 22, 1)
    /**
     * Tasking operation name.
     * Example: /// Example: OP-HONEY-BADGER
     * Constraints: Minimum length = 0, Maximum length = 32
     */
    val taskingOperation : String?
        get() {
            val o = __offset(24)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val taskingOperationAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(24, 1)
    fun taskingOperationInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 24, 1)
    /**
     * Tasking Priority (1-n).
     * Example: /// Example: 10.23
     * Constraints: No constraints specified.
     */
    val taskingPriority : Double
        get() {
            val o = __offset(26)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Military Base to transmit the dissemination of this data.
     * Example: /// Example: ENVOYS
     * Constraints: Minimum length = 0, Maximum length = 32
     */
    val taskingSupportedUnit : String?
        get() {
            val o = __offset(28)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val taskingSupportedUnitAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(28, 1)
    fun taskingSupportedUnitInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 28, 1)
    /**
     * Tasking emphasis.
     * Example: /// Example: EMPHASIS
     * Constraints: Minimum length = 0, Maximum length = 32
     */
    val taskingEmphasis : String?
        get() {
            val o = __offset(30)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val taskingEmphasisAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(30, 1)
    fun taskingEmphasisInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 30, 1)
    /**
     * Time of retasking, in ISO 8601 UTC format.
     * Example: /// Example: 2021-01-19T01:01:15.001Z
     * Constraints: No constraints specified.
     */
    val taskingRetaskTime : String?
        get() {
            val o = __offset(32)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val taskingRetaskTimeAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(32, 1)
    fun taskingRetaskTimeInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 32, 1)
    /**
     * WGS-84 latitude of the start position, in degrees. -90 to 90 degrees (negative values south of equator).
     * Example: /// Example: 45.23
     * Constraints: No constraints specified.
     */
    val taskingStartPointLat : Double
        get() {
            val o = __offset(34)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * WGS-84 longitude of the start position, in degrees. -180 to 180 degrees (negative values west of Prime Meridian).
     * Example: /// Example: 45.23
     * Constraints: No constraints specified.
     */
    val taskingStartPointLong : Double
        get() {
            val o = __offset(36)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Tasking geographical collection area.
     * Example: /// Example: AREA
     * Constraints: No constraints specified.
     */
    val taskingCollectionArea : String?
        get() {
            val o = __offset(38)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val taskingCollectionAreaAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(38, 1)
    fun taskingCollectionAreaInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 38, 1)
    /**
     * Joint Operations Area.
     * Example: /// Example: AREA
     * Constraints: Minimum length = 0, Maximum length = 32
     */
    val taskingJoa : String?
        get() {
            val o = __offset(40)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val taskingJoaAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(40, 1)
    fun taskingJoaInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 40, 1)
    /**
     * A synchronization matrix is used to organize the logistics synchronization process during a mission.
     * Example: /// Example: MATRIX
     * Constraints: Minimum length = 0, Maximum length = 32
     */
    val taskingSyncMatrixBin : String?
        get() {
            val o = __offset(42)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val taskingSyncMatrixBinAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(42, 1)
    fun taskingSyncMatrixBinInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 42, 1)
    /**
     * Country code of the tasking.  A Country may represent countries, multi-national consortiums, and international organizations.
     * Example: /// Example: CODE
     * Constraints: Minimum length = 0, Maximum length = 4
     */
    val taskingCountry : String?
        get() {
            val o = __offset(44)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val taskingCountryAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(44, 1)
    fun taskingCountryInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 44, 1)
    /**
     * Region of the tasking.
     * Example: /// Example: REGION
     * Constraints: Minimum length = 0, Maximum length = 32
     */
    val taskingRegion : String?
        get() {
            val o = __offset(46)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val taskingRegionAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(46, 1)
    fun taskingRegionInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 46, 1)
    /**
     * Subregion of the tasking.
     * Example: /// Example: SUBREGION
     * Constraints: Minimum length = 0, Maximum length = 32
     */
    val taskingSubRegion : String?
        get() {
            val o = __offset(48)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val taskingSubRegionAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(48, 1)
    fun taskingSubRegionInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 48, 1)
    /**
     * Value of the Sensitive Reconnaissance Operations Track.
     * Example: /// Example: SRO
     * Constraints: Minimum length = 0, Maximum length = 32
     */
    val sroTrack : String?
        get() {
            val o = __offset(50)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val sroTrackAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(50, 1)
    fun sroTrackInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 50, 1)
    /**
     * Free text field for the user to specify special instructions needed for this collection.
     * Example: /// Example: TEXT
     * Constraints: Minimum length = 0, Maximum length = 256
     */
    val specialComGuidance : String?
        get() {
            val o = __offset(52)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val specialComGuidanceAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(52, 1)
    fun specialComGuidanceInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 52, 1)
    /**
     * No description provided.
     * Example: /// Example: No example provided.
     * Constraints: No constraints specified.
     */
    val collectionPeriods : String?
        get() {
            val o = __offset(54)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val collectionPeriodsAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(54, 1)
    fun collectionPeriodsInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 54, 1)
    /**
     * Tasking desired collection requirements.
     * Example: /// Example: No example provided.
     * Constraints: No constraints specified.
     */
    fun taskingCollectionRequirements(j: Int) : String? {
        val o = __offset(56)
        return if (o != 0) {
            __string(__vector(o) + j * 4)
        } else {
            null
        }
    }
    val taskingCollectionRequirementsLength : Int
        get() {
            val o = __offset(56); return if (o != 0) __vector_len(o) else 0
        }
    companion object {
        fun validateVersion() = Constants.FLATBUFFERS_24_3_25()
        fun getRootAsISRCollectionTaskings_Abridged(_bb: ByteBuffer): ISRCollectionTaskings_Abridged = getRootAsISRCollectionTaskings_Abridged(_bb, ISRCollectionTaskings_Abridged())
        fun getRootAsISRCollectionTaskings_Abridged(_bb: ByteBuffer, obj: ISRCollectionTaskings_Abridged): ISRCollectionTaskings_Abridged {
            _bb.order(ByteOrder.LITTLE_ENDIAN)
            return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb))
        }
        fun ISRCollectionTaskings_AbridgedBufferHasIdentifier(_bb: ByteBuffer) : Boolean = __has_identifier(_bb, "ISRC")
        fun createISRCollectionTaskings_Abridged(builder: FlatBufferBuilder, idOffset: Int, type: Byte, collectionType: Byte, taskingAorOffset: Int, eightLineOffset: Int, taskingPrimaryIntelDisciplineOffset: Int, taskingPrimarySubCategoryOffset: Int, taskingSecondaryIntelDisciplineOffset: Int, taskingSecondarySubCategoryOffset: Int, taskingRoleOffset: Int, taskingOperationOffset: Int, taskingPriority: Double, taskingSupportedUnitOffset: Int, taskingEmphasisOffset: Int, taskingRetaskTimeOffset: Int, taskingStartPointLat: Double, taskingStartPointLong: Double, taskingCollectionAreaOffset: Int, taskingJoaOffset: Int, taskingSyncMatrixBinOffset: Int, taskingCountryOffset: Int, taskingRegionOffset: Int, taskingSubRegionOffset: Int, sroTrackOffset: Int, specialComGuidanceOffset: Int, collectionPeriodsOffset: Int, taskingCollectionRequirementsOffset: Int) : Int {
            builder.startTable(27)
            addTaskingStartPointLong(builder, taskingStartPointLong)
            addTaskingStartPointLat(builder, taskingStartPointLat)
            addTaskingPriority(builder, taskingPriority)
            addTaskingCollectionRequirements(builder, taskingCollectionRequirementsOffset)
            addCollectionPeriods(builder, collectionPeriodsOffset)
            addSpecialComGuidance(builder, specialComGuidanceOffset)
            addSroTrack(builder, sroTrackOffset)
            addTaskingSubRegion(builder, taskingSubRegionOffset)
            addTaskingRegion(builder, taskingRegionOffset)
            addTaskingCountry(builder, taskingCountryOffset)
            addTaskingSyncMatrixBin(builder, taskingSyncMatrixBinOffset)
            addTaskingJoa(builder, taskingJoaOffset)
            addTaskingCollectionArea(builder, taskingCollectionAreaOffset)
            addTaskingRetaskTime(builder, taskingRetaskTimeOffset)
            addTaskingEmphasis(builder, taskingEmphasisOffset)
            addTaskingSupportedUnit(builder, taskingSupportedUnitOffset)
            addTaskingOperation(builder, taskingOperationOffset)
            addTaskingRole(builder, taskingRoleOffset)
            addTaskingSecondarySubCategory(builder, taskingSecondarySubCategoryOffset)
            addTaskingSecondaryIntelDiscipline(builder, taskingSecondaryIntelDisciplineOffset)
            addTaskingPrimarySubCategory(builder, taskingPrimarySubCategoryOffset)
            addTaskingPrimaryIntelDiscipline(builder, taskingPrimaryIntelDisciplineOffset)
            addEightLine(builder, eightLineOffset)
            addTaskingAOR(builder, taskingAorOffset)
            addId(builder, idOffset)
            addCollectionType(builder, collectionType)
            addType(builder, type)
            return endISRCollectionTaskings_Abridged(builder)
        }
        fun startISRCollectionTaskings_Abridged(builder: FlatBufferBuilder) = builder.startTable(27)
        fun addId(builder: FlatBufferBuilder, id: Int) = builder.addOffset(0, id, 0)
        fun addType(builder: FlatBufferBuilder, type: Byte) = builder.addByte(1, type, 0)
        fun addCollectionType(builder: FlatBufferBuilder, collectionType: Byte) = builder.addByte(2, collectionType, 0)
        fun addTaskingAOR(builder: FlatBufferBuilder, taskingAor: Int) = builder.addOffset(3, taskingAor, 0)
        fun addEightLine(builder: FlatBufferBuilder, eightLine: Int) = builder.addOffset(4, eightLine, 0)
        fun addTaskingPrimaryIntelDiscipline(builder: FlatBufferBuilder, taskingPrimaryIntelDiscipline: Int) = builder.addOffset(5, taskingPrimaryIntelDiscipline, 0)
        fun addTaskingPrimarySubCategory(builder: FlatBufferBuilder, taskingPrimarySubCategory: Int) = builder.addOffset(6, taskingPrimarySubCategory, 0)
        fun addTaskingSecondaryIntelDiscipline(builder: FlatBufferBuilder, taskingSecondaryIntelDiscipline: Int) = builder.addOffset(7, taskingSecondaryIntelDiscipline, 0)
        fun addTaskingSecondarySubCategory(builder: FlatBufferBuilder, taskingSecondarySubCategory: Int) = builder.addOffset(8, taskingSecondarySubCategory, 0)
        fun addTaskingRole(builder: FlatBufferBuilder, taskingRole: Int) = builder.addOffset(9, taskingRole, 0)
        fun addTaskingOperation(builder: FlatBufferBuilder, taskingOperation: Int) = builder.addOffset(10, taskingOperation, 0)
        fun addTaskingPriority(builder: FlatBufferBuilder, taskingPriority: Double) = builder.addDouble(11, taskingPriority, 0.0)
        fun addTaskingSupportedUnit(builder: FlatBufferBuilder, taskingSupportedUnit: Int) = builder.addOffset(12, taskingSupportedUnit, 0)
        fun addTaskingEmphasis(builder: FlatBufferBuilder, taskingEmphasis: Int) = builder.addOffset(13, taskingEmphasis, 0)
        fun addTaskingRetaskTime(builder: FlatBufferBuilder, taskingRetaskTime: Int) = builder.addOffset(14, taskingRetaskTime, 0)
        fun addTaskingStartPointLat(builder: FlatBufferBuilder, taskingStartPointLat: Double) = builder.addDouble(15, taskingStartPointLat, 0.0)
        fun addTaskingStartPointLong(builder: FlatBufferBuilder, taskingStartPointLong: Double) = builder.addDouble(16, taskingStartPointLong, 0.0)
        fun addTaskingCollectionArea(builder: FlatBufferBuilder, taskingCollectionArea: Int) = builder.addOffset(17, taskingCollectionArea, 0)
        fun addTaskingJoa(builder: FlatBufferBuilder, taskingJoa: Int) = builder.addOffset(18, taskingJoa, 0)
        fun addTaskingSyncMatrixBin(builder: FlatBufferBuilder, taskingSyncMatrixBin: Int) = builder.addOffset(19, taskingSyncMatrixBin, 0)
        fun addTaskingCountry(builder: FlatBufferBuilder, taskingCountry: Int) = builder.addOffset(20, taskingCountry, 0)
        fun addTaskingRegion(builder: FlatBufferBuilder, taskingRegion: Int) = builder.addOffset(21, taskingRegion, 0)
        fun addTaskingSubRegion(builder: FlatBufferBuilder, taskingSubRegion: Int) = builder.addOffset(22, taskingSubRegion, 0)
        fun addSroTrack(builder: FlatBufferBuilder, sroTrack: Int) = builder.addOffset(23, sroTrack, 0)
        fun addSpecialComGuidance(builder: FlatBufferBuilder, specialComGuidance: Int) = builder.addOffset(24, specialComGuidance, 0)
        fun addCollectionPeriods(builder: FlatBufferBuilder, collectionPeriods: Int) = builder.addOffset(25, collectionPeriods, 0)
        fun addTaskingCollectionRequirements(builder: FlatBufferBuilder, taskingCollectionRequirements: Int) = builder.addOffset(26, taskingCollectionRequirements, 0)
        fun createTaskingCollectionRequirementsVector(builder: FlatBufferBuilder, data: IntArray) : Int {
            builder.startVector(4, data.size, 4)
            for (i in data.size - 1 downTo 0) {
                builder.addOffset(data[i])
            }
            return builder.endVector()
        }
        fun startTaskingCollectionRequirementsVector(builder: FlatBufferBuilder, numElems: Int) = builder.startVector(4, numElems, 4)
        fun endISRCollectionTaskings_Abridged(builder: FlatBufferBuilder) : Int {
            val o = builder.endTable()
            return o
        }
        fun finishISRCollectionTaskingsAbridgedBuffer(builder: FlatBufferBuilder, offset: Int) = builder.finish(offset, "ISRC")
        fun finishSizePrefixedISRCollectionTaskings_AbridgedBuffer(builder: FlatBufferBuilder, offset: Int) = builder.finishSizePrefixed(offset, "ISRC")
    }
}
