// automatically generated by the FlatBuffers compiler, do not modify

import com.google.flatbuffers.BaseVector
import com.google.flatbuffers.BooleanVector
import com.google.flatbuffers.ByteVector
import com.google.flatbuffers.Constants
import com.google.flatbuffers.DoubleVector
import com.google.flatbuffers.FlatBufferBuilder
import com.google.flatbuffers.FloatVector
import com.google.flatbuffers.LongVector
import com.google.flatbuffers.StringVector
import com.google.flatbuffers.Struct
import com.google.flatbuffers.Table
import com.google.flatbuffers.UnionVector
import java.nio.ByteBuffer
import java.nio.ByteOrder
import kotlin.math.sign

/**
 * /// Additional start and stop for the collection.
 */
@Suppress("unused")
class ISRCollectionAdditional_Ingest : Table() {

    fun __init(_i: Int, _bb: ByteBuffer)  {
        __reset(_i, _bb)
    }
    fun __assign(_i: Int, _bb: ByteBuffer) : ISRCollectionAdditional_Ingest {
        __init(_i, _bb)
        return this
    }
    /**
     * Unique Identifier of additional collection period.
     * Example: /// Example: ISRCOLLECTIONADDITIONAL
     * Constraints: Minimum length = 0, Maximum length = 36
     */
    val id : String?
        get() {
            val o = __offset(4)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val idAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(4, 1)
    fun idInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 4, 1)
    /**
     * Start time of collection, in ISO 8601 UTC format.
     * Example: /// Example: 2021-01-19T01:01:15.001Z
     * Constraints: No constraints specified.
     */
    val start : String?
        get() {
            val o = __offset(6)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val startAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(6, 1)
    fun startInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 6, 1)
    /**
     * Stop time of collection, in ISO 8601 UTC format.
     * Example: /// Example: 2021-01-19T01:01:15.001Z
     * Constraints: No constraints specified.
     */
    val stop : String?
        get() {
            val o = __offset(8)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val stopAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(8, 1)
    fun stopInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 8, 1)
    companion object {
        fun validateVersion() = Constants.FLATBUFFERS_24_3_25()
        fun getRootAsISRCollectionAdditional_Ingest(_bb: ByteBuffer): ISRCollectionAdditional_Ingest = getRootAsISRCollectionAdditional_Ingest(_bb, ISRCollectionAdditional_Ingest())
        fun getRootAsISRCollectionAdditional_Ingest(_bb: ByteBuffer, obj: ISRCollectionAdditional_Ingest): ISRCollectionAdditional_Ingest {
            _bb.order(ByteOrder.LITTLE_ENDIAN)
            return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb))
        }
        fun ISRCollectionAdditional_IngestBufferHasIdentifier(_bb: ByteBuffer) : Boolean = __has_identifier(_bb, "ISRC")
        fun createISRCollectionAdditional_Ingest(builder: FlatBufferBuilder, idOffset: Int, startOffset: Int, stopOffset: Int) : Int {
            builder.startTable(3)
            addStop(builder, stopOffset)
            addStart(builder, startOffset)
            addId(builder, idOffset)
            return endISRCollectionAdditional_Ingest(builder)
        }
        fun startISRCollectionAdditional_Ingest(builder: FlatBufferBuilder) = builder.startTable(3)
        fun addId(builder: FlatBufferBuilder, id: Int) = builder.addOffset(0, id, 0)
        fun addStart(builder: FlatBufferBuilder, start: Int) = builder.addOffset(1, start, 0)
        fun addStop(builder: FlatBufferBuilder, stop: Int) = builder.addOffset(2, stop, 0)
        fun endISRCollectionAdditional_Ingest(builder: FlatBufferBuilder) : Int {
            val o = builder.endTable()
            return o
        }
        fun finishISRCollectionAdditionalIngestBuffer(builder: FlatBufferBuilder, offset: Int) = builder.finish(offset, "ISRC")
        fun finishSizePrefixedISRCollectionAdditional_IngestBuffer(builder: FlatBufferBuilder, offset: Int) = builder.finishSizePrefixed(offset, "ISRC")
    }
}
