// automatically generated by the FlatBuffers compiler, do not modify

import com.google.flatbuffers.BaseVector
import com.google.flatbuffers.BooleanVector
import com.google.flatbuffers.ByteVector
import com.google.flatbuffers.Constants
import com.google.flatbuffers.DoubleVector
import com.google.flatbuffers.FlatBufferBuilder
import com.google.flatbuffers.FloatVector
import com.google.flatbuffers.LongVector
import com.google.flatbuffers.StringVector
import com.google.flatbuffers.Struct
import com.google.flatbuffers.Table
import com.google.flatbuffers.UnionVector
import java.nio.ByteBuffer
import java.nio.ByteOrder
import kotlin.math.sign

/**
 * /// Captures link status.
 */
@Suppress("unused")
class LinkStatus_Ingest : Table() {

    fun __init(_i: Int, _bb: ByteBuffer)  {
        __reset(_i, _bb)
    }
    fun __assign(_i: Int, _bb: ByteBuffer) : LinkStatus_Ingest {
        __init(_i, _bb)
        return this
    }
    /**
     * Unique identifier of the record, auto-generated by the system.
     * Example: /// Example: LINKSTATUS-ID
     * Constraints: Minimum length = 1, Maximum length = 36
     */
    val id : String?
        get() {
            val o = __offset(4)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val idAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(4, 1)
    fun idInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 4, 1)
    /**
     * Classification marking of the data in IC/CAPCO Portion-marked format.
     * Example: /// Example: U
     * Constraints: Minimum length = 1, Maximum length = 128
     */
    val classificationMarking : String?
        get() {
            val o = __offset(6)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val classificationMarkingAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(6, 1)
    fun classificationMarkingInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 6, 1)
    /**
     * Unique ID of the on-orbit satellite (Sat-1) forming the link.  A null value for idOnOrbit1 indicates that the link is formed over a LEO/MEO constellation.
     * Example: /// Example: REF-ONORBIT1-ID
     * Constraints: Minimum length = 0, Maximum length = 36
     */
    val idOnOrbit1 : String?
        get() {
            val o = __offset(8)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val idOnOrbit1AsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(8, 1)
    fun idOnOrbit1InByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 8, 1)
    /**
     * Unique ID of the on-orbit satellite (Sat-2) forming the link.  A null value for idOnOrbit2 indicates either a link employing only Sat-1 or a link formed over a LEO/MEO constellation.
     * Example: /// Example: REF-ONORBIT2-ID
     * Constraints: Minimum length = 0, Maximum length = 36
     */
    val idOnOrbit2 : String?
        get() {
            val o = __offset(10)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val idOnOrbit2AsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(10, 1)
    fun idOnOrbit2InByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 10, 1)
    /**
     * The link establishment time, or the time that the link becomes available for use, in ISO8601 UTC format.
     * Example: /// Example: 2021-01-01T01:01:01.123456Z
     * Constraints: No constraints specified.
     */
    val linkStartTime : String?
        get() {
            val o = __offset(12)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val linkStartTimeAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(12, 1)
    fun linkStartTimeInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 12, 1)
    /**
     * The link termination time, or the time that the link becomes unavailable for use, in ISO8601 UTC format.
     * Example: /// Example: 2021-01-01T01:01:01.123456Z
     * Constraints: No constraints specified.
     */
    val linkStopTime : String?
        get() {
            val o = __offset(14)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val linkStopTimeAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(14, 1)
    fun linkStopTimeInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 14, 1)
    /**
     * The constellation name if the link is established over a LEO/MEO constellation.  In this case, idOnOrbit1 and idOnOrbit2 will be null.
     * Example: /// Example: Fornax
     * Constraints: Minimum length = 0, Maximum length = 128
     */
    val constellation : String?
        get() {
            val o = __offset(16)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val constellationAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(16, 1)
    fun constellationInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 16, 1)
    /**
     * The name or description of the link.
     * Example: /// Example: Example description
     * Constraints: Minimum length = 1, Maximum length = 64
     */
    val linkName : String?
        get() {
            val o = __offset(18)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val linkNameAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(18, 1)
    fun linkNameInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 18, 1)
    /**
     * The type of the link.
     * Example: /// Example: Example link
     * Constraints: Minimum length = 0, Maximum length = 64
     */
    val linkType : String?
        get() {
            val o = __offset(20)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val linkTypeAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(20, 1)
    fun linkTypeInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 20, 1)
    /**
     * The RF band employed by the link (e.g. MIL-KA, COM-KA, X-BAND, C-BAND, etc.).
     * Example: /// Example: MIL-KA
     * Constraints: Minimum length = 0, Maximum length = 24
     */
    val band : String?
        get() {
            val o = __offset(22)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val bandAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(22, 1)
    fun bandInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 22, 1)
    /**
     * The ID of beam-1 forming the link.  In the case of two sat link, beam-1 corresponds to Sat-1.
     * Example: /// Example: REF-BEAM1-ID
     * Constraints: Minimum length = 0, Maximum length = 36
     */
    val idBeam1 : String?
        get() {
            val o = __offset(24)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val idBeam1AsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(24, 1)
    fun idBeam1InByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 24, 1)
    /**
     * The name or description of link endpoint-1, corresponding to beam-1.
     * Example: /// Example: Example endpoint
     * Constraints: Minimum length = 1, Maximum length = 64
     */
    val endPoint1Name : String?
        get() {
            val o = __offset(26)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val endPoint1NameAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(26, 1)
    fun endPoint1NameInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 26, 1)
    /**
     * Latitude of link endpoint-1, WGS-84 in degrees. -90 to 90 degrees (negative values south of equator).
     * Example: /// Example: 45.23
     * Constraints: No constraints specified.
     */
    val endPoint1Lat : Double
        get() {
            val o = __offset(28)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Longitude of link endpoint-1, WGS-84 longitude in degrees. -180 to 180 degrees (negative values west of Prime Meridian).
     * Example: /// Example: 80.23
     * Constraints: No constraints specified.
     */
    val endPoint1Lon : Double
        get() {
            val o = __offset(30)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * The ID of beam-2 forming the link.  In the case of two sat link, beam-2 corresponds to Sat-2.
     * Example: /// Example: REF-BEAM2-ID
     * Constraints: Minimum length = 0, Maximum length = 36
     */
    val idBeam2 : String?
        get() {
            val o = __offset(32)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val idBeam2AsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(32, 1)
    fun idBeam2InByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 32, 1)
    /**
     * The name or description of link endpoint-2, corresponding to beam-2.
     * Example: /// Example: Example description
     * Constraints: Minimum length = 1, Maximum length = 64
     */
    val endPoint2Name : String?
        get() {
            val o = __offset(34)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val endPoint2NameAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(34, 1)
    fun endPoint2NameInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 34, 1)
    /**
     * Latitude of link endpoint-2, WGS-84 in degrees. -90 to 90 degrees (negative values south of equator).
     * Example: /// Example: 45.23
     * Constraints: No constraints specified.
     */
    val endPoint2Lat : Double
        get() {
            val o = __offset(36)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Longitude of link endpoint-2, WGS-84 longitude in degrees. -180 to 180 degrees (negative values west of Prime Meridian).
     * Example: /// Example: 80.23
     * Constraints: No constraints specified.
     */
    val endPoint2Lon : Double
        get() {
            val o = __offset(38)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * The endpoint-1 to endpoint-2 data rate, in kbps.
     * Example: /// Example: 10.23
     * Constraints: No constraints specified.
     */
    val dataRate1To2 : Double
        get() {
            val o = __offset(40)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * The endpoint-2 to endpoint-1 data rate, in kbps.
     * Example: /// Example: 10.23
     * Constraints: No constraints specified.
     */
    val dataRate2To1 : Double
        get() {
            val o = __offset(42)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * The state of the link (e.g. OK, DEGRADED-WEATHER, DEGRADED-EMI, etc.).
     * Example: /// Example: DEGRADED-WEATHER
     * Constraints: Minimum length = 0, Maximum length = 24
     */
    val linkState : String?
        get() {
            val o = __offset(44)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val linkStateAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(44, 1)
    fun linkStateInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 44, 1)
    /**
     * The SYSCAP mission status of the system(s) forming the link.
     * Example: /// Example: Example status
     * Constraints: Minimum length = 0, Maximum length = 24
     */
    val sysCap : String?
        get() {
            val o = __offset(46)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val sysCapAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(46, 1)
    fun sysCapInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 46, 1)
    /**
     * The OPSCAP mission status of the system(s) forming the link.
     * Example: /// Example: Example status
     * Constraints: Minimum length = 0, Maximum length = 24
     */
    val opsCap : String?
        get() {
            val o = __offset(48)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val opsCapAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(48, 1)
    fun opsCapInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 48, 1)
    /**
     * Time the row was created in the database, auto-populated by the system.
     * Example: /// Example: 2018-01-01T16:00:00.123Z
     * Constraints: No constraints specified.
     */
    val createdAt : String?
        get() {
            val o = __offset(50)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val createdAtAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(50, 1)
    fun createdAtInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 50, 1)
    /**
     * Application user who created the row in the database, auto-populated by the system.
     * Example: /// Example: some.user
     * Constraints: Minimum length = 1, Maximum length = 64
     */
    val createdBy : String?
        get() {
            val o = __offset(52)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val createdByAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(52, 1)
    fun createdByInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 52, 1)
    /**
     * Source of the data.
     * Example: /// Example: Bluestaq
     * Constraints: Minimum length = 1, Maximum length = 64
     */
    val source : String?
        get() {
            val o = __offset(54)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val sourceAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(54, 1)
    fun sourceInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 54, 1)
    /**
     * Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
     * Example: /// Example: THIRD_PARTY_DATASOURCE
     * Constraints: Minimum length = 0, Maximum length = 64
     */
    val origin : String?
        get() {
            val o = __offset(56)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val originAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(56, 1)
    fun originInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 56, 1)
    /**
     * The originating source network on which this record was created, auto-populated by the system.
     * Example: /// Example: ORIG
     * Constraints: Minimum length = 1, Maximum length = 32
     */
    val origNetwork : String?
        get() {
            val o = __offset(58)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val origNetworkAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(58, 1)
    fun origNetworkInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 58, 1)
    /**
     * Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
     * EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
     * REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
     * SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
     * TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
     * Example: /// Example: TEST
     * Constraints: Minimum length = 1, Maximum length = 32
     */
    val dataMode : Byte
        get() {
            val o = __offset(60)
            return if(o != 0) bb.get(o + bb_pos) else 0
        }
    /**
     * Satellite/catalog number of the target on-orbit primary object.
     * Example: /// Example: 1
     * Constraints: No constraints specified.
     */
    val satNo1 : Int
        get() {
            val o = __offset(62)
            return if(o != 0) bb.getInt(o + bb_pos) else 0
        }
    /**
     * Satellite/catalog number of the target on-orbit secondary object.
     * Example: /// Example: 2
     * Constraints: No constraints specified.
     */
    val satNo2 : Int
        get() {
            val o = __offset(64)
            return if(o != 0) bb.getInt(o + bb_pos) else 0
        }
    companion object {
        fun validateVersion() = Constants.FLATBUFFERS_24_3_25()
        fun getRootAsLinkStatus_Ingest(_bb: ByteBuffer): LinkStatus_Ingest = getRootAsLinkStatus_Ingest(_bb, LinkStatus_Ingest())
        fun getRootAsLinkStatus_Ingest(_bb: ByteBuffer, obj: LinkStatus_Ingest): LinkStatus_Ingest {
            _bb.order(ByteOrder.LITTLE_ENDIAN)
            return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb))
        }
        fun LinkStatus_IngestBufferHasIdentifier(_bb: ByteBuffer) : Boolean = __has_identifier(_bb, "LINK")
        fun createLinkStatus_Ingest(builder: FlatBufferBuilder, idOffset: Int, classificationMarkingOffset: Int, idOnOrbit1Offset: Int, idOnOrbit2Offset: Int, linkStartTimeOffset: Int, linkStopTimeOffset: Int, constellationOffset: Int, linkNameOffset: Int, linkTypeOffset: Int, bandOffset: Int, idBeam1Offset: Int, endPoint1NameOffset: Int, endPoint1Lat: Double, endPoint1Lon: Double, idBeam2Offset: Int, endPoint2NameOffset: Int, endPoint2Lat: Double, endPoint2Lon: Double, dataRate1To2: Double, dataRate2To1: Double, linkStateOffset: Int, sysCapOffset: Int, opsCapOffset: Int, createdAtOffset: Int, createdByOffset: Int, sourceOffset: Int, originOffset: Int, origNetworkOffset: Int, dataMode: Byte, satNo1: Int, satNo2: Int) : Int {
            builder.startTable(31)
            addDataRate2To1(builder, dataRate2To1)
            addDataRate1To2(builder, dataRate1To2)
            addEndPoint2Lon(builder, endPoint2Lon)
            addEndPoint2Lat(builder, endPoint2Lat)
            addEndPoint1Lon(builder, endPoint1Lon)
            addEndPoint1Lat(builder, endPoint1Lat)
            addSatNo2(builder, satNo2)
            addSatNo1(builder, satNo1)
            addOrigNetwork(builder, origNetworkOffset)
            addOrigin(builder, originOffset)
            addSource(builder, sourceOffset)
            addCreatedBy(builder, createdByOffset)
            addCreatedAt(builder, createdAtOffset)
            addOpsCap(builder, opsCapOffset)
            addSysCap(builder, sysCapOffset)
            addLinkState(builder, linkStateOffset)
            addEndPoint2Name(builder, endPoint2NameOffset)
            addIdBeam2(builder, idBeam2Offset)
            addEndPoint1Name(builder, endPoint1NameOffset)
            addIdBeam1(builder, idBeam1Offset)
            addBand(builder, bandOffset)
            addLinkType(builder, linkTypeOffset)
            addLinkName(builder, linkNameOffset)
            addConstellation(builder, constellationOffset)
            addLinkStopTime(builder, linkStopTimeOffset)
            addLinkStartTime(builder, linkStartTimeOffset)
            addIdOnOrbit2(builder, idOnOrbit2Offset)
            addIdOnOrbit1(builder, idOnOrbit1Offset)
            addClassificationMarking(builder, classificationMarkingOffset)
            addId(builder, idOffset)
            addDataMode(builder, dataMode)
            return endLinkStatus_Ingest(builder)
        }
        fun startLinkStatus_Ingest(builder: FlatBufferBuilder) = builder.startTable(31)
        fun addId(builder: FlatBufferBuilder, id: Int) = builder.addOffset(0, id, 0)
        fun addClassificationMarking(builder: FlatBufferBuilder, classificationMarking: Int) = builder.addOffset(1, classificationMarking, 0)
        fun addIdOnOrbit1(builder: FlatBufferBuilder, idOnOrbit1: Int) = builder.addOffset(2, idOnOrbit1, 0)
        fun addIdOnOrbit2(builder: FlatBufferBuilder, idOnOrbit2: Int) = builder.addOffset(3, idOnOrbit2, 0)
        fun addLinkStartTime(builder: FlatBufferBuilder, linkStartTime: Int) = builder.addOffset(4, linkStartTime, 0)
        fun addLinkStopTime(builder: FlatBufferBuilder, linkStopTime: Int) = builder.addOffset(5, linkStopTime, 0)
        fun addConstellation(builder: FlatBufferBuilder, constellation: Int) = builder.addOffset(6, constellation, 0)
        fun addLinkName(builder: FlatBufferBuilder, linkName: Int) = builder.addOffset(7, linkName, 0)
        fun addLinkType(builder: FlatBufferBuilder, linkType: Int) = builder.addOffset(8, linkType, 0)
        fun addBand(builder: FlatBufferBuilder, band: Int) = builder.addOffset(9, band, 0)
        fun addIdBeam1(builder: FlatBufferBuilder, idBeam1: Int) = builder.addOffset(10, idBeam1, 0)
        fun addEndPoint1Name(builder: FlatBufferBuilder, endPoint1Name: Int) = builder.addOffset(11, endPoint1Name, 0)
        fun addEndPoint1Lat(builder: FlatBufferBuilder, endPoint1Lat: Double) = builder.addDouble(12, endPoint1Lat, 0.0)
        fun addEndPoint1Lon(builder: FlatBufferBuilder, endPoint1Lon: Double) = builder.addDouble(13, endPoint1Lon, 0.0)
        fun addIdBeam2(builder: FlatBufferBuilder, idBeam2: Int) = builder.addOffset(14, idBeam2, 0)
        fun addEndPoint2Name(builder: FlatBufferBuilder, endPoint2Name: Int) = builder.addOffset(15, endPoint2Name, 0)
        fun addEndPoint2Lat(builder: FlatBufferBuilder, endPoint2Lat: Double) = builder.addDouble(16, endPoint2Lat, 0.0)
        fun addEndPoint2Lon(builder: FlatBufferBuilder, endPoint2Lon: Double) = builder.addDouble(17, endPoint2Lon, 0.0)
        fun addDataRate1To2(builder: FlatBufferBuilder, dataRate1To2: Double) = builder.addDouble(18, dataRate1To2, 0.0)
        fun addDataRate2To1(builder: FlatBufferBuilder, dataRate2To1: Double) = builder.addDouble(19, dataRate2To1, 0.0)
        fun addLinkState(builder: FlatBufferBuilder, linkState: Int) = builder.addOffset(20, linkState, 0)
        fun addSysCap(builder: FlatBufferBuilder, sysCap: Int) = builder.addOffset(21, sysCap, 0)
        fun addOpsCap(builder: FlatBufferBuilder, opsCap: Int) = builder.addOffset(22, opsCap, 0)
        fun addCreatedAt(builder: FlatBufferBuilder, createdAt: Int) = builder.addOffset(23, createdAt, 0)
        fun addCreatedBy(builder: FlatBufferBuilder, createdBy: Int) = builder.addOffset(24, createdBy, 0)
        fun addSource(builder: FlatBufferBuilder, source: Int) = builder.addOffset(25, source, 0)
        fun addOrigin(builder: FlatBufferBuilder, origin: Int) = builder.addOffset(26, origin, 0)
        fun addOrigNetwork(builder: FlatBufferBuilder, origNetwork: Int) = builder.addOffset(27, origNetwork, 0)
        fun addDataMode(builder: FlatBufferBuilder, dataMode: Byte) = builder.addByte(28, dataMode, 0)
        fun addSatNo1(builder: FlatBufferBuilder, satNo1: Int) = builder.addInt(29, satNo1, 0)
        fun addSatNo2(builder: FlatBufferBuilder, satNo2: Int) = builder.addInt(30, satNo2, 0)
        fun endLinkStatus_Ingest(builder: FlatBufferBuilder) : Int {
            val o = builder.endTable()
            return o
        }
        fun finishLinkStatusIngestBuffer(builder: FlatBufferBuilder, offset: Int) = builder.finish(offset, "LINK")
        fun finishSizePrefixedLinkStatus_IngestBuffer(builder: FlatBufferBuilder, offset: Int) = builder.finishSizePrefixed(offset, "LINK")
    }
}
