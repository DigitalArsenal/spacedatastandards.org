// automatically generated by the FlatBuffers compiler, do not modify

import com.google.flatbuffers.BaseVector
import com.google.flatbuffers.BooleanVector
import com.google.flatbuffers.ByteVector
import com.google.flatbuffers.Constants
import com.google.flatbuffers.DoubleVector
import com.google.flatbuffers.FlatBufferBuilder
import com.google.flatbuffers.FloatVector
import com.google.flatbuffers.LongVector
import com.google.flatbuffers.StringVector
import com.google.flatbuffers.Struct
import com.google.flatbuffers.Table
import com.google.flatbuffers.UnionVector
import java.nio.ByteBuffer
import java.nio.ByteOrder
import kotlin.math.sign

/**
 * /// The star catalog provides the position, proper motion, parallax, and photometric magnitudes at various bandpasses of a star.
 */
@Suppress("unused")
class StarCatalog_Full : Table() {

    fun __init(_i: Int, _bb: ByteBuffer)  {
        __reset(_i, _bb)
    }
    fun __assign(_i: Int, _bb: ByteBuffer) : StarCatalog_Full {
        __init(_i, _bb)
        return this
    }
    /**
     * Unique identifier of the record, auto-generated by the system.
     * Example: /// Example: STAR-CAT-DATASET-ID
     * Constraints: Minimum length = 1, Maximum length = 36
     */
    val id : String?
        get() {
            val o = __offset(4)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val idAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(4, 1)
    fun idInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 4, 1)
    /**
     * Classification marking of the data in IC/CAPCO Portion-marked format.
     * Example: /// Example: U
     * Constraints: Minimum length = 1, Maximum length = 128
     */
    val classificationMarking : String?
        get() {
            val o = __offset(6)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val classificationMarkingAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(6, 1)
    fun classificationMarkingInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 6, 1)
    /**
     * The ID of this object in the specific catalog associated with this record.
     * Example: /// Example: 12345
     * Constraints: No constraints specified.
     */
    val csId : Long
        get() {
            val o = __offset(8)
            return if(o != 0) bb.getLong(o + bb_pos) else 0L
        }
    /**
     * The ID of this object in the Guidance and Navagation Control (GNC) Catalog.
     * Example: /// Example: 12345
     * Constraints: No constraints specified.
     */
    val gncCatId : Int
        get() {
            val o = __offset(10)
            return if(o != 0) bb.getInt(o + bb_pos) else 0
        }
    /**
     * The ID of this object in the Gaia DR3 Catalog.
     * Example: /// Example: 89012345678901
     * Constraints: No constraints specified.
     */
    val gaiadr3CatId : Long
        get() {
            val o = __offset(12)
            return if(o != 0) bb.getLong(o + bb_pos) else 0L
        }
    /**
     * The ID of this object in the Hipparcos Catalog.
     * Example: /// Example: 12345
     * Constraints: No constraints specified.
     */
    val hipCatId : Int
        get() {
            val o = __offset(14)
            return if(o != 0) bb.getInt(o + bb_pos) else 0
        }
    /**
     * The version of the catalog associated with this object.
     * Example: /// Example: 1.23
     * Constraints: No constraints specified.
     */
    val catVersion : String?
        get() {
            val o = __offset(16)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val catVersionAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(16, 1)
    fun catVersionInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 16, 1)
    /**
     * Barycentric right ascension of the source in the International Celestial Reference System (ICRS) frame at the reference epoch, in degrees.
     * Example: /// Example: 14.43
     * Constraints: No constraints specified.
     */
    val ra : Double
        get() {
            val o = __offset(18)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Uncertainty of the right ascension of the source, in milliarcseconds, at the reference epoch.
     * Example: /// Example: 509.466
     * Constraints: No constraints specified.
     */
    val raUnc : Double
        get() {
            val o = __offset(20)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Barycentric declination of the source in International Celestial Reference System (ICRS) at the reference epoch, in degrees.
     * Example: /// Example: 21.8
     * Constraints: No constraints specified.
     */
    val dec : Double
        get() {
            val o = __offset(22)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Uncertainty of the declination of the source, in milliarcseconds, at the reference epoch.
     * Example: /// Example: 40.996
     * Constraints: No constraints specified.
     */
    val decUnc : Double
        get() {
            val o = __offset(24)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Flag indicating that the position uncertainty in either ra or dec is greater than 100 milliarcseconds.
     * Example: /// Example: False
     * Constraints: No constraints specified.
     */
    val posUncFlag : Boolean
        get() {
            val o = __offset(26)
            return if(o != 0) 0.toByte() != bb.get(o + bb_pos) else false
        }
    /**
     * Absolute stellar parallax of the source, in milliarcseconds.
     * Example: /// Example: -6.8
     * Constraints: No constraints specified.
     */
    val parallax : Double
        get() {
            val o = __offset(28)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Uncertainty of the stellar parallax, in milliarcseconds.
     * Example: /// Example: 82.35
     * Constraints: No constraints specified.
     */
    val parallaxUnc : Double
        get() {
            val o = __offset(30)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Proper motion in right ascension of the source, in milliarcseconds/year, at the reference epoch.
     * Example: /// Example: 1000.45
     * Constraints: No constraints specified.
     */
    val pmra : Double
        get() {
            val o = __offset(32)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Uncertainty of proper motion in right ascension, in milliarcseconds/year.
     * Example: /// Example: 5.6
     * Constraints: No constraints specified.
     */
    val pmraUnc : Double
        get() {
            val o = __offset(34)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Proper motion in declination of the source, in milliarcseconds/year, at the reference epoch.
     * Example: /// Example: -970.1003
     * Constraints: No constraints specified.
     */
    val pmdec : Double
        get() {
            val o = __offset(36)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Uncertainty of proper motion in declination, in milliarcseconds/year.
     * Example: /// Example: 1.22
     * Constraints: No constraints specified.
     */
    val pmdecUnc : Double
        get() {
            val o = __offset(38)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Flag indicating that the proper motion uncertainty in either ra or dec is greater than 10 milliarcseconds/year.
     * Example: /// Example: False
     * Constraints: No constraints specified.
     */
    val pmUncFlag : Boolean
        get() {
            val o = __offset(40)
            return if(o != 0) 0.toByte() != bb.get(o + bb_pos) else false
        }
    /**
     * Originating astrometric catalog for this object. Enum: [GAIADR3, HIPPARCOS, USNOBSC].
     * Example: /// Example: GAIADR3
     * Constraints: Minimum length = 1, Maximum length = 16
     */
    val astrometryOrigin : Byte
        get() {
            val o = __offset(42)
            return if(o != 0) bb.get(o + bb_pos) else 0
        }
    /**
     * Reference epoch to which the astrometric source parameters are referred, expressed as Julian Year in Barycentric Coordinate Time (TCB).
     * Example: /// Example: 2016
     * Constraints: No constraints specified.
     */
    val starEpoch : Double
        get() {
            val o = __offset(44)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Gaia DR3 optical photometric G-band magnitude in the Vega scale.
     * Example: /// Example: 0.0046
     * Constraints: No constraints specified.
     */
    val gmag : Double
        get() {
            val o = __offset(46)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Gaia DR3 optical photometric G-band magnitude uncertainty in the Vega scale.
     * Example: /// Example: 0.00292
     * Constraints: No constraints specified.
     */
    val gmagUnc : Double
        get() {
            val o = __offset(48)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Gaia DR3 optical photometric Bp-band magnitude in the Vega scale.
     * Example: /// Example: 0.04559
     * Constraints: No constraints specified.
     */
    val bpmag : Double
        get() {
            val o = __offset(50)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Gaia DR3 optical Bp-band magnitude uncertainty in the Vega scale.
     * Example: /// Example: 0.2227
     * Constraints: No constraints specified.
     */
    val bpmagUnc : Double
        get() {
            val o = __offset(52)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Gaia DR3 optical Rp-band magnitude in the Vega scale.
     * Example: /// Example: 8.0047
     * Constraints: No constraints specified.
     */
    val rpmag : Double
        get() {
            val o = __offset(54)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Gaia DR3 optical photometric Rp-band magnitude uncertainty in the Vega scale.
     * Example: /// Example: 1.233
     * Constraints: No constraints specified.
     */
    val rpmagUnc : Double
        get() {
            val o = __offset(56)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Two Micron All Sky Survey (2MASS) Point Source Catalog (PSC) near-infrared photometric J-band magnitude in the Vega scale.
     * Example: /// Example: 9.515
     * Constraints: No constraints specified.
     */
    val jmag : Double
        get() {
            val o = __offset(58)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Two Micron All Sky Survey (2MASS) Point Source Catalog (PSC) near-infrared photometric J-band magnitude uncertainty in the Vega scale.
     * Example: /// Example: 7.559
     * Constraints: No constraints specified.
     */
    val jmagUnc : Double
        get() {
            val o = __offset(60)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Two Micron All Sky Survey (2MASS) Point Source Catalog (PSC) near-infrared photometric K-band magnitude in the Vega scale.
     * Example: /// Example: 13.545
     * Constraints: No constraints specified.
     */
    val kmag : Double
        get() {
            val o = __offset(62)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Two Micron All Sky Survey (2MASS) Point Source Catalog (PSC) near-infrared photometric K-band magnitude uncertainty in the Vega scale.
     * Example: /// Example: 0.052
     * Constraints: No constraints specified.
     */
    val kmagUnc : Double
        get() {
            val o = __offset(64)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Two Micron All Sky Survey (2MASS) Point Source Catalog (PSC) near-infrared photometric H-band magnitude in the Vega scale.
     * Example: /// Example: 12.126
     * Constraints: No constraints specified.
     */
    val hmag : Double
        get() {
            val o = __offset(66)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Two Micron All Sky Survey (2MASS) Point Source Catalog (PSC) near-infrared photometric H-band magnitude uncertainty in the Vega scale.
     * Example: /// Example: 5.722
     * Constraints: No constraints specified.
     */
    val hmagUnc : Double
        get() {
            val o = __offset(68)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Flag indicating that the source exhibits variable magnitude.
     * Example: /// Example: True
     * Constraints: No constraints specified.
     */
    val varFlag : Boolean
        get() {
            val o = __offset(70)
            return if(o != 0) 0.toByte() != bb.get(o + bb_pos) else false
        }
    /**
     * Flag indicating that this is a multiple object source.
     * Example: /// Example: True
     * Constraints: No constraints specified.
     */
    val multFlag : Boolean
        get() {
            val o = __offset(72)
            return if(o != 0) 0.toByte() != bb.get(o + bb_pos) else false
        }
    /**
     * The catalog ID of the nearest neighbor to this source.
     * Example: /// Example: 2456
     * Constraints: No constraints specified.
     */
    val neighborId : Int
        get() {
            val o = __offset(74)
            return if(o != 0) bb.getInt(o + bb_pos) else 0
        }
    /**
     * Flag indicating that the nearest catalog neighbor is closer than 4.6 arcseconds.
     * Example: /// Example: False
     * Constraints: No constraints specified.
     */
    val neighborFlag : Boolean
        get() {
            val o = __offset(76)
            return if(o != 0) 0.toByte() != bb.get(o + bb_pos) else false
        }
    /**
     * Distance between source and nearest neighbor, in arcseconds.
     * Example: /// Example: 201.406
     * Constraints: No constraints specified.
     */
    val neighborDistance : Double
        get() {
            val o = __offset(78)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Flag indicating that the photocentric shift is greater than 50 milliarcseconds.
     * Example: /// Example: False
     * Constraints: No constraints specified.
     */
    val shiftFlag : Boolean
        get() {
            val o = __offset(80)
            return if(o != 0) 0.toByte() != bb.get(o + bb_pos) else false
        }
    /**
     * Photocentric shift caused by neighbors, in arcseconds.
     * Example: /// Example: 4.548
     * Constraints: No constraints specified.
     */
    val shift : Double
        get() {
            val o = __offset(82)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Time the row was created in the database, auto-populated by the system.
     * Example: /// Example: 2018-01-01T16:00:00.123Z
     * Constraints: No constraints specified.
     */
    val createdAt : String?
        get() {
            val o = __offset(84)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val createdAtAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(84, 1)
    fun createdAtInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 84, 1)
    /**
     * Application user who created the row in the database, auto-populated by the system.
     * Example: /// Example: some.user
     * Constraints: Minimum length = 1, Maximum length = 64
     */
    val createdBy : String?
        get() {
            val o = __offset(86)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val createdByAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(86, 1)
    fun createdByInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 86, 1)
    /**
     * Time the row was updated in the database.
     * Example: /// Example: 2018-01-01T16:00:00.123Z
     * Constraints: No constraints specified.
     */
    val updatedAt : String?
        get() {
            val o = __offset(88)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val updatedAtAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(88, 1)
    fun updatedAtInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 88, 1)
    /**
     * Application user who updated the row in the database.
     * Example: /// Example: some.user
     * Constraints: Minimum length = 1, Maximum length = 64
     */
    val updatedBy : String?
        get() {
            val o = __offset(90)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val updatedByAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(90, 1)
    fun updatedByInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 90, 1)
    /**
     * Source of the data.
     * Example: /// Example: Bluestaq
     * Constraints: Minimum length = 1, Maximum length = 36
     */
    val source : String?
        get() {
            val o = __offset(92)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val sourceAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(92, 1)
    fun sourceInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 92, 1)
    /**
     * Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
     * Example: /// Example: THIRD_PARTY_DATASOURCE
     * Constraints: Minimum length = 0, Maximum length = 64
     */
    val origin : String?
        get() {
            val o = __offset(94)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val originAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(94, 1)
    fun originInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 94, 1)
    /**
     * The originating source network on which this record was created, auto-populated by the system.
     * Example: /// Example: ORIG
     * Constraints: Minimum length = 0, Maximum length = 4
     */
    val origNetwork : String?
        get() {
            val o = __offset(96)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val origNetworkAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(96, 1)
    fun origNetworkInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 96, 1)
    /**
     * Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
     * EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
     * REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
     * SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
     * TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
     * Example: /// Example: TEST
     * Constraints: Minimum length = 1, Maximum length = 32
     */
    val dataMode : Byte
        get() {
            val o = __offset(98)
            return if(o != 0) bb.get(o + bb_pos) else 0
        }
    companion object {
        fun validateVersion() = Constants.FLATBUFFERS_24_3_25()
        fun getRootAsStarCatalog_Full(_bb: ByteBuffer): StarCatalog_Full = getRootAsStarCatalog_Full(_bb, StarCatalog_Full())
        fun getRootAsStarCatalog_Full(_bb: ByteBuffer, obj: StarCatalog_Full): StarCatalog_Full {
            _bb.order(ByteOrder.LITTLE_ENDIAN)
            return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb))
        }
        fun StarCatalog_FullBufferHasIdentifier(_bb: ByteBuffer) : Boolean = __has_identifier(_bb, "STAR")
        fun createStarCatalog_Full(builder: FlatBufferBuilder, idOffset: Int, classificationMarkingOffset: Int, csId: Long, gncCatId: Int, gaiadr3CatId: Long, hipCatId: Int, catVersionOffset: Int, ra: Double, raUnc: Double, dec: Double, decUnc: Double, posUncFlag: Boolean, parallax: Double, parallaxUnc: Double, pmra: Double, pmraUnc: Double, pmdec: Double, pmdecUnc: Double, pmUncFlag: Boolean, astrometryOrigin: Byte, starEpoch: Double, gmag: Double, gmagUnc: Double, bpmag: Double, bpmagUnc: Double, rpmag: Double, rpmagUnc: Double, jmag: Double, jmagUnc: Double, kmag: Double, kmagUnc: Double, hmag: Double, hmagUnc: Double, varFlag: Boolean, multFlag: Boolean, neighborId: Int, neighborFlag: Boolean, neighborDistance: Double, shiftFlag: Boolean, shift: Double, createdAtOffset: Int, createdByOffset: Int, updatedAtOffset: Int, updatedByOffset: Int, sourceOffset: Int, originOffset: Int, origNetworkOffset: Int, dataMode: Byte) : Int {
            builder.startTable(48)
            addShift(builder, shift)
            addNeighborDistance(builder, neighborDistance)
            addHmagUnc(builder, hmagUnc)
            addHmag(builder, hmag)
            addKmagUnc(builder, kmagUnc)
            addKmag(builder, kmag)
            addJmagUnc(builder, jmagUnc)
            addJmag(builder, jmag)
            addRpmagUnc(builder, rpmagUnc)
            addRpmag(builder, rpmag)
            addBpmagUnc(builder, bpmagUnc)
            addBpmag(builder, bpmag)
            addGmagUnc(builder, gmagUnc)
            addGmag(builder, gmag)
            addStarEpoch(builder, starEpoch)
            addPmdecUnc(builder, pmdecUnc)
            addPmdec(builder, pmdec)
            addPmraUnc(builder, pmraUnc)
            addPmra(builder, pmra)
            addParallaxUnc(builder, parallaxUnc)
            addParallax(builder, parallax)
            addDecUnc(builder, decUnc)
            addDec(builder, dec)
            addRaUnc(builder, raUnc)
            addRa(builder, ra)
            addGaiadr3CatId(builder, gaiadr3CatId)
            addCsId(builder, csId)
            addOrigNetwork(builder, origNetworkOffset)
            addOrigin(builder, originOffset)
            addSource(builder, sourceOffset)
            addUpdatedBy(builder, updatedByOffset)
            addUpdatedAt(builder, updatedAtOffset)
            addCreatedBy(builder, createdByOffset)
            addCreatedAt(builder, createdAtOffset)
            addNeighborId(builder, neighborId)
            addCatVersion(builder, catVersionOffset)
            addHipCatId(builder, hipCatId)
            addGncCatId(builder, gncCatId)
            addClassificationMarking(builder, classificationMarkingOffset)
            addId(builder, idOffset)
            addDataMode(builder, dataMode)
            addShiftFlag(builder, shiftFlag)
            addNeighborFlag(builder, neighborFlag)
            addMultFlag(builder, multFlag)
            addVarFlag(builder, varFlag)
            addAstrometryOrigin(builder, astrometryOrigin)
            addPmUncFlag(builder, pmUncFlag)
            addPosUncFlag(builder, posUncFlag)
            return endStarCatalog_Full(builder)
        }
        fun startStarCatalog_Full(builder: FlatBufferBuilder) = builder.startTable(48)
        fun addId(builder: FlatBufferBuilder, id: Int) = builder.addOffset(0, id, 0)
        fun addClassificationMarking(builder: FlatBufferBuilder, classificationMarking: Int) = builder.addOffset(1, classificationMarking, 0)
        fun addCsId(builder: FlatBufferBuilder, csId: Long) = builder.addLong(2, csId, 0L)
        fun addGncCatId(builder: FlatBufferBuilder, gncCatId: Int) = builder.addInt(3, gncCatId, 0)
        fun addGaiadr3CatId(builder: FlatBufferBuilder, gaiadr3CatId: Long) = builder.addLong(4, gaiadr3CatId, 0L)
        fun addHipCatId(builder: FlatBufferBuilder, hipCatId: Int) = builder.addInt(5, hipCatId, 0)
        fun addCatVersion(builder: FlatBufferBuilder, catVersion: Int) = builder.addOffset(6, catVersion, 0)
        fun addRa(builder: FlatBufferBuilder, ra: Double) = builder.addDouble(7, ra, 0.0)
        fun addRaUnc(builder: FlatBufferBuilder, raUnc: Double) = builder.addDouble(8, raUnc, 0.0)
        fun addDec(builder: FlatBufferBuilder, dec: Double) = builder.addDouble(9, dec, 0.0)
        fun addDecUnc(builder: FlatBufferBuilder, decUnc: Double) = builder.addDouble(10, decUnc, 0.0)
        fun addPosUncFlag(builder: FlatBufferBuilder, posUncFlag: Boolean) = builder.addBoolean(11, posUncFlag, false)
        fun addParallax(builder: FlatBufferBuilder, parallax: Double) = builder.addDouble(12, parallax, 0.0)
        fun addParallaxUnc(builder: FlatBufferBuilder, parallaxUnc: Double) = builder.addDouble(13, parallaxUnc, 0.0)
        fun addPmra(builder: FlatBufferBuilder, pmra: Double) = builder.addDouble(14, pmra, 0.0)
        fun addPmraUnc(builder: FlatBufferBuilder, pmraUnc: Double) = builder.addDouble(15, pmraUnc, 0.0)
        fun addPmdec(builder: FlatBufferBuilder, pmdec: Double) = builder.addDouble(16, pmdec, 0.0)
        fun addPmdecUnc(builder: FlatBufferBuilder, pmdecUnc: Double) = builder.addDouble(17, pmdecUnc, 0.0)
        fun addPmUncFlag(builder: FlatBufferBuilder, pmUncFlag: Boolean) = builder.addBoolean(18, pmUncFlag, false)
        fun addAstrometryOrigin(builder: FlatBufferBuilder, astrometryOrigin: Byte) = builder.addByte(19, astrometryOrigin, 0)
        fun addStarEpoch(builder: FlatBufferBuilder, starEpoch: Double) = builder.addDouble(20, starEpoch, 0.0)
        fun addGmag(builder: FlatBufferBuilder, gmag: Double) = builder.addDouble(21, gmag, 0.0)
        fun addGmagUnc(builder: FlatBufferBuilder, gmagUnc: Double) = builder.addDouble(22, gmagUnc, 0.0)
        fun addBpmag(builder: FlatBufferBuilder, bpmag: Double) = builder.addDouble(23, bpmag, 0.0)
        fun addBpmagUnc(builder: FlatBufferBuilder, bpmagUnc: Double) = builder.addDouble(24, bpmagUnc, 0.0)
        fun addRpmag(builder: FlatBufferBuilder, rpmag: Double) = builder.addDouble(25, rpmag, 0.0)
        fun addRpmagUnc(builder: FlatBufferBuilder, rpmagUnc: Double) = builder.addDouble(26, rpmagUnc, 0.0)
        fun addJmag(builder: FlatBufferBuilder, jmag: Double) = builder.addDouble(27, jmag, 0.0)
        fun addJmagUnc(builder: FlatBufferBuilder, jmagUnc: Double) = builder.addDouble(28, jmagUnc, 0.0)
        fun addKmag(builder: FlatBufferBuilder, kmag: Double) = builder.addDouble(29, kmag, 0.0)
        fun addKmagUnc(builder: FlatBufferBuilder, kmagUnc: Double) = builder.addDouble(30, kmagUnc, 0.0)
        fun addHmag(builder: FlatBufferBuilder, hmag: Double) = builder.addDouble(31, hmag, 0.0)
        fun addHmagUnc(builder: FlatBufferBuilder, hmagUnc: Double) = builder.addDouble(32, hmagUnc, 0.0)
        fun addVarFlag(builder: FlatBufferBuilder, varFlag: Boolean) = builder.addBoolean(33, varFlag, false)
        fun addMultFlag(builder: FlatBufferBuilder, multFlag: Boolean) = builder.addBoolean(34, multFlag, false)
        fun addNeighborId(builder: FlatBufferBuilder, neighborId: Int) = builder.addInt(35, neighborId, 0)
        fun addNeighborFlag(builder: FlatBufferBuilder, neighborFlag: Boolean) = builder.addBoolean(36, neighborFlag, false)
        fun addNeighborDistance(builder: FlatBufferBuilder, neighborDistance: Double) = builder.addDouble(37, neighborDistance, 0.0)
        fun addShiftFlag(builder: FlatBufferBuilder, shiftFlag: Boolean) = builder.addBoolean(38, shiftFlag, false)
        fun addShift(builder: FlatBufferBuilder, shift: Double) = builder.addDouble(39, shift, 0.0)
        fun addCreatedAt(builder: FlatBufferBuilder, createdAt: Int) = builder.addOffset(40, createdAt, 0)
        fun addCreatedBy(builder: FlatBufferBuilder, createdBy: Int) = builder.addOffset(41, createdBy, 0)
        fun addUpdatedAt(builder: FlatBufferBuilder, updatedAt: Int) = builder.addOffset(42, updatedAt, 0)
        fun addUpdatedBy(builder: FlatBufferBuilder, updatedBy: Int) = builder.addOffset(43, updatedBy, 0)
        fun addSource(builder: FlatBufferBuilder, source: Int) = builder.addOffset(44, source, 0)
        fun addOrigin(builder: FlatBufferBuilder, origin: Int) = builder.addOffset(45, origin, 0)
        fun addOrigNetwork(builder: FlatBufferBuilder, origNetwork: Int) = builder.addOffset(46, origNetwork, 0)
        fun addDataMode(builder: FlatBufferBuilder, dataMode: Byte) = builder.addByte(47, dataMode, 0)
        fun endStarCatalog_Full(builder: FlatBufferBuilder) : Int {
            val o = builder.endTable()
            return o
        }
        fun finishStarCatalogFullBuffer(builder: FlatBufferBuilder, offset: Int) = builder.finish(offset, "STAR")
        fun finishSizePrefixedStarCatalog_FullBuffer(builder: FlatBufferBuilder, offset: Int) = builder.finishSizePrefixed(offset, "STAR")
    }
}
