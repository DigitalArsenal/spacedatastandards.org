// automatically generated by the FlatBuffers compiler, do not modify

import com.google.flatbuffers.BaseVector
import com.google.flatbuffers.BooleanVector
import com.google.flatbuffers.ByteVector
import com.google.flatbuffers.Constants
import com.google.flatbuffers.DoubleVector
import com.google.flatbuffers.FlatBufferBuilder
import com.google.flatbuffers.FloatVector
import com.google.flatbuffers.LongVector
import com.google.flatbuffers.StringVector
import com.google.flatbuffers.Struct
import com.google.flatbuffers.Table
import com.google.flatbuffers.UnionVector
import java.nio.ByteBuffer
import java.nio.ByteOrder
import kotlin.math.sign

/**
 * /// Properties and characteristics of equipment that can be associated with a site or other entity.
 */
@Suppress("unused")
class Equipment_Ingest : Table() {

    fun __init(_i: Int, _bb: ByteBuffer)  {
        __reset(_i, _bb)
    }
    fun __assign(_i: Int, _bb: ByteBuffer) : Equipment_Ingest {
        __init(_i, _bb)
        return this
    }
    /**
     * Unique identifier of the record, auto-generated by the system.
     * Example: /// Example: 0167f577-e06c-358e-85aa-0a07a730bdd0
     * Constraints: Minimum length = 1, Maximum length = 36
     */
    val id : String?
        get() {
            val o = __offset(4)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val idAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(4, 1)
    fun idInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 4, 1)
    /**
     * Classification marking of the data in IC/CAPCO Portion-marked format.
     * Example: /// Example: U
     * Constraints: Minimum length = 1, Maximum length = 128
     */
    val classificationMarking : String?
        get() {
            val o = __offset(6)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val classificationMarkingAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(6, 1)
    fun classificationMarkingInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 6, 1)
    /**
     * Unique identifier of the Parent equipment record associated with this equipment record.
     * Example: /// Example: PARENT-EQUIPMENT-ID
     * Constraints: Minimum length = 0, Maximum length = 36
     */
    val idParentEquipment : String?
        get() {
            val o = __offset(8)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val idParentEquipmentAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(8, 1)
    fun idParentEquipmentInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 8, 1)
    /**
     * Unique identifier of the Site Entity associated with the equipment record.
     * Example: /// Example: SITE-ID
     * Constraints: Minimum length = 0, Maximum length = 36
     */
    val idSite : String?
        get() {
            val o = __offset(10)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val idSiteAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(10, 1)
    fun idSiteInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 10, 1)
    /**
     * Unique identifier of the operating unit associated with the equipment record.
     * Example: /// Example: UNIT-ID
     * Constraints: Minimum length = 0, Maximum length = 36
     */
    val idOperatingUnit : String?
        get() {
            val o = __offset(12)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val idOperatingUnitAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(12, 1)
    fun idOperatingUnitInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 12, 1)
    /**
     * Unique identifier of the Equipment record from the originating system.
     * Example: /// Example: ORIG-EQP-ID
     * Constraints: Minimum length = 0, Maximum length = 36
     */
    val altEqpId : String?
        get() {
            val o = __offset(14)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val altEqpIdAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(14, 1)
    fun altEqpIdInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 14, 1)
    /**
     * Designated equipment code assigned to the item of equipment or an abbreviation record type unique identifier. Users should consult the data provider for information on the equipment code structure.
     * Example: /// Example: X12345
     * Constraints: Minimum length = 0, Maximum length = 7
     */
    val eqpCode : String?
        get() {
            val o = __offset(16)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val eqpCodeAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(16, 1)
    fun eqpCodeInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 16, 1)
    /**
     * Uniquely identifies each item or group of equipment associated with a unit, facility or site.
     * Example: /// Example: 001
     * Constraints: Minimum length = 0, Maximum length = 3
     */
    val eqpIdNum : String?
        get() {
            val o = __offset(18)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val eqpIdNumAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(18, 1)
    fun eqpIdNumInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 18, 1)
    /**
     * The DoD Standard Country Code designator for the country or political entity to which the equipment geographic coordinates reside. This field will be set to "OTHR" if the source value does not match a UDL Country code value (ISO-3166-ALPHA-2).
     * Example: /// Example: IQ
     * Constraints: Minimum length = 1, Maximum length = 4
     */
    val countryCode : String?
        get() {
            val o = __offset(20)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val countryCodeAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(20, 1)
    fun countryCodeInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 20, 1)
    /**
     * Specifies an alternate country code if the data provider code is not part of an official Country Code standard such as ISO-3166 or FIPS. This field will be set to the value provided by the source and should be used for all Queries specifying a Country Code.
     * Example: /// Example: IZ
     * Constraints: Minimum length = 0, Maximum length = 4
     */
    val altCountryCode : String?
        get() {
            val o = __offset(22)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val altCountryCodeAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(22, 1)
    fun altCountryCodeInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 22, 1)
    /**
     * World Aeronautical Chart identifier for the area in which a designated place is located.
     * Example: /// Example: 0427
     * Constraints: Minimum length = 0, Maximum length = 4
     */
    val wac : String?
        get() {
            val o = __offset(24)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val wacAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(24, 1)
    fun wacInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 24, 1)
    /**
     * Provider specific sequential number assigned to the equipment.
     * Example: /// Example: 5
     * Constraints: No constraints specified.
     */
    val seqNum : Int
        get() {
            val o = __offset(26)
            return if(o != 0) bb.getInt(o + bb_pos) else 0
        }
    /**
     * Generic type this specific piece of equipment belongs to, and the identifying nomenclature which describes the equipment.
     * Example: /// Example: AMPHIBIOUS WARFARE SHIP
     * Constraints: Minimum length = 0, Maximum length = 54
     */
    val nomen : String?
        get() {
            val o = __offset(28)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val nomenAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(28, 1)
    fun nomenInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 28, 1)
    /**
     * The Degree to which an entity is ready to perform the overall operational mission(s) for which it was organized and equipped. The specific usage and enumerations contained in this field may be found in the documentation provided in the referenceDoc field.  If referenceDoc not provided, users may consult the data provider.
     * Example: /// Example: OPR
     * Constraints: Minimum length = 0, Maximum length = 3
     */
    val operStatus : String?
        get() {
            val o = __offset(30)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val operStatusAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(30, 1)
    fun operStatusInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 30, 1)
    /**
     * The physical manner of being or state of existence of the entity.  A physical condition that must be considered in the determining of a course of action. The specific usage and enumerations contained in this field may be found in the documentation provided in the referenceDoc field.  If referenceDoc not provided, users may consult the data provider.
     * Example: /// Example: RDY
     * Constraints: Minimum length = 0, Maximum length = 4
     */
    val condition : String?
        get() {
            val o = __offset(32)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val conditionAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(32, 1)
    fun conditionInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 32, 1)
    /**
     * Availability of the entity relative to its condition.  Indicates the reason the entity is not fully operational. The specific usage and enumerations contained in this field may be found in the documentation provided in the referenceDoc field.  If referenceDoc not provided, users may consult the data provider.
     * Example: /// Example: A
     * Constraints: Minimum length = 0, Maximum length = 4
     */
    val conditionAvail : String?
        get() {
            val o = __offset(34)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val conditionAvailAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(34, 1)
    fun conditionAvailInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 34, 1)
    /**
     * Eval represents the Intelligence Confidence Level or the Reliability/degree of confidence that the analyst has assigned to the data within this record. The numerical range is from 1 to 9 with 1 representing the highest confidence level.
     * Example: /// Example: 7
     * Constraints: No constraints specified.
     */
    val eval : Int
        get() {
            val o = __offset(36)
            return if(o != 0) bb.getInt(o + bb_pos) else 0
        }
    /**
     * Functional Production Area (FPA) under the Shared Production Program (SPP).  Producers are defined per country per FPA. The specific usage and enumerations contained in this field may be found in the documentation provided in the referenceDoc field.  If referenceDoc not provided, users may consult the data provider.
     * Example: /// Example: NOB
     * Constraints: Minimum length = 0, Maximum length = 5
     */
    val fpa : String?
        get() {
            val o = __offset(38)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val fpaAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(38, 1)
    fun fpaInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 38, 1)
    /**
     * Indicates the function or mission of this equipment, which may or may not be engaged in at any particular time.  Typically refers to a unit, organization, or installation/facility performing a specific function or mission such as a redistribution center or naval shipyard. The specific usage and enumerations contained in this field may be found in the documentation provided in the referenceDoc field.  If referenceDoc not provided, users may consult the data provider.
     * Example: /// Example: OCC
     * Constraints: Minimum length = 0, Maximum length = 3
     */
    val function : String?
        get() {
            val o = __offset(40)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val functionAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(40, 1)
    fun functionInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 40, 1)
    /**
     * Estimated identity of the Site (ASSUMED FRIEND, FRIEND, HOSTILE, FAKER, JOKER, NEUTRAL, PENDING, SUSPECT, UNKNOWN): 
     * ASSUMED FRIEND: Track assumed to be a friend due to the object characteristics, behavior, and/or origin.
     * FRIEND: Track object supporting friendly forces and belonging to a declared friendly nation or entity.
     * HOSTILE: Track object belonging to an opposing nation, party, group, or entity deemed to contribute to a threat to friendly forces or their mission due to its behavior, characteristics, nationality, or origin.
     * FAKER: Friendly track, object, or entity acting as an exercise hostile.
     * JOKER: Friendly track, object, or entity acting as an exercise suspect.
     * NEUTRAL: Track object whose characteristics, behavior, nationality, and/or origin indicate that it is neither supporting nor opposing friendly forces or their mission.
     * PENDING: Track object which has not been evaluated.
     * SUSPECT: Track object deemed potentially hostile due to the object characteristics, behavior, nationality, and/or origin.
     * UNKNOWN: Track object which has been evaluated and does not meet criteria for any standard identity.
     * Example: /// Example: FRIEND
     * Constraints: Minimum length = 0, Maximum length = 32
     */
    val ident : String?
        get() {
            val o = __offset(42)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val identAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(42, 1)
    fun identInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 42, 1)
    /**
     * The DoD Standard Country Code designator for the country or political entity to which the equipment owes its allegiance. This field will be set to "OTHR" if the source value does not match a UDL Country code value (ISO-3166-ALPHA-2).
     * Example: /// Example: OTHR
     * Constraints: Minimum length = 0, Maximum length = 4
     */
    val allegiance : String?
        get() {
            val o = __offset(44)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val allegianceAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(44, 1)
    fun allegianceInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 44, 1)
    /**
     * Specifies an alternate allegiance code if the data provider code is not part of an official Country Code standard such as ISO-3166 or FIPS. This field will be set to the value provided by the source and should be used for all Queries specifying allegiance.
     * Example: /// Example: HL
     * Constraints: Minimum length = 0, Maximum length = 4
     */
    val altAllegiance : String?
        get() {
            val o = __offset(46)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val altAllegianceAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(46, 1)
    fun altAllegianceInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 46, 1)
    /**
     * Indicates the reason that the equipment is at that location. The specific usage and enumerations contained in this field may be found in the documentation provided in the referenceDoc field.  If referenceDoc not provided, users may consult the data provider.
     * Example: /// Example: GR
     * Constraints: Minimum length = 0, Maximum length = 9
     */
    val locReason : String?
        get() {
            val o = __offset(48)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val locReasonAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(48, 1)
    fun locReasonInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 48, 1)
    /**
     * Internationally recognized water area in which the vessel is most likely to be deployed or in which it normally operates most frequently.
     * Example: /// Example: Territorial Sea
     * Constraints: Minimum length = 0, Maximum length = 32
     */
    val operAreaPrimary : String?
        get() {
            val o = __offset(50)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val operAreaPrimaryAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(50, 1)
    fun operAreaPrimaryInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 50, 1)
    /**
     * Principal operational function being performed.  The specific usage and enumerations contained in this field may be found in the documentation provided in the referenceDoc field.  If referenceDoc not provided, users may consult the data provider.
     * Example: /// Example: JG
     * Constraints: Minimum length = 0, Maximum length = 4
     */
    val functPrimary : String?
        get() {
            val o = __offset(52)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val functPrimaryAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(52, 1)
    fun functPrimaryInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 52, 1)
    /**
     * A mathematical model of the earth used to calculate coordinates on a map.  US Forces use the World Geodetic System 1984 (WGS 84), but also use maps by allied countries with local datums.  The datum must be specified to ensure accuracy of coordinates. The specific usage and enumerations contained in this field may be found in the documentation provided in the referenceDoc field.  If referenceDoc not provided, users may consult the data provider.
     * Example: /// Example: WGS
     * Constraints: Minimum length = 0, Maximum length = 16
     */
    val coordDatum : String?
        get() {
            val o = __offset(54)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val coordDatumAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(54, 1)
    fun coordDatumInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 54, 1)
    /**
     * Indicates any of the magnitudes that serve to define the position of a point by reference to a fixed figure, system of lines, etc. specified in degrees, minute, and seconds.
     * Pos. 1-2.  Latitude Degrees     [00-90]
     * Pos. 3-4.  Latitude Minutes     [00-59]
     * Pos. 5-6.  Latitude Seconds     [00-59]
     * Pos. 7-9.  Latitude Thousandths Of Seconds   [000-999]  
     * Pos. 10. Latitude Hemisphere       [NS] 
     * Pos. 11-13. Longitude Degrees     [00-180] 
     * Pos. 14-15. Longitude Minutes     [00-59] 
     * Pos. 16-17. Longitude Seconds     [00-59] 
     * Pos. 18-20. Longitude Thousandths Of Seconds      [000-999]
     * Pos. 21. Longitude Hemisphere     [EW]
     * Pos. 1-21.  Unknown Latitude and Unknown Longitude [000000000U000000000U]].
     * Example: /// Example: 340000000N0430000000E
     * Constraints: Minimum length = 0, Maximum length = 21
     */
    val coord : String?
        get() {
            val o = __offset(56)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val coordAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(56, 1)
    fun coordInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 56, 1)
    /**
     * Indicates the plus or minus error assessed against the method used to derive the coordinate.
     * Example: /// Example: 12.345
     * Constraints: No constraints specified.
     */
    val coordDerivAcc : Double
        get() {
            val o = __offset(58)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * WGS84 latitude of the location, in degrees. -90 to 90 degrees (negative values south of equator).
     * Example: /// Example: 39.019242
     * Constraints: No constraints specified.
     */
    val lat : Double
        get() {
            val o = __offset(60)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * WGS84 longitude of the location, in degrees. -180 to 180 degrees (negative values west of Prime Meridian).
     * Example: /// Example: -104.251659
     * Constraints: No constraints specified.
     */
    val lon : Double
        get() {
            val o = __offset(62)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Ground elevation, in meters, of the geographic coordinates referenced to (above or below) Mean Sea Level (MSL) vertical datum.
     * Example: /// Example: 123.45
     * Constraints: No constraints specified.
     */
    val elevMsl : Double
        get() {
            val o = __offset(64)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Indicates the confidence level expressed as a percent that a specific geometric spatial element, ELEVATION_MSL linear accuracy, has been vertically positioned to within a specified vertical accuracy. Confidence level has a range of values from 0 to 100, with 100 being highest level of confidence.
     * Example: /// Example: 50
     * Constraints: No constraints specified.
     */
    val elevMslConfLvl : Int
        get() {
            val o = __offset(66)
            return if(o != 0) bb.getInt(o + bb_pos) else 0
        }
    /**
     * Indicates the plus or minus error assessed against the method used to derive the elevation, measured in meters.
     * Example: /// Example: 12.34
     * Constraints: No constraints specified.
     */
    val elevMslDerivAcc : Double
        get() {
            val o = __offset(68)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * The distance between Mean Sea Level and a referenced ellipsoid, measured in meters.
     * Example: /// Example: 12.34
     * Constraints: No constraints specified.
     */
    val geoidalMslSep : Double
        get() {
            val o = __offset(70)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Indicates the grid system used in the development of the milGrid coordinates. Values are:
     * UPS - Universal Polar System
     * UTM - Universal Transverse Mercator.
     * Example: /// Example: UTM
     * Constraints: Minimum length = 0, Maximum length = 3
     */
    val milGridSys : String?
        get() {
            val o = __offset(72)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val milGridSysAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(72, 1)
    fun milGridSysInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 72, 1)
    /**
     * The Military Grid Reference System is the geocoordinate standard used by NATO militaries for locating points on Earth. The MGRS is derived from the Universal Transverse Mercator (UTM) grid system and the Universal Polar Stereographic (UPS) grid system, but uses a different labeling convention. The MGRS is used as geocode for the entire Earth. Example of an milgrid coordinate, or grid reference, would be 4QFJ12345678, which consists of three parts:
     * 4Q (grid zone designator, GZD)
     * FJ (the 100,000-meter square identifier)
     * 12345678 (numerical location; easting is 1234 and northing is 5678, in this case specifying a location with 10 m resolution).
     * Example: /// Example: 4QFJ12345678
     * Constraints: Minimum length = 0, Maximum length = 15
     */
    val milGrid : String?
        get() {
            val o = __offset(74)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val milGridAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(74, 1)
    fun milGridInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 74, 1)
    /**
     * Universal Transverse Mercator (UTM) grid coordinates.
     * Pos. 1-2, UTM Zone Column   [01-60
     * Pos. 3, UTM Zone Row   [C-HJ-NP-X]
     * Pos. 4, UTM False Easting   [0-9]
     * Pos. 5-9, UTM Meter Easting    [0-9][0-9][0-9][0-9][0-9]
     * Pos. 10-11, UTM False Northing    [0-9][0-9]
     * Pos. 12-16, UTM Meter Northing    [0-9][0-9][0-9][0-9][0-9].
     * Example: /// Example: 19P4390691376966
     * Constraints: Minimum length = 0, Maximum length = 16
     */
    val utm : String?
        get() {
            val o = __offset(76)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val utmAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(76, 1)
    fun utmInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 76, 1)
    /**
     * Air Defense District (ADD) or Air Defense Area (ADA) in which the geographic coordinates reside.
     * Example: /// Example: AL006
     * Constraints: Minimum length = 0, Maximum length = 5
     */
    val airDefArea : String?
        get() {
            val o = __offset(78)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val airDefAreaAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(78, 1)
    fun airDefAreaInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 78, 1)
    /**
     * Political subdivision in which the geographic coordinates reside. The specific usage and enumerations contained in this field may be found in the documentation provided in the referenceDoc field.  If referenceDoc not provided, users may consult the data provider.
     * Example: /// Example: IZ07
     * Constraints: Minimum length = 0, Maximum length = 7
     */
    val polSubdiv : String?
        get() {
            val o = __offset(80)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val polSubdivAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(80, 1)
    fun polSubdivInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 80, 1)
    /**
     * Relative to the parent entity, the total number of military personnel or equipment assessed to be on-hand (OH).
     * Example: /// Example: 7
     * Constraints: No constraints specified.
     */
    val qtyOh : Int
        get() {
            val o = __offset(82)
            return if(o != 0) bb.getInt(o + bb_pos) else 0
        }
    /**
     * A standard scheme for symbol coding enabling the transfer, display and use of symbols and graphics among information systems, as per MIL-STD 2525B, and supported by the element AFFILIATION.
     * Example: /// Example: SOGPU----------
     * Constraints: Minimum length = 0, Maximum length = 15
     */
    val symCode : String?
        get() {
            val o = __offset(84)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val symCodeAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(84, 1)
    fun symCodeInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 84, 1)
    /**
     * Indicates the importance of the equipment. Referenced, but not constrained to, the following class ratings type classifications.
     * 0 - Not of significant importance of the system
     * 1 - Primary importance to system
     * 2 - Secondary importance to system
     * 3 - Tertiary importance to system
     * O - Other. Explain in Remarks.
     * Example: /// Example: 1
     * Constraints: Minimum length = 0, Maximum length = 1
     */
    val classRating : String?
        get() {
            val o = __offset(86)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val classRatingAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(86, 1)
    fun classRatingInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 86, 1)
    /**
     * Validity and currency of the data in the record to be used in conjunction with the other elements in the record as defined by SOPs. Referenced, but not constrained to, the following record status type classifications.
     * A - Active
     * I - Inactive
     * K - Acknowledged
     * L - Local
     * Q - A nominated (NOM) or Data Change Request (DCR) record
     * R - Production reduced by CMD decision
     * W - Working Record.
     * Example: /// Example: A
     * Constraints: Minimum length = 0, Maximum length = 1
     */
    val recStatus : String?
        get() {
            val o = __offset(88)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val recStatusAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(88, 1)
    fun recStatusInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 88, 1)
    /**
     * Date on which the data in the record was last reviewed by the responsible analyst for accuracy and currency.  This date cannot be greater than the current date.
     * Example: /// Example: 2008-06-10
     * Constraints: No constraints specified.
     */
    val reviewDate : String?
        get() {
            val o = __offset(90)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val reviewDateAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(90, 1)
    fun reviewDateInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 90, 1)
    /**
     * Responsible Producer - Organization that is responsible for the maintenance of the record.
     * Example: /// Example: RT
     * Constraints: Minimum length = 0, Maximum length = 4
     */
    val resProd : String?
        get() {
            val o = __offset(92)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val resProdAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(92, 1)
    fun resProdInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 92, 1)
    /**
     * The reference documentiation that specifies the usage and enumerations contained in this record. If referenceDoc not provided, users may consult the data provider.
     * Example: /// Example: Provider Reference Documentation
     * Constraints: Minimum length = 0, Maximum length = 128
     */
    val referenceDoc : String?
        get() {
            val o = __offset(94)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val referenceDocAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(94, 1)
    fun referenceDocInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 94, 1)
    /**
     * Array of UDL record types such as AIRCRAFT, VESSEL, EO, MTI that are related to this equipment record. See the associated 'srcIds' array for the record UUIDs, positionally corresponding to the record types in this array. The 'srcTyps' and 'srcIds' arrays must match in size.
     * Example: /// Example: ['AIRCRAFT']
     * Constraints: No constraints specified.
     */
    fun srcTyps(j: Int) : String? {
        val o = __offset(96)
        return if (o != 0) {
            __string(__vector(o) + j * 4)
        } else {
            null
        }
    }
    val srcTypsLength : Int
        get() {
            val o = __offset(96); return if (o != 0) __vector_len(o) else 0
        }
    /**
     * Array of UUID(s) of the UDL data record(s) that are related to this equipment record. See the associated 'srcTyps' array for the specific types of data, positionally corresponding to the UUIDs in this array. The 'srcTyps' and 'srcIds' arrays must match in size. See the corresponding srcTyps array element for the data type of the UUID and use the appropriate API operation to retrieve that object.
     * Example: /// Example: ['SRC_ID_1']
     * Constraints: No constraints specified.
     */
    fun srcIds(j: Int) : String? {
        val o = __offset(98)
        return if (o != 0) {
            __string(__vector(o) + j * 4)
        } else {
            null
        }
    }
    val srcIdsLength : Int
        get() {
            val o = __offset(98); return if (o != 0) __vector_len(o) else 0
        }
    /**
     * Time the row was created in the database, auto-populated by the system.
     * Example: /// Example: 2018-01-01T16:00:00.123Z
     * Constraints: No constraints specified.
     */
    val createdAt : String?
        get() {
            val o = __offset(100)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val createdAtAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(100, 1)
    fun createdAtInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 100, 1)
    /**
     * Application user who created the row in the database, auto-populated by the system.
     * Example: /// Example: some.user
     * Constraints: Minimum length = 1, Maximum length = 64
     */
    val createdBy : String?
        get() {
            val o = __offset(102)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val createdByAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(102, 1)
    fun createdByInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 102, 1)
    /**
     * Source of the data.
     * Example: /// Example: Bluestaq
     * Constraints: Minimum length = 1, Maximum length = 64
     */
    val source : String?
        get() {
            val o = __offset(104)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val sourceAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(104, 1)
    fun sourceInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 104, 1)
    /**
     * Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
     * Example: /// Example: THIRD_PARTY_DATASOURCE
     * Constraints: Minimum length = 0, Maximum length = 64
     */
    val origin : String?
        get() {
            val o = __offset(106)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val originAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(106, 1)
    fun originInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 106, 1)
    /**
     * Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
     * EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
     * REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
     * SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
     * TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
     * Example: /// Example: TEST
     * Constraints: Minimum length = 1, Maximum length = 32
     */
    val dataMode : Byte
        get() {
            val o = __offset(108)
            return if(o != 0) bb.get(o + bb_pos) else 0
        }
    companion object {
        fun validateVersion() = Constants.FLATBUFFERS_24_3_25()
        fun getRootAsEquipment_Ingest(_bb: ByteBuffer): Equipment_Ingest = getRootAsEquipment_Ingest(_bb, Equipment_Ingest())
        fun getRootAsEquipment_Ingest(_bb: ByteBuffer, obj: Equipment_Ingest): Equipment_Ingest {
            _bb.order(ByteOrder.LITTLE_ENDIAN)
            return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb))
        }
        fun Equipment_IngestBufferHasIdentifier(_bb: ByteBuffer) : Boolean = __has_identifier(_bb, "EQUI")
        fun createEquipment_Ingest(builder: FlatBufferBuilder, idOffset: Int, classificationMarkingOffset: Int, idParentEquipmentOffset: Int, idSiteOffset: Int, idOperatingUnitOffset: Int, altEqpIdOffset: Int, eqpCodeOffset: Int, eqpIdNumOffset: Int, countryCodeOffset: Int, altCountryCodeOffset: Int, wacOffset: Int, seqNum: Int, nomenOffset: Int, operStatusOffset: Int, conditionOffset: Int, conditionAvailOffset: Int, eval: Int, fpaOffset: Int, functionOffset: Int, identOffset: Int, allegianceOffset: Int, altAllegianceOffset: Int, locReasonOffset: Int, operAreaPrimaryOffset: Int, functPrimaryOffset: Int, coordDatumOffset: Int, coordOffset: Int, coordDerivAcc: Double, lat: Double, lon: Double, elevMsl: Double, elevMslConfLvl: Int, elevMslDerivAcc: Double, geoidalMslSep: Double, milGridSysOffset: Int, milGridOffset: Int, utmOffset: Int, airDefAreaOffset: Int, polSubdivOffset: Int, qtyOh: Int, symCodeOffset: Int, classRatingOffset: Int, recStatusOffset: Int, reviewDateOffset: Int, resProdOffset: Int, referenceDocOffset: Int, srcTypsOffset: Int, srcIdsOffset: Int, createdAtOffset: Int, createdByOffset: Int, sourceOffset: Int, originOffset: Int, dataMode: Byte) : Int {
            builder.startTable(53)
            addGeoidalMslSep(builder, geoidalMslSep)
            addElevMslDerivAcc(builder, elevMslDerivAcc)
            addElevMsl(builder, elevMsl)
            addLon(builder, lon)
            addLat(builder, lat)
            addCoordDerivAcc(builder, coordDerivAcc)
            addOrigin(builder, originOffset)
            addSource(builder, sourceOffset)
            addCreatedBy(builder, createdByOffset)
            addCreatedAt(builder, createdAtOffset)
            addSrcIds(builder, srcIdsOffset)
            addSrcTyps(builder, srcTypsOffset)
            addReferenceDoc(builder, referenceDocOffset)
            addResProd(builder, resProdOffset)
            addReviewDate(builder, reviewDateOffset)
            addRecStatus(builder, recStatusOffset)
            addClassRating(builder, classRatingOffset)
            addSymCode(builder, symCodeOffset)
            addQtyOH(builder, qtyOh)
            addPolSubdiv(builder, polSubdivOffset)
            addAirDefArea(builder, airDefAreaOffset)
            addUtm(builder, utmOffset)
            addMilGrid(builder, milGridOffset)
            addMilGridSys(builder, milGridSysOffset)
            addElevMslConfLvl(builder, elevMslConfLvl)
            addCoord(builder, coordOffset)
            addCoordDatum(builder, coordDatumOffset)
            addFunctPrimary(builder, functPrimaryOffset)
            addOperAreaPrimary(builder, operAreaPrimaryOffset)
            addLocReason(builder, locReasonOffset)
            addAltAllegiance(builder, altAllegianceOffset)
            addAllegiance(builder, allegianceOffset)
            addIdent(builder, identOffset)
            addFunction(builder, functionOffset)
            addFpa(builder, fpaOffset)
            addEval(builder, eval)
            addConditionAvail(builder, conditionAvailOffset)
            addCondition(builder, conditionOffset)
            addOperStatus(builder, operStatusOffset)
            addNomen(builder, nomenOffset)
            addSeqNum(builder, seqNum)
            addWac(builder, wacOffset)
            addAltCountryCode(builder, altCountryCodeOffset)
            addCountryCode(builder, countryCodeOffset)
            addEqpIdNum(builder, eqpIdNumOffset)
            addEqpCode(builder, eqpCodeOffset)
            addAltEqpId(builder, altEqpIdOffset)
            addIdOperatingUnit(builder, idOperatingUnitOffset)
            addIdSite(builder, idSiteOffset)
            addIdParentEquipment(builder, idParentEquipmentOffset)
            addClassificationMarking(builder, classificationMarkingOffset)
            addId(builder, idOffset)
            addDataMode(builder, dataMode)
            return endEquipment_Ingest(builder)
        }
        fun startEquipment_Ingest(builder: FlatBufferBuilder) = builder.startTable(53)
        fun addId(builder: FlatBufferBuilder, id: Int) = builder.addOffset(0, id, 0)
        fun addClassificationMarking(builder: FlatBufferBuilder, classificationMarking: Int) = builder.addOffset(1, classificationMarking, 0)
        fun addIdParentEquipment(builder: FlatBufferBuilder, idParentEquipment: Int) = builder.addOffset(2, idParentEquipment, 0)
        fun addIdSite(builder: FlatBufferBuilder, idSite: Int) = builder.addOffset(3, idSite, 0)
        fun addIdOperatingUnit(builder: FlatBufferBuilder, idOperatingUnit: Int) = builder.addOffset(4, idOperatingUnit, 0)
        fun addAltEqpId(builder: FlatBufferBuilder, altEqpId: Int) = builder.addOffset(5, altEqpId, 0)
        fun addEqpCode(builder: FlatBufferBuilder, eqpCode: Int) = builder.addOffset(6, eqpCode, 0)
        fun addEqpIdNum(builder: FlatBufferBuilder, eqpIdNum: Int) = builder.addOffset(7, eqpIdNum, 0)
        fun addCountryCode(builder: FlatBufferBuilder, countryCode: Int) = builder.addOffset(8, countryCode, 0)
        fun addAltCountryCode(builder: FlatBufferBuilder, altCountryCode: Int) = builder.addOffset(9, altCountryCode, 0)
        fun addWac(builder: FlatBufferBuilder, wac: Int) = builder.addOffset(10, wac, 0)
        fun addSeqNum(builder: FlatBufferBuilder, seqNum: Int) = builder.addInt(11, seqNum, 0)
        fun addNomen(builder: FlatBufferBuilder, nomen: Int) = builder.addOffset(12, nomen, 0)
        fun addOperStatus(builder: FlatBufferBuilder, operStatus: Int) = builder.addOffset(13, operStatus, 0)
        fun addCondition(builder: FlatBufferBuilder, condition: Int) = builder.addOffset(14, condition, 0)
        fun addConditionAvail(builder: FlatBufferBuilder, conditionAvail: Int) = builder.addOffset(15, conditionAvail, 0)
        fun addEval(builder: FlatBufferBuilder, eval: Int) = builder.addInt(16, eval, 0)
        fun addFpa(builder: FlatBufferBuilder, fpa: Int) = builder.addOffset(17, fpa, 0)
        fun addFunction(builder: FlatBufferBuilder, function: Int) = builder.addOffset(18, function, 0)
        fun addIdent(builder: FlatBufferBuilder, ident: Int) = builder.addOffset(19, ident, 0)
        fun addAllegiance(builder: FlatBufferBuilder, allegiance: Int) = builder.addOffset(20, allegiance, 0)
        fun addAltAllegiance(builder: FlatBufferBuilder, altAllegiance: Int) = builder.addOffset(21, altAllegiance, 0)
        fun addLocReason(builder: FlatBufferBuilder, locReason: Int) = builder.addOffset(22, locReason, 0)
        fun addOperAreaPrimary(builder: FlatBufferBuilder, operAreaPrimary: Int) = builder.addOffset(23, operAreaPrimary, 0)
        fun addFunctPrimary(builder: FlatBufferBuilder, functPrimary: Int) = builder.addOffset(24, functPrimary, 0)
        fun addCoordDatum(builder: FlatBufferBuilder, coordDatum: Int) = builder.addOffset(25, coordDatum, 0)
        fun addCoord(builder: FlatBufferBuilder, coord: Int) = builder.addOffset(26, coord, 0)
        fun addCoordDerivAcc(builder: FlatBufferBuilder, coordDerivAcc: Double) = builder.addDouble(27, coordDerivAcc, 0.0)
        fun addLat(builder: FlatBufferBuilder, lat: Double) = builder.addDouble(28, lat, 0.0)
        fun addLon(builder: FlatBufferBuilder, lon: Double) = builder.addDouble(29, lon, 0.0)
        fun addElevMsl(builder: FlatBufferBuilder, elevMsl: Double) = builder.addDouble(30, elevMsl, 0.0)
        fun addElevMslConfLvl(builder: FlatBufferBuilder, elevMslConfLvl: Int) = builder.addInt(31, elevMslConfLvl, 0)
        fun addElevMslDerivAcc(builder: FlatBufferBuilder, elevMslDerivAcc: Double) = builder.addDouble(32, elevMslDerivAcc, 0.0)
        fun addGeoidalMslSep(builder: FlatBufferBuilder, geoidalMslSep: Double) = builder.addDouble(33, geoidalMslSep, 0.0)
        fun addMilGridSys(builder: FlatBufferBuilder, milGridSys: Int) = builder.addOffset(34, milGridSys, 0)
        fun addMilGrid(builder: FlatBufferBuilder, milGrid: Int) = builder.addOffset(35, milGrid, 0)
        fun addUtm(builder: FlatBufferBuilder, utm: Int) = builder.addOffset(36, utm, 0)
        fun addAirDefArea(builder: FlatBufferBuilder, airDefArea: Int) = builder.addOffset(37, airDefArea, 0)
        fun addPolSubdiv(builder: FlatBufferBuilder, polSubdiv: Int) = builder.addOffset(38, polSubdiv, 0)
        fun addQtyOH(builder: FlatBufferBuilder, qtyOh: Int) = builder.addInt(39, qtyOh, 0)
        fun addSymCode(builder: FlatBufferBuilder, symCode: Int) = builder.addOffset(40, symCode, 0)
        fun addClassRating(builder: FlatBufferBuilder, classRating: Int) = builder.addOffset(41, classRating, 0)
        fun addRecStatus(builder: FlatBufferBuilder, recStatus: Int) = builder.addOffset(42, recStatus, 0)
        fun addReviewDate(builder: FlatBufferBuilder, reviewDate: Int) = builder.addOffset(43, reviewDate, 0)
        fun addResProd(builder: FlatBufferBuilder, resProd: Int) = builder.addOffset(44, resProd, 0)
        fun addReferenceDoc(builder: FlatBufferBuilder, referenceDoc: Int) = builder.addOffset(45, referenceDoc, 0)
        fun addSrcTyps(builder: FlatBufferBuilder, srcTyps: Int) = builder.addOffset(46, srcTyps, 0)
        fun createSrcTypsVector(builder: FlatBufferBuilder, data: IntArray) : Int {
            builder.startVector(4, data.size, 4)
            for (i in data.size - 1 downTo 0) {
                builder.addOffset(data[i])
            }
            return builder.endVector()
        }
        fun startSrcTypsVector(builder: FlatBufferBuilder, numElems: Int) = builder.startVector(4, numElems, 4)
        fun addSrcIds(builder: FlatBufferBuilder, srcIds: Int) = builder.addOffset(47, srcIds, 0)
        fun createSrcIdsVector(builder: FlatBufferBuilder, data: IntArray) : Int {
            builder.startVector(4, data.size, 4)
            for (i in data.size - 1 downTo 0) {
                builder.addOffset(data[i])
            }
            return builder.endVector()
        }
        fun startSrcIdsVector(builder: FlatBufferBuilder, numElems: Int) = builder.startVector(4, numElems, 4)
        fun addCreatedAt(builder: FlatBufferBuilder, createdAt: Int) = builder.addOffset(48, createdAt, 0)
        fun addCreatedBy(builder: FlatBufferBuilder, createdBy: Int) = builder.addOffset(49, createdBy, 0)
        fun addSource(builder: FlatBufferBuilder, source: Int) = builder.addOffset(50, source, 0)
        fun addOrigin(builder: FlatBufferBuilder, origin: Int) = builder.addOffset(51, origin, 0)
        fun addDataMode(builder: FlatBufferBuilder, dataMode: Byte) = builder.addByte(52, dataMode, 0)
        fun endEquipment_Ingest(builder: FlatBufferBuilder) : Int {
            val o = builder.endTable()
            return o
        }
        fun finishEquipmentIngestBuffer(builder: FlatBufferBuilder, offset: Int) = builder.finish(offset, "EQUI")
        fun finishSizePrefixedEquipment_IngestBuffer(builder: FlatBufferBuilder, offset: Int) = builder.finishSizePrefixed(offset, "EQUI")
    }
}
