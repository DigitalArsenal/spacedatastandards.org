// automatically generated by the FlatBuffers compiler, do not modify

import com.google.flatbuffers.BaseVector
import com.google.flatbuffers.BooleanVector
import com.google.flatbuffers.ByteVector
import com.google.flatbuffers.Constants
import com.google.flatbuffers.DoubleVector
import com.google.flatbuffers.FlatBufferBuilder
import com.google.flatbuffers.FloatVector
import com.google.flatbuffers.LongVector
import com.google.flatbuffers.StringVector
import com.google.flatbuffers.Struct
import com.google.flatbuffers.Table
import com.google.flatbuffers.UnionVector
import java.nio.ByteBuffer
import java.nio.ByteOrder
import kotlin.math.sign

/**
 * /// Properties and characteristics of a maritime port, which includes location, port identifiers, and remarks.
 */
@Suppress("unused")
class Port_Abridged : Table() {

    fun __init(_i: Int, _bb: ByteBuffer)  {
        __reset(_i, _bb)
    }
    fun __assign(_i: Int, _bb: ByteBuffer) : Port_Abridged {
        __init(_i, _bb)
        return this
    }
    /**
     * Unique identifier of the record, auto-generated by the system if not provided on create operations.
     * Example: /// Example: 026dd511-8ba5-47d3-9909-836149f87686
     * Constraints: Minimum length = 1, Maximum length = 36
     */
    val id : String?
        get() {
            val o = __offset(4)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val idAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(4, 1)
    fun idInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 4, 1)
    /**
     * Classification marking of the data in IC/CAPCO Portion-marked format.
     * Example: /// Example: U
     * Constraints: Minimum length = 1, Maximum length = 128
     */
    val classificationMarking : String?
        get() {
            val o = __offset(6)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val classificationMarkingAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(6, 1)
    fun classificationMarkingInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 6, 1)
    /**
     * Unique identifier of the Site Entity associated with the Port record.
     * Example: /// Example: a150b3ee-884b-b9ac-60a0-6408b4b16088
     * Constraints: Minimum length = 0, Maximum length = 36
     */
    val idSite : String?
        get() {
            val o = __offset(8)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val idSiteAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(8, 1)
    fun idSiteInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 8, 1)
    /**
     * Optional ID from external systems. This field has no meaning within UDL and is provided as a convenience for systems that require tracking of an internal system generated ID.
     * Example: /// Example: fe4ad5dc-0128-4ce8-b09c-0b404322025e
     * Constraints: Minimum length = 0, Maximum length = 36
     */
    val externalId : String?
        get() {
            val o = __offset(10)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val externalIdAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(10, 1)
    fun externalIdInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 10, 1)
    /**
     * The five-character United Nations Code for Trade and Transport Locations (UN/LOCODE) of this port.  The first two letters of the code contains the ISO 3166-1 alpha-2 country designation of the port country. The three remaining characters identify a location within that country.  Letters are preferred, but if necessary digits 2 through 9 may be used, excluding "0" and "1" to avoid confusion with the letters "O" and "I" respectively.
     * Example: /// Example: CAVAN
     * Constraints: Minimum length = 0, Maximum length = 5
     */
    val locode : String?
        get() {
            val o = __offset(12)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val locodeAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(12, 1)
    fun locodeInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 12, 1)
    /**
     * The name of this port.
     * Example: /// Example: Vancouver
     * Constraints: Minimum length = 0, Maximum length = 64
     */
    val portName : String?
        get() {
            val o = __offset(14)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val portNameAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(14, 1)
    fun portNameInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 14, 1)
    /**
     * The type of harbor for this port. The harbor type refers to how a port is physically positioned.
     * COASTAL BREAKWATER (CB)
     * COASTAL NATURAL (CN)
     * COASTAL TIDE GATE  (CT)
     * LAKE OR CANAL (LC)
     * OPEN ROADSTEAD (OR)
     * RIVER BASIN (RB)
     * RIVER NATURAL (RN)
     * RIVER TIDE GATE (RT)
     * TYPHOON HARBOR  (TH).
     * Example: /// Example: COASTAL NATURAL
     * Constraints: Minimum length = 0, Maximum length = 64
     */
    val harborType : String?
        get() {
            val o = __offset(16)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val harborTypeAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(16, 1)
    fun harborTypeInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 16, 1)
    /**
     * The size of the harbor for this port measured in square kilometers.
     * Example: /// Example: 160.1
     * Constraints: No constraints specified.
     */
    val harborSize : Double
        get() {
            val o = __offset(18)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Maximum allowed vessel draught. Draught is the principal dimensions of any waterborne vessel defined as the distance between the shipâ€™s keel and the waterline of the vessel measured in meters.
     * Example: /// Example: 18.1
     * Constraints: No constraints specified.
     */
    val maxDraught : Double
        get() {
            val o = __offset(20)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Average time for a vessel at this port in hours.
     * Example: /// Example: 41.1
     * Constraints: No constraints specified.
     */
    val avgDuration : Double
        get() {
            val o = __offset(22)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * The tide range of this port in meters.
     * Example: /// Example: 4.1
     * Constraints: No constraints specified.
     */
    val tideRange : Double
        get() {
            val o = __offset(24)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * The shelter afforded from wind, sea, and swell refers to the area where normal port operations are conducted, usually the wharf area. Shelter afforded by the anchorage area may be given for ports where cargo is handled by lighters. Values given are EXCELLENT, FAIR, GOOD, POOR, or NONE.
     * Example: /// Example: EXCELLENT
     * Constraints: Minimum length = 0, Maximum length = 36
     */
    val shelter : String?
        get() {
            val o = __offset(26)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val shelterAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(26, 1)
    fun shelterInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 26, 1)
    /**
     * Flag indicating whether a pilot is required at this port.
     * Example: /// Example: True
     * Constraints: No constraints specified.
     */
    val pilotReqd : Boolean
        get() {
            val o = __offset(28)
            return if(o != 0) 0.toByte() != bb.get(o + bb_pos) else false
        }
    /**
     * WGS84 latitude of the location, in degrees. -90 to 90 degrees (negative values south of equator).
     * Example: /// Example: 45.23
     * Constraints: No constraints specified.
     */
    val lat : Double
        get() {
            val o = __offset(30)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * WGS84 longitude of the location, in degrees. -180 to 180 degrees (negative values west of Prime Meridian).
     * Example: /// Example: 179.1
     * Constraints: No constraints specified.
     */
    val lon : Double
        get() {
            val o = __offset(32)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * The country where this port is located.
     * Example: /// Example: US
     * Constraints: Minimum length = 0, Maximum length = 4
     */
    val countryCode : String?
        get() {
            val o = __offset(34)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val countryCodeAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(34, 1)
    fun countryCodeInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 34, 1)
    /**
     * Time the row was created in the database, auto-populated by the system.
     * Example: /// Example: 2018-01-01T16:00:00.123Z
     * Constraints: No constraints specified.
     */
    val createdAt : String?
        get() {
            val o = __offset(36)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val createdAtAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(36, 1)
    fun createdAtInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 36, 1)
    /**
     * Application user who created the row in the database, auto-populated by the system.
     * Example: /// Example: some.user
     * Constraints: Minimum length = 1, Maximum length = 64
     */
    val createdBy : String?
        get() {
            val o = __offset(38)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val createdByAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(38, 1)
    fun createdByInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 38, 1)
    /**
     * Source of the data.
     * Example: /// Example: Bluestaq
     * Constraints: Minimum length = 1, Maximum length = 64
     */
    val source : String?
        get() {
            val o = __offset(40)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val sourceAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(40, 1)
    fun sourceInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 40, 1)
    /**
     * Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
     * Example: /// Example: THIRD_PARTY_DATASOURCE
     * Constraints: Minimum length = 0, Maximum length = 64
     */
    val origin : String?
        get() {
            val o = __offset(42)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val originAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(42, 1)
    fun originInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 42, 1)
    /**
     * Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
     * EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
     * REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
     * SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
     * TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
     * Example: /// Example: TEST
     * Constraints: Minimum length = 1, Maximum length = 64
     */
    val dataMode : Byte
        get() {
            val o = __offset(44)
            return if(o != 0) bb.get(o + bb_pos) else 0
        }
    /**
     * The originating source network on which this record was created, auto-populated by the system.
     * Example: /// Example: OPS1
     * Constraints: Minimum length = 1, Maximum length = 32
     */
    val origNetwork : String?
        get() {
            val o = __offset(46)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val origNetworkAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(46, 1)
    fun origNetworkInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 46, 1)
    companion object {
        fun validateVersion() = Constants.FLATBUFFERS_24_3_25()
        fun getRootAsPort_Abridged(_bb: ByteBuffer): Port_Abridged = getRootAsPort_Abridged(_bb, Port_Abridged())
        fun getRootAsPort_Abridged(_bb: ByteBuffer, obj: Port_Abridged): Port_Abridged {
            _bb.order(ByteOrder.LITTLE_ENDIAN)
            return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb))
        }
        fun Port_AbridgedBufferHasIdentifier(_bb: ByteBuffer) : Boolean = __has_identifier(_bb, "PORT")
        fun createPort_Abridged(builder: FlatBufferBuilder, idOffset: Int, classificationMarkingOffset: Int, idSiteOffset: Int, externalIdOffset: Int, locodeOffset: Int, portNameOffset: Int, harborTypeOffset: Int, harborSize: Double, maxDraught: Double, avgDuration: Double, tideRange: Double, shelterOffset: Int, pilotReqd: Boolean, lat: Double, lon: Double, countryCodeOffset: Int, createdAtOffset: Int, createdByOffset: Int, sourceOffset: Int, originOffset: Int, dataMode: Byte, origNetworkOffset: Int) : Int {
            builder.startTable(22)
            addLon(builder, lon)
            addLat(builder, lat)
            addTideRange(builder, tideRange)
            addAvgDuration(builder, avgDuration)
            addMaxDraught(builder, maxDraught)
            addHarborSize(builder, harborSize)
            addOrigNetwork(builder, origNetworkOffset)
            addOrigin(builder, originOffset)
            addSource(builder, sourceOffset)
            addCreatedBy(builder, createdByOffset)
            addCreatedAt(builder, createdAtOffset)
            addCountryCode(builder, countryCodeOffset)
            addShelter(builder, shelterOffset)
            addHarborType(builder, harborTypeOffset)
            addPortName(builder, portNameOffset)
            addLocode(builder, locodeOffset)
            addExternalId(builder, externalIdOffset)
            addIdSite(builder, idSiteOffset)
            addClassificationMarking(builder, classificationMarkingOffset)
            addId(builder, idOffset)
            addDataMode(builder, dataMode)
            addPilotReqd(builder, pilotReqd)
            return endPort_Abridged(builder)
        }
        fun startPort_Abridged(builder: FlatBufferBuilder) = builder.startTable(22)
        fun addId(builder: FlatBufferBuilder, id: Int) = builder.addOffset(0, id, 0)
        fun addClassificationMarking(builder: FlatBufferBuilder, classificationMarking: Int) = builder.addOffset(1, classificationMarking, 0)
        fun addIdSite(builder: FlatBufferBuilder, idSite: Int) = builder.addOffset(2, idSite, 0)
        fun addExternalId(builder: FlatBufferBuilder, externalId: Int) = builder.addOffset(3, externalId, 0)
        fun addLocode(builder: FlatBufferBuilder, locode: Int) = builder.addOffset(4, locode, 0)
        fun addPortName(builder: FlatBufferBuilder, portName: Int) = builder.addOffset(5, portName, 0)
        fun addHarborType(builder: FlatBufferBuilder, harborType: Int) = builder.addOffset(6, harborType, 0)
        fun addHarborSize(builder: FlatBufferBuilder, harborSize: Double) = builder.addDouble(7, harborSize, 0.0)
        fun addMaxDraught(builder: FlatBufferBuilder, maxDraught: Double) = builder.addDouble(8, maxDraught, 0.0)
        fun addAvgDuration(builder: FlatBufferBuilder, avgDuration: Double) = builder.addDouble(9, avgDuration, 0.0)
        fun addTideRange(builder: FlatBufferBuilder, tideRange: Double) = builder.addDouble(10, tideRange, 0.0)
        fun addShelter(builder: FlatBufferBuilder, shelter: Int) = builder.addOffset(11, shelter, 0)
        fun addPilotReqd(builder: FlatBufferBuilder, pilotReqd: Boolean) = builder.addBoolean(12, pilotReqd, false)
        fun addLat(builder: FlatBufferBuilder, lat: Double) = builder.addDouble(13, lat, 0.0)
        fun addLon(builder: FlatBufferBuilder, lon: Double) = builder.addDouble(14, lon, 0.0)
        fun addCountryCode(builder: FlatBufferBuilder, countryCode: Int) = builder.addOffset(15, countryCode, 0)
        fun addCreatedAt(builder: FlatBufferBuilder, createdAt: Int) = builder.addOffset(16, createdAt, 0)
        fun addCreatedBy(builder: FlatBufferBuilder, createdBy: Int) = builder.addOffset(17, createdBy, 0)
        fun addSource(builder: FlatBufferBuilder, source: Int) = builder.addOffset(18, source, 0)
        fun addOrigin(builder: FlatBufferBuilder, origin: Int) = builder.addOffset(19, origin, 0)
        fun addDataMode(builder: FlatBufferBuilder, dataMode: Byte) = builder.addByte(20, dataMode, 0)
        fun addOrigNetwork(builder: FlatBufferBuilder, origNetwork: Int) = builder.addOffset(21, origNetwork, 0)
        fun endPort_Abridged(builder: FlatBufferBuilder) : Int {
            val o = builder.endTable()
            return o
        }
        fun finishPortAbridgedBuffer(builder: FlatBufferBuilder, offset: Int) = builder.finish(offset, "PORT")
        fun finishSizePrefixedPort_AbridgedBuffer(builder: FlatBufferBuilder, offset: Int) = builder.finishSizePrefixed(offset, "PORT")
    }
}
