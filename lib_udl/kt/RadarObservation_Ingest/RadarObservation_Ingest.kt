// automatically generated by the FlatBuffers compiler, do not modify

import com.google.flatbuffers.BaseVector
import com.google.flatbuffers.BooleanVector
import com.google.flatbuffers.ByteVector
import com.google.flatbuffers.Constants
import com.google.flatbuffers.DoubleVector
import com.google.flatbuffers.FlatBufferBuilder
import com.google.flatbuffers.FloatVector
import com.google.flatbuffers.LongVector
import com.google.flatbuffers.StringVector
import com.google.flatbuffers.Struct
import com.google.flatbuffers.Table
import com.google.flatbuffers.UnionVector
import java.nio.ByteBuffer
import java.nio.ByteOrder
import kotlin.math.sign

/**
 * /// Model representation of observation data for radar based sensor phenomenologies. J2000 is the preferred coordinate frame for all observations, but in some cases observations may be in another frame depending on the provider. Please see the 'Discover' tab in the storefront to confirm coordinate frames by data provider.
 */
@Suppress("unused")
class RadarObservation_Ingest : Table() {

    fun __init(_i: Int, _bb: ByteBuffer)  {
        __reset(_i, _bb)
    }
    fun __assign(_i: Int, _bb: ByteBuffer) : RadarObservation_Ingest {
        __init(_i, _bb)
        return this
    }
    /**
     * Unique identifier of the record, auto-generated by the system.
     * Example: /// Example: RADAROBSERVATION-ID
     * Constraints: Minimum length = 1, Maximum length = 36
     */
    val id : String?
        get() {
            val o = __offset(4)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val idAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(4, 1)
    fun idInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 4, 1)
    /**
     * Classification marking of the data in IC/CAPCO Portion-marked format.
     * Example: /// Example: U
     * Constraints: Minimum length = 1, Maximum length = 128
     */
    val classificationMarking : String?
        get() {
            val o = __offset(6)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val classificationMarkingAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(6, 1)
    fun classificationMarkingInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 6, 1)
    /**
     * Ob detection time in ISO 8601 UTC with microsecond precision.
     * Example: /// Example: 2018-01-01T16:00:00.123456Z
     * Constraints: No constraints specified.
     */
    val obTime : String?
        get() {
            val o = __offset(8)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val obTimeAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(8, 1)
    fun obTimeInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 8, 1)
    /**
     * Unique identifier of the target on-orbit object, if correlated.
     * Example: /// Example: ONORBIT-ID
     * Constraints: Minimum length = 0, Maximum length = 36
     */
    val idOnOrbit : String?
        get() {
            val o = __offset(10)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val idOnOrbitAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(10, 1)
    fun idOnOrbitInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 10, 1)
    /**
     * Unique identifier of the reporting sensor.
     * Example: /// Example: SENSOR-ID
     * Constraints: Minimum length = 0, Maximum length = 36
     */
    val idSensor : String?
        get() {
            val o = __offset(12)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val idSensorAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(12, 1)
    fun idSensorInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 12, 1)
    /**
     * Satellite/Catalog number of the target on-orbit object.
     * Example: /// Example: 1
     * Constraints: No constraints specified.
     */
    val satNo : Int
        get() {
            val o = __offset(14)
            return if(o != 0) bb.getInt(o + bb_pos) else 0
        }
    /**
     * Optional identifier to indicate the specific tasking which produced this observation.
     * Example: /// Example: TASK-ID
     * Constraints: Minimum length = 0, Maximum length = 36
     */
    val taskId : String?
        get() {
            val o = __offset(16)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val taskIdAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(16, 1)
    fun taskIdInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 16, 1)
    /**
     * Optional identifier to track a commercial or marketplace transaction executed to produce this data.
     * Example: /// Example: TRANSACTION-ID
     * Constraints: Minimum length = 0, Maximum length = 64
     */
    val transactionId : String?
        get() {
            val o = __offset(18)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val transactionIdAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(18, 1)
    fun transactionIdInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 18, 1)
    /**
     * Optional identifier of the track to which this observation belongs.
     * Example: /// Example: TRACK-ID
     * Constraints: Minimum length = 0, Maximum length = 36
     */
    val trackId : String?
        get() {
            val o = __offset(20)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val trackIdAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(20, 1)
    fun trackIdInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 20, 1)
    /**
     * The position of this observation within a track (FENCE, FIRST, IN, LAST, SINGLE).  This identifier is optional and, if null, no assumption should be made regarding whether other observations may or may not exist to compose a track.
     * Example: /// Example: FIRST
     * Constraints: Minimum length = 0, Maximum length = 8
     */
    val obPosition : String?
        get() {
            val o = __offset(22)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val obPositionAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(22, 1)
    fun obPositionInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 22, 1)
    /**
     * Optional identifier provided by observation source to indicate the target onorbit object of this observation. This may be an internal identifier and not necessarily a valid satellite number.
     * Example: /// Example: ORIGOBJECT-ID
     * Constraints: Minimum length = 0, Maximum length = 64
     */
    val origObjectId : String?
        get() {
            val o = __offset(24)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val origObjectIdAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(24, 1)
    fun origObjectIdInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 24, 1)
    /**
     * Optional identifier provided by observation source to indicate the sensor identifier which produced this observation. This may be an internal identifier and not necessarily a valid sensor ID.
     * Example: /// Example: ORIGSENSOR-ID
     * Constraints: Minimum length = 0, Maximum length = 64
     */
    val origSensorId : String?
        get() {
            val o = __offset(26)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val origSensorIdAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(26, 1)
    fun origSensorIdInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 26, 1)
    /**
     * Boolean indicating this observation is part of an uncorrelated track or was unable to be correlated to a known object. This flag should only be set to true by data providers after an attempt to correlate to an on-orbit object was made and failed. If unable to correlate, the 'origObjectId' field may be populated with an internal data provider specific identifier.
     * Example: /// Example: True
     * Constraints: No constraints specified.
     */
    val uct : Boolean
        get() {
            val o = __offset(28)
            return if(o != 0) 0.toByte() != bb.get(o + bb_pos) else false
        }
    /**
     * azimuth angle in degrees and topocentric frame.
     * Example: /// Example: 45.23
     * Constraints: No constraints specified.
     */
    val azimuth : Double
        get() {
            val o = __offset(30)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * One sigma uncertainty in the line of sight azimuth angle measurement, in degrees.
     * Example: /// Example: 45.23
     * Constraints: No constraints specified.
     */
    val azimuthUnc : Double
        get() {
            val o = __offset(32)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Sensor azimuth angle bias in degrees.
     * Example: /// Example: 45.23
     * Constraints: No constraints specified.
     */
    val azimuthBias : Double
        get() {
            val o = __offset(34)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Rate of change of the line of sight azimuth in degrees per second.
     * Example: /// Example: 1.23
     * Constraints: No constraints specified.
     */
    val azimuthRate : Double
        get() {
            val o = __offset(36)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Line of sight elevation in degrees and topocentric frame.
     * Example: /// Example: 45.23
     * Constraints: No constraints specified.
     */
    val elevation : Double
        get() {
            val o = __offset(38)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * One sigma uncertainty in the line of sight elevation angle measurement, in degrees.
     * Example: /// Example: 1.23
     * Constraints: No constraints specified.
     */
    val elevationUnc : Double
        get() {
            val o = __offset(40)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Sensor elevation bias in degrees.
     * Example: /// Example: 1.23
     * Constraints: No constraints specified.
     */
    val elevationBias : Double
        get() {
            val o = __offset(42)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Rate of change of the line of sight elevation in degrees per second.
     * Example: /// Example: 1.23
     * Constraints: No constraints specified.
     */
    val elevationRate : Double
        get() {
            val o = __offset(44)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Target range in km.
     * Example: /// Example: 100.23
     * Constraints: No constraints specified.
     */
    val range : Double
        get() {
            val o = __offset(46)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Range accelaration in km/s2.
     * Example: /// Example: 10.23
     * Constraints: No constraints specified.
     */
    val rangeAccel : Double
        get() {
            val o = __offset(48)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * One sigma uncertainty in the range acceleration measurement, in kilometers/(second^2).
     * Example: /// Example: 1.23
     * Constraints: No constraints specified.
     */
    val rangeAccelUnc : Double
        get() {
            val o = __offset(50)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * One sigma uncertainty in the range measurement, in kilometers.
     * Example: /// Example: 1.23
     * Constraints: No constraints specified.
     */
    val rangeUnc : Double
        get() {
            val o = __offset(52)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Sensor range bias in km.
     * Example: /// Example: 1.23
     * Constraints: No constraints specified.
     */
    val rangeBias : Double
        get() {
            val o = __offset(54)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Rate of change of the line of sight range in km/sec.
     * Example: /// Example: 1.23
     * Constraints: No constraints specified.
     */
    val rangeRate : Double
        get() {
            val o = __offset(56)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * One sigma uncertainty in the range rate measurement, in kilometers/second.
     * Example: /// Example: 0.5
     * Constraints: No constraints specified.
     */
    val rangeRateUnc : Double
        get() {
            val o = __offset(58)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Corrected doppler measurement in meters per second.
     * Example: /// Example: 10.23
     * Constraints: No constraints specified.
     */
    val doppler : Double
        get() {
            val o = __offset(60)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * One sigma uncertainty in the corrected doppler measurement, in meters/second.
     * Example: /// Example: 1.23
     * Constraints: No constraints specified.
     */
    val dopplerUnc : Double
        get() {
            val o = __offset(62)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Line of sight right ascension in degrees and J2000 coordinate frame.
     * Example: /// Example: 1.23
     * Constraints: No constraints specified.
     */
    val ra : Double
        get() {
            val o = __offset(64)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Line of sight declination angle in degrees and J2000 coordinate frame.
     * Example: /// Example: 10.23
     * Constraints: No constraints specified.
     */
    val declination : Double
        get() {
            val o = __offset(66)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * X position of target in km in J2000 coordinate frame.
     * Example: /// Example: 50.23
     * Constraints: No constraints specified.
     */
    val x : Double
        get() {
            val o = __offset(68)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Y position of target in km in J2000 coordinate frame.
     * Example: /// Example: 50.23
     * Constraints: No constraints specified.
     */
    val y : Double
        get() {
            val o = __offset(70)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Z position of target in km in J2000 coordinate frame.
     * Example: /// Example: 50.23
     * Constraints: No constraints specified.
     */
    val z : Double
        get() {
            val o = __offset(72)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * X velocity of target in km/sec in J2000 coordinate frame.
     * Example: /// Example: 1.23
     * Constraints: No constraints specified.
     */
    val xvel : Double
        get() {
            val o = __offset(74)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Y velocity of target in km/sec in J2000 coordinate frame.
     * Example: /// Example: 5.23
     * Constraints: No constraints specified.
     */
    val yvel : Double
        get() {
            val o = __offset(76)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Z velocity of target in km/sec in J2000 coordinate frame.
     * Example: /// Example: 5.23
     * Constraints: No constraints specified.
     */
    val zvel : Double
        get() {
            val o = __offset(78)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Sensor x position in km at obTime (if mobile/onorbit) in the specified senReferenceFrame.  If senReferenceFrame is null then J2000 should be assumed.
     * Example: /// Example: 45.23
     * Constraints: No constraints specified.
     */
    val senx : Double
        get() {
            val o = __offset(80)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Sensor y position in km at obTime (if mobile/onorbit) in the specified senReferenceFrame.  If senReferenceFrame is null then J2000 should be assumed.
     * Example: /// Example: 40.23
     * Constraints: No constraints specified.
     */
    val seny : Double
        get() {
            val o = __offset(82)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Sensor z position in km at obTime (if mobile/onorbit) in the specified senReferenceFrame.  If senReferenceFrame is null then J2000 should be assumed.
     * Example: /// Example: 35.23
     * Constraints: No constraints specified.
     */
    val senz : Double
        get() {
            val o = __offset(84)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Radar cross section in meters squared for polarization principal.
     * Example: /// Example: 100.23
     * Constraints: No constraints specified.
     */
    val rcs : Double
        get() {
            val o = __offset(86)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * one sigma uncertainty in principal polarization Radar Cross Section, in meters^2.
     * Example: /// Example: 1.23
     * Constraints: No constraints specified.
     */
    val rcsUnc : Double
        get() {
            val o = __offset(88)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Radar cross section in meters squared for orthogonal polarization.
     * Example: /// Example: 1.23
     * Constraints: No constraints specified.
     */
    val orthogonalRcs : Double
        get() {
            val o = __offset(90)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * one sigma uncertainty in orthogonal polarization Radar Cross Section, in meters^2.
     * Example: /// Example: 10.23
     * Constraints: No constraints specified.
     */
    val orthogonalRcsUnc : Double
        get() {
            val o = __offset(92)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Signal to noise ratio, in dB.
     * Example: /// Example: 0.5
     * Constraints: No constraints specified.
     */
    val snr : Double
        get() {
            val o = __offset(94)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * ID of the beam that produced this observation.
     * Example: /// Example: 1.23
     * Constraints: No constraints specified.
     */
    val beam : Double
        get() {
            val o = __offset(96)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Sensor timing bias in seconds.
     * Example: /// Example: 1.23
     * Constraints: No constraints specified.
     */
    val timingBias : Double
        get() {
            val o = __offset(98)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Optional URI location in the document repository of the raw file parsed by the system to produce this record. To download the raw file, prepend https://udl-hostname/scs/download?id= to this value.
     * Example: /// Example: rawFileURI
     * Constraints: Minimum length = 0, Maximum length = 256
     */
    val rawFileUri : String?
        get() {
            val o = __offset(100)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val rawFileUriAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(100, 1)
    fun rawFileUriInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 100, 1)
    /**
     * Source of the data.
     * Example: /// Example: Bluestaq
     * Constraints: Minimum length = 1, Maximum length = 64
     */
    val source : String?
        get() {
            val o = __offset(102)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val sourceAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(102, 1)
    fun sourceInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 102, 1)
    /**
     * Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
     * Example: /// Example: THIRD_PARTY_DATASOURCE
     * Constraints: Minimum length = 0, Maximum length = 64
     */
    val origin : String?
        get() {
            val o = __offset(104)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val originAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(104, 1)
    fun originInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 104, 1)
    /**
     * Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
     * EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
     * REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
     * SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
     * TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
     * Example: /// Example: TEST
     * Constraints: Minimum length = 1, Maximum length = 32
     */
    val dataMode : Byte
        get() {
            val o = __offset(106)
            return if(o != 0) bb.get(o + bb_pos) else 0
        }
    /**
     * Optional array of provider/source specific tags for this data, where each element is no longer than 32 characters, used for implementing data owner conditional access controls to restrict access to the data. Should be left null by data providers unless conditional access controls are coordinated with the UDL team.
     * Example: /// Example: ['TAG1', 'TAG2']
     * Constraints: No constraints specified.
     */
    fun tags(j: Int) : String? {
        val o = __offset(108)
        return if (o != 0) {
            __string(__vector(o) + j * 4)
        } else {
            null
        }
    }
    val tagsLength : Int
        get() {
            val o = __offset(108); return if (o != 0) __vector_len(o) else 0
        }
    /**
     * Time the row was created in the database, auto-populated by the system.
     * Example: /// Example: 2018-01-01T16:00:00.123Z
     * Constraints: No constraints specified.
     */
    val createdAt : String?
        get() {
            val o = __offset(110)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val createdAtAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(110, 1)
    fun createdAtInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 110, 1)
    /**
     * Application user who created the row in the database, auto-populated by the system.
     * Example: /// Example: some.user
     * Constraints: Minimum length = 1, Maximum length = 64
     */
    val createdBy : String?
        get() {
            val o = __offset(112)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val createdByAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(112, 1)
    fun createdByInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 112, 1)
    /**
     * The reference frame of the observing sensor state. If the senReferenceFrame is null it is assumed to be J2000.
     * Example: /// Example: J2000
     * Constraints: Minimum length = 0, Maximum length = 24
     */
    val senReferenceFrame : Byte
        get() {
            val o = __offset(114)
            return if(o != 0) bb.get(o + bb_pos) else 0
        }
    /**
     * Optional source-provided and searchable metadata or descriptor of the data.
     * Example: /// Example: descriptor
     * Constraints: Minimum length = 0, Maximum length = 64
     */
    val descriptor : String?
        get() {
            val o = __offset(116)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val descriptorAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(116, 1)
    fun descriptorInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 116, 1)
    /**
     * The originating source network on which this record was created, auto-populated by the system.
     * Example: /// Example: ORIG
     * Constraints: Minimum length = 1, Maximum length = 32
     */
    val origNetwork : String?
        get() {
            val o = __offset(118)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val origNetworkAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(118, 1)
    fun origNetworkInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 118, 1)
    /**
     * The source data library from which this record was received. This could be a remote or tactical UDL or another data library. If null, the record should be assumed to have originated from the primary Enterprise UDL.
     * Example: /// Example: AXE
     * Constraints: Minimum length = 0, Maximum length = 64
     */
    val sourceDl : String?
        get() {
            val o = __offset(120)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val sourceDlAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(120, 1)
    fun sourceDlInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 120, 1)
    /**
     * Read only enumeration specifying the type of observation (e.g. OPTICAL, RADAR, RF, etc).
     * Example: /// Example: RADAR
     * Constraints: No constraints specified.
     */
    val type : String?
        get() {
            val o = __offset(122)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val typeAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(122, 1)
    fun typeInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 122, 1)
    companion object {
        fun validateVersion() = Constants.FLATBUFFERS_24_3_25()
        fun getRootAsRadarObservation_Ingest(_bb: ByteBuffer): RadarObservation_Ingest = getRootAsRadarObservation_Ingest(_bb, RadarObservation_Ingest())
        fun getRootAsRadarObservation_Ingest(_bb: ByteBuffer, obj: RadarObservation_Ingest): RadarObservation_Ingest {
            _bb.order(ByteOrder.LITTLE_ENDIAN)
            return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb))
        }
        fun RadarObservation_IngestBufferHasIdentifier(_bb: ByteBuffer) : Boolean = __has_identifier(_bb, "RADA")
        fun createRadarObservation_Ingest(builder: FlatBufferBuilder, idOffset: Int, classificationMarkingOffset: Int, obTimeOffset: Int, idOnOrbitOffset: Int, idSensorOffset: Int, satNo: Int, taskIdOffset: Int, transactionIdOffset: Int, trackIdOffset: Int, obPositionOffset: Int, origObjectIdOffset: Int, origSensorIdOffset: Int, uct: Boolean, azimuth: Double, azimuthUnc: Double, azimuthBias: Double, azimuthRate: Double, elevation: Double, elevationUnc: Double, elevationBias: Double, elevationRate: Double, range: Double, rangeAccel: Double, rangeAccelUnc: Double, rangeUnc: Double, rangeBias: Double, rangeRate: Double, rangeRateUnc: Double, doppler: Double, dopplerUnc: Double, ra: Double, declination: Double, x: Double, y: Double, z: Double, xvel: Double, yvel: Double, zvel: Double, senx: Double, seny: Double, senz: Double, rcs: Double, rcsUnc: Double, orthogonalRcs: Double, orthogonalRcsUnc: Double, snr: Double, beam: Double, timingBias: Double, rawFileUriOffset: Int, sourceOffset: Int, originOffset: Int, dataMode: Byte, tagsOffset: Int, createdAtOffset: Int, createdByOffset: Int, senReferenceFrame: Byte, descriptorOffset: Int, origNetworkOffset: Int, sourceDlOffset: Int, typeOffset: Int) : Int {
            builder.startTable(60)
            addTimingBias(builder, timingBias)
            addBeam(builder, beam)
            addSnr(builder, snr)
            addOrthogonalRcsUnc(builder, orthogonalRcsUnc)
            addOrthogonalRcs(builder, orthogonalRcs)
            addRcsUnc(builder, rcsUnc)
            addRcs(builder, rcs)
            addSenz(builder, senz)
            addSeny(builder, seny)
            addSenx(builder, senx)
            addZvel(builder, zvel)
            addYvel(builder, yvel)
            addXvel(builder, xvel)
            addZ(builder, z)
            addY(builder, y)
            addX(builder, x)
            addDeclination(builder, declination)
            addRa(builder, ra)
            addDopplerUnc(builder, dopplerUnc)
            addDoppler(builder, doppler)
            addRangeRateUnc(builder, rangeRateUnc)
            addRangeRate(builder, rangeRate)
            addRangeBias(builder, rangeBias)
            addRangeUnc(builder, rangeUnc)
            addRangeAccelUnc(builder, rangeAccelUnc)
            addRangeAccel(builder, rangeAccel)
            addRange(builder, range)
            addElevationRate(builder, elevationRate)
            addElevationBias(builder, elevationBias)
            addElevationUnc(builder, elevationUnc)
            addElevation(builder, elevation)
            addAzimuthRate(builder, azimuthRate)
            addAzimuthBias(builder, azimuthBias)
            addAzimuthUnc(builder, azimuthUnc)
            addAzimuth(builder, azimuth)
            addType(builder, typeOffset)
            addSourceDL(builder, sourceDlOffset)
            addOrigNetwork(builder, origNetworkOffset)
            addDescriptor(builder, descriptorOffset)
            addCreatedBy(builder, createdByOffset)
            addCreatedAt(builder, createdAtOffset)
            addTags(builder, tagsOffset)
            addOrigin(builder, originOffset)
            addSource(builder, sourceOffset)
            addRawFileURI(builder, rawFileUriOffset)
            addOrigSensorId(builder, origSensorIdOffset)
            addOrigObjectId(builder, origObjectIdOffset)
            addObPosition(builder, obPositionOffset)
            addTrackId(builder, trackIdOffset)
            addTransactionId(builder, transactionIdOffset)
            addTaskId(builder, taskIdOffset)
            addSatNo(builder, satNo)
            addIdSensor(builder, idSensorOffset)
            addIdOnOrbit(builder, idOnOrbitOffset)
            addObTime(builder, obTimeOffset)
            addClassificationMarking(builder, classificationMarkingOffset)
            addId(builder, idOffset)
            addSenReferenceFrame(builder, senReferenceFrame)
            addDataMode(builder, dataMode)
            addUct(builder, uct)
            return endRadarObservation_Ingest(builder)
        }
        fun startRadarObservation_Ingest(builder: FlatBufferBuilder) = builder.startTable(60)
        fun addId(builder: FlatBufferBuilder, id: Int) = builder.addOffset(0, id, 0)
        fun addClassificationMarking(builder: FlatBufferBuilder, classificationMarking: Int) = builder.addOffset(1, classificationMarking, 0)
        fun addObTime(builder: FlatBufferBuilder, obTime: Int) = builder.addOffset(2, obTime, 0)
        fun addIdOnOrbit(builder: FlatBufferBuilder, idOnOrbit: Int) = builder.addOffset(3, idOnOrbit, 0)
        fun addIdSensor(builder: FlatBufferBuilder, idSensor: Int) = builder.addOffset(4, idSensor, 0)
        fun addSatNo(builder: FlatBufferBuilder, satNo: Int) = builder.addInt(5, satNo, 0)
        fun addTaskId(builder: FlatBufferBuilder, taskId: Int) = builder.addOffset(6, taskId, 0)
        fun addTransactionId(builder: FlatBufferBuilder, transactionId: Int) = builder.addOffset(7, transactionId, 0)
        fun addTrackId(builder: FlatBufferBuilder, trackId: Int) = builder.addOffset(8, trackId, 0)
        fun addObPosition(builder: FlatBufferBuilder, obPosition: Int) = builder.addOffset(9, obPosition, 0)
        fun addOrigObjectId(builder: FlatBufferBuilder, origObjectId: Int) = builder.addOffset(10, origObjectId, 0)
        fun addOrigSensorId(builder: FlatBufferBuilder, origSensorId: Int) = builder.addOffset(11, origSensorId, 0)
        fun addUct(builder: FlatBufferBuilder, uct: Boolean) = builder.addBoolean(12, uct, false)
        fun addAzimuth(builder: FlatBufferBuilder, azimuth: Double) = builder.addDouble(13, azimuth, 0.0)
        fun addAzimuthUnc(builder: FlatBufferBuilder, azimuthUnc: Double) = builder.addDouble(14, azimuthUnc, 0.0)
        fun addAzimuthBias(builder: FlatBufferBuilder, azimuthBias: Double) = builder.addDouble(15, azimuthBias, 0.0)
        fun addAzimuthRate(builder: FlatBufferBuilder, azimuthRate: Double) = builder.addDouble(16, azimuthRate, 0.0)
        fun addElevation(builder: FlatBufferBuilder, elevation: Double) = builder.addDouble(17, elevation, 0.0)
        fun addElevationUnc(builder: FlatBufferBuilder, elevationUnc: Double) = builder.addDouble(18, elevationUnc, 0.0)
        fun addElevationBias(builder: FlatBufferBuilder, elevationBias: Double) = builder.addDouble(19, elevationBias, 0.0)
        fun addElevationRate(builder: FlatBufferBuilder, elevationRate: Double) = builder.addDouble(20, elevationRate, 0.0)
        fun addRange(builder: FlatBufferBuilder, range: Double) = builder.addDouble(21, range, 0.0)
        fun addRangeAccel(builder: FlatBufferBuilder, rangeAccel: Double) = builder.addDouble(22, rangeAccel, 0.0)
        fun addRangeAccelUnc(builder: FlatBufferBuilder, rangeAccelUnc: Double) = builder.addDouble(23, rangeAccelUnc, 0.0)
        fun addRangeUnc(builder: FlatBufferBuilder, rangeUnc: Double) = builder.addDouble(24, rangeUnc, 0.0)
        fun addRangeBias(builder: FlatBufferBuilder, rangeBias: Double) = builder.addDouble(25, rangeBias, 0.0)
        fun addRangeRate(builder: FlatBufferBuilder, rangeRate: Double) = builder.addDouble(26, rangeRate, 0.0)
        fun addRangeRateUnc(builder: FlatBufferBuilder, rangeRateUnc: Double) = builder.addDouble(27, rangeRateUnc, 0.0)
        fun addDoppler(builder: FlatBufferBuilder, doppler: Double) = builder.addDouble(28, doppler, 0.0)
        fun addDopplerUnc(builder: FlatBufferBuilder, dopplerUnc: Double) = builder.addDouble(29, dopplerUnc, 0.0)
        fun addRa(builder: FlatBufferBuilder, ra: Double) = builder.addDouble(30, ra, 0.0)
        fun addDeclination(builder: FlatBufferBuilder, declination: Double) = builder.addDouble(31, declination, 0.0)
        fun addX(builder: FlatBufferBuilder, x: Double) = builder.addDouble(32, x, 0.0)
        fun addY(builder: FlatBufferBuilder, y: Double) = builder.addDouble(33, y, 0.0)
        fun addZ(builder: FlatBufferBuilder, z: Double) = builder.addDouble(34, z, 0.0)
        fun addXvel(builder: FlatBufferBuilder, xvel: Double) = builder.addDouble(35, xvel, 0.0)
        fun addYvel(builder: FlatBufferBuilder, yvel: Double) = builder.addDouble(36, yvel, 0.0)
        fun addZvel(builder: FlatBufferBuilder, zvel: Double) = builder.addDouble(37, zvel, 0.0)
        fun addSenx(builder: FlatBufferBuilder, senx: Double) = builder.addDouble(38, senx, 0.0)
        fun addSeny(builder: FlatBufferBuilder, seny: Double) = builder.addDouble(39, seny, 0.0)
        fun addSenz(builder: FlatBufferBuilder, senz: Double) = builder.addDouble(40, senz, 0.0)
        fun addRcs(builder: FlatBufferBuilder, rcs: Double) = builder.addDouble(41, rcs, 0.0)
        fun addRcsUnc(builder: FlatBufferBuilder, rcsUnc: Double) = builder.addDouble(42, rcsUnc, 0.0)
        fun addOrthogonalRcs(builder: FlatBufferBuilder, orthogonalRcs: Double) = builder.addDouble(43, orthogonalRcs, 0.0)
        fun addOrthogonalRcsUnc(builder: FlatBufferBuilder, orthogonalRcsUnc: Double) = builder.addDouble(44, orthogonalRcsUnc, 0.0)
        fun addSnr(builder: FlatBufferBuilder, snr: Double) = builder.addDouble(45, snr, 0.0)
        fun addBeam(builder: FlatBufferBuilder, beam: Double) = builder.addDouble(46, beam, 0.0)
        fun addTimingBias(builder: FlatBufferBuilder, timingBias: Double) = builder.addDouble(47, timingBias, 0.0)
        fun addRawFileURI(builder: FlatBufferBuilder, rawFileUri: Int) = builder.addOffset(48, rawFileUri, 0)
        fun addSource(builder: FlatBufferBuilder, source: Int) = builder.addOffset(49, source, 0)
        fun addOrigin(builder: FlatBufferBuilder, origin: Int) = builder.addOffset(50, origin, 0)
        fun addDataMode(builder: FlatBufferBuilder, dataMode: Byte) = builder.addByte(51, dataMode, 0)
        fun addTags(builder: FlatBufferBuilder, tags: Int) = builder.addOffset(52, tags, 0)
        fun createTagsVector(builder: FlatBufferBuilder, data: IntArray) : Int {
            builder.startVector(4, data.size, 4)
            for (i in data.size - 1 downTo 0) {
                builder.addOffset(data[i])
            }
            return builder.endVector()
        }
        fun startTagsVector(builder: FlatBufferBuilder, numElems: Int) = builder.startVector(4, numElems, 4)
        fun addCreatedAt(builder: FlatBufferBuilder, createdAt: Int) = builder.addOffset(53, createdAt, 0)
        fun addCreatedBy(builder: FlatBufferBuilder, createdBy: Int) = builder.addOffset(54, createdBy, 0)
        fun addSenReferenceFrame(builder: FlatBufferBuilder, senReferenceFrame: Byte) = builder.addByte(55, senReferenceFrame, 0)
        fun addDescriptor(builder: FlatBufferBuilder, descriptor: Int) = builder.addOffset(56, descriptor, 0)
        fun addOrigNetwork(builder: FlatBufferBuilder, origNetwork: Int) = builder.addOffset(57, origNetwork, 0)
        fun addSourceDL(builder: FlatBufferBuilder, sourceDl: Int) = builder.addOffset(58, sourceDl, 0)
        fun addType(builder: FlatBufferBuilder, type: Int) = builder.addOffset(59, type, 0)
        fun endRadarObservation_Ingest(builder: FlatBufferBuilder) : Int {
            val o = builder.endTable()
            return o
        }
        fun finishRadarObservationIngestBuffer(builder: FlatBufferBuilder, offset: Int) = builder.finish(offset, "RADA")
        fun finishSizePrefixedRadarObservation_IngestBuffer(builder: FlatBufferBuilder, offset: Int) = builder.finishSizePrefixed(offset, "RADA")
    }
}
