// automatically generated by the FlatBuffers compiler, do not modify

import com.google.flatbuffers.BaseVector
import com.google.flatbuffers.BooleanVector
import com.google.flatbuffers.ByteVector
import com.google.flatbuffers.Constants
import com.google.flatbuffers.DoubleVector
import com.google.flatbuffers.FlatBufferBuilder
import com.google.flatbuffers.FloatVector
import com.google.flatbuffers.LongVector
import com.google.flatbuffers.StringVector
import com.google.flatbuffers.Struct
import com.google.flatbuffers.Table
import com.google.flatbuffers.UnionVector
import java.nio.ByteBuffer
import java.nio.ByteOrder
import kotlin.math.sign

/**
 * /// Identity and medical information on the patient to be evacuated.
 */
@Suppress("unused")
class EvacCasualtyInfo_Abridged : Table() {

    fun __init(_i: Int, _bb: ByteBuffer)  {
        __reset(_i, _bb)
    }
    fun __assign(_i: Int, _bb: ByteBuffer) : EvacCasualtyInfo_Abridged {
        __init(_i, _bb)
        return this
    }
    /**
     * The priority of the medevac mission for this patient (URGENT, PRIORITY, ROUTINE, URGENT SURGERY, CONVENIENCE).
     * Example: /// Example: ROUTINE
     * Constraints: Minimum length = 0, Maximum length = 32
     */
    val priority : String?
        get() {
            val o = __offset(4)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val priorityAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(4, 1)
    fun priorityInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 4, 1)
    /**
     * The required evacuation method for this patient (AIR, GROUND, NOT EVACUATED).
     * Example: /// Example: GROUND
     * Constraints: Minimum length = 0, Maximum length = 64
     */
    val evacType : String?
        get() {
            val o = __offset(6)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val evacTypeAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(6, 1)
    fun evacTypeInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 6, 1)
    /**
     * The type of medical issue resulting in the need to evacuate the patient (NON BATTLE, CUT, BURN, SICK, FRACTURE, AMPUTATION, PERFORATION, NUCLEAR, EXHAUSTION, BIOLOGICAL, CHEMICAL, SHOCK, PUNCTURE WOUND, OTHER CUT, WOUNDED IN ACTION, DENIAL, COMBAT STRESS).
     * Example: /// Example: DENTAL
     * Constraints: Minimum length = 0, Maximum length = 32
     */
    val casualtyType : String?
        get() {
            val o = __offset(8)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val casualtyTypeAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(8, 1)
    fun casualtyTypeInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 8, 1)
    /**
     * The body part involved for the patient (HEAD, NECK, ABDOMEN, UPPER EXTREMITIES, BACK, FACE, LOWER EXTREMITIES, FRONT, OBSTETRICAL GYNECOLOGICAL, OTHER BODY PART).
     * Example: /// Example: FACE
     * Constraints: Minimum length = 0, Maximum length = 32
     */
    val bodyPart : String?
        get() {
            val o = __offset(10)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val bodyPartAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(10, 1)
    fun bodyPartInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 10, 1)
    /**
     * The contamination specified for the patient (NONE, RADIATION, BIOLOGICAL, CHEMICAL).
     * Example: /// Example: NONE
     * Constraints: Minimum length = 0, Maximum length = 32
     */
    val contamType : String?
        get() {
            val o = __offset(12)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val contamTypeAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(12, 1)
    fun contamTypeInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 12, 1)
    /**
     * Array specifying if any special equipment is need for each of the evacuation of this patient  (EXTRACTION EQUIPMENT, SEMI RIGID LITTER, BACKBOARD, CERVICAL COLLAR ,JUNGLE PENETRATOR, OXYGEN, WHOLE BLOOD, VENTILATOR, HOIST, NONE).
     * Example: /// Example: ['OXYGEN', 'HOIST']
     * Constraints: No constraints specified.
     */
    fun specMedEquip(j: Int) : String? {
        val o = __offset(14)
        return if (o != 0) {
            __string(__vector(o) + j * 4)
        } else {
            null
        }
    }
    val specMedEquipLength : Int
        get() {
            val o = __offset(14); return if (o != 0) __vector_len(o) else 0
        }
    /**
     * Optional casualty key.
     * Example: /// Example: casualty-007
     * Constraints: Minimum length = 0, Maximum length = 36
     */
    val casualtyKey : String?
        get() {
            val o = __offset(16)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val casualtyKeyAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(16, 1)
    fun casualtyKeyInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 16, 1)
    /**
     * The patient service status (US MILITARY, US CIVILIAN, NON US MILITARY, NON US CIVILIAN, ENEMY POW).
     * Example: /// Example: US CIVILIAN
     * Constraints: Minimum length = 0, Maximum length = 32
     */
    val patientStatus : String?
        get() {
            val o = __offset(18)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val patientStatusAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(18, 1)
    fun patientStatusInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 18, 1)
    /**
     * The patient service identity (UNKNOWN MILITARY, UNKNOWN CIVILIAN, FRIEND MILITARY, FRIEND CIVILIAN, NEUTRAL MILITARY, NEUTRAL CIVILIAN, HOSTILE MILITARY, HOSTILE CIVILIAN).
     * Example: /// Example: FRIEND CIVILIAN
     * Constraints: Minimum length = 0, Maximum length = 32
     */
    val patientIdentity : String?
        get() {
            val o = __offset(20)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val patientIdentityAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(20, 1)
    fun patientIdentityInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 20, 1)
    /**
     * The country code indicating the citizenship of the patient.
     * Example: /// Example: US
     * Constraints: Minimum length = 0, Maximum length = 4
     */
    val nationality : String?
        get() {
            val o = __offset(22)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val nationalityAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(22, 1)
    fun nationalityInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 22, 1)
    /**
     * The patient pay grade or rank designation (O-10, O-9, O-8, O-7, O-6, O-5, O-4, O-3, O-2, O-1, CWO-5, CWO-4, CWO-2, CWO-1, E -9, E-8, E-7, E-6, E-5, E-4, E-3, E-2, E-1, NONE, CIVILIAN).
     * Example: /// Example: CIVILIAN
     * Constraints: Minimum length = 0, Maximum length = 16
     */
    val payGrade : String?
        get() {
            val o = __offset(24)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val payGradeAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(24, 1)
    fun payGradeInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 24, 1)
    /**
     * The patient common or legal name.
     * Example: /// Example: John Smith
     * Constraints: Minimum length = 0, Maximum length = 64
     */
    val name : String?
        get() {
            val o = __offset(26)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val nameAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(26, 1)
    fun nameInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 26, 1)
    /**
     * The patient age, in years.
     * Example: /// Example: 35
     * Constraints: No constraints specified.
     */
    val age : Int
        get() {
            val o = __offset(28)
            return if(o != 0) bb.getInt(o + bb_pos) else 0
        }
    /**
     * The patient sex (MALE, FEMALE).
     * Example: /// Example: MALE
     * Constraints: Minimum length = 0, Maximum length = 8
     */
    val gender : String?
        get() {
            val o = __offset(30)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val genderAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(30, 1)
    fun genderInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 30, 1)
    /**
     * Last 4 characters of the patient social security code, or equivalent.
     * Example: /// Example: 1234
     * Constraints: Minimum length = 0, Maximum length = 4
     */
    val last4Ssn : String?
        get() {
            val o = __offset(32)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val last4SsnAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(32, 1)
    fun last4SsnInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 32, 1)
    /**
     * The patient blood type (A POS, B POS, AB POS, O POS, A NEG, B NEG, AB NEG, O NEG).
     * Example: /// Example: O NEG
     * Constraints: Minimum length = 0, Maximum length = 6
     */
    val bloodType : String?
        get() {
            val o = __offset(34)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val bloodTypeAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(34, 1)
    fun bloodTypeInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 34, 1)
    /**
     * The patient branch of service (AIR FORCE, ARMY, NAVY, MARINES, CIV, CONTR, UNKNOWN SERVICE).
     * Example: /// Example: CIV
     * Constraints: Minimum length = 0, Maximum length = 32
     */
    val service : String?
        get() {
            val o = __offset(36)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val serviceAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(36, 1)
    fun serviceInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 36, 1)
    /**
     * The call sign of this patient.
     * Example: /// Example: SHARK
     * Constraints: Minimum length = 0, Maximum length = 128
     */
    val callSign : String?
        get() {
            val o = __offset(38)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val callSignAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(38, 1)
    fun callSignInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 38, 1)
    /**
     * The career field of this patient.
     * Example: /// Example: Healthcare
     * Constraints: Minimum length = 0, Maximum length = 128
     */
    val occSpeciality : String?
        get() {
            val o = __offset(40)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val occSpecialityAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(40, 1)
    fun occSpecialityInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 40, 1)
    /**
     * Array of the WGS-84 latitude (-90 to 90, negative values south of the equator) in degrees, longitude (-180 to 180, negative values west of Prime Meridian) in degrees, and altitude, in meters, of the burial location.  This array must contain a minimum of 2 elements (latitude and longitude), and may contain an optional 3rd element (altitude).
     * Example: /// Example: [-33.123, 150.33, 0.24]
     * Constraints: No constraints specified.
     */
    fun burialLocation(j: Int) : String? {
        val o = __offset(42)
        return if (o != 0) {
            __string(__vector(o) + j * 4)
        } else {
            null
        }
    }
    val burialLocationLength : Int
        get() {
            val o = __offset(42); return if (o != 0) __vector_len(o) else 0
        }
    /**
     * Array of the WGS-84 latitude (-90 to 90, negative values south of the equator) in degrees, longitude (-180 to 180, negative values west of Prime Meridian) in degrees, and altitude, in meters, of the collection point.  This array must contain a minimum of 2 elements (latitude and longitude), and may contain an optional 3rd element (altitude).
     * Example: /// Example: [12.44, 122.55, 0.98]
     * Constraints: No constraints specified.
     */
    fun collectionPoint(j: Int) : String? {
        val o = __offset(44)
        return if (o != 0) {
            __string(__vector(o) + j * 4)
        } else {
            null
        }
    }
    val collectionPointLength : Int
        get() {
            val o = __offset(44); return if (o != 0) __vector_len(o) else 0
        }
    /**
     * Unique identifier for the patient care provider.
     * Example: /// Example: CARE_PROVIDER-1
     * Constraints: Minimum length = 0, Maximum length = 64
     */
    val careProviderUrn : String?
        get() {
            val o = __offset(46)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val careProviderUrnAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(46, 1)
    fun careProviderUrnInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 46, 1)
    /**
     * The expected disposition of this patient (R T D, EVACUATE, EVACUATE TO FORWARD SURGICAL TEAM, EVACUATE TO COMBAT SUPPORT HOSPITAL, EVACUATE TO AERO MEDICAL STAGING FACILITY, EVACUATE TO SUSTAINING BASE MEDICAL TREATMENT FACILITY).
     * Example: /// Example: EVACUATE
     * Constraints: Minimum length = 0, Maximum length = 64
     */
    val dispositionType : String?
        get() {
            val o = __offset(48)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val dispositionTypeAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(48, 1)
    fun dispositionTypeInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 48, 1)
    /**
     * The patient's general medical state (SICK IN QUARTERS, RETURN TO DUTY, EVACUATE WOUNDED, EVACUATE DECEASED, INTERRED).
     * Example: /// Example: EVACUATE WOUNDED
     * Constraints: Minimum length = 0, Maximum length = 32
     */
    val disposition : String?
        get() {
            val o = __offset(50)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val dispositionAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(50, 1)
    fun dispositionInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 50, 1)
    /**
     * The method used to generate this medevac report (DEVICE, GROUND COMBAT PERSONNEL, EVACUATION PERSONNEL, ECHELON1 PERSONNEL, ECHELON2 PERSONNEL).
     * Example: /// Example: DEVICE
     * Constraints: Minimum length = 0, Maximum length = 64
     */
    val reportGen : String?
        get() {
            val o = __offset(52)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val reportGenAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(52, 1)
    fun reportGenInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 52, 1)
    /**
     * Datetime of the compiling of the patients casualty report, in ISO 8601 UTC format.
     * Example: /// Example: 2021-10-15T16:00:00.123Z
     * Constraints: No constraints specified.
     */
    val reportTime : String?
        get() {
            val o = __offset(54)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val reportTimeAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(54, 1)
    fun reportTimeInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 54, 1)
    /**
     * Additional comments on the  patient's casualty information.
     * Example: /// Example: Comments relating to this casualty info.
     * Constraints: Minimum length = 0, Maximum length = 1024
     */
    val comments : String?
        get() {
            val o = __offset(56)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val commentsAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(56, 1)
    fun commentsInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 56, 1)
    /**
     * Medical condition causation information.
     * Example: /// Example: No example provided.
     * Constraints: No constraints specified.
     */
    fun etiology(j: Int) : String? {
        val o = __offset(58)
        return if (o != 0) {
            __string(__vector(o) + j * 4)
        } else {
            null
        }
    }
    val etiologyLength : Int
        get() {
            val o = __offset(58); return if (o != 0) __vector_len(o) else 0
        }
    /**
     * Treatment information.
     * Example: /// Example: No example provided.
     * Constraints: No constraints specified.
     */
    fun treatment(j: Int) : String? {
        val o = __offset(60)
        return if (o != 0) {
            __string(__vector(o) + j * 4)
        } else {
            null
        }
    }
    val treatmentLength : Int
        get() {
            val o = __offset(60); return if (o != 0) __vector_len(o) else 0
        }
    /**
     * Information obtained for vital signs.
     * Example: /// Example: No example provided.
     * Constraints: No constraints specified.
     */
    fun vitalSignData(j: Int) : String? {
        val o = __offset(62)
        return if (o != 0) {
            __string(__vector(o) + j * 4)
        } else {
            null
        }
    }
    val vitalSignDataLength : Int
        get() {
            val o = __offset(62); return if (o != 0) __vector_len(o) else 0
        }
    /**
     * Health state information.
     * Example: /// Example: No example provided.
     * Constraints: No constraints specified.
     */
    fun healthState(j: Int) : String? {
        val o = __offset(64)
        return if (o != 0) {
            __string(__vector(o) + j * 4)
        } else {
            null
        }
    }
    val healthStateLength : Int
        get() {
            val o = __offset(64); return if (o != 0) __vector_len(o) else 0
        }
    /**
     * Health condition information.
     * Example: /// Example: No example provided.
     * Constraints: No constraints specified.
     */
    fun condition(j: Int) : String? {
        val o = __offset(66)
        return if (o != 0) {
            __string(__vector(o) + j * 4)
        } else {
            null
        }
    }
    val conditionLength : Int
        get() {
            val o = __offset(66); return if (o != 0) __vector_len(o) else 0
        }
    /**
     * Medication specifics.
     * Example: /// Example: No example provided.
     * Constraints: No constraints specified.
     */
    fun medication(j: Int) : String? {
        val o = __offset(68)
        return if (o != 0) {
            __string(__vector(o) + j * 4)
        } else {
            null
        }
    }
    val medicationLength : Int
        get() {
            val o = __offset(68); return if (o != 0) __vector_len(o) else 0
        }
    /**
     * Injury specifics.
     * Example: /// Example: No example provided.
     * Constraints: No constraints specified.
     */
    fun injury(j: Int) : String? {
        val o = __offset(70)
        return if (o != 0) {
            __string(__vector(o) + j * 4)
        } else {
            null
        }
    }
    val injuryLength : Int
        get() {
            val o = __offset(70); return if (o != 0) __vector_len(o) else 0
        }
    /**
     * Allergy information.
     * Example: /// Example: No example provided.
     * Constraints: No constraints specified.
     */
    fun allergy(j: Int) : String? {
        val o = __offset(72)
        return if (o != 0) {
            __string(__vector(o) + j * 4)
        } else {
            null
        }
    }
    val allergyLength : Int
        get() {
            val o = __offset(72); return if (o != 0) __vector_len(o) else 0
        }
    companion object {
        fun validateVersion() = Constants.FLATBUFFERS_24_3_25()
        fun getRootAsEvacCasualtyInfo_Abridged(_bb: ByteBuffer): EvacCasualtyInfo_Abridged = getRootAsEvacCasualtyInfo_Abridged(_bb, EvacCasualtyInfo_Abridged())
        fun getRootAsEvacCasualtyInfo_Abridged(_bb: ByteBuffer, obj: EvacCasualtyInfo_Abridged): EvacCasualtyInfo_Abridged {
            _bb.order(ByteOrder.LITTLE_ENDIAN)
            return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb))
        }
        fun EvacCasualtyInfo_AbridgedBufferHasIdentifier(_bb: ByteBuffer) : Boolean = __has_identifier(_bb, "EVAC")
        fun createEvacCasualtyInfo_Abridged(builder: FlatBufferBuilder, priorityOffset: Int, evacTypeOffset: Int, casualtyTypeOffset: Int, bodyPartOffset: Int, contamTypeOffset: Int, specMedEquipOffset: Int, casualtyKeyOffset: Int, patientStatusOffset: Int, patientIdentityOffset: Int, nationalityOffset: Int, payGradeOffset: Int, nameOffset: Int, age: Int, genderOffset: Int, last4SsnOffset: Int, bloodTypeOffset: Int, serviceOffset: Int, callSignOffset: Int, occSpecialityOffset: Int, burialLocationOffset: Int, collectionPointOffset: Int, careProviderUrnOffset: Int, dispositionTypeOffset: Int, dispositionOffset: Int, reportGenOffset: Int, reportTimeOffset: Int, commentsOffset: Int, etiologyOffset: Int, treatmentOffset: Int, vitalSignDataOffset: Int, healthStateOffset: Int, conditionOffset: Int, medicationOffset: Int, injuryOffset: Int, allergyOffset: Int) : Int {
            builder.startTable(35)
            addAllergy(builder, allergyOffset)
            addInjury(builder, injuryOffset)
            addMedication(builder, medicationOffset)
            addCondition(builder, conditionOffset)
            addHealthState(builder, healthStateOffset)
            addVitalSignData(builder, vitalSignDataOffset)
            addTreatment(builder, treatmentOffset)
            addEtiology(builder, etiologyOffset)
            addComments(builder, commentsOffset)
            addReportTime(builder, reportTimeOffset)
            addReportGen(builder, reportGenOffset)
            addDisposition(builder, dispositionOffset)
            addDispositionType(builder, dispositionTypeOffset)
            addCareProviderUrn(builder, careProviderUrnOffset)
            addCollectionPoint(builder, collectionPointOffset)
            addBurialLocation(builder, burialLocationOffset)
            addOccSpeciality(builder, occSpecialityOffset)
            addCallSign(builder, callSignOffset)
            addService(builder, serviceOffset)
            addBloodType(builder, bloodTypeOffset)
            addLast4SSN(builder, last4SsnOffset)
            addGender(builder, genderOffset)
            addAge(builder, age)
            addName(builder, nameOffset)
            addPayGrade(builder, payGradeOffset)
            addNationality(builder, nationalityOffset)
            addPatientIdentity(builder, patientIdentityOffset)
            addPatientStatus(builder, patientStatusOffset)
            addCasualtyKey(builder, casualtyKeyOffset)
            addSpecMedEquip(builder, specMedEquipOffset)
            addContamType(builder, contamTypeOffset)
            addBodyPart(builder, bodyPartOffset)
            addCasualtyType(builder, casualtyTypeOffset)
            addEvacType(builder, evacTypeOffset)
            addPriority(builder, priorityOffset)
            return endEvacCasualtyInfo_Abridged(builder)
        }
        fun startEvacCasualtyInfo_Abridged(builder: FlatBufferBuilder) = builder.startTable(35)
        fun addPriority(builder: FlatBufferBuilder, priority: Int) = builder.addOffset(0, priority, 0)
        fun addEvacType(builder: FlatBufferBuilder, evacType: Int) = builder.addOffset(1, evacType, 0)
        fun addCasualtyType(builder: FlatBufferBuilder, casualtyType: Int) = builder.addOffset(2, casualtyType, 0)
        fun addBodyPart(builder: FlatBufferBuilder, bodyPart: Int) = builder.addOffset(3, bodyPart, 0)
        fun addContamType(builder: FlatBufferBuilder, contamType: Int) = builder.addOffset(4, contamType, 0)
        fun addSpecMedEquip(builder: FlatBufferBuilder, specMedEquip: Int) = builder.addOffset(5, specMedEquip, 0)
        fun createSpecMedEquipVector(builder: FlatBufferBuilder, data: IntArray) : Int {
            builder.startVector(4, data.size, 4)
            for (i in data.size - 1 downTo 0) {
                builder.addOffset(data[i])
            }
            return builder.endVector()
        }
        fun startSpecMedEquipVector(builder: FlatBufferBuilder, numElems: Int) = builder.startVector(4, numElems, 4)
        fun addCasualtyKey(builder: FlatBufferBuilder, casualtyKey: Int) = builder.addOffset(6, casualtyKey, 0)
        fun addPatientStatus(builder: FlatBufferBuilder, patientStatus: Int) = builder.addOffset(7, patientStatus, 0)
        fun addPatientIdentity(builder: FlatBufferBuilder, patientIdentity: Int) = builder.addOffset(8, patientIdentity, 0)
        fun addNationality(builder: FlatBufferBuilder, nationality: Int) = builder.addOffset(9, nationality, 0)
        fun addPayGrade(builder: FlatBufferBuilder, payGrade: Int) = builder.addOffset(10, payGrade, 0)
        fun addName(builder: FlatBufferBuilder, name: Int) = builder.addOffset(11, name, 0)
        fun addAge(builder: FlatBufferBuilder, age: Int) = builder.addInt(12, age, 0)
        fun addGender(builder: FlatBufferBuilder, gender: Int) = builder.addOffset(13, gender, 0)
        fun addLast4SSN(builder: FlatBufferBuilder, last4Ssn: Int) = builder.addOffset(14, last4Ssn, 0)
        fun addBloodType(builder: FlatBufferBuilder, bloodType: Int) = builder.addOffset(15, bloodType, 0)
        fun addService(builder: FlatBufferBuilder, service: Int) = builder.addOffset(16, service, 0)
        fun addCallSign(builder: FlatBufferBuilder, callSign: Int) = builder.addOffset(17, callSign, 0)
        fun addOccSpeciality(builder: FlatBufferBuilder, occSpeciality: Int) = builder.addOffset(18, occSpeciality, 0)
        fun addBurialLocation(builder: FlatBufferBuilder, burialLocation: Int) = builder.addOffset(19, burialLocation, 0)
        fun createBurialLocationVector(builder: FlatBufferBuilder, data: IntArray) : Int {
            builder.startVector(4, data.size, 4)
            for (i in data.size - 1 downTo 0) {
                builder.addOffset(data[i])
            }
            return builder.endVector()
        }
        fun startBurialLocationVector(builder: FlatBufferBuilder, numElems: Int) = builder.startVector(4, numElems, 4)
        fun addCollectionPoint(builder: FlatBufferBuilder, collectionPoint: Int) = builder.addOffset(20, collectionPoint, 0)
        fun createCollectionPointVector(builder: FlatBufferBuilder, data: IntArray) : Int {
            builder.startVector(4, data.size, 4)
            for (i in data.size - 1 downTo 0) {
                builder.addOffset(data[i])
            }
            return builder.endVector()
        }
        fun startCollectionPointVector(builder: FlatBufferBuilder, numElems: Int) = builder.startVector(4, numElems, 4)
        fun addCareProviderUrn(builder: FlatBufferBuilder, careProviderUrn: Int) = builder.addOffset(21, careProviderUrn, 0)
        fun addDispositionType(builder: FlatBufferBuilder, dispositionType: Int) = builder.addOffset(22, dispositionType, 0)
        fun addDisposition(builder: FlatBufferBuilder, disposition: Int) = builder.addOffset(23, disposition, 0)
        fun addReportGen(builder: FlatBufferBuilder, reportGen: Int) = builder.addOffset(24, reportGen, 0)
        fun addReportTime(builder: FlatBufferBuilder, reportTime: Int) = builder.addOffset(25, reportTime, 0)
        fun addComments(builder: FlatBufferBuilder, comments: Int) = builder.addOffset(26, comments, 0)
        fun addEtiology(builder: FlatBufferBuilder, etiology: Int) = builder.addOffset(27, etiology, 0)
        fun createEtiologyVector(builder: FlatBufferBuilder, data: IntArray) : Int {
            builder.startVector(4, data.size, 4)
            for (i in data.size - 1 downTo 0) {
                builder.addOffset(data[i])
            }
            return builder.endVector()
        }
        fun startEtiologyVector(builder: FlatBufferBuilder, numElems: Int) = builder.startVector(4, numElems, 4)
        fun addTreatment(builder: FlatBufferBuilder, treatment: Int) = builder.addOffset(28, treatment, 0)
        fun createTreatmentVector(builder: FlatBufferBuilder, data: IntArray) : Int {
            builder.startVector(4, data.size, 4)
            for (i in data.size - 1 downTo 0) {
                builder.addOffset(data[i])
            }
            return builder.endVector()
        }
        fun startTreatmentVector(builder: FlatBufferBuilder, numElems: Int) = builder.startVector(4, numElems, 4)
        fun addVitalSignData(builder: FlatBufferBuilder, vitalSignData: Int) = builder.addOffset(29, vitalSignData, 0)
        fun createVitalSignDataVector(builder: FlatBufferBuilder, data: IntArray) : Int {
            builder.startVector(4, data.size, 4)
            for (i in data.size - 1 downTo 0) {
                builder.addOffset(data[i])
            }
            return builder.endVector()
        }
        fun startVitalSignDataVector(builder: FlatBufferBuilder, numElems: Int) = builder.startVector(4, numElems, 4)
        fun addHealthState(builder: FlatBufferBuilder, healthState: Int) = builder.addOffset(30, healthState, 0)
        fun createHealthStateVector(builder: FlatBufferBuilder, data: IntArray) : Int {
            builder.startVector(4, data.size, 4)
            for (i in data.size - 1 downTo 0) {
                builder.addOffset(data[i])
            }
            return builder.endVector()
        }
        fun startHealthStateVector(builder: FlatBufferBuilder, numElems: Int) = builder.startVector(4, numElems, 4)
        fun addCondition(builder: FlatBufferBuilder, condition: Int) = builder.addOffset(31, condition, 0)
        fun createConditionVector(builder: FlatBufferBuilder, data: IntArray) : Int {
            builder.startVector(4, data.size, 4)
            for (i in data.size - 1 downTo 0) {
                builder.addOffset(data[i])
            }
            return builder.endVector()
        }
        fun startConditionVector(builder: FlatBufferBuilder, numElems: Int) = builder.startVector(4, numElems, 4)
        fun addMedication(builder: FlatBufferBuilder, medication: Int) = builder.addOffset(32, medication, 0)
        fun createMedicationVector(builder: FlatBufferBuilder, data: IntArray) : Int {
            builder.startVector(4, data.size, 4)
            for (i in data.size - 1 downTo 0) {
                builder.addOffset(data[i])
            }
            return builder.endVector()
        }
        fun startMedicationVector(builder: FlatBufferBuilder, numElems: Int) = builder.startVector(4, numElems, 4)
        fun addInjury(builder: FlatBufferBuilder, injury: Int) = builder.addOffset(33, injury, 0)
        fun createInjuryVector(builder: FlatBufferBuilder, data: IntArray) : Int {
            builder.startVector(4, data.size, 4)
            for (i in data.size - 1 downTo 0) {
                builder.addOffset(data[i])
            }
            return builder.endVector()
        }
        fun startInjuryVector(builder: FlatBufferBuilder, numElems: Int) = builder.startVector(4, numElems, 4)
        fun addAllergy(builder: FlatBufferBuilder, allergy: Int) = builder.addOffset(34, allergy, 0)
        fun createAllergyVector(builder: FlatBufferBuilder, data: IntArray) : Int {
            builder.startVector(4, data.size, 4)
            for (i in data.size - 1 downTo 0) {
                builder.addOffset(data[i])
            }
            return builder.endVector()
        }
        fun startAllergyVector(builder: FlatBufferBuilder, numElems: Int) = builder.startVector(4, numElems, 4)
        fun endEvacCasualtyInfo_Abridged(builder: FlatBufferBuilder) : Int {
            val o = builder.endTable()
            return o
        }
        fun finishEvacCasualtyInfoAbridgedBuffer(builder: FlatBufferBuilder, offset: Int) = builder.finish(offset, "EVAC")
        fun finishSizePrefixedEvacCasualtyInfo_AbridgedBuffer(builder: FlatBufferBuilder, offset: Int) = builder.finishSizePrefixed(offset, "EVAC")
    }
}
