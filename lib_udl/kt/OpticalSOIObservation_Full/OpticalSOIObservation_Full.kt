// automatically generated by the FlatBuffers compiler, do not modify

import com.google.flatbuffers.BaseVector
import com.google.flatbuffers.BooleanVector
import com.google.flatbuffers.ByteVector
import com.google.flatbuffers.Constants
import com.google.flatbuffers.DoubleVector
import com.google.flatbuffers.FlatBufferBuilder
import com.google.flatbuffers.FloatVector
import com.google.flatbuffers.LongVector
import com.google.flatbuffers.StringVector
import com.google.flatbuffers.Struct
import com.google.flatbuffers.Table
import com.google.flatbuffers.UnionVector
import java.nio.ByteBuffer
import java.nio.ByteOrder
import kotlin.math.sign

/**
 * /// An Optical SOI record contains observation information taken from a sensor about a Space Object.
 */
@Suppress("unused")
class OpticalSOIObservation_Full : Table() {

    fun __init(_i: Int, _bb: ByteBuffer)  {
        __reset(_i, _bb)
    }
    fun __assign(_i: Int, _bb: ByteBuffer) : OpticalSOIObservation_Full {
        __init(_i, _bb)
        return this
    }
    /**
     * Observation detection start time in ISO 8601 UTC with microsecond precision.
     * Example: /// Example: 2018-01-01T16:00:00.888456Z
     * Constraints: No constraints specified.
     */
    val obStartTime : String?
        get() {
            val o = __offset(4)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val obStartTimeAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(4, 1)
    fun obStartTimeInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 4, 1)
    /**
     * Array of start times for each intensity measurement. The 1st value in the array will match obStartTime.
     * Example: /// Example: ['2018-01-01T16:00:00.888456Z', '2018-01-01T16:00:00.898456Z', '2018-01-01T16:00:00.998456Z']
     * Constraints: No constraints specified.
     */
    fun intensityTimes(j: Int) : String? {
        val o = __offset(6)
        return if (o != 0) {
            __string(__vector(o) + j * 4)
        } else {
            null
        }
    }
    val intensityTimesLength : Int
        get() {
            val o = __offset(6); return if (o != 0) __vector_len(o) else 0
        }
    /**
     * The reference number, x, where x ranges from 1 to n, where n is the number specified in spectralFilters that corresponds to the spectral filter used.
     * Example: /// Example: 0
     * Constraints: No constraints specified.
     */
    val currentSpectralFilterNum : Int
        get() {
            val o = __offset(8)
            return if(o != 0) bb.getInt(o + bb_pos) else 0
        }
    /**
     * Image exposure duration in seconds.
     * Example: /// Example: 0.455
     * Constraints: No constraints specified.
     */
    val expDuration : Double
        get() {
            val o = __offset(10)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Array of intensities of the Space Object for observations, in kilowatts per steradian per micrometer.
     * Example: /// Example: [1.1, 1.1, 1.1]
     * Constraints: No constraints specified.
     */
    fun intensities(j: Int) : String? {
        val o = __offset(12)
        return if (o != 0) {
            __string(__vector(o) + j * 4)
        } else {
            null
        }
    }
    val intensitiesLength : Int
        get() {
            val o = __offset(12); return if (o != 0) __vector_len(o) else 0
        }
    /**
     * Array of coefficients for how much signal would be lost to atmospheric attenuation for a star at zenith for each element in intensities, in magnitudes per air mass.
     * Example: /// Example: [0.32, 0.32, 0.32]
     * Constraints: No constraints specified.
     */
    fun extinctionCoeffs(j: Int) : String? {
        val o = __offset(14)
        return if (o != 0) {
            __string(__vector(o) + j * 4)
        } else {
            null
        }
    }
    val extinctionCoeffsLength : Int
        get() {
            val o = __offset(14); return if (o != 0) __vector_len(o) else 0
        }
    /**
     * Array of extinction coefficient uncertainties for each element in intensities. Each value represents the difference between the measured brightness and predicted brightness of the star with the extinction removed, making it exo-atmospheric (e.g. -5.0 to 30.0).
     * Example: /// Example: [0.06, 0.06, 0.06]
     * Constraints: No constraints specified.
     */
    fun extinctionCoeffsUnc(j: Int) : String? {
        val o = __offset(16)
        return if (o != 0) {
            __string(__vector(o) + j * 4)
        } else {
            null
        }
    }
    val extinctionCoeffsUncLength : Int
        get() {
            val o = __offset(16); return if (o != 0) __vector_len(o) else 0
        }
    /**
     * Array of average Sky Background signals, in magnitudes, with a value corresponding to the time of each intensity measurement. Sky Background refers to the incoming light from an apparently empty part of the night sky.
     * Example: /// Example: [100625.375, 100625.375, 100625.375]
     * Constraints: No constraints specified.
     */
    fun skyBgs(j: Int) : String? {
        val o = __offset(18)
        return if (o != 0) {
            __string(__vector(o) + j * 4)
        } else {
            null
        }
    }
    val skyBgsLength : Int
        get() {
            val o = __offset(18); return if (o != 0) __vector_len(o) else 0
        }
    /**
     * Array of local average Sky Background signals, in magnitudes, with a value corresponding to the time of each intensity measurement. Sky Background refers to the incoming light from an apparently empty part of the night sky.
     * Example: /// Example: [100625.375, 100625.375, 100625.375]
     * Constraints: No constraints specified.
     */
    fun localSkyBgs(j: Int) : String? {
        val o = __offset(20)
        return if (o != 0) {
            __string(__vector(o) + j * 4)
        } else {
            null
        }
    }
    val localSkyBgsLength : Int
        get() {
            val o = __offset(20); return if (o != 0) __vector_len(o) else 0
        }
    /**
     * Array of uncertainty of the local average Sky Background signal, in magnitudes, with a value corresponding to the time of each intensity measurement.
     * Example: /// Example: [0.065, 0.065, 0.065]
     * Constraints: No constraints specified.
     */
    fun localSkyBgsUnc(j: Int) : String? {
        val o = __offset(22)
        return if (o != 0) {
            __string(__vector(o) + j * 4)
        } else {
            null
        }
    }
    val localSkyBgsUncLength : Int
        get() {
            val o = __offset(22); return if (o != 0) __vector_len(o) else 0
        }
    /**
     * Array of the number of detected stars in the FOV with a value for each element in the intensities field.
     * Example: /// Example: [6, 6, 6]
     * Constraints: No constraints specified.
     */
    fun numDetectedStars(j: Int) : String? {
        val o = __offset(24)
        return if (o != 0) {
            __string(__vector(o) + j * 4)
        } else {
            null
        }
    }
    val numDetectedStarsLength : Int
        get() {
            val o = __offset(24); return if (o != 0) __vector_len(o) else 0
        }
    /**
     * Array of the number of correlated stars in the FOV with a value for each element in the intensities field.
     * Example: /// Example: [3, 3, 3]
     * Constraints: No constraints specified.
     */
    fun numCorrelatedStars(j: Int) : String? {
        val o = __offset(26)
        return if (o != 0) {
            __string(__vector(o) + j * 4)
        } else {
            null
        }
    }
    val numCorrelatedStarsLength : Int
        get() {
            val o = __offset(26); return if (o != 0) __vector_len(o) else 0
        }
    /**
     * Array of values for the zero-point in magnitudes, calculated at the time of each intensity measurement. It is the difference between the catalog mag and instrumental mag for a set of standard stars (e.g. -5.0 to 30.0).
     * Example: /// Example: [24.711, 24.711, 24.711]
     * Constraints: No constraints specified.
     */
    fun zeroPoints(j: Int) : String? {
        val o = __offset(28)
        return if (o != 0) {
            __string(__vector(o) + j * 4)
        } else {
            null
        }
    }
    val zeroPointsLength : Int
        get() {
            val o = __offset(28); return if (o != 0) __vector_len(o) else 0
        }
    /**
     * Array of right ascension values, in degrees, of the Target object from the frame of reference of the sensor. A value is provided for each element in the intensities field.
     * Example: /// Example: [107.4, 107.4, 107.4]
     * Constraints: No constraints specified.
     */
    fun ras(j: Int) : String? {
        val o = __offset(30)
        return if (o != 0) {
            __string(__vector(o) + j * 4)
        } else {
            null
        }
    }
    val rasLength : Int
        get() {
            val o = __offset(30); return if (o != 0) __vector_len(o) else 0
        }
    /**
     * Array of declination values, in degrees, of the Target object from the frame of reference of the sensor. A value is provided for each element in the intensities field, at the middle of the frameâ€™s exposure time.
     * Example: /// Example: [-0.45, -0.45, -0.45]
     * Constraints: No constraints specified.
     */
    fun declinations(j: Int) : String? {
        val o = __offset(32)
        return if (o != 0) {
            __string(__vector(o) + j * 4)
        } else {
            null
        }
    }
    val declinationsLength : Int
        get() {
            val o = __offset(32); return if (o != 0) __vector_len(o) else 0
        }
    /**
     * Array of right ascension rate values, in degrees per second, measuring the rate the telescope is moving to track the Target object from the frame of reference of the sensor, for each element in the intensities field, at the middle of the frameâ€™s exposure time.
     * Example: /// Example: [0, 0, 0]
     * Constraints: No constraints specified.
     */
    fun raRates(j: Int) : String? {
        val o = __offset(34)
        return if (o != 0) {
            __string(__vector(o) + j * 4)
        } else {
            null
        }
    }
    val raRatesLength : Int
        get() {
            val o = __offset(34); return if (o != 0) __vector_len(o) else 0
        }
    /**
     * Array of values giving the percent of pixels that make up the object signal that are beyond the saturation point for the sensor, with a value for each element in the intensities field.
     * Example: /// Example: [0.1, 0.2, 1]
     * Constraints: No constraints specified.
     */
    fun percentSats(j: Int) : String? {
        val o = __offset(36)
        return if (o != 0) {
            __string(__vector(o) + j * 4)
        } else {
            null
        }
    }
    val percentSatsLength : Int
        get() {
            val o = __offset(36); return if (o != 0) __vector_len(o) else 0
        }
    companion object {
        fun validateVersion() = Constants.FLATBUFFERS_24_3_25()
        fun getRootAsOpticalSOIObservation_Full(_bb: ByteBuffer): OpticalSOIObservation_Full = getRootAsOpticalSOIObservation_Full(_bb, OpticalSOIObservation_Full())
        fun getRootAsOpticalSOIObservation_Full(_bb: ByteBuffer, obj: OpticalSOIObservation_Full): OpticalSOIObservation_Full {
            _bb.order(ByteOrder.LITTLE_ENDIAN)
            return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb))
        }
        fun OpticalSOIObservation_FullBufferHasIdentifier(_bb: ByteBuffer) : Boolean = __has_identifier(_bb, "OPTI")
        fun createOpticalSOIObservation_Full(builder: FlatBufferBuilder, obStartTimeOffset: Int, intensityTimesOffset: Int, currentSpectralFilterNum: Int, expDuration: Double, intensitiesOffset: Int, extinctionCoeffsOffset: Int, extinctionCoeffsUncOffset: Int, skyBgsOffset: Int, localSkyBgsOffset: Int, localSkyBgsUncOffset: Int, numDetectedStarsOffset: Int, numCorrelatedStarsOffset: Int, zeroPointsOffset: Int, rasOffset: Int, declinationsOffset: Int, raRatesOffset: Int, percentSatsOffset: Int) : Int {
            builder.startTable(17)
            addExpDuration(builder, expDuration)
            addPercentSats(builder, percentSatsOffset)
            addRaRates(builder, raRatesOffset)
            addDeclinations(builder, declinationsOffset)
            addRas(builder, rasOffset)
            addZeroPoints(builder, zeroPointsOffset)
            addNumCorrelatedStars(builder, numCorrelatedStarsOffset)
            addNumDetectedStars(builder, numDetectedStarsOffset)
            addLocalSkyBgsUnc(builder, localSkyBgsUncOffset)
            addLocalSkyBgs(builder, localSkyBgsOffset)
            addSkyBgs(builder, skyBgsOffset)
            addExtinctionCoeffsUnc(builder, extinctionCoeffsUncOffset)
            addExtinctionCoeffs(builder, extinctionCoeffsOffset)
            addIntensities(builder, intensitiesOffset)
            addCurrentSpectralFilterNum(builder, currentSpectralFilterNum)
            addIntensityTimes(builder, intensityTimesOffset)
            addObStartTime(builder, obStartTimeOffset)
            return endOpticalSOIObservation_Full(builder)
        }
        fun startOpticalSOIObservation_Full(builder: FlatBufferBuilder) = builder.startTable(17)
        fun addObStartTime(builder: FlatBufferBuilder, obStartTime: Int) = builder.addOffset(0, obStartTime, 0)
        fun addIntensityTimes(builder: FlatBufferBuilder, intensityTimes: Int) = builder.addOffset(1, intensityTimes, 0)
        fun createIntensityTimesVector(builder: FlatBufferBuilder, data: IntArray) : Int {
            builder.startVector(4, data.size, 4)
            for (i in data.size - 1 downTo 0) {
                builder.addOffset(data[i])
            }
            return builder.endVector()
        }
        fun startIntensityTimesVector(builder: FlatBufferBuilder, numElems: Int) = builder.startVector(4, numElems, 4)
        fun addCurrentSpectralFilterNum(builder: FlatBufferBuilder, currentSpectralFilterNum: Int) = builder.addInt(2, currentSpectralFilterNum, 0)
        fun addExpDuration(builder: FlatBufferBuilder, expDuration: Double) = builder.addDouble(3, expDuration, 0.0)
        fun addIntensities(builder: FlatBufferBuilder, intensities: Int) = builder.addOffset(4, intensities, 0)
        fun createIntensitiesVector(builder: FlatBufferBuilder, data: IntArray) : Int {
            builder.startVector(4, data.size, 4)
            for (i in data.size - 1 downTo 0) {
                builder.addOffset(data[i])
            }
            return builder.endVector()
        }
        fun startIntensitiesVector(builder: FlatBufferBuilder, numElems: Int) = builder.startVector(4, numElems, 4)
        fun addExtinctionCoeffs(builder: FlatBufferBuilder, extinctionCoeffs: Int) = builder.addOffset(5, extinctionCoeffs, 0)
        fun createExtinctionCoeffsVector(builder: FlatBufferBuilder, data: IntArray) : Int {
            builder.startVector(4, data.size, 4)
            for (i in data.size - 1 downTo 0) {
                builder.addOffset(data[i])
            }
            return builder.endVector()
        }
        fun startExtinctionCoeffsVector(builder: FlatBufferBuilder, numElems: Int) = builder.startVector(4, numElems, 4)
        fun addExtinctionCoeffsUnc(builder: FlatBufferBuilder, extinctionCoeffsUnc: Int) = builder.addOffset(6, extinctionCoeffsUnc, 0)
        fun createExtinctionCoeffsUncVector(builder: FlatBufferBuilder, data: IntArray) : Int {
            builder.startVector(4, data.size, 4)
            for (i in data.size - 1 downTo 0) {
                builder.addOffset(data[i])
            }
            return builder.endVector()
        }
        fun startExtinctionCoeffsUncVector(builder: FlatBufferBuilder, numElems: Int) = builder.startVector(4, numElems, 4)
        fun addSkyBgs(builder: FlatBufferBuilder, skyBgs: Int) = builder.addOffset(7, skyBgs, 0)
        fun createSkyBgsVector(builder: FlatBufferBuilder, data: IntArray) : Int {
            builder.startVector(4, data.size, 4)
            for (i in data.size - 1 downTo 0) {
                builder.addOffset(data[i])
            }
            return builder.endVector()
        }
        fun startSkyBgsVector(builder: FlatBufferBuilder, numElems: Int) = builder.startVector(4, numElems, 4)
        fun addLocalSkyBgs(builder: FlatBufferBuilder, localSkyBgs: Int) = builder.addOffset(8, localSkyBgs, 0)
        fun createLocalSkyBgsVector(builder: FlatBufferBuilder, data: IntArray) : Int {
            builder.startVector(4, data.size, 4)
            for (i in data.size - 1 downTo 0) {
                builder.addOffset(data[i])
            }
            return builder.endVector()
        }
        fun startLocalSkyBgsVector(builder: FlatBufferBuilder, numElems: Int) = builder.startVector(4, numElems, 4)
        fun addLocalSkyBgsUnc(builder: FlatBufferBuilder, localSkyBgsUnc: Int) = builder.addOffset(9, localSkyBgsUnc, 0)
        fun createLocalSkyBgsUncVector(builder: FlatBufferBuilder, data: IntArray) : Int {
            builder.startVector(4, data.size, 4)
            for (i in data.size - 1 downTo 0) {
                builder.addOffset(data[i])
            }
            return builder.endVector()
        }
        fun startLocalSkyBgsUncVector(builder: FlatBufferBuilder, numElems: Int) = builder.startVector(4, numElems, 4)
        fun addNumDetectedStars(builder: FlatBufferBuilder, numDetectedStars: Int) = builder.addOffset(10, numDetectedStars, 0)
        fun createNumDetectedStarsVector(builder: FlatBufferBuilder, data: IntArray) : Int {
            builder.startVector(4, data.size, 4)
            for (i in data.size - 1 downTo 0) {
                builder.addOffset(data[i])
            }
            return builder.endVector()
        }
        fun startNumDetectedStarsVector(builder: FlatBufferBuilder, numElems: Int) = builder.startVector(4, numElems, 4)
        fun addNumCorrelatedStars(builder: FlatBufferBuilder, numCorrelatedStars: Int) = builder.addOffset(11, numCorrelatedStars, 0)
        fun createNumCorrelatedStarsVector(builder: FlatBufferBuilder, data: IntArray) : Int {
            builder.startVector(4, data.size, 4)
            for (i in data.size - 1 downTo 0) {
                builder.addOffset(data[i])
            }
            return builder.endVector()
        }
        fun startNumCorrelatedStarsVector(builder: FlatBufferBuilder, numElems: Int) = builder.startVector(4, numElems, 4)
        fun addZeroPoints(builder: FlatBufferBuilder, zeroPoints: Int) = builder.addOffset(12, zeroPoints, 0)
        fun createZeroPointsVector(builder: FlatBufferBuilder, data: IntArray) : Int {
            builder.startVector(4, data.size, 4)
            for (i in data.size - 1 downTo 0) {
                builder.addOffset(data[i])
            }
            return builder.endVector()
        }
        fun startZeroPointsVector(builder: FlatBufferBuilder, numElems: Int) = builder.startVector(4, numElems, 4)
        fun addRas(builder: FlatBufferBuilder, ras: Int) = builder.addOffset(13, ras, 0)
        fun createRasVector(builder: FlatBufferBuilder, data: IntArray) : Int {
            builder.startVector(4, data.size, 4)
            for (i in data.size - 1 downTo 0) {
                builder.addOffset(data[i])
            }
            return builder.endVector()
        }
        fun startRasVector(builder: FlatBufferBuilder, numElems: Int) = builder.startVector(4, numElems, 4)
        fun addDeclinations(builder: FlatBufferBuilder, declinations: Int) = builder.addOffset(14, declinations, 0)
        fun createDeclinationsVector(builder: FlatBufferBuilder, data: IntArray) : Int {
            builder.startVector(4, data.size, 4)
            for (i in data.size - 1 downTo 0) {
                builder.addOffset(data[i])
            }
            return builder.endVector()
        }
        fun startDeclinationsVector(builder: FlatBufferBuilder, numElems: Int) = builder.startVector(4, numElems, 4)
        fun addRaRates(builder: FlatBufferBuilder, raRates: Int) = builder.addOffset(15, raRates, 0)
        fun createRaRatesVector(builder: FlatBufferBuilder, data: IntArray) : Int {
            builder.startVector(4, data.size, 4)
            for (i in data.size - 1 downTo 0) {
                builder.addOffset(data[i])
            }
            return builder.endVector()
        }
        fun startRaRatesVector(builder: FlatBufferBuilder, numElems: Int) = builder.startVector(4, numElems, 4)
        fun addPercentSats(builder: FlatBufferBuilder, percentSats: Int) = builder.addOffset(16, percentSats, 0)
        fun createPercentSatsVector(builder: FlatBufferBuilder, data: IntArray) : Int {
            builder.startVector(4, data.size, 4)
            for (i in data.size - 1 downTo 0) {
                builder.addOffset(data[i])
            }
            return builder.endVector()
        }
        fun startPercentSatsVector(builder: FlatBufferBuilder, numElems: Int) = builder.startVector(4, numElems, 4)
        fun endOpticalSOIObservation_Full(builder: FlatBufferBuilder) : Int {
            val o = builder.endTable()
            return o
        }
        fun finishOpticalSOIObservationFullBuffer(builder: FlatBufferBuilder, offset: Int) = builder.finish(offset, "OPTI")
        fun finishSizePrefixedOpticalSOIObservation_FullBuffer(builder: FlatBufferBuilder, offset: Int) = builder.finishSizePrefixed(offset, "OPTI")
    }
}
