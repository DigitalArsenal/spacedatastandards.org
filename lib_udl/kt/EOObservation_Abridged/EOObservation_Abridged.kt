// automatically generated by the FlatBuffers compiler, do not modify

import com.google.flatbuffers.BaseVector
import com.google.flatbuffers.BooleanVector
import com.google.flatbuffers.ByteVector
import com.google.flatbuffers.Constants
import com.google.flatbuffers.DoubleVector
import com.google.flatbuffers.FlatBufferBuilder
import com.google.flatbuffers.FloatVector
import com.google.flatbuffers.LongVector
import com.google.flatbuffers.StringVector
import com.google.flatbuffers.Struct
import com.google.flatbuffers.Table
import com.google.flatbuffers.UnionVector
import java.nio.ByteBuffer
import java.nio.ByteOrder
import kotlin.math.sign

/**
 * /// Model representation of observation data for electro-optical based sensor phenomenologies. ECI J2K is the preferred reference frame for EOObservations, however, several user-specified reference frames are accommodated. Users should check the EOObservation record as well as the 'Discover' tab in the storefront to confirm the coordinate frames used by the data provider.
 */
@Suppress("unused")
class EOObservation_Abridged : Table() {

    fun __init(_i: Int, _bb: ByteBuffer)  {
        __reset(_i, _bb)
    }
    fun __assign(_i: Int, _bb: ByteBuffer) : EOObservation_Abridged {
        __init(_i, _bb)
        return this
    }
    /**
     * Unique identifier of the record, auto-generated by the system.
     * Example: /// Example: EOOBSERVATION-ID
     * Constraints: Minimum length = 1, Maximum length = 36
     */
    val id : String?
        get() {
            val o = __offset(4)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val idAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(4, 1)
    fun idInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 4, 1)
    /**
     * Classification marking of the data in IC/CAPCO Portion-marked format.
     * Example: /// Example: U
     * Constraints: Minimum length = 1, Maximum length = 128
     */
    val classificationMarking : String?
        get() {
            val o = __offset(6)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val classificationMarkingAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(6, 1)
    fun classificationMarkingInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 6, 1)
    /**
     * Ob detection time in ISO 8601 UTC with microsecond precision.
     * Example: /// Example: 2018-01-01T16:00:00.123456Z
     * Constraints: No constraints specified.
     */
    val obTime : String?
        get() {
            val o = __offset(8)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val obTimeAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(8, 1)
    fun obTimeInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 8, 1)
    /**
     * Object Correlation Quality value (non-standardized). Users should consult data providers regarding the expected range of values.
     * Example: /// Example: 1.1
     * Constraints: No constraints specified.
     */
    val corrQuality : Double
        get() {
            val o = __offset(10)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Unique identifier of the target on-orbit object, if correlated.
     * Example: /// Example: ONORBIT-ID
     * Constraints: Minimum length = 0, Maximum length = 36
     */
    val idOnOrbit : String?
        get() {
            val o = __offset(12)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val idOnOrbitAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(12, 1)
    fun idOnOrbitInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 12, 1)
    /**
     * Unique identifier of the reporting sensor.
     * Example: /// Example: SENSOR-ID
     * Constraints: Minimum length = 0, Maximum length = 36
     */
    val idSensor : String?
        get() {
            val o = __offset(14)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val idSensorAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(14, 1)
    fun idSensorInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 14, 1)
    /**
     * Unique identifier of the Sky Imagery.
     * Example: /// Example: SKYIMAGERY-ID
     * Constraints: Minimum length = 0, Maximum length = 36
     */
    val idSkyImagery : String?
        get() {
            val o = __offset(16)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val idSkyImageryAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(16, 1)
    fun idSkyImageryInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 16, 1)
    /**
     * Method indicating telescope movement during collection (AUTOTRACK, MANUAL AUTOTRACK, MANUAL RATE TRACK, MANUAL SIDEREAL, SIDEREAL, RATE TRACK).
     * Example: /// Example: AUTOTRACK
     * Constraints: Minimum length = 0, Maximum length = 24
     */
    val collectMethod : String?
        get() {
            val o = __offset(18)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val collectMethodAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(18, 1)
    fun collectMethodInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 18, 1)
    /**
     * Satellite/Catalog number of the target on-orbit object.
     * Example: /// Example: 5
     * Constraints: No constraints specified.
     */
    val satNo : Int
        get() {
            val o = __offset(20)
            return if(o != 0) bb.getInt(o + bb_pos) else 0
        }
    /**
     * Optional identifier to indicate the specific tasking which produced this observation.
     * Example: /// Example: TASK-ID
     * Constraints: Minimum length = 0, Maximum length = 36
     */
    val taskId : String?
        get() {
            val o = __offset(22)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val taskIdAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(22, 1)
    fun taskIdInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 22, 1)
    /**
     * Optional identifier to track a commercial or marketplace transaction executed to produce this data.
     * Example: /// Example: TRANSACTION-ID
     * Constraints: Minimum length = 0, Maximum length = 64
     */
    val transactionId : String?
        get() {
            val o = __offset(24)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val transactionIdAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(24, 1)
    fun transactionIdInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 24, 1)
    /**
     * Optional identifier of the track to which this observation belongs.
     * Example: /// Example: TRACK-ID
     * Constraints: Minimum length = 0, Maximum length = 36
     */
    val trackId : String?
        get() {
            val o = __offset(26)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val trackIdAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(26, 1)
    fun trackIdInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 26, 1)
    /**
     * The position of this observation within a track (FENCE, FIRST, IN, LAST, SINGLE).  This identifier is optional and, if null, no assumption should be made regarding whether other observations may or may not exist to compose a track.
     * Example: /// Example: FIRST
     * Constraints: Minimum length = 0, Maximum length = 8
     */
    val obPosition : String?
        get() {
            val o = __offset(28)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val obPositionAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(28, 1)
    fun obPositionInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 28, 1)
    /**
     * Optional identifier provided by observation source to indicate the target onorbit object of this observation. This may be an internal identifier and not necessarily a valid satellite number.
     * Example: /// Example: ORIGOBJECT-ID
     * Constraints: Minimum length = 0, Maximum length = 64
     */
    val origObjectId : String?
        get() {
            val o = __offset(30)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val origObjectIdAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(30, 1)
    fun origObjectIdInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 30, 1)
    /**
     * Optional identifier provided by observation source to indicate the sensor identifier which produced this observation. This may be an internal identifier and not necessarily a valid sensor ID.
     * Example: /// Example: ORIGSENSOR-ID
     * Constraints: Minimum length = 0, Maximum length = 64
     */
    val origSensorId : String?
        get() {
            val o = __offset(32)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val origSensorIdAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(32, 1)
    fun origSensorIdInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 32, 1)
    /**
     * Boolean indicating this observation is part of an uncorrelated track or was unable to be correlated to a known object. This flag should only be set to true by data providers after an attempt to correlate to an on-orbit object was made and failed. If unable to correlate, the 'origObjectId' field may be populated with an internal data provider specific identifier.
     * Example: /// Example: False
     * Constraints: No constraints specified.
     */
    val uct : Boolean
        get() {
            val o = __offset(34)
            return if(o != 0) 0.toByte() != bb.get(o + bb_pos) else false
        }
    /**
     * Line of sight azimuth angle in degrees and topocentric frame.
     * Example: /// Example: 1.1
     * Constraints: No constraints specified.
     */
    val azimuth : Double
        get() {
            val o = __offset(36)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * One sigma uncertainty in the line of sight azimuth angle, in degrees.
     * Example: /// Example: 1.1
     * Constraints: No constraints specified.
     */
    val azimuthUnc : Double
        get() {
            val o = __offset(38)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Sensor line of sight azimuth angle bias in degrees.
     * Example: /// Example: 1.1
     * Constraints: No constraints specified.
     */
    val azimuthBias : Double
        get() {
            val o = __offset(40)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Rate of change of the line of sight azimuth in degrees per second.
     * Example: /// Example: 1.1
     * Constraints: No constraints specified.
     */
    val azimuthRate : Double
        get() {
            val o = __offset(42)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Line of sight elevation in degrees and topocentric frame.
     * Example: /// Example: 1.1
     * Constraints: No constraints specified.
     */
    val elevation : Double
        get() {
            val o = __offset(44)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * One sigma uncertainty in the line of sight elevation angle, in degrees.
     * Example: /// Example: 1.1
     * Constraints: No constraints specified.
     */
    val elevationUnc : Double
        get() {
            val o = __offset(46)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Sensor line of sight elevation bias in degrees.
     * Example: /// Example: 1.1
     * Constraints: No constraints specified.
     */
    val elevationBias : Double
        get() {
            val o = __offset(48)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Rate of change of the line of sight elevation in degrees per second.
     * Example: /// Example: 1.1
     * Constraints: No constraints specified.
     */
    val elevationRate : Double
        get() {
            val o = __offset(50)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Line of sight range in km.
     * Example: /// Example: 1.1
     * Constraints: No constraints specified.
     */
    val range : Double
        get() {
            val o = __offset(52)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * One sigma uncertainty in the line of sight range, in kilometers.
     * Example: /// Example: 1.1
     * Constraints: No constraints specified.
     */
    val rangeUnc : Double
        get() {
            val o = __offset(54)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Sensor line of sight range bias in km.
     * Example: /// Example: 1.1
     * Constraints: No constraints specified.
     */
    val rangeBias : Double
        get() {
            val o = __offset(56)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Rate of change of the line of sight range in km/sec.
     * Example: /// Example: 1.1
     * Constraints: No constraints specified.
     */
    val rangeRate : Double
        get() {
            val o = __offset(58)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * One sigma uncertainty in the line of sight range rate, in kilometers/second.
     * Example: /// Example: 1.1
     * Constraints: No constraints specified.
     */
    val rangeRateUnc : Double
        get() {
            val o = __offset(60)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Line of sight right ascension, in degrees, in the specified referenceFrame.  If referenceFrame is null then J2K should be assumed.
     * Example: /// Example: 1.1
     * Constraints: No constraints specified.
     */
    val ra : Double
        get() {
            val o = __offset(62)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Line of sight right ascension rate of change, in degrees/sec, in the specified referenceFrame.  If referenceFrame is null then J2K should be assumed.
     * Example: /// Example: 1.1
     * Constraints: No constraints specified.
     */
    val raRate : Double
        get() {
            val o = __offset(64)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * One sigma uncertainty in the line of sight right ascension angle, in degrees.
     * Example: /// Example: 1.1
     * Constraints: No constraints specified.
     */
    val raUnc : Double
        get() {
            val o = __offset(66)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Sensor line of sight right ascension bias in degrees.
     * Example: /// Example: 1.1
     * Constraints: No constraints specified.
     */
    val raBias : Double
        get() {
            val o = __offset(68)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Line of sight declination, in degrees, in the specified referenceFrame.  If referenceFrame is null then J2K should be assumed.
     * Example: /// Example: 1.1
     * Constraints: No constraints specified.
     */
    val declination : Double
        get() {
            val o = __offset(70)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Line of sight declination rate of change, in degrees/sec, in the specified referenceFrame.  If referenceFrame is null then J2K should be assumed.
     * Example: /// Example: 1.1
     * Constraints: No constraints specified.
     */
    val declinationRate : Double
        get() {
            val o = __offset(72)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * One sigma uncertainty in the line of sight declination angle, in degrees.
     * Example: /// Example: 1.1
     * Constraints: No constraints specified.
     */
    val declinationUnc : Double
        get() {
            val o = __offset(74)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Sensor line of sight declination angle bias in degrees.
     * Example: /// Example: 1.1
     * Constraints: No constraints specified.
     */
    val declinationBias : Double
        get() {
            val o = __offset(76)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Line-of-sight cartesian X position of the target, in km, in the specified referenceFrame.  If referenceFrame is null then J2K should be assumed.
     * Example: /// Example: 1.1
     * Constraints: No constraints specified.
     */
    val losx : Double
        get() {
            val o = __offset(78)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Line-of-sight cartesian Y position of the target, in km, in the specified referenceFrame.  If referenceFrame is null then J2K should be assumed.
     * Example: /// Example: 1.1
     * Constraints: No constraints specified.
     */
    val losy : Double
        get() {
            val o = __offset(80)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Line-of-sight cartesian Z position of the target, in km, in the specified referenceFrame.  If referenceFrame is null then J2K should be assumed.
     * Example: /// Example: 1.1
     * Constraints: No constraints specified.
     */
    val losz : Double
        get() {
            val o = __offset(82)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * One sigma uncertainty in the line of sight pointing in micro-radians.
     * Example: /// Example: 1.1
     * Constraints: No constraints specified.
     */
    val losUnc : Double
        get() {
            val o = __offset(84)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Line-of-sight cartesian X velocity of target, in km/sec, in the specified referenceFrame.  If referenceFrame is null then J2K should be assumed.
     * Example: /// Example: 1.1
     * Constraints: No constraints specified.
     */
    val losxvel : Double
        get() {
            val o = __offset(86)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Line-of-sight cartesian Y velocity of target, in km/sec, in the specified referenceFrame.  If referenceFrame is null then J2K should be assumed.
     * Example: /// Example: 1.1
     * Constraints: No constraints specified.
     */
    val losyvel : Double
        get() {
            val o = __offset(88)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Line-of-sight cartesian Z velocity of target, in km/sec, in the specified referenceFrame.  If referenceFrame is null then J2K should be assumed.
     * Example: /// Example: 1.1
     * Constraints: No constraints specified.
     */
    val loszvel : Double
        get() {
            val o = __offset(90)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Sensor WGS84 latitude at obTime (if mobile/onorbit) in degrees. If null, can be obtained from sensor info. -90 to 90 degrees (negative values south of equator).
     * Example: /// Example: 45.1
     * Constraints: No constraints specified.
     */
    val senlat : Double
        get() {
            val o = __offset(92)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Sensor WGS84 longitude at obTime (if mobile/onorbit) in degrees. If null, can be obtained from sensor info. -180 to 180 degrees (negative values west of Prime Meridian).
     * Example: /// Example: 179.1
     * Constraints: No constraints specified.
     */
    val senlon : Double
        get() {
            val o = __offset(94)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Sensor altitude at obTime (if mobile/onorbit) in km.
     * Example: /// Example: 1.1
     * Constraints: No constraints specified.
     */
    val senalt : Double
        get() {
            val o = __offset(96)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Cartesian X position of the observing mobile/onorbit sensor at obTime, in km, in the specified senReferenceFrame.  If senReferenceFrame is null then J2K should be assumed.
     * Example: /// Example: 1.1
     * Constraints: No constraints specified.
     */
    val senx : Double
        get() {
            val o = __offset(98)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Cartesian Y position of the observing mobile/onorbit sensor at obTime, in km, in the specified senReferenceFrame.  If senReferenceFrame is null then J2K should be assumed.
     * Example: /// Example: 1.1
     * Constraints: No constraints specified.
     */
    val seny : Double
        get() {
            val o = __offset(100)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Cartesian Z position of the observing mobile/onorbit sensor at obTime, in km, in the specified senReferenceFrame.  If senReferenceFrame is null then J2K should be assumed.
     * Example: /// Example: 1.1
     * Constraints: No constraints specified.
     */
    val senz : Double
        get() {
            val o = __offset(102)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Cartesian X velocity of the observing mobile/onorbit sensor at obTime, in km/sec, in the specified senReferenceFrame.  If senReferenceFrame is null then J2K should be assumed.
     * Example: /// Example: 1.1
     * Constraints: No constraints specified.
     */
    val senvelx : Double
        get() {
            val o = __offset(104)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Cartesian Y velocity of the observing mobile/onorbit sensor at obTime, in km/sec, in the specified senReferenceFrame.  If senReferenceFrame is null then J2K should be assumed.
     * Example: /// Example: 1.1
     * Constraints: No constraints specified.
     */
    val senvely : Double
        get() {
            val o = __offset(106)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Cartesian Z velocity of the observing mobile/onorbit sensor at obTime, in km/sec, in the specified senReferenceFrame.  If senReferenceFrame is null then J2K should be assumed.
     * Example: /// Example: 1.1
     * Constraints: No constraints specified.
     */
    val senvelz : Double
        get() {
            val o = __offset(108)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * The quaternion describing the rotation of the sensor in relation to the body-fixed frame used for this system into the local geodetic frame, at observation time (obTime). The array element order convention is scalar component first, followed by the three vector components (qc, q1, q2, q3).
     * Example: /// Example: [0.4492, 0.02, 0.8765, 0.2213]
     * Constraints: No constraints specified.
     */
    fun senQuat(j: Int) : String? {
        val o = __offset(110)
        return if (o != 0) {
            __string(__vector(o) + j * 4)
        } else {
            null
        }
    }
    val senQuatLength : Int
        get() {
            val o = __offset(110); return if (o != 0) __vector_len(o) else 0
        }
    /**
     * The number of RSOs detected in the sensor field of view.
     * Example: /// Example: 1
     * Constraints: No constraints specified.
     */
    val fovCount : Int
        get() {
            val o = __offset(112)
            return if(o != 0) bb.getInt(o + bb_pos) else 0
        }
    /**
     * Image exposure duration in seconds.
     * Example: /// Example: 1.1
     * Constraints: No constraints specified.
     */
    val expDuration : Double
        get() {
            val o = __offset(114)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Formula: 2.5 * log_10 (zero_mag_counts / expDuration).
     * Example: /// Example: 1.1
     * Constraints: No constraints specified.
     */
    val zeroptd : Double
        get() {
            val o = __offset(116)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Net object signature = counts / expDuration.
     * Example: /// Example: 1.1
     * Constraints: No constraints specified.
     */
    val netObjSig : Double
        get() {
            val o = __offset(118)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Net object signature uncertainty = counts uncertainty / expDuration.
     * Example: /// Example: 1.1
     * Constraints: No constraints specified.
     */
    val netObjSigUnc : Double
        get() {
            val o = __offset(120)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Calibrated magnitude in units of magnitudes.
     * Example: /// Example: 1.1
     * Constraints: No constraints specified.
     */
    val mag : Double
        get() {
            val o = __offset(122)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Uncertainty of calibrated magnitude in units of magnitudes.
     * Example: /// Example: 1.1
     * Constraints: No constraints specified.
     */
    val magUnc : Double
        get() {
            val o = __offset(124)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Formula: mag - 5.0 * log_10(geo_range / 1000000.0).
     * Example: /// Example: 1.1
     * Constraints: No constraints specified.
     */
    val magNormRange : Double
        get() {
            val o = __offset(126)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * For GEO detections, the latitude in degrees north.
     * Example: /// Example: 1.1
     * Constraints: No constraints specified.
     */
    val geolat : Double
        get() {
            val o = __offset(128)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * For GEO detections, the longitude in degrees east.
     * Example: /// Example: 1.1
     * Constraints: No constraints specified.
     */
    val geolon : Double
        get() {
            val o = __offset(130)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * For GEO detections, the altitude in km.
     * Example: /// Example: 1.1
     * Constraints: No constraints specified.
     */
    val geoalt : Double
        get() {
            val o = __offset(132)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * For GEO detections, the range in km.
     * Example: /// Example: 1.1
     * Constraints: No constraints specified.
     */
    val georange : Double
        get() {
            val o = __offset(134)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Average Sky Background signal, in Magnitudes. Sky Background refers to the incoming light from an apparently empty part of the night sky.
     * Example: /// Example: 1.1
     * Constraints: No constraints specified.
     */
    val skyBkgrnd : Double
        get() {
            val o = __offset(136)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Primary Extinction Coefficient, in Magnitudes. Primary Extinction is the coefficient applied to the airmass to determine how much the observed visual magnitude has been attenuated by the atmosphere. Extinction, in general, describes the absorption and scattering of electromagnetic radiation by dust and gas between an emitting astronomical object and the observer.  See the EOObservationDetails API for specification of extinction coefficients for multiple spectral filters.
     * Example: /// Example: 1.1
     * Constraints: No constraints specified.
     */
    val primaryExtinction : Double
        get() {
            val o = __offset(138)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Primary Extinction Coefficient Uncertainty, in Magnitudes.
     * Example: /// Example: 1.1
     * Constraints: No constraints specified.
     */
    val primaryExtinctionUnc : Double
        get() {
            val o = __offset(140)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * The angle, in degrees, between the target-to-observer vector and the target-to-sun vector.
     * Example: /// Example: 1.1
     * Constraints: No constraints specified.
     */
    val solarPhaseAngle : Double
        get() {
            val o = __offset(142)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * The angle, in degrees, between the projections of the target-to-observer vector and the target-to-sun vector onto the equatorial plane. The angle is represented as negative when closing and positive when opening.
     * Example: /// Example: 1.1
     * Constraints: No constraints specified.
     */
    val solarEqPhaseAngle : Double
        get() {
            val o = __offset(144)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Angle from the sun to the equatorial plane.
     * Example: /// Example: 1.1
     * Constraints: No constraints specified.
     */
    val solarDecAngle : Double
        get() {
            val o = __offset(146)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Shutter delay in seconds.
     * Example: /// Example: 1.1
     * Constraints: No constraints specified.
     */
    val shutterDelay : Double
        get() {
            val o = __offset(148)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Sensor timing bias in seconds.
     * Example: /// Example: 1.1
     * Constraints: No constraints specified.
     */
    val timingBias : Double
        get() {
            val o = __offset(150)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Optional URI location in the document repository of the raw file parsed by the system to produce this record. To download the raw file, prepend https://udl-hostname/scs/download?id= to this value.
     * Example: /// Example: Example URI
     * Constraints: Minimum length = 0, Maximum length = 256
     */
    val rawFileUri : String?
        get() {
            val o = __offset(152)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val rawFileUriAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(152, 1)
    fun rawFileUriInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 152, 1)
    /**
     * Intensity of the target for IR observations, in kw/sr/um.
     * Example: /// Example: 1.1
     * Constraints: No constraints specified.
     */
    val intensity : Double
        get() {
            val o = __offset(154)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Background intensity for IR observations, in kw/sr/um.
     * Example: /// Example: 1.1
     * Constraints: No constraints specified.
     */
    val bgIntensity : Double
        get() {
            val o = __offset(156)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Optional source-provided and searchable metadata or descriptor of the data.
     * Example: /// Example: PROVIDED_DATA1
     * Constraints: Minimum length = 0, Maximum length = 64
     */
    val descriptor : String?
        get() {
            val o = __offset(158)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val descriptorAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(158, 1)
    fun descriptorInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 158, 1)
    /**
     * Source of the data.
     * Example: /// Example: Bluestaq
     * Constraints: Minimum length = 1, Maximum length = 64
     */
    val source : String?
        get() {
            val o = __offset(160)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val sourceAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(160, 1)
    fun sourceInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 160, 1)
    /**
     * Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
     * Example: /// Example: THIRD_PARTY_DATASOURCE
     * Constraints: Minimum length = 0, Maximum length = 64
     */
    val origin : String?
        get() {
            val o = __offset(162)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val originAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(162, 1)
    fun originInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 162, 1)
    /**
     * Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
     * EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
     * REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
     * SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
     * TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
     * Example: /// Example: TEST
     * Constraints: Minimum length = 1, Maximum length = 32
     */
    val dataMode : Byte
        get() {
            val o = __offset(164)
            return if(o != 0) bb.get(o + bb_pos) else 0
        }
    /**
     * Time the row was created in the database, auto-populated by the system.
     * Example: /// Example: 2018-01-01T16:00:00.123Z
     * Constraints: No constraints specified.
     */
    val createdAt : String?
        get() {
            val o = __offset(166)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val createdAtAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(166, 1)
    fun createdAtInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 166, 1)
    /**
     * Application user who created the row in the database, auto-populated by the system.
     * Example: /// Example: some.user
     * Constraints: Minimum length = 1, Maximum length = 64
     */
    val createdBy : String?
        get() {
            val o = __offset(168)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val createdByAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(168, 1)
    fun createdByInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 168, 1)
    /**
     * The reference frame of the EOObservation measurements. If the referenceFrame is null it is assumed to be J2000.
     * Example: /// Example: J2000
     * Constraints: Minimum length = 0, Maximum length = 24
     */
    val referenceFrame : Byte
        get() {
            val o = __offset(170)
            return if(o != 0) bb.get(o + bb_pos) else 0
        }
    /**
     * The reference frame of the observing sensor state. If the senReferenceFrame is null it is assumed to be J2000.
     * Example: /// Example: J2000
     * Constraints: Minimum length = 0, Maximum length = 24
     */
    val senReferenceFrame : Byte
        get() {
            val o = __offset(172)
            return if(o != 0) bb.get(o + bb_pos) else 0
        }
    /**
     * Boolean indicating that the target object was in umbral eclipse at the time of this observation.
     * Example: /// Example: False
     * Constraints: No constraints specified.
     */
    val umbra : Boolean
        get() {
            val o = __offset(174)
            return if(o != 0) 0.toByte() != bb.get(o + bb_pos) else false
        }
    /**
     * Boolean indicating that the target object was in a penumbral eclipse at the time of this observation.
     * Example: /// Example: False
     * Constraints: No constraints specified.
     */
    val penumbra : Boolean
        get() {
            val o = __offset(176)
            return if(o != 0) 0.toByte() != bb.get(o + bb_pos) else false
        }
    /**
     * The originating source network on which this record was created, auto-populated by the system.
     * Example: /// Example: ORIG
     * Constraints: Minimum length = 1, Maximum length = 32
     */
    val origNetwork : String?
        get() {
            val o = __offset(178)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val origNetworkAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(178, 1)
    fun origNetworkInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 178, 1)
    /**
     * The source data library from which this record was received. This could be a remote or tactical UDL or another data library. If null, the record should be assumed to have originated from the primary Enterprise UDL.
     * Example: /// Example: AXE
     * Constraints: Minimum length = 0, Maximum length = 64
     */
    val sourceDl : String?
        get() {
            val o = __offset(180)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val sourceDlAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(180, 1)
    fun sourceDlInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 180, 1)
    /**
     * Read only enumeration specifying the type of observation (e.g. OPTICAL, RADAR, RF, etc).
     * Example: /// Example: OPTICAL
     * Constraints: No constraints specified.
     */
    val type : String?
        get() {
            val o = __offset(182)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val typeAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(182, 1)
    fun typeInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 182, 1)
    companion object {
        fun validateVersion() = Constants.FLATBUFFERS_24_3_25()
        fun getRootAsEOObservation_Abridged(_bb: ByteBuffer): EOObservation_Abridged = getRootAsEOObservation_Abridged(_bb, EOObservation_Abridged())
        fun getRootAsEOObservation_Abridged(_bb: ByteBuffer, obj: EOObservation_Abridged): EOObservation_Abridged {
            _bb.order(ByteOrder.LITTLE_ENDIAN)
            return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb))
        }
        fun EOObservation_AbridgedBufferHasIdentifier(_bb: ByteBuffer) : Boolean = __has_identifier(_bb, "EOOB")
        fun createEOObservation_Abridged(builder: FlatBufferBuilder, idOffset: Int, classificationMarkingOffset: Int, obTimeOffset: Int, corrQuality: Double, idOnOrbitOffset: Int, idSensorOffset: Int, idSkyImageryOffset: Int, collectMethodOffset: Int, satNo: Int, taskIdOffset: Int, transactionIdOffset: Int, trackIdOffset: Int, obPositionOffset: Int, origObjectIdOffset: Int, origSensorIdOffset: Int, uct: Boolean, azimuth: Double, azimuthUnc: Double, azimuthBias: Double, azimuthRate: Double, elevation: Double, elevationUnc: Double, elevationBias: Double, elevationRate: Double, range: Double, rangeUnc: Double, rangeBias: Double, rangeRate: Double, rangeRateUnc: Double, ra: Double, raRate: Double, raUnc: Double, raBias: Double, declination: Double, declinationRate: Double, declinationUnc: Double, declinationBias: Double, losx: Double, losy: Double, losz: Double, losUnc: Double, losxvel: Double, losyvel: Double, loszvel: Double, senlat: Double, senlon: Double, senalt: Double, senx: Double, seny: Double, senz: Double, senvelx: Double, senvely: Double, senvelz: Double, senQuatOffset: Int, fovCount: Int, expDuration: Double, zeroptd: Double, netObjSig: Double, netObjSigUnc: Double, mag: Double, magUnc: Double, magNormRange: Double, geolat: Double, geolon: Double, geoalt: Double, georange: Double, skyBkgrnd: Double, primaryExtinction: Double, primaryExtinctionUnc: Double, solarPhaseAngle: Double, solarEqPhaseAngle: Double, solarDecAngle: Double, shutterDelay: Double, timingBias: Double, rawFileUriOffset: Int, intensity: Double, bgIntensity: Double, descriptorOffset: Int, sourceOffset: Int, originOffset: Int, dataMode: Byte, createdAtOffset: Int, createdByOffset: Int, referenceFrame: Byte, senReferenceFrame: Byte, umbra: Boolean, penumbra: Boolean, origNetworkOffset: Int, sourceDlOffset: Int, typeOffset: Int) : Int {
            builder.startTable(90)
            addBgIntensity(builder, bgIntensity)
            addIntensity(builder, intensity)
            addTimingBias(builder, timingBias)
            addShutterDelay(builder, shutterDelay)
            addSolarDecAngle(builder, solarDecAngle)
            addSolarEqPhaseAngle(builder, solarEqPhaseAngle)
            addSolarPhaseAngle(builder, solarPhaseAngle)
            addPrimaryExtinctionUnc(builder, primaryExtinctionUnc)
            addPrimaryExtinction(builder, primaryExtinction)
            addSkyBkgrnd(builder, skyBkgrnd)
            addGeorange(builder, georange)
            addGeoalt(builder, geoalt)
            addGeolon(builder, geolon)
            addGeolat(builder, geolat)
            addMagNormRange(builder, magNormRange)
            addMagUnc(builder, magUnc)
            addMag(builder, mag)
            addNetObjSigUnc(builder, netObjSigUnc)
            addNetObjSig(builder, netObjSig)
            addZeroptd(builder, zeroptd)
            addExpDuration(builder, expDuration)
            addSenvelz(builder, senvelz)
            addSenvely(builder, senvely)
            addSenvelx(builder, senvelx)
            addSenz(builder, senz)
            addSeny(builder, seny)
            addSenx(builder, senx)
            addSenalt(builder, senalt)
            addSenlon(builder, senlon)
            addSenlat(builder, senlat)
            addLoszvel(builder, loszvel)
            addLosyvel(builder, losyvel)
            addLosxvel(builder, losxvel)
            addLosUnc(builder, losUnc)
            addLosz(builder, losz)
            addLosy(builder, losy)
            addLosx(builder, losx)
            addDeclinationBias(builder, declinationBias)
            addDeclinationUnc(builder, declinationUnc)
            addDeclinationRate(builder, declinationRate)
            addDeclination(builder, declination)
            addRaBias(builder, raBias)
            addRaUnc(builder, raUnc)
            addRaRate(builder, raRate)
            addRa(builder, ra)
            addRangeRateUnc(builder, rangeRateUnc)
            addRangeRate(builder, rangeRate)
            addRangeBias(builder, rangeBias)
            addRangeUnc(builder, rangeUnc)
            addRange(builder, range)
            addElevationRate(builder, elevationRate)
            addElevationBias(builder, elevationBias)
            addElevationUnc(builder, elevationUnc)
            addElevation(builder, elevation)
            addAzimuthRate(builder, azimuthRate)
            addAzimuthBias(builder, azimuthBias)
            addAzimuthUnc(builder, azimuthUnc)
            addAzimuth(builder, azimuth)
            addCorrQuality(builder, corrQuality)
            addType(builder, typeOffset)
            addSourceDL(builder, sourceDlOffset)
            addOrigNetwork(builder, origNetworkOffset)
            addCreatedBy(builder, createdByOffset)
            addCreatedAt(builder, createdAtOffset)
            addOrigin(builder, originOffset)
            addSource(builder, sourceOffset)
            addDescriptor(builder, descriptorOffset)
            addRawFileURI(builder, rawFileUriOffset)
            addFovCount(builder, fovCount)
            addSenQuat(builder, senQuatOffset)
            addOrigSensorId(builder, origSensorIdOffset)
            addOrigObjectId(builder, origObjectIdOffset)
            addObPosition(builder, obPositionOffset)
            addTrackId(builder, trackIdOffset)
            addTransactionId(builder, transactionIdOffset)
            addTaskId(builder, taskIdOffset)
            addSatNo(builder, satNo)
            addCollectMethod(builder, collectMethodOffset)
            addIdSkyImagery(builder, idSkyImageryOffset)
            addIdSensor(builder, idSensorOffset)
            addIdOnOrbit(builder, idOnOrbitOffset)
            addObTime(builder, obTimeOffset)
            addClassificationMarking(builder, classificationMarkingOffset)
            addId(builder, idOffset)
            addPenumbra(builder, penumbra)
            addUmbra(builder, umbra)
            addSenReferenceFrame(builder, senReferenceFrame)
            addReferenceFrame(builder, referenceFrame)
            addDataMode(builder, dataMode)
            addUct(builder, uct)
            return endEOObservation_Abridged(builder)
        }
        fun startEOObservation_Abridged(builder: FlatBufferBuilder) = builder.startTable(90)
        fun addId(builder: FlatBufferBuilder, id: Int) = builder.addOffset(0, id, 0)
        fun addClassificationMarking(builder: FlatBufferBuilder, classificationMarking: Int) = builder.addOffset(1, classificationMarking, 0)
        fun addObTime(builder: FlatBufferBuilder, obTime: Int) = builder.addOffset(2, obTime, 0)
        fun addCorrQuality(builder: FlatBufferBuilder, corrQuality: Double) = builder.addDouble(3, corrQuality, 0.0)
        fun addIdOnOrbit(builder: FlatBufferBuilder, idOnOrbit: Int) = builder.addOffset(4, idOnOrbit, 0)
        fun addIdSensor(builder: FlatBufferBuilder, idSensor: Int) = builder.addOffset(5, idSensor, 0)
        fun addIdSkyImagery(builder: FlatBufferBuilder, idSkyImagery: Int) = builder.addOffset(6, idSkyImagery, 0)
        fun addCollectMethod(builder: FlatBufferBuilder, collectMethod: Int) = builder.addOffset(7, collectMethod, 0)
        fun addSatNo(builder: FlatBufferBuilder, satNo: Int) = builder.addInt(8, satNo, 0)
        fun addTaskId(builder: FlatBufferBuilder, taskId: Int) = builder.addOffset(9, taskId, 0)
        fun addTransactionId(builder: FlatBufferBuilder, transactionId: Int) = builder.addOffset(10, transactionId, 0)
        fun addTrackId(builder: FlatBufferBuilder, trackId: Int) = builder.addOffset(11, trackId, 0)
        fun addObPosition(builder: FlatBufferBuilder, obPosition: Int) = builder.addOffset(12, obPosition, 0)
        fun addOrigObjectId(builder: FlatBufferBuilder, origObjectId: Int) = builder.addOffset(13, origObjectId, 0)
        fun addOrigSensorId(builder: FlatBufferBuilder, origSensorId: Int) = builder.addOffset(14, origSensorId, 0)
        fun addUct(builder: FlatBufferBuilder, uct: Boolean) = builder.addBoolean(15, uct, false)
        fun addAzimuth(builder: FlatBufferBuilder, azimuth: Double) = builder.addDouble(16, azimuth, 0.0)
        fun addAzimuthUnc(builder: FlatBufferBuilder, azimuthUnc: Double) = builder.addDouble(17, azimuthUnc, 0.0)
        fun addAzimuthBias(builder: FlatBufferBuilder, azimuthBias: Double) = builder.addDouble(18, azimuthBias, 0.0)
        fun addAzimuthRate(builder: FlatBufferBuilder, azimuthRate: Double) = builder.addDouble(19, azimuthRate, 0.0)
        fun addElevation(builder: FlatBufferBuilder, elevation: Double) = builder.addDouble(20, elevation, 0.0)
        fun addElevationUnc(builder: FlatBufferBuilder, elevationUnc: Double) = builder.addDouble(21, elevationUnc, 0.0)
        fun addElevationBias(builder: FlatBufferBuilder, elevationBias: Double) = builder.addDouble(22, elevationBias, 0.0)
        fun addElevationRate(builder: FlatBufferBuilder, elevationRate: Double) = builder.addDouble(23, elevationRate, 0.0)
        fun addRange(builder: FlatBufferBuilder, range: Double) = builder.addDouble(24, range, 0.0)
        fun addRangeUnc(builder: FlatBufferBuilder, rangeUnc: Double) = builder.addDouble(25, rangeUnc, 0.0)
        fun addRangeBias(builder: FlatBufferBuilder, rangeBias: Double) = builder.addDouble(26, rangeBias, 0.0)
        fun addRangeRate(builder: FlatBufferBuilder, rangeRate: Double) = builder.addDouble(27, rangeRate, 0.0)
        fun addRangeRateUnc(builder: FlatBufferBuilder, rangeRateUnc: Double) = builder.addDouble(28, rangeRateUnc, 0.0)
        fun addRa(builder: FlatBufferBuilder, ra: Double) = builder.addDouble(29, ra, 0.0)
        fun addRaRate(builder: FlatBufferBuilder, raRate: Double) = builder.addDouble(30, raRate, 0.0)
        fun addRaUnc(builder: FlatBufferBuilder, raUnc: Double) = builder.addDouble(31, raUnc, 0.0)
        fun addRaBias(builder: FlatBufferBuilder, raBias: Double) = builder.addDouble(32, raBias, 0.0)
        fun addDeclination(builder: FlatBufferBuilder, declination: Double) = builder.addDouble(33, declination, 0.0)
        fun addDeclinationRate(builder: FlatBufferBuilder, declinationRate: Double) = builder.addDouble(34, declinationRate, 0.0)
        fun addDeclinationUnc(builder: FlatBufferBuilder, declinationUnc: Double) = builder.addDouble(35, declinationUnc, 0.0)
        fun addDeclinationBias(builder: FlatBufferBuilder, declinationBias: Double) = builder.addDouble(36, declinationBias, 0.0)
        fun addLosx(builder: FlatBufferBuilder, losx: Double) = builder.addDouble(37, losx, 0.0)
        fun addLosy(builder: FlatBufferBuilder, losy: Double) = builder.addDouble(38, losy, 0.0)
        fun addLosz(builder: FlatBufferBuilder, losz: Double) = builder.addDouble(39, losz, 0.0)
        fun addLosUnc(builder: FlatBufferBuilder, losUnc: Double) = builder.addDouble(40, losUnc, 0.0)
        fun addLosxvel(builder: FlatBufferBuilder, losxvel: Double) = builder.addDouble(41, losxvel, 0.0)
        fun addLosyvel(builder: FlatBufferBuilder, losyvel: Double) = builder.addDouble(42, losyvel, 0.0)
        fun addLoszvel(builder: FlatBufferBuilder, loszvel: Double) = builder.addDouble(43, loszvel, 0.0)
        fun addSenlat(builder: FlatBufferBuilder, senlat: Double) = builder.addDouble(44, senlat, 0.0)
        fun addSenlon(builder: FlatBufferBuilder, senlon: Double) = builder.addDouble(45, senlon, 0.0)
        fun addSenalt(builder: FlatBufferBuilder, senalt: Double) = builder.addDouble(46, senalt, 0.0)
        fun addSenx(builder: FlatBufferBuilder, senx: Double) = builder.addDouble(47, senx, 0.0)
        fun addSeny(builder: FlatBufferBuilder, seny: Double) = builder.addDouble(48, seny, 0.0)
        fun addSenz(builder: FlatBufferBuilder, senz: Double) = builder.addDouble(49, senz, 0.0)
        fun addSenvelx(builder: FlatBufferBuilder, senvelx: Double) = builder.addDouble(50, senvelx, 0.0)
        fun addSenvely(builder: FlatBufferBuilder, senvely: Double) = builder.addDouble(51, senvely, 0.0)
        fun addSenvelz(builder: FlatBufferBuilder, senvelz: Double) = builder.addDouble(52, senvelz, 0.0)
        fun addSenQuat(builder: FlatBufferBuilder, senQuat: Int) = builder.addOffset(53, senQuat, 0)
        fun createSenQuatVector(builder: FlatBufferBuilder, data: IntArray) : Int {
            builder.startVector(4, data.size, 4)
            for (i in data.size - 1 downTo 0) {
                builder.addOffset(data[i])
            }
            return builder.endVector()
        }
        fun startSenQuatVector(builder: FlatBufferBuilder, numElems: Int) = builder.startVector(4, numElems, 4)
        fun addFovCount(builder: FlatBufferBuilder, fovCount: Int) = builder.addInt(54, fovCount, 0)
        fun addExpDuration(builder: FlatBufferBuilder, expDuration: Double) = builder.addDouble(55, expDuration, 0.0)
        fun addZeroptd(builder: FlatBufferBuilder, zeroptd: Double) = builder.addDouble(56, zeroptd, 0.0)
        fun addNetObjSig(builder: FlatBufferBuilder, netObjSig: Double) = builder.addDouble(57, netObjSig, 0.0)
        fun addNetObjSigUnc(builder: FlatBufferBuilder, netObjSigUnc: Double) = builder.addDouble(58, netObjSigUnc, 0.0)
        fun addMag(builder: FlatBufferBuilder, mag: Double) = builder.addDouble(59, mag, 0.0)
        fun addMagUnc(builder: FlatBufferBuilder, magUnc: Double) = builder.addDouble(60, magUnc, 0.0)
        fun addMagNormRange(builder: FlatBufferBuilder, magNormRange: Double) = builder.addDouble(61, magNormRange, 0.0)
        fun addGeolat(builder: FlatBufferBuilder, geolat: Double) = builder.addDouble(62, geolat, 0.0)
        fun addGeolon(builder: FlatBufferBuilder, geolon: Double) = builder.addDouble(63, geolon, 0.0)
        fun addGeoalt(builder: FlatBufferBuilder, geoalt: Double) = builder.addDouble(64, geoalt, 0.0)
        fun addGeorange(builder: FlatBufferBuilder, georange: Double) = builder.addDouble(65, georange, 0.0)
        fun addSkyBkgrnd(builder: FlatBufferBuilder, skyBkgrnd: Double) = builder.addDouble(66, skyBkgrnd, 0.0)
        fun addPrimaryExtinction(builder: FlatBufferBuilder, primaryExtinction: Double) = builder.addDouble(67, primaryExtinction, 0.0)
        fun addPrimaryExtinctionUnc(builder: FlatBufferBuilder, primaryExtinctionUnc: Double) = builder.addDouble(68, primaryExtinctionUnc, 0.0)
        fun addSolarPhaseAngle(builder: FlatBufferBuilder, solarPhaseAngle: Double) = builder.addDouble(69, solarPhaseAngle, 0.0)
        fun addSolarEqPhaseAngle(builder: FlatBufferBuilder, solarEqPhaseAngle: Double) = builder.addDouble(70, solarEqPhaseAngle, 0.0)
        fun addSolarDecAngle(builder: FlatBufferBuilder, solarDecAngle: Double) = builder.addDouble(71, solarDecAngle, 0.0)
        fun addShutterDelay(builder: FlatBufferBuilder, shutterDelay: Double) = builder.addDouble(72, shutterDelay, 0.0)
        fun addTimingBias(builder: FlatBufferBuilder, timingBias: Double) = builder.addDouble(73, timingBias, 0.0)
        fun addRawFileURI(builder: FlatBufferBuilder, rawFileUri: Int) = builder.addOffset(74, rawFileUri, 0)
        fun addIntensity(builder: FlatBufferBuilder, intensity: Double) = builder.addDouble(75, intensity, 0.0)
        fun addBgIntensity(builder: FlatBufferBuilder, bgIntensity: Double) = builder.addDouble(76, bgIntensity, 0.0)
        fun addDescriptor(builder: FlatBufferBuilder, descriptor: Int) = builder.addOffset(77, descriptor, 0)
        fun addSource(builder: FlatBufferBuilder, source: Int) = builder.addOffset(78, source, 0)
        fun addOrigin(builder: FlatBufferBuilder, origin: Int) = builder.addOffset(79, origin, 0)
        fun addDataMode(builder: FlatBufferBuilder, dataMode: Byte) = builder.addByte(80, dataMode, 0)
        fun addCreatedAt(builder: FlatBufferBuilder, createdAt: Int) = builder.addOffset(81, createdAt, 0)
        fun addCreatedBy(builder: FlatBufferBuilder, createdBy: Int) = builder.addOffset(82, createdBy, 0)
        fun addReferenceFrame(builder: FlatBufferBuilder, referenceFrame: Byte) = builder.addByte(83, referenceFrame, 0)
        fun addSenReferenceFrame(builder: FlatBufferBuilder, senReferenceFrame: Byte) = builder.addByte(84, senReferenceFrame, 0)
        fun addUmbra(builder: FlatBufferBuilder, umbra: Boolean) = builder.addBoolean(85, umbra, false)
        fun addPenumbra(builder: FlatBufferBuilder, penumbra: Boolean) = builder.addBoolean(86, penumbra, false)
        fun addOrigNetwork(builder: FlatBufferBuilder, origNetwork: Int) = builder.addOffset(87, origNetwork, 0)
        fun addSourceDL(builder: FlatBufferBuilder, sourceDl: Int) = builder.addOffset(88, sourceDl, 0)
        fun addType(builder: FlatBufferBuilder, type: Int) = builder.addOffset(89, type, 0)
        fun endEOObservation_Abridged(builder: FlatBufferBuilder) : Int {
            val o = builder.endTable()
            return o
        }
        fun finishEOObservationAbridgedBuffer(builder: FlatBufferBuilder, offset: Int) = builder.finish(offset, "EOOB")
        fun finishSizePrefixedEOObservation_AbridgedBuffer(builder: FlatBufferBuilder, offset: Int) = builder.finishSizePrefixed(offset, "EOOB")
    }
}
