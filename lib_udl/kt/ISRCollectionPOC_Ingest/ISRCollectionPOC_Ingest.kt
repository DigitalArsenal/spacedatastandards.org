// automatically generated by the FlatBuffers compiler, do not modify

import com.google.flatbuffers.BaseVector
import com.google.flatbuffers.BooleanVector
import com.google.flatbuffers.ByteVector
import com.google.flatbuffers.Constants
import com.google.flatbuffers.DoubleVector
import com.google.flatbuffers.FlatBufferBuilder
import com.google.flatbuffers.FloatVector
import com.google.flatbuffers.LongVector
import com.google.flatbuffers.StringVector
import com.google.flatbuffers.Struct
import com.google.flatbuffers.Table
import com.google.flatbuffers.UnionVector
import java.nio.ByteBuffer
import java.nio.ByteOrder
import kotlin.math.sign

/**
 * /// Information about the Point of Contact (POC) for this ISR Collection.
 */
@Suppress("unused")
class ISRCollectionPOC_Ingest : Table() {

    fun __init(_i: Int, _bb: ByteBuffer)  {
        __reset(_i, _bb)
    }
    fun __assign(_i: Int, _bb: ByteBuffer) : ISRCollectionPOC_Ingest {
        __init(_i, _bb)
        return this
    }
    /**
     * Unique identifier of the collection requirement POC.
     * Example: /// Example: ISRCOLLECTIONPOC-ID
     * Constraints: Minimum length = 0, Maximum length = 36
     */
    val id : String?
        get() {
            val o = __offset(4)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val idAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(4, 1)
    fun idInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 4, 1)
    /**
     * Name of the POC.
     * Example: /// Example: NAME
     * Constraints: Minimum length = 0, Maximum length = 128
     */
    val name : String?
        get() {
            val o = __offset(6)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val nameAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(6, 1)
    fun nameInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 6, 1)
    /**
     * Callsign of the POC.
     * Example: /// Example: CALLSIGN
     * Constraints: Minimum length = 0, Maximum length = 32
     */
    val callsign : String?
        get() {
            val o = __offset(8)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val callsignAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(8, 1)
    fun callsignInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 8, 1)
    /**
     * Unit the POC belongs to.
     * Example: /// Example: UNIT
     * Constraints: Minimum length = 0, Maximum length = 32
     */
    val unit : String?
        get() {
            val o = __offset(10)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val unitAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(10, 1)
    fun unitInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 10, 1)
    /**
     * Email address of the POC.
     * Example: /// Example: EMAIL
     * Constraints: Minimum length = 0, Maximum length = 128
     */
    val email : String?
        get() {
            val o = __offset(12)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val emailAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(12, 1)
    fun emailInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 12, 1)
    /**
     * Phone number of the POC.
     * Example: /// Example: PHONE
     * Constraints: Minimum length = 0, Maximum length = 45
     */
    val phone : String?
        get() {
            val o = __offset(14)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val phoneAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(14, 1)
    fun phoneInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 14, 1)
    /**
     * Radio Frequency the POC is on.
     * Example: /// Example: 123.23
     * Constraints: No constraints specified.
     */
    val radioFrequency : Double
        get() {
            val o = __offset(16)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Chat system the POC is accessing.
     * Example: /// Example: CHAT
     * Constraints: Minimum length = 0, Maximum length = 32
     */
    val chatSystem : String?
        get() {
            val o = __offset(18)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val chatSystemAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(18, 1)
    fun chatSystemInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 18, 1)
    /**
     * Chat name of the POC.
     * Example: /// Example: CHAT_NAME
     * Constraints: Minimum length = 0, Maximum length = 32
     */
    val chatName : String?
        get() {
            val o = __offset(20)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val chatNameAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(20, 1)
    fun chatNameInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 20, 1)
    /**
     * Amplifying notes about the POC.
     * Example: /// Example: NOTES
     * Constraints: Minimum length = 0, Maximum length = 256
     */
    val notes : String?
        get() {
            val o = __offset(22)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val notesAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(22, 1)
    fun notesInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 22, 1)
    companion object {
        fun validateVersion() = Constants.FLATBUFFERS_24_3_25()
        fun getRootAsISRCollectionPOC_Ingest(_bb: ByteBuffer): ISRCollectionPOC_Ingest = getRootAsISRCollectionPOC_Ingest(_bb, ISRCollectionPOC_Ingest())
        fun getRootAsISRCollectionPOC_Ingest(_bb: ByteBuffer, obj: ISRCollectionPOC_Ingest): ISRCollectionPOC_Ingest {
            _bb.order(ByteOrder.LITTLE_ENDIAN)
            return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb))
        }
        fun ISRCollectionPOC_IngestBufferHasIdentifier(_bb: ByteBuffer) : Boolean = __has_identifier(_bb, "ISRC")
        fun createISRCollectionPOC_Ingest(builder: FlatBufferBuilder, idOffset: Int, nameOffset: Int, callsignOffset: Int, unitOffset: Int, emailOffset: Int, phoneOffset: Int, radioFrequency: Double, chatSystemOffset: Int, chatNameOffset: Int, notesOffset: Int) : Int {
            builder.startTable(10)
            addRadioFrequency(builder, radioFrequency)
            addNotes(builder, notesOffset)
            addChatName(builder, chatNameOffset)
            addChatSystem(builder, chatSystemOffset)
            addPhone(builder, phoneOffset)
            addEmail(builder, emailOffset)
            addUnit(builder, unitOffset)
            addCallsign(builder, callsignOffset)
            addName(builder, nameOffset)
            addId(builder, idOffset)
            return endISRCollectionPOC_Ingest(builder)
        }
        fun startISRCollectionPOC_Ingest(builder: FlatBufferBuilder) = builder.startTable(10)
        fun addId(builder: FlatBufferBuilder, id: Int) = builder.addOffset(0, id, 0)
        fun addName(builder: FlatBufferBuilder, name: Int) = builder.addOffset(1, name, 0)
        fun addCallsign(builder: FlatBufferBuilder, callsign: Int) = builder.addOffset(2, callsign, 0)
        fun addUnit(builder: FlatBufferBuilder, unit: Int) = builder.addOffset(3, unit, 0)
        fun addEmail(builder: FlatBufferBuilder, email: Int) = builder.addOffset(4, email, 0)
        fun addPhone(builder: FlatBufferBuilder, phone: Int) = builder.addOffset(5, phone, 0)
        fun addRadioFrequency(builder: FlatBufferBuilder, radioFrequency: Double) = builder.addDouble(6, radioFrequency, 0.0)
        fun addChatSystem(builder: FlatBufferBuilder, chatSystem: Int) = builder.addOffset(7, chatSystem, 0)
        fun addChatName(builder: FlatBufferBuilder, chatName: Int) = builder.addOffset(8, chatName, 0)
        fun addNotes(builder: FlatBufferBuilder, notes: Int) = builder.addOffset(9, notes, 0)
        fun endISRCollectionPOC_Ingest(builder: FlatBufferBuilder) : Int {
            val o = builder.endTable()
            return o
        }
        fun finishISRCollectionPOCIngestBuffer(builder: FlatBufferBuilder, offset: Int) = builder.finish(offset, "ISRC")
        fun finishSizePrefixedISRCollectionPOC_IngestBuffer(builder: FlatBufferBuilder, offset: Int) = builder.finishSizePrefixed(offset, "ISRC")
    }
}
