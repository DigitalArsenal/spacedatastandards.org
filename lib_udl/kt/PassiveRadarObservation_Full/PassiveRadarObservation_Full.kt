// automatically generated by the FlatBuffers compiler, do not modify

import com.google.flatbuffers.BaseVector
import com.google.flatbuffers.BooleanVector
import com.google.flatbuffers.ByteVector
import com.google.flatbuffers.Constants
import com.google.flatbuffers.DoubleVector
import com.google.flatbuffers.FlatBufferBuilder
import com.google.flatbuffers.FloatVector
import com.google.flatbuffers.LongVector
import com.google.flatbuffers.StringVector
import com.google.flatbuffers.Struct
import com.google.flatbuffers.Table
import com.google.flatbuffers.UnionVector
import java.nio.ByteBuffer
import java.nio.ByteOrder
import kotlin.math.sign

/**
 * /// Model representation of observation data for passive radar based sensor phenomenologies. Passive radar is a form of radar that instead of using a dedicated transmitter, as is the case for traditional radar, utilizes radio frequency (RF) energy already in the environment. With an abundance of existing energy available from geographically diverse sources, passive radar offers wide field of view coverage and long observation times. A passive radar system is comprised of separately located transmitter (for example, FM radio stations), a reference receiver, and a surveillance sensor. The transmitted signal illuminates multiple targets over a broad angular extent as well as providing a signal at the reference site. The reflected energy is received at the surveillance site for processing with the reference signal. The long observation durations that are possible with this technology enables an accurate orbit to be determined within a single pass.
 */
@Suppress("unused")
class PassiveRadarObservation_Full : Table() {

    fun __init(_i: Int, _bb: ByteBuffer)  {
        __reset(_i, _bb)
    }
    fun __assign(_i: Int, _bb: ByteBuffer) : PassiveRadarObservation_Full {
        __init(_i, _bb)
        return this
    }
    /**
     * Unique identifier of the record, auto-generated by the system.
     * Example: /// Example: bdcacfb0-3c47-4bd0-9d6c-9fa7d2c4fbb0
     * Constraints: Minimum length = 1, Maximum length = 36
     */
    val id : String?
        get() {
            val o = __offset(4)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val idAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(4, 1)
    fun idInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 4, 1)
    /**
     * Classification marking of the data in IC/CAPCO Portion-marked format.
     * Example: /// Example: U
     * Constraints: Minimum length = 1, Maximum length = 128
     */
    val classificationMarking : String?
        get() {
            val o = __offset(6)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val classificationMarkingAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(6, 1)
    fun classificationMarkingInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 6, 1)
    /**
     * Ob detection time in ISO 8601 UTC with microsecond precision.
     * Example: /// Example: 2023-01-24T23:35:26.518152Z
     * Constraints: No constraints specified.
     */
    val obTime : String?
        get() {
            val o = __offset(8)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val obTimeAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(8, 1)
    fun obTimeInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 8, 1)
    /**
     * Unique identifier of the target satellite on-orbit object. This ID can be used to obtain additional information on an OnOrbit object using the 'get by ID' operation (e.g. /udl/onorbit/{id}). For example, the OnOrbit with idOnOrbit = 25544 would be queried as /udl/onorbit/25544.
     * Example: /// Example: 40699
     * Constraints: Minimum length = 0, Maximum length = 36
     */
    val idOnOrbit : String?
        get() {
            val o = __offset(10)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val idOnOrbitAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(10, 1)
    fun idOnOrbitInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 10, 1)
    /**
     * Satellite/Catalog number of the target on-orbit object.
     * Example: /// Example: 40699
     * Constraints: No constraints specified.
     */
    val satNo : Int
        get() {
            val o = __offset(12)
            return if(o != 0) bb.getInt(o + bb_pos) else 0
        }
    /**
     * Optional identifier provided by observation source to indicate the target onorbit object of this observation. This may be an internal identifier and not necessarily a valid satellite number.
     * Example: /// Example: ORIGOBJECT-ID
     * Constraints: Minimum length = 0, Maximum length = 64
     */
    val origObjectId : String?
        get() {
            val o = __offset(14)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val origObjectIdAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(14, 1)
    fun origObjectIdInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 14, 1)
    /**
     * Unique identifier of the reporting surveillance sensor. This ID can be used to obtain additional information on a sensor using the 'get by ID' operation (e.g. /udl/sensor/{id}). For example, the sensor with idSensor = abc would be queried as /udl/sensor/abc.
     * Example: /// Example: OCULUSA
     * Constraints: Minimum length = 0, Maximum length = 36
     */
    val idSensor : String?
        get() {
            val o = __offset(16)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val idSensorAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(16, 1)
    fun idSensorInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 16, 1)
    /**
     * Optional identifier provided by observation source to indicate the sensor identifier which produced this observation. This may be an internal identifier and not necessarily a valid sensor ID.
     * Example: /// Example: ORIGSENSOR-ID
     * Constraints: Minimum length = 0, Maximum length = 64
     */
    val origSensorId : String?
        get() {
            val o = __offset(18)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val origSensorIdAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(18, 1)
    fun origSensorIdInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 18, 1)
    /**
     * Unique identifier of the transmitter. This ID can be used to obtain additional information on an RFEmitter using the 'get by ID' operation (e.g. /udl/rfemitter/{id}). For example, the RFEmitter with idRFEmitter = abc would be queried as /udl/rfemitter/abc.
     * Example: /// Example: RED_CLIFFS_3ABCRN
     * Constraints: Minimum length = 0, Maximum length = 36
     */
    val idRfemitter : String?
        get() {
            val o = __offset(20)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val idRfemitterAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(20, 1)
    fun idRfemitterInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 20, 1)
    /**
     * Unique identifier of the reference receiver sensor. This ID can be used to obtain additional information on a sensor using the 'get by ID' operation (e.g. /udl/sensor/{id}). For example, the sensor with idSensor = abc would be queried as /udl/sensor/abc.
     * Example: /// Example: OculusRef1
     * Constraints: Minimum length = 0, Maximum length = 36
     */
    val idSensorRefReceiver : String?
        get() {
            val o = __offset(22)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val idSensorRefReceiverAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(22, 1)
    fun idSensorRefReceiverInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 22, 1)
    /**
     * Optional external observation identifier provided by the source.
     * Example: /// Example: 26892
     * Constraints: Minimum length = 0, Maximum length = 36
     */
    val extObservationId : String?
        get() {
            val o = __offset(24)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val extObservationIdAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(24, 1)
    fun extObservationIdInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 24, 1)
    /**
     * Optional identifier to indicate the specific tasking which produced this observation.
     * Example: /// Example: TASK-ID
     * Constraints: Minimum length = 0, Maximum length = 36
     */
    val taskId : String?
        get() {
            val o = __offset(26)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val taskIdAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(26, 1)
    fun taskIdInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 26, 1)
    /**
     * Unique identifier of a track that represents a tracklet for this observation.
     * Example: /// Example: 12212
     * Constraints: Minimum length = 0, Maximum length = 36
     */
    val trackId : String?
        get() {
            val o = __offset(28)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val trackIdAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(28, 1)
    fun trackIdInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 28, 1)
    /**
     * The position of this observation within a track (FENCE, FIRST, IN, LAST, SINGLE).  This identifier is optional and, if null, no assumption should be made regarding whether other observations may or may not exist to compose a track.
     * Example: /// Example: FIRST
     * Constraints: Minimum length = 0, Maximum length = 8
     */
    val obPosition : String?
        get() {
            val o = __offset(30)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val obPositionAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(30, 1)
    fun obPositionInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 30, 1)
    /**
     * Boolean indicating this observation is part of an uncorrelated track or was unable to be correlated to a known object. This flag should only be set to true by data providers after an attempt to correlate to an on-orbit object was made and failed. If unable to correlate, the 'origObjectId' field may be populated with an internal data provider specific identifier.
     * Example: /// Example: False
     * Constraints: No constraints specified.
     */
    val uct : Boolean
        get() {
            val o = __offset(32)
            return if(o != 0) 0.toByte() != bb.get(o + bb_pos) else false
        }
    /**
     * Line of sight azimuth angle in degrees and topocentric frame.
     * Example: /// Example: 134.5
     * Constraints: No constraints specified.
     */
    val azimuth : Double
        get() {
            val o = __offset(34)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * One sigma uncertainty in the line of sight azimuth angle measurement, in degrees.
     * Example: /// Example: 0.5
     * Constraints: No constraints specified.
     */
    val azimuthUnc : Double
        get() {
            val o = __offset(36)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Sensor azimuth angle bias in degrees.
     * Example: /// Example: 0.123
     * Constraints: No constraints specified.
     */
    val azimuthBias : Double
        get() {
            val o = __offset(38)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Rate of change of the line of sight azimuth in degrees per second.
     * Example: /// Example: 0.5
     * Constraints: No constraints specified.
     */
    val azimuthRate : Double
        get() {
            val o = __offset(40)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Line of sight elevation in degrees and topocentric frame.
     * Example: /// Example: 76.1
     * Constraints: No constraints specified.
     */
    val elevation : Double
        get() {
            val o = __offset(42)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * One sigma uncertainty in the line of sight elevation angle measurement, in degrees.
     * Example: /// Example: 0.5
     * Constraints: No constraints specified.
     */
    val elevationUnc : Double
        get() {
            val o = __offset(44)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Sensor elevation bias in degrees.
     * Example: /// Example: 0.123
     * Constraints: No constraints specified.
     */
    val elevationBias : Double
        get() {
            val o = __offset(46)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Rate of change of the line of sight elevation in degrees per second.
     * Example: /// Example: 0.5
     * Constraints: No constraints specified.
     */
    val elevationRate : Double
        get() {
            val o = __offset(48)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * The time difference, in seconds, between the signal collected at the surveillance site (after being reflected from the target) and the reference site (direct path line-of-sight signal).
     * Example: /// Example: 0.00505820232809312
     * Constraints: No constraints specified.
     */
    val delay : Double
        get() {
            val o = __offset(50)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * One sigma uncertainty in the delay measurement, in seconds.
     * Example: /// Example: 3.1e-06
     * Constraints: No constraints specified.
     */
    val delayUnc : Double
        get() {
            val o = __offset(52)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Delay bias in seconds.
     * Example: /// Example: 1.23e-06
     * Constraints: No constraints specified.
     */
    val delayBias : Double
        get() {
            val o = __offset(54)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Target bistatic path distance in kilometers. This is the transmitter-to-target-to-surveillance site distance.
     * Example: /// Example: 754.8212
     * Constraints: No constraints specified.
     */
    val bistaticRange : Double
        get() {
            val o = __offset(56)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * One sigma uncertainty in bistatic range in kilometers.
     * Example: /// Example: 5.1
     * Constraints: No constraints specified.
     */
    val bistaticRangeUnc : Double
        get() {
            val o = __offset(58)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Sensor bistatic range bias in kilometers.
     * Example: /// Example: 2.34
     * Constraints: No constraints specified.
     */
    val bistaticRangeBias : Double
        get() {
            val o = __offset(60)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Rate of change of the bistatic path in kilometers/sec.
     * Example: /// Example: -0.30222
     * Constraints: No constraints specified.
     */
    val bistaticRangeRate : Double
        get() {
            val o = __offset(62)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * One sigma uncertainty in rate of change of the bistatic path in kilometers/sec.
     * Example: /// Example: 0.123
     * Constraints: No constraints specified.
     */
    val bistaticRangeRateUnc : Double
        get() {
            val o = __offset(64)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Bistatic range acceleration in kilometers/sec^2.
     * Example: /// Example: 1.23
     * Constraints: No constraints specified.
     */
    val bistaticRangeAccel : Double
        get() {
            val o = __offset(66)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * One sigma uncertainty in the bistatic range acceleration measurement, in kilometers/sec^2.
     * Example: /// Example: 0.1
     * Constraints: No constraints specified.
     */
    val bistaticRangeAccelUnc : Double
        get() {
            val o = __offset(68)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Doppler measurement in hertz.
     * Example: /// Example: -101.781641000597
     * Constraints: No constraints specified.
     */
    val doppler : Double
        get() {
            val o = __offset(70)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * One sigma uncertainty in the Doppler measurement in hertz.
     * Example: /// Example: 0.2
     * Constraints: No constraints specified.
     */
    val dopplerUnc : Double
        get() {
            val o = __offset(72)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Coning angle in degrees.
     * Example: /// Example: 60.1
     * Constraints: No constraints specified.
     */
    val coning : Double
        get() {
            val o = __offset(74)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * One sigma uncertainty in the coning angle measurement, in degrees.
     * Example: /// Example: 0.5
     * Constraints: No constraints specified.
     */
    val coningUnc : Double
        get() {
            val o = __offset(76)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Time of flight (TOF) in seconds. This is the calculated propagation time from transmitter-to-target-to-surveillance site.
     * Example: /// Example: 0.00592856674135648
     * Constraints: No constraints specified.
     */
    val tof : Double
        get() {
            val o = __offset(78)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * One sigma uncertainty in time of flight in seconds.
     * Example: /// Example: 3.1e-06
     * Constraints: No constraints specified.
     */
    val tofUnc : Double
        get() {
            val o = __offset(80)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * The Time of Flight (TOF) bias in seconds.
     * Example: /// Example: 1.23e-06
     * Constraints: No constraints specified.
     */
    val tofBias : Double
        get() {
            val o = __offset(82)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * The target Acceleration measurement in kilometers/sec^2 for this observation.
     * Example: /// Example: 1.23
     * Constraints: No constraints specified.
     */
    val accel : Double
        get() {
            val o = __offset(84)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * The target Acceleration uncertainty measurement in kilometers/sec^2 for this observation.
     * Example: /// Example: 0.1
     * Constraints: No constraints specified.
     */
    val accelUnc : Double
        get() {
            val o = __offset(86)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Line of sight right ascension in degrees and J2000 coordinate frame.
     * Example: /// Example: 1.23
     * Constraints: No constraints specified.
     */
    val ra : Double
        get() {
            val o = __offset(88)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Line of sight declination angle in degrees and J2000 coordinate frame.
     * Example: /// Example: 10.23
     * Constraints: No constraints specified.
     */
    val declination : Double
        get() {
            val o = __offset(90)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * WGS-84 target latitude sub-point at observation time (obTime), represented as -90 to 90 degrees (negative values south of equator).
     * Example: /// Example: -35.1181763996856
     * Constraints: No constraints specified.
     */
    val lat : Double
        get() {
            val o = __offset(92)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * WGS-84 target longitude sub-point at observation time (obTime), represented as -180 to 180 degrees (negative values west of Prime Meridian).
     * Example: /// Example: 139.613567052763
     * Constraints: No constraints specified.
     */
    val lon : Double
        get() {
            val o = __offset(94)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * The target altitude relative to WGS-84 ellipsoid, in kilometers for this observation.
     * Example: /// Example: 478.056378
     * Constraints: No constraints specified.
     */
    val alt : Double
        get() {
            val o = __offset(96)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * X velocity of target in kilometers/sec in J2000 coordinate frame.
     * Example: /// Example: 1.23
     * Constraints: No constraints specified.
     */
    val xvel : Double
        get() {
            val o = __offset(98)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Y velocity of target in kilometers/sec in J2000 coordinate frame.
     * Example: /// Example: 3.21
     * Constraints: No constraints specified.
     */
    val yvel : Double
        get() {
            val o = __offset(100)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Z velocity of target in kilometers/sec in J2000 coordinate frame.
     * Example: /// Example: 3.12
     * Constraints: No constraints specified.
     */
    val zvel : Double
        get() {
            val o = __offset(102)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Radar cross section in meters squared for polarization principal.
     * Example: /// Example: 100.23
     * Constraints: No constraints specified.
     */
    val rcs : Double
        get() {
            val o = __offset(104)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * One sigma uncertainty in principal polarization Radar Cross Section, in meters^2.
     * Example: /// Example: 1.23
     * Constraints: No constraints specified.
     */
    val rcsUnc : Double
        get() {
            val o = __offset(106)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Radar cross section in meters squared for orthogonal polarization.
     * Example: /// Example: 10.23
     * Constraints: No constraints specified.
     */
    val orthogonalRcs : Double
        get() {
            val o = __offset(108)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * One sigma uncertainty in orthogonal polarization Radar Cross Section, in meters^2.
     * Example: /// Example: 1.23
     * Constraints: No constraints specified.
     */
    val orthogonalRcsUnc : Double
        get() {
            val o = __offset(110)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Signal to noise ratio, in dB.
     * Example: /// Example: 17.292053
     * Constraints: No constraints specified.
     */
    val snr : Double
        get() {
            val o = __offset(112)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Sensor timing bias in seconds.
     * Example: /// Example: 1.23
     * Constraints: No constraints specified.
     */
    val timingBias : Double
        get() {
            val o = __offset(114)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Optional array of provider/source specific tags for this data, where each element is no longer than 32 characters, used for implementing data owner conditional access controls to restrict access to the data. Should be left null by data providers unless conditional access controls are coordinated with the UDL team.
     * Example: /// Example: ['TAG1', 'TAG2']
     * Constraints: No constraints specified.
     */
    fun tags(j: Int) : String? {
        val o = __offset(116)
        return if (o != 0) {
            __string(__vector(o) + j * 4)
        } else {
            null
        }
    }
    val tagsLength : Int
        get() {
            val o = __offset(116); return if (o != 0) __vector_len(o) else 0
        }
    /**
     * Optional identifier to track a commercial or marketplace transaction executed to produce this data.
     * Example: /// Example: TRANSACTION-ID
     * Constraints: Minimum length = 0, Maximum length = 64
     */
    val transactionId : String?
        get() {
            val o = __offset(118)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val transactionIdAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(118, 1)
    fun transactionIdInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 118, 1)
    /**
     * Optional source-provided and searchable metadata or descriptor of the data.
     * Example: /// Example: Descriptor
     * Constraints: Minimum length = 0, Maximum length = 64
     */
    val descriptor : String?
        get() {
            val o = __offset(120)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val descriptorAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(120, 1)
    fun descriptorInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 120, 1)
    /**
     * Time the row was created in the database, auto-populated by the system.
     * Example: /// Example: 2018-01-01T16:00:00.123Z
     * Constraints: No constraints specified.
     */
    val createdAt : String?
        get() {
            val o = __offset(122)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val createdAtAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(122, 1)
    fun createdAtInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 122, 1)
    /**
     * Application user who created the row in the database, auto-populated by the system.
     * Example: /// Example: some.user
     * Constraints: Minimum length = 1, Maximum length = 64
     */
    val createdBy : String?
        get() {
            val o = __offset(124)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val createdByAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(124, 1)
    fun createdByInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 124, 1)
    /**
     * Source of the data.
     * Example: /// Example: Bluestaq
     * Constraints: Minimum length = 1, Maximum length = 64
     */
    val source : String?
        get() {
            val o = __offset(126)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val sourceAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(126, 1)
    fun sourceInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 126, 1)
    /**
     * Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
     * Example: /// Example: THIRD_PARTY_DATASOURCE
     * Constraints: Minimum length = 0, Maximum length = 64
     */
    val origin : String?
        get() {
            val o = __offset(128)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val originAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(128, 1)
    fun originInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 128, 1)
    /**
     * The originating source network on which this record was created, auto-populated by the system.
     * Example: /// Example: ORIG
     * Constraints: Minimum length = 1, Maximum length = 32
     */
    val origNetwork : String?
        get() {
            val o = __offset(130)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val origNetworkAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(130, 1)
    fun origNetworkInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 130, 1)
    /**
     * The source data library from which this record was received. This could be a remote or tactical UDL or another data library. If null, the record should be assumed to have originated from the primary Enterprise UDL.
     * Example: /// Example: AXE
     * Constraints: Minimum length = 0, Maximum length = 64
     */
    val sourceDl : String?
        get() {
            val o = __offset(132)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val sourceDlAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(132, 1)
    fun sourceDlInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 132, 1)
    /**
     * Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
     * EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
     * REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
     * SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
     * TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
     * Example: /// Example: TEST
     * Constraints: Minimum length = 1, Maximum length = 32
     */
    val dataMode : Byte
        get() {
            val o = __offset(134)
            return if(o != 0) bb.get(o + bb_pos) else 0
        }
    /**
     * No description provided.
     * Example: /// Example: No example provided.
     * Constraints: No constraints specified.
     */
    val onOrbit : String?
        get() {
            val o = __offset(136)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val onOrbitAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(136, 1)
    fun onOrbitInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 136, 1)
    /**
     * Read only enumeration specifying the type of observation (e.g. OPTICAL, RADAR, RF, etc).
     * Example: /// Example: RADAR
     * Constraints: No constraints specified.
     */
    val type : String?
        get() {
            val o = __offset(138)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val typeAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(138, 1)
    fun typeInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 138, 1)
    companion object {
        fun validateVersion() = Constants.FLATBUFFERS_24_3_25()
        fun getRootAsPassiveRadarObservation_Full(_bb: ByteBuffer): PassiveRadarObservation_Full = getRootAsPassiveRadarObservation_Full(_bb, PassiveRadarObservation_Full())
        fun getRootAsPassiveRadarObservation_Full(_bb: ByteBuffer, obj: PassiveRadarObservation_Full): PassiveRadarObservation_Full {
            _bb.order(ByteOrder.LITTLE_ENDIAN)
            return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb))
        }
        fun PassiveRadarObservation_FullBufferHasIdentifier(_bb: ByteBuffer) : Boolean = __has_identifier(_bb, "PASS")
        fun createPassiveRadarObservation_Full(builder: FlatBufferBuilder, idOffset: Int, classificationMarkingOffset: Int, obTimeOffset: Int, idOnOrbitOffset: Int, satNo: Int, origObjectIdOffset: Int, idSensorOffset: Int, origSensorIdOffset: Int, idRfemitterOffset: Int, idSensorRefReceiverOffset: Int, extObservationIdOffset: Int, taskIdOffset: Int, trackIdOffset: Int, obPositionOffset: Int, uct: Boolean, azimuth: Double, azimuthUnc: Double, azimuthBias: Double, azimuthRate: Double, elevation: Double, elevationUnc: Double, elevationBias: Double, elevationRate: Double, delay: Double, delayUnc: Double, delayBias: Double, bistaticRange: Double, bistaticRangeUnc: Double, bistaticRangeBias: Double, bistaticRangeRate: Double, bistaticRangeRateUnc: Double, bistaticRangeAccel: Double, bistaticRangeAccelUnc: Double, doppler: Double, dopplerUnc: Double, coning: Double, coningUnc: Double, tof: Double, tofUnc: Double, tofBias: Double, accel: Double, accelUnc: Double, ra: Double, declination: Double, lat: Double, lon: Double, alt: Double, xvel: Double, yvel: Double, zvel: Double, rcs: Double, rcsUnc: Double, orthogonalRcs: Double, orthogonalRcsUnc: Double, snr: Double, timingBias: Double, tagsOffset: Int, transactionIdOffset: Int, descriptorOffset: Int, createdAtOffset: Int, createdByOffset: Int, sourceOffset: Int, originOffset: Int, origNetworkOffset: Int, sourceDlOffset: Int, dataMode: Byte, onOrbitOffset: Int, typeOffset: Int) : Int {
            builder.startTable(68)
            addTimingBias(builder, timingBias)
            addSnr(builder, snr)
            addOrthogonalRcsUnc(builder, orthogonalRcsUnc)
            addOrthogonalRcs(builder, orthogonalRcs)
            addRcsUnc(builder, rcsUnc)
            addRcs(builder, rcs)
            addZvel(builder, zvel)
            addYvel(builder, yvel)
            addXvel(builder, xvel)
            addAlt(builder, alt)
            addLon(builder, lon)
            addLat(builder, lat)
            addDeclination(builder, declination)
            addRa(builder, ra)
            addAccelUnc(builder, accelUnc)
            addAccel(builder, accel)
            addTofBias(builder, tofBias)
            addTofUnc(builder, tofUnc)
            addTof(builder, tof)
            addConingUnc(builder, coningUnc)
            addConing(builder, coning)
            addDopplerUnc(builder, dopplerUnc)
            addDoppler(builder, doppler)
            addBistaticRangeAccelUnc(builder, bistaticRangeAccelUnc)
            addBistaticRangeAccel(builder, bistaticRangeAccel)
            addBistaticRangeRateUnc(builder, bistaticRangeRateUnc)
            addBistaticRangeRate(builder, bistaticRangeRate)
            addBistaticRangeBias(builder, bistaticRangeBias)
            addBistaticRangeUnc(builder, bistaticRangeUnc)
            addBistaticRange(builder, bistaticRange)
            addDelayBias(builder, delayBias)
            addDelayUnc(builder, delayUnc)
            addDelay(builder, delay)
            addElevationRate(builder, elevationRate)
            addElevationBias(builder, elevationBias)
            addElevationUnc(builder, elevationUnc)
            addElevation(builder, elevation)
            addAzimuthRate(builder, azimuthRate)
            addAzimuthBias(builder, azimuthBias)
            addAzimuthUnc(builder, azimuthUnc)
            addAzimuth(builder, azimuth)
            addType(builder, typeOffset)
            addOnOrbit(builder, onOrbitOffset)
            addSourceDL(builder, sourceDlOffset)
            addOrigNetwork(builder, origNetworkOffset)
            addOrigin(builder, originOffset)
            addSource(builder, sourceOffset)
            addCreatedBy(builder, createdByOffset)
            addCreatedAt(builder, createdAtOffset)
            addDescriptor(builder, descriptorOffset)
            addTransactionId(builder, transactionIdOffset)
            addTags(builder, tagsOffset)
            addObPosition(builder, obPositionOffset)
            addTrackId(builder, trackIdOffset)
            addTaskId(builder, taskIdOffset)
            addExtObservationId(builder, extObservationIdOffset)
            addIdSensorRefReceiver(builder, idSensorRefReceiverOffset)
            addIdRFEmitter(builder, idRfemitterOffset)
            addOrigSensorId(builder, origSensorIdOffset)
            addIdSensor(builder, idSensorOffset)
            addOrigObjectId(builder, origObjectIdOffset)
            addSatNo(builder, satNo)
            addIdOnOrbit(builder, idOnOrbitOffset)
            addObTime(builder, obTimeOffset)
            addClassificationMarking(builder, classificationMarkingOffset)
            addId(builder, idOffset)
            addDataMode(builder, dataMode)
            addUct(builder, uct)
            return endPassiveRadarObservation_Full(builder)
        }
        fun startPassiveRadarObservation_Full(builder: FlatBufferBuilder) = builder.startTable(68)
        fun addId(builder: FlatBufferBuilder, id: Int) = builder.addOffset(0, id, 0)
        fun addClassificationMarking(builder: FlatBufferBuilder, classificationMarking: Int) = builder.addOffset(1, classificationMarking, 0)
        fun addObTime(builder: FlatBufferBuilder, obTime: Int) = builder.addOffset(2, obTime, 0)
        fun addIdOnOrbit(builder: FlatBufferBuilder, idOnOrbit: Int) = builder.addOffset(3, idOnOrbit, 0)
        fun addSatNo(builder: FlatBufferBuilder, satNo: Int) = builder.addInt(4, satNo, 0)
        fun addOrigObjectId(builder: FlatBufferBuilder, origObjectId: Int) = builder.addOffset(5, origObjectId, 0)
        fun addIdSensor(builder: FlatBufferBuilder, idSensor: Int) = builder.addOffset(6, idSensor, 0)
        fun addOrigSensorId(builder: FlatBufferBuilder, origSensorId: Int) = builder.addOffset(7, origSensorId, 0)
        fun addIdRFEmitter(builder: FlatBufferBuilder, idRfemitter: Int) = builder.addOffset(8, idRfemitter, 0)
        fun addIdSensorRefReceiver(builder: FlatBufferBuilder, idSensorRefReceiver: Int) = builder.addOffset(9, idSensorRefReceiver, 0)
        fun addExtObservationId(builder: FlatBufferBuilder, extObservationId: Int) = builder.addOffset(10, extObservationId, 0)
        fun addTaskId(builder: FlatBufferBuilder, taskId: Int) = builder.addOffset(11, taskId, 0)
        fun addTrackId(builder: FlatBufferBuilder, trackId: Int) = builder.addOffset(12, trackId, 0)
        fun addObPosition(builder: FlatBufferBuilder, obPosition: Int) = builder.addOffset(13, obPosition, 0)
        fun addUct(builder: FlatBufferBuilder, uct: Boolean) = builder.addBoolean(14, uct, false)
        fun addAzimuth(builder: FlatBufferBuilder, azimuth: Double) = builder.addDouble(15, azimuth, 0.0)
        fun addAzimuthUnc(builder: FlatBufferBuilder, azimuthUnc: Double) = builder.addDouble(16, azimuthUnc, 0.0)
        fun addAzimuthBias(builder: FlatBufferBuilder, azimuthBias: Double) = builder.addDouble(17, azimuthBias, 0.0)
        fun addAzimuthRate(builder: FlatBufferBuilder, azimuthRate: Double) = builder.addDouble(18, azimuthRate, 0.0)
        fun addElevation(builder: FlatBufferBuilder, elevation: Double) = builder.addDouble(19, elevation, 0.0)
        fun addElevationUnc(builder: FlatBufferBuilder, elevationUnc: Double) = builder.addDouble(20, elevationUnc, 0.0)
        fun addElevationBias(builder: FlatBufferBuilder, elevationBias: Double) = builder.addDouble(21, elevationBias, 0.0)
        fun addElevationRate(builder: FlatBufferBuilder, elevationRate: Double) = builder.addDouble(22, elevationRate, 0.0)
        fun addDelay(builder: FlatBufferBuilder, delay: Double) = builder.addDouble(23, delay, 0.0)
        fun addDelayUnc(builder: FlatBufferBuilder, delayUnc: Double) = builder.addDouble(24, delayUnc, 0.0)
        fun addDelayBias(builder: FlatBufferBuilder, delayBias: Double) = builder.addDouble(25, delayBias, 0.0)
        fun addBistaticRange(builder: FlatBufferBuilder, bistaticRange: Double) = builder.addDouble(26, bistaticRange, 0.0)
        fun addBistaticRangeUnc(builder: FlatBufferBuilder, bistaticRangeUnc: Double) = builder.addDouble(27, bistaticRangeUnc, 0.0)
        fun addBistaticRangeBias(builder: FlatBufferBuilder, bistaticRangeBias: Double) = builder.addDouble(28, bistaticRangeBias, 0.0)
        fun addBistaticRangeRate(builder: FlatBufferBuilder, bistaticRangeRate: Double) = builder.addDouble(29, bistaticRangeRate, 0.0)
        fun addBistaticRangeRateUnc(builder: FlatBufferBuilder, bistaticRangeRateUnc: Double) = builder.addDouble(30, bistaticRangeRateUnc, 0.0)
        fun addBistaticRangeAccel(builder: FlatBufferBuilder, bistaticRangeAccel: Double) = builder.addDouble(31, bistaticRangeAccel, 0.0)
        fun addBistaticRangeAccelUnc(builder: FlatBufferBuilder, bistaticRangeAccelUnc: Double) = builder.addDouble(32, bistaticRangeAccelUnc, 0.0)
        fun addDoppler(builder: FlatBufferBuilder, doppler: Double) = builder.addDouble(33, doppler, 0.0)
        fun addDopplerUnc(builder: FlatBufferBuilder, dopplerUnc: Double) = builder.addDouble(34, dopplerUnc, 0.0)
        fun addConing(builder: FlatBufferBuilder, coning: Double) = builder.addDouble(35, coning, 0.0)
        fun addConingUnc(builder: FlatBufferBuilder, coningUnc: Double) = builder.addDouble(36, coningUnc, 0.0)
        fun addTof(builder: FlatBufferBuilder, tof: Double) = builder.addDouble(37, tof, 0.0)
        fun addTofUnc(builder: FlatBufferBuilder, tofUnc: Double) = builder.addDouble(38, tofUnc, 0.0)
        fun addTofBias(builder: FlatBufferBuilder, tofBias: Double) = builder.addDouble(39, tofBias, 0.0)
        fun addAccel(builder: FlatBufferBuilder, accel: Double) = builder.addDouble(40, accel, 0.0)
        fun addAccelUnc(builder: FlatBufferBuilder, accelUnc: Double) = builder.addDouble(41, accelUnc, 0.0)
        fun addRa(builder: FlatBufferBuilder, ra: Double) = builder.addDouble(42, ra, 0.0)
        fun addDeclination(builder: FlatBufferBuilder, declination: Double) = builder.addDouble(43, declination, 0.0)
        fun addLat(builder: FlatBufferBuilder, lat: Double) = builder.addDouble(44, lat, 0.0)
        fun addLon(builder: FlatBufferBuilder, lon: Double) = builder.addDouble(45, lon, 0.0)
        fun addAlt(builder: FlatBufferBuilder, alt: Double) = builder.addDouble(46, alt, 0.0)
        fun addXvel(builder: FlatBufferBuilder, xvel: Double) = builder.addDouble(47, xvel, 0.0)
        fun addYvel(builder: FlatBufferBuilder, yvel: Double) = builder.addDouble(48, yvel, 0.0)
        fun addZvel(builder: FlatBufferBuilder, zvel: Double) = builder.addDouble(49, zvel, 0.0)
        fun addRcs(builder: FlatBufferBuilder, rcs: Double) = builder.addDouble(50, rcs, 0.0)
        fun addRcsUnc(builder: FlatBufferBuilder, rcsUnc: Double) = builder.addDouble(51, rcsUnc, 0.0)
        fun addOrthogonalRcs(builder: FlatBufferBuilder, orthogonalRcs: Double) = builder.addDouble(52, orthogonalRcs, 0.0)
        fun addOrthogonalRcsUnc(builder: FlatBufferBuilder, orthogonalRcsUnc: Double) = builder.addDouble(53, orthogonalRcsUnc, 0.0)
        fun addSnr(builder: FlatBufferBuilder, snr: Double) = builder.addDouble(54, snr, 0.0)
        fun addTimingBias(builder: FlatBufferBuilder, timingBias: Double) = builder.addDouble(55, timingBias, 0.0)
        fun addTags(builder: FlatBufferBuilder, tags: Int) = builder.addOffset(56, tags, 0)
        fun createTagsVector(builder: FlatBufferBuilder, data: IntArray) : Int {
            builder.startVector(4, data.size, 4)
            for (i in data.size - 1 downTo 0) {
                builder.addOffset(data[i])
            }
            return builder.endVector()
        }
        fun startTagsVector(builder: FlatBufferBuilder, numElems: Int) = builder.startVector(4, numElems, 4)
        fun addTransactionId(builder: FlatBufferBuilder, transactionId: Int) = builder.addOffset(57, transactionId, 0)
        fun addDescriptor(builder: FlatBufferBuilder, descriptor: Int) = builder.addOffset(58, descriptor, 0)
        fun addCreatedAt(builder: FlatBufferBuilder, createdAt: Int) = builder.addOffset(59, createdAt, 0)
        fun addCreatedBy(builder: FlatBufferBuilder, createdBy: Int) = builder.addOffset(60, createdBy, 0)
        fun addSource(builder: FlatBufferBuilder, source: Int) = builder.addOffset(61, source, 0)
        fun addOrigin(builder: FlatBufferBuilder, origin: Int) = builder.addOffset(62, origin, 0)
        fun addOrigNetwork(builder: FlatBufferBuilder, origNetwork: Int) = builder.addOffset(63, origNetwork, 0)
        fun addSourceDL(builder: FlatBufferBuilder, sourceDl: Int) = builder.addOffset(64, sourceDl, 0)
        fun addDataMode(builder: FlatBufferBuilder, dataMode: Byte) = builder.addByte(65, dataMode, 0)
        fun addOnOrbit(builder: FlatBufferBuilder, onOrbit: Int) = builder.addOffset(66, onOrbit, 0)
        fun addType(builder: FlatBufferBuilder, type: Int) = builder.addOffset(67, type, 0)
        fun endPassiveRadarObservation_Full(builder: FlatBufferBuilder) : Int {
            val o = builder.endTable()
            return o
        }
        fun finishPassiveRadarObservationFullBuffer(builder: FlatBufferBuilder, offset: Int) = builder.finish(offset, "PASS")
        fun finishSizePrefixedPassiveRadarObservation_FullBuffer(builder: FlatBufferBuilder, offset: Int) = builder.finishSizePrefixed(offset, "PASS")
    }
}
