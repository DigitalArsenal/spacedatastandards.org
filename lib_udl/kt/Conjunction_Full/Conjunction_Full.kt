// automatically generated by the FlatBuffers compiler, do not modify

import com.google.flatbuffers.BaseVector
import com.google.flatbuffers.BooleanVector
import com.google.flatbuffers.ByteVector
import com.google.flatbuffers.Constants
import com.google.flatbuffers.DoubleVector
import com.google.flatbuffers.FlatBufferBuilder
import com.google.flatbuffers.FloatVector
import com.google.flatbuffers.LongVector
import com.google.flatbuffers.StringVector
import com.google.flatbuffers.Struct
import com.google.flatbuffers.Table
import com.google.flatbuffers.UnionVector
import java.nio.ByteBuffer
import java.nio.ByteOrder
import kotlin.math.sign

/**
 * /// Stores the results of a particular Conjunction Assessment (CA) run.
 */
@Suppress("unused")
class Conjunction_Full : Table() {

    fun __init(_i: Int, _bb: ByteBuffer)  {
        __reset(_i, _bb)
    }
    fun __assign(_i: Int, _bb: ByteBuffer) : Conjunction_Full {
        __init(_i, _bb)
        return this
    }
    /**
     * Unique identifier of the record, auto-generated by the system.
     * Example: /// Example: CONJUNCTION-ID
     * Constraints: Minimum length = 0, Maximum length = 36
     */
    val id : String?
        get() {
            val o = __offset(4)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val idAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(4, 1)
    fun idInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 4, 1)
    /**
     * Classification marking of the data in IC/CAPCO Portion-marked format.
     * Example: /// Example: U
     * Constraints: Minimum length = 1, Maximum length = 128
     */
    val classificationMarking : String?
        get() {
            val o = __offset(6)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val classificationMarkingAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(6, 1)
    fun classificationMarkingInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 6, 1)
    /**
     * Unique identifier of the primary satellite on-orbit object, if correlated.
     * Example: /// Example: ONORBIT1-ID
     * Constraints: Minimum length = 0, Maximum length = 36
     */
    val idOnOrbit1 : String?
        get() {
            val o = __offset(8)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val idOnOrbit1AsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(8, 1)
    fun idOnOrbit1InByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 8, 1)
    /**
     * Unique identifier of the secondary satellite on-orbit object, if correlated.
     * Example: /// Example: ONORBIT2-ID
     * Constraints: Minimum length = 0, Maximum length = 36
     */
    val idOnOrbit2 : String?
        get() {
            val o = __offset(10)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val idOnOrbit2AsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(10, 1)
    fun idOnOrbit2InByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 10, 1)
    /**
     * The type of data represented in this conjunction record (e.g. CONJUNCTION, CARA-WORKLIST, etc.).  If type is null the record is assumed to be a Conjunction.
     * Example: /// Example: CONJUNCTION
     * Constraints: Minimum length = 0, Maximum length = 24
     */
    val type : String?
        get() {
            val o = __offset(12)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val typeAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(12, 1)
    fun typeInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 12, 1)
    /**
     * Time of closest approach (TCA) in UTC.
     * Example: /// Example: 2021-01-01T01:01:01.123456Z
     * Constraints: No constraints specified.
     */
    val tca : String?
        get() {
            val o = __offset(14)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val tcaAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(14, 1)
    fun tcaInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 14, 1)
    /**
     * Distance between objects at Time of Closest Approach (TCA) in meters.
     * Example: /// Example: 1.1
     * Constraints: No constraints specified.
     */
    val missDistance : Double
        get() {
            val o = __offset(16)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Probability of Collision is the probability (denoted p, where 0.0<=p<=1.0), that Object1 and Object2 will collide.
     * Example: /// Example: 0.5
     * Constraints: No constraints specified.
     */
    val collisionProb : Double
        get() {
            val o = __offset(18)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * The method that was used to calculate the collision probability, ex. FOSTER-1992.
     * Example: /// Example: FOSTER-1992
     * Constraints: Minimum length = 0, Maximum length = 32
     */
    val collisionProbMethod : String?
        get() {
            val o = __offset(20)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val collisionProbMethodAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(20, 1)
    fun collisionProbMethodInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 20, 1)
    /**
     * The filename of the primary (object1) ephemeris used in the screening, if applicable.
     * Example: /// Example: MEME_SPCFT_ABC_2180000_ops_nomnvr_unclassified.oem
     * Constraints: Minimum length = 0, Maximum length = 64
     */
    val ephemName1 : String?
        get() {
            val o = __offset(22)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val ephemName1AsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(22, 1)
    fun ephemName1InByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 22, 1)
    /**
     * Unique identifier of the parent Ephemeris Set of the primary (object1) ephemeris used in the screening, if applicable.
     * Example: /// Example: a2ae2356-6d83-4e4b-896d-ddd1958800fa
     * Constraints: Minimum length = 0, Maximum length = 36
     */
    val esId1 : String?
        get() {
            val o = __offset(24)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val esId1AsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(24, 1)
    fun esId1InByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 24, 1)
    /**
     * The filename of the secondary (object2) ephemeris used in the screening, if applicable.
     * Example: /// Example: MEME_SPCFT_DEF_2170000_ops_nomnvr_unclassified.txt
     * Constraints: Minimum length = 0, Maximum length = 64
     */
    val ephemName2 : String?
        get() {
            val o = __offset(26)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val ephemName2AsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(26, 1)
    fun ephemName2InByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 26, 1)
    /**
     * Unique identifier of the parent Ephemeris Set of the secondary (object2) ephemeris used in the screening, if applicable.
     * Example: /// Example: 6fa31433-8beb-4b9b-8bf9-326dbd041c3f
     * Constraints: Minimum length = 0, Maximum length = 36
     */
    val esId2 : String?
        get() {
            val o = __offset(28)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val esId2AsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(28, 1)
    fun esId2InByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 28, 1)
    /**
     * Distance between objects along Radial Vector at Time of Closest Approach in meters.
     * Example: /// Example: 1.1
     * Constraints: No constraints specified.
     */
    val relPosR : Double
        get() {
            val o = __offset(30)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Distance between objects along Tangential Vector in meters.
     * Example: /// Example: 1.1
     * Constraints: No constraints specified.
     */
    val relPosT : Double
        get() {
            val o = __offset(32)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Distance between objects along Normal vector in meters.
     * Example: /// Example: 1.1
     * Constraints: No constraints specified.
     */
    val relPosN : Double
        get() {
            val o = __offset(34)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Closing velocity magnitude (relative speed) at Time of Closest Approach in meters/sec.
     * Example: /// Example: 1.1
     * Constraints: No constraints specified.
     */
    val relVelMag : Double
        get() {
            val o = __offset(36)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Closing velocity between objects along Radial Vector at Time of Closest Approach in meters/sec.
     * Example: /// Example: 1.1
     * Constraints: No constraints specified.
     */
    val relVelR : Double
        get() {
            val o = __offset(38)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Closing velocity between objects along Tangential Vector in meters/sec.
     * Example: /// Example: 1.1
     * Constraints: No constraints specified.
     */
    val relVelT : Double
        get() {
            val o = __offset(40)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Closing velocity between objects along Normal Vector in meters/sec.
     * Example: /// Example: 1.1
     * Constraints: No constraints specified.
     */
    val relVelN : Double
        get() {
            val o = __offset(42)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * The start time in UTC of the screening period for the conjunction assessment.
     * Example: /// Example: 2021-01-01T01:01:01.123456Z
     * Constraints: No constraints specified.
     */
    val screenEntryTime : String?
        get() {
            val o = __offset(44)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val screenEntryTimeAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(44, 1)
    fun screenEntryTimeInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 44, 1)
    /**
     * The stop time in UTC of the screening period for the conjunction assessment.
     * Example: /// Example: 2021-01-01T01:01:01.123456Z
     * Constraints: No constraints specified.
     */
    val screenExitTime : String?
        get() {
            val o = __offset(46)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val screenExitTimeAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(46, 1)
    fun screenExitTimeInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 46, 1)
    /**
     * Component size of screen in X component of  RTN (Radial, Transverse and Normal) frame in meters.
     * Example: /// Example: 1.1
     * Constraints: No constraints specified.
     */
    val screenVolumeX : Double
        get() {
            val o = __offset(48)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Component size of screen in Y component of  RTN (Radial, Transverse and Normal) frame in meters.
     * Example: /// Example: 1.1
     * Constraints: No constraints specified.
     */
    val screenVolumeY : Double
        get() {
            val o = __offset(50)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Component size of screen in Z component of  RTN (Radial, Transverse and Normal) frame in meters.
     * Example: /// Example: 1.1
     * Constraints: No constraints specified.
     */
    val screenVolumeZ : Double
        get() {
            val o = __offset(52)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * The shape (BOX, ELLIPSOID) of the screening volume.
     * Example: /// Example: ELLIPSOID
     * Constraints: Minimum length = 0, Maximum length = 12
     */
    val volShape : String?
        get() {
            val o = __offset(54)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val volShapeAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(54, 1)
    fun volShapeInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 54, 1)
    /**
     * The time at which the secondary (object2) enters the screening volume, in ISO 8601 UTC format with microsecond precision.
     * Example: /// Example: 2021-01-01T01:02:01.123456Z
     * Constraints: No constraints specified.
     */
    val volEntryTime : String?
        get() {
            val o = __offset(56)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val volEntryTimeAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(56, 1)
    fun volEntryTimeInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 56, 1)
    /**
     * The time at which the secondary (object2) exits the screening volume, in ISO 8601 UTC format with microsecond precision.
     * Example: /// Example: 2021-01-01T01:02:28.123456Z
     * Constraints: No constraints specified.
     */
    val volExitTime : String?
        get() {
            val o = __offset(58)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val volExitTimeAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(58, 1)
    fun volExitTimeInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 58, 1)
    /**
     * Penetration Level Sigma.
     * Example: /// Example: 1.1
     * Constraints: No constraints specified.
     */
    val penetrationLevelSigma : Double
        get() {
            val o = __offset(60)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Optional ID of the UDL State Vector at TCA of the primary object. When performing a create, this id will be ignored in favor of the UDL generated id of the stateVector1.
     * Example: /// Example: REF-STATEVECTOR1-ID
     * Constraints: Minimum length = 0, Maximum length = 36
     */
    val idStateVector1 : String?
        get() {
            val o = __offset(62)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val idStateVector1AsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(62, 1)
    fun idStateVector1InByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 62, 1)
    /**
     * Time of last positive metric observation of the primary satellite.
     * Example: /// Example: 2021-01-01T01:01:01.123456Z
     * Constraints: No constraints specified.
     */
    val lastObTime1 : String?
        get() {
            val o = __offset(64)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val lastObTime1AsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(64, 1)
    fun lastObTime1InByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 64, 1)
    /**
     * The value of the primary (object1) Area times the drag coefficient over the object Mass, expressed in m^2/kg, used for propagation of the primary state vector and covariance to TCA.
     * Example: /// Example: 0.016386
     * Constraints: No constraints specified.
     */
    val cdAoM1 : Double
        get() {
            val o = __offset(66)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * The value of the primary (object1) Area times the solar radiation pressure coefficient over the object Mass, expressed in m^2/kg, used for propagation of the primary state vector and covariance to TCA.  This parameter is sometimes referred to as AGOM.
     * Example: /// Example: 0.013814
     * Constraints: No constraints specified.
     */
    val crAoM1 : Double
        get() {
            val o = __offset(68)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * The primary (object1) acceleration, expressed in m/s^2, due to in-track thrust used to propagate the primary state vector and covariance to TCA.
     * Example: /// Example: 0.033814
     * Constraints: No constraints specified.
     */
    val thrustAccel1 : Double
        get() {
            val o = __offset(70)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Optional ID of the UDL State Vector at TCA of the secondary object. When performing a create, this id will be ignored in favor of the UDL generated id of the stateVector2.
     * Example: /// Example: REF-STATEVECTOR2-ID
     * Constraints: Minimum length = 0, Maximum length = 36
     */
    val idStateVector2 : String?
        get() {
            val o = __offset(72)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val idStateVector2AsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(72, 1)
    fun idStateVector2InByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 72, 1)
    /**
     * Time of last positive metric observation of the secondary satellite.
     * Example: /// Example: 2021-01-01T01:01:01.123456Z
     * Constraints: No constraints specified.
     */
    val lastObTime2 : String?
        get() {
            val o = __offset(74)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val lastObTime2AsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(74, 1)
    fun lastObTime2InByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 74, 1)
    /**
     * The value of the secondary (object2) Area times the drag coefficient over the object Mass, expressed in m^2/kg, used for propagation of the primary state vector and covariance to TCA.
     * Example: /// Example: 0.016386
     * Constraints: No constraints specified.
     */
    val cdAoM2 : Double
        get() {
            val o = __offset(76)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * The value of the secondary (object2) Area times the solar radiation pressure coefficient over the object Mass, expressed in m^2/kg, used for propagation of the primary state vector and covariance to TCA.  This parameter is sometimes referred to as AGOM.
     * Example: /// Example: 0.013814
     * Constraints: No constraints specified.
     */
    val crAoM2 : Double
        get() {
            val o = __offset(78)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * The secondary (object2) acceleration, expressed in m/s^2, due to in-track thrust used to propagate the primary state vector and covariance to TCA.
     * Example: /// Example: 0.033814
     * Constraints: No constraints specified.
     */
    val thrustAccel2 : Double
        get() {
            val o = __offset(80)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Additional notes from data providers.
     * Example: /// Example: Example notes
     * Constraints: Minimum length = 0, Maximum length = 1024
     */
    val comments : String?
        get() {
            val o = __offset(82)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val commentsAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(82, 1)
    fun commentsInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 82, 1)
    /**
     * Commander's critical information requirements notes.
     * Example: /// Example: Example notes
     * Constraints: Minimum length = 0, Maximum length = 128
     */
    val ccir : String?
        get() {
            val o = __offset(84)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val ccirAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(84, 1)
    fun ccirInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 84, 1)
    /**
     * Emergency comments.
     * Example: /// Example: Example notes
     * Constraints: Minimum length = 0, Maximum length = 256
     */
    val concernNotes : String?
        get() {
            val o = __offset(86)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val concernNotesAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(86, 1)
    fun concernNotesInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 86, 1)
    /**
     * Flag indicating if State department was notified.
     * Example: /// Example: False
     * Constraints: No constraints specified.
     */
    val stateDeptNotified : Boolean
        get() {
            val o = __offset(88)
            return if(o != 0) 0.toByte() != bb.get(o + bb_pos) else false
        }
    /**
     * Flag indicating if owner was contacted.
     * Example: /// Example: False
     * Constraints: No constraints specified.
     */
    val ownerContacted : Boolean
        get() {
            val o = __offset(90)
            return if(o != 0) 0.toByte() != bb.get(o + bb_pos) else false
        }
    /**
     * Link to filename associated with JMS record.
     * Example: /// Example: Example link
     * Constraints: Minimum length = 0, Maximum length = 64
     */
    val rawFileUri : String?
        get() {
            val o = __offset(92)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val rawFileUriAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(92, 1)
    fun rawFileUriInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 92, 1)
    /**
     * Spacecraft name(s) for which the Collision message is provided.
     * Example: /// Example: Message for space craft A
     * Constraints: Minimum length = 0, Maximum length = 64
     */
    val messageFor : String?
        get() {
            val o = __offset(94)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val messageForAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(94, 1)
    fun messageForInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 94, 1)
    /**
     * JMS provided message ID link.
     * Example: /// Example: MESSAGE-ID
     * Constraints: Minimum length = 0, Maximum length = 64
     */
    val messageId : String?
        get() {
            val o = __offset(96)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val messageIdAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(96, 1)
    fun messageIdInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 96, 1)
    /**
     * Used for probability of collision calculation, not Warning/Alert Threshold notifications.
     * Example: /// Example: False
     * Constraints: No constraints specified.
     */
    val uvwWarn : Boolean
        get() {
            val o = __offset(98)
            return if(o != 0) 0.toByte() != bb.get(o + bb_pos) else false
        }
    /**
     * Used for probability of collision calculation, not Warning/Alert Threshold notifications.
     * Example: /// Example: False
     * Constraints: No constraints specified.
     */
    val smallRelVelWarning : Boolean
        get() {
            val o = __offset(100)
            return if(o != 0) 0.toByte() != bb.get(o + bb_pos) else false
        }
    /**
     * Used for probability of collision calculation, not Warning/Alert Threshold notifications.
     * Example: /// Example: False
     * Constraints: No constraints specified.
     */
    val largeRelPosWarning : Boolean
        get() {
            val o = __offset(102)
            return if(o != 0) 0.toByte() != bb.get(o + bb_pos) else false
        }
    /**
     * Used for probability of collision calculation, not Warning/Alert Threshold notifications.
     * Example: /// Example: False
     * Constraints: No constraints specified.
     */
    val smallCovWarning : Boolean
        get() {
            val o = __offset(104)
            return if(o != 0) 0.toByte() != bb.get(o + bb_pos) else false
        }
    /**
     * Used for probability of collision calculation, not Warning/Alert Threshold notifications.
     * Example: /// Example: False
     * Constraints: No constraints specified.
     */
    val largeCovWarning : Boolean
        get() {
            val o = __offset(106)
            return if(o != 0) 0.toByte() != bb.get(o + bb_pos) else false
        }
    /**
     * Optional identifier to track a commercial or marketplace transaction executed to produce this data.
     * Example: /// Example: TRANSACTION-ID
     * Constraints: Minimum length = 0, Maximum length = 64
     */
    val transactionId : String?
        get() {
            val o = __offset(108)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val transactionIdAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(108, 1)
    fun transactionIdInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 108, 1)
    /**
     * Source of the data.
     * Example: /// Example: Bluestaq
     * Constraints: Minimum length = 1, Maximum length = 64
     */
    val source : String?
        get() {
            val o = __offset(110)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val sourceAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(110, 1)
    fun sourceInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 110, 1)
    /**
     * Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
     * Example: /// Example: THIRD_PARTY_DATASOURCE
     * Constraints: Minimum length = 0, Maximum length = 64
     */
    val origin : String?
        get() {
            val o = __offset(112)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val originAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(112, 1)
    fun originInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 112, 1)
    /**
     * Creating agency or owner/operator (may be different than provider who submitted the conjunction message).
     * Example: /// Example: some.user
     * Constraints: Minimum length = 0, Maximum length = 64
     */
    val originator : String?
        get() {
            val o = __offset(114)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val originatorAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(114, 1)
    fun originatorInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 114, 1)
    /**
     * Optional source-provided identifier for this conjunction event. In the case where multiple conjunction records are submitted for the same event, this field can be used to tie them together to the same event.
     * Example: /// Example: some.user
     * Constraints: Minimum length = 0, Maximum length = 64
     */
    val eventId : String?
        get() {
            val o = __offset(116)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val eventIdAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(116, 1)
    fun eventIdInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 116, 1)
    /**
     * Optional source-provided and searchable metadata or descriptor of the data.
     * Example: /// Example: sample_descriptor here
     * Constraints: Minimum length = 0, Maximum length = 64
     */
    val descriptor : String?
        get() {
            val o = __offset(118)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val descriptorAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(118, 1)
    fun descriptorInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 118, 1)
    /**
     * Optional array of provider/source specific tags for this data, where each element is no longer than 32 characters, used for implementing data owner conditional access controls to restrict access to the data. Should be left null by data providers unless conditional access controls are coordinated with the UDL team.
     * Example: /// Example: ['PROVIDER_TAG1', 'PROVIDER_TAG1']
     * Constraints: No constraints specified.
     */
    fun tags(j: Int) : String? {
        val o = __offset(120)
        return if (o != 0) {
            __string(__vector(o) + j * 4)
        } else {
            null
        }
    }
    val tagsLength : Int
        get() {
            val o = __offset(120); return if (o != 0) __vector_len(o) else 0
        }
    /**
     * Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
     * EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
     * REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
     * SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
     * TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
     * Example: /// Example: TEST
     * Constraints: Minimum length = 1, Maximum length = 32
     */
    val dataMode : Byte
        get() {
            val o = __offset(122)
            return if(o != 0) bb.get(o + bb_pos) else 0
        }
    /**
     * Time the row was created in the database.
     * Example: /// Example: 2018-01-01T16:00:00.123Z
     * Constraints: No constraints specified.
     */
    val createdAt : String?
        get() {
            val o = __offset(124)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val createdAtAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(124, 1)
    fun createdAtInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 124, 1)
    /**
     * Application user who created the row in the database.
     * Example: /// Example: some.user
     * Constraints: Minimum length = 1, Maximum length = 64
     */
    val createdBy : String?
        get() {
            val o = __offset(126)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val createdByAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(126, 1)
    fun createdByInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 126, 1)
    /**
     * No description provided.
     * Example: /// Example: No example provided.
     * Constraints: No constraints specified.
     */
    val stateVector1 : String?
        get() {
            val o = __offset(128)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val stateVector1AsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(128, 1)
    fun stateVector1InByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 128, 1)
    /**
     * No description provided.
     * Example: /// Example: No example provided.
     * Constraints: No constraints specified.
     */
    val stateVector2 : String?
        get() {
            val o = __offset(130)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val stateVector2AsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(130, 1)
    fun stateVector2InByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 130, 1)
    /**
     * Satellite/catalog number of the target on-orbit primary object.
     * Example: /// Example: 1
     * Constraints: No constraints specified.
     */
    val satNo1 : Int
        get() {
            val o = __offset(132)
            return if(o != 0) bb.getInt(o + bb_pos) else 0
        }
    /**
     * Satellite/catalog number of the target on-orbit secondary object.
     * Example: /// Example: 2
     * Constraints: No constraints specified.
     */
    val satNo2 : Int
        get() {
            val o = __offset(134)
            return if(o != 0) bb.getInt(o + bb_pos) else 0
        }
    /**
     * No description provided.
     * Example: /// Example: No example provided.
     * Constraints: No constraints specified.
     */
    val onOrbit1 : String?
        get() {
            val o = __offset(136)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val onOrbit1AsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(136, 1)
    fun onOrbit1InByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 136, 1)
    /**
     * No description provided.
     * Example: /// Example: No example provided.
     * Constraints: No constraints specified.
     */
    val onOrbit2 : String?
        get() {
            val o = __offset(138)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val onOrbit2AsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(138, 1)
    fun onOrbit2InByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 138, 1)
    /**
     * Optional place holder for an OnOrbit ID that does not exist in UDL.
     * Example: /// Example: ORIGONORBIT1-ID
     * Constraints: Minimum length = 0, Maximum length = 36
     */
    val origIdOnOrbit1 : String?
        get() {
            val o = __offset(140)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val origIdOnOrbit1AsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(140, 1)
    fun origIdOnOrbit1InByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 140, 1)
    /**
     * Optional place holder for an OnOrbit ID that does not exist in UDL.
     * Example: /// Example: ORIGONORBIT2-ID
     * Constraints: Minimum length = 0, Maximum length = 36
     */
    val origIdOnOrbit2 : String?
        get() {
            val o = __offset(142)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val origIdOnOrbit2AsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(142, 1)
    fun origIdOnOrbit2InByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 142, 1)
    /**
     * The originating source network on which this record was created, auto-populated by the system.
     * Example: /// Example: ORIG
     * Constraints: Minimum length = 0, Maximum length = 32
     */
    val origNetwork : String?
        get() {
            val o = __offset(144)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val origNetworkAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(144, 1)
    fun origNetworkInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 144, 1)
    companion object {
        fun validateVersion() = Constants.FLATBUFFERS_24_3_25()
        fun getRootAsConjunction_Full(_bb: ByteBuffer): Conjunction_Full = getRootAsConjunction_Full(_bb, Conjunction_Full())
        fun getRootAsConjunction_Full(_bb: ByteBuffer, obj: Conjunction_Full): Conjunction_Full {
            _bb.order(ByteOrder.LITTLE_ENDIAN)
            return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb))
        }
        fun Conjunction_FullBufferHasIdentifier(_bb: ByteBuffer) : Boolean = __has_identifier(_bb, "CONJ")
        fun createConjunction_Full(builder: FlatBufferBuilder, idOffset: Int, classificationMarkingOffset: Int, idOnOrbit1Offset: Int, idOnOrbit2Offset: Int, typeOffset: Int, tcaOffset: Int, missDistance: Double, collisionProb: Double, collisionProbMethodOffset: Int, ephemName1Offset: Int, esId1Offset: Int, ephemName2Offset: Int, esId2Offset: Int, relPosR: Double, relPosT: Double, relPosN: Double, relVelMag: Double, relVelR: Double, relVelT: Double, relVelN: Double, screenEntryTimeOffset: Int, screenExitTimeOffset: Int, screenVolumeX: Double, screenVolumeY: Double, screenVolumeZ: Double, volShapeOffset: Int, volEntryTimeOffset: Int, volExitTimeOffset: Int, penetrationLevelSigma: Double, idStateVector1Offset: Int, lastObTime1Offset: Int, cdAoM1: Double, crAoM1: Double, thrustAccel1: Double, idStateVector2Offset: Int, lastObTime2Offset: Int, cdAoM2: Double, crAoM2: Double, thrustAccel2: Double, commentsOffset: Int, ccirOffset: Int, concernNotesOffset: Int, stateDeptNotified: Boolean, ownerContacted: Boolean, rawFileUriOffset: Int, messageForOffset: Int, messageIdOffset: Int, uvwWarn: Boolean, smallRelVelWarning: Boolean, largeRelPosWarning: Boolean, smallCovWarning: Boolean, largeCovWarning: Boolean, transactionIdOffset: Int, sourceOffset: Int, originOffset: Int, originatorOffset: Int, eventIdOffset: Int, descriptorOffset: Int, tagsOffset: Int, dataMode: Byte, createdAtOffset: Int, createdByOffset: Int, stateVector1Offset: Int, stateVector2Offset: Int, satNo1: Int, satNo2: Int, onOrbit1Offset: Int, onOrbit2Offset: Int, origIdOnOrbit1Offset: Int, origIdOnOrbit2Offset: Int, origNetworkOffset: Int) : Int {
            builder.startTable(71)
            addThrustAccel2(builder, thrustAccel2)
            addCrAoM2(builder, crAoM2)
            addCdAoM2(builder, cdAoM2)
            addThrustAccel1(builder, thrustAccel1)
            addCrAoM1(builder, crAoM1)
            addCdAoM1(builder, cdAoM1)
            addPenetrationLevelSigma(builder, penetrationLevelSigma)
            addScreenVolumeZ(builder, screenVolumeZ)
            addScreenVolumeY(builder, screenVolumeY)
            addScreenVolumeX(builder, screenVolumeX)
            addRelVelN(builder, relVelN)
            addRelVelT(builder, relVelT)
            addRelVelR(builder, relVelR)
            addRelVelMag(builder, relVelMag)
            addRelPosN(builder, relPosN)
            addRelPosT(builder, relPosT)
            addRelPosR(builder, relPosR)
            addCollisionProb(builder, collisionProb)
            addMissDistance(builder, missDistance)
            addOrigNetwork(builder, origNetworkOffset)
            addOrigIdOnOrbit2(builder, origIdOnOrbit2Offset)
            addOrigIdOnOrbit1(builder, origIdOnOrbit1Offset)
            addOnOrbit2(builder, onOrbit2Offset)
            addOnOrbit1(builder, onOrbit1Offset)
            addSatNo2(builder, satNo2)
            addSatNo1(builder, satNo1)
            addStateVector2(builder, stateVector2Offset)
            addStateVector1(builder, stateVector1Offset)
            addCreatedBy(builder, createdByOffset)
            addCreatedAt(builder, createdAtOffset)
            addTags(builder, tagsOffset)
            addDescriptor(builder, descriptorOffset)
            addEventId(builder, eventIdOffset)
            addOriginator(builder, originatorOffset)
            addOrigin(builder, originOffset)
            addSource(builder, sourceOffset)
            addTransactionId(builder, transactionIdOffset)
            addMessageId(builder, messageIdOffset)
            addMessageFor(builder, messageForOffset)
            addRawFileURI(builder, rawFileUriOffset)
            addConcernNotes(builder, concernNotesOffset)
            addCcir(builder, ccirOffset)
            addComments(builder, commentsOffset)
            addLastObTime2(builder, lastObTime2Offset)
            addIdStateVector2(builder, idStateVector2Offset)
            addLastObTime1(builder, lastObTime1Offset)
            addIdStateVector1(builder, idStateVector1Offset)
            addVolExitTime(builder, volExitTimeOffset)
            addVolEntryTime(builder, volEntryTimeOffset)
            addVolShape(builder, volShapeOffset)
            addScreenExitTime(builder, screenExitTimeOffset)
            addScreenEntryTime(builder, screenEntryTimeOffset)
            addEsId2(builder, esId2Offset)
            addEphemName2(builder, ephemName2Offset)
            addEsId1(builder, esId1Offset)
            addEphemName1(builder, ephemName1Offset)
            addCollisionProbMethod(builder, collisionProbMethodOffset)
            addTca(builder, tcaOffset)
            addType(builder, typeOffset)
            addIdOnOrbit2(builder, idOnOrbit2Offset)
            addIdOnOrbit1(builder, idOnOrbit1Offset)
            addClassificationMarking(builder, classificationMarkingOffset)
            addId(builder, idOffset)
            addDataMode(builder, dataMode)
            addLargeCovWarning(builder, largeCovWarning)
            addSmallCovWarning(builder, smallCovWarning)
            addLargeRelPosWarning(builder, largeRelPosWarning)
            addSmallRelVelWarning(builder, smallRelVelWarning)
            addUvwWarn(builder, uvwWarn)
            addOwnerContacted(builder, ownerContacted)
            addStateDeptNotified(builder, stateDeptNotified)
            return endConjunction_Full(builder)
        }
        fun startConjunction_Full(builder: FlatBufferBuilder) = builder.startTable(71)
        fun addId(builder: FlatBufferBuilder, id: Int) = builder.addOffset(0, id, 0)
        fun addClassificationMarking(builder: FlatBufferBuilder, classificationMarking: Int) = builder.addOffset(1, classificationMarking, 0)
        fun addIdOnOrbit1(builder: FlatBufferBuilder, idOnOrbit1: Int) = builder.addOffset(2, idOnOrbit1, 0)
        fun addIdOnOrbit2(builder: FlatBufferBuilder, idOnOrbit2: Int) = builder.addOffset(3, idOnOrbit2, 0)
        fun addType(builder: FlatBufferBuilder, type: Int) = builder.addOffset(4, type, 0)
        fun addTca(builder: FlatBufferBuilder, tca: Int) = builder.addOffset(5, tca, 0)
        fun addMissDistance(builder: FlatBufferBuilder, missDistance: Double) = builder.addDouble(6, missDistance, 0.0)
        fun addCollisionProb(builder: FlatBufferBuilder, collisionProb: Double) = builder.addDouble(7, collisionProb, 0.0)
        fun addCollisionProbMethod(builder: FlatBufferBuilder, collisionProbMethod: Int) = builder.addOffset(8, collisionProbMethod, 0)
        fun addEphemName1(builder: FlatBufferBuilder, ephemName1: Int) = builder.addOffset(9, ephemName1, 0)
        fun addEsId1(builder: FlatBufferBuilder, esId1: Int) = builder.addOffset(10, esId1, 0)
        fun addEphemName2(builder: FlatBufferBuilder, ephemName2: Int) = builder.addOffset(11, ephemName2, 0)
        fun addEsId2(builder: FlatBufferBuilder, esId2: Int) = builder.addOffset(12, esId2, 0)
        fun addRelPosR(builder: FlatBufferBuilder, relPosR: Double) = builder.addDouble(13, relPosR, 0.0)
        fun addRelPosT(builder: FlatBufferBuilder, relPosT: Double) = builder.addDouble(14, relPosT, 0.0)
        fun addRelPosN(builder: FlatBufferBuilder, relPosN: Double) = builder.addDouble(15, relPosN, 0.0)
        fun addRelVelMag(builder: FlatBufferBuilder, relVelMag: Double) = builder.addDouble(16, relVelMag, 0.0)
        fun addRelVelR(builder: FlatBufferBuilder, relVelR: Double) = builder.addDouble(17, relVelR, 0.0)
        fun addRelVelT(builder: FlatBufferBuilder, relVelT: Double) = builder.addDouble(18, relVelT, 0.0)
        fun addRelVelN(builder: FlatBufferBuilder, relVelN: Double) = builder.addDouble(19, relVelN, 0.0)
        fun addScreenEntryTime(builder: FlatBufferBuilder, screenEntryTime: Int) = builder.addOffset(20, screenEntryTime, 0)
        fun addScreenExitTime(builder: FlatBufferBuilder, screenExitTime: Int) = builder.addOffset(21, screenExitTime, 0)
        fun addScreenVolumeX(builder: FlatBufferBuilder, screenVolumeX: Double) = builder.addDouble(22, screenVolumeX, 0.0)
        fun addScreenVolumeY(builder: FlatBufferBuilder, screenVolumeY: Double) = builder.addDouble(23, screenVolumeY, 0.0)
        fun addScreenVolumeZ(builder: FlatBufferBuilder, screenVolumeZ: Double) = builder.addDouble(24, screenVolumeZ, 0.0)
        fun addVolShape(builder: FlatBufferBuilder, volShape: Int) = builder.addOffset(25, volShape, 0)
        fun addVolEntryTime(builder: FlatBufferBuilder, volEntryTime: Int) = builder.addOffset(26, volEntryTime, 0)
        fun addVolExitTime(builder: FlatBufferBuilder, volExitTime: Int) = builder.addOffset(27, volExitTime, 0)
        fun addPenetrationLevelSigma(builder: FlatBufferBuilder, penetrationLevelSigma: Double) = builder.addDouble(28, penetrationLevelSigma, 0.0)
        fun addIdStateVector1(builder: FlatBufferBuilder, idStateVector1: Int) = builder.addOffset(29, idStateVector1, 0)
        fun addLastObTime1(builder: FlatBufferBuilder, lastObTime1: Int) = builder.addOffset(30, lastObTime1, 0)
        fun addCdAoM1(builder: FlatBufferBuilder, cdAoM1: Double) = builder.addDouble(31, cdAoM1, 0.0)
        fun addCrAoM1(builder: FlatBufferBuilder, crAoM1: Double) = builder.addDouble(32, crAoM1, 0.0)
        fun addThrustAccel1(builder: FlatBufferBuilder, thrustAccel1: Double) = builder.addDouble(33, thrustAccel1, 0.0)
        fun addIdStateVector2(builder: FlatBufferBuilder, idStateVector2: Int) = builder.addOffset(34, idStateVector2, 0)
        fun addLastObTime2(builder: FlatBufferBuilder, lastObTime2: Int) = builder.addOffset(35, lastObTime2, 0)
        fun addCdAoM2(builder: FlatBufferBuilder, cdAoM2: Double) = builder.addDouble(36, cdAoM2, 0.0)
        fun addCrAoM2(builder: FlatBufferBuilder, crAoM2: Double) = builder.addDouble(37, crAoM2, 0.0)
        fun addThrustAccel2(builder: FlatBufferBuilder, thrustAccel2: Double) = builder.addDouble(38, thrustAccel2, 0.0)
        fun addComments(builder: FlatBufferBuilder, comments: Int) = builder.addOffset(39, comments, 0)
        fun addCcir(builder: FlatBufferBuilder, ccir: Int) = builder.addOffset(40, ccir, 0)
        fun addConcernNotes(builder: FlatBufferBuilder, concernNotes: Int) = builder.addOffset(41, concernNotes, 0)
        fun addStateDeptNotified(builder: FlatBufferBuilder, stateDeptNotified: Boolean) = builder.addBoolean(42, stateDeptNotified, false)
        fun addOwnerContacted(builder: FlatBufferBuilder, ownerContacted: Boolean) = builder.addBoolean(43, ownerContacted, false)
        fun addRawFileURI(builder: FlatBufferBuilder, rawFileUri: Int) = builder.addOffset(44, rawFileUri, 0)
        fun addMessageFor(builder: FlatBufferBuilder, messageFor: Int) = builder.addOffset(45, messageFor, 0)
        fun addMessageId(builder: FlatBufferBuilder, messageId: Int) = builder.addOffset(46, messageId, 0)
        fun addUvwWarn(builder: FlatBufferBuilder, uvwWarn: Boolean) = builder.addBoolean(47, uvwWarn, false)
        fun addSmallRelVelWarning(builder: FlatBufferBuilder, smallRelVelWarning: Boolean) = builder.addBoolean(48, smallRelVelWarning, false)
        fun addLargeRelPosWarning(builder: FlatBufferBuilder, largeRelPosWarning: Boolean) = builder.addBoolean(49, largeRelPosWarning, false)
        fun addSmallCovWarning(builder: FlatBufferBuilder, smallCovWarning: Boolean) = builder.addBoolean(50, smallCovWarning, false)
        fun addLargeCovWarning(builder: FlatBufferBuilder, largeCovWarning: Boolean) = builder.addBoolean(51, largeCovWarning, false)
        fun addTransactionId(builder: FlatBufferBuilder, transactionId: Int) = builder.addOffset(52, transactionId, 0)
        fun addSource(builder: FlatBufferBuilder, source: Int) = builder.addOffset(53, source, 0)
        fun addOrigin(builder: FlatBufferBuilder, origin: Int) = builder.addOffset(54, origin, 0)
        fun addOriginator(builder: FlatBufferBuilder, originator: Int) = builder.addOffset(55, originator, 0)
        fun addEventId(builder: FlatBufferBuilder, eventId: Int) = builder.addOffset(56, eventId, 0)
        fun addDescriptor(builder: FlatBufferBuilder, descriptor: Int) = builder.addOffset(57, descriptor, 0)
        fun addTags(builder: FlatBufferBuilder, tags: Int) = builder.addOffset(58, tags, 0)
        fun createTagsVector(builder: FlatBufferBuilder, data: IntArray) : Int {
            builder.startVector(4, data.size, 4)
            for (i in data.size - 1 downTo 0) {
                builder.addOffset(data[i])
            }
            return builder.endVector()
        }
        fun startTagsVector(builder: FlatBufferBuilder, numElems: Int) = builder.startVector(4, numElems, 4)
        fun addDataMode(builder: FlatBufferBuilder, dataMode: Byte) = builder.addByte(59, dataMode, 0)
        fun addCreatedAt(builder: FlatBufferBuilder, createdAt: Int) = builder.addOffset(60, createdAt, 0)
        fun addCreatedBy(builder: FlatBufferBuilder, createdBy: Int) = builder.addOffset(61, createdBy, 0)
        fun addStateVector1(builder: FlatBufferBuilder, stateVector1: Int) = builder.addOffset(62, stateVector1, 0)
        fun addStateVector2(builder: FlatBufferBuilder, stateVector2: Int) = builder.addOffset(63, stateVector2, 0)
        fun addSatNo1(builder: FlatBufferBuilder, satNo1: Int) = builder.addInt(64, satNo1, 0)
        fun addSatNo2(builder: FlatBufferBuilder, satNo2: Int) = builder.addInt(65, satNo2, 0)
        fun addOnOrbit1(builder: FlatBufferBuilder, onOrbit1: Int) = builder.addOffset(66, onOrbit1, 0)
        fun addOnOrbit2(builder: FlatBufferBuilder, onOrbit2: Int) = builder.addOffset(67, onOrbit2, 0)
        fun addOrigIdOnOrbit1(builder: FlatBufferBuilder, origIdOnOrbit1: Int) = builder.addOffset(68, origIdOnOrbit1, 0)
        fun addOrigIdOnOrbit2(builder: FlatBufferBuilder, origIdOnOrbit2: Int) = builder.addOffset(69, origIdOnOrbit2, 0)
        fun addOrigNetwork(builder: FlatBufferBuilder, origNetwork: Int) = builder.addOffset(70, origNetwork, 0)
        fun endConjunction_Full(builder: FlatBufferBuilder) : Int {
            val o = builder.endTable()
            return o
        }
        fun finishConjunctionFullBuffer(builder: FlatBufferBuilder, offset: Int) = builder.finish(offset, "CONJ")
        fun finishSizePrefixedConjunction_FullBuffer(builder: FlatBufferBuilder, offset: Int) = builder.finishSizePrefixed(offset, "CONJ")
    }
}
