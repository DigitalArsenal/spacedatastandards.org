// automatically generated by the FlatBuffers compiler, do not modify

import com.google.flatbuffers.BaseVector
import com.google.flatbuffers.BooleanVector
import com.google.flatbuffers.ByteVector
import com.google.flatbuffers.Constants
import com.google.flatbuffers.DoubleVector
import com.google.flatbuffers.FlatBufferBuilder
import com.google.flatbuffers.FloatVector
import com.google.flatbuffers.LongVector
import com.google.flatbuffers.StringVector
import com.google.flatbuffers.Struct
import com.google.flatbuffers.Table
import com.google.flatbuffers.UnionVector
import java.nio.ByteBuffer
import java.nio.ByteOrder
import kotlin.math.sign

/**
 * /// Planned start and stop for the collection.
 */
@Suppress("unused")
class ISRCollectionPlanned_Full : Table() {

    fun __init(_i: Int, _bb: ByteBuffer)  {
        __reset(_i, _bb)
    }
    fun __assign(_i: Int, _bb: ByteBuffer) : ISRCollectionPlanned_Full {
        __init(_i, _bb)
        return this
    }
    /**
     * Start time of collection, in ISO 8601 UTC format.
     * Example: /// Example: 2021-01-19T01:01:15.001Z
     * Constraints: No constraints specified.
     */
    val start : String?
        get() {
            val o = __offset(4)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val startAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(4, 1)
    fun startInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 4, 1)
    /**
     * Stop time of collection, in ISO 8601 UTC format.
     * Example: /// Example: 2021-01-19T01:01:15.001Z
     * Constraints: No constraints specified.
     */
    val stop : String?
        get() {
            val o = __offset(6)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val stopAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(6, 1)
    fun stopInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 6, 1)
    /**
     * Additional start and stop for the collection.
     * Example: /// Example: No example provided.
     * Constraints: No constraints specified.
     */
    fun additional(j: Int) : String? {
        val o = __offset(8)
        return if (o != 0) {
            __string(__vector(o) + j * 4)
        } else {
            null
        }
    }
    val additionalLength : Int
        get() {
            val o = __offset(8); return if (o != 0) __vector_len(o) else 0
        }
    companion object {
        fun validateVersion() = Constants.FLATBUFFERS_24_3_25()
        fun getRootAsISRCollectionPlanned_Full(_bb: ByteBuffer): ISRCollectionPlanned_Full = getRootAsISRCollectionPlanned_Full(_bb, ISRCollectionPlanned_Full())
        fun getRootAsISRCollectionPlanned_Full(_bb: ByteBuffer, obj: ISRCollectionPlanned_Full): ISRCollectionPlanned_Full {
            _bb.order(ByteOrder.LITTLE_ENDIAN)
            return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb))
        }
        fun ISRCollectionPlanned_FullBufferHasIdentifier(_bb: ByteBuffer) : Boolean = __has_identifier(_bb, "ISRC")
        fun createISRCollectionPlanned_Full(builder: FlatBufferBuilder, startOffset: Int, stopOffset: Int, additionalOffset: Int) : Int {
            builder.startTable(3)
            addAdditional(builder, additionalOffset)
            addStop(builder, stopOffset)
            addStart(builder, startOffset)
            return endISRCollectionPlanned_Full(builder)
        }
        fun startISRCollectionPlanned_Full(builder: FlatBufferBuilder) = builder.startTable(3)
        fun addStart(builder: FlatBufferBuilder, start: Int) = builder.addOffset(0, start, 0)
        fun addStop(builder: FlatBufferBuilder, stop: Int) = builder.addOffset(1, stop, 0)
        fun addAdditional(builder: FlatBufferBuilder, additional: Int) = builder.addOffset(2, additional, 0)
        fun createAdditionalVector(builder: FlatBufferBuilder, data: IntArray) : Int {
            builder.startVector(4, data.size, 4)
            for (i in data.size - 1 downTo 0) {
                builder.addOffset(data[i])
            }
            return builder.endVector()
        }
        fun startAdditionalVector(builder: FlatBufferBuilder, numElems: Int) = builder.startVector(4, numElems, 4)
        fun endISRCollectionPlanned_Full(builder: FlatBufferBuilder) : Int {
            val o = builder.endTable()
            return o
        }
        fun finishISRCollectionPlannedFullBuffer(builder: FlatBufferBuilder, offset: Int) = builder.finish(offset, "ISRC")
        fun finishSizePrefixedISRCollectionPlanned_FullBuffer(builder: FlatBufferBuilder, offset: Int) = builder.finishSizePrefixed(offset, "ISRC")
    }
}
