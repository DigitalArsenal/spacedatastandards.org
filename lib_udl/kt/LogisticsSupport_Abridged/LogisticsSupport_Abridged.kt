// automatically generated by the FlatBuffers compiler, do not modify

import com.google.flatbuffers.BaseVector
import com.google.flatbuffers.BooleanVector
import com.google.flatbuffers.ByteVector
import com.google.flatbuffers.Constants
import com.google.flatbuffers.DoubleVector
import com.google.flatbuffers.FlatBufferBuilder
import com.google.flatbuffers.FloatVector
import com.google.flatbuffers.LongVector
import com.google.flatbuffers.StringVector
import com.google.flatbuffers.Struct
import com.google.flatbuffers.Table
import com.google.flatbuffers.UnionVector
import java.nio.ByteBuffer
import java.nio.ByteOrder
import kotlin.math.sign

/**
 * /// Comprehensive logistical details concerning the planned support of maintenance operations required by an aircraft, including transportation information, supplies coordination, and service personnel.
 */
@Suppress("unused")
class LogisticsSupport_Abridged : Table() {

    fun __init(_i: Int, _bb: ByteBuffer)  {
        __reset(_i, _bb)
    }
    fun __assign(_i: Int, _bb: ByteBuffer) : LogisticsSupport_Abridged {
        __init(_i, _bb)
        return this
    }
    /**
     * Unique identifier of the record, auto-generated by the system if not provided on create operations.
     * Example: /// Example: LOGISTICS-SUPPORT-DETAILS UUID
     * Constraints: Minimum length = 1, Maximum length = 36
     */
    val id : String?
        get() {
            val o = __offset(4)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val idAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(4, 1)
    fun idInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 4, 1)
    /**
     * Classification marking of the data in IC/CAPCO Portion-marked format.
     * Example: /// Example: U
     * Constraints: Minimum length = 1, Maximum length = 128
     */
    val classificationMarking : String?
        get() {
            val o = __offset(6)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val classificationMarkingAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(6, 1)
    fun classificationMarkingInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 6, 1)
    /**
     * Optional system identifier from external systs. This field has no meaning within UDL and is provided as a convenience for systems that require tracking of an internal system generated ID.
     * Example: /// Example: GDSSBL012307131347070165
     * Constraints: Minimum length = 0, Maximum length = 24
     */
    val extSystemId : String?
        get() {
            val o = __offset(8)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val extSystemIdAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(8, 1)
    fun extSystemIdInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 8, 1)
    /**
     * The tail number of the aircraft that is the subject of this LogisticsSupportDetails record.
     * Example: /// Example: 99290
     * Constraints: Minimum length = 0, Maximum length = 7
     */
    val tailNumber : String?
        get() {
            val o = __offset(10)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val tailNumberAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(10, 1)
    fun tailNumberInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 10, 1)
    /**
     * The aircraft Model Design Series (MDS) designation (e.g. E-2C HAWKEYE, F-15 EAGLE, KC-130 HERCULES, etc.) of this aircraft. Intended as, but not constrained to, MIL-STD-6016 environment dependent specific type designations.
     * Example: /// Example: CO17A
     * Constraints: Minimum length = 0, Maximum length = 8
     */
    val aircraftMds : String?
        get() {
            val o = __offset(12)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val aircraftMdsAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(12, 1)
    fun aircraftMdsInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 12, 1)
    /**
     * The current ICAO of the aircraft that is the subject of this LogisticsSupportDetails record.
     * Example: /// Example: KCOS
     * Constraints: Minimum length = 0, Maximum length = 4
     */
    val currIcao : String?
        get() {
            val o = __offset(14)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val currIcaoAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(14, 1)
    fun currIcaoInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 14, 1)
    /**
     * The supplying ICAO of the aircraft that is the subject of this LogisticsSupportDetails record.
     * Example: /// Example: KCOS
     * Constraints: Minimum length = 0, Maximum length = 4
     */
    val suppIcao : String?
        get() {
            val o = __offset(16)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val suppIcaoAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(16, 1)
    fun suppIcaoInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 16, 1)
    /**
     * The time this report was created, in ISO 8601 UTC format with millisecond precision.
     * Example: /// Example: 2023-07-13T13:47:00.123Z
     * Constraints: No constraints specified.
     */
    val rptCreatedTime : String?
        get() {
            val o = __offset(18)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val rptCreatedTimeAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(18, 1)
    fun rptCreatedTimeInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 18, 1)
    /**
     * The time this report was closed, in ISO 8601 UTC format with millisecond precision.
     * Example: /// Example: 2023-07-13T13:47:00.123Z
     * Constraints: No constraints specified.
     */
    val rptClosedTime : String?
        get() {
            val o = __offset(20)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val rptClosedTimeAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(20, 1)
    fun rptClosedTimeInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 20, 1)
    /**
     * The time indicating when a given aircraft breaks for a mission essential reason. This datetime should be in ISO 8601 UTC format with millisecond precision.
     * Example: /// Example: 2023-07-13T13:47:00.123Z
     * Constraints: No constraints specified.
     */
    val meTime : String?
        get() {
            val o = __offset(22)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val meTimeAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(22, 1)
    fun meTimeInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 22, 1)
    /**
     * The time indicating when all mission essential problems with a given aircraft have been fixed and is mission capable. This datetime should be in ISO 8601 UTC format with millisecond precision.
     * Example: /// Example: 2023-07-13T13:47:00.123Z
     * Constraints: No constraints specified.
     */
    val mcTime : String?
        get() {
            val o = __offset(24)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val mcTimeAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(24, 1)
    fun mcTimeInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 24, 1)
    /**
     * This field identifies the pacing event for bringing the aircraft to Mission Capable status.  It is used in calculating the Estimated Time Mission Capable (ETMC) value.  Acceptable values are WA (Will Advise), INW (In Work), P+hhh.h (where P=parts and hhh.h is the number of hours up to 999 plus tenths of hours), EQ+hhh.h (EQ=equipment), MRT+hhh.h (MRT=maintenance recovery team).
     * Example: /// Example: WA
     * Constraints: Minimum length = 0, Maximum length = 9
     */
    val logisticAction : String?
        get() {
            val o = __offset(26)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val logisticActionAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(26, 1)
    fun logisticActionInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 26, 1)
    /**
     * The identifier that represents a Logistics Master Record.
     * Example: /// Example: L62017
     * Constraints: Minimum length = 0, Maximum length = 6
     */
    val logisticsRecordId : String?
        get() {
            val o = __offset(28)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val logisticsRecordIdAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(28, 1)
    fun logisticsRecordIdInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 28, 1)
    /**
     * The estimated time mission capable for the aircraft, in ISO 8601 UCT format with millisecond precision. This is the estimated time when the aircraft is mission ready.
     * Example: /// Example: 2023-07-13T13:47:00.123Z
     * Constraints: No constraints specified.
     */
    val etic : String?
        get() {
            val o = __offset(30)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val eticAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(30, 1)
    fun eticInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 30, 1)
    /**
     * Logistics estimated time mission capable.
     * Example: /// Example: 2023-07-13T13:47:00.123Z
     * Constraints: No constraints specified.
     */
    val etmc : String?
        get() {
            val o = __offset(32)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val etmcAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(32, 1)
    fun etmcInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 32, 1)
    /**
     * The maintenance status code of the aircraft which may be based on pilot descriptions or evaluation codes. Contact the source provider for details.
     * Example: /// Example: NMCMU
     * Constraints: Minimum length = 0, Maximum length = 6
     */
    val maintStatusCode : String?
        get() {
            val o = __offset(34)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val maintStatusCodeAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(34, 1)
    fun maintStatusCodeInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 34, 1)
    /**
     * This is used to indicate whether a closed master record has been reopened.
     * Example: /// Example: True
     * Constraints: No constraints specified.
     */
    val reopenFlag : Boolean
        get() {
            val o = __offset(36)
            return if(o != 0) 0.toByte() != bb.get(o + bb_pos) else false
        }
    /**
     * The organization that owns this logistics record.
     * Example: /// Example: EXAMPLE_OWNER
     * Constraints: Minimum length = 0, Maximum length = 250
     */
    val owner : String?
        get() {
            val o = __offset(38)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val ownerAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(38, 1)
    fun ownerInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 38, 1)
    /**
     * Remarks associated with this LogisticsSupport record.
     * Example: /// Example: No example provided.
     * Constraints: No constraints specified.
     */
    fun logisticsRemarks(j: Int) : String? {
        val o = __offset(40)
        return if (o != 0) {
            __string(__vector(o) + j * 4)
        } else {
            null
        }
    }
    val logisticsRemarksLength : Int
        get() {
            val o = __offset(40); return if (o != 0) __vector_len(o) else 0
        }
    /**
     * Discrepancy information associated with this LogisticsSupport record.
     * Example: /// Example: No example provided.
     * Constraints: No constraints specified.
     */
    fun logisticsDiscrepancyInfos(j: Int) : String? {
        val o = __offset(42)
        return if (o != 0) {
            __string(__vector(o) + j * 4)
        } else {
            null
        }
    }
    val logisticsDiscrepancyInfosLength : Int
        get() {
            val o = __offset(42); return if (o != 0) __vector_len(o) else 0
        }
    /**
     * Transportation plans associated with this LogisticsSupport record, used to coordinate maintenance efforts.
     * Example: /// Example: No example provided.
     * Constraints: No constraints specified.
     */
    fun logisticsTransportationPlans(j: Int) : String? {
        val o = __offset(44)
        return if (o != 0) {
            __string(__vector(o) + j * 4)
        } else {
            null
        }
    }
    val logisticsTransportationPlansLength : Int
        get() {
            val o = __offset(44); return if (o != 0) __vector_len(o) else 0
        }
    /**
     * Support items associated with this LogisticsSupport record.
     * Example: /// Example: No example provided.
     * Constraints: No constraints specified.
     */
    fun logisticsSupportItems(j: Int) : String? {
        val o = __offset(46)
        return if (o != 0) {
            __string(__vector(o) + j * 4)
        } else {
            null
        }
    }
    val logisticsSupportItemsLength : Int
        get() {
            val o = __offset(46); return if (o != 0) __vector_len(o) else 0
        }
    /**
     * The originating source network on which this record was created, auto-populated by the system.
     * Example: /// Example: ORIG
     * Constraints: Minimum length = 0, Maximum length = 32
     */
    val origNetwork : String?
        get() {
            val o = __offset(48)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val origNetworkAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(48, 1)
    fun origNetworkInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 48, 1)
    /**
     * Time the row was created in the database.
     * Example: /// Example: 2018-01-01T16:00:00.123Z
     * Constraints: No constraints specified.
     */
    val createdAt : String?
        get() {
            val o = __offset(50)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val createdAtAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(50, 1)
    fun createdAtInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 50, 1)
    /**
     * Application user who created the row in the database.
     * Example: /// Example: some.user
     * Constraints: Minimum length = 1, Maximum length = 64
     */
    val createdBy : String?
        get() {
            val o = __offset(52)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val createdByAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(52, 1)
    fun createdByInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 52, 1)
    /**
     * Time the row was updated in the database, auto-populated by the system.
     * Example: /// Example: 2022-01-01T16:00:00.123Z
     * Constraints: No constraints specified.
     */
    val updatedAt : String?
        get() {
            val o = __offset(54)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val updatedAtAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(54, 1)
    fun updatedAtInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 54, 1)
    /**
     * Application user who updated the row in the database, auto-populated by the system.
     * Example: /// Example: some.user
     * Constraints: Minimum length = 1, Maximum length = 64
     */
    val updatedBy : String?
        get() {
            val o = __offset(56)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val updatedByAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(56, 1)
    fun updatedByInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 56, 1)
    /**
     * Source of the data.
     * Example: /// Example: Bluestaq
     * Constraints: Minimum length = 1, Maximum length = 36
     */
    val source : String?
        get() {
            val o = __offset(58)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val sourceAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(58, 1)
    fun sourceInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 58, 1)
    /**
     * Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
     * Example: /// Example: THIRD_PARTY_DATASOURCE
     * Constraints: Minimum length = 0, Maximum length = 64
     */
    val origin : String?
        get() {
            val o = __offset(60)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val originAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(60, 1)
    fun originInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 60, 1)
    /**
     * Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
     * EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
     * REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
     * SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
     * TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
     * Example: /// Example: TEST
     * Constraints: Minimum length = 1, Maximum length = 32
     */
    val dataMode : Byte
        get() {
            val o = __offset(62)
            return if(o != 0) bb.get(o + bb_pos) else 0
        }
    companion object {
        fun validateVersion() = Constants.FLATBUFFERS_24_3_25()
        fun getRootAsLogisticsSupport_Abridged(_bb: ByteBuffer): LogisticsSupport_Abridged = getRootAsLogisticsSupport_Abridged(_bb, LogisticsSupport_Abridged())
        fun getRootAsLogisticsSupport_Abridged(_bb: ByteBuffer, obj: LogisticsSupport_Abridged): LogisticsSupport_Abridged {
            _bb.order(ByteOrder.LITTLE_ENDIAN)
            return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb))
        }
        fun LogisticsSupport_AbridgedBufferHasIdentifier(_bb: ByteBuffer) : Boolean = __has_identifier(_bb, "LOGI")
        fun createLogisticsSupport_Abridged(builder: FlatBufferBuilder, idOffset: Int, classificationMarkingOffset: Int, extSystemIdOffset: Int, tailNumberOffset: Int, aircraftMdsOffset: Int, currIcaoOffset: Int, suppIcaoOffset: Int, rptCreatedTimeOffset: Int, rptClosedTimeOffset: Int, meTimeOffset: Int, mcTimeOffset: Int, logisticActionOffset: Int, logisticsRecordIdOffset: Int, eticOffset: Int, etmcOffset: Int, maintStatusCodeOffset: Int, reopenFlag: Boolean, ownerOffset: Int, logisticsRemarksOffset: Int, logisticsDiscrepancyInfosOffset: Int, logisticsTransportationPlansOffset: Int, logisticsSupportItemsOffset: Int, origNetworkOffset: Int, createdAtOffset: Int, createdByOffset: Int, updatedAtOffset: Int, updatedByOffset: Int, sourceOffset: Int, originOffset: Int, dataMode: Byte) : Int {
            builder.startTable(30)
            addOrigin(builder, originOffset)
            addSource(builder, sourceOffset)
            addUpdatedBy(builder, updatedByOffset)
            addUpdatedAt(builder, updatedAtOffset)
            addCreatedBy(builder, createdByOffset)
            addCreatedAt(builder, createdAtOffset)
            addOrigNetwork(builder, origNetworkOffset)
            addLogisticsSupportItems(builder, logisticsSupportItemsOffset)
            addLogisticsTransportationPlans(builder, logisticsTransportationPlansOffset)
            addLogisticsDiscrepancyInfos(builder, logisticsDiscrepancyInfosOffset)
            addLogisticsRemarks(builder, logisticsRemarksOffset)
            addOwner(builder, ownerOffset)
            addMaintStatusCode(builder, maintStatusCodeOffset)
            addEtmc(builder, etmcOffset)
            addEtic(builder, eticOffset)
            addLogisticsRecordId(builder, logisticsRecordIdOffset)
            addLogisticAction(builder, logisticActionOffset)
            addMcTime(builder, mcTimeOffset)
            addMeTime(builder, meTimeOffset)
            addRptClosedTime(builder, rptClosedTimeOffset)
            addRptCreatedTime(builder, rptCreatedTimeOffset)
            addSuppICAO(builder, suppIcaoOffset)
            addCurrICAO(builder, currIcaoOffset)
            addAircraftMDS(builder, aircraftMdsOffset)
            addTailNumber(builder, tailNumberOffset)
            addExtSystemId(builder, extSystemIdOffset)
            addClassificationMarking(builder, classificationMarkingOffset)
            addId(builder, idOffset)
            addDataMode(builder, dataMode)
            addReopenFlag(builder, reopenFlag)
            return endLogisticsSupport_Abridged(builder)
        }
        fun startLogisticsSupport_Abridged(builder: FlatBufferBuilder) = builder.startTable(30)
        fun addId(builder: FlatBufferBuilder, id: Int) = builder.addOffset(0, id, 0)
        fun addClassificationMarking(builder: FlatBufferBuilder, classificationMarking: Int) = builder.addOffset(1, classificationMarking, 0)
        fun addExtSystemId(builder: FlatBufferBuilder, extSystemId: Int) = builder.addOffset(2, extSystemId, 0)
        fun addTailNumber(builder: FlatBufferBuilder, tailNumber: Int) = builder.addOffset(3, tailNumber, 0)
        fun addAircraftMDS(builder: FlatBufferBuilder, aircraftMds: Int) = builder.addOffset(4, aircraftMds, 0)
        fun addCurrICAO(builder: FlatBufferBuilder, currIcao: Int) = builder.addOffset(5, currIcao, 0)
        fun addSuppICAO(builder: FlatBufferBuilder, suppIcao: Int) = builder.addOffset(6, suppIcao, 0)
        fun addRptCreatedTime(builder: FlatBufferBuilder, rptCreatedTime: Int) = builder.addOffset(7, rptCreatedTime, 0)
        fun addRptClosedTime(builder: FlatBufferBuilder, rptClosedTime: Int) = builder.addOffset(8, rptClosedTime, 0)
        fun addMeTime(builder: FlatBufferBuilder, meTime: Int) = builder.addOffset(9, meTime, 0)
        fun addMcTime(builder: FlatBufferBuilder, mcTime: Int) = builder.addOffset(10, mcTime, 0)
        fun addLogisticAction(builder: FlatBufferBuilder, logisticAction: Int) = builder.addOffset(11, logisticAction, 0)
        fun addLogisticsRecordId(builder: FlatBufferBuilder, logisticsRecordId: Int) = builder.addOffset(12, logisticsRecordId, 0)
        fun addEtic(builder: FlatBufferBuilder, etic: Int) = builder.addOffset(13, etic, 0)
        fun addEtmc(builder: FlatBufferBuilder, etmc: Int) = builder.addOffset(14, etmc, 0)
        fun addMaintStatusCode(builder: FlatBufferBuilder, maintStatusCode: Int) = builder.addOffset(15, maintStatusCode, 0)
        fun addReopenFlag(builder: FlatBufferBuilder, reopenFlag: Boolean) = builder.addBoolean(16, reopenFlag, false)
        fun addOwner(builder: FlatBufferBuilder, owner: Int) = builder.addOffset(17, owner, 0)
        fun addLogisticsRemarks(builder: FlatBufferBuilder, logisticsRemarks: Int) = builder.addOffset(18, logisticsRemarks, 0)
        fun createLogisticsRemarksVector(builder: FlatBufferBuilder, data: IntArray) : Int {
            builder.startVector(4, data.size, 4)
            for (i in data.size - 1 downTo 0) {
                builder.addOffset(data[i])
            }
            return builder.endVector()
        }
        fun startLogisticsRemarksVector(builder: FlatBufferBuilder, numElems: Int) = builder.startVector(4, numElems, 4)
        fun addLogisticsDiscrepancyInfos(builder: FlatBufferBuilder, logisticsDiscrepancyInfos: Int) = builder.addOffset(19, logisticsDiscrepancyInfos, 0)
        fun createLogisticsDiscrepancyInfosVector(builder: FlatBufferBuilder, data: IntArray) : Int {
            builder.startVector(4, data.size, 4)
            for (i in data.size - 1 downTo 0) {
                builder.addOffset(data[i])
            }
            return builder.endVector()
        }
        fun startLogisticsDiscrepancyInfosVector(builder: FlatBufferBuilder, numElems: Int) = builder.startVector(4, numElems, 4)
        fun addLogisticsTransportationPlans(builder: FlatBufferBuilder, logisticsTransportationPlans: Int) = builder.addOffset(20, logisticsTransportationPlans, 0)
        fun createLogisticsTransportationPlansVector(builder: FlatBufferBuilder, data: IntArray) : Int {
            builder.startVector(4, data.size, 4)
            for (i in data.size - 1 downTo 0) {
                builder.addOffset(data[i])
            }
            return builder.endVector()
        }
        fun startLogisticsTransportationPlansVector(builder: FlatBufferBuilder, numElems: Int) = builder.startVector(4, numElems, 4)
        fun addLogisticsSupportItems(builder: FlatBufferBuilder, logisticsSupportItems: Int) = builder.addOffset(21, logisticsSupportItems, 0)
        fun createLogisticsSupportItemsVector(builder: FlatBufferBuilder, data: IntArray) : Int {
            builder.startVector(4, data.size, 4)
            for (i in data.size - 1 downTo 0) {
                builder.addOffset(data[i])
            }
            return builder.endVector()
        }
        fun startLogisticsSupportItemsVector(builder: FlatBufferBuilder, numElems: Int) = builder.startVector(4, numElems, 4)
        fun addOrigNetwork(builder: FlatBufferBuilder, origNetwork: Int) = builder.addOffset(22, origNetwork, 0)
        fun addCreatedAt(builder: FlatBufferBuilder, createdAt: Int) = builder.addOffset(23, createdAt, 0)
        fun addCreatedBy(builder: FlatBufferBuilder, createdBy: Int) = builder.addOffset(24, createdBy, 0)
        fun addUpdatedAt(builder: FlatBufferBuilder, updatedAt: Int) = builder.addOffset(25, updatedAt, 0)
        fun addUpdatedBy(builder: FlatBufferBuilder, updatedBy: Int) = builder.addOffset(26, updatedBy, 0)
        fun addSource(builder: FlatBufferBuilder, source: Int) = builder.addOffset(27, source, 0)
        fun addOrigin(builder: FlatBufferBuilder, origin: Int) = builder.addOffset(28, origin, 0)
        fun addDataMode(builder: FlatBufferBuilder, dataMode: Byte) = builder.addByte(29, dataMode, 0)
        fun endLogisticsSupport_Abridged(builder: FlatBufferBuilder) : Int {
            val o = builder.endTable()
            return o
        }
        fun finishLogisticsSupportAbridgedBuffer(builder: FlatBufferBuilder, offset: Int) = builder.finish(offset, "LOGI")
        fun finishSizePrefixedLogisticsSupport_AbridgedBuffer(builder: FlatBufferBuilder, offset: Int) = builder.finishSizePrefixed(offset, "LOGI")
    }
}
