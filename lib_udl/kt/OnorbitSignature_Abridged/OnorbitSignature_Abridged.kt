// automatically generated by the FlatBuffers compiler, do not modify

import com.google.flatbuffers.BaseVector
import com.google.flatbuffers.BooleanVector
import com.google.flatbuffers.ByteVector
import com.google.flatbuffers.Constants
import com.google.flatbuffers.DoubleVector
import com.google.flatbuffers.FlatBufferBuilder
import com.google.flatbuffers.FloatVector
import com.google.flatbuffers.LongVector
import com.google.flatbuffers.StringVector
import com.google.flatbuffers.Struct
import com.google.flatbuffers.Table
import com.google.flatbuffers.UnionVector
import java.nio.ByteBuffer
import java.nio.ByteOrder
import kotlin.math.sign

/**
 * /// Contains a list of common information across both Radar and EO observations.
 */
@Suppress("unused")
class OnorbitSignature_Abridged : Table() {

    fun __init(_i: Int, _bb: ByteBuffer)  {
        __reset(_i, _bb)
    }
    fun __assign(_i: Int, _bb: ByteBuffer) : OnorbitSignature_Abridged {
        __init(_i, _bb)
        return this
    }
    /**
     * No description provided.
     * Example: /// Example: No example provided.
     * Constraints: No constraints specified.
     */
    val eoObservation : String?
        get() {
            val o = __offset(4)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val eoObservationAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(4, 1)
    fun eoObservationInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 4, 1)
    /**
     * No description provided.
     * Example: /// Example: No example provided.
     * Constraints: No constraints specified.
     */
    val radarObservation : String?
        get() {
            val o = __offset(6)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val radarObservationAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(6, 1)
    fun radarObservationInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 6, 1)
    /**
     * No description provided.
     * Example: /// Example: No example provided.
     * Constraints: No constraints specified.
     */
    val rfObservation : String?
        get() {
            val o = __offset(8)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val rfObservationAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(8, 1)
    fun rfObservationInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 8, 1)
    companion object {
        fun validateVersion() = Constants.FLATBUFFERS_24_3_25()
        fun getRootAsOnorbitSignature_Abridged(_bb: ByteBuffer): OnorbitSignature_Abridged = getRootAsOnorbitSignature_Abridged(_bb, OnorbitSignature_Abridged())
        fun getRootAsOnorbitSignature_Abridged(_bb: ByteBuffer, obj: OnorbitSignature_Abridged): OnorbitSignature_Abridged {
            _bb.order(ByteOrder.LITTLE_ENDIAN)
            return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb))
        }
        fun OnorbitSignature_AbridgedBufferHasIdentifier(_bb: ByteBuffer) : Boolean = __has_identifier(_bb, "ONOR")
        fun createOnorbitSignature_Abridged(builder: FlatBufferBuilder, eoObservationOffset: Int, radarObservationOffset: Int, rfObservationOffset: Int) : Int {
            builder.startTable(3)
            addRfObservation(builder, rfObservationOffset)
            addRadarObservation(builder, radarObservationOffset)
            addEoObservation(builder, eoObservationOffset)
            return endOnorbitSignature_Abridged(builder)
        }
        fun startOnorbitSignature_Abridged(builder: FlatBufferBuilder) = builder.startTable(3)
        fun addEoObservation(builder: FlatBufferBuilder, eoObservation: Int) = builder.addOffset(0, eoObservation, 0)
        fun addRadarObservation(builder: FlatBufferBuilder, radarObservation: Int) = builder.addOffset(1, radarObservation, 0)
        fun addRfObservation(builder: FlatBufferBuilder, rfObservation: Int) = builder.addOffset(2, rfObservation, 0)
        fun endOnorbitSignature_Abridged(builder: FlatBufferBuilder) : Int {
            val o = builder.endTable()
            return o
        }
        fun finishOnorbitSignatureAbridgedBuffer(builder: FlatBufferBuilder, offset: Int) = builder.finish(offset, "ONOR")
        fun finishSizePrefixedOnorbitSignature_AbridgedBuffer(builder: FlatBufferBuilder, offset: Int) = builder.finishSizePrefixed(offset, "ONOR")
    }
}
