// automatically generated by the FlatBuffers compiler, do not modify

import com.google.flatbuffers.BaseVector
import com.google.flatbuffers.BooleanVector
import com.google.flatbuffers.ByteVector
import com.google.flatbuffers.Constants
import com.google.flatbuffers.DoubleVector
import com.google.flatbuffers.FlatBufferBuilder
import com.google.flatbuffers.FloatVector
import com.google.flatbuffers.LongVector
import com.google.flatbuffers.StringVector
import com.google.flatbuffers.Struct
import com.google.flatbuffers.Table
import com.google.flatbuffers.UnionVector
import java.nio.ByteBuffer
import java.nio.ByteOrder
import kotlin.math.sign

/**
 * /// Medication specifics.
 */
@Suppress("unused")
class EvacMedication_Full : Table() {

    fun __init(_i: Int, _bb: ByteBuffer)  {
        __reset(_i, _bb)
    }
    fun __assign(_i: Int, _bb: ByteBuffer) : EvacMedication_Full {
        __init(_i, _bb)
        return this
    }
    /**
     * The type of medication administered.   Intended as, but not constrained to, K07.1 Medication Enumeration (CEFOTETAN, ABRASION, ABX, AMOXILOXACIN, ANALGESIC, COLLOID, CRYOPECIPITATES, CRYSTALLOID, EPINEPHRINE, ERTAPENEM, FENTANYL, HEXTEND, LACTATED RINGERS, MOBIC, MORPHINE, NARCOTIC, NS, PENICILLIN, PLASMA, PLATELETS, PRBC, TYLENOL, WHOLE BLOOD MT).
     * Example: /// Example: TYLENOL
     * Constraints: Minimum length = 0, Maximum length = 64
     */
    val type : String?
        get() {
            val o = __offset(4)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val typeAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(4, 1)
    fun typeInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 4, 1)
    /**
     * Body part location or body part referenced for medication. Intended as, but not constrained to, K07.1 Body Location Enumeration (e.g. ANKLE LEFT BACK, ANKLE LEFT FRONT, ANKLE RIGHT BACK, ANKLE RIGHT FRONT, ARM LEFT BACK, ARM LEFT ELBOW BACK, ARM LEFT ELBOW FRONT, ARM LEFT FRONT, ARM LEFT LOWER BACK, etc.).
     * Example: /// Example: ARM LEFT BACK
     * Constraints: Minimum length = 0, Maximum length = 32
     */
    val bodyPart : String?
        get() {
            val o = __offset(6)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val bodyPartAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(6, 1)
    fun bodyPartInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 6, 1)
    /**
     * Quantity of medicine or drug administered or recommended to be taken at a particular time.
     * Example: /// Example: 800mg
     * Constraints: Minimum length = 0, Maximum length = 32
     */
    val dose : String?
        get() {
            val o = __offset(8)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val doseAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(8, 1)
    fun doseInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 8, 1)
    /**
     * Route of medication delivery (e.g. INJECTION, ORAL, etc.).
     * Example: /// Example: ORAL
     * Constraints: Minimum length = 0, Maximum length = 16
     */
    val adminRoute : String?
        get() {
            val o = __offset(10)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val adminRouteAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(10, 1)
    fun adminRouteInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 10, 1)
    /**
     * The time that the medication was administered in ISO 8601 UTC format.
     * Example: /// Example: 2021-10-15T16:00:00.123Z
     * Constraints: No constraints specified.
     */
    val time : String?
        get() {
            val o = __offset(12)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val timeAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(12, 1)
    fun timeInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 12, 1)
    /**
     * Additional comments on the patient's medication information.
     * Example: /// Example: Comments on the patient's medication information.
     * Constraints: Minimum length = 0, Maximum length = 1024
     */
    val comments : String?
        get() {
            val o = __offset(14)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val commentsAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(14, 1)
    fun commentsInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 14, 1)
    companion object {
        fun validateVersion() = Constants.FLATBUFFERS_24_3_25()
        fun getRootAsEvacMedication_Full(_bb: ByteBuffer): EvacMedication_Full = getRootAsEvacMedication_Full(_bb, EvacMedication_Full())
        fun getRootAsEvacMedication_Full(_bb: ByteBuffer, obj: EvacMedication_Full): EvacMedication_Full {
            _bb.order(ByteOrder.LITTLE_ENDIAN)
            return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb))
        }
        fun EvacMedication_FullBufferHasIdentifier(_bb: ByteBuffer) : Boolean = __has_identifier(_bb, "EVAC")
        fun createEvacMedication_Full(builder: FlatBufferBuilder, typeOffset: Int, bodyPartOffset: Int, doseOffset: Int, adminRouteOffset: Int, timeOffset: Int, commentsOffset: Int) : Int {
            builder.startTable(6)
            addComments(builder, commentsOffset)
            addTime(builder, timeOffset)
            addAdminRoute(builder, adminRouteOffset)
            addDose(builder, doseOffset)
            addBodyPart(builder, bodyPartOffset)
            addType(builder, typeOffset)
            return endEvacMedication_Full(builder)
        }
        fun startEvacMedication_Full(builder: FlatBufferBuilder) = builder.startTable(6)
        fun addType(builder: FlatBufferBuilder, type: Int) = builder.addOffset(0, type, 0)
        fun addBodyPart(builder: FlatBufferBuilder, bodyPart: Int) = builder.addOffset(1, bodyPart, 0)
        fun addDose(builder: FlatBufferBuilder, dose: Int) = builder.addOffset(2, dose, 0)
        fun addAdminRoute(builder: FlatBufferBuilder, adminRoute: Int) = builder.addOffset(3, adminRoute, 0)
        fun addTime(builder: FlatBufferBuilder, time: Int) = builder.addOffset(4, time, 0)
        fun addComments(builder: FlatBufferBuilder, comments: Int) = builder.addOffset(5, comments, 0)
        fun endEvacMedication_Full(builder: FlatBufferBuilder) : Int {
            val o = builder.endTable()
            return o
        }
        fun finishEvacMedicationFullBuffer(builder: FlatBufferBuilder, offset: Int) = builder.finish(offset, "EVAC")
        fun finishSizePrefixedEvacMedication_FullBuffer(builder: FlatBufferBuilder, offset: Int) = builder.finishSizePrefixed(offset, "EVAC")
    }
}
