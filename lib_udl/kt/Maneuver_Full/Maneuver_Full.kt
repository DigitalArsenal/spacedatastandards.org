// automatically generated by the FlatBuffers compiler, do not modify

import com.google.flatbuffers.BaseVector
import com.google.flatbuffers.BooleanVector
import com.google.flatbuffers.ByteVector
import com.google.flatbuffers.Constants
import com.google.flatbuffers.DoubleVector
import com.google.flatbuffers.FlatBufferBuilder
import com.google.flatbuffers.FloatVector
import com.google.flatbuffers.LongVector
import com.google.flatbuffers.StringVector
import com.google.flatbuffers.Struct
import com.google.flatbuffers.Table
import com.google.flatbuffers.UnionVector
import java.nio.ByteBuffer
import java.nio.ByteOrder
import kotlin.math.sign

/**
 * /// Model representation of on-orbit object maneuver information for detected, possible, and confirmed maneuvers.
 */
@Suppress("unused")
class Maneuver_Full : Table() {

    fun __init(_i: Int, _bb: ByteBuffer)  {
        __reset(_i, _bb)
    }
    fun __assign(_i: Int, _bb: ByteBuffer) : Maneuver_Full {
        __init(_i, _bb)
        return this
    }
    /**
     * Unique identifier of the record, auto-generated by the system.
     * Example: /// Example: MANEUVER-ID
     * Constraints: Minimum length = 1, Maximum length = 36
     */
    val id : String?
        get() {
            val o = __offset(4)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val idAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(4, 1)
    fun idInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 4, 1)
    /**
     * Classification marking of the data in IC/CAPCO Portion-marked format.
     * Example: /// Example: U
     * Constraints: Minimum length = 1, Maximum length = 128
     */
    val classificationMarking : String?
        get() {
            val o = __offset(6)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val classificationMarkingAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(6, 1)
    fun classificationMarkingInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 6, 1)
    /**
     * Satellite/Catalog number of the target on-orbit object.
     * Example: /// Example: 12
     * Constraints: No constraints specified.
     */
    val satNo : Int
        get() {
            val o = __offset(8)
            return if(o != 0) bb.getInt(o + bb_pos) else 0
        }
    /**
     * The time that the report or alert of this maneuver was generated, in ISO 8601 UTC format.
     * Example: /// Example: 2023-11-16T04:15:00.0001Z
     * Constraints: No constraints specified.
     */
    val reportTime : String?
        get() {
            val o = __offset(10)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val reportTimeAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(10, 1)
    fun reportTimeInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 10, 1)
    /**
     * Maneuver event start time in ISO 8601 UTC with microsecond precision. For maneuvers without start and end times, the start time is considered to be the maneuver event time.
     * Example: /// Example: 2023-11-16T01:05:16.835689Z
     * Constraints: No constraints specified.
     */
    val eventStartTime : String?
        get() {
            val o = __offset(12)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val eventStartTimeAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(12, 1)
    fun eventStartTimeInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 12, 1)
    /**
     * Maneuver event end time in ISO 8601 UTC with microsecond precision.
     * Example: /// Example: 2023-11-16T01:09:01.350012Z
     * Constraints: No constraints specified.
     */
    val eventEndTime : String?
        get() {
            val o = __offset(14)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val eventEndTimeAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(14, 1)
    fun eventEndTimeInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 14, 1)
    /**
     * The estimated total active burn time of a maneuver, in seconds. This includes the sum of all burns in numAccelPoints. Not to be confused with the total duration of the maneuver.
     * Example: /// Example: 600.72
     * Constraints: No constraints specified.
     */
    val totalBurnTime : Double
        get() {
            val o = __offset(16)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Maneuver orbit determination fit data end time in ISO 8601 UTC with microsecond precision.
     * Example: /// Example: 2023-11-16T03:55:51Z
     * Constraints: No constraints specified.
     */
    val odFitEndTime : String?
        get() {
            val o = __offset(18)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val odFitEndTimeAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(18, 1)
    fun odFitEndTimeInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 18, 1)
    /**
     * Target maneuvering on-orbit object. For the public catalog, the idOnOrbit is typically the satellite number as a string, but may be a UUID for analyst or other unknown or untracked satellites.
     * Example: /// Example: 12
     * Constraints: Minimum length = 0, Maximum length = 36
     */
    val idOnOrbit : String?
        get() {
            val o = __offset(20)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val idOnOrbitAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(20, 1)
    fun idOnOrbitInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 20, 1)
    /**
     * Optional ID of the sensor that detected this maneuver (for example, if detected by passive RF anomalies).
     * Example: /// Example: SENSOR-ID
     * Constraints: Minimum length = 0, Maximum length = 36
     */
    val idSensor : String?
        get() {
            val o = __offset(22)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val idSensorAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(22, 1)
    fun idSensorInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 22, 1)
    /**
     * Boolean indicating this maneuver was unable to be correlated to a known object. This flag should only be set to true by data providers after an attempt to correlate to an on-orbit object was made and failed. If unable to correlate, the 'origObjectId' field may be populated with an internal data provider specific identifier.
     * Example: /// Example: False
     * Constraints: No constraints specified.
     */
    val uct : Boolean
        get() {
            val o = __offset(24)
            return if(o != 0) 0.toByte() != bb.get(o + bb_pos) else false
        }
    /**
     * Uncertainty in the occurrence of this maneuver (0 - 1).
     * Example: /// Example: 0.5
     * Constraints: No constraints specified.
     */
    val maneuverUnc : Double
        get() {
            val o = __offset(26)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Optional purpose of the maneuver if known (e.g. North-South Station Keeping, East-West Station Keeping, Longitude Shift, Unknown).
     * Example: /// Example: North-South Station Keeping
     * Constraints: Minimum length = 0, Maximum length = 64
     */
    val characterization : String?
        get() {
            val o = __offset(28)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val characterizationAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(28, 1)
    fun characterizationInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 28, 1)
    /**
     * Uncertainty in the characterization or purpose assessment of this maneuver (0 - 1).
     * Example: /// Example: 0.15
     * Constraints: No constraints specified.
     */
    val characterizationUnc : Double
        get() {
            val o = __offset(30)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Optional source-provided identifier for this maneuver event. In the case where multiple maneuver records are submitted for the same event, this field can be used to tie them together to the same event.
     * Example: /// Example: EVENT-ID
     * Constraints: Minimum length = 0, Maximum length = 64
     */
    val eventId : String?
        get() {
            val o = __offset(32)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val eventIdAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(32, 1)
    fun eventIdInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 32, 1)
    /**
     * Identifier provided by source to indicate the target on-orbit object performing this maneuver. This may be an internal identifier and not necessarily a valid satellite number/ID.
     * Example: /// Example: ORIGOBJECT-ID
     * Constraints: Minimum length = 0, Maximum length = 64
     */
    val origObjectId : String?
        get() {
            val o = __offset(34)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val origObjectIdAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(34, 1)
    fun origObjectIdInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 34, 1)
    /**
     * Optional identifier provided by source to indicate the sensor identifier used to detect this event. This may be an internal identifier and not necessarily a valid sensor ID.
     * Example: /// Example: ORIGSENSOR-ID
     * Constraints: Minimum length = 0, Maximum length = 64
     */
    val origSensorId : String?
        get() {
            val o = __offset(36)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val origSensorIdAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(36, 1)
    fun origSensorIdInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 36, 1)
    /**
     * Status of this maneuver (CANCELLED, PLANNED, POSSIBLE, REDACTED, VERIFIED).
     * CANCELLED:  A previously planned maneuver whose execution was cancelled.
     * PLANNED:  A maneuver planned to take place at the eventStartTime.
     * POSSIBLE:  A possible maneuver detected by observation of the spacecraft or by evaluation of the spacecraft orbit.
     * REDACTED:  A redaction of a reported possible maneuver that has been determined to have not taken place after further observation/evaluation.
     * VERIFIED:  A maneuver whose execution has been verified, either by the owner/operator or observation/evaluation.
     * Example: /// Example: POSSIBLE
     * Constraints: Minimum length = 0, Maximum length = 32
     */
    val status : String?
        get() {
            val o = __offset(38)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val statusAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(38, 1)
    fun statusInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 38, 1)
    /**
     * Magnitude, in km, of the difference in the pre- and post-maneuver position vectors at the maneuver event time.
     * Example: /// Example: 0.715998327
     * Constraints: No constraints specified.
     */
    val deltaPos : Double
        get() {
            val o = __offset(40)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Magnitude, in km, of the difference in the pre- and post-maneuver position vectors in the direction of the pre-maneuver 'U' unit vector at the maneuver event time.
     * Example: /// Example: -0.022172844
     * Constraints: No constraints specified.
     */
    val deltaPosU : Double
        get() {
            val o = __offset(42)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Magnitude, in km, of the difference in the pre- and post-maneuver position vectors in the direction of the pre-maneuver 'V' unit vector at the maneuver event time.
     * Example: /// Example: -0.033700154
     * Constraints: No constraints specified.
     */
    val deltaPosV : Double
        get() {
            val o = __offset(44)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Magnitude, in km, of the difference in the pre- and post-maneuver position vectors in the direction of the pre-maneuver 'W' unit vector at the maneuver event time.
     * Example: /// Example: -0.714861014
     * Constraints: No constraints specified.
     */
    val deltaPosW : Double
        get() {
            val o = __offset(46)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Magnitude, in km/sec, of the difference in the pre- and post-maneuver velocity vectors at the maneuver event time.
     * Example: /// Example: 0.000631505
     * Constraints: No constraints specified.
     */
    val deltaVel : Double
        get() {
            val o = __offset(48)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Magnitude, in km/sec, of the difference in the pre- and post-maneuver velocity vectors in the direction of the pre-maneuver 'U' unit vector at the maneuver event time.
     * Example: /// Example: 3.50165629389647e-05
     * Constraints: No constraints specified.
     */
    val deltaVelU : Double
        get() {
            val o = __offset(50)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Magnitude, in km/sec, of the difference in the pre- and post-maneuver velocity vectors in the direction of the pre-maneuver 'V' unit vector at the maneuver event time.
     * Example: /// Example: 0.000544413
     * Constraints: No constraints specified.
     */
    val deltaVelV : Double
        get() {
            val o = __offset(52)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Magnitude, in km/sec, of the difference in the pre- and post-maneuver velocity vectors in the direction of the pre-maneuver 'W' unit vector at the maneuver event time.
     * Example: /// Example: -0.000318099
     * Constraints: No constraints specified.
     */
    val deltaVelW : Double
        get() {
            val o = __offset(54)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Difference in mass before and after the maneuver, in kg.
     * Example: /// Example: 0.15
     * Constraints: No constraints specified.
     */
    val deltaMass : Double
        get() {
            val o = __offset(56)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Optional identifier of the element set for the pre-maneuver orbit.
     * Example: /// Example: 80e544b7-6a17-4554-8abf-7301e98f8e5d
     * Constraints: Minimum length = 0, Maximum length = 36
     */
    val preEventIdElset : String?
        get() {
            val o = __offset(58)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val preEventIdElsetAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(58, 1)
    fun preEventIdElsetInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 58, 1)
    /**
     * No description provided.
     * Example: /// Example: No example provided.
     * Constraints: No constraints specified.
     */
    val preEventElset : String?
        get() {
            val o = __offset(60)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val preEventElsetAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(60, 1)
    fun preEventElsetInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 60, 1)
    /**
     * Optional identifier of the state vector for the pre-maneuver trajectory of the spacecraft.
     * Example: /// Example: 6e291992-8ae3-4592-bb0f-055715bf4803
     * Constraints: Minimum length = 0, Maximum length = 36
     */
    val preEventIdStateVector : String?
        get() {
            val o = __offset(62)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val preEventIdStateVectorAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(62, 1)
    fun preEventIdStateVectorInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 62, 1)
    /**
     * No description provided.
     * Example: /// Example: No example provided.
     * Constraints: No constraints specified.
     */
    val preEventStateVector : String?
        get() {
            val o = __offset(64)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val preEventStateVectorAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(64, 1)
    fun preEventStateVectorInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 64, 1)
    /**
     * Pre-event X component of position in ECI space, in km.
     * Example: /// Example: 3584.432545
     * Constraints: No constraints specified.
     */
    val prePosX : Double
        get() {
            val o = __offset(66)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Pre-event Y component of position in ECI space, in km.
     * Example: /// Example: 42028.43245
     * Constraints: No constraints specified.
     */
    val prePosY : Double
        get() {
            val o = __offset(68)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Pre-event Z component of position in ECI space, in km.
     * Example: /// Example: -1.97765
     * Constraints: No constraints specified.
     */
    val prePosZ : Double
        get() {
            val o = __offset(70)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Pre-event X component of velocity in ECI space, in km/sec.
     * Example: /// Example: -2.543266
     * Constraints: No constraints specified.
     */
    val preVelX : Double
        get() {
            val o = __offset(72)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Pre-event Y component of velocity in ECI space, in km/sec.
     * Example: /// Example: 0.24876
     * Constraints: No constraints specified.
     */
    val preVelY : Double
        get() {
            val o = __offset(74)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Pre-event Z component of velocity in ECI space, in km/sec.
     * Example: /// Example: 0.0067352
     * Constraints: No constraints specified.
     */
    val preVelZ : Double
        get() {
            val o = __offset(76)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Pre-event radiation pressure coefficient. The units of the radiation pressure coefficient vary depending on provider. Users should consult the data provider to verify the units of the radiation pressure coefficient.
     * Example: /// Example: 4.51e-07
     * Constraints: No constraints specified.
     */
    val preRadiationPressCoeff : Double
        get() {
            val o = __offset(78)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Pre-event ballistic coefficient. The units of the ballistic coefficient vary depending on provider. Users should consult the data provider to verify the units of the ballistic coefficient.
     * Example: /// Example: 0.000437116
     * Constraints: No constraints specified.
     */
    val preBallisticCoeff : Double
        get() {
            val o = __offset(80)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Pre-event spacecraft apogee (measured from Earth center), in kilometers.
     * Example: /// Example: 35802
     * Constraints: No constraints specified.
     */
    val preApogee : Double
        get() {
            val o = __offset(82)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Pre-event spacecraft perigee (measured from Earth center), in kilometers.
     * Example: /// Example: 35786.5
     * Constraints: No constraints specified.
     */
    val prePerigee : Double
        get() {
            val o = __offset(84)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Pre-event spacecraft orbital inclination, in degrees. 0-180.
     * Example: /// Example: 0.0336
     * Constraints: No constraints specified.
     */
    val preInclination : Double
        get() {
            val o = __offset(86)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Pre-event spacecraft eccentricity.
     * Example: /// Example: 0.00017
     * Constraints: No constraints specified.
     */
    val preEccentricity : Double
        get() {
            val o = __offset(88)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Pre-event spacecraft orbital period, in minutes.
     * Example: /// Example: 1436.12
     * Constraints: No constraints specified.
     */
    val prePeriod : Double
        get() {
            val o = __offset(90)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Pre-event spacecraft Right Ascension of the Ascending Node (RAAN), in degrees.
     * Example: /// Example: 98.3336
     * Constraints: No constraints specified.
     */
    val preRaan : Double
        get() {
            val o = __offset(92)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Pre-event spacecraft orbital Semi-Major Axis (SMA), in kilometers.
     * Example: /// Example: 42165.1
     * Constraints: No constraints specified.
     */
    val preSma : Double
        get() {
            val o = __offset(94)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Pre-event spacecraft WGS-84 GEO belt longitude, represented as -180 to 180 degrees (negative values west of Prime Meridian).
     * Example: /// Example: -93.12
     * Constraints: No constraints specified.
     */
    val preGeoLongitude : Double
        get() {
            val o = __offset(96)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Pre-event GEO drift rate of the spacecraft, in degrees per day. Negative values indicate westward drift.
     * Example: /// Example: -0.0125
     * Constraints: No constraints specified.
     */
    val preDriftRate : Double
        get() {
            val o = __offset(98)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Pre-event standard deviation, in kilometers, of spacecraft position in the 'U' unit vector direction.
     * Example: /// Example: 0.215
     * Constraints: No constraints specified.
     */
    val preSigmaU : Double
        get() {
            val o = __offset(100)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Pre-event standard deviation, in kilometers, of spacecraft position in the 'V' unit vector direction.
     * Example: /// Example: 1.97
     * Constraints: No constraints specified.
     */
    val preSigmaV : Double
        get() {
            val o = __offset(102)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Pre-event standard deviation, in kilometers, of spacecraft position in the 'W' unit vector direction.
     * Example: /// Example: 0.208
     * Constraints: No constraints specified.
     */
    val preSigmaW : Double
        get() {
            val o = __offset(104)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Optional identifier of the element set for the post-maneuver orbit.
     * Example: /// Example: 225adf4c-8606-40a8-929e-63e22cffe220
     * Constraints: Minimum length = 0, Maximum length = 36
     */
    val postEventIdElset : String?
        get() {
            val o = __offset(106)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val postEventIdElsetAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(106, 1)
    fun postEventIdElsetInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 106, 1)
    /**
     * No description provided.
     * Example: /// Example: No example provided.
     * Constraints: No constraints specified.
     */
    val postEventElset : String?
        get() {
            val o = __offset(108)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val postEventElsetAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(108, 1)
    fun postEventElsetInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 108, 1)
    /**
     * Optional identifier of the state vector for the post-maneuver trajectory of the spacecraft.
     * Example: /// Example: d83a23f8-1496-485a-bd88-ec5808c73299
     * Constraints: Minimum length = 0, Maximum length = 36
     */
    val postEventIdStateVector : String?
        get() {
            val o = __offset(110)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val postEventIdStateVectorAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(110, 1)
    fun postEventIdStateVectorInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 110, 1)
    /**
     * No description provided.
     * Example: /// Example: No example provided.
     * Constraints: No constraints specified.
     */
    val postEventStateVector : String?
        get() {
            val o = __offset(112)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val postEventStateVectorAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(112, 1)
    fun postEventStateVectorInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 112, 1)
    /**
     * Post-event X component of position in ECI space, in km.
     * Example: /// Example: 3589.351957
     * Constraints: No constraints specified.
     */
    val postPosX : Double
        get() {
            val o = __offset(114)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Post-event Y component of position in ECI space, in km.
     * Example: /// Example: 42017.26823
     * Constraints: No constraints specified.
     */
    val postPosY : Double
        get() {
            val o = __offset(116)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Post-event Z component of position in ECI space, in km.
     * Example: /// Example: -1.27161796
     * Constraints: No constraints specified.
     */
    val postPosZ : Double
        get() {
            val o = __offset(118)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Post-event X component of velocity in ECI space, in km/sec.
     * Example: /// Example: -3.063152826
     * Constraints: No constraints specified.
     */
    val postVelX : Double
        get() {
            val o = __offset(120)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Post-event Y component of velocity in ECI space, in km/sec.
     * Example: /// Example: 0.261586769
     * Constraints: No constraints specified.
     */
    val postVelY : Double
        get() {
            val o = __offset(122)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Post-event Z component of velocity in ECI space, in km/sec.
     * Example: /// Example: 0.006842148
     * Constraints: No constraints specified.
     */
    val postVelZ : Double
        get() {
            val o = __offset(124)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Post-event radiation pressure coefficient. The units of the radiation pressure coefficient vary depending on provider. Users should consult the data provider to verify the units of the radiation pressure coefficient.
     * Example: /// Example: 4.51e-07
     * Constraints: No constraints specified.
     */
    val postRadiationPressCoeff : Double
        get() {
            val o = __offset(126)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Post-event ballistic coefficient. The units of the ballistic coefficient vary depending on provider. Users should consult the data provider to verify the units of the ballistic coefficient.
     * Example: /// Example: 0.000433209
     * Constraints: No constraints specified.
     */
    val postBallisticCoeff : Double
        get() {
            val o = __offset(128)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Post-event spacecraft apogee (measured from Earth center), in kilometers.
     * Example: /// Example: 35800.1
     * Constraints: No constraints specified.
     */
    val postApogee : Double
        get() {
            val o = __offset(130)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Post-event spacecraft perigee (measured from Earth center), in kilometers.
     * Example: /// Example: 35787.9
     * Constraints: No constraints specified.
     */
    val postPerigee : Double
        get() {
            val o = __offset(132)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Post-event spacecraft orbital inclination, in degrees. 0-180.
     * Example: /// Example: 0.0327
     * Constraints: No constraints specified.
     */
    val postInclination : Double
        get() {
            val o = __offset(134)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Post-event spacecraft eccentricity.
     * Example: /// Example: 0.000164
     * Constraints: No constraints specified.
     */
    val postEccentricity : Double
        get() {
            val o = __offset(136)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Post-event spacecraft orbital period, in minutes.
     * Example: /// Example: 1436.01
     * Constraints: No constraints specified.
     */
    val postPeriod : Double
        get() {
            val o = __offset(138)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Post-event spacecraft Right Ascension of the Ascending Node (RAAN), in degrees.
     * Example: /// Example: 98.3335
     * Constraints: No constraints specified.
     */
    val postRaan : Double
        get() {
            val o = __offset(140)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Post-event spacecraft Semi-Major Axis (SMA), in kilometers.
     * Example: /// Example: 42164.87
     * Constraints: No constraints specified.
     */
    val postSma : Double
        get() {
            val o = __offset(142)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Post-event spacecraft WGS-84 GEO belt longitude, represented as -180 to 180 degrees (negative values west of Prime Meridian).
     * Example: /// Example: -93.15
     * Constraints: No constraints specified.
     */
    val postGeoLongitude : Double
        get() {
            val o = __offset(144)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Post-event GEO drift rate of the spacecraft, in degrees per day. Negative values indicate westward drift.
     * Example: /// Example: -0.0125
     * Constraints: No constraints specified.
     */
    val postDriftRate : Double
        get() {
            val o = __offset(146)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Post-event standard deviation, in kilometers, of spacecraft position in the 'U' unit vector direction.
     * Example: /// Example: 12.285
     * Constraints: No constraints specified.
     */
    val postSigmaU : Double
        get() {
            val o = __offset(148)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Post-event standard deviation, in kilometers, of spacecraft position in the 'V' unit vector direction.
     * Example: /// Example: 71.339
     * Constraints: No constraints specified.
     */
    val postSigmaV : Double
        get() {
            val o = __offset(150)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Post-event standard deviation, in kilometers, of spacecraft position in the 'W' unit vector direction.
     * Example: /// Example: 12.77
     * Constraints: No constraints specified.
     */
    val postSigmaW : Double
        get() {
            val o = __offset(152)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Optional maneuver cross-track/radial/in-track covariance array, in meter and second based units, in the following order: CR_R, CI_R, CI_I, CC_R, CC_I, CC_C, CT_R, CT_I, CT_C, CT_T.
     * Example: /// Example: No example provided.
     * Constraints: No constraints specified.
     */
    fun cov(j: Int) : String? {
        val o = __offset(154)
        return if (o != 0) {
            __string(__vector(o) + j * 4)
        } else {
            null
        }
    }
    val covLength : Int
        get() {
            val o = __offset(154); return if (o != 0) __vector_len(o) else 0
        }
    /**
     *  Estimated mass of the object following the maneuver, in kg.
     * Example: /// Example: 1844.5
     * Constraints: No constraints specified.
     */
    val postMass : Double
        get() {
            val o = __offset(156)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Estimated area of the object following the maneuver, in meters squared.
     * Example: /// Example: 35.77
     * Constraints: No constraints specified.
     */
    val postArea : Double
        get() {
            val o = __offset(158)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Number of observations used to generate the maneuver data.
     * Example: /// Example: 10
     * Constraints: No constraints specified.
     */
    val numObs : Int
        get() {
            val o = __offset(160)
            return if(o != 0) bb.getInt(o + bb_pos) else 0
        }
    /**
     * Description and notes of the maneuver.
     * Example: /// Example: Example notes
     * Constraints: Minimum length = 0, Maximum length = 256
     */
    val description : String?
        get() {
            val o = __offset(162)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val descriptionAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(162, 1)
    fun descriptionInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 162, 1)
    /**
     * Optional source-provided and searchable metadata or descriptor of the data.
     * Example: /// Example: Example descriptor
     * Constraints: Minimum length = 0, Maximum length = 64
     */
    val descriptor : String?
        get() {
            val o = __offset(164)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val descriptorAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(164, 1)
    fun descriptorInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 164, 1)
    /**
     * Name of the state model used to generate the maneuver data.
     * Example: /// Example: Example name
     * Constraints: Minimum length = 0, Maximum length = 32
     */
    val stateModel : String?
        get() {
            val o = __offset(166)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val stateModelAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(166, 1)
    fun stateModelInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 166, 1)
    /**
     * Version of the state model used to generate the maneuver data.
     * Example: /// Example: 3
     * Constraints: No constraints specified.
     */
    val stateModelVersion : Double
        get() {
            val o = __offset(168)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * The total number of estimated acceleration points during the maneuver.
     * Example: /// Example: 3
     * Constraints: No constraints specified.
     */
    val numAccelPoints : Int
        get() {
            val o = __offset(170)
            return if(o != 0) bb.getInt(o + bb_pos) else 0
        }
    /**
     * Array of elapsed times, in seconds from maneuver start time, at which each acceleration point is estimated. Number of elements must match the numAccelPoints.
     * Example: /// Example: [10.25, 50.56, 150.78]
     * Constraints: No constraints specified.
     */
    fun mnvrAccelTimes(j: Int) : String? {
        val o = __offset(172)
        return if (o != 0) {
            __string(__vector(o) + j * 4)
        } else {
            null
        }
    }
    val mnvrAccelTimesLength : Int
        get() {
            val o = __offset(172); return if (o != 0) __vector_len(o) else 0
        }
    /**
     * Array of estimated acceleration values, in meters per second squared. Number of elements must match the numAccelPoints.
     * Example: /// Example: [0.05, 0.1, 0.05]
     * Constraints: No constraints specified.
     */
    fun mnvrAccels(j: Int) : String? {
        val o = __offset(174)
        return if (o != 0) {
            __string(__vector(o) + j * 4)
        } else {
            null
        }
    }
    val mnvrAccelsLength : Int
        get() {
            val o = __offset(174); return if (o != 0) __vector_len(o) else 0
        }
    /**
     * Array of the 1-sigma uncertainties in estimated accelerations, in meters per second squared. Number of elements must match the numAccelPoints.
     * Example: /// Example: [0.0005, 0.001, 0.0005]
     * Constraints: No constraints specified.
     */
    fun mnvrAccelUncs(j: Int) : String? {
        val o = __offset(176)
        return if (o != 0) {
            __string(__vector(o) + j * 4)
        } else {
            null
        }
    }
    val mnvrAccelUncsLength : Int
        get() {
            val o = __offset(176); return if (o != 0) __vector_len(o) else 0
        }
    /**
     * Source of the data.
     * Example: /// Example: Bluestaq
     * Constraints: Minimum length = 1, Maximum length = 64
     */
    val source : String?
        get() {
            val o = __offset(178)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val sourceAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(178, 1)
    fun sourceInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 178, 1)
    /**
     * Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
     * Example: /// Example: THIRD_PARTY_DATASOURCE
     * Constraints: Minimum length = 0, Maximum length = 64
     */
    val origin : String?
        get() {
            val o = __offset(180)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val originAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(180, 1)
    fun originInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 180, 1)
    /**
     * Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
     * EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
     * REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
     * SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
     * TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
     * Example: /// Example: TEST
     * Constraints: Minimum length = 1, Maximum length = 32
     */
    val dataMode : Byte
        get() {
            val o = __offset(182)
            return if(o != 0) bb.get(o + bb_pos) else 0
        }
    /**
     * Time the row was created in the database, auto-populated by the system.
     * Example: /// Example: 2018-01-01T16:00:00.123Z
     * Constraints: No constraints specified.
     */
    val createdAt : String?
        get() {
            val o = __offset(184)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val createdAtAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(184, 1)
    fun createdAtInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 184, 1)
    /**
     * Application user who created the row in the database, auto-populated by the system.
     * Example: /// Example: some.user
     * Constraints: Minimum length = 1, Maximum length = 64
     */
    val createdBy : String?
        get() {
            val o = __offset(186)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val createdByAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(186, 1)
    fun createdByInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 186, 1)
    /**
     * Optional array of provider/source specific tags for this data, where each element is no longer than 32 characters, used for implementing data owner conditional access controls to restrict access to the data. Should be left null by data providers unless conditional access controls are coordinated with the UDL team.
     * Example: /// Example: ['PROVIDER_TAG1', 'PROVIDERTAG2']
     * Constraints: No constraints specified.
     */
    fun tags(j: Int) : String? {
        val o = __offset(188)
        return if (o != 0) {
            __string(__vector(o) + j * 4)
        } else {
            null
        }
    }
    val tagsLength : Int
        get() {
            val o = __offset(188); return if (o != 0) __vector_len(o) else 0
        }
    /**
     * Optional algorithm used to produce this record.
     * Example: /// Example: Example algorithm
     * Constraints: Minimum length = 0, Maximum length = 64
     */
    val algorithm : String?
        get() {
            val o = __offset(190)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val algorithmAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(190, 1)
    fun algorithmInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 190, 1)
    /**
     * Optional array of UDL data (elsets, state vectors, etc) UUIDs used to build this maneuver. See the associated sourcedDataTypes array for the specific types of data for the positionally corresponding UUIDs in this array (the two arrays must match in size).
     * Example: /// Example: ['SOURCEDDATA-ID', 'SOURCEDDATA-ID']
     * Constraints: No constraints specified.
     */
    fun sourcedData(j: Int) : String? {
        val o = __offset(192)
        return if (o != 0) {
            __string(__vector(o) + j * 4)
        } else {
            null
        }
    }
    val sourcedDataLength : Int
        get() {
            val o = __offset(192); return if (o != 0) __vector_len(o) else 0
        }
    /**
     * Optional array of UDL data types used to build this maneuver (e.g. EO, RADAR, RF, DOA, ELSET, SV). See the associated sourcedData array for the specific UUIDs of data for the positionally corresponding data types in this array (the two arrays must match in size).
     * Example: /// Example: ['EO', 'RADAR']
     * Constraints: No constraints specified.
     */
    val sourcedDataTypes : Byte
        get() {
            val o = __offset(194)
            return if(o != 0) bb.get(o + bb_pos) else 0
        }
    /**
     * No description provided.
     * Example: /// Example: No example provided.
     * Constraints: No constraints specified.
     */
    val onOrbit : String?
        get() {
            val o = __offset(196)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val onOrbitAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(196, 1)
    fun onOrbitInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 196, 1)
    /**
     * Optional identifier to track a commercial or marketplace transaction executed to produce this data.
     * Example: /// Example: TRANSACTION-ID
     * Constraints: Minimum length = 0, Maximum length = 64
     */
    val transactionId : String?
        get() {
            val o = __offset(198)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val transactionIdAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(198, 1)
    fun transactionIdInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 198, 1)
    /**
     * The originating source network on which this record was created, auto-populated by the system.
     * Example: /// Example: ORIG
     * Constraints: Minimum length = 1, Maximum length = 32
     */
    val origNetwork : String?
        get() {
            val o = __offset(200)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val origNetworkAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(200, 1)
    fun origNetworkInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 200, 1)
    companion object {
        fun validateVersion() = Constants.FLATBUFFERS_24_3_25()
        fun getRootAsManeuver_Full(_bb: ByteBuffer): Maneuver_Full = getRootAsManeuver_Full(_bb, Maneuver_Full())
        fun getRootAsManeuver_Full(_bb: ByteBuffer, obj: Maneuver_Full): Maneuver_Full {
            _bb.order(ByteOrder.LITTLE_ENDIAN)
            return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb))
        }
        fun Maneuver_FullBufferHasIdentifier(_bb: ByteBuffer) : Boolean = __has_identifier(_bb, "MANE")
        fun createManeuver_Full(builder: FlatBufferBuilder, idOffset: Int, classificationMarkingOffset: Int, satNo: Int, reportTimeOffset: Int, eventStartTimeOffset: Int, eventEndTimeOffset: Int, totalBurnTime: Double, odFitEndTimeOffset: Int, idOnOrbitOffset: Int, idSensorOffset: Int, uct: Boolean, maneuverUnc: Double, characterizationOffset: Int, characterizationUnc: Double, eventIdOffset: Int, origObjectIdOffset: Int, origSensorIdOffset: Int, statusOffset: Int, deltaPos: Double, deltaPosU: Double, deltaPosV: Double, deltaPosW: Double, deltaVel: Double, deltaVelU: Double, deltaVelV: Double, deltaVelW: Double, deltaMass: Double, preEventIdElsetOffset: Int, preEventElsetOffset: Int, preEventIdStateVectorOffset: Int, preEventStateVectorOffset: Int, prePosX: Double, prePosY: Double, prePosZ: Double, preVelX: Double, preVelY: Double, preVelZ: Double, preRadiationPressCoeff: Double, preBallisticCoeff: Double, preApogee: Double, prePerigee: Double, preInclination: Double, preEccentricity: Double, prePeriod: Double, preRaan: Double, preSma: Double, preGeoLongitude: Double, preDriftRate: Double, preSigmaU: Double, preSigmaV: Double, preSigmaW: Double, postEventIdElsetOffset: Int, postEventElsetOffset: Int, postEventIdStateVectorOffset: Int, postEventStateVectorOffset: Int, postPosX: Double, postPosY: Double, postPosZ: Double, postVelX: Double, postVelY: Double, postVelZ: Double, postRadiationPressCoeff: Double, postBallisticCoeff: Double, postApogee: Double, postPerigee: Double, postInclination: Double, postEccentricity: Double, postPeriod: Double, postRaan: Double, postSma: Double, postGeoLongitude: Double, postDriftRate: Double, postSigmaU: Double, postSigmaV: Double, postSigmaW: Double, covOffset: Int, postMass: Double, postArea: Double, numObs: Int, descriptionOffset: Int, descriptorOffset: Int, stateModelOffset: Int, stateModelVersion: Double, numAccelPoints: Int, mnvrAccelTimesOffset: Int, mnvrAccelsOffset: Int, mnvrAccelUncsOffset: Int, sourceOffset: Int, originOffset: Int, dataMode: Byte, createdAtOffset: Int, createdByOffset: Int, tagsOffset: Int, algorithmOffset: Int, sourcedDataOffset: Int, sourcedDataTypes: Byte, onOrbitOffset: Int, transactionIdOffset: Int, origNetworkOffset: Int) : Int {
            builder.startTable(99)
            addStateModelVersion(builder, stateModelVersion)
            addPostArea(builder, postArea)
            addPostMass(builder, postMass)
            addPostSigmaW(builder, postSigmaW)
            addPostSigmaV(builder, postSigmaV)
            addPostSigmaU(builder, postSigmaU)
            addPostDriftRate(builder, postDriftRate)
            addPostGeoLongitude(builder, postGeoLongitude)
            addPostSMA(builder, postSma)
            addPostRAAN(builder, postRaan)
            addPostPeriod(builder, postPeriod)
            addPostEccentricity(builder, postEccentricity)
            addPostInclination(builder, postInclination)
            addPostPerigee(builder, postPerigee)
            addPostApogee(builder, postApogee)
            addPostBallisticCoeff(builder, postBallisticCoeff)
            addPostRadiationPressCoeff(builder, postRadiationPressCoeff)
            addPostVelZ(builder, postVelZ)
            addPostVelY(builder, postVelY)
            addPostVelX(builder, postVelX)
            addPostPosZ(builder, postPosZ)
            addPostPosY(builder, postPosY)
            addPostPosX(builder, postPosX)
            addPreSigmaW(builder, preSigmaW)
            addPreSigmaV(builder, preSigmaV)
            addPreSigmaU(builder, preSigmaU)
            addPreDriftRate(builder, preDriftRate)
            addPreGeoLongitude(builder, preGeoLongitude)
            addPreSMA(builder, preSma)
            addPreRAAN(builder, preRaan)
            addPrePeriod(builder, prePeriod)
            addPreEccentricity(builder, preEccentricity)
            addPreInclination(builder, preInclination)
            addPrePerigee(builder, prePerigee)
            addPreApogee(builder, preApogee)
            addPreBallisticCoeff(builder, preBallisticCoeff)
            addPreRadiationPressCoeff(builder, preRadiationPressCoeff)
            addPreVelZ(builder, preVelZ)
            addPreVelY(builder, preVelY)
            addPreVelX(builder, preVelX)
            addPrePosZ(builder, prePosZ)
            addPrePosY(builder, prePosY)
            addPrePosX(builder, prePosX)
            addDeltaMass(builder, deltaMass)
            addDeltaVelW(builder, deltaVelW)
            addDeltaVelV(builder, deltaVelV)
            addDeltaVelU(builder, deltaVelU)
            addDeltaVel(builder, deltaVel)
            addDeltaPosW(builder, deltaPosW)
            addDeltaPosV(builder, deltaPosV)
            addDeltaPosU(builder, deltaPosU)
            addDeltaPos(builder, deltaPos)
            addCharacterizationUnc(builder, characterizationUnc)
            addManeuverUnc(builder, maneuverUnc)
            addTotalBurnTime(builder, totalBurnTime)
            addOrigNetwork(builder, origNetworkOffset)
            addTransactionId(builder, transactionIdOffset)
            addOnOrbit(builder, onOrbitOffset)
            addSourcedData(builder, sourcedDataOffset)
            addAlgorithm(builder, algorithmOffset)
            addTags(builder, tagsOffset)
            addCreatedBy(builder, createdByOffset)
            addCreatedAt(builder, createdAtOffset)
            addOrigin(builder, originOffset)
            addSource(builder, sourceOffset)
            addMnvrAccelUncs(builder, mnvrAccelUncsOffset)
            addMnvrAccels(builder, mnvrAccelsOffset)
            addMnvrAccelTimes(builder, mnvrAccelTimesOffset)
            addNumAccelPoints(builder, numAccelPoints)
            addStateModel(builder, stateModelOffset)
            addDescriptor(builder, descriptorOffset)
            addDescription(builder, descriptionOffset)
            addNumObs(builder, numObs)
            addCov(builder, covOffset)
            addPostEventStateVector(builder, postEventStateVectorOffset)
            addPostEventIdStateVector(builder, postEventIdStateVectorOffset)
            addPostEventElset(builder, postEventElsetOffset)
            addPostEventIdElset(builder, postEventIdElsetOffset)
            addPreEventStateVector(builder, preEventStateVectorOffset)
            addPreEventIdStateVector(builder, preEventIdStateVectorOffset)
            addPreEventElset(builder, preEventElsetOffset)
            addPreEventIdElset(builder, preEventIdElsetOffset)
            addStatus(builder, statusOffset)
            addOrigSensorId(builder, origSensorIdOffset)
            addOrigObjectId(builder, origObjectIdOffset)
            addEventId(builder, eventIdOffset)
            addCharacterization(builder, characterizationOffset)
            addIdSensor(builder, idSensorOffset)
            addIdOnOrbit(builder, idOnOrbitOffset)
            addOdFitEndTime(builder, odFitEndTimeOffset)
            addEventEndTime(builder, eventEndTimeOffset)
            addEventStartTime(builder, eventStartTimeOffset)
            addReportTime(builder, reportTimeOffset)
            addSatNo(builder, satNo)
            addClassificationMarking(builder, classificationMarkingOffset)
            addId(builder, idOffset)
            addSourcedDataTypes(builder, sourcedDataTypes)
            addDataMode(builder, dataMode)
            addUct(builder, uct)
            return endManeuver_Full(builder)
        }
        fun startManeuver_Full(builder: FlatBufferBuilder) = builder.startTable(99)
        fun addId(builder: FlatBufferBuilder, id: Int) = builder.addOffset(0, id, 0)
        fun addClassificationMarking(builder: FlatBufferBuilder, classificationMarking: Int) = builder.addOffset(1, classificationMarking, 0)
        fun addSatNo(builder: FlatBufferBuilder, satNo: Int) = builder.addInt(2, satNo, 0)
        fun addReportTime(builder: FlatBufferBuilder, reportTime: Int) = builder.addOffset(3, reportTime, 0)
        fun addEventStartTime(builder: FlatBufferBuilder, eventStartTime: Int) = builder.addOffset(4, eventStartTime, 0)
        fun addEventEndTime(builder: FlatBufferBuilder, eventEndTime: Int) = builder.addOffset(5, eventEndTime, 0)
        fun addTotalBurnTime(builder: FlatBufferBuilder, totalBurnTime: Double) = builder.addDouble(6, totalBurnTime, 0.0)
        fun addOdFitEndTime(builder: FlatBufferBuilder, odFitEndTime: Int) = builder.addOffset(7, odFitEndTime, 0)
        fun addIdOnOrbit(builder: FlatBufferBuilder, idOnOrbit: Int) = builder.addOffset(8, idOnOrbit, 0)
        fun addIdSensor(builder: FlatBufferBuilder, idSensor: Int) = builder.addOffset(9, idSensor, 0)
        fun addUct(builder: FlatBufferBuilder, uct: Boolean) = builder.addBoolean(10, uct, false)
        fun addManeuverUnc(builder: FlatBufferBuilder, maneuverUnc: Double) = builder.addDouble(11, maneuverUnc, 0.0)
        fun addCharacterization(builder: FlatBufferBuilder, characterization: Int) = builder.addOffset(12, characterization, 0)
        fun addCharacterizationUnc(builder: FlatBufferBuilder, characterizationUnc: Double) = builder.addDouble(13, characterizationUnc, 0.0)
        fun addEventId(builder: FlatBufferBuilder, eventId: Int) = builder.addOffset(14, eventId, 0)
        fun addOrigObjectId(builder: FlatBufferBuilder, origObjectId: Int) = builder.addOffset(15, origObjectId, 0)
        fun addOrigSensorId(builder: FlatBufferBuilder, origSensorId: Int) = builder.addOffset(16, origSensorId, 0)
        fun addStatus(builder: FlatBufferBuilder, status: Int) = builder.addOffset(17, status, 0)
        fun addDeltaPos(builder: FlatBufferBuilder, deltaPos: Double) = builder.addDouble(18, deltaPos, 0.0)
        fun addDeltaPosU(builder: FlatBufferBuilder, deltaPosU: Double) = builder.addDouble(19, deltaPosU, 0.0)
        fun addDeltaPosV(builder: FlatBufferBuilder, deltaPosV: Double) = builder.addDouble(20, deltaPosV, 0.0)
        fun addDeltaPosW(builder: FlatBufferBuilder, deltaPosW: Double) = builder.addDouble(21, deltaPosW, 0.0)
        fun addDeltaVel(builder: FlatBufferBuilder, deltaVel: Double) = builder.addDouble(22, deltaVel, 0.0)
        fun addDeltaVelU(builder: FlatBufferBuilder, deltaVelU: Double) = builder.addDouble(23, deltaVelU, 0.0)
        fun addDeltaVelV(builder: FlatBufferBuilder, deltaVelV: Double) = builder.addDouble(24, deltaVelV, 0.0)
        fun addDeltaVelW(builder: FlatBufferBuilder, deltaVelW: Double) = builder.addDouble(25, deltaVelW, 0.0)
        fun addDeltaMass(builder: FlatBufferBuilder, deltaMass: Double) = builder.addDouble(26, deltaMass, 0.0)
        fun addPreEventIdElset(builder: FlatBufferBuilder, preEventIdElset: Int) = builder.addOffset(27, preEventIdElset, 0)
        fun addPreEventElset(builder: FlatBufferBuilder, preEventElset: Int) = builder.addOffset(28, preEventElset, 0)
        fun addPreEventIdStateVector(builder: FlatBufferBuilder, preEventIdStateVector: Int) = builder.addOffset(29, preEventIdStateVector, 0)
        fun addPreEventStateVector(builder: FlatBufferBuilder, preEventStateVector: Int) = builder.addOffset(30, preEventStateVector, 0)
        fun addPrePosX(builder: FlatBufferBuilder, prePosX: Double) = builder.addDouble(31, prePosX, 0.0)
        fun addPrePosY(builder: FlatBufferBuilder, prePosY: Double) = builder.addDouble(32, prePosY, 0.0)
        fun addPrePosZ(builder: FlatBufferBuilder, prePosZ: Double) = builder.addDouble(33, prePosZ, 0.0)
        fun addPreVelX(builder: FlatBufferBuilder, preVelX: Double) = builder.addDouble(34, preVelX, 0.0)
        fun addPreVelY(builder: FlatBufferBuilder, preVelY: Double) = builder.addDouble(35, preVelY, 0.0)
        fun addPreVelZ(builder: FlatBufferBuilder, preVelZ: Double) = builder.addDouble(36, preVelZ, 0.0)
        fun addPreRadiationPressCoeff(builder: FlatBufferBuilder, preRadiationPressCoeff: Double) = builder.addDouble(37, preRadiationPressCoeff, 0.0)
        fun addPreBallisticCoeff(builder: FlatBufferBuilder, preBallisticCoeff: Double) = builder.addDouble(38, preBallisticCoeff, 0.0)
        fun addPreApogee(builder: FlatBufferBuilder, preApogee: Double) = builder.addDouble(39, preApogee, 0.0)
        fun addPrePerigee(builder: FlatBufferBuilder, prePerigee: Double) = builder.addDouble(40, prePerigee, 0.0)
        fun addPreInclination(builder: FlatBufferBuilder, preInclination: Double) = builder.addDouble(41, preInclination, 0.0)
        fun addPreEccentricity(builder: FlatBufferBuilder, preEccentricity: Double) = builder.addDouble(42, preEccentricity, 0.0)
        fun addPrePeriod(builder: FlatBufferBuilder, prePeriod: Double) = builder.addDouble(43, prePeriod, 0.0)
        fun addPreRAAN(builder: FlatBufferBuilder, preRaan: Double) = builder.addDouble(44, preRaan, 0.0)
        fun addPreSMA(builder: FlatBufferBuilder, preSma: Double) = builder.addDouble(45, preSma, 0.0)
        fun addPreGeoLongitude(builder: FlatBufferBuilder, preGeoLongitude: Double) = builder.addDouble(46, preGeoLongitude, 0.0)
        fun addPreDriftRate(builder: FlatBufferBuilder, preDriftRate: Double) = builder.addDouble(47, preDriftRate, 0.0)
        fun addPreSigmaU(builder: FlatBufferBuilder, preSigmaU: Double) = builder.addDouble(48, preSigmaU, 0.0)
        fun addPreSigmaV(builder: FlatBufferBuilder, preSigmaV: Double) = builder.addDouble(49, preSigmaV, 0.0)
        fun addPreSigmaW(builder: FlatBufferBuilder, preSigmaW: Double) = builder.addDouble(50, preSigmaW, 0.0)
        fun addPostEventIdElset(builder: FlatBufferBuilder, postEventIdElset: Int) = builder.addOffset(51, postEventIdElset, 0)
        fun addPostEventElset(builder: FlatBufferBuilder, postEventElset: Int) = builder.addOffset(52, postEventElset, 0)
        fun addPostEventIdStateVector(builder: FlatBufferBuilder, postEventIdStateVector: Int) = builder.addOffset(53, postEventIdStateVector, 0)
        fun addPostEventStateVector(builder: FlatBufferBuilder, postEventStateVector: Int) = builder.addOffset(54, postEventStateVector, 0)
        fun addPostPosX(builder: FlatBufferBuilder, postPosX: Double) = builder.addDouble(55, postPosX, 0.0)
        fun addPostPosY(builder: FlatBufferBuilder, postPosY: Double) = builder.addDouble(56, postPosY, 0.0)
        fun addPostPosZ(builder: FlatBufferBuilder, postPosZ: Double) = builder.addDouble(57, postPosZ, 0.0)
        fun addPostVelX(builder: FlatBufferBuilder, postVelX: Double) = builder.addDouble(58, postVelX, 0.0)
        fun addPostVelY(builder: FlatBufferBuilder, postVelY: Double) = builder.addDouble(59, postVelY, 0.0)
        fun addPostVelZ(builder: FlatBufferBuilder, postVelZ: Double) = builder.addDouble(60, postVelZ, 0.0)
        fun addPostRadiationPressCoeff(builder: FlatBufferBuilder, postRadiationPressCoeff: Double) = builder.addDouble(61, postRadiationPressCoeff, 0.0)
        fun addPostBallisticCoeff(builder: FlatBufferBuilder, postBallisticCoeff: Double) = builder.addDouble(62, postBallisticCoeff, 0.0)
        fun addPostApogee(builder: FlatBufferBuilder, postApogee: Double) = builder.addDouble(63, postApogee, 0.0)
        fun addPostPerigee(builder: FlatBufferBuilder, postPerigee: Double) = builder.addDouble(64, postPerigee, 0.0)
        fun addPostInclination(builder: FlatBufferBuilder, postInclination: Double) = builder.addDouble(65, postInclination, 0.0)
        fun addPostEccentricity(builder: FlatBufferBuilder, postEccentricity: Double) = builder.addDouble(66, postEccentricity, 0.0)
        fun addPostPeriod(builder: FlatBufferBuilder, postPeriod: Double) = builder.addDouble(67, postPeriod, 0.0)
        fun addPostRAAN(builder: FlatBufferBuilder, postRaan: Double) = builder.addDouble(68, postRaan, 0.0)
        fun addPostSMA(builder: FlatBufferBuilder, postSma: Double) = builder.addDouble(69, postSma, 0.0)
        fun addPostGeoLongitude(builder: FlatBufferBuilder, postGeoLongitude: Double) = builder.addDouble(70, postGeoLongitude, 0.0)
        fun addPostDriftRate(builder: FlatBufferBuilder, postDriftRate: Double) = builder.addDouble(71, postDriftRate, 0.0)
        fun addPostSigmaU(builder: FlatBufferBuilder, postSigmaU: Double) = builder.addDouble(72, postSigmaU, 0.0)
        fun addPostSigmaV(builder: FlatBufferBuilder, postSigmaV: Double) = builder.addDouble(73, postSigmaV, 0.0)
        fun addPostSigmaW(builder: FlatBufferBuilder, postSigmaW: Double) = builder.addDouble(74, postSigmaW, 0.0)
        fun addCov(builder: FlatBufferBuilder, cov: Int) = builder.addOffset(75, cov, 0)
        fun createCovVector(builder: FlatBufferBuilder, data: IntArray) : Int {
            builder.startVector(4, data.size, 4)
            for (i in data.size - 1 downTo 0) {
                builder.addOffset(data[i])
            }
            return builder.endVector()
        }
        fun startCovVector(builder: FlatBufferBuilder, numElems: Int) = builder.startVector(4, numElems, 4)
        fun addPostMass(builder: FlatBufferBuilder, postMass: Double) = builder.addDouble(76, postMass, 0.0)
        fun addPostArea(builder: FlatBufferBuilder, postArea: Double) = builder.addDouble(77, postArea, 0.0)
        fun addNumObs(builder: FlatBufferBuilder, numObs: Int) = builder.addInt(78, numObs, 0)
        fun addDescription(builder: FlatBufferBuilder, description: Int) = builder.addOffset(79, description, 0)
        fun addDescriptor(builder: FlatBufferBuilder, descriptor: Int) = builder.addOffset(80, descriptor, 0)
        fun addStateModel(builder: FlatBufferBuilder, stateModel: Int) = builder.addOffset(81, stateModel, 0)
        fun addStateModelVersion(builder: FlatBufferBuilder, stateModelVersion: Double) = builder.addDouble(82, stateModelVersion, 0.0)
        fun addNumAccelPoints(builder: FlatBufferBuilder, numAccelPoints: Int) = builder.addInt(83, numAccelPoints, 0)
        fun addMnvrAccelTimes(builder: FlatBufferBuilder, mnvrAccelTimes: Int) = builder.addOffset(84, mnvrAccelTimes, 0)
        fun createMnvrAccelTimesVector(builder: FlatBufferBuilder, data: IntArray) : Int {
            builder.startVector(4, data.size, 4)
            for (i in data.size - 1 downTo 0) {
                builder.addOffset(data[i])
            }
            return builder.endVector()
        }
        fun startMnvrAccelTimesVector(builder: FlatBufferBuilder, numElems: Int) = builder.startVector(4, numElems, 4)
        fun addMnvrAccels(builder: FlatBufferBuilder, mnvrAccels: Int) = builder.addOffset(85, mnvrAccels, 0)
        fun createMnvrAccelsVector(builder: FlatBufferBuilder, data: IntArray) : Int {
            builder.startVector(4, data.size, 4)
            for (i in data.size - 1 downTo 0) {
                builder.addOffset(data[i])
            }
            return builder.endVector()
        }
        fun startMnvrAccelsVector(builder: FlatBufferBuilder, numElems: Int) = builder.startVector(4, numElems, 4)
        fun addMnvrAccelUncs(builder: FlatBufferBuilder, mnvrAccelUncs: Int) = builder.addOffset(86, mnvrAccelUncs, 0)
        fun createMnvrAccelUncsVector(builder: FlatBufferBuilder, data: IntArray) : Int {
            builder.startVector(4, data.size, 4)
            for (i in data.size - 1 downTo 0) {
                builder.addOffset(data[i])
            }
            return builder.endVector()
        }
        fun startMnvrAccelUncsVector(builder: FlatBufferBuilder, numElems: Int) = builder.startVector(4, numElems, 4)
        fun addSource(builder: FlatBufferBuilder, source: Int) = builder.addOffset(87, source, 0)
        fun addOrigin(builder: FlatBufferBuilder, origin: Int) = builder.addOffset(88, origin, 0)
        fun addDataMode(builder: FlatBufferBuilder, dataMode: Byte) = builder.addByte(89, dataMode, 0)
        fun addCreatedAt(builder: FlatBufferBuilder, createdAt: Int) = builder.addOffset(90, createdAt, 0)
        fun addCreatedBy(builder: FlatBufferBuilder, createdBy: Int) = builder.addOffset(91, createdBy, 0)
        fun addTags(builder: FlatBufferBuilder, tags: Int) = builder.addOffset(92, tags, 0)
        fun createTagsVector(builder: FlatBufferBuilder, data: IntArray) : Int {
            builder.startVector(4, data.size, 4)
            for (i in data.size - 1 downTo 0) {
                builder.addOffset(data[i])
            }
            return builder.endVector()
        }
        fun startTagsVector(builder: FlatBufferBuilder, numElems: Int) = builder.startVector(4, numElems, 4)
        fun addAlgorithm(builder: FlatBufferBuilder, algorithm: Int) = builder.addOffset(93, algorithm, 0)
        fun addSourcedData(builder: FlatBufferBuilder, sourcedData: Int) = builder.addOffset(94, sourcedData, 0)
        fun createSourcedDataVector(builder: FlatBufferBuilder, data: IntArray) : Int {
            builder.startVector(4, data.size, 4)
            for (i in data.size - 1 downTo 0) {
                builder.addOffset(data[i])
            }
            return builder.endVector()
        }
        fun startSourcedDataVector(builder: FlatBufferBuilder, numElems: Int) = builder.startVector(4, numElems, 4)
        fun addSourcedDataTypes(builder: FlatBufferBuilder, sourcedDataTypes: Byte) = builder.addByte(95, sourcedDataTypes, 0)
        fun addOnOrbit(builder: FlatBufferBuilder, onOrbit: Int) = builder.addOffset(96, onOrbit, 0)
        fun addTransactionId(builder: FlatBufferBuilder, transactionId: Int) = builder.addOffset(97, transactionId, 0)
        fun addOrigNetwork(builder: FlatBufferBuilder, origNetwork: Int) = builder.addOffset(98, origNetwork, 0)
        fun endManeuver_Full(builder: FlatBufferBuilder) : Int {
            val o = builder.endTable()
            return o
        }
        fun finishManeuverFullBuffer(builder: FlatBufferBuilder, offset: Int) = builder.finish(offset, "MANE")
        fun finishSizePrefixedManeuver_FullBuffer(builder: FlatBufferBuilder, offset: Int) = builder.finishSizePrefixed(offset, "MANE")
    }
}
