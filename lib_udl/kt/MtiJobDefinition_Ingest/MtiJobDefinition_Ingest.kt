// automatically generated by the FlatBuffers compiler, do not modify

import com.google.flatbuffers.BaseVector
import com.google.flatbuffers.BooleanVector
import com.google.flatbuffers.ByteVector
import com.google.flatbuffers.Constants
import com.google.flatbuffers.DoubleVector
import com.google.flatbuffers.FlatBufferBuilder
import com.google.flatbuffers.FloatVector
import com.google.flatbuffers.LongVector
import com.google.flatbuffers.StringVector
import com.google.flatbuffers.Struct
import com.google.flatbuffers.Table
import com.google.flatbuffers.UnionVector
import java.nio.ByteBuffer
import java.nio.ByteOrder
import kotlin.math.sign

/**
 * /// The means for the platform to pass information pertaining to the sensor job that will be performed and details of the location parameters (terrain elevation model and geoid model) used in the measurement.
 */
@Suppress("unused")
class MtiJobDefinition_Ingest : Table() {

    fun __init(_i: Int, _bb: ByteBuffer)  {
        __reset(_i, _bb)
    }
    fun __assign(_i: Int, _bb: ByteBuffer) : MtiJobDefinition_Ingest {
        __init(_i, _bb)
        return this
    }
    /**
     * A platform assigned number identifying the specific request or task to which the specific dwell pertains.
     * Example: /// Example: 1234567890
     * Constraints: No constraints specified.
     */
    val j1 : Long
        get() {
            val o = __offset(4)
            return if(o != 0) bb.getLong(o + bb_pos) else 0L
        }
    /**
     * The type of sensor or the platform.
     * Example: /// Example: TYPE
     * Constraints: Minimum length = 0, Maximum length = 32
     */
    val j2 : String?
        get() {
            val o = __offset(6)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val j2AsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(6, 1)
    fun j2InByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 6, 1)
    /**
     * Identifier of the particular variant of the sensor type.
     * Example: /// Example: J3-ID
     * Constraints: Minimum length = 0, Maximum length = 8
     */
    val j3 : String?
        get() {
            val o = __offset(8)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val j3AsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(8, 1)
    fun j3InByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 8, 1)
    /**
     * Flag field indicating whether filtering has been applied to the targets detected within the dwell area.
     * Example: /// Example: 3
     * Constraints: No constraints specified.
     */
    val j4 : Int
        get() {
            val o = __offset(10)
            return if(o != 0) bb.getInt(o + bb_pos) else 0
        }
    /**
     * Priority of this tasking request relative to all other active tasking requests scheduled for execution on the specified platform.
     * Example: /// Example: 1
     * Constraints: No constraints specified.
     */
    val j5 : Int
        get() {
            val o = __offset(12)
            return if(o != 0) bb.getInt(o + bb_pos) else 0
        }
    /**
     * North-South position of the first corner (Point A) defining the area for sensor service, expressed as degrees North (positive) or South (negative) of the Equator.
     * Example: /// Example: 10.23
     * Constraints: No constraints specified.
     */
    val j6 : Double
        get() {
            val o = __offset(14)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     *  East-West position of the first corner (Point A) defining the area for sensor service, expressed as degrees East (positive, 0 to 180) or West (negative, 0 to -180) of the Prime Meridian.
     * Example: /// Example: 10.23
     * Constraints: No constraints specified.
     */
    val j7 : Double
        get() {
            val o = __offset(16)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     *  North-South position of the second corner (Point B) defining the area for sensor service, expressed as degrees North (positive) or South (negative) of the Equator.
     * Example: /// Example: 10.23
     * Constraints: No constraints specified.
     */
    val j8 : Double
        get() {
            val o = __offset(18)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * East-West position of the second corner (Point B) defining the area for sensor service, expressed as degrees East (positive, 0 to 180) or West (negative, 0 to -180) of the Prime Meridian.
     * Example: /// Example: 10.23
     * Constraints: No constraints specified.
     */
    val j9 : Double
        get() {
            val o = __offset(20)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * North-South position of the third corner (Point C) defining the area for sensor service, expressed as degrees North (positive) or South (negative) of the Equator.
     * Example: /// Example: 10.23
     * Constraints: No constraints specified.
     */
    val j10 : Double
        get() {
            val o = __offset(22)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * East-West position of the third corner (Point C) defining the area for sensor service, expressed as degrees East (positive, 0 to 180) or West (negative, 0 to -180) of the Prime Meridian.
     * Example: /// Example: 10.23
     * Constraints: No constraints specified.
     */
    val j11 : Double
        get() {
            val o = __offset(24)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * North-South position of the fourth corner (Point D) defining the area for sensor service, expressed as degrees North (positive) or South (negative) of the Equator.
     * Example: /// Example: 10.23
     * Constraints: No constraints specified.
     */
    val j12 : Double
        get() {
            val o = __offset(26)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * East-West position of the fourth corner (Point D) defining the area for sensor service, expressed as degrees East (positive, 0 to 180) or West (negative, 0 to -180) of the Prime Meridian.
     * Example: /// Example: 10.23
     * Constraints: No constraints specified.
     */
    val j13 : Double
        get() {
            val o = __offset(28)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Mode in which the radar will operate for the given job ID.
     * Example: /// Example: MODE
     * Constraints: Minimum length = 0, Maximum length = 32
     */
    val j14 : String?
        get() {
            val o = __offset(30)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val j14AsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(30, 1)
    fun j14InByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 30, 1)
    /**
     * The nominal revisit interval for the job ID, expressed in deciseconds.  Value of zero, indicates that the sensor is not revisiting the previous area.
     * Example: /// Example: 100
     * Constraints: No constraints specified.
     */
    val j15 : Int
        get() {
            val o = __offset(32)
            return if(o != 0) bb.getInt(o + bb_pos) else 0
        }
    /**
     * Nominal estimate of the standard deviation in the estimated horizontal (along track) sensor location, expressed in decimeters.   measured along the sensor track direction defined in the Dwell segment.
     * Example: /// Example: 100
     * Constraints: No constraints specified.
     */
    val j16 : Int
        get() {
            val o = __offset(34)
            return if(o != 0) bb.getInt(o + bb_pos) else 0
        }
    /**
     * Nominal estimate of the standard deviation in the estimated horizontal sensor location, measured orthogonal to the track direction, expressed in decimeters.
     * Example: /// Example: 100
     * Constraints: No constraints specified.
     */
    val j17 : Int
        get() {
            val o = __offset(36)
            return if(o != 0) bb.getInt(o + bb_pos) else 0
        }
    /**
     * Nominal estimate of the standard deviation of the measured sensor altitude, expressed in decimeters.
     * Example: /// Example: 100
     * Constraints: No constraints specified.
     */
    val j18 : Int
        get() {
            val o = __offset(38)
            return if(o != 0) bb.getInt(o + bb_pos) else 0
        }
    /**
     * Standard deviation of the estimate of sensor track heading, expressed in degrees.
     * Example: /// Example: 10
     * Constraints: No constraints specified.
     */
    val j19 : Int
        get() {
            val o = __offset(40)
            return if(o != 0) bb.getInt(o + bb_pos) else 0
        }
    /**
     * Nominal standard deviation of the estimate of sensor speed, expressed in millimeters per second.
     * Example: /// Example: 10
     * Constraints: No constraints specified.
     */
    val j20 : Int
        get() {
            val o = __offset(42)
            return if(o != 0) bb.getInt(o + bb_pos) else 0
        }
    /**
     * Nominal standard deviation of the slant range of the reported detection, expressed in centimeters.
     * Example: /// Example: 10
     * Constraints: No constraints specified.
     */
    val j21 : Int
        get() {
            val o = __offset(44)
            return if(o != 0) bb.getInt(o + bb_pos) else 0
        }
    /**
     * Nominal standard deviation of the measured cross angle to the reported detection, expressed in degrees.
     * Example: /// Example: 10.23
     * Constraints: No constraints specified.
     */
    val j22 : Double
        get() {
            val o = __offset(46)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Nominal standard deviation of the velocity line-of-sight component, expressed in centimeters per second.
     * Example: /// Example: 10
     * Constraints: No constraints specified.
     */
    val j23 : Int
        get() {
            val o = __offset(48)
            return if(o != 0) bb.getInt(o + bb_pos) else 0
        }
    /**
     * Nominal minimum velocity component along the line of sight, which can be detected by the sensor, expressed in decimeters per second.
     * Example: /// Example: 10
     * Constraints: No constraints specified.
     */
    val j24 : Int
        get() {
            val o = __offset(50)
            return if(o != 0) bb.getInt(o + bb_pos) else 0
        }
    /**
     * Nominal probability that an unobscured ten square-meter target will be detected within the given area of surveillance.
     * Example: /// Example: 10
     * Constraints: No constraints specified.
     */
    val j25 : Int
        get() {
            val o = __offset(52)
            return if(o != 0) bb.getInt(o + bb_pos) else 0
        }
    /**
     * The expected density of False Alarms (FA), expressed as the negative of the decibel value.
     * Example: /// Example: 10
     * Constraints: No constraints specified.
     */
    val j26 : Int
        get() {
            val o = __offset(54)
            return if(o != 0) bb.getInt(o + bb_pos) else 0
        }
    /**
     * The terrain elevation model used for developing the target reports.
     * Example: /// Example: MODEL
     * Constraints: Minimum length = 0, Maximum length = 64
     */
    val j27 : String?
        get() {
            val o = __offset(56)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val j27AsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(56, 1)
    fun j27InByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 56, 1)
    /**
     * The geoid model used for developing the target reports.
     * Example: /// Example: MODEL
     * Constraints: Minimum length = 0, Maximum length = 64
     */
    val j28 : String?
        get() {
            val o = __offset(58)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val j28AsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(58, 1)
    fun j28InByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 58, 1)
    companion object {
        fun validateVersion() = Constants.FLATBUFFERS_24_3_25()
        fun getRootAsMtiJobDefinition_Ingest(_bb: ByteBuffer): MtiJobDefinition_Ingest = getRootAsMtiJobDefinition_Ingest(_bb, MtiJobDefinition_Ingest())
        fun getRootAsMtiJobDefinition_Ingest(_bb: ByteBuffer, obj: MtiJobDefinition_Ingest): MtiJobDefinition_Ingest {
            _bb.order(ByteOrder.LITTLE_ENDIAN)
            return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb))
        }
        fun MtiJobDefinition_IngestBufferHasIdentifier(_bb: ByteBuffer) : Boolean = __has_identifier(_bb, "MTIJ")
        fun createMtiJobDefinition_Ingest(builder: FlatBufferBuilder, j1: Long, j2Offset: Int, j3Offset: Int, j4: Int, j5: Int, j6: Double, j7: Double, j8: Double, j9: Double, j10: Double, j11: Double, j12: Double, j13: Double, j14Offset: Int, j15: Int, j16: Int, j17: Int, j18: Int, j19: Int, j20: Int, j21: Int, j22: Double, j23: Int, j24: Int, j25: Int, j26: Int, j27Offset: Int, j28Offset: Int) : Int {
            builder.startTable(28)
            addJ22(builder, j22)
            addJ13(builder, j13)
            addJ12(builder, j12)
            addJ11(builder, j11)
            addJ10(builder, j10)
            addJ9(builder, j9)
            addJ8(builder, j8)
            addJ7(builder, j7)
            addJ6(builder, j6)
            addJ1(builder, j1)
            addJ28(builder, j28Offset)
            addJ27(builder, j27Offset)
            addJ26(builder, j26)
            addJ25(builder, j25)
            addJ24(builder, j24)
            addJ23(builder, j23)
            addJ21(builder, j21)
            addJ20(builder, j20)
            addJ19(builder, j19)
            addJ18(builder, j18)
            addJ17(builder, j17)
            addJ16(builder, j16)
            addJ15(builder, j15)
            addJ14(builder, j14Offset)
            addJ5(builder, j5)
            addJ4(builder, j4)
            addJ3(builder, j3Offset)
            addJ2(builder, j2Offset)
            return endMtiJobDefinition_Ingest(builder)
        }
        fun startMtiJobDefinition_Ingest(builder: FlatBufferBuilder) = builder.startTable(28)
        fun addJ1(builder: FlatBufferBuilder, j1: Long) = builder.addLong(0, j1, 0L)
        fun addJ2(builder: FlatBufferBuilder, j2: Int) = builder.addOffset(1, j2, 0)
        fun addJ3(builder: FlatBufferBuilder, j3: Int) = builder.addOffset(2, j3, 0)
        fun addJ4(builder: FlatBufferBuilder, j4: Int) = builder.addInt(3, j4, 0)
        fun addJ5(builder: FlatBufferBuilder, j5: Int) = builder.addInt(4, j5, 0)
        fun addJ6(builder: FlatBufferBuilder, j6: Double) = builder.addDouble(5, j6, 0.0)
        fun addJ7(builder: FlatBufferBuilder, j7: Double) = builder.addDouble(6, j7, 0.0)
        fun addJ8(builder: FlatBufferBuilder, j8: Double) = builder.addDouble(7, j8, 0.0)
        fun addJ9(builder: FlatBufferBuilder, j9: Double) = builder.addDouble(8, j9, 0.0)
        fun addJ10(builder: FlatBufferBuilder, j10: Double) = builder.addDouble(9, j10, 0.0)
        fun addJ11(builder: FlatBufferBuilder, j11: Double) = builder.addDouble(10, j11, 0.0)
        fun addJ12(builder: FlatBufferBuilder, j12: Double) = builder.addDouble(11, j12, 0.0)
        fun addJ13(builder: FlatBufferBuilder, j13: Double) = builder.addDouble(12, j13, 0.0)
        fun addJ14(builder: FlatBufferBuilder, j14: Int) = builder.addOffset(13, j14, 0)
        fun addJ15(builder: FlatBufferBuilder, j15: Int) = builder.addInt(14, j15, 0)
        fun addJ16(builder: FlatBufferBuilder, j16: Int) = builder.addInt(15, j16, 0)
        fun addJ17(builder: FlatBufferBuilder, j17: Int) = builder.addInt(16, j17, 0)
        fun addJ18(builder: FlatBufferBuilder, j18: Int) = builder.addInt(17, j18, 0)
        fun addJ19(builder: FlatBufferBuilder, j19: Int) = builder.addInt(18, j19, 0)
        fun addJ20(builder: FlatBufferBuilder, j20: Int) = builder.addInt(19, j20, 0)
        fun addJ21(builder: FlatBufferBuilder, j21: Int) = builder.addInt(20, j21, 0)
        fun addJ22(builder: FlatBufferBuilder, j22: Double) = builder.addDouble(21, j22, 0.0)
        fun addJ23(builder: FlatBufferBuilder, j23: Int) = builder.addInt(22, j23, 0)
        fun addJ24(builder: FlatBufferBuilder, j24: Int) = builder.addInt(23, j24, 0)
        fun addJ25(builder: FlatBufferBuilder, j25: Int) = builder.addInt(24, j25, 0)
        fun addJ26(builder: FlatBufferBuilder, j26: Int) = builder.addInt(25, j26, 0)
        fun addJ27(builder: FlatBufferBuilder, j27: Int) = builder.addOffset(26, j27, 0)
        fun addJ28(builder: FlatBufferBuilder, j28: Int) = builder.addOffset(27, j28, 0)
        fun endMtiJobDefinition_Ingest(builder: FlatBufferBuilder) : Int {
            val o = builder.endTable()
            return o
        }
        fun finishMtiJobDefinitionIngestBuffer(builder: FlatBufferBuilder, offset: Int) = builder.finish(offset, "MTIJ")
        fun finishSizePrefixedMtiJobDefinition_IngestBuffer(builder: FlatBufferBuilder, offset: Int) = builder.finishSizePrefixed(offset, "MTIJ")
    }
}
