// automatically generated by the FlatBuffers compiler, do not modify

import com.google.flatbuffers.BaseVector
import com.google.flatbuffers.BooleanVector
import com.google.flatbuffers.ByteVector
import com.google.flatbuffers.Constants
import com.google.flatbuffers.DoubleVector
import com.google.flatbuffers.FlatBufferBuilder
import com.google.flatbuffers.FloatVector
import com.google.flatbuffers.LongVector
import com.google.flatbuffers.StringVector
import com.google.flatbuffers.Struct
import com.google.flatbuffers.Table
import com.google.flatbuffers.UnionVector
import java.nio.ByteBuffer
import java.nio.ByteOrder
import kotlin.math.sign

/**
 * /// The ScalerInfo record describes the person or system who interpreted the ionogram in IonoObservation.
 */
@Suppress("unused")
class IonoObservationScalerInfo_Ingest : Table() {

    fun __init(_i: Int, _bb: ByteBuffer)  {
        __reset(_i, _bb)
    }
    fun __assign(_i: Int, _bb: ByteBuffer) : IonoObservationScalerInfo_Ingest {
        __init(_i, _bb)
        return this
    }
    /**
     * Scaler type (MANUAL, AUTOMATIC or UNKNOWN).
     * Example: /// Example: MANUAL
     * Constraints: Minimum length = 0, Maximum length = 9
     */
    val type : String?
        get() {
            val o = __offset(4)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val typeAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(4, 1)
    fun typeInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 4, 1)
    /**
     * Scaler name.
     * Example: /// Example: ARTIST-4
     * Constraints: Minimum length = 0, Maximum length = 20
     */
    val name : String?
        get() {
            val o = __offset(6)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val nameAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(6, 1)
    fun nameInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 6, 1)
    /**
     * Scaler organization.
     * Example: /// Example: UML
     * Constraints: Minimum length = 0, Maximum length = 64
     */
    val organization : String?
        get() {
            val o = __offset(8)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val organizationAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(8, 1)
    fun organizationInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 8, 1)
    /**
     * Scaler version.
     * Example: /// Example: 500200.1
     * Constraints: No constraints specified.
     */
    val version : Double
        get() {
            val o = __offset(10)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Scaler confidence score.
     * Example: /// Example: 75
     * Constraints: No constraints specified.
     */
    val confidenceScore : Int
        get() {
            val o = __offset(12)
            return if(o != 0) bb.getInt(o + bb_pos) else 0
        }
    /**
     * Scaler confidence level.
     * Example: /// Example: 11
     * Constraints: No constraints specified.
     */
    val confidenceLevel : Int
        get() {
            val o = __offset(14)
            return if(o != 0) bb.getInt(o + bb_pos) else 0
        }
    companion object {
        fun validateVersion() = Constants.FLATBUFFERS_24_3_25()
        fun getRootAsIonoObservationScalerInfo_Ingest(_bb: ByteBuffer): IonoObservationScalerInfo_Ingest = getRootAsIonoObservationScalerInfo_Ingest(_bb, IonoObservationScalerInfo_Ingest())
        fun getRootAsIonoObservationScalerInfo_Ingest(_bb: ByteBuffer, obj: IonoObservationScalerInfo_Ingest): IonoObservationScalerInfo_Ingest {
            _bb.order(ByteOrder.LITTLE_ENDIAN)
            return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb))
        }
        fun IonoObservationScalerInfo_IngestBufferHasIdentifier(_bb: ByteBuffer) : Boolean = __has_identifier(_bb, "IONO")
        fun createIonoObservationScalerInfo_Ingest(builder: FlatBufferBuilder, typeOffset: Int, nameOffset: Int, organizationOffset: Int, version: Double, confidenceScore: Int, confidenceLevel: Int) : Int {
            builder.startTable(6)
            addVersion(builder, version)
            addConfidenceLevel(builder, confidenceLevel)
            addConfidenceScore(builder, confidenceScore)
            addOrganization(builder, organizationOffset)
            addName(builder, nameOffset)
            addType(builder, typeOffset)
            return endIonoObservationScalerInfo_Ingest(builder)
        }
        fun startIonoObservationScalerInfo_Ingest(builder: FlatBufferBuilder) = builder.startTable(6)
        fun addType(builder: FlatBufferBuilder, type: Int) = builder.addOffset(0, type, 0)
        fun addName(builder: FlatBufferBuilder, name: Int) = builder.addOffset(1, name, 0)
        fun addOrganization(builder: FlatBufferBuilder, organization: Int) = builder.addOffset(2, organization, 0)
        fun addVersion(builder: FlatBufferBuilder, version: Double) = builder.addDouble(3, version, 0.0)
        fun addConfidenceScore(builder: FlatBufferBuilder, confidenceScore: Int) = builder.addInt(4, confidenceScore, 0)
        fun addConfidenceLevel(builder: FlatBufferBuilder, confidenceLevel: Int) = builder.addInt(5, confidenceLevel, 0)
        fun endIonoObservationScalerInfo_Ingest(builder: FlatBufferBuilder) : Int {
            val o = builder.endTable()
            return o
        }
        fun finishIonoObservationScalerInfoIngestBuffer(builder: FlatBufferBuilder, offset: Int) = builder.finish(offset, "IONO")
        fun finishSizePrefixedIonoObservationScalerInfo_IngestBuffer(builder: FlatBufferBuilder, offset: Int) = builder.finishSizePrefixed(offset, "IONO")
    }
}
