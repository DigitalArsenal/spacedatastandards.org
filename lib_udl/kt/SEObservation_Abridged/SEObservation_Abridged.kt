// automatically generated by the FlatBuffers compiler, do not modify

import com.google.flatbuffers.BaseVector
import com.google.flatbuffers.BooleanVector
import com.google.flatbuffers.ByteVector
import com.google.flatbuffers.Constants
import com.google.flatbuffers.DoubleVector
import com.google.flatbuffers.FlatBufferBuilder
import com.google.flatbuffers.FloatVector
import com.google.flatbuffers.LongVector
import com.google.flatbuffers.StringVector
import com.google.flatbuffers.Struct
import com.google.flatbuffers.Table
import com.google.flatbuffers.UnionVector
import java.nio.ByteBuffer
import java.nio.ByteOrder
import kotlin.math.sign

/**
 * /// A single space environment observation.
 */
@Suppress("unused")
class SEObservation_Abridged : Table() {

    fun __init(_i: Int, _bb: ByteBuffer)  {
        __reset(_i, _bb)
    }
    fun __assign(_i: Int, _bb: ByteBuffer) : SEObservation_Abridged {
        __init(_i, _bb)
        return this
    }
    /**
     * The type of observation associated with this record.
     * Example: /// Example: INTEGRAL FLUX
     * Constraints: Minimum length = 1, Maximum length = 24
     */
    val obType : String?
        get() {
            val o = __offset(4)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val obTypeAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(4, 1)
    fun obTypeInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 4, 1)
    /**
     * The Unit of Measure associated with this observation. If there are no physical units associated with the measurement, a value of NONE should be specified.
     * Example: /// Example: particles/cm^2/s/sr
     * Constraints: Minimum length = 1, Maximum length = 32
     */
    val obUoM : String?
        get() {
            val o = __offset(6)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val obUoMAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(6, 1)
    fun obUoMInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 6, 1)
    /**
     * A single observation value expressed in the specified unit of measure (obUoM). Because of the variability of the Space Environment data types, each record may employ a numeric observation value (obValue), a string observation value (obString), a Boolean observation value (obBool), an array of numeric observation values (obArray), or any combination of these.
     * Example: /// Example: 0.487687826
     * Constraints: No constraints specified.
     */
    val obValue : Double
        get() {
            val o = __offset(8)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * A single observation string expressed in the specified unit of measure (obUoM). Because of the variability of the Space Environment data types, each record may employ a numeric observation value (obValue), a string observation value (obString), a Boolean observation value (obBool), an array of numeric observation values (obArray), or any combination of these.
     * Example: /// Example: C1.3
     * Constraints: Minimum length = 0, Maximum length = 64
     */
    val obString : String?
        get() {
            val o = __offset(10)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val obStringAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(10, 1)
    fun obStringInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 10, 1)
    /**
     * An array of observation values expressed in the specified unit of measure (obUoM). Because of the variability of the Space Environment data types, each record may employ a numeric observation value (obValue), a string observation value (obString), a Boolean observation value (obBool), an array of numeric observation values (obArray), or any combination of these.
     * Example: /// Example: [1.7, 35.6, 21.2, 19.01]
     * Constraints: No constraints specified.
     */
    fun obArray(j: Int) : String? {
        val o = __offset(12)
        return if (o != 0) {
            __string(__vector(o) + j * 4)
        } else {
            null
        }
    }
    val obArrayLength : Int
        get() {
            val o = __offset(12); return if (o != 0) __vector_len(o) else 0
        }
    /**
     * A Boolean observation. Because of the variability of the Space Environment data types, each record may employ a numeric observation value (obValue), a string observation value (obString), a Boolean observation value (obBool), an array of numeric observation values (obArray), or any combination of these.
     * Example: /// Example: True
     * Constraints: No constraints specified.
     */
    val obBool : Boolean
        get() {
            val o = __offset(14)
            return if(o != 0) 0.toByte() != bb.get(o + bb_pos) else false
        }
    /**
     * The quality of this individual observation. The observation quality indicator value may vary among providers and may be a generalized statement (BAD, GOOD, UNCERTAIN, UNKNOWN) or a numeric value. Users should consult the data provider to verify the usage of the observation.
     * Example: /// Example: GOOD
     * Constraints: Minimum length = 0, Maximum length = 16
     */
    val obQuality : String?
        get() {
            val o = __offset(16)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val obQualityAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(16, 1)
    fun obQualityInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 16, 1)
    /**
     * Descriptive or additional information associated with this individual observation.
     * Example: /// Example: Observation Description Text
     * Constraints: Minimum length = 0, Maximum length = 512
     */
    val obDescription : String?
        get() {
            val o = __offset(18)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val obDescriptionAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(18, 1)
    fun obDescriptionInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 18, 1)
    companion object {
        fun validateVersion() = Constants.FLATBUFFERS_24_3_25()
        fun getRootAsSEObservation_Abridged(_bb: ByteBuffer): SEObservation_Abridged = getRootAsSEObservation_Abridged(_bb, SEObservation_Abridged())
        fun getRootAsSEObservation_Abridged(_bb: ByteBuffer, obj: SEObservation_Abridged): SEObservation_Abridged {
            _bb.order(ByteOrder.LITTLE_ENDIAN)
            return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb))
        }
        fun SEObservation_AbridgedBufferHasIdentifier(_bb: ByteBuffer) : Boolean = __has_identifier(_bb, "SEOB")
        fun createSEObservation_Abridged(builder: FlatBufferBuilder, obTypeOffset: Int, obUoMOffset: Int, obValue: Double, obStringOffset: Int, obArrayOffset: Int, obBool: Boolean, obQualityOffset: Int, obDescriptionOffset: Int) : Int {
            builder.startTable(8)
            addObValue(builder, obValue)
            addObDescription(builder, obDescriptionOffset)
            addObQuality(builder, obQualityOffset)
            addObArray(builder, obArrayOffset)
            addObString(builder, obStringOffset)
            addObUoM(builder, obUoMOffset)
            addObType(builder, obTypeOffset)
            addObBool(builder, obBool)
            return endSEObservation_Abridged(builder)
        }
        fun startSEObservation_Abridged(builder: FlatBufferBuilder) = builder.startTable(8)
        fun addObType(builder: FlatBufferBuilder, obType: Int) = builder.addOffset(0, obType, 0)
        fun addObUoM(builder: FlatBufferBuilder, obUoM: Int) = builder.addOffset(1, obUoM, 0)
        fun addObValue(builder: FlatBufferBuilder, obValue: Double) = builder.addDouble(2, obValue, 0.0)
        fun addObString(builder: FlatBufferBuilder, obString: Int) = builder.addOffset(3, obString, 0)
        fun addObArray(builder: FlatBufferBuilder, obArray: Int) = builder.addOffset(4, obArray, 0)
        fun createObArrayVector(builder: FlatBufferBuilder, data: IntArray) : Int {
            builder.startVector(4, data.size, 4)
            for (i in data.size - 1 downTo 0) {
                builder.addOffset(data[i])
            }
            return builder.endVector()
        }
        fun startObArrayVector(builder: FlatBufferBuilder, numElems: Int) = builder.startVector(4, numElems, 4)
        fun addObBool(builder: FlatBufferBuilder, obBool: Boolean) = builder.addBoolean(5, obBool, false)
        fun addObQuality(builder: FlatBufferBuilder, obQuality: Int) = builder.addOffset(6, obQuality, 0)
        fun addObDescription(builder: FlatBufferBuilder, obDescription: Int) = builder.addOffset(7, obDescription, 0)
        fun endSEObservation_Abridged(builder: FlatBufferBuilder) : Int {
            val o = builder.endTable()
            return o
        }
        fun finishSEObservationAbridgedBuffer(builder: FlatBufferBuilder, offset: Int) = builder.finish(offset, "SEOB")
        fun finishSizePrefixedSEObservation_AbridgedBuffer(builder: FlatBufferBuilder, offset: Int) = builder.finishSizePrefixed(offset, "SEOB")
    }
}
