// automatically generated by the FlatBuffers compiler, do not modify

import com.google.flatbuffers.BaseVector
import com.google.flatbuffers.BooleanVector
import com.google.flatbuffers.ByteVector
import com.google.flatbuffers.Constants
import com.google.flatbuffers.DoubleVector
import com.google.flatbuffers.FlatBufferBuilder
import com.google.flatbuffers.FloatVector
import com.google.flatbuffers.LongVector
import com.google.flatbuffers.StringVector
import com.google.flatbuffers.Struct
import com.google.flatbuffers.Table
import com.google.flatbuffers.UnionVector
import java.nio.ByteBuffer
import java.nio.ByteOrder
import kotlin.math.sign

/**
 * /// The specialties required to implement this support item.
 */
@Suppress("unused")
class LogisticsSpecialties_Ingest : Table() {

    fun __init(_i: Int, _bb: ByteBuffer)  {
        __reset(_i, _bb)
    }
    fun __assign(_i: Int, _bb: ByteBuffer) : LogisticsSpecialties_Ingest {
        __init(_i, _bb)
        return this
    }
    /**
     * Indicates where the repairs will be performed, or which shop specialty has been assigned responsibility for correcting the discrepancy. Shop specialties are normally listed in abbreviated format.
     * Example: /// Example: ELEN
     * Constraints: Minimum length = 0, Maximum length = 4
     */
    val specialty : String?
        get() {
            val o = __offset(4)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val specialtyAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(4, 1)
    fun specialtyInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 4, 1)
    /**
     * Skill level of the mission response team member.
     * Example: /// Example: 3
     * Constraints: No constraints specified.
     */
    val skillLevel : Int
        get() {
            val o = __offset(6)
            return if(o != 0) bb.getInt(o + bb_pos) else 0
        }
    /**
     * The first name of the specialist.
     * Example: /// Example: JOHN
     * Constraints: Minimum length = 0, Maximum length = 20
     */
    val firstName : String?
        get() {
            val o = __offset(8)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val firstNameAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(8, 1)
    fun firstNameInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 8, 1)
    /**
     * The last name of the specialist.
     * Example: /// Example: SMITH
     * Constraints: Minimum length = 0, Maximum length = 30
     */
    val lastName : String?
        get() {
            val o = __offset(10)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val lastNameAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(10, 1)
    fun lastNameInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 10, 1)
    /**
     * Military service rank designation.
     * Example: /// Example: MAJ
     * Constraints: Minimum length = 0, Maximum length = 6
     */
    val rankCode : String?
        get() {
            val o = __offset(12)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val rankCodeAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(12, 1)
    fun rankCodeInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 12, 1)
    /**
     * The last four digits of the specialist's social security number.
     * Example: /// Example: 9999
     * Constraints: Minimum length = 0, Maximum length = 4
     */
    val last4Ssn : String?
        get() {
            val o = __offset(14)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val last4SsnAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(14, 1)
    fun last4SsnInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 14, 1)
    /**
     * Type code that determines role of the mission response team member. TC - Team Chief, TM - Team Member.
     * Example: /// Example: TC
     * Constraints: Minimum length = 0, Maximum length = 2
     */
    val roleTypeCode : String?
        get() {
            val o = __offset(16)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val roleTypeCodeAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(16, 1)
    fun roleTypeCodeInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 16, 1)
    companion object {
        fun validateVersion() = Constants.FLATBUFFERS_24_3_25()
        fun getRootAsLogisticsSpecialties_Ingest(_bb: ByteBuffer): LogisticsSpecialties_Ingest = getRootAsLogisticsSpecialties_Ingest(_bb, LogisticsSpecialties_Ingest())
        fun getRootAsLogisticsSpecialties_Ingest(_bb: ByteBuffer, obj: LogisticsSpecialties_Ingest): LogisticsSpecialties_Ingest {
            _bb.order(ByteOrder.LITTLE_ENDIAN)
            return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb))
        }
        fun LogisticsSpecialties_IngestBufferHasIdentifier(_bb: ByteBuffer) : Boolean = __has_identifier(_bb, "LOGI")
        fun createLogisticsSpecialties_Ingest(builder: FlatBufferBuilder, specialtyOffset: Int, skillLevel: Int, firstNameOffset: Int, lastNameOffset: Int, rankCodeOffset: Int, last4SsnOffset: Int, roleTypeCodeOffset: Int) : Int {
            builder.startTable(7)
            addRoleTypeCode(builder, roleTypeCodeOffset)
            addLast4Ssn(builder, last4SsnOffset)
            addRankCode(builder, rankCodeOffset)
            addLastName(builder, lastNameOffset)
            addFirstName(builder, firstNameOffset)
            addSkillLevel(builder, skillLevel)
            addSpecialty(builder, specialtyOffset)
            return endLogisticsSpecialties_Ingest(builder)
        }
        fun startLogisticsSpecialties_Ingest(builder: FlatBufferBuilder) = builder.startTable(7)
        fun addSpecialty(builder: FlatBufferBuilder, specialty: Int) = builder.addOffset(0, specialty, 0)
        fun addSkillLevel(builder: FlatBufferBuilder, skillLevel: Int) = builder.addInt(1, skillLevel, 0)
        fun addFirstName(builder: FlatBufferBuilder, firstName: Int) = builder.addOffset(2, firstName, 0)
        fun addLastName(builder: FlatBufferBuilder, lastName: Int) = builder.addOffset(3, lastName, 0)
        fun addRankCode(builder: FlatBufferBuilder, rankCode: Int) = builder.addOffset(4, rankCode, 0)
        fun addLast4Ssn(builder: FlatBufferBuilder, last4Ssn: Int) = builder.addOffset(5, last4Ssn, 0)
        fun addRoleTypeCode(builder: FlatBufferBuilder, roleTypeCode: Int) = builder.addOffset(6, roleTypeCode, 0)
        fun endLogisticsSpecialties_Ingest(builder: FlatBufferBuilder) : Int {
            val o = builder.endTable()
            return o
        }
        fun finishLogisticsSpecialtiesIngestBuffer(builder: FlatBufferBuilder, offset: Int) = builder.finish(offset, "LOGI")
        fun finishSizePrefixedLogisticsSpecialties_IngestBuffer(builder: FlatBufferBuilder, offset: Int) = builder.finishSizePrefixed(offset, "LOGI")
    }
}
