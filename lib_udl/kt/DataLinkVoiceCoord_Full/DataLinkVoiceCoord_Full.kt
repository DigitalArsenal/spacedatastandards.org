// automatically generated by the FlatBuffers compiler, do not modify

import com.google.flatbuffers.BaseVector
import com.google.flatbuffers.BooleanVector
import com.google.flatbuffers.ByteVector
import com.google.flatbuffers.Constants
import com.google.flatbuffers.DoubleVector
import com.google.flatbuffers.FlatBufferBuilder
import com.google.flatbuffers.FloatVector
import com.google.flatbuffers.LongVector
import com.google.flatbuffers.StringVector
import com.google.flatbuffers.Struct
import com.google.flatbuffers.Table
import com.google.flatbuffers.UnionVector
import java.nio.ByteBuffer
import java.nio.ByteOrder
import kotlin.math.sign

/**
 * /// Collection of information regarding the function, frequency, and priority of interface control and coordination nets for this data link message. There can be 1 to many DataLinkVoiceCoord collections within the datalink service.
 */
@Suppress("unused")
class DataLinkVoiceCoord_Full : Table() {

    fun __init(_i: Int, _bb: ByteBuffer)  {
        __reset(_i, _bb)
    }
    fun __assign(_i: Int, _bb: ByteBuffer) : DataLinkVoiceCoord_Full {
        __init(_i, _bb)
        return this
    }
    /**
     * Designator assigned to a voice interface control and coordination net for this data link message (e.g. ADCCN, DCN, VPN, etc.).
     * Example: /// Example: VPN
     * Constraints: Minimum length = 0, Maximum length = 5
     */
    val voiceNetDes : String?
        get() {
            val o = __offset(4)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val voiceNetDesAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(4, 1)
    fun voiceNetDesInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 4, 1)
    /**
     * Designator used in nonsecure communications to refer to a radio frequency for this data link message.
     * Example: /// Example: ST300A
     * Constraints: Minimum length = 0, Maximum length = 8
     */
    val freqDes : String?
        get() {
            val o = __offset(6)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val freqDesAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(6, 1)
    fun freqDesInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 6, 1)
    /**
     * Priority of a communication circuit, channel or frequency for this data link message such as P (Primary), M (Monitor), etc.
     * Example: /// Example: P
     * Constraints: Minimum length = 0, Maximum length = 1
     */
    val commPri : String?
        get() {
            val o = __offset(8)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val commPriAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(8, 1)
    fun commPriInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 8, 1)
    /**
     * Array of telephone numbers or contact frequencies used for interface control for this data link message.
     * Example: /// Example: ['TEL:804-555-4142', 'TEL:804-867-5309']
     * Constraints: No constraints specified.
     */
    fun teleFreqNums(j: Int) : String? {
        val o = __offset(10)
        return if (o != 0) {
            __string(__vector(o) + j * 4)
        } else {
            null
        }
    }
    val teleFreqNumsLength : Int
        get() {
            val o = __offset(10); return if (o != 0) __vector_len(o) else 0
        }
    companion object {
        fun validateVersion() = Constants.FLATBUFFERS_24_3_25()
        fun getRootAsDataLinkVoiceCoord_Full(_bb: ByteBuffer): DataLinkVoiceCoord_Full = getRootAsDataLinkVoiceCoord_Full(_bb, DataLinkVoiceCoord_Full())
        fun getRootAsDataLinkVoiceCoord_Full(_bb: ByteBuffer, obj: DataLinkVoiceCoord_Full): DataLinkVoiceCoord_Full {
            _bb.order(ByteOrder.LITTLE_ENDIAN)
            return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb))
        }
        fun DataLinkVoiceCoord_FullBufferHasIdentifier(_bb: ByteBuffer) : Boolean = __has_identifier(_bb, "DATA")
        fun createDataLinkVoiceCoord_Full(builder: FlatBufferBuilder, voiceNetDesOffset: Int, freqDesOffset: Int, commPriOffset: Int, teleFreqNumsOffset: Int) : Int {
            builder.startTable(4)
            addTeleFreqNums(builder, teleFreqNumsOffset)
            addCommPri(builder, commPriOffset)
            addFreqDes(builder, freqDesOffset)
            addVoiceNetDes(builder, voiceNetDesOffset)
            return endDataLinkVoiceCoord_Full(builder)
        }
        fun startDataLinkVoiceCoord_Full(builder: FlatBufferBuilder) = builder.startTable(4)
        fun addVoiceNetDes(builder: FlatBufferBuilder, voiceNetDes: Int) = builder.addOffset(0, voiceNetDes, 0)
        fun addFreqDes(builder: FlatBufferBuilder, freqDes: Int) = builder.addOffset(1, freqDes, 0)
        fun addCommPri(builder: FlatBufferBuilder, commPri: Int) = builder.addOffset(2, commPri, 0)
        fun addTeleFreqNums(builder: FlatBufferBuilder, teleFreqNums: Int) = builder.addOffset(3, teleFreqNums, 0)
        fun createTeleFreqNumsVector(builder: FlatBufferBuilder, data: IntArray) : Int {
            builder.startVector(4, data.size, 4)
            for (i in data.size - 1 downTo 0) {
                builder.addOffset(data[i])
            }
            return builder.endVector()
        }
        fun startTeleFreqNumsVector(builder: FlatBufferBuilder, numElems: Int) = builder.startVector(4, numElems, 4)
        fun endDataLinkVoiceCoord_Full(builder: FlatBufferBuilder) : Int {
            val o = builder.endTable()
            return o
        }
        fun finishDataLinkVoiceCoordFullBuffer(builder: FlatBufferBuilder, offset: Int) = builder.finish(offset, "DATA")
        fun finishSizePrefixedDataLinkVoiceCoord_FullBuffer(builder: FlatBufferBuilder, offset: Int) = builder.finishSizePrefixed(offset, "DATA")
    }
}
