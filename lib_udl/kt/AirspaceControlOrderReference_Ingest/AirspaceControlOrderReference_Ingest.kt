// automatically generated by the FlatBuffers compiler, do not modify

import com.google.flatbuffers.BaseVector
import com.google.flatbuffers.BooleanVector
import com.google.flatbuffers.ByteVector
import com.google.flatbuffers.Constants
import com.google.flatbuffers.DoubleVector
import com.google.flatbuffers.FlatBufferBuilder
import com.google.flatbuffers.FloatVector
import com.google.flatbuffers.LongVector
import com.google.flatbuffers.StringVector
import com.google.flatbuffers.Struct
import com.google.flatbuffers.Table
import com.google.flatbuffers.UnionVector
import java.nio.ByteBuffer
import java.nio.ByteOrder
import kotlin.math.sign

/**
 * /// The airspaceControlReferences set provides both USMTF and non-USMTF references for this airspace control order.
 */
@Suppress("unused")
class AirspaceControlOrderReference_Ingest : Table() {

    fun __init(_i: Int, _bb: ByteBuffer)  {
        __reset(_i, _bb)
    }
    fun __assign(_i: Int, _bb: ByteBuffer) : AirspaceControlOrderReference_Ingest {
        __init(_i, _bb)
        return this
    }
    /**
     * Specifies an alphabetic serial number identifying a reference pertaining to this message.
     * Example: /// Example: A
     * Constraints: Minimum length = 0, Maximum length = 8
     */
    val refSid : String?
        get() {
            val o = __offset(4)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val refSidAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(4, 1)
    fun refSidInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 4, 1)
    /**
     * Specifies the type for this reference.
     * Example: /// Example: NBC1
     * Constraints: Minimum length = 0, Maximum length = 64
     */
    val refType : String?
        get() {
            val o = __offset(6)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val refTypeAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(6, 1)
    fun refTypeInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 6, 1)
    /**
     * The originator of this reference.
     * Example: /// Example: SHAPE
     * Constraints: Minimum length = 0, Maximum length = 36
     */
    val refOriginator : String?
        get() {
            val o = __offset(8)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val refOriginatorAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(8, 1)
    fun refOriginatorInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 8, 1)
    /**
     * Timestamp of the referenced message, in ISO 8601 UTC format with millisecond precision.
     * Example: /// Example: 2024-01-07T13:55:43.123Z
     * Constraints: No constraints specified.
     */
    val refTs : String?
        get() {
            val o = __offset(10)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val refTsAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(10, 1)
    fun refTsInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 10, 1)
    /**
     * The reference serial number.
     * Example: /// Example: 100
     * Constraints: Minimum length = 0, Maximum length = 16
     */
    val refSerialNum : String?
        get() {
            val o = __offset(12)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val refSerialNumAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(12, 1)
    fun refSerialNumInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 12, 1)
    /**
     * Indicates any special actions, restrictions, guidance, or information relating to this reference.
     * Example: /// Example: NOTAL
     * Constraints: Minimum length = 0, Maximum length = 8
     */
    val refSpecialNotation : String?
        get() {
            val o = __offset(14)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val refSpecialNotationAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(14, 1)
    fun refSpecialNotationInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 14, 1)
    /**
     * Array of NATO Subject Indicator Codes (SIC) or filing numbers of the document being referenced.
     * Example: /// Example: ['RCA', 'FN:4503B']
     * Constraints: No constraints specified.
     */
    fun refSics(j: Int) : String? {
        val o = __offset(16)
        return if (o != 0) {
            __string(__vector(o) + j * 4)
        } else {
            null
        }
    }
    val refSicsLength : Int
        get() {
            val o = __offset(16); return if (o != 0) __vector_len(o) else 0
        }
    companion object {
        fun validateVersion() = Constants.FLATBUFFERS_24_3_25()
        fun getRootAsAirspaceControlOrderReference_Ingest(_bb: ByteBuffer): AirspaceControlOrderReference_Ingest = getRootAsAirspaceControlOrderReference_Ingest(_bb, AirspaceControlOrderReference_Ingest())
        fun getRootAsAirspaceControlOrderReference_Ingest(_bb: ByteBuffer, obj: AirspaceControlOrderReference_Ingest): AirspaceControlOrderReference_Ingest {
            _bb.order(ByteOrder.LITTLE_ENDIAN)
            return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb))
        }
        fun AirspaceControlOrderReference_IngestBufferHasIdentifier(_bb: ByteBuffer) : Boolean = __has_identifier(_bb, "AIRS")
        fun createAirspaceControlOrderReference_Ingest(builder: FlatBufferBuilder, refSidOffset: Int, refTypeOffset: Int, refOriginatorOffset: Int, refTsOffset: Int, refSerialNumOffset: Int, refSpecialNotationOffset: Int, refSicsOffset: Int) : Int {
            builder.startTable(7)
            addRefSICs(builder, refSicsOffset)
            addRefSpecialNotation(builder, refSpecialNotationOffset)
            addRefSerialNum(builder, refSerialNumOffset)
            addRefTs(builder, refTsOffset)
            addRefOriginator(builder, refOriginatorOffset)
            addRefType(builder, refTypeOffset)
            addRefSId(builder, refSidOffset)
            return endAirspaceControlOrderReference_Ingest(builder)
        }
        fun startAirspaceControlOrderReference_Ingest(builder: FlatBufferBuilder) = builder.startTable(7)
        fun addRefSId(builder: FlatBufferBuilder, refSid: Int) = builder.addOffset(0, refSid, 0)
        fun addRefType(builder: FlatBufferBuilder, refType: Int) = builder.addOffset(1, refType, 0)
        fun addRefOriginator(builder: FlatBufferBuilder, refOriginator: Int) = builder.addOffset(2, refOriginator, 0)
        fun addRefTs(builder: FlatBufferBuilder, refTs: Int) = builder.addOffset(3, refTs, 0)
        fun addRefSerialNum(builder: FlatBufferBuilder, refSerialNum: Int) = builder.addOffset(4, refSerialNum, 0)
        fun addRefSpecialNotation(builder: FlatBufferBuilder, refSpecialNotation: Int) = builder.addOffset(5, refSpecialNotation, 0)
        fun addRefSICs(builder: FlatBufferBuilder, refSics: Int) = builder.addOffset(6, refSics, 0)
        fun createRefSicsVector(builder: FlatBufferBuilder, data: IntArray) : Int {
            builder.startVector(4, data.size, 4)
            for (i in data.size - 1 downTo 0) {
                builder.addOffset(data[i])
            }
            return builder.endVector()
        }
        fun startRefSicsVector(builder: FlatBufferBuilder, numElems: Int) = builder.startVector(4, numElems, 4)
        fun endAirspaceControlOrderReference_Ingest(builder: FlatBufferBuilder) : Int {
            val o = builder.endTable()
            return o
        }
        fun finishAirspaceControlOrderReferenceIngestBuffer(builder: FlatBufferBuilder, offset: Int) = builder.finish(offset, "AIRS")
        fun finishSizePrefixedAirspaceControlOrderReference_IngestBuffer(builder: FlatBufferBuilder, offset: Int) = builder.finishSizePrefixed(offset, "AIRS")
    }
}
