// automatically generated by the FlatBuffers compiler, do not modify

import com.google.flatbuffers.BaseVector
import com.google.flatbuffers.BooleanVector
import com.google.flatbuffers.ByteVector
import com.google.flatbuffers.Constants
import com.google.flatbuffers.DoubleVector
import com.google.flatbuffers.FlatBufferBuilder
import com.google.flatbuffers.FloatVector
import com.google.flatbuffers.LongVector
import com.google.flatbuffers.StringVector
import com.google.flatbuffers.Struct
import com.google.flatbuffers.Table
import com.google.flatbuffers.UnionVector
import java.nio.ByteBuffer
import java.nio.ByteOrder
import kotlin.math.sign

/**
 * /// What it is that is trying to be exploited.
 */
@Suppress("unused")
class ISRCollectionExploitationRequirement_Abridged : Table() {

    fun __init(_i: Int, _bb: ByteBuffer)  {
        __reset(_i, _bb)
    }
    fun __assign(_i: Int, _bb: ByteBuffer) : ISRCollectionExploitationRequirement_Abridged {
        __init(_i, _bb)
        return this
    }
    /**
     * Exploitation requirement id.
     * Example: /// Example: ISRCOLLECTIONEXPLOITATIONREQUIREMENT
     * Constraints: Minimum length = 0, Maximum length = 36
     */
    val id : String?
        get() {
            val o = __offset(4)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val idAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(4, 1)
    fun idInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 4, 1)
    /**
     * Amplifying data for the exploitation requirement.
     * Example: /// Example: AMPLIFICATION
     * Constraints: Minimum length = 0, Maximum length = 256
     */
    val amplification : String?
        get() {
            val o = __offset(6)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val amplificationAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(6, 1)
    fun amplificationInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 6, 1)
    /**
     * The reporting criteria of the collection requirement.
     * Example: /// Example: CRITERIA
     * Constraints: Minimum length = 0, Maximum length = 32
     */
    val reportingCriteria : String?
        get() {
            val o = __offset(8)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val reportingCriteriaAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(8, 1)
    fun reportingCriteriaInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 8, 1)
    /**
     * List of e-mails to disseminate collection verification information.
     * Example: /// Example: EMAILS
     * Constraints: Minimum length = 0, Maximum length = 32
     */
    val dissemination : String?
        get() {
            val o = __offset(10)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val disseminationAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(10, 1)
    fun disseminationInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 10, 1)
    /**
     * Essential Elements of Information.
     * Example: /// Example: ESSENTIAL_ELEMENTS
     * Constraints: Minimum length = 0, Maximum length = 32
     */
    val eei : String?
        get() {
            val o = __offset(12)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val eeiAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(12, 1)
    fun eeiInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 12, 1)
    /**
     * No description provided.
     * Example: /// Example: No example provided.
     * Constraints: No constraints specified.
     */
    val poc : String?
        get() {
            val o = __offset(14)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val pocAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(14, 1)
    fun pocInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 14, 1)
    companion object {
        fun validateVersion() = Constants.FLATBUFFERS_24_3_25()
        fun getRootAsISRCollectionExploitationRequirement_Abridged(_bb: ByteBuffer): ISRCollectionExploitationRequirement_Abridged = getRootAsISRCollectionExploitationRequirement_Abridged(_bb, ISRCollectionExploitationRequirement_Abridged())
        fun getRootAsISRCollectionExploitationRequirement_Abridged(_bb: ByteBuffer, obj: ISRCollectionExploitationRequirement_Abridged): ISRCollectionExploitationRequirement_Abridged {
            _bb.order(ByteOrder.LITTLE_ENDIAN)
            return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb))
        }
        fun ISRCollectionExploitationRequirement_AbridgedBufferHasIdentifier(_bb: ByteBuffer) : Boolean = __has_identifier(_bb, "ISRC")
        fun createISRCollectionExploitationRequirement_Abridged(builder: FlatBufferBuilder, idOffset: Int, amplificationOffset: Int, reportingCriteriaOffset: Int, disseminationOffset: Int, eeiOffset: Int, pocOffset: Int) : Int {
            builder.startTable(6)
            addPoc(builder, pocOffset)
            addEei(builder, eeiOffset)
            addDissemination(builder, disseminationOffset)
            addReportingCriteria(builder, reportingCriteriaOffset)
            addAmplification(builder, amplificationOffset)
            addId(builder, idOffset)
            return endISRCollectionExploitationRequirement_Abridged(builder)
        }
        fun startISRCollectionExploitationRequirement_Abridged(builder: FlatBufferBuilder) = builder.startTable(6)
        fun addId(builder: FlatBufferBuilder, id: Int) = builder.addOffset(0, id, 0)
        fun addAmplification(builder: FlatBufferBuilder, amplification: Int) = builder.addOffset(1, amplification, 0)
        fun addReportingCriteria(builder: FlatBufferBuilder, reportingCriteria: Int) = builder.addOffset(2, reportingCriteria, 0)
        fun addDissemination(builder: FlatBufferBuilder, dissemination: Int) = builder.addOffset(3, dissemination, 0)
        fun addEei(builder: FlatBufferBuilder, eei: Int) = builder.addOffset(4, eei, 0)
        fun addPoc(builder: FlatBufferBuilder, poc: Int) = builder.addOffset(5, poc, 0)
        fun endISRCollectionExploitationRequirement_Abridged(builder: FlatBufferBuilder) : Int {
            val o = builder.endTable()
            return o
        }
        fun finishISRCollectionExploitationRequirementAbridgedBuffer(builder: FlatBufferBuilder, offset: Int) = builder.finish(offset, "ISRC")
        fun finishSizePrefixedISRCollectionExploitationRequirement_AbridgedBuffer(builder: FlatBufferBuilder, offset: Int) = builder.finishSizePrefixed(offset, "ISRC")
    }
}
