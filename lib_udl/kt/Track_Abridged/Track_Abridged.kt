// automatically generated by the FlatBuffers compiler, do not modify

import com.google.flatbuffers.BaseVector
import com.google.flatbuffers.BooleanVector
import com.google.flatbuffers.ByteVector
import com.google.flatbuffers.Constants
import com.google.flatbuffers.DoubleVector
import com.google.flatbuffers.FlatBufferBuilder
import com.google.flatbuffers.FloatVector
import com.google.flatbuffers.LongVector
import com.google.flatbuffers.StringVector
import com.google.flatbuffers.Struct
import com.google.flatbuffers.Table
import com.google.flatbuffers.UnionVector
import java.nio.ByteBuffer
import java.nio.ByteOrder
import kotlin.math.sign

/**
 * /// A track is a position and optionally a heading/velocity of an object such as an aircraft at a particular timestamp. It also includes optional information regarding the identity/type of the target object, if known.
 */
@Suppress("unused")
class Track_Abridged : Table() {

    fun __init(_i: Int, _bb: ByteBuffer)  {
        __reset(_i, _bb)
    }
    fun __assign(_i: Int, _bb: ByteBuffer) : Track_Abridged {
        __init(_i, _bb)
        return this
    }
    /**
     * Unique identifier of the record, auto-generated by the system.
     * Example: /// Example: TRACK-ID
     * Constraints: Minimum length = 1, Maximum length = 36
     */
    val id : String?
        get() {
            val o = __offset(4)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val idAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(4, 1)
    fun idInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 4, 1)
    /**
     * Classification marking of the data in IC/CAPCO Portion-marked format.
     * Example: /// Example: U
     * Constraints: Minimum length = 1, Maximum length = 128
     */
    val classificationMarking : String?
        get() {
            val o = __offset(6)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val classificationMarkingAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(6, 1)
    fun classificationMarkingInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 6, 1)
    /**
     * Contact information for assets reporting PPLI (Precise Participant Location and Identification). PPLI is a Link 16 message that is used by units to transmit complete location, identification, and limited status information.
     * Example: /// Example: Contact Info
     * Constraints: Minimum length = 0, Maximum length = 64
     */
    val cntct : String?
        get() {
            val o = __offset(8)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val cntctAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(8, 1)
    fun cntctInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 8, 1)
    /**
     * Time the row was created in the database, auto-populated by the system.
     * Example: /// Example: 2018-01-01T16:00:00.123Z
     * Constraints: No constraints specified.
     */
    val createdAt : String?
        get() {
            val o = __offset(10)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val createdAtAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(10, 1)
    fun createdAtInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 10, 1)
    /**
     * Application user who created the row in the database, auto-populated by the system.
     * Example: /// Example: some.user
     * Constraints: Minimum length = 1, Maximum length = 64
     */
    val createdBy : String?
        get() {
            val o = __offset(12)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val createdByAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(12, 1)
    fun createdByInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 12, 1)
    /**
     * Message Timestamp.
     * Example: /// Example: 2021-01-01T01:01:01.123456Z
     * Constraints: No constraints specified.
     */
    val msgTs : String?
        get() {
            val o = __offset(14)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val msgTsAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(14, 1)
    fun msgTsInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 14, 1)
    /**
     * Mission ID related to the track.
     * Example: /// Example: msnId
     * Constraints: Minimum length = 0, Maximum length = 36
     */
    val msnId : String?
        get() {
            val o = __offset(16)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val msnIdAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(16, 1)
    fun msnIdInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 16, 1)
    /**
     * Nationality or organization of the tracking/reporting system or platform (e.g. FR, NATO, US, etc.).
     * Example: /// Example: US
     * Constraints: Minimum length = 0, Maximum length = 64
     */
    val assetNat : String?
        get() {
            val o = __offset(18)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val assetNatAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(18, 1)
    fun assetNatInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 18, 1)
    /**
     * Id/name of the platform providing the track data (i.e., tail number for air platform, tower ID for tower based sensor, site id for fixed radar).
     * Example: /// Example: asset
     * Constraints: Minimum length = 0, Maximum length = 32
     */
    val asset : String?
        get() {
            val o = __offset(20)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val assetAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(20, 1)
    fun assetInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 20, 1)
    /**
     * Id/name of sensor providing the track data.
     * Example: /// Example: sen
     * Constraints: Minimum length = 0, Maximum length = 32
     */
    val sen : String?
        get() {
            val o = __offset(22)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val senAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(22, 1)
    fun senInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 22, 1)
    /**
     * Sensor quality.
     * Example: /// Example: senQual
     * Constraints: Minimum length = 0, Maximum length = 32
     */
    val senQual : String?
        get() {
            val o = __offset(24)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val senQualAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(24, 1)
    fun senQualInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 24, 1)
    /**
     * UUID identifying the track, which should remain the same on subsequent tracks of the same object.
     * Example: /// Example: trkId
     * Constraints: Minimum length = 0, Maximum length = 36
     */
    val trkId : String?
        get() {
            val o = __offset(26)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val trkIdAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(26, 1)
    fun trkIdInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 26, 1)
    /**
     * The track number (TN) of a surveillance entity. Intended as, but not constrained to, the J-series track number encoded as five character alpha-numeric characters. Users should refer to J-series documentation for specific TN definitions.
     * Example: /// Example: trkNum
     * Constraints: Minimum length = 0, Maximum length = 32
     */
    val trkNum : String?
        get() {
            val o = __offset(28)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val trkNumAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(28, 1)
    fun trkNumInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 28, 1)
    /**
     * Status of the track (e.g., INITIATING, MAINTAINING, DROPPING, TERMINATED, etc.).
     * Example: /// Example: INITIATING
     * Constraints: Minimum length = 0, Maximum length = 32
     */
    val trkStat : String?
        get() {
            val o = __offset(30)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val trkStatAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(30, 1)
    fun trkStatInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 30, 1)
    /**
     * Nationality or organization of the track object (e.g. FR, NATO, US, etc.).
     * Example: /// Example: NATO
     * Constraints: Minimum length = 0, Maximum length = 64
     */
    val objNat : String?
        get() {
            val o = __offset(32)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val objNatAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(32, 1)
    fun objNatInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 32, 1)
    /**
     * The UID or designation of the tracked object.
     * Example: /// Example: objId
     * Constraints: Minimum length = 0, Maximum length = 36
     */
    val objId : String?
        get() {
            val o = __offset(34)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val objIdAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(34, 1)
    fun objIdInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 34, 1)
    /**
     * The generic classification of the track object/group (e.g., HELICOPTER, TRACKED, WATERCRAFT, WHEELED, etc.). Referenced, but not constrained to, NATO STANAG 4676 object type classifications.
     * Example: /// Example: WATERCRAFT
     * Constraints: Minimum length = 0, Maximum length = 32
     */
    val objType : String?
        get() {
            val o = __offset(36)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val objTypeAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(36, 1)
    fun objTypeInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 36, 1)
    /**
     * The object specific type. Intended as, but not constrained to, MIL-STD-6016 environment dependent specific type designations. The specific type can be reported as either a combination of the code and environment (e.g. 155/SURFACE) or as the descriptive representation (e.g. AUDACE DDG), which are equivalent.
     * Example: /// Example: LIGHT_TANK
     * Constraints: Minimum length = 0, Maximum length = 32
     */
    val objSpec : String?
        get() {
            val o = __offset(38)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val objSpecAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(38, 1)
    fun objSpecInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 38, 1)
    /**
     * The object platform type. Intended as, but not constrained to, MIL-STD-6016 environment dependent platform type designations. The platform type can be reported as either a combination of the code and environment (e.g. 14/LAND) or as the descriptive representations (e.g. COMBAT VEHICLE), which are equivalent.
     * Example: /// Example: COMBAT_VEHICLE
     * Constraints: Minimum length = 0, Maximum length = 32
     */
    val objPlat : String?
        get() {
            val o = __offset(40)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val objPlatAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(40, 1)
    fun objPlatInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 40, 1)
    /**
     * The activity in which the track object is engaged. Intended as, but not constrained to, MIL-STD-6016 environment dependent activity designations. The activity can be reported as either a combination of the code and environment (e.g. 65/AIR) or as the descriptive enumeration (e.g. DIVERTING), which are equivalent.
     * Example: /// Example: HOLDING
     * Constraints: Minimum length = 0, Maximum length = 32
     */
    val objAct : String?
        get() {
            val o = __offset(42)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val objActAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(42, 1)
    fun objActInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 42, 1)
    /**
     * The type of source information from which the track was derived. Intended as, but not constrained to, NATO STANAG 4676 modality types (AIS, BFT, BIOMETRIC, COMINT, DOPPLER, ELINT, HRR, HUMINT, IMAGE, MASINT, MIXED, OSINT, OTHER):
     * AIS: Derived from an automated identification system source.
     * BFT: Derived from a blue force tracking source.
     * BIOMETRICS: Derived from a biometrics source.
     * COMINT: Derived from a communications intelligence source.
     * DOPPLER: Derived from a radar doppler source.
     * ELINT: Derived from an electronics intelligence source.
     * HRR: Derived from a radar high range resolution source.
     * HUMINT: Derived from a human intelligence source.
     * IMAGE: Derived from a still or motion imagery source.
     * MASINT: Derived from a measurement and signals intelligence source.
     * MIXED: Derived from a combination of two or more sources.
     * OSINT: Derived from an open source intelligence source.
     * OTHER: Derived from other types of unspecified sources.
     * Example: /// Example: MASINT
     * Constraints: Minimum length = 0, Maximum length = 32
     */
    val modType : String?
        get() {
            val o = __offset(44)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val modTypeAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(44, 1)
    fun modTypeInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 44, 1)
    /**
     * UUID of the track item object, applies to STANAG-4676 messages.
     * Example: /// Example: trkItmId
     * Constraints: Minimum length = 0, Maximum length = 36
     */
    val trkItmId : String?
        get() {
            val o = __offset(46)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val trkItmIdAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(46, 1)
    fun trkItmIdInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 46, 1)
    /**
     * Track timestamp in ISO8601 UTC format.
     * Example: /// Example: 2021-06-07T14:17:39.653Z
     * Constraints: No constraints specified.
     */
    val ts : String?
        get() {
            val o = __offset(48)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val tsAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(48, 1)
    fun tsInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 48, 1)
    /**
     * Value indicating track quality (not standardized).
     * Example: /// Example: 0
     * Constraints: No constraints specified.
     */
    val trkQual : Int
        get() {
            val o = __offset(50)
            return if(o != 0) bb.getInt(o + bb_pos) else 0
        }
    /**
     * Means by which the track data was created (e.g., MEASURED, AUTOMATIC PREDICTED, etc.).
     * Example: /// Example: MEASURED
     * Constraints: No constraints specified.
     */
    val trkPtType : String?
        get() {
            val o = __offset(52)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val trkPtTypeAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(52, 1)
    fun trkPtTypeInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 52, 1)
    /**
     * The estimated identity of the track object (ASSUMED FRIEND, FRIEND, HOSTILE, NEUTRAL, PENDING, SUSPECT, UNKNOWN):
     * ASSUMED FRIEND: Track assumed to be a friend due to the object characteristics, behavior, and/or origin.
     * FRIEND: Track object supporting friendly forces and belonging to a declared friendly nation or entity.
     * HOSTILE: Track object belonging to an opposing nation, party, group, or entity deemed to contribute to a threat to friendly forces or their mission due to its behavior, characteristics, nationality, or origin.
     * NEUTRAL: Track object whose characteristics, behavior, nationality, and/or origin indicate that it is neither supporting nor opposing friendly forces or their mission.
     * PENDING: Track object which has not been evaluated.
     * SUSPECT: Track object deemed potentially hostile due to the object characteristics, behavior, nationality, and/or origin.
     * UNKNOWN: Track object which has been evaluated and does not meet criteria for any standard identity.
     * Example: /// Example: FRIEND
     * Constraints: Minimum length = 0, Maximum length = 32
     */
    val objIdent : String?
        get() {
            val o = __offset(54)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val objIdentAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(54, 1)
    fun objIdentInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 54, 1)
    /**
     * Track object identity credibility.
     * Example: /// Example: 0
     * Constraints: No constraints specified.
     */
    val identCred : Int
        get() {
            val o = __offset(56)
            return if(o != 0) bb.getInt(o + bb_pos) else 0
        }
    /**
     * Track object identity reliability.
     * Example: /// Example: 0
     * Constraints: No constraints specified.
     */
    val identRel : Int
        get() {
            val o = __offset(58)
            return if(o != 0) bb.getInt(o + bb_pos) else 0
        }
    /**
     * Additional track object identity/status information, typically used for EXERCISE identity amplification (FAKER, JOKER, KILO, TRAVELLER, ZOMBIE):
     * FAKER: Friendly track, object, or entity acting as an exercise hostile.
     * JOKER: Friendly track, object, or entity acting as an exercise suspect.
     * KILO: Friendly high-value object.
     * TRAVELLER: Suspect land or surface track following a recognized traffic route.
     * ZOMBIE: Suspect track, object, or entity of special interest.
     * Example: /// Example: ZOMBIE
     * Constraints: Minimum length = 0, Maximum length = 32
     */
    val identAmp : String?
        get() {
            val o = __offset(60)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val identAmpAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(60, 1)
    fun identAmpInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 60, 1)
    /**
     * The track environment type (AIR, LAND, SPACE, SUBSURFACE, SURFACE, UNKNOWN):
     * AIR: Between sea level and the Kármán line, which has an altitude of 100 kilometers (62 miles).
     * LAND: On the surface of dry land.
     * SPACE: Above the Kármán line, which has an altitude of 100 kilometers (62 miles).
     * SURFACE: On the surface of a body of water.
     * SUBSURFACE: Below the surface of a body of water.
     * UNKNOWN: Environment is not known.
     * Example: /// Example: LAND
     * Constraints: Minimum length = 0, Maximum length = 16
     */
    val env : String?
        get() {
            val o = __offset(62)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val envAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(62, 1)
    fun envInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 62, 1)
    /**
     * Track environment confidence estimate (not standardized).
     * Example: /// Example: 1.23
     * Constraints: No constraints specified.
     */
    val envConf : Double
        get() {
            val o = __offset(64)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Overall track confidence estimate (not standardized, but typically a value between 0 and 1, with 0 indicating lowest confidence).
     * Example: /// Example: 1.23
     * Constraints: No constraints specified.
     */
    val trkConf : Double
        get() {
            val o = __offset(66)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Track object location in ECEF [x, y, z], meters.  When provided, array must always contain 3 values.
     * Example: /// Example: [1.23, 2.34, 3.45]
     * Constraints: No constraints specified.
     */
    fun ecefPos(j: Int) : String? {
        val o = __offset(68)
        return if (o != 0) {
            __string(__vector(o) + j * 4)
        } else {
            null
        }
    }
    val ecefPosLength : Int
        get() {
            val o = __offset(68); return if (o != 0) __vector_len(o) else 0
        }
    /**
     * Track object velocity in ECEF [x', y', z'], meters/sec.  When provided, array must always contain 3 values.
     * Example: /// Example: [1.23, 2.34, 3.45]
     * Constraints: No constraints specified.
     */
    fun ecefVel(j: Int) : String? {
        val o = __offset(70)
        return if (o != 0) {
            __string(__vector(o) + j * 4)
        } else {
            null
        }
    }
    val ecefVelLength : Int
        get() {
            val o = __offset(70); return if (o != 0) __vector_len(o) else 0
        }
    /**
     * Track object acceleration in ECEF [x'', y'', z''], meters/sec^2.  When provided, array must always contain 3 values.
     * Example: /// Example: [1.23, 2.34, 3.45]
     * Constraints: No constraints specified.
     */
    fun ecefAcc(j: Int) : String? {
        val o = __offset(72)
        return if (o != 0) {
            __string(__vector(o) + j * 4)
        } else {
            null
        }
    }
    val ecefAccLength : Int
        get() {
            val o = __offset(72); return if (o != 0) __vector_len(o) else 0
        }
    /**
     * WGS-84 latitude of the track object, in degrees. -90 to 90 degrees (negative values south of equator).
     * Example: /// Example: 1.23
     * Constraints: No constraints specified.
     */
    val lat : Double
        get() {
            val o = __offset(74)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * WGS-84 longitude of the track object, in degrees. -180 to 180 degrees (negative values west of Prime Meridian).
     * Example: /// Example: 1.23
     * Constraints: No constraints specified.
     */
    val lon : Double
        get() {
            val o = __offset(76)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Track point altitude relative to WGS-84 ellipsoid, in meters. Positive values indicate a track object height above ellipsoid, and negative values indicate a track object below ellipsoid, applicable to the depth estimate for a subsurface track.
     * Example: /// Example: 1.23
     * Constraints: No constraints specified.
     */
    val alt : Double
        get() {
            val o = __offset(78)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Track object spd, in meters/sec.
     * Example: /// Example: 1.23
     * Constraints: No constraints specified.
     */
    val spd : Double
        get() {
            val o = __offset(80)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * The track object heading, in degrees clockwise from true North at the object location.
     * Example: /// Example: 19.7
     * Constraints: No constraints specified.
     */
    val hdng : Double
        get() {
            val o = __offset(82)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * The track object course-over-ground, in degrees clockwise from true North at the object location (0-360 degrees).
     * Example: /// Example: 88.37
     * Constraints: No constraints specified.
     */
    val course : Double
        get() {
            val o = __offset(84)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Origin of a local coordinate system [lat, lon, altitude].  When provided, array must always contain 3 values.
     * Example: /// Example: [1.23, 2.34, 3.45]
     * Constraints: No constraints specified.
     */
    fun lco(j: Int) : String? {
        val o = __offset(86)
        return if (o != 0) {
            __string(__vector(o) + j * 4)
        } else {
            null
        }
    }
    val lcoLength : Int
        get() {
            val o = __offset(86); return if (o != 0) __vector_len(o) else 0
        }
    /**
     * x, y, and z-axis rotations about ECEF that define a local cartesian system.  When provided, array must always contain 3 values.
     * Example: /// Example: [1.23, 2.34, 3.45]
     * Constraints: No constraints specified.
     */
    fun lcs(j: Int) : String? {
        val o = __offset(88)
        return if (o != 0) {
            __string(__vector(o) + j * 4)
        } else {
            null
        }
    }
    val lcsLength : Int
        get() {
            val o = __offset(88); return if (o != 0) __vector_len(o) else 0
        }
    /**
     * Estimate of the position, [x, y, z], of the track object in the defined cartesian system, in meters.  When provided, array must always contain 3 values.
     * Example: /// Example: [1.23, 2.34, 3.45]
     * Constraints: No constraints specified.
     */
    fun lcPos(j: Int) : String? {
        val o = __offset(90)
        return if (o != 0) {
            __string(__vector(o) + j * 4)
        } else {
            null
        }
    }
    val lcPosLength : Int
        get() {
            val o = __offset(90); return if (o != 0) __vector_len(o) else 0
        }
    /**
     * Estimate of the velocity, [x', y', z'], of the track object in the defined cartesian system, in meters/sec.  When provided, array must always contain 3 values.
     * Example: /// Example: [1.23, 2.34, 3.45]
     * Constraints: No constraints specified.
     */
    fun lcVel(j: Int) : String? {
        val o = __offset(92)
        return if (o != 0) {
            __string(__vector(o) + j * 4)
        } else {
            null
        }
    }
    val lcVelLength : Int
        get() {
            val o = __offset(92); return if (o != 0) __vector_len(o) else 0
        }
    /**
     * Estimate of the acceleration, [x'', y'', z''], of the track object in the defined cartesian system, in meters/sec^2.  When provided, array must always contain 3 values.
     * Example: /// Example: [1.23, 2.34, 3.45]
     * Constraints: No constraints specified.
     */
    fun lcAcc(j: Int) : String? {
        val o = __offset(94)
        return if (o != 0) {
            __string(__vector(o) + j * 4)
        } else {
            null
        }
    }
    val lcAccLength : Int
        get() {
            val o = __offset(94); return if (o != 0) __vector_len(o) else 0
        }
    /**
     * East, North, Up velocity components, in meters/sec.  When provided, array must always contain 3 values.
     * Example: /// Example: [1.23, 2.34, 3.45]
     * Constraints: No constraints specified.
     */
    fun eNuvel(j: Int) : String? {
        val o = __offset(96)
        return if (o != 0) {
            __string(__vector(o) + j * 4)
        } else {
            null
        }
    }
    val eNuvelLength : Int
        get() {
            val o = __offset(96); return if (o != 0) __vector_len(o) else 0
        }
    /**
     * East, North, Up position components, in meters.  When provided, array must always contain 3 values.
     * Example: /// Example: [1.23, 2.34, 3.45]
     * Constraints: No constraints specified.
     */
    fun eNupos(j: Int) : String? {
        val o = __offset(98)
        return if (o != 0) {
            __string(__vector(o) + j * 4)
        } else {
            null
        }
    }
    val eNuposLength : Int
        get() {
            val o = __offset(98); return if (o != 0) __vector_len(o) else 0
        }
    /**
     * Covariance matrix, in meter and second based units, for the defined cartesian system.
     * The array values represent the lower triangular half of the position-velocity covariance matrix.  The size of the covariance matrix is dynamic.  The values are output as an array of values corresponding to the position-velocity covariance element positions, ordered as follows:
     * &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;x&nbsp;&nbsp;y&nbsp;&nbsp;z&nbsp;&nbsp;&nbsp;x'&nbsp;&nbsp;y'&nbsp;z'&nbsp;&nbsp;
     * x&nbsp;&nbsp;&nbsp;&nbsp;1
     * y&nbsp;&nbsp;&nbsp;&nbsp;2&nbsp;&nbsp;&nbsp;3
     * z&nbsp;&nbsp;&nbsp;&nbsp;4&nbsp;&nbsp;&nbsp;5&nbsp;&nbsp;&nbsp;6
     * x'&nbsp;&nbsp;&nbsp;7&nbsp;&nbsp;&nbsp;8&nbsp;&nbsp;&nbsp;9&nbsp;&nbsp;10
     * y'&nbsp;&nbsp;11&nbsp;&nbsp;12&nbsp;&nbsp;13&nbsp;&nbsp;14&nbsp;&nbsp;15
     * z'&nbsp;&nbsp;16&nbsp;&nbsp;17&nbsp;&nbsp;18&nbsp;&nbsp;19&nbsp;&nbsp;20&nbsp;&nbsp; 21
     * The covariance matrix will be as large as the last element needed, and with unused values zero-filled to maintain proper element positioning in the array.  For example, for a 2D (x, y) position-only covariance, the covariance matrix will be 2x2 and the array would contain the 3 elements corresponding to the x, and y position.  Another example, now for a 2D (x, y) position-velocity covariance, the covariance matrix will be 5x5 and the array would contain the 15 elements corresponding to the relevant x, y, x', and y' values (with the z-row and z-column being all zeros). The cov array should contain only the lower left triangle values from top left down to bottom right, in order.
     * Example: /// Example: [1.1, 2.2, 3.3]
     * Constraints: No constraints specified.
     */
    fun cov(j: Int) : String? {
        val o = __offset(100)
        return if (o != 0) {
            __string(__vector(o) + j * 4)
        } else {
            null
        }
    }
    val covLength : Int
        get() {
            val o = __offset(100); return if (o != 0) __vector_len(o) else 0
        }
    /**
     * Uncertainty ellipsoid [semi-major axis (m), semi-minor axis (m), orientation (deg)].
     * Example: /// Example: [1.23, 2.34, 3.45]
     * Constraints: No constraints specified.
     */
    fun errEllp(j: Int) : String? {
        val o = __offset(102)
        return if (o != 0) {
            __string(__vector(o) + j * 4)
        } else {
            null
        }
    }
    val errEllpLength : Int
        get() {
            val o = __offset(102); return if (o != 0) __vector_len(o) else 0
        }
    /**
     * Array of UDL record types (POI, MTI, TRACK, GROUNDIMAGE) that contributed to the generation of this fused track.  See the associated 'srcIds' array for the record UUIDs, positionally corresponding to the record types in this array, used in the track fusion. The 'srcTyps' and 'srcIds' arrays must match in size.
     * Example: /// Example: ['MTI', 'POI']
     * Constraints: No constraints specified.
     */
    fun srcTyps(j: Int) : String? {
        val o = __offset(104)
        return if (o != 0) {
            __string(__vector(o) + j * 4)
        } else {
            null
        }
    }
    val srcTypsLength : Int
        get() {
            val o = __offset(104); return if (o != 0) __vector_len(o) else 0
        }
    /**
     * Array of UUIDs of the UDL data records that contributed to the generation of this fused track. See the associated 'srcTyps' array for the specific types of data, positionally corresponding to the UUIDs in this array, used in the track fusion.  The 'srcTyps' and 'srcIds' arrays must match in size. See the corresponding srcTyps array element for the data type of the UUID and use the appropriate API operation to retrieve that object (e.g. /udl/poi/{uuid}).
     * Example: /// Example: ['f7c70cc8-f9b7-4467-b4ad-3904e360e842', '1da3fab000014e3133709830937387405']
     * Constraints: No constraints specified.
     */
    fun srcIds(j: Int) : String? {
        val o = __offset(106)
        return if (o != 0) {
            __string(__vector(o) + j * 4)
        } else {
            null
        }
    }
    val srcIdsLength : Int
        get() {
            val o = __offset(106); return if (o != 0) __vector_len(o) else 0
        }
    /**
     * The call sign currently assigned to this track object.
     * Example: /// Example: callSign
     * Constraints: Minimum length = 0, Maximum length = 24
     */
    val callSign : String?
        get() {
            val o = __offset(108)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val callSignAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(108, 1)
    fun callSignInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 108, 1)
    /**
     * Flag indicating that this track is fused from multiple sensor sources.
     * Example: /// Example: True
     * Constraints: No constraints specified.
     */
    val multiSource : Boolean
        get() {
            val o = __offset(110)
            return if(o != 0) 0.toByte() != bb.get(o + bb_pos) else false
        }
    /**
     * The J-series message type, if this track is derived from a J-series message.
     * Example: /// Example: J12.5
     * Constraints: Minimum length = 0, Maximum length = 5
     */
    val jSeries : String?
        get() {
            val o = __offset(112)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val jSeriesAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(112, 1)
    fun jSeriesInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 112, 1)
    /**
     * The number of objects or units moving as a group and represented as a single entity in this track message. If null, the track is assumed to represent a single object. Note that if this track derives from a J-series message then special definitions apply for the following values: 13 indicates an estimated 2-7 units, 14 indicates an estimated more than 7 units, and 15 indicates an estimated more than 12 units.
     * Example: /// Example: 14
     * Constraints: No constraints specified.
     */
    val strength : Int
        get() {
            val o = __offset(114)
            return if(o != 0) bb.getInt(o + bb_pos) else 0
        }
    /**
     * Mode-1 interrogation response (mission code), indicating mission or aircraft type.
     * Example: /// Example: 1234
     * Constraints: No constraints specified.
     */
    val m1 : Int
        get() {
            val o = __offset(116)
            return if(o != 0) bb.getInt(o + bb_pos) else 0
        }
    /**
     * Mode-1 validity status.
     * Example: /// Example: 1
     * Constraints: No constraints specified.
     */
    val m1v : Int
        get() {
            val o = __offset(118)
            return if(o != 0) bb.getInt(o + bb_pos) else 0
        }
    /**
     * Mode-2 interrogation response (military identification code).
     * Example: /// Example: 1234
     * Constraints: No constraints specified.
     */
    val m2 : Int
        get() {
            val o = __offset(120)
            return if(o != 0) bb.getInt(o + bb_pos) else 0
        }
    /**
     * Mode-2 validity status.
     * Example: /// Example: 1
     * Constraints: No constraints specified.
     */
    val m2v : Int
        get() {
            val o = __offset(122)
            return if(o != 0) bb.getInt(o + bb_pos) else 0
        }
    /**
     * Mode-3/A interrogation response (aircraft identification), provides a 4-digit octal identification code for the aircraft, assigned by the air traffic controller. Mode-3/A is shared military/civilian use.
     * Example: /// Example: 2636
     * Constraints: No constraints specified.
     */
    val m3a : Int
        get() {
            val o = __offset(124)
            return if(o != 0) bb.getInt(o + bb_pos) else 0
        }
    /**
     * Mode-3/A validity status.
     * Example: /// Example: 1
     * Constraints: No constraints specified.
     */
    val m3av : Int
        get() {
            val o = __offset(126)
            return if(o != 0) bb.getInt(o + bb_pos) else 0
        }
    /**
     * Optional array of provider/source specific tags for this data, where each element is no longer than 32 characters, used for implementing data owner conditional access controls to restrict access to the data. Should be left null by data providers unless conditional access controls are coordinated with the UDL team.
     * Example: /// Example: ['TAG1', 'TAG2']
     * Constraints: No constraints specified.
     */
    fun tags(j: Int) : String? {
        val o = __offset(128)
        return if (o != 0) {
            __string(__vector(o) + j * 4)
        } else {
            null
        }
    }
    val tagsLength : Int
        get() {
            val o = __offset(128); return if (o != 0) __vector_len(o) else 0
        }
    /**
     * The source data library from which this record was received. This could be a remote or tactical UDL or another data library. If null, the record should be assumed to have originated from the primary Enterprise UDL.
     * Example: /// Example: AXE
     * Constraints: Minimum length = 0, Maximum length = 64
     */
    val sourceDl : String?
        get() {
            val o = __offset(130)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val sourceDlAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(130, 1)
    fun sourceDlInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 130, 1)
    /**
     * Source of the data.
     * Example: /// Example: Bluestaq
     * Constraints: Minimum length = 1, Maximum length = 64
     */
    val source : String?
        get() {
            val o = __offset(132)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val sourceAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(132, 1)
    fun sourceInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 132, 1)
    /**
     * Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
     * Example: /// Example: THIRD_PARTY_DATASOURCE
     * Constraints: Minimum length = 0, Maximum length = 64
     */
    val origin : String?
        get() {
            val o = __offset(134)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val originAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(134, 1)
    fun originInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 134, 1)
    /**
     * Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
     * EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
     * REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
     * SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
     * TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
     * Example: /// Example: TEST
     * Constraints: Minimum length = 1, Maximum length = 32
     */
    val dataMode : Byte
        get() {
            val o = __offset(136)
            return if(o != 0) bb.get(o + bb_pos) else 0
        }
    /**
     * The originating source network on which this record was created, auto-populated by the system.
     * Example: /// Example: ORIG
     * Constraints: Minimum length = 1, Maximum length = 32
     */
    val origNetwork : String?
        get() {
            val o = __offset(138)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val origNetworkAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(138, 1)
    fun origNetworkInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 138, 1)
    companion object {
        fun validateVersion() = Constants.FLATBUFFERS_24_3_25()
        fun getRootAsTrack_Abridged(_bb: ByteBuffer): Track_Abridged = getRootAsTrack_Abridged(_bb, Track_Abridged())
        fun getRootAsTrack_Abridged(_bb: ByteBuffer, obj: Track_Abridged): Track_Abridged {
            _bb.order(ByteOrder.LITTLE_ENDIAN)
            return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb))
        }
        fun Track_AbridgedBufferHasIdentifier(_bb: ByteBuffer) : Boolean = __has_identifier(_bb, "TRAC")
        fun createTrack_Abridged(builder: FlatBufferBuilder, idOffset: Int, classificationMarkingOffset: Int, cntctOffset: Int, createdAtOffset: Int, createdByOffset: Int, msgTsOffset: Int, msnIdOffset: Int, assetNatOffset: Int, assetOffset: Int, senOffset: Int, senQualOffset: Int, trkIdOffset: Int, trkNumOffset: Int, trkStatOffset: Int, objNatOffset: Int, objIdOffset: Int, objTypeOffset: Int, objSpecOffset: Int, objPlatOffset: Int, objActOffset: Int, modTypeOffset: Int, trkItmIdOffset: Int, tsOffset: Int, trkQual: Int, trkPtTypeOffset: Int, objIdentOffset: Int, identCred: Int, identRel: Int, identAmpOffset: Int, envOffset: Int, envConf: Double, trkConf: Double, ecefPosOffset: Int, ecefVelOffset: Int, ecefAccOffset: Int, lat: Double, lon: Double, alt: Double, spd: Double, hdng: Double, course: Double, lcoOffset: Int, lcsOffset: Int, lcPosOffset: Int, lcVelOffset: Int, lcAccOffset: Int, eNuvelOffset: Int, eNuposOffset: Int, covOffset: Int, errEllpOffset: Int, srcTypsOffset: Int, srcIdsOffset: Int, callSignOffset: Int, multiSource: Boolean, jSeriesOffset: Int, strength: Int, m1: Int, m1v: Int, m2: Int, m2v: Int, m3a: Int, m3av: Int, tagsOffset: Int, sourceDlOffset: Int, sourceOffset: Int, originOffset: Int, dataMode: Byte, origNetworkOffset: Int) : Int {
            builder.startTable(68)
            addCourse(builder, course)
            addHdng(builder, hdng)
            addSpd(builder, spd)
            addAlt(builder, alt)
            addLon(builder, lon)
            addLat(builder, lat)
            addTrkConf(builder, trkConf)
            addEnvConf(builder, envConf)
            addOrigNetwork(builder, origNetworkOffset)
            addOrigin(builder, originOffset)
            addSource(builder, sourceOffset)
            addSourceDL(builder, sourceDlOffset)
            addTags(builder, tagsOffset)
            addM3av(builder, m3av)
            addM3a(builder, m3a)
            addM2v(builder, m2v)
            addM2(builder, m2)
            addM1v(builder, m1v)
            addM1(builder, m1)
            addStrength(builder, strength)
            addJSeries(builder, jSeriesOffset)
            addCallSign(builder, callSignOffset)
            addSrcIds(builder, srcIdsOffset)
            addSrcTyps(builder, srcTypsOffset)
            addErrEllp(builder, errEllpOffset)
            addCov(builder, covOffset)
            addENUPos(builder, eNuposOffset)
            addENUVel(builder, eNuvelOffset)
            addLcAcc(builder, lcAccOffset)
            addLcVel(builder, lcVelOffset)
            addLcPos(builder, lcPosOffset)
            addLcs(builder, lcsOffset)
            addLco(builder, lcoOffset)
            addEcefAcc(builder, ecefAccOffset)
            addEcefVel(builder, ecefVelOffset)
            addEcefPos(builder, ecefPosOffset)
            addEnv(builder, envOffset)
            addIdentAmp(builder, identAmpOffset)
            addIdentRel(builder, identRel)
            addIdentCred(builder, identCred)
            addObjIdent(builder, objIdentOffset)
            addTrkPtType(builder, trkPtTypeOffset)
            addTrkQual(builder, trkQual)
            addTs(builder, tsOffset)
            addTrkItmId(builder, trkItmIdOffset)
            addModType(builder, modTypeOffset)
            addObjAct(builder, objActOffset)
            addObjPlat(builder, objPlatOffset)
            addObjSpec(builder, objSpecOffset)
            addObjType(builder, objTypeOffset)
            addObjId(builder, objIdOffset)
            addObjNat(builder, objNatOffset)
            addTrkStat(builder, trkStatOffset)
            addTrkNum(builder, trkNumOffset)
            addTrkId(builder, trkIdOffset)
            addSenQual(builder, senQualOffset)
            addSen(builder, senOffset)
            addAsset(builder, assetOffset)
            addAssetNat(builder, assetNatOffset)
            addMsnId(builder, msnIdOffset)
            addMsgTs(builder, msgTsOffset)
            addCreatedBy(builder, createdByOffset)
            addCreatedAt(builder, createdAtOffset)
            addCntct(builder, cntctOffset)
            addClassificationMarking(builder, classificationMarkingOffset)
            addId(builder, idOffset)
            addDataMode(builder, dataMode)
            addMultiSource(builder, multiSource)
            return endTrack_Abridged(builder)
        }
        fun startTrack_Abridged(builder: FlatBufferBuilder) = builder.startTable(68)
        fun addId(builder: FlatBufferBuilder, id: Int) = builder.addOffset(0, id, 0)
        fun addClassificationMarking(builder: FlatBufferBuilder, classificationMarking: Int) = builder.addOffset(1, classificationMarking, 0)
        fun addCntct(builder: FlatBufferBuilder, cntct: Int) = builder.addOffset(2, cntct, 0)
        fun addCreatedAt(builder: FlatBufferBuilder, createdAt: Int) = builder.addOffset(3, createdAt, 0)
        fun addCreatedBy(builder: FlatBufferBuilder, createdBy: Int) = builder.addOffset(4, createdBy, 0)
        fun addMsgTs(builder: FlatBufferBuilder, msgTs: Int) = builder.addOffset(5, msgTs, 0)
        fun addMsnId(builder: FlatBufferBuilder, msnId: Int) = builder.addOffset(6, msnId, 0)
        fun addAssetNat(builder: FlatBufferBuilder, assetNat: Int) = builder.addOffset(7, assetNat, 0)
        fun addAsset(builder: FlatBufferBuilder, asset: Int) = builder.addOffset(8, asset, 0)
        fun addSen(builder: FlatBufferBuilder, sen: Int) = builder.addOffset(9, sen, 0)
        fun addSenQual(builder: FlatBufferBuilder, senQual: Int) = builder.addOffset(10, senQual, 0)
        fun addTrkId(builder: FlatBufferBuilder, trkId: Int) = builder.addOffset(11, trkId, 0)
        fun addTrkNum(builder: FlatBufferBuilder, trkNum: Int) = builder.addOffset(12, trkNum, 0)
        fun addTrkStat(builder: FlatBufferBuilder, trkStat: Int) = builder.addOffset(13, trkStat, 0)
        fun addObjNat(builder: FlatBufferBuilder, objNat: Int) = builder.addOffset(14, objNat, 0)
        fun addObjId(builder: FlatBufferBuilder, objId: Int) = builder.addOffset(15, objId, 0)
        fun addObjType(builder: FlatBufferBuilder, objType: Int) = builder.addOffset(16, objType, 0)
        fun addObjSpec(builder: FlatBufferBuilder, objSpec: Int) = builder.addOffset(17, objSpec, 0)
        fun addObjPlat(builder: FlatBufferBuilder, objPlat: Int) = builder.addOffset(18, objPlat, 0)
        fun addObjAct(builder: FlatBufferBuilder, objAct: Int) = builder.addOffset(19, objAct, 0)
        fun addModType(builder: FlatBufferBuilder, modType: Int) = builder.addOffset(20, modType, 0)
        fun addTrkItmId(builder: FlatBufferBuilder, trkItmId: Int) = builder.addOffset(21, trkItmId, 0)
        fun addTs(builder: FlatBufferBuilder, ts: Int) = builder.addOffset(22, ts, 0)
        fun addTrkQual(builder: FlatBufferBuilder, trkQual: Int) = builder.addInt(23, trkQual, 0)
        fun addTrkPtType(builder: FlatBufferBuilder, trkPtType: Int) = builder.addOffset(24, trkPtType, 0)
        fun addObjIdent(builder: FlatBufferBuilder, objIdent: Int) = builder.addOffset(25, objIdent, 0)
        fun addIdentCred(builder: FlatBufferBuilder, identCred: Int) = builder.addInt(26, identCred, 0)
        fun addIdentRel(builder: FlatBufferBuilder, identRel: Int) = builder.addInt(27, identRel, 0)
        fun addIdentAmp(builder: FlatBufferBuilder, identAmp: Int) = builder.addOffset(28, identAmp, 0)
        fun addEnv(builder: FlatBufferBuilder, env: Int) = builder.addOffset(29, env, 0)
        fun addEnvConf(builder: FlatBufferBuilder, envConf: Double) = builder.addDouble(30, envConf, 0.0)
        fun addTrkConf(builder: FlatBufferBuilder, trkConf: Double) = builder.addDouble(31, trkConf, 0.0)
        fun addEcefPos(builder: FlatBufferBuilder, ecefPos: Int) = builder.addOffset(32, ecefPos, 0)
        fun createEcefPosVector(builder: FlatBufferBuilder, data: IntArray) : Int {
            builder.startVector(4, data.size, 4)
            for (i in data.size - 1 downTo 0) {
                builder.addOffset(data[i])
            }
            return builder.endVector()
        }
        fun startEcefPosVector(builder: FlatBufferBuilder, numElems: Int) = builder.startVector(4, numElems, 4)
        fun addEcefVel(builder: FlatBufferBuilder, ecefVel: Int) = builder.addOffset(33, ecefVel, 0)
        fun createEcefVelVector(builder: FlatBufferBuilder, data: IntArray) : Int {
            builder.startVector(4, data.size, 4)
            for (i in data.size - 1 downTo 0) {
                builder.addOffset(data[i])
            }
            return builder.endVector()
        }
        fun startEcefVelVector(builder: FlatBufferBuilder, numElems: Int) = builder.startVector(4, numElems, 4)
        fun addEcefAcc(builder: FlatBufferBuilder, ecefAcc: Int) = builder.addOffset(34, ecefAcc, 0)
        fun createEcefAccVector(builder: FlatBufferBuilder, data: IntArray) : Int {
            builder.startVector(4, data.size, 4)
            for (i in data.size - 1 downTo 0) {
                builder.addOffset(data[i])
            }
            return builder.endVector()
        }
        fun startEcefAccVector(builder: FlatBufferBuilder, numElems: Int) = builder.startVector(4, numElems, 4)
        fun addLat(builder: FlatBufferBuilder, lat: Double) = builder.addDouble(35, lat, 0.0)
        fun addLon(builder: FlatBufferBuilder, lon: Double) = builder.addDouble(36, lon, 0.0)
        fun addAlt(builder: FlatBufferBuilder, alt: Double) = builder.addDouble(37, alt, 0.0)
        fun addSpd(builder: FlatBufferBuilder, spd: Double) = builder.addDouble(38, spd, 0.0)
        fun addHdng(builder: FlatBufferBuilder, hdng: Double) = builder.addDouble(39, hdng, 0.0)
        fun addCourse(builder: FlatBufferBuilder, course: Double) = builder.addDouble(40, course, 0.0)
        fun addLco(builder: FlatBufferBuilder, lco: Int) = builder.addOffset(41, lco, 0)
        fun createLcoVector(builder: FlatBufferBuilder, data: IntArray) : Int {
            builder.startVector(4, data.size, 4)
            for (i in data.size - 1 downTo 0) {
                builder.addOffset(data[i])
            }
            return builder.endVector()
        }
        fun startLcoVector(builder: FlatBufferBuilder, numElems: Int) = builder.startVector(4, numElems, 4)
        fun addLcs(builder: FlatBufferBuilder, lcs: Int) = builder.addOffset(42, lcs, 0)
        fun createLcsVector(builder: FlatBufferBuilder, data: IntArray) : Int {
            builder.startVector(4, data.size, 4)
            for (i in data.size - 1 downTo 0) {
                builder.addOffset(data[i])
            }
            return builder.endVector()
        }
        fun startLcsVector(builder: FlatBufferBuilder, numElems: Int) = builder.startVector(4, numElems, 4)
        fun addLcPos(builder: FlatBufferBuilder, lcPos: Int) = builder.addOffset(43, lcPos, 0)
        fun createLcPosVector(builder: FlatBufferBuilder, data: IntArray) : Int {
            builder.startVector(4, data.size, 4)
            for (i in data.size - 1 downTo 0) {
                builder.addOffset(data[i])
            }
            return builder.endVector()
        }
        fun startLcPosVector(builder: FlatBufferBuilder, numElems: Int) = builder.startVector(4, numElems, 4)
        fun addLcVel(builder: FlatBufferBuilder, lcVel: Int) = builder.addOffset(44, lcVel, 0)
        fun createLcVelVector(builder: FlatBufferBuilder, data: IntArray) : Int {
            builder.startVector(4, data.size, 4)
            for (i in data.size - 1 downTo 0) {
                builder.addOffset(data[i])
            }
            return builder.endVector()
        }
        fun startLcVelVector(builder: FlatBufferBuilder, numElems: Int) = builder.startVector(4, numElems, 4)
        fun addLcAcc(builder: FlatBufferBuilder, lcAcc: Int) = builder.addOffset(45, lcAcc, 0)
        fun createLcAccVector(builder: FlatBufferBuilder, data: IntArray) : Int {
            builder.startVector(4, data.size, 4)
            for (i in data.size - 1 downTo 0) {
                builder.addOffset(data[i])
            }
            return builder.endVector()
        }
        fun startLcAccVector(builder: FlatBufferBuilder, numElems: Int) = builder.startVector(4, numElems, 4)
        fun addENUVel(builder: FlatBufferBuilder, eNuvel: Int) = builder.addOffset(46, eNuvel, 0)
        fun createENuvelVector(builder: FlatBufferBuilder, data: IntArray) : Int {
            builder.startVector(4, data.size, 4)
            for (i in data.size - 1 downTo 0) {
                builder.addOffset(data[i])
            }
            return builder.endVector()
        }
        fun startENuvelVector(builder: FlatBufferBuilder, numElems: Int) = builder.startVector(4, numElems, 4)
        fun addENUPos(builder: FlatBufferBuilder, eNupos: Int) = builder.addOffset(47, eNupos, 0)
        fun createENuposVector(builder: FlatBufferBuilder, data: IntArray) : Int {
            builder.startVector(4, data.size, 4)
            for (i in data.size - 1 downTo 0) {
                builder.addOffset(data[i])
            }
            return builder.endVector()
        }
        fun startENuposVector(builder: FlatBufferBuilder, numElems: Int) = builder.startVector(4, numElems, 4)
        fun addCov(builder: FlatBufferBuilder, cov: Int) = builder.addOffset(48, cov, 0)
        fun createCovVector(builder: FlatBufferBuilder, data: IntArray) : Int {
            builder.startVector(4, data.size, 4)
            for (i in data.size - 1 downTo 0) {
                builder.addOffset(data[i])
            }
            return builder.endVector()
        }
        fun startCovVector(builder: FlatBufferBuilder, numElems: Int) = builder.startVector(4, numElems, 4)
        fun addErrEllp(builder: FlatBufferBuilder, errEllp: Int) = builder.addOffset(49, errEllp, 0)
        fun createErrEllpVector(builder: FlatBufferBuilder, data: IntArray) : Int {
            builder.startVector(4, data.size, 4)
            for (i in data.size - 1 downTo 0) {
                builder.addOffset(data[i])
            }
            return builder.endVector()
        }
        fun startErrEllpVector(builder: FlatBufferBuilder, numElems: Int) = builder.startVector(4, numElems, 4)
        fun addSrcTyps(builder: FlatBufferBuilder, srcTyps: Int) = builder.addOffset(50, srcTyps, 0)
        fun createSrcTypsVector(builder: FlatBufferBuilder, data: IntArray) : Int {
            builder.startVector(4, data.size, 4)
            for (i in data.size - 1 downTo 0) {
                builder.addOffset(data[i])
            }
            return builder.endVector()
        }
        fun startSrcTypsVector(builder: FlatBufferBuilder, numElems: Int) = builder.startVector(4, numElems, 4)
        fun addSrcIds(builder: FlatBufferBuilder, srcIds: Int) = builder.addOffset(51, srcIds, 0)
        fun createSrcIdsVector(builder: FlatBufferBuilder, data: IntArray) : Int {
            builder.startVector(4, data.size, 4)
            for (i in data.size - 1 downTo 0) {
                builder.addOffset(data[i])
            }
            return builder.endVector()
        }
        fun startSrcIdsVector(builder: FlatBufferBuilder, numElems: Int) = builder.startVector(4, numElems, 4)
        fun addCallSign(builder: FlatBufferBuilder, callSign: Int) = builder.addOffset(52, callSign, 0)
        fun addMultiSource(builder: FlatBufferBuilder, multiSource: Boolean) = builder.addBoolean(53, multiSource, false)
        fun addJSeries(builder: FlatBufferBuilder, jSeries: Int) = builder.addOffset(54, jSeries, 0)
        fun addStrength(builder: FlatBufferBuilder, strength: Int) = builder.addInt(55, strength, 0)
        fun addM1(builder: FlatBufferBuilder, m1: Int) = builder.addInt(56, m1, 0)
        fun addM1v(builder: FlatBufferBuilder, m1v: Int) = builder.addInt(57, m1v, 0)
        fun addM2(builder: FlatBufferBuilder, m2: Int) = builder.addInt(58, m2, 0)
        fun addM2v(builder: FlatBufferBuilder, m2v: Int) = builder.addInt(59, m2v, 0)
        fun addM3a(builder: FlatBufferBuilder, m3a: Int) = builder.addInt(60, m3a, 0)
        fun addM3av(builder: FlatBufferBuilder, m3av: Int) = builder.addInt(61, m3av, 0)
        fun addTags(builder: FlatBufferBuilder, tags: Int) = builder.addOffset(62, tags, 0)
        fun createTagsVector(builder: FlatBufferBuilder, data: IntArray) : Int {
            builder.startVector(4, data.size, 4)
            for (i in data.size - 1 downTo 0) {
                builder.addOffset(data[i])
            }
            return builder.endVector()
        }
        fun startTagsVector(builder: FlatBufferBuilder, numElems: Int) = builder.startVector(4, numElems, 4)
        fun addSourceDL(builder: FlatBufferBuilder, sourceDl: Int) = builder.addOffset(63, sourceDl, 0)
        fun addSource(builder: FlatBufferBuilder, source: Int) = builder.addOffset(64, source, 0)
        fun addOrigin(builder: FlatBufferBuilder, origin: Int) = builder.addOffset(65, origin, 0)
        fun addDataMode(builder: FlatBufferBuilder, dataMode: Byte) = builder.addByte(66, dataMode, 0)
        fun addOrigNetwork(builder: FlatBufferBuilder, origNetwork: Int) = builder.addOffset(67, origNetwork, 0)
        fun endTrack_Abridged(builder: FlatBufferBuilder) : Int {
            val o = builder.endTable()
            return o
        }
        fun finishTrackAbridgedBuffer(builder: FlatBufferBuilder, offset: Int) = builder.finish(offset, "TRAC")
        fun finishSizePrefixedTrack_AbridgedBuffer(builder: FlatBufferBuilder, offset: Int) = builder.finishSizePrefixed(offset, "TRAC")
    }
}
