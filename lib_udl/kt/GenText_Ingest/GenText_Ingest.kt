// automatically generated by the FlatBuffers compiler, do not modify

import com.google.flatbuffers.BaseVector
import com.google.flatbuffers.BooleanVector
import com.google.flatbuffers.ByteVector
import com.google.flatbuffers.Constants
import com.google.flatbuffers.DoubleVector
import com.google.flatbuffers.FlatBufferBuilder
import com.google.flatbuffers.FloatVector
import com.google.flatbuffers.LongVector
import com.google.flatbuffers.StringVector
import com.google.flatbuffers.Struct
import com.google.flatbuffers.Table
import com.google.flatbuffers.UnionVector
import java.nio.ByteBuffer
import java.nio.ByteOrder
import kotlin.math.sign

/**
 * /// Collection that details special instructions, important information, guidance, and amplifying information regarding this ATO.
 */
@Suppress("unused")
class GenText_Ingest : Table() {

    fun __init(_i: Int, _bb: ByteBuffer)  {
        __reset(_i, _bb)
    }
    fun __assign(_i: Int, _bb: ByteBuffer) : GenText_Ingest {
        __init(_i, _bb)
        return this
    }
    /**
     * The indicator for the general text block. Examples include "OPENING REMARKS" and "GENERAL SPINS INFORMATION".
     * Example: /// Example: OPENING REMARKS
     * Constraints: Minimum length = 0, Maximum length = 64
     */
    val textInd : String?
        get() {
            val o = __offset(4)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val textIndAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(4, 1)
    fun textIndInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 4, 1)
    /**
     * The free text that describes the information specific to the text indicator.
     * Example: /// Example: FREE-TEXT
     * Constraints: Minimum length = 0, Maximum length = 1024
     */
    val text : String?
        get() {
            val o = __offset(6)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val textAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(6, 1)
    fun textInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 6, 1)
    companion object {
        fun validateVersion() = Constants.FLATBUFFERS_24_3_25()
        fun getRootAsGenText_Ingest(_bb: ByteBuffer): GenText_Ingest = getRootAsGenText_Ingest(_bb, GenText_Ingest())
        fun getRootAsGenText_Ingest(_bb: ByteBuffer, obj: GenText_Ingest): GenText_Ingest {
            _bb.order(ByteOrder.LITTLE_ENDIAN)
            return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb))
        }
        fun GenText_IngestBufferHasIdentifier(_bb: ByteBuffer) : Boolean = __has_identifier(_bb, "GENT")
        fun createGenText_Ingest(builder: FlatBufferBuilder, textIndOffset: Int, textOffset: Int) : Int {
            builder.startTable(2)
            addText(builder, textOffset)
            addTextInd(builder, textIndOffset)
            return endGenText_Ingest(builder)
        }
        fun startGenText_Ingest(builder: FlatBufferBuilder) = builder.startTable(2)
        fun addTextInd(builder: FlatBufferBuilder, textInd: Int) = builder.addOffset(0, textInd, 0)
        fun addText(builder: FlatBufferBuilder, text: Int) = builder.addOffset(1, text, 0)
        fun endGenText_Ingest(builder: FlatBufferBuilder) : Int {
            val o = builder.endTable()
            return o
        }
        fun finishGenTextIngestBuffer(builder: FlatBufferBuilder, offset: Int) = builder.finish(offset, "GENT")
        fun finishSizePrefixedGenText_IngestBuffer(builder: FlatBufferBuilder, offset: Int) = builder.finishSizePrefixed(offset, "GENT")
    }
}
