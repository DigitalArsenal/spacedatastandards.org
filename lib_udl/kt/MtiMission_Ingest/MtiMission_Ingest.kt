// automatically generated by the FlatBuffers compiler, do not modify

import com.google.flatbuffers.BaseVector
import com.google.flatbuffers.BooleanVector
import com.google.flatbuffers.ByteVector
import com.google.flatbuffers.Constants
import com.google.flatbuffers.DoubleVector
import com.google.flatbuffers.FlatBufferBuilder
import com.google.flatbuffers.FloatVector
import com.google.flatbuffers.LongVector
import com.google.flatbuffers.StringVector
import com.google.flatbuffers.Struct
import com.google.flatbuffers.Table
import com.google.flatbuffers.UnionVector
import java.nio.ByteBuffer
import java.nio.ByteOrder
import kotlin.math.sign

/**
 * /// Information on the mission and flight plans, the type and configuration of the platform, and the reference time.
 */
@Suppress("unused")
class MtiMission_Ingest : Table() {

    fun __init(_i: Int, _bb: ByteBuffer)  {
        __reset(_i, _bb)
    }
    fun __assign(_i: Int, _bb: ByteBuffer) : MtiMission_Ingest {
        __init(_i, _bb)
        return this
    }
    /**
     * The mission plan id.
     * Example: /// Example: M1-ID
     * Constraints: Minimum length = 0, Maximum length = 64
     */
    val m1 : String?
        get() {
            val o = __offset(4)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val m1AsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(4, 1)
    fun m1InByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 4, 1)
    /**
     * Unique identification of the flight plan.
     * Example: /// Example: M2-ID
     * Constraints: Minimum length = 0, Maximum length = 64
     */
    val m2 : String?
        get() {
            val o = __offset(6)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val m2AsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(6, 1)
    fun m2InByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 6, 1)
    /**
     * Platform type that originated the data.
     * Example: /// Example: PLATFORM
     * Constraints: Minimum length = 0, Maximum length = 64
     */
    val m3 : String?
        get() {
            val o = __offset(8)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val m3AsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(8, 1)
    fun m3InByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 8, 1)
    /**
     * Identification of the platform variant, modifications, etc.
     * Example: /// Example: IDENT
     * Constraints: Minimum length = 0, Maximum length = 16
     */
    val m4 : String?
        get() {
            val o = __offset(10)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val m4AsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(10, 1)
    fun m4InByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 10, 1)
    /**
     * Mission origination date.
     * Example: /// Example: 2018-01-01
     * Constraints: No constraints specified.
     */
    val msnRefTs : String?
        get() {
            val o = __offset(12)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val msnRefTsAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(12, 1)
    fun msnRefTsInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 12, 1)
    companion object {
        fun validateVersion() = Constants.FLATBUFFERS_24_3_25()
        fun getRootAsMtiMission_Ingest(_bb: ByteBuffer): MtiMission_Ingest = getRootAsMtiMission_Ingest(_bb, MtiMission_Ingest())
        fun getRootAsMtiMission_Ingest(_bb: ByteBuffer, obj: MtiMission_Ingest): MtiMission_Ingest {
            _bb.order(ByteOrder.LITTLE_ENDIAN)
            return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb))
        }
        fun MtiMission_IngestBufferHasIdentifier(_bb: ByteBuffer) : Boolean = __has_identifier(_bb, "MTIM")
        fun createMtiMission_Ingest(builder: FlatBufferBuilder, m1Offset: Int, m2Offset: Int, m3Offset: Int, m4Offset: Int, msnRefTsOffset: Int) : Int {
            builder.startTable(5)
            addMsnRefTs(builder, msnRefTsOffset)
            addM4(builder, m4Offset)
            addM3(builder, m3Offset)
            addM2(builder, m2Offset)
            addM1(builder, m1Offset)
            return endMtiMission_Ingest(builder)
        }
        fun startMtiMission_Ingest(builder: FlatBufferBuilder) = builder.startTable(5)
        fun addM1(builder: FlatBufferBuilder, m1: Int) = builder.addOffset(0, m1, 0)
        fun addM2(builder: FlatBufferBuilder, m2: Int) = builder.addOffset(1, m2, 0)
        fun addM3(builder: FlatBufferBuilder, m3: Int) = builder.addOffset(2, m3, 0)
        fun addM4(builder: FlatBufferBuilder, m4: Int) = builder.addOffset(3, m4, 0)
        fun addMsnRefTs(builder: FlatBufferBuilder, msnRefTs: Int) = builder.addOffset(4, msnRefTs, 0)
        fun endMtiMission_Ingest(builder: FlatBufferBuilder) : Int {
            val o = builder.endTable()
            return o
        }
        fun finishMtiMissionIngestBuffer(builder: FlatBufferBuilder, offset: Int) = builder.finish(offset, "MTIM")
        fun finishSizePrefixedMtiMission_IngestBuffer(builder: FlatBufferBuilder, offset: Int) = builder.finishSizePrefixed(offset, "MTIM")
    }
}
