// automatically generated by the FlatBuffers compiler, do not modify

import com.google.flatbuffers.BaseVector
import com.google.flatbuffers.BooleanVector
import com.google.flatbuffers.ByteVector
import com.google.flatbuffers.Constants
import com.google.flatbuffers.DoubleVector
import com.google.flatbuffers.FlatBufferBuilder
import com.google.flatbuffers.FloatVector
import com.google.flatbuffers.LongVector
import com.google.flatbuffers.StringVector
import com.google.flatbuffers.Struct
import com.google.flatbuffers.Table
import com.google.flatbuffers.UnionVector
import java.nio.ByteBuffer
import java.nio.ByteOrder
import kotlin.math.sign

/**
 * /// Provides information pertaining to the location of the sensor platform during periods when the sensor is not collecting data. It shall be sent as required during periods in which the sensor is not collecting data, such as enroute to an orbit location, during a turn, or any other time at which platform location is required.
 */
@Suppress("unused")
class MtiPlatformLocation_Ingest : Table() {

    fun __init(_i: Int, _bb: ByteBuffer)  {
        __reset(_i, _bb)
    }
    fun __assign(_i: Int, _bb: ByteBuffer) : MtiPlatformLocation_Ingest {
        __init(_i, _bb)
        return this
    }
    /**
     * Elapsed time, expressed in milliseconds, from midnight at the beginning of the day specified in the Reference Time fields of the Mission Segment to the time the report is prepared.
     * Example: /// Example: 1234567890
     * Constraints: No constraints specified.
     */
    val l1 : Long
        get() {
            val o = __offset(4)
            return if(o != 0) bb.getLong(o + bb_pos) else 0L
        }
    /**
     * North-South position of the platform at the time the report is prepared, expressed as degrees North (positive) or South (negative) of the Equator.
     * Example: /// Example: 45.23
     * Constraints: No constraints specified.
     */
    val l2 : Double
        get() {
            val o = __offset(6)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * East-West position of the platform at the time the report is prepared, expressed as degrees East (positive) from the Prime Meridian.
     * Example: /// Example: 45.23
     * Constraints: No constraints specified.
     */
    val l3 : Double
        get() {
            val o = __offset(8)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Altitude of the platform at the time the report is prepared, referenced to its position above the WGS-84 ellipsoid, in centimeters.
     * Example: /// Example: 45
     * Constraints: No constraints specified.
     */
    val l4 : Int
        get() {
            val o = __offset(10)
            return if(o != 0) bb.getInt(o + bb_pos) else 0
        }
    /**
     * Ground track of the platform at the time the report is prepared, expressed as the angle in degrees (clockwise) from True North.
     * Example: /// Example: 45.23
     * Constraints: No constraints specified.
     */
    val l5 : Double
        get() {
            val o = __offset(12)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Ground speed of the platform at the time the report is prepared, expressed as millimeters per second.
     * Example: /// Example: 50
     * Constraints: No constraints specified.
     */
    val l6 : Int
        get() {
            val o = __offset(14)
            return if(o != 0) bb.getInt(o + bb_pos) else 0
        }
    /**
     * Velocity of the platform in the vertical direction, expressed as decimeters per second.
     * Example: /// Example: 82
     * Constraints: No constraints specified.
     */
    val l7 : Int
        get() {
            val o = __offset(16)
            return if(o != 0) bb.getInt(o + bb_pos) else 0
        }
    /**
     * Platform location timestamp in ISO8601 UTC format.
     * Example: /// Example: No example provided.
     * Constraints: No constraints specified.
     */
    val platlocts : String?
        get() {
            val o = __offset(18)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val platloctsAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(18, 1)
    fun platloctsInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 18, 1)
    companion object {
        fun validateVersion() = Constants.FLATBUFFERS_24_3_25()
        fun getRootAsMtiPlatformLocation_Ingest(_bb: ByteBuffer): MtiPlatformLocation_Ingest = getRootAsMtiPlatformLocation_Ingest(_bb, MtiPlatformLocation_Ingest())
        fun getRootAsMtiPlatformLocation_Ingest(_bb: ByteBuffer, obj: MtiPlatformLocation_Ingest): MtiPlatformLocation_Ingest {
            _bb.order(ByteOrder.LITTLE_ENDIAN)
            return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb))
        }
        fun MtiPlatformLocation_IngestBufferHasIdentifier(_bb: ByteBuffer) : Boolean = __has_identifier(_bb, "MTIP")
        fun createMtiPlatformLocation_Ingest(builder: FlatBufferBuilder, l1: Long, l2: Double, l3: Double, l4: Int, l5: Double, l6: Int, l7: Int, platloctsOffset: Int) : Int {
            builder.startTable(8)
            addL5(builder, l5)
            addL3(builder, l3)
            addL2(builder, l2)
            addL1(builder, l1)
            addPlatlocts(builder, platloctsOffset)
            addL7(builder, l7)
            addL6(builder, l6)
            addL4(builder, l4)
            return endMtiPlatformLocation_Ingest(builder)
        }
        fun startMtiPlatformLocation_Ingest(builder: FlatBufferBuilder) = builder.startTable(8)
        fun addL1(builder: FlatBufferBuilder, l1: Long) = builder.addLong(0, l1, 0L)
        fun addL2(builder: FlatBufferBuilder, l2: Double) = builder.addDouble(1, l2, 0.0)
        fun addL3(builder: FlatBufferBuilder, l3: Double) = builder.addDouble(2, l3, 0.0)
        fun addL4(builder: FlatBufferBuilder, l4: Int) = builder.addInt(3, l4, 0)
        fun addL5(builder: FlatBufferBuilder, l5: Double) = builder.addDouble(4, l5, 0.0)
        fun addL6(builder: FlatBufferBuilder, l6: Int) = builder.addInt(5, l6, 0)
        fun addL7(builder: FlatBufferBuilder, l7: Int) = builder.addInt(6, l7, 0)
        fun addPlatlocts(builder: FlatBufferBuilder, platlocts: Int) = builder.addOffset(7, platlocts, 0)
        fun endMtiPlatformLocation_Ingest(builder: FlatBufferBuilder) : Int {
            val o = builder.endTable()
            return o
        }
        fun finishMtiPlatformLocationIngestBuffer(builder: FlatBufferBuilder, offset: Int) = builder.finish(offset, "MTIP")
        fun finishSizePrefixedMtiPlatformLocation_IngestBuffer(builder: FlatBufferBuilder, offset: Int) = builder.finishSizePrefixed(offset, "MTIP")
    }
}
