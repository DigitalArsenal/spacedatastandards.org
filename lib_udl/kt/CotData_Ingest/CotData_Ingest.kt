// automatically generated by the FlatBuffers compiler, do not modify

import com.google.flatbuffers.BaseVector
import com.google.flatbuffers.BooleanVector
import com.google.flatbuffers.ByteVector
import com.google.flatbuffers.Constants
import com.google.flatbuffers.DoubleVector
import com.google.flatbuffers.FlatBufferBuilder
import com.google.flatbuffers.FloatVector
import com.google.flatbuffers.LongVector
import com.google.flatbuffers.StringVector
import com.google.flatbuffers.Struct
import com.google.flatbuffers.Table
import com.google.flatbuffers.UnionVector
import java.nio.ByteBuffer
import java.nio.ByteOrder
import kotlin.math.sign

/**
 * /// Schema for the CotData to post.
 */
@Suppress("unused")
class CotData_Ingest : Table() {

    fun __init(_i: Int, _bb: ByteBuffer)  {
        __reset(_i, _bb)
    }
    fun __assign(_i: Int, _bb: ByteBuffer) : CotData_Ingest {
        __init(_i, _bb)
        return this
    }
    /**
     * Identifier of the sender of the cot message which should remain the same on subsequent POI records of the same point of interest.
     * Example: /// Example: POI-ID
     * Constraints: No constraints specified.
     */
    val senderUid : String?
        get() {
            val o = __offset(4)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val senderUidAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(4, 1)
    fun senderUidInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 4, 1)
    /**
     * How the event point was generated, in CoT object heirarchy notation (optional, CoT).
     * Example: /// Example: h-e
     * Constraints: No constraints specified.
     */
    val how : String?
        get() {
            val o = __offset(6)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val howAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(6, 1)
    fun howInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 6, 1)
    /**
     * Radius of circular area about lat/lon point, in meters (1-sigma, if representing error).
     * Example: /// Example: 10.23
     * Constraints: No constraints specified.
     */
    val ce : Double
        get() {
            val o = __offset(8)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Height above lat/lon point, in meters (1-sigma, if representing linear error).
     * Example: /// Example: 10.23
     * Constraints: No constraints specified.
     */
    val le : Double
        get() {
            val o = __offset(10)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Stale timestamp (optional), in ISO8601 UTC format.
     * Example: /// Example: 2020-01-01T16:00:00.123456Z
     * Constraints: No constraints specified.
     */
    val stale : String?
        get() {
            val o = __offset(12)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val staleAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(12, 1)
    fun staleInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 12, 1)
    /**
     * Start time of event validity (optional), in ISO8601 UTC format.
     * Example: /// Example: 2020-01-01T16:00:00.123456Z
     * Constraints: No constraints specified.
     */
    val start : String?
        get() {
            val o = __offset(14)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val startAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(14, 1)
    fun startInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 14, 1)
    /**
     * WGS-84 latitude of the POI, in degrees (+N, -S), -90 to 90.
     * Example: /// Example: 45.23
     * Constraints: No constraints specified.
     */
    val lat : Double
        get() {
            val o = __offset(16)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * WGS-84 longitude of the POI, in degrees (+E, -W), -180 to 180.
     * Example: /// Example: 45.23
     * Constraints: No constraints specified.
     */
    val lon : Double
        get() {
            val o = __offset(18)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Event type, in CoT object heirarchy notation (optional, CoT).
     * Example: /// Example: a-h-G
     * Constraints: No constraints specified.
     */
    val type : String?
        get() {
            val o = __offset(20)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val typeAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(20, 1)
    fun typeInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 20, 1)
    /**
     * Point height above ellipsoid (WGS-84), in meters.
     * Example: /// Example: 5.23
     * Constraints: No constraints specified.
     */
    val alt : Double
        get() {
            val o = __offset(22)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * No description provided.
     * Example: /// Example: No example provided.
     * Constraints: No constraints specified.
     */
    val cotPositionData : String?
        get() {
            val o = __offset(24)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val cotPositionDataAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(24, 1)
    fun cotPositionDataInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 24, 1)
    /**
     * No description provided.
     * Example: /// Example: No example provided.
     * Constraints: No constraints specified.
     */
    val cotChatData : String?
        get() {
            val o = __offset(26)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val cotChatDataAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(26, 1)
    fun cotChatDataInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 26, 1)
    /**
     * Optional list of call signs to send message to directly.
     * Example: /// Example: No example provided.
     * Constraints: No constraints specified.
     */
    fun callSigns(j: Int) : String? {
        val o = __offset(28)
        return if (o != 0) {
            __string(__vector(o) + j * 4)
        } else {
            null
        }
    }
    val callSignsLength : Int
        get() {
            val o = __offset(28); return if (o != 0) __vector_len(o) else 0
        }
    /**
     * Optional list of TAK user ids to send message to directly.
     * Example: /// Example: No example provided.
     * Constraints: No constraints specified.
     */
    fun uids(j: Int) : String? {
        val o = __offset(30)
        return if (o != 0) {
            __string(__vector(o) + j * 4)
        } else {
            null
        }
    }
    val uidsLength : Int
        get() {
            val o = __offset(30); return if (o != 0) __vector_len(o) else 0
        }
    /**
     * Optional set of groups to send message to specifically.  If not specified, the message will be sent to the default _ANON_ group.
     * Example: /// Example: No example provided.
     * Constraints: No constraints specified.
     */
    fun groups(j: Int) : String? {
        val o = __offset(32)
        return if (o != 0) {
            __string(__vector(o) + j * 4)
        } else {
            null
        }
    }
    val groupsLength : Int
        get() {
            val o = __offset(32); return if (o != 0) __vector_len(o) else 0
        }
    companion object {
        fun validateVersion() = Constants.FLATBUFFERS_24_3_25()
        fun getRootAsCotData_Ingest(_bb: ByteBuffer): CotData_Ingest = getRootAsCotData_Ingest(_bb, CotData_Ingest())
        fun getRootAsCotData_Ingest(_bb: ByteBuffer, obj: CotData_Ingest): CotData_Ingest {
            _bb.order(ByteOrder.LITTLE_ENDIAN)
            return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb))
        }
        fun CotData_IngestBufferHasIdentifier(_bb: ByteBuffer) : Boolean = __has_identifier(_bb, "COTD")
        fun createCotData_Ingest(builder: FlatBufferBuilder, senderUidOffset: Int, howOffset: Int, ce: Double, le: Double, staleOffset: Int, startOffset: Int, lat: Double, lon: Double, typeOffset: Int, alt: Double, cotPositionDataOffset: Int, cotChatDataOffset: Int, callSignsOffset: Int, uidsOffset: Int, groupsOffset: Int) : Int {
            builder.startTable(15)
            addAlt(builder, alt)
            addLon(builder, lon)
            addLat(builder, lat)
            addLe(builder, le)
            addCe(builder, ce)
            addGroups(builder, groupsOffset)
            addUids(builder, uidsOffset)
            addCallSigns(builder, callSignsOffset)
            addCotChatData(builder, cotChatDataOffset)
            addCotPositionData(builder, cotPositionDataOffset)
            addType(builder, typeOffset)
            addStart(builder, startOffset)
            addStale(builder, staleOffset)
            addHow(builder, howOffset)
            addSenderUid(builder, senderUidOffset)
            return endCotData_Ingest(builder)
        }
        fun startCotData_Ingest(builder: FlatBufferBuilder) = builder.startTable(15)
        fun addSenderUid(builder: FlatBufferBuilder, senderUid: Int) = builder.addOffset(0, senderUid, 0)
        fun addHow(builder: FlatBufferBuilder, how: Int) = builder.addOffset(1, how, 0)
        fun addCe(builder: FlatBufferBuilder, ce: Double) = builder.addDouble(2, ce, 0.0)
        fun addLe(builder: FlatBufferBuilder, le: Double) = builder.addDouble(3, le, 0.0)
        fun addStale(builder: FlatBufferBuilder, stale: Int) = builder.addOffset(4, stale, 0)
        fun addStart(builder: FlatBufferBuilder, start: Int) = builder.addOffset(5, start, 0)
        fun addLat(builder: FlatBufferBuilder, lat: Double) = builder.addDouble(6, lat, 0.0)
        fun addLon(builder: FlatBufferBuilder, lon: Double) = builder.addDouble(7, lon, 0.0)
        fun addType(builder: FlatBufferBuilder, type: Int) = builder.addOffset(8, type, 0)
        fun addAlt(builder: FlatBufferBuilder, alt: Double) = builder.addDouble(9, alt, 0.0)
        fun addCotPositionData(builder: FlatBufferBuilder, cotPositionData: Int) = builder.addOffset(10, cotPositionData, 0)
        fun addCotChatData(builder: FlatBufferBuilder, cotChatData: Int) = builder.addOffset(11, cotChatData, 0)
        fun addCallSigns(builder: FlatBufferBuilder, callSigns: Int) = builder.addOffset(12, callSigns, 0)
        fun createCallSignsVector(builder: FlatBufferBuilder, data: IntArray) : Int {
            builder.startVector(4, data.size, 4)
            for (i in data.size - 1 downTo 0) {
                builder.addOffset(data[i])
            }
            return builder.endVector()
        }
        fun startCallSignsVector(builder: FlatBufferBuilder, numElems: Int) = builder.startVector(4, numElems, 4)
        fun addUids(builder: FlatBufferBuilder, uids: Int) = builder.addOffset(13, uids, 0)
        fun createUidsVector(builder: FlatBufferBuilder, data: IntArray) : Int {
            builder.startVector(4, data.size, 4)
            for (i in data.size - 1 downTo 0) {
                builder.addOffset(data[i])
            }
            return builder.endVector()
        }
        fun startUidsVector(builder: FlatBufferBuilder, numElems: Int) = builder.startVector(4, numElems, 4)
        fun addGroups(builder: FlatBufferBuilder, groups: Int) = builder.addOffset(14, groups, 0)
        fun createGroupsVector(builder: FlatBufferBuilder, data: IntArray) : Int {
            builder.startVector(4, data.size, 4)
            for (i in data.size - 1 downTo 0) {
                builder.addOffset(data[i])
            }
            return builder.endVector()
        }
        fun startGroupsVector(builder: FlatBufferBuilder, numElems: Int) = builder.startVector(4, numElems, 4)
        fun endCotData_Ingest(builder: FlatBufferBuilder) : Int {
            val o = builder.endTable()
            return o
        }
        fun finishCotDataIngestBuffer(builder: FlatBufferBuilder, offset: Int) = builder.finish(offset, "COTD")
        fun finishSizePrefixedCotData_IngestBuffer(builder: FlatBufferBuilder, offset: Int) = builder.finishSizePrefixed(offset, "COTD")
    }
}
