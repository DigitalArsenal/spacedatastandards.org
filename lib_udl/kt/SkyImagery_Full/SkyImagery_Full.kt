// automatically generated by the FlatBuffers compiler, do not modify

import com.google.flatbuffers.BaseVector
import com.google.flatbuffers.BooleanVector
import com.google.flatbuffers.ByteVector
import com.google.flatbuffers.Constants
import com.google.flatbuffers.DoubleVector
import com.google.flatbuffers.FlatBufferBuilder
import com.google.flatbuffers.FloatVector
import com.google.flatbuffers.LongVector
import com.google.flatbuffers.StringVector
import com.google.flatbuffers.Struct
import com.google.flatbuffers.Table
import com.google.flatbuffers.UnionVector
import java.nio.ByteBuffer
import java.nio.ByteOrder
import kotlin.math.sign

/**
 * /// Model representation of sky imagery data.  Sky imagery is ground or space based telescope imagery of RSO's and includes metadata on the image (time, source, etc) as well as binary image content (e.g. FITS, EOSSA, EOCHIP) . Binary content must be downloaded individually by ID using the 'getFile' operation.
 */
@Suppress("unused")
class SkyImagery_Full : Table() {

    fun __init(_i: Int, _bb: ByteBuffer)  {
        __reset(_i, _bb)
    }
    fun __assign(_i: Int, _bb: ByteBuffer) : SkyImagery_Full {
        __init(_i, _bb)
        return this
    }
    /**
     * Unique identifier of the record, auto-generated by the system.
     * Example: /// Example: SKYIMAGERY-ID
     * Constraints: Minimum length = 1, Maximum length = 36
     */
    val id : String?
        get() {
            val o = __offset(4)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val idAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(4, 1)
    fun idInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 4, 1)
    /**
     * Classification marking of the data in IC/CAPCO Portion-marked format.
     * Example: /// Example: U
     * Constraints: Minimum length = 1, Maximum length = 128
     */
    val classificationMarking : String?
        get() {
            val o = __offset(6)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val classificationMarkingAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(6, 1)
    fun classificationMarkingInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 6, 1)
    /**
     * Optional identifier of the target on-orbit object, if correlated.
     * Example: /// Example: 44920
     * Constraints: Minimum length = 0, Maximum length = 36
     */
    val idOnOrbit : String?
        get() {
            val o = __offset(8)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val idOnOrbitAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(8, 1)
    fun idOnOrbitInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 8, 1)
    /**
     * No description provided.
     * Example: /// Example: No example provided.
     * Constraints: No constraints specified.
     */
    val onOrbit : String?
        get() {
            val o = __offset(10)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val onOrbitAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(10, 1)
    fun onOrbitInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 10, 1)
    /**
     * Optional identifier provided by the imaging source to indicate the target onorbit object of this image. This may be an internal identifier and not necessarily a valid satellite number.
     * Example: /// Example: X15-23452
     * Constraints: Minimum length = 0, Maximum length = 64
     */
    val origObjectId : String?
        get() {
            val o = __offset(12)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val origObjectIdAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(12, 1)
    fun origObjectIdInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 12, 1)
    /**
     * Optional identifier of the AttitudeSet data record describing the orientation of an object body.
     * Example: /// Example: d039ba29-52f4-4839-8a8f-e85fa416aec5
     * Constraints: Minimum length = 0, Maximum length = 36
     */
    val idAttitudeSet : String?
        get() {
            val o = __offset(14)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val idAttitudeSetAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(14, 1)
    fun idAttitudeSetInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 14, 1)
    /**
     * Unique identifier of the reporting sensor.
     * Example: /// Example: 420
     * Constraints: Minimum length = 0, Maximum length = 36
     */
    val idSensor : String?
        get() {
            val o = __offset(16)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val idSensorAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(16, 1)
    fun idSensorInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 16, 1)
    /**
     * Catalog number of the target on-orbit object.
     * Example: /// Example: 25544
     * Constraints: No constraints specified.
     */
    val satNo : Int
        get() {
            val o = __offset(18)
            return if(o != 0) bb.getInt(o + bb_pos) else 0
        }
    /**
     * Optional identifier provided by the imaging source to indicate the sensor identifier which produced this image. This may be an internal identifier and not necessarily a valid sensor ID.
     * Example: /// Example: origSensorId
     * Constraints: Minimum length = 0, Maximum length = 64
     */
    val origSensorId : String?
        get() {
            val o = __offset(20)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val origSensorIdAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(20, 1)
    fun origSensorIdInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 20, 1)
    /**
     * Sensor latitude at exposure start epoch, in degrees. If null, can be obtained from sensor info. -90 to 90 degrees (negative values south of equator).
     * Example: /// Example: -33.283048
     * Constraints: No constraints specified.
     */
    val senlat : Double
        get() {
            val o = __offset(22)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Sensor longitude at exposure start epoch, in degrees. If null, can be obtained from sensor info. -180 to 180 degrees (negative values west of Prime Meridian).
     * Example: /// Example: 149.372549
     * Constraints: No constraints specified.
     */
    val senlon : Double
        get() {
            val o = __offset(24)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Sensor altitude at exposure start epoch, in km. If null, can be obtained from sensor info.
     * Example: /// Example: 14.483619321
     * Constraints: No constraints specified.
     */
    val senalt : Double
        get() {
            val o = __offset(26)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Sensor x position at exposure start epoch, in km (if mobile/onorbit) in J2000 coordinate frame.
     * Example: /// Example: 14.52
     * Constraints: No constraints specified.
     */
    val senx : Double
        get() {
            val o = __offset(28)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Sensor y position at exposure start epoch, in km (if mobile/onorbit) in J2000 coordinate frame.
     * Example: /// Example: 32.41
     * Constraints: No constraints specified.
     */
    val seny : Double
        get() {
            val o = __offset(30)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Sensor z position at exposure start epoch, in km (if mobile/onorbit) in J2000 coordinate frame.
     * Example: /// Example: 376.12
     * Constraints: No constraints specified.
     */
    val senz : Double
        get() {
            val o = __offset(32)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * The quaternion describing the rotation of the body-fixed frame used for this system into the local geodetic frame, at exposure start epoch (expStartTime). The array element order convention is scalar component first, followed by the three vector components. For a vector u in the body-fixed frame, the corresponding vector u' in the geodetic frame should satisfy u' = quq*, where q is this quaternion.
     * Example: /// Example: [0.03, 0.02, 0.01, 0.012]
     * Constraints: No constraints specified.
     */
    fun senQuat(j: Int) : String? {
        val o = __offset(34)
        return if (o != 0) {
            __string(__vector(o) + j * 4)
        } else {
            null
        }
    }
    val senQuatLength : Int
        get() {
            val o = __offset(34); return if (o != 0) __vector_len(o) else 0
        }
    /**
     * The derivative of the quaternion describing the rotation of the body-fixed frame used for this system into the local geodetic frame, exposure start epoch (expStartTime). The array element order convention is scalar component first, followed by the three vector components. For a vector u in the body-fixed frame, the corresponding vector u' in the geodetic frame should satisfy u' = quq*, where q is this quaternion.
     * Example: /// Example: [0.03, 0.02, 0.01, 0.012]
     * Constraints: No constraints specified.
     */
    fun senQuatDot(j: Int) : String? {
        val o = __offset(36)
        return if (o != 0) {
            __string(__vector(o) + j * 4)
        } else {
            null
        }
    }
    val senQuatDotLength : Int
        get() {
            val o = __offset(36); return if (o != 0) __vector_len(o) else 0
        }
    /**
     * The type of image associated with this record (e.g. FITS, EOSSA, EOCHIP).
     * Example: /// Example: imageType
     * Constraints: Minimum length = 1, Maximum length = 24
     */
    val imageType : String?
        get() {
            val o = __offset(38)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val imageTypeAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(38, 1)
    fun imageTypeInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 38, 1)
    /**
     * Start time of the exposure, in ISO 8601 UTC format with microsecond precision.
     * Example: /// Example: 2021-01-01T01:01:01.123456Z
     * Constraints: No constraints specified.
     */
    val expStartTime : String?
        get() {
            val o = __offset(40)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val expStartTimeAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(40, 1)
    fun expStartTimeInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 40, 1)
    /**
     * End time of the exposure, in ISO 8601 UTC format with microsecond precision.
     * Example: /// Example: 2021-01-01T01:01:01.123456Z
     * Constraints: No constraints specified.
     */
    val expEndTime : String?
        get() {
            val o = __offset(42)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val expEndTimeAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(42, 1)
    fun expEndTimeInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 42, 1)
    /**
     * String that uniquely identifies the data source.
     * Example: /// Example: imageSourceInfo
     * Constraints: Minimum length = 0, Maximum length = 100
     */
    val imageSourceInfo : String?
        get() {
            val o = __offset(44)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val imageSourceInfoAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(44, 1)
    fun imageSourceInfoInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 44, 1)
    /**
     * The telescope pointing azimuth, in degrees, at the exposure start epoch.
     * Example: /// Example: 146.321
     * Constraints: No constraints specified.
     */
    val topLeftStartAz : Double
        get() {
            val o = __offset(46)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * The telescope pointing elevation, in degrees, at the exposure start epoch.
     * Example: /// Example: 146.321
     * Constraints: No constraints specified.
     */
    val topLeftStartEl : Double
        get() {
            val o = __offset(48)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * The telescope pointing azimuth, in degrees, at the exposure stop epoch.
     * Example: /// Example: 3.7
     * Constraints: No constraints specified.
     */
    val topLeftStopAz : Double
        get() {
            val o = __offset(50)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * The telescope pointing elevation, in degrees, at the exposure stop epoch.
     * Example: /// Example: 34.233
     * Constraints: No constraints specified.
     */
    val topLeftStopEl : Double
        get() {
            val o = __offset(52)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * The user-defined set ID of a sequence of images.
     * Example: /// Example: imageSetId
     * Constraints: Minimum length = 0, Maximum length = 36
     */
    val imageSetId : String?
        get() {
            val o = __offset(54)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val imageSetIdAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(54, 1)
    fun imageSetIdInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 54, 1)
    /**
     * The number of images in an image set.
     * Example: /// Example: 9
     * Constraints: No constraints specified.
     */
    val imageSetLength : Int
        get() {
            val o = __offset(56)
            return if(o != 0) bb.getInt(o + bb_pos) else 0
        }
    /**
     * The sequence ID of an image within an image set.
     * Example: /// Example: 1
     * Constraints: No constraints specified.
     */
    val sequenceId : Int
        get() {
            val o = __offset(58)
            return if(o != 0) bb.getInt(o + bb_pos) else 0
        }
    /**
     * Field Of View frame width, in degrees.
     * Example: /// Example: 21.23
     * Constraints: No constraints specified.
     */
    val frameFovwidth : Double
        get() {
            val o = __offset(60)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Field Of View frame height, in degrees.
     * Example: /// Example: 21.23
     * Constraints: No constraints specified.
     */
    val frameFovheight : Double
        get() {
            val o = __offset(62)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Field Of View pixel width, in degrees.
     * Example: /// Example: 321.123
     * Constraints: No constraints specified.
     */
    val pixelFovwidth : Double
        get() {
            val o = __offset(64)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Field Of View pixel height, in degrees.
     * Example: /// Example: 321.123
     * Constraints: No constraints specified.
     */
    val pixelFovheight : Double
        get() {
            val o = __offset(66)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Frame width of the image, in number of pixels.
     * Example: /// Example: 1
     * Constraints: No constraints specified.
     */
    val frameWidthPixels : Int
        get() {
            val o = __offset(68)
            return if(o != 0) bb.getInt(o + bb_pos) else 0
        }
    /**
     * Frame height of the image, in number of pixels.
     * Example: /// Example: 1
     * Constraints: No constraints specified.
     */
    val frameHeightPixels : Int
        get() {
            val o = __offset(70)
            return if(o != 0) bb.getInt(o + bb_pos) else 0
        }
    /**
     * Bit depth of the image, in number of pixels.
     * Example: /// Example: 1
     * Constraints: No constraints specified.
     */
    val pixelBitDepth : Int
        get() {
            val o = __offset(72)
            return if(o != 0) bb.getInt(o + bb_pos) else 0
        }
    /**
     * Reference to an annotation document associated with this image.
     * Example: /// Example: annotationKey
     * Constraints: Minimum length = 0, Maximum length = 128
     */
    val annotationKey : String?
        get() {
            val o = __offset(74)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val annotationKeyAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(74, 1)
    fun annotationKeyInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 74, 1)
    /**
     * Reference to a calibration document associated with this image.
     * Example: /// Example: calibrationKey
     * Constraints: Minimum length = 0, Maximum length = 128
     */
    val calibrationKey : String?
        get() {
            val o = __offset(76)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val calibrationKeyAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(76, 1)
    fun calibrationKeyInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 76, 1)
    /**
     * Name of the uploaded image file.
     * Example: /// Example: filename.jpg
     * Constraints: Minimum length = 0, Maximum length = 128
     */
    val filename : String?
        get() {
            val o = __offset(78)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val filenameAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(78, 1)
    fun filenameInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 78, 1)
    /**
     * Size of the image file, in bytes.
     * Example: /// Example: 371945
     * Constraints: No constraints specified.
     */
    val filesize : Long
        get() {
            val o = __offset(80)
            return if(o != 0) bb.getLong(o + bb_pos) else 0L
        }
    /**
     * MD5 value of the file. The ingest/create operation will automatically generate the value.
     * Example: /// Example: checksumValue
     * Constraints: Minimum length = 0, Maximum length = 256
     */
    val checksumValue : String?
        get() {
            val o = __offset(82)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val checksumValueAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(82, 1)
    fun checksumValueInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 82, 1)
    /**
     * Optional identifier to track a commercial or marketplace transaction executed to produce this data.
     * Example: /// Example: a7bdef1f-5a4f-4716-bee4-7a1e0ec7d35a
     * Constraints: Minimum length = 0, Maximum length = 64
     */
    val transactionId : String?
        get() {
            val o = __offset(84)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val transactionIdAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(84, 1)
    fun transactionIdInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 84, 1)
    /**
     * Optional array of provider/source specific tags for this data, where each element is no longer than 32 characters, used for implementing data owner conditional access controls to restrict access to the data. Should be left null by data providers unless conditional access controls are coordinated with the UDL team.
     * Example: /// Example: ['PROVIDER_TAG1', 'PROVIDER_TAG2']
     * Constraints: No constraints specified.
     */
    fun tags(j: Int) : String? {
        val o = __offset(86)
        return if (o != 0) {
            __string(__vector(o) + j * 4)
        } else {
            null
        }
    }
    val tagsLength : Int
        get() {
            val o = __offset(86); return if (o != 0) __vector_len(o) else 0
        }
    /**
     * Source of the data.
     * Example: /// Example: Bluestaq
     * Constraints: Minimum length = 1, Maximum length = 64
     */
    val source : String?
        get() {
            val o = __offset(88)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val sourceAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(88, 1)
    fun sourceInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 88, 1)
    /**
     * Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
     * Example: /// Example: THIRD_PARTY_DATASOURCE
     * Constraints: Minimum length = 0, Maximum length = 64
     */
    val origin : String?
        get() {
            val o = __offset(90)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val originAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(90, 1)
    fun originInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 90, 1)
    /**
     * The originating source network on which this record was created, auto-populated by the system.
     * Example: /// Example: ORIG
     * Constraints: Minimum length = 1, Maximum length = 32
     */
    val origNetwork : String?
        get() {
            val o = __offset(92)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val origNetworkAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(92, 1)
    fun origNetworkInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 92, 1)
    /**
     * The source data library from which this record was received. This could be a remote or tactical UDL or another data library. If null, the record should be assumed to have originated from the primary Enterprise UDL.
     * Example: /// Example: AXE
     * Constraints: Minimum length = 0, Maximum length = 64
     */
    val sourceDl : String?
        get() {
            val o = __offset(94)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val sourceDlAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(94, 1)
    fun sourceDlInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 94, 1)
    /**
     * Optional name/description associated with this image.
     * Example: /// Example: description
     * Constraints: Minimum length = 0, Maximum length = 2147483647
     */
    val description : String?
        get() {
            val o = __offset(96)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val descriptionAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(96, 1)
    fun descriptionInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 96, 1)
    /**
     * Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
     * EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
     * REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
     * SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
     * TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
     * Example: /// Example: TEST
     * Constraints: Minimum length = 1, Maximum length = 32
     */
    val dataMode : Byte
        get() {
            val o = __offset(98)
            return if(o != 0) bb.get(o + bb_pos) else 0
        }
    /**
     * Time the row was created in the database, auto-populated by the system.
     * Example: /// Example: 2018-01-01T16:00:00.123Z
     * Constraints: No constraints specified.
     */
    val createdAt : String?
        get() {
            val o = __offset(100)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val createdAtAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(100, 1)
    fun createdAtInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 100, 1)
    /**
     * Application user who created the row in the database, auto-populated by the system.
     * Example: /// Example: some.user
     * Constraints: Minimum length = 1, Maximum length = 64
     */
    val createdBy : String?
        get() {
            val o = __offset(102)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val createdByAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(102, 1)
    fun createdByInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 102, 1)
    /**
     * Collection of linked EOObservations.
     * Example: /// Example: No example provided.
     * Constraints: No constraints specified.
     */
    fun eoObservations(j: Int) : String? {
        val o = __offset(104)
        return if (o != 0) {
            __string(__vector(o) + j * 4)
        } else {
            null
        }
    }
    val eoObservationsLength : Int
        get() {
            val o = __offset(104); return if (o != 0) __vector_len(o) else 0
        }
    companion object {
        fun validateVersion() = Constants.FLATBUFFERS_24_3_25()
        fun getRootAsSkyImagery_Full(_bb: ByteBuffer): SkyImagery_Full = getRootAsSkyImagery_Full(_bb, SkyImagery_Full())
        fun getRootAsSkyImagery_Full(_bb: ByteBuffer, obj: SkyImagery_Full): SkyImagery_Full {
            _bb.order(ByteOrder.LITTLE_ENDIAN)
            return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb))
        }
        fun SkyImagery_FullBufferHasIdentifier(_bb: ByteBuffer) : Boolean = __has_identifier(_bb, "SKYI")
        fun createSkyImagery_Full(builder: FlatBufferBuilder, idOffset: Int, classificationMarkingOffset: Int, idOnOrbitOffset: Int, onOrbitOffset: Int, origObjectIdOffset: Int, idAttitudeSetOffset: Int, idSensorOffset: Int, satNo: Int, origSensorIdOffset: Int, senlat: Double, senlon: Double, senalt: Double, senx: Double, seny: Double, senz: Double, senQuatOffset: Int, senQuatDotOffset: Int, imageTypeOffset: Int, expStartTimeOffset: Int, expEndTimeOffset: Int, imageSourceInfoOffset: Int, topLeftStartAz: Double, topLeftStartEl: Double, topLeftStopAz: Double, topLeftStopEl: Double, imageSetIdOffset: Int, imageSetLength: Int, sequenceId: Int, frameFovwidth: Double, frameFovheight: Double, pixelFovwidth: Double, pixelFovheight: Double, frameWidthPixels: Int, frameHeightPixels: Int, pixelBitDepth: Int, annotationKeyOffset: Int, calibrationKeyOffset: Int, filenameOffset: Int, filesize: Long, checksumValueOffset: Int, transactionIdOffset: Int, tagsOffset: Int, sourceOffset: Int, originOffset: Int, origNetworkOffset: Int, sourceDlOffset: Int, descriptionOffset: Int, dataMode: Byte, createdAtOffset: Int, createdByOffset: Int, eoObservationsOffset: Int) : Int {
            builder.startTable(51)
            addFilesize(builder, filesize)
            addPixelFOVHeight(builder, pixelFovheight)
            addPixelFOVWidth(builder, pixelFovwidth)
            addFrameFOVHeight(builder, frameFovheight)
            addFrameFOVWidth(builder, frameFovwidth)
            addTopLeftStopEl(builder, topLeftStopEl)
            addTopLeftStopAz(builder, topLeftStopAz)
            addTopLeftStartEl(builder, topLeftStartEl)
            addTopLeftStartAz(builder, topLeftStartAz)
            addSenz(builder, senz)
            addSeny(builder, seny)
            addSenx(builder, senx)
            addSenalt(builder, senalt)
            addSenlon(builder, senlon)
            addSenlat(builder, senlat)
            addEoObservations(builder, eoObservationsOffset)
            addCreatedBy(builder, createdByOffset)
            addCreatedAt(builder, createdAtOffset)
            addDescription(builder, descriptionOffset)
            addSourceDL(builder, sourceDlOffset)
            addOrigNetwork(builder, origNetworkOffset)
            addOrigin(builder, originOffset)
            addSource(builder, sourceOffset)
            addTags(builder, tagsOffset)
            addTransactionId(builder, transactionIdOffset)
            addChecksumValue(builder, checksumValueOffset)
            addFilename(builder, filenameOffset)
            addCalibrationKey(builder, calibrationKeyOffset)
            addAnnotationKey(builder, annotationKeyOffset)
            addPixelBitDepth(builder, pixelBitDepth)
            addFrameHeightPixels(builder, frameHeightPixels)
            addFrameWidthPixels(builder, frameWidthPixels)
            addSequenceId(builder, sequenceId)
            addImageSetLength(builder, imageSetLength)
            addImageSetId(builder, imageSetIdOffset)
            addImageSourceInfo(builder, imageSourceInfoOffset)
            addExpEndTime(builder, expEndTimeOffset)
            addExpStartTime(builder, expStartTimeOffset)
            addImageType(builder, imageTypeOffset)
            addSenQuatDot(builder, senQuatDotOffset)
            addSenQuat(builder, senQuatOffset)
            addOrigSensorId(builder, origSensorIdOffset)
            addSatNo(builder, satNo)
            addIdSensor(builder, idSensorOffset)
            addIdAttitudeSet(builder, idAttitudeSetOffset)
            addOrigObjectId(builder, origObjectIdOffset)
            addOnOrbit(builder, onOrbitOffset)
            addIdOnOrbit(builder, idOnOrbitOffset)
            addClassificationMarking(builder, classificationMarkingOffset)
            addId(builder, idOffset)
            addDataMode(builder, dataMode)
            return endSkyImagery_Full(builder)
        }
        fun startSkyImagery_Full(builder: FlatBufferBuilder) = builder.startTable(51)
        fun addId(builder: FlatBufferBuilder, id: Int) = builder.addOffset(0, id, 0)
        fun addClassificationMarking(builder: FlatBufferBuilder, classificationMarking: Int) = builder.addOffset(1, classificationMarking, 0)
        fun addIdOnOrbit(builder: FlatBufferBuilder, idOnOrbit: Int) = builder.addOffset(2, idOnOrbit, 0)
        fun addOnOrbit(builder: FlatBufferBuilder, onOrbit: Int) = builder.addOffset(3, onOrbit, 0)
        fun addOrigObjectId(builder: FlatBufferBuilder, origObjectId: Int) = builder.addOffset(4, origObjectId, 0)
        fun addIdAttitudeSet(builder: FlatBufferBuilder, idAttitudeSet: Int) = builder.addOffset(5, idAttitudeSet, 0)
        fun addIdSensor(builder: FlatBufferBuilder, idSensor: Int) = builder.addOffset(6, idSensor, 0)
        fun addSatNo(builder: FlatBufferBuilder, satNo: Int) = builder.addInt(7, satNo, 0)
        fun addOrigSensorId(builder: FlatBufferBuilder, origSensorId: Int) = builder.addOffset(8, origSensorId, 0)
        fun addSenlat(builder: FlatBufferBuilder, senlat: Double) = builder.addDouble(9, senlat, 0.0)
        fun addSenlon(builder: FlatBufferBuilder, senlon: Double) = builder.addDouble(10, senlon, 0.0)
        fun addSenalt(builder: FlatBufferBuilder, senalt: Double) = builder.addDouble(11, senalt, 0.0)
        fun addSenx(builder: FlatBufferBuilder, senx: Double) = builder.addDouble(12, senx, 0.0)
        fun addSeny(builder: FlatBufferBuilder, seny: Double) = builder.addDouble(13, seny, 0.0)
        fun addSenz(builder: FlatBufferBuilder, senz: Double) = builder.addDouble(14, senz, 0.0)
        fun addSenQuat(builder: FlatBufferBuilder, senQuat: Int) = builder.addOffset(15, senQuat, 0)
        fun createSenQuatVector(builder: FlatBufferBuilder, data: IntArray) : Int {
            builder.startVector(4, data.size, 4)
            for (i in data.size - 1 downTo 0) {
                builder.addOffset(data[i])
            }
            return builder.endVector()
        }
        fun startSenQuatVector(builder: FlatBufferBuilder, numElems: Int) = builder.startVector(4, numElems, 4)
        fun addSenQuatDot(builder: FlatBufferBuilder, senQuatDot: Int) = builder.addOffset(16, senQuatDot, 0)
        fun createSenQuatDotVector(builder: FlatBufferBuilder, data: IntArray) : Int {
            builder.startVector(4, data.size, 4)
            for (i in data.size - 1 downTo 0) {
                builder.addOffset(data[i])
            }
            return builder.endVector()
        }
        fun startSenQuatDotVector(builder: FlatBufferBuilder, numElems: Int) = builder.startVector(4, numElems, 4)
        fun addImageType(builder: FlatBufferBuilder, imageType: Int) = builder.addOffset(17, imageType, 0)
        fun addExpStartTime(builder: FlatBufferBuilder, expStartTime: Int) = builder.addOffset(18, expStartTime, 0)
        fun addExpEndTime(builder: FlatBufferBuilder, expEndTime: Int) = builder.addOffset(19, expEndTime, 0)
        fun addImageSourceInfo(builder: FlatBufferBuilder, imageSourceInfo: Int) = builder.addOffset(20, imageSourceInfo, 0)
        fun addTopLeftStartAz(builder: FlatBufferBuilder, topLeftStartAz: Double) = builder.addDouble(21, topLeftStartAz, 0.0)
        fun addTopLeftStartEl(builder: FlatBufferBuilder, topLeftStartEl: Double) = builder.addDouble(22, topLeftStartEl, 0.0)
        fun addTopLeftStopAz(builder: FlatBufferBuilder, topLeftStopAz: Double) = builder.addDouble(23, topLeftStopAz, 0.0)
        fun addTopLeftStopEl(builder: FlatBufferBuilder, topLeftStopEl: Double) = builder.addDouble(24, topLeftStopEl, 0.0)
        fun addImageSetId(builder: FlatBufferBuilder, imageSetId: Int) = builder.addOffset(25, imageSetId, 0)
        fun addImageSetLength(builder: FlatBufferBuilder, imageSetLength: Int) = builder.addInt(26, imageSetLength, 0)
        fun addSequenceId(builder: FlatBufferBuilder, sequenceId: Int) = builder.addInt(27, sequenceId, 0)
        fun addFrameFOVWidth(builder: FlatBufferBuilder, frameFovwidth: Double) = builder.addDouble(28, frameFovwidth, 0.0)
        fun addFrameFOVHeight(builder: FlatBufferBuilder, frameFovheight: Double) = builder.addDouble(29, frameFovheight, 0.0)
        fun addPixelFOVWidth(builder: FlatBufferBuilder, pixelFovwidth: Double) = builder.addDouble(30, pixelFovwidth, 0.0)
        fun addPixelFOVHeight(builder: FlatBufferBuilder, pixelFovheight: Double) = builder.addDouble(31, pixelFovheight, 0.0)
        fun addFrameWidthPixels(builder: FlatBufferBuilder, frameWidthPixels: Int) = builder.addInt(32, frameWidthPixels, 0)
        fun addFrameHeightPixels(builder: FlatBufferBuilder, frameHeightPixels: Int) = builder.addInt(33, frameHeightPixels, 0)
        fun addPixelBitDepth(builder: FlatBufferBuilder, pixelBitDepth: Int) = builder.addInt(34, pixelBitDepth, 0)
        fun addAnnotationKey(builder: FlatBufferBuilder, annotationKey: Int) = builder.addOffset(35, annotationKey, 0)
        fun addCalibrationKey(builder: FlatBufferBuilder, calibrationKey: Int) = builder.addOffset(36, calibrationKey, 0)
        fun addFilename(builder: FlatBufferBuilder, filename: Int) = builder.addOffset(37, filename, 0)
        fun addFilesize(builder: FlatBufferBuilder, filesize: Long) = builder.addLong(38, filesize, 0L)
        fun addChecksumValue(builder: FlatBufferBuilder, checksumValue: Int) = builder.addOffset(39, checksumValue, 0)
        fun addTransactionId(builder: FlatBufferBuilder, transactionId: Int) = builder.addOffset(40, transactionId, 0)
        fun addTags(builder: FlatBufferBuilder, tags: Int) = builder.addOffset(41, tags, 0)
        fun createTagsVector(builder: FlatBufferBuilder, data: IntArray) : Int {
            builder.startVector(4, data.size, 4)
            for (i in data.size - 1 downTo 0) {
                builder.addOffset(data[i])
            }
            return builder.endVector()
        }
        fun startTagsVector(builder: FlatBufferBuilder, numElems: Int) = builder.startVector(4, numElems, 4)
        fun addSource(builder: FlatBufferBuilder, source: Int) = builder.addOffset(42, source, 0)
        fun addOrigin(builder: FlatBufferBuilder, origin: Int) = builder.addOffset(43, origin, 0)
        fun addOrigNetwork(builder: FlatBufferBuilder, origNetwork: Int) = builder.addOffset(44, origNetwork, 0)
        fun addSourceDL(builder: FlatBufferBuilder, sourceDl: Int) = builder.addOffset(45, sourceDl, 0)
        fun addDescription(builder: FlatBufferBuilder, description: Int) = builder.addOffset(46, description, 0)
        fun addDataMode(builder: FlatBufferBuilder, dataMode: Byte) = builder.addByte(47, dataMode, 0)
        fun addCreatedAt(builder: FlatBufferBuilder, createdAt: Int) = builder.addOffset(48, createdAt, 0)
        fun addCreatedBy(builder: FlatBufferBuilder, createdBy: Int) = builder.addOffset(49, createdBy, 0)
        fun addEoObservations(builder: FlatBufferBuilder, eoObservations: Int) = builder.addOffset(50, eoObservations, 0)
        fun createEoObservationsVector(builder: FlatBufferBuilder, data: IntArray) : Int {
            builder.startVector(4, data.size, 4)
            for (i in data.size - 1 downTo 0) {
                builder.addOffset(data[i])
            }
            return builder.endVector()
        }
        fun startEoObservationsVector(builder: FlatBufferBuilder, numElems: Int) = builder.startVector(4, numElems, 4)
        fun endSkyImagery_Full(builder: FlatBufferBuilder) : Int {
            val o = builder.endTable()
            return o
        }
        fun finishSkyImageryFullBuffer(builder: FlatBufferBuilder, offset: Int) = builder.finish(offset, "SKYI")
        fun finishSizePrefixedSkyImagery_FullBuffer(builder: FlatBufferBuilder, offset: Int) = builder.finishSizePrefixed(offset, "SKYI")
    }
}
