// automatically generated by the FlatBuffers compiler, do not modify

import com.google.flatbuffers.BaseVector
import com.google.flatbuffers.BooleanVector
import com.google.flatbuffers.ByteVector
import com.google.flatbuffers.Constants
import com.google.flatbuffers.DoubleVector
import com.google.flatbuffers.FlatBufferBuilder
import com.google.flatbuffers.FloatVector
import com.google.flatbuffers.LongVector
import com.google.flatbuffers.StringVector
import com.google.flatbuffers.Struct
import com.google.flatbuffers.Table
import com.google.flatbuffers.UnionVector
import java.nio.ByteBuffer
import java.nio.ByteOrder
import kotlin.math.sign

/**
 * /// Information related to an air event (e.g. FUEL TRANSFER, AIR DROP) and the associated aircraft.
 */
@Suppress("unused")
class AirEvent_Full : Table() {

    fun __init(_i: Int, _bb: ByteBuffer)  {
        __reset(_i, _bb)
    }
    fun __assign(_i: Int, _bb: ByteBuffer) : AirEvent_Full {
        __init(_i, _bb)
        return this
    }
    /**
     * Unique identifier of the record, auto-generated by the system if not provided on create operations.
     * Example: /// Example: 026dd511-8ba5-47d3-9909-836149f87686
     * Constraints: Minimum length = 1, Maximum length = 36
     */
    val id : String?
        get() {
            val o = __offset(4)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val idAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(4, 1)
    fun idInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 4, 1)
    /**
     * Classification marking of the data in IC/CAPCO Portion-marked format.
     * Example: /// Example: U
     * Constraints: Minimum length = 1, Maximum length = 128
     */
    val classificationMarking : String?
        get() {
            val o = __offset(6)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val classificationMarkingAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(6, 1)
    fun classificationMarkingInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 6, 1)
    /**
     * Type of air event (e.g. FUEL TRANSFER, AIR DROP, etc).
     * Example: /// Example: FUEL TRANSFER
     * Constraints: Minimum length = 1, Maximum length = 32
     */
    val type : String?
        get() {
            val o = __offset(8)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val typeAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(8, 1)
    fun typeInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 8, 1)
    /**
     * The UDL unique identifier of the sortie associated with this air event.
     * Example: /// Example: b9866c03-2397-4506-8153-852e72d9b54f
     * Constraints: Minimum length = 0, Maximum length = 36
     */
    val idSortie : String?
        get() {
            val o = __offset(10)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val idSortieAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(10, 1)
    fun idSortieInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 10, 1)
    /**
     * The UDL unique identifier of the mission associated with this air event.
     * Example: /// Example: 190dea6d-2a90-45a2-a276-be9047d9b96c
     * Constraints: Minimum length = 0, Maximum length = 36
     */
    val idMission : String?
        get() {
            val o = __offset(12)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val idMissionAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(12, 1)
    fun idMissionInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 12, 1)
    /**
     * Optional air event ID from external systems. This field has no meaning within UDL and is provided as a convenience for systems that require tracking of an internal system generated ID.
     * Example: /// Example: MB014313032022407540
     * Constraints: Minimum length = 0, Maximum length = 36
     */
    val externalAirEventId : String?
        get() {
            val o = __offset(14)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val externalAirEventIdAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(14, 1)
    fun externalAirEventIdInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 14, 1)
    /**
     * Identifies the Itinerary point of a sortie where an air event occurs.
     * Example: /// Example: 825
     * Constraints: No constraints specified.
     */
    val legNum : Int
        get() {
            val o = __offset(16)
            return if(o != 0) bb.getInt(o + bb_pos) else 0
        }
    /**
     * The location representing this air event specified as a feature Id. Locations specified include air refueling track Ids and air drop event locations.
     * Example: /// Example: 901EW
     * Constraints: Minimum length = 0, Maximum length = 32
     */
    val location : String?
        get() {
            val o = __offset(18)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val locationAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(18, 1)
    fun locationInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 18, 1)
    /**
     * The purpose of the air event at the arrival location. Can be either descriptive text such as 'fuel onload' or a purpose code specified by the provider, such as 'A'.
     * Example: /// Example: A
     * Constraints: Minimum length = 0, Maximum length = 36
     */
    val arrPurpose : String?
        get() {
            val o = __offset(20)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val arrPurposeAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(20, 1)
    fun arrPurposeInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 20, 1)
    /**
     * The scheduled arrival time of the aircraft at the air event, in ISO 8601 UTC format with millisecond precision.
     * Example: /// Example: 2024-01-07T13:55:43.123Z
     * Constraints: No constraints specified.
     */
    val plannedArrTime : String?
        get() {
            val o = __offset(22)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val plannedArrTimeAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(22, 1)
    fun plannedArrTimeInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 22, 1)
    /**
     * The current estimated arrival time of the aircraft at the air event, in ISO 8601 UTC format with millisecond precision.
     * Example: /// Example: 2024-01-07T13:59:48.123Z
     * Constraints: No constraints specified.
     */
    val estArrTime : String?
        get() {
            val o = __offset(24)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val estArrTimeAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(24, 1)
    fun estArrTimeInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 24, 1)
    /**
     * The actual arrival time of the aircraft at the air event, in ISO 8601 UTC format with millisecond precision.
     * Example: /// Example: 2024-01-07T14:00:03.123Z
     * Constraints: No constraints specified.
     */
    val actualArrTime : String?
        get() {
            val o = __offset(26)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val actualArrTimeAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(26, 1)
    fun actualArrTimeInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 26, 1)
    /**
     * The purpose of the air event at the departure location. Can be either descriptive text such as 'fuel onload' or a purpose code specified by the provider, such as 'A'.
     * Example: /// Example: Q
     * Constraints: Minimum length = 0, Maximum length = 36
     */
    val depPurpose : String?
        get() {
            val o = __offset(28)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val depPurposeAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(28, 1)
    fun depPurposeInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 28, 1)
    /**
     * The scheduled departure time of the aircraft from the air event, in ISO 8601 UTC format with millisecond precision.
     * Example: /// Example: 2024-01-07T14:15:43.123Z
     * Constraints: No constraints specified.
     */
    val plannedDepTime : String?
        get() {
            val o = __offset(30)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val plannedDepTimeAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(30, 1)
    fun plannedDepTimeInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 30, 1)
    /**
     * The current estimated departure time of the aircraft from the air event, in ISO 8601 UTC format with millisecond precision.
     * Example: /// Example: 2024-01-07T14:19:48.123Z
     * Constraints: No constraints specified.
     */
    val estDepTime : String?
        get() {
            val o = __offset(32)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val estDepTimeAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(32, 1)
    fun estDepTimeInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 32, 1)
    /**
     * The actual departure time of the aircraft from the air event, in ISO 8601 UTC format with millisecond precision.
     * Example: /// Example: 2024-01-07T14:17:03.123Z
     * Constraints: No constraints specified.
     */
    val actualDepTime : String?
        get() {
            val o = __offset(34)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val actualDepTimeAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(34, 1)
    fun actualDepTimeInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 34, 1)
    /**
     * Optional air refueling track ID from external systems. This field has no meaning within UDL and is provided as a convenience for systems that require tracking of an internal system generated ID.
     * Example: /// Example: 6418a4b68e5c3896bf024cc79aa4174c
     * Constraints: Minimum length = 0, Maximum length = 36
     */
    val externalArtrackId : String?
        get() {
            val o = __offset(36)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val externalArtrackIdAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(36, 1)
    fun externalArtrackIdInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 36, 1)
    /**
     * Identifier of the air refueling track, if applicable.
     * Example: /// Example: CH61
     * Constraints: Minimum length = 0, Maximum length = 15
     */
    val arTrackId : String?
        get() {
            val o = __offset(38)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val arTrackIdAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(38, 1)
    fun arTrackIdInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 38, 1)
    /**
     * Name of the air refueling track, if applicable.
     * Example: /// Example: CH61 POST
     * Constraints: Minimum length = 0, Maximum length = 50
     */
    val arTrackName : String?
        get() {
            val o = __offset(40)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val arTrackNameAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(40, 1)
    fun arTrackNameInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 40, 1)
    /**
     * The Rendezvous Control Time is the planned time the tanker and receiver aircraft will rendezvous for an en route type air refueling event, in ISO 8601 UTC format, with millisecond precision.
     * Example: /// Example: 2024-01-07T13:55:43.123Z
     * Constraints: No constraints specified.
     */
    val rzct : String?
        get() {
            val o = __offset(42)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val rzctAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(42, 1)
    fun rzctInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 42, 1)
    /**
     * The Air Refueling Control Time is the planned time the tanker aircraft will transfer fuel to the receiver aircraft, in ISO 8601 UTC format, with millisecond precision.
     * Example: /// Example: 2024-01-07T15:11:27.123Z
     * Constraints: No constraints specified.
     */
    val arct : String?
        get() {
            val o = __offset(44)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val arctAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(44, 1)
    fun arctInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 44, 1)
    /**
     * Altitude of this air event, in feet.
     * Example: /// Example: 28000.1
     * Constraints: No constraints specified.
     */
    val baseAlt : Double
        get() {
            val o = __offset(46)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Priority of this air event.
     * Example: /// Example: 1A2
     * Constraints: Minimum length = 0, Maximum length = 3
     */
    val priority : String?
        get() {
            val o = __offset(48)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val priorityAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(48, 1)
    fun priorityInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 48, 1)
    /**
     * Length of time the receiver unit has requested for an air event, in hours.
     * Example: /// Example: 1.5
     * Constraints: No constraints specified.
     */
    val trackTime : Double
        get() {
            val o = __offset(50)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Status of this air refueling event track reservation. Receivers are responsible for scheduling or reserving air refueling tracks. Possible values are A (Altitude Reservation), R (Reserved), or Q (Questionable).
     * Example: /// Example: R
     * Constraints: Minimum length = 0, Maximum length = 2
     */
    val statusCode : String?
        get() {
            val o = __offset(52)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val statusCodeAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(52, 1)
    fun statusCodeInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 52, 1)
    /**
     * Rendezvous point for the tanker and receiver during this air refueling event. Possible values are AN (Anchor Nav Point), AP (Anchor Pattern), CP (Control Point), ET (Entry Point), EX (Exit Point), IP (Initial Point), NC (Nav Check Point).
     * Example: /// Example: AN
     * Constraints: Minimum length = 0, Maximum length = 20
     */
    val rzPoint : String?
        get() {
            val o = __offset(54)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val rzPointAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(54, 1)
    fun rzPointInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 54, 1)
    /**
     * Type of rendezvous used for this air refueling event. Possible values are BUD (Buddy), EN (Enroute), GCI (Ground Control), PP (Point Parallel).
     * Example: /// Example: PP
     * Constraints: Minimum length = 0, Maximum length = 3
     */
    val rzType : String?
        get() {
            val o = __offset(56)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val rzTypeAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(56, 1)
    fun rzTypeInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 56, 1)
    /**
     * Type of process used by AMC to schedule this air refueling event. Possible values are A (Matched Long Range), F (Matched AMC Short Notice), N (Unmatched Theater Operation Short Notice (Theater Assets)), R, Unmatched Long Range, S (Soft Air Refueling), T (Matched Theater Operation Short Notice (Theater Assets)), V (Unmatched AMC Short Notice), X (Unmatched Theater Operation Short Notice (AMC Assets)), Y (Matched Theater Operation Short Notice (AMC Assets)), Z (Other Air Refueling).
     * Example: /// Example: V
     * Constraints: Minimum length = 0, Maximum length = 2
     */
    val arEventType : String?
        get() {
            val o = __offset(58)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val arEventTypeAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(58, 1)
    fun arEventTypeInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 58, 1)
    /**
     * The number of tankers requested for an air refueling event.
     * Example: /// Example: 1
     * Constraints: No constraints specified.
     */
    val numTankers : Int
        get() {
            val o = __offset(60)
            return if(o != 0) bb.getInt(o + bb_pos) else 0
        }
    /**
     * Flag indicating if the receiver unit has requested flying an air refueling track in both directions.
     * Example: /// Example: True
     * Constraints: No constraints specified.
     */
    val revTrack : Boolean
        get() {
            val o = __offset(62)
            return if(o != 0) 0.toByte() != bb.get(o + bb_pos) else false
        }
    /**
     * Flag indicating that the receiver unit has requested flying a short portion of an air refueling track.
     * Example: /// Example: True
     * Constraints: No constraints specified.
     */
    val shortTrack : Boolean
        get() {
            val o = __offset(64)
            return if(o != 0) 0.toByte() != bb.get(o + bb_pos) else false
        }
    /**
     * Flag indicating that this air refueling event has been cancelled.
     * Example: /// Example: False
     * Constraints: No constraints specified.
     */
    val cancelled : Boolean
        get() {
            val o = __offset(66)
            return if(o != 0) 0.toByte() != bb.get(o + bb_pos) else false
        }
    /**
     * Collection of tanker aircraft associated with this Air Event.
     * Example: /// Example: No example provided.
     * Constraints: No constraints specified.
     */
    fun tankers(j: Int) : String? {
        val o = __offset(68)
        return if (o != 0) {
            __string(__vector(o) + j * 4)
        } else {
            null
        }
    }
    val tankersLength : Int
        get() {
            val o = __offset(68); return if (o != 0) __vector_len(o) else 0
        }
    /**
     * Collection of receiver aircraft associated with this Air Event.
     * Example: /// Example: No example provided.
     * Constraints: No constraints specified.
     */
    fun receivers(j: Int) : String? {
        val o = __offset(70)
        return if (o != 0) {
            __string(__vector(o) + j * 4)
        } else {
            null
        }
    }
    val receiversLength : Int
        get() {
            val o = __offset(70); return if (o != 0) __vector_len(o) else 0
        }
    /**
     * Collection of remarks associated with this Air Event.
     * Example: /// Example: No example provided.
     * Constraints: No constraints specified.
     */
    fun remarks(j: Int) : String? {
        val o = __offset(72)
        return if (o != 0) {
            __string(__vector(o) + j * 4)
        } else {
            null
        }
    }
    val remarksLength : Int
        get() {
            val o = __offset(72); return if (o != 0) __vector_len(o) else 0
        }
    /**
     * Time the row was created in the database, auto-populated by the system.
     * Example: /// Example: 2018-01-01T16:00:00.123Z
     * Constraints: No constraints specified.
     */
    val createdAt : String?
        get() {
            val o = __offset(74)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val createdAtAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(74, 1)
    fun createdAtInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 74, 1)
    /**
     * Application user who created the row in the database, auto-populated by the system.
     * Example: /// Example: some.user
     * Constraints: Minimum length = 1, Maximum length = 64
     */
    val createdBy : String?
        get() {
            val o = __offset(76)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val createdByAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(76, 1)
    fun createdByInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 76, 1)
    /**
     * Time the row was updated in the database, auto-populated by the system.
     * Example: /// Example: 2018-01-01T16:00:00.123Z
     * Constraints: No constraints specified.
     */
    val updatedAt : String?
        get() {
            val o = __offset(78)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val updatedAtAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(78, 1)
    fun updatedAtInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 78, 1)
    /**
     * Application user who updated the row in the database, auto-populated by the system.
     * Example: /// Example: some.user
     * Constraints: Minimum length = 0, Maximum length = 64
     */
    val updatedBy : String?
        get() {
            val o = __offset(80)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val updatedByAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(80, 1)
    fun updatedByInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 80, 1)
    /**
     * The source data library from which this record was received. This could be a remote or tactical UDL or another data library. If null, the record should be assumed to have originated from the primary Enterprise UDL.
     * Example: /// Example: AXE
     * Constraints: Minimum length = 0, Maximum length = 64
     */
    val sourceDl : String?
        get() {
            val o = __offset(82)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val sourceDlAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(82, 1)
    fun sourceDlInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 82, 1)
    /**
     * Source of the data.
     * Example: /// Example: Bluestaq
     * Constraints: Minimum length = 1, Maximum length = 64
     */
    val source : String?
        get() {
            val o = __offset(84)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val sourceAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(84, 1)
    fun sourceInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 84, 1)
    /**
     * Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
     * Example: /// Example: THIRD_PARTY_DATASOURCE
     * Constraints: Minimum length = 0, Maximum length = 64
     */
    val origin : String?
        get() {
            val o = __offset(86)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val originAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(86, 1)
    fun originInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 86, 1)
    /**
     * The originating source network on which this record was created, auto-populated by the system.
     * Example: /// Example: ORIG
     * Constraints: Minimum length = 1, Maximum length = 32
     */
    val origNetwork : String?
        get() {
            val o = __offset(88)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val origNetworkAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(88, 1)
    fun origNetworkInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 88, 1)
    /**
     * Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
     * EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
     * REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
     * SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
     * TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
     * Example: /// Example: TEST
     * Constraints: Minimum length = 1, Maximum length = 32
     */
    val dataMode : Byte
        get() {
            val o = __offset(90)
            return if(o != 0) bb.get(o + bb_pos) else 0
        }
    companion object {
        fun validateVersion() = Constants.FLATBUFFERS_24_3_25()
        fun getRootAsAirEvent_Full(_bb: ByteBuffer): AirEvent_Full = getRootAsAirEvent_Full(_bb, AirEvent_Full())
        fun getRootAsAirEvent_Full(_bb: ByteBuffer, obj: AirEvent_Full): AirEvent_Full {
            _bb.order(ByteOrder.LITTLE_ENDIAN)
            return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb))
        }
        fun AirEvent_FullBufferHasIdentifier(_bb: ByteBuffer) : Boolean = __has_identifier(_bb, "AIRE")
        fun createAirEvent_Full(builder: FlatBufferBuilder, idOffset: Int, classificationMarkingOffset: Int, typeOffset: Int, idSortieOffset: Int, idMissionOffset: Int, externalAirEventIdOffset: Int, legNum: Int, locationOffset: Int, arrPurposeOffset: Int, plannedArrTimeOffset: Int, estArrTimeOffset: Int, actualArrTimeOffset: Int, depPurposeOffset: Int, plannedDepTimeOffset: Int, estDepTimeOffset: Int, actualDepTimeOffset: Int, externalArtrackIdOffset: Int, arTrackIdOffset: Int, arTrackNameOffset: Int, rzctOffset: Int, arctOffset: Int, baseAlt: Double, priorityOffset: Int, trackTime: Double, statusCodeOffset: Int, rzPointOffset: Int, rzTypeOffset: Int, arEventTypeOffset: Int, numTankers: Int, revTrack: Boolean, shortTrack: Boolean, cancelled: Boolean, tankersOffset: Int, receiversOffset: Int, remarksOffset: Int, createdAtOffset: Int, createdByOffset: Int, updatedAtOffset: Int, updatedByOffset: Int, sourceDlOffset: Int, sourceOffset: Int, originOffset: Int, origNetworkOffset: Int, dataMode: Byte) : Int {
            builder.startTable(44)
            addTrackTime(builder, trackTime)
            addBaseAlt(builder, baseAlt)
            addOrigNetwork(builder, origNetworkOffset)
            addOrigin(builder, originOffset)
            addSource(builder, sourceOffset)
            addSourceDL(builder, sourceDlOffset)
            addUpdatedBy(builder, updatedByOffset)
            addUpdatedAt(builder, updatedAtOffset)
            addCreatedBy(builder, createdByOffset)
            addCreatedAt(builder, createdAtOffset)
            addRemarks(builder, remarksOffset)
            addReceivers(builder, receiversOffset)
            addTankers(builder, tankersOffset)
            addNumTankers(builder, numTankers)
            addArEventType(builder, arEventTypeOffset)
            addRzType(builder, rzTypeOffset)
            addRzPoint(builder, rzPointOffset)
            addStatusCode(builder, statusCodeOffset)
            addPriority(builder, priorityOffset)
            addArct(builder, arctOffset)
            addRzct(builder, rzctOffset)
            addArTrackName(builder, arTrackNameOffset)
            addArTrackId(builder, arTrackIdOffset)
            addExternalARTrackId(builder, externalArtrackIdOffset)
            addActualDepTime(builder, actualDepTimeOffset)
            addEstDepTime(builder, estDepTimeOffset)
            addPlannedDepTime(builder, plannedDepTimeOffset)
            addDepPurpose(builder, depPurposeOffset)
            addActualArrTime(builder, actualArrTimeOffset)
            addEstArrTime(builder, estArrTimeOffset)
            addPlannedArrTime(builder, plannedArrTimeOffset)
            addArrPurpose(builder, arrPurposeOffset)
            addLocation(builder, locationOffset)
            addLegNum(builder, legNum)
            addExternalAirEventId(builder, externalAirEventIdOffset)
            addIdMission(builder, idMissionOffset)
            addIdSortie(builder, idSortieOffset)
            addType(builder, typeOffset)
            addClassificationMarking(builder, classificationMarkingOffset)
            addId(builder, idOffset)
            addDataMode(builder, dataMode)
            addCancelled(builder, cancelled)
            addShortTrack(builder, shortTrack)
            addRevTrack(builder, revTrack)
            return endAirEvent_Full(builder)
        }
        fun startAirEvent_Full(builder: FlatBufferBuilder) = builder.startTable(44)
        fun addId(builder: FlatBufferBuilder, id: Int) = builder.addOffset(0, id, 0)
        fun addClassificationMarking(builder: FlatBufferBuilder, classificationMarking: Int) = builder.addOffset(1, classificationMarking, 0)
        fun addType(builder: FlatBufferBuilder, type: Int) = builder.addOffset(2, type, 0)
        fun addIdSortie(builder: FlatBufferBuilder, idSortie: Int) = builder.addOffset(3, idSortie, 0)
        fun addIdMission(builder: FlatBufferBuilder, idMission: Int) = builder.addOffset(4, idMission, 0)
        fun addExternalAirEventId(builder: FlatBufferBuilder, externalAirEventId: Int) = builder.addOffset(5, externalAirEventId, 0)
        fun addLegNum(builder: FlatBufferBuilder, legNum: Int) = builder.addInt(6, legNum, 0)
        fun addLocation(builder: FlatBufferBuilder, location: Int) = builder.addOffset(7, location, 0)
        fun addArrPurpose(builder: FlatBufferBuilder, arrPurpose: Int) = builder.addOffset(8, arrPurpose, 0)
        fun addPlannedArrTime(builder: FlatBufferBuilder, plannedArrTime: Int) = builder.addOffset(9, plannedArrTime, 0)
        fun addEstArrTime(builder: FlatBufferBuilder, estArrTime: Int) = builder.addOffset(10, estArrTime, 0)
        fun addActualArrTime(builder: FlatBufferBuilder, actualArrTime: Int) = builder.addOffset(11, actualArrTime, 0)
        fun addDepPurpose(builder: FlatBufferBuilder, depPurpose: Int) = builder.addOffset(12, depPurpose, 0)
        fun addPlannedDepTime(builder: FlatBufferBuilder, plannedDepTime: Int) = builder.addOffset(13, plannedDepTime, 0)
        fun addEstDepTime(builder: FlatBufferBuilder, estDepTime: Int) = builder.addOffset(14, estDepTime, 0)
        fun addActualDepTime(builder: FlatBufferBuilder, actualDepTime: Int) = builder.addOffset(15, actualDepTime, 0)
        fun addExternalARTrackId(builder: FlatBufferBuilder, externalArtrackId: Int) = builder.addOffset(16, externalArtrackId, 0)
        fun addArTrackId(builder: FlatBufferBuilder, arTrackId: Int) = builder.addOffset(17, arTrackId, 0)
        fun addArTrackName(builder: FlatBufferBuilder, arTrackName: Int) = builder.addOffset(18, arTrackName, 0)
        fun addRzct(builder: FlatBufferBuilder, rzct: Int) = builder.addOffset(19, rzct, 0)
        fun addArct(builder: FlatBufferBuilder, arct: Int) = builder.addOffset(20, arct, 0)
        fun addBaseAlt(builder: FlatBufferBuilder, baseAlt: Double) = builder.addDouble(21, baseAlt, 0.0)
        fun addPriority(builder: FlatBufferBuilder, priority: Int) = builder.addOffset(22, priority, 0)
        fun addTrackTime(builder: FlatBufferBuilder, trackTime: Double) = builder.addDouble(23, trackTime, 0.0)
        fun addStatusCode(builder: FlatBufferBuilder, statusCode: Int) = builder.addOffset(24, statusCode, 0)
        fun addRzPoint(builder: FlatBufferBuilder, rzPoint: Int) = builder.addOffset(25, rzPoint, 0)
        fun addRzType(builder: FlatBufferBuilder, rzType: Int) = builder.addOffset(26, rzType, 0)
        fun addArEventType(builder: FlatBufferBuilder, arEventType: Int) = builder.addOffset(27, arEventType, 0)
        fun addNumTankers(builder: FlatBufferBuilder, numTankers: Int) = builder.addInt(28, numTankers, 0)
        fun addRevTrack(builder: FlatBufferBuilder, revTrack: Boolean) = builder.addBoolean(29, revTrack, false)
        fun addShortTrack(builder: FlatBufferBuilder, shortTrack: Boolean) = builder.addBoolean(30, shortTrack, false)
        fun addCancelled(builder: FlatBufferBuilder, cancelled: Boolean) = builder.addBoolean(31, cancelled, false)
        fun addTankers(builder: FlatBufferBuilder, tankers: Int) = builder.addOffset(32, tankers, 0)
        fun createTankersVector(builder: FlatBufferBuilder, data: IntArray) : Int {
            builder.startVector(4, data.size, 4)
            for (i in data.size - 1 downTo 0) {
                builder.addOffset(data[i])
            }
            return builder.endVector()
        }
        fun startTankersVector(builder: FlatBufferBuilder, numElems: Int) = builder.startVector(4, numElems, 4)
        fun addReceivers(builder: FlatBufferBuilder, receivers: Int) = builder.addOffset(33, receivers, 0)
        fun createReceiversVector(builder: FlatBufferBuilder, data: IntArray) : Int {
            builder.startVector(4, data.size, 4)
            for (i in data.size - 1 downTo 0) {
                builder.addOffset(data[i])
            }
            return builder.endVector()
        }
        fun startReceiversVector(builder: FlatBufferBuilder, numElems: Int) = builder.startVector(4, numElems, 4)
        fun addRemarks(builder: FlatBufferBuilder, remarks: Int) = builder.addOffset(34, remarks, 0)
        fun createRemarksVector(builder: FlatBufferBuilder, data: IntArray) : Int {
            builder.startVector(4, data.size, 4)
            for (i in data.size - 1 downTo 0) {
                builder.addOffset(data[i])
            }
            return builder.endVector()
        }
        fun startRemarksVector(builder: FlatBufferBuilder, numElems: Int) = builder.startVector(4, numElems, 4)
        fun addCreatedAt(builder: FlatBufferBuilder, createdAt: Int) = builder.addOffset(35, createdAt, 0)
        fun addCreatedBy(builder: FlatBufferBuilder, createdBy: Int) = builder.addOffset(36, createdBy, 0)
        fun addUpdatedAt(builder: FlatBufferBuilder, updatedAt: Int) = builder.addOffset(37, updatedAt, 0)
        fun addUpdatedBy(builder: FlatBufferBuilder, updatedBy: Int) = builder.addOffset(38, updatedBy, 0)
        fun addSourceDL(builder: FlatBufferBuilder, sourceDl: Int) = builder.addOffset(39, sourceDl, 0)
        fun addSource(builder: FlatBufferBuilder, source: Int) = builder.addOffset(40, source, 0)
        fun addOrigin(builder: FlatBufferBuilder, origin: Int) = builder.addOffset(41, origin, 0)
        fun addOrigNetwork(builder: FlatBufferBuilder, origNetwork: Int) = builder.addOffset(42, origNetwork, 0)
        fun addDataMode(builder: FlatBufferBuilder, dataMode: Byte) = builder.addByte(43, dataMode, 0)
        fun endAirEvent_Full(builder: FlatBufferBuilder) : Int {
            val o = builder.endTable()
            return o
        }
        fun finishAirEventFullBuffer(builder: FlatBufferBuilder, offset: Int) = builder.finish(offset, "AIRE")
        fun finishSizePrefixedAirEvent_FullBuffer(builder: FlatBufferBuilder, offset: Int) = builder.finishSizePrefixed(offset, "AIRE")
    }
}
