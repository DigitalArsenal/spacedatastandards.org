// automatically generated by the FlatBuffers compiler, do not modify

import com.google.flatbuffers.BaseVector
import com.google.flatbuffers.BooleanVector
import com.google.flatbuffers.ByteVector
import com.google.flatbuffers.Constants
import com.google.flatbuffers.DoubleVector
import com.google.flatbuffers.FlatBufferBuilder
import com.google.flatbuffers.FloatVector
import com.google.flatbuffers.LongVector
import com.google.flatbuffers.StringVector
import com.google.flatbuffers.Struct
import com.google.flatbuffers.Table
import com.google.flatbuffers.UnionVector
import java.nio.ByteBuffer
import java.nio.ByteOrder
import kotlin.math.sign

/**
 * /// Collection of reference information. There can be 0 to many DataLinkReferences collections within the datalink service.
 */
@Suppress("unused")
class DataLinkReferences_Abridged : Table() {

    fun __init(_i: Int, _bb: ByteBuffer)  {
        __reset(_i, _bb)
    }
    fun __assign(_i: Int, _bb: ByteBuffer) : DataLinkReferences_Abridged {
        __init(_i, _bb)
        return this
    }
    /**
     * Specifies an alphabetic serial identifier a reference pertaining to the data link message.
     * Example: /// Example: A
     * Constraints: Minimum length = 0, Maximum length = 2
     */
    val refSerialId : String?
        get() {
            val o = __offset(4)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val refSerialIdAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(4, 1)
    fun refSerialIdInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 4, 1)
    /**
     * Specifies the type of document referenced.
     * Example: /// Example: ABSTAT
     * Constraints: Minimum length = 0, Maximum length = 56
     */
    val refType : String?
        get() {
            val o = __offset(6)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val refTypeAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(6, 1)
    fun refTypeInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 6, 1)
    /**
     * The originator of this reference.
     * Example: /// Example: CENTCOM
     * Constraints: Minimum length = 0, Maximum length = 30
     */
    val refOriginator : String?
        get() {
            val o = __offset(8)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val refOriginatorAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(8, 1)
    fun refOriginatorInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 8, 1)
    /**
     * Timestamp of the referenced message, in ISO 8601 UTC format with millisecond precision.
     * Example: /// Example: 2024-01-07T13:55:43.123Z
     * Constraints: No constraints specified.
     */
    val refTs : String?
        get() {
            val o = __offset(10)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val refTsAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(10, 1)
    fun refTsInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 10, 1)
    /**
     * Serial number assigned to this reference.
     * Example: /// Example: 1402001
     * Constraints: Minimum length = 0, Maximum length = 10
     */
    val refSerialNum : String?
        get() {
            val o = __offset(12)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val refSerialNumAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(12, 1)
    fun refSerialNumInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 12, 1)
    /**
     * Indicates any special actions, restrictions, guidance, or information relating to this reference.
     * Example: /// Example: NOTAL
     * Constraints: Minimum length = 0, Maximum length = 5
     */
    val refSpecialNotation : String?
        get() {
            val o = __offset(14)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val refSpecialNotationAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(14, 1)
    fun refSpecialNotationInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 14, 1)
    /**
     * Array of NATO Subject Indicator Codes (SIC) or filing numbers of the document being referenced.
     * Example: /// Example: ['RDU', 'C-123-92']
     * Constraints: No constraints specified.
     */
    fun refSics(j: Int) : String? {
        val o = __offset(16)
        return if (o != 0) {
            __string(__vector(o) + j * 4)
        } else {
            null
        }
    }
    val refSicsLength : Int
        get() {
            val o = __offset(16); return if (o != 0) __vector_len(o) else 0
        }
    companion object {
        fun validateVersion() = Constants.FLATBUFFERS_24_3_25()
        fun getRootAsDataLinkReferences_Abridged(_bb: ByteBuffer): DataLinkReferences_Abridged = getRootAsDataLinkReferences_Abridged(_bb, DataLinkReferences_Abridged())
        fun getRootAsDataLinkReferences_Abridged(_bb: ByteBuffer, obj: DataLinkReferences_Abridged): DataLinkReferences_Abridged {
            _bb.order(ByteOrder.LITTLE_ENDIAN)
            return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb))
        }
        fun DataLinkReferences_AbridgedBufferHasIdentifier(_bb: ByteBuffer) : Boolean = __has_identifier(_bb, "DATA")
        fun createDataLinkReferences_Abridged(builder: FlatBufferBuilder, refSerialIdOffset: Int, refTypeOffset: Int, refOriginatorOffset: Int, refTsOffset: Int, refSerialNumOffset: Int, refSpecialNotationOffset: Int, refSicsOffset: Int) : Int {
            builder.startTable(7)
            addRefSICs(builder, refSicsOffset)
            addRefSpecialNotation(builder, refSpecialNotationOffset)
            addRefSerialNum(builder, refSerialNumOffset)
            addRefTs(builder, refTsOffset)
            addRefOriginator(builder, refOriginatorOffset)
            addRefType(builder, refTypeOffset)
            addRefSerialId(builder, refSerialIdOffset)
            return endDataLinkReferences_Abridged(builder)
        }
        fun startDataLinkReferences_Abridged(builder: FlatBufferBuilder) = builder.startTable(7)
        fun addRefSerialId(builder: FlatBufferBuilder, refSerialId: Int) = builder.addOffset(0, refSerialId, 0)
        fun addRefType(builder: FlatBufferBuilder, refType: Int) = builder.addOffset(1, refType, 0)
        fun addRefOriginator(builder: FlatBufferBuilder, refOriginator: Int) = builder.addOffset(2, refOriginator, 0)
        fun addRefTs(builder: FlatBufferBuilder, refTs: Int) = builder.addOffset(3, refTs, 0)
        fun addRefSerialNum(builder: FlatBufferBuilder, refSerialNum: Int) = builder.addOffset(4, refSerialNum, 0)
        fun addRefSpecialNotation(builder: FlatBufferBuilder, refSpecialNotation: Int) = builder.addOffset(5, refSpecialNotation, 0)
        fun addRefSICs(builder: FlatBufferBuilder, refSics: Int) = builder.addOffset(6, refSics, 0)
        fun createRefSicsVector(builder: FlatBufferBuilder, data: IntArray) : Int {
            builder.startVector(4, data.size, 4)
            for (i in data.size - 1 downTo 0) {
                builder.addOffset(data[i])
            }
            return builder.endVector()
        }
        fun startRefSicsVector(builder: FlatBufferBuilder, numElems: Int) = builder.startVector(4, numElems, 4)
        fun endDataLinkReferences_Abridged(builder: FlatBufferBuilder) : Int {
            val o = builder.endTable()
            return o
        }
        fun finishDataLinkReferencesAbridgedBuffer(builder: FlatBufferBuilder, offset: Int) = builder.finish(offset, "DATA")
        fun finishSizePrefixedDataLinkReferences_AbridgedBuffer(builder: FlatBufferBuilder, offset: Int) = builder.finishSizePrefixed(offset, "DATA")
    }
}
