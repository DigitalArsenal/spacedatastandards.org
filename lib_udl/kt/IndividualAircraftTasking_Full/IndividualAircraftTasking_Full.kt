// automatically generated by the FlatBuffers compiler, do not modify

import com.google.flatbuffers.BaseVector
import com.google.flatbuffers.BooleanVector
import com.google.flatbuffers.ByteVector
import com.google.flatbuffers.Constants
import com.google.flatbuffers.DoubleVector
import com.google.flatbuffers.FlatBufferBuilder
import com.google.flatbuffers.FloatVector
import com.google.flatbuffers.LongVector
import com.google.flatbuffers.StringVector
import com.google.flatbuffers.Struct
import com.google.flatbuffers.Table
import com.google.flatbuffers.UnionVector
import java.nio.ByteBuffer
import java.nio.ByteOrder
import kotlin.math.sign

/**
 * /// Collection that specifies the naval flight operations for this ATO.
 */
@Suppress("unused")
class IndividualAircraftTasking_Full : Table() {

    fun __init(_i: Int, _bb: ByteBuffer)  {
        __reset(_i, _bb)
    }
    fun __assign(_i: Int, _bb: ByteBuffer) : IndividualAircraftTasking_Full {
        __init(_i, _bb)
        return this
    }
    /**
     * The number of aircraft participating in this mission.
     * Example: /// Example: 2
     * Constraints: No constraints specified.
     */
    val numAcft : Int
        get() {
            val o = __offset(4)
            return if(o != 0) bb.getInt(o + bb_pos) else 0
        }
    /**
     * The type and model number for the aircraft. The field may specify a value of an aircraft not yet assigned an aircraft code contained in the aircraft codes list.
     * Example: /// Example: F35A
     * Constraints: Minimum length = 1, Maximum length = 36
     */
    val acftType : String?
        get() {
            val o = __offset(6)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val acftTypeAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(6, 1)
    fun acftTypeInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 6, 1)
    /**
     * The call sign assigned to this mission aircraft.
     * Example: /// Example: EAGLE47
     * Constraints: Minimum length = 0, Maximum length = 24
     */
    val callSign : String?
        get() {
            val o = __offset(8)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val callSignAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(8, 1)
    fun callSignInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 8, 1)
    /**
     * The code that indicates the ordinance mix carried on this mission aircraft.
     * Example: /// Example: 6A2W3
     * Constraints: Minimum length = 0, Maximum length = 48
     */
    val priConfigCode : String?
        get() {
            val o = __offset(10)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val priConfigCodeAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(10, 1)
    fun priConfigCodeInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 10, 1)
    /**
     * The code for the secondary ordinance mix carried on this mission aircraft.
     * Example: /// Example: 2S2WG
     * Constraints: Minimum length = 0, Maximum length = 48
     */
    val secConfigCode : String?
        get() {
            val o = __offset(12)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val secConfigCodeAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(12, 1)
    fun secConfigCodeInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 12, 1)
    /**
     * The Link 16 abbreviated call sign assigned to the ACA. This is normally the first and last letter and the last two numbers of the call sign.
     * Example: /// Example: EE47
     * Constraints: Minimum length = 0, Maximum length = 8
     */
    val link16CallSign : String?
        get() {
            val o = __offset(14)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val link16CallSignAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(14, 1)
    fun link16CallSignInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 14, 1)
    /**
     * The TACAN channel assigned to this mission aircraft.
     * Example: /// Example: 123
     * Constraints: No constraints specified.
     */
    val tacanChan : Int
        get() {
            val o = __offset(16)
            return if(o != 0) bb.getInt(o + bb_pos) else 0
        }
    /**
     * An optional array of link 16 octal track numbers assigned as the primary JTIDS Unit (JU) address for the mission aircraft.
     * Example: /// Example: 12345
     * Constraints: No constraints specified.
     */
    fun juAddress(j: Int) : String? {
        val o = __offset(18)
        return if (o != 0) {
            __string(__vector(o) + j * 4)
        } else {
            null
        }
    }
    val juAddressLength : Int
        get() {
            val o = __offset(18); return if (o != 0) __vector_len(o) else 0
        }
    /**
     * The mode 1 and code of the Identification Friend or FOE (IFF) or Selective Identification Feature (SIF).
     * Example: /// Example: 111
     * Constraints: Minimum length = 0, Maximum length = 8
     */
    val iffSifMode1Code : String?
        get() {
            val o = __offset(20)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val iffSifMode1CodeAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(20, 1)
    fun iffSifMode1CodeInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 20, 1)
    /**
     * The mode 2 and code of the Identification Friend or FOE (IFF) or Selective Identification Feature (SIF).
     * Example: /// Example: 20147
     * Constraints: Minimum length = 0, Maximum length = 8
     */
    val iffSifMode2Code : String?
        get() {
            val o = __offset(22)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val iffSifMode2CodeAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(22, 1)
    fun iffSifMode2CodeInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 22, 1)
    /**
     * The mode 3 and code of the Identification Friend or FOE (IFF) or Selective Identification Feature (SIF).
     * Example: /// Example: 30147
     * Constraints: Minimum length = 0, Maximum length = 8
     */
    val iffSifMode3Code : String?
        get() {
            val o = __offset(24)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val iffSifMode3CodeAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(24, 1)
    fun iffSifMode3CodeInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 24, 1)
    companion object {
        fun validateVersion() = Constants.FLATBUFFERS_24_3_25()
        fun getRootAsIndividualAircraftTasking_Full(_bb: ByteBuffer): IndividualAircraftTasking_Full = getRootAsIndividualAircraftTasking_Full(_bb, IndividualAircraftTasking_Full())
        fun getRootAsIndividualAircraftTasking_Full(_bb: ByteBuffer, obj: IndividualAircraftTasking_Full): IndividualAircraftTasking_Full {
            _bb.order(ByteOrder.LITTLE_ENDIAN)
            return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb))
        }
        fun IndividualAircraftTasking_FullBufferHasIdentifier(_bb: ByteBuffer) : Boolean = __has_identifier(_bb, "INDI")
        fun createIndividualAircraftTasking_Full(builder: FlatBufferBuilder, numAcft: Int, acftTypeOffset: Int, callSignOffset: Int, priConfigCodeOffset: Int, secConfigCodeOffset: Int, link16CallSignOffset: Int, tacanChan: Int, juAddressOffset: Int, iffSifMode1CodeOffset: Int, iffSifMode2CodeOffset: Int, iffSifMode3CodeOffset: Int) : Int {
            builder.startTable(11)
            addIffSifMode3Code(builder, iffSifMode3CodeOffset)
            addIffSifMode2Code(builder, iffSifMode2CodeOffset)
            addIffSifMode1Code(builder, iffSifMode1CodeOffset)
            addJuAddress(builder, juAddressOffset)
            addTacanChan(builder, tacanChan)
            addLink16CallSign(builder, link16CallSignOffset)
            addSecConfigCode(builder, secConfigCodeOffset)
            addPriConfigCode(builder, priConfigCodeOffset)
            addCallSign(builder, callSignOffset)
            addAcftType(builder, acftTypeOffset)
            addNumAcft(builder, numAcft)
            return endIndividualAircraftTasking_Full(builder)
        }
        fun startIndividualAircraftTasking_Full(builder: FlatBufferBuilder) = builder.startTable(11)
        fun addNumAcft(builder: FlatBufferBuilder, numAcft: Int) = builder.addInt(0, numAcft, 0)
        fun addAcftType(builder: FlatBufferBuilder, acftType: Int) = builder.addOffset(1, acftType, 0)
        fun addCallSign(builder: FlatBufferBuilder, callSign: Int) = builder.addOffset(2, callSign, 0)
        fun addPriConfigCode(builder: FlatBufferBuilder, priConfigCode: Int) = builder.addOffset(3, priConfigCode, 0)
        fun addSecConfigCode(builder: FlatBufferBuilder, secConfigCode: Int) = builder.addOffset(4, secConfigCode, 0)
        fun addLink16CallSign(builder: FlatBufferBuilder, link16CallSign: Int) = builder.addOffset(5, link16CallSign, 0)
        fun addTacanChan(builder: FlatBufferBuilder, tacanChan: Int) = builder.addInt(6, tacanChan, 0)
        fun addJuAddress(builder: FlatBufferBuilder, juAddress: Int) = builder.addOffset(7, juAddress, 0)
        fun createJuAddressVector(builder: FlatBufferBuilder, data: IntArray) : Int {
            builder.startVector(4, data.size, 4)
            for (i in data.size - 1 downTo 0) {
                builder.addOffset(data[i])
            }
            return builder.endVector()
        }
        fun startJuAddressVector(builder: FlatBufferBuilder, numElems: Int) = builder.startVector(4, numElems, 4)
        fun addIffSifMode1Code(builder: FlatBufferBuilder, iffSifMode1Code: Int) = builder.addOffset(8, iffSifMode1Code, 0)
        fun addIffSifMode2Code(builder: FlatBufferBuilder, iffSifMode2Code: Int) = builder.addOffset(9, iffSifMode2Code, 0)
        fun addIffSifMode3Code(builder: FlatBufferBuilder, iffSifMode3Code: Int) = builder.addOffset(10, iffSifMode3Code, 0)
        fun endIndividualAircraftTasking_Full(builder: FlatBufferBuilder) : Int {
            val o = builder.endTable()
            return o
        }
        fun finishIndividualAircraftTaskingFullBuffer(builder: FlatBufferBuilder, offset: Int) = builder.finish(offset, "INDI")
        fun finishSizePrefixedIndividualAircraftTasking_FullBuffer(builder: FlatBufferBuilder, offset: Int) = builder.finishSizePrefixed(offset, "INDI")
    }
}
