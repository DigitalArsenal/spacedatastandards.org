// automatically generated by the FlatBuffers compiler, do not modify

import com.google.flatbuffers.BaseVector
import com.google.flatbuffers.BooleanVector
import com.google.flatbuffers.ByteVector
import com.google.flatbuffers.Constants
import com.google.flatbuffers.DoubleVector
import com.google.flatbuffers.FlatBufferBuilder
import com.google.flatbuffers.FloatVector
import com.google.flatbuffers.LongVector
import com.google.flatbuffers.StringVector
import com.google.flatbuffers.Struct
import com.google.flatbuffers.Table
import com.google.flatbuffers.UnionVector
import java.nio.ByteBuffer
import java.nio.ByteOrder
import kotlin.math.sign

/**
 * /// Collection of Requirements associated with this Air Transport Mission.
 */
@Suppress("unused")
class AircraftMissionRequirements_Ingest : Table() {

    fun __init(_i: Int, _bb: ByteBuffer)  {
        __reset(_i, _bb)
    }
    fun __assign(_i: Int, _bb: ByteBuffer) : AircraftMissionRequirements_Ingest {
        __init(_i, _bb)
        return this
    }
    /**
     * Global Decision Support System (GDSS) mission requirement identifier.
     * Example: /// Example: 23a1fb67-cc2d-5ebe-6b99-68130cb1aa6c
     * Constraints: Minimum length = 0, Maximum length = 36
     */
    val gdssReqId : String?
        get() {
            val o = __offset(4)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val gdssReqIdAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(4, 1)
    fun gdssReqIdInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 4, 1)
    /**
     * Identifier of the onload itinerary location.
     * Example: /// Example: 200
     * Constraints: No constraints specified.
     */
    val onloadId : Int
        get() {
            val o = __offset(6)
            return if(o != 0) bb.getInt(o + bb_pos) else 0
        }
    /**
     * Onload location code.
     * Example: /// Example: KCHS
     * Constraints: Minimum length = 0, Maximum length = 20
     */
    val onloadLocode : String?
        get() {
            val o = __offset(8)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val onloadLocodeAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(8, 1)
    fun onloadLocodeInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 8, 1)
    /**
     * Identifier of the offload itinerary location.
     * Example: /// Example: 300
     * Constraints: No constraints specified.
     */
    val offloadId : Int
        get() {
            val o = __offset(10)
            return if(o != 0) bb.getInt(o + bb_pos) else 0
        }
    /**
     * Offload location code.
     * Example: /// Example: KHOP
     * Constraints: Minimum length = 0, Maximum length = 20
     */
    val offloadLocode : String?
        get() {
            val o = __offset(12)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val offloadLocodeAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(12, 1)
    fun offloadLocodeInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 12, 1)
    /**
     * Unit line number.
     * Example: /// Example: T01ME01
     * Constraints: Minimum length = 0, Maximum length = 8
     */
    val uln : String?
        get() {
            val o = __offset(14)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val ulnAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(14, 1)
    fun ulnInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 14, 1)
    /**
     * Transportation requirement number.
     * Example: /// Example: T01ME01
     * Constraints: Minimum length = 0, Maximum length = 50
     */
    val transReqNum : String?
        get() {
            val o = __offset(16)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val transReqNumAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(16, 1)
    fun transReqNumInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 16, 1)
    /**
     * Project name.
     * Example: /// Example: CENTINTRA21
     * Constraints: Minimum length = 0, Maximum length = 50
     */
    val projName : String?
        get() {
            val o = __offset(18)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val projNameAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(18, 1)
    fun projNameInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 18, 1)
    /**
     * Identification number of the Operation Plan (OPLAN) associated with this mission.
     * Example: /// Example: 5027
     * Constraints: Minimum length = 0, Maximum length = 32
     */
    val oplan : String?
        get() {
            val o = __offset(20)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val oplanAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(20, 1)
    fun oplanInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 20, 1)
    /**
     * Number of passengers associated with the mission.
     * Example: /// Example: 44
     * Constraints: No constraints specified.
     */
    val numPax : Int
        get() {
            val o = __offset(22)
            return if(o != 0) bb.getInt(o + bb_pos) else 0
        }
    /**
     * Number of litter patients tasked for the mission.
     * Example: /// Example: 10
     * Constraints: No constraints specified.
     */
    val numLitter : Int
        get() {
            val o = __offset(24)
            return if(o != 0) bb.getInt(o + bb_pos) else 0
        }
    /**
     * Number of ambulatory patients tasked for the mission.
     * Example: /// Example: 10
     * Constraints: No constraints specified.
     */
    val numAmbulatory : Int
        get() {
            val o = __offset(26)
            return if(o != 0) bb.getInt(o + bb_pos) else 0
        }
    /**
     * Number of attendants tasked for the mission.
     * Example: /// Example: 10
     * Constraints: No constraints specified.
     */
    val numAttendant : Int
        get() {
            val o = __offset(28)
            return if(o != 0) bb.getInt(o + bb_pos) else 0
        }
    /**
     * Total weight of the bulk cargo, in kilograms.
     * Example: /// Example: 1.3
     * Constraints: No constraints specified.
     */
    val bulkWeight : Double
        get() {
            val o = __offset(30)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Total weight of the oversized cargo, in kilograms.
     * Example: /// Example: 1.3
     * Constraints: No constraints specified.
     */
    val oversizeWeight : Double
        get() {
            val o = __offset(32)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Total weight of the outsize cargo, in kilograms.
     * Example: /// Example: 1.3
     * Constraints: No constraints specified.
     */
    val outsizeWeight : Double
        get() {
            val o = __offset(34)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Earliest available date the cargo can be picked up.
     * Example: /// Example: 2024-01-01T16:00:00Z
     * Constraints: No constraints specified.
     */
    val ead : String?
        get() {
            val o = __offset(36)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val eadAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(36, 1)
    fun eadInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 36, 1)
    /**
     * Latest available date the cargo may be delivered.
     * Example: /// Example: 2024-01-01T16:00:00Z
     * Constraints: No constraints specified.
     */
    val lad : String?
        get() {
            val o = __offset(38)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val ladAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(38, 1)
    fun ladInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 38, 1)
    companion object {
        fun validateVersion() = Constants.FLATBUFFERS_24_3_25()
        fun getRootAsAircraftMissionRequirements_Ingest(_bb: ByteBuffer): AircraftMissionRequirements_Ingest = getRootAsAircraftMissionRequirements_Ingest(_bb, AircraftMissionRequirements_Ingest())
        fun getRootAsAircraftMissionRequirements_Ingest(_bb: ByteBuffer, obj: AircraftMissionRequirements_Ingest): AircraftMissionRequirements_Ingest {
            _bb.order(ByteOrder.LITTLE_ENDIAN)
            return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb))
        }
        fun AircraftMissionRequirements_IngestBufferHasIdentifier(_bb: ByteBuffer) : Boolean = __has_identifier(_bb, "AIRC")
        fun createAircraftMissionRequirements_Ingest(builder: FlatBufferBuilder, gdssReqIdOffset: Int, onloadId: Int, onloadLocodeOffset: Int, offloadId: Int, offloadLocodeOffset: Int, ulnOffset: Int, transReqNumOffset: Int, projNameOffset: Int, oplanOffset: Int, numPax: Int, numLitter: Int, numAmbulatory: Int, numAttendant: Int, bulkWeight: Double, oversizeWeight: Double, outsizeWeight: Double, eadOffset: Int, ladOffset: Int) : Int {
            builder.startTable(18)
            addOutsizeWeight(builder, outsizeWeight)
            addOversizeWeight(builder, oversizeWeight)
            addBulkWeight(builder, bulkWeight)
            addLad(builder, ladOffset)
            addEad(builder, eadOffset)
            addNumAttendant(builder, numAttendant)
            addNumAmbulatory(builder, numAmbulatory)
            addNumLitter(builder, numLitter)
            addNumPax(builder, numPax)
            addOplan(builder, oplanOffset)
            addProjName(builder, projNameOffset)
            addTransReqNum(builder, transReqNumOffset)
            addUln(builder, ulnOffset)
            addOffloadLOCode(builder, offloadLocodeOffset)
            addOffloadId(builder, offloadId)
            addOnloadLOCode(builder, onloadLocodeOffset)
            addOnloadId(builder, onloadId)
            addGdssReqId(builder, gdssReqIdOffset)
            return endAircraftMissionRequirements_Ingest(builder)
        }
        fun startAircraftMissionRequirements_Ingest(builder: FlatBufferBuilder) = builder.startTable(18)
        fun addGdssReqId(builder: FlatBufferBuilder, gdssReqId: Int) = builder.addOffset(0, gdssReqId, 0)
        fun addOnloadId(builder: FlatBufferBuilder, onloadId: Int) = builder.addInt(1, onloadId, 0)
        fun addOnloadLOCode(builder: FlatBufferBuilder, onloadLocode: Int) = builder.addOffset(2, onloadLocode, 0)
        fun addOffloadId(builder: FlatBufferBuilder, offloadId: Int) = builder.addInt(3, offloadId, 0)
        fun addOffloadLOCode(builder: FlatBufferBuilder, offloadLocode: Int) = builder.addOffset(4, offloadLocode, 0)
        fun addUln(builder: FlatBufferBuilder, uln: Int) = builder.addOffset(5, uln, 0)
        fun addTransReqNum(builder: FlatBufferBuilder, transReqNum: Int) = builder.addOffset(6, transReqNum, 0)
        fun addProjName(builder: FlatBufferBuilder, projName: Int) = builder.addOffset(7, projName, 0)
        fun addOplan(builder: FlatBufferBuilder, oplan: Int) = builder.addOffset(8, oplan, 0)
        fun addNumPax(builder: FlatBufferBuilder, numPax: Int) = builder.addInt(9, numPax, 0)
        fun addNumLitter(builder: FlatBufferBuilder, numLitter: Int) = builder.addInt(10, numLitter, 0)
        fun addNumAmbulatory(builder: FlatBufferBuilder, numAmbulatory: Int) = builder.addInt(11, numAmbulatory, 0)
        fun addNumAttendant(builder: FlatBufferBuilder, numAttendant: Int) = builder.addInt(12, numAttendant, 0)
        fun addBulkWeight(builder: FlatBufferBuilder, bulkWeight: Double) = builder.addDouble(13, bulkWeight, 0.0)
        fun addOversizeWeight(builder: FlatBufferBuilder, oversizeWeight: Double) = builder.addDouble(14, oversizeWeight, 0.0)
        fun addOutsizeWeight(builder: FlatBufferBuilder, outsizeWeight: Double) = builder.addDouble(15, outsizeWeight, 0.0)
        fun addEad(builder: FlatBufferBuilder, ead: Int) = builder.addOffset(16, ead, 0)
        fun addLad(builder: FlatBufferBuilder, lad: Int) = builder.addOffset(17, lad, 0)
        fun endAircraftMissionRequirements_Ingest(builder: FlatBufferBuilder) : Int {
            val o = builder.endTable()
            return o
        }
        fun finishAircraftMissionRequirementsIngestBuffer(builder: FlatBufferBuilder, offset: Int) = builder.finish(offset, "AIRC")
        fun finishSizePrefixedAircraftMissionRequirements_IngestBuffer(builder: FlatBufferBuilder, offset: Int) = builder.finishSizePrefixed(offset, "AIRC")
    }
}
