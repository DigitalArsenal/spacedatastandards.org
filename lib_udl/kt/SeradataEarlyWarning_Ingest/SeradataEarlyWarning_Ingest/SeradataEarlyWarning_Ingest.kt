// automatically generated by the FlatBuffers compiler, do not modify

package SeradataEarlyWarning_Ingest

import com.google.flatbuffers.BaseVector
import com.google.flatbuffers.BooleanVector
import com.google.flatbuffers.ByteVector
import com.google.flatbuffers.Constants
import com.google.flatbuffers.DoubleVector
import com.google.flatbuffers.FlatBufferBuilder
import com.google.flatbuffers.FloatVector
import com.google.flatbuffers.LongVector
import com.google.flatbuffers.StringVector
import com.google.flatbuffers.Struct
import com.google.flatbuffers.Table
import com.google.flatbuffers.UnionVector
import java.nio.ByteBuffer
import java.nio.ByteOrder
import kotlin.math.sign

/**
 * Details for an early warning payload from  Seradata.
 */
@Suppress("unused")
class SeradataEarlyWarning_Ingest : Table() {

    fun __init(_i: Int, _bb: ByteBuffer)  {
        __reset(_i, _bb)
    }
    fun __assign(_i: Int, _bb: ByteBuffer) : SeradataEarlyWarning_Ingest {
        __init(_i, _bb)
        return this
    }
    /**
     * Unique identifier of the record, auto-generated by the system.
     * Example: SERADATAEARLYWARNING-ID
     * Constraints: Minimum length = 1, Maximum length = 36
     */
    val id : String?
        get() {
            val o = __offset(4)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val idAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(4, 1)
    fun idInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 4, 1)
    /**
     * Classification marking of the data in IC/CAPCO Portion-marked format.
     * Example: U
     * Constraints: Minimum length = 1, Maximum length = 128
     */
    val classificationMarking : String?
        get() {
            val o = __offset(6)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val classificationMarkingAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(6, 1)
    fun classificationMarkingInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 6, 1)
    /**
     * UUID of the parent IR record.
     * Example: idIR
     * Constraints: Minimum length = 0, Maximum length = 36
     */
    val idIR : String?
        get() {
            val o = __offset(8)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val idIRAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(8, 1)
    fun idIRInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 8, 1)
    /**
     * Seradata ID of the spacecraft (SeradataSpacecraftDetails ID).
     * Example: spacecraftId
     * Constraints: Minimum length = 1, Maximum length = 36
     */
    val spacecraftId : String?
        get() {
            val o = __offset(10)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val spacecraftIdAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(10, 1)
    fun spacecraftIdInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 10, 1)
    /**
     * Hosted for company/Organization Id.
     * Example: hostedForCompanyOrgId
     * Constraints: Minimum length = 0, Maximum length = 36
     */
    val hostedForCompanyOrgId : String?
        get() {
            val o = __offset(12)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val hostedForCompanyOrgIdAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(12, 1)
    fun hostedForCompanyOrgIdInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 12, 1)
    /**
     * Manufacturer Organization Id.
     * Example: manufacturerOrgId
     * Constraints: Minimum length = 0, Maximum length = 36
     */
    val manufacturerOrgId : String?
        get() {
            val o = __offset(14)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val manufacturerOrgIdAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(14, 1)
    fun manufacturerOrgIdInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 14, 1)
    /**
     * Sensor name from Seradata, e.g. Infra red telescope, Schmidt Telescope, etc.
     * Example: Infra red telescope
     * Constraints: Minimum length = 0, Maximum length = 50
     */
    val name : String?
        get() {
            val o = __offset(16)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val nameAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(16, 1)
    fun nameInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 16, 1)
    /**
     * Spectral Bands, e.g. Infra-Red.
     * Example: Infra-Red
     * Constraints: Minimum length = 0, Maximum length = 50
     */
    val spectralBands : String?
        get() {
            val o = __offset(18)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val spectralBandsAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(18, 1)
    fun spectralBandsInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 18, 1)
    /**
     * Frequency Limits for this IR.
     * Example: frequencyLimits
     * Constraints: Minimum length = 0, Maximum length = 50
     */
    val frequencyLimits : String?
        get() {
            val o = __offset(20)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val frequencyLimitsAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(20, 1)
    fun frequencyLimitsInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 20, 1)
    /**
     * Best resolution for this IR in meters.
     * Example: 1.23
     * Constraints: No constraints specified.
     */
    val bestResolution : Double
        get() {
            val o = __offset(22)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Ground Station info for this IR.
     * Example: groundStations
     * Constraints: Minimum length = 0, Maximum length = 128
     */
    val groundStations : String?
        get() {
            val o = __offset(24)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val groundStationsAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(24, 1)
    fun groundStationsInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 24, 1)
    /**
     * Ground Station Locations for this IR.
     * Example: groundStationLocations
     * Constraints: Minimum length = 0, Maximum length = 64
     */
    val groundStationLocations : String?
        get() {
            val o = __offset(26)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val groundStationLocationsAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(26, 1)
    fun groundStationLocationsInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 26, 1)
    /**
     * Missile Launch Phase Detection Ability.
     * Example: missileLaunchPhaseDetectionAbility
     * Constraints: Minimum length = 0, Maximum length = 64
     */
    val missileLaunchPhaseDetectionAbility : String?
        get() {
            val o = __offset(28)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val missileLaunchPhaseDetectionAbilityAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(28, 1)
    fun missileLaunchPhaseDetectionAbilityInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 28, 1)
    /**
     * Is the sensor Earth Pointing.
     * Example: True
     * Constraints: No constraints specified.
     */
    val earthPointing : Boolean
        get() {
            val o = __offset(30)
            return if(o != 0) 0.toByte() != bb.get(o + bb_pos) else false
        }
    /**
     * Seradata ID of the spacecraft (SeradataSpacecraftDetails ID).
     * Example: partnerSpacecraftId
     * Constraints: Minimum length = 0, Maximum length = 36
     */
    val partnerSpacecraftId : String?
        get() {
            val o = __offset(32)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val partnerSpacecraftIdAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(32, 1)
    fun partnerSpacecraftIdInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 32, 1)
    /**
     * Payload notes.
     * Example: Sample Notes
     * Constraints: Minimum length = 0, Maximum length = 2147483647
     */
    val payloadNotes : String?
        get() {
            val o = __offset(34)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val payloadNotesAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(34, 1)
    fun payloadNotesInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 34, 1)
    /**
     * Time the row was created in the database, auto-populated by the system.
     * Example: 2018-01-01T16:00:00.123Z
     * Constraints: No constraints specified.
     */
    val createdAt : String?
        get() {
            val o = __offset(36)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val createdAtAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(36, 1)
    fun createdAtInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 36, 1)
    /**
     * Application user who created the row in the database, auto-populated by the system.
     * Example: some.user
     * Constraints: Minimum length = 1, Maximum length = 64
     */
    val createdBy : String?
        get() {
            val o = __offset(38)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val createdByAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(38, 1)
    fun createdByInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 38, 1)
    /**
     * Source of the data.
     * Example: Bluestaq
     * Constraints: Minimum length = 1, Maximum length = 64
     */
    val source : String?
        get() {
            val o = __offset(40)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val sourceAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(40, 1)
    fun sourceInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 40, 1)
    /**
     * Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
     * Example: THIRD_PARTY_DATASOURCE
     * Constraints: Minimum length = 0, Maximum length = 64
     */
    val origin : String?
        get() {
            val o = __offset(42)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val originAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(42, 1)
    fun originInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 42, 1)
    /**
     * The originating source network on which this record was created, auto-populated by the system.
     * Example: ORIG
     * Constraints: Minimum length = 0, Maximum length = 32
     */
    val origNetwork : String?
        get() {
            val o = __offset(44)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val origNetworkAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(44, 1)
    fun origNetworkInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 44, 1)
    /**
     * Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data: EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data. REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis. SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets. TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics. 
     * Example: TEST
     * Constraints: Minimum length = 1, Maximum length = 32
     */
    val dataMode : Byte
        get() {
            val o = __offset(46)
            return if(o != 0) bb.get(o + bb_pos) else 0
        }
    companion object {
        fun validateVersion() = Constants.FLATBUFFERS_24_3_25()
        fun getRootAsSeradataEarlyWarning_Ingest(_bb: ByteBuffer): SeradataEarlyWarning_Ingest = getRootAsSeradataEarlyWarning_Ingest(_bb, SeradataEarlyWarning_Ingest())
        fun getRootAsSeradataEarlyWarning_Ingest(_bb: ByteBuffer, obj: SeradataEarlyWarning_Ingest): SeradataEarlyWarning_Ingest {
            _bb.order(ByteOrder.LITTLE_ENDIAN)
            return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb))
        }
        fun createSeradataEarlyWarning_Ingest(builder: FlatBufferBuilder, idOffset: Int, classificationMarkingOffset: Int, idIrOffset: Int, spacecraftIdOffset: Int, hostedForCompanyOrgIdOffset: Int, manufacturerOrgIdOffset: Int, nameOffset: Int, spectralBandsOffset: Int, frequencyLimitsOffset: Int, bestResolution: Double, groundStationsOffset: Int, groundStationLocationsOffset: Int, missileLaunchPhaseDetectionAbilityOffset: Int, earthPointing: Boolean, partnerSpacecraftIdOffset: Int, payloadNotesOffset: Int, createdAtOffset: Int, createdByOffset: Int, sourceOffset: Int, originOffset: Int, origNetworkOffset: Int, dataMode: Byte) : Int {
            builder.startTable(22)
            addBestResolution(builder, bestResolution)
            addOrigNetwork(builder, origNetworkOffset)
            addOrigin(builder, originOffset)
            addSource(builder, sourceOffset)
            addCreatedBy(builder, createdByOffset)
            addCreatedAt(builder, createdAtOffset)
            addPayloadNotes(builder, payloadNotesOffset)
            addPartnerSpacecraftId(builder, partnerSpacecraftIdOffset)
            addMissileLaunchPhaseDetectionAbility(builder, missileLaunchPhaseDetectionAbilityOffset)
            addGroundStationLocations(builder, groundStationLocationsOffset)
            addGroundStations(builder, groundStationsOffset)
            addFrequencyLimits(builder, frequencyLimitsOffset)
            addSpectralBands(builder, spectralBandsOffset)
            addName(builder, nameOffset)
            addManufacturerOrgId(builder, manufacturerOrgIdOffset)
            addHostedForCompanyOrgId(builder, hostedForCompanyOrgIdOffset)
            addSpacecraftId(builder, spacecraftIdOffset)
            addIdIR(builder, idIROffset)
            addClassificationMarking(builder, classificationMarkingOffset)
            addId(builder, idOffset)
            addDataMode(builder, dataMode)
            addEarthPointing(builder, earthPointing)
            return endSeradataEarlyWarning_Ingest(builder)
        }
        fun startSeradataEarlyWarning_Ingest(builder: FlatBufferBuilder) = builder.startTable(22)
        fun addId(builder: FlatBufferBuilder, id: Int) = builder.addOffset(0, id, 0)
        fun addClassificationMarking(builder: FlatBufferBuilder, classificationMarking: Int) = builder.addOffset(1, classificationMarking, 0)
        fun addIdIR(builder: FlatBufferBuilder, idIr: Int) = builder.addOffset(2, idIR, 0)
        fun addSpacecraftId(builder: FlatBufferBuilder, spacecraftId: Int) = builder.addOffset(3, spacecraftId, 0)
        fun addHostedForCompanyOrgId(builder: FlatBufferBuilder, hostedForCompanyOrgId: Int) = builder.addOffset(4, hostedForCompanyOrgId, 0)
        fun addManufacturerOrgId(builder: FlatBufferBuilder, manufacturerOrgId: Int) = builder.addOffset(5, manufacturerOrgId, 0)
        fun addName(builder: FlatBufferBuilder, name: Int) = builder.addOffset(6, name, 0)
        fun addSpectralBands(builder: FlatBufferBuilder, spectralBands: Int) = builder.addOffset(7, spectralBands, 0)
        fun addFrequencyLimits(builder: FlatBufferBuilder, frequencyLimits: Int) = builder.addOffset(8, frequencyLimits, 0)
        fun addBestResolution(builder: FlatBufferBuilder, bestResolution: Double) = builder.addDouble(9, bestResolution, 0.0)
        fun addGroundStations(builder: FlatBufferBuilder, groundStations: Int) = builder.addOffset(10, groundStations, 0)
        fun addGroundStationLocations(builder: FlatBufferBuilder, groundStationLocations: Int) = builder.addOffset(11, groundStationLocations, 0)
        fun addMissileLaunchPhaseDetectionAbility(builder: FlatBufferBuilder, missileLaunchPhaseDetectionAbility: Int) = builder.addOffset(12, missileLaunchPhaseDetectionAbility, 0)
        fun addEarthPointing(builder: FlatBufferBuilder, earthPointing: Boolean) = builder.addBoolean(13, earthPointing, false)
        fun addPartnerSpacecraftId(builder: FlatBufferBuilder, partnerSpacecraftId: Int) = builder.addOffset(14, partnerSpacecraftId, 0)
        fun addPayloadNotes(builder: FlatBufferBuilder, payloadNotes: Int) = builder.addOffset(15, payloadNotes, 0)
        fun addCreatedAt(builder: FlatBufferBuilder, createdAt: Int) = builder.addOffset(16, createdAt, 0)
        fun addCreatedBy(builder: FlatBufferBuilder, createdBy: Int) = builder.addOffset(17, createdBy, 0)
        fun addSource(builder: FlatBufferBuilder, source: Int) = builder.addOffset(18, source, 0)
        fun addOrigin(builder: FlatBufferBuilder, origin: Int) = builder.addOffset(19, origin, 0)
        fun addOrigNetwork(builder: FlatBufferBuilder, origNetwork: Int) = builder.addOffset(20, origNetwork, 0)
        fun addDataMode(builder: FlatBufferBuilder, dataMode: Byte) = builder.addByte(21, dataMode, 0)
        fun endSeradataEarlyWarning_Ingest(builder: FlatBufferBuilder) : Int {
            val o = builder.endTable()
            return o
        }
    }
}
