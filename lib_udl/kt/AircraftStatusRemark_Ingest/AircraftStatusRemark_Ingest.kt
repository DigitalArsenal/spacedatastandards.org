// automatically generated by the FlatBuffers compiler, do not modify

import com.google.flatbuffers.BaseVector
import com.google.flatbuffers.BooleanVector
import com.google.flatbuffers.ByteVector
import com.google.flatbuffers.Constants
import com.google.flatbuffers.DoubleVector
import com.google.flatbuffers.FlatBufferBuilder
import com.google.flatbuffers.FloatVector
import com.google.flatbuffers.LongVector
import com.google.flatbuffers.StringVector
import com.google.flatbuffers.Struct
import com.google.flatbuffers.Table
import com.google.flatbuffers.UnionVector
import java.nio.ByteBuffer
import java.nio.ByteOrder
import kotlin.math.sign

/**
 * /// Properties and characteristics of a remark that is associated with an aircraft status.
 */
@Suppress("unused")
class AircraftStatusRemark_Ingest : Table() {

    fun __init(_i: Int, _bb: ByteBuffer)  {
        __reset(_i, _bb)
    }
    fun __assign(_i: Int, _bb: ByteBuffer) : AircraftStatusRemark_Ingest {
        __init(_i, _bb)
        return this
    }
    /**
     * Unique identifier of the record, auto-generated by the system if not provided on create operations.
     * Example: /// Example: 0167f577-e06c-358e-85aa-0a07a730bdd0
     * Constraints: Minimum length = 1, Maximum length = 36
     */
    val id : String?
        get() {
            val o = __offset(4)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val idAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(4, 1)
    fun idInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 4, 1)
    /**
     * Classification marking of the data in IC/CAPCO Portion-marked format.
     * Example: /// Example: U
     * Constraints: Minimum length = 1, Maximum length = 128
     */
    val classificationMarking : String?
        get() {
            val o = __offset(6)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val classificationMarkingAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(6, 1)
    fun classificationMarkingInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 6, 1)
    /**
     * The ID of the Aircraft Status to which this remark applies.
     * Example: /// Example: 388b1f64-ccff-4113-b049-3cf5542c2a42
     * Constraints: Minimum length = 1, Maximum length = 36
     */
    val idAircraftStatus : String?
        get() {
            val o = __offset(8)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val idAircraftStatusAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(8, 1)
    fun idAircraftStatusInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 8, 1)
    /**
     * Unique identifier of the Aircraft Status Remark record from the originating system.
     * Example: /// Example: GDSSBL022307131714250077
     * Constraints: Minimum length = 0, Maximum length = 36
     */
    val altRmkId : String?
        get() {
            val o = __offset(10)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val altRmkIdAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(10, 1)
    fun altRmkIdInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 10, 1)
    /**
     * The name of the remark.
     * Example: /// Example: DISCREPANCY - 202297501
     * Constraints: Minimum length = 0, Maximum length = 64
     */
    val name : String?
        get() {
            val o = __offset(12)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val nameAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(12, 1)
    fun nameInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 12, 1)
    /**
     * The text of the remark.
     * Example: /// Example: Remark text
     * Constraints: Minimum length = 1, Maximum length = 1024
     */
    val text : String?
        get() {
            val o = __offset(14)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val textAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(14, 1)
    fun textInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 14, 1)
    /**
     * Time the remark was created in the originating system in ISO 8601 UTC format with millisecond precision.
     * Example: /// Example: 2024-01-01T15:00:00.123Z
     * Constraints: No constraints specified.
     */
    val timestamp : String?
        get() {
            val o = __offset(16)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val timestampAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(16, 1)
    fun timestampInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 16, 1)
    /**
     * The name or ID of the external user that updated this remark in the originating system.
     * Example: /// Example: JOHN SMITH
     * Constraints: Minimum length = 0, Maximum length = 36
     */
    val lastUpdatedBy : String?
        get() {
            val o = __offset(18)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val lastUpdatedByAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(18, 1)
    fun lastUpdatedByInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 18, 1)
    /**
     * Time the remark was last updated in the originating system in ISO 8601 UTC format with millisecond precision.
     * Example: /// Example: 2024-01-01T16:00:00.123Z
     * Constraints: No constraints specified.
     */
    val lastUpdatedAt : String?
        get() {
            val o = __offset(20)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val lastUpdatedAtAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(20, 1)
    fun lastUpdatedAtInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 20, 1)
    /**
     * Time the row was created in the database, auto-populated by the system.
     * Example: /// Example: 2022-01-01T16:00:00.123Z
     * Constraints: No constraints specified.
     */
    val createdAt : String?
        get() {
            val o = __offset(22)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val createdAtAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(22, 1)
    fun createdAtInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 22, 1)
    /**
     * Application user who created the row in the database, auto-populated by the system.
     * Example: /// Example: some.user
     * Constraints: Minimum length = 1, Maximum length = 64
     */
    val createdBy : String?
        get() {
            val o = __offset(24)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val createdByAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(24, 1)
    fun createdByInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 24, 1)
    /**
     * The source data library from which this record was received. This could be a remote or tactical UDL or another data library. If null, the record should be assumed to have originated from the primary Enterprise UDL.
     * Example: /// Example: AXE
     * Constraints: Minimum length = 0, Maximum length = 64
     */
    val sourceDl : String?
        get() {
            val o = __offset(26)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val sourceDlAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(26, 1)
    fun sourceDlInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 26, 1)
    /**
     * Source of the data.
     * Example: /// Example: Bluestaq
     * Constraints: Minimum length = 1, Maximum length = 64
     */
    val source : String?
        get() {
            val o = __offset(28)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val sourceAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(28, 1)
    fun sourceInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 28, 1)
    /**
     * Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
     * Example: /// Example: THIRD_PARTY_DATASOURCE
     * Constraints: Minimum length = 0, Maximum length = 64
     */
    val origin : String?
        get() {
            val o = __offset(30)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val originAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(30, 1)
    fun originInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 30, 1)
    /**
     * The originating source network on which this record was created, auto-populated by the system.
     * Example: /// Example: OPS1
     * Constraints: Minimum length = 1, Maximum length = 32
     */
    val origNetwork : String?
        get() {
            val o = __offset(32)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val origNetworkAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(32, 1)
    fun origNetworkInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 32, 1)
    /**
     * Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
     * EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
     * REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
     * SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
     * TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
     * Example: /// Example: TEST
     * Constraints: Minimum length = 1, Maximum length = 32
     */
    val dataMode : Byte
        get() {
            val o = __offset(34)
            return if(o != 0) bb.get(o + bb_pos) else 0
        }
    companion object {
        fun validateVersion() = Constants.FLATBUFFERS_24_3_25()
        fun getRootAsAircraftStatusRemark_Ingest(_bb: ByteBuffer): AircraftStatusRemark_Ingest = getRootAsAircraftStatusRemark_Ingest(_bb, AircraftStatusRemark_Ingest())
        fun getRootAsAircraftStatusRemark_Ingest(_bb: ByteBuffer, obj: AircraftStatusRemark_Ingest): AircraftStatusRemark_Ingest {
            _bb.order(ByteOrder.LITTLE_ENDIAN)
            return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb))
        }
        fun AircraftStatusRemark_IngestBufferHasIdentifier(_bb: ByteBuffer) : Boolean = __has_identifier(_bb, "AIRC")
        fun createAircraftStatusRemark_Ingest(builder: FlatBufferBuilder, idOffset: Int, classificationMarkingOffset: Int, idAircraftStatusOffset: Int, altRmkIdOffset: Int, nameOffset: Int, textOffset: Int, timestampOffset: Int, lastUpdatedByOffset: Int, lastUpdatedAtOffset: Int, createdAtOffset: Int, createdByOffset: Int, sourceDlOffset: Int, sourceOffset: Int, originOffset: Int, origNetworkOffset: Int, dataMode: Byte) : Int {
            builder.startTable(16)
            addOrigNetwork(builder, origNetworkOffset)
            addOrigin(builder, originOffset)
            addSource(builder, sourceOffset)
            addSourceDL(builder, sourceDlOffset)
            addCreatedBy(builder, createdByOffset)
            addCreatedAt(builder, createdAtOffset)
            addLastUpdatedAt(builder, lastUpdatedAtOffset)
            addLastUpdatedBy(builder, lastUpdatedByOffset)
            addTimestamp(builder, timestampOffset)
            addText(builder, textOffset)
            addName(builder, nameOffset)
            addAltRmkId(builder, altRmkIdOffset)
            addIdAircraftStatus(builder, idAircraftStatusOffset)
            addClassificationMarking(builder, classificationMarkingOffset)
            addId(builder, idOffset)
            addDataMode(builder, dataMode)
            return endAircraftStatusRemark_Ingest(builder)
        }
        fun startAircraftStatusRemark_Ingest(builder: FlatBufferBuilder) = builder.startTable(16)
        fun addId(builder: FlatBufferBuilder, id: Int) = builder.addOffset(0, id, 0)
        fun addClassificationMarking(builder: FlatBufferBuilder, classificationMarking: Int) = builder.addOffset(1, classificationMarking, 0)
        fun addIdAircraftStatus(builder: FlatBufferBuilder, idAircraftStatus: Int) = builder.addOffset(2, idAircraftStatus, 0)
        fun addAltRmkId(builder: FlatBufferBuilder, altRmkId: Int) = builder.addOffset(3, altRmkId, 0)
        fun addName(builder: FlatBufferBuilder, name: Int) = builder.addOffset(4, name, 0)
        fun addText(builder: FlatBufferBuilder, text: Int) = builder.addOffset(5, text, 0)
        fun addTimestamp(builder: FlatBufferBuilder, timestamp: Int) = builder.addOffset(6, timestamp, 0)
        fun addLastUpdatedBy(builder: FlatBufferBuilder, lastUpdatedBy: Int) = builder.addOffset(7, lastUpdatedBy, 0)
        fun addLastUpdatedAt(builder: FlatBufferBuilder, lastUpdatedAt: Int) = builder.addOffset(8, lastUpdatedAt, 0)
        fun addCreatedAt(builder: FlatBufferBuilder, createdAt: Int) = builder.addOffset(9, createdAt, 0)
        fun addCreatedBy(builder: FlatBufferBuilder, createdBy: Int) = builder.addOffset(10, createdBy, 0)
        fun addSourceDL(builder: FlatBufferBuilder, sourceDl: Int) = builder.addOffset(11, sourceDl, 0)
        fun addSource(builder: FlatBufferBuilder, source: Int) = builder.addOffset(12, source, 0)
        fun addOrigin(builder: FlatBufferBuilder, origin: Int) = builder.addOffset(13, origin, 0)
        fun addOrigNetwork(builder: FlatBufferBuilder, origNetwork: Int) = builder.addOffset(14, origNetwork, 0)
        fun addDataMode(builder: FlatBufferBuilder, dataMode: Byte) = builder.addByte(15, dataMode, 0)
        fun endAircraftStatusRemark_Ingest(builder: FlatBufferBuilder) : Int {
            val o = builder.endTable()
            return o
        }
        fun finishAircraftStatusRemarkIngestBuffer(builder: FlatBufferBuilder, offset: Int) = builder.finish(offset, "AIRC")
        fun finishSizePrefixedAircraftStatusRemark_IngestBuffer(builder: FlatBufferBuilder, offset: Int) = builder.finishSizePrefixed(offset, "AIRC")
    }
}
