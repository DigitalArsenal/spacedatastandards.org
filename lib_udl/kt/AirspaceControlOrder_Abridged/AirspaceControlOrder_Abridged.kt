// automatically generated by the FlatBuffers compiler, do not modify

import com.google.flatbuffers.BaseVector
import com.google.flatbuffers.BooleanVector
import com.google.flatbuffers.ByteVector
import com.google.flatbuffers.Constants
import com.google.flatbuffers.DoubleVector
import com.google.flatbuffers.FlatBufferBuilder
import com.google.flatbuffers.FloatVector
import com.google.flatbuffers.LongVector
import com.google.flatbuffers.StringVector
import com.google.flatbuffers.Struct
import com.google.flatbuffers.Table
import com.google.flatbuffers.UnionVector
import java.nio.ByteBuffer
import java.nio.ByteOrder
import kotlin.math.sign

/**
 * /// Beta Version Airspace Control Order: Contains airspace coordination information and instructions that have been issued by an airspace control authority.
 */
@Suppress("unused")
class AirspaceControlOrder_Abridged : Table() {

    fun __init(_i: Int, _bb: ByteBuffer)  {
        __reset(_i, _bb)
    }
    fun __assign(_i: Int, _bb: ByteBuffer) : AirspaceControlOrder_Abridged {
        __init(_i, _bb)
        return this
    }
    /**
     * Unique identifier of the record, auto-generated by the system if not provided on create operations.
     * Example: /// Example: c44b0a80-9fef-63d9-6267-79037fb93e4c
     * Constraints: Minimum length = 1, Maximum length = 36
     */
    val id : String?
        get() {
            val o = __offset(4)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val idAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(4, 1)
    fun idInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 4, 1)
    /**
     * Classification marking of the data in IC/CAPCO Portion-marked format.
     * Example: /// Example: U
     * Constraints: Minimum length = 1, Maximum length = 128
     */
    val classificationMarking : String?
        get() {
            val o = __offset(6)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val classificationMarkingAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(6, 1)
    fun classificationMarkingInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 6, 1)
    /**
     * Optional URI location in the document repository of the raw file parsed by the system to produce this record. To download the raw file, prepend https://udl-hostname/scs/download?id= to this value.
     * Example: /// Example: EXAMPLE URI
     * Constraints: Minimum length = 0, Maximum length = 256
     */
    val rawFileUri : String?
        get() {
            val o = __offset(8)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val rawFileUriAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(8, 1)
    fun rawFileUriInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 8, 1)
    /**
     * Specifies the code name or nickname assigned to a joint exercise or plan to designate message traffic.
     * Example: /// Example: DESERT WIND
     * Constraints: Minimum length = 1, Maximum length = 64
     */
    val opExName : String?
        get() {
            val o = __offset(10)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val opExNameAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(10, 1)
    fun opExNameInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 10, 1)
    /**
     * The originator of this reference.
     * Example: /// Example: USCENTCOM
     * Constraints: Minimum length = 1, Maximum length = 36
     */
    val originator : String?
        get() {
            val o = __offset(12)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val originatorAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(12, 1)
    fun originatorInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 12, 1)
    /**
     * The start of the effective time period of this airspace control order, in ISO 8601 UTC format with millisecond precision.
     * Example: /// Example: 2024-01-07T13:55:43.123Z
     * Constraints: No constraints specified.
     */
    val startTime : String?
        get() {
            val o = __offset(14)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val startTimeAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(14, 1)
    fun startTimeInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 14, 1)
    /**
     * The end of the effective time period of this airspace control order, in ISO 8601 UTC format with millisecond precision.
     * Example: /// Example: 2024-01-08T13:55:43.123Z
     * Constraints: No constraints specified.
     */
    val stopTime : String?
        get() {
            val o = __offset(16)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val stopTimeAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(16, 1)
    fun stopTimeInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 16, 1)
    /**
     * A qualifier for the end of the effective time period of this airspace control order, such as AFTER, ASOF, NLT, etc. Used with field stopTime to indicate a relative time.
     * Example: /// Example: AFTER
     * Constraints: Minimum length = 0, Maximum length = 8
     */
    val stopQualifier : String?
        get() {
            val o = __offset(18)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val stopQualifierAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(18, 1)
    fun stopQualifierInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 18, 1)
    /**
     * Supplementary name that can be used to further identify exercise nicknames, or to provide the primary nickname of the option or the alternative of an operational plan.
     * Example: /// Example: CONTROL
     * Constraints: Minimum length = 0, Maximum length = 32
     */
    val opExInfo : String?
        get() {
            val o = __offset(20)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val opExInfoAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(20, 1)
    fun opExInfoInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 20, 1)
    /**
     * The secondary supplementary nickname of the option or the alternative of the operational plan or order.
     * Example: /// Example: ORANGE
     * Constraints: Minimum length = 0, Maximum length = 24
     */
    val opExInfoAlt : String?
        get() {
            val o = __offset(22)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val opExInfoAltAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(22, 1)
    fun opExInfoAltInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 22, 1)
    /**
     * The official identifier of the military establishment responsible for the operation plan and the identification number assigned to this plan.
     * Example: /// Example: SACEUR 106
     * Constraints: Minimum length = 0, Maximum length = 36
     */
    val planOrigNum : String?
        get() {
            val o = __offset(24)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val planOrigNumAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(24, 1)
    fun planOrigNumInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 24, 1)
    /**
     * The unique message identifier sequentially assigned by the originator.
     * Example: /// Example: 1201003
     * Constraints: Minimum length = 0, Maximum length = 16
     */
    val serialNum : String?
        get() {
            val o = __offset(26)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val serialNumAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(26, 1)
    fun serialNumInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 26, 1)
    /**
     * The month in which the message originated.
     * Example: /// Example: OCT
     * Constraints: Minimum length = 0, Maximum length = 12
     */
    val month : String?
        get() {
            val o = __offset(28)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val monthAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(28, 1)
    fun monthInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 28, 1)
    /**
     * The qualifier which caveats the message status.
     * Example: /// Example: CHG
     * Constraints: Minimum length = 0, Maximum length = 8
     */
    val qualifier : String?
        get() {
            val o = __offset(30)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val qualifierAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(30, 1)
    fun qualifierInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 30, 1)
    /**
     * The serial number associated with the message qualifier.
     * Example: /// Example: 1
     * Constraints: No constraints specified.
     */
    val qualSn : Int
        get() {
            val o = __offset(32)
            return if(o != 0) bb.getInt(o + bb_pos) else 0
        }
    /**
     * Name of the area of the command for which the ACO is valid.
     * Example: /// Example: FORT BRAGG
     * Constraints: Minimum length = 0, Maximum length = 32
     */
    val areaOfValidity : String?
        get() {
            val o = __offset(34)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val areaOfValidityAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(34, 1)
    fun areaOfValidityInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 34, 1)
    /**
     * The serial number of this airspace control order.
     * Example: /// Example: 27B
     * Constraints: Minimum length = 0, Maximum length = 8
     */
    val acoSerialNum : String?
        get() {
            val o = __offset(36)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val acoSerialNumAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(36, 1)
    fun acoSerialNumInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 36, 1)
    /**
     * Specifies the geodetic datum by which the spatial coordinates of the controlled airspace are calculated.
     * Example: /// Example: EUR-T
     * Constraints: Minimum length = 0, Maximum length = 8
     */
    val geoDatum : String?
        get() {
            val o = __offset(38)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val geoDatumAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(38, 1)
    fun geoDatumInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 38, 1)
    /**
     * Free text information expressed in natural language.
     * Example: /// Example: CHOKE POINTS
     * Constraints: Minimum length = 0, Maximum length = 128
     */
    val acoComments : String?
        get() {
            val o = __offset(40)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val acoCommentsAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(40, 1)
    fun acoCommentsInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 40, 1)
    /**
     * The airspaceControlReferences set provides both USMTF and non-USMTF references for this airspace control order.
     * Example: /// Example: No example provided.
     * Constraints: No constraints specified.
     */
    fun airspaceControlOrderReferences(j: Int) : String? {
        val o = __offset(42)
        return if (o != 0) {
            __string(__vector(o) + j * 4)
        } else {
            null
        }
    }
    val airspaceControlOrderReferencesLength : Int
        get() {
            val o = __offset(42); return if (o != 0) __vector_len(o) else 0
        }
    /**
     * Mandatory nested segment to report multiple airspace control means statuses within an ACOID.
     * Example: /// Example: No example provided.
     * Constraints: No constraints specified.
     */
    fun airspaceControlMeansStatus(j: Int) : String? {
        val o = __offset(44)
        return if (o != 0) {
            __string(__vector(o) + j * 4)
        } else {
            null
        }
    }
    val airspaceControlMeansStatusLength : Int
        get() {
            val o = __offset(44); return if (o != 0) __vector_len(o) else 0
        }
    /**
     * Collection of unique link 16 identifier that will be assigned to a future airspace control means.
     * Example: /// Example: ['A2467', 'A3466', 'AA232']
     * Constraints: No constraints specified.
     */
    fun undLnkTrk(j: Int) : String? {
        val o = __offset(46)
        return if (o != 0) {
            __string(__vector(o) + j * 4)
        } else {
            null
        }
    }
    val undLnkTrkLength : Int
        get() {
            val o = __offset(46); return if (o != 0) __vector_len(o) else 0
        }
    /**
     * Markings defining the source material or the original classification authority for the ACO message.
     * Example: /// Example: ORIG:USJFCOM
     * Constraints: Minimum length = 0, Maximum length = 64
     */
    val classSource : String?
        get() {
            val o = __offset(48)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val classSourceAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(48, 1)
    fun classSourceInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 48, 1)
    /**
     * Mandatory if classSource uses the "IORIG" designator. Must be a REASON FOR CLASSIFICATION code.
     * Example: /// Example: ['15C', '10C']
     * Constraints: No constraints specified.
     */
    fun classReason(j: Int) : String? {
        val o = __offset(50)
        return if (o != 0) {
            __string(__vector(o) + j * 4)
        } else {
            null
        }
    }
    val classReasonLength : Int
        get() {
            val o = __offset(50); return if (o != 0) __vector_len(o) else 0
        }
    /**
     * Markings providing the literal guidance or date for downgrading or declassifying the airspace control order. Manditory if declassExemptionCode is nul.
     * Example: /// Example: ['NST:AT EXERCISE ENDEX', 'DATE:25NOV1997']
     * Constraints: No constraints specified.
     */
    fun downgradeInsDate(j: Int) : String? {
        val o = __offset(52)
        return if (o != 0) {
            __string(__vector(o) + j * 4)
        } else {
            null
        }
    }
    val downgradeInsDateLength : Int
        get() {
            val o = __offset(52); return if (o != 0) __vector_len(o) else 0
        }
    /**
     * Coded entries that provide justification for exemption from automatic downgrading or declassification of the airspace control order.
     * Example: /// Example: ['X1', 'X2']
     * Constraints: No constraints specified.
     */
    fun declassExemptionCode(j: Int) : String? {
        val o = __offset(54)
        return if (o != 0) {
            __string(__vector(o) + j * 4)
        } else {
            null
        }
    }
    val declassExemptionCodeLength : Int
        get() {
            val o = __offset(54); return if (o != 0) __vector_len(o) else 0
        }
    /**
     * Time the row was created in the database, auto-populated by the system.
     * Example: /// Example: 2018-01-01T16:00:00.123Z
     * Constraints: No constraints specified.
     */
    val createdAt : String?
        get() {
            val o = __offset(56)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val createdAtAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(56, 1)
    fun createdAtInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 56, 1)
    /**
     * Application user who created the row in the database, auto-populated by the system.
     * Example: /// Example: some.user
     * Constraints: Minimum length = 1, Maximum length = 64
     */
    val createdBy : String?
        get() {
            val o = __offset(58)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val createdByAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(58, 1)
    fun createdByInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 58, 1)
    /**
     * The source data library from which this record was received. This could be a remote or tactical UDL or another data library. If null, the record should be assumed to have originated from the primary Enterprise UDL.
     * Example: /// Example: AXE
     * Constraints: Minimum length = 0, Maximum length = 64
     */
    val sourceDl : String?
        get() {
            val o = __offset(60)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val sourceDlAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(60, 1)
    fun sourceDlInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 60, 1)
    /**
     * Source of the data.
     * Example: /// Example: Bluestaq
     * Constraints: Minimum length = 1, Maximum length = 64
     */
    val source : String?
        get() {
            val o = __offset(62)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val sourceAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(62, 1)
    fun sourceInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 62, 1)
    /**
     * Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
     * Example: /// Example: THIRD_PARTY_DATASOURCE
     * Constraints: Minimum length = 0, Maximum length = 64
     */
    val origin : String?
        get() {
            val o = __offset(64)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val originAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(64, 1)
    fun originInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 64, 1)
    /**
     * The originating source network on which this record was created, auto-populated by the system.
     * Example: /// Example: ORIG
     * Constraints: Minimum length = 0, Maximum length = 32
     */
    val origNetwork : String?
        get() {
            val o = __offset(66)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val origNetworkAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(66, 1)
    fun origNetworkInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 66, 1)
    /**
     * Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
     * EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
     * REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
     * SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
     * TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
     * Example: /// Example: TEST
     * Constraints: Minimum length = 1, Maximum length = 32
     */
    val dataMode : Byte
        get() {
            val o = __offset(68)
            return if(o != 0) bb.get(o + bb_pos) else 0
        }
    companion object {
        fun validateVersion() = Constants.FLATBUFFERS_24_3_25()
        fun getRootAsAirspaceControlOrder_Abridged(_bb: ByteBuffer): AirspaceControlOrder_Abridged = getRootAsAirspaceControlOrder_Abridged(_bb, AirspaceControlOrder_Abridged())
        fun getRootAsAirspaceControlOrder_Abridged(_bb: ByteBuffer, obj: AirspaceControlOrder_Abridged): AirspaceControlOrder_Abridged {
            _bb.order(ByteOrder.LITTLE_ENDIAN)
            return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb))
        }
        fun AirspaceControlOrder_AbridgedBufferHasIdentifier(_bb: ByteBuffer) : Boolean = __has_identifier(_bb, "AIRS")
        fun createAirspaceControlOrder_Abridged(builder: FlatBufferBuilder, idOffset: Int, classificationMarkingOffset: Int, rawFileUriOffset: Int, opExNameOffset: Int, originatorOffset: Int, startTimeOffset: Int, stopTimeOffset: Int, stopQualifierOffset: Int, opExInfoOffset: Int, opExInfoAltOffset: Int, planOrigNumOffset: Int, serialNumOffset: Int, monthOffset: Int, qualifierOffset: Int, qualSn: Int, areaOfValidityOffset: Int, acoSerialNumOffset: Int, geoDatumOffset: Int, acoCommentsOffset: Int, airspaceControlOrderReferencesOffset: Int, airspaceControlMeansStatusOffset: Int, undLnkTrkOffset: Int, classSourceOffset: Int, classReasonOffset: Int, downgradeInsDateOffset: Int, declassExemptionCodeOffset: Int, createdAtOffset: Int, createdByOffset: Int, sourceDlOffset: Int, sourceOffset: Int, originOffset: Int, origNetworkOffset: Int, dataMode: Byte) : Int {
            builder.startTable(33)
            addOrigNetwork(builder, origNetworkOffset)
            addOrigin(builder, originOffset)
            addSource(builder, sourceOffset)
            addSourceDL(builder, sourceDlOffset)
            addCreatedBy(builder, createdByOffset)
            addCreatedAt(builder, createdAtOffset)
            addDeclassExemptionCode(builder, declassExemptionCodeOffset)
            addDowngradeInsDate(builder, downgradeInsDateOffset)
            addClassReason(builder, classReasonOffset)
            addClassSource(builder, classSourceOffset)
            addUndLnkTrk(builder, undLnkTrkOffset)
            addAirspaceControlMeansStatus(builder, airspaceControlMeansStatusOffset)
            addAirspaceControlOrderReferences(builder, airspaceControlOrderReferencesOffset)
            addAcoComments(builder, acoCommentsOffset)
            addGeoDatum(builder, geoDatumOffset)
            addAcoSerialNum(builder, acoSerialNumOffset)
            addAreaOfValidity(builder, areaOfValidityOffset)
            addQualSN(builder, qualSn)
            addQualifier(builder, qualifierOffset)
            addMonth(builder, monthOffset)
            addSerialNum(builder, serialNumOffset)
            addPlanOrigNum(builder, planOrigNumOffset)
            addOpExInfoAlt(builder, opExInfoAltOffset)
            addOpExInfo(builder, opExInfoOffset)
            addStopQualifier(builder, stopQualifierOffset)
            addStopTime(builder, stopTimeOffset)
            addStartTime(builder, startTimeOffset)
            addOriginator(builder, originatorOffset)
            addOpExName(builder, opExNameOffset)
            addRawFileURI(builder, rawFileUriOffset)
            addClassificationMarking(builder, classificationMarkingOffset)
            addId(builder, idOffset)
            addDataMode(builder, dataMode)
            return endAirspaceControlOrder_Abridged(builder)
        }
        fun startAirspaceControlOrder_Abridged(builder: FlatBufferBuilder) = builder.startTable(33)
        fun addId(builder: FlatBufferBuilder, id: Int) = builder.addOffset(0, id, 0)
        fun addClassificationMarking(builder: FlatBufferBuilder, classificationMarking: Int) = builder.addOffset(1, classificationMarking, 0)
        fun addRawFileURI(builder: FlatBufferBuilder, rawFileUri: Int) = builder.addOffset(2, rawFileUri, 0)
        fun addOpExName(builder: FlatBufferBuilder, opExName: Int) = builder.addOffset(3, opExName, 0)
        fun addOriginator(builder: FlatBufferBuilder, originator: Int) = builder.addOffset(4, originator, 0)
        fun addStartTime(builder: FlatBufferBuilder, startTime: Int) = builder.addOffset(5, startTime, 0)
        fun addStopTime(builder: FlatBufferBuilder, stopTime: Int) = builder.addOffset(6, stopTime, 0)
        fun addStopQualifier(builder: FlatBufferBuilder, stopQualifier: Int) = builder.addOffset(7, stopQualifier, 0)
        fun addOpExInfo(builder: FlatBufferBuilder, opExInfo: Int) = builder.addOffset(8, opExInfo, 0)
        fun addOpExInfoAlt(builder: FlatBufferBuilder, opExInfoAlt: Int) = builder.addOffset(9, opExInfoAlt, 0)
        fun addPlanOrigNum(builder: FlatBufferBuilder, planOrigNum: Int) = builder.addOffset(10, planOrigNum, 0)
        fun addSerialNum(builder: FlatBufferBuilder, serialNum: Int) = builder.addOffset(11, serialNum, 0)
        fun addMonth(builder: FlatBufferBuilder, month: Int) = builder.addOffset(12, month, 0)
        fun addQualifier(builder: FlatBufferBuilder, qualifier: Int) = builder.addOffset(13, qualifier, 0)
        fun addQualSN(builder: FlatBufferBuilder, qualSn: Int) = builder.addInt(14, qualSn, 0)
        fun addAreaOfValidity(builder: FlatBufferBuilder, areaOfValidity: Int) = builder.addOffset(15, areaOfValidity, 0)
        fun addAcoSerialNum(builder: FlatBufferBuilder, acoSerialNum: Int) = builder.addOffset(16, acoSerialNum, 0)
        fun addGeoDatum(builder: FlatBufferBuilder, geoDatum: Int) = builder.addOffset(17, geoDatum, 0)
        fun addAcoComments(builder: FlatBufferBuilder, acoComments: Int) = builder.addOffset(18, acoComments, 0)
        fun addAirspaceControlOrderReferences(builder: FlatBufferBuilder, airspaceControlOrderReferences: Int) = builder.addOffset(19, airspaceControlOrderReferences, 0)
        fun createAirspaceControlOrderReferencesVector(builder: FlatBufferBuilder, data: IntArray) : Int {
            builder.startVector(4, data.size, 4)
            for (i in data.size - 1 downTo 0) {
                builder.addOffset(data[i])
            }
            return builder.endVector()
        }
        fun startAirspaceControlOrderReferencesVector(builder: FlatBufferBuilder, numElems: Int) = builder.startVector(4, numElems, 4)
        fun addAirspaceControlMeansStatus(builder: FlatBufferBuilder, airspaceControlMeansStatus: Int) = builder.addOffset(20, airspaceControlMeansStatus, 0)
        fun createAirspaceControlMeansStatusVector(builder: FlatBufferBuilder, data: IntArray) : Int {
            builder.startVector(4, data.size, 4)
            for (i in data.size - 1 downTo 0) {
                builder.addOffset(data[i])
            }
            return builder.endVector()
        }
        fun startAirspaceControlMeansStatusVector(builder: FlatBufferBuilder, numElems: Int) = builder.startVector(4, numElems, 4)
        fun addUndLnkTrk(builder: FlatBufferBuilder, undLnkTrk: Int) = builder.addOffset(21, undLnkTrk, 0)
        fun createUndLnkTrkVector(builder: FlatBufferBuilder, data: IntArray) : Int {
            builder.startVector(4, data.size, 4)
            for (i in data.size - 1 downTo 0) {
                builder.addOffset(data[i])
            }
            return builder.endVector()
        }
        fun startUndLnkTrkVector(builder: FlatBufferBuilder, numElems: Int) = builder.startVector(4, numElems, 4)
        fun addClassSource(builder: FlatBufferBuilder, classSource: Int) = builder.addOffset(22, classSource, 0)
        fun addClassReason(builder: FlatBufferBuilder, classReason: Int) = builder.addOffset(23, classReason, 0)
        fun createClassReasonVector(builder: FlatBufferBuilder, data: IntArray) : Int {
            builder.startVector(4, data.size, 4)
            for (i in data.size - 1 downTo 0) {
                builder.addOffset(data[i])
            }
            return builder.endVector()
        }
        fun startClassReasonVector(builder: FlatBufferBuilder, numElems: Int) = builder.startVector(4, numElems, 4)
        fun addDowngradeInsDate(builder: FlatBufferBuilder, downgradeInsDate: Int) = builder.addOffset(24, downgradeInsDate, 0)
        fun createDowngradeInsDateVector(builder: FlatBufferBuilder, data: IntArray) : Int {
            builder.startVector(4, data.size, 4)
            for (i in data.size - 1 downTo 0) {
                builder.addOffset(data[i])
            }
            return builder.endVector()
        }
        fun startDowngradeInsDateVector(builder: FlatBufferBuilder, numElems: Int) = builder.startVector(4, numElems, 4)
        fun addDeclassExemptionCode(builder: FlatBufferBuilder, declassExemptionCode: Int) = builder.addOffset(25, declassExemptionCode, 0)
        fun createDeclassExemptionCodeVector(builder: FlatBufferBuilder, data: IntArray) : Int {
            builder.startVector(4, data.size, 4)
            for (i in data.size - 1 downTo 0) {
                builder.addOffset(data[i])
            }
            return builder.endVector()
        }
        fun startDeclassExemptionCodeVector(builder: FlatBufferBuilder, numElems: Int) = builder.startVector(4, numElems, 4)
        fun addCreatedAt(builder: FlatBufferBuilder, createdAt: Int) = builder.addOffset(26, createdAt, 0)
        fun addCreatedBy(builder: FlatBufferBuilder, createdBy: Int) = builder.addOffset(27, createdBy, 0)
        fun addSourceDL(builder: FlatBufferBuilder, sourceDl: Int) = builder.addOffset(28, sourceDl, 0)
        fun addSource(builder: FlatBufferBuilder, source: Int) = builder.addOffset(29, source, 0)
        fun addOrigin(builder: FlatBufferBuilder, origin: Int) = builder.addOffset(30, origin, 0)
        fun addOrigNetwork(builder: FlatBufferBuilder, origNetwork: Int) = builder.addOffset(31, origNetwork, 0)
        fun addDataMode(builder: FlatBufferBuilder, dataMode: Byte) = builder.addByte(32, dataMode, 0)
        fun endAirspaceControlOrder_Abridged(builder: FlatBufferBuilder) : Int {
            val o = builder.endTable()
            return o
        }
        fun finishAirspaceControlOrderAbridgedBuffer(builder: FlatBufferBuilder, offset: Int) = builder.finish(offset, "AIRS")
        fun finishSizePrefixedAirspaceControlOrder_AbridgedBuffer(builder: FlatBufferBuilder, offset: Int) = builder.finishSizePrefixed(offset, "AIRS")
    }
}
