// automatically generated by the FlatBuffers compiler, do not modify

import com.google.flatbuffers.BaseVector
import com.google.flatbuffers.BooleanVector
import com.google.flatbuffers.ByteVector
import com.google.flatbuffers.Constants
import com.google.flatbuffers.DoubleVector
import com.google.flatbuffers.FlatBufferBuilder
import com.google.flatbuffers.FloatVector
import com.google.flatbuffers.LongVector
import com.google.flatbuffers.StringVector
import com.google.flatbuffers.Struct
import com.google.flatbuffers.Table
import com.google.flatbuffers.UnionVector
import java.nio.ByteBuffer
import java.nio.ByteOrder
import kotlin.math.sign

/**
 * /// These services provide operations for posting and querying attitude of on-orbit objects.  Attitude describes the orientation of an object, which can be represented by quaternions or euler angles.  The AttitudeSet ID (asId) identifies the 'AttitudeSet' record which contains details of the underlying data as well as a collection of attitude points. Points must be retrieved by first identifying a desired AttitudeSet and pulling its points by that AttitudeSet ID 'asId'.
 */
@Suppress("unused")
class AttitudeData_Ingest : Table() {

    fun __init(_i: Int, _bb: ByteBuffer)  {
        __reset(_i, _bb)
    }
    fun __assign(_i: Int, _bb: ByteBuffer) : AttitudeData_Ingest {
        __init(_i, _bb)
        return this
    }
    /**
     * Unique identifier of the record, auto-generated by the system.
     * Example: /// Example: ATTITUDEDATA-ID
     * Constraints: Minimum length = 1, Maximum length = 36
     */
    val id : String?
        get() {
            val o = __offset(4)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val idAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(4, 1)
    fun idInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 4, 1)
    /**
     * Classification marking of the data in IC/CAPCO Portion-marked format.
     * Example: /// Example: U
     * Constraints: Minimum length = 1, Maximum length = 128
     */
    val classificationMarking : String?
        get() {
            val o = __offset(6)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val classificationMarkingAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(6, 1)
    fun classificationMarkingInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 6, 1)
    /**
     * Unique identifier of the parent AttitudeSet associated with this record.
     * Example: /// Example: 773c9887-e931-42eb-8155-f0fbd227b235
     * Constraints: Minimum length = 1, Maximum length = 36
     */
    val asId : String?
        get() {
            val o = __offset(8)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val asIdAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(8, 1)
    fun asIdInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 8, 1)
    /**
     * Unique identifier of the on-orbit satellite to which this attitude record applies.
     * Example: /// Example: 41947
     * Constraints: Minimum length = 0, Maximum length = 36
     */
    val idOnOrbit : String?
        get() {
            val o = __offset(10)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val idOnOrbitAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(10, 1)
    fun idOnOrbitInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 10, 1)
    /**
     * Satellite/catalog number of the on-orbit object to which this attitude record applies.
     * Example: /// Example: 41947
     * Constraints: No constraints specified.
     */
    val satNo : Int
        get() {
            val o = __offset(12)
            return if(o != 0) bb.getInt(o + bb_pos) else 0
        }
    /**
     * Optional identifier provided by the record source to indicate the target object of this attitude record. This may be an internal identifier and not necessarily map to a valid satellite number.
     * Example: /// Example: D6593
     * Constraints: Minimum length = 0, Maximum length = 36
     */
    val origObjectId : String?
        get() {
            val o = __offset(14)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val origObjectIdAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(14, 1)
    fun origObjectIdInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 14, 1)
    /**
     * Time associated with this attitude record, in ISO 8601 UTC format, with microsecond precision.
     * Example: /// Example: 2022-03-07T14:51:39.653043Z
     * Constraints: No constraints specified.
     */
    val ts : String?
        get() {
            val o = __offset(16)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val tsAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(16, 1)
    fun tsInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 16, 1)
    /**
     * Label specifying type of rotational motion of target.
     * Example: /// Example: PROSOL_MOTION
     * Constraints: Minimum length = 0, Maximum length = 36
     */
    val motionType : String?
        get() {
            val o = __offset(18)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val motionTypeAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(18, 1)
    fun motionTypeInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 18, 1)
    /**
     * Quaternion vector component 1.
     * Example: /// Example: 0.0312
     * Constraints: No constraints specified.
     */
    val q1 : Double
        get() {
            val o = __offset(20)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Quaternion vector component 2.
     * Example: /// Example: 0.7854
     * Constraints: No constraints specified.
     */
    val q2 : Double
        get() {
            val o = __offset(22)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Quaternion vector component 3.
     * Example: /// Example: 0.3916
     * Constraints: No constraints specified.
     */
    val q3 : Double
        get() {
            val o = __offset(24)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Quaternion scalar component.
     * Example: /// Example: 0.4783
     * Constraints: No constraints specified.
     */
    val qc : Double
        get() {
            val o = __offset(26)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Derivative of quaternion vector component 1.
     * Example: /// Example: 0.0043
     * Constraints: No constraints specified.
     */
    val q1Dot : Double
        get() {
            val o = __offset(28)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Derivative of quaternion vector component 2.
     * Example: /// Example: 0.06
     * Constraints: No constraints specified.
     */
    val q2Dot : Double
        get() {
            val o = __offset(30)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Derivative of quaternion vector component 3.
     * Example: /// Example: 0.499
     * Constraints: No constraints specified.
     */
    val q3Dot : Double
        get() {
            val o = __offset(32)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Derivative of quaternion scalar component.
     * Example: /// Example: 0.011
     * Constraints: No constraints specified.
     */
    val qcDot : Double
        get() {
            val o = __offset(34)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Array of X body rotation Euler angle(s), in degrees (-180 to 180).  For repeated axis rotations, the array elements should be placed in the order that the angles apply in the sequence.
     * Example: /// Example: [139.753]
     * Constraints: No constraints specified.
     */
    fun xAngle(j: Int) : String? {
        val o = __offset(36)
        return if (o != 0) {
            __string(__vector(o) + j * 4)
        } else {
            null
        }
    }
    val xAngleLength : Int
        get() {
            val o = __offset(36); return if (o != 0) __vector_len(o) else 0
        }
    /**
     * Array of Y body rotation Euler angle(s), in degrees (-180 to 180).  For repeated axis rotations, the array elements should be placed in the order that the angles apply in the sequence.
     * Example: /// Example: [25.066]
     * Constraints: No constraints specified.
     */
    fun yAngle(j: Int) : String? {
        val o = __offset(38)
        return if (o != 0) {
            __string(__vector(o) + j * 4)
        } else {
            null
        }
    }
    val yAngleLength : Int
        get() {
            val o = __offset(38); return if (o != 0) __vector_len(o) else 0
        }
    /**
     * Array of Z body rotation Euler angle(s), in degrees (-180 to 180).  For repeated axis rotations, the array elements should be placed in the order that the angles apply in the sequence.
     * Example: /// Example: [-53.368]
     * Constraints: No constraints specified.
     */
    fun zAngle(j: Int) : String? {
        val o = __offset(40)
        return if (o != 0) {
            __string(__vector(o) + j * 4)
        } else {
            null
        }
    }
    val zAngleLength : Int
        get() {
            val o = __offset(40); return if (o != 0) __vector_len(o) else 0
        }
    /**
     * Array of X body rotation rate(s), in degrees per second.  For repeated axis rotations, the array elements should be placed in the order that the rates apply in the sequence.  Attitude rates are expressed in frame1 with respect to frame2.
     * Example: /// Example: [0.105]
     * Constraints: No constraints specified.
     */
    fun xRate(j: Int) : String? {
        val o = __offset(42)
        return if (o != 0) {
            __string(__vector(o) + j * 4)
        } else {
            null
        }
    }
    val xRateLength : Int
        get() {
            val o = __offset(42); return if (o != 0) __vector_len(o) else 0
        }
    /**
     * Array of Y body rotation rate(s), in degrees per second.  For repeated axis rotations, the array elements should be placed in the order that the rates apply in the sequence.  Attitude rates are expressed in frame1 with respect to frame2.
     * Example: /// Example: [0.032]
     * Constraints: No constraints specified.
     */
    fun yRate(j: Int) : String? {
        val o = __offset(44)
        return if (o != 0) {
            __string(__vector(o) + j * 4)
        } else {
            null
        }
    }
    val yRateLength : Int
        get() {
            val o = __offset(44); return if (o != 0) __vector_len(o) else 0
        }
    /**
     * Array of Z body rotation rate(s), in degrees per second.  For repeated axis rotations, the array elements should be placed in the order that the rates apply in the sequence  Attitude rates are expressed in frame1 with respect to frame2.
     * Example: /// Example: [0.022]
     * Constraints: No constraints specified.
     */
    fun zRate(j: Int) : String? {
        val o = __offset(46)
        return if (o != 0) {
            __string(__vector(o) + j * 4)
        } else {
            null
        }
    }
    val zRateLength : Int
        get() {
            val o = __offset(46); return if (o != 0) __vector_len(o) else 0
        }
    /**
     * Precession axis right ascension (ECI J2000 frame) in degrees.
     * Example: /// Example: -173.75
     * Constraints: No constraints specified.
     */
    val ra : Double
        get() {
            val o = __offset(48)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Precession axis declination (ECI J2000 frame) in degrees.
     * Example: /// Example: 0.799
     * Constraints: No constraints specified.
     */
    val declination : Double
        get() {
            val o = __offset(50)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Coning angle in degrees.
     * Example: /// Example: 0.1
     * Constraints: No constraints specified.
     */
    val coningAngle : Double
        get() {
            val o = __offset(52)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Precession period in seconds.
     * Example: /// Example: 36.1
     * Constraints: No constraints specified.
     */
    val precPeriod : Double
        get() {
            val o = __offset(54)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Spin period in seconds.
     * Example: /// Example: 0.1
     * Constraints: No constraints specified.
     */
    val spinPeriod : Double
        get() {
            val o = __offset(56)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    /**
     * Time the row was created in the database, auto-populated by the system.
     * Example: /// Example: 2022-07-05T12:00:00.123Z
     * Constraints: No constraints specified.
     */
    val createdAt : String?
        get() {
            val o = __offset(58)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val createdAtAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(58, 1)
    fun createdAtInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 58, 1)
    /**
     * Application user who created the row in the database, auto-populated by the system.
     * Example: /// Example: some.user
     * Constraints: Minimum length = 1, Maximum length = 64
     */
    val createdBy : String?
        get() {
            val o = __offset(60)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val createdByAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(60, 1)
    fun createdByInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 60, 1)
    /**
     * Source of the data.
     * Example: /// Example: Bluestaq
     * Constraints: Minimum length = 1, Maximum length = 36
     */
    val source : String?
        get() {
            val o = __offset(62)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val sourceAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(62, 1)
    fun sourceInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 62, 1)
    /**
     * Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
     * Example: /// Example: THIRD_PARTY_DATASOURCE
     * Constraints: Minimum length = 0, Maximum length = 64
     */
    val origin : String?
        get() {
            val o = __offset(64)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val originAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(64, 1)
    fun originInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 64, 1)
    /**
     * Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
     * EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
     * REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
     * SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
     * TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
     * Example: /// Example: TEST
     * Constraints: Minimum length = 1, Maximum length = 32
     */
    val dataMode : Byte
        get() {
            val o = __offset(66)
            return if(o != 0) bb.get(o + bb_pos) else 0
        }
    /**
     * The originating source network on which this record was created, auto-populated by the system.
     * Example: /// Example: ORIG
     * Constraints: Minimum length = 1, Maximum length = 32
     */
    val origNetwork : String?
        get() {
            val o = __offset(68)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val origNetworkAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(68, 1)
    fun origNetworkInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 68, 1)
    companion object {
        fun validateVersion() = Constants.FLATBUFFERS_24_3_25()
        fun getRootAsAttitudeData_Ingest(_bb: ByteBuffer): AttitudeData_Ingest = getRootAsAttitudeData_Ingest(_bb, AttitudeData_Ingest())
        fun getRootAsAttitudeData_Ingest(_bb: ByteBuffer, obj: AttitudeData_Ingest): AttitudeData_Ingest {
            _bb.order(ByteOrder.LITTLE_ENDIAN)
            return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb))
        }
        fun AttitudeData_IngestBufferHasIdentifier(_bb: ByteBuffer) : Boolean = __has_identifier(_bb, "ATTI")
        fun createAttitudeData_Ingest(builder: FlatBufferBuilder, idOffset: Int, classificationMarkingOffset: Int, asIdOffset: Int, idOnOrbitOffset: Int, satNo: Int, origObjectIdOffset: Int, tsOffset: Int, motionTypeOffset: Int, q1: Double, q2: Double, q3: Double, qc: Double, q1Dot: Double, q2Dot: Double, q3Dot: Double, qcDot: Double, xAngleOffset: Int, yAngleOffset: Int, zAngleOffset: Int, xRateOffset: Int, yRateOffset: Int, zRateOffset: Int, ra: Double, declination: Double, coningAngle: Double, precPeriod: Double, spinPeriod: Double, createdAtOffset: Int, createdByOffset: Int, sourceOffset: Int, originOffset: Int, dataMode: Byte, origNetworkOffset: Int) : Int {
            builder.startTable(33)
            addSpinPeriod(builder, spinPeriod)
            addPrecPeriod(builder, precPeriod)
            addConingAngle(builder, coningAngle)
            addDeclination(builder, declination)
            addRa(builder, ra)
            addQcDot(builder, qcDot)
            addQ3Dot(builder, q3Dot)
            addQ2Dot(builder, q2Dot)
            addQ1Dot(builder, q1Dot)
            addQc(builder, qc)
            addQ3(builder, q3)
            addQ2(builder, q2)
            addQ1(builder, q1)
            addOrigNetwork(builder, origNetworkOffset)
            addOrigin(builder, originOffset)
            addSource(builder, sourceOffset)
            addCreatedBy(builder, createdByOffset)
            addCreatedAt(builder, createdAtOffset)
            addZRate(builder, zRateOffset)
            addYRate(builder, yRateOffset)
            addXRate(builder, xRateOffset)
            addZAngle(builder, zAngleOffset)
            addYAngle(builder, yAngleOffset)
            addXAngle(builder, xAngleOffset)
            addMotionType(builder, motionTypeOffset)
            addTs(builder, tsOffset)
            addOrigObjectId(builder, origObjectIdOffset)
            addSatNo(builder, satNo)
            addIdOnOrbit(builder, idOnOrbitOffset)
            addAsId(builder, asIdOffset)
            addClassificationMarking(builder, classificationMarkingOffset)
            addId(builder, idOffset)
            addDataMode(builder, dataMode)
            return endAttitudeData_Ingest(builder)
        }
        fun startAttitudeData_Ingest(builder: FlatBufferBuilder) = builder.startTable(33)
        fun addId(builder: FlatBufferBuilder, id: Int) = builder.addOffset(0, id, 0)
        fun addClassificationMarking(builder: FlatBufferBuilder, classificationMarking: Int) = builder.addOffset(1, classificationMarking, 0)
        fun addAsId(builder: FlatBufferBuilder, asId: Int) = builder.addOffset(2, asId, 0)
        fun addIdOnOrbit(builder: FlatBufferBuilder, idOnOrbit: Int) = builder.addOffset(3, idOnOrbit, 0)
        fun addSatNo(builder: FlatBufferBuilder, satNo: Int) = builder.addInt(4, satNo, 0)
        fun addOrigObjectId(builder: FlatBufferBuilder, origObjectId: Int) = builder.addOffset(5, origObjectId, 0)
        fun addTs(builder: FlatBufferBuilder, ts: Int) = builder.addOffset(6, ts, 0)
        fun addMotionType(builder: FlatBufferBuilder, motionType: Int) = builder.addOffset(7, motionType, 0)
        fun addQ1(builder: FlatBufferBuilder, q1: Double) = builder.addDouble(8, q1, 0.0)
        fun addQ2(builder: FlatBufferBuilder, q2: Double) = builder.addDouble(9, q2, 0.0)
        fun addQ3(builder: FlatBufferBuilder, q3: Double) = builder.addDouble(10, q3, 0.0)
        fun addQc(builder: FlatBufferBuilder, qc: Double) = builder.addDouble(11, qc, 0.0)
        fun addQ1Dot(builder: FlatBufferBuilder, q1Dot: Double) = builder.addDouble(12, q1Dot, 0.0)
        fun addQ2Dot(builder: FlatBufferBuilder, q2Dot: Double) = builder.addDouble(13, q2Dot, 0.0)
        fun addQ3Dot(builder: FlatBufferBuilder, q3Dot: Double) = builder.addDouble(14, q3Dot, 0.0)
        fun addQcDot(builder: FlatBufferBuilder, qcDot: Double) = builder.addDouble(15, qcDot, 0.0)
        fun addXAngle(builder: FlatBufferBuilder, xAngle: Int) = builder.addOffset(16, xAngle, 0)
        fun createXAngleVector(builder: FlatBufferBuilder, data: IntArray) : Int {
            builder.startVector(4, data.size, 4)
            for (i in data.size - 1 downTo 0) {
                builder.addOffset(data[i])
            }
            return builder.endVector()
        }
        fun startXAngleVector(builder: FlatBufferBuilder, numElems: Int) = builder.startVector(4, numElems, 4)
        fun addYAngle(builder: FlatBufferBuilder, yAngle: Int) = builder.addOffset(17, yAngle, 0)
        fun createYAngleVector(builder: FlatBufferBuilder, data: IntArray) : Int {
            builder.startVector(4, data.size, 4)
            for (i in data.size - 1 downTo 0) {
                builder.addOffset(data[i])
            }
            return builder.endVector()
        }
        fun startYAngleVector(builder: FlatBufferBuilder, numElems: Int) = builder.startVector(4, numElems, 4)
        fun addZAngle(builder: FlatBufferBuilder, zAngle: Int) = builder.addOffset(18, zAngle, 0)
        fun createZAngleVector(builder: FlatBufferBuilder, data: IntArray) : Int {
            builder.startVector(4, data.size, 4)
            for (i in data.size - 1 downTo 0) {
                builder.addOffset(data[i])
            }
            return builder.endVector()
        }
        fun startZAngleVector(builder: FlatBufferBuilder, numElems: Int) = builder.startVector(4, numElems, 4)
        fun addXRate(builder: FlatBufferBuilder, xRate: Int) = builder.addOffset(19, xRate, 0)
        fun createXRateVector(builder: FlatBufferBuilder, data: IntArray) : Int {
            builder.startVector(4, data.size, 4)
            for (i in data.size - 1 downTo 0) {
                builder.addOffset(data[i])
            }
            return builder.endVector()
        }
        fun startXRateVector(builder: FlatBufferBuilder, numElems: Int) = builder.startVector(4, numElems, 4)
        fun addYRate(builder: FlatBufferBuilder, yRate: Int) = builder.addOffset(20, yRate, 0)
        fun createYRateVector(builder: FlatBufferBuilder, data: IntArray) : Int {
            builder.startVector(4, data.size, 4)
            for (i in data.size - 1 downTo 0) {
                builder.addOffset(data[i])
            }
            return builder.endVector()
        }
        fun startYRateVector(builder: FlatBufferBuilder, numElems: Int) = builder.startVector(4, numElems, 4)
        fun addZRate(builder: FlatBufferBuilder, zRate: Int) = builder.addOffset(21, zRate, 0)
        fun createZRateVector(builder: FlatBufferBuilder, data: IntArray) : Int {
            builder.startVector(4, data.size, 4)
            for (i in data.size - 1 downTo 0) {
                builder.addOffset(data[i])
            }
            return builder.endVector()
        }
        fun startZRateVector(builder: FlatBufferBuilder, numElems: Int) = builder.startVector(4, numElems, 4)
        fun addRa(builder: FlatBufferBuilder, ra: Double) = builder.addDouble(22, ra, 0.0)
        fun addDeclination(builder: FlatBufferBuilder, declination: Double) = builder.addDouble(23, declination, 0.0)
        fun addConingAngle(builder: FlatBufferBuilder, coningAngle: Double) = builder.addDouble(24, coningAngle, 0.0)
        fun addPrecPeriod(builder: FlatBufferBuilder, precPeriod: Double) = builder.addDouble(25, precPeriod, 0.0)
        fun addSpinPeriod(builder: FlatBufferBuilder, spinPeriod: Double) = builder.addDouble(26, spinPeriod, 0.0)
        fun addCreatedAt(builder: FlatBufferBuilder, createdAt: Int) = builder.addOffset(27, createdAt, 0)
        fun addCreatedBy(builder: FlatBufferBuilder, createdBy: Int) = builder.addOffset(28, createdBy, 0)
        fun addSource(builder: FlatBufferBuilder, source: Int) = builder.addOffset(29, source, 0)
        fun addOrigin(builder: FlatBufferBuilder, origin: Int) = builder.addOffset(30, origin, 0)
        fun addDataMode(builder: FlatBufferBuilder, dataMode: Byte) = builder.addByte(31, dataMode, 0)
        fun addOrigNetwork(builder: FlatBufferBuilder, origNetwork: Int) = builder.addOffset(32, origNetwork, 0)
        fun endAttitudeData_Ingest(builder: FlatBufferBuilder) : Int {
            val o = builder.endTable()
            return o
        }
        fun finishAttitudeDataIngestBuffer(builder: FlatBufferBuilder, offset: Int) = builder.finish(offset, "ATTI")
        fun finishSizePrefixedAttitudeData_IngestBuffer(builder: FlatBufferBuilder, offset: Int) = builder.finishSizePrefixed(offset, "ATTI")
    }
}
