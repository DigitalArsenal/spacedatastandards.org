// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package AirTransportMission_Full

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

/// /// The information in an Air Transport Mission contains unique identification, description of the mission objective, aircraft and crew assignments, mission alias, embarkation/debarkation cargo locations, priority, and other mission characteristics.
type AirTransportMission_Full struct {
	_tab flatbuffers.Table
}

const AirTransportMission_FullIdentifier = "AIRT"

func GetRootAsAirTransportMission_Full(buf []byte, offset flatbuffers.UOffsetT) *AirTransportMission_Full {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &AirTransportMission_Full{}
	x.Init(buf, n+offset)
	return x
}

func FinishAirTransportMission_FullBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	identifierBytes := []byte(AirTransportMission_FullIdentifier)
	builder.FinishWithFileIdentifier(offset, identifierBytes)
}

func AirTransportMission_FullBufferHasIdentifier(buf []byte) bool {
	return flatbuffers.BufferHasIdentifier(buf, AirTransportMission_FullIdentifier)
}

func GetSizePrefixedRootAsAirTransportMission_Full(buf []byte, offset flatbuffers.UOffsetT) *AirTransportMission_Full {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &AirTransportMission_Full{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedAirTransportMission_FullBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	identifierBytes := []byte(AirTransportMission_FullIdentifier)
	builder.FinishSizePrefixedWithFileIdentifier(offset, identifierBytes)
}

func SizePrefixedAirTransportMission_FullBufferHasIdentifier(buf []byte) bool {
	return flatbuffers.SizePrefixedBufferHasIdentifier(buf, AirTransportMission_FullIdentifier)
}

func (rcv *AirTransportMission_Full) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *AirTransportMission_Full) Table() flatbuffers.Table {
	return rcv._tab
}

/// Unique identifier of the record, auto-generated by the system.
/// Example: /// Example: bdad6945-c9e4-b829-f7be-1ad075541921
/// Constraints: Minimum length = 1, Maximum length = 36
func (rcv *AirTransportMission_Full) Id() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Unique identifier of the record, auto-generated by the system.
/// Example: /// Example: bdad6945-c9e4-b829-f7be-1ad075541921
/// Constraints: Minimum length = 1, Maximum length = 36
/// Classification marking of the data in IC/CAPCO Portion-marked format.
/// Example: /// Example: U
/// Constraints: Minimum length = 1, Maximum length = 128
func (rcv *AirTransportMission_Full) ClassificationMarking() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Classification marking of the data in IC/CAPCO Portion-marked format.
/// Example: /// Example: U
/// Constraints: Minimum length = 1, Maximum length = 128
/// The mission identifier provided by the originating source.
/// Example: /// Example: 614bebb6-a62e-053c-ca51-e79f8a402b28
/// Constraints: Minimum length = 0, Maximum length = 36
func (rcv *AirTransportMission_Full) OrigMissionId() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The mission identifier provided by the originating source.
/// Example: /// Example: 614bebb6-a62e-053c-ca51-e79f8a402b28
/// Constraints: Minimum length = 0, Maximum length = 36
/// Air Mobility Command (AMC) mission identifier according to Mobility Air Forces (MAF) Encode/Decode procedures.
/// Example: /// Example: AJM7939B1123
/// Constraints: Minimum length = 0, Maximum length = 36
func (rcv *AirTransportMission_Full) AmcMissionId() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Air Mobility Command (AMC) mission identifier according to Mobility Air Forces (MAF) Encode/Decode procedures.
/// Example: /// Example: AJM7939B1123
/// Constraints: Minimum length = 0, Maximum length = 36
/// Global Decision Support System (GDSS) mission unique identifier.
/// Example: /// Example: 1e6edeec-72e9-aaec-d33c-51147cb5ffdd
/// Constraints: Minimum length = 0, Maximum length = 36
func (rcv *AirTransportMission_Full) GdssMissionId() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Global Decision Support System (GDSS) mission unique identifier.
/// Example: /// Example: 1e6edeec-72e9-aaec-d33c-51147cb5ffdd
/// Constraints: Minimum length = 0, Maximum length = 36
/// Unique identifier of the previous air transport mission provided by the originating source. Provides a method for the data provider to link air transport missions together chronologically for tasking and planning purposes.
/// Example: /// Example: a77055df-edc3-4047-a5fa-604f80b9fe3c
/// Constraints: Minimum length = 0, Maximum length = 36
func (rcv *AirTransportMission_Full) PrevMissionId() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Unique identifier of the previous air transport mission provided by the originating source. Provides a method for the data provider to link air transport missions together chronologically for tasking and planning purposes.
/// Example: /// Example: a77055df-edc3-4047-a5fa-604f80b9fe3c
/// Constraints: Minimum length = 0, Maximum length = 36
/// Air Mobility Command (AMC) mission identifier of the previous air transport mission. Provides a method for AMC to link air transport missions together chronologically for tasking and planning purposes.
/// Example: /// Example: AJM7939B1122
/// Constraints: Minimum length = 0, Maximum length = 36
func (rcv *AirTransportMission_Full) PrevAmcmissionId() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Air Mobility Command (AMC) mission identifier of the previous air transport mission. Provides a method for AMC to link air transport missions together chronologically for tasking and planning purposes.
/// Example: /// Example: AJM7939B1122
/// Constraints: Minimum length = 0, Maximum length = 36
/// Unique identifier of the next mission provided by the originating source. Provides a method for the data provider to link air transport missions together chronologically for tasking and planning purposes.
/// Example: /// Example: 186e5658-1079-45c0-bccc-02d2fa31b663
/// Constraints: Minimum length = 0, Maximum length = 36
func (rcv *AirTransportMission_Full) NextMissionId() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(18))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Unique identifier of the next mission provided by the originating source. Provides a method for the data provider to link air transport missions together chronologically for tasking and planning purposes.
/// Example: /// Example: 186e5658-1079-45c0-bccc-02d2fa31b663
/// Constraints: Minimum length = 0, Maximum length = 36
/// Air Mobility Command (AMC) mission identifier of the next air transport mission. Provides a method for AMC to link air transport missions together chronologically for tasking and planning purposes.
/// Example: /// Example: AJM7939B1124
/// Constraints: Minimum length = 0, Maximum length = 36
func (rcv *AirTransportMission_Full) NextAmcmissionId() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(20))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Air Mobility Command (AMC) mission identifier of the next air transport mission. Provides a method for AMC to link air transport missions together chronologically for tasking and planning purposes.
/// Example: /// Example: AJM7939B1124
/// Constraints: Minimum length = 0, Maximum length = 36
/// A description of this mission's objective.
/// Example: /// Example: Deliver water to island X.
/// Constraints: Minimum length = 0, Maximum length = 1024
func (rcv *AirTransportMission_Full) Objective() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(22))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// A description of this mission's objective.
/// Example: /// Example: Deliver water to island X.
/// Constraints: Minimum length = 0, Maximum length = 1024
/// A description of this mission's purpose (e.g. why this mission needs to happen, what is the mission supporting, etc.).
/// Example: /// Example: People at island X need water ASAP. Two previous attempts failed due to weather.
/// Constraints: Minimum length = 0, Maximum length = 1024
func (rcv *AirTransportMission_Full) Purpose() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(24))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// A description of this mission's purpose (e.g. why this mission needs to happen, what is the mission supporting, etc.).
/// Example: /// Example: People at island X need water ASAP. Two previous attempts failed due to weather.
/// Constraints: Minimum length = 0, Maximum length = 1024
/// Highest Joint Chiefs of Staff priority of this mission.
/// Example: /// Example: 1A3
/// Constraints: Minimum length = 3, Maximum length = 3
func (rcv *AirTransportMission_Full) JcsPriority() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(26))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Highest Joint Chiefs of Staff priority of this mission.
/// Example: /// Example: 1A3
/// Constraints: Minimum length = 3, Maximum length = 3
/// Flag indicating this is a close watch mission.
/// Example: /// Example: True
/// Constraints: No constraints specified.
func (rcv *AirTransportMission_Full) Cw() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(28))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

/// Flag indicating this is a close watch mission.
/// Example: /// Example: True
/// Constraints: No constraints specified.
func (rcv *AirTransportMission_Full) MutateCw(n bool) bool {
	return rcv._tab.MutateBoolSlot(28, n)
}

/// The type of mission (e.g. SAAM, CHNL, etc.).
/// Example: /// Example: SAAM
/// Constraints: Minimum length = 0, Maximum length = 32
func (rcv *AirTransportMission_Full) Type() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(30))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The type of mission (e.g. SAAM, CHNL, etc.).
/// Example: /// Example: SAAM
/// Constraints: Minimum length = 0, Maximum length = 32
/// The International Civil Aviation Organization (ICAO) site code of first cargo pick up.
/// Example: /// Example: KFAY
/// Constraints: Minimum length = 4, Maximum length = 4
func (rcv *AirTransportMission_Full) FirstPickUp() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(32))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The International Civil Aviation Organization (ICAO) site code of first cargo pick up.
/// Example: /// Example: KFAY
/// Constraints: Minimum length = 4, Maximum length = 4
/// The International Civil Aviation Organization (ICAO) site code of last cargo drop off.
/// Example: /// Example: PGUA
/// Constraints: Minimum length = 4, Maximum length = 4
func (rcv *AirTransportMission_Full) LastDropOff() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(34))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The International Civil Aviation Organization (ICAO) site code of last cargo drop off.
/// Example: /// Example: PGUA
/// Constraints: Minimum length = 4, Maximum length = 4
/// Mission alias.
/// Example: /// Example: PACIFIC DEPLOY / CHAP 3 MOVEMENT
/// Constraints: Minimum length = 0, Maximum length = 48
func (rcv *AirTransportMission_Full) Alias() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(36))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Mission alias.
/// Example: /// Example: PACIFIC DEPLOY / CHAP 3 MOVEMENT
/// Constraints: Minimum length = 0, Maximum length = 48
/// The call sign for this mission.
/// Example: /// Example: RCH123
/// Constraints: Minimum length = 0, Maximum length = 32
func (rcv *AirTransportMission_Full) CallSign() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(38))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The call sign for this mission.
/// Example: /// Example: RCH123
/// Constraints: Minimum length = 0, Maximum length = 32
/// The name of the operation that this mission supports.
/// Example: /// Example: Golden Eye
/// Constraints: Minimum length = 0, Maximum length = 100
func (rcv *AirTransportMission_Full) Operation() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(40))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The name of the operation that this mission supports.
/// Example: /// Example: Golden Eye
/// Constraints: Minimum length = 0, Maximum length = 100
/// Numbered Air Force (NAF) organization that owns the mission.
/// Example: /// Example: 18AF
/// Constraints: Minimum length = 0, Maximum length = 100
func (rcv *AirTransportMission_Full) Naf() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(42))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Numbered Air Force (NAF) organization that owns the mission.
/// Example: /// Example: 18AF
/// Constraints: Minimum length = 0, Maximum length = 100
/// The unit the mission is allocated to.
/// Example: /// Example: 437 AEW
/// Constraints: Minimum length = 0, Maximum length = 256
func (rcv *AirTransportMission_Full) AllocatedUnit() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(44))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The unit the mission is allocated to.
/// Example: /// Example: 437 AEW
/// Constraints: Minimum length = 0, Maximum length = 256
/// Load type of this mission (e.g. CARGO, MIXED, PASSENGER).
/// Example: /// Example: MIXED
/// Constraints: Minimum length = 0, Maximum length = 32
func (rcv *AirTransportMission_Full) LoadCategoryType() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(46))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Load type of this mission (e.g. CARGO, MIXED, PASSENGER).
/// Example: /// Example: MIXED
/// Constraints: Minimum length = 0, Maximum length = 32
/// Current state of the mission.
/// Example: /// Example: EXECUTION
/// Constraints: Minimum length = 0, Maximum length = 32
func (rcv *AirTransportMission_Full) State() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(48))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Current state of the mission.
/// Example: /// Example: EXECUTION
/// Constraints: Minimum length = 0, Maximum length = 32
/// The number of minutes a mission is off schedule based on the source system's business rules. Positive numbers are early, negative numbers are late.
/// Example: /// Example: -90.12
/// Constraints: No constraints specified.
func (rcv *AirTransportMission_Full) SourceSysDeviation() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(50))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// The number of minutes a mission is off schedule based on the source system's business rules. Positive numbers are early, negative numbers are late.
/// Example: /// Example: -90.12
/// Constraints: No constraints specified.
func (rcv *AirTransportMission_Full) MutateSourceSysDeviation(n float64) bool {
	return rcv._tab.MutateFloat64Slot(50, n)
}

/// The Aircraft and Personnel Automated Clearance System (APACS) system identifier used to process and approve clearance requests.
/// Example: /// Example: 1083034
/// Constraints: Minimum length = 0, Maximum length = 64
func (rcv *AirTransportMission_Full) ApacsId() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(52))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The Aircraft and Personnel Automated Clearance System (APACS) system identifier used to process and approve clearance requests.
/// Example: /// Example: 1083034
/// Constraints: Minimum length = 0, Maximum length = 64
/// Identifier of the Diplomatic Clearance Worksheet used to coordinate aircraft clearance requests.
/// Example: /// Example: G2-182402-AB
/// Constraints: Minimum length = 0, Maximum length = 256
func (rcv *AirTransportMission_Full) DipWorksheetName() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(54))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Identifier of the Diplomatic Clearance Worksheet used to coordinate aircraft clearance requests.
/// Example: /// Example: G2-182402-AB
/// Constraints: Minimum length = 0, Maximum length = 256
/// Time the row was created in the database, auto-populated by the system.
/// Example: /// Example: 2022-01-01T16:00:00.123Z
/// Constraints: No constraints specified.
func (rcv *AirTransportMission_Full) CreatedAt() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(56))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Time the row was created in the database, auto-populated by the system.
/// Example: /// Example: 2022-01-01T16:00:00.123Z
/// Constraints: No constraints specified.
/// Application user who created the row in the database, auto-populated by the system.
/// Example: /// Example: some.user
/// Constraints: Minimum length = 1, Maximum length = 64
func (rcv *AirTransportMission_Full) CreatedBy() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(58))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Application user who created the row in the database, auto-populated by the system.
/// Example: /// Example: some.user
/// Constraints: Minimum length = 1, Maximum length = 64
/// Time the row was updated in the database, auto-populated by the system.
/// Example: /// Example: 2022-01-01T16:00:00.123Z
/// Constraints: No constraints specified.
func (rcv *AirTransportMission_Full) UpdatedAt() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(60))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Time the row was updated in the database, auto-populated by the system.
/// Example: /// Example: 2022-01-01T16:00:00.123Z
/// Constraints: No constraints specified.
/// Application user who updated the row in the database, auto-populated by the system.
/// Example: /// Example: some.user
/// Constraints: Minimum length = 1, Maximum length = 64
func (rcv *AirTransportMission_Full) UpdatedBy() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(62))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Application user who updated the row in the database, auto-populated by the system.
/// Example: /// Example: some.user
/// Constraints: Minimum length = 1, Maximum length = 64
/// The source data library from which this record was received. This could be a remote or tactical UDL or another data library. If null, the record should be assumed to have originated from the primary Enterprise UDL.
/// Example: /// Example: AXE
/// Constraints: Minimum length = 0, Maximum length = 64
func (rcv *AirTransportMission_Full) SourceDl() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(64))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The source data library from which this record was received. This could be a remote or tactical UDL or another data library. If null, the record should be assumed to have originated from the primary Enterprise UDL.
/// Example: /// Example: AXE
/// Constraints: Minimum length = 0, Maximum length = 64
/// Source of the data.
/// Example: /// Example: Bluestaq
/// Constraints: Minimum length = 1, Maximum length = 36
func (rcv *AirTransportMission_Full) Source() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(66))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Source of the data.
/// Example: /// Example: Bluestaq
/// Constraints: Minimum length = 1, Maximum length = 36
/// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
/// Example: /// Example: THIRD_PARTY_DATASOURCE
/// Constraints: Minimum length = 0, Maximum length = 64
func (rcv *AirTransportMission_Full) Origin() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(68))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
/// Example: /// Example: THIRD_PARTY_DATASOURCE
/// Constraints: Minimum length = 0, Maximum length = 64
/// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
/// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
/// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
/// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
/// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
/// Example: /// Example: TEST
/// Constraints: Minimum length = 1, Maximum length = 32
func (rcv *AirTransportMission_Full) DataMode() AirTransportMission_Full_dataMode_Enum {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(70))
	if o != 0 {
		return AirTransportMission_Full_dataMode_Enum(rcv._tab.GetInt8(o + rcv._tab.Pos))
	}
	return 0
}

/// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
/// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
/// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
/// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
/// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
/// Example: /// Example: TEST
/// Constraints: Minimum length = 1, Maximum length = 32
func (rcv *AirTransportMission_Full) MutateDataMode(n AirTransportMission_Full_dataMode_Enum) bool {
	return rcv._tab.MutateInt8Slot(70, int8(n))
}

/// The originating source network on which this record was created, auto-populated by the system.
/// Example: /// Example: OPS1
/// Constraints: Minimum length = 0, Maximum length = 32
func (rcv *AirTransportMission_Full) OrigNetwork() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(72))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The originating source network on which this record was created, auto-populated by the system.
/// Example: /// Example: OPS1
/// Constraints: Minimum length = 0, Maximum length = 32
/// Information related to the planning, load, status, and deployment or dispatch of one aircraft to carry out a mission.
/// Example: /// Example: No example provided.
/// Constraints: No constraints specified.
func (rcv *AirTransportMission_Full) Requirements(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(74))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *AirTransportMission_Full) RequirementsLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(74))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

/// Information related to the planning, load, status, and deployment or dispatch of one aircraft to carry out a mission.
/// Example: /// Example: No example provided.
/// Constraints: No constraints specified.
/// Information related to the planning, load, status, and deployment or dispatch of one aircraft to carry out a mission.
/// Example: /// Example: No example provided.
/// Constraints: No constraints specified.
func (rcv *AirTransportMission_Full) Remarks(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(76))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *AirTransportMission_Full) RemarksLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(76))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

/// Information related to the planning, load, status, and deployment or dispatch of one aircraft to carry out a mission.
/// Example: /// Example: No example provided.
/// Constraints: No constraints specified.
/// Collection of Hazardous Material information associated with this Air Transport Mission.
/// Example: /// Example: No example provided.
/// Constraints: No constraints specified.
func (rcv *AirTransportMission_Full) HazMat(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(78))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *AirTransportMission_Full) HazMatLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(78))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

/// Collection of Hazardous Material information associated with this Air Transport Mission.
/// Example: /// Example: No example provided.
/// Constraints: No constraints specified.
/// The Aircraft Sortie Records linked to this mission. Do not set this field to send data to the UDL. This field is set by the UDL when returning full Air Transport Mission records.
/// Example: /// Example: No example provided.
/// Constraints: No constraints specified.
func (rcv *AirTransportMission_Full) AircraftSorties(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(80))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *AirTransportMission_Full) AircraftSortiesLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(80))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

/// The Aircraft Sortie Records linked to this mission. Do not set this field to send data to the UDL. This field is set by the UDL when returning full Air Transport Mission records.
/// Example: /// Example: No example provided.
/// Constraints: No constraints specified.
func AirTransportMission_FullStart(builder *flatbuffers.Builder) {
	builder.StartObject(39)
}
func AirTransportMission_FullAddId(builder *flatbuffers.Builder, id flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(id), 0)
}
func AirTransportMission_FullAddClassificationMarking(builder *flatbuffers.Builder, classificationMarking flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(classificationMarking), 0)
}
func AirTransportMission_FullAddOrigMissionId(builder *flatbuffers.Builder, origMissionId flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(origMissionId), 0)
}
func AirTransportMission_FullAddAmcMissionId(builder *flatbuffers.Builder, amcMissionId flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(3, flatbuffers.UOffsetT(amcMissionId), 0)
}
func AirTransportMission_FullAddGdssMissionId(builder *flatbuffers.Builder, gdssMissionId flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(4, flatbuffers.UOffsetT(gdssMissionId), 0)
}
func AirTransportMission_FullAddPrevMissionId(builder *flatbuffers.Builder, prevMissionId flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(5, flatbuffers.UOffsetT(prevMissionId), 0)
}
func AirTransportMission_FullAddPrevAmcmissionId(builder *flatbuffers.Builder, prevAmcmissionId flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(6, flatbuffers.UOffsetT(prevAmcmissionId), 0)
}
func AirTransportMission_FullAddNextMissionId(builder *flatbuffers.Builder, nextMissionId flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(7, flatbuffers.UOffsetT(nextMissionId), 0)
}
func AirTransportMission_FullAddNextAmcmissionId(builder *flatbuffers.Builder, nextAmcmissionId flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(8, flatbuffers.UOffsetT(nextAmcmissionId), 0)
}
func AirTransportMission_FullAddObjective(builder *flatbuffers.Builder, objective flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(9, flatbuffers.UOffsetT(objective), 0)
}
func AirTransportMission_FullAddPurpose(builder *flatbuffers.Builder, purpose flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(10, flatbuffers.UOffsetT(purpose), 0)
}
func AirTransportMission_FullAddJcsPriority(builder *flatbuffers.Builder, jcsPriority flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(11, flatbuffers.UOffsetT(jcsPriority), 0)
}
func AirTransportMission_FullAddCw(builder *flatbuffers.Builder, cw bool) {
	builder.PrependBoolSlot(12, cw, false)
}
func AirTransportMission_FullAddType(builder *flatbuffers.Builder, type_ flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(13, flatbuffers.UOffsetT(type_), 0)
}
func AirTransportMission_FullAddFirstPickUp(builder *flatbuffers.Builder, firstPickUp flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(14, flatbuffers.UOffsetT(firstPickUp), 0)
}
func AirTransportMission_FullAddLastDropOff(builder *flatbuffers.Builder, lastDropOff flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(15, flatbuffers.UOffsetT(lastDropOff), 0)
}
func AirTransportMission_FullAddAlias(builder *flatbuffers.Builder, alias flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(16, flatbuffers.UOffsetT(alias), 0)
}
func AirTransportMission_FullAddCallSign(builder *flatbuffers.Builder, callSign flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(17, flatbuffers.UOffsetT(callSign), 0)
}
func AirTransportMission_FullAddOperation(builder *flatbuffers.Builder, operation flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(18, flatbuffers.UOffsetT(operation), 0)
}
func AirTransportMission_FullAddNaf(builder *flatbuffers.Builder, naf flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(19, flatbuffers.UOffsetT(naf), 0)
}
func AirTransportMission_FullAddAllocatedUnit(builder *flatbuffers.Builder, allocatedUnit flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(20, flatbuffers.UOffsetT(allocatedUnit), 0)
}
func AirTransportMission_FullAddLoadCategoryType(builder *flatbuffers.Builder, loadCategoryType flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(21, flatbuffers.UOffsetT(loadCategoryType), 0)
}
func AirTransportMission_FullAddState(builder *flatbuffers.Builder, state flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(22, flatbuffers.UOffsetT(state), 0)
}
func AirTransportMission_FullAddSourceSysDeviation(builder *flatbuffers.Builder, sourceSysDeviation float64) {
	builder.PrependFloat64Slot(23, sourceSysDeviation, 0.0)
}
func AirTransportMission_FullAddApacsId(builder *flatbuffers.Builder, apacsId flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(24, flatbuffers.UOffsetT(apacsId), 0)
}
func AirTransportMission_FullAddDipWorksheetName(builder *flatbuffers.Builder, dipWorksheetName flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(25, flatbuffers.UOffsetT(dipWorksheetName), 0)
}
func AirTransportMission_FullAddCreatedAt(builder *flatbuffers.Builder, createdAt flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(26, flatbuffers.UOffsetT(createdAt), 0)
}
func AirTransportMission_FullAddCreatedBy(builder *flatbuffers.Builder, createdBy flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(27, flatbuffers.UOffsetT(createdBy), 0)
}
func AirTransportMission_FullAddUpdatedAt(builder *flatbuffers.Builder, updatedAt flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(28, flatbuffers.UOffsetT(updatedAt), 0)
}
func AirTransportMission_FullAddUpdatedBy(builder *flatbuffers.Builder, updatedBy flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(29, flatbuffers.UOffsetT(updatedBy), 0)
}
func AirTransportMission_FullAddSourceDl(builder *flatbuffers.Builder, sourceDl flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(30, flatbuffers.UOffsetT(sourceDl), 0)
}
func AirTransportMission_FullAddSource(builder *flatbuffers.Builder, source flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(31, flatbuffers.UOffsetT(source), 0)
}
func AirTransportMission_FullAddOrigin(builder *flatbuffers.Builder, origin flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(32, flatbuffers.UOffsetT(origin), 0)
}
func AirTransportMission_FullAddDataMode(builder *flatbuffers.Builder, dataMode AirTransportMission_Full_dataMode_Enum) {
	builder.PrependInt8Slot(33, int8(dataMode), 0)
}
func AirTransportMission_FullAddOrigNetwork(builder *flatbuffers.Builder, origNetwork flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(34, flatbuffers.UOffsetT(origNetwork), 0)
}
func AirTransportMission_FullAddRequirements(builder *flatbuffers.Builder, requirements flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(35, flatbuffers.UOffsetT(requirements), 0)
}
func AirTransportMission_FullStartRequirementsVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func AirTransportMission_FullAddRemarks(builder *flatbuffers.Builder, remarks flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(36, flatbuffers.UOffsetT(remarks), 0)
}
func AirTransportMission_FullStartRemarksVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func AirTransportMission_FullAddHazMat(builder *flatbuffers.Builder, hazMat flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(37, flatbuffers.UOffsetT(hazMat), 0)
}
func AirTransportMission_FullStartHazMatVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func AirTransportMission_FullAddAircraftSorties(builder *flatbuffers.Builder, aircraftSorties flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(38, flatbuffers.UOffsetT(aircraftSorties), 0)
}
func AirTransportMission_FullStartAircraftSortiesVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func AirTransportMission_FullEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
