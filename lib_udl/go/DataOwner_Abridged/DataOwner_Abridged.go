// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package DataOwner_Abridged

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

/// /// Information pertaining to UDL data owners.
type DataOwner_Abridged struct {
	_tab flatbuffers.Table
}

const DataOwner_AbridgedIdentifier = "DATA"

func GetRootAsDataOwner_Abridged(buf []byte, offset flatbuffers.UOffsetT) *DataOwner_Abridged {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &DataOwner_Abridged{}
	x.Init(buf, n+offset)
	return x
}

func FinishDataOwner_AbridgedBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	identifierBytes := []byte(DataOwner_AbridgedIdentifier)
	builder.FinishWithFileIdentifier(offset, identifierBytes)
}

func DataOwner_AbridgedBufferHasIdentifier(buf []byte) bool {
	return flatbuffers.BufferHasIdentifier(buf, DataOwner_AbridgedIdentifier)
}

func GetSizePrefixedRootAsDataOwner_Abridged(buf []byte, offset flatbuffers.UOffsetT) *DataOwner_Abridged {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &DataOwner_Abridged{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedDataOwner_AbridgedBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	identifierBytes := []byte(DataOwner_AbridgedIdentifier)
	builder.FinishSizePrefixedWithFileIdentifier(offset, identifierBytes)
}

func SizePrefixedDataOwner_AbridgedBufferHasIdentifier(buf []byte) bool {
	return flatbuffers.SizePrefixedBufferHasIdentifier(buf, DataOwner_AbridgedIdentifier)
}

func (rcv *DataOwner_Abridged) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *DataOwner_Abridged) Table() flatbuffers.Table {
	return rcv._tab
}

/// The name of the data owner.
/// Example: /// Example: Data owner name
/// Constraints: Minimum length = 1, Maximum length = 64
func (rcv *DataOwner_Abridged) DoName() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The name of the data owner.
/// Example: /// Example: Data owner name
/// Constraints: Minimum length = 1, Maximum length = 64
/// Classification marking of the data in IC/CAPCO Portion-marked format.
/// Example: /// Example: U
/// Constraints: Minimum length = 1, Maximum length = 128
func (rcv *DataOwner_Abridged) ClassificationMarking() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Classification marking of the data in IC/CAPCO Portion-marked format.
/// Example: /// Example: U
/// Constraints: Minimum length = 1, Maximum length = 128
/// Type of organization which this data owner belongs to (e.g. Commercial, Government, Academic, Consortium, etc.).
/// Example: /// Example: Commercial
/// Constraints: Minimum length = 1, Maximum length = 32
func (rcv *DataOwner_Abridged) OwnerType() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Type of organization which this data owner belongs to (e.g. Commercial, Government, Academic, Consortium, etc.).
/// Example: /// Example: Commercial
/// Constraints: Minimum length = 1, Maximum length = 32
/// Type of data this data owner owns (e.g. EPHEMERIS, IMAGERY, MANEUVER, etc.).
/// Example: /// Example: ELSET
/// Constraints: Minimum length = 1, Maximum length = 64
func (rcv *DataOwner_Abridged) DataType() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Type of data this data owner owns (e.g. EPHEMERIS, IMAGERY, MANEUVER, etc.).
/// Example: /// Example: ELSET
/// Constraints: Minimum length = 1, Maximum length = 64
/// Organization name for the data provider.
/// Example: /// Example: ACME
/// Constraints: Minimum length = 1, Maximum length = 64
func (rcv *DataOwner_Abridged) Provider() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Organization name for the data provider.
/// Example: /// Example: ACME
/// Constraints: Minimum length = 1, Maximum length = 64
/// The country code. This value is typically the ISO 3166 Alpha-2 two-character country code, however it can also represent various consortiums that do not appear in the ISO document. The code must correspond to an existing country in the UDL’s country API. Call udl/country/{code} to get any associated FIPS code, ISO Alpha-3 code, or alternate code values that exist for the specified country code.
/// Example: /// Example: US
/// Constraints: Minimum length = 1, Maximum length = 4
func (rcv *DataOwner_Abridged) CountryCode() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The country code. This value is typically the ISO 3166 Alpha-2 two-character country code, however it can also represent various consortiums that do not appear in the ISO document. The code must correspond to an existing country in the UDL’s country API. Call udl/country/{code} to get any associated FIPS code, ISO Alpha-3 code, or alternate code values that exist for the specified country code.
/// Example: /// Example: US
/// Constraints: Minimum length = 1, Maximum length = 4
/// Unique identifier of the contact for this data owner.
/// Example: /// Example: 026dd511-8ba5-47d3-9909-836149f87686
/// Constraints: Minimum length = 1, Maximum length = 36
func (rcv *DataOwner_Abridged) IdContact() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Unique identifier of the contact for this data owner.
/// Example: /// Example: 026dd511-8ba5-47d3-9909-836149f87686
/// Constraints: Minimum length = 1, Maximum length = 36
/// Description of this data owner.
/// Example: /// Example: Description of this data owner.
/// Constraints: No constraints specified.
func (rcv *DataOwner_Abridged) Description() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(18))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Description of this data owner.
/// Example: /// Example: Description of this data owner.
/// Constraints: No constraints specified.
/// Optional control required to access this data type from this owner.
/// Example: /// Example: PR-ACME-ELSETS
/// Constraints: Minimum length = 1, Maximum length = 128
func (rcv *DataOwner_Abridged) Control() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(20))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Optional control required to access this data type from this owner.
/// Example: /// Example: PR-ACME-ELSETS
/// Constraints: Minimum length = 1, Maximum length = 128
/// Boolean indicating if the data owner is enabled (if not enabled, they should not appear on the data products screen on the storefront).
/// Example: /// Example: False
/// Constraints: No constraints specified.
func (rcv *DataOwner_Abridged) Enabled() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(22))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

/// Boolean indicating if the data owner is enabled (if not enabled, they should not appear on the data products screen on the storefront).
/// Example: /// Example: False
/// Constraints: No constraints specified.
func (rcv *DataOwner_Abridged) MutateEnabled(n bool) bool {
	return rcv._tab.MutateBoolSlot(22, n)
}

/// Boolean indicating if the data owner is coming soon or not yet available.
/// Example: /// Example: False
/// Constraints: No constraints specified.
func (rcv *DataOwner_Abridged) ComingSoon() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(24))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

/// Boolean indicating if the data owner is coming soon or not yet available.
/// Example: /// Example: False
/// Constraints: No constraints specified.
func (rcv *DataOwner_Abridged) MutateComingSoon(n bool) bool {
	return rcv._tab.MutateBoolSlot(24, n)
}

/// Source of the data.
/// Example: /// Example: some.user
/// Constraints: Minimum length = 1, Maximum length = 64
func (rcv *DataOwner_Abridged) Source() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(26))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Source of the data.
/// Example: /// Example: some.user
/// Constraints: Minimum length = 1, Maximum length = 64
func DataOwner_AbridgedStart(builder *flatbuffers.Builder) {
	builder.StartObject(12)
}
func DataOwner_AbridgedAddDoName(builder *flatbuffers.Builder, doName flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(doName), 0)
}
func DataOwner_AbridgedAddClassificationMarking(builder *flatbuffers.Builder, classificationMarking flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(classificationMarking), 0)
}
func DataOwner_AbridgedAddOwnerType(builder *flatbuffers.Builder, ownerType flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(ownerType), 0)
}
func DataOwner_AbridgedAddDataType(builder *flatbuffers.Builder, dataType flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(3, flatbuffers.UOffsetT(dataType), 0)
}
func DataOwner_AbridgedAddProvider(builder *flatbuffers.Builder, provider flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(4, flatbuffers.UOffsetT(provider), 0)
}
func DataOwner_AbridgedAddCountryCode(builder *flatbuffers.Builder, countryCode flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(5, flatbuffers.UOffsetT(countryCode), 0)
}
func DataOwner_AbridgedAddIdContact(builder *flatbuffers.Builder, idContact flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(6, flatbuffers.UOffsetT(idContact), 0)
}
func DataOwner_AbridgedAddDescription(builder *flatbuffers.Builder, description flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(7, flatbuffers.UOffsetT(description), 0)
}
func DataOwner_AbridgedAddControl(builder *flatbuffers.Builder, control flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(8, flatbuffers.UOffsetT(control), 0)
}
func DataOwner_AbridgedAddEnabled(builder *flatbuffers.Builder, enabled bool) {
	builder.PrependBoolSlot(9, enabled, false)
}
func DataOwner_AbridgedAddComingSoon(builder *flatbuffers.Builder, comingSoon bool) {
	builder.PrependBoolSlot(10, comingSoon, false)
}
func DataOwner_AbridgedAddSource(builder *flatbuffers.Builder, source flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(11, flatbuffers.UOffsetT(source), 0)
}
func DataOwner_AbridgedEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
