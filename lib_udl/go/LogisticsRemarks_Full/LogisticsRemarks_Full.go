// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package LogisticsRemarks_Full

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

/// /// Remarks associated with this LogisticsSupport record.
type LogisticsRemarks_Full struct {
	_tab flatbuffers.Table
}

const LogisticsRemarks_FullIdentifier = "LOGI"

func GetRootAsLogisticsRemarks_Full(buf []byte, offset flatbuffers.UOffsetT) *LogisticsRemarks_Full {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &LogisticsRemarks_Full{}
	x.Init(buf, n+offset)
	return x
}

func FinishLogisticsRemarks_FullBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	identifierBytes := []byte(LogisticsRemarks_FullIdentifier)
	builder.FinishWithFileIdentifier(offset, identifierBytes)
}

func LogisticsRemarks_FullBufferHasIdentifier(buf []byte) bool {
	return flatbuffers.BufferHasIdentifier(buf, LogisticsRemarks_FullIdentifier)
}

func GetSizePrefixedRootAsLogisticsRemarks_Full(buf []byte, offset flatbuffers.UOffsetT) *LogisticsRemarks_Full {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &LogisticsRemarks_Full{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedLogisticsRemarks_FullBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	identifierBytes := []byte(LogisticsRemarks_FullIdentifier)
	builder.FinishSizePrefixedWithFileIdentifier(offset, identifierBytes)
}

func SizePrefixedLogisticsRemarks_FullBufferHasIdentifier(buf []byte) bool {
	return flatbuffers.SizePrefixedBufferHasIdentifier(buf, LogisticsRemarks_FullIdentifier)
}

func (rcv *LogisticsRemarks_Full) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *LogisticsRemarks_Full) Table() flatbuffers.Table {
	return rcv._tab
}

/// User who published the remark.
/// Example: /// Example: JSMITH
/// Constraints: Minimum length = 0, Maximum length = 32
func (rcv *LogisticsRemarks_Full) Username() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// User who published the remark.
/// Example: /// Example: JSMITH
/// Constraints: Minimum length = 0, Maximum length = 32
/// Text of the remark.
/// Example: /// Example: EXAMPLE REMARK
/// Constraints: Minimum length = 0, Maximum length = 4000
func (rcv *LogisticsRemarks_Full) Remark() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Text of the remark.
/// Example: /// Example: EXAMPLE REMARK
/// Constraints: Minimum length = 0, Maximum length = 4000
/// Date the remark was published or updated, in ISO 8601 UTC format, with millisecond precision.
/// Example: /// Example: 2023-07-17T10:30:00.123Z
/// Constraints: No constraints specified.
func (rcv *LogisticsRemarks_Full) LastChanged() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Date the remark was published or updated, in ISO 8601 UTC format, with millisecond precision.
/// Example: /// Example: 2023-07-17T10:30:00.123Z
/// Constraints: No constraints specified.
func LogisticsRemarks_FullStart(builder *flatbuffers.Builder) {
	builder.StartObject(3)
}
func LogisticsRemarks_FullAddUsername(builder *flatbuffers.Builder, username flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(username), 0)
}
func LogisticsRemarks_FullAddRemark(builder *flatbuffers.Builder, remark flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(remark), 0)
}
func LogisticsRemarks_FullAddLastChanged(builder *flatbuffers.Builder, lastChanged flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(lastChanged), 0)
}
func LogisticsRemarks_FullEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
