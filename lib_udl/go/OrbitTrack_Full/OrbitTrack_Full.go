// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package OrbitTrack_Full

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

/// /// Keplerian orbital elements describing an orbit for a particular on-orbit satellite and applicable sensor data aiding in the orbit prediction.
type OrbitTrack_Full struct {
	_tab flatbuffers.Table
}

const OrbitTrack_FullIdentifier = "ORBI"

func GetRootAsOrbitTrack_Full(buf []byte, offset flatbuffers.UOffsetT) *OrbitTrack_Full {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &OrbitTrack_Full{}
	x.Init(buf, n+offset)
	return x
}

func FinishOrbitTrack_FullBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	identifierBytes := []byte(OrbitTrack_FullIdentifier)
	builder.FinishWithFileIdentifier(offset, identifierBytes)
}

func OrbitTrack_FullBufferHasIdentifier(buf []byte) bool {
	return flatbuffers.BufferHasIdentifier(buf, OrbitTrack_FullIdentifier)
}

func GetSizePrefixedRootAsOrbitTrack_Full(buf []byte, offset flatbuffers.UOffsetT) *OrbitTrack_Full {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &OrbitTrack_Full{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedOrbitTrack_FullBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	identifierBytes := []byte(OrbitTrack_FullIdentifier)
	builder.FinishSizePrefixedWithFileIdentifier(offset, identifierBytes)
}

func SizePrefixedOrbitTrack_FullBufferHasIdentifier(buf []byte) bool {
	return flatbuffers.SizePrefixedBufferHasIdentifier(buf, OrbitTrack_FullIdentifier)
}

func (rcv *OrbitTrack_Full) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *OrbitTrack_Full) Table() flatbuffers.Table {
	return rcv._tab
}

/// Unique identifier of the record, auto-generated by the system if not provided on create operations.
/// Example: /// Example: ORBIT_TRACK_ID
/// Constraints: Minimum length = 1, Maximum length = 36
func (rcv *OrbitTrack_Full) Id() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Unique identifier of the record, auto-generated by the system if not provided on create operations.
/// Example: /// Example: ORBIT_TRACK_ID
/// Constraints: Minimum length = 1, Maximum length = 36
/// Classification marking of the data in IC/CAPCO Portion-marked format.
/// Example: /// Example: U
/// Constraints: Minimum length = 1, Maximum length = 128
func (rcv *OrbitTrack_Full) ClassificationMarking() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Classification marking of the data in IC/CAPCO Portion-marked format.
/// Example: /// Example: U
/// Constraints: Minimum length = 1, Maximum length = 128
/// Unique identifier of the target on-orbit object, if correlated.
/// Example: /// Example: 32375
/// Constraints: Minimum length = 0, Maximum length = 36
func (rcv *OrbitTrack_Full) IdOnOrbit() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Unique identifier of the target on-orbit object, if correlated.
/// Example: /// Example: 32375
/// Constraints: Minimum length = 0, Maximum length = 36
/// Satellite/catalog number of the target on-orbit object.
/// Example: /// Example: 37375
/// Constraints: No constraints specified.
func (rcv *OrbitTrack_Full) SatNo() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

/// Satellite/catalog number of the target on-orbit object.
/// Example: /// Example: 37375
/// Constraints: No constraints specified.
func (rcv *OrbitTrack_Full) MutateSatNo(n int32) bool {
	return rcv._tab.MutateInt32Slot(10, n)
}

/// No description provided.
/// Example: /// Example: No example provided.
/// Constraints: No constraints specified.
func (rcv *OrbitTrack_Full) OnOrbit() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// No description provided.
/// Example: /// Example: No example provided.
/// Constraints: No constraints specified.
/// Optional identifier provided by observation source to indicate the target on-orbit object of this track. This may be an internal identifier and not necessarily a valid satellite number.
/// Example: /// Example: L2045
/// Constraints: Minimum length = 0, Maximum length = 64
func (rcv *OrbitTrack_Full) OrigObjectId() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Optional identifier provided by observation source to indicate the target on-orbit object of this track. This may be an internal identifier and not necessarily a valid satellite number.
/// Example: /// Example: L2045
/// Constraints: Minimum length = 0, Maximum length = 64
/// Unique identifier of the Elset associated with this object.
/// Example: /// Example: c715a619-8695-44d2-9e7d-effd257b4843
/// Constraints: Minimum length = 0, Maximum length = 36
func (rcv *OrbitTrack_Full) IdElset() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Unique identifier of the Elset associated with this object.
/// Example: /// Example: c715a619-8695-44d2-9e7d-effd257b4843
/// Constraints: Minimum length = 0, Maximum length = 36
/// Track timestamp in ISO8601 UTC format, with microsecond precision.
/// Example: /// Example: 2021-02-25T12:00:00.123456Z
/// Constraints: No constraints specified.
func (rcv *OrbitTrack_Full) Ts() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(18))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Track timestamp in ISO8601 UTC format, with microsecond precision.
/// Example: /// Example: 2021-02-25T12:00:00.123456Z
/// Constraints: No constraints specified.
/// WGS-84 latitude of the track object subpoint, in degrees. -90 to 90 degrees (negative values south of equator).
/// Example: /// Example: 19.88550102
/// Constraints: No constraints specified.
func (rcv *OrbitTrack_Full) Lat() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(20))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// WGS-84 latitude of the track object subpoint, in degrees. -90 to 90 degrees (negative values south of equator).
/// Example: /// Example: 19.88550102
/// Constraints: No constraints specified.
func (rcv *OrbitTrack_Full) MutateLat(n float64) bool {
	return rcv._tab.MutateFloat64Slot(20, n)
}

/// WGS-84 longitude of the track object subpoint, in degrees. -180 to 180 degrees (negative values west of Prime Meridian).
/// Example: /// Example: 46.74596844
/// Constraints: No constraints specified.
func (rcv *OrbitTrack_Full) Lon() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(22))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// WGS-84 longitude of the track object subpoint, in degrees. -180 to 180 degrees (negative values west of Prime Meridian).
/// Example: /// Example: 46.74596844
/// Constraints: No constraints specified.
func (rcv *OrbitTrack_Full) MutateLon(n float64) bool {
	return rcv._tab.MutateFloat64Slot(22, n)
}

/// Track point altitude relative to WGS-84 ellipsoid, in meters.
/// Example: /// Example: 585.71
/// Constraints: No constraints specified.
func (rcv *OrbitTrack_Full) Alt() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(24))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Track point altitude relative to WGS-84 ellipsoid, in meters.
/// Example: /// Example: 585.71
/// Constraints: No constraints specified.
func (rcv *OrbitTrack_Full) MutateAlt(n float64) bool {
	return rcv._tab.MutateFloat64Slot(24, n)
}

/// Radio frequency of the track, measured in megahertz (MHz).
/// Example: /// Example: 1.5273
/// Constraints: No constraints specified.
func (rcv *OrbitTrack_Full) RdfRf() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(26))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Radio frequency of the track, measured in megahertz (MHz).
/// Example: /// Example: 1.5273
/// Constraints: No constraints specified.
func (rcv *OrbitTrack_Full) MutateRdfRf(n float64) bool {
	return rcv._tab.MutateFloat64Slot(26, n)
}

/// International radio call sign assigned to the track. This is an 8-character alphanumeric code.
/// Example: /// Example: Charlie
/// Constraints: Minimum length = 0, Maximum length = 8
func (rcv *OrbitTrack_Full) CallSign() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(28))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// International radio call sign assigned to the track. This is an 8-character alphanumeric code.
/// Example: /// Example: Charlie
/// Constraints: Minimum length = 0, Maximum length = 8
/// Report number received from the reporting source for this track.
/// Example: /// Example: 123
/// Constraints: Minimum length = 0, Maximum length = 32
func (rcv *OrbitTrack_Full) RptNum() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(30))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Report number received from the reporting source for this track.
/// Example: /// Example: 123
/// Constraints: Minimum length = 0, Maximum length = 32
/// The estimated identity of the track object (ASSUMED FRIEND, FRIEND, HOSTILE, NEUTRAL, PENDING, SUSPECT, UNKNOWN):
///  ASSUMED FRIEND: Track assumed to be a friend due to the object characteristics, behavior, and/or origin.
///  FRIEND: Track object supporting friendly forces and belonging to a declared friendly nation or entity.
///  HOSTILE: Track object belonging to an opposing nation, party, group, or entity deemed to contribute to a threat to friendly forces or their mission due to its behavior, characteristics, nationality, or origin.
///  NEUTRAL: Track object whose characteristics, behavior, nationality, and/or origin indicate that it is neither supporting nor opposing friendly forces or their mission.
///  PENDING: Track object which has not been evaluated.
///  SUSPECT: Track object deemed potentially hostile due to the object characteristics, behavior, nationality, and/or origin.
///  UNKNOWN: Track object which has been evaluated and does not meet criteria for any standard identity.
/// Example: /// Example: FRIEND
/// Constraints: Minimum length = 0, Maximum length = 32
func (rcv *OrbitTrack_Full) ObjIdent() OrbitTrack_Full_objIdent_Enum {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(32))
	if o != 0 {
		return OrbitTrack_Full_objIdent_Enum(rcv._tab.GetInt8(o + rcv._tab.Pos))
	}
	return 0
}

/// The estimated identity of the track object (ASSUMED FRIEND, FRIEND, HOSTILE, NEUTRAL, PENDING, SUSPECT, UNKNOWN):
///  ASSUMED FRIEND: Track assumed to be a friend due to the object characteristics, behavior, and/or origin.
///  FRIEND: Track object supporting friendly forces and belonging to a declared friendly nation or entity.
///  HOSTILE: Track object belonging to an opposing nation, party, group, or entity deemed to contribute to a threat to friendly forces or their mission due to its behavior, characteristics, nationality, or origin.
///  NEUTRAL: Track object whose characteristics, behavior, nationality, and/or origin indicate that it is neither supporting nor opposing friendly forces or their mission.
///  PENDING: Track object which has not been evaluated.
///  SUSPECT: Track object deemed potentially hostile due to the object characteristics, behavior, nationality, and/or origin.
///  UNKNOWN: Track object which has been evaluated and does not meet criteria for any standard identity.
/// Example: /// Example: FRIEND
/// Constraints: Minimum length = 0, Maximum length = 32
func (rcv *OrbitTrack_Full) MutateObjIdent(n OrbitTrack_Full_objIdent_Enum) bool {
	return rcv._tab.MutateInt8Slot(32, int8(n))
}

/// Additional track object identity/status information, typically used for EXERCISE identity amplification (FAKER, JOKER, KILO, TRAVELLER, ZOMBIE):
///  FAKER: Friendly track, object, or entity acting as an exercise hostile.
///  JOKER: Friendly track, object, or entity acting as an exercise suspect.
///  KILO: Friendly high-value object.
///  TRAVELLER: Suspect land or surface track following a recognized traffic route.
///  ZOMBIE: Suspect track, object, or entity of special interest.
/// Example: /// Example: JOKER
/// Constraints: Minimum length = 0, Maximum length = 32
func (rcv *OrbitTrack_Full) IdentAmp() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(34))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Additional track object identity/status information, typically used for EXERCISE identity amplification (FAKER, JOKER, KILO, TRAVELLER, ZOMBIE):
///  FAKER: Friendly track, object, or entity acting as an exercise hostile.
///  JOKER: Friendly track, object, or entity acting as an exercise suspect.
///  KILO: Friendly high-value object.
///  TRAVELLER: Suspect land or surface track following a recognized traffic route.
///  ZOMBIE: Suspect track, object, or entity of special interest.
/// Example: /// Example: JOKER
/// Constraints: Minimum length = 0, Maximum length = 32
/// Status of the satellite.
/// Example: /// Example: INACTIVE
/// Constraints: Minimum length = 0, Maximum length = 64
func (rcv *OrbitTrack_Full) SatStatus() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(36))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Status of the satellite.
/// Example: /// Example: INACTIVE
/// Constraints: Minimum length = 0, Maximum length = 64
/// The on-orbit category assigned to this track object (DEBRIS, MANNED, PAYLOAD, PLATFORM, ROCKET BODY, UNKNOWN).
/// Example: /// Example: PAYLOAD
/// Constraints: Minimum length = 0, Maximum length = 32
func (rcv *OrbitTrack_Full) ObjectType() OrbitTrack_Full_objectType_Enum {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(38))
	if o != 0 {
		return OrbitTrack_Full_objectType_Enum(rcv._tab.GetInt8(o + rcv._tab.Pos))
	}
	return 0
}

/// The on-orbit category assigned to this track object (DEBRIS, MANNED, PAYLOAD, PLATFORM, ROCKET BODY, UNKNOWN).
/// Example: /// Example: PAYLOAD
/// Constraints: Minimum length = 0, Maximum length = 32
func (rcv *OrbitTrack_Full) MutateObjectType(n OrbitTrack_Full_objectType_Enum) bool {
	return rcv._tab.MutateInt8Slot(38, int8(n))
}

/// The country code. This value is typically the ISO 3166 Alpha-2 two-character country code, however it can also represent various consortiums that do not appear in the ISO document. The code must correspond to an existing country in the UDL’s country API. Call udl/country/{code} to get any associated FIPS code, ISO Alpha-3 code, or alternate code values that exist for the specified country code.
/// Example: /// Example: US
/// Constraints: Minimum length = 0, Maximum length = 8
func (rcv *OrbitTrack_Full) CountryCode() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(40))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The country code. This value is typically the ISO 3166 Alpha-2 two-character country code, however it can also represent various consortiums that do not appear in the ISO document. The code must correspond to an existing country in the UDL’s country API. Call udl/country/{code} to get any associated FIPS code, ISO Alpha-3 code, or alternate code values that exist for the specified country code.
/// Example: /// Example: US
/// Constraints: Minimum length = 0, Maximum length = 8
/// Predicted change in Mean Motion (velocity) in radians/herg^2.  herg is a unit of time measure equal to 806.8120769 seconds, and is the orbital period of an imaginary satellite rotating about the Earth at zero altitude.
/// Example: /// Example: 0.5868
/// Constraints: No constraints specified.
func (rcv *OrbitTrack_Full) Decay() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(42))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Predicted change in Mean Motion (velocity) in radians/herg^2.  herg is a unit of time measure equal to 806.8120769 seconds, and is the orbital period of an imaginary satellite rotating about the Earth at zero altitude.
/// Example: /// Example: 0.5868
/// Constraints: No constraints specified.
func (rcv *OrbitTrack_Full) MutateDecay(n float64) bool {
	return rcv._tab.MutateFloat64Slot(42, n)
}

/// One-line Charlie elements set.
/// Example: /// Example: 323751332255940400010000003635829600010200072500098205001150
/// Constraints: Minimum length = 0, Maximum length = 100
func (rcv *OrbitTrack_Full) CharlieLine() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(44))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// One-line Charlie elements set.
/// Example: /// Example: 323751332255940400010000003635829600010200072500098205001150
/// Constraints: Minimum length = 0, Maximum length = 100
/// The Area of Uncertainty (AoU) type (BEARING, ELLIPSE, OTHER) definition. This type defines the elements of the aouData array and is required if aouData is not null. See the aouData field definition for specific information.
/// Example: /// Example: ELLIPSE
/// Constraints: Minimum length = 0, Maximum length = 16
func (rcv *OrbitTrack_Full) AouType() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(46))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The Area of Uncertainty (AoU) type (BEARING, ELLIPSE, OTHER) definition. This type defines the elements of the aouData array and is required if aouData is not null. See the aouData field definition for specific information.
/// Example: /// Example: ELLIPSE
/// Constraints: Minimum length = 0, Maximum length = 16
/// Three element array representing an Area of Uncertainty (AoU).  The array element definitions and units are type specific depending on the aouType specified in this record:
/// ELLIPSE:
///    brg - orientation in degrees of the ellipse
///    a1 - semi-major axis in meters
///    a2 - semi-minor axis in meters
/// BEARING (BEARING BOX or MTST BEARING BOX):
///    brg - orientation in degrees of the bearing box 
///    a1 - length of bearing box in meters 
///    a2 - half-width of bearing box in meters 
/// OTHER (All other type values):
///    brg - line of bearing in degrees true 
///    a1 - bearing error in degrees 
///    a2 - estimated range in meters.
/// Example: /// Example: [34.3, 26.5, 1.2]
/// Constraints: No constraints specified.
func (rcv *OrbitTrack_Full) AouData(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(48))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *OrbitTrack_Full) AouDataLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(48))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

/// Three element array representing an Area of Uncertainty (AoU).  The array element definitions and units are type specific depending on the aouType specified in this record:
/// ELLIPSE:
///    brg - orientation in degrees of the ellipse
///    a1 - semi-major axis in meters
///    a2 - semi-minor axis in meters
/// BEARING (BEARING BOX or MTST BEARING BOX):
///    brg - orientation in degrees of the bearing box 
///    a1 - length of bearing box in meters 
///    a2 - half-width of bearing box in meters 
/// OTHER (All other type values):
///    brg - line of bearing in degrees true 
///    a1 - bearing error in degrees 
///    a2 - estimated range in meters.
/// Example: /// Example: [34.3, 26.5, 1.2]
/// Constraints: No constraints specified.
/// Track object speed, in km/sec.
/// Example: /// Example: 15.03443
/// Constraints: No constraints specified.
func (rcv *OrbitTrack_Full) Spd() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(50))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Track object speed, in km/sec.
/// Example: /// Example: 15.03443
/// Constraints: No constraints specified.
func (rcv *OrbitTrack_Full) MutateSpd(n float64) bool {
	return rcv._tab.MutateFloat64Slot(50, n)
}

/// The angle formed between the line of sight of the observer and the horizon at track timestamp, in degrees.  The angular range is -90 to 90, with negative values representing angle of depression.
/// Example: /// Example: 15.2
/// Constraints: No constraints specified.
func (rcv *OrbitTrack_Full) AngElev() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(52))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// The angle formed between the line of sight of the observer and the horizon at track timestamp, in degrees.  The angular range is -90 to 90, with negative values representing angle of depression.
/// Example: /// Example: 15.2
/// Constraints: No constraints specified.
func (rcv *OrbitTrack_Full) MutateAngElev(n float64) bool {
	return rcv._tab.MutateFloat64Slot(52, n)
}

/// The Area Of Uncertainty (AOU) percentage (0 - 100) containment value. The percentage of time (90%) that the estimated area of uncertainty will cover the true position of the track object.
/// Example: /// Example: 90
/// Constraints: No constraints specified.
func (rcv *OrbitTrack_Full) Cntnmnt() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(54))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// The Area Of Uncertainty (AOU) percentage (0 - 100) containment value. The percentage of time (90%) that the estimated area of uncertainty will cover the true position of the track object.
/// Example: /// Example: 90
/// Constraints: No constraints specified.
func (rcv *OrbitTrack_Full) MutateCntnmnt(n float64) bool {
	return rcv._tab.MutateFloat64Slot(54, n)
}

/// Source cross-reference code for the command that originated the track report.
/// Example: /// Example: XE
/// Constraints: Minimum length = 0, Maximum length = 8
func (rcv *OrbitTrack_Full) Xref() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(56))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Source cross-reference code for the command that originated the track report.
/// Example: /// Example: XE
/// Constraints: Minimum length = 0, Maximum length = 8
/// The cross-reference code of the channel on which this track report was received, if the report came over a comms channel.
/// Example: /// Example: FHKX
/// Constraints: Minimum length = 0, Maximum length = 32
func (rcv *OrbitTrack_Full) ChXref() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(58))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The cross-reference code of the channel on which this track report was received, if the report came over a comms channel.
/// Example: /// Example: FHKX
/// Constraints: Minimum length = 0, Maximum length = 32
/// Free-form remarks entered for the satellite.
/// Example: /// Example: A note regarding this spacecraft
/// Constraints: Minimum length = 0, Maximum length = 256
func (rcv *OrbitTrack_Full) Amplification() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(60))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Free-form remarks entered for the satellite.
/// Example: /// Example: A note regarding this spacecraft
/// Constraints: Minimum length = 0, Maximum length = 256
/// A text aplifier displaying IFF/SIF/AIS Identification modes and codes.
/// Example: /// Example: ID Mode
/// Constraints: Minimum length = 0, Maximum length = 64
func (rcv *OrbitTrack_Full) Iff() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(62))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// A text aplifier displaying IFF/SIF/AIS Identification modes and codes.
/// Example: /// Example: ID Mode
/// Constraints: Minimum length = 0, Maximum length = 64
/// Flag indicating that this track represents a reinforced object or group.  Based on MIL-STD-2525 symbology definitions.
/// Example: /// Example: False
/// Constraints: No constraints specified.
func (rcv *OrbitTrack_Full) Reinforced() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(64))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

/// Flag indicating that this track represents a reinforced object or group.  Based on MIL-STD-2525 symbology definitions.
/// Example: /// Example: False
/// Constraints: No constraints specified.
func (rcv *OrbitTrack_Full) MutateReinforced(n bool) bool {
	return rcv._tab.MutateBoolSlot(64, n)
}

/// Flag indicating that this track represents a reduced object or group.  Based on MIL-STD-2525 symbology definitions.
/// Example: /// Example: False
/// Constraints: No constraints specified.
func (rcv *OrbitTrack_Full) Reduced() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(66))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

/// Flag indicating that this track represents a reduced object or group.  Based on MIL-STD-2525 symbology definitions.
/// Example: /// Example: False
/// Constraints: No constraints specified.
func (rcv *OrbitTrack_Full) MutateReduced(n bool) bool {
	return rcv._tab.MutateBoolSlot(66, n)
}

/// Flag indicating that this track represents a headquarters object.  Based on MIL-STD-2525 symbology definitions.
/// Example: /// Example: False
/// Constraints: No constraints specified.
func (rcv *OrbitTrack_Full) Hq() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(68))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

/// Flag indicating that this track represents a headquarters object.  Based on MIL-STD-2525 symbology definitions.
/// Example: /// Example: False
/// Constraints: No constraints specified.
func (rcv *OrbitTrack_Full) MutateHq(n bool) bool {
	return rcv._tab.MutateBoolSlot(68, n)
}

/// Flag indicating that this track represents a dummy object or group.  Identifies offensive or defensive units, equipment and/or installations intended to draw the enemy's attention away from the area of the main attack.  Based on MIL-STD-2525 symbology definitions.
/// Example: /// Example: False
/// Constraints: No constraints specified.
func (rcv *OrbitTrack_Full) Dummy() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(70))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

/// Flag indicating that this track represents a dummy object or group.  Identifies offensive or defensive units, equipment and/or installations intended to draw the enemy's attention away from the area of the main attack.  Based on MIL-STD-2525 symbology definitions.
/// Example: /// Example: False
/// Constraints: No constraints specified.
func (rcv *OrbitTrack_Full) MutateDummy(n bool) bool {
	return rcv._tab.MutateBoolSlot(70, n)
}

/// Flag indicating that this track represents a task force.  Based on MIL-STD-2525 symbology definitions.
/// Example: /// Example: False
/// Constraints: No constraints specified.
func (rcv *OrbitTrack_Full) TaskForce() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(72))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

/// Flag indicating that this track represents a task force.  Based on MIL-STD-2525 symbology definitions.
/// Example: /// Example: False
/// Constraints: No constraints specified.
func (rcv *OrbitTrack_Full) MutateTaskForce(n bool) bool {
	return rcv._tab.MutateBoolSlot(72, n)
}

/// Flag indicating that this track represents a feint object or group.  Identifies offensive or defensive units, equipment and/or installations intended to draw the enemy's attention away from the area of the main attack.  Based on MIL-STD-2525 symbology definitions.
/// Example: /// Example: False
/// Constraints: No constraints specified.
func (rcv *OrbitTrack_Full) Feint() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(74))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

/// Flag indicating that this track represents a feint object or group.  Identifies offensive or defensive units, equipment and/or installations intended to draw the enemy's attention away from the area of the main attack.  Based on MIL-STD-2525 symbology definitions.
/// Example: /// Example: False
/// Constraints: No constraints specified.
func (rcv *OrbitTrack_Full) MutateFeint(n bool) bool {
	return rcv._tab.MutateBoolSlot(74, n)
}

/// Flag indicating that this track represents an installation.  Based on MIL-STD-2525 symbology definitions.
/// Example: /// Example: False
/// Constraints: No constraints specified.
func (rcv *OrbitTrack_Full) Installation() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(76))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

/// Flag indicating that this track represents an installation.  Based on MIL-STD-2525 symbology definitions.
/// Example: /// Example: False
/// Constraints: No constraints specified.
func (rcv *OrbitTrack_Full) MutateInstallation(n bool) bool {
	return rcv._tab.MutateBoolSlot(76, n)
}

/// The type of vehicle with which the device is associated.  Based on MIL-STD-2525 symbology definitions.
/// Example: /// Example: SPACE
/// Constraints: Minimum length = 0, Maximum length = 10
func (rcv *OrbitTrack_Full) VehType() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(78))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The type of vehicle with which the device is associated.  Based on MIL-STD-2525 symbology definitions.
/// Example: /// Example: SPACE
/// Constraints: Minimum length = 0, Maximum length = 10
/// UUID identifying the track, which should remain the same on subsequent tracks of the same object.
/// Example: /// Example: 3668f135-fcba-4630-a43d-e7782e11d988
/// Constraints: Minimum length = 0, Maximum length = 36
func (rcv *OrbitTrack_Full) TrkId() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(80))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// UUID identifying the track, which should remain the same on subsequent tracks of the same object.
/// Example: /// Example: 3668f135-fcba-4630-a43d-e7782e11d988
/// Constraints: Minimum length = 0, Maximum length = 36
/// TrackSensor Collection.
/// Example: /// Example: No example provided.
/// Constraints: No constraints specified.
func (rcv *OrbitTrack_Full) TrackSensors(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(82))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *OrbitTrack_Full) TrackSensorsLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(82))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

/// TrackSensor Collection.
/// Example: /// Example: No example provided.
/// Constraints: No constraints specified.
/// Time the row was created in the database.
/// Example: /// Example: 2021-02-25T12:00:00.123Z
/// Constraints: No constraints specified.
func (rcv *OrbitTrack_Full) CreatedAt() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(84))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Time the row was created in the database.
/// Example: /// Example: 2021-02-25T12:00:00.123Z
/// Constraints: No constraints specified.
/// Application user who created the row in the database.
/// Example: /// Example: some.user
/// Constraints: Minimum length = 0, Maximum length = 64
func (rcv *OrbitTrack_Full) CreatedBy() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(86))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Application user who created the row in the database.
/// Example: /// Example: some.user
/// Constraints: Minimum length = 0, Maximum length = 64
/// Source of the data.
/// Example: /// Example: Bluestaq
/// Constraints: Minimum length = 1, Maximum length = 64
func (rcv *OrbitTrack_Full) Source() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(88))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Source of the data.
/// Example: /// Example: Bluestaq
/// Constraints: Minimum length = 1, Maximum length = 64
/// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
/// Example: /// Example: THIRD_PARTY_DATASOURCE
/// Constraints: Minimum length = 0, Maximum length = 64
func (rcv *OrbitTrack_Full) Origin() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(90))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
/// Example: /// Example: THIRD_PARTY_DATASOURCE
/// Constraints: Minimum length = 0, Maximum length = 64
/// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
/// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
/// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
/// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
/// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
/// Example: /// Example: TEST
/// Constraints: Minimum length = 1, Maximum length = 32
func (rcv *OrbitTrack_Full) DataMode() OrbitTrack_Full_dataMode_Enum {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(92))
	if o != 0 {
		return OrbitTrack_Full_dataMode_Enum(rcv._tab.GetInt8(o + rcv._tab.Pos))
	}
	return 0
}

/// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
/// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
/// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
/// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
/// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
/// Example: /// Example: TEST
/// Constraints: Minimum length = 1, Maximum length = 32
func (rcv *OrbitTrack_Full) MutateDataMode(n OrbitTrack_Full_dataMode_Enum) bool {
	return rcv._tab.MutateInt8Slot(92, int8(n))
}

/// The originating source network on which this record was created, auto-populated by the system.
/// Example: /// Example: ORIG
/// Constraints: Minimum length = 1, Maximum length = 32
func (rcv *OrbitTrack_Full) OrigNetwork() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(94))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The originating source network on which this record was created, auto-populated by the system.
/// Example: /// Example: ORIG
/// Constraints: Minimum length = 1, Maximum length = 32
func OrbitTrack_FullStart(builder *flatbuffers.Builder) {
	builder.StartObject(46)
}
func OrbitTrack_FullAddId(builder *flatbuffers.Builder, id flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(id), 0)
}
func OrbitTrack_FullAddClassificationMarking(builder *flatbuffers.Builder, classificationMarking flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(classificationMarking), 0)
}
func OrbitTrack_FullAddIdOnOrbit(builder *flatbuffers.Builder, idOnOrbit flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(idOnOrbit), 0)
}
func OrbitTrack_FullAddSatNo(builder *flatbuffers.Builder, satNo int32) {
	builder.PrependInt32Slot(3, satNo, 0)
}
func OrbitTrack_FullAddOnOrbit(builder *flatbuffers.Builder, onOrbit flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(4, flatbuffers.UOffsetT(onOrbit), 0)
}
func OrbitTrack_FullAddOrigObjectId(builder *flatbuffers.Builder, origObjectId flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(5, flatbuffers.UOffsetT(origObjectId), 0)
}
func OrbitTrack_FullAddIdElset(builder *flatbuffers.Builder, idElset flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(6, flatbuffers.UOffsetT(idElset), 0)
}
func OrbitTrack_FullAddTs(builder *flatbuffers.Builder, ts flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(7, flatbuffers.UOffsetT(ts), 0)
}
func OrbitTrack_FullAddLat(builder *flatbuffers.Builder, lat float64) {
	builder.PrependFloat64Slot(8, lat, 0.0)
}
func OrbitTrack_FullAddLon(builder *flatbuffers.Builder, lon float64) {
	builder.PrependFloat64Slot(9, lon, 0.0)
}
func OrbitTrack_FullAddAlt(builder *flatbuffers.Builder, alt float64) {
	builder.PrependFloat64Slot(10, alt, 0.0)
}
func OrbitTrack_FullAddRdfRf(builder *flatbuffers.Builder, rdfRf float64) {
	builder.PrependFloat64Slot(11, rdfRf, 0.0)
}
func OrbitTrack_FullAddCallSign(builder *flatbuffers.Builder, callSign flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(12, flatbuffers.UOffsetT(callSign), 0)
}
func OrbitTrack_FullAddRptNum(builder *flatbuffers.Builder, rptNum flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(13, flatbuffers.UOffsetT(rptNum), 0)
}
func OrbitTrack_FullAddObjIdent(builder *flatbuffers.Builder, objIdent OrbitTrack_Full_objIdent_Enum) {
	builder.PrependInt8Slot(14, int8(objIdent), 0)
}
func OrbitTrack_FullAddIdentAmp(builder *flatbuffers.Builder, identAmp flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(15, flatbuffers.UOffsetT(identAmp), 0)
}
func OrbitTrack_FullAddSatStatus(builder *flatbuffers.Builder, satStatus flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(16, flatbuffers.UOffsetT(satStatus), 0)
}
func OrbitTrack_FullAddObjectType(builder *flatbuffers.Builder, objectType OrbitTrack_Full_objectType_Enum) {
	builder.PrependInt8Slot(17, int8(objectType), 0)
}
func OrbitTrack_FullAddCountryCode(builder *flatbuffers.Builder, countryCode flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(18, flatbuffers.UOffsetT(countryCode), 0)
}
func OrbitTrack_FullAddDecay(builder *flatbuffers.Builder, decay float64) {
	builder.PrependFloat64Slot(19, decay, 0.0)
}
func OrbitTrack_FullAddCharlieLine(builder *flatbuffers.Builder, charlieLine flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(20, flatbuffers.UOffsetT(charlieLine), 0)
}
func OrbitTrack_FullAddAouType(builder *flatbuffers.Builder, aouType flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(21, flatbuffers.UOffsetT(aouType), 0)
}
func OrbitTrack_FullAddAouData(builder *flatbuffers.Builder, aouData flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(22, flatbuffers.UOffsetT(aouData), 0)
}
func OrbitTrack_FullStartAouDataVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func OrbitTrack_FullAddSpd(builder *flatbuffers.Builder, spd float64) {
	builder.PrependFloat64Slot(23, spd, 0.0)
}
func OrbitTrack_FullAddAngElev(builder *flatbuffers.Builder, angElev float64) {
	builder.PrependFloat64Slot(24, angElev, 0.0)
}
func OrbitTrack_FullAddCntnmnt(builder *flatbuffers.Builder, cntnmnt float64) {
	builder.PrependFloat64Slot(25, cntnmnt, 0.0)
}
func OrbitTrack_FullAddXref(builder *flatbuffers.Builder, xref flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(26, flatbuffers.UOffsetT(xref), 0)
}
func OrbitTrack_FullAddChXref(builder *flatbuffers.Builder, chXref flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(27, flatbuffers.UOffsetT(chXref), 0)
}
func OrbitTrack_FullAddAmplification(builder *flatbuffers.Builder, amplification flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(28, flatbuffers.UOffsetT(amplification), 0)
}
func OrbitTrack_FullAddIff(builder *flatbuffers.Builder, iff flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(29, flatbuffers.UOffsetT(iff), 0)
}
func OrbitTrack_FullAddReinforced(builder *flatbuffers.Builder, reinforced bool) {
	builder.PrependBoolSlot(30, reinforced, false)
}
func OrbitTrack_FullAddReduced(builder *flatbuffers.Builder, reduced bool) {
	builder.PrependBoolSlot(31, reduced, false)
}
func OrbitTrack_FullAddHq(builder *flatbuffers.Builder, hq bool) {
	builder.PrependBoolSlot(32, hq, false)
}
func OrbitTrack_FullAddDummy(builder *flatbuffers.Builder, dummy bool) {
	builder.PrependBoolSlot(33, dummy, false)
}
func OrbitTrack_FullAddTaskForce(builder *flatbuffers.Builder, taskForce bool) {
	builder.PrependBoolSlot(34, taskForce, false)
}
func OrbitTrack_FullAddFeint(builder *flatbuffers.Builder, feint bool) {
	builder.PrependBoolSlot(35, feint, false)
}
func OrbitTrack_FullAddInstallation(builder *flatbuffers.Builder, installation bool) {
	builder.PrependBoolSlot(36, installation, false)
}
func OrbitTrack_FullAddVehType(builder *flatbuffers.Builder, vehType flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(37, flatbuffers.UOffsetT(vehType), 0)
}
func OrbitTrack_FullAddTrkId(builder *flatbuffers.Builder, trkId flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(38, flatbuffers.UOffsetT(trkId), 0)
}
func OrbitTrack_FullAddTrackSensors(builder *flatbuffers.Builder, trackSensors flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(39, flatbuffers.UOffsetT(trackSensors), 0)
}
func OrbitTrack_FullStartTrackSensorsVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func OrbitTrack_FullAddCreatedAt(builder *flatbuffers.Builder, createdAt flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(40, flatbuffers.UOffsetT(createdAt), 0)
}
func OrbitTrack_FullAddCreatedBy(builder *flatbuffers.Builder, createdBy flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(41, flatbuffers.UOffsetT(createdBy), 0)
}
func OrbitTrack_FullAddSource(builder *flatbuffers.Builder, source flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(42, flatbuffers.UOffsetT(source), 0)
}
func OrbitTrack_FullAddOrigin(builder *flatbuffers.Builder, origin flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(43, flatbuffers.UOffsetT(origin), 0)
}
func OrbitTrack_FullAddDataMode(builder *flatbuffers.Builder, dataMode OrbitTrack_Full_dataMode_Enum) {
	builder.PrependInt8Slot(44, int8(dataMode), 0)
}
func OrbitTrack_FullAddOrigNetwork(builder *flatbuffers.Builder, origNetwork flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(45, flatbuffers.UOffsetT(origNetwork), 0)
}
func OrbitTrack_FullEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
