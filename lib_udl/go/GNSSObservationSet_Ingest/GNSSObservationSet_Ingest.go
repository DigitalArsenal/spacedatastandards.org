// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package GNSSObservationSet_Ingest

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

/// /// Set of GNSSObservation data.
type GNSSObservationSet_Ingest struct {
	_tab flatbuffers.Table
}

const GNSSObservationSet_IngestIdentifier = "GNSS"

func GetRootAsGNSSObservationSet_Ingest(buf []byte, offset flatbuffers.UOffsetT) *GNSSObservationSet_Ingest {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &GNSSObservationSet_Ingest{}
	x.Init(buf, n+offset)
	return x
}

func FinishGNSSObservationSet_IngestBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	identifierBytes := []byte(GNSSObservationSet_IngestIdentifier)
	builder.FinishWithFileIdentifier(offset, identifierBytes)
}

func GNSSObservationSet_IngestBufferHasIdentifier(buf []byte) bool {
	return flatbuffers.BufferHasIdentifier(buf, GNSSObservationSet_IngestIdentifier)
}

func GetSizePrefixedRootAsGNSSObservationSet_Ingest(buf []byte, offset flatbuffers.UOffsetT) *GNSSObservationSet_Ingest {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &GNSSObservationSet_Ingest{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedGNSSObservationSet_IngestBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	identifierBytes := []byte(GNSSObservationSet_IngestIdentifier)
	builder.FinishSizePrefixedWithFileIdentifier(offset, identifierBytes)
}

func SizePrefixedGNSSObservationSet_IngestBufferHasIdentifier(buf []byte) bool {
	return flatbuffers.SizePrefixedBufferHasIdentifier(buf, GNSSObservationSet_IngestIdentifier)
}

func (rcv *GNSSObservationSet_Ingest) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *GNSSObservationSet_Ingest) Table() flatbuffers.Table {
	return rcv._tab
}

/// Unique identifier of the record, auto-generated by the system.
/// Example: /// Example: GNSSObSet-ID
/// Constraints: Minimum length = 1, Maximum length = 36
func (rcv *GNSSObservationSet_Ingest) Id() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Unique identifier of the record, auto-generated by the system.
/// Example: /// Example: GNSSObSet-ID
/// Constraints: Minimum length = 1, Maximum length = 36
/// Classification marking of the data in IC/CAPCO Portion-marked format.
/// Example: /// Example: U
/// Constraints: Minimum length = 1, Maximum length = 128
func (rcv *GNSSObservationSet_Ingest) ClassificationMarking() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Classification marking of the data in IC/CAPCO Portion-marked format.
/// Example: /// Example: U
/// Constraints: Minimum length = 1, Maximum length = 128
/// The marker type of the observing receiver (AIRBORNE, ANIMAL, BALLISTIC, FIXED BUOY, FLOATING BUOY, FLOATING ICE, GEODETIC, GLACIER, GROUNDCRAFT, HUMAN, NON GEODETIC, NON PHYSICAL, SPACEBORNE, WATERCRAFT).  Reference RINEX 3+ for further information concerning marker types.
/// Example: /// Example: SPACEBORNE
/// Constraints: Minimum length = 0, Maximum length = 24
func (rcv *GNSSObservationSet_Ingest) MarkerType() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The marker type of the observing receiver (AIRBORNE, ANIMAL, BALLISTIC, FIXED BUOY, FLOATING BUOY, FLOATING ICE, GEODETIC, GLACIER, GROUNDCRAFT, HUMAN, NON GEODETIC, NON PHYSICAL, SPACEBORNE, WATERCRAFT).  Reference RINEX 3+ for further information concerning marker types.
/// Example: /// Example: SPACEBORNE
/// Constraints: Minimum length = 0, Maximum length = 24
/// Unique identifier of the primary satellite on-orbit object.
/// Example: /// Example: ONORBIT-ID
/// Constraints: Minimum length = 0, Maximum length = 36
func (rcv *GNSSObservationSet_Ingest) IdOnOrbit() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Unique identifier of the primary satellite on-orbit object.
/// Example: /// Example: ONORBIT-ID
/// Constraints: Minimum length = 0, Maximum length = 36
/// Satellite/catalog number of the target on-orbit object.
/// Example: /// Example: 2
/// Constraints: No constraints specified.
func (rcv *GNSSObservationSet_Ingest) SatNo() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

/// Satellite/catalog number of the target on-orbit object.
/// Example: /// Example: 2
/// Constraints: No constraints specified.
func (rcv *GNSSObservationSet_Ingest) MutateSatNo(n int32) bool {
	return rcv._tab.MutateInt32Slot(12, n)
}

/// Optional identifier provided by ephemeris source to indicate the target object of this ephemeris. This may be an internal identifier and not necessarily map to a valid satellite number.
/// Example: /// Example: ORIGOBJECT-ID
/// Constraints: Minimum length = 0, Maximum length = 36
func (rcv *GNSSObservationSet_Ingest) OrigObjectId() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Optional identifier provided by ephemeris source to indicate the target object of this ephemeris. This may be an internal identifier and not necessarily map to a valid satellite number.
/// Example: /// Example: ORIGOBJECT-ID
/// Constraints: Minimum length = 0, Maximum length = 36
/// Observation Time, in ISO8601 UTC format with microsecond precision.  This timestamp applies to all observations within the set.
/// Example: /// Example: 2022-01-01T00:00:00.123456Z
/// Constraints: No constraints specified.
func (rcv *GNSSObservationSet_Ingest) Ts() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Observation Time, in ISO8601 UTC format with microsecond precision.  This timestamp applies to all observations within the set.
/// Example: /// Example: 2022-01-01T00:00:00.123456Z
/// Constraints: No constraints specified.
/// Time, in seconds, that the receiver has been unable to compute a GNSS fix.
/// Example: /// Example: 200
/// Constraints: No constraints specified.
func (rcv *GNSSObservationSet_Ingest) Outage() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(18))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

/// Time, in seconds, that the receiver has been unable to compute a GNSS fix.
/// Example: /// Example: 200
/// Constraints: No constraints specified.
func (rcv *GNSSObservationSet_Ingest) MutateOutage(n int32) bool {
	return rcv._tab.MutateInt32Slot(18, n)
}

/// Geometric Dilution of Precision.
/// Example: /// Example: 0.33
/// Constraints: No constraints specified.
func (rcv *GNSSObservationSet_Ingest) GDop() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(20))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Geometric Dilution of Precision.
/// Example: /// Example: 0.33
/// Constraints: No constraints specified.
func (rcv *GNSSObservationSet_Ingest) MutateGDop(n float64) bool {
	return rcv._tab.MutateFloat64Slot(20, n)
}

/// Horizontal Dilution of Precision.
/// Example: /// Example: 0.03
/// Constraints: No constraints specified.
func (rcv *GNSSObservationSet_Ingest) HDop() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(22))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Horizontal Dilution of Precision.
/// Example: /// Example: 0.03
/// Constraints: No constraints specified.
func (rcv *GNSSObservationSet_Ingest) MutateHDop(n float64) bool {
	return rcv._tab.MutateFloat64Slot(22, n)
}

/// Position Dilution of Precision.
/// Example: /// Example: 0.002
/// Constraints: No constraints specified.
func (rcv *GNSSObservationSet_Ingest) PDop() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(24))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Position Dilution of Precision.
/// Example: /// Example: 0.002
/// Constraints: No constraints specified.
func (rcv *GNSSObservationSet_Ingest) MutatePDop(n float64) bool {
	return rcv._tab.MutateFloat64Slot(24, n)
}

/// Time Dilution of Precision.
/// Example: /// Example: 0.05
/// Constraints: No constraints specified.
func (rcv *GNSSObservationSet_Ingest) TDop() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(26))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Time Dilution of Precision.
/// Example: /// Example: 0.05
/// Constraints: No constraints specified.
func (rcv *GNSSObservationSet_Ingest) MutateTDop(n float64) bool {
	return rcv._tab.MutateFloat64Slot(26, n)
}

/// Vertical Dilution of Precision.
/// Example: /// Example: 0.03
/// Constraints: No constraints specified.
func (rcv *GNSSObservationSet_Ingest) VDop() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(28))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Vertical Dilution of Precision.
/// Example: /// Example: 0.03
/// Constraints: No constraints specified.
func (rcv *GNSSObservationSet_Ingest) MutateVDop(n float64) bool {
	return rcv._tab.MutateFloat64Slot(28, n)
}

/// Unique identifier of the parent Ephemeris Set, if this data is correlated with an Ephemeris.  If reporting for a spacecraft with multiple onboard GNSS receivers, this ID may be associated with multiple GNSS Observation records if each receiver is synced to the ephemeris points.
/// Example: /// Example: ES-ID
/// Constraints: Minimum length = 0, Maximum length = 36
func (rcv *GNSSObservationSet_Ingest) EsId() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(30))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Unique identifier of the parent Ephemeris Set, if this data is correlated with an Ephemeris.  If reporting for a spacecraft with multiple onboard GNSS receivers, this ID may be associated with multiple GNSS Observation records if each receiver is synced to the ephemeris points.
/// Example: /// Example: ES-ID
/// Constraints: Minimum length = 0, Maximum length = 36
/// The number or ID of the GNSS receiver associated with this data.  Each GNSS Observation Set is associated with only one receiver.  If reporting for multiple receivers a separate set should be generated for each.  A null value is assumed to indicate that only one receiver is present, or reported.
/// Example: /// Example: RECEIVER-ID
/// Constraints: Minimum length = 0, Maximum length = 36
func (rcv *GNSSObservationSet_Ingest) Receiver() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(32))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The number or ID of the GNSS receiver associated with this data.  Each GNSS Observation Set is associated with only one receiver.  If reporting for multiple receivers a separate set should be generated for each.  A null value is assumed to indicate that only one receiver is present, or reported.
/// Example: /// Example: RECEIVER-ID
/// Constraints: Minimum length = 0, Maximum length = 36
/// unit vector of the outward facing direction of the receiver boresight in a body-fixed coordinate system.
/// Example: /// Example: [1.23, 3.23]
/// Constraints: No constraints specified.
func (rcv *GNSSObservationSet_Ingest) Boresight(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(34))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *GNSSObservationSet_Ingest) BoresightLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(34))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

/// unit vector of the outward facing direction of the receiver boresight in a body-fixed coordinate system.
/// Example: /// Example: [1.23, 3.23]
/// Constraints: No constraints specified.
/// The quaternion describing the rotation of the body-fixed frame used for this system into the local geodetic frame, at observation time (ts). The array element order convention is scalar component first, followed by the three vector components. For a vector u in the body-fixed frame, the corresponding vector u' in the geodetic frame should satisfy u' = quq*, where q is this quaternion.
/// Example: /// Example: [0.03, 0.02, 0.01, 0.012]
/// Constraints: No constraints specified.
func (rcv *GNSSObservationSet_Ingest) Quat(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(36))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *GNSSObservationSet_Ingest) QuatLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(36))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

/// The quaternion describing the rotation of the body-fixed frame used for this system into the local geodetic frame, at observation time (ts). The array element order convention is scalar component first, followed by the three vector components. For a vector u in the body-fixed frame, the corresponding vector u' in the geodetic frame should satisfy u' = quq*, where q is this quaternion.
/// Example: /// Example: [0.03, 0.02, 0.01, 0.012]
/// Constraints: No constraints specified.
/// WGS-84 spacecraft latitude sub-point at observation time (ts), represented as -90 to 90 degrees (negative values south of equator).
/// Example: /// Example: 32.021
/// Constraints: No constraints specified.
func (rcv *GNSSObservationSet_Ingest) Lat() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(38))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// WGS-84 spacecraft latitude sub-point at observation time (ts), represented as -90 to 90 degrees (negative values south of equator).
/// Example: /// Example: 32.021
/// Constraints: No constraints specified.
func (rcv *GNSSObservationSet_Ingest) MutateLat(n float64) bool {
	return rcv._tab.MutateFloat64Slot(38, n)
}

/// WGS-84 spacecraft longitude sub-point at observation time (ts), represented as -180 to 180 degrees (negative values west of Prime Meridian).
/// Example: /// Example: 125.123
/// Constraints: No constraints specified.
func (rcv *GNSSObservationSet_Ingest) Lon() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(40))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// WGS-84 spacecraft longitude sub-point at observation time (ts), represented as -180 to 180 degrees (negative values west of Prime Meridian).
/// Example: /// Example: 125.123
/// Constraints: No constraints specified.
func (rcv *GNSSObservationSet_Ingest) MutateLon(n float64) bool {
	return rcv._tab.MutateFloat64Slot(40, n)
}

/// Spacecraft altitude at observation time (ts), expressed in kilometers above WGS-84 ellipsoid.
/// Example: /// Example: 200
/// Constraints: No constraints specified.
func (rcv *GNSSObservationSet_Ingest) Alt() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(42))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Spacecraft altitude at observation time (ts), expressed in kilometers above WGS-84 ellipsoid.
/// Example: /// Example: 200
/// Constraints: No constraints specified.
func (rcv *GNSSObservationSet_Ingest) MutateAlt(n float64) bool {
	return rcv._tab.MutateFloat64Slot(42, n)
}

/// Three element array, expressing the ECI J2K spacecraft velocity components, in km/second, at observation time (ts).  The array element order is [xvel, yvel, zvel].
/// Example: /// Example: [2.03, 0.003, 0.12]
/// Constraints: No constraints specified.
func (rcv *GNSSObservationSet_Ingest) SatVelocity(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(44))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *GNSSObservationSet_Ingest) SatVelocityLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(44))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

/// Three element array, expressing the ECI J2K spacecraft velocity components, in km/second, at observation time (ts).  The array element order is [xvel, yvel, zvel].
/// Example: /// Example: [2.03, 0.003, 0.12]
/// Constraints: No constraints specified.
/// Array of the strings containing the individual observation code sets that are contained within this GNSS Observation set.  Each string is a three-character representation of the measurement type, the channel, and the coding, in compliance with the RINEX 3+ standard (Pseudorange (C), Carrier Phase (L), Doppler (D), Signal Strength C/No (S), or Channel Number (X)).  See the GNSS Observation ob field for the units of measure associated with each observation type.
/// Example: /// Example: ['ACL']
/// Constraints: No constraints specified.
func (rcv *GNSSObservationSet_Ingest) ObsCodes(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(46))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *GNSSObservationSet_Ingest) ObsCodesLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(46))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

/// Array of the strings containing the individual observation code sets that are contained within this GNSS Observation set.  Each string is a three-character representation of the measurement type, the channel, and the coding, in compliance with the RINEX 3+ standard (Pseudorange (C), Carrier Phase (L), Doppler (D), Signal Strength C/No (S), or Channel Number (X)).  See the GNSS Observation ob field for the units of measure associated with each observation type.
/// Example: /// Example: ['ACL']
/// Constraints: No constraints specified.
/// Status of the GNSS receiver signal. Status options are 0, 1 or 2 (0 being the best).
/// Example: /// Example: 0
/// Constraints: No constraints specified.
func (rcv *GNSSObservationSet_Ingest) TrackingStatus() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(48))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

/// Status of the GNSS receiver signal. Status options are 0, 1 or 2 (0 being the best).
/// Example: /// Example: 0
/// Constraints: No constraints specified.
func (rcv *GNSSObservationSet_Ingest) MutateTrackingStatus(n int32) bool {
	return rcv._tab.MutateInt32Slot(48, n)
}

/// The current navigation status as defined by the data source. In general the navigation status specifies whether the signal is normal, degraded, or unavailable. For status value definitions please reach out to data source provider.
/// Example: /// Example: degraded
/// Constraints: No constraints specified.
func (rcv *GNSSObservationSet_Ingest) NavigationStatus() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(50))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The current navigation status as defined by the data source. In general the navigation status specifies whether the signal is normal, degraded, or unavailable. For status value definitions please reach out to data source provider.
/// Example: /// Example: degraded
/// Constraints: No constraints specified.
/// GNSS Automatic Gain Control State.
/// Example: /// Example: 20
/// Constraints: No constraints specified.
func (rcv *GNSSObservationSet_Ingest) AgcState() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(52))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

/// GNSS Automatic Gain Control State.
/// Example: /// Example: 20
/// Constraints: No constraints specified.
func (rcv *GNSSObservationSet_Ingest) MutateAgcState(n int32) bool {
	return rcv._tab.MutateInt32Slot(52, n)
}

/// Array of UDL record types (AIS, CONJUNCTION, DOA, ELSET, EO, ESID, GROUNDIMAGE, POI, MANEUVER, MTI, NOTIFICATION, RADAR, RF, SIGACT, SKYIMAGE, SV, TRACK) that are related to this GNSS Observation Set. See the associated 'srcIds' array for the record UUIDs, positionally corresponding to the record types in this array. The 'srcTyps' and 'srcIds' arrays must match in size.
/// Example: /// Example: ['SV', 'SV']
/// Constraints: No constraints specified.
func (rcv *GNSSObservationSet_Ingest) SrcTyps(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(54))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *GNSSObservationSet_Ingest) SrcTypsLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(54))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

/// Array of UDL record types (AIS, CONJUNCTION, DOA, ELSET, EO, ESID, GROUNDIMAGE, POI, MANEUVER, MTI, NOTIFICATION, RADAR, RF, SIGACT, SKYIMAGE, SV, TRACK) that are related to this GNSS Observation Set. See the associated 'srcIds' array for the record UUIDs, positionally corresponding to the record types in this array. The 'srcTyps' and 'srcIds' arrays must match in size.
/// Example: /// Example: ['SV', 'SV']
/// Constraints: No constraints specified.
/// Array of UUIDs of the UDL data records that are related to this GNSS Observation Set. See the associated 'srcTyps' array for the specific types of data, positionally corresponding to the UUIDs in this array. The 'srcTyps' and 'srcIds' arrays must match in size. See the corresponding srcTyps array element for the data type of the UUID and use the appropriate API operation to retrieve that object (e.g. /udl/statevector/{uuid}).
/// Example: /// Example: ['SV_ID', 'SV_ID']
/// Constraints: No constraints specified.
func (rcv *GNSSObservationSet_Ingest) SrcIds(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(56))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *GNSSObservationSet_Ingest) SrcIdsLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(56))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

/// Array of UUIDs of the UDL data records that are related to this GNSS Observation Set. See the associated 'srcTyps' array for the specific types of data, positionally corresponding to the UUIDs in this array. The 'srcTyps' and 'srcIds' arrays must match in size. See the corresponding srcTyps array element for the data type of the UUID and use the appropriate API operation to retrieve that object (e.g. /udl/statevector/{uuid}).
/// Example: /// Example: ['SV_ID', 'SV_ID']
/// Constraints: No constraints specified.
/// Optional array of provider/source specific tags for this data, where each element is no longer than 32 characters, used for implementing data owner conditional access controls to restrict access to the data. Should be left null by data providers unless conditional access controls are coordinated with the UDL team.
/// Example: /// Example: ['TAG1', 'TAG2']
/// Constraints: No constraints specified.
func (rcv *GNSSObservationSet_Ingest) Tags(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(58))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *GNSSObservationSet_Ingest) TagsLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(58))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

/// Optional array of provider/source specific tags for this data, where each element is no longer than 32 characters, used for implementing data owner conditional access controls to restrict access to the data. Should be left null by data providers unless conditional access controls are coordinated with the UDL team.
/// Example: /// Example: ['TAG1', 'TAG2']
/// Constraints: No constraints specified.
/// Optional identifier to track a commercial or marketplace transaction executed to produce this data.
/// Example: /// Example: TRANSACTION-ID
/// Constraints: Minimum length = 0, Maximum length = 64
func (rcv *GNSSObservationSet_Ingest) TransactionId() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(60))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Optional identifier to track a commercial or marketplace transaction executed to produce this data.
/// Example: /// Example: TRANSACTION-ID
/// Constraints: Minimum length = 0, Maximum length = 64
/// Time the row was created in the database, auto-populated by the system.
/// Example: /// Example: 2018-01-01T16:00:00.123Z
/// Constraints: No constraints specified.
func (rcv *GNSSObservationSet_Ingest) CreatedAt() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(62))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Time the row was created in the database, auto-populated by the system.
/// Example: /// Example: 2018-01-01T16:00:00.123Z
/// Constraints: No constraints specified.
/// Application user who created the row in the database, auto-populated by the system.
/// Example: /// Example: some.user
/// Constraints: Minimum length = 1, Maximum length = 64
func (rcv *GNSSObservationSet_Ingest) CreatedBy() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(64))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Application user who created the row in the database, auto-populated by the system.
/// Example: /// Example: some.user
/// Constraints: Minimum length = 1, Maximum length = 64
/// Source of the data.
/// Example: /// Example: Bluestaq
/// Constraints: Minimum length = 1, Maximum length = 64
func (rcv *GNSSObservationSet_Ingest) Source() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(66))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Source of the data.
/// Example: /// Example: Bluestaq
/// Constraints: Minimum length = 1, Maximum length = 64
/// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
/// Example: /// Example: THIRD_PARTY_DATASOURCE
/// Constraints: Minimum length = 0, Maximum length = 64
func (rcv *GNSSObservationSet_Ingest) Origin() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(68))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
/// Example: /// Example: THIRD_PARTY_DATASOURCE
/// Constraints: Minimum length = 0, Maximum length = 64
/// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
/// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
/// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
/// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
/// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
/// Example: /// Example: TEST
/// Constraints: Minimum length = 1, Maximum length = 32
func (rcv *GNSSObservationSet_Ingest) DataMode() GNSSObservationSet_Ingest_dataMode_Enum {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(70))
	if o != 0 {
		return GNSSObservationSet_Ingest_dataMode_Enum(rcv._tab.GetInt8(o + rcv._tab.Pos))
	}
	return 0
}

/// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
/// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
/// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
/// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
/// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
/// Example: /// Example: TEST
/// Constraints: Minimum length = 1, Maximum length = 32
func (rcv *GNSSObservationSet_Ingest) MutateDataMode(n GNSSObservationSet_Ingest_dataMode_Enum) bool {
	return rcv._tab.MutateInt8Slot(70, int8(n))
}

/// The originating source network on which this record was created, auto-populated by the system.
/// Example: /// Example: ORIG
/// Constraints: Minimum length = 1, Maximum length = 32
func (rcv *GNSSObservationSet_Ingest) OrigNetwork() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(72))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The originating source network on which this record was created, auto-populated by the system.
/// Example: /// Example: ORIG
/// Constraints: Minimum length = 1, Maximum length = 32
/// GNSSObservations associated with this GNSSObservationSet.
/// Example: /// Example: No example provided.
/// Constraints: No constraints specified.
func (rcv *GNSSObservationSet_Ingest) GnssObservationList(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(74))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *GNSSObservationSet_Ingest) GnssObservationListLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(74))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

/// GNSSObservations associated with this GNSSObservationSet.
/// Example: /// Example: No example provided.
/// Constraints: No constraints specified.
func GNSSObservationSet_IngestStart(builder *flatbuffers.Builder) {
	builder.StartObject(36)
}
func GNSSObservationSet_IngestAddId(builder *flatbuffers.Builder, id flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(id), 0)
}
func GNSSObservationSet_IngestAddClassificationMarking(builder *flatbuffers.Builder, classificationMarking flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(classificationMarking), 0)
}
func GNSSObservationSet_IngestAddMarkerType(builder *flatbuffers.Builder, markerType flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(markerType), 0)
}
func GNSSObservationSet_IngestAddIdOnOrbit(builder *flatbuffers.Builder, idOnOrbit flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(3, flatbuffers.UOffsetT(idOnOrbit), 0)
}
func GNSSObservationSet_IngestAddSatNo(builder *flatbuffers.Builder, satNo int32) {
	builder.PrependInt32Slot(4, satNo, 0)
}
func GNSSObservationSet_IngestAddOrigObjectId(builder *flatbuffers.Builder, origObjectId flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(5, flatbuffers.UOffsetT(origObjectId), 0)
}
func GNSSObservationSet_IngestAddTs(builder *flatbuffers.Builder, ts flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(6, flatbuffers.UOffsetT(ts), 0)
}
func GNSSObservationSet_IngestAddOutage(builder *flatbuffers.Builder, outage int32) {
	builder.PrependInt32Slot(7, outage, 0)
}
func GNSSObservationSet_IngestAddGDop(builder *flatbuffers.Builder, gDop float64) {
	builder.PrependFloat64Slot(8, gDop, 0.0)
}
func GNSSObservationSet_IngestAddHDop(builder *flatbuffers.Builder, hDop float64) {
	builder.PrependFloat64Slot(9, hDop, 0.0)
}
func GNSSObservationSet_IngestAddPDop(builder *flatbuffers.Builder, pDop float64) {
	builder.PrependFloat64Slot(10, pDop, 0.0)
}
func GNSSObservationSet_IngestAddTDop(builder *flatbuffers.Builder, tDop float64) {
	builder.PrependFloat64Slot(11, tDop, 0.0)
}
func GNSSObservationSet_IngestAddVDop(builder *flatbuffers.Builder, vDop float64) {
	builder.PrependFloat64Slot(12, vDop, 0.0)
}
func GNSSObservationSet_IngestAddEsId(builder *flatbuffers.Builder, esId flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(13, flatbuffers.UOffsetT(esId), 0)
}
func GNSSObservationSet_IngestAddReceiver(builder *flatbuffers.Builder, receiver flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(14, flatbuffers.UOffsetT(receiver), 0)
}
func GNSSObservationSet_IngestAddBoresight(builder *flatbuffers.Builder, boresight flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(15, flatbuffers.UOffsetT(boresight), 0)
}
func GNSSObservationSet_IngestStartBoresightVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func GNSSObservationSet_IngestAddQuat(builder *flatbuffers.Builder, quat flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(16, flatbuffers.UOffsetT(quat), 0)
}
func GNSSObservationSet_IngestStartQuatVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func GNSSObservationSet_IngestAddLat(builder *flatbuffers.Builder, lat float64) {
	builder.PrependFloat64Slot(17, lat, 0.0)
}
func GNSSObservationSet_IngestAddLon(builder *flatbuffers.Builder, lon float64) {
	builder.PrependFloat64Slot(18, lon, 0.0)
}
func GNSSObservationSet_IngestAddAlt(builder *flatbuffers.Builder, alt float64) {
	builder.PrependFloat64Slot(19, alt, 0.0)
}
func GNSSObservationSet_IngestAddSatVelocity(builder *flatbuffers.Builder, satVelocity flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(20, flatbuffers.UOffsetT(satVelocity), 0)
}
func GNSSObservationSet_IngestStartSatVelocityVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func GNSSObservationSet_IngestAddObsCodes(builder *flatbuffers.Builder, obsCodes flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(21, flatbuffers.UOffsetT(obsCodes), 0)
}
func GNSSObservationSet_IngestStartObsCodesVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func GNSSObservationSet_IngestAddTrackingStatus(builder *flatbuffers.Builder, trackingStatus int32) {
	builder.PrependInt32Slot(22, trackingStatus, 0)
}
func GNSSObservationSet_IngestAddNavigationStatus(builder *flatbuffers.Builder, navigationStatus flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(23, flatbuffers.UOffsetT(navigationStatus), 0)
}
func GNSSObservationSet_IngestAddAgcState(builder *flatbuffers.Builder, agcState int32) {
	builder.PrependInt32Slot(24, agcState, 0)
}
func GNSSObservationSet_IngestAddSrcTyps(builder *flatbuffers.Builder, srcTyps flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(25, flatbuffers.UOffsetT(srcTyps), 0)
}
func GNSSObservationSet_IngestStartSrcTypsVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func GNSSObservationSet_IngestAddSrcIds(builder *flatbuffers.Builder, srcIds flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(26, flatbuffers.UOffsetT(srcIds), 0)
}
func GNSSObservationSet_IngestStartSrcIdsVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func GNSSObservationSet_IngestAddTags(builder *flatbuffers.Builder, tags flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(27, flatbuffers.UOffsetT(tags), 0)
}
func GNSSObservationSet_IngestStartTagsVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func GNSSObservationSet_IngestAddTransactionId(builder *flatbuffers.Builder, transactionId flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(28, flatbuffers.UOffsetT(transactionId), 0)
}
func GNSSObservationSet_IngestAddCreatedAt(builder *flatbuffers.Builder, createdAt flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(29, flatbuffers.UOffsetT(createdAt), 0)
}
func GNSSObservationSet_IngestAddCreatedBy(builder *flatbuffers.Builder, createdBy flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(30, flatbuffers.UOffsetT(createdBy), 0)
}
func GNSSObservationSet_IngestAddSource(builder *flatbuffers.Builder, source flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(31, flatbuffers.UOffsetT(source), 0)
}
func GNSSObservationSet_IngestAddOrigin(builder *flatbuffers.Builder, origin flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(32, flatbuffers.UOffsetT(origin), 0)
}
func GNSSObservationSet_IngestAddDataMode(builder *flatbuffers.Builder, dataMode GNSSObservationSet_Ingest_dataMode_Enum) {
	builder.PrependInt8Slot(33, int8(dataMode), 0)
}
func GNSSObservationSet_IngestAddOrigNetwork(builder *flatbuffers.Builder, origNetwork flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(34, flatbuffers.UOffsetT(origNetwork), 0)
}
func GNSSObservationSet_IngestAddGnssObservationList(builder *flatbuffers.Builder, gnssObservationList flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(35, flatbuffers.UOffsetT(gnssObservationList), 0)
}
func GNSSObservationSet_IngestStartGnssObservationListVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func GNSSObservationSet_IngestEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
