// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package EngineDetails_Abridged

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

/// /// Known launch vehicle engine details and performance characteristics and limits compiled by a particular source.  A launch vehicle engine may have several details records from multiple sources.
type EngineDetails_Abridged struct {
	_tab flatbuffers.Table
}

const EngineDetails_AbridgedIdentifier = "ENGI"

func GetRootAsEngineDetails_Abridged(buf []byte, offset flatbuffers.UOffsetT) *EngineDetails_Abridged {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &EngineDetails_Abridged{}
	x.Init(buf, n+offset)
	return x
}

func FinishEngineDetails_AbridgedBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	identifierBytes := []byte(EngineDetails_AbridgedIdentifier)
	builder.FinishWithFileIdentifier(offset, identifierBytes)
}

func EngineDetails_AbridgedBufferHasIdentifier(buf []byte) bool {
	return flatbuffers.BufferHasIdentifier(buf, EngineDetails_AbridgedIdentifier)
}

func GetSizePrefixedRootAsEngineDetails_Abridged(buf []byte, offset flatbuffers.UOffsetT) *EngineDetails_Abridged {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &EngineDetails_Abridged{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedEngineDetails_AbridgedBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	identifierBytes := []byte(EngineDetails_AbridgedIdentifier)
	builder.FinishSizePrefixedWithFileIdentifier(offset, identifierBytes)
}

func SizePrefixedEngineDetails_AbridgedBufferHasIdentifier(buf []byte) bool {
	return flatbuffers.SizePrefixedBufferHasIdentifier(buf, EngineDetails_AbridgedIdentifier)
}

func (rcv *EngineDetails_Abridged) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *EngineDetails_Abridged) Table() flatbuffers.Table {
	return rcv._tab
}

/// Unique identifier of the record, auto-generated by the system.
/// Example: /// Example: ENGINEDETAILS-ID
/// Constraints: Minimum length = 1, Maximum length = 36
func (rcv *EngineDetails_Abridged) Id() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Unique identifier of the record, auto-generated by the system.
/// Example: /// Example: ENGINEDETAILS-ID
/// Constraints: Minimum length = 1, Maximum length = 36
/// Identifier of the parent engine record.
/// Example: /// Example: ENGINE-ID
/// Constraints: Minimum length = 1, Maximum length = 36
func (rcv *EngineDetails_Abridged) IdEngine() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Identifier of the parent engine record.
/// Example: /// Example: ENGINE-ID
/// Constraints: Minimum length = 1, Maximum length = 36
/// Classification marking of the data in IC/CAPCO Portion-marked format.
/// Example: /// Example: U
/// Constraints: Minimum length = 1, Maximum length = 128
func (rcv *EngineDetails_Abridged) ClassificationMarking() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Classification marking of the data in IC/CAPCO Portion-marked format.
/// Example: /// Example: U
/// Constraints: Minimum length = 1, Maximum length = 128
/// Engine type or family.
/// Example: /// Example: ENGINE_TYPE1
/// Constraints: Minimum length = 0, Maximum length = 64
func (rcv *EngineDetails_Abridged) Family() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Engine type or family.
/// Example: /// Example: ENGINE_TYPE1
/// Constraints: Minimum length = 0, Maximum length = 64
/// Engine cycle type (e.g. Electrostatic Ion, Pressure Fed, Hall, Catalytic Decomposition, etc.).
/// Example: /// Example: Pressure Fed
/// Constraints: Minimum length = 0, Maximum length = 64
func (rcv *EngineDetails_Abridged) CycleType() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Engine cycle type (e.g. Electrostatic Ion, Pressure Fed, Hall, Catalytic Decomposition, etc.).
/// Example: /// Example: Pressure Fed
/// Constraints: Minimum length = 0, Maximum length = 64
/// Engine characteristic type (e.g. Electric, Mono-propellant, Bi-propellant, etc.).
/// Example: /// Example: Electric
/// Constraints: Minimum length = 0, Maximum length = 64
func (rcv *EngineDetails_Abridged) CharacteristicType() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Engine characteristic type (e.g. Electric, Mono-propellant, Bi-propellant, etc.).
/// Example: /// Example: Electric
/// Constraints: Minimum length = 0, Maximum length = 64
/// Organization ID of the engine manufacturer.
/// Example: /// Example: MANUFACTURERORG-ID
/// Constraints: Minimum length = 0, Maximum length = 36
func (rcv *EngineDetails_Abridged) ManufacturerOrgId() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Organization ID of the engine manufacturer.
/// Example: /// Example: MANUFACTURERORG-ID
/// Constraints: Minimum length = 0, Maximum length = 36
/// Launch engine specific impulse in seconds.
/// Example: /// Example: 1.1
/// Constraints: No constraints specified.
func (rcv *EngineDetails_Abridged) SpecificImpulse() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(18))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Launch engine specific impulse in seconds.
/// Example: /// Example: 1.1
/// Constraints: No constraints specified.
func (rcv *EngineDetails_Abridged) MutateSpecificImpulse(n float64) bool {
	return rcv._tab.MutateFloat64Slot(18, n)
}

/// Launch engine maximum burn time in seconds.
/// Example: /// Example: 1.1
/// Constraints: No constraints specified.
func (rcv *EngineDetails_Abridged) BurnTime() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(20))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Launch engine maximum burn time in seconds.
/// Example: /// Example: 1.1
/// Constraints: No constraints specified.
func (rcv *EngineDetails_Abridged) MutateBurnTime(n float64) bool {
	return rcv._tab.MutateFloat64Slot(20, n)
}

/// Engine maximum thrust at sea level in Kilo-Newtons.
/// Example: /// Example: 1.1
/// Constraints: No constraints specified.
func (rcv *EngineDetails_Abridged) SeaLevelThrust() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(22))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Engine maximum thrust at sea level in Kilo-Newtons.
/// Example: /// Example: 1.1
/// Constraints: No constraints specified.
func (rcv *EngineDetails_Abridged) MutateSeaLevelThrust(n float64) bool {
	return rcv._tab.MutateFloat64Slot(22, n)
}

/// Engine maximum thrust in a vacuum in Kilo-Newtons.
/// Example: /// Example: 1.1
/// Constraints: No constraints specified.
func (rcv *EngineDetails_Abridged) VacuumThrust() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(24))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Engine maximum thrust in a vacuum in Kilo-Newtons.
/// Example: /// Example: 1.1
/// Constraints: No constraints specified.
func (rcv *EngineDetails_Abridged) MutateVacuumThrust(n float64) bool {
	return rcv._tab.MutateFloat64Slot(24, n)
}

/// Engine chamber pressure in bars.
/// Example: /// Example: 1.1
/// Constraints: No constraints specified.
func (rcv *EngineDetails_Abridged) ChamberPressure() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(26))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Engine chamber pressure in bars.
/// Example: /// Example: 1.1
/// Constraints: No constraints specified.
func (rcv *EngineDetails_Abridged) MutateChamberPressure(n float64) bool {
	return rcv._tab.MutateFloat64Slot(26, n)
}

/// Engine nozzle expansion ratio.
/// Example: /// Example: 1.1
/// Constraints: No constraints specified.
func (rcv *EngineDetails_Abridged) NozzleExpansionRatio() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(28))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Engine nozzle expansion ratio.
/// Example: /// Example: 1.1
/// Constraints: No constraints specified.
func (rcv *EngineDetails_Abridged) MutateNozzleExpansionRatio(n float64) bool {
	return rcv._tab.MutateFloat64Slot(28, n)
}

/// Engine maximum number of firings.
/// Example: /// Example: 5
/// Constraints: No constraints specified.
func (rcv *EngineDetails_Abridged) MaxFirings() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(30))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

/// Engine maximum number of firings.
/// Example: /// Example: 5
/// Constraints: No constraints specified.
func (rcv *EngineDetails_Abridged) MutateMaxFirings(n int32) bool {
	return rcv._tab.MutateInt32Slot(30, n)
}

/// Propellant/fuel type of the engine (e.g. Liquid Hydrogen, Kerosene, Aerozine, etc).
/// Example: /// Example: Liquid
/// Constraints: Minimum length = 0, Maximum length = 64
func (rcv *EngineDetails_Abridged) Propellant() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(32))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Propellant/fuel type of the engine (e.g. Liquid Hydrogen, Kerosene, Aerozine, etc).
/// Example: /// Example: Liquid
/// Constraints: Minimum length = 0, Maximum length = 64
/// Oxidizer type (e.g. Nitrogen Tetroxide, Liquid Oxygen, etc).
/// Example: /// Example: Liquid Oxygen
/// Constraints: Minimum length = 0, Maximum length = 64
func (rcv *EngineDetails_Abridged) Oxidizer() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(34))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Oxidizer type (e.g. Nitrogen Tetroxide, Liquid Oxygen, etc).
/// Example: /// Example: Liquid Oxygen
/// Constraints: Minimum length = 0, Maximum length = 64
/// Notes/Description of the engine.
/// Example: /// Example: Example notes
/// Constraints: Minimum length = 0, Maximum length = 1024
func (rcv *EngineDetails_Abridged) Notes() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(36))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Notes/Description of the engine.
/// Example: /// Example: Example notes
/// Constraints: Minimum length = 0, Maximum length = 1024
/// Time the row was created in the database, auto-populated by the system.
/// Example: /// Example: 2018-01-01T16:00:00.123Z
/// Constraints: No constraints specified.
func (rcv *EngineDetails_Abridged) CreatedAt() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(38))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Time the row was created in the database, auto-populated by the system.
/// Example: /// Example: 2018-01-01T16:00:00.123Z
/// Constraints: No constraints specified.
/// Application user who created the row in the database, auto-populated by the system.
/// Example: /// Example: some.user
/// Constraints: Minimum length = 1, Maximum length = 64
func (rcv *EngineDetails_Abridged) CreatedBy() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(40))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Application user who created the row in the database, auto-populated by the system.
/// Example: /// Example: some.user
/// Constraints: Minimum length = 1, Maximum length = 64
/// Source of the data.
/// Example: /// Example: Bluestaq
/// Constraints: Minimum length = 1, Maximum length = 64
func (rcv *EngineDetails_Abridged) Source() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(42))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Source of the data.
/// Example: /// Example: Bluestaq
/// Constraints: Minimum length = 1, Maximum length = 64
/// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
/// Example: /// Example: THIRD_PARTY_DATASOURCE
/// Constraints: Minimum length = 0, Maximum length = 64
func (rcv *EngineDetails_Abridged) Origin() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(44))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
/// Example: /// Example: THIRD_PARTY_DATASOURCE
/// Constraints: Minimum length = 0, Maximum length = 64
/// The originating source network on which this record was created, auto-populated by the system.
/// Example: /// Example: ORIG
/// Constraints: Minimum length = 1, Maximum length = 32
func (rcv *EngineDetails_Abridged) OrigNetwork() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(46))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The originating source network on which this record was created, auto-populated by the system.
/// Example: /// Example: ORIG
/// Constraints: Minimum length = 1, Maximum length = 32
/// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
/// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
/// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
/// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
/// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
/// Example: /// Example: TEST
/// Constraints: Minimum length = 1, Maximum length = 32
func (rcv *EngineDetails_Abridged) DataMode() EngineDetails_Abridged_dataMode_Enum {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(48))
	if o != 0 {
		return EngineDetails_Abridged_dataMode_Enum(rcv._tab.GetInt8(o + rcv._tab.Pos))
	}
	return 0
}

/// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
/// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
/// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
/// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
/// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
/// Example: /// Example: TEST
/// Constraints: Minimum length = 1, Maximum length = 32
func (rcv *EngineDetails_Abridged) MutateDataMode(n EngineDetails_Abridged_dataMode_Enum) bool {
	return rcv._tab.MutateInt8Slot(48, int8(n))
}

func EngineDetails_AbridgedStart(builder *flatbuffers.Builder) {
	builder.StartObject(23)
}
func EngineDetails_AbridgedAddId(builder *flatbuffers.Builder, id flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(id), 0)
}
func EngineDetails_AbridgedAddIdEngine(builder *flatbuffers.Builder, idEngine flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(idEngine), 0)
}
func EngineDetails_AbridgedAddClassificationMarking(builder *flatbuffers.Builder, classificationMarking flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(classificationMarking), 0)
}
func EngineDetails_AbridgedAddFamily(builder *flatbuffers.Builder, family flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(3, flatbuffers.UOffsetT(family), 0)
}
func EngineDetails_AbridgedAddCycleType(builder *flatbuffers.Builder, cycleType flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(4, flatbuffers.UOffsetT(cycleType), 0)
}
func EngineDetails_AbridgedAddCharacteristicType(builder *flatbuffers.Builder, characteristicType flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(5, flatbuffers.UOffsetT(characteristicType), 0)
}
func EngineDetails_AbridgedAddManufacturerOrgId(builder *flatbuffers.Builder, manufacturerOrgId flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(6, flatbuffers.UOffsetT(manufacturerOrgId), 0)
}
func EngineDetails_AbridgedAddSpecificImpulse(builder *flatbuffers.Builder, specificImpulse float64) {
	builder.PrependFloat64Slot(7, specificImpulse, 0.0)
}
func EngineDetails_AbridgedAddBurnTime(builder *flatbuffers.Builder, burnTime float64) {
	builder.PrependFloat64Slot(8, burnTime, 0.0)
}
func EngineDetails_AbridgedAddSeaLevelThrust(builder *flatbuffers.Builder, seaLevelThrust float64) {
	builder.PrependFloat64Slot(9, seaLevelThrust, 0.0)
}
func EngineDetails_AbridgedAddVacuumThrust(builder *flatbuffers.Builder, vacuumThrust float64) {
	builder.PrependFloat64Slot(10, vacuumThrust, 0.0)
}
func EngineDetails_AbridgedAddChamberPressure(builder *flatbuffers.Builder, chamberPressure float64) {
	builder.PrependFloat64Slot(11, chamberPressure, 0.0)
}
func EngineDetails_AbridgedAddNozzleExpansionRatio(builder *flatbuffers.Builder, nozzleExpansionRatio float64) {
	builder.PrependFloat64Slot(12, nozzleExpansionRatio, 0.0)
}
func EngineDetails_AbridgedAddMaxFirings(builder *flatbuffers.Builder, maxFirings int32) {
	builder.PrependInt32Slot(13, maxFirings, 0)
}
func EngineDetails_AbridgedAddPropellant(builder *flatbuffers.Builder, propellant flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(14, flatbuffers.UOffsetT(propellant), 0)
}
func EngineDetails_AbridgedAddOxidizer(builder *flatbuffers.Builder, oxidizer flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(15, flatbuffers.UOffsetT(oxidizer), 0)
}
func EngineDetails_AbridgedAddNotes(builder *flatbuffers.Builder, notes flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(16, flatbuffers.UOffsetT(notes), 0)
}
func EngineDetails_AbridgedAddCreatedAt(builder *flatbuffers.Builder, createdAt flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(17, flatbuffers.UOffsetT(createdAt), 0)
}
func EngineDetails_AbridgedAddCreatedBy(builder *flatbuffers.Builder, createdBy flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(18, flatbuffers.UOffsetT(createdBy), 0)
}
func EngineDetails_AbridgedAddSource(builder *flatbuffers.Builder, source flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(19, flatbuffers.UOffsetT(source), 0)
}
func EngineDetails_AbridgedAddOrigin(builder *flatbuffers.Builder, origin flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(20, flatbuffers.UOffsetT(origin), 0)
}
func EngineDetails_AbridgedAddOrigNetwork(builder *flatbuffers.Builder, origNetwork flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(21, flatbuffers.UOffsetT(origNetwork), 0)
}
func EngineDetails_AbridgedAddDataMode(builder *flatbuffers.Builder, dataMode EngineDetails_Abridged_dataMode_Enum) {
	builder.PrependInt8Slot(22, int8(dataMode), 0)
}
func EngineDetails_AbridgedEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
