// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package ItemTracking_Ingest

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

/// /// No description available.
type ItemTracking_Ingest struct {
	_tab flatbuffers.Table
}

const ItemTracking_IngestIdentifier = "ITEM"

func GetRootAsItemTracking_Ingest(buf []byte, offset flatbuffers.UOffsetT) *ItemTracking_Ingest {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &ItemTracking_Ingest{}
	x.Init(buf, n+offset)
	return x
}

func FinishItemTracking_IngestBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	identifierBytes := []byte(ItemTracking_IngestIdentifier)
	builder.FinishWithFileIdentifier(offset, identifierBytes)
}

func ItemTracking_IngestBufferHasIdentifier(buf []byte) bool {
	return flatbuffers.BufferHasIdentifier(buf, ItemTracking_IngestIdentifier)
}

func GetSizePrefixedRootAsItemTracking_Ingest(buf []byte, offset flatbuffers.UOffsetT) *ItemTracking_Ingest {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &ItemTracking_Ingest{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedItemTracking_IngestBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	identifierBytes := []byte(ItemTracking_IngestIdentifier)
	builder.FinishSizePrefixedWithFileIdentifier(offset, identifierBytes)
}

func SizePrefixedItemTracking_IngestBufferHasIdentifier(buf []byte) bool {
	return flatbuffers.SizePrefixedBufferHasIdentifier(buf, ItemTracking_IngestIdentifier)
}

func (rcv *ItemTracking_Ingest) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *ItemTracking_Ingest) Table() flatbuffers.Table {
	return rcv._tab
}

/// Unique identifier of the record, auto-generated by the system.
/// Example: /// Example: 026dd511-8ba5-47d3-9909-836149f87686
/// Constraints: Minimum length = 1, Maximum length = 36
func (rcv *ItemTracking_Ingest) Id() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Unique identifier of the record, auto-generated by the system.
/// Example: /// Example: 026dd511-8ba5-47d3-9909-836149f87686
/// Constraints: Minimum length = 1, Maximum length = 36
/// Classification marking of the data in IC/CAPCO Portion-marked format.
/// Example: /// Example: U
/// Constraints: Minimum length = 1, Maximum length = 128
func (rcv *ItemTracking_Ingest) ClassificationMarking() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Classification marking of the data in IC/CAPCO Portion-marked format.
/// Example: /// Example: U
/// Constraints: Minimum length = 1, Maximum length = 128
/// The tracking identifier of an item or person. May be similar in representation of a barcode or UPC.
/// Example: /// Example: ABC1234
/// Constraints: Minimum length = 1, Maximum length = 36
func (rcv *ItemTracking_Ingest) ScanCode() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The tracking identifier of an item or person. May be similar in representation of a barcode or UPC.
/// Example: /// Example: ABC1234
/// Constraints: Minimum length = 1, Maximum length = 36
/// The algorithm name or standard that generated the scanCode (e.g. UPC-A, EAN-13, GTIN, SSCC, bID, JAN, etc.).
/// Example: /// Example: bID
/// Constraints: Minimum length = 0, Maximum length = 36
func (rcv *ItemTracking_Ingest) ScGenTool() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The algorithm name or standard that generated the scanCode (e.g. UPC-A, EAN-13, GTIN, SSCC, bID, JAN, etc.).
/// Example: /// Example: bID
/// Constraints: Minimum length = 0, Maximum length = 36
/// The ID of the scanner or input device.
/// Example: /// Example: 2051M
/// Constraints: Minimum length = 1, Maximum length = 36
func (rcv *ItemTracking_Ingest) ScannerId() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The ID of the scanner or input device.
/// Example: /// Example: 2051M
/// Constraints: Minimum length = 1, Maximum length = 36
/// The timestamp of the scan, in ISO 8601 UTC format with millisecond precision.
/// Example: /// Example: 2023-03-21T14:22:00.123Z
/// Constraints: No constraints specified.
func (rcv *ItemTracking_Ingest) Ts() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The timestamp of the scan, in ISO 8601 UTC format with millisecond precision.
/// Example: /// Example: 2023-03-21T14:22:00.123Z
/// Constraints: No constraints specified.
/// The UDL ID of the item this record is associated with.
/// Example: /// Example: 36054487-bcba-6e2d-4f3b-9f25738b2639
/// Constraints: Minimum length = 0, Maximum length = 36
func (rcv *ItemTracking_Ingest) IdItem() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The UDL ID of the item this record is associated with.
/// Example: /// Example: 36054487-bcba-6e2d-4f3b-9f25738b2639
/// Constraints: Minimum length = 0, Maximum length = 36
/// The type of item that is being scanned (e.g. CARGO, PERSON, MAIL, MICAP, OTHER).
/// Example: /// Example: CARGO
/// Constraints: Minimum length = 0, Maximum length = 32
func (rcv *ItemTracking_Ingest) Type() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(18))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The type of item that is being scanned (e.g. CARGO, PERSON, MAIL, MICAP, OTHER).
/// Example: /// Example: CARGO
/// Constraints: Minimum length = 0, Maximum length = 32
/// WGS84 latitude where the item was scanned, in degrees.
/// Example: /// Example: 45.23
/// Constraints: No constraints specified.
func (rcv *ItemTracking_Ingest) Lat() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(20))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// WGS84 latitude where the item was scanned, in degrees.
/// Example: /// Example: 45.23
/// Constraints: No constraints specified.
func (rcv *ItemTracking_Ingest) MutateLat(n float64) bool {
	return rcv._tab.MutateFloat64Slot(20, n)
}

/// WGS84 longitude where the item was scanned, in degrees.
/// Example: /// Example: 179.1
/// Constraints: No constraints specified.
func (rcv *ItemTracking_Ingest) Lon() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(22))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// WGS84 longitude where the item was scanned, in degrees.
/// Example: /// Example: 179.1
/// Constraints: No constraints specified.
func (rcv *ItemTracking_Ingest) MutateLon(n float64) bool {
	return rcv._tab.MutateFloat64Slot(22, n)
}

/// The type of scan for tracking the item within it's journey  (e.g. IN, OUT, RECEIVED, DELIVERED, TRANSIT, ABANDONDED, REFUSED, UNABLE, RETURNED, HELD, OTHER). For example, received and delivered are for when an item is received from or delivered to the end customer. In and out are for stops in between such as being loaded on an airplane or received at a warehouse.
/// Example: /// Example: TRANSIT
/// Constraints: Minimum length = 0, Maximum length = 64
func (rcv *ItemTracking_Ingest) ScanType() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(24))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The type of scan for tracking the item within it's journey  (e.g. IN, OUT, RECEIVED, DELIVERED, TRANSIT, ABANDONDED, REFUSED, UNABLE, RETURNED, HELD, OTHER). For example, received and delivered are for when an item is received from or delivered to the end customer. In and out are for stops in between such as being loaded on an airplane or received at a warehouse.
/// Example: /// Example: TRANSIT
/// Constraints: Minimum length = 0, Maximum length = 64
/// The United States distinguished visitor code of the person scanned, only applicable to people.
/// Example: /// Example: DV-4
/// Constraints: Minimum length = 0, Maximum length = 16
func (rcv *ItemTracking_Ingest) DvCode() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(26))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The United States distinguished visitor code of the person scanned, only applicable to people.
/// Example: /// Example: DV-4
/// Constraints: Minimum length = 0, Maximum length = 16
/// Optional notes or comments about the tracking data.
/// Example: /// Example: Example notes
/// Constraints: Minimum length = 0, Maximum length = 1024
func (rcv *ItemTracking_Ingest) Notes() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(28))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Optional notes or comments about the tracking data.
/// Example: /// Example: Example notes
/// Constraints: Minimum length = 0, Maximum length = 1024
/// Array of keys that may be associated with this tracked item.
/// Example: /// Example: ['tapeColor', 'hazmat']
/// Constraints: No constraints specified.
func (rcv *ItemTracking_Ingest) Keys(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(30))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *ItemTracking_Ingest) KeysLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(30))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

/// Array of keys that may be associated with this tracked item.
/// Example: /// Example: ['tapeColor', 'hazmat']
/// Constraints: No constraints specified.
/// Array of values for the keys that may be associated to this tracked item. The entries in this array must correspond to the position index in the keys array. This array must be the same length as keys.
/// Example: /// Example: ['yellow', 'false']
/// Constraints: No constraints specified.
func (rcv *ItemTracking_Ingest) Values(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(32))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *ItemTracking_Ingest) ValuesLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(32))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

/// Array of values for the keys that may be associated to this tracked item. The entries in this array must correspond to the position index in the keys array. This array must be the same length as keys.
/// Example: /// Example: ['yellow', 'false']
/// Constraints: No constraints specified.
/// Time the row was created in the database, auto-populated by the system.
/// Example: /// Example: 2023-03-21T16:00:00.123Z
/// Constraints: No constraints specified.
func (rcv *ItemTracking_Ingest) CreatedAt() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(34))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Time the row was created in the database, auto-populated by the system.
/// Example: /// Example: 2023-03-21T16:00:00.123Z
/// Constraints: No constraints specified.
/// Application user who created the row in the database, auto-populated by the system.
/// Example: /// Example: some.user
/// Constraints: Minimum length = 1, Maximum length = 64
func (rcv *ItemTracking_Ingest) CreatedBy() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(36))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Application user who created the row in the database, auto-populated by the system.
/// Example: /// Example: some.user
/// Constraints: Minimum length = 1, Maximum length = 64
/// The source data library from which this record was received. This could be a remote or tactical UDL or another data library. If null, the record should be assumed to have originated from the primary Enterprise UDL.
/// Example: /// Example: AXE
/// Constraints: Minimum length = 0, Maximum length = 64
func (rcv *ItemTracking_Ingest) SourceDl() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(38))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The source data library from which this record was received. This could be a remote or tactical UDL or another data library. If null, the record should be assumed to have originated from the primary Enterprise UDL.
/// Example: /// Example: AXE
/// Constraints: Minimum length = 0, Maximum length = 64
/// Source of the data.
/// Example: /// Example: Bluestaq
/// Constraints: Minimum length = 1, Maximum length = 36
func (rcv *ItemTracking_Ingest) Source() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(40))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Source of the data.
/// Example: /// Example: Bluestaq
/// Constraints: Minimum length = 1, Maximum length = 36
/// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
/// Example: /// Example: THIRD_PARTY_DATASOURCE
/// Constraints: Minimum length = 0, Maximum length = 64
func (rcv *ItemTracking_Ingest) Origin() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(42))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
/// Example: /// Example: THIRD_PARTY_DATASOURCE
/// Constraints: Minimum length = 0, Maximum length = 64
/// The originating source network on which this record was created, auto-populated by the system.
/// Example: /// Example: OPS1
/// Constraints: Minimum length = 1, Maximum length = 32
func (rcv *ItemTracking_Ingest) OrigNetwork() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(44))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The originating source network on which this record was created, auto-populated by the system.
/// Example: /// Example: OPS1
/// Constraints: Minimum length = 1, Maximum length = 32
/// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
/// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
/// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
/// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
/// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
/// Example: /// Example: TEST
/// Constraints: Minimum length = 1, Maximum length = 32
func (rcv *ItemTracking_Ingest) DataMode() ItemTracking_Ingest_dataMode_Enum {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(46))
	if o != 0 {
		return ItemTracking_Ingest_dataMode_Enum(rcv._tab.GetInt8(o + rcv._tab.Pos))
	}
	return 0
}

/// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
/// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
/// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
/// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
/// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
/// Example: /// Example: TEST
/// Constraints: Minimum length = 1, Maximum length = 32
func (rcv *ItemTracking_Ingest) MutateDataMode(n ItemTracking_Ingest_dataMode_Enum) bool {
	return rcv._tab.MutateInt8Slot(46, int8(n))
}

func ItemTracking_IngestStart(builder *flatbuffers.Builder) {
	builder.StartObject(22)
}
func ItemTracking_IngestAddId(builder *flatbuffers.Builder, id flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(id), 0)
}
func ItemTracking_IngestAddClassificationMarking(builder *flatbuffers.Builder, classificationMarking flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(classificationMarking), 0)
}
func ItemTracking_IngestAddScanCode(builder *flatbuffers.Builder, scanCode flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(scanCode), 0)
}
func ItemTracking_IngestAddScGenTool(builder *flatbuffers.Builder, scGenTool flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(3, flatbuffers.UOffsetT(scGenTool), 0)
}
func ItemTracking_IngestAddScannerId(builder *flatbuffers.Builder, scannerId flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(4, flatbuffers.UOffsetT(scannerId), 0)
}
func ItemTracking_IngestAddTs(builder *flatbuffers.Builder, ts flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(5, flatbuffers.UOffsetT(ts), 0)
}
func ItemTracking_IngestAddIdItem(builder *flatbuffers.Builder, idItem flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(6, flatbuffers.UOffsetT(idItem), 0)
}
func ItemTracking_IngestAddType(builder *flatbuffers.Builder, type_ flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(7, flatbuffers.UOffsetT(type_), 0)
}
func ItemTracking_IngestAddLat(builder *flatbuffers.Builder, lat float64) {
	builder.PrependFloat64Slot(8, lat, 0.0)
}
func ItemTracking_IngestAddLon(builder *flatbuffers.Builder, lon float64) {
	builder.PrependFloat64Slot(9, lon, 0.0)
}
func ItemTracking_IngestAddScanType(builder *flatbuffers.Builder, scanType flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(10, flatbuffers.UOffsetT(scanType), 0)
}
func ItemTracking_IngestAddDvCode(builder *flatbuffers.Builder, dvCode flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(11, flatbuffers.UOffsetT(dvCode), 0)
}
func ItemTracking_IngestAddNotes(builder *flatbuffers.Builder, notes flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(12, flatbuffers.UOffsetT(notes), 0)
}
func ItemTracking_IngestAddKeys(builder *flatbuffers.Builder, keys flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(13, flatbuffers.UOffsetT(keys), 0)
}
func ItemTracking_IngestStartKeysVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func ItemTracking_IngestAddValues(builder *flatbuffers.Builder, values flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(14, flatbuffers.UOffsetT(values), 0)
}
func ItemTracking_IngestStartValuesVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func ItemTracking_IngestAddCreatedAt(builder *flatbuffers.Builder, createdAt flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(15, flatbuffers.UOffsetT(createdAt), 0)
}
func ItemTracking_IngestAddCreatedBy(builder *flatbuffers.Builder, createdBy flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(16, flatbuffers.UOffsetT(createdBy), 0)
}
func ItemTracking_IngestAddSourceDl(builder *flatbuffers.Builder, sourceDl flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(17, flatbuffers.UOffsetT(sourceDl), 0)
}
func ItemTracking_IngestAddSource(builder *flatbuffers.Builder, source flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(18, flatbuffers.UOffsetT(source), 0)
}
func ItemTracking_IngestAddOrigin(builder *flatbuffers.Builder, origin flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(19, flatbuffers.UOffsetT(origin), 0)
}
func ItemTracking_IngestAddOrigNetwork(builder *flatbuffers.Builder, origNetwork flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(20, flatbuffers.UOffsetT(origNetwork), 0)
}
func ItemTracking_IngestAddDataMode(builder *flatbuffers.Builder, dataMode ItemTracking_Ingest_dataMode_Enum) {
	builder.PrependInt8Slot(21, int8(dataMode), 0)
}
func ItemTracking_IngestEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
