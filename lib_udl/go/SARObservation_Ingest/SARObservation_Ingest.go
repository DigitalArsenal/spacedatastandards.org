// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package SARObservation_Ingest

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

/// /// Model representation of observation data for SAR based sensor phenomenologies. J2000 is the preferred coordinate frame for all observations, but in some cases observations may be in another frame depending on the provider. Please see the 'Discover' tab in the storefront to confirm coordinate frames by data provider.
type SARObservation_Ingest struct {
	_tab flatbuffers.Table
}

const SARObservation_IngestIdentifier = "SARO"

func GetRootAsSARObservation_Ingest(buf []byte, offset flatbuffers.UOffsetT) *SARObservation_Ingest {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &SARObservation_Ingest{}
	x.Init(buf, n+offset)
	return x
}

func FinishSARObservation_IngestBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	identifierBytes := []byte(SARObservation_IngestIdentifier)
	builder.FinishWithFileIdentifier(offset, identifierBytes)
}

func SARObservation_IngestBufferHasIdentifier(buf []byte) bool {
	return flatbuffers.BufferHasIdentifier(buf, SARObservation_IngestIdentifier)
}

func GetSizePrefixedRootAsSARObservation_Ingest(buf []byte, offset flatbuffers.UOffsetT) *SARObservation_Ingest {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &SARObservation_Ingest{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedSARObservation_IngestBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	identifierBytes := []byte(SARObservation_IngestIdentifier)
	builder.FinishSizePrefixedWithFileIdentifier(offset, identifierBytes)
}

func SizePrefixedSARObservation_IngestBufferHasIdentifier(buf []byte) bool {
	return flatbuffers.SizePrefixedBufferHasIdentifier(buf, SARObservation_IngestIdentifier)
}

func (rcv *SARObservation_Ingest) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *SARObservation_Ingest) Table() flatbuffers.Table {
	return rcv._tab
}

/// Unique identifier of the record, auto-generated by the system.
/// Example: /// Example: SAROBSERVATION-ID
/// Constraints: Minimum length = 1, Maximum length = 36
func (rcv *SARObservation_Ingest) Id() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Unique identifier of the record, auto-generated by the system.
/// Example: /// Example: SAROBSERVATION-ID
/// Constraints: Minimum length = 1, Maximum length = 36
/// Classification marking of the data in IC/CAPCO Portion-marked format.
/// Example: /// Example: U
/// Constraints: Minimum length = 1, Maximum length = 128
func (rcv *SARObservation_Ingest) ClassificationMarking() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Classification marking of the data in IC/CAPCO Portion-marked format.
/// Example: /// Example: U
/// Constraints: Minimum length = 1, Maximum length = 128
/// Unique identifier of the spacecraft hosting the sensor associated with this collection.
/// Example: /// Example: 36036
/// Constraints: Minimum length = 0, Maximum length = 36
func (rcv *SARObservation_Ingest) IdOnOrbit() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Unique identifier of the spacecraft hosting the sensor associated with this collection.
/// Example: /// Example: 36036
/// Constraints: Minimum length = 0, Maximum length = 36
/// Satellite/Catalog number of the spacecraft hosting the sensor associated with this collection.
/// Example: /// Example: 36036
/// Constraints: No constraints specified.
func (rcv *SARObservation_Ingest) SatNo() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

/// Satellite/Catalog number of the spacecraft hosting the sensor associated with this collection.
/// Example: /// Example: 36036
/// Constraints: No constraints specified.
func (rcv *SARObservation_Ingest) MutateSatNo(n int32) bool {
	return rcv._tab.MutateInt32Slot(10, n)
}

/// Optional identifier provided by the source to indicate the onorbit object hosting the sensor associated with this collection. This may be an internal identifier and not necessarily a valid satellite number.
/// Example: /// Example: 36036
/// Constraints: Minimum length = 0, Maximum length = 64
func (rcv *SARObservation_Ingest) OrigObjectId() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Optional identifier provided by the source to indicate the onorbit object hosting the sensor associated with this collection. This may be an internal identifier and not necessarily a valid satellite number.
/// Example: /// Example: 36036
/// Constraints: Minimum length = 0, Maximum length = 64
/// Unique identifier of the reporting sensor.
/// Example: /// Example: 36036-1L
/// Constraints: Minimum length = 0, Maximum length = 36
func (rcv *SARObservation_Ingest) IdSensor() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Unique identifier of the reporting sensor.
/// Example: /// Example: 36036-1L
/// Constraints: Minimum length = 0, Maximum length = 36
/// Optional identifier provided by the source to indicate the sensor for this collection. This may be an internal identifier and not necessarily a valid sensor ID.
/// Example: /// Example: SMOS-1L
/// Constraints: Minimum length = 0, Maximum length = 64
func (rcv *SARObservation_Ingest) OrigSensorId() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Optional identifier provided by the source to indicate the sensor for this collection. This may be an internal identifier and not necessarily a valid sensor ID.
/// Example: /// Example: SMOS-1L
/// Constraints: Minimum length = 0, Maximum length = 64
/// Optional ID from external systems. This field has no meaning within UDL and is provided as a convenience for systems that require tracking of an internal system generated ID.
/// Example: /// Example: EXTERNAL-ID
/// Constraints: Minimum length = 0, Maximum length = 36
func (rcv *SARObservation_Ingest) ExternalId() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(18))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Optional ID from external systems. This field has no meaning within UDL and is provided as a convenience for systems that require tracking of an internal system generated ID.
/// Example: /// Example: EXTERNAL-ID
/// Constraints: Minimum length = 0, Maximum length = 36
/// Optional identifier to indicate the specific collection tasking which produced this observation.
/// Example: /// Example: COLLECTION-ID
/// Constraints: Minimum length = 0, Maximum length = 36
func (rcv *SARObservation_Ingest) CollectionId() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(20))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Optional identifier to indicate the specific collection tasking which produced this observation.
/// Example: /// Example: COLLECTION-ID
/// Constraints: Minimum length = 0, Maximum length = 36
/// Identifier of the specific detection within a collection which produced this observation.
/// Example: /// Example: DETECTION-ID
/// Constraints: Minimum length = 0, Maximum length = 36
func (rcv *SARObservation_Ingest) DetectionId() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(22))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Identifier of the specific detection within a collection which produced this observation.
/// Example: /// Example: DETECTION-ID
/// Constraints: Minimum length = 0, Maximum length = 36
/// Collection start time in ISO 8601 UTC format with microsecond precision.
/// Example: /// Example: 2023-04-22T17:35:00.123456Z
/// Constraints: No constraints specified.
func (rcv *SARObservation_Ingest) CollectionStart() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(24))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Collection start time in ISO 8601 UTC format with microsecond precision.
/// Example: /// Example: 2023-04-22T17:35:00.123456Z
/// Constraints: No constraints specified.
/// Collection end time in ISO 8601 UTC format with microsecond precision.
/// Example: /// Example: 2023-04-22T17:38:10.20177Z
/// Constraints: No constraints specified.
func (rcv *SARObservation_Ingest) CollectionEnd() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(26))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Collection end time in ISO 8601 UTC format with microsecond precision.
/// Example: /// Example: 2023-04-22T17:38:10.20177Z
/// Constraints: No constraints specified.
/// The datetime at the center point of the collection in ISO 8601 UTC format with microsecond precision.
/// Example: /// Example: 2023-04-22T17:36:35.100885Z
/// Constraints: No constraints specified.
func (rcv *SARObservation_Ingest) CenterTime() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(28))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The datetime at the center point of the collection in ISO 8601 UTC format with microsecond precision.
/// Example: /// Example: 2023-04-22T17:36:35.100885Z
/// Constraints: No constraints specified.
/// The detection start time in ISO 8601 UTC format, with microsecond precision.
/// Example: /// Example: 2023-07-08T17:35:01.615396Z
/// Constraints: No constraints specified.
func (rcv *SARObservation_Ingest) DetectionStart() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(30))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The detection start time in ISO 8601 UTC format, with microsecond precision.
/// Example: /// Example: 2023-07-08T17:35:01.615396Z
/// Constraints: No constraints specified.
/// The detection end time in ISO 8601 UTC format, with microsecond precision.
/// Example: /// Example: 2023-07-08T17:35:20.77219Z
/// Constraints: No constraints specified.
func (rcv *SARObservation_Ingest) DetectionEnd() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(32))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The detection end time in ISO 8601 UTC format, with microsecond precision.
/// Example: /// Example: 2023-07-08T17:35:20.77219Z
/// Constraints: No constraints specified.
/// The duration, in seconds, of this detection.
/// Example: /// Example: 79.156794
/// Constraints: No constraints specified.
func (rcv *SARObservation_Ingest) DwellTime() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(34))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// The duration, in seconds, of this detection.
/// Example: /// Example: 79.156794
/// Constraints: No constraints specified.
func (rcv *SARObservation_Ingest) MutateDwellTime(n float64) bool {
	return rcv._tab.MutateFloat64Slot(34, n)
}

/// The orbital direction (ASCENDING, DESCENDING) of the platform during the collection.
/// Example: /// Example: ASCENDING
/// Constraints: Minimum length = 0, Maximum length = 16
func (rcv *SARObservation_Ingest) OrbitState() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(36))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The orbital direction (ASCENDING, DESCENDING) of the platform during the collection.
/// Example: /// Example: ASCENDING
/// Constraints: Minimum length = 0, Maximum length = 16
/// Collection mode setting for this collection (e.g. AREA, SPOTLIGHT, STRIP, etc.).
/// Example: /// Example: SPOTLIGHT
/// Constraints: Minimum length = 1, Maximum length = 36
func (rcv *SARObservation_Ingest) SarMode() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(38))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Collection mode setting for this collection (e.g. AREA, SPOTLIGHT, STRIP, etc.).
/// Example: /// Example: SPOTLIGHT
/// Constraints: Minimum length = 1, Maximum length = 36
/// Name of the band containing operating frequency for the collection (e.g. C, E, EHF, HF, K, Ka, Ku, L, Q, S, SHF, UNK, UHF, V, VHF, VLF, W, X). See RFBandType for more details and descriptions of each band name.
/// Example: /// Example: L
/// Constraints: Minimum length = 0, Maximum length = 5
func (rcv *SARObservation_Ingest) OperatingBand() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(40))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Name of the band containing operating frequency for the collection (e.g. C, E, EHF, HF, K, Ka, Ku, L, Q, S, SHF, UNK, UHF, V, VHF, VLF, W, X). See RFBandType for more details and descriptions of each band name.
/// Example: /// Example: L
/// Constraints: Minimum length = 0, Maximum length = 5
/// The operating frequency, in Mhz, for the collection.
/// Example: /// Example: 2345.6
/// Constraints: No constraints specified.
func (rcv *SARObservation_Ingest) OperatingFreq() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(42))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// The operating frequency, in Mhz, for the collection.
/// Example: /// Example: 2345.6
/// Constraints: No constraints specified.
func (rcv *SARObservation_Ingest) MutateOperatingFreq(n float64) bool {
	return rcv._tab.MutateFloat64Slot(42, n)
}

/// Signal to noise ratio, in dB.
/// Example: /// Example: 10.1
/// Constraints: No constraints specified.
func (rcv *SARObservation_Ingest) Snr() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(44))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Signal to noise ratio, in dB.
/// Example: /// Example: 10.1
/// Constraints: No constraints specified.
func (rcv *SARObservation_Ingest) MutateSnr(n float64) bool {
	return rcv._tab.MutateFloat64Slot(44, n)
}

/// Transmit polarization e.g. H - (Horizontally Polarized) Perpendicular to Earth's surface, V - (Vertically Polarized) Parallel to Earth's surface, L - (Left Hand Circularly Polarized) Rotating left relative to the earth's surface, R - (Right Hand Circularly Polarized) Rotating right relative to the earth's surface.
/// Example: /// Example: H
/// Constraints: Minimum length = 0, Maximum length = 4
func (rcv *SARObservation_Ingest) TxPolarization() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(46))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Transmit polarization e.g. H - (Horizontally Polarized) Perpendicular to Earth's surface, V - (Vertically Polarized) Parallel to Earth's surface, L - (Left Hand Circularly Polarized) Rotating left relative to the earth's surface, R - (Right Hand Circularly Polarized) Rotating right relative to the earth's surface.
/// Example: /// Example: H
/// Constraints: Minimum length = 0, Maximum length = 4
/// Receive polarization e.g. H - (Horizontally Polarized) Perpendicular to Earth's surface, V - (Vertically Polarized) Parallel to Earth's surface, L - (Left Hand Circularly Polarized) Rotating left relative to the earth's surface, R - (Right Hand Circularly Polarized) Rotating right relative to the earth's surface.
/// Example: /// Example: H
/// Constraints: Minimum length = 0, Maximum length = 4
func (rcv *SARObservation_Ingest) RxPolarization() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(48))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Receive polarization e.g. H - (Horizontally Polarized) Perpendicular to Earth's surface, V - (Vertically Polarized) Parallel to Earth's surface, L - (Left Hand Circularly Polarized) Rotating left relative to the earth's surface, R - (Right Hand Circularly Polarized) Rotating right relative to the earth's surface.
/// Example: /// Example: H
/// Constraints: Minimum length = 0, Maximum length = 4
/// The graze angle (also referred to as look angle) for the collection in degrees.
/// Example: /// Example: 45.1
/// Constraints: No constraints specified.
func (rcv *SARObservation_Ingest) GrazeAngle() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(50))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// The graze angle (also referred to as look angle) for the collection in degrees.
/// Example: /// Example: 45.1
/// Constraints: No constraints specified.
func (rcv *SARObservation_Ingest) MutateGrazeAngle(n float64) bool {
	return rcv._tab.MutateFloat64Slot(50, n)
}

/// The center incidence angle in degrees.
/// Example: /// Example: 45.1
/// Constraints: No constraints specified.
func (rcv *SARObservation_Ingest) IncidenceAngle() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(52))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// The center incidence angle in degrees.
/// Example: /// Example: 45.1
/// Constraints: No constraints specified.
func (rcv *SARObservation_Ingest) MutateIncidenceAngle(n float64) bool {
	return rcv._tab.MutateFloat64Slot(52, n)
}

/// The squint angle for the collection in degrees.
/// Example: /// Example: 1.2
/// Constraints: No constraints specified.
func (rcv *SARObservation_Ingest) SquintAngle() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(54))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// The squint angle for the collection in degrees.
/// Example: /// Example: 1.2
/// Constraints: No constraints specified.
func (rcv *SARObservation_Ingest) MutateSquintAngle(n float64) bool {
	return rcv._tab.MutateFloat64Slot(54, n)
}

/// The bandwidth frequency of the pulse in Mhz.
/// Example: /// Example: 500.1
/// Constraints: No constraints specified.
func (rcv *SARObservation_Ingest) PulseBandwidth() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(56))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// The bandwidth frequency of the pulse in Mhz.
/// Example: /// Example: 500.1
/// Constraints: No constraints specified.
func (rcv *SARObservation_Ingest) MutatePulseBandwidth(n float64) bool {
	return rcv._tab.MutateFloat64Slot(56, n)
}

/// The duration of a pulse in seconds.
/// Example: /// Example: 1.1e-05
/// Constraints: No constraints specified.
func (rcv *SARObservation_Ingest) PulseDuration() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(58))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// The duration of a pulse in seconds.
/// Example: /// Example: 1.1e-05
/// Constraints: No constraints specified.
func (rcv *SARObservation_Ingest) MutatePulseDuration(n float64) bool {
	return rcv._tab.MutateFloat64Slot(58, n)
}

/// Required sweep angle for the continuous spot scene in degrees.
/// Example: /// Example: 45.1
/// Constraints: No constraints specified.
func (rcv *SARObservation_Ingest) ContinuousSpotAngle() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(60))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Required sweep angle for the continuous spot scene in degrees.
/// Example: /// Example: 45.1
/// Constraints: No constraints specified.
func (rcv *SARObservation_Ingest) MutateContinuousSpotAngle(n float64) bool {
	return rcv._tab.MutateFloat64Slot(60, n)
}

/// Slant distance from sensor to center point of imaging event in kilometers.
/// Example: /// Example: 60.1
/// Constraints: No constraints specified.
func (rcv *SARObservation_Ingest) SlantRange() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(62))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Slant distance from sensor to center point of imaging event in kilometers.
/// Example: /// Example: 60.1
/// Constraints: No constraints specified.
func (rcv *SARObservation_Ingest) MutateSlantRange(n float64) bool {
	return rcv._tab.MutateFloat64Slot(62, n)
}

/// Specifies the closest range, in kilometers, from the flight path to target during the collection.
/// Example: /// Example: 12.1
/// Constraints: No constraints specified.
func (rcv *SARObservation_Ingest) NearRange() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(64))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Specifies the closest range, in kilometers, from the flight path to target during the collection.
/// Example: /// Example: 12.1
/// Constraints: No constraints specified.
func (rcv *SARObservation_Ingest) MutateNearRange(n float64) bool {
	return rcv._tab.MutateFloat64Slot(64, n)
}

/// Specifies the farthest range, in kilometers, from the flight path to target during the collection.
/// Example: /// Example: 34.1
/// Constraints: No constraints specified.
func (rcv *SARObservation_Ingest) FarRange() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(66))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Specifies the farthest range, in kilometers, from the flight path to target during the collection.
/// Example: /// Example: 34.1
/// Constraints: No constraints specified.
func (rcv *SARObservation_Ingest) MutateFarRange(n float64) bool {
	return rcv._tab.MutateFloat64Slot(66, n)
}

/// The length of the collection as projected on the ground in kilometers.
/// Example: /// Example: 12.1
/// Constraints: No constraints specified.
func (rcv *SARObservation_Ingest) SwathLength() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(68))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// The length of the collection as projected on the ground in kilometers.
/// Example: /// Example: 12.1
/// Constraints: No constraints specified.
func (rcv *SARObservation_Ingest) MutateSwathLength(n float64) bool {
	return rcv._tab.MutateFloat64Slot(68, n)
}

/// Optional geographical region or polygon (lat/lon pairs) of the area surrounding the image event as projected on the ground.
/// Example: /// Example: POLYGON((67.3291113966927 26.156175339112,67.2580009640721 26.091022064271,67.1795862381682 26.6637992964562,67.2501237475598 26.730115808233,67.3291113966927 26.156175339112))
/// Constraints: No constraints specified.
func (rcv *SARObservation_Ingest) Area() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(70))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Optional geographical region or polygon (lat/lon pairs) of the area surrounding the image event as projected on the ground.
/// Example: /// Example: POLYGON((67.3291113966927 26.156175339112,67.2580009640721 26.091022064271,67.1795862381682 26.6637992964562,67.2501237475598 26.730115808233,67.3291113966927 26.156175339112))
/// Constraints: No constraints specified.
/// Geographical region or polygon (lon/lat pairs), as depicted by the Well-Known Text representation of the geometry/geography, of the image as projected on the ground. WKT reference: https://www.opengeospatial.org/standards/wkt-crs. Ignored if included with a POST or PUT request that also specifies a valid 'area' field.
/// Example: /// Example: POLYGON((67.3291113966927 26.156175339112,67.2580009640721 26.091022064271,67.1795862381682 26.6637992964562,67.2501237475598 26.730115808233,67.3291113966927 26.156175339112))
/// Constraints: No constraints specified.
func (rcv *SARObservation_Ingest) Atext() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(72))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Geographical region or polygon (lon/lat pairs), as depicted by the Well-Known Text representation of the geometry/geography, of the image as projected on the ground. WKT reference: https://www.opengeospatial.org/standards/wkt-crs. Ignored if included with a POST or PUT request that also specifies a valid 'area' field.
/// Example: /// Example: POLYGON((67.3291113966927 26.156175339112,67.2580009640721 26.091022064271,67.1795862381682 26.6637992964562,67.2501237475598 26.730115808233,67.3291113966927 26.156175339112))
/// Constraints: No constraints specified.
/// Geographical region or polygon (lat/lon pairs), as depicted by the GeoJSON representation of the geometry/geography, of the image as projected on the ground. GeoJSON Reference: https://geojson.org/. Ignored if included with a POST or PUT request that also specifies a valid 'area' or 'atext' field.
/// Example: /// Example: {"type":"Polygon","coordinates":[[[67.3291113966927,26.156175339112],[67.2580009640721,26.091022064271],[67.1795862381682,26.6637992964562],[67.2501237475598,26.730115808233],[67.3291113966927,26.156175339112]]]}
/// Constraints: No constraints specified.
func (rcv *SARObservation_Ingest) Agjson() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(74))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Geographical region or polygon (lat/lon pairs), as depicted by the GeoJSON representation of the geometry/geography, of the image as projected on the ground. GeoJSON Reference: https://geojson.org/. Ignored if included with a POST or PUT request that also specifies a valid 'area' or 'atext' field.
/// Example: /// Example: {"type":"Polygon","coordinates":[[[67.3291113966927,26.156175339112],[67.2580009640721,26.091022064271],[67.1795862381682,26.6637992964562],[67.2501237475598,26.730115808233],[67.3291113966927,26.156175339112]]]}
/// Constraints: No constraints specified.
/// Type of region as projected on the ground (POLYGON, POINT, LINE).
/// Example: /// Example: POLYGON
/// Constraints: Minimum length = 0, Maximum length = 128
func (rcv *SARObservation_Ingest) Atype() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(76))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Type of region as projected on the ground (POLYGON, POINT, LINE).
/// Example: /// Example: POLYGON
/// Constraints: Minimum length = 0, Maximum length = 128
/// Number of dimensions of the geometry depicted by region.
/// Example: /// Example: 3
/// Constraints: No constraints specified.
func (rcv *SARObservation_Ingest) Andims() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(78))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

/// Number of dimensions of the geometry depicted by region.
/// Example: /// Example: 3
/// Constraints: No constraints specified.
func (rcv *SARObservation_Ingest) MutateAndims(n int32) bool {
	return rcv._tab.MutateInt32Slot(78, n)
}

/// Geographical spatial_ref_sys for region.
/// Example: /// Example: 3
/// Constraints: No constraints specified.
func (rcv *SARObservation_Ingest) Asrid() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(80))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

/// Geographical spatial_ref_sys for region.
/// Example: /// Example: 3
/// Constraints: No constraints specified.
func (rcv *SARObservation_Ingest) MutateAsrid(n int32) bool {
	return rcv._tab.MutateInt32Slot(80, n)
}

/// The pixel spacing in the range direction measured in meters.
/// Example: /// Example: 0.123
/// Constraints: No constraints specified.
func (rcv *SARObservation_Ingest) SpacingRange() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(82))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// The pixel spacing in the range direction measured in meters.
/// Example: /// Example: 0.123
/// Constraints: No constraints specified.
func (rcv *SARObservation_Ingest) MutateSpacingRange(n float64) bool {
	return rcv._tab.MutateFloat64Slot(82, n)
}

/// The pixel spacing in the azimuth direction measured in meters.
/// Example: /// Example: 0.123
/// Constraints: No constraints specified.
func (rcv *SARObservation_Ingest) SpacingAzimuth() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(84))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// The pixel spacing in the azimuth direction measured in meters.
/// Example: /// Example: 0.123
/// Constraints: No constraints specified.
func (rcv *SARObservation_Ingest) MutateSpacingAzimuth(n float64) bool {
	return rcv._tab.MutateFloat64Slot(84, n)
}

/// The number of looks in the azimuth direction.
/// Example: /// Example: 2
/// Constraints: No constraints specified.
func (rcv *SARObservation_Ingest) LooksAzimuth() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(86))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

/// The number of looks in the azimuth direction.
/// Example: /// Example: 2
/// Constraints: No constraints specified.
func (rcv *SARObservation_Ingest) MutateLooksAzimuth(n int32) bool {
	return rcv._tab.MutateInt32Slot(86, n)
}

/// The number of looks in the range direction.
/// Example: /// Example: 1
/// Constraints: No constraints specified.
func (rcv *SARObservation_Ingest) LooksRange() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(88))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

/// The number of looks in the range direction.
/// Example: /// Example: 1
/// Constraints: No constraints specified.
func (rcv *SARObservation_Ingest) MutateLooksRange(n int32) bool {
	return rcv._tab.MutateInt32Slot(88, n)
}

/// The resolution in the range direction measured in meters.
/// Example: /// Example: 0.123
/// Constraints: No constraints specified.
func (rcv *SARObservation_Ingest) ResolutionRange() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(90))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// The resolution in the range direction measured in meters.
/// Example: /// Example: 0.123
/// Constraints: No constraints specified.
func (rcv *SARObservation_Ingest) MutateResolutionRange(n float64) bool {
	return rcv._tab.MutateFloat64Slot(90, n)
}

/// The resolution in the azimuth direction measured in meters.
/// Example: /// Example: 0.123
/// Constraints: No constraints specified.
func (rcv *SARObservation_Ingest) ResolutionAzimuth() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(92))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// The resolution in the azimuth direction measured in meters.
/// Example: /// Example: 0.123
/// Constraints: No constraints specified.
func (rcv *SARObservation_Ingest) MutateResolutionAzimuth(n float64) bool {
	return rcv._tab.MutateFloat64Slot(92, n)
}

/// The antenna pointing direction (LEFT, RIGHT).
/// Example: /// Example: RIGHT
/// Constraints: Minimum length = 0, Maximum length = 16
func (rcv *SARObservation_Ingest) ObDirection() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(94))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The antenna pointing direction (LEFT, RIGHT).
/// Example: /// Example: RIGHT
/// Constraints: Minimum length = 0, Maximum length = 16
/// The coordinate system used for the sensor velocity and target position vectors for the collection.
/// Example: /// Example: ECEF
/// Constraints: Minimum length = 0, Maximum length = 16
func (rcv *SARObservation_Ingest) CoordSys() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(96))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The coordinate system used for the sensor velocity and target position vectors for the collection.
/// Example: /// Example: ECEF
/// Constraints: Minimum length = 0, Maximum length = 16
/// The collection target X position in kilometers.
/// Example: /// Example: 50.23
/// Constraints: No constraints specified.
func (rcv *SARObservation_Ingest) Targetposx() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(98))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// The collection target X position in kilometers.
/// Example: /// Example: 50.23
/// Constraints: No constraints specified.
func (rcv *SARObservation_Ingest) MutateTargetposx(n float64) bool {
	return rcv._tab.MutateFloat64Slot(98, n)
}

/// The collection target Y position in kilometers.
/// Example: /// Example: 50.23
/// Constraints: No constraints specified.
func (rcv *SARObservation_Ingest) Targetposy() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(100))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// The collection target Y position in kilometers.
/// Example: /// Example: 50.23
/// Constraints: No constraints specified.
func (rcv *SARObservation_Ingest) MutateTargetposy(n float64) bool {
	return rcv._tab.MutateFloat64Slot(100, n)
}

/// The collection target Z position in kilometers.
/// Example: /// Example: 50.23
/// Constraints: No constraints specified.
func (rcv *SARObservation_Ingest) Targetposz() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(102))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// The collection target Z position in kilometers.
/// Example: /// Example: 50.23
/// Constraints: No constraints specified.
func (rcv *SARObservation_Ingest) MutateTargetposz(n float64) bool {
	return rcv._tab.MutateFloat64Slot(102, n)
}

/// Sensor altitude during collection in kilometers.
/// Example: /// Example: 1.1
/// Constraints: No constraints specified.
func (rcv *SARObservation_Ingest) Senalt() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(104))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Sensor altitude during collection in kilometers.
/// Example: /// Example: 1.1
/// Constraints: No constraints specified.
func (rcv *SARObservation_Ingest) MutateSenalt(n float64) bool {
	return rcv._tab.MutateFloat64Slot(104, n)
}

/// Sensor platform X-velocity during collection in kilometers/second.
/// Example: /// Example: 1.1
/// Constraints: No constraints specified.
func (rcv *SARObservation_Ingest) Senvelx() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(106))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Sensor platform X-velocity during collection in kilometers/second.
/// Example: /// Example: 1.1
/// Constraints: No constraints specified.
func (rcv *SARObservation_Ingest) MutateSenvelx(n float64) bool {
	return rcv._tab.MutateFloat64Slot(106, n)
}

/// Sensor platform Y-velocity during collection in kilometers/second.
/// Example: /// Example: 1.1
/// Constraints: No constraints specified.
func (rcv *SARObservation_Ingest) Senvely() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(108))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Sensor platform Y-velocity during collection in kilometers/second.
/// Example: /// Example: 1.1
/// Constraints: No constraints specified.
func (rcv *SARObservation_Ingest) MutateSenvely(n float64) bool {
	return rcv._tab.MutateFloat64Slot(108, n)
}

/// Sensor platform Z-velocity during collection in kilometers/second.
/// Example: /// Example: 1.1
/// Constraints: No constraints specified.
func (rcv *SARObservation_Ingest) Senvelz() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(110))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Sensor platform Z-velocity during collection in kilometers/second.
/// Example: /// Example: 1.1
/// Constraints: No constraints specified.
func (rcv *SARObservation_Ingest) MutateSenvelz(n float64) bool {
	return rcv._tab.MutateFloat64Slot(110, n)
}

/// WGS-84 sensor latitude sub-point at collect start time (collectionStart), represented as -90 to 90 degrees (negative values south of equator).
/// Example: /// Example: 45.1
/// Constraints: No constraints specified.
func (rcv *SARObservation_Ingest) SenlatStart() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(112))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// WGS-84 sensor latitude sub-point at collect start time (collectionStart), represented as -90 to 90 degrees (negative values south of equator).
/// Example: /// Example: 45.1
/// Constraints: No constraints specified.
func (rcv *SARObservation_Ingest) MutateSenlatStart(n float64) bool {
	return rcv._tab.MutateFloat64Slot(112, n)
}

/// WGS-84 sensor longitude sub-point at collect start time (collectionStart), represented as -180 to 180 degrees (negative values west of Prime Meridian).
/// Example: /// Example: 179.1
/// Constraints: No constraints specified.
func (rcv *SARObservation_Ingest) SenlonStart() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(114))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// WGS-84 sensor longitude sub-point at collect start time (collectionStart), represented as -180 to 180 degrees (negative values west of Prime Meridian).
/// Example: /// Example: 179.1
/// Constraints: No constraints specified.
func (rcv *SARObservation_Ingest) MutateSenlonStart(n float64) bool {
	return rcv._tab.MutateFloat64Slot(114, n)
}

/// WGS-84 sensor latitude sub-point at collect end time (collectionEnd), represented as -90 to 90 degrees (negative values south of equator).
/// Example: /// Example: 45.1
/// Constraints: No constraints specified.
func (rcv *SARObservation_Ingest) SenlatEnd() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(116))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// WGS-84 sensor latitude sub-point at collect end time (collectionEnd), represented as -90 to 90 degrees (negative values south of equator).
/// Example: /// Example: 45.1
/// Constraints: No constraints specified.
func (rcv *SARObservation_Ingest) MutateSenlatEnd(n float64) bool {
	return rcv._tab.MutateFloat64Slot(116, n)
}

/// WGS-84 sensor longitude sub-point at collect end time (collectionEnd), represented as -180 to 180 degrees (negative values west of Prime Meridian).
/// Example: /// Example: 179.1
/// Constraints: No constraints specified.
func (rcv *SARObservation_Ingest) SenlonEnd() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(118))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// WGS-84 sensor longitude sub-point at collect end time (collectionEnd), represented as -180 to 180 degrees (negative values west of Prime Meridian).
/// Example: /// Example: 179.1
/// Constraints: No constraints specified.
func (rcv *SARObservation_Ingest) MutateSenlonEnd(n float64) bool {
	return rcv._tab.MutateFloat64Slot(118, n)
}

/// Optional identifier to track a commercial or marketplace transaction executed to produce this data.
/// Example: /// Example: TRANSACTION-ID
/// Constraints: Minimum length = 0, Maximum length = 64
func (rcv *SARObservation_Ingest) TransactionId() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(120))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Optional identifier to track a commercial or marketplace transaction executed to produce this data.
/// Example: /// Example: TRANSACTION-ID
/// Constraints: Minimum length = 0, Maximum length = 64
/// Optional array of provider/source specific tags for this data, where each element is no longer than 32 characters, used for implementing data owner conditional access controls to restrict access to the data. Should be left null by data providers unless conditional access controls are coordinated with the UDL team.
/// Example: /// Example: ['PROVIDER_TAG1', 'PROVIDER_TAG2']
/// Constraints: No constraints specified.
func (rcv *SARObservation_Ingest) Tags(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(122))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *SARObservation_Ingest) TagsLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(122))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

/// Optional array of provider/source specific tags for this data, where each element is no longer than 32 characters, used for implementing data owner conditional access controls to restrict access to the data. Should be left null by data providers unless conditional access controls are coordinated with the UDL team.
/// Example: /// Example: ['PROVIDER_TAG1', 'PROVIDER_TAG2']
/// Constraints: No constraints specified.
/// Array of UDL record types (e.g. ANALYTICMAGERY, ESID, GROUNDIMAGE, NOTIFICATION, POI, SV, TRACK) that are related to the SAR Observation. See the associated 'srcIds' array for the record UUIDs, positionally corresponding to the record types in this array. The 'srcTyps' and 'srcIds' arrays must match in size.
/// Example: /// Example: ['ESID', 'GROUNDIMAGE']
/// Constraints: No constraints specified.
func (rcv *SARObservation_Ingest) SrcTyps(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(124))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *SARObservation_Ingest) SrcTypsLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(124))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

/// Array of UDL record types (e.g. ANALYTICMAGERY, ESID, GROUNDIMAGE, NOTIFICATION, POI, SV, TRACK) that are related to the SAR Observation. See the associated 'srcIds' array for the record UUIDs, positionally corresponding to the record types in this array. The 'srcTyps' and 'srcIds' arrays must match in size.
/// Example: /// Example: ['ESID', 'GROUNDIMAGE']
/// Constraints: No constraints specified.
/// Array of UUIDs of the UDL data records that are related to the SAR Observation. See the associated 'srcTyps' array for the specific types of data, positionally corresponding to the UUIDs in this array. The 'srcTyps' and 'srcIds' arrays must match in size. See the corresponding srcTyps array element for the data type of the UUID and use the appropriate API operation to retrieve that object (e.g. /udl/sarobservation/{uuid}).
/// Example: /// Example: ['f7e01cd4-626b-441f-a423-17b160eb78ba', '223833c4-be0d-4fdb-a2e4-325a48eccced']
/// Constraints: No constraints specified.
func (rcv *SARObservation_Ingest) SrcIds(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(126))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *SARObservation_Ingest) SrcIdsLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(126))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

/// Array of UUIDs of the UDL data records that are related to the SAR Observation. See the associated 'srcTyps' array for the specific types of data, positionally corresponding to the UUIDs in this array. The 'srcTyps' and 'srcIds' arrays must match in size. See the corresponding srcTyps array element for the data type of the UUID and use the appropriate API operation to retrieve that object (e.g. /udl/sarobservation/{uuid}).
/// Example: /// Example: ['f7e01cd4-626b-441f-a423-17b160eb78ba', '223833c4-be0d-4fdb-a2e4-325a48eccced']
/// Constraints: No constraints specified.
/// Time the row was created in the database, auto-populated by the system.
/// Example: /// Example: 2023-04-22T17:51:40.854Z
/// Constraints: No constraints specified.
func (rcv *SARObservation_Ingest) CreatedAt() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(128))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Time the row was created in the database, auto-populated by the system.
/// Example: /// Example: 2023-04-22T17:51:40.854Z
/// Constraints: No constraints specified.
/// Application user who created the row in the database, auto-populated by the system.
/// Example: /// Example: some.user
/// Constraints: Minimum length = 1, Maximum length = 64
func (rcv *SARObservation_Ingest) CreatedBy() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(130))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Application user who created the row in the database, auto-populated by the system.
/// Example: /// Example: some.user
/// Constraints: Minimum length = 1, Maximum length = 64
/// Source of the data.
/// Example: /// Example: Bluestaq
/// Constraints: Minimum length = 1, Maximum length = 64
func (rcv *SARObservation_Ingest) Source() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(132))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Source of the data.
/// Example: /// Example: Bluestaq
/// Constraints: Minimum length = 1, Maximum length = 64
/// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
/// Example: /// Example: THIRD_PARTY_DATASOURCE
/// Constraints: Minimum length = 0, Maximum length = 64
func (rcv *SARObservation_Ingest) Origin() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(134))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
/// Example: /// Example: THIRD_PARTY_DATASOURCE
/// Constraints: Minimum length = 0, Maximum length = 64
/// The originating source network on which this record was created, auto-populated by the system.
/// Example: /// Example: OPS1
/// Constraints: Minimum length = 1, Maximum length = 32
func (rcv *SARObservation_Ingest) OrigNetwork() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(136))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The originating source network on which this record was created, auto-populated by the system.
/// Example: /// Example: OPS1
/// Constraints: Minimum length = 1, Maximum length = 32
/// The source data library from which this record was received. This could be a remote or tactical UDL or another data library. If null, the record should be assumed to have originated from the primary Enterprise UDL.
/// Example: /// Example: AXE
/// Constraints: Minimum length = 0, Maximum length = 64
func (rcv *SARObservation_Ingest) SourceDl() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(138))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The source data library from which this record was received. This could be a remote or tactical UDL or another data library. If null, the record should be assumed to have originated from the primary Enterprise UDL.
/// Example: /// Example: AXE
/// Constraints: Minimum length = 0, Maximum length = 64
/// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
/// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
/// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
/// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
/// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
/// Example: /// Example: TEST
/// Constraints: Minimum length = 1, Maximum length = 32
func (rcv *SARObservation_Ingest) DataMode() SARObservation_Ingest_dataMode_Enum {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(140))
	if o != 0 {
		return SARObservation_Ingest_dataMode_Enum(rcv._tab.GetInt8(o + rcv._tab.Pos))
	}
	return 0
}

/// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
/// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
/// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
/// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
/// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
/// Example: /// Example: TEST
/// Constraints: Minimum length = 1, Maximum length = 32
func (rcv *SARObservation_Ingest) MutateDataMode(n SARObservation_Ingest_dataMode_Enum) bool {
	return rcv._tab.MutateInt8Slot(140, int8(n))
}

func SARObservation_IngestStart(builder *flatbuffers.Builder) {
	builder.StartObject(69)
}
func SARObservation_IngestAddId(builder *flatbuffers.Builder, id flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(id), 0)
}
func SARObservation_IngestAddClassificationMarking(builder *flatbuffers.Builder, classificationMarking flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(classificationMarking), 0)
}
func SARObservation_IngestAddIdOnOrbit(builder *flatbuffers.Builder, idOnOrbit flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(idOnOrbit), 0)
}
func SARObservation_IngestAddSatNo(builder *flatbuffers.Builder, satNo int32) {
	builder.PrependInt32Slot(3, satNo, 0)
}
func SARObservation_IngestAddOrigObjectId(builder *flatbuffers.Builder, origObjectId flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(4, flatbuffers.UOffsetT(origObjectId), 0)
}
func SARObservation_IngestAddIdSensor(builder *flatbuffers.Builder, idSensor flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(5, flatbuffers.UOffsetT(idSensor), 0)
}
func SARObservation_IngestAddOrigSensorId(builder *flatbuffers.Builder, origSensorId flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(6, flatbuffers.UOffsetT(origSensorId), 0)
}
func SARObservation_IngestAddExternalId(builder *flatbuffers.Builder, externalId flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(7, flatbuffers.UOffsetT(externalId), 0)
}
func SARObservation_IngestAddCollectionId(builder *flatbuffers.Builder, collectionId flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(8, flatbuffers.UOffsetT(collectionId), 0)
}
func SARObservation_IngestAddDetectionId(builder *flatbuffers.Builder, detectionId flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(9, flatbuffers.UOffsetT(detectionId), 0)
}
func SARObservation_IngestAddCollectionStart(builder *flatbuffers.Builder, collectionStart flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(10, flatbuffers.UOffsetT(collectionStart), 0)
}
func SARObservation_IngestAddCollectionEnd(builder *flatbuffers.Builder, collectionEnd flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(11, flatbuffers.UOffsetT(collectionEnd), 0)
}
func SARObservation_IngestAddCenterTime(builder *flatbuffers.Builder, centerTime flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(12, flatbuffers.UOffsetT(centerTime), 0)
}
func SARObservation_IngestAddDetectionStart(builder *flatbuffers.Builder, detectionStart flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(13, flatbuffers.UOffsetT(detectionStart), 0)
}
func SARObservation_IngestAddDetectionEnd(builder *flatbuffers.Builder, detectionEnd flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(14, flatbuffers.UOffsetT(detectionEnd), 0)
}
func SARObservation_IngestAddDwellTime(builder *flatbuffers.Builder, dwellTime float64) {
	builder.PrependFloat64Slot(15, dwellTime, 0.0)
}
func SARObservation_IngestAddOrbitState(builder *flatbuffers.Builder, orbitState flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(16, flatbuffers.UOffsetT(orbitState), 0)
}
func SARObservation_IngestAddSarMode(builder *flatbuffers.Builder, sarMode flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(17, flatbuffers.UOffsetT(sarMode), 0)
}
func SARObservation_IngestAddOperatingBand(builder *flatbuffers.Builder, operatingBand flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(18, flatbuffers.UOffsetT(operatingBand), 0)
}
func SARObservation_IngestAddOperatingFreq(builder *flatbuffers.Builder, operatingFreq float64) {
	builder.PrependFloat64Slot(19, operatingFreq, 0.0)
}
func SARObservation_IngestAddSnr(builder *flatbuffers.Builder, snr float64) {
	builder.PrependFloat64Slot(20, snr, 0.0)
}
func SARObservation_IngestAddTxPolarization(builder *flatbuffers.Builder, txPolarization flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(21, flatbuffers.UOffsetT(txPolarization), 0)
}
func SARObservation_IngestAddRxPolarization(builder *flatbuffers.Builder, rxPolarization flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(22, flatbuffers.UOffsetT(rxPolarization), 0)
}
func SARObservation_IngestAddGrazeAngle(builder *flatbuffers.Builder, grazeAngle float64) {
	builder.PrependFloat64Slot(23, grazeAngle, 0.0)
}
func SARObservation_IngestAddIncidenceAngle(builder *flatbuffers.Builder, incidenceAngle float64) {
	builder.PrependFloat64Slot(24, incidenceAngle, 0.0)
}
func SARObservation_IngestAddSquintAngle(builder *flatbuffers.Builder, squintAngle float64) {
	builder.PrependFloat64Slot(25, squintAngle, 0.0)
}
func SARObservation_IngestAddPulseBandwidth(builder *flatbuffers.Builder, pulseBandwidth float64) {
	builder.PrependFloat64Slot(26, pulseBandwidth, 0.0)
}
func SARObservation_IngestAddPulseDuration(builder *flatbuffers.Builder, pulseDuration float64) {
	builder.PrependFloat64Slot(27, pulseDuration, 0.0)
}
func SARObservation_IngestAddContinuousSpotAngle(builder *flatbuffers.Builder, continuousSpotAngle float64) {
	builder.PrependFloat64Slot(28, continuousSpotAngle, 0.0)
}
func SARObservation_IngestAddSlantRange(builder *flatbuffers.Builder, slantRange float64) {
	builder.PrependFloat64Slot(29, slantRange, 0.0)
}
func SARObservation_IngestAddNearRange(builder *flatbuffers.Builder, nearRange float64) {
	builder.PrependFloat64Slot(30, nearRange, 0.0)
}
func SARObservation_IngestAddFarRange(builder *flatbuffers.Builder, farRange float64) {
	builder.PrependFloat64Slot(31, farRange, 0.0)
}
func SARObservation_IngestAddSwathLength(builder *flatbuffers.Builder, swathLength float64) {
	builder.PrependFloat64Slot(32, swathLength, 0.0)
}
func SARObservation_IngestAddArea(builder *flatbuffers.Builder, area flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(33, flatbuffers.UOffsetT(area), 0)
}
func SARObservation_IngestAddAtext(builder *flatbuffers.Builder, atext flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(34, flatbuffers.UOffsetT(atext), 0)
}
func SARObservation_IngestAddAgjson(builder *flatbuffers.Builder, agjson flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(35, flatbuffers.UOffsetT(agjson), 0)
}
func SARObservation_IngestAddAtype(builder *flatbuffers.Builder, atype flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(36, flatbuffers.UOffsetT(atype), 0)
}
func SARObservation_IngestAddAndims(builder *flatbuffers.Builder, andims int32) {
	builder.PrependInt32Slot(37, andims, 0)
}
func SARObservation_IngestAddAsrid(builder *flatbuffers.Builder, asrid int32) {
	builder.PrependInt32Slot(38, asrid, 0)
}
func SARObservation_IngestAddSpacingRange(builder *flatbuffers.Builder, spacingRange float64) {
	builder.PrependFloat64Slot(39, spacingRange, 0.0)
}
func SARObservation_IngestAddSpacingAzimuth(builder *flatbuffers.Builder, spacingAzimuth float64) {
	builder.PrependFloat64Slot(40, spacingAzimuth, 0.0)
}
func SARObservation_IngestAddLooksAzimuth(builder *flatbuffers.Builder, looksAzimuth int32) {
	builder.PrependInt32Slot(41, looksAzimuth, 0)
}
func SARObservation_IngestAddLooksRange(builder *flatbuffers.Builder, looksRange int32) {
	builder.PrependInt32Slot(42, looksRange, 0)
}
func SARObservation_IngestAddResolutionRange(builder *flatbuffers.Builder, resolutionRange float64) {
	builder.PrependFloat64Slot(43, resolutionRange, 0.0)
}
func SARObservation_IngestAddResolutionAzimuth(builder *flatbuffers.Builder, resolutionAzimuth float64) {
	builder.PrependFloat64Slot(44, resolutionAzimuth, 0.0)
}
func SARObservation_IngestAddObDirection(builder *flatbuffers.Builder, obDirection flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(45, flatbuffers.UOffsetT(obDirection), 0)
}
func SARObservation_IngestAddCoordSys(builder *flatbuffers.Builder, coordSys flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(46, flatbuffers.UOffsetT(coordSys), 0)
}
func SARObservation_IngestAddTargetposx(builder *flatbuffers.Builder, targetposx float64) {
	builder.PrependFloat64Slot(47, targetposx, 0.0)
}
func SARObservation_IngestAddTargetposy(builder *flatbuffers.Builder, targetposy float64) {
	builder.PrependFloat64Slot(48, targetposy, 0.0)
}
func SARObservation_IngestAddTargetposz(builder *flatbuffers.Builder, targetposz float64) {
	builder.PrependFloat64Slot(49, targetposz, 0.0)
}
func SARObservation_IngestAddSenalt(builder *flatbuffers.Builder, senalt float64) {
	builder.PrependFloat64Slot(50, senalt, 0.0)
}
func SARObservation_IngestAddSenvelx(builder *flatbuffers.Builder, senvelx float64) {
	builder.PrependFloat64Slot(51, senvelx, 0.0)
}
func SARObservation_IngestAddSenvely(builder *flatbuffers.Builder, senvely float64) {
	builder.PrependFloat64Slot(52, senvely, 0.0)
}
func SARObservation_IngestAddSenvelz(builder *flatbuffers.Builder, senvelz float64) {
	builder.PrependFloat64Slot(53, senvelz, 0.0)
}
func SARObservation_IngestAddSenlatStart(builder *flatbuffers.Builder, senlatStart float64) {
	builder.PrependFloat64Slot(54, senlatStart, 0.0)
}
func SARObservation_IngestAddSenlonStart(builder *flatbuffers.Builder, senlonStart float64) {
	builder.PrependFloat64Slot(55, senlonStart, 0.0)
}
func SARObservation_IngestAddSenlatEnd(builder *flatbuffers.Builder, senlatEnd float64) {
	builder.PrependFloat64Slot(56, senlatEnd, 0.0)
}
func SARObservation_IngestAddSenlonEnd(builder *flatbuffers.Builder, senlonEnd float64) {
	builder.PrependFloat64Slot(57, senlonEnd, 0.0)
}
func SARObservation_IngestAddTransactionId(builder *flatbuffers.Builder, transactionId flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(58, flatbuffers.UOffsetT(transactionId), 0)
}
func SARObservation_IngestAddTags(builder *flatbuffers.Builder, tags flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(59, flatbuffers.UOffsetT(tags), 0)
}
func SARObservation_IngestStartTagsVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func SARObservation_IngestAddSrcTyps(builder *flatbuffers.Builder, srcTyps flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(60, flatbuffers.UOffsetT(srcTyps), 0)
}
func SARObservation_IngestStartSrcTypsVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func SARObservation_IngestAddSrcIds(builder *flatbuffers.Builder, srcIds flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(61, flatbuffers.UOffsetT(srcIds), 0)
}
func SARObservation_IngestStartSrcIdsVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func SARObservation_IngestAddCreatedAt(builder *flatbuffers.Builder, createdAt flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(62, flatbuffers.UOffsetT(createdAt), 0)
}
func SARObservation_IngestAddCreatedBy(builder *flatbuffers.Builder, createdBy flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(63, flatbuffers.UOffsetT(createdBy), 0)
}
func SARObservation_IngestAddSource(builder *flatbuffers.Builder, source flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(64, flatbuffers.UOffsetT(source), 0)
}
func SARObservation_IngestAddOrigin(builder *flatbuffers.Builder, origin flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(65, flatbuffers.UOffsetT(origin), 0)
}
func SARObservation_IngestAddOrigNetwork(builder *flatbuffers.Builder, origNetwork flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(66, flatbuffers.UOffsetT(origNetwork), 0)
}
func SARObservation_IngestAddSourceDl(builder *flatbuffers.Builder, sourceDl flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(67, flatbuffers.UOffsetT(sourceDl), 0)
}
func SARObservation_IngestAddDataMode(builder *flatbuffers.Builder, dataMode SARObservation_Ingest_dataMode_Enum) {
	builder.PrependInt8Slot(68, int8(dataMode), 0)
}
func SARObservation_IngestEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
