// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package DataLinkReferences_Abridged

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

/// /// Collection of reference information. There can be 0 to many DataLinkReferences collections within the datalink service.
type DataLinkReferences_Abridged struct {
	_tab flatbuffers.Table
}

const DataLinkReferences_AbridgedIdentifier = "DATA"

func GetRootAsDataLinkReferences_Abridged(buf []byte, offset flatbuffers.UOffsetT) *DataLinkReferences_Abridged {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &DataLinkReferences_Abridged{}
	x.Init(buf, n+offset)
	return x
}

func FinishDataLinkReferences_AbridgedBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	identifierBytes := []byte(DataLinkReferences_AbridgedIdentifier)
	builder.FinishWithFileIdentifier(offset, identifierBytes)
}

func DataLinkReferences_AbridgedBufferHasIdentifier(buf []byte) bool {
	return flatbuffers.BufferHasIdentifier(buf, DataLinkReferences_AbridgedIdentifier)
}

func GetSizePrefixedRootAsDataLinkReferences_Abridged(buf []byte, offset flatbuffers.UOffsetT) *DataLinkReferences_Abridged {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &DataLinkReferences_Abridged{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedDataLinkReferences_AbridgedBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	identifierBytes := []byte(DataLinkReferences_AbridgedIdentifier)
	builder.FinishSizePrefixedWithFileIdentifier(offset, identifierBytes)
}

func SizePrefixedDataLinkReferences_AbridgedBufferHasIdentifier(buf []byte) bool {
	return flatbuffers.SizePrefixedBufferHasIdentifier(buf, DataLinkReferences_AbridgedIdentifier)
}

func (rcv *DataLinkReferences_Abridged) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *DataLinkReferences_Abridged) Table() flatbuffers.Table {
	return rcv._tab
}

/// Specifies an alphabetic serial identifier a reference pertaining to the data link message.
/// Example: /// Example: A
/// Constraints: Minimum length = 0, Maximum length = 2
func (rcv *DataLinkReferences_Abridged) RefSerialId() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Specifies an alphabetic serial identifier a reference pertaining to the data link message.
/// Example: /// Example: A
/// Constraints: Minimum length = 0, Maximum length = 2
/// Specifies the type of document referenced.
/// Example: /// Example: ABSTAT
/// Constraints: Minimum length = 0, Maximum length = 56
func (rcv *DataLinkReferences_Abridged) RefType() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Specifies the type of document referenced.
/// Example: /// Example: ABSTAT
/// Constraints: Minimum length = 0, Maximum length = 56
/// The originator of this reference.
/// Example: /// Example: CENTCOM
/// Constraints: Minimum length = 0, Maximum length = 30
func (rcv *DataLinkReferences_Abridged) RefOriginator() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The originator of this reference.
/// Example: /// Example: CENTCOM
/// Constraints: Minimum length = 0, Maximum length = 30
/// Timestamp of the referenced message, in ISO 8601 UTC format with millisecond precision.
/// Example: /// Example: 2024-01-07T13:55:43.123Z
/// Constraints: No constraints specified.
func (rcv *DataLinkReferences_Abridged) RefTs() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Timestamp of the referenced message, in ISO 8601 UTC format with millisecond precision.
/// Example: /// Example: 2024-01-07T13:55:43.123Z
/// Constraints: No constraints specified.
/// Serial number assigned to this reference.
/// Example: /// Example: 1402001
/// Constraints: Minimum length = 0, Maximum length = 10
func (rcv *DataLinkReferences_Abridged) RefSerialNum() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Serial number assigned to this reference.
/// Example: /// Example: 1402001
/// Constraints: Minimum length = 0, Maximum length = 10
/// Indicates any special actions, restrictions, guidance, or information relating to this reference.
/// Example: /// Example: NOTAL
/// Constraints: Minimum length = 0, Maximum length = 5
func (rcv *DataLinkReferences_Abridged) RefSpecialNotation() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Indicates any special actions, restrictions, guidance, or information relating to this reference.
/// Example: /// Example: NOTAL
/// Constraints: Minimum length = 0, Maximum length = 5
/// Array of NATO Subject Indicator Codes (SIC) or filing numbers of the document being referenced.
/// Example: /// Example: ['RDU', 'C-123-92']
/// Constraints: No constraints specified.
func (rcv *DataLinkReferences_Abridged) RefSics(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *DataLinkReferences_Abridged) RefSicsLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

/// Array of NATO Subject Indicator Codes (SIC) or filing numbers of the document being referenced.
/// Example: /// Example: ['RDU', 'C-123-92']
/// Constraints: No constraints specified.
func DataLinkReferences_AbridgedStart(builder *flatbuffers.Builder) {
	builder.StartObject(7)
}
func DataLinkReferences_AbridgedAddRefSerialId(builder *flatbuffers.Builder, refSerialId flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(refSerialId), 0)
}
func DataLinkReferences_AbridgedAddRefType(builder *flatbuffers.Builder, refType flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(refType), 0)
}
func DataLinkReferences_AbridgedAddRefOriginator(builder *flatbuffers.Builder, refOriginator flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(refOriginator), 0)
}
func DataLinkReferences_AbridgedAddRefTs(builder *flatbuffers.Builder, refTs flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(3, flatbuffers.UOffsetT(refTs), 0)
}
func DataLinkReferences_AbridgedAddRefSerialNum(builder *flatbuffers.Builder, refSerialNum flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(4, flatbuffers.UOffsetT(refSerialNum), 0)
}
func DataLinkReferences_AbridgedAddRefSpecialNotation(builder *flatbuffers.Builder, refSpecialNotation flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(5, flatbuffers.UOffsetT(refSpecialNotation), 0)
}
func DataLinkReferences_AbridgedAddRefSics(builder *flatbuffers.Builder, refSics flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(6, flatbuffers.UOffsetT(refSics), 0)
}
func DataLinkReferences_AbridgedStartRefSicsVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func DataLinkReferences_AbridgedEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
