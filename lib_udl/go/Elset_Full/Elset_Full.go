// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package Elset_Full

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

/// /// An element set is a collection of Keplerian orbital elements describing an orbit of a particular satellite. The data is used along with an orbit propagator in order to predict the motion of a satellite. The element set, or elset for short, consists of identification data, the classical elements and drag parameters.
type Elset_Full struct {
	_tab flatbuffers.Table
}

const Elset_FullIdentifier = "ELSE"

func GetRootAsElset_Full(buf []byte, offset flatbuffers.UOffsetT) *Elset_Full {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &Elset_Full{}
	x.Init(buf, n+offset)
	return x
}

func FinishElset_FullBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	identifierBytes := []byte(Elset_FullIdentifier)
	builder.FinishWithFileIdentifier(offset, identifierBytes)
}

func Elset_FullBufferHasIdentifier(buf []byte) bool {
	return flatbuffers.BufferHasIdentifier(buf, Elset_FullIdentifier)
}

func GetSizePrefixedRootAsElset_Full(buf []byte, offset flatbuffers.UOffsetT) *Elset_Full {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &Elset_Full{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedElset_FullBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	identifierBytes := []byte(Elset_FullIdentifier)
	builder.FinishSizePrefixedWithFileIdentifier(offset, identifierBytes)
}

func SizePrefixedElset_FullBufferHasIdentifier(buf []byte) bool {
	return flatbuffers.SizePrefixedBufferHasIdentifier(buf, Elset_FullIdentifier)
}

func (rcv *Elset_Full) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *Elset_Full) Table() flatbuffers.Table {
	return rcv._tab
}

/// Unique identifier of the record, auto-generated by the system.
/// Example: /// Example: ELSET-ID
/// Constraints: Minimum length = 1, Maximum length = 36
func (rcv *Elset_Full) IdElset() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Unique identifier of the record, auto-generated by the system.
/// Example: /// Example: ELSET-ID
/// Constraints: Minimum length = 1, Maximum length = 36
/// Classification marking of the data in IC/CAPCO Portion-marked format.
/// Example: /// Example: U
/// Constraints: Minimum length = 1, Maximum length = 128
func (rcv *Elset_Full) ClassificationMarking() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Classification marking of the data in IC/CAPCO Portion-marked format.
/// Example: /// Example: U
/// Constraints: Minimum length = 1, Maximum length = 128
/// Satellite/catalog number of the target on-orbit object.
/// Example: /// Example: 12
/// Constraints: No constraints specified.
func (rcv *Elset_Full) SatNo() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

/// Satellite/catalog number of the target on-orbit object.
/// Example: /// Example: 12
/// Constraints: No constraints specified.
func (rcv *Elset_Full) MutateSatNo(n int32) bool {
	return rcv._tab.MutateInt32Slot(8, n)
}

/// Elset epoch time in ISO 8601 UTC format, with microsecond precision.
/// Example: /// Example: 2018-01-01T16:00:00.123456Z
/// Constraints: No constraints specified.
func (rcv *Elset_Full) Epoch() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Elset epoch time in ISO 8601 UTC format, with microsecond precision.
/// Example: /// Example: 2018-01-01T16:00:00.123456Z
/// Constraints: No constraints specified.
/// Mean motion is the angular speed required for a body to complete one orbit, assuming constant speed in a circular orbit which completes in the same time as the variable speed, elliptical orbit of the actual body. Measured in revolutions per day.
/// Example: /// Example: 1.1
/// Constraints: No constraints specified.
func (rcv *Elset_Full) MeanMotion() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Mean motion is the angular speed required for a body to complete one orbit, assuming constant speed in a circular orbit which completes in the same time as the variable speed, elliptical orbit of the actual body. Measured in revolutions per day.
/// Example: /// Example: 1.1
/// Constraints: No constraints specified.
func (rcv *Elset_Full) MutateMeanMotion(n float64) bool {
	return rcv._tab.MutateFloat64Slot(12, n)
}

/// Unique identifier of the satellite on-orbit object, if correlated. For the public catalog, the idOnOrbit is typically the satellite number as a string, but may be a UUID for analyst or other unknown or untracked satellites.
/// Example: /// Example: ONORBIT-ID
/// Constraints: Minimum length = 0, Maximum length = 36
func (rcv *Elset_Full) IdOnOrbit() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Unique identifier of the satellite on-orbit object, if correlated. For the public catalog, the idOnOrbit is typically the satellite number as a string, but may be a UUID for analyst or other unknown or untracked satellites.
/// Example: /// Example: ONORBIT-ID
/// Constraints: Minimum length = 0, Maximum length = 36
/// Boolean indicating this Elset was unable to be correlated to a known object. This flag should only be set to true by data providers after an attempt to correlate to an on-orbit object was made and failed. If unable to correlate, the 'origObjectId' field may be populated with an internal data provider specific identifier.
/// Example: /// Example: False
/// Constraints: No constraints specified.
func (rcv *Elset_Full) Uct() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

/// Boolean indicating this Elset was unable to be correlated to a known object. This flag should only be set to true by data providers after an attempt to correlate to an on-orbit object was made and failed. If unable to correlate, the 'origObjectId' field may be populated with an internal data provider specific identifier.
/// Example: /// Example: False
/// Constraints: No constraints specified.
func (rcv *Elset_Full) MutateUct(n bool) bool {
	return rcv._tab.MutateBoolSlot(16, n)
}

/// The orbital eccentricity of an astronomical object is a parameter that determines the amount by which its orbit around another body deviates from a perfect circle. A value of 0 is a circular orbit, values between 0 and 1 form an elliptic orbit, 1 is a parabolic escape orbit, and greater than 1 is a hyperbolic escape orbit.
/// Example: /// Example: 0.333
/// Constraints: No constraints specified.
func (rcv *Elset_Full) Eccentricity() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(18))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// The orbital eccentricity of an astronomical object is a parameter that determines the amount by which its orbit around another body deviates from a perfect circle. A value of 0 is a circular orbit, values between 0 and 1 form an elliptic orbit, 1 is a parabolic escape orbit, and greater than 1 is a hyperbolic escape orbit.
/// Example: /// Example: 0.333
/// Constraints: No constraints specified.
func (rcv *Elset_Full) MutateEccentricity(n float64) bool {
	return rcv._tab.MutateFloat64Slot(18, n)
}

/// The angle between the equator and the orbit when looking from the center of the Earth. If the orbit went exactly around the equator from left to right, then the inclination would be 0. The inclination ranges from 0 to 180 degrees.
/// Example: /// Example: 45.1
/// Constraints: No constraints specified.
func (rcv *Elset_Full) Inclination() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(20))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// The angle between the equator and the orbit when looking from the center of the Earth. If the orbit went exactly around the equator from left to right, then the inclination would be 0. The inclination ranges from 0 to 180 degrees.
/// Example: /// Example: 45.1
/// Constraints: No constraints specified.
func (rcv *Elset_Full) MutateInclination(n float64) bool {
	return rcv._tab.MutateFloat64Slot(20, n)
}

/// Right ascension of the ascending node, or RAAN is the angle as measured in degrees eastwards (or, as seen from the north, counterclockwise) from the First Point of Aries to the ascending node, which is where the orbit crosses the equator when traveling north.
/// Example: /// Example: 1.1
/// Constraints: No constraints specified.
func (rcv *Elset_Full) Raan() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(22))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Right ascension of the ascending node, or RAAN is the angle as measured in degrees eastwards (or, as seen from the north, counterclockwise) from the First Point of Aries to the ascending node, which is where the orbit crosses the equator when traveling north.
/// Example: /// Example: 1.1
/// Constraints: No constraints specified.
func (rcv *Elset_Full) MutateRaan(n float64) bool {
	return rcv._tab.MutateFloat64Slot(22, n)
}

/// The argument of perigee is the angle in degrees formed between the perigee and the ascending node. If the perigee would occur at the ascending node, the argument of perigee would be 0.
/// Example: /// Example: 1.1
/// Constraints: No constraints specified.
func (rcv *Elset_Full) ArgOfPerigee() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(24))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// The argument of perigee is the angle in degrees formed between the perigee and the ascending node. If the perigee would occur at the ascending node, the argument of perigee would be 0.
/// Example: /// Example: 1.1
/// Constraints: No constraints specified.
func (rcv *Elset_Full) MutateArgOfPerigee(n float64) bool {
	return rcv._tab.MutateFloat64Slot(24, n)
}

/// Where the satellite is in its orbital path. The mean anomaly ranges from 0 to 360 degrees. The mean anomaly is referenced to the perigee. If the satellite were at the perigee, the mean anomaly would be 0.
/// Example: /// Example: 179.1
/// Constraints: No constraints specified.
func (rcv *Elset_Full) MeanAnomaly() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(26))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Where the satellite is in its orbital path. The mean anomaly ranges from 0 to 360 degrees. The mean anomaly is referenced to the perigee. If the satellite were at the perigee, the mean anomaly would be 0.
/// Example: /// Example: 179.1
/// Constraints: No constraints specified.
func (rcv *Elset_Full) MutateMeanAnomaly(n float64) bool {
	return rcv._tab.MutateFloat64Slot(26, n)
}

/// The current revolution number. The value is incremented when a satellite crosses the equator on an ascending pass.
/// Example: /// Example: 111
/// Constraints: No constraints specified.
func (rcv *Elset_Full) RevNo() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(28))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

/// The current revolution number. The value is incremented when a satellite crosses the equator on an ascending pass.
/// Example: /// Example: 111
/// Constraints: No constraints specified.
func (rcv *Elset_Full) MutateRevNo(n int32) bool {
	return rcv._tab.MutateInt32Slot(28, n)
}

/// The drag term for SGP4 orbital model, used for calculating decay constants for altitude, eccentricity etc, measured in inverse earth radii.
/// Example: /// Example: 1.1
/// Constraints: No constraints specified.
func (rcv *Elset_Full) BStar() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(30))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// The drag term for SGP4 orbital model, used for calculating decay constants for altitude, eccentricity etc, measured in inverse earth radii.
/// Example: /// Example: 1.1
/// Constraints: No constraints specified.
func (rcv *Elset_Full) MutateBStar(n float64) bool {
	return rcv._tab.MutateFloat64Slot(30, n)
}

/// AGOM, expressed in m^2/kg, is the value of the (averaged) object Area times the solar radiation pressure coefficient(Gamma) over the object Mass. Applicable only with ephemType4.
/// Example: /// Example: 0.0126
/// Constraints: No constraints specified.
func (rcv *Elset_Full) Agom() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(32))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// AGOM, expressed in m^2/kg, is the value of the (averaged) object Area times the solar radiation pressure coefficient(Gamma) over the object Mass. Applicable only with ephemType4.
/// Example: /// Example: 0.0126
/// Constraints: No constraints specified.
func (rcv *Elset_Full) MutateAgom(n float64) bool {
	return rcv._tab.MutateFloat64Slot(32, n)
}

/// Ballistic coefficient, in m^2/kg. Applicable only with ephemType4.
/// Example: /// Example: 0.00815
/// Constraints: No constraints specified.
func (rcv *Elset_Full) BallisticCoeff() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(34))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Ballistic coefficient, in m^2/kg. Applicable only with ephemType4.
/// Example: /// Example: 0.00815
/// Constraints: No constraints specified.
func (rcv *Elset_Full) MutateBallisticCoeff(n float64) bool {
	return rcv._tab.MutateFloat64Slot(34, n)
}

/// 1st derivative of the mean motion with respect to time. Units are revolutions per day squared.
/// Example: /// Example: 1.1
/// Constraints: No constraints specified.
func (rcv *Elset_Full) MeanMotionDot() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(36))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// 1st derivative of the mean motion with respect to time. Units are revolutions per day squared.
/// Example: /// Example: 1.1
/// Constraints: No constraints specified.
func (rcv *Elset_Full) MutateMeanMotionDot(n float64) bool {
	return rcv._tab.MutateFloat64Slot(36, n)
}

/// 2nd derivative of the mean motion with respect to time. Units are revolutions per day cubed.
/// Example: /// Example: 1.1
/// Constraints: No constraints specified.
func (rcv *Elset_Full) MeanMotionDdot() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(38))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// 2nd derivative of the mean motion with respect to time. Units are revolutions per day cubed.
/// Example: /// Example: 1.1
/// Constraints: No constraints specified.
func (rcv *Elset_Full) MutateMeanMotionDdot(n float64) bool {
	return rcv._tab.MutateFloat64Slot(38, n)
}

/// The sum of the periapsis and apoapsis distances divided by two. For circular orbits, the semimajor axis is the distance between the centers of the bodies, not the distance of the bodies from the center of mass. Units are kilometers.
/// Example: /// Example: 1.1
/// Constraints: No constraints specified.
func (rcv *Elset_Full) SemiMajorAxis() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(40))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// The sum of the periapsis and apoapsis distances divided by two. For circular orbits, the semimajor axis is the distance between the centers of the bodies, not the distance of the bodies from the center of mass. Units are kilometers.
/// Example: /// Example: 1.1
/// Constraints: No constraints specified.
func (rcv *Elset_Full) MutateSemiMajorAxis(n float64) bool {
	return rcv._tab.MutateFloat64Slot(40, n)
}

/// Period of the orbit equal to inverse of mean motion, in minutes.
/// Example: /// Example: 1.1
/// Constraints: No constraints specified.
func (rcv *Elset_Full) Period() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(42))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Period of the orbit equal to inverse of mean motion, in minutes.
/// Example: /// Example: 1.1
/// Constraints: No constraints specified.
func (rcv *Elset_Full) MutatePeriod(n float64) bool {
	return rcv._tab.MutateFloat64Slot(42, n)
}

/// The orbit point furthest from the center of the earth in kilometers. If not provided, apogee will be computed from the TLE according to the following. Using mu, the standard gravitational parameter for the earth (398600.4418), semi-major axis A = (mu/(n * 2 * pi/(24*3600))^2)(1/3). Using semi-major axis A, eccentricity E, apogee = (A * (1 + E)) in km. Note that the calculations are for computing the apogee radius from the center of the earth, to compute apogee altitude the radius of the earth should be subtracted (6378.135 km).
/// Example: /// Example: 1.1
/// Constraints: No constraints specified.
func (rcv *Elset_Full) Apogee() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(44))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// The orbit point furthest from the center of the earth in kilometers. If not provided, apogee will be computed from the TLE according to the following. Using mu, the standard gravitational parameter for the earth (398600.4418), semi-major axis A = (mu/(n * 2 * pi/(24*3600))^2)(1/3). Using semi-major axis A, eccentricity E, apogee = (A * (1 + E)) in km. Note that the calculations are for computing the apogee radius from the center of the earth, to compute apogee altitude the radius of the earth should be subtracted (6378.135 km).
/// Example: /// Example: 1.1
/// Constraints: No constraints specified.
func (rcv *Elset_Full) MutateApogee(n float64) bool {
	return rcv._tab.MutateFloat64Slot(44, n)
}

/// The orbit point nearest to the center of the earth in kilometers. If not provided, perigee will be computed from the TLE according to the following. Using mu, the standard gravitational parameter for the earth (398600.4418), semi-major axis A = (mu/(n * 2 * pi/(24*3600))^2)(1/3). Using semi-major axis A, eccentricity E, perigee = (A * (1 - E)) in km. Note that the calculations are for computing the perigee radius from the center of the earth, to compute perigee altitude the radius of the earth should be subtracted (6378.135 km).
/// Example: /// Example: 1.1
/// Constraints: No constraints specified.
func (rcv *Elset_Full) Perigee() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(46))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// The orbit point nearest to the center of the earth in kilometers. If not provided, perigee will be computed from the TLE according to the following. Using mu, the standard gravitational parameter for the earth (398600.4418), semi-major axis A = (mu/(n * 2 * pi/(24*3600))^2)(1/3). Using semi-major axis A, eccentricity E, perigee = (A * (1 - E)) in km. Note that the calculations are for computing the perigee radius from the center of the earth, to compute perigee altitude the radius of the earth should be subtracted (6378.135 km).
/// Example: /// Example: 1.1
/// Constraints: No constraints specified.
func (rcv *Elset_Full) MutatePerigee(n float64) bool {
	return rcv._tab.MutateFloat64Slot(46, n)
}

/// Optional identifier provided by elset source to indicate the target onorbit object of this elset. This may be an internal identifier and not necessarily map to a valid satellite number.
/// Example: /// Example: ORIGOBJECT-ID
/// Constraints: Minimum length = 0, Maximum length = 64
func (rcv *Elset_Full) OrigObjectId() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(48))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Optional identifier provided by elset source to indicate the target onorbit object of this elset. This may be an internal identifier and not necessarily map to a valid satellite number.
/// Example: /// Example: ORIGOBJECT-ID
/// Constraints: Minimum length = 0, Maximum length = 64
/// Unique identifier of the OD solution record that produced this elset. This ID can be used to obtain additional information on an OrbitDetermination object using the 'get by ID' operation (e.g. /udl/orbitdetermination/{id}). For example, the OrbitDetermination with idOrbitDetermination = abc would be queried as /udl/orbitdetermination/abc.
/// Example: /// Example: 026dd511-8ba5-47d3-9909-836149f87686
/// Constraints: Minimum length = 0, Maximum length = 36
func (rcv *Elset_Full) IdOrbitDetermination() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(50))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Unique identifier of the OD solution record that produced this elset. This ID can be used to obtain additional information on an OrbitDetermination object using the 'get by ID' operation (e.g. /udl/orbitdetermination/{id}). For example, the OrbitDetermination with idOrbitDetermination = abc would be queried as /udl/orbitdetermination/abc.
/// Example: /// Example: 026dd511-8ba5-47d3-9909-836149f87686
/// Constraints: Minimum length = 0, Maximum length = 36
/// Read-only start time at which this elset was the 'current' elset for its satellite. This field and is set by the system automatically and ignored on create/edit operations.
/// Example: /// Example: 2018-01-01T16:00:00.123Z
/// Constraints: No constraints specified.
func (rcv *Elset_Full) EffectiveFrom() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(52))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Read-only start time at which this elset was the 'current' elset for its satellite. This field and is set by the system automatically and ignored on create/edit operations.
/// Example: /// Example: 2018-01-01T16:00:00.123Z
/// Constraints: No constraints specified.
/// Read-only end time at which this elset was no longer the 'current' elset for its satellite. This field and is set by the system automatically and ignored on create/edit operations.
/// Example: /// Example: 2018-01-01T16:00:00.123Z
/// Constraints: No constraints specified.
func (rcv *Elset_Full) EffectiveUntil() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(54))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Read-only end time at which this elset was no longer the 'current' elset for its satellite. This field and is set by the system automatically and ignored on create/edit operations.
/// Example: /// Example: 2018-01-01T16:00:00.123Z
/// Constraints: No constraints specified.
/// Read only derived/generated line1 of a legacy TLE (two line element set) format, ignored on create/edit operations.
/// Example: /// Example: Example line1
/// Constraints: Minimum length = 0, Maximum length = 69
func (rcv *Elset_Full) Line1() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(56))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Read only derived/generated line1 of a legacy TLE (two line element set) format, ignored on create/edit operations.
/// Example: /// Example: Example line1
/// Constraints: Minimum length = 0, Maximum length = 69
/// Read only derived/generated line2 of a legacy TLE (two line element set) format, ignored on create/edit operations.
/// Example: /// Example: Example line2
/// Constraints: Minimum length = 0, Maximum length = 69
func (rcv *Elset_Full) Line2() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(58))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Read only derived/generated line2 of a legacy TLE (two line element set) format, ignored on create/edit operations.
/// Example: /// Example: Example line2
/// Constraints: Minimum length = 0, Maximum length = 69
/// Optional source-provided and searchable metadata or descriptor of the data.
/// Example: /// Example: Example description
/// Constraints: Minimum length = 0, Maximum length = 64
func (rcv *Elset_Full) Descriptor() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(60))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Optional source-provided and searchable metadata or descriptor of the data.
/// Example: /// Example: Example description
/// Constraints: Minimum length = 0, Maximum length = 64
/// Time the row was created in the database, auto-populated by the system.
/// Example: /// Example: 2018-01-01T16:00:00.123Z
/// Constraints: No constraints specified.
func (rcv *Elset_Full) CreatedAt() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(62))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Time the row was created in the database, auto-populated by the system.
/// Example: /// Example: 2018-01-01T16:00:00.123Z
/// Constraints: No constraints specified.
/// Application user who created the row in the database, auto-populated by the system.
/// Example: /// Example: some.user
/// Constraints: Minimum length = 1, Maximum length = 64
func (rcv *Elset_Full) CreatedBy() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(64))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Application user who created the row in the database, auto-populated by the system.
/// Example: /// Example: some.user
/// Constraints: Minimum length = 1, Maximum length = 64
/// Optional URI location in the document repository of the raw file parsed by the system to produce this record. To download the raw file, prepend https://udl-hostname/scs/download?id= to this value.
/// Example: /// Example: Example URI
/// Constraints: Minimum length = 0, Maximum length = 256
func (rcv *Elset_Full) RawFileUri() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(66))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Optional URI location in the document repository of the raw file parsed by the system to produce this record. To download the raw file, prepend https://udl-hostname/scs/download?id= to this value.
/// Example: /// Example: Example URI
/// Constraints: Minimum length = 0, Maximum length = 256
/// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
/// Example: /// Example: THIRD_PARTY_DATASOURCE
/// Constraints: Minimum length = 0, Maximum length = 64
func (rcv *Elset_Full) Origin() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(68))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
/// Example: /// Example: THIRD_PARTY_DATASOURCE
/// Constraints: Minimum length = 0, Maximum length = 64
/// The source data library from which this record was received. This could be a remote or tactical UDL or another data library. If null, the record should be assumed to have originated from the primary Enterprise UDL.
/// Example: /// Example: AXE
/// Constraints: Minimum length = 0, Maximum length = 64
func (rcv *Elset_Full) SourceDl() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(70))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The source data library from which this record was received. This could be a remote or tactical UDL or another data library. If null, the record should be assumed to have originated from the primary Enterprise UDL.
/// Example: /// Example: AXE
/// Constraints: Minimum length = 0, Maximum length = 64
/// Source of the data.
/// Example: /// Example: Bluestaq
/// Constraints: Minimum length = 1, Maximum length = 64
func (rcv *Elset_Full) Source() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(72))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Source of the data.
/// Example: /// Example: Bluestaq
/// Constraints: Minimum length = 1, Maximum length = 64
/// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
/// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
/// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
/// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
/// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
/// Example: /// Example: TEST
/// Constraints: Minimum length = 1, Maximum length = 32
func (rcv *Elset_Full) DataMode() Elset_Full_dataMode_Enum {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(74))
	if o != 0 {
		return Elset_Full_dataMode_Enum(rcv._tab.GetInt8(o + rcv._tab.Pos))
	}
	return 0
}

/// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
/// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
/// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
/// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
/// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
/// Example: /// Example: TEST
/// Constraints: Minimum length = 1, Maximum length = 32
func (rcv *Elset_Full) MutateDataMode(n Elset_Full_dataMode_Enum) bool {
	return rcv._tab.MutateInt8Slot(74, int8(n))
}

/// Optional array of provider/source specific tags for this data, where each element is no longer than 32 characters, used for implementing data owner conditional access controls to restrict access to the data. Should be left null by data providers unless conditional access controls are coordinated with the UDL team.
/// Example: /// Example: ['PROVIDER_TAG1', 'PROVIDER_TAG2']
/// Constraints: No constraints specified.
func (rcv *Elset_Full) Tags(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(76))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *Elset_Full) TagsLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(76))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

/// Optional array of provider/source specific tags for this data, where each element is no longer than 32 characters, used for implementing data owner conditional access controls to restrict access to the data. Should be left null by data providers unless conditional access controls are coordinated with the UDL team.
/// Example: /// Example: ['PROVIDER_TAG1', 'PROVIDER_TAG2']
/// Constraints: No constraints specified.
/// Optional algorithm used to produce this record.
/// Example: /// Example: Example algorithm
/// Constraints: Minimum length = 0, Maximum length = 64
func (rcv *Elset_Full) Algorithm() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(78))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Optional algorithm used to produce this record.
/// Example: /// Example: Example algorithm
/// Constraints: Minimum length = 0, Maximum length = 64
/// Optional array of UDL data (observation) UUIDs used to build this element set. See the associated sourcedDataTypes array for the specific types of observations for the positionally corresponding UUIDs in this array (the two arrays must match in size).
/// Example: /// Example: ['OBSERVATION_UUID1', 'OBSERVATION_UUID2']
/// Constraints: No constraints specified.
func (rcv *Elset_Full) SourcedData(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(80))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *Elset_Full) SourcedDataLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(80))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

/// Optional array of UDL data (observation) UUIDs used to build this element set. See the associated sourcedDataTypes array for the specific types of observations for the positionally corresponding UUIDs in this array (the two arrays must match in size).
/// Example: /// Example: ['OBSERVATION_UUID1', 'OBSERVATION_UUID2']
/// Constraints: No constraints specified.
/// Optional array of UDL observation data types used to build this element set (e.g. EO, RADAR, RF, DOA). See the associated sourcedData array for the specific UUIDs of observations for the positionally corresponding data types in this array (the two arrays must match in size).
/// Example: /// Example: ['RADAR', 'RF']
/// Constraints: No constraints specified.
func (rcv *Elset_Full) SourcedDataTypes() Elset_Full_sourcedDataTypes_Enum {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(82))
	if o != 0 {
		return Elset_Full_sourcedDataTypes_Enum(rcv._tab.GetInt8(o + rcv._tab.Pos))
	}
	return 0
}

/// Optional array of UDL observation data types used to build this element set (e.g. EO, RADAR, RF, DOA). See the associated sourcedData array for the specific UUIDs of observations for the positionally corresponding data types in this array (the two arrays must match in size).
/// Example: /// Example: ['RADAR', 'RF']
/// Constraints: No constraints specified.
func (rcv *Elset_Full) MutateSourcedDataTypes(n Elset_Full_sourcedDataTypes_Enum) bool {
	return rcv._tab.MutateInt8Slot(82, int8(n))
}

/// Optional identifier to track a commercial or marketplace transaction executed to produce this data.
/// Example: /// Example: TRANSACTION-ID
/// Constraints: Minimum length = 0, Maximum length = 64
func (rcv *Elset_Full) TransactionId() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(84))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Optional identifier to track a commercial or marketplace transaction executed to produce this data.
/// Example: /// Example: TRANSACTION-ID
/// Constraints: Minimum length = 0, Maximum length = 64
/// The ephemeris type associated with this TLE:
/// 0:&nbsp;SGP4 if orbital period&nbsp;&lt;&nbsp;225 minutes, and SDP4 otherwise
/// 1:&nbsp;SGP
/// 2:&nbsp;SGP4
/// 3:&nbsp;SDP4
/// 4:&nbsp;SGP8, also referred to as SGP4-XP
/// 5:&nbsp;SDP8
/// Example: /// Example: 1
/// Constraints: No constraints specified.
func (rcv *Elset_Full) EphemType() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(86))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

/// The ephemeris type associated with this TLE:
/// 0:&nbsp;SGP4 if orbital period&nbsp;&lt;&nbsp;225 minutes, and SDP4 otherwise
/// 1:&nbsp;SGP
/// 2:&nbsp;SGP4
/// 3:&nbsp;SDP4
/// 4:&nbsp;SGP8, also referred to as SGP4-XP
/// 5:&nbsp;SDP8
/// Example: /// Example: 1
/// Constraints: No constraints specified.
func (rcv *Elset_Full) MutateEphemType(n int32) bool {
	return rcv._tab.MutateInt32Slot(86, n)
}

/// The originating source network on which this record was created, auto-populated by the system.
/// Example: /// Example: ORIG
/// Constraints: Minimum length = 1, Maximum length = 32
func (rcv *Elset_Full) OrigNetwork() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(88))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The originating source network on which this record was created, auto-populated by the system.
/// Example: /// Example: ORIG
/// Constraints: Minimum length = 1, Maximum length = 32
/// No description provided.
/// Example: /// Example: No example provided.
/// Constraints: No constraints specified.
func (rcv *Elset_Full) OnOrbit() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(90))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// No description provided.
/// Example: /// Example: No example provided.
/// Constraints: No constraints specified.
func Elset_FullStart(builder *flatbuffers.Builder) {
	builder.StartObject(44)
}
func Elset_FullAddIdElset(builder *flatbuffers.Builder, idElset flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(idElset), 0)
}
func Elset_FullAddClassificationMarking(builder *flatbuffers.Builder, classificationMarking flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(classificationMarking), 0)
}
func Elset_FullAddSatNo(builder *flatbuffers.Builder, satNo int32) {
	builder.PrependInt32Slot(2, satNo, 0)
}
func Elset_FullAddEpoch(builder *flatbuffers.Builder, epoch flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(3, flatbuffers.UOffsetT(epoch), 0)
}
func Elset_FullAddMeanMotion(builder *flatbuffers.Builder, meanMotion float64) {
	builder.PrependFloat64Slot(4, meanMotion, 0.0)
}
func Elset_FullAddIdOnOrbit(builder *flatbuffers.Builder, idOnOrbit flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(5, flatbuffers.UOffsetT(idOnOrbit), 0)
}
func Elset_FullAddUct(builder *flatbuffers.Builder, uct bool) {
	builder.PrependBoolSlot(6, uct, false)
}
func Elset_FullAddEccentricity(builder *flatbuffers.Builder, eccentricity float64) {
	builder.PrependFloat64Slot(7, eccentricity, 0.0)
}
func Elset_FullAddInclination(builder *flatbuffers.Builder, inclination float64) {
	builder.PrependFloat64Slot(8, inclination, 0.0)
}
func Elset_FullAddRaan(builder *flatbuffers.Builder, raan float64) {
	builder.PrependFloat64Slot(9, raan, 0.0)
}
func Elset_FullAddArgOfPerigee(builder *flatbuffers.Builder, argOfPerigee float64) {
	builder.PrependFloat64Slot(10, argOfPerigee, 0.0)
}
func Elset_FullAddMeanAnomaly(builder *flatbuffers.Builder, meanAnomaly float64) {
	builder.PrependFloat64Slot(11, meanAnomaly, 0.0)
}
func Elset_FullAddRevNo(builder *flatbuffers.Builder, revNo int32) {
	builder.PrependInt32Slot(12, revNo, 0)
}
func Elset_FullAddBStar(builder *flatbuffers.Builder, bStar float64) {
	builder.PrependFloat64Slot(13, bStar, 0.0)
}
func Elset_FullAddAgom(builder *flatbuffers.Builder, agom float64) {
	builder.PrependFloat64Slot(14, agom, 0.0)
}
func Elset_FullAddBallisticCoeff(builder *flatbuffers.Builder, ballisticCoeff float64) {
	builder.PrependFloat64Slot(15, ballisticCoeff, 0.0)
}
func Elset_FullAddMeanMotionDot(builder *flatbuffers.Builder, meanMotionDot float64) {
	builder.PrependFloat64Slot(16, meanMotionDot, 0.0)
}
func Elset_FullAddMeanMotionDdot(builder *flatbuffers.Builder, meanMotionDdot float64) {
	builder.PrependFloat64Slot(17, meanMotionDdot, 0.0)
}
func Elset_FullAddSemiMajorAxis(builder *flatbuffers.Builder, semiMajorAxis float64) {
	builder.PrependFloat64Slot(18, semiMajorAxis, 0.0)
}
func Elset_FullAddPeriod(builder *flatbuffers.Builder, period float64) {
	builder.PrependFloat64Slot(19, period, 0.0)
}
func Elset_FullAddApogee(builder *flatbuffers.Builder, apogee float64) {
	builder.PrependFloat64Slot(20, apogee, 0.0)
}
func Elset_FullAddPerigee(builder *flatbuffers.Builder, perigee float64) {
	builder.PrependFloat64Slot(21, perigee, 0.0)
}
func Elset_FullAddOrigObjectId(builder *flatbuffers.Builder, origObjectId flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(22, flatbuffers.UOffsetT(origObjectId), 0)
}
func Elset_FullAddIdOrbitDetermination(builder *flatbuffers.Builder, idOrbitDetermination flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(23, flatbuffers.UOffsetT(idOrbitDetermination), 0)
}
func Elset_FullAddEffectiveFrom(builder *flatbuffers.Builder, effectiveFrom flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(24, flatbuffers.UOffsetT(effectiveFrom), 0)
}
func Elset_FullAddEffectiveUntil(builder *flatbuffers.Builder, effectiveUntil flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(25, flatbuffers.UOffsetT(effectiveUntil), 0)
}
func Elset_FullAddLine1(builder *flatbuffers.Builder, line1 flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(26, flatbuffers.UOffsetT(line1), 0)
}
func Elset_FullAddLine2(builder *flatbuffers.Builder, line2 flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(27, flatbuffers.UOffsetT(line2), 0)
}
func Elset_FullAddDescriptor(builder *flatbuffers.Builder, descriptor flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(28, flatbuffers.UOffsetT(descriptor), 0)
}
func Elset_FullAddCreatedAt(builder *flatbuffers.Builder, createdAt flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(29, flatbuffers.UOffsetT(createdAt), 0)
}
func Elset_FullAddCreatedBy(builder *flatbuffers.Builder, createdBy flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(30, flatbuffers.UOffsetT(createdBy), 0)
}
func Elset_FullAddRawFileUri(builder *flatbuffers.Builder, rawFileUri flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(31, flatbuffers.UOffsetT(rawFileUri), 0)
}
func Elset_FullAddOrigin(builder *flatbuffers.Builder, origin flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(32, flatbuffers.UOffsetT(origin), 0)
}
func Elset_FullAddSourceDl(builder *flatbuffers.Builder, sourceDl flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(33, flatbuffers.UOffsetT(sourceDl), 0)
}
func Elset_FullAddSource(builder *flatbuffers.Builder, source flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(34, flatbuffers.UOffsetT(source), 0)
}
func Elset_FullAddDataMode(builder *flatbuffers.Builder, dataMode Elset_Full_dataMode_Enum) {
	builder.PrependInt8Slot(35, int8(dataMode), 0)
}
func Elset_FullAddTags(builder *flatbuffers.Builder, tags flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(36, flatbuffers.UOffsetT(tags), 0)
}
func Elset_FullStartTagsVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func Elset_FullAddAlgorithm(builder *flatbuffers.Builder, algorithm flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(37, flatbuffers.UOffsetT(algorithm), 0)
}
func Elset_FullAddSourcedData(builder *flatbuffers.Builder, sourcedData flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(38, flatbuffers.UOffsetT(sourcedData), 0)
}
func Elset_FullStartSourcedDataVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func Elset_FullAddSourcedDataTypes(builder *flatbuffers.Builder, sourcedDataTypes Elset_Full_sourcedDataTypes_Enum) {
	builder.PrependInt8Slot(39, int8(sourcedDataTypes), 0)
}
func Elset_FullAddTransactionId(builder *flatbuffers.Builder, transactionId flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(40, flatbuffers.UOffsetT(transactionId), 0)
}
func Elset_FullAddEphemType(builder *flatbuffers.Builder, ephemType int32) {
	builder.PrependInt32Slot(41, ephemType, 0)
}
func Elset_FullAddOrigNetwork(builder *flatbuffers.Builder, origNetwork flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(42, flatbuffers.UOffsetT(origNetwork), 0)
}
func Elset_FullAddOnOrbit(builder *flatbuffers.Builder, onOrbit flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(43, flatbuffers.UOffsetT(onOrbit), 0)
}
func Elset_FullEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
