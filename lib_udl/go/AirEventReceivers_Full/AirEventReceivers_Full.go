// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package AirEventReceivers_Full

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

/// /// Collection of receiver aircraft associated with this Air Event.
type AirEventReceivers_Full struct {
	_tab flatbuffers.Table
}

const AirEventReceivers_FullIdentifier = "AIRE"

func GetRootAsAirEventReceivers_Full(buf []byte, offset flatbuffers.UOffsetT) *AirEventReceivers_Full {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &AirEventReceivers_Full{}
	x.Init(buf, n+offset)
	return x
}

func FinishAirEventReceivers_FullBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	identifierBytes := []byte(AirEventReceivers_FullIdentifier)
	builder.FinishWithFileIdentifier(offset, identifierBytes)
}

func AirEventReceivers_FullBufferHasIdentifier(buf []byte) bool {
	return flatbuffers.BufferHasIdentifier(buf, AirEventReceivers_FullIdentifier)
}

func GetSizePrefixedRootAsAirEventReceivers_Full(buf []byte, offset flatbuffers.UOffsetT) *AirEventReceivers_Full {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &AirEventReceivers_Full{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedAirEventReceivers_FullBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	identifierBytes := []byte(AirEventReceivers_FullIdentifier)
	builder.FinishSizePrefixedWithFileIdentifier(offset, identifierBytes)
}

func SizePrefixedAirEventReceivers_FullBufferHasIdentifier(buf []byte) bool {
	return flatbuffers.SizePrefixedBufferHasIdentifier(buf, AirEventReceivers_FullIdentifier)
}

func (rcv *AirEventReceivers_Full) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *AirEventReceivers_Full) Table() flatbuffers.Table {
	return rcv._tab
}

/// The UDL ID of the aircraft sortie this receiver is associated with for this event.
/// Example: /// Example: 1d03e85a-1fb9-4f6e-86a0-593306b6e3f0
/// Constraints: Minimum length = 0, Maximum length = 36
func (rcv *AirEventReceivers_Full) IdReceiverSortie() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The UDL ID of the aircraft sortie this receiver is associated with for this event.
/// Example: /// Example: 1d03e85a-1fb9-4f6e-86a0-593306b6e3f0
/// Constraints: Minimum length = 0, Maximum length = 36
/// The UDL ID of the mission this receiver is associated with for this event.
/// Example: /// Example: ce99757d-f733-461f-8939-3939d4f05946
/// Constraints: Minimum length = 0, Maximum length = 36
func (rcv *AirEventReceivers_Full) IdReceiverMission() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The UDL ID of the mission this receiver is associated with for this event.
/// Example: /// Example: ce99757d-f733-461f-8939-3939d4f05946
/// Constraints: Minimum length = 0, Maximum length = 36
/// The UDL ID of the airfield this receiver is associated with for this event.
/// Example: /// Example: 96c4c2ba-a031-4e58-9b8e-3c6fb90a7534
/// Constraints: Minimum length = 0, Maximum length = 36
func (rcv *AirEventReceivers_Full) IdReceiverAirfield() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The UDL ID of the airfield this receiver is associated with for this event.
/// Example: /// Example: 96c4c2ba-a031-4e58-9b8e-3c6fb90a7534
/// Constraints: Minimum length = 0, Maximum length = 36
/// Optional receiver identifier from external systems. This field has no meaning within UDL and is provided as a convenience for systems that require tracking of an internal system generated ID.
/// Example: /// Example: 3fb8169f-adc1-4667-acab-8415a012d766
/// Constraints: Minimum length = 0, Maximum length = 36
func (rcv *AirEventReceivers_Full) ExternalReceiverId() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Optional receiver identifier from external systems. This field has no meaning within UDL and is provided as a convenience for systems that require tracking of an internal system generated ID.
/// Example: /// Example: 3fb8169f-adc1-4667-acab-8415a012d766
/// Constraints: Minimum length = 0, Maximum length = 36
/// Coordination record identifier of this receiver.
/// Example: /// Example: TTC601
/// Constraints: Minimum length = 0, Maximum length = 6
func (rcv *AirEventReceivers_Full) ReceiverCoord() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Coordination record identifier of this receiver.
/// Example: /// Example: TTC601
/// Constraints: Minimum length = 0, Maximum length = 6
/// The Model Design Series designation of this receiver.
/// Example: /// Example: KC135R
/// Constraints: Minimum length = 0, Maximum length = 128
func (rcv *AirEventReceivers_Full) ReceiverMds() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The Model Design Series designation of this receiver.
/// Example: /// Example: KC135R
/// Constraints: Minimum length = 0, Maximum length = 128
/// The Air Mobility Command (AMC) mission identifier of this receiver.
/// Example: /// Example: 8PH000B1S052
/// Constraints: Minimum length = 0, Maximum length = 36
func (rcv *AirEventReceivers_Full) AmcReceiverMissionId() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The Air Mobility Command (AMC) mission identifier of this receiver.
/// Example: /// Example: 8PH000B1S052
/// Constraints: Minimum length = 0, Maximum length = 36
/// Alternate mission identifier of this receiver provided by source.
/// Example: /// Example: 1UN05201L121
/// Constraints: Minimum length = 0, Maximum length = 32
func (rcv *AirEventReceivers_Full) AltReceiverMissionId() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(18))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Alternate mission identifier of this receiver provided by source.
/// Example: /// Example: 1UN05201L121
/// Constraints: Minimum length = 0, Maximum length = 32
/// The call sign assigned to this receiver.
/// Example: /// Example: BAKER
/// Constraints: Minimum length = 0, Maximum length = 24
func (rcv *AirEventReceivers_Full) ReceiverCallSign() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(20))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The call sign assigned to this receiver.
/// Example: /// Example: BAKER
/// Constraints: Minimum length = 0, Maximum length = 24
/// The wing or unit that owns this receiver.
/// Example: /// Example: 117ARW
/// Constraints: Minimum length = 0, Maximum length = 256
func (rcv *AirEventReceivers_Full) ReceiverOwner() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(22))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The wing or unit that owns this receiver.
/// Example: /// Example: 117ARW
/// Constraints: Minimum length = 0, Maximum length = 256
/// The name and/or number of the point of contact for this receiver.
/// Example: /// Example: JOHN SMITH (555)555-5555
/// Constraints: Minimum length = 0, Maximum length = 68
func (rcv *AirEventReceivers_Full) ReceiverPoc() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(24))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The name and/or number of the point of contact for this receiver.
/// Example: /// Example: JOHN SMITH (555)555-5555
/// Constraints: Minimum length = 0, Maximum length = 68
/// Identifies the itinerary point of a mission that this receiver is linked to.
/// Example: /// Example: 825
/// Constraints: No constraints specified.
func (rcv *AirEventReceivers_Full) ReceiverLegNum() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(26))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

/// Identifies the itinerary point of a mission that this receiver is linked to.
/// Example: /// Example: 825
/// Constraints: No constraints specified.
func (rcv *AirEventReceivers_Full) MutateReceiverLegNum(n int32) bool {
	return rcv._tab.MutateInt32Slot(26, n)
}

/// Location the receiver is deployed to for an air refueling event.
/// Example: /// Example: KOFF
/// Constraints: Minimum length = 0, Maximum length = 4
func (rcv *AirEventReceivers_Full) ReceiverDeployedIcao() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(28))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Location the receiver is deployed to for an air refueling event.
/// Example: /// Example: KOFF
/// Constraints: Minimum length = 0, Maximum length = 4
/// Type of fuel delivery method used by the receiver during an air refueling event (BOOM, DROGUE, BOTH).
/// Example: /// Example: DROGUE
/// Constraints: Minimum length = 0, Maximum length = 6
func (rcv *AirEventReceivers_Full) ReceiverDeliveryMethod() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(30))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Type of fuel delivery method used by the receiver during an air refueling event (BOOM, DROGUE, BOTH).
/// Example: /// Example: DROGUE
/// Constraints: Minimum length = 0, Maximum length = 6
/// Total weight of the fuel transferred to this receiver during an air refueling event, in pounds.
/// Example: /// Example: 15000000.1
/// Constraints: No constraints specified.
func (rcv *AirEventReceivers_Full) FuelOn() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(32))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Total weight of the fuel transferred to this receiver during an air refueling event, in pounds.
/// Example: /// Example: 15000000.1
/// Constraints: No constraints specified.
func (rcv *AirEventReceivers_Full) MutateFuelOn(n float64) bool {
	return rcv._tab.MutateFloat64Slot(32, n)
}

/// Position of this receiver within a group of receivers in an air refueling event.
/// Example: /// Example: 2
/// Constraints: No constraints specified.
func (rcv *AirEventReceivers_Full) ReceiverCellPosition() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(34))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

/// Position of this receiver within a group of receivers in an air refueling event.
/// Example: /// Example: 2
/// Constraints: No constraints specified.
func (rcv *AirEventReceivers_Full) MutateReceiverCellPosition(n int32) bool {
	return rcv._tab.MutateInt32Slot(34, n)
}

/// Indicates the unique number by Unit ID, which identifies an air refueling event.
/// Example: /// Example: 1018
/// Constraints: Minimum length = 0, Maximum length = 15
func (rcv *AirEventReceivers_Full) SequenceNum() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(36))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Indicates the unique number by Unit ID, which identifies an air refueling event.
/// Example: /// Example: 1018
/// Constraints: Minimum length = 0, Maximum length = 15
/// The major command level (MAJCOM) or foreign military sales (FMS) name of the receiver's organization. The tanker flying hours used for an air refueling event are logged against the receiver MAJCOM or foreign government being supported.
/// Example: /// Example: AMC
/// Constraints: Minimum length = 0, Maximum length = 3
func (rcv *AirEventReceivers_Full) RecOrg() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(38))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The major command level (MAJCOM) or foreign military sales (FMS) name of the receiver's organization. The tanker flying hours used for an air refueling event are logged against the receiver MAJCOM or foreign government being supported.
/// Example: /// Example: AMC
/// Constraints: Minimum length = 0, Maximum length = 3
/// Number of aircraft contained within one receiver coordination record for an air refueling event.
/// Example: /// Example: 3
/// Constraints: No constraints specified.
func (rcv *AirEventReceivers_Full) NumRecAircraft() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(40))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

/// Number of aircraft contained within one receiver coordination record for an air refueling event.
/// Example: /// Example: 3
/// Constraints: No constraints specified.
func (rcv *AirEventReceivers_Full) MutateNumRecAircraft(n int32) bool {
	return rcv._tab.MutateInt32Slot(40, n)
}

/// Type of fuel being transferred to the receiver in an air refueling event.
/// Example: /// Example: JP8
/// Constraints: Minimum length = 0, Maximum length = 3
func (rcv *AirEventReceivers_Full) ReceiverFuelType() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(42))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Type of fuel being transferred to the receiver in an air refueling event.
/// Example: /// Example: JP8
/// Constraints: Minimum length = 0, Maximum length = 3
/// Name of the receiver exercise associated with an air refueling event.
/// Example: /// Example: NATO19
/// Constraints: Minimum length = 0, Maximum length = 12
func (rcv *AirEventReceivers_Full) ReceiverExercise() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(44))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Name of the receiver exercise associated with an air refueling event.
/// Example: /// Example: NATO19
/// Constraints: Minimum length = 0, Maximum length = 12
/// The package identifier for the receiver in an air refueling event.
/// Example: /// Example: 135
/// Constraints: Minimum length = 0, Maximum length = 3
func (rcv *AirEventReceivers_Full) PackageId() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(46))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The package identifier for the receiver in an air refueling event.
/// Example: /// Example: 135
/// Constraints: Minimum length = 0, Maximum length = 3
func AirEventReceivers_FullStart(builder *flatbuffers.Builder) {
	builder.StartObject(22)
}
func AirEventReceivers_FullAddIdReceiverSortie(builder *flatbuffers.Builder, idReceiverSortie flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(idReceiverSortie), 0)
}
func AirEventReceivers_FullAddIdReceiverMission(builder *flatbuffers.Builder, idReceiverMission flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(idReceiverMission), 0)
}
func AirEventReceivers_FullAddIdReceiverAirfield(builder *flatbuffers.Builder, idReceiverAirfield flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(idReceiverAirfield), 0)
}
func AirEventReceivers_FullAddExternalReceiverId(builder *flatbuffers.Builder, externalReceiverId flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(3, flatbuffers.UOffsetT(externalReceiverId), 0)
}
func AirEventReceivers_FullAddReceiverCoord(builder *flatbuffers.Builder, receiverCoord flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(4, flatbuffers.UOffsetT(receiverCoord), 0)
}
func AirEventReceivers_FullAddReceiverMds(builder *flatbuffers.Builder, receiverMds flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(5, flatbuffers.UOffsetT(receiverMds), 0)
}
func AirEventReceivers_FullAddAmcReceiverMissionId(builder *flatbuffers.Builder, amcReceiverMissionId flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(6, flatbuffers.UOffsetT(amcReceiverMissionId), 0)
}
func AirEventReceivers_FullAddAltReceiverMissionId(builder *flatbuffers.Builder, altReceiverMissionId flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(7, flatbuffers.UOffsetT(altReceiverMissionId), 0)
}
func AirEventReceivers_FullAddReceiverCallSign(builder *flatbuffers.Builder, receiverCallSign flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(8, flatbuffers.UOffsetT(receiverCallSign), 0)
}
func AirEventReceivers_FullAddReceiverOwner(builder *flatbuffers.Builder, receiverOwner flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(9, flatbuffers.UOffsetT(receiverOwner), 0)
}
func AirEventReceivers_FullAddReceiverPoc(builder *flatbuffers.Builder, receiverPoc flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(10, flatbuffers.UOffsetT(receiverPoc), 0)
}
func AirEventReceivers_FullAddReceiverLegNum(builder *flatbuffers.Builder, receiverLegNum int32) {
	builder.PrependInt32Slot(11, receiverLegNum, 0)
}
func AirEventReceivers_FullAddReceiverDeployedIcao(builder *flatbuffers.Builder, receiverDeployedIcao flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(12, flatbuffers.UOffsetT(receiverDeployedIcao), 0)
}
func AirEventReceivers_FullAddReceiverDeliveryMethod(builder *flatbuffers.Builder, receiverDeliveryMethod flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(13, flatbuffers.UOffsetT(receiverDeliveryMethod), 0)
}
func AirEventReceivers_FullAddFuelOn(builder *flatbuffers.Builder, fuelOn float64) {
	builder.PrependFloat64Slot(14, fuelOn, 0.0)
}
func AirEventReceivers_FullAddReceiverCellPosition(builder *flatbuffers.Builder, receiverCellPosition int32) {
	builder.PrependInt32Slot(15, receiverCellPosition, 0)
}
func AirEventReceivers_FullAddSequenceNum(builder *flatbuffers.Builder, sequenceNum flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(16, flatbuffers.UOffsetT(sequenceNum), 0)
}
func AirEventReceivers_FullAddRecOrg(builder *flatbuffers.Builder, recOrg flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(17, flatbuffers.UOffsetT(recOrg), 0)
}
func AirEventReceivers_FullAddNumRecAircraft(builder *flatbuffers.Builder, numRecAircraft int32) {
	builder.PrependInt32Slot(18, numRecAircraft, 0)
}
func AirEventReceivers_FullAddReceiverFuelType(builder *flatbuffers.Builder, receiverFuelType flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(19, flatbuffers.UOffsetT(receiverFuelType), 0)
}
func AirEventReceivers_FullAddReceiverExercise(builder *flatbuffers.Builder, receiverExercise flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(20, flatbuffers.UOffsetT(receiverExercise), 0)
}
func AirEventReceivers_FullAddPackageId(builder *flatbuffers.Builder, packageId flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(21, flatbuffers.UOffsetT(packageId), 0)
}
func AirEventReceivers_FullEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
