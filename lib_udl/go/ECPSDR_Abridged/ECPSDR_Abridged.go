// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package ECPSDR_Abridged

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

/// /// Supports Sensor Data Records (SDR) from space-borne Energetic Charged Particle (ECP) Sensors.  SDR contains sensor status telemetry and raw dosimeter measurements of the space environment.
type ECPSDR_Abridged struct {
	_tab flatbuffers.Table
}

const ECPSDR_AbridgedIdentifier = "ECPS"

func GetRootAsECPSDR_Abridged(buf []byte, offset flatbuffers.UOffsetT) *ECPSDR_Abridged {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &ECPSDR_Abridged{}
	x.Init(buf, n+offset)
	return x
}

func FinishECPSDR_AbridgedBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	identifierBytes := []byte(ECPSDR_AbridgedIdentifier)
	builder.FinishWithFileIdentifier(offset, identifierBytes)
}

func ECPSDR_AbridgedBufferHasIdentifier(buf []byte) bool {
	return flatbuffers.BufferHasIdentifier(buf, ECPSDR_AbridgedIdentifier)
}

func GetSizePrefixedRootAsECPSDR_Abridged(buf []byte, offset flatbuffers.UOffsetT) *ECPSDR_Abridged {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &ECPSDR_Abridged{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedECPSDR_AbridgedBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	identifierBytes := []byte(ECPSDR_AbridgedIdentifier)
	builder.FinishSizePrefixedWithFileIdentifier(offset, identifierBytes)
}

func SizePrefixedECPSDR_AbridgedBufferHasIdentifier(buf []byte) bool {
	return flatbuffers.SizePrefixedBufferHasIdentifier(buf, ECPSDR_AbridgedIdentifier)
}

func (rcv *ECPSDR_Abridged) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *ECPSDR_Abridged) Table() flatbuffers.Table {
	return rcv._tab
}

/// Unique identifier of the record, auto-generated by the system.
/// Example: /// Example: ECPSDR-ID
/// Constraints: Minimum length = 1, Maximum length = 36
func (rcv *ECPSDR_Abridged) Id() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Unique identifier of the record, auto-generated by the system.
/// Example: /// Example: ECPSDR-ID
/// Constraints: Minimum length = 1, Maximum length = 36
/// Classification marking of the data in IC/CAPCO Portion-marked format.
/// Example: /// Example: U
/// Constraints: Minimum length = 1, Maximum length = 128
func (rcv *ECPSDR_Abridged) ClassificationMarking() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Classification marking of the data in IC/CAPCO Portion-marked format.
/// Example: /// Example: U
/// Constraints: Minimum length = 1, Maximum length = 128
/// Unique identifier of the on-orbit satellite hosting the sensor.
/// Example: /// Example: ONORBIT-ID
/// Constraints: Minimum length = 0, Maximum length = 36
func (rcv *ECPSDR_Abridged) IdOnOrbit() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Unique identifier of the on-orbit satellite hosting the sensor.
/// Example: /// Example: ONORBIT-ID
/// Constraints: Minimum length = 0, Maximum length = 36
/// Satellite/catalog number of the on-orbit satellite hosting the sensor.
/// Example: /// Example: 101
/// Constraints: No constraints specified.
func (rcv *ECPSDR_Abridged) SatNo() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

/// Satellite/catalog number of the on-orbit satellite hosting the sensor.
/// Example: /// Example: 101
/// Constraints: No constraints specified.
func (rcv *ECPSDR_Abridged) MutateSatNo(n int32) bool {
	return rcv._tab.MutateInt32Slot(10, n)
}

/// Optional identifier provided by the record source to indicate the satellite hosting the sensor.  This may be an internal identifier and not necessarily map to a valid satellite number.
/// Example: /// Example: ORIGOBJECT-ID
/// Constraints: Minimum length = 0, Maximum length = 36
func (rcv *ECPSDR_Abridged) OrigObjectId() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Optional identifier provided by the record source to indicate the satellite hosting the sensor.  This may be an internal identifier and not necessarily map to a valid satellite number.
/// Example: /// Example: ORIGOBJECT-ID
/// Constraints: Minimum length = 0, Maximum length = 36
/// Unique identifier of the reporting sensor.
/// Example: /// Example: SENSOR-ID
/// Constraints: Minimum length = 0, Maximum length = 36
func (rcv *ECPSDR_Abridged) IdSensor() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Unique identifier of the reporting sensor.
/// Example: /// Example: SENSOR-ID
/// Constraints: Minimum length = 0, Maximum length = 36
/// Optional identifier provided by the record source to indicate the sensor identifier which produced this data.  This may be an internal identifier and not necessarily a valid sensor ID.
/// Example: /// Example: ORIGSENSOR-ID
/// Constraints: Minimum length = 0, Maximum length = 64
func (rcv *ECPSDR_Abridged) OrigSensorId() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Optional identifier provided by the record source to indicate the sensor identifier which produced this data.  This may be an internal identifier and not necessarily a valid sensor ID.
/// Example: /// Example: ORIGSENSOR-ID
/// Constraints: Minimum length = 0, Maximum length = 64
/// The type of data associated with this record (STANDARD, TRANSIENT).
/// Example: /// Example: STANDARD
/// Constraints: Minimum length = 1, Maximum length = 12
func (rcv *ECPSDR_Abridged) Type() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(18))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The type of data associated with this record (STANDARD, TRANSIENT).
/// Example: /// Example: STANDARD
/// Constraints: Minimum length = 1, Maximum length = 12
/// Time stamp of time packet receipt on ground, in ISO 8601 UTC format with millisecond precision.
/// Example: /// Example: 2018-01-01T16:00:00.123Z
/// Constraints: No constraints specified.
func (rcv *ECPSDR_Abridged) MsgTime() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(20))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Time stamp of time packet receipt on ground, in ISO 8601 UTC format with millisecond precision.
/// Example: /// Example: 2018-01-01T16:00:00.123Z
/// Constraints: No constraints specified.
/// Time of the observation, in ISO 8601 UTC format with millisecond precision.
/// Example: /// Example: 2018-01-01T16:00:00.123Z
/// Constraints: No constraints specified.
func (rcv *ECPSDR_Abridged) ObTime() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(22))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Time of the observation, in ISO 8601 UTC format with millisecond precision.
/// Example: /// Example: 2018-01-01T16:00:00.123Z
/// Constraints: No constraints specified.
/// Flag indicating whether this record is an original or re-transmitted dataset (TRUE indicates a retransmit from the host).
/// Example: /// Example: True
/// Constraints: No constraints specified.
func (rcv *ECPSDR_Abridged) Retransmit() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(24))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

/// Flag indicating whether this record is an original or re-transmitted dataset (TRUE indicates a retransmit from the host).
/// Example: /// Example: True
/// Constraints: No constraints specified.
func (rcv *ECPSDR_Abridged) MutateRetransmit(n bool) bool {
	return rcv._tab.MutateBoolSlot(24, n)
}

/// The sensor mode associated with this measurements (NORMAL, TEST).
/// Example: /// Example: TEST
/// Constraints: Minimum length = 0, Maximum length = 12
func (rcv *ECPSDR_Abridged) SenMode() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(26))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The sensor mode associated with this measurements (NORMAL, TEST).
/// Example: /// Example: TEST
/// Constraints: Minimum length = 0, Maximum length = 12
/// Unitless dosimeter detector bias for MedLET and HiLET.  MedLET (Linear Energy Transfer) and HiLET subsensors detect particles above LET thresholds, 300keV and 1MeV, respectively.
/// Example: /// Example: 12
/// Constraints: No constraints specified.
func (rcv *ECPSDR_Abridged) DosBias() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(28))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

/// Unitless dosimeter detector bias for MedLET and HiLET.  MedLET (Linear Energy Transfer) and HiLET subsensors detect particles above LET thresholds, 300keV and 1MeV, respectively.
/// Example: /// Example: 12
/// Constraints: No constraints specified.
func (rcv *ECPSDR_Abridged) MutateDosBias(n int32) bool {
	return rcv._tab.MutateInt32Slot(28, n)
}

/// Internal 5V current monitor for analog supply line.  This is sensor status telemetry.  See vRef for conversion factor to Volts.
/// Example: /// Example: 12
/// Constraints: No constraints specified.
func (rcv *ECPSDR_Abridged) Asl5VcurrMon() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(30))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

/// Internal 5V current monitor for analog supply line.  This is sensor status telemetry.  See vRef for conversion factor to Volts.
/// Example: /// Example: 12
/// Constraints: No constraints specified.
func (rcv *ECPSDR_Abridged) MutateAsl5VcurrMon(n int32) bool {
	return rcv._tab.MutateInt32Slot(30, n)
}

/// Internal 5V current monitor for digital supply line.  This is sensor status telemetry.  See vRef for conversion factor to Volts.
/// Example: /// Example: 12
/// Constraints: No constraints specified.
func (rcv *ECPSDR_Abridged) Dsl5VcurrMon() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(32))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

/// Internal 5V current monitor for digital supply line.  This is sensor status telemetry.  See vRef for conversion factor to Volts.
/// Example: /// Example: 12
/// Constraints: No constraints specified.
func (rcv *ECPSDR_Abridged) MutateDsl5VcurrMon(n int32) bool {
	return rcv._tab.MutateInt32Slot(32, n)
}

/// Power supply temperature monitor.  This is sensor status telemetry.
/// Example: /// Example: 12
/// Constraints: No constraints specified.
func (rcv *ECPSDR_Abridged) PsTempMon() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(34))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

/// Power supply temperature monitor.  This is sensor status telemetry.
/// Example: /// Example: 12
/// Constraints: No constraints specified.
func (rcv *ECPSDR_Abridged) MutatePsTempMon(n int32) bool {
	return rcv._tab.MutateInt32Slot(34, n)
}

/// CDS Charge Plate voltage monitor.  See vRef for conversion factor to Volts.
/// Example: /// Example: 12
/// Constraints: No constraints specified.
func (rcv *ECPSDR_Abridged) CdsPlateVmon() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(36))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

/// CDS Charge Plate voltage monitor.  See vRef for conversion factor to Volts.
/// Example: /// Example: 12
/// Constraints: No constraints specified.
func (rcv *ECPSDR_Abridged) MutateCdsPlateVmon(n int32) bool {
	return rcv._tab.MutateInt32Slot(36, n)
}

/// CDS reference voltage monitor.  See vRef for conversion factor to Volts.
/// Example: /// Example: 12
/// Constraints: No constraints specified.
func (rcv *ECPSDR_Abridged) CdsRefVmon() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(38))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

/// CDS reference voltage monitor.  See vRef for conversion factor to Volts.
/// Example: /// Example: 12
/// Constraints: No constraints specified.
func (rcv *ECPSDR_Abridged) MutateCdsRefVmon(n int32) bool {
	return rcv._tab.MutateInt32Slot(38, n)
}

/// Unitless sensor mounting plate temperature.
/// Example: /// Example: 12
/// Constraints: No constraints specified.
func (rcv *ECPSDR_Abridged) MpTemp() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(40))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

/// Unitless sensor mounting plate temperature.
/// Example: /// Example: 12
/// Constraints: No constraints specified.
func (rcv *ECPSDR_Abridged) MutateMpTemp(n int32) bool {
	return rcv._tab.MutateInt32Slot(40, n)
}

/// Reference voltage (volts/bit).  Conversion factor used to convert analog V monitor data from bytes to volts.
/// Example: /// Example: 12
/// Constraints: No constraints specified.
func (rcv *ECPSDR_Abridged) VRef() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(42))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

/// Reference voltage (volts/bit).  Conversion factor used to convert analog V monitor data from bytes to volts.
/// Example: /// Example: 12
/// Constraints: No constraints specified.
func (rcv *ECPSDR_Abridged) MutateVRef(n int32) bool {
	return rcv._tab.MutateInt32Slot(42, n)
}

/// Photodiode 1 signal level.
/// Example: /// Example: 12
/// Constraints: No constraints specified.
func (rcv *ECPSDR_Abridged) Pd1SigLev() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(44))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

/// Photodiode 1 signal level.
/// Example: /// Example: 12
/// Constraints: No constraints specified.
func (rcv *ECPSDR_Abridged) MutatePd1SigLev(n int32) bool {
	return rcv._tab.MutateInt32Slot(44, n)
}

/// Photodiode 2 signal level.
/// Example: /// Example: 12
/// Constraints: No constraints specified.
func (rcv *ECPSDR_Abridged) Pd2SigLev() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(46))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

/// Photodiode 2 signal level.
/// Example: /// Example: 12
/// Constraints: No constraints specified.
func (rcv *ECPSDR_Abridged) MutatePd2SigLev(n int32) bool {
	return rcv._tab.MutateInt32Slot(46, n)
}

/// Number of ESD triggers, low byte of 2-byte counter.
/// Example: /// Example: 12
/// Constraints: No constraints specified.
func (rcv *ECPSDR_Abridged) EsdTrigCountL() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(48))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

/// Number of ESD triggers, low byte of 2-byte counter.
/// Example: /// Example: 12
/// Constraints: No constraints specified.
func (rcv *ECPSDR_Abridged) MutateEsdTrigCountL(n int32) bool {
	return rcv._tab.MutateInt32Slot(48, n)
}

/// Number of ESD triggers, high byte of 2-byte counter.
/// Example: /// Example: 12
/// Constraints: No constraints specified.
func (rcv *ECPSDR_Abridged) EsdTrigCountH() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(50))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

/// Number of ESD triggers, high byte of 2-byte counter.
/// Example: /// Example: 12
/// Constraints: No constraints specified.
func (rcv *ECPSDR_Abridged) MutateEsdTrigCountH(n int32) bool {
	return rcv._tab.MutateInt32Slot(50, n)
}

/// LowLET dosimeter low range output.  Low byte of (LowLET) dosimeter output.
/// Example: /// Example: 2
/// Constraints: No constraints specified.
func (rcv *ECPSDR_Abridged) LowLetL() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(52))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

/// LowLET dosimeter low range output.  Low byte of (LowLET) dosimeter output.
/// Example: /// Example: 2
/// Constraints: No constraints specified.
func (rcv *ECPSDR_Abridged) MutateLowLetL(n int32) bool {
	return rcv._tab.MutateInt32Slot(52, n)
}

/// LowLET dosimeter medium range output.  Medium byte of (LowLET) dosimeter output.
/// Example: /// Example: 2
/// Constraints: No constraints specified.
func (rcv *ECPSDR_Abridged) LowLetM() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(54))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

/// LowLET dosimeter medium range output.  Medium byte of (LowLET) dosimeter output.
/// Example: /// Example: 2
/// Constraints: No constraints specified.
func (rcv *ECPSDR_Abridged) MutateLowLetM(n int32) bool {
	return rcv._tab.MutateInt32Slot(54, n)
}

/// MedLET1 dosimeter low range output.   Low byte of the 1st (MedLET) dosimeter output.
/// Example: /// Example: 2
/// Constraints: No constraints specified.
func (rcv *ECPSDR_Abridged) MedLet1L() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(56))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

/// MedLET1 dosimeter low range output.   Low byte of the 1st (MedLET) dosimeter output.
/// Example: /// Example: 2
/// Constraints: No constraints specified.
func (rcv *ECPSDR_Abridged) MutateMedLet1L(n int32) bool {
	return rcv._tab.MutateInt32Slot(56, n)
}

/// MedLET1 dosimeter medium range output.  Medium byte of the 1st (MedLET) dosimeter output.
/// Example: /// Example: 2
/// Constraints: No constraints specified.
func (rcv *ECPSDR_Abridged) MedLet1M() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(58))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

/// MedLET1 dosimeter medium range output.  Medium byte of the 1st (MedLET) dosimeter output.
/// Example: /// Example: 2
/// Constraints: No constraints specified.
func (rcv *ECPSDR_Abridged) MutateMedLet1M(n int32) bool {
	return rcv._tab.MutateInt32Slot(58, n)
}

/// MedLET2 dosimeter low range output.  Low byte of the 2nd (MedLET) dosimeter output.
/// Example: /// Example: 2
/// Constraints: No constraints specified.
func (rcv *ECPSDR_Abridged) MedLet2L() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(60))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

/// MedLET2 dosimeter low range output.  Low byte of the 2nd (MedLET) dosimeter output.
/// Example: /// Example: 2
/// Constraints: No constraints specified.
func (rcv *ECPSDR_Abridged) MutateMedLet2L(n int32) bool {
	return rcv._tab.MutateInt32Slot(60, n)
}

/// MedLET2 dosimeter medium range output.  Medium byte of the 2nd (MedLET) dosimeter output.
/// Example: /// Example: 2
/// Constraints: No constraints specified.
func (rcv *ECPSDR_Abridged) MedLet2M() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(62))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

/// MedLET2 dosimeter medium range output.  Medium byte of the 2nd (MedLET) dosimeter output.
/// Example: /// Example: 2
/// Constraints: No constraints specified.
func (rcv *ECPSDR_Abridged) MutateMedLet2M(n int32) bool {
	return rcv._tab.MutateInt32Slot(62, n)
}

/// MedLET3 dosimeter low range output.  Low byte of the 3rd (MedLET) dosimeter output.
/// Example: /// Example: 2
/// Constraints: No constraints specified.
func (rcv *ECPSDR_Abridged) MedLet3L() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(64))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

/// MedLET3 dosimeter low range output.  Low byte of the 3rd (MedLET) dosimeter output.
/// Example: /// Example: 2
/// Constraints: No constraints specified.
func (rcv *ECPSDR_Abridged) MutateMedLet3L(n int32) bool {
	return rcv._tab.MutateInt32Slot(64, n)
}

/// MedLET3 dosimeter medium range output.  Medium byte of the 3rd (MedLET) dosimeter output.
/// Example: /// Example: 2
/// Constraints: No constraints specified.
func (rcv *ECPSDR_Abridged) MedLet3M() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(66))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

/// MedLET3 dosimeter medium range output.  Medium byte of the 3rd (MedLET) dosimeter output.
/// Example: /// Example: 2
/// Constraints: No constraints specified.
func (rcv *ECPSDR_Abridged) MutateMedLet3M(n int32) bool {
	return rcv._tab.MutateInt32Slot(66, n)
}

/// MedLET4 dosimeter low range output.  Low byte of the 4th (MedLET) dosimeter output.
/// Example: /// Example: 2
/// Constraints: No constraints specified.
func (rcv *ECPSDR_Abridged) MedLet4L() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(68))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

/// MedLET4 dosimeter low range output.  Low byte of the 4th (MedLET) dosimeter output.
/// Example: /// Example: 2
/// Constraints: No constraints specified.
func (rcv *ECPSDR_Abridged) MutateMedLet4L(n int32) bool {
	return rcv._tab.MutateInt32Slot(68, n)
}

/// MedLET4 dosimeter medium range output.  Medium byte of the 4th (MedLET) dosimeter output.
/// Example: /// Example: 2
/// Constraints: No constraints specified.
func (rcv *ECPSDR_Abridged) MedLet4M() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(70))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

/// MedLET4 dosimeter medium range output.  Medium byte of the 4th (MedLET) dosimeter output.
/// Example: /// Example: 2
/// Constraints: No constraints specified.
func (rcv *ECPSDR_Abridged) MutateMedLet4M(n int32) bool {
	return rcv._tab.MutateInt32Slot(70, n)
}

/// HiLET dosimeter low range output.  Low byte of scaler (HiLET) dosimeter output.
/// Example: /// Example: 2
/// Constraints: No constraints specified.
func (rcv *ECPSDR_Abridged) HiLetL() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(72))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

/// HiLET dosimeter low range output.  Low byte of scaler (HiLET) dosimeter output.
/// Example: /// Example: 2
/// Constraints: No constraints specified.
func (rcv *ECPSDR_Abridged) MutateHiLetL(n int32) bool {
	return rcv._tab.MutateInt32Slot(72, n)
}

/// Unitless HiLET dosimeter medium range output.  Medium byte of (HiLET) dosimeter output.
/// Example: /// Example: 2
/// Constraints: No constraints specified.
func (rcv *ECPSDR_Abridged) HiLetM() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(74))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

/// Unitless HiLET dosimeter medium range output.  Medium byte of (HiLET) dosimeter output.
/// Example: /// Example: 2
/// Constraints: No constraints specified.
func (rcv *ECPSDR_Abridged) MutateHiLetM(n int32) bool {
	return rcv._tab.MutateInt32Slot(74, n)
}

/// Surface dosimeter low range output (converts to pico-coulombs/bit).   Low byte of 3 bytes.
/// Example: /// Example: 12
/// Constraints: No constraints specified.
func (rcv *ECPSDR_Abridged) SurfDosL() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(76))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

/// Surface dosimeter low range output (converts to pico-coulombs/bit).   Low byte of 3 bytes.
/// Example: /// Example: 12
/// Constraints: No constraints specified.
func (rcv *ECPSDR_Abridged) MutateSurfDosL(n int32) bool {
	return rcv._tab.MutateInt32Slot(76, n)
}

/// Surface dosimeter medium range output (converts to pico-coulombs/bit).  Middle byte of 3 bytes.
/// Example: /// Example: 12
/// Constraints: No constraints specified.
func (rcv *ECPSDR_Abridged) SurfDosM() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(78))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

/// Surface dosimeter medium range output (converts to pico-coulombs/bit).  Middle byte of 3 bytes.
/// Example: /// Example: 12
/// Constraints: No constraints specified.
func (rcv *ECPSDR_Abridged) MutateSurfDosM(n int32) bool {
	return rcv._tab.MutateInt32Slot(78, n)
}

/// Surface dosimeter high range output (converts to pico-coulombs/bit).  High byte of 3 bytes.
/// Example: /// Example: 12
/// Constraints: No constraints specified.
func (rcv *ECPSDR_Abridged) SurfDosH() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(80))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

/// Surface dosimeter high range output (converts to pico-coulombs/bit).  High byte of 3 bytes.
/// Example: /// Example: 12
/// Constraints: No constraints specified.
func (rcv *ECPSDR_Abridged) MutateSurfDosH(n int32) bool {
	return rcv._tab.MutateInt32Slot(80, n)
}

/// Surface dosimeter charge rate low output (converts to pico-amps/bit).  Low byte of 2 bytes.
/// Example: /// Example: 12
/// Constraints: No constraints specified.
func (rcv *ECPSDR_Abridged) SurfDosChargeL() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(82))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

/// Surface dosimeter charge rate low output (converts to pico-amps/bit).  Low byte of 2 bytes.
/// Example: /// Example: 12
/// Constraints: No constraints specified.
func (rcv *ECPSDR_Abridged) MutateSurfDosChargeL(n int32) bool {
	return rcv._tab.MutateInt32Slot(82, n)
}

/// Surface dosimeter charge rate high output (converts to pico-amps/bit).   High byte of 2 bytes.
/// Example: /// Example: 12
/// Constraints: No constraints specified.
func (rcv *ECPSDR_Abridged) SurfDosChargeH() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(84))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

/// Surface dosimeter charge rate high output (converts to pico-amps/bit).   High byte of 2 bytes.
/// Example: /// Example: 12
/// Constraints: No constraints specified.
func (rcv *ECPSDR_Abridged) MutateSurfDosChargeH(n int32) bool {
	return rcv._tab.MutateInt32Slot(84, n)
}

/// Surface dosimeter status byte.
/// Example: /// Example: 2
/// Constraints: No constraints specified.
func (rcv *ECPSDR_Abridged) SurfDosStat() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(86))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

/// Surface dosimeter status byte.
/// Example: /// Example: 2
/// Constraints: No constraints specified.
func (rcv *ECPSDR_Abridged) MutateSurfDosStat(n int32) bool {
	return rcv._tab.MutateInt32Slot(86, n)
}

/// CDS throttle number of seconds between CDS transient capture readouts.
/// Example: /// Example: 12
/// Constraints: No constraints specified.
func (rcv *ECPSDR_Abridged) CdsThrottle() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(88))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

/// CDS throttle number of seconds between CDS transient capture readouts.
/// Example: /// Example: 12
/// Constraints: No constraints specified.
func (rcv *ECPSDR_Abridged) MutateCdsThrottle(n int32) bool {
	return rcv._tab.MutateInt32Slot(88, n)
}

/// CDS Threshold setting for ESD detection threshold.  The CDS Threshold is the adjustable sensitivity of recording/digitizing an ESD as a transient packet.
/// Example: /// Example: 12
/// Constraints: No constraints specified.
func (rcv *ECPSDR_Abridged) CdsThreshold() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(90))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

/// CDS Threshold setting for ESD detection threshold.  The CDS Threshold is the adjustable sensitivity of recording/digitizing an ESD as a transient packet.
/// Example: /// Example: 12
/// Constraints: No constraints specified.
func (rcv *ECPSDR_Abridged) MutateCdsThreshold(n int32) bool {
	return rcv._tab.MutateInt32Slot(90, n)
}

/// Two byte CRC-16-CCITT checksum (ordered as first byte, second byte).
/// Example: /// Example: 12
/// Constraints: No constraints specified.
func (rcv *ECPSDR_Abridged) Checksum() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(92))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

/// Two byte CRC-16-CCITT checksum (ordered as first byte, second byte).
/// Example: /// Example: 12
/// Constraints: No constraints specified.
func (rcv *ECPSDR_Abridged) MutateChecksum(n int32) bool {
	return rcv._tab.MutateInt32Slot(92, n)
}

/// Array of 144 digitized samples of ESD waveform for transient packets.
/// Example: /// Example: [1, 2, 3]
/// Constraints: No constraints specified.
func (rcv *ECPSDR_Abridged) TransientData(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(94))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *ECPSDR_Abridged) TransientDataLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(94))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

/// Array of 144 digitized samples of ESD waveform for transient packets.
/// Example: /// Example: [1, 2, 3]
/// Constraints: No constraints specified.
/// Time the row was created in the database, auto-populated by the system.
/// Example: /// Example: 2018-01-01T16:00:00.123Z
/// Constraints: No constraints specified.
func (rcv *ECPSDR_Abridged) CreatedAt() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(96))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Time the row was created in the database, auto-populated by the system.
/// Example: /// Example: 2018-01-01T16:00:00.123Z
/// Constraints: No constraints specified.
/// Application user who created the row in the database, auto-populated by the system.
/// Example: /// Example: some.user
/// Constraints: Minimum length = 1, Maximum length = 64
func (rcv *ECPSDR_Abridged) CreatedBy() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(98))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Application user who created the row in the database, auto-populated by the system.
/// Example: /// Example: some.user
/// Constraints: Minimum length = 1, Maximum length = 64
/// Source of the data.
/// Example: /// Example: Bluestaq
/// Constraints: Minimum length = 1, Maximum length = 64
func (rcv *ECPSDR_Abridged) Source() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(100))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Source of the data.
/// Example: /// Example: Bluestaq
/// Constraints: Minimum length = 1, Maximum length = 64
/// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
/// Example: /// Example: THIRD_PARTY_DATASOURCE
/// Constraints: Minimum length = 0, Maximum length = 64
func (rcv *ECPSDR_Abridged) Origin() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(102))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
/// Example: /// Example: THIRD_PARTY_DATASOURCE
/// Constraints: Minimum length = 0, Maximum length = 64
/// The originating source network on which this record was created, auto-populated by the system.
/// Example: /// Example: ORIG
/// Constraints: Minimum length = 1, Maximum length = 32
func (rcv *ECPSDR_Abridged) OrigNetwork() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(104))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The originating source network on which this record was created, auto-populated by the system.
/// Example: /// Example: ORIG
/// Constraints: Minimum length = 1, Maximum length = 32
/// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
/// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
/// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
/// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
/// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
/// Example: /// Example: TEST
/// Constraints: Minimum length = 1, Maximum length = 32
func (rcv *ECPSDR_Abridged) DataMode() ECPSDR_Abridged_dataMode_Enum {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(106))
	if o != 0 {
		return ECPSDR_Abridged_dataMode_Enum(rcv._tab.GetInt8(o + rcv._tab.Pos))
	}
	return 0
}

/// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
/// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
/// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
/// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
/// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
/// Example: /// Example: TEST
/// Constraints: Minimum length = 1, Maximum length = 32
func (rcv *ECPSDR_Abridged) MutateDataMode(n ECPSDR_Abridged_dataMode_Enum) bool {
	return rcv._tab.MutateInt8Slot(106, int8(n))
}

func ECPSDR_AbridgedStart(builder *flatbuffers.Builder) {
	builder.StartObject(52)
}
func ECPSDR_AbridgedAddId(builder *flatbuffers.Builder, id flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(id), 0)
}
func ECPSDR_AbridgedAddClassificationMarking(builder *flatbuffers.Builder, classificationMarking flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(classificationMarking), 0)
}
func ECPSDR_AbridgedAddIdOnOrbit(builder *flatbuffers.Builder, idOnOrbit flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(idOnOrbit), 0)
}
func ECPSDR_AbridgedAddSatNo(builder *flatbuffers.Builder, satNo int32) {
	builder.PrependInt32Slot(3, satNo, 0)
}
func ECPSDR_AbridgedAddOrigObjectId(builder *flatbuffers.Builder, origObjectId flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(4, flatbuffers.UOffsetT(origObjectId), 0)
}
func ECPSDR_AbridgedAddIdSensor(builder *flatbuffers.Builder, idSensor flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(5, flatbuffers.UOffsetT(idSensor), 0)
}
func ECPSDR_AbridgedAddOrigSensorId(builder *flatbuffers.Builder, origSensorId flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(6, flatbuffers.UOffsetT(origSensorId), 0)
}
func ECPSDR_AbridgedAddType(builder *flatbuffers.Builder, type_ flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(7, flatbuffers.UOffsetT(type_), 0)
}
func ECPSDR_AbridgedAddMsgTime(builder *flatbuffers.Builder, msgTime flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(8, flatbuffers.UOffsetT(msgTime), 0)
}
func ECPSDR_AbridgedAddObTime(builder *flatbuffers.Builder, obTime flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(9, flatbuffers.UOffsetT(obTime), 0)
}
func ECPSDR_AbridgedAddRetransmit(builder *flatbuffers.Builder, retransmit bool) {
	builder.PrependBoolSlot(10, retransmit, false)
}
func ECPSDR_AbridgedAddSenMode(builder *flatbuffers.Builder, senMode flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(11, flatbuffers.UOffsetT(senMode), 0)
}
func ECPSDR_AbridgedAddDosBias(builder *flatbuffers.Builder, dosBias int32) {
	builder.PrependInt32Slot(12, dosBias, 0)
}
func ECPSDR_AbridgedAddAsl5VcurrMon(builder *flatbuffers.Builder, asl5VcurrMon int32) {
	builder.PrependInt32Slot(13, asl5VcurrMon, 0)
}
func ECPSDR_AbridgedAddDsl5VcurrMon(builder *flatbuffers.Builder, dsl5VcurrMon int32) {
	builder.PrependInt32Slot(14, dsl5VcurrMon, 0)
}
func ECPSDR_AbridgedAddPsTempMon(builder *flatbuffers.Builder, psTempMon int32) {
	builder.PrependInt32Slot(15, psTempMon, 0)
}
func ECPSDR_AbridgedAddCdsPlateVmon(builder *flatbuffers.Builder, cdsPlateVmon int32) {
	builder.PrependInt32Slot(16, cdsPlateVmon, 0)
}
func ECPSDR_AbridgedAddCdsRefVmon(builder *flatbuffers.Builder, cdsRefVmon int32) {
	builder.PrependInt32Slot(17, cdsRefVmon, 0)
}
func ECPSDR_AbridgedAddMpTemp(builder *flatbuffers.Builder, mpTemp int32) {
	builder.PrependInt32Slot(18, mpTemp, 0)
}
func ECPSDR_AbridgedAddVRef(builder *flatbuffers.Builder, vRef int32) {
	builder.PrependInt32Slot(19, vRef, 0)
}
func ECPSDR_AbridgedAddPd1SigLev(builder *flatbuffers.Builder, pd1SigLev int32) {
	builder.PrependInt32Slot(20, pd1SigLev, 0)
}
func ECPSDR_AbridgedAddPd2SigLev(builder *flatbuffers.Builder, pd2SigLev int32) {
	builder.PrependInt32Slot(21, pd2SigLev, 0)
}
func ECPSDR_AbridgedAddEsdTrigCountL(builder *flatbuffers.Builder, esdTrigCountL int32) {
	builder.PrependInt32Slot(22, esdTrigCountL, 0)
}
func ECPSDR_AbridgedAddEsdTrigCountH(builder *flatbuffers.Builder, esdTrigCountH int32) {
	builder.PrependInt32Slot(23, esdTrigCountH, 0)
}
func ECPSDR_AbridgedAddLowLetL(builder *flatbuffers.Builder, lowLetL int32) {
	builder.PrependInt32Slot(24, lowLetL, 0)
}
func ECPSDR_AbridgedAddLowLetM(builder *flatbuffers.Builder, lowLetM int32) {
	builder.PrependInt32Slot(25, lowLetM, 0)
}
func ECPSDR_AbridgedAddMedLet1L(builder *flatbuffers.Builder, medLet1L int32) {
	builder.PrependInt32Slot(26, medLet1L, 0)
}
func ECPSDR_AbridgedAddMedLet1M(builder *flatbuffers.Builder, medLet1M int32) {
	builder.PrependInt32Slot(27, medLet1M, 0)
}
func ECPSDR_AbridgedAddMedLet2L(builder *flatbuffers.Builder, medLet2L int32) {
	builder.PrependInt32Slot(28, medLet2L, 0)
}
func ECPSDR_AbridgedAddMedLet2M(builder *flatbuffers.Builder, medLet2M int32) {
	builder.PrependInt32Slot(29, medLet2M, 0)
}
func ECPSDR_AbridgedAddMedLet3L(builder *flatbuffers.Builder, medLet3L int32) {
	builder.PrependInt32Slot(30, medLet3L, 0)
}
func ECPSDR_AbridgedAddMedLet3M(builder *flatbuffers.Builder, medLet3M int32) {
	builder.PrependInt32Slot(31, medLet3M, 0)
}
func ECPSDR_AbridgedAddMedLet4L(builder *flatbuffers.Builder, medLet4L int32) {
	builder.PrependInt32Slot(32, medLet4L, 0)
}
func ECPSDR_AbridgedAddMedLet4M(builder *flatbuffers.Builder, medLet4M int32) {
	builder.PrependInt32Slot(33, medLet4M, 0)
}
func ECPSDR_AbridgedAddHiLetL(builder *flatbuffers.Builder, hiLetL int32) {
	builder.PrependInt32Slot(34, hiLetL, 0)
}
func ECPSDR_AbridgedAddHiLetM(builder *flatbuffers.Builder, hiLetM int32) {
	builder.PrependInt32Slot(35, hiLetM, 0)
}
func ECPSDR_AbridgedAddSurfDosL(builder *flatbuffers.Builder, surfDosL int32) {
	builder.PrependInt32Slot(36, surfDosL, 0)
}
func ECPSDR_AbridgedAddSurfDosM(builder *flatbuffers.Builder, surfDosM int32) {
	builder.PrependInt32Slot(37, surfDosM, 0)
}
func ECPSDR_AbridgedAddSurfDosH(builder *flatbuffers.Builder, surfDosH int32) {
	builder.PrependInt32Slot(38, surfDosH, 0)
}
func ECPSDR_AbridgedAddSurfDosChargeL(builder *flatbuffers.Builder, surfDosChargeL int32) {
	builder.PrependInt32Slot(39, surfDosChargeL, 0)
}
func ECPSDR_AbridgedAddSurfDosChargeH(builder *flatbuffers.Builder, surfDosChargeH int32) {
	builder.PrependInt32Slot(40, surfDosChargeH, 0)
}
func ECPSDR_AbridgedAddSurfDosStat(builder *flatbuffers.Builder, surfDosStat int32) {
	builder.PrependInt32Slot(41, surfDosStat, 0)
}
func ECPSDR_AbridgedAddCdsThrottle(builder *flatbuffers.Builder, cdsThrottle int32) {
	builder.PrependInt32Slot(42, cdsThrottle, 0)
}
func ECPSDR_AbridgedAddCdsThreshold(builder *flatbuffers.Builder, cdsThreshold int32) {
	builder.PrependInt32Slot(43, cdsThreshold, 0)
}
func ECPSDR_AbridgedAddChecksum(builder *flatbuffers.Builder, checksum int32) {
	builder.PrependInt32Slot(44, checksum, 0)
}
func ECPSDR_AbridgedAddTransientData(builder *flatbuffers.Builder, transientData flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(45, flatbuffers.UOffsetT(transientData), 0)
}
func ECPSDR_AbridgedStartTransientDataVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func ECPSDR_AbridgedAddCreatedAt(builder *flatbuffers.Builder, createdAt flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(46, flatbuffers.UOffsetT(createdAt), 0)
}
func ECPSDR_AbridgedAddCreatedBy(builder *flatbuffers.Builder, createdBy flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(47, flatbuffers.UOffsetT(createdBy), 0)
}
func ECPSDR_AbridgedAddSource(builder *flatbuffers.Builder, source flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(48, flatbuffers.UOffsetT(source), 0)
}
func ECPSDR_AbridgedAddOrigin(builder *flatbuffers.Builder, origin flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(49, flatbuffers.UOffsetT(origin), 0)
}
func ECPSDR_AbridgedAddOrigNetwork(builder *flatbuffers.Builder, origNetwork flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(50, flatbuffers.UOffsetT(origNetwork), 0)
}
func ECPSDR_AbridgedAddDataMode(builder *flatbuffers.Builder, dataMode ECPSDR_Abridged_dataMode_Enum) {
	builder.PrependInt8Slot(51, int8(dataMode), 0)
}
func ECPSDR_AbridgedEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
