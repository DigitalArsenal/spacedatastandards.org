// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package ManifoldElset_Ingest

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

/// /// Theoretical Keplarian orbital elements belonging to an object of interest's manifold describing a possible/theoretical orbit for an object of interest for tasking purposes.
type ManifoldElset_Ingest struct {
	_tab flatbuffers.Table
}

const ManifoldElset_IngestIdentifier = "MANI"

func GetRootAsManifoldElset_Ingest(buf []byte, offset flatbuffers.UOffsetT) *ManifoldElset_Ingest {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &ManifoldElset_Ingest{}
	x.Init(buf, n+offset)
	return x
}

func FinishManifoldElset_IngestBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	identifierBytes := []byte(ManifoldElset_IngestIdentifier)
	builder.FinishWithFileIdentifier(offset, identifierBytes)
}

func ManifoldElset_IngestBufferHasIdentifier(buf []byte) bool {
	return flatbuffers.BufferHasIdentifier(buf, ManifoldElset_IngestIdentifier)
}

func GetSizePrefixedRootAsManifoldElset_Ingest(buf []byte, offset flatbuffers.UOffsetT) *ManifoldElset_Ingest {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &ManifoldElset_Ingest{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedManifoldElset_IngestBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	identifierBytes := []byte(ManifoldElset_IngestIdentifier)
	builder.FinishSizePrefixedWithFileIdentifier(offset, identifierBytes)
}

func SizePrefixedManifoldElset_IngestBufferHasIdentifier(buf []byte) bool {
	return flatbuffers.SizePrefixedBufferHasIdentifier(buf, ManifoldElset_IngestIdentifier)
}

func (rcv *ManifoldElset_Ingest) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *ManifoldElset_Ingest) Table() flatbuffers.Table {
	return rcv._tab
}

/// Unique identifier of the record, auto-generated by the system.
/// Example: /// Example: MANIFOLDELSET-ID
/// Constraints: Minimum length = 1, Maximum length = 36
func (rcv *ManifoldElset_Ingest) Id() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Unique identifier of the record, auto-generated by the system.
/// Example: /// Example: MANIFOLDELSET-ID
/// Constraints: Minimum length = 1, Maximum length = 36
/// Identifier of the parent Manifold record.
/// Example: /// Example: REF-MANIFOLD-ID
/// Constraints: Minimum length = 1, Maximum length = 36
func (rcv *ManifoldElset_Ingest) IdManifold() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Identifier of the parent Manifold record.
/// Example: /// Example: REF-MANIFOLD-ID
/// Constraints: Minimum length = 1, Maximum length = 36
/// Classification marking of the data in IC/CAPCO Portion-marked format.
/// Example: /// Example: U
/// Constraints: Minimum length = 1, Maximum length = 128
func (rcv *ManifoldElset_Ingest) ClassificationMarking() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Classification marking of the data in IC/CAPCO Portion-marked format.
/// Example: /// Example: U
/// Constraints: Minimum length = 1, Maximum length = 128
/// A placeholder satellite number and not a true NORAD catalog number.
/// Example: /// Example: 10
/// Constraints: No constraints specified.
func (rcv *ManifoldElset_Ingest) TmpSatNo() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

/// A placeholder satellite number and not a true NORAD catalog number.
/// Example: /// Example: 10
/// Constraints: No constraints specified.
func (rcv *ManifoldElset_Ingest) MutateTmpSatNo(n int32) bool {
	return rcv._tab.MutateInt32Slot(10, n)
}

/// Elset epoch time in ISO 8601 UTC format, with microsecond precision.
/// Example: /// Example: 2021-01-01T01:01:01.123456Z
/// Constraints: No constraints specified.
func (rcv *ManifoldElset_Ingest) Epoch() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Elset epoch time in ISO 8601 UTC format, with microsecond precision.
/// Example: /// Example: 2021-01-01T01:01:01.123456Z
/// Constraints: No constraints specified.
/// The constant angular speed required for the body to complete one circular orbit in the same amount of time as the actual elliptical orbit with variable speed. Measured in revolutions per day.
/// Example: /// Example: 10.23
/// Constraints: No constraints specified.
func (rcv *ManifoldElset_Ingest) MeanMotion() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// The constant angular speed required for the body to complete one circular orbit in the same amount of time as the actual elliptical orbit with variable speed. Measured in revolutions per day.
/// Example: /// Example: 10.23
/// Constraints: No constraints specified.
func (rcv *ManifoldElset_Ingest) MutateMeanMotion(n float64) bool {
	return rcv._tab.MutateFloat64Slot(14, n)
}

/// The orbital eccentricity of an astronomical object is a parameter that determines the amount by which its orbit around another body deviates from a perfect circle. A value of 0 is a circular orbit, values between 0 and 1 form an elliptic orbit, 1 is a parabolic escape orbit, and greater than 1 is a hyperbolic escape orbit.
/// Example: /// Example: 0.5
/// Constraints: No constraints specified.
func (rcv *ManifoldElset_Ingest) Eccentricity() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// The orbital eccentricity of an astronomical object is a parameter that determines the amount by which its orbit around another body deviates from a perfect circle. A value of 0 is a circular orbit, values between 0 and 1 form an elliptic orbit, 1 is a parabolic escape orbit, and greater than 1 is a hyperbolic escape orbit.
/// Example: /// Example: 0.5
/// Constraints: No constraints specified.
func (rcv *ManifoldElset_Ingest) MutateEccentricity(n float64) bool {
	return rcv._tab.MutateFloat64Slot(16, n)
}

/// The angle between the equator and the orbit when looking from the center of the Earth. If the orbit went exactly around the equator from left to right, then the inclination would be 0. The inclination ranges from 0 to 180 degrees.
/// Example: /// Example: 90.23
/// Constraints: No constraints specified.
func (rcv *ManifoldElset_Ingest) Inclination() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(18))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// The angle between the equator and the orbit when looking from the center of the Earth. If the orbit went exactly around the equator from left to right, then the inclination would be 0. The inclination ranges from 0 to 180 degrees.
/// Example: /// Example: 90.23
/// Constraints: No constraints specified.
func (rcv *ManifoldElset_Ingest) MutateInclination(n float64) bool {
	return rcv._tab.MutateFloat64Slot(18, n)
}

/// Right ascension of the ascending node, or RAAN is the angle as measured in degrees eastwards (or, as seen from the north, counterclockwise) from the First Point of Aries to the ascending node, which is where the orbit crosses the equator when traveling north.
/// Example: /// Example: 10.23
/// Constraints: No constraints specified.
func (rcv *ManifoldElset_Ingest) Raan() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(20))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Right ascension of the ascending node, or RAAN is the angle as measured in degrees eastwards (or, as seen from the north, counterclockwise) from the First Point of Aries to the ascending node, which is where the orbit crosses the equator when traveling north.
/// Example: /// Example: 10.23
/// Constraints: No constraints specified.
func (rcv *ManifoldElset_Ingest) MutateRaan(n float64) bool {
	return rcv._tab.MutateFloat64Slot(20, n)
}

/// The argument of perigee is the angle in degrees formed between the perigee and the ascending node. If the perigee would occur at the ascending node, the argument of perigee would be 0.
/// Example: /// Example: 10.23
/// Constraints: No constraints specified.
func (rcv *ManifoldElset_Ingest) ArgOfPerigee() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(22))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// The argument of perigee is the angle in degrees formed between the perigee and the ascending node. If the perigee would occur at the ascending node, the argument of perigee would be 0.
/// Example: /// Example: 10.23
/// Constraints: No constraints specified.
func (rcv *ManifoldElset_Ingest) MutateArgOfPerigee(n float64) bool {
	return rcv._tab.MutateFloat64Slot(22, n)
}

/// Where the satellite is in its orbital path. The mean anomaly ranges from 0 to 360 degrees. The mean anomaly is referenced to the perigee. If the satellite were at the perigee, the mean anomaly would be 0.
/// Example: /// Example: 10.23
/// Constraints: No constraints specified.
func (rcv *ManifoldElset_Ingest) MeanAnomaly() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(24))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Where the satellite is in its orbital path. The mean anomaly ranges from 0 to 360 degrees. The mean anomaly is referenced to the perigee. If the satellite were at the perigee, the mean anomaly would be 0.
/// Example: /// Example: 10.23
/// Constraints: No constraints specified.
func (rcv *ManifoldElset_Ingest) MutateMeanAnomaly(n float64) bool {
	return rcv._tab.MutateFloat64Slot(24, n)
}

/// The current revolution number. The value is incremented when a satellite crosses the equator on an ascending pass.
/// Example: /// Example: 123
/// Constraints: No constraints specified.
func (rcv *ManifoldElset_Ingest) RevNo() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(26))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

/// The current revolution number. The value is incremented when a satellite crosses the equator on an ascending pass.
/// Example: /// Example: 123
/// Constraints: No constraints specified.
func (rcv *ManifoldElset_Ingest) MutateRevNo(n int32) bool {
	return rcv._tab.MutateInt32Slot(26, n)
}

/// The drag term for SGP4 orbital model, used for calculating decay constants for altitude, eccentricity etc, measured in inverse earth radii.
/// Example: /// Example: 10.23
/// Constraints: No constraints specified.
func (rcv *ManifoldElset_Ingest) BStar() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(28))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// The drag term for SGP4 orbital model, used for calculating decay constants for altitude, eccentricity etc, measured in inverse earth radii.
/// Example: /// Example: 10.23
/// Constraints: No constraints specified.
func (rcv *ManifoldElset_Ingest) MutateBStar(n float64) bool {
	return rcv._tab.MutateFloat64Slot(28, n)
}

/// 1st derivative of the mean motion with respect to time. Units are revolutions per day squared.
/// Example: /// Example: 10.23
/// Constraints: No constraints specified.
func (rcv *ManifoldElset_Ingest) MeanMotionDot() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(30))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// 1st derivative of the mean motion with respect to time. Units are revolutions per day squared.
/// Example: /// Example: 10.23
/// Constraints: No constraints specified.
func (rcv *ManifoldElset_Ingest) MutateMeanMotionDot(n float64) bool {
	return rcv._tab.MutateFloat64Slot(30, n)
}

/// 2nd derivative of the mean motion with respect to time. Units are revolutions per day cubed.
/// Example: /// Example: 10.23
/// Constraints: No constraints specified.
func (rcv *ManifoldElset_Ingest) MeanMotionDdot() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(32))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// 2nd derivative of the mean motion with respect to time. Units are revolutions per day cubed.
/// Example: /// Example: 10.23
/// Constraints: No constraints specified.
func (rcv *ManifoldElset_Ingest) MutateMeanMotionDdot(n float64) bool {
	return rcv._tab.MutateFloat64Slot(32, n)
}

/// The sum of the periapsis and apoapsis distances divided by two. For circular orbits, the semimajor axis is the distance between the centers of the bodies, not the distance of the bodies from the center of mass.
/// Example: /// Example: 10.23
/// Constraints: No constraints specified.
func (rcv *ManifoldElset_Ingest) SemiMajorAxis() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(34))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// The sum of the periapsis and apoapsis distances divided by two. For circular orbits, the semimajor axis is the distance between the centers of the bodies, not the distance of the bodies from the center of mass.
/// Example: /// Example: 10.23
/// Constraints: No constraints specified.
func (rcv *ManifoldElset_Ingest) MutateSemiMajorAxis(n float64) bool {
	return rcv._tab.MutateFloat64Slot(34, n)
}

/// Period of the orbit equal to inverse of mean motion.
/// Example: /// Example: 10.23
/// Constraints: No constraints specified.
func (rcv *ManifoldElset_Ingest) Period() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(36))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Period of the orbit equal to inverse of mean motion.
/// Example: /// Example: 10.23
/// Constraints: No constraints specified.
func (rcv *ManifoldElset_Ingest) MutatePeriod(n float64) bool {
	return rcv._tab.MutateFloat64Slot(36, n)
}

/// The Orbit point furthest from the center of the earth in kilometers.
/// Example: /// Example: 10.23
/// Constraints: No constraints specified.
func (rcv *ManifoldElset_Ingest) Apogee() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(38))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// The Orbit point furthest from the center of the earth in kilometers.
/// Example: /// Example: 10.23
/// Constraints: No constraints specified.
func (rcv *ManifoldElset_Ingest) MutateApogee(n float64) bool {
	return rcv._tab.MutateFloat64Slot(38, n)
}

/// The orbit point nearest to the center of the earth in kilometers.
/// Example: /// Example: 10.23
/// Constraints: No constraints specified.
func (rcv *ManifoldElset_Ingest) Perigee() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(40))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// The orbit point nearest to the center of the earth in kilometers.
/// Example: /// Example: 10.23
/// Constraints: No constraints specified.
func (rcv *ManifoldElset_Ingest) MutatePerigee(n float64) bool {
	return rcv._tab.MutateFloat64Slot(40, n)
}

/// Read only derived/generated line1 of a legacy TLE (two line element set) format, ignored on create/edit operations.
/// Example: /// Example: No example provided.
/// Constraints: Minimum length = 0, Maximum length = 69
func (rcv *ManifoldElset_Ingest) Line1() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(42))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Read only derived/generated line1 of a legacy TLE (two line element set) format, ignored on create/edit operations.
/// Example: /// Example: No example provided.
/// Constraints: Minimum length = 0, Maximum length = 69
/// Read only derived/generated line2 of a legacy TLE (two line element set) format, ignored on create/edit operations.
/// Example: /// Example: No example provided.
/// Constraints: Minimum length = 0, Maximum length = 69
func (rcv *ManifoldElset_Ingest) Line2() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(44))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Read only derived/generated line2 of a legacy TLE (two line element set) format, ignored on create/edit operations.
/// Example: /// Example: No example provided.
/// Constraints: Minimum length = 0, Maximum length = 69
/// Time the row was created in the database, auto-populated by the system.
/// Example: /// Example: 2018-01-01T16:00:00.123Z
/// Constraints: No constraints specified.
func (rcv *ManifoldElset_Ingest) CreatedAt() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(46))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Time the row was created in the database, auto-populated by the system.
/// Example: /// Example: 2018-01-01T16:00:00.123Z
/// Constraints: No constraints specified.
/// Application user who created the row in the database, auto-populated by the system.
/// Example: /// Example: some.user
/// Constraints: Minimum length = 1, Maximum length = 64
func (rcv *ManifoldElset_Ingest) CreatedBy() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(48))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Application user who created the row in the database, auto-populated by the system.
/// Example: /// Example: some.user
/// Constraints: Minimum length = 1, Maximum length = 64
/// Source of the data.
/// Example: /// Example: Bluestaq
/// Constraints: Minimum length = 1, Maximum length = 64
func (rcv *ManifoldElset_Ingest) Source() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(50))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Source of the data.
/// Example: /// Example: Bluestaq
/// Constraints: Minimum length = 1, Maximum length = 64
/// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
/// Example: /// Example: THIRD_PARTY_DATASOURCE
/// Constraints: Minimum length = 0, Maximum length = 64
func (rcv *ManifoldElset_Ingest) Origin() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(52))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
/// Example: /// Example: THIRD_PARTY_DATASOURCE
/// Constraints: Minimum length = 0, Maximum length = 64
/// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
/// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
/// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
/// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
/// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
/// Example: /// Example: TEST
/// Constraints: Minimum length = 1, Maximum length = 32
func (rcv *ManifoldElset_Ingest) DataMode() ManifoldElset_Ingest_dataMode_Enum {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(54))
	if o != 0 {
		return ManifoldElset_Ingest_dataMode_Enum(rcv._tab.GetInt8(o + rcv._tab.Pos))
	}
	return 0
}

/// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
/// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
/// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
/// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
/// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
/// Example: /// Example: TEST
/// Constraints: Minimum length = 1, Maximum length = 32
func (rcv *ManifoldElset_Ingest) MutateDataMode(n ManifoldElset_Ingest_dataMode_Enum) bool {
	return rcv._tab.MutateInt8Slot(54, int8(n))
}

/// The originating source network on which this record was created, auto-populated by the system.
/// Example: /// Example: ORIG
/// Constraints: Minimum length = 0, Maximum length = 32
func (rcv *ManifoldElset_Ingest) OrigNetwork() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(56))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The originating source network on which this record was created, auto-populated by the system.
/// Example: /// Example: ORIG
/// Constraints: Minimum length = 0, Maximum length = 32
func ManifoldElset_IngestStart(builder *flatbuffers.Builder) {
	builder.StartObject(27)
}
func ManifoldElset_IngestAddId(builder *flatbuffers.Builder, id flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(id), 0)
}
func ManifoldElset_IngestAddIdManifold(builder *flatbuffers.Builder, idManifold flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(idManifold), 0)
}
func ManifoldElset_IngestAddClassificationMarking(builder *flatbuffers.Builder, classificationMarking flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(classificationMarking), 0)
}
func ManifoldElset_IngestAddTmpSatNo(builder *flatbuffers.Builder, tmpSatNo int32) {
	builder.PrependInt32Slot(3, tmpSatNo, 0)
}
func ManifoldElset_IngestAddEpoch(builder *flatbuffers.Builder, epoch flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(4, flatbuffers.UOffsetT(epoch), 0)
}
func ManifoldElset_IngestAddMeanMotion(builder *flatbuffers.Builder, meanMotion float64) {
	builder.PrependFloat64Slot(5, meanMotion, 0.0)
}
func ManifoldElset_IngestAddEccentricity(builder *flatbuffers.Builder, eccentricity float64) {
	builder.PrependFloat64Slot(6, eccentricity, 0.0)
}
func ManifoldElset_IngestAddInclination(builder *flatbuffers.Builder, inclination float64) {
	builder.PrependFloat64Slot(7, inclination, 0.0)
}
func ManifoldElset_IngestAddRaan(builder *flatbuffers.Builder, raan float64) {
	builder.PrependFloat64Slot(8, raan, 0.0)
}
func ManifoldElset_IngestAddArgOfPerigee(builder *flatbuffers.Builder, argOfPerigee float64) {
	builder.PrependFloat64Slot(9, argOfPerigee, 0.0)
}
func ManifoldElset_IngestAddMeanAnomaly(builder *flatbuffers.Builder, meanAnomaly float64) {
	builder.PrependFloat64Slot(10, meanAnomaly, 0.0)
}
func ManifoldElset_IngestAddRevNo(builder *flatbuffers.Builder, revNo int32) {
	builder.PrependInt32Slot(11, revNo, 0)
}
func ManifoldElset_IngestAddBStar(builder *flatbuffers.Builder, bStar float64) {
	builder.PrependFloat64Slot(12, bStar, 0.0)
}
func ManifoldElset_IngestAddMeanMotionDot(builder *flatbuffers.Builder, meanMotionDot float64) {
	builder.PrependFloat64Slot(13, meanMotionDot, 0.0)
}
func ManifoldElset_IngestAddMeanMotionDdot(builder *flatbuffers.Builder, meanMotionDdot float64) {
	builder.PrependFloat64Slot(14, meanMotionDdot, 0.0)
}
func ManifoldElset_IngestAddSemiMajorAxis(builder *flatbuffers.Builder, semiMajorAxis float64) {
	builder.PrependFloat64Slot(15, semiMajorAxis, 0.0)
}
func ManifoldElset_IngestAddPeriod(builder *flatbuffers.Builder, period float64) {
	builder.PrependFloat64Slot(16, period, 0.0)
}
func ManifoldElset_IngestAddApogee(builder *flatbuffers.Builder, apogee float64) {
	builder.PrependFloat64Slot(17, apogee, 0.0)
}
func ManifoldElset_IngestAddPerigee(builder *flatbuffers.Builder, perigee float64) {
	builder.PrependFloat64Slot(18, perigee, 0.0)
}
func ManifoldElset_IngestAddLine1(builder *flatbuffers.Builder, line1 flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(19, flatbuffers.UOffsetT(line1), 0)
}
func ManifoldElset_IngestAddLine2(builder *flatbuffers.Builder, line2 flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(20, flatbuffers.UOffsetT(line2), 0)
}
func ManifoldElset_IngestAddCreatedAt(builder *flatbuffers.Builder, createdAt flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(21, flatbuffers.UOffsetT(createdAt), 0)
}
func ManifoldElset_IngestAddCreatedBy(builder *flatbuffers.Builder, createdBy flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(22, flatbuffers.UOffsetT(createdBy), 0)
}
func ManifoldElset_IngestAddSource(builder *flatbuffers.Builder, source flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(23, flatbuffers.UOffsetT(source), 0)
}
func ManifoldElset_IngestAddOrigin(builder *flatbuffers.Builder, origin flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(24, flatbuffers.UOffsetT(origin), 0)
}
func ManifoldElset_IngestAddDataMode(builder *flatbuffers.Builder, dataMode ManifoldElset_Ingest_dataMode_Enum) {
	builder.PrependInt8Slot(25, int8(dataMode), 0)
}
func ManifoldElset_IngestAddOrigNetwork(builder *flatbuffers.Builder, origNetwork flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(26, flatbuffers.UOffsetT(origNetwork), 0)
}
func ManifoldElset_IngestEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
