// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package AntennaDetails_Ingest

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

/// /// Detailed information for a spacecraft communication antenna. One antenna may have multiple AntennaDetails records, compiled by various sources.
type AntennaDetails_Ingest struct {
	_tab flatbuffers.Table
}

const AntennaDetails_IngestIdentifier = "ANTE"

func GetRootAsAntennaDetails_Ingest(buf []byte, offset flatbuffers.UOffsetT) *AntennaDetails_Ingest {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &AntennaDetails_Ingest{}
	x.Init(buf, n+offset)
	return x
}

func FinishAntennaDetails_IngestBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	identifierBytes := []byte(AntennaDetails_IngestIdentifier)
	builder.FinishWithFileIdentifier(offset, identifierBytes)
}

func AntennaDetails_IngestBufferHasIdentifier(buf []byte) bool {
	return flatbuffers.BufferHasIdentifier(buf, AntennaDetails_IngestIdentifier)
}

func GetSizePrefixedRootAsAntennaDetails_Ingest(buf []byte, offset flatbuffers.UOffsetT) *AntennaDetails_Ingest {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &AntennaDetails_Ingest{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedAntennaDetails_IngestBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	identifierBytes := []byte(AntennaDetails_IngestIdentifier)
	builder.FinishSizePrefixedWithFileIdentifier(offset, identifierBytes)
}

func SizePrefixedAntennaDetails_IngestBufferHasIdentifier(buf []byte) bool {
	return flatbuffers.SizePrefixedBufferHasIdentifier(buf, AntennaDetails_IngestIdentifier)
}

func (rcv *AntennaDetails_Ingest) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *AntennaDetails_Ingest) Table() flatbuffers.Table {
	return rcv._tab
}

/// Unique identifier of the record, auto-generated by the system.
/// Example: /// Example: ANTENNADETAILS-ID
/// Constraints: Minimum length = 1, Maximum length = 36
func (rcv *AntennaDetails_Ingest) Id() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Unique identifier of the record, auto-generated by the system.
/// Example: /// Example: ANTENNADETAILS-ID
/// Constraints: Minimum length = 1, Maximum length = 36
/// Unique identifier of the parent Antenna.
/// Example: /// Example: ANTENNA-ID
/// Constraints: Minimum length = 1, Maximum length = 36
func (rcv *AntennaDetails_Ingest) IdAntenna() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Unique identifier of the parent Antenna.
/// Example: /// Example: ANTENNA-ID
/// Constraints: Minimum length = 1, Maximum length = 36
/// Classification marking of the data in IC/CAPCO Portion-marked format.
/// Example: /// Example: U
/// Constraints: Minimum length = 1, Maximum length = 128
func (rcv *AntennaDetails_Ingest) ClassificationMarking() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Classification marking of the data in IC/CAPCO Portion-marked format.
/// Example: /// Example: U
/// Constraints: Minimum length = 1, Maximum length = 128
/// Type of antenna (e.g. Reflector, Double Reflector, Shaped Reflector, Horn, Parabolic, etc.).
/// Example: /// Example: Reflector
/// Constraints: Minimum length = 0, Maximum length = 64
func (rcv *AntennaDetails_Ingest) Type() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Type of antenna (e.g. Reflector, Double Reflector, Shaped Reflector, Horn, Parabolic, etc.).
/// Example: /// Example: Reflector
/// Constraints: Minimum length = 0, Maximum length = 64
/// Antenna position (e.g. Top, Nadir, Side).
/// Example: /// Example: Top
/// Constraints: Minimum length = 0, Maximum length = 128
func (rcv *AntennaDetails_Ingest) Position() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Antenna position (e.g. Top, Nadir, Side).
/// Example: /// Example: Top
/// Constraints: Minimum length = 0, Maximum length = 128
/// Antenna mode (e.g. TX,RX).
/// Example: /// Example: TX
/// Constraints: Minimum length = 0, Maximum length = 4
func (rcv *AntennaDetails_Ingest) Mode() AntennaDetails_Ingest_mode_Enum {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return AntennaDetails_Ingest_mode_Enum(rcv._tab.GetInt8(o + rcv._tab.Pos))
	}
	return 0
}

/// Antenna mode (e.g. TX,RX).
/// Example: /// Example: TX
/// Constraints: Minimum length = 0, Maximum length = 4
func (rcv *AntennaDetails_Ingest) MutateMode(n AntennaDetails_Ingest_mode_Enum) bool {
	return rcv._tab.MutateInt8Slot(14, int8(n))
}

/// Boolean indicating if this antenna is steerable.
/// Example: /// Example: False
/// Constraints: No constraints specified.
func (rcv *AntennaDetails_Ingest) Steerable() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

/// Boolean indicating if this antenna is steerable.
/// Example: /// Example: False
/// Constraints: No constraints specified.
func (rcv *AntennaDetails_Ingest) MutateSteerable(n bool) bool {
	return rcv._tab.MutateBoolSlot(16, n)
}

/// Boolean indicating if this is a beam forming antenna.
/// Example: /// Example: False
/// Constraints: No constraints specified.
func (rcv *AntennaDetails_Ingest) BeamForming() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(18))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

/// Boolean indicating if this is a beam forming antenna.
/// Example: /// Example: False
/// Constraints: No constraints specified.
func (rcv *AntennaDetails_Ingest) MutateBeamForming(n bool) bool {
	return rcv._tab.MutateBoolSlot(18, n)
}

/// ID of the organization that manufactures the antenna.
/// Example: /// Example: MANUFACTUREORG-ID
/// Constraints: Minimum length = 0, Maximum length = 36
func (rcv *AntennaDetails_Ingest) ManufacturerOrgId() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(20))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// ID of the organization that manufactures the antenna.
/// Example: /// Example: MANUFACTUREORG-ID
/// Constraints: Minimum length = 0, Maximum length = 36
/// Antenna diameter in meters.
/// Example: /// Example: 0.01
/// Constraints: No constraints specified.
func (rcv *AntennaDetails_Ingest) Diameter() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(22))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Antenna diameter in meters.
/// Example: /// Example: 0.01
/// Constraints: No constraints specified.
func (rcv *AntennaDetails_Ingest) MutateDiameter(n float64) bool {
	return rcv._tab.MutateFloat64Slot(22, n)
}

/// Array with 1-2 values specifying the length and width (for rectangular) and just length for dipole antennas in meters.
/// Example: /// Example: [0.03, 0.05]
/// Constraints: No constraints specified.
func (rcv *AntennaDetails_Ingest) Size(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(24))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *AntennaDetails_Ingest) SizeLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(24))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

/// Array with 1-2 values specifying the length and width (for rectangular) and just length for dipole antennas in meters.
/// Example: /// Example: [0.03, 0.05]
/// Constraints: No constraints specified.
/// Antenna start of frequency range in Mhz.
/// Example: /// Example: 2.1
/// Constraints: No constraints specified.
func (rcv *AntennaDetails_Ingest) StartFrequency() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(26))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Antenna start of frequency range in Mhz.
/// Example: /// Example: 2.1
/// Constraints: No constraints specified.
func (rcv *AntennaDetails_Ingest) MutateStartFrequency(n float64) bool {
	return rcv._tab.MutateFloat64Slot(26, n)
}

/// Antenna end of frequency range in Mhz.
/// Example: /// Example: 3.3
/// Constraints: No constraints specified.
func (rcv *AntennaDetails_Ingest) EndFrequency() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(28))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Antenna end of frequency range in Mhz.
/// Example: /// Example: 3.3
/// Constraints: No constraints specified.
func (rcv *AntennaDetails_Ingest) MutateEndFrequency(n float64) bool {
	return rcv._tab.MutateFloat64Slot(28, n)
}

/// Array of angles between the half-power (-3 dB) points of the main lobe of the antenna, in degrees.
/// Example: /// Example: 14.1
/// Constraints: No constraints specified.
func (rcv *AntennaDetails_Ingest) Beamwidth() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(30))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Array of angles between the half-power (-3 dB) points of the main lobe of the antenna, in degrees.
/// Example: /// Example: 14.1
/// Constraints: No constraints specified.
func (rcv *AntennaDetails_Ingest) MutateBeamwidth(n float64) bool {
	return rcv._tab.MutateFloat64Slot(30, n)
}

/// Antenna maximum gain in dBi.
/// Example: /// Example: 20.1
/// Constraints: No constraints specified.
func (rcv *AntennaDetails_Ingest) Gain() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(32))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Antenna maximum gain in dBi.
/// Example: /// Example: 20.1
/// Constraints: No constraints specified.
func (rcv *AntennaDetails_Ingest) MutateGain(n float64) bool {
	return rcv._tab.MutateFloat64Slot(32, n)
}

/// Antenna gain tolerance in dB.
/// Example: /// Example: 5.1
/// Constraints: No constraints specified.
func (rcv *AntennaDetails_Ingest) GainTolerance() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(34))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Antenna gain tolerance in dB.
/// Example: /// Example: 5.1
/// Constraints: No constraints specified.
func (rcv *AntennaDetails_Ingest) MutateGainTolerance(n float64) bool {
	return rcv._tab.MutateFloat64Slot(34, n)
}

/// Antenna polarization in degrees.
/// Example: /// Example: 45.1
/// Constraints: No constraints specified.
func (rcv *AntennaDetails_Ingest) Polarization() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(36))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Antenna polarization in degrees.
/// Example: /// Example: 45.1
/// Constraints: No constraints specified.
func (rcv *AntennaDetails_Ingest) MutatePolarization(n float64) bool {
	return rcv._tab.MutateFloat64Slot(36, n)
}

/// Antenna description.
/// Example: /// Example: Description of antenna A
/// Constraints: Minimum length = 0, Maximum length = 512
func (rcv *AntennaDetails_Ingest) Description() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(38))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Antenna description.
/// Example: /// Example: Description of antenna A
/// Constraints: Minimum length = 0, Maximum length = 512
/// Time the row was created in the database, auto-populated by the system.
/// Example: /// Example: 2018-01-01T16:00:00.123Z
/// Constraints: No constraints specified.
func (rcv *AntennaDetails_Ingest) CreatedAt() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(40))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Time the row was created in the database, auto-populated by the system.
/// Example: /// Example: 2018-01-01T16:00:00.123Z
/// Constraints: No constraints specified.
/// Application user who created the row in the database, auto-populated by the system.
/// Example: /// Example: some.user
/// Constraints: Minimum length = 1, Maximum length = 64
func (rcv *AntennaDetails_Ingest) CreatedBy() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(42))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Application user who created the row in the database, auto-populated by the system.
/// Example: /// Example: some.user
/// Constraints: Minimum length = 1, Maximum length = 64
/// Source of the data.
/// Example: /// Example: Bluestaq
/// Constraints: Minimum length = 1, Maximum length = 64
func (rcv *AntennaDetails_Ingest) Source() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(44))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Source of the data.
/// Example: /// Example: Bluestaq
/// Constraints: Minimum length = 1, Maximum length = 64
/// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
/// Example: /// Example: THIRD_PARTY_DATASOURCE
/// Constraints: Minimum length = 0, Maximum length = 64
func (rcv *AntennaDetails_Ingest) Origin() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(46))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
/// Example: /// Example: THIRD_PARTY_DATASOURCE
/// Constraints: Minimum length = 0, Maximum length = 64
/// The originating source network on which this record was created, auto-populated by the system.
/// Example: /// Example: ORIG
/// Constraints: Minimum length = 1, Maximum length = 32
func (rcv *AntennaDetails_Ingest) OrigNetwork() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(48))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The originating source network on which this record was created, auto-populated by the system.
/// Example: /// Example: ORIG
/// Constraints: Minimum length = 1, Maximum length = 32
/// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
/// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
/// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
/// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
/// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
/// Example: /// Example: TEST
/// Constraints: Minimum length = 1, Maximum length = 32
func (rcv *AntennaDetails_Ingest) DataMode() AntennaDetails_Ingest_dataMode_Enum {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(50))
	if o != 0 {
		return AntennaDetails_Ingest_dataMode_Enum(rcv._tab.GetInt8(o + rcv._tab.Pos))
	}
	return 0
}

/// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
/// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
/// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
/// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
/// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
/// Example: /// Example: TEST
/// Constraints: Minimum length = 1, Maximum length = 32
func (rcv *AntennaDetails_Ingest) MutateDataMode(n AntennaDetails_Ingest_dataMode_Enum) bool {
	return rcv._tab.MutateInt8Slot(50, int8(n))
}

/// Optional array of provider/source specific tags for this data, where each element is no longer than 32 characters, used for implementing data owner conditional access controls to restrict access to the data. Should be left null by data providers unless conditional access controls are coordinated with the UDL team.
/// Example: /// Example: ['PROVIDER_TAG1', 'PROVIDER_TAG2']
/// Constraints: No constraints specified.
func (rcv *AntennaDetails_Ingest) Tags(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(52))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *AntennaDetails_Ingest) TagsLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(52))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

/// Optional array of provider/source specific tags for this data, where each element is no longer than 32 characters, used for implementing data owner conditional access controls to restrict access to the data. Should be left null by data providers unless conditional access controls are coordinated with the UDL team.
/// Example: /// Example: ['PROVIDER_TAG1', 'PROVIDER_TAG2']
/// Constraints: No constraints specified.
func AntennaDetails_IngestStart(builder *flatbuffers.Builder) {
	builder.StartObject(25)
}
func AntennaDetails_IngestAddId(builder *flatbuffers.Builder, id flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(id), 0)
}
func AntennaDetails_IngestAddIdAntenna(builder *flatbuffers.Builder, idAntenna flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(idAntenna), 0)
}
func AntennaDetails_IngestAddClassificationMarking(builder *flatbuffers.Builder, classificationMarking flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(classificationMarking), 0)
}
func AntennaDetails_IngestAddType(builder *flatbuffers.Builder, type_ flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(3, flatbuffers.UOffsetT(type_), 0)
}
func AntennaDetails_IngestAddPosition(builder *flatbuffers.Builder, position flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(4, flatbuffers.UOffsetT(position), 0)
}
func AntennaDetails_IngestAddMode(builder *flatbuffers.Builder, mode AntennaDetails_Ingest_mode_Enum) {
	builder.PrependInt8Slot(5, int8(mode), 0)
}
func AntennaDetails_IngestAddSteerable(builder *flatbuffers.Builder, steerable bool) {
	builder.PrependBoolSlot(6, steerable, false)
}
func AntennaDetails_IngestAddBeamForming(builder *flatbuffers.Builder, beamForming bool) {
	builder.PrependBoolSlot(7, beamForming, false)
}
func AntennaDetails_IngestAddManufacturerOrgId(builder *flatbuffers.Builder, manufacturerOrgId flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(8, flatbuffers.UOffsetT(manufacturerOrgId), 0)
}
func AntennaDetails_IngestAddDiameter(builder *flatbuffers.Builder, diameter float64) {
	builder.PrependFloat64Slot(9, diameter, 0.0)
}
func AntennaDetails_IngestAddSize(builder *flatbuffers.Builder, size flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(10, flatbuffers.UOffsetT(size), 0)
}
func AntennaDetails_IngestStartSizeVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func AntennaDetails_IngestAddStartFrequency(builder *flatbuffers.Builder, startFrequency float64) {
	builder.PrependFloat64Slot(11, startFrequency, 0.0)
}
func AntennaDetails_IngestAddEndFrequency(builder *flatbuffers.Builder, endFrequency float64) {
	builder.PrependFloat64Slot(12, endFrequency, 0.0)
}
func AntennaDetails_IngestAddBeamwidth(builder *flatbuffers.Builder, beamwidth float64) {
	builder.PrependFloat64Slot(13, beamwidth, 0.0)
}
func AntennaDetails_IngestAddGain(builder *flatbuffers.Builder, gain float64) {
	builder.PrependFloat64Slot(14, gain, 0.0)
}
func AntennaDetails_IngestAddGainTolerance(builder *flatbuffers.Builder, gainTolerance float64) {
	builder.PrependFloat64Slot(15, gainTolerance, 0.0)
}
func AntennaDetails_IngestAddPolarization(builder *flatbuffers.Builder, polarization float64) {
	builder.PrependFloat64Slot(16, polarization, 0.0)
}
func AntennaDetails_IngestAddDescription(builder *flatbuffers.Builder, description flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(17, flatbuffers.UOffsetT(description), 0)
}
func AntennaDetails_IngestAddCreatedAt(builder *flatbuffers.Builder, createdAt flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(18, flatbuffers.UOffsetT(createdAt), 0)
}
func AntennaDetails_IngestAddCreatedBy(builder *flatbuffers.Builder, createdBy flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(19, flatbuffers.UOffsetT(createdBy), 0)
}
func AntennaDetails_IngestAddSource(builder *flatbuffers.Builder, source flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(20, flatbuffers.UOffsetT(source), 0)
}
func AntennaDetails_IngestAddOrigin(builder *flatbuffers.Builder, origin flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(21, flatbuffers.UOffsetT(origin), 0)
}
func AntennaDetails_IngestAddOrigNetwork(builder *flatbuffers.Builder, origNetwork flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(22, flatbuffers.UOffsetT(origNetwork), 0)
}
func AntennaDetails_IngestAddDataMode(builder *flatbuffers.Builder, dataMode AntennaDetails_Ingest_dataMode_Enum) {
	builder.PrependInt8Slot(23, int8(dataMode), 0)
}
func AntennaDetails_IngestAddTags(builder *flatbuffers.Builder, tags flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(24, flatbuffers.UOffsetT(tags), 0)
}
func AntennaDetails_IngestStartTagsVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func AntennaDetails_IngestEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
