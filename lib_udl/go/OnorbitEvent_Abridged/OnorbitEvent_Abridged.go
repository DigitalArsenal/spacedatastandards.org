// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package OnorbitEvent_Abridged

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

/// /// No description available.
type OnorbitEvent_Abridged struct {
	_tab flatbuffers.Table
}

const OnorbitEvent_AbridgedIdentifier = "ONOR"

func GetRootAsOnorbitEvent_Abridged(buf []byte, offset flatbuffers.UOffsetT) *OnorbitEvent_Abridged {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &OnorbitEvent_Abridged{}
	x.Init(buf, n+offset)
	return x
}

func FinishOnorbitEvent_AbridgedBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	identifierBytes := []byte(OnorbitEvent_AbridgedIdentifier)
	builder.FinishWithFileIdentifier(offset, identifierBytes)
}

func OnorbitEvent_AbridgedBufferHasIdentifier(buf []byte) bool {
	return flatbuffers.BufferHasIdentifier(buf, OnorbitEvent_AbridgedIdentifier)
}

func GetSizePrefixedRootAsOnorbitEvent_Abridged(buf []byte, offset flatbuffers.UOffsetT) *OnorbitEvent_Abridged {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &OnorbitEvent_Abridged{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedOnorbitEvent_AbridgedBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	identifierBytes := []byte(OnorbitEvent_AbridgedIdentifier)
	builder.FinishSizePrefixedWithFileIdentifier(offset, identifierBytes)
}

func SizePrefixedOnorbitEvent_AbridgedBufferHasIdentifier(buf []byte) bool {
	return flatbuffers.SizePrefixedBufferHasIdentifier(buf, OnorbitEvent_AbridgedIdentifier)
}

func (rcv *OnorbitEvent_Abridged) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *OnorbitEvent_Abridged) Table() flatbuffers.Table {
	return rcv._tab
}

/// Unique identifier of the record, auto-generated by the system.
/// Example: /// Example: ONORBITEVENT-ID
/// Constraints: Minimum length = 1, Maximum length = 36
func (rcv *OnorbitEvent_Abridged) Id() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Unique identifier of the record, auto-generated by the system.
/// Example: /// Example: ONORBITEVENT-ID
/// Constraints: Minimum length = 1, Maximum length = 36
/// Classification marking of the data in IC/CAPCO Portion-marked format.
/// Example: /// Example: U
/// Constraints: Minimum length = 1, Maximum length = 128
func (rcv *OnorbitEvent_Abridged) ClassificationMarking() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Classification marking of the data in IC/CAPCO Portion-marked format.
/// Example: /// Example: U
/// Constraints: Minimum length = 1, Maximum length = 128
/// The sources or SCG references from which the classification of this data is derived.
/// Example: /// Example: DERIVED_SOURCE
/// Constraints: Minimum length = 0, Maximum length = 128
func (rcv *OnorbitEvent_Abridged) DerivedFrom() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The sources or SCG references from which the classification of this data is derived.
/// Example: /// Example: DERIVED_SOURCE
/// Constraints: Minimum length = 0, Maximum length = 128
/// The declassification date of this data, in ISO 8601 UTC format.
/// Example: /// Example: 2021-01-01T01:02:02.123Z
/// Constraints: No constraints specified.
func (rcv *OnorbitEvent_Abridged) DeclassificationDate() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The declassification date of this data, in ISO 8601 UTC format.
/// Example: /// Example: 2021-01-01T01:02:02.123Z
/// Constraints: No constraints specified.
/// Declassification string of this data.
/// Example: /// Example: DECLASS_STRING
/// Constraints: Minimum length = 0, Maximum length = 256
func (rcv *OnorbitEvent_Abridged) DeclassificationString() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Declassification string of this data.
/// Example: /// Example: DECLASS_STRING
/// Constraints: Minimum length = 0, Maximum length = 256
/// Unique identifier of the on-orbit object for this event.
/// Example: /// Example: ONORBIT-ID
/// Constraints: Minimum length = 1, Maximum length = 36
func (rcv *OnorbitEvent_Abridged) IdOnOrbit() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Unique identifier of the on-orbit object for this event.
/// Example: /// Example: ONORBIT-ID
/// Constraints: Minimum length = 1, Maximum length = 36
/// Satellite/Catalog number of the target on-orbit object.
/// Example: /// Example: 1
/// Constraints: No constraints specified.
func (rcv *OnorbitEvent_Abridged) SatNo() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

/// Satellite/Catalog number of the target on-orbit object.
/// Example: /// Example: 1
/// Constraints: No constraints specified.
func (rcv *OnorbitEvent_Abridged) MutateSatNo(n int32) bool {
	return rcv._tab.MutateInt32Slot(16, n)
}

/// Original object ID or Catalog Number provided by source (may not map to an existing idOnOrbit in UDL).
/// Example: /// Example: ORIGOBJECT-ID
/// Constraints: Minimum length = 0, Maximum length = 64
func (rcv *OnorbitEvent_Abridged) OrigObjectId() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(18))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Original object ID or Catalog Number provided by source (may not map to an existing idOnOrbit in UDL).
/// Example: /// Example: ORIGOBJECT-ID
/// Constraints: Minimum length = 0, Maximum length = 64
/// Date/Time of the event. See eventTimeNotes for remarks on the accuracy of the date time.
/// Example: /// Example: 2018-01-01T16:00:00.123Z
/// Constraints: No constraints specified.
func (rcv *OnorbitEvent_Abridged) EventTime() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(20))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Date/Time of the event. See eventTimeNotes for remarks on the accuracy of the date time.
/// Example: /// Example: 2018-01-01T16:00:00.123Z
/// Constraints: No constraints specified.
/// Notes/remarks on the validity/accuracy of the eventTime.
/// Example: /// Example: Notes on validity
/// Constraints: Minimum length = 0, Maximum length = 128
func (rcv *OnorbitEvent_Abridged) EventTimeNotes() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(22))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Notes/remarks on the validity/accuracy of the eventTime.
/// Example: /// Example: Notes on validity
/// Constraints: Minimum length = 0, Maximum length = 128
/// Organization ID of the operator of the on-orbit spacecraft at the time of the event.
/// Example: /// Example: OPERATORORG-ID
/// Constraints: Minimum length = 0, Maximum length = 36
func (rcv *OnorbitEvent_Abridged) OperatorOrgId() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(24))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Organization ID of the operator of the on-orbit spacecraft at the time of the event.
/// Example: /// Example: OPERATORORG-ID
/// Constraints: Minimum length = 0, Maximum length = 36
/// Organization ID of the owner of the on-orbit spacecraft at the time of the event.
/// Example: /// Example: OWNERORG-ID
/// Constraints: Minimum length = 0, Maximum length = 36
func (rcv *OnorbitEvent_Abridged) OwnerOrgId() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(26))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Organization ID of the owner of the on-orbit spacecraft at the time of the event.
/// Example: /// Example: OWNERORG-ID
/// Constraints: Minimum length = 0, Maximum length = 36
/// Unique identifier of the organization which leases this on-orbit spacecraft.
/// Example: /// Example: LESSEEORG-ID
/// Constraints: Minimum length = 0, Maximum length = 36
func (rcv *OnorbitEvent_Abridged) LesseeOrgId() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(28))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Unique identifier of the organization which leases this on-orbit spacecraft.
/// Example: /// Example: LESSEEORG-ID
/// Constraints: Minimum length = 0, Maximum length = 36
/// Unique identifier of the organization on whose behalf the on-orbit spacecraft is operated.
/// Example: /// Example: OPERATEDONBEHALFOFORG-ID
/// Constraints: Minimum length = 0, Maximum length = 36
func (rcv *OnorbitEvent_Abridged) OperatedOnBehalfOfOrgId() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(30))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Unique identifier of the organization on whose behalf the on-orbit spacecraft is operated.
/// Example: /// Example: OPERATEDONBEHALFOFORG-ID
/// Constraints: Minimum length = 0, Maximum length = 36
/// GEO position longitude at event time if applicable. Negative values are west.
/// Example: /// Example: 45.23
/// Constraints: No constraints specified.
func (rcv *OnorbitEvent_Abridged) GeoPosition() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(32))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// GEO position longitude at event time if applicable. Negative values are west.
/// Example: /// Example: 45.23
/// Constraints: No constraints specified.
func (rcv *OnorbitEvent_Abridged) MutateGeoPosition(n float64) bool {
	return rcv._tab.MutateFloat64Slot(32, n)
}

/// GEO plane slot of the spacecraft at event time.
/// Example: /// Example: example_slot
/// Constraints: Minimum length = 0, Maximum length = 16
func (rcv *OnorbitEvent_Abridged) PlaneSlot() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(34))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// GEO plane slot of the spacecraft at event time.
/// Example: /// Example: example_slot
/// Constraints: Minimum length = 0, Maximum length = 16
/// GEO slot plane number/designator of the spacecraft at event time.
/// Example: /// Example: PL_1
/// Constraints: Minimum length = 0, Maximum length = 4
func (rcv *OnorbitEvent_Abridged) PlaneNumber() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(36))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// GEO slot plane number/designator of the spacecraft at event time.
/// Example: /// Example: PL_1
/// Constraints: Minimum length = 0, Maximum length = 4
/// Position status of the spacecraft at event time (e.g. Stable, Drifting/Tumbling, etc).
/// Example: /// Example: Stable
/// Constraints: Minimum length = 0, Maximum length = 128
func (rcv *OnorbitEvent_Abridged) PositionStatus() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(38))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Position status of the spacecraft at event time (e.g. Stable, Drifting/Tumbling, etc).
/// Example: /// Example: Stable
/// Constraints: Minimum length = 0, Maximum length = 128
/// Maximum validity time of the event.
/// Example: /// Example: 2021-01-01T01:01:01.123Z
/// Constraints: No constraints specified.
func (rcv *OnorbitEvent_Abridged) UntilTime() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(40))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Maximum validity time of the event.
/// Example: /// Example: 2021-01-01T01:01:01.123Z
/// Constraints: No constraints specified.
/// Date time of official loss of the spacecraft.
/// Example: /// Example: 2021-01-01T01:01:01.123Z
/// Constraints: No constraints specified.
func (rcv *OnorbitEvent_Abridged) OfficialLossDate() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(42))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Date time of official loss of the spacecraft.
/// Example: /// Example: 2021-01-01T01:01:01.123Z
/// Constraints: No constraints specified.
/// Net amount of the insurance claim for the event, in USD.
/// Example: /// Example: 10000.23
/// Constraints: No constraints specified.
func (rcv *OnorbitEvent_Abridged) NetAmount() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(44))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Net amount of the insurance claim for the event, in USD.
/// Example: /// Example: 10000.23
/// Constraints: No constraints specified.
func (rcv *OnorbitEvent_Abridged) MutateNetAmount(n float64) bool {
	return rcv._tab.MutateFloat64Slot(44, n)
}

/// Underlying cause of the event.
/// Example: /// Example: CAUSE_EXAMPLE
/// Constraints: Minimum length = 0, Maximum length = 128
func (rcv *OnorbitEvent_Abridged) UnderlyingCause() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(46))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Underlying cause of the event.
/// Example: /// Example: CAUSE_EXAMPLE
/// Constraints: Minimum length = 0, Maximum length = 128
/// Spacecraft capability loss incurred, as a fraction of 1.
/// Example: /// Example: 0.5
/// Constraints: No constraints specified.
func (rcv *OnorbitEvent_Abridged) CapabilityLoss() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(48))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Spacecraft capability loss incurred, as a fraction of 1.
/// Example: /// Example: 0.5
/// Constraints: No constraints specified.
func (rcv *OnorbitEvent_Abridged) MutateCapabilityLoss(n float64) bool {
	return rcv._tab.MutateFloat64Slot(48, n)
}

/// Spacecraft capacity loss incurred, as a fraction of 1.
/// Example: /// Example: 0.5
/// Constraints: No constraints specified.
func (rcv *OnorbitEvent_Abridged) CapacityLoss() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(50))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Spacecraft capacity loss incurred, as a fraction of 1.
/// Example: /// Example: 0.5
/// Constraints: No constraints specified.
func (rcv *OnorbitEvent_Abridged) MutateCapacityLoss(n float64) bool {
	return rcv._tab.MutateFloat64Slot(50, n)
}

/// Insurance loss incurred, as a fraction of 1.
/// Example: /// Example: 0.5
/// Constraints: No constraints specified.
func (rcv *OnorbitEvent_Abridged) InsuranceLoss() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(52))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Insurance loss incurred, as a fraction of 1.
/// Example: /// Example: 0.5
/// Constraints: No constraints specified.
func (rcv *OnorbitEvent_Abridged) MutateInsuranceLoss(n float64) bool {
	return rcv._tab.MutateFloat64Slot(52, n)
}

/// Insurance loss incurred by 3rd party insurance, in USD.
/// Example: /// Example: 10000.23
/// Constraints: No constraints specified.
func (rcv *OnorbitEvent_Abridged) ThirdPartyInsuranceLoss() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(54))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Insurance loss incurred by 3rd party insurance, in USD.
/// Example: /// Example: 10000.23
/// Constraints: No constraints specified.
func (rcv *OnorbitEvent_Abridged) MutateThirdPartyInsuranceLoss(n float64) bool {
	return rcv._tab.MutateFloat64Slot(54, n)
}

/// Number of humans injured in the event.
/// Example: /// Example: 1
/// Constraints: No constraints specified.
func (rcv *OnorbitEvent_Abridged) Injured() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(56))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

/// Number of humans injured in the event.
/// Example: /// Example: 1
/// Constraints: No constraints specified.
func (rcv *OnorbitEvent_Abridged) MutateInjured(n int32) bool {
	return rcv._tab.MutateInt32Slot(56, n)
}

/// Number of humans killed in the event.
/// Example: /// Example: 23
/// Constraints: No constraints specified.
func (rcv *OnorbitEvent_Abridged) Killed() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(58))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

/// Number of humans killed in the event.
/// Example: /// Example: 23
/// Constraints: No constraints specified.
func (rcv *OnorbitEvent_Abridged) MutateKilled(n int32) bool {
	return rcv._tab.MutateInt32Slot(58, n)
}

/// Spacecraft life lost due to the event as a percent/fraction of 1.
/// Example: /// Example: 0.5
/// Constraints: No constraints specified.
func (rcv *OnorbitEvent_Abridged) LifeLost() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(60))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Spacecraft life lost due to the event as a percent/fraction of 1.
/// Example: /// Example: 0.5
/// Constraints: No constraints specified.
func (rcv *OnorbitEvent_Abridged) MutateLifeLost(n float64) bool {
	return rcv._tab.MutateFloat64Slot(60, n)
}

/// Spacecraft age at the event in years.
/// Example: /// Example: 5.23
/// Constraints: No constraints specified.
func (rcv *OnorbitEvent_Abridged) AgeAtEvent() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(62))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Spacecraft age at the event in years.
/// Example: /// Example: 5.23
/// Constraints: No constraints specified.
func (rcv *OnorbitEvent_Abridged) MutateAgeAtEvent(n float64) bool {
	return rcv._tab.MutateFloat64Slot(62, n)
}

/// Achieved phase of flight prior to the event.
/// Example: /// Example: Phase 2
/// Constraints: Minimum length = 0, Maximum length = 64
func (rcv *OnorbitEvent_Abridged) AchievedFlightPhase() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(64))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Achieved phase of flight prior to the event.
/// Example: /// Example: Phase 2
/// Constraints: Minimum length = 0, Maximum length = 64
/// Phase of flight during which the event occurred.
/// Example: /// Example: Phase 2
/// Constraints: Minimum length = 0, Maximum length = 64
func (rcv *OnorbitEvent_Abridged) OccurrenceFlightPhase() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(66))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Phase of flight during which the event occurred.
/// Example: /// Example: Phase 2
/// Constraints: Minimum length = 0, Maximum length = 64
/// Faulty stage of flight for the event.
/// Example: /// Example: Phase 2
/// Constraints: Minimum length = 0, Maximum length = 64
func (rcv *OnorbitEvent_Abridged) StageAtFault() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(68))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Faulty stage of flight for the event.
/// Example: /// Example: Phase 2
/// Constraints: Minimum length = 0, Maximum length = 64
/// Equipment on the spacecraft which caused the event.
/// Example: /// Example: Example Equipment
/// Constraints: Minimum length = 0, Maximum length = 64
func (rcv *OnorbitEvent_Abridged) EquipmentAtFault() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(70))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Equipment on the spacecraft which caused the event.
/// Example: /// Example: Example Equipment
/// Constraints: Minimum length = 0, Maximum length = 64
/// Type of the equipment on the spacecraft which caused the event.
/// Example: /// Example: Example Equipment
/// Constraints: Minimum length = 0, Maximum length = 64
func (rcv *OnorbitEvent_Abridged) EquipmentTypeAtFault() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(72))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Type of the equipment on the spacecraft which caused the event.
/// Example: /// Example: Example Equipment
/// Constraints: Minimum length = 0, Maximum length = 64
/// Specific part of the equipment on the spacecraft which caused the event.
/// Example: /// Example: Example Equipment
/// Constraints: Minimum length = 0, Maximum length = 64
func (rcv *OnorbitEvent_Abridged) EquipmentPartAtFault() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(74))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Specific part of the equipment on the spacecraft which caused the event.
/// Example: /// Example: Example Equipment
/// Constraints: Minimum length = 0, Maximum length = 64
/// Additional equipment which failed as a result of faulty equipment on the spacecraft during the event.
/// Example: /// Example: Example Equipment
/// Constraints: Minimum length = 0, Maximum length = 64
func (rcv *OnorbitEvent_Abridged) ConsequentialEquipmentFailure() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(76))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Additional equipment which failed as a result of faulty equipment on the spacecraft during the event.
/// Example: /// Example: Example Equipment
/// Constraints: Minimum length = 0, Maximum length = 64
/// Boolean indicating if the spacecraft is inclined.
/// Example: /// Example: False
/// Constraints: No constraints specified.
func (rcv *OnorbitEvent_Abridged) Inclined() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(78))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

/// Boolean indicating if the spacecraft is inclined.
/// Example: /// Example: False
/// Constraints: No constraints specified.
func (rcv *OnorbitEvent_Abridged) MutateInclined(n bool) bool {
	return rcv._tab.MutateBoolSlot(78, n)
}

/// Notes/description of the event.
/// Example: /// Example: Example notes
/// Constraints: Minimum length = 0, Maximum length = 256
func (rcv *OnorbitEvent_Abridged) Description() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(80))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Notes/description of the event.
/// Example: /// Example: Example notes
/// Constraints: Minimum length = 0, Maximum length = 256
/// Additional remarks on the event description.
/// Example: /// Example: Example remarks
/// Constraints: Minimum length = 0, Maximum length = 512
func (rcv *OnorbitEvent_Abridged) Remarks() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(82))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Additional remarks on the event description.
/// Example: /// Example: Example remarks
/// Constraints: Minimum length = 0, Maximum length = 512
/// Additional insurance notes if the event is an official loss.
/// Example: /// Example: Insurance notes
/// Constraints: Minimum length = 0, Maximum length = 512
func (rcv *OnorbitEvent_Abridged) InsuranceLossNotes() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(84))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Additional insurance notes if the event is an official loss.
/// Example: /// Example: Insurance notes
/// Constraints: Minimum length = 0, Maximum length = 512
/// Notes on capability loss at the time of event.
/// Example: /// Example: Example notes
/// Constraints: Minimum length = 0, Maximum length = 512
func (rcv *OnorbitEvent_Abridged) CapabilityLossNotes() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(86))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Notes on capability loss at the time of event.
/// Example: /// Example: Example notes
/// Constraints: Minimum length = 0, Maximum length = 512
/// Additional insurance notes on coverages at the time of event.
/// Example: /// Example: Insurance notes
/// Constraints: Minimum length = 0, Maximum length = 512
func (rcv *OnorbitEvent_Abridged) InsuranceCarriedNotes() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(88))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Additional insurance notes on coverages at the time of event.
/// Example: /// Example: Insurance notes
/// Constraints: Minimum length = 0, Maximum length = 512
/// Additional notes on the equipment causing the event/loss.
/// Example: /// Example: Example notes
/// Constraints: Minimum length = 0, Maximum length = 512
func (rcv *OnorbitEvent_Abridged) EquipmentCausingLossNotes() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(90))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Additional notes on the equipment causing the event/loss.
/// Example: /// Example: Example notes
/// Constraints: Minimum length = 0, Maximum length = 512
/// The type of on-orbit event being reported.
/// Example: /// Example: Type1
/// Constraints: Minimum length = 0, Maximum length = 128
func (rcv *OnorbitEvent_Abridged) EventType() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(92))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The type of on-orbit event being reported.
/// Example: /// Example: Type1
/// Constraints: Minimum length = 0, Maximum length = 128
/// The result of the reported event.
/// Example: /// Example: Example results
/// Constraints: Minimum length = 0, Maximum length = 128
func (rcv *OnorbitEvent_Abridged) EventResult() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(94))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The result of the reported event.
/// Example: /// Example: Example results
/// Constraints: Minimum length = 0, Maximum length = 128
/// The status of the on-orbit object.
/// Example: /// Example: Status1
/// Constraints: Minimum length = 0, Maximum length = 128
func (rcv *OnorbitEvent_Abridged) ObjectStatus() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(96))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The status of the on-orbit object.
/// Example: /// Example: Status1
/// Constraints: Minimum length = 0, Maximum length = 128
/// Description of the satellite orbital position or regime.
/// Example: /// Example: Example description
/// Constraints: Minimum length = 0, Maximum length = 128
func (rcv *OnorbitEvent_Abridged) SatellitePosition() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(98))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Description of the satellite orbital position or regime.
/// Example: /// Example: Example description
/// Constraints: Minimum length = 0, Maximum length = 128
/// Source of the data.
/// Example: /// Example: Bluestaq
/// Constraints: Minimum length = 1, Maximum length = 64
func (rcv *OnorbitEvent_Abridged) Source() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(100))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Source of the data.
/// Example: /// Example: Bluestaq
/// Constraints: Minimum length = 1, Maximum length = 64
/// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
/// Example: /// Example: THIRD_PARTY_DATASOURCE
/// Constraints: Minimum length = 0, Maximum length = 64
func (rcv *OnorbitEvent_Abridged) Origin() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(102))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
/// Example: /// Example: THIRD_PARTY_DATASOURCE
/// Constraints: Minimum length = 0, Maximum length = 64
/// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
/// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
/// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
/// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
/// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
/// Example: /// Example: TEST
/// Constraints: Minimum length = 1, Maximum length = 32
func (rcv *OnorbitEvent_Abridged) DataMode() OnorbitEvent_Abridged_dataMode_Enum {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(104))
	if o != 0 {
		return OnorbitEvent_Abridged_dataMode_Enum(rcv._tab.GetInt8(o + rcv._tab.Pos))
	}
	return 0
}

/// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
/// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
/// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
/// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
/// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
/// Example: /// Example: TEST
/// Constraints: Minimum length = 1, Maximum length = 32
func (rcv *OnorbitEvent_Abridged) MutateDataMode(n OnorbitEvent_Abridged_dataMode_Enum) bool {
	return rcv._tab.MutateInt8Slot(104, int8(n))
}

/// Time the row was created in the database, auto-populated by the system.
/// Example: /// Example: 2018-01-01T16:00:00.123Z
/// Constraints: No constraints specified.
func (rcv *OnorbitEvent_Abridged) CreatedAt() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(106))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Time the row was created in the database, auto-populated by the system.
/// Example: /// Example: 2018-01-01T16:00:00.123Z
/// Constraints: No constraints specified.
/// Application user who created the row in the database, auto-populated by the system.
/// Example: /// Example: some.user
/// Constraints: Minimum length = 1, Maximum length = 64
func (rcv *OnorbitEvent_Abridged) CreatedBy() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(108))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Application user who created the row in the database, auto-populated by the system.
/// Example: /// Example: some.user
/// Constraints: Minimum length = 1, Maximum length = 64
/// The originating source network on which this record was created, auto-populated by the system.
/// Example: /// Example: OPS1
/// Constraints: Minimum length = 1, Maximum length = 32
func (rcv *OnorbitEvent_Abridged) OrigNetwork() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(110))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The originating source network on which this record was created, auto-populated by the system.
/// Example: /// Example: OPS1
/// Constraints: Minimum length = 1, Maximum length = 32
func OnorbitEvent_AbridgedStart(builder *flatbuffers.Builder) {
	builder.StartObject(54)
}
func OnorbitEvent_AbridgedAddId(builder *flatbuffers.Builder, id flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(id), 0)
}
func OnorbitEvent_AbridgedAddClassificationMarking(builder *flatbuffers.Builder, classificationMarking flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(classificationMarking), 0)
}
func OnorbitEvent_AbridgedAddDerivedFrom(builder *flatbuffers.Builder, derivedFrom flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(derivedFrom), 0)
}
func OnorbitEvent_AbridgedAddDeclassificationDate(builder *flatbuffers.Builder, declassificationDate flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(3, flatbuffers.UOffsetT(declassificationDate), 0)
}
func OnorbitEvent_AbridgedAddDeclassificationString(builder *flatbuffers.Builder, declassificationString flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(4, flatbuffers.UOffsetT(declassificationString), 0)
}
func OnorbitEvent_AbridgedAddIdOnOrbit(builder *flatbuffers.Builder, idOnOrbit flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(5, flatbuffers.UOffsetT(idOnOrbit), 0)
}
func OnorbitEvent_AbridgedAddSatNo(builder *flatbuffers.Builder, satNo int32) {
	builder.PrependInt32Slot(6, satNo, 0)
}
func OnorbitEvent_AbridgedAddOrigObjectId(builder *flatbuffers.Builder, origObjectId flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(7, flatbuffers.UOffsetT(origObjectId), 0)
}
func OnorbitEvent_AbridgedAddEventTime(builder *flatbuffers.Builder, eventTime flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(8, flatbuffers.UOffsetT(eventTime), 0)
}
func OnorbitEvent_AbridgedAddEventTimeNotes(builder *flatbuffers.Builder, eventTimeNotes flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(9, flatbuffers.UOffsetT(eventTimeNotes), 0)
}
func OnorbitEvent_AbridgedAddOperatorOrgId(builder *flatbuffers.Builder, operatorOrgId flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(10, flatbuffers.UOffsetT(operatorOrgId), 0)
}
func OnorbitEvent_AbridgedAddOwnerOrgId(builder *flatbuffers.Builder, ownerOrgId flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(11, flatbuffers.UOffsetT(ownerOrgId), 0)
}
func OnorbitEvent_AbridgedAddLesseeOrgId(builder *flatbuffers.Builder, lesseeOrgId flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(12, flatbuffers.UOffsetT(lesseeOrgId), 0)
}
func OnorbitEvent_AbridgedAddOperatedOnBehalfOfOrgId(builder *flatbuffers.Builder, operatedOnBehalfOfOrgId flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(13, flatbuffers.UOffsetT(operatedOnBehalfOfOrgId), 0)
}
func OnorbitEvent_AbridgedAddGeoPosition(builder *flatbuffers.Builder, geoPosition float64) {
	builder.PrependFloat64Slot(14, geoPosition, 0.0)
}
func OnorbitEvent_AbridgedAddPlaneSlot(builder *flatbuffers.Builder, planeSlot flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(15, flatbuffers.UOffsetT(planeSlot), 0)
}
func OnorbitEvent_AbridgedAddPlaneNumber(builder *flatbuffers.Builder, planeNumber flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(16, flatbuffers.UOffsetT(planeNumber), 0)
}
func OnorbitEvent_AbridgedAddPositionStatus(builder *flatbuffers.Builder, positionStatus flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(17, flatbuffers.UOffsetT(positionStatus), 0)
}
func OnorbitEvent_AbridgedAddUntilTime(builder *flatbuffers.Builder, untilTime flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(18, flatbuffers.UOffsetT(untilTime), 0)
}
func OnorbitEvent_AbridgedAddOfficialLossDate(builder *flatbuffers.Builder, officialLossDate flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(19, flatbuffers.UOffsetT(officialLossDate), 0)
}
func OnorbitEvent_AbridgedAddNetAmount(builder *flatbuffers.Builder, netAmount float64) {
	builder.PrependFloat64Slot(20, netAmount, 0.0)
}
func OnorbitEvent_AbridgedAddUnderlyingCause(builder *flatbuffers.Builder, underlyingCause flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(21, flatbuffers.UOffsetT(underlyingCause), 0)
}
func OnorbitEvent_AbridgedAddCapabilityLoss(builder *flatbuffers.Builder, capabilityLoss float64) {
	builder.PrependFloat64Slot(22, capabilityLoss, 0.0)
}
func OnorbitEvent_AbridgedAddCapacityLoss(builder *flatbuffers.Builder, capacityLoss float64) {
	builder.PrependFloat64Slot(23, capacityLoss, 0.0)
}
func OnorbitEvent_AbridgedAddInsuranceLoss(builder *flatbuffers.Builder, insuranceLoss float64) {
	builder.PrependFloat64Slot(24, insuranceLoss, 0.0)
}
func OnorbitEvent_AbridgedAddThirdPartyInsuranceLoss(builder *flatbuffers.Builder, thirdPartyInsuranceLoss float64) {
	builder.PrependFloat64Slot(25, thirdPartyInsuranceLoss, 0.0)
}
func OnorbitEvent_AbridgedAddInjured(builder *flatbuffers.Builder, injured int32) {
	builder.PrependInt32Slot(26, injured, 0)
}
func OnorbitEvent_AbridgedAddKilled(builder *flatbuffers.Builder, killed int32) {
	builder.PrependInt32Slot(27, killed, 0)
}
func OnorbitEvent_AbridgedAddLifeLost(builder *flatbuffers.Builder, lifeLost float64) {
	builder.PrependFloat64Slot(28, lifeLost, 0.0)
}
func OnorbitEvent_AbridgedAddAgeAtEvent(builder *flatbuffers.Builder, ageAtEvent float64) {
	builder.PrependFloat64Slot(29, ageAtEvent, 0.0)
}
func OnorbitEvent_AbridgedAddAchievedFlightPhase(builder *flatbuffers.Builder, achievedFlightPhase flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(30, flatbuffers.UOffsetT(achievedFlightPhase), 0)
}
func OnorbitEvent_AbridgedAddOccurrenceFlightPhase(builder *flatbuffers.Builder, occurrenceFlightPhase flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(31, flatbuffers.UOffsetT(occurrenceFlightPhase), 0)
}
func OnorbitEvent_AbridgedAddStageAtFault(builder *flatbuffers.Builder, stageAtFault flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(32, flatbuffers.UOffsetT(stageAtFault), 0)
}
func OnorbitEvent_AbridgedAddEquipmentAtFault(builder *flatbuffers.Builder, equipmentAtFault flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(33, flatbuffers.UOffsetT(equipmentAtFault), 0)
}
func OnorbitEvent_AbridgedAddEquipmentTypeAtFault(builder *flatbuffers.Builder, equipmentTypeAtFault flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(34, flatbuffers.UOffsetT(equipmentTypeAtFault), 0)
}
func OnorbitEvent_AbridgedAddEquipmentPartAtFault(builder *flatbuffers.Builder, equipmentPartAtFault flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(35, flatbuffers.UOffsetT(equipmentPartAtFault), 0)
}
func OnorbitEvent_AbridgedAddConsequentialEquipmentFailure(builder *flatbuffers.Builder, consequentialEquipmentFailure flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(36, flatbuffers.UOffsetT(consequentialEquipmentFailure), 0)
}
func OnorbitEvent_AbridgedAddInclined(builder *flatbuffers.Builder, inclined bool) {
	builder.PrependBoolSlot(37, inclined, false)
}
func OnorbitEvent_AbridgedAddDescription(builder *flatbuffers.Builder, description flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(38, flatbuffers.UOffsetT(description), 0)
}
func OnorbitEvent_AbridgedAddRemarks(builder *flatbuffers.Builder, remarks flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(39, flatbuffers.UOffsetT(remarks), 0)
}
func OnorbitEvent_AbridgedAddInsuranceLossNotes(builder *flatbuffers.Builder, insuranceLossNotes flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(40, flatbuffers.UOffsetT(insuranceLossNotes), 0)
}
func OnorbitEvent_AbridgedAddCapabilityLossNotes(builder *flatbuffers.Builder, capabilityLossNotes flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(41, flatbuffers.UOffsetT(capabilityLossNotes), 0)
}
func OnorbitEvent_AbridgedAddInsuranceCarriedNotes(builder *flatbuffers.Builder, insuranceCarriedNotes flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(42, flatbuffers.UOffsetT(insuranceCarriedNotes), 0)
}
func OnorbitEvent_AbridgedAddEquipmentCausingLossNotes(builder *flatbuffers.Builder, equipmentCausingLossNotes flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(43, flatbuffers.UOffsetT(equipmentCausingLossNotes), 0)
}
func OnorbitEvent_AbridgedAddEventType(builder *flatbuffers.Builder, eventType flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(44, flatbuffers.UOffsetT(eventType), 0)
}
func OnorbitEvent_AbridgedAddEventResult(builder *flatbuffers.Builder, eventResult flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(45, flatbuffers.UOffsetT(eventResult), 0)
}
func OnorbitEvent_AbridgedAddObjectStatus(builder *flatbuffers.Builder, objectStatus flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(46, flatbuffers.UOffsetT(objectStatus), 0)
}
func OnorbitEvent_AbridgedAddSatellitePosition(builder *flatbuffers.Builder, satellitePosition flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(47, flatbuffers.UOffsetT(satellitePosition), 0)
}
func OnorbitEvent_AbridgedAddSource(builder *flatbuffers.Builder, source flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(48, flatbuffers.UOffsetT(source), 0)
}
func OnorbitEvent_AbridgedAddOrigin(builder *flatbuffers.Builder, origin flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(49, flatbuffers.UOffsetT(origin), 0)
}
func OnorbitEvent_AbridgedAddDataMode(builder *flatbuffers.Builder, dataMode OnorbitEvent_Abridged_dataMode_Enum) {
	builder.PrependInt8Slot(50, int8(dataMode), 0)
}
func OnorbitEvent_AbridgedAddCreatedAt(builder *flatbuffers.Builder, createdAt flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(51, flatbuffers.UOffsetT(createdAt), 0)
}
func OnorbitEvent_AbridgedAddCreatedBy(builder *flatbuffers.Builder, createdBy flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(52, flatbuffers.UOffsetT(createdBy), 0)
}
func OnorbitEvent_AbridgedAddOrigNetwork(builder *flatbuffers.Builder, origNetwork flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(53, flatbuffers.UOffsetT(origNetwork), 0)
}
func OnorbitEvent_AbridgedEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
