// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package CollectResponse_Ingest

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

/// /// Collect response supports the response and status of individual collect requests. Each response is referenced by the UUID of the request, and contains information including the status of the request, collection times and types, and reference(s) to the observations collected. There may be multiple responses associated with a request, either from multiple collectors or to relay status changes prior to completion and delivery.
type CollectResponse_Ingest struct {
	_tab flatbuffers.Table
}

const CollectResponse_IngestIdentifier = "COLL"

func GetRootAsCollectResponse_Ingest(buf []byte, offset flatbuffers.UOffsetT) *CollectResponse_Ingest {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &CollectResponse_Ingest{}
	x.Init(buf, n+offset)
	return x
}

func FinishCollectResponse_IngestBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	identifierBytes := []byte(CollectResponse_IngestIdentifier)
	builder.FinishWithFileIdentifier(offset, identifierBytes)
}

func CollectResponse_IngestBufferHasIdentifier(buf []byte) bool {
	return flatbuffers.BufferHasIdentifier(buf, CollectResponse_IngestIdentifier)
}

func GetSizePrefixedRootAsCollectResponse_Ingest(buf []byte, offset flatbuffers.UOffsetT) *CollectResponse_Ingest {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &CollectResponse_Ingest{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedCollectResponse_IngestBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	identifierBytes := []byte(CollectResponse_IngestIdentifier)
	builder.FinishSizePrefixedWithFileIdentifier(offset, identifierBytes)
}

func SizePrefixedCollectResponse_IngestBufferHasIdentifier(buf []byte) bool {
	return flatbuffers.SizePrefixedBufferHasIdentifier(buf, CollectResponse_IngestIdentifier)
}

func (rcv *CollectResponse_Ingest) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *CollectResponse_Ingest) Table() flatbuffers.Table {
	return rcv._tab
}

/// Unique identifier of the record, auto-generated by the system.
/// Example: /// Example: COLLECTRESPONSE-ID
/// Constraints: Minimum length = 1, Maximum length = 36
func (rcv *CollectResponse_Ingest) Id() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Unique identifier of the record, auto-generated by the system.
/// Example: /// Example: COLLECTRESPONSE-ID
/// Constraints: Minimum length = 1, Maximum length = 36
/// Classification marking of the data in IC/CAPCO Portion-marked format.
/// Example: /// Example: U
/// Constraints: Minimum length = 1, Maximum length = 128
func (rcv *CollectResponse_Ingest) ClassificationMarking() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Classification marking of the data in IC/CAPCO Portion-marked format.
/// Example: /// Example: U
/// Constraints: Minimum length = 1, Maximum length = 128
/// Unique identifier of the request associated with this response.
/// Example: /// Example: REF-REQUEST-ID
/// Constraints: Minimum length = 1, Maximum length = 36
func (rcv *CollectResponse_Ingest) IdRequest() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Unique identifier of the request associated with this response.
/// Example: /// Example: REF-REQUEST-ID
/// Constraints: Minimum length = 1, Maximum length = 36
/// Unique identifier of the target on-orbit object associated with this response.
/// Example: /// Example: REF-ONORBIT-ID
/// Constraints: Minimum length = 0, Maximum length = 36
func (rcv *CollectResponse_Ingest) IdOnOrbit() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Unique identifier of the target on-orbit object associated with this response.
/// Example: /// Example: REF-ONORBIT-ID
/// Constraints: Minimum length = 0, Maximum length = 36
/// Optional identifier provided by data source to indicate the target object of this response. This may be an internal identifier and not necessarily a valid satellite number.
/// Example: /// Example: ORIGOBJECT-ID
/// Constraints: Minimum length = 0, Maximum length = 36
func (rcv *CollectResponse_Ingest) OrigObjectId() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Optional identifier provided by data source to indicate the target object of this response. This may be an internal identifier and not necessarily a valid satellite number.
/// Example: /// Example: ORIGOBJECT-ID
/// Constraints: Minimum length = 0, Maximum length = 36
/// Satellite/catalog number of the target on-orbit object.
/// Example: /// Example: 101
/// Constraints: No constraints specified.
func (rcv *CollectResponse_Ingest) SatNo() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

/// Satellite/catalog number of the target on-orbit object.
/// Example: /// Example: 101
/// Constraints: No constraints specified.
func (rcv *CollectResponse_Ingest) MutateSatNo(n int32) bool {
	return rcv._tab.MutateInt32Slot(14, n)
}

/// Optional task ID associated with the request/response.
/// Example: /// Example: TASK-ID
/// Constraints: Minimum length = 0, Maximum length = 36
func (rcv *CollectResponse_Ingest) TaskId() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Optional task ID associated with the request/response.
/// Example: /// Example: TASK-ID
/// Constraints: Minimum length = 0, Maximum length = 36
/// Unique identifier of the parent plan or schedule associated with the request/response.
/// Example: /// Example: REF-PLAN-ID
/// Constraints: Minimum length = 0, Maximum length = 36
func (rcv *CollectResponse_Ingest) IdPlan() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(18))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Unique identifier of the parent plan or schedule associated with the request/response.
/// Example: /// Example: REF-PLAN-ID
/// Constraints: Minimum length = 0, Maximum length = 36
/// UUID from external systems.  This field has no meaning within UDL and is provided as a convenience for systems that require tracking of internal system generated ID.
/// Example: /// Example: EXTERNAL-ID
/// Constraints: Minimum length = 0, Maximum length = 36
func (rcv *CollectResponse_Ingest) ExternalId() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(20))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// UUID from external systems.  This field has no meaning within UDL and is provided as a convenience for systems that require tracking of internal system generated ID.
/// Example: /// Example: EXTERNAL-ID
/// Constraints: Minimum length = 0, Maximum length = 36
/// The status of the request (ACCEPTED, CANCELLED, COLLECTED, COMPLETED, DELIVERED, FAILED, PARTIAL, PROPOSED, REJECTED, SCHEDULED):
/// ACCEPTED: The collect or contact request has been received and accepted.
/// CANCELLED: A previously scheduled collect or contact whose execution was cancelled.
/// COLLECTED: The collect has been accomplished. A collected state implies that additional activity is required for delivery/completion.
/// COMPLETED: The collect or contact has been completed. For many systems completed and delivered constitute an equivalent successful end state.
/// DELIVERED: The collected observation(s) have been delivered to the requestor. For many systems completed and delivered constitute an equivalent successful end state. A DELIVERED state is typically used for systems that exhibit a delay between collect and delivery, such as with space-based systems which require ground contact to deliver observations.
/// FAILED: The collect or contact was attempted and failed, or the delivery of the collected observation(s) failed. A FAILED status may be accompanied by an error code (errCode), if available.
/// PARTIAL: A PARTIAL state indicates that a part of a multi-track request has been accomplished, but the full request is incomplete. A PARTIAL status should ultimately be resolved to an end state.
/// PROPOSED: Indicates that the request was received and alternate collect or contact time(s) (altStartTime, altEndTime) have been proposed. If an alternate is accepted by the requestor the current request should be cancelled and a new request created.
/// REJECTED: The request has been received and rejected by the provider. A REJECTED status may be accompanied by an explanation (notes) of the reason that the request was rejected.
/// SCHEDULED: The request was received and has been scheduled for execution.
/// Example: /// Example: ACCEPTED
/// Constraints: Minimum length = 0, Maximum length = 36
func (rcv *CollectResponse_Ingest) Status() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(22))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The status of the request (ACCEPTED, CANCELLED, COLLECTED, COMPLETED, DELIVERED, FAILED, PARTIAL, PROPOSED, REJECTED, SCHEDULED):
/// ACCEPTED: The collect or contact request has been received and accepted.
/// CANCELLED: A previously scheduled collect or contact whose execution was cancelled.
/// COLLECTED: The collect has been accomplished. A collected state implies that additional activity is required for delivery/completion.
/// COMPLETED: The collect or contact has been completed. For many systems completed and delivered constitute an equivalent successful end state.
/// DELIVERED: The collected observation(s) have been delivered to the requestor. For many systems completed and delivered constitute an equivalent successful end state. A DELIVERED state is typically used for systems that exhibit a delay between collect and delivery, such as with space-based systems which require ground contact to deliver observations.
/// FAILED: The collect or contact was attempted and failed, or the delivery of the collected observation(s) failed. A FAILED status may be accompanied by an error code (errCode), if available.
/// PARTIAL: A PARTIAL state indicates that a part of a multi-track request has been accomplished, but the full request is incomplete. A PARTIAL status should ultimately be resolved to an end state.
/// PROPOSED: Indicates that the request was received and alternate collect or contact time(s) (altStartTime, altEndTime) have been proposed. If an alternate is accepted by the requestor the current request should be cancelled and a new request created.
/// REJECTED: The request has been received and rejected by the provider. A REJECTED status may be accompanied by an explanation (notes) of the reason that the request was rejected.
/// SCHEDULED: The request was received and has been scheduled for execution.
/// Example: /// Example: ACCEPTED
/// Constraints: Minimum length = 0, Maximum length = 36
/// The actual start time of the collect or contact, in ISO 8601 UTC format.
/// Example: /// Example: 2018-01-01T16:00:00.123456Z
/// Constraints: No constraints specified.
func (rcv *CollectResponse_Ingest) ActualStartTime() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(24))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The actual start time of the collect or contact, in ISO 8601 UTC format.
/// Example: /// Example: 2018-01-01T16:00:00.123456Z
/// Constraints: No constraints specified.
/// The actual end time of the collect or contact, in ISO 8601 UTC format.
/// Example: /// Example: 2018-01-01T18:00:00.123456Z
/// Constraints: No constraints specified.
func (rcv *CollectResponse_Ingest) ActualEndTime() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(26))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The actual end time of the collect or contact, in ISO 8601 UTC format.
/// Example: /// Example: 2018-01-01T18:00:00.123456Z
/// Constraints: No constraints specified.
/// Proposed alternative start time, in ISO 8601 UTC format.
/// Example: /// Example: 2018-01-01T16:00:00.123456Z
/// Constraints: No constraints specified.
func (rcv *CollectResponse_Ingest) AltStartTime() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(28))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Proposed alternative start time, in ISO 8601 UTC format.
/// Example: /// Example: 2018-01-01T16:00:00.123456Z
/// Constraints: No constraints specified.
/// Proposed alternative end time, in ISO 8601 UTC format.
/// Example: /// Example: 2018-01-01T18:00:00.123456Z
/// Constraints: No constraints specified.
func (rcv *CollectResponse_Ingest) AltEndTime() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(30))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Proposed alternative end time, in ISO 8601 UTC format.
/// Example: /// Example: 2018-01-01T18:00:00.123456Z
/// Constraints: No constraints specified.
/// Error code associated with this request/response.
/// Example: /// Example: ERROR CODE
/// Constraints: Minimum length = 0, Maximum length = 36
func (rcv *CollectResponse_Ingest) ErrCode() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(32))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Error code associated with this request/response.
/// Example: /// Example: ERROR CODE
/// Constraints: Minimum length = 0, Maximum length = 36
/// Array of UDL record type(s) (DOA, ELSET, EO, RADAR, RF, SV) collected or produced in response to the associated request.  See the associated 'srcIds' array for the record UUIDs, positionally corresponding to the record types in this array.  The 'srcTyps' and 'srcIds' arrays must match in size.  The appropriate API operation can be used to retrieve the specified object(s) (e.g. /udl/rfobservation/{uuid}).
/// Example: /// Example: ['DOA', 'DWELL']
/// Constraints: No constraints specified.
func (rcv *CollectResponse_Ingest) SrcTyps(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(34))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *CollectResponse_Ingest) SrcTypsLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(34))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

/// Array of UDL record type(s) (DOA, ELSET, EO, RADAR, RF, SV) collected or produced in response to the associated request.  See the associated 'srcIds' array for the record UUIDs, positionally corresponding to the record types in this array.  The 'srcTyps' and 'srcIds' arrays must match in size.  The appropriate API operation can be used to retrieve the specified object(s) (e.g. /udl/rfobservation/{uuid}).
/// Example: /// Example: ['DOA', 'DWELL']
/// Constraints: No constraints specified.
/// Array of UUIDs of the UDL data record(s) collected in response to the associated request.  See the associated 'srcTyps' array for the specific types of data, positionally corresponding to the UUIDs in this array.  The 'srcTyps' and 'srcIds' arrays must match in size.  The appropriate API operation can be used to retrieve the specified object(s) (e.g. /udl/rfobservation/{uuid}).
/// Example: /// Example: ['DOA_ID', 'DWELL_ID']
/// Constraints: No constraints specified.
func (rcv *CollectResponse_Ingest) SrcIds(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(36))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *CollectResponse_Ingest) SrcIdsLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(36))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

/// Array of UUIDs of the UDL data record(s) collected in response to the associated request.  See the associated 'srcTyps' array for the specific types of data, positionally corresponding to the UUIDs in this array.  The 'srcTyps' and 'srcIds' arrays must match in size.  The appropriate API operation can be used to retrieve the specified object(s) (e.g. /udl/rfobservation/{uuid}).
/// Example: /// Example: ['DOA_ID', 'DWELL_ID']
/// Constraints: No constraints specified.
/// Notes or comments associated with this response.
/// Example: /// Example: Example notes
/// Constraints: Minimum length = 0, Maximum length = 1024
func (rcv *CollectResponse_Ingest) Notes() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(38))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Notes or comments associated with this response.
/// Example: /// Example: Example notes
/// Constraints: Minimum length = 0, Maximum length = 1024
/// Time the row was created in the database, auto-populated by the system.
/// Example: /// Example: 2018-01-01T16:00:00.123Z
/// Constraints: No constraints specified.
func (rcv *CollectResponse_Ingest) CreatedAt() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(40))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Time the row was created in the database, auto-populated by the system.
/// Example: /// Example: 2018-01-01T16:00:00.123Z
/// Constraints: No constraints specified.
/// Application user who created the row in the database, auto-populated by the system.
/// Example: /// Example: some.user
/// Constraints: Minimum length = 1, Maximum length = 64
func (rcv *CollectResponse_Ingest) CreatedBy() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(42))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Application user who created the row in the database, auto-populated by the system.
/// Example: /// Example: some.user
/// Constraints: Minimum length = 1, Maximum length = 64
/// Source of the data.
/// Example: /// Example: Bluestaq
/// Constraints: Minimum length = 1, Maximum length = 36
func (rcv *CollectResponse_Ingest) Source() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(44))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Source of the data.
/// Example: /// Example: Bluestaq
/// Constraints: Minimum length = 1, Maximum length = 36
/// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
/// Example: /// Example: THIRD_PARTY_DATASOURCE
/// Constraints: Minimum length = 0, Maximum length = 64
func (rcv *CollectResponse_Ingest) Origin() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(46))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
/// Example: /// Example: THIRD_PARTY_DATASOURCE
/// Constraints: Minimum length = 0, Maximum length = 64
/// The originating source network on which this record was created, auto-populated by the system.
/// Example: /// Example: ORIG
/// Constraints: Minimum length = 1, Maximum length = 32
func (rcv *CollectResponse_Ingest) OrigNetwork() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(48))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The originating source network on which this record was created, auto-populated by the system.
/// Example: /// Example: ORIG
/// Constraints: Minimum length = 1, Maximum length = 32
/// Unique identifier of the reporting sensor.
/// Example: /// Example: REF-SENSOR-ID
/// Constraints: Minimum length = 0, Maximum length = 36
func (rcv *CollectResponse_Ingest) IdSensor() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(50))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Unique identifier of the reporting sensor.
/// Example: /// Example: REF-SENSOR-ID
/// Constraints: Minimum length = 0, Maximum length = 36
/// Optional identifier provided by the collection source to indicate the sensor identifier responding to this collect or contact. This may be an internal identifier and not necessarily a valid sensor ID.
/// Example: /// Example: ORIGSENSOR-ID
/// Constraints: Minimum length = 0, Maximum length = 64
func (rcv *CollectResponse_Ingest) OrigSensorId() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(52))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Optional identifier provided by the collection source to indicate the sensor identifier responding to this collect or contact. This may be an internal identifier and not necessarily a valid sensor ID.
/// Example: /// Example: ORIGSENSOR-ID
/// Constraints: Minimum length = 0, Maximum length = 64
/// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
/// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
/// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
/// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
/// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
/// Example: /// Example: TEST
/// Constraints: Minimum length = 1, Maximum length = 32
func (rcv *CollectResponse_Ingest) DataMode() CollectResponse_Ingest_dataMode_Enum {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(54))
	if o != 0 {
		return CollectResponse_Ingest_dataMode_Enum(rcv._tab.GetInt8(o + rcv._tab.Pos))
	}
	return 0
}

/// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
/// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
/// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
/// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
/// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
/// Example: /// Example: TEST
/// Constraints: Minimum length = 1, Maximum length = 32
func (rcv *CollectResponse_Ingest) MutateDataMode(n CollectResponse_Ingest_dataMode_Enum) bool {
	return rcv._tab.MutateInt8Slot(54, int8(n))
}

/// Optional array of provider/source specific tags for this data, where each element is no longer than 32 characters, used for implementing data owner conditional access controls to restrict access to the data. Should be left null by data providers unless conditional access controls are coordinated with the UDL team.
/// Example: /// Example: ['PROVIDER_TAG1', 'PROVIDER_TAG2']
/// Constraints: No constraints specified.
func (rcv *CollectResponse_Ingest) Tags(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(56))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *CollectResponse_Ingest) TagsLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(56))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

/// Optional array of provider/source specific tags for this data, where each element is no longer than 32 characters, used for implementing data owner conditional access controls to restrict access to the data. Should be left null by data providers unless conditional access controls are coordinated with the UDL team.
/// Example: /// Example: ['PROVIDER_TAG1', 'PROVIDER_TAG2']
/// Constraints: No constraints specified.
func CollectResponse_IngestStart(builder *flatbuffers.Builder) {
	builder.StartObject(27)
}
func CollectResponse_IngestAddId(builder *flatbuffers.Builder, id flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(id), 0)
}
func CollectResponse_IngestAddClassificationMarking(builder *flatbuffers.Builder, classificationMarking flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(classificationMarking), 0)
}
func CollectResponse_IngestAddIdRequest(builder *flatbuffers.Builder, idRequest flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(idRequest), 0)
}
func CollectResponse_IngestAddIdOnOrbit(builder *flatbuffers.Builder, idOnOrbit flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(3, flatbuffers.UOffsetT(idOnOrbit), 0)
}
func CollectResponse_IngestAddOrigObjectId(builder *flatbuffers.Builder, origObjectId flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(4, flatbuffers.UOffsetT(origObjectId), 0)
}
func CollectResponse_IngestAddSatNo(builder *flatbuffers.Builder, satNo int32) {
	builder.PrependInt32Slot(5, satNo, 0)
}
func CollectResponse_IngestAddTaskId(builder *flatbuffers.Builder, taskId flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(6, flatbuffers.UOffsetT(taskId), 0)
}
func CollectResponse_IngestAddIdPlan(builder *flatbuffers.Builder, idPlan flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(7, flatbuffers.UOffsetT(idPlan), 0)
}
func CollectResponse_IngestAddExternalId(builder *flatbuffers.Builder, externalId flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(8, flatbuffers.UOffsetT(externalId), 0)
}
func CollectResponse_IngestAddStatus(builder *flatbuffers.Builder, status flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(9, flatbuffers.UOffsetT(status), 0)
}
func CollectResponse_IngestAddActualStartTime(builder *flatbuffers.Builder, actualStartTime flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(10, flatbuffers.UOffsetT(actualStartTime), 0)
}
func CollectResponse_IngestAddActualEndTime(builder *flatbuffers.Builder, actualEndTime flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(11, flatbuffers.UOffsetT(actualEndTime), 0)
}
func CollectResponse_IngestAddAltStartTime(builder *flatbuffers.Builder, altStartTime flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(12, flatbuffers.UOffsetT(altStartTime), 0)
}
func CollectResponse_IngestAddAltEndTime(builder *flatbuffers.Builder, altEndTime flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(13, flatbuffers.UOffsetT(altEndTime), 0)
}
func CollectResponse_IngestAddErrCode(builder *flatbuffers.Builder, errCode flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(14, flatbuffers.UOffsetT(errCode), 0)
}
func CollectResponse_IngestAddSrcTyps(builder *flatbuffers.Builder, srcTyps flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(15, flatbuffers.UOffsetT(srcTyps), 0)
}
func CollectResponse_IngestStartSrcTypsVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func CollectResponse_IngestAddSrcIds(builder *flatbuffers.Builder, srcIds flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(16, flatbuffers.UOffsetT(srcIds), 0)
}
func CollectResponse_IngestStartSrcIdsVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func CollectResponse_IngestAddNotes(builder *flatbuffers.Builder, notes flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(17, flatbuffers.UOffsetT(notes), 0)
}
func CollectResponse_IngestAddCreatedAt(builder *flatbuffers.Builder, createdAt flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(18, flatbuffers.UOffsetT(createdAt), 0)
}
func CollectResponse_IngestAddCreatedBy(builder *flatbuffers.Builder, createdBy flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(19, flatbuffers.UOffsetT(createdBy), 0)
}
func CollectResponse_IngestAddSource(builder *flatbuffers.Builder, source flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(20, flatbuffers.UOffsetT(source), 0)
}
func CollectResponse_IngestAddOrigin(builder *flatbuffers.Builder, origin flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(21, flatbuffers.UOffsetT(origin), 0)
}
func CollectResponse_IngestAddOrigNetwork(builder *flatbuffers.Builder, origNetwork flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(22, flatbuffers.UOffsetT(origNetwork), 0)
}
func CollectResponse_IngestAddIdSensor(builder *flatbuffers.Builder, idSensor flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(23, flatbuffers.UOffsetT(idSensor), 0)
}
func CollectResponse_IngestAddOrigSensorId(builder *flatbuffers.Builder, origSensorId flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(24, flatbuffers.UOffsetT(origSensorId), 0)
}
func CollectResponse_IngestAddDataMode(builder *flatbuffers.Builder, dataMode CollectResponse_Ingest_dataMode_Enum) {
	builder.PrependInt8Slot(25, int8(dataMode), 0)
}
func CollectResponse_IngestAddTags(builder *flatbuffers.Builder, tags flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(26, flatbuffers.UOffsetT(tags), 0)
}
func CollectResponse_IngestStartTagsVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func CollectResponse_IngestEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
