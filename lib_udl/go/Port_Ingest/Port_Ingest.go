// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package Port_Ingest

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

/// /// Properties and characteristics of a maritime port, which includes location, port identifiers, and remarks.
type Port_Ingest struct {
	_tab flatbuffers.Table
}

const Port_IngestIdentifier = "PORT"

func GetRootAsPort_Ingest(buf []byte, offset flatbuffers.UOffsetT) *Port_Ingest {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &Port_Ingest{}
	x.Init(buf, n+offset)
	return x
}

func FinishPort_IngestBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	identifierBytes := []byte(Port_IngestIdentifier)
	builder.FinishWithFileIdentifier(offset, identifierBytes)
}

func Port_IngestBufferHasIdentifier(buf []byte) bool {
	return flatbuffers.BufferHasIdentifier(buf, Port_IngestIdentifier)
}

func GetSizePrefixedRootAsPort_Ingest(buf []byte, offset flatbuffers.UOffsetT) *Port_Ingest {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &Port_Ingest{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedPort_IngestBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	identifierBytes := []byte(Port_IngestIdentifier)
	builder.FinishSizePrefixedWithFileIdentifier(offset, identifierBytes)
}

func SizePrefixedPort_IngestBufferHasIdentifier(buf []byte) bool {
	return flatbuffers.SizePrefixedBufferHasIdentifier(buf, Port_IngestIdentifier)
}

func (rcv *Port_Ingest) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *Port_Ingest) Table() flatbuffers.Table {
	return rcv._tab
}

/// Unique identifier of the record, auto-generated by the system if not provided on create operations.
/// Example: /// Example: 026dd511-8ba5-47d3-9909-836149f87686
/// Constraints: Minimum length = 1, Maximum length = 36
func (rcv *Port_Ingest) Id() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Unique identifier of the record, auto-generated by the system if not provided on create operations.
/// Example: /// Example: 026dd511-8ba5-47d3-9909-836149f87686
/// Constraints: Minimum length = 1, Maximum length = 36
/// Classification marking of the data in IC/CAPCO Portion-marked format.
/// Example: /// Example: U
/// Constraints: Minimum length = 1, Maximum length = 128
func (rcv *Port_Ingest) ClassificationMarking() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Classification marking of the data in IC/CAPCO Portion-marked format.
/// Example: /// Example: U
/// Constraints: Minimum length = 1, Maximum length = 128
/// Unique identifier of the Site Entity associated with the Port record.
/// Example: /// Example: a150b3ee-884b-b9ac-60a0-6408b4b16088
/// Constraints: Minimum length = 0, Maximum length = 36
func (rcv *Port_Ingest) IdSite() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Unique identifier of the Site Entity associated with the Port record.
/// Example: /// Example: a150b3ee-884b-b9ac-60a0-6408b4b16088
/// Constraints: Minimum length = 0, Maximum length = 36
/// Optional ID from external systems. This field has no meaning within UDL and is provided as a convenience for systems that require tracking of an internal system generated ID.
/// Example: /// Example: fe4ad5dc-0128-4ce8-b09c-0b404322025e
/// Constraints: Minimum length = 0, Maximum length = 36
func (rcv *Port_Ingest) ExternalId() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Optional ID from external systems. This field has no meaning within UDL and is provided as a convenience for systems that require tracking of an internal system generated ID.
/// Example: /// Example: fe4ad5dc-0128-4ce8-b09c-0b404322025e
/// Constraints: Minimum length = 0, Maximum length = 36
/// The five-character United Nations Code for Trade and Transport Locations (UN/LOCODE) of this port.  The first two letters of the code contains the ISO 3166-1 alpha-2 country designation of the port country. The three remaining characters identify a location within that country.  Letters are preferred, but if necessary digits 2 through 9 may be used, excluding "0" and "1" to avoid confusion with the letters "O" and "I" respectively.
/// Example: /// Example: CAVAN
/// Constraints: Minimum length = 0, Maximum length = 5
func (rcv *Port_Ingest) Locode() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The five-character United Nations Code for Trade and Transport Locations (UN/LOCODE) of this port.  The first two letters of the code contains the ISO 3166-1 alpha-2 country designation of the port country. The three remaining characters identify a location within that country.  Letters are preferred, but if necessary digits 2 through 9 may be used, excluding "0" and "1" to avoid confusion with the letters "O" and "I" respectively.
/// Example: /// Example: CAVAN
/// Constraints: Minimum length = 0, Maximum length = 5
/// The name of this port.
/// Example: /// Example: Vancouver
/// Constraints: Minimum length = 0, Maximum length = 64
func (rcv *Port_Ingest) PortName() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The name of this port.
/// Example: /// Example: Vancouver
/// Constraints: Minimum length = 0, Maximum length = 64
/// The type of harbor for this port. The harbor type refers to how a port is physically positioned.
/// COASTAL BREAKWATER (CB)
/// COASTAL NATURAL (CN)
/// COASTAL TIDE GATE  (CT)
/// LAKE OR CANAL (LC)
/// OPEN ROADSTEAD (OR)
/// RIVER BASIN (RB)
/// RIVER NATURAL (RN)
/// RIVER TIDE GATE (RT)
/// TYPHOON HARBOR  (TH).
/// Example: /// Example: COASTAL NATURAL
/// Constraints: Minimum length = 0, Maximum length = 64
func (rcv *Port_Ingest) HarborType() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The type of harbor for this port. The harbor type refers to how a port is physically positioned.
/// COASTAL BREAKWATER (CB)
/// COASTAL NATURAL (CN)
/// COASTAL TIDE GATE  (CT)
/// LAKE OR CANAL (LC)
/// OPEN ROADSTEAD (OR)
/// RIVER BASIN (RB)
/// RIVER NATURAL (RN)
/// RIVER TIDE GATE (RT)
/// TYPHOON HARBOR  (TH).
/// Example: /// Example: COASTAL NATURAL
/// Constraints: Minimum length = 0, Maximum length = 64
/// The size of the harbor for this port measured in square kilometers.
/// Example: /// Example: 160.1
/// Constraints: No constraints specified.
func (rcv *Port_Ingest) HarborSize() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(18))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// The size of the harbor for this port measured in square kilometers.
/// Example: /// Example: 160.1
/// Constraints: No constraints specified.
func (rcv *Port_Ingest) MutateHarborSize(n float64) bool {
	return rcv._tab.MutateFloat64Slot(18, n)
}

/// Maximum allowed vessel draught. Draught is the principal dimensions of any waterborne vessel defined as the distance between the ship’s keel and the waterline of the vessel measured in meters.
/// Example: /// Example: 18.1
/// Constraints: No constraints specified.
func (rcv *Port_Ingest) MaxDraught() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(20))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Maximum allowed vessel draught. Draught is the principal dimensions of any waterborne vessel defined as the distance between the ship’s keel and the waterline of the vessel measured in meters.
/// Example: /// Example: 18.1
/// Constraints: No constraints specified.
func (rcv *Port_Ingest) MutateMaxDraught(n float64) bool {
	return rcv._tab.MutateFloat64Slot(20, n)
}

/// Average time for a vessel at this port in hours.
/// Example: /// Example: 41.1
/// Constraints: No constraints specified.
func (rcv *Port_Ingest) AvgDuration() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(22))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Average time for a vessel at this port in hours.
/// Example: /// Example: 41.1
/// Constraints: No constraints specified.
func (rcv *Port_Ingest) MutateAvgDuration(n float64) bool {
	return rcv._tab.MutateFloat64Slot(22, n)
}

/// The tide range of this port in meters.
/// Example: /// Example: 4.1
/// Constraints: No constraints specified.
func (rcv *Port_Ingest) TideRange() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(24))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// The tide range of this port in meters.
/// Example: /// Example: 4.1
/// Constraints: No constraints specified.
func (rcv *Port_Ingest) MutateTideRange(n float64) bool {
	return rcv._tab.MutateFloat64Slot(24, n)
}

/// The shelter afforded from wind, sea, and swell refers to the area where normal port operations are conducted, usually the wharf area. Shelter afforded by the anchorage area may be given for ports where cargo is handled by lighters. Values given are EXCELLENT, FAIR, GOOD, POOR, or NONE.
/// Example: /// Example: EXCELLENT
/// Constraints: Minimum length = 0, Maximum length = 36
func (rcv *Port_Ingest) Shelter() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(26))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The shelter afforded from wind, sea, and swell refers to the area where normal port operations are conducted, usually the wharf area. Shelter afforded by the anchorage area may be given for ports where cargo is handled by lighters. Values given are EXCELLENT, FAIR, GOOD, POOR, or NONE.
/// Example: /// Example: EXCELLENT
/// Constraints: Minimum length = 0, Maximum length = 36
/// Flag indicating whether a pilot is required at this port.
/// Example: /// Example: True
/// Constraints: No constraints specified.
func (rcv *Port_Ingest) PilotReqd() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(28))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

/// Flag indicating whether a pilot is required at this port.
/// Example: /// Example: True
/// Constraints: No constraints specified.
func (rcv *Port_Ingest) MutatePilotReqd(n bool) bool {
	return rcv._tab.MutateBoolSlot(28, n)
}

/// WGS84 latitude of the location, in degrees. -90 to 90 degrees (negative values south of equator).
/// Example: /// Example: 45.23
/// Constraints: No constraints specified.
func (rcv *Port_Ingest) Lat() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(30))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// WGS84 latitude of the location, in degrees. -90 to 90 degrees (negative values south of equator).
/// Example: /// Example: 45.23
/// Constraints: No constraints specified.
func (rcv *Port_Ingest) MutateLat(n float64) bool {
	return rcv._tab.MutateFloat64Slot(30, n)
}

/// WGS84 longitude of the location, in degrees. -180 to 180 degrees (negative values west of Prime Meridian).
/// Example: /// Example: 179.1
/// Constraints: No constraints specified.
func (rcv *Port_Ingest) Lon() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(32))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// WGS84 longitude of the location, in degrees. -180 to 180 degrees (negative values west of Prime Meridian).
/// Example: /// Example: 179.1
/// Constraints: No constraints specified.
func (rcv *Port_Ingest) MutateLon(n float64) bool {
	return rcv._tab.MutateFloat64Slot(32, n)
}

/// The country where this port is located.
/// Example: /// Example: US
/// Constraints: Minimum length = 0, Maximum length = 4
func (rcv *Port_Ingest) CountryCode() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(34))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The country where this port is located.
/// Example: /// Example: US
/// Constraints: Minimum length = 0, Maximum length = 4
/// Time the row was created in the database, auto-populated by the system.
/// Example: /// Example: 2018-01-01T16:00:00.123Z
/// Constraints: No constraints specified.
func (rcv *Port_Ingest) CreatedAt() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(36))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Time the row was created in the database, auto-populated by the system.
/// Example: /// Example: 2018-01-01T16:00:00.123Z
/// Constraints: No constraints specified.
/// Application user who created the row in the database, auto-populated by the system.
/// Example: /// Example: some.user
/// Constraints: Minimum length = 1, Maximum length = 64
func (rcv *Port_Ingest) CreatedBy() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(38))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Application user who created the row in the database, auto-populated by the system.
/// Example: /// Example: some.user
/// Constraints: Minimum length = 1, Maximum length = 64
/// Source of the data.
/// Example: /// Example: Bluestaq
/// Constraints: Minimum length = 1, Maximum length = 64
func (rcv *Port_Ingest) Source() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(40))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Source of the data.
/// Example: /// Example: Bluestaq
/// Constraints: Minimum length = 1, Maximum length = 64
/// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
/// Example: /// Example: THIRD_PARTY_DATASOURCE
/// Constraints: Minimum length = 0, Maximum length = 64
func (rcv *Port_Ingest) Origin() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(42))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
/// Example: /// Example: THIRD_PARTY_DATASOURCE
/// Constraints: Minimum length = 0, Maximum length = 64
/// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
/// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
/// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
/// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
/// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
/// Example: /// Example: TEST
/// Constraints: Minimum length = 1, Maximum length = 64
func (rcv *Port_Ingest) DataMode() Port_Ingest_dataMode_Enum {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(44))
	if o != 0 {
		return Port_Ingest_dataMode_Enum(rcv._tab.GetInt8(o + rcv._tab.Pos))
	}
	return 0
}

/// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
/// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
/// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
/// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
/// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
/// Example: /// Example: TEST
/// Constraints: Minimum length = 1, Maximum length = 64
func (rcv *Port_Ingest) MutateDataMode(n Port_Ingest_dataMode_Enum) bool {
	return rcv._tab.MutateInt8Slot(44, int8(n))
}

/// The originating source network on which this record was created, auto-populated by the system.
/// Example: /// Example: OPS1
/// Constraints: Minimum length = 1, Maximum length = 32
func (rcv *Port_Ingest) OrigNetwork() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(46))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The originating source network on which this record was created, auto-populated by the system.
/// Example: /// Example: OPS1
/// Constraints: Minimum length = 1, Maximum length = 32
func Port_IngestStart(builder *flatbuffers.Builder) {
	builder.StartObject(22)
}
func Port_IngestAddId(builder *flatbuffers.Builder, id flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(id), 0)
}
func Port_IngestAddClassificationMarking(builder *flatbuffers.Builder, classificationMarking flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(classificationMarking), 0)
}
func Port_IngestAddIdSite(builder *flatbuffers.Builder, idSite flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(idSite), 0)
}
func Port_IngestAddExternalId(builder *flatbuffers.Builder, externalId flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(3, flatbuffers.UOffsetT(externalId), 0)
}
func Port_IngestAddLocode(builder *flatbuffers.Builder, locode flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(4, flatbuffers.UOffsetT(locode), 0)
}
func Port_IngestAddPortName(builder *flatbuffers.Builder, portName flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(5, flatbuffers.UOffsetT(portName), 0)
}
func Port_IngestAddHarborType(builder *flatbuffers.Builder, harborType flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(6, flatbuffers.UOffsetT(harborType), 0)
}
func Port_IngestAddHarborSize(builder *flatbuffers.Builder, harborSize float64) {
	builder.PrependFloat64Slot(7, harborSize, 0.0)
}
func Port_IngestAddMaxDraught(builder *flatbuffers.Builder, maxDraught float64) {
	builder.PrependFloat64Slot(8, maxDraught, 0.0)
}
func Port_IngestAddAvgDuration(builder *flatbuffers.Builder, avgDuration float64) {
	builder.PrependFloat64Slot(9, avgDuration, 0.0)
}
func Port_IngestAddTideRange(builder *flatbuffers.Builder, tideRange float64) {
	builder.PrependFloat64Slot(10, tideRange, 0.0)
}
func Port_IngestAddShelter(builder *flatbuffers.Builder, shelter flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(11, flatbuffers.UOffsetT(shelter), 0)
}
func Port_IngestAddPilotReqd(builder *flatbuffers.Builder, pilotReqd bool) {
	builder.PrependBoolSlot(12, pilotReqd, false)
}
func Port_IngestAddLat(builder *flatbuffers.Builder, lat float64) {
	builder.PrependFloat64Slot(13, lat, 0.0)
}
func Port_IngestAddLon(builder *flatbuffers.Builder, lon float64) {
	builder.PrependFloat64Slot(14, lon, 0.0)
}
func Port_IngestAddCountryCode(builder *flatbuffers.Builder, countryCode flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(15, flatbuffers.UOffsetT(countryCode), 0)
}
func Port_IngestAddCreatedAt(builder *flatbuffers.Builder, createdAt flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(16, flatbuffers.UOffsetT(createdAt), 0)
}
func Port_IngestAddCreatedBy(builder *flatbuffers.Builder, createdBy flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(17, flatbuffers.UOffsetT(createdBy), 0)
}
func Port_IngestAddSource(builder *flatbuffers.Builder, source flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(18, flatbuffers.UOffsetT(source), 0)
}
func Port_IngestAddOrigin(builder *flatbuffers.Builder, origin flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(19, flatbuffers.UOffsetT(origin), 0)
}
func Port_IngestAddDataMode(builder *flatbuffers.Builder, dataMode Port_Ingest_dataMode_Enum) {
	builder.PrependInt8Slot(20, int8(dataMode), 0)
}
func Port_IngestAddOrigNetwork(builder *flatbuffers.Builder, origNetwork flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(21, flatbuffers.UOffsetT(origNetwork), 0)
}
func Port_IngestEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
