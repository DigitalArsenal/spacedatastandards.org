// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package IonoObservationScalerInfo_Abridged

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

/// /// The ScalerInfo record describes the person or system who interpreted the ionogram in IonoObservation.
type IonoObservationScalerInfo_Abridged struct {
	_tab flatbuffers.Table
}

const IonoObservationScalerInfo_AbridgedIdentifier = "IONO"

func GetRootAsIonoObservationScalerInfo_Abridged(buf []byte, offset flatbuffers.UOffsetT) *IonoObservationScalerInfo_Abridged {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &IonoObservationScalerInfo_Abridged{}
	x.Init(buf, n+offset)
	return x
}

func FinishIonoObservationScalerInfo_AbridgedBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	identifierBytes := []byte(IonoObservationScalerInfo_AbridgedIdentifier)
	builder.FinishWithFileIdentifier(offset, identifierBytes)
}

func IonoObservationScalerInfo_AbridgedBufferHasIdentifier(buf []byte) bool {
	return flatbuffers.BufferHasIdentifier(buf, IonoObservationScalerInfo_AbridgedIdentifier)
}

func GetSizePrefixedRootAsIonoObservationScalerInfo_Abridged(buf []byte, offset flatbuffers.UOffsetT) *IonoObservationScalerInfo_Abridged {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &IonoObservationScalerInfo_Abridged{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedIonoObservationScalerInfo_AbridgedBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	identifierBytes := []byte(IonoObservationScalerInfo_AbridgedIdentifier)
	builder.FinishSizePrefixedWithFileIdentifier(offset, identifierBytes)
}

func SizePrefixedIonoObservationScalerInfo_AbridgedBufferHasIdentifier(buf []byte) bool {
	return flatbuffers.SizePrefixedBufferHasIdentifier(buf, IonoObservationScalerInfo_AbridgedIdentifier)
}

func (rcv *IonoObservationScalerInfo_Abridged) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *IonoObservationScalerInfo_Abridged) Table() flatbuffers.Table {
	return rcv._tab
}

/// Scaler type (MANUAL, AUTOMATIC or UNKNOWN).
/// Example: /// Example: MANUAL
/// Constraints: Minimum length = 0, Maximum length = 9
func (rcv *IonoObservationScalerInfo_Abridged) Type() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Scaler type (MANUAL, AUTOMATIC or UNKNOWN).
/// Example: /// Example: MANUAL
/// Constraints: Minimum length = 0, Maximum length = 9
/// Scaler name.
/// Example: /// Example: ARTIST-4
/// Constraints: Minimum length = 0, Maximum length = 20
func (rcv *IonoObservationScalerInfo_Abridged) Name() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Scaler name.
/// Example: /// Example: ARTIST-4
/// Constraints: Minimum length = 0, Maximum length = 20
/// Scaler organization.
/// Example: /// Example: UML
/// Constraints: Minimum length = 0, Maximum length = 64
func (rcv *IonoObservationScalerInfo_Abridged) Organization() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Scaler organization.
/// Example: /// Example: UML
/// Constraints: Minimum length = 0, Maximum length = 64
/// Scaler version.
/// Example: /// Example: 500200.1
/// Constraints: No constraints specified.
func (rcv *IonoObservationScalerInfo_Abridged) Version() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Scaler version.
/// Example: /// Example: 500200.1
/// Constraints: No constraints specified.
func (rcv *IonoObservationScalerInfo_Abridged) MutateVersion(n float64) bool {
	return rcv._tab.MutateFloat64Slot(10, n)
}

/// Scaler confidence score.
/// Example: /// Example: 75
/// Constraints: No constraints specified.
func (rcv *IonoObservationScalerInfo_Abridged) ConfidenceScore() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

/// Scaler confidence score.
/// Example: /// Example: 75
/// Constraints: No constraints specified.
func (rcv *IonoObservationScalerInfo_Abridged) MutateConfidenceScore(n int32) bool {
	return rcv._tab.MutateInt32Slot(12, n)
}

/// Scaler confidence level.
/// Example: /// Example: 11
/// Constraints: No constraints specified.
func (rcv *IonoObservationScalerInfo_Abridged) ConfidenceLevel() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

/// Scaler confidence level.
/// Example: /// Example: 11
/// Constraints: No constraints specified.
func (rcv *IonoObservationScalerInfo_Abridged) MutateConfidenceLevel(n int32) bool {
	return rcv._tab.MutateInt32Slot(14, n)
}

func IonoObservationScalerInfo_AbridgedStart(builder *flatbuffers.Builder) {
	builder.StartObject(6)
}
func IonoObservationScalerInfo_AbridgedAddType(builder *flatbuffers.Builder, type_ flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(type_), 0)
}
func IonoObservationScalerInfo_AbridgedAddName(builder *flatbuffers.Builder, name flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(name), 0)
}
func IonoObservationScalerInfo_AbridgedAddOrganization(builder *flatbuffers.Builder, organization flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(organization), 0)
}
func IonoObservationScalerInfo_AbridgedAddVersion(builder *flatbuffers.Builder, version float64) {
	builder.PrependFloat64Slot(3, version, 0.0)
}
func IonoObservationScalerInfo_AbridgedAddConfidenceScore(builder *flatbuffers.Builder, confidenceScore int32) {
	builder.PrependInt32Slot(4, confidenceScore, 0)
}
func IonoObservationScalerInfo_AbridgedAddConfidenceLevel(builder *flatbuffers.Builder, confidenceLevel int32) {
	builder.PrependInt32Slot(5, confidenceLevel, 0)
}
func IonoObservationScalerInfo_AbridgedEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
