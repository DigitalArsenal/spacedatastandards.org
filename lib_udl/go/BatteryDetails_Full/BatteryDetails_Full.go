// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package BatteryDetails_Full

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

/// /// Detailed information on a spacecraft battery type compiled by a particular source. A Battery record may have multiple details records from several sources.
type BatteryDetails_Full struct {
	_tab flatbuffers.Table
}

const BatteryDetails_FullIdentifier = "BATT"

func GetRootAsBatteryDetails_Full(buf []byte, offset flatbuffers.UOffsetT) *BatteryDetails_Full {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &BatteryDetails_Full{}
	x.Init(buf, n+offset)
	return x
}

func FinishBatteryDetails_FullBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	identifierBytes := []byte(BatteryDetails_FullIdentifier)
	builder.FinishWithFileIdentifier(offset, identifierBytes)
}

func BatteryDetails_FullBufferHasIdentifier(buf []byte) bool {
	return flatbuffers.BufferHasIdentifier(buf, BatteryDetails_FullIdentifier)
}

func GetSizePrefixedRootAsBatteryDetails_Full(buf []byte, offset flatbuffers.UOffsetT) *BatteryDetails_Full {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &BatteryDetails_Full{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedBatteryDetails_FullBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	identifierBytes := []byte(BatteryDetails_FullIdentifier)
	builder.FinishSizePrefixedWithFileIdentifier(offset, identifierBytes)
}

func SizePrefixedBatteryDetails_FullBufferHasIdentifier(buf []byte) bool {
	return flatbuffers.SizePrefixedBufferHasIdentifier(buf, BatteryDetails_FullIdentifier)
}

func (rcv *BatteryDetails_Full) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *BatteryDetails_Full) Table() flatbuffers.Table {
	return rcv._tab
}

/// Unique identifier of the record, auto-generated by the system.
/// Example: /// Example: BATTERYDETAILS-ID
/// Constraints: Minimum length = 1, Maximum length = 36
func (rcv *BatteryDetails_Full) Id() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Unique identifier of the record, auto-generated by the system.
/// Example: /// Example: BATTERYDETAILS-ID
/// Constraints: Minimum length = 1, Maximum length = 36
/// Identifier of the parent battery type record.
/// Example: /// Example: BATTERY-ID
/// Constraints: Minimum length = 1, Maximum length = 36
func (rcv *BatteryDetails_Full) IdBattery() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Identifier of the parent battery type record.
/// Example: /// Example: BATTERY-ID
/// Constraints: Minimum length = 1, Maximum length = 36
/// Classification marking of the data in IC/CAPCO Portion-marked format.
/// Example: /// Example: U
/// Constraints: Minimum length = 1, Maximum length = 128
func (rcv *BatteryDetails_Full) ClassificationMarking() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Classification marking of the data in IC/CAPCO Portion-marked format.
/// Example: /// Example: U
/// Constraints: Minimum length = 1, Maximum length = 128
/// Type of battery technology (e.g. Ni-Cd, Ni-H2, Li-ion, etc.).
/// Example: /// Example: Ni-Cd
/// Constraints: Minimum length = 0, Maximum length = 32
func (rcv *BatteryDetails_Full) Technology() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Type of battery technology (e.g. Ni-Cd, Ni-H2, Li-ion, etc.).
/// Example: /// Example: Ni-Cd
/// Constraints: Minimum length = 0, Maximum length = 32
/// Battery capacity in Ah.
/// Example: /// Example: 10.1
/// Constraints: No constraints specified.
func (rcv *BatteryDetails_Full) Capacity() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Battery capacity in Ah.
/// Example: /// Example: 10.1
/// Constraints: No constraints specified.
func (rcv *BatteryDetails_Full) MutateCapacity(n float64) bool {
	return rcv._tab.MutateFloat64Slot(12, n)
}

/// Depth of discharge as a percentage/fraction.
/// Example: /// Example: 0.2
/// Constraints: No constraints specified.
func (rcv *BatteryDetails_Full) DischargeDepth() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Depth of discharge as a percentage/fraction.
/// Example: /// Example: 0.2
/// Constraints: No constraints specified.
func (rcv *BatteryDetails_Full) MutateDischargeDepth(n float64) bool {
	return rcv._tab.MutateFloat64Slot(14, n)
}

/// Battery model number or name.
/// Example: /// Example: 11212
/// Constraints: Minimum length = 0, Maximum length = 128
func (rcv *BatteryDetails_Full) Model() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Battery model number or name.
/// Example: /// Example: 11212
/// Constraints: Minimum length = 0, Maximum length = 128
/// Battery description/notes.
/// Example: /// Example: example notes
/// Constraints: Minimum length = 0, Maximum length = 1024
func (rcv *BatteryDetails_Full) Description() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(18))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Battery description/notes.
/// Example: /// Example: example notes
/// Constraints: Minimum length = 0, Maximum length = 1024
/// ID of the organization that manufactures the battery.
/// Example: /// Example: MANUFACTURERORG-ID
/// Constraints: Minimum length = 0, Maximum length = 36
func (rcv *BatteryDetails_Full) ManufacturerOrgId() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(20))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// ID of the organization that manufactures the battery.
/// Example: /// Example: MANUFACTURERORG-ID
/// Constraints: Minimum length = 0, Maximum length = 36
/// Time the row was created in the database, auto-populated by the system.
/// Example: /// Example: 2018-01-01T16:00:00.123Z
/// Constraints: No constraints specified.
func (rcv *BatteryDetails_Full) CreatedAt() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(22))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Time the row was created in the database, auto-populated by the system.
/// Example: /// Example: 2018-01-01T16:00:00.123Z
/// Constraints: No constraints specified.
/// Application user who created the row in the database, auto-populated by the system.
/// Example: /// Example: some.user
/// Constraints: Minimum length = 1, Maximum length = 64
func (rcv *BatteryDetails_Full) CreatedBy() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(24))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Application user who created the row in the database, auto-populated by the system.
/// Example: /// Example: some.user
/// Constraints: Minimum length = 1, Maximum length = 64
/// Time the row was last updated in the database, auto-populated by the system.
/// Example: /// Example: 2018-01-01T16:00:00.123Z
/// Constraints: No constraints specified.
func (rcv *BatteryDetails_Full) UpdatedAt() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(26))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Time the row was last updated in the database, auto-populated by the system.
/// Example: /// Example: 2018-01-01T16:00:00.123Z
/// Constraints: No constraints specified.
/// Application user who updated the row in the database, auto-populated by the system.
/// Example: /// Example: some.user
/// Constraints: Minimum length = 0, Maximum length = 64
func (rcv *BatteryDetails_Full) UpdatedBy() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(28))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Application user who updated the row in the database, auto-populated by the system.
/// Example: /// Example: some.user
/// Constraints: Minimum length = 0, Maximum length = 64
/// Source of the data.
/// Example: /// Example: Bluestaq
/// Constraints: Minimum length = 1, Maximum length = 64
func (rcv *BatteryDetails_Full) Source() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(30))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Source of the data.
/// Example: /// Example: Bluestaq
/// Constraints: Minimum length = 1, Maximum length = 64
/// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
/// Example: /// Example: THIRD_PARTY_DATASOURCE
/// Constraints: Minimum length = 0, Maximum length = 64
func (rcv *BatteryDetails_Full) Origin() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(32))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
/// Example: /// Example: THIRD_PARTY_DATASOURCE
/// Constraints: Minimum length = 0, Maximum length = 64
/// The originating source network on which this record was created, auto-populated by the system.
/// Example: /// Example: ORIG
/// Constraints: Minimum length = 1, Maximum length = 32
func (rcv *BatteryDetails_Full) OrigNetwork() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(34))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The originating source network on which this record was created, auto-populated by the system.
/// Example: /// Example: ORIG
/// Constraints: Minimum length = 1, Maximum length = 32
/// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
/// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
/// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
/// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
/// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
/// Example: /// Example: TEST
/// Constraints: Minimum length = 1, Maximum length = 32
func (rcv *BatteryDetails_Full) DataMode() BatteryDetails_Full_dataMode_Enum {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(36))
	if o != 0 {
		return BatteryDetails_Full_dataMode_Enum(rcv._tab.GetInt8(o + rcv._tab.Pos))
	}
	return 0
}

/// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
/// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
/// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
/// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
/// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
/// Example: /// Example: TEST
/// Constraints: Minimum length = 1, Maximum length = 32
func (rcv *BatteryDetails_Full) MutateDataMode(n BatteryDetails_Full_dataMode_Enum) bool {
	return rcv._tab.MutateInt8Slot(36, int8(n))
}

/// Optional array of provider/source specific tags for this data, where each element is no longer than 32 characters, used for implementing data owner conditional access controls to restrict access to the data. Should be left null by data providers unless conditional access controls are coordinated with the UDL team.
/// Example: /// Example: ['PROVIDER_TAG1', 'PROVIDER_TAG2']
/// Constraints: No constraints specified.
func (rcv *BatteryDetails_Full) Tags(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(38))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *BatteryDetails_Full) TagsLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(38))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

/// Optional array of provider/source specific tags for this data, where each element is no longer than 32 characters, used for implementing data owner conditional access controls to restrict access to the data. Should be left null by data providers unless conditional access controls are coordinated with the UDL team.
/// Example: /// Example: ['PROVIDER_TAG1', 'PROVIDER_TAG2']
/// Constraints: No constraints specified.
/// No description provided.
/// Example: /// Example: No example provided.
/// Constraints: No constraints specified.
func (rcv *BatteryDetails_Full) ManufacturerOrg() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(40))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// No description provided.
/// Example: /// Example: No example provided.
/// Constraints: No constraints specified.
func BatteryDetails_FullStart(builder *flatbuffers.Builder) {
	builder.StartObject(19)
}
func BatteryDetails_FullAddId(builder *flatbuffers.Builder, id flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(id), 0)
}
func BatteryDetails_FullAddIdBattery(builder *flatbuffers.Builder, idBattery flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(idBattery), 0)
}
func BatteryDetails_FullAddClassificationMarking(builder *flatbuffers.Builder, classificationMarking flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(classificationMarking), 0)
}
func BatteryDetails_FullAddTechnology(builder *flatbuffers.Builder, technology flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(3, flatbuffers.UOffsetT(technology), 0)
}
func BatteryDetails_FullAddCapacity(builder *flatbuffers.Builder, capacity float64) {
	builder.PrependFloat64Slot(4, capacity, 0.0)
}
func BatteryDetails_FullAddDischargeDepth(builder *flatbuffers.Builder, dischargeDepth float64) {
	builder.PrependFloat64Slot(5, dischargeDepth, 0.0)
}
func BatteryDetails_FullAddModel(builder *flatbuffers.Builder, model flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(6, flatbuffers.UOffsetT(model), 0)
}
func BatteryDetails_FullAddDescription(builder *flatbuffers.Builder, description flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(7, flatbuffers.UOffsetT(description), 0)
}
func BatteryDetails_FullAddManufacturerOrgId(builder *flatbuffers.Builder, manufacturerOrgId flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(8, flatbuffers.UOffsetT(manufacturerOrgId), 0)
}
func BatteryDetails_FullAddCreatedAt(builder *flatbuffers.Builder, createdAt flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(9, flatbuffers.UOffsetT(createdAt), 0)
}
func BatteryDetails_FullAddCreatedBy(builder *flatbuffers.Builder, createdBy flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(10, flatbuffers.UOffsetT(createdBy), 0)
}
func BatteryDetails_FullAddUpdatedAt(builder *flatbuffers.Builder, updatedAt flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(11, flatbuffers.UOffsetT(updatedAt), 0)
}
func BatteryDetails_FullAddUpdatedBy(builder *flatbuffers.Builder, updatedBy flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(12, flatbuffers.UOffsetT(updatedBy), 0)
}
func BatteryDetails_FullAddSource(builder *flatbuffers.Builder, source flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(13, flatbuffers.UOffsetT(source), 0)
}
func BatteryDetails_FullAddOrigin(builder *flatbuffers.Builder, origin flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(14, flatbuffers.UOffsetT(origin), 0)
}
func BatteryDetails_FullAddOrigNetwork(builder *flatbuffers.Builder, origNetwork flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(15, flatbuffers.UOffsetT(origNetwork), 0)
}
func BatteryDetails_FullAddDataMode(builder *flatbuffers.Builder, dataMode BatteryDetails_Full_dataMode_Enum) {
	builder.PrependInt8Slot(16, int8(dataMode), 0)
}
func BatteryDetails_FullAddTags(builder *flatbuffers.Builder, tags flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(17, flatbuffers.UOffsetT(tags), 0)
}
func BatteryDetails_FullStartTagsVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func BatteryDetails_FullAddManufacturerOrg(builder *flatbuffers.Builder, manufacturerOrg flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(18, flatbuffers.UOffsetT(manufacturerOrg), 0)
}
func BatteryDetails_FullEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
