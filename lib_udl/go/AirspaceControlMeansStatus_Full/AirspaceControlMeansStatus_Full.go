// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package AirspaceControlMeansStatus_Full

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

/// /// Mandatory nested segment to report multiple airspace control means statuses within an ACOID.
type AirspaceControlMeansStatus_Full struct {
	_tab flatbuffers.Table
}

const AirspaceControlMeansStatus_FullIdentifier = "AIRS"

func GetRootAsAirspaceControlMeansStatus_Full(buf []byte, offset flatbuffers.UOffsetT) *AirspaceControlMeansStatus_Full {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &AirspaceControlMeansStatus_Full{}
	x.Init(buf, n+offset)
	return x
}

func FinishAirspaceControlMeansStatus_FullBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	identifierBytes := []byte(AirspaceControlMeansStatus_FullIdentifier)
	builder.FinishWithFileIdentifier(offset, identifierBytes)
}

func AirspaceControlMeansStatus_FullBufferHasIdentifier(buf []byte) bool {
	return flatbuffers.BufferHasIdentifier(buf, AirspaceControlMeansStatus_FullIdentifier)
}

func GetSizePrefixedRootAsAirspaceControlMeansStatus_Full(buf []byte, offset flatbuffers.UOffsetT) *AirspaceControlMeansStatus_Full {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &AirspaceControlMeansStatus_Full{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedAirspaceControlMeansStatus_FullBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	identifierBytes := []byte(AirspaceControlMeansStatus_FullIdentifier)
	builder.FinishSizePrefixedWithFileIdentifier(offset, identifierBytes)
}

func SizePrefixedAirspaceControlMeansStatus_FullBufferHasIdentifier(buf []byte) bool {
	return flatbuffers.SizePrefixedBufferHasIdentifier(buf, AirspaceControlMeansStatus_FullIdentifier)
}

func (rcv *AirspaceControlMeansStatus_Full) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *AirspaceControlMeansStatus_Full) Table() flatbuffers.Table {
	return rcv._tab
}

/// Status of Airspace Control Means. Must be ADD, CHANGE, or DELETE.
/// Example: /// Example: ADD
/// Constraints: Minimum length = 0, Maximum length = 8
func (rcv *AirspaceControlMeansStatus_Full) CmStat() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Status of Airspace Control Means. Must be ADD, CHANGE, or DELETE.
/// Example: /// Example: ADD
/// Constraints: Minimum length = 0, Maximum length = 8
/// Airspace control means name or designator. Mandatory if acmStat equals "DELETE," otherwise this field is prohibited.
/// Example: /// Example: ['DESIGN:B35', 'NAME:ERMA', 'RANG:C21-C25']
/// Constraints: No constraints specified.
func (rcv *AirspaceControlMeansStatus_Full) CmStatId(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *AirspaceControlMeansStatus_Full) CmStatIdLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

/// Airspace control means name or designator. Mandatory if acmStat equals "DELETE," otherwise this field is prohibited.
/// Example: /// Example: ['DESIGN:B35', 'NAME:ERMA', 'RANG:C21-C25']
/// Constraints: No constraints specified.
/// A conditional nested segment to report multiple airspace control means within a particular airspace control means status.
/// Example: /// Example: No example provided.
/// Constraints: No constraints specified.
func (rcv *AirspaceControlMeansStatus_Full) AirspaceControlMeans(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *AirspaceControlMeansStatus_Full) AirspaceControlMeansLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

/// A conditional nested segment to report multiple airspace control means within a particular airspace control means status.
/// Example: /// Example: No example provided.
/// Constraints: No constraints specified.
func AirspaceControlMeansStatus_FullStart(builder *flatbuffers.Builder) {
	builder.StartObject(3)
}
func AirspaceControlMeansStatus_FullAddCmStat(builder *flatbuffers.Builder, cmStat flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(cmStat), 0)
}
func AirspaceControlMeansStatus_FullAddCmStatId(builder *flatbuffers.Builder, cmStatId flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(cmStatId), 0)
}
func AirspaceControlMeansStatus_FullStartCmStatIdVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func AirspaceControlMeansStatus_FullAddAirspaceControlMeans(builder *flatbuffers.Builder, airspaceControlMeans flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(airspaceControlMeans), 0)
}
func AirspaceControlMeansStatus_FullStartAirspaceControlMeansVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func AirspaceControlMeansStatus_FullEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
