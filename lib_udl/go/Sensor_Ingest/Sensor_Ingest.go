// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package Sensor_Ingest

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

/// /// Model representation of observation data for electro-optical based sensor phenomenologies.
type Sensor_Ingest struct {
	_tab flatbuffers.Table
}

const Sensor_IngestIdentifier = "SENS"

func GetRootAsSensor_Ingest(buf []byte, offset flatbuffers.UOffsetT) *Sensor_Ingest {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &Sensor_Ingest{}
	x.Init(buf, n+offset)
	return x
}

func FinishSensor_IngestBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	identifierBytes := []byte(Sensor_IngestIdentifier)
	builder.FinishWithFileIdentifier(offset, identifierBytes)
}

func Sensor_IngestBufferHasIdentifier(buf []byte) bool {
	return flatbuffers.BufferHasIdentifier(buf, Sensor_IngestIdentifier)
}

func GetSizePrefixedRootAsSensor_Ingest(buf []byte, offset flatbuffers.UOffsetT) *Sensor_Ingest {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &Sensor_Ingest{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedSensor_IngestBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	identifierBytes := []byte(Sensor_IngestIdentifier)
	builder.FinishSizePrefixedWithFileIdentifier(offset, identifierBytes)
}

func SizePrefixedSensor_IngestBufferHasIdentifier(buf []byte) bool {
	return flatbuffers.SizePrefixedBufferHasIdentifier(buf, Sensor_IngestIdentifier)
}

func (rcv *Sensor_Ingest) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *Sensor_Ingest) Table() flatbuffers.Table {
	return rcv._tab
}

/// Unique identifier of the record, auto-generated by the system.
/// Example: /// Example: SENSOR-ID
/// Constraints: Minimum length = 1, Maximum length = 36
func (rcv *Sensor_Ingest) IdSensor() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Unique identifier of the record, auto-generated by the system.
/// Example: /// Example: SENSOR-ID
/// Constraints: Minimum length = 1, Maximum length = 36
/// Unique name of this sensor.
/// Example: /// Example: SENSOR_NAME
/// Constraints: Minimum length = 1, Maximum length = 128
func (rcv *Sensor_Ingest) SensorName() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Unique name of this sensor.
/// Example: /// Example: SENSOR_NAME
/// Constraints: Minimum length = 1, Maximum length = 128
/// Classification marking of the data in IC/CAPCO Portion-marked format.
/// Example: /// Example: U
/// Constraints: Minimum length = 1, Maximum length = 128
func (rcv *Sensor_Ingest) ClassificationMarking() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Classification marking of the data in IC/CAPCO Portion-marked format.
/// Example: /// Example: U
/// Constraints: Minimum length = 1, Maximum length = 128
/// Number assigned to this sensor. Since there is no authoritative numbering scheme, these numbers sometimes collide across sensors (especially commercial sensors). It is therefore not a unique identifier.
/// Example: /// Example: 1234
/// Constraints: No constraints specified.
func (rcv *Sensor_Ingest) SensorNumber() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

/// Number assigned to this sensor. Since there is no authoritative numbering scheme, these numbers sometimes collide across sensors (especially commercial sensors). It is therefore not a unique identifier.
/// Example: /// Example: 1234
/// Constraints: No constraints specified.
func (rcv *Sensor_Ingest) MutateSensorNumber(n int32) bool {
	return rcv._tab.MutateInt32Slot(10, n)
}

/// Optional short name for the sensor.
/// Example: /// Example: SNR-1
/// Constraints: Minimum length = 0, Maximum length = 5
func (rcv *Sensor_Ingest) ShortName() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Optional short name for the sensor.
/// Example: /// Example: SNR-1
/// Constraints: Minimum length = 0, Maximum length = 5
/// Optional dissemination control required for accessing data (e.g observations) produced by this sensor. This is typically a proprietary data owner control for commercial sensors.
/// Example: /// Example: observations
/// Constraints: Minimum length = 0, Maximum length = 128
func (rcv *Sensor_Ingest) DataControl() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Optional dissemination control required for accessing data (e.g observations) produced by this sensor. This is typically a proprietary data owner control for commercial sensors.
/// Example: /// Example: observations
/// Constraints: Minimum length = 0, Maximum length = 128
/// Optional US Air Force identifier for the sensor/ASR site, typically for air surveillance radar (ASR) sensors.
/// Example: /// Example: AF-ID
/// Constraints: Minimum length = 0, Maximum length = 8
func (rcv *Sensor_Ingest) AfId() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Optional US Air Force identifier for the sensor/ASR site, typically for air surveillance radar (ASR) sensors.
/// Example: /// Example: AF-ID
/// Constraints: Minimum length = 0, Maximum length = 8
/// The sensor type at the site. Optional field, intended primarily for ASRs.
/// Example: /// Example: SENSOR_TYPE
/// Constraints: Minimum length = 0, Maximum length = 32
func (rcv *Sensor_Ingest) AsrType() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(18))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The sensor type at the site. Optional field, intended primarily for ASRs.
/// Example: /// Example: SENSOR_TYPE
/// Constraints: Minimum length = 0, Maximum length = 32
/// Source of the data.
/// Example: /// Example: some.user
/// Constraints: Minimum length = 1, Maximum length = 64
func (rcv *Sensor_Ingest) Source() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(20))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Source of the data.
/// Example: /// Example: some.user
/// Constraints: Minimum length = 1, Maximum length = 64
/// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
/// Example: /// Example: THIRD_PARTY_DATASOURCE
/// Constraints: Minimum length = 0, Maximum length = 64
func (rcv *Sensor_Ingest) Origin() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(22))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
/// Example: /// Example: THIRD_PARTY_DATASOURCE
/// Constraints: Minimum length = 0, Maximum length = 64
/// The originating source network on which this record was created, auto-populated by the system.
/// Example: /// Example: ORIG
/// Constraints: Minimum length = 1, Maximum length = 32
func (rcv *Sensor_Ingest) OrigNetwork() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(24))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The originating source network on which this record was created, auto-populated by the system.
/// Example: /// Example: ORIG
/// Constraints: Minimum length = 1, Maximum length = 32
/// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
/// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
/// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
/// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
/// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
/// Example: /// Example: TEST
/// Constraints: Minimum length = 1, Maximum length = 32
func (rcv *Sensor_Ingest) DataMode() Sensor_Ingest_dataMode_Enum {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(26))
	if o != 0 {
		return Sensor_Ingest_dataMode_Enum(rcv._tab.GetInt8(o + rcv._tab.Pos))
	}
	return 0
}

/// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
/// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
/// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
/// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
/// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
/// Example: /// Example: TEST
/// Constraints: Minimum length = 1, Maximum length = 32
func (rcv *Sensor_Ingest) MutateDataMode(n Sensor_Ingest_dataMode_Enum) bool {
	return rcv._tab.MutateInt8Slot(26, int8(n))
}

/// Time the row was created in the database, auto-populated by the system.
/// Example: /// Example: 2018-01-01T16:00:00.123Z
/// Constraints: No constraints specified.
func (rcv *Sensor_Ingest) CreatedAt() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(28))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Time the row was created in the database, auto-populated by the system.
/// Example: /// Example: 2018-01-01T16:00:00.123Z
/// Constraints: No constraints specified.
/// Application user who created the row in the database, auto-populated by the system.
/// Example: /// Example: some.user
/// Constraints: Minimum length = 1, Maximum length = 64
func (rcv *Sensor_Ingest) CreatedBy() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(30))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Application user who created the row in the database, auto-populated by the system.
/// Example: /// Example: some.user
/// Constraints: Minimum length = 1, Maximum length = 64
/// Optional flag indicating if the sensor is active.
/// Example: /// Example: True
/// Constraints: No constraints specified.
func (rcv *Sensor_Ingest) Active() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(32))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

/// Optional flag indicating if the sensor is active.
/// Example: /// Example: True
/// Constraints: No constraints specified.
func (rcv *Sensor_Ingest) MutateActive(n bool) bool {
	return rcv._tab.MutateBoolSlot(32, n)
}

/// Collection of Sensorcharacteristics which define characteristics and capabilities of a sensor.
/// Example: /// Example: No example provided.
/// Constraints: No constraints specified.
func (rcv *Sensor_Ingest) Sensorcharacteristics(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(34))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *Sensor_Ingest) SensorcharacteristicsLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(34))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

/// Collection of Sensorcharacteristics which define characteristics and capabilities of a sensor.
/// Example: /// Example: No example provided.
/// Constraints: No constraints specified.
/// Collection of SensorStats which contain statistics of a sensor.
/// Example: /// Example: No example provided.
/// Constraints: No constraints specified.
func (rcv *Sensor_Ingest) SensorStats(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(36))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *Sensor_Ingest) SensorStatsLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(36))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

/// Collection of SensorStats which contain statistics of a sensor.
/// Example: /// Example: No example provided.
/// Constraints: No constraints specified.
/// Sensorlimits define 0 to many limits of a particular sensor in terms of observation coverage of on-orbit objects.
/// Example: /// Example: No example provided.
/// Constraints: No constraints specified.
func (rcv *Sensor_Ingest) SensorlimitsCollection(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(38))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *Sensor_Ingest) SensorlimitsCollectionLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(38))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

/// Sensorlimits define 0 to many limits of a particular sensor in terms of observation coverage of on-orbit objects.
/// Example: /// Example: No example provided.
/// Constraints: No constraints specified.
/// No description provided.
/// Example: /// Example: No example provided.
/// Constraints: No constraints specified.
func (rcv *Sensor_Ingest) Entity() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(40))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// No description provided.
/// Example: /// Example: No example provided.
/// Constraints: No constraints specified.
/// Unique identifier of the parent entity. idEntity is required for Put.
/// Example: /// Example: ENTITY-ID
/// Constraints: Minimum length = 0, Maximum length = 36
func (rcv *Sensor_Ingest) IdEntity() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(42))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Unique identifier of the parent entity. idEntity is required for Put.
/// Example: /// Example: ENTITY-ID
/// Constraints: Minimum length = 0, Maximum length = 36
/// No description provided.
/// Example: /// Example: No example provided.
/// Constraints: No constraints specified.
func (rcv *Sensor_Ingest) SensorObservationType() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(44))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// No description provided.
/// Example: /// Example: No example provided.
/// Constraints: No constraints specified.
/// No description provided.
/// Example: /// Example: No example provided.
/// Constraints: No constraints specified.
func (rcv *Sensor_Ingest) SensorType() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(46))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// No description provided.
/// Example: /// Example: No example provided.
/// Constraints: No constraints specified.
func Sensor_IngestStart(builder *flatbuffers.Builder) {
	builder.StartObject(22)
}
func Sensor_IngestAddIdSensor(builder *flatbuffers.Builder, idSensor flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(idSensor), 0)
}
func Sensor_IngestAddSensorName(builder *flatbuffers.Builder, sensorName flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(sensorName), 0)
}
func Sensor_IngestAddClassificationMarking(builder *flatbuffers.Builder, classificationMarking flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(classificationMarking), 0)
}
func Sensor_IngestAddSensorNumber(builder *flatbuffers.Builder, sensorNumber int32) {
	builder.PrependInt32Slot(3, sensorNumber, 0)
}
func Sensor_IngestAddShortName(builder *flatbuffers.Builder, shortName flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(4, flatbuffers.UOffsetT(shortName), 0)
}
func Sensor_IngestAddDataControl(builder *flatbuffers.Builder, dataControl flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(5, flatbuffers.UOffsetT(dataControl), 0)
}
func Sensor_IngestAddAfId(builder *flatbuffers.Builder, afId flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(6, flatbuffers.UOffsetT(afId), 0)
}
func Sensor_IngestAddAsrType(builder *flatbuffers.Builder, asrType flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(7, flatbuffers.UOffsetT(asrType), 0)
}
func Sensor_IngestAddSource(builder *flatbuffers.Builder, source flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(8, flatbuffers.UOffsetT(source), 0)
}
func Sensor_IngestAddOrigin(builder *flatbuffers.Builder, origin flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(9, flatbuffers.UOffsetT(origin), 0)
}
func Sensor_IngestAddOrigNetwork(builder *flatbuffers.Builder, origNetwork flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(10, flatbuffers.UOffsetT(origNetwork), 0)
}
func Sensor_IngestAddDataMode(builder *flatbuffers.Builder, dataMode Sensor_Ingest_dataMode_Enum) {
	builder.PrependInt8Slot(11, int8(dataMode), 0)
}
func Sensor_IngestAddCreatedAt(builder *flatbuffers.Builder, createdAt flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(12, flatbuffers.UOffsetT(createdAt), 0)
}
func Sensor_IngestAddCreatedBy(builder *flatbuffers.Builder, createdBy flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(13, flatbuffers.UOffsetT(createdBy), 0)
}
func Sensor_IngestAddActive(builder *flatbuffers.Builder, active bool) {
	builder.PrependBoolSlot(14, active, false)
}
func Sensor_IngestAddSensorcharacteristics(builder *flatbuffers.Builder, sensorcharacteristics flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(15, flatbuffers.UOffsetT(sensorcharacteristics), 0)
}
func Sensor_IngestStartSensorcharacteristicsVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func Sensor_IngestAddSensorStats(builder *flatbuffers.Builder, sensorStats flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(16, flatbuffers.UOffsetT(sensorStats), 0)
}
func Sensor_IngestStartSensorStatsVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func Sensor_IngestAddSensorlimitsCollection(builder *flatbuffers.Builder, sensorlimitsCollection flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(17, flatbuffers.UOffsetT(sensorlimitsCollection), 0)
}
func Sensor_IngestStartSensorlimitsCollectionVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func Sensor_IngestAddEntity(builder *flatbuffers.Builder, entity flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(18, flatbuffers.UOffsetT(entity), 0)
}
func Sensor_IngestAddIdEntity(builder *flatbuffers.Builder, idEntity flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(19, flatbuffers.UOffsetT(idEntity), 0)
}
func Sensor_IngestAddSensorObservationType(builder *flatbuffers.Builder, sensorObservationType flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(20, flatbuffers.UOffsetT(sensorObservationType), 0)
}
func Sensor_IngestAddSensorType(builder *flatbuffers.Builder, sensorType flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(21, flatbuffers.UOffsetT(sensorType), 0)
}
func Sensor_IngestEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
