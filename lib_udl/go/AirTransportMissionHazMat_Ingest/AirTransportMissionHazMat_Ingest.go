// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package AirTransportMissionHazMat_Ingest

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

/// /// Collection of Hazardous Material information associated with this Air Transport Mission.
type AirTransportMissionHazMat_Ingest struct {
	_tab flatbuffers.Table
}

const AirTransportMissionHazMat_IngestIdentifier = "AIRT"

func GetRootAsAirTransportMissionHazMat_Ingest(buf []byte, offset flatbuffers.UOffsetT) *AirTransportMissionHazMat_Ingest {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &AirTransportMissionHazMat_Ingest{}
	x.Init(buf, n+offset)
	return x
}

func FinishAirTransportMissionHazMat_IngestBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	identifierBytes := []byte(AirTransportMissionHazMat_IngestIdentifier)
	builder.FinishWithFileIdentifier(offset, identifierBytes)
}

func AirTransportMissionHazMat_IngestBufferHasIdentifier(buf []byte) bool {
	return flatbuffers.BufferHasIdentifier(buf, AirTransportMissionHazMat_IngestIdentifier)
}

func GetSizePrefixedRootAsAirTransportMissionHazMat_Ingest(buf []byte, offset flatbuffers.UOffsetT) *AirTransportMissionHazMat_Ingest {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &AirTransportMissionHazMat_Ingest{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedAirTransportMissionHazMat_IngestBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	identifierBytes := []byte(AirTransportMissionHazMat_IngestIdentifier)
	builder.FinishSizePrefixedWithFileIdentifier(offset, identifierBytes)
}

func SizePrefixedAirTransportMissionHazMat_IngestBufferHasIdentifier(buf []byte) bool {
	return flatbuffers.SizePrefixedBufferHasIdentifier(buf, AirTransportMissionHazMat_IngestIdentifier)
}

func (rcv *AirTransportMissionHazMat_Ingest) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *AirTransportMissionHazMat_Ingest) Table() flatbuffers.Table {
	return rcv._tab
}

/// The hazMat identifier provided by the originating source.
/// Example: /// Example: cb6289e0f38534e01291ab6421d42724
/// Constraints: Minimum length = 0, Maximum length = 36
func (rcv *AirTransportMissionHazMat_Ingest) ExtHazMatId() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The hazMat identifier provided by the originating source.
/// Example: /// Example: cb6289e0f38534e01291ab6421d42724
/// Constraints: Minimum length = 0, Maximum length = 36
/// United Nations proper shipping name of the hazardous material according to the Hazardous Materials Regulations issued by the U.S. Department of Transportation.
/// Example: /// Example: LITHIUM METAL BATTERIES
/// Constraints: Minimum length = 0, Maximum length = 1024
func (rcv *AirTransportMissionHazMat_Ingest) ItemName() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// United Nations proper shipping name of the hazardous material according to the Hazardous Materials Regulations issued by the U.S. Department of Transportation.
/// Example: /// Example: LITHIUM METAL BATTERIES
/// Constraints: Minimum length = 0, Maximum length = 1024
/// United Nations number or North America number that identifies hazardous materials according to the Hazardous Materials Regulations issued by the U.S. Department of Transportation.
/// Example: /// Example: 0181
/// Constraints: Minimum length = 0, Maximum length = 4
func (rcv *AirTransportMissionHazMat_Ingest) UnNum() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// United Nations number or North America number that identifies hazardous materials according to the Hazardous Materials Regulations issued by the U.S. Department of Transportation.
/// Example: /// Example: 0181
/// Constraints: Minimum length = 0, Maximum length = 4
/// Number of pieces of hazardous cargo.
/// Example: /// Example: 29
/// Constraints: No constraints specified.
func (rcv *AirTransportMissionHazMat_Ingest) Pieces() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

/// Number of pieces of hazardous cargo.
/// Example: /// Example: 29
/// Constraints: No constraints specified.
func (rcv *AirTransportMissionHazMat_Ingest) MutatePieces(n int32) bool {
	return rcv._tab.MutateInt32Slot(10, n)
}

/// Total weight of hazardous cargo, including non-explosive parts, in kilograms.
/// Example: /// Example: 22.1
/// Constraints: No constraints specified.
func (rcv *AirTransportMissionHazMat_Ingest) Weight() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Total weight of hazardous cargo, including non-explosive parts, in kilograms.
/// Example: /// Example: 22.1
/// Constraints: No constraints specified.
func (rcv *AirTransportMissionHazMat_Ingest) MutateWeight(n float64) bool {
	return rcv._tab.MutateFloat64Slot(12, n)
}

/// Net explosive weight of the hazardous material, in kilograms.
/// Example: /// Example: 12.1
/// Constraints: No constraints specified.
func (rcv *AirTransportMissionHazMat_Ingest) NetExpWt() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Net explosive weight of the hazardous material, in kilograms.
/// Example: /// Example: 12.1
/// Constraints: No constraints specified.
func (rcv *AirTransportMissionHazMat_Ingest) MutateNetExpWt(n float64) bool {
	return rcv._tab.MutateFloat64Slot(14, n)
}

/// Class and division of the hazardous material according to the Hazardous Materials Regulations issued by the U.S. Department of Transportation.
/// Example: /// Example: 1.1
/// Constraints: No constraints specified.
func (rcv *AirTransportMissionHazMat_Ingest) ClassDiv() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Class and division of the hazardous material according to the Hazardous Materials Regulations issued by the U.S. Department of Transportation.
/// Example: /// Example: 1.1
/// Constraints: No constraints specified.
func (rcv *AirTransportMissionHazMat_Ingest) MutateClassDiv(n float64) bool {
	return rcv._tab.MutateFloat64Slot(16, n)
}

/// Compatibility group code used to specify the controls for the transportation and storage of hazardous materials according to the Hazardous Materials Regulations issued by the U.S. Department of Transportation.
/// Example: /// Example: A
/// Constraints: Minimum length = 0, Maximum length = 2
func (rcv *AirTransportMissionHazMat_Ingest) Cgc() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(18))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Compatibility group code used to specify the controls for the transportation and storage of hazardous materials according to the Hazardous Materials Regulations issued by the U.S. Department of Transportation.
/// Example: /// Example: A
/// Constraints: Minimum length = 0, Maximum length = 2
/// Comma delimited list of Note IDs for compatibility groups, specific to GDSS systems.
/// Example: /// Example: 4,5,7,8
/// Constraints: Minimum length = 0, Maximum length = 100
func (rcv *AirTransportMissionHazMat_Ingest) Cgn() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(20))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Comma delimited list of Note IDs for compatibility groups, specific to GDSS systems.
/// Example: /// Example: 4,5,7,8
/// Constraints: Minimum length = 0, Maximum length = 100
/// Comma delimited list of Note IDs for Item Class Segregation groups, specific to GDSS systems.
/// Example: /// Example: 11,12
/// Constraints: Minimum length = 0, Maximum length = 100
func (rcv *AirTransportMissionHazMat_Ingest) ApplicableNotes() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(22))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Comma delimited list of Note IDs for Item Class Segregation groups, specific to GDSS systems.
/// Example: /// Example: 11,12
/// Constraints: Minimum length = 0, Maximum length = 100
/// Itinerary number that identifies where the hazardous material is loaded.
/// Example: /// Example: 50
/// Constraints: No constraints specified.
func (rcv *AirTransportMissionHazMat_Ingest) OnItin() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(24))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

/// Itinerary number that identifies where the hazardous material is loaded.
/// Example: /// Example: 50
/// Constraints: No constraints specified.
func (rcv *AirTransportMissionHazMat_Ingest) MutateOnItin(n int32) bool {
	return rcv._tab.MutateInt32Slot(24, n)
}

/// The International Civil Aviation Organization (ICAO) code of the site where the hazardous material is loaded.
/// Example: /// Example: LIRQ
/// Constraints: Minimum length = 0, Maximum length = 4
func (rcv *AirTransportMissionHazMat_Ingest) OnIcao() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(26))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The International Civil Aviation Organization (ICAO) code of the site where the hazardous material is loaded.
/// Example: /// Example: LIRQ
/// Constraints: Minimum length = 0, Maximum length = 4
/// Itinerary number that identifies where the hazardous material is unloaded.
/// Example: /// Example: 300
/// Constraints: No constraints specified.
func (rcv *AirTransportMissionHazMat_Ingest) OffItin() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(28))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

/// Itinerary number that identifies where the hazardous material is unloaded.
/// Example: /// Example: 300
/// Constraints: No constraints specified.
func (rcv *AirTransportMissionHazMat_Ingest) MutateOffItin(n int32) bool {
	return rcv._tab.MutateInt32Slot(28, n)
}

/// The International Civil Aviation Organization (ICAO) code of the site where the hazardous material is unloaded.
/// Example: /// Example: MBPV
/// Constraints: Minimum length = 0, Maximum length = 4
func (rcv *AirTransportMissionHazMat_Ingest) OffIcao() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(30))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The International Civil Aviation Organization (ICAO) code of the site where the hazardous material is unloaded.
/// Example: /// Example: MBPV
/// Constraints: Minimum length = 0, Maximum length = 4
/// Flag indicating if hazardous material is associated with this air transport mission. Possible values are P (planned to be associated with the mission) or A (actually associated with the mission). Enum: [P, A].
/// Example: /// Example: P
/// Constraints: Minimum length = 0, Maximum length = 1
func (rcv *AirTransportMissionHazMat_Ingest) Planned() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(32))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Flag indicating if hazardous material is associated with this air transport mission. Possible values are P (planned to be associated with the mission) or A (actually associated with the mission). Enum: [P, A].
/// Example: /// Example: P
/// Constraints: Minimum length = 0, Maximum length = 1
func AirTransportMissionHazMat_IngestStart(builder *flatbuffers.Builder) {
	builder.StartObject(15)
}
func AirTransportMissionHazMat_IngestAddExtHazMatId(builder *flatbuffers.Builder, extHazMatId flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(extHazMatId), 0)
}
func AirTransportMissionHazMat_IngestAddItemName(builder *flatbuffers.Builder, itemName flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(itemName), 0)
}
func AirTransportMissionHazMat_IngestAddUnNum(builder *flatbuffers.Builder, unNum flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(unNum), 0)
}
func AirTransportMissionHazMat_IngestAddPieces(builder *flatbuffers.Builder, pieces int32) {
	builder.PrependInt32Slot(3, pieces, 0)
}
func AirTransportMissionHazMat_IngestAddWeight(builder *flatbuffers.Builder, weight float64) {
	builder.PrependFloat64Slot(4, weight, 0.0)
}
func AirTransportMissionHazMat_IngestAddNetExpWt(builder *flatbuffers.Builder, netExpWt float64) {
	builder.PrependFloat64Slot(5, netExpWt, 0.0)
}
func AirTransportMissionHazMat_IngestAddClassDiv(builder *flatbuffers.Builder, classDiv float64) {
	builder.PrependFloat64Slot(6, classDiv, 0.0)
}
func AirTransportMissionHazMat_IngestAddCgc(builder *flatbuffers.Builder, cgc flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(7, flatbuffers.UOffsetT(cgc), 0)
}
func AirTransportMissionHazMat_IngestAddCgn(builder *flatbuffers.Builder, cgn flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(8, flatbuffers.UOffsetT(cgn), 0)
}
func AirTransportMissionHazMat_IngestAddApplicableNotes(builder *flatbuffers.Builder, applicableNotes flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(9, flatbuffers.UOffsetT(applicableNotes), 0)
}
func AirTransportMissionHazMat_IngestAddOnItin(builder *flatbuffers.Builder, onItin int32) {
	builder.PrependInt32Slot(10, onItin, 0)
}
func AirTransportMissionHazMat_IngestAddOnIcao(builder *flatbuffers.Builder, onIcao flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(11, flatbuffers.UOffsetT(onIcao), 0)
}
func AirTransportMissionHazMat_IngestAddOffItin(builder *flatbuffers.Builder, offItin int32) {
	builder.PrependInt32Slot(12, offItin, 0)
}
func AirTransportMissionHazMat_IngestAddOffIcao(builder *flatbuffers.Builder, offIcao flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(13, flatbuffers.UOffsetT(offIcao), 0)
}
func AirTransportMissionHazMat_IngestAddPlanned(builder *flatbuffers.Builder, planned flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(14, flatbuffers.UOffsetT(planned), 0)
}
func AirTransportMissionHazMat_IngestEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
