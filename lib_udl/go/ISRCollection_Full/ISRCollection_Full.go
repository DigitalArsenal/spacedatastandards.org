// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package ISRCollection_Full

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

/// /// ISR Collection data.
type ISRCollection_Full struct {
	_tab flatbuffers.Table
}

const ISRCollection_FullIdentifier = "ISRC"

func GetRootAsISRCollection_Full(buf []byte, offset flatbuffers.UOffsetT) *ISRCollection_Full {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &ISRCollection_Full{}
	x.Init(buf, n+offset)
	return x
}

func FinishISRCollection_FullBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	identifierBytes := []byte(ISRCollection_FullIdentifier)
	builder.FinishWithFileIdentifier(offset, identifierBytes)
}

func ISRCollection_FullBufferHasIdentifier(buf []byte) bool {
	return flatbuffers.BufferHasIdentifier(buf, ISRCollection_FullIdentifier)
}

func GetSizePrefixedRootAsISRCollection_Full(buf []byte, offset flatbuffers.UOffsetT) *ISRCollection_Full {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &ISRCollection_Full{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedISRCollection_FullBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	identifierBytes := []byte(ISRCollection_FullIdentifier)
	builder.FinishSizePrefixedWithFileIdentifier(offset, identifierBytes)
}

func SizePrefixedISRCollection_FullBufferHasIdentifier(buf []byte) bool {
	return flatbuffers.SizePrefixedBufferHasIdentifier(buf, ISRCollection_FullIdentifier)
}

func (rcv *ISRCollection_Full) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *ISRCollection_Full) Table() flatbuffers.Table {
	return rcv._tab
}

/// Unique identifier of the record, auto-generated by the system.
/// Example: /// Example: ISRCOLLECTION-ID
/// Constraints: Minimum length = 1, Maximum length = 36
func (rcv *ISRCollection_Full) Id() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Unique identifier of the record, auto-generated by the system.
/// Example: /// Example: ISRCOLLECTION-ID
/// Constraints: Minimum length = 1, Maximum length = 36
/// Classification marking of the data in IC/CAPCO Portion-marked format.
/// Example: /// Example: U
/// Constraints: Minimum length = 1, Maximum length = 128
func (rcv *ISRCollection_Full) ClassificationMarking() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Classification marking of the data in IC/CAPCO Portion-marked format.
/// Example: /// Example: U
/// Constraints: Minimum length = 1, Maximum length = 128
/// Version of the IDEX software the request came from for compatibility.
/// Example: /// Example: 2
/// Constraints: No constraints specified.
func (rcv *ISRCollection_Full) IdexVersion() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

/// Version of the IDEX software the request came from for compatibility.
/// Example: /// Example: 2
/// Constraints: No constraints specified.
func (rcv *ISRCollection_Full) MutateIdexVersion(n int32) bool {
	return rcv._tab.MutateInt32Slot(8, n)
}

/// Human readable Mission Name.
/// Example: /// Example: Example mission name
/// Constraints: Minimum length = 0, Maximum length = 128
func (rcv *ISRCollection_Full) Name() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Human readable Mission Name.
/// Example: /// Example: Example mission name
/// Constraints: Minimum length = 0, Maximum length = 128
/// Mission Identifier.
/// Example: /// Example: myTask-2020-04-23T00:00:00.000Z
/// Constraints: Minimum length = 0, Maximum length = 32
func (rcv *ISRCollection_Full) MissionId() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Mission Identifier.
/// Example: /// Example: myTask-2020-04-23T00:00:00.000Z
/// Constraints: Minimum length = 0, Maximum length = 32
/// Designation of mission Area Of Responsibility.
/// Example: /// Example: Kandahar
/// Constraints: Minimum length = 0, Maximum length = 32
func (rcv *ISRCollection_Full) MissionAor() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Designation of mission Area Of Responsibility.
/// Example: /// Example: Kandahar
/// Constraints: Minimum length = 0, Maximum length = 32
/// Primary type of intelligence to be collected during the mission.
/// Example: /// Example: Sig
/// Constraints: Minimum length = 0, Maximum length = 32
func (rcv *ISRCollection_Full) MissionPrimaryIntelDiscipline() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Primary type of intelligence to be collected during the mission.
/// Example: /// Example: Sig
/// Constraints: Minimum length = 0, Maximum length = 32
/// Sub category of primary intelligence to be collected.
/// Example: /// Example: FMV
/// Constraints: Minimum length = 0, Maximum length = 32
func (rcv *ISRCollection_Full) MissionPrimarySubCategory() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(18))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Sub category of primary intelligence to be collected.
/// Example: /// Example: FMV
/// Constraints: Minimum length = 0, Maximum length = 32
/// Type of intelligence to be collected second.
/// Example: /// Example: Intelligence_2
/// Constraints: Minimum length = 0, Maximum length = 32
func (rcv *ISRCollection_Full) MissionSecondaryIntelDiscipline() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(20))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Type of intelligence to be collected second.
/// Example: /// Example: Intelligence_2
/// Constraints: Minimum length = 0, Maximum length = 32
/// Mission sub category for secondary intelligence discipline to be collected.
/// Example: /// Example: Convoy
/// Constraints: Minimum length = 0, Maximum length = 32
func (rcv *ISRCollection_Full) MissionSecondarySubCategory() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(22))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Mission sub category for secondary intelligence discipline to be collected.
/// Example: /// Example: Convoy
/// Constraints: Minimum length = 0, Maximum length = 32
/// What is the primary objective(Role) of this mission.
/// Example: /// Example: Targeting of Lead Vehicle
/// Constraints: Minimum length = 0, Maximum length = 32
func (rcv *ISRCollection_Full) MissionRole() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(24))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// What is the primary objective(Role) of this mission.
/// Example: /// Example: Targeting of Lead Vehicle
/// Constraints: Minimum length = 0, Maximum length = 32
/// Mission operation name.
/// Example: /// Example: OP-HONEY-BADGER
/// Constraints: Minimum length = 0, Maximum length = 32
func (rcv *ISRCollection_Full) MissionOperation() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(26))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Mission operation name.
/// Example: /// Example: OP-HONEY-BADGER
/// Constraints: Minimum length = 0, Maximum length = 32
/// Mission Priority (1-n).
/// Example: /// Example: 1
/// Constraints: No constraints specified.
func (rcv *ISRCollection_Full) MissionPriority() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(28))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

/// Mission Priority (1-n).
/// Example: /// Example: 1
/// Constraints: No constraints specified.
func (rcv *ISRCollection_Full) MutateMissionPriority(n int32) bool {
	return rcv._tab.MutateInt32Slot(28, n)
}

/// Name of the Supporting unit/Location that is performing this mission.
/// Example: /// Example: ENVOYS
/// Constraints: Minimum length = 0, Maximum length = 32
func (rcv *ISRCollection_Full) MissionSupportedUnit() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(30))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Name of the Supporting unit/Location that is performing this mission.
/// Example: /// Example: ENVOYS
/// Constraints: Minimum length = 0, Maximum length = 32
/// Text version of what we are emphasizing in this mission.
/// Example: /// Example: Mission emphasis
/// Constraints: Minimum length = 0, Maximum length = 32
func (rcv *ISRCollection_Full) MissionEmphasis() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(32))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Text version of what we are emphasizing in this mission.
/// Example: /// Example: Mission emphasis
/// Constraints: Minimum length = 0, Maximum length = 32
/// WGS-84 latitude of the start position, in degrees. -90 to 90 degrees (negative values south of equator).
/// Example: /// Example: 45.23
/// Constraints: No constraints specified.
func (rcv *ISRCollection_Full) MissionStartPointLat() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(34))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// WGS-84 latitude of the start position, in degrees. -90 to 90 degrees (negative values south of equator).
/// Example: /// Example: 45.23
/// Constraints: No constraints specified.
func (rcv *ISRCollection_Full) MutateMissionStartPointLat(n float64) bool {
	return rcv._tab.MutateFloat64Slot(34, n)
}

/// WGS-84 longitude of the start position, in degrees. -180 to 180 degrees (negative values west of Prime Meridian).
/// Example: /// Example: 80.23
/// Constraints: No constraints specified.
func (rcv *ISRCollection_Full) MissionStartPointLong() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(36))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// WGS-84 longitude of the start position, in degrees. -180 to 180 degrees (negative values west of Prime Meridian).
/// Example: /// Example: 80.23
/// Constraints: No constraints specified.
func (rcv *ISRCollection_Full) MutateMissionStartPointLong(n float64) bool {
	return rcv._tab.MutateFloat64Slot(36, n)
}

/// Mission geographical collection area.
/// Example: /// Example: Example collection area
/// Constraints: Minimum length = 0, Maximum length = 512
func (rcv *ISRCollection_Full) MissionCollectionArea() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(38))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Mission geographical collection area.
/// Example: /// Example: Example collection area
/// Constraints: Minimum length = 0, Maximum length = 512
/// Joint Operations Area.
/// Example: /// Example: Operation area
/// Constraints: Minimum length = 0, Maximum length = 32
func (rcv *ISRCollection_Full) MissionJoa() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(40))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Joint Operations Area.
/// Example: /// Example: Operation area
/// Constraints: Minimum length = 0, Maximum length = 32
/// A synchronization matrix is used to organize the logistics synchronization process during a mission.
/// Example: /// Example: MATRIX
/// Constraints: Minimum length = 0, Maximum length = 32
func (rcv *ISRCollection_Full) MissionSyncMatrixBin() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(42))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// A synchronization matrix is used to organize the logistics synchronization process during a mission.
/// Example: /// Example: MATRIX
/// Constraints: Minimum length = 0, Maximum length = 32
/// Country code of the mission.  A Country may represent countries, multi-national consortiums, and international organizations.
/// Example: /// Example: US
/// Constraints: Minimum length = 0, Maximum length = 4
func (rcv *ISRCollection_Full) MissionCountry() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(44))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Country code of the mission.  A Country may represent countries, multi-national consortiums, and international organizations.
/// Example: /// Example: US
/// Constraints: Minimum length = 0, Maximum length = 4
/// Region of the mission.
/// Example: /// Example: Example Region
/// Constraints: Minimum length = 0, Maximum length = 32
func (rcv *ISRCollection_Full) MissionRegion() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(46))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Region of the mission.
/// Example: /// Example: Example Region
/// Constraints: Minimum length = 0, Maximum length = 32
/// Subregion of the mission.
/// Example: /// Example: Example Subregion
/// Constraints: Minimum length = 0, Maximum length = 32
func (rcv *ISRCollection_Full) MissionSubRegion() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(48))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Subregion of the mission.
/// Example: /// Example: Example Subregion
/// Constraints: Minimum length = 0, Maximum length = 32
/// Mission desired collection requirements.
/// Example: /// Example: No example provided.
/// Constraints: No constraints specified.
func (rcv *ISRCollection_Full) CollectionRequirements(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(50))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *ISRCollection_Full) CollectionRequirementsLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(50))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

/// Mission desired collection requirements.
/// Example: /// Example: No example provided.
/// Constraints: No constraints specified.
/// Object for data dissemination.
/// Example: /// Example: No example provided.
/// Constraints: No constraints specified.
func (rcv *ISRCollection_Full) Transit(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(52))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *ISRCollection_Full) TransitLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(52))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

/// Object for data dissemination.
/// Example: /// Example: No example provided.
/// Constraints: No constraints specified.
/// Individual taskings to complete the mission.
/// Example: /// Example: No example provided.
/// Constraints: No constraints specified.
func (rcv *ISRCollection_Full) Taskings(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(54))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *ISRCollection_Full) TaskingsLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(54))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

/// Individual taskings to complete the mission.
/// Example: /// Example: No example provided.
/// Constraints: No constraints specified.
/// Time the row was created in the database, auto-populated by the system.
/// Example: /// Example: 2021-01-19T01:01:15.001Z
/// Constraints: No constraints specified.
func (rcv *ISRCollection_Full) CreatedAt() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(56))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Time the row was created in the database, auto-populated by the system.
/// Example: /// Example: 2021-01-19T01:01:15.001Z
/// Constraints: No constraints specified.
/// Application user who created the row in the database, auto-populated by the system.
/// Example: /// Example: some.user
/// Constraints: Minimum length = 1, Maximum length = 64
func (rcv *ISRCollection_Full) CreatedBy() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(58))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Application user who created the row in the database, auto-populated by the system.
/// Example: /// Example: some.user
/// Constraints: Minimum length = 1, Maximum length = 64
/// Time the row was updated in the database, auto-populated by the system, example = 2018-01-01T16:00:00.123Z.
/// Example: /// Example: 2018-01-01T16:00:00.123Z
/// Constraints: No constraints specified.
func (rcv *ISRCollection_Full) UpdatedAt() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(60))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Time the row was updated in the database, auto-populated by the system, example = 2018-01-01T16:00:00.123Z.
/// Example: /// Example: 2018-01-01T16:00:00.123Z
/// Constraints: No constraints specified.
/// Application user who updated the row in the database, auto-populated by the system.
/// Example: /// Example: some.user
/// Constraints: Minimum length = 0, Maximum length = 64
func (rcv *ISRCollection_Full) UpdatedBy() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(62))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Application user who updated the row in the database, auto-populated by the system.
/// Example: /// Example: some.user
/// Constraints: Minimum length = 0, Maximum length = 64
/// Source of the data.
/// Example: /// Example: Bluestaq
/// Constraints: Minimum length = 1, Maximum length = 64
func (rcv *ISRCollection_Full) Source() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(64))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Source of the data.
/// Example: /// Example: Bluestaq
/// Constraints: Minimum length = 1, Maximum length = 64
/// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
/// Example: /// Example: THIRD_PARTY_DATASOURCE
/// Constraints: Minimum length = 0, Maximum length = 64
func (rcv *ISRCollection_Full) Origin() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(66))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
/// Example: /// Example: THIRD_PARTY_DATASOURCE
/// Constraints: Minimum length = 0, Maximum length = 64
/// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
/// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
/// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
/// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
/// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
/// Example: /// Example: TEST
/// Constraints: Minimum length = 1, Maximum length = 32
func (rcv *ISRCollection_Full) DataMode() ISRCollection_Full_dataMode_Enum {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(68))
	if o != 0 {
		return ISRCollection_Full_dataMode_Enum(rcv._tab.GetInt8(o + rcv._tab.Pos))
	}
	return 0
}

/// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
/// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
/// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
/// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
/// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
/// Example: /// Example: TEST
/// Constraints: Minimum length = 1, Maximum length = 32
func (rcv *ISRCollection_Full) MutateDataMode(n ISRCollection_Full_dataMode_Enum) bool {
	return rcv._tab.MutateInt8Slot(68, int8(n))
}

/// The originating source network on which this record was created, auto-populated by the system.
/// Example: /// Example: ORIG
/// Constraints: Minimum length = 1, Maximum length = 32
func (rcv *ISRCollection_Full) OrigNetwork() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(70))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The originating source network on which this record was created, auto-populated by the system.
/// Example: /// Example: ORIG
/// Constraints: Minimum length = 1, Maximum length = 32
func ISRCollection_FullStart(builder *flatbuffers.Builder) {
	builder.StartObject(34)
}
func ISRCollection_FullAddId(builder *flatbuffers.Builder, id flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(id), 0)
}
func ISRCollection_FullAddClassificationMarking(builder *flatbuffers.Builder, classificationMarking flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(classificationMarking), 0)
}
func ISRCollection_FullAddIdexVersion(builder *flatbuffers.Builder, idexVersion int32) {
	builder.PrependInt32Slot(2, idexVersion, 0)
}
func ISRCollection_FullAddName(builder *flatbuffers.Builder, name flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(3, flatbuffers.UOffsetT(name), 0)
}
func ISRCollection_FullAddMissionId(builder *flatbuffers.Builder, missionId flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(4, flatbuffers.UOffsetT(missionId), 0)
}
func ISRCollection_FullAddMissionAor(builder *flatbuffers.Builder, missionAor flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(5, flatbuffers.UOffsetT(missionAor), 0)
}
func ISRCollection_FullAddMissionPrimaryIntelDiscipline(builder *flatbuffers.Builder, missionPrimaryIntelDiscipline flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(6, flatbuffers.UOffsetT(missionPrimaryIntelDiscipline), 0)
}
func ISRCollection_FullAddMissionPrimarySubCategory(builder *flatbuffers.Builder, missionPrimarySubCategory flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(7, flatbuffers.UOffsetT(missionPrimarySubCategory), 0)
}
func ISRCollection_FullAddMissionSecondaryIntelDiscipline(builder *flatbuffers.Builder, missionSecondaryIntelDiscipline flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(8, flatbuffers.UOffsetT(missionSecondaryIntelDiscipline), 0)
}
func ISRCollection_FullAddMissionSecondarySubCategory(builder *flatbuffers.Builder, missionSecondarySubCategory flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(9, flatbuffers.UOffsetT(missionSecondarySubCategory), 0)
}
func ISRCollection_FullAddMissionRole(builder *flatbuffers.Builder, missionRole flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(10, flatbuffers.UOffsetT(missionRole), 0)
}
func ISRCollection_FullAddMissionOperation(builder *flatbuffers.Builder, missionOperation flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(11, flatbuffers.UOffsetT(missionOperation), 0)
}
func ISRCollection_FullAddMissionPriority(builder *flatbuffers.Builder, missionPriority int32) {
	builder.PrependInt32Slot(12, missionPriority, 0)
}
func ISRCollection_FullAddMissionSupportedUnit(builder *flatbuffers.Builder, missionSupportedUnit flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(13, flatbuffers.UOffsetT(missionSupportedUnit), 0)
}
func ISRCollection_FullAddMissionEmphasis(builder *flatbuffers.Builder, missionEmphasis flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(14, flatbuffers.UOffsetT(missionEmphasis), 0)
}
func ISRCollection_FullAddMissionStartPointLat(builder *flatbuffers.Builder, missionStartPointLat float64) {
	builder.PrependFloat64Slot(15, missionStartPointLat, 0.0)
}
func ISRCollection_FullAddMissionStartPointLong(builder *flatbuffers.Builder, missionStartPointLong float64) {
	builder.PrependFloat64Slot(16, missionStartPointLong, 0.0)
}
func ISRCollection_FullAddMissionCollectionArea(builder *flatbuffers.Builder, missionCollectionArea flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(17, flatbuffers.UOffsetT(missionCollectionArea), 0)
}
func ISRCollection_FullAddMissionJoa(builder *flatbuffers.Builder, missionJoa flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(18, flatbuffers.UOffsetT(missionJoa), 0)
}
func ISRCollection_FullAddMissionSyncMatrixBin(builder *flatbuffers.Builder, missionSyncMatrixBin flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(19, flatbuffers.UOffsetT(missionSyncMatrixBin), 0)
}
func ISRCollection_FullAddMissionCountry(builder *flatbuffers.Builder, missionCountry flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(20, flatbuffers.UOffsetT(missionCountry), 0)
}
func ISRCollection_FullAddMissionRegion(builder *flatbuffers.Builder, missionRegion flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(21, flatbuffers.UOffsetT(missionRegion), 0)
}
func ISRCollection_FullAddMissionSubRegion(builder *flatbuffers.Builder, missionSubRegion flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(22, flatbuffers.UOffsetT(missionSubRegion), 0)
}
func ISRCollection_FullAddCollectionRequirements(builder *flatbuffers.Builder, collectionRequirements flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(23, flatbuffers.UOffsetT(collectionRequirements), 0)
}
func ISRCollection_FullStartCollectionRequirementsVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func ISRCollection_FullAddTransit(builder *flatbuffers.Builder, transit flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(24, flatbuffers.UOffsetT(transit), 0)
}
func ISRCollection_FullStartTransitVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func ISRCollection_FullAddTaskings(builder *flatbuffers.Builder, taskings flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(25, flatbuffers.UOffsetT(taskings), 0)
}
func ISRCollection_FullStartTaskingsVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func ISRCollection_FullAddCreatedAt(builder *flatbuffers.Builder, createdAt flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(26, flatbuffers.UOffsetT(createdAt), 0)
}
func ISRCollection_FullAddCreatedBy(builder *flatbuffers.Builder, createdBy flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(27, flatbuffers.UOffsetT(createdBy), 0)
}
func ISRCollection_FullAddUpdatedAt(builder *flatbuffers.Builder, updatedAt flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(28, flatbuffers.UOffsetT(updatedAt), 0)
}
func ISRCollection_FullAddUpdatedBy(builder *flatbuffers.Builder, updatedBy flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(29, flatbuffers.UOffsetT(updatedBy), 0)
}
func ISRCollection_FullAddSource(builder *flatbuffers.Builder, source flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(30, flatbuffers.UOffsetT(source), 0)
}
func ISRCollection_FullAddOrigin(builder *flatbuffers.Builder, origin flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(31, flatbuffers.UOffsetT(origin), 0)
}
func ISRCollection_FullAddDataMode(builder *flatbuffers.Builder, dataMode ISRCollection_Full_dataMode_Enum) {
	builder.PrependInt8Slot(32, int8(dataMode), 0)
}
func ISRCollection_FullAddOrigNetwork(builder *flatbuffers.Builder, origNetwork flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(33, flatbuffers.UOffsetT(origNetwork), 0)
}
func ISRCollection_FullEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
