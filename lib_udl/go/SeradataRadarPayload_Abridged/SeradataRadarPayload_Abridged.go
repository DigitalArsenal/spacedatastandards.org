// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package SeradataRadarPayload_Abridged

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

/// /// Details for an radar payload from  Seradata.
type SeradataRadarPayload_Abridged struct {
	_tab flatbuffers.Table
}

const SeradataRadarPayload_AbridgedIdentifier = "SERA"

func GetRootAsSeradataRadarPayload_Abridged(buf []byte, offset flatbuffers.UOffsetT) *SeradataRadarPayload_Abridged {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &SeradataRadarPayload_Abridged{}
	x.Init(buf, n+offset)
	return x
}

func FinishSeradataRadarPayload_AbridgedBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	identifierBytes := []byte(SeradataRadarPayload_AbridgedIdentifier)
	builder.FinishWithFileIdentifier(offset, identifierBytes)
}

func SeradataRadarPayload_AbridgedBufferHasIdentifier(buf []byte) bool {
	return flatbuffers.BufferHasIdentifier(buf, SeradataRadarPayload_AbridgedIdentifier)
}

func GetSizePrefixedRootAsSeradataRadarPayload_Abridged(buf []byte, offset flatbuffers.UOffsetT) *SeradataRadarPayload_Abridged {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &SeradataRadarPayload_Abridged{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedSeradataRadarPayload_AbridgedBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	identifierBytes := []byte(SeradataRadarPayload_AbridgedIdentifier)
	builder.FinishSizePrefixedWithFileIdentifier(offset, identifierBytes)
}

func SizePrefixedSeradataRadarPayload_AbridgedBufferHasIdentifier(buf []byte) bool {
	return flatbuffers.SizePrefixedBufferHasIdentifier(buf, SeradataRadarPayload_AbridgedIdentifier)
}

func (rcv *SeradataRadarPayload_Abridged) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *SeradataRadarPayload_Abridged) Table() flatbuffers.Table {
	return rcv._tab
}

/// Unique identifier of the record, auto-generated by the system.
/// Example: /// Example: SERADATARADARPAYLOAD-ID
/// Constraints: Minimum length = 1, Maximum length = 36
func (rcv *SeradataRadarPayload_Abridged) Id() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Unique identifier of the record, auto-generated by the system.
/// Example: /// Example: SERADATARADARPAYLOAD-ID
/// Constraints: Minimum length = 1, Maximum length = 36
/// Classification marking of the data in IC/CAPCO Portion-marked format.
/// Example: /// Example: U
/// Constraints: Minimum length = 1, Maximum length = 128
func (rcv *SeradataRadarPayload_Abridged) ClassificationMarking() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Classification marking of the data in IC/CAPCO Portion-marked format.
/// Example: /// Example: U
/// Constraints: Minimum length = 1, Maximum length = 128
/// Seradata ID of the spacecraft (SeradataSpacecraftDetails ID).
/// Example: /// Example: 12345
/// Constraints: Minimum length = 1, Maximum length = 36
func (rcv *SeradataRadarPayload_Abridged) SpacecraftId() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Seradata ID of the spacecraft (SeradataSpacecraftDetails ID).
/// Example: /// Example: 12345
/// Constraints: Minimum length = 1, Maximum length = 36
/// UUID of the Sensor record.
/// Example: /// Example: 3c1ee9a0-90ad-1d75-c47b-2414e0a77e53
/// Constraints: Minimum length = 0, Maximum length = 36
func (rcv *SeradataRadarPayload_Abridged) IdSensor() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// UUID of the Sensor record.
/// Example: /// Example: 3c1ee9a0-90ad-1d75-c47b-2414e0a77e53
/// Constraints: Minimum length = 0, Maximum length = 36
/// Hosted for company/Organization Id.
/// Example: /// Example: hostedForCompanyOrgId
/// Constraints: Minimum length = 0, Maximum length = 36
func (rcv *SeradataRadarPayload_Abridged) HostedForCompanyOrgId() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Hosted for company/Organization Id.
/// Example: /// Example: hostedForCompanyOrgId
/// Constraints: Minimum length = 0, Maximum length = 36
/// Manufacturer Organization Id.
/// Example: /// Example: manufacturerOrgId
/// Constraints: Minimum length = 0, Maximum length = 36
func (rcv *SeradataRadarPayload_Abridged) ManufacturerOrgId() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Manufacturer Organization Id.
/// Example: /// Example: manufacturerOrgId
/// Constraints: Minimum length = 0, Maximum length = 36
/// Radar category, e.g. SAR, Surface Search, etc.
/// Example: /// Example: SAR
/// Constraints: Minimum length = 0, Maximum length = 20
func (rcv *SeradataRadarPayload_Abridged) Category() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Radar category, e.g. SAR, Surface Search, etc.
/// Example: /// Example: SAR
/// Constraints: Minimum length = 0, Maximum length = 20
/// Sensor name from Seradata, e.g. ALT (Radar Altimeter), COSI (Corea SAR Instrument), etc.
/// Example: /// Example: ALT
/// Constraints: Minimum length = 0, Maximum length = 50
func (rcv *SeradataRadarPayload_Abridged) Name() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(18))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Sensor name from Seradata, e.g. ALT (Radar Altimeter), COSI (Corea SAR Instrument), etc.
/// Example: /// Example: ALT
/// Constraints: Minimum length = 0, Maximum length = 50
/// Name of the band of this RF range (e.g. X,K,Ku,Ka,L,S,C,UHF,VHF,EHF,SHF,UNK,VLF,HF,E,Q,V,W). See RFBandType for more details and descriptions of each band name.
/// Example: /// Example: X
/// Constraints: Minimum length = 0, Maximum length = 10
func (rcv *SeradataRadarPayload_Abridged) FrequencyBand() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(20))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Name of the band of this RF range (e.g. X,K,Ku,Ka,L,S,C,UHF,VHF,EHF,SHF,UNK,VLF,HF,E,Q,V,W). See RFBandType for more details and descriptions of each band name.
/// Example: /// Example: X
/// Constraints: Minimum length = 0, Maximum length = 10
/// Frequency in giga hertz.
/// Example: /// Example: 1.23
/// Constraints: No constraints specified.
func (rcv *SeradataRadarPayload_Abridged) Frequency() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(22))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Frequency in giga hertz.
/// Example: /// Example: 1.23
/// Constraints: No constraints specified.
func (rcv *SeradataRadarPayload_Abridged) MutateFrequency(n float64) bool {
	return rcv._tab.MutateFloat64Slot(22, n)
}

/// Wave length in meters.
/// Example: /// Example: 1.23
/// Constraints: No constraints specified.
func (rcv *SeradataRadarPayload_Abridged) WaveLength() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(24))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Wave length in meters.
/// Example: /// Example: 1.23
/// Constraints: No constraints specified.
func (rcv *SeradataRadarPayload_Abridged) MutateWaveLength(n float64) bool {
	return rcv._tab.MutateFloat64Slot(24, n)
}

/// Best resolution in meters.
/// Example: /// Example: 1.23
/// Constraints: No constraints specified.
func (rcv *SeradataRadarPayload_Abridged) BestResolution() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(26))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Best resolution in meters.
/// Example: /// Example: 1.23
/// Constraints: No constraints specified.
func (rcv *SeradataRadarPayload_Abridged) MutateBestResolution(n float64) bool {
	return rcv._tab.MutateFloat64Slot(26, n)
}

/// Swath width in kilometers.
/// Example: /// Example: 1.23
/// Constraints: No constraints specified.
func (rcv *SeradataRadarPayload_Abridged) SwathWidth() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(28))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Swath width in kilometers.
/// Example: /// Example: 1.23
/// Constraints: No constraints specified.
func (rcv *SeradataRadarPayload_Abridged) MutateSwathWidth(n float64) bool {
	return rcv._tab.MutateFloat64Slot(28, n)
}

/// Recorder size, e.g. 256.
/// Example: /// Example: 256
/// Constraints: Minimum length = 0, Maximum length = 50
func (rcv *SeradataRadarPayload_Abridged) RecorderSize() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(30))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Recorder size, e.g. 256.
/// Example: /// Example: 256
/// Constraints: Minimum length = 0, Maximum length = 50
/// Field of view of this radar in kilometers.
/// Example: /// Example: 1.23
/// Constraints: No constraints specified.
func (rcv *SeradataRadarPayload_Abridged) FieldOfView() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(32))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Field of view of this radar in kilometers.
/// Example: /// Example: 1.23
/// Constraints: No constraints specified.
func (rcv *SeradataRadarPayload_Abridged) MutateFieldOfView(n float64) bool {
	return rcv._tab.MutateFloat64Slot(32, n)
}

/// Field of regard of this radar in degrees.
/// Example: /// Example: 1.23
/// Constraints: No constraints specified.
func (rcv *SeradataRadarPayload_Abridged) FieldOfRegard() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(34))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Field of regard of this radar in degrees.
/// Example: /// Example: 1.23
/// Constraints: No constraints specified.
func (rcv *SeradataRadarPayload_Abridged) MutateFieldOfRegard(n float64) bool {
	return rcv._tab.MutateFloat64Slot(34, n)
}

/// Point method for this radar, e.g. Spacecraft.
/// Example: /// Example: Spacecraft
/// Constraints: Minimum length = 0, Maximum length = 50
func (rcv *SeradataRadarPayload_Abridged) PointingMethod() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(36))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Point method for this radar, e.g. Spacecraft.
/// Example: /// Example: Spacecraft
/// Constraints: Minimum length = 0, Maximum length = 50
/// Ground Station info for this payload.
/// Example: /// Example: groundStations
/// Constraints: Minimum length = 0, Maximum length = 128
func (rcv *SeradataRadarPayload_Abridged) GroundStations() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(38))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Ground Station info for this payload.
/// Example: /// Example: groundStations
/// Constraints: Minimum length = 0, Maximum length = 128
/// Ground Station Locations for this payload.
/// Example: /// Example: 51,42N-44,35E
/// Constraints: Minimum length = 0, Maximum length = 64
func (rcv *SeradataRadarPayload_Abridged) GroundStationLocations() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(40))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Ground Station Locations for this payload.
/// Example: /// Example: 51,42N-44,35E
/// Constraints: Minimum length = 0, Maximum length = 64
/// Transmit polarization, e.g. Lin Dual, Lin vert, etc.
/// Example: /// Example: Lin Dual
/// Constraints: Minimum length = 0, Maximum length = 50
func (rcv *SeradataRadarPayload_Abridged) TransmitPolarization() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(42))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Transmit polarization, e.g. Lin Dual, Lin vert, etc.
/// Example: /// Example: Lin Dual
/// Constraints: Minimum length = 0, Maximum length = 50
/// Receive polarization, e.g. Lin Dual, Lin vert, etc.
/// Example: /// Example: Lin Dual
/// Constraints: Minimum length = 0, Maximum length = 50
func (rcv *SeradataRadarPayload_Abridged) ReceivePolarization() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(44))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Receive polarization, e.g. Lin Dual, Lin vert, etc.
/// Example: /// Example: Lin Dual
/// Constraints: Minimum length = 0, Maximum length = 50
/// Duty cycle.
/// Example: /// Example: dutyCycle
/// Constraints: Minimum length = 0, Maximum length = 50
func (rcv *SeradataRadarPayload_Abridged) DutyCycle() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(46))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Duty cycle.
/// Example: /// Example: dutyCycle
/// Constraints: Minimum length = 0, Maximum length = 50
/// Partner seradata-spacecraft.
/// Example: /// Example: partnerSpacecraft
/// Constraints: Minimum length = 0, Maximum length = 36
func (rcv *SeradataRadarPayload_Abridged) PartnerSpacecraft() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(48))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Partner seradata-spacecraft.
/// Example: /// Example: partnerSpacecraft
/// Constraints: Minimum length = 0, Maximum length = 36
/// Constellation interferometric capability.
/// Example: /// Example: constellationInterferometricCapability
/// Constraints: Minimum length = 0, Maximum length = 50
func (rcv *SeradataRadarPayload_Abridged) ConstellationInterferometricCapability() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(50))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Constellation interferometric capability.
/// Example: /// Example: constellationInterferometricCapability
/// Constraints: Minimum length = 0, Maximum length = 50
/// Payload notes.
/// Example: /// Example: Sample Notes
/// Constraints: Minimum length = 0, Maximum length = 2147483647
func (rcv *SeradataRadarPayload_Abridged) Notes() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(52))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Payload notes.
/// Example: /// Example: Sample Notes
/// Constraints: Minimum length = 0, Maximum length = 2147483647
/// Radar bandwidth in mega hertz.
/// Example: /// Example: 1.23
/// Constraints: No constraints specified.
func (rcv *SeradataRadarPayload_Abridged) Bandwidth() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(54))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Radar bandwidth in mega hertz.
/// Example: /// Example: 1.23
/// Constraints: No constraints specified.
func (rcv *SeradataRadarPayload_Abridged) MutateBandwidth(n float64) bool {
	return rcv._tab.MutateFloat64Slot(54, n)
}

/// Time the row was created in the database, auto-populated by the system.
/// Example: /// Example: 2018-01-01T16:00:00.123Z
/// Constraints: No constraints specified.
func (rcv *SeradataRadarPayload_Abridged) CreatedAt() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(56))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Time the row was created in the database, auto-populated by the system.
/// Example: /// Example: 2018-01-01T16:00:00.123Z
/// Constraints: No constraints specified.
/// Application user who created the row in the database, auto-populated by the system.
/// Example: /// Example: some.user
/// Constraints: Minimum length = 1, Maximum length = 64
func (rcv *SeradataRadarPayload_Abridged) CreatedBy() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(58))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Application user who created the row in the database, auto-populated by the system.
/// Example: /// Example: some.user
/// Constraints: Minimum length = 1, Maximum length = 64
/// Source of the data.
/// Example: /// Example: Bluestaq
/// Constraints: Minimum length = 1, Maximum length = 64
func (rcv *SeradataRadarPayload_Abridged) Source() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(60))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Source of the data.
/// Example: /// Example: Bluestaq
/// Constraints: Minimum length = 1, Maximum length = 64
/// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
/// Example: /// Example: THIRD_PARTY_DATASOURCE
/// Constraints: Minimum length = 0, Maximum length = 64
func (rcv *SeradataRadarPayload_Abridged) Origin() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(62))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
/// Example: /// Example: THIRD_PARTY_DATASOURCE
/// Constraints: Minimum length = 0, Maximum length = 64
/// The originating source network on which this record was created, auto-populated by the system.
/// Example: /// Example: ORIG
/// Constraints: Minimum length = 1, Maximum length = 32
func (rcv *SeradataRadarPayload_Abridged) OrigNetwork() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(64))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The originating source network on which this record was created, auto-populated by the system.
/// Example: /// Example: ORIG
/// Constraints: Minimum length = 1, Maximum length = 32
/// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
/// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
/// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
/// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
/// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
/// Example: /// Example: TEST
/// Constraints: Minimum length = 1, Maximum length = 32
func (rcv *SeradataRadarPayload_Abridged) DataMode() SeradataRadarPayload_Abridged_dataMode_Enum {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(66))
	if o != 0 {
		return SeradataRadarPayload_Abridged_dataMode_Enum(rcv._tab.GetInt8(o + rcv._tab.Pos))
	}
	return 0
}

/// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
/// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
/// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
/// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
/// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
/// Example: /// Example: TEST
/// Constraints: Minimum length = 1, Maximum length = 32
func (rcv *SeradataRadarPayload_Abridged) MutateDataMode(n SeradataRadarPayload_Abridged_dataMode_Enum) bool {
	return rcv._tab.MutateInt8Slot(66, int8(n))
}

func SeradataRadarPayload_AbridgedStart(builder *flatbuffers.Builder) {
	builder.StartObject(32)
}
func SeradataRadarPayload_AbridgedAddId(builder *flatbuffers.Builder, id flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(id), 0)
}
func SeradataRadarPayload_AbridgedAddClassificationMarking(builder *flatbuffers.Builder, classificationMarking flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(classificationMarking), 0)
}
func SeradataRadarPayload_AbridgedAddSpacecraftId(builder *flatbuffers.Builder, spacecraftId flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(spacecraftId), 0)
}
func SeradataRadarPayload_AbridgedAddIdSensor(builder *flatbuffers.Builder, idSensor flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(3, flatbuffers.UOffsetT(idSensor), 0)
}
func SeradataRadarPayload_AbridgedAddHostedForCompanyOrgId(builder *flatbuffers.Builder, hostedForCompanyOrgId flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(4, flatbuffers.UOffsetT(hostedForCompanyOrgId), 0)
}
func SeradataRadarPayload_AbridgedAddManufacturerOrgId(builder *flatbuffers.Builder, manufacturerOrgId flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(5, flatbuffers.UOffsetT(manufacturerOrgId), 0)
}
func SeradataRadarPayload_AbridgedAddCategory(builder *flatbuffers.Builder, category flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(6, flatbuffers.UOffsetT(category), 0)
}
func SeradataRadarPayload_AbridgedAddName(builder *flatbuffers.Builder, name flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(7, flatbuffers.UOffsetT(name), 0)
}
func SeradataRadarPayload_AbridgedAddFrequencyBand(builder *flatbuffers.Builder, frequencyBand flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(8, flatbuffers.UOffsetT(frequencyBand), 0)
}
func SeradataRadarPayload_AbridgedAddFrequency(builder *flatbuffers.Builder, frequency float64) {
	builder.PrependFloat64Slot(9, frequency, 0.0)
}
func SeradataRadarPayload_AbridgedAddWaveLength(builder *flatbuffers.Builder, waveLength float64) {
	builder.PrependFloat64Slot(10, waveLength, 0.0)
}
func SeradataRadarPayload_AbridgedAddBestResolution(builder *flatbuffers.Builder, bestResolution float64) {
	builder.PrependFloat64Slot(11, bestResolution, 0.0)
}
func SeradataRadarPayload_AbridgedAddSwathWidth(builder *flatbuffers.Builder, swathWidth float64) {
	builder.PrependFloat64Slot(12, swathWidth, 0.0)
}
func SeradataRadarPayload_AbridgedAddRecorderSize(builder *flatbuffers.Builder, recorderSize flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(13, flatbuffers.UOffsetT(recorderSize), 0)
}
func SeradataRadarPayload_AbridgedAddFieldOfView(builder *flatbuffers.Builder, fieldOfView float64) {
	builder.PrependFloat64Slot(14, fieldOfView, 0.0)
}
func SeradataRadarPayload_AbridgedAddFieldOfRegard(builder *flatbuffers.Builder, fieldOfRegard float64) {
	builder.PrependFloat64Slot(15, fieldOfRegard, 0.0)
}
func SeradataRadarPayload_AbridgedAddPointingMethod(builder *flatbuffers.Builder, pointingMethod flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(16, flatbuffers.UOffsetT(pointingMethod), 0)
}
func SeradataRadarPayload_AbridgedAddGroundStations(builder *flatbuffers.Builder, groundStations flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(17, flatbuffers.UOffsetT(groundStations), 0)
}
func SeradataRadarPayload_AbridgedAddGroundStationLocations(builder *flatbuffers.Builder, groundStationLocations flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(18, flatbuffers.UOffsetT(groundStationLocations), 0)
}
func SeradataRadarPayload_AbridgedAddTransmitPolarization(builder *flatbuffers.Builder, transmitPolarization flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(19, flatbuffers.UOffsetT(transmitPolarization), 0)
}
func SeradataRadarPayload_AbridgedAddReceivePolarization(builder *flatbuffers.Builder, receivePolarization flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(20, flatbuffers.UOffsetT(receivePolarization), 0)
}
func SeradataRadarPayload_AbridgedAddDutyCycle(builder *flatbuffers.Builder, dutyCycle flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(21, flatbuffers.UOffsetT(dutyCycle), 0)
}
func SeradataRadarPayload_AbridgedAddPartnerSpacecraft(builder *flatbuffers.Builder, partnerSpacecraft flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(22, flatbuffers.UOffsetT(partnerSpacecraft), 0)
}
func SeradataRadarPayload_AbridgedAddConstellationInterferometricCapability(builder *flatbuffers.Builder, constellationInterferometricCapability flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(23, flatbuffers.UOffsetT(constellationInterferometricCapability), 0)
}
func SeradataRadarPayload_AbridgedAddNotes(builder *flatbuffers.Builder, notes flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(24, flatbuffers.UOffsetT(notes), 0)
}
func SeradataRadarPayload_AbridgedAddBandwidth(builder *flatbuffers.Builder, bandwidth float64) {
	builder.PrependFloat64Slot(25, bandwidth, 0.0)
}
func SeradataRadarPayload_AbridgedAddCreatedAt(builder *flatbuffers.Builder, createdAt flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(26, flatbuffers.UOffsetT(createdAt), 0)
}
func SeradataRadarPayload_AbridgedAddCreatedBy(builder *flatbuffers.Builder, createdBy flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(27, flatbuffers.UOffsetT(createdBy), 0)
}
func SeradataRadarPayload_AbridgedAddSource(builder *flatbuffers.Builder, source flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(28, flatbuffers.UOffsetT(source), 0)
}
func SeradataRadarPayload_AbridgedAddOrigin(builder *flatbuffers.Builder, origin flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(29, flatbuffers.UOffsetT(origin), 0)
}
func SeradataRadarPayload_AbridgedAddOrigNetwork(builder *flatbuffers.Builder, origNetwork flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(30, flatbuffers.UOffsetT(origNetwork), 0)
}
func SeradataRadarPayload_AbridgedAddDataMode(builder *flatbuffers.Builder, dataMode SeradataRadarPayload_Abridged_dataMode_Enum) {
	builder.PrependInt8Slot(31, int8(dataMode), 0)
}
func SeradataRadarPayload_AbridgedEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
