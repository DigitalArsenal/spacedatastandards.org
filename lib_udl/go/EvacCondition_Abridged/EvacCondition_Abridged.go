// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package EvacCondition_Abridged

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

/// /// The group path from transmitter to receiver.
type EvacCondition_Abridged struct {
	_tab flatbuffers.Table
}

const EvacCondition_AbridgedIdentifier = "EVAC"

func GetRootAsEvacCondition_Abridged(buf []byte, offset flatbuffers.UOffsetT) *EvacCondition_Abridged {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &EvacCondition_Abridged{}
	x.Init(buf, n+offset)
	return x
}

func FinishEvacCondition_AbridgedBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	identifierBytes := []byte(EvacCondition_AbridgedIdentifier)
	builder.FinishWithFileIdentifier(offset, identifierBytes)
}

func EvacCondition_AbridgedBufferHasIdentifier(buf []byte) bool {
	return flatbuffers.BufferHasIdentifier(buf, EvacCondition_AbridgedIdentifier)
}

func GetSizePrefixedRootAsEvacCondition_Abridged(buf []byte, offset flatbuffers.UOffsetT) *EvacCondition_Abridged {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &EvacCondition_Abridged{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedEvacCondition_AbridgedBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	identifierBytes := []byte(EvacCondition_AbridgedIdentifier)
	builder.FinishSizePrefixedWithFileIdentifier(offset, identifierBytes)
}

func SizePrefixedEvacCondition_AbridgedBufferHasIdentifier(buf []byte) bool {
	return flatbuffers.SizePrefixedBufferHasIdentifier(buf, EvacCondition_AbridgedIdentifier)
}

func (rcv *EvacCondition_Abridged) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *EvacCondition_Abridged) Table() flatbuffers.Table {
	return rcv._tab
}

/// Health condition assessment.  Intended as, but not constrained to, K07.1 Condition Type Enumeration (e.g. ACTIVITY HIGH, ACTIVITY LOW, ACTIVITY MEDIUM, ACTIVITY NONE, AVPU ALERT, AVPU ALTERED MENTAL STATE, AVPU PAIN, AVPU UNRESPONSIVE, etc.).
/// Example: /// Example: ACTIVITY LOW
/// Constraints: Minimum length = 0, Maximum length = 64
func (rcv *EvacCondition_Abridged) Type() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Health condition assessment.  Intended as, but not constrained to, K07.1 Condition Type Enumeration (e.g. ACTIVITY HIGH, ACTIVITY LOW, ACTIVITY MEDIUM, ACTIVITY NONE, AVPU ALERT, AVPU ALTERED MENTAL STATE, AVPU PAIN, AVPU UNRESPONSIVE, etc.).
/// Example: /// Example: ACTIVITY LOW
/// Constraints: Minimum length = 0, Maximum length = 64
/// Body part location or body part referenced in condition.  Intended as, but not constrained to, K07.1 Body Location Enumeration (e.g. ANKLE LEFT BACK, ANKLE LEFT FRONT, ANKLE RIGHT BACK, ANKLE RIGHT FRONT, ARM LEFT BACK, ARM LEFT ELBOW BACK, ARM LEFT ELBOW FRONT, ARM LEFT FRONT, ARM LEFT LOWER BACK, etc.).
/// Example: /// Example: ANKLE LEFT FRONT
/// Constraints: Minimum length = 0, Maximum length = 32
func (rcv *EvacCondition_Abridged) BodyPart() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Body part location or body part referenced in condition.  Intended as, but not constrained to, K07.1 Body Location Enumeration (e.g. ANKLE LEFT BACK, ANKLE LEFT FRONT, ANKLE RIGHT BACK, ANKLE RIGHT FRONT, ARM LEFT BACK, ARM LEFT ELBOW BACK, ARM LEFT ELBOW FRONT, ARM LEFT FRONT, ARM LEFT LOWER BACK, etc.).
/// Example: /// Example: ANKLE LEFT FRONT
/// Constraints: Minimum length = 0, Maximum length = 32
/// Datetime of the condition diagnosis in ISO 8601 UTC datetime format.
/// Example: /// Example: 2021-10-15T16:00:00.123Z
/// Constraints: No constraints specified.
func (rcv *EvacCondition_Abridged) Time() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Datetime of the condition diagnosis in ISO 8601 UTC datetime format.
/// Example: /// Example: 2021-10-15T16:00:00.123Z
/// Constraints: No constraints specified.
/// Additional comments on the patient's condition.
/// Example: /// Example: Comments on the patient's condition.
/// Constraints: Minimum length = 0, Maximum length = 1024
func (rcv *EvacCondition_Abridged) Comments() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Additional comments on the patient's condition.
/// Example: /// Example: Comments on the patient's condition.
/// Constraints: Minimum length = 0, Maximum length = 1024
func EvacCondition_AbridgedStart(builder *flatbuffers.Builder) {
	builder.StartObject(4)
}
func EvacCondition_AbridgedAddType(builder *flatbuffers.Builder, type_ flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(type_), 0)
}
func EvacCondition_AbridgedAddBodyPart(builder *flatbuffers.Builder, bodyPart flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(bodyPart), 0)
}
func EvacCondition_AbridgedAddTime(builder *flatbuffers.Builder, time flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(time), 0)
}
func EvacCondition_AbridgedAddComments(builder *flatbuffers.Builder, comments flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(3, flatbuffers.UOffsetT(comments), 0)
}
func EvacCondition_AbridgedEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
