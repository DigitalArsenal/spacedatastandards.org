// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package AirfieldSlotConsumption_Ingest

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

/// /// Airfield slot use data. Contains the dynamic data associated with the status and use of specific airfield slots.
type AirfieldSlotConsumption_Ingest struct {
	_tab flatbuffers.Table
}

const AirfieldSlotConsumption_IngestIdentifier = "AIRF"

func GetRootAsAirfieldSlotConsumption_Ingest(buf []byte, offset flatbuffers.UOffsetT) *AirfieldSlotConsumption_Ingest {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &AirfieldSlotConsumption_Ingest{}
	x.Init(buf, n+offset)
	return x
}

func FinishAirfieldSlotConsumption_IngestBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	identifierBytes := []byte(AirfieldSlotConsumption_IngestIdentifier)
	builder.FinishWithFileIdentifier(offset, identifierBytes)
}

func AirfieldSlotConsumption_IngestBufferHasIdentifier(buf []byte) bool {
	return flatbuffers.BufferHasIdentifier(buf, AirfieldSlotConsumption_IngestIdentifier)
}

func GetSizePrefixedRootAsAirfieldSlotConsumption_Ingest(buf []byte, offset flatbuffers.UOffsetT) *AirfieldSlotConsumption_Ingest {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &AirfieldSlotConsumption_Ingest{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedAirfieldSlotConsumption_IngestBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	identifierBytes := []byte(AirfieldSlotConsumption_IngestIdentifier)
	builder.FinishSizePrefixedWithFileIdentifier(offset, identifierBytes)
}

func SizePrefixedAirfieldSlotConsumption_IngestBufferHasIdentifier(buf []byte) bool {
	return flatbuffers.SizePrefixedBufferHasIdentifier(buf, AirfieldSlotConsumption_IngestIdentifier)
}

func (rcv *AirfieldSlotConsumption_Ingest) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *AirfieldSlotConsumption_Ingest) Table() flatbuffers.Table {
	return rcv._tab
}

/// Unique identifier of the record, auto-generated by the system.
/// Example: /// Example: be831d39-1822-da9f-7ace-6cc5643397dc
/// Constraints: Minimum length = 1, Maximum length = 36
func (rcv *AirfieldSlotConsumption_Ingest) Id() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Unique identifier of the record, auto-generated by the system.
/// Example: /// Example: be831d39-1822-da9f-7ace-6cc5643397dc
/// Constraints: Minimum length = 1, Maximum length = 36
/// Classification marking of the data in IC/CAPCO Portion-marked format.
/// Example: /// Example: U
/// Constraints: Minimum length = 1, Maximum length = 128
func (rcv *AirfieldSlotConsumption_Ingest) ClassificationMarking() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Classification marking of the data in IC/CAPCO Portion-marked format.
/// Example: /// Example: U
/// Constraints: Minimum length = 1, Maximum length = 128
/// Unique identifier of the airfield slot for which this slot consumption record is referencing.
/// Example: /// Example: 3136498f-2969-3535-1432-e984b2e2e686
/// Constraints: Minimum length = 1, Maximum length = 36
func (rcv *AirfieldSlotConsumption_Ingest) IdAirfieldSlot() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Unique identifier of the airfield slot for which this slot consumption record is referencing.
/// Example: /// Example: 3136498f-2969-3535-1432-e984b2e2e686
/// Constraints: Minimum length = 1, Maximum length = 36
/// Current status of this slot (REQUESTED / APPROVED / DENIED / BLOCKED / OTHER).
/// Example: /// Example: APPROVED
/// Constraints: Minimum length = 0, Maximum length = 9
func (rcv *AirfieldSlotConsumption_Ingest) Status() AirfieldSlotConsumption_Ingest_status_Enum {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return AirfieldSlotConsumption_Ingest_status_Enum(rcv._tab.GetInt8(o + rcv._tab.Pos))
	}
	return 0
}

/// Current status of this slot (REQUESTED / APPROVED / DENIED / BLOCKED / OTHER).
/// Example: /// Example: APPROVED
/// Constraints: Minimum length = 0, Maximum length = 9
func (rcv *AirfieldSlotConsumption_Ingest) MutateStatus(n AirfieldSlotConsumption_Ingest_status_Enum) bool {
	return rcv._tab.MutateInt8Slot(10, int8(n))
}

/// Flag indicating if the slot is occupied.
/// Example: /// Example: True
/// Constraints: No constraints specified.
func (rcv *AirfieldSlotConsumption_Ingest) Occupied() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

/// Flag indicating if the slot is occupied.
/// Example: /// Example: True
/// Constraints: No constraints specified.
func (rcv *AirfieldSlotConsumption_Ingest) MutateOccupied(n bool) bool {
	return rcv._tab.MutateBoolSlot(12, n)
}

/// Identifying name of the aircraft using this slot. Names are often Prior Permission Required (PPR) numbers or other similar human-readable identifiers.
/// Example: /// Example: APRON1-230401001
/// Constraints: Minimum length = 0, Maximum length = 64
func (rcv *AirfieldSlotConsumption_Ingest) Consumer() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Identifying name of the aircraft using this slot. Names are often Prior Permission Required (PPR) numbers or other similar human-readable identifiers.
/// Example: /// Example: APRON1-230401001
/// Constraints: Minimum length = 0, Maximum length = 64
/// The aircraft Model Design Series designation of the aircraft occupying this slot.
/// Example: /// Example: C017A
/// Constraints: Minimum length = 0, Maximum length = 36
func (rcv *AirfieldSlotConsumption_Ingest) OccAircraftMds() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The aircraft Model Design Series designation of the aircraft occupying this slot.
/// Example: /// Example: C017A
/// Constraints: Minimum length = 0, Maximum length = 36
/// The tail number of the aircraft occupying this slot.
/// Example: /// Example: N702JG
/// Constraints: Minimum length = 0, Maximum length = 16
func (rcv *AirfieldSlotConsumption_Ingest) OccTailNumber() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(18))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The tail number of the aircraft occupying this slot.
/// Example: /// Example: N702JG
/// Constraints: Minimum length = 0, Maximum length = 16
/// Array of call signs of the aircraft using this slot.
/// Example: /// Example: ['RCH123', 'ABC123', 'LLS442']
/// Constraints: No constraints specified.
func (rcv *AirfieldSlotConsumption_Ingest) CallSigns(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(20))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *AirfieldSlotConsumption_Ingest) CallSignsLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(20))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

/// Array of call signs of the aircraft using this slot.
/// Example: /// Example: ['RCH123', 'ABC123', 'LLS442']
/// Constraints: No constraints specified.
/// Mission identifier using this slot according to Mobility Air Forces (MAF) Encode/Decode procedures.
/// Example: /// Example: AJM123456123
/// Constraints: Minimum length = 0, Maximum length = 36
func (rcv *AirfieldSlotConsumption_Ingest) MissionId() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(22))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Mission identifier using this slot according to Mobility Air Forces (MAF) Encode/Decode procedures.
/// Example: /// Example: AJM123456123
/// Constraints: Minimum length = 0, Maximum length = 36
/// Number of aircraft using this slot for this time.
/// Example: /// Example: 1
/// Constraints: No constraints specified.
func (rcv *AirfieldSlotConsumption_Ingest) NumAircraft() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(24))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

/// Number of aircraft using this slot for this time.
/// Example: /// Example: 1
/// Constraints: No constraints specified.
func (rcv *AirfieldSlotConsumption_Ingest) MutateNumAircraft(n int32) bool {
	return rcv._tab.MutateInt32Slot(24, n)
}

/// Time the aircraft began occupying this slot, in ISO 8601 UTC format with millisecond precision.
/// Example: /// Example: 2023-01-01T01:01:03.123Z
/// Constraints: No constraints specified.
func (rcv *AirfieldSlotConsumption_Ingest) OccStartTime() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(26))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Time the aircraft began occupying this slot, in ISO 8601 UTC format with millisecond precision.
/// Example: /// Example: 2023-01-01T01:01:03.123Z
/// Constraints: No constraints specified.
/// The aircraft Model Design Series designation of the aircraft this slot is reserved for.
/// Example: /// Example: C017A
/// Constraints: Minimum length = 0, Maximum length = 36
func (rcv *AirfieldSlotConsumption_Ingest) ResAircraftMds() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(28))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The aircraft Model Design Series designation of the aircraft this slot is reserved for.
/// Example: /// Example: C017A
/// Constraints: Minimum length = 0, Maximum length = 36
/// The tail number of the aircraft this slot is reserved for.
/// Example: /// Example: N702JG
/// Constraints: Minimum length = 0, Maximum length = 16
func (rcv *AirfieldSlotConsumption_Ingest) ResTailNumber() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(30))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The tail number of the aircraft this slot is reserved for.
/// Example: /// Example: N702JG
/// Constraints: Minimum length = 0, Maximum length = 16
/// Indicates the type of reservation (e.g. M for Mission, A for Aircraft, O for Other).
/// Example: /// Example: M
/// Constraints: Minimum length = 0, Maximum length = 2
func (rcv *AirfieldSlotConsumption_Ingest) ResType() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(32))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Indicates the type of reservation (e.g. M for Mission, A for Aircraft, O for Other).
/// Example: /// Example: M
/// Constraints: Minimum length = 0, Maximum length = 2
/// The reason the slot reservation was made.
/// Example: /// Example: Maintenance needed
/// Constraints: Minimum length = 0, Maximum length = 256
func (rcv *AirfieldSlotConsumption_Ingest) ResReason() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(34))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The reason the slot reservation was made.
/// Example: /// Example: Maintenance needed
/// Constraints: Minimum length = 0, Maximum length = 256
/// Mission identifier reserving this slot according to Mobility Air Forces (MAF) Encode/Decode procedures.
/// Example: /// Example: AJM123456123
/// Constraints: Minimum length = 0, Maximum length = 36
func (rcv *AirfieldSlotConsumption_Ingest) ResMissionId() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(36))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Mission identifier reserving this slot according to Mobility Air Forces (MAF) Encode/Decode procedures.
/// Example: /// Example: AJM123456123
/// Constraints: Minimum length = 0, Maximum length = 36
/// The start of the slot window, in ISO 8601 UTC format.
/// Example: /// Example: 2023-01-01T01:01:01.123Z
/// Constraints: No constraints specified.
func (rcv *AirfieldSlotConsumption_Ingest) StartTime() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(38))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The start of the slot window, in ISO 8601 UTC format.
/// Example: /// Example: 2023-01-01T01:01:01.123Z
/// Constraints: No constraints specified.
/// The end of the slot window, in ISO 8601 UTC format.
/// Example: /// Example: 2023-01-01T01:01:01.123Z
/// Constraints: No constraints specified.
func (rcv *AirfieldSlotConsumption_Ingest) EndTime() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(40))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The end of the slot window, in ISO 8601 UTC format.
/// Example: /// Example: 2023-01-01T01:01:01.123Z
/// Constraints: No constraints specified.
/// The desired time for aircraft action such as landing, take off, parking, etc., in ISO 8601 UTC format.
/// Example: /// Example: 2023-01-01T01:01:01.123Z
/// Constraints: No constraints specified.
func (rcv *AirfieldSlotConsumption_Ingest) TargetTime() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(42))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The desired time for aircraft action such as landing, take off, parking, etc., in ISO 8601 UTC format.
/// Example: /// Example: 2023-01-01T01:01:01.123Z
/// Constraints: No constraints specified.
/// Unique identifier of the sortie arriving at the slot start time.
/// Example: /// Example: be831d39-1822-da9f-7ace-6cc5643397dc
/// Constraints: Minimum length = 0, Maximum length = 36
func (rcv *AirfieldSlotConsumption_Ingest) IdArrSortie() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(44))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Unique identifier of the sortie arriving at the slot start time.
/// Example: /// Example: be831d39-1822-da9f-7ace-6cc5643397dc
/// Constraints: Minimum length = 0, Maximum length = 36
/// Unique identifier of the sortie departing at the slot end time.
/// Example: /// Example: 1e6edeec-72e9-aaec-d33c-51147cb5ffdd
/// Constraints: Minimum length = 0, Maximum length = 36
func (rcv *AirfieldSlotConsumption_Ingest) IdDepSortie() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(46))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Unique identifier of the sortie departing at the slot end time.
/// Example: /// Example: 1e6edeec-72e9-aaec-d33c-51147cb5ffdd
/// Constraints: Minimum length = 0, Maximum length = 36
/// Alternate identifier of the sortie arriving at the slot start time provided by the source.
/// Example: /// Example: ALT-SORTIE-ID
/// Constraints: Minimum length = 0, Maximum length = 36
func (rcv *AirfieldSlotConsumption_Ingest) AltArrSortieId() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(48))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Alternate identifier of the sortie arriving at the slot start time provided by the source.
/// Example: /// Example: ALT-SORTIE-ID
/// Constraints: Minimum length = 0, Maximum length = 36
/// Alternate identifier of the sortie departing at the slot end time provided by the source.
/// Example: /// Example: ALT-SORTIE-ID
/// Constraints: Minimum length = 0, Maximum length = 36
func (rcv *AirfieldSlotConsumption_Ingest) AltDepSortieId() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(50))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Alternate identifier of the sortie departing at the slot end time provided by the source.
/// Example: /// Example: ALT-SORTIE-ID
/// Constraints: Minimum length = 0, Maximum length = 36
/// Comments from the requester.
/// Example: /// Example: Sorry for the late notice.
/// Constraints: Minimum length = 0, Maximum length = 128
func (rcv *AirfieldSlotConsumption_Ingest) ReqComment() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(52))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Comments from the requester.
/// Example: /// Example: Sorry for the late notice.
/// Constraints: Minimum length = 0, Maximum length = 128
/// Comments from the approver.
/// Example: /// Example: The request was denied due to inoperable fuel pumps.
/// Constraints: Minimum length = 0, Maximum length = 128
func (rcv *AirfieldSlotConsumption_Ingest) AppComment() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(54))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Comments from the approver.
/// Example: /// Example: The request was denied due to inoperable fuel pumps.
/// Constraints: Minimum length = 0, Maximum length = 128
/// Short name of the organization requesting use of this slot.
/// Example: /// Example: TACC
/// Constraints: Minimum length = 0, Maximum length = 32
func (rcv *AirfieldSlotConsumption_Ingest) ReqOrg() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(56))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Short name of the organization requesting use of this slot.
/// Example: /// Example: TACC
/// Constraints: Minimum length = 0, Maximum length = 32
/// Initials of the person requesting the use of this slot. Use SYSTEM if this request is auto-generated by an auto-planning system.
/// Example: /// Example: CB
/// Constraints: Minimum length = 0, Maximum length = 8
func (rcv *AirfieldSlotConsumption_Ingest) ReqInitials() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(58))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Initials of the person requesting the use of this slot. Use SYSTEM if this request is auto-generated by an auto-planning system.
/// Example: /// Example: CB
/// Constraints: Minimum length = 0, Maximum length = 8
/// Short name of the organization approving the use of this slot.
/// Example: /// Example: KCHS/BOPS
/// Constraints: Minimum length = 0, Maximum length = 32
func (rcv *AirfieldSlotConsumption_Ingest) AppOrg() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(60))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Short name of the organization approving the use of this slot.
/// Example: /// Example: KCHS/BOPS
/// Constraints: Minimum length = 0, Maximum length = 32
/// Initials of the person approving the use of this slot. Use SYSTEM if auto-approved without human involvement.
/// Example: /// Example: CB
/// Constraints: Minimum length = 0, Maximum length = 8
func (rcv *AirfieldSlotConsumption_Ingest) AppInitials() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(62))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Initials of the person approving the use of this slot. Use SYSTEM if auto-approved without human involvement.
/// Example: /// Example: CB
/// Constraints: Minimum length = 0, Maximum length = 8
/// Time the row was created in the database, auto-populated by the system.
/// Example: /// Example: 2018-01-01T16:00:00.123Z
/// Constraints: No constraints specified.
func (rcv *AirfieldSlotConsumption_Ingest) CreatedAt() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(64))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Time the row was created in the database, auto-populated by the system.
/// Example: /// Example: 2018-01-01T16:00:00.123Z
/// Constraints: No constraints specified.
/// Application user who created the row in the database, auto-populated by the system.
/// Example: /// Example: some.user
/// Constraints: Minimum length = 1, Maximum length = 64
func (rcv *AirfieldSlotConsumption_Ingest) CreatedBy() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(66))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Application user who created the row in the database, auto-populated by the system.
/// Example: /// Example: some.user
/// Constraints: Minimum length = 1, Maximum length = 64
/// The source data library from which this record was received. This could be a remote or tactical UDL or another data library. If null, the record should be assumed to have originated from the primary Enterprise UDL.
/// Example: /// Example: AXE
/// Constraints: Minimum length = 0, Maximum length = 64
func (rcv *AirfieldSlotConsumption_Ingest) SourceDl() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(68))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The source data library from which this record was received. This could be a remote or tactical UDL or another data library. If null, the record should be assumed to have originated from the primary Enterprise UDL.
/// Example: /// Example: AXE
/// Constraints: Minimum length = 0, Maximum length = 64
/// Source of the data.
/// Example: /// Example: Bluestaq
/// Constraints: Minimum length = 1, Maximum length = 64
func (rcv *AirfieldSlotConsumption_Ingest) Source() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(70))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Source of the data.
/// Example: /// Example: Bluestaq
/// Constraints: Minimum length = 1, Maximum length = 64
/// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
/// Example: /// Example: THIRD_PARTY_DATASOURCE
/// Constraints: Minimum length = 0, Maximum length = 64
func (rcv *AirfieldSlotConsumption_Ingest) Origin() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(72))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
/// Example: /// Example: THIRD_PARTY_DATASOURCE
/// Constraints: Minimum length = 0, Maximum length = 64
/// The originating source network on which this record was created, auto-populated by the system.
/// Example: /// Example: ORIG
/// Constraints: Minimum length = 0, Maximum length = 32
func (rcv *AirfieldSlotConsumption_Ingest) OrigNetwork() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(74))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The originating source network on which this record was created, auto-populated by the system.
/// Example: /// Example: ORIG
/// Constraints: Minimum length = 0, Maximum length = 32
/// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
/// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
/// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
/// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
/// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
/// Example: /// Example: TEST
/// Constraints: Minimum length = 1, Maximum length = 32
func (rcv *AirfieldSlotConsumption_Ingest) DataMode() AirfieldSlotConsumption_Ingest_dataMode_Enum {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(76))
	if o != 0 {
		return AirfieldSlotConsumption_Ingest_dataMode_Enum(rcv._tab.GetInt8(o + rcv._tab.Pos))
	}
	return 0
}

/// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
/// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
/// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
/// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
/// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
/// Example: /// Example: TEST
/// Constraints: Minimum length = 1, Maximum length = 32
func (rcv *AirfieldSlotConsumption_Ingest) MutateDataMode(n AirfieldSlotConsumption_Ingest_dataMode_Enum) bool {
	return rcv._tab.MutateInt8Slot(76, int8(n))
}

func AirfieldSlotConsumption_IngestStart(builder *flatbuffers.Builder) {
	builder.StartObject(37)
}
func AirfieldSlotConsumption_IngestAddId(builder *flatbuffers.Builder, id flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(id), 0)
}
func AirfieldSlotConsumption_IngestAddClassificationMarking(builder *flatbuffers.Builder, classificationMarking flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(classificationMarking), 0)
}
func AirfieldSlotConsumption_IngestAddIdAirfieldSlot(builder *flatbuffers.Builder, idAirfieldSlot flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(idAirfieldSlot), 0)
}
func AirfieldSlotConsumption_IngestAddStatus(builder *flatbuffers.Builder, status AirfieldSlotConsumption_Ingest_status_Enum) {
	builder.PrependInt8Slot(3, int8(status), 0)
}
func AirfieldSlotConsumption_IngestAddOccupied(builder *flatbuffers.Builder, occupied bool) {
	builder.PrependBoolSlot(4, occupied, false)
}
func AirfieldSlotConsumption_IngestAddConsumer(builder *flatbuffers.Builder, consumer flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(5, flatbuffers.UOffsetT(consumer), 0)
}
func AirfieldSlotConsumption_IngestAddOccAircraftMds(builder *flatbuffers.Builder, occAircraftMds flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(6, flatbuffers.UOffsetT(occAircraftMds), 0)
}
func AirfieldSlotConsumption_IngestAddOccTailNumber(builder *flatbuffers.Builder, occTailNumber flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(7, flatbuffers.UOffsetT(occTailNumber), 0)
}
func AirfieldSlotConsumption_IngestAddCallSigns(builder *flatbuffers.Builder, callSigns flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(8, flatbuffers.UOffsetT(callSigns), 0)
}
func AirfieldSlotConsumption_IngestStartCallSignsVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func AirfieldSlotConsumption_IngestAddMissionId(builder *flatbuffers.Builder, missionId flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(9, flatbuffers.UOffsetT(missionId), 0)
}
func AirfieldSlotConsumption_IngestAddNumAircraft(builder *flatbuffers.Builder, numAircraft int32) {
	builder.PrependInt32Slot(10, numAircraft, 0)
}
func AirfieldSlotConsumption_IngestAddOccStartTime(builder *flatbuffers.Builder, occStartTime flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(11, flatbuffers.UOffsetT(occStartTime), 0)
}
func AirfieldSlotConsumption_IngestAddResAircraftMds(builder *flatbuffers.Builder, resAircraftMds flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(12, flatbuffers.UOffsetT(resAircraftMds), 0)
}
func AirfieldSlotConsumption_IngestAddResTailNumber(builder *flatbuffers.Builder, resTailNumber flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(13, flatbuffers.UOffsetT(resTailNumber), 0)
}
func AirfieldSlotConsumption_IngestAddResType(builder *flatbuffers.Builder, resType flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(14, flatbuffers.UOffsetT(resType), 0)
}
func AirfieldSlotConsumption_IngestAddResReason(builder *flatbuffers.Builder, resReason flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(15, flatbuffers.UOffsetT(resReason), 0)
}
func AirfieldSlotConsumption_IngestAddResMissionId(builder *flatbuffers.Builder, resMissionId flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(16, flatbuffers.UOffsetT(resMissionId), 0)
}
func AirfieldSlotConsumption_IngestAddStartTime(builder *flatbuffers.Builder, startTime flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(17, flatbuffers.UOffsetT(startTime), 0)
}
func AirfieldSlotConsumption_IngestAddEndTime(builder *flatbuffers.Builder, endTime flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(18, flatbuffers.UOffsetT(endTime), 0)
}
func AirfieldSlotConsumption_IngestAddTargetTime(builder *flatbuffers.Builder, targetTime flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(19, flatbuffers.UOffsetT(targetTime), 0)
}
func AirfieldSlotConsumption_IngestAddIdArrSortie(builder *flatbuffers.Builder, idArrSortie flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(20, flatbuffers.UOffsetT(idArrSortie), 0)
}
func AirfieldSlotConsumption_IngestAddIdDepSortie(builder *flatbuffers.Builder, idDepSortie flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(21, flatbuffers.UOffsetT(idDepSortie), 0)
}
func AirfieldSlotConsumption_IngestAddAltArrSortieId(builder *flatbuffers.Builder, altArrSortieId flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(22, flatbuffers.UOffsetT(altArrSortieId), 0)
}
func AirfieldSlotConsumption_IngestAddAltDepSortieId(builder *flatbuffers.Builder, altDepSortieId flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(23, flatbuffers.UOffsetT(altDepSortieId), 0)
}
func AirfieldSlotConsumption_IngestAddReqComment(builder *flatbuffers.Builder, reqComment flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(24, flatbuffers.UOffsetT(reqComment), 0)
}
func AirfieldSlotConsumption_IngestAddAppComment(builder *flatbuffers.Builder, appComment flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(25, flatbuffers.UOffsetT(appComment), 0)
}
func AirfieldSlotConsumption_IngestAddReqOrg(builder *flatbuffers.Builder, reqOrg flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(26, flatbuffers.UOffsetT(reqOrg), 0)
}
func AirfieldSlotConsumption_IngestAddReqInitials(builder *flatbuffers.Builder, reqInitials flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(27, flatbuffers.UOffsetT(reqInitials), 0)
}
func AirfieldSlotConsumption_IngestAddAppOrg(builder *flatbuffers.Builder, appOrg flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(28, flatbuffers.UOffsetT(appOrg), 0)
}
func AirfieldSlotConsumption_IngestAddAppInitials(builder *flatbuffers.Builder, appInitials flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(29, flatbuffers.UOffsetT(appInitials), 0)
}
func AirfieldSlotConsumption_IngestAddCreatedAt(builder *flatbuffers.Builder, createdAt flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(30, flatbuffers.UOffsetT(createdAt), 0)
}
func AirfieldSlotConsumption_IngestAddCreatedBy(builder *flatbuffers.Builder, createdBy flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(31, flatbuffers.UOffsetT(createdBy), 0)
}
func AirfieldSlotConsumption_IngestAddSourceDl(builder *flatbuffers.Builder, sourceDl flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(32, flatbuffers.UOffsetT(sourceDl), 0)
}
func AirfieldSlotConsumption_IngestAddSource(builder *flatbuffers.Builder, source flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(33, flatbuffers.UOffsetT(source), 0)
}
func AirfieldSlotConsumption_IngestAddOrigin(builder *flatbuffers.Builder, origin flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(34, flatbuffers.UOffsetT(origin), 0)
}
func AirfieldSlotConsumption_IngestAddOrigNetwork(builder *flatbuffers.Builder, origNetwork flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(35, flatbuffers.UOffsetT(origNetwork), 0)
}
func AirfieldSlotConsumption_IngestAddDataMode(builder *flatbuffers.Builder, dataMode AirfieldSlotConsumption_Ingest_dataMode_Enum) {
	builder.PrependInt8Slot(36, int8(dataMode), 0)
}
func AirfieldSlotConsumption_IngestEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
