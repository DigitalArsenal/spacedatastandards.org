// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package OnorbitSolarArray_Ingest

import (
	flatbuffers "github.com/google/flatbuffers/go"

	OnorbitSolarArray_Ingest_dataMode_Enum "OnorbitSolarArray_Ingest_dataMode_Enum"
)

/// No description available.
type OnorbitSolarArray_Ingest struct {
	_tab flatbuffers.Table
}

func GetRootAsOnorbitSolarArray_Ingest(buf []byte, offset flatbuffers.UOffsetT) *OnorbitSolarArray_Ingest {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &OnorbitSolarArray_Ingest{}
	x.Init(buf, n+offset)
	return x
}

func FinishOnorbitSolarArray_IngestBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.Finish(offset)
}

func GetSizePrefixedRootAsOnorbitSolarArray_Ingest(buf []byte, offset flatbuffers.UOffsetT) *OnorbitSolarArray_Ingest {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &OnorbitSolarArray_Ingest{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedOnorbitSolarArray_IngestBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.FinishSizePrefixed(offset)
}

func (rcv *OnorbitSolarArray_Ingest) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *OnorbitSolarArray_Ingest) Table() flatbuffers.Table {
	return rcv._tab
}

/// Unique identifier of the record, auto-generated by the system.
/// Example: ONORBITSOLARARRAY-ID
/// Constraints: Minimum length = 1, Maximum length = 36
func (rcv *OnorbitSolarArray_Ingest) Id() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Unique identifier of the record, auto-generated by the system.
/// Example: ONORBITSOLARARRAY-ID
/// Constraints: Minimum length = 1, Maximum length = 36
/// ID of the on-orbit object.
/// Example: ONORBIT-ID
/// Constraints: Minimum length = 1, Maximum length = 36
func (rcv *OnorbitSolarArray_Ingest) IdOnOrbit() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// ID of the on-orbit object.
/// Example: ONORBIT-ID
/// Constraints: Minimum length = 1, Maximum length = 36
/// ID of the SolarArray.
/// Example: SOLARARRAY-ID
/// Constraints: Minimum length = 1, Maximum length = 36
func (rcv *OnorbitSolarArray_Ingest) IdSolarArray() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// ID of the SolarArray.
/// Example: SOLARARRAY-ID
/// Constraints: Minimum length = 1, Maximum length = 36
/// Classification marking of the data in IC/CAPCO Portion-marked format.
/// Example: U
/// Constraints: Minimum length = 1, Maximum length = 128
func (rcv *OnorbitSolarArray_Ingest) ClassificationMarking() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Classification marking of the data in IC/CAPCO Portion-marked format.
/// Example: U
/// Constraints: Minimum length = 1, Maximum length = 128
/// The number of solar arrays on the spacecraft of the type identified by idSolarArray.
/// Example: 10
/// Constraints: No constraints specified.
func (rcv *OnorbitSolarArray_Ingest) Quantity() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

/// The number of solar arrays on the spacecraft of the type identified by idSolarArray.
/// Example: 10
/// Constraints: No constraints specified.
func (rcv *OnorbitSolarArray_Ingest) MutateQuantity(n int32) bool {
	return rcv._tab.MutateInt32Slot(12, n)
}

/// Time the row was created in the database, auto-populated by the system.
/// Example: 2018-01-01T16:00:00.123Z
/// Constraints: No constraints specified.
func (rcv *OnorbitSolarArray_Ingest) CreatedAt() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Time the row was created in the database, auto-populated by the system.
/// Example: 2018-01-01T16:00:00.123Z
/// Constraints: No constraints specified.
/// Application user who created the row in the database, auto-populated by the system.
/// Example: some.user
/// Constraints: Minimum length = 1, Maximum length = 64
func (rcv *OnorbitSolarArray_Ingest) CreatedBy() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Application user who created the row in the database, auto-populated by the system.
/// Example: some.user
/// Constraints: Minimum length = 1, Maximum length = 64
/// Source of the data.
/// Example: Bluestaq
/// Constraints: Minimum length = 1, Maximum length = 64
func (rcv *OnorbitSolarArray_Ingest) Source() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(18))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Source of the data.
/// Example: Bluestaq
/// Constraints: Minimum length = 1, Maximum length = 64
/// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
/// Example: THIRD_PARTY_DATASOURCE
/// Constraints: Minimum length = 0, Maximum length = 64
func (rcv *OnorbitSolarArray_Ingest) Origin() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(20))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
/// Example: THIRD_PARTY_DATASOURCE
/// Constraints: Minimum length = 0, Maximum length = 64
/// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data: EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data. REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis. SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets. TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics. 
/// Example: TEST
/// Constraints: Minimum length = 1, Maximum length = 32
func (rcv *OnorbitSolarArray_Ingest) DataMode() OnorbitSolarArray_Ingest_dataMode_Enum.OnorbitSolarArray_Ingest_dataMode_Enum {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(22))
	if o != 0 {
		return OnorbitSolarArray_Ingest_dataMode_Enum.OnorbitSolarArray_Ingest_dataMode_Enum(rcv._tab.GetInt8(o + rcv._tab.Pos))
	}
	return 0
}

/// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data: EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data. REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis. SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets. TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics. 
/// Example: TEST
/// Constraints: Minimum length = 1, Maximum length = 32
func (rcv *OnorbitSolarArray_Ingest) MutateDataMode(n OnorbitSolarArray_Ingest_dataMode_Enum.OnorbitSolarArray_Ingest_dataMode_Enum) bool {
	return rcv._tab.MutateInt8Slot(22, int8(n))
}

/// No description provided.
/// Example: No example provided.
/// Constraints: No constraints specified.
func (rcv *OnorbitSolarArray_Ingest) SolarArray() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(24))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// No description provided.
/// Example: No example provided.
/// Constraints: No constraints specified.
/// The originating source network on which this record was created, auto-populated by the system.
/// Example: OPS1
/// Constraints: Minimum length = 1, Maximum length = 32
func (rcv *OnorbitSolarArray_Ingest) OrigNetwork() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(26))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The originating source network on which this record was created, auto-populated by the system.
/// Example: OPS1
/// Constraints: Minimum length = 1, Maximum length = 32
func OnorbitSolarArray_IngestStart(builder *flatbuffers.Builder) {
	builder.StartObject(12)
}
func OnorbitSolarArray_IngestAddId(builder *flatbuffers.Builder, id flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(id), 0)
}
func OnorbitSolarArray_IngestAddIdOnOrbit(builder *flatbuffers.Builder, idOnOrbit flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(idOnOrbit), 0)
}
func OnorbitSolarArray_IngestAddIdSolarArray(builder *flatbuffers.Builder, idSolarArray flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(idSolarArray), 0)
}
func OnorbitSolarArray_IngestAddClassificationMarking(builder *flatbuffers.Builder, classificationMarking flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(3, flatbuffers.UOffsetT(classificationMarking), 0)
}
func OnorbitSolarArray_IngestAddQuantity(builder *flatbuffers.Builder, quantity int32) {
	builder.PrependInt32Slot(4, quantity, 0)
}
func OnorbitSolarArray_IngestAddCreatedAt(builder *flatbuffers.Builder, createdAt flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(5, flatbuffers.UOffsetT(createdAt), 0)
}
func OnorbitSolarArray_IngestAddCreatedBy(builder *flatbuffers.Builder, createdBy flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(6, flatbuffers.UOffsetT(createdBy), 0)
}
func OnorbitSolarArray_IngestAddSource(builder *flatbuffers.Builder, source flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(7, flatbuffers.UOffsetT(source), 0)
}
func OnorbitSolarArray_IngestAddOrigin(builder *flatbuffers.Builder, origin flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(8, flatbuffers.UOffsetT(origin), 0)
}
func OnorbitSolarArray_IngestAddDataMode(builder *flatbuffers.Builder, dataMode OnorbitSolarArray_Ingest_dataMode_Enum.OnorbitSolarArray_Ingest_dataMode_Enum) {
	builder.PrependInt8Slot(9, int8(dataMode), 0)
}
func OnorbitSolarArray_IngestAddSolarArray(builder *flatbuffers.Builder, solarArray flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(10, flatbuffers.UOffsetT(solarArray), 0)
}
func OnorbitSolarArray_IngestAddOrigNetwork(builder *flatbuffers.Builder, origNetwork flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(11, flatbuffers.UOffsetT(origNetwork), 0)
}
func OnorbitSolarArray_IngestEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
