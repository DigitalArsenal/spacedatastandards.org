// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package SOICalibration_Ingest

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

/// /// Schema for SOI Calibration data.
type SOICalibration_Ingest struct {
	_tab flatbuffers.Table
}

const SOICalibration_IngestIdentifier = "SOIC"

func GetRootAsSOICalibration_Ingest(buf []byte, offset flatbuffers.UOffsetT) *SOICalibration_Ingest {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &SOICalibration_Ingest{}
	x.Init(buf, n+offset)
	return x
}

func FinishSOICalibration_IngestBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	identifierBytes := []byte(SOICalibration_IngestIdentifier)
	builder.FinishWithFileIdentifier(offset, identifierBytes)
}

func SOICalibration_IngestBufferHasIdentifier(buf []byte) bool {
	return flatbuffers.BufferHasIdentifier(buf, SOICalibration_IngestIdentifier)
}

func GetSizePrefixedRootAsSOICalibration_Ingest(buf []byte, offset flatbuffers.UOffsetT) *SOICalibration_Ingest {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &SOICalibration_Ingest{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedSOICalibration_IngestBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	identifierBytes := []byte(SOICalibration_IngestIdentifier)
	builder.FinishSizePrefixedWithFileIdentifier(offset, identifierBytes)
}

func SizePrefixedSOICalibration_IngestBufferHasIdentifier(buf []byte) bool {
	return flatbuffers.SizePrefixedBufferHasIdentifier(buf, SOICalibration_IngestIdentifier)
}

func (rcv *SOICalibration_Ingest) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *SOICalibration_Ingest) Table() flatbuffers.Table {
	return rcv._tab
}

/// Coefficient value for how much signal would be lost to atmospheric attenuation for a star at zenith, in magnitudes per air mass.
/// Example: /// Example: 0.2
/// Constraints: No constraints specified.
func (rcv *SOICalibration_Ingest) CalExtinctionCoeff() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Coefficient value for how much signal would be lost to atmospheric attenuation for a star at zenith, in magnitudes per air mass.
/// Example: /// Example: 0.2
/// Constraints: No constraints specified.
func (rcv *SOICalibration_Ingest) MutateCalExtinctionCoeff(n float64) bool {
	return rcv._tab.MutateFloat64Slot(4, n)
}

/// Average Sky Background signals in magnitudes, at calibration. Sky Background refers to the incoming light from an apparently empty part of the night sky.
/// Example: /// Example: 30086.25
/// Constraints: No constraints specified.
func (rcv *SOICalibration_Ingest) CalSkyBg() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Average Sky Background signals in magnitudes, at calibration. Sky Background refers to the incoming light from an apparently empty part of the night sky.
/// Example: /// Example: 30086.25
/// Constraints: No constraints specified.
func (rcv *SOICalibration_Ingest) MutateCalSkyBg(n float64) bool {
	return rcv._tab.MutateFloat64Slot(6, n)
}

/// Background intensity, at calibration, specified in kilowatts per steradian per micrometer.
/// Example: /// Example: 1.1
/// Constraints: No constraints specified.
func (rcv *SOICalibration_Ingest) CalBgIntensity() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Background intensity, at calibration, specified in kilowatts per steradian per micrometer.
/// Example: /// Example: 1.1
/// Constraints: No constraints specified.
func (rcv *SOICalibration_Ingest) MutateCalBgIntensity(n float64) bool {
	return rcv._tab.MutateFloat64Slot(8, n)
}

/// In-band solar magnitudes at 1 A.U, at calibration (e.g. -5.0 to 30.0).
/// Example: /// Example: 19.23664587
/// Constraints: No constraints specified.
func (rcv *SOICalibration_Ingest) CalSpectralFilterSolarMag() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// In-band solar magnitudes at 1 A.U, at calibration (e.g. -5.0 to 30.0).
/// Example: /// Example: 19.23664587
/// Constraints: No constraints specified.
func (rcv *SOICalibration_Ingest) MutateCalSpectralFilterSolarMag(n float64) bool {
	return rcv._tab.MutateFloat64Slot(10, n)
}

/// Value representing the difference between the catalog magnitude and instrumental magnitude for a set of standard stars, at calibration (e.g. -5.0 to 30.0).
/// Example: /// Example: 25.15682157
/// Constraints: No constraints specified.
func (rcv *SOICalibration_Ingest) CalZeroPoint() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Value representing the difference between the catalog magnitude and instrumental magnitude for a set of standard stars, at calibration (e.g. -5.0 to 30.0).
/// Example: /// Example: 25.15682157
/// Constraints: No constraints specified.
func (rcv *SOICalibration_Ingest) MutateCalZeroPoint(n float64) bool {
	return rcv._tab.MutateFloat64Slot(12, n)
}

/// Number of detected stars in the FOV with the target object, at calibration. Helps identify frames with clouds.
/// Example: /// Example: 1
/// Constraints: No constraints specified.
func (rcv *SOICalibration_Ingest) CalNumDetectedStars() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

/// Number of detected stars in the FOV with the target object, at calibration. Helps identify frames with clouds.
/// Example: /// Example: 1
/// Constraints: No constraints specified.
func (rcv *SOICalibration_Ingest) MutateCalNumDetectedStars(n int32) bool {
	return rcv._tab.MutateInt32Slot(14, n)
}

/// Number of correlated stars in the FOV with the target object, at calibration. Can be 0 for narrow FOV sensors.
/// Example: /// Example: 1
/// Constraints: No constraints specified.
func (rcv *SOICalibration_Ingest) CalNumCorrelatedStars() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

/// Number of correlated stars in the FOV with the target object, at calibration. Can be 0 for narrow FOV sensors.
/// Example: /// Example: 1
/// Constraints: No constraints specified.
func (rcv *SOICalibration_Ingest) MutateCalNumCorrelatedStars(n int32) bool {
	return rcv._tab.MutateInt32Slot(16, n)
}

/// Extinction coefficient uncertainty in magnitudes, at calibration, which represents the difference between the measured brightness and predicted brightness of the star with the extinction removed, making it exo-atmospheric (e.g. -5.0 to 30.0).
/// Example: /// Example: 0.06474939
/// Constraints: No constraints specified.
func (rcv *SOICalibration_Ingest) CalExtinctionCoeffUnc() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(18))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Extinction coefficient uncertainty in magnitudes, at calibration, which represents the difference between the measured brightness and predicted brightness of the star with the extinction removed, making it exo-atmospheric (e.g. -5.0 to 30.0).
/// Example: /// Example: 0.06474939
/// Constraints: No constraints specified.
func (rcv *SOICalibration_Ingest) MutateCalExtinctionCoeffUnc(n float64) bool {
	return rcv._tab.MutateFloat64Slot(18, n)
}

/// Maximum extinction coefficient uncertainty in magnitudes, at calibration (e.g. -5.0 to 30.0).
/// Example: /// Example: 0.19708838
/// Constraints: No constraints specified.
func (rcv *SOICalibration_Ingest) CalExtinctionCoeffMaxUnc() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(20))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Maximum extinction coefficient uncertainty in magnitudes, at calibration (e.g. -5.0 to 30.0).
/// Example: /// Example: 0.19708838
/// Constraints: No constraints specified.
func (rcv *SOICalibration_Ingest) MutateCalExtinctionCoeffMaxUnc(n float64) bool {
	return rcv._tab.MutateFloat64Slot(20, n)
}

/// Start time of calibration in ISO 8601 UTC time, with millisecond precision.
/// Example: /// Example: 2023-01-02T16:00:00.123Z
/// Constraints: No constraints specified.
func (rcv *SOICalibration_Ingest) CalTime() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(22))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Start time of calibration in ISO 8601 UTC time, with millisecond precision.
/// Example: /// Example: 2023-01-02T16:00:00.123Z
/// Constraints: No constraints specified.
/// Type of calibration (e.g. PRE, MID, POST).
/// Example: /// Example: PRE
/// Constraints: Minimum length = 0, Maximum length = 24
func (rcv *SOICalibration_Ingest) CalType() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(24))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Type of calibration (e.g. PRE, MID, POST).
/// Example: /// Example: PRE
/// Constraints: Minimum length = 0, Maximum length = 24
func SOICalibration_IngestStart(builder *flatbuffers.Builder) {
	builder.StartObject(11)
}
func SOICalibration_IngestAddCalExtinctionCoeff(builder *flatbuffers.Builder, calExtinctionCoeff float64) {
	builder.PrependFloat64Slot(0, calExtinctionCoeff, 0.0)
}
func SOICalibration_IngestAddCalSkyBg(builder *flatbuffers.Builder, calSkyBg float64) {
	builder.PrependFloat64Slot(1, calSkyBg, 0.0)
}
func SOICalibration_IngestAddCalBgIntensity(builder *flatbuffers.Builder, calBgIntensity float64) {
	builder.PrependFloat64Slot(2, calBgIntensity, 0.0)
}
func SOICalibration_IngestAddCalSpectralFilterSolarMag(builder *flatbuffers.Builder, calSpectralFilterSolarMag float64) {
	builder.PrependFloat64Slot(3, calSpectralFilterSolarMag, 0.0)
}
func SOICalibration_IngestAddCalZeroPoint(builder *flatbuffers.Builder, calZeroPoint float64) {
	builder.PrependFloat64Slot(4, calZeroPoint, 0.0)
}
func SOICalibration_IngestAddCalNumDetectedStars(builder *flatbuffers.Builder, calNumDetectedStars int32) {
	builder.PrependInt32Slot(5, calNumDetectedStars, 0)
}
func SOICalibration_IngestAddCalNumCorrelatedStars(builder *flatbuffers.Builder, calNumCorrelatedStars int32) {
	builder.PrependInt32Slot(6, calNumCorrelatedStars, 0)
}
func SOICalibration_IngestAddCalExtinctionCoeffUnc(builder *flatbuffers.Builder, calExtinctionCoeffUnc float64) {
	builder.PrependFloat64Slot(7, calExtinctionCoeffUnc, 0.0)
}
func SOICalibration_IngestAddCalExtinctionCoeffMaxUnc(builder *flatbuffers.Builder, calExtinctionCoeffMaxUnc float64) {
	builder.PrependFloat64Slot(8, calExtinctionCoeffMaxUnc, 0.0)
}
func SOICalibration_IngestAddCalTime(builder *flatbuffers.Builder, calTime flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(9, flatbuffers.UOffsetT(calTime), 0)
}
func SOICalibration_IngestAddCalType(builder *flatbuffers.Builder, calType flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(10, flatbuffers.UOffsetT(calType), 0)
}
func SOICalibration_IngestEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
