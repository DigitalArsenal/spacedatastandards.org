// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package DiffOfArrival_Ingest

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

/// /// Model representation of Signal time and frequency difference of arrival (TDOA/FDOA) information obtained by using passive RF based sensor phenomenologies and sensor triangulation.
type DiffOfArrival_Ingest struct {
	_tab flatbuffers.Table
}

const DiffOfArrival_IngestIdentifier = "DIFF"

func GetRootAsDiffOfArrival_Ingest(buf []byte, offset flatbuffers.UOffsetT) *DiffOfArrival_Ingest {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &DiffOfArrival_Ingest{}
	x.Init(buf, n+offset)
	return x
}

func FinishDiffOfArrival_IngestBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	identifierBytes := []byte(DiffOfArrival_IngestIdentifier)
	builder.FinishWithFileIdentifier(offset, identifierBytes)
}

func DiffOfArrival_IngestBufferHasIdentifier(buf []byte) bool {
	return flatbuffers.BufferHasIdentifier(buf, DiffOfArrival_IngestIdentifier)
}

func GetSizePrefixedRootAsDiffOfArrival_Ingest(buf []byte, offset flatbuffers.UOffsetT) *DiffOfArrival_Ingest {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &DiffOfArrival_Ingest{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedDiffOfArrival_IngestBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	identifierBytes := []byte(DiffOfArrival_IngestIdentifier)
	builder.FinishSizePrefixedWithFileIdentifier(offset, identifierBytes)
}

func SizePrefixedDiffOfArrival_IngestBufferHasIdentifier(buf []byte) bool {
	return flatbuffers.SizePrefixedBufferHasIdentifier(buf, DiffOfArrival_IngestIdentifier)
}

func (rcv *DiffOfArrival_Ingest) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *DiffOfArrival_Ingest) Table() flatbuffers.Table {
	return rcv._tab
}

/// Unique identifier of the record, auto-generated by the system.
/// Example: /// Example: DIFFOFARRIVAL-ID
/// Constraints: Minimum length = 1, Maximum length = 36
func (rcv *DiffOfArrival_Ingest) Id() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Unique identifier of the record, auto-generated by the system.
/// Example: /// Example: DIFFOFARRIVAL-ID
/// Constraints: Minimum length = 1, Maximum length = 36
/// Classification marking of the data in IC/CAPCO Portion-marked format.
/// Example: /// Example: U
/// Constraints: Minimum length = 1, Maximum length = 128
func (rcv *DiffOfArrival_Ingest) ClassificationMarking() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Classification marking of the data in IC/CAPCO Portion-marked format.
/// Example: /// Example: U
/// Constraints: Minimum length = 1, Maximum length = 128
/// Ob detection time in ISO 8601 UTC with microsecond precision.
/// Example: /// Example: 2018-01-01T16:00:00.123456Z
/// Constraints: No constraints specified.
func (rcv *DiffOfArrival_Ingest) ObTime() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Ob detection time in ISO 8601 UTC with microsecond precision.
/// Example: /// Example: 2018-01-01T16:00:00.123456Z
/// Constraints: No constraints specified.
/// Unique identifier of the target on-orbit object, if correlated.
/// Example: /// Example: ONORBIT-ID
/// Constraints: Minimum length = 0, Maximum length = 36
func (rcv *DiffOfArrival_Ingest) IdOnOrbit() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Unique identifier of the target on-orbit object, if correlated.
/// Example: /// Example: ONORBIT-ID
/// Constraints: Minimum length = 0, Maximum length = 36
/// Sensor ID of the primary/1st sensor used for this measurement.
/// Example: /// Example: SENSOR1-ID
/// Constraints: Minimum length = 0, Maximum length = 36
func (rcv *DiffOfArrival_Ingest) IdSensor1() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Sensor ID of the primary/1st sensor used for this measurement.
/// Example: /// Example: SENSOR1-ID
/// Constraints: Minimum length = 0, Maximum length = 36
/// Sensor ID of the secondary/2nd sensor used for this measurement.
/// Example: /// Example: SENSOR2-ID
/// Constraints: Minimum length = 0, Maximum length = 36
func (rcv *DiffOfArrival_Ingest) IdSensor2() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Sensor ID of the secondary/2nd sensor used for this measurement.
/// Example: /// Example: SENSOR2-ID
/// Constraints: Minimum length = 0, Maximum length = 36
/// Catalog number of the target on-orbit object.
/// Example: /// Example: 25544
/// Constraints: No constraints specified.
func (rcv *DiffOfArrival_Ingest) SatNo() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

/// Catalog number of the target on-orbit object.
/// Example: /// Example: 25544
/// Constraints: No constraints specified.
func (rcv *DiffOfArrival_Ingest) MutateSatNo(n int32) bool {
	return rcv._tab.MutateInt32Slot(16, n)
}

/// Optional identifier to indicate the specific tasking which produced this observation.
/// Example: /// Example: TASK-ID
/// Constraints: Minimum length = 0, Maximum length = 36
func (rcv *DiffOfArrival_Ingest) TaskId() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(18))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Optional identifier to indicate the specific tasking which produced this observation.
/// Example: /// Example: TASK-ID
/// Constraints: Minimum length = 0, Maximum length = 36
/// Optional identifier provided by observation source to indicate the target onorbit object of this observation. This may be an internal identifier and not necessarily a valid satellite number.
/// Example: /// Example: ORIGOBJECT-ID
/// Constraints: Minimum length = 0, Maximum length = 64
func (rcv *DiffOfArrival_Ingest) OrigObjectId() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(20))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Optional identifier provided by observation source to indicate the target onorbit object of this observation. This may be an internal identifier and not necessarily a valid satellite number.
/// Example: /// Example: ORIGOBJECT-ID
/// Constraints: Minimum length = 0, Maximum length = 64
/// Optional identifier provided by DOA source to indicate the primary/1st sensor identifier used for this measurement. This may be an internal identifier and not necessarily a valid sensor ID.
/// Example: /// Example: ORIGSENSOR1-ID
/// Constraints: Minimum length = 0, Maximum length = 64
func (rcv *DiffOfArrival_Ingest) OrigSensorId1() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(22))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Optional identifier provided by DOA source to indicate the primary/1st sensor identifier used for this measurement. This may be an internal identifier and not necessarily a valid sensor ID.
/// Example: /// Example: ORIGSENSOR1-ID
/// Constraints: Minimum length = 0, Maximum length = 64
/// Optional identifier provided by DOA source to indicate the secondary/2nd sensor identifier used for this this observation. This may be an internal identifier and not necessarily a valid sensor ID.
/// Example: /// Example: ORIGSENSOR2-ID
/// Constraints: Minimum length = 0, Maximum length = 64
func (rcv *DiffOfArrival_Ingest) OrigSensorId2() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(24))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Optional identifier provided by DOA source to indicate the secondary/2nd sensor identifier used for this this observation. This may be an internal identifier and not necessarily a valid sensor ID.
/// Example: /// Example: ORIGSENSOR2-ID
/// Constraints: Minimum length = 0, Maximum length = 64
/// Boolean indicating this observation is part of an uncorrelated track or was unable to be correlated to a known object. This flag should only be set to true by data providers after an attempt to correlate to an on-orbit object was made and failed. If unable to correlate, the 'origObjectId' field may be populated with an internal data provider specific identifier.
/// Example: /// Example: False
/// Constraints: No constraints specified.
func (rcv *DiffOfArrival_Ingest) Uct() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(26))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

/// Boolean indicating this observation is part of an uncorrelated track or was unable to be correlated to a known object. This flag should only be set to true by data providers after an attempt to correlate to an on-orbit object was made and failed. If unable to correlate, the 'origObjectId' field may be populated with an internal data provider specific identifier.
/// Example: /// Example: False
/// Constraints: No constraints specified.
func (rcv *DiffOfArrival_Ingest) MutateUct(n bool) bool {
	return rcv._tab.MutateBoolSlot(26, n)
}

/// The signal arrival delay relative to sensor 1 in seconds.
/// Example: /// Example: 1.1
/// Constraints: No constraints specified.
func (rcv *DiffOfArrival_Ingest) Sensor1Delay() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(28))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// The signal arrival delay relative to sensor 1 in seconds.
/// Example: /// Example: 1.1
/// Constraints: No constraints specified.
func (rcv *DiffOfArrival_Ingest) MutateSensor1Delay(n float64) bool {
	return rcv._tab.MutateFloat64Slot(28, n)
}

/// The signal arrival delay relative to sensor 2 in seconds.
/// Example: /// Example: 1.1
/// Constraints: No constraints specified.
func (rcv *DiffOfArrival_Ingest) Sensor2Delay() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(30))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// The signal arrival delay relative to sensor 2 in seconds.
/// Example: /// Example: 1.1
/// Constraints: No constraints specified.
func (rcv *DiffOfArrival_Ingest) MutateSensor2Delay(n float64) bool {
	return rcv._tab.MutateFloat64Slot(30, n)
}

/// Sensor WGS84 latitude at obTime (if mobile/onorbit) in degrees. If null, can be obtained from sensor info. -90 to 90 degrees (negative values south of equator).
/// Example: /// Example: 45.1
/// Constraints: No constraints specified.
func (rcv *DiffOfArrival_Ingest) Senlat() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(32))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Sensor WGS84 latitude at obTime (if mobile/onorbit) in degrees. If null, can be obtained from sensor info. -90 to 90 degrees (negative values south of equator).
/// Example: /// Example: 45.1
/// Constraints: No constraints specified.
func (rcv *DiffOfArrival_Ingest) MutateSenlat(n float64) bool {
	return rcv._tab.MutateFloat64Slot(32, n)
}

/// Sensor WGS84 longitude at obTime (if mobile/onorbit) in degrees. If null, can be obtained from sensor info. -180 to 180 degrees (negative values west of Prime Meridian).
/// Example: /// Example: 120.1
/// Constraints: No constraints specified.
func (rcv *DiffOfArrival_Ingest) Senlon() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(34))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Sensor WGS84 longitude at obTime (if mobile/onorbit) in degrees. If null, can be obtained from sensor info. -180 to 180 degrees (negative values west of Prime Meridian).
/// Example: /// Example: 120.1
/// Constraints: No constraints specified.
func (rcv *DiffOfArrival_Ingest) MutateSenlon(n float64) bool {
	return rcv._tab.MutateFloat64Slot(34, n)
}

/// Sensor altitude at obTime (if mobile/onorbit) in km. If null, can be obtained from sensor info.
/// Example: /// Example: 1.1
/// Constraints: No constraints specified.
func (rcv *DiffOfArrival_Ingest) Senalt() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(36))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Sensor altitude at obTime (if mobile/onorbit) in km. If null, can be obtained from sensor info.
/// Example: /// Example: 1.1
/// Constraints: No constraints specified.
func (rcv *DiffOfArrival_Ingest) MutateSenalt(n float64) bool {
	return rcv._tab.MutateFloat64Slot(36, n)
}

/// Sensor 2 WGS84 latitude at obTime (if mobile/onorbit) in degrees. If null, can be obtained from sensor info.
/// Example: /// Example: 1.1
/// Constraints: No constraints specified.
func (rcv *DiffOfArrival_Ingest) Sen2lat() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(38))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Sensor 2 WGS84 latitude at obTime (if mobile/onorbit) in degrees. If null, can be obtained from sensor info.
/// Example: /// Example: 1.1
/// Constraints: No constraints specified.
func (rcv *DiffOfArrival_Ingest) MutateSen2lat(n float64) bool {
	return rcv._tab.MutateFloat64Slot(38, n)
}

/// Sensor 2 WGS84 longitude at obTime (if mobile/onorbit) in degrees. If null, can be obtained from sensor info.
/// Example: /// Example: 1.1
/// Constraints: No constraints specified.
func (rcv *DiffOfArrival_Ingest) Sen2lon() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(40))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Sensor 2 WGS84 longitude at obTime (if mobile/onorbit) in degrees. If null, can be obtained from sensor info.
/// Example: /// Example: 1.1
/// Constraints: No constraints specified.
func (rcv *DiffOfArrival_Ingest) MutateSen2lon(n float64) bool {
	return rcv._tab.MutateFloat64Slot(40, n)
}

/// Sensor 2 altitude at obTime (if mobile/onorbit) in km. If null, can be obtained from sensor info.
/// Example: /// Example: 1.1
/// Constraints: No constraints specified.
func (rcv *DiffOfArrival_Ingest) Sen2alt() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(42))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Sensor 2 altitude at obTime (if mobile/onorbit) in km. If null, can be obtained from sensor info.
/// Example: /// Example: 1.1
/// Constraints: No constraints specified.
func (rcv *DiffOfArrival_Ingest) MutateSen2alt(n float64) bool {
	return rcv._tab.MutateFloat64Slot(42, n)
}

/// Center frequency of the collect in Hz.
/// Example: /// Example: 1.1
/// Constraints: No constraints specified.
func (rcv *DiffOfArrival_Ingest) Frequency() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(44))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Center frequency of the collect in Hz.
/// Example: /// Example: 1.1
/// Constraints: No constraints specified.
func (rcv *DiffOfArrival_Ingest) MutateFrequency(n float64) bool {
	return rcv._tab.MutateFloat64Slot(44, n)
}

/// Bandwidth of the signal in Hz.
/// Example: /// Example: 1.1
/// Constraints: No constraints specified.
func (rcv *DiffOfArrival_Ingest) Bandwidth() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(46))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Bandwidth of the signal in Hz.
/// Example: /// Example: 1.1
/// Constraints: No constraints specified.
func (rcv *DiffOfArrival_Ingest) MutateBandwidth(n float64) bool {
	return rcv._tab.MutateFloat64Slot(46, n)
}

/// Delta range, in km. Delta range calculation convention is (sensor2 - sensor1).
/// Example: /// Example: 1.1
/// Constraints: No constraints specified.
func (rcv *DiffOfArrival_Ingest) DeltaRange() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(48))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Delta range, in km. Delta range calculation convention is (sensor2 - sensor1).
/// Example: /// Example: 1.1
/// Constraints: No constraints specified.
func (rcv *DiffOfArrival_Ingest) MutateDeltaRange(n float64) bool {
	return rcv._tab.MutateFloat64Slot(48, n)
}

/// One sigma uncertainty in delta range, in km.
/// Example: /// Example: 1.1
/// Constraints: No constraints specified.
func (rcv *DiffOfArrival_Ingest) DeltaRangeUnc() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(50))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// One sigma uncertainty in delta range, in km.
/// Example: /// Example: 1.1
/// Constraints: No constraints specified.
func (rcv *DiffOfArrival_Ingest) MutateDeltaRangeUnc(n float64) bool {
	return rcv._tab.MutateFloat64Slot(50, n)
}

/// Delta range rate, in km/sec. Delta range rate calculation convention is (sensor2 - sensor1).
/// Example: /// Example: 1.1
/// Constraints: No constraints specified.
func (rcv *DiffOfArrival_Ingest) DeltaRangeRate() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(52))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Delta range rate, in km/sec. Delta range rate calculation convention is (sensor2 - sensor1).
/// Example: /// Example: 1.1
/// Constraints: No constraints specified.
func (rcv *DiffOfArrival_Ingest) MutateDeltaRangeRate(n float64) bool {
	return rcv._tab.MutateFloat64Slot(52, n)
}

/// One sigma uncertainty in the delta range rate, in km/sec.
/// Example: /// Example: 1.1
/// Constraints: No constraints specified.
func (rcv *DiffOfArrival_Ingest) DeltaRangeRateUnc() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(54))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// One sigma uncertainty in the delta range rate, in km/sec.
/// Example: /// Example: 1.1
/// Constraints: No constraints specified.
func (rcv *DiffOfArrival_Ingest) MutateDeltaRangeRateUnc(n float64) bool {
	return rcv._tab.MutateFloat64Slot(54, n)
}

/// Signal to noise ratio, in dB.
/// Example: /// Example: 1.1
/// Constraints: No constraints specified.
func (rcv *DiffOfArrival_Ingest) Snr() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(56))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Signal to noise ratio, in dB.
/// Example: /// Example: 1.1
/// Constraints: No constraints specified.
func (rcv *DiffOfArrival_Ingest) MutateSnr(n float64) bool {
	return rcv._tab.MutateFloat64Slot(56, n)
}

/// Time difference of arrival of the center frequency signal, in seconds.  TDOA calculation convention is (sensor2 - sensor1).
/// Example: /// Example: 1.1
/// Constraints: No constraints specified.
func (rcv *DiffOfArrival_Ingest) Tdoa() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(58))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Time difference of arrival of the center frequency signal, in seconds.  TDOA calculation convention is (sensor2 - sensor1).
/// Example: /// Example: 1.1
/// Constraints: No constraints specified.
func (rcv *DiffOfArrival_Ingest) MutateTdoa(n float64) bool {
	return rcv._tab.MutateFloat64Slot(58, n)
}

/// One sigma uncertainty in time difference of arrival of the center frequency signal, in seconds.
/// Example: /// Example: 1.1
/// Constraints: No constraints specified.
func (rcv *DiffOfArrival_Ingest) TdoaUnc() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(60))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// One sigma uncertainty in time difference of arrival of the center frequency signal, in seconds.
/// Example: /// Example: 1.1
/// Constraints: No constraints specified.
func (rcv *DiffOfArrival_Ingest) MutateTdoaUnc(n float64) bool {
	return rcv._tab.MutateFloat64Slot(60, n)
}

/// Frequency difference of arrival of the center frequency signal, in Hz.  FDOA calculation convention is (sensor2 - sensor1).
/// Example: /// Example: 1.1
/// Constraints: No constraints specified.
func (rcv *DiffOfArrival_Ingest) Fdoa() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(62))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Frequency difference of arrival of the center frequency signal, in Hz.  FDOA calculation convention is (sensor2 - sensor1).
/// Example: /// Example: 1.1
/// Constraints: No constraints specified.
func (rcv *DiffOfArrival_Ingest) MutateFdoa(n float64) bool {
	return rcv._tab.MutateFloat64Slot(62, n)
}

/// One sigma uncertainty in frequency difference of arrival of the center frequency signal, in Hz.
/// Example: /// Example: 1.1
/// Constraints: No constraints specified.
func (rcv *DiffOfArrival_Ingest) FdoaUnc() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(64))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// One sigma uncertainty in frequency difference of arrival of the center frequency signal, in Hz.
/// Example: /// Example: 1.1
/// Constraints: No constraints specified.
func (rcv *DiffOfArrival_Ingest) MutateFdoaUnc(n float64) bool {
	return rcv._tab.MutateFloat64Slot(64, n)
}

/// Collection mode (e.g. SURVEY, SPOT_SEARCH, NEIGHBORHOOD_WATCH, DIRECTED_SEARCH, MANUAL, etc).
/// Example: /// Example: SURVEY
/// Constraints: Minimum length = 0, Maximum length = 32
func (rcv *DiffOfArrival_Ingest) CollectionMode() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(66))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Collection mode (e.g. SURVEY, SPOT_SEARCH, NEIGHBORHOOD_WATCH, DIRECTED_SEARCH, MANUAL, etc).
/// Example: /// Example: SURVEY
/// Constraints: Minimum length = 0, Maximum length = 32
/// Optional URI location in the document repository of the raw file parsed by the system to produce this record. To download the raw file, prepend https://udl-hostname/scs/download?id= to this value.
/// Example: /// Example: No example provided.
/// Constraints: Minimum length = 0, Maximum length = 256
func (rcv *DiffOfArrival_Ingest) RawFileUri() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(68))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Optional URI location in the document repository of the raw file parsed by the system to produce this record. To download the raw file, prepend https://udl-hostname/scs/download?id= to this value.
/// Example: /// Example: No example provided.
/// Constraints: Minimum length = 0, Maximum length = 256
/// Source of the data.
/// Example: /// Example: Bluestaq
/// Constraints: Minimum length = 1, Maximum length = 64
func (rcv *DiffOfArrival_Ingest) Source() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(70))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Source of the data.
/// Example: /// Example: Bluestaq
/// Constraints: Minimum length = 1, Maximum length = 64
/// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
/// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
/// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
/// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
/// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
/// Example: /// Example: TEST
/// Constraints: Minimum length = 1, Maximum length = 32
func (rcv *DiffOfArrival_Ingest) DataMode() DiffOfArrival_Ingest_dataMode_Enum {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(72))
	if o != 0 {
		return DiffOfArrival_Ingest_dataMode_Enum(rcv._tab.GetInt8(o + rcv._tab.Pos))
	}
	return 0
}

/// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
/// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
/// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
/// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
/// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
/// Example: /// Example: TEST
/// Constraints: Minimum length = 1, Maximum length = 32
func (rcv *DiffOfArrival_Ingest) MutateDataMode(n DiffOfArrival_Ingest_dataMode_Enum) bool {
	return rcv._tab.MutateInt8Slot(72, int8(n))
}

/// Optional array of provider/source specific tags for this data, where each element is no longer than 32 characters, used for implementing data owner conditional access controls to restrict access to the data. Should be left null by data providers unless conditional access controls are coordinated with the UDL team.
/// Example: /// Example: ['PROVIDER_TAG1', 'PROVIDER_TAG2']
/// Constraints: No constraints specified.
func (rcv *DiffOfArrival_Ingest) Tags(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(74))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *DiffOfArrival_Ingest) TagsLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(74))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

/// Optional array of provider/source specific tags for this data, where each element is no longer than 32 characters, used for implementing data owner conditional access controls to restrict access to the data. Should be left null by data providers unless conditional access controls are coordinated with the UDL team.
/// Example: /// Example: ['PROVIDER_TAG1', 'PROVIDER_TAG2']
/// Constraints: No constraints specified.
/// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
/// Example: /// Example: THIRD_PARTY_DATASOURCE
/// Constraints: Minimum length = 0, Maximum length = 64
func (rcv *DiffOfArrival_Ingest) Origin() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(76))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
/// Example: /// Example: THIRD_PARTY_DATASOURCE
/// Constraints: Minimum length = 0, Maximum length = 64
/// Time the row was created in the database, auto-populated by the system.
/// Example: /// Example: 2018-01-01T16:00:00.123Z
/// Constraints: No constraints specified.
func (rcv *DiffOfArrival_Ingest) CreatedAt() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(78))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Time the row was created in the database, auto-populated by the system.
/// Example: /// Example: 2018-01-01T16:00:00.123Z
/// Constraints: No constraints specified.
/// Application user who created the row in the database, auto-populated by the system.
/// Example: /// Example: some.user
/// Constraints: Minimum length = 1, Maximum length = 64
func (rcv *DiffOfArrival_Ingest) CreatedBy() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(80))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Application user who created the row in the database, auto-populated by the system.
/// Example: /// Example: some.user
/// Constraints: Minimum length = 1, Maximum length = 64
/// Optional source-provided and searchable metadata or descriptor of the data.
/// Example: /// Example: Example descriptor
/// Constraints: Minimum length = 0, Maximum length = 64
func (rcv *DiffOfArrival_Ingest) Descriptor() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(82))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Optional source-provided and searchable metadata or descriptor of the data.
/// Example: /// Example: Example descriptor
/// Constraints: Minimum length = 0, Maximum length = 64
/// Optional identifier to track a commercial or marketplace transaction executed to produce this data.
/// Example: /// Example: TRANSACTION-ID
/// Constraints: Minimum length = 0, Maximum length = 64
func (rcv *DiffOfArrival_Ingest) TransactionId() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(84))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Optional identifier to track a commercial or marketplace transaction executed to produce this data.
/// Example: /// Example: TRANSACTION-ID
/// Constraints: Minimum length = 0, Maximum length = 64
/// The originating source network on which this record was created, auto-populated by the system.
/// Example: /// Example: ORIG
/// Constraints: Minimum length = 0, Maximum length = 32
func (rcv *DiffOfArrival_Ingest) OrigNetwork() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(86))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The originating source network on which this record was created, auto-populated by the system.
/// Example: /// Example: ORIG
/// Constraints: Minimum length = 0, Maximum length = 32
/// The source data library from which this record was received. This could be a remote or tactical UDL or another data library. If null, the record should be assumed to have originated from the primary Enterprise UDL.
/// Example: /// Example: AXE
/// Constraints: Minimum length = 0, Maximum length = 64
func (rcv *DiffOfArrival_Ingest) SourceDl() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(88))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The source data library from which this record was received. This could be a remote or tactical UDL or another data library. If null, the record should be assumed to have originated from the primary Enterprise UDL.
/// Example: /// Example: AXE
/// Constraints: Minimum length = 0, Maximum length = 64
func DiffOfArrival_IngestStart(builder *flatbuffers.Builder) {
	builder.StartObject(43)
}
func DiffOfArrival_IngestAddId(builder *flatbuffers.Builder, id flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(id), 0)
}
func DiffOfArrival_IngestAddClassificationMarking(builder *flatbuffers.Builder, classificationMarking flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(classificationMarking), 0)
}
func DiffOfArrival_IngestAddObTime(builder *flatbuffers.Builder, obTime flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(obTime), 0)
}
func DiffOfArrival_IngestAddIdOnOrbit(builder *flatbuffers.Builder, idOnOrbit flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(3, flatbuffers.UOffsetT(idOnOrbit), 0)
}
func DiffOfArrival_IngestAddIdSensor1(builder *flatbuffers.Builder, idSensor1 flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(4, flatbuffers.UOffsetT(idSensor1), 0)
}
func DiffOfArrival_IngestAddIdSensor2(builder *flatbuffers.Builder, idSensor2 flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(5, flatbuffers.UOffsetT(idSensor2), 0)
}
func DiffOfArrival_IngestAddSatNo(builder *flatbuffers.Builder, satNo int32) {
	builder.PrependInt32Slot(6, satNo, 0)
}
func DiffOfArrival_IngestAddTaskId(builder *flatbuffers.Builder, taskId flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(7, flatbuffers.UOffsetT(taskId), 0)
}
func DiffOfArrival_IngestAddOrigObjectId(builder *flatbuffers.Builder, origObjectId flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(8, flatbuffers.UOffsetT(origObjectId), 0)
}
func DiffOfArrival_IngestAddOrigSensorId1(builder *flatbuffers.Builder, origSensorId1 flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(9, flatbuffers.UOffsetT(origSensorId1), 0)
}
func DiffOfArrival_IngestAddOrigSensorId2(builder *flatbuffers.Builder, origSensorId2 flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(10, flatbuffers.UOffsetT(origSensorId2), 0)
}
func DiffOfArrival_IngestAddUct(builder *flatbuffers.Builder, uct bool) {
	builder.PrependBoolSlot(11, uct, false)
}
func DiffOfArrival_IngestAddSensor1Delay(builder *flatbuffers.Builder, sensor1Delay float64) {
	builder.PrependFloat64Slot(12, sensor1Delay, 0.0)
}
func DiffOfArrival_IngestAddSensor2Delay(builder *flatbuffers.Builder, sensor2Delay float64) {
	builder.PrependFloat64Slot(13, sensor2Delay, 0.0)
}
func DiffOfArrival_IngestAddSenlat(builder *flatbuffers.Builder, senlat float64) {
	builder.PrependFloat64Slot(14, senlat, 0.0)
}
func DiffOfArrival_IngestAddSenlon(builder *flatbuffers.Builder, senlon float64) {
	builder.PrependFloat64Slot(15, senlon, 0.0)
}
func DiffOfArrival_IngestAddSenalt(builder *flatbuffers.Builder, senalt float64) {
	builder.PrependFloat64Slot(16, senalt, 0.0)
}
func DiffOfArrival_IngestAddSen2lat(builder *flatbuffers.Builder, sen2lat float64) {
	builder.PrependFloat64Slot(17, sen2lat, 0.0)
}
func DiffOfArrival_IngestAddSen2lon(builder *flatbuffers.Builder, sen2lon float64) {
	builder.PrependFloat64Slot(18, sen2lon, 0.0)
}
func DiffOfArrival_IngestAddSen2alt(builder *flatbuffers.Builder, sen2alt float64) {
	builder.PrependFloat64Slot(19, sen2alt, 0.0)
}
func DiffOfArrival_IngestAddFrequency(builder *flatbuffers.Builder, frequency float64) {
	builder.PrependFloat64Slot(20, frequency, 0.0)
}
func DiffOfArrival_IngestAddBandwidth(builder *flatbuffers.Builder, bandwidth float64) {
	builder.PrependFloat64Slot(21, bandwidth, 0.0)
}
func DiffOfArrival_IngestAddDeltaRange(builder *flatbuffers.Builder, deltaRange float64) {
	builder.PrependFloat64Slot(22, deltaRange, 0.0)
}
func DiffOfArrival_IngestAddDeltaRangeUnc(builder *flatbuffers.Builder, deltaRangeUnc float64) {
	builder.PrependFloat64Slot(23, deltaRangeUnc, 0.0)
}
func DiffOfArrival_IngestAddDeltaRangeRate(builder *flatbuffers.Builder, deltaRangeRate float64) {
	builder.PrependFloat64Slot(24, deltaRangeRate, 0.0)
}
func DiffOfArrival_IngestAddDeltaRangeRateUnc(builder *flatbuffers.Builder, deltaRangeRateUnc float64) {
	builder.PrependFloat64Slot(25, deltaRangeRateUnc, 0.0)
}
func DiffOfArrival_IngestAddSnr(builder *flatbuffers.Builder, snr float64) {
	builder.PrependFloat64Slot(26, snr, 0.0)
}
func DiffOfArrival_IngestAddTdoa(builder *flatbuffers.Builder, tdoa float64) {
	builder.PrependFloat64Slot(27, tdoa, 0.0)
}
func DiffOfArrival_IngestAddTdoaUnc(builder *flatbuffers.Builder, tdoaUnc float64) {
	builder.PrependFloat64Slot(28, tdoaUnc, 0.0)
}
func DiffOfArrival_IngestAddFdoa(builder *flatbuffers.Builder, fdoa float64) {
	builder.PrependFloat64Slot(29, fdoa, 0.0)
}
func DiffOfArrival_IngestAddFdoaUnc(builder *flatbuffers.Builder, fdoaUnc float64) {
	builder.PrependFloat64Slot(30, fdoaUnc, 0.0)
}
func DiffOfArrival_IngestAddCollectionMode(builder *flatbuffers.Builder, collectionMode flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(31, flatbuffers.UOffsetT(collectionMode), 0)
}
func DiffOfArrival_IngestAddRawFileUri(builder *flatbuffers.Builder, rawFileUri flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(32, flatbuffers.UOffsetT(rawFileUri), 0)
}
func DiffOfArrival_IngestAddSource(builder *flatbuffers.Builder, source flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(33, flatbuffers.UOffsetT(source), 0)
}
func DiffOfArrival_IngestAddDataMode(builder *flatbuffers.Builder, dataMode DiffOfArrival_Ingest_dataMode_Enum) {
	builder.PrependInt8Slot(34, int8(dataMode), 0)
}
func DiffOfArrival_IngestAddTags(builder *flatbuffers.Builder, tags flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(35, flatbuffers.UOffsetT(tags), 0)
}
func DiffOfArrival_IngestStartTagsVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func DiffOfArrival_IngestAddOrigin(builder *flatbuffers.Builder, origin flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(36, flatbuffers.UOffsetT(origin), 0)
}
func DiffOfArrival_IngestAddCreatedAt(builder *flatbuffers.Builder, createdAt flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(37, flatbuffers.UOffsetT(createdAt), 0)
}
func DiffOfArrival_IngestAddCreatedBy(builder *flatbuffers.Builder, createdBy flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(38, flatbuffers.UOffsetT(createdBy), 0)
}
func DiffOfArrival_IngestAddDescriptor(builder *flatbuffers.Builder, descriptor flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(39, flatbuffers.UOffsetT(descriptor), 0)
}
func DiffOfArrival_IngestAddTransactionId(builder *flatbuffers.Builder, transactionId flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(40, flatbuffers.UOffsetT(transactionId), 0)
}
func DiffOfArrival_IngestAddOrigNetwork(builder *flatbuffers.Builder, origNetwork flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(41, flatbuffers.UOffsetT(origNetwork), 0)
}
func DiffOfArrival_IngestAddSourceDl(builder *flatbuffers.Builder, sourceDl flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(42, flatbuffers.UOffsetT(sourceDl), 0)
}
func DiffOfArrival_IngestEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
