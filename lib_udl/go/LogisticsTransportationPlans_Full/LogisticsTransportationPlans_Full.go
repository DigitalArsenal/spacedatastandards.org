// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package LogisticsTransportationPlans_Full

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

/// /// Transportation plans associated with this LogisticsSupport record, used to coordinate maintenance efforts.
type LogisticsTransportationPlans_Full struct {
	_tab flatbuffers.Table
}

const LogisticsTransportationPlans_FullIdentifier = "LOGI"

func GetRootAsLogisticsTransportationPlans_Full(buf []byte, offset flatbuffers.UOffsetT) *LogisticsTransportationPlans_Full {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &LogisticsTransportationPlans_Full{}
	x.Init(buf, n+offset)
	return x
}

func FinishLogisticsTransportationPlans_FullBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	identifierBytes := []byte(LogisticsTransportationPlans_FullIdentifier)
	builder.FinishWithFileIdentifier(offset, identifierBytes)
}

func LogisticsTransportationPlans_FullBufferHasIdentifier(buf []byte) bool {
	return flatbuffers.BufferHasIdentifier(buf, LogisticsTransportationPlans_FullIdentifier)
}

func GetSizePrefixedRootAsLogisticsTransportationPlans_Full(buf []byte, offset flatbuffers.UOffsetT) *LogisticsTransportationPlans_Full {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &LogisticsTransportationPlans_Full{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedLogisticsTransportationPlans_FullBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	identifierBytes := []byte(LogisticsTransportationPlans_FullIdentifier)
	builder.FinishSizePrefixedWithFileIdentifier(offset, identifierBytes)
}

func SizePrefixedLogisticsTransportationPlans_FullBufferHasIdentifier(buf []byte) bool {
	return flatbuffers.SizePrefixedBufferHasIdentifier(buf, LogisticsTransportationPlans_FullIdentifier)
}

func (rcv *LogisticsTransportationPlans_Full) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *LogisticsTransportationPlans_Full) Table() flatbuffers.Table {
	return rcv._tab
}

/// System generated reference id for the transportation plan.  Format: TXXXXXNNNN  T - Transportation, Sequence Number, Node Id.
/// Example: /// Example: T89002
/// Constraints: Minimum length = 0, Maximum length = 10
func (rcv *LogisticsTransportationPlans_Full) PlansNumber() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// System generated reference id for the transportation plan.  Format: TXXXXXNNNN  T - Transportation, Sequence Number, Node Id.
/// Example: /// Example: T89002
/// Constraints: Minimum length = 0, Maximum length = 10
/// Indicates whether there have been changes to changes to ICAOs, estArrTime, or estDepTime since this Transportation Plan was last edited.
/// Example: /// Example: False
/// Constraints: No constraints specified.
func (rcv *LogisticsTransportationPlans_Full) MissionChange() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

/// Indicates whether there have been changes to changes to ICAOs, estArrTime, or estDepTime since this Transportation Plan was last edited.
/// Example: /// Example: False
/// Constraints: No constraints specified.
func (rcv *LogisticsTransportationPlans_Full) MutateMissionChange(n bool) bool {
	return rcv._tab.MutateBoolSlot(6, n)
}

/// Defines the transporation plan as either a deployment or redeployment.
/// Example: /// Example: DEPLOY
/// Constraints: Minimum length = 0, Maximum length = 32
func (rcv *LogisticsTransportationPlans_Full) PlanDefinition() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Defines the transporation plan as either a deployment or redeployment.
/// Example: /// Example: DEPLOY
/// Constraints: Minimum length = 0, Maximum length = 32
/// Transporation Coordination status code. Cancel, Send to APCC, working, agree, disapprove or blank.
/// Example: /// Example: N
/// Constraints: Minimum length = 1, Maximum length = 1
func (rcv *LogisticsTransportationPlans_Full) StatusCode() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Transporation Coordination status code. Cancel, Send to APCC, working, agree, disapprove or blank.
/// Example: /// Example: N
/// Constraints: Minimum length = 1, Maximum length = 1
/// The AMS username of the operator who alters the coordination status.  Automatically captured by the system.
/// Example: /// Example: SMITH, JOHN
/// Constraints: Minimum length = 0, Maximum length = 32
func (rcv *LogisticsTransportationPlans_Full) Coordinator() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The AMS username of the operator who alters the coordination status.  Automatically captured by the system.
/// Example: /// Example: SMITH, JOHN
/// Constraints: Minimum length = 0, Maximum length = 32
/// The AMS user unit_id of the operator who alters the coordination status.  Automatically captured by the system from table AMS_USER.
/// Example: /// Example: TACC
/// Constraints: Minimum length = 0, Maximum length = 10
func (rcv *LogisticsTransportationPlans_Full) CoordinatorUnit() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The AMS user unit_id of the operator who alters the coordination status.  Automatically captured by the system from table AMS_USER.
/// Example: /// Example: TACC
/// Constraints: Minimum length = 0, Maximum length = 10
/// The origin location.
/// Example: /// Example: KATL
/// Constraints: Minimum length = 0, Maximum length = 4
func (rcv *LogisticsTransportationPlans_Full) OriginIcao() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The origin location.
/// Example: /// Example: KATL
/// Constraints: Minimum length = 0, Maximum length = 4
/// ETD of the first segment, in ISO 8601 UTC format with millisecond precision.
/// Example: /// Example: 2023-07-15T14:25:00.123Z
/// Constraints: No constraints specified.
func (rcv *LogisticsTransportationPlans_Full) EstDepTime() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(18))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// ETD of the first segment, in ISO 8601 UTC format with millisecond precision.
/// Example: /// Example: 2023-07-15T14:25:00.123Z
/// Constraints: No constraints specified.
/// ETA of the final segment, in ISO 8601 UTC format with millisecond precision.
/// Example: /// Example: 2023-07-15T14:25:00.123Z
/// Constraints: No constraints specified.
func (rcv *LogisticsTransportationPlans_Full) EstArrTime() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(20))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// ETA of the final segment, in ISO 8601 UTC format with millisecond precision.
/// Example: /// Example: 2023-07-15T14:25:00.123Z
/// Constraints: No constraints specified.
/// Destination location ICAO.
/// Example: /// Example: YBCS
/// Constraints: Minimum length = 0, Maximum length = 4
func (rcv *LogisticsTransportationPlans_Full) DestinationIcao() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(22))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Destination location ICAO.
/// Example: /// Example: YBCS
/// Constraints: Minimum length = 0, Maximum length = 4
/// The identifier that represents a Logistics Master Record.
/// Example: /// Example: L62126
/// Constraints: Minimum length = 0, Maximum length = 10
func (rcv *LogisticsTransportationPlans_Full) LogisticMasterRecordId() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(24))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The identifier that represents a Logistics Master Record.
/// Example: /// Example: L62126
/// Constraints: Minimum length = 0, Maximum length = 10
/// Contains the tail number displayed by GDSS2.
/// Example: /// Example: 99209
/// Constraints: Minimum length = 0, Maximum length = 7
func (rcv *LogisticsTransportationPlans_Full) TpTailNumber() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(26))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Contains the tail number displayed by GDSS2.
/// Example: /// Example: 99209
/// Constraints: Minimum length = 0, Maximum length = 7
/// The aircraft Model Design Series (MDS) designation (e.g. E-2C HAWKEYE, F-15 EAGLE, KC-130 HERCULES, etc.) of this aircraft. Intended as, but not constrained to, MIL-STD-6016 environment dependent specific type designations.
/// Example: /// Example: C17A
/// Constraints: Minimum length = 0, Maximum length = 8
func (rcv *LogisticsTransportationPlans_Full) TpAircraftMds() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(28))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The aircraft Model Design Series (MDS) designation (e.g. E-2C HAWKEYE, F-15 EAGLE, KC-130 HERCULES, etc.) of this aircraft. Intended as, but not constrained to, MIL-STD-6016 environment dependent specific type designations.
/// Example: /// Example: C17A
/// Constraints: Minimum length = 0, Maximum length = 8
/// The major command for the current unit.
/// Example: /// Example: HQAMC
/// Constraints: Minimum length = 0, Maximum length = 250
func (rcv *LogisticsTransportationPlans_Full) Majcom() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(30))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The major command for the current unit.
/// Example: /// Example: HQAMC
/// Constraints: Minimum length = 0, Maximum length = 250
/// Approximate time of arrival of final segement, in ISO 8601 UTC format with millisecond precision.
/// Example: /// Example: 2023-07-14T20:37:00.123Z
/// Constraints: No constraints specified.
func (rcv *LogisticsTransportationPlans_Full) ApproxArrTime() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(32))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Approximate time of arrival of final segement, in ISO 8601 UTC format with millisecond precision.
/// Example: /// Example: 2023-07-14T20:37:00.123Z
/// Constraints: No constraints specified.
/// Transportation plan duration, expressed in the format MMM:SS.
/// Example: /// Example: 086:20
/// Constraints: Minimum length = 0, Maximum length = 6
func (rcv *LogisticsTransportationPlans_Full) Duration() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(34))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Transportation plan duration, expressed in the format MMM:SS.
/// Example: /// Example: 086:20
/// Constraints: Minimum length = 0, Maximum length = 6
/// Actual time of departure of first segment, in ISO 8601 UTC format with millisecond precision.
/// Example: /// Example: 2023-07-14T19:37:00.123Z
/// Constraints: No constraints specified.
func (rcv *LogisticsTransportationPlans_Full) ActDepTime() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(36))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Actual time of departure of first segment, in ISO 8601 UTC format with millisecond precision.
/// Example: /// Example: 2023-07-14T19:37:00.123Z
/// Constraints: No constraints specified.
/// GC. LGTP_CLSD_DT.  GD2:  Date when the transportation plan was closed, in ISO 8601 UTC format with millisecond precision.
/// Example: /// Example: 2023-07-14T20:37:00.123Z
/// Constraints: No constraints specified.
func (rcv *LogisticsTransportationPlans_Full) ClosedDate() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(38))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// GC. LGTP_CLSD_DT.  GD2:  Date when the transportation plan was closed, in ISO 8601 UTC format with millisecond precision.
/// Example: /// Example: 2023-07-14T20:37:00.123Z
/// Constraints: No constraints specified.
/// GC. LGTP_CANX_DT.  GD2: Date when the transportation plan was cancelled, in ISO 8601 UTC format with millisecond precision.
/// Example: /// Example: 2023-07-14T20:37:00.123Z
/// Constraints: No constraints specified.
func (rcv *LogisticsTransportationPlans_Full) CancelledDate() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(40))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// GC. LGTP_CANX_DT.  GD2: Date when the transportation plan was cancelled, in ISO 8601 UTC format with millisecond precision.
/// Example: /// Example: 2023-07-14T20:37:00.123Z
/// Constraints: No constraints specified.
/// These are the initial maintenance values entered based on the pilot descriptions or the official maintenance evaluation code.
/// Example: /// Example: NMCMU
/// Constraints: Minimum length = 0, Maximum length = 6
func (rcv *LogisticsTransportationPlans_Full) AircraftStatus() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(42))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// These are the initial maintenance values entered based on the pilot descriptions or the official maintenance evaluation code.
/// Example: /// Example: NMCMU
/// Constraints: Minimum length = 0, Maximum length = 6
/// Transportation plan enroute stops.
/// Example: /// Example: 4
/// Constraints: No constraints specified.
func (rcv *LogisticsTransportationPlans_Full) NumEnrouteStops() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(44))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

/// Transportation plan enroute stops.
/// Example: /// Example: 4
/// Constraints: No constraints specified.
func (rcv *LogisticsTransportationPlans_Full) MutateNumEnrouteStops(n int32) bool {
	return rcv._tab.MutateInt32Slot(44, n)
}

/// GDSS2 uses an 8 character serial number to uniquely identify the aircraft and MDS combination. This is a portion of the full manufacturer serial number.
/// Example: /// Example: 9009209
/// Constraints: Minimum length = 0, Maximum length = 30
func (rcv *LogisticsTransportationPlans_Full) SerialNumber() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(46))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// GDSS2 uses an 8 character serial number to uniquely identify the aircraft and MDS combination. This is a portion of the full manufacturer serial number.
/// Example: /// Example: 9009209
/// Constraints: Minimum length = 0, Maximum length = 30
/// The number of transloads for this Transportation Plan.
/// Example: /// Example: 3
/// Constraints: No constraints specified.
func (rcv *LogisticsTransportationPlans_Full) NumTransLoads() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(48))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

/// The number of transloads for this Transportation Plan.
/// Example: /// Example: 3
/// Constraints: No constraints specified.
func (rcv *LogisticsTransportationPlans_Full) MutateNumTransLoads(n int32) bool {
	return rcv._tab.MutateInt32Slot(48, n)
}

/// Last time transportation plan was updated, in ISO 8601 UTC format with millisecond precision.
/// Example: /// Example: 2023-07-14T20:37:00.123Z
/// Constraints: No constraints specified.
func (rcv *LogisticsTransportationPlans_Full) LastChangedDate() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(50))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Last time transportation plan was updated, in ISO 8601 UTC format with millisecond precision.
/// Example: /// Example: 2023-07-14T20:37:00.123Z
/// Constraints: No constraints specified.
/// The transportation segments associated with this transportation plan.
/// Example: /// Example: No example provided.
/// Constraints: No constraints specified.
func (rcv *LogisticsTransportationPlans_Full) LogisticsSegments(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(52))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *LogisticsTransportationPlans_Full) LogisticsSegmentsLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(52))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

/// The transportation segments associated with this transportation plan.
/// Example: /// Example: No example provided.
/// Constraints: No constraints specified.
/// Remarks associated with this transportation plan.
/// Example: /// Example: No example provided.
/// Constraints: No constraints specified.
func (rcv *LogisticsTransportationPlans_Full) LogisticsTransportationPlansRemarks(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(54))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *LogisticsTransportationPlans_Full) LogisticsTransportationPlansRemarksLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(54))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

/// Remarks associated with this transportation plan.
/// Example: /// Example: No example provided.
/// Constraints: No constraints specified.
func LogisticsTransportationPlans_FullStart(builder *flatbuffers.Builder) {
	builder.StartObject(26)
}
func LogisticsTransportationPlans_FullAddPlansNumber(builder *flatbuffers.Builder, plansNumber flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(plansNumber), 0)
}
func LogisticsTransportationPlans_FullAddMissionChange(builder *flatbuffers.Builder, missionChange bool) {
	builder.PrependBoolSlot(1, missionChange, false)
}
func LogisticsTransportationPlans_FullAddPlanDefinition(builder *flatbuffers.Builder, planDefinition flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(planDefinition), 0)
}
func LogisticsTransportationPlans_FullAddStatusCode(builder *flatbuffers.Builder, statusCode flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(3, flatbuffers.UOffsetT(statusCode), 0)
}
func LogisticsTransportationPlans_FullAddCoordinator(builder *flatbuffers.Builder, coordinator flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(4, flatbuffers.UOffsetT(coordinator), 0)
}
func LogisticsTransportationPlans_FullAddCoordinatorUnit(builder *flatbuffers.Builder, coordinatorUnit flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(5, flatbuffers.UOffsetT(coordinatorUnit), 0)
}
func LogisticsTransportationPlans_FullAddOriginIcao(builder *flatbuffers.Builder, originIcao flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(6, flatbuffers.UOffsetT(originIcao), 0)
}
func LogisticsTransportationPlans_FullAddEstDepTime(builder *flatbuffers.Builder, estDepTime flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(7, flatbuffers.UOffsetT(estDepTime), 0)
}
func LogisticsTransportationPlans_FullAddEstArrTime(builder *flatbuffers.Builder, estArrTime flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(8, flatbuffers.UOffsetT(estArrTime), 0)
}
func LogisticsTransportationPlans_FullAddDestinationIcao(builder *flatbuffers.Builder, destinationIcao flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(9, flatbuffers.UOffsetT(destinationIcao), 0)
}
func LogisticsTransportationPlans_FullAddLogisticMasterRecordId(builder *flatbuffers.Builder, logisticMasterRecordId flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(10, flatbuffers.UOffsetT(logisticMasterRecordId), 0)
}
func LogisticsTransportationPlans_FullAddTpTailNumber(builder *flatbuffers.Builder, tpTailNumber flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(11, flatbuffers.UOffsetT(tpTailNumber), 0)
}
func LogisticsTransportationPlans_FullAddTpAircraftMds(builder *flatbuffers.Builder, tpAircraftMds flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(12, flatbuffers.UOffsetT(tpAircraftMds), 0)
}
func LogisticsTransportationPlans_FullAddMajcom(builder *flatbuffers.Builder, majcom flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(13, flatbuffers.UOffsetT(majcom), 0)
}
func LogisticsTransportationPlans_FullAddApproxArrTime(builder *flatbuffers.Builder, approxArrTime flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(14, flatbuffers.UOffsetT(approxArrTime), 0)
}
func LogisticsTransportationPlans_FullAddDuration(builder *flatbuffers.Builder, duration flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(15, flatbuffers.UOffsetT(duration), 0)
}
func LogisticsTransportationPlans_FullAddActDepTime(builder *flatbuffers.Builder, actDepTime flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(16, flatbuffers.UOffsetT(actDepTime), 0)
}
func LogisticsTransportationPlans_FullAddClosedDate(builder *flatbuffers.Builder, closedDate flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(17, flatbuffers.UOffsetT(closedDate), 0)
}
func LogisticsTransportationPlans_FullAddCancelledDate(builder *flatbuffers.Builder, cancelledDate flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(18, flatbuffers.UOffsetT(cancelledDate), 0)
}
func LogisticsTransportationPlans_FullAddAircraftStatus(builder *flatbuffers.Builder, aircraftStatus flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(19, flatbuffers.UOffsetT(aircraftStatus), 0)
}
func LogisticsTransportationPlans_FullAddNumEnrouteStops(builder *flatbuffers.Builder, numEnrouteStops int32) {
	builder.PrependInt32Slot(20, numEnrouteStops, 0)
}
func LogisticsTransportationPlans_FullAddSerialNumber(builder *flatbuffers.Builder, serialNumber flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(21, flatbuffers.UOffsetT(serialNumber), 0)
}
func LogisticsTransportationPlans_FullAddNumTransLoads(builder *flatbuffers.Builder, numTransLoads int32) {
	builder.PrependInt32Slot(22, numTransLoads, 0)
}
func LogisticsTransportationPlans_FullAddLastChangedDate(builder *flatbuffers.Builder, lastChangedDate flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(23, flatbuffers.UOffsetT(lastChangedDate), 0)
}
func LogisticsTransportationPlans_FullAddLogisticsSegments(builder *flatbuffers.Builder, logisticsSegments flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(24, flatbuffers.UOffsetT(logisticsSegments), 0)
}
func LogisticsTransportationPlans_FullStartLogisticsSegmentsVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func LogisticsTransportationPlans_FullAddLogisticsTransportationPlansRemarks(builder *flatbuffers.Builder, logisticsTransportationPlansRemarks flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(25, flatbuffers.UOffsetT(logisticsTransportationPlansRemarks), 0)
}
func LogisticsTransportationPlans_FullStartLogisticsTransportationPlansRemarksVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func LogisticsTransportationPlans_FullEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
