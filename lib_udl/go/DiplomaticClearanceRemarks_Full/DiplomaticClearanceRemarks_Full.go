// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package DiplomaticClearanceRemarks_Full

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

/// /// Collection of diplomatic clearance remarks.
type DiplomaticClearanceRemarks_Full struct {
	_tab flatbuffers.Table
}

const DiplomaticClearanceRemarks_FullIdentifier = "DIPL"

func GetRootAsDiplomaticClearanceRemarks_Full(buf []byte, offset flatbuffers.UOffsetT) *DiplomaticClearanceRemarks_Full {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &DiplomaticClearanceRemarks_Full{}
	x.Init(buf, n+offset)
	return x
}

func FinishDiplomaticClearanceRemarks_FullBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	identifierBytes := []byte(DiplomaticClearanceRemarks_FullIdentifier)
	builder.FinishWithFileIdentifier(offset, identifierBytes)
}

func DiplomaticClearanceRemarks_FullBufferHasIdentifier(buf []byte) bool {
	return flatbuffers.BufferHasIdentifier(buf, DiplomaticClearanceRemarks_FullIdentifier)
}

func GetSizePrefixedRootAsDiplomaticClearanceRemarks_Full(buf []byte, offset flatbuffers.UOffsetT) *DiplomaticClearanceRemarks_Full {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &DiplomaticClearanceRemarks_Full{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedDiplomaticClearanceRemarks_FullBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	identifierBytes := []byte(DiplomaticClearanceRemarks_FullIdentifier)
	builder.FinishSizePrefixedWithFileIdentifier(offset, identifierBytes)
}

func SizePrefixedDiplomaticClearanceRemarks_FullBufferHasIdentifier(buf []byte) bool {
	return flatbuffers.SizePrefixedBufferHasIdentifier(buf, DiplomaticClearanceRemarks_FullIdentifier)
}

func (rcv *DiplomaticClearanceRemarks_Full) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *DiplomaticClearanceRemarks_Full) Table() flatbuffers.Table {
	return rcv._tab
}

/// Global Decision Support System (GDSS) remark identifier.
/// Example: /// Example: GDSSREMARK-ID
/// Constraints: Minimum length = 0, Maximum length = 36
func (rcv *DiplomaticClearanceRemarks_Full) GdssRemarkId() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Global Decision Support System (GDSS) remark identifier.
/// Example: /// Example: GDSSREMARK-ID
/// Constraints: Minimum length = 0, Maximum length = 36
/// Text of the remark.
/// Example: /// Example: Example mission remarks.
/// Constraints: Minimum length = 0, Maximum length = 1024
func (rcv *DiplomaticClearanceRemarks_Full) Text() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Text of the remark.
/// Example: /// Example: Example mission remarks.
/// Constraints: Minimum length = 0, Maximum length = 1024
/// Date the remark was published, in ISO 8601 UTC format, with millisecond precision.
/// Example: /// Example: 2024-01-01T01:01:01.123Z
/// Constraints: No constraints specified.
func (rcv *DiplomaticClearanceRemarks_Full) Date() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Date the remark was published, in ISO 8601 UTC format, with millisecond precision.
/// Example: /// Example: 2024-01-01T01:01:01.123Z
/// Constraints: No constraints specified.
/// User who published the remark.
/// Example: /// Example: John Doe
/// Constraints: Minimum length = 0, Maximum length = 20
func (rcv *DiplomaticClearanceRemarks_Full) User() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// User who published the remark.
/// Example: /// Example: John Doe
/// Constraints: Minimum length = 0, Maximum length = 20
func DiplomaticClearanceRemarks_FullStart(builder *flatbuffers.Builder) {
	builder.StartObject(4)
}
func DiplomaticClearanceRemarks_FullAddGdssRemarkId(builder *flatbuffers.Builder, gdssRemarkId flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(gdssRemarkId), 0)
}
func DiplomaticClearanceRemarks_FullAddText(builder *flatbuffers.Builder, text flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(text), 0)
}
func DiplomaticClearanceRemarks_FullAddDate(builder *flatbuffers.Builder, date flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(date), 0)
}
func DiplomaticClearanceRemarks_FullAddUser(builder *flatbuffers.Builder, user flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(3, flatbuffers.UOffsetT(user), 0)
}
func DiplomaticClearanceRemarks_FullEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
