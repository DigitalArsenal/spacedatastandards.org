// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package LogisticsDiscrepancyInfos_Abridged

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

/// /// Discrepancy information associated with this LogisticsSupport record.
type LogisticsDiscrepancyInfos_Abridged struct {
	_tab flatbuffers.Table
}

const LogisticsDiscrepancyInfos_AbridgedIdentifier = "LOGI"

func GetRootAsLogisticsDiscrepancyInfos_Abridged(buf []byte, offset flatbuffers.UOffsetT) *LogisticsDiscrepancyInfos_Abridged {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &LogisticsDiscrepancyInfos_Abridged{}
	x.Init(buf, n+offset)
	return x
}

func FinishLogisticsDiscrepancyInfos_AbridgedBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	identifierBytes := []byte(LogisticsDiscrepancyInfos_AbridgedIdentifier)
	builder.FinishWithFileIdentifier(offset, identifierBytes)
}

func LogisticsDiscrepancyInfos_AbridgedBufferHasIdentifier(buf []byte) bool {
	return flatbuffers.BufferHasIdentifier(buf, LogisticsDiscrepancyInfos_AbridgedIdentifier)
}

func GetSizePrefixedRootAsLogisticsDiscrepancyInfos_Abridged(buf []byte, offset flatbuffers.UOffsetT) *LogisticsDiscrepancyInfos_Abridged {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &LogisticsDiscrepancyInfos_Abridged{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedLogisticsDiscrepancyInfos_AbridgedBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	identifierBytes := []byte(LogisticsDiscrepancyInfos_AbridgedIdentifier)
	builder.FinishSizePrefixedWithFileIdentifier(offset, identifierBytes)
}

func SizePrefixedLogisticsDiscrepancyInfos_AbridgedBufferHasIdentifier(buf []byte) bool {
	return flatbuffers.SizePrefixedBufferHasIdentifier(buf, LogisticsDiscrepancyInfos_AbridgedIdentifier)
}

func (rcv *LogisticsDiscrepancyInfos_Abridged) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *LogisticsDiscrepancyInfos_Abridged) Table() flatbuffers.Table {
	return rcv._tab
}

/// Job Control Number of the discrepancy.
/// Example: /// Example: 231942400
/// Constraints: Minimum length = 0, Maximum length = 12
func (rcv *LogisticsDiscrepancyInfos_Abridged) Jcn() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Job Control Number of the discrepancy.
/// Example: /// Example: 231942400
/// Constraints: Minimum length = 0, Maximum length = 12
/// The aircraft discrepancy description.
/// Example: /// Example: PILOT WINDSHIELD PANEL ASSY CRACKED, AND ARCING REQ R2 IAW 56.11.10
/// Constraints: Minimum length = 0, Maximum length = 680
func (rcv *LogisticsDiscrepancyInfos_Abridged) DiscrepancyInfo() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The aircraft discrepancy description.
/// Example: /// Example: PILOT WINDSHIELD PANEL ASSY CRACKED, AND ARCING REQ R2 IAW 56.11.10
/// Constraints: Minimum length = 0, Maximum length = 680
/// The job start time, in ISO 8601 UTC format with millisecond precision.
/// Example: /// Example: 2023-07-17T10:30:00.123Z
/// Constraints: No constraints specified.
func (rcv *LogisticsDiscrepancyInfos_Abridged) JobStTime() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The job start time, in ISO 8601 UTC format with millisecond precision.
/// Example: /// Example: 2023-07-17T10:30:00.123Z
/// Constraints: No constraints specified.
/// The discrepancy closure time, in ISO 8601 UTC format with millisecond precision.
/// Example: /// Example: 2023-07-17T10:30:00.123Z
/// Constraints: No constraints specified.
func (rcv *LogisticsDiscrepancyInfos_Abridged) ClosureTime() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The discrepancy closure time, in ISO 8601 UTC format with millisecond precision.
/// Example: /// Example: 2023-07-17T10:30:00.123Z
/// Constraints: No constraints specified.
func LogisticsDiscrepancyInfos_AbridgedStart(builder *flatbuffers.Builder) {
	builder.StartObject(4)
}
func LogisticsDiscrepancyInfos_AbridgedAddJcn(builder *flatbuffers.Builder, jcn flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(jcn), 0)
}
func LogisticsDiscrepancyInfos_AbridgedAddDiscrepancyInfo(builder *flatbuffers.Builder, discrepancyInfo flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(discrepancyInfo), 0)
}
func LogisticsDiscrepancyInfos_AbridgedAddJobStTime(builder *flatbuffers.Builder, jobStTime flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(jobStTime), 0)
}
func LogisticsDiscrepancyInfos_AbridgedAddClosureTime(builder *flatbuffers.Builder, closureTime flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(3, flatbuffers.UOffsetT(closureTime), 0)
}
func LogisticsDiscrepancyInfos_AbridgedEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
