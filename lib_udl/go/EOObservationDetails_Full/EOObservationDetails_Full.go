// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package EOObservationDetails_Full

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

/// /// Model representation of additional detailed observation data for electro-optical based sensor phenomenologies.
type EOObservationDetails_Full struct {
	_tab flatbuffers.Table
}

const EOObservationDetails_FullIdentifier = "EOOB"

func GetRootAsEOObservationDetails_Full(buf []byte, offset flatbuffers.UOffsetT) *EOObservationDetails_Full {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &EOObservationDetails_Full{}
	x.Init(buf, n+offset)
	return x
}

func FinishEOObservationDetails_FullBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	identifierBytes := []byte(EOObservationDetails_FullIdentifier)
	builder.FinishWithFileIdentifier(offset, identifierBytes)
}

func EOObservationDetails_FullBufferHasIdentifier(buf []byte) bool {
	return flatbuffers.BufferHasIdentifier(buf, EOObservationDetails_FullIdentifier)
}

func GetSizePrefixedRootAsEOObservationDetails_Full(buf []byte, offset flatbuffers.UOffsetT) *EOObservationDetails_Full {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &EOObservationDetails_Full{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedEOObservationDetails_FullBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	identifierBytes := []byte(EOObservationDetails_FullIdentifier)
	builder.FinishSizePrefixedWithFileIdentifier(offset, identifierBytes)
}

func SizePrefixedEOObservationDetails_FullBufferHasIdentifier(buf []byte) bool {
	return flatbuffers.SizePrefixedBufferHasIdentifier(buf, EOObservationDetails_FullIdentifier)
}

func (rcv *EOObservationDetails_Full) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *EOObservationDetails_Full) Table() flatbuffers.Table {
	return rcv._tab
}

/// Unique identifier of the parent EOObservation.
/// Example: /// Example: EOOBSERVATION-ID
/// Constraints: Minimum length = 1, Maximum length = 36
func (rcv *EOObservationDetails_Full) IdEoobservation() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Unique identifier of the parent EOObservation.
/// Example: /// Example: EOOBSERVATION-ID
/// Constraints: Minimum length = 1, Maximum length = 36
/// Classification marking of the data in IC/CAPCO Portion-marked format, will be set to EOObservation classificationMarking if blank.
/// Example: /// Example: U
/// Constraints: Minimum length = 1, Maximum length = 128
func (rcv *EOObservationDetails_Full) ClassificationMarking() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Classification marking of the data in IC/CAPCO Portion-marked format, will be set to EOObservation classificationMarking if blank.
/// Example: /// Example: U
/// Constraints: Minimum length = 1, Maximum length = 128
/// Ob detection time in ISO 8601 UTC with microsecond precision, will be set to EOObservation obTime if blank.
/// Example: /// Example: 2018-01-01T16:00:00.123456Z
/// Constraints: No constraints specified.
func (rcv *EOObservationDetails_Full) ObTime() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Ob detection time in ISO 8601 UTC with microsecond precision, will be set to EOObservation obTime if blank.
/// Example: /// Example: 2018-01-01T16:00:00.123456Z
/// Constraints: No constraints specified.
/// Predicted Right Ascension of the Target object from the frame of reference of the sensor (J2000, geocentric velocity aberration). SGP4 and VCMs produce geocentric origin and velocity aberration and subtracting the sensor geocentric position of the sensor places in its reference frame.
/// Example: /// Example: 10.1
/// Constraints: No constraints specified.
func (rcv *EOObservationDetails_Full) PredictedRa() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Predicted Right Ascension of the Target object from the frame of reference of the sensor (J2000, geocentric velocity aberration). SGP4 and VCMs produce geocentric origin and velocity aberration and subtracting the sensor geocentric position of the sensor places in its reference frame.
/// Example: /// Example: 10.1
/// Constraints: No constraints specified.
func (rcv *EOObservationDetails_Full) MutatePredictedRa(n float64) bool {
	return rcv._tab.MutateFloat64Slot(10, n)
}

/// Predicted Declination of the Target object from the frame of reference of the sensor (J2000, geocentric velocity aberration). SGP4 and VCMs produce geocentric origin and velocity aberration and subtracting the sensor geocentric position of the sensor places in its reference frame.
/// Example: /// Example: 10.1
/// Constraints: No constraints specified.
func (rcv *EOObservationDetails_Full) PredictedDeclination() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Predicted Declination of the Target object from the frame of reference of the sensor (J2000, geocentric velocity aberration). SGP4 and VCMs produce geocentric origin and velocity aberration and subtracting the sensor geocentric position of the sensor places in its reference frame.
/// Example: /// Example: 10.1
/// Constraints: No constraints specified.
func (rcv *EOObservationDetails_Full) MutatePredictedDeclination(n float64) bool {
	return rcv._tab.MutateFloat64Slot(12, n)
}

/// Predicted Azimuth angle of the target object from a ground -based sensor (no atmospheric refraction correction required). AZ_EL implies apparent topocentric place in true of date reference frame as seen from the observer with aberration due to the observer velocity and light travel time applied.
/// Example: /// Example: 10.1
/// Constraints: No constraints specified.
func (rcv *EOObservationDetails_Full) PredictedAzimuth() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Predicted Azimuth angle of the target object from a ground -based sensor (no atmospheric refraction correction required). AZ_EL implies apparent topocentric place in true of date reference frame as seen from the observer with aberration due to the observer velocity and light travel time applied.
/// Example: /// Example: 10.1
/// Constraints: No constraints specified.
func (rcv *EOObservationDetails_Full) MutatePredictedAzimuth(n float64) bool {
	return rcv._tab.MutateFloat64Slot(14, n)
}

/// Predicted elevation angle of the target object from a ground -based sensor (no atmospheric refraction correction required). AZ_EL implies apparent topocentric place in true of date reference frame as seen from the observer with aberration due to the observer velocity and light travel time applied.
/// Example: /// Example: 10.1
/// Constraints: No constraints specified.
func (rcv *EOObservationDetails_Full) PredictedElevation() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Predicted elevation angle of the target object from a ground -based sensor (no atmospheric refraction correction required). AZ_EL implies apparent topocentric place in true of date reference frame as seen from the observer with aberration due to the observer velocity and light travel time applied.
/// Example: /// Example: 10.1
/// Constraints: No constraints specified.
func (rcv *EOObservationDetails_Full) MutatePredictedElevation(n float64) bool {
	return rcv._tab.MutateFloat64Slot(16, n)
}

/// Azimuth angle of the sun from a ground-based telescope (no atmospheric refraction correction required) the observer with aberration due to the observer velocity and light travel time applied.
/// Example: /// Example: 10.1
/// Constraints: No constraints specified.
func (rcv *EOObservationDetails_Full) SunAzimuth() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(18))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Azimuth angle of the sun from a ground-based telescope (no atmospheric refraction correction required) the observer with aberration due to the observer velocity and light travel time applied.
/// Example: /// Example: 10.1
/// Constraints: No constraints specified.
func (rcv *EOObservationDetails_Full) MutateSunAzimuth(n float64) bool {
	return rcv._tab.MutateFloat64Slot(18, n)
}

/// Elevation angle of the sun from a ground-based telescope (no atmospheric refraction correction required).
/// Example: /// Example: 10.1
/// Constraints: No constraints specified.
func (rcv *EOObservationDetails_Full) SunElevation() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(20))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Elevation angle of the sun from a ground-based telescope (no atmospheric refraction correction required).
/// Example: /// Example: 10.1
/// Constraints: No constraints specified.
func (rcv *EOObservationDetails_Full) MutateSunElevation(n float64) bool {
	return rcv._tab.MutateFloat64Slot(20, n)
}

/// The value is the number of spectral filters used.
/// Example: /// Example: 10
/// Constraints: No constraints specified.
func (rcv *EOObservationDetails_Full) NumSpectralFilters() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(22))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

/// The value is the number of spectral filters used.
/// Example: /// Example: 10
/// Constraints: No constraints specified.
func (rcv *EOObservationDetails_Full) MutateNumSpectralFilters(n int32) bool {
	return rcv._tab.MutateInt32Slot(22, n)
}

/// Array of the SpectralFilters keywords, must be present for all values n=1 to numSpectralFilters, in incrementing order of n, and for no other values of n.
/// Example: /// Example: ['Keyword1', 'Keyword2']
/// Constraints: No constraints specified.
func (rcv *EOObservationDetails_Full) SpectralFilters(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(24))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *EOObservationDetails_Full) SpectralFiltersLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(24))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

/// Array of the SpectralFilters keywords, must be present for all values n=1 to numSpectralFilters, in incrementing order of n, and for no other values of n.
/// Example: /// Example: ['Keyword1', 'Keyword2']
/// Constraints: No constraints specified.
/// This is the in-band average irradiance of a 0th mag source. Must be present for all values n=1 to numSpectralFilters, in incrementing order of n, and for no other values of n.  Units = W/m2/nm.
/// Example: /// Example: [1.1, 2.1, 3.1]
/// Constraints: No constraints specified.
func (rcv *EOObservationDetails_Full) SpectralZmfl(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(26))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *EOObservationDetails_Full) SpectralZmflLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(26))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

/// This is the in-band average irradiance of a 0th mag source. Must be present for all values n=1 to numSpectralFilters, in incrementing order of n, and for no other values of n.  Units = W/m2/nm.
/// Example: /// Example: [1.1, 2.1, 3.1]
/// Constraints: No constraints specified.
/// This is the in-band solar magnitude at 1 A.U. Must be present for all values n=1 to numSpectralFilters, in incrementing order of n, and for no other values of n.  Units = mag.
/// Example: /// Example: [1.1, 2.1, 3.1]
/// Constraints: No constraints specified.
func (rcv *EOObservationDetails_Full) SpectralFilterSolarMag(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(28))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *EOObservationDetails_Full) SpectralFilterSolarMagLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(28))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

/// This is the in-band solar magnitude at 1 A.U. Must be present for all values n=1 to numSpectralFilters, in incrementing order of n, and for no other values of n.  Units = mag.
/// Example: /// Example: [1.1, 2.1, 3.1]
/// Constraints: No constraints specified.
/// This is the value for the zero-point calculated for each filter denoted in spectralFilters. It is the difference between the catalog mag and instrumental mag for a set of standard stars. For use with All Sky photometry. Must be present for all values n=1 to numSpectralFilters, in incrementing order of n, and for no other values of n.
/// Example: /// Example: [1.1, 2.1, 3.1]
/// Constraints: No constraints specified.
func (rcv *EOObservationDetails_Full) ZeroPoints(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(30))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *EOObservationDetails_Full) ZeroPointsLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(30))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

/// This is the value for the zero-point calculated for each filter denoted in spectralFilters. It is the difference between the catalog mag and instrumental mag for a set of standard stars. For use with All Sky photometry. Must be present for all values n=1 to numSpectralFilters, in incrementing order of n, and for no other values of n.
/// Example: /// Example: [1.1, 2.1, 3.1]
/// Constraints: No constraints specified.
/// This is the uncertainty in the zero point for the filter denoted in spectralFilters. For use with All Sky photometry. Must be present for all values n=1 to numSpectralFilters, in incrementing order of n, and for no other values of n.
/// Example: /// Example: [1.1, 2.1, 3.1]
/// Constraints: No constraints specified.
func (rcv *EOObservationDetails_Full) ZeroPointsUnc(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(32))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *EOObservationDetails_Full) ZeroPointsUncLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(32))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

/// This is the uncertainty in the zero point for the filter denoted in spectralFilters. For use with All Sky photometry. Must be present for all values n=1 to numSpectralFilters, in incrementing order of n, and for no other values of n.
/// Example: /// Example: [1.1, 2.1, 3.1]
/// Constraints: No constraints specified.
/// The extinction coefficient computed for the nth filter. Must be present for all values n=1 to numSpectralFilters, in incrementing order of n, and for no other values of n. Units = mag/airmass.
/// Example: /// Example: [1.1, 2.1, 3.1]
/// Constraints: No constraints specified.
func (rcv *EOObservationDetails_Full) ExtinctionCoeffs(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(34))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *EOObservationDetails_Full) ExtinctionCoeffsLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(34))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

/// The extinction coefficient computed for the nth filter. Must be present for all values n=1 to numSpectralFilters, in incrementing order of n, and for no other values of n. Units = mag/airmass.
/// Example: /// Example: [1.1, 2.1, 3.1]
/// Constraints: No constraints specified.
/// This is the uncertainty in the extinction coefficient for the nth filter. Must be present for all values n=1 to numSpectralFilters, in incrementing order of n, and for no other values of n. -9999 for space-based sensors. Units = mag/airmass.
/// Example: /// Example: [1.1, 2.1, 3.1]
/// Constraints: No constraints specified.
func (rcv *EOObservationDetails_Full) ExtinctionCoeffsUnc(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(36))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *EOObservationDetails_Full) ExtinctionCoeffsUncLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(36))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

/// This is the uncertainty in the extinction coefficient for the nth filter. Must be present for all values n=1 to numSpectralFilters, in incrementing order of n, and for no other values of n. -9999 for space-based sensors. Units = mag/airmass.
/// Example: /// Example: [1.1, 2.1, 3.1]
/// Constraints: No constraints specified.
/// Color coefficient for filter n for a space-based sensor where there is no atmospheric extinction. Must be present for all values n=1 to numSpectralFilters, in incrementing order of n, and for no other values of n.
/// Example: /// Example: [1.1, 2.1, 3.1]
/// Constraints: No constraints specified.
func (rcv *EOObservationDetails_Full) ColorCoeffs(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(38))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *EOObservationDetails_Full) ColorCoeffsLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(38))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

/// Color coefficient for filter n for a space-based sensor where there is no atmospheric extinction. Must be present for all values n=1 to numSpectralFilters, in incrementing order of n, and for no other values of n.
/// Example: /// Example: [1.1, 2.1, 3.1]
/// Constraints: No constraints specified.
/// The value is the number of neutral density filters used.
/// Example: /// Example: 12
/// Constraints: No constraints specified.
func (rcv *EOObservationDetails_Full) NumNeutralDensityFilters() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(40))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

/// The value is the number of neutral density filters used.
/// Example: /// Example: 12
/// Constraints: No constraints specified.
func (rcv *EOObservationDetails_Full) MutateNumNeutralDensityFilters(n int32) bool {
	return rcv._tab.MutateInt32Slot(40, n)
}

/// Must be present for all values n=1 to numNeutralDensityFilters, in incrementing order of n, and for no other values of n.
/// Example: /// Example: ['numNeutralDensityFilters1', 'numNeutralDensityFilters2']
/// Constraints: No constraints specified.
func (rcv *EOObservationDetails_Full) NeutralDensityFilterNames(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(42))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *EOObservationDetails_Full) NeutralDensityFilterNamesLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(42))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

/// Must be present for all values n=1 to numNeutralDensityFilters, in incrementing order of n, and for no other values of n.
/// Example: /// Example: ['numNeutralDensityFilters1', 'numNeutralDensityFilters2']
/// Constraints: No constraints specified.
/// The transmission of the nth neutral density filter. Must be present for all values n=1 to numNeutralDensityFilters, in incrementing order of n, and for no other values of n.
/// Example: /// Example: [1.1, 2.1, 3.1]
/// Constraints: No constraints specified.
func (rcv *EOObservationDetails_Full) NeutralDensityFilterTransmissions(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(44))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *EOObservationDetails_Full) NeutralDensityFilterTransmissionsLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(44))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

/// The transmission of the nth neutral density filter. Must be present for all values n=1 to numNeutralDensityFilters, in incrementing order of n, and for no other values of n.
/// Example: /// Example: [1.1, 2.1, 3.1]
/// Constraints: No constraints specified.
/// This is the uncertainty in the transmission for the nth filter. Must be present for all values n=1 to numNeutralDensityFilters, in incrementing order of n, and for no other values of n.
/// Example: /// Example: [1.1, 2.1, 3.1]
/// Constraints: No constraints specified.
func (rcv *EOObservationDetails_Full) NeutralDensityFilterTransmissionsUnc(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(46))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *EOObservationDetails_Full) NeutralDensityFilterTransmissionsUncLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(46))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

/// This is the uncertainty in the transmission for the nth filter. Must be present for all values n=1 to numNeutralDensityFilters, in incrementing order of n, and for no other values of n.
/// Example: /// Example: [1.1, 2.1, 3.1]
/// Constraints: No constraints specified.
/// Some sensors have gain settings. This value is the gain used during the observation in units e-/ADU. If no gain is used, the value = 1.
/// Example: /// Example: 234.2
/// Constraints: No constraints specified.
func (rcv *EOObservationDetails_Full) Gain() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(48))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Some sensors have gain settings. This value is the gain used during the observation in units e-/ADU. If no gain is used, the value = 1.
/// Example: /// Example: 234.2
/// Constraints: No constraints specified.
func (rcv *EOObservationDetails_Full) MutateGain(n float64) bool {
	return rcv._tab.MutateFloat64Slot(48, n)
}

/// Sensor instantaneous field of view (ratio of pixel pitch to focal length).
/// Example: /// Example: 0.2
/// Constraints: No constraints specified.
func (rcv *EOObservationDetails_Full) Ifov() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(50))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Sensor instantaneous field of view (ratio of pixel pitch to focal length).
/// Example: /// Example: 0.2
/// Constraints: No constraints specified.
func (rcv *EOObservationDetails_Full) MutateIfov(n float64) bool {
	return rcv._tab.MutateFloat64Slot(50, n)
}

/// Pixel array size (width) in pixels.
/// Example: /// Example: 12
/// Constraints: No constraints specified.
func (rcv *EOObservationDetails_Full) PixelArrayWidth() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(52))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

/// Pixel array size (width) in pixels.
/// Example: /// Example: 12
/// Constraints: No constraints specified.
func (rcv *EOObservationDetails_Full) MutatePixelArrayWidth(n int32) bool {
	return rcv._tab.MutateInt32Slot(52, n)
}

/// Pixel array size (height) in pixels.
/// Example: /// Example: 23
/// Constraints: No constraints specified.
func (rcv *EOObservationDetails_Full) PixelArrayHeight() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(54))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

/// Pixel array size (height) in pixels.
/// Example: /// Example: 23
/// Constraints: No constraints specified.
func (rcv *EOObservationDetails_Full) MutatePixelArrayHeight(n int32) bool {
	return rcv._tab.MutateInt32Slot(54, n)
}

/// Minimum valid pixel value, this is typically 0.
/// Example: /// Example: 12
/// Constraints: No constraints specified.
func (rcv *EOObservationDetails_Full) PixelMin() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(56))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

/// Minimum valid pixel value, this is typically 0.
/// Example: /// Example: 12
/// Constraints: No constraints specified.
func (rcv *EOObservationDetails_Full) MutatePixelMin(n int32) bool {
	return rcv._tab.MutateInt32Slot(56, n)
}

/// Maximum valid pixel value, this is defined as 2^(number of bits per pixel). For example, a CCD with 8-bitpixels, would have a maximum valid pixel value of 2^8 = 256. This can represent the saturation value of the detector, but some sensors will saturate at a value significantly lower than full well depth. This is the analog-to-digital conversion (ADC) saturation value.
/// Example: /// Example: 256
/// Constraints: No constraints specified.
func (rcv *EOObservationDetails_Full) PixelMax() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(58))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

/// Maximum valid pixel value, this is defined as 2^(number of bits per pixel). For example, a CCD with 8-bitpixels, would have a maximum valid pixel value of 2^8 = 256. This can represent the saturation value of the detector, but some sensors will saturate at a value significantly lower than full well depth. This is the analog-to-digital conversion (ADC) saturation value.
/// Example: /// Example: 256
/// Constraints: No constraints specified.
func (rcv *EOObservationDetails_Full) MutatePixelMax(n int32) bool {
	return rcv._tab.MutateInt32Slot(58, n)
}

/// Observed centroid row number on the focal plane in pixels (0 is top edge, 0.5 is center of pixels along top of image).
/// Example: /// Example: 0.1
/// Constraints: No constraints specified.
func (rcv *EOObservationDetails_Full) CentroidRow() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(60))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Observed centroid row number on the focal plane in pixels (0 is top edge, 0.5 is center of pixels along top of image).
/// Example: /// Example: 0.1
/// Constraints: No constraints specified.
func (rcv *EOObservationDetails_Full) MutateCentroidRow(n float64) bool {
	return rcv._tab.MutateFloat64Slot(60, n)
}

/// Observed centroid column number on the focal plane in pixels (0 is left edge, 0.5 is center of pixels along left of image).
/// Example: /// Example: 0.5
/// Constraints: No constraints specified.
func (rcv *EOObservationDetails_Full) CentroidColumn() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(62))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Observed centroid column number on the focal plane in pixels (0 is left edge, 0.5 is center of pixels along left of image).
/// Example: /// Example: 0.5
/// Constraints: No constraints specified.
func (rcv *EOObservationDetails_Full) MutateCentroidColumn(n float64) bool {
	return rcv._tab.MutateFloat64Slot(62, n)
}

/// Spatial variance of image distribution in vertical direction measured in pixels squared.
/// Example: /// Example: 0.1
/// Constraints: No constraints specified.
func (rcv *EOObservationDetails_Full) RowVariance() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(64))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Spatial variance of image distribution in vertical direction measured in pixels squared.
/// Example: /// Example: 0.1
/// Constraints: No constraints specified.
func (rcv *EOObservationDetails_Full) MutateRowVariance(n float64) bool {
	return rcv._tab.MutateFloat64Slot(64, n)
}

/// Spatial variance of image distribution in horizontal direction measured in pixels squared.
/// Example: /// Example: 0.1
/// Constraints: No constraints specified.
func (rcv *EOObservationDetails_Full) ColumnVariance() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(66))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Spatial variance of image distribution in horizontal direction measured in pixels squared.
/// Example: /// Example: 0.1
/// Constraints: No constraints specified.
func (rcv *EOObservationDetails_Full) MutateColumnVariance(n float64) bool {
	return rcv._tab.MutateFloat64Slot(66, n)
}

/// Spatial covariance of image distribution across horizontal and vertical directions measured in pixels squared.
/// Example: /// Example: 0.01
/// Constraints: No constraints specified.
func (rcv *EOObservationDetails_Full) RowColCov() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(68))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Spatial covariance of image distribution across horizontal and vertical directions measured in pixels squared.
/// Example: /// Example: 0.01
/// Constraints: No constraints specified.
func (rcv *EOObservationDetails_Full) MutateRowColCov(n float64) bool {
	return rcv._tab.MutateFloat64Slot(68, n)
}

/// An array of measurements that correspond to the distance from the streak center measured from the optical image in pixels that show change over an interval of time. The array length is dependent on the length of the streak. The distFromStreakCenter, surfBrightness, and surfBrightnessUnc arrays will match in size.
/// Example: /// Example: [-127.153, -126.153, -125.153]
/// Constraints: No constraints specified.
func (rcv *EOObservationDetails_Full) DistFromStreakCenter(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(70))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *EOObservationDetails_Full) DistFromStreakCenterLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(70))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

/// An array of measurements that correspond to the distance from the streak center measured from the optical image in pixels that show change over an interval of time. The array length is dependent on the length of the streak. The distFromStreakCenter, surfBrightness, and surfBrightnessUnc arrays will match in size.
/// Example: /// Example: [-127.153, -126.153, -125.153]
/// Constraints: No constraints specified.
/// An array of surface brightness measurements in magnitudes per square arcsecond from the optical image that show change over an interval of time. The array length is dependent on the length of the streak. The distFromStreakCenter, surfBrightness, and surfBrightnessUnc arrays will match in size.
/// Example: /// Example: [21.01, 21.382, 21.725]
/// Constraints: No constraints specified.
func (rcv *EOObservationDetails_Full) SurfBrightness(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(72))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *EOObservationDetails_Full) SurfBrightnessLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(72))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

/// An array of surface brightness measurements in magnitudes per square arcsecond from the optical image that show change over an interval of time. The array length is dependent on the length of the streak. The distFromStreakCenter, surfBrightness, and surfBrightnessUnc arrays will match in size.
/// Example: /// Example: [21.01, 21.382, 21.725]
/// Constraints: No constraints specified.
/// An array of surface brightness uncertainty measurements in magnitudes per square arcsecond from the optical image that show change over an interval of time. The array length is dependent on the length of the streak. The distFromStreakCenter, surfBrightness, and surfBrightnessUnc arrays will match in size.
/// Example: /// Example: [0.165, 0.165, 0.165]
/// Constraints: No constraints specified.
func (rcv *EOObservationDetails_Full) SurfBrightnessUnc(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(74))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *EOObservationDetails_Full) SurfBrightnessUncLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(74))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

/// An array of surface brightness uncertainty measurements in magnitudes per square arcsecond from the optical image that show change over an interval of time. The array length is dependent on the length of the streak. The distFromStreakCenter, surfBrightness, and surfBrightnessUnc arrays will match in size.
/// Example: /// Example: [0.165, 0.165, 0.165]
/// Constraints: No constraints specified.
/// Uncertainty in the times reported in UTC in seconds.
/// Example: /// Example: 13.1
/// Constraints: No constraints specified.
func (rcv *EOObservationDetails_Full) TimesUnc() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(76))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Uncertainty in the times reported in UTC in seconds.
/// Example: /// Example: 13.1
/// Constraints: No constraints specified.
func (rcv *EOObservationDetails_Full) MutateTimesUnc(n float64) bool {
	return rcv._tab.MutateFloat64Slot(76, n)
}

/// Operating temperature of CCD recorded during exposure or measured during calibrations in K.
/// Example: /// Example: 123.4
/// Constraints: No constraints specified.
func (rcv *EOObservationDetails_Full) CcdTemp() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(78))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Operating temperature of CCD recorded during exposure or measured during calibrations in K.
/// Example: /// Example: 123.4
/// Constraints: No constraints specified.
func (rcv *EOObservationDetails_Full) MutateCcdTemp(n float64) bool {
	return rcv._tab.MutateFloat64Slot(78, n)
}

/// The reference number, x, where x ranges from 1 to n, where n is the number specified in spectralFilters that corresponds to the spectral filter given in the corresponding spectralFilterNames.
/// Example: /// Example: 23
/// Constraints: No constraints specified.
func (rcv *EOObservationDetails_Full) CurrentSpectralFilterNum() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(80))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

/// The reference number, x, where x ranges from 1 to n, where n is the number specified in spectralFilters that corresponds to the spectral filter given in the corresponding spectralFilterNames.
/// Example: /// Example: 23
/// Constraints: No constraints specified.
func (rcv *EOObservationDetails_Full) MutateCurrentSpectralFilterNum(n int32) bool {
	return rcv._tab.MutateInt32Slot(80, n)
}

/// The reference number n, in neutralDensityFilters for the currently used neutral density filter.
/// Example: /// Example: 3
/// Constraints: No constraints specified.
func (rcv *EOObservationDetails_Full) CurrentNeutralDensityFilterNum() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(82))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

/// The reference number n, in neutralDensityFilters for the currently used neutral density filter.
/// Example: /// Example: 3
/// Constraints: No constraints specified.
func (rcv *EOObservationDetails_Full) MutateCurrentNeutralDensityFilterNum(n int32) bool {
	return rcv._tab.MutateInt32Slot(82, n)
}

/// The number of pixels binned horizontally.
/// Example: /// Example: 12
/// Constraints: No constraints specified.
func (rcv *EOObservationDetails_Full) BinningHoriz() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(84))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

/// The number of pixels binned horizontally.
/// Example: /// Example: 12
/// Constraints: No constraints specified.
func (rcv *EOObservationDetails_Full) MutateBinningHoriz(n int32) bool {
	return rcv._tab.MutateInt32Slot(84, n)
}

/// The number of pixels binned vertically.
/// Example: /// Example: 14
/// Constraints: No constraints specified.
func (rcv *EOObservationDetails_Full) BinningVert() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(86))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

/// The number of pixels binned vertically.
/// Example: /// Example: 14
/// Constraints: No constraints specified.
func (rcv *EOObservationDetails_Full) MutateBinningVert(n int32) bool {
	return rcv._tab.MutateInt32Slot(86, n)
}

/// Number of stars used in photometric fit count.
/// Example: /// Example: 23
/// Constraints: No constraints specified.
func (rcv *EOObservationDetails_Full) PcalNumStars() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(88))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

/// Number of stars used in photometric fit count.
/// Example: /// Example: 23
/// Constraints: No constraints specified.
func (rcv *EOObservationDetails_Full) MutatePcalNumStars(n int32) bool {
	return rcv._tab.MutateInt32Slot(88, n)
}

/// The x centroid position on the CCD of the target object in pixels.
/// Example: /// Example: 123.3
/// Constraints: No constraints specified.
func (rcv *EOObservationDetails_Full) CcdObjPosX() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(90))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// The x centroid position on the CCD of the target object in pixels.
/// Example: /// Example: 123.3
/// Constraints: No constraints specified.
func (rcv *EOObservationDetails_Full) MutateCcdObjPosX(n float64) bool {
	return rcv._tab.MutateFloat64Slot(90, n)
}

/// The y centroid position on the CCD of the target object in pixels.
/// Example: /// Example: 321.4
/// Constraints: No constraints specified.
func (rcv *EOObservationDetails_Full) CcdObjPosY() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(92))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// The y centroid position on the CCD of the target object in pixels.
/// Example: /// Example: 321.4
/// Constraints: No constraints specified.
func (rcv *EOObservationDetails_Full) MutateCcdObjPosY(n float64) bool {
	return rcv._tab.MutateFloat64Slot(92, n)
}

/// This is the pixel width of the target. This is either a frame-by-frame measurement or a constant point spread function or synthetic aperture used in the extraction.
/// Example: /// Example: 133.2
/// Constraints: No constraints specified.
func (rcv *EOObservationDetails_Full) CcdObjWidth() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(94))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// This is the pixel width of the target. This is either a frame-by-frame measurement or a constant point spread function or synthetic aperture used in the extraction.
/// Example: /// Example: 133.2
/// Constraints: No constraints specified.
func (rcv *EOObservationDetails_Full) MutateCcdObjWidth(n float64) bool {
	return rcv._tab.MutateFloat64Slot(94, n)
}

/// This is the background signal at or in the vicinity of the radiometric source position. Specifically, this is the average background count level (DN/pixel) divided by the exposure time in seconds of the background pixels used in the photometric extraction. DN/pixel/sec.
/// Example: /// Example: 4134.1
/// Constraints: No constraints specified.
func (rcv *EOObservationDetails_Full) BackgroundSignal() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(96))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// This is the background signal at or in the vicinity of the radiometric source position. Specifically, this is the average background count level (DN/pixel) divided by the exposure time in seconds of the background pixels used in the photometric extraction. DN/pixel/sec.
/// Example: /// Example: 4134.1
/// Constraints: No constraints specified.
func (rcv *EOObservationDetails_Full) MutateBackgroundSignal(n float64) bool {
	return rcv._tab.MutateFloat64Slot(96, n)
}

/// Estimated 1-sigma uncertainty in the background signal at or in the vicinity of the radiometric source position. DN/pixel/sec.
/// Example: /// Example: 123.2
/// Constraints: No constraints specified.
func (rcv *EOObservationDetails_Full) BackgroundSignalUnc() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(98))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Estimated 1-sigma uncertainty in the background signal at or in the vicinity of the radiometric source position. DN/pixel/sec.
/// Example: /// Example: 123.2
/// Constraints: No constraints specified.
func (rcv *EOObservationDetails_Full) MutateBackgroundSignalUnc(n float64) bool {
	return rcv._tab.MutateFloat64Slot(98, n)
}

/// Peak Aperture Raw Counts is the value of the peak pixel in the real or synthetic aperture containing the target signal.
/// Example: /// Example: 123.2
/// Constraints: No constraints specified.
func (rcv *EOObservationDetails_Full) PeakApertureCount() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(100))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Peak Aperture Raw Counts is the value of the peak pixel in the real or synthetic aperture containing the target signal.
/// Example: /// Example: 123.2
/// Constraints: No constraints specified.
func (rcv *EOObservationDetails_Full) MutatePeakApertureCount(n float64) bool {
	return rcv._tab.MutateFloat64Slot(100, n)
}

/// Peak Background Raw Counts is the largest pixel value used in background signal.
/// Example: /// Example: 321
/// Constraints: No constraints specified.
func (rcv *EOObservationDetails_Full) PeakBackgroundCount() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(102))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

/// Peak Background Raw Counts is the largest pixel value used in background signal.
/// Example: /// Example: 321
/// Constraints: No constraints specified.
func (rcv *EOObservationDetails_Full) MutatePeakBackgroundCount(n int32) bool {
	return rcv._tab.MutateInt32Slot(102, n)
}

/// Estimated signal-to-noise ratio (SNR) for the total radiometric signal. Under some algorithms, this can be a constant per target (not per observation). Note: this SNR applies to the total signal of the radiometric source (i.e., Net_Obj_Sig with units DN/sec), not to be confused with the SNR of the signal in the peak pixel (i.e., DN/pixel/sec).
/// Example: /// Example: 13.4
/// Constraints: No constraints specified.
func (rcv *EOObservationDetails_Full) SnrEst() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(104))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Estimated signal-to-noise ratio (SNR) for the total radiometric signal. Under some algorithms, this can be a constant per target (not per observation). Note: this SNR applies to the total signal of the radiometric source (i.e., Net_Obj_Sig with units DN/sec), not to be confused with the SNR of the signal in the peak pixel (i.e., DN/pixel/sec).
/// Example: /// Example: 13.4
/// Constraints: No constraints specified.
func (rcv *EOObservationDetails_Full) MutateSnrEst(n float64) bool {
	return rcv._tab.MutateFloat64Slot(104, n)
}

/// Instrumental magnitude of a sensor before corrections are applied for atmosphere or to transform to standard magnitude scale.
/// Example: /// Example: 123.3
/// Constraints: No constraints specified.
func (rcv *EOObservationDetails_Full) MagInstrumental() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(106))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Instrumental magnitude of a sensor before corrections are applied for atmosphere or to transform to standard magnitude scale.
/// Example: /// Example: 123.3
/// Constraints: No constraints specified.
func (rcv *EOObservationDetails_Full) MutateMagInstrumental(n float64) bool {
	return rcv._tab.MutateFloat64Slot(106, n)
}

/// Uncertainty in the instrumental magnitude.
/// Example: /// Example: 123.3
/// Constraints: No constraints specified.
func (rcv *EOObservationDetails_Full) MagInstrumentalUnc() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(108))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Uncertainty in the instrumental magnitude.
/// Example: /// Example: 123.3
/// Constraints: No constraints specified.
func (rcv *EOObservationDetails_Full) MutateMagInstrumentalUnc(n float64) bool {
	return rcv._tab.MutateFloat64Slot(108, n)
}

/// Optical Cross Section computed in units m(2)/ster.
/// Example: /// Example: 123.3
/// Constraints: No constraints specified.
func (rcv *EOObservationDetails_Full) OpticalCrossSection() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(110))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Optical Cross Section computed in units m(2)/ster.
/// Example: /// Example: 123.3
/// Constraints: No constraints specified.
func (rcv *EOObservationDetails_Full) MutateOpticalCrossSection(n float64) bool {
	return rcv._tab.MutateFloat64Slot(110, n)
}

/// Uncertainty in Optical Cross Section computed in units m(2)/ster.
/// Example: /// Example: 123.3
/// Constraints: No constraints specified.
func (rcv *EOObservationDetails_Full) OpticalCrossSectionUnc() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(112))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Uncertainty in Optical Cross Section computed in units m(2)/ster.
/// Example: /// Example: 123.3
/// Constraints: No constraints specified.
func (rcv *EOObservationDetails_Full) MutateOpticalCrossSectionUnc(n float64) bool {
	return rcv._tab.MutateFloat64Slot(112, n)
}

/// Sun state vector in ECI J2000 coordinate frame in km.
/// Example: /// Example: 123.3
/// Constraints: No constraints specified.
func (rcv *EOObservationDetails_Full) SunStatePosX() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(114))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Sun state vector in ECI J2000 coordinate frame in km.
/// Example: /// Example: 123.3
/// Constraints: No constraints specified.
func (rcv *EOObservationDetails_Full) MutateSunStatePosX(n float64) bool {
	return rcv._tab.MutateFloat64Slot(114, n)
}

/// Sun state vector in ECI J2000 coordinate frame in km.
/// Example: /// Example: 123.3
/// Constraints: No constraints specified.
func (rcv *EOObservationDetails_Full) SunStatePosY() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(116))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Sun state vector in ECI J2000 coordinate frame in km.
/// Example: /// Example: 123.3
/// Constraints: No constraints specified.
func (rcv *EOObservationDetails_Full) MutateSunStatePosY(n float64) bool {
	return rcv._tab.MutateFloat64Slot(116, n)
}

/// Sun state vector in ECI J2000 coordinate frame in km.
/// Example: /// Example: 123.3
/// Constraints: No constraints specified.
func (rcv *EOObservationDetails_Full) SunStatePosZ() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(118))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Sun state vector in ECI J2000 coordinate frame in km.
/// Example: /// Example: 123.3
/// Constraints: No constraints specified.
func (rcv *EOObservationDetails_Full) MutateSunStatePosZ(n float64) bool {
	return rcv._tab.MutateFloat64Slot(118, n)
}

/// Sun state vector in ECI J2000 coordinate frame in km/sec.
/// Example: /// Example: 123.3
/// Constraints: No constraints specified.
func (rcv *EOObservationDetails_Full) SunStateVelX() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(120))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Sun state vector in ECI J2000 coordinate frame in km/sec.
/// Example: /// Example: 123.3
/// Constraints: No constraints specified.
func (rcv *EOObservationDetails_Full) MutateSunStateVelX(n float64) bool {
	return rcv._tab.MutateFloat64Slot(120, n)
}

/// Sun state vector in ECI J2000 coordinate frame in km/sec.
/// Example: /// Example: 123.3
/// Constraints: No constraints specified.
func (rcv *EOObservationDetails_Full) SunStateVelY() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(122))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Sun state vector in ECI J2000 coordinate frame in km/sec.
/// Example: /// Example: 123.3
/// Constraints: No constraints specified.
func (rcv *EOObservationDetails_Full) MutateSunStateVelY(n float64) bool {
	return rcv._tab.MutateFloat64Slot(122, n)
}

/// Sun state vector in ECI J2000 coordinate frame in km/sec.
/// Example: /// Example: 123.3
/// Constraints: No constraints specified.
func (rcv *EOObservationDetails_Full) SunStateVelZ() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(124))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Sun state vector in ECI J2000 coordinate frame in km/sec.
/// Example: /// Example: 123.3
/// Constraints: No constraints specified.
func (rcv *EOObservationDetails_Full) MutateSunStateVelZ(n float64) bool {
	return rcv._tab.MutateFloat64Slot(124, n)
}

/// Number of catalog stars in the detector field of view (FOV) with the target object. Can be 0 for narrow FOV sensors.
/// Example: /// Example: 123
/// Constraints: No constraints specified.
func (rcv *EOObservationDetails_Full) NumCatalogStars() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(126))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

/// Number of catalog stars in the detector field of view (FOV) with the target object. Can be 0 for narrow FOV sensors.
/// Example: /// Example: 123
/// Constraints: No constraints specified.
func (rcv *EOObservationDetails_Full) MutateNumCatalogStars(n int32) bool {
	return rcv._tab.MutateInt32Slot(126, n)
}

/// Number of detected stars in the FOV with the target object. Helps identify frames with clouds.
/// Example: /// Example: 123
/// Constraints: No constraints specified.
func (rcv *EOObservationDetails_Full) NumDetectedStars() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(128))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

/// Number of detected stars in the FOV with the target object. Helps identify frames with clouds.
/// Example: /// Example: 123
/// Constraints: No constraints specified.
func (rcv *EOObservationDetails_Full) MutateNumDetectedStars(n int32) bool {
	return rcv._tab.MutateInt32Slot(128, n)
}

/// Number of correlated stars in the FOV with the target object. Can be 0 for narrow FOV sensors.
/// Example: /// Example: 123
/// Constraints: No constraints specified.
func (rcv *EOObservationDetails_Full) NumCorrelatedStars() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(130))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

/// Number of correlated stars in the FOV with the target object. Can be 0 for narrow FOV sensors.
/// Example: /// Example: 123
/// Constraints: No constraints specified.
func (rcv *EOObservationDetails_Full) MutateNumCorrelatedStars(n int32) bool {
	return rcv._tab.MutateInt32Slot(130, n)
}

/// Uncertainty of predicted Right Ascension of the Target object from the frame of reference of the sensor (J2000, geocentric velocity aberration). SGP4 and VCMs produce geocentric origin and velocity aberration and subtracting the sensor geocentric position of the sensor places in its reference frame.
/// Example: /// Example: 123.2
/// Constraints: No constraints specified.
func (rcv *EOObservationDetails_Full) PredictedRaUnc() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(132))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Uncertainty of predicted Right Ascension of the Target object from the frame of reference of the sensor (J2000, geocentric velocity aberration). SGP4 and VCMs produce geocentric origin and velocity aberration and subtracting the sensor geocentric position of the sensor places in its reference frame.
/// Example: /// Example: 123.2
/// Constraints: No constraints specified.
func (rcv *EOObservationDetails_Full) MutatePredictedRaUnc(n float64) bool {
	return rcv._tab.MutateFloat64Slot(132, n)
}

/// Uncertainty of Predicted Declination of the Target object from the frame of reference of the sensor (J2000, geocentric velocity aberration). SGP4 and VCMs produce geocentric origin and velocity aberration and subtracting the sensor geocentric position of the sensor places in its reference frame.
/// Example: /// Example: 123.2
/// Constraints: No constraints specified.
func (rcv *EOObservationDetails_Full) PredictedDeclinationUnc() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(134))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Uncertainty of Predicted Declination of the Target object from the frame of reference of the sensor (J2000, geocentric velocity aberration). SGP4 and VCMs produce geocentric origin and velocity aberration and subtracting the sensor geocentric position of the sensor places in its reference frame.
/// Example: /// Example: 123.2
/// Constraints: No constraints specified.
func (rcv *EOObservationDetails_Full) MutatePredictedDeclinationUnc(n float64) bool {
	return rcv._tab.MutateFloat64Slot(134, n)
}

/// Covariance (x^2) in measured Right Ascension (X) in deg^2.
/// Example: /// Example: 123.2
/// Constraints: No constraints specified.
func (rcv *EOObservationDetails_Full) RaCov() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(136))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Covariance (x^2) in measured Right Ascension (X) in deg^2.
/// Example: /// Example: 123.2
/// Constraints: No constraints specified.
func (rcv *EOObservationDetails_Full) MutateRaCov(n float64) bool {
	return rcv._tab.MutateFloat64Slot(136, n)
}

/// Covariance (Y^2) in measured declination (Y) in deg^2.
/// Example: /// Example: 123.2
/// Constraints: No constraints specified.
func (rcv *EOObservationDetails_Full) DeclinationCov() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(138))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Covariance (Y^2) in measured declination (Y) in deg^2.
/// Example: /// Example: 123.2
/// Constraints: No constraints specified.
func (rcv *EOObservationDetails_Full) MutateDeclinationCov(n float64) bool {
	return rcv._tab.MutateFloat64Slot(138, n)
}

/// Covariance (XY) in measured ra/declination (XY) in deg^2.
/// Example: /// Example: 123.2
/// Constraints: No constraints specified.
func (rcv *EOObservationDetails_Full) RaDeclinationCov() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(140))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Covariance (XY) in measured ra/declination (XY) in deg^2.
/// Example: /// Example: 123.2
/// Constraints: No constraints specified.
func (rcv *EOObservationDetails_Full) MutateRaDeclinationCov(n float64) bool {
	return rcv._tab.MutateFloat64Slot(140, n)
}

/// World Coordinate System (WCS) X pixel origin in astrometric fit.
/// Example: /// Example: 123.2
/// Constraints: No constraints specified.
func (rcv *EOObservationDetails_Full) AcalCrPixX() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(142))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// World Coordinate System (WCS) X pixel origin in astrometric fit.
/// Example: /// Example: 123.2
/// Constraints: No constraints specified.
func (rcv *EOObservationDetails_Full) MutateAcalCrPixX(n float64) bool {
	return rcv._tab.MutateFloat64Slot(142, n)
}

/// World Coordinate System (WCS) Y pixel origin in astrometric fit.
/// Example: /// Example: 123.2
/// Constraints: No constraints specified.
func (rcv *EOObservationDetails_Full) AcalCrPixY() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(144))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// World Coordinate System (WCS) Y pixel origin in astrometric fit.
/// Example: /// Example: 123.2
/// Constraints: No constraints specified.
func (rcv *EOObservationDetails_Full) MutateAcalCrPixY(n float64) bool {
	return rcv._tab.MutateFloat64Slot(144, n)
}

/// World Coordinate System (WCS) equatorial coordinate X origin corresponding to CRPIX in astrometric fit in degrees.
/// Example: /// Example: 123.2
/// Constraints: No constraints specified.
func (rcv *EOObservationDetails_Full) AcalCrValX() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(146))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// World Coordinate System (WCS) equatorial coordinate X origin corresponding to CRPIX in astrometric fit in degrees.
/// Example: /// Example: 123.2
/// Constraints: No constraints specified.
func (rcv *EOObservationDetails_Full) MutateAcalCrValX(n float64) bool {
	return rcv._tab.MutateFloat64Slot(146, n)
}

/// World Coordinate System (WCS) equatorial coordinate Y origin corresponding to CRPIX in astrometric fit in degrees.
/// Example: /// Example: 123.2
/// Constraints: No constraints specified.
func (rcv *EOObservationDetails_Full) AcalCrValY() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(148))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// World Coordinate System (WCS) equatorial coordinate Y origin corresponding to CRPIX in astrometric fit in degrees.
/// Example: /// Example: 123.2
/// Constraints: No constraints specified.
func (rcv *EOObservationDetails_Full) MutateAcalCrValY(n float64) bool {
	return rcv._tab.MutateFloat64Slot(148, n)
}

/// Number of stars used in astrometric fit.
/// Example: /// Example: 123
/// Constraints: No constraints specified.
func (rcv *EOObservationDetails_Full) AcalNumStars() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(150))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

/// Number of stars used in astrometric fit.
/// Example: /// Example: 123
/// Constraints: No constraints specified.
func (rcv *EOObservationDetails_Full) MutateAcalNumStars(n int32) bool {
	return rcv._tab.MutateInt32Slot(150, n)
}

/// Distance from the target object to the sun during the observation in meters.
/// Example: /// Example: 123.2
/// Constraints: No constraints specified.
func (rcv *EOObservationDetails_Full) ObjSunRange() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(152))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Distance from the target object to the sun during the observation in meters.
/// Example: /// Example: 123.2
/// Constraints: No constraints specified.
func (rcv *EOObservationDetails_Full) MutateObjSunRange(n float64) bool {
	return rcv._tab.MutateFloat64Slot(152, n)
}

/// Solar phase angle bisector vector. The vector that bisects the solar phase angle. The phase angle bisector is the angle that is << of the value in #48. Then calculate the point on the RA/DEC (ECI J2000.0) sphere that a vector at this angle would intersect.
/// Example: /// Example: 123.2
/// Constraints: No constraints specified.
func (rcv *EOObservationDetails_Full) PhaseAngBisect() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(154))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Solar phase angle bisector vector. The vector that bisects the solar phase angle. The phase angle bisector is the angle that is << of the value in #48. Then calculate the point on the RA/DEC (ECI J2000.0) sphere that a vector at this angle would intersect.
/// Example: /// Example: 123.2
/// Constraints: No constraints specified.
func (rcv *EOObservationDetails_Full) MutatePhaseAngBisect(n float64) bool {
	return rcv._tab.MutateFloat64Slot(154, n)
}

/// Fraction of the sun that is illuminating the target object. This indicates if the target is in the Earth’s penumbra or umbra. (It is 0 when object is in umbra and 1 when object is fully illuminated.).
/// Example: /// Example: 123.2
/// Constraints: No constraints specified.
func (rcv *EOObservationDetails_Full) SolarDiskFrac() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(156))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Fraction of the sun that is illuminating the target object. This indicates if the target is in the Earth’s penumbra or umbra. (It is 0 when object is in umbra and 1 when object is fully illuminated.).
/// Example: /// Example: 123.2
/// Constraints: No constraints specified.
func (rcv *EOObservationDetails_Full) MutateSolarDiskFrac(n float64) bool {
	return rcv._tab.MutateFloat64Slot(156, n)
}

/// Time off element set.
/// Example: /// Example: 123.2
/// Constraints: No constraints specified.
func (rcv *EOObservationDetails_Full) Toes() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(158))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Time off element set.
/// Example: /// Example: 123.2
/// Constraints: No constraints specified.
func (rcv *EOObservationDetails_Full) MutateToes(n float64) bool {
	return rcv._tab.MutateFloat64Slot(158, n)
}

/// Degrees Off Element Set.
/// Example: /// Example: 123.2
/// Constraints: No constraints specified.
func (rcv *EOObservationDetails_Full) Does() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(160))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Degrees Off Element Set.
/// Example: /// Example: 123.2
/// Constraints: No constraints specified.
func (rcv *EOObservationDetails_Full) MutateDoes(n float64) bool {
	return rcv._tab.MutateFloat64Slot(160, n)
}

/// Source of the data, will be set to EOObservation source if blank.
/// Example: /// Example: Bluestaq
/// Constraints: Minimum length = 1, Maximum length = 64
func (rcv *EOObservationDetails_Full) Source() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(162))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Source of the data, will be set to EOObservation source if blank.
/// Example: /// Example: Bluestaq
/// Constraints: Minimum length = 1, Maximum length = 64
/// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
/// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
/// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
/// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
/// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
/// , will be set to EOObservation dataMode if blank.
/// Example: /// Example: TEST
/// Constraints: Minimum length = 1, Maximum length = 32
func (rcv *EOObservationDetails_Full) DataMode() EOObservationDetails_Full_dataMode_Enum {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(164))
	if o != 0 {
		return EOObservationDetails_Full_dataMode_Enum(rcv._tab.GetInt8(o + rcv._tab.Pos))
	}
	return 0
}

/// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
/// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
/// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
/// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
/// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
/// , will be set to EOObservation dataMode if blank.
/// Example: /// Example: TEST
/// Constraints: Minimum length = 1, Maximum length = 32
func (rcv *EOObservationDetails_Full) MutateDataMode(n EOObservationDetails_Full_dataMode_Enum) bool {
	return rcv._tab.MutateInt8Slot(164, int8(n))
}

/// Time the row was created in the database, auto-populated by the system.
/// Example: /// Example: 2018-01-01T16:00:00.123Z
/// Constraints: No constraints specified.
func (rcv *EOObservationDetails_Full) CreatedAt() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(166))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Time the row was created in the database, auto-populated by the system.
/// Example: /// Example: 2018-01-01T16:00:00.123Z
/// Constraints: No constraints specified.
/// Application user who created the row in the database, auto-populated by the system.
/// Example: /// Example: some.user
/// Constraints: Minimum length = 1, Maximum length = 64
func (rcv *EOObservationDetails_Full) CreatedBy() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(168))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Application user who created the row in the database, auto-populated by the system.
/// Example: /// Example: some.user
/// Constraints: Minimum length = 1, Maximum length = 64
func EOObservationDetails_FullStart(builder *flatbuffers.Builder) {
	builder.StartObject(83)
}
func EOObservationDetails_FullAddIdEoobservation(builder *flatbuffers.Builder, idEoobservation flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(idEoobservation), 0)
}
func EOObservationDetails_FullAddClassificationMarking(builder *flatbuffers.Builder, classificationMarking flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(classificationMarking), 0)
}
func EOObservationDetails_FullAddObTime(builder *flatbuffers.Builder, obTime flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(obTime), 0)
}
func EOObservationDetails_FullAddPredictedRa(builder *flatbuffers.Builder, predictedRa float64) {
	builder.PrependFloat64Slot(3, predictedRa, 0.0)
}
func EOObservationDetails_FullAddPredictedDeclination(builder *flatbuffers.Builder, predictedDeclination float64) {
	builder.PrependFloat64Slot(4, predictedDeclination, 0.0)
}
func EOObservationDetails_FullAddPredictedAzimuth(builder *flatbuffers.Builder, predictedAzimuth float64) {
	builder.PrependFloat64Slot(5, predictedAzimuth, 0.0)
}
func EOObservationDetails_FullAddPredictedElevation(builder *flatbuffers.Builder, predictedElevation float64) {
	builder.PrependFloat64Slot(6, predictedElevation, 0.0)
}
func EOObservationDetails_FullAddSunAzimuth(builder *flatbuffers.Builder, sunAzimuth float64) {
	builder.PrependFloat64Slot(7, sunAzimuth, 0.0)
}
func EOObservationDetails_FullAddSunElevation(builder *flatbuffers.Builder, sunElevation float64) {
	builder.PrependFloat64Slot(8, sunElevation, 0.0)
}
func EOObservationDetails_FullAddNumSpectralFilters(builder *flatbuffers.Builder, numSpectralFilters int32) {
	builder.PrependInt32Slot(9, numSpectralFilters, 0)
}
func EOObservationDetails_FullAddSpectralFilters(builder *flatbuffers.Builder, spectralFilters flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(10, flatbuffers.UOffsetT(spectralFilters), 0)
}
func EOObservationDetails_FullStartSpectralFiltersVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func EOObservationDetails_FullAddSpectralZmfl(builder *flatbuffers.Builder, spectralZmfl flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(11, flatbuffers.UOffsetT(spectralZmfl), 0)
}
func EOObservationDetails_FullStartSpectralZmflVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func EOObservationDetails_FullAddSpectralFilterSolarMag(builder *flatbuffers.Builder, spectralFilterSolarMag flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(12, flatbuffers.UOffsetT(spectralFilterSolarMag), 0)
}
func EOObservationDetails_FullStartSpectralFilterSolarMagVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func EOObservationDetails_FullAddZeroPoints(builder *flatbuffers.Builder, zeroPoints flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(13, flatbuffers.UOffsetT(zeroPoints), 0)
}
func EOObservationDetails_FullStartZeroPointsVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func EOObservationDetails_FullAddZeroPointsUnc(builder *flatbuffers.Builder, zeroPointsUnc flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(14, flatbuffers.UOffsetT(zeroPointsUnc), 0)
}
func EOObservationDetails_FullStartZeroPointsUncVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func EOObservationDetails_FullAddExtinctionCoeffs(builder *flatbuffers.Builder, extinctionCoeffs flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(15, flatbuffers.UOffsetT(extinctionCoeffs), 0)
}
func EOObservationDetails_FullStartExtinctionCoeffsVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func EOObservationDetails_FullAddExtinctionCoeffsUnc(builder *flatbuffers.Builder, extinctionCoeffsUnc flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(16, flatbuffers.UOffsetT(extinctionCoeffsUnc), 0)
}
func EOObservationDetails_FullStartExtinctionCoeffsUncVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func EOObservationDetails_FullAddColorCoeffs(builder *flatbuffers.Builder, colorCoeffs flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(17, flatbuffers.UOffsetT(colorCoeffs), 0)
}
func EOObservationDetails_FullStartColorCoeffsVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func EOObservationDetails_FullAddNumNeutralDensityFilters(builder *flatbuffers.Builder, numNeutralDensityFilters int32) {
	builder.PrependInt32Slot(18, numNeutralDensityFilters, 0)
}
func EOObservationDetails_FullAddNeutralDensityFilterNames(builder *flatbuffers.Builder, neutralDensityFilterNames flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(19, flatbuffers.UOffsetT(neutralDensityFilterNames), 0)
}
func EOObservationDetails_FullStartNeutralDensityFilterNamesVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func EOObservationDetails_FullAddNeutralDensityFilterTransmissions(builder *flatbuffers.Builder, neutralDensityFilterTransmissions flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(20, flatbuffers.UOffsetT(neutralDensityFilterTransmissions), 0)
}
func EOObservationDetails_FullStartNeutralDensityFilterTransmissionsVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func EOObservationDetails_FullAddNeutralDensityFilterTransmissionsUnc(builder *flatbuffers.Builder, neutralDensityFilterTransmissionsUnc flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(21, flatbuffers.UOffsetT(neutralDensityFilterTransmissionsUnc), 0)
}
func EOObservationDetails_FullStartNeutralDensityFilterTransmissionsUncVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func EOObservationDetails_FullAddGain(builder *flatbuffers.Builder, gain float64) {
	builder.PrependFloat64Slot(22, gain, 0.0)
}
func EOObservationDetails_FullAddIfov(builder *flatbuffers.Builder, ifov float64) {
	builder.PrependFloat64Slot(23, ifov, 0.0)
}
func EOObservationDetails_FullAddPixelArrayWidth(builder *flatbuffers.Builder, pixelArrayWidth int32) {
	builder.PrependInt32Slot(24, pixelArrayWidth, 0)
}
func EOObservationDetails_FullAddPixelArrayHeight(builder *flatbuffers.Builder, pixelArrayHeight int32) {
	builder.PrependInt32Slot(25, pixelArrayHeight, 0)
}
func EOObservationDetails_FullAddPixelMin(builder *flatbuffers.Builder, pixelMin int32) {
	builder.PrependInt32Slot(26, pixelMin, 0)
}
func EOObservationDetails_FullAddPixelMax(builder *flatbuffers.Builder, pixelMax int32) {
	builder.PrependInt32Slot(27, pixelMax, 0)
}
func EOObservationDetails_FullAddCentroidRow(builder *flatbuffers.Builder, centroidRow float64) {
	builder.PrependFloat64Slot(28, centroidRow, 0.0)
}
func EOObservationDetails_FullAddCentroidColumn(builder *flatbuffers.Builder, centroidColumn float64) {
	builder.PrependFloat64Slot(29, centroidColumn, 0.0)
}
func EOObservationDetails_FullAddRowVariance(builder *flatbuffers.Builder, rowVariance float64) {
	builder.PrependFloat64Slot(30, rowVariance, 0.0)
}
func EOObservationDetails_FullAddColumnVariance(builder *flatbuffers.Builder, columnVariance float64) {
	builder.PrependFloat64Slot(31, columnVariance, 0.0)
}
func EOObservationDetails_FullAddRowColCov(builder *flatbuffers.Builder, rowColCov float64) {
	builder.PrependFloat64Slot(32, rowColCov, 0.0)
}
func EOObservationDetails_FullAddDistFromStreakCenter(builder *flatbuffers.Builder, distFromStreakCenter flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(33, flatbuffers.UOffsetT(distFromStreakCenter), 0)
}
func EOObservationDetails_FullStartDistFromStreakCenterVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func EOObservationDetails_FullAddSurfBrightness(builder *flatbuffers.Builder, surfBrightness flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(34, flatbuffers.UOffsetT(surfBrightness), 0)
}
func EOObservationDetails_FullStartSurfBrightnessVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func EOObservationDetails_FullAddSurfBrightnessUnc(builder *flatbuffers.Builder, surfBrightnessUnc flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(35, flatbuffers.UOffsetT(surfBrightnessUnc), 0)
}
func EOObservationDetails_FullStartSurfBrightnessUncVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func EOObservationDetails_FullAddTimesUnc(builder *flatbuffers.Builder, timesUnc float64) {
	builder.PrependFloat64Slot(36, timesUnc, 0.0)
}
func EOObservationDetails_FullAddCcdTemp(builder *flatbuffers.Builder, ccdTemp float64) {
	builder.PrependFloat64Slot(37, ccdTemp, 0.0)
}
func EOObservationDetails_FullAddCurrentSpectralFilterNum(builder *flatbuffers.Builder, currentSpectralFilterNum int32) {
	builder.PrependInt32Slot(38, currentSpectralFilterNum, 0)
}
func EOObservationDetails_FullAddCurrentNeutralDensityFilterNum(builder *flatbuffers.Builder, currentNeutralDensityFilterNum int32) {
	builder.PrependInt32Slot(39, currentNeutralDensityFilterNum, 0)
}
func EOObservationDetails_FullAddBinningHoriz(builder *flatbuffers.Builder, binningHoriz int32) {
	builder.PrependInt32Slot(40, binningHoriz, 0)
}
func EOObservationDetails_FullAddBinningVert(builder *flatbuffers.Builder, binningVert int32) {
	builder.PrependInt32Slot(41, binningVert, 0)
}
func EOObservationDetails_FullAddPcalNumStars(builder *flatbuffers.Builder, pcalNumStars int32) {
	builder.PrependInt32Slot(42, pcalNumStars, 0)
}
func EOObservationDetails_FullAddCcdObjPosX(builder *flatbuffers.Builder, ccdObjPosX float64) {
	builder.PrependFloat64Slot(43, ccdObjPosX, 0.0)
}
func EOObservationDetails_FullAddCcdObjPosY(builder *flatbuffers.Builder, ccdObjPosY float64) {
	builder.PrependFloat64Slot(44, ccdObjPosY, 0.0)
}
func EOObservationDetails_FullAddCcdObjWidth(builder *flatbuffers.Builder, ccdObjWidth float64) {
	builder.PrependFloat64Slot(45, ccdObjWidth, 0.0)
}
func EOObservationDetails_FullAddBackgroundSignal(builder *flatbuffers.Builder, backgroundSignal float64) {
	builder.PrependFloat64Slot(46, backgroundSignal, 0.0)
}
func EOObservationDetails_FullAddBackgroundSignalUnc(builder *flatbuffers.Builder, backgroundSignalUnc float64) {
	builder.PrependFloat64Slot(47, backgroundSignalUnc, 0.0)
}
func EOObservationDetails_FullAddPeakApertureCount(builder *flatbuffers.Builder, peakApertureCount float64) {
	builder.PrependFloat64Slot(48, peakApertureCount, 0.0)
}
func EOObservationDetails_FullAddPeakBackgroundCount(builder *flatbuffers.Builder, peakBackgroundCount int32) {
	builder.PrependInt32Slot(49, peakBackgroundCount, 0)
}
func EOObservationDetails_FullAddSnrEst(builder *flatbuffers.Builder, snrEst float64) {
	builder.PrependFloat64Slot(50, snrEst, 0.0)
}
func EOObservationDetails_FullAddMagInstrumental(builder *flatbuffers.Builder, magInstrumental float64) {
	builder.PrependFloat64Slot(51, magInstrumental, 0.0)
}
func EOObservationDetails_FullAddMagInstrumentalUnc(builder *flatbuffers.Builder, magInstrumentalUnc float64) {
	builder.PrependFloat64Slot(52, magInstrumentalUnc, 0.0)
}
func EOObservationDetails_FullAddOpticalCrossSection(builder *flatbuffers.Builder, opticalCrossSection float64) {
	builder.PrependFloat64Slot(53, opticalCrossSection, 0.0)
}
func EOObservationDetails_FullAddOpticalCrossSectionUnc(builder *flatbuffers.Builder, opticalCrossSectionUnc float64) {
	builder.PrependFloat64Slot(54, opticalCrossSectionUnc, 0.0)
}
func EOObservationDetails_FullAddSunStatePosX(builder *flatbuffers.Builder, sunStatePosX float64) {
	builder.PrependFloat64Slot(55, sunStatePosX, 0.0)
}
func EOObservationDetails_FullAddSunStatePosY(builder *flatbuffers.Builder, sunStatePosY float64) {
	builder.PrependFloat64Slot(56, sunStatePosY, 0.0)
}
func EOObservationDetails_FullAddSunStatePosZ(builder *flatbuffers.Builder, sunStatePosZ float64) {
	builder.PrependFloat64Slot(57, sunStatePosZ, 0.0)
}
func EOObservationDetails_FullAddSunStateVelX(builder *flatbuffers.Builder, sunStateVelX float64) {
	builder.PrependFloat64Slot(58, sunStateVelX, 0.0)
}
func EOObservationDetails_FullAddSunStateVelY(builder *flatbuffers.Builder, sunStateVelY float64) {
	builder.PrependFloat64Slot(59, sunStateVelY, 0.0)
}
func EOObservationDetails_FullAddSunStateVelZ(builder *flatbuffers.Builder, sunStateVelZ float64) {
	builder.PrependFloat64Slot(60, sunStateVelZ, 0.0)
}
func EOObservationDetails_FullAddNumCatalogStars(builder *flatbuffers.Builder, numCatalogStars int32) {
	builder.PrependInt32Slot(61, numCatalogStars, 0)
}
func EOObservationDetails_FullAddNumDetectedStars(builder *flatbuffers.Builder, numDetectedStars int32) {
	builder.PrependInt32Slot(62, numDetectedStars, 0)
}
func EOObservationDetails_FullAddNumCorrelatedStars(builder *flatbuffers.Builder, numCorrelatedStars int32) {
	builder.PrependInt32Slot(63, numCorrelatedStars, 0)
}
func EOObservationDetails_FullAddPredictedRaUnc(builder *flatbuffers.Builder, predictedRaUnc float64) {
	builder.PrependFloat64Slot(64, predictedRaUnc, 0.0)
}
func EOObservationDetails_FullAddPredictedDeclinationUnc(builder *flatbuffers.Builder, predictedDeclinationUnc float64) {
	builder.PrependFloat64Slot(65, predictedDeclinationUnc, 0.0)
}
func EOObservationDetails_FullAddRaCov(builder *flatbuffers.Builder, raCov float64) {
	builder.PrependFloat64Slot(66, raCov, 0.0)
}
func EOObservationDetails_FullAddDeclinationCov(builder *flatbuffers.Builder, declinationCov float64) {
	builder.PrependFloat64Slot(67, declinationCov, 0.0)
}
func EOObservationDetails_FullAddRaDeclinationCov(builder *flatbuffers.Builder, raDeclinationCov float64) {
	builder.PrependFloat64Slot(68, raDeclinationCov, 0.0)
}
func EOObservationDetails_FullAddAcalCrPixX(builder *flatbuffers.Builder, acalCrPixX float64) {
	builder.PrependFloat64Slot(69, acalCrPixX, 0.0)
}
func EOObservationDetails_FullAddAcalCrPixY(builder *flatbuffers.Builder, acalCrPixY float64) {
	builder.PrependFloat64Slot(70, acalCrPixY, 0.0)
}
func EOObservationDetails_FullAddAcalCrValX(builder *flatbuffers.Builder, acalCrValX float64) {
	builder.PrependFloat64Slot(71, acalCrValX, 0.0)
}
func EOObservationDetails_FullAddAcalCrValY(builder *flatbuffers.Builder, acalCrValY float64) {
	builder.PrependFloat64Slot(72, acalCrValY, 0.0)
}
func EOObservationDetails_FullAddAcalNumStars(builder *flatbuffers.Builder, acalNumStars int32) {
	builder.PrependInt32Slot(73, acalNumStars, 0)
}
func EOObservationDetails_FullAddObjSunRange(builder *flatbuffers.Builder, objSunRange float64) {
	builder.PrependFloat64Slot(74, objSunRange, 0.0)
}
func EOObservationDetails_FullAddPhaseAngBisect(builder *flatbuffers.Builder, phaseAngBisect float64) {
	builder.PrependFloat64Slot(75, phaseAngBisect, 0.0)
}
func EOObservationDetails_FullAddSolarDiskFrac(builder *flatbuffers.Builder, solarDiskFrac float64) {
	builder.PrependFloat64Slot(76, solarDiskFrac, 0.0)
}
func EOObservationDetails_FullAddToes(builder *flatbuffers.Builder, toes float64) {
	builder.PrependFloat64Slot(77, toes, 0.0)
}
func EOObservationDetails_FullAddDoes(builder *flatbuffers.Builder, does float64) {
	builder.PrependFloat64Slot(78, does, 0.0)
}
func EOObservationDetails_FullAddSource(builder *flatbuffers.Builder, source flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(79, flatbuffers.UOffsetT(source), 0)
}
func EOObservationDetails_FullAddDataMode(builder *flatbuffers.Builder, dataMode EOObservationDetails_Full_dataMode_Enum) {
	builder.PrependInt8Slot(80, int8(dataMode), 0)
}
func EOObservationDetails_FullAddCreatedAt(builder *flatbuffers.Builder, createdAt flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(81, flatbuffers.UOffsetT(createdAt), 0)
}
func EOObservationDetails_FullAddCreatedBy(builder *flatbuffers.Builder, createdBy flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(82, flatbuffers.UOffsetT(createdBy), 0)
}
func EOObservationDetails_FullEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
