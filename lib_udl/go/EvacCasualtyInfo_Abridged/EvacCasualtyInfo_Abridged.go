// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package EvacCasualtyInfo_Abridged

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

/// /// Identity and medical information on the patient to be evacuated.
type EvacCasualtyInfo_Abridged struct {
	_tab flatbuffers.Table
}

const EvacCasualtyInfo_AbridgedIdentifier = "EVAC"

func GetRootAsEvacCasualtyInfo_Abridged(buf []byte, offset flatbuffers.UOffsetT) *EvacCasualtyInfo_Abridged {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &EvacCasualtyInfo_Abridged{}
	x.Init(buf, n+offset)
	return x
}

func FinishEvacCasualtyInfo_AbridgedBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	identifierBytes := []byte(EvacCasualtyInfo_AbridgedIdentifier)
	builder.FinishWithFileIdentifier(offset, identifierBytes)
}

func EvacCasualtyInfo_AbridgedBufferHasIdentifier(buf []byte) bool {
	return flatbuffers.BufferHasIdentifier(buf, EvacCasualtyInfo_AbridgedIdentifier)
}

func GetSizePrefixedRootAsEvacCasualtyInfo_Abridged(buf []byte, offset flatbuffers.UOffsetT) *EvacCasualtyInfo_Abridged {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &EvacCasualtyInfo_Abridged{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedEvacCasualtyInfo_AbridgedBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	identifierBytes := []byte(EvacCasualtyInfo_AbridgedIdentifier)
	builder.FinishSizePrefixedWithFileIdentifier(offset, identifierBytes)
}

func SizePrefixedEvacCasualtyInfo_AbridgedBufferHasIdentifier(buf []byte) bool {
	return flatbuffers.SizePrefixedBufferHasIdentifier(buf, EvacCasualtyInfo_AbridgedIdentifier)
}

func (rcv *EvacCasualtyInfo_Abridged) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *EvacCasualtyInfo_Abridged) Table() flatbuffers.Table {
	return rcv._tab
}

/// The priority of the medevac mission for this patient (URGENT, PRIORITY, ROUTINE, URGENT SURGERY, CONVENIENCE).
/// Example: /// Example: ROUTINE
/// Constraints: Minimum length = 0, Maximum length = 32
func (rcv *EvacCasualtyInfo_Abridged) Priority() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The priority of the medevac mission for this patient (URGENT, PRIORITY, ROUTINE, URGENT SURGERY, CONVENIENCE).
/// Example: /// Example: ROUTINE
/// Constraints: Minimum length = 0, Maximum length = 32
/// The required evacuation method for this patient (AIR, GROUND, NOT EVACUATED).
/// Example: /// Example: GROUND
/// Constraints: Minimum length = 0, Maximum length = 64
func (rcv *EvacCasualtyInfo_Abridged) EvacType() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The required evacuation method for this patient (AIR, GROUND, NOT EVACUATED).
/// Example: /// Example: GROUND
/// Constraints: Minimum length = 0, Maximum length = 64
/// The type of medical issue resulting in the need to evacuate the patient (NON BATTLE, CUT, BURN, SICK, FRACTURE, AMPUTATION, PERFORATION, NUCLEAR, EXHAUSTION, BIOLOGICAL, CHEMICAL, SHOCK, PUNCTURE WOUND, OTHER CUT, WOUNDED IN ACTION, DENIAL, COMBAT STRESS).
/// Example: /// Example: DENTAL
/// Constraints: Minimum length = 0, Maximum length = 32
func (rcv *EvacCasualtyInfo_Abridged) CasualtyType() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The type of medical issue resulting in the need to evacuate the patient (NON BATTLE, CUT, BURN, SICK, FRACTURE, AMPUTATION, PERFORATION, NUCLEAR, EXHAUSTION, BIOLOGICAL, CHEMICAL, SHOCK, PUNCTURE WOUND, OTHER CUT, WOUNDED IN ACTION, DENIAL, COMBAT STRESS).
/// Example: /// Example: DENTAL
/// Constraints: Minimum length = 0, Maximum length = 32
/// The body part involved for the patient (HEAD, NECK, ABDOMEN, UPPER EXTREMITIES, BACK, FACE, LOWER EXTREMITIES, FRONT, OBSTETRICAL GYNECOLOGICAL, OTHER BODY PART).
/// Example: /// Example: FACE
/// Constraints: Minimum length = 0, Maximum length = 32
func (rcv *EvacCasualtyInfo_Abridged) BodyPart() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The body part involved for the patient (HEAD, NECK, ABDOMEN, UPPER EXTREMITIES, BACK, FACE, LOWER EXTREMITIES, FRONT, OBSTETRICAL GYNECOLOGICAL, OTHER BODY PART).
/// Example: /// Example: FACE
/// Constraints: Minimum length = 0, Maximum length = 32
/// The contamination specified for the patient (NONE, RADIATION, BIOLOGICAL, CHEMICAL).
/// Example: /// Example: NONE
/// Constraints: Minimum length = 0, Maximum length = 32
func (rcv *EvacCasualtyInfo_Abridged) ContamType() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The contamination specified for the patient (NONE, RADIATION, BIOLOGICAL, CHEMICAL).
/// Example: /// Example: NONE
/// Constraints: Minimum length = 0, Maximum length = 32
/// Array specifying if any special equipment is need for each of the evacuation of this patient  (EXTRACTION EQUIPMENT, SEMI RIGID LITTER, BACKBOARD, CERVICAL COLLAR ,JUNGLE PENETRATOR, OXYGEN, WHOLE BLOOD, VENTILATOR, HOIST, NONE).
/// Example: /// Example: ['OXYGEN', 'HOIST']
/// Constraints: No constraints specified.
func (rcv *EvacCasualtyInfo_Abridged) SpecMedEquip(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *EvacCasualtyInfo_Abridged) SpecMedEquipLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

/// Array specifying if any special equipment is need for each of the evacuation of this patient  (EXTRACTION EQUIPMENT, SEMI RIGID LITTER, BACKBOARD, CERVICAL COLLAR ,JUNGLE PENETRATOR, OXYGEN, WHOLE BLOOD, VENTILATOR, HOIST, NONE).
/// Example: /// Example: ['OXYGEN', 'HOIST']
/// Constraints: No constraints specified.
/// Optional casualty key.
/// Example: /// Example: casualty-007
/// Constraints: Minimum length = 0, Maximum length = 36
func (rcv *EvacCasualtyInfo_Abridged) CasualtyKey() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Optional casualty key.
/// Example: /// Example: casualty-007
/// Constraints: Minimum length = 0, Maximum length = 36
/// The patient service status (US MILITARY, US CIVILIAN, NON US MILITARY, NON US CIVILIAN, ENEMY POW).
/// Example: /// Example: US CIVILIAN
/// Constraints: Minimum length = 0, Maximum length = 32
func (rcv *EvacCasualtyInfo_Abridged) PatientStatus() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(18))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The patient service status (US MILITARY, US CIVILIAN, NON US MILITARY, NON US CIVILIAN, ENEMY POW).
/// Example: /// Example: US CIVILIAN
/// Constraints: Minimum length = 0, Maximum length = 32
/// The patient service identity (UNKNOWN MILITARY, UNKNOWN CIVILIAN, FRIEND MILITARY, FRIEND CIVILIAN, NEUTRAL MILITARY, NEUTRAL CIVILIAN, HOSTILE MILITARY, HOSTILE CIVILIAN).
/// Example: /// Example: FRIEND CIVILIAN
/// Constraints: Minimum length = 0, Maximum length = 32
func (rcv *EvacCasualtyInfo_Abridged) PatientIdentity() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(20))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The patient service identity (UNKNOWN MILITARY, UNKNOWN CIVILIAN, FRIEND MILITARY, FRIEND CIVILIAN, NEUTRAL MILITARY, NEUTRAL CIVILIAN, HOSTILE MILITARY, HOSTILE CIVILIAN).
/// Example: /// Example: FRIEND CIVILIAN
/// Constraints: Minimum length = 0, Maximum length = 32
/// The country code indicating the citizenship of the patient.
/// Example: /// Example: US
/// Constraints: Minimum length = 0, Maximum length = 4
func (rcv *EvacCasualtyInfo_Abridged) Nationality() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(22))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The country code indicating the citizenship of the patient.
/// Example: /// Example: US
/// Constraints: Minimum length = 0, Maximum length = 4
/// The patient pay grade or rank designation (O-10, O-9, O-8, O-7, O-6, O-5, O-4, O-3, O-2, O-1, CWO-5, CWO-4, CWO-2, CWO-1, E -9, E-8, E-7, E-6, E-5, E-4, E-3, E-2, E-1, NONE, CIVILIAN).
/// Example: /// Example: CIVILIAN
/// Constraints: Minimum length = 0, Maximum length = 16
func (rcv *EvacCasualtyInfo_Abridged) PayGrade() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(24))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The patient pay grade or rank designation (O-10, O-9, O-8, O-7, O-6, O-5, O-4, O-3, O-2, O-1, CWO-5, CWO-4, CWO-2, CWO-1, E -9, E-8, E-7, E-6, E-5, E-4, E-3, E-2, E-1, NONE, CIVILIAN).
/// Example: /// Example: CIVILIAN
/// Constraints: Minimum length = 0, Maximum length = 16
/// The patient common or legal name.
/// Example: /// Example: John Smith
/// Constraints: Minimum length = 0, Maximum length = 64
func (rcv *EvacCasualtyInfo_Abridged) Name() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(26))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The patient common or legal name.
/// Example: /// Example: John Smith
/// Constraints: Minimum length = 0, Maximum length = 64
/// The patient age, in years.
/// Example: /// Example: 35
/// Constraints: No constraints specified.
func (rcv *EvacCasualtyInfo_Abridged) Age() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(28))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

/// The patient age, in years.
/// Example: /// Example: 35
/// Constraints: No constraints specified.
func (rcv *EvacCasualtyInfo_Abridged) MutateAge(n int32) bool {
	return rcv._tab.MutateInt32Slot(28, n)
}

/// The patient sex (MALE, FEMALE).
/// Example: /// Example: MALE
/// Constraints: Minimum length = 0, Maximum length = 8
func (rcv *EvacCasualtyInfo_Abridged) Gender() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(30))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The patient sex (MALE, FEMALE).
/// Example: /// Example: MALE
/// Constraints: Minimum length = 0, Maximum length = 8
/// Last 4 characters of the patient social security code, or equivalent.
/// Example: /// Example: 1234
/// Constraints: Minimum length = 0, Maximum length = 4
func (rcv *EvacCasualtyInfo_Abridged) Last4Ssn() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(32))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Last 4 characters of the patient social security code, or equivalent.
/// Example: /// Example: 1234
/// Constraints: Minimum length = 0, Maximum length = 4
/// The patient blood type (A POS, B POS, AB POS, O POS, A NEG, B NEG, AB NEG, O NEG).
/// Example: /// Example: O NEG
/// Constraints: Minimum length = 0, Maximum length = 6
func (rcv *EvacCasualtyInfo_Abridged) BloodType() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(34))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The patient blood type (A POS, B POS, AB POS, O POS, A NEG, B NEG, AB NEG, O NEG).
/// Example: /// Example: O NEG
/// Constraints: Minimum length = 0, Maximum length = 6
/// The patient branch of service (AIR FORCE, ARMY, NAVY, MARINES, CIV, CONTR, UNKNOWN SERVICE).
/// Example: /// Example: CIV
/// Constraints: Minimum length = 0, Maximum length = 32
func (rcv *EvacCasualtyInfo_Abridged) Service() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(36))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The patient branch of service (AIR FORCE, ARMY, NAVY, MARINES, CIV, CONTR, UNKNOWN SERVICE).
/// Example: /// Example: CIV
/// Constraints: Minimum length = 0, Maximum length = 32
/// The call sign of this patient.
/// Example: /// Example: SHARK
/// Constraints: Minimum length = 0, Maximum length = 128
func (rcv *EvacCasualtyInfo_Abridged) CallSign() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(38))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The call sign of this patient.
/// Example: /// Example: SHARK
/// Constraints: Minimum length = 0, Maximum length = 128
/// The career field of this patient.
/// Example: /// Example: Healthcare
/// Constraints: Minimum length = 0, Maximum length = 128
func (rcv *EvacCasualtyInfo_Abridged) OccSpeciality() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(40))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The career field of this patient.
/// Example: /// Example: Healthcare
/// Constraints: Minimum length = 0, Maximum length = 128
/// Array of the WGS-84 latitude (-90 to 90, negative values south of the equator) in degrees, longitude (-180 to 180, negative values west of Prime Meridian) in degrees, and altitude, in meters, of the burial location.  This array must contain a minimum of 2 elements (latitude and longitude), and may contain an optional 3rd element (altitude).
/// Example: /// Example: [-33.123, 150.33, 0.24]
/// Constraints: No constraints specified.
func (rcv *EvacCasualtyInfo_Abridged) BurialLocation(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(42))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *EvacCasualtyInfo_Abridged) BurialLocationLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(42))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

/// Array of the WGS-84 latitude (-90 to 90, negative values south of the equator) in degrees, longitude (-180 to 180, negative values west of Prime Meridian) in degrees, and altitude, in meters, of the burial location.  This array must contain a minimum of 2 elements (latitude and longitude), and may contain an optional 3rd element (altitude).
/// Example: /// Example: [-33.123, 150.33, 0.24]
/// Constraints: No constraints specified.
/// Array of the WGS-84 latitude (-90 to 90, negative values south of the equator) in degrees, longitude (-180 to 180, negative values west of Prime Meridian) in degrees, and altitude, in meters, of the collection point.  This array must contain a minimum of 2 elements (latitude and longitude), and may contain an optional 3rd element (altitude).
/// Example: /// Example: [12.44, 122.55, 0.98]
/// Constraints: No constraints specified.
func (rcv *EvacCasualtyInfo_Abridged) CollectionPoint(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(44))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *EvacCasualtyInfo_Abridged) CollectionPointLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(44))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

/// Array of the WGS-84 latitude (-90 to 90, negative values south of the equator) in degrees, longitude (-180 to 180, negative values west of Prime Meridian) in degrees, and altitude, in meters, of the collection point.  This array must contain a minimum of 2 elements (latitude and longitude), and may contain an optional 3rd element (altitude).
/// Example: /// Example: [12.44, 122.55, 0.98]
/// Constraints: No constraints specified.
/// Unique identifier for the patient care provider.
/// Example: /// Example: CARE_PROVIDER-1
/// Constraints: Minimum length = 0, Maximum length = 64
func (rcv *EvacCasualtyInfo_Abridged) CareProviderUrn() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(46))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Unique identifier for the patient care provider.
/// Example: /// Example: CARE_PROVIDER-1
/// Constraints: Minimum length = 0, Maximum length = 64
/// The expected disposition of this patient (R T D, EVACUATE, EVACUATE TO FORWARD SURGICAL TEAM, EVACUATE TO COMBAT SUPPORT HOSPITAL, EVACUATE TO AERO MEDICAL STAGING FACILITY, EVACUATE TO SUSTAINING BASE MEDICAL TREATMENT FACILITY).
/// Example: /// Example: EVACUATE
/// Constraints: Minimum length = 0, Maximum length = 64
func (rcv *EvacCasualtyInfo_Abridged) DispositionType() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(48))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The expected disposition of this patient (R T D, EVACUATE, EVACUATE TO FORWARD SURGICAL TEAM, EVACUATE TO COMBAT SUPPORT HOSPITAL, EVACUATE TO AERO MEDICAL STAGING FACILITY, EVACUATE TO SUSTAINING BASE MEDICAL TREATMENT FACILITY).
/// Example: /// Example: EVACUATE
/// Constraints: Minimum length = 0, Maximum length = 64
/// The patient's general medical state (SICK IN QUARTERS, RETURN TO DUTY, EVACUATE WOUNDED, EVACUATE DECEASED, INTERRED).
/// Example: /// Example: EVACUATE WOUNDED
/// Constraints: Minimum length = 0, Maximum length = 32
func (rcv *EvacCasualtyInfo_Abridged) Disposition() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(50))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The patient's general medical state (SICK IN QUARTERS, RETURN TO DUTY, EVACUATE WOUNDED, EVACUATE DECEASED, INTERRED).
/// Example: /// Example: EVACUATE WOUNDED
/// Constraints: Minimum length = 0, Maximum length = 32
/// The method used to generate this medevac report (DEVICE, GROUND COMBAT PERSONNEL, EVACUATION PERSONNEL, ECHELON1 PERSONNEL, ECHELON2 PERSONNEL).
/// Example: /// Example: DEVICE
/// Constraints: Minimum length = 0, Maximum length = 64
func (rcv *EvacCasualtyInfo_Abridged) ReportGen() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(52))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The method used to generate this medevac report (DEVICE, GROUND COMBAT PERSONNEL, EVACUATION PERSONNEL, ECHELON1 PERSONNEL, ECHELON2 PERSONNEL).
/// Example: /// Example: DEVICE
/// Constraints: Minimum length = 0, Maximum length = 64
/// Datetime of the compiling of the patients casualty report, in ISO 8601 UTC format.
/// Example: /// Example: 2021-10-15T16:00:00.123Z
/// Constraints: No constraints specified.
func (rcv *EvacCasualtyInfo_Abridged) ReportTime() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(54))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Datetime of the compiling of the patients casualty report, in ISO 8601 UTC format.
/// Example: /// Example: 2021-10-15T16:00:00.123Z
/// Constraints: No constraints specified.
/// Additional comments on the  patient's casualty information.
/// Example: /// Example: Comments relating to this casualty info.
/// Constraints: Minimum length = 0, Maximum length = 1024
func (rcv *EvacCasualtyInfo_Abridged) Comments() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(56))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Additional comments on the  patient's casualty information.
/// Example: /// Example: Comments relating to this casualty info.
/// Constraints: Minimum length = 0, Maximum length = 1024
/// Medical condition causation information.
/// Example: /// Example: No example provided.
/// Constraints: No constraints specified.
func (rcv *EvacCasualtyInfo_Abridged) Etiology(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(58))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *EvacCasualtyInfo_Abridged) EtiologyLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(58))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

/// Medical condition causation information.
/// Example: /// Example: No example provided.
/// Constraints: No constraints specified.
/// Treatment information.
/// Example: /// Example: No example provided.
/// Constraints: No constraints specified.
func (rcv *EvacCasualtyInfo_Abridged) Treatment(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(60))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *EvacCasualtyInfo_Abridged) TreatmentLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(60))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

/// Treatment information.
/// Example: /// Example: No example provided.
/// Constraints: No constraints specified.
/// Information obtained for vital signs.
/// Example: /// Example: No example provided.
/// Constraints: No constraints specified.
func (rcv *EvacCasualtyInfo_Abridged) VitalSignData(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(62))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *EvacCasualtyInfo_Abridged) VitalSignDataLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(62))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

/// Information obtained for vital signs.
/// Example: /// Example: No example provided.
/// Constraints: No constraints specified.
/// Health state information.
/// Example: /// Example: No example provided.
/// Constraints: No constraints specified.
func (rcv *EvacCasualtyInfo_Abridged) HealthState(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(64))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *EvacCasualtyInfo_Abridged) HealthStateLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(64))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

/// Health state information.
/// Example: /// Example: No example provided.
/// Constraints: No constraints specified.
/// Health condition information.
/// Example: /// Example: No example provided.
/// Constraints: No constraints specified.
func (rcv *EvacCasualtyInfo_Abridged) Condition(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(66))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *EvacCasualtyInfo_Abridged) ConditionLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(66))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

/// Health condition information.
/// Example: /// Example: No example provided.
/// Constraints: No constraints specified.
/// Medication specifics.
/// Example: /// Example: No example provided.
/// Constraints: No constraints specified.
func (rcv *EvacCasualtyInfo_Abridged) Medication(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(68))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *EvacCasualtyInfo_Abridged) MedicationLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(68))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

/// Medication specifics.
/// Example: /// Example: No example provided.
/// Constraints: No constraints specified.
/// Injury specifics.
/// Example: /// Example: No example provided.
/// Constraints: No constraints specified.
func (rcv *EvacCasualtyInfo_Abridged) Injury(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(70))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *EvacCasualtyInfo_Abridged) InjuryLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(70))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

/// Injury specifics.
/// Example: /// Example: No example provided.
/// Constraints: No constraints specified.
/// Allergy information.
/// Example: /// Example: No example provided.
/// Constraints: No constraints specified.
func (rcv *EvacCasualtyInfo_Abridged) Allergy(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(72))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *EvacCasualtyInfo_Abridged) AllergyLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(72))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

/// Allergy information.
/// Example: /// Example: No example provided.
/// Constraints: No constraints specified.
func EvacCasualtyInfo_AbridgedStart(builder *flatbuffers.Builder) {
	builder.StartObject(35)
}
func EvacCasualtyInfo_AbridgedAddPriority(builder *flatbuffers.Builder, priority flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(priority), 0)
}
func EvacCasualtyInfo_AbridgedAddEvacType(builder *flatbuffers.Builder, evacType flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(evacType), 0)
}
func EvacCasualtyInfo_AbridgedAddCasualtyType(builder *flatbuffers.Builder, casualtyType flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(casualtyType), 0)
}
func EvacCasualtyInfo_AbridgedAddBodyPart(builder *flatbuffers.Builder, bodyPart flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(3, flatbuffers.UOffsetT(bodyPart), 0)
}
func EvacCasualtyInfo_AbridgedAddContamType(builder *flatbuffers.Builder, contamType flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(4, flatbuffers.UOffsetT(contamType), 0)
}
func EvacCasualtyInfo_AbridgedAddSpecMedEquip(builder *flatbuffers.Builder, specMedEquip flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(5, flatbuffers.UOffsetT(specMedEquip), 0)
}
func EvacCasualtyInfo_AbridgedStartSpecMedEquipVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func EvacCasualtyInfo_AbridgedAddCasualtyKey(builder *flatbuffers.Builder, casualtyKey flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(6, flatbuffers.UOffsetT(casualtyKey), 0)
}
func EvacCasualtyInfo_AbridgedAddPatientStatus(builder *flatbuffers.Builder, patientStatus flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(7, flatbuffers.UOffsetT(patientStatus), 0)
}
func EvacCasualtyInfo_AbridgedAddPatientIdentity(builder *flatbuffers.Builder, patientIdentity flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(8, flatbuffers.UOffsetT(patientIdentity), 0)
}
func EvacCasualtyInfo_AbridgedAddNationality(builder *flatbuffers.Builder, nationality flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(9, flatbuffers.UOffsetT(nationality), 0)
}
func EvacCasualtyInfo_AbridgedAddPayGrade(builder *flatbuffers.Builder, payGrade flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(10, flatbuffers.UOffsetT(payGrade), 0)
}
func EvacCasualtyInfo_AbridgedAddName(builder *flatbuffers.Builder, name flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(11, flatbuffers.UOffsetT(name), 0)
}
func EvacCasualtyInfo_AbridgedAddAge(builder *flatbuffers.Builder, age int32) {
	builder.PrependInt32Slot(12, age, 0)
}
func EvacCasualtyInfo_AbridgedAddGender(builder *flatbuffers.Builder, gender flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(13, flatbuffers.UOffsetT(gender), 0)
}
func EvacCasualtyInfo_AbridgedAddLast4Ssn(builder *flatbuffers.Builder, last4Ssn flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(14, flatbuffers.UOffsetT(last4Ssn), 0)
}
func EvacCasualtyInfo_AbridgedAddBloodType(builder *flatbuffers.Builder, bloodType flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(15, flatbuffers.UOffsetT(bloodType), 0)
}
func EvacCasualtyInfo_AbridgedAddService(builder *flatbuffers.Builder, service flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(16, flatbuffers.UOffsetT(service), 0)
}
func EvacCasualtyInfo_AbridgedAddCallSign(builder *flatbuffers.Builder, callSign flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(17, flatbuffers.UOffsetT(callSign), 0)
}
func EvacCasualtyInfo_AbridgedAddOccSpeciality(builder *flatbuffers.Builder, occSpeciality flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(18, flatbuffers.UOffsetT(occSpeciality), 0)
}
func EvacCasualtyInfo_AbridgedAddBurialLocation(builder *flatbuffers.Builder, burialLocation flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(19, flatbuffers.UOffsetT(burialLocation), 0)
}
func EvacCasualtyInfo_AbridgedStartBurialLocationVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func EvacCasualtyInfo_AbridgedAddCollectionPoint(builder *flatbuffers.Builder, collectionPoint flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(20, flatbuffers.UOffsetT(collectionPoint), 0)
}
func EvacCasualtyInfo_AbridgedStartCollectionPointVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func EvacCasualtyInfo_AbridgedAddCareProviderUrn(builder *flatbuffers.Builder, careProviderUrn flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(21, flatbuffers.UOffsetT(careProviderUrn), 0)
}
func EvacCasualtyInfo_AbridgedAddDispositionType(builder *flatbuffers.Builder, dispositionType flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(22, flatbuffers.UOffsetT(dispositionType), 0)
}
func EvacCasualtyInfo_AbridgedAddDisposition(builder *flatbuffers.Builder, disposition flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(23, flatbuffers.UOffsetT(disposition), 0)
}
func EvacCasualtyInfo_AbridgedAddReportGen(builder *flatbuffers.Builder, reportGen flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(24, flatbuffers.UOffsetT(reportGen), 0)
}
func EvacCasualtyInfo_AbridgedAddReportTime(builder *flatbuffers.Builder, reportTime flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(25, flatbuffers.UOffsetT(reportTime), 0)
}
func EvacCasualtyInfo_AbridgedAddComments(builder *flatbuffers.Builder, comments flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(26, flatbuffers.UOffsetT(comments), 0)
}
func EvacCasualtyInfo_AbridgedAddEtiology(builder *flatbuffers.Builder, etiology flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(27, flatbuffers.UOffsetT(etiology), 0)
}
func EvacCasualtyInfo_AbridgedStartEtiologyVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func EvacCasualtyInfo_AbridgedAddTreatment(builder *flatbuffers.Builder, treatment flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(28, flatbuffers.UOffsetT(treatment), 0)
}
func EvacCasualtyInfo_AbridgedStartTreatmentVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func EvacCasualtyInfo_AbridgedAddVitalSignData(builder *flatbuffers.Builder, vitalSignData flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(29, flatbuffers.UOffsetT(vitalSignData), 0)
}
func EvacCasualtyInfo_AbridgedStartVitalSignDataVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func EvacCasualtyInfo_AbridgedAddHealthState(builder *flatbuffers.Builder, healthState flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(30, flatbuffers.UOffsetT(healthState), 0)
}
func EvacCasualtyInfo_AbridgedStartHealthStateVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func EvacCasualtyInfo_AbridgedAddCondition(builder *flatbuffers.Builder, condition flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(31, flatbuffers.UOffsetT(condition), 0)
}
func EvacCasualtyInfo_AbridgedStartConditionVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func EvacCasualtyInfo_AbridgedAddMedication(builder *flatbuffers.Builder, medication flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(32, flatbuffers.UOffsetT(medication), 0)
}
func EvacCasualtyInfo_AbridgedStartMedicationVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func EvacCasualtyInfo_AbridgedAddInjury(builder *flatbuffers.Builder, injury flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(33, flatbuffers.UOffsetT(injury), 0)
}
func EvacCasualtyInfo_AbridgedStartInjuryVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func EvacCasualtyInfo_AbridgedAddAllergy(builder *flatbuffers.Builder, allergy flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(34, flatbuffers.UOffsetT(allergy), 0)
}
func EvacCasualtyInfo_AbridgedStartAllergyVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func EvacCasualtyInfo_AbridgedEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
