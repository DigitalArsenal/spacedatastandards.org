// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package AirTaskingOrder_Abridged

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

/// /// Beta Version Air Tasking Order: The ATO is used to task air missions, assign cross force tasking as well as intraservice tasking.
type AirTaskingOrder_Abridged struct {
	_tab flatbuffers.Table
}

const AirTaskingOrder_AbridgedIdentifier = "AIRT"

func GetRootAsAirTaskingOrder_Abridged(buf []byte, offset flatbuffers.UOffsetT) *AirTaskingOrder_Abridged {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &AirTaskingOrder_Abridged{}
	x.Init(buf, n+offset)
	return x
}

func FinishAirTaskingOrder_AbridgedBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	identifierBytes := []byte(AirTaskingOrder_AbridgedIdentifier)
	builder.FinishWithFileIdentifier(offset, identifierBytes)
}

func AirTaskingOrder_AbridgedBufferHasIdentifier(buf []byte) bool {
	return flatbuffers.BufferHasIdentifier(buf, AirTaskingOrder_AbridgedIdentifier)
}

func GetSizePrefixedRootAsAirTaskingOrder_Abridged(buf []byte, offset flatbuffers.UOffsetT) *AirTaskingOrder_Abridged {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &AirTaskingOrder_Abridged{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedAirTaskingOrder_AbridgedBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	identifierBytes := []byte(AirTaskingOrder_AbridgedIdentifier)
	builder.FinishSizePrefixedWithFileIdentifier(offset, identifierBytes)
}

func SizePrefixedAirTaskingOrder_AbridgedBufferHasIdentifier(buf []byte) bool {
	return flatbuffers.SizePrefixedBufferHasIdentifier(buf, AirTaskingOrder_AbridgedIdentifier)
}

func (rcv *AirTaskingOrder_Abridged) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *AirTaskingOrder_Abridged) Table() flatbuffers.Table {
	return rcv._tab
}

/// Unique identifier of the record, auto-generated by the system.
/// Example: /// Example: POI-ID
/// Constraints: Minimum length = 1, Maximum length = 36
func (rcv *AirTaskingOrder_Abridged) Id() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Unique identifier of the record, auto-generated by the system.
/// Example: /// Example: POI-ID
/// Constraints: Minimum length = 1, Maximum length = 36
/// Classification marking of the data in IC/CAPCO Portion-marked format.
/// Example: /// Example: U
/// Constraints: Minimum length = 1, Maximum length = 128
func (rcv *AirTaskingOrder_Abridged) ClassificationMarking() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Classification marking of the data in IC/CAPCO Portion-marked format.
/// Example: /// Example: U
/// Constraints: Minimum length = 1, Maximum length = 128
/// Optional URI location in the document repository of the raw file parsed by the system to produce this record. To download the raw file, prepend https://udl-hostname/scs/download?id= to this value.
/// Example: /// Example: Example URI
/// Constraints: Minimum length = 0, Maximum length = 256
func (rcv *AirTaskingOrder_Abridged) RawFileUri() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Optional URI location in the document repository of the raw file parsed by the system to produce this record. To download the raw file, prepend https://udl-hostname/scs/download?id= to this value.
/// Example: /// Example: Example URI
/// Constraints: Minimum length = 0, Maximum length = 256
/// Specifies the unique operation or exercise name, nickname, or codeword assigned to a joint exercise or operation plan.
/// Example: /// Example: DESERT WIND
/// Constraints: Minimum length = 1, Maximum length = 64
func (rcv *AirTaskingOrder_Abridged) OpExerName() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Specifies the unique operation or exercise name, nickname, or codeword assigned to a joint exercise or operation plan.
/// Example: /// Example: DESERT WIND
/// Constraints: Minimum length = 1, Maximum length = 64
/// The identifier of the originator of the message.
/// Example: /// Example: USCENTCOM
/// Constraints: Minimum length = 0, Maximum length = 36
func (rcv *AirTaskingOrder_Abridged) MsgOriginator() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The identifier of the originator of the message.
/// Example: /// Example: USCENTCOM
/// Constraints: Minimum length = 0, Maximum length = 36
/// The unique message identifier sequentially assigned by the originator.
/// Example: /// Example: ATO A
/// Constraints: Minimum length = 0, Maximum length = 16
func (rcv *AirTaskingOrder_Abridged) MsgSn() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The unique message identifier sequentially assigned by the originator.
/// Example: /// Example: ATO A
/// Constraints: Minimum length = 0, Maximum length = 16
/// The month in which the message originated.
/// Example: /// Example: OCT
/// Constraints: Minimum length = 0, Maximum length = 16
func (rcv *AirTaskingOrder_Abridged) MsgMonth() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The month in which the message originated.
/// Example: /// Example: OCT
/// Constraints: Minimum length = 0, Maximum length = 16
/// The qualifier which caveats the message status.
/// Example: /// Example: CHG
/// Constraints: Minimum length = 0, Maximum length = 8
func (rcv *AirTaskingOrder_Abridged) MsgQualifier() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(18))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The qualifier which caveats the message status.
/// Example: /// Example: CHG
/// Constraints: Minimum length = 0, Maximum length = 8
/// The indicator specifying an affirmative or a negatice condition for this message.
/// Example: /// Example: YES
/// Constraints: Minimum length = 0, Maximum length = 8
func (rcv *AirTaskingOrder_Abridged) AckReqInd() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(20))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The indicator specifying an affirmative or a negatice condition for this message.
/// Example: /// Example: YES
/// Constraints: Minimum length = 0, Maximum length = 8
/// Specifies textual data amplifying the data contained in the acknowledgement requirement indicator (ackRedInd) field or the unit required to acknowledge.
/// Example: /// Example: INST:45TS
/// Constraints: Minimum length = 0, Maximum length = 36
func (rcv *AirTaskingOrder_Abridged) AckUnitInstructions() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(22))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Specifies textual data amplifying the data contained in the acknowledgement requirement indicator (ackRedInd) field or the unit required to acknowledge.
/// Example: /// Example: INST:45TS
/// Constraints: Minimum length = 0, Maximum length = 36
/// The effective begin time for this ATO in ISO 8601 UTC format with millisecond precision.
/// Example: /// Example: 2023-10-25T12:00:00.123Z
/// Constraints: No constraints specified.
func (rcv *AirTaskingOrder_Abridged) BeginTs() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(24))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The effective begin time for this ATO in ISO 8601 UTC format with millisecond precision.
/// Example: /// Example: 2023-10-25T12:00:00.123Z
/// Constraints: No constraints specified.
/// The effective end time for this ATO in ISO 8601 UTC format with millisecond precision.
/// Example: /// Example: 2023-10-27T12:00:00.123Z
/// Constraints: No constraints specified.
func (rcv *AirTaskingOrder_Abridged) EndTs() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(26))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The effective end time for this ATO in ISO 8601 UTC format with millisecond precision.
/// Example: /// Example: 2023-10-27T12:00:00.123Z
/// Constraints: No constraints specified.
/// A collection that details special instructions, important information, guidance, and amplifying information regarding this ATO.
/// Example: /// Example: No example provided.
/// Constraints: No constraints specified.
func (rcv *AirTaskingOrder_Abridged) GenText(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(28))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *AirTaskingOrder_Abridged) GenTextLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(28))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

/// A collection that details special instructions, important information, guidance, and amplifying information regarding this ATO.
/// Example: /// Example: No example provided.
/// Constraints: No constraints specified.
/// A collection that specifies the tasked country, tasked service, unit and mission level tasking for this ATO.
/// Example: /// Example: No example provided.
/// Constraints: No constraints specified.
func (rcv *AirTaskingOrder_Abridged) AcMsnTasking(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(30))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *AirTaskingOrder_Abridged) AcMsnTaskingLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(30))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

/// A collection that specifies the tasked country, tasked service, unit and mission level tasking for this ATO.
/// Example: /// Example: No example provided.
/// Constraints: No constraints specified.
/// A collection that specifies the naval flight operations for this ATO.
/// Example: /// Example: No example provided.
/// Constraints: No constraints specified.
func (rcv *AirTaskingOrder_Abridged) NavalFltOps(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(32))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *AirTaskingOrder_Abridged) NavalFltOpsLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(32))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

/// A collection that specifies the naval flight operations for this ATO.
/// Example: /// Example: No example provided.
/// Constraints: No constraints specified.
/// Time the row was created in the database.
/// Example: /// Example: 2018-01-01T16:00:00.123Z
/// Constraints: No constraints specified.
func (rcv *AirTaskingOrder_Abridged) CreatedAt() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(34))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Time the row was created in the database.
/// Example: /// Example: 2018-01-01T16:00:00.123Z
/// Constraints: No constraints specified.
/// Application user who created the row in the database.
/// Example: /// Example: some.user
/// Constraints: Minimum length = 1, Maximum length = 64
func (rcv *AirTaskingOrder_Abridged) CreatedBy() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(36))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Application user who created the row in the database.
/// Example: /// Example: some.user
/// Constraints: Minimum length = 1, Maximum length = 64
/// Source of the data.
/// Example: /// Example: Bluestaq
/// Constraints: Minimum length = 1, Maximum length = 36
func (rcv *AirTaskingOrder_Abridged) Source() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(38))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Source of the data.
/// Example: /// Example: Bluestaq
/// Constraints: Minimum length = 1, Maximum length = 36
/// The source data library from which this record was received. This could be a remote or tactical UDL or another data library. If null, the record should be assumed to have originated from the primary Enterprise UDL.
/// Example: /// Example: AXE
/// Constraints: Minimum length = 0, Maximum length = 64
func (rcv *AirTaskingOrder_Abridged) SourceDl() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(40))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The source data library from which this record was received. This could be a remote or tactical UDL or another data library. If null, the record should be assumed to have originated from the primary Enterprise UDL.
/// Example: /// Example: AXE
/// Constraints: Minimum length = 0, Maximum length = 64
/// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
/// Example: /// Example: THIRD_PARTY_DATASOURCE
/// Constraints: Minimum length = 0, Maximum length = 64
func (rcv *AirTaskingOrder_Abridged) Origin() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(42))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
/// Example: /// Example: THIRD_PARTY_DATASOURCE
/// Constraints: Minimum length = 0, Maximum length = 64
/// The originating source network on which this record was created, auto-populated by the system.
/// Example: /// Example: ORIG
/// Constraints: Minimum length = 0, Maximum length = 32
func (rcv *AirTaskingOrder_Abridged) OrigNetwork() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(44))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The originating source network on which this record was created, auto-populated by the system.
/// Example: /// Example: ORIG
/// Constraints: Minimum length = 0, Maximum length = 32
/// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
/// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
/// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
/// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
/// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
/// Example: /// Example: TEST
/// Constraints: Minimum length = 1, Maximum length = 32
func (rcv *AirTaskingOrder_Abridged) DataMode() AirTaskingOrder_Abridged_dataMode_Enum {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(46))
	if o != 0 {
		return AirTaskingOrder_Abridged_dataMode_Enum(rcv._tab.GetInt8(o + rcv._tab.Pos))
	}
	return 0
}

/// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
/// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
/// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
/// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
/// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
/// Example: /// Example: TEST
/// Constraints: Minimum length = 1, Maximum length = 32
func (rcv *AirTaskingOrder_Abridged) MutateDataMode(n AirTaskingOrder_Abridged_dataMode_Enum) bool {
	return rcv._tab.MutateInt8Slot(46, int8(n))
}

func AirTaskingOrder_AbridgedStart(builder *flatbuffers.Builder) {
	builder.StartObject(22)
}
func AirTaskingOrder_AbridgedAddId(builder *flatbuffers.Builder, id flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(id), 0)
}
func AirTaskingOrder_AbridgedAddClassificationMarking(builder *flatbuffers.Builder, classificationMarking flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(classificationMarking), 0)
}
func AirTaskingOrder_AbridgedAddRawFileUri(builder *flatbuffers.Builder, rawFileUri flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(rawFileUri), 0)
}
func AirTaskingOrder_AbridgedAddOpExerName(builder *flatbuffers.Builder, opExerName flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(3, flatbuffers.UOffsetT(opExerName), 0)
}
func AirTaskingOrder_AbridgedAddMsgOriginator(builder *flatbuffers.Builder, msgOriginator flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(4, flatbuffers.UOffsetT(msgOriginator), 0)
}
func AirTaskingOrder_AbridgedAddMsgSn(builder *flatbuffers.Builder, msgSn flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(5, flatbuffers.UOffsetT(msgSn), 0)
}
func AirTaskingOrder_AbridgedAddMsgMonth(builder *flatbuffers.Builder, msgMonth flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(6, flatbuffers.UOffsetT(msgMonth), 0)
}
func AirTaskingOrder_AbridgedAddMsgQualifier(builder *flatbuffers.Builder, msgQualifier flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(7, flatbuffers.UOffsetT(msgQualifier), 0)
}
func AirTaskingOrder_AbridgedAddAckReqInd(builder *flatbuffers.Builder, ackReqInd flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(8, flatbuffers.UOffsetT(ackReqInd), 0)
}
func AirTaskingOrder_AbridgedAddAckUnitInstructions(builder *flatbuffers.Builder, ackUnitInstructions flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(9, flatbuffers.UOffsetT(ackUnitInstructions), 0)
}
func AirTaskingOrder_AbridgedAddBeginTs(builder *flatbuffers.Builder, beginTs flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(10, flatbuffers.UOffsetT(beginTs), 0)
}
func AirTaskingOrder_AbridgedAddEndTs(builder *flatbuffers.Builder, endTs flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(11, flatbuffers.UOffsetT(endTs), 0)
}
func AirTaskingOrder_AbridgedAddGenText(builder *flatbuffers.Builder, genText flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(12, flatbuffers.UOffsetT(genText), 0)
}
func AirTaskingOrder_AbridgedStartGenTextVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func AirTaskingOrder_AbridgedAddAcMsnTasking(builder *flatbuffers.Builder, acMsnTasking flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(13, flatbuffers.UOffsetT(acMsnTasking), 0)
}
func AirTaskingOrder_AbridgedStartAcMsnTaskingVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func AirTaskingOrder_AbridgedAddNavalFltOps(builder *flatbuffers.Builder, navalFltOps flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(14, flatbuffers.UOffsetT(navalFltOps), 0)
}
func AirTaskingOrder_AbridgedStartNavalFltOpsVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func AirTaskingOrder_AbridgedAddCreatedAt(builder *flatbuffers.Builder, createdAt flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(15, flatbuffers.UOffsetT(createdAt), 0)
}
func AirTaskingOrder_AbridgedAddCreatedBy(builder *flatbuffers.Builder, createdBy flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(16, flatbuffers.UOffsetT(createdBy), 0)
}
func AirTaskingOrder_AbridgedAddSource(builder *flatbuffers.Builder, source flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(17, flatbuffers.UOffsetT(source), 0)
}
func AirTaskingOrder_AbridgedAddSourceDl(builder *flatbuffers.Builder, sourceDl flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(18, flatbuffers.UOffsetT(sourceDl), 0)
}
func AirTaskingOrder_AbridgedAddOrigin(builder *flatbuffers.Builder, origin flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(19, flatbuffers.UOffsetT(origin), 0)
}
func AirTaskingOrder_AbridgedAddOrigNetwork(builder *flatbuffers.Builder, origNetwork flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(20, flatbuffers.UOffsetT(origNetwork), 0)
}
func AirTaskingOrder_AbridgedAddDataMode(builder *flatbuffers.Builder, dataMode AirTaskingOrder_Abridged_dataMode_Enum) {
	builder.PrependInt8Slot(21, int8(dataMode), 0)
}
func AirTaskingOrder_AbridgedEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
