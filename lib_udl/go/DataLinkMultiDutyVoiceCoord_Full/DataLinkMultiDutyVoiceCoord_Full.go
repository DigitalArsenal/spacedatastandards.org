// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package DataLinkMultiDutyVoiceCoord_Full

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

/// /// Collection of information regarding the function, frequency, and priority of interface control and coordination nets for multilink coordination. There can be 0 to many DataLinkMultiVoiceCoord collections within a DataLinkMultiDuty collection.
type DataLinkMultiDutyVoiceCoord_Full struct {
	_tab flatbuffers.Table
}

const DataLinkMultiDutyVoiceCoord_FullIdentifier = "DATA"

func GetRootAsDataLinkMultiDutyVoiceCoord_Full(buf []byte, offset flatbuffers.UOffsetT) *DataLinkMultiDutyVoiceCoord_Full {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &DataLinkMultiDutyVoiceCoord_Full{}
	x.Init(buf, n+offset)
	return x
}

func FinishDataLinkMultiDutyVoiceCoord_FullBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	identifierBytes := []byte(DataLinkMultiDutyVoiceCoord_FullIdentifier)
	builder.FinishWithFileIdentifier(offset, identifierBytes)
}

func DataLinkMultiDutyVoiceCoord_FullBufferHasIdentifier(buf []byte) bool {
	return flatbuffers.BufferHasIdentifier(buf, DataLinkMultiDutyVoiceCoord_FullIdentifier)
}

func GetSizePrefixedRootAsDataLinkMultiDutyVoiceCoord_Full(buf []byte, offset flatbuffers.UOffsetT) *DataLinkMultiDutyVoiceCoord_Full {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &DataLinkMultiDutyVoiceCoord_Full{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedDataLinkMultiDutyVoiceCoord_FullBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	identifierBytes := []byte(DataLinkMultiDutyVoiceCoord_FullIdentifier)
	builder.FinishSizePrefixedWithFileIdentifier(offset, identifierBytes)
}

func SizePrefixedDataLinkMultiDutyVoiceCoord_FullBufferHasIdentifier(buf []byte) bool {
	return flatbuffers.SizePrefixedBufferHasIdentifier(buf, DataLinkMultiDutyVoiceCoord_FullIdentifier)
}

func (rcv *DataLinkMultiDutyVoiceCoord_Full) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *DataLinkMultiDutyVoiceCoord_Full) Table() flatbuffers.Table {
	return rcv._tab
}

/// Designator assigned to a voice interface control and coordination net for multilink coordination (e.g. ADCCN, DCN, VPN, etc.).
/// Example: /// Example: VPN
/// Constraints: Minimum length = 0, Maximum length = 5
func (rcv *DataLinkMultiDutyVoiceCoord_Full) MultiVoiceNetDes() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Designator assigned to a voice interface control and coordination net for multilink coordination (e.g. ADCCN, DCN, VPN, etc.).
/// Example: /// Example: VPN
/// Constraints: Minimum length = 0, Maximum length = 5
/// Designator used in nonsecure communications to refer to a radio frequency for multilink coordination.
/// Example: /// Example: ST300A
/// Constraints: Minimum length = 0, Maximum length = 8
func (rcv *DataLinkMultiDutyVoiceCoord_Full) MultiFreqDes() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Designator used in nonsecure communications to refer to a radio frequency for multilink coordination.
/// Example: /// Example: ST300A
/// Constraints: Minimum length = 0, Maximum length = 8
/// Priority of a communication circuit, channel or frequency for multilink coordination (e.g. P - Primary, M - Monitor).
/// Example: /// Example: P
/// Constraints: Minimum length = 0, Maximum length = 1
func (rcv *DataLinkMultiDutyVoiceCoord_Full) MultiCommPri() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Priority of a communication circuit, channel or frequency for multilink coordination (e.g. P - Primary, M - Monitor).
/// Example: /// Example: P
/// Constraints: Minimum length = 0, Maximum length = 1
/// Array of telephone numbers or contact frequencies used for interface control for multilink coordination.
/// Example: /// Example: ['TEL:804-555-4142', 'TEL:804-867-5309']
/// Constraints: No constraints specified.
func (rcv *DataLinkMultiDutyVoiceCoord_Full) MultiTeleFreqNums(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *DataLinkMultiDutyVoiceCoord_Full) MultiTeleFreqNumsLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

/// Array of telephone numbers or contact frequencies used for interface control for multilink coordination.
/// Example: /// Example: ['TEL:804-555-4142', 'TEL:804-867-5309']
/// Constraints: No constraints specified.
func DataLinkMultiDutyVoiceCoord_FullStart(builder *flatbuffers.Builder) {
	builder.StartObject(4)
}
func DataLinkMultiDutyVoiceCoord_FullAddMultiVoiceNetDes(builder *flatbuffers.Builder, multiVoiceNetDes flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(multiVoiceNetDes), 0)
}
func DataLinkMultiDutyVoiceCoord_FullAddMultiFreqDes(builder *flatbuffers.Builder, multiFreqDes flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(multiFreqDes), 0)
}
func DataLinkMultiDutyVoiceCoord_FullAddMultiCommPri(builder *flatbuffers.Builder, multiCommPri flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(multiCommPri), 0)
}
func DataLinkMultiDutyVoiceCoord_FullAddMultiTeleFreqNums(builder *flatbuffers.Builder, multiTeleFreqNums flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(3, flatbuffers.UOffsetT(multiTeleFreqNums), 0)
}
func DataLinkMultiDutyVoiceCoord_FullStartMultiTeleFreqNumsVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func DataLinkMultiDutyVoiceCoord_FullEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
