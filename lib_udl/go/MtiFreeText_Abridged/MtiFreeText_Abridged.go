// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package MtiFreeText_Abridged

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

/// /// Provides a means of sending Basic Character Set alphanumeric text messages.
type MtiFreeText_Abridged struct {
	_tab flatbuffers.Table
}

const MtiFreeText_AbridgedIdentifier = "MTIF"

func GetRootAsMtiFreeText_Abridged(buf []byte, offset flatbuffers.UOffsetT) *MtiFreeText_Abridged {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &MtiFreeText_Abridged{}
	x.Init(buf, n+offset)
	return x
}

func FinishMtiFreeText_AbridgedBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	identifierBytes := []byte(MtiFreeText_AbridgedIdentifier)
	builder.FinishWithFileIdentifier(offset, identifierBytes)
}

func MtiFreeText_AbridgedBufferHasIdentifier(buf []byte) bool {
	return flatbuffers.BufferHasIdentifier(buf, MtiFreeText_AbridgedIdentifier)
}

func GetSizePrefixedRootAsMtiFreeText_Abridged(buf []byte, offset flatbuffers.UOffsetT) *MtiFreeText_Abridged {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &MtiFreeText_Abridged{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedMtiFreeText_AbridgedBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	identifierBytes := []byte(MtiFreeText_AbridgedIdentifier)
	builder.FinishSizePrefixedWithFileIdentifier(offset, identifierBytes)
}

func SizePrefixedMtiFreeText_AbridgedBufferHasIdentifier(buf []byte) bool {
	return flatbuffers.SizePrefixedBufferHasIdentifier(buf, MtiFreeText_AbridgedIdentifier)
}

func (rcv *MtiFreeText_Abridged) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *MtiFreeText_Abridged) Table() flatbuffers.Table {
	return rcv._tab
}

/// The originator of the Free Text message.
/// Example: /// Example: ORIGINATOR
/// Constraints: Minimum length = 0, Maximum length = 1024
func (rcv *MtiFreeText_Abridged) F1() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The originator of the Free Text message.
/// Example: /// Example: ORIGINATOR
/// Constraints: Minimum length = 0, Maximum length = 1024
/// The recipient for which the Free Text message is intended.
/// Example: /// Example: RECIPIENT
/// Constraints: Minimum length = 0, Maximum length = 128
func (rcv *MtiFreeText_Abridged) F2() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The recipient for which the Free Text message is intended.
/// Example: /// Example: RECIPIENT
/// Constraints: Minimum length = 0, Maximum length = 128
/// Free text data message.
/// Example: /// Example: TEXT
/// Constraints: Minimum length = 0, Maximum length = 1024
func (rcv *MtiFreeText_Abridged) F3() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Free text data message.
/// Example: /// Example: TEXT
/// Constraints: Minimum length = 0, Maximum length = 1024
func MtiFreeText_AbridgedStart(builder *flatbuffers.Builder) {
	builder.StartObject(3)
}
func MtiFreeText_AbridgedAddF1(builder *flatbuffers.Builder, f1 flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(f1), 0)
}
func MtiFreeText_AbridgedAddF2(builder *flatbuffers.Builder, f2 flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(f2), 0)
}
func MtiFreeText_AbridgedAddF3(builder *flatbuffers.Builder, f3 flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(f3), 0)
}
func MtiFreeText_AbridgedEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
