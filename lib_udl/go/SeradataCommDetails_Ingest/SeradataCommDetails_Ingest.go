// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package SeradataCommDetails_Ingest

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

/// /// Seradata-compiled information on communications payloads.
type SeradataCommDetails_Ingest struct {
	_tab flatbuffers.Table
}

const SeradataCommDetails_IngestIdentifier = "SERA"

func GetRootAsSeradataCommDetails_Ingest(buf []byte, offset flatbuffers.UOffsetT) *SeradataCommDetails_Ingest {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &SeradataCommDetails_Ingest{}
	x.Init(buf, n+offset)
	return x
}

func FinishSeradataCommDetails_IngestBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	identifierBytes := []byte(SeradataCommDetails_IngestIdentifier)
	builder.FinishWithFileIdentifier(offset, identifierBytes)
}

func SeradataCommDetails_IngestBufferHasIdentifier(buf []byte) bool {
	return flatbuffers.BufferHasIdentifier(buf, SeradataCommDetails_IngestIdentifier)
}

func GetSizePrefixedRootAsSeradataCommDetails_Ingest(buf []byte, offset flatbuffers.UOffsetT) *SeradataCommDetails_Ingest {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &SeradataCommDetails_Ingest{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedSeradataCommDetails_IngestBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	identifierBytes := []byte(SeradataCommDetails_IngestIdentifier)
	builder.FinishSizePrefixedWithFileIdentifier(offset, identifierBytes)
}

func SizePrefixedSeradataCommDetails_IngestBufferHasIdentifier(buf []byte) bool {
	return flatbuffers.SizePrefixedBufferHasIdentifier(buf, SeradataCommDetails_IngestIdentifier)
}

func (rcv *SeradataCommDetails_Ingest) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *SeradataCommDetails_Ingest) Table() flatbuffers.Table {
	return rcv._tab
}

/// Unique identifier of the record, auto-generated by the system.
/// Example: /// Example: SERADATACOMMDETAILS-ID
/// Constraints: Minimum length = 1, Maximum length = 36
func (rcv *SeradataCommDetails_Ingest) Id() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Unique identifier of the record, auto-generated by the system.
/// Example: /// Example: SERADATACOMMDETAILS-ID
/// Constraints: Minimum length = 1, Maximum length = 36
/// UUID of the parent Comm record.
/// Example: /// Example: idComm
/// Constraints: Minimum length = 0, Maximum length = 36
func (rcv *SeradataCommDetails_Ingest) IdComm() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// UUID of the parent Comm record.
/// Example: /// Example: idComm
/// Constraints: Minimum length = 0, Maximum length = 36
/// Classification marking of the data in IC/CAPCO Portion-marked format.
/// Example: /// Example: U
/// Constraints: Minimum length = 1, Maximum length = 128
func (rcv *SeradataCommDetails_Ingest) ClassificationMarking() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Classification marking of the data in IC/CAPCO Portion-marked format.
/// Example: /// Example: U
/// Constraints: Minimum length = 1, Maximum length = 128
/// Seradata ID of the spacecraft (SeradataSpacecraftDetails ID).
/// Example: /// Example: spacecraftId
/// Constraints: Minimum length = 0, Maximum length = 36
func (rcv *SeradataCommDetails_Ingest) SpacecraftId() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Seradata ID of the spacecraft (SeradataSpacecraftDetails ID).
/// Example: /// Example: spacecraftId
/// Constraints: Minimum length = 0, Maximum length = 36
/// Name of the band of this RF range (e.g. X,K,Ku,Ka,L,S,C,UHF,VHF,EHF,SHF,UNK,VLF,HF,E,Q,V,W). See RFBandType for more details and descriptions of each band name.
/// Example: /// Example: X
/// Constraints: Minimum length = 0, Maximum length = 5
func (rcv *SeradataCommDetails_Ingest) Band() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Name of the band of this RF range (e.g. X,K,Ku,Ka,L,S,C,UHF,VHF,EHF,SHF,UNK,VLF,HF,E,Q,V,W). See RFBandType for more details and descriptions of each band name.
/// Example: /// Example: X
/// Constraints: Minimum length = 0, Maximum length = 5
/// Solid state power amplifier, in Watts.
/// Example: /// Example: 1.23
/// Constraints: No constraints specified.
func (rcv *SeradataCommDetails_Ingest) SolidStatePowerAmp() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Solid state power amplifier, in Watts.
/// Example: /// Example: 1.23
/// Constraints: No constraints specified.
func (rcv *SeradataCommDetails_Ingest) MutateSolidStatePowerAmp(n float64) bool {
	return rcv._tab.MutateFloat64Slot(14, n)
}

/// Comm travelingWaveTubeAmplifier in Watts.
/// Example: /// Example: 1.23
/// Constraints: No constraints specified.
func (rcv *SeradataCommDetails_Ingest) TravelingWaveTubeAmplifier() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Comm travelingWaveTubeAmplifier in Watts.
/// Example: /// Example: 1.23
/// Constraints: No constraints specified.
func (rcv *SeradataCommDetails_Ingest) MutateTravelingWaveTubeAmplifier(n float64) bool {
	return rcv._tab.MutateFloat64Slot(16, n)
}

/// Comm gatewayUplinkFrom in Ghz.
/// Example: /// Example: 1.23
/// Constraints: No constraints specified.
func (rcv *SeradataCommDetails_Ingest) GatewayUplinkFrom() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(18))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Comm gatewayUplinkFrom in Ghz.
/// Example: /// Example: 1.23
/// Constraints: No constraints specified.
func (rcv *SeradataCommDetails_Ingest) MutateGatewayUplinkFrom(n float64) bool {
	return rcv._tab.MutateFloat64Slot(18, n)
}

/// Comm gatewayUplinkTo in Ghz.
/// Example: /// Example: 1.23
/// Constraints: No constraints specified.
func (rcv *SeradataCommDetails_Ingest) GatewayUplinkTo() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(20))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Comm gatewayUplinkTo in Ghz.
/// Example: /// Example: 1.23
/// Constraints: No constraints specified.
func (rcv *SeradataCommDetails_Ingest) MutateGatewayUplinkTo(n float64) bool {
	return rcv._tab.MutateFloat64Slot(20, n)
}

/// Comm gatewayDownlinkFrom in Ghz.
/// Example: /// Example: 1.23
/// Constraints: No constraints specified.
func (rcv *SeradataCommDetails_Ingest) GatewayDownlinkFrom() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(22))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Comm gatewayDownlinkFrom in Ghz.
/// Example: /// Example: 1.23
/// Constraints: No constraints specified.
func (rcv *SeradataCommDetails_Ingest) MutateGatewayDownlinkFrom(n float64) bool {
	return rcv._tab.MutateFloat64Slot(22, n)
}

/// Comm gatewayDownlinkTo in Ghz.
/// Example: /// Example: 1.23
/// Constraints: No constraints specified.
func (rcv *SeradataCommDetails_Ingest) GatewayDownlinkTo() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(24))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Comm gatewayDownlinkTo in Ghz.
/// Example: /// Example: 1.23
/// Constraints: No constraints specified.
func (rcv *SeradataCommDetails_Ingest) MutateGatewayDownlinkTo(n float64) bool {
	return rcv._tab.MutateFloat64Slot(24, n)
}

/// Comm polarization.
/// Example: /// Example: polarization
/// Constraints: Minimum length = 0, Maximum length = 64
func (rcv *SeradataCommDetails_Ingest) Polarization() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(26))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Comm polarization.
/// Example: /// Example: polarization
/// Constraints: Minimum length = 0, Maximum length = 64
/// Effective isotropic radiated power in dB.
/// Example: /// Example: 1.23
/// Constraints: No constraints specified.
func (rcv *SeradataCommDetails_Ingest) Eirp() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(28))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Effective isotropic radiated power in dB.
/// Example: /// Example: 1.23
/// Constraints: No constraints specified.
func (rcv *SeradataCommDetails_Ingest) MutateEirp(n float64) bool {
	return rcv._tab.MutateFloat64Slot(28, n)
}

/// Comm bandwidth in Mhz.
/// Example: /// Example: 1.23
/// Constraints: No constraints specified.
func (rcv *SeradataCommDetails_Ingest) Bandwidth() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(30))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Comm bandwidth in Mhz.
/// Example: /// Example: 1.23
/// Constraints: No constraints specified.
func (rcv *SeradataCommDetails_Ingest) MutateBandwidth(n float64) bool {
	return rcv._tab.MutateFloat64Slot(30, n)
}

/// Comm numOperationalTransponders.
/// Example: /// Example: 1
/// Constraints: No constraints specified.
func (rcv *SeradataCommDetails_Ingest) NumOperationalTransponders() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(32))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

/// Comm numOperationalTransponders.
/// Example: /// Example: 1
/// Constraints: No constraints specified.
func (rcv *SeradataCommDetails_Ingest) MutateNumOperationalTransponders(n int32) bool {
	return rcv._tab.MutateInt32Slot(32, n)
}

/// Comm numSpareTransponders.
/// Example: /// Example: 1
/// Constraints: No constraints specified.
func (rcv *SeradataCommDetails_Ingest) NumSpareTransponders() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(34))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

/// Comm numSpareTransponders.
/// Example: /// Example: 1
/// Constraints: No constraints specified.
func (rcv *SeradataCommDetails_Ingest) MutateNumSpareTransponders(n int32) bool {
	return rcv._tab.MutateInt32Slot(34, n)
}

/// Comm hostedForCompanyOrgId.
/// Example: /// Example: hostedForCompanyOrgId
/// Constraints: Minimum length = 0, Maximum length = 36
func (rcv *SeradataCommDetails_Ingest) HostedForCompanyOrgId() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(36))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Comm hostedForCompanyOrgId.
/// Example: /// Example: hostedForCompanyOrgId
/// Constraints: Minimum length = 0, Maximum length = 36
/// Comm manufacturerOrgId.
/// Example: /// Example: manufacturerOrgId
/// Constraints: Minimum length = 0, Maximum length = 36
func (rcv *SeradataCommDetails_Ingest) ManufacturerOrgId() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(38))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Comm manufacturerOrgId.
/// Example: /// Example: manufacturerOrgId
/// Constraints: Minimum length = 0, Maximum length = 36
/// Comm tradeLeaseOrgId.
/// Example: /// Example: tradeLeaseOrgId
/// Constraints: Minimum length = 0, Maximum length = 36
func (rcv *SeradataCommDetails_Ingest) TradeLeaseOrgId() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(40))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Comm tradeLeaseOrgId.
/// Example: /// Example: tradeLeaseOrgId
/// Constraints: Minimum length = 0, Maximum length = 36
/// Comm num36MhzEquivalentTransponders.
/// Example: /// Example: 1
/// Constraints: No constraints specified.
func (rcv *SeradataCommDetails_Ingest) Num36MhzEquivalentTransponders() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(42))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

/// Comm num36MhzEquivalentTransponders.
/// Example: /// Example: 1
/// Constraints: No constraints specified.
func (rcv *SeradataCommDetails_Ingest) MutateNum36MhzEquivalentTransponders(n int32) bool {
	return rcv._tab.MutateInt32Slot(42, n)
}

/// Comm htsNumUserSpotBeams.
/// Example: /// Example: 1
/// Constraints: No constraints specified.
func (rcv *SeradataCommDetails_Ingest) HtsNumUserSpotBeams() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(44))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

/// Comm htsNumUserSpotBeams.
/// Example: /// Example: 1
/// Constraints: No constraints specified.
func (rcv *SeradataCommDetails_Ingest) MutateHtsNumUserSpotBeams(n int32) bool {
	return rcv._tab.MutateInt32Slot(44, n)
}

/// Comm htsUserDownlinkBandwidthPerBeam in Mhz.
/// Example: /// Example: 1.23
/// Constraints: No constraints specified.
func (rcv *SeradataCommDetails_Ingest) HtsUserDownlinkBandwidthPerBeam() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(46))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Comm htsUserDownlinkBandwidthPerBeam in Mhz.
/// Example: /// Example: 1.23
/// Constraints: No constraints specified.
func (rcv *SeradataCommDetails_Ingest) MutateHtsUserDownlinkBandwidthPerBeam(n float64) bool {
	return rcv._tab.MutateFloat64Slot(46, n)
}

/// Comm htsUserUplinkBandwidthPerBeam in Mhz.
/// Example: /// Example: 1.23
/// Constraints: No constraints specified.
func (rcv *SeradataCommDetails_Ingest) HtsUserUplinkBandwidthPerBeam() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(48))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Comm htsUserUplinkBandwidthPerBeam in Mhz.
/// Example: /// Example: 1.23
/// Constraints: No constraints specified.
func (rcv *SeradataCommDetails_Ingest) MutateHtsUserUplinkBandwidthPerBeam(n float64) bool {
	return rcv._tab.MutateFloat64Slot(48, n)
}

/// Comm estimated HtsTotalUserDownlinkBandwidthPerBeam in Mhz.
/// Example: /// Example: 1.23
/// Constraints: No constraints specified.
func (rcv *SeradataCommDetails_Ingest) EstHtsTotalUserDownlinkBandwidthPerBeam() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(50))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Comm estimated HtsTotalUserDownlinkBandwidthPerBeam in Mhz.
/// Example: /// Example: 1.23
/// Constraints: No constraints specified.
func (rcv *SeradataCommDetails_Ingest) MutateEstHtsTotalUserDownlinkBandwidthPerBeam(n float64) bool {
	return rcv._tab.MutateFloat64Slot(50, n)
}

/// Comm estimated HtsTotalUserUplinkBandwidthPerBeam in Mhz.
/// Example: /// Example: 1.23
/// Constraints: No constraints specified.
func (rcv *SeradataCommDetails_Ingest) EstHtsTotalUserUplinkBandwidthPerBeam() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(52))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Comm estimated HtsTotalUserUplinkBandwidthPerBeam in Mhz.
/// Example: /// Example: 1.23
/// Constraints: No constraints specified.
func (rcv *SeradataCommDetails_Ingest) MutateEstHtsTotalUserUplinkBandwidthPerBeam(n float64) bool {
	return rcv._tab.MutateFloat64Slot(52, n)
}

/// Comm estimated HtsTotalCapacity in Gbps.
/// Example: /// Example: 1.23
/// Constraints: No constraints specified.
func (rcv *SeradataCommDetails_Ingest) EstHtsTotalCapacity() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(54))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Comm estimated HtsTotalCapacity in Gbps.
/// Example: /// Example: 1.23
/// Constraints: No constraints specified.
func (rcv *SeradataCommDetails_Ingest) MutateEstHtsTotalCapacity(n float64) bool {
	return rcv._tab.MutateFloat64Slot(54, n)
}

/// Comm userDownlinkFrom in Ghz.
/// Example: /// Example: 1.23
/// Constraints: No constraints specified.
func (rcv *SeradataCommDetails_Ingest) UserDownlinkFrom() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(56))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Comm userDownlinkFrom in Ghz.
/// Example: /// Example: 1.23
/// Constraints: No constraints specified.
func (rcv *SeradataCommDetails_Ingest) MutateUserDownlinkFrom(n float64) bool {
	return rcv._tab.MutateFloat64Slot(56, n)
}

/// Comm userDownlinkTo in Ghz.
/// Example: /// Example: 1.23
/// Constraints: No constraints specified.
func (rcv *SeradataCommDetails_Ingest) UserDownlinkTo() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(58))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Comm userDownlinkTo in Ghz.
/// Example: /// Example: 1.23
/// Constraints: No constraints specified.
func (rcv *SeradataCommDetails_Ingest) MutateUserDownlinkTo(n float64) bool {
	return rcv._tab.MutateFloat64Slot(58, n)
}

/// Comm userUplinkFrom in Ghz.
/// Example: /// Example: 1.23
/// Constraints: No constraints specified.
func (rcv *SeradataCommDetails_Ingest) UserUplinkFrom() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(60))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Comm userUplinkFrom in Ghz.
/// Example: /// Example: 1.23
/// Constraints: No constraints specified.
func (rcv *SeradataCommDetails_Ingest) MutateUserUplinkFrom(n float64) bool {
	return rcv._tab.MutateFloat64Slot(60, n)
}

/// Comm userUplinkTo in Ghz.
/// Example: /// Example: 1.23
/// Constraints: No constraints specified.
func (rcv *SeradataCommDetails_Ingest) UserUplinkTo() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(62))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Comm userUplinkTo in Ghz.
/// Example: /// Example: 1.23
/// Constraints: No constraints specified.
func (rcv *SeradataCommDetails_Ingest) MutateUserUplinkTo(n float64) bool {
	return rcv._tab.MutateFloat64Slot(62, n)
}

/// Payload notes.
/// Example: /// Example: Sample Notes
/// Constraints: Minimum length = 0, Maximum length = 2147483647
func (rcv *SeradataCommDetails_Ingest) PayloadNotes() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(64))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Payload notes.
/// Example: /// Example: Sample Notes
/// Constraints: Minimum length = 0, Maximum length = 2147483647
/// Source of the data.
/// Example: /// Example: Bluestaq
/// Constraints: Minimum length = 1, Maximum length = 64
func (rcv *SeradataCommDetails_Ingest) Source() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(66))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Source of the data.
/// Example: /// Example: Bluestaq
/// Constraints: Minimum length = 1, Maximum length = 64
/// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
/// Example: /// Example: THIRD_PARTY_DATASOURCE
/// Constraints: Minimum length = 0, Maximum length = 64
func (rcv *SeradataCommDetails_Ingest) Origin() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(68))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
/// Example: /// Example: THIRD_PARTY_DATASOURCE
/// Constraints: Minimum length = 0, Maximum length = 64
/// The originating source network on which this record was created, auto-populated by the system.
/// Example: /// Example: ORIG
/// Constraints: Minimum length = 1, Maximum length = 32
func (rcv *SeradataCommDetails_Ingest) OrigNetwork() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(70))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The originating source network on which this record was created, auto-populated by the system.
/// Example: /// Example: ORIG
/// Constraints: Minimum length = 1, Maximum length = 32
/// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
/// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
/// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
/// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
/// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
/// Example: /// Example: TEST
/// Constraints: Minimum length = 1, Maximum length = 32
func (rcv *SeradataCommDetails_Ingest) DataMode() SeradataCommDetails_Ingest_dataMode_Enum {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(72))
	if o != 0 {
		return SeradataCommDetails_Ingest_dataMode_Enum(rcv._tab.GetInt8(o + rcv._tab.Pos))
	}
	return 0
}

/// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
/// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
/// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
/// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
/// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
/// Example: /// Example: TEST
/// Constraints: Minimum length = 1, Maximum length = 32
func (rcv *SeradataCommDetails_Ingest) MutateDataMode(n SeradataCommDetails_Ingest_dataMode_Enum) bool {
	return rcv._tab.MutateInt8Slot(72, int8(n))
}

/// Time the row was created in the database, auto-populated by the system.
/// Example: /// Example: 2018-01-01T16:00:00.123Z
/// Constraints: No constraints specified.
func (rcv *SeradataCommDetails_Ingest) CreatedAt() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(74))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Time the row was created in the database, auto-populated by the system.
/// Example: /// Example: 2018-01-01T16:00:00.123Z
/// Constraints: No constraints specified.
/// Application user who created the row in the database, auto-populated by the system.
/// Example: /// Example: some.user
/// Constraints: Minimum length = 1, Maximum length = 64
func (rcv *SeradataCommDetails_Ingest) CreatedBy() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(76))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Application user who created the row in the database, auto-populated by the system.
/// Example: /// Example: some.user
/// Constraints: Minimum length = 1, Maximum length = 64
func SeradataCommDetails_IngestStart(builder *flatbuffers.Builder) {
	builder.StartObject(37)
}
func SeradataCommDetails_IngestAddId(builder *flatbuffers.Builder, id flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(id), 0)
}
func SeradataCommDetails_IngestAddIdComm(builder *flatbuffers.Builder, idComm flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(idComm), 0)
}
func SeradataCommDetails_IngestAddClassificationMarking(builder *flatbuffers.Builder, classificationMarking flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(classificationMarking), 0)
}
func SeradataCommDetails_IngestAddSpacecraftId(builder *flatbuffers.Builder, spacecraftId flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(3, flatbuffers.UOffsetT(spacecraftId), 0)
}
func SeradataCommDetails_IngestAddBand(builder *flatbuffers.Builder, band flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(4, flatbuffers.UOffsetT(band), 0)
}
func SeradataCommDetails_IngestAddSolidStatePowerAmp(builder *flatbuffers.Builder, solidStatePowerAmp float64) {
	builder.PrependFloat64Slot(5, solidStatePowerAmp, 0.0)
}
func SeradataCommDetails_IngestAddTravelingWaveTubeAmplifier(builder *flatbuffers.Builder, travelingWaveTubeAmplifier float64) {
	builder.PrependFloat64Slot(6, travelingWaveTubeAmplifier, 0.0)
}
func SeradataCommDetails_IngestAddGatewayUplinkFrom(builder *flatbuffers.Builder, gatewayUplinkFrom float64) {
	builder.PrependFloat64Slot(7, gatewayUplinkFrom, 0.0)
}
func SeradataCommDetails_IngestAddGatewayUplinkTo(builder *flatbuffers.Builder, gatewayUplinkTo float64) {
	builder.PrependFloat64Slot(8, gatewayUplinkTo, 0.0)
}
func SeradataCommDetails_IngestAddGatewayDownlinkFrom(builder *flatbuffers.Builder, gatewayDownlinkFrom float64) {
	builder.PrependFloat64Slot(9, gatewayDownlinkFrom, 0.0)
}
func SeradataCommDetails_IngestAddGatewayDownlinkTo(builder *flatbuffers.Builder, gatewayDownlinkTo float64) {
	builder.PrependFloat64Slot(10, gatewayDownlinkTo, 0.0)
}
func SeradataCommDetails_IngestAddPolarization(builder *flatbuffers.Builder, polarization flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(11, flatbuffers.UOffsetT(polarization), 0)
}
func SeradataCommDetails_IngestAddEirp(builder *flatbuffers.Builder, eirp float64) {
	builder.PrependFloat64Slot(12, eirp, 0.0)
}
func SeradataCommDetails_IngestAddBandwidth(builder *flatbuffers.Builder, bandwidth float64) {
	builder.PrependFloat64Slot(13, bandwidth, 0.0)
}
func SeradataCommDetails_IngestAddNumOperationalTransponders(builder *flatbuffers.Builder, numOperationalTransponders int32) {
	builder.PrependInt32Slot(14, numOperationalTransponders, 0)
}
func SeradataCommDetails_IngestAddNumSpareTransponders(builder *flatbuffers.Builder, numSpareTransponders int32) {
	builder.PrependInt32Slot(15, numSpareTransponders, 0)
}
func SeradataCommDetails_IngestAddHostedForCompanyOrgId(builder *flatbuffers.Builder, hostedForCompanyOrgId flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(16, flatbuffers.UOffsetT(hostedForCompanyOrgId), 0)
}
func SeradataCommDetails_IngestAddManufacturerOrgId(builder *flatbuffers.Builder, manufacturerOrgId flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(17, flatbuffers.UOffsetT(manufacturerOrgId), 0)
}
func SeradataCommDetails_IngestAddTradeLeaseOrgId(builder *flatbuffers.Builder, tradeLeaseOrgId flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(18, flatbuffers.UOffsetT(tradeLeaseOrgId), 0)
}
func SeradataCommDetails_IngestAddNum36MhzEquivalentTransponders(builder *flatbuffers.Builder, num36MhzEquivalentTransponders int32) {
	builder.PrependInt32Slot(19, num36MhzEquivalentTransponders, 0)
}
func SeradataCommDetails_IngestAddHtsNumUserSpotBeams(builder *flatbuffers.Builder, htsNumUserSpotBeams int32) {
	builder.PrependInt32Slot(20, htsNumUserSpotBeams, 0)
}
func SeradataCommDetails_IngestAddHtsUserDownlinkBandwidthPerBeam(builder *flatbuffers.Builder, htsUserDownlinkBandwidthPerBeam float64) {
	builder.PrependFloat64Slot(21, htsUserDownlinkBandwidthPerBeam, 0.0)
}
func SeradataCommDetails_IngestAddHtsUserUplinkBandwidthPerBeam(builder *flatbuffers.Builder, htsUserUplinkBandwidthPerBeam float64) {
	builder.PrependFloat64Slot(22, htsUserUplinkBandwidthPerBeam, 0.0)
}
func SeradataCommDetails_IngestAddEstHtsTotalUserDownlinkBandwidthPerBeam(builder *flatbuffers.Builder, estHtsTotalUserDownlinkBandwidthPerBeam float64) {
	builder.PrependFloat64Slot(23, estHtsTotalUserDownlinkBandwidthPerBeam, 0.0)
}
func SeradataCommDetails_IngestAddEstHtsTotalUserUplinkBandwidthPerBeam(builder *flatbuffers.Builder, estHtsTotalUserUplinkBandwidthPerBeam float64) {
	builder.PrependFloat64Slot(24, estHtsTotalUserUplinkBandwidthPerBeam, 0.0)
}
func SeradataCommDetails_IngestAddEstHtsTotalCapacity(builder *flatbuffers.Builder, estHtsTotalCapacity float64) {
	builder.PrependFloat64Slot(25, estHtsTotalCapacity, 0.0)
}
func SeradataCommDetails_IngestAddUserDownlinkFrom(builder *flatbuffers.Builder, userDownlinkFrom float64) {
	builder.PrependFloat64Slot(26, userDownlinkFrom, 0.0)
}
func SeradataCommDetails_IngestAddUserDownlinkTo(builder *flatbuffers.Builder, userDownlinkTo float64) {
	builder.PrependFloat64Slot(27, userDownlinkTo, 0.0)
}
func SeradataCommDetails_IngestAddUserUplinkFrom(builder *flatbuffers.Builder, userUplinkFrom float64) {
	builder.PrependFloat64Slot(28, userUplinkFrom, 0.0)
}
func SeradataCommDetails_IngestAddUserUplinkTo(builder *flatbuffers.Builder, userUplinkTo float64) {
	builder.PrependFloat64Slot(29, userUplinkTo, 0.0)
}
func SeradataCommDetails_IngestAddPayloadNotes(builder *flatbuffers.Builder, payloadNotes flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(30, flatbuffers.UOffsetT(payloadNotes), 0)
}
func SeradataCommDetails_IngestAddSource(builder *flatbuffers.Builder, source flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(31, flatbuffers.UOffsetT(source), 0)
}
func SeradataCommDetails_IngestAddOrigin(builder *flatbuffers.Builder, origin flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(32, flatbuffers.UOffsetT(origin), 0)
}
func SeradataCommDetails_IngestAddOrigNetwork(builder *flatbuffers.Builder, origNetwork flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(33, flatbuffers.UOffsetT(origNetwork), 0)
}
func SeradataCommDetails_IngestAddDataMode(builder *flatbuffers.Builder, dataMode SeradataCommDetails_Ingest_dataMode_Enum) {
	builder.PrependInt8Slot(34, int8(dataMode), 0)
}
func SeradataCommDetails_IngestAddCreatedAt(builder *flatbuffers.Builder, createdAt flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(35, flatbuffers.UOffsetT(createdAt), 0)
}
func SeradataCommDetails_IngestAddCreatedBy(builder *flatbuffers.Builder, createdBy flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(36, flatbuffers.UOffsetT(createdBy), 0)
}
func SeradataCommDetails_IngestEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
