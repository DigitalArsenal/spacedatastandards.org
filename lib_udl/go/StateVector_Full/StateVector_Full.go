// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package StateVector_Full

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

/// /// This service provides operations for querying and manipulation of state vectors for OnOrbit objects. State vectors are cartesian vectors of position (r) and velocity (v) that, together with their time (epoch) (t), uniquely determine the trajectory of the orbiting body in space. J2000 is the preferred coordinate frame for all state vector positions/velocities in UDL, but in some cases data may be in another frame depending on the provider and/or datatype. Please see the 'Discover' tab in the storefront to confirm coordinate frames by data provider.
type StateVector_Full struct {
	_tab flatbuffers.Table
}

const StateVector_FullIdentifier = "STAT"

func GetRootAsStateVector_Full(buf []byte, offset flatbuffers.UOffsetT) *StateVector_Full {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &StateVector_Full{}
	x.Init(buf, n+offset)
	return x
}

func FinishStateVector_FullBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	identifierBytes := []byte(StateVector_FullIdentifier)
	builder.FinishWithFileIdentifier(offset, identifierBytes)
}

func StateVector_FullBufferHasIdentifier(buf []byte) bool {
	return flatbuffers.BufferHasIdentifier(buf, StateVector_FullIdentifier)
}

func GetSizePrefixedRootAsStateVector_Full(buf []byte, offset flatbuffers.UOffsetT) *StateVector_Full {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &StateVector_Full{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedStateVector_FullBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	identifierBytes := []byte(StateVector_FullIdentifier)
	builder.FinishSizePrefixedWithFileIdentifier(offset, identifierBytes)
}

func SizePrefixedStateVector_FullBufferHasIdentifier(buf []byte) bool {
	return flatbuffers.SizePrefixedBufferHasIdentifier(buf, StateVector_FullIdentifier)
}

func (rcv *StateVector_Full) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *StateVector_Full) Table() flatbuffers.Table {
	return rcv._tab
}

/// Unique identifier of the record, auto-generated by the system.
/// Example: /// Example: STATEVECTOR-ID
/// Constraints: Minimum length = 1, Maximum length = 36
func (rcv *StateVector_Full) IdStateVector() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Unique identifier of the record, auto-generated by the system.
/// Example: /// Example: STATEVECTOR-ID
/// Constraints: Minimum length = 1, Maximum length = 36
/// Classification marking of the data in IC/CAPCO Portion-marked format.
/// Example: /// Example: U
/// Constraints: Minimum length = 1, Maximum length = 128
func (rcv *StateVector_Full) ClassificationMarking() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Classification marking of the data in IC/CAPCO Portion-marked format.
/// Example: /// Example: U
/// Constraints: Minimum length = 1, Maximum length = 128
/// Time of validity for state vector in ISO 8601 UTC datetime format, with microsecond precision.
/// Example: /// Example: 2018-01-01T16:00:00.123456Z
/// Constraints: No constraints specified.
func (rcv *StateVector_Full) Epoch() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Time of validity for state vector in ISO 8601 UTC datetime format, with microsecond precision.
/// Example: /// Example: 2018-01-01T16:00:00.123456Z
/// Constraints: No constraints specified.
/// The pedigree of state vector, or methods used for its generation to include state update/orbit determination, propagation from another state, or a state from a calibration satellite (e.g. ORBIT_UPDATE, PROPAGATION, CALIBRATION, CONJUNCTION, FLIGHT_PLAN).
/// Example: /// Example: CONJUNCTION
/// Constraints: Minimum length = 0, Maximum length = 32
func (rcv *StateVector_Full) Pedigree() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The pedigree of state vector, or methods used for its generation to include state update/orbit determination, propagation from another state, or a state from a calibration satellite (e.g. ORBIT_UPDATE, PROPAGATION, CALIBRATION, CONJUNCTION, FLIGHT_PLAN).
/// Example: /// Example: CONJUNCTION
/// Constraints: Minimum length = 0, Maximum length = 32
/// Unique identifier of the satellite on-orbit object, if correlated. For the public catalog, the idOnOrbit is typically the satellite number as a string, but may be a UUID for analyst or other unknown or untracked satellites.
/// Example: /// Example: ONORBIT-ID
/// Constraints: Minimum length = 0, Maximum length = 36
func (rcv *StateVector_Full) IdOnOrbit() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Unique identifier of the satellite on-orbit object, if correlated. For the public catalog, the idOnOrbit is typically the satellite number as a string, but may be a UUID for analyst or other unknown or untracked satellites.
/// Example: /// Example: ONORBIT-ID
/// Constraints: Minimum length = 0, Maximum length = 36
/// Satellite/Catalog number of the target OnOrbit object.
/// Example: /// Example: 12
/// Constraints: No constraints specified.
func (rcv *StateVector_Full) SatNo() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

/// Satellite/Catalog number of the target OnOrbit object.
/// Example: /// Example: 12
/// Constraints: No constraints specified.
func (rcv *StateVector_Full) MutateSatNo(n int32) bool {
	return rcv._tab.MutateInt32Slot(14, n)
}

/// Optional identifier provided by state vector source to indicate the target onorbit object of this state vector. This may be an internal identifier and not necessarily map to a valid satellite number.
/// Example: /// Example: ORIGOBJECT-ID
/// Constraints: Minimum length = 0, Maximum length = 64
func (rcv *StateVector_Full) OrigObjectId() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Optional identifier provided by state vector source to indicate the target onorbit object of this state vector. This may be an internal identifier and not necessarily map to a valid satellite number.
/// Example: /// Example: ORIGOBJECT-ID
/// Constraints: Minimum length = 0, Maximum length = 64
/// Unique identifier of the OD solution record that produced this state vector. This ID can be used to obtain additional information on an OrbitDetermination object using the 'get by ID' operation (e.g. /udl/orbitdetermination/{id}). For example, the OrbitDetermination with idOrbitDetermination = abc would be queries as /udl/orbitdetermination/abc.
/// Example: /// Example: 026dd511-8ba5-47d3-9909-836149f87686
/// Constraints: Minimum length = 0, Maximum length = 36
func (rcv *StateVector_Full) IdOrbitDetermination() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(18))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Unique identifier of the OD solution record that produced this state vector. This ID can be used to obtain additional information on an OrbitDetermination object using the 'get by ID' operation (e.g. /udl/orbitdetermination/{id}). For example, the OrbitDetermination with idOrbitDetermination = abc would be queries as /udl/orbitdetermination/abc.
/// Example: /// Example: 026dd511-8ba5-47d3-9909-836149f87686
/// Constraints: Minimum length = 0, Maximum length = 36
/// Boolean indicating this state vector was unable to be correlated to a known object. This flag should only be set to true by data providers after an attempt to correlate to an OnOrbit object was made and failed. If unable to correlate, the 'origObjectId' field may be populated with an internal data provider specific identifier.
/// Example: /// Example: True
/// Constraints: No constraints specified.
func (rcv *StateVector_Full) Uct() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(20))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

/// Boolean indicating this state vector was unable to be correlated to a known object. This flag should only be set to true by data providers after an attempt to correlate to an OnOrbit object was made and failed. If unable to correlate, the 'origObjectId' field may be populated with an internal data provider specific identifier.
/// Example: /// Example: True
/// Constraints: No constraints specified.
func (rcv *StateVector_Full) MutateUct(n bool) bool {
	return rcv._tab.MutateBoolSlot(20, n)
}

/// Cartesian X position of the target, in kilometers, in the specified referenceFrame. If referenceFrame is null then J2K should be assumed.
/// Example: /// Example: -1118.577381
/// Constraints: No constraints specified.
func (rcv *StateVector_Full) Xpos() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(22))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Cartesian X position of the target, in kilometers, in the specified referenceFrame. If referenceFrame is null then J2K should be assumed.
/// Example: /// Example: -1118.577381
/// Constraints: No constraints specified.
func (rcv *StateVector_Full) MutateXpos(n float64) bool {
	return rcv._tab.MutateFloat64Slot(22, n)
}

/// Cartesian Y position of the target, in kilometers, in the specified referenceFrame. If referenceFrame is null then J2K should be assumed.
/// Example: /// Example: 3026.231084
/// Constraints: No constraints specified.
func (rcv *StateVector_Full) Ypos() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(24))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Cartesian Y position of the target, in kilometers, in the specified referenceFrame. If referenceFrame is null then J2K should be assumed.
/// Example: /// Example: 3026.231084
/// Constraints: No constraints specified.
func (rcv *StateVector_Full) MutateYpos(n float64) bool {
	return rcv._tab.MutateFloat64Slot(24, n)
}

/// Cartesian Z position of the target, in kilometers, in the specified referenceFrame. If referenceFrame is null then J2K should be assumed.
/// Example: /// Example: 6167.831808
/// Constraints: No constraints specified.
func (rcv *StateVector_Full) Zpos() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(26))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Cartesian Z position of the target, in kilometers, in the specified referenceFrame. If referenceFrame is null then J2K should be assumed.
/// Example: /// Example: 6167.831808
/// Constraints: No constraints specified.
func (rcv *StateVector_Full) MutateZpos(n float64) bool {
	return rcv._tab.MutateFloat64Slot(26, n)
}

/// Cartesian X velocity of target, in kilometers/second, in the specified referenceFrame. If referenceFrame is null then J2K should be assumed.
/// Example: /// Example: -4.25242784
/// Constraints: No constraints specified.
func (rcv *StateVector_Full) Xvel() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(28))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Cartesian X velocity of target, in kilometers/second, in the specified referenceFrame. If referenceFrame is null then J2K should be assumed.
/// Example: /// Example: -4.25242784
/// Constraints: No constraints specified.
func (rcv *StateVector_Full) MutateXvel(n float64) bool {
	return rcv._tab.MutateFloat64Slot(28, n)
}

/// Cartesian Y velocity of target, in kilometers/second, in the specified referenceFrame.  If referenceFrame is null then J2K should be assumed.
/// Example: /// Example: 5.291107434
/// Constraints: No constraints specified.
func (rcv *StateVector_Full) Yvel() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(30))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Cartesian Y velocity of target, in kilometers/second, in the specified referenceFrame.  If referenceFrame is null then J2K should be assumed.
/// Example: /// Example: 5.291107434
/// Constraints: No constraints specified.
func (rcv *StateVector_Full) MutateYvel(n float64) bool {
	return rcv._tab.MutateFloat64Slot(30, n)
}

/// Cartesian Z velocity of target, in kilometers/second, in the specified referenceFrame.  If referenceFrame is null then J2K should be assumed.
/// Example: /// Example: -3.356493869
/// Constraints: No constraints specified.
func (rcv *StateVector_Full) Zvel() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(32))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Cartesian Z velocity of target, in kilometers/second, in the specified referenceFrame.  If referenceFrame is null then J2K should be assumed.
/// Example: /// Example: -3.356493869
/// Constraints: No constraints specified.
func (rcv *StateVector_Full) MutateZvel(n float64) bool {
	return rcv._tab.MutateFloat64Slot(32, n)
}

/// The reference frame of the cartesian orbital states. If the referenceFrame is null it is assumed to be J2000.
/// Example: /// Example: J2000
/// Constraints: Minimum length = 0, Maximum length = 24
func (rcv *StateVector_Full) ReferenceFrame() StateVector_Full_referenceFrame_Enum {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(34))
	if o != 0 {
		return StateVector_Full_referenceFrame_Enum(rcv._tab.GetInt8(o + rcv._tab.Pos))
	}
	return 0
}

/// The reference frame of the cartesian orbital states. If the referenceFrame is null it is assumed to be J2000.
/// Example: /// Example: J2000
/// Constraints: Minimum length = 0, Maximum length = 24
func (rcv *StateVector_Full) MutateReferenceFrame(n StateVector_Full_referenceFrame_Enum) bool {
	return rcv._tab.MutateInt8Slot(34, int8(n))
}

/// Covariance matrix, in kilometer and second based units, in the specified covReferenceFrame.  If the covReferenceFrame is null it is assumed to be J2000.
/// The array values (1-21) represent the lower triangular half of the position-velocity covariance matrix. The size of the covariance matrix is dynamic, depending on whether the covariance for position only or position & velocity. The covariance elements are position dependent within the array with values ordered as follows:
/// &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;x&nbsp;&nbsp;&nbsp;&nbsp;y&nbsp;&nbsp;&nbsp;&nbsp;z&nbsp;&nbsp;&nbsp;&nbsp;x'&nbsp;&nbsp;&nbsp;&nbsp;y'&nbsp;&nbsp;&nbsp;&nbsp;z'&nbsp;&nbsp;&nbsp;&nbsp;DRG&nbsp;&nbsp;&nbsp;&nbsp;SRP&nbsp;&nbsp;&nbsp;&nbsp;THR&nbsp;&nbsp;
/// x&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1
/// y&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2&nbsp;&nbsp;&nbsp;&nbsp;3
/// z&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;4&nbsp;&nbsp;&nbsp;&nbsp;5&nbsp;&nbsp;&nbsp;&nbsp;6
/// x'&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;7&nbsp;&nbsp;&nbsp;&nbsp;8&nbsp;&nbsp;&nbsp;&nbsp;9&nbsp;&nbsp;&nbsp;10
/// y'&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;11&nbsp;&nbsp;12&nbsp;&nbsp;13&nbsp;&nbsp;14&nbsp;&nbsp;15
/// z'&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;16&nbsp;&nbsp;17&nbsp;&nbsp;18&nbsp;&nbsp;19&nbsp;&nbsp;20&nbsp;&nbsp;&nbsp;21&nbsp;
/// The cov array should contain only the lower left triangle values from top left down to bottom right, in order.
/// If additional covariance terms are included for DRAG, SRP, and/or THRUST, the matrix can be extended with the following order of elements:
/// &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;x&nbsp;&nbsp;&nbsp;&nbsp;y&nbsp;&nbsp;&nbsp;&nbsp;z&nbsp;&nbsp;&nbsp;&nbsp;x'&nbsp;&nbsp;&nbsp;&nbsp;y'&nbsp;&nbsp;&nbsp;&nbsp;z'&nbsp;&nbsp;&nbsp;&nbsp;DRG&nbsp;&nbsp;&nbsp;&nbsp;SRP&nbsp;&nbsp;&nbsp;&nbsp;THR
/// DRG&nbsp;&nbsp;&nbsp;22&nbsp;&nbsp;23&nbsp;&nbsp;24&nbsp;&nbsp;25&nbsp;&nbsp;26&nbsp;&nbsp;&nbsp;27&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;28&nbsp;&nbsp;
/// SRP&nbsp;&nbsp;&nbsp;29&nbsp;&nbsp;30&nbsp;&nbsp;31&nbsp;&nbsp;32&nbsp;&nbsp;33&nbsp;&nbsp;&nbsp;34&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;35&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;36&nbsp;&nbsp;
/// THR&nbsp;&nbsp;&nbsp;37&nbsp;&nbsp;38&nbsp;&nbsp;39&nbsp;&nbsp;40&nbsp;&nbsp;41&nbsp;&nbsp;&nbsp;42&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;43&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;44&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;45&nbsp;
/// Example: /// Example: [1.1, 2.2]
/// Constraints: No constraints specified.
func (rcv *StateVector_Full) Cov(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(36))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *StateVector_Full) CovLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(36))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

/// Covariance matrix, in kilometer and second based units, in the specified covReferenceFrame.  If the covReferenceFrame is null it is assumed to be J2000.
/// The array values (1-21) represent the lower triangular half of the position-velocity covariance matrix. The size of the covariance matrix is dynamic, depending on whether the covariance for position only or position & velocity. The covariance elements are position dependent within the array with values ordered as follows:
/// &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;x&nbsp;&nbsp;&nbsp;&nbsp;y&nbsp;&nbsp;&nbsp;&nbsp;z&nbsp;&nbsp;&nbsp;&nbsp;x'&nbsp;&nbsp;&nbsp;&nbsp;y'&nbsp;&nbsp;&nbsp;&nbsp;z'&nbsp;&nbsp;&nbsp;&nbsp;DRG&nbsp;&nbsp;&nbsp;&nbsp;SRP&nbsp;&nbsp;&nbsp;&nbsp;THR&nbsp;&nbsp;
/// x&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1
/// y&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2&nbsp;&nbsp;&nbsp;&nbsp;3
/// z&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;4&nbsp;&nbsp;&nbsp;&nbsp;5&nbsp;&nbsp;&nbsp;&nbsp;6
/// x'&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;7&nbsp;&nbsp;&nbsp;&nbsp;8&nbsp;&nbsp;&nbsp;&nbsp;9&nbsp;&nbsp;&nbsp;10
/// y'&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;11&nbsp;&nbsp;12&nbsp;&nbsp;13&nbsp;&nbsp;14&nbsp;&nbsp;15
/// z'&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;16&nbsp;&nbsp;17&nbsp;&nbsp;18&nbsp;&nbsp;19&nbsp;&nbsp;20&nbsp;&nbsp;&nbsp;21&nbsp;
/// The cov array should contain only the lower left triangle values from top left down to bottom right, in order.
/// If additional covariance terms are included for DRAG, SRP, and/or THRUST, the matrix can be extended with the following order of elements:
/// &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;x&nbsp;&nbsp;&nbsp;&nbsp;y&nbsp;&nbsp;&nbsp;&nbsp;z&nbsp;&nbsp;&nbsp;&nbsp;x'&nbsp;&nbsp;&nbsp;&nbsp;y'&nbsp;&nbsp;&nbsp;&nbsp;z'&nbsp;&nbsp;&nbsp;&nbsp;DRG&nbsp;&nbsp;&nbsp;&nbsp;SRP&nbsp;&nbsp;&nbsp;&nbsp;THR
/// DRG&nbsp;&nbsp;&nbsp;22&nbsp;&nbsp;23&nbsp;&nbsp;24&nbsp;&nbsp;25&nbsp;&nbsp;26&nbsp;&nbsp;&nbsp;27&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;28&nbsp;&nbsp;
/// SRP&nbsp;&nbsp;&nbsp;29&nbsp;&nbsp;30&nbsp;&nbsp;31&nbsp;&nbsp;32&nbsp;&nbsp;33&nbsp;&nbsp;&nbsp;34&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;35&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;36&nbsp;&nbsp;
/// THR&nbsp;&nbsp;&nbsp;37&nbsp;&nbsp;38&nbsp;&nbsp;39&nbsp;&nbsp;40&nbsp;&nbsp;41&nbsp;&nbsp;&nbsp;42&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;43&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;44&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;45&nbsp;
/// Example: /// Example: [1.1, 2.2]
/// Constraints: No constraints specified.
/// The reference frame of the covariance matrix elements. If the covReferenceFrame is null it is assumed to be J2000.
/// Example: /// Example: J2000
/// Constraints: Minimum length = 0, Maximum length = 24
func (rcv *StateVector_Full) CovReferenceFrame() StateVector_Full_covReferenceFrame_Enum {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(38))
	if o != 0 {
		return StateVector_Full_covReferenceFrame_Enum(rcv._tab.GetInt8(o + rcv._tab.Pos))
	}
	return 0
}

/// The reference frame of the covariance matrix elements. If the covReferenceFrame is null it is assumed to be J2000.
/// Example: /// Example: J2000
/// Constraints: Minimum length = 0, Maximum length = 24
func (rcv *StateVector_Full) MutateCovReferenceFrame(n StateVector_Full_covReferenceFrame_Enum) bool {
	return rcv._tab.MutateInt8Slot(38, int8(n))
}

/// The method used to generate the covariance during the orbit determination (OD) that produced the state vector, or whether an arbitrary, non-calculated default value was used (CALCULATED, DEFAULT).
/// Example: /// Example: CALCULATED
/// Constraints: Minimum length = 0, Maximum length = 24
func (rcv *StateVector_Full) CovMethod() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(40))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The method used to generate the covariance during the orbit determination (OD) that produced the state vector, or whether an arbitrary, non-calculated default value was used (CALCULATED, DEFAULT).
/// Example: /// Example: CALCULATED
/// Constraints: Minimum length = 0, Maximum length = 24
/// The covariance matrix values represent the lower triangular half of the covariance matrix in terms of equinoctial elements.&nbsp; The size of the covariance matrix is dynamic.&nbsp; The values are outputted in order across each row, i.e.:
/// 1&nbsp;&nbsp; 2&nbsp;&nbsp; 3&nbsp;&nbsp; 4&nbsp;&nbsp; 5
/// 6&nbsp;&nbsp; 7&nbsp;&nbsp; 8&nbsp;&nbsp; 9&nbsp; 10
/// :&nbsp;&nbsp; :&nbsp;&nbsp; :&nbsp;&nbsp; :&nbsp;&nbsp; :
/// :&nbsp;&nbsp; :&nbsp;&nbsp; :&nbsp;&nbsp; :&nbsp;&nbsp; :
/// 51&nbsp; 52&nbsp; 53&nbsp; 54&nbsp; 55
/// :&nbsp;&nbsp; :&nbsp;&nbsp; :&nbsp;&nbsp; :&nbsp;&nbsp; :
/// :&nbsp;&nbsp; :&nbsp;&nbsp; :&nbsp;&nbsp; :&nbsp;&nbsp; :
/// The ordering of values is as follows:
/// &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Af&nbsp;&nbsp; Ag&nbsp;&nbsp; L&nbsp;&nbsp;&nbsp; N&nbsp;&nbsp; Chi&nbsp; Psi&nbsp;&nbsp; B&nbsp;&nbsp; BDOT AGOM&nbsp; T&nbsp;&nbsp; C1&nbsp;&nbsp; C2&nbsp; ...
/// Af&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 1
/// Ag&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 2&nbsp;&nbsp;&nbsp; 3
/// L&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 4&nbsp;&nbsp;&nbsp; 5&nbsp;&nbsp;&nbsp; 6
/// N&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 7&nbsp;&nbsp;&nbsp; 8&nbsp;&nbsp;&nbsp; 9&nbsp;&nbsp; 10
/// Chi&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 11&nbsp;&nbsp; 12&nbsp;&nbsp; 13&nbsp;&nbsp; 14&nbsp;&nbsp; 15
/// Psi&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 16&nbsp;&nbsp; 17&nbsp;&nbsp; 18&nbsp;&nbsp; 19&nbsp;&nbsp; 20&nbsp;&nbsp; 21
/// B&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 22&nbsp;&nbsp; 23&nbsp;&nbsp; 24 &nbsp;&nbsp;25&nbsp;&nbsp; 26&nbsp;&nbsp; 27&nbsp;&nbsp; 28
/// BDOT&nbsp;&nbsp; 29&nbsp;&nbsp; 30&nbsp;&nbsp; 31&nbsp;&nbsp; 32&nbsp;&nbsp; 33&nbsp;&nbsp; 34&nbsp;&nbsp; 35&nbsp;&nbsp; 36
/// AGOM&nbsp; 37&nbsp;&nbsp; 38&nbsp;&nbsp; 39&nbsp;&nbsp; 40&nbsp;&nbsp; 41&nbsp;&nbsp; 42&nbsp;&nbsp; 43&nbsp;&nbsp; 44&nbsp;&nbsp; 45
/// T&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 46&nbsp;&nbsp; 47&nbsp;&nbsp; 48&nbsp;&nbsp; 49&nbsp;&nbsp; 50&nbsp;&nbsp; 51&nbsp;&nbsp; 52&nbsp;&nbsp; 53&nbsp;&nbsp; 54&nbsp;&nbsp; 55
/// C1&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 56&nbsp;&nbsp; 57&nbsp;&nbsp; 58&nbsp;&nbsp; 59&nbsp;&nbsp; 60&nbsp;&nbsp; 61&nbsp;&nbsp; 62&nbsp;&nbsp; 63&nbsp;&nbsp; 64&nbsp;&nbsp; 65&nbsp;&nbsp; 66
/// C2&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 67&nbsp;&nbsp; 68&nbsp;&nbsp; 69&nbsp;&nbsp; 70&nbsp;&nbsp; 71&nbsp; &nbsp;72&nbsp;&nbsp; 73&nbsp;&nbsp; 74&nbsp;&nbsp; 75&nbsp;&nbsp; 76&nbsp;&nbsp; 77&nbsp;&nbsp; 78
/// :
/// :
/// where C1, C2, etc, are the "consider parameters" that may be added to the covariance matrix.&nbsp; The covariance matrix will be as large as the last element/model parameter needed.&nbsp; In other words, if the DC solved for all 6 elements plus AGOM, the covariance matrix will be 9x9 (and the rows for B and BDOT will be all zeros).&nbsp; If the covariance matrix is unavailable, the size will be set to 0x0, and no data will follow.&nbsp; The cov field should contain only the lower left triangle values from top left down to bottom right, in order.
/// Example: /// Example: [1.1, 2.2]
/// Constraints: No constraints specified.
func (rcv *StateVector_Full) EqCov(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(42))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *StateVector_Full) EqCovLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(42))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

/// The covariance matrix values represent the lower triangular half of the covariance matrix in terms of equinoctial elements.&nbsp; The size of the covariance matrix is dynamic.&nbsp; The values are outputted in order across each row, i.e.:
/// 1&nbsp;&nbsp; 2&nbsp;&nbsp; 3&nbsp;&nbsp; 4&nbsp;&nbsp; 5
/// 6&nbsp;&nbsp; 7&nbsp;&nbsp; 8&nbsp;&nbsp; 9&nbsp; 10
/// :&nbsp;&nbsp; :&nbsp;&nbsp; :&nbsp;&nbsp; :&nbsp;&nbsp; :
/// :&nbsp;&nbsp; :&nbsp;&nbsp; :&nbsp;&nbsp; :&nbsp;&nbsp; :
/// 51&nbsp; 52&nbsp; 53&nbsp; 54&nbsp; 55
/// :&nbsp;&nbsp; :&nbsp;&nbsp; :&nbsp;&nbsp; :&nbsp;&nbsp; :
/// :&nbsp;&nbsp; :&nbsp;&nbsp; :&nbsp;&nbsp; :&nbsp;&nbsp; :
/// The ordering of values is as follows:
/// &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Af&nbsp;&nbsp; Ag&nbsp;&nbsp; L&nbsp;&nbsp;&nbsp; N&nbsp;&nbsp; Chi&nbsp; Psi&nbsp;&nbsp; B&nbsp;&nbsp; BDOT AGOM&nbsp; T&nbsp;&nbsp; C1&nbsp;&nbsp; C2&nbsp; ...
/// Af&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 1
/// Ag&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 2&nbsp;&nbsp;&nbsp; 3
/// L&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 4&nbsp;&nbsp;&nbsp; 5&nbsp;&nbsp;&nbsp; 6
/// N&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 7&nbsp;&nbsp;&nbsp; 8&nbsp;&nbsp;&nbsp; 9&nbsp;&nbsp; 10
/// Chi&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 11&nbsp;&nbsp; 12&nbsp;&nbsp; 13&nbsp;&nbsp; 14&nbsp;&nbsp; 15
/// Psi&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 16&nbsp;&nbsp; 17&nbsp;&nbsp; 18&nbsp;&nbsp; 19&nbsp;&nbsp; 20&nbsp;&nbsp; 21
/// B&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 22&nbsp;&nbsp; 23&nbsp;&nbsp; 24 &nbsp;&nbsp;25&nbsp;&nbsp; 26&nbsp;&nbsp; 27&nbsp;&nbsp; 28
/// BDOT&nbsp;&nbsp; 29&nbsp;&nbsp; 30&nbsp;&nbsp; 31&nbsp;&nbsp; 32&nbsp;&nbsp; 33&nbsp;&nbsp; 34&nbsp;&nbsp; 35&nbsp;&nbsp; 36
/// AGOM&nbsp; 37&nbsp;&nbsp; 38&nbsp;&nbsp; 39&nbsp;&nbsp; 40&nbsp;&nbsp; 41&nbsp;&nbsp; 42&nbsp;&nbsp; 43&nbsp;&nbsp; 44&nbsp;&nbsp; 45
/// T&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 46&nbsp;&nbsp; 47&nbsp;&nbsp; 48&nbsp;&nbsp; 49&nbsp;&nbsp; 50&nbsp;&nbsp; 51&nbsp;&nbsp; 52&nbsp;&nbsp; 53&nbsp;&nbsp; 54&nbsp;&nbsp; 55
/// C1&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 56&nbsp;&nbsp; 57&nbsp;&nbsp; 58&nbsp;&nbsp; 59&nbsp;&nbsp; 60&nbsp;&nbsp; 61&nbsp;&nbsp; 62&nbsp;&nbsp; 63&nbsp;&nbsp; 64&nbsp;&nbsp; 65&nbsp;&nbsp; 66
/// C2&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 67&nbsp;&nbsp; 68&nbsp;&nbsp; 69&nbsp;&nbsp; 70&nbsp;&nbsp; 71&nbsp; &nbsp;72&nbsp;&nbsp; 73&nbsp;&nbsp; 74&nbsp;&nbsp; 75&nbsp;&nbsp; 76&nbsp;&nbsp; 77&nbsp;&nbsp; 78
/// :
/// :
/// where C1, C2, etc, are the "consider parameters" that may be added to the covariance matrix.&nbsp; The covariance matrix will be as large as the last element/model parameter needed.&nbsp; In other words, if the DC solved for all 6 elements plus AGOM, the covariance matrix will be 9x9 (and the rows for B and BDOT will be all zeros).&nbsp; If the covariance matrix is unavailable, the size will be set to 0x0, and no data will follow.&nbsp; The cov field should contain only the lower left triangle values from top left down to bottom right, in order.
/// Example: /// Example: [1.1, 2.2]
/// Constraints: No constraints specified.
/// Cartesian X position of the target, in kilometers, in the specified alt1ReferenceFrame. Alternate reference frames are optional and are intended to allow a data source to provide an equivalent vector in a different cartesian frame than the primary vector.
/// Example: /// Example: -1145.688502
/// Constraints: No constraints specified.
func (rcv *StateVector_Full) XposAlt1() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(44))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Cartesian X position of the target, in kilometers, in the specified alt1ReferenceFrame. Alternate reference frames are optional and are intended to allow a data source to provide an equivalent vector in a different cartesian frame than the primary vector.
/// Example: /// Example: -1145.688502
/// Constraints: No constraints specified.
func (rcv *StateVector_Full) MutateXposAlt1(n float64) bool {
	return rcv._tab.MutateFloat64Slot(44, n)
}

/// Cartesian Y position of the target, in kilometers, in the specified alt1ReferenceFrame. Alternate reference frames are optional and are intended to allow a data source to provide an equivalent vector in a different cartesian frame than the primary vector.
/// Example: /// Example: 3020.729572
/// Constraints: No constraints specified.
func (rcv *StateVector_Full) YposAlt1() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(46))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Cartesian Y position of the target, in kilometers, in the specified alt1ReferenceFrame. Alternate reference frames are optional and are intended to allow a data source to provide an equivalent vector in a different cartesian frame than the primary vector.
/// Example: /// Example: 3020.729572
/// Constraints: No constraints specified.
func (rcv *StateVector_Full) MutateYposAlt1(n float64) bool {
	return rcv._tab.MutateFloat64Slot(46, n)
}

/// Cartesian Z position of the target, in kilometers, in the specified alt1ReferenceFrame. Alternate reference frames are optional and are intended to allow a data source to provide an equivalent vector in a different cartesian frame than the primary vector.
/// Example: /// Example: 6165.55187
/// Constraints: No constraints specified.
func (rcv *StateVector_Full) ZposAlt1() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(48))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Cartesian Z position of the target, in kilometers, in the specified alt1ReferenceFrame. Alternate reference frames are optional and are intended to allow a data source to provide an equivalent vector in a different cartesian frame than the primary vector.
/// Example: /// Example: 6165.55187
/// Constraints: No constraints specified.
func (rcv *StateVector_Full) MutateZposAlt1(n float64) bool {
	return rcv._tab.MutateFloat64Slot(48, n)
}

/// Cartesian X velocity of the target, in kilometers/second, in the specified alt1ReferenceFrame. Alternate reference frames are optional and are intended to allow a data source to provide an equivalent vector in a different cartesian frame than the primary vector.
/// Example: /// Example: -4.270832252
/// Constraints: No constraints specified.
func (rcv *StateVector_Full) XvelAlt1() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(50))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Cartesian X velocity of the target, in kilometers/second, in the specified alt1ReferenceFrame. Alternate reference frames are optional and are intended to allow a data source to provide an equivalent vector in a different cartesian frame than the primary vector.
/// Example: /// Example: -4.270832252
/// Constraints: No constraints specified.
func (rcv *StateVector_Full) MutateXvelAlt1(n float64) bool {
	return rcv._tab.MutateFloat64Slot(50, n)
}

/// Cartesian Y velocity of the target, in kilometers/second, in the specified alt1ReferenceFrame. Alternate reference frames are optional and are intended to allow a data source to provide an equivalent vector in a different cartesian frame than the primary vector.
/// Example: /// Example: 5.27074276
/// Constraints: No constraints specified.
func (rcv *StateVector_Full) YvelAlt1() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(52))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Cartesian Y velocity of the target, in kilometers/second, in the specified alt1ReferenceFrame. Alternate reference frames are optional and are intended to allow a data source to provide an equivalent vector in a different cartesian frame than the primary vector.
/// Example: /// Example: 5.27074276
/// Constraints: No constraints specified.
func (rcv *StateVector_Full) MutateYvelAlt1(n float64) bool {
	return rcv._tab.MutateFloat64Slot(52, n)
}

/// Cartesian Z velocity of the target, in kilometers/second, in the specified alt1ReferenceFrame. Alternate reference frames are optional and are intended to allow a data source to provide an equivalent vector in a different cartesian frame than the primary vector.
/// Example: /// Example: -3.365155181
/// Constraints: No constraints specified.
func (rcv *StateVector_Full) ZvelAlt1() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(54))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Cartesian Z velocity of the target, in kilometers/second, in the specified alt1ReferenceFrame. Alternate reference frames are optional and are intended to allow a data source to provide an equivalent vector in a different cartesian frame than the primary vector.
/// Example: /// Example: -3.365155181
/// Constraints: No constraints specified.
func (rcv *StateVector_Full) MutateZvelAlt1(n float64) bool {
	return rcv._tab.MutateFloat64Slot(54, n)
}

/// The reference frame of the alternate1 (Alt1) cartesian orbital state.
/// Example: /// Example: TEME
/// Constraints: Minimum length = 0, Maximum length = 24
func (rcv *StateVector_Full) Alt1ReferenceFrame() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(56))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The reference frame of the alternate1 (Alt1) cartesian orbital state.
/// Example: /// Example: TEME
/// Constraints: Minimum length = 0, Maximum length = 24
/// Cartesian X position of the target, in kilometers, in the specified alt2ReferenceFrame. Alternate reference frames are optional and are intended to allow a data source to provide an equivalent vector in a different cartesian frame than the primary vector.
/// Example: /// Example: -1456.915926
/// Constraints: No constraints specified.
func (rcv *StateVector_Full) XposAlt2() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(58))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Cartesian X position of the target, in kilometers, in the specified alt2ReferenceFrame. Alternate reference frames are optional and are intended to allow a data source to provide an equivalent vector in a different cartesian frame than the primary vector.
/// Example: /// Example: -1456.915926
/// Constraints: No constraints specified.
func (rcv *StateVector_Full) MutateXposAlt2(n float64) bool {
	return rcv._tab.MutateFloat64Slot(58, n)
}

/// Cartesian Y position of the target, in kilometers, in the specified alt2ReferenceFrame. Alternate reference frames are optional and are intended to allow a data source to provide an equivalent vector in a different cartesian frame than the primary vector.
/// Example: /// Example: -2883.540406
/// Constraints: No constraints specified.
func (rcv *StateVector_Full) YposAlt2() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(60))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Cartesian Y position of the target, in kilometers, in the specified alt2ReferenceFrame. Alternate reference frames are optional and are intended to allow a data source to provide an equivalent vector in a different cartesian frame than the primary vector.
/// Example: /// Example: -2883.540406
/// Constraints: No constraints specified.
func (rcv *StateVector_Full) MutateYposAlt2(n float64) bool {
	return rcv._tab.MutateFloat64Slot(60, n)
}

/// Cartesian Z position of the target, in kilometers, in the specified alt2ReferenceFrame. Alternate reference frames are optional and are intended to allow a data source to provide an equivalent vector in a different cartesian frame than the primary vector.
/// Example: /// Example: 6165.55187
/// Constraints: No constraints specified.
func (rcv *StateVector_Full) ZposAlt2() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(62))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Cartesian Z position of the target, in kilometers, in the specified alt2ReferenceFrame. Alternate reference frames are optional and are intended to allow a data source to provide an equivalent vector in a different cartesian frame than the primary vector.
/// Example: /// Example: 6165.55187
/// Constraints: No constraints specified.
func (rcv *StateVector_Full) MutateZposAlt2(n float64) bool {
	return rcv._tab.MutateFloat64Slot(62, n)
}

/// Cartesian X velocity of the target, in kilometers/second, in the specified alt2ReferenceFrame. Alternate reference frames are optional and are intended to allow a data source to provide an equivalent vector in a different cartesian frame than the primary vector.
/// Example: /// Example: -1.219814294
/// Constraints: No constraints specified.
func (rcv *StateVector_Full) XvelAlt2() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(64))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Cartesian X velocity of the target, in kilometers/second, in the specified alt2ReferenceFrame. Alternate reference frames are optional and are intended to allow a data source to provide an equivalent vector in a different cartesian frame than the primary vector.
/// Example: /// Example: -1.219814294
/// Constraints: No constraints specified.
func (rcv *StateVector_Full) MutateXvelAlt2(n float64) bool {
	return rcv._tab.MutateFloat64Slot(64, n)
}

/// Cartesian Y velocity of the target, in kilometers/second, in the specified alt2ReferenceFrame. Alternate reference frames are optional and are intended to allow a data source to provide an equivalent vector in a different cartesian frame than the primary vector.
/// Example: /// Example: -6.602080212
/// Constraints: No constraints specified.
func (rcv *StateVector_Full) YvelAlt2() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(66))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Cartesian Y velocity of the target, in kilometers/second, in the specified alt2ReferenceFrame. Alternate reference frames are optional and are intended to allow a data source to provide an equivalent vector in a different cartesian frame than the primary vector.
/// Example: /// Example: -6.602080212
/// Constraints: No constraints specified.
func (rcv *StateVector_Full) MutateYvelAlt2(n float64) bool {
	return rcv._tab.MutateFloat64Slot(66, n)
}

/// Cartesian Z velocity of the target, in kilometers/second, in the specified alt2ReferenceFrame. Alternate reference frames are optional and are intended to allow a data source to provide an equivalent vector in a different cartesian frame than the primary vector.
/// Example: /// Example: -3.365155181
/// Constraints: No constraints specified.
func (rcv *StateVector_Full) ZvelAlt2() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(68))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Cartesian Z velocity of the target, in kilometers/second, in the specified alt2ReferenceFrame. Alternate reference frames are optional and are intended to allow a data source to provide an equivalent vector in a different cartesian frame than the primary vector.
/// Example: /// Example: -3.365155181
/// Constraints: No constraints specified.
func (rcv *StateVector_Full) MutateZvelAlt2(n float64) bool {
	return rcv._tab.MutateFloat64Slot(68, n)
}

/// The reference frame of the alternate2 (Alt2) cartesian orbital state.
/// Example: /// Example: EFG/TDR
/// Constraints: Minimum length = 0, Maximum length = 24
func (rcv *StateVector_Full) Alt2ReferenceFrame() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(70))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The reference frame of the alternate2 (Alt2) cartesian orbital state.
/// Example: /// Example: EFG/TDR
/// Constraints: Minimum length = 0, Maximum length = 24
/// One sigma position uncertainty, in kilometers.
/// Example: /// Example: 0.333399744452
/// Constraints: No constraints specified.
func (rcv *StateVector_Full) PosUnc() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(72))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// One sigma position uncertainty, in kilometers.
/// Example: /// Example: 0.333399744452
/// Constraints: No constraints specified.
func (rcv *StateVector_Full) MutatePosUnc(n float64) bool {
	return rcv._tab.MutateFloat64Slot(72, n)
}

/// One sigma velocity uncertainty, in kilometers/second.
/// Example: /// Example: 4e-06
/// Constraints: No constraints specified.
func (rcv *StateVector_Full) VelUnc() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(74))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// One sigma velocity uncertainty, in kilometers/second.
/// Example: /// Example: 4e-06
/// Constraints: No constraints specified.
func (rcv *StateVector_Full) MutateVelUnc(n float64) bool {
	return rcv._tab.MutateFloat64Slot(74, n)
}

/// The mass of the object, in kilograms.
/// Example: /// Example: 164.5
/// Constraints: No constraints specified.
func (rcv *StateVector_Full) Mass() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(76))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// The mass of the object, in kilograms.
/// Example: /// Example: 164.5
/// Constraints: No constraints specified.
func (rcv *StateVector_Full) MutateMass(n float64) bool {
	return rcv._tab.MutateFloat64Slot(76, n)
}

/// The actual area of the object at it's largest cross-section, expressed in meters^2.
/// Example: /// Example: 5.065
/// Constraints: No constraints specified.
func (rcv *StateVector_Full) Area() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(78))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// The actual area of the object at it's largest cross-section, expressed in meters^2.
/// Example: /// Example: 5.065
/// Constraints: No constraints specified.
func (rcv *StateVector_Full) MutateArea(n float64) bool {
	return rcv._tab.MutateFloat64Slot(78, n)
}

/// Area-to-mass ratio coefficient for solar radiation pressure.
/// Example: /// Example: 0.0244394
/// Constraints: No constraints specified.
func (rcv *StateVector_Full) SolarRadPressCoeff() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(80))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Area-to-mass ratio coefficient for solar radiation pressure.
/// Example: /// Example: 0.0244394
/// Constraints: No constraints specified.
func (rcv *StateVector_Full) MutateSolarRadPressCoeff(n float64) bool {
	return rcv._tab.MutateFloat64Slot(80, n)
}

/// Area-to-mass ratio coefficient for atmospheric ballistic drag (m2/kg).
/// Example: /// Example: 0.0224391269775
/// Constraints: No constraints specified.
func (rcv *StateVector_Full) DragCoeff() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(82))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Area-to-mass ratio coefficient for atmospheric ballistic drag (m2/kg).
/// Example: /// Example: 0.0224391269775
/// Constraints: No constraints specified.
func (rcv *StateVector_Full) MutateDragCoeff(n float64) bool {
	return rcv._tab.MutateFloat64Slot(82, n)
}

/// The effective area of the object exposed to atmospheric drag, expressed in meters^2.
/// Example: /// Example: 4.739
/// Constraints: No constraints specified.
func (rcv *StateVector_Full) DragArea() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(84))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// The effective area of the object exposed to atmospheric drag, expressed in meters^2.
/// Example: /// Example: 4.739
/// Constraints: No constraints specified.
func (rcv *StateVector_Full) MutateDragArea(n float64) bool {
	return rcv._tab.MutateFloat64Slot(84, n)
}

/// Epoch revolution number.
/// Example: /// Example: 7205
/// Constraints: No constraints specified.
func (rcv *StateVector_Full) RevNo() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(86))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

/// Epoch revolution number.
/// Example: /// Example: 7205
/// Constraints: No constraints specified.
func (rcv *StateVector_Full) MutateRevNo(n int32) bool {
	return rcv._tab.MutateInt32Slot(86, n)
}

/// Geopotential model used for this vector (e.g. EGM-96, WGS-84, WGS-72, JGM-2, or GEM-T3), including mm degree zonals, nn degree/order tesserals. E.g. EGM-96 24Z,24T.
/// Example: /// Example: EGM-96
/// Constraints: Minimum length = 0, Maximum length = 32
func (rcv *StateVector_Full) GeopotentialModel() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(88))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Geopotential model used for this vector (e.g. EGM-96, WGS-84, WGS-72, JGM-2, or GEM-T3), including mm degree zonals, nn degree/order tesserals. E.g. EGM-96 24Z,24T.
/// Example: /// Example: EGM-96
/// Constraints: Minimum length = 0, Maximum length = 32
/// The Drag Model used for this vector (e.g. HARRIS-PRIESTER, JAC70, JBH09, MSIS90, NONE, etc.).
/// Example: /// Example: JAC70
/// Constraints: Minimum length = 0, Maximum length = 32
func (rcv *StateVector_Full) DragModel() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(90))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The Drag Model used for this vector (e.g. HARRIS-PRIESTER, JAC70, JBH09, MSIS90, NONE, etc.).
/// Example: /// Example: JAC70
/// Constraints: Minimum length = 0, Maximum length = 32
/// Boolean indicating use of lunar/solar perturbations for this vector.
/// Example: /// Example: True
/// Constraints: No constraints specified.
func (rcv *StateVector_Full) LunarSolar() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(92))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

/// Boolean indicating use of lunar/solar perturbations for this vector.
/// Example: /// Example: True
/// Constraints: No constraints specified.
func (rcv *StateVector_Full) MutateLunarSolar(n bool) bool {
	return rcv._tab.MutateBoolSlot(92, n)
}

/// Boolean indicating use of solar radiation pressure perturbations for this vector.
/// Example: /// Example: True
/// Constraints: No constraints specified.
func (rcv *StateVector_Full) SolarRadPress() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(94))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

/// Boolean indicating use of solar radiation pressure perturbations for this vector.
/// Example: /// Example: True
/// Constraints: No constraints specified.
func (rcv *StateVector_Full) MutateSolarRadPress(n bool) bool {
	return rcv._tab.MutateBoolSlot(94, n)
}

/// The effective area of the object exposed to solar radiation pressure, expressed in meters^2.
/// Example: /// Example: 4.311
/// Constraints: No constraints specified.
func (rcv *StateVector_Full) SrpArea() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(96))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// The effective area of the object exposed to solar radiation pressure, expressed in meters^2.
/// Example: /// Example: 4.311
/// Constraints: No constraints specified.
func (rcv *StateVector_Full) MutateSrpArea(n float64) bool {
	return rcv._tab.MutateFloat64Slot(96, n)
}

/// Boolean indicating use of solid earth tide perturbations for this vector.
/// Example: /// Example: True
/// Constraints: No constraints specified.
func (rcv *StateVector_Full) SolidEarthTides() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(98))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

/// Boolean indicating use of solid earth tide perturbations for this vector.
/// Example: /// Example: True
/// Constraints: No constraints specified.
func (rcv *StateVector_Full) MutateSolidEarthTides(n bool) bool {
	return rcv._tab.MutateBoolSlot(98, n)
}

/// Boolean indicating use of in-track thrust perturbations for this vector.
/// Example: /// Example: True
/// Constraints: No constraints specified.
func (rcv *StateVector_Full) InTrackThrust() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(100))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

/// Boolean indicating use of in-track thrust perturbations for this vector.
/// Example: /// Example: True
/// Constraints: No constraints specified.
func (rcv *StateVector_Full) MutateInTrackThrust(n bool) bool {
	return rcv._tab.MutateBoolSlot(100, n)
}

/// First derivative of drag/ballistic coefficient (m2/kg-s).
/// Example: /// Example: 1.23
/// Constraints: No constraints specified.
func (rcv *StateVector_Full) BDot() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(102))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// First derivative of drag/ballistic coefficient (m2/kg-s).
/// Example: /// Example: 1.23
/// Constraints: No constraints specified.
func (rcv *StateVector_Full) MutateBDot(n float64) bool {
	return rcv._tab.MutateFloat64Slot(102, n)
}

/// Model parameter value for energy dissipation rate (EDR) (w/kg).
/// Example: /// Example: 1.23
/// Constraints: No constraints specified.
func (rcv *StateVector_Full) Edr() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(104))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Model parameter value for energy dissipation rate (EDR) (w/kg).
/// Example: /// Example: 1.23
/// Constraints: No constraints specified.
func (rcv *StateVector_Full) MutateEdr(n float64) bool {
	return rcv._tab.MutateFloat64Slot(104, n)
}

/// Model parameter value for thrust acceleration (m/s2).
/// Example: /// Example: 1.23
/// Constraints: No constraints specified.
func (rcv *StateVector_Full) ThrustAccel() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(106))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Model parameter value for thrust acceleration (m/s2).
/// Example: /// Example: 1.23
/// Constraints: No constraints specified.
func (rcv *StateVector_Full) MutateThrustAccel(n float64) bool {
	return rcv._tab.MutateFloat64Slot(106, n)
}

/// Model parameter value for center of mass offset (m).
/// Example: /// Example: 1.23
/// Constraints: No constraints specified.
func (rcv *StateVector_Full) CmOffset() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(108))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Model parameter value for center of mass offset (m).
/// Example: /// Example: 1.23
/// Constraints: No constraints specified.
func (rcv *StateVector_Full) MutateCmOffset(n float64) bool {
	return rcv._tab.MutateFloat64Slot(108, n)
}

/// The start of the time interval containing the time of the last accepted observation, in ISO 8601 UTC format with microsecond precision.  For an exact observation time, the firstObTime and lastObTime are the same.
/// Example: /// Example: 2022-11-09T11:20:21.247192Z
/// Constraints: No constraints specified.
func (rcv *StateVector_Full) LastObStart() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(110))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The start of the time interval containing the time of the last accepted observation, in ISO 8601 UTC format with microsecond precision.  For an exact observation time, the firstObTime and lastObTime are the same.
/// Example: /// Example: 2022-11-09T11:20:21.247192Z
/// Constraints: No constraints specified.
/// The end of the time interval containing the time of the last accepted observation, in ISO 8601 UTC format with microsecond precision.  For an exact observation time, the firstObTime and lastObTime are the same.
/// Example: /// Example: 2022-11-09T11:20:21.247192Z
/// Constraints: No constraints specified.
func (rcv *StateVector_Full) LastObEnd() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(112))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The end of the time interval containing the time of the last accepted observation, in ISO 8601 UTC format with microsecond precision.  For an exact observation time, the firstObTime and lastObTime are the same.
/// Example: /// Example: 2022-11-09T11:20:21.247192Z
/// Constraints: No constraints specified.
/// The number of observations available for the OD of the object.
/// Example: /// Example: 376
/// Constraints: No constraints specified.
func (rcv *StateVector_Full) ObsAvailable() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(114))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

/// The number of observations available for the OD of the object.
/// Example: /// Example: 376
/// Constraints: No constraints specified.
func (rcv *StateVector_Full) MutateObsAvailable(n int32) bool {
	return rcv._tab.MutateInt32Slot(114, n)
}

/// The number of observations accepted for the OD of the object.
/// Example: /// Example: 374
/// Constraints: No constraints specified.
func (rcv *StateVector_Full) ObsUsed() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(116))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

/// The number of observations accepted for the OD of the object.
/// Example: /// Example: 374
/// Constraints: No constraints specified.
func (rcv *StateVector_Full) MutateObsUsed(n int32) bool {
	return rcv._tab.MutateInt32Slot(116, n)
}

/// The number of sensor tracks available for the OD of the object.
/// Example: /// Example: 163
/// Constraints: No constraints specified.
func (rcv *StateVector_Full) TracksAvail() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(118))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

/// The number of sensor tracks available for the OD of the object.
/// Example: /// Example: 163
/// Constraints: No constraints specified.
func (rcv *StateVector_Full) MutateTracksAvail(n int32) bool {
	return rcv._tab.MutateInt32Slot(118, n)
}

/// The number of sensor tracks accepted for the OD of the object.
/// Example: /// Example: 163
/// Constraints: No constraints specified.
func (rcv *StateVector_Full) TracksUsed() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(120))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

/// The number of sensor tracks accepted for the OD of the object.
/// Example: /// Example: 163
/// Constraints: No constraints specified.
func (rcv *StateVector_Full) MutateTracksUsed(n int32) bool {
	return rcv._tab.MutateInt32Slot(120, n)
}

/// The recommended OD time span calculated for the object, expressed in days.
/// Example: /// Example: 3.5
/// Constraints: No constraints specified.
func (rcv *StateVector_Full) RecOdspan() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(122))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// The recommended OD time span calculated for the object, expressed in days.
/// Example: /// Example: 3.5
/// Constraints: No constraints specified.
func (rcv *StateVector_Full) MutateRecOdspan(n float64) bool {
	return rcv._tab.MutateFloat64Slot(122, n)
}

/// The actual time span used for the OD of the object, expressed in days.
/// Example: /// Example: 3.5
/// Constraints: No constraints specified.
func (rcv *StateVector_Full) ActualOdspan() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(124))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// The actual time span used for the OD of the object, expressed in days.
/// Example: /// Example: 3.5
/// Constraints: No constraints specified.
func (rcv *StateVector_Full) MutateActualOdspan(n float64) bool {
	return rcv._tab.MutateFloat64Slot(124, n)
}

/// The percentage of residuals accepted in the OD of the object.
/// Example: /// Example: 99.5
/// Constraints: No constraints specified.
func (rcv *StateVector_Full) ResidualsAcc() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(126))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// The percentage of residuals accepted in the OD of the object.
/// Example: /// Example: 99.5
/// Constraints: No constraints specified.
func (rcv *StateVector_Full) MutateResidualsAcc(n float64) bool {
	return rcv._tab.MutateFloat64Slot(126, n)
}

/// F10 (10.7 cm) solar flux value.
/// Example: /// Example: 1.23
/// Constraints: No constraints specified.
func (rcv *StateVector_Full) SolarFluxF10() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(128))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// F10 (10.7 cm) solar flux value.
/// Example: /// Example: 1.23
/// Constraints: No constraints specified.
func (rcv *StateVector_Full) MutateSolarFluxF10(n float64) bool {
	return rcv._tab.MutateFloat64Slot(128, n)
}

/// F10 (10.7 cm) solar flux 81-day average value.
/// Example: /// Example: 1.23
/// Constraints: No constraints specified.
func (rcv *StateVector_Full) SolarFluxF10Avg() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(130))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// F10 (10.7 cm) solar flux 81-day average value.
/// Example: /// Example: 1.23
/// Constraints: No constraints specified.
func (rcv *StateVector_Full) MutateSolarFluxF10Avg(n float64) bool {
	return rcv._tab.MutateFloat64Slot(130, n)
}

/// Average solar flux geomagnetic index.
/// Example: /// Example: 1.23
/// Constraints: No constraints specified.
func (rcv *StateVector_Full) SolarFluxApavg() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(132))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Average solar flux geomagnetic index.
/// Example: /// Example: 1.23
/// Constraints: No constraints specified.
func (rcv *StateVector_Full) MutateSolarFluxApavg(n float64) bool {
	return rcv._tab.MutateFloat64Slot(132, n)
}

/// TAI (Temps Atomique International) minus UTC (Universal Time Coordinates) offset in seconds.
/// Example: /// Example: 1.23
/// Constraints: No constraints specified.
func (rcv *StateVector_Full) TaiUtc() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(134))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// TAI (Temps Atomique International) minus UTC (Universal Time Coordinates) offset in seconds.
/// Example: /// Example: 1.23
/// Constraints: No constraints specified.
func (rcv *StateVector_Full) MutateTaiUtc(n float64) bool {
	return rcv._tab.MutateFloat64Slot(134, n)
}

/// Universal Time-1 (UT1) minus UTC offset, in seconds.
/// Example: /// Example: 1.23
/// Constraints: No constraints specified.
func (rcv *StateVector_Full) Ut1Utc() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(136))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Universal Time-1 (UT1) minus UTC offset, in seconds.
/// Example: /// Example: 1.23
/// Constraints: No constraints specified.
func (rcv *StateVector_Full) MutateUt1Utc(n float64) bool {
	return rcv._tab.MutateFloat64Slot(136, n)
}

/// Rate of change of UT1 (milliseconds/day) - first derivative of ut1Utc.
/// Example: /// Example: 1.23
/// Constraints: No constraints specified.
func (rcv *StateVector_Full) Ut1Rate() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(138))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Rate of change of UT1 (milliseconds/day) - first derivative of ut1Utc.
/// Example: /// Example: 1.23
/// Constraints: No constraints specified.
func (rcv *StateVector_Full) MutateUt1Rate(n float64) bool {
	return rcv._tab.MutateFloat64Slot(138, n)
}

/// Polar Wander Motion X (arc seconds).
/// Example: /// Example: 1.23
/// Constraints: No constraints specified.
func (rcv *StateVector_Full) PolarMotionX() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(140))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Polar Wander Motion X (arc seconds).
/// Example: /// Example: 1.23
/// Constraints: No constraints specified.
func (rcv *StateVector_Full) MutatePolarMotionX(n float64) bool {
	return rcv._tab.MutateFloat64Slot(140, n)
}

/// Polar Wander Motion Y (arc seconds).
/// Example: /// Example: 1.23
/// Constraints: No constraints specified.
func (rcv *StateVector_Full) PolarMotionY() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(142))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Polar Wander Motion Y (arc seconds).
/// Example: /// Example: 1.23
/// Constraints: No constraints specified.
func (rcv *StateVector_Full) MutatePolarMotionY(n float64) bool {
	return rcv._tab.MutateFloat64Slot(142, n)
}

/// Number of terms used in the IAU 1980 nutation model (4, 50, or 106).
/// Example: /// Example: 4
/// Constraints: No constraints specified.
func (rcv *StateVector_Full) Iau1980Terms() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(144))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

/// Number of terms used in the IAU 1980 nutation model (4, 50, or 106).
/// Example: /// Example: 4
/// Constraints: No constraints specified.
func (rcv *StateVector_Full) MutateIau1980Terms(n int32) bool {
	return rcv._tab.MutateInt32Slot(144, n)
}

/// Time of the next leap second after epoch in ISO 8601 UTC time. If the next leap second is not known, the time of the previous leap second is used.
/// Example: /// Example: 2021-01-01T01:01:01.123Z
/// Constraints: No constraints specified.
func (rcv *StateVector_Full) LeapSecondTime() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(146))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Time of the next leap second after epoch in ISO 8601 UTC time. If the next leap second is not known, the time of the previous leap second is used.
/// Example: /// Example: 2021-01-01T01:01:01.123Z
/// Constraints: No constraints specified.
/// Integrator Mode.
/// Example: /// Example: integratorMode
/// Constraints: Minimum length = 0, Maximum length = 32
func (rcv *StateVector_Full) IntegratorMode() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(148))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Integrator Mode.
/// Example: /// Example: integratorMode
/// Constraints: Minimum length = 0, Maximum length = 32
/// Type of partial derivatives used (ANALYTIC, FULL NUM, or FAST NUM).
/// Example: /// Example: ANALYTIC
/// Constraints: Minimum length = 0, Maximum length = 16
func (rcv *StateVector_Full) Partials() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(150))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Type of partial derivatives used (ANALYTIC, FULL NUM, or FAST NUM).
/// Example: /// Example: ANALYTIC
/// Constraints: Minimum length = 0, Maximum length = 16
/// Integrator step mode (AUTO, TIME, or S).
/// Example: /// Example: AUTO
/// Constraints: Minimum length = 0, Maximum length = 16
func (rcv *StateVector_Full) StepMode() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(152))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Integrator step mode (AUTO, TIME, or S).
/// Example: /// Example: AUTO
/// Constraints: Minimum length = 0, Maximum length = 16
/// Boolean indicating use of fixed step size for this vector.
/// Example: /// Example: True
/// Constraints: No constraints specified.
func (rcv *StateVector_Full) FixedStep() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(154))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

/// Boolean indicating use of fixed step size for this vector.
/// Example: /// Example: True
/// Constraints: No constraints specified.
func (rcv *StateVector_Full) MutateFixedStep(n bool) bool {
	return rcv._tab.MutateBoolSlot(154, n)
}

/// Initial step size selection (AUTO or MANUAL).
/// Example: /// Example: AUTO
/// Constraints: Minimum length = 0, Maximum length = 16
func (rcv *StateVector_Full) StepSizeSelection() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(156))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Initial step size selection (AUTO or MANUAL).
/// Example: /// Example: AUTO
/// Constraints: Minimum length = 0, Maximum length = 16
/// Initial integration step size (seconds).
/// Example: /// Example: 1.23
/// Constraints: No constraints specified.
func (rcv *StateVector_Full) StepSize() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(158))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Initial integration step size (seconds).
/// Example: /// Example: 1.23
/// Constraints: No constraints specified.
func (rcv *StateVector_Full) MutateStepSize(n float64) bool {
	return rcv._tab.MutateFloat64Slot(158, n)
}

/// Integrator error control.
/// Example: /// Example: 1.23
/// Constraints: No constraints specified.
func (rcv *StateVector_Full) ErrorControl() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(160))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Integrator error control.
/// Example: /// Example: 1.23
/// Constraints: No constraints specified.
func (rcv *StateVector_Full) MutateErrorControl(n float64) bool {
	return rcv._tab.MutateFloat64Slot(160, n)
}

/// Array containing the standard deviation of error in target object position, U, V and W direction respectively (km).
/// Example: /// Example: [1.23, 4.56]
/// Constraints: No constraints specified.
func (rcv *StateVector_Full) SigmaPosUvw(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(162))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *StateVector_Full) SigmaPosUvwLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(162))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

/// Array containing the standard deviation of error in target object position, U, V and W direction respectively (km).
/// Example: /// Example: [1.23, 4.56]
/// Constraints: No constraints specified.
/// Array containing the standard deviation of error in target object velocity, U, V and W direction respectively (km/sec).
/// Example: /// Example: [1.23, 4.56]
/// Constraints: No constraints specified.
func (rcv *StateVector_Full) SigmaVelUvw(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(164))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *StateVector_Full) SigmaVelUvwLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(164))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

/// Array containing the standard deviation of error in target object velocity, U, V and W direction respectively (km/sec).
/// Example: /// Example: [1.23, 4.56]
/// Constraints: No constraints specified.
/// The Weighted Root Mean Squared (RMS) of the differential correction on the target object that produced this vector.  WRMS is a quality indicator of the state vector update, with a value of 1.00 being optimal.  WRMS applies to Batch Least Squares (BLS) processes.
/// Example: /// Example: 0.991
/// Constraints: No constraints specified.
func (rcv *StateVector_Full) Rms() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(166))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// The Weighted Root Mean Squared (RMS) of the differential correction on the target object that produced this vector.  WRMS is a quality indicator of the state vector update, with a value of 1.00 being optimal.  WRMS applies to Batch Least Squares (BLS) processes.
/// Example: /// Example: 0.991
/// Constraints: No constraints specified.
func (rcv *StateVector_Full) MutateRms(n float64) bool {
	return rcv._tab.MutateFloat64Slot(166, n)
}

/// Start time at which this state vector was the 'current' state vector for its satellite.
/// Example: /// Example: 2018-01-01T16:00:00.123Z
/// Constraints: No constraints specified.
func (rcv *StateVector_Full) EffectiveFrom() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(168))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Start time at which this state vector was the 'current' state vector for its satellite.
/// Example: /// Example: 2018-01-01T16:00:00.123Z
/// Constraints: No constraints specified.
/// End time at which this state vector was no longer the 'current' state vector for its satellite.
/// Example: /// Example: 2018-01-01T16:00:00.123Z
/// Constraints: No constraints specified.
func (rcv *StateVector_Full) EffectiveUntil() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(170))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// End time at which this state vector was no longer the 'current' state vector for its satellite.
/// Example: /// Example: 2018-01-01T16:00:00.123Z
/// Constraints: No constraints specified.
/// Optional URI location in the document repository of the raw file parsed by the system to produce this record. To download the raw file, prepend https://udl-hostname/scs/download?id= to this value.
/// Example: /// Example: rawFileURI
/// Constraints: Minimum length = 0, Maximum length = 256
func (rcv *StateVector_Full) RawFileUri() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(172))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Optional URI location in the document repository of the raw file parsed by the system to produce this record. To download the raw file, prepend https://udl-hostname/scs/download?id= to this value.
/// Example: /// Example: rawFileURI
/// Constraints: Minimum length = 0, Maximum length = 256
/// Source of the data.
/// Example: /// Example: Bluestaq
/// Constraints: Minimum length = 1, Maximum length = 64
func (rcv *StateVector_Full) Source() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(174))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Source of the data.
/// Example: /// Example: Bluestaq
/// Constraints: Minimum length = 1, Maximum length = 64
/// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
/// Example: /// Example: THIRD_PARTY_DATASOURCE
/// Constraints: Minimum length = 0, Maximum length = 64
func (rcv *StateVector_Full) Origin() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(176))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
/// Example: /// Example: THIRD_PARTY_DATASOURCE
/// Constraints: Minimum length = 0, Maximum length = 64
/// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
/// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
/// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
/// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
/// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
/// Example: /// Example: TEST
/// Constraints: Minimum length = 1, Maximum length = 32
func (rcv *StateVector_Full) DataMode() StateVector_Full_dataMode_Enum {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(178))
	if o != 0 {
		return StateVector_Full_dataMode_Enum(rcv._tab.GetInt8(o + rcv._tab.Pos))
	}
	return 0
}

/// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
/// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
/// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
/// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
/// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
/// Example: /// Example: TEST
/// Constraints: Minimum length = 1, Maximum length = 32
func (rcv *StateVector_Full) MutateDataMode(n StateVector_Full_dataMode_Enum) bool {
	return rcv._tab.MutateInt8Slot(178, int8(n))
}

/// Optional array of provider/source specific tags for this data, where each element is no longer than 32 characters, used for implementing data owner conditional access controls to restrict access to the data. Should be left null by data providers unless conditional access controls are coordinated with the UDL team.
/// Example: /// Example: ['TAG1', 'TAG2']
/// Constraints: No constraints specified.
func (rcv *StateVector_Full) Tags(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(180))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *StateVector_Full) TagsLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(180))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

/// Optional array of provider/source specific tags for this data, where each element is no longer than 32 characters, used for implementing data owner conditional access controls to restrict access to the data. Should be left null by data providers unless conditional access controls are coordinated with the UDL team.
/// Example: /// Example: ['TAG1', 'TAG2']
/// Constraints: No constraints specified.
/// Optional algorithm used to produce this record.
/// Example: /// Example: SAMPLE_ALGORITHM
/// Constraints: Minimum length = 0, Maximum length = 64
func (rcv *StateVector_Full) Algorithm() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(182))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Optional algorithm used to produce this record.
/// Example: /// Example: SAMPLE_ALGORITHM
/// Constraints: Minimum length = 0, Maximum length = 64
/// Optional array of UDL data (observation) UUIDs used to build this state vector. See the associated sourcedDataTypes array for the specific types of observations for the positionally corresponding UUIDs in this array (the two arrays must match in size).
/// Example: /// Example: ['DATA1', 'DATA2']
/// Constraints: No constraints specified.
func (rcv *StateVector_Full) SourcedData(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(184))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *StateVector_Full) SourcedDataLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(184))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

/// Optional array of UDL data (observation) UUIDs used to build this state vector. See the associated sourcedDataTypes array for the specific types of observations for the positionally corresponding UUIDs in this array (the two arrays must match in size).
/// Example: /// Example: ['DATA1', 'DATA2']
/// Constraints: No constraints specified.
/// Optional array of UDL observation data types used to build this state vector (e.g. EO, RADAR, RF, DOA). See the associated sourcedData array for the specific UUIDs of observations for the positionally corresponding data types in this array (the two arrays must match in size).
/// Example: /// Example: ['RADAR']
/// Constraints: No constraints specified.
func (rcv *StateVector_Full) SourcedDataTypes() StateVector_Full_sourcedDataTypes_Enum {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(186))
	if o != 0 {
		return StateVector_Full_sourcedDataTypes_Enum(rcv._tab.GetInt8(o + rcv._tab.Pos))
	}
	return 0
}

/// Optional array of UDL observation data types used to build this state vector (e.g. EO, RADAR, RF, DOA). See the associated sourcedData array for the specific UUIDs of observations for the positionally corresponding data types in this array (the two arrays must match in size).
/// Example: /// Example: ['RADAR']
/// Constraints: No constraints specified.
func (rcv *StateVector_Full) MutateSourcedDataTypes(n StateVector_Full_sourcedDataTypes_Enum) bool {
	return rcv._tab.MutateInt8Slot(186, int8(n))
}

/// Time the row was created in the database, auto-populated by the system.
/// Example: /// Example: 2018-01-01T16:00:00.123Z
/// Constraints: No constraints specified.
func (rcv *StateVector_Full) CreatedAt() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(188))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Time the row was created in the database, auto-populated by the system.
/// Example: /// Example: 2018-01-01T16:00:00.123Z
/// Constraints: No constraints specified.
/// Application user who created the row in the database, auto-populated by the system.
/// Example: /// Example: some.user
/// Constraints: Minimum length = 1, Maximum length = 64
func (rcv *StateVector_Full) CreatedBy() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(190))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Application user who created the row in the database, auto-populated by the system.
/// Example: /// Example: some.user
/// Constraints: Minimum length = 1, Maximum length = 64
/// No description provided.
/// Example: /// Example: No example provided.
/// Constraints: No constraints specified.
func (rcv *StateVector_Full) OnOrbit() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(192))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// No description provided.
/// Example: /// Example: No example provided.
/// Constraints: No constraints specified.
/// Optional source-provided and searchable metadata or descriptor of the data.
/// Example: /// Example: descriptor
/// Constraints: Minimum length = 0, Maximum length = 64
func (rcv *StateVector_Full) Descriptor() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(194))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Optional source-provided and searchable metadata or descriptor of the data.
/// Example: /// Example: descriptor
/// Constraints: Minimum length = 0, Maximum length = 64
/// Optional identifier to track a commercial or marketplace transaction executed to produce this data.
/// Example: /// Example: transactionId
/// Constraints: Minimum length = 0, Maximum length = 64
func (rcv *StateVector_Full) TransactionId() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(196))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Optional identifier to track a commercial or marketplace transaction executed to produce this data.
/// Example: /// Example: transactionId
/// Constraints: Minimum length = 0, Maximum length = 64
/// The originating source network on which this record was created, auto-populated by the system.
/// Example: /// Example: ORIG
/// Constraints: Minimum length = 1, Maximum length = 32
func (rcv *StateVector_Full) OrigNetwork() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(198))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The originating source network on which this record was created, auto-populated by the system.
/// Example: /// Example: ORIG
/// Constraints: Minimum length = 1, Maximum length = 32
/// The source data library from which this record was received. This could be a remote or tactical UDL or another data library. If null, the record should be assumed to have originated from the primary Enterprise UDL.
/// Example: /// Example: AXE
/// Constraints: Minimum length = 0, Maximum length = 64
func (rcv *StateVector_Full) SourceDl() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(200))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The source data library from which this record was received. This could be a remote or tactical UDL or another data library. If null, the record should be assumed to have originated from the primary Enterprise UDL.
/// Example: /// Example: AXE
/// Constraints: Minimum length = 0, Maximum length = 64
func StateVector_FullStart(builder *flatbuffers.Builder) {
	builder.StartObject(99)
}
func StateVector_FullAddIdStateVector(builder *flatbuffers.Builder, idStateVector flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(idStateVector), 0)
}
func StateVector_FullAddClassificationMarking(builder *flatbuffers.Builder, classificationMarking flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(classificationMarking), 0)
}
func StateVector_FullAddEpoch(builder *flatbuffers.Builder, epoch flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(epoch), 0)
}
func StateVector_FullAddPedigree(builder *flatbuffers.Builder, pedigree flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(3, flatbuffers.UOffsetT(pedigree), 0)
}
func StateVector_FullAddIdOnOrbit(builder *flatbuffers.Builder, idOnOrbit flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(4, flatbuffers.UOffsetT(idOnOrbit), 0)
}
func StateVector_FullAddSatNo(builder *flatbuffers.Builder, satNo int32) {
	builder.PrependInt32Slot(5, satNo, 0)
}
func StateVector_FullAddOrigObjectId(builder *flatbuffers.Builder, origObjectId flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(6, flatbuffers.UOffsetT(origObjectId), 0)
}
func StateVector_FullAddIdOrbitDetermination(builder *flatbuffers.Builder, idOrbitDetermination flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(7, flatbuffers.UOffsetT(idOrbitDetermination), 0)
}
func StateVector_FullAddUct(builder *flatbuffers.Builder, uct bool) {
	builder.PrependBoolSlot(8, uct, false)
}
func StateVector_FullAddXpos(builder *flatbuffers.Builder, xpos float64) {
	builder.PrependFloat64Slot(9, xpos, 0.0)
}
func StateVector_FullAddYpos(builder *flatbuffers.Builder, ypos float64) {
	builder.PrependFloat64Slot(10, ypos, 0.0)
}
func StateVector_FullAddZpos(builder *flatbuffers.Builder, zpos float64) {
	builder.PrependFloat64Slot(11, zpos, 0.0)
}
func StateVector_FullAddXvel(builder *flatbuffers.Builder, xvel float64) {
	builder.PrependFloat64Slot(12, xvel, 0.0)
}
func StateVector_FullAddYvel(builder *flatbuffers.Builder, yvel float64) {
	builder.PrependFloat64Slot(13, yvel, 0.0)
}
func StateVector_FullAddZvel(builder *flatbuffers.Builder, zvel float64) {
	builder.PrependFloat64Slot(14, zvel, 0.0)
}
func StateVector_FullAddReferenceFrame(builder *flatbuffers.Builder, referenceFrame StateVector_Full_referenceFrame_Enum) {
	builder.PrependInt8Slot(15, int8(referenceFrame), 0)
}
func StateVector_FullAddCov(builder *flatbuffers.Builder, cov flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(16, flatbuffers.UOffsetT(cov), 0)
}
func StateVector_FullStartCovVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func StateVector_FullAddCovReferenceFrame(builder *flatbuffers.Builder, covReferenceFrame StateVector_Full_covReferenceFrame_Enum) {
	builder.PrependInt8Slot(17, int8(covReferenceFrame), 0)
}
func StateVector_FullAddCovMethod(builder *flatbuffers.Builder, covMethod flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(18, flatbuffers.UOffsetT(covMethod), 0)
}
func StateVector_FullAddEqCov(builder *flatbuffers.Builder, eqCov flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(19, flatbuffers.UOffsetT(eqCov), 0)
}
func StateVector_FullStartEqCovVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func StateVector_FullAddXposAlt1(builder *flatbuffers.Builder, xposAlt1 float64) {
	builder.PrependFloat64Slot(20, xposAlt1, 0.0)
}
func StateVector_FullAddYposAlt1(builder *flatbuffers.Builder, yposAlt1 float64) {
	builder.PrependFloat64Slot(21, yposAlt1, 0.0)
}
func StateVector_FullAddZposAlt1(builder *flatbuffers.Builder, zposAlt1 float64) {
	builder.PrependFloat64Slot(22, zposAlt1, 0.0)
}
func StateVector_FullAddXvelAlt1(builder *flatbuffers.Builder, xvelAlt1 float64) {
	builder.PrependFloat64Slot(23, xvelAlt1, 0.0)
}
func StateVector_FullAddYvelAlt1(builder *flatbuffers.Builder, yvelAlt1 float64) {
	builder.PrependFloat64Slot(24, yvelAlt1, 0.0)
}
func StateVector_FullAddZvelAlt1(builder *flatbuffers.Builder, zvelAlt1 float64) {
	builder.PrependFloat64Slot(25, zvelAlt1, 0.0)
}
func StateVector_FullAddAlt1ReferenceFrame(builder *flatbuffers.Builder, alt1ReferenceFrame flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(26, flatbuffers.UOffsetT(alt1ReferenceFrame), 0)
}
func StateVector_FullAddXposAlt2(builder *flatbuffers.Builder, xposAlt2 float64) {
	builder.PrependFloat64Slot(27, xposAlt2, 0.0)
}
func StateVector_FullAddYposAlt2(builder *flatbuffers.Builder, yposAlt2 float64) {
	builder.PrependFloat64Slot(28, yposAlt2, 0.0)
}
func StateVector_FullAddZposAlt2(builder *flatbuffers.Builder, zposAlt2 float64) {
	builder.PrependFloat64Slot(29, zposAlt2, 0.0)
}
func StateVector_FullAddXvelAlt2(builder *flatbuffers.Builder, xvelAlt2 float64) {
	builder.PrependFloat64Slot(30, xvelAlt2, 0.0)
}
func StateVector_FullAddYvelAlt2(builder *flatbuffers.Builder, yvelAlt2 float64) {
	builder.PrependFloat64Slot(31, yvelAlt2, 0.0)
}
func StateVector_FullAddZvelAlt2(builder *flatbuffers.Builder, zvelAlt2 float64) {
	builder.PrependFloat64Slot(32, zvelAlt2, 0.0)
}
func StateVector_FullAddAlt2ReferenceFrame(builder *flatbuffers.Builder, alt2ReferenceFrame flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(33, flatbuffers.UOffsetT(alt2ReferenceFrame), 0)
}
func StateVector_FullAddPosUnc(builder *flatbuffers.Builder, posUnc float64) {
	builder.PrependFloat64Slot(34, posUnc, 0.0)
}
func StateVector_FullAddVelUnc(builder *flatbuffers.Builder, velUnc float64) {
	builder.PrependFloat64Slot(35, velUnc, 0.0)
}
func StateVector_FullAddMass(builder *flatbuffers.Builder, mass float64) {
	builder.PrependFloat64Slot(36, mass, 0.0)
}
func StateVector_FullAddArea(builder *flatbuffers.Builder, area float64) {
	builder.PrependFloat64Slot(37, area, 0.0)
}
func StateVector_FullAddSolarRadPressCoeff(builder *flatbuffers.Builder, solarRadPressCoeff float64) {
	builder.PrependFloat64Slot(38, solarRadPressCoeff, 0.0)
}
func StateVector_FullAddDragCoeff(builder *flatbuffers.Builder, dragCoeff float64) {
	builder.PrependFloat64Slot(39, dragCoeff, 0.0)
}
func StateVector_FullAddDragArea(builder *flatbuffers.Builder, dragArea float64) {
	builder.PrependFloat64Slot(40, dragArea, 0.0)
}
func StateVector_FullAddRevNo(builder *flatbuffers.Builder, revNo int32) {
	builder.PrependInt32Slot(41, revNo, 0)
}
func StateVector_FullAddGeopotentialModel(builder *flatbuffers.Builder, geopotentialModel flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(42, flatbuffers.UOffsetT(geopotentialModel), 0)
}
func StateVector_FullAddDragModel(builder *flatbuffers.Builder, dragModel flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(43, flatbuffers.UOffsetT(dragModel), 0)
}
func StateVector_FullAddLunarSolar(builder *flatbuffers.Builder, lunarSolar bool) {
	builder.PrependBoolSlot(44, lunarSolar, false)
}
func StateVector_FullAddSolarRadPress(builder *flatbuffers.Builder, solarRadPress bool) {
	builder.PrependBoolSlot(45, solarRadPress, false)
}
func StateVector_FullAddSrpArea(builder *flatbuffers.Builder, srpArea float64) {
	builder.PrependFloat64Slot(46, srpArea, 0.0)
}
func StateVector_FullAddSolidEarthTides(builder *flatbuffers.Builder, solidEarthTides bool) {
	builder.PrependBoolSlot(47, solidEarthTides, false)
}
func StateVector_FullAddInTrackThrust(builder *flatbuffers.Builder, inTrackThrust bool) {
	builder.PrependBoolSlot(48, inTrackThrust, false)
}
func StateVector_FullAddBDot(builder *flatbuffers.Builder, bDot float64) {
	builder.PrependFloat64Slot(49, bDot, 0.0)
}
func StateVector_FullAddEdr(builder *flatbuffers.Builder, edr float64) {
	builder.PrependFloat64Slot(50, edr, 0.0)
}
func StateVector_FullAddThrustAccel(builder *flatbuffers.Builder, thrustAccel float64) {
	builder.PrependFloat64Slot(51, thrustAccel, 0.0)
}
func StateVector_FullAddCmOffset(builder *flatbuffers.Builder, cmOffset float64) {
	builder.PrependFloat64Slot(52, cmOffset, 0.0)
}
func StateVector_FullAddLastObStart(builder *flatbuffers.Builder, lastObStart flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(53, flatbuffers.UOffsetT(lastObStart), 0)
}
func StateVector_FullAddLastObEnd(builder *flatbuffers.Builder, lastObEnd flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(54, flatbuffers.UOffsetT(lastObEnd), 0)
}
func StateVector_FullAddObsAvailable(builder *flatbuffers.Builder, obsAvailable int32) {
	builder.PrependInt32Slot(55, obsAvailable, 0)
}
func StateVector_FullAddObsUsed(builder *flatbuffers.Builder, obsUsed int32) {
	builder.PrependInt32Slot(56, obsUsed, 0)
}
func StateVector_FullAddTracksAvail(builder *flatbuffers.Builder, tracksAvail int32) {
	builder.PrependInt32Slot(57, tracksAvail, 0)
}
func StateVector_FullAddTracksUsed(builder *flatbuffers.Builder, tracksUsed int32) {
	builder.PrependInt32Slot(58, tracksUsed, 0)
}
func StateVector_FullAddRecOdspan(builder *flatbuffers.Builder, recOdspan float64) {
	builder.PrependFloat64Slot(59, recOdspan, 0.0)
}
func StateVector_FullAddActualOdspan(builder *flatbuffers.Builder, actualOdspan float64) {
	builder.PrependFloat64Slot(60, actualOdspan, 0.0)
}
func StateVector_FullAddResidualsAcc(builder *flatbuffers.Builder, residualsAcc float64) {
	builder.PrependFloat64Slot(61, residualsAcc, 0.0)
}
func StateVector_FullAddSolarFluxF10(builder *flatbuffers.Builder, solarFluxF10 float64) {
	builder.PrependFloat64Slot(62, solarFluxF10, 0.0)
}
func StateVector_FullAddSolarFluxF10Avg(builder *flatbuffers.Builder, solarFluxF10Avg float64) {
	builder.PrependFloat64Slot(63, solarFluxF10Avg, 0.0)
}
func StateVector_FullAddSolarFluxApavg(builder *flatbuffers.Builder, solarFluxApavg float64) {
	builder.PrependFloat64Slot(64, solarFluxApavg, 0.0)
}
func StateVector_FullAddTaiUtc(builder *flatbuffers.Builder, taiUtc float64) {
	builder.PrependFloat64Slot(65, taiUtc, 0.0)
}
func StateVector_FullAddUt1Utc(builder *flatbuffers.Builder, ut1Utc float64) {
	builder.PrependFloat64Slot(66, ut1Utc, 0.0)
}
func StateVector_FullAddUt1Rate(builder *flatbuffers.Builder, ut1Rate float64) {
	builder.PrependFloat64Slot(67, ut1Rate, 0.0)
}
func StateVector_FullAddPolarMotionX(builder *flatbuffers.Builder, polarMotionX float64) {
	builder.PrependFloat64Slot(68, polarMotionX, 0.0)
}
func StateVector_FullAddPolarMotionY(builder *flatbuffers.Builder, polarMotionY float64) {
	builder.PrependFloat64Slot(69, polarMotionY, 0.0)
}
func StateVector_FullAddIau1980Terms(builder *flatbuffers.Builder, iau1980Terms int32) {
	builder.PrependInt32Slot(70, iau1980Terms, 0)
}
func StateVector_FullAddLeapSecondTime(builder *flatbuffers.Builder, leapSecondTime flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(71, flatbuffers.UOffsetT(leapSecondTime), 0)
}
func StateVector_FullAddIntegratorMode(builder *flatbuffers.Builder, integratorMode flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(72, flatbuffers.UOffsetT(integratorMode), 0)
}
func StateVector_FullAddPartials(builder *flatbuffers.Builder, partials flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(73, flatbuffers.UOffsetT(partials), 0)
}
func StateVector_FullAddStepMode(builder *flatbuffers.Builder, stepMode flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(74, flatbuffers.UOffsetT(stepMode), 0)
}
func StateVector_FullAddFixedStep(builder *flatbuffers.Builder, fixedStep bool) {
	builder.PrependBoolSlot(75, fixedStep, false)
}
func StateVector_FullAddStepSizeSelection(builder *flatbuffers.Builder, stepSizeSelection flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(76, flatbuffers.UOffsetT(stepSizeSelection), 0)
}
func StateVector_FullAddStepSize(builder *flatbuffers.Builder, stepSize float64) {
	builder.PrependFloat64Slot(77, stepSize, 0.0)
}
func StateVector_FullAddErrorControl(builder *flatbuffers.Builder, errorControl float64) {
	builder.PrependFloat64Slot(78, errorControl, 0.0)
}
func StateVector_FullAddSigmaPosUvw(builder *flatbuffers.Builder, sigmaPosUvw flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(79, flatbuffers.UOffsetT(sigmaPosUvw), 0)
}
func StateVector_FullStartSigmaPosUvwVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func StateVector_FullAddSigmaVelUvw(builder *flatbuffers.Builder, sigmaVelUvw flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(80, flatbuffers.UOffsetT(sigmaVelUvw), 0)
}
func StateVector_FullStartSigmaVelUvwVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func StateVector_FullAddRms(builder *flatbuffers.Builder, rms float64) {
	builder.PrependFloat64Slot(81, rms, 0.0)
}
func StateVector_FullAddEffectiveFrom(builder *flatbuffers.Builder, effectiveFrom flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(82, flatbuffers.UOffsetT(effectiveFrom), 0)
}
func StateVector_FullAddEffectiveUntil(builder *flatbuffers.Builder, effectiveUntil flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(83, flatbuffers.UOffsetT(effectiveUntil), 0)
}
func StateVector_FullAddRawFileUri(builder *flatbuffers.Builder, rawFileUri flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(84, flatbuffers.UOffsetT(rawFileUri), 0)
}
func StateVector_FullAddSource(builder *flatbuffers.Builder, source flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(85, flatbuffers.UOffsetT(source), 0)
}
func StateVector_FullAddOrigin(builder *flatbuffers.Builder, origin flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(86, flatbuffers.UOffsetT(origin), 0)
}
func StateVector_FullAddDataMode(builder *flatbuffers.Builder, dataMode StateVector_Full_dataMode_Enum) {
	builder.PrependInt8Slot(87, int8(dataMode), 0)
}
func StateVector_FullAddTags(builder *flatbuffers.Builder, tags flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(88, flatbuffers.UOffsetT(tags), 0)
}
func StateVector_FullStartTagsVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func StateVector_FullAddAlgorithm(builder *flatbuffers.Builder, algorithm flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(89, flatbuffers.UOffsetT(algorithm), 0)
}
func StateVector_FullAddSourcedData(builder *flatbuffers.Builder, sourcedData flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(90, flatbuffers.UOffsetT(sourcedData), 0)
}
func StateVector_FullStartSourcedDataVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func StateVector_FullAddSourcedDataTypes(builder *flatbuffers.Builder, sourcedDataTypes StateVector_Full_sourcedDataTypes_Enum) {
	builder.PrependInt8Slot(91, int8(sourcedDataTypes), 0)
}
func StateVector_FullAddCreatedAt(builder *flatbuffers.Builder, createdAt flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(92, flatbuffers.UOffsetT(createdAt), 0)
}
func StateVector_FullAddCreatedBy(builder *flatbuffers.Builder, createdBy flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(93, flatbuffers.UOffsetT(createdBy), 0)
}
func StateVector_FullAddOnOrbit(builder *flatbuffers.Builder, onOrbit flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(94, flatbuffers.UOffsetT(onOrbit), 0)
}
func StateVector_FullAddDescriptor(builder *flatbuffers.Builder, descriptor flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(95, flatbuffers.UOffsetT(descriptor), 0)
}
func StateVector_FullAddTransactionId(builder *flatbuffers.Builder, transactionId flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(96, flatbuffers.UOffsetT(transactionId), 0)
}
func StateVector_FullAddOrigNetwork(builder *flatbuffers.Builder, origNetwork flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(97, flatbuffers.UOffsetT(origNetwork), 0)
}
func StateVector_FullAddSourceDl(builder *flatbuffers.Builder, sourceDl flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(98, flatbuffers.UOffsetT(sourceDl), 0)
}
func StateVector_FullEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
