// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package EffectResponseActionsList_Abridged

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

/// /// List of actions associated with this effect response.
type EffectResponseActionsList_Abridged struct {
	_tab flatbuffers.Table
}

const EffectResponseActionsList_AbridgedIdentifier = "EFFE"

func GetRootAsEffectResponseActionsList_Abridged(buf []byte, offset flatbuffers.UOffsetT) *EffectResponseActionsList_Abridged {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &EffectResponseActionsList_Abridged{}
	x.Init(buf, n+offset)
	return x
}

func FinishEffectResponseActionsList_AbridgedBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	identifierBytes := []byte(EffectResponseActionsList_AbridgedIdentifier)
	builder.FinishWithFileIdentifier(offset, identifierBytes)
}

func EffectResponseActionsList_AbridgedBufferHasIdentifier(buf []byte) bool {
	return flatbuffers.BufferHasIdentifier(buf, EffectResponseActionsList_AbridgedIdentifier)
}

func GetSizePrefixedRootAsEffectResponseActionsList_Abridged(buf []byte, offset flatbuffers.UOffsetT) *EffectResponseActionsList_Abridged {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &EffectResponseActionsList_Abridged{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedEffectResponseActionsList_AbridgedBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	identifierBytes := []byte(EffectResponseActionsList_AbridgedIdentifier)
	builder.FinishSizePrefixedWithFileIdentifier(offset, identifierBytes)
}

func SizePrefixedEffectResponseActionsList_AbridgedBufferHasIdentifier(buf []byte) bool {
	return flatbuffers.SizePrefixedBufferHasIdentifier(buf, EffectResponseActionsList_AbridgedIdentifier)
}

func (rcv *EffectResponseActionsList_Abridged) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *EffectResponseActionsList_Abridged) Table() flatbuffers.Table {
	return rcv._tab
}

/// A summary string describing different aspects of the action.
/// Example: /// Example: Example summary
/// Constraints: Minimum length = 0, Maximum length = 1024
func (rcv *EffectResponseActionsList_Abridged) Summary() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// A summary string describing different aspects of the action.
/// Example: /// Example: Example summary
/// Constraints: Minimum length = 0, Maximum length = 1024
/// Identifier of this action.
/// Example: /// Example: ACTION-ID
/// Constraints: Minimum length = 0, Maximum length = 64
func (rcv *EffectResponseActionsList_Abridged) ActionId() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Identifier of this action.
/// Example: /// Example: ACTION-ID
/// Constraints: Minimum length = 0, Maximum length = 64
/// The desired start time of this task, in ISO8601 UTC format.
/// Example: /// Example: 2021-01-01T00:00:00.123456Z
/// Constraints: No constraints specified.
func (rcv *EffectResponseActionsList_Abridged) ActionStartTime() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The desired start time of this task, in ISO8601 UTC format.
/// Example: /// Example: 2021-01-01T00:00:00.123456Z
/// Constraints: No constraints specified.
/// The desired end time of this task, in ISO8601 UTC format.
/// Example: /// Example: 2021-01-01T00:00:00.123456Z
/// Constraints: No constraints specified.
func (rcv *EffectResponseActionsList_Abridged) ActionEndTime() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The desired end time of this task, in ISO8601 UTC format.
/// Example: /// Example: 2021-01-01T00:00:00.123456Z
/// Constraints: No constraints specified.
/// The start time of the asset TOT (time over target), in ISO8601 UTC format.
/// Example: /// Example: 2021-01-01T00:00:00.123456Z
/// Constraints: No constraints specified.
func (rcv *EffectResponseActionsList_Abridged) TotStartTime() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The start time of the asset TOT (time over target), in ISO8601 UTC format.
/// Example: /// Example: 2021-01-01T00:00:00.123456Z
/// Constraints: No constraints specified.
/// The end time of the asset TOT (time over target), in ISO8601 UTC format.
/// Example: /// Example: 2021-01-01T00:00:00.123456Z
/// Constraints: No constraints specified.
func (rcv *EffectResponseActionsList_Abridged) TotEndTime() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The end time of the asset TOT (time over target), in ISO8601 UTC format.
/// Example: /// Example: 2021-01-01T00:00:00.123456Z
/// Constraints: No constraints specified.
/// The source type of the asset/actor identifier (AIRCRAFT, LANDCRAFT, SEACRAFT, TRACK).
/// Example: /// Example: AIRCRAFT
/// Constraints: Minimum length = 0, Maximum length = 64
func (rcv *EffectResponseActionsList_Abridged) ActionActorSrcType() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The source type of the asset/actor identifier (AIRCRAFT, LANDCRAFT, SEACRAFT, TRACK).
/// Example: /// Example: AIRCRAFT
/// Constraints: Minimum length = 0, Maximum length = 64
/// The record ID, depending on the type identified in actorSrcType, of the requested asset/actor.
/// Example: /// Example: ACTIONACTORSRC-ID
/// Constraints: Minimum length = 0, Maximum length = 64
func (rcv *EffectResponseActionsList_Abridged) ActionActorSrcId() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(18))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The record ID, depending on the type identified in actorSrcType, of the requested asset/actor.
/// Example: /// Example: ACTIONACTORSRC-ID
/// Constraints: Minimum length = 0, Maximum length = 64
/// The type of munition or sensor used by this asset/actor.
/// Example: /// Example: SENSOR1
/// Constraints: Minimum length = 0, Maximum length = 1024
func (rcv *EffectResponseActionsList_Abridged) Effector() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(20))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The type of munition or sensor used by this asset/actor.
/// Example: /// Example: SENSOR1
/// Constraints: Minimum length = 0, Maximum length = 1024
/// The source type of the targetId identifier (POI, TRACK).
/// Example: /// Example: POI
/// Constraints: Minimum length = 0, Maximum length = 64
func (rcv *EffectResponseActionsList_Abridged) TargetSrcType() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(22))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The source type of the targetId identifier (POI, TRACK).
/// Example: /// Example: POI
/// Constraints: Minimum length = 0, Maximum length = 64
/// The POI or TRACK ID, depending on the type identified in targetSrcType, of the requested target. This identifier corresponds to either poi.poiid or track.trkId from their respective schemas.
/// Example: /// Example: TARGETSRC-ID
/// Constraints: Minimum length = 0, Maximum length = 64
func (rcv *EffectResponseActionsList_Abridged) TargetSrcId() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(24))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The POI or TRACK ID, depending on the type identified in targetSrcType, of the requested target. This identifier corresponds to either poi.poiid or track.trkId from their respective schemas.
/// Example: /// Example: TARGETSRC-ID
/// Constraints: Minimum length = 0, Maximum length = 64
/// The WGS-84 latitude of the asset/actor location at weapon launch, in degrees.  -90 to 90 degrees (negative values south of equator).
/// Example: /// Example: 45.1
/// Constraints: No constraints specified.
func (rcv *EffectResponseActionsList_Abridged) ActorInterceptLat() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(26))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// The WGS-84 latitude of the asset/actor location at weapon launch, in degrees.  -90 to 90 degrees (negative values south of equator).
/// Example: /// Example: 45.1
/// Constraints: No constraints specified.
func (rcv *EffectResponseActionsList_Abridged) MutateActorInterceptLat(n float64) bool {
	return rcv._tab.MutateFloat64Slot(26, n)
}

/// The WGS-84 longitude of the asset/actor location at weapon launch, in degrees.  -180 to 180 degrees (negative values west of Prime Meridian).
/// Example: /// Example: 180.1
/// Constraints: No constraints specified.
func (rcv *EffectResponseActionsList_Abridged) ActorInterceptLon() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(28))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// The WGS-84 longitude of the asset/actor location at weapon launch, in degrees.  -180 to 180 degrees (negative values west of Prime Meridian).
/// Example: /// Example: 180.1
/// Constraints: No constraints specified.
func (rcv *EffectResponseActionsList_Abridged) MutateActorInterceptLon(n float64) bool {
	return rcv._tab.MutateFloat64Slot(28, n)
}

/// The WGS-84 altitude of the asset/actor location at weapon launch, in meters.
/// Example: /// Example: 1.1
/// Constraints: No constraints specified.
func (rcv *EffectResponseActionsList_Abridged) ActorInterceptAlt() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(30))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// The WGS-84 altitude of the asset/actor location at weapon launch, in meters.
/// Example: /// Example: 1.1
/// Constraints: No constraints specified.
func (rcv *EffectResponseActionsList_Abridged) MutateActorInterceptAlt(n float64) bool {
	return rcv._tab.MutateFloat64Slot(30, n)
}

/// The WGS-84 latitude of the weapon destination location, in degrees.  -90 to 90 degrees (negative values south of equator).
/// Example: /// Example: 45.1
/// Constraints: No constraints specified.
func (rcv *EffectResponseActionsList_Abridged) WeaponInterceptLat() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(32))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// The WGS-84 latitude of the weapon destination location, in degrees.  -90 to 90 degrees (negative values south of equator).
/// Example: /// Example: 45.1
/// Constraints: No constraints specified.
func (rcv *EffectResponseActionsList_Abridged) MutateWeaponInterceptLat(n float64) bool {
	return rcv._tab.MutateFloat64Slot(32, n)
}

/// The WGS-84 longitude of the weapon destination location, in degrees.  -180 to 180 degrees (negative values west of Prime Meridian).
/// Example: /// Example: 180.1
/// Constraints: No constraints specified.
func (rcv *EffectResponseActionsList_Abridged) WeaponInterceptLon() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(34))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// The WGS-84 longitude of the weapon destination location, in degrees.  -180 to 180 degrees (negative values west of Prime Meridian).
/// Example: /// Example: 180.1
/// Constraints: No constraints specified.
func (rcv *EffectResponseActionsList_Abridged) MutateWeaponInterceptLon(n float64) bool {
	return rcv._tab.MutateFloat64Slot(34, n)
}

/// The WGS-84 altitude of the weapon destination location, in meters.
/// Example: /// Example: 1.1
/// Constraints: No constraints specified.
func (rcv *EffectResponseActionsList_Abridged) WeaponInterceptAlt() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(36))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// The WGS-84 altitude of the weapon destination location, in meters.
/// Example: /// Example: 1.1
/// Constraints: No constraints specified.
func (rcv *EffectResponseActionsList_Abridged) MutateWeaponInterceptAlt(n float64) bool {
	return rcv._tab.MutateFloat64Slot(36, n)
}

/// List of metrics associated with this action.
/// Example: /// Example: No example provided.
/// Constraints: No constraints specified.
func (rcv *EffectResponseActionsList_Abridged) ActionMetrics(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(38))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *EffectResponseActionsList_Abridged) ActionMetricsLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(38))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

/// List of metrics associated with this action.
/// Example: /// Example: No example provided.
/// Constraints: No constraints specified.
func EffectResponseActionsList_AbridgedStart(builder *flatbuffers.Builder) {
	builder.StartObject(18)
}
func EffectResponseActionsList_AbridgedAddSummary(builder *flatbuffers.Builder, summary flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(summary), 0)
}
func EffectResponseActionsList_AbridgedAddActionId(builder *flatbuffers.Builder, actionId flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(actionId), 0)
}
func EffectResponseActionsList_AbridgedAddActionStartTime(builder *flatbuffers.Builder, actionStartTime flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(actionStartTime), 0)
}
func EffectResponseActionsList_AbridgedAddActionEndTime(builder *flatbuffers.Builder, actionEndTime flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(3, flatbuffers.UOffsetT(actionEndTime), 0)
}
func EffectResponseActionsList_AbridgedAddTotStartTime(builder *flatbuffers.Builder, totStartTime flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(4, flatbuffers.UOffsetT(totStartTime), 0)
}
func EffectResponseActionsList_AbridgedAddTotEndTime(builder *flatbuffers.Builder, totEndTime flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(5, flatbuffers.UOffsetT(totEndTime), 0)
}
func EffectResponseActionsList_AbridgedAddActionActorSrcType(builder *flatbuffers.Builder, actionActorSrcType flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(6, flatbuffers.UOffsetT(actionActorSrcType), 0)
}
func EffectResponseActionsList_AbridgedAddActionActorSrcId(builder *flatbuffers.Builder, actionActorSrcId flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(7, flatbuffers.UOffsetT(actionActorSrcId), 0)
}
func EffectResponseActionsList_AbridgedAddEffector(builder *flatbuffers.Builder, effector flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(8, flatbuffers.UOffsetT(effector), 0)
}
func EffectResponseActionsList_AbridgedAddTargetSrcType(builder *flatbuffers.Builder, targetSrcType flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(9, flatbuffers.UOffsetT(targetSrcType), 0)
}
func EffectResponseActionsList_AbridgedAddTargetSrcId(builder *flatbuffers.Builder, targetSrcId flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(10, flatbuffers.UOffsetT(targetSrcId), 0)
}
func EffectResponseActionsList_AbridgedAddActorInterceptLat(builder *flatbuffers.Builder, actorInterceptLat float64) {
	builder.PrependFloat64Slot(11, actorInterceptLat, 0.0)
}
func EffectResponseActionsList_AbridgedAddActorInterceptLon(builder *flatbuffers.Builder, actorInterceptLon float64) {
	builder.PrependFloat64Slot(12, actorInterceptLon, 0.0)
}
func EffectResponseActionsList_AbridgedAddActorInterceptAlt(builder *flatbuffers.Builder, actorInterceptAlt float64) {
	builder.PrependFloat64Slot(13, actorInterceptAlt, 0.0)
}
func EffectResponseActionsList_AbridgedAddWeaponInterceptLat(builder *flatbuffers.Builder, weaponInterceptLat float64) {
	builder.PrependFloat64Slot(14, weaponInterceptLat, 0.0)
}
func EffectResponseActionsList_AbridgedAddWeaponInterceptLon(builder *flatbuffers.Builder, weaponInterceptLon float64) {
	builder.PrependFloat64Slot(15, weaponInterceptLon, 0.0)
}
func EffectResponseActionsList_AbridgedAddWeaponInterceptAlt(builder *flatbuffers.Builder, weaponInterceptAlt float64) {
	builder.PrependFloat64Slot(16, weaponInterceptAlt, 0.0)
}
func EffectResponseActionsList_AbridgedAddActionMetrics(builder *flatbuffers.Builder, actionMetrics flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(17, flatbuffers.UOffsetT(actionMetrics), 0)
}
func EffectResponseActionsList_AbridgedStartActionMetricsVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func EffectResponseActionsList_AbridgedEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
