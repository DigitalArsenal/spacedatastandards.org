// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package AirfieldSlot_Ingest_acSlotCat_Enum

import "strconv"

type AirfieldSlot_Ingest_acSlotCat_Enum int8

const (
	/// No description available.
	AirfieldSlot_Ingest_acSlotCat_EnumWIDE   AirfieldSlot_Ingest_acSlotCat_Enum = 0
	/// No description available.
	AirfieldSlot_Ingest_acSlotCat_EnumNARROW AirfieldSlot_Ingest_acSlotCat_Enum = 1
	/// No description available.
	AirfieldSlot_Ingest_acSlotCat_EnumHELO   AirfieldSlot_Ingest_acSlotCat_Enum = 2
	/// No description available.
	AirfieldSlot_Ingest_acSlotCat_EnumALL    AirfieldSlot_Ingest_acSlotCat_Enum = 3
	/// No description available.
	AirfieldSlot_Ingest_acSlotCat_EnumOTHER  AirfieldSlot_Ingest_acSlotCat_Enum = 4
)

var EnumNamesAirfieldSlot_Ingest_acSlotCat_Enum = map[AirfieldSlot_Ingest_acSlotCat_Enum]string{
	AirfieldSlot_Ingest_acSlotCat_EnumWIDE:   "WIDE",
	AirfieldSlot_Ingest_acSlotCat_EnumNARROW: "NARROW",
	AirfieldSlot_Ingest_acSlotCat_EnumHELO:   "HELO",
	AirfieldSlot_Ingest_acSlotCat_EnumALL:    "ALL",
	AirfieldSlot_Ingest_acSlotCat_EnumOTHER:  "OTHER",
}

var EnumValuesAirfieldSlot_Ingest_acSlotCat_Enum = map[string]AirfieldSlot_Ingest_acSlotCat_Enum{
	"WIDE":   AirfieldSlot_Ingest_acSlotCat_EnumWIDE,
	"NARROW": AirfieldSlot_Ingest_acSlotCat_EnumNARROW,
	"HELO":   AirfieldSlot_Ingest_acSlotCat_EnumHELO,
	"ALL":    AirfieldSlot_Ingest_acSlotCat_EnumALL,
	"OTHER":  AirfieldSlot_Ingest_acSlotCat_EnumOTHER,
}

func (v AirfieldSlot_Ingest_acSlotCat_Enum) String() string {
	if s, ok := EnumNamesAirfieldSlot_Ingest_acSlotCat_Enum[v]; ok {
		return s
	}
	return "AirfieldSlot_Ingest_acSlotCat_Enum(" + strconv.FormatInt(int64(v), 10) + ")"
}
