// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package PersonnelRecovery_Abridged

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

/// /// Provides information concerning search and rescue operations and other situations involving personnel recovery.
type PersonnelRecovery_Abridged struct {
	_tab flatbuffers.Table
}

const PersonnelRecovery_AbridgedIdentifier = "PERS"

func GetRootAsPersonnelRecovery_Abridged(buf []byte, offset flatbuffers.UOffsetT) *PersonnelRecovery_Abridged {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &PersonnelRecovery_Abridged{}
	x.Init(buf, n+offset)
	return x
}

func FinishPersonnelRecovery_AbridgedBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	identifierBytes := []byte(PersonnelRecovery_AbridgedIdentifier)
	builder.FinishWithFileIdentifier(offset, identifierBytes)
}

func PersonnelRecovery_AbridgedBufferHasIdentifier(buf []byte) bool {
	return flatbuffers.BufferHasIdentifier(buf, PersonnelRecovery_AbridgedIdentifier)
}

func GetSizePrefixedRootAsPersonnelRecovery_Abridged(buf []byte, offset flatbuffers.UOffsetT) *PersonnelRecovery_Abridged {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &PersonnelRecovery_Abridged{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedPersonnelRecovery_AbridgedBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	identifierBytes := []byte(PersonnelRecovery_AbridgedIdentifier)
	builder.FinishSizePrefixedWithFileIdentifier(offset, identifierBytes)
}

func SizePrefixedPersonnelRecovery_AbridgedBufferHasIdentifier(buf []byte) bool {
	return flatbuffers.SizePrefixedBufferHasIdentifier(buf, PersonnelRecovery_AbridgedIdentifier)
}

func (rcv *PersonnelRecovery_Abridged) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *PersonnelRecovery_Abridged) Table() flatbuffers.Table {
	return rcv._tab
}

/// Unique identifier of the record, auto-generated by the system.
/// Example: /// Example: PERSONNEL_RECOVERY-ID
/// Constraints: Minimum length = 1, Maximum length = 36
func (rcv *PersonnelRecovery_Abridged) Id() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Unique identifier of the record, auto-generated by the system.
/// Example: /// Example: PERSONNEL_RECOVERY-ID
/// Constraints: Minimum length = 1, Maximum length = 36
/// Classification marking of the data in IC/CAPCO Portion-marked format.
/// Example: /// Example: U
/// Constraints: Minimum length = 1, Maximum length = 128
func (rcv *PersonnelRecovery_Abridged) ClassificationMarking() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Classification marking of the data in IC/CAPCO Portion-marked format.
/// Example: /// Example: U
/// Constraints: Minimum length = 1, Maximum length = 128
/// Specifies the type of incident resulting in a recovery or evacuation mission.  Intended as, but not constrained to, MIL-STD-6016 J6.1 Emergency Type (e.g. NO STATEMENT, DOWN AIRCRAFT, MAN IN WATER, DITCHING, BAILOUT, DISTRESSED VEHICLE, GROUND INCIDENT, MEDICAL, ISOLATED PERSONS, etc.).
/// Example: /// Example: MEDICAL
/// Constraints: Minimum length = 1, Maximum length = 64
func (rcv *PersonnelRecovery_Abridged) Type() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Specifies the type of incident resulting in a recovery or evacuation mission.  Intended as, but not constrained to, MIL-STD-6016 J6.1 Emergency Type (e.g. NO STATEMENT, DOWN AIRCRAFT, MAN IN WATER, DITCHING, BAILOUT, DISTRESSED VEHICLE, GROUND INCIDENT, MEDICAL, ISOLATED PERSONS, etc.).
/// Example: /// Example: MEDICAL
/// Constraints: Minimum length = 1, Maximum length = 64
/// Time stamp of the original personnel recovery message, in ISO 8601 UTC format.
/// Example: /// Example: 2021-10-15T16:00:00.123Z
/// Constraints: No constraints specified.
func (rcv *PersonnelRecovery_Abridged) MsgTime() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Time stamp of the original personnel recovery message, in ISO 8601 UTC format.
/// Example: /// Example: 2021-10-15T16:00:00.123Z
/// Constraints: No constraints specified.
/// UUID identifying the Personnel Recovery  mission, which should remain the same on subsequent posts related to the same recovery mission.
/// Example: /// Example: RECOV-ID
/// Constraints: Minimum length = 0, Maximum length = 36
func (rcv *PersonnelRecovery_Abridged) RecovId() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// UUID identifying the Personnel Recovery  mission, which should remain the same on subsequent posts related to the same recovery mission.
/// Example: /// Example: RECOV-ID
/// Constraints: Minimum length = 0, Maximum length = 36
/// Unique identifier of a weather report associated with this recovery.
/// Example: /// Example: WEATHER_REPORT-ID
/// Constraints: Minimum length = 0, Maximum length = 36
func (rcv *PersonnelRecovery_Abridged) IdWeatherReport() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Unique identifier of a weather report associated with this recovery.
/// Example: /// Example: WEATHER_REPORT-ID
/// Constraints: Minimum length = 0, Maximum length = 36
/// WGS-84 latitude of the pickup location, in degrees. -90 to 90 degrees (negative values south of equator).
/// Example: /// Example: 75.1234
/// Constraints: No constraints specified.
func (rcv *PersonnelRecovery_Abridged) PickupLat() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// WGS-84 latitude of the pickup location, in degrees. -90 to 90 degrees (negative values south of equator).
/// Example: /// Example: 75.1234
/// Constraints: No constraints specified.
func (rcv *PersonnelRecovery_Abridged) MutatePickupLat(n float64) bool {
	return rcv._tab.MutateFloat64Slot(16, n)
}

/// WGS-84 longitude of the pickup location, in degrees. -180 to 180 degrees (negative values west of Prime Meridian).
/// Example: /// Example: 175.1234
/// Constraints: No constraints specified.
func (rcv *PersonnelRecovery_Abridged) PickupLon() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(18))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// WGS-84 longitude of the pickup location, in degrees. -180 to 180 degrees (negative values west of Prime Meridian).
/// Example: /// Example: 175.1234
/// Constraints: No constraints specified.
func (rcv *PersonnelRecovery_Abridged) MutatePickupLon(n float64) bool {
	return rcv._tab.MutateFloat64Slot(18, n)
}

/// Altitude relative to WGS-84 ellipsoid, in meters. Positive values indicate a point height above ellipsoid, and negative values indicate a point eight below ellipsoid.
/// Example: /// Example: 30.1234
/// Constraints: No constraints specified.
func (rcv *PersonnelRecovery_Abridged) PickupAlt() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(20))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Altitude relative to WGS-84 ellipsoid, in meters. Positive values indicate a point height above ellipsoid, and negative values indicate a point eight below ellipsoid.
/// Example: /// Example: 30.1234
/// Constraints: No constraints specified.
func (rcv *PersonnelRecovery_Abridged) MutatePickupAlt(n float64) bool {
	return rcv._tab.MutateFloat64Slot(20, n)
}

/// Flag indicating the cancellation of this recovery.
/// Example: /// Example: True
/// Constraints: No constraints specified.
func (rcv *PersonnelRecovery_Abridged) TermInd() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(22))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

/// Flag indicating the cancellation of this recovery.
/// Example: /// Example: True
/// Constraints: No constraints specified.
func (rcv *PersonnelRecovery_Abridged) MutateTermInd(n bool) bool {
	return rcv._tab.MutateBoolSlot(22, n)
}

/// The confirmation status of the isolated personnel identity. Intended as, but not constrained to, MIL-STD-6016 J6.1 Authentication Status, Isolated Personnel (NO STATEMENT, AUTHENTICATED, NOT AUTHENTICATED, AUTHENTICATED UNDER DURESS, NOT APPLICABLE):
/// AUTHENTICATED:  Confirmed Friend
/// NOT AUTHENTICATED: Unconfirmed status
/// AUTHENTICATED UNDER DURESS:  Authentication comprised by hostiles.
/// NOT APPLICABLE:  Authentication not required.
/// Example: /// Example: NO STATEMENT
/// Constraints: Minimum length = 0, Maximum length = 36
func (rcv *PersonnelRecovery_Abridged) AuthStatus() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(24))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The confirmation status of the isolated personnel identity. Intended as, but not constrained to, MIL-STD-6016 J6.1 Authentication Status, Isolated Personnel (NO STATEMENT, AUTHENTICATED, NOT AUTHENTICATED, AUTHENTICATED UNDER DURESS, NOT APPLICABLE):
/// AUTHENTICATED:  Confirmed Friend
/// NOT AUTHENTICATED: Unconfirmed status
/// AUTHENTICATED UNDER DURESS:  Authentication comprised by hostiles.
/// NOT APPLICABLE:  Authentication not required.
/// Example: /// Example: NO STATEMENT
/// Constraints: Minimum length = 0, Maximum length = 36
/// The count of persons requiring recovery.
/// Example: /// Example: 1
/// Constraints: No constraints specified.
func (rcv *PersonnelRecovery_Abridged) NumPersons() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(26))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

/// The count of persons requiring recovery.
/// Example: /// Example: 1
/// Constraints: No constraints specified.
func (rcv *PersonnelRecovery_Abridged) MutateNumPersons(n int32) bool {
	return rcv._tab.MutateInt32Slot(26, n)
}

/// The military classification of the personnel to be recovered. Intended as, but not constrained to, MIL-STD-6016 J6.1 Isolated Personnel Classification (NO STATEMENT, MILITARY, GOVERNMENT CIVILIAN, GOVERNMENT CONTRACTOR, CIVILIAN, MULTIPLE CLASSIFICATIONS).
/// Example: /// Example: CIVILIAN
/// Constraints: Minimum length = 0, Maximum length = 36
func (rcv *PersonnelRecovery_Abridged) MilClass() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(28))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The military classification of the personnel to be recovered. Intended as, but not constrained to, MIL-STD-6016 J6.1 Isolated Personnel Classification (NO STATEMENT, MILITARY, GOVERNMENT CIVILIAN, GOVERNMENT CONTRACTOR, CIVILIAN, MULTIPLE CLASSIFICATIONS).
/// Example: /// Example: CIVILIAN
/// Constraints: Minimum length = 0, Maximum length = 36
/// The country of origin or political entity of an isolated person subject to rescue or evacuation. If natAlliance is set to 126, then natAlliance1 must be non 0. If natAlliance is any number other than 126, then natAlliance1 will be set to 0 regardless. Defined in MIL-STD-6016 J6.1 Nationality/Alliance isolated person(s).
/// Example: /// Example: 1
/// Constraints: No constraints specified.
func (rcv *PersonnelRecovery_Abridged) NatAlliance() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(30))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

/// The country of origin or political entity of an isolated person subject to rescue or evacuation. If natAlliance is set to 126, then natAlliance1 must be non 0. If natAlliance is any number other than 126, then natAlliance1 will be set to 0 regardless. Defined in MIL-STD-6016 J6.1 Nationality/Alliance isolated person(s).
/// Example: /// Example: 1
/// Constraints: No constraints specified.
func (rcv *PersonnelRecovery_Abridged) MutateNatAlliance(n int32) bool {
	return rcv._tab.MutateInt32Slot(30, n)
}

/// Extended country of origin or political entity of an isolated person subject to rescue or evacuation. Specify an entry here only if natAlliance is 126. Defined in MIL-STD-6016 J6.1 Nationality/Alliance isolated person(s), 1.
/// Example: /// Example: 0
/// Constraints: No constraints specified.
func (rcv *PersonnelRecovery_Abridged) NatAlliance1() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(32))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

/// Extended country of origin or political entity of an isolated person subject to rescue or evacuation. Specify an entry here only if natAlliance is 126. Defined in MIL-STD-6016 J6.1 Nationality/Alliance isolated person(s), 1.
/// Example: /// Example: 0
/// Constraints: No constraints specified.
func (rcv *PersonnelRecovery_Abridged) MutateNatAlliance1(n int32) bool {
	return rcv._tab.MutateInt32Slot(32, n)
}

/// The survivor service identity (UNKNOWN MILITARY, UNKNOWN CIVILIAN, FRIEND MILITARY, FRIEND CIVIILIAN, NEUTRAL MILITARY, NEUTRAL CIVILIAN, HOSTILE MILITARY, HOSTILE CIVILIAN).
/// Example: /// Example: NEUTRAL CIVILIAN
/// Constraints: Minimum length = 0, Maximum length = 32
func (rcv *PersonnelRecovery_Abridged) Identity() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(34))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The survivor service identity (UNKNOWN MILITARY, UNKNOWN CIVILIAN, FRIEND MILITARY, FRIEND CIVIILIAN, NEUTRAL MILITARY, NEUTRAL CIVILIAN, HOSTILE MILITARY, HOSTILE CIVILIAN).
/// Example: /// Example: NEUTRAL CIVILIAN
/// Constraints: Minimum length = 0, Maximum length = 32
/// Survivor communications equipment.  Intended as, but not constrained to, MIL-STD-6016 J6.1 Communications Equipment, Isolated Personnel (NO STATEMENT, SURVIVAL RADIO, RADIO BEACON, EPLRS, SIGNAL MIRROR, SMOKE FLARE, IR SIGNALLING DEVICE, SIGNALLING PANEL, FRIENDLY FORCE TRACKER, GPS BEACON, LL PHONE, TACTICAL RADIO LOS, TACTICAL RADIO BLOS).
/// Example: /// Example: LL PHONE
/// Constraints: Minimum length = 0, Maximum length = 64
func (rcv *PersonnelRecovery_Abridged) CommEq1() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(36))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Survivor communications equipment.  Intended as, but not constrained to, MIL-STD-6016 J6.1 Communications Equipment, Isolated Personnel (NO STATEMENT, SURVIVAL RADIO, RADIO BEACON, EPLRS, SIGNAL MIRROR, SMOKE FLARE, IR SIGNALLING DEVICE, SIGNALLING PANEL, FRIENDLY FORCE TRACKER, GPS BEACON, LL PHONE, TACTICAL RADIO LOS, TACTICAL RADIO BLOS).
/// Example: /// Example: LL PHONE
/// Constraints: Minimum length = 0, Maximum length = 64
/// Survivor communications equipment.  Intended as, but not constrained to, MIL-STD-6016 J6.1 Communications Equipment, Isolated Personnel (NO STATEMENT, SURVIVAL RADIO, RADIO BEACON, EPLRS, SIGNAL MIRROR, SMOKE FLARE, IR SIGNALLING DEVICE, SIGNALLING PANEL, FRIENDLY FORCE TRACKER, GPS BEACON, LL PHONE, TACTICAL RADIO LOS, TACTICAL RADIO BLOS).
/// Example: /// Example: LL PHONE
/// Constraints: Minimum length = 0, Maximum length = 64
func (rcv *PersonnelRecovery_Abridged) CommEq2() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(38))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Survivor communications equipment.  Intended as, but not constrained to, MIL-STD-6016 J6.1 Communications Equipment, Isolated Personnel (NO STATEMENT, SURVIVAL RADIO, RADIO BEACON, EPLRS, SIGNAL MIRROR, SMOKE FLARE, IR SIGNALLING DEVICE, SIGNALLING PANEL, FRIENDLY FORCE TRACKER, GPS BEACON, LL PHONE, TACTICAL RADIO LOS, TACTICAL RADIO BLOS).
/// Example: /// Example: LL PHONE
/// Constraints: Minimum length = 0, Maximum length = 64
/// Survivor communications equipment.  Intended as, but not constrained to, MIL-STD-6016 J6.1 Communications Equipment, Isolated Personnel (NO STATEMENT, SURVIVAL RADIO, RADIO BEACON, EPLRS, SIGNAL MIRROR, SMOKE FLARE, IR SIGNALLING DEVICE, SIGNALLING PANEL, FRIENDLY FORCE TRACKER, GPS BEACON, LL PHONE, TACTICAL RADIO LOS, TACTICAL RADIO BLOS).
/// Example: /// Example: LL PHONE
/// Constraints: Minimum length = 0, Maximum length = 64
func (rcv *PersonnelRecovery_Abridged) CommEq3() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(40))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Survivor communications equipment.  Intended as, but not constrained to, MIL-STD-6016 J6.1 Communications Equipment, Isolated Personnel (NO STATEMENT, SURVIVAL RADIO, RADIO BEACON, EPLRS, SIGNAL MIRROR, SMOKE FLARE, IR SIGNALLING DEVICE, SIGNALLING PANEL, FRIENDLY FORCE TRACKER, GPS BEACON, LL PHONE, TACTICAL RADIO LOS, TACTICAL RADIO BLOS).
/// Example: /// Example: LL PHONE
/// Constraints: Minimum length = 0, Maximum length = 64
/// Transmit voice frequency in 5Hz increments.
/// Example: /// Example: 5.5
/// Constraints: No constraints specified.
func (rcv *PersonnelRecovery_Abridged) TxFreq() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(42))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Transmit voice frequency in 5Hz increments.
/// Example: /// Example: 5.5
/// Constraints: No constraints specified.
func (rcv *PersonnelRecovery_Abridged) MutateTxFreq(n float64) bool {
	return rcv._tab.MutateFloat64Slot(42, n)
}

/// Receive voice frequency in 5Hz increments. This field will auto populate with the txFreq value if the post element is null.
/// Example: /// Example: 5.5
/// Constraints: No constraints specified.
func (rcv *PersonnelRecovery_Abridged) RxFreq() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(44))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Receive voice frequency in 5Hz increments. This field will auto populate with the txFreq value if the post element is null.
/// Example: /// Example: 5.5
/// Constraints: No constraints specified.
func (rcv *PersonnelRecovery_Abridged) MutateRxFreq(n float64) bool {
	return rcv._tab.MutateFloat64Slot(44, n)
}

/// Number of littered personnel requiring recovery.
/// Example: /// Example: 0
/// Constraints: No constraints specified.
func (rcv *PersonnelRecovery_Abridged) NumNonAmbulatory() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(46))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

/// Number of littered personnel requiring recovery.
/// Example: /// Example: 0
/// Constraints: No constraints specified.
func (rcv *PersonnelRecovery_Abridged) MutateNumNonAmbulatory(n int32) bool {
	return rcv._tab.MutateInt32Slot(46, n)
}

/// Number of ambulatory personnel requiring recovery.
/// Example: /// Example: 1
/// Constraints: No constraints specified.
func (rcv *PersonnelRecovery_Abridged) NumAmbulatory() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(48))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

/// Number of ambulatory personnel requiring recovery.
/// Example: /// Example: 1
/// Constraints: No constraints specified.
func (rcv *PersonnelRecovery_Abridged) MutateNumAmbulatory(n int32) bool {
	return rcv._tab.MutateInt32Slot(48, n)
}

/// Number of injured, but ambulatory, personnel requiring recovery.
/// Example: /// Example: 2
/// Constraints: No constraints specified.
func (rcv *PersonnelRecovery_Abridged) NumAmbulatoryInjured() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(50))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

/// Number of injured, but ambulatory, personnel requiring recovery.
/// Example: /// Example: 2
/// Constraints: No constraints specified.
func (rcv *PersonnelRecovery_Abridged) MutateNumAmbulatoryInjured(n int32) bool {
	return rcv._tab.MutateInt32Slot(50, n)
}

/// Survivor radio equipment. Intended as, but not constrained to, MIL-STD-6016 J6.1 Survivor Radio Type (NO STATEMENT, PRQ7SEL, PRC90, PRC112, PRC112B B1, PRC112C, PRC112D, PRC148 MBITR, PRC148 JEM, PRC149, PRC152, ACRPLB, OTHER).
/// Example: /// Example: NO STATEMENT
/// Constraints: Minimum length = 0, Maximum length = 32
func (rcv *PersonnelRecovery_Abridged) SurvivorRadio() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(52))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Survivor radio equipment. Intended as, but not constrained to, MIL-STD-6016 J6.1 Survivor Radio Type (NO STATEMENT, PRQ7SEL, PRC90, PRC112, PRC112B B1, PRC112C, PRC112D, PRC148 MBITR, PRC148 JEM, PRC149, PRC152, ACRPLB, OTHER).
/// Example: /// Example: NO STATEMENT
/// Constraints: Minimum length = 0, Maximum length = 32
/// Preloaded message conveying the situation confronting the isolated person(s). Intended as, but not constrained to, MIL-STD-6016 J6.1 Survivor Radio Messages (e.g. INJURED CANT MOVE NO KNOWN HOSTILES, INJURED CANT MOVE HOSTILES NEARBY, UNINJURED CANT MOVE HOSTILES NEARBY, UNINJURED NO KNOWN HOSTILES, INJURED LIMITED MOBILITY).
/// Example: /// Example: UNINJURED CANT MOVE HOSTILES NEARBY
/// Constraints: Minimum length = 0, Maximum length = 64
func (rcv *PersonnelRecovery_Abridged) SurvivorMessages() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(54))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Preloaded message conveying the situation confronting the isolated person(s). Intended as, but not constrained to, MIL-STD-6016 J6.1 Survivor Radio Messages (e.g. INJURED CANT MOVE NO KNOWN HOSTILES, INJURED CANT MOVE HOSTILES NEARBY, UNINJURED CANT MOVE HOSTILES NEARBY, UNINJURED NO KNOWN HOSTILES, INJURED LIMITED MOBILITY).
/// Example: /// Example: UNINJURED CANT MOVE HOSTILES NEARBY
/// Constraints: Minimum length = 0, Maximum length = 64
/// Flag indicating whether a radio identifier is reported.
/// Example: /// Example: False
/// Constraints: No constraints specified.
func (rcv *PersonnelRecovery_Abridged) BeaconInd() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(56))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

/// Flag indicating whether a radio identifier is reported.
/// Example: /// Example: False
/// Constraints: No constraints specified.
func (rcv *PersonnelRecovery_Abridged) MutateBeaconInd(n bool) bool {
	return rcv._tab.MutateBoolSlot(56, n)
}

/// The call sign of the personnel to be recovered.
/// Example: /// Example: BADGER
/// Constraints: Minimum length = 0, Maximum length = 128
func (rcv *PersonnelRecovery_Abridged) CallSign() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(58))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The call sign of the personnel to be recovered.
/// Example: /// Example: BADGER
/// Constraints: Minimum length = 0, Maximum length = 128
/// Additional specific messages received from survivor.
/// Example: /// Example: Additional message from survivor.
/// Constraints: Minimum length = 0, Maximum length = 1024
func (rcv *PersonnelRecovery_Abridged) TextMsg() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(60))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Additional specific messages received from survivor.
/// Example: /// Example: Additional message from survivor.
/// Constraints: Minimum length = 0, Maximum length = 1024
/// Mechanism used to verify the survivors identity.
/// Example: /// Example: PASSPORT
/// Constraints: Minimum length = 0, Maximum length = 64
func (rcv *PersonnelRecovery_Abridged) AuthMethod() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(62))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Mechanism used to verify the survivors identity.
/// Example: /// Example: PASSPORT
/// Constraints: Minimum length = 0, Maximum length = 64
/// No description provided.
/// Example: /// Example: No example provided.
/// Constraints: No constraints specified.
func (rcv *PersonnelRecovery_Abridged) ObjectiveAreaInfo() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(64))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// No description provided.
/// Example: /// Example: No example provided.
/// Constraints: No constraints specified.
/// No description provided.
/// Example: /// Example: No example provided.
/// Constraints: No constraints specified.
func (rcv *PersonnelRecovery_Abridged) ExecutionInfo() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(66))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// No description provided.
/// Example: /// Example: No example provided.
/// Constraints: No constraints specified.
/// The originating source network on which this record was created, auto-populated by the system.
/// Example: /// Example: ORIG
/// Constraints: Minimum length = 0, Maximum length = 32
func (rcv *PersonnelRecovery_Abridged) OrigNetwork() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(68))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The originating source network on which this record was created, auto-populated by the system.
/// Example: /// Example: ORIG
/// Constraints: Minimum length = 0, Maximum length = 32
/// Time the row was created in the database, auto-populated by the system.
/// Example: /// Example: 2018-01-01T16:00:00.123Z
/// Constraints: No constraints specified.
func (rcv *PersonnelRecovery_Abridged) CreatedAt() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(70))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Time the row was created in the database, auto-populated by the system.
/// Example: /// Example: 2018-01-01T16:00:00.123Z
/// Constraints: No constraints specified.
/// Application user who created the row in the database, auto-populated by the system.
/// Example: /// Example: some.user
/// Constraints: Minimum length = 0, Maximum length = 64
func (rcv *PersonnelRecovery_Abridged) CreatedBy() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(72))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Application user who created the row in the database, auto-populated by the system.
/// Example: /// Example: some.user
/// Constraints: Minimum length = 0, Maximum length = 64
/// Source of the data.
/// Example: /// Example: Bluestaq
/// Constraints: Minimum length = 1, Maximum length = 64
func (rcv *PersonnelRecovery_Abridged) Source() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(74))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Source of the data.
/// Example: /// Example: Bluestaq
/// Constraints: Minimum length = 1, Maximum length = 64
/// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
/// Example: /// Example: THIRD_PARTY_DATASOURCE
/// Constraints: Minimum length = 0, Maximum length = 64
func (rcv *PersonnelRecovery_Abridged) Origin() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(76))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
/// Example: /// Example: THIRD_PARTY_DATASOURCE
/// Constraints: Minimum length = 0, Maximum length = 64
/// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
/// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
/// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
/// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
/// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
/// Example: /// Example: TEST
/// Constraints: Minimum length = 1, Maximum length = 32
func (rcv *PersonnelRecovery_Abridged) DataMode() PersonnelRecovery_Abridged_dataMode_Enum {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(78))
	if o != 0 {
		return PersonnelRecovery_Abridged_dataMode_Enum(rcv._tab.GetInt8(o + rcv._tab.Pos))
	}
	return 0
}

/// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
/// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
/// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
/// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
/// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
/// Example: /// Example: TEST
/// Constraints: Minimum length = 1, Maximum length = 32
func (rcv *PersonnelRecovery_Abridged) MutateDataMode(n PersonnelRecovery_Abridged_dataMode_Enum) bool {
	return rcv._tab.MutateInt8Slot(78, int8(n))
}

func PersonnelRecovery_AbridgedStart(builder *flatbuffers.Builder) {
	builder.StartObject(38)
}
func PersonnelRecovery_AbridgedAddId(builder *flatbuffers.Builder, id flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(id), 0)
}
func PersonnelRecovery_AbridgedAddClassificationMarking(builder *flatbuffers.Builder, classificationMarking flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(classificationMarking), 0)
}
func PersonnelRecovery_AbridgedAddType(builder *flatbuffers.Builder, type_ flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(type_), 0)
}
func PersonnelRecovery_AbridgedAddMsgTime(builder *flatbuffers.Builder, msgTime flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(3, flatbuffers.UOffsetT(msgTime), 0)
}
func PersonnelRecovery_AbridgedAddRecovId(builder *flatbuffers.Builder, recovId flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(4, flatbuffers.UOffsetT(recovId), 0)
}
func PersonnelRecovery_AbridgedAddIdWeatherReport(builder *flatbuffers.Builder, idWeatherReport flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(5, flatbuffers.UOffsetT(idWeatherReport), 0)
}
func PersonnelRecovery_AbridgedAddPickupLat(builder *flatbuffers.Builder, pickupLat float64) {
	builder.PrependFloat64Slot(6, pickupLat, 0.0)
}
func PersonnelRecovery_AbridgedAddPickupLon(builder *flatbuffers.Builder, pickupLon float64) {
	builder.PrependFloat64Slot(7, pickupLon, 0.0)
}
func PersonnelRecovery_AbridgedAddPickupAlt(builder *flatbuffers.Builder, pickupAlt float64) {
	builder.PrependFloat64Slot(8, pickupAlt, 0.0)
}
func PersonnelRecovery_AbridgedAddTermInd(builder *flatbuffers.Builder, termInd bool) {
	builder.PrependBoolSlot(9, termInd, false)
}
func PersonnelRecovery_AbridgedAddAuthStatus(builder *flatbuffers.Builder, authStatus flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(10, flatbuffers.UOffsetT(authStatus), 0)
}
func PersonnelRecovery_AbridgedAddNumPersons(builder *flatbuffers.Builder, numPersons int32) {
	builder.PrependInt32Slot(11, numPersons, 0)
}
func PersonnelRecovery_AbridgedAddMilClass(builder *flatbuffers.Builder, milClass flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(12, flatbuffers.UOffsetT(milClass), 0)
}
func PersonnelRecovery_AbridgedAddNatAlliance(builder *flatbuffers.Builder, natAlliance int32) {
	builder.PrependInt32Slot(13, natAlliance, 0)
}
func PersonnelRecovery_AbridgedAddNatAlliance1(builder *flatbuffers.Builder, natAlliance1 int32) {
	builder.PrependInt32Slot(14, natAlliance1, 0)
}
func PersonnelRecovery_AbridgedAddIdentity(builder *flatbuffers.Builder, identity flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(15, flatbuffers.UOffsetT(identity), 0)
}
func PersonnelRecovery_AbridgedAddCommEq1(builder *flatbuffers.Builder, commEq1 flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(16, flatbuffers.UOffsetT(commEq1), 0)
}
func PersonnelRecovery_AbridgedAddCommEq2(builder *flatbuffers.Builder, commEq2 flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(17, flatbuffers.UOffsetT(commEq2), 0)
}
func PersonnelRecovery_AbridgedAddCommEq3(builder *flatbuffers.Builder, commEq3 flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(18, flatbuffers.UOffsetT(commEq3), 0)
}
func PersonnelRecovery_AbridgedAddTxFreq(builder *flatbuffers.Builder, txFreq float64) {
	builder.PrependFloat64Slot(19, txFreq, 0.0)
}
func PersonnelRecovery_AbridgedAddRxFreq(builder *flatbuffers.Builder, rxFreq float64) {
	builder.PrependFloat64Slot(20, rxFreq, 0.0)
}
func PersonnelRecovery_AbridgedAddNumNonAmbulatory(builder *flatbuffers.Builder, numNonAmbulatory int32) {
	builder.PrependInt32Slot(21, numNonAmbulatory, 0)
}
func PersonnelRecovery_AbridgedAddNumAmbulatory(builder *flatbuffers.Builder, numAmbulatory int32) {
	builder.PrependInt32Slot(22, numAmbulatory, 0)
}
func PersonnelRecovery_AbridgedAddNumAmbulatoryInjured(builder *flatbuffers.Builder, numAmbulatoryInjured int32) {
	builder.PrependInt32Slot(23, numAmbulatoryInjured, 0)
}
func PersonnelRecovery_AbridgedAddSurvivorRadio(builder *flatbuffers.Builder, survivorRadio flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(24, flatbuffers.UOffsetT(survivorRadio), 0)
}
func PersonnelRecovery_AbridgedAddSurvivorMessages(builder *flatbuffers.Builder, survivorMessages flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(25, flatbuffers.UOffsetT(survivorMessages), 0)
}
func PersonnelRecovery_AbridgedAddBeaconInd(builder *flatbuffers.Builder, beaconInd bool) {
	builder.PrependBoolSlot(26, beaconInd, false)
}
func PersonnelRecovery_AbridgedAddCallSign(builder *flatbuffers.Builder, callSign flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(27, flatbuffers.UOffsetT(callSign), 0)
}
func PersonnelRecovery_AbridgedAddTextMsg(builder *flatbuffers.Builder, textMsg flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(28, flatbuffers.UOffsetT(textMsg), 0)
}
func PersonnelRecovery_AbridgedAddAuthMethod(builder *flatbuffers.Builder, authMethod flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(29, flatbuffers.UOffsetT(authMethod), 0)
}
func PersonnelRecovery_AbridgedAddObjectiveAreaInfo(builder *flatbuffers.Builder, objectiveAreaInfo flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(30, flatbuffers.UOffsetT(objectiveAreaInfo), 0)
}
func PersonnelRecovery_AbridgedAddExecutionInfo(builder *flatbuffers.Builder, executionInfo flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(31, flatbuffers.UOffsetT(executionInfo), 0)
}
func PersonnelRecovery_AbridgedAddOrigNetwork(builder *flatbuffers.Builder, origNetwork flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(32, flatbuffers.UOffsetT(origNetwork), 0)
}
func PersonnelRecovery_AbridgedAddCreatedAt(builder *flatbuffers.Builder, createdAt flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(33, flatbuffers.UOffsetT(createdAt), 0)
}
func PersonnelRecovery_AbridgedAddCreatedBy(builder *flatbuffers.Builder, createdBy flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(34, flatbuffers.UOffsetT(createdBy), 0)
}
func PersonnelRecovery_AbridgedAddSource(builder *flatbuffers.Builder, source flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(35, flatbuffers.UOffsetT(source), 0)
}
func PersonnelRecovery_AbridgedAddOrigin(builder *flatbuffers.Builder, origin flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(36, flatbuffers.UOffsetT(origin), 0)
}
func PersonnelRecovery_AbridgedAddDataMode(builder *flatbuffers.Builder, dataMode PersonnelRecovery_Abridged_dataMode_Enum) {
	builder.PrependInt8Slot(37, int8(dataMode), 0)
}
func PersonnelRecovery_AbridgedEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
