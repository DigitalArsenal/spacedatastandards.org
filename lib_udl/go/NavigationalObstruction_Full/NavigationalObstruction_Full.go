// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package NavigationalObstruction_Full

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

/// /// Beta Version Navigational Obstruction: Information describing navigational obstructions, such as applicable boundaries, locations, heights, data ownership, and currency.
type NavigationalObstruction_Full struct {
	_tab flatbuffers.Table
}

const NavigationalObstruction_FullIdentifier = "NAVI"

func GetRootAsNavigationalObstruction_Full(buf []byte, offset flatbuffers.UOffsetT) *NavigationalObstruction_Full {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &NavigationalObstruction_Full{}
	x.Init(buf, n+offset)
	return x
}

func FinishNavigationalObstruction_FullBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	identifierBytes := []byte(NavigationalObstruction_FullIdentifier)
	builder.FinishWithFileIdentifier(offset, identifierBytes)
}

func NavigationalObstruction_FullBufferHasIdentifier(buf []byte) bool {
	return flatbuffers.BufferHasIdentifier(buf, NavigationalObstruction_FullIdentifier)
}

func GetSizePrefixedRootAsNavigationalObstruction_Full(buf []byte, offset flatbuffers.UOffsetT) *NavigationalObstruction_Full {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &NavigationalObstruction_Full{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedNavigationalObstruction_FullBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	identifierBytes := []byte(NavigationalObstruction_FullIdentifier)
	builder.FinishSizePrefixedWithFileIdentifier(offset, identifierBytes)
}

func SizePrefixedNavigationalObstruction_FullBufferHasIdentifier(buf []byte) bool {
	return flatbuffers.SizePrefixedBufferHasIdentifier(buf, NavigationalObstruction_FullIdentifier)
}

func (rcv *NavigationalObstruction_Full) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *NavigationalObstruction_Full) Table() flatbuffers.Table {
	return rcv._tab
}

/// Unique identifier of the record, auto-generated by the system.
/// Example: /// Example: 026dd511-8ba5-47d3-9909-836149f87686
/// Constraints: Minimum length = 1, Maximum length = 36
func (rcv *NavigationalObstruction_Full) Id() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Unique identifier of the record, auto-generated by the system.
/// Example: /// Example: 026dd511-8ba5-47d3-9909-836149f87686
/// Constraints: Minimum length = 1, Maximum length = 36
/// Classification marking of the data in IC/CAPCO Portion-marked format.
/// Example: /// Example: U
/// Constraints: Minimum length = 1, Maximum length = 128
func (rcv *NavigationalObstruction_Full) ClassificationMarking() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Classification marking of the data in IC/CAPCO Portion-marked format.
/// Example: /// Example: U
/// Constraints: Minimum length = 1, Maximum length = 128
/// Start date of this obstruction data set's currency, in ISO 8601 date-only format.
/// Example: /// Example: 2024-06-13
/// Constraints: No constraints specified.
func (rcv *NavigationalObstruction_Full) CycleDate() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Start date of this obstruction data set's currency, in ISO 8601 date-only format.
/// Example: /// Example: 2024-06-13
/// Constraints: No constraints specified.
/// Type of obstacle (e.g. P for point, V for vector, L for line).
/// Example: /// Example: V
/// Constraints: Minimum length = 1, Maximum length = 1
func (rcv *NavigationalObstruction_Full) ObstacleType() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Type of obstacle (e.g. P for point, V for vector, L for line).
/// Example: /// Example: V
/// Constraints: Minimum length = 1, Maximum length = 1
/// The ID of this obstacle.
/// Example: /// Example: 359655
/// Constraints: Minimum length = 1, Maximum length = 32
func (rcv *NavigationalObstruction_Full) ObstacleId() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The ID of this obstacle.
/// Example: /// Example: 359655
/// Constraints: Minimum length = 1, Maximum length = 32
/// Optional obstacle ID from external systems. This field has no meaning within UDL and is provided as a convenience for systems that require tracking of an internal system generated ID.
/// Example: /// Example: OU812
/// Constraints: Minimum length = 0, Maximum length = 32
func (rcv *NavigationalObstruction_Full) ExternalId() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Optional obstacle ID from external systems. This field has no meaning within UDL and is provided as a convenience for systems that require tracking of an internal system generated ID.
/// Example: /// Example: OU812
/// Constraints: Minimum length = 0, Maximum length = 32
/// The original ID for this obstacle.
/// Example: /// Example: L0000002289
/// Constraints: Minimum length = 0, Maximum length = 36
func (rcv *NavigationalObstruction_Full) OrigId() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The original ID for this obstacle.
/// Example: /// Example: L0000002289
/// Constraints: Minimum length = 0, Maximum length = 36
/// The DoD Standard Country Code designator for the country issuing the diplomatic clearance. This field will be set to "OTHR" if the source value does not match a UDL Country code value (ISO-3166-ALPHA-2).
/// Example: /// Example: US
/// Constraints: Minimum length = 0, Maximum length = 4
func (rcv *NavigationalObstruction_Full) CountryCode() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(18))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The DoD Standard Country Code designator for the country issuing the diplomatic clearance. This field will be set to "OTHR" if the source value does not match a UDL Country code value (ISO-3166-ALPHA-2).
/// Example: /// Example: US
/// Constraints: Minimum length = 0, Maximum length = 4
/// The Federal Information Processing Standards (FIPS) state/province numeric code of this obstacle's location.
/// Example: /// Example: 23
/// Constraints: Minimum length = 0, Maximum length = 4
func (rcv *NavigationalObstruction_Full) ProvinceCode() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(20))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The Federal Information Processing Standards (FIPS) state/province numeric code of this obstacle's location.
/// Example: /// Example: 23
/// Constraints: Minimum length = 0, Maximum length = 4
/// WGS-84 latitude of this point obstacle, in degrees. -90 to 90 degrees (negative values south of equator).
/// Example: /// Example: 46.757211
/// Constraints: No constraints specified.
func (rcv *NavigationalObstruction_Full) PointLat() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(22))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// WGS-84 latitude of this point obstacle, in degrees. -90 to 90 degrees (negative values south of equator).
/// Example: /// Example: 46.757211
/// Constraints: No constraints specified.
func (rcv *NavigationalObstruction_Full) MutatePointLat(n float64) bool {
	return rcv._tab.MutateFloat64Slot(22, n)
}

/// WGS-84 longitude of this point obstacle, in degrees. -180 to 180 degrees (negative values west of Prime Meridian).
/// Example: /// Example: -67.759494
/// Constraints: No constraints specified.
func (rcv *NavigationalObstruction_Full) PointLon() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(24))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// WGS-84 longitude of this point obstacle, in degrees. -180 to 180 degrees (negative values west of Prime Meridian).
/// Example: /// Example: -67.759494
/// Constraints: No constraints specified.
func (rcv *NavigationalObstruction_Full) MutatePointLon(n float64) bool {
	return rcv._tab.MutateFloat64Slot(24, n)
}

/// WGS-84 longitude of the northeastern point of the line, in degrees. -180 to 180 degrees (negative values west of Prime Meridian).
/// Example: /// Example: -122.197891
/// Constraints: No constraints specified.
func (rcv *NavigationalObstruction_Full) LineNelon() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(26))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// WGS-84 longitude of the northeastern point of the line, in degrees. -180 to 180 degrees (negative values west of Prime Meridian).
/// Example: /// Example: -122.197891
/// Constraints: No constraints specified.
func (rcv *NavigationalObstruction_Full) MutateLineNelon(n float64) bool {
	return rcv._tab.MutateFloat64Slot(26, n)
}

/// WGS-84 latitude of the northeastern point of the line, in degrees. -90 to 90 degrees (negative values south of equator).
/// Example: /// Example: 49.000584
/// Constraints: No constraints specified.
func (rcv *NavigationalObstruction_Full) LineNelat() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(28))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// WGS-84 latitude of the northeastern point of the line, in degrees. -90 to 90 degrees (negative values south of equator).
/// Example: /// Example: 49.000584
/// Constraints: No constraints specified.
func (rcv *NavigationalObstruction_Full) MutateLineNelat(n float64) bool {
	return rcv._tab.MutateFloat64Slot(28, n)
}

/// WGS-84 longitude of the southwestern point of the line, in degrees. -180 to 180 degrees (negative values west of Prime Meridian).
/// Example: /// Example: -122.722946
/// Constraints: No constraints specified.
func (rcv *NavigationalObstruction_Full) LineSwlon() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(30))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// WGS-84 longitude of the southwestern point of the line, in degrees. -180 to 180 degrees (negative values west of Prime Meridian).
/// Example: /// Example: -122.722946
/// Constraints: No constraints specified.
func (rcv *NavigationalObstruction_Full) MutateLineSwlon(n float64) bool {
	return rcv._tab.MutateFloat64Slot(30, n)
}

/// WGS-84 latitude of the southwestern point of the line, in degrees. -90 to 90 degrees (negative values south of equator).
/// Example: /// Example: 48.507027
/// Constraints: No constraints specified.
func (rcv *NavigationalObstruction_Full) LineSwlat() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(32))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// WGS-84 latitude of the southwestern point of the line, in degrees. -90 to 90 degrees (negative values south of equator).
/// Example: /// Example: 48.507027
/// Constraints: No constraints specified.
func (rcv *NavigationalObstruction_Full) MutateLineSwlat(n float64) bool {
	return rcv._tab.MutateFloat64Slot(32, n)
}

/// ID of the starting point of a line segment.
/// Example: /// Example: 359655
/// Constraints: No constraints specified.
func (rcv *NavigationalObstruction_Full) SegStartPoint() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(34))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

/// ID of the starting point of a line segment.
/// Example: /// Example: 359655
/// Constraints: No constraints specified.
func (rcv *NavigationalObstruction_Full) MutateSegStartPoint(n int32) bool {
	return rcv._tab.MutateInt32Slot(34, n)
}

/// ID of the end point of a line segment.
/// Example: /// Example: 359655
/// Constraints: No constraints specified.
func (rcv *NavigationalObstruction_Full) SegEndPoint() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(36))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

/// ID of the end point of a line segment.
/// Example: /// Example: 359655
/// Constraints: No constraints specified.
func (rcv *NavigationalObstruction_Full) MutateSegEndPoint(n int32) bool {
	return rcv._tab.MutateInt32Slot(36, n)
}

/// Identifies the sequence number of a line segment.
/// Example: /// Example: 1
/// Constraints: No constraints specified.
func (rcv *NavigationalObstruction_Full) SegNum() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(38))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

/// Identifies the sequence number of a line segment.
/// Example: /// Example: 1
/// Constraints: No constraints specified.
func (rcv *NavigationalObstruction_Full) MutateSegNum(n int32) bool {
	return rcv._tab.MutateInt32Slot(38, n)
}

/// FACC (Feature and Attribute Coding Catalog) is a five-character code for encoding real-world entities and objects. The first letter of the code is an alphabetic value from "A" to "Z" which will map to a feature category. The second character will map to a subcategory. Characters three to five are numeric and range from 000 to 999. This value will provide a unit feature type identification within the categories.
/// Example: /// Example: AT040
/// Constraints: Minimum length = 0, Maximum length = 5
func (rcv *NavigationalObstruction_Full) Facc() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(40))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// FACC (Feature and Attribute Coding Catalog) is a five-character code for encoding real-world entities and objects. The first letter of the code is an alphabetic value from "A" to "Z" which will map to a feature category. The second character will map to a subcategory. Characters three to five are numeric and range from 000 to 999. This value will provide a unit feature type identification within the categories.
/// Example: /// Example: AT040
/// Constraints: Minimum length = 0, Maximum length = 5
/// Identifying code for the type of this point obstacle.
/// Example: /// Example: 540
/// Constraints: Minimum length = 0, Maximum length = 4
func (rcv *NavigationalObstruction_Full) FeatureCode() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(42))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Identifying code for the type of this point obstacle.
/// Example: /// Example: 540
/// Constraints: Minimum length = 0, Maximum length = 4
/// Identifying code for the type of this point obstacle.
/// Example: /// Example: 540
/// Constraints: Minimum length = 0, Maximum length = 4
func (rcv *NavigationalObstruction_Full) FeatureType() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(44))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Identifying code for the type of this point obstacle.
/// Example: /// Example: 540
/// Constraints: Minimum length = 0, Maximum length = 4
/// Type name of point obstacle.
/// Example: /// Example: PYLON
/// Constraints: Minimum length = 0, Maximum length = 64
func (rcv *NavigationalObstruction_Full) FeatureName() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(46))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Type name of point obstacle.
/// Example: /// Example: PYLON
/// Constraints: Minimum length = 0, Maximum length = 64
/// Description of this obstacle, corresponding to the FACC (Feature and Attribute Coding Catalog) value.
/// Example: /// Example: Powerline Pylon, General
/// Constraints: Minimum length = 0, Maximum length = 64
func (rcv *NavigationalObstruction_Full) FeatureDescription() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(48))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Description of this obstacle, corresponding to the FACC (Feature and Attribute Coding Catalog) value.
/// Example: /// Example: Powerline Pylon, General
/// Constraints: Minimum length = 0, Maximum length = 64
/// The World Aeronautical Chart (WAC) identifier for the area in which this obstacle is located.
/// Example: /// Example: 262
/// Constraints: Minimum length = 0, Maximum length = 4
func (rcv *NavigationalObstruction_Full) Wac() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(50))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The World Aeronautical Chart (WAC) identifier for the area in which this obstacle is located.
/// Example: /// Example: 262
/// Constraints: Minimum length = 0, Maximum length = 4
/// This obstacle's World Area Code installation number (WAC-INNR).
/// Example: /// Example: 0409-00039
/// Constraints: Minimum length = 0, Maximum length = 32
func (rcv *NavigationalObstruction_Full) WacInnr() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(52))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// This obstacle's World Area Code installation number (WAC-INNR).
/// Example: /// Example: 0409-00039
/// Constraints: Minimum length = 0, Maximum length = 32
/// Indicates if the feature has multiple obstructions (e.g. S = Single, M = Multiple, U = Undetermined).
/// Example: /// Example: S
/// Constraints: Minimum length = 0, Maximum length = 1
func (rcv *NavigationalObstruction_Full) MultObs() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(54))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Indicates if the feature has multiple obstructions (e.g. S = Single, M = Multiple, U = Undetermined).
/// Example: /// Example: S
/// Constraints: Minimum length = 0, Maximum length = 1
/// Indicates the number of obstructions associated with a feature.
/// Example: /// Example: 1
/// Constraints: No constraints specified.
func (rcv *NavigationalObstruction_Full) NumObs() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(56))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

/// Indicates the number of obstructions associated with a feature.
/// Example: /// Example: 1
/// Constraints: No constraints specified.
func (rcv *NavigationalObstruction_Full) MutateNumObs(n int32) bool {
	return rcv._tab.MutateInt32Slot(56, n)
}

/// Code representing the mathematical model of Earth used to calculate coordinates for this obstacle (e.g. WGS-84, U for undetermined, etc.).  US Forces use the World Geodetic System 1984 (WGS-84), but also use maps by allied countries with local datums.
/// Example: /// Example: WGS-84
/// Constraints: Minimum length = 0, Maximum length = 8
func (rcv *NavigationalObstruction_Full) HorizDatumCode() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(58))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Code representing the mathematical model of Earth used to calculate coordinates for this obstacle (e.g. WGS-84, U for undetermined, etc.).  US Forces use the World Geodetic System 1984 (WGS-84), but also use maps by allied countries with local datums.
/// Example: /// Example: WGS-84
/// Constraints: Minimum length = 0, Maximum length = 8
/// The height Above Ground Level (AGL) of the point obstacle in feet.
/// Example: /// Example: 314.1
/// Constraints: No constraints specified.
func (rcv *NavigationalObstruction_Full) HeightAgl() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(60))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// The height Above Ground Level (AGL) of the point obstacle in feet.
/// Example: /// Example: 314.1
/// Constraints: No constraints specified.
func (rcv *NavigationalObstruction_Full) MutateHeightAgl(n float64) bool {
	return rcv._tab.MutateFloat64Slot(60, n)
}

/// The accuracy of the height Above Ground Level (AGL) AGL value for this point obstacle in feet.
/// Example: /// Example: 30.1
/// Constraints: No constraints specified.
func (rcv *NavigationalObstruction_Full) HeightAglacc() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(62))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// The accuracy of the height Above Ground Level (AGL) AGL value for this point obstacle in feet.
/// Example: /// Example: 30.1
/// Constraints: No constraints specified.
func (rcv *NavigationalObstruction_Full) MutateHeightAglacc(n float64) bool {
	return rcv._tab.MutateFloat64Slot(62, n)
}

/// The height Above Mean Sea Level (AMSL) of the point obstacle in feet.
/// Example: /// Example: 1154.1
/// Constraints: No constraints specified.
func (rcv *NavigationalObstruction_Full) HeightMsl() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(64))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// The height Above Mean Sea Level (AMSL) of the point obstacle in feet.
/// Example: /// Example: 1154.1
/// Constraints: No constraints specified.
func (rcv *NavigationalObstruction_Full) MutateHeightMsl(n float64) bool {
	return rcv._tab.MutateFloat64Slot(64, n)
}

/// The accuracy of the height Above Mean Sea Level (AMSL) value for this point obstacle in feet.
/// Example: /// Example: 34.1
/// Constraints: No constraints specified.
func (rcv *NavigationalObstruction_Full) HeightMslacc() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(66))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// The accuracy of the height Above Mean Sea Level (AMSL) value for this point obstacle in feet.
/// Example: /// Example: 34.1
/// Constraints: No constraints specified.
func (rcv *NavigationalObstruction_Full) MutateHeightMslacc(n float64) bool {
	return rcv._tab.MutateFloat64Slot(66, n)
}

/// The elevation at the point obstacle's location in feet.
/// Example: /// Example: 840.1
/// Constraints: No constraints specified.
func (rcv *NavigationalObstruction_Full) Elevation() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(68))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// The elevation at the point obstacle's location in feet.
/// Example: /// Example: 840.1
/// Constraints: No constraints specified.
func (rcv *NavigationalObstruction_Full) MutateElevation(n float64) bool {
	return rcv._tab.MutateFloat64Slot(68, n)
}

/// The difference between the assigned elevation of this point and its true elevation, in feet.
/// Example: /// Example: 17.1
/// Constraints: No constraints specified.
func (rcv *NavigationalObstruction_Full) ElevationAcc() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(70))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// The difference between the assigned elevation of this point and its true elevation, in feet.
/// Example: /// Example: 17.1
/// Constraints: No constraints specified.
func (rcv *NavigationalObstruction_Full) MutateElevationAcc(n float64) bool {
	return rcv._tab.MutateFloat64Slot(70, n)
}

/// The difference between the recorded horizontal coordinates of this point obstacle and its true position, in feet.
/// Example: /// Example: 8.1
/// Constraints: No constraints specified.
func (rcv *NavigationalObstruction_Full) HorizAcc() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(72))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// The difference between the recorded horizontal coordinates of this point obstacle and its true position, in feet.
/// Example: /// Example: 8.1
/// Constraints: No constraints specified.
func (rcv *NavigationalObstruction_Full) MutateHorizAcc(n float64) bool {
	return rcv._tab.MutateFloat64Slot(72, n)
}

/// When horizontal and/or vertical accuracy requirements cannot be met because of inadequate source material, this code indicates the quality of the data.
/// Example: /// Example: 0
/// Constraints: Minimum length = 0, Maximum length = 1
func (rcv *NavigationalObstruction_Full) Quality() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(74))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// When horizontal and/or vertical accuracy requirements cannot be met because of inadequate source material, this code indicates the quality of the data.
/// Example: /// Example: 0
/// Constraints: Minimum length = 0, Maximum length = 1
/// Code specifying if this obstacle is lit (e.g. Y = Yes, N = No, U = Unknown).
/// Example: /// Example: U
/// Constraints: Minimum length = 0, Maximum length = 1
func (rcv *NavigationalObstruction_Full) LightingCode() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(76))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Code specifying if this obstacle is lit (e.g. Y = Yes, N = No, U = Unknown).
/// Example: /// Example: U
/// Constraints: Minimum length = 0, Maximum length = 1
/// The surface material composition code of this point obstacle.
/// Example: /// Example: U
/// Constraints: Minimum length = 0, Maximum length = 1
func (rcv *NavigationalObstruction_Full) SurfaceMatCode() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(78))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The surface material composition code of this point obstacle.
/// Example: /// Example: U
/// Constraints: Minimum length = 0, Maximum length = 1
/// The side or sides of this obstruction feature which produces the greatest reflectivity potential.
/// Example: /// Example: 2
/// Constraints: No constraints specified.
func (rcv *NavigationalObstruction_Full) DirectivityCode() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(80))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

/// The side or sides of this obstruction feature which produces the greatest reflectivity potential.
/// Example: /// Example: 2
/// Constraints: No constraints specified.
func (rcv *NavigationalObstruction_Full) MutateDirectivityCode(n int32) bool {
	return rcv._tab.MutateInt32Slot(80, n)
}

/// Method used to confirm the existence of this obstacle.
/// Example: /// Example: 3
/// Constraints: No constraints specified.
func (rcv *NavigationalObstruction_Full) ValidationCode() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(82))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

/// Method used to confirm the existence of this obstacle.
/// Example: /// Example: 3
/// Constraints: No constraints specified.
func (rcv *NavigationalObstruction_Full) MutateValidationCode(n int32) bool {
	return rcv._tab.MutateInt32Slot(82, n)
}

/// The transaction type/code for this obstacle (e.g. "D", "N", "R", "S", "V", "X").
/// Example: /// Example: V
/// Constraints: Minimum length = 0, Maximum length = 1
func (rcv *NavigationalObstruction_Full) TransactionCode() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(84))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The transaction type/code for this obstacle (e.g. "D", "N", "R", "S", "V", "X").
/// Example: /// Example: V
/// Constraints: Minimum length = 0, Maximum length = 1
/// Code denoting the action, review, or process that updated this obstacle.
/// Example: /// Example: OT
/// Constraints: Minimum length = 0, Maximum length = 4
func (rcv *NavigationalObstruction_Full) ProcessCode() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(86))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Code denoting the action, review, or process that updated this obstacle.
/// Example: /// Example: OT
/// Constraints: Minimum length = 0, Maximum length = 4
/// Indicates if this obstacle record is Active (A) or Deleted (D).
/// Example: /// Example: A
/// Constraints: Minimum length = 0, Maximum length = 1
func (rcv *NavigationalObstruction_Full) ActDelCode() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(88))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Indicates if this obstacle record is Active (A) or Deleted (D).
/// Example: /// Example: A
/// Constraints: Minimum length = 0, Maximum length = 1
/// Name of the agency that produced this obstruction data set.
/// Example: /// Example: ACME
/// Constraints: Minimum length = 0, Maximum length = 128
func (rcv *NavigationalObstruction_Full) Producer() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(90))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Name of the agency that produced this obstruction data set.
/// Example: /// Example: ACME
/// Constraints: Minimum length = 0, Maximum length = 128
/// The organization that entered obstacle data other than the producer.
/// Example: /// Example: ACME
/// Constraints: Minimum length = 0, Maximum length = 64
func (rcv *NavigationalObstruction_Full) DerivingOrg() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(92))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The organization that entered obstacle data other than the producer.
/// Example: /// Example: ACME
/// Constraints: Minimum length = 0, Maximum length = 64
/// The organization that deleted this obstacle record.
/// Example: /// Example: ACME
/// Constraints: Minimum length = 0, Maximum length = 64
func (rcv *NavigationalObstruction_Full) DeletingOrg() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(94))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The organization that deleted this obstacle record.
/// Example: /// Example: ACME
/// Constraints: Minimum length = 0, Maximum length = 64
/// Source date of this obstacle data, in ISO 8601 date-only format (ex. YYYY-MM-DD).
/// Example: /// Example: 2016-04-01
/// Constraints: No constraints specified.
func (rcv *NavigationalObstruction_Full) SourceDate() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(96))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Source date of this obstacle data, in ISO 8601 date-only format (ex. YYYY-MM-DD).
/// Example: /// Example: 2016-04-01
/// Constraints: No constraints specified.
/// Date this obstacle data was revised, in ISO 8601 date-only format (ex. YYYY-MM-DD).
/// Example: /// Example: 2020-02-26
/// Constraints: No constraints specified.
func (rcv *NavigationalObstruction_Full) RevDate() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(98))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Date this obstacle data was revised, in ISO 8601 date-only format (ex. YYYY-MM-DD).
/// Example: /// Example: 2020-02-26
/// Constraints: No constraints specified.
/// Date this obstacle was initially added to the data set, in ISO 8601 date-only format (ex. YYYY-MM-DD).
/// Example: /// Example: 1991-03-28
/// Constraints: No constraints specified.
func (rcv *NavigationalObstruction_Full) InitRecordDate() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(100))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Date this obstacle was initially added to the data set, in ISO 8601 date-only format (ex. YYYY-MM-DD).
/// Example: /// Example: 1991-03-28
/// Constraints: No constraints specified.
/// This field provides an array of keys that can be added to any obstruction feature to provide information that is not already supported. The entries in this array must correspond to the position index in the values array. This array must be the same length as values.
/// Example: /// Example: ['key1', 'key2']
/// Constraints: No constraints specified.
func (rcv *NavigationalObstruction_Full) Keys(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(102))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *NavigationalObstruction_Full) KeysLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(102))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

/// This field provides an array of keys that can be added to any obstruction feature to provide information that is not already supported. The entries in this array must correspond to the position index in the values array. This array must be the same length as values.
/// Example: /// Example: ['key1', 'key2']
/// Constraints: No constraints specified.
/// This field provides an array of values that can be added to any obstruction feature to provide information that is not already supported. The entries in this array must correspond to the position index in the keys array. This array must be the same length as keys.
/// Example: /// Example: ['value1', 'value2']
/// Constraints: No constraints specified.
func (rcv *NavigationalObstruction_Full) Values(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(104))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *NavigationalObstruction_Full) ValuesLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(104))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

/// This field provides an array of values that can be added to any obstruction feature to provide information that is not already supported. The entries in this array must correspond to the position index in the keys array. This array must be the same length as keys.
/// Example: /// Example: ['value1', 'value2']
/// Constraints: No constraints specified.
/// Remarks regarding this obstacle.
/// Example: /// Example: Obstacle remarks
/// Constraints: Minimum length = 0, Maximum length = 512
func (rcv *NavigationalObstruction_Full) ObstacleRemarks() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(106))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Remarks regarding this obstacle.
/// Example: /// Example: Obstacle remarks
/// Constraints: Minimum length = 0, Maximum length = 512
/// The date after which this obstruction data set’s currency is stale and should be refreshed, in ISO 8601 date-only format (e.g. YYYY-MM-DD).
/// Example: /// Example: 2024-07-11
/// Constraints: No constraints specified.
func (rcv *NavigationalObstruction_Full) NextCycleDate() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(108))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The date after which this obstruction data set’s currency is stale and should be refreshed, in ISO 8601 date-only format (e.g. YYYY-MM-DD).
/// Example: /// Example: 2024-07-11
/// Constraints: No constraints specified.
/// Earliest record date possible in this obstruction data set (not the earliest data item), in ISO 8601 date-only format (e.g. YYYY-MM-DD). If null, this data set is assumed to be a full data pull of holdings until the cutoffDate.  If this field is populated, this data set only contains updates since the last baseline data set.
/// Example: /// Example: 2024-04-23
/// Constraints: No constraints specified.
func (rcv *NavigationalObstruction_Full) BaselineCutoffDate() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(110))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Earliest record date possible in this obstruction data set (not the earliest data item), in ISO 8601 date-only format (e.g. YYYY-MM-DD). If null, this data set is assumed to be a full data pull of holdings until the cutoffDate.  If this field is populated, this data set only contains updates since the last baseline data set.
/// Example: /// Example: 2024-04-23
/// Constraints: No constraints specified.
/// Latest record date possible in this obstruction data set (not the most recent data item), in ISO 8601 date-only format (e.g. YYYY-MM-DD).
/// Example: /// Example: 2024-05-21
/// Constraints: No constraints specified.
func (rcv *NavigationalObstruction_Full) CutoffDate() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(112))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Latest record date possible in this obstruction data set (not the most recent data item), in ISO 8601 date-only format (e.g. YYYY-MM-DD).
/// Example: /// Example: 2024-05-21
/// Constraints: No constraints specified.
/// The Aeronautical Information Regulation and Control (AIRAC) cycle of this obstruction data set. The format is YYNN where YY is the last two digits of the year and NN is the cycle number.
/// Example: /// Example: 2406
/// Constraints: No constraints specified.
func (rcv *NavigationalObstruction_Full) AiracCycle() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(114))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

/// The Aeronautical Information Regulation and Control (AIRAC) cycle of this obstruction data set. The format is YYNN where YY is the last two digits of the year and NN is the cycle number.
/// Example: /// Example: 2406
/// Constraints: No constraints specified.
func (rcv *NavigationalObstruction_Full) MutateAiracCycle(n int32) bool {
	return rcv._tab.MutateInt32Slot(114, n)
}

/// The baseline Aeronautical Information Regulation and Control (AIRAC) cycle for change sets only. The format is YYNN where YY is the last two digits of the year and NN is the cycle number.
/// Example: /// Example: 2405
/// Constraints: No constraints specified.
func (rcv *NavigationalObstruction_Full) BaseAiracCycle() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(116))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

/// The baseline Aeronautical Information Regulation and Control (AIRAC) cycle for change sets only. The format is YYNN where YY is the last two digits of the year and NN is the cycle number.
/// Example: /// Example: 2405
/// Constraints: No constraints specified.
func (rcv *NavigationalObstruction_Full) MutateBaseAiracCycle(n int32) bool {
	return rcv._tab.MutateInt32Slot(116, n)
}

/// The DoD Standard Country Code designator for the country or political entity that owns the data set associated with this obstruction. This field will be set to "OTHR" if the source value does not match a UDL Country code value (ISO-3166-ALPHA-2).
/// Example: /// Example: US
/// Constraints: Minimum length = 0, Maximum length = 4
func (rcv *NavigationalObstruction_Full) OwnerCountryCode() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(118))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The DoD Standard Country Code designator for the country or political entity that owns the data set associated with this obstruction. This field will be set to "OTHR" if the source value does not match a UDL Country code value (ISO-3166-ALPHA-2).
/// Example: /// Example: US
/// Constraints: Minimum length = 0, Maximum length = 4
/// WGS-84 longitude of the northeastern boundary for obstructions contained in this data set, in degrees. -180 to 180 degrees (negative values west of Prime Meridian).
/// Example: /// Example: 99.1
/// Constraints: No constraints specified.
func (rcv *NavigationalObstruction_Full) BoundNelon() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(120))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// WGS-84 longitude of the northeastern boundary for obstructions contained in this data set, in degrees. -180 to 180 degrees (negative values west of Prime Meridian).
/// Example: /// Example: 99.1
/// Constraints: No constraints specified.
func (rcv *NavigationalObstruction_Full) MutateBoundNelon(n float64) bool {
	return rcv._tab.MutateFloat64Slot(120, n)
}

/// WGS-84 latitude of the northeastern boundary for obstructions contained in this data set, in degrees. -90 to 90 degrees (negative values south of equator).
/// Example: /// Example: 29.1
/// Constraints: No constraints specified.
func (rcv *NavigationalObstruction_Full) BoundNelat() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(122))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// WGS-84 latitude of the northeastern boundary for obstructions contained in this data set, in degrees. -90 to 90 degrees (negative values south of equator).
/// Example: /// Example: 29.1
/// Constraints: No constraints specified.
func (rcv *NavigationalObstruction_Full) MutateBoundNelat(n float64) bool {
	return rcv._tab.MutateFloat64Slot(122, n)
}

/// WGS-84 longitude of the southwestern boundary for obstructions contained in this data set, in degrees. -180 to 180 degrees (negative values west of Prime Meridian).
/// Example: /// Example: -144.1
/// Constraints: No constraints specified.
func (rcv *NavigationalObstruction_Full) BoundSwlon() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(124))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// WGS-84 longitude of the southwestern boundary for obstructions contained in this data set, in degrees. -180 to 180 degrees (negative values west of Prime Meridian).
/// Example: /// Example: -144.1
/// Constraints: No constraints specified.
func (rcv *NavigationalObstruction_Full) MutateBoundSwlon(n float64) bool {
	return rcv._tab.MutateFloat64Slot(124, n)
}

/// WGS-84 latitude of the southwestern boundary for obstructions contained in this data set, in degrees. -90 to 90 degrees (negative values south of equator).
/// Example: /// Example: -44.1
/// Constraints: No constraints specified.
func (rcv *NavigationalObstruction_Full) BoundSwlat() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(126))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// WGS-84 latitude of the southwestern boundary for obstructions contained in this data set, in degrees. -90 to 90 degrees (negative values south of equator).
/// Example: /// Example: -44.1
/// Constraints: No constraints specified.
func (rcv *NavigationalObstruction_Full) MutateBoundSwlat(n float64) bool {
	return rcv._tab.MutateFloat64Slot(126, n)
}

/// The minimum height Above Ground Level (AGL) of the shortest obstruction contained in this data set, in feet.
/// Example: /// Example: 20.1
/// Constraints: No constraints specified.
func (rcv *NavigationalObstruction_Full) MinHeightAgl() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(128))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// The minimum height Above Ground Level (AGL) of the shortest obstruction contained in this data set, in feet.
/// Example: /// Example: 20.1
/// Constraints: No constraints specified.
func (rcv *NavigationalObstruction_Full) MutateMinHeightAgl(n float64) bool {
	return rcv._tab.MutateFloat64Slot(128, n)
}

/// The number of point features associated with this obstruction data set.
/// Example: /// Example: 21830590
/// Constraints: No constraints specified.
func (rcv *NavigationalObstruction_Full) NumPoints() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(130))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

/// The number of point features associated with this obstruction data set.
/// Example: /// Example: 21830590
/// Constraints: No constraints specified.
func (rcv *NavigationalObstruction_Full) MutateNumPoints(n int32) bool {
	return rcv._tab.MutateInt32Slot(130, n)
}

/// The number of line features associated with this obstruction data set.
/// Example: /// Example: 45993
/// Constraints: No constraints specified.
func (rcv *NavigationalObstruction_Full) NumLines() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(132))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

/// The number of line features associated with this obstruction data set.
/// Example: /// Example: 45993
/// Constraints: No constraints specified.
func (rcv *NavigationalObstruction_Full) MutateNumLines(n int32) bool {
	return rcv._tab.MutateInt32Slot(132, n)
}

/// Remarks concerning this obstruction's data set.
/// Example: /// Example: Data set remarks
/// Constraints: Minimum length = 0, Maximum length = 512
func (rcv *NavigationalObstruction_Full) DataSetRemarks() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(134))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Remarks concerning this obstruction's data set.
/// Example: /// Example: Data set remarks
/// Constraints: Minimum length = 0, Maximum length = 512
/// The name of the point file associated with this obstruction data set.
/// Example: /// Example: points.txt
/// Constraints: Minimum length = 0, Maximum length = 256
func (rcv *NavigationalObstruction_Full) PointsFilename() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(136))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The name of the point file associated with this obstruction data set.
/// Example: /// Example: points.txt
/// Constraints: Minimum length = 0, Maximum length = 256
/// The name of the line file associated with this obstruction data set.
/// Example: /// Example: lines.txt
/// Constraints: Minimum length = 0, Maximum length = 256
func (rcv *NavigationalObstruction_Full) LinesFilename() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(138))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The name of the line file associated with this obstruction data set.
/// Example: /// Example: lines.txt
/// Constraints: Minimum length = 0, Maximum length = 256
/// The name of the vector file associated with this obstruction data set.
/// Example: /// Example: vectors.txt
/// Constraints: Minimum length = 0, Maximum length = 256
func (rcv *NavigationalObstruction_Full) VectorsFilename() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(140))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The name of the vector file associated with this obstruction data set.
/// Example: /// Example: vectors.txt
/// Constraints: Minimum length = 0, Maximum length = 256
/// Optional URI location in the document repository of the raw file parsed by the system to produce this record. To download the raw file, prepend https://udl-hostname/scs/download?id= to this value.
/// Example: /// Example: Example URI
/// Constraints: Minimum length = 0, Maximum length = 256
func (rcv *NavigationalObstruction_Full) RawFileUri() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(142))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Optional URI location in the document repository of the raw file parsed by the system to produce this record. To download the raw file, prepend https://udl-hostname/scs/download?id= to this value.
/// Example: /// Example: Example URI
/// Constraints: Minimum length = 0, Maximum length = 256
/// Time the row was created in the database, auto-populated by the system.
/// Example: /// Example: 2022-01-01T16:00:00.123Z
/// Constraints: No constraints specified.
func (rcv *NavigationalObstruction_Full) CreatedAt() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(144))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Time the row was created in the database, auto-populated by the system.
/// Example: /// Example: 2022-01-01T16:00:00.123Z
/// Constraints: No constraints specified.
/// Application user who created the row in the database, auto-populated by the system.
/// Example: /// Example: some.user
/// Constraints: Minimum length = 1, Maximum length = 64
func (rcv *NavigationalObstruction_Full) CreatedBy() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(146))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Application user who created the row in the database, auto-populated by the system.
/// Example: /// Example: some.user
/// Constraints: Minimum length = 1, Maximum length = 64
/// Time the row was updated in the database, auto-populated by the system.
/// Example: /// Example: 2018-01-01T16:00:00.123Z
/// Constraints: No constraints specified.
func (rcv *NavigationalObstruction_Full) UpdatedAt() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(148))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Time the row was updated in the database, auto-populated by the system.
/// Example: /// Example: 2018-01-01T16:00:00.123Z
/// Constraints: No constraints specified.
/// Application user who updated the row in the database, auto-populated by the system.
/// Example: /// Example: some.user
/// Constraints: Minimum length = 0, Maximum length = 64
func (rcv *NavigationalObstruction_Full) UpdatedBy() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(150))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Application user who updated the row in the database, auto-populated by the system.
/// Example: /// Example: some.user
/// Constraints: Minimum length = 0, Maximum length = 64
/// The source data library from which this record was received. This could be a remote or tactical UDL or another data library. If null, the record should be assumed to have originated from the primary Enterprise UDL.
/// Example: /// Example: AXE
/// Constraints: Minimum length = 0, Maximum length = 64
func (rcv *NavigationalObstruction_Full) SourceDl() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(152))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The source data library from which this record was received. This could be a remote or tactical UDL or another data library. If null, the record should be assumed to have originated from the primary Enterprise UDL.
/// Example: /// Example: AXE
/// Constraints: Minimum length = 0, Maximum length = 64
/// Source of the data.
/// Example: /// Example: Bluestaq
/// Constraints: Minimum length = 1, Maximum length = 36
func (rcv *NavigationalObstruction_Full) Source() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(154))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Source of the data.
/// Example: /// Example: Bluestaq
/// Constraints: Minimum length = 1, Maximum length = 36
/// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
/// Example: /// Example: THIRD_PARTY_DATASOURCE
/// Constraints: Minimum length = 0, Maximum length = 64
func (rcv *NavigationalObstruction_Full) Origin() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(156))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
/// Example: /// Example: THIRD_PARTY_DATASOURCE
/// Constraints: Minimum length = 0, Maximum length = 64
/// The originating source network on which this record was created, auto-populated by the system.
/// Example: /// Example: OPS1
/// Constraints: Minimum length = 1, Maximum length = 32
func (rcv *NavigationalObstruction_Full) OrigNetwork() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(158))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The originating source network on which this record was created, auto-populated by the system.
/// Example: /// Example: OPS1
/// Constraints: Minimum length = 1, Maximum length = 32
/// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
/// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
/// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
/// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
/// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
/// Example: /// Example: TEST
/// Constraints: Minimum length = 1, Maximum length = 32
func (rcv *NavigationalObstruction_Full) DataMode() NavigationalObstruction_Full_dataMode_Enum {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(160))
	if o != 0 {
		return NavigationalObstruction_Full_dataMode_Enum(rcv._tab.GetInt8(o + rcv._tab.Pos))
	}
	return 0
}

/// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
/// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
/// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
/// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
/// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
/// Example: /// Example: TEST
/// Constraints: Minimum length = 1, Maximum length = 32
func (rcv *NavigationalObstruction_Full) MutateDataMode(n NavigationalObstruction_Full_dataMode_Enum) bool {
	return rcv._tab.MutateInt8Slot(160, int8(n))
}

func NavigationalObstruction_FullStart(builder *flatbuffers.Builder) {
	builder.StartObject(79)
}
func NavigationalObstruction_FullAddId(builder *flatbuffers.Builder, id flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(id), 0)
}
func NavigationalObstruction_FullAddClassificationMarking(builder *flatbuffers.Builder, classificationMarking flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(classificationMarking), 0)
}
func NavigationalObstruction_FullAddCycleDate(builder *flatbuffers.Builder, cycleDate flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(cycleDate), 0)
}
func NavigationalObstruction_FullAddObstacleType(builder *flatbuffers.Builder, obstacleType flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(3, flatbuffers.UOffsetT(obstacleType), 0)
}
func NavigationalObstruction_FullAddObstacleId(builder *flatbuffers.Builder, obstacleId flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(4, flatbuffers.UOffsetT(obstacleId), 0)
}
func NavigationalObstruction_FullAddExternalId(builder *flatbuffers.Builder, externalId flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(5, flatbuffers.UOffsetT(externalId), 0)
}
func NavigationalObstruction_FullAddOrigId(builder *flatbuffers.Builder, origId flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(6, flatbuffers.UOffsetT(origId), 0)
}
func NavigationalObstruction_FullAddCountryCode(builder *flatbuffers.Builder, countryCode flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(7, flatbuffers.UOffsetT(countryCode), 0)
}
func NavigationalObstruction_FullAddProvinceCode(builder *flatbuffers.Builder, provinceCode flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(8, flatbuffers.UOffsetT(provinceCode), 0)
}
func NavigationalObstruction_FullAddPointLat(builder *flatbuffers.Builder, pointLat float64) {
	builder.PrependFloat64Slot(9, pointLat, 0.0)
}
func NavigationalObstruction_FullAddPointLon(builder *flatbuffers.Builder, pointLon float64) {
	builder.PrependFloat64Slot(10, pointLon, 0.0)
}
func NavigationalObstruction_FullAddLineNelon(builder *flatbuffers.Builder, lineNelon float64) {
	builder.PrependFloat64Slot(11, lineNelon, 0.0)
}
func NavigationalObstruction_FullAddLineNelat(builder *flatbuffers.Builder, lineNelat float64) {
	builder.PrependFloat64Slot(12, lineNelat, 0.0)
}
func NavigationalObstruction_FullAddLineSwlon(builder *flatbuffers.Builder, lineSwlon float64) {
	builder.PrependFloat64Slot(13, lineSwlon, 0.0)
}
func NavigationalObstruction_FullAddLineSwlat(builder *flatbuffers.Builder, lineSwlat float64) {
	builder.PrependFloat64Slot(14, lineSwlat, 0.0)
}
func NavigationalObstruction_FullAddSegStartPoint(builder *flatbuffers.Builder, segStartPoint int32) {
	builder.PrependInt32Slot(15, segStartPoint, 0)
}
func NavigationalObstruction_FullAddSegEndPoint(builder *flatbuffers.Builder, segEndPoint int32) {
	builder.PrependInt32Slot(16, segEndPoint, 0)
}
func NavigationalObstruction_FullAddSegNum(builder *flatbuffers.Builder, segNum int32) {
	builder.PrependInt32Slot(17, segNum, 0)
}
func NavigationalObstruction_FullAddFacc(builder *flatbuffers.Builder, facc flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(18, flatbuffers.UOffsetT(facc), 0)
}
func NavigationalObstruction_FullAddFeatureCode(builder *flatbuffers.Builder, featureCode flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(19, flatbuffers.UOffsetT(featureCode), 0)
}
func NavigationalObstruction_FullAddFeatureType(builder *flatbuffers.Builder, featureType flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(20, flatbuffers.UOffsetT(featureType), 0)
}
func NavigationalObstruction_FullAddFeatureName(builder *flatbuffers.Builder, featureName flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(21, flatbuffers.UOffsetT(featureName), 0)
}
func NavigationalObstruction_FullAddFeatureDescription(builder *flatbuffers.Builder, featureDescription flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(22, flatbuffers.UOffsetT(featureDescription), 0)
}
func NavigationalObstruction_FullAddWac(builder *flatbuffers.Builder, wac flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(23, flatbuffers.UOffsetT(wac), 0)
}
func NavigationalObstruction_FullAddWacInnr(builder *flatbuffers.Builder, wacInnr flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(24, flatbuffers.UOffsetT(wacInnr), 0)
}
func NavigationalObstruction_FullAddMultObs(builder *flatbuffers.Builder, multObs flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(25, flatbuffers.UOffsetT(multObs), 0)
}
func NavigationalObstruction_FullAddNumObs(builder *flatbuffers.Builder, numObs int32) {
	builder.PrependInt32Slot(26, numObs, 0)
}
func NavigationalObstruction_FullAddHorizDatumCode(builder *flatbuffers.Builder, horizDatumCode flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(27, flatbuffers.UOffsetT(horizDatumCode), 0)
}
func NavigationalObstruction_FullAddHeightAgl(builder *flatbuffers.Builder, heightAgl float64) {
	builder.PrependFloat64Slot(28, heightAgl, 0.0)
}
func NavigationalObstruction_FullAddHeightAglacc(builder *flatbuffers.Builder, heightAglacc float64) {
	builder.PrependFloat64Slot(29, heightAglacc, 0.0)
}
func NavigationalObstruction_FullAddHeightMsl(builder *flatbuffers.Builder, heightMsl float64) {
	builder.PrependFloat64Slot(30, heightMsl, 0.0)
}
func NavigationalObstruction_FullAddHeightMslacc(builder *flatbuffers.Builder, heightMslacc float64) {
	builder.PrependFloat64Slot(31, heightMslacc, 0.0)
}
func NavigationalObstruction_FullAddElevation(builder *flatbuffers.Builder, elevation float64) {
	builder.PrependFloat64Slot(32, elevation, 0.0)
}
func NavigationalObstruction_FullAddElevationAcc(builder *flatbuffers.Builder, elevationAcc float64) {
	builder.PrependFloat64Slot(33, elevationAcc, 0.0)
}
func NavigationalObstruction_FullAddHorizAcc(builder *flatbuffers.Builder, horizAcc float64) {
	builder.PrependFloat64Slot(34, horizAcc, 0.0)
}
func NavigationalObstruction_FullAddQuality(builder *flatbuffers.Builder, quality flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(35, flatbuffers.UOffsetT(quality), 0)
}
func NavigationalObstruction_FullAddLightingCode(builder *flatbuffers.Builder, lightingCode flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(36, flatbuffers.UOffsetT(lightingCode), 0)
}
func NavigationalObstruction_FullAddSurfaceMatCode(builder *flatbuffers.Builder, surfaceMatCode flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(37, flatbuffers.UOffsetT(surfaceMatCode), 0)
}
func NavigationalObstruction_FullAddDirectivityCode(builder *flatbuffers.Builder, directivityCode int32) {
	builder.PrependInt32Slot(38, directivityCode, 0)
}
func NavigationalObstruction_FullAddValidationCode(builder *flatbuffers.Builder, validationCode int32) {
	builder.PrependInt32Slot(39, validationCode, 0)
}
func NavigationalObstruction_FullAddTransactionCode(builder *flatbuffers.Builder, transactionCode flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(40, flatbuffers.UOffsetT(transactionCode), 0)
}
func NavigationalObstruction_FullAddProcessCode(builder *flatbuffers.Builder, processCode flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(41, flatbuffers.UOffsetT(processCode), 0)
}
func NavigationalObstruction_FullAddActDelCode(builder *flatbuffers.Builder, actDelCode flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(42, flatbuffers.UOffsetT(actDelCode), 0)
}
func NavigationalObstruction_FullAddProducer(builder *flatbuffers.Builder, producer flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(43, flatbuffers.UOffsetT(producer), 0)
}
func NavigationalObstruction_FullAddDerivingOrg(builder *flatbuffers.Builder, derivingOrg flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(44, flatbuffers.UOffsetT(derivingOrg), 0)
}
func NavigationalObstruction_FullAddDeletingOrg(builder *flatbuffers.Builder, deletingOrg flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(45, flatbuffers.UOffsetT(deletingOrg), 0)
}
func NavigationalObstruction_FullAddSourceDate(builder *flatbuffers.Builder, sourceDate flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(46, flatbuffers.UOffsetT(sourceDate), 0)
}
func NavigationalObstruction_FullAddRevDate(builder *flatbuffers.Builder, revDate flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(47, flatbuffers.UOffsetT(revDate), 0)
}
func NavigationalObstruction_FullAddInitRecordDate(builder *flatbuffers.Builder, initRecordDate flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(48, flatbuffers.UOffsetT(initRecordDate), 0)
}
func NavigationalObstruction_FullAddKeys(builder *flatbuffers.Builder, keys flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(49, flatbuffers.UOffsetT(keys), 0)
}
func NavigationalObstruction_FullStartKeysVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func NavigationalObstruction_FullAddValues(builder *flatbuffers.Builder, values flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(50, flatbuffers.UOffsetT(values), 0)
}
func NavigationalObstruction_FullStartValuesVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func NavigationalObstruction_FullAddObstacleRemarks(builder *flatbuffers.Builder, obstacleRemarks flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(51, flatbuffers.UOffsetT(obstacleRemarks), 0)
}
func NavigationalObstruction_FullAddNextCycleDate(builder *flatbuffers.Builder, nextCycleDate flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(52, flatbuffers.UOffsetT(nextCycleDate), 0)
}
func NavigationalObstruction_FullAddBaselineCutoffDate(builder *flatbuffers.Builder, baselineCutoffDate flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(53, flatbuffers.UOffsetT(baselineCutoffDate), 0)
}
func NavigationalObstruction_FullAddCutoffDate(builder *flatbuffers.Builder, cutoffDate flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(54, flatbuffers.UOffsetT(cutoffDate), 0)
}
func NavigationalObstruction_FullAddAiracCycle(builder *flatbuffers.Builder, airacCycle int32) {
	builder.PrependInt32Slot(55, airacCycle, 0)
}
func NavigationalObstruction_FullAddBaseAiracCycle(builder *flatbuffers.Builder, baseAiracCycle int32) {
	builder.PrependInt32Slot(56, baseAiracCycle, 0)
}
func NavigationalObstruction_FullAddOwnerCountryCode(builder *flatbuffers.Builder, ownerCountryCode flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(57, flatbuffers.UOffsetT(ownerCountryCode), 0)
}
func NavigationalObstruction_FullAddBoundNelon(builder *flatbuffers.Builder, boundNelon float64) {
	builder.PrependFloat64Slot(58, boundNelon, 0.0)
}
func NavigationalObstruction_FullAddBoundNelat(builder *flatbuffers.Builder, boundNelat float64) {
	builder.PrependFloat64Slot(59, boundNelat, 0.0)
}
func NavigationalObstruction_FullAddBoundSwlon(builder *flatbuffers.Builder, boundSwlon float64) {
	builder.PrependFloat64Slot(60, boundSwlon, 0.0)
}
func NavigationalObstruction_FullAddBoundSwlat(builder *flatbuffers.Builder, boundSwlat float64) {
	builder.PrependFloat64Slot(61, boundSwlat, 0.0)
}
func NavigationalObstruction_FullAddMinHeightAgl(builder *flatbuffers.Builder, minHeightAgl float64) {
	builder.PrependFloat64Slot(62, minHeightAgl, 0.0)
}
func NavigationalObstruction_FullAddNumPoints(builder *flatbuffers.Builder, numPoints int32) {
	builder.PrependInt32Slot(63, numPoints, 0)
}
func NavigationalObstruction_FullAddNumLines(builder *flatbuffers.Builder, numLines int32) {
	builder.PrependInt32Slot(64, numLines, 0)
}
func NavigationalObstruction_FullAddDataSetRemarks(builder *flatbuffers.Builder, dataSetRemarks flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(65, flatbuffers.UOffsetT(dataSetRemarks), 0)
}
func NavigationalObstruction_FullAddPointsFilename(builder *flatbuffers.Builder, pointsFilename flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(66, flatbuffers.UOffsetT(pointsFilename), 0)
}
func NavigationalObstruction_FullAddLinesFilename(builder *flatbuffers.Builder, linesFilename flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(67, flatbuffers.UOffsetT(linesFilename), 0)
}
func NavigationalObstruction_FullAddVectorsFilename(builder *flatbuffers.Builder, vectorsFilename flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(68, flatbuffers.UOffsetT(vectorsFilename), 0)
}
func NavigationalObstruction_FullAddRawFileUri(builder *flatbuffers.Builder, rawFileUri flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(69, flatbuffers.UOffsetT(rawFileUri), 0)
}
func NavigationalObstruction_FullAddCreatedAt(builder *flatbuffers.Builder, createdAt flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(70, flatbuffers.UOffsetT(createdAt), 0)
}
func NavigationalObstruction_FullAddCreatedBy(builder *flatbuffers.Builder, createdBy flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(71, flatbuffers.UOffsetT(createdBy), 0)
}
func NavigationalObstruction_FullAddUpdatedAt(builder *flatbuffers.Builder, updatedAt flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(72, flatbuffers.UOffsetT(updatedAt), 0)
}
func NavigationalObstruction_FullAddUpdatedBy(builder *flatbuffers.Builder, updatedBy flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(73, flatbuffers.UOffsetT(updatedBy), 0)
}
func NavigationalObstruction_FullAddSourceDl(builder *flatbuffers.Builder, sourceDl flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(74, flatbuffers.UOffsetT(sourceDl), 0)
}
func NavigationalObstruction_FullAddSource(builder *flatbuffers.Builder, source flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(75, flatbuffers.UOffsetT(source), 0)
}
func NavigationalObstruction_FullAddOrigin(builder *flatbuffers.Builder, origin flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(76, flatbuffers.UOffsetT(origin), 0)
}
func NavigationalObstruction_FullAddOrigNetwork(builder *flatbuffers.Builder, origNetwork flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(77, flatbuffers.UOffsetT(origNetwork), 0)
}
func NavigationalObstruction_FullAddDataMode(builder *flatbuffers.Builder, dataMode NavigationalObstruction_Full_dataMode_Enum) {
	builder.PrependInt8Slot(78, int8(dataMode), 0)
}
func NavigationalObstruction_FullEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
