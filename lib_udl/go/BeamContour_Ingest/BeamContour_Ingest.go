// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package BeamContour_Ingest

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

/// /// Describes the beam contour associated with a beam entity. Beam contours are the geographic representation of the relative gain levels of beam power off of the maximum gain boresight points.
type BeamContour_Ingest struct {
	_tab flatbuffers.Table
}

const BeamContour_IngestIdentifier = "BEAM"

func GetRootAsBeamContour_Ingest(buf []byte, offset flatbuffers.UOffsetT) *BeamContour_Ingest {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &BeamContour_Ingest{}
	x.Init(buf, n+offset)
	return x
}

func FinishBeamContour_IngestBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	identifierBytes := []byte(BeamContour_IngestIdentifier)
	builder.FinishWithFileIdentifier(offset, identifierBytes)
}

func BeamContour_IngestBufferHasIdentifier(buf []byte) bool {
	return flatbuffers.BufferHasIdentifier(buf, BeamContour_IngestIdentifier)
}

func GetSizePrefixedRootAsBeamContour_Ingest(buf []byte, offset flatbuffers.UOffsetT) *BeamContour_Ingest {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &BeamContour_Ingest{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedBeamContour_IngestBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	identifierBytes := []byte(BeamContour_IngestIdentifier)
	builder.FinishSizePrefixedWithFileIdentifier(offset, identifierBytes)
}

func SizePrefixedBeamContour_IngestBufferHasIdentifier(buf []byte) bool {
	return flatbuffers.SizePrefixedBufferHasIdentifier(buf, BeamContour_IngestIdentifier)
}

func (rcv *BeamContour_Ingest) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *BeamContour_Ingest) Table() flatbuffers.Table {
	return rcv._tab
}

/// Unique identifier of the record, auto-generated by the system.
/// Example: /// Example: BEAMCONTOUR-ID
/// Constraints: Minimum length = 1, Maximum length = 36
func (rcv *BeamContour_Ingest) Id() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Unique identifier of the record, auto-generated by the system.
/// Example: /// Example: BEAMCONTOUR-ID
/// Constraints: Minimum length = 1, Maximum length = 36
/// Classification marking of the data in IC/CAPCO Portion-marked format.
/// Example: /// Example: U
/// Constraints: Minimum length = 1, Maximum length = 128
func (rcv *BeamContour_Ingest) ClassificationMarking() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Classification marking of the data in IC/CAPCO Portion-marked format.
/// Example: /// Example: U
/// Constraints: Minimum length = 1, Maximum length = 128
/// ID of the beam.
/// Example: /// Example: REF-BEAM-ID
/// Constraints: Minimum length = 1, Maximum length = 36
func (rcv *BeamContour_Ingest) IdBeam() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// ID of the beam.
/// Example: /// Example: REF-BEAM-ID
/// Constraints: Minimum length = 1, Maximum length = 36
/// The type of object represented in this record (BORESIGHT, CONTOUR, SVC AREA).  Boresight refers to the point of maximum/peak gain, and should not be confused with the 'aim point' of the related beam.  Gain contours are regions of  coverage referenced to the relative gain of the related beam.  Service Areas are composed of one or more service regions, with each region being either discrete point(s) or a continuous contour.
/// Example: /// Example: BORESIGHT
/// Constraints: Minimum length = 1, Maximum length = 16
func (rcv *BeamContour_Ingest) Type() BeamContour_Ingest_type_Enum {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return BeamContour_Ingest_type_Enum(rcv._tab.GetInt8(o + rcv._tab.Pos))
	}
	return 0
}

/// The type of object represented in this record (BORESIGHT, CONTOUR, SVC AREA).  Boresight refers to the point of maximum/peak gain, and should not be confused with the 'aim point' of the related beam.  Gain contours are regions of  coverage referenced to the relative gain of the related beam.  Service Areas are composed of one or more service regions, with each region being either discrete point(s) or a continuous contour.
/// Example: /// Example: BORESIGHT
/// Constraints: Minimum length = 1, Maximum length = 16
func (rcv *BeamContour_Ingest) MutateType(n BeamContour_Ingest_type_Enum) bool {
	return rcv._tab.MutateInt8Slot(10, int8(n))
}

/// The index number of this contour. The value is required if type = CONTOUR.
/// Example: /// Example: No example provided.
/// Constraints: No constraints specified.
func (rcv *BeamContour_Ingest) ContourIdx() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

/// The index number of this contour. The value is required if type = CONTOUR.
/// Example: /// Example: No example provided.
/// Constraints: No constraints specified.
func (rcv *BeamContour_Ingest) MutateContourIdx(n int32) bool {
	return rcv._tab.MutateInt32Slot(12, n)
}

/// The relative gain level in dB associated with this boresight or contour.  Gain does not apply to service area records. The value is required if type = BORESIGHT or CONTOUR.
/// Example: /// Example: 17.1
/// Constraints: No constraints specified.
func (rcv *BeamContour_Ingest) Gain() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// The relative gain level in dB associated with this boresight or contour.  Gain does not apply to service area records. The value is required if type = BORESIGHT or CONTOUR.
/// Example: /// Example: 17.1
/// Constraints: No constraints specified.
func (rcv *BeamContour_Ingest) MutateGain(n float64) bool {
	return rcv._tab.MutateFloat64Slot(14, n)
}

/// The region name within the service area.
/// Example: /// Example: Example region name
/// Constraints: Minimum length = 0, Maximum length = 24
func (rcv *BeamContour_Ingest) RegionName() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The region name within the service area.
/// Example: /// Example: Example region name
/// Constraints: Minimum length = 0, Maximum length = 24
/// GeoJSON or Well Known Text expression of the boresight point, service area point or region, or the gain contour region in geographic longitude, latitude pairs. Boresight and service area point(s) are represented as a 'Point' or 'MultiPoint', service areas and closed gain contours as 'Polygon', and open contours as 'LineString'. This is an optional convenience field only used for create operations. The system will auto-detect the format (Well Known Text or GeoJSON) and populate both geographyText and geographyJson fields appropriately. A create request must contain one of the geography, geographyText, or geographyJson.
/// Example: /// Example: POLYGON((26.156175339112 67.3291113966927,26.0910220642717 67.2580009640721,26.6637992964562 67.1795862381682,26.730115808233 67.2501237475598,26.156175339112 67.3291113966927))
/// Constraints: No constraints specified.
func (rcv *BeamContour_Ingest) Geography() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(18))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// GeoJSON or Well Known Text expression of the boresight point, service area point or region, or the gain contour region in geographic longitude, latitude pairs. Boresight and service area point(s) are represented as a 'Point' or 'MultiPoint', service areas and closed gain contours as 'Polygon', and open contours as 'LineString'. This is an optional convenience field only used for create operations. The system will auto-detect the format (Well Known Text or GeoJSON) and populate both geographyText and geographyJson fields appropriately. A create request must contain one of the geography, geographyText, or geographyJson.
/// Example: /// Example: POLYGON((26.156175339112 67.3291113966927,26.0910220642717 67.2580009640721,26.6637992964562 67.1795862381682,26.730115808233 67.2501237475598,26.156175339112 67.3291113966927))
/// Constraints: No constraints specified.
/// Geographical region or polygon (lon/lat pairs), as depicted by the Well-Known Text representation of the geometry/geography, of the image as projected on the ground. WKT reference: https://www.opengeospatial.org/standards/wkt-crs. Ignored if included with a POST or PUT request that also specifies a valid 'area' field.
/// Example: /// Example: POLYGON((67.3291113966927 26.156175339112,67.2580009640721 26.091022064271,67.1795862381682 26.6637992964562,67.2501237475598 26.730115808233,67.3291113966927 26.156175339112))
/// Constraints: No constraints specified.
func (rcv *BeamContour_Ingest) GeographyText() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(20))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Geographical region or polygon (lon/lat pairs), as depicted by the Well-Known Text representation of the geometry/geography, of the image as projected on the ground. WKT reference: https://www.opengeospatial.org/standards/wkt-crs. Ignored if included with a POST or PUT request that also specifies a valid 'area' field.
/// Example: /// Example: POLYGON((67.3291113966927 26.156175339112,67.2580009640721 26.091022064271,67.1795862381682 26.6637992964562,67.2501237475598 26.730115808233,67.3291113966927 26.156175339112))
/// Constraints: No constraints specified.
/// Geographical region or polygon (lat/lon pairs), as depicted by the GeoJSON representation of the geometry/geography, of the image as projected on the ground. GeoJSON Reference: https://geojson.org/. Ignored if included with a POST or PUT request that also specifies a valid 'area' or 'atext' field.
/// Example: /// Example: {"type":"Polygon","coordinates":[[[67.3291113966927,26.156175339112],[67.2580009640721,26.091022064271],[67.1795862381682,26.6637992964562],[67.2501237475598,26.730115808233],[67.3291113966927,26.156175339112]]]}
/// Constraints: No constraints specified.
func (rcv *BeamContour_Ingest) GeographyJson() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(22))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Geographical region or polygon (lat/lon pairs), as depicted by the GeoJSON representation of the geometry/geography, of the image as projected on the ground. GeoJSON Reference: https://geojson.org/. Ignored if included with a POST or PUT request that also specifies a valid 'area' or 'atext' field.
/// Example: /// Example: {"type":"Polygon","coordinates":[[[67.3291113966927,26.156175339112],[67.2580009640721,26.091022064271],[67.1795862381682,26.6637992964562],[67.2501237475598,26.730115808233],[67.3291113966927,26.156175339112]]]}
/// Constraints: No constraints specified.
/// Type of region as projected.
/// Example: /// Example: ST_Polygon
/// Constraints: Minimum length = 0, Maximum length = 128
func (rcv *BeamContour_Ingest) GeographyType() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(24))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Type of region as projected.
/// Example: /// Example: ST_Polygon
/// Constraints: Minimum length = 0, Maximum length = 128
/// Number of dimensions of the geometry depicted by region.
/// Example: /// Example: No example provided.
/// Constraints: No constraints specified.
func (rcv *BeamContour_Ingest) GeographyNdims() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(26))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

/// Number of dimensions of the geometry depicted by region.
/// Example: /// Example: No example provided.
/// Constraints: No constraints specified.
func (rcv *BeamContour_Ingest) MutateGeographyNdims(n int32) bool {
	return rcv._tab.MutateInt32Slot(26, n)
}

/// Geographical spatial_ref_sys for region.
/// Example: /// Example: 4326
/// Constraints: No constraints specified.
func (rcv *BeamContour_Ingest) GeographySrid() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(28))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

/// Geographical spatial_ref_sys for region.
/// Example: /// Example: 4326
/// Constraints: No constraints specified.
func (rcv *BeamContour_Ingest) MutateGeographySrid(n int32) bool {
	return rcv._tab.MutateInt32Slot(28, n)
}

/// Time the row was created in the database, auto-populated by the system, example = 2018-01-01T16:00:00.123Z.
/// Example: /// Example: 2018-01-01T16:00:00.123Z
/// Constraints: No constraints specified.
func (rcv *BeamContour_Ingest) CreatedAt() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(30))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Time the row was created in the database, auto-populated by the system, example = 2018-01-01T16:00:00.123Z.
/// Example: /// Example: 2018-01-01T16:00:00.123Z
/// Constraints: No constraints specified.
/// Application user who created the row in the database, auto-populated by the system.
/// Example: /// Example: some.user
/// Constraints: Minimum length = 1, Maximum length = 64
func (rcv *BeamContour_Ingest) CreatedBy() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(32))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Application user who created the row in the database, auto-populated by the system.
/// Example: /// Example: some.user
/// Constraints: Minimum length = 1, Maximum length = 64
/// Source of the data.
/// Example: /// Example: Bluestaq
/// Constraints: Minimum length = 1, Maximum length = 64
func (rcv *BeamContour_Ingest) Source() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(34))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Source of the data.
/// Example: /// Example: Bluestaq
/// Constraints: Minimum length = 1, Maximum length = 64
/// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
/// Example: /// Example: THIRD_PARTY_DATASOURCE
/// Constraints: Minimum length = 0, Maximum length = 64
func (rcv *BeamContour_Ingest) Origin() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(36))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
/// Example: /// Example: THIRD_PARTY_DATASOURCE
/// Constraints: Minimum length = 0, Maximum length = 64
/// The originating source network on which this record was created, auto-populated by the system.
/// Example: /// Example: ORIG
/// Constraints: Minimum length = 1, Maximum length = 32
func (rcv *BeamContour_Ingest) OrigNetwork() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(38))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The originating source network on which this record was created, auto-populated by the system.
/// Example: /// Example: ORIG
/// Constraints: Minimum length = 1, Maximum length = 32
/// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
/// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
/// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
/// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
/// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
/// Example: /// Example: TEST
/// Constraints: Minimum length = 1, Maximum length = 32
func (rcv *BeamContour_Ingest) DataMode() BeamContour_Ingest_dataMode_Enum {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(40))
	if o != 0 {
		return BeamContour_Ingest_dataMode_Enum(rcv._tab.GetInt8(o + rcv._tab.Pos))
	}
	return 0
}

/// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
/// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
/// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
/// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
/// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
/// Example: /// Example: TEST
/// Constraints: Minimum length = 1, Maximum length = 32
func (rcv *BeamContour_Ingest) MutateDataMode(n BeamContour_Ingest_dataMode_Enum) bool {
	return rcv._tab.MutateInt8Slot(40, int8(n))
}

func BeamContour_IngestStart(builder *flatbuffers.Builder) {
	builder.StartObject(19)
}
func BeamContour_IngestAddId(builder *flatbuffers.Builder, id flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(id), 0)
}
func BeamContour_IngestAddClassificationMarking(builder *flatbuffers.Builder, classificationMarking flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(classificationMarking), 0)
}
func BeamContour_IngestAddIdBeam(builder *flatbuffers.Builder, idBeam flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(idBeam), 0)
}
func BeamContour_IngestAddType(builder *flatbuffers.Builder, type_ BeamContour_Ingest_type_Enum) {
	builder.PrependInt8Slot(3, int8(type_), 0)
}
func BeamContour_IngestAddContourIdx(builder *flatbuffers.Builder, contourIdx int32) {
	builder.PrependInt32Slot(4, contourIdx, 0)
}
func BeamContour_IngestAddGain(builder *flatbuffers.Builder, gain float64) {
	builder.PrependFloat64Slot(5, gain, 0.0)
}
func BeamContour_IngestAddRegionName(builder *flatbuffers.Builder, regionName flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(6, flatbuffers.UOffsetT(regionName), 0)
}
func BeamContour_IngestAddGeography(builder *flatbuffers.Builder, geography flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(7, flatbuffers.UOffsetT(geography), 0)
}
func BeamContour_IngestAddGeographyText(builder *flatbuffers.Builder, geographyText flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(8, flatbuffers.UOffsetT(geographyText), 0)
}
func BeamContour_IngestAddGeographyJson(builder *flatbuffers.Builder, geographyJson flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(9, flatbuffers.UOffsetT(geographyJson), 0)
}
func BeamContour_IngestAddGeographyType(builder *flatbuffers.Builder, geographyType flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(10, flatbuffers.UOffsetT(geographyType), 0)
}
func BeamContour_IngestAddGeographyNdims(builder *flatbuffers.Builder, geographyNdims int32) {
	builder.PrependInt32Slot(11, geographyNdims, 0)
}
func BeamContour_IngestAddGeographySrid(builder *flatbuffers.Builder, geographySrid int32) {
	builder.PrependInt32Slot(12, geographySrid, 0)
}
func BeamContour_IngestAddCreatedAt(builder *flatbuffers.Builder, createdAt flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(13, flatbuffers.UOffsetT(createdAt), 0)
}
func BeamContour_IngestAddCreatedBy(builder *flatbuffers.Builder, createdBy flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(14, flatbuffers.UOffsetT(createdBy), 0)
}
func BeamContour_IngestAddSource(builder *flatbuffers.Builder, source flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(15, flatbuffers.UOffsetT(source), 0)
}
func BeamContour_IngestAddOrigin(builder *flatbuffers.Builder, origin flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(16, flatbuffers.UOffsetT(origin), 0)
}
func BeamContour_IngestAddOrigNetwork(builder *flatbuffers.Builder, origNetwork flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(17, flatbuffers.UOffsetT(origNetwork), 0)
}
func BeamContour_IngestAddDataMode(builder *flatbuffers.Builder, dataMode BeamContour_Ingest_dataMode_Enum) {
	builder.PrependInt8Slot(18, int8(dataMode), 0)
}
func BeamContour_IngestEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
