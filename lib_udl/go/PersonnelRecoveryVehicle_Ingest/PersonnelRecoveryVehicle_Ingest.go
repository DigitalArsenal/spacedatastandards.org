// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package PersonnelRecoveryVehicle_Ingest

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

/// /// Information regarding the recovery vehicle.
type PersonnelRecoveryVehicle_Ingest struct {
	_tab flatbuffers.Table
}

const PersonnelRecoveryVehicle_IngestIdentifier = "PERS"

func GetRootAsPersonnelRecoveryVehicle_Ingest(buf []byte, offset flatbuffers.UOffsetT) *PersonnelRecoveryVehicle_Ingest {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &PersonnelRecoveryVehicle_Ingest{}
	x.Init(buf, n+offset)
	return x
}

func FinishPersonnelRecoveryVehicle_IngestBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	identifierBytes := []byte(PersonnelRecoveryVehicle_IngestIdentifier)
	builder.FinishWithFileIdentifier(offset, identifierBytes)
}

func PersonnelRecoveryVehicle_IngestBufferHasIdentifier(buf []byte) bool {
	return flatbuffers.BufferHasIdentifier(buf, PersonnelRecoveryVehicle_IngestIdentifier)
}

func GetSizePrefixedRootAsPersonnelRecoveryVehicle_Ingest(buf []byte, offset flatbuffers.UOffsetT) *PersonnelRecoveryVehicle_Ingest {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &PersonnelRecoveryVehicle_Ingest{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedPersonnelRecoveryVehicle_IngestBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	identifierBytes := []byte(PersonnelRecoveryVehicle_IngestIdentifier)
	builder.FinishSizePrefixedWithFileIdentifier(offset, identifierBytes)
}

func SizePrefixedPersonnelRecoveryVehicle_IngestBufferHasIdentifier(buf []byte) bool {
	return flatbuffers.SizePrefixedBufferHasIdentifier(buf, PersonnelRecoveryVehicle_IngestIdentifier)
}

func (rcv *PersonnelRecoveryVehicle_Ingest) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *PersonnelRecoveryVehicle_Ingest) Table() flatbuffers.Table {
	return rcv._tab
}

/// The call sign of the recovery vehicle.
/// Example: /// Example: FALCO
/// Constraints: Minimum length = 0, Maximum length = 128
func (rcv *PersonnelRecoveryVehicle_Ingest) CallSign() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The call sign of the recovery vehicle.
/// Example: /// Example: FALCO
/// Constraints: Minimum length = 0, Maximum length = 128
/// The particular type of recovery vehicle to be used.
/// Example: /// Example: C17
/// Constraints: Minimum length = 0, Maximum length = 64
func (rcv *PersonnelRecoveryVehicle_Ingest) Type() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The particular type of recovery vehicle to be used.
/// Example: /// Example: C17
/// Constraints: Minimum length = 0, Maximum length = 64
/// Primary contact frequency of the recovery vehicle.
/// Example: /// Example: 34.55
/// Constraints: No constraints specified.
func (rcv *PersonnelRecoveryVehicle_Ingest) PrimaryFreq() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Primary contact frequency of the recovery vehicle.
/// Example: /// Example: 34.55
/// Constraints: No constraints specified.
func (rcv *PersonnelRecoveryVehicle_Ingest) MutatePrimaryFreq(n float64) bool {
	return rcv._tab.MutateFloat64Slot(8, n)
}

/// The number of objects or units moving as a group and represented as a single entity in this recovery vehicle message. If null, the strength is assumed to represent a single object.  Note that if this recovery derives from a J-series message then special definitions apply for the following values: 13 indicates an estimated 2-7 units, 14 indicates an estimated more than 7 units, and 15 indicates an estimated more than 12 units.
/// Example: /// Example: 5
/// Constraints: No constraints specified.
func (rcv *PersonnelRecoveryVehicle_Ingest) Strength() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

/// The number of objects or units moving as a group and represented as a single entity in this recovery vehicle message. If null, the strength is assumed to represent a single object.  Note that if this recovery derives from a J-series message then special definitions apply for the following values: 13 indicates an estimated 2-7 units, 14 indicates an estimated more than 7 units, and 15 indicates an estimated more than 12 units.
/// Example: /// Example: 5
/// Constraints: No constraints specified.
func (rcv *PersonnelRecoveryVehicle_Ingest) MutateStrength(n int32) bool {
	return rcv._tab.MutateInt32Slot(10, n)
}

func PersonnelRecoveryVehicle_IngestStart(builder *flatbuffers.Builder) {
	builder.StartObject(4)
}
func PersonnelRecoveryVehicle_IngestAddCallSign(builder *flatbuffers.Builder, callSign flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(callSign), 0)
}
func PersonnelRecoveryVehicle_IngestAddType(builder *flatbuffers.Builder, type_ flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(type_), 0)
}
func PersonnelRecoveryVehicle_IngestAddPrimaryFreq(builder *flatbuffers.Builder, primaryFreq float64) {
	builder.PrependFloat64Slot(2, primaryFreq, 0.0)
}
func PersonnelRecoveryVehicle_IngestAddStrength(builder *flatbuffers.Builder, strength int32) {
	builder.PrependInt32Slot(3, strength, 0)
}
func PersonnelRecoveryVehicle_IngestEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
