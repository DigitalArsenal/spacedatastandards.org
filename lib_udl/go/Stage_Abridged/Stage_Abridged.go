// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package Stage_Abridged

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

/// /// Launch stage information for a particular launch vehicle. A launch vehicle can have several stages, each with 1 to many engines.
type Stage_Abridged struct {
	_tab flatbuffers.Table
}

const Stage_AbridgedIdentifier = "STAG"

func GetRootAsStage_Abridged(buf []byte, offset flatbuffers.UOffsetT) *Stage_Abridged {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &Stage_Abridged{}
	x.Init(buf, n+offset)
	return x
}

func FinishStage_AbridgedBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	identifierBytes := []byte(Stage_AbridgedIdentifier)
	builder.FinishWithFileIdentifier(offset, identifierBytes)
}

func Stage_AbridgedBufferHasIdentifier(buf []byte) bool {
	return flatbuffers.BufferHasIdentifier(buf, Stage_AbridgedIdentifier)
}

func GetSizePrefixedRootAsStage_Abridged(buf []byte, offset flatbuffers.UOffsetT) *Stage_Abridged {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &Stage_Abridged{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedStage_AbridgedBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	identifierBytes := []byte(Stage_AbridgedIdentifier)
	builder.FinishSizePrefixedWithFileIdentifier(offset, identifierBytes)
}

func SizePrefixedStage_AbridgedBufferHasIdentifier(buf []byte) bool {
	return flatbuffers.SizePrefixedBufferHasIdentifier(buf, Stage_AbridgedIdentifier)
}

func (rcv *Stage_Abridged) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *Stage_Abridged) Table() flatbuffers.Table {
	return rcv._tab
}

/// Unique identifier of the record, auto-generated by the system.
/// Example: /// Example: STAGE-ID
/// Constraints: Minimum length = 1, Maximum length = 36
func (rcv *Stage_Abridged) Id() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Unique identifier of the record, auto-generated by the system.
/// Example: /// Example: STAGE-ID
/// Constraints: Minimum length = 1, Maximum length = 36
/// Identifier of the launch vehicle record for this stage.
/// Example: /// Example: LAUNCHVEHICLE-ID
/// Constraints: Minimum length = 1, Maximum length = 36
func (rcv *Stage_Abridged) IdLaunchVehicle() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Identifier of the launch vehicle record for this stage.
/// Example: /// Example: LAUNCHVEHICLE-ID
/// Constraints: Minimum length = 1, Maximum length = 36
/// Identifier of the Engine record for this stage.
/// Example: /// Example: ENGINE-ID
/// Constraints: Minimum length = 1, Maximum length = 36
func (rcv *Stage_Abridged) IdEngine() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Identifier of the Engine record for this stage.
/// Example: /// Example: ENGINE-ID
/// Constraints: Minimum length = 1, Maximum length = 36
/// Classification marking of the data in IC/CAPCO Portion-marked format.
/// Example: /// Example: U
/// Constraints: Minimum length = 1, Maximum length = 128
func (rcv *Stage_Abridged) ClassificationMarking() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Classification marking of the data in IC/CAPCO Portion-marked format.
/// Example: /// Example: U
/// Constraints: Minimum length = 1, Maximum length = 128
/// The stage number of this launch stage.
/// Example: /// Example: 2
/// Constraints: No constraints specified.
func (rcv *Stage_Abridged) StageNumber() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

/// The stage number of this launch stage.
/// Example: /// Example: 2
/// Constraints: No constraints specified.
func (rcv *Stage_Abridged) MutateStageNumber(n int32) bool {
	return rcv._tab.MutateInt32Slot(12, n)
}

/// Engine cycle type (e.g. Electrostatic Ion, Pressure Fed, Hall, Catalytic Decomposition, etc.).
/// Example: /// Example: Electrostatic Ion
/// Constraints: Minimum length = 0, Maximum length = 64
func (rcv *Stage_Abridged) Type() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Engine cycle type (e.g. Electrostatic Ion, Pressure Fed, Hall, Catalytic Decomposition, etc.).
/// Example: /// Example: Electrostatic Ion
/// Constraints: Minimum length = 0, Maximum length = 64
/// ID of the organization that manufactures this launch stage.
/// Example: /// Example: 5feed5d7-d131-57e5-a3fd-acc173bca736
/// Constraints: Minimum length = 0, Maximum length = 36
func (rcv *Stage_Abridged) ManufacturerOrgId() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// ID of the organization that manufactures this launch stage.
/// Example: /// Example: 5feed5d7-d131-57e5-a3fd-acc173bca736
/// Constraints: Minimum length = 0, Maximum length = 36
/// The number of the specified engines on this launch stage.
/// Example: /// Example: 1
/// Constraints: No constraints specified.
func (rcv *Stage_Abridged) NumEngines() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(18))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

/// The number of the specified engines on this launch stage.
/// Example: /// Example: 1
/// Constraints: No constraints specified.
func (rcv *Stage_Abridged) MutateNumEngines(n int32) bool {
	return rcv._tab.MutateInt32Slot(18, n)
}

/// Stage length in meters.
/// Example: /// Example: 25.13
/// Constraints: No constraints specified.
func (rcv *Stage_Abridged) Length() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(20))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Stage length in meters.
/// Example: /// Example: 25.13
/// Constraints: No constraints specified.
func (rcv *Stage_Abridged) MutateLength(n float64) bool {
	return rcv._tab.MutateFloat64Slot(20, n)
}

/// Stage maximum external diameter in meters.
/// Example: /// Example: 3.95
/// Constraints: No constraints specified.
func (rcv *Stage_Abridged) Diameter() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(22))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Stage maximum external diameter in meters.
/// Example: /// Example: 3.95
/// Constraints: No constraints specified.
func (rcv *Stage_Abridged) MutateDiameter(n float64) bool {
	return rcv._tab.MutateFloat64Slot(22, n)
}

/// Stage gross mass in kg.
/// Example: /// Example: 9956.1
/// Constraints: No constraints specified.
func (rcv *Stage_Abridged) Mass() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(24))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Stage gross mass in kg.
/// Example: /// Example: 9956.1
/// Constraints: No constraints specified.
func (rcv *Stage_Abridged) MutateMass(n float64) bool {
	return rcv._tab.MutateFloat64Slot(24, n)
}

/// Engine vernier or additional engine type.
/// Example: /// Example: vernier
/// Constraints: Minimum length = 0, Maximum length = 32
func (rcv *Stage_Abridged) Vernier() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(26))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Engine vernier or additional engine type.
/// Example: /// Example: vernier
/// Constraints: Minimum length = 0, Maximum length = 32
/// Number of vernier or additional engines.
/// Example: /// Example: 3
/// Constraints: No constraints specified.
func (rcv *Stage_Abridged) NumVernier() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(28))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

/// Number of vernier or additional engines.
/// Example: /// Example: 3
/// Constraints: No constraints specified.
func (rcv *Stage_Abridged) MutateNumVernier(n int32) bool {
	return rcv._tab.MutateInt32Slot(28, n)
}

/// Thrust of the stage main engine at sea level in kN.
/// Example: /// Example: 733.4
/// Constraints: No constraints specified.
func (rcv *Stage_Abridged) MainEngineThrustSeaLevel() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(30))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Thrust of the stage main engine at sea level in kN.
/// Example: /// Example: 733.4
/// Constraints: No constraints specified.
func (rcv *Stage_Abridged) MutateMainEngineThrustSeaLevel(n float64) bool {
	return rcv._tab.MutateFloat64Slot(30, n)
}

/// Thrust of the stage main engine in a vacuum in kN.
/// Example: /// Example: 733.4
/// Constraints: No constraints specified.
func (rcv *Stage_Abridged) MainEngineThrustVacuum() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(32))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Thrust of the stage main engine in a vacuum in kN.
/// Example: /// Example: 733.4
/// Constraints: No constraints specified.
func (rcv *Stage_Abridged) MutateMainEngineThrustVacuum(n float64) bool {
	return rcv._tab.MutateFloat64Slot(32, n)
}

/// Total thrust of the stage at sea level in kN.
/// Example: /// Example: 733.4
/// Constraints: No constraints specified.
func (rcv *Stage_Abridged) ThrustSeaLevel() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(34))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Total thrust of the stage at sea level in kN.
/// Example: /// Example: 733.4
/// Constraints: No constraints specified.
func (rcv *Stage_Abridged) MutateThrustSeaLevel(n float64) bool {
	return rcv._tab.MutateFloat64Slot(34, n)
}

/// Total thrust of the stage in a vacuum in kN.
/// Example: /// Example: 733.4
/// Constraints: No constraints specified.
func (rcv *Stage_Abridged) ThrustVacuum() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(36))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Total thrust of the stage in a vacuum in kN.
/// Example: /// Example: 733.4
/// Constraints: No constraints specified.
func (rcv *Stage_Abridged) MutateThrustVacuum(n float64) bool {
	return rcv._tab.MutateFloat64Slot(36, n)
}

/// Total burn time of the stage engines in seconds.
/// Example: /// Example: 256.3
/// Constraints: No constraints specified.
func (rcv *Stage_Abridged) BurnTime() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(38))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Total burn time of the stage engines in seconds.
/// Example: /// Example: 256.3
/// Constraints: No constraints specified.
func (rcv *Stage_Abridged) MutateBurnTime(n float64) bool {
	return rcv._tab.MutateFloat64Slot(38, n)
}

/// Number of burns for the stage engines.
/// Example: /// Example: 1
/// Constraints: No constraints specified.
func (rcv *Stage_Abridged) NumBurns() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(40))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

/// Number of burns for the stage engines.
/// Example: /// Example: 1
/// Constraints: No constraints specified.
func (rcv *Stage_Abridged) MutateNumBurns(n int32) bool {
	return rcv._tab.MutateInt32Slot(40, n)
}

/// Total burn time of the vernier or additional stage engines in seconds.
/// Example: /// Example: 1.1
/// Constraints: No constraints specified.
func (rcv *Stage_Abridged) VernierBurnTime() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(42))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Total burn time of the vernier or additional stage engines in seconds.
/// Example: /// Example: 1.1
/// Constraints: No constraints specified.
func (rcv *Stage_Abridged) MutateVernierBurnTime(n float64) bool {
	return rcv._tab.MutateFloat64Slot(42, n)
}

/// Total number of burns of the vernier or additional stage engines.
/// Example: /// Example: 4
/// Constraints: No constraints specified.
func (rcv *Stage_Abridged) VernierNumBurns() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(44))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

/// Total number of burns of the vernier or additional stage engines.
/// Example: /// Example: 4
/// Constraints: No constraints specified.
func (rcv *Stage_Abridged) MutateVernierNumBurns(n int32) bool {
	return rcv._tab.MutateInt32Slot(44, n)
}

/// Total thrust of one of the vernier or additional engines at sea level in kN.
/// Example: /// Example: 4.1
/// Constraints: No constraints specified.
func (rcv *Stage_Abridged) VernierThrustSeaLevel() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(46))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Total thrust of one of the vernier or additional engines at sea level in kN.
/// Example: /// Example: 4.1
/// Constraints: No constraints specified.
func (rcv *Stage_Abridged) MutateVernierThrustSeaLevel(n float64) bool {
	return rcv._tab.MutateFloat64Slot(46, n)
}

/// Total thrust of one of the vernier or additional engines in a vacuum in kN.
/// Example: /// Example: 3.2
/// Constraints: No constraints specified.
func (rcv *Stage_Abridged) VernierThrustVacuum() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(48))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Total thrust of one of the vernier or additional engines in a vacuum in kN.
/// Example: /// Example: 3.2
/// Constraints: No constraints specified.
func (rcv *Stage_Abridged) MutateVernierThrustVacuum(n float64) bool {
	return rcv._tab.MutateFloat64Slot(48, n)
}

/// Number of launch stage elements used in this stage.
/// Example: /// Example: 2
/// Constraints: No constraints specified.
func (rcv *Stage_Abridged) NumStageElements() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(50))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

/// Number of launch stage elements used in this stage.
/// Example: /// Example: 2
/// Constraints: No constraints specified.
func (rcv *Stage_Abridged) MutateNumStageElements(n int32) bool {
	return rcv._tab.MutateInt32Slot(50, n)
}

/// Boolean indicating if this launch stage is reusable.
/// Example: /// Example: True
/// Constraints: No constraints specified.
func (rcv *Stage_Abridged) Reusable() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(52))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

/// Boolean indicating if this launch stage is reusable.
/// Example: /// Example: True
/// Constraints: No constraints specified.
func (rcv *Stage_Abridged) MutateReusable(n bool) bool {
	return rcv._tab.MutateBoolSlot(52, n)
}

/// Boolean indicating if this launch stage can be restarted.
/// Example: /// Example: True
/// Constraints: No constraints specified.
func (rcv *Stage_Abridged) Restartable() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(54))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

/// Boolean indicating if this launch stage can be restarted.
/// Example: /// Example: True
/// Constraints: No constraints specified.
func (rcv *Stage_Abridged) MutateRestartable(n bool) bool {
	return rcv._tab.MutateBoolSlot(54, n)
}

/// Control thruster 1 type.
/// Example: /// Example: controlThruster1
/// Constraints: Minimum length = 0, Maximum length = 64
func (rcv *Stage_Abridged) ControlThruster1() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(56))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Control thruster 1 type.
/// Example: /// Example: controlThruster1
/// Constraints: Minimum length = 0, Maximum length = 64
/// Number of type control thruster 1.
/// Example: /// Example: 1
/// Constraints: No constraints specified.
func (rcv *Stage_Abridged) NumControlThruster1() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(58))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

/// Number of type control thruster 1.
/// Example: /// Example: 1
/// Constraints: No constraints specified.
func (rcv *Stage_Abridged) MutateNumControlThruster1(n int32) bool {
	return rcv._tab.MutateInt32Slot(58, n)
}

/// Control thruster 2 type.
/// Example: /// Example: controlThruster2
/// Constraints: Minimum length = 0, Maximum length = 64
func (rcv *Stage_Abridged) ControlThruster2() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(60))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Control thruster 2 type.
/// Example: /// Example: controlThruster2
/// Constraints: Minimum length = 0, Maximum length = 64
/// Number of type control thruster 2.
/// Example: /// Example: 1
/// Constraints: No constraints specified.
func (rcv *Stage_Abridged) NumControlThruster2() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(62))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

/// Number of type control thruster 2.
/// Example: /// Example: 1
/// Constraints: No constraints specified.
func (rcv *Stage_Abridged) MutateNumControlThruster2(n int32) bool {
	return rcv._tab.MutateInt32Slot(62, n)
}

/// Array of URLs of photos of the stage.
/// Example: /// Example: ['photoURL']
/// Constraints: No constraints specified.
func (rcv *Stage_Abridged) PhotoUrls(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(64))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *Stage_Abridged) PhotoUrlsLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(64))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

/// Array of URLs of photos of the stage.
/// Example: /// Example: ['photoURL']
/// Constraints: No constraints specified.
/// Description/notes of the stage.
/// Example: /// Example: Sample Notes
/// Constraints: Minimum length = 0, Maximum length = 256
func (rcv *Stage_Abridged) Notes() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(66))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Description/notes of the stage.
/// Example: /// Example: Sample Notes
/// Constraints: Minimum length = 0, Maximum length = 256
/// Description/notes of the stage avionics.
/// Example: /// Example: Sample Notes
/// Constraints: Minimum length = 0, Maximum length = 256
func (rcv *Stage_Abridged) AvionicsNotes() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(68))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Description/notes of the stage avionics.
/// Example: /// Example: Sample Notes
/// Constraints: Minimum length = 0, Maximum length = 256
/// Time the row was created in the database, auto-populated by the system.
/// Example: /// Example: 2018-01-01T16:00:00.123Z
/// Constraints: No constraints specified.
func (rcv *Stage_Abridged) CreatedAt() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(70))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Time the row was created in the database, auto-populated by the system.
/// Example: /// Example: 2018-01-01T16:00:00.123Z
/// Constraints: No constraints specified.
/// Application user who created the row in the database, auto-populated by the system.
/// Example: /// Example: some.user
/// Constraints: Minimum length = 1, Maximum length = 64
func (rcv *Stage_Abridged) CreatedBy() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(72))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Application user who created the row in the database, auto-populated by the system.
/// Example: /// Example: some.user
/// Constraints: Minimum length = 1, Maximum length = 64
/// Source of the data.
/// Example: /// Example: Bluestaq
/// Constraints: Minimum length = 1, Maximum length = 64
func (rcv *Stage_Abridged) Source() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(74))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Source of the data.
/// Example: /// Example: Bluestaq
/// Constraints: Minimum length = 1, Maximum length = 64
/// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
/// Example: /// Example: THIRD_PARTY_DATASOURCE
/// Constraints: Minimum length = 0, Maximum length = 64
func (rcv *Stage_Abridged) Origin() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(76))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
/// Example: /// Example: THIRD_PARTY_DATASOURCE
/// Constraints: Minimum length = 0, Maximum length = 64
/// The originating source network on which this record was created, auto-populated by the system.
/// Example: /// Example: ORIG
/// Constraints: Minimum length = 1, Maximum length = 32
func (rcv *Stage_Abridged) OrigNetwork() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(78))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The originating source network on which this record was created, auto-populated by the system.
/// Example: /// Example: ORIG
/// Constraints: Minimum length = 1, Maximum length = 32
/// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
/// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
/// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
/// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
/// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
/// Example: /// Example: TEST
/// Constraints: Minimum length = 1, Maximum length = 32
func (rcv *Stage_Abridged) DataMode() Stage_Abridged_dataMode_Enum {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(80))
	if o != 0 {
		return Stage_Abridged_dataMode_Enum(rcv._tab.GetInt8(o + rcv._tab.Pos))
	}
	return 0
}

/// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
/// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
/// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
/// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
/// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
/// Example: /// Example: TEST
/// Constraints: Minimum length = 1, Maximum length = 32
func (rcv *Stage_Abridged) MutateDataMode(n Stage_Abridged_dataMode_Enum) bool {
	return rcv._tab.MutateInt8Slot(80, int8(n))
}

func Stage_AbridgedStart(builder *flatbuffers.Builder) {
	builder.StartObject(39)
}
func Stage_AbridgedAddId(builder *flatbuffers.Builder, id flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(id), 0)
}
func Stage_AbridgedAddIdLaunchVehicle(builder *flatbuffers.Builder, idLaunchVehicle flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(idLaunchVehicle), 0)
}
func Stage_AbridgedAddIdEngine(builder *flatbuffers.Builder, idEngine flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(idEngine), 0)
}
func Stage_AbridgedAddClassificationMarking(builder *flatbuffers.Builder, classificationMarking flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(3, flatbuffers.UOffsetT(classificationMarking), 0)
}
func Stage_AbridgedAddStageNumber(builder *flatbuffers.Builder, stageNumber int32) {
	builder.PrependInt32Slot(4, stageNumber, 0)
}
func Stage_AbridgedAddType(builder *flatbuffers.Builder, type_ flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(5, flatbuffers.UOffsetT(type_), 0)
}
func Stage_AbridgedAddManufacturerOrgId(builder *flatbuffers.Builder, manufacturerOrgId flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(6, flatbuffers.UOffsetT(manufacturerOrgId), 0)
}
func Stage_AbridgedAddNumEngines(builder *flatbuffers.Builder, numEngines int32) {
	builder.PrependInt32Slot(7, numEngines, 0)
}
func Stage_AbridgedAddLength(builder *flatbuffers.Builder, length float64) {
	builder.PrependFloat64Slot(8, length, 0.0)
}
func Stage_AbridgedAddDiameter(builder *flatbuffers.Builder, diameter float64) {
	builder.PrependFloat64Slot(9, diameter, 0.0)
}
func Stage_AbridgedAddMass(builder *flatbuffers.Builder, mass float64) {
	builder.PrependFloat64Slot(10, mass, 0.0)
}
func Stage_AbridgedAddVernier(builder *flatbuffers.Builder, vernier flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(11, flatbuffers.UOffsetT(vernier), 0)
}
func Stage_AbridgedAddNumVernier(builder *flatbuffers.Builder, numVernier int32) {
	builder.PrependInt32Slot(12, numVernier, 0)
}
func Stage_AbridgedAddMainEngineThrustSeaLevel(builder *flatbuffers.Builder, mainEngineThrustSeaLevel float64) {
	builder.PrependFloat64Slot(13, mainEngineThrustSeaLevel, 0.0)
}
func Stage_AbridgedAddMainEngineThrustVacuum(builder *flatbuffers.Builder, mainEngineThrustVacuum float64) {
	builder.PrependFloat64Slot(14, mainEngineThrustVacuum, 0.0)
}
func Stage_AbridgedAddThrustSeaLevel(builder *flatbuffers.Builder, thrustSeaLevel float64) {
	builder.PrependFloat64Slot(15, thrustSeaLevel, 0.0)
}
func Stage_AbridgedAddThrustVacuum(builder *flatbuffers.Builder, thrustVacuum float64) {
	builder.PrependFloat64Slot(16, thrustVacuum, 0.0)
}
func Stage_AbridgedAddBurnTime(builder *flatbuffers.Builder, burnTime float64) {
	builder.PrependFloat64Slot(17, burnTime, 0.0)
}
func Stage_AbridgedAddNumBurns(builder *flatbuffers.Builder, numBurns int32) {
	builder.PrependInt32Slot(18, numBurns, 0)
}
func Stage_AbridgedAddVernierBurnTime(builder *flatbuffers.Builder, vernierBurnTime float64) {
	builder.PrependFloat64Slot(19, vernierBurnTime, 0.0)
}
func Stage_AbridgedAddVernierNumBurns(builder *flatbuffers.Builder, vernierNumBurns int32) {
	builder.PrependInt32Slot(20, vernierNumBurns, 0)
}
func Stage_AbridgedAddVernierThrustSeaLevel(builder *flatbuffers.Builder, vernierThrustSeaLevel float64) {
	builder.PrependFloat64Slot(21, vernierThrustSeaLevel, 0.0)
}
func Stage_AbridgedAddVernierThrustVacuum(builder *flatbuffers.Builder, vernierThrustVacuum float64) {
	builder.PrependFloat64Slot(22, vernierThrustVacuum, 0.0)
}
func Stage_AbridgedAddNumStageElements(builder *flatbuffers.Builder, numStageElements int32) {
	builder.PrependInt32Slot(23, numStageElements, 0)
}
func Stage_AbridgedAddReusable(builder *flatbuffers.Builder, reusable bool) {
	builder.PrependBoolSlot(24, reusable, false)
}
func Stage_AbridgedAddRestartable(builder *flatbuffers.Builder, restartable bool) {
	builder.PrependBoolSlot(25, restartable, false)
}
func Stage_AbridgedAddControlThruster1(builder *flatbuffers.Builder, controlThruster1 flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(26, flatbuffers.UOffsetT(controlThruster1), 0)
}
func Stage_AbridgedAddNumControlThruster1(builder *flatbuffers.Builder, numControlThruster1 int32) {
	builder.PrependInt32Slot(27, numControlThruster1, 0)
}
func Stage_AbridgedAddControlThruster2(builder *flatbuffers.Builder, controlThruster2 flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(28, flatbuffers.UOffsetT(controlThruster2), 0)
}
func Stage_AbridgedAddNumControlThruster2(builder *flatbuffers.Builder, numControlThruster2 int32) {
	builder.PrependInt32Slot(29, numControlThruster2, 0)
}
func Stage_AbridgedAddPhotoUrls(builder *flatbuffers.Builder, photoUrls flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(30, flatbuffers.UOffsetT(photoUrls), 0)
}
func Stage_AbridgedStartPhotoUrlsVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func Stage_AbridgedAddNotes(builder *flatbuffers.Builder, notes flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(31, flatbuffers.UOffsetT(notes), 0)
}
func Stage_AbridgedAddAvionicsNotes(builder *flatbuffers.Builder, avionicsNotes flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(32, flatbuffers.UOffsetT(avionicsNotes), 0)
}
func Stage_AbridgedAddCreatedAt(builder *flatbuffers.Builder, createdAt flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(33, flatbuffers.UOffsetT(createdAt), 0)
}
func Stage_AbridgedAddCreatedBy(builder *flatbuffers.Builder, createdBy flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(34, flatbuffers.UOffsetT(createdBy), 0)
}
func Stage_AbridgedAddSource(builder *flatbuffers.Builder, source flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(35, flatbuffers.UOffsetT(source), 0)
}
func Stage_AbridgedAddOrigin(builder *flatbuffers.Builder, origin flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(36, flatbuffers.UOffsetT(origin), 0)
}
func Stage_AbridgedAddOrigNetwork(builder *flatbuffers.Builder, origNetwork flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(37, flatbuffers.UOffsetT(origNetwork), 0)
}
func Stage_AbridgedAddDataMode(builder *flatbuffers.Builder, dataMode Stage_Abridged_dataMode_Enum) {
	builder.PrependInt8Slot(38, int8(dataMode), 0)
}
func Stage_AbridgedEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
