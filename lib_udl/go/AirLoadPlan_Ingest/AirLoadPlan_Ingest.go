// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package AirLoadPlan_Ingest

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

/// /// Information related to how an aircraft is loaded with cargo, equipment, and passengers.
type AirLoadPlan_Ingest struct {
	_tab flatbuffers.Table
}

const AirLoadPlan_IngestIdentifier = "AIRL"

func GetRootAsAirLoadPlan_Ingest(buf []byte, offset flatbuffers.UOffsetT) *AirLoadPlan_Ingest {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &AirLoadPlan_Ingest{}
	x.Init(buf, n+offset)
	return x
}

func FinishAirLoadPlan_IngestBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	identifierBytes := []byte(AirLoadPlan_IngestIdentifier)
	builder.FinishWithFileIdentifier(offset, identifierBytes)
}

func AirLoadPlan_IngestBufferHasIdentifier(buf []byte) bool {
	return flatbuffers.BufferHasIdentifier(buf, AirLoadPlan_IngestIdentifier)
}

func GetSizePrefixedRootAsAirLoadPlan_Ingest(buf []byte, offset flatbuffers.UOffsetT) *AirLoadPlan_Ingest {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &AirLoadPlan_Ingest{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedAirLoadPlan_IngestBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	identifierBytes := []byte(AirLoadPlan_IngestIdentifier)
	builder.FinishSizePrefixedWithFileIdentifier(offset, identifierBytes)
}

func SizePrefixedAirLoadPlan_IngestBufferHasIdentifier(buf []byte) bool {
	return flatbuffers.SizePrefixedBufferHasIdentifier(buf, AirLoadPlan_IngestIdentifier)
}

func (rcv *AirLoadPlan_Ingest) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *AirLoadPlan_Ingest) Table() flatbuffers.Table {
	return rcv._tab
}

/// Unique identifier of the record, auto-generated by the system.
/// Example: /// Example: 0457f578-e29c-312e-85aa-0a04a430bdd0
/// Constraints: Minimum length = 1, Maximum length = 36
func (rcv *AirLoadPlan_Ingest) Id() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Unique identifier of the record, auto-generated by the system.
/// Example: /// Example: 0457f578-e29c-312e-85aa-0a04a430bdd0
/// Constraints: Minimum length = 1, Maximum length = 36
/// Classification marking of the data in IC/CAPCO Portion-marked format.
/// Example: /// Example: U
/// Constraints: Minimum length = 1, Maximum length = 128
func (rcv *AirLoadPlan_Ingest) ClassificationMarking() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Classification marking of the data in IC/CAPCO Portion-marked format.
/// Example: /// Example: U
/// Constraints: Minimum length = 1, Maximum length = 128
/// Required ID from external systems. This field has no meaning within UDL and is provided as a convenience for systems that require tracking of an internal system generated ID.
/// Example: /// Example: dec7a61a-cd97-4af0-b7bc-f4c3bb33341b
/// Constraints: Minimum length = 1, Maximum length = 64
func (rcv *AirLoadPlan_Ingest) ExternalId() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Required ID from external systems. This field has no meaning within UDL and is provided as a convenience for systems that require tracking of an internal system generated ID.
/// Example: /// Example: dec7a61a-cd97-4af0-b7bc-f4c3bb33341b
/// Constraints: Minimum length = 1, Maximum length = 64
/// The UDL ID of the mission this record is associated with.
/// Example: /// Example: 412bebb6-a45e-029c-ca51-e29f8a442b12
/// Constraints: Minimum length = 0, Maximum length = 36
func (rcv *AirLoadPlan_Ingest) IdMission() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The UDL ID of the mission this record is associated with.
/// Example: /// Example: 412bebb6-a45e-029c-ca51-e29f8a442b12
/// Constraints: Minimum length = 0, Maximum length = 36
/// The mission number of the mission supporting this load plan.
/// Example: /// Example: AJM123456123
/// Constraints: Minimum length = 0, Maximum length = 16
func (rcv *AirLoadPlan_Ingest) MissionNumber() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The mission number of the mission supporting this load plan.
/// Example: /// Example: AJM123456123
/// Constraints: Minimum length = 0, Maximum length = 16
/// The UDL ID of the aircraft sortie this record is associated with.
/// Example: /// Example: 823acfbe6-f36a-157b-ef32-b47c9b589c3
/// Constraints: Minimum length = 0, Maximum length = 36
func (rcv *AirLoadPlan_Ingest) IdSortie() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The UDL ID of the aircraft sortie this record is associated with.
/// Example: /// Example: 823acfbe6-f36a-157b-ef32-b47c9b589c3
/// Constraints: Minimum length = 0, Maximum length = 36
/// The leg number of the mission supporting this load plan.
/// Example: /// Example: 200
/// Constraints: No constraints specified.
func (rcv *AirLoadPlan_Ingest) LegNum() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

/// The leg number of the mission supporting this load plan.
/// Example: /// Example: 200
/// Constraints: No constraints specified.
func (rcv *AirLoadPlan_Ingest) MutateLegNum(n int32) bool {
	return rcv._tab.MutateInt32Slot(16, n)
}

/// The call sign of the mission supporting this load plan.
/// Example: /// Example: RCH1234
/// Constraints: Minimum length = 0, Maximum length = 24
func (rcv *AirLoadPlan_Ingest) CallSign() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(18))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The call sign of the mission supporting this load plan.
/// Example: /// Example: RCH1234
/// Constraints: Minimum length = 0, Maximum length = 24
/// The tail number of the aircraft supporting this load plan.
/// Example: /// Example: 77187
/// Constraints: Minimum length = 0, Maximum length = 16
func (rcv *AirLoadPlan_Ingest) TailNumber() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(20))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The tail number of the aircraft supporting this load plan.
/// Example: /// Example: 77187
/// Constraints: Minimum length = 0, Maximum length = 16
/// The Model Design Series designation of the aircraft supporting this load plan.
/// Example: /// Example: C17A
/// Constraints: Minimum length = 1, Maximum length = 128
func (rcv *AirLoadPlan_Ingest) AircraftMds() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(22))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The Model Design Series designation of the aircraft supporting this load plan.
/// Example: /// Example: C17A
/// Constraints: Minimum length = 1, Maximum length = 128
/// The departure International Civil Organization (ICAO) code of the departure airfield.
/// Example: /// Example: KCHS
/// Constraints: Minimum length = 0, Maximum length = 4
func (rcv *AirLoadPlan_Ingest) DepIcao() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(24))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The departure International Civil Organization (ICAO) code of the departure airfield.
/// Example: /// Example: KCHS
/// Constraints: Minimum length = 0, Maximum length = 4
/// Optional identifier of departure airfield with no International Civil Organization (ICAO) code.
/// Example: /// Example: W99
/// Constraints: Minimum length = 0, Maximum length = 36
func (rcv *AirLoadPlan_Ingest) DepAirfield() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(26))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Optional identifier of departure airfield with no International Civil Organization (ICAO) code.
/// Example: /// Example: W99
/// Constraints: Minimum length = 0, Maximum length = 36
/// The current estimated time that the Aircraft is planned to depart, in ISO 8601 UTC format.
/// Example: /// Example: 2023-01-01T01:01:01.123Z
/// Constraints: No constraints specified.
func (rcv *AirLoadPlan_Ingest) EstDepTime() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(28))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The current estimated time that the Aircraft is planned to depart, in ISO 8601 UTC format.
/// Example: /// Example: 2023-01-01T01:01:01.123Z
/// Constraints: No constraints specified.
/// The arrival International Civil Organization (ICAO) code of the landing airfield.
/// Example: /// Example: ETAR
/// Constraints: Minimum length = 0, Maximum length = 4
func (rcv *AirLoadPlan_Ingest) ArrIcao() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(30))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The arrival International Civil Organization (ICAO) code of the landing airfield.
/// Example: /// Example: ETAR
/// Constraints: Minimum length = 0, Maximum length = 4
/// Optional identifier of arrival airfield with no International Civil Organization (ICAO) code.
/// Example: /// Example: W99
/// Constraints: Minimum length = 0, Maximum length = 36
func (rcv *AirLoadPlan_Ingest) ArrAirfield() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(32))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Optional identifier of arrival airfield with no International Civil Organization (ICAO) code.
/// Example: /// Example: W99
/// Constraints: Minimum length = 0, Maximum length = 36
/// The current estimated time that the Aircraft is planned to arrive, in ISO 8601 UTC format.
/// Example: /// Example: 2021-01-01T01:01:01.123Z
/// Constraints: No constraints specified.
func (rcv *AirLoadPlan_Ingest) EstArrTime() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(34))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The current estimated time that the Aircraft is planned to arrive, in ISO 8601 UTC format.
/// Example: /// Example: 2021-01-01T01:01:01.123Z
/// Constraints: No constraints specified.
/// The number of crew members on the aircraft.
/// Example: /// Example: 5
/// Constraints: No constraints specified.
func (rcv *AirLoadPlan_Ingest) CrewSize() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(36))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

/// The number of crew members on the aircraft.
/// Example: /// Example: 5
/// Constraints: No constraints specified.
func (rcv *AirLoadPlan_Ingest) MutateCrewSize(n int32) bool {
	return rcv._tab.MutateInt32Slot(36, n)
}

/// Description of the cargo configuration (e.g. C-1, C-2, C-3, DV-1, DV-2, AE-1, etc.). Configuration meanings are determined by the data source.
/// Example: /// Example: C-1
/// Constraints: Minimum length = 0, Maximum length = 128
func (rcv *AirLoadPlan_Ingest) CargoConfig() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(38))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Description of the cargo configuration (e.g. C-1, C-2, C-3, DV-1, DV-2, AE-1, etc.). Configuration meanings are determined by the data source.
/// Example: /// Example: C-1
/// Constraints: Minimum length = 0, Maximum length = 128
/// Description of the equipment configuration (e.g. Standard, Ferry, JBLM, CHS, Combat, etc.). Configuration meanings are determined by the data source.
/// Example: /// Example: Standard
/// Constraints: Minimum length = 0, Maximum length = 128
func (rcv *AirLoadPlan_Ingest) EquipConfig() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(40))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Description of the equipment configuration (e.g. Standard, Ferry, JBLM, CHS, Combat, etc.). Configuration meanings are determined by the data source.
/// Example: /// Example: Standard
/// Constraints: Minimum length = 0, Maximum length = 128
/// Description of the fuel tank(s) configuration (e.g. ER, NON-ER, etc.). Configuration meanings are determined by the data source.
/// Example: /// Example: ER
/// Constraints: Minimum length = 0, Maximum length = 128
func (rcv *AirLoadPlan_Ingest) TankConfig() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(42))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Description of the fuel tank(s) configuration (e.g. ER, NON-ER, etc.). Configuration meanings are determined by the data source.
/// Example: /// Example: ER
/// Constraints: Minimum length = 0, Maximum length = 128
/// The weight of the aircraft without passengers, cargo, equipment, or usable fuel, in kilograms.
/// Example: /// Example: 100.1
/// Constraints: No constraints specified.
func (rcv *AirLoadPlan_Ingest) BasicWeight() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(44))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// The weight of the aircraft without passengers, cargo, equipment, or usable fuel, in kilograms.
/// Example: /// Example: 100.1
/// Constraints: No constraints specified.
func (rcv *AirLoadPlan_Ingest) MutateBasicWeight(n float64) bool {
	return rcv._tab.MutateFloat64Slot(44, n)
}

/// The basic weight of the aircraft multiplied by the distance between the reference datum and the aircraft's center of gravity, in Newton-meters.
/// Example: /// Example: 2500.1
/// Constraints: No constraints specified.
func (rcv *AirLoadPlan_Ingest) BasicMoment() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(46))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// The basic weight of the aircraft multiplied by the distance between the reference datum and the aircraft's center of gravity, in Newton-meters.
/// Example: /// Example: 2500.1
/// Constraints: No constraints specified.
func (rcv *AirLoadPlan_Ingest) MutateBasicMoment(n float64) bool {
	return rcv._tab.MutateFloat64Slot(46, n)
}

/// The weight of usable fuel on board the aircraft, in kilograms.
/// Example: /// Example: 100.1
/// Constraints: No constraints specified.
func (rcv *AirLoadPlan_Ingest) FuelWeight() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(48))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// The weight of usable fuel on board the aircraft, in kilograms.
/// Example: /// Example: 100.1
/// Constraints: No constraints specified.
func (rcv *AirLoadPlan_Ingest) MutateFuelWeight(n float64) bool {
	return rcv._tab.MutateFloat64Slot(48, n)
}

/// The fuel weight on board the aircraft multiplied by the distance between the reference datum and the fuel's center of gravity, in Newton-meters.
/// Example: /// Example: 2500.1
/// Constraints: No constraints specified.
func (rcv *AirLoadPlan_Ingest) FuelMoment() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(50))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// The fuel weight on board the aircraft multiplied by the distance between the reference datum and the fuel's center of gravity, in Newton-meters.
/// Example: /// Example: 2500.1
/// Constraints: No constraints specified.
func (rcv *AirLoadPlan_Ingest) MutateFuelMoment(n float64) bool {
	return rcv._tab.MutateFloat64Slot(50, n)
}

/// The estimated weight of usable fuel upon landing, in kilograms.
/// Example: /// Example: 100.1
/// Constraints: No constraints specified.
func (rcv *AirLoadPlan_Ingest) EstLandingFuelWeight() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(52))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// The estimated weight of usable fuel upon landing, in kilograms.
/// Example: /// Example: 100.1
/// Constraints: No constraints specified.
func (rcv *AirLoadPlan_Ingest) MutateEstLandingFuelWeight(n float64) bool {
	return rcv._tab.MutateFloat64Slot(52, n)
}

/// The estimated weight of usable fuel upon landing multiplied by the distance between the reference datum and the fuel's center of gravity, in Newton-meters.
/// Example: /// Example: 2500.1
/// Constraints: No constraints specified.
func (rcv *AirLoadPlan_Ingest) EstLandingFuelMoment() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(54))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// The estimated weight of usable fuel upon landing multiplied by the distance between the reference datum and the fuel's center of gravity, in Newton-meters.
/// Example: /// Example: 2500.1
/// Constraints: No constraints specified.
func (rcv *AirLoadPlan_Ingest) MutateEstLandingFuelMoment(n float64) bool {
	return rcv._tab.MutateFloat64Slot(54, n)
}

/// The basic weight of the aircraft including passengers and equipment, in kilograms.
/// Example: /// Example: 100.1
/// Constraints: No constraints specified.
func (rcv *AirLoadPlan_Ingest) OperatingWeight() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(56))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// The basic weight of the aircraft including passengers and equipment, in kilograms.
/// Example: /// Example: 100.1
/// Constraints: No constraints specified.
func (rcv *AirLoadPlan_Ingest) MutateOperatingWeight(n float64) bool {
	return rcv._tab.MutateFloat64Slot(56, n)
}

/// The operating weight of the aircraft multiplied by the distance between the reference datum and the aircraft's center of gravity, in Newton-meters.
/// Example: /// Example: 2500.1
/// Constraints: No constraints specified.
func (rcv *AirLoadPlan_Ingest) OperatingMoment() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(58))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// The operating weight of the aircraft multiplied by the distance between the reference datum and the aircraft's center of gravity, in Newton-meters.
/// Example: /// Example: 2500.1
/// Constraints: No constraints specified.
func (rcv *AirLoadPlan_Ingest) MutateOperatingMoment(n float64) bool {
	return rcv._tab.MutateFloat64Slot(58, n)
}

/// The weight of the cargo on board the aircraft, in kilograms.
/// Example: /// Example: 100.1
/// Constraints: No constraints specified.
func (rcv *AirLoadPlan_Ingest) CargoWeight() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(60))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// The weight of the cargo on board the aircraft, in kilograms.
/// Example: /// Example: 100.1
/// Constraints: No constraints specified.
func (rcv *AirLoadPlan_Ingest) MutateCargoWeight(n float64) bool {
	return rcv._tab.MutateFloat64Slot(60, n)
}

/// The sum of cargo moments of all cargo on board the aircraft, in Newton-meters. Each individual cargo moment is the weight of the cargo multiplied by the distance between the reference datum and the cargo's center of gravity.
/// Example: /// Example: 2500.1
/// Constraints: No constraints specified.
func (rcv *AirLoadPlan_Ingest) CargoMoment() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(62))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// The sum of cargo moments of all cargo on board the aircraft, in Newton-meters. Each individual cargo moment is the weight of the cargo multiplied by the distance between the reference datum and the cargo's center of gravity.
/// Example: /// Example: 2500.1
/// Constraints: No constraints specified.
func (rcv *AirLoadPlan_Ingest) MutateCargoMoment(n float64) bool {
	return rcv._tab.MutateFloat64Slot(62, n)
}

/// The operating weight of the aircraft including cargo but without usable fuel, in kilograms.
/// Example: /// Example: 100.1
/// Constraints: No constraints specified.
func (rcv *AirLoadPlan_Ingest) ZeroFuelWeight() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(64))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// The operating weight of the aircraft including cargo but without usable fuel, in kilograms.
/// Example: /// Example: 100.1
/// Constraints: No constraints specified.
func (rcv *AirLoadPlan_Ingest) MutateZeroFuelWeight(n float64) bool {
	return rcv._tab.MutateFloat64Slot(64, n)
}

/// The zero fuel weight of the aircraft multiplied by the distance between the reference datum and the aircraft's center of gravity, in Newton-meters.
/// Example: /// Example: 2500.1
/// Constraints: No constraints specified.
func (rcv *AirLoadPlan_Ingest) ZeroFuelMoment() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(66))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// The zero fuel weight of the aircraft multiplied by the distance between the reference datum and the aircraft's center of gravity, in Newton-meters.
/// Example: /// Example: 2500.1
/// Constraints: No constraints specified.
func (rcv *AirLoadPlan_Ingest) MutateZeroFuelMoment(n float64) bool {
	return rcv._tab.MutateFloat64Slot(66, n)
}

/// The center of gravity of the aircraft using the zero fuel weight and zero fuel total moment, as a percentage of the mean aerodynamic chord (%MAC).
/// Example: /// Example: 39.5
/// Constraints: No constraints specified.
func (rcv *AirLoadPlan_Ingest) ZeroFuelCg() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(68))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// The center of gravity of the aircraft using the zero fuel weight and zero fuel total moment, as a percentage of the mean aerodynamic chord (%MAC).
/// Example: /// Example: 39.5
/// Constraints: No constraints specified.
func (rcv *AirLoadPlan_Ingest) MutateZeroFuelCg(n float64) bool {
	return rcv._tab.MutateFloat64Slot(68, n)
}

/// The total weight of the aircraft at takeoff including passengers, cargo, equipment, and usable fuel, in kilograms.
/// Example: /// Example: 100.1
/// Constraints: No constraints specified.
func (rcv *AirLoadPlan_Ingest) GrossWeight() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(70))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// The total weight of the aircraft at takeoff including passengers, cargo, equipment, and usable fuel, in kilograms.
/// Example: /// Example: 100.1
/// Constraints: No constraints specified.
func (rcv *AirLoadPlan_Ingest) MutateGrossWeight(n float64) bool {
	return rcv._tab.MutateFloat64Slot(70, n)
}

/// The sum of moments of all items making up the gross weight of the aircraft, in Newton-meters.
/// Example: /// Example: 2500.1
/// Constraints: No constraints specified.
func (rcv *AirLoadPlan_Ingest) GrossMoment() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(72))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// The sum of moments of all items making up the gross weight of the aircraft, in Newton-meters.
/// Example: /// Example: 2500.1
/// Constraints: No constraints specified.
func (rcv *AirLoadPlan_Ingest) MutateGrossMoment(n float64) bool {
	return rcv._tab.MutateFloat64Slot(72, n)
}

/// The center of gravity of the aircraft using the gross weight and gross moment, as a percentage of the mean aerodynamic chord (%MAC).
/// Example: /// Example: 38.8
/// Constraints: No constraints specified.
func (rcv *AirLoadPlan_Ingest) GrossCg() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(74))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// The center of gravity of the aircraft using the gross weight and gross moment, as a percentage of the mean aerodynamic chord (%MAC).
/// Example: /// Example: 38.8
/// Constraints: No constraints specified.
func (rcv *AirLoadPlan_Ingest) MutateGrossCg(n float64) bool {
	return rcv._tab.MutateFloat64Slot(74, n)
}

/// The gross weight of the aircraft upon landing, in kilograms.
/// Example: /// Example: 100.1
/// Constraints: No constraints specified.
func (rcv *AirLoadPlan_Ingest) LandingWeight() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(76))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// The gross weight of the aircraft upon landing, in kilograms.
/// Example: /// Example: 100.1
/// Constraints: No constraints specified.
func (rcv *AirLoadPlan_Ingest) MutateLandingWeight(n float64) bool {
	return rcv._tab.MutateFloat64Slot(76, n)
}

/// The sum of moments of all items making up the gross weight of the aircraft upon landing, in Newton-meters.
/// Example: /// Example: 2500.1
/// Constraints: No constraints specified.
func (rcv *AirLoadPlan_Ingest) LandingMoment() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(78))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// The sum of moments of all items making up the gross weight of the aircraft upon landing, in Newton-meters.
/// Example: /// Example: 2500.1
/// Constraints: No constraints specified.
func (rcv *AirLoadPlan_Ingest) MutateLandingMoment(n float64) bool {
	return rcv._tab.MutateFloat64Slot(78, n)
}

/// The center of gravity of the aircraft using the landing weight and landing moment, as a percentage of the mean aerodynamic chord (%MAC).
/// Example: /// Example: 38.2
/// Constraints: No constraints specified.
func (rcv *AirLoadPlan_Ingest) LandingCg() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(80))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// The center of gravity of the aircraft using the landing weight and landing moment, as a percentage of the mean aerodynamic chord (%MAC).
/// Example: /// Example: 38.2
/// Constraints: No constraints specified.
func (rcv *AirLoadPlan_Ingest) MutateLandingCg(n float64) bool {
	return rcv._tab.MutateFloat64Slot(80, n)
}

/// Minimum fuselage station (FS) where cargo can be stored. FS is the distance from the reference datum, in meters.
/// Example: /// Example: 10
/// Constraints: No constraints specified.
func (rcv *AirLoadPlan_Ingest) CargoBayFsmin() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(82))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

/// Minimum fuselage station (FS) where cargo can be stored. FS is the distance from the reference datum, in meters.
/// Example: /// Example: 10
/// Constraints: No constraints specified.
func (rcv *AirLoadPlan_Ingest) MutateCargoBayFsmin(n int32) bool {
	return rcv._tab.MutateInt32Slot(82, n)
}

/// Maximum fuselage station (FS) where cargo can be stored. FS is the distance from the reference datum, in meters.
/// Example: /// Example: 20
/// Constraints: No constraints specified.
func (rcv *AirLoadPlan_Ingest) CargoBayFsmax() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(84))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

/// Maximum fuselage station (FS) where cargo can be stored. FS is the distance from the reference datum, in meters.
/// Example: /// Example: 20
/// Constraints: No constraints specified.
func (rcv *AirLoadPlan_Ingest) MutateCargoBayFsmax(n int32) bool {
	return rcv._tab.MutateInt32Slot(84, n)
}

/// Width of the cargo bay, in meters.
/// Example: /// Example: 3.1
/// Constraints: No constraints specified.
func (rcv *AirLoadPlan_Ingest) CargoBayWidth() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(86))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Width of the cargo bay, in meters.
/// Example: /// Example: 3.1
/// Constraints: No constraints specified.
func (rcv *AirLoadPlan_Ingest) MutateCargoBayWidth(n float64) bool {
	return rcv._tab.MutateFloat64Slot(86, n)
}

/// Time the row was created in the database, auto-populated by the system.
/// Example: /// Example: 2023-03-21T16:00:00.123Z
/// Constraints: No constraints specified.
func (rcv *AirLoadPlan_Ingest) CreatedAt() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(88))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Time the row was created in the database, auto-populated by the system.
/// Example: /// Example: 2023-03-21T16:00:00.123Z
/// Constraints: No constraints specified.
/// Application user who created the row in the database, auto-populated by the system.
/// Example: /// Example: some.user
/// Constraints: Minimum length = 1, Maximum length = 64
func (rcv *AirLoadPlan_Ingest) CreatedBy() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(90))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Application user who created the row in the database, auto-populated by the system.
/// Example: /// Example: some.user
/// Constraints: Minimum length = 1, Maximum length = 64
/// The source data library from which this record was received. This could be a remote or tactical UDL or another data library. If null, the record should be assumed to have originated from the primary Enterprise UDL.
/// Example: /// Example: AXE
/// Constraints: Minimum length = 0, Maximum length = 64
func (rcv *AirLoadPlan_Ingest) SourceDl() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(92))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The source data library from which this record was received. This could be a remote or tactical UDL or another data library. If null, the record should be assumed to have originated from the primary Enterprise UDL.
/// Example: /// Example: AXE
/// Constraints: Minimum length = 0, Maximum length = 64
/// Source of the data.
/// Example: /// Example: source
/// Constraints: Minimum length = 1, Maximum length = 64
func (rcv *AirLoadPlan_Ingest) Source() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(94))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Source of the data.
/// Example: /// Example: source
/// Constraints: Minimum length = 1, Maximum length = 64
/// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
/// Example: /// Example: THIRD_PARTY_DATASOURCE
/// Constraints: Minimum length = 0, Maximum length = 64
func (rcv *AirLoadPlan_Ingest) Origin() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(96))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
/// Example: /// Example: THIRD_PARTY_DATASOURCE
/// Constraints: Minimum length = 0, Maximum length = 64
/// The originating source network on which this record was created, auto-populated by the system.
/// Example: /// Example: ORIG
/// Constraints: Minimum length = 0, Maximum length = 32
func (rcv *AirLoadPlan_Ingest) OrigNetwork() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(98))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The originating source network on which this record was created, auto-populated by the system.
/// Example: /// Example: ORIG
/// Constraints: Minimum length = 0, Maximum length = 32
/// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
/// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
/// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
/// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
/// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
/// Example: /// Example: TEST
/// Constraints: Minimum length = 1, Maximum length = 32
func (rcv *AirLoadPlan_Ingest) DataMode() AirLoadPlan_Ingest_dataMode_Enum {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(100))
	if o != 0 {
		return AirLoadPlan_Ingest_dataMode_Enum(rcv._tab.GetInt8(o + rcv._tab.Pos))
	}
	return 0
}

/// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
/// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
/// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
/// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
/// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
/// Example: /// Example: TEST
/// Constraints: Minimum length = 1, Maximum length = 32
func (rcv *AirLoadPlan_Ingest) MutateDataMode(n AirLoadPlan_Ingest_dataMode_Enum) bool {
	return rcv._tab.MutateInt8Slot(100, int8(n))
}

func AirLoadPlan_IngestStart(builder *flatbuffers.Builder) {
	builder.StartObject(49)
}
func AirLoadPlan_IngestAddId(builder *flatbuffers.Builder, id flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(id), 0)
}
func AirLoadPlan_IngestAddClassificationMarking(builder *flatbuffers.Builder, classificationMarking flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(classificationMarking), 0)
}
func AirLoadPlan_IngestAddExternalId(builder *flatbuffers.Builder, externalId flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(externalId), 0)
}
func AirLoadPlan_IngestAddIdMission(builder *flatbuffers.Builder, idMission flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(3, flatbuffers.UOffsetT(idMission), 0)
}
func AirLoadPlan_IngestAddMissionNumber(builder *flatbuffers.Builder, missionNumber flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(4, flatbuffers.UOffsetT(missionNumber), 0)
}
func AirLoadPlan_IngestAddIdSortie(builder *flatbuffers.Builder, idSortie flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(5, flatbuffers.UOffsetT(idSortie), 0)
}
func AirLoadPlan_IngestAddLegNum(builder *flatbuffers.Builder, legNum int32) {
	builder.PrependInt32Slot(6, legNum, 0)
}
func AirLoadPlan_IngestAddCallSign(builder *flatbuffers.Builder, callSign flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(7, flatbuffers.UOffsetT(callSign), 0)
}
func AirLoadPlan_IngestAddTailNumber(builder *flatbuffers.Builder, tailNumber flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(8, flatbuffers.UOffsetT(tailNumber), 0)
}
func AirLoadPlan_IngestAddAircraftMds(builder *flatbuffers.Builder, aircraftMds flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(9, flatbuffers.UOffsetT(aircraftMds), 0)
}
func AirLoadPlan_IngestAddDepIcao(builder *flatbuffers.Builder, depIcao flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(10, flatbuffers.UOffsetT(depIcao), 0)
}
func AirLoadPlan_IngestAddDepAirfield(builder *flatbuffers.Builder, depAirfield flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(11, flatbuffers.UOffsetT(depAirfield), 0)
}
func AirLoadPlan_IngestAddEstDepTime(builder *flatbuffers.Builder, estDepTime flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(12, flatbuffers.UOffsetT(estDepTime), 0)
}
func AirLoadPlan_IngestAddArrIcao(builder *flatbuffers.Builder, arrIcao flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(13, flatbuffers.UOffsetT(arrIcao), 0)
}
func AirLoadPlan_IngestAddArrAirfield(builder *flatbuffers.Builder, arrAirfield flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(14, flatbuffers.UOffsetT(arrAirfield), 0)
}
func AirLoadPlan_IngestAddEstArrTime(builder *flatbuffers.Builder, estArrTime flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(15, flatbuffers.UOffsetT(estArrTime), 0)
}
func AirLoadPlan_IngestAddCrewSize(builder *flatbuffers.Builder, crewSize int32) {
	builder.PrependInt32Slot(16, crewSize, 0)
}
func AirLoadPlan_IngestAddCargoConfig(builder *flatbuffers.Builder, cargoConfig flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(17, flatbuffers.UOffsetT(cargoConfig), 0)
}
func AirLoadPlan_IngestAddEquipConfig(builder *flatbuffers.Builder, equipConfig flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(18, flatbuffers.UOffsetT(equipConfig), 0)
}
func AirLoadPlan_IngestAddTankConfig(builder *flatbuffers.Builder, tankConfig flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(19, flatbuffers.UOffsetT(tankConfig), 0)
}
func AirLoadPlan_IngestAddBasicWeight(builder *flatbuffers.Builder, basicWeight float64) {
	builder.PrependFloat64Slot(20, basicWeight, 0.0)
}
func AirLoadPlan_IngestAddBasicMoment(builder *flatbuffers.Builder, basicMoment float64) {
	builder.PrependFloat64Slot(21, basicMoment, 0.0)
}
func AirLoadPlan_IngestAddFuelWeight(builder *flatbuffers.Builder, fuelWeight float64) {
	builder.PrependFloat64Slot(22, fuelWeight, 0.0)
}
func AirLoadPlan_IngestAddFuelMoment(builder *flatbuffers.Builder, fuelMoment float64) {
	builder.PrependFloat64Slot(23, fuelMoment, 0.0)
}
func AirLoadPlan_IngestAddEstLandingFuelWeight(builder *flatbuffers.Builder, estLandingFuelWeight float64) {
	builder.PrependFloat64Slot(24, estLandingFuelWeight, 0.0)
}
func AirLoadPlan_IngestAddEstLandingFuelMoment(builder *flatbuffers.Builder, estLandingFuelMoment float64) {
	builder.PrependFloat64Slot(25, estLandingFuelMoment, 0.0)
}
func AirLoadPlan_IngestAddOperatingWeight(builder *flatbuffers.Builder, operatingWeight float64) {
	builder.PrependFloat64Slot(26, operatingWeight, 0.0)
}
func AirLoadPlan_IngestAddOperatingMoment(builder *flatbuffers.Builder, operatingMoment float64) {
	builder.PrependFloat64Slot(27, operatingMoment, 0.0)
}
func AirLoadPlan_IngestAddCargoWeight(builder *flatbuffers.Builder, cargoWeight float64) {
	builder.PrependFloat64Slot(28, cargoWeight, 0.0)
}
func AirLoadPlan_IngestAddCargoMoment(builder *flatbuffers.Builder, cargoMoment float64) {
	builder.PrependFloat64Slot(29, cargoMoment, 0.0)
}
func AirLoadPlan_IngestAddZeroFuelWeight(builder *flatbuffers.Builder, zeroFuelWeight float64) {
	builder.PrependFloat64Slot(30, zeroFuelWeight, 0.0)
}
func AirLoadPlan_IngestAddZeroFuelMoment(builder *flatbuffers.Builder, zeroFuelMoment float64) {
	builder.PrependFloat64Slot(31, zeroFuelMoment, 0.0)
}
func AirLoadPlan_IngestAddZeroFuelCg(builder *flatbuffers.Builder, zeroFuelCg float64) {
	builder.PrependFloat64Slot(32, zeroFuelCg, 0.0)
}
func AirLoadPlan_IngestAddGrossWeight(builder *flatbuffers.Builder, grossWeight float64) {
	builder.PrependFloat64Slot(33, grossWeight, 0.0)
}
func AirLoadPlan_IngestAddGrossMoment(builder *flatbuffers.Builder, grossMoment float64) {
	builder.PrependFloat64Slot(34, grossMoment, 0.0)
}
func AirLoadPlan_IngestAddGrossCg(builder *flatbuffers.Builder, grossCg float64) {
	builder.PrependFloat64Slot(35, grossCg, 0.0)
}
func AirLoadPlan_IngestAddLandingWeight(builder *flatbuffers.Builder, landingWeight float64) {
	builder.PrependFloat64Slot(36, landingWeight, 0.0)
}
func AirLoadPlan_IngestAddLandingMoment(builder *flatbuffers.Builder, landingMoment float64) {
	builder.PrependFloat64Slot(37, landingMoment, 0.0)
}
func AirLoadPlan_IngestAddLandingCg(builder *flatbuffers.Builder, landingCg float64) {
	builder.PrependFloat64Slot(38, landingCg, 0.0)
}
func AirLoadPlan_IngestAddCargoBayFsmin(builder *flatbuffers.Builder, cargoBayFsmin int32) {
	builder.PrependInt32Slot(39, cargoBayFsmin, 0)
}
func AirLoadPlan_IngestAddCargoBayFsmax(builder *flatbuffers.Builder, cargoBayFsmax int32) {
	builder.PrependInt32Slot(40, cargoBayFsmax, 0)
}
func AirLoadPlan_IngestAddCargoBayWidth(builder *flatbuffers.Builder, cargoBayWidth float64) {
	builder.PrependFloat64Slot(41, cargoBayWidth, 0.0)
}
func AirLoadPlan_IngestAddCreatedAt(builder *flatbuffers.Builder, createdAt flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(42, flatbuffers.UOffsetT(createdAt), 0)
}
func AirLoadPlan_IngestAddCreatedBy(builder *flatbuffers.Builder, createdBy flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(43, flatbuffers.UOffsetT(createdBy), 0)
}
func AirLoadPlan_IngestAddSourceDl(builder *flatbuffers.Builder, sourceDl flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(44, flatbuffers.UOffsetT(sourceDl), 0)
}
func AirLoadPlan_IngestAddSource(builder *flatbuffers.Builder, source flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(45, flatbuffers.UOffsetT(source), 0)
}
func AirLoadPlan_IngestAddOrigin(builder *flatbuffers.Builder, origin flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(46, flatbuffers.UOffsetT(origin), 0)
}
func AirLoadPlan_IngestAddOrigNetwork(builder *flatbuffers.Builder, origNetwork flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(47, flatbuffers.UOffsetT(origNetwork), 0)
}
func AirLoadPlan_IngestAddDataMode(builder *flatbuffers.Builder, dataMode AirLoadPlan_Ingest_dataMode_Enum) {
	builder.PrependInt8Slot(48, int8(dataMode), 0)
}
func AirLoadPlan_IngestEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
