// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package Status

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

/// /// Status for a particular Entity. An entity may have multiple status records collected by various sources.
type Status struct {
	_tab flatbuffers.Table
}

const StatusIdentifier = "STAT"

func GetRootAsStatus(buf []byte, offset flatbuffers.UOffsetT) *Status {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &Status{}
	x.Init(buf, n+offset)
	return x
}

func FinishStatusBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	identifierBytes := []byte(StatusIdentifier)
	builder.FinishWithFileIdentifier(offset, identifierBytes)
}

func StatusBufferHasIdentifier(buf []byte) bool {
	return flatbuffers.BufferHasIdentifier(buf, StatusIdentifier)
}

func GetSizePrefixedRootAsStatus(buf []byte, offset flatbuffers.UOffsetT) *Status {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &Status{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedStatusBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	identifierBytes := []byte(StatusIdentifier)
	builder.FinishSizePrefixedWithFileIdentifier(offset, identifierBytes)
}

func SizePrefixedStatusBufferHasIdentifier(buf []byte) bool {
	return flatbuffers.SizePrefixedBufferHasIdentifier(buf, StatusIdentifier)
}

func (rcv *Status) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *Status) Table() flatbuffers.Table {
	return rcv._tab
}

/// Unique identifier of the record, auto-generated by the system.
/// Example: /// Example: STATUS-ID
/// Constraints: Minimum length = 1, Maximum length = 36
func (rcv *Status) Id() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Unique identifier of the record, auto-generated by the system.
/// Example: /// Example: STATUS-ID
/// Constraints: Minimum length = 1, Maximum length = 36
/// Classification marking of the data in IC/CAPCO Portion-marked format.
/// Example: /// Example: U
/// Constraints: Minimum length = 1, Maximum length = 128
func (rcv *Status) ClassificationMarking() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Classification marking of the data in IC/CAPCO Portion-marked format.
/// Example: /// Example: U
/// Constraints: Minimum length = 1, Maximum length = 128
/// The sources or SCG references from which the classification of this data is derived.
/// Example: /// Example: SOME_SOURCE
/// Constraints: Minimum length = 0, Maximum length = 128
func (rcv *Status) DerivedFrom() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The sources or SCG references from which the classification of this data is derived.
/// Example: /// Example: SOME_SOURCE
/// Constraints: Minimum length = 0, Maximum length = 128
/// The declassification date of this data, in ISO 8601 UTC format.
/// Example: /// Example: 2021-01-01T01:02:02.123Z
/// Constraints: No constraints specified.
func (rcv *Status) DeclassificationDate() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The declassification date of this data, in ISO 8601 UTC format.
/// Example: /// Example: 2021-01-01T01:02:02.123Z
/// Constraints: No constraints specified.
/// Declassification string of this data.
/// Example: /// Example: U
/// Constraints: Minimum length = 0, Maximum length = 256
func (rcv *Status) DeclassificationString() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Declassification string of this data.
/// Example: /// Example: U
/// Constraints: Minimum length = 0, Maximum length = 256
/// Unique identifier of the parent entity.
/// Example: /// Example: ENTITY-ID
/// Constraints: Minimum length = 1, Maximum length = 36
func (rcv *Status) IdEntity() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Unique identifier of the parent entity.
/// Example: /// Example: ENTITY-ID
/// Constraints: Minimum length = 1, Maximum length = 36
/// Overall state of the entity, if applicable (e.g. UNKNOWN, DEAD, ACTIVE, RF ACTIVE, STANDBY).
/// Example: /// Example: ACTIVE
/// Constraints: Minimum length = 0, Maximum length = 16
func (rcv *Status) State() Status_state_Enum {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		return Status_state_Enum(rcv._tab.GetInt8(o + rcv._tab.Pos))
	}
	return 0
}

/// Overall state of the entity, if applicable (e.g. UNKNOWN, DEAD, ACTIVE, RF ACTIVE, STANDBY).
/// Example: /// Example: ACTIVE
/// Constraints: Minimum length = 0, Maximum length = 16
func (rcv *Status) MutateState(n Status_state_Enum) bool {
	return rcv._tab.MutateInt8Slot(16, int8(n))
}

/// System capability of the entity, if applicable (e.g. FMC, NMC, PMC, UNK).
/// Example: /// Example: FMC
/// Constraints: Minimum length = 0, Maximum length = 3
func (rcv *Status) SysCap() Status_sysCap_Enum {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(18))
	if o != 0 {
		return Status_sysCap_Enum(rcv._tab.GetInt8(o + rcv._tab.Pos))
	}
	return 0
}

/// System capability of the entity, if applicable (e.g. FMC, NMC, PMC, UNK).
/// Example: /// Example: FMC
/// Constraints: Minimum length = 0, Maximum length = 3
func (rcv *Status) MutateSysCap(n Status_sysCap_Enum) bool {
	return rcv._tab.MutateInt8Slot(18, int8(n))
}

/// Operation capability of the entity, if applicable (e.g. FMC, NMC, PMC, UNK).
/// Example: /// Example: FMC
/// Constraints: Minimum length = 0, Maximum length = 3
func (rcv *Status) OpsCap() Status_opsCap_Enum {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(20))
	if o != 0 {
		return Status_opsCap_Enum(rcv._tab.GetInt8(o + rcv._tab.Pos))
	}
	return 0
}

/// Operation capability of the entity, if applicable (e.g. FMC, NMC, PMC, UNK).
/// Example: /// Example: FMC
/// Constraints: Minimum length = 0, Maximum length = 3
func (rcv *Status) MutateOpsCap(n Status_opsCap_Enum) bool {
	return rcv._tab.MutateInt8Slot(20, int8(n))
}

/// Source of the data.
/// Example: /// Example: Bluestaq
/// Constraints: Minimum length = 1, Maximum length = 64
func (rcv *Status) Source() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(22))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Source of the data.
/// Example: /// Example: Bluestaq
/// Constraints: Minimum length = 1, Maximum length = 64
/// No description provided.
/// Example: /// Example: No example provided.
/// Constraints: No constraints specified.
func (rcv *Status) SubStatusCollection(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(24))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *Status) SubStatusCollectionLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(24))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

/// No description provided.
/// Example: /// Example: No example provided.
/// Constraints: No constraints specified.
/// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
/// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
/// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
/// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
/// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
/// Example: /// Example: TEST
/// Constraints: Minimum length = 1, Maximum length = 32
func (rcv *Status) DataMode() Status_dataMode_Enum {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(26))
	if o != 0 {
		return Status_dataMode_Enum(rcv._tab.GetInt8(o + rcv._tab.Pos))
	}
	return 0
}

/// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
/// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
/// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
/// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
/// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
/// Example: /// Example: TEST
/// Constraints: Minimum length = 1, Maximum length = 32
func (rcv *Status) MutateDataMode(n Status_dataMode_Enum) bool {
	return rcv._tab.MutateInt8Slot(26, int8(n))
}

/// Comments describing the status creation and or updates to an entity.
/// Example: /// Example: Example Notes
/// Constraints: No constraints specified.
func (rcv *Status) Notes() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(28))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Comments describing the status creation and or updates to an entity.
/// Example: /// Example: Example Notes
/// Constraints: No constraints specified.
/// Time the row was created in the database, auto-populated by the system.
/// Example: /// Example: 2018-01-01T16:00:00.123Z
/// Constraints: No constraints specified.
func (rcv *Status) CreatedAt() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(30))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Time the row was created in the database, auto-populated by the system.
/// Example: /// Example: 2018-01-01T16:00:00.123Z
/// Constraints: No constraints specified.
/// Application user who created the row in the database, auto-populated by the system.
/// Example: /// Example: some.user
/// Constraints: Minimum length = 1, Maximum length = 64
func (rcv *Status) CreatedBy() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(32))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Application user who created the row in the database, auto-populated by the system.
/// Example: /// Example: some.user
/// Constraints: Minimum length = 1, Maximum length = 64
/// Time the row was last updated in the database, auto-populated by the system.
/// Example: /// Example: 2018-01-01T16:00:00.123Z
/// Constraints: No constraints specified.
func (rcv *Status) UpdatedAt() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(34))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Time the row was last updated in the database, auto-populated by the system.
/// Example: /// Example: 2018-01-01T16:00:00.123Z
/// Constraints: No constraints specified.
/// Application user who updated the row in the database, auto-populated by the system.
/// Example: /// Example: some.user
/// Constraints: Minimum length = 0, Maximum length = 64
func (rcv *Status) UpdatedBy() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(36))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Application user who updated the row in the database, auto-populated by the system.
/// Example: /// Example: some.user
/// Constraints: Minimum length = 0, Maximum length = 64
/// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
/// Example: /// Example: THIRD_PARTY_DATASOURCE
/// Constraints: Minimum length = 0, Maximum length = 64
func (rcv *Status) Origin() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(38))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
/// Example: /// Example: THIRD_PARTY_DATASOURCE
/// Constraints: Minimum length = 0, Maximum length = 64
/// The originating source network on which this record was created, auto-populated by the system.
/// Example: /// Example: TST1
/// Constraints: Minimum length = 1, Maximum length = 32
func (rcv *Status) OrigNetwork() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(40))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The originating source network on which this record was created, auto-populated by the system.
/// Example: /// Example: TST1
/// Constraints: Minimum length = 1, Maximum length = 32
func StatusStart(builder *flatbuffers.Builder) {
	builder.StartObject(19)
}
func StatusAddId(builder *flatbuffers.Builder, id flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(id), 0)
}
func StatusAddClassificationMarking(builder *flatbuffers.Builder, classificationMarking flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(classificationMarking), 0)
}
func StatusAddDerivedFrom(builder *flatbuffers.Builder, derivedFrom flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(derivedFrom), 0)
}
func StatusAddDeclassificationDate(builder *flatbuffers.Builder, declassificationDate flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(3, flatbuffers.UOffsetT(declassificationDate), 0)
}
func StatusAddDeclassificationString(builder *flatbuffers.Builder, declassificationString flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(4, flatbuffers.UOffsetT(declassificationString), 0)
}
func StatusAddIdEntity(builder *flatbuffers.Builder, idEntity flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(5, flatbuffers.UOffsetT(idEntity), 0)
}
func StatusAddState(builder *flatbuffers.Builder, state Status_state_Enum) {
	builder.PrependInt8Slot(6, int8(state), 0)
}
func StatusAddSysCap(builder *flatbuffers.Builder, sysCap Status_sysCap_Enum) {
	builder.PrependInt8Slot(7, int8(sysCap), 0)
}
func StatusAddOpsCap(builder *flatbuffers.Builder, opsCap Status_opsCap_Enum) {
	builder.PrependInt8Slot(8, int8(opsCap), 0)
}
func StatusAddSource(builder *flatbuffers.Builder, source flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(9, flatbuffers.UOffsetT(source), 0)
}
func StatusAddSubStatusCollection(builder *flatbuffers.Builder, subStatusCollection flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(10, flatbuffers.UOffsetT(subStatusCollection), 0)
}
func StatusStartSubStatusCollectionVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func StatusAddDataMode(builder *flatbuffers.Builder, dataMode Status_dataMode_Enum) {
	builder.PrependInt8Slot(11, int8(dataMode), 0)
}
func StatusAddNotes(builder *flatbuffers.Builder, notes flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(12, flatbuffers.UOffsetT(notes), 0)
}
func StatusAddCreatedAt(builder *flatbuffers.Builder, createdAt flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(13, flatbuffers.UOffsetT(createdAt), 0)
}
func StatusAddCreatedBy(builder *flatbuffers.Builder, createdBy flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(14, flatbuffers.UOffsetT(createdBy), 0)
}
func StatusAddUpdatedAt(builder *flatbuffers.Builder, updatedAt flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(15, flatbuffers.UOffsetT(updatedAt), 0)
}
func StatusAddUpdatedBy(builder *flatbuffers.Builder, updatedBy flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(16, flatbuffers.UOffsetT(updatedBy), 0)
}
func StatusAddOrigin(builder *flatbuffers.Builder, origin flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(17, flatbuffers.UOffsetT(origin), 0)
}
func StatusAddOrigNetwork(builder *flatbuffers.Builder, origNetwork flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(18, flatbuffers.UOffsetT(origNetwork), 0)
}
func StatusEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
