// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package Transponder_Ingest

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

/// /// A transponder receives and transmits radio signals at a prescribed frequency range. A communications satellite's transponder is the series of interconnected units that form a communications channel between the receiving and the transmitting antennas. It is mainly used in satellite communication to transfer the received signals.
type Transponder_Ingest struct {
	_tab flatbuffers.Table
}

const Transponder_IngestIdentifier = "TRAN"

func GetRootAsTransponder_Ingest(buf []byte, offset flatbuffers.UOffsetT) *Transponder_Ingest {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &Transponder_Ingest{}
	x.Init(buf, n+offset)
	return x
}

func FinishTransponder_IngestBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	identifierBytes := []byte(Transponder_IngestIdentifier)
	builder.FinishWithFileIdentifier(offset, identifierBytes)
}

func Transponder_IngestBufferHasIdentifier(buf []byte) bool {
	return flatbuffers.BufferHasIdentifier(buf, Transponder_IngestIdentifier)
}

func GetSizePrefixedRootAsTransponder_Ingest(buf []byte, offset flatbuffers.UOffsetT) *Transponder_Ingest {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &Transponder_Ingest{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedTransponder_IngestBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	identifierBytes := []byte(Transponder_IngestIdentifier)
	builder.FinishSizePrefixedWithFileIdentifier(offset, identifierBytes)
}

func SizePrefixedTransponder_IngestBufferHasIdentifier(buf []byte) bool {
	return flatbuffers.SizePrefixedBufferHasIdentifier(buf, Transponder_IngestIdentifier)
}

func (rcv *Transponder_Ingest) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *Transponder_Ingest) Table() flatbuffers.Table {
	return rcv._tab
}

/// Unique identifier of the record, auto-generated by the system.
/// Example: /// Example: TRANSPONDER-ID
/// Constraints: Minimum length = 1, Maximum length = 36
func (rcv *Transponder_Ingest) Id() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Unique identifier of the record, auto-generated by the system.
/// Example: /// Example: TRANSPONDER-ID
/// Constraints: Minimum length = 1, Maximum length = 36
/// ID of the parent Comm object for this transponder.
/// Example: /// Example: REF-COMM-ID
/// Constraints: Minimum length = 1, Maximum length = 36
func (rcv *Transponder_Ingest) IdComm() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// ID of the parent Comm object for this transponder.
/// Example: /// Example: REF-COMM-ID
/// Constraints: Minimum length = 1, Maximum length = 36
/// Optional name of the transponder.
/// Example: /// Example: AA10
/// Constraints: Minimum length = 0, Maximum length = 128
func (rcv *Transponder_Ingest) Name() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Optional name of the transponder.
/// Example: /// Example: AA10
/// Constraints: Minimum length = 0, Maximum length = 128
/// Classification marking of the data in IC/CAPCO Portion-marked format.
/// Example: /// Example: U
/// Constraints: Minimum length = 1, Maximum length = 128
func (rcv *Transponder_Ingest) ClassificationMarking() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Classification marking of the data in IC/CAPCO Portion-marked format.
/// Example: /// Example: U
/// Constraints: Minimum length = 1, Maximum length = 128
/// Optional external network id as provided data source.
/// Example: /// Example: N-ID
/// Constraints: Minimum length = 0, Maximum length = 36
func (rcv *Transponder_Ingest) Nid() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Optional external network id as provided data source.
/// Example: /// Example: N-ID
/// Constraints: Minimum length = 0, Maximum length = 36
/// Optional external transponder id as provided data source.
/// Example: /// Example: T-ID
/// Constraints: Minimum length = 0, Maximum length = 36
func (rcv *Transponder_Ingest) Tid() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Optional external transponder id as provided data source.
/// Example: /// Example: T-ID
/// Constraints: Minimum length = 0, Maximum length = 36
/// Transponder Translation Factor. This is the frequency difference between the uplink received by a satellite, and the downlink transmitted back. It varies satellite to satellite dependent on the mission.
/// Example: /// Example: 1.53261520047876
/// Constraints: No constraints specified.
func (rcv *Transponder_Ingest) Ttf() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Transponder Translation Factor. This is the frequency difference between the uplink received by a satellite, and the downlink transmitted back. It varies satellite to satellite dependent on the mission.
/// Example: /// Example: 1.53261520047876
/// Constraints: No constraints specified.
func (rcv *Transponder_Ingest) MutateTtf(n float64) bool {
	return rcv._tab.MutateFloat64Slot(16, n)
}

/// Symbol rate is the number of symbol changes, waveform changes, or signaling events, across the transmission medium per time unit using a digitally modulated signal or a line code. Also measured in Hz.
/// Example: /// Example: 4.0
/// Constraints: No constraints specified.
func (rcv *Transponder_Ingest) SymbolRate() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(18))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Symbol rate is the number of symbol changes, waveform changes, or signaling events, across the transmission medium per time unit using a digitally modulated signal or a line code. Also measured in Hz.
/// Example: /// Example: 4.0
/// Constraints: No constraints specified.
func (rcv *Transponder_Ingest) MutateSymbolRate(n float64) bool {
	return rcv._tab.MutateFloat64Slot(18, n)
}

/// Forward error correction, e.g. 0=Auto, 1 = 1/2, 2 = 2/3, 3 = 3/4, 4 = 5/6, 5 = 7/8, 6 = 8/9, 7 = 3/5, 8 = 4/5, 9 = 9/10, 15 = None.
/// Example: /// Example: 0
/// Constraints: No constraints specified.
func (rcv *Transponder_Ingest) Fec() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(20))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

/// Forward error correction, e.g. 0=Auto, 1 = 1/2, 2 = 2/3, 3 = 3/4, 4 = 5/6, 5 = 7/8, 6 = 8/9, 7 = 3/5, 8 = 4/5, 9 = 9/10, 15 = None.
/// Example: /// Example: 0
/// Constraints: No constraints specified.
func (rcv *Transponder_Ingest) MutateFec(n int32) bool {
	return rcv._tab.MutateInt32Slot(20, n)
}

/// Transponder modulation, e.g. Auto, QPSK, 8PSK.
/// Example: /// Example: Auto
/// Constraints: Minimum length = 0, Maximum length = 10
func (rcv *Transponder_Ingest) Modulation() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(22))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Transponder modulation, e.g. Auto, QPSK, 8PSK.
/// Example: /// Example: Auto
/// Constraints: Minimum length = 0, Maximum length = 10
/// Format.
/// Example: /// Example: format
/// Constraints: Minimum length = 0, Maximum length = 45
func (rcv *Transponder_Ingest) Format() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(24))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Format.
/// Example: /// Example: format
/// Constraints: Minimum length = 0, Maximum length = 45
/// Transponder system, e.g. DVB-S, DVB-S2.
/// Example: /// Example: DVB-S
/// Constraints: Minimum length = 0, Maximum length = 45
func (rcv *Transponder_Ingest) System() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(26))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Transponder system, e.g. DVB-S, DVB-S2.
/// Example: /// Example: DVB-S
/// Constraints: Minimum length = 0, Maximum length = 45
/// Source of the data.
/// Example: /// Example: Bluestaq
/// Constraints: Minimum length = 1, Maximum length = 64
func (rcv *Transponder_Ingest) Source() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(28))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Source of the data.
/// Example: /// Example: Bluestaq
/// Constraints: Minimum length = 1, Maximum length = 64
/// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
/// Example: /// Example: THIRD_PARTY_DATASOURCE
/// Constraints: Minimum length = 0, Maximum length = 64
func (rcv *Transponder_Ingest) Origin() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(30))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
/// Example: /// Example: THIRD_PARTY_DATASOURCE
/// Constraints: Minimum length = 0, Maximum length = 64
/// The originating source network on which this record was created, auto-populated by the system.
/// Example: /// Example: ORIG
/// Constraints: Minimum length = 1, Maximum length = 32
func (rcv *Transponder_Ingest) OrigNetwork() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(32))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The originating source network on which this record was created, auto-populated by the system.
/// Example: /// Example: ORIG
/// Constraints: Minimum length = 1, Maximum length = 32
/// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
/// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
/// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
/// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
/// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
/// Example: /// Example: TEST
/// Constraints: Minimum length = 1, Maximum length = 32
func (rcv *Transponder_Ingest) DataMode() Transponder_Ingest_dataMode_Enum {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(34))
	if o != 0 {
		return Transponder_Ingest_dataMode_Enum(rcv._tab.GetInt8(o + rcv._tab.Pos))
	}
	return 0
}

/// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
/// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
/// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
/// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
/// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
/// Example: /// Example: TEST
/// Constraints: Minimum length = 1, Maximum length = 32
func (rcv *Transponder_Ingest) MutateDataMode(n Transponder_Ingest_dataMode_Enum) bool {
	return rcv._tab.MutateInt8Slot(34, int8(n))
}

/// Time the row was created in the database, auto-populated by the system.
/// Example: /// Example: 2018-01-01T16:00:00.123Z
/// Constraints: No constraints specified.
func (rcv *Transponder_Ingest) CreatedAt() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(36))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Time the row was created in the database, auto-populated by the system.
/// Example: /// Example: 2018-01-01T16:00:00.123Z
/// Constraints: No constraints specified.
/// Application user who created the row in the database, auto-populated by the system.
/// Example: /// Example: some.user
/// Constraints: Minimum length = 1, Maximum length = 64
func (rcv *Transponder_Ingest) CreatedBy() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(38))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Application user who created the row in the database, auto-populated by the system.
/// Example: /// Example: some.user
/// Constraints: Minimum length = 1, Maximum length = 64
func Transponder_IngestStart(builder *flatbuffers.Builder) {
	builder.StartObject(18)
}
func Transponder_IngestAddId(builder *flatbuffers.Builder, id flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(id), 0)
}
func Transponder_IngestAddIdComm(builder *flatbuffers.Builder, idComm flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(idComm), 0)
}
func Transponder_IngestAddName(builder *flatbuffers.Builder, name flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(name), 0)
}
func Transponder_IngestAddClassificationMarking(builder *flatbuffers.Builder, classificationMarking flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(3, flatbuffers.UOffsetT(classificationMarking), 0)
}
func Transponder_IngestAddNid(builder *flatbuffers.Builder, nid flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(4, flatbuffers.UOffsetT(nid), 0)
}
func Transponder_IngestAddTid(builder *flatbuffers.Builder, tid flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(5, flatbuffers.UOffsetT(tid), 0)
}
func Transponder_IngestAddTtf(builder *flatbuffers.Builder, ttf float64) {
	builder.PrependFloat64Slot(6, ttf, 0.0)
}
func Transponder_IngestAddSymbolRate(builder *flatbuffers.Builder, symbolRate float64) {
	builder.PrependFloat64Slot(7, symbolRate, 0.0)
}
func Transponder_IngestAddFec(builder *flatbuffers.Builder, fec int32) {
	builder.PrependInt32Slot(8, fec, 0)
}
func Transponder_IngestAddModulation(builder *flatbuffers.Builder, modulation flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(9, flatbuffers.UOffsetT(modulation), 0)
}
func Transponder_IngestAddFormat(builder *flatbuffers.Builder, format flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(10, flatbuffers.UOffsetT(format), 0)
}
func Transponder_IngestAddSystem(builder *flatbuffers.Builder, system flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(11, flatbuffers.UOffsetT(system), 0)
}
func Transponder_IngestAddSource(builder *flatbuffers.Builder, source flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(12, flatbuffers.UOffsetT(source), 0)
}
func Transponder_IngestAddOrigin(builder *flatbuffers.Builder, origin flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(13, flatbuffers.UOffsetT(origin), 0)
}
func Transponder_IngestAddOrigNetwork(builder *flatbuffers.Builder, origNetwork flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(14, flatbuffers.UOffsetT(origNetwork), 0)
}
func Transponder_IngestAddDataMode(builder *flatbuffers.Builder, dataMode Transponder_Ingest_dataMode_Enum) {
	builder.PrependInt8Slot(15, int8(dataMode), 0)
}
func Transponder_IngestAddCreatedAt(builder *flatbuffers.Builder, createdAt flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(16, flatbuffers.UOffsetT(createdAt), 0)
}
func Transponder_IngestAddCreatedBy(builder *flatbuffers.Builder, createdBy flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(17, flatbuffers.UOffsetT(createdBy), 0)
}
func Transponder_IngestEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
