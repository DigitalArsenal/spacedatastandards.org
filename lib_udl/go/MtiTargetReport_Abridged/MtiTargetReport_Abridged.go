// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package MtiTargetReport_Abridged

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

/// /// A grouping of zero or more target reports for which the sensor provides a single time, sensor position, reference position on the ground with simple estimates for the observed area at the reported time, and other pertinent data.
type MtiTargetReport_Abridged struct {
	_tab flatbuffers.Table
}

const MtiTargetReport_AbridgedIdentifier = "MTIT"

func GetRootAsMtiTargetReport_Abridged(buf []byte, offset flatbuffers.UOffsetT) *MtiTargetReport_Abridged {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &MtiTargetReport_Abridged{}
	x.Init(buf, n+offset)
	return x
}

func FinishMtiTargetReport_AbridgedBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	identifierBytes := []byte(MtiTargetReport_AbridgedIdentifier)
	builder.FinishWithFileIdentifier(offset, identifierBytes)
}

func MtiTargetReport_AbridgedBufferHasIdentifier(buf []byte) bool {
	return flatbuffers.BufferHasIdentifier(buf, MtiTargetReport_AbridgedIdentifier)
}

func GetSizePrefixedRootAsMtiTargetReport_Abridged(buf []byte, offset flatbuffers.UOffsetT) *MtiTargetReport_Abridged {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &MtiTargetReport_Abridged{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedMtiTargetReport_AbridgedBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	identifierBytes := []byte(MtiTargetReport_AbridgedIdentifier)
	builder.FinishSizePrefixedWithFileIdentifier(offset, identifierBytes)
}

func SizePrefixedMtiTargetReport_AbridgedBufferHasIdentifier(buf []byte) bool {
	return flatbuffers.SizePrefixedBufferHasIdentifier(buf, MtiTargetReport_AbridgedIdentifier)
}

func (rcv *MtiTargetReport_Abridged) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *MtiTargetReport_Abridged) Table() flatbuffers.Table {
	return rcv._tab
}

/// Sequential count of this MTI report within the dwell.
/// Example: /// Example: 2
/// Constraints: No constraints specified.
func (rcv *MtiTargetReport_Abridged) D321() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

/// Sequential count of this MTI report within the dwell.
/// Example: /// Example: 2
/// Constraints: No constraints specified.
func (rcv *MtiTargetReport_Abridged) MutateD321(n int32) bool {
	return rcv._tab.MutateInt32Slot(4, n)
}

/// The North-South position of the reported detection, expressed as degrees North (positive) or South (negative) of the Equator.
/// Example: /// Example: 20.23
/// Constraints: No constraints specified.
func (rcv *MtiTargetReport_Abridged) D322() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// The North-South position of the reported detection, expressed as degrees North (positive) or South (negative) of the Equator.
/// Example: /// Example: 20.23
/// Constraints: No constraints specified.
func (rcv *MtiTargetReport_Abridged) MutateD322(n float64) bool {
	return rcv._tab.MutateFloat64Slot(6, n)
}

/// The East-West position of the reported detection, expressed as degrees East (positive) from the Prime Meridian.
/// Example: /// Example: 20.23
/// Constraints: No constraints specified.
func (rcv *MtiTargetReport_Abridged) D323() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// The East-West position of the reported detection, expressed as degrees East (positive) from the Prime Meridian.
/// Example: /// Example: 20.23
/// Constraints: No constraints specified.
func (rcv *MtiTargetReport_Abridged) MutateD323(n float64) bool {
	return rcv._tab.MutateFloat64Slot(8, n)
}

/// The North-South position of the reported detection, expressed as degrees North (positive) or South (negative) from the Dwell Area Center Latitude.
/// Example: /// Example: 2
/// Constraints: No constraints specified.
func (rcv *MtiTargetReport_Abridged) D324() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

/// The North-South position of the reported detection, expressed as degrees North (positive) or South (negative) from the Dwell Area Center Latitude.
/// Example: /// Example: 2
/// Constraints: No constraints specified.
func (rcv *MtiTargetReport_Abridged) MutateD324(n int32) bool {
	return rcv._tab.MutateInt32Slot(10, n)
}

/// The East-West position of the reported detection, expressed as degrees East (positive, 0 to 180) or West (negative, 0 to -180) of the Prime Meridian from the Dwell Area Center Longitude.
/// Example: /// Example: 2
/// Constraints: No constraints specified.
func (rcv *MtiTargetReport_Abridged) D325() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

/// The East-West position of the reported detection, expressed as degrees East (positive, 0 to 180) or West (negative, 0 to -180) of the Prime Meridian from the Dwell Area Center Longitude.
/// Example: /// Example: 2
/// Constraints: No constraints specified.
func (rcv *MtiTargetReport_Abridged) MutateD325(n int32) bool {
	return rcv._tab.MutateInt32Slot(12, n)
}

/// Height of the reported detection, referenced to its position above the WGS 84 ellipsoid, in meters.
/// Example: /// Example: 2
/// Constraints: No constraints specified.
func (rcv *MtiTargetReport_Abridged) D326() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

/// Height of the reported detection, referenced to its position above the WGS 84 ellipsoid, in meters.
/// Example: /// Example: 2
/// Constraints: No constraints specified.
func (rcv *MtiTargetReport_Abridged) MutateD326(n int32) bool {
	return rcv._tab.MutateInt32Slot(14, n)
}

/// The component of velocity for the reported detection, expressed in centimeters per second, corrected for platform motion, along the line of sight between the sensor and the reported detection, where the positive direction is away from the sensor.
/// Example: /// Example: 2
/// Constraints: No constraints specified.
func (rcv *MtiTargetReport_Abridged) D327() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

/// The component of velocity for the reported detection, expressed in centimeters per second, corrected for platform motion, along the line of sight between the sensor and the reported detection, where the positive direction is away from the sensor.
/// Example: /// Example: 2
/// Constraints: No constraints specified.
func (rcv *MtiTargetReport_Abridged) MutateD327(n int32) bool {
	return rcv._tab.MutateInt32Slot(16, n)
}

/// The target wrap velocity permits trackers to un-wrap velocities for targets with line-of-sight components large enough to exceed the first velocity period.  Expressed in centimeters/sec.
/// Example: /// Example: 2
/// Constraints: No constraints specified.
func (rcv *MtiTargetReport_Abridged) D328() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(18))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

/// The target wrap velocity permits trackers to un-wrap velocities for targets with line-of-sight components large enough to exceed the first velocity period.  Expressed in centimeters/sec.
/// Example: /// Example: 2
/// Constraints: No constraints specified.
func (rcv *MtiTargetReport_Abridged) MutateD328(n int32) bool {
	return rcv._tab.MutateInt32Slot(18, n)
}

/// Estimated signal-to-noise ratio (SNR) of the target return, in decibels.
/// Example: /// Example: 17
/// Constraints: No constraints specified.
func (rcv *MtiTargetReport_Abridged) D329() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(20))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

/// Estimated signal-to-noise ratio (SNR) of the target return, in decibels.
/// Example: /// Example: 17
/// Constraints: No constraints specified.
func (rcv *MtiTargetReport_Abridged) MutateD329(n int32) bool {
	return rcv._tab.MutateInt32Slot(20, n)
}

/// The classification of the target (i.e. vehicle, aircraft, …).
/// Example: /// Example: vehicle
/// Constraints: Minimum length = 0, Maximum length = 32
func (rcv *MtiTargetReport_Abridged) D3210() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(22))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The classification of the target (i.e. vehicle, aircraft, …).
/// Example: /// Example: vehicle
/// Constraints: Minimum length = 0, Maximum length = 32
/// Estimated probability that the target classification field is correctly classified.
/// Example: /// Example: 90
/// Constraints: No constraints specified.
func (rcv *MtiTargetReport_Abridged) D3211() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(24))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

/// Estimated probability that the target classification field is correctly classified.
/// Example: /// Example: 90
/// Constraints: No constraints specified.
func (rcv *MtiTargetReport_Abridged) MutateD3211(n int32) bool {
	return rcv._tab.MutateInt32Slot(24, n)
}

/// Standard deviation of the estimated slant range of the reported detection, in centimeters.
/// Example: /// Example: 2
/// Constraints: No constraints specified.
func (rcv *MtiTargetReport_Abridged) D3212() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(26))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

/// Standard deviation of the estimated slant range of the reported detection, in centimeters.
/// Example: /// Example: 2
/// Constraints: No constraints specified.
func (rcv *MtiTargetReport_Abridged) MutateD3212(n int32) bool {
	return rcv._tab.MutateInt32Slot(26, n)
}

/// Standard deviation of the position estimate, in the cross-range direction, of the reported detection, in decimeters.
/// Example: /// Example: 2
/// Constraints: No constraints specified.
func (rcv *MtiTargetReport_Abridged) D3213() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(28))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

/// Standard deviation of the position estimate, in the cross-range direction, of the reported detection, in decimeters.
/// Example: /// Example: 2
/// Constraints: No constraints specified.
func (rcv *MtiTargetReport_Abridged) MutateD3213(n int32) bool {
	return rcv._tab.MutateInt32Slot(28, n)
}

/// Standard deviation of the estimated geodetic height, in meters.
/// Example: /// Example: 2
/// Constraints: No constraints specified.
func (rcv *MtiTargetReport_Abridged) D3214() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(30))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

/// Standard deviation of the estimated geodetic height, in meters.
/// Example: /// Example: 2
/// Constraints: No constraints specified.
func (rcv *MtiTargetReport_Abridged) MutateD3214(n int32) bool {
	return rcv._tab.MutateInt32Slot(30, n)
}

/// Standard deviation of the measured line-of-sight velocity component, in centimeters per second.
/// Example: /// Example: 2
/// Constraints: No constraints specified.
func (rcv *MtiTargetReport_Abridged) D3215() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(32))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

/// Standard deviation of the measured line-of-sight velocity component, in centimeters per second.
/// Example: /// Example: 2
/// Constraints: No constraints specified.
func (rcv *MtiTargetReport_Abridged) MutateD3215(n int32) bool {
	return rcv._tab.MutateInt32Slot(32, n)
}

/// The Truth Tag- Application is the Application Field truncated to 8 bits, from the Entity State Protocol Data Unit (PDU) used to generate the MTI Target.
/// Example: /// Example: 2
/// Constraints: No constraints specified.
func (rcv *MtiTargetReport_Abridged) D3216() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(34))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

/// The Truth Tag- Application is the Application Field truncated to 8 bits, from the Entity State Protocol Data Unit (PDU) used to generate the MTI Target.
/// Example: /// Example: 2
/// Constraints: No constraints specified.
func (rcv *MtiTargetReport_Abridged) MutateD3216(n int32) bool {
	return rcv._tab.MutateInt32Slot(34, n)
}

/// The Truth Tag - Entity is the Entity Field from the Entity State PDU used to generate the MTI Target.
/// Example: /// Example: 1234567890
/// Constraints: No constraints specified.
func (rcv *MtiTargetReport_Abridged) D3217() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(36))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

/// The Truth Tag - Entity is the Entity Field from the Entity State PDU used to generate the MTI Target.
/// Example: /// Example: 1234567890
/// Constraints: No constraints specified.
func (rcv *MtiTargetReport_Abridged) MutateD3217(n int64) bool {
	return rcv._tab.MutateInt64Slot(36, n)
}

/// Estimated radar cross section of the target return, in half-decibels.
/// Example: /// Example: 98
/// Constraints: No constraints specified.
func (rcv *MtiTargetReport_Abridged) D3218() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(38))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

/// Estimated radar cross section of the target return, in half-decibels.
/// Example: /// Example: 98
/// Constraints: No constraints specified.
func (rcv *MtiTargetReport_Abridged) MutateD3218(n int32) bool {
	return rcv._tab.MutateInt32Slot(38, n)
}

func MtiTargetReport_AbridgedStart(builder *flatbuffers.Builder) {
	builder.StartObject(18)
}
func MtiTargetReport_AbridgedAddD321(builder *flatbuffers.Builder, d321 int32) {
	builder.PrependInt32Slot(0, d321, 0)
}
func MtiTargetReport_AbridgedAddD322(builder *flatbuffers.Builder, d322 float64) {
	builder.PrependFloat64Slot(1, d322, 0.0)
}
func MtiTargetReport_AbridgedAddD323(builder *flatbuffers.Builder, d323 float64) {
	builder.PrependFloat64Slot(2, d323, 0.0)
}
func MtiTargetReport_AbridgedAddD324(builder *flatbuffers.Builder, d324 int32) {
	builder.PrependInt32Slot(3, d324, 0)
}
func MtiTargetReport_AbridgedAddD325(builder *flatbuffers.Builder, d325 int32) {
	builder.PrependInt32Slot(4, d325, 0)
}
func MtiTargetReport_AbridgedAddD326(builder *flatbuffers.Builder, d326 int32) {
	builder.PrependInt32Slot(5, d326, 0)
}
func MtiTargetReport_AbridgedAddD327(builder *flatbuffers.Builder, d327 int32) {
	builder.PrependInt32Slot(6, d327, 0)
}
func MtiTargetReport_AbridgedAddD328(builder *flatbuffers.Builder, d328 int32) {
	builder.PrependInt32Slot(7, d328, 0)
}
func MtiTargetReport_AbridgedAddD329(builder *flatbuffers.Builder, d329 int32) {
	builder.PrependInt32Slot(8, d329, 0)
}
func MtiTargetReport_AbridgedAddD3210(builder *flatbuffers.Builder, d3210 flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(9, flatbuffers.UOffsetT(d3210), 0)
}
func MtiTargetReport_AbridgedAddD3211(builder *flatbuffers.Builder, d3211 int32) {
	builder.PrependInt32Slot(10, d3211, 0)
}
func MtiTargetReport_AbridgedAddD3212(builder *flatbuffers.Builder, d3212 int32) {
	builder.PrependInt32Slot(11, d3212, 0)
}
func MtiTargetReport_AbridgedAddD3213(builder *flatbuffers.Builder, d3213 int32) {
	builder.PrependInt32Slot(12, d3213, 0)
}
func MtiTargetReport_AbridgedAddD3214(builder *flatbuffers.Builder, d3214 int32) {
	builder.PrependInt32Slot(13, d3214, 0)
}
func MtiTargetReport_AbridgedAddD3215(builder *flatbuffers.Builder, d3215 int32) {
	builder.PrependInt32Slot(14, d3215, 0)
}
func MtiTargetReport_AbridgedAddD3216(builder *flatbuffers.Builder, d3216 int32) {
	builder.PrependInt32Slot(15, d3216, 0)
}
func MtiTargetReport_AbridgedAddD3217(builder *flatbuffers.Builder, d3217 int64) {
	builder.PrependInt64Slot(16, d3217, 0)
}
func MtiTargetReport_AbridgedAddD3218(builder *flatbuffers.Builder, d3218 int32) {
	builder.PrependInt32Slot(17, d3218, 0)
}
func MtiTargetReport_AbridgedEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
