// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package Sensorlimits_Abridged

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

/// /// Sensorlimits define 0 to many limits of a particular sensor in terms of observation coverage of on-orbit objects.
type Sensorlimits_Abridged struct {
	_tab flatbuffers.Table
}

const Sensorlimits_AbridgedIdentifier = "SENS"

func GetRootAsSensorlimits_Abridged(buf []byte, offset flatbuffers.UOffsetT) *Sensorlimits_Abridged {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &Sensorlimits_Abridged{}
	x.Init(buf, n+offset)
	return x
}

func FinishSensorlimits_AbridgedBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	identifierBytes := []byte(Sensorlimits_AbridgedIdentifier)
	builder.FinishWithFileIdentifier(offset, identifierBytes)
}

func Sensorlimits_AbridgedBufferHasIdentifier(buf []byte) bool {
	return flatbuffers.BufferHasIdentifier(buf, Sensorlimits_AbridgedIdentifier)
}

func GetSizePrefixedRootAsSensorlimits_Abridged(buf []byte, offset flatbuffers.UOffsetT) *Sensorlimits_Abridged {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &Sensorlimits_Abridged{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedSensorlimits_AbridgedBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	identifierBytes := []byte(Sensorlimits_AbridgedIdentifier)
	builder.FinishSizePrefixedWithFileIdentifier(offset, identifierBytes)
}

func SizePrefixedSensorlimits_AbridgedBufferHasIdentifier(buf []byte) bool {
	return flatbuffers.SizePrefixedBufferHasIdentifier(buf, Sensorlimits_AbridgedIdentifier)
}

func (rcv *Sensorlimits_Abridged) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *Sensorlimits_Abridged) Table() flatbuffers.Table {
	return rcv._tab
}

/// Unique identifier of the record, auto-generated by the system.
/// Example: /// Example: SENSORLIMITS-ID
/// Constraints: Minimum length = 1, Maximum length = 36
func (rcv *Sensorlimits_Abridged) IdSensorLimits() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Unique identifier of the record, auto-generated by the system.
/// Example: /// Example: SENSORLIMITS-ID
/// Constraints: Minimum length = 1, Maximum length = 36
/// Classification marking of the data in IC/CAPCO Portion-marked format.
/// Example: /// Example: U
/// Constraints: Minimum length = 1, Maximum length = 128
func (rcv *Sensorlimits_Abridged) ClassificationMarking() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Classification marking of the data in IC/CAPCO Portion-marked format.
/// Example: /// Example: U
/// Constraints: Minimum length = 1, Maximum length = 128
/// The originating source network on which this record was created, auto-populated by the system.
/// Example: /// Example: ORIG
/// Constraints: Minimum length = 1, Maximum length = 32
func (rcv *Sensorlimits_Abridged) OrigNetwork() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The originating source network on which this record was created, auto-populated by the system.
/// Example: /// Example: ORIG
/// Constraints: Minimum length = 1, Maximum length = 32
/// Leftmost or minimum upper azimuth within this sensor limit. Interpreted according to site types as beginning upper azimuth limit, left-hand upper boundary limit. If the limit rectangle is parallel to the horizon, the upper and lower left azimuth limits would be equal. (in degrees).
/// Example: /// Example: 1.23
/// Constraints: No constraints specified.
func (rcv *Sensorlimits_Abridged) UpperLeftAzimuthLimit() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Leftmost or minimum upper azimuth within this sensor limit. Interpreted according to site types as beginning upper azimuth limit, left-hand upper boundary limit. If the limit rectangle is parallel to the horizon, the upper and lower left azimuth limits would be equal. (in degrees).
/// Example: /// Example: 1.23
/// Constraints: No constraints specified.
func (rcv *Sensorlimits_Abridged) MutateUpperLeftAzimuthLimit(n float64) bool {
	return rcv._tab.MutateFloat64Slot(10, n)
}

/// Rightmost or maximum upper azimuth within this limit. Interpreted according to site types as 2nd azimuth limit elevation angle of axis of conical observation pattern. If the limit rectangle is parallel to the horizon, the upper and lower right azimuth limits would be equal. (degrees).
/// Example: /// Example: 1.23
/// Constraints: No constraints specified.
func (rcv *Sensorlimits_Abridged) UpperRightAzimuthLimit() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Rightmost or maximum upper azimuth within this limit. Interpreted according to site types as 2nd azimuth limit elevation angle of axis of conical observation pattern. If the limit rectangle is parallel to the horizon, the upper and lower right azimuth limits would be equal. (degrees).
/// Example: /// Example: 1.23
/// Constraints: No constraints specified.
func (rcv *Sensorlimits_Abridged) MutateUpperRightAzimuthLimit(n float64) bool {
	return rcv._tab.MutateFloat64Slot(12, n)
}

/// Rightmost or maximum lower azimuth within this limit. Interpreted according to site types as 2nd lower azimuth limit elevation angle of axis of conical observation pattern. If the limit rectangle is parallel to the horizon, the upper and lower right azimuth limits would be equal. (degrees).
/// Example: /// Example: 1.23
/// Constraints: No constraints specified.
func (rcv *Sensorlimits_Abridged) LowerRightAzimuthLimit() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Rightmost or maximum lower azimuth within this limit. Interpreted according to site types as 2nd lower azimuth limit elevation angle of axis of conical observation pattern. If the limit rectangle is parallel to the horizon, the upper and lower right azimuth limits would be equal. (degrees).
/// Example: /// Example: 1.23
/// Constraints: No constraints specified.
func (rcv *Sensorlimits_Abridged) MutateLowerRightAzimuthLimit(n float64) bool {
	return rcv._tab.MutateFloat64Slot(14, n)
}

/// Leftmost or minimum lower azimuth within this limit. Interpreted according to site types as lower left azimuth limit elevation angle of axis of conical observation pattern. If the limit rectangle is parallel to the horizon, the upper and lower left azimuth limits would be equal. (degrees).
/// Example: /// Example: 1.23
/// Constraints: No constraints specified.
func (rcv *Sensorlimits_Abridged) LowerLeftAzimuthLimit() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Leftmost or minimum lower azimuth within this limit. Interpreted according to site types as lower left azimuth limit elevation angle of axis of conical observation pattern. If the limit rectangle is parallel to the horizon, the upper and lower left azimuth limits would be equal. (degrees).
/// Example: /// Example: 1.23
/// Constraints: No constraints specified.
func (rcv *Sensorlimits_Abridged) MutateLowerLeftAzimuthLimit(n float64) bool {
	return rcv._tab.MutateFloat64Slot(16, n)
}

/// Minimum or lower elevation within this limit. Interpreted according to site types as minimum elevation angle, constant elevation or fan beam centerline. (Degrees).
/// Example: /// Example: 1.23
/// Constraints: No constraints specified.
func (rcv *Sensorlimits_Abridged) LowerLeftElevationLimit() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(18))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Minimum or lower elevation within this limit. Interpreted according to site types as minimum elevation angle, constant elevation or fan beam centerline. (Degrees).
/// Example: /// Example: 1.23
/// Constraints: No constraints specified.
func (rcv *Sensorlimits_Abridged) MutateLowerLeftElevationLimit(n float64) bool {
	return rcv._tab.MutateFloat64Slot(18, n)
}

/// Maximum or upper elevation within this limit. Interpreted according to site types as maximum elevation angle, half the apex of conical observation pattern or star. (Degrees).
/// Example: /// Example: 1.23
/// Constraints: No constraints specified.
func (rcv *Sensorlimits_Abridged) UpperLeftElevationLimit() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(20))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Maximum or upper elevation within this limit. Interpreted according to site types as maximum elevation angle, half the apex of conical observation pattern or star. (Degrees).
/// Example: /// Example: 1.23
/// Constraints: No constraints specified.
func (rcv *Sensorlimits_Abridged) MutateUpperLeftElevationLimit(n float64) bool {
	return rcv._tab.MutateFloat64Slot(20, n)
}

/// Minimum or lower right elevation within this limit. Interpreted according to site types as minimum right elevation angle, constant elevation or fan beam centerline. If the limit rectangle is parallel to the horizon, the left and right lower elevation limits would be equal. (Degrees).
/// Example: /// Example: 1.23
/// Constraints: No constraints specified.
func (rcv *Sensorlimits_Abridged) LowerRightElevationLimit() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(22))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Minimum or lower right elevation within this limit. Interpreted according to site types as minimum right elevation angle, constant elevation or fan beam centerline. If the limit rectangle is parallel to the horizon, the left and right lower elevation limits would be equal. (Degrees).
/// Example: /// Example: 1.23
/// Constraints: No constraints specified.
func (rcv *Sensorlimits_Abridged) MutateLowerRightElevationLimit(n float64) bool {
	return rcv._tab.MutateFloat64Slot(22, n)
}

/// Maximum or upper right elevation within this limit. Interpreted according to site types as maximum rightmost elevation angle, half the apex of conical observation pattern or star. If the limit rectangle is parallel to the horizon, the left and right upper elevation limits would be equal. (Degrees).
/// Example: /// Example: 1.23
/// Constraints: No constraints specified.
func (rcv *Sensorlimits_Abridged) UpperRightElevationLimit() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(24))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Maximum or upper right elevation within this limit. Interpreted according to site types as maximum rightmost elevation angle, half the apex of conical observation pattern or star. If the limit rectangle is parallel to the horizon, the left and right upper elevation limits would be equal. (Degrees).
/// Example: /// Example: 1.23
/// Constraints: No constraints specified.
func (rcv *Sensorlimits_Abridged) MutateUpperRightElevationLimit(n float64) bool {
	return rcv._tab.MutateFloat64Slot(24, n)
}

/// Source of the data.
/// Example: /// Example: Bluestaq
/// Constraints: Minimum length = 1, Maximum length = 64
func (rcv *Sensorlimits_Abridged) Source() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(26))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Source of the data.
/// Example: /// Example: Bluestaq
/// Constraints: Minimum length = 1, Maximum length = 64
/// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
/// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
/// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
/// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
/// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
/// Example: /// Example: TEST
/// Constraints: Minimum length = 1, Maximum length = 32
func (rcv *Sensorlimits_Abridged) DataMode() Sensorlimits_Abridged_dataMode_Enum {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(28))
	if o != 0 {
		return Sensorlimits_Abridged_dataMode_Enum(rcv._tab.GetInt8(o + rcv._tab.Pos))
	}
	return 0
}

/// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
/// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
/// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
/// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
/// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
/// Example: /// Example: TEST
/// Constraints: Minimum length = 1, Maximum length = 32
func (rcv *Sensorlimits_Abridged) MutateDataMode(n Sensorlimits_Abridged_dataMode_Enum) bool {
	return rcv._tab.MutateInt8Slot(28, int8(n))
}

/// Time the row was created in the database, auto-populated by the system.
/// Example: /// Example: 2018-01-01T16:00:00.123Z
/// Constraints: No constraints specified.
func (rcv *Sensorlimits_Abridged) CreatedAt() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(30))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Time the row was created in the database, auto-populated by the system.
/// Example: /// Example: 2018-01-01T16:00:00.123Z
/// Constraints: No constraints specified.
/// Application user who created the row in the database, auto-populated by the system.
/// Example: /// Example: some.user
/// Constraints: Minimum length = 1, Maximum length = 64
func (rcv *Sensorlimits_Abridged) CreatedBy() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(32))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Application user who created the row in the database, auto-populated by the system.
/// Example: /// Example: some.user
/// Constraints: Minimum length = 1, Maximum length = 64
/// Unique identifier of the target sensor object.
/// Example: /// Example: SENSORLIMITS-ID
/// Constraints: Minimum length = 0, Maximum length = 36
func (rcv *Sensorlimits_Abridged) IdSensor() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(34))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Unique identifier of the target sensor object.
/// Example: /// Example: SENSORLIMITS-ID
/// Constraints: Minimum length = 0, Maximum length = 36
func Sensorlimits_AbridgedStart(builder *flatbuffers.Builder) {
	builder.StartObject(16)
}
func Sensorlimits_AbridgedAddIdSensorLimits(builder *flatbuffers.Builder, idSensorLimits flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(idSensorLimits), 0)
}
func Sensorlimits_AbridgedAddClassificationMarking(builder *flatbuffers.Builder, classificationMarking flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(classificationMarking), 0)
}
func Sensorlimits_AbridgedAddOrigNetwork(builder *flatbuffers.Builder, origNetwork flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(origNetwork), 0)
}
func Sensorlimits_AbridgedAddUpperLeftAzimuthLimit(builder *flatbuffers.Builder, upperLeftAzimuthLimit float64) {
	builder.PrependFloat64Slot(3, upperLeftAzimuthLimit, 0.0)
}
func Sensorlimits_AbridgedAddUpperRightAzimuthLimit(builder *flatbuffers.Builder, upperRightAzimuthLimit float64) {
	builder.PrependFloat64Slot(4, upperRightAzimuthLimit, 0.0)
}
func Sensorlimits_AbridgedAddLowerRightAzimuthLimit(builder *flatbuffers.Builder, lowerRightAzimuthLimit float64) {
	builder.PrependFloat64Slot(5, lowerRightAzimuthLimit, 0.0)
}
func Sensorlimits_AbridgedAddLowerLeftAzimuthLimit(builder *flatbuffers.Builder, lowerLeftAzimuthLimit float64) {
	builder.PrependFloat64Slot(6, lowerLeftAzimuthLimit, 0.0)
}
func Sensorlimits_AbridgedAddLowerLeftElevationLimit(builder *flatbuffers.Builder, lowerLeftElevationLimit float64) {
	builder.PrependFloat64Slot(7, lowerLeftElevationLimit, 0.0)
}
func Sensorlimits_AbridgedAddUpperLeftElevationLimit(builder *flatbuffers.Builder, upperLeftElevationLimit float64) {
	builder.PrependFloat64Slot(8, upperLeftElevationLimit, 0.0)
}
func Sensorlimits_AbridgedAddLowerRightElevationLimit(builder *flatbuffers.Builder, lowerRightElevationLimit float64) {
	builder.PrependFloat64Slot(9, lowerRightElevationLimit, 0.0)
}
func Sensorlimits_AbridgedAddUpperRightElevationLimit(builder *flatbuffers.Builder, upperRightElevationLimit float64) {
	builder.PrependFloat64Slot(10, upperRightElevationLimit, 0.0)
}
func Sensorlimits_AbridgedAddSource(builder *flatbuffers.Builder, source flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(11, flatbuffers.UOffsetT(source), 0)
}
func Sensorlimits_AbridgedAddDataMode(builder *flatbuffers.Builder, dataMode Sensorlimits_Abridged_dataMode_Enum) {
	builder.PrependInt8Slot(12, int8(dataMode), 0)
}
func Sensorlimits_AbridgedAddCreatedAt(builder *flatbuffers.Builder, createdAt flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(13, flatbuffers.UOffsetT(createdAt), 0)
}
func Sensorlimits_AbridgedAddCreatedBy(builder *flatbuffers.Builder, createdBy flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(14, flatbuffers.UOffsetT(createdBy), 0)
}
func Sensorlimits_AbridgedAddIdSensor(builder *flatbuffers.Builder, idSensor flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(15, flatbuffers.UOffsetT(idSensor), 0)
}
func Sensorlimits_AbridgedEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
