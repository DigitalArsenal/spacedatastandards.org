// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package AntennaDetails

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

/// /// Detailed information for a spacecraft communication antenna. One antenna may have multiple AntennaDetails records, compiled by various sources.
type AntennaDetails struct {
	_tab flatbuffers.Table
}

const AntennaDetailsIdentifier = "ANTE"

func GetRootAsAntennaDetails(buf []byte, offset flatbuffers.UOffsetT) *AntennaDetails {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &AntennaDetails{}
	x.Init(buf, n+offset)
	return x
}

func FinishAntennaDetailsBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	identifierBytes := []byte(AntennaDetailsIdentifier)
	builder.FinishWithFileIdentifier(offset, identifierBytes)
}

func AntennaDetailsBufferHasIdentifier(buf []byte) bool {
	return flatbuffers.BufferHasIdentifier(buf, AntennaDetailsIdentifier)
}

func GetSizePrefixedRootAsAntennaDetails(buf []byte, offset flatbuffers.UOffsetT) *AntennaDetails {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &AntennaDetails{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedAntennaDetailsBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	identifierBytes := []byte(AntennaDetailsIdentifier)
	builder.FinishSizePrefixedWithFileIdentifier(offset, identifierBytes)
}

func SizePrefixedAntennaDetailsBufferHasIdentifier(buf []byte) bool {
	return flatbuffers.SizePrefixedBufferHasIdentifier(buf, AntennaDetailsIdentifier)
}

func (rcv *AntennaDetails) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *AntennaDetails) Table() flatbuffers.Table {
	return rcv._tab
}

/// Unique identifier of the record, auto-generated by the system.
/// Example: /// Example: ANTENNADETAILS-ID
/// Constraints: Minimum length = 1, Maximum length = 36
func (rcv *AntennaDetails) Id() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Unique identifier of the record, auto-generated by the system.
/// Example: /// Example: ANTENNADETAILS-ID
/// Constraints: Minimum length = 1, Maximum length = 36
/// Unique identifier of the parent Antenna.
/// Example: /// Example: ANTENNA-ID
/// Constraints: Minimum length = 1, Maximum length = 36
func (rcv *AntennaDetails) IdAntenna() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Unique identifier of the parent Antenna.
/// Example: /// Example: ANTENNA-ID
/// Constraints: Minimum length = 1, Maximum length = 36
/// Classification marking of the data in IC/CAPCO Portion-marked format.
/// Example: /// Example: U
/// Constraints: Minimum length = 1, Maximum length = 128
func (rcv *AntennaDetails) ClassificationMarking() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Classification marking of the data in IC/CAPCO Portion-marked format.
/// Example: /// Example: U
/// Constraints: Minimum length = 1, Maximum length = 128
/// Type of antenna (e.g. Reflector, Double Reflector, Shaped Reflector, Horn, Parabolic, etc.).
/// Example: /// Example: Reflector
/// Constraints: Minimum length = 0, Maximum length = 64
func (rcv *AntennaDetails) Type() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Type of antenna (e.g. Reflector, Double Reflector, Shaped Reflector, Horn, Parabolic, etc.).
/// Example: /// Example: Reflector
/// Constraints: Minimum length = 0, Maximum length = 64
/// Antenna position (e.g. Top, Nadir, Side).
/// Example: /// Example: Top
/// Constraints: Minimum length = 0, Maximum length = 128
func (rcv *AntennaDetails) Position() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Antenna position (e.g. Top, Nadir, Side).
/// Example: /// Example: Top
/// Constraints: Minimum length = 0, Maximum length = 128
/// Antenna mode (e.g. TX,RX).
/// Example: /// Example: TX
/// Constraints: Minimum length = 0, Maximum length = 4
func (rcv *AntennaDetails) Mode() AntennaDetails_mode_Enum {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return AntennaDetails_mode_Enum(rcv._tab.GetInt8(o + rcv._tab.Pos))
	}
	return 0
}

/// Antenna mode (e.g. TX,RX).
/// Example: /// Example: TX
/// Constraints: Minimum length = 0, Maximum length = 4
func (rcv *AntennaDetails) MutateMode(n AntennaDetails_mode_Enum) bool {
	return rcv._tab.MutateInt8Slot(14, int8(n))
}

/// Boolean indicating if this antenna is steerable.
/// Example: /// Example: False
/// Constraints: No constraints specified.
func (rcv *AntennaDetails) Steerable() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

/// Boolean indicating if this antenna is steerable.
/// Example: /// Example: False
/// Constraints: No constraints specified.
func (rcv *AntennaDetails) MutateSteerable(n bool) bool {
	return rcv._tab.MutateBoolSlot(16, n)
}

/// Boolean indicating if this is a beam forming antenna.
/// Example: /// Example: False
/// Constraints: No constraints specified.
func (rcv *AntennaDetails) BeamForming() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(18))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

/// Boolean indicating if this is a beam forming antenna.
/// Example: /// Example: False
/// Constraints: No constraints specified.
func (rcv *AntennaDetails) MutateBeamForming(n bool) bool {
	return rcv._tab.MutateBoolSlot(18, n)
}

/// ID of the organization that manufactures the antenna.
/// Example: /// Example: MANUFACTUREORG-ID
/// Constraints: Minimum length = 0, Maximum length = 36
func (rcv *AntennaDetails) ManufacturerOrgId() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(20))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// ID of the organization that manufactures the antenna.
/// Example: /// Example: MANUFACTUREORG-ID
/// Constraints: Minimum length = 0, Maximum length = 36
/// Antenna diameter in meters.
/// Example: /// Example: 0.01
/// Constraints: No constraints specified.
func (rcv *AntennaDetails) Diameter() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(22))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Antenna diameter in meters.
/// Example: /// Example: 0.01
/// Constraints: No constraints specified.
func (rcv *AntennaDetails) MutateDiameter(n float64) bool {
	return rcv._tab.MutateFloat64Slot(22, n)
}

/// Array with 1-2 values specifying the length and width (for rectangular) and just length for dipole antennas in meters.
/// Example: /// Example: [0.03, 0.05]
/// Constraints: No constraints specified.
func (rcv *AntennaDetails) Size(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(24))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *AntennaDetails) SizeLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(24))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

/// Array with 1-2 values specifying the length and width (for rectangular) and just length for dipole antennas in meters.
/// Example: /// Example: [0.03, 0.05]
/// Constraints: No constraints specified.
/// Antenna start of frequency range in Mhz.
/// Example: /// Example: 2.1
/// Constraints: No constraints specified.
func (rcv *AntennaDetails) StartFrequency() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(26))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Antenna start of frequency range in Mhz.
/// Example: /// Example: 2.1
/// Constraints: No constraints specified.
func (rcv *AntennaDetails) MutateStartFrequency(n float64) bool {
	return rcv._tab.MutateFloat64Slot(26, n)
}

/// Antenna end of frequency range in Mhz.
/// Example: /// Example: 3.3
/// Constraints: No constraints specified.
func (rcv *AntennaDetails) EndFrequency() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(28))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Antenna end of frequency range in Mhz.
/// Example: /// Example: 3.3
/// Constraints: No constraints specified.
func (rcv *AntennaDetails) MutateEndFrequency(n float64) bool {
	return rcv._tab.MutateFloat64Slot(28, n)
}

/// Array of angles between the half-power (-3 dB) points of the main lobe of the antenna, in degrees.
/// Example: /// Example: 14.1
/// Constraints: No constraints specified.
func (rcv *AntennaDetails) Beamwidth() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(30))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Array of angles between the half-power (-3 dB) points of the main lobe of the antenna, in degrees.
/// Example: /// Example: 14.1
/// Constraints: No constraints specified.
func (rcv *AntennaDetails) MutateBeamwidth(n float64) bool {
	return rcv._tab.MutateFloat64Slot(30, n)
}

/// Antenna maximum gain in dBi.
/// Example: /// Example: 20.1
/// Constraints: No constraints specified.
func (rcv *AntennaDetails) Gain() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(32))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Antenna maximum gain in dBi.
/// Example: /// Example: 20.1
/// Constraints: No constraints specified.
func (rcv *AntennaDetails) MutateGain(n float64) bool {
	return rcv._tab.MutateFloat64Slot(32, n)
}

/// Antenna gain tolerance in dB.
/// Example: /// Example: 5.1
/// Constraints: No constraints specified.
func (rcv *AntennaDetails) GainTolerance() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(34))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Antenna gain tolerance in dB.
/// Example: /// Example: 5.1
/// Constraints: No constraints specified.
func (rcv *AntennaDetails) MutateGainTolerance(n float64) bool {
	return rcv._tab.MutateFloat64Slot(34, n)
}

/// Antenna polarization in degrees.
/// Example: /// Example: 45.1
/// Constraints: No constraints specified.
func (rcv *AntennaDetails) Polarization() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(36))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Antenna polarization in degrees.
/// Example: /// Example: 45.1
/// Constraints: No constraints specified.
func (rcv *AntennaDetails) MutatePolarization(n float64) bool {
	return rcv._tab.MutateFloat64Slot(36, n)
}

/// Antenna description.
/// Example: /// Example: Description of antenna A
/// Constraints: Minimum length = 0, Maximum length = 512
func (rcv *AntennaDetails) Description() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(38))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Antenna description.
/// Example: /// Example: Description of antenna A
/// Constraints: Minimum length = 0, Maximum length = 512
/// Time the row was created in the database, auto-populated by the system.
/// Example: /// Example: 2018-01-01T16:00:00.123Z
/// Constraints: No constraints specified.
func (rcv *AntennaDetails) CreatedAt() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(40))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Time the row was created in the database, auto-populated by the system.
/// Example: /// Example: 2018-01-01T16:00:00.123Z
/// Constraints: No constraints specified.
/// Application user who created the row in the database, auto-populated by the system.
/// Example: /// Example: some.user
/// Constraints: Minimum length = 1, Maximum length = 64
func (rcv *AntennaDetails) CreatedBy() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(42))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Application user who created the row in the database, auto-populated by the system.
/// Example: /// Example: some.user
/// Constraints: Minimum length = 1, Maximum length = 64
/// Time the row was last updated in the database, auto-populated by the system.
/// Example: /// Example: 2018-01-01T16:00:00.123Z
/// Constraints: No constraints specified.
func (rcv *AntennaDetails) UpdatedAt() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(44))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Time the row was last updated in the database, auto-populated by the system.
/// Example: /// Example: 2018-01-01T16:00:00.123Z
/// Constraints: No constraints specified.
/// Application user who updated the row in the database, auto-populated by the system.
/// Example: /// Example: some.user
/// Constraints: Minimum length = 0, Maximum length = 64
func (rcv *AntennaDetails) UpdatedBy() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(46))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Application user who updated the row in the database, auto-populated by the system.
/// Example: /// Example: some.user
/// Constraints: Minimum length = 0, Maximum length = 64
/// Source of the data.
/// Example: /// Example: Bluestaq
/// Constraints: Minimum length = 1, Maximum length = 64
func (rcv *AntennaDetails) Source() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(48))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Source of the data.
/// Example: /// Example: Bluestaq
/// Constraints: Minimum length = 1, Maximum length = 64
/// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
/// Example: /// Example: THIRD_PARTY_DATASOURCE
/// Constraints: Minimum length = 0, Maximum length = 64
func (rcv *AntennaDetails) Origin() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(50))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
/// Example: /// Example: THIRD_PARTY_DATASOURCE
/// Constraints: Minimum length = 0, Maximum length = 64
/// The originating source network on which this record was created, auto-populated by the system.
/// Example: /// Example: ORIG
/// Constraints: Minimum length = 1, Maximum length = 32
func (rcv *AntennaDetails) OrigNetwork() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(52))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The originating source network on which this record was created, auto-populated by the system.
/// Example: /// Example: ORIG
/// Constraints: Minimum length = 1, Maximum length = 32
/// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
/// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
/// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
/// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
/// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
/// Example: /// Example: TEST
/// Constraints: Minimum length = 1, Maximum length = 32
func (rcv *AntennaDetails) DataMode() AntennaDetails_dataMode_Enum {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(54))
	if o != 0 {
		return AntennaDetails_dataMode_Enum(rcv._tab.GetInt8(o + rcv._tab.Pos))
	}
	return 0
}

/// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
/// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
/// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
/// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
/// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
/// Example: /// Example: TEST
/// Constraints: Minimum length = 1, Maximum length = 32
func (rcv *AntennaDetails) MutateDataMode(n AntennaDetails_dataMode_Enum) bool {
	return rcv._tab.MutateInt8Slot(54, int8(n))
}

/// Optional array of provider/source specific tags for this data, where each element is no longer than 32 characters, used for implementing data owner conditional access controls to restrict access to the data. Should be left null by data providers unless conditional access controls are coordinated with the UDL team.
/// Example: /// Example: ['PROVIDER_TAG1', 'PROVIDER_TAG2']
/// Constraints: No constraints specified.
func (rcv *AntennaDetails) Tags(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(56))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *AntennaDetails) TagsLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(56))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

/// Optional array of provider/source specific tags for this data, where each element is no longer than 32 characters, used for implementing data owner conditional access controls to restrict access to the data. Should be left null by data providers unless conditional access controls are coordinated with the UDL team.
/// Example: /// Example: ['PROVIDER_TAG1', 'PROVIDER_TAG2']
/// Constraints: No constraints specified.
/// No description provided.
/// Example: /// Example: No example provided.
/// Constraints: No constraints specified.
func (rcv *AntennaDetails) ManufacturerOrg() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(58))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// No description provided.
/// Example: /// Example: No example provided.
/// Constraints: No constraints specified.
func AntennaDetailsStart(builder *flatbuffers.Builder) {
	builder.StartObject(28)
}
func AntennaDetailsAddId(builder *flatbuffers.Builder, id flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(id), 0)
}
func AntennaDetailsAddIdAntenna(builder *flatbuffers.Builder, idAntenna flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(idAntenna), 0)
}
func AntennaDetailsAddClassificationMarking(builder *flatbuffers.Builder, classificationMarking flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(classificationMarking), 0)
}
func AntennaDetailsAddType(builder *flatbuffers.Builder, type_ flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(3, flatbuffers.UOffsetT(type_), 0)
}
func AntennaDetailsAddPosition(builder *flatbuffers.Builder, position flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(4, flatbuffers.UOffsetT(position), 0)
}
func AntennaDetailsAddMode(builder *flatbuffers.Builder, mode AntennaDetails_mode_Enum) {
	builder.PrependInt8Slot(5, int8(mode), 0)
}
func AntennaDetailsAddSteerable(builder *flatbuffers.Builder, steerable bool) {
	builder.PrependBoolSlot(6, steerable, false)
}
func AntennaDetailsAddBeamForming(builder *flatbuffers.Builder, beamForming bool) {
	builder.PrependBoolSlot(7, beamForming, false)
}
func AntennaDetailsAddManufacturerOrgId(builder *flatbuffers.Builder, manufacturerOrgId flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(8, flatbuffers.UOffsetT(manufacturerOrgId), 0)
}
func AntennaDetailsAddDiameter(builder *flatbuffers.Builder, diameter float64) {
	builder.PrependFloat64Slot(9, diameter, 0.0)
}
func AntennaDetailsAddSize(builder *flatbuffers.Builder, size flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(10, flatbuffers.UOffsetT(size), 0)
}
func AntennaDetailsStartSizeVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func AntennaDetailsAddStartFrequency(builder *flatbuffers.Builder, startFrequency float64) {
	builder.PrependFloat64Slot(11, startFrequency, 0.0)
}
func AntennaDetailsAddEndFrequency(builder *flatbuffers.Builder, endFrequency float64) {
	builder.PrependFloat64Slot(12, endFrequency, 0.0)
}
func AntennaDetailsAddBeamwidth(builder *flatbuffers.Builder, beamwidth float64) {
	builder.PrependFloat64Slot(13, beamwidth, 0.0)
}
func AntennaDetailsAddGain(builder *flatbuffers.Builder, gain float64) {
	builder.PrependFloat64Slot(14, gain, 0.0)
}
func AntennaDetailsAddGainTolerance(builder *flatbuffers.Builder, gainTolerance float64) {
	builder.PrependFloat64Slot(15, gainTolerance, 0.0)
}
func AntennaDetailsAddPolarization(builder *flatbuffers.Builder, polarization float64) {
	builder.PrependFloat64Slot(16, polarization, 0.0)
}
func AntennaDetailsAddDescription(builder *flatbuffers.Builder, description flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(17, flatbuffers.UOffsetT(description), 0)
}
func AntennaDetailsAddCreatedAt(builder *flatbuffers.Builder, createdAt flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(18, flatbuffers.UOffsetT(createdAt), 0)
}
func AntennaDetailsAddCreatedBy(builder *flatbuffers.Builder, createdBy flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(19, flatbuffers.UOffsetT(createdBy), 0)
}
func AntennaDetailsAddUpdatedAt(builder *flatbuffers.Builder, updatedAt flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(20, flatbuffers.UOffsetT(updatedAt), 0)
}
func AntennaDetailsAddUpdatedBy(builder *flatbuffers.Builder, updatedBy flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(21, flatbuffers.UOffsetT(updatedBy), 0)
}
func AntennaDetailsAddSource(builder *flatbuffers.Builder, source flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(22, flatbuffers.UOffsetT(source), 0)
}
func AntennaDetailsAddOrigin(builder *flatbuffers.Builder, origin flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(23, flatbuffers.UOffsetT(origin), 0)
}
func AntennaDetailsAddOrigNetwork(builder *flatbuffers.Builder, origNetwork flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(24, flatbuffers.UOffsetT(origNetwork), 0)
}
func AntennaDetailsAddDataMode(builder *flatbuffers.Builder, dataMode AntennaDetails_dataMode_Enum) {
	builder.PrependInt8Slot(25, int8(dataMode), 0)
}
func AntennaDetailsAddTags(builder *flatbuffers.Builder, tags flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(26, flatbuffers.UOffsetT(tags), 0)
}
func AntennaDetailsStartTagsVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func AntennaDetailsAddManufacturerOrg(builder *flatbuffers.Builder, manufacturerOrg flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(27, flatbuffers.UOffsetT(manufacturerOrg), 0)
}
func AntennaDetailsEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
