// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package ISRCollectionExploitationRequirement_Full

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

/// /// What it is that is trying to be exploited.
type ISRCollectionExploitationRequirement_Full struct {
	_tab flatbuffers.Table
}

const ISRCollectionExploitationRequirement_FullIdentifier = "ISRC"

func GetRootAsISRCollectionExploitationRequirement_Full(buf []byte, offset flatbuffers.UOffsetT) *ISRCollectionExploitationRequirement_Full {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &ISRCollectionExploitationRequirement_Full{}
	x.Init(buf, n+offset)
	return x
}

func FinishISRCollectionExploitationRequirement_FullBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	identifierBytes := []byte(ISRCollectionExploitationRequirement_FullIdentifier)
	builder.FinishWithFileIdentifier(offset, identifierBytes)
}

func ISRCollectionExploitationRequirement_FullBufferHasIdentifier(buf []byte) bool {
	return flatbuffers.BufferHasIdentifier(buf, ISRCollectionExploitationRequirement_FullIdentifier)
}

func GetSizePrefixedRootAsISRCollectionExploitationRequirement_Full(buf []byte, offset flatbuffers.UOffsetT) *ISRCollectionExploitationRequirement_Full {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &ISRCollectionExploitationRequirement_Full{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedISRCollectionExploitationRequirement_FullBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	identifierBytes := []byte(ISRCollectionExploitationRequirement_FullIdentifier)
	builder.FinishSizePrefixedWithFileIdentifier(offset, identifierBytes)
}

func SizePrefixedISRCollectionExploitationRequirement_FullBufferHasIdentifier(buf []byte) bool {
	return flatbuffers.SizePrefixedBufferHasIdentifier(buf, ISRCollectionExploitationRequirement_FullIdentifier)
}

func (rcv *ISRCollectionExploitationRequirement_Full) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *ISRCollectionExploitationRequirement_Full) Table() flatbuffers.Table {
	return rcv._tab
}

/// Exploitation requirement id.
/// Example: /// Example: ISRCOLLECTIONEXPLOITATIONREQUIREMENT
/// Constraints: Minimum length = 0, Maximum length = 36
func (rcv *ISRCollectionExploitationRequirement_Full) Id() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Exploitation requirement id.
/// Example: /// Example: ISRCOLLECTIONEXPLOITATIONREQUIREMENT
/// Constraints: Minimum length = 0, Maximum length = 36
/// Amplifying data for the exploitation requirement.
/// Example: /// Example: AMPLIFICATION
/// Constraints: Minimum length = 0, Maximum length = 256
func (rcv *ISRCollectionExploitationRequirement_Full) Amplification() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Amplifying data for the exploitation requirement.
/// Example: /// Example: AMPLIFICATION
/// Constraints: Minimum length = 0, Maximum length = 256
/// The reporting criteria of the collection requirement.
/// Example: /// Example: CRITERIA
/// Constraints: Minimum length = 0, Maximum length = 32
func (rcv *ISRCollectionExploitationRequirement_Full) ReportingCriteria() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The reporting criteria of the collection requirement.
/// Example: /// Example: CRITERIA
/// Constraints: Minimum length = 0, Maximum length = 32
/// List of e-mails to disseminate collection verification information.
/// Example: /// Example: EMAILS
/// Constraints: Minimum length = 0, Maximum length = 32
func (rcv *ISRCollectionExploitationRequirement_Full) Dissemination() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// List of e-mails to disseminate collection verification information.
/// Example: /// Example: EMAILS
/// Constraints: Minimum length = 0, Maximum length = 32
/// Essential Elements of Information.
/// Example: /// Example: ESSENTIAL_ELEMENTS
/// Constraints: Minimum length = 0, Maximum length = 32
func (rcv *ISRCollectionExploitationRequirement_Full) Eei() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Essential Elements of Information.
/// Example: /// Example: ESSENTIAL_ELEMENTS
/// Constraints: Minimum length = 0, Maximum length = 32
/// No description provided.
/// Example: /// Example: No example provided.
/// Constraints: No constraints specified.
func (rcv *ISRCollectionExploitationRequirement_Full) Poc() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// No description provided.
/// Example: /// Example: No example provided.
/// Constraints: No constraints specified.
func ISRCollectionExploitationRequirement_FullStart(builder *flatbuffers.Builder) {
	builder.StartObject(6)
}
func ISRCollectionExploitationRequirement_FullAddId(builder *flatbuffers.Builder, id flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(id), 0)
}
func ISRCollectionExploitationRequirement_FullAddAmplification(builder *flatbuffers.Builder, amplification flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(amplification), 0)
}
func ISRCollectionExploitationRequirement_FullAddReportingCriteria(builder *flatbuffers.Builder, reportingCriteria flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(reportingCriteria), 0)
}
func ISRCollectionExploitationRequirement_FullAddDissemination(builder *flatbuffers.Builder, dissemination flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(3, flatbuffers.UOffsetT(dissemination), 0)
}
func ISRCollectionExploitationRequirement_FullAddEei(builder *flatbuffers.Builder, eei flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(4, flatbuffers.UOffsetT(eei), 0)
}
func ISRCollectionExploitationRequirement_FullAddPoc(builder *flatbuffers.Builder, poc flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(5, flatbuffers.UOffsetT(poc), 0)
}
func ISRCollectionExploitationRequirement_FullEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
