// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package GNSSObservation_Abridged

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

/// /// Information for Global Navigation Satellite Systems (GNSS) Observations collected from GNSS receivers, including the specific GNSS sat from which each signal was received, and the observation codes of each observation in the record. Each GNSS Observation is associated with a GNSS Observation Set record containing data which applies to all observations in the set, including observation time, receiver location, and Dilution of Precision (DOP) values. Users can Reference RINEX 3+ documentation for further information concerning many of the standards and conventions for GNSS observations.
type GNSSObservation_Abridged struct {
	_tab flatbuffers.Table
}

const GNSSObservation_AbridgedIdentifier = "GNSS"

func GetRootAsGNSSObservation_Abridged(buf []byte, offset flatbuffers.UOffsetT) *GNSSObservation_Abridged {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &GNSSObservation_Abridged{}
	x.Init(buf, n+offset)
	return x
}

func FinishGNSSObservation_AbridgedBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	identifierBytes := []byte(GNSSObservation_AbridgedIdentifier)
	builder.FinishWithFileIdentifier(offset, identifierBytes)
}

func GNSSObservation_AbridgedBufferHasIdentifier(buf []byte) bool {
	return flatbuffers.BufferHasIdentifier(buf, GNSSObservation_AbridgedIdentifier)
}

func GetSizePrefixedRootAsGNSSObservation_Abridged(buf []byte, offset flatbuffers.UOffsetT) *GNSSObservation_Abridged {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &GNSSObservation_Abridged{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedGNSSObservation_AbridgedBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	identifierBytes := []byte(GNSSObservation_AbridgedIdentifier)
	builder.FinishSizePrefixedWithFileIdentifier(offset, identifierBytes)
}

func SizePrefixedGNSSObservation_AbridgedBufferHasIdentifier(buf []byte) bool {
	return flatbuffers.SizePrefixedBufferHasIdentifier(buf, GNSSObservation_AbridgedIdentifier)
}

func (rcv *GNSSObservation_Abridged) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *GNSSObservation_Abridged) Table() flatbuffers.Table {
	return rcv._tab
}

/// RINEX 3+ compliant GNSS System and Satellite Identifier (represented as SNN, where S is the system code, and NN is the satellite identifier) associated with this observation:
/// G - GPS (NN = PRN)
/// R - GLONASS (NN = Slot Number)
/// S - SBAS Payload (NN = PRN-100)
/// E - Galileo (NN = PRN)
/// C - BeiDou (NN = PRN)
/// J - QZSS (NN = PRN - 1923)
/// I - IRNSS (NN = PRN)
/// Example: /// Example: GEJ
/// Constraints: Minimum length = 0, Maximum length = 6
func (rcv *GNSSObservation_Abridged) GnssSatId() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// RINEX 3+ compliant GNSS System and Satellite Identifier (represented as SNN, where S is the system code, and NN is the satellite identifier) associated with this observation:
/// G - GPS (NN = PRN)
/// R - GLONASS (NN = Slot Number)
/// S - SBAS Payload (NN = PRN-100)
/// E - Galileo (NN = PRN)
/// C - BeiDou (NN = PRN)
/// J - QZSS (NN = PRN - 1923)
/// I - IRNSS (NN = PRN)
/// Example: /// Example: GEJ
/// Constraints: Minimum length = 0, Maximum length = 6
/// Status of the GNSS receiver signal. Status options are 0, 1 or 2 (0 being the best).
/// Example: /// Example: 0
/// Constraints: No constraints specified.
func (rcv *GNSSObservation_Abridged) TrackingStatus() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

/// Status of the GNSS receiver signal. Status options are 0, 1 or 2 (0 being the best).
/// Example: /// Example: 0
/// Constraints: No constraints specified.
func (rcv *GNSSObservation_Abridged) MutateTrackingStatus(n int32) bool {
	return rcv._tab.MutateInt32Slot(6, n)
}

/// GNSS Automatic Gain Control State.
/// Example: /// Example: 20
/// Constraints: No constraints specified.
func (rcv *GNSSObservation_Abridged) AgcState() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

/// GNSS Automatic Gain Control State.
/// Example: /// Example: 20
/// Constraints: No constraints specified.
func (rcv *GNSSObservation_Abridged) MutateAgcState(n int32) bool {
	return rcv._tab.MutateInt32Slot(8, n)
}

/// The observation code set that applies to this observation record.  Reference RINEX 3+ for further information concerning observation code set conventions.
/// Example: /// Example: ['S1C', 'C1C', 'C1D']
/// Constraints: No constraints specified.
func (rcv *GNSSObservation_Abridged) ObsCodeSet(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *GNSSObservation_Abridged) ObsCodeSetLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

/// The observation code set that applies to this observation record.  Reference RINEX 3+ for further information concerning observation code set conventions.
/// Example: /// Example: ['S1C', 'C1C', 'C1D']
/// Constraints: No constraints specified.
/// Array of observation(s).  The ob array must be the same length as the obsCodeSet.  Pseudorange (C) is expressed meters, carrier phase (L) in cycles,  doppler (D) in Hz where + values indicate approaching sats, and signal strength C/No (S) in dB-Hz.
/// Example: /// Example: [42.1, 1000.0, 0.9]
/// Constraints: No constraints specified.
func (rcv *GNSSObservation_Abridged) Ob(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *GNSSObservation_Abridged) ObLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

/// Array of observation(s).  The ob array must be the same length as the obsCodeSet.  Pseudorange (C) is expressed meters, carrier phase (L) in cycles,  doppler (D) in Hz where + values indicate approaching sats, and signal strength C/No (S) in dB-Hz.
/// Example: /// Example: [42.1, 1000.0, 0.9]
/// Constraints: No constraints specified.
func GNSSObservation_AbridgedStart(builder *flatbuffers.Builder) {
	builder.StartObject(5)
}
func GNSSObservation_AbridgedAddGnssSatId(builder *flatbuffers.Builder, gnssSatId flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(gnssSatId), 0)
}
func GNSSObservation_AbridgedAddTrackingStatus(builder *flatbuffers.Builder, trackingStatus int32) {
	builder.PrependInt32Slot(1, trackingStatus, 0)
}
func GNSSObservation_AbridgedAddAgcState(builder *flatbuffers.Builder, agcState int32) {
	builder.PrependInt32Slot(2, agcState, 0)
}
func GNSSObservation_AbridgedAddObsCodeSet(builder *flatbuffers.Builder, obsCodeSet flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(3, flatbuffers.UOffsetT(obsCodeSet), 0)
}
func GNSSObservation_AbridgedStartObsCodeSetVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func GNSSObservation_AbridgedAddOb(builder *flatbuffers.Builder, ob flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(4, flatbuffers.UOffsetT(ob), 0)
}
func GNSSObservation_AbridgedStartObVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func GNSSObservation_AbridgedEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
