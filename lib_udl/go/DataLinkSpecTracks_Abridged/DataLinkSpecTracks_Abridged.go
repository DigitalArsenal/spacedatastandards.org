// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package DataLinkSpecTracks_Abridged

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

/// /// Collection of special track numbers used on the data links. There can be 0 to many DataLinkSpecTracks collections within the datalink service.
type DataLinkSpecTracks_Abridged struct {
	_tab flatbuffers.Table
}

const DataLinkSpecTracks_AbridgedIdentifier = "DATA"

func GetRootAsDataLinkSpecTracks_Abridged(buf []byte, offset flatbuffers.UOffsetT) *DataLinkSpecTracks_Abridged {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &DataLinkSpecTracks_Abridged{}
	x.Init(buf, n+offset)
	return x
}

func FinishDataLinkSpecTracks_AbridgedBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	identifierBytes := []byte(DataLinkSpecTracks_AbridgedIdentifier)
	builder.FinishWithFileIdentifier(offset, identifierBytes)
}

func DataLinkSpecTracks_AbridgedBufferHasIdentifier(buf []byte) bool {
	return flatbuffers.BufferHasIdentifier(buf, DataLinkSpecTracks_AbridgedIdentifier)
}

func GetSizePrefixedRootAsDataLinkSpecTracks_Abridged(buf []byte, offset flatbuffers.UOffsetT) *DataLinkSpecTracks_Abridged {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &DataLinkSpecTracks_Abridged{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedDataLinkSpecTracks_AbridgedBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	identifierBytes := []byte(DataLinkSpecTracks_AbridgedIdentifier)
	builder.FinishSizePrefixedWithFileIdentifier(offset, identifierBytes)
}

func SizePrefixedDataLinkSpecTracks_AbridgedBufferHasIdentifier(buf []byte) bool {
	return flatbuffers.SizePrefixedBufferHasIdentifier(buf, DataLinkSpecTracks_AbridgedIdentifier)
}

func (rcv *DataLinkSpecTracks_Abridged) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *DataLinkSpecTracks_Abridged) Table() flatbuffers.Table {
	return rcv._tab
}

/// The special track number used on the data link entered as an octal reference number. Used to identify a particular type of platform (e.g. MPA, KRESTA) or platform name (e.g. TROMP, MOUNT WHITNEY) which is not included in assigned track blocks.
/// Example: /// Example: 12345
/// Constraints: Minimum length = 0, Maximum length = 16
func (rcv *DataLinkSpecTracks_Abridged) SpecTrackNum() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The special track number used on the data link entered as an octal reference number. Used to identify a particular type of platform (e.g. MPA, KRESTA) or platform name (e.g. TROMP, MOUNT WHITNEY) which is not included in assigned track blocks.
/// Example: /// Example: 12345
/// Constraints: Minimum length = 0, Maximum length = 16
/// Description of the special track number.
/// Example: /// Example: SAM SITE CHARLIE
/// Constraints: Minimum length = 0, Maximum length = 40
func (rcv *DataLinkSpecTracks_Abridged) SpecTrackNumDesc() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Description of the special track number.
/// Example: /// Example: SAM SITE CHARLIE
/// Constraints: Minimum length = 0, Maximum length = 40
func DataLinkSpecTracks_AbridgedStart(builder *flatbuffers.Builder) {
	builder.StartObject(2)
}
func DataLinkSpecTracks_AbridgedAddSpecTrackNum(builder *flatbuffers.Builder, specTrackNum flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(specTrackNum), 0)
}
func DataLinkSpecTracks_AbridgedAddSpecTrackNumDesc(builder *flatbuffers.Builder, specTrackNumDesc flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(specTrackNumDesc), 0)
}
func DataLinkSpecTracks_AbridgedEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
