// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package Operatingunit

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

/// /// Model representation of a unit or organization which operates or controls an space-related Entity such as an on-orbit payload, a sensor, etc.  A contact may belong to an organization.
type Operatingunit struct {
	_tab flatbuffers.Table
}

const OperatingunitIdentifier = "OPER"

func GetRootAsOperatingunit(buf []byte, offset flatbuffers.UOffsetT) *Operatingunit {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &Operatingunit{}
	x.Init(buf, n+offset)
	return x
}

func FinishOperatingunitBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	identifierBytes := []byte(OperatingunitIdentifier)
	builder.FinishWithFileIdentifier(offset, identifierBytes)
}

func OperatingunitBufferHasIdentifier(buf []byte) bool {
	return flatbuffers.BufferHasIdentifier(buf, OperatingunitIdentifier)
}

func GetSizePrefixedRootAsOperatingunit(buf []byte, offset flatbuffers.UOffsetT) *Operatingunit {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &Operatingunit{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedOperatingunitBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	identifierBytes := []byte(OperatingunitIdentifier)
	builder.FinishSizePrefixedWithFileIdentifier(offset, identifierBytes)
}

func SizePrefixedOperatingunitBufferHasIdentifier(buf []byte) bool {
	return flatbuffers.SizePrefixedBufferHasIdentifier(buf, OperatingunitIdentifier)
}

func (rcv *Operatingunit) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *Operatingunit) Table() flatbuffers.Table {
	return rcv._tab
}

/// Unique identifier of the record, auto-generated by the system.
/// Example: /// Example: OPERATINGUNIT-ID
/// Constraints: Minimum length = 1, Maximum length = 36
func (rcv *Operatingunit) IdOperatingUnit() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Unique identifier of the record, auto-generated by the system.
/// Example: /// Example: OPERATINGUNIT-ID
/// Constraints: Minimum length = 1, Maximum length = 36
/// Classification marking of the data in IC/CAPCO Portion-marked format.
/// Example: /// Example: U
/// Constraints: Minimum length = 1, Maximum length = 128
func (rcv *Operatingunit) ClassificationMarking() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Classification marking of the data in IC/CAPCO Portion-marked format.
/// Example: /// Example: U
/// Constraints: Minimum length = 1, Maximum length = 128
/// Unique identifier of the operating unit record from the originating system.
/// Example: /// Example: 32100000000021
/// Constraints: Minimum length = 0, Maximum length = 36
func (rcv *Operatingunit) AltOperatingUnitId() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Unique identifier of the operating unit record from the originating system.
/// Example: /// Example: 32100000000021
/// Constraints: Minimum length = 0, Maximum length = 36
/// Name of the operating unit.
/// Example: /// Example: SOME_NAME
/// Constraints: Minimum length = 1, Maximum length = 128
func (rcv *Operatingunit) Name() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Name of the operating unit.
/// Example: /// Example: SOME_NAME
/// Constraints: Minimum length = 1, Maximum length = 128
/// Description of the operating unit.
/// Example: /// Example: Description of unit
/// Constraints: Minimum length = 0, Maximum length = 256
func (rcv *Operatingunit) Description() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Description of the operating unit.
/// Example: /// Example: Description of unit
/// Constraints: Minimum length = 0, Maximum length = 256
/// Unique identifier of the location record for this operating unit.
/// Example: /// Example: LOCATION-ID
/// Constraints: Minimum length = 0, Maximum length = 36
func (rcv *Operatingunit) IdLocation() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Unique identifier of the location record for this operating unit.
/// Example: /// Example: LOCATION-ID
/// Constraints: Minimum length = 0, Maximum length = 36
/// Unique identifier of the contact for this operating unit.
/// Example: /// Example: CONTACT-ID
/// Constraints: Minimum length = 0, Maximum length = 36
func (rcv *Operatingunit) IdContact() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Unique identifier of the contact for this operating unit.
/// Example: /// Example: CONTACT-ID
/// Constraints: Minimum length = 0, Maximum length = 36
/// Unique identifier of the organization record for this operating unit.
/// Example: /// Example: ORGANIZATION-ID
/// Constraints: Minimum length = 0, Maximum length = 36
func (rcv *Operatingunit) IdOrganization() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(18))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Unique identifier of the organization record for this operating unit.
/// Example: /// Example: ORGANIZATION-ID
/// Constraints: Minimum length = 0, Maximum length = 36
/// An optional identifier for this operating unit that may be composed from items such as the originating organization, allegiance, one-up number, etc.
/// Example: /// Example: AZXAZ12345
/// Constraints: Minimum length = 0, Maximum length = 10
func (rcv *Operatingunit) UnitIdentifier() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(20))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// An optional identifier for this operating unit that may be composed from items such as the originating organization, allegiance, one-up number, etc.
/// Example: /// Example: AZXAZ12345
/// Constraints: Minimum length = 0, Maximum length = 10
/// The DoD Standard country code designator for the country or political entity to which the operating unit geographic coordinates reside . This field will be set to "OTHR" if the source value does not match a UDL country code value (ISO-3166-ALPHA-2).
/// Example: /// Example: IQ
/// Constraints: Minimum length = 0, Maximum length = 4
func (rcv *Operatingunit) CountryCode() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(22))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The DoD Standard country code designator for the country or political entity to which the operating unit geographic coordinates reside . This field will be set to "OTHR" if the source value does not match a UDL country code value (ISO-3166-ALPHA-2).
/// Example: /// Example: IQ
/// Constraints: Minimum length = 0, Maximum length = 4
/// Specifies an alternate country code if the data provider code is not part of an official Country Code standard such as ISO-3166 or FIPS. This field will be set to the value provided by the source and should be used for all Queries specifying a Country Code.
/// Example: /// Example: IZ
/// Constraints: Minimum length = 0, Maximum length = 4
func (rcv *Operatingunit) AltCountryCode() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(24))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Specifies an alternate country code if the data provider code is not part of an official Country Code standard such as ISO-3166 or FIPS. This field will be set to the value provided by the source and should be used for all Queries specifying a Country Code.
/// Example: /// Example: IZ
/// Constraints: Minimum length = 0, Maximum length = 4
/// World Aeronautical Chart identifier for the area in which a designated operating unit is located.
/// Example: /// Example: 0427
/// Constraints: Minimum length = 0, Maximum length = 4
func (rcv *Operatingunit) Wac() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(26))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// World Aeronautical Chart identifier for the area in which a designated operating unit is located.
/// Example: /// Example: 0427
/// Constraints: Minimum length = 0, Maximum length = 4
/// The Degree to which an operating unit is ready to perform the overall operational mission(s) for which it was organized and equipped.  The specific usage and enumerations contained in this field may be found in the documentation provided in the referenceDoc field.  If referenceDoc not provided, users may consult the data provider.
/// Example: /// Example: OPR
/// Constraints: Minimum length = 0, Maximum length = 3
func (rcv *Operatingunit) OperStatus() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(28))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The Degree to which an operating unit is ready to perform the overall operational mission(s) for which it was organized and equipped.  The specific usage and enumerations contained in this field may be found in the documentation provided in the referenceDoc field.  If referenceDoc not provided, users may consult the data provider.
/// Example: /// Example: OPR
/// Constraints: Minimum length = 0, Maximum length = 3
/// The physical manner of being or state of existence of the operating unit.  A physical condition that must be considered in the determining of a course of action.  The specific usage and enumerations contained in this field may be found in the documentation provided in the referenceDoc field.  If referenceDoc not provided, users may consult the data provider.
/// Example: /// Example: RDY
/// Constraints: Minimum length = 0, Maximum length = 4
func (rcv *Operatingunit) Condition() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(30))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The physical manner of being or state of existence of the operating unit.  A physical condition that must be considered in the determining of a course of action.  The specific usage and enumerations contained in this field may be found in the documentation provided in the referenceDoc field.  If referenceDoc not provided, users may consult the data provider.
/// Example: /// Example: RDY
/// Constraints: Minimum length = 0, Maximum length = 4
/// Availability of the operating unit relative to its condition.  Indicates the reason the operating unit is not fully operational.  The specific usage and enumerations contained in this field may be found in the documentation provided in the referenceDoc field.  If referenceDoc not provided, users may consult the data provider.
/// Example: /// Example: A
/// Constraints: Minimum length = 0, Maximum length = 4
func (rcv *Operatingunit) ConditionAvail() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(32))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Availability of the operating unit relative to its condition.  Indicates the reason the operating unit is not fully operational.  The specific usage and enumerations contained in this field may be found in the documentation provided in the referenceDoc field.  If referenceDoc not provided, users may consult the data provider.
/// Example: /// Example: A
/// Constraints: Minimum length = 0, Maximum length = 4
/// The Intelligence Confidence Level or the Reliability/degree of confidence that the analyst has assigned to the data within this record. The numerical range is from 1 to 9 with 1 representing the highest confidence level.
/// Example: /// Example: 7
/// Constraints: No constraints specified.
func (rcv *Operatingunit) Eval() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(34))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

/// The Intelligence Confidence Level or the Reliability/degree of confidence that the analyst has assigned to the data within this record. The numerical range is from 1 to 9 with 1 representing the highest confidence level.
/// Example: /// Example: 7
/// Constraints: No constraints specified.
func (rcv *Operatingunit) MutateEval(n int32) bool {
	return rcv._tab.MutateInt32Slot(34, n)
}

/// Functional Production Area (FPA) under the Shared Production Program (SPP). Producers are defined per country per FPA.  The specific usage and enumerations contained in this field may be found in the documentation provided in the referenceDoc field.  If referenceDoc not provided, users may consult the data provider.
/// Example: /// Example: EOB
/// Constraints: Minimum length = 0, Maximum length = 5
func (rcv *Operatingunit) Fpa() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(36))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Functional Production Area (FPA) under the Shared Production Program (SPP). Producers are defined per country per FPA.  The specific usage and enumerations contained in this field may be found in the documentation provided in the referenceDoc field.  If referenceDoc not provided, users may consult the data provider.
/// Example: /// Example: EOB
/// Constraints: Minimum length = 0, Maximum length = 5
/// Estimated identity of the Site (ASSUMED FRIEND, FRIEND, HOSTILE, FAKER, JOKER, NEUTRAL, PENDING, SUSPECT, UNKNOWN): 
/// ASSUMED FRIEND: Track assumed to be a friend due to the object characteristics, behavior, and/or origin.
/// FRIEND: Track object supporting friendly forces and belonging to a declared friendly nation or entity.
/// HOSTILE: Track object belonging to an opposing nation, party, group, or entity deemed to contribute to a threat to friendly forces or their mission due to its behavior, characteristics, nationality, or origin.
/// FAKER: Friendly track, object, or entity acting as an exercise hostile.
/// JOKER: Friendly track, object, or entity acting as an exercise suspect.
/// NEUTRAL: Track object whose characteristics, behavior, nationality, and/or origin indicate that it is neither supporting nor opposing friendly forces or their mission.
/// PENDING: Track object which has not been evaluated.
/// SUSPECT: Track object deemed potentially hostile due to the object characteristics, behavior, nationality, and/or origin.
/// UNKNOWN: Track object which has been evaluated and does not meet criteria for any standard identity.
/// Example: /// Example: FRIEND
/// Constraints: Minimum length = 0, Maximum length = 32
func (rcv *Operatingunit) Ident() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(38))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Estimated identity of the Site (ASSUMED FRIEND, FRIEND, HOSTILE, FAKER, JOKER, NEUTRAL, PENDING, SUSPECT, UNKNOWN): 
/// ASSUMED FRIEND: Track assumed to be a friend due to the object characteristics, behavior, and/or origin.
/// FRIEND: Track object supporting friendly forces and belonging to a declared friendly nation or entity.
/// HOSTILE: Track object belonging to an opposing nation, party, group, or entity deemed to contribute to a threat to friendly forces or their mission due to its behavior, characteristics, nationality, or origin.
/// FAKER: Friendly track, object, or entity acting as an exercise hostile.
/// JOKER: Friendly track, object, or entity acting as an exercise suspect.
/// NEUTRAL: Track object whose characteristics, behavior, nationality, and/or origin indicate that it is neither supporting nor opposing friendly forces or their mission.
/// PENDING: Track object which has not been evaluated.
/// SUSPECT: Track object deemed potentially hostile due to the object characteristics, behavior, nationality, and/or origin.
/// UNKNOWN: Track object which has been evaluated and does not meet criteria for any standard identity.
/// Example: /// Example: FRIEND
/// Constraints: Minimum length = 0, Maximum length = 32
/// The DoD Standard country code designator for the country or political entity to which the operating unit owes its allegiance.  This field will be set to "OTHR" if the source value does not match a UDL country code value (ISO-3166-ALPHA-2).
/// Example: /// Example: OTHR
/// Constraints: Minimum length = 0, Maximum length = 4
func (rcv *Operatingunit) Allegiance() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(40))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The DoD Standard country code designator for the country or political entity to which the operating unit owes its allegiance.  This field will be set to "OTHR" if the source value does not match a UDL country code value (ISO-3166-ALPHA-2).
/// Example: /// Example: OTHR
/// Constraints: Minimum length = 0, Maximum length = 4
/// Specifies an alternate allegiance code if the data provider code is not part of an official Country Code standard such as ISO-3166 or FIPS. This field will be set to the value provided by the source and should be used for all Queries specifying allegiance.
/// Example: /// Example: HL
/// Constraints: Minimum length = 0, Maximum length = 4
func (rcv *Operatingunit) AltAllegiance() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(42))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Specifies an alternate allegiance code if the data provider code is not part of an official Country Code standard such as ISO-3166 or FIPS. This field will be set to the value provided by the source and should be used for all Queries specifying allegiance.
/// Example: /// Example: HL
/// Constraints: Minimum length = 0, Maximum length = 4
/// Location name for the coordinates.
/// Example: /// Example: LOCATION_NAME
/// Constraints: Minimum length = 0, Maximum length = 54
func (rcv *Operatingunit) LocName() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(44))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Location name for the coordinates.
/// Example: /// Example: LOCATION_NAME
/// Constraints: Minimum length = 0, Maximum length = 54
/// Indicates the reason that the operating unit is at that location.  The specific usage and enumerations contained in this field may be found in the documentation provided in the referenceDoc field.  If referenceDoc not provided, users may consult the data provider.
/// Example: /// Example: GR
/// Constraints: Minimum length = 0, Maximum length = 9
func (rcv *Operatingunit) LocReason() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(46))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Indicates the reason that the operating unit is at that location.  The specific usage and enumerations contained in this field may be found in the documentation provided in the referenceDoc field.  If referenceDoc not provided, users may consult the data provider.
/// Example: /// Example: GR
/// Constraints: Minimum length = 0, Maximum length = 9
/// An aggregation of military units within a single service (i.e., ARMY, AIR FORCE, etc.) which operates under a single authority to accomplish a common mission. The specific usage and enumerations contained in this field may be found in the documentation provided in the referenceDoc field.  If referenceDoc not provided, users may consult the data provider.
/// Example: /// Example: NV
/// Constraints: Minimum length = 0, Maximum length = 4
func (rcv *Operatingunit) Force() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(48))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// An aggregation of military units within a single service (i.e., ARMY, AIR FORCE, etc.) which operates under a single authority to accomplish a common mission. The specific usage and enumerations contained in this field may be found in the documentation provided in the referenceDoc field.  If referenceDoc not provided, users may consult the data provider.
/// Example: /// Example: NV
/// Constraints: Minimum length = 0, Maximum length = 4
/// The specific name for a given force.  For example, Force = ADF (Air Defense Force) and Force Name = Army Air Defense Force.
/// Example: /// Example: FORCE-NAME
/// Constraints: Minimum length = 0, Maximum length = 54
func (rcv *Operatingunit) ForceName() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(50))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The specific name for a given force.  For example, Force = ADF (Air Defense Force) and Force Name = Army Air Defense Force.
/// Example: /// Example: FORCE-NAME
/// Constraints: Minimum length = 0, Maximum length = 54
/// Principal combat-related role that an operating unit is organized, structured and equipped to perform.  Or, the specialized military or paramilitary branch in which an individual serves, their specialization.  The specific usage and enumerations contained in this field may be found in the documentation provided in the referenceDoc field.  If referenceDoc not provided, users may consult the data provider.
/// Example: /// Example: MIL
/// Constraints: Minimum length = 0, Maximum length = 3
func (rcv *Operatingunit) FunctRole() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(52))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Principal combat-related role that an operating unit is organized, structured and equipped to perform.  Or, the specialized military or paramilitary branch in which an individual serves, their specialization.  The specific usage and enumerations contained in this field may be found in the documentation provided in the referenceDoc field.  If referenceDoc not provided, users may consult the data provider.
/// Example: /// Example: MIL
/// Constraints: Minimum length = 0, Maximum length = 3
/// Indicates the principal type of mission that an operating unit is organized and equipped to perform.  The specific usage and enumerations contained in this field may be found in the documentation provided in the referenceDoc field.  If referenceDoc not provided, users may consult the data provider.
/// Example: /// Example: W6
/// Constraints: Minimum length = 0, Maximum length = 4
func (rcv *Operatingunit) MsnPrimary() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(54))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Indicates the principal type of mission that an operating unit is organized and equipped to perform.  The specific usage and enumerations contained in this field may be found in the documentation provided in the referenceDoc field.  If referenceDoc not provided, users may consult the data provider.
/// Example: /// Example: W6
/// Constraints: Minimum length = 0, Maximum length = 4
/// Indicates the principal specialty type of mission that an operating unit is organized and equipped to perform.  The specific usage and enumerations contained in this field may be found in the documentation provided in the referenceDoc field.  If referenceDoc not provided, users may consult the data provider.
/// Example: /// Example: QK
/// Constraints: Minimum length = 0, Maximum length = 4
func (rcv *Operatingunit) MsnPrimarySpecialty() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(56))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Indicates the principal specialty type of mission that an operating unit is organized and equipped to perform.  The specific usage and enumerations contained in this field may be found in the documentation provided in the referenceDoc field.  If referenceDoc not provided, users may consult the data provider.
/// Example: /// Example: QK
/// Constraints: Minimum length = 0, Maximum length = 4
/// This field contains a value indicating whether the record is a master unit record (True) or a detail record (False).  Master records contain basic information that does not change over time for each unit that has been selected to be projected.
/// Example: /// Example: True
/// Constraints: No constraints specified.
func (rcv *Operatingunit) MasterUnit() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(58))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

/// This field contains a value indicating whether the record is a master unit record (True) or a detail record (False).  Master records contain basic information that does not change over time for each unit that has been selected to be projected.
/// Example: /// Example: True
/// Constraints: No constraints specified.
func (rcv *Operatingunit) MutateMasterUnit(n bool) bool {
	return rcv._tab.MutateBoolSlot(58, n)
}

/// This field contains a value indicating whether the record is a stylized operating unit record (True) or a regular operating unit  record (False).  A stylized operating unit is a type of operating unit with one set of equipment that can be assigned to one or more superiors.  A stylized operating unit is generally useful for lower echelon operating units where the number of operating units and types of equipment are equal for multiple organizations.  In lieu of creating unique operating unit records for each operating unit, a template is created for the operating unit and its equipment.  This template enables the user to assign the operating unit to multiple organizations.
/// Example: /// Example: True
/// Constraints: No constraints specified.
func (rcv *Operatingunit) StylizedUnit() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(60))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

/// This field contains a value indicating whether the record is a stylized operating unit record (True) or a regular operating unit  record (False).  A stylized operating unit is a type of operating unit with one set of equipment that can be assigned to one or more superiors.  A stylized operating unit is generally useful for lower echelon operating units where the number of operating units and types of equipment are equal for multiple organizations.  In lieu of creating unique operating unit records for each operating unit, a template is created for the operating unit and its equipment.  This template enables the user to assign the operating unit to multiple organizations.
/// Example: /// Example: True
/// Constraints: No constraints specified.
func (rcv *Operatingunit) MutateStylizedUnit(n bool) bool {
	return rcv._tab.MutateBoolSlot(60, n)
}

/// Combat status of a divisional or equivalent operating unit.  Currently, this data element applies only to operating units of the Former Soviet Union.  The specific usage and enumerations contained in this field may be found in the documentation provided in the referenceDoc field.  If referenceDoc not provided, users may consult the data provider.
/// Example: /// Example: 5
/// Constraints: Minimum length = 0, Maximum length = 1
func (rcv *Operatingunit) DivCat() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(62))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Combat status of a divisional or equivalent operating unit.  Currently, this data element applies only to operating units of the Former Soviet Union.  The specific usage and enumerations contained in this field may be found in the documentation provided in the referenceDoc field.  If referenceDoc not provided, users may consult the data provider.
/// Example: /// Example: 5
/// Constraints: Minimum length = 0, Maximum length = 1
/// Organizational level of the operating unit.  The specific usage and enumerations contained in this field may be found in the documentation provided in the referenceDoc field.  If referenceDoc not provided, users may consult the data provider.
/// Example: /// Example: SHIP
/// Constraints: Minimum length = 0, Maximum length = 4
func (rcv *Operatingunit) Echelon() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(64))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Organizational level of the operating unit.  The specific usage and enumerations contained in this field may be found in the documentation provided in the referenceDoc field.  If referenceDoc not provided, users may consult the data provider.
/// Example: /// Example: SHIP
/// Constraints: Minimum length = 0, Maximum length = 4
/// Indicates the major group or level to which an echelon belongs.   The specific usage and enumerations contained in this field may be found in the documentation provided in the referenceDoc field.  If referenceDoc not provided, users may consult the data provider.
/// Example: /// Example: 68
/// Constraints: Minimum length = 0, Maximum length = 2
func (rcv *Operatingunit) EchelonTier() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(66))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Indicates the major group or level to which an echelon belongs.   The specific usage and enumerations contained in this field may be found in the documentation provided in the referenceDoc field.  If referenceDoc not provided, users may consult the data provider.
/// Example: /// Example: 68
/// Constraints: Minimum length = 0, Maximum length = 2
/// Naval fleet to which an operating unit is assigned.   The specific usage and enumerations contained in this field may be found in the documentation provided in the referenceDoc field.  If referenceDoc not provided, users may consult the data provider.
/// Example: /// Example: A
/// Constraints: Minimum length = 0, Maximum length = 1
func (rcv *Operatingunit) FleetId() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(68))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Naval fleet to which an operating unit is assigned.   The specific usage and enumerations contained in this field may be found in the documentation provided in the referenceDoc field.  If referenceDoc not provided, users may consult the data provider.
/// Example: /// Example: A
/// Constraints: Minimum length = 0, Maximum length = 1
/// A code describing the amount of operating unit participation in a deployment.   The specific usage and enumerations contained in this field may be found in the documentation provided in the referenceDoc field.  If referenceDoc not provided, users may consult the data provider.
/// Example: /// Example: ND
/// Constraints: Minimum length = 0, Maximum length = 2
func (rcv *Operatingunit) DeployStatus() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(70))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// A code describing the amount of operating unit participation in a deployment.   The specific usage and enumerations contained in this field may be found in the documentation provided in the referenceDoc field.  If referenceDoc not provided, users may consult the data provider.
/// Example: /// Example: ND
/// Constraints: Minimum length = 0, Maximum length = 2
/// The country code of the observed flag flown.
/// Example: /// Example: IZ
/// Constraints: Minimum length = 0, Maximum length = 4
func (rcv *Operatingunit) FlagFlown() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(72))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The country code of the observed flag flown.
/// Example: /// Example: IZ
/// Constraints: Minimum length = 0, Maximum length = 4
/// A mathematical model of the earth used to calculate coordinates on a map.  US Forces use the World Geodetic System 1984 (WGS 84), but also use maps by allied countries with local datums.  The datum must be specified to ensure accuracy of coordinates.  The specific usage and enumerations contained in this field may be found in the documentation provided in the referenceDoc field.  If referenceDoc not provided, users may consult the data provider.
/// Example: /// Example: WGS
/// Constraints: Minimum length = 0, Maximum length = 16
func (rcv *Operatingunit) CoordDatum() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(74))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// A mathematical model of the earth used to calculate coordinates on a map.  US Forces use the World Geodetic System 1984 (WGS 84), but also use maps by allied countries with local datums.  The datum must be specified to ensure accuracy of coordinates.  The specific usage and enumerations contained in this field may be found in the documentation provided in the referenceDoc field.  If referenceDoc not provided, users may consult the data provider.
/// Example: /// Example: WGS
/// Constraints: Minimum length = 0, Maximum length = 16
/// "Indicates any of the magnitudes that serve to define the position of a point by reference to a fixed figure, system of lines, etc.
/// Pos. 1-2.  Latitude Degrees     [00-90]
/// Pos. 3-4.  Latitude Minutes     [00-59]
/// Pos. 5-6.  Latitude Seconds     [00-59]
/// Pos. 7-9.  Latitude Thousandths Of Seconds   [000-999]  
/// Pos. 10. Latitude Hemisphere       [NS] 
/// Pos. 11-13. Longitude Degrees     [00-180] 
/// Pos. 14-15. Longitude Minutes     [00-59] 
/// Pos. 16-17. Longitude Seconds     [00-59] 
/// Pos. 18-20. Longitude Thousandths Of Seconds      [000-999]
/// Pos. 21. Longitude Hemisphere     [EW]
/// Pos. 1-21.  Unknown Latitude and Unknown Longitude [000000000U000000000U]]".
/// Example: /// Example: 340000000N0430000000E
/// Constraints: Minimum length = 0, Maximum length = 21
func (rcv *Operatingunit) Coord() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(76))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// "Indicates any of the magnitudes that serve to define the position of a point by reference to a fixed figure, system of lines, etc.
/// Pos. 1-2.  Latitude Degrees     [00-90]
/// Pos. 3-4.  Latitude Minutes     [00-59]
/// Pos. 5-6.  Latitude Seconds     [00-59]
/// Pos. 7-9.  Latitude Thousandths Of Seconds   [000-999]  
/// Pos. 10. Latitude Hemisphere       [NS] 
/// Pos. 11-13. Longitude Degrees     [00-180] 
/// Pos. 14-15. Longitude Minutes     [00-59] 
/// Pos. 16-17. Longitude Seconds     [00-59] 
/// Pos. 18-20. Longitude Thousandths Of Seconds      [000-999]
/// Pos. 21. Longitude Hemisphere     [EW]
/// Pos. 1-21.  Unknown Latitude and Unknown Longitude [000000000U000000000U]]".
/// Example: /// Example: 340000000N0430000000E
/// Constraints: Minimum length = 0, Maximum length = 21
/// Indicates the plus or minus error assessed against the method used to derive the coordinate.
/// Example: /// Example: 12.345
/// Constraints: No constraints specified.
func (rcv *Operatingunit) CoordDerivAcc() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(78))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Indicates the plus or minus error assessed against the method used to derive the coordinate.
/// Example: /// Example: 12.345
/// Constraints: No constraints specified.
func (rcv *Operatingunit) MutateCoordDerivAcc(n float64) bool {
	return rcv._tab.MutateFloat64Slot(78, n)
}

/// WGS84 latitude of the location, in degrees. -90 to 90 degrees (negative values south of equator).
/// Example: /// Example: 45.23
/// Constraints: No constraints specified.
func (rcv *Operatingunit) Lat() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(80))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// WGS84 latitude of the location, in degrees. -90 to 90 degrees (negative values south of equator).
/// Example: /// Example: 45.23
/// Constraints: No constraints specified.
func (rcv *Operatingunit) MutateLat(n float64) bool {
	return rcv._tab.MutateFloat64Slot(80, n)
}

/// WGS84 longitude of the location, in degrees. -180 to 180 degrees (negative values west of Prime Meridian).
/// Example: /// Example: 179.1
/// Constraints: No constraints specified.
func (rcv *Operatingunit) Lon() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(82))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// WGS84 longitude of the location, in degrees. -180 to 180 degrees (negative values west of Prime Meridian).
/// Example: /// Example: 179.1
/// Constraints: No constraints specified.
func (rcv *Operatingunit) MutateLon(n float64) bool {
	return rcv._tab.MutateFloat64Slot(82, n)
}

/// Ground elevation of the geographic coordinates referenced to (above or below) Mean Sea Level (MSL) vertical datum.
/// Example: /// Example: 123.45
/// Constraints: No constraints specified.
func (rcv *Operatingunit) ElevMsl() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(84))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Ground elevation of the geographic coordinates referenced to (above or below) Mean Sea Level (MSL) vertical datum.
/// Example: /// Example: 123.45
/// Constraints: No constraints specified.
func (rcv *Operatingunit) MutateElevMsl(n float64) bool {
	return rcv._tab.MutateFloat64Slot(84, n)
}

/// Indicates the confidence level expressed as a percent that a specific geometric spatial element, ELEVATION_MSL linear accuracy, has been vertically positioned to within a specified vertical accuracy.
/// Example: /// Example: 50
/// Constraints: No constraints specified.
func (rcv *Operatingunit) ElevMslConfLvl() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(86))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

/// Indicates the confidence level expressed as a percent that a specific geometric spatial element, ELEVATION_MSL linear accuracy, has been vertically positioned to within a specified vertical accuracy.
/// Example: /// Example: 50
/// Constraints: No constraints specified.
func (rcv *Operatingunit) MutateElevMslConfLvl(n int32) bool {
	return rcv._tab.MutateInt32Slot(86, n)
}

/// Indicates the plus or minus error assessed against the method used to derive the elevation.
/// Example: /// Example: 12.34
/// Constraints: No constraints specified.
func (rcv *Operatingunit) ElevMslDerivAcc() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(88))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Indicates the plus or minus error assessed against the method used to derive the elevation.
/// Example: /// Example: 12.34
/// Constraints: No constraints specified.
func (rcv *Operatingunit) MutateElevMslDerivAcc(n float64) bool {
	return rcv._tab.MutateFloat64Slot(88, n)
}

/// The distance between Mean Sea Level and a referenced ellipsoid.
/// Example: /// Example: 12.34
/// Constraints: No constraints specified.
func (rcv *Operatingunit) GeoidalMslSep() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(90))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// The distance between Mean Sea Level and a referenced ellipsoid.
/// Example: /// Example: 12.34
/// Constraints: No constraints specified.
func (rcv *Operatingunit) MutateGeoidalMslSep(n float64) bool {
	return rcv._tab.MutateFloat64Slot(90, n)
}

/// "Indicates the grid system used in the development of the milGrid coordinates. Values are:
/// UPS - Universal Polar System
/// UTM - Universal Transverse Mercator".
/// Example: /// Example: UTM
/// Constraints: Minimum length = 0, Maximum length = 3
func (rcv *Operatingunit) MilGridSys() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(92))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// "Indicates the grid system used in the development of the milGrid coordinates. Values are:
/// UPS - Universal Polar System
/// UTM - Universal Transverse Mercator".
/// Example: /// Example: UTM
/// Constraints: Minimum length = 0, Maximum length = 3
/// The Military Grid Reference System is the geocoordinate standard used by NATO militaries for locating points on Earth. The MGRS is derived from the Universal Transverse Mercator (UTM) grid system and the Universal Polar Stereographic (UPS) grid system, but uses a different labeling convention. The MGRS is used as geocode for the entire Earth. Example of an milgrid coordinate, or grid reference, would be 4QFJ12345678, which consists of three parts:
/// 4Q (grid zone designator, GZD)
/// FJ (the 100,000-meter square identifier)
/// 12345678 (numerical location; easting is 1234 and northing is 5678, in this case specifying a location with 10 m resolution).
/// Example: /// Example: 4QFJ12345678
/// Constraints: Minimum length = 0, Maximum length = 15
func (rcv *Operatingunit) MilGrid() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(94))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The Military Grid Reference System is the geocoordinate standard used by NATO militaries for locating points on Earth. The MGRS is derived from the Universal Transverse Mercator (UTM) grid system and the Universal Polar Stereographic (UPS) grid system, but uses a different labeling convention. The MGRS is used as geocode for the entire Earth. Example of an milgrid coordinate, or grid reference, would be 4QFJ12345678, which consists of three parts:
/// 4Q (grid zone designator, GZD)
/// FJ (the 100,000-meter square identifier)
/// 12345678 (numerical location; easting is 1234 and northing is 5678, in this case specifying a location with 10 m resolution).
/// Example: /// Example: 4QFJ12345678
/// Constraints: Minimum length = 0, Maximum length = 15
/// Universal Transverse Mercator (UTM) grid coordinates.
/// Pos. 1-2, UTM Zone Column   [01-60
/// Pos. 3, UTM Zone Row   [C-HJ-NP-X]
/// Pos. 4, UTM False Easting   [0-9]
/// Pos. 5-9, UTM Meter Easting    [0-9][0-9][0-9][0-9][0-9]
/// Pos. 10-11, UTM False Northing    [0-9][0-9]
/// Pos. 12-16, UTM Meter Northing    [0-9][0-9][0-9][0-9][0-9].
/// Example: /// Example: 19P4390691376966
/// Constraints: Minimum length = 0, Maximum length = 16
func (rcv *Operatingunit) Utm() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(96))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Universal Transverse Mercator (UTM) grid coordinates.
/// Pos. 1-2, UTM Zone Column   [01-60
/// Pos. 3, UTM Zone Row   [C-HJ-NP-X]
/// Pos. 4, UTM False Easting   [0-9]
/// Pos. 5-9, UTM Meter Easting    [0-9][0-9][0-9][0-9][0-9]
/// Pos. 10-11, UTM False Northing    [0-9][0-9]
/// Pos. 12-16, UTM Meter Northing    [0-9][0-9][0-9][0-9][0-9].
/// Example: /// Example: 19P4390691376966
/// Constraints: Minimum length = 0, Maximum length = 16
/// Air Defense District (ADD) or Air Defense Area (ADA) in which the geographic coordinates reside.
/// Example: /// Example: AL006
/// Constraints: Minimum length = 0, Maximum length = 5
func (rcv *Operatingunit) AirDefArea() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(98))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Air Defense District (ADD) or Air Defense Area (ADA) in which the geographic coordinates reside.
/// Example: /// Example: AL006
/// Constraints: Minimum length = 0, Maximum length = 5
/// Political subdivision in which the geographic coordinates reside.  The specific usage and enumerations contained in this field may be found in the documentation provided in the referenceDoc field.  If referenceDoc not provided, users may consult the data provider.
/// Example: /// Example: IZ07
/// Constraints: Minimum length = 0, Maximum length = 7
func (rcv *Operatingunit) PolSubdiv() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(100))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Political subdivision in which the geographic coordinates reside.  The specific usage and enumerations contained in this field may be found in the documentation provided in the referenceDoc field.  If referenceDoc not provided, users may consult the data provider.
/// Example: /// Example: IZ07
/// Constraints: Minimum length = 0, Maximum length = 7
/// A standard scheme for symbol coding enabling the transfer, display and use of symbols and graphics among information systems, as per MIL-STD 2525B, and supported by the element AFFILIATION.
/// Example: /// Example: SOGPU----------
/// Constraints: Minimum length = 0, Maximum length = 15
func (rcv *Operatingunit) SymCode() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(102))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// A standard scheme for symbol coding enabling the transfer, display and use of symbols and graphics among information systems, as per MIL-STD 2525B, and supported by the element AFFILIATION.
/// Example: /// Example: SOGPU----------
/// Constraints: Minimum length = 0, Maximum length = 15
/// Indicates the importance of the operating unit to the OES or MIR system.  This data element is restricted to update by DIA (DB-4). Valid values are:
/// 0 - Does not meet criteria above
/// 1 - Primary importance to system
/// 2 - Secondary importance to system
/// 3 - Tertiary importance to system
/// O - Other. Explain in Remarks.
/// Example: /// Example: 1
/// Constraints: Minimum length = 0, Maximum length = 1
func (rcv *Operatingunit) ClassRating() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(104))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Indicates the importance of the operating unit to the OES or MIR system.  This data element is restricted to update by DIA (DB-4). Valid values are:
/// 0 - Does not meet criteria above
/// 1 - Primary importance to system
/// 2 - Secondary importance to system
/// 3 - Tertiary importance to system
/// O - Other. Explain in Remarks.
/// Example: /// Example: 1
/// Constraints: Minimum length = 0, Maximum length = 1
/// Validity and currency of the data in the record to be used in conjunction with the other elements in the record as defined by SOPs. Values are:
/// A - Active
/// I - Inactive
/// K - Acknowledged
/// L - Local
/// Q - A nominated (NOM) or Data Change Request (DCR) record
/// R - Production reduced by CMD decision
/// W - Working Record.
/// Example: /// Example: A
/// Constraints: Minimum length = 0, Maximum length = 1
func (rcv *Operatingunit) RecStatus() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(106))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Validity and currency of the data in the record to be used in conjunction with the other elements in the record as defined by SOPs. Values are:
/// A - Active
/// I - Inactive
/// K - Acknowledged
/// L - Local
/// Q - A nominated (NOM) or Data Change Request (DCR) record
/// R - Production reduced by CMD decision
/// W - Working Record.
/// Example: /// Example: A
/// Constraints: Minimum length = 0, Maximum length = 1
/// Date on which the data in the record was last reviewed by the responsible analyst for accuracy and currency.  This date cannot be greater than the current date.
/// Example: /// Example: 2008-06-10
/// Constraints: No constraints specified.
func (rcv *Operatingunit) ReviewDate() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(108))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Date on which the data in the record was last reviewed by the responsible analyst for accuracy and currency.  This date cannot be greater than the current date.
/// Example: /// Example: 2008-06-10
/// Constraints: No constraints specified.
/// Responsible Producer - Organization that is responsible for the maintenance of the record.
/// Example: /// Example: RT
/// Constraints: Minimum length = 0, Maximum length = 4
func (rcv *Operatingunit) ResProd() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(110))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Responsible Producer - Organization that is responsible for the maintenance of the record.
/// Example: /// Example: RT
/// Constraints: Minimum length = 0, Maximum length = 4
/// The reference documentiation that specifies the usage and enumerations contained in this record. If referenceDoc not provided, users may consult the data provider.
/// Example: /// Example: Provider Reference Documentation
/// Constraints: Minimum length = 0, Maximum length = 128
func (rcv *Operatingunit) ReferenceDoc() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(112))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The reference documentiation that specifies the usage and enumerations contained in this record. If referenceDoc not provided, users may consult the data provider.
/// Example: /// Example: Provider Reference Documentation
/// Constraints: Minimum length = 0, Maximum length = 128
/// Remarks contain amplifying information for a specific service. The information may contain context and interpretations for consumer use.
/// Example: /// Example: No example provided.
/// Constraints: No constraints specified.
func (rcv *Operatingunit) OperatingUnitRemarks(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(114))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *Operatingunit) OperatingUnitRemarksLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(114))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

/// Remarks contain amplifying information for a specific service. The information may contain context and interpretations for consumer use.
/// Example: /// Example: No example provided.
/// Constraints: No constraints specified.
/// Time the row was created in the database, auto-populated by the system.
/// Example: /// Example: 2018-01-01T16:00:00.123Z
/// Constraints: No constraints specified.
func (rcv *Operatingunit) CreatedAt() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(116))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Time the row was created in the database, auto-populated by the system.
/// Example: /// Example: 2018-01-01T16:00:00.123Z
/// Constraints: No constraints specified.
/// Application user who created the row in the database, auto-populated by the system.
/// Example: /// Example: some.user
/// Constraints: Minimum length = 1, Maximum length = 64
func (rcv *Operatingunit) CreatedBy() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(118))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Application user who created the row in the database, auto-populated by the system.
/// Example: /// Example: some.user
/// Constraints: Minimum length = 1, Maximum length = 64
/// Time the row was last updated in the database, auto-populated by the system.
/// Example: /// Example: 2018-01-01T16:00:00.123Z
/// Constraints: No constraints specified.
func (rcv *Operatingunit) UpdatedAt() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(120))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Time the row was last updated in the database, auto-populated by the system.
/// Example: /// Example: 2018-01-01T16:00:00.123Z
/// Constraints: No constraints specified.
/// Application user who updated the row in the database, auto-populated by the system.
/// Example: /// Example: some.user
/// Constraints: Minimum length = 0, Maximum length = 64
func (rcv *Operatingunit) UpdatedBy() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(122))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Application user who updated the row in the database, auto-populated by the system.
/// Example: /// Example: some.user
/// Constraints: Minimum length = 0, Maximum length = 64
/// Source of the data.
/// Example: /// Example: some.user
/// Constraints: Minimum length = 1, Maximum length = 64
func (rcv *Operatingunit) Source() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(124))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Source of the data.
/// Example: /// Example: some.user
/// Constraints: Minimum length = 1, Maximum length = 64
/// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
/// Example: /// Example: THIRD_PARTY_DATASOURCE
/// Constraints: Minimum length = 0, Maximum length = 64
func (rcv *Operatingunit) Origin() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(126))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
/// Example: /// Example: THIRD_PARTY_DATASOURCE
/// Constraints: Minimum length = 0, Maximum length = 64
/// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
/// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
/// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
/// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
/// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
/// Example: /// Example: TEST
/// Constraints: Minimum length = 1, Maximum length = 32
func (rcv *Operatingunit) DataMode() Operatingunit_dataMode_Enum {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(128))
	if o != 0 {
		return Operatingunit_dataMode_Enum(rcv._tab.GetInt8(o + rcv._tab.Pos))
	}
	return 0
}

/// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
/// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
/// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
/// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
/// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
/// Example: /// Example: TEST
/// Constraints: Minimum length = 1, Maximum length = 32
func (rcv *Operatingunit) MutateDataMode(n Operatingunit_dataMode_Enum) bool {
	return rcv._tab.MutateInt8Slot(128, int8(n))
}

/// No description provided.
/// Example: /// Example: No example provided.
/// Constraints: No constraints specified.
func (rcv *Operatingunit) Organization() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(130))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// No description provided.
/// Example: /// Example: No example provided.
/// Constraints: No constraints specified.
/// No description provided.
/// Example: /// Example: No example provided.
/// Constraints: No constraints specified.
func (rcv *Operatingunit) Location() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(132))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// No description provided.
/// Example: /// Example: No example provided.
/// Constraints: No constraints specified.
func OperatingunitStart(builder *flatbuffers.Builder) {
	builder.StartObject(65)
}
func OperatingunitAddIdOperatingUnit(builder *flatbuffers.Builder, idOperatingUnit flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(idOperatingUnit), 0)
}
func OperatingunitAddClassificationMarking(builder *flatbuffers.Builder, classificationMarking flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(classificationMarking), 0)
}
func OperatingunitAddAltOperatingUnitId(builder *flatbuffers.Builder, altOperatingUnitId flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(altOperatingUnitId), 0)
}
func OperatingunitAddName(builder *flatbuffers.Builder, name flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(3, flatbuffers.UOffsetT(name), 0)
}
func OperatingunitAddDescription(builder *flatbuffers.Builder, description flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(4, flatbuffers.UOffsetT(description), 0)
}
func OperatingunitAddIdLocation(builder *flatbuffers.Builder, idLocation flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(5, flatbuffers.UOffsetT(idLocation), 0)
}
func OperatingunitAddIdContact(builder *flatbuffers.Builder, idContact flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(6, flatbuffers.UOffsetT(idContact), 0)
}
func OperatingunitAddIdOrganization(builder *flatbuffers.Builder, idOrganization flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(7, flatbuffers.UOffsetT(idOrganization), 0)
}
func OperatingunitAddUnitIdentifier(builder *flatbuffers.Builder, unitIdentifier flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(8, flatbuffers.UOffsetT(unitIdentifier), 0)
}
func OperatingunitAddCountryCode(builder *flatbuffers.Builder, countryCode flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(9, flatbuffers.UOffsetT(countryCode), 0)
}
func OperatingunitAddAltCountryCode(builder *flatbuffers.Builder, altCountryCode flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(10, flatbuffers.UOffsetT(altCountryCode), 0)
}
func OperatingunitAddWac(builder *flatbuffers.Builder, wac flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(11, flatbuffers.UOffsetT(wac), 0)
}
func OperatingunitAddOperStatus(builder *flatbuffers.Builder, operStatus flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(12, flatbuffers.UOffsetT(operStatus), 0)
}
func OperatingunitAddCondition(builder *flatbuffers.Builder, condition flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(13, flatbuffers.UOffsetT(condition), 0)
}
func OperatingunitAddConditionAvail(builder *flatbuffers.Builder, conditionAvail flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(14, flatbuffers.UOffsetT(conditionAvail), 0)
}
func OperatingunitAddEval(builder *flatbuffers.Builder, eval int32) {
	builder.PrependInt32Slot(15, eval, 0)
}
func OperatingunitAddFpa(builder *flatbuffers.Builder, fpa flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(16, flatbuffers.UOffsetT(fpa), 0)
}
func OperatingunitAddIdent(builder *flatbuffers.Builder, ident flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(17, flatbuffers.UOffsetT(ident), 0)
}
func OperatingunitAddAllegiance(builder *flatbuffers.Builder, allegiance flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(18, flatbuffers.UOffsetT(allegiance), 0)
}
func OperatingunitAddAltAllegiance(builder *flatbuffers.Builder, altAllegiance flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(19, flatbuffers.UOffsetT(altAllegiance), 0)
}
func OperatingunitAddLocName(builder *flatbuffers.Builder, locName flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(20, flatbuffers.UOffsetT(locName), 0)
}
func OperatingunitAddLocReason(builder *flatbuffers.Builder, locReason flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(21, flatbuffers.UOffsetT(locReason), 0)
}
func OperatingunitAddForce(builder *flatbuffers.Builder, force flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(22, flatbuffers.UOffsetT(force), 0)
}
func OperatingunitAddForceName(builder *flatbuffers.Builder, forceName flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(23, flatbuffers.UOffsetT(forceName), 0)
}
func OperatingunitAddFunctRole(builder *flatbuffers.Builder, functRole flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(24, flatbuffers.UOffsetT(functRole), 0)
}
func OperatingunitAddMsnPrimary(builder *flatbuffers.Builder, msnPrimary flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(25, flatbuffers.UOffsetT(msnPrimary), 0)
}
func OperatingunitAddMsnPrimarySpecialty(builder *flatbuffers.Builder, msnPrimarySpecialty flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(26, flatbuffers.UOffsetT(msnPrimarySpecialty), 0)
}
func OperatingunitAddMasterUnit(builder *flatbuffers.Builder, masterUnit bool) {
	builder.PrependBoolSlot(27, masterUnit, false)
}
func OperatingunitAddStylizedUnit(builder *flatbuffers.Builder, stylizedUnit bool) {
	builder.PrependBoolSlot(28, stylizedUnit, false)
}
func OperatingunitAddDivCat(builder *flatbuffers.Builder, divCat flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(29, flatbuffers.UOffsetT(divCat), 0)
}
func OperatingunitAddEchelon(builder *flatbuffers.Builder, echelon flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(30, flatbuffers.UOffsetT(echelon), 0)
}
func OperatingunitAddEchelonTier(builder *flatbuffers.Builder, echelonTier flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(31, flatbuffers.UOffsetT(echelonTier), 0)
}
func OperatingunitAddFleetId(builder *flatbuffers.Builder, fleetId flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(32, flatbuffers.UOffsetT(fleetId), 0)
}
func OperatingunitAddDeployStatus(builder *flatbuffers.Builder, deployStatus flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(33, flatbuffers.UOffsetT(deployStatus), 0)
}
func OperatingunitAddFlagFlown(builder *flatbuffers.Builder, flagFlown flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(34, flatbuffers.UOffsetT(flagFlown), 0)
}
func OperatingunitAddCoordDatum(builder *flatbuffers.Builder, coordDatum flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(35, flatbuffers.UOffsetT(coordDatum), 0)
}
func OperatingunitAddCoord(builder *flatbuffers.Builder, coord flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(36, flatbuffers.UOffsetT(coord), 0)
}
func OperatingunitAddCoordDerivAcc(builder *flatbuffers.Builder, coordDerivAcc float64) {
	builder.PrependFloat64Slot(37, coordDerivAcc, 0.0)
}
func OperatingunitAddLat(builder *flatbuffers.Builder, lat float64) {
	builder.PrependFloat64Slot(38, lat, 0.0)
}
func OperatingunitAddLon(builder *flatbuffers.Builder, lon float64) {
	builder.PrependFloat64Slot(39, lon, 0.0)
}
func OperatingunitAddElevMsl(builder *flatbuffers.Builder, elevMsl float64) {
	builder.PrependFloat64Slot(40, elevMsl, 0.0)
}
func OperatingunitAddElevMslConfLvl(builder *flatbuffers.Builder, elevMslConfLvl int32) {
	builder.PrependInt32Slot(41, elevMslConfLvl, 0)
}
func OperatingunitAddElevMslDerivAcc(builder *flatbuffers.Builder, elevMslDerivAcc float64) {
	builder.PrependFloat64Slot(42, elevMslDerivAcc, 0.0)
}
func OperatingunitAddGeoidalMslSep(builder *flatbuffers.Builder, geoidalMslSep float64) {
	builder.PrependFloat64Slot(43, geoidalMslSep, 0.0)
}
func OperatingunitAddMilGridSys(builder *flatbuffers.Builder, milGridSys flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(44, flatbuffers.UOffsetT(milGridSys), 0)
}
func OperatingunitAddMilGrid(builder *flatbuffers.Builder, milGrid flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(45, flatbuffers.UOffsetT(milGrid), 0)
}
func OperatingunitAddUtm(builder *flatbuffers.Builder, utm flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(46, flatbuffers.UOffsetT(utm), 0)
}
func OperatingunitAddAirDefArea(builder *flatbuffers.Builder, airDefArea flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(47, flatbuffers.UOffsetT(airDefArea), 0)
}
func OperatingunitAddPolSubdiv(builder *flatbuffers.Builder, polSubdiv flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(48, flatbuffers.UOffsetT(polSubdiv), 0)
}
func OperatingunitAddSymCode(builder *flatbuffers.Builder, symCode flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(49, flatbuffers.UOffsetT(symCode), 0)
}
func OperatingunitAddClassRating(builder *flatbuffers.Builder, classRating flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(50, flatbuffers.UOffsetT(classRating), 0)
}
func OperatingunitAddRecStatus(builder *flatbuffers.Builder, recStatus flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(51, flatbuffers.UOffsetT(recStatus), 0)
}
func OperatingunitAddReviewDate(builder *flatbuffers.Builder, reviewDate flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(52, flatbuffers.UOffsetT(reviewDate), 0)
}
func OperatingunitAddResProd(builder *flatbuffers.Builder, resProd flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(53, flatbuffers.UOffsetT(resProd), 0)
}
func OperatingunitAddReferenceDoc(builder *flatbuffers.Builder, referenceDoc flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(54, flatbuffers.UOffsetT(referenceDoc), 0)
}
func OperatingunitAddOperatingUnitRemarks(builder *flatbuffers.Builder, operatingUnitRemarks flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(55, flatbuffers.UOffsetT(operatingUnitRemarks), 0)
}
func OperatingunitStartOperatingUnitRemarksVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func OperatingunitAddCreatedAt(builder *flatbuffers.Builder, createdAt flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(56, flatbuffers.UOffsetT(createdAt), 0)
}
func OperatingunitAddCreatedBy(builder *flatbuffers.Builder, createdBy flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(57, flatbuffers.UOffsetT(createdBy), 0)
}
func OperatingunitAddUpdatedAt(builder *flatbuffers.Builder, updatedAt flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(58, flatbuffers.UOffsetT(updatedAt), 0)
}
func OperatingunitAddUpdatedBy(builder *flatbuffers.Builder, updatedBy flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(59, flatbuffers.UOffsetT(updatedBy), 0)
}
func OperatingunitAddSource(builder *flatbuffers.Builder, source flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(60, flatbuffers.UOffsetT(source), 0)
}
func OperatingunitAddOrigin(builder *flatbuffers.Builder, origin flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(61, flatbuffers.UOffsetT(origin), 0)
}
func OperatingunitAddDataMode(builder *flatbuffers.Builder, dataMode Operatingunit_dataMode_Enum) {
	builder.PrependInt8Slot(62, int8(dataMode), 0)
}
func OperatingunitAddOrganization(builder *flatbuffers.Builder, organization flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(63, flatbuffers.UOffsetT(organization), 0)
}
func OperatingunitAddLocation(builder *flatbuffers.Builder, location flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(64, flatbuffers.UOffsetT(location), 0)
}
func OperatingunitEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
