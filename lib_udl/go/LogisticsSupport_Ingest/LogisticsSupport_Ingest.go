// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package LogisticsSupport_Ingest

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

/// /// Comprehensive logistical details concerning the planned support of maintenance operations required by an aircraft, including transportation information, supplies coordination, and service personnel.
type LogisticsSupport_Ingest struct {
	_tab flatbuffers.Table
}

const LogisticsSupport_IngestIdentifier = "LOGI"

func GetRootAsLogisticsSupport_Ingest(buf []byte, offset flatbuffers.UOffsetT) *LogisticsSupport_Ingest {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &LogisticsSupport_Ingest{}
	x.Init(buf, n+offset)
	return x
}

func FinishLogisticsSupport_IngestBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	identifierBytes := []byte(LogisticsSupport_IngestIdentifier)
	builder.FinishWithFileIdentifier(offset, identifierBytes)
}

func LogisticsSupport_IngestBufferHasIdentifier(buf []byte) bool {
	return flatbuffers.BufferHasIdentifier(buf, LogisticsSupport_IngestIdentifier)
}

func GetSizePrefixedRootAsLogisticsSupport_Ingest(buf []byte, offset flatbuffers.UOffsetT) *LogisticsSupport_Ingest {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &LogisticsSupport_Ingest{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedLogisticsSupport_IngestBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	identifierBytes := []byte(LogisticsSupport_IngestIdentifier)
	builder.FinishSizePrefixedWithFileIdentifier(offset, identifierBytes)
}

func SizePrefixedLogisticsSupport_IngestBufferHasIdentifier(buf []byte) bool {
	return flatbuffers.SizePrefixedBufferHasIdentifier(buf, LogisticsSupport_IngestIdentifier)
}

func (rcv *LogisticsSupport_Ingest) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *LogisticsSupport_Ingest) Table() flatbuffers.Table {
	return rcv._tab
}

/// Unique identifier of the record, auto-generated by the system if not provided on create operations.
/// Example: /// Example: LOGISTICS-SUPPORT-DETAILS UUID
/// Constraints: Minimum length = 1, Maximum length = 36
func (rcv *LogisticsSupport_Ingest) Id() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Unique identifier of the record, auto-generated by the system if not provided on create operations.
/// Example: /// Example: LOGISTICS-SUPPORT-DETAILS UUID
/// Constraints: Minimum length = 1, Maximum length = 36
/// Classification marking of the data in IC/CAPCO Portion-marked format.
/// Example: /// Example: U
/// Constraints: Minimum length = 1, Maximum length = 128
func (rcv *LogisticsSupport_Ingest) ClassificationMarking() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Classification marking of the data in IC/CAPCO Portion-marked format.
/// Example: /// Example: U
/// Constraints: Minimum length = 1, Maximum length = 128
/// Optional system identifier from external systs. This field has no meaning within UDL and is provided as a convenience for systems that require tracking of an internal system generated ID.
/// Example: /// Example: GDSSBL012307131347070165
/// Constraints: Minimum length = 0, Maximum length = 24
func (rcv *LogisticsSupport_Ingest) ExtSystemId() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Optional system identifier from external systs. This field has no meaning within UDL and is provided as a convenience for systems that require tracking of an internal system generated ID.
/// Example: /// Example: GDSSBL012307131347070165
/// Constraints: Minimum length = 0, Maximum length = 24
/// The tail number of the aircraft that is the subject of this LogisticsSupportDetails record.
/// Example: /// Example: 99290
/// Constraints: Minimum length = 0, Maximum length = 7
func (rcv *LogisticsSupport_Ingest) TailNumber() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The tail number of the aircraft that is the subject of this LogisticsSupportDetails record.
/// Example: /// Example: 99290
/// Constraints: Minimum length = 0, Maximum length = 7
/// The aircraft Model Design Series (MDS) designation (e.g. E-2C HAWKEYE, F-15 EAGLE, KC-130 HERCULES, etc.) of this aircraft. Intended as, but not constrained to, MIL-STD-6016 environment dependent specific type designations.
/// Example: /// Example: CO17A
/// Constraints: Minimum length = 0, Maximum length = 8
func (rcv *LogisticsSupport_Ingest) AircraftMds() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The aircraft Model Design Series (MDS) designation (e.g. E-2C HAWKEYE, F-15 EAGLE, KC-130 HERCULES, etc.) of this aircraft. Intended as, but not constrained to, MIL-STD-6016 environment dependent specific type designations.
/// Example: /// Example: CO17A
/// Constraints: Minimum length = 0, Maximum length = 8
/// The current ICAO of the aircraft that is the subject of this LogisticsSupportDetails record.
/// Example: /// Example: KCOS
/// Constraints: Minimum length = 0, Maximum length = 4
func (rcv *LogisticsSupport_Ingest) CurrIcao() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The current ICAO of the aircraft that is the subject of this LogisticsSupportDetails record.
/// Example: /// Example: KCOS
/// Constraints: Minimum length = 0, Maximum length = 4
/// The supplying ICAO of the aircraft that is the subject of this LogisticsSupportDetails record.
/// Example: /// Example: KCOS
/// Constraints: Minimum length = 0, Maximum length = 4
func (rcv *LogisticsSupport_Ingest) SuppIcao() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The supplying ICAO of the aircraft that is the subject of this LogisticsSupportDetails record.
/// Example: /// Example: KCOS
/// Constraints: Minimum length = 0, Maximum length = 4
/// The time this report was created, in ISO 8601 UTC format with millisecond precision.
/// Example: /// Example: 2023-07-13T13:47:00.123Z
/// Constraints: No constraints specified.
func (rcv *LogisticsSupport_Ingest) RptCreatedTime() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(18))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The time this report was created, in ISO 8601 UTC format with millisecond precision.
/// Example: /// Example: 2023-07-13T13:47:00.123Z
/// Constraints: No constraints specified.
/// The time this report was closed, in ISO 8601 UTC format with millisecond precision.
/// Example: /// Example: 2023-07-13T13:47:00.123Z
/// Constraints: No constraints specified.
func (rcv *LogisticsSupport_Ingest) RptClosedTime() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(20))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The time this report was closed, in ISO 8601 UTC format with millisecond precision.
/// Example: /// Example: 2023-07-13T13:47:00.123Z
/// Constraints: No constraints specified.
/// The time indicating when a given aircraft breaks for a mission essential reason. This datetime should be in ISO 8601 UTC format with millisecond precision.
/// Example: /// Example: 2023-07-13T13:47:00.123Z
/// Constraints: No constraints specified.
func (rcv *LogisticsSupport_Ingest) MeTime() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(22))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The time indicating when a given aircraft breaks for a mission essential reason. This datetime should be in ISO 8601 UTC format with millisecond precision.
/// Example: /// Example: 2023-07-13T13:47:00.123Z
/// Constraints: No constraints specified.
/// The time indicating when all mission essential problems with a given aircraft have been fixed and is mission capable. This datetime should be in ISO 8601 UTC format with millisecond precision.
/// Example: /// Example: 2023-07-13T13:47:00.123Z
/// Constraints: No constraints specified.
func (rcv *LogisticsSupport_Ingest) McTime() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(24))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The time indicating when all mission essential problems with a given aircraft have been fixed and is mission capable. This datetime should be in ISO 8601 UTC format with millisecond precision.
/// Example: /// Example: 2023-07-13T13:47:00.123Z
/// Constraints: No constraints specified.
/// This field identifies the pacing event for bringing the aircraft to Mission Capable status.  It is used in calculating the Estimated Time Mission Capable (ETMC) value.  Acceptable values are WA (Will Advise), INW (In Work), P+hhh.h (where P=parts and hhh.h is the number of hours up to 999 plus tenths of hours), EQ+hhh.h (EQ=equipment), MRT+hhh.h (MRT=maintenance recovery team).
/// Example: /// Example: WA
/// Constraints: Minimum length = 0, Maximum length = 9
func (rcv *LogisticsSupport_Ingest) LogisticAction() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(26))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// This field identifies the pacing event for bringing the aircraft to Mission Capable status.  It is used in calculating the Estimated Time Mission Capable (ETMC) value.  Acceptable values are WA (Will Advise), INW (In Work), P+hhh.h (where P=parts and hhh.h is the number of hours up to 999 plus tenths of hours), EQ+hhh.h (EQ=equipment), MRT+hhh.h (MRT=maintenance recovery team).
/// Example: /// Example: WA
/// Constraints: Minimum length = 0, Maximum length = 9
/// The identifier that represents a Logistics Master Record.
/// Example: /// Example: L62017
/// Constraints: Minimum length = 0, Maximum length = 6
func (rcv *LogisticsSupport_Ingest) LogisticsRecordId() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(28))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The identifier that represents a Logistics Master Record.
/// Example: /// Example: L62017
/// Constraints: Minimum length = 0, Maximum length = 6
/// The estimated time mission capable for the aircraft, in ISO 8601 UCT format with millisecond precision. This is the estimated time when the aircraft is mission ready.
/// Example: /// Example: 2023-07-13T13:47:00.123Z
/// Constraints: No constraints specified.
func (rcv *LogisticsSupport_Ingest) Etic() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(30))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The estimated time mission capable for the aircraft, in ISO 8601 UCT format with millisecond precision. This is the estimated time when the aircraft is mission ready.
/// Example: /// Example: 2023-07-13T13:47:00.123Z
/// Constraints: No constraints specified.
/// Logistics estimated time mission capable.
/// Example: /// Example: 2023-07-13T13:47:00.123Z
/// Constraints: No constraints specified.
func (rcv *LogisticsSupport_Ingest) Etmc() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(32))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Logistics estimated time mission capable.
/// Example: /// Example: 2023-07-13T13:47:00.123Z
/// Constraints: No constraints specified.
/// The maintenance status code of the aircraft which may be based on pilot descriptions or evaluation codes. Contact the source provider for details.
/// Example: /// Example: NMCMU
/// Constraints: Minimum length = 0, Maximum length = 6
func (rcv *LogisticsSupport_Ingest) MaintStatusCode() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(34))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The maintenance status code of the aircraft which may be based on pilot descriptions or evaluation codes. Contact the source provider for details.
/// Example: /// Example: NMCMU
/// Constraints: Minimum length = 0, Maximum length = 6
/// This is used to indicate whether a closed master record has been reopened.
/// Example: /// Example: True
/// Constraints: No constraints specified.
func (rcv *LogisticsSupport_Ingest) ReopenFlag() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(36))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

/// This is used to indicate whether a closed master record has been reopened.
/// Example: /// Example: True
/// Constraints: No constraints specified.
func (rcv *LogisticsSupport_Ingest) MutateReopenFlag(n bool) bool {
	return rcv._tab.MutateBoolSlot(36, n)
}

/// The organization that owns this logistics record.
/// Example: /// Example: EXAMPLE_OWNER
/// Constraints: Minimum length = 0, Maximum length = 250
func (rcv *LogisticsSupport_Ingest) Owner() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(38))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The organization that owns this logistics record.
/// Example: /// Example: EXAMPLE_OWNER
/// Constraints: Minimum length = 0, Maximum length = 250
/// Remarks associated with this LogisticsSupport record.
/// Example: /// Example: No example provided.
/// Constraints: No constraints specified.
func (rcv *LogisticsSupport_Ingest) LogisticsRemarks(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(40))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *LogisticsSupport_Ingest) LogisticsRemarksLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(40))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

/// Remarks associated with this LogisticsSupport record.
/// Example: /// Example: No example provided.
/// Constraints: No constraints specified.
/// Discrepancy information associated with this LogisticsSupport record.
/// Example: /// Example: No example provided.
/// Constraints: No constraints specified.
func (rcv *LogisticsSupport_Ingest) LogisticsDiscrepancyInfos(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(42))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *LogisticsSupport_Ingest) LogisticsDiscrepancyInfosLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(42))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

/// Discrepancy information associated with this LogisticsSupport record.
/// Example: /// Example: No example provided.
/// Constraints: No constraints specified.
/// Transportation plans associated with this LogisticsSupport record, used to coordinate maintenance efforts.
/// Example: /// Example: No example provided.
/// Constraints: No constraints specified.
func (rcv *LogisticsSupport_Ingest) LogisticsTransportationPlans(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(44))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *LogisticsSupport_Ingest) LogisticsTransportationPlansLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(44))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

/// Transportation plans associated with this LogisticsSupport record, used to coordinate maintenance efforts.
/// Example: /// Example: No example provided.
/// Constraints: No constraints specified.
/// Support items associated with this LogisticsSupport record.
/// Example: /// Example: No example provided.
/// Constraints: No constraints specified.
func (rcv *LogisticsSupport_Ingest) LogisticsSupportItems(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(46))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *LogisticsSupport_Ingest) LogisticsSupportItemsLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(46))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

/// Support items associated with this LogisticsSupport record.
/// Example: /// Example: No example provided.
/// Constraints: No constraints specified.
/// The originating source network on which this record was created, auto-populated by the system.
/// Example: /// Example: ORIG
/// Constraints: Minimum length = 0, Maximum length = 32
func (rcv *LogisticsSupport_Ingest) OrigNetwork() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(48))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The originating source network on which this record was created, auto-populated by the system.
/// Example: /// Example: ORIG
/// Constraints: Minimum length = 0, Maximum length = 32
/// Time the row was created in the database.
/// Example: /// Example: 2018-01-01T16:00:00.123Z
/// Constraints: No constraints specified.
func (rcv *LogisticsSupport_Ingest) CreatedAt() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(50))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Time the row was created in the database.
/// Example: /// Example: 2018-01-01T16:00:00.123Z
/// Constraints: No constraints specified.
/// Application user who created the row in the database.
/// Example: /// Example: some.user
/// Constraints: Minimum length = 1, Maximum length = 64
func (rcv *LogisticsSupport_Ingest) CreatedBy() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(52))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Application user who created the row in the database.
/// Example: /// Example: some.user
/// Constraints: Minimum length = 1, Maximum length = 64
/// Time the row was updated in the database, auto-populated by the system.
/// Example: /// Example: 2022-01-01T16:00:00.123Z
/// Constraints: No constraints specified.
func (rcv *LogisticsSupport_Ingest) UpdatedAt() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(54))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Time the row was updated in the database, auto-populated by the system.
/// Example: /// Example: 2022-01-01T16:00:00.123Z
/// Constraints: No constraints specified.
/// Application user who updated the row in the database, auto-populated by the system.
/// Example: /// Example: some.user
/// Constraints: Minimum length = 1, Maximum length = 64
func (rcv *LogisticsSupport_Ingest) UpdatedBy() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(56))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Application user who updated the row in the database, auto-populated by the system.
/// Example: /// Example: some.user
/// Constraints: Minimum length = 1, Maximum length = 64
/// Source of the data.
/// Example: /// Example: Bluestaq
/// Constraints: Minimum length = 1, Maximum length = 36
func (rcv *LogisticsSupport_Ingest) Source() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(58))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Source of the data.
/// Example: /// Example: Bluestaq
/// Constraints: Minimum length = 1, Maximum length = 36
/// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
/// Example: /// Example: THIRD_PARTY_DATASOURCE
/// Constraints: Minimum length = 0, Maximum length = 64
func (rcv *LogisticsSupport_Ingest) Origin() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(60))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
/// Example: /// Example: THIRD_PARTY_DATASOURCE
/// Constraints: Minimum length = 0, Maximum length = 64
/// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
/// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
/// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
/// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
/// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
/// Example: /// Example: TEST
/// Constraints: Minimum length = 1, Maximum length = 32
func (rcv *LogisticsSupport_Ingest) DataMode() LogisticsSupport_Ingest_dataMode_Enum {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(62))
	if o != 0 {
		return LogisticsSupport_Ingest_dataMode_Enum(rcv._tab.GetInt8(o + rcv._tab.Pos))
	}
	return 0
}

/// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
/// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
/// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
/// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
/// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
/// Example: /// Example: TEST
/// Constraints: Minimum length = 1, Maximum length = 32
func (rcv *LogisticsSupport_Ingest) MutateDataMode(n LogisticsSupport_Ingest_dataMode_Enum) bool {
	return rcv._tab.MutateInt8Slot(62, int8(n))
}

func LogisticsSupport_IngestStart(builder *flatbuffers.Builder) {
	builder.StartObject(30)
}
func LogisticsSupport_IngestAddId(builder *flatbuffers.Builder, id flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(id), 0)
}
func LogisticsSupport_IngestAddClassificationMarking(builder *flatbuffers.Builder, classificationMarking flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(classificationMarking), 0)
}
func LogisticsSupport_IngestAddExtSystemId(builder *flatbuffers.Builder, extSystemId flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(extSystemId), 0)
}
func LogisticsSupport_IngestAddTailNumber(builder *flatbuffers.Builder, tailNumber flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(3, flatbuffers.UOffsetT(tailNumber), 0)
}
func LogisticsSupport_IngestAddAircraftMds(builder *flatbuffers.Builder, aircraftMds flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(4, flatbuffers.UOffsetT(aircraftMds), 0)
}
func LogisticsSupport_IngestAddCurrIcao(builder *flatbuffers.Builder, currIcao flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(5, flatbuffers.UOffsetT(currIcao), 0)
}
func LogisticsSupport_IngestAddSuppIcao(builder *flatbuffers.Builder, suppIcao flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(6, flatbuffers.UOffsetT(suppIcao), 0)
}
func LogisticsSupport_IngestAddRptCreatedTime(builder *flatbuffers.Builder, rptCreatedTime flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(7, flatbuffers.UOffsetT(rptCreatedTime), 0)
}
func LogisticsSupport_IngestAddRptClosedTime(builder *flatbuffers.Builder, rptClosedTime flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(8, flatbuffers.UOffsetT(rptClosedTime), 0)
}
func LogisticsSupport_IngestAddMeTime(builder *flatbuffers.Builder, meTime flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(9, flatbuffers.UOffsetT(meTime), 0)
}
func LogisticsSupport_IngestAddMcTime(builder *flatbuffers.Builder, mcTime flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(10, flatbuffers.UOffsetT(mcTime), 0)
}
func LogisticsSupport_IngestAddLogisticAction(builder *flatbuffers.Builder, logisticAction flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(11, flatbuffers.UOffsetT(logisticAction), 0)
}
func LogisticsSupport_IngestAddLogisticsRecordId(builder *flatbuffers.Builder, logisticsRecordId flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(12, flatbuffers.UOffsetT(logisticsRecordId), 0)
}
func LogisticsSupport_IngestAddEtic(builder *flatbuffers.Builder, etic flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(13, flatbuffers.UOffsetT(etic), 0)
}
func LogisticsSupport_IngestAddEtmc(builder *flatbuffers.Builder, etmc flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(14, flatbuffers.UOffsetT(etmc), 0)
}
func LogisticsSupport_IngestAddMaintStatusCode(builder *flatbuffers.Builder, maintStatusCode flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(15, flatbuffers.UOffsetT(maintStatusCode), 0)
}
func LogisticsSupport_IngestAddReopenFlag(builder *flatbuffers.Builder, reopenFlag bool) {
	builder.PrependBoolSlot(16, reopenFlag, false)
}
func LogisticsSupport_IngestAddOwner(builder *flatbuffers.Builder, owner flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(17, flatbuffers.UOffsetT(owner), 0)
}
func LogisticsSupport_IngestAddLogisticsRemarks(builder *flatbuffers.Builder, logisticsRemarks flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(18, flatbuffers.UOffsetT(logisticsRemarks), 0)
}
func LogisticsSupport_IngestStartLogisticsRemarksVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func LogisticsSupport_IngestAddLogisticsDiscrepancyInfos(builder *flatbuffers.Builder, logisticsDiscrepancyInfos flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(19, flatbuffers.UOffsetT(logisticsDiscrepancyInfos), 0)
}
func LogisticsSupport_IngestStartLogisticsDiscrepancyInfosVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func LogisticsSupport_IngestAddLogisticsTransportationPlans(builder *flatbuffers.Builder, logisticsTransportationPlans flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(20, flatbuffers.UOffsetT(logisticsTransportationPlans), 0)
}
func LogisticsSupport_IngestStartLogisticsTransportationPlansVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func LogisticsSupport_IngestAddLogisticsSupportItems(builder *flatbuffers.Builder, logisticsSupportItems flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(21, flatbuffers.UOffsetT(logisticsSupportItems), 0)
}
func LogisticsSupport_IngestStartLogisticsSupportItemsVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func LogisticsSupport_IngestAddOrigNetwork(builder *flatbuffers.Builder, origNetwork flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(22, flatbuffers.UOffsetT(origNetwork), 0)
}
func LogisticsSupport_IngestAddCreatedAt(builder *flatbuffers.Builder, createdAt flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(23, flatbuffers.UOffsetT(createdAt), 0)
}
func LogisticsSupport_IngestAddCreatedBy(builder *flatbuffers.Builder, createdBy flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(24, flatbuffers.UOffsetT(createdBy), 0)
}
func LogisticsSupport_IngestAddUpdatedAt(builder *flatbuffers.Builder, updatedAt flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(25, flatbuffers.UOffsetT(updatedAt), 0)
}
func LogisticsSupport_IngestAddUpdatedBy(builder *flatbuffers.Builder, updatedBy flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(26, flatbuffers.UOffsetT(updatedBy), 0)
}
func LogisticsSupport_IngestAddSource(builder *flatbuffers.Builder, source flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(27, flatbuffers.UOffsetT(source), 0)
}
func LogisticsSupport_IngestAddOrigin(builder *flatbuffers.Builder, origin flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(28, flatbuffers.UOffsetT(origin), 0)
}
func LogisticsSupport_IngestAddDataMode(builder *flatbuffers.Builder, dataMode LogisticsSupport_Ingest_dataMode_Enum) {
	builder.PrependInt8Slot(29, int8(dataMode), 0)
}
func LogisticsSupport_IngestEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
