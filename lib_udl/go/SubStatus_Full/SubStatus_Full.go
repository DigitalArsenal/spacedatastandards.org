// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package SubStatus_Full

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

/// /// Additional sub-system or capability status for the parent entity.
type SubStatus_Full struct {
	_tab flatbuffers.Table
}

const SubStatus_FullIdentifier = "SUBS"

func GetRootAsSubStatus_Full(buf []byte, offset flatbuffers.UOffsetT) *SubStatus_Full {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &SubStatus_Full{}
	x.Init(buf, n+offset)
	return x
}

func FinishSubStatus_FullBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	identifierBytes := []byte(SubStatus_FullIdentifier)
	builder.FinishWithFileIdentifier(offset, identifierBytes)
}

func SubStatus_FullBufferHasIdentifier(buf []byte) bool {
	return flatbuffers.BufferHasIdentifier(buf, SubStatus_FullIdentifier)
}

func GetSizePrefixedRootAsSubStatus_Full(buf []byte, offset flatbuffers.UOffsetT) *SubStatus_Full {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &SubStatus_Full{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedSubStatus_FullBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	identifierBytes := []byte(SubStatus_FullIdentifier)
	builder.FinishSizePrefixedWithFileIdentifier(offset, identifierBytes)
}

func SizePrefixedSubStatus_FullBufferHasIdentifier(buf []byte) bool {
	return flatbuffers.SizePrefixedBufferHasIdentifier(buf, SubStatus_FullIdentifier)
}

func (rcv *SubStatus_Full) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *SubStatus_Full) Table() flatbuffers.Table {
	return rcv._tab
}

/// Unique identifier of the record, auto-generated by the system.
/// Example: /// Example: SUBSTATUS-ID
/// Constraints: Minimum length = 1, Maximum length = 36
func (rcv *SubStatus_Full) Id() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Unique identifier of the record, auto-generated by the system.
/// Example: /// Example: SUBSTATUS-ID
/// Constraints: Minimum length = 1, Maximum length = 36
/// Parent entity's sub-system or capability status: mwCap, mdCap, ssCap, etc.
/// Example: /// Example: mdCap
/// Constraints: Minimum length = 1, Maximum length = 16
func (rcv *SubStatus_Full) Type() SubStatus_Full_type_Enum {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return SubStatus_Full_type_Enum(rcv._tab.GetInt8(o + rcv._tab.Pos))
	}
	return 0
}

/// Parent entity's sub-system or capability status: mwCap, mdCap, ssCap, etc.
/// Example: /// Example: mdCap
/// Constraints: Minimum length = 1, Maximum length = 16
func (rcv *SubStatus_Full) MutateType(n SubStatus_Full_type_Enum) bool {
	return rcv._tab.MutateInt8Slot(6, int8(n))
}

/// Classification marking of the data in IC/CAPCO Portion-marked format.
/// Example: /// Example: U
/// Constraints: Minimum length = 1, Maximum length = 128
func (rcv *SubStatus_Full) ClassificationMarking() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Classification marking of the data in IC/CAPCO Portion-marked format.
/// Example: /// Example: U
/// Constraints: Minimum length = 1, Maximum length = 128
/// Id of the parent status.
/// Example: /// Example: REF-STATUS-ID
/// Constraints: Minimum length = 1, Maximum length = 36
func (rcv *SubStatus_Full) StatusId() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Id of the parent status.
/// Example: /// Example: REF-STATUS-ID
/// Constraints: Minimum length = 1, Maximum length = 36
/// Status of the sub-system/capability, e.g. FMC, NMC, PMC, UNK.
/// Example: /// Example: FMC
/// Constraints: Minimum length = 1, Maximum length = 16
func (rcv *SubStatus_Full) Status() SubStatus_Full_status_Enum {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return SubStatus_Full_status_Enum(rcv._tab.GetInt8(o + rcv._tab.Pos))
	}
	return 0
}

/// Status of the sub-system/capability, e.g. FMC, NMC, PMC, UNK.
/// Example: /// Example: FMC
/// Constraints: Minimum length = 1, Maximum length = 16
func (rcv *SubStatus_Full) MutateStatus(n SubStatus_Full_status_Enum) bool {
	return rcv._tab.MutateInt8Slot(12, int8(n))
}

/// Descriptions and/or comments associated with the sub-status.
/// Example: /// Example: Sample Notes
/// Constraints: Minimum length = 1, Maximum length = 4096
func (rcv *SubStatus_Full) Notes() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Descriptions and/or comments associated with the sub-status.
/// Example: /// Example: Sample Notes
/// Constraints: Minimum length = 1, Maximum length = 4096
/// Source of the data.
/// Example: /// Example: Bluestaq
/// Constraints: Minimum length = 1, Maximum length = 64
func (rcv *SubStatus_Full) Source() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Source of the data.
/// Example: /// Example: Bluestaq
/// Constraints: Minimum length = 1, Maximum length = 64
/// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
/// Example: /// Example: THIRD_PARTY_DATASOURCE
/// Constraints: Minimum length = 0, Maximum length = 64
func (rcv *SubStatus_Full) Origin() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(18))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
/// Example: /// Example: THIRD_PARTY_DATASOURCE
/// Constraints: Minimum length = 0, Maximum length = 64
/// The originating source network on which this record was created, auto-populated by the system.
/// Example: /// Example: TST1
/// Constraints: Minimum length = 1, Maximum length = 32
func (rcv *SubStatus_Full) OrigNetwork() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(20))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The originating source network on which this record was created, auto-populated by the system.
/// Example: /// Example: TST1
/// Constraints: Minimum length = 1, Maximum length = 32
/// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
/// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
/// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
/// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
/// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
/// Example: /// Example: TEST
/// Constraints: Minimum length = 1, Maximum length = 32
func (rcv *SubStatus_Full) DataMode() SubStatus_Full_dataMode_Enum {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(22))
	if o != 0 {
		return SubStatus_Full_dataMode_Enum(rcv._tab.GetInt8(o + rcv._tab.Pos))
	}
	return 0
}

/// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
/// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
/// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
/// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
/// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
/// Example: /// Example: TEST
/// Constraints: Minimum length = 1, Maximum length = 32
func (rcv *SubStatus_Full) MutateDataMode(n SubStatus_Full_dataMode_Enum) bool {
	return rcv._tab.MutateInt8Slot(22, int8(n))
}

/// Time the row was created in the database, auto-populated by the system.
/// Example: /// Example: 2018-01-01T16:00:00.123Z
/// Constraints: No constraints specified.
func (rcv *SubStatus_Full) CreatedAt() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(24))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Time the row was created in the database, auto-populated by the system.
/// Example: /// Example: 2018-01-01T16:00:00.123Z
/// Constraints: No constraints specified.
/// Application user who created the row in the database, auto-populated by the system.
/// Example: /// Example: some.user
/// Constraints: Minimum length = 1, Maximum length = 64
func (rcv *SubStatus_Full) CreatedBy() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(26))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Application user who created the row in the database, auto-populated by the system.
/// Example: /// Example: some.user
/// Constraints: Minimum length = 1, Maximum length = 64
/// Time the row was updated in the database, auto-populated by the system.
/// Example: /// Example: 2018-01-01T16:00:00.123Z
/// Constraints: No constraints specified.
func (rcv *SubStatus_Full) UpdatedAt() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(28))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Time the row was updated in the database, auto-populated by the system.
/// Example: /// Example: 2018-01-01T16:00:00.123Z
/// Constraints: No constraints specified.
/// Application user who updated the row in the database, auto-populated by the system.
/// Example: /// Example: some.user
/// Constraints: Minimum length = 1, Maximum length = 64
func (rcv *SubStatus_Full) UpdatedBy() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(30))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Application user who updated the row in the database, auto-populated by the system.
/// Example: /// Example: some.user
/// Constraints: Minimum length = 1, Maximum length = 64
func SubStatus_FullStart(builder *flatbuffers.Builder) {
	builder.StartObject(14)
}
func SubStatus_FullAddId(builder *flatbuffers.Builder, id flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(id), 0)
}
func SubStatus_FullAddType(builder *flatbuffers.Builder, type_ SubStatus_Full_type_Enum) {
	builder.PrependInt8Slot(1, int8(type_), 0)
}
func SubStatus_FullAddClassificationMarking(builder *flatbuffers.Builder, classificationMarking flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(classificationMarking), 0)
}
func SubStatus_FullAddStatusId(builder *flatbuffers.Builder, statusId flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(3, flatbuffers.UOffsetT(statusId), 0)
}
func SubStatus_FullAddStatus(builder *flatbuffers.Builder, status SubStatus_Full_status_Enum) {
	builder.PrependInt8Slot(4, int8(status), 0)
}
func SubStatus_FullAddNotes(builder *flatbuffers.Builder, notes flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(5, flatbuffers.UOffsetT(notes), 0)
}
func SubStatus_FullAddSource(builder *flatbuffers.Builder, source flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(6, flatbuffers.UOffsetT(source), 0)
}
func SubStatus_FullAddOrigin(builder *flatbuffers.Builder, origin flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(7, flatbuffers.UOffsetT(origin), 0)
}
func SubStatus_FullAddOrigNetwork(builder *flatbuffers.Builder, origNetwork flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(8, flatbuffers.UOffsetT(origNetwork), 0)
}
func SubStatus_FullAddDataMode(builder *flatbuffers.Builder, dataMode SubStatus_Full_dataMode_Enum) {
	builder.PrependInt8Slot(9, int8(dataMode), 0)
}
func SubStatus_FullAddCreatedAt(builder *flatbuffers.Builder, createdAt flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(10, flatbuffers.UOffsetT(createdAt), 0)
}
func SubStatus_FullAddCreatedBy(builder *flatbuffers.Builder, createdBy flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(11, flatbuffers.UOffsetT(createdBy), 0)
}
func SubStatus_FullAddUpdatedAt(builder *flatbuffers.Builder, updatedAt flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(12, flatbuffers.UOffsetT(updatedAt), 0)
}
func SubStatus_FullAddUpdatedBy(builder *flatbuffers.Builder, updatedBy flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(13, flatbuffers.UOffsetT(updatedBy), 0)
}
func SubStatus_FullEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
