// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package TAIUTC_Abridged

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

/// /// International Atomic Time (TAI) is a statistical atomic time scale based on a large number of clocks operating at standards laboratories around the world that is maintained by the Bureau International des Poids et Mesures; its unit interval is exactly one SI second at sea level. The origin of TAI is such that UT1-TAI is approximately 0 (zero) on January 1, 1958. TAI is not adjusted for leap seconds. 
/// Coordinated Universal Time (UTC) is defined by the CCIR Recommendation 460-4 (1986). It differs from TAI by the total number of leap seconds, so that UT1-UTC stays smaller than 0.9s in absolute value.   The decision to introduce a leap second in UTC is the responsibility of the International Earth Rotation Service (IERS). According to the CCIR Recommendation, first preference is given to the opportunities at the end of December and June, and second preference to those at the end of March and September. Since the system was introduced in 1972, only dates in June and December have been used.  TAI is expressed in terms of UTC by the relation TAI = UTC + dAT, where  dAT is the total algebraic sum of leap seconds.
/// The first leap second was introduced on June 30, 1972. The historical list of leap seconds can be found in this table.
type TAIUTC_Abridged struct {
	_tab flatbuffers.Table
}

const TAIUTC_AbridgedIdentifier = "TAIU"

func GetRootAsTAIUTC_Abridged(buf []byte, offset flatbuffers.UOffsetT) *TAIUTC_Abridged {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &TAIUTC_Abridged{}
	x.Init(buf, n+offset)
	return x
}

func FinishTAIUTC_AbridgedBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	identifierBytes := []byte(TAIUTC_AbridgedIdentifier)
	builder.FinishWithFileIdentifier(offset, identifierBytes)
}

func TAIUTC_AbridgedBufferHasIdentifier(buf []byte) bool {
	return flatbuffers.BufferHasIdentifier(buf, TAIUTC_AbridgedIdentifier)
}

func GetSizePrefixedRootAsTAIUTC_Abridged(buf []byte, offset flatbuffers.UOffsetT) *TAIUTC_Abridged {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &TAIUTC_Abridged{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedTAIUTC_AbridgedBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	identifierBytes := []byte(TAIUTC_AbridgedIdentifier)
	builder.FinishSizePrefixedWithFileIdentifier(offset, identifierBytes)
}

func SizePrefixedTAIUTC_AbridgedBufferHasIdentifier(buf []byte) bool {
	return flatbuffers.SizePrefixedBufferHasIdentifier(buf, TAIUTC_AbridgedIdentifier)
}

func (rcv *TAIUTC_Abridged) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *TAIUTC_Abridged) Table() flatbuffers.Table {
	return rcv._tab
}

/// Unique identifier of the record, auto-generated by the system.
/// Example: /// Example: TAIUTC-ID
/// Constraints: Minimum length = 1, Maximum length = 36
func (rcv *TAIUTC_Abridged) Id() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Unique identifier of the record, auto-generated by the system.
/// Example: /// Example: TAIUTC-ID
/// Constraints: Minimum length = 1, Maximum length = 36
/// Classification marking of the data in IC/CAPCO Portion-marked format.
/// Example: /// Example: U
/// Constraints: Minimum length = 1, Maximum length = 128
func (rcv *TAIUTC_Abridged) ClassificationMarking() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Classification marking of the data in IC/CAPCO Portion-marked format.
/// Example: /// Example: U
/// Constraints: Minimum length = 1, Maximum length = 128
/// Effective date/time for the leap second adjustment.
/// Example: /// Example: 2017-01-01T00:00:00.123Z
/// Constraints: No constraints specified.
func (rcv *TAIUTC_Abridged) AdjustmentDate() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Effective date/time for the leap second adjustment.
/// Example: /// Example: 2017-01-01T00:00:00.123Z
/// Constraints: No constraints specified.
/// Total/cumulative offset between TAI and UTC time as of adjustmentDate, in seconds.
/// Example: /// Example: 1.422818
/// Constraints: No constraints specified.
func (rcv *TAIUTC_Abridged) TaiUtc() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Total/cumulative offset between TAI and UTC time as of adjustmentDate, in seconds.
/// Example: /// Example: 1.422818
/// Constraints: No constraints specified.
func (rcv *TAIUTC_Abridged) MutateTaiUtc(n float64) bool {
	return rcv._tab.MutateFloat64Slot(10, n)
}

/// Multiplication factor of the leap second adjustment.
/// Example: /// Example: 0.001296
/// Constraints: No constraints specified.
func (rcv *TAIUTC_Abridged) MultiplicationFactor() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Multiplication factor of the leap second adjustment.
/// Example: /// Example: 0.001296
/// Constraints: No constraints specified.
func (rcv *TAIUTC_Abridged) MutateMultiplicationFactor(n float64) bool {
	return rcv._tab.MutateFloat64Slot(12, n)
}

/// Optional URI location in the document repository of the raw file parsed by the system to produce this record. To download the raw file, prepend https://udl-hostname/scs/download?id= to this value.
/// Example: /// Example: /TAI/2019/01/22/4318471007562436-tai-utc.dat
/// Constraints: Minimum length = 0, Maximum length = 256
func (rcv *TAIUTC_Abridged) RawFileUri() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Optional URI location in the document repository of the raw file parsed by the system to produce this record. To download the raw file, prepend https://udl-hostname/scs/download?id= to this value.
/// Example: /// Example: /TAI/2019/01/22/4318471007562436-tai-utc.dat
/// Constraints: Minimum length = 0, Maximum length = 256
/// Source of the data.
/// Example: /// Example: Bluestaq
/// Constraints: Minimum length = 1, Maximum length = 64
func (rcv *TAIUTC_Abridged) Source() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Source of the data.
/// Example: /// Example: Bluestaq
/// Constraints: Minimum length = 1, Maximum length = 64
/// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
/// Example: /// Example: THIRD_PARTY_DATASOURCE
/// Constraints: Minimum length = 0, Maximum length = 64
func (rcv *TAIUTC_Abridged) Origin() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(18))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
/// Example: /// Example: THIRD_PARTY_DATASOURCE
/// Constraints: Minimum length = 0, Maximum length = 64
/// The originating source network on which this record was created, auto-populated by the system.
/// Example: /// Example: ORIG
/// Constraints: Minimum length = 1, Maximum length = 32
func (rcv *TAIUTC_Abridged) OrigNetwork() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(20))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The originating source network on which this record was created, auto-populated by the system.
/// Example: /// Example: ORIG
/// Constraints: Minimum length = 1, Maximum length = 32
/// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
/// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
/// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
/// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
/// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
/// Example: /// Example: TEST
/// Constraints: Minimum length = 1, Maximum length = 32
func (rcv *TAIUTC_Abridged) DataMode() TAIUTC_Abridged_dataMode_Enum {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(22))
	if o != 0 {
		return TAIUTC_Abridged_dataMode_Enum(rcv._tab.GetInt8(o + rcv._tab.Pos))
	}
	return 0
}

/// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
/// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
/// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
/// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
/// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
/// Example: /// Example: TEST
/// Constraints: Minimum length = 1, Maximum length = 32
func (rcv *TAIUTC_Abridged) MutateDataMode(n TAIUTC_Abridged_dataMode_Enum) bool {
	return rcv._tab.MutateInt8Slot(22, int8(n))
}

/// Time the row was created in the database, auto-populated by the system.
/// Example: /// Example: 2018-01-01T16:00:00.123Z
/// Constraints: No constraints specified.
func (rcv *TAIUTC_Abridged) CreatedAt() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(24))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Time the row was created in the database, auto-populated by the system.
/// Example: /// Example: 2018-01-01T16:00:00.123Z
/// Constraints: No constraints specified.
/// Application user who created the row in the database, auto-populated by the system.
/// Example: /// Example: some.user
/// Constraints: Minimum length = 1, Maximum length = 64
func (rcv *TAIUTC_Abridged) CreatedBy() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(26))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Application user who created the row in the database, auto-populated by the system.
/// Example: /// Example: some.user
/// Constraints: Minimum length = 1, Maximum length = 64
func TAIUTC_AbridgedStart(builder *flatbuffers.Builder) {
	builder.StartObject(12)
}
func TAIUTC_AbridgedAddId(builder *flatbuffers.Builder, id flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(id), 0)
}
func TAIUTC_AbridgedAddClassificationMarking(builder *flatbuffers.Builder, classificationMarking flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(classificationMarking), 0)
}
func TAIUTC_AbridgedAddAdjustmentDate(builder *flatbuffers.Builder, adjustmentDate flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(adjustmentDate), 0)
}
func TAIUTC_AbridgedAddTaiUtc(builder *flatbuffers.Builder, taiUtc float64) {
	builder.PrependFloat64Slot(3, taiUtc, 0.0)
}
func TAIUTC_AbridgedAddMultiplicationFactor(builder *flatbuffers.Builder, multiplicationFactor float64) {
	builder.PrependFloat64Slot(4, multiplicationFactor, 0.0)
}
func TAIUTC_AbridgedAddRawFileUri(builder *flatbuffers.Builder, rawFileUri flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(5, flatbuffers.UOffsetT(rawFileUri), 0)
}
func TAIUTC_AbridgedAddSource(builder *flatbuffers.Builder, source flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(6, flatbuffers.UOffsetT(source), 0)
}
func TAIUTC_AbridgedAddOrigin(builder *flatbuffers.Builder, origin flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(7, flatbuffers.UOffsetT(origin), 0)
}
func TAIUTC_AbridgedAddOrigNetwork(builder *flatbuffers.Builder, origNetwork flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(8, flatbuffers.UOffsetT(origNetwork), 0)
}
func TAIUTC_AbridgedAddDataMode(builder *flatbuffers.Builder, dataMode TAIUTC_Abridged_dataMode_Enum) {
	builder.PrependInt8Slot(9, int8(dataMode), 0)
}
func TAIUTC_AbridgedAddCreatedAt(builder *flatbuffers.Builder, createdAt flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(10, flatbuffers.UOffsetT(createdAt), 0)
}
func TAIUTC_AbridgedAddCreatedBy(builder *flatbuffers.Builder, createdBy flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(11, flatbuffers.UOffsetT(createdBy), 0)
}
func TAIUTC_AbridgedEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
