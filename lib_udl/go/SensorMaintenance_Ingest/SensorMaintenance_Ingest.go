// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package SensorMaintenance_Ingest

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

/// /// Maintenance schedule and operational status of Sensor.
type SensorMaintenance_Ingest struct {
	_tab flatbuffers.Table
}

const SensorMaintenance_IngestIdentifier = "SENS"

func GetRootAsSensorMaintenance_Ingest(buf []byte, offset flatbuffers.UOffsetT) *SensorMaintenance_Ingest {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &SensorMaintenance_Ingest{}
	x.Init(buf, n+offset)
	return x
}

func FinishSensorMaintenance_IngestBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	identifierBytes := []byte(SensorMaintenance_IngestIdentifier)
	builder.FinishWithFileIdentifier(offset, identifierBytes)
}

func SensorMaintenance_IngestBufferHasIdentifier(buf []byte) bool {
	return flatbuffers.BufferHasIdentifier(buf, SensorMaintenance_IngestIdentifier)
}

func GetSizePrefixedRootAsSensorMaintenance_Ingest(buf []byte, offset flatbuffers.UOffsetT) *SensorMaintenance_Ingest {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &SensorMaintenance_Ingest{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedSensorMaintenance_IngestBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	identifierBytes := []byte(SensorMaintenance_IngestIdentifier)
	builder.FinishSizePrefixedWithFileIdentifier(offset, identifierBytes)
}

func SizePrefixedSensorMaintenance_IngestBufferHasIdentifier(buf []byte) bool {
	return flatbuffers.SizePrefixedBufferHasIdentifier(buf, SensorMaintenance_IngestIdentifier)
}

func (rcv *SensorMaintenance_Ingest) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *SensorMaintenance_Ingest) Table() flatbuffers.Table {
	return rcv._tab
}

/// Unique identifier of the record, auto-generated by the system.
/// Example: /// Example: SENSORMAINTENANCE-ID
/// Constraints: Minimum length = 1, Maximum length = 36
func (rcv *SensorMaintenance_Ingest) Id() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Unique identifier of the record, auto-generated by the system.
/// Example: /// Example: SENSORMAINTENANCE-ID
/// Constraints: Minimum length = 1, Maximum length = 36
/// Classification marking of the data in IC/CAPCO Portion-marked format.
/// Example: /// Example: U
/// Constraints: Minimum length = 1, Maximum length = 128
func (rcv *SensorMaintenance_Ingest) ClassificationMarking() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Classification marking of the data in IC/CAPCO Portion-marked format.
/// Example: /// Example: U
/// Constraints: Minimum length = 1, Maximum length = 128
/// The site to which this item applies.  NOTE - this site code is COLT specific and may not identically correspond to other UDL site IDs.
/// Example: /// Example: site01
/// Constraints: Minimum length = 1, Maximum length = 6
func (rcv *SensorMaintenance_Ingest) SiteCode() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The site to which this item applies.  NOTE - this site code is COLT specific and may not identically correspond to other UDL site IDs.
/// Example: /// Example: site01
/// Constraints: Minimum length = 1, Maximum length = 6
/// UUID of the sensor.
/// Example: /// Example: idSensor
/// Constraints: Minimum length = 0, Maximum length = 36
func (rcv *SensorMaintenance_Ingest) IdSensor() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// UUID of the sensor.
/// Example: /// Example: idSensor
/// Constraints: Minimum length = 0, Maximum length = 36
/// The planned outage start time in ISO8601 UTC format.
/// Example: /// Example: 2018-01-01T16:00:00.123456Z
/// Constraints: No constraints specified.
func (rcv *SensorMaintenance_Ingest) StartTime() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The planned outage start time in ISO8601 UTC format.
/// Example: /// Example: 2018-01-01T16:00:00.123456Z
/// Constraints: No constraints specified.
/// The planned outage end time in ISO8601 UTC format.
/// Example: /// Example: 2018-01-01T16:00:00.123456Z
/// Constraints: No constraints specified.
func (rcv *SensorMaintenance_Ingest) EndTime() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The planned outage end time in ISO8601 UTC format.
/// Example: /// Example: 2018-01-01T16:00:00.123456Z
/// Constraints: No constraints specified.
/// The minimum time required to recall this activity, expressed as ddd:hh:mm.
/// Example: /// Example: 128:16:52
/// Constraints: Minimum length = 0, Maximum length = 20
func (rcv *SensorMaintenance_Ingest) Recall() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The minimum time required to recall this activity, expressed as ddd:hh:mm.
/// Example: /// Example: 128:16:52
/// Constraints: Minimum length = 0, Maximum length = 20
/// The duration of the planned outage, expressed as ddd:hh:mm.
/// Example: /// Example: 128:16:52
/// Constraints: Minimum length = 0, Maximum length = 20
func (rcv *SensorMaintenance_Ingest) Duration() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(18))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The duration of the planned outage, expressed as ddd:hh:mm.
/// Example: /// Example: 128:16:52
/// Constraints: Minimum length = 0, Maximum length = 20
/// The Missile Warning operational capability of this maintenance item.  Typical values are G, Y, R, and - for non-applicable sites.
/// Example: /// Example: G
/// Constraints: Minimum length = 0, Maximum length = 3
func (rcv *SensorMaintenance_Ingest) MwOpsCap() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(20))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The Missile Warning operational capability of this maintenance item.  Typical values are G, Y, R, and - for non-applicable sites.
/// Example: /// Example: G
/// Constraints: Minimum length = 0, Maximum length = 3
/// The Space Surveillance operational capability of this maintenance item.  Typical values are G, Y, R, and - for non-applicable sites.
/// Example: /// Example: Y
/// Constraints: Minimum length = 0, Maximum length = 3
func (rcv *SensorMaintenance_Ingest) SsOpsCap() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(22))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The Space Surveillance operational capability of this maintenance item.  Typical values are G, Y, R, and - for non-applicable sites.
/// Example: /// Example: Y
/// Constraints: Minimum length = 0, Maximum length = 3
/// The Missile Defense operational capability of this maintenance item.  Typical values are G, Y, R, and - for non-applicable sites.
/// Example: /// Example: R
/// Constraints: Minimum length = 0, Maximum length = 3
func (rcv *SensorMaintenance_Ingest) MdOpsCap() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(24))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The Missile Defense operational capability of this maintenance item.  Typical values are G, Y, R, and - for non-applicable sites.
/// Example: /// Example: R
/// Constraints: Minimum length = 0, Maximum length = 3
/// The sensor face(s) to which this COLT maintenance item applies, if applicable.
/// Example: /// Example: impactedFaces
/// Constraints: Minimum length = 0, Maximum length = 50
func (rcv *SensorMaintenance_Ingest) ImpactedFaces() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(26))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The sensor face(s) to which this COLT maintenance item applies, if applicable.
/// Example: /// Example: impactedFaces
/// Constraints: Minimum length = 0, Maximum length = 50
/// The mission capability status of the equipment (e.g. FMC, NMC, PMC, UNK, etc.).
/// Example: /// Example: FMC
/// Constraints: Minimum length = 0, Maximum length = 20
func (rcv *SensorMaintenance_Ingest) EquipStatus() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(28))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The mission capability status of the equipment (e.g. FMC, NMC, PMC, UNK, etc.).
/// Example: /// Example: FMC
/// Constraints: Minimum length = 0, Maximum length = 20
/// Description of the activity taking place during this outage.
/// Example: /// Example: Activity Description
/// Constraints: No constraints specified.
func (rcv *SensorMaintenance_Ingest) Activity() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(30))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Description of the activity taking place during this outage.
/// Example: /// Example: Activity Description
/// Constraints: No constraints specified.
/// Remarks concerning this outage.
/// Example: /// Example: Remarks
/// Constraints: No constraints specified.
func (rcv *SensorMaintenance_Ingest) Remark() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(32))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Remarks concerning this outage.
/// Example: /// Example: Remarks
/// Constraints: No constraints specified.
/// The name of the requestor.
/// Example: /// Example: requestor
/// Constraints: Minimum length = 0, Maximum length = 50
func (rcv *SensorMaintenance_Ingest) Requestor() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(34))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The name of the requestor.
/// Example: /// Example: requestor
/// Constraints: Minimum length = 0, Maximum length = 50
/// The name of the changer, if applicable.
/// Example: /// Example: changer
/// Constraints: Minimum length = 0, Maximum length = 50
func (rcv *SensorMaintenance_Ingest) Changer() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(36))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The name of the changer, if applicable.
/// Example: /// Example: changer
/// Constraints: Minimum length = 0, Maximum length = 50
/// The name of the approver.
/// Example: /// Example: approver
/// Constraints: Minimum length = 0, Maximum length = 50
func (rcv *SensorMaintenance_Ingest) Approver() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(38))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The name of the approver.
/// Example: /// Example: approver
/// Constraints: Minimum length = 0, Maximum length = 50
/// COLT EOWID.
/// Example: /// Example: eowId
/// Constraints: Minimum length = 0, Maximum length = 20
func (rcv *SensorMaintenance_Ingest) EowId() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(40))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// COLT EOWID.
/// Example: /// Example: eowId
/// Constraints: Minimum length = 0, Maximum length = 20
/// The revision number for this maintenance item.
/// Example: /// Example: rev
/// Constraints: Minimum length = 0, Maximum length = 5
func (rcv *SensorMaintenance_Ingest) Rev() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(42))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The revision number for this maintenance item.
/// Example: /// Example: rev
/// Constraints: Minimum length = 0, Maximum length = 5
/// The priority of this maintenance item.
/// Example: /// Example: low
/// Constraints: Minimum length = 0, Maximum length = 5
func (rcv *SensorMaintenance_Ingest) Priority() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(44))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The priority of this maintenance item.
/// Example: /// Example: low
/// Constraints: Minimum length = 0, Maximum length = 5
/// Release.
/// Example: /// Example: rel
/// Constraints: Minimum length = 0, Maximum length = 5
func (rcv *SensorMaintenance_Ingest) Rel() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(46))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Release.
/// Example: /// Example: rel
/// Constraints: Minimum length = 0, Maximum length = 5
/// The internal COLT line number assigned to this item.
/// Example: /// Example: lineNumber
/// Constraints: Minimum length = 0, Maximum length = 20
func (rcv *SensorMaintenance_Ingest) LineNumber() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(48))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The internal COLT line number assigned to this item.
/// Example: /// Example: lineNumber
/// Constraints: Minimum length = 0, Maximum length = 20
/// The name of the resource(s) affected by this maintenance item.
/// Example: /// Example: resource
/// Constraints: Minimum length = 0, Maximum length = 255
func (rcv *SensorMaintenance_Ingest) Resource() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(50))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The name of the resource(s) affected by this maintenance item.
/// Example: /// Example: resource
/// Constraints: Minimum length = 0, Maximum length = 255
/// The date that this item became inactive in ISO8601 UTC format.
/// Example: /// Example: 2018-01-01T16:00:00.123Z
/// Constraints: No constraints specified.
func (rcv *SensorMaintenance_Ingest) InactiveDate() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(52))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The date that this item became inactive in ISO8601 UTC format.
/// Example: /// Example: 2018-01-01T16:00:00.123Z
/// Constraints: No constraints specified.
/// Time the row was created in the database, auto-populated by the system.
/// Example: /// Example: 2018-01-01T16:00:00.123Z
/// Constraints: No constraints specified.
func (rcv *SensorMaintenance_Ingest) CreatedAt() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(54))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Time the row was created in the database, auto-populated by the system.
/// Example: /// Example: 2018-01-01T16:00:00.123Z
/// Constraints: No constraints specified.
/// Application user who created the row in the database, auto-populated by the system.
/// Example: /// Example: some.user
/// Constraints: Minimum length = 1, Maximum length = 64
func (rcv *SensorMaintenance_Ingest) CreatedBy() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(56))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Application user who created the row in the database, auto-populated by the system.
/// Example: /// Example: some.user
/// Constraints: Minimum length = 1, Maximum length = 64
/// Source of the data.
/// Example: /// Example: Bluestaq
/// Constraints: Minimum length = 1, Maximum length = 64
func (rcv *SensorMaintenance_Ingest) Source() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(58))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Source of the data.
/// Example: /// Example: Bluestaq
/// Constraints: Minimum length = 1, Maximum length = 64
/// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
/// Example: /// Example: THIRD_PARTY_DATASOURCE
/// Constraints: Minimum length = 0, Maximum length = 64
func (rcv *SensorMaintenance_Ingest) Origin() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(60))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
/// Example: /// Example: THIRD_PARTY_DATASOURCE
/// Constraints: Minimum length = 0, Maximum length = 64
/// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
/// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
/// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
/// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
/// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
/// Example: /// Example: TEST
/// Constraints: Minimum length = 1, Maximum length = 32
func (rcv *SensorMaintenance_Ingest) DataMode() SensorMaintenance_Ingest_dataMode_Enum {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(62))
	if o != 0 {
		return SensorMaintenance_Ingest_dataMode_Enum(rcv._tab.GetInt8(o + rcv._tab.Pos))
	}
	return 0
}

/// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
/// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
/// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
/// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
/// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
/// Example: /// Example: TEST
/// Constraints: Minimum length = 1, Maximum length = 32
func (rcv *SensorMaintenance_Ingest) MutateDataMode(n SensorMaintenance_Ingest_dataMode_Enum) bool {
	return rcv._tab.MutateInt8Slot(62, int8(n))
}

/// The originating source network on which this record was created, auto-populated by the system.
/// Example: /// Example: ORIG
/// Constraints: Minimum length = 1, Maximum length = 32
func (rcv *SensorMaintenance_Ingest) OrigNetwork() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(64))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The originating source network on which this record was created, auto-populated by the system.
/// Example: /// Example: ORIG
/// Constraints: Minimum length = 1, Maximum length = 32
func SensorMaintenance_IngestStart(builder *flatbuffers.Builder) {
	builder.StartObject(31)
}
func SensorMaintenance_IngestAddId(builder *flatbuffers.Builder, id flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(id), 0)
}
func SensorMaintenance_IngestAddClassificationMarking(builder *flatbuffers.Builder, classificationMarking flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(classificationMarking), 0)
}
func SensorMaintenance_IngestAddSiteCode(builder *flatbuffers.Builder, siteCode flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(siteCode), 0)
}
func SensorMaintenance_IngestAddIdSensor(builder *flatbuffers.Builder, idSensor flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(3, flatbuffers.UOffsetT(idSensor), 0)
}
func SensorMaintenance_IngestAddStartTime(builder *flatbuffers.Builder, startTime flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(4, flatbuffers.UOffsetT(startTime), 0)
}
func SensorMaintenance_IngestAddEndTime(builder *flatbuffers.Builder, endTime flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(5, flatbuffers.UOffsetT(endTime), 0)
}
func SensorMaintenance_IngestAddRecall(builder *flatbuffers.Builder, recall flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(6, flatbuffers.UOffsetT(recall), 0)
}
func SensorMaintenance_IngestAddDuration(builder *flatbuffers.Builder, duration flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(7, flatbuffers.UOffsetT(duration), 0)
}
func SensorMaintenance_IngestAddMwOpsCap(builder *flatbuffers.Builder, mwOpsCap flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(8, flatbuffers.UOffsetT(mwOpsCap), 0)
}
func SensorMaintenance_IngestAddSsOpsCap(builder *flatbuffers.Builder, ssOpsCap flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(9, flatbuffers.UOffsetT(ssOpsCap), 0)
}
func SensorMaintenance_IngestAddMdOpsCap(builder *flatbuffers.Builder, mdOpsCap flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(10, flatbuffers.UOffsetT(mdOpsCap), 0)
}
func SensorMaintenance_IngestAddImpactedFaces(builder *flatbuffers.Builder, impactedFaces flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(11, flatbuffers.UOffsetT(impactedFaces), 0)
}
func SensorMaintenance_IngestAddEquipStatus(builder *flatbuffers.Builder, equipStatus flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(12, flatbuffers.UOffsetT(equipStatus), 0)
}
func SensorMaintenance_IngestAddActivity(builder *flatbuffers.Builder, activity flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(13, flatbuffers.UOffsetT(activity), 0)
}
func SensorMaintenance_IngestAddRemark(builder *flatbuffers.Builder, remark flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(14, flatbuffers.UOffsetT(remark), 0)
}
func SensorMaintenance_IngestAddRequestor(builder *flatbuffers.Builder, requestor flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(15, flatbuffers.UOffsetT(requestor), 0)
}
func SensorMaintenance_IngestAddChanger(builder *flatbuffers.Builder, changer flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(16, flatbuffers.UOffsetT(changer), 0)
}
func SensorMaintenance_IngestAddApprover(builder *flatbuffers.Builder, approver flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(17, flatbuffers.UOffsetT(approver), 0)
}
func SensorMaintenance_IngestAddEowId(builder *flatbuffers.Builder, eowId flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(18, flatbuffers.UOffsetT(eowId), 0)
}
func SensorMaintenance_IngestAddRev(builder *flatbuffers.Builder, rev flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(19, flatbuffers.UOffsetT(rev), 0)
}
func SensorMaintenance_IngestAddPriority(builder *flatbuffers.Builder, priority flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(20, flatbuffers.UOffsetT(priority), 0)
}
func SensorMaintenance_IngestAddRel(builder *flatbuffers.Builder, rel flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(21, flatbuffers.UOffsetT(rel), 0)
}
func SensorMaintenance_IngestAddLineNumber(builder *flatbuffers.Builder, lineNumber flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(22, flatbuffers.UOffsetT(lineNumber), 0)
}
func SensorMaintenance_IngestAddResource(builder *flatbuffers.Builder, resource flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(23, flatbuffers.UOffsetT(resource), 0)
}
func SensorMaintenance_IngestAddInactiveDate(builder *flatbuffers.Builder, inactiveDate flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(24, flatbuffers.UOffsetT(inactiveDate), 0)
}
func SensorMaintenance_IngestAddCreatedAt(builder *flatbuffers.Builder, createdAt flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(25, flatbuffers.UOffsetT(createdAt), 0)
}
func SensorMaintenance_IngestAddCreatedBy(builder *flatbuffers.Builder, createdBy flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(26, flatbuffers.UOffsetT(createdBy), 0)
}
func SensorMaintenance_IngestAddSource(builder *flatbuffers.Builder, source flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(27, flatbuffers.UOffsetT(source), 0)
}
func SensorMaintenance_IngestAddOrigin(builder *flatbuffers.Builder, origin flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(28, flatbuffers.UOffsetT(origin), 0)
}
func SensorMaintenance_IngestAddDataMode(builder *flatbuffers.Builder, dataMode SensorMaintenance_Ingest_dataMode_Enum) {
	builder.PrependInt8Slot(29, int8(dataMode), 0)
}
func SensorMaintenance_IngestAddOrigNetwork(builder *flatbuffers.Builder, origNetwork flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(30, flatbuffers.UOffsetT(origNetwork), 0)
}
func SensorMaintenance_IngestEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
