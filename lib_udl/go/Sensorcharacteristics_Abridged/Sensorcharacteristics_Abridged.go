// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package Sensorcharacteristics_Abridged

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

/// /// Model representation of characteristics and capabilities of a sensor.
type Sensorcharacteristics_Abridged struct {
	_tab flatbuffers.Table
}

const Sensorcharacteristics_AbridgedIdentifier = "SENS"

func GetRootAsSensorcharacteristics_Abridged(buf []byte, offset flatbuffers.UOffsetT) *Sensorcharacteristics_Abridged {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &Sensorcharacteristics_Abridged{}
	x.Init(buf, n+offset)
	return x
}

func FinishSensorcharacteristics_AbridgedBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	identifierBytes := []byte(Sensorcharacteristics_AbridgedIdentifier)
	builder.FinishWithFileIdentifier(offset, identifierBytes)
}

func Sensorcharacteristics_AbridgedBufferHasIdentifier(buf []byte) bool {
	return flatbuffers.BufferHasIdentifier(buf, Sensorcharacteristics_AbridgedIdentifier)
}

func GetSizePrefixedRootAsSensorcharacteristics_Abridged(buf []byte, offset flatbuffers.UOffsetT) *Sensorcharacteristics_Abridged {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &Sensorcharacteristics_Abridged{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedSensorcharacteristics_AbridgedBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	identifierBytes := []byte(Sensorcharacteristics_AbridgedIdentifier)
	builder.FinishSizePrefixedWithFileIdentifier(offset, identifierBytes)
}

func SizePrefixedSensorcharacteristics_AbridgedBufferHasIdentifier(buf []byte) bool {
	return flatbuffers.SizePrefixedBufferHasIdentifier(buf, Sensorcharacteristics_AbridgedIdentifier)
}

func (rcv *Sensorcharacteristics_Abridged) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *Sensorcharacteristics_Abridged) Table() flatbuffers.Table {
	return rcv._tab
}

/// Unique identifier of the record, auto-generated by the system.
/// Example: /// Example: SENSORCHARACTERISTICS-ID
/// Constraints: Minimum length = 1, Maximum length = 36
func (rcv *Sensorcharacteristics_Abridged) Id() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Unique identifier of the record, auto-generated by the system.
/// Example: /// Example: SENSORCHARACTERISTICS-ID
/// Constraints: Minimum length = 1, Maximum length = 36
/// Unique identifier of the parent sensor.
/// Example: /// Example: SENSOR-ID
/// Constraints: Minimum length = 1, Maximum length = 36
func (rcv *Sensorcharacteristics_Abridged) IdSensor() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Unique identifier of the parent sensor.
/// Example: /// Example: SENSOR-ID
/// Constraints: Minimum length = 1, Maximum length = 36
/// Classification marking of the data in IC/CAPCO Portion-marked format.
/// Example: /// Example: U
/// Constraints: Minimum length = 1, Maximum length = 128
func (rcv *Sensorcharacteristics_Abridged) ClassificationMarking() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Classification marking of the data in IC/CAPCO Portion-marked format.
/// Example: /// Example: U
/// Constraints: Minimum length = 1, Maximum length = 128
/// The originating source network on which this record was created, auto-populated by the system.
/// Example: /// Example: ORIG
/// Constraints: Minimum length = 1, Maximum length = 32
func (rcv *Sensorcharacteristics_Abridged) OrigNetwork() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The originating source network on which this record was created, auto-populated by the system.
/// Example: /// Example: ORIG
/// Constraints: Minimum length = 1, Maximum length = 32
/// Azimuth rate acquisition limit (rad/min).
/// Example: /// Example: 10.23
/// Constraints: No constraints specified.
func (rcv *Sensorcharacteristics_Abridged) AzimuthRate() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Azimuth rate acquisition limit (rad/min).
/// Example: /// Example: 10.23
/// Constraints: No constraints specified.
func (rcv *Sensorcharacteristics_Abridged) MutateAzimuthRate(n float64) bool {
	return rcv._tab.MutateFloat64Slot(12, n)
}

/// Elevation rate acquisition limit (rad/min).
/// Example: /// Example: 10.23
/// Constraints: No constraints specified.
func (rcv *Sensorcharacteristics_Abridged) ElevationRateGeolm() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Elevation rate acquisition limit (rad/min).
/// Example: /// Example: 10.23
/// Constraints: No constraints specified.
func (rcv *Sensorcharacteristics_Abridged) MutateElevationRateGeolm(n float64) bool {
	return rcv._tab.MutateFloat64Slot(14, n)
}

/// Minimum range measurement capability of the sensor (km).
/// Example: /// Example: 20.23
/// Constraints: No constraints specified.
func (rcv *Sensorcharacteristics_Abridged) MinRangeLimit() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Minimum range measurement capability of the sensor (km).
/// Example: /// Example: 20.23
/// Constraints: No constraints specified.
func (rcv *Sensorcharacteristics_Abridged) MutateMinRangeLimit(n float64) bool {
	return rcv._tab.MutateFloat64Slot(16, n)
}

/// Maximum observable range limit (km) -- sensor cannot acquire beyond this range.
/// Example: /// Example: 20.23
/// Constraints: No constraints specified.
func (rcv *Sensorcharacteristics_Abridged) MaxRangeLimit() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(18))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Maximum observable range limit (km) -- sensor cannot acquire beyond this range.
/// Example: /// Example: 20.23
/// Constraints: No constraints specified.
func (rcv *Sensorcharacteristics_Abridged) MutateMaxRangeLimit(n float64) bool {
	return rcv._tab.MutateFloat64Slot(18, n)
}

/// For Orbiting Sensors, First Card Azimuth limit #1 (left, deg).
/// Example: /// Example: 20.23
/// Constraints: No constraints specified.
func (rcv *Sensorcharacteristics_Abridged) LeftClockAngle() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(20))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// For Orbiting Sensors, First Card Azimuth limit #1 (left, deg).
/// Example: /// Example: 20.23
/// Constraints: No constraints specified.
func (rcv *Sensorcharacteristics_Abridged) MutateLeftClockAngle(n float64) bool {
	return rcv._tab.MutateFloat64Slot(20, n)
}

/// For Orbiting Sensors, First Card Azimuth limit #3 (left, deg).
/// Example: /// Example: 20.23
/// Constraints: No constraints specified.
func (rcv *Sensorcharacteristics_Abridged) RightClockAngle() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(22))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// For Orbiting Sensors, First Card Azimuth limit #3 (left, deg).
/// Example: /// Example: 20.23
/// Constraints: No constraints specified.
func (rcv *Sensorcharacteristics_Abridged) MutateRightClockAngle(n float64) bool {
	return rcv._tab.MutateFloat64Slot(22, n)
}

/// The angle of the center of a phased array sensor.
/// Example: /// Example: 20.23
/// Constraints: No constraints specified.
func (rcv *Sensorcharacteristics_Abridged) Boresight() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(24))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// The angle of the center of a phased array sensor.
/// Example: /// Example: 20.23
/// Constraints: No constraints specified.
func (rcv *Sensorcharacteristics_Abridged) MutateBoresight(n float64) bool {
	return rcv._tab.MutateFloat64Slot(24, n)
}

/// The number of degrees off of the boresight for the sensor (degrees).
/// Example: /// Example: 20.23
/// Constraints: No constraints specified.
func (rcv *Sensorcharacteristics_Abridged) BoresightOffAngle() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(26))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// The number of degrees off of the boresight for the sensor (degrees).
/// Example: /// Example: 20.23
/// Constraints: No constraints specified.
func (rcv *Sensorcharacteristics_Abridged) MutateBoresightOffAngle(n float64) bool {
	return rcv._tab.MutateFloat64Slot(26, n)
}

/// Negative Range-rate/relative velocity limit (km/sec).
/// Example: /// Example: 20.23
/// Constraints: No constraints specified.
func (rcv *Sensorcharacteristics_Abridged) NegativeRangeRateLimit() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(28))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Negative Range-rate/relative velocity limit (km/sec).
/// Example: /// Example: 20.23
/// Constraints: No constraints specified.
func (rcv *Sensorcharacteristics_Abridged) MutateNegativeRangeRateLimit(n float64) bool {
	return rcv._tab.MutateFloat64Slot(28, n)
}

/// Positive Range-rate/relative velocity limit (km/sec).
/// Example: /// Example: 20.23
/// Constraints: No constraints specified.
func (rcv *Sensorcharacteristics_Abridged) PositiveRangeRateLimit() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(30))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Positive Range-rate/relative velocity limit (km/sec).
/// Example: /// Example: 20.23
/// Constraints: No constraints specified.
func (rcv *Sensorcharacteristics_Abridged) MutatePositiveRangeRateLimit(n float64) bool {
	return rcv._tab.MutateFloat64Slot(30, n)
}

/// Absolute magnitude acquisition limit for optical sensors.
/// Example: /// Example: 20.23
/// Constraints: No constraints specified.
func (rcv *Sensorcharacteristics_Abridged) MagnitudeLimit() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(32))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Absolute magnitude acquisition limit for optical sensors.
/// Example: /// Example: 20.23
/// Constraints: No constraints specified.
func (rcv *Sensorcharacteristics_Abridged) MutateMagnitudeLimit(n float64) bool {
	return rcv._tab.MutateFloat64Slot(32, n)
}

/// Beginning track angle limit (rad). Track angle is the angle between the camera axis and the gimbal plane. Values range from 0 - PI/2.
/// Example: /// Example: 1.23
/// Constraints: No constraints specified.
func (rcv *Sensorcharacteristics_Abridged) TrackAngle() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(34))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Beginning track angle limit (rad). Track angle is the angle between the camera axis and the gimbal plane. Values range from 0 - PI/2.
/// Example: /// Example: 1.23
/// Constraints: No constraints specified.
func (rcv *Sensorcharacteristics_Abridged) MutateTrackAngle(n float64) bool {
	return rcv._tab.MutateFloat64Slot(34, n)
}

/// Signal to Noise Ratio (in db). The values for this range from 0.0 - + 99.99 dB.
/// Example: /// Example: 20.23
/// Constraints: No constraints specified.
func (rcv *Sensorcharacteristics_Abridged) MinSignalNoiseRatio() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(36))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Signal to Noise Ratio (in db). The values for this range from 0.0 - + 99.99 dB.
/// Example: /// Example: 20.23
/// Constraints: No constraints specified.
func (rcv *Sensorcharacteristics_Abridged) MutateMinSignalNoiseRatio(n float64) bool {
	return rcv._tab.MutateFloat64Slot(36, n)
}

/// The beam width of a Sensor's Fan (range). The values for this range from (0.0 to PI).
/// Example: /// Example: 3.1
/// Constraints: No constraints specified.
func (rcv *Sensorcharacteristics_Abridged) FanBeamWidth() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(38))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// The beam width of a Sensor's Fan (range). The values for this range from (0.0 to PI).
/// Example: /// Example: 3.1
/// Constraints: No constraints specified.
func (rcv *Sensorcharacteristics_Abridged) MutateFanBeamWidth(n float64) bool {
	return rcv._tab.MutateFloat64Slot(38, n)
}

/// Maximum taskable range of the sensor (km).
/// Example: /// Example: 20.23
/// Constraints: No constraints specified.
func (rcv *Sensorcharacteristics_Abridged) TaskableRange() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(40))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Maximum taskable range of the sensor (km).
/// Example: /// Example: 20.23
/// Constraints: No constraints specified.
func (rcv *Sensorcharacteristics_Abridged) MutateTaskableRange(n float64) bool {
	return rcv._tab.MutateFloat64Slot(40, n)
}

/// Maximum observable sensor range (km).
/// Example: /// Example: 20.23
/// Constraints: No constraints specified.
func (rcv *Sensorcharacteristics_Abridged) MaxObservableRange() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(42))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Maximum observable sensor range (km).
/// Example: /// Example: 20.23
/// Constraints: No constraints specified.
func (rcv *Sensorcharacteristics_Abridged) MutateMaxObservableRange(n float64) bool {
	return rcv._tab.MutateFloat64Slot(42, n)
}

/// Radio frequency (if sensor is RF).
/// Example: /// Example: 20.23
/// Constraints: No constraints specified.
func (rcv *Sensorcharacteristics_Abridged) RadioFrequency() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(44))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Radio frequency (if sensor is RF).
/// Example: /// Example: 20.23
/// Constraints: No constraints specified.
func (rcv *Sensorcharacteristics_Abridged) MutateRadioFrequency(n float64) bool {
	return rcv._tab.MutateFloat64Slot(44, n)
}

/// Radar frequency of the sensor (if a radar sensor).
/// Example: /// Example: 20.23
/// Constraints: No constraints specified.
func (rcv *Sensorcharacteristics_Abridged) RadarFrequency() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(46))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Radar frequency of the sensor (if a radar sensor).
/// Example: /// Example: 20.23
/// Constraints: No constraints specified.
func (rcv *Sensorcharacteristics_Abridged) MutateRadarFrequency(n float64) bool {
	return rcv._tab.MutateFloat64Slot(46, n)
}

/// Radar transmit power in Watts.
/// Example: /// Example: 20.23
/// Constraints: No constraints specified.
func (rcv *Sensorcharacteristics_Abridged) TransmitPower() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(48))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Radar transmit power in Watts.
/// Example: /// Example: 20.23
/// Constraints: No constraints specified.
func (rcv *Sensorcharacteristics_Abridged) MutateTransmitPower(n float64) bool {
	return rcv._tab.MutateFloat64Slot(48, n)
}

/// Horizontal field of view.
/// Example: /// Example: 20.23
/// Constraints: No constraints specified.
func (rcv *Sensorcharacteristics_Abridged) HFov() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(50))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Horizontal field of view.
/// Example: /// Example: 20.23
/// Constraints: No constraints specified.
func (rcv *Sensorcharacteristics_Abridged) MutateHFov(n float64) bool {
	return rcv._tab.MutateFloat64Slot(50, n)
}

/// Vertical field of view.
/// Example: /// Example: 20.23
/// Constraints: No constraints specified.
func (rcv *Sensorcharacteristics_Abridged) VFov() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(52))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Vertical field of view.
/// Example: /// Example: 20.23
/// Constraints: No constraints specified.
func (rcv *Sensorcharacteristics_Abridged) MutateVFov(n float64) bool {
	return rcv._tab.MutateFloat64Slot(52, n)
}

/// Horizontal pixel resolution.
/// Example: /// Example: 1000
/// Constraints: No constraints specified.
func (rcv *Sensorcharacteristics_Abridged) HResPixels() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(54))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

/// Horizontal pixel resolution.
/// Example: /// Example: 1000
/// Constraints: No constraints specified.
func (rcv *Sensorcharacteristics_Abridged) MutateHResPixels(n int32) bool {
	return rcv._tab.MutateInt32Slot(54, n)
}

/// Vertical pixel resolution.
/// Example: /// Example: 1000
/// Constraints: No constraints specified.
func (rcv *Sensorcharacteristics_Abridged) VResPixels() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(56))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

/// Vertical pixel resolution.
/// Example: /// Example: 1000
/// Constraints: No constraints specified.
func (rcv *Sensorcharacteristics_Abridged) MutateVResPixels(n int32) bool {
	return rcv._tab.MutateInt32Slot(56, n)
}

/// Sensor band.
/// Example: /// Example: BAND
/// Constraints: Minimum length = 0, Maximum length = 36
func (rcv *Sensorcharacteristics_Abridged) Band() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(58))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Sensor band.
/// Example: /// Example: BAND
/// Constraints: Minimum length = 0, Maximum length = 36
/// Max deviation angle of the sensor in degrees.
/// Example: /// Example: 20.23
/// Constraints: No constraints specified.
func (rcv *Sensorcharacteristics_Abridged) MaxDeviationAngle() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(60))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Max deviation angle of the sensor in degrees.
/// Example: /// Example: 20.23
/// Constraints: No constraints specified.
func (rcv *Sensorcharacteristics_Abridged) MutateMaxDeviationAngle(n float64) bool {
	return rcv._tab.MutateFloat64Slot(60, n)
}

/// Optical sensor camera aperture.
/// Example: /// Example: 2.23
/// Constraints: No constraints specified.
func (rcv *Sensorcharacteristics_Abridged) Aperture() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(62))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Optical sensor camera aperture.
/// Example: /// Example: 2.23
/// Constraints: No constraints specified.
func (rcv *Sensorcharacteristics_Abridged) MutateAperture(n float64) bool {
	return rcv._tab.MutateFloat64Slot(62, n)
}

/// Leftmost GEO belt longitude limit for this sensor (if applicable).
/// Example: /// Example: 20.23
/// Constraints: No constraints specified.
func (rcv *Sensorcharacteristics_Abridged) LeftGeoBeltLimit() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(64))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Leftmost GEO belt longitude limit for this sensor (if applicable).
/// Example: /// Example: 20.23
/// Constraints: No constraints specified.
func (rcv *Sensorcharacteristics_Abridged) MutateLeftGeoBeltLimit(n float64) bool {
	return rcv._tab.MutateFloat64Slot(64, n)
}

/// Rightmost GEO belt longitude limit for this sensor (if applicable).
/// Example: /// Example: 20.23
/// Constraints: No constraints specified.
func (rcv *Sensorcharacteristics_Abridged) RightGeoBeltLimit() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(66))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Rightmost GEO belt longitude limit for this sensor (if applicable).
/// Example: /// Example: 20.23
/// Constraints: No constraints specified.
func (rcv *Sensorcharacteristics_Abridged) MutateRightGeoBeltLimit(n float64) bool {
	return rcv._tab.MutateFloat64Slot(66, n)
}

/// For ASR (Air Surveillance Radar) sensors, the scan (360 deg sweep) rate of the radar, in scans/minute.
/// Example: /// Example: 20.23
/// Constraints: No constraints specified.
func (rcv *Sensorcharacteristics_Abridged) AsrScanRate() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(68))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// For ASR (Air Surveillance Radar) sensors, the scan (360 deg sweep) rate of the radar, in scans/minute.
/// Example: /// Example: 20.23
/// Constraints: No constraints specified.
func (rcv *Sensorcharacteristics_Abridged) MutateAsrScanRate(n float64) bool {
	return rcv._tab.MutateFloat64Slot(68, n)
}

/// For radar based sensors, K-factor is a relative indicator of refractivity that infers the amount of radar beam bending due to atmosphere. (1<K<2).
/// Example: /// Example: 1.4
/// Constraints: No constraints specified.
func (rcv *Sensorcharacteristics_Abridged) K() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(70))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// For radar based sensors, K-factor is a relative indicator of refractivity that infers the amount of radar beam bending due to atmosphere. (1<K<2).
/// Example: /// Example: 1.4
/// Constraints: No constraints specified.
func (rcv *Sensorcharacteristics_Abridged) MutateK(n float64) bool {
	return rcv._tab.MutateFloat64Slot(70, n)
}

/// For radar based sensors, the focal point elevation of the radar at the site, in meters.
/// Example: /// Example: 20.23
/// Constraints: No constraints specified.
func (rcv *Sensorcharacteristics_Abridged) FocalPoint() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(72))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// For radar based sensors, the focal point elevation of the radar at the site, in meters.
/// Example: /// Example: 20.23
/// Constraints: No constraints specified.
func (rcv *Sensorcharacteristics_Abridged) MutateFocalPoint(n float64) bool {
	return rcv._tab.MutateFloat64Slot(72, n)
}

/// For tower sensors, the physical height of the sensor tower, in meters.
/// Example: /// Example: 20.23
/// Constraints: No constraints specified.
func (rcv *Sensorcharacteristics_Abridged) TowerHeight() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(74))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// For tower sensors, the physical height of the sensor tower, in meters.
/// Example: /// Example: 20.23
/// Constraints: No constraints specified.
func (rcv *Sensorcharacteristics_Abridged) MutateTowerHeight(n float64) bool {
	return rcv._tab.MutateFloat64Slot(74, n)
}

/// True North correction for the sensor, in ACP (Azimunth Change Pulse) count.
/// Example: /// Example: 10
/// Constraints: No constraints specified.
func (rcv *Sensorcharacteristics_Abridged) TrueNorthCorrector() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(76))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

/// True North correction for the sensor, in ACP (Azimunth Change Pulse) count.
/// Example: /// Example: 10
/// Constraints: No constraints specified.
func (rcv *Sensorcharacteristics_Abridged) MutateTrueNorthCorrector(n int32) bool {
	return rcv._tab.MutateInt32Slot(76, n)
}

/// Angle between magnetic north and true north at the sensor site, in degrees.
/// Example: /// Example: 45.23
/// Constraints: No constraints specified.
func (rcv *Sensorcharacteristics_Abridged) MagDec() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(78))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Angle between magnetic north and true north at the sensor site, in degrees.
/// Example: /// Example: 45.23
/// Constraints: No constraints specified.
func (rcv *Sensorcharacteristics_Abridged) MutateMagDec(n float64) bool {
	return rcv._tab.MutateFloat64Slot(78, n)
}

/// Peformance zone-1 minimum range, in km. Note that the zones apply only to the PSR/Search radars.
/// Example: /// Example: 20.23
/// Constraints: No constraints specified.
func (rcv *Sensorcharacteristics_Abridged) Z1MinRange() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(80))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Peformance zone-1 minimum range, in km. Note that the zones apply only to the PSR/Search radars.
/// Example: /// Example: 20.23
/// Constraints: No constraints specified.
func (rcv *Sensorcharacteristics_Abridged) MutateZ1MinRange(n float64) bool {
	return rcv._tab.MutateFloat64Slot(80, n)
}

/// Peformance zone-2 minimum range, in km. Note that the zones apply only to the PSR/Search radars.
/// Example: /// Example: 20.23
/// Constraints: No constraints specified.
func (rcv *Sensorcharacteristics_Abridged) Z2MinRange() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(82))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Peformance zone-2 minimum range, in km. Note that the zones apply only to the PSR/Search radars.
/// Example: /// Example: 20.23
/// Constraints: No constraints specified.
func (rcv *Sensorcharacteristics_Abridged) MutateZ2MinRange(n float64) bool {
	return rcv._tab.MutateFloat64Slot(82, n)
}

/// Peformance zone-1 maximum range, in km. Note that the zones apply only to the PSR/Search radars.
/// Example: /// Example: 50.23
/// Constraints: No constraints specified.
func (rcv *Sensorcharacteristics_Abridged) Z1MaxRange() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(84))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Peformance zone-1 maximum range, in km. Note that the zones apply only to the PSR/Search radars.
/// Example: /// Example: 50.23
/// Constraints: No constraints specified.
func (rcv *Sensorcharacteristics_Abridged) MutateZ1MaxRange(n float64) bool {
	return rcv._tab.MutateFloat64Slot(84, n)
}

/// Peformance zone-2 maximum range, in km. Note that the zones apply only to the PSR/Search radars.
/// Example: /// Example: 50.23
/// Constraints: No constraints specified.
func (rcv *Sensorcharacteristics_Abridged) Z2MaxRange() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(86))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Peformance zone-2 maximum range, in km. Note that the zones apply only to the PSR/Search radars.
/// Example: /// Example: 50.23
/// Constraints: No constraints specified.
func (rcv *Sensorcharacteristics_Abridged) MutateZ2MaxRange(n float64) bool {
	return rcv._tab.MutateFloat64Slot(86, n)
}

/// For radar based sensors, radar maximum unambiguous range, in km.
/// Example: /// Example: 20.23
/// Constraints: No constraints specified.
func (rcv *Sensorcharacteristics_Abridged) RadarMur() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(88))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// For radar based sensors, radar maximum unambiguous range, in km.
/// Example: /// Example: 20.23
/// Constraints: No constraints specified.
func (rcv *Sensorcharacteristics_Abridged) MutateRadarMur(n float64) bool {
	return rcv._tab.MutateFloat64Slot(88, n)
}

/// For radar based sensors, probability of the indication of the presence of a radar target due to noise or interference.
/// Example: /// Example: 0.5
/// Constraints: No constraints specified.
func (rcv *Sensorcharacteristics_Abridged) ProbFalseAlarm() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(90))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// For radar based sensors, probability of the indication of the presence of a radar target due to noise or interference.
/// Example: /// Example: 0.5
/// Constraints: No constraints specified.
func (rcv *Sensorcharacteristics_Abridged) MutateProbFalseAlarm(n float64) bool {
	return rcv._tab.MutateFloat64Slot(90, n)
}

/// For radar based sensors, pulse repetition frequency, in Hz. Number of new pulses tranmistted per second.
/// Example: /// Example: 20.23
/// Constraints: No constraints specified.
func (rcv *Sensorcharacteristics_Abridged) Prf() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(92))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// For radar based sensors, pulse repetition frequency, in Hz. Number of new pulses tranmistted per second.
/// Example: /// Example: 20.23
/// Constraints: No constraints specified.
func (rcv *Sensorcharacteristics_Abridged) MutatePrf(n float64) bool {
	return rcv._tab.MutateFloat64Slot(92, n)
}

/// For radar based sensors, radar pulse width, in microseconds. The transmit time of a pulse.
/// Example: /// Example: 20.23
/// Constraints: No constraints specified.
func (rcv *Sensorcharacteristics_Abridged) RadarPulseWidth() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(94))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// For radar based sensors, radar pulse width, in microseconds. The transmit time of a pulse.
/// Example: /// Example: 20.23
/// Constraints: No constraints specified.
func (rcv *Sensorcharacteristics_Abridged) MutateRadarPulseWidth(n float64) bool {
	return rcv._tab.MutateFloat64Slot(94, n)
}

/// For radar based sensors, number of integrated pulses in a transmit cycle.
/// Example: /// Example: 10
/// Constraints: No constraints specified.
func (rcv *Sensorcharacteristics_Abridged) NumIntegratedPulses() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(96))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

/// For radar based sensors, number of integrated pulses in a transmit cycle.
/// Example: /// Example: 10
/// Constraints: No constraints specified.
func (rcv *Sensorcharacteristics_Abridged) MutateNumIntegratedPulses(n int32) bool {
	return rcv._tab.MutateInt32Slot(96, n)
}

/// Antenna true tilt, in degrees.
/// Example: /// Example: 20.23
/// Constraints: No constraints specified.
func (rcv *Sensorcharacteristics_Abridged) TrueTilt() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(98))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Antenna true tilt, in degrees.
/// Example: /// Example: 20.23
/// Constraints: No constraints specified.
func (rcv *Sensorcharacteristics_Abridged) MutateTrueTilt(n float64) bool {
	return rcv._tab.MutateFloat64Slot(98, n)
}

/// Message data format transmitted by the sensor digitizer.
/// Example: /// Example: DATA_FORMAT
/// Constraints: Minimum length = 0, Maximum length = 32
func (rcv *Sensorcharacteristics_Abridged) RadarMessageFormat() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(100))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Message data format transmitted by the sensor digitizer.
/// Example: /// Example: DATA_FORMAT
/// Constraints: Minimum length = 0, Maximum length = 32
/// For radar based sensors, expression of the radar system noise, aggregated as an equivalent thermal noise value, in degrees Kelvin.
/// Example: /// Example: 3.5
/// Constraints: No constraints specified.
func (rcv *Sensorcharacteristics_Abridged) SystemNoiseTemperature() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(102))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// For radar based sensors, expression of the radar system noise, aggregated as an equivalent thermal noise value, in degrees Kelvin.
/// Example: /// Example: 3.5
/// Constraints: No constraints specified.
func (rcv *Sensorcharacteristics_Abridged) MutateSystemNoiseTemperature(n float64) bool {
	return rcv._tab.MutateFloat64Slot(102, n)
}

/// Source of the data.
/// Example: /// Example: Bluestaq
/// Constraints: Minimum length = 1, Maximum length = 64
func (rcv *Sensorcharacteristics_Abridged) Source() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(104))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Source of the data.
/// Example: /// Example: Bluestaq
/// Constraints: Minimum length = 1, Maximum length = 64
/// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
/// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
/// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
/// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
/// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
/// Example: /// Example: TEST
/// Constraints: Minimum length = 1, Maximum length = 32
func (rcv *Sensorcharacteristics_Abridged) DataMode() Sensorcharacteristics_Abridged_dataMode_Enum {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(106))
	if o != 0 {
		return Sensorcharacteristics_Abridged_dataMode_Enum(rcv._tab.GetInt8(o + rcv._tab.Pos))
	}
	return 0
}

/// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
/// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
/// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
/// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
/// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
/// Example: /// Example: TEST
/// Constraints: Minimum length = 1, Maximum length = 32
func (rcv *Sensorcharacteristics_Abridged) MutateDataMode(n Sensorcharacteristics_Abridged_dataMode_Enum) bool {
	return rcv._tab.MutateInt8Slot(106, int8(n))
}

/// Time the row was created in the database, auto-populated by the system.
/// Example: /// Example: 2018-01-01T16:00:00.123Z
/// Constraints: No constraints specified.
func (rcv *Sensorcharacteristics_Abridged) CreatedAt() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(108))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Time the row was created in the database, auto-populated by the system.
/// Example: /// Example: 2018-01-01T16:00:00.123Z
/// Constraints: No constraints specified.
/// Application user who created the row in the database, auto-populated by the system.
/// Example: /// Example: some.user
/// Constraints: Minimum length = 1, Maximum length = 64
func (rcv *Sensorcharacteristics_Abridged) CreatedBy() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(110))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Application user who created the row in the database, auto-populated by the system.
/// Example: /// Example: some.user
/// Constraints: Minimum length = 1, Maximum length = 64
func Sensorcharacteristics_AbridgedStart(builder *flatbuffers.Builder) {
	builder.StartObject(54)
}
func Sensorcharacteristics_AbridgedAddId(builder *flatbuffers.Builder, id flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(id), 0)
}
func Sensorcharacteristics_AbridgedAddIdSensor(builder *flatbuffers.Builder, idSensor flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(idSensor), 0)
}
func Sensorcharacteristics_AbridgedAddClassificationMarking(builder *flatbuffers.Builder, classificationMarking flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(classificationMarking), 0)
}
func Sensorcharacteristics_AbridgedAddOrigNetwork(builder *flatbuffers.Builder, origNetwork flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(3, flatbuffers.UOffsetT(origNetwork), 0)
}
func Sensorcharacteristics_AbridgedAddAzimuthRate(builder *flatbuffers.Builder, azimuthRate float64) {
	builder.PrependFloat64Slot(4, azimuthRate, 0.0)
}
func Sensorcharacteristics_AbridgedAddElevationRateGeolm(builder *flatbuffers.Builder, elevationRateGeolm float64) {
	builder.PrependFloat64Slot(5, elevationRateGeolm, 0.0)
}
func Sensorcharacteristics_AbridgedAddMinRangeLimit(builder *flatbuffers.Builder, minRangeLimit float64) {
	builder.PrependFloat64Slot(6, minRangeLimit, 0.0)
}
func Sensorcharacteristics_AbridgedAddMaxRangeLimit(builder *flatbuffers.Builder, maxRangeLimit float64) {
	builder.PrependFloat64Slot(7, maxRangeLimit, 0.0)
}
func Sensorcharacteristics_AbridgedAddLeftClockAngle(builder *flatbuffers.Builder, leftClockAngle float64) {
	builder.PrependFloat64Slot(8, leftClockAngle, 0.0)
}
func Sensorcharacteristics_AbridgedAddRightClockAngle(builder *flatbuffers.Builder, rightClockAngle float64) {
	builder.PrependFloat64Slot(9, rightClockAngle, 0.0)
}
func Sensorcharacteristics_AbridgedAddBoresight(builder *flatbuffers.Builder, boresight float64) {
	builder.PrependFloat64Slot(10, boresight, 0.0)
}
func Sensorcharacteristics_AbridgedAddBoresightOffAngle(builder *flatbuffers.Builder, boresightOffAngle float64) {
	builder.PrependFloat64Slot(11, boresightOffAngle, 0.0)
}
func Sensorcharacteristics_AbridgedAddNegativeRangeRateLimit(builder *flatbuffers.Builder, negativeRangeRateLimit float64) {
	builder.PrependFloat64Slot(12, negativeRangeRateLimit, 0.0)
}
func Sensorcharacteristics_AbridgedAddPositiveRangeRateLimit(builder *flatbuffers.Builder, positiveRangeRateLimit float64) {
	builder.PrependFloat64Slot(13, positiveRangeRateLimit, 0.0)
}
func Sensorcharacteristics_AbridgedAddMagnitudeLimit(builder *flatbuffers.Builder, magnitudeLimit float64) {
	builder.PrependFloat64Slot(14, magnitudeLimit, 0.0)
}
func Sensorcharacteristics_AbridgedAddTrackAngle(builder *flatbuffers.Builder, trackAngle float64) {
	builder.PrependFloat64Slot(15, trackAngle, 0.0)
}
func Sensorcharacteristics_AbridgedAddMinSignalNoiseRatio(builder *flatbuffers.Builder, minSignalNoiseRatio float64) {
	builder.PrependFloat64Slot(16, minSignalNoiseRatio, 0.0)
}
func Sensorcharacteristics_AbridgedAddFanBeamWidth(builder *flatbuffers.Builder, fanBeamWidth float64) {
	builder.PrependFloat64Slot(17, fanBeamWidth, 0.0)
}
func Sensorcharacteristics_AbridgedAddTaskableRange(builder *flatbuffers.Builder, taskableRange float64) {
	builder.PrependFloat64Slot(18, taskableRange, 0.0)
}
func Sensorcharacteristics_AbridgedAddMaxObservableRange(builder *flatbuffers.Builder, maxObservableRange float64) {
	builder.PrependFloat64Slot(19, maxObservableRange, 0.0)
}
func Sensorcharacteristics_AbridgedAddRadioFrequency(builder *flatbuffers.Builder, radioFrequency float64) {
	builder.PrependFloat64Slot(20, radioFrequency, 0.0)
}
func Sensorcharacteristics_AbridgedAddRadarFrequency(builder *flatbuffers.Builder, radarFrequency float64) {
	builder.PrependFloat64Slot(21, radarFrequency, 0.0)
}
func Sensorcharacteristics_AbridgedAddTransmitPower(builder *flatbuffers.Builder, transmitPower float64) {
	builder.PrependFloat64Slot(22, transmitPower, 0.0)
}
func Sensorcharacteristics_AbridgedAddHFov(builder *flatbuffers.Builder, hFov float64) {
	builder.PrependFloat64Slot(23, hFov, 0.0)
}
func Sensorcharacteristics_AbridgedAddVFov(builder *flatbuffers.Builder, vFov float64) {
	builder.PrependFloat64Slot(24, vFov, 0.0)
}
func Sensorcharacteristics_AbridgedAddHResPixels(builder *flatbuffers.Builder, hResPixels int32) {
	builder.PrependInt32Slot(25, hResPixels, 0)
}
func Sensorcharacteristics_AbridgedAddVResPixels(builder *flatbuffers.Builder, vResPixels int32) {
	builder.PrependInt32Slot(26, vResPixels, 0)
}
func Sensorcharacteristics_AbridgedAddBand(builder *flatbuffers.Builder, band flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(27, flatbuffers.UOffsetT(band), 0)
}
func Sensorcharacteristics_AbridgedAddMaxDeviationAngle(builder *flatbuffers.Builder, maxDeviationAngle float64) {
	builder.PrependFloat64Slot(28, maxDeviationAngle, 0.0)
}
func Sensorcharacteristics_AbridgedAddAperture(builder *flatbuffers.Builder, aperture float64) {
	builder.PrependFloat64Slot(29, aperture, 0.0)
}
func Sensorcharacteristics_AbridgedAddLeftGeoBeltLimit(builder *flatbuffers.Builder, leftGeoBeltLimit float64) {
	builder.PrependFloat64Slot(30, leftGeoBeltLimit, 0.0)
}
func Sensorcharacteristics_AbridgedAddRightGeoBeltLimit(builder *flatbuffers.Builder, rightGeoBeltLimit float64) {
	builder.PrependFloat64Slot(31, rightGeoBeltLimit, 0.0)
}
func Sensorcharacteristics_AbridgedAddAsrScanRate(builder *flatbuffers.Builder, asrScanRate float64) {
	builder.PrependFloat64Slot(32, asrScanRate, 0.0)
}
func Sensorcharacteristics_AbridgedAddK(builder *flatbuffers.Builder, k float64) {
	builder.PrependFloat64Slot(33, k, 0.0)
}
func Sensorcharacteristics_AbridgedAddFocalPoint(builder *flatbuffers.Builder, focalPoint float64) {
	builder.PrependFloat64Slot(34, focalPoint, 0.0)
}
func Sensorcharacteristics_AbridgedAddTowerHeight(builder *flatbuffers.Builder, towerHeight float64) {
	builder.PrependFloat64Slot(35, towerHeight, 0.0)
}
func Sensorcharacteristics_AbridgedAddTrueNorthCorrector(builder *flatbuffers.Builder, trueNorthCorrector int32) {
	builder.PrependInt32Slot(36, trueNorthCorrector, 0)
}
func Sensorcharacteristics_AbridgedAddMagDec(builder *flatbuffers.Builder, magDec float64) {
	builder.PrependFloat64Slot(37, magDec, 0.0)
}
func Sensorcharacteristics_AbridgedAddZ1MinRange(builder *flatbuffers.Builder, z1MinRange float64) {
	builder.PrependFloat64Slot(38, z1MinRange, 0.0)
}
func Sensorcharacteristics_AbridgedAddZ2MinRange(builder *flatbuffers.Builder, z2MinRange float64) {
	builder.PrependFloat64Slot(39, z2MinRange, 0.0)
}
func Sensorcharacteristics_AbridgedAddZ1MaxRange(builder *flatbuffers.Builder, z1MaxRange float64) {
	builder.PrependFloat64Slot(40, z1MaxRange, 0.0)
}
func Sensorcharacteristics_AbridgedAddZ2MaxRange(builder *flatbuffers.Builder, z2MaxRange float64) {
	builder.PrependFloat64Slot(41, z2MaxRange, 0.0)
}
func Sensorcharacteristics_AbridgedAddRadarMur(builder *flatbuffers.Builder, radarMur float64) {
	builder.PrependFloat64Slot(42, radarMur, 0.0)
}
func Sensorcharacteristics_AbridgedAddProbFalseAlarm(builder *flatbuffers.Builder, probFalseAlarm float64) {
	builder.PrependFloat64Slot(43, probFalseAlarm, 0.0)
}
func Sensorcharacteristics_AbridgedAddPrf(builder *flatbuffers.Builder, prf float64) {
	builder.PrependFloat64Slot(44, prf, 0.0)
}
func Sensorcharacteristics_AbridgedAddRadarPulseWidth(builder *flatbuffers.Builder, radarPulseWidth float64) {
	builder.PrependFloat64Slot(45, radarPulseWidth, 0.0)
}
func Sensorcharacteristics_AbridgedAddNumIntegratedPulses(builder *flatbuffers.Builder, numIntegratedPulses int32) {
	builder.PrependInt32Slot(46, numIntegratedPulses, 0)
}
func Sensorcharacteristics_AbridgedAddTrueTilt(builder *flatbuffers.Builder, trueTilt float64) {
	builder.PrependFloat64Slot(47, trueTilt, 0.0)
}
func Sensorcharacteristics_AbridgedAddRadarMessageFormat(builder *flatbuffers.Builder, radarMessageFormat flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(48, flatbuffers.UOffsetT(radarMessageFormat), 0)
}
func Sensorcharacteristics_AbridgedAddSystemNoiseTemperature(builder *flatbuffers.Builder, systemNoiseTemperature float64) {
	builder.PrependFloat64Slot(49, systemNoiseTemperature, 0.0)
}
func Sensorcharacteristics_AbridgedAddSource(builder *flatbuffers.Builder, source flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(50, flatbuffers.UOffsetT(source), 0)
}
func Sensorcharacteristics_AbridgedAddDataMode(builder *flatbuffers.Builder, dataMode Sensorcharacteristics_Abridged_dataMode_Enum) {
	builder.PrependInt8Slot(51, int8(dataMode), 0)
}
func Sensorcharacteristics_AbridgedAddCreatedAt(builder *flatbuffers.Builder, createdAt flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(52, flatbuffers.UOffsetT(createdAt), 0)
}
func Sensorcharacteristics_AbridgedAddCreatedBy(builder *flatbuffers.Builder, createdBy flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(53, flatbuffers.UOffsetT(createdBy), 0)
}
func Sensorcharacteristics_AbridgedEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
