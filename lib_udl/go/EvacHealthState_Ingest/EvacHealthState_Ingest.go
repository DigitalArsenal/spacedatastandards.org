// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package EvacHealthState_Ingest

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

/// /// Health state information.
type EvacHealthState_Ingest struct {
	_tab flatbuffers.Table
}

const EvacHealthState_IngestIdentifier = "EVAC"

func GetRootAsEvacHealthState_Ingest(buf []byte, offset flatbuffers.UOffsetT) *EvacHealthState_Ingest {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &EvacHealthState_Ingest{}
	x.Init(buf, n+offset)
	return x
}

func FinishEvacHealthState_IngestBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	identifierBytes := []byte(EvacHealthState_IngestIdentifier)
	builder.FinishWithFileIdentifier(offset, identifierBytes)
}

func EvacHealthState_IngestBufferHasIdentifier(buf []byte) bool {
	return flatbuffers.BufferHasIdentifier(buf, EvacHealthState_IngestIdentifier)
}

func GetSizePrefixedRootAsEvacHealthState_Ingest(buf []byte, offset flatbuffers.UOffsetT) *EvacHealthState_Ingest {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &EvacHealthState_Ingest{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedEvacHealthState_IngestBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	identifierBytes := []byte(EvacHealthState_IngestIdentifier)
	builder.FinishSizePrefixedWithFileIdentifier(offset, identifierBytes)
}

func SizePrefixedEvacHealthState_IngestBufferHasIdentifier(buf []byte) bool {
	return flatbuffers.SizePrefixedBufferHasIdentifier(buf, EvacHealthState_IngestIdentifier)
}

func (rcv *EvacHealthState_Ingest) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *EvacHealthState_Ingest) Table() flatbuffers.Table {
	return rcv._tab
}

/// Generalized state of health type (BIOLOGICAL, CHEMICAL, COGNITIVE, HYDRATION, LIFE SIGN, RADIATION, SHOCK, THERMAL).
/// Example: /// Example: COGNITIVE
/// Constraints: Minimum length = 0, Maximum length = 32
func (rcv *EvacHealthState_Ingest) Type() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Generalized state of health type (BIOLOGICAL, CHEMICAL, COGNITIVE, HYDRATION, LIFE SIGN, RADIATION, SHOCK, THERMAL).
/// Example: /// Example: COGNITIVE
/// Constraints: Minimum length = 0, Maximum length = 32
/// Medical color code used to quickly identify various medical state (e.g. AMBER, BLACK, BLUE, GRAY, NORMAL, RED).
/// Example: /// Example: BLUE
/// Constraints: Minimum length = 0, Maximum length = 32
func (rcv *EvacHealthState_Ingest) HealthStateCode() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Medical color code used to quickly identify various medical state (e.g. AMBER, BLACK, BLUE, GRAY, NORMAL, RED).
/// Example: /// Example: BLUE
/// Constraints: Minimum length = 0, Maximum length = 32
/// Medical confidence factor.
/// Example: /// Example: 1
/// Constraints: No constraints specified.
func (rcv *EvacHealthState_Ingest) MedConfFactor() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

/// Medical confidence factor.
/// Example: /// Example: 1
/// Constraints: No constraints specified.
func (rcv *EvacHealthState_Ingest) MutateMedConfFactor(n int32) bool {
	return rcv._tab.MutateInt32Slot(8, n)
}

/// Datetime of the health state diagnosis in ISO 8601 UTC datetime format.
/// Example: /// Example: 2021-10-15T16:00:00.123Z
/// Constraints: No constraints specified.
func (rcv *EvacHealthState_Ingest) Time() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Datetime of the health state diagnosis in ISO 8601 UTC datetime format.
/// Example: /// Example: 2021-10-15T16:00:00.123Z
/// Constraints: No constraints specified.
func EvacHealthState_IngestStart(builder *flatbuffers.Builder) {
	builder.StartObject(4)
}
func EvacHealthState_IngestAddType(builder *flatbuffers.Builder, type_ flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(type_), 0)
}
func EvacHealthState_IngestAddHealthStateCode(builder *flatbuffers.Builder, healthStateCode flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(healthStateCode), 0)
}
func EvacHealthState_IngestAddMedConfFactor(builder *flatbuffers.Builder, medConfFactor int32) {
	builder.PrependInt32Slot(2, medConfFactor, 0)
}
func EvacHealthState_IngestAddTime(builder *flatbuffers.Builder, time flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(3, flatbuffers.UOffsetT(time), 0)
}
func EvacHealthState_IngestEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
