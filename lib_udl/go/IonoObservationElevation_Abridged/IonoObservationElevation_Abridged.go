// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package IonoObservationElevation_Abridged

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

/// /// Multidimensional array of incoming elevation at the receiver. Has the same dimensions as power. Antenna type, configuration, and method of determination to be documented in the metadata notes field.
type IonoObservationElevation_Abridged struct {
	_tab flatbuffers.Table
}

const IonoObservationElevation_AbridgedIdentifier = "IONO"

func GetRootAsIonoObservationElevation_Abridged(buf []byte, offset flatbuffers.UOffsetT) *IonoObservationElevation_Abridged {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &IonoObservationElevation_Abridged{}
	x.Init(buf, n+offset)
	return x
}

func FinishIonoObservationElevation_AbridgedBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	identifierBytes := []byte(IonoObservationElevation_AbridgedIdentifier)
	builder.FinishWithFileIdentifier(offset, identifierBytes)
}

func IonoObservationElevation_AbridgedBufferHasIdentifier(buf []byte) bool {
	return flatbuffers.BufferHasIdentifier(buf, IonoObservationElevation_AbridgedIdentifier)
}

func GetSizePrefixedRootAsIonoObservationElevation_Abridged(buf []byte, offset flatbuffers.UOffsetT) *IonoObservationElevation_Abridged {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &IonoObservationElevation_Abridged{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedIonoObservationElevation_AbridgedBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	identifierBytes := []byte(IonoObservationElevation_AbridgedIdentifier)
	builder.FinishSizePrefixedWithFileIdentifier(offset, identifierBytes)
}

func SizePrefixedIonoObservationElevation_AbridgedBufferHasIdentifier(buf []byte) bool {
	return flatbuffers.SizePrefixedBufferHasIdentifier(buf, IonoObservationElevation_AbridgedIdentifier)
}

func (rcv *IonoObservationElevation_Abridged) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *IonoObservationElevation_Abridged) Table() flatbuffers.Table {
	return rcv._tab
}

/// Notes for the elevation data.
/// Example: /// Example: NOTES
/// Constraints: Minimum length = 0, Maximum length = 512
func (rcv *IonoObservationElevation_Abridged) Notes() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Notes for the elevation data.
/// Example: /// Example: NOTES
/// Constraints: Minimum length = 0, Maximum length = 512
/// Array of integers of the elevation array dimensions.
/// Example: /// Example: [2, 3]
/// Constraints: No constraints specified.
func (rcv *IonoObservationElevation_Abridged) Dimensions(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *IonoObservationElevation_Abridged) DimensionsLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

/// Array of integers of the elevation array dimensions.
/// Example: /// Example: [2, 3]
/// Constraints: No constraints specified.
/// Array of names for dimensions.
/// Example: /// Example: ['NAME1', 'NAME2']
/// Constraints: No constraints specified.
func (rcv *IonoObservationElevation_Abridged) DimensionName(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *IonoObservationElevation_Abridged) DimensionNameLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

/// Array of names for dimensions.
/// Example: /// Example: ['NAME1', 'NAME2']
/// Constraints: No constraints specified.
/// Array of incoming elevation at the receiver.
/// Example: /// Example: [[[[[[[0.02, 0.034]]]]]]]
/// Constraints: No constraints specified.
func (rcv *IonoObservationElevation_Abridged) Data(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *IonoObservationElevation_Abridged) DataLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

/// Array of incoming elevation at the receiver.
/// Example: /// Example: [[[[[[[0.02, 0.034]]]]]]]
/// Constraints: No constraints specified.
func IonoObservationElevation_AbridgedStart(builder *flatbuffers.Builder) {
	builder.StartObject(4)
}
func IonoObservationElevation_AbridgedAddNotes(builder *flatbuffers.Builder, notes flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(notes), 0)
}
func IonoObservationElevation_AbridgedAddDimensions(builder *flatbuffers.Builder, dimensions flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(dimensions), 0)
}
func IonoObservationElevation_AbridgedStartDimensionsVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func IonoObservationElevation_AbridgedAddDimensionName(builder *flatbuffers.Builder, dimensionName flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(dimensionName), 0)
}
func IonoObservationElevation_AbridgedStartDimensionNameVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func IonoObservationElevation_AbridgedAddData(builder *flatbuffers.Builder, data flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(3, flatbuffers.UOffsetT(data), 0)
}
func IonoObservationElevation_AbridgedStartDataVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func IonoObservationElevation_AbridgedEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
