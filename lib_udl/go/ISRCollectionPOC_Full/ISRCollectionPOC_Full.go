// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package ISRCollectionPOC_Full

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

/// /// Information about the Point of Contact (POC) for this ISR Collection.
type ISRCollectionPOC_Full struct {
	_tab flatbuffers.Table
}

const ISRCollectionPOC_FullIdentifier = "ISRC"

func GetRootAsISRCollectionPOC_Full(buf []byte, offset flatbuffers.UOffsetT) *ISRCollectionPOC_Full {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &ISRCollectionPOC_Full{}
	x.Init(buf, n+offset)
	return x
}

func FinishISRCollectionPOC_FullBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	identifierBytes := []byte(ISRCollectionPOC_FullIdentifier)
	builder.FinishWithFileIdentifier(offset, identifierBytes)
}

func ISRCollectionPOC_FullBufferHasIdentifier(buf []byte) bool {
	return flatbuffers.BufferHasIdentifier(buf, ISRCollectionPOC_FullIdentifier)
}

func GetSizePrefixedRootAsISRCollectionPOC_Full(buf []byte, offset flatbuffers.UOffsetT) *ISRCollectionPOC_Full {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &ISRCollectionPOC_Full{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedISRCollectionPOC_FullBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	identifierBytes := []byte(ISRCollectionPOC_FullIdentifier)
	builder.FinishSizePrefixedWithFileIdentifier(offset, identifierBytes)
}

func SizePrefixedISRCollectionPOC_FullBufferHasIdentifier(buf []byte) bool {
	return flatbuffers.SizePrefixedBufferHasIdentifier(buf, ISRCollectionPOC_FullIdentifier)
}

func (rcv *ISRCollectionPOC_Full) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *ISRCollectionPOC_Full) Table() flatbuffers.Table {
	return rcv._tab
}

/// Unique identifier of the collection requirement POC.
/// Example: /// Example: ISRCOLLECTIONPOC-ID
/// Constraints: Minimum length = 0, Maximum length = 36
func (rcv *ISRCollectionPOC_Full) Id() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Unique identifier of the collection requirement POC.
/// Example: /// Example: ISRCOLLECTIONPOC-ID
/// Constraints: Minimum length = 0, Maximum length = 36
/// Name of the POC.
/// Example: /// Example: NAME
/// Constraints: Minimum length = 0, Maximum length = 128
func (rcv *ISRCollectionPOC_Full) Name() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Name of the POC.
/// Example: /// Example: NAME
/// Constraints: Minimum length = 0, Maximum length = 128
/// Callsign of the POC.
/// Example: /// Example: CALLSIGN
/// Constraints: Minimum length = 0, Maximum length = 32
func (rcv *ISRCollectionPOC_Full) Callsign() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Callsign of the POC.
/// Example: /// Example: CALLSIGN
/// Constraints: Minimum length = 0, Maximum length = 32
/// Unit the POC belongs to.
/// Example: /// Example: UNIT
/// Constraints: Minimum length = 0, Maximum length = 32
func (rcv *ISRCollectionPOC_Full) Unit() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Unit the POC belongs to.
/// Example: /// Example: UNIT
/// Constraints: Minimum length = 0, Maximum length = 32
/// Email address of the POC.
/// Example: /// Example: EMAIL
/// Constraints: Minimum length = 0, Maximum length = 128
func (rcv *ISRCollectionPOC_Full) Email() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Email address of the POC.
/// Example: /// Example: EMAIL
/// Constraints: Minimum length = 0, Maximum length = 128
/// Phone number of the POC.
/// Example: /// Example: PHONE
/// Constraints: Minimum length = 0, Maximum length = 45
func (rcv *ISRCollectionPOC_Full) Phone() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Phone number of the POC.
/// Example: /// Example: PHONE
/// Constraints: Minimum length = 0, Maximum length = 45
/// Radio Frequency the POC is on.
/// Example: /// Example: 123.23
/// Constraints: No constraints specified.
func (rcv *ISRCollectionPOC_Full) RadioFrequency() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Radio Frequency the POC is on.
/// Example: /// Example: 123.23
/// Constraints: No constraints specified.
func (rcv *ISRCollectionPOC_Full) MutateRadioFrequency(n float64) bool {
	return rcv._tab.MutateFloat64Slot(16, n)
}

/// Chat system the POC is accessing.
/// Example: /// Example: CHAT
/// Constraints: Minimum length = 0, Maximum length = 32
func (rcv *ISRCollectionPOC_Full) ChatSystem() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(18))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Chat system the POC is accessing.
/// Example: /// Example: CHAT
/// Constraints: Minimum length = 0, Maximum length = 32
/// Chat name of the POC.
/// Example: /// Example: CHAT_NAME
/// Constraints: Minimum length = 0, Maximum length = 32
func (rcv *ISRCollectionPOC_Full) ChatName() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(20))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Chat name of the POC.
/// Example: /// Example: CHAT_NAME
/// Constraints: Minimum length = 0, Maximum length = 32
/// Amplifying notes about the POC.
/// Example: /// Example: NOTES
/// Constraints: Minimum length = 0, Maximum length = 256
func (rcv *ISRCollectionPOC_Full) Notes() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(22))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Amplifying notes about the POC.
/// Example: /// Example: NOTES
/// Constraints: Minimum length = 0, Maximum length = 256
func ISRCollectionPOC_FullStart(builder *flatbuffers.Builder) {
	builder.StartObject(10)
}
func ISRCollectionPOC_FullAddId(builder *flatbuffers.Builder, id flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(id), 0)
}
func ISRCollectionPOC_FullAddName(builder *flatbuffers.Builder, name flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(name), 0)
}
func ISRCollectionPOC_FullAddCallsign(builder *flatbuffers.Builder, callsign flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(callsign), 0)
}
func ISRCollectionPOC_FullAddUnit(builder *flatbuffers.Builder, unit flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(3, flatbuffers.UOffsetT(unit), 0)
}
func ISRCollectionPOC_FullAddEmail(builder *flatbuffers.Builder, email flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(4, flatbuffers.UOffsetT(email), 0)
}
func ISRCollectionPOC_FullAddPhone(builder *flatbuffers.Builder, phone flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(5, flatbuffers.UOffsetT(phone), 0)
}
func ISRCollectionPOC_FullAddRadioFrequency(builder *flatbuffers.Builder, radioFrequency float64) {
	builder.PrependFloat64Slot(6, radioFrequency, 0.0)
}
func ISRCollectionPOC_FullAddChatSystem(builder *flatbuffers.Builder, chatSystem flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(7, flatbuffers.UOffsetT(chatSystem), 0)
}
func ISRCollectionPOC_FullAddChatName(builder *flatbuffers.Builder, chatName flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(8, flatbuffers.UOffsetT(chatName), 0)
}
func ISRCollectionPOC_FullAddNotes(builder *flatbuffers.Builder, notes flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(9, flatbuffers.UOffsetT(notes), 0)
}
func ISRCollectionPOC_FullEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
