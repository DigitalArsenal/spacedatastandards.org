// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package IonoObservationCharAtts_Full

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

/// /// Characteristic attributes of a IonoObservation.
type IonoObservationCharAtts_Full struct {
	_tab flatbuffers.Table
}

const IonoObservationCharAtts_FullIdentifier = "IONO"

func GetRootAsIonoObservationCharAtts_Full(buf []byte, offset flatbuffers.UOffsetT) *IonoObservationCharAtts_Full {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &IonoObservationCharAtts_Full{}
	x.Init(buf, n+offset)
	return x
}

func FinishIonoObservationCharAtts_FullBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	identifierBytes := []byte(IonoObservationCharAtts_FullIdentifier)
	builder.FinishWithFileIdentifier(offset, identifierBytes)
}

func IonoObservationCharAtts_FullBufferHasIdentifier(buf []byte) bool {
	return flatbuffers.BufferHasIdentifier(buf, IonoObservationCharAtts_FullIdentifier)
}

func GetSizePrefixedRootAsIonoObservationCharAtts_Full(buf []byte, offset flatbuffers.UOffsetT) *IonoObservationCharAtts_Full {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &IonoObservationCharAtts_Full{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedIonoObservationCharAtts_FullBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	identifierBytes := []byte(IonoObservationCharAtts_FullIdentifier)
	builder.FinishSizePrefixedWithFileIdentifier(offset, identifierBytes)
}

func SizePrefixedIonoObservationCharAtts_FullBufferHasIdentifier(buf []byte) bool {
	return flatbuffers.SizePrefixedBufferHasIdentifier(buf, IonoObservationCharAtts_FullIdentifier)
}

func (rcv *IonoObservationCharAtts_Full) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *IonoObservationCharAtts_Full) Table() flatbuffers.Table {
	return rcv._tab
}

/// Characteristic's URSI ID. See the characteristic's description for its corresponding URSI ID.
/// Example: /// Example: 04
/// Constraints: Minimum length = 0, Maximum length = 3
func (rcv *IonoObservationCharAtts_Full) UrsiId() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Characteristic's URSI ID. See the characteristic's description for its corresponding URSI ID.
/// Example: /// Example: 04
/// Constraints: Minimum length = 0, Maximum length = 3
/// Characteristic name. This value should reflect the UDL field name for the corresponding characteristic.
/// Example: /// Example: hprimeF2
/// Constraints: Minimum length = 0, Maximum length = 16
func (rcv *IonoObservationCharAtts_Full) CharName() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Characteristic name. This value should reflect the UDL field name for the corresponding characteristic.
/// Example: /// Example: hprimeF2
/// Constraints: Minimum length = 0, Maximum length = 16
/// Specified characteristic's lower bound. Should be less than or equal to the characteristic's current value as set in this record.
/// Example: /// Example: 1.26
/// Constraints: No constraints specified.
func (rcv *IonoObservationCharAtts_Full) LowerBound() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Specified characteristic's lower bound. Should be less than or equal to the characteristic's current value as set in this record.
/// Example: /// Example: 1.26
/// Constraints: No constraints specified.
func (rcv *IonoObservationCharAtts_Full) MutateLowerBound(n float64) bool {
	return rcv._tab.MutateFloat64Slot(8, n)
}

/// Specified characteristic's upper bound. Should be greater than or equal to the characteristic's current value as set in this record.
/// Example: /// Example: 2.57
/// Constraints: No constraints specified.
func (rcv *IonoObservationCharAtts_Full) UpperBound() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Specified characteristic's upper bound. Should be greater than or equal to the characteristic's current value as set in this record.
/// Example: /// Example: 2.57
/// Constraints: No constraints specified.
func (rcv *IonoObservationCharAtts_Full) MutateUpperBound(n float64) bool {
	return rcv._tab.MutateFloat64Slot(10, n)
}

/// Qualifying letter (Q) for the characteristic specified by URSI ID. Describes specific ionospheric conditions, beyond numerical values.
/// Example: /// Example: T
/// Constraints: No constraints specified.
func (rcv *IonoObservationCharAtts_Full) Q() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Qualifying letter (Q) for the characteristic specified by URSI ID. Describes specific ionospheric conditions, beyond numerical values.
/// Example: /// Example: T
/// Constraints: No constraints specified.
/// Descriptive letter (D) for the characteristic specified by URSI ID. Describes specific ionospheric conditions, beyond numerical values.
/// Example: /// Example: K
/// Constraints: No constraints specified.
func (rcv *IonoObservationCharAtts_Full) D() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Descriptive letter (D) for the characteristic specified by URSI ID. Describes specific ionospheric conditions, beyond numerical values.
/// Example: /// Example: K
/// Constraints: No constraints specified.
/// Name of the climate model.
/// Example: /// Example: IRI
/// Constraints: Minimum length = 0, Maximum length = 64
func (rcv *IonoObservationCharAtts_Full) ClimateModelName() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Name of the climate model.
/// Example: /// Example: IRI
/// Constraints: Minimum length = 0, Maximum length = 64
/// List of options for the climate model.
/// Example: /// Example: ['URSI-88', 'No storm']
/// Constraints: No constraints specified.
func (rcv *IonoObservationCharAtts_Full) ClimateModelOptions(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(18))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *IonoObservationCharAtts_Full) ClimateModelOptionsLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(18))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

/// List of options for the climate model.
/// Example: /// Example: ['URSI-88', 'No storm']
/// Constraints: No constraints specified.
/// Input parameters for the climate model.
/// Example: /// Example: ['ISSN1 88.1', 'Option 2']
/// Constraints: No constraints specified.
func (rcv *IonoObservationCharAtts_Full) ClimateModelInputParams(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(20))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *IonoObservationCharAtts_Full) ClimateModelInputParamsLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(20))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

/// Input parameters for the climate model.
/// Example: /// Example: ['ISSN1 88.1', 'Option 2']
/// Constraints: No constraints specified.
/// Uncertainty Bounds (lower and upper) define an interval around reported value that contains true value at the specified probability level. Probability levels are specified in terms of percentile (from 1 to 100) or the standard deviation, sigma (e.g. 1sigma, 2sigma, 3sigma, 5percentile, 10percentile, 25percentile).
/// Example: /// Example: 1sigma
/// Constraints: No constraints specified.
func (rcv *IonoObservationCharAtts_Full) UncertaintyBoundType() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(22))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Uncertainty Bounds (lower and upper) define an interval around reported value that contains true value at the specified probability level. Probability levels are specified in terms of percentile (from 1 to 100) or the standard deviation, sigma (e.g. 1sigma, 2sigma, 3sigma, 5percentile, 10percentile, 25percentile).
/// Example: /// Example: 1sigma
/// Constraints: No constraints specified.
func IonoObservationCharAtts_FullStart(builder *flatbuffers.Builder) {
	builder.StartObject(10)
}
func IonoObservationCharAtts_FullAddUrsiId(builder *flatbuffers.Builder, ursiId flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(ursiId), 0)
}
func IonoObservationCharAtts_FullAddCharName(builder *flatbuffers.Builder, charName flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(charName), 0)
}
func IonoObservationCharAtts_FullAddLowerBound(builder *flatbuffers.Builder, lowerBound float64) {
	builder.PrependFloat64Slot(2, lowerBound, 0.0)
}
func IonoObservationCharAtts_FullAddUpperBound(builder *flatbuffers.Builder, upperBound float64) {
	builder.PrependFloat64Slot(3, upperBound, 0.0)
}
func IonoObservationCharAtts_FullAddQ(builder *flatbuffers.Builder, q flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(4, flatbuffers.UOffsetT(q), 0)
}
func IonoObservationCharAtts_FullAddD(builder *flatbuffers.Builder, d flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(5, flatbuffers.UOffsetT(d), 0)
}
func IonoObservationCharAtts_FullAddClimateModelName(builder *flatbuffers.Builder, climateModelName flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(6, flatbuffers.UOffsetT(climateModelName), 0)
}
func IonoObservationCharAtts_FullAddClimateModelOptions(builder *flatbuffers.Builder, climateModelOptions flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(7, flatbuffers.UOffsetT(climateModelOptions), 0)
}
func IonoObservationCharAtts_FullStartClimateModelOptionsVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func IonoObservationCharAtts_FullAddClimateModelInputParams(builder *flatbuffers.Builder, climateModelInputParams flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(8, flatbuffers.UOffsetT(climateModelInputParams), 0)
}
func IonoObservationCharAtts_FullStartClimateModelInputParamsVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func IonoObservationCharAtts_FullAddUncertaintyBoundType(builder *flatbuffers.Builder, uncertaintyBoundType flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(9, flatbuffers.UOffsetT(uncertaintyBoundType), 0)
}
func IonoObservationCharAtts_FullEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
