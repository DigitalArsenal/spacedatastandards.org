// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package LogisticsParts_Full

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

/// /// The parts associated with this support item.
type LogisticsParts_Full struct {
	_tab flatbuffers.Table
}

const LogisticsParts_FullIdentifier = "LOGI"

func GetRootAsLogisticsParts_Full(buf []byte, offset flatbuffers.UOffsetT) *LogisticsParts_Full {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &LogisticsParts_Full{}
	x.Init(buf, n+offset)
	return x
}

func FinishLogisticsParts_FullBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	identifierBytes := []byte(LogisticsParts_FullIdentifier)
	builder.FinishWithFileIdentifier(offset, identifierBytes)
}

func LogisticsParts_FullBufferHasIdentifier(buf []byte) bool {
	return flatbuffers.BufferHasIdentifier(buf, LogisticsParts_FullIdentifier)
}

func GetSizePrefixedRootAsLogisticsParts_Full(buf []byte, offset flatbuffers.UOffsetT) *LogisticsParts_Full {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &LogisticsParts_Full{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedLogisticsParts_FullBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	identifierBytes := []byte(LogisticsParts_FullIdentifier)
	builder.FinishSizePrefixedWithFileIdentifier(offset, identifierBytes)
}

func SizePrefixedLogisticsParts_FullBufferHasIdentifier(buf []byte) bool {
	return flatbuffers.SizePrefixedBufferHasIdentifier(buf, LogisticsParts_FullIdentifier)
}

func (rcv *LogisticsParts_Full) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *LogisticsParts_Full) Table() flatbuffers.Table {
	return rcv._tab
}

/// Requested or supplied part number.
/// Example: /// Example: MS35338-42
/// Constraints: Minimum length = 0, Maximum length = 20
func (rcv *LogisticsParts_Full) PartNumber() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Requested or supplied part number.
/// Example: /// Example: MS35338-42
/// Constraints: Minimum length = 0, Maximum length = 20
/// The National Stock Number of the part being requested or supplied.
/// Example: /// Example: 5310-00-045-3299
/// Constraints: Minimum length = 0, Maximum length = 20
func (rcv *LogisticsParts_Full) NationalStockNumber() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The National Stock Number of the part being requested or supplied.
/// Example: /// Example: 5310-00-045-3299
/// Constraints: Minimum length = 0, Maximum length = 20
/// Code for a unit of measurement.
/// Example: /// Example: EA
/// Constraints: Minimum length = 0, Maximum length = 2
func (rcv *LogisticsParts_Full) MeasurementUnitCode() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Code for a unit of measurement.
/// Example: /// Example: EA
/// Constraints: Minimum length = 0, Maximum length = 2
/// Work Unit Code (WUC), or for some aircraft types, the Reference Designator.
/// Example: /// Example: 5611UU001
/// Constraints: Minimum length = 0, Maximum length = 10
func (rcv *LogisticsParts_Full) WorkUnitCode() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Work Unit Code (WUC), or for some aircraft types, the Reference Designator.
/// Example: /// Example: 5611UU001
/// Constraints: Minimum length = 0, Maximum length = 10
/// Indicates the specified Technical Order manual holding the aircraft information for use in diagnosing a problem or condition.
/// Example: /// Example: 1C-17A-4
/// Constraints: Minimum length = 0, Maximum length = 15
func (rcv *LogisticsParts_Full) TechnicalOrderText() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Indicates the specified Technical Order manual holding the aircraft information for use in diagnosing a problem or condition.
/// Example: /// Example: 1C-17A-4
/// Constraints: Minimum length = 0, Maximum length = 15
/// Technical order manual figure number for the requested / supplied part.
/// Example: /// Example: 3
/// Constraints: Minimum length = 0, Maximum length = 7
func (rcv *LogisticsParts_Full) FigureNumber() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Technical order manual figure number for the requested / supplied part.
/// Example: /// Example: 3
/// Constraints: Minimum length = 0, Maximum length = 7
/// Technical order manual index number for the requested part.
/// Example: /// Example: 4
/// Constraints: Minimum length = 0, Maximum length = 4
func (rcv *LogisticsParts_Full) IndexNumber() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Technical order manual index number for the requested part.
/// Example: /// Example: 4
/// Constraints: Minimum length = 0, Maximum length = 4
/// The person who validated the request for parts.
/// Example: /// Example: JOHN SMITH
/// Constraints: Minimum length = 0, Maximum length = 25
func (rcv *LogisticsParts_Full) RequestVerifier() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(18))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The person who validated the request for parts.
/// Example: /// Example: JOHN SMITH
/// Constraints: Minimum length = 0, Maximum length = 25
/// The person who validated that the sourced location has, and can supply, the requested parts.
/// Example: /// Example: JANE DOE
/// Constraints: Minimum length = 0, Maximum length = 25
func (rcv *LogisticsParts_Full) LocationVerifier() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(20))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The person who validated that the sourced location has, and can supply, the requested parts.
/// Example: /// Example: JANE DOE
/// Constraints: Minimum length = 0, Maximum length = 25
/// The supply document number.
/// Example: /// Example: J223FU31908300
/// Constraints: Minimum length = 0, Maximum length = 17
func (rcv *LogisticsParts_Full) SupplyDocumentNumber() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(22))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The supply document number.
/// Example: /// Example: J223FU31908300
/// Constraints: Minimum length = 0, Maximum length = 17
/// The supply stocks for this support item.
/// Example: /// Example: No example provided.
/// Constraints: No constraints specified.
func (rcv *LogisticsParts_Full) LogisticsStocks(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(24))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *LogisticsParts_Full) LogisticsStocksLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(24))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

/// The supply stocks for this support item.
/// Example: /// Example: No example provided.
/// Constraints: No constraints specified.
func LogisticsParts_FullStart(builder *flatbuffers.Builder) {
	builder.StartObject(11)
}
func LogisticsParts_FullAddPartNumber(builder *flatbuffers.Builder, partNumber flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(partNumber), 0)
}
func LogisticsParts_FullAddNationalStockNumber(builder *flatbuffers.Builder, nationalStockNumber flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(nationalStockNumber), 0)
}
func LogisticsParts_FullAddMeasurementUnitCode(builder *flatbuffers.Builder, measurementUnitCode flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(measurementUnitCode), 0)
}
func LogisticsParts_FullAddWorkUnitCode(builder *flatbuffers.Builder, workUnitCode flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(3, flatbuffers.UOffsetT(workUnitCode), 0)
}
func LogisticsParts_FullAddTechnicalOrderText(builder *flatbuffers.Builder, technicalOrderText flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(4, flatbuffers.UOffsetT(technicalOrderText), 0)
}
func LogisticsParts_FullAddFigureNumber(builder *flatbuffers.Builder, figureNumber flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(5, flatbuffers.UOffsetT(figureNumber), 0)
}
func LogisticsParts_FullAddIndexNumber(builder *flatbuffers.Builder, indexNumber flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(6, flatbuffers.UOffsetT(indexNumber), 0)
}
func LogisticsParts_FullAddRequestVerifier(builder *flatbuffers.Builder, requestVerifier flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(7, flatbuffers.UOffsetT(requestVerifier), 0)
}
func LogisticsParts_FullAddLocationVerifier(builder *flatbuffers.Builder, locationVerifier flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(8, flatbuffers.UOffsetT(locationVerifier), 0)
}
func LogisticsParts_FullAddSupplyDocumentNumber(builder *flatbuffers.Builder, supplyDocumentNumber flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(9, flatbuffers.UOffsetT(supplyDocumentNumber), 0)
}
func LogisticsParts_FullAddLogisticsStocks(builder *flatbuffers.Builder, logisticsStocks flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(10, flatbuffers.UOffsetT(logisticsStocks), 0)
}
func LogisticsParts_FullStartLogisticsStocksVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func LogisticsParts_FullEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
