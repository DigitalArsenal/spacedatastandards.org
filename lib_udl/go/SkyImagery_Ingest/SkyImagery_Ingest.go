// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package SkyImagery_Ingest

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

/// /// Model representation of sky imagery data.  Sky imagery is ground or space based telescope imagery of RSO's and includes metadata on the image (time, source, etc) as well as binary image content (e.g. FITS, EOSSA, EOCHIP) . Binary content must be downloaded individually by ID using the 'getFile' operation.
type SkyImagery_Ingest struct {
	_tab flatbuffers.Table
}

const SkyImagery_IngestIdentifier = "SKYI"

func GetRootAsSkyImagery_Ingest(buf []byte, offset flatbuffers.UOffsetT) *SkyImagery_Ingest {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &SkyImagery_Ingest{}
	x.Init(buf, n+offset)
	return x
}

func FinishSkyImagery_IngestBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	identifierBytes := []byte(SkyImagery_IngestIdentifier)
	builder.FinishWithFileIdentifier(offset, identifierBytes)
}

func SkyImagery_IngestBufferHasIdentifier(buf []byte) bool {
	return flatbuffers.BufferHasIdentifier(buf, SkyImagery_IngestIdentifier)
}

func GetSizePrefixedRootAsSkyImagery_Ingest(buf []byte, offset flatbuffers.UOffsetT) *SkyImagery_Ingest {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &SkyImagery_Ingest{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedSkyImagery_IngestBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	identifierBytes := []byte(SkyImagery_IngestIdentifier)
	builder.FinishSizePrefixedWithFileIdentifier(offset, identifierBytes)
}

func SizePrefixedSkyImagery_IngestBufferHasIdentifier(buf []byte) bool {
	return flatbuffers.SizePrefixedBufferHasIdentifier(buf, SkyImagery_IngestIdentifier)
}

func (rcv *SkyImagery_Ingest) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *SkyImagery_Ingest) Table() flatbuffers.Table {
	return rcv._tab
}

/// Unique identifier of the record, auto-generated by the system.
/// Example: /// Example: SKYIMAGERY-ID
/// Constraints: Minimum length = 1, Maximum length = 36
func (rcv *SkyImagery_Ingest) Id() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Unique identifier of the record, auto-generated by the system.
/// Example: /// Example: SKYIMAGERY-ID
/// Constraints: Minimum length = 1, Maximum length = 36
/// Classification marking of the data in IC/CAPCO Portion-marked format.
/// Example: /// Example: U
/// Constraints: Minimum length = 1, Maximum length = 128
func (rcv *SkyImagery_Ingest) ClassificationMarking() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Classification marking of the data in IC/CAPCO Portion-marked format.
/// Example: /// Example: U
/// Constraints: Minimum length = 1, Maximum length = 128
/// Optional identifier of the target on-orbit object, if correlated.
/// Example: /// Example: 44920
/// Constraints: Minimum length = 0, Maximum length = 36
func (rcv *SkyImagery_Ingest) IdOnOrbit() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Optional identifier of the target on-orbit object, if correlated.
/// Example: /// Example: 44920
/// Constraints: Minimum length = 0, Maximum length = 36
/// Optional identifier provided by the imaging source to indicate the target onorbit object of this image. This may be an internal identifier and not necessarily a valid satellite number.
/// Example: /// Example: X15-23452
/// Constraints: Minimum length = 0, Maximum length = 64
func (rcv *SkyImagery_Ingest) OrigObjectId() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Optional identifier provided by the imaging source to indicate the target onorbit object of this image. This may be an internal identifier and not necessarily a valid satellite number.
/// Example: /// Example: X15-23452
/// Constraints: Minimum length = 0, Maximum length = 64
/// Optional identifier of the AttitudeSet data record describing the orientation of an object body.
/// Example: /// Example: d039ba29-52f4-4839-8a8f-e85fa416aec5
/// Constraints: Minimum length = 0, Maximum length = 36
func (rcv *SkyImagery_Ingest) IdAttitudeSet() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Optional identifier of the AttitudeSet data record describing the orientation of an object body.
/// Example: /// Example: d039ba29-52f4-4839-8a8f-e85fa416aec5
/// Constraints: Minimum length = 0, Maximum length = 36
/// Unique identifier of the reporting sensor.
/// Example: /// Example: 420
/// Constraints: Minimum length = 0, Maximum length = 36
func (rcv *SkyImagery_Ingest) IdSensor() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Unique identifier of the reporting sensor.
/// Example: /// Example: 420
/// Constraints: Minimum length = 0, Maximum length = 36
/// Catalog number of the target on-orbit object.
/// Example: /// Example: 25544
/// Constraints: No constraints specified.
func (rcv *SkyImagery_Ingest) SatNo() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

/// Catalog number of the target on-orbit object.
/// Example: /// Example: 25544
/// Constraints: No constraints specified.
func (rcv *SkyImagery_Ingest) MutateSatNo(n int32) bool {
	return rcv._tab.MutateInt32Slot(16, n)
}

/// Optional identifier provided by the imaging source to indicate the sensor identifier which produced this image. This may be an internal identifier and not necessarily a valid sensor ID.
/// Example: /// Example: origSensorId
/// Constraints: Minimum length = 0, Maximum length = 64
func (rcv *SkyImagery_Ingest) OrigSensorId() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(18))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Optional identifier provided by the imaging source to indicate the sensor identifier which produced this image. This may be an internal identifier and not necessarily a valid sensor ID.
/// Example: /// Example: origSensorId
/// Constraints: Minimum length = 0, Maximum length = 64
/// Sensor latitude at exposure start epoch, in degrees. If null, can be obtained from sensor info. -90 to 90 degrees (negative values south of equator).
/// Example: /// Example: -33.283048
/// Constraints: No constraints specified.
func (rcv *SkyImagery_Ingest) Senlat() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(20))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Sensor latitude at exposure start epoch, in degrees. If null, can be obtained from sensor info. -90 to 90 degrees (negative values south of equator).
/// Example: /// Example: -33.283048
/// Constraints: No constraints specified.
func (rcv *SkyImagery_Ingest) MutateSenlat(n float64) bool {
	return rcv._tab.MutateFloat64Slot(20, n)
}

/// Sensor longitude at exposure start epoch, in degrees. If null, can be obtained from sensor info. -180 to 180 degrees (negative values west of Prime Meridian).
/// Example: /// Example: 149.372549
/// Constraints: No constraints specified.
func (rcv *SkyImagery_Ingest) Senlon() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(22))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Sensor longitude at exposure start epoch, in degrees. If null, can be obtained from sensor info. -180 to 180 degrees (negative values west of Prime Meridian).
/// Example: /// Example: 149.372549
/// Constraints: No constraints specified.
func (rcv *SkyImagery_Ingest) MutateSenlon(n float64) bool {
	return rcv._tab.MutateFloat64Slot(22, n)
}

/// Sensor altitude at exposure start epoch, in km. If null, can be obtained from sensor info.
/// Example: /// Example: 14.483619321
/// Constraints: No constraints specified.
func (rcv *SkyImagery_Ingest) Senalt() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(24))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Sensor altitude at exposure start epoch, in km. If null, can be obtained from sensor info.
/// Example: /// Example: 14.483619321
/// Constraints: No constraints specified.
func (rcv *SkyImagery_Ingest) MutateSenalt(n float64) bool {
	return rcv._tab.MutateFloat64Slot(24, n)
}

/// Sensor x position at exposure start epoch, in km (if mobile/onorbit) in J2000 coordinate frame.
/// Example: /// Example: 14.52
/// Constraints: No constraints specified.
func (rcv *SkyImagery_Ingest) Senx() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(26))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Sensor x position at exposure start epoch, in km (if mobile/onorbit) in J2000 coordinate frame.
/// Example: /// Example: 14.52
/// Constraints: No constraints specified.
func (rcv *SkyImagery_Ingest) MutateSenx(n float64) bool {
	return rcv._tab.MutateFloat64Slot(26, n)
}

/// Sensor y position at exposure start epoch, in km (if mobile/onorbit) in J2000 coordinate frame.
/// Example: /// Example: 32.41
/// Constraints: No constraints specified.
func (rcv *SkyImagery_Ingest) Seny() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(28))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Sensor y position at exposure start epoch, in km (if mobile/onorbit) in J2000 coordinate frame.
/// Example: /// Example: 32.41
/// Constraints: No constraints specified.
func (rcv *SkyImagery_Ingest) MutateSeny(n float64) bool {
	return rcv._tab.MutateFloat64Slot(28, n)
}

/// Sensor z position at exposure start epoch, in km (if mobile/onorbit) in J2000 coordinate frame.
/// Example: /// Example: 376.12
/// Constraints: No constraints specified.
func (rcv *SkyImagery_Ingest) Senz() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(30))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Sensor z position at exposure start epoch, in km (if mobile/onorbit) in J2000 coordinate frame.
/// Example: /// Example: 376.12
/// Constraints: No constraints specified.
func (rcv *SkyImagery_Ingest) MutateSenz(n float64) bool {
	return rcv._tab.MutateFloat64Slot(30, n)
}

/// The quaternion describing the rotation of the body-fixed frame used for this system into the local geodetic frame, at exposure start epoch (expStartTime). The array element order convention is scalar component first, followed by the three vector components. For a vector u in the body-fixed frame, the corresponding vector u' in the geodetic frame should satisfy u' = quq*, where q is this quaternion.
/// Example: /// Example: [0.03, 0.02, 0.01, 0.012]
/// Constraints: No constraints specified.
func (rcv *SkyImagery_Ingest) SenQuat(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(32))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *SkyImagery_Ingest) SenQuatLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(32))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

/// The quaternion describing the rotation of the body-fixed frame used for this system into the local geodetic frame, at exposure start epoch (expStartTime). The array element order convention is scalar component first, followed by the three vector components. For a vector u in the body-fixed frame, the corresponding vector u' in the geodetic frame should satisfy u' = quq*, where q is this quaternion.
/// Example: /// Example: [0.03, 0.02, 0.01, 0.012]
/// Constraints: No constraints specified.
/// The derivative of the quaternion describing the rotation of the body-fixed frame used for this system into the local geodetic frame, exposure start epoch (expStartTime). The array element order convention is scalar component first, followed by the three vector components. For a vector u in the body-fixed frame, the corresponding vector u' in the geodetic frame should satisfy u' = quq*, where q is this quaternion.
/// Example: /// Example: [0.03, 0.02, 0.01, 0.012]
/// Constraints: No constraints specified.
func (rcv *SkyImagery_Ingest) SenQuatDot(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(34))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *SkyImagery_Ingest) SenQuatDotLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(34))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

/// The derivative of the quaternion describing the rotation of the body-fixed frame used for this system into the local geodetic frame, exposure start epoch (expStartTime). The array element order convention is scalar component first, followed by the three vector components. For a vector u in the body-fixed frame, the corresponding vector u' in the geodetic frame should satisfy u' = quq*, where q is this quaternion.
/// Example: /// Example: [0.03, 0.02, 0.01, 0.012]
/// Constraints: No constraints specified.
/// The type of image associated with this record (e.g. FITS, EOSSA, EOCHIP).
/// Example: /// Example: imageType
/// Constraints: Minimum length = 1, Maximum length = 24
func (rcv *SkyImagery_Ingest) ImageType() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(36))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The type of image associated with this record (e.g. FITS, EOSSA, EOCHIP).
/// Example: /// Example: imageType
/// Constraints: Minimum length = 1, Maximum length = 24
/// Start time of the exposure, in ISO 8601 UTC format with microsecond precision.
/// Example: /// Example: 2021-01-01T01:01:01.123456Z
/// Constraints: No constraints specified.
func (rcv *SkyImagery_Ingest) ExpStartTime() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(38))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Start time of the exposure, in ISO 8601 UTC format with microsecond precision.
/// Example: /// Example: 2021-01-01T01:01:01.123456Z
/// Constraints: No constraints specified.
/// End time of the exposure, in ISO 8601 UTC format with microsecond precision.
/// Example: /// Example: 2021-01-01T01:01:01.123456Z
/// Constraints: No constraints specified.
func (rcv *SkyImagery_Ingest) ExpEndTime() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(40))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// End time of the exposure, in ISO 8601 UTC format with microsecond precision.
/// Example: /// Example: 2021-01-01T01:01:01.123456Z
/// Constraints: No constraints specified.
/// String that uniquely identifies the data source.
/// Example: /// Example: imageSourceInfo
/// Constraints: Minimum length = 0, Maximum length = 100
func (rcv *SkyImagery_Ingest) ImageSourceInfo() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(42))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// String that uniquely identifies the data source.
/// Example: /// Example: imageSourceInfo
/// Constraints: Minimum length = 0, Maximum length = 100
/// The telescope pointing azimuth, in degrees, at the exposure start epoch.
/// Example: /// Example: 146.321
/// Constraints: No constraints specified.
func (rcv *SkyImagery_Ingest) TopLeftStartAz() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(44))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// The telescope pointing azimuth, in degrees, at the exposure start epoch.
/// Example: /// Example: 146.321
/// Constraints: No constraints specified.
func (rcv *SkyImagery_Ingest) MutateTopLeftStartAz(n float64) bool {
	return rcv._tab.MutateFloat64Slot(44, n)
}

/// The telescope pointing elevation, in degrees, at the exposure start epoch.
/// Example: /// Example: 146.321
/// Constraints: No constraints specified.
func (rcv *SkyImagery_Ingest) TopLeftStartEl() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(46))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// The telescope pointing elevation, in degrees, at the exposure start epoch.
/// Example: /// Example: 146.321
/// Constraints: No constraints specified.
func (rcv *SkyImagery_Ingest) MutateTopLeftStartEl(n float64) bool {
	return rcv._tab.MutateFloat64Slot(46, n)
}

/// The telescope pointing azimuth, in degrees, at the exposure stop epoch.
/// Example: /// Example: 3.7
/// Constraints: No constraints specified.
func (rcv *SkyImagery_Ingest) TopLeftStopAz() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(48))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// The telescope pointing azimuth, in degrees, at the exposure stop epoch.
/// Example: /// Example: 3.7
/// Constraints: No constraints specified.
func (rcv *SkyImagery_Ingest) MutateTopLeftStopAz(n float64) bool {
	return rcv._tab.MutateFloat64Slot(48, n)
}

/// The telescope pointing elevation, in degrees, at the exposure stop epoch.
/// Example: /// Example: 34.233
/// Constraints: No constraints specified.
func (rcv *SkyImagery_Ingest) TopLeftStopEl() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(50))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// The telescope pointing elevation, in degrees, at the exposure stop epoch.
/// Example: /// Example: 34.233
/// Constraints: No constraints specified.
func (rcv *SkyImagery_Ingest) MutateTopLeftStopEl(n float64) bool {
	return rcv._tab.MutateFloat64Slot(50, n)
}

/// The user-defined set ID of a sequence of images.
/// Example: /// Example: imageSetId
/// Constraints: Minimum length = 0, Maximum length = 36
func (rcv *SkyImagery_Ingest) ImageSetId() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(52))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The user-defined set ID of a sequence of images.
/// Example: /// Example: imageSetId
/// Constraints: Minimum length = 0, Maximum length = 36
/// The number of images in an image set.
/// Example: /// Example: 9
/// Constraints: No constraints specified.
func (rcv *SkyImagery_Ingest) ImageSetLength() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(54))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

/// The number of images in an image set.
/// Example: /// Example: 9
/// Constraints: No constraints specified.
func (rcv *SkyImagery_Ingest) MutateImageSetLength(n int32) bool {
	return rcv._tab.MutateInt32Slot(54, n)
}

/// The sequence ID of an image within an image set.
/// Example: /// Example: 1
/// Constraints: No constraints specified.
func (rcv *SkyImagery_Ingest) SequenceId() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(56))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

/// The sequence ID of an image within an image set.
/// Example: /// Example: 1
/// Constraints: No constraints specified.
func (rcv *SkyImagery_Ingest) MutateSequenceId(n int32) bool {
	return rcv._tab.MutateInt32Slot(56, n)
}

/// Field Of View frame width, in degrees.
/// Example: /// Example: 21.23
/// Constraints: No constraints specified.
func (rcv *SkyImagery_Ingest) FrameFovwidth() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(58))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Field Of View frame width, in degrees.
/// Example: /// Example: 21.23
/// Constraints: No constraints specified.
func (rcv *SkyImagery_Ingest) MutateFrameFovwidth(n float64) bool {
	return rcv._tab.MutateFloat64Slot(58, n)
}

/// Field Of View frame height, in degrees.
/// Example: /// Example: 21.23
/// Constraints: No constraints specified.
func (rcv *SkyImagery_Ingest) FrameFovheight() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(60))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Field Of View frame height, in degrees.
/// Example: /// Example: 21.23
/// Constraints: No constraints specified.
func (rcv *SkyImagery_Ingest) MutateFrameFovheight(n float64) bool {
	return rcv._tab.MutateFloat64Slot(60, n)
}

/// Field Of View pixel width, in degrees.
/// Example: /// Example: 321.123
/// Constraints: No constraints specified.
func (rcv *SkyImagery_Ingest) PixelFovwidth() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(62))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Field Of View pixel width, in degrees.
/// Example: /// Example: 321.123
/// Constraints: No constraints specified.
func (rcv *SkyImagery_Ingest) MutatePixelFovwidth(n float64) bool {
	return rcv._tab.MutateFloat64Slot(62, n)
}

/// Field Of View pixel height, in degrees.
/// Example: /// Example: 321.123
/// Constraints: No constraints specified.
func (rcv *SkyImagery_Ingest) PixelFovheight() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(64))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Field Of View pixel height, in degrees.
/// Example: /// Example: 321.123
/// Constraints: No constraints specified.
func (rcv *SkyImagery_Ingest) MutatePixelFovheight(n float64) bool {
	return rcv._tab.MutateFloat64Slot(64, n)
}

/// Frame width of the image, in number of pixels.
/// Example: /// Example: 1
/// Constraints: No constraints specified.
func (rcv *SkyImagery_Ingest) FrameWidthPixels() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(66))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

/// Frame width of the image, in number of pixels.
/// Example: /// Example: 1
/// Constraints: No constraints specified.
func (rcv *SkyImagery_Ingest) MutateFrameWidthPixels(n int32) bool {
	return rcv._tab.MutateInt32Slot(66, n)
}

/// Frame height of the image, in number of pixels.
/// Example: /// Example: 1
/// Constraints: No constraints specified.
func (rcv *SkyImagery_Ingest) FrameHeightPixels() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(68))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

/// Frame height of the image, in number of pixels.
/// Example: /// Example: 1
/// Constraints: No constraints specified.
func (rcv *SkyImagery_Ingest) MutateFrameHeightPixels(n int32) bool {
	return rcv._tab.MutateInt32Slot(68, n)
}

/// Bit depth of the image, in number of pixels.
/// Example: /// Example: 1
/// Constraints: No constraints specified.
func (rcv *SkyImagery_Ingest) PixelBitDepth() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(70))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

/// Bit depth of the image, in number of pixels.
/// Example: /// Example: 1
/// Constraints: No constraints specified.
func (rcv *SkyImagery_Ingest) MutatePixelBitDepth(n int32) bool {
	return rcv._tab.MutateInt32Slot(70, n)
}

/// Reference to an annotation document associated with this image.
/// Example: /// Example: annotationKey
/// Constraints: Minimum length = 0, Maximum length = 128
func (rcv *SkyImagery_Ingest) AnnotationKey() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(72))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Reference to an annotation document associated with this image.
/// Example: /// Example: annotationKey
/// Constraints: Minimum length = 0, Maximum length = 128
/// Reference to a calibration document associated with this image.
/// Example: /// Example: calibrationKey
/// Constraints: Minimum length = 0, Maximum length = 128
func (rcv *SkyImagery_Ingest) CalibrationKey() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(74))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Reference to a calibration document associated with this image.
/// Example: /// Example: calibrationKey
/// Constraints: Minimum length = 0, Maximum length = 128
/// Name of the uploaded image file.
/// Example: /// Example: filename.jpg
/// Constraints: Minimum length = 0, Maximum length = 128
func (rcv *SkyImagery_Ingest) Filename() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(76))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Name of the uploaded image file.
/// Example: /// Example: filename.jpg
/// Constraints: Minimum length = 0, Maximum length = 128
/// Size of the image file, in bytes.
/// Example: /// Example: 371945
/// Constraints: No constraints specified.
func (rcv *SkyImagery_Ingest) Filesize() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(78))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

/// Size of the image file, in bytes.
/// Example: /// Example: 371945
/// Constraints: No constraints specified.
func (rcv *SkyImagery_Ingest) MutateFilesize(n int64) bool {
	return rcv._tab.MutateInt64Slot(78, n)
}

/// MD5 value of the file. The ingest/create operation will automatically generate the value.
/// Example: /// Example: checksumValue
/// Constraints: Minimum length = 0, Maximum length = 256
func (rcv *SkyImagery_Ingest) ChecksumValue() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(80))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// MD5 value of the file. The ingest/create operation will automatically generate the value.
/// Example: /// Example: checksumValue
/// Constraints: Minimum length = 0, Maximum length = 256
/// Optional identifier to track a commercial or marketplace transaction executed to produce this data.
/// Example: /// Example: a7bdef1f-5a4f-4716-bee4-7a1e0ec7d35a
/// Constraints: Minimum length = 0, Maximum length = 64
func (rcv *SkyImagery_Ingest) TransactionId() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(82))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Optional identifier to track a commercial or marketplace transaction executed to produce this data.
/// Example: /// Example: a7bdef1f-5a4f-4716-bee4-7a1e0ec7d35a
/// Constraints: Minimum length = 0, Maximum length = 64
/// Optional array of provider/source specific tags for this data, where each element is no longer than 32 characters, used for implementing data owner conditional access controls to restrict access to the data. Should be left null by data providers unless conditional access controls are coordinated with the UDL team.
/// Example: /// Example: ['PROVIDER_TAG1', 'PROVIDER_TAG2']
/// Constraints: No constraints specified.
func (rcv *SkyImagery_Ingest) Tags(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(84))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *SkyImagery_Ingest) TagsLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(84))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

/// Optional array of provider/source specific tags for this data, where each element is no longer than 32 characters, used for implementing data owner conditional access controls to restrict access to the data. Should be left null by data providers unless conditional access controls are coordinated with the UDL team.
/// Example: /// Example: ['PROVIDER_TAG1', 'PROVIDER_TAG2']
/// Constraints: No constraints specified.
/// Source of the data.
/// Example: /// Example: Bluestaq
/// Constraints: Minimum length = 1, Maximum length = 64
func (rcv *SkyImagery_Ingest) Source() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(86))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Source of the data.
/// Example: /// Example: Bluestaq
/// Constraints: Minimum length = 1, Maximum length = 64
/// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
/// Example: /// Example: THIRD_PARTY_DATASOURCE
/// Constraints: Minimum length = 0, Maximum length = 64
func (rcv *SkyImagery_Ingest) Origin() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(88))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
/// Example: /// Example: THIRD_PARTY_DATASOURCE
/// Constraints: Minimum length = 0, Maximum length = 64
/// The originating source network on which this record was created, auto-populated by the system.
/// Example: /// Example: ORIG
/// Constraints: Minimum length = 1, Maximum length = 32
func (rcv *SkyImagery_Ingest) OrigNetwork() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(90))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The originating source network on which this record was created, auto-populated by the system.
/// Example: /// Example: ORIG
/// Constraints: Minimum length = 1, Maximum length = 32
/// The source data library from which this record was received. This could be a remote or tactical UDL or another data library. If null, the record should be assumed to have originated from the primary Enterprise UDL.
/// Example: /// Example: AXE
/// Constraints: Minimum length = 0, Maximum length = 64
func (rcv *SkyImagery_Ingest) SourceDl() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(92))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The source data library from which this record was received. This could be a remote or tactical UDL or another data library. If null, the record should be assumed to have originated from the primary Enterprise UDL.
/// Example: /// Example: AXE
/// Constraints: Minimum length = 0, Maximum length = 64
/// Optional name/description associated with this image.
/// Example: /// Example: description
/// Constraints: Minimum length = 0, Maximum length = 2147483647
func (rcv *SkyImagery_Ingest) Description() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(94))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Optional name/description associated with this image.
/// Example: /// Example: description
/// Constraints: Minimum length = 0, Maximum length = 2147483647
/// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
/// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
/// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
/// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
/// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
/// Example: /// Example: TEST
/// Constraints: Minimum length = 1, Maximum length = 32
func (rcv *SkyImagery_Ingest) DataMode() SkyImagery_Ingest_dataMode_Enum {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(96))
	if o != 0 {
		return SkyImagery_Ingest_dataMode_Enum(rcv._tab.GetInt8(o + rcv._tab.Pos))
	}
	return 0
}

/// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
/// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
/// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
/// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
/// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
/// Example: /// Example: TEST
/// Constraints: Minimum length = 1, Maximum length = 32
func (rcv *SkyImagery_Ingest) MutateDataMode(n SkyImagery_Ingest_dataMode_Enum) bool {
	return rcv._tab.MutateInt8Slot(96, int8(n))
}

/// Time the row was created in the database, auto-populated by the system.
/// Example: /// Example: 2018-01-01T16:00:00.123Z
/// Constraints: No constraints specified.
func (rcv *SkyImagery_Ingest) CreatedAt() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(98))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Time the row was created in the database, auto-populated by the system.
/// Example: /// Example: 2018-01-01T16:00:00.123Z
/// Constraints: No constraints specified.
/// Application user who created the row in the database, auto-populated by the system.
/// Example: /// Example: some.user
/// Constraints: Minimum length = 1, Maximum length = 64
func (rcv *SkyImagery_Ingest) CreatedBy() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(100))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Application user who created the row in the database, auto-populated by the system.
/// Example: /// Example: some.user
/// Constraints: Minimum length = 1, Maximum length = 64
/// Collection of linked EOObservations.
/// Example: /// Example: No example provided.
/// Constraints: No constraints specified.
func (rcv *SkyImagery_Ingest) EoObservations(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(102))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *SkyImagery_Ingest) EoObservationsLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(102))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

/// Collection of linked EOObservations.
/// Example: /// Example: No example provided.
/// Constraints: No constraints specified.
func SkyImagery_IngestStart(builder *flatbuffers.Builder) {
	builder.StartObject(50)
}
func SkyImagery_IngestAddId(builder *flatbuffers.Builder, id flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(id), 0)
}
func SkyImagery_IngestAddClassificationMarking(builder *flatbuffers.Builder, classificationMarking flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(classificationMarking), 0)
}
func SkyImagery_IngestAddIdOnOrbit(builder *flatbuffers.Builder, idOnOrbit flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(idOnOrbit), 0)
}
func SkyImagery_IngestAddOrigObjectId(builder *flatbuffers.Builder, origObjectId flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(3, flatbuffers.UOffsetT(origObjectId), 0)
}
func SkyImagery_IngestAddIdAttitudeSet(builder *flatbuffers.Builder, idAttitudeSet flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(4, flatbuffers.UOffsetT(idAttitudeSet), 0)
}
func SkyImagery_IngestAddIdSensor(builder *flatbuffers.Builder, idSensor flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(5, flatbuffers.UOffsetT(idSensor), 0)
}
func SkyImagery_IngestAddSatNo(builder *flatbuffers.Builder, satNo int32) {
	builder.PrependInt32Slot(6, satNo, 0)
}
func SkyImagery_IngestAddOrigSensorId(builder *flatbuffers.Builder, origSensorId flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(7, flatbuffers.UOffsetT(origSensorId), 0)
}
func SkyImagery_IngestAddSenlat(builder *flatbuffers.Builder, senlat float64) {
	builder.PrependFloat64Slot(8, senlat, 0.0)
}
func SkyImagery_IngestAddSenlon(builder *flatbuffers.Builder, senlon float64) {
	builder.PrependFloat64Slot(9, senlon, 0.0)
}
func SkyImagery_IngestAddSenalt(builder *flatbuffers.Builder, senalt float64) {
	builder.PrependFloat64Slot(10, senalt, 0.0)
}
func SkyImagery_IngestAddSenx(builder *flatbuffers.Builder, senx float64) {
	builder.PrependFloat64Slot(11, senx, 0.0)
}
func SkyImagery_IngestAddSeny(builder *flatbuffers.Builder, seny float64) {
	builder.PrependFloat64Slot(12, seny, 0.0)
}
func SkyImagery_IngestAddSenz(builder *flatbuffers.Builder, senz float64) {
	builder.PrependFloat64Slot(13, senz, 0.0)
}
func SkyImagery_IngestAddSenQuat(builder *flatbuffers.Builder, senQuat flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(14, flatbuffers.UOffsetT(senQuat), 0)
}
func SkyImagery_IngestStartSenQuatVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func SkyImagery_IngestAddSenQuatDot(builder *flatbuffers.Builder, senQuatDot flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(15, flatbuffers.UOffsetT(senQuatDot), 0)
}
func SkyImagery_IngestStartSenQuatDotVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func SkyImagery_IngestAddImageType(builder *flatbuffers.Builder, imageType flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(16, flatbuffers.UOffsetT(imageType), 0)
}
func SkyImagery_IngestAddExpStartTime(builder *flatbuffers.Builder, expStartTime flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(17, flatbuffers.UOffsetT(expStartTime), 0)
}
func SkyImagery_IngestAddExpEndTime(builder *flatbuffers.Builder, expEndTime flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(18, flatbuffers.UOffsetT(expEndTime), 0)
}
func SkyImagery_IngestAddImageSourceInfo(builder *flatbuffers.Builder, imageSourceInfo flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(19, flatbuffers.UOffsetT(imageSourceInfo), 0)
}
func SkyImagery_IngestAddTopLeftStartAz(builder *flatbuffers.Builder, topLeftStartAz float64) {
	builder.PrependFloat64Slot(20, topLeftStartAz, 0.0)
}
func SkyImagery_IngestAddTopLeftStartEl(builder *flatbuffers.Builder, topLeftStartEl float64) {
	builder.PrependFloat64Slot(21, topLeftStartEl, 0.0)
}
func SkyImagery_IngestAddTopLeftStopAz(builder *flatbuffers.Builder, topLeftStopAz float64) {
	builder.PrependFloat64Slot(22, topLeftStopAz, 0.0)
}
func SkyImagery_IngestAddTopLeftStopEl(builder *flatbuffers.Builder, topLeftStopEl float64) {
	builder.PrependFloat64Slot(23, topLeftStopEl, 0.0)
}
func SkyImagery_IngestAddImageSetId(builder *flatbuffers.Builder, imageSetId flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(24, flatbuffers.UOffsetT(imageSetId), 0)
}
func SkyImagery_IngestAddImageSetLength(builder *flatbuffers.Builder, imageSetLength int32) {
	builder.PrependInt32Slot(25, imageSetLength, 0)
}
func SkyImagery_IngestAddSequenceId(builder *flatbuffers.Builder, sequenceId int32) {
	builder.PrependInt32Slot(26, sequenceId, 0)
}
func SkyImagery_IngestAddFrameFovwidth(builder *flatbuffers.Builder, frameFovwidth float64) {
	builder.PrependFloat64Slot(27, frameFovwidth, 0.0)
}
func SkyImagery_IngestAddFrameFovheight(builder *flatbuffers.Builder, frameFovheight float64) {
	builder.PrependFloat64Slot(28, frameFovheight, 0.0)
}
func SkyImagery_IngestAddPixelFovwidth(builder *flatbuffers.Builder, pixelFovwidth float64) {
	builder.PrependFloat64Slot(29, pixelFovwidth, 0.0)
}
func SkyImagery_IngestAddPixelFovheight(builder *flatbuffers.Builder, pixelFovheight float64) {
	builder.PrependFloat64Slot(30, pixelFovheight, 0.0)
}
func SkyImagery_IngestAddFrameWidthPixels(builder *flatbuffers.Builder, frameWidthPixels int32) {
	builder.PrependInt32Slot(31, frameWidthPixels, 0)
}
func SkyImagery_IngestAddFrameHeightPixels(builder *flatbuffers.Builder, frameHeightPixels int32) {
	builder.PrependInt32Slot(32, frameHeightPixels, 0)
}
func SkyImagery_IngestAddPixelBitDepth(builder *flatbuffers.Builder, pixelBitDepth int32) {
	builder.PrependInt32Slot(33, pixelBitDepth, 0)
}
func SkyImagery_IngestAddAnnotationKey(builder *flatbuffers.Builder, annotationKey flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(34, flatbuffers.UOffsetT(annotationKey), 0)
}
func SkyImagery_IngestAddCalibrationKey(builder *flatbuffers.Builder, calibrationKey flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(35, flatbuffers.UOffsetT(calibrationKey), 0)
}
func SkyImagery_IngestAddFilename(builder *flatbuffers.Builder, filename flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(36, flatbuffers.UOffsetT(filename), 0)
}
func SkyImagery_IngestAddFilesize(builder *flatbuffers.Builder, filesize int64) {
	builder.PrependInt64Slot(37, filesize, 0)
}
func SkyImagery_IngestAddChecksumValue(builder *flatbuffers.Builder, checksumValue flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(38, flatbuffers.UOffsetT(checksumValue), 0)
}
func SkyImagery_IngestAddTransactionId(builder *flatbuffers.Builder, transactionId flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(39, flatbuffers.UOffsetT(transactionId), 0)
}
func SkyImagery_IngestAddTags(builder *flatbuffers.Builder, tags flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(40, flatbuffers.UOffsetT(tags), 0)
}
func SkyImagery_IngestStartTagsVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func SkyImagery_IngestAddSource(builder *flatbuffers.Builder, source flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(41, flatbuffers.UOffsetT(source), 0)
}
func SkyImagery_IngestAddOrigin(builder *flatbuffers.Builder, origin flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(42, flatbuffers.UOffsetT(origin), 0)
}
func SkyImagery_IngestAddOrigNetwork(builder *flatbuffers.Builder, origNetwork flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(43, flatbuffers.UOffsetT(origNetwork), 0)
}
func SkyImagery_IngestAddSourceDl(builder *flatbuffers.Builder, sourceDl flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(44, flatbuffers.UOffsetT(sourceDl), 0)
}
func SkyImagery_IngestAddDescription(builder *flatbuffers.Builder, description flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(45, flatbuffers.UOffsetT(description), 0)
}
func SkyImagery_IngestAddDataMode(builder *flatbuffers.Builder, dataMode SkyImagery_Ingest_dataMode_Enum) {
	builder.PrependInt8Slot(46, int8(dataMode), 0)
}
func SkyImagery_IngestAddCreatedAt(builder *flatbuffers.Builder, createdAt flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(47, flatbuffers.UOffsetT(createdAt), 0)
}
func SkyImagery_IngestAddCreatedBy(builder *flatbuffers.Builder, createdBy flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(48, flatbuffers.UOffsetT(createdBy), 0)
}
func SkyImagery_IngestAddEoObservations(builder *flatbuffers.Builder, eoObservations flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(49, flatbuffers.UOffsetT(eoObservations), 0)
}
func SkyImagery_IngestStartEoObservationsVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func SkyImagery_IngestEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
