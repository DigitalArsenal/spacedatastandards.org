// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package EvacTreatment_Full

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

/// Treatment information.
type EvacTreatment_Full struct {
	_tab flatbuffers.Table
}

func GetRootAsEvacTreatment_Full(buf []byte, offset flatbuffers.UOffsetT) *EvacTreatment_Full {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &EvacTreatment_Full{}
	x.Init(buf, n+offset)
	return x
}

func FinishEvacTreatment_FullBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.Finish(offset)
}

func GetSizePrefixedRootAsEvacTreatment_Full(buf []byte, offset flatbuffers.UOffsetT) *EvacTreatment_Full {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &EvacTreatment_Full{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedEvacTreatment_FullBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.FinishSizePrefixed(offset)
}

func (rcv *EvacTreatment_Full) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *EvacTreatment_Full) Table() flatbuffers.Table {
	return rcv._tab
}

/// Type of treatment administered or to be administered.  Intended as, but not constrained to, K07.1 Treatment Type Enumeration (e.g. AIRWAY ADJUNCT, AIRWAY ASSISTED VENTILATION, AIRWAY COMBI TUBE USED, AIRWAY ET NT, AIRWAY INTUBATED, AIRWAY NPA OPA APPLIED, AIRWAY PATIENT, AIRWAY POSITIONAL, AIRWAY SURGICAL CRIC, BREATHING CHEST SEAL, BREATHING CHEST TUBE, etc.).
/// Example: BREATHING CHEST TUBE
/// Constraints: Minimum length = 0, Maximum length = 64
func (rcv *EvacTreatment_Full) Type() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Type of treatment administered or to be administered.  Intended as, but not constrained to, K07.1 Treatment Type Enumeration (e.g. AIRWAY ADJUNCT, AIRWAY ASSISTED VENTILATION, AIRWAY COMBI TUBE USED, AIRWAY ET NT, AIRWAY INTUBATED, AIRWAY NPA OPA APPLIED, AIRWAY PATIENT, AIRWAY POSITIONAL, AIRWAY SURGICAL CRIC, BREATHING CHEST SEAL, BREATHING CHEST TUBE, etc.).
/// Example: BREATHING CHEST TUBE
/// Constraints: Minimum length = 0, Maximum length = 64
/// Body part location or body part treated or to be treated.  Intended as, but not constrained to, K07.1 Body Location Enumeration (e.g. ANKLE LEFT BACK, ANKLE LEFT FRONT, ANKLE RIGHT BACK, ANKLE RIGHT FRONT, ARM LEFT BACK, ARM LEFT ELBOW BACK, ARM LEFT ELBOW FRONT, ARM LEFT FRONT, ARM LEFT LOWER BACK, etc.).
/// Example: CHEST
/// Constraints: Minimum length = 0, Maximum length = 32
func (rcv *EvacTreatment_Full) BodyPart() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Body part location or body part treated or to be treated.  Intended as, but not constrained to, K07.1 Body Location Enumeration (e.g. ANKLE LEFT BACK, ANKLE LEFT FRONT, ANKLE RIGHT BACK, ANKLE RIGHT FRONT, ARM LEFT BACK, ARM LEFT ELBOW BACK, ARM LEFT ELBOW FRONT, ARM LEFT FRONT, ARM LEFT LOWER BACK, etc.).
/// Example: CHEST
/// Constraints: Minimum length = 0, Maximum length = 32
/// Datetime of the treatment in ISO 8601 UTC format.
/// Example: 2018-01-01T16:00:00.123Z
/// Constraints: No constraints specified.
func (rcv *EvacTreatment_Full) Time() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Datetime of the treatment in ISO 8601 UTC format.
/// Example: 2018-01-01T16:00:00.123Z
/// Constraints: No constraints specified.
/// Additional comments on the patient's treatment information.
/// Example: Comments on the treatment info.
/// Constraints: Minimum length = 0, Maximum length = 1024
func (rcv *EvacTreatment_Full) Comments() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Additional comments on the patient's treatment information.
/// Example: Comments on the treatment info.
/// Constraints: Minimum length = 0, Maximum length = 1024
func EvacTreatment_FullStart(builder *flatbuffers.Builder) {
	builder.StartObject(4)
}
func EvacTreatment_FullAddType(builder *flatbuffers.Builder, type_ flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(type_), 0)
}
func EvacTreatment_FullAddBodyPart(builder *flatbuffers.Builder, bodyPart flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(bodyPart), 0)
}
func EvacTreatment_FullAddTime(builder *flatbuffers.Builder, time flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(time), 0)
}
func EvacTreatment_FullAddComments(builder *flatbuffers.Builder, comments flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(3, flatbuffers.UOffsetT(comments), 0)
}
func EvacTreatment_FullEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
