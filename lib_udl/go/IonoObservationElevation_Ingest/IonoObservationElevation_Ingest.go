// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package IonoObservationElevation_Ingest

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

/// /// Multidimensional array of incoming elevation at the receiver. Has the same dimensions as power. Antenna type, configuration, and method of determination to be documented in the metadata notes field.
type IonoObservationElevation_Ingest struct {
	_tab flatbuffers.Table
}

const IonoObservationElevation_IngestIdentifier = "IONO"

func GetRootAsIonoObservationElevation_Ingest(buf []byte, offset flatbuffers.UOffsetT) *IonoObservationElevation_Ingest {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &IonoObservationElevation_Ingest{}
	x.Init(buf, n+offset)
	return x
}

func FinishIonoObservationElevation_IngestBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	identifierBytes := []byte(IonoObservationElevation_IngestIdentifier)
	builder.FinishWithFileIdentifier(offset, identifierBytes)
}

func IonoObservationElevation_IngestBufferHasIdentifier(buf []byte) bool {
	return flatbuffers.BufferHasIdentifier(buf, IonoObservationElevation_IngestIdentifier)
}

func GetSizePrefixedRootAsIonoObservationElevation_Ingest(buf []byte, offset flatbuffers.UOffsetT) *IonoObservationElevation_Ingest {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &IonoObservationElevation_Ingest{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedIonoObservationElevation_IngestBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	identifierBytes := []byte(IonoObservationElevation_IngestIdentifier)
	builder.FinishSizePrefixedWithFileIdentifier(offset, identifierBytes)
}

func SizePrefixedIonoObservationElevation_IngestBufferHasIdentifier(buf []byte) bool {
	return flatbuffers.SizePrefixedBufferHasIdentifier(buf, IonoObservationElevation_IngestIdentifier)
}

func (rcv *IonoObservationElevation_Ingest) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *IonoObservationElevation_Ingest) Table() flatbuffers.Table {
	return rcv._tab
}

/// Notes for the elevation data.
/// Example: /// Example: NOTES
/// Constraints: Minimum length = 0, Maximum length = 512
func (rcv *IonoObservationElevation_Ingest) Notes() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Notes for the elevation data.
/// Example: /// Example: NOTES
/// Constraints: Minimum length = 0, Maximum length = 512
/// Array of integers of the elevation array dimensions.
/// Example: /// Example: [2, 3]
/// Constraints: No constraints specified.
func (rcv *IonoObservationElevation_Ingest) Dimensions(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *IonoObservationElevation_Ingest) DimensionsLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

/// Array of integers of the elevation array dimensions.
/// Example: /// Example: [2, 3]
/// Constraints: No constraints specified.
/// Array of names for dimensions.
/// Example: /// Example: ['NAME1', 'NAME2']
/// Constraints: No constraints specified.
func (rcv *IonoObservationElevation_Ingest) DimensionName(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *IonoObservationElevation_Ingest) DimensionNameLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

/// Array of names for dimensions.
/// Example: /// Example: ['NAME1', 'NAME2']
/// Constraints: No constraints specified.
/// Array of incoming elevation at the receiver.
/// Example: /// Example: [[[[[[[0.02, 0.034]]]]]]]
/// Constraints: No constraints specified.
func (rcv *IonoObservationElevation_Ingest) Data(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *IonoObservationElevation_Ingest) DataLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

/// Array of incoming elevation at the receiver.
/// Example: /// Example: [[[[[[[0.02, 0.034]]]]]]]
/// Constraints: No constraints specified.
func IonoObservationElevation_IngestStart(builder *flatbuffers.Builder) {
	builder.StartObject(4)
}
func IonoObservationElevation_IngestAddNotes(builder *flatbuffers.Builder, notes flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(notes), 0)
}
func IonoObservationElevation_IngestAddDimensions(builder *flatbuffers.Builder, dimensions flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(dimensions), 0)
}
func IonoObservationElevation_IngestStartDimensionsVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func IonoObservationElevation_IngestAddDimensionName(builder *flatbuffers.Builder, dimensionName flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(dimensionName), 0)
}
func IonoObservationElevation_IngestStartDimensionNameVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func IonoObservationElevation_IngestAddData(builder *flatbuffers.Builder, data flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(3, flatbuffers.UOffsetT(data), 0)
}
func IonoObservationElevation_IngestStartDataVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func IonoObservationElevation_IngestEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
