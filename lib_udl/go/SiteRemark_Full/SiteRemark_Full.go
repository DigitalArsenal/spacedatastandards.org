// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package SiteRemark_Full

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

/// /// Remarks contain amplifying information for a specific service. The information may contain context and interpretations for consumer use.
type SiteRemark_Full struct {
	_tab flatbuffers.Table
}

const SiteRemark_FullIdentifier = "SITE"

func GetRootAsSiteRemark_Full(buf []byte, offset flatbuffers.UOffsetT) *SiteRemark_Full {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &SiteRemark_Full{}
	x.Init(buf, n+offset)
	return x
}

func FinishSiteRemark_FullBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	identifierBytes := []byte(SiteRemark_FullIdentifier)
	builder.FinishWithFileIdentifier(offset, identifierBytes)
}

func SiteRemark_FullBufferHasIdentifier(buf []byte) bool {
	return flatbuffers.BufferHasIdentifier(buf, SiteRemark_FullIdentifier)
}

func GetSizePrefixedRootAsSiteRemark_Full(buf []byte, offset flatbuffers.UOffsetT) *SiteRemark_Full {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &SiteRemark_Full{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedSiteRemark_FullBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	identifierBytes := []byte(SiteRemark_FullIdentifier)
	builder.FinishSizePrefixedWithFileIdentifier(offset, identifierBytes)
}

func SizePrefixedSiteRemark_FullBufferHasIdentifier(buf []byte) bool {
	return flatbuffers.SizePrefixedBufferHasIdentifier(buf, SiteRemark_FullIdentifier)
}

func (rcv *SiteRemark_Full) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *SiteRemark_Full) Table() flatbuffers.Table {
	return rcv._tab
}

/// Unique identifier of the record, auto-generated by the system.
/// Example: /// Example: 5000a3ef-8e39-2551-80f1-b3cd1895fe7b
/// Constraints: Minimum length = 1, Maximum length = 36
func (rcv *SiteRemark_Full) Id() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Unique identifier of the record, auto-generated by the system.
/// Example: /// Example: 5000a3ef-8e39-2551-80f1-b3cd1895fe7b
/// Constraints: Minimum length = 1, Maximum length = 36
/// Classification marking of the data in IC/CAPCO Portion-marked format.
/// Example: /// Example: U
/// Constraints: Minimum length = 1, Maximum length = 128
func (rcv *SiteRemark_Full) ClassificationMarking() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Classification marking of the data in IC/CAPCO Portion-marked format.
/// Example: /// Example: U
/// Constraints: Minimum length = 1, Maximum length = 128
/// The ID of the site to which this remark applies.
/// Example: /// Example: SITE-ID
/// Constraints: Minimum length = 1, Maximum length = 36
func (rcv *SiteRemark_Full) IdSite() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The ID of the site to which this remark applies.
/// Example: /// Example: SITE-ID
/// Constraints: Minimum length = 1, Maximum length = 36
/// Unique identifier of the Site Remark record from the originating system.
/// Example: /// Example: 123456ABC
/// Constraints: Minimum length = 0, Maximum length = 36
func (rcv *SiteRemark_Full) OrigRmkId() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Unique identifier of the Site Remark record from the originating system.
/// Example: /// Example: 123456ABC
/// Constraints: Minimum length = 0, Maximum length = 36
/// The name of the remark.
/// Example: /// Example: Remark name
/// Constraints: Minimum length = 0, Maximum length = 64
func (rcv *SiteRemark_Full) Name() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The name of the remark.
/// Example: /// Example: Remark name
/// Constraints: Minimum length = 0, Maximum length = 64
/// The remark type (e.g. Caution, Information, Misc, Restriction, etc.).
/// Example: /// Example: Restriction
/// Constraints: Minimum length = 0, Maximum length = 64
func (rcv *SiteRemark_Full) Type() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The remark type (e.g. Caution, Information, Misc, Restriction, etc.).
/// Example: /// Example: Restriction
/// Constraints: Minimum length = 0, Maximum length = 64
/// The text of the remark.
/// Example: /// Example: This is a remark
/// Constraints: Minimum length = 1, Maximum length = 1024
func (rcv *SiteRemark_Full) Text() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The text of the remark.
/// Example: /// Example: This is a remark
/// Constraints: Minimum length = 1, Maximum length = 1024
/// The remark type identifier. 
/// For example, the Mobility Air Forces (MAF) remark code, defined in the Airfield Suitability and Restriction Report (ASRR).
/// Example: /// Example: M
/// Constraints: Minimum length = 0, Maximum length = 16
func (rcv *SiteRemark_Full) Code() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(18))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The remark type identifier. 
/// For example, the Mobility Air Forces (MAF) remark code, defined in the Airfield Suitability and Restriction Report (ASRR).
/// Example: /// Example: M
/// Constraints: Minimum length = 0, Maximum length = 16
/// Time the row was created in the database, auto-populated by the system.
/// Example: /// Example: 2022-01-01T16:00:00.123Z
/// Constraints: No constraints specified.
func (rcv *SiteRemark_Full) CreatedAt() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(20))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Time the row was created in the database, auto-populated by the system.
/// Example: /// Example: 2022-01-01T16:00:00.123Z
/// Constraints: No constraints specified.
/// Application user who created the row in the database, auto-populated by the system.
/// Example: /// Example: some.user
/// Constraints: Minimum length = 1, Maximum length = 64
func (rcv *SiteRemark_Full) CreatedBy() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(22))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Application user who created the row in the database, auto-populated by the system.
/// Example: /// Example: some.user
/// Constraints: Minimum length = 1, Maximum length = 64
/// Source of the data.
/// Example: /// Example: Bluestaq
/// Constraints: Minimum length = 1, Maximum length = 64
func (rcv *SiteRemark_Full) Source() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(24))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Source of the data.
/// Example: /// Example: Bluestaq
/// Constraints: Minimum length = 1, Maximum length = 64
/// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
/// Example: /// Example: THIRD_PARTY_DATASOURCE
/// Constraints: Minimum length = 0, Maximum length = 64
func (rcv *SiteRemark_Full) Origin() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(26))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
/// Example: /// Example: THIRD_PARTY_DATASOURCE
/// Constraints: Minimum length = 0, Maximum length = 64
/// The originating source network on which this record was created, auto-populated by the system.
/// Example: /// Example: OPS1
/// Constraints: Minimum length = 0, Maximum length = 32
func (rcv *SiteRemark_Full) OrigNetwork() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(28))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The originating source network on which this record was created, auto-populated by the system.
/// Example: /// Example: OPS1
/// Constraints: Minimum length = 0, Maximum length = 32
/// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
/// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
/// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
/// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
/// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
/// Example: /// Example: TEST
/// Constraints: Minimum length = 1, Maximum length = 32
func (rcv *SiteRemark_Full) DataMode() SiteRemark_Full_dataMode_Enum {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(30))
	if o != 0 {
		return SiteRemark_Full_dataMode_Enum(rcv._tab.GetInt8(o + rcv._tab.Pos))
	}
	return 0
}

/// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
/// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
/// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
/// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
/// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
/// Example: /// Example: TEST
/// Constraints: Minimum length = 1, Maximum length = 32
func (rcv *SiteRemark_Full) MutateDataMode(n SiteRemark_Full_dataMode_Enum) bool {
	return rcv._tab.MutateInt8Slot(30, int8(n))
}

func SiteRemark_FullStart(builder *flatbuffers.Builder) {
	builder.StartObject(14)
}
func SiteRemark_FullAddId(builder *flatbuffers.Builder, id flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(id), 0)
}
func SiteRemark_FullAddClassificationMarking(builder *flatbuffers.Builder, classificationMarking flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(classificationMarking), 0)
}
func SiteRemark_FullAddIdSite(builder *flatbuffers.Builder, idSite flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(idSite), 0)
}
func SiteRemark_FullAddOrigRmkId(builder *flatbuffers.Builder, origRmkId flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(3, flatbuffers.UOffsetT(origRmkId), 0)
}
func SiteRemark_FullAddName(builder *flatbuffers.Builder, name flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(4, flatbuffers.UOffsetT(name), 0)
}
func SiteRemark_FullAddType(builder *flatbuffers.Builder, type_ flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(5, flatbuffers.UOffsetT(type_), 0)
}
func SiteRemark_FullAddText(builder *flatbuffers.Builder, text flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(6, flatbuffers.UOffsetT(text), 0)
}
func SiteRemark_FullAddCode(builder *flatbuffers.Builder, code flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(7, flatbuffers.UOffsetT(code), 0)
}
func SiteRemark_FullAddCreatedAt(builder *flatbuffers.Builder, createdAt flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(8, flatbuffers.UOffsetT(createdAt), 0)
}
func SiteRemark_FullAddCreatedBy(builder *flatbuffers.Builder, createdBy flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(9, flatbuffers.UOffsetT(createdBy), 0)
}
func SiteRemark_FullAddSource(builder *flatbuffers.Builder, source flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(10, flatbuffers.UOffsetT(source), 0)
}
func SiteRemark_FullAddOrigin(builder *flatbuffers.Builder, origin flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(11, flatbuffers.UOffsetT(origin), 0)
}
func SiteRemark_FullAddOrigNetwork(builder *flatbuffers.Builder, origNetwork flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(12, flatbuffers.UOffsetT(origNetwork), 0)
}
func SiteRemark_FullAddDataMode(builder *flatbuffers.Builder, dataMode SiteRemark_Full_dataMode_Enum) {
	builder.PrependInt8Slot(13, int8(dataMode), 0)
}
func SiteRemark_FullEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
