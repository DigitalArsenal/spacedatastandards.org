// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package RadarSOIObservation_Ingest

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

/// /// A Radar SOI record contains observation information taken from a sensor about a Space Object.
type RadarSOIObservation_Ingest struct {
	_tab flatbuffers.Table
}

const RadarSOIObservation_IngestIdentifier = "RADA"

func GetRootAsRadarSOIObservation_Ingest(buf []byte, offset flatbuffers.UOffsetT) *RadarSOIObservation_Ingest {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &RadarSOIObservation_Ingest{}
	x.Init(buf, n+offset)
	return x
}

func FinishRadarSOIObservation_IngestBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	identifierBytes := []byte(RadarSOIObservation_IngestIdentifier)
	builder.FinishWithFileIdentifier(offset, identifierBytes)
}

func RadarSOIObservation_IngestBufferHasIdentifier(buf []byte) bool {
	return flatbuffers.BufferHasIdentifier(buf, RadarSOIObservation_IngestIdentifier)
}

func GetSizePrefixedRootAsRadarSOIObservation_Ingest(buf []byte, offset flatbuffers.UOffsetT) *RadarSOIObservation_Ingest {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &RadarSOIObservation_Ingest{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedRadarSOIObservation_IngestBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	identifierBytes := []byte(RadarSOIObservation_IngestIdentifier)
	builder.FinishSizePrefixedWithFileIdentifier(offset, identifierBytes)
}

func SizePrefixedRadarSOIObservation_IngestBufferHasIdentifier(buf []byte) bool {
	return flatbuffers.SizePrefixedBufferHasIdentifier(buf, RadarSOIObservation_IngestIdentifier)
}

func (rcv *RadarSOIObservation_Ingest) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *RadarSOIObservation_Ingest) Table() flatbuffers.Table {
	return rcv._tab
}

/// Observation detection start time in ISO 8601 UTC format with microsecond precision.
/// Example: /// Example: 2018-01-01T16:00:00.888456Z
/// Constraints: No constraints specified.
func (rcv *RadarSOIObservation_Ingest) ObStartTime() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Observation detection start time in ISO 8601 UTC format with microsecond precision.
/// Example: /// Example: 2018-01-01T16:00:00.888456Z
/// Constraints: No constraints specified.
/// Array of the times of validity in ISO 8601 UTC format with microsecond precision.
/// Example: /// Example: ['2018-01-01T16:00:00.888456Z', '2018-01-01T16:00:00.888456Z', '2018-01-01T16:00:00.888456Z']
/// Constraints: No constraints specified.
func (rcv *RadarSOIObservation_Ingest) Tovs(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *RadarSOIObservation_Ingest) TovsLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

/// Array of the times of validity in ISO 8601 UTC format with microsecond precision.
/// Example: /// Example: ['2018-01-01T16:00:00.888456Z', '2018-01-01T16:00:00.888456Z', '2018-01-01T16:00:00.888456Z']
/// Constraints: No constraints specified.
/// Array of range sample spacing in meters. The 'tov' and 'rspace' arrays must match in size.
/// Example: /// Example: [0.006, 0.006, 0.006]
/// Constraints: No constraints specified.
func (rcv *RadarSOIObservation_Ingest) Rspaces(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *RadarSOIObservation_Ingest) RspacesLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

/// Array of range sample spacing in meters. The 'tov' and 'rspace' arrays must match in size.
/// Example: /// Example: [0.006, 0.006, 0.006]
/// Constraints: No constraints specified.
/// Array of cross-range sample spacing in meters. The 'tov' and 'xspace' arrays must match in size.
/// Example: /// Example: [0.006, 0.006, 0.006]
/// Constraints: No constraints specified.
func (rcv *RadarSOIObservation_Ingest) Xspaces(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *RadarSOIObservation_Ingest) XspacesLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

/// Array of cross-range sample spacing in meters. The 'tov' and 'xspace' arrays must match in size.
/// Example: /// Example: [0.006, 0.006, 0.006]
/// Constraints: No constraints specified.
/// Array of conversion factors between Doppler in hertz and cross-range in meters. The 'tov' and 'doppler2XR' arrays must match in size.
/// Example: /// Example: [5644.27, 5644.27, 5644.27]
/// Constraints: No constraints specified.
func (rcv *RadarSOIObservation_Ingest) Doppler2Xrs(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *RadarSOIObservation_Ingest) Doppler2XrsLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

/// Array of conversion factors between Doppler in hertz and cross-range in meters. The 'tov' and 'doppler2XR' arrays must match in size.
/// Example: /// Example: [5644.27, 5644.27, 5644.27]
/// Constraints: No constraints specified.
/// Array of average Interpulse spacing in seconds. The 'tov' and 'deltaTime' arrays must match in size.
/// Example: /// Example: [0.005, 0.005, 0.005]
/// Constraints: No constraints specified.
func (rcv *RadarSOIObservation_Ingest) DeltaTimes(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *RadarSOIObservation_Ingest) DeltaTimesLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

/// Array of average Interpulse spacing in seconds. The 'tov' and 'deltaTime' arrays must match in size.
/// Example: /// Example: [0.005, 0.005, 0.005]
/// Constraints: No constraints specified.
/// Array of the aspect angle at the center of the image in degrees.  The 'tov' and 'aspectAngle' arrays must match in size.
/// Example: /// Example: [4.278, 4.278, 4.278]
/// Constraints: No constraints specified.
func (rcv *RadarSOIObservation_Ingest) AspectAngles(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *RadarSOIObservation_Ingest) AspectAnglesLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

/// Array of the aspect angle at the center of the image in degrees.  The 'tov' and 'aspectAngle' arrays must match in size.
/// Example: /// Example: [4.278, 4.278, 4.278]
/// Constraints: No constraints specified.
/// Array of the component of target angular velocity observable by radar in radians per second.  The 'tov' and 'projAngVel' arrays must match in size.
/// Example: /// Example: [0.166, 0.166, 0.166]
/// Constraints: No constraints specified.
func (rcv *RadarSOIObservation_Ingest) ProjAngVels(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(18))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *RadarSOIObservation_Ingest) ProjAngVelsLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(18))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

/// Array of the component of target angular velocity observable by radar in radians per second.  The 'tov' and 'projAngVel' arrays must match in size.
/// Example: /// Example: [0.166, 0.166, 0.166]
/// Constraints: No constraints specified.
/// Optional id of assumed StateVector of object being observed.
/// Example: /// Example: 99a0de63-b38f-4d81-b057
/// Constraints: Minimum length = 0, Maximum length = 36
func (rcv *RadarSOIObservation_Ingest) IdStateVector() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(20))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Optional id of assumed StateVector of object being observed.
/// Example: /// Example: 99a0de63-b38f-4d81-b057
/// Constraints: Minimum length = 0, Maximum length = 36
/// Optional id of assumed AttitudeSet of object being observed.
/// Example: /// Example: 99a0de63-b38f-4d81-b057
/// Constraints: Minimum length = 0, Maximum length = 36
func (rcv *RadarSOIObservation_Ingest) IdAttitudeSet() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(22))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Optional id of assumed AttitudeSet of object being observed.
/// Example: /// Example: 99a0de63-b38f-4d81-b057
/// Constraints: Minimum length = 0, Maximum length = 36
/// Array of the range to target at image center in kilometers. The 'tov' and 'range' arrays must match in size.
/// Example: /// Example: [877.938, 877.938, 877.938]
/// Constraints: No constraints specified.
func (rcv *RadarSOIObservation_Ingest) Ranges(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(24))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *RadarSOIObservation_Ingest) RangesLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(24))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

/// Array of the range to target at image center in kilometers. The 'tov' and 'range' arrays must match in size.
/// Example: /// Example: [877.938, 877.938, 877.938]
/// Constraints: No constraints specified.
/// Array of the azimuth angle to target at image center in degrees. The 'tov' and 'azimuth' arrays must match in size.
/// Example: /// Example: [278.27, 278.27, 278.27]
/// Constraints: No constraints specified.
func (rcv *RadarSOIObservation_Ingest) Azimuths(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(26))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *RadarSOIObservation_Ingest) AzimuthsLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(26))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

/// Array of the azimuth angle to target at image center in degrees. The 'tov' and 'azimuth' arrays must match in size.
/// Example: /// Example: [278.27, 278.27, 278.27]
/// Constraints: No constraints specified.
/// Array of the elevation angle to target at image center in degrees. The 'tov' and 'elevation' arrays must match in size.
/// Example: /// Example: [70.85, 70.85, 70.85]
/// Constraints: No constraints specified.
func (rcv *RadarSOIObservation_Ingest) Elevations(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(28))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *RadarSOIObservation_Ingest) ElevationsLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(28))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

/// Array of the elevation angle to target at image center in degrees. The 'tov' and 'elevation' arrays must match in size.
/// Example: /// Example: [70.85, 70.85, 70.85]
/// Constraints: No constraints specified.
/// Array of the range rate of target at image center in kilometers per second. The 'tov' and 'rangeRate' arrays must match in size.
/// Example: /// Example: [0.317, 0.317, 0.317]
/// Constraints: No constraints specified.
func (rcv *RadarSOIObservation_Ingest) RangeRates(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(30))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *RadarSOIObservation_Ingest) RangeRatesLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(30))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

/// Array of the range rate of target at image center in kilometers per second. The 'tov' and 'rangeRate' arrays must match in size.
/// Example: /// Example: [0.317, 0.317, 0.317]
/// Constraints: No constraints specified.
/// Array of the azimuth rate of target at image center in degrees per second. The 'tov' and 'azimuthRate' arrays must match in size.
/// Example: /// Example: [-1.481, -1.481, -1.481]
/// Constraints: No constraints specified.
func (rcv *RadarSOIObservation_Ingest) AzimuthRates(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(32))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *RadarSOIObservation_Ingest) AzimuthRatesLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(32))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

/// Array of the azimuth rate of target at image center in degrees per second. The 'tov' and 'azimuthRate' arrays must match in size.
/// Example: /// Example: [-1.481, -1.481, -1.481]
/// Constraints: No constraints specified.
/// Array of the elevation rate of target at image center in degrees per second. The 'tov' and 'elevationRate' arrays must match in size.
/// Example: /// Example: [-0.074, -0.074, -0.074]
/// Constraints: No constraints specified.
func (rcv *RadarSOIObservation_Ingest) ElevationRates(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(34))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *RadarSOIObservation_Ingest) ElevationRatesLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(34))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

/// Array of the elevation rate of target at image center in degrees per second. The 'tov' and 'elevationRate' arrays must match in size.
/// Example: /// Example: [-0.074, -0.074, -0.074]
/// Constraints: No constraints specified.
/// Array of  sensor azimuth angle biases in degrees. The 'tov' and 'azimuthBias' arrays must match in size.
/// Example: /// Example: [45.23, 45.23, 45.23]
/// Constraints: No constraints specified.
func (rcv *RadarSOIObservation_Ingest) AzimuthBiases(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(36))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *RadarSOIObservation_Ingest) AzimuthBiasesLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(36))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

/// Array of  sensor azimuth angle biases in degrees. The 'tov' and 'azimuthBias' arrays must match in size.
/// Example: /// Example: [45.23, 45.23, 45.23]
/// Constraints: No constraints specified.
/// Array of sensor elevation biases in degrees. The 'tov' and 'elevationBias' arrays must match in size.
/// Example: /// Example: [1.23, 1.23, 1.23]
/// Constraints: No constraints specified.
func (rcv *RadarSOIObservation_Ingest) ElevationBiases(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(38))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *RadarSOIObservation_Ingest) ElevationBiasesLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(38))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

/// Array of sensor elevation biases in degrees. The 'tov' and 'elevationBias' arrays must match in size.
/// Example: /// Example: [1.23, 1.23, 1.23]
/// Constraints: No constraints specified.
/// Array of sensor range biases in kilometers. The 'tov' and 'rangeBias' arrays must match in size.
/// Example: /// Example: [1.23, 1.23, 1.23]
/// Constraints: No constraints specified.
func (rcv *RadarSOIObservation_Ingest) RangeBiases(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(40))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *RadarSOIObservation_Ingest) RangeBiasesLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(40))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

/// Array of sensor range biases in kilometers. The 'tov' and 'rangeBias' arrays must match in size.
/// Example: /// Example: [1.23, 1.23, 1.23]
/// Constraints: No constraints specified.
/// Array of Integration angles in degrees. The 'tov' and 'integrationAngle' arrays must match in size.
/// Example: /// Example: [8.594, 8.594, 8.594]
/// Constraints: No constraints specified.
func (rcv *RadarSOIObservation_Ingest) IntegrationAngles(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(42))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *RadarSOIObservation_Ingest) IntegrationAnglesLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(42))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

/// Array of Integration angles in degrees. The 'tov' and 'integrationAngle' arrays must match in size.
/// Example: /// Example: [8.594, 8.594, 8.594]
/// Constraints: No constraints specified.
/// Array of cross-range resolutions (accounting for weighting function) in kilometers. The 'tov' and 'crossRangeRes' arrays must match in size.
/// Example: /// Example: [11.301, 11.301, 11.301]
/// Constraints: No constraints specified.
func (rcv *RadarSOIObservation_Ingest) CrossRangeRes(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(44))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *RadarSOIObservation_Ingest) CrossRangeResLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(44))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

/// Array of cross-range resolutions (accounting for weighting function) in kilometers. The 'tov' and 'crossRangeRes' arrays must match in size.
/// Example: /// Example: [11.301, 11.301, 11.301]
/// Constraints: No constraints specified.
/// Beta angle (between target and radar-image frame z axis) in degrees.
/// Example: /// Example: -89.97
/// Constraints: No constraints specified.
func (rcv *RadarSOIObservation_Ingest) Beta() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(46))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Beta angle (between target and radar-image frame z axis) in degrees.
/// Example: /// Example: -89.97
/// Constraints: No constraints specified.
func (rcv *RadarSOIObservation_Ingest) MutateBeta(n float64) bool {
	return rcv._tab.MutateFloat64Slot(46, n)
}

/// Kappa angle (between radar-line-of-sight and target-frame x axis) in degrees.
/// Example: /// Example: 103.04
/// Constraints: No constraints specified.
func (rcv *RadarSOIObservation_Ingest) Kappa() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(48))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Kappa angle (between radar-line-of-sight and target-frame x axis) in degrees.
/// Example: /// Example: 103.04
/// Constraints: No constraints specified.
func (rcv *RadarSOIObservation_Ingest) MutateKappa(n float64) bool {
	return rcv._tab.MutateFloat64Slot(48, n)
}

/// Array of the peak pixel amplitude for each image in decibels. The 'tov' and 'peakAmplitude' arrays must match in size.
/// Example: /// Example: [33.1, 33.1, 33.1]
/// Constraints: No constraints specified.
func (rcv *RadarSOIObservation_Ingest) PeakAmplitudes(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(50))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *RadarSOIObservation_Ingest) PeakAmplitudesLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(50))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

/// Array of the peak pixel amplitude for each image in decibels. The 'tov' and 'peakAmplitude' arrays must match in size.
/// Example: /// Example: [33.1, 33.1, 33.1]
/// Constraints: No constraints specified.
/// Radar center frequency of the radar in hertz.
/// Example: /// Example: 160047.0625
/// Constraints: No constraints specified.
func (rcv *RadarSOIObservation_Ingest) CenterFrequency() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(52))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Radar center frequency of the radar in hertz.
/// Example: /// Example: 160047.0625
/// Constraints: No constraints specified.
func (rcv *RadarSOIObservation_Ingest) MutateCenterFrequency(n float64) bool {
	return rcv._tab.MutateFloat64Slot(52, n)
}

/// Bandwidth of radar pulse in hertz.
/// Example: /// Example: 24094.12
/// Constraints: No constraints specified.
func (rcv *RadarSOIObservation_Ingest) PulseBandwidth() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(54))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Bandwidth of radar pulse in hertz.
/// Example: /// Example: 24094.12
/// Constraints: No constraints specified.
func (rcv *RadarSOIObservation_Ingest) MutatePulseBandwidth(n float64) bool {
	return rcv._tab.MutateFloat64Slot(54, n)
}

/// Array of the cartesian X positions of the target, in kilometers, in the specified referenceFrame. If referenceFrame is null then J2K should be assumed. The 'tov' and 'xpos' arrays must match in size.
/// Example: /// Example: [-1118.577381, -1118.577381, -1118.577381]
/// Constraints: No constraints specified.
func (rcv *RadarSOIObservation_Ingest) Xpos(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(56))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *RadarSOIObservation_Ingest) XposLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(56))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

/// Array of the cartesian X positions of the target, in kilometers, in the specified referenceFrame. If referenceFrame is null then J2K should be assumed. The 'tov' and 'xpos' arrays must match in size.
/// Example: /// Example: [-1118.577381, -1118.577381, -1118.577381]
/// Constraints: No constraints specified.
/// Array of the cartesian Y positions of the target, in kilometers, in the specified referenceFrame. If referenceFrame is null then J2K should be assumed. The 'tov' and 'ypos' arrays must match in size.
/// Example: /// Example: [3026.231084, 3026.231084, 3026.231084]
/// Constraints: No constraints specified.
func (rcv *RadarSOIObservation_Ingest) Ypos(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(58))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *RadarSOIObservation_Ingest) YposLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(58))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

/// Array of the cartesian Y positions of the target, in kilometers, in the specified referenceFrame. If referenceFrame is null then J2K should be assumed. The 'tov' and 'ypos' arrays must match in size.
/// Example: /// Example: [3026.231084, 3026.231084, 3026.231084]
/// Constraints: No constraints specified.
/// Array of the cartesian Z positions of the target, in kilometers, in the specified referenceFrame. If referenceFrame is null then J2K should be assumed. The 'tov' and 'zpos' arrays must match in size.
/// Example: /// Example: [6167.831808, 6167.831808, 6167.831808]
/// Constraints: No constraints specified.
func (rcv *RadarSOIObservation_Ingest) Zpos(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(60))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *RadarSOIObservation_Ingest) ZposLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(60))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

/// Array of the cartesian Z positions of the target, in kilometers, in the specified referenceFrame. If referenceFrame is null then J2K should be assumed. The 'tov' and 'zpos' arrays must match in size.
/// Example: /// Example: [6167.831808, 6167.831808, 6167.831808]
/// Constraints: No constraints specified.
/// Array of the cartesian X velocities of target, in kilometers per second, in the specified referenceFrame. If referenceFrame is null then J2K should be assumed. The 'tov' and 'xvel' arrays must match in size.
/// Example: /// Example: [-4.25242784, -4.25242784, -4.25242784]
/// Constraints: No constraints specified.
func (rcv *RadarSOIObservation_Ingest) Xvel(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(62))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *RadarSOIObservation_Ingest) XvelLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(62))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

/// Array of the cartesian X velocities of target, in kilometers per second, in the specified referenceFrame. If referenceFrame is null then J2K should be assumed. The 'tov' and 'xvel' arrays must match in size.
/// Example: /// Example: [-4.25242784, -4.25242784, -4.25242784]
/// Constraints: No constraints specified.
/// Array of the cartesian Y velocities of target, in kilometers per second, in the specified referenceFrame.  If referenceFrame is null then J2K should be assumed. The 'tov' and 'yvel' arrays must match in size.
/// Example: /// Example: [5.291107434, 5.291107434, 5.291107434]
/// Constraints: No constraints specified.
func (rcv *RadarSOIObservation_Ingest) Yvel(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(64))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *RadarSOIObservation_Ingest) YvelLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(64))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

/// Array of the cartesian Y velocities of target, in kilometers per second, in the specified referenceFrame.  If referenceFrame is null then J2K should be assumed. The 'tov' and 'yvel' arrays must match in size.
/// Example: /// Example: [5.291107434, 5.291107434, 5.291107434]
/// Constraints: No constraints specified.
/// Array of the cartesian Z velocities of target, in kilometers per second, in the specified referenceFrame.  If referenceFrame is null then J2K should be assumed. The 'tov' and 'zvel' arrays must match in size.
/// Example: /// Example: [-3.356493869, -3.356493869, -3.356493869]
/// Constraints: No constraints specified.
func (rcv *RadarSOIObservation_Ingest) Zvel(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(66))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *RadarSOIObservation_Ingest) ZvelLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(66))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

/// Array of the cartesian Z velocities of target, in kilometers per second, in the specified referenceFrame.  If referenceFrame is null then J2K should be assumed. The 'tov' and 'zvel' arrays must match in size.
/// Example: /// Example: [-3.356493869, -3.356493869, -3.356493869]
/// Constraints: No constraints specified.
func RadarSOIObservation_IngestStart(builder *flatbuffers.Builder) {
	builder.StartObject(32)
}
func RadarSOIObservation_IngestAddObStartTime(builder *flatbuffers.Builder, obStartTime flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(obStartTime), 0)
}
func RadarSOIObservation_IngestAddTovs(builder *flatbuffers.Builder, tovs flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(tovs), 0)
}
func RadarSOIObservation_IngestStartTovsVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func RadarSOIObservation_IngestAddRspaces(builder *flatbuffers.Builder, rspaces flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(rspaces), 0)
}
func RadarSOIObservation_IngestStartRspacesVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func RadarSOIObservation_IngestAddXspaces(builder *flatbuffers.Builder, xspaces flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(3, flatbuffers.UOffsetT(xspaces), 0)
}
func RadarSOIObservation_IngestStartXspacesVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func RadarSOIObservation_IngestAddDoppler2Xrs(builder *flatbuffers.Builder, doppler2Xrs flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(4, flatbuffers.UOffsetT(doppler2Xrs), 0)
}
func RadarSOIObservation_IngestStartDoppler2XrsVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func RadarSOIObservation_IngestAddDeltaTimes(builder *flatbuffers.Builder, deltaTimes flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(5, flatbuffers.UOffsetT(deltaTimes), 0)
}
func RadarSOIObservation_IngestStartDeltaTimesVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func RadarSOIObservation_IngestAddAspectAngles(builder *flatbuffers.Builder, aspectAngles flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(6, flatbuffers.UOffsetT(aspectAngles), 0)
}
func RadarSOIObservation_IngestStartAspectAnglesVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func RadarSOIObservation_IngestAddProjAngVels(builder *flatbuffers.Builder, projAngVels flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(7, flatbuffers.UOffsetT(projAngVels), 0)
}
func RadarSOIObservation_IngestStartProjAngVelsVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func RadarSOIObservation_IngestAddIdStateVector(builder *flatbuffers.Builder, idStateVector flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(8, flatbuffers.UOffsetT(idStateVector), 0)
}
func RadarSOIObservation_IngestAddIdAttitudeSet(builder *flatbuffers.Builder, idAttitudeSet flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(9, flatbuffers.UOffsetT(idAttitudeSet), 0)
}
func RadarSOIObservation_IngestAddRanges(builder *flatbuffers.Builder, ranges flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(10, flatbuffers.UOffsetT(ranges), 0)
}
func RadarSOIObservation_IngestStartRangesVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func RadarSOIObservation_IngestAddAzimuths(builder *flatbuffers.Builder, azimuths flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(11, flatbuffers.UOffsetT(azimuths), 0)
}
func RadarSOIObservation_IngestStartAzimuthsVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func RadarSOIObservation_IngestAddElevations(builder *flatbuffers.Builder, elevations flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(12, flatbuffers.UOffsetT(elevations), 0)
}
func RadarSOIObservation_IngestStartElevationsVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func RadarSOIObservation_IngestAddRangeRates(builder *flatbuffers.Builder, rangeRates flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(13, flatbuffers.UOffsetT(rangeRates), 0)
}
func RadarSOIObservation_IngestStartRangeRatesVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func RadarSOIObservation_IngestAddAzimuthRates(builder *flatbuffers.Builder, azimuthRates flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(14, flatbuffers.UOffsetT(azimuthRates), 0)
}
func RadarSOIObservation_IngestStartAzimuthRatesVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func RadarSOIObservation_IngestAddElevationRates(builder *flatbuffers.Builder, elevationRates flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(15, flatbuffers.UOffsetT(elevationRates), 0)
}
func RadarSOIObservation_IngestStartElevationRatesVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func RadarSOIObservation_IngestAddAzimuthBiases(builder *flatbuffers.Builder, azimuthBiases flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(16, flatbuffers.UOffsetT(azimuthBiases), 0)
}
func RadarSOIObservation_IngestStartAzimuthBiasesVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func RadarSOIObservation_IngestAddElevationBiases(builder *flatbuffers.Builder, elevationBiases flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(17, flatbuffers.UOffsetT(elevationBiases), 0)
}
func RadarSOIObservation_IngestStartElevationBiasesVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func RadarSOIObservation_IngestAddRangeBiases(builder *flatbuffers.Builder, rangeBiases flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(18, flatbuffers.UOffsetT(rangeBiases), 0)
}
func RadarSOIObservation_IngestStartRangeBiasesVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func RadarSOIObservation_IngestAddIntegrationAngles(builder *flatbuffers.Builder, integrationAngles flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(19, flatbuffers.UOffsetT(integrationAngles), 0)
}
func RadarSOIObservation_IngestStartIntegrationAnglesVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func RadarSOIObservation_IngestAddCrossRangeRes(builder *flatbuffers.Builder, crossRangeRes flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(20, flatbuffers.UOffsetT(crossRangeRes), 0)
}
func RadarSOIObservation_IngestStartCrossRangeResVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func RadarSOIObservation_IngestAddBeta(builder *flatbuffers.Builder, beta float64) {
	builder.PrependFloat64Slot(21, beta, 0.0)
}
func RadarSOIObservation_IngestAddKappa(builder *flatbuffers.Builder, kappa float64) {
	builder.PrependFloat64Slot(22, kappa, 0.0)
}
func RadarSOIObservation_IngestAddPeakAmplitudes(builder *flatbuffers.Builder, peakAmplitudes flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(23, flatbuffers.UOffsetT(peakAmplitudes), 0)
}
func RadarSOIObservation_IngestStartPeakAmplitudesVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func RadarSOIObservation_IngestAddCenterFrequency(builder *flatbuffers.Builder, centerFrequency float64) {
	builder.PrependFloat64Slot(24, centerFrequency, 0.0)
}
func RadarSOIObservation_IngestAddPulseBandwidth(builder *flatbuffers.Builder, pulseBandwidth float64) {
	builder.PrependFloat64Slot(25, pulseBandwidth, 0.0)
}
func RadarSOIObservation_IngestAddXpos(builder *flatbuffers.Builder, xpos flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(26, flatbuffers.UOffsetT(xpos), 0)
}
func RadarSOIObservation_IngestStartXposVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func RadarSOIObservation_IngestAddYpos(builder *flatbuffers.Builder, ypos flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(27, flatbuffers.UOffsetT(ypos), 0)
}
func RadarSOIObservation_IngestStartYposVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func RadarSOIObservation_IngestAddZpos(builder *flatbuffers.Builder, zpos flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(28, flatbuffers.UOffsetT(zpos), 0)
}
func RadarSOIObservation_IngestStartZposVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func RadarSOIObservation_IngestAddXvel(builder *flatbuffers.Builder, xvel flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(29, flatbuffers.UOffsetT(xvel), 0)
}
func RadarSOIObservation_IngestStartXvelVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func RadarSOIObservation_IngestAddYvel(builder *flatbuffers.Builder, yvel flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(30, flatbuffers.UOffsetT(yvel), 0)
}
func RadarSOIObservation_IngestStartYvelVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func RadarSOIObservation_IngestAddZvel(builder *flatbuffers.Builder, zvel flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(31, flatbuffers.UOffsetT(zvel), 0)
}
func RadarSOIObservation_IngestStartZvelVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func RadarSOIObservation_IngestEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
