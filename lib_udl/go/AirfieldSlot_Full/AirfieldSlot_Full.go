// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package AirfieldSlot_Full

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

/// /// Airfield capacity data. Contains data associated with the airfieldslots available for parking, working, takeoff, and landing at the airfield, as well as the types of aircraft that can be accommodated.
type AirfieldSlot_Full struct {
	_tab flatbuffers.Table
}

const AirfieldSlot_FullIdentifier = "AIRF"

func GetRootAsAirfieldSlot_Full(buf []byte, offset flatbuffers.UOffsetT) *AirfieldSlot_Full {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &AirfieldSlot_Full{}
	x.Init(buf, n+offset)
	return x
}

func FinishAirfieldSlot_FullBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	identifierBytes := []byte(AirfieldSlot_FullIdentifier)
	builder.FinishWithFileIdentifier(offset, identifierBytes)
}

func AirfieldSlot_FullBufferHasIdentifier(buf []byte) bool {
	return flatbuffers.BufferHasIdentifier(buf, AirfieldSlot_FullIdentifier)
}

func GetSizePrefixedRootAsAirfieldSlot_Full(buf []byte, offset flatbuffers.UOffsetT) *AirfieldSlot_Full {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &AirfieldSlot_Full{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedAirfieldSlot_FullBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	identifierBytes := []byte(AirfieldSlot_FullIdentifier)
	builder.FinishSizePrefixedWithFileIdentifier(offset, identifierBytes)
}

func SizePrefixedAirfieldSlot_FullBufferHasIdentifier(buf []byte) bool {
	return flatbuffers.SizePrefixedBufferHasIdentifier(buf, AirfieldSlot_FullIdentifier)
}

func (rcv *AirfieldSlot_Full) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *AirfieldSlot_Full) Table() flatbuffers.Table {
	return rcv._tab
}

/// Unique identifier of the record, auto-generated by the system.
/// Example: /// Example: be831d39-1822-da9f-7ace-6cc5643397dc
/// Constraints: Minimum length = 1, Maximum length = 36
func (rcv *AirfieldSlot_Full) Id() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Unique identifier of the record, auto-generated by the system.
/// Example: /// Example: be831d39-1822-da9f-7ace-6cc5643397dc
/// Constraints: Minimum length = 1, Maximum length = 36
/// Classification marking of the data in IC/CAPCO Portion-marked format.
/// Example: /// Example: U
/// Constraints: Minimum length = 1, Maximum length = 128
func (rcv *AirfieldSlot_Full) ClassificationMarking() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Classification marking of the data in IC/CAPCO Portion-marked format.
/// Example: /// Example: U
/// Constraints: Minimum length = 1, Maximum length = 128
/// The name of the airfield where this slot is located.
/// Example: /// Example: USAF Academy AFLD
/// Constraints: Minimum length = 1, Maximum length = 64
func (rcv *AirfieldSlot_Full) AirfieldName() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The name of the airfield where this slot is located.
/// Example: /// Example: USAF Academy AFLD
/// Constraints: Minimum length = 1, Maximum length = 64
/// The International Civil Aviation Organization (ICAO) code of the airfield.
/// Example: /// Example: KCOS
/// Constraints: Minimum length = 0, Maximum length = 4
func (rcv *AirfieldSlot_Full) Icao() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The International Civil Aviation Organization (ICAO) code of the airfield.
/// Example: /// Example: KCOS
/// Constraints: Minimum length = 0, Maximum length = 4
/// Unique identifier of the Airfield for which this slot information applies.
/// Example: /// Example: 3136498f-2969-3535-1432-e984b2e2e686
/// Constraints: Minimum length = 0, Maximum length = 36
func (rcv *AirfieldSlot_Full) IdAirfield() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Unique identifier of the Airfield for which this slot information applies.
/// Example: /// Example: 3136498f-2969-3535-1432-e984b2e2e686
/// Constraints: Minimum length = 0, Maximum length = 36
/// Alternate airfield identifier provided by the source.
/// Example: /// Example: ALT-AIRFIELD-ID
/// Constraints: Minimum length = 0, Maximum length = 64
func (rcv *AirfieldSlot_Full) AltAirfieldId() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Alternate airfield identifier provided by the source.
/// Example: /// Example: ALT-AIRFIELD-ID
/// Constraints: Minimum length = 0, Maximum length = 64
/// Name of this slot.
/// Example: /// Example: Apron 5
/// Constraints: Minimum length = 1, Maximum length = 32
func (rcv *AirfieldSlot_Full) Name() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Name of this slot.
/// Example: /// Example: Apron 5
/// Constraints: Minimum length = 1, Maximum length = 32
/// Designates how this slot can be used (WORKING, PARKING, TAKEOFF, LANDING, OTHER).
/// Example: /// Example: WORKING
/// Constraints: Minimum length = 0, Maximum length = 7
func (rcv *AirfieldSlot_Full) Type() AirfieldSlot_Full_type_Enum {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(18))
	if o != 0 {
		return AirfieldSlot_Full_type_Enum(rcv._tab.GetInt8(o + rcv._tab.Pos))
	}
	return 0
}

/// Designates how this slot can be used (WORKING, PARKING, TAKEOFF, LANDING, OTHER).
/// Example: /// Example: WORKING
/// Constraints: Minimum length = 0, Maximum length = 7
func (rcv *AirfieldSlot_Full) MutateType(n AirfieldSlot_Full_type_Enum) bool {
	return rcv._tab.MutateInt8Slot(18, int8(n))
}

/// Largest category of aircraft supported in this slot (WIDE, NARROW, HELO, ALL, OTHER).
/// Example: /// Example: WIDE
/// Constraints: Minimum length = 0, Maximum length = 6
func (rcv *AirfieldSlot_Full) AcSlotCat() AirfieldSlot_Full_acSlotCat_Enum {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(20))
	if o != 0 {
		return AirfieldSlot_Full_acSlotCat_Enum(rcv._tab.GetInt8(o + rcv._tab.Pos))
	}
	return 0
}

/// Largest category of aircraft supported in this slot (WIDE, NARROW, HELO, ALL, OTHER).
/// Example: /// Example: WIDE
/// Constraints: Minimum length = 0, Maximum length = 6
func (rcv *AirfieldSlot_Full) MutateAcSlotCat(n AirfieldSlot_Full_acSlotCat_Enum) bool {
	return rcv._tab.MutateInt8Slot(20, int8(n))
}

/// Number of aircraft that can fit in this slot at the same time.
/// Example: /// Example: 5
/// Constraints: No constraints specified.
func (rcv *AirfieldSlot_Full) Capacity() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(22))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

/// Number of aircraft that can fit in this slot at the same time.
/// Example: /// Example: 5
/// Constraints: No constraints specified.
func (rcv *AirfieldSlot_Full) MutateCapacity(n int32) bool {
	return rcv._tab.MutateInt32Slot(22, n)
}

/// Zulu time this slot is first available based on daily standard hours. Not applicable to slots with type PARKING. Abnormal hours, such as holidays, should be marked via the AirfieldSlotConsumption schema.
/// Example: /// Example: 0000Z
/// Constraints: Minimum length = 0, Maximum length = 5
func (rcv *AirfieldSlot_Full) StartTime() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(24))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Zulu time this slot is first available based on daily standard hours. Not applicable to slots with type PARKING. Abnormal hours, such as holidays, should be marked via the AirfieldSlotConsumption schema.
/// Example: /// Example: 0000Z
/// Constraints: Minimum length = 0, Maximum length = 5
/// Latest zulu time this slot is available based on daily standard hours. Not applicable to slots with type PARKING. Abnormal hours, such as holidays, should be marked via the AirfieldSlotConsumption schema.
/// Example: /// Example: 2359Z
/// Constraints: Minimum length = 0, Maximum length = 5
func (rcv *AirfieldSlot_Full) EndTime() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(26))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Latest zulu time this slot is available based on daily standard hours. Not applicable to slots with type PARKING. Abnormal hours, such as holidays, should be marked via the AirfieldSlotConsumption schema.
/// Example: /// Example: 2359Z
/// Constraints: Minimum length = 0, Maximum length = 5
/// Minimum time that must elapse between different aircraft leaving and entering this slot, in minutes.
/// Example: /// Example: 7
/// Constraints: No constraints specified.
func (rcv *AirfieldSlot_Full) MinSeparation() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(28))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

/// Minimum time that must elapse between different aircraft leaving and entering this slot, in minutes.
/// Example: /// Example: 7
/// Constraints: No constraints specified.
func (rcv *AirfieldSlot_Full) MutateMinSeparation(n int32) bool {
	return rcv._tab.MutateInt32Slot(28, n)
}

/// Optional notes/comments for this airfield slot.
/// Example: /// Example: Notes for an airfield slot.
/// Constraints: Minimum length = 0, Maximum length = 128
func (rcv *AirfieldSlot_Full) Notes() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(30))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Optional notes/comments for this airfield slot.
/// Example: /// Example: Notes for an airfield slot.
/// Constraints: Minimum length = 0, Maximum length = 128
/// Time the row was created in the database, auto-populated by the system.
/// Example: /// Example: 2022-01-01T16:00:00.123Z
/// Constraints: No constraints specified.
func (rcv *AirfieldSlot_Full) CreatedAt() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(32))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Time the row was created in the database, auto-populated by the system.
/// Example: /// Example: 2022-01-01T16:00:00.123Z
/// Constraints: No constraints specified.
/// Application user who created the row in the database, auto-populated by the system.
/// Example: /// Example: some.user
/// Constraints: Minimum length = 1, Maximum length = 64
func (rcv *AirfieldSlot_Full) CreatedBy() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(34))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Application user who created the row in the database, auto-populated by the system.
/// Example: /// Example: some.user
/// Constraints: Minimum length = 1, Maximum length = 64
/// Time the row was last updated in the database, auto-populated by the system.
/// Example: /// Example: 2022-01-01T16:00:00.123Z
/// Constraints: No constraints specified.
func (rcv *AirfieldSlot_Full) UpdatedAt() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(36))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Time the row was last updated in the database, auto-populated by the system.
/// Example: /// Example: 2022-01-01T16:00:00.123Z
/// Constraints: No constraints specified.
/// Application user who updated the row in the database, auto-populated by the system.
/// Example: /// Example: some.user
/// Constraints: Minimum length = 0, Maximum length = 64
func (rcv *AirfieldSlot_Full) UpdatedBy() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(38))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Application user who updated the row in the database, auto-populated by the system.
/// Example: /// Example: some.user
/// Constraints: Minimum length = 0, Maximum length = 64
/// The source data library from which this record was received. This could be a remote or tactical UDL or another data library. If null, the record should be assumed to have originated from the primary Enterprise UDL.
/// Example: /// Example: AXE
/// Constraints: Minimum length = 0, Maximum length = 64
func (rcv *AirfieldSlot_Full) SourceDl() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(40))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The source data library from which this record was received. This could be a remote or tactical UDL or another data library. If null, the record should be assumed to have originated from the primary Enterprise UDL.
/// Example: /// Example: AXE
/// Constraints: Minimum length = 0, Maximum length = 64
/// Source of the data.
/// Example: /// Example: Bluestaq
/// Constraints: Minimum length = 1, Maximum length = 64
func (rcv *AirfieldSlot_Full) Source() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(42))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Source of the data.
/// Example: /// Example: Bluestaq
/// Constraints: Minimum length = 1, Maximum length = 64
/// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
/// Example: /// Example: THIRD_PARTY_DATASOURCE
/// Constraints: Minimum length = 0, Maximum length = 64
func (rcv *AirfieldSlot_Full) Origin() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(44))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
/// Example: /// Example: THIRD_PARTY_DATASOURCE
/// Constraints: Minimum length = 0, Maximum length = 64
/// The originating source network on which this record was created, auto-populated by the system.
/// Example: /// Example: OPS1
/// Constraints: Minimum length = 1, Maximum length = 32
func (rcv *AirfieldSlot_Full) OrigNetwork() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(46))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The originating source network on which this record was created, auto-populated by the system.
/// Example: /// Example: OPS1
/// Constraints: Minimum length = 1, Maximum length = 32
/// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
/// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
/// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
/// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
/// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
/// Example: /// Example: TEST
/// Constraints: Minimum length = 1, Maximum length = 32
func (rcv *AirfieldSlot_Full) DataMode() AirfieldSlot_Full_dataMode_Enum {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(48))
	if o != 0 {
		return AirfieldSlot_Full_dataMode_Enum(rcv._tab.GetInt8(o + rcv._tab.Pos))
	}
	return 0
}

/// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
/// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
/// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
/// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
/// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
/// Example: /// Example: TEST
/// Constraints: Minimum length = 1, Maximum length = 32
func (rcv *AirfieldSlot_Full) MutateDataMode(n AirfieldSlot_Full_dataMode_Enum) bool {
	return rcv._tab.MutateInt8Slot(48, int8(n))
}

func AirfieldSlot_FullStart(builder *flatbuffers.Builder) {
	builder.StartObject(23)
}
func AirfieldSlot_FullAddId(builder *flatbuffers.Builder, id flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(id), 0)
}
func AirfieldSlot_FullAddClassificationMarking(builder *flatbuffers.Builder, classificationMarking flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(classificationMarking), 0)
}
func AirfieldSlot_FullAddAirfieldName(builder *flatbuffers.Builder, airfieldName flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(airfieldName), 0)
}
func AirfieldSlot_FullAddIcao(builder *flatbuffers.Builder, icao flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(3, flatbuffers.UOffsetT(icao), 0)
}
func AirfieldSlot_FullAddIdAirfield(builder *flatbuffers.Builder, idAirfield flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(4, flatbuffers.UOffsetT(idAirfield), 0)
}
func AirfieldSlot_FullAddAltAirfieldId(builder *flatbuffers.Builder, altAirfieldId flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(5, flatbuffers.UOffsetT(altAirfieldId), 0)
}
func AirfieldSlot_FullAddName(builder *flatbuffers.Builder, name flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(6, flatbuffers.UOffsetT(name), 0)
}
func AirfieldSlot_FullAddType(builder *flatbuffers.Builder, type_ AirfieldSlot_Full_type_Enum) {
	builder.PrependInt8Slot(7, int8(type_), 0)
}
func AirfieldSlot_FullAddAcSlotCat(builder *flatbuffers.Builder, acSlotCat AirfieldSlot_Full_acSlotCat_Enum) {
	builder.PrependInt8Slot(8, int8(acSlotCat), 0)
}
func AirfieldSlot_FullAddCapacity(builder *flatbuffers.Builder, capacity int32) {
	builder.PrependInt32Slot(9, capacity, 0)
}
func AirfieldSlot_FullAddStartTime(builder *flatbuffers.Builder, startTime flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(10, flatbuffers.UOffsetT(startTime), 0)
}
func AirfieldSlot_FullAddEndTime(builder *flatbuffers.Builder, endTime flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(11, flatbuffers.UOffsetT(endTime), 0)
}
func AirfieldSlot_FullAddMinSeparation(builder *flatbuffers.Builder, minSeparation int32) {
	builder.PrependInt32Slot(12, minSeparation, 0)
}
func AirfieldSlot_FullAddNotes(builder *flatbuffers.Builder, notes flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(13, flatbuffers.UOffsetT(notes), 0)
}
func AirfieldSlot_FullAddCreatedAt(builder *flatbuffers.Builder, createdAt flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(14, flatbuffers.UOffsetT(createdAt), 0)
}
func AirfieldSlot_FullAddCreatedBy(builder *flatbuffers.Builder, createdBy flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(15, flatbuffers.UOffsetT(createdBy), 0)
}
func AirfieldSlot_FullAddUpdatedAt(builder *flatbuffers.Builder, updatedAt flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(16, flatbuffers.UOffsetT(updatedAt), 0)
}
func AirfieldSlot_FullAddUpdatedBy(builder *flatbuffers.Builder, updatedBy flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(17, flatbuffers.UOffsetT(updatedBy), 0)
}
func AirfieldSlot_FullAddSourceDl(builder *flatbuffers.Builder, sourceDl flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(18, flatbuffers.UOffsetT(sourceDl), 0)
}
func AirfieldSlot_FullAddSource(builder *flatbuffers.Builder, source flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(19, flatbuffers.UOffsetT(source), 0)
}
func AirfieldSlot_FullAddOrigin(builder *flatbuffers.Builder, origin flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(20, flatbuffers.UOffsetT(origin), 0)
}
func AirfieldSlot_FullAddOrigNetwork(builder *flatbuffers.Builder, origNetwork flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(21, flatbuffers.UOffsetT(origNetwork), 0)
}
func AirfieldSlot_FullAddDataMode(builder *flatbuffers.Builder, dataMode AirfieldSlot_Full_dataMode_Enum) {
	builder.PrependInt8Slot(22, int8(dataMode), 0)
}
func AirfieldSlot_FullEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
