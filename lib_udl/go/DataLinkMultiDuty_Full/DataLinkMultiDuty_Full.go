// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package DataLinkMultiDuty_Full

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

/// /// Collection of contact and identification information for designated multilink coordinator duty assignments. There can be 0 to many DataLinkMultiDuty collections within the datalink service.
type DataLinkMultiDuty_Full struct {
	_tab flatbuffers.Table
}

const DataLinkMultiDuty_FullIdentifier = "DATA"

func GetRootAsDataLinkMultiDuty_Full(buf []byte, offset flatbuffers.UOffsetT) *DataLinkMultiDuty_Full {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &DataLinkMultiDuty_Full{}
	x.Init(buf, n+offset)
	return x
}

func FinishDataLinkMultiDuty_FullBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	identifierBytes := []byte(DataLinkMultiDuty_FullIdentifier)
	builder.FinishWithFileIdentifier(offset, identifierBytes)
}

func DataLinkMultiDuty_FullBufferHasIdentifier(buf []byte) bool {
	return flatbuffers.BufferHasIdentifier(buf, DataLinkMultiDuty_FullIdentifier)
}

func GetSizePrefixedRootAsDataLinkMultiDuty_Full(buf []byte, offset flatbuffers.UOffsetT) *DataLinkMultiDuty_Full {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &DataLinkMultiDuty_Full{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedDataLinkMultiDuty_FullBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	identifierBytes := []byte(DataLinkMultiDuty_FullIdentifier)
	builder.FinishSizePrefixedWithFileIdentifier(offset, identifierBytes)
}

func SizePrefixedDataLinkMultiDuty_FullBufferHasIdentifier(buf []byte) bool {
	return flatbuffers.SizePrefixedBufferHasIdentifier(buf, DataLinkMultiDuty_FullIdentifier)
}

func (rcv *DataLinkMultiDuty_Full) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *DataLinkMultiDuty_Full) Table() flatbuffers.Table {
	return rcv._tab
}

/// Designated force of unit specified by ship name, unit call sign, or unit designator.
/// Example: /// Example: SHIP:STENNIS
/// Constraints: Minimum length = 0, Maximum length = 38
func (rcv *DataLinkMultiDuty_Full) UnitDes() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Designated force of unit specified by ship name, unit call sign, or unit designator.
/// Example: /// Example: SHIP:STENNIS
/// Constraints: Minimum length = 0, Maximum length = 38
/// The name of the person to be contacted for multilink coordination.
/// Example: /// Example: POPOVICH
/// Constraints: Minimum length = 0, Maximum length = 20
func (rcv *DataLinkMultiDuty_Full) Name() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The name of the person to be contacted for multilink coordination.
/// Example: /// Example: POPOVICH
/// Constraints: Minimum length = 0, Maximum length = 20
/// The rank or position of the person to be contacted for multilink coordination.
/// Example: /// Example: LCDR
/// Constraints: Minimum length = 0, Maximum length = 16
func (rcv *DataLinkMultiDuty_Full) Rank() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The rank or position of the person to be contacted for multilink coordination.
/// Example: /// Example: LCDR
/// Constraints: Minimum length = 0, Maximum length = 16
/// Specific duties assigned for multilink coordination (e.g. ICO, RICO, SICO).
/// Example: /// Example: SICO
/// Constraints: Minimum length = 0, Maximum length = 4
func (rcv *DataLinkMultiDuty_Full) Duty() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Specific duties assigned for multilink coordination (e.g. ICO, RICO, SICO).
/// Example: /// Example: SICO
/// Constraints: Minimum length = 0, Maximum length = 4
/// Array of telephone numbers or the frequency values for radio transmission of the person to be contacted for multilink coordination.
/// Example: /// Example: ['TEL:804-555-4142', 'TEL:804-867-5309']
/// Constraints: No constraints specified.
func (rcv *DataLinkMultiDuty_Full) DutyTeleFreqNums(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *DataLinkMultiDuty_Full) DutyTeleFreqNumsLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

/// Array of telephone numbers or the frequency values for radio transmission of the person to be contacted for multilink coordination.
/// Example: /// Example: ['TEL:804-555-4142', 'TEL:804-867-5309']
/// Constraints: No constraints specified.
/// Collection of information regarding the function, frequency, and priority of interface control and coordination nets for multilink coordination. There can be 0 to many DataLinkMultiVoiceCoord collections within a DataLinkMultiDuty collection.
/// Example: /// Example: No example provided.
/// Constraints: No constraints specified.
func (rcv *DataLinkMultiDuty_Full) MultiDutyVoiceCoord(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *DataLinkMultiDuty_Full) MultiDutyVoiceCoordLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

/// Collection of information regarding the function, frequency, and priority of interface control and coordination nets for multilink coordination. There can be 0 to many DataLinkMultiVoiceCoord collections within a DataLinkMultiDuty collection.
/// Example: /// Example: No example provided.
/// Constraints: No constraints specified.
func DataLinkMultiDuty_FullStart(builder *flatbuffers.Builder) {
	builder.StartObject(6)
}
func DataLinkMultiDuty_FullAddUnitDes(builder *flatbuffers.Builder, unitDes flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(unitDes), 0)
}
func DataLinkMultiDuty_FullAddName(builder *flatbuffers.Builder, name flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(name), 0)
}
func DataLinkMultiDuty_FullAddRank(builder *flatbuffers.Builder, rank flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(rank), 0)
}
func DataLinkMultiDuty_FullAddDuty(builder *flatbuffers.Builder, duty flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(3, flatbuffers.UOffsetT(duty), 0)
}
func DataLinkMultiDuty_FullAddDutyTeleFreqNums(builder *flatbuffers.Builder, dutyTeleFreqNums flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(4, flatbuffers.UOffsetT(dutyTeleFreqNums), 0)
}
func DataLinkMultiDuty_FullStartDutyTeleFreqNumsVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func DataLinkMultiDuty_FullAddMultiDutyVoiceCoord(builder *flatbuffers.Builder, multiDutyVoiceCoord flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(5, flatbuffers.UOffsetT(multiDutyVoiceCoord), 0)
}
func DataLinkMultiDuty_FullStartMultiDutyVoiceCoordVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func DataLinkMultiDuty_FullEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
