// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package AircraftStatusRemark_Ingest

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

/// /// Properties and characteristics of a remark that is associated with an aircraft status.
type AircraftStatusRemark_Ingest struct {
	_tab flatbuffers.Table
}

const AircraftStatusRemark_IngestIdentifier = "AIRC"

func GetRootAsAircraftStatusRemark_Ingest(buf []byte, offset flatbuffers.UOffsetT) *AircraftStatusRemark_Ingest {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &AircraftStatusRemark_Ingest{}
	x.Init(buf, n+offset)
	return x
}

func FinishAircraftStatusRemark_IngestBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	identifierBytes := []byte(AircraftStatusRemark_IngestIdentifier)
	builder.FinishWithFileIdentifier(offset, identifierBytes)
}

func AircraftStatusRemark_IngestBufferHasIdentifier(buf []byte) bool {
	return flatbuffers.BufferHasIdentifier(buf, AircraftStatusRemark_IngestIdentifier)
}

func GetSizePrefixedRootAsAircraftStatusRemark_Ingest(buf []byte, offset flatbuffers.UOffsetT) *AircraftStatusRemark_Ingest {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &AircraftStatusRemark_Ingest{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedAircraftStatusRemark_IngestBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	identifierBytes := []byte(AircraftStatusRemark_IngestIdentifier)
	builder.FinishSizePrefixedWithFileIdentifier(offset, identifierBytes)
}

func SizePrefixedAircraftStatusRemark_IngestBufferHasIdentifier(buf []byte) bool {
	return flatbuffers.SizePrefixedBufferHasIdentifier(buf, AircraftStatusRemark_IngestIdentifier)
}

func (rcv *AircraftStatusRemark_Ingest) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *AircraftStatusRemark_Ingest) Table() flatbuffers.Table {
	return rcv._tab
}

/// Unique identifier of the record, auto-generated by the system if not provided on create operations.
/// Example: /// Example: 0167f577-e06c-358e-85aa-0a07a730bdd0
/// Constraints: Minimum length = 1, Maximum length = 36
func (rcv *AircraftStatusRemark_Ingest) Id() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Unique identifier of the record, auto-generated by the system if not provided on create operations.
/// Example: /// Example: 0167f577-e06c-358e-85aa-0a07a730bdd0
/// Constraints: Minimum length = 1, Maximum length = 36
/// Classification marking of the data in IC/CAPCO Portion-marked format.
/// Example: /// Example: U
/// Constraints: Minimum length = 1, Maximum length = 128
func (rcv *AircraftStatusRemark_Ingest) ClassificationMarking() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Classification marking of the data in IC/CAPCO Portion-marked format.
/// Example: /// Example: U
/// Constraints: Minimum length = 1, Maximum length = 128
/// The ID of the Aircraft Status to which this remark applies.
/// Example: /// Example: 388b1f64-ccff-4113-b049-3cf5542c2a42
/// Constraints: Minimum length = 1, Maximum length = 36
func (rcv *AircraftStatusRemark_Ingest) IdAircraftStatus() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The ID of the Aircraft Status to which this remark applies.
/// Example: /// Example: 388b1f64-ccff-4113-b049-3cf5542c2a42
/// Constraints: Minimum length = 1, Maximum length = 36
/// Unique identifier of the Aircraft Status Remark record from the originating system.
/// Example: /// Example: GDSSBL022307131714250077
/// Constraints: Minimum length = 0, Maximum length = 36
func (rcv *AircraftStatusRemark_Ingest) AltRmkId() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Unique identifier of the Aircraft Status Remark record from the originating system.
/// Example: /// Example: GDSSBL022307131714250077
/// Constraints: Minimum length = 0, Maximum length = 36
/// The name of the remark.
/// Example: /// Example: DISCREPANCY - 202297501
/// Constraints: Minimum length = 0, Maximum length = 64
func (rcv *AircraftStatusRemark_Ingest) Name() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The name of the remark.
/// Example: /// Example: DISCREPANCY - 202297501
/// Constraints: Minimum length = 0, Maximum length = 64
/// The text of the remark.
/// Example: /// Example: Remark text
/// Constraints: Minimum length = 1, Maximum length = 1024
func (rcv *AircraftStatusRemark_Ingest) Text() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The text of the remark.
/// Example: /// Example: Remark text
/// Constraints: Minimum length = 1, Maximum length = 1024
/// Time the remark was created in the originating system in ISO 8601 UTC format with millisecond precision.
/// Example: /// Example: 2024-01-01T15:00:00.123Z
/// Constraints: No constraints specified.
func (rcv *AircraftStatusRemark_Ingest) Timestamp() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Time the remark was created in the originating system in ISO 8601 UTC format with millisecond precision.
/// Example: /// Example: 2024-01-01T15:00:00.123Z
/// Constraints: No constraints specified.
/// The name or ID of the external user that updated this remark in the originating system.
/// Example: /// Example: JOHN SMITH
/// Constraints: Minimum length = 0, Maximum length = 36
func (rcv *AircraftStatusRemark_Ingest) LastUpdatedBy() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(18))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The name or ID of the external user that updated this remark in the originating system.
/// Example: /// Example: JOHN SMITH
/// Constraints: Minimum length = 0, Maximum length = 36
/// Time the remark was last updated in the originating system in ISO 8601 UTC format with millisecond precision.
/// Example: /// Example: 2024-01-01T16:00:00.123Z
/// Constraints: No constraints specified.
func (rcv *AircraftStatusRemark_Ingest) LastUpdatedAt() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(20))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Time the remark was last updated in the originating system in ISO 8601 UTC format with millisecond precision.
/// Example: /// Example: 2024-01-01T16:00:00.123Z
/// Constraints: No constraints specified.
/// Time the row was created in the database, auto-populated by the system.
/// Example: /// Example: 2022-01-01T16:00:00.123Z
/// Constraints: No constraints specified.
func (rcv *AircraftStatusRemark_Ingest) CreatedAt() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(22))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Time the row was created in the database, auto-populated by the system.
/// Example: /// Example: 2022-01-01T16:00:00.123Z
/// Constraints: No constraints specified.
/// Application user who created the row in the database, auto-populated by the system.
/// Example: /// Example: some.user
/// Constraints: Minimum length = 1, Maximum length = 64
func (rcv *AircraftStatusRemark_Ingest) CreatedBy() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(24))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Application user who created the row in the database, auto-populated by the system.
/// Example: /// Example: some.user
/// Constraints: Minimum length = 1, Maximum length = 64
/// The source data library from which this record was received. This could be a remote or tactical UDL or another data library. If null, the record should be assumed to have originated from the primary Enterprise UDL.
/// Example: /// Example: AXE
/// Constraints: Minimum length = 0, Maximum length = 64
func (rcv *AircraftStatusRemark_Ingest) SourceDl() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(26))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The source data library from which this record was received. This could be a remote or tactical UDL or another data library. If null, the record should be assumed to have originated from the primary Enterprise UDL.
/// Example: /// Example: AXE
/// Constraints: Minimum length = 0, Maximum length = 64
/// Source of the data.
/// Example: /// Example: Bluestaq
/// Constraints: Minimum length = 1, Maximum length = 64
func (rcv *AircraftStatusRemark_Ingest) Source() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(28))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Source of the data.
/// Example: /// Example: Bluestaq
/// Constraints: Minimum length = 1, Maximum length = 64
/// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
/// Example: /// Example: THIRD_PARTY_DATASOURCE
/// Constraints: Minimum length = 0, Maximum length = 64
func (rcv *AircraftStatusRemark_Ingest) Origin() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(30))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
/// Example: /// Example: THIRD_PARTY_DATASOURCE
/// Constraints: Minimum length = 0, Maximum length = 64
/// The originating source network on which this record was created, auto-populated by the system.
/// Example: /// Example: OPS1
/// Constraints: Minimum length = 1, Maximum length = 32
func (rcv *AircraftStatusRemark_Ingest) OrigNetwork() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(32))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The originating source network on which this record was created, auto-populated by the system.
/// Example: /// Example: OPS1
/// Constraints: Minimum length = 1, Maximum length = 32
/// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
/// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
/// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
/// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
/// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
/// Example: /// Example: TEST
/// Constraints: Minimum length = 1, Maximum length = 32
func (rcv *AircraftStatusRemark_Ingest) DataMode() AircraftStatusRemark_Ingest_dataMode_Enum {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(34))
	if o != 0 {
		return AircraftStatusRemark_Ingest_dataMode_Enum(rcv._tab.GetInt8(o + rcv._tab.Pos))
	}
	return 0
}

/// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
/// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
/// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
/// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
/// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
/// Example: /// Example: TEST
/// Constraints: Minimum length = 1, Maximum length = 32
func (rcv *AircraftStatusRemark_Ingest) MutateDataMode(n AircraftStatusRemark_Ingest_dataMode_Enum) bool {
	return rcv._tab.MutateInt8Slot(34, int8(n))
}

func AircraftStatusRemark_IngestStart(builder *flatbuffers.Builder) {
	builder.StartObject(16)
}
func AircraftStatusRemark_IngestAddId(builder *flatbuffers.Builder, id flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(id), 0)
}
func AircraftStatusRemark_IngestAddClassificationMarking(builder *flatbuffers.Builder, classificationMarking flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(classificationMarking), 0)
}
func AircraftStatusRemark_IngestAddIdAircraftStatus(builder *flatbuffers.Builder, idAircraftStatus flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(idAircraftStatus), 0)
}
func AircraftStatusRemark_IngestAddAltRmkId(builder *flatbuffers.Builder, altRmkId flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(3, flatbuffers.UOffsetT(altRmkId), 0)
}
func AircraftStatusRemark_IngestAddName(builder *flatbuffers.Builder, name flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(4, flatbuffers.UOffsetT(name), 0)
}
func AircraftStatusRemark_IngestAddText(builder *flatbuffers.Builder, text flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(5, flatbuffers.UOffsetT(text), 0)
}
func AircraftStatusRemark_IngestAddTimestamp(builder *flatbuffers.Builder, timestamp flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(6, flatbuffers.UOffsetT(timestamp), 0)
}
func AircraftStatusRemark_IngestAddLastUpdatedBy(builder *flatbuffers.Builder, lastUpdatedBy flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(7, flatbuffers.UOffsetT(lastUpdatedBy), 0)
}
func AircraftStatusRemark_IngestAddLastUpdatedAt(builder *flatbuffers.Builder, lastUpdatedAt flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(8, flatbuffers.UOffsetT(lastUpdatedAt), 0)
}
func AircraftStatusRemark_IngestAddCreatedAt(builder *flatbuffers.Builder, createdAt flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(9, flatbuffers.UOffsetT(createdAt), 0)
}
func AircraftStatusRemark_IngestAddCreatedBy(builder *flatbuffers.Builder, createdBy flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(10, flatbuffers.UOffsetT(createdBy), 0)
}
func AircraftStatusRemark_IngestAddSourceDl(builder *flatbuffers.Builder, sourceDl flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(11, flatbuffers.UOffsetT(sourceDl), 0)
}
func AircraftStatusRemark_IngestAddSource(builder *flatbuffers.Builder, source flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(12, flatbuffers.UOffsetT(source), 0)
}
func AircraftStatusRemark_IngestAddOrigin(builder *flatbuffers.Builder, origin flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(13, flatbuffers.UOffsetT(origin), 0)
}
func AircraftStatusRemark_IngestAddOrigNetwork(builder *flatbuffers.Builder, origNetwork flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(14, flatbuffers.UOffsetT(origNetwork), 0)
}
func AircraftStatusRemark_IngestAddDataMode(builder *flatbuffers.Builder, dataMode AircraftStatusRemark_Ingest_dataMode_Enum) {
	builder.PrependInt8Slot(15, int8(dataMode), 0)
}
func AircraftStatusRemark_IngestEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
