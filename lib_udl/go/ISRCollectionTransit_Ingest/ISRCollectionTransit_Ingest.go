// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package ISRCollectionTransit_Ingest

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

/// /// Object for data dissemination.
type ISRCollectionTransit_Ingest struct {
	_tab flatbuffers.Table
}

const ISRCollectionTransit_IngestIdentifier = "ISRC"

func GetRootAsISRCollectionTransit_Ingest(buf []byte, offset flatbuffers.UOffsetT) *ISRCollectionTransit_Ingest {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &ISRCollectionTransit_Ingest{}
	x.Init(buf, n+offset)
	return x
}

func FinishISRCollectionTransit_IngestBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	identifierBytes := []byte(ISRCollectionTransit_IngestIdentifier)
	builder.FinishWithFileIdentifier(offset, identifierBytes)
}

func ISRCollectionTransit_IngestBufferHasIdentifier(buf []byte) bool {
	return flatbuffers.BufferHasIdentifier(buf, ISRCollectionTransit_IngestIdentifier)
}

func GetSizePrefixedRootAsISRCollectionTransit_Ingest(buf []byte, offset flatbuffers.UOffsetT) *ISRCollectionTransit_Ingest {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &ISRCollectionTransit_Ingest{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedISRCollectionTransit_IngestBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	identifierBytes := []byte(ISRCollectionTransit_IngestIdentifier)
	builder.FinishSizePrefixedWithFileIdentifier(offset, identifierBytes)
}

func SizePrefixedISRCollectionTransit_IngestBufferHasIdentifier(buf []byte) bool {
	return flatbuffers.SizePrefixedBufferHasIdentifier(buf, ISRCollectionTransit_IngestIdentifier)
}

func (rcv *ISRCollectionTransit_Ingest) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *ISRCollectionTransit_Ingest) Table() flatbuffers.Table {
	return rcv._tab
}

/// Transit Unique Identifier.
/// Example: /// Example: ISRCOLLECTIONTRANSIT-ID
/// Constraints: Minimum length = 0, Maximum length = 36
func (rcv *ISRCollectionTransit_Ingest) Id() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Transit Unique Identifier.
/// Example: /// Example: ISRCOLLECTIONTRANSIT-ID
/// Constraints: Minimum length = 0, Maximum length = 36
/// Military Base to transmit the dissemination of this data.
/// Example: /// Example: ENVOYS
/// Constraints: Minimum length = 0, Maximum length = 32
func (rcv *ISRCollectionTransit_Ingest) Base() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Military Base to transmit the dissemination of this data.
/// Example: /// Example: ENVOYS
/// Constraints: Minimum length = 0, Maximum length = 32
/// Length of mission in milliseconds.
/// Example: /// Example: 200.23
/// Constraints: No constraints specified.
func (rcv *ISRCollectionTransit_Ingest) Duration() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Length of mission in milliseconds.
/// Example: /// Example: 200.23
/// Constraints: No constraints specified.
func (rcv *ISRCollectionTransit_Ingest) MutateDuration(n float64) bool {
	return rcv._tab.MutateFloat64Slot(8, n)
}

func ISRCollectionTransit_IngestStart(builder *flatbuffers.Builder) {
	builder.StartObject(3)
}
func ISRCollectionTransit_IngestAddId(builder *flatbuffers.Builder, id flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(id), 0)
}
func ISRCollectionTransit_IngestAddBase(builder *flatbuffers.Builder, base flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(base), 0)
}
func ISRCollectionTransit_IngestAddDuration(builder *flatbuffers.Builder, duration float64) {
	builder.PrependFloat64Slot(2, duration, 0.0)
}
func ISRCollectionTransit_IngestEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
