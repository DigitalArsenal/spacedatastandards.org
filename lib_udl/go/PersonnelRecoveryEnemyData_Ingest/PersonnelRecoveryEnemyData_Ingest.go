// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package PersonnelRecoveryEnemyData_Ingest

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

/// /// Information detailing knowledge of enemies in the area.
type PersonnelRecoveryEnemyData_Ingest struct {
	_tab flatbuffers.Table
}

const PersonnelRecoveryEnemyData_IngestIdentifier = "PERS"

func GetRootAsPersonnelRecoveryEnemyData_Ingest(buf []byte, offset flatbuffers.UOffsetT) *PersonnelRecoveryEnemyData_Ingest {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &PersonnelRecoveryEnemyData_Ingest{}
	x.Init(buf, n+offset)
	return x
}

func FinishPersonnelRecoveryEnemyData_IngestBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	identifierBytes := []byte(PersonnelRecoveryEnemyData_IngestIdentifier)
	builder.FinishWithFileIdentifier(offset, identifierBytes)
}

func PersonnelRecoveryEnemyData_IngestBufferHasIdentifier(buf []byte) bool {
	return flatbuffers.BufferHasIdentifier(buf, PersonnelRecoveryEnemyData_IngestIdentifier)
}

func GetSizePrefixedRootAsPersonnelRecoveryEnemyData_Ingest(buf []byte, offset flatbuffers.UOffsetT) *PersonnelRecoveryEnemyData_Ingest {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &PersonnelRecoveryEnemyData_Ingest{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedPersonnelRecoveryEnemyData_IngestBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	identifierBytes := []byte(PersonnelRecoveryEnemyData_IngestIdentifier)
	builder.FinishSizePrefixedWithFileIdentifier(offset, identifierBytes)
}

func SizePrefixedPersonnelRecoveryEnemyData_IngestBufferHasIdentifier(buf []byte) bool {
	return flatbuffers.SizePrefixedBufferHasIdentifier(buf, PersonnelRecoveryEnemyData_IngestIdentifier)
}

func (rcv *PersonnelRecoveryEnemyData_Ingest) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *PersonnelRecoveryEnemyData_Ingest) Table() flatbuffers.Table {
	return rcv._tab
}

/// Directions to known enemies in the operation area (NORTH, NORTHEAST, EAST, SOUTHEAST, SOUTH, SOUTHWEST, WEST, NORTHWEST, SURROUNDED).
/// Example: /// Example: NORTHWEST
/// Constraints: Minimum length = 0, Maximum length = 32
func (rcv *PersonnelRecoveryEnemyData_Ingest) DirToEnemy() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Directions to known enemies in the operation area (NORTH, NORTHEAST, EAST, SOUTHEAST, SOUTH, SOUTHWEST, WEST, NORTHWEST, SURROUNDED).
/// Example: /// Example: NORTHWEST
/// Constraints: Minimum length = 0, Maximum length = 32
/// The type of hostile fire received (SMALL ARMS, MORTAR, ARTILLERY, ROCKETS).
/// Example: /// Example: SMALL ARMS
/// Constraints: Minimum length = 0, Maximum length = 32
func (rcv *PersonnelRecoveryEnemyData_Ingest) HostileFireType() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The type of hostile fire received (SMALL ARMS, MORTAR, ARTILLERY, ROCKETS).
/// Example: /// Example: SMALL ARMS
/// Constraints: Minimum length = 0, Maximum length = 32
/// Comments provided by friendlies about the evac zone.
/// Example: /// Example: Comments from friendlies.
/// Constraints: Minimum length = 0, Maximum length = 128
func (rcv *PersonnelRecoveryEnemyData_Ingest) FriendliesRemarks() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Comments provided by friendlies about the evac zone.
/// Example: /// Example: Comments from friendlies.
/// Constraints: Minimum length = 0, Maximum length = 128
/// Hot Landing Zone remarks.
/// Example: /// Example: Hot Landing Zone remarks.
/// Constraints: Minimum length = 0, Maximum length = 128
func (rcv *PersonnelRecoveryEnemyData_Ingest) HlzRemarks() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Hot Landing Zone remarks.
/// Example: /// Example: Hot Landing Zone remarks.
/// Constraints: Minimum length = 0, Maximum length = 128
func PersonnelRecoveryEnemyData_IngestStart(builder *flatbuffers.Builder) {
	builder.StartObject(4)
}
func PersonnelRecoveryEnemyData_IngestAddDirToEnemy(builder *flatbuffers.Builder, dirToEnemy flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(dirToEnemy), 0)
}
func PersonnelRecoveryEnemyData_IngestAddHostileFireType(builder *flatbuffers.Builder, hostileFireType flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(hostileFireType), 0)
}
func PersonnelRecoveryEnemyData_IngestAddFriendliesRemarks(builder *flatbuffers.Builder, friendliesRemarks flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(friendliesRemarks), 0)
}
func PersonnelRecoveryEnemyData_IngestAddHlzRemarks(builder *flatbuffers.Builder, hlzRemarks flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(3, flatbuffers.UOffsetT(hlzRemarks), 0)
}
func PersonnelRecoveryEnemyData_IngestEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
