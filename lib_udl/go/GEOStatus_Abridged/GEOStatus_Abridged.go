// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package GEOStatus_Abridged

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

/// /// Information for the specified on-orbit GEO spacecraft, including status, expected longitude limits, and drift rates.
type GEOStatus_Abridged struct {
	_tab flatbuffers.Table
}

const GEOStatus_AbridgedIdentifier = "GEOS"

func GetRootAsGEOStatus_Abridged(buf []byte, offset flatbuffers.UOffsetT) *GEOStatus_Abridged {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &GEOStatus_Abridged{}
	x.Init(buf, n+offset)
	return x
}

func FinishGEOStatus_AbridgedBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	identifierBytes := []byte(GEOStatus_AbridgedIdentifier)
	builder.FinishWithFileIdentifier(offset, identifierBytes)
}

func GEOStatus_AbridgedBufferHasIdentifier(buf []byte) bool {
	return flatbuffers.BufferHasIdentifier(buf, GEOStatus_AbridgedIdentifier)
}

func GetSizePrefixedRootAsGEOStatus_Abridged(buf []byte, offset flatbuffers.UOffsetT) *GEOStatus_Abridged {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &GEOStatus_Abridged{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedGEOStatus_AbridgedBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	identifierBytes := []byte(GEOStatus_AbridgedIdentifier)
	builder.FinishSizePrefixedWithFileIdentifier(offset, identifierBytes)
}

func SizePrefixedGEOStatus_AbridgedBufferHasIdentifier(buf []byte) bool {
	return flatbuffers.SizePrefixedBufferHasIdentifier(buf, GEOStatus_AbridgedIdentifier)
}

func (rcv *GEOStatus_Abridged) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *GEOStatus_Abridged) Table() flatbuffers.Table {
	return rcv._tab
}

/// Unique identifier of the record, auto-generated by the system.
/// Example: /// Example: GEOSTATUS-ID
/// Constraints: Minimum length = 1, Maximum length = 36
func (rcv *GEOStatus_Abridged) Id() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Unique identifier of the record, auto-generated by the system.
/// Example: /// Example: GEOSTATUS-ID
/// Constraints: Minimum length = 1, Maximum length = 36
/// Classification marking of the data in IC/CAPCO Portion-marked format.
/// Example: /// Example: U
/// Constraints: Minimum length = 1, Maximum length = 128
func (rcv *GEOStatus_Abridged) ClassificationMarking() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Classification marking of the data in IC/CAPCO Portion-marked format.
/// Example: /// Example: U
/// Constraints: Minimum length = 1, Maximum length = 128
/// Unique identifier of the object on-orbit object.
/// Example: /// Example: REF-ONORBIT-ID
/// Constraints: Minimum length = 0, Maximum length = 36
func (rcv *GEOStatus_Abridged) IdOnOrbit() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Unique identifier of the object on-orbit object.
/// Example: /// Example: REF-ONORBIT-ID
/// Constraints: Minimum length = 0, Maximum length = 36
/// Optional identifier provided to indicate the target onorbit. This may be an internal identifier and not necessarily map to a valid satellite number.
/// Example: /// Example: ORIGOBJECT-ID
/// Constraints: Minimum length = 0, Maximum length = 36
func (rcv *GEOStatus_Abridged) OrigObjectId() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Optional identifier provided to indicate the target onorbit. This may be an internal identifier and not necessarily map to a valid satellite number.
/// Example: /// Example: ORIGOBJECT-ID
/// Constraints: Minimum length = 0, Maximum length = 36
/// Sine of inclination times the sine of right ascension.
/// Example: /// Example: 1.1
/// Constraints: No constraints specified.
func (rcv *GEOStatus_Abridged) Ss() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Sine of inclination times the sine of right ascension.
/// Example: /// Example: 1.1
/// Constraints: No constraints specified.
func (rcv *GEOStatus_Abridged) MutateSs(n float64) bool {
	return rcv._tab.MutateFloat64Slot(12, n)
}

/// Sine of inclination times the cosine of right ascension.
/// Example: /// Example: 1.1
/// Constraints: No constraints specified.
func (rcv *GEOStatus_Abridged) Sc() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Sine of inclination times the cosine of right ascension.
/// Example: /// Example: 1.1
/// Constraints: No constraints specified.
func (rcv *GEOStatus_Abridged) MutateSc(n float64) bool {
	return rcv._tab.MutateFloat64Slot(14, n)
}

/// Objects displacement from geostationary orbit in deg^2/day^2.
/// Example: /// Example: 1.1
/// Constraints: No constraints specified.
func (rcv *GEOStatus_Abridged) RelativeEnergy() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Objects displacement from geostationary orbit in deg^2/day^2.
/// Example: /// Example: 1.1
/// Constraints: No constraints specified.
func (rcv *GEOStatus_Abridged) MutateRelativeEnergy(n float64) bool {
	return rcv._tab.MutateFloat64Slot(16, n)
}

/// Corrective or overriding long term trend for longitudinal change in degrees/day.
/// Example: /// Example: 1.1
/// Constraints: No constraints specified.
func (rcv *GEOStatus_Abridged) LongitudeRate() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(18))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Corrective or overriding long term trend for longitudinal change in degrees/day.
/// Example: /// Example: 1.1
/// Constraints: No constraints specified.
func (rcv *GEOStatus_Abridged) MutateLongitudeRate(n float64) bool {
	return rcv._tab.MutateFloat64Slot(18, n)
}

/// Minimum longitude for this object.  WGS-84 longitude of the spacecraft position, in degrees. 0 to 360 degrees.
/// Example: /// Example: 180.1
/// Constraints: No constraints specified.
func (rcv *GEOStatus_Abridged) LongitudeMin() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(20))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Minimum longitude for this object.  WGS-84 longitude of the spacecraft position, in degrees. 0 to 360 degrees.
/// Example: /// Example: 180.1
/// Constraints: No constraints specified.
func (rcv *GEOStatus_Abridged) MutateLongitudeMin(n float64) bool {
	return rcv._tab.MutateFloat64Slot(20, n)
}

/// Maximum longitude for this object. WGS-84 longitude of the spacecraft position, in degrees. 0 to 360 degrees.
/// Example: /// Example: 1.01
/// Constraints: No constraints specified.
func (rcv *GEOStatus_Abridged) LongitudeMax() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(22))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Maximum longitude for this object. WGS-84 longitude of the spacecraft position, in degrees. 0 to 360 degrees.
/// Example: /// Example: 1.01
/// Constraints: No constraints specified.
func (rcv *GEOStatus_Abridged) MutateLongitudeMax(n float64) bool {
	return rcv._tab.MutateFloat64Slot(22, n)
}

/// Indicates the confidence level in the entry.  (Low, Medium, High).
/// Example: /// Example: Low
/// Constraints: Minimum length = 0, Maximum length = 8
func (rcv *GEOStatus_Abridged) ConfidenceLevel() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(24))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Indicates the confidence level in the entry.  (Low, Medium, High).
/// Example: /// Example: Low
/// Constraints: Minimum length = 0, Maximum length = 8
/// Geosynchronous plane changing status.  (Current, Never, Former, Future).
/// Example: /// Example: Current
/// Constraints: Minimum length = 0, Maximum length = 8
func (rcv *GEOStatus_Abridged) PlaneChangeStatus() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(26))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Geosynchronous plane changing status.  (Current, Never, Former, Future).
/// Example: /// Example: Current
/// Constraints: Minimum length = 0, Maximum length = 8
/// Indicates the trough (gravity well) or drift direction of a space object:
/// 255 - Influenced by 255째 longitude trough. 
/// 75 - Influenced by 75째 longitude trough. 
/// Both - Oscillating between both 255 and 75 troughs. 
/// East - Drifting eastward; large relative energy and a period less than 1436.1 minutes. 
/// West - Drifting westward; large relative energy and a period greater than 1436.2 minutes.
/// Example: /// Example: West
/// Constraints: Minimum length = 0, Maximum length = 8
func (rcv *GEOStatus_Abridged) TroughType() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(28))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Indicates the trough (gravity well) or drift direction of a space object:
/// 255 - Influenced by 255째 longitude trough. 
/// 75 - Influenced by 75째 longitude trough. 
/// Both - Oscillating between both 255 and 75 troughs. 
/// East - Drifting eastward; large relative energy and a period less than 1436.1 minutes. 
/// West - Drifting westward; large relative energy and a period greater than 1436.2 minutes.
/// Example: /// Example: West
/// Constraints: Minimum length = 0, Maximum length = 8
/// Lost space object indicator.  (True or False).
/// Example: /// Example: False
/// Constraints: No constraints specified.
func (rcv *GEOStatus_Abridged) LostFlag() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(30))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

/// Lost space object indicator.  (True or False).
/// Example: /// Example: False
/// Constraints: No constraints specified.
func (rcv *GEOStatus_Abridged) MutateLostFlag(n bool) bool {
	return rcv._tab.MutateBoolSlot(30, n)
}

/// Semi-annual correction.  (True or False).
/// Example: /// Example: False
/// Constraints: No constraints specified.
func (rcv *GEOStatus_Abridged) SemiAnnualCorrFlag() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(32))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

/// Semi-annual correction.  (True or False).
/// Example: /// Example: False
/// Constraints: No constraints specified.
func (rcv *GEOStatus_Abridged) MutateSemiAnnualCorrFlag(n bool) bool {
	return rcv._tab.MutateBoolSlot(32, n)
}

/// Space object status.  (Active, Dead, Unknown).
/// Example: /// Example: Active
/// Constraints: Minimum length = 0, Maximum length = 32
func (rcv *GEOStatus_Abridged) ObjectStatus() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(34))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Space object status.  (Active, Dead, Unknown).
/// Example: /// Example: Active
/// Constraints: Minimum length = 0, Maximum length = 32
/// Optional URI location in the document repository of the raw file parsed by the system to produce this record. To download the raw file, prepend https://udl-hostname/scs/download?id= to this value.
/// Example: /// Example: Example URI
/// Constraints: Minimum length = 0, Maximum length = 256
func (rcv *GEOStatus_Abridged) RawFileUri() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(36))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Optional URI location in the document repository of the raw file parsed by the system to produce this record. To download the raw file, prepend https://udl-hostname/scs/download?id= to this value.
/// Example: /// Example: Example URI
/// Constraints: Minimum length = 0, Maximum length = 256
/// Time the row was created in the database, auto-populated by the system.
/// Example: /// Example: 2018-01-01T16:00:00.123Z
/// Constraints: No constraints specified.
func (rcv *GEOStatus_Abridged) CreatedAt() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(38))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Time the row was created in the database, auto-populated by the system.
/// Example: /// Example: 2018-01-01T16:00:00.123Z
/// Constraints: No constraints specified.
/// Application user who created the row in the database, auto-populated by the system.
/// Example: /// Example: some.user
/// Constraints: Minimum length = 1, Maximum length = 64
func (rcv *GEOStatus_Abridged) CreatedBy() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(40))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Application user who created the row in the database, auto-populated by the system.
/// Example: /// Example: some.user
/// Constraints: Minimum length = 1, Maximum length = 64
/// Source of the data.
/// Example: /// Example: Bluestaq
/// Constraints: Minimum length = 1, Maximum length = 64
func (rcv *GEOStatus_Abridged) Source() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(42))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Source of the data.
/// Example: /// Example: Bluestaq
/// Constraints: Minimum length = 1, Maximum length = 64
/// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
/// Example: /// Example: THIRD_PARTY_DATASOURCE
/// Constraints: Minimum length = 0, Maximum length = 64
func (rcv *GEOStatus_Abridged) Origin() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(44))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
/// Example: /// Example: THIRD_PARTY_DATASOURCE
/// Constraints: Minimum length = 0, Maximum length = 64
/// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
/// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
/// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
/// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
/// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
/// Example: /// Example: TEST
/// Constraints: Minimum length = 1, Maximum length = 32
func (rcv *GEOStatus_Abridged) DataMode() GEOStatus_Abridged_dataMode_Enum {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(46))
	if o != 0 {
		return GEOStatus_Abridged_dataMode_Enum(rcv._tab.GetInt8(o + rcv._tab.Pos))
	}
	return 0
}

/// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
/// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
/// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
/// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
/// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
/// Example: /// Example: TEST
/// Constraints: Minimum length = 1, Maximum length = 32
func (rcv *GEOStatus_Abridged) MutateDataMode(n GEOStatus_Abridged_dataMode_Enum) bool {
	return rcv._tab.MutateInt8Slot(46, int8(n))
}

/// Satellite/catalog number of the target on-orbit object.
/// Example: /// Example: 21
/// Constraints: No constraints specified.
func (rcv *GEOStatus_Abridged) SatNo() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(48))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

/// Satellite/catalog number of the target on-orbit object.
/// Example: /// Example: 21
/// Constraints: No constraints specified.
func (rcv *GEOStatus_Abridged) MutateSatNo(n int32) bool {
	return rcv._tab.MutateInt32Slot(48, n)
}

/// The originating source network on which this record was created, auto-populated by the system.
/// Example: /// Example: ORIG
/// Constraints: Minimum length = 0, Maximum length = 32
func (rcv *GEOStatus_Abridged) OrigNetwork() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(50))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The originating source network on which this record was created, auto-populated by the system.
/// Example: /// Example: ORIG
/// Constraints: Minimum length = 0, Maximum length = 32
func GEOStatus_AbridgedStart(builder *flatbuffers.Builder) {
	builder.StartObject(24)
}
func GEOStatus_AbridgedAddId(builder *flatbuffers.Builder, id flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(id), 0)
}
func GEOStatus_AbridgedAddClassificationMarking(builder *flatbuffers.Builder, classificationMarking flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(classificationMarking), 0)
}
func GEOStatus_AbridgedAddIdOnOrbit(builder *flatbuffers.Builder, idOnOrbit flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(idOnOrbit), 0)
}
func GEOStatus_AbridgedAddOrigObjectId(builder *flatbuffers.Builder, origObjectId flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(3, flatbuffers.UOffsetT(origObjectId), 0)
}
func GEOStatus_AbridgedAddSs(builder *flatbuffers.Builder, ss float64) {
	builder.PrependFloat64Slot(4, ss, 0.0)
}
func GEOStatus_AbridgedAddSc(builder *flatbuffers.Builder, sc float64) {
	builder.PrependFloat64Slot(5, sc, 0.0)
}
func GEOStatus_AbridgedAddRelativeEnergy(builder *flatbuffers.Builder, relativeEnergy float64) {
	builder.PrependFloat64Slot(6, relativeEnergy, 0.0)
}
func GEOStatus_AbridgedAddLongitudeRate(builder *flatbuffers.Builder, longitudeRate float64) {
	builder.PrependFloat64Slot(7, longitudeRate, 0.0)
}
func GEOStatus_AbridgedAddLongitudeMin(builder *flatbuffers.Builder, longitudeMin float64) {
	builder.PrependFloat64Slot(8, longitudeMin, 0.0)
}
func GEOStatus_AbridgedAddLongitudeMax(builder *flatbuffers.Builder, longitudeMax float64) {
	builder.PrependFloat64Slot(9, longitudeMax, 0.0)
}
func GEOStatus_AbridgedAddConfidenceLevel(builder *flatbuffers.Builder, confidenceLevel flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(10, flatbuffers.UOffsetT(confidenceLevel), 0)
}
func GEOStatus_AbridgedAddPlaneChangeStatus(builder *flatbuffers.Builder, planeChangeStatus flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(11, flatbuffers.UOffsetT(planeChangeStatus), 0)
}
func GEOStatus_AbridgedAddTroughType(builder *flatbuffers.Builder, troughType flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(12, flatbuffers.UOffsetT(troughType), 0)
}
func GEOStatus_AbridgedAddLostFlag(builder *flatbuffers.Builder, lostFlag bool) {
	builder.PrependBoolSlot(13, lostFlag, false)
}
func GEOStatus_AbridgedAddSemiAnnualCorrFlag(builder *flatbuffers.Builder, semiAnnualCorrFlag bool) {
	builder.PrependBoolSlot(14, semiAnnualCorrFlag, false)
}
func GEOStatus_AbridgedAddObjectStatus(builder *flatbuffers.Builder, objectStatus flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(15, flatbuffers.UOffsetT(objectStatus), 0)
}
func GEOStatus_AbridgedAddRawFileUri(builder *flatbuffers.Builder, rawFileUri flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(16, flatbuffers.UOffsetT(rawFileUri), 0)
}
func GEOStatus_AbridgedAddCreatedAt(builder *flatbuffers.Builder, createdAt flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(17, flatbuffers.UOffsetT(createdAt), 0)
}
func GEOStatus_AbridgedAddCreatedBy(builder *flatbuffers.Builder, createdBy flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(18, flatbuffers.UOffsetT(createdBy), 0)
}
func GEOStatus_AbridgedAddSource(builder *flatbuffers.Builder, source flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(19, flatbuffers.UOffsetT(source), 0)
}
func GEOStatus_AbridgedAddOrigin(builder *flatbuffers.Builder, origin flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(20, flatbuffers.UOffsetT(origin), 0)
}
func GEOStatus_AbridgedAddDataMode(builder *flatbuffers.Builder, dataMode GEOStatus_Abridged_dataMode_Enum) {
	builder.PrependInt8Slot(21, int8(dataMode), 0)
}
func GEOStatus_AbridgedAddSatNo(builder *flatbuffers.Builder, satNo int32) {
	builder.PrependInt32Slot(22, satNo, 0)
}
func GEOStatus_AbridgedAddOrigNetwork(builder *flatbuffers.Builder, origNetwork flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(23, flatbuffers.UOffsetT(origNetwork), 0)
}
func GEOStatus_AbridgedEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
