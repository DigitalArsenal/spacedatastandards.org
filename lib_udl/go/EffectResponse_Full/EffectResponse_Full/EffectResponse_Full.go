// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package EffectResponse_Full

import (
	flatbuffers "github.com/google/flatbuffers/go"

	EffectResponse_Full_dataMode_Enum "EffectResponse_Full_dataMode_Enum"
)

/// A response for various effects on a target.
type EffectResponse_Full struct {
	_tab flatbuffers.Table
}

func GetRootAsEffectResponse_Full(buf []byte, offset flatbuffers.UOffsetT) *EffectResponse_Full {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &EffectResponse_Full{}
	x.Init(buf, n+offset)
	return x
}

func FinishEffectResponse_FullBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.Finish(offset)
}

func GetSizePrefixedRootAsEffectResponse_Full(buf []byte, offset flatbuffers.UOffsetT) *EffectResponse_Full {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &EffectResponse_Full{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedEffectResponse_FullBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.FinishSizePrefixed(offset)
}

func (rcv *EffectResponse_Full) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *EffectResponse_Full) Table() flatbuffers.Table {
	return rcv._tab
}

/// Unique identifier of the record, auto-generated by the system.
/// Example: EFFECTRESPONSE-ID
/// Constraints: Minimum length = 1, Maximum length = 36
func (rcv *EffectResponse_Full) Id() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Unique identifier of the record, auto-generated by the system.
/// Example: EFFECTRESPONSE-ID
/// Constraints: Minimum length = 1, Maximum length = 36
/// Classification marking of the data in IC/CAPCO Portion-marked format.
/// Example: U
/// Constraints: Minimum length = 1, Maximum length = 128
func (rcv *EffectResponse_Full) ClassificationMarking() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Classification marking of the data in IC/CAPCO Portion-marked format.
/// Example: U
/// Constraints: Minimum length = 1, Maximum length = 128
/// Unique identifier of the EffectRequest associated with this response.
/// Example: EFFECTREQUEST-ID
/// Constraints: Minimum length = 0, Maximum length = 36
func (rcv *EffectResponse_Full) IdEffectRequest() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Unique identifier of the EffectRequest associated with this response.
/// Example: EFFECTREQUEST-ID
/// Constraints: Minimum length = 0, Maximum length = 36
/// The external system identifier of the associated effect request. A human readable unique id.
/// Example: EXTERNALREQUEST-ID
/// Constraints: Minimum length = 0, Maximum length = 64
func (rcv *EffectResponse_Full) ExternalRequestId() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The external system identifier of the associated effect request. A human readable unique id.
/// Example: EXTERNALREQUEST-ID
/// Constraints: Minimum length = 0, Maximum length = 64
/// The type of response in this record (e.g. COA, SCORECARD, etc.).
/// Example: COA
/// Constraints: Minimum length = 1, Maximum length = 24
func (rcv *EffectResponse_Full) Type() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The type of response in this record (e.g. COA, SCORECARD, etc.).
/// Example: COA
/// Constraints: Minimum length = 1, Maximum length = 24
/// The source type of the asset/actor identifier (AIRCRAFT, LANDCRAFT, SEACRAFT, TRACK).
/// Example: AIRCRAFT
/// Constraints: Minimum length = 0, Maximum length = 64
func (rcv *EffectResponse_Full) ActorSrcType() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The source type of the asset/actor identifier (AIRCRAFT, LANDCRAFT, SEACRAFT, TRACK).
/// Example: AIRCRAFT
/// Constraints: Minimum length = 0, Maximum length = 64
/// The record ID, depending on the type identified in actorSrcType, of the requested asset.
/// Example: RC-ID
/// Constraints: Minimum length = 0, Maximum length = 64
func (rcv *EffectResponse_Full) ActorSrcId() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The record ID, depending on the type identified in actorSrcType, of the requested asset.
/// Example: RC-ID
/// Constraints: Minimum length = 0, Maximum length = 64
/// The type of munition being fired.
/// Example: Dummy
/// Constraints: Minimum length = 0, Maximum length = 1024
func (rcv *EffectResponse_Full) MunitionType() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(18))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The type of munition being fired.
/// Example: Dummy
/// Constraints: Minimum length = 0, Maximum length = 1024
/// Unique identifier of the munition.
/// Example: MUNITION-ID
/// Constraints: Minimum length = 0, Maximum length = 64
func (rcv *EffectResponse_Full) MunitionId() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(20))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Unique identifier of the munition.
/// Example: MUNITION-ID
/// Constraints: Minimum length = 0, Maximum length = 64
/// The number of shots required to destroy target.
/// Example: 10
/// Constraints: No constraints specified.
func (rcv *EffectResponse_Full) ShotsRequired() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(22))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

/// The number of shots required to destroy target.
/// Example: 10
/// Constraints: No constraints specified.
func (rcv *EffectResponse_Full) MutateShotsRequired(n int32) bool {
	return rcv._tab.MutateInt32Slot(22, n)
}

/// The probability of kill (0-1) of the target being destroyed.
/// Example: 0.7
/// Constraints: No constraints specified.
func (rcv *EffectResponse_Full) ProbabilityOfKill() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(24))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// The probability of kill (0-1) of the target being destroyed.
/// Example: 0.7
/// Constraints: No constraints specified.
func (rcv *EffectResponse_Full) MutateProbabilityOfKill(n float64) bool {
	return rcv._tab.MutateFloat64Slot(24, n)
}

/// The collateral damage estimate (CDE) of the munition being fired.
/// Example: 0.5
/// Constraints: No constraints specified.
func (rcv *EffectResponse_Full) CollateralDamageEst() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(26))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// The collateral damage estimate (CDE) of the munition being fired.
/// Example: 0.5
/// Constraints: No constraints specified.
func (rcv *EffectResponse_Full) MutateCollateralDamageEst(n float64) bool {
	return rcv._tab.MutateFloat64Slot(26, n)
}

/// List of actions associated with this effect response.
/// Example: No example provided.
/// Constraints: No constraints specified.
func (rcv *EffectResponse_Full) ActionsList(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(28))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *EffectResponse_Full) ActionsListLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(28))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

/// List of actions associated with this effect response.
/// Example: No example provided.
/// Constraints: No constraints specified.
/// List of external actions to be executed as part of this task.
/// Example: ['ACTION1', 'ACTION2']
/// Constraints: No constraints specified.
func (rcv *EffectResponse_Full) ExternalActions(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(30))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *EffectResponse_Full) ExternalActionsLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(30))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

/// List of external actions to be executed as part of this task.
/// Example: ['ACTION1', 'ACTION2']
/// Constraints: No constraints specified.
/// List of COA metrics associated with this effect response.
/// Example: No example provided.
/// Constraints: No constraints specified.
func (rcv *EffectResponse_Full) CoaMetrics(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(32))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *EffectResponse_Full) CoaMetricsLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(32))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

/// List of COA metrics associated with this effect response.
/// Example: No example provided.
/// Constraints: No constraints specified.
/// The time to overhead for the red force to be over their target, in ISO8601 UTC format.
/// Example: 2021-01-01T00:00:00.123456Z
/// Constraints: No constraints specified.
func (rcv *EffectResponse_Full) RedTimeToOverhead() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(34))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The time to overhead for the red force to be over their target, in ISO8601 UTC format.
/// Example: 2021-01-01T00:00:00.123456Z
/// Constraints: No constraints specified.
/// The deadline time to accept this COA before it's no longer valid, in ISO8601 UTC format.
/// Example: 2021-01-01T00:00:00.123456Z
/// Constraints: No constraints specified.
func (rcv *EffectResponse_Full) DecisionDeadline() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(36))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The deadline time to accept this COA before it's no longer valid, in ISO8601 UTC format.
/// Example: 2021-01-01T00:00:00.123456Z
/// Constraints: No constraints specified.
/// The source type of the targetId identifier (POI, SITE, TRACK).
/// Example: POI
/// Constraints: Minimum length = 0, Maximum length = 64
func (rcv *EffectResponse_Full) RedTargetSrcType() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(38))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The source type of the targetId identifier (POI, SITE, TRACK).
/// Example: POI
/// Constraints: Minimum length = 0, Maximum length = 64
/// The record ID, depending on the type identified in redTargetSrcType, of the red force target.  If the redTargetSrcType is POI or TRACK, then this identifier corresponds to either poi.poiid or track.trkId from their respective schemas.
/// Example: REDTARGETSRC-ID
/// Constraints: Minimum length = 0, Maximum length = 64
func (rcv *EffectResponse_Full) RedTargetSrcId() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(40))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The record ID, depending on the type identified in redTargetSrcType, of the red force target.  If the redTargetSrcType is POI or TRACK, then this identifier corresponds to either poi.poiid or track.trkId from their respective schemas.
/// Example: REDTARGETSRC-ID
/// Constraints: Minimum length = 0, Maximum length = 64
/// Time the row was created in the database, auto-populated by the system.
/// Example: 2021-01-01T16:00:00.123Z
/// Constraints: No constraints specified.
func (rcv *EffectResponse_Full) CreatedAt() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(42))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Time the row was created in the database, auto-populated by the system.
/// Example: 2021-01-01T16:00:00.123Z
/// Constraints: No constraints specified.
/// Application user who created the row in the database, auto-populated by the system.
/// Example: some.user
/// Constraints: Minimum length = 1, Maximum length = 64
func (rcv *EffectResponse_Full) CreatedBy() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(44))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Application user who created the row in the database, auto-populated by the system.
/// Example: some.user
/// Constraints: Minimum length = 1, Maximum length = 64
/// Source of the data.
/// Example: Bluestaq
/// Constraints: Minimum length = 1, Maximum length = 64
func (rcv *EffectResponse_Full) Source() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(46))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Source of the data.
/// Example: Bluestaq
/// Constraints: Minimum length = 1, Maximum length = 64
/// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
/// Example: THIRD_PARTY_DATASOURCE
/// Constraints: Minimum length = 0, Maximum length = 64
func (rcv *EffectResponse_Full) Origin() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(48))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
/// Example: THIRD_PARTY_DATASOURCE
/// Constraints: Minimum length = 0, Maximum length = 64
/// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data: EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data. REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis. SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets. TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics. 
/// Example: TEST
/// Constraints: Minimum length = 1, Maximum length = 32
func (rcv *EffectResponse_Full) DataMode() EffectResponse_Full_dataMode_Enum.EffectResponse_Full_dataMode_Enum {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(50))
	if o != 0 {
		return EffectResponse_Full_dataMode_Enum.EffectResponse_Full_dataMode_Enum(rcv._tab.GetInt8(o + rcv._tab.Pos))
	}
	return 0
}

/// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data: EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data. REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis. SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets. TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics. 
/// Example: TEST
/// Constraints: Minimum length = 1, Maximum length = 32
func (rcv *EffectResponse_Full) MutateDataMode(n EffectResponse_Full_dataMode_Enum.EffectResponse_Full_dataMode_Enum) bool {
	return rcv._tab.MutateInt8Slot(50, int8(n))
}

/// The originating source network on which this record was created, auto-populated by the system.
/// Example: ORIG
/// Constraints: Minimum length = 1, Maximum length = 32
func (rcv *EffectResponse_Full) OrigNetwork() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(52))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The originating source network on which this record was created, auto-populated by the system.
/// Example: ORIG
/// Constraints: Minimum length = 1, Maximum length = 32
func EffectResponse_FullStart(builder *flatbuffers.Builder) {
	builder.StartObject(25)
}
func EffectResponse_FullAddId(builder *flatbuffers.Builder, id flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(id), 0)
}
func EffectResponse_FullAddClassificationMarking(builder *flatbuffers.Builder, classificationMarking flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(classificationMarking), 0)
}
func EffectResponse_FullAddIdEffectRequest(builder *flatbuffers.Builder, idEffectRequest flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(idEffectRequest), 0)
}
func EffectResponse_FullAddExternalRequestId(builder *flatbuffers.Builder, externalRequestId flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(3, flatbuffers.UOffsetT(externalRequestId), 0)
}
func EffectResponse_FullAddType(builder *flatbuffers.Builder, type_ flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(4, flatbuffers.UOffsetT(type_), 0)
}
func EffectResponse_FullAddActorSrcType(builder *flatbuffers.Builder, actorSrcType flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(5, flatbuffers.UOffsetT(actorSrcType), 0)
}
func EffectResponse_FullAddActorSrcId(builder *flatbuffers.Builder, actorSrcId flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(6, flatbuffers.UOffsetT(actorSrcId), 0)
}
func EffectResponse_FullAddMunitionType(builder *flatbuffers.Builder, munitionType flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(7, flatbuffers.UOffsetT(munitionType), 0)
}
func EffectResponse_FullAddMunitionId(builder *flatbuffers.Builder, munitionId flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(8, flatbuffers.UOffsetT(munitionId), 0)
}
func EffectResponse_FullAddShotsRequired(builder *flatbuffers.Builder, shotsRequired int32) {
	builder.PrependInt32Slot(9, shotsRequired, 0)
}
func EffectResponse_FullAddProbabilityOfKill(builder *flatbuffers.Builder, probabilityOfKill float64) {
	builder.PrependFloat64Slot(10, probabilityOfKill, 0.0)
}
func EffectResponse_FullAddCollateralDamageEst(builder *flatbuffers.Builder, collateralDamageEst float64) {
	builder.PrependFloat64Slot(11, collateralDamageEst, 0.0)
}
func EffectResponse_FullAddActionsList(builder *flatbuffers.Builder, actionsList flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(12, flatbuffers.UOffsetT(actionsList), 0)
}
func EffectResponse_FullStartActionsListVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func EffectResponse_FullAddExternalActions(builder *flatbuffers.Builder, externalActions flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(13, flatbuffers.UOffsetT(externalActions), 0)
}
func EffectResponse_FullStartExternalActionsVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func EffectResponse_FullAddCoaMetrics(builder *flatbuffers.Builder, coaMetrics flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(14, flatbuffers.UOffsetT(coaMetrics), 0)
}
func EffectResponse_FullStartCoaMetricsVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func EffectResponse_FullAddRedTimeToOverhead(builder *flatbuffers.Builder, redTimeToOverhead flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(15, flatbuffers.UOffsetT(redTimeToOverhead), 0)
}
func EffectResponse_FullAddDecisionDeadline(builder *flatbuffers.Builder, decisionDeadline flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(16, flatbuffers.UOffsetT(decisionDeadline), 0)
}
func EffectResponse_FullAddRedTargetSrcType(builder *flatbuffers.Builder, redTargetSrcType flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(17, flatbuffers.UOffsetT(redTargetSrcType), 0)
}
func EffectResponse_FullAddRedTargetSrcId(builder *flatbuffers.Builder, redTargetSrcId flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(18, flatbuffers.UOffsetT(redTargetSrcId), 0)
}
func EffectResponse_FullAddCreatedAt(builder *flatbuffers.Builder, createdAt flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(19, flatbuffers.UOffsetT(createdAt), 0)
}
func EffectResponse_FullAddCreatedBy(builder *flatbuffers.Builder, createdBy flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(20, flatbuffers.UOffsetT(createdBy), 0)
}
func EffectResponse_FullAddSource(builder *flatbuffers.Builder, source flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(21, flatbuffers.UOffsetT(source), 0)
}
func EffectResponse_FullAddOrigin(builder *flatbuffers.Builder, origin flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(22, flatbuffers.UOffsetT(origin), 0)
}
func EffectResponse_FullAddDataMode(builder *flatbuffers.Builder, dataMode EffectResponse_Full_dataMode_Enum.EffectResponse_Full_dataMode_Enum) {
	builder.PrependInt8Slot(23, int8(dataMode), 0)
}
func EffectResponse_FullAddOrigNetwork(builder *flatbuffers.Builder, origNetwork flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(24, flatbuffers.UOffsetT(origNetwork), 0)
}
func EffectResponse_FullEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
