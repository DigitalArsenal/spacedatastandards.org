// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package RFBand_Ingest

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

/// /// Details on a particular Radio Frequency (RF) band, also known as a carrier, which may be in use by any type of Entity for communications or operations.
type RFBand_Ingest struct {
	_tab flatbuffers.Table
}

const RFBand_IngestIdentifier = "RFBA"

func GetRootAsRFBand_Ingest(buf []byte, offset flatbuffers.UOffsetT) *RFBand_Ingest {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &RFBand_Ingest{}
	x.Init(buf, n+offset)
	return x
}

func FinishRFBand_IngestBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	identifierBytes := []byte(RFBand_IngestIdentifier)
	builder.FinishWithFileIdentifier(offset, identifierBytes)
}

func RFBand_IngestBufferHasIdentifier(buf []byte) bool {
	return flatbuffers.BufferHasIdentifier(buf, RFBand_IngestIdentifier)
}

func GetSizePrefixedRootAsRFBand_Ingest(buf []byte, offset flatbuffers.UOffsetT) *RFBand_Ingest {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &RFBand_Ingest{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedRFBand_IngestBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	identifierBytes := []byte(RFBand_IngestIdentifier)
	builder.FinishSizePrefixedWithFileIdentifier(offset, identifierBytes)
}

func SizePrefixedRFBand_IngestBufferHasIdentifier(buf []byte) bool {
	return flatbuffers.SizePrefixedBufferHasIdentifier(buf, RFBand_IngestIdentifier)
}

func (rcv *RFBand_Ingest) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *RFBand_Ingest) Table() flatbuffers.Table {
	return rcv._tab
}

/// Unique identifier of the record, auto-generated by the system.
/// Example: /// Example: RFBAND-ID
/// Constraints: Minimum length = 1, Maximum length = 36
func (rcv *RFBand_Ingest) Id() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Unique identifier of the record, auto-generated by the system.
/// Example: /// Example: RFBAND-ID
/// Constraints: Minimum length = 1, Maximum length = 36
/// Unique identifier of the parent Entity which uses this band.
/// Example: /// Example: ENTITY-ID
/// Constraints: Minimum length = 1, Maximum length = 36
func (rcv *RFBand_Ingest) IdEntity() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Unique identifier of the parent Entity which uses this band.
/// Example: /// Example: ENTITY-ID
/// Constraints: Minimum length = 1, Maximum length = 36
/// Classification marking of the data in IC/CAPCO Portion-marked format.
/// Example: /// Example: U
/// Constraints: Minimum length = 1, Maximum length = 128
func (rcv *RFBand_Ingest) ClassificationMarking() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Classification marking of the data in IC/CAPCO Portion-marked format.
/// Example: /// Example: U
/// Constraints: Minimum length = 1, Maximum length = 128
/// RF Band name.
/// Example: /// Example: BAND_NAME
/// Constraints: Minimum length = 1, Maximum length = 128
func (rcv *RFBand_Ingest) Name() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// RF Band name.
/// Example: /// Example: BAND_NAME
/// Constraints: Minimum length = 1, Maximum length = 128
/// Name of the band of this RF range (e.g. X,K,Ku,Ka,L,S,C,UHF,VHF,EHF,SHF,UNK,VLF,HF,E,Q,V,W). See RFBandType for more details and descriptions of each band name.
/// Example: /// Example: Ku
/// Constraints: Minimum length = 0, Maximum length = 5
func (rcv *RFBand_Ingest) Band() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Name of the band of this RF range (e.g. X,K,Ku,Ka,L,S,C,UHF,VHF,EHF,SHF,UNK,VLF,HF,E,Q,V,W). See RFBandType for more details and descriptions of each band name.
/// Example: /// Example: Ku
/// Constraints: Minimum length = 0, Maximum length = 5
/// RF Band mode (e.g. TX, RX).
/// Example: /// Example: TX
/// Constraints: Minimum length = 0, Maximum length = 4
func (rcv *RFBand_Ingest) Mode() RFBand_Ingest_mode_Enum {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return RFBand_Ingest_mode_Enum(rcv._tab.GetInt8(o + rcv._tab.Pos))
	}
	return 0
}

/// RF Band mode (e.g. TX, RX).
/// Example: /// Example: TX
/// Constraints: Minimum length = 0, Maximum length = 4
func (rcv *RFBand_Ingest) MutateMode(n RFBand_Ingest_mode_Enum) bool {
	return rcv._tab.MutateInt8Slot(14, int8(n))
}

/// Purpose or use of the RF Band -- COMM = communications, TTC = Telemetry/Tracking/Control, OPS = Operations, OTHER = Other).
/// Example: /// Example: TTC
/// Constraints: Minimum length = 0, Maximum length = 16
func (rcv *RFBand_Ingest) Purpose() RFBand_Ingest_purpose_Enum {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		return RFBand_Ingest_purpose_Enum(rcv._tab.GetInt8(o + rcv._tab.Pos))
	}
	return 0
}

/// Purpose or use of the RF Band -- COMM = communications, TTC = Telemetry/Tracking/Control, OPS = Operations, OTHER = Other).
/// Example: /// Example: TTC
/// Constraints: Minimum length = 0, Maximum length = 16
func (rcv *RFBand_Ingest) MutatePurpose(n RFBand_Ingest_purpose_Enum) bool {
	return rcv._tab.MutateInt8Slot(16, int8(n))
}

/// Start/minimum of transmit RF frequency range, if applicable, in Mhz.
/// Example: /// Example: 50.23
/// Constraints: No constraints specified.
func (rcv *RFBand_Ingest) FreqMin() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(18))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Start/minimum of transmit RF frequency range, if applicable, in Mhz.
/// Example: /// Example: 50.23
/// Constraints: No constraints specified.
func (rcv *RFBand_Ingest) MutateFreqMin(n float64) bool {
	return rcv._tab.MutateFloat64Slot(18, n)
}

/// End/maximum of transmit RF frequency range, if applicable, in Mhz.
/// Example: /// Example: 2000.23
/// Constraints: No constraints specified.
func (rcv *RFBand_Ingest) FreqMax() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(20))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// End/maximum of transmit RF frequency range, if applicable, in Mhz.
/// Example: /// Example: 2000.23
/// Constraints: No constraints specified.
func (rcv *RFBand_Ingest) MutateFreqMax(n float64) bool {
	return rcv._tab.MutateFloat64Slot(20, n)
}

/// Center frequency of RF frequency range, if applicable, in Mhz.
/// Example: /// Example: 1000.23
/// Constraints: No constraints specified.
func (rcv *RFBand_Ingest) CenterFreq() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(22))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Center frequency of RF frequency range, if applicable, in Mhz.
/// Example: /// Example: 1000.23
/// Constraints: No constraints specified.
func (rcv *RFBand_Ingest) MutateCenterFreq(n float64) bool {
	return rcv._tab.MutateFloat64Slot(22, n)
}

/// RF Range maximum gain, in dBi.
/// Example: /// Example: 120.23
/// Constraints: No constraints specified.
func (rcv *RFBand_Ingest) PeakGain() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(24))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// RF Range maximum gain, in dBi.
/// Example: /// Example: 120.23
/// Constraints: No constraints specified.
func (rcv *RFBand_Ingest) MutatePeakGain(n float64) bool {
	return rcv._tab.MutateFloat64Slot(24, n)
}

/// RF Range edge gain, in dBi.
/// Example: /// Example: 100.23
/// Constraints: No constraints specified.
func (rcv *RFBand_Ingest) EdgeGain() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(26))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// RF Range edge gain, in dBi.
/// Example: /// Example: 100.23
/// Constraints: No constraints specified.
func (rcv *RFBand_Ingest) MutateEdgeGain(n float64) bool {
	return rcv._tab.MutateFloat64Slot(26, n)
}

/// RF Band frequency range bandwidth in Mhz.
/// Example: /// Example: 100.23
/// Constraints: No constraints specified.
func (rcv *RFBand_Ingest) Bandwidth() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(28))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// RF Band frequency range bandwidth in Mhz.
/// Example: /// Example: 100.23
/// Constraints: No constraints specified.
func (rcv *RFBand_Ingest) MutateBandwidth(n float64) bool {
	return rcv._tab.MutateFloat64Slot(28, n)
}

/// Angle between the half-power (-3 dB) points of the main lobe of the antenna, in degrees.
/// Example: /// Example: 45.23
/// Constraints: No constraints specified.
func (rcv *RFBand_Ingest) Beamwidth() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(30))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Angle between the half-power (-3 dB) points of the main lobe of the antenna, in degrees.
/// Example: /// Example: 45.23
/// Constraints: No constraints specified.
func (rcv *RFBand_Ingest) MutateBeamwidth(n float64) bool {
	return rcv._tab.MutateFloat64Slot(30, n)
}

/// Transponder polarization e.g. H - (Horizontally Polarized) Perpendicular to Earth's surface, V - (Vertically Polarized) Parallel to Earth's surface, L - (Left Hand Circularly Polarized) Rotating left relative to the Earth's surface, R - (Right Hand Circularly Polarized) Rotating right relative to the Earth's surface.
/// Example: /// Example: H
/// Constraints: Minimum length = 0, Maximum length = 4
func (rcv *RFBand_Ingest) Polarization() RFBand_Ingest_polarization_Enum {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(32))
	if o != 0 {
		return RFBand_Ingest_polarization_Enum(rcv._tab.GetInt8(o + rcv._tab.Pos))
	}
	return 0
}

/// Transponder polarization e.g. H - (Horizontally Polarized) Perpendicular to Earth's surface, V - (Vertically Polarized) Parallel to Earth's surface, L - (Left Hand Circularly Polarized) Rotating left relative to the Earth's surface, R - (Right Hand Circularly Polarized) Rotating right relative to the Earth's surface.
/// Example: /// Example: H
/// Constraints: Minimum length = 0, Maximum length = 4
func (rcv *RFBand_Ingest) MutatePolarization(n RFBand_Ingest_polarization_Enum) bool {
	return rcv._tab.MutateInt8Slot(32, int8(n))
}

/// Effective Radiated Power (ERP) is the total power in decibel watts radiated by an actual antenna relative to a half-wave dipole rather than a theoretical isotropic antenna. A half-wave dipole has a gain of 2.15 dB compared to an isotropic antenna.  EIRP(dB) = ERP (dB)+2.15 dB or EIRP (W) = 1.64*ERP(W). Effective radiated power and effective isotropic radiated power both measure the amount of power a radio transmitter and antenna (or other source of electromagnetic waves) radiates in a specific direction: in the direction of maximum signal strength (the "main lobe") of its radiation pattern.
/// Example: /// Example: 2.23
/// Constraints: No constraints specified.
func (rcv *RFBand_Ingest) Erp() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(34))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Effective Radiated Power (ERP) is the total power in decibel watts radiated by an actual antenna relative to a half-wave dipole rather than a theoretical isotropic antenna. A half-wave dipole has a gain of 2.15 dB compared to an isotropic antenna.  EIRP(dB) = ERP (dB)+2.15 dB or EIRP (W) = 1.64*ERP(W). Effective radiated power and effective isotropic radiated power both measure the amount of power a radio transmitter and antenna (or other source of electromagnetic waves) radiates in a specific direction: in the direction of maximum signal strength (the "main lobe") of its radiation pattern.
/// Example: /// Example: 2.23
/// Constraints: No constraints specified.
func (rcv *RFBand_Ingest) MutateErp(n float64) bool {
	return rcv._tab.MutateFloat64Slot(34, n)
}

/// EIRP is defined as the RMS power input in decibel watts required to a lossless half-wave dipole antenna to give the same maximum power density far from the antenna as the actual transmitter. It is equal to the power input to the transmitter's antenna multiplied by the antenna gain relative to a half-wave dipole. Effective radiated power and effective isotropic radiated power both measure the amount of power a radio transmitter and antenna (or other source of electromagnetic waves) radiates in a specific direction: in the direction of maximum signal strength (the "main lobe") of its radiation pattern.
/// Example: /// Example: 2.23
/// Constraints: No constraints specified.
func (rcv *RFBand_Ingest) Eirp() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(36))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// EIRP is defined as the RMS power input in decibel watts required to a lossless half-wave dipole antenna to give the same maximum power density far from the antenna as the actual transmitter. It is equal to the power input to the transmitter's antenna multiplied by the antenna gain relative to a half-wave dipole. Effective radiated power and effective isotropic radiated power both measure the amount of power a radio transmitter and antenna (or other source of electromagnetic waves) radiates in a specific direction: in the direction of maximum signal strength (the "main lobe") of its radiation pattern.
/// Example: /// Example: 2.23
/// Constraints: No constraints specified.
func (rcv *RFBand_Ingest) MutateEirp(n float64) bool {
	return rcv._tab.MutateFloat64Slot(36, n)
}

/// Source of the data.
/// Example: /// Example: Bluestaq
/// Constraints: Minimum length = 1, Maximum length = 64
func (rcv *RFBand_Ingest) Source() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(38))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Source of the data.
/// Example: /// Example: Bluestaq
/// Constraints: Minimum length = 1, Maximum length = 64
/// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
/// Example: /// Example: THIRD_PARTY_DATASOURCE
/// Constraints: Minimum length = 0, Maximum length = 64
func (rcv *RFBand_Ingest) Origin() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(40))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
/// Example: /// Example: THIRD_PARTY_DATASOURCE
/// Constraints: Minimum length = 0, Maximum length = 64
/// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
/// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
/// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
/// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
/// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
/// Example: /// Example: TEST
/// Constraints: Minimum length = 1, Maximum length = 32
func (rcv *RFBand_Ingest) DataMode() RFBand_Ingest_dataMode_Enum {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(42))
	if o != 0 {
		return RFBand_Ingest_dataMode_Enum(rcv._tab.GetInt8(o + rcv._tab.Pos))
	}
	return 0
}

/// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
/// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
/// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
/// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
/// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
/// Example: /// Example: TEST
/// Constraints: Minimum length = 1, Maximum length = 32
func (rcv *RFBand_Ingest) MutateDataMode(n RFBand_Ingest_dataMode_Enum) bool {
	return rcv._tab.MutateInt8Slot(42, int8(n))
}

/// Time the row was created in the database, auto-populated by the system.
/// Example: /// Example: 2018-01-01T16:00:00.123Z
/// Constraints: No constraints specified.
func (rcv *RFBand_Ingest) CreatedAt() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(44))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Time the row was created in the database, auto-populated by the system.
/// Example: /// Example: 2018-01-01T16:00:00.123Z
/// Constraints: No constraints specified.
/// Application user who created the row in the database, auto-populated by the system.
/// Example: /// Example: some.user
/// Constraints: Minimum length = 1, Maximum length = 64
func (rcv *RFBand_Ingest) CreatedBy() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(46))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Application user who created the row in the database, auto-populated by the system.
/// Example: /// Example: some.user
/// Constraints: Minimum length = 1, Maximum length = 64
/// The originating source network on which this record was created, auto-populated by the system.
/// Example: /// Example: OPS1
/// Constraints: Minimum length = 1, Maximum length = 32
func (rcv *RFBand_Ingest) OrigNetwork() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(48))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The originating source network on which this record was created, auto-populated by the system.
/// Example: /// Example: OPS1
/// Constraints: Minimum length = 1, Maximum length = 32
func RFBand_IngestStart(builder *flatbuffers.Builder) {
	builder.StartObject(23)
}
func RFBand_IngestAddId(builder *flatbuffers.Builder, id flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(id), 0)
}
func RFBand_IngestAddIdEntity(builder *flatbuffers.Builder, idEntity flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(idEntity), 0)
}
func RFBand_IngestAddClassificationMarking(builder *flatbuffers.Builder, classificationMarking flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(classificationMarking), 0)
}
func RFBand_IngestAddName(builder *flatbuffers.Builder, name flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(3, flatbuffers.UOffsetT(name), 0)
}
func RFBand_IngestAddBand(builder *flatbuffers.Builder, band flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(4, flatbuffers.UOffsetT(band), 0)
}
func RFBand_IngestAddMode(builder *flatbuffers.Builder, mode RFBand_Ingest_mode_Enum) {
	builder.PrependInt8Slot(5, int8(mode), 0)
}
func RFBand_IngestAddPurpose(builder *flatbuffers.Builder, purpose RFBand_Ingest_purpose_Enum) {
	builder.PrependInt8Slot(6, int8(purpose), 0)
}
func RFBand_IngestAddFreqMin(builder *flatbuffers.Builder, freqMin float64) {
	builder.PrependFloat64Slot(7, freqMin, 0.0)
}
func RFBand_IngestAddFreqMax(builder *flatbuffers.Builder, freqMax float64) {
	builder.PrependFloat64Slot(8, freqMax, 0.0)
}
func RFBand_IngestAddCenterFreq(builder *flatbuffers.Builder, centerFreq float64) {
	builder.PrependFloat64Slot(9, centerFreq, 0.0)
}
func RFBand_IngestAddPeakGain(builder *flatbuffers.Builder, peakGain float64) {
	builder.PrependFloat64Slot(10, peakGain, 0.0)
}
func RFBand_IngestAddEdgeGain(builder *flatbuffers.Builder, edgeGain float64) {
	builder.PrependFloat64Slot(11, edgeGain, 0.0)
}
func RFBand_IngestAddBandwidth(builder *flatbuffers.Builder, bandwidth float64) {
	builder.PrependFloat64Slot(12, bandwidth, 0.0)
}
func RFBand_IngestAddBeamwidth(builder *flatbuffers.Builder, beamwidth float64) {
	builder.PrependFloat64Slot(13, beamwidth, 0.0)
}
func RFBand_IngestAddPolarization(builder *flatbuffers.Builder, polarization RFBand_Ingest_polarization_Enum) {
	builder.PrependInt8Slot(14, int8(polarization), 0)
}
func RFBand_IngestAddErp(builder *flatbuffers.Builder, erp float64) {
	builder.PrependFloat64Slot(15, erp, 0.0)
}
func RFBand_IngestAddEirp(builder *flatbuffers.Builder, eirp float64) {
	builder.PrependFloat64Slot(16, eirp, 0.0)
}
func RFBand_IngestAddSource(builder *flatbuffers.Builder, source flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(17, flatbuffers.UOffsetT(source), 0)
}
func RFBand_IngestAddOrigin(builder *flatbuffers.Builder, origin flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(18, flatbuffers.UOffsetT(origin), 0)
}
func RFBand_IngestAddDataMode(builder *flatbuffers.Builder, dataMode RFBand_Ingest_dataMode_Enum) {
	builder.PrependInt8Slot(19, int8(dataMode), 0)
}
func RFBand_IngestAddCreatedAt(builder *flatbuffers.Builder, createdAt flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(20, flatbuffers.UOffsetT(createdAt), 0)
}
func RFBand_IngestAddCreatedBy(builder *flatbuffers.Builder, createdBy flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(21, flatbuffers.UOffsetT(createdBy), 0)
}
func RFBand_IngestAddOrigNetwork(builder *flatbuffers.Builder, origNetwork flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(22, flatbuffers.UOffsetT(origNetwork), 0)
}
func RFBand_IngestEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
