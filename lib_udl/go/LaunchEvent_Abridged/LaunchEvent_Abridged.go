// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package LaunchEvent_Abridged

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

/// /// Information on known launch events.
type LaunchEvent_Abridged struct {
	_tab flatbuffers.Table
}

const LaunchEvent_AbridgedIdentifier = "LAUN"

func GetRootAsLaunchEvent_Abridged(buf []byte, offset flatbuffers.UOffsetT) *LaunchEvent_Abridged {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &LaunchEvent_Abridged{}
	x.Init(buf, n+offset)
	return x
}

func FinishLaunchEvent_AbridgedBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	identifierBytes := []byte(LaunchEvent_AbridgedIdentifier)
	builder.FinishWithFileIdentifier(offset, identifierBytes)
}

func LaunchEvent_AbridgedBufferHasIdentifier(buf []byte) bool {
	return flatbuffers.BufferHasIdentifier(buf, LaunchEvent_AbridgedIdentifier)
}

func GetSizePrefixedRootAsLaunchEvent_Abridged(buf []byte, offset flatbuffers.UOffsetT) *LaunchEvent_Abridged {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &LaunchEvent_Abridged{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedLaunchEvent_AbridgedBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	identifierBytes := []byte(LaunchEvent_AbridgedIdentifier)
	builder.FinishSizePrefixedWithFileIdentifier(offset, identifierBytes)
}

func SizePrefixedLaunchEvent_AbridgedBufferHasIdentifier(buf []byte) bool {
	return flatbuffers.SizePrefixedBufferHasIdentifier(buf, LaunchEvent_AbridgedIdentifier)
}

func (rcv *LaunchEvent_Abridged) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *LaunchEvent_Abridged) Table() flatbuffers.Table {
	return rcv._tab
}

/// Unique identifier of the record, auto-generated by the system.
/// Example: /// Example: LAUNCHEVENT-ID
/// Constraints: Minimum length = 1, Maximum length = 36
func (rcv *LaunchEvent_Abridged) Id() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Unique identifier of the record, auto-generated by the system.
/// Example: /// Example: LAUNCHEVENT-ID
/// Constraints: Minimum length = 1, Maximum length = 36
/// Unique identifier of the target on-orbit object, if correlated.
/// Example: /// Example: REF-ONORBIT-ID
/// Constraints: Minimum length = 0, Maximum length = 36
func (rcv *LaunchEvent_Abridged) IdOnOrbit() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Unique identifier of the target on-orbit object, if correlated.
/// Example: /// Example: REF-ONORBIT-ID
/// Constraints: Minimum length = 0, Maximum length = 36
/// Optional target-id, if missing in UDL.
/// Example: /// Example: ORIGOBJECT-ID
/// Constraints: Minimum length = 0, Maximum length = 36
func (rcv *LaunchEvent_Abridged) OrigObjectId() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Optional target-id, if missing in UDL.
/// Example: /// Example: ORIGOBJECT-ID
/// Constraints: Minimum length = 0, Maximum length = 36
/// Classification marking of the data in IC/CAPCO Portion-marked format.
/// Example: /// Example: U
/// Constraints: Minimum length = 1, Maximum length = 128
func (rcv *LaunchEvent_Abridged) ClassificationMarking() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Classification marking of the data in IC/CAPCO Portion-marked format.
/// Example: /// Example: U
/// Constraints: Minimum length = 1, Maximum length = 128
/// The sources or SCG references from which the classification of this data is derived.
/// Example: /// Example: Example source
/// Constraints: Minimum length = 0, Maximum length = 128
func (rcv *LaunchEvent_Abridged) DerivedFrom() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The sources or SCG references from which the classification of this data is derived.
/// Example: /// Example: Example source
/// Constraints: Minimum length = 0, Maximum length = 128
/// The declassification date of this data, in ISO 8601 UTC format.
/// Example: /// Example: 2021-01-01T01:02:02.123Z
/// Constraints: No constraints specified.
func (rcv *LaunchEvent_Abridged) DeclassificationDate() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The declassification date of this data, in ISO 8601 UTC format.
/// Example: /// Example: 2021-01-01T01:02:02.123Z
/// Constraints: No constraints specified.
/// Declassification string of this data.
/// Example: /// Example: Example Declassification
/// Constraints: Minimum length = 0, Maximum length = 256
func (rcv *LaunchEvent_Abridged) DeclassificationString() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Declassification string of this data.
/// Example: /// Example: Example Declassification
/// Constraints: Minimum length = 0, Maximum length = 256
/// Timestamp of the originating message in ISO8601 UTC format.
/// Example: /// Example: 2020-01-01T00:00:00.123Z
/// Constraints: No constraints specified.
func (rcv *LaunchEvent_Abridged) MsgCreateDate() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(18))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Timestamp of the originating message in ISO8601 UTC format.
/// Example: /// Example: 2020-01-01T00:00:00.123Z
/// Constraints: No constraints specified.
/// The DISOB launch Failure Code, if applicable.
/// Example: /// Example: Example failure code
/// Constraints: Minimum length = 0, Maximum length = 100
func (rcv *LaunchEvent_Abridged) LaunchFailureCode() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(20))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The DISOB launch Failure Code, if applicable.
/// Example: /// Example: Example failure code
/// Constraints: Minimum length = 0, Maximum length = 100
/// The launch date, in ISO8601 UTC format.
/// Example: /// Example: 2020-01-01T00:00:00.123Z
/// Constraints: No constraints specified.
func (rcv *LaunchEvent_Abridged) LaunchDate() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(22))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The launch date, in ISO8601 UTC format.
/// Example: /// Example: 2020-01-01T00:00:00.123Z
/// Constraints: No constraints specified.
/// The Basic Encyclopedia Number, if applicable.
/// Example: /// Example: ENC-123
/// Constraints: Minimum length = 0, Maximum length = 10
func (rcv *LaunchEvent_Abridged) BeNumber() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(24))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The Basic Encyclopedia Number, if applicable.
/// Example: /// Example: ENC-123
/// Constraints: Minimum length = 0, Maximum length = 10
/// The OSuffix, if applicable.
/// Example: /// Example: oSuffix
/// Constraints: Minimum length = 0, Maximum length = 10
func (rcv *LaunchEvent_Abridged) OSuffix() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(26))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The OSuffix, if applicable.
/// Example: /// Example: oSuffix
/// Constraints: Minimum length = 0, Maximum length = 10
/// The Launch facility name.
/// Example: /// Example: Example launch facility name
/// Constraints: Minimum length = 0, Maximum length = 100
func (rcv *LaunchEvent_Abridged) LaunchFacilityName() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(28))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The Launch facility name.
/// Example: /// Example: Example launch facility name
/// Constraints: Minimum length = 0, Maximum length = 100
/// Time the row was created in the database, auto-populated by the system.
/// Example: /// Example: 2018-01-01T16:00:00.123Z
/// Constraints: No constraints specified.
func (rcv *LaunchEvent_Abridged) CreatedAt() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(30))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Time the row was created in the database, auto-populated by the system.
/// Example: /// Example: 2018-01-01T16:00:00.123Z
/// Constraints: No constraints specified.
/// Application user who created the row in the database, auto-populated by the system.
/// Example: /// Example: some.user
/// Constraints: Minimum length = 1, Maximum length = 64
func (rcv *LaunchEvent_Abridged) CreatedBy() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(32))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Application user who created the row in the database, auto-populated by the system.
/// Example: /// Example: some.user
/// Constraints: Minimum length = 1, Maximum length = 64
/// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
/// Example: /// Example: THIRD_PARTY_DATASOURCE
/// Constraints: Minimum length = 0, Maximum length = 64
func (rcv *LaunchEvent_Abridged) Origin() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(34))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
/// Example: /// Example: THIRD_PARTY_DATASOURCE
/// Constraints: Minimum length = 0, Maximum length = 64
/// Source of the data.
/// Example: /// Example: Bluestaq
/// Constraints: Minimum length = 1, Maximum length = 64
func (rcv *LaunchEvent_Abridged) Source() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(36))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Source of the data.
/// Example: /// Example: Bluestaq
/// Constraints: Minimum length = 1, Maximum length = 64
/// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
/// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
/// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
/// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
/// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
/// Example: /// Example: TEST
/// Constraints: Minimum length = 1, Maximum length = 32
func (rcv *LaunchEvent_Abridged) DataMode() LaunchEvent_Abridged_dataMode_Enum {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(38))
	if o != 0 {
		return LaunchEvent_Abridged_dataMode_Enum(rcv._tab.GetInt8(o + rcv._tab.Pos))
	}
	return 0
}

/// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
/// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
/// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
/// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
/// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
/// Example: /// Example: TEST
/// Constraints: Minimum length = 1, Maximum length = 32
func (rcv *LaunchEvent_Abridged) MutateDataMode(n LaunchEvent_Abridged_dataMode_Enum) bool {
	return rcv._tab.MutateInt8Slot(38, int8(n))
}

/// The originating source network on which this record was created, auto-populated by the system.
/// Example: /// Example: ORIG
/// Constraints: Minimum length = 1, Maximum length = 32
func (rcv *LaunchEvent_Abridged) OrigNetwork() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(40))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The originating source network on which this record was created, auto-populated by the system.
/// Example: /// Example: ORIG
/// Constraints: Minimum length = 1, Maximum length = 32
/// Satellite/catalog number of the target on-orbit object.
/// Example: /// Example: 12
/// Constraints: No constraints specified.
func (rcv *LaunchEvent_Abridged) SatNo() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(42))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

/// Satellite/catalog number of the target on-orbit object.
/// Example: /// Example: 12
/// Constraints: No constraints specified.
func (rcv *LaunchEvent_Abridged) MutateSatNo(n int32) bool {
	return rcv._tab.MutateInt32Slot(42, n)
}

func LaunchEvent_AbridgedStart(builder *flatbuffers.Builder) {
	builder.StartObject(20)
}
func LaunchEvent_AbridgedAddId(builder *flatbuffers.Builder, id flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(id), 0)
}
func LaunchEvent_AbridgedAddIdOnOrbit(builder *flatbuffers.Builder, idOnOrbit flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(idOnOrbit), 0)
}
func LaunchEvent_AbridgedAddOrigObjectId(builder *flatbuffers.Builder, origObjectId flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(origObjectId), 0)
}
func LaunchEvent_AbridgedAddClassificationMarking(builder *flatbuffers.Builder, classificationMarking flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(3, flatbuffers.UOffsetT(classificationMarking), 0)
}
func LaunchEvent_AbridgedAddDerivedFrom(builder *flatbuffers.Builder, derivedFrom flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(4, flatbuffers.UOffsetT(derivedFrom), 0)
}
func LaunchEvent_AbridgedAddDeclassificationDate(builder *flatbuffers.Builder, declassificationDate flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(5, flatbuffers.UOffsetT(declassificationDate), 0)
}
func LaunchEvent_AbridgedAddDeclassificationString(builder *flatbuffers.Builder, declassificationString flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(6, flatbuffers.UOffsetT(declassificationString), 0)
}
func LaunchEvent_AbridgedAddMsgCreateDate(builder *flatbuffers.Builder, msgCreateDate flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(7, flatbuffers.UOffsetT(msgCreateDate), 0)
}
func LaunchEvent_AbridgedAddLaunchFailureCode(builder *flatbuffers.Builder, launchFailureCode flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(8, flatbuffers.UOffsetT(launchFailureCode), 0)
}
func LaunchEvent_AbridgedAddLaunchDate(builder *flatbuffers.Builder, launchDate flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(9, flatbuffers.UOffsetT(launchDate), 0)
}
func LaunchEvent_AbridgedAddBeNumber(builder *flatbuffers.Builder, beNumber flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(10, flatbuffers.UOffsetT(beNumber), 0)
}
func LaunchEvent_AbridgedAddOSuffix(builder *flatbuffers.Builder, oSuffix flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(11, flatbuffers.UOffsetT(oSuffix), 0)
}
func LaunchEvent_AbridgedAddLaunchFacilityName(builder *flatbuffers.Builder, launchFacilityName flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(12, flatbuffers.UOffsetT(launchFacilityName), 0)
}
func LaunchEvent_AbridgedAddCreatedAt(builder *flatbuffers.Builder, createdAt flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(13, flatbuffers.UOffsetT(createdAt), 0)
}
func LaunchEvent_AbridgedAddCreatedBy(builder *flatbuffers.Builder, createdBy flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(14, flatbuffers.UOffsetT(createdBy), 0)
}
func LaunchEvent_AbridgedAddOrigin(builder *flatbuffers.Builder, origin flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(15, flatbuffers.UOffsetT(origin), 0)
}
func LaunchEvent_AbridgedAddSource(builder *flatbuffers.Builder, source flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(16, flatbuffers.UOffsetT(source), 0)
}
func LaunchEvent_AbridgedAddDataMode(builder *flatbuffers.Builder, dataMode LaunchEvent_Abridged_dataMode_Enum) {
	builder.PrependInt8Slot(17, int8(dataMode), 0)
}
func LaunchEvent_AbridgedAddOrigNetwork(builder *flatbuffers.Builder, origNetwork flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(18, flatbuffers.UOffsetT(origNetwork), 0)
}
func LaunchEvent_AbridgedAddSatNo(builder *flatbuffers.Builder, satNo int32) {
	builder.PrependInt32Slot(19, satNo, 0)
}
func LaunchEvent_AbridgedEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
