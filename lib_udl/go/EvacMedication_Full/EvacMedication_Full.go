// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package EvacMedication_Full

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

/// /// Medication specifics.
type EvacMedication_Full struct {
	_tab flatbuffers.Table
}

const EvacMedication_FullIdentifier = "EVAC"

func GetRootAsEvacMedication_Full(buf []byte, offset flatbuffers.UOffsetT) *EvacMedication_Full {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &EvacMedication_Full{}
	x.Init(buf, n+offset)
	return x
}

func FinishEvacMedication_FullBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	identifierBytes := []byte(EvacMedication_FullIdentifier)
	builder.FinishWithFileIdentifier(offset, identifierBytes)
}

func EvacMedication_FullBufferHasIdentifier(buf []byte) bool {
	return flatbuffers.BufferHasIdentifier(buf, EvacMedication_FullIdentifier)
}

func GetSizePrefixedRootAsEvacMedication_Full(buf []byte, offset flatbuffers.UOffsetT) *EvacMedication_Full {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &EvacMedication_Full{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedEvacMedication_FullBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	identifierBytes := []byte(EvacMedication_FullIdentifier)
	builder.FinishSizePrefixedWithFileIdentifier(offset, identifierBytes)
}

func SizePrefixedEvacMedication_FullBufferHasIdentifier(buf []byte) bool {
	return flatbuffers.SizePrefixedBufferHasIdentifier(buf, EvacMedication_FullIdentifier)
}

func (rcv *EvacMedication_Full) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *EvacMedication_Full) Table() flatbuffers.Table {
	return rcv._tab
}

/// The type of medication administered.   Intended as, but not constrained to, K07.1 Medication Enumeration (CEFOTETAN, ABRASION, ABX, AMOXILOXACIN, ANALGESIC, COLLOID, CRYOPECIPITATES, CRYSTALLOID, EPINEPHRINE, ERTAPENEM, FENTANYL, HEXTEND, LACTATED RINGERS, MOBIC, MORPHINE, NARCOTIC, NS, PENICILLIN, PLASMA, PLATELETS, PRBC, TYLENOL, WHOLE BLOOD MT).
/// Example: /// Example: TYLENOL
/// Constraints: Minimum length = 0, Maximum length = 64
func (rcv *EvacMedication_Full) Type() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The type of medication administered.   Intended as, but not constrained to, K07.1 Medication Enumeration (CEFOTETAN, ABRASION, ABX, AMOXILOXACIN, ANALGESIC, COLLOID, CRYOPECIPITATES, CRYSTALLOID, EPINEPHRINE, ERTAPENEM, FENTANYL, HEXTEND, LACTATED RINGERS, MOBIC, MORPHINE, NARCOTIC, NS, PENICILLIN, PLASMA, PLATELETS, PRBC, TYLENOL, WHOLE BLOOD MT).
/// Example: /// Example: TYLENOL
/// Constraints: Minimum length = 0, Maximum length = 64
/// Body part location or body part referenced for medication. Intended as, but not constrained to, K07.1 Body Location Enumeration (e.g. ANKLE LEFT BACK, ANKLE LEFT FRONT, ANKLE RIGHT BACK, ANKLE RIGHT FRONT, ARM LEFT BACK, ARM LEFT ELBOW BACK, ARM LEFT ELBOW FRONT, ARM LEFT FRONT, ARM LEFT LOWER BACK, etc.).
/// Example: /// Example: ARM LEFT BACK
/// Constraints: Minimum length = 0, Maximum length = 32
func (rcv *EvacMedication_Full) BodyPart() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Body part location or body part referenced for medication. Intended as, but not constrained to, K07.1 Body Location Enumeration (e.g. ANKLE LEFT BACK, ANKLE LEFT FRONT, ANKLE RIGHT BACK, ANKLE RIGHT FRONT, ARM LEFT BACK, ARM LEFT ELBOW BACK, ARM LEFT ELBOW FRONT, ARM LEFT FRONT, ARM LEFT LOWER BACK, etc.).
/// Example: /// Example: ARM LEFT BACK
/// Constraints: Minimum length = 0, Maximum length = 32
/// Quantity of medicine or drug administered or recommended to be taken at a particular time.
/// Example: /// Example: 800mg
/// Constraints: Minimum length = 0, Maximum length = 32
func (rcv *EvacMedication_Full) Dose() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Quantity of medicine or drug administered or recommended to be taken at a particular time.
/// Example: /// Example: 800mg
/// Constraints: Minimum length = 0, Maximum length = 32
/// Route of medication delivery (e.g. INJECTION, ORAL, etc.).
/// Example: /// Example: ORAL
/// Constraints: Minimum length = 0, Maximum length = 16
func (rcv *EvacMedication_Full) AdminRoute() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Route of medication delivery (e.g. INJECTION, ORAL, etc.).
/// Example: /// Example: ORAL
/// Constraints: Minimum length = 0, Maximum length = 16
/// The time that the medication was administered in ISO 8601 UTC format.
/// Example: /// Example: 2021-10-15T16:00:00.123Z
/// Constraints: No constraints specified.
func (rcv *EvacMedication_Full) Time() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The time that the medication was administered in ISO 8601 UTC format.
/// Example: /// Example: 2021-10-15T16:00:00.123Z
/// Constraints: No constraints specified.
/// Additional comments on the patient's medication information.
/// Example: /// Example: Comments on the patient's medication information.
/// Constraints: Minimum length = 0, Maximum length = 1024
func (rcv *EvacMedication_Full) Comments() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Additional comments on the patient's medication information.
/// Example: /// Example: Comments on the patient's medication information.
/// Constraints: Minimum length = 0, Maximum length = 1024
func EvacMedication_FullStart(builder *flatbuffers.Builder) {
	builder.StartObject(6)
}
func EvacMedication_FullAddType(builder *flatbuffers.Builder, type_ flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(type_), 0)
}
func EvacMedication_FullAddBodyPart(builder *flatbuffers.Builder, bodyPart flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(bodyPart), 0)
}
func EvacMedication_FullAddDose(builder *flatbuffers.Builder, dose flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(dose), 0)
}
func EvacMedication_FullAddAdminRoute(builder *flatbuffers.Builder, adminRoute flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(3, flatbuffers.UOffsetT(adminRoute), 0)
}
func EvacMedication_FullAddTime(builder *flatbuffers.Builder, time flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(4, flatbuffers.UOffsetT(time), 0)
}
func EvacMedication_FullAddComments(builder *flatbuffers.Builder, comments flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(5, flatbuffers.UOffsetT(comments), 0)
}
func EvacMedication_FullEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
