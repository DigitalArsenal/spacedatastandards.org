// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package Onorbit_Ingest

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

/// /// Model object representing on-orbit objects or satellites in the system.
type Onorbit_Ingest struct {
	_tab flatbuffers.Table
}

const Onorbit_IngestIdentifier = "ONOR"

func GetRootAsOnorbit_Ingest(buf []byte, offset flatbuffers.UOffsetT) *Onorbit_Ingest {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &Onorbit_Ingest{}
	x.Init(buf, n+offset)
	return x
}

func FinishOnorbit_IngestBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	identifierBytes := []byte(Onorbit_IngestIdentifier)
	builder.FinishWithFileIdentifier(offset, identifierBytes)
}

func Onorbit_IngestBufferHasIdentifier(buf []byte) bool {
	return flatbuffers.BufferHasIdentifier(buf, Onorbit_IngestIdentifier)
}

func GetSizePrefixedRootAsOnorbit_Ingest(buf []byte, offset flatbuffers.UOffsetT) *Onorbit_Ingest {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &Onorbit_Ingest{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedOnorbit_IngestBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	identifierBytes := []byte(Onorbit_IngestIdentifier)
	builder.FinishSizePrefixedWithFileIdentifier(offset, identifierBytes)
}

func SizePrefixedOnorbit_IngestBufferHasIdentifier(buf []byte) bool {
	return flatbuffers.SizePrefixedBufferHasIdentifier(buf, Onorbit_IngestIdentifier)
}

func (rcv *Onorbit_Ingest) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *Onorbit_Ingest) Table() flatbuffers.Table {
	return rcv._tab
}

/// For the public catalog, the idOnOrbit is typically the satellite number as a string, but may be a UUID for analyst or other unknown or untracked satellites, auto-generated by the system.
/// Example: /// Example: ONORBIT-ID
/// Constraints: Minimum length = 1, Maximum length = 36
func (rcv *Onorbit_Ingest) IdOnOrbit() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// For the public catalog, the idOnOrbit is typically the satellite number as a string, but may be a UUID for analyst or other unknown or untracked satellites, auto-generated by the system.
/// Example: /// Example: ONORBIT-ID
/// Constraints: Minimum length = 1, Maximum length = 36
/// Classification marking of the data in IC/CAPCO Portion-marked format.
/// Example: /// Example: U
/// Constraints: Minimum length = 1, Maximum length = 128
func (rcv *Onorbit_Ingest) ClassificationMarking() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Classification marking of the data in IC/CAPCO Portion-marked format.
/// Example: /// Example: U
/// Constraints: Minimum length = 1, Maximum length = 128
/// Satellite/Catalog number of the target on-orbit object.
/// Example: /// Example: 1
/// Constraints: No constraints specified.
func (rcv *Onorbit_Ingest) SatNo() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

/// Satellite/Catalog number of the target on-orbit object.
/// Example: /// Example: 1
/// Constraints: No constraints specified.
func (rcv *Onorbit_Ingest) MutateSatNo(n int32) bool {
	return rcv._tab.MutateInt32Slot(8, n)
}

/// Common name of the on-orbit object.
/// Example: /// Example: Example common name
/// Constraints: Minimum length = 0, Maximum length = 128
func (rcv *Onorbit_Ingest) CommonName() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Common name of the on-orbit object.
/// Example: /// Example: Example common name
/// Constraints: Minimum length = 0, Maximum length = 128
/// Constellation to which this satellite belongs.
/// Example: /// Example: Big Dipper
/// Constraints: Minimum length = 0, Maximum length = 128
func (rcv *Onorbit_Ingest) Constellation() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Constellation to which this satellite belongs.
/// Example: /// Example: Big Dipper
/// Constraints: Minimum length = 0, Maximum length = 128
/// International Designator, typically of the format YYYYLLLAAA, where YYYY is the launch year, LLL is the sequential launch number of that year, and AAA is an optional launch piece designator for the launch.
/// Example: /// Example: 2021123ABC
/// Constraints: Minimum length = 0, Maximum length = 45
func (rcv *Onorbit_Ingest) IntlDes() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// International Designator, typically of the format YYYYLLLAAA, where YYYY is the launch year, LLL is the sequential launch number of that year, and AAA is an optional launch piece designator for the launch.
/// Example: /// Example: 2021123ABC
/// Constraints: Minimum length = 0, Maximum length = 45
/// Date of launch.
/// Example: /// Example: 2018-01-01
/// Constraints: No constraints specified.
func (rcv *Onorbit_Ingest) LaunchDate() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Date of launch.
/// Example: /// Example: 2018-01-01
/// Constraints: No constraints specified.
/// Date of decay.
/// Example: /// Example: 2018-01-01T16:00:00.123Z
/// Constraints: No constraints specified.
func (rcv *Onorbit_Ingest) DecayDate() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(18))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Date of decay.
/// Example: /// Example: 2018-01-01T16:00:00.123Z
/// Constraints: No constraints specified.
/// Type of on-orbit object: ROCKET BODY, DEBRIS, PAYLOAD, PLATFORM, MANNED, UNKNOWN.
/// Example: /// Example: PAYLOAD
/// Constraints: Minimum length = 0, Maximum length = 32
func (rcv *Onorbit_Ingest) ObjectType() Onorbit_Ingest_objectType_Enum {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(20))
	if o != 0 {
		return Onorbit_Ingest_objectType_Enum(rcv._tab.GetInt8(o + rcv._tab.Pos))
	}
	return 0
}

/// Type of on-orbit object: ROCKET BODY, DEBRIS, PAYLOAD, PLATFORM, MANNED, UNKNOWN.
/// Example: /// Example: PAYLOAD
/// Constraints: Minimum length = 0, Maximum length = 32
func (rcv *Onorbit_Ingest) MutateObjectType(n Onorbit_Ingest_objectType_Enum) bool {
	return rcv._tab.MutateInt8Slot(20, int8(n))
}

/// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
/// Example: /// Example: THIRD_PARTY_DATASOURCE
/// Constraints: Minimum length = 0, Maximum length = 64
func (rcv *Onorbit_Ingest) Origin() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(22))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
/// Example: /// Example: THIRD_PARTY_DATASOURCE
/// Constraints: Minimum length = 0, Maximum length = 64
/// Mission number of the on-orbit object.
/// Example: /// Example: Expedition 1
/// Constraints: Minimum length = 0, Maximum length = 128
func (rcv *Onorbit_Ingest) MissionNumber() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(24))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Mission number of the on-orbit object.
/// Example: /// Example: Expedition 1
/// Constraints: Minimum length = 0, Maximum length = 128
/// Category of the on-orbit object. (Unknown, On-Orbit, Decayed, Cataloged Without State, Launch Nominal, Analyst Satellite, Cislunar, Lunar, Hyperbolic, Heliocentric, Interplanetary, Lagrangian, Docked).
/// Example: /// Example: Lunar
/// Constraints: Minimum length = 0, Maximum length = 45
func (rcv *Onorbit_Ingest) Category() Onorbit_Ingest_category_Enum {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(26))
	if o != 0 {
		return Onorbit_Ingest_category_Enum(rcv._tab.GetInt8(o + rcv._tab.Pos))
	}
	return 0
}

/// Category of the on-orbit object. (Unknown, On-Orbit, Decayed, Cataloged Without State, Launch Nominal, Analyst Satellite, Cislunar, Lunar, Hyperbolic, Heliocentric, Interplanetary, Lagrangian, Docked).
/// Example: /// Example: Lunar
/// Constraints: Minimum length = 0, Maximum length = 45
func (rcv *Onorbit_Ingest) MutateCategory(n Onorbit_Ingest_category_Enum) bool {
	return rcv._tab.MutateInt8Slot(26, int8(n))
}

/// Estimated lifetime of the on-orbit payload, if known.
/// Example: /// Example: 10
/// Constraints: No constraints specified.
func (rcv *Onorbit_Ingest) LifetimeYears() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(28))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

/// Estimated lifetime of the on-orbit payload, if known.
/// Example: /// Example: 10
/// Constraints: No constraints specified.
func (rcv *Onorbit_Ingest) MutateLifetimeYears(n int32) bool {
	return rcv._tab.MutateInt32Slot(28, n)
}

/// Alternate name of the on-orbit object.
/// Example: /// Example: Alternate Name
/// Constraints: Minimum length = 0, Maximum length = 64
func (rcv *Onorbit_Ingest) AltName() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(30))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Alternate name of the on-orbit object.
/// Example: /// Example: Alternate Name
/// Constraints: Minimum length = 0, Maximum length = 64
/// Time the row was created in the database, auto-populated by the system.
/// Example: /// Example: 2018-01-01T16:00:00.123Z
/// Constraints: No constraints specified.
func (rcv *Onorbit_Ingest) CreatedAt() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(32))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Time the row was created in the database, auto-populated by the system.
/// Example: /// Example: 2018-01-01T16:00:00.123Z
/// Constraints: No constraints specified.
/// Application user who created the row in the database, auto-populated by the system.
/// Example: /// Example: some.user
/// Constraints: Minimum length = 1, Maximum length = 64
func (rcv *Onorbit_Ingest) CreatedBy() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(34))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Application user who created the row in the database, auto-populated by the system.
/// Example: /// Example: some.user
/// Constraints: Minimum length = 1, Maximum length = 64
/// Source of the data.
/// Example: /// Example: Bluestaq
/// Constraints: Minimum length = 1, Maximum length = 64
func (rcv *Onorbit_Ingest) Source() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(36))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Source of the data.
/// Example: /// Example: Bluestaq
/// Constraints: Minimum length = 1, Maximum length = 64
/// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
/// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
/// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
/// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
/// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
/// Example: /// Example: TEST
/// Constraints: Minimum length = 1, Maximum length = 32
func (rcv *Onorbit_Ingest) DataMode() Onorbit_Ingest_dataMode_Enum {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(38))
	if o != 0 {
		return Onorbit_Ingest_dataMode_Enum(rcv._tab.GetInt8(o + rcv._tab.Pos))
	}
	return 0
}

/// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
/// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
/// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
/// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
/// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
/// Example: /// Example: TEST
/// Constraints: Minimum length = 1, Maximum length = 32
func (rcv *Onorbit_Ingest) MutateDataMode(n Onorbit_Ingest_dataMode_Enum) bool {
	return rcv._tab.MutateInt8Slot(38, int8(n))
}

/// Id of the associated launchSite entity.
/// Example: /// Example: LAUNCHSITE-ID
/// Constraints: Minimum length = 0, Maximum length = 36
func (rcv *Onorbit_Ingest) LaunchSiteId() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(40))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Id of the associated launchSite entity.
/// Example: /// Example: LAUNCHSITE-ID
/// Constraints: Minimum length = 0, Maximum length = 36
/// The country code. This value is typically the ISO 3166 Alpha-2 two-character country code, however it can also represent various consortiums that do not appear in the ISO document. The code must correspond to an existing country in the UDL’s country API. Call udl/country/{code} to get any associated FIPS code, ISO Alpha-3 code, or alternate code values that exist for the specified country code.
/// Example: /// Example: US
/// Constraints: No constraints specified.
func (rcv *Onorbit_Ingest) CountryCode() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(42))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The country code. This value is typically the ISO 3166 Alpha-2 two-character country code, however it can also represent various consortiums that do not appear in the ISO document. The code must correspond to an existing country in the UDL’s country API. Call udl/country/{code} to get any associated FIPS code, ISO Alpha-3 code, or alternate code values that exist for the specified country code.
/// Example: /// Example: US
/// Constraints: No constraints specified.
/// The originating source network on which this record was created, auto-populated by the system.
/// Example: /// Example: OPS1
/// Constraints: Minimum length = 1, Maximum length = 32
func (rcv *Onorbit_Ingest) OrigNetwork() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(44))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The originating source network on which this record was created, auto-populated by the system.
/// Example: /// Example: OPS1
/// Constraints: Minimum length = 1, Maximum length = 32
func Onorbit_IngestStart(builder *flatbuffers.Builder) {
	builder.StartObject(21)
}
func Onorbit_IngestAddIdOnOrbit(builder *flatbuffers.Builder, idOnOrbit flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(idOnOrbit), 0)
}
func Onorbit_IngestAddClassificationMarking(builder *flatbuffers.Builder, classificationMarking flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(classificationMarking), 0)
}
func Onorbit_IngestAddSatNo(builder *flatbuffers.Builder, satNo int32) {
	builder.PrependInt32Slot(2, satNo, 0)
}
func Onorbit_IngestAddCommonName(builder *flatbuffers.Builder, commonName flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(3, flatbuffers.UOffsetT(commonName), 0)
}
func Onorbit_IngestAddConstellation(builder *flatbuffers.Builder, constellation flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(4, flatbuffers.UOffsetT(constellation), 0)
}
func Onorbit_IngestAddIntlDes(builder *flatbuffers.Builder, intlDes flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(5, flatbuffers.UOffsetT(intlDes), 0)
}
func Onorbit_IngestAddLaunchDate(builder *flatbuffers.Builder, launchDate flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(6, flatbuffers.UOffsetT(launchDate), 0)
}
func Onorbit_IngestAddDecayDate(builder *flatbuffers.Builder, decayDate flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(7, flatbuffers.UOffsetT(decayDate), 0)
}
func Onorbit_IngestAddObjectType(builder *flatbuffers.Builder, objectType Onorbit_Ingest_objectType_Enum) {
	builder.PrependInt8Slot(8, int8(objectType), 0)
}
func Onorbit_IngestAddOrigin(builder *flatbuffers.Builder, origin flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(9, flatbuffers.UOffsetT(origin), 0)
}
func Onorbit_IngestAddMissionNumber(builder *flatbuffers.Builder, missionNumber flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(10, flatbuffers.UOffsetT(missionNumber), 0)
}
func Onorbit_IngestAddCategory(builder *flatbuffers.Builder, category Onorbit_Ingest_category_Enum) {
	builder.PrependInt8Slot(11, int8(category), 0)
}
func Onorbit_IngestAddLifetimeYears(builder *flatbuffers.Builder, lifetimeYears int32) {
	builder.PrependInt32Slot(12, lifetimeYears, 0)
}
func Onorbit_IngestAddAltName(builder *flatbuffers.Builder, altName flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(13, flatbuffers.UOffsetT(altName), 0)
}
func Onorbit_IngestAddCreatedAt(builder *flatbuffers.Builder, createdAt flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(14, flatbuffers.UOffsetT(createdAt), 0)
}
func Onorbit_IngestAddCreatedBy(builder *flatbuffers.Builder, createdBy flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(15, flatbuffers.UOffsetT(createdBy), 0)
}
func Onorbit_IngestAddSource(builder *flatbuffers.Builder, source flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(16, flatbuffers.UOffsetT(source), 0)
}
func Onorbit_IngestAddDataMode(builder *flatbuffers.Builder, dataMode Onorbit_Ingest_dataMode_Enum) {
	builder.PrependInt8Slot(17, int8(dataMode), 0)
}
func Onorbit_IngestAddLaunchSiteId(builder *flatbuffers.Builder, launchSiteId flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(18, flatbuffers.UOffsetT(launchSiteId), 0)
}
func Onorbit_IngestAddCountryCode(builder *flatbuffers.Builder, countryCode flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(19, flatbuffers.UOffsetT(countryCode), 0)
}
func Onorbit_IngestAddOrigNetwork(builder *flatbuffers.Builder, origNetwork flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(20, flatbuffers.UOffsetT(origNetwork), 0)
}
func Onorbit_IngestEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
