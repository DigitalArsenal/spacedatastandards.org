// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package OnorbitThruster

import (
	flatbuffers "github.com/google/flatbuffers/go"

	OnorbitThruster_dataMode_Enum "OnorbitThruster_dataMode_Enum"
)

/// Read-only collection of thrusters (engines) on this on-orbit object.
type OnorbitThruster struct {
	_tab flatbuffers.Table
}

func GetRootAsOnorbitThruster(buf []byte, offset flatbuffers.UOffsetT) *OnorbitThruster {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &OnorbitThruster{}
	x.Init(buf, n+offset)
	return x
}

func FinishOnorbitThrusterBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.Finish(offset)
}

func GetSizePrefixedRootAsOnorbitThruster(buf []byte, offset flatbuffers.UOffsetT) *OnorbitThruster {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &OnorbitThruster{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedOnorbitThrusterBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.FinishSizePrefixed(offset)
}

func (rcv *OnorbitThruster) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *OnorbitThruster) Table() flatbuffers.Table {
	return rcv._tab
}

/// Unique identifier of the record, auto-generated by the system.
/// Example: ONORBITTHRUSTER-ID
/// Constraints: Minimum length = 1, Maximum length = 36
func (rcv *OnorbitThruster) Id() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Unique identifier of the record, auto-generated by the system.
/// Example: ONORBITTHRUSTER-ID
/// Constraints: Minimum length = 1, Maximum length = 36
/// ID of the on-orbit object.
/// Example: ONORBIT-ID
/// Constraints: Minimum length = 1, Maximum length = 36
func (rcv *OnorbitThruster) IdOnOrbit() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// ID of the on-orbit object.
/// Example: ONORBIT-ID
/// Constraints: Minimum length = 1, Maximum length = 36
/// ID of the Engine.
/// Example: ENGINE-ID
/// Constraints: Minimum length = 1, Maximum length = 36
func (rcv *OnorbitThruster) IdEngine() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// ID of the Engine.
/// Example: ENGINE-ID
/// Constraints: Minimum length = 1, Maximum length = 36
/// Classification marking of the data in IC/CAPCO Portion-marked format.
/// Example: U
/// Constraints: Minimum length = 1, Maximum length = 128
func (rcv *OnorbitThruster) ClassificationMarking() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Classification marking of the data in IC/CAPCO Portion-marked format.
/// Example: U
/// Constraints: Minimum length = 1, Maximum length = 128
/// The type of thruster associated with this record (e.g. LAE, Hydrazine REA, etc.).
/// Example: Hydrazine REA
/// Constraints: Minimum length = 0, Maximum length = 32
func (rcv *OnorbitThruster) Type() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The type of thruster associated with this record (e.g. LAE, Hydrazine REA, etc.).
/// Example: Hydrazine REA
/// Constraints: Minimum length = 0, Maximum length = 32
/// The number of engines/thrusters on the spacecraft of the type identified by idEngine.
/// Example: 10
/// Constraints: No constraints specified.
func (rcv *OnorbitThruster) Quantity() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

/// The number of engines/thrusters on the spacecraft of the type identified by idEngine.
/// Example: 10
/// Constraints: No constraints specified.
func (rcv *OnorbitThruster) MutateQuantity(n int32) bool {
	return rcv._tab.MutateInt32Slot(14, n)
}

/// Time the row was created in the database, auto-populated by the system.
/// Example: 2018-01-01T16:00:00.123Z
/// Constraints: No constraints specified.
func (rcv *OnorbitThruster) CreatedAt() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Time the row was created in the database, auto-populated by the system.
/// Example: 2018-01-01T16:00:00.123Z
/// Constraints: No constraints specified.
/// Application user who created the row in the database, auto-populated by the system.
/// Example: some.user
/// Constraints: Minimum length = 1, Maximum length = 64
func (rcv *OnorbitThruster) CreatedBy() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(18))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Application user who created the row in the database, auto-populated by the system.
/// Example: some.user
/// Constraints: Minimum length = 1, Maximum length = 64
/// Time the row was last updated in the database, auto-populated by the system.
/// Example: 2018-01-01T16:00:00.123Z
/// Constraints: No constraints specified.
func (rcv *OnorbitThruster) UpdatedAt() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(20))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Time the row was last updated in the database, auto-populated by the system.
/// Example: 2018-01-01T16:00:00.123Z
/// Constraints: No constraints specified.
/// Application user who updated the row in the database, auto-populated by the system.
/// Example: some.user
/// Constraints: Minimum length = 0, Maximum length = 64
func (rcv *OnorbitThruster) UpdatedBy() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(22))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Application user who updated the row in the database, auto-populated by the system.
/// Example: some.user
/// Constraints: Minimum length = 0, Maximum length = 64
/// Source of the data.
/// Example: Bluestaq
/// Constraints: Minimum length = 1, Maximum length = 64
func (rcv *OnorbitThruster) Source() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(24))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Source of the data.
/// Example: Bluestaq
/// Constraints: Minimum length = 1, Maximum length = 64
/// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
/// Example: THIRD_PARTY_DATASOURCE
/// Constraints: Minimum length = 0, Maximum length = 64
func (rcv *OnorbitThruster) Origin() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(26))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
/// Example: THIRD_PARTY_DATASOURCE
/// Constraints: Minimum length = 0, Maximum length = 64
/// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data: EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data. REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis. SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets. TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics. 
/// Example: TEST
/// Constraints: Minimum length = 1, Maximum length = 32
func (rcv *OnorbitThruster) DataMode() OnorbitThruster_dataMode_Enum.OnorbitThruster_dataMode_Enum {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(28))
	if o != 0 {
		return OnorbitThruster_dataMode_Enum.OnorbitThruster_dataMode_Enum(rcv._tab.GetInt8(o + rcv._tab.Pos))
	}
	return 0
}

/// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data: EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data. REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis. SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets. TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics. 
/// Example: TEST
/// Constraints: Minimum length = 1, Maximum length = 32
func (rcv *OnorbitThruster) MutateDataMode(n OnorbitThruster_dataMode_Enum.OnorbitThruster_dataMode_Enum) bool {
	return rcv._tab.MutateInt8Slot(28, int8(n))
}

/// No description provided.
/// Example: No example provided.
/// Constraints: No constraints specified.
func (rcv *OnorbitThruster) Engine() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(30))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// No description provided.
/// Example: No example provided.
/// Constraints: No constraints specified.
/// The originating source network on which this record was created, auto-populated by the system.
/// Example: OPS1
/// Constraints: Minimum length = 1, Maximum length = 32
func (rcv *OnorbitThruster) OrigNetwork() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(32))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The originating source network on which this record was created, auto-populated by the system.
/// Example: OPS1
/// Constraints: Minimum length = 1, Maximum length = 32
func OnorbitThrusterStart(builder *flatbuffers.Builder) {
	builder.StartObject(15)
}
func OnorbitThrusterAddId(builder *flatbuffers.Builder, id flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(id), 0)
}
func OnorbitThrusterAddIdOnOrbit(builder *flatbuffers.Builder, idOnOrbit flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(idOnOrbit), 0)
}
func OnorbitThrusterAddIdEngine(builder *flatbuffers.Builder, idEngine flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(idEngine), 0)
}
func OnorbitThrusterAddClassificationMarking(builder *flatbuffers.Builder, classificationMarking flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(3, flatbuffers.UOffsetT(classificationMarking), 0)
}
func OnorbitThrusterAddType(builder *flatbuffers.Builder, type_ flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(4, flatbuffers.UOffsetT(type_), 0)
}
func OnorbitThrusterAddQuantity(builder *flatbuffers.Builder, quantity int32) {
	builder.PrependInt32Slot(5, quantity, 0)
}
func OnorbitThrusterAddCreatedAt(builder *flatbuffers.Builder, createdAt flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(6, flatbuffers.UOffsetT(createdAt), 0)
}
func OnorbitThrusterAddCreatedBy(builder *flatbuffers.Builder, createdBy flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(7, flatbuffers.UOffsetT(createdBy), 0)
}
func OnorbitThrusterAddUpdatedAt(builder *flatbuffers.Builder, updatedAt flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(8, flatbuffers.UOffsetT(updatedAt), 0)
}
func OnorbitThrusterAddUpdatedBy(builder *flatbuffers.Builder, updatedBy flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(9, flatbuffers.UOffsetT(updatedBy), 0)
}
func OnorbitThrusterAddSource(builder *flatbuffers.Builder, source flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(10, flatbuffers.UOffsetT(source), 0)
}
func OnorbitThrusterAddOrigin(builder *flatbuffers.Builder, origin flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(11, flatbuffers.UOffsetT(origin), 0)
}
func OnorbitThrusterAddDataMode(builder *flatbuffers.Builder, dataMode OnorbitThruster_dataMode_Enum.OnorbitThruster_dataMode_Enum) {
	builder.PrependInt8Slot(12, int8(dataMode), 0)
}
func OnorbitThrusterAddEngine(builder *flatbuffers.Builder, engine flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(13, flatbuffers.UOffsetT(engine), 0)
}
func OnorbitThrusterAddOrigNetwork(builder *flatbuffers.Builder, origNetwork flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(14, flatbuffers.UOffsetT(origNetwork), 0)
}
func OnorbitThrusterEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
