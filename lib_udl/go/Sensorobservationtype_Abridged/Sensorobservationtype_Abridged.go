// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package Sensorobservationtype_Abridged

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

/// /// No description available.
type Sensorobservationtype_Abridged struct {
	_tab flatbuffers.Table
}

const Sensorobservationtype_AbridgedIdentifier = "SENS"

func GetRootAsSensorobservationtype_Abridged(buf []byte, offset flatbuffers.UOffsetT) *Sensorobservationtype_Abridged {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &Sensorobservationtype_Abridged{}
	x.Init(buf, n+offset)
	return x
}

func FinishSensorobservationtype_AbridgedBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	identifierBytes := []byte(Sensorobservationtype_AbridgedIdentifier)
	builder.FinishWithFileIdentifier(offset, identifierBytes)
}

func Sensorobservationtype_AbridgedBufferHasIdentifier(buf []byte) bool {
	return flatbuffers.BufferHasIdentifier(buf, Sensorobservationtype_AbridgedIdentifier)
}

func GetSizePrefixedRootAsSensorobservationtype_Abridged(buf []byte, offset flatbuffers.UOffsetT) *Sensorobservationtype_Abridged {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &Sensorobservationtype_Abridged{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedSensorobservationtype_AbridgedBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	identifierBytes := []byte(Sensorobservationtype_AbridgedIdentifier)
	builder.FinishSizePrefixedWithFileIdentifier(offset, identifierBytes)
}

func SizePrefixedSensorobservationtype_AbridgedBufferHasIdentifier(buf []byte) bool {
	return flatbuffers.SizePrefixedBufferHasIdentifier(buf, Sensorobservationtype_AbridgedIdentifier)
}

func (rcv *Sensorobservationtype_Abridged) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *Sensorobservationtype_Abridged) Table() flatbuffers.Table {
	return rcv._tab
}

/// Unique identifier of the record, auto-generated by the system.
/// Example: /// Example: SENSOROBSERVATIONTYPE-ID
/// Constraints: Minimum length = 1, Maximum length = 2
func (rcv *Sensorobservationtype_Abridged) Id() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Unique identifier of the record, auto-generated by the system.
/// Example: /// Example: SENSOROBSERVATIONTYPE-ID
/// Constraints: Minimum length = 1, Maximum length = 2
/// The observation measurement type produced by a sensor.
/// Example: /// Example: 5
/// Constraints: Minimum length = 0, Maximum length = 128
func (rcv *Sensorobservationtype_Abridged) Type() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The observation measurement type produced by a sensor.
/// Example: /// Example: 5
/// Constraints: Minimum length = 0, Maximum length = 128
/// Time the row was created in the database, auto-populated by the system.
/// Example: /// Example: 2018-01-01T16:00:00.123Z
/// Constraints: No constraints specified.
func (rcv *Sensorobservationtype_Abridged) CreatedAt() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Time the row was created in the database, auto-populated by the system.
/// Example: /// Example: 2018-01-01T16:00:00.123Z
/// Constraints: No constraints specified.
/// Application user who created the row in the database, auto-populated by the system.
/// Example: /// Example: some.user
/// Constraints: Minimum length = 1, Maximum length = 64
func (rcv *Sensorobservationtype_Abridged) CreatedBy() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Application user who created the row in the database, auto-populated by the system.
/// Example: /// Example: some.user
/// Constraints: Minimum length = 1, Maximum length = 64
/// The originating source network on which this record was created, auto-populated by the system.
/// Example: /// Example: OPS1
/// Constraints: Minimum length = 1, Maximum length = 32
func (rcv *Sensorobservationtype_Abridged) OrigNetwork() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The originating source network on which this record was created, auto-populated by the system.
/// Example: /// Example: OPS1
/// Constraints: Minimum length = 1, Maximum length = 32
func Sensorobservationtype_AbridgedStart(builder *flatbuffers.Builder) {
	builder.StartObject(5)
}
func Sensorobservationtype_AbridgedAddId(builder *flatbuffers.Builder, id flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(id), 0)
}
func Sensorobservationtype_AbridgedAddType(builder *flatbuffers.Builder, type_ flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(type_), 0)
}
func Sensorobservationtype_AbridgedAddCreatedAt(builder *flatbuffers.Builder, createdAt flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(createdAt), 0)
}
func Sensorobservationtype_AbridgedAddCreatedBy(builder *flatbuffers.Builder, createdBy flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(3, flatbuffers.UOffsetT(createdBy), 0)
}
func Sensorobservationtype_AbridgedAddOrigNetwork(builder *flatbuffers.Builder, origNetwork flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(4, flatbuffers.UOffsetT(origNetwork), 0)
}
func Sensorobservationtype_AbridgedEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
