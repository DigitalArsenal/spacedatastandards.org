// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package FlightPlanPointGroups_Full

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

/// /// Collection of point groups generated for this flight plan. Groups include point sets for Extended Operations (ETOPS), Critical Fuel Point, and Equal Time Point (ETP).
type FlightPlanPointGroups_Full struct {
	_tab flatbuffers.Table
}

const FlightPlanPointGroups_FullIdentifier = "FLIG"

func GetRootAsFlightPlanPointGroups_Full(buf []byte, offset flatbuffers.UOffsetT) *FlightPlanPointGroups_Full {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &FlightPlanPointGroups_Full{}
	x.Init(buf, n+offset)
	return x
}

func FinishFlightPlanPointGroups_FullBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	identifierBytes := []byte(FlightPlanPointGroups_FullIdentifier)
	builder.FinishWithFileIdentifier(offset, identifierBytes)
}

func FlightPlanPointGroups_FullBufferHasIdentifier(buf []byte) bool {
	return flatbuffers.BufferHasIdentifier(buf, FlightPlanPointGroups_FullIdentifier)
}

func GetSizePrefixedRootAsFlightPlanPointGroups_Full(buf []byte, offset flatbuffers.UOffsetT) *FlightPlanPointGroups_Full {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &FlightPlanPointGroups_Full{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedFlightPlanPointGroups_FullBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	identifierBytes := []byte(FlightPlanPointGroups_FullIdentifier)
	builder.FinishSizePrefixedWithFileIdentifier(offset, identifierBytes)
}

func SizePrefixedFlightPlanPointGroups_FullBufferHasIdentifier(buf []byte) bool {
	return flatbuffers.SizePrefixedBufferHasIdentifier(buf, FlightPlanPointGroups_FullIdentifier)
}

func (rcv *FlightPlanPointGroups_Full) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *FlightPlanPointGroups_Full) Table() flatbuffers.Table {
	return rcv._tab
}

/// Name of the point group, usually Extended Operations (ETOPS), Critical Fuel Point, and Equal Time Point (ETP) sections.
/// Example: /// Example: ETOPS_CF_POINT_1
/// Constraints: Minimum length = 0, Maximum length = 36
func (rcv *FlightPlanPointGroups_Full) PointGroupName() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Name of the point group, usually Extended Operations (ETOPS), Critical Fuel Point, and Equal Time Point (ETP) sections.
/// Example: /// Example: ETOPS_CF_POINT_1
/// Constraints: Minimum length = 0, Maximum length = 36
/// Specifies which Point Group case requires the most fuel.
/// Example: /// Example: DEPRESSURIZED ENGINE OUT ETP
/// Constraints: Minimum length = 0, Maximum length = 48
func (rcv *FlightPlanPointGroups_Full) WorstFuelCase() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Specifies which Point Group case requires the most fuel.
/// Example: /// Example: DEPRESSURIZED ENGINE OUT ETP
/// Constraints: Minimum length = 0, Maximum length = 48
/// Name of the last suitable airfield, International Civil Aviation Organization (ICAO) code preferred.
/// Example: /// Example: LPPD
/// Constraints: Minimum length = 0, Maximum length = 5
func (rcv *FlightPlanPointGroups_Full) LsafName() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Name of the last suitable airfield, International Civil Aviation Organization (ICAO) code preferred.
/// Example: /// Example: LPPD
/// Constraints: Minimum length = 0, Maximum length = 5
/// Distance from the Equal Time Point (ETP) to the last suitable airfield in nautical miles.
/// Example: /// Example: 684.1
/// Constraints: No constraints specified.
func (rcv *FlightPlanPointGroups_Full) LsafDistance() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Distance from the Equal Time Point (ETP) to the last suitable airfield in nautical miles.
/// Example: /// Example: 684.1
/// Constraints: No constraints specified.
func (rcv *FlightPlanPointGroups_Full) MutateLsafDistance(n float64) bool {
	return rcv._tab.MutateFloat64Slot(10, n)
}

/// Distance from the Equal Time Point (ETP) to the first suitable airfield in nautical miles.
/// Example: /// Example: 684.1
/// Constraints: No constraints specified.
func (rcv *FlightPlanPointGroups_Full) FsafDistance() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Distance from the Equal Time Point (ETP) to the first suitable airfield in nautical miles.
/// Example: /// Example: 684.1
/// Constraints: No constraints specified.
func (rcv *FlightPlanPointGroups_Full) MutateFsafDistance(n float64) bool {
	return rcv._tab.MutateFloat64Slot(12, n)
}

/// Distance from the Extended Operations (ETOPS) point to the recovery airfield in nautical miles.
/// Example: /// Example: 684.1
/// Constraints: No constraints specified.
func (rcv *FlightPlanPointGroups_Full) EtopsDistance() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Distance from the Extended Operations (ETOPS) point to the recovery airfield in nautical miles.
/// Example: /// Example: 684.1
/// Constraints: No constraints specified.
func (rcv *FlightPlanPointGroups_Full) MutateEtopsDistance(n float64) bool {
	return rcv._tab.MutateFloat64Slot(14, n)
}

/// Time to fly from the Equal Time Point (ETP) to the last suitable airfield expressed in HH:MM format.
/// Example: /// Example: 01:23
/// Constraints: Minimum length = 0, Maximum length = 6
func (rcv *FlightPlanPointGroups_Full) LsafTime() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Time to fly from the Equal Time Point (ETP) to the last suitable airfield expressed in HH:MM format.
/// Example: /// Example: 01:23
/// Constraints: Minimum length = 0, Maximum length = 6
/// Time to fly from the Equal Time Point (ETP) to the first suitable airfield expressed in HH:MM format.
/// Example: /// Example: 01:23
/// Constraints: Minimum length = 0, Maximum length = 6
func (rcv *FlightPlanPointGroups_Full) FsafTime() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(18))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Time to fly from the Equal Time Point (ETP) to the first suitable airfield expressed in HH:MM format.
/// Example: /// Example: 01:23
/// Constraints: Minimum length = 0, Maximum length = 6
/// Time to fly from the Extended Operations (ETOPS) point to the recovery airfield expressed in HH:MM format.
/// Example: /// Example: 01:23
/// Constraints: Minimum length = 0, Maximum length = 6
func (rcv *FlightPlanPointGroups_Full) EtopsTime() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(20))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Time to fly from the Extended Operations (ETOPS) point to the recovery airfield expressed in HH:MM format.
/// Example: /// Example: 01:23
/// Constraints: Minimum length = 0, Maximum length = 6
/// Average wind factor from the Equal Time Point (ETP) to the last suitable airfield in knots.
/// Example: /// Example: 13.1
/// Constraints: No constraints specified.
func (rcv *FlightPlanPointGroups_Full) LsafAvgWindFactor() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(22))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Average wind factor from the Equal Time Point (ETP) to the last suitable airfield in knots.
/// Example: /// Example: 13.1
/// Constraints: No constraints specified.
func (rcv *FlightPlanPointGroups_Full) MutateLsafAvgWindFactor(n float64) bool {
	return rcv._tab.MutateFloat64Slot(22, n)
}

/// Average wind factor from the Equal Time Point (ETP) to the first suitable airfield in knots.
/// Example: /// Example: 10.1
/// Constraints: No constraints specified.
func (rcv *FlightPlanPointGroups_Full) FsafAvgWindFactor() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(24))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Average wind factor from the Equal Time Point (ETP) to the first suitable airfield in knots.
/// Example: /// Example: 10.1
/// Constraints: No constraints specified.
func (rcv *FlightPlanPointGroups_Full) MutateFsafAvgWindFactor(n float64) bool {
	return rcv._tab.MutateFloat64Slot(24, n)
}

/// Average wind factor from the Extended Operations (ETOPS) point to the recovery airfield in knots.
/// Example: /// Example: 10.1
/// Constraints: No constraints specified.
func (rcv *FlightPlanPointGroups_Full) EtopsAvgWindFactor() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(26))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Average wind factor from the Extended Operations (ETOPS) point to the recovery airfield in knots.
/// Example: /// Example: 10.1
/// Constraints: No constraints specified.
func (rcv *FlightPlanPointGroups_Full) MutateEtopsAvgWindFactor(n float64) bool {
	return rcv._tab.MutateFloat64Slot(26, n)
}

/// Temperature deviation from the Equal Time Point (ETP) to the last suitable airfield in degrees Celsius.
/// Example: /// Example: 9.1
/// Constraints: No constraints specified.
func (rcv *FlightPlanPointGroups_Full) LsafTempDev() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(28))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Temperature deviation from the Equal Time Point (ETP) to the last suitable airfield in degrees Celsius.
/// Example: /// Example: 9.1
/// Constraints: No constraints specified.
func (rcv *FlightPlanPointGroups_Full) MutateLsafTempDev(n float64) bool {
	return rcv._tab.MutateFloat64Slot(28, n)
}

/// Temperature deviation from the Equal Time Point (ETP) to the first suitable airfield in degrees Celsius.
/// Example: /// Example: 9.1
/// Constraints: No constraints specified.
func (rcv *FlightPlanPointGroups_Full) FsafTempDev() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(30))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Temperature deviation from the Equal Time Point (ETP) to the first suitable airfield in degrees Celsius.
/// Example: /// Example: 9.1
/// Constraints: No constraints specified.
func (rcv *FlightPlanPointGroups_Full) MutateFsafTempDev(n float64) bool {
	return rcv._tab.MutateFloat64Slot(30, n)
}

/// Temperature deviation from the Extended Operations (ETOPS) point to the recovery airfield in degrees Celsius.
/// Example: /// Example: 9.1
/// Constraints: No constraints specified.
func (rcv *FlightPlanPointGroups_Full) EtopsTempDev() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(32))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Temperature deviation from the Extended Operations (ETOPS) point to the recovery airfield in degrees Celsius.
/// Example: /// Example: 9.1
/// Constraints: No constraints specified.
func (rcv *FlightPlanPointGroups_Full) MutateEtopsTempDev(n float64) bool {
	return rcv._tab.MutateFloat64Slot(32, n)
}

/// Fuel required to fly from the Equal Time Point (ETP) to the last suitable airfield in pounds.
/// Example: /// Example: 50787.1
/// Constraints: No constraints specified.
func (rcv *FlightPlanPointGroups_Full) LsafReqFuel() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(34))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Fuel required to fly from the Equal Time Point (ETP) to the last suitable airfield in pounds.
/// Example: /// Example: 50787.1
/// Constraints: No constraints specified.
func (rcv *FlightPlanPointGroups_Full) MutateLsafReqFuel(n float64) bool {
	return rcv._tab.MutateFloat64Slot(34, n)
}

/// Fuel required to fly from the Equal Time Point (ETP) to the first suitable airfield in pounds.
/// Example: /// Example: 50380.1
/// Constraints: No constraints specified.
func (rcv *FlightPlanPointGroups_Full) FsafReqFuel() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(36))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Fuel required to fly from the Equal Time Point (ETP) to the first suitable airfield in pounds.
/// Example: /// Example: 50380.1
/// Constraints: No constraints specified.
func (rcv *FlightPlanPointGroups_Full) MutateFsafReqFuel(n float64) bool {
	return rcv._tab.MutateFloat64Slot(36, n)
}

/// Fuel required to fly from the Extended Operations (ETOPS) point to the recovery airfield in pounds.
/// Example: /// Example: 4412.1
/// Constraints: No constraints specified.
func (rcv *FlightPlanPointGroups_Full) EtopsReqFuel() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(38))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Fuel required to fly from the Extended Operations (ETOPS) point to the recovery airfield in pounds.
/// Example: /// Example: 4412.1
/// Constraints: No constraints specified.
func (rcv *FlightPlanPointGroups_Full) MutateEtopsReqFuel(n float64) bool {
	return rcv._tab.MutateFloat64Slot(38, n)
}

/// Total time from takeoff when the point is reached expressed in HH:MM format.
/// Example: /// Example: 07:29
/// Constraints: Minimum length = 0, Maximum length = 6
func (rcv *FlightPlanPointGroups_Full) FromTakeoffTime() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(40))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Total time from takeoff when the point is reached expressed in HH:MM format.
/// Example: /// Example: 07:29
/// Constraints: Minimum length = 0, Maximum length = 6
/// Amount of planned fuel on board when the point is reached in pounds.
/// Example: /// Example: 190319.1
/// Constraints: No constraints specified.
func (rcv *FlightPlanPointGroups_Full) PlannedFuel() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(42))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Amount of planned fuel on board when the point is reached in pounds.
/// Example: /// Example: 190319.1
/// Constraints: No constraints specified.
func (rcv *FlightPlanPointGroups_Full) MutatePlannedFuel(n float64) bool {
	return rcv._tab.MutateFloat64Slot(42, n)
}

/// Flight level of the point at which the fuel was calculated in feet.
/// Example: /// Example: 100.1
/// Constraints: No constraints specified.
func (rcv *FlightPlanPointGroups_Full) FuelCalcAlt() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(44))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Flight level of the point at which the fuel was calculated in feet.
/// Example: /// Example: 100.1
/// Constraints: No constraints specified.
func (rcv *FlightPlanPointGroups_Full) MutateFuelCalcAlt(n float64) bool {
	return rcv._tab.MutateFloat64Slot(44, n)
}

/// True airspeed at which the fuel was calculated in knots.
/// Example: /// Example: 365.1
/// Constraints: No constraints specified.
func (rcv *FlightPlanPointGroups_Full) FuelCalcSpd() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(46))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// True airspeed at which the fuel was calculated in knots.
/// Example: /// Example: 365.1
/// Constraints: No constraints specified.
func (rcv *FlightPlanPointGroups_Full) MutateFuelCalcSpd(n float64) bool {
	return rcv._tab.MutateFloat64Slot(46, n)
}

/// Average fuel flow at which the fuel was calculated in pounds per hour.
/// Example: /// Example: 19693.1
/// Constraints: No constraints specified.
func (rcv *FlightPlanPointGroups_Full) AvgFuelFlow() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(48))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Average fuel flow at which the fuel was calculated in pounds per hour.
/// Example: /// Example: 19693.1
/// Constraints: No constraints specified.
func (rcv *FlightPlanPointGroups_Full) MutateAvgFuelFlow(n float64) bool {
	return rcv._tab.MutateFloat64Slot(48, n)
}

/// Array of point data for this Point Group.
/// Example: /// Example: No example provided.
/// Constraints: No constraints specified.
func (rcv *FlightPlanPointGroups_Full) FlightPlanPoints(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(50))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *FlightPlanPointGroups_Full) FlightPlanPointsLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(50))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

/// Array of point data for this Point Group.
/// Example: /// Example: No example provided.
/// Constraints: No constraints specified.
func FlightPlanPointGroups_FullStart(builder *flatbuffers.Builder) {
	builder.StartObject(24)
}
func FlightPlanPointGroups_FullAddPointGroupName(builder *flatbuffers.Builder, pointGroupName flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(pointGroupName), 0)
}
func FlightPlanPointGroups_FullAddWorstFuelCase(builder *flatbuffers.Builder, worstFuelCase flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(worstFuelCase), 0)
}
func FlightPlanPointGroups_FullAddLsafName(builder *flatbuffers.Builder, lsafName flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(lsafName), 0)
}
func FlightPlanPointGroups_FullAddLsafDistance(builder *flatbuffers.Builder, lsafDistance float64) {
	builder.PrependFloat64Slot(3, lsafDistance, 0.0)
}
func FlightPlanPointGroups_FullAddFsafDistance(builder *flatbuffers.Builder, fsafDistance float64) {
	builder.PrependFloat64Slot(4, fsafDistance, 0.0)
}
func FlightPlanPointGroups_FullAddEtopsDistance(builder *flatbuffers.Builder, etopsDistance float64) {
	builder.PrependFloat64Slot(5, etopsDistance, 0.0)
}
func FlightPlanPointGroups_FullAddLsafTime(builder *flatbuffers.Builder, lsafTime flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(6, flatbuffers.UOffsetT(lsafTime), 0)
}
func FlightPlanPointGroups_FullAddFsafTime(builder *flatbuffers.Builder, fsafTime flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(7, flatbuffers.UOffsetT(fsafTime), 0)
}
func FlightPlanPointGroups_FullAddEtopsTime(builder *flatbuffers.Builder, etopsTime flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(8, flatbuffers.UOffsetT(etopsTime), 0)
}
func FlightPlanPointGroups_FullAddLsafAvgWindFactor(builder *flatbuffers.Builder, lsafAvgWindFactor float64) {
	builder.PrependFloat64Slot(9, lsafAvgWindFactor, 0.0)
}
func FlightPlanPointGroups_FullAddFsafAvgWindFactor(builder *flatbuffers.Builder, fsafAvgWindFactor float64) {
	builder.PrependFloat64Slot(10, fsafAvgWindFactor, 0.0)
}
func FlightPlanPointGroups_FullAddEtopsAvgWindFactor(builder *flatbuffers.Builder, etopsAvgWindFactor float64) {
	builder.PrependFloat64Slot(11, etopsAvgWindFactor, 0.0)
}
func FlightPlanPointGroups_FullAddLsafTempDev(builder *flatbuffers.Builder, lsafTempDev float64) {
	builder.PrependFloat64Slot(12, lsafTempDev, 0.0)
}
func FlightPlanPointGroups_FullAddFsafTempDev(builder *flatbuffers.Builder, fsafTempDev float64) {
	builder.PrependFloat64Slot(13, fsafTempDev, 0.0)
}
func FlightPlanPointGroups_FullAddEtopsTempDev(builder *flatbuffers.Builder, etopsTempDev float64) {
	builder.PrependFloat64Slot(14, etopsTempDev, 0.0)
}
func FlightPlanPointGroups_FullAddLsafReqFuel(builder *flatbuffers.Builder, lsafReqFuel float64) {
	builder.PrependFloat64Slot(15, lsafReqFuel, 0.0)
}
func FlightPlanPointGroups_FullAddFsafReqFuel(builder *flatbuffers.Builder, fsafReqFuel float64) {
	builder.PrependFloat64Slot(16, fsafReqFuel, 0.0)
}
func FlightPlanPointGroups_FullAddEtopsReqFuel(builder *flatbuffers.Builder, etopsReqFuel float64) {
	builder.PrependFloat64Slot(17, etopsReqFuel, 0.0)
}
func FlightPlanPointGroups_FullAddFromTakeoffTime(builder *flatbuffers.Builder, fromTakeoffTime flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(18, flatbuffers.UOffsetT(fromTakeoffTime), 0)
}
func FlightPlanPointGroups_FullAddPlannedFuel(builder *flatbuffers.Builder, plannedFuel float64) {
	builder.PrependFloat64Slot(19, plannedFuel, 0.0)
}
func FlightPlanPointGroups_FullAddFuelCalcAlt(builder *flatbuffers.Builder, fuelCalcAlt float64) {
	builder.PrependFloat64Slot(20, fuelCalcAlt, 0.0)
}
func FlightPlanPointGroups_FullAddFuelCalcSpd(builder *flatbuffers.Builder, fuelCalcSpd float64) {
	builder.PrependFloat64Slot(21, fuelCalcSpd, 0.0)
}
func FlightPlanPointGroups_FullAddAvgFuelFlow(builder *flatbuffers.Builder, avgFuelFlow float64) {
	builder.PrependFloat64Slot(22, avgFuelFlow, 0.0)
}
func FlightPlanPointGroups_FullAddFlightPlanPoints(builder *flatbuffers.Builder, flightPlanPoints flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(23, flatbuffers.UOffsetT(flightPlanPoints), 0)
}
func FlightPlanPointGroups_FullStartFlightPlanPointsVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func FlightPlanPointGroups_FullEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
