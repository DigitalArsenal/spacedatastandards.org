// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package AttitudeData_Full

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

/// /// These services provide operations for posting and querying attitude of on-orbit objects.  Attitude describes the orientation of an object, which can be represented by quaternions or euler angles.  The AttitudeSet ID (asId) identifies the 'AttitudeSet' record which contains details of the underlying data as well as a collection of attitude points. Points must be retrieved by first identifying a desired AttitudeSet and pulling its points by that AttitudeSet ID 'asId'.
type AttitudeData_Full struct {
	_tab flatbuffers.Table
}

const AttitudeData_FullIdentifier = "ATTI"

func GetRootAsAttitudeData_Full(buf []byte, offset flatbuffers.UOffsetT) *AttitudeData_Full {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &AttitudeData_Full{}
	x.Init(buf, n+offset)
	return x
}

func FinishAttitudeData_FullBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	identifierBytes := []byte(AttitudeData_FullIdentifier)
	builder.FinishWithFileIdentifier(offset, identifierBytes)
}

func AttitudeData_FullBufferHasIdentifier(buf []byte) bool {
	return flatbuffers.BufferHasIdentifier(buf, AttitudeData_FullIdentifier)
}

func GetSizePrefixedRootAsAttitudeData_Full(buf []byte, offset flatbuffers.UOffsetT) *AttitudeData_Full {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &AttitudeData_Full{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedAttitudeData_FullBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	identifierBytes := []byte(AttitudeData_FullIdentifier)
	builder.FinishSizePrefixedWithFileIdentifier(offset, identifierBytes)
}

func SizePrefixedAttitudeData_FullBufferHasIdentifier(buf []byte) bool {
	return flatbuffers.SizePrefixedBufferHasIdentifier(buf, AttitudeData_FullIdentifier)
}

func (rcv *AttitudeData_Full) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *AttitudeData_Full) Table() flatbuffers.Table {
	return rcv._tab
}

/// Unique identifier of the record, auto-generated by the system.
/// Example: /// Example: ATTITUDEDATA-ID
/// Constraints: Minimum length = 1, Maximum length = 36
func (rcv *AttitudeData_Full) Id() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Unique identifier of the record, auto-generated by the system.
/// Example: /// Example: ATTITUDEDATA-ID
/// Constraints: Minimum length = 1, Maximum length = 36
/// Classification marking of the data in IC/CAPCO Portion-marked format.
/// Example: /// Example: U
/// Constraints: Minimum length = 1, Maximum length = 128
func (rcv *AttitudeData_Full) ClassificationMarking() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Classification marking of the data in IC/CAPCO Portion-marked format.
/// Example: /// Example: U
/// Constraints: Minimum length = 1, Maximum length = 128
/// Unique identifier of the parent AttitudeSet associated with this record.
/// Example: /// Example: 773c9887-e931-42eb-8155-f0fbd227b235
/// Constraints: Minimum length = 1, Maximum length = 36
func (rcv *AttitudeData_Full) AsId() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Unique identifier of the parent AttitudeSet associated with this record.
/// Example: /// Example: 773c9887-e931-42eb-8155-f0fbd227b235
/// Constraints: Minimum length = 1, Maximum length = 36
/// Unique identifier of the on-orbit satellite to which this attitude record applies.
/// Example: /// Example: 41947
/// Constraints: Minimum length = 0, Maximum length = 36
func (rcv *AttitudeData_Full) IdOnOrbit() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Unique identifier of the on-orbit satellite to which this attitude record applies.
/// Example: /// Example: 41947
/// Constraints: Minimum length = 0, Maximum length = 36
/// Satellite/catalog number of the on-orbit object to which this attitude record applies.
/// Example: /// Example: 41947
/// Constraints: No constraints specified.
func (rcv *AttitudeData_Full) SatNo() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

/// Satellite/catalog number of the on-orbit object to which this attitude record applies.
/// Example: /// Example: 41947
/// Constraints: No constraints specified.
func (rcv *AttitudeData_Full) MutateSatNo(n int32) bool {
	return rcv._tab.MutateInt32Slot(12, n)
}

/// Optional identifier provided by the record source to indicate the target object of this attitude record. This may be an internal identifier and not necessarily map to a valid satellite number.
/// Example: /// Example: D6593
/// Constraints: Minimum length = 0, Maximum length = 36
func (rcv *AttitudeData_Full) OrigObjectId() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Optional identifier provided by the record source to indicate the target object of this attitude record. This may be an internal identifier and not necessarily map to a valid satellite number.
/// Example: /// Example: D6593
/// Constraints: Minimum length = 0, Maximum length = 36
/// Time associated with this attitude record, in ISO 8601 UTC format, with microsecond precision.
/// Example: /// Example: 2022-03-07T14:51:39.653043Z
/// Constraints: No constraints specified.
func (rcv *AttitudeData_Full) Ts() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Time associated with this attitude record, in ISO 8601 UTC format, with microsecond precision.
/// Example: /// Example: 2022-03-07T14:51:39.653043Z
/// Constraints: No constraints specified.
/// Label specifying type of rotational motion of target.
/// Example: /// Example: PROSOL_MOTION
/// Constraints: Minimum length = 0, Maximum length = 36
func (rcv *AttitudeData_Full) MotionType() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(18))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Label specifying type of rotational motion of target.
/// Example: /// Example: PROSOL_MOTION
/// Constraints: Minimum length = 0, Maximum length = 36
/// Quaternion vector component 1.
/// Example: /// Example: 0.0312
/// Constraints: No constraints specified.
func (rcv *AttitudeData_Full) Q1() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(20))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Quaternion vector component 1.
/// Example: /// Example: 0.0312
/// Constraints: No constraints specified.
func (rcv *AttitudeData_Full) MutateQ1(n float64) bool {
	return rcv._tab.MutateFloat64Slot(20, n)
}

/// Quaternion vector component 2.
/// Example: /// Example: 0.7854
/// Constraints: No constraints specified.
func (rcv *AttitudeData_Full) Q2() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(22))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Quaternion vector component 2.
/// Example: /// Example: 0.7854
/// Constraints: No constraints specified.
func (rcv *AttitudeData_Full) MutateQ2(n float64) bool {
	return rcv._tab.MutateFloat64Slot(22, n)
}

/// Quaternion vector component 3.
/// Example: /// Example: 0.3916
/// Constraints: No constraints specified.
func (rcv *AttitudeData_Full) Q3() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(24))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Quaternion vector component 3.
/// Example: /// Example: 0.3916
/// Constraints: No constraints specified.
func (rcv *AttitudeData_Full) MutateQ3(n float64) bool {
	return rcv._tab.MutateFloat64Slot(24, n)
}

/// Quaternion scalar component.
/// Example: /// Example: 0.4783
/// Constraints: No constraints specified.
func (rcv *AttitudeData_Full) Qc() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(26))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Quaternion scalar component.
/// Example: /// Example: 0.4783
/// Constraints: No constraints specified.
func (rcv *AttitudeData_Full) MutateQc(n float64) bool {
	return rcv._tab.MutateFloat64Slot(26, n)
}

/// Derivative of quaternion vector component 1.
/// Example: /// Example: 0.0043
/// Constraints: No constraints specified.
func (rcv *AttitudeData_Full) Q1Dot() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(28))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Derivative of quaternion vector component 1.
/// Example: /// Example: 0.0043
/// Constraints: No constraints specified.
func (rcv *AttitudeData_Full) MutateQ1Dot(n float64) bool {
	return rcv._tab.MutateFloat64Slot(28, n)
}

/// Derivative of quaternion vector component 2.
/// Example: /// Example: 0.06
/// Constraints: No constraints specified.
func (rcv *AttitudeData_Full) Q2Dot() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(30))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Derivative of quaternion vector component 2.
/// Example: /// Example: 0.06
/// Constraints: No constraints specified.
func (rcv *AttitudeData_Full) MutateQ2Dot(n float64) bool {
	return rcv._tab.MutateFloat64Slot(30, n)
}

/// Derivative of quaternion vector component 3.
/// Example: /// Example: 0.499
/// Constraints: No constraints specified.
func (rcv *AttitudeData_Full) Q3Dot() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(32))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Derivative of quaternion vector component 3.
/// Example: /// Example: 0.499
/// Constraints: No constraints specified.
func (rcv *AttitudeData_Full) MutateQ3Dot(n float64) bool {
	return rcv._tab.MutateFloat64Slot(32, n)
}

/// Derivative of quaternion scalar component.
/// Example: /// Example: 0.011
/// Constraints: No constraints specified.
func (rcv *AttitudeData_Full) QcDot() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(34))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Derivative of quaternion scalar component.
/// Example: /// Example: 0.011
/// Constraints: No constraints specified.
func (rcv *AttitudeData_Full) MutateQcDot(n float64) bool {
	return rcv._tab.MutateFloat64Slot(34, n)
}

/// Array of X body rotation Euler angle(s), in degrees (-180 to 180).  For repeated axis rotations, the array elements should be placed in the order that the angles apply in the sequence.
/// Example: /// Example: [139.753]
/// Constraints: No constraints specified.
func (rcv *AttitudeData_Full) XAngle(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(36))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *AttitudeData_Full) XAngleLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(36))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

/// Array of X body rotation Euler angle(s), in degrees (-180 to 180).  For repeated axis rotations, the array elements should be placed in the order that the angles apply in the sequence.
/// Example: /// Example: [139.753]
/// Constraints: No constraints specified.
/// Array of Y body rotation Euler angle(s), in degrees (-180 to 180).  For repeated axis rotations, the array elements should be placed in the order that the angles apply in the sequence.
/// Example: /// Example: [25.066]
/// Constraints: No constraints specified.
func (rcv *AttitudeData_Full) YAngle(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(38))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *AttitudeData_Full) YAngleLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(38))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

/// Array of Y body rotation Euler angle(s), in degrees (-180 to 180).  For repeated axis rotations, the array elements should be placed in the order that the angles apply in the sequence.
/// Example: /// Example: [25.066]
/// Constraints: No constraints specified.
/// Array of Z body rotation Euler angle(s), in degrees (-180 to 180).  For repeated axis rotations, the array elements should be placed in the order that the angles apply in the sequence.
/// Example: /// Example: [-53.368]
/// Constraints: No constraints specified.
func (rcv *AttitudeData_Full) ZAngle(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(40))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *AttitudeData_Full) ZAngleLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(40))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

/// Array of Z body rotation Euler angle(s), in degrees (-180 to 180).  For repeated axis rotations, the array elements should be placed in the order that the angles apply in the sequence.
/// Example: /// Example: [-53.368]
/// Constraints: No constraints specified.
/// Array of X body rotation rate(s), in degrees per second.  For repeated axis rotations, the array elements should be placed in the order that the rates apply in the sequence.  Attitude rates are expressed in frame1 with respect to frame2.
/// Example: /// Example: [0.105]
/// Constraints: No constraints specified.
func (rcv *AttitudeData_Full) XRate(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(42))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *AttitudeData_Full) XRateLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(42))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

/// Array of X body rotation rate(s), in degrees per second.  For repeated axis rotations, the array elements should be placed in the order that the rates apply in the sequence.  Attitude rates are expressed in frame1 with respect to frame2.
/// Example: /// Example: [0.105]
/// Constraints: No constraints specified.
/// Array of Y body rotation rate(s), in degrees per second.  For repeated axis rotations, the array elements should be placed in the order that the rates apply in the sequence.  Attitude rates are expressed in frame1 with respect to frame2.
/// Example: /// Example: [0.032]
/// Constraints: No constraints specified.
func (rcv *AttitudeData_Full) YRate(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(44))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *AttitudeData_Full) YRateLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(44))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

/// Array of Y body rotation rate(s), in degrees per second.  For repeated axis rotations, the array elements should be placed in the order that the rates apply in the sequence.  Attitude rates are expressed in frame1 with respect to frame2.
/// Example: /// Example: [0.032]
/// Constraints: No constraints specified.
/// Array of Z body rotation rate(s), in degrees per second.  For repeated axis rotations, the array elements should be placed in the order that the rates apply in the sequence  Attitude rates are expressed in frame1 with respect to frame2.
/// Example: /// Example: [0.022]
/// Constraints: No constraints specified.
func (rcv *AttitudeData_Full) ZRate(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(46))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *AttitudeData_Full) ZRateLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(46))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

/// Array of Z body rotation rate(s), in degrees per second.  For repeated axis rotations, the array elements should be placed in the order that the rates apply in the sequence  Attitude rates are expressed in frame1 with respect to frame2.
/// Example: /// Example: [0.022]
/// Constraints: No constraints specified.
/// Precession axis right ascension (ECI J2000 frame) in degrees.
/// Example: /// Example: -173.75
/// Constraints: No constraints specified.
func (rcv *AttitudeData_Full) Ra() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(48))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Precession axis right ascension (ECI J2000 frame) in degrees.
/// Example: /// Example: -173.75
/// Constraints: No constraints specified.
func (rcv *AttitudeData_Full) MutateRa(n float64) bool {
	return rcv._tab.MutateFloat64Slot(48, n)
}

/// Precession axis declination (ECI J2000 frame) in degrees.
/// Example: /// Example: 0.799
/// Constraints: No constraints specified.
func (rcv *AttitudeData_Full) Declination() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(50))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Precession axis declination (ECI J2000 frame) in degrees.
/// Example: /// Example: 0.799
/// Constraints: No constraints specified.
func (rcv *AttitudeData_Full) MutateDeclination(n float64) bool {
	return rcv._tab.MutateFloat64Slot(50, n)
}

/// Coning angle in degrees.
/// Example: /// Example: 0.1
/// Constraints: No constraints specified.
func (rcv *AttitudeData_Full) ConingAngle() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(52))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Coning angle in degrees.
/// Example: /// Example: 0.1
/// Constraints: No constraints specified.
func (rcv *AttitudeData_Full) MutateConingAngle(n float64) bool {
	return rcv._tab.MutateFloat64Slot(52, n)
}

/// Precession period in seconds.
/// Example: /// Example: 36.1
/// Constraints: No constraints specified.
func (rcv *AttitudeData_Full) PrecPeriod() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(54))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Precession period in seconds.
/// Example: /// Example: 36.1
/// Constraints: No constraints specified.
func (rcv *AttitudeData_Full) MutatePrecPeriod(n float64) bool {
	return rcv._tab.MutateFloat64Slot(54, n)
}

/// Spin period in seconds.
/// Example: /// Example: 0.1
/// Constraints: No constraints specified.
func (rcv *AttitudeData_Full) SpinPeriod() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(56))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Spin period in seconds.
/// Example: /// Example: 0.1
/// Constraints: No constraints specified.
func (rcv *AttitudeData_Full) MutateSpinPeriod(n float64) bool {
	return rcv._tab.MutateFloat64Slot(56, n)
}

/// Time the row was created in the database, auto-populated by the system.
/// Example: /// Example: 2022-07-05T12:00:00.123Z
/// Constraints: No constraints specified.
func (rcv *AttitudeData_Full) CreatedAt() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(58))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Time the row was created in the database, auto-populated by the system.
/// Example: /// Example: 2022-07-05T12:00:00.123Z
/// Constraints: No constraints specified.
/// Application user who created the row in the database, auto-populated by the system.
/// Example: /// Example: some.user
/// Constraints: Minimum length = 1, Maximum length = 64
func (rcv *AttitudeData_Full) CreatedBy() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(60))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Application user who created the row in the database, auto-populated by the system.
/// Example: /// Example: some.user
/// Constraints: Minimum length = 1, Maximum length = 64
/// Source of the data.
/// Example: /// Example: Bluestaq
/// Constraints: Minimum length = 1, Maximum length = 36
func (rcv *AttitudeData_Full) Source() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(62))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Source of the data.
/// Example: /// Example: Bluestaq
/// Constraints: Minimum length = 1, Maximum length = 36
/// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
/// Example: /// Example: THIRD_PARTY_DATASOURCE
/// Constraints: Minimum length = 0, Maximum length = 64
func (rcv *AttitudeData_Full) Origin() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(64))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
/// Example: /// Example: THIRD_PARTY_DATASOURCE
/// Constraints: Minimum length = 0, Maximum length = 64
/// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
/// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
/// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
/// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
/// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
/// Example: /// Example: TEST
/// Constraints: Minimum length = 1, Maximum length = 32
func (rcv *AttitudeData_Full) DataMode() AttitudeData_Full_dataMode_Enum {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(66))
	if o != 0 {
		return AttitudeData_Full_dataMode_Enum(rcv._tab.GetInt8(o + rcv._tab.Pos))
	}
	return 0
}

/// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
/// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
/// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
/// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
/// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
/// Example: /// Example: TEST
/// Constraints: Minimum length = 1, Maximum length = 32
func (rcv *AttitudeData_Full) MutateDataMode(n AttitudeData_Full_dataMode_Enum) bool {
	return rcv._tab.MutateInt8Slot(66, int8(n))
}

/// The originating source network on which this record was created, auto-populated by the system.
/// Example: /// Example: ORIG
/// Constraints: Minimum length = 1, Maximum length = 32
func (rcv *AttitudeData_Full) OrigNetwork() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(68))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The originating source network on which this record was created, auto-populated by the system.
/// Example: /// Example: ORIG
/// Constraints: Minimum length = 1, Maximum length = 32
func AttitudeData_FullStart(builder *flatbuffers.Builder) {
	builder.StartObject(33)
}
func AttitudeData_FullAddId(builder *flatbuffers.Builder, id flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(id), 0)
}
func AttitudeData_FullAddClassificationMarking(builder *flatbuffers.Builder, classificationMarking flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(classificationMarking), 0)
}
func AttitudeData_FullAddAsId(builder *flatbuffers.Builder, asId flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(asId), 0)
}
func AttitudeData_FullAddIdOnOrbit(builder *flatbuffers.Builder, idOnOrbit flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(3, flatbuffers.UOffsetT(idOnOrbit), 0)
}
func AttitudeData_FullAddSatNo(builder *flatbuffers.Builder, satNo int32) {
	builder.PrependInt32Slot(4, satNo, 0)
}
func AttitudeData_FullAddOrigObjectId(builder *flatbuffers.Builder, origObjectId flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(5, flatbuffers.UOffsetT(origObjectId), 0)
}
func AttitudeData_FullAddTs(builder *flatbuffers.Builder, ts flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(6, flatbuffers.UOffsetT(ts), 0)
}
func AttitudeData_FullAddMotionType(builder *flatbuffers.Builder, motionType flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(7, flatbuffers.UOffsetT(motionType), 0)
}
func AttitudeData_FullAddQ1(builder *flatbuffers.Builder, q1 float64) {
	builder.PrependFloat64Slot(8, q1, 0.0)
}
func AttitudeData_FullAddQ2(builder *flatbuffers.Builder, q2 float64) {
	builder.PrependFloat64Slot(9, q2, 0.0)
}
func AttitudeData_FullAddQ3(builder *flatbuffers.Builder, q3 float64) {
	builder.PrependFloat64Slot(10, q3, 0.0)
}
func AttitudeData_FullAddQc(builder *flatbuffers.Builder, qc float64) {
	builder.PrependFloat64Slot(11, qc, 0.0)
}
func AttitudeData_FullAddQ1Dot(builder *flatbuffers.Builder, q1Dot float64) {
	builder.PrependFloat64Slot(12, q1Dot, 0.0)
}
func AttitudeData_FullAddQ2Dot(builder *flatbuffers.Builder, q2Dot float64) {
	builder.PrependFloat64Slot(13, q2Dot, 0.0)
}
func AttitudeData_FullAddQ3Dot(builder *flatbuffers.Builder, q3Dot float64) {
	builder.PrependFloat64Slot(14, q3Dot, 0.0)
}
func AttitudeData_FullAddQcDot(builder *flatbuffers.Builder, qcDot float64) {
	builder.PrependFloat64Slot(15, qcDot, 0.0)
}
func AttitudeData_FullAddXAngle(builder *flatbuffers.Builder, xAngle flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(16, flatbuffers.UOffsetT(xAngle), 0)
}
func AttitudeData_FullStartXAngleVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func AttitudeData_FullAddYAngle(builder *flatbuffers.Builder, yAngle flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(17, flatbuffers.UOffsetT(yAngle), 0)
}
func AttitudeData_FullStartYAngleVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func AttitudeData_FullAddZAngle(builder *flatbuffers.Builder, zAngle flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(18, flatbuffers.UOffsetT(zAngle), 0)
}
func AttitudeData_FullStartZAngleVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func AttitudeData_FullAddXRate(builder *flatbuffers.Builder, xRate flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(19, flatbuffers.UOffsetT(xRate), 0)
}
func AttitudeData_FullStartXRateVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func AttitudeData_FullAddYRate(builder *flatbuffers.Builder, yRate flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(20, flatbuffers.UOffsetT(yRate), 0)
}
func AttitudeData_FullStartYRateVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func AttitudeData_FullAddZRate(builder *flatbuffers.Builder, zRate flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(21, flatbuffers.UOffsetT(zRate), 0)
}
func AttitudeData_FullStartZRateVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func AttitudeData_FullAddRa(builder *flatbuffers.Builder, ra float64) {
	builder.PrependFloat64Slot(22, ra, 0.0)
}
func AttitudeData_FullAddDeclination(builder *flatbuffers.Builder, declination float64) {
	builder.PrependFloat64Slot(23, declination, 0.0)
}
func AttitudeData_FullAddConingAngle(builder *flatbuffers.Builder, coningAngle float64) {
	builder.PrependFloat64Slot(24, coningAngle, 0.0)
}
func AttitudeData_FullAddPrecPeriod(builder *flatbuffers.Builder, precPeriod float64) {
	builder.PrependFloat64Slot(25, precPeriod, 0.0)
}
func AttitudeData_FullAddSpinPeriod(builder *flatbuffers.Builder, spinPeriod float64) {
	builder.PrependFloat64Slot(26, spinPeriod, 0.0)
}
func AttitudeData_FullAddCreatedAt(builder *flatbuffers.Builder, createdAt flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(27, flatbuffers.UOffsetT(createdAt), 0)
}
func AttitudeData_FullAddCreatedBy(builder *flatbuffers.Builder, createdBy flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(28, flatbuffers.UOffsetT(createdBy), 0)
}
func AttitudeData_FullAddSource(builder *flatbuffers.Builder, source flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(29, flatbuffers.UOffsetT(source), 0)
}
func AttitudeData_FullAddOrigin(builder *flatbuffers.Builder, origin flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(30, flatbuffers.UOffsetT(origin), 0)
}
func AttitudeData_FullAddDataMode(builder *flatbuffers.Builder, dataMode AttitudeData_Full_dataMode_Enum) {
	builder.PrependInt8Slot(31, int8(dataMode), 0)
}
func AttitudeData_FullAddOrigNetwork(builder *flatbuffers.Builder, origNetwork flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(32, flatbuffers.UOffsetT(origNetwork), 0)
}
func AttitudeData_FullEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
