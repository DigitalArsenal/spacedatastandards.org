// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package GroundImagery_Full

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

/// /// Imagery of terrestrial regions from on-orbit, air, and other sensors.
type GroundImagery_Full struct {
	_tab flatbuffers.Table
}

const GroundImagery_FullIdentifier = "GROU"

func GetRootAsGroundImagery_Full(buf []byte, offset flatbuffers.UOffsetT) *GroundImagery_Full {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &GroundImagery_Full{}
	x.Init(buf, n+offset)
	return x
}

func FinishGroundImagery_FullBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	identifierBytes := []byte(GroundImagery_FullIdentifier)
	builder.FinishWithFileIdentifier(offset, identifierBytes)
}

func GroundImagery_FullBufferHasIdentifier(buf []byte) bool {
	return flatbuffers.BufferHasIdentifier(buf, GroundImagery_FullIdentifier)
}

func GetSizePrefixedRootAsGroundImagery_Full(buf []byte, offset flatbuffers.UOffsetT) *GroundImagery_Full {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &GroundImagery_Full{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedGroundImagery_FullBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	identifierBytes := []byte(GroundImagery_FullIdentifier)
	builder.FinishSizePrefixedWithFileIdentifier(offset, identifierBytes)
}

func SizePrefixedGroundImagery_FullBufferHasIdentifier(buf []byte) bool {
	return flatbuffers.SizePrefixedBufferHasIdentifier(buf, GroundImagery_FullIdentifier)
}

func (rcv *GroundImagery_Full) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *GroundImagery_Full) Table() flatbuffers.Table {
	return rcv._tab
}

/// Unique identifier of the record, auto-generated by the system.
/// Example: /// Example: GROUNDIMAGERY-ID
/// Constraints: Minimum length = 1, Maximum length = 36
func (rcv *GroundImagery_Full) Id() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Unique identifier of the record, auto-generated by the system.
/// Example: /// Example: GROUNDIMAGERY-ID
/// Constraints: Minimum length = 1, Maximum length = 36
/// Optional ID of the sensor that produced this ground image.
/// Example: /// Example: SENSOR-ID
/// Constraints: Minimum length = 0, Maximum length = 36
func (rcv *GroundImagery_Full) IdSensor() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Optional ID of the sensor that produced this ground image.
/// Example: /// Example: SENSOR-ID
/// Constraints: Minimum length = 0, Maximum length = 36
/// Classification marking of the data in IC/CAPCO Portion-marked format.
/// Example: /// Example: U
/// Constraints: Minimum length = 1, Maximum length = 128
func (rcv *GroundImagery_Full) ClassificationMarking() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Classification marking of the data in IC/CAPCO Portion-marked format.
/// Example: /// Example: U
/// Constraints: Minimum length = 1, Maximum length = 128
/// Timestamp the image was captured/produced.
/// Example: /// Example: 2021-01-01T01:01:01.123456Z
/// Constraints: No constraints specified.
func (rcv *GroundImagery_Full) ImageTime() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Timestamp the image was captured/produced.
/// Example: /// Example: 2021-01-01T01:01:01.123456Z
/// Constraints: No constraints specified.
/// Name of the image file.
/// Example: /// Example: Example file name
/// Constraints: Minimum length = 1, Maximum length = 128
func (rcv *GroundImagery_Full) Filename() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Name of the image file.
/// Example: /// Example: Example file name
/// Constraints: Minimum length = 1, Maximum length = 128
/// Geographical region or polygon (lon/lat pairs) of the image as projected on the ground in geoJSON or geoText format. This is an optional convenience field only used for create operations. The system will auto-detect the format (Well Known Text or GeoJSON) and populate both regionText and regionGeoJSON fields appropriately. When omitted, regionText or regionGeoJSON is expected.
/// Example: /// Example: POLYGON((26.156175339112 67.3291113966927,26.0910220642717 67.2580009640721,26.6637992964562 67.1795862381682,26.730115808233 67.2501237475598,26.156175339112 67.3291113966927))
/// Constraints: Minimum length = 0, Maximum length = 65535
func (rcv *GroundImagery_Full) Region() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Geographical region or polygon (lon/lat pairs) of the image as projected on the ground in geoJSON or geoText format. This is an optional convenience field only used for create operations. The system will auto-detect the format (Well Known Text or GeoJSON) and populate both regionText and regionGeoJSON fields appropriately. When omitted, regionText or regionGeoJSON is expected.
/// Example: /// Example: POLYGON((26.156175339112 67.3291113966927,26.0910220642717 67.2580009640721,26.6637992964562 67.1795862381682,26.730115808233 67.2501237475598,26.156175339112 67.3291113966927))
/// Constraints: Minimum length = 0, Maximum length = 65535
/// Geographical region or polygon (lon/lat pairs), as depicted by the Well-Known Text representation of the geometry/geography, of the image as projected on the ground. WKT reference: https://www.opengeospatial.org/standards/wkt-crs. Ignored if included with a create operation that also specifies a valid region.
/// Example: /// Example: POLYGON((67.3291113966927 26.156175339112,67.2580009640721 26.091022064271,67.1795862381682 26.6637992964562,67.2501237475598 26.730115808233,67.3291113966927 26.156175339112))
/// Constraints: Minimum length = 0, Maximum length = 65535
func (rcv *GroundImagery_Full) RegionText() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Geographical region or polygon (lon/lat pairs), as depicted by the Well-Known Text representation of the geometry/geography, of the image as projected on the ground. WKT reference: https://www.opengeospatial.org/standards/wkt-crs. Ignored if included with a create operation that also specifies a valid region.
/// Example: /// Example: POLYGON((67.3291113966927 26.156175339112,67.2580009640721 26.091022064271,67.1795862381682 26.6637992964562,67.2501237475598 26.730115808233,67.3291113966927 26.156175339112))
/// Constraints: Minimum length = 0, Maximum length = 65535
/// Geographical region or polygon (lat/lon pairs), as depicted by the GeoJSON representation of the geometry/geography, of the image as projected on the ground. Reference: https://geojson.org/. Ignored if included with a create operation that also specifies a valid region or regionText.
/// Example: /// Example: {"type":"Polygon","coordinates":[[[67.3291113966927,26.156175339112],[67.2580009640721,26.091022064271],[67.1795862381682,26.6637992964562],[67.2501237475598,26.730115808233],[67.3291113966927,26.156175339112]]]}
/// Constraints: Minimum length = 0, Maximum length = 65535
func (rcv *GroundImagery_Full) RegionGeoJson() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(18))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Geographical region or polygon (lat/lon pairs), as depicted by the GeoJSON representation of the geometry/geography, of the image as projected on the ground. Reference: https://geojson.org/. Ignored if included with a create operation that also specifies a valid region or regionText.
/// Example: /// Example: {"type":"Polygon","coordinates":[[[67.3291113966927,26.156175339112],[67.2580009640721,26.091022064271],[67.1795862381682,26.6637992964562],[67.2501237475598,26.730115808233],[67.3291113966927,26.156175339112]]]}
/// Constraints: Minimum length = 0, Maximum length = 65535
/// Type of region as projected on the ground.
/// Example: /// Example: Polygon
/// Constraints: Minimum length = 0, Maximum length = 64
func (rcv *GroundImagery_Full) RegionType() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(20))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Type of region as projected on the ground.
/// Example: /// Example: Polygon
/// Constraints: Minimum length = 0, Maximum length = 64
/// Number of dimensions of the geometry depicted by region.
/// Example: /// Example: 2
/// Constraints: No constraints specified.
func (rcv *GroundImagery_Full) RegionNdims() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(22))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

/// Number of dimensions of the geometry depicted by region.
/// Example: /// Example: 2
/// Constraints: No constraints specified.
func (rcv *GroundImagery_Full) MutateRegionNdims(n int32) bool {
	return rcv._tab.MutateInt32Slot(22, n)
}

/// Geographical spatial_ref_sys for region.
/// Example: /// Example: 4326
/// Constraints: No constraints specified.
func (rcv *GroundImagery_Full) RegionSrid() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(24))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

/// Geographical spatial_ref_sys for region.
/// Example: /// Example: 4326
/// Constraints: No constraints specified.
func (rcv *GroundImagery_Full) MutateRegionSrid(n int32) bool {
	return rcv._tab.MutateInt32Slot(24, n)
}

/// Optional identifier provided by source to indicate the sensor identifier used to detect this event. This may be an internal identifier and not necessarily a valid sensor ID.
/// Example: /// Example: ORIGSENSOR-ID
/// Constraints: Minimum length = 0, Maximum length = 36
func (rcv *GroundImagery_Full) OrigSensorId() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(26))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Optional identifier provided by source to indicate the sensor identifier used to detect this event. This may be an internal identifier and not necessarily a valid sensor ID.
/// Example: /// Example: ORIGSENSOR-ID
/// Constraints: Minimum length = 0, Maximum length = 36
/// Optional identifier of the subject/target of the image, useful for correlating multiple images of the same subject.
/// Example: /// Example: SUBJECT-ID
/// Constraints: Minimum length = 0, Maximum length = 36
func (rcv *GroundImagery_Full) SubjectId() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(28))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Optional identifier of the subject/target of the image, useful for correlating multiple images of the same subject.
/// Example: /// Example: SUBJECT-ID
/// Constraints: Minimum length = 0, Maximum length = 36
/// Optional name/description associated with this image.
/// Example: /// Example: Example name
/// Constraints: Minimum length = 0, Maximum length = 128
func (rcv *GroundImagery_Full) Name() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(30))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Optional name/description associated with this image.
/// Example: /// Example: Example name
/// Constraints: Minimum length = 0, Maximum length = 128
/// Source of the data.
/// Example: /// Example: Bluestaq
/// Constraints: Minimum length = 1, Maximum length = 64
func (rcv *GroundImagery_Full) Source() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(32))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Source of the data.
/// Example: /// Example: Bluestaq
/// Constraints: Minimum length = 1, Maximum length = 64
/// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
/// Example: /// Example: THIRD_PARTY_DATASOURCE
/// Constraints: Minimum length = 0, Maximum length = 64
func (rcv *GroundImagery_Full) Origin() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(34))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
/// Example: /// Example: THIRD_PARTY_DATASOURCE
/// Constraints: Minimum length = 0, Maximum length = 64
/// The originating source network on which this record was created, auto-populated by the system.
/// Example: /// Example: ORIG
/// Constraints: Minimum length = 1, Maximum length = 32
func (rcv *GroundImagery_Full) OrigNetwork() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(36))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The originating source network on which this record was created, auto-populated by the system.
/// Example: /// Example: ORIG
/// Constraints: Minimum length = 1, Maximum length = 32
/// The source data library from which this record was received. This could be a remote or tactical UDL or another data library. If null, the record should be assumed to have originated from the primary Enterprise UDL.
/// Example: /// Example: AXE
/// Constraints: Minimum length = 0, Maximum length = 64
func (rcv *GroundImagery_Full) SourceDl() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(38))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The source data library from which this record was received. This could be a remote or tactical UDL or another data library. If null, the record should be assumed to have originated from the primary Enterprise UDL.
/// Example: /// Example: AXE
/// Constraints: Minimum length = 0, Maximum length = 64
/// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
/// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
/// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
/// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
/// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
/// Example: /// Example: TEST
/// Constraints: Minimum length = 1, Maximum length = 32
func (rcv *GroundImagery_Full) DataMode() GroundImagery_Full_dataMode_Enum {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(40))
	if o != 0 {
		return GroundImagery_Full_dataMode_Enum(rcv._tab.GetInt8(o + rcv._tab.Pos))
	}
	return 0
}

/// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
/// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
/// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
/// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
/// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
/// Example: /// Example: TEST
/// Constraints: Minimum length = 1, Maximum length = 32
func (rcv *GroundImagery_Full) MutateDataMode(n GroundImagery_Full_dataMode_Enum) bool {
	return rcv._tab.MutateInt8Slot(40, int8(n))
}

/// Time the row was created in the database, auto-populated by the system.
/// Example: /// Example: 2018-01-01T16:00:00.123Z
/// Constraints: No constraints specified.
func (rcv *GroundImagery_Full) CreatedAt() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(42))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Time the row was created in the database, auto-populated by the system.
/// Example: /// Example: 2018-01-01T16:00:00.123Z
/// Constraints: No constraints specified.
/// Application user who created the row in the database, auto-populated by the system.
/// Example: /// Example: some.user
/// Constraints: Minimum length = 1, Maximum length = 64
func (rcv *GroundImagery_Full) CreatedBy() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(44))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Application user who created the row in the database, auto-populated by the system.
/// Example: /// Example: some.user
/// Constraints: Minimum length = 1, Maximum length = 64
/// Read-only time the row was updated in the database, set automatically by the system on update.
/// Example: /// Example: 2018-01-02T16:00:00.123Z
/// Constraints: No constraints specified.
func (rcv *GroundImagery_Full) UpdatedAt() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(46))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Read-only time the row was updated in the database, set automatically by the system on update.
/// Example: /// Example: 2018-01-02T16:00:00.123Z
/// Constraints: No constraints specified.
/// Application user who last updated the row in the database, set by the system automatically and ignored on create/edit operations.
/// Example: /// Example: some.user
/// Constraints: Minimum length = 1, Maximum length = 64
func (rcv *GroundImagery_Full) UpdatedBy() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(48))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Application user who last updated the row in the database, set by the system automatically and ignored on create/edit operations.
/// Example: /// Example: some.user
/// Constraints: Minimum length = 1, Maximum length = 64
/// Optional identifier to track a commercial or marketplace transaction executed to produce this data.
/// Example: /// Example: 37bdef1f-5a4f-4776-bee4-7a1e0ec7d35a
/// Constraints: Minimum length = 0, Maximum length = 64
func (rcv *GroundImagery_Full) TransactionId() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(50))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Optional identifier to track a commercial or marketplace transaction executed to produce this data.
/// Example: /// Example: 37bdef1f-5a4f-4776-bee4-7a1e0ec7d35a
/// Constraints: Minimum length = 0, Maximum length = 64
/// Optional array of provider/source specific tags for this data, where each element is no longer than 32 characters, used for implementing data owner conditional access controls to restrict access to the data. Should be left null by data providers unless conditional access controls are coordinated with the UDL team.
/// Example: /// Example: ['PROVIDER_TAG1', 'PROVIDER_TAG2']
/// Constraints: No constraints specified.
func (rcv *GroundImagery_Full) Tags(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(52))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *GroundImagery_Full) TagsLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(52))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

/// Optional array of provider/source specific tags for this data, where each element is no longer than 32 characters, used for implementing data owner conditional access controls to restrict access to the data. Should be left null by data providers unless conditional access controls are coordinated with the UDL team.
/// Example: /// Example: ['PROVIDER_TAG1', 'PROVIDER_TAG2']
/// Constraints: No constraints specified.
/// Optional array of keywords for this image.
/// Example: /// Example: ['KEYWORD1', 'KEYWORD2']
/// Constraints: No constraints specified.
func (rcv *GroundImagery_Full) Keywords(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(54))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *GroundImagery_Full) KeywordsLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(54))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

/// Optional array of keywords for this image.
/// Example: /// Example: ['KEYWORD1', 'KEYWORD2']
/// Constraints: No constraints specified.
/// Description and notes of the image.
/// Example: /// Example: Example notes
/// Constraints: Minimum length = 0, Maximum length = 1024
func (rcv *GroundImagery_Full) Notes() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(56))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Description and notes of the image.
/// Example: /// Example: Example notes
/// Constraints: Minimum length = 0, Maximum length = 1024
/// Optional, field indicating type of image, NITF, PNG, etc.
/// Example: /// Example: PNG
/// Constraints: Minimum length = 1, Maximum length = 16
func (rcv *GroundImagery_Full) Format() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(58))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Optional, field indicating type of image, NITF, PNG, etc.
/// Example: /// Example: PNG
/// Constraints: Minimum length = 1, Maximum length = 16
/// Size of the image file. Units in bytes. If filesize is provided without an associated file, it defaults to 0.
/// Example: /// Example: 0
/// Constraints: No constraints specified.
func (rcv *GroundImagery_Full) Filesize() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(60))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

/// Size of the image file. Units in bytes. If filesize is provided without an associated file, it defaults to 0.
/// Example: /// Example: 0
/// Constraints: No constraints specified.
func (rcv *GroundImagery_Full) MutateFilesize(n int64) bool {
	return rcv._tab.MutateInt64Slot(60, n)
}

/// MD5 value of the file. The ingest/create operation will automatically generate the value.
/// Example: /// Example: 120EA8A25E5D487BF68B5F7096440019
/// Constraints: Minimum length = 1, Maximum length = 256
func (rcv *GroundImagery_Full) ChecksumValue() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(62))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// MD5 value of the file. The ingest/create operation will automatically generate the value.
/// Example: /// Example: 120EA8A25E5D487BF68B5F7096440019
/// Constraints: Minimum length = 1, Maximum length = 256
func GroundImagery_FullStart(builder *flatbuffers.Builder) {
	builder.StartObject(30)
}
func GroundImagery_FullAddId(builder *flatbuffers.Builder, id flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(id), 0)
}
func GroundImagery_FullAddIdSensor(builder *flatbuffers.Builder, idSensor flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(idSensor), 0)
}
func GroundImagery_FullAddClassificationMarking(builder *flatbuffers.Builder, classificationMarking flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(classificationMarking), 0)
}
func GroundImagery_FullAddImageTime(builder *flatbuffers.Builder, imageTime flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(3, flatbuffers.UOffsetT(imageTime), 0)
}
func GroundImagery_FullAddFilename(builder *flatbuffers.Builder, filename flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(4, flatbuffers.UOffsetT(filename), 0)
}
func GroundImagery_FullAddRegion(builder *flatbuffers.Builder, region flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(5, flatbuffers.UOffsetT(region), 0)
}
func GroundImagery_FullAddRegionText(builder *flatbuffers.Builder, regionText flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(6, flatbuffers.UOffsetT(regionText), 0)
}
func GroundImagery_FullAddRegionGeoJson(builder *flatbuffers.Builder, regionGeoJson flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(7, flatbuffers.UOffsetT(regionGeoJson), 0)
}
func GroundImagery_FullAddRegionType(builder *flatbuffers.Builder, regionType flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(8, flatbuffers.UOffsetT(regionType), 0)
}
func GroundImagery_FullAddRegionNdims(builder *flatbuffers.Builder, regionNdims int32) {
	builder.PrependInt32Slot(9, regionNdims, 0)
}
func GroundImagery_FullAddRegionSrid(builder *flatbuffers.Builder, regionSrid int32) {
	builder.PrependInt32Slot(10, regionSrid, 0)
}
func GroundImagery_FullAddOrigSensorId(builder *flatbuffers.Builder, origSensorId flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(11, flatbuffers.UOffsetT(origSensorId), 0)
}
func GroundImagery_FullAddSubjectId(builder *flatbuffers.Builder, subjectId flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(12, flatbuffers.UOffsetT(subjectId), 0)
}
func GroundImagery_FullAddName(builder *flatbuffers.Builder, name flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(13, flatbuffers.UOffsetT(name), 0)
}
func GroundImagery_FullAddSource(builder *flatbuffers.Builder, source flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(14, flatbuffers.UOffsetT(source), 0)
}
func GroundImagery_FullAddOrigin(builder *flatbuffers.Builder, origin flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(15, flatbuffers.UOffsetT(origin), 0)
}
func GroundImagery_FullAddOrigNetwork(builder *flatbuffers.Builder, origNetwork flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(16, flatbuffers.UOffsetT(origNetwork), 0)
}
func GroundImagery_FullAddSourceDl(builder *flatbuffers.Builder, sourceDl flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(17, flatbuffers.UOffsetT(sourceDl), 0)
}
func GroundImagery_FullAddDataMode(builder *flatbuffers.Builder, dataMode GroundImagery_Full_dataMode_Enum) {
	builder.PrependInt8Slot(18, int8(dataMode), 0)
}
func GroundImagery_FullAddCreatedAt(builder *flatbuffers.Builder, createdAt flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(19, flatbuffers.UOffsetT(createdAt), 0)
}
func GroundImagery_FullAddCreatedBy(builder *flatbuffers.Builder, createdBy flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(20, flatbuffers.UOffsetT(createdBy), 0)
}
func GroundImagery_FullAddUpdatedAt(builder *flatbuffers.Builder, updatedAt flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(21, flatbuffers.UOffsetT(updatedAt), 0)
}
func GroundImagery_FullAddUpdatedBy(builder *flatbuffers.Builder, updatedBy flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(22, flatbuffers.UOffsetT(updatedBy), 0)
}
func GroundImagery_FullAddTransactionId(builder *flatbuffers.Builder, transactionId flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(23, flatbuffers.UOffsetT(transactionId), 0)
}
func GroundImagery_FullAddTags(builder *flatbuffers.Builder, tags flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(24, flatbuffers.UOffsetT(tags), 0)
}
func GroundImagery_FullStartTagsVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func GroundImagery_FullAddKeywords(builder *flatbuffers.Builder, keywords flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(25, flatbuffers.UOffsetT(keywords), 0)
}
func GroundImagery_FullStartKeywordsVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func GroundImagery_FullAddNotes(builder *flatbuffers.Builder, notes flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(26, flatbuffers.UOffsetT(notes), 0)
}
func GroundImagery_FullAddFormat(builder *flatbuffers.Builder, format flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(27, flatbuffers.UOffsetT(format), 0)
}
func GroundImagery_FullAddFilesize(builder *flatbuffers.Builder, filesize int64) {
	builder.PrependInt64Slot(28, filesize, 0)
}
func GroundImagery_FullAddChecksumValue(builder *flatbuffers.Builder, checksumValue flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(29, flatbuffers.UOffsetT(checksumValue), 0)
}
func GroundImagery_FullEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
