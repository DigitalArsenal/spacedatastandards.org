// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package ISRCollectionAdditional_Full

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

/// /// Additional start and stop for the collection.
type ISRCollectionAdditional_Full struct {
	_tab flatbuffers.Table
}

const ISRCollectionAdditional_FullIdentifier = "ISRC"

func GetRootAsISRCollectionAdditional_Full(buf []byte, offset flatbuffers.UOffsetT) *ISRCollectionAdditional_Full {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &ISRCollectionAdditional_Full{}
	x.Init(buf, n+offset)
	return x
}

func FinishISRCollectionAdditional_FullBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	identifierBytes := []byte(ISRCollectionAdditional_FullIdentifier)
	builder.FinishWithFileIdentifier(offset, identifierBytes)
}

func ISRCollectionAdditional_FullBufferHasIdentifier(buf []byte) bool {
	return flatbuffers.BufferHasIdentifier(buf, ISRCollectionAdditional_FullIdentifier)
}

func GetSizePrefixedRootAsISRCollectionAdditional_Full(buf []byte, offset flatbuffers.UOffsetT) *ISRCollectionAdditional_Full {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &ISRCollectionAdditional_Full{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedISRCollectionAdditional_FullBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	identifierBytes := []byte(ISRCollectionAdditional_FullIdentifier)
	builder.FinishSizePrefixedWithFileIdentifier(offset, identifierBytes)
}

func SizePrefixedISRCollectionAdditional_FullBufferHasIdentifier(buf []byte) bool {
	return flatbuffers.SizePrefixedBufferHasIdentifier(buf, ISRCollectionAdditional_FullIdentifier)
}

func (rcv *ISRCollectionAdditional_Full) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *ISRCollectionAdditional_Full) Table() flatbuffers.Table {
	return rcv._tab
}

/// Unique Identifier of additional collection period.
/// Example: /// Example: ISRCOLLECTIONADDITIONAL
/// Constraints: Minimum length = 0, Maximum length = 36
func (rcv *ISRCollectionAdditional_Full) Id() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Unique Identifier of additional collection period.
/// Example: /// Example: ISRCOLLECTIONADDITIONAL
/// Constraints: Minimum length = 0, Maximum length = 36
/// Start time of collection, in ISO 8601 UTC format.
/// Example: /// Example: 2021-01-19T01:01:15.001Z
/// Constraints: No constraints specified.
func (rcv *ISRCollectionAdditional_Full) Start() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Start time of collection, in ISO 8601 UTC format.
/// Example: /// Example: 2021-01-19T01:01:15.001Z
/// Constraints: No constraints specified.
/// Stop time of collection, in ISO 8601 UTC format.
/// Example: /// Example: 2021-01-19T01:01:15.001Z
/// Constraints: No constraints specified.
func (rcv *ISRCollectionAdditional_Full) Stop() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Stop time of collection, in ISO 8601 UTC format.
/// Example: /// Example: 2021-01-19T01:01:15.001Z
/// Constraints: No constraints specified.
func ISRCollectionAdditional_FullStart(builder *flatbuffers.Builder) {
	builder.StartObject(3)
}
func ISRCollectionAdditional_FullAddId(builder *flatbuffers.Builder, id flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(id), 0)
}
func ISRCollectionAdditional_FullAddStart(builder *flatbuffers.Builder, start flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(start), 0)
}
func ISRCollectionAdditional_FullAddStop(builder *flatbuffers.Builder, stop flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(stop), 0)
}
func ISRCollectionAdditional_FullEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
