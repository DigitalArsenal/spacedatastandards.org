// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package AirEvent_Full

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

/// /// Information related to an air event (e.g. FUEL TRANSFER, AIR DROP) and the associated aircraft.
type AirEvent_Full struct {
	_tab flatbuffers.Table
}

const AirEvent_FullIdentifier = "AIRE"

func GetRootAsAirEvent_Full(buf []byte, offset flatbuffers.UOffsetT) *AirEvent_Full {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &AirEvent_Full{}
	x.Init(buf, n+offset)
	return x
}

func FinishAirEvent_FullBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	identifierBytes := []byte(AirEvent_FullIdentifier)
	builder.FinishWithFileIdentifier(offset, identifierBytes)
}

func AirEvent_FullBufferHasIdentifier(buf []byte) bool {
	return flatbuffers.BufferHasIdentifier(buf, AirEvent_FullIdentifier)
}

func GetSizePrefixedRootAsAirEvent_Full(buf []byte, offset flatbuffers.UOffsetT) *AirEvent_Full {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &AirEvent_Full{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedAirEvent_FullBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	identifierBytes := []byte(AirEvent_FullIdentifier)
	builder.FinishSizePrefixedWithFileIdentifier(offset, identifierBytes)
}

func SizePrefixedAirEvent_FullBufferHasIdentifier(buf []byte) bool {
	return flatbuffers.SizePrefixedBufferHasIdentifier(buf, AirEvent_FullIdentifier)
}

func (rcv *AirEvent_Full) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *AirEvent_Full) Table() flatbuffers.Table {
	return rcv._tab
}

/// Unique identifier of the record, auto-generated by the system if not provided on create operations.
/// Example: /// Example: 026dd511-8ba5-47d3-9909-836149f87686
/// Constraints: Minimum length = 1, Maximum length = 36
func (rcv *AirEvent_Full) Id() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Unique identifier of the record, auto-generated by the system if not provided on create operations.
/// Example: /// Example: 026dd511-8ba5-47d3-9909-836149f87686
/// Constraints: Minimum length = 1, Maximum length = 36
/// Classification marking of the data in IC/CAPCO Portion-marked format.
/// Example: /// Example: U
/// Constraints: Minimum length = 1, Maximum length = 128
func (rcv *AirEvent_Full) ClassificationMarking() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Classification marking of the data in IC/CAPCO Portion-marked format.
/// Example: /// Example: U
/// Constraints: Minimum length = 1, Maximum length = 128
/// Type of air event (e.g. FUEL TRANSFER, AIR DROP, etc).
/// Example: /// Example: FUEL TRANSFER
/// Constraints: Minimum length = 1, Maximum length = 32
func (rcv *AirEvent_Full) Type() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Type of air event (e.g. FUEL TRANSFER, AIR DROP, etc).
/// Example: /// Example: FUEL TRANSFER
/// Constraints: Minimum length = 1, Maximum length = 32
/// The UDL unique identifier of the sortie associated with this air event.
/// Example: /// Example: b9866c03-2397-4506-8153-852e72d9b54f
/// Constraints: Minimum length = 0, Maximum length = 36
func (rcv *AirEvent_Full) IdSortie() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The UDL unique identifier of the sortie associated with this air event.
/// Example: /// Example: b9866c03-2397-4506-8153-852e72d9b54f
/// Constraints: Minimum length = 0, Maximum length = 36
/// The UDL unique identifier of the mission associated with this air event.
/// Example: /// Example: 190dea6d-2a90-45a2-a276-be9047d9b96c
/// Constraints: Minimum length = 0, Maximum length = 36
func (rcv *AirEvent_Full) IdMission() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The UDL unique identifier of the mission associated with this air event.
/// Example: /// Example: 190dea6d-2a90-45a2-a276-be9047d9b96c
/// Constraints: Minimum length = 0, Maximum length = 36
/// Optional air event ID from external systems. This field has no meaning within UDL and is provided as a convenience for systems that require tracking of an internal system generated ID.
/// Example: /// Example: MB014313032022407540
/// Constraints: Minimum length = 0, Maximum length = 36
func (rcv *AirEvent_Full) ExternalAirEventId() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Optional air event ID from external systems. This field has no meaning within UDL and is provided as a convenience for systems that require tracking of an internal system generated ID.
/// Example: /// Example: MB014313032022407540
/// Constraints: Minimum length = 0, Maximum length = 36
/// Identifies the Itinerary point of a sortie where an air event occurs.
/// Example: /// Example: 825
/// Constraints: No constraints specified.
func (rcv *AirEvent_Full) LegNum() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

/// Identifies the Itinerary point of a sortie where an air event occurs.
/// Example: /// Example: 825
/// Constraints: No constraints specified.
func (rcv *AirEvent_Full) MutateLegNum(n int32) bool {
	return rcv._tab.MutateInt32Slot(16, n)
}

/// The location representing this air event specified as a feature Id. Locations specified include air refueling track Ids and air drop event locations.
/// Example: /// Example: 901EW
/// Constraints: Minimum length = 0, Maximum length = 32
func (rcv *AirEvent_Full) Location() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(18))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The location representing this air event specified as a feature Id. Locations specified include air refueling track Ids and air drop event locations.
/// Example: /// Example: 901EW
/// Constraints: Minimum length = 0, Maximum length = 32
/// The purpose of the air event at the arrival location. Can be either descriptive text such as 'fuel onload' or a purpose code specified by the provider, such as 'A'.
/// Example: /// Example: A
/// Constraints: Minimum length = 0, Maximum length = 36
func (rcv *AirEvent_Full) ArrPurpose() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(20))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The purpose of the air event at the arrival location. Can be either descriptive text such as 'fuel onload' or a purpose code specified by the provider, such as 'A'.
/// Example: /// Example: A
/// Constraints: Minimum length = 0, Maximum length = 36
/// The scheduled arrival time of the aircraft at the air event, in ISO 8601 UTC format with millisecond precision.
/// Example: /// Example: 2024-01-07T13:55:43.123Z
/// Constraints: No constraints specified.
func (rcv *AirEvent_Full) PlannedArrTime() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(22))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The scheduled arrival time of the aircraft at the air event, in ISO 8601 UTC format with millisecond precision.
/// Example: /// Example: 2024-01-07T13:55:43.123Z
/// Constraints: No constraints specified.
/// The current estimated arrival time of the aircraft at the air event, in ISO 8601 UTC format with millisecond precision.
/// Example: /// Example: 2024-01-07T13:59:48.123Z
/// Constraints: No constraints specified.
func (rcv *AirEvent_Full) EstArrTime() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(24))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The current estimated arrival time of the aircraft at the air event, in ISO 8601 UTC format with millisecond precision.
/// Example: /// Example: 2024-01-07T13:59:48.123Z
/// Constraints: No constraints specified.
/// The actual arrival time of the aircraft at the air event, in ISO 8601 UTC format with millisecond precision.
/// Example: /// Example: 2024-01-07T14:00:03.123Z
/// Constraints: No constraints specified.
func (rcv *AirEvent_Full) ActualArrTime() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(26))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The actual arrival time of the aircraft at the air event, in ISO 8601 UTC format with millisecond precision.
/// Example: /// Example: 2024-01-07T14:00:03.123Z
/// Constraints: No constraints specified.
/// The purpose of the air event at the departure location. Can be either descriptive text such as 'fuel onload' or a purpose code specified by the provider, such as 'A'.
/// Example: /// Example: Q
/// Constraints: Minimum length = 0, Maximum length = 36
func (rcv *AirEvent_Full) DepPurpose() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(28))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The purpose of the air event at the departure location. Can be either descriptive text such as 'fuel onload' or a purpose code specified by the provider, such as 'A'.
/// Example: /// Example: Q
/// Constraints: Minimum length = 0, Maximum length = 36
/// The scheduled departure time of the aircraft from the air event, in ISO 8601 UTC format with millisecond precision.
/// Example: /// Example: 2024-01-07T14:15:43.123Z
/// Constraints: No constraints specified.
func (rcv *AirEvent_Full) PlannedDepTime() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(30))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The scheduled departure time of the aircraft from the air event, in ISO 8601 UTC format with millisecond precision.
/// Example: /// Example: 2024-01-07T14:15:43.123Z
/// Constraints: No constraints specified.
/// The current estimated departure time of the aircraft from the air event, in ISO 8601 UTC format with millisecond precision.
/// Example: /// Example: 2024-01-07T14:19:48.123Z
/// Constraints: No constraints specified.
func (rcv *AirEvent_Full) EstDepTime() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(32))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The current estimated departure time of the aircraft from the air event, in ISO 8601 UTC format with millisecond precision.
/// Example: /// Example: 2024-01-07T14:19:48.123Z
/// Constraints: No constraints specified.
/// The actual departure time of the aircraft from the air event, in ISO 8601 UTC format with millisecond precision.
/// Example: /// Example: 2024-01-07T14:17:03.123Z
/// Constraints: No constraints specified.
func (rcv *AirEvent_Full) ActualDepTime() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(34))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The actual departure time of the aircraft from the air event, in ISO 8601 UTC format with millisecond precision.
/// Example: /// Example: 2024-01-07T14:17:03.123Z
/// Constraints: No constraints specified.
/// Optional air refueling track ID from external systems. This field has no meaning within UDL and is provided as a convenience for systems that require tracking of an internal system generated ID.
/// Example: /// Example: 6418a4b68e5c3896bf024cc79aa4174c
/// Constraints: Minimum length = 0, Maximum length = 36
func (rcv *AirEvent_Full) ExternalArtrackId() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(36))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Optional air refueling track ID from external systems. This field has no meaning within UDL and is provided as a convenience for systems that require tracking of an internal system generated ID.
/// Example: /// Example: 6418a4b68e5c3896bf024cc79aa4174c
/// Constraints: Minimum length = 0, Maximum length = 36
/// Identifier of the air refueling track, if applicable.
/// Example: /// Example: CH61
/// Constraints: Minimum length = 0, Maximum length = 15
func (rcv *AirEvent_Full) ArTrackId() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(38))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Identifier of the air refueling track, if applicable.
/// Example: /// Example: CH61
/// Constraints: Minimum length = 0, Maximum length = 15
/// Name of the air refueling track, if applicable.
/// Example: /// Example: CH61 POST
/// Constraints: Minimum length = 0, Maximum length = 50
func (rcv *AirEvent_Full) ArTrackName() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(40))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Name of the air refueling track, if applicable.
/// Example: /// Example: CH61 POST
/// Constraints: Minimum length = 0, Maximum length = 50
/// The Rendezvous Control Time is the planned time the tanker and receiver aircraft will rendezvous for an en route type air refueling event, in ISO 8601 UTC format, with millisecond precision.
/// Example: /// Example: 2024-01-07T13:55:43.123Z
/// Constraints: No constraints specified.
func (rcv *AirEvent_Full) Rzct() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(42))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The Rendezvous Control Time is the planned time the tanker and receiver aircraft will rendezvous for an en route type air refueling event, in ISO 8601 UTC format, with millisecond precision.
/// Example: /// Example: 2024-01-07T13:55:43.123Z
/// Constraints: No constraints specified.
/// The Air Refueling Control Time is the planned time the tanker aircraft will transfer fuel to the receiver aircraft, in ISO 8601 UTC format, with millisecond precision.
/// Example: /// Example: 2024-01-07T15:11:27.123Z
/// Constraints: No constraints specified.
func (rcv *AirEvent_Full) Arct() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(44))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The Air Refueling Control Time is the planned time the tanker aircraft will transfer fuel to the receiver aircraft, in ISO 8601 UTC format, with millisecond precision.
/// Example: /// Example: 2024-01-07T15:11:27.123Z
/// Constraints: No constraints specified.
/// Altitude of this air event, in feet.
/// Example: /// Example: 28000.1
/// Constraints: No constraints specified.
func (rcv *AirEvent_Full) BaseAlt() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(46))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Altitude of this air event, in feet.
/// Example: /// Example: 28000.1
/// Constraints: No constraints specified.
func (rcv *AirEvent_Full) MutateBaseAlt(n float64) bool {
	return rcv._tab.MutateFloat64Slot(46, n)
}

/// Priority of this air event.
/// Example: /// Example: 1A2
/// Constraints: Minimum length = 0, Maximum length = 3
func (rcv *AirEvent_Full) Priority() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(48))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Priority of this air event.
/// Example: /// Example: 1A2
/// Constraints: Minimum length = 0, Maximum length = 3
/// Length of time the receiver unit has requested for an air event, in hours.
/// Example: /// Example: 1.5
/// Constraints: No constraints specified.
func (rcv *AirEvent_Full) TrackTime() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(50))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Length of time the receiver unit has requested for an air event, in hours.
/// Example: /// Example: 1.5
/// Constraints: No constraints specified.
func (rcv *AirEvent_Full) MutateTrackTime(n float64) bool {
	return rcv._tab.MutateFloat64Slot(50, n)
}

/// Status of this air refueling event track reservation. Receivers are responsible for scheduling or reserving air refueling tracks. Possible values are A (Altitude Reservation), R (Reserved), or Q (Questionable).
/// Example: /// Example: R
/// Constraints: Minimum length = 0, Maximum length = 2
func (rcv *AirEvent_Full) StatusCode() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(52))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Status of this air refueling event track reservation. Receivers are responsible for scheduling or reserving air refueling tracks. Possible values are A (Altitude Reservation), R (Reserved), or Q (Questionable).
/// Example: /// Example: R
/// Constraints: Minimum length = 0, Maximum length = 2
/// Rendezvous point for the tanker and receiver during this air refueling event. Possible values are AN (Anchor Nav Point), AP (Anchor Pattern), CP (Control Point), ET (Entry Point), EX (Exit Point), IP (Initial Point), NC (Nav Check Point).
/// Example: /// Example: AN
/// Constraints: Minimum length = 0, Maximum length = 20
func (rcv *AirEvent_Full) RzPoint() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(54))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Rendezvous point for the tanker and receiver during this air refueling event. Possible values are AN (Anchor Nav Point), AP (Anchor Pattern), CP (Control Point), ET (Entry Point), EX (Exit Point), IP (Initial Point), NC (Nav Check Point).
/// Example: /// Example: AN
/// Constraints: Minimum length = 0, Maximum length = 20
/// Type of rendezvous used for this air refueling event. Possible values are BUD (Buddy), EN (Enroute), GCI (Ground Control), PP (Point Parallel).
/// Example: /// Example: PP
/// Constraints: Minimum length = 0, Maximum length = 3
func (rcv *AirEvent_Full) RzType() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(56))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Type of rendezvous used for this air refueling event. Possible values are BUD (Buddy), EN (Enroute), GCI (Ground Control), PP (Point Parallel).
/// Example: /// Example: PP
/// Constraints: Minimum length = 0, Maximum length = 3
/// Type of process used by AMC to schedule this air refueling event. Possible values are A (Matched Long Range), F (Matched AMC Short Notice), N (Unmatched Theater Operation Short Notice (Theater Assets)), R, Unmatched Long Range, S (Soft Air Refueling), T (Matched Theater Operation Short Notice (Theater Assets)), V (Unmatched AMC Short Notice), X (Unmatched Theater Operation Short Notice (AMC Assets)), Y (Matched Theater Operation Short Notice (AMC Assets)), Z (Other Air Refueling).
/// Example: /// Example: V
/// Constraints: Minimum length = 0, Maximum length = 2
func (rcv *AirEvent_Full) ArEventType() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(58))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Type of process used by AMC to schedule this air refueling event. Possible values are A (Matched Long Range), F (Matched AMC Short Notice), N (Unmatched Theater Operation Short Notice (Theater Assets)), R, Unmatched Long Range, S (Soft Air Refueling), T (Matched Theater Operation Short Notice (Theater Assets)), V (Unmatched AMC Short Notice), X (Unmatched Theater Operation Short Notice (AMC Assets)), Y (Matched Theater Operation Short Notice (AMC Assets)), Z (Other Air Refueling).
/// Example: /// Example: V
/// Constraints: Minimum length = 0, Maximum length = 2
/// The number of tankers requested for an air refueling event.
/// Example: /// Example: 1
/// Constraints: No constraints specified.
func (rcv *AirEvent_Full) NumTankers() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(60))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

/// The number of tankers requested for an air refueling event.
/// Example: /// Example: 1
/// Constraints: No constraints specified.
func (rcv *AirEvent_Full) MutateNumTankers(n int32) bool {
	return rcv._tab.MutateInt32Slot(60, n)
}

/// Flag indicating if the receiver unit has requested flying an air refueling track in both directions.
/// Example: /// Example: True
/// Constraints: No constraints specified.
func (rcv *AirEvent_Full) RevTrack() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(62))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

/// Flag indicating if the receiver unit has requested flying an air refueling track in both directions.
/// Example: /// Example: True
/// Constraints: No constraints specified.
func (rcv *AirEvent_Full) MutateRevTrack(n bool) bool {
	return rcv._tab.MutateBoolSlot(62, n)
}

/// Flag indicating that the receiver unit has requested flying a short portion of an air refueling track.
/// Example: /// Example: True
/// Constraints: No constraints specified.
func (rcv *AirEvent_Full) ShortTrack() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(64))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

/// Flag indicating that the receiver unit has requested flying a short portion of an air refueling track.
/// Example: /// Example: True
/// Constraints: No constraints specified.
func (rcv *AirEvent_Full) MutateShortTrack(n bool) bool {
	return rcv._tab.MutateBoolSlot(64, n)
}

/// Flag indicating that this air refueling event has been cancelled.
/// Example: /// Example: False
/// Constraints: No constraints specified.
func (rcv *AirEvent_Full) Cancelled() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(66))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

/// Flag indicating that this air refueling event has been cancelled.
/// Example: /// Example: False
/// Constraints: No constraints specified.
func (rcv *AirEvent_Full) MutateCancelled(n bool) bool {
	return rcv._tab.MutateBoolSlot(66, n)
}

/// Collection of tanker aircraft associated with this Air Event.
/// Example: /// Example: No example provided.
/// Constraints: No constraints specified.
func (rcv *AirEvent_Full) Tankers(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(68))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *AirEvent_Full) TankersLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(68))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

/// Collection of tanker aircraft associated with this Air Event.
/// Example: /// Example: No example provided.
/// Constraints: No constraints specified.
/// Collection of receiver aircraft associated with this Air Event.
/// Example: /// Example: No example provided.
/// Constraints: No constraints specified.
func (rcv *AirEvent_Full) Receivers(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(70))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *AirEvent_Full) ReceiversLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(70))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

/// Collection of receiver aircraft associated with this Air Event.
/// Example: /// Example: No example provided.
/// Constraints: No constraints specified.
/// Collection of remarks associated with this Air Event.
/// Example: /// Example: No example provided.
/// Constraints: No constraints specified.
func (rcv *AirEvent_Full) Remarks(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(72))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *AirEvent_Full) RemarksLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(72))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

/// Collection of remarks associated with this Air Event.
/// Example: /// Example: No example provided.
/// Constraints: No constraints specified.
/// Time the row was created in the database, auto-populated by the system.
/// Example: /// Example: 2018-01-01T16:00:00.123Z
/// Constraints: No constraints specified.
func (rcv *AirEvent_Full) CreatedAt() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(74))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Time the row was created in the database, auto-populated by the system.
/// Example: /// Example: 2018-01-01T16:00:00.123Z
/// Constraints: No constraints specified.
/// Application user who created the row in the database, auto-populated by the system.
/// Example: /// Example: some.user
/// Constraints: Minimum length = 1, Maximum length = 64
func (rcv *AirEvent_Full) CreatedBy() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(76))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Application user who created the row in the database, auto-populated by the system.
/// Example: /// Example: some.user
/// Constraints: Minimum length = 1, Maximum length = 64
/// Time the row was updated in the database, auto-populated by the system.
/// Example: /// Example: 2018-01-01T16:00:00.123Z
/// Constraints: No constraints specified.
func (rcv *AirEvent_Full) UpdatedAt() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(78))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Time the row was updated in the database, auto-populated by the system.
/// Example: /// Example: 2018-01-01T16:00:00.123Z
/// Constraints: No constraints specified.
/// Application user who updated the row in the database, auto-populated by the system.
/// Example: /// Example: some.user
/// Constraints: Minimum length = 0, Maximum length = 64
func (rcv *AirEvent_Full) UpdatedBy() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(80))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Application user who updated the row in the database, auto-populated by the system.
/// Example: /// Example: some.user
/// Constraints: Minimum length = 0, Maximum length = 64
/// The source data library from which this record was received. This could be a remote or tactical UDL or another data library. If null, the record should be assumed to have originated from the primary Enterprise UDL.
/// Example: /// Example: AXE
/// Constraints: Minimum length = 0, Maximum length = 64
func (rcv *AirEvent_Full) SourceDl() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(82))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The source data library from which this record was received. This could be a remote or tactical UDL or another data library. If null, the record should be assumed to have originated from the primary Enterprise UDL.
/// Example: /// Example: AXE
/// Constraints: Minimum length = 0, Maximum length = 64
/// Source of the data.
/// Example: /// Example: Bluestaq
/// Constraints: Minimum length = 1, Maximum length = 64
func (rcv *AirEvent_Full) Source() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(84))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Source of the data.
/// Example: /// Example: Bluestaq
/// Constraints: Minimum length = 1, Maximum length = 64
/// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
/// Example: /// Example: THIRD_PARTY_DATASOURCE
/// Constraints: Minimum length = 0, Maximum length = 64
func (rcv *AirEvent_Full) Origin() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(86))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
/// Example: /// Example: THIRD_PARTY_DATASOURCE
/// Constraints: Minimum length = 0, Maximum length = 64
/// The originating source network on which this record was created, auto-populated by the system.
/// Example: /// Example: ORIG
/// Constraints: Minimum length = 1, Maximum length = 32
func (rcv *AirEvent_Full) OrigNetwork() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(88))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The originating source network on which this record was created, auto-populated by the system.
/// Example: /// Example: ORIG
/// Constraints: Minimum length = 1, Maximum length = 32
/// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
/// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
/// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
/// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
/// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
/// Example: /// Example: TEST
/// Constraints: Minimum length = 1, Maximum length = 32
func (rcv *AirEvent_Full) DataMode() AirEvent_Full_dataMode_Enum {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(90))
	if o != 0 {
		return AirEvent_Full_dataMode_Enum(rcv._tab.GetInt8(o + rcv._tab.Pos))
	}
	return 0
}

/// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
/// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
/// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
/// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
/// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
/// Example: /// Example: TEST
/// Constraints: Minimum length = 1, Maximum length = 32
func (rcv *AirEvent_Full) MutateDataMode(n AirEvent_Full_dataMode_Enum) bool {
	return rcv._tab.MutateInt8Slot(90, int8(n))
}

func AirEvent_FullStart(builder *flatbuffers.Builder) {
	builder.StartObject(44)
}
func AirEvent_FullAddId(builder *flatbuffers.Builder, id flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(id), 0)
}
func AirEvent_FullAddClassificationMarking(builder *flatbuffers.Builder, classificationMarking flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(classificationMarking), 0)
}
func AirEvent_FullAddType(builder *flatbuffers.Builder, type_ flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(type_), 0)
}
func AirEvent_FullAddIdSortie(builder *flatbuffers.Builder, idSortie flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(3, flatbuffers.UOffsetT(idSortie), 0)
}
func AirEvent_FullAddIdMission(builder *flatbuffers.Builder, idMission flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(4, flatbuffers.UOffsetT(idMission), 0)
}
func AirEvent_FullAddExternalAirEventId(builder *flatbuffers.Builder, externalAirEventId flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(5, flatbuffers.UOffsetT(externalAirEventId), 0)
}
func AirEvent_FullAddLegNum(builder *flatbuffers.Builder, legNum int32) {
	builder.PrependInt32Slot(6, legNum, 0)
}
func AirEvent_FullAddLocation(builder *flatbuffers.Builder, location flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(7, flatbuffers.UOffsetT(location), 0)
}
func AirEvent_FullAddArrPurpose(builder *flatbuffers.Builder, arrPurpose flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(8, flatbuffers.UOffsetT(arrPurpose), 0)
}
func AirEvent_FullAddPlannedArrTime(builder *flatbuffers.Builder, plannedArrTime flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(9, flatbuffers.UOffsetT(plannedArrTime), 0)
}
func AirEvent_FullAddEstArrTime(builder *flatbuffers.Builder, estArrTime flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(10, flatbuffers.UOffsetT(estArrTime), 0)
}
func AirEvent_FullAddActualArrTime(builder *flatbuffers.Builder, actualArrTime flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(11, flatbuffers.UOffsetT(actualArrTime), 0)
}
func AirEvent_FullAddDepPurpose(builder *flatbuffers.Builder, depPurpose flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(12, flatbuffers.UOffsetT(depPurpose), 0)
}
func AirEvent_FullAddPlannedDepTime(builder *flatbuffers.Builder, plannedDepTime flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(13, flatbuffers.UOffsetT(plannedDepTime), 0)
}
func AirEvent_FullAddEstDepTime(builder *flatbuffers.Builder, estDepTime flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(14, flatbuffers.UOffsetT(estDepTime), 0)
}
func AirEvent_FullAddActualDepTime(builder *flatbuffers.Builder, actualDepTime flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(15, flatbuffers.UOffsetT(actualDepTime), 0)
}
func AirEvent_FullAddExternalArtrackId(builder *flatbuffers.Builder, externalArtrackId flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(16, flatbuffers.UOffsetT(externalArtrackId), 0)
}
func AirEvent_FullAddArTrackId(builder *flatbuffers.Builder, arTrackId flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(17, flatbuffers.UOffsetT(arTrackId), 0)
}
func AirEvent_FullAddArTrackName(builder *flatbuffers.Builder, arTrackName flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(18, flatbuffers.UOffsetT(arTrackName), 0)
}
func AirEvent_FullAddRzct(builder *flatbuffers.Builder, rzct flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(19, flatbuffers.UOffsetT(rzct), 0)
}
func AirEvent_FullAddArct(builder *flatbuffers.Builder, arct flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(20, flatbuffers.UOffsetT(arct), 0)
}
func AirEvent_FullAddBaseAlt(builder *flatbuffers.Builder, baseAlt float64) {
	builder.PrependFloat64Slot(21, baseAlt, 0.0)
}
func AirEvent_FullAddPriority(builder *flatbuffers.Builder, priority flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(22, flatbuffers.UOffsetT(priority), 0)
}
func AirEvent_FullAddTrackTime(builder *flatbuffers.Builder, trackTime float64) {
	builder.PrependFloat64Slot(23, trackTime, 0.0)
}
func AirEvent_FullAddStatusCode(builder *flatbuffers.Builder, statusCode flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(24, flatbuffers.UOffsetT(statusCode), 0)
}
func AirEvent_FullAddRzPoint(builder *flatbuffers.Builder, rzPoint flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(25, flatbuffers.UOffsetT(rzPoint), 0)
}
func AirEvent_FullAddRzType(builder *flatbuffers.Builder, rzType flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(26, flatbuffers.UOffsetT(rzType), 0)
}
func AirEvent_FullAddArEventType(builder *flatbuffers.Builder, arEventType flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(27, flatbuffers.UOffsetT(arEventType), 0)
}
func AirEvent_FullAddNumTankers(builder *flatbuffers.Builder, numTankers int32) {
	builder.PrependInt32Slot(28, numTankers, 0)
}
func AirEvent_FullAddRevTrack(builder *flatbuffers.Builder, revTrack bool) {
	builder.PrependBoolSlot(29, revTrack, false)
}
func AirEvent_FullAddShortTrack(builder *flatbuffers.Builder, shortTrack bool) {
	builder.PrependBoolSlot(30, shortTrack, false)
}
func AirEvent_FullAddCancelled(builder *flatbuffers.Builder, cancelled bool) {
	builder.PrependBoolSlot(31, cancelled, false)
}
func AirEvent_FullAddTankers(builder *flatbuffers.Builder, tankers flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(32, flatbuffers.UOffsetT(tankers), 0)
}
func AirEvent_FullStartTankersVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func AirEvent_FullAddReceivers(builder *flatbuffers.Builder, receivers flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(33, flatbuffers.UOffsetT(receivers), 0)
}
func AirEvent_FullStartReceiversVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func AirEvent_FullAddRemarks(builder *flatbuffers.Builder, remarks flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(34, flatbuffers.UOffsetT(remarks), 0)
}
func AirEvent_FullStartRemarksVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func AirEvent_FullAddCreatedAt(builder *flatbuffers.Builder, createdAt flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(35, flatbuffers.UOffsetT(createdAt), 0)
}
func AirEvent_FullAddCreatedBy(builder *flatbuffers.Builder, createdBy flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(36, flatbuffers.UOffsetT(createdBy), 0)
}
func AirEvent_FullAddUpdatedAt(builder *flatbuffers.Builder, updatedAt flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(37, flatbuffers.UOffsetT(updatedAt), 0)
}
func AirEvent_FullAddUpdatedBy(builder *flatbuffers.Builder, updatedBy flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(38, flatbuffers.UOffsetT(updatedBy), 0)
}
func AirEvent_FullAddSourceDl(builder *flatbuffers.Builder, sourceDl flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(39, flatbuffers.UOffsetT(sourceDl), 0)
}
func AirEvent_FullAddSource(builder *flatbuffers.Builder, source flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(40, flatbuffers.UOffsetT(source), 0)
}
func AirEvent_FullAddOrigin(builder *flatbuffers.Builder, origin flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(41, flatbuffers.UOffsetT(origin), 0)
}
func AirEvent_FullAddOrigNetwork(builder *flatbuffers.Builder, origNetwork flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(42, flatbuffers.UOffsetT(origNetwork), 0)
}
func AirEvent_FullAddDataMode(builder *flatbuffers.Builder, dataMode AirEvent_Full_dataMode_Enum) {
	builder.PrependInt8Slot(43, int8(dataMode), 0)
}
func AirEvent_FullEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
