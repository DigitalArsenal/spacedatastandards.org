// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package GenText_Full

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

/// /// Collection that details special instructions, important information, guidance, and amplifying information regarding this ATO.
type GenText_Full struct {
	_tab flatbuffers.Table
}

const GenText_FullIdentifier = "GENT"

func GetRootAsGenText_Full(buf []byte, offset flatbuffers.UOffsetT) *GenText_Full {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &GenText_Full{}
	x.Init(buf, n+offset)
	return x
}

func FinishGenText_FullBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	identifierBytes := []byte(GenText_FullIdentifier)
	builder.FinishWithFileIdentifier(offset, identifierBytes)
}

func GenText_FullBufferHasIdentifier(buf []byte) bool {
	return flatbuffers.BufferHasIdentifier(buf, GenText_FullIdentifier)
}

func GetSizePrefixedRootAsGenText_Full(buf []byte, offset flatbuffers.UOffsetT) *GenText_Full {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &GenText_Full{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedGenText_FullBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	identifierBytes := []byte(GenText_FullIdentifier)
	builder.FinishSizePrefixedWithFileIdentifier(offset, identifierBytes)
}

func SizePrefixedGenText_FullBufferHasIdentifier(buf []byte) bool {
	return flatbuffers.SizePrefixedBufferHasIdentifier(buf, GenText_FullIdentifier)
}

func (rcv *GenText_Full) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *GenText_Full) Table() flatbuffers.Table {
	return rcv._tab
}

/// The indicator for the general text block. Examples include "OPENING REMARKS" and "GENERAL SPINS INFORMATION".
/// Example: /// Example: OPENING REMARKS
/// Constraints: Minimum length = 0, Maximum length = 64
func (rcv *GenText_Full) TextInd() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The indicator for the general text block. Examples include "OPENING REMARKS" and "GENERAL SPINS INFORMATION".
/// Example: /// Example: OPENING REMARKS
/// Constraints: Minimum length = 0, Maximum length = 64
/// The free text that describes the information specific to the text indicator.
/// Example: /// Example: FREE-TEXT
/// Constraints: Minimum length = 0, Maximum length = 1024
func (rcv *GenText_Full) Text() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The free text that describes the information specific to the text indicator.
/// Example: /// Example: FREE-TEXT
/// Constraints: Minimum length = 0, Maximum length = 1024
func GenText_FullStart(builder *flatbuffers.Builder) {
	builder.StartObject(2)
}
func GenText_FullAddTextInd(builder *flatbuffers.Builder, textInd flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(textInd), 0)
}
func GenText_FullAddText(builder *flatbuffers.Builder, text flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(text), 0)
}
func GenText_FullEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
