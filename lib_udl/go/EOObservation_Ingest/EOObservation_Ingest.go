// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package EOObservation_Ingest

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

/// /// Model representation of observation data for electro-optical based sensor phenomenologies. ECI J2K is the preferred reference frame for EOObservations, however, several user-specified reference frames are accommodated. Users should check the EOObservation record as well as the 'Discover' tab in the storefront to confirm the coordinate frames used by the data provider.
type EOObservation_Ingest struct {
	_tab flatbuffers.Table
}

const EOObservation_IngestIdentifier = "EOOB"

func GetRootAsEOObservation_Ingest(buf []byte, offset flatbuffers.UOffsetT) *EOObservation_Ingest {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &EOObservation_Ingest{}
	x.Init(buf, n+offset)
	return x
}

func FinishEOObservation_IngestBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	identifierBytes := []byte(EOObservation_IngestIdentifier)
	builder.FinishWithFileIdentifier(offset, identifierBytes)
}

func EOObservation_IngestBufferHasIdentifier(buf []byte) bool {
	return flatbuffers.BufferHasIdentifier(buf, EOObservation_IngestIdentifier)
}

func GetSizePrefixedRootAsEOObservation_Ingest(buf []byte, offset flatbuffers.UOffsetT) *EOObservation_Ingest {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &EOObservation_Ingest{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedEOObservation_IngestBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	identifierBytes := []byte(EOObservation_IngestIdentifier)
	builder.FinishSizePrefixedWithFileIdentifier(offset, identifierBytes)
}

func SizePrefixedEOObservation_IngestBufferHasIdentifier(buf []byte) bool {
	return flatbuffers.SizePrefixedBufferHasIdentifier(buf, EOObservation_IngestIdentifier)
}

func (rcv *EOObservation_Ingest) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *EOObservation_Ingest) Table() flatbuffers.Table {
	return rcv._tab
}

/// Unique identifier of the record, auto-generated by the system.
/// Example: /// Example: EOOBSERVATION-ID
/// Constraints: Minimum length = 1, Maximum length = 36
func (rcv *EOObservation_Ingest) Id() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Unique identifier of the record, auto-generated by the system.
/// Example: /// Example: EOOBSERVATION-ID
/// Constraints: Minimum length = 1, Maximum length = 36
/// Classification marking of the data in IC/CAPCO Portion-marked format.
/// Example: /// Example: U
/// Constraints: Minimum length = 1, Maximum length = 128
func (rcv *EOObservation_Ingest) ClassificationMarking() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Classification marking of the data in IC/CAPCO Portion-marked format.
/// Example: /// Example: U
/// Constraints: Minimum length = 1, Maximum length = 128
/// Ob detection time in ISO 8601 UTC with microsecond precision.
/// Example: /// Example: 2018-01-01T16:00:00.123456Z
/// Constraints: No constraints specified.
func (rcv *EOObservation_Ingest) ObTime() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Ob detection time in ISO 8601 UTC with microsecond precision.
/// Example: /// Example: 2018-01-01T16:00:00.123456Z
/// Constraints: No constraints specified.
/// Object Correlation Quality value (non-standardized). Users should consult data providers regarding the expected range of values.
/// Example: /// Example: 1.1
/// Constraints: No constraints specified.
func (rcv *EOObservation_Ingest) CorrQuality() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Object Correlation Quality value (non-standardized). Users should consult data providers regarding the expected range of values.
/// Example: /// Example: 1.1
/// Constraints: No constraints specified.
func (rcv *EOObservation_Ingest) MutateCorrQuality(n float64) bool {
	return rcv._tab.MutateFloat64Slot(10, n)
}

/// Unique identifier of the target on-orbit object, if correlated.
/// Example: /// Example: ONORBIT-ID
/// Constraints: Minimum length = 0, Maximum length = 36
func (rcv *EOObservation_Ingest) IdOnOrbit() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Unique identifier of the target on-orbit object, if correlated.
/// Example: /// Example: ONORBIT-ID
/// Constraints: Minimum length = 0, Maximum length = 36
/// Unique identifier of the reporting sensor.
/// Example: /// Example: SENSOR-ID
/// Constraints: Minimum length = 0, Maximum length = 36
func (rcv *EOObservation_Ingest) IdSensor() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Unique identifier of the reporting sensor.
/// Example: /// Example: SENSOR-ID
/// Constraints: Minimum length = 0, Maximum length = 36
/// Unique identifier of the Sky Imagery.
/// Example: /// Example: SKYIMAGERY-ID
/// Constraints: Minimum length = 0, Maximum length = 36
func (rcv *EOObservation_Ingest) IdSkyImagery() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Unique identifier of the Sky Imagery.
/// Example: /// Example: SKYIMAGERY-ID
/// Constraints: Minimum length = 0, Maximum length = 36
/// Method indicating telescope movement during collection (AUTOTRACK, MANUAL AUTOTRACK, MANUAL RATE TRACK, MANUAL SIDEREAL, SIDEREAL, RATE TRACK).
/// Example: /// Example: AUTOTRACK
/// Constraints: Minimum length = 0, Maximum length = 24
func (rcv *EOObservation_Ingest) CollectMethod() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(18))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Method indicating telescope movement during collection (AUTOTRACK, MANUAL AUTOTRACK, MANUAL RATE TRACK, MANUAL SIDEREAL, SIDEREAL, RATE TRACK).
/// Example: /// Example: AUTOTRACK
/// Constraints: Minimum length = 0, Maximum length = 24
/// Satellite/Catalog number of the target on-orbit object.
/// Example: /// Example: 5
/// Constraints: No constraints specified.
func (rcv *EOObservation_Ingest) SatNo() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(20))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

/// Satellite/Catalog number of the target on-orbit object.
/// Example: /// Example: 5
/// Constraints: No constraints specified.
func (rcv *EOObservation_Ingest) MutateSatNo(n int32) bool {
	return rcv._tab.MutateInt32Slot(20, n)
}

/// Optional identifier to indicate the specific tasking which produced this observation.
/// Example: /// Example: TASK-ID
/// Constraints: Minimum length = 0, Maximum length = 36
func (rcv *EOObservation_Ingest) TaskId() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(22))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Optional identifier to indicate the specific tasking which produced this observation.
/// Example: /// Example: TASK-ID
/// Constraints: Minimum length = 0, Maximum length = 36
/// Optional identifier to track a commercial or marketplace transaction executed to produce this data.
/// Example: /// Example: TRANSACTION-ID
/// Constraints: Minimum length = 0, Maximum length = 64
func (rcv *EOObservation_Ingest) TransactionId() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(24))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Optional identifier to track a commercial or marketplace transaction executed to produce this data.
/// Example: /// Example: TRANSACTION-ID
/// Constraints: Minimum length = 0, Maximum length = 64
/// Optional identifier of the track to which this observation belongs.
/// Example: /// Example: TRACK-ID
/// Constraints: Minimum length = 0, Maximum length = 36
func (rcv *EOObservation_Ingest) TrackId() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(26))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Optional identifier of the track to which this observation belongs.
/// Example: /// Example: TRACK-ID
/// Constraints: Minimum length = 0, Maximum length = 36
/// The position of this observation within a track (FENCE, FIRST, IN, LAST, SINGLE).  This identifier is optional and, if null, no assumption should be made regarding whether other observations may or may not exist to compose a track.
/// Example: /// Example: FIRST
/// Constraints: Minimum length = 0, Maximum length = 8
func (rcv *EOObservation_Ingest) ObPosition() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(28))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The position of this observation within a track (FENCE, FIRST, IN, LAST, SINGLE).  This identifier is optional and, if null, no assumption should be made regarding whether other observations may or may not exist to compose a track.
/// Example: /// Example: FIRST
/// Constraints: Minimum length = 0, Maximum length = 8
/// Optional identifier provided by observation source to indicate the target onorbit object of this observation. This may be an internal identifier and not necessarily a valid satellite number.
/// Example: /// Example: ORIGOBJECT-ID
/// Constraints: Minimum length = 0, Maximum length = 64
func (rcv *EOObservation_Ingest) OrigObjectId() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(30))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Optional identifier provided by observation source to indicate the target onorbit object of this observation. This may be an internal identifier and not necessarily a valid satellite number.
/// Example: /// Example: ORIGOBJECT-ID
/// Constraints: Minimum length = 0, Maximum length = 64
/// Optional identifier provided by observation source to indicate the sensor identifier which produced this observation. This may be an internal identifier and not necessarily a valid sensor ID.
/// Example: /// Example: ORIGSENSOR-ID
/// Constraints: Minimum length = 0, Maximum length = 64
func (rcv *EOObservation_Ingest) OrigSensorId() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(32))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Optional identifier provided by observation source to indicate the sensor identifier which produced this observation. This may be an internal identifier and not necessarily a valid sensor ID.
/// Example: /// Example: ORIGSENSOR-ID
/// Constraints: Minimum length = 0, Maximum length = 64
/// Boolean indicating this observation is part of an uncorrelated track or was unable to be correlated to a known object. This flag should only be set to true by data providers after an attempt to correlate to an on-orbit object was made and failed. If unable to correlate, the 'origObjectId' field may be populated with an internal data provider specific identifier.
/// Example: /// Example: False
/// Constraints: No constraints specified.
func (rcv *EOObservation_Ingest) Uct() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(34))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

/// Boolean indicating this observation is part of an uncorrelated track or was unable to be correlated to a known object. This flag should only be set to true by data providers after an attempt to correlate to an on-orbit object was made and failed. If unable to correlate, the 'origObjectId' field may be populated with an internal data provider specific identifier.
/// Example: /// Example: False
/// Constraints: No constraints specified.
func (rcv *EOObservation_Ingest) MutateUct(n bool) bool {
	return rcv._tab.MutateBoolSlot(34, n)
}

/// Line of sight azimuth angle in degrees and topocentric frame.
/// Example: /// Example: 1.1
/// Constraints: No constraints specified.
func (rcv *EOObservation_Ingest) Azimuth() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(36))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Line of sight azimuth angle in degrees and topocentric frame.
/// Example: /// Example: 1.1
/// Constraints: No constraints specified.
func (rcv *EOObservation_Ingest) MutateAzimuth(n float64) bool {
	return rcv._tab.MutateFloat64Slot(36, n)
}

/// One sigma uncertainty in the line of sight azimuth angle, in degrees.
/// Example: /// Example: 1.1
/// Constraints: No constraints specified.
func (rcv *EOObservation_Ingest) AzimuthUnc() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(38))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// One sigma uncertainty in the line of sight azimuth angle, in degrees.
/// Example: /// Example: 1.1
/// Constraints: No constraints specified.
func (rcv *EOObservation_Ingest) MutateAzimuthUnc(n float64) bool {
	return rcv._tab.MutateFloat64Slot(38, n)
}

/// Sensor line of sight azimuth angle bias in degrees.
/// Example: /// Example: 1.1
/// Constraints: No constraints specified.
func (rcv *EOObservation_Ingest) AzimuthBias() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(40))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Sensor line of sight azimuth angle bias in degrees.
/// Example: /// Example: 1.1
/// Constraints: No constraints specified.
func (rcv *EOObservation_Ingest) MutateAzimuthBias(n float64) bool {
	return rcv._tab.MutateFloat64Slot(40, n)
}

/// Rate of change of the line of sight azimuth in degrees per second.
/// Example: /// Example: 1.1
/// Constraints: No constraints specified.
func (rcv *EOObservation_Ingest) AzimuthRate() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(42))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Rate of change of the line of sight azimuth in degrees per second.
/// Example: /// Example: 1.1
/// Constraints: No constraints specified.
func (rcv *EOObservation_Ingest) MutateAzimuthRate(n float64) bool {
	return rcv._tab.MutateFloat64Slot(42, n)
}

/// Line of sight elevation in degrees and topocentric frame.
/// Example: /// Example: 1.1
/// Constraints: No constraints specified.
func (rcv *EOObservation_Ingest) Elevation() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(44))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Line of sight elevation in degrees and topocentric frame.
/// Example: /// Example: 1.1
/// Constraints: No constraints specified.
func (rcv *EOObservation_Ingest) MutateElevation(n float64) bool {
	return rcv._tab.MutateFloat64Slot(44, n)
}

/// One sigma uncertainty in the line of sight elevation angle, in degrees.
/// Example: /// Example: 1.1
/// Constraints: No constraints specified.
func (rcv *EOObservation_Ingest) ElevationUnc() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(46))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// One sigma uncertainty in the line of sight elevation angle, in degrees.
/// Example: /// Example: 1.1
/// Constraints: No constraints specified.
func (rcv *EOObservation_Ingest) MutateElevationUnc(n float64) bool {
	return rcv._tab.MutateFloat64Slot(46, n)
}

/// Sensor line of sight elevation bias in degrees.
/// Example: /// Example: 1.1
/// Constraints: No constraints specified.
func (rcv *EOObservation_Ingest) ElevationBias() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(48))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Sensor line of sight elevation bias in degrees.
/// Example: /// Example: 1.1
/// Constraints: No constraints specified.
func (rcv *EOObservation_Ingest) MutateElevationBias(n float64) bool {
	return rcv._tab.MutateFloat64Slot(48, n)
}

/// Rate of change of the line of sight elevation in degrees per second.
/// Example: /// Example: 1.1
/// Constraints: No constraints specified.
func (rcv *EOObservation_Ingest) ElevationRate() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(50))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Rate of change of the line of sight elevation in degrees per second.
/// Example: /// Example: 1.1
/// Constraints: No constraints specified.
func (rcv *EOObservation_Ingest) MutateElevationRate(n float64) bool {
	return rcv._tab.MutateFloat64Slot(50, n)
}

/// Line of sight range in km.
/// Example: /// Example: 1.1
/// Constraints: No constraints specified.
func (rcv *EOObservation_Ingest) Range() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(52))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Line of sight range in km.
/// Example: /// Example: 1.1
/// Constraints: No constraints specified.
func (rcv *EOObservation_Ingest) MutateRange(n float64) bool {
	return rcv._tab.MutateFloat64Slot(52, n)
}

/// One sigma uncertainty in the line of sight range, in kilometers.
/// Example: /// Example: 1.1
/// Constraints: No constraints specified.
func (rcv *EOObservation_Ingest) RangeUnc() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(54))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// One sigma uncertainty in the line of sight range, in kilometers.
/// Example: /// Example: 1.1
/// Constraints: No constraints specified.
func (rcv *EOObservation_Ingest) MutateRangeUnc(n float64) bool {
	return rcv._tab.MutateFloat64Slot(54, n)
}

/// Sensor line of sight range bias in km.
/// Example: /// Example: 1.1
/// Constraints: No constraints specified.
func (rcv *EOObservation_Ingest) RangeBias() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(56))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Sensor line of sight range bias in km.
/// Example: /// Example: 1.1
/// Constraints: No constraints specified.
func (rcv *EOObservation_Ingest) MutateRangeBias(n float64) bool {
	return rcv._tab.MutateFloat64Slot(56, n)
}

/// Rate of change of the line of sight range in km/sec.
/// Example: /// Example: 1.1
/// Constraints: No constraints specified.
func (rcv *EOObservation_Ingest) RangeRate() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(58))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Rate of change of the line of sight range in km/sec.
/// Example: /// Example: 1.1
/// Constraints: No constraints specified.
func (rcv *EOObservation_Ingest) MutateRangeRate(n float64) bool {
	return rcv._tab.MutateFloat64Slot(58, n)
}

/// One sigma uncertainty in the line of sight range rate, in kilometers/second.
/// Example: /// Example: 1.1
/// Constraints: No constraints specified.
func (rcv *EOObservation_Ingest) RangeRateUnc() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(60))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// One sigma uncertainty in the line of sight range rate, in kilometers/second.
/// Example: /// Example: 1.1
/// Constraints: No constraints specified.
func (rcv *EOObservation_Ingest) MutateRangeRateUnc(n float64) bool {
	return rcv._tab.MutateFloat64Slot(60, n)
}

/// Line of sight right ascension, in degrees, in the specified referenceFrame.  If referenceFrame is null then J2K should be assumed.
/// Example: /// Example: 1.1
/// Constraints: No constraints specified.
func (rcv *EOObservation_Ingest) Ra() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(62))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Line of sight right ascension, in degrees, in the specified referenceFrame.  If referenceFrame is null then J2K should be assumed.
/// Example: /// Example: 1.1
/// Constraints: No constraints specified.
func (rcv *EOObservation_Ingest) MutateRa(n float64) bool {
	return rcv._tab.MutateFloat64Slot(62, n)
}

/// Line of sight right ascension rate of change, in degrees/sec, in the specified referenceFrame.  If referenceFrame is null then J2K should be assumed.
/// Example: /// Example: 1.1
/// Constraints: No constraints specified.
func (rcv *EOObservation_Ingest) RaRate() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(64))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Line of sight right ascension rate of change, in degrees/sec, in the specified referenceFrame.  If referenceFrame is null then J2K should be assumed.
/// Example: /// Example: 1.1
/// Constraints: No constraints specified.
func (rcv *EOObservation_Ingest) MutateRaRate(n float64) bool {
	return rcv._tab.MutateFloat64Slot(64, n)
}

/// One sigma uncertainty in the line of sight right ascension angle, in degrees.
/// Example: /// Example: 1.1
/// Constraints: No constraints specified.
func (rcv *EOObservation_Ingest) RaUnc() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(66))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// One sigma uncertainty in the line of sight right ascension angle, in degrees.
/// Example: /// Example: 1.1
/// Constraints: No constraints specified.
func (rcv *EOObservation_Ingest) MutateRaUnc(n float64) bool {
	return rcv._tab.MutateFloat64Slot(66, n)
}

/// Sensor line of sight right ascension bias in degrees.
/// Example: /// Example: 1.1
/// Constraints: No constraints specified.
func (rcv *EOObservation_Ingest) RaBias() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(68))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Sensor line of sight right ascension bias in degrees.
/// Example: /// Example: 1.1
/// Constraints: No constraints specified.
func (rcv *EOObservation_Ingest) MutateRaBias(n float64) bool {
	return rcv._tab.MutateFloat64Slot(68, n)
}

/// Line of sight declination, in degrees, in the specified referenceFrame.  If referenceFrame is null then J2K should be assumed.
/// Example: /// Example: 1.1
/// Constraints: No constraints specified.
func (rcv *EOObservation_Ingest) Declination() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(70))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Line of sight declination, in degrees, in the specified referenceFrame.  If referenceFrame is null then J2K should be assumed.
/// Example: /// Example: 1.1
/// Constraints: No constraints specified.
func (rcv *EOObservation_Ingest) MutateDeclination(n float64) bool {
	return rcv._tab.MutateFloat64Slot(70, n)
}

/// Line of sight declination rate of change, in degrees/sec, in the specified referenceFrame.  If referenceFrame is null then J2K should be assumed.
/// Example: /// Example: 1.1
/// Constraints: No constraints specified.
func (rcv *EOObservation_Ingest) DeclinationRate() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(72))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Line of sight declination rate of change, in degrees/sec, in the specified referenceFrame.  If referenceFrame is null then J2K should be assumed.
/// Example: /// Example: 1.1
/// Constraints: No constraints specified.
func (rcv *EOObservation_Ingest) MutateDeclinationRate(n float64) bool {
	return rcv._tab.MutateFloat64Slot(72, n)
}

/// One sigma uncertainty in the line of sight declination angle, in degrees.
/// Example: /// Example: 1.1
/// Constraints: No constraints specified.
func (rcv *EOObservation_Ingest) DeclinationUnc() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(74))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// One sigma uncertainty in the line of sight declination angle, in degrees.
/// Example: /// Example: 1.1
/// Constraints: No constraints specified.
func (rcv *EOObservation_Ingest) MutateDeclinationUnc(n float64) bool {
	return rcv._tab.MutateFloat64Slot(74, n)
}

/// Sensor line of sight declination angle bias in degrees.
/// Example: /// Example: 1.1
/// Constraints: No constraints specified.
func (rcv *EOObservation_Ingest) DeclinationBias() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(76))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Sensor line of sight declination angle bias in degrees.
/// Example: /// Example: 1.1
/// Constraints: No constraints specified.
func (rcv *EOObservation_Ingest) MutateDeclinationBias(n float64) bool {
	return rcv._tab.MutateFloat64Slot(76, n)
}

/// Line-of-sight cartesian X position of the target, in km, in the specified referenceFrame.  If referenceFrame is null then J2K should be assumed.
/// Example: /// Example: 1.1
/// Constraints: No constraints specified.
func (rcv *EOObservation_Ingest) Losx() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(78))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Line-of-sight cartesian X position of the target, in km, in the specified referenceFrame.  If referenceFrame is null then J2K should be assumed.
/// Example: /// Example: 1.1
/// Constraints: No constraints specified.
func (rcv *EOObservation_Ingest) MutateLosx(n float64) bool {
	return rcv._tab.MutateFloat64Slot(78, n)
}

/// Line-of-sight cartesian Y position of the target, in km, in the specified referenceFrame.  If referenceFrame is null then J2K should be assumed.
/// Example: /// Example: 1.1
/// Constraints: No constraints specified.
func (rcv *EOObservation_Ingest) Losy() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(80))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Line-of-sight cartesian Y position of the target, in km, in the specified referenceFrame.  If referenceFrame is null then J2K should be assumed.
/// Example: /// Example: 1.1
/// Constraints: No constraints specified.
func (rcv *EOObservation_Ingest) MutateLosy(n float64) bool {
	return rcv._tab.MutateFloat64Slot(80, n)
}

/// Line-of-sight cartesian Z position of the target, in km, in the specified referenceFrame.  If referenceFrame is null then J2K should be assumed.
/// Example: /// Example: 1.1
/// Constraints: No constraints specified.
func (rcv *EOObservation_Ingest) Losz() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(82))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Line-of-sight cartesian Z position of the target, in km, in the specified referenceFrame.  If referenceFrame is null then J2K should be assumed.
/// Example: /// Example: 1.1
/// Constraints: No constraints specified.
func (rcv *EOObservation_Ingest) MutateLosz(n float64) bool {
	return rcv._tab.MutateFloat64Slot(82, n)
}

/// One sigma uncertainty in the line of sight pointing in micro-radians.
/// Example: /// Example: 1.1
/// Constraints: No constraints specified.
func (rcv *EOObservation_Ingest) LosUnc() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(84))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// One sigma uncertainty in the line of sight pointing in micro-radians.
/// Example: /// Example: 1.1
/// Constraints: No constraints specified.
func (rcv *EOObservation_Ingest) MutateLosUnc(n float64) bool {
	return rcv._tab.MutateFloat64Slot(84, n)
}

/// Line-of-sight cartesian X velocity of target, in km/sec, in the specified referenceFrame.  If referenceFrame is null then J2K should be assumed.
/// Example: /// Example: 1.1
/// Constraints: No constraints specified.
func (rcv *EOObservation_Ingest) Losxvel() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(86))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Line-of-sight cartesian X velocity of target, in km/sec, in the specified referenceFrame.  If referenceFrame is null then J2K should be assumed.
/// Example: /// Example: 1.1
/// Constraints: No constraints specified.
func (rcv *EOObservation_Ingest) MutateLosxvel(n float64) bool {
	return rcv._tab.MutateFloat64Slot(86, n)
}

/// Line-of-sight cartesian Y velocity of target, in km/sec, in the specified referenceFrame.  If referenceFrame is null then J2K should be assumed.
/// Example: /// Example: 1.1
/// Constraints: No constraints specified.
func (rcv *EOObservation_Ingest) Losyvel() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(88))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Line-of-sight cartesian Y velocity of target, in km/sec, in the specified referenceFrame.  If referenceFrame is null then J2K should be assumed.
/// Example: /// Example: 1.1
/// Constraints: No constraints specified.
func (rcv *EOObservation_Ingest) MutateLosyvel(n float64) bool {
	return rcv._tab.MutateFloat64Slot(88, n)
}

/// Line-of-sight cartesian Z velocity of target, in km/sec, in the specified referenceFrame.  If referenceFrame is null then J2K should be assumed.
/// Example: /// Example: 1.1
/// Constraints: No constraints specified.
func (rcv *EOObservation_Ingest) Loszvel() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(90))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Line-of-sight cartesian Z velocity of target, in km/sec, in the specified referenceFrame.  If referenceFrame is null then J2K should be assumed.
/// Example: /// Example: 1.1
/// Constraints: No constraints specified.
func (rcv *EOObservation_Ingest) MutateLoszvel(n float64) bool {
	return rcv._tab.MutateFloat64Slot(90, n)
}

/// Sensor WGS84 latitude at obTime (if mobile/onorbit) in degrees. If null, can be obtained from sensor info. -90 to 90 degrees (negative values south of equator).
/// Example: /// Example: 45.1
/// Constraints: No constraints specified.
func (rcv *EOObservation_Ingest) Senlat() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(92))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Sensor WGS84 latitude at obTime (if mobile/onorbit) in degrees. If null, can be obtained from sensor info. -90 to 90 degrees (negative values south of equator).
/// Example: /// Example: 45.1
/// Constraints: No constraints specified.
func (rcv *EOObservation_Ingest) MutateSenlat(n float64) bool {
	return rcv._tab.MutateFloat64Slot(92, n)
}

/// Sensor WGS84 longitude at obTime (if mobile/onorbit) in degrees. If null, can be obtained from sensor info. -180 to 180 degrees (negative values west of Prime Meridian).
/// Example: /// Example: 179.1
/// Constraints: No constraints specified.
func (rcv *EOObservation_Ingest) Senlon() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(94))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Sensor WGS84 longitude at obTime (if mobile/onorbit) in degrees. If null, can be obtained from sensor info. -180 to 180 degrees (negative values west of Prime Meridian).
/// Example: /// Example: 179.1
/// Constraints: No constraints specified.
func (rcv *EOObservation_Ingest) MutateSenlon(n float64) bool {
	return rcv._tab.MutateFloat64Slot(94, n)
}

/// Sensor altitude at obTime (if mobile/onorbit) in km.
/// Example: /// Example: 1.1
/// Constraints: No constraints specified.
func (rcv *EOObservation_Ingest) Senalt() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(96))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Sensor altitude at obTime (if mobile/onorbit) in km.
/// Example: /// Example: 1.1
/// Constraints: No constraints specified.
func (rcv *EOObservation_Ingest) MutateSenalt(n float64) bool {
	return rcv._tab.MutateFloat64Slot(96, n)
}

/// Cartesian X position of the observing mobile/onorbit sensor at obTime, in km, in the specified senReferenceFrame.  If senReferenceFrame is null then J2K should be assumed.
/// Example: /// Example: 1.1
/// Constraints: No constraints specified.
func (rcv *EOObservation_Ingest) Senx() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(98))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Cartesian X position of the observing mobile/onorbit sensor at obTime, in km, in the specified senReferenceFrame.  If senReferenceFrame is null then J2K should be assumed.
/// Example: /// Example: 1.1
/// Constraints: No constraints specified.
func (rcv *EOObservation_Ingest) MutateSenx(n float64) bool {
	return rcv._tab.MutateFloat64Slot(98, n)
}

/// Cartesian Y position of the observing mobile/onorbit sensor at obTime, in km, in the specified senReferenceFrame.  If senReferenceFrame is null then J2K should be assumed.
/// Example: /// Example: 1.1
/// Constraints: No constraints specified.
func (rcv *EOObservation_Ingest) Seny() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(100))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Cartesian Y position of the observing mobile/onorbit sensor at obTime, in km, in the specified senReferenceFrame.  If senReferenceFrame is null then J2K should be assumed.
/// Example: /// Example: 1.1
/// Constraints: No constraints specified.
func (rcv *EOObservation_Ingest) MutateSeny(n float64) bool {
	return rcv._tab.MutateFloat64Slot(100, n)
}

/// Cartesian Z position of the observing mobile/onorbit sensor at obTime, in km, in the specified senReferenceFrame.  If senReferenceFrame is null then J2K should be assumed.
/// Example: /// Example: 1.1
/// Constraints: No constraints specified.
func (rcv *EOObservation_Ingest) Senz() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(102))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Cartesian Z position of the observing mobile/onorbit sensor at obTime, in km, in the specified senReferenceFrame.  If senReferenceFrame is null then J2K should be assumed.
/// Example: /// Example: 1.1
/// Constraints: No constraints specified.
func (rcv *EOObservation_Ingest) MutateSenz(n float64) bool {
	return rcv._tab.MutateFloat64Slot(102, n)
}

/// Cartesian X velocity of the observing mobile/onorbit sensor at obTime, in km/sec, in the specified senReferenceFrame.  If senReferenceFrame is null then J2K should be assumed.
/// Example: /// Example: 1.1
/// Constraints: No constraints specified.
func (rcv *EOObservation_Ingest) Senvelx() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(104))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Cartesian X velocity of the observing mobile/onorbit sensor at obTime, in km/sec, in the specified senReferenceFrame.  If senReferenceFrame is null then J2K should be assumed.
/// Example: /// Example: 1.1
/// Constraints: No constraints specified.
func (rcv *EOObservation_Ingest) MutateSenvelx(n float64) bool {
	return rcv._tab.MutateFloat64Slot(104, n)
}

/// Cartesian Y velocity of the observing mobile/onorbit sensor at obTime, in km/sec, in the specified senReferenceFrame.  If senReferenceFrame is null then J2K should be assumed.
/// Example: /// Example: 1.1
/// Constraints: No constraints specified.
func (rcv *EOObservation_Ingest) Senvely() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(106))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Cartesian Y velocity of the observing mobile/onorbit sensor at obTime, in km/sec, in the specified senReferenceFrame.  If senReferenceFrame is null then J2K should be assumed.
/// Example: /// Example: 1.1
/// Constraints: No constraints specified.
func (rcv *EOObservation_Ingest) MutateSenvely(n float64) bool {
	return rcv._tab.MutateFloat64Slot(106, n)
}

/// Cartesian Z velocity of the observing mobile/onorbit sensor at obTime, in km/sec, in the specified senReferenceFrame.  If senReferenceFrame is null then J2K should be assumed.
/// Example: /// Example: 1.1
/// Constraints: No constraints specified.
func (rcv *EOObservation_Ingest) Senvelz() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(108))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Cartesian Z velocity of the observing mobile/onorbit sensor at obTime, in km/sec, in the specified senReferenceFrame.  If senReferenceFrame is null then J2K should be assumed.
/// Example: /// Example: 1.1
/// Constraints: No constraints specified.
func (rcv *EOObservation_Ingest) MutateSenvelz(n float64) bool {
	return rcv._tab.MutateFloat64Slot(108, n)
}

/// The quaternion describing the rotation of the sensor in relation to the body-fixed frame used for this system into the local geodetic frame, at observation time (obTime). The array element order convention is scalar component first, followed by the three vector components (qc, q1, q2, q3).
/// Example: /// Example: [0.4492, 0.02, 0.8765, 0.2213]
/// Constraints: No constraints specified.
func (rcv *EOObservation_Ingest) SenQuat(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(110))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *EOObservation_Ingest) SenQuatLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(110))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

/// The quaternion describing the rotation of the sensor in relation to the body-fixed frame used for this system into the local geodetic frame, at observation time (obTime). The array element order convention is scalar component first, followed by the three vector components (qc, q1, q2, q3).
/// Example: /// Example: [0.4492, 0.02, 0.8765, 0.2213]
/// Constraints: No constraints specified.
/// The number of RSOs detected in the sensor field of view.
/// Example: /// Example: 1
/// Constraints: No constraints specified.
func (rcv *EOObservation_Ingest) FovCount() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(112))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

/// The number of RSOs detected in the sensor field of view.
/// Example: /// Example: 1
/// Constraints: No constraints specified.
func (rcv *EOObservation_Ingest) MutateFovCount(n int32) bool {
	return rcv._tab.MutateInt32Slot(112, n)
}

/// Image exposure duration in seconds.
/// Example: /// Example: 1.1
/// Constraints: No constraints specified.
func (rcv *EOObservation_Ingest) ExpDuration() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(114))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Image exposure duration in seconds.
/// Example: /// Example: 1.1
/// Constraints: No constraints specified.
func (rcv *EOObservation_Ingest) MutateExpDuration(n float64) bool {
	return rcv._tab.MutateFloat64Slot(114, n)
}

/// Formula: 2.5 * log_10 (zero_mag_counts / expDuration).
/// Example: /// Example: 1.1
/// Constraints: No constraints specified.
func (rcv *EOObservation_Ingest) Zeroptd() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(116))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Formula: 2.5 * log_10 (zero_mag_counts / expDuration).
/// Example: /// Example: 1.1
/// Constraints: No constraints specified.
func (rcv *EOObservation_Ingest) MutateZeroptd(n float64) bool {
	return rcv._tab.MutateFloat64Slot(116, n)
}

/// Net object signature = counts / expDuration.
/// Example: /// Example: 1.1
/// Constraints: No constraints specified.
func (rcv *EOObservation_Ingest) NetObjSig() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(118))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Net object signature = counts / expDuration.
/// Example: /// Example: 1.1
/// Constraints: No constraints specified.
func (rcv *EOObservation_Ingest) MutateNetObjSig(n float64) bool {
	return rcv._tab.MutateFloat64Slot(118, n)
}

/// Net object signature uncertainty = counts uncertainty / expDuration.
/// Example: /// Example: 1.1
/// Constraints: No constraints specified.
func (rcv *EOObservation_Ingest) NetObjSigUnc() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(120))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Net object signature uncertainty = counts uncertainty / expDuration.
/// Example: /// Example: 1.1
/// Constraints: No constraints specified.
func (rcv *EOObservation_Ingest) MutateNetObjSigUnc(n float64) bool {
	return rcv._tab.MutateFloat64Slot(120, n)
}

/// Calibrated magnitude in units of magnitudes.
/// Example: /// Example: 1.1
/// Constraints: No constraints specified.
func (rcv *EOObservation_Ingest) Mag() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(122))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Calibrated magnitude in units of magnitudes.
/// Example: /// Example: 1.1
/// Constraints: No constraints specified.
func (rcv *EOObservation_Ingest) MutateMag(n float64) bool {
	return rcv._tab.MutateFloat64Slot(122, n)
}

/// Uncertainty of calibrated magnitude in units of magnitudes.
/// Example: /// Example: 1.1
/// Constraints: No constraints specified.
func (rcv *EOObservation_Ingest) MagUnc() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(124))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Uncertainty of calibrated magnitude in units of magnitudes.
/// Example: /// Example: 1.1
/// Constraints: No constraints specified.
func (rcv *EOObservation_Ingest) MutateMagUnc(n float64) bool {
	return rcv._tab.MutateFloat64Slot(124, n)
}

/// Formula: mag - 5.0 * log_10(geo_range / 1000000.0).
/// Example: /// Example: 1.1
/// Constraints: No constraints specified.
func (rcv *EOObservation_Ingest) MagNormRange() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(126))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Formula: mag - 5.0 * log_10(geo_range / 1000000.0).
/// Example: /// Example: 1.1
/// Constraints: No constraints specified.
func (rcv *EOObservation_Ingest) MutateMagNormRange(n float64) bool {
	return rcv._tab.MutateFloat64Slot(126, n)
}

/// For GEO detections, the latitude in degrees north.
/// Example: /// Example: 1.1
/// Constraints: No constraints specified.
func (rcv *EOObservation_Ingest) Geolat() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(128))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// For GEO detections, the latitude in degrees north.
/// Example: /// Example: 1.1
/// Constraints: No constraints specified.
func (rcv *EOObservation_Ingest) MutateGeolat(n float64) bool {
	return rcv._tab.MutateFloat64Slot(128, n)
}

/// For GEO detections, the longitude in degrees east.
/// Example: /// Example: 1.1
/// Constraints: No constraints specified.
func (rcv *EOObservation_Ingest) Geolon() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(130))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// For GEO detections, the longitude in degrees east.
/// Example: /// Example: 1.1
/// Constraints: No constraints specified.
func (rcv *EOObservation_Ingest) MutateGeolon(n float64) bool {
	return rcv._tab.MutateFloat64Slot(130, n)
}

/// For GEO detections, the altitude in km.
/// Example: /// Example: 1.1
/// Constraints: No constraints specified.
func (rcv *EOObservation_Ingest) Geoalt() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(132))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// For GEO detections, the altitude in km.
/// Example: /// Example: 1.1
/// Constraints: No constraints specified.
func (rcv *EOObservation_Ingest) MutateGeoalt(n float64) bool {
	return rcv._tab.MutateFloat64Slot(132, n)
}

/// For GEO detections, the range in km.
/// Example: /// Example: 1.1
/// Constraints: No constraints specified.
func (rcv *EOObservation_Ingest) Georange() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(134))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// For GEO detections, the range in km.
/// Example: /// Example: 1.1
/// Constraints: No constraints specified.
func (rcv *EOObservation_Ingest) MutateGeorange(n float64) bool {
	return rcv._tab.MutateFloat64Slot(134, n)
}

/// Average Sky Background signal, in Magnitudes. Sky Background refers to the incoming light from an apparently empty part of the night sky.
/// Example: /// Example: 1.1
/// Constraints: No constraints specified.
func (rcv *EOObservation_Ingest) SkyBkgrnd() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(136))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Average Sky Background signal, in Magnitudes. Sky Background refers to the incoming light from an apparently empty part of the night sky.
/// Example: /// Example: 1.1
/// Constraints: No constraints specified.
func (rcv *EOObservation_Ingest) MutateSkyBkgrnd(n float64) bool {
	return rcv._tab.MutateFloat64Slot(136, n)
}

/// Primary Extinction Coefficient, in Magnitudes. Primary Extinction is the coefficient applied to the airmass to determine how much the observed visual magnitude has been attenuated by the atmosphere. Extinction, in general, describes the absorption and scattering of electromagnetic radiation by dust and gas between an emitting astronomical object and the observer.  See the EOObservationDetails API for specification of extinction coefficients for multiple spectral filters.
/// Example: /// Example: 1.1
/// Constraints: No constraints specified.
func (rcv *EOObservation_Ingest) PrimaryExtinction() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(138))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Primary Extinction Coefficient, in Magnitudes. Primary Extinction is the coefficient applied to the airmass to determine how much the observed visual magnitude has been attenuated by the atmosphere. Extinction, in general, describes the absorption and scattering of electromagnetic radiation by dust and gas between an emitting astronomical object and the observer.  See the EOObservationDetails API for specification of extinction coefficients for multiple spectral filters.
/// Example: /// Example: 1.1
/// Constraints: No constraints specified.
func (rcv *EOObservation_Ingest) MutatePrimaryExtinction(n float64) bool {
	return rcv._tab.MutateFloat64Slot(138, n)
}

/// Primary Extinction Coefficient Uncertainty, in Magnitudes.
/// Example: /// Example: 1.1
/// Constraints: No constraints specified.
func (rcv *EOObservation_Ingest) PrimaryExtinctionUnc() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(140))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Primary Extinction Coefficient Uncertainty, in Magnitudes.
/// Example: /// Example: 1.1
/// Constraints: No constraints specified.
func (rcv *EOObservation_Ingest) MutatePrimaryExtinctionUnc(n float64) bool {
	return rcv._tab.MutateFloat64Slot(140, n)
}

/// The angle, in degrees, between the target-to-observer vector and the target-to-sun vector.
/// Example: /// Example: 1.1
/// Constraints: No constraints specified.
func (rcv *EOObservation_Ingest) SolarPhaseAngle() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(142))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// The angle, in degrees, between the target-to-observer vector and the target-to-sun vector.
/// Example: /// Example: 1.1
/// Constraints: No constraints specified.
func (rcv *EOObservation_Ingest) MutateSolarPhaseAngle(n float64) bool {
	return rcv._tab.MutateFloat64Slot(142, n)
}

/// The angle, in degrees, between the projections of the target-to-observer vector and the target-to-sun vector onto the equatorial plane. The angle is represented as negative when closing and positive when opening.
/// Example: /// Example: 1.1
/// Constraints: No constraints specified.
func (rcv *EOObservation_Ingest) SolarEqPhaseAngle() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(144))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// The angle, in degrees, between the projections of the target-to-observer vector and the target-to-sun vector onto the equatorial plane. The angle is represented as negative when closing and positive when opening.
/// Example: /// Example: 1.1
/// Constraints: No constraints specified.
func (rcv *EOObservation_Ingest) MutateSolarEqPhaseAngle(n float64) bool {
	return rcv._tab.MutateFloat64Slot(144, n)
}

/// Angle from the sun to the equatorial plane.
/// Example: /// Example: 1.1
/// Constraints: No constraints specified.
func (rcv *EOObservation_Ingest) SolarDecAngle() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(146))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Angle from the sun to the equatorial plane.
/// Example: /// Example: 1.1
/// Constraints: No constraints specified.
func (rcv *EOObservation_Ingest) MutateSolarDecAngle(n float64) bool {
	return rcv._tab.MutateFloat64Slot(146, n)
}

/// Shutter delay in seconds.
/// Example: /// Example: 1.1
/// Constraints: No constraints specified.
func (rcv *EOObservation_Ingest) ShutterDelay() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(148))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Shutter delay in seconds.
/// Example: /// Example: 1.1
/// Constraints: No constraints specified.
func (rcv *EOObservation_Ingest) MutateShutterDelay(n float64) bool {
	return rcv._tab.MutateFloat64Slot(148, n)
}

/// Sensor timing bias in seconds.
/// Example: /// Example: 1.1
/// Constraints: No constraints specified.
func (rcv *EOObservation_Ingest) TimingBias() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(150))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Sensor timing bias in seconds.
/// Example: /// Example: 1.1
/// Constraints: No constraints specified.
func (rcv *EOObservation_Ingest) MutateTimingBias(n float64) bool {
	return rcv._tab.MutateFloat64Slot(150, n)
}

/// Optional URI location in the document repository of the raw file parsed by the system to produce this record. To download the raw file, prepend https://udl-hostname/scs/download?id= to this value.
/// Example: /// Example: Example URI
/// Constraints: Minimum length = 0, Maximum length = 256
func (rcv *EOObservation_Ingest) RawFileUri() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(152))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Optional URI location in the document repository of the raw file parsed by the system to produce this record. To download the raw file, prepend https://udl-hostname/scs/download?id= to this value.
/// Example: /// Example: Example URI
/// Constraints: Minimum length = 0, Maximum length = 256
/// Intensity of the target for IR observations, in kw/sr/um.
/// Example: /// Example: 1.1
/// Constraints: No constraints specified.
func (rcv *EOObservation_Ingest) Intensity() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(154))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Intensity of the target for IR observations, in kw/sr/um.
/// Example: /// Example: 1.1
/// Constraints: No constraints specified.
func (rcv *EOObservation_Ingest) MutateIntensity(n float64) bool {
	return rcv._tab.MutateFloat64Slot(154, n)
}

/// Background intensity for IR observations, in kw/sr/um.
/// Example: /// Example: 1.1
/// Constraints: No constraints specified.
func (rcv *EOObservation_Ingest) BgIntensity() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(156))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Background intensity for IR observations, in kw/sr/um.
/// Example: /// Example: 1.1
/// Constraints: No constraints specified.
func (rcv *EOObservation_Ingest) MutateBgIntensity(n float64) bool {
	return rcv._tab.MutateFloat64Slot(156, n)
}

/// Optional source-provided and searchable metadata or descriptor of the data.
/// Example: /// Example: PROVIDED_DATA1
/// Constraints: Minimum length = 0, Maximum length = 64
func (rcv *EOObservation_Ingest) Descriptor() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(158))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Optional source-provided and searchable metadata or descriptor of the data.
/// Example: /// Example: PROVIDED_DATA1
/// Constraints: Minimum length = 0, Maximum length = 64
/// Source of the data.
/// Example: /// Example: Bluestaq
/// Constraints: Minimum length = 1, Maximum length = 64
func (rcv *EOObservation_Ingest) Source() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(160))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Source of the data.
/// Example: /// Example: Bluestaq
/// Constraints: Minimum length = 1, Maximum length = 64
/// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
/// Example: /// Example: THIRD_PARTY_DATASOURCE
/// Constraints: Minimum length = 0, Maximum length = 64
func (rcv *EOObservation_Ingest) Origin() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(162))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
/// Example: /// Example: THIRD_PARTY_DATASOURCE
/// Constraints: Minimum length = 0, Maximum length = 64
/// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
/// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
/// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
/// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
/// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
/// Example: /// Example: TEST
/// Constraints: Minimum length = 1, Maximum length = 32
func (rcv *EOObservation_Ingest) DataMode() EOObservation_Ingest_dataMode_Enum {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(164))
	if o != 0 {
		return EOObservation_Ingest_dataMode_Enum(rcv._tab.GetInt8(o + rcv._tab.Pos))
	}
	return 0
}

/// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
/// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
/// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
/// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
/// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
/// Example: /// Example: TEST
/// Constraints: Minimum length = 1, Maximum length = 32
func (rcv *EOObservation_Ingest) MutateDataMode(n EOObservation_Ingest_dataMode_Enum) bool {
	return rcv._tab.MutateInt8Slot(164, int8(n))
}

/// Optional array of provider/source specific tags for this data, where each element is no longer than 32 characters, used for implementing data owner conditional access controls to restrict access to the data. Should be left null by data providers unless conditional access controls are coordinated with the UDL team.
/// Example: /// Example: ['PROVIDER_TAG1', 'PROVIDER_TAG2']
/// Constraints: No constraints specified.
func (rcv *EOObservation_Ingest) Tags(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(166))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *EOObservation_Ingest) TagsLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(166))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

/// Optional array of provider/source specific tags for this data, where each element is no longer than 32 characters, used for implementing data owner conditional access controls to restrict access to the data. Should be left null by data providers unless conditional access controls are coordinated with the UDL team.
/// Example: /// Example: ['PROVIDER_TAG1', 'PROVIDER_TAG2']
/// Constraints: No constraints specified.
/// Time the row was created in the database, auto-populated by the system.
/// Example: /// Example: 2018-01-01T16:00:00.123Z
/// Constraints: No constraints specified.
func (rcv *EOObservation_Ingest) CreatedAt() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(168))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Time the row was created in the database, auto-populated by the system.
/// Example: /// Example: 2018-01-01T16:00:00.123Z
/// Constraints: No constraints specified.
/// Application user who created the row in the database, auto-populated by the system.
/// Example: /// Example: some.user
/// Constraints: Minimum length = 1, Maximum length = 64
func (rcv *EOObservation_Ingest) CreatedBy() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(170))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Application user who created the row in the database, auto-populated by the system.
/// Example: /// Example: some.user
/// Constraints: Minimum length = 1, Maximum length = 64
/// This is the uncertainty in the zero point for the filter used for this observation/row in units of mag. For use with differential photometry.
/// Example: /// Example: 1.1
/// Constraints: No constraints specified.
func (rcv *EOObservation_Ingest) ZeroPtdUnc() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(172))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// This is the uncertainty in the zero point for the filter used for this observation/row in units of mag. For use with differential photometry.
/// Example: /// Example: 1.1
/// Constraints: No constraints specified.
func (rcv *EOObservation_Ingest) MutateZeroPtdUnc(n float64) bool {
	return rcv._tab.MutateFloat64Slot(172, n)
}

/// No description provided.
/// Example: /// Example: No example provided.
/// Constraints: No constraints specified.
func (rcv *EOObservation_Ingest) EoobservationDetails() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(174))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// No description provided.
/// Example: /// Example: No example provided.
/// Constraints: No constraints specified.
/// The reference frame of the EOObservation measurements. If the referenceFrame is null it is assumed to be J2000.
/// Example: /// Example: J2000
/// Constraints: Minimum length = 0, Maximum length = 24
func (rcv *EOObservation_Ingest) ReferenceFrame() EOObservation_Ingest_referenceFrame_Enum {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(176))
	if o != 0 {
		return EOObservation_Ingest_referenceFrame_Enum(rcv._tab.GetInt8(o + rcv._tab.Pos))
	}
	return 0
}

/// The reference frame of the EOObservation measurements. If the referenceFrame is null it is assumed to be J2000.
/// Example: /// Example: J2000
/// Constraints: Minimum length = 0, Maximum length = 24
func (rcv *EOObservation_Ingest) MutateReferenceFrame(n EOObservation_Ingest_referenceFrame_Enum) bool {
	return rcv._tab.MutateInt8Slot(176, int8(n))
}

/// The reference frame of the observing sensor state. If the senReferenceFrame is null it is assumed to be J2000.
/// Example: /// Example: J2000
/// Constraints: Minimum length = 0, Maximum length = 24
func (rcv *EOObservation_Ingest) SenReferenceFrame() EOObservation_Ingest_senReferenceFrame_Enum {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(178))
	if o != 0 {
		return EOObservation_Ingest_senReferenceFrame_Enum(rcv._tab.GetInt8(o + rcv._tab.Pos))
	}
	return 0
}

/// The reference frame of the observing sensor state. If the senReferenceFrame is null it is assumed to be J2000.
/// Example: /// Example: J2000
/// Constraints: Minimum length = 0, Maximum length = 24
func (rcv *EOObservation_Ingest) MutateSenReferenceFrame(n EOObservation_Ingest_senReferenceFrame_Enum) bool {
	return rcv._tab.MutateInt8Slot(178, int8(n))
}

/// Boolean indicating that the target object was in umbral eclipse at the time of this observation.
/// Example: /// Example: False
/// Constraints: No constraints specified.
func (rcv *EOObservation_Ingest) Umbra() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(180))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

/// Boolean indicating that the target object was in umbral eclipse at the time of this observation.
/// Example: /// Example: False
/// Constraints: No constraints specified.
func (rcv *EOObservation_Ingest) MutateUmbra(n bool) bool {
	return rcv._tab.MutateBoolSlot(180, n)
}

/// Boolean indicating that the target object was in a penumbral eclipse at the time of this observation.
/// Example: /// Example: False
/// Constraints: No constraints specified.
func (rcv *EOObservation_Ingest) Penumbra() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(182))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

/// Boolean indicating that the target object was in a penumbral eclipse at the time of this observation.
/// Example: /// Example: False
/// Constraints: No constraints specified.
func (rcv *EOObservation_Ingest) MutatePenumbra(n bool) bool {
	return rcv._tab.MutateBoolSlot(182, n)
}

/// The originating source network on which this record was created, auto-populated by the system.
/// Example: /// Example: ORIG
/// Constraints: Minimum length = 1, Maximum length = 32
func (rcv *EOObservation_Ingest) OrigNetwork() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(184))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The originating source network on which this record was created, auto-populated by the system.
/// Example: /// Example: ORIG
/// Constraints: Minimum length = 1, Maximum length = 32
/// The source data library from which this record was received. This could be a remote or tactical UDL or another data library. If null, the record should be assumed to have originated from the primary Enterprise UDL.
/// Example: /// Example: AXE
/// Constraints: Minimum length = 0, Maximum length = 64
func (rcv *EOObservation_Ingest) SourceDl() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(186))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The source data library from which this record was received. This could be a remote or tactical UDL or another data library. If null, the record should be assumed to have originated from the primary Enterprise UDL.
/// Example: /// Example: AXE
/// Constraints: Minimum length = 0, Maximum length = 64
/// Read only enumeration specifying the type of observation (e.g. OPTICAL, RADAR, RF, etc).
/// Example: /// Example: OPTICAL
/// Constraints: No constraints specified.
func (rcv *EOObservation_Ingest) Type() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(188))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Read only enumeration specifying the type of observation (e.g. OPTICAL, RADAR, RF, etc).
/// Example: /// Example: OPTICAL
/// Constraints: No constraints specified.
func EOObservation_IngestStart(builder *flatbuffers.Builder) {
	builder.StartObject(93)
}
func EOObservation_IngestAddId(builder *flatbuffers.Builder, id flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(id), 0)
}
func EOObservation_IngestAddClassificationMarking(builder *flatbuffers.Builder, classificationMarking flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(classificationMarking), 0)
}
func EOObservation_IngestAddObTime(builder *flatbuffers.Builder, obTime flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(obTime), 0)
}
func EOObservation_IngestAddCorrQuality(builder *flatbuffers.Builder, corrQuality float64) {
	builder.PrependFloat64Slot(3, corrQuality, 0.0)
}
func EOObservation_IngestAddIdOnOrbit(builder *flatbuffers.Builder, idOnOrbit flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(4, flatbuffers.UOffsetT(idOnOrbit), 0)
}
func EOObservation_IngestAddIdSensor(builder *flatbuffers.Builder, idSensor flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(5, flatbuffers.UOffsetT(idSensor), 0)
}
func EOObservation_IngestAddIdSkyImagery(builder *flatbuffers.Builder, idSkyImagery flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(6, flatbuffers.UOffsetT(idSkyImagery), 0)
}
func EOObservation_IngestAddCollectMethod(builder *flatbuffers.Builder, collectMethod flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(7, flatbuffers.UOffsetT(collectMethod), 0)
}
func EOObservation_IngestAddSatNo(builder *flatbuffers.Builder, satNo int32) {
	builder.PrependInt32Slot(8, satNo, 0)
}
func EOObservation_IngestAddTaskId(builder *flatbuffers.Builder, taskId flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(9, flatbuffers.UOffsetT(taskId), 0)
}
func EOObservation_IngestAddTransactionId(builder *flatbuffers.Builder, transactionId flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(10, flatbuffers.UOffsetT(transactionId), 0)
}
func EOObservation_IngestAddTrackId(builder *flatbuffers.Builder, trackId flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(11, flatbuffers.UOffsetT(trackId), 0)
}
func EOObservation_IngestAddObPosition(builder *flatbuffers.Builder, obPosition flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(12, flatbuffers.UOffsetT(obPosition), 0)
}
func EOObservation_IngestAddOrigObjectId(builder *flatbuffers.Builder, origObjectId flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(13, flatbuffers.UOffsetT(origObjectId), 0)
}
func EOObservation_IngestAddOrigSensorId(builder *flatbuffers.Builder, origSensorId flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(14, flatbuffers.UOffsetT(origSensorId), 0)
}
func EOObservation_IngestAddUct(builder *flatbuffers.Builder, uct bool) {
	builder.PrependBoolSlot(15, uct, false)
}
func EOObservation_IngestAddAzimuth(builder *flatbuffers.Builder, azimuth float64) {
	builder.PrependFloat64Slot(16, azimuth, 0.0)
}
func EOObservation_IngestAddAzimuthUnc(builder *flatbuffers.Builder, azimuthUnc float64) {
	builder.PrependFloat64Slot(17, azimuthUnc, 0.0)
}
func EOObservation_IngestAddAzimuthBias(builder *flatbuffers.Builder, azimuthBias float64) {
	builder.PrependFloat64Slot(18, azimuthBias, 0.0)
}
func EOObservation_IngestAddAzimuthRate(builder *flatbuffers.Builder, azimuthRate float64) {
	builder.PrependFloat64Slot(19, azimuthRate, 0.0)
}
func EOObservation_IngestAddElevation(builder *flatbuffers.Builder, elevation float64) {
	builder.PrependFloat64Slot(20, elevation, 0.0)
}
func EOObservation_IngestAddElevationUnc(builder *flatbuffers.Builder, elevationUnc float64) {
	builder.PrependFloat64Slot(21, elevationUnc, 0.0)
}
func EOObservation_IngestAddElevationBias(builder *flatbuffers.Builder, elevationBias float64) {
	builder.PrependFloat64Slot(22, elevationBias, 0.0)
}
func EOObservation_IngestAddElevationRate(builder *flatbuffers.Builder, elevationRate float64) {
	builder.PrependFloat64Slot(23, elevationRate, 0.0)
}
func EOObservation_IngestAddRange(builder *flatbuffers.Builder, range_ float64) {
	builder.PrependFloat64Slot(24, range_, 0.0)
}
func EOObservation_IngestAddRangeUnc(builder *flatbuffers.Builder, rangeUnc float64) {
	builder.PrependFloat64Slot(25, rangeUnc, 0.0)
}
func EOObservation_IngestAddRangeBias(builder *flatbuffers.Builder, rangeBias float64) {
	builder.PrependFloat64Slot(26, rangeBias, 0.0)
}
func EOObservation_IngestAddRangeRate(builder *flatbuffers.Builder, rangeRate float64) {
	builder.PrependFloat64Slot(27, rangeRate, 0.0)
}
func EOObservation_IngestAddRangeRateUnc(builder *flatbuffers.Builder, rangeRateUnc float64) {
	builder.PrependFloat64Slot(28, rangeRateUnc, 0.0)
}
func EOObservation_IngestAddRa(builder *flatbuffers.Builder, ra float64) {
	builder.PrependFloat64Slot(29, ra, 0.0)
}
func EOObservation_IngestAddRaRate(builder *flatbuffers.Builder, raRate float64) {
	builder.PrependFloat64Slot(30, raRate, 0.0)
}
func EOObservation_IngestAddRaUnc(builder *flatbuffers.Builder, raUnc float64) {
	builder.PrependFloat64Slot(31, raUnc, 0.0)
}
func EOObservation_IngestAddRaBias(builder *flatbuffers.Builder, raBias float64) {
	builder.PrependFloat64Slot(32, raBias, 0.0)
}
func EOObservation_IngestAddDeclination(builder *flatbuffers.Builder, declination float64) {
	builder.PrependFloat64Slot(33, declination, 0.0)
}
func EOObservation_IngestAddDeclinationRate(builder *flatbuffers.Builder, declinationRate float64) {
	builder.PrependFloat64Slot(34, declinationRate, 0.0)
}
func EOObservation_IngestAddDeclinationUnc(builder *flatbuffers.Builder, declinationUnc float64) {
	builder.PrependFloat64Slot(35, declinationUnc, 0.0)
}
func EOObservation_IngestAddDeclinationBias(builder *flatbuffers.Builder, declinationBias float64) {
	builder.PrependFloat64Slot(36, declinationBias, 0.0)
}
func EOObservation_IngestAddLosx(builder *flatbuffers.Builder, losx float64) {
	builder.PrependFloat64Slot(37, losx, 0.0)
}
func EOObservation_IngestAddLosy(builder *flatbuffers.Builder, losy float64) {
	builder.PrependFloat64Slot(38, losy, 0.0)
}
func EOObservation_IngestAddLosz(builder *flatbuffers.Builder, losz float64) {
	builder.PrependFloat64Slot(39, losz, 0.0)
}
func EOObservation_IngestAddLosUnc(builder *flatbuffers.Builder, losUnc float64) {
	builder.PrependFloat64Slot(40, losUnc, 0.0)
}
func EOObservation_IngestAddLosxvel(builder *flatbuffers.Builder, losxvel float64) {
	builder.PrependFloat64Slot(41, losxvel, 0.0)
}
func EOObservation_IngestAddLosyvel(builder *flatbuffers.Builder, losyvel float64) {
	builder.PrependFloat64Slot(42, losyvel, 0.0)
}
func EOObservation_IngestAddLoszvel(builder *flatbuffers.Builder, loszvel float64) {
	builder.PrependFloat64Slot(43, loszvel, 0.0)
}
func EOObservation_IngestAddSenlat(builder *flatbuffers.Builder, senlat float64) {
	builder.PrependFloat64Slot(44, senlat, 0.0)
}
func EOObservation_IngestAddSenlon(builder *flatbuffers.Builder, senlon float64) {
	builder.PrependFloat64Slot(45, senlon, 0.0)
}
func EOObservation_IngestAddSenalt(builder *flatbuffers.Builder, senalt float64) {
	builder.PrependFloat64Slot(46, senalt, 0.0)
}
func EOObservation_IngestAddSenx(builder *flatbuffers.Builder, senx float64) {
	builder.PrependFloat64Slot(47, senx, 0.0)
}
func EOObservation_IngestAddSeny(builder *flatbuffers.Builder, seny float64) {
	builder.PrependFloat64Slot(48, seny, 0.0)
}
func EOObservation_IngestAddSenz(builder *flatbuffers.Builder, senz float64) {
	builder.PrependFloat64Slot(49, senz, 0.0)
}
func EOObservation_IngestAddSenvelx(builder *flatbuffers.Builder, senvelx float64) {
	builder.PrependFloat64Slot(50, senvelx, 0.0)
}
func EOObservation_IngestAddSenvely(builder *flatbuffers.Builder, senvely float64) {
	builder.PrependFloat64Slot(51, senvely, 0.0)
}
func EOObservation_IngestAddSenvelz(builder *flatbuffers.Builder, senvelz float64) {
	builder.PrependFloat64Slot(52, senvelz, 0.0)
}
func EOObservation_IngestAddSenQuat(builder *flatbuffers.Builder, senQuat flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(53, flatbuffers.UOffsetT(senQuat), 0)
}
func EOObservation_IngestStartSenQuatVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func EOObservation_IngestAddFovCount(builder *flatbuffers.Builder, fovCount int32) {
	builder.PrependInt32Slot(54, fovCount, 0)
}
func EOObservation_IngestAddExpDuration(builder *flatbuffers.Builder, expDuration float64) {
	builder.PrependFloat64Slot(55, expDuration, 0.0)
}
func EOObservation_IngestAddZeroptd(builder *flatbuffers.Builder, zeroptd float64) {
	builder.PrependFloat64Slot(56, zeroptd, 0.0)
}
func EOObservation_IngestAddNetObjSig(builder *flatbuffers.Builder, netObjSig float64) {
	builder.PrependFloat64Slot(57, netObjSig, 0.0)
}
func EOObservation_IngestAddNetObjSigUnc(builder *flatbuffers.Builder, netObjSigUnc float64) {
	builder.PrependFloat64Slot(58, netObjSigUnc, 0.0)
}
func EOObservation_IngestAddMag(builder *flatbuffers.Builder, mag float64) {
	builder.PrependFloat64Slot(59, mag, 0.0)
}
func EOObservation_IngestAddMagUnc(builder *flatbuffers.Builder, magUnc float64) {
	builder.PrependFloat64Slot(60, magUnc, 0.0)
}
func EOObservation_IngestAddMagNormRange(builder *flatbuffers.Builder, magNormRange float64) {
	builder.PrependFloat64Slot(61, magNormRange, 0.0)
}
func EOObservation_IngestAddGeolat(builder *flatbuffers.Builder, geolat float64) {
	builder.PrependFloat64Slot(62, geolat, 0.0)
}
func EOObservation_IngestAddGeolon(builder *flatbuffers.Builder, geolon float64) {
	builder.PrependFloat64Slot(63, geolon, 0.0)
}
func EOObservation_IngestAddGeoalt(builder *flatbuffers.Builder, geoalt float64) {
	builder.PrependFloat64Slot(64, geoalt, 0.0)
}
func EOObservation_IngestAddGeorange(builder *flatbuffers.Builder, georange float64) {
	builder.PrependFloat64Slot(65, georange, 0.0)
}
func EOObservation_IngestAddSkyBkgrnd(builder *flatbuffers.Builder, skyBkgrnd float64) {
	builder.PrependFloat64Slot(66, skyBkgrnd, 0.0)
}
func EOObservation_IngestAddPrimaryExtinction(builder *flatbuffers.Builder, primaryExtinction float64) {
	builder.PrependFloat64Slot(67, primaryExtinction, 0.0)
}
func EOObservation_IngestAddPrimaryExtinctionUnc(builder *flatbuffers.Builder, primaryExtinctionUnc float64) {
	builder.PrependFloat64Slot(68, primaryExtinctionUnc, 0.0)
}
func EOObservation_IngestAddSolarPhaseAngle(builder *flatbuffers.Builder, solarPhaseAngle float64) {
	builder.PrependFloat64Slot(69, solarPhaseAngle, 0.0)
}
func EOObservation_IngestAddSolarEqPhaseAngle(builder *flatbuffers.Builder, solarEqPhaseAngle float64) {
	builder.PrependFloat64Slot(70, solarEqPhaseAngle, 0.0)
}
func EOObservation_IngestAddSolarDecAngle(builder *flatbuffers.Builder, solarDecAngle float64) {
	builder.PrependFloat64Slot(71, solarDecAngle, 0.0)
}
func EOObservation_IngestAddShutterDelay(builder *flatbuffers.Builder, shutterDelay float64) {
	builder.PrependFloat64Slot(72, shutterDelay, 0.0)
}
func EOObservation_IngestAddTimingBias(builder *flatbuffers.Builder, timingBias float64) {
	builder.PrependFloat64Slot(73, timingBias, 0.0)
}
func EOObservation_IngestAddRawFileUri(builder *flatbuffers.Builder, rawFileUri flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(74, flatbuffers.UOffsetT(rawFileUri), 0)
}
func EOObservation_IngestAddIntensity(builder *flatbuffers.Builder, intensity float64) {
	builder.PrependFloat64Slot(75, intensity, 0.0)
}
func EOObservation_IngestAddBgIntensity(builder *flatbuffers.Builder, bgIntensity float64) {
	builder.PrependFloat64Slot(76, bgIntensity, 0.0)
}
func EOObservation_IngestAddDescriptor(builder *flatbuffers.Builder, descriptor flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(77, flatbuffers.UOffsetT(descriptor), 0)
}
func EOObservation_IngestAddSource(builder *flatbuffers.Builder, source flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(78, flatbuffers.UOffsetT(source), 0)
}
func EOObservation_IngestAddOrigin(builder *flatbuffers.Builder, origin flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(79, flatbuffers.UOffsetT(origin), 0)
}
func EOObservation_IngestAddDataMode(builder *flatbuffers.Builder, dataMode EOObservation_Ingest_dataMode_Enum) {
	builder.PrependInt8Slot(80, int8(dataMode), 0)
}
func EOObservation_IngestAddTags(builder *flatbuffers.Builder, tags flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(81, flatbuffers.UOffsetT(tags), 0)
}
func EOObservation_IngestStartTagsVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func EOObservation_IngestAddCreatedAt(builder *flatbuffers.Builder, createdAt flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(82, flatbuffers.UOffsetT(createdAt), 0)
}
func EOObservation_IngestAddCreatedBy(builder *flatbuffers.Builder, createdBy flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(83, flatbuffers.UOffsetT(createdBy), 0)
}
func EOObservation_IngestAddZeroPtdUnc(builder *flatbuffers.Builder, zeroPtdUnc float64) {
	builder.PrependFloat64Slot(84, zeroPtdUnc, 0.0)
}
func EOObservation_IngestAddEoobservationDetails(builder *flatbuffers.Builder, eoobservationDetails flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(85, flatbuffers.UOffsetT(eoobservationDetails), 0)
}
func EOObservation_IngestAddReferenceFrame(builder *flatbuffers.Builder, referenceFrame EOObservation_Ingest_referenceFrame_Enum) {
	builder.PrependInt8Slot(86, int8(referenceFrame), 0)
}
func EOObservation_IngestAddSenReferenceFrame(builder *flatbuffers.Builder, senReferenceFrame EOObservation_Ingest_senReferenceFrame_Enum) {
	builder.PrependInt8Slot(87, int8(senReferenceFrame), 0)
}
func EOObservation_IngestAddUmbra(builder *flatbuffers.Builder, umbra bool) {
	builder.PrependBoolSlot(88, umbra, false)
}
func EOObservation_IngestAddPenumbra(builder *flatbuffers.Builder, penumbra bool) {
	builder.PrependBoolSlot(89, penumbra, false)
}
func EOObservation_IngestAddOrigNetwork(builder *flatbuffers.Builder, origNetwork flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(90, flatbuffers.UOffsetT(origNetwork), 0)
}
func EOObservation_IngestAddSourceDl(builder *flatbuffers.Builder, sourceDl flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(91, flatbuffers.UOffsetT(sourceDl), 0)
}
func EOObservation_IngestAddType(builder *flatbuffers.Builder, type_ flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(92, flatbuffers.UOffsetT(type_), 0)
}
func EOObservation_IngestEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
