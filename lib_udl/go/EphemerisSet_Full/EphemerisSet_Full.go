// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package EphemerisSet_Full

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

/// /// EphemerisSet represents a wrapper or collection of Ephemeris 'points' and meta data indicating the specifics of the propagation of an on-orbit object. Ephemeris is typically distributed in a flat file containing details of the ephemeris generation as well as a large collection of individual points at varying time steps. EphemerisSet is analogous to this flat file.
type EphemerisSet_Full struct {
	_tab flatbuffers.Table
}

const EphemerisSet_FullIdentifier = "EPHE"

func GetRootAsEphemerisSet_Full(buf []byte, offset flatbuffers.UOffsetT) *EphemerisSet_Full {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &EphemerisSet_Full{}
	x.Init(buf, n+offset)
	return x
}

func FinishEphemerisSet_FullBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	identifierBytes := []byte(EphemerisSet_FullIdentifier)
	builder.FinishWithFileIdentifier(offset, identifierBytes)
}

func EphemerisSet_FullBufferHasIdentifier(buf []byte) bool {
	return flatbuffers.BufferHasIdentifier(buf, EphemerisSet_FullIdentifier)
}

func GetSizePrefixedRootAsEphemerisSet_Full(buf []byte, offset flatbuffers.UOffsetT) *EphemerisSet_Full {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &EphemerisSet_Full{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedEphemerisSet_FullBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	identifierBytes := []byte(EphemerisSet_FullIdentifier)
	builder.FinishSizePrefixedWithFileIdentifier(offset, identifierBytes)
}

func SizePrefixedEphemerisSet_FullBufferHasIdentifier(buf []byte) bool {
	return flatbuffers.SizePrefixedBufferHasIdentifier(buf, EphemerisSet_FullIdentifier)
}

func (rcv *EphemerisSet_Full) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *EphemerisSet_Full) Table() flatbuffers.Table {
	return rcv._tab
}

/// Unique identifier of the record, auto-generated by the system.
/// Example: /// Example: EPHEMERISSET-ID
/// Constraints: Minimum length = 1, Maximum length = 36
func (rcv *EphemerisSet_Full) Id() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Unique identifier of the record, auto-generated by the system.
/// Example: /// Example: EPHEMERISSET-ID
/// Constraints: Minimum length = 1, Maximum length = 36
/// Classification marking of the data in IC/CAPCO Portion-marked format.
/// Example: /// Example: U
/// Constraints: Minimum length = 1, Maximum length = 128
func (rcv *EphemerisSet_Full) ClassificationMarking() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Classification marking of the data in IC/CAPCO Portion-marked format.
/// Example: /// Example: U
/// Constraints: Minimum length = 1, Maximum length = 128
/// Unique identifier of the primary satellite on-orbit object.
/// Example: /// Example: ONORBIT-ID
/// Constraints: Minimum length = 0, Maximum length = 36
func (rcv *EphemerisSet_Full) IdOnOrbit() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Unique identifier of the primary satellite on-orbit object.
/// Example: /// Example: ONORBIT-ID
/// Constraints: Minimum length = 0, Maximum length = 36
/// Optional identifier provided by ephemeris source to indicate the target object of this ephemeris. This may be an internal identifier and not necessarily map to a valid satellite number.
/// Example: /// Example: ORIGOBJECT-ID
/// Constraints: Minimum length = 0, Maximum length = 36
func (rcv *EphemerisSet_Full) OrigObjectId() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Optional identifier provided by ephemeris source to indicate the target object of this ephemeris. This may be an internal identifier and not necessarily map to a valid satellite number.
/// Example: /// Example: ORIGOBJECT-ID
/// Constraints: Minimum length = 0, Maximum length = 36
/// Start time/first time point of the ephemeris, in ISO 8601 UTC format.
/// Example: /// Example: 2018-01-01T16:00:00.123456Z
/// Constraints: No constraints specified.
func (rcv *EphemerisSet_Full) PointStartTime() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Start time/first time point of the ephemeris, in ISO 8601 UTC format.
/// Example: /// Example: 2018-01-01T16:00:00.123456Z
/// Constraints: No constraints specified.
/// Optional start time of the usable time span for the ephemeris data, in ISO 8601 UTC format with microsecond precision.
/// Example: /// Example: 2018-01-01T16:10:00.123456Z
/// Constraints: No constraints specified.
func (rcv *EphemerisSet_Full) UsableStartTime() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Optional start time of the usable time span for the ephemeris data, in ISO 8601 UTC format with microsecond precision.
/// Example: /// Example: 2018-01-01T16:10:00.123456Z
/// Constraints: No constraints specified.
/// End time/last time point of the ephemeris, in ISO 8601 UTC format.
/// Example: /// Example: 2018-01-01T16:00:00.123456Z
/// Constraints: No constraints specified.
func (rcv *EphemerisSet_Full) PointEndTime() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// End time/last time point of the ephemeris, in ISO 8601 UTC format.
/// Example: /// Example: 2018-01-01T16:00:00.123456Z
/// Constraints: No constraints specified.
/// Optional end time of the usable time span for the ephemeris data, in ISO 8601 UTC format with microsecond precision.
/// Example: /// Example: 2018-01-01T20:50:00.123456Z
/// Constraints: No constraints specified.
func (rcv *EphemerisSet_Full) UsableEndTime() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(18))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Optional end time of the usable time span for the ephemeris data, in ISO 8601 UTC format with microsecond precision.
/// Example: /// Example: 2018-01-01T20:50:00.123456Z
/// Constraints: No constraints specified.
/// Ephemeris step size, in seconds.
/// Example: /// Example: 1
/// Constraints: No constraints specified.
func (rcv *EphemerisSet_Full) StepSize() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(20))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

/// Ephemeris step size, in seconds.
/// Example: /// Example: 1
/// Constraints: No constraints specified.
func (rcv *EphemerisSet_Full) MutateStepSize(n int32) bool {
	return rcv._tab.MutateInt32Slot(20, n)
}

/// Number of points contained in the ephemeris.
/// Example: /// Example: 1
/// Constraints: No constraints specified.
func (rcv *EphemerisSet_Full) NumPoints() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(22))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

/// Number of points contained in the ephemeris.
/// Example: /// Example: 1
/// Constraints: No constraints specified.
func (rcv *EphemerisSet_Full) MutateNumPoints(n int32) bool {
	return rcv._tab.MutateInt32Slot(22, n)
}

/// The type/purpose of the ephemeris (e.g., CALIBRATION, LAUNCH, MNVR_PLAN, ROUTINE, SCREENING).
/// Example: /// Example: LAUNCH
/// Constraints: Minimum length = 1, Maximum length = 24
func (rcv *EphemerisSet_Full) Type() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(24))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The type/purpose of the ephemeris (e.g., CALIBRATION, LAUNCH, MNVR_PLAN, ROUTINE, SCREENING).
/// Example: /// Example: LAUNCH
/// Constraints: Minimum length = 1, Maximum length = 24
/// The pedigree of the ephemeris or source data used for ephemeris generation (e.g.  GPS, SLR, RANGING, PROPAGATED, HYBRID).
/// Example: /// Example: PROPAGATED
/// Constraints: Minimum length = 0, Maximum length = 24
func (rcv *EphemerisSet_Full) Pedigree() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(26))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The pedigree of the ephemeris or source data used for ephemeris generation (e.g.  GPS, SLR, RANGING, PROPAGATED, HYBRID).
/// Example: /// Example: PROPAGATED
/// Constraints: Minimum length = 0, Maximum length = 24
/// The source category of the ephemeris (e.g. OWNER_OPERATOR, ANALYST, EXTERNAL).
/// Example: /// Example: ANALYST
/// Constraints: Minimum length = 1, Maximum length = 24
func (rcv *EphemerisSet_Full) Category() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(28))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The source category of the ephemeris (e.g. OWNER_OPERATOR, ANALYST, EXTERNAL).
/// Example: /// Example: ANALYST
/// Constraints: Minimum length = 1, Maximum length = 24
/// ID of the State Vector used to generate the ephemeris.
/// Example: /// Example: STATEVECTOR-ID
/// Constraints: Minimum length = 0, Maximum length = 36
func (rcv *EphemerisSet_Full) IdStateVector() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(30))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// ID of the State Vector used to generate the ephemeris.
/// Example: /// Example: STATEVECTOR-ID
/// Constraints: Minimum length = 0, Maximum length = 36
/// Boolean indicating whether maneuver(s) are incorporated into the ephemeris.
/// Example: /// Example: False
/// Constraints: No constraints specified.
func (rcv *EphemerisSet_Full) HasMnvr() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(32))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

/// Boolean indicating whether maneuver(s) are incorporated into the ephemeris.
/// Example: /// Example: False
/// Constraints: No constraints specified.
func (rcv *EphemerisSet_Full) MutateHasMnvr(n bool) bool {
	return rcv._tab.MutateBoolSlot(32, n)
}

/// Array of the maneuver IDs of all maneuvers incorporated in the ephemeris.
/// Example: /// Example: ['EXAMPLE_ID1', 'EXAMPLE_ID2']
/// Constraints: No constraints specified.
func (rcv *EphemerisSet_Full) IdManeuvers(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(34))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *EphemerisSet_Full) IdManeuversLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(34))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

/// Array of the maneuver IDs of all maneuvers incorporated in the ephemeris.
/// Example: /// Example: ['EXAMPLE_ID1', 'EXAMPLE_ID2']
/// Constraints: No constraints specified.
/// Boolean indicating whether covariance data is provided with the ephemeris.
/// Example: /// Example: False
/// Constraints: No constraints specified.
func (rcv *EphemerisSet_Full) HasCov() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(36))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

/// Boolean indicating whether covariance data is provided with the ephemeris.
/// Example: /// Example: False
/// Constraints: No constraints specified.
func (rcv *EphemerisSet_Full) MutateHasCov(n bool) bool {
	return rcv._tab.MutateBoolSlot(36, n)
}

/// Boolean indicating whether acceleration data is provided with the ephemeris.
/// Example: /// Example: False
/// Constraints: No constraints specified.
func (rcv *EphemerisSet_Full) HasAccel() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(38))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

/// Boolean indicating whether acceleration data is provided with the ephemeris.
/// Example: /// Example: False
/// Constraints: No constraints specified.
func (rcv *EphemerisSet_Full) MutateHasAccel(n bool) bool {
	return rcv._tab.MutateBoolSlot(38, n)
}

/// The Central Body of the ephemeris.  Assumed to be Earth, unless otherwise indicated.
/// Example: /// Example: Earth
/// Constraints: Minimum length = 0, Maximum length = 32
func (rcv *EphemerisSet_Full) CentBody() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(40))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The Central Body of the ephemeris.  Assumed to be Earth, unless otherwise indicated.
/// Example: /// Example: Earth
/// Constraints: Minimum length = 0, Maximum length = 32
/// Integrator used in ephemeris generation (e.g. RK7(8), RK8(9), COWELL, TWO-BODY).
/// Example: /// Example: COWELL
/// Constraints: Minimum length = 0, Maximum length = 24
func (rcv *EphemerisSet_Full) Integrator() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(42))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Integrator used in ephemeris generation (e.g. RK7(8), RK8(9), COWELL, TWO-BODY).
/// Example: /// Example: COWELL
/// Constraints: Minimum length = 0, Maximum length = 24
/// Geopotential model used in ephemeris generation (e.g. EGM-96, WGS-84, WGS-72, JGM-2, GEM-T3), including mm degree zonals, nn degree/order tesserals (e.g. EGM-96 24Z,24T).
/// Example: /// Example: GEM-T3
/// Constraints: Minimum length = 0, Maximum length = 32
func (rcv *EphemerisSet_Full) GeopotentialModel() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(44))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Geopotential model used in ephemeris generation (e.g. EGM-96, WGS-84, WGS-72, JGM-2, GEM-T3), including mm degree zonals, nn degree/order tesserals (e.g. EGM-96 24Z,24T).
/// Example: /// Example: GEM-T3
/// Constraints: Minimum length = 0, Maximum length = 32
/// Drag model used in ephemeris generation (e.g. JAC70, MSIS90, NONE, etc.).
/// Example: /// Example: JAC70
/// Constraints: Minimum length = 0, Maximum length = 32
func (rcv *EphemerisSet_Full) DragModel() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(46))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Drag model used in ephemeris generation (e.g. JAC70, MSIS90, NONE, etc.).
/// Example: /// Example: JAC70
/// Constraints: Minimum length = 0, Maximum length = 32
/// Boolean indicating use of lunar/solar data in ephemeris generation.
/// Example: /// Example: False
/// Constraints: No constraints specified.
func (rcv *EphemerisSet_Full) LunarSolar() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(48))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

/// Boolean indicating use of lunar/solar data in ephemeris generation.
/// Example: /// Example: False
/// Constraints: No constraints specified.
func (rcv *EphemerisSet_Full) MutateLunarSolar(n bool) bool {
	return rcv._tab.MutateBoolSlot(48, n)
}

/// Boolean indicating use of solid earth tide data in ephemeris generation.
/// Example: /// Example: False
/// Constraints: No constraints specified.
func (rcv *EphemerisSet_Full) SolidEarthTides() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(50))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

/// Boolean indicating use of solid earth tide data in ephemeris generation.
/// Example: /// Example: False
/// Constraints: No constraints specified.
func (rcv *EphemerisSet_Full) MutateSolidEarthTides(n bool) bool {
	return rcv._tab.MutateBoolSlot(50, n)
}

/// First derivative of ballistic coefficient (m^2/kg-s).
/// Example: /// Example: 1.1
/// Constraints: No constraints specified.
func (rcv *EphemerisSet_Full) BDot() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(52))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// First derivative of ballistic coefficient (m^2/kg-s).
/// Example: /// Example: 1.1
/// Constraints: No constraints specified.
func (rcv *EphemerisSet_Full) MutateBDot(n float64) bool {
	return rcv._tab.MutateFloat64Slot(52, n)
}

/// Model parameter value for energy dissipation rate (EDR), expressed in w/kg.
/// Example: /// Example: 1.1
/// Constraints: No constraints specified.
func (rcv *EphemerisSet_Full) Edr() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(54))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Model parameter value for energy dissipation rate (EDR), expressed in w/kg.
/// Example: /// Example: 1.1
/// Constraints: No constraints specified.
func (rcv *EphemerisSet_Full) MutateEdr(n float64) bool {
	return rcv._tab.MutateFloat64Slot(54, n)
}

/// The recommended interpolation method for the ephemeris data.
/// Example: /// Example: LINEAR
/// Constraints: Minimum length = 0, Maximum length = 16
func (rcv *EphemerisSet_Full) Interpolation() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(56))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The recommended interpolation method for the ephemeris data.
/// Example: /// Example: LINEAR
/// Constraints: Minimum length = 0, Maximum length = 16
/// The recommended interpolation degree for the ephemeris data.
/// Example: /// Example: 5
/// Constraints: No constraints specified.
func (rcv *EphemerisSet_Full) InterpolationDegree() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(58))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

/// The recommended interpolation degree for the ephemeris data.
/// Example: /// Example: 5
/// Constraints: No constraints specified.
func (rcv *EphemerisSet_Full) MutateInterpolationDegree(n int32) bool {
	return rcv._tab.MutateInt32Slot(58, n)
}

/// Filename of the raw file used to provide the ephemeris data including filetype extension, if applicable. This file may be retrieved using the 'getFile' operation as specified in the 'EphemerisSet' OpenAPI docs.
/// Example: /// Example: Example file name
/// Constraints: Minimum length = 0, Maximum length = 128
func (rcv *EphemerisSet_Full) Filename() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(60))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Filename of the raw file used to provide the ephemeris data including filetype extension, if applicable. This file may be retrieved using the 'getFile' operation as specified in the 'EphemerisSet' OpenAPI docs.
/// Example: /// Example: Example file name
/// Constraints: Minimum length = 0, Maximum length = 128
/// Additional source provided comments associated with the ephemeris.
/// Example: /// Example: Example notes
/// Constraints: Minimum length = 0, Maximum length = 512
func (rcv *EphemerisSet_Full) Comments() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(62))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Additional source provided comments associated with the ephemeris.
/// Example: /// Example: Example notes
/// Constraints: Minimum length = 0, Maximum length = 512
/// Notes/description of the provided ephemeris. A value of DSTOP signifies the ephemeris were generated using the last observation available.
/// Example: /// Example: Example notes
/// Constraints: Minimum length = 0, Maximum length = 512
func (rcv *EphemerisSet_Full) Description() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(64))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Notes/description of the provided ephemeris. A value of DSTOP signifies the ephemeris were generated using the last observation available.
/// Example: /// Example: Example notes
/// Constraints: Minimum length = 0, Maximum length = 512
/// Optional source-provided and searchable metadata or descriptor of the data.
/// Example: /// Example: Example descriptor
/// Constraints: Minimum length = 0, Maximum length = 64
func (rcv *EphemerisSet_Full) Descriptor() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(66))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Optional source-provided and searchable metadata or descriptor of the data.
/// Example: /// Example: Example descriptor
/// Constraints: Minimum length = 0, Maximum length = 64
/// The reference frame of the cartesian orbital states. If the referenceFrame is null it is assumed to be J2000.
/// Example: /// Example: J2000
/// Constraints: Minimum length = 0, Maximum length = 24
func (rcv *EphemerisSet_Full) ReferenceFrame() EphemerisSet_Full_referenceFrame_Enum {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(68))
	if o != 0 {
		return EphemerisSet_Full_referenceFrame_Enum(rcv._tab.GetInt8(o + rcv._tab.Pos))
	}
	return 0
}

/// The reference frame of the cartesian orbital states. If the referenceFrame is null it is assumed to be J2000.
/// Example: /// Example: J2000
/// Constraints: Minimum length = 0, Maximum length = 24
func (rcv *EphemerisSet_Full) MutateReferenceFrame(n EphemerisSet_Full_referenceFrame_Enum) bool {
	return rcv._tab.MutateInt8Slot(68, int8(n))
}

/// The reference frame of the covariance matrix elements. If the covReferenceFrame is null it is assumed to be J2000.
/// Example: /// Example: J2000
/// Constraints: Minimum length = 0, Maximum length = 24
func (rcv *EphemerisSet_Full) CovReferenceFrame() EphemerisSet_Full_covReferenceFrame_Enum {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(70))
	if o != 0 {
		return EphemerisSet_Full_covReferenceFrame_Enum(rcv._tab.GetInt8(o + rcv._tab.Pos))
	}
	return 0
}

/// The reference frame of the covariance matrix elements. If the covReferenceFrame is null it is assumed to be J2000.
/// Example: /// Example: J2000
/// Constraints: Minimum length = 0, Maximum length = 24
func (rcv *EphemerisSet_Full) MutateCovReferenceFrame(n EphemerisSet_Full_covReferenceFrame_Enum) bool {
	return rcv._tab.MutateInt8Slot(70, int8(n))
}

/// Time the row was created in the database, in UTC.
/// Example: /// Example: 2018-01-01T16:00:00.123Z
/// Constraints: No constraints specified.
func (rcv *EphemerisSet_Full) CreatedAt() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(72))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Time the row was created in the database, in UTC.
/// Example: /// Example: 2018-01-01T16:00:00.123Z
/// Constraints: No constraints specified.
/// Application user who created the row in the database.
/// Example: /// Example: some.user
/// Constraints: Minimum length = 1, Maximum length = 64
func (rcv *EphemerisSet_Full) CreatedBy() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(74))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Application user who created the row in the database.
/// Example: /// Example: some.user
/// Constraints: Minimum length = 1, Maximum length = 64
/// Source of the data.
/// Example: /// Example: Bluestaq
/// Constraints: Minimum length = 1, Maximum length = 64
func (rcv *EphemerisSet_Full) Source() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(76))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Source of the data.
/// Example: /// Example: Bluestaq
/// Constraints: Minimum length = 1, Maximum length = 64
/// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
/// Example: /// Example: THIRD_PARTY_DATASOURCE
/// Constraints: Minimum length = 0, Maximum length = 64
func (rcv *EphemerisSet_Full) Origin() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(78))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
/// Example: /// Example: THIRD_PARTY_DATASOURCE
/// Constraints: Minimum length = 0, Maximum length = 64
/// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
/// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
/// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
/// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
/// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
/// Example: /// Example: TEST
/// Constraints: Minimum length = 1, Maximum length = 32
func (rcv *EphemerisSet_Full) DataMode() EphemerisSet_Full_dataMode_Enum {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(80))
	if o != 0 {
		return EphemerisSet_Full_dataMode_Enum(rcv._tab.GetInt8(o + rcv._tab.Pos))
	}
	return 0
}

/// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
/// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
/// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
/// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
/// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
/// Example: /// Example: TEST
/// Constraints: Minimum length = 1, Maximum length = 32
func (rcv *EphemerisSet_Full) MutateDataMode(n EphemerisSet_Full_dataMode_Enum) bool {
	return rcv._tab.MutateInt8Slot(80, int8(n))
}

/// No description provided.
/// Example: /// Example: No example provided.
/// Constraints: No constraints specified.
func (rcv *EphemerisSet_Full) StateVector() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(82))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// No description provided.
/// Example: /// Example: No example provided.
/// Constraints: No constraints specified.
/// Satellite/catalog number of the target on-orbit object.
/// Example: /// Example: 2
/// Constraints: No constraints specified.
func (rcv *EphemerisSet_Full) SatNo() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(84))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

/// Satellite/catalog number of the target on-orbit object.
/// Example: /// Example: 2
/// Constraints: No constraints specified.
func (rcv *EphemerisSet_Full) MutateSatNo(n int32) bool {
	return rcv._tab.MutateInt32Slot(84, n)
}

/// The list of ephemeris states belonging to the EphemerisSet. Each ephemeris point is associated with a parent Ephemeris Set via the EphemerisSet ID (esId).
/// Example: /// Example: No example provided.
/// Constraints: No constraints specified.
func (rcv *EphemerisSet_Full) EphemerisList(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(86))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *EphemerisSet_Full) EphemerisListLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(86))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

/// The list of ephemeris states belonging to the EphemerisSet. Each ephemeris point is associated with a parent Ephemeris Set via the EphemerisSet ID (esId).
/// Example: /// Example: No example provided.
/// Constraints: No constraints specified.
/// No description provided.
/// Example: /// Example: No example provided.
/// Constraints: No constraints specified.
func (rcv *EphemerisSet_Full) OnOrbit() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(88))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// No description provided.
/// Example: /// Example: No example provided.
/// Constraints: No constraints specified.
/// Optional array of provider/source specific tags for this data, where each element is no longer than 32 characters, used for implementing data owner conditional access controls to restrict access to the data. Should be left null by data providers unless conditional access controls are coordinated with the UDL team.
/// Example: /// Example: ['PROVIDER_TAG1', 'PROVIDER_TAG2']
/// Constraints: No constraints specified.
func (rcv *EphemerisSet_Full) Tags(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(90))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *EphemerisSet_Full) TagsLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(90))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

/// Optional array of provider/source specific tags for this data, where each element is no longer than 32 characters, used for implementing data owner conditional access controls to restrict access to the data. Should be left null by data providers unless conditional access controls are coordinated with the UDL team.
/// Example: /// Example: ['PROVIDER_TAG1', 'PROVIDER_TAG2']
/// Constraints: No constraints specified.
/// Optional identifier to track a commercial or marketplace transaction executed to produce this data.
/// Example: /// Example: TRANSACTION-ID
/// Constraints: Minimum length = 0, Maximum length = 64
func (rcv *EphemerisSet_Full) TransactionId() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(92))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Optional identifier to track a commercial or marketplace transaction executed to produce this data.
/// Example: /// Example: TRANSACTION-ID
/// Constraints: Minimum length = 0, Maximum length = 64
/// The originating source network on which this record was created, auto-populated by the system.
/// Example: /// Example: ORIG
/// Constraints: Minimum length = 1, Maximum length = 32
func (rcv *EphemerisSet_Full) OrigNetwork() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(94))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The originating source network on which this record was created, auto-populated by the system.
/// Example: /// Example: ORIG
/// Constraints: Minimum length = 1, Maximum length = 32
func EphemerisSet_FullStart(builder *flatbuffers.Builder) {
	builder.StartObject(46)
}
func EphemerisSet_FullAddId(builder *flatbuffers.Builder, id flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(id), 0)
}
func EphemerisSet_FullAddClassificationMarking(builder *flatbuffers.Builder, classificationMarking flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(classificationMarking), 0)
}
func EphemerisSet_FullAddIdOnOrbit(builder *flatbuffers.Builder, idOnOrbit flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(idOnOrbit), 0)
}
func EphemerisSet_FullAddOrigObjectId(builder *flatbuffers.Builder, origObjectId flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(3, flatbuffers.UOffsetT(origObjectId), 0)
}
func EphemerisSet_FullAddPointStartTime(builder *flatbuffers.Builder, pointStartTime flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(4, flatbuffers.UOffsetT(pointStartTime), 0)
}
func EphemerisSet_FullAddUsableStartTime(builder *flatbuffers.Builder, usableStartTime flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(5, flatbuffers.UOffsetT(usableStartTime), 0)
}
func EphemerisSet_FullAddPointEndTime(builder *flatbuffers.Builder, pointEndTime flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(6, flatbuffers.UOffsetT(pointEndTime), 0)
}
func EphemerisSet_FullAddUsableEndTime(builder *flatbuffers.Builder, usableEndTime flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(7, flatbuffers.UOffsetT(usableEndTime), 0)
}
func EphemerisSet_FullAddStepSize(builder *flatbuffers.Builder, stepSize int32) {
	builder.PrependInt32Slot(8, stepSize, 0)
}
func EphemerisSet_FullAddNumPoints(builder *flatbuffers.Builder, numPoints int32) {
	builder.PrependInt32Slot(9, numPoints, 0)
}
func EphemerisSet_FullAddType(builder *flatbuffers.Builder, type_ flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(10, flatbuffers.UOffsetT(type_), 0)
}
func EphemerisSet_FullAddPedigree(builder *flatbuffers.Builder, pedigree flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(11, flatbuffers.UOffsetT(pedigree), 0)
}
func EphemerisSet_FullAddCategory(builder *flatbuffers.Builder, category flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(12, flatbuffers.UOffsetT(category), 0)
}
func EphemerisSet_FullAddIdStateVector(builder *flatbuffers.Builder, idStateVector flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(13, flatbuffers.UOffsetT(idStateVector), 0)
}
func EphemerisSet_FullAddHasMnvr(builder *flatbuffers.Builder, hasMnvr bool) {
	builder.PrependBoolSlot(14, hasMnvr, false)
}
func EphemerisSet_FullAddIdManeuvers(builder *flatbuffers.Builder, idManeuvers flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(15, flatbuffers.UOffsetT(idManeuvers), 0)
}
func EphemerisSet_FullStartIdManeuversVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func EphemerisSet_FullAddHasCov(builder *flatbuffers.Builder, hasCov bool) {
	builder.PrependBoolSlot(16, hasCov, false)
}
func EphemerisSet_FullAddHasAccel(builder *flatbuffers.Builder, hasAccel bool) {
	builder.PrependBoolSlot(17, hasAccel, false)
}
func EphemerisSet_FullAddCentBody(builder *flatbuffers.Builder, centBody flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(18, flatbuffers.UOffsetT(centBody), 0)
}
func EphemerisSet_FullAddIntegrator(builder *flatbuffers.Builder, integrator flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(19, flatbuffers.UOffsetT(integrator), 0)
}
func EphemerisSet_FullAddGeopotentialModel(builder *flatbuffers.Builder, geopotentialModel flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(20, flatbuffers.UOffsetT(geopotentialModel), 0)
}
func EphemerisSet_FullAddDragModel(builder *flatbuffers.Builder, dragModel flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(21, flatbuffers.UOffsetT(dragModel), 0)
}
func EphemerisSet_FullAddLunarSolar(builder *flatbuffers.Builder, lunarSolar bool) {
	builder.PrependBoolSlot(22, lunarSolar, false)
}
func EphemerisSet_FullAddSolidEarthTides(builder *flatbuffers.Builder, solidEarthTides bool) {
	builder.PrependBoolSlot(23, solidEarthTides, false)
}
func EphemerisSet_FullAddBDot(builder *flatbuffers.Builder, bDot float64) {
	builder.PrependFloat64Slot(24, bDot, 0.0)
}
func EphemerisSet_FullAddEdr(builder *flatbuffers.Builder, edr float64) {
	builder.PrependFloat64Slot(25, edr, 0.0)
}
func EphemerisSet_FullAddInterpolation(builder *flatbuffers.Builder, interpolation flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(26, flatbuffers.UOffsetT(interpolation), 0)
}
func EphemerisSet_FullAddInterpolationDegree(builder *flatbuffers.Builder, interpolationDegree int32) {
	builder.PrependInt32Slot(27, interpolationDegree, 0)
}
func EphemerisSet_FullAddFilename(builder *flatbuffers.Builder, filename flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(28, flatbuffers.UOffsetT(filename), 0)
}
func EphemerisSet_FullAddComments(builder *flatbuffers.Builder, comments flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(29, flatbuffers.UOffsetT(comments), 0)
}
func EphemerisSet_FullAddDescription(builder *flatbuffers.Builder, description flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(30, flatbuffers.UOffsetT(description), 0)
}
func EphemerisSet_FullAddDescriptor(builder *flatbuffers.Builder, descriptor flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(31, flatbuffers.UOffsetT(descriptor), 0)
}
func EphemerisSet_FullAddReferenceFrame(builder *flatbuffers.Builder, referenceFrame EphemerisSet_Full_referenceFrame_Enum) {
	builder.PrependInt8Slot(32, int8(referenceFrame), 0)
}
func EphemerisSet_FullAddCovReferenceFrame(builder *flatbuffers.Builder, covReferenceFrame EphemerisSet_Full_covReferenceFrame_Enum) {
	builder.PrependInt8Slot(33, int8(covReferenceFrame), 0)
}
func EphemerisSet_FullAddCreatedAt(builder *flatbuffers.Builder, createdAt flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(34, flatbuffers.UOffsetT(createdAt), 0)
}
func EphemerisSet_FullAddCreatedBy(builder *flatbuffers.Builder, createdBy flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(35, flatbuffers.UOffsetT(createdBy), 0)
}
func EphemerisSet_FullAddSource(builder *flatbuffers.Builder, source flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(36, flatbuffers.UOffsetT(source), 0)
}
func EphemerisSet_FullAddOrigin(builder *flatbuffers.Builder, origin flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(37, flatbuffers.UOffsetT(origin), 0)
}
func EphemerisSet_FullAddDataMode(builder *flatbuffers.Builder, dataMode EphemerisSet_Full_dataMode_Enum) {
	builder.PrependInt8Slot(38, int8(dataMode), 0)
}
func EphemerisSet_FullAddStateVector(builder *flatbuffers.Builder, stateVector flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(39, flatbuffers.UOffsetT(stateVector), 0)
}
func EphemerisSet_FullAddSatNo(builder *flatbuffers.Builder, satNo int32) {
	builder.PrependInt32Slot(40, satNo, 0)
}
func EphemerisSet_FullAddEphemerisList(builder *flatbuffers.Builder, ephemerisList flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(41, flatbuffers.UOffsetT(ephemerisList), 0)
}
func EphemerisSet_FullStartEphemerisListVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func EphemerisSet_FullAddOnOrbit(builder *flatbuffers.Builder, onOrbit flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(42, flatbuffers.UOffsetT(onOrbit), 0)
}
func EphemerisSet_FullAddTags(builder *flatbuffers.Builder, tags flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(43, flatbuffers.UOffsetT(tags), 0)
}
func EphemerisSet_FullStartTagsVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func EphemerisSet_FullAddTransactionId(builder *flatbuffers.Builder, transactionId flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(44, flatbuffers.UOffsetT(transactionId), 0)
}
func EphemerisSet_FullAddOrigNetwork(builder *flatbuffers.Builder, origNetwork flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(45, flatbuffers.UOffsetT(origNetwork), 0)
}
func EphemerisSet_FullEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
