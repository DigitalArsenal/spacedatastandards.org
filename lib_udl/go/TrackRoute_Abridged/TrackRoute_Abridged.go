// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package TrackRoute_Abridged

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

/// /// A track route is a prescribed route for performing training events or operations such as air refueling.
type TrackRoute_Abridged struct {
	_tab flatbuffers.Table
}

const TrackRoute_AbridgedIdentifier = "TRAC"

func GetRootAsTrackRoute_Abridged(buf []byte, offset flatbuffers.UOffsetT) *TrackRoute_Abridged {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &TrackRoute_Abridged{}
	x.Init(buf, n+offset)
	return x
}

func FinishTrackRoute_AbridgedBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	identifierBytes := []byte(TrackRoute_AbridgedIdentifier)
	builder.FinishWithFileIdentifier(offset, identifierBytes)
}

func TrackRoute_AbridgedBufferHasIdentifier(buf []byte) bool {
	return flatbuffers.BufferHasIdentifier(buf, TrackRoute_AbridgedIdentifier)
}

func GetSizePrefixedRootAsTrackRoute_Abridged(buf []byte, offset flatbuffers.UOffsetT) *TrackRoute_Abridged {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &TrackRoute_Abridged{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedTrackRoute_AbridgedBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	identifierBytes := []byte(TrackRoute_AbridgedIdentifier)
	builder.FinishSizePrefixedWithFileIdentifier(offset, identifierBytes)
}

func SizePrefixedTrackRoute_AbridgedBufferHasIdentifier(buf []byte) bool {
	return flatbuffers.SizePrefixedBufferHasIdentifier(buf, TrackRoute_AbridgedIdentifier)
}

func (rcv *TrackRoute_Abridged) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *TrackRoute_Abridged) Table() flatbuffers.Table {
	return rcv._tab
}

/// Unique identifier of the record, auto-generated by the system.
/// Example: /// Example: 026dd511-8ba5-47d3-9909-836149f87686
/// Constraints: Minimum length = 1, Maximum length = 36
func (rcv *TrackRoute_Abridged) Id() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Unique identifier of the record, auto-generated by the system.
/// Example: /// Example: 026dd511-8ba5-47d3-9909-836149f87686
/// Constraints: Minimum length = 1, Maximum length = 36
/// Classification marking of the data in IC/CAPCO Portion-marked format.
/// Example: /// Example: U
/// Constraints: Minimum length = 1, Maximum length = 128
func (rcv *TrackRoute_Abridged) ClassificationMarking() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Classification marking of the data in IC/CAPCO Portion-marked format.
/// Example: /// Example: U
/// Constraints: Minimum length = 1, Maximum length = 128
/// The track route type represented by this record (ex. AIR REFUELING).
/// Example: /// Example: AIR REFUELING
/// Constraints: Minimum length = 1, Maximum length = 36
func (rcv *TrackRoute_Abridged) Type() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The track route type represented by this record (ex. AIR REFUELING).
/// Example: /// Example: AIR REFUELING
/// Constraints: Minimum length = 1, Maximum length = 36
/// Optional air refueling track ID from external systems. This field has no meaning within UDL and is provided as a convenience for systems that require tracking of an internal system generated ID.
/// Example: /// Example: GDSSMH121004232315303094
/// Constraints: Minimum length = 0, Maximum length = 36
func (rcv *TrackRoute_Abridged) ExternalId() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Optional air refueling track ID from external systems. This field has no meaning within UDL and is provided as a convenience for systems that require tracking of an internal system generated ID.
/// Example: /// Example: GDSSMH121004232315303094
/// Constraints: Minimum length = 0, Maximum length = 36
/// The principal compass direction (cardinal or ordinal) of the track route.
/// Example: /// Example: NE
/// Constraints: Minimum length = 0, Maximum length = 2
func (rcv *TrackRoute_Abridged) Direction() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The principal compass direction (cardinal or ordinal) of the track route.
/// Example: /// Example: NE
/// Constraints: Minimum length = 0, Maximum length = 2
/// The name of the creating organization of the track route.
/// Example: /// Example: HQPAC
/// Constraints: Minimum length = 0, Maximum length = 250
func (rcv *TrackRoute_Abridged) CreatingOrg() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The name of the creating organization of the track route.
/// Example: /// Example: HQPAC
/// Constraints: Minimum length = 0, Maximum length = 250
/// Track location ID.
/// Example: /// Example: POACHR
/// Constraints: Minimum length = 0, Maximum length = 36
func (rcv *TrackRoute_Abridged) LocationTrackId() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Track location ID.
/// Example: /// Example: POACHR
/// Constraints: Minimum length = 0, Maximum length = 36
/// Identifier of the track.
/// Example: /// Example: CH61A
/// Constraints: Minimum length = 0, Maximum length = 36
func (rcv *TrackRoute_Abridged) TrackId() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(18))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Identifier of the track.
/// Example: /// Example: CH61A
/// Constraints: Minimum length = 0, Maximum length = 36
/// Name of the track.
/// Example: /// Example: CH61 POST
/// Constraints: Minimum length = 0, Maximum length = 50
func (rcv *TrackRoute_Abridged) TrackName() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(20))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Name of the track.
/// Example: /// Example: CH61 POST
/// Constraints: Minimum length = 0, Maximum length = 50
/// Abbreviated name of the track.
/// Example: /// Example: CH61
/// Constraints: Minimum length = 0, Maximum length = 16
func (rcv *TrackRoute_Abridged) ShortName() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(22))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Abbreviated name of the track.
/// Example: /// Example: CH61
/// Constraints: Minimum length = 0, Maximum length = 16
/// Type of process used by AMC to schedule an air refueling event. Possible values are A (Matched Long Range), F (Matched AMC Short Notice), N (Unmatched Theater Operation Short Notice (Theater Assets)), R, Unmatched Long Range, S (Soft Air Refueling), T (Matched Theater Operation Short Notice (Theater Assets)), V (Unmatched AMC Short Notice), X (Unmatched Theater Operation Short Notice (AMC Assets)), Y (Matched Theater Operation Short Notice (AMC Assets)), Z (Other Air Refueling).
/// Example: /// Example: V
/// Constraints: Minimum length = 0, Maximum length = 2
func (rcv *TrackRoute_Abridged) TypeCode() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(24))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Type of process used by AMC to schedule an air refueling event. Possible values are A (Matched Long Range), F (Matched AMC Short Notice), N (Unmatched Theater Operation Short Notice (Theater Assets)), R, Unmatched Long Range, S (Soft Air Refueling), T (Matched Theater Operation Short Notice (Theater Assets)), V (Unmatched AMC Short Notice), X (Unmatched Theater Operation Short Notice (AMC Assets)), Y (Matched Theater Operation Short Notice (AMC Assets)), Z (Other Air Refueling).
/// Example: /// Example: V
/// Constraints: Minimum length = 0, Maximum length = 2
/// Region code indicating where the track resides as determined by the data source.
/// Example: /// Example: 5
/// Constraints: Minimum length = 0, Maximum length = 36
func (rcv *TrackRoute_Abridged) RegionCode() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(26))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Region code indicating where the track resides as determined by the data source.
/// Example: /// Example: 5
/// Constraints: Minimum length = 0, Maximum length = 36
/// Region where the track resides.
/// Example: /// Example: North America
/// Constraints: Minimum length = 0, Maximum length = 32
func (rcv *TrackRoute_Abridged) RegionName() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(28))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Region where the track resides.
/// Example: /// Example: North America
/// Constraints: Minimum length = 0, Maximum length = 32
/// The APX radar code sent and received by the aircraft for identification.
/// Example: /// Example: 5/1
/// Constraints: Minimum length = 0, Maximum length = 36
func (rcv *TrackRoute_Abridged) ApxBeaconCode() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(30))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The APX radar code sent and received by the aircraft for identification.
/// Example: /// Example: 5/1
/// Constraints: Minimum length = 0, Maximum length = 36
/// The receiver tanker channel identifer for air refueling tracks.
/// Example: /// Example: 31/094
/// Constraints: Minimum length = 0, Maximum length = 36
func (rcv *TrackRoute_Abridged) ReceiverTankerChcode() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(32))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The receiver tanker channel identifer for air refueling tracks.
/// Example: /// Example: 31/094
/// Constraints: Minimum length = 0, Maximum length = 36
/// The APN radar code sent and received by the aircraft for identification.
/// Example: /// Example: 1-3-1
/// Constraints: Minimum length = 0, Maximum length = 36
func (rcv *TrackRoute_Abridged) ApnSetting() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(34))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The APN radar code sent and received by the aircraft for identification.
/// Example: /// Example: 1-3-1
/// Constraints: Minimum length = 0, Maximum length = 36
/// Standard Indicator Code of the air refueling track.
/// Example: /// Example: N
/// Constraints: Minimum length = 0, Maximum length = 36
func (rcv *TrackRoute_Abridged) Sic() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(36))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Standard Indicator Code of the air refueling track.
/// Example: /// Example: N
/// Constraints: Minimum length = 0, Maximum length = 36
/// Date the track needs to be reviewed for accuracy or deletion in ISO 8601 UTC format with millisecond precision.
/// Example: /// Example: 2024-09-16T16:00:00.123Z
/// Constraints: No constraints specified.
func (rcv *TrackRoute_Abridged) ReviewDate() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(38))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Date the track needs to be reviewed for accuracy or deletion in ISO 8601 UTC format with millisecond precision.
/// Example: /// Example: 2024-09-16T16:00:00.123Z
/// Constraints: No constraints specified.
/// Used to show last time the track route was added to an itinerary in ISO 8601 UTC format with millisecond precision.
/// Example: /// Example: 2024-09-17T16:00:00.123Z
/// Constraints: No constraints specified.
func (rcv *TrackRoute_Abridged) LastUsedDate() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(40))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Used to show last time the track route was added to an itinerary in ISO 8601 UTC format with millisecond precision.
/// Example: /// Example: 2024-09-17T16:00:00.123Z
/// Constraints: No constraints specified.
/// The last updated date of the track route in ISO 8601 UTC format with millisecond precision.
/// Example: /// Example: 2024-09-17T16:00:00.123Z
/// Constraints: No constraints specified.
func (rcv *TrackRoute_Abridged) LastUpdateDate() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(42))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The last updated date of the track route in ISO 8601 UTC format with millisecond precision.
/// Example: /// Example: 2024-09-17T16:00:00.123Z
/// Constraints: No constraints specified.
/// The primary UHF radio frequency used for the track route in megahertz.
/// Example: /// Example: 357.5
/// Constraints: No constraints specified.
func (rcv *TrackRoute_Abridged) PriFreq() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(44))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// The primary UHF radio frequency used for the track route in megahertz.
/// Example: /// Example: 357.5
/// Constraints: No constraints specified.
func (rcv *TrackRoute_Abridged) MutatePriFreq(n float64) bool {
	return rcv._tab.MutateFloat64Slot(44, n)
}

/// The secondary UHF radio frequency used for the track route in megahertz.
/// Example: /// Example: 319.7
/// Constraints: No constraints specified.
func (rcv *TrackRoute_Abridged) SecFreq() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(46))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// The secondary UHF radio frequency used for the track route in megahertz.
/// Example: /// Example: 319.7
/// Constraints: No constraints specified.
func (rcv *TrackRoute_Abridged) MutateSecFreq(n float64) bool {
	return rcv._tab.MutateFloat64Slot(46, n)
}

/// Air Refueling Track Control Center message.
/// Example: /// Example: OAKLAND CTR/GUAM CERAP
/// Constraints: Minimum length = 0, Maximum length = 256
func (rcv *TrackRoute_Abridged) ArtccMessage() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(48))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Air Refueling Track Control Center message.
/// Example: /// Example: OAKLAND CTR/GUAM CERAP
/// Constraints: Minimum length = 0, Maximum length = 256
/// Point of contact for the air refueling track route scheduler.
/// Example: /// Example: 97 OSS/OSOS DSN 866-5555
/// Constraints: Minimum length = 0, Maximum length = 256
func (rcv *TrackRoute_Abridged) SchedulerOrgName() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(50))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Point of contact for the air refueling track route scheduler.
/// Example: /// Example: 97 OSS/OSOS DSN 866-5555
/// Constraints: Minimum length = 0, Maximum length = 256
/// The unit responsible for scheduling the track route.
/// Example: /// Example: 612 AOC
/// Constraints: Minimum length = 0, Maximum length = 32
func (rcv *TrackRoute_Abridged) SchedulerOrgUnit() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(52))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The unit responsible for scheduling the track route.
/// Example: /// Example: 612 AOC
/// Constraints: Minimum length = 0, Maximum length = 32
/// The date which the DAFIF track was last updated/validated in ISO 8601 UTC format with millisecond precision.
/// Example: /// Example: 2024-09-17T16:00:00.123Z
/// Constraints: No constraints specified.
func (rcv *TrackRoute_Abridged) EffectiveDate() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(54))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The date which the DAFIF track was last updated/validated in ISO 8601 UTC format with millisecond precision.
/// Example: /// Example: 2024-09-17T16:00:00.123Z
/// Constraints: No constraints specified.
/// Points identified within the route.
/// Example: /// Example: No example provided.
/// Constraints: No constraints specified.
func (rcv *TrackRoute_Abridged) RoutePoints(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(56))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *TrackRoute_Abridged) RoutePointsLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(56))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

/// Points identified within the route.
/// Example: /// Example: No example provided.
/// Constraints: No constraints specified.
/// Minimum and maximum altitude bounds for the track.
/// Example: /// Example: No example provided.
/// Constraints: No constraints specified.
func (rcv *TrackRoute_Abridged) AltitudeBlocks(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(58))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *TrackRoute_Abridged) AltitudeBlocksLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(58))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

/// Minimum and maximum altitude bounds for the track.
/// Example: /// Example: No example provided.
/// Constraints: No constraints specified.
/// Point of contacts for scheduling or modifying the route.
/// Example: /// Example: No example provided.
/// Constraints: No constraints specified.
func (rcv *TrackRoute_Abridged) Poc(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(60))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *TrackRoute_Abridged) PocLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(60))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

/// Point of contacts for scheduling or modifying the route.
/// Example: /// Example: No example provided.
/// Constraints: No constraints specified.
/// Time the row was created in the database, auto-populated by the system.
/// Example: /// Example: 2022-01-01T16:00:00.123Z
/// Constraints: No constraints specified.
func (rcv *TrackRoute_Abridged) CreatedAt() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(62))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Time the row was created in the database, auto-populated by the system.
/// Example: /// Example: 2022-01-01T16:00:00.123Z
/// Constraints: No constraints specified.
/// Application user who created the row in the database, auto-populated by the system.
/// Example: /// Example: some.user
/// Constraints: Minimum length = 1, Maximum length = 64
func (rcv *TrackRoute_Abridged) CreatedBy() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(64))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Application user who created the row in the database, auto-populated by the system.
/// Example: /// Example: some.user
/// Constraints: Minimum length = 1, Maximum length = 64
/// Time the row was updated in the database, auto-populated by the system.
/// Example: /// Example: 2022-01-01T16:00:00.123Z
/// Constraints: No constraints specified.
func (rcv *TrackRoute_Abridged) UpdatedAt() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(66))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Time the row was updated in the database, auto-populated by the system.
/// Example: /// Example: 2022-01-01T16:00:00.123Z
/// Constraints: No constraints specified.
/// Application user who updated the row in the database, auto-populated by the system.
/// Example: /// Example: some.user
/// Constraints: Minimum length = 1, Maximum length = 64
func (rcv *TrackRoute_Abridged) UpdatedBy() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(68))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Application user who updated the row in the database, auto-populated by the system.
/// Example: /// Example: some.user
/// Constraints: Minimum length = 1, Maximum length = 64
/// The source data library from which this record was received. This could be a remote or tactical UDL or another data library. If null, the record should be assumed to have originated from the primary Enterprise UDL.
/// Example: /// Example: AXE
/// Constraints: Minimum length = 0, Maximum length = 64
func (rcv *TrackRoute_Abridged) SourceDl() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(70))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The source data library from which this record was received. This could be a remote or tactical UDL or another data library. If null, the record should be assumed to have originated from the primary Enterprise UDL.
/// Example: /// Example: AXE
/// Constraints: Minimum length = 0, Maximum length = 64
/// Source of the data.
/// Example: /// Example: Bluestaq
/// Constraints: Minimum length = 1, Maximum length = 36
func (rcv *TrackRoute_Abridged) Source() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(72))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Source of the data.
/// Example: /// Example: Bluestaq
/// Constraints: Minimum length = 1, Maximum length = 36
/// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
/// Example: /// Example: THIRD_PARTY_DATASOURCE
/// Constraints: Minimum length = 0, Maximum length = 64
func (rcv *TrackRoute_Abridged) Origin() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(74))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
/// Example: /// Example: THIRD_PARTY_DATASOURCE
/// Constraints: Minimum length = 0, Maximum length = 64
/// The originating source network on which this record was created, auto-populated by the system.
/// Example: /// Example: OPS1
/// Constraints: Minimum length = 0, Maximum length = 32
func (rcv *TrackRoute_Abridged) OrigNetwork() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(76))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The originating source network on which this record was created, auto-populated by the system.
/// Example: /// Example: OPS1
/// Constraints: Minimum length = 0, Maximum length = 32
/// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
/// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
/// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
/// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
/// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
/// Example: /// Example: TEST
/// Constraints: Minimum length = 1, Maximum length = 32
func (rcv *TrackRoute_Abridged) DataMode() TrackRoute_Abridged_dataMode_Enum {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(78))
	if o != 0 {
		return TrackRoute_Abridged_dataMode_Enum(rcv._tab.GetInt8(o + rcv._tab.Pos))
	}
	return 0
}

/// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
/// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
/// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
/// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
/// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
/// Example: /// Example: TEST
/// Constraints: Minimum length = 1, Maximum length = 32
func (rcv *TrackRoute_Abridged) MutateDataMode(n TrackRoute_Abridged_dataMode_Enum) bool {
	return rcv._tab.MutateInt8Slot(78, int8(n))
}

func TrackRoute_AbridgedStart(builder *flatbuffers.Builder) {
	builder.StartObject(38)
}
func TrackRoute_AbridgedAddId(builder *flatbuffers.Builder, id flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(id), 0)
}
func TrackRoute_AbridgedAddClassificationMarking(builder *flatbuffers.Builder, classificationMarking flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(classificationMarking), 0)
}
func TrackRoute_AbridgedAddType(builder *flatbuffers.Builder, type_ flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(type_), 0)
}
func TrackRoute_AbridgedAddExternalId(builder *flatbuffers.Builder, externalId flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(3, flatbuffers.UOffsetT(externalId), 0)
}
func TrackRoute_AbridgedAddDirection(builder *flatbuffers.Builder, direction flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(4, flatbuffers.UOffsetT(direction), 0)
}
func TrackRoute_AbridgedAddCreatingOrg(builder *flatbuffers.Builder, creatingOrg flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(5, flatbuffers.UOffsetT(creatingOrg), 0)
}
func TrackRoute_AbridgedAddLocationTrackId(builder *flatbuffers.Builder, locationTrackId flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(6, flatbuffers.UOffsetT(locationTrackId), 0)
}
func TrackRoute_AbridgedAddTrackId(builder *flatbuffers.Builder, trackId flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(7, flatbuffers.UOffsetT(trackId), 0)
}
func TrackRoute_AbridgedAddTrackName(builder *flatbuffers.Builder, trackName flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(8, flatbuffers.UOffsetT(trackName), 0)
}
func TrackRoute_AbridgedAddShortName(builder *flatbuffers.Builder, shortName flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(9, flatbuffers.UOffsetT(shortName), 0)
}
func TrackRoute_AbridgedAddTypeCode(builder *flatbuffers.Builder, typeCode flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(10, flatbuffers.UOffsetT(typeCode), 0)
}
func TrackRoute_AbridgedAddRegionCode(builder *flatbuffers.Builder, regionCode flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(11, flatbuffers.UOffsetT(regionCode), 0)
}
func TrackRoute_AbridgedAddRegionName(builder *flatbuffers.Builder, regionName flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(12, flatbuffers.UOffsetT(regionName), 0)
}
func TrackRoute_AbridgedAddApxBeaconCode(builder *flatbuffers.Builder, apxBeaconCode flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(13, flatbuffers.UOffsetT(apxBeaconCode), 0)
}
func TrackRoute_AbridgedAddReceiverTankerChcode(builder *flatbuffers.Builder, receiverTankerChcode flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(14, flatbuffers.UOffsetT(receiverTankerChcode), 0)
}
func TrackRoute_AbridgedAddApnSetting(builder *flatbuffers.Builder, apnSetting flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(15, flatbuffers.UOffsetT(apnSetting), 0)
}
func TrackRoute_AbridgedAddSic(builder *flatbuffers.Builder, sic flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(16, flatbuffers.UOffsetT(sic), 0)
}
func TrackRoute_AbridgedAddReviewDate(builder *flatbuffers.Builder, reviewDate flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(17, flatbuffers.UOffsetT(reviewDate), 0)
}
func TrackRoute_AbridgedAddLastUsedDate(builder *flatbuffers.Builder, lastUsedDate flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(18, flatbuffers.UOffsetT(lastUsedDate), 0)
}
func TrackRoute_AbridgedAddLastUpdateDate(builder *flatbuffers.Builder, lastUpdateDate flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(19, flatbuffers.UOffsetT(lastUpdateDate), 0)
}
func TrackRoute_AbridgedAddPriFreq(builder *flatbuffers.Builder, priFreq float64) {
	builder.PrependFloat64Slot(20, priFreq, 0.0)
}
func TrackRoute_AbridgedAddSecFreq(builder *flatbuffers.Builder, secFreq float64) {
	builder.PrependFloat64Slot(21, secFreq, 0.0)
}
func TrackRoute_AbridgedAddArtccMessage(builder *flatbuffers.Builder, artccMessage flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(22, flatbuffers.UOffsetT(artccMessage), 0)
}
func TrackRoute_AbridgedAddSchedulerOrgName(builder *flatbuffers.Builder, schedulerOrgName flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(23, flatbuffers.UOffsetT(schedulerOrgName), 0)
}
func TrackRoute_AbridgedAddSchedulerOrgUnit(builder *flatbuffers.Builder, schedulerOrgUnit flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(24, flatbuffers.UOffsetT(schedulerOrgUnit), 0)
}
func TrackRoute_AbridgedAddEffectiveDate(builder *flatbuffers.Builder, effectiveDate flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(25, flatbuffers.UOffsetT(effectiveDate), 0)
}
func TrackRoute_AbridgedAddRoutePoints(builder *flatbuffers.Builder, routePoints flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(26, flatbuffers.UOffsetT(routePoints), 0)
}
func TrackRoute_AbridgedStartRoutePointsVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func TrackRoute_AbridgedAddAltitudeBlocks(builder *flatbuffers.Builder, altitudeBlocks flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(27, flatbuffers.UOffsetT(altitudeBlocks), 0)
}
func TrackRoute_AbridgedStartAltitudeBlocksVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func TrackRoute_AbridgedAddPoc(builder *flatbuffers.Builder, poc flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(28, flatbuffers.UOffsetT(poc), 0)
}
func TrackRoute_AbridgedStartPocVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func TrackRoute_AbridgedAddCreatedAt(builder *flatbuffers.Builder, createdAt flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(29, flatbuffers.UOffsetT(createdAt), 0)
}
func TrackRoute_AbridgedAddCreatedBy(builder *flatbuffers.Builder, createdBy flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(30, flatbuffers.UOffsetT(createdBy), 0)
}
func TrackRoute_AbridgedAddUpdatedAt(builder *flatbuffers.Builder, updatedAt flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(31, flatbuffers.UOffsetT(updatedAt), 0)
}
func TrackRoute_AbridgedAddUpdatedBy(builder *flatbuffers.Builder, updatedBy flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(32, flatbuffers.UOffsetT(updatedBy), 0)
}
func TrackRoute_AbridgedAddSourceDl(builder *flatbuffers.Builder, sourceDl flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(33, flatbuffers.UOffsetT(sourceDl), 0)
}
func TrackRoute_AbridgedAddSource(builder *flatbuffers.Builder, source flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(34, flatbuffers.UOffsetT(source), 0)
}
func TrackRoute_AbridgedAddOrigin(builder *flatbuffers.Builder, origin flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(35, flatbuffers.UOffsetT(origin), 0)
}
func TrackRoute_AbridgedAddOrigNetwork(builder *flatbuffers.Builder, origNetwork flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(36, flatbuffers.UOffsetT(origNetwork), 0)
}
func TrackRoute_AbridgedAddDataMode(builder *flatbuffers.Builder, dataMode TrackRoute_Abridged_dataMode_Enum) {
	builder.PrependInt8Slot(37, int8(dataMode), 0)
}
func TrackRoute_AbridgedEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
