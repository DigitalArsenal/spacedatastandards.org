// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package OrganizationDetails_Ingest

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

/// /// Model representation of additional detailed organization data as collected by a particular source.
type OrganizationDetails_Ingest struct {
	_tab flatbuffers.Table
}

const OrganizationDetails_IngestIdentifier = "ORGA"

func GetRootAsOrganizationDetails_Ingest(buf []byte, offset flatbuffers.UOffsetT) *OrganizationDetails_Ingest {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &OrganizationDetails_Ingest{}
	x.Init(buf, n+offset)
	return x
}

func FinishOrganizationDetails_IngestBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	identifierBytes := []byte(OrganizationDetails_IngestIdentifier)
	builder.FinishWithFileIdentifier(offset, identifierBytes)
}

func OrganizationDetails_IngestBufferHasIdentifier(buf []byte) bool {
	return flatbuffers.BufferHasIdentifier(buf, OrganizationDetails_IngestIdentifier)
}

func GetSizePrefixedRootAsOrganizationDetails_Ingest(buf []byte, offset flatbuffers.UOffsetT) *OrganizationDetails_Ingest {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &OrganizationDetails_Ingest{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedOrganizationDetails_IngestBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	identifierBytes := []byte(OrganizationDetails_IngestIdentifier)
	builder.FinishSizePrefixedWithFileIdentifier(offset, identifierBytes)
}

func SizePrefixedOrganizationDetails_IngestBufferHasIdentifier(buf []byte) bool {
	return flatbuffers.SizePrefixedBufferHasIdentifier(buf, OrganizationDetails_IngestIdentifier)
}

func (rcv *OrganizationDetails_Ingest) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *OrganizationDetails_Ingest) Table() flatbuffers.Table {
	return rcv._tab
}

/// Unique identifier of the record, auto-generated by the system.
/// Example: /// Example: ORGANIZATIONDETAILS-ID
/// Constraints: Minimum length = 1, Maximum length = 36
func (rcv *OrganizationDetails_Ingest) Id() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Unique identifier of the record, auto-generated by the system.
/// Example: /// Example: ORGANIZATIONDETAILS-ID
/// Constraints: Minimum length = 1, Maximum length = 36
/// Unique identifier of the parent organization.
/// Example: /// Example: ORGANIZATION-ID
/// Constraints: Minimum length = 1, Maximum length = 36
func (rcv *OrganizationDetails_Ingest) IdOrganization() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Unique identifier of the parent organization.
/// Example: /// Example: ORGANIZATION-ID
/// Constraints: Minimum length = 1, Maximum length = 36
/// Classification marking of the data in IC/CAPCO Portion-marked format.
/// Example: /// Example: U
/// Constraints: Minimum length = 1, Maximum length = 128
func (rcv *OrganizationDetails_Ingest) ClassificationMarking() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Classification marking of the data in IC/CAPCO Portion-marked format.
/// Example: /// Example: U
/// Constraints: Minimum length = 1, Maximum length = 128
/// Organization details name.
/// Example: /// Example: some.user
/// Constraints: Minimum length = 1, Maximum length = 128
func (rcv *OrganizationDetails_Ingest) Name() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Organization details name.
/// Example: /// Example: some.user
/// Constraints: Minimum length = 1, Maximum length = 128
/// Listed contact email address for the organization.
/// Example: /// Example: some_organization@organization.com
/// Constraints: Minimum length = 0, Maximum length = 320
func (rcv *OrganizationDetails_Ingest) Email() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Listed contact email address for the organization.
/// Example: /// Example: some_organization@organization.com
/// Constraints: Minimum length = 0, Maximum length = 320
/// Street number of the organization.
/// Example: /// Example: 123 Main Street
/// Constraints: Minimum length = 0, Maximum length = 120
func (rcv *OrganizationDetails_Ingest) Address1() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Street number of the organization.
/// Example: /// Example: 123 Main Street
/// Constraints: Minimum length = 0, Maximum length = 120
/// Field for additional organization address information such as PO Box and unit number.
/// Example: /// Example: Apt 4B
/// Constraints: Minimum length = 0, Maximum length = 120
func (rcv *OrganizationDetails_Ingest) Address2() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Field for additional organization address information such as PO Box and unit number.
/// Example: /// Example: Apt 4B
/// Constraints: Minimum length = 0, Maximum length = 120
/// Contains the third line of address information for an organization.
/// Example: /// Example: Colorado Springs CO, 80903
/// Constraints: Minimum length = 0, Maximum length = 120
func (rcv *OrganizationDetails_Ingest) Address3() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(18))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Contains the third line of address information for an organization.
/// Example: /// Example: Colorado Springs CO, 80903
/// Constraints: Minimum length = 0, Maximum length = 120
/// Administrative boundaries of the first sub-national level. Level 1 is simply the largest demarcation under whatever demarcation criteria has been determined by the governing body. For example, this may be a state or province.
/// Example: /// Example: Colorado
/// Constraints: Minimum length = 0, Maximum length = 120
func (rcv *OrganizationDetails_Ingest) GeoAdminLevel1() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(20))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Administrative boundaries of the first sub-national level. Level 1 is simply the largest demarcation under whatever demarcation criteria has been determined by the governing body. For example, this may be a state or province.
/// Example: /// Example: Colorado
/// Constraints: Minimum length = 0, Maximum length = 120
/// Administrative boundaries of the second sub-national level. Level 2 is simply the second largest demarcation under whatever demarcation criteria has been determined by the governing body. For example, this may be a county or district.
/// Example: /// Example: El Paso County
/// Constraints: Minimum length = 0, Maximum length = 120
func (rcv *OrganizationDetails_Ingest) GeoAdminLevel2() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(22))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Administrative boundaries of the second sub-national level. Level 2 is simply the second largest demarcation under whatever demarcation criteria has been determined by the governing body. For example, this may be a county or district.
/// Example: /// Example: El Paso County
/// Constraints: Minimum length = 0, Maximum length = 120
/// Administrative boundaries of the third sub-national level. Level 3 is simply the third largest demarcation under whatever demarcation criteria has been determined by the governing body. For example, this may be a city or township.
/// Example: /// Example: Colorado Springs
/// Constraints: Minimum length = 0, Maximum length = 120
func (rcv *OrganizationDetails_Ingest) GeoAdminLevel3() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(24))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Administrative boundaries of the third sub-national level. Level 3 is simply the third largest demarcation under whatever demarcation criteria has been determined by the governing body. For example, this may be a city or township.
/// Example: /// Example: Colorado Springs
/// Constraints: Minimum length = 0, Maximum length = 120
/// A postal code, such as PIN or ZIP Code, is a series of letters or digits or both included in the postal address of the organization.
/// Example: /// Example: 80903
/// Constraints: Minimum length = 0, Maximum length = 32
func (rcv *OrganizationDetails_Ingest) PostalCode() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(26))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// A postal code, such as PIN or ZIP Code, is a series of letters or digits or both included in the postal address of the organization.
/// Example: /// Example: 80903
/// Constraints: Minimum length = 0, Maximum length = 32
/// Organization description.
/// Example: /// Example: Example description
/// Constraints: Minimum length = 0, Maximum length = 2147483647
func (rcv *OrganizationDetails_Ingest) Description() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(28))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Organization description.
/// Example: /// Example: Example description
/// Constraints: Minimum length = 0, Maximum length = 2147483647
/// Former organization ID (if this organization previously existed as another organization).
/// Example: /// Example: FORMERORG-ID
/// Constraints: Minimum length = 0, Maximum length = 36
func (rcv *OrganizationDetails_Ingest) FormerOrgId() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(30))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Former organization ID (if this organization previously existed as another organization).
/// Example: /// Example: FORMERORG-ID
/// Constraints: Minimum length = 0, Maximum length = 36
/// Parent organization ID of this organization if it is a child organization.
/// Example: /// Example: PARENTORG-ID
/// Constraints: Minimum length = 0, Maximum length = 36
func (rcv *OrganizationDetails_Ingest) ParentOrgId() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(32))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Parent organization ID of this organization if it is a child organization.
/// Example: /// Example: PARENTORG-ID
/// Constraints: Minimum length = 0, Maximum length = 36
/// For organizations of type CORPORATION, the effective financial year end date for revenue, EBITDA, and profit values.
/// Example: /// Example: 2021-01-01T01:01:01.123Z
/// Constraints: No constraints specified.
func (rcv *OrganizationDetails_Ingest) FinancialYearEndDate() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(34))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// For organizations of type CORPORATION, the effective financial year end date for revenue, EBITDA, and profit values.
/// Example: /// Example: 2021-01-01T01:01:01.123Z
/// Constraints: No constraints specified.
/// For organizations of type CORPORATION, total annual revenue as of financialYearEndDate in US Dollars.
/// Example: /// Example: 123.4
/// Constraints: No constraints specified.
func (rcv *OrganizationDetails_Ingest) Revenue() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(36))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// For organizations of type CORPORATION, total annual revenue as of financialYearEndDate in US Dollars.
/// Example: /// Example: 123.4
/// Constraints: No constraints specified.
func (rcv *OrganizationDetails_Ingest) MutateRevenue(n float64) bool {
	return rcv._tab.MutateFloat64Slot(36, n)
}

/// For organizations of type CORPORATION, total annual profit as of financialYearEndDate in US Dollars.
/// Example: /// Example: 123.4
/// Constraints: No constraints specified.
func (rcv *OrganizationDetails_Ingest) Profit() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(38))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// For organizations of type CORPORATION, total annual profit as of financialYearEndDate in US Dollars.
/// Example: /// Example: 123.4
/// Constraints: No constraints specified.
func (rcv *OrganizationDetails_Ingest) MutateProfit(n float64) bool {
	return rcv._tab.MutateFloat64Slot(38, n)
}

/// For organizations of type CORPORATION, the company EBITDA value as of financialYearEndDate in US Dollars.
/// Example: /// Example: 123.4
/// Constraints: No constraints specified.
func (rcv *OrganizationDetails_Ingest) Ebitda() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(40))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// For organizations of type CORPORATION, the company EBITDA value as of financialYearEndDate in US Dollars.
/// Example: /// Example: 123.4
/// Constraints: No constraints specified.
func (rcv *OrganizationDetails_Ingest) MutateEbitda(n float64) bool {
	return rcv._tab.MutateFloat64Slot(40, n)
}

/// Total number of FTEs in this organization.
/// Example: /// Example: 123
/// Constraints: No constraints specified.
func (rcv *OrganizationDetails_Ingest) Ftes() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(42))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

/// Total number of FTEs in this organization.
/// Example: /// Example: 123
/// Constraints: No constraints specified.
func (rcv *OrganizationDetails_Ingest) MutateFtes(n int32) bool {
	return rcv._tab.MutateInt32Slot(42, n)
}

/// Designated broker for this organization.
/// Example: /// Example: some.user
/// Constraints: Minimum length = 0, Maximum length = 128
func (rcv *OrganizationDetails_Ingest) Broker() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(44))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Designated broker for this organization.
/// Example: /// Example: some.user
/// Constraints: Minimum length = 0, Maximum length = 128
/// For organizations of type CORPORATION, the name of the Chief Executive Officer.
/// Example: /// Example: some.user
/// Constraints: Minimum length = 0, Maximum length = 128
func (rcv *OrganizationDetails_Ingest) Ceo() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(46))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// For organizations of type CORPORATION, the name of the Chief Executive Officer.
/// Example: /// Example: some.user
/// Constraints: Minimum length = 0, Maximum length = 128
/// For organizations of type CORPORATION, the name of the Chief Financial Officer.
/// Example: /// Example: some.user
/// Constraints: Minimum length = 0, Maximum length = 128
func (rcv *OrganizationDetails_Ingest) Cfo() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(48))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// For organizations of type CORPORATION, the name of the Chief Financial Officer.
/// Example: /// Example: some.user
/// Constraints: Minimum length = 0, Maximum length = 128
/// For organizations of type CORPORATION, the name of the Chief Technology Officer.
/// Example: /// Example: some.user
/// Constraints: Minimum length = 0, Maximum length = 128
func (rcv *OrganizationDetails_Ingest) Cto() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(50))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// For organizations of type CORPORATION, the name of the Chief Technology Officer.
/// Example: /// Example: some.user
/// Constraints: Minimum length = 0, Maximum length = 128
/// The name of the risk manager for the organization.
/// Example: /// Example: some.user
/// Constraints: Minimum length = 0, Maximum length = 128
func (rcv *OrganizationDetails_Ingest) RiskManager() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(52))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The name of the risk manager for the organization.
/// Example: /// Example: some.user
/// Constraints: Minimum length = 0, Maximum length = 128
/// Mass ranking for this organization.
/// Example: /// Example: 123
/// Constraints: No constraints specified.
func (rcv *OrganizationDetails_Ingest) MassRanking() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(54))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

/// Mass ranking for this organization.
/// Example: /// Example: 123
/// Constraints: No constraints specified.
func (rcv *OrganizationDetails_Ingest) MutateMassRanking(n int32) bool {
	return rcv._tab.MutateInt32Slot(54, n)
}

/// Revenue ranking for this organization.
/// Example: /// Example: 123
/// Constraints: No constraints specified.
func (rcv *OrganizationDetails_Ingest) RevenueRanking() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(56))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

/// Revenue ranking for this organization.
/// Example: /// Example: 123
/// Constraints: No constraints specified.
func (rcv *OrganizationDetails_Ingest) MutateRevenueRanking(n int32) bool {
	return rcv._tab.MutateInt32Slot(56, n)
}

/// For organizations of type CORPORATION, notes on company financials.
/// Example: /// Example: Example notes
/// Constraints: Minimum length = 0, Maximum length = 2147483647
func (rcv *OrganizationDetails_Ingest) FinancialNotes() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(58))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// For organizations of type CORPORATION, notes on company financials.
/// Example: /// Example: Example notes
/// Constraints: Minimum length = 0, Maximum length = 2147483647
/// Notes on the services provided by the organization.
/// Example: /// Example: Example notes
/// Constraints: Minimum length = 0, Maximum length = 2147483647
func (rcv *OrganizationDetails_Ingest) ServicesNotes() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(60))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Notes on the services provided by the organization.
/// Example: /// Example: Example notes
/// Constraints: Minimum length = 0, Maximum length = 2147483647
/// Satellite fleet planning notes for this organization.
/// Example: /// Example: Example notes
/// Constraints: Minimum length = 0, Maximum length = 2147483647
func (rcv *OrganizationDetails_Ingest) FleetPlanNotes() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(62))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Satellite fleet planning notes for this organization.
/// Example: /// Example: Example notes
/// Constraints: Minimum length = 0, Maximum length = 2147483647
/// Source of the data.
/// Example: /// Example: some.user
/// Constraints: Minimum length = 1, Maximum length = 64
func (rcv *OrganizationDetails_Ingest) Source() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(64))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Source of the data.
/// Example: /// Example: some.user
/// Constraints: Minimum length = 1, Maximum length = 64
/// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
/// Example: /// Example: some.user
/// Constraints: Minimum length = 0, Maximum length = 64
func (rcv *OrganizationDetails_Ingest) Origin() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(66))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
/// Example: /// Example: some.user
/// Constraints: Minimum length = 0, Maximum length = 64
/// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
/// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
/// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
/// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
/// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
/// Example: /// Example: TEST
/// Constraints: Minimum length = 1, Maximum length = 32
func (rcv *OrganizationDetails_Ingest) DataMode() OrganizationDetails_Ingest_dataMode_Enum {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(68))
	if o != 0 {
		return OrganizationDetails_Ingest_dataMode_Enum(rcv._tab.GetInt8(o + rcv._tab.Pos))
	}
	return 0
}

/// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
/// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
/// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
/// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
/// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
/// Example: /// Example: TEST
/// Constraints: Minimum length = 1, Maximum length = 32
func (rcv *OrganizationDetails_Ingest) MutateDataMode(n OrganizationDetails_Ingest_dataMode_Enum) bool {
	return rcv._tab.MutateInt8Slot(68, int8(n))
}

/// Optional array of provider/source specific tags for this data, where each element is no longer than 32 characters, used for implementing data owner conditional access controls to restrict access to the data. Should be left null by data providers unless conditional access controls are coordinated with the UDL team.
/// Example: /// Example: ['PROVIDER_TAG1', 'PROVIDER_TAG2']
/// Constraints: No constraints specified.
func (rcv *OrganizationDetails_Ingest) Tags(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(70))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *OrganizationDetails_Ingest) TagsLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(70))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

/// Optional array of provider/source specific tags for this data, where each element is no longer than 32 characters, used for implementing data owner conditional access controls to restrict access to the data. Should be left null by data providers unless conditional access controls are coordinated with the UDL team.
/// Example: /// Example: ['PROVIDER_TAG1', 'PROVIDER_TAG2']
/// Constraints: No constraints specified.
/// Time the row was created in the database, auto-populated by the system.
/// Example: /// Example: 2018-01-01T16:00:00.123Z
/// Constraints: No constraints specified.
func (rcv *OrganizationDetails_Ingest) CreatedAt() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(72))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Time the row was created in the database, auto-populated by the system.
/// Example: /// Example: 2018-01-01T16:00:00.123Z
/// Constraints: No constraints specified.
/// Application user who created the row in the database, auto-populated by the system.
/// Example: /// Example: some.user
/// Constraints: Minimum length = 1, Maximum length = 64
func (rcv *OrganizationDetails_Ingest) CreatedBy() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(74))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Application user who created the row in the database, auto-populated by the system.
/// Example: /// Example: some.user
/// Constraints: Minimum length = 1, Maximum length = 64
/// The originating source network on which this record was created, auto-populated by the system.
/// Example: /// Example: OPS1
/// Constraints: Minimum length = 1, Maximum length = 32
func (rcv *OrganizationDetails_Ingest) OrigNetwork() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(76))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The originating source network on which this record was created, auto-populated by the system.
/// Example: /// Example: OPS1
/// Constraints: Minimum length = 1, Maximum length = 32
func OrganizationDetails_IngestStart(builder *flatbuffers.Builder) {
	builder.StartObject(37)
}
func OrganizationDetails_IngestAddId(builder *flatbuffers.Builder, id flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(id), 0)
}
func OrganizationDetails_IngestAddIdOrganization(builder *flatbuffers.Builder, idOrganization flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(idOrganization), 0)
}
func OrganizationDetails_IngestAddClassificationMarking(builder *flatbuffers.Builder, classificationMarking flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(classificationMarking), 0)
}
func OrganizationDetails_IngestAddName(builder *flatbuffers.Builder, name flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(3, flatbuffers.UOffsetT(name), 0)
}
func OrganizationDetails_IngestAddEmail(builder *flatbuffers.Builder, email flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(4, flatbuffers.UOffsetT(email), 0)
}
func OrganizationDetails_IngestAddAddress1(builder *flatbuffers.Builder, address1 flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(5, flatbuffers.UOffsetT(address1), 0)
}
func OrganizationDetails_IngestAddAddress2(builder *flatbuffers.Builder, address2 flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(6, flatbuffers.UOffsetT(address2), 0)
}
func OrganizationDetails_IngestAddAddress3(builder *flatbuffers.Builder, address3 flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(7, flatbuffers.UOffsetT(address3), 0)
}
func OrganizationDetails_IngestAddGeoAdminLevel1(builder *flatbuffers.Builder, geoAdminLevel1 flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(8, flatbuffers.UOffsetT(geoAdminLevel1), 0)
}
func OrganizationDetails_IngestAddGeoAdminLevel2(builder *flatbuffers.Builder, geoAdminLevel2 flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(9, flatbuffers.UOffsetT(geoAdminLevel2), 0)
}
func OrganizationDetails_IngestAddGeoAdminLevel3(builder *flatbuffers.Builder, geoAdminLevel3 flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(10, flatbuffers.UOffsetT(geoAdminLevel3), 0)
}
func OrganizationDetails_IngestAddPostalCode(builder *flatbuffers.Builder, postalCode flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(11, flatbuffers.UOffsetT(postalCode), 0)
}
func OrganizationDetails_IngestAddDescription(builder *flatbuffers.Builder, description flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(12, flatbuffers.UOffsetT(description), 0)
}
func OrganizationDetails_IngestAddFormerOrgId(builder *flatbuffers.Builder, formerOrgId flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(13, flatbuffers.UOffsetT(formerOrgId), 0)
}
func OrganizationDetails_IngestAddParentOrgId(builder *flatbuffers.Builder, parentOrgId flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(14, flatbuffers.UOffsetT(parentOrgId), 0)
}
func OrganizationDetails_IngestAddFinancialYearEndDate(builder *flatbuffers.Builder, financialYearEndDate flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(15, flatbuffers.UOffsetT(financialYearEndDate), 0)
}
func OrganizationDetails_IngestAddRevenue(builder *flatbuffers.Builder, revenue float64) {
	builder.PrependFloat64Slot(16, revenue, 0.0)
}
func OrganizationDetails_IngestAddProfit(builder *flatbuffers.Builder, profit float64) {
	builder.PrependFloat64Slot(17, profit, 0.0)
}
func OrganizationDetails_IngestAddEbitda(builder *flatbuffers.Builder, ebitda float64) {
	builder.PrependFloat64Slot(18, ebitda, 0.0)
}
func OrganizationDetails_IngestAddFtes(builder *flatbuffers.Builder, ftes int32) {
	builder.PrependInt32Slot(19, ftes, 0)
}
func OrganizationDetails_IngestAddBroker(builder *flatbuffers.Builder, broker flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(20, flatbuffers.UOffsetT(broker), 0)
}
func OrganizationDetails_IngestAddCeo(builder *flatbuffers.Builder, ceo flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(21, flatbuffers.UOffsetT(ceo), 0)
}
func OrganizationDetails_IngestAddCfo(builder *flatbuffers.Builder, cfo flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(22, flatbuffers.UOffsetT(cfo), 0)
}
func OrganizationDetails_IngestAddCto(builder *flatbuffers.Builder, cto flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(23, flatbuffers.UOffsetT(cto), 0)
}
func OrganizationDetails_IngestAddRiskManager(builder *flatbuffers.Builder, riskManager flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(24, flatbuffers.UOffsetT(riskManager), 0)
}
func OrganizationDetails_IngestAddMassRanking(builder *flatbuffers.Builder, massRanking int32) {
	builder.PrependInt32Slot(25, massRanking, 0)
}
func OrganizationDetails_IngestAddRevenueRanking(builder *flatbuffers.Builder, revenueRanking int32) {
	builder.PrependInt32Slot(26, revenueRanking, 0)
}
func OrganizationDetails_IngestAddFinancialNotes(builder *flatbuffers.Builder, financialNotes flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(27, flatbuffers.UOffsetT(financialNotes), 0)
}
func OrganizationDetails_IngestAddServicesNotes(builder *flatbuffers.Builder, servicesNotes flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(28, flatbuffers.UOffsetT(servicesNotes), 0)
}
func OrganizationDetails_IngestAddFleetPlanNotes(builder *flatbuffers.Builder, fleetPlanNotes flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(29, flatbuffers.UOffsetT(fleetPlanNotes), 0)
}
func OrganizationDetails_IngestAddSource(builder *flatbuffers.Builder, source flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(30, flatbuffers.UOffsetT(source), 0)
}
func OrganizationDetails_IngestAddOrigin(builder *flatbuffers.Builder, origin flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(31, flatbuffers.UOffsetT(origin), 0)
}
func OrganizationDetails_IngestAddDataMode(builder *flatbuffers.Builder, dataMode OrganizationDetails_Ingest_dataMode_Enum) {
	builder.PrependInt8Slot(32, int8(dataMode), 0)
}
func OrganizationDetails_IngestAddTags(builder *flatbuffers.Builder, tags flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(33, flatbuffers.UOffsetT(tags), 0)
}
func OrganizationDetails_IngestStartTagsVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func OrganizationDetails_IngestAddCreatedAt(builder *flatbuffers.Builder, createdAt flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(34, flatbuffers.UOffsetT(createdAt), 0)
}
func OrganizationDetails_IngestAddCreatedBy(builder *flatbuffers.Builder, createdBy flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(35, flatbuffers.UOffsetT(createdBy), 0)
}
func OrganizationDetails_IngestAddOrigNetwork(builder *flatbuffers.Builder, origNetwork flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(36, flatbuffers.UOffsetT(origNetwork), 0)
}
func OrganizationDetails_IngestEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
