// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package Track_Ingest

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

/// /// A track is a position and optionally a heading/velocity of an object such as an aircraft at a particular timestamp. It also includes optional information regarding the identity/type of the target object, if known.
type Track_Ingest struct {
	_tab flatbuffers.Table
}

const Track_IngestIdentifier = "TRAC"

func GetRootAsTrack_Ingest(buf []byte, offset flatbuffers.UOffsetT) *Track_Ingest {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &Track_Ingest{}
	x.Init(buf, n+offset)
	return x
}

func FinishTrack_IngestBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	identifierBytes := []byte(Track_IngestIdentifier)
	builder.FinishWithFileIdentifier(offset, identifierBytes)
}

func Track_IngestBufferHasIdentifier(buf []byte) bool {
	return flatbuffers.BufferHasIdentifier(buf, Track_IngestIdentifier)
}

func GetSizePrefixedRootAsTrack_Ingest(buf []byte, offset flatbuffers.UOffsetT) *Track_Ingest {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &Track_Ingest{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedTrack_IngestBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	identifierBytes := []byte(Track_IngestIdentifier)
	builder.FinishSizePrefixedWithFileIdentifier(offset, identifierBytes)
}

func SizePrefixedTrack_IngestBufferHasIdentifier(buf []byte) bool {
	return flatbuffers.SizePrefixedBufferHasIdentifier(buf, Track_IngestIdentifier)
}

func (rcv *Track_Ingest) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *Track_Ingest) Table() flatbuffers.Table {
	return rcv._tab
}

/// Unique identifier of the record, auto-generated by the system.
/// Example: /// Example: TRACK-ID
/// Constraints: Minimum length = 1, Maximum length = 36
func (rcv *Track_Ingest) Id() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Unique identifier of the record, auto-generated by the system.
/// Example: /// Example: TRACK-ID
/// Constraints: Minimum length = 1, Maximum length = 36
/// Classification marking of the data in IC/CAPCO Portion-marked format.
/// Example: /// Example: U
/// Constraints: Minimum length = 1, Maximum length = 128
func (rcv *Track_Ingest) ClassificationMarking() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Classification marking of the data in IC/CAPCO Portion-marked format.
/// Example: /// Example: U
/// Constraints: Minimum length = 1, Maximum length = 128
/// Contact information for assets reporting PPLI (Precise Participant Location and Identification). PPLI is a Link 16 message that is used by units to transmit complete location, identification, and limited status information.
/// Example: /// Example: Contact Info
/// Constraints: Minimum length = 0, Maximum length = 64
func (rcv *Track_Ingest) Cntct() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Contact information for assets reporting PPLI (Precise Participant Location and Identification). PPLI is a Link 16 message that is used by units to transmit complete location, identification, and limited status information.
/// Example: /// Example: Contact Info
/// Constraints: Minimum length = 0, Maximum length = 64
/// Time the row was created in the database, auto-populated by the system.
/// Example: /// Example: 2018-01-01T16:00:00.123Z
/// Constraints: No constraints specified.
func (rcv *Track_Ingest) CreatedAt() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Time the row was created in the database, auto-populated by the system.
/// Example: /// Example: 2018-01-01T16:00:00.123Z
/// Constraints: No constraints specified.
/// Application user who created the row in the database, auto-populated by the system.
/// Example: /// Example: some.user
/// Constraints: Minimum length = 1, Maximum length = 64
func (rcv *Track_Ingest) CreatedBy() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Application user who created the row in the database, auto-populated by the system.
/// Example: /// Example: some.user
/// Constraints: Minimum length = 1, Maximum length = 64
/// Message Timestamp.
/// Example: /// Example: 2021-01-01T01:01:01.123456Z
/// Constraints: No constraints specified.
func (rcv *Track_Ingest) MsgTs() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Message Timestamp.
/// Example: /// Example: 2021-01-01T01:01:01.123456Z
/// Constraints: No constraints specified.
/// Mission ID related to the track.
/// Example: /// Example: msnId
/// Constraints: Minimum length = 0, Maximum length = 36
func (rcv *Track_Ingest) MsnId() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Mission ID related to the track.
/// Example: /// Example: msnId
/// Constraints: Minimum length = 0, Maximum length = 36
/// Nationality or organization of the tracking/reporting system or platform (e.g. FR, NATO, US, etc.).
/// Example: /// Example: US
/// Constraints: Minimum length = 0, Maximum length = 64
func (rcv *Track_Ingest) AssetNat() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(18))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Nationality or organization of the tracking/reporting system or platform (e.g. FR, NATO, US, etc.).
/// Example: /// Example: US
/// Constraints: Minimum length = 0, Maximum length = 64
/// Id/name of the platform providing the track data (i.e., tail number for air platform, tower ID for tower based sensor, site id for fixed radar).
/// Example: /// Example: asset
/// Constraints: Minimum length = 0, Maximum length = 32
func (rcv *Track_Ingest) Asset() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(20))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Id/name of the platform providing the track data (i.e., tail number for air platform, tower ID for tower based sensor, site id for fixed radar).
/// Example: /// Example: asset
/// Constraints: Minimum length = 0, Maximum length = 32
/// Id/name of sensor providing the track data.
/// Example: /// Example: sen
/// Constraints: Minimum length = 0, Maximum length = 32
func (rcv *Track_Ingest) Sen() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(22))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Id/name of sensor providing the track data.
/// Example: /// Example: sen
/// Constraints: Minimum length = 0, Maximum length = 32
/// Sensor quality.
/// Example: /// Example: senQual
/// Constraints: Minimum length = 0, Maximum length = 32
func (rcv *Track_Ingest) SenQual() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(24))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Sensor quality.
/// Example: /// Example: senQual
/// Constraints: Minimum length = 0, Maximum length = 32
/// UUID identifying the track, which should remain the same on subsequent tracks of the same object.
/// Example: /// Example: trkId
/// Constraints: Minimum length = 0, Maximum length = 36
func (rcv *Track_Ingest) TrkId() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(26))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// UUID identifying the track, which should remain the same on subsequent tracks of the same object.
/// Example: /// Example: trkId
/// Constraints: Minimum length = 0, Maximum length = 36
/// The track number (TN) of a surveillance entity. Intended as, but not constrained to, the J-series track number encoded as five character alpha-numeric characters. Users should refer to J-series documentation for specific TN definitions.
/// Example: /// Example: trkNum
/// Constraints: Minimum length = 0, Maximum length = 32
func (rcv *Track_Ingest) TrkNum() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(28))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The track number (TN) of a surveillance entity. Intended as, but not constrained to, the J-series track number encoded as five character alpha-numeric characters. Users should refer to J-series documentation for specific TN definitions.
/// Example: /// Example: trkNum
/// Constraints: Minimum length = 0, Maximum length = 32
/// Status of the track (e.g., INITIATING, MAINTAINING, DROPPING, TERMINATED, etc.).
/// Example: /// Example: INITIATING
/// Constraints: Minimum length = 0, Maximum length = 32
func (rcv *Track_Ingest) TrkStat() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(30))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Status of the track (e.g., INITIATING, MAINTAINING, DROPPING, TERMINATED, etc.).
/// Example: /// Example: INITIATING
/// Constraints: Minimum length = 0, Maximum length = 32
/// Nationality or organization of the track object (e.g. FR, NATO, US, etc.).
/// Example: /// Example: NATO
/// Constraints: Minimum length = 0, Maximum length = 64
func (rcv *Track_Ingest) ObjNat() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(32))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Nationality or organization of the track object (e.g. FR, NATO, US, etc.).
/// Example: /// Example: NATO
/// Constraints: Minimum length = 0, Maximum length = 64
/// The UID or designation of the tracked object.
/// Example: /// Example: objId
/// Constraints: Minimum length = 0, Maximum length = 36
func (rcv *Track_Ingest) ObjId() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(34))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The UID or designation of the tracked object.
/// Example: /// Example: objId
/// Constraints: Minimum length = 0, Maximum length = 36
/// The generic classification of the track object/group (e.g., HELICOPTER, TRACKED, WATERCRAFT, WHEELED, etc.). Referenced, but not constrained to, NATO STANAG 4676 object type classifications.
/// Example: /// Example: WATERCRAFT
/// Constraints: Minimum length = 0, Maximum length = 32
func (rcv *Track_Ingest) ObjType() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(36))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The generic classification of the track object/group (e.g., HELICOPTER, TRACKED, WATERCRAFT, WHEELED, etc.). Referenced, but not constrained to, NATO STANAG 4676 object type classifications.
/// Example: /// Example: WATERCRAFT
/// Constraints: Minimum length = 0, Maximum length = 32
/// The object specific type. Intended as, but not constrained to, MIL-STD-6016 environment dependent specific type designations. The specific type can be reported as either a combination of the code and environment (e.g. 155/SURFACE) or as the descriptive representation (e.g. AUDACE DDG), which are equivalent.
/// Example: /// Example: LIGHT_TANK
/// Constraints: Minimum length = 0, Maximum length = 32
func (rcv *Track_Ingest) ObjSpec() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(38))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The object specific type. Intended as, but not constrained to, MIL-STD-6016 environment dependent specific type designations. The specific type can be reported as either a combination of the code and environment (e.g. 155/SURFACE) or as the descriptive representation (e.g. AUDACE DDG), which are equivalent.
/// Example: /// Example: LIGHT_TANK
/// Constraints: Minimum length = 0, Maximum length = 32
/// The object platform type. Intended as, but not constrained to, MIL-STD-6016 environment dependent platform type designations. The platform type can be reported as either a combination of the code and environment (e.g. 14/LAND) or as the descriptive representations (e.g. COMBAT VEHICLE), which are equivalent.
/// Example: /// Example: COMBAT_VEHICLE
/// Constraints: Minimum length = 0, Maximum length = 32
func (rcv *Track_Ingest) ObjPlat() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(40))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The object platform type. Intended as, but not constrained to, MIL-STD-6016 environment dependent platform type designations. The platform type can be reported as either a combination of the code and environment (e.g. 14/LAND) or as the descriptive representations (e.g. COMBAT VEHICLE), which are equivalent.
/// Example: /// Example: COMBAT_VEHICLE
/// Constraints: Minimum length = 0, Maximum length = 32
/// The activity in which the track object is engaged. Intended as, but not constrained to, MIL-STD-6016 environment dependent activity designations. The activity can be reported as either a combination of the code and environment (e.g. 65/AIR) or as the descriptive enumeration (e.g. DIVERTING), which are equivalent.
/// Example: /// Example: HOLDING
/// Constraints: Minimum length = 0, Maximum length = 32
func (rcv *Track_Ingest) ObjAct() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(42))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The activity in which the track object is engaged. Intended as, but not constrained to, MIL-STD-6016 environment dependent activity designations. The activity can be reported as either a combination of the code and environment (e.g. 65/AIR) or as the descriptive enumeration (e.g. DIVERTING), which are equivalent.
/// Example: /// Example: HOLDING
/// Constraints: Minimum length = 0, Maximum length = 32
/// The type of source information from which the track was derived. Intended as, but not constrained to, NATO STANAG 4676 modality types (AIS, BFT, BIOMETRIC, COMINT, DOPPLER, ELINT, HRR, HUMINT, IMAGE, MASINT, MIXED, OSINT, OTHER):
/// AIS: Derived from an automated identification system source.
/// BFT: Derived from a blue force tracking source.
/// BIOMETRICS: Derived from a biometrics source.
/// COMINT: Derived from a communications intelligence source.
/// DOPPLER: Derived from a radar doppler source.
/// ELINT: Derived from an electronics intelligence source.
/// HRR: Derived from a radar high range resolution source.
/// HUMINT: Derived from a human intelligence source.
/// IMAGE: Derived from a still or motion imagery source.
/// MASINT: Derived from a measurement and signals intelligence source.
/// MIXED: Derived from a combination of two or more sources.
/// OSINT: Derived from an open source intelligence source.
/// OTHER: Derived from other types of unspecified sources.
/// Example: /// Example: MASINT
/// Constraints: Minimum length = 0, Maximum length = 32
func (rcv *Track_Ingest) ModType() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(44))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The type of source information from which the track was derived. Intended as, but not constrained to, NATO STANAG 4676 modality types (AIS, BFT, BIOMETRIC, COMINT, DOPPLER, ELINT, HRR, HUMINT, IMAGE, MASINT, MIXED, OSINT, OTHER):
/// AIS: Derived from an automated identification system source.
/// BFT: Derived from a blue force tracking source.
/// BIOMETRICS: Derived from a biometrics source.
/// COMINT: Derived from a communications intelligence source.
/// DOPPLER: Derived from a radar doppler source.
/// ELINT: Derived from an electronics intelligence source.
/// HRR: Derived from a radar high range resolution source.
/// HUMINT: Derived from a human intelligence source.
/// IMAGE: Derived from a still or motion imagery source.
/// MASINT: Derived from a measurement and signals intelligence source.
/// MIXED: Derived from a combination of two or more sources.
/// OSINT: Derived from an open source intelligence source.
/// OTHER: Derived from other types of unspecified sources.
/// Example: /// Example: MASINT
/// Constraints: Minimum length = 0, Maximum length = 32
/// UUID of the track item object, applies to STANAG-4676 messages.
/// Example: /// Example: trkItmId
/// Constraints: Minimum length = 0, Maximum length = 36
func (rcv *Track_Ingest) TrkItmId() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(46))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// UUID of the track item object, applies to STANAG-4676 messages.
/// Example: /// Example: trkItmId
/// Constraints: Minimum length = 0, Maximum length = 36
/// Track timestamp in ISO8601 UTC format.
/// Example: /// Example: 2021-06-07T14:17:39.653Z
/// Constraints: No constraints specified.
func (rcv *Track_Ingest) Ts() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(48))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Track timestamp in ISO8601 UTC format.
/// Example: /// Example: 2021-06-07T14:17:39.653Z
/// Constraints: No constraints specified.
/// Value indicating track quality (not standardized).
/// Example: /// Example: 0
/// Constraints: No constraints specified.
func (rcv *Track_Ingest) TrkQual() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(50))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

/// Value indicating track quality (not standardized).
/// Example: /// Example: 0
/// Constraints: No constraints specified.
func (rcv *Track_Ingest) MutateTrkQual(n int32) bool {
	return rcv._tab.MutateInt32Slot(50, n)
}

/// Means by which the track data was created (e.g., MEASURED, AUTOMATIC PREDICTED, etc.).
/// Example: /// Example: MEASURED
/// Constraints: No constraints specified.
func (rcv *Track_Ingest) TrkPtType() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(52))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Means by which the track data was created (e.g., MEASURED, AUTOMATIC PREDICTED, etc.).
/// Example: /// Example: MEASURED
/// Constraints: No constraints specified.
/// The estimated identity of the track object (ASSUMED FRIEND, FRIEND, HOSTILE, NEUTRAL, PENDING, SUSPECT, UNKNOWN):
/// ASSUMED FRIEND: Track assumed to be a friend due to the object characteristics, behavior, and/or origin.
/// FRIEND: Track object supporting friendly forces and belonging to a declared friendly nation or entity.
/// HOSTILE: Track object belonging to an opposing nation, party, group, or entity deemed to contribute to a threat to friendly forces or their mission due to its behavior, characteristics, nationality, or origin.
/// NEUTRAL: Track object whose characteristics, behavior, nationality, and/or origin indicate that it is neither supporting nor opposing friendly forces or their mission.
/// PENDING: Track object which has not been evaluated.
/// SUSPECT: Track object deemed potentially hostile due to the object characteristics, behavior, nationality, and/or origin.
/// UNKNOWN: Track object which has been evaluated and does not meet criteria for any standard identity.
/// Example: /// Example: FRIEND
/// Constraints: Minimum length = 0, Maximum length = 32
func (rcv *Track_Ingest) ObjIdent() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(54))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The estimated identity of the track object (ASSUMED FRIEND, FRIEND, HOSTILE, NEUTRAL, PENDING, SUSPECT, UNKNOWN):
/// ASSUMED FRIEND: Track assumed to be a friend due to the object characteristics, behavior, and/or origin.
/// FRIEND: Track object supporting friendly forces and belonging to a declared friendly nation or entity.
/// HOSTILE: Track object belonging to an opposing nation, party, group, or entity deemed to contribute to a threat to friendly forces or their mission due to its behavior, characteristics, nationality, or origin.
/// NEUTRAL: Track object whose characteristics, behavior, nationality, and/or origin indicate that it is neither supporting nor opposing friendly forces or their mission.
/// PENDING: Track object which has not been evaluated.
/// SUSPECT: Track object deemed potentially hostile due to the object characteristics, behavior, nationality, and/or origin.
/// UNKNOWN: Track object which has been evaluated and does not meet criteria for any standard identity.
/// Example: /// Example: FRIEND
/// Constraints: Minimum length = 0, Maximum length = 32
/// Track object identity credibility.
/// Example: /// Example: 0
/// Constraints: No constraints specified.
func (rcv *Track_Ingest) IdentCred() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(56))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

/// Track object identity credibility.
/// Example: /// Example: 0
/// Constraints: No constraints specified.
func (rcv *Track_Ingest) MutateIdentCred(n int32) bool {
	return rcv._tab.MutateInt32Slot(56, n)
}

/// Track object identity reliability.
/// Example: /// Example: 0
/// Constraints: No constraints specified.
func (rcv *Track_Ingest) IdentRel() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(58))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

/// Track object identity reliability.
/// Example: /// Example: 0
/// Constraints: No constraints specified.
func (rcv *Track_Ingest) MutateIdentRel(n int32) bool {
	return rcv._tab.MutateInt32Slot(58, n)
}

/// Additional track object identity/status information, typically used for EXERCISE identity amplification (FAKER, JOKER, KILO, TRAVELLER, ZOMBIE):
/// FAKER: Friendly track, object, or entity acting as an exercise hostile.
/// JOKER: Friendly track, object, or entity acting as an exercise suspect.
/// KILO: Friendly high-value object.
/// TRAVELLER: Suspect land or surface track following a recognized traffic route.
/// ZOMBIE: Suspect track, object, or entity of special interest.
/// Example: /// Example: ZOMBIE
/// Constraints: Minimum length = 0, Maximum length = 32
func (rcv *Track_Ingest) IdentAmp() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(60))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Additional track object identity/status information, typically used for EXERCISE identity amplification (FAKER, JOKER, KILO, TRAVELLER, ZOMBIE):
/// FAKER: Friendly track, object, or entity acting as an exercise hostile.
/// JOKER: Friendly track, object, or entity acting as an exercise suspect.
/// KILO: Friendly high-value object.
/// TRAVELLER: Suspect land or surface track following a recognized traffic route.
/// ZOMBIE: Suspect track, object, or entity of special interest.
/// Example: /// Example: ZOMBIE
/// Constraints: Minimum length = 0, Maximum length = 32
/// The track environment type (AIR, LAND, SPACE, SUBSURFACE, SURFACE, UNKNOWN):
/// AIR: Between sea level and the Kármán line, which has an altitude of 100 kilometers (62 miles).
/// LAND: On the surface of dry land.
/// SPACE: Above the Kármán line, which has an altitude of 100 kilometers (62 miles).
/// SURFACE: On the surface of a body of water.
/// SUBSURFACE: Below the surface of a body of water.
/// UNKNOWN: Environment is not known.
/// Example: /// Example: LAND
/// Constraints: Minimum length = 0, Maximum length = 16
func (rcv *Track_Ingest) Env() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(62))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The track environment type (AIR, LAND, SPACE, SUBSURFACE, SURFACE, UNKNOWN):
/// AIR: Between sea level and the Kármán line, which has an altitude of 100 kilometers (62 miles).
/// LAND: On the surface of dry land.
/// SPACE: Above the Kármán line, which has an altitude of 100 kilometers (62 miles).
/// SURFACE: On the surface of a body of water.
/// SUBSURFACE: Below the surface of a body of water.
/// UNKNOWN: Environment is not known.
/// Example: /// Example: LAND
/// Constraints: Minimum length = 0, Maximum length = 16
/// Track environment confidence estimate (not standardized).
/// Example: /// Example: 1.23
/// Constraints: No constraints specified.
func (rcv *Track_Ingest) EnvConf() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(64))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Track environment confidence estimate (not standardized).
/// Example: /// Example: 1.23
/// Constraints: No constraints specified.
func (rcv *Track_Ingest) MutateEnvConf(n float64) bool {
	return rcv._tab.MutateFloat64Slot(64, n)
}

/// Overall track confidence estimate (not standardized, but typically a value between 0 and 1, with 0 indicating lowest confidence).
/// Example: /// Example: 1.23
/// Constraints: No constraints specified.
func (rcv *Track_Ingest) TrkConf() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(66))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Overall track confidence estimate (not standardized, but typically a value between 0 and 1, with 0 indicating lowest confidence).
/// Example: /// Example: 1.23
/// Constraints: No constraints specified.
func (rcv *Track_Ingest) MutateTrkConf(n float64) bool {
	return rcv._tab.MutateFloat64Slot(66, n)
}

/// Track object location in ECEF [x, y, z], meters.  When provided, array must always contain 3 values.
/// Example: /// Example: [1.23, 2.34, 3.45]
/// Constraints: No constraints specified.
func (rcv *Track_Ingest) EcefPos(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(68))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *Track_Ingest) EcefPosLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(68))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

/// Track object location in ECEF [x, y, z], meters.  When provided, array must always contain 3 values.
/// Example: /// Example: [1.23, 2.34, 3.45]
/// Constraints: No constraints specified.
/// Track object velocity in ECEF [x', y', z'], meters/sec.  When provided, array must always contain 3 values.
/// Example: /// Example: [1.23, 2.34, 3.45]
/// Constraints: No constraints specified.
func (rcv *Track_Ingest) EcefVel(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(70))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *Track_Ingest) EcefVelLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(70))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

/// Track object velocity in ECEF [x', y', z'], meters/sec.  When provided, array must always contain 3 values.
/// Example: /// Example: [1.23, 2.34, 3.45]
/// Constraints: No constraints specified.
/// Track object acceleration in ECEF [x'', y'', z''], meters/sec^2.  When provided, array must always contain 3 values.
/// Example: /// Example: [1.23, 2.34, 3.45]
/// Constraints: No constraints specified.
func (rcv *Track_Ingest) EcefAcc(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(72))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *Track_Ingest) EcefAccLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(72))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

/// Track object acceleration in ECEF [x'', y'', z''], meters/sec^2.  When provided, array must always contain 3 values.
/// Example: /// Example: [1.23, 2.34, 3.45]
/// Constraints: No constraints specified.
/// WGS-84 latitude of the track object, in degrees. -90 to 90 degrees (negative values south of equator).
/// Example: /// Example: 1.23
/// Constraints: No constraints specified.
func (rcv *Track_Ingest) Lat() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(74))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// WGS-84 latitude of the track object, in degrees. -90 to 90 degrees (negative values south of equator).
/// Example: /// Example: 1.23
/// Constraints: No constraints specified.
func (rcv *Track_Ingest) MutateLat(n float64) bool {
	return rcv._tab.MutateFloat64Slot(74, n)
}

/// WGS-84 longitude of the track object, in degrees. -180 to 180 degrees (negative values west of Prime Meridian).
/// Example: /// Example: 1.23
/// Constraints: No constraints specified.
func (rcv *Track_Ingest) Lon() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(76))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// WGS-84 longitude of the track object, in degrees. -180 to 180 degrees (negative values west of Prime Meridian).
/// Example: /// Example: 1.23
/// Constraints: No constraints specified.
func (rcv *Track_Ingest) MutateLon(n float64) bool {
	return rcv._tab.MutateFloat64Slot(76, n)
}

/// Track point altitude relative to WGS-84 ellipsoid, in meters. Positive values indicate a track object height above ellipsoid, and negative values indicate a track object below ellipsoid, applicable to the depth estimate for a subsurface track.
/// Example: /// Example: 1.23
/// Constraints: No constraints specified.
func (rcv *Track_Ingest) Alt() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(78))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Track point altitude relative to WGS-84 ellipsoid, in meters. Positive values indicate a track object height above ellipsoid, and negative values indicate a track object below ellipsoid, applicable to the depth estimate for a subsurface track.
/// Example: /// Example: 1.23
/// Constraints: No constraints specified.
func (rcv *Track_Ingest) MutateAlt(n float64) bool {
	return rcv._tab.MutateFloat64Slot(78, n)
}

/// Track object spd, in meters/sec.
/// Example: /// Example: 1.23
/// Constraints: No constraints specified.
func (rcv *Track_Ingest) Spd() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(80))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Track object spd, in meters/sec.
/// Example: /// Example: 1.23
/// Constraints: No constraints specified.
func (rcv *Track_Ingest) MutateSpd(n float64) bool {
	return rcv._tab.MutateFloat64Slot(80, n)
}

/// The track object heading, in degrees clockwise from true North at the object location.
/// Example: /// Example: 19.7
/// Constraints: No constraints specified.
func (rcv *Track_Ingest) Hdng() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(82))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// The track object heading, in degrees clockwise from true North at the object location.
/// Example: /// Example: 19.7
/// Constraints: No constraints specified.
func (rcv *Track_Ingest) MutateHdng(n float64) bool {
	return rcv._tab.MutateFloat64Slot(82, n)
}

/// The track object course-over-ground, in degrees clockwise from true North at the object location (0-360 degrees).
/// Example: /// Example: 88.37
/// Constraints: No constraints specified.
func (rcv *Track_Ingest) Course() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(84))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// The track object course-over-ground, in degrees clockwise from true North at the object location (0-360 degrees).
/// Example: /// Example: 88.37
/// Constraints: No constraints specified.
func (rcv *Track_Ingest) MutateCourse(n float64) bool {
	return rcv._tab.MutateFloat64Slot(84, n)
}

/// Origin of a local coordinate system [lat, lon, altitude].  When provided, array must always contain 3 values.
/// Example: /// Example: [1.23, 2.34, 3.45]
/// Constraints: No constraints specified.
func (rcv *Track_Ingest) Lco(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(86))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *Track_Ingest) LcoLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(86))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

/// Origin of a local coordinate system [lat, lon, altitude].  When provided, array must always contain 3 values.
/// Example: /// Example: [1.23, 2.34, 3.45]
/// Constraints: No constraints specified.
/// x, y, and z-axis rotations about ECEF that define a local cartesian system.  When provided, array must always contain 3 values.
/// Example: /// Example: [1.23, 2.34, 3.45]
/// Constraints: No constraints specified.
func (rcv *Track_Ingest) Lcs(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(88))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *Track_Ingest) LcsLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(88))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

/// x, y, and z-axis rotations about ECEF that define a local cartesian system.  When provided, array must always contain 3 values.
/// Example: /// Example: [1.23, 2.34, 3.45]
/// Constraints: No constraints specified.
/// Estimate of the position, [x, y, z], of the track object in the defined cartesian system, in meters.  When provided, array must always contain 3 values.
/// Example: /// Example: [1.23, 2.34, 3.45]
/// Constraints: No constraints specified.
func (rcv *Track_Ingest) LcPos(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(90))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *Track_Ingest) LcPosLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(90))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

/// Estimate of the position, [x, y, z], of the track object in the defined cartesian system, in meters.  When provided, array must always contain 3 values.
/// Example: /// Example: [1.23, 2.34, 3.45]
/// Constraints: No constraints specified.
/// Estimate of the velocity, [x', y', z'], of the track object in the defined cartesian system, in meters/sec.  When provided, array must always contain 3 values.
/// Example: /// Example: [1.23, 2.34, 3.45]
/// Constraints: No constraints specified.
func (rcv *Track_Ingest) LcVel(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(92))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *Track_Ingest) LcVelLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(92))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

/// Estimate of the velocity, [x', y', z'], of the track object in the defined cartesian system, in meters/sec.  When provided, array must always contain 3 values.
/// Example: /// Example: [1.23, 2.34, 3.45]
/// Constraints: No constraints specified.
/// Estimate of the acceleration, [x'', y'', z''], of the track object in the defined cartesian system, in meters/sec^2.  When provided, array must always contain 3 values.
/// Example: /// Example: [1.23, 2.34, 3.45]
/// Constraints: No constraints specified.
func (rcv *Track_Ingest) LcAcc(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(94))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *Track_Ingest) LcAccLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(94))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

/// Estimate of the acceleration, [x'', y'', z''], of the track object in the defined cartesian system, in meters/sec^2.  When provided, array must always contain 3 values.
/// Example: /// Example: [1.23, 2.34, 3.45]
/// Constraints: No constraints specified.
/// East, North, Up velocity components, in meters/sec.  When provided, array must always contain 3 values.
/// Example: /// Example: [1.23, 2.34, 3.45]
/// Constraints: No constraints specified.
func (rcv *Track_Ingest) ENuvel(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(96))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *Track_Ingest) ENuvelLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(96))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

/// East, North, Up velocity components, in meters/sec.  When provided, array must always contain 3 values.
/// Example: /// Example: [1.23, 2.34, 3.45]
/// Constraints: No constraints specified.
/// East, North, Up position components, in meters.  When provided, array must always contain 3 values.
/// Example: /// Example: [1.23, 2.34, 3.45]
/// Constraints: No constraints specified.
func (rcv *Track_Ingest) ENupos(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(98))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *Track_Ingest) ENuposLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(98))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

/// East, North, Up position components, in meters.  When provided, array must always contain 3 values.
/// Example: /// Example: [1.23, 2.34, 3.45]
/// Constraints: No constraints specified.
/// Covariance matrix, in meter and second based units, for the defined cartesian system.
/// The array values represent the lower triangular half of the position-velocity covariance matrix.  The size of the covariance matrix is dynamic.  The values are output as an array of values corresponding to the position-velocity covariance element positions, ordered as follows:
/// &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;x&nbsp;&nbsp;y&nbsp;&nbsp;z&nbsp;&nbsp;&nbsp;x'&nbsp;&nbsp;y'&nbsp;z'&nbsp;&nbsp;
/// x&nbsp;&nbsp;&nbsp;&nbsp;1
/// y&nbsp;&nbsp;&nbsp;&nbsp;2&nbsp;&nbsp;&nbsp;3
/// z&nbsp;&nbsp;&nbsp;&nbsp;4&nbsp;&nbsp;&nbsp;5&nbsp;&nbsp;&nbsp;6
/// x'&nbsp;&nbsp;&nbsp;7&nbsp;&nbsp;&nbsp;8&nbsp;&nbsp;&nbsp;9&nbsp;&nbsp;10
/// y'&nbsp;&nbsp;11&nbsp;&nbsp;12&nbsp;&nbsp;13&nbsp;&nbsp;14&nbsp;&nbsp;15
/// z'&nbsp;&nbsp;16&nbsp;&nbsp;17&nbsp;&nbsp;18&nbsp;&nbsp;19&nbsp;&nbsp;20&nbsp;&nbsp; 21
/// The covariance matrix will be as large as the last element needed, and with unused values zero-filled to maintain proper element positioning in the array.  For example, for a 2D (x, y) position-only covariance, the covariance matrix will be 2x2 and the array would contain the 3 elements corresponding to the x, and y position.  Another example, now for a 2D (x, y) position-velocity covariance, the covariance matrix will be 5x5 and the array would contain the 15 elements corresponding to the relevant x, y, x', and y' values (with the z-row and z-column being all zeros). The cov array should contain only the lower left triangle values from top left down to bottom right, in order.
/// Example: /// Example: [1.1, 2.2, 3.3]
/// Constraints: No constraints specified.
func (rcv *Track_Ingest) Cov(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(100))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *Track_Ingest) CovLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(100))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

/// Covariance matrix, in meter and second based units, for the defined cartesian system.
/// The array values represent the lower triangular half of the position-velocity covariance matrix.  The size of the covariance matrix is dynamic.  The values are output as an array of values corresponding to the position-velocity covariance element positions, ordered as follows:
/// &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;x&nbsp;&nbsp;y&nbsp;&nbsp;z&nbsp;&nbsp;&nbsp;x'&nbsp;&nbsp;y'&nbsp;z'&nbsp;&nbsp;
/// x&nbsp;&nbsp;&nbsp;&nbsp;1
/// y&nbsp;&nbsp;&nbsp;&nbsp;2&nbsp;&nbsp;&nbsp;3
/// z&nbsp;&nbsp;&nbsp;&nbsp;4&nbsp;&nbsp;&nbsp;5&nbsp;&nbsp;&nbsp;6
/// x'&nbsp;&nbsp;&nbsp;7&nbsp;&nbsp;&nbsp;8&nbsp;&nbsp;&nbsp;9&nbsp;&nbsp;10
/// y'&nbsp;&nbsp;11&nbsp;&nbsp;12&nbsp;&nbsp;13&nbsp;&nbsp;14&nbsp;&nbsp;15
/// z'&nbsp;&nbsp;16&nbsp;&nbsp;17&nbsp;&nbsp;18&nbsp;&nbsp;19&nbsp;&nbsp;20&nbsp;&nbsp; 21
/// The covariance matrix will be as large as the last element needed, and with unused values zero-filled to maintain proper element positioning in the array.  For example, for a 2D (x, y) position-only covariance, the covariance matrix will be 2x2 and the array would contain the 3 elements corresponding to the x, and y position.  Another example, now for a 2D (x, y) position-velocity covariance, the covariance matrix will be 5x5 and the array would contain the 15 elements corresponding to the relevant x, y, x', and y' values (with the z-row and z-column being all zeros). The cov array should contain only the lower left triangle values from top left down to bottom right, in order.
/// Example: /// Example: [1.1, 2.2, 3.3]
/// Constraints: No constraints specified.
/// Uncertainty ellipsoid [semi-major axis (m), semi-minor axis (m), orientation (deg)].
/// Example: /// Example: [1.23, 2.34, 3.45]
/// Constraints: No constraints specified.
func (rcv *Track_Ingest) ErrEllp(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(102))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *Track_Ingest) ErrEllpLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(102))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

/// Uncertainty ellipsoid [semi-major axis (m), semi-minor axis (m), orientation (deg)].
/// Example: /// Example: [1.23, 2.34, 3.45]
/// Constraints: No constraints specified.
/// Array of UDL record types (POI, MTI, TRACK, GROUNDIMAGE) that contributed to the generation of this fused track.  See the associated 'srcIds' array for the record UUIDs, positionally corresponding to the record types in this array, used in the track fusion. The 'srcTyps' and 'srcIds' arrays must match in size.
/// Example: /// Example: ['MTI', 'POI']
/// Constraints: No constraints specified.
func (rcv *Track_Ingest) SrcTyps(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(104))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *Track_Ingest) SrcTypsLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(104))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

/// Array of UDL record types (POI, MTI, TRACK, GROUNDIMAGE) that contributed to the generation of this fused track.  See the associated 'srcIds' array for the record UUIDs, positionally corresponding to the record types in this array, used in the track fusion. The 'srcTyps' and 'srcIds' arrays must match in size.
/// Example: /// Example: ['MTI', 'POI']
/// Constraints: No constraints specified.
/// Array of UUIDs of the UDL data records that contributed to the generation of this fused track. See the associated 'srcTyps' array for the specific types of data, positionally corresponding to the UUIDs in this array, used in the track fusion.  The 'srcTyps' and 'srcIds' arrays must match in size. See the corresponding srcTyps array element for the data type of the UUID and use the appropriate API operation to retrieve that object (e.g. /udl/poi/{uuid}).
/// Example: /// Example: ['f7c70cc8-f9b7-4467-b4ad-3904e360e842', '1da3fab000014e3133709830937387405']
/// Constraints: No constraints specified.
func (rcv *Track_Ingest) SrcIds(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(106))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *Track_Ingest) SrcIdsLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(106))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

/// Array of UUIDs of the UDL data records that contributed to the generation of this fused track. See the associated 'srcTyps' array for the specific types of data, positionally corresponding to the UUIDs in this array, used in the track fusion.  The 'srcTyps' and 'srcIds' arrays must match in size. See the corresponding srcTyps array element for the data type of the UUID and use the appropriate API operation to retrieve that object (e.g. /udl/poi/{uuid}).
/// Example: /// Example: ['f7c70cc8-f9b7-4467-b4ad-3904e360e842', '1da3fab000014e3133709830937387405']
/// Constraints: No constraints specified.
/// The call sign currently assigned to this track object.
/// Example: /// Example: callSign
/// Constraints: Minimum length = 0, Maximum length = 24
func (rcv *Track_Ingest) CallSign() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(108))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The call sign currently assigned to this track object.
/// Example: /// Example: callSign
/// Constraints: Minimum length = 0, Maximum length = 24
/// Flag indicating that this track is fused from multiple sensor sources.
/// Example: /// Example: True
/// Constraints: No constraints specified.
func (rcv *Track_Ingest) MultiSource() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(110))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

/// Flag indicating that this track is fused from multiple sensor sources.
/// Example: /// Example: True
/// Constraints: No constraints specified.
func (rcv *Track_Ingest) MutateMultiSource(n bool) bool {
	return rcv._tab.MutateBoolSlot(110, n)
}

/// The J-series message type, if this track is derived from a J-series message.
/// Example: /// Example: J12.5
/// Constraints: Minimum length = 0, Maximum length = 5
func (rcv *Track_Ingest) JSeries() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(112))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The J-series message type, if this track is derived from a J-series message.
/// Example: /// Example: J12.5
/// Constraints: Minimum length = 0, Maximum length = 5
/// The number of objects or units moving as a group and represented as a single entity in this track message. If null, the track is assumed to represent a single object. Note that if this track derives from a J-series message then special definitions apply for the following values: 13 indicates an estimated 2-7 units, 14 indicates an estimated more than 7 units, and 15 indicates an estimated more than 12 units.
/// Example: /// Example: 14
/// Constraints: No constraints specified.
func (rcv *Track_Ingest) Strength() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(114))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

/// The number of objects or units moving as a group and represented as a single entity in this track message. If null, the track is assumed to represent a single object. Note that if this track derives from a J-series message then special definitions apply for the following values: 13 indicates an estimated 2-7 units, 14 indicates an estimated more than 7 units, and 15 indicates an estimated more than 12 units.
/// Example: /// Example: 14
/// Constraints: No constraints specified.
func (rcv *Track_Ingest) MutateStrength(n int32) bool {
	return rcv._tab.MutateInt32Slot(114, n)
}

/// Mode-1 interrogation response (mission code), indicating mission or aircraft type.
/// Example: /// Example: 1234
/// Constraints: No constraints specified.
func (rcv *Track_Ingest) M1() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(116))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

/// Mode-1 interrogation response (mission code), indicating mission or aircraft type.
/// Example: /// Example: 1234
/// Constraints: No constraints specified.
func (rcv *Track_Ingest) MutateM1(n int32) bool {
	return rcv._tab.MutateInt32Slot(116, n)
}

/// Mode-1 validity status.
/// Example: /// Example: 1
/// Constraints: No constraints specified.
func (rcv *Track_Ingest) M1v() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(118))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

/// Mode-1 validity status.
/// Example: /// Example: 1
/// Constraints: No constraints specified.
func (rcv *Track_Ingest) MutateM1v(n int32) bool {
	return rcv._tab.MutateInt32Slot(118, n)
}

/// Mode-2 interrogation response (military identification code).
/// Example: /// Example: 1234
/// Constraints: No constraints specified.
func (rcv *Track_Ingest) M2() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(120))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

/// Mode-2 interrogation response (military identification code).
/// Example: /// Example: 1234
/// Constraints: No constraints specified.
func (rcv *Track_Ingest) MutateM2(n int32) bool {
	return rcv._tab.MutateInt32Slot(120, n)
}

/// Mode-2 validity status.
/// Example: /// Example: 1
/// Constraints: No constraints specified.
func (rcv *Track_Ingest) M2v() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(122))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

/// Mode-2 validity status.
/// Example: /// Example: 1
/// Constraints: No constraints specified.
func (rcv *Track_Ingest) MutateM2v(n int32) bool {
	return rcv._tab.MutateInt32Slot(122, n)
}

/// Mode-3/A interrogation response (aircraft identification), provides a 4-digit octal identification code for the aircraft, assigned by the air traffic controller. Mode-3/A is shared military/civilian use.
/// Example: /// Example: 2636
/// Constraints: No constraints specified.
func (rcv *Track_Ingest) M3a() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(124))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

/// Mode-3/A interrogation response (aircraft identification), provides a 4-digit octal identification code for the aircraft, assigned by the air traffic controller. Mode-3/A is shared military/civilian use.
/// Example: /// Example: 2636
/// Constraints: No constraints specified.
func (rcv *Track_Ingest) MutateM3a(n int32) bool {
	return rcv._tab.MutateInt32Slot(124, n)
}

/// Mode-3/A validity status.
/// Example: /// Example: 1
/// Constraints: No constraints specified.
func (rcv *Track_Ingest) M3av() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(126))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

/// Mode-3/A validity status.
/// Example: /// Example: 1
/// Constraints: No constraints specified.
func (rcv *Track_Ingest) MutateM3av(n int32) bool {
	return rcv._tab.MutateInt32Slot(126, n)
}

/// Optional array of provider/source specific tags for this data, where each element is no longer than 32 characters, used for implementing data owner conditional access controls to restrict access to the data. Should be left null by data providers unless conditional access controls are coordinated with the UDL team.
/// Example: /// Example: ['TAG1', 'TAG2']
/// Constraints: No constraints specified.
func (rcv *Track_Ingest) Tags(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(128))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *Track_Ingest) TagsLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(128))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

/// Optional array of provider/source specific tags for this data, where each element is no longer than 32 characters, used for implementing data owner conditional access controls to restrict access to the data. Should be left null by data providers unless conditional access controls are coordinated with the UDL team.
/// Example: /// Example: ['TAG1', 'TAG2']
/// Constraints: No constraints specified.
/// The source data library from which this record was received. This could be a remote or tactical UDL or another data library. If null, the record should be assumed to have originated from the primary Enterprise UDL.
/// Example: /// Example: AXE
/// Constraints: Minimum length = 0, Maximum length = 64
func (rcv *Track_Ingest) SourceDl() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(130))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The source data library from which this record was received. This could be a remote or tactical UDL or another data library. If null, the record should be assumed to have originated from the primary Enterprise UDL.
/// Example: /// Example: AXE
/// Constraints: Minimum length = 0, Maximum length = 64
/// Source of the data.
/// Example: /// Example: Bluestaq
/// Constraints: Minimum length = 1, Maximum length = 64
func (rcv *Track_Ingest) Source() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(132))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Source of the data.
/// Example: /// Example: Bluestaq
/// Constraints: Minimum length = 1, Maximum length = 64
/// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
/// Example: /// Example: THIRD_PARTY_DATASOURCE
/// Constraints: Minimum length = 0, Maximum length = 64
func (rcv *Track_Ingest) Origin() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(134))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
/// Example: /// Example: THIRD_PARTY_DATASOURCE
/// Constraints: Minimum length = 0, Maximum length = 64
/// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
/// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
/// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
/// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
/// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
/// Example: /// Example: TEST
/// Constraints: Minimum length = 1, Maximum length = 32
func (rcv *Track_Ingest) DataMode() Track_Ingest_dataMode_Enum {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(136))
	if o != 0 {
		return Track_Ingest_dataMode_Enum(rcv._tab.GetInt8(o + rcv._tab.Pos))
	}
	return 0
}

/// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
/// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
/// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
/// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
/// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
/// Example: /// Example: TEST
/// Constraints: Minimum length = 1, Maximum length = 32
func (rcv *Track_Ingest) MutateDataMode(n Track_Ingest_dataMode_Enum) bool {
	return rcv._tab.MutateInt8Slot(136, int8(n))
}

/// The originating source network on which this record was created, auto-populated by the system.
/// Example: /// Example: ORIG
/// Constraints: Minimum length = 1, Maximum length = 32
func (rcv *Track_Ingest) OrigNetwork() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(138))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The originating source network on which this record was created, auto-populated by the system.
/// Example: /// Example: ORIG
/// Constraints: Minimum length = 1, Maximum length = 32
func Track_IngestStart(builder *flatbuffers.Builder) {
	builder.StartObject(68)
}
func Track_IngestAddId(builder *flatbuffers.Builder, id flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(id), 0)
}
func Track_IngestAddClassificationMarking(builder *flatbuffers.Builder, classificationMarking flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(classificationMarking), 0)
}
func Track_IngestAddCntct(builder *flatbuffers.Builder, cntct flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(cntct), 0)
}
func Track_IngestAddCreatedAt(builder *flatbuffers.Builder, createdAt flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(3, flatbuffers.UOffsetT(createdAt), 0)
}
func Track_IngestAddCreatedBy(builder *flatbuffers.Builder, createdBy flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(4, flatbuffers.UOffsetT(createdBy), 0)
}
func Track_IngestAddMsgTs(builder *flatbuffers.Builder, msgTs flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(5, flatbuffers.UOffsetT(msgTs), 0)
}
func Track_IngestAddMsnId(builder *flatbuffers.Builder, msnId flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(6, flatbuffers.UOffsetT(msnId), 0)
}
func Track_IngestAddAssetNat(builder *flatbuffers.Builder, assetNat flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(7, flatbuffers.UOffsetT(assetNat), 0)
}
func Track_IngestAddAsset(builder *flatbuffers.Builder, asset flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(8, flatbuffers.UOffsetT(asset), 0)
}
func Track_IngestAddSen(builder *flatbuffers.Builder, sen flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(9, flatbuffers.UOffsetT(sen), 0)
}
func Track_IngestAddSenQual(builder *flatbuffers.Builder, senQual flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(10, flatbuffers.UOffsetT(senQual), 0)
}
func Track_IngestAddTrkId(builder *flatbuffers.Builder, trkId flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(11, flatbuffers.UOffsetT(trkId), 0)
}
func Track_IngestAddTrkNum(builder *flatbuffers.Builder, trkNum flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(12, flatbuffers.UOffsetT(trkNum), 0)
}
func Track_IngestAddTrkStat(builder *flatbuffers.Builder, trkStat flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(13, flatbuffers.UOffsetT(trkStat), 0)
}
func Track_IngestAddObjNat(builder *flatbuffers.Builder, objNat flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(14, flatbuffers.UOffsetT(objNat), 0)
}
func Track_IngestAddObjId(builder *flatbuffers.Builder, objId flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(15, flatbuffers.UOffsetT(objId), 0)
}
func Track_IngestAddObjType(builder *flatbuffers.Builder, objType flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(16, flatbuffers.UOffsetT(objType), 0)
}
func Track_IngestAddObjSpec(builder *flatbuffers.Builder, objSpec flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(17, flatbuffers.UOffsetT(objSpec), 0)
}
func Track_IngestAddObjPlat(builder *flatbuffers.Builder, objPlat flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(18, flatbuffers.UOffsetT(objPlat), 0)
}
func Track_IngestAddObjAct(builder *flatbuffers.Builder, objAct flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(19, flatbuffers.UOffsetT(objAct), 0)
}
func Track_IngestAddModType(builder *flatbuffers.Builder, modType flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(20, flatbuffers.UOffsetT(modType), 0)
}
func Track_IngestAddTrkItmId(builder *flatbuffers.Builder, trkItmId flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(21, flatbuffers.UOffsetT(trkItmId), 0)
}
func Track_IngestAddTs(builder *flatbuffers.Builder, ts flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(22, flatbuffers.UOffsetT(ts), 0)
}
func Track_IngestAddTrkQual(builder *flatbuffers.Builder, trkQual int32) {
	builder.PrependInt32Slot(23, trkQual, 0)
}
func Track_IngestAddTrkPtType(builder *flatbuffers.Builder, trkPtType flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(24, flatbuffers.UOffsetT(trkPtType), 0)
}
func Track_IngestAddObjIdent(builder *flatbuffers.Builder, objIdent flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(25, flatbuffers.UOffsetT(objIdent), 0)
}
func Track_IngestAddIdentCred(builder *flatbuffers.Builder, identCred int32) {
	builder.PrependInt32Slot(26, identCred, 0)
}
func Track_IngestAddIdentRel(builder *flatbuffers.Builder, identRel int32) {
	builder.PrependInt32Slot(27, identRel, 0)
}
func Track_IngestAddIdentAmp(builder *flatbuffers.Builder, identAmp flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(28, flatbuffers.UOffsetT(identAmp), 0)
}
func Track_IngestAddEnv(builder *flatbuffers.Builder, env flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(29, flatbuffers.UOffsetT(env), 0)
}
func Track_IngestAddEnvConf(builder *flatbuffers.Builder, envConf float64) {
	builder.PrependFloat64Slot(30, envConf, 0.0)
}
func Track_IngestAddTrkConf(builder *flatbuffers.Builder, trkConf float64) {
	builder.PrependFloat64Slot(31, trkConf, 0.0)
}
func Track_IngestAddEcefPos(builder *flatbuffers.Builder, ecefPos flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(32, flatbuffers.UOffsetT(ecefPos), 0)
}
func Track_IngestStartEcefPosVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func Track_IngestAddEcefVel(builder *flatbuffers.Builder, ecefVel flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(33, flatbuffers.UOffsetT(ecefVel), 0)
}
func Track_IngestStartEcefVelVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func Track_IngestAddEcefAcc(builder *flatbuffers.Builder, ecefAcc flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(34, flatbuffers.UOffsetT(ecefAcc), 0)
}
func Track_IngestStartEcefAccVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func Track_IngestAddLat(builder *flatbuffers.Builder, lat float64) {
	builder.PrependFloat64Slot(35, lat, 0.0)
}
func Track_IngestAddLon(builder *flatbuffers.Builder, lon float64) {
	builder.PrependFloat64Slot(36, lon, 0.0)
}
func Track_IngestAddAlt(builder *flatbuffers.Builder, alt float64) {
	builder.PrependFloat64Slot(37, alt, 0.0)
}
func Track_IngestAddSpd(builder *flatbuffers.Builder, spd float64) {
	builder.PrependFloat64Slot(38, spd, 0.0)
}
func Track_IngestAddHdng(builder *flatbuffers.Builder, hdng float64) {
	builder.PrependFloat64Slot(39, hdng, 0.0)
}
func Track_IngestAddCourse(builder *flatbuffers.Builder, course float64) {
	builder.PrependFloat64Slot(40, course, 0.0)
}
func Track_IngestAddLco(builder *flatbuffers.Builder, lco flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(41, flatbuffers.UOffsetT(lco), 0)
}
func Track_IngestStartLcoVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func Track_IngestAddLcs(builder *flatbuffers.Builder, lcs flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(42, flatbuffers.UOffsetT(lcs), 0)
}
func Track_IngestStartLcsVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func Track_IngestAddLcPos(builder *flatbuffers.Builder, lcPos flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(43, flatbuffers.UOffsetT(lcPos), 0)
}
func Track_IngestStartLcPosVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func Track_IngestAddLcVel(builder *flatbuffers.Builder, lcVel flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(44, flatbuffers.UOffsetT(lcVel), 0)
}
func Track_IngestStartLcVelVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func Track_IngestAddLcAcc(builder *flatbuffers.Builder, lcAcc flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(45, flatbuffers.UOffsetT(lcAcc), 0)
}
func Track_IngestStartLcAccVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func Track_IngestAddENuvel(builder *flatbuffers.Builder, eNuvel flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(46, flatbuffers.UOffsetT(eNuvel), 0)
}
func Track_IngestStartENuvelVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func Track_IngestAddENupos(builder *flatbuffers.Builder, eNupos flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(47, flatbuffers.UOffsetT(eNupos), 0)
}
func Track_IngestStartENuposVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func Track_IngestAddCov(builder *flatbuffers.Builder, cov flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(48, flatbuffers.UOffsetT(cov), 0)
}
func Track_IngestStartCovVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func Track_IngestAddErrEllp(builder *flatbuffers.Builder, errEllp flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(49, flatbuffers.UOffsetT(errEllp), 0)
}
func Track_IngestStartErrEllpVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func Track_IngestAddSrcTyps(builder *flatbuffers.Builder, srcTyps flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(50, flatbuffers.UOffsetT(srcTyps), 0)
}
func Track_IngestStartSrcTypsVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func Track_IngestAddSrcIds(builder *flatbuffers.Builder, srcIds flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(51, flatbuffers.UOffsetT(srcIds), 0)
}
func Track_IngestStartSrcIdsVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func Track_IngestAddCallSign(builder *flatbuffers.Builder, callSign flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(52, flatbuffers.UOffsetT(callSign), 0)
}
func Track_IngestAddMultiSource(builder *flatbuffers.Builder, multiSource bool) {
	builder.PrependBoolSlot(53, multiSource, false)
}
func Track_IngestAddJSeries(builder *flatbuffers.Builder, jSeries flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(54, flatbuffers.UOffsetT(jSeries), 0)
}
func Track_IngestAddStrength(builder *flatbuffers.Builder, strength int32) {
	builder.PrependInt32Slot(55, strength, 0)
}
func Track_IngestAddM1(builder *flatbuffers.Builder, m1 int32) {
	builder.PrependInt32Slot(56, m1, 0)
}
func Track_IngestAddM1v(builder *flatbuffers.Builder, m1v int32) {
	builder.PrependInt32Slot(57, m1v, 0)
}
func Track_IngestAddM2(builder *flatbuffers.Builder, m2 int32) {
	builder.PrependInt32Slot(58, m2, 0)
}
func Track_IngestAddM2v(builder *flatbuffers.Builder, m2v int32) {
	builder.PrependInt32Slot(59, m2v, 0)
}
func Track_IngestAddM3a(builder *flatbuffers.Builder, m3a int32) {
	builder.PrependInt32Slot(60, m3a, 0)
}
func Track_IngestAddM3av(builder *flatbuffers.Builder, m3av int32) {
	builder.PrependInt32Slot(61, m3av, 0)
}
func Track_IngestAddTags(builder *flatbuffers.Builder, tags flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(62, flatbuffers.UOffsetT(tags), 0)
}
func Track_IngestStartTagsVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func Track_IngestAddSourceDl(builder *flatbuffers.Builder, sourceDl flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(63, flatbuffers.UOffsetT(sourceDl), 0)
}
func Track_IngestAddSource(builder *flatbuffers.Builder, source flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(64, flatbuffers.UOffsetT(source), 0)
}
func Track_IngestAddOrigin(builder *flatbuffers.Builder, origin flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(65, flatbuffers.UOffsetT(origin), 0)
}
func Track_IngestAddDataMode(builder *flatbuffers.Builder, dataMode Track_Ingest_dataMode_Enum) {
	builder.PrependInt8Slot(66, int8(dataMode), 0)
}
func Track_IngestAddOrigNetwork(builder *flatbuffers.Builder, origNetwork flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(67, flatbuffers.UOffsetT(origNetwork), 0)
}
func Track_IngestEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
