// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package Equipment_Abridged

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

/// /// Properties and characteristics of equipment that can be associated with a site or other entity.
type Equipment_Abridged struct {
	_tab flatbuffers.Table
}

const Equipment_AbridgedIdentifier = "EQUI"

func GetRootAsEquipment_Abridged(buf []byte, offset flatbuffers.UOffsetT) *Equipment_Abridged {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &Equipment_Abridged{}
	x.Init(buf, n+offset)
	return x
}

func FinishEquipment_AbridgedBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	identifierBytes := []byte(Equipment_AbridgedIdentifier)
	builder.FinishWithFileIdentifier(offset, identifierBytes)
}

func Equipment_AbridgedBufferHasIdentifier(buf []byte) bool {
	return flatbuffers.BufferHasIdentifier(buf, Equipment_AbridgedIdentifier)
}

func GetSizePrefixedRootAsEquipment_Abridged(buf []byte, offset flatbuffers.UOffsetT) *Equipment_Abridged {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &Equipment_Abridged{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedEquipment_AbridgedBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	identifierBytes := []byte(Equipment_AbridgedIdentifier)
	builder.FinishSizePrefixedWithFileIdentifier(offset, identifierBytes)
}

func SizePrefixedEquipment_AbridgedBufferHasIdentifier(buf []byte) bool {
	return flatbuffers.SizePrefixedBufferHasIdentifier(buf, Equipment_AbridgedIdentifier)
}

func (rcv *Equipment_Abridged) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *Equipment_Abridged) Table() flatbuffers.Table {
	return rcv._tab
}

/// Unique identifier of the record, auto-generated by the system.
/// Example: /// Example: 0167f577-e06c-358e-85aa-0a07a730bdd0
/// Constraints: Minimum length = 1, Maximum length = 36
func (rcv *Equipment_Abridged) Id() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Unique identifier of the record, auto-generated by the system.
/// Example: /// Example: 0167f577-e06c-358e-85aa-0a07a730bdd0
/// Constraints: Minimum length = 1, Maximum length = 36
/// Classification marking of the data in IC/CAPCO Portion-marked format.
/// Example: /// Example: U
/// Constraints: Minimum length = 1, Maximum length = 128
func (rcv *Equipment_Abridged) ClassificationMarking() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Classification marking of the data in IC/CAPCO Portion-marked format.
/// Example: /// Example: U
/// Constraints: Minimum length = 1, Maximum length = 128
/// Unique identifier of the Parent equipment record associated with this equipment record.
/// Example: /// Example: PARENT-EQUIPMENT-ID
/// Constraints: Minimum length = 0, Maximum length = 36
func (rcv *Equipment_Abridged) IdParentEquipment() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Unique identifier of the Parent equipment record associated with this equipment record.
/// Example: /// Example: PARENT-EQUIPMENT-ID
/// Constraints: Minimum length = 0, Maximum length = 36
/// Unique identifier of the Site Entity associated with the equipment record.
/// Example: /// Example: SITE-ID
/// Constraints: Minimum length = 0, Maximum length = 36
func (rcv *Equipment_Abridged) IdSite() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Unique identifier of the Site Entity associated with the equipment record.
/// Example: /// Example: SITE-ID
/// Constraints: Minimum length = 0, Maximum length = 36
/// Unique identifier of the operating unit associated with the equipment record.
/// Example: /// Example: UNIT-ID
/// Constraints: Minimum length = 0, Maximum length = 36
func (rcv *Equipment_Abridged) IdOperatingUnit() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Unique identifier of the operating unit associated with the equipment record.
/// Example: /// Example: UNIT-ID
/// Constraints: Minimum length = 0, Maximum length = 36
/// Unique identifier of the Equipment record from the originating system.
/// Example: /// Example: ORIG-EQP-ID
/// Constraints: Minimum length = 0, Maximum length = 36
func (rcv *Equipment_Abridged) AltEqpId() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Unique identifier of the Equipment record from the originating system.
/// Example: /// Example: ORIG-EQP-ID
/// Constraints: Minimum length = 0, Maximum length = 36
/// Designated equipment code assigned to the item of equipment or an abbreviation record type unique identifier. Users should consult the data provider for information on the equipment code structure.
/// Example: /// Example: X12345
/// Constraints: Minimum length = 0, Maximum length = 7
func (rcv *Equipment_Abridged) EqpCode() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Designated equipment code assigned to the item of equipment or an abbreviation record type unique identifier. Users should consult the data provider for information on the equipment code structure.
/// Example: /// Example: X12345
/// Constraints: Minimum length = 0, Maximum length = 7
/// Uniquely identifies each item or group of equipment associated with a unit, facility or site.
/// Example: /// Example: 001
/// Constraints: Minimum length = 0, Maximum length = 3
func (rcv *Equipment_Abridged) EqpIdNum() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(18))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Uniquely identifies each item or group of equipment associated with a unit, facility or site.
/// Example: /// Example: 001
/// Constraints: Minimum length = 0, Maximum length = 3
/// The DoD Standard Country Code designator for the country or political entity to which the equipment geographic coordinates reside. This field will be set to "OTHR" if the source value does not match a UDL Country code value (ISO-3166-ALPHA-2).
/// Example: /// Example: IQ
/// Constraints: Minimum length = 1, Maximum length = 4
func (rcv *Equipment_Abridged) CountryCode() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(20))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The DoD Standard Country Code designator for the country or political entity to which the equipment geographic coordinates reside. This field will be set to "OTHR" if the source value does not match a UDL Country code value (ISO-3166-ALPHA-2).
/// Example: /// Example: IQ
/// Constraints: Minimum length = 1, Maximum length = 4
/// Specifies an alternate country code if the data provider code is not part of an official Country Code standard such as ISO-3166 or FIPS. This field will be set to the value provided by the source and should be used for all Queries specifying a Country Code.
/// Example: /// Example: IZ
/// Constraints: Minimum length = 0, Maximum length = 4
func (rcv *Equipment_Abridged) AltCountryCode() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(22))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Specifies an alternate country code if the data provider code is not part of an official Country Code standard such as ISO-3166 or FIPS. This field will be set to the value provided by the source and should be used for all Queries specifying a Country Code.
/// Example: /// Example: IZ
/// Constraints: Minimum length = 0, Maximum length = 4
/// World Aeronautical Chart identifier for the area in which a designated place is located.
/// Example: /// Example: 0427
/// Constraints: Minimum length = 0, Maximum length = 4
func (rcv *Equipment_Abridged) Wac() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(24))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// World Aeronautical Chart identifier for the area in which a designated place is located.
/// Example: /// Example: 0427
/// Constraints: Minimum length = 0, Maximum length = 4
/// Provider specific sequential number assigned to the equipment.
/// Example: /// Example: 5
/// Constraints: No constraints specified.
func (rcv *Equipment_Abridged) SeqNum() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(26))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

/// Provider specific sequential number assigned to the equipment.
/// Example: /// Example: 5
/// Constraints: No constraints specified.
func (rcv *Equipment_Abridged) MutateSeqNum(n int32) bool {
	return rcv._tab.MutateInt32Slot(26, n)
}

/// Generic type this specific piece of equipment belongs to, and the identifying nomenclature which describes the equipment.
/// Example: /// Example: AMPHIBIOUS WARFARE SHIP
/// Constraints: Minimum length = 0, Maximum length = 54
func (rcv *Equipment_Abridged) Nomen() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(28))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Generic type this specific piece of equipment belongs to, and the identifying nomenclature which describes the equipment.
/// Example: /// Example: AMPHIBIOUS WARFARE SHIP
/// Constraints: Minimum length = 0, Maximum length = 54
/// The Degree to which an entity is ready to perform the overall operational mission(s) for which it was organized and equipped. The specific usage and enumerations contained in this field may be found in the documentation provided in the referenceDoc field.  If referenceDoc not provided, users may consult the data provider.
/// Example: /// Example: OPR
/// Constraints: Minimum length = 0, Maximum length = 3
func (rcv *Equipment_Abridged) OperStatus() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(30))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The Degree to which an entity is ready to perform the overall operational mission(s) for which it was organized and equipped. The specific usage and enumerations contained in this field may be found in the documentation provided in the referenceDoc field.  If referenceDoc not provided, users may consult the data provider.
/// Example: /// Example: OPR
/// Constraints: Minimum length = 0, Maximum length = 3
/// The physical manner of being or state of existence of the entity.  A physical condition that must be considered in the determining of a course of action. The specific usage and enumerations contained in this field may be found in the documentation provided in the referenceDoc field.  If referenceDoc not provided, users may consult the data provider.
/// Example: /// Example: RDY
/// Constraints: Minimum length = 0, Maximum length = 4
func (rcv *Equipment_Abridged) Condition() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(32))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The physical manner of being or state of existence of the entity.  A physical condition that must be considered in the determining of a course of action. The specific usage and enumerations contained in this field may be found in the documentation provided in the referenceDoc field.  If referenceDoc not provided, users may consult the data provider.
/// Example: /// Example: RDY
/// Constraints: Minimum length = 0, Maximum length = 4
/// Availability of the entity relative to its condition.  Indicates the reason the entity is not fully operational. The specific usage and enumerations contained in this field may be found in the documentation provided in the referenceDoc field.  If referenceDoc not provided, users may consult the data provider.
/// Example: /// Example: A
/// Constraints: Minimum length = 0, Maximum length = 4
func (rcv *Equipment_Abridged) ConditionAvail() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(34))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Availability of the entity relative to its condition.  Indicates the reason the entity is not fully operational. The specific usage and enumerations contained in this field may be found in the documentation provided in the referenceDoc field.  If referenceDoc not provided, users may consult the data provider.
/// Example: /// Example: A
/// Constraints: Minimum length = 0, Maximum length = 4
/// Eval represents the Intelligence Confidence Level or the Reliability/degree of confidence that the analyst has assigned to the data within this record. The numerical range is from 1 to 9 with 1 representing the highest confidence level.
/// Example: /// Example: 7
/// Constraints: No constraints specified.
func (rcv *Equipment_Abridged) Eval() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(36))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

/// Eval represents the Intelligence Confidence Level or the Reliability/degree of confidence that the analyst has assigned to the data within this record. The numerical range is from 1 to 9 with 1 representing the highest confidence level.
/// Example: /// Example: 7
/// Constraints: No constraints specified.
func (rcv *Equipment_Abridged) MutateEval(n int32) bool {
	return rcv._tab.MutateInt32Slot(36, n)
}

/// Functional Production Area (FPA) under the Shared Production Program (SPP).  Producers are defined per country per FPA. The specific usage and enumerations contained in this field may be found in the documentation provided in the referenceDoc field.  If referenceDoc not provided, users may consult the data provider.
/// Example: /// Example: NOB
/// Constraints: Minimum length = 0, Maximum length = 5
func (rcv *Equipment_Abridged) Fpa() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(38))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Functional Production Area (FPA) under the Shared Production Program (SPP).  Producers are defined per country per FPA. The specific usage and enumerations contained in this field may be found in the documentation provided in the referenceDoc field.  If referenceDoc not provided, users may consult the data provider.
/// Example: /// Example: NOB
/// Constraints: Minimum length = 0, Maximum length = 5
/// Indicates the function or mission of this equipment, which may or may not be engaged in at any particular time.  Typically refers to a unit, organization, or installation/facility performing a specific function or mission such as a redistribution center or naval shipyard. The specific usage and enumerations contained in this field may be found in the documentation provided in the referenceDoc field.  If referenceDoc not provided, users may consult the data provider.
/// Example: /// Example: OCC
/// Constraints: Minimum length = 0, Maximum length = 3
func (rcv *Equipment_Abridged) Function() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(40))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Indicates the function or mission of this equipment, which may or may not be engaged in at any particular time.  Typically refers to a unit, organization, or installation/facility performing a specific function or mission such as a redistribution center or naval shipyard. The specific usage and enumerations contained in this field may be found in the documentation provided in the referenceDoc field.  If referenceDoc not provided, users may consult the data provider.
/// Example: /// Example: OCC
/// Constraints: Minimum length = 0, Maximum length = 3
/// Estimated identity of the Site (ASSUMED FRIEND, FRIEND, HOSTILE, FAKER, JOKER, NEUTRAL, PENDING, SUSPECT, UNKNOWN): 
/// ASSUMED FRIEND: Track assumed to be a friend due to the object characteristics, behavior, and/or origin.
/// FRIEND: Track object supporting friendly forces and belonging to a declared friendly nation or entity.
/// HOSTILE: Track object belonging to an opposing nation, party, group, or entity deemed to contribute to a threat to friendly forces or their mission due to its behavior, characteristics, nationality, or origin.
/// FAKER: Friendly track, object, or entity acting as an exercise hostile.
/// JOKER: Friendly track, object, or entity acting as an exercise suspect.
/// NEUTRAL: Track object whose characteristics, behavior, nationality, and/or origin indicate that it is neither supporting nor opposing friendly forces or their mission.
/// PENDING: Track object which has not been evaluated.
/// SUSPECT: Track object deemed potentially hostile due to the object characteristics, behavior, nationality, and/or origin.
/// UNKNOWN: Track object which has been evaluated and does not meet criteria for any standard identity.
/// Example: /// Example: FRIEND
/// Constraints: Minimum length = 0, Maximum length = 32
func (rcv *Equipment_Abridged) Ident() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(42))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Estimated identity of the Site (ASSUMED FRIEND, FRIEND, HOSTILE, FAKER, JOKER, NEUTRAL, PENDING, SUSPECT, UNKNOWN): 
/// ASSUMED FRIEND: Track assumed to be a friend due to the object characteristics, behavior, and/or origin.
/// FRIEND: Track object supporting friendly forces and belonging to a declared friendly nation or entity.
/// HOSTILE: Track object belonging to an opposing nation, party, group, or entity deemed to contribute to a threat to friendly forces or their mission due to its behavior, characteristics, nationality, or origin.
/// FAKER: Friendly track, object, or entity acting as an exercise hostile.
/// JOKER: Friendly track, object, or entity acting as an exercise suspect.
/// NEUTRAL: Track object whose characteristics, behavior, nationality, and/or origin indicate that it is neither supporting nor opposing friendly forces or their mission.
/// PENDING: Track object which has not been evaluated.
/// SUSPECT: Track object deemed potentially hostile due to the object characteristics, behavior, nationality, and/or origin.
/// UNKNOWN: Track object which has been evaluated and does not meet criteria for any standard identity.
/// Example: /// Example: FRIEND
/// Constraints: Minimum length = 0, Maximum length = 32
/// The DoD Standard Country Code designator for the country or political entity to which the equipment owes its allegiance. This field will be set to "OTHR" if the source value does not match a UDL Country code value (ISO-3166-ALPHA-2).
/// Example: /// Example: OTHR
/// Constraints: Minimum length = 0, Maximum length = 4
func (rcv *Equipment_Abridged) Allegiance() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(44))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The DoD Standard Country Code designator for the country or political entity to which the equipment owes its allegiance. This field will be set to "OTHR" if the source value does not match a UDL Country code value (ISO-3166-ALPHA-2).
/// Example: /// Example: OTHR
/// Constraints: Minimum length = 0, Maximum length = 4
/// Specifies an alternate allegiance code if the data provider code is not part of an official Country Code standard such as ISO-3166 or FIPS. This field will be set to the value provided by the source and should be used for all Queries specifying allegiance.
/// Example: /// Example: HL
/// Constraints: Minimum length = 0, Maximum length = 4
func (rcv *Equipment_Abridged) AltAllegiance() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(46))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Specifies an alternate allegiance code if the data provider code is not part of an official Country Code standard such as ISO-3166 or FIPS. This field will be set to the value provided by the source and should be used for all Queries specifying allegiance.
/// Example: /// Example: HL
/// Constraints: Minimum length = 0, Maximum length = 4
/// Indicates the reason that the equipment is at that location. The specific usage and enumerations contained in this field may be found in the documentation provided in the referenceDoc field.  If referenceDoc not provided, users may consult the data provider.
/// Example: /// Example: GR
/// Constraints: Minimum length = 0, Maximum length = 9
func (rcv *Equipment_Abridged) LocReason() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(48))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Indicates the reason that the equipment is at that location. The specific usage and enumerations contained in this field may be found in the documentation provided in the referenceDoc field.  If referenceDoc not provided, users may consult the data provider.
/// Example: /// Example: GR
/// Constraints: Minimum length = 0, Maximum length = 9
/// Internationally recognized water area in which the vessel is most likely to be deployed or in which it normally operates most frequently.
/// Example: /// Example: Territorial Sea
/// Constraints: Minimum length = 0, Maximum length = 32
func (rcv *Equipment_Abridged) OperAreaPrimary() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(50))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Internationally recognized water area in which the vessel is most likely to be deployed or in which it normally operates most frequently.
/// Example: /// Example: Territorial Sea
/// Constraints: Minimum length = 0, Maximum length = 32
/// Principal operational function being performed.  The specific usage and enumerations contained in this field may be found in the documentation provided in the referenceDoc field.  If referenceDoc not provided, users may consult the data provider.
/// Example: /// Example: JG
/// Constraints: Minimum length = 0, Maximum length = 4
func (rcv *Equipment_Abridged) FunctPrimary() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(52))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Principal operational function being performed.  The specific usage and enumerations contained in this field may be found in the documentation provided in the referenceDoc field.  If referenceDoc not provided, users may consult the data provider.
/// Example: /// Example: JG
/// Constraints: Minimum length = 0, Maximum length = 4
/// A mathematical model of the earth used to calculate coordinates on a map.  US Forces use the World Geodetic System 1984 (WGS 84), but also use maps by allied countries with local datums.  The datum must be specified to ensure accuracy of coordinates. The specific usage and enumerations contained in this field may be found in the documentation provided in the referenceDoc field.  If referenceDoc not provided, users may consult the data provider.
/// Example: /// Example: WGS
/// Constraints: Minimum length = 0, Maximum length = 16
func (rcv *Equipment_Abridged) CoordDatum() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(54))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// A mathematical model of the earth used to calculate coordinates on a map.  US Forces use the World Geodetic System 1984 (WGS 84), but also use maps by allied countries with local datums.  The datum must be specified to ensure accuracy of coordinates. The specific usage and enumerations contained in this field may be found in the documentation provided in the referenceDoc field.  If referenceDoc not provided, users may consult the data provider.
/// Example: /// Example: WGS
/// Constraints: Minimum length = 0, Maximum length = 16
/// Indicates any of the magnitudes that serve to define the position of a point by reference to a fixed figure, system of lines, etc. specified in degrees, minute, and seconds.
/// Pos. 1-2.  Latitude Degrees     [00-90]
/// Pos. 3-4.  Latitude Minutes     [00-59]
/// Pos. 5-6.  Latitude Seconds     [00-59]
/// Pos. 7-9.  Latitude Thousandths Of Seconds   [000-999]  
/// Pos. 10. Latitude Hemisphere       [NS] 
/// Pos. 11-13. Longitude Degrees     [00-180] 
/// Pos. 14-15. Longitude Minutes     [00-59] 
/// Pos. 16-17. Longitude Seconds     [00-59] 
/// Pos. 18-20. Longitude Thousandths Of Seconds      [000-999]
/// Pos. 21. Longitude Hemisphere     [EW]
/// Pos. 1-21.  Unknown Latitude and Unknown Longitude [000000000U000000000U]].
/// Example: /// Example: 340000000N0430000000E
/// Constraints: Minimum length = 0, Maximum length = 21
func (rcv *Equipment_Abridged) Coord() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(56))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Indicates any of the magnitudes that serve to define the position of a point by reference to a fixed figure, system of lines, etc. specified in degrees, minute, and seconds.
/// Pos. 1-2.  Latitude Degrees     [00-90]
/// Pos. 3-4.  Latitude Minutes     [00-59]
/// Pos. 5-6.  Latitude Seconds     [00-59]
/// Pos. 7-9.  Latitude Thousandths Of Seconds   [000-999]  
/// Pos. 10. Latitude Hemisphere       [NS] 
/// Pos. 11-13. Longitude Degrees     [00-180] 
/// Pos. 14-15. Longitude Minutes     [00-59] 
/// Pos. 16-17. Longitude Seconds     [00-59] 
/// Pos. 18-20. Longitude Thousandths Of Seconds      [000-999]
/// Pos. 21. Longitude Hemisphere     [EW]
/// Pos. 1-21.  Unknown Latitude and Unknown Longitude [000000000U000000000U]].
/// Example: /// Example: 340000000N0430000000E
/// Constraints: Minimum length = 0, Maximum length = 21
/// Indicates the plus or minus error assessed against the method used to derive the coordinate.
/// Example: /// Example: 12.345
/// Constraints: No constraints specified.
func (rcv *Equipment_Abridged) CoordDerivAcc() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(58))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Indicates the plus or minus error assessed against the method used to derive the coordinate.
/// Example: /// Example: 12.345
/// Constraints: No constraints specified.
func (rcv *Equipment_Abridged) MutateCoordDerivAcc(n float64) bool {
	return rcv._tab.MutateFloat64Slot(58, n)
}

/// WGS84 latitude of the location, in degrees. -90 to 90 degrees (negative values south of equator).
/// Example: /// Example: 39.019242
/// Constraints: No constraints specified.
func (rcv *Equipment_Abridged) Lat() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(60))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// WGS84 latitude of the location, in degrees. -90 to 90 degrees (negative values south of equator).
/// Example: /// Example: 39.019242
/// Constraints: No constraints specified.
func (rcv *Equipment_Abridged) MutateLat(n float64) bool {
	return rcv._tab.MutateFloat64Slot(60, n)
}

/// WGS84 longitude of the location, in degrees. -180 to 180 degrees (negative values west of Prime Meridian).
/// Example: /// Example: -104.251659
/// Constraints: No constraints specified.
func (rcv *Equipment_Abridged) Lon() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(62))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// WGS84 longitude of the location, in degrees. -180 to 180 degrees (negative values west of Prime Meridian).
/// Example: /// Example: -104.251659
/// Constraints: No constraints specified.
func (rcv *Equipment_Abridged) MutateLon(n float64) bool {
	return rcv._tab.MutateFloat64Slot(62, n)
}

/// Ground elevation, in meters, of the geographic coordinates referenced to (above or below) Mean Sea Level (MSL) vertical datum.
/// Example: /// Example: 123.45
/// Constraints: No constraints specified.
func (rcv *Equipment_Abridged) ElevMsl() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(64))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Ground elevation, in meters, of the geographic coordinates referenced to (above or below) Mean Sea Level (MSL) vertical datum.
/// Example: /// Example: 123.45
/// Constraints: No constraints specified.
func (rcv *Equipment_Abridged) MutateElevMsl(n float64) bool {
	return rcv._tab.MutateFloat64Slot(64, n)
}

/// Indicates the confidence level expressed as a percent that a specific geometric spatial element, ELEVATION_MSL linear accuracy, has been vertically positioned to within a specified vertical accuracy. Confidence level has a range of values from 0 to 100, with 100 being highest level of confidence.
/// Example: /// Example: 50
/// Constraints: No constraints specified.
func (rcv *Equipment_Abridged) ElevMslConfLvl() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(66))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

/// Indicates the confidence level expressed as a percent that a specific geometric spatial element, ELEVATION_MSL linear accuracy, has been vertically positioned to within a specified vertical accuracy. Confidence level has a range of values from 0 to 100, with 100 being highest level of confidence.
/// Example: /// Example: 50
/// Constraints: No constraints specified.
func (rcv *Equipment_Abridged) MutateElevMslConfLvl(n int32) bool {
	return rcv._tab.MutateInt32Slot(66, n)
}

/// Indicates the plus or minus error assessed against the method used to derive the elevation, measured in meters.
/// Example: /// Example: 12.34
/// Constraints: No constraints specified.
func (rcv *Equipment_Abridged) ElevMslDerivAcc() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(68))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Indicates the plus or minus error assessed against the method used to derive the elevation, measured in meters.
/// Example: /// Example: 12.34
/// Constraints: No constraints specified.
func (rcv *Equipment_Abridged) MutateElevMslDerivAcc(n float64) bool {
	return rcv._tab.MutateFloat64Slot(68, n)
}

/// The distance between Mean Sea Level and a referenced ellipsoid, measured in meters.
/// Example: /// Example: 12.34
/// Constraints: No constraints specified.
func (rcv *Equipment_Abridged) GeoidalMslSep() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(70))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// The distance between Mean Sea Level and a referenced ellipsoid, measured in meters.
/// Example: /// Example: 12.34
/// Constraints: No constraints specified.
func (rcv *Equipment_Abridged) MutateGeoidalMslSep(n float64) bool {
	return rcv._tab.MutateFloat64Slot(70, n)
}

/// Indicates the grid system used in the development of the milGrid coordinates. Values are:
/// UPS - Universal Polar System
/// UTM - Universal Transverse Mercator.
/// Example: /// Example: UTM
/// Constraints: Minimum length = 0, Maximum length = 3
func (rcv *Equipment_Abridged) MilGridSys() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(72))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Indicates the grid system used in the development of the milGrid coordinates. Values are:
/// UPS - Universal Polar System
/// UTM - Universal Transverse Mercator.
/// Example: /// Example: UTM
/// Constraints: Minimum length = 0, Maximum length = 3
/// The Military Grid Reference System is the geocoordinate standard used by NATO militaries for locating points on Earth. The MGRS is derived from the Universal Transverse Mercator (UTM) grid system and the Universal Polar Stereographic (UPS) grid system, but uses a different labeling convention. The MGRS is used as geocode for the entire Earth. Example of an milgrid coordinate, or grid reference, would be 4QFJ12345678, which consists of three parts:
/// 4Q (grid zone designator, GZD)
/// FJ (the 100,000-meter square identifier)
/// 12345678 (numerical location; easting is 1234 and northing is 5678, in this case specifying a location with 10 m resolution).
/// Example: /// Example: 4QFJ12345678
/// Constraints: Minimum length = 0, Maximum length = 15
func (rcv *Equipment_Abridged) MilGrid() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(74))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The Military Grid Reference System is the geocoordinate standard used by NATO militaries for locating points on Earth. The MGRS is derived from the Universal Transverse Mercator (UTM) grid system and the Universal Polar Stereographic (UPS) grid system, but uses a different labeling convention. The MGRS is used as geocode for the entire Earth. Example of an milgrid coordinate, or grid reference, would be 4QFJ12345678, which consists of three parts:
/// 4Q (grid zone designator, GZD)
/// FJ (the 100,000-meter square identifier)
/// 12345678 (numerical location; easting is 1234 and northing is 5678, in this case specifying a location with 10 m resolution).
/// Example: /// Example: 4QFJ12345678
/// Constraints: Minimum length = 0, Maximum length = 15
/// Universal Transverse Mercator (UTM) grid coordinates.
/// Pos. 1-2, UTM Zone Column   [01-60
/// Pos. 3, UTM Zone Row   [C-HJ-NP-X]
/// Pos. 4, UTM False Easting   [0-9]
/// Pos. 5-9, UTM Meter Easting    [0-9][0-9][0-9][0-9][0-9]
/// Pos. 10-11, UTM False Northing    [0-9][0-9]
/// Pos. 12-16, UTM Meter Northing    [0-9][0-9][0-9][0-9][0-9].
/// Example: /// Example: 19P4390691376966
/// Constraints: Minimum length = 0, Maximum length = 16
func (rcv *Equipment_Abridged) Utm() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(76))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Universal Transverse Mercator (UTM) grid coordinates.
/// Pos. 1-2, UTM Zone Column   [01-60
/// Pos. 3, UTM Zone Row   [C-HJ-NP-X]
/// Pos. 4, UTM False Easting   [0-9]
/// Pos. 5-9, UTM Meter Easting    [0-9][0-9][0-9][0-9][0-9]
/// Pos. 10-11, UTM False Northing    [0-9][0-9]
/// Pos. 12-16, UTM Meter Northing    [0-9][0-9][0-9][0-9][0-9].
/// Example: /// Example: 19P4390691376966
/// Constraints: Minimum length = 0, Maximum length = 16
/// Air Defense District (ADD) or Air Defense Area (ADA) in which the geographic coordinates reside.
/// Example: /// Example: AL006
/// Constraints: Minimum length = 0, Maximum length = 5
func (rcv *Equipment_Abridged) AirDefArea() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(78))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Air Defense District (ADD) or Air Defense Area (ADA) in which the geographic coordinates reside.
/// Example: /// Example: AL006
/// Constraints: Minimum length = 0, Maximum length = 5
/// Political subdivision in which the geographic coordinates reside. The specific usage and enumerations contained in this field may be found in the documentation provided in the referenceDoc field.  If referenceDoc not provided, users may consult the data provider.
/// Example: /// Example: IZ07
/// Constraints: Minimum length = 0, Maximum length = 7
func (rcv *Equipment_Abridged) PolSubdiv() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(80))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Political subdivision in which the geographic coordinates reside. The specific usage and enumerations contained in this field may be found in the documentation provided in the referenceDoc field.  If referenceDoc not provided, users may consult the data provider.
/// Example: /// Example: IZ07
/// Constraints: Minimum length = 0, Maximum length = 7
/// Relative to the parent entity, the total number of military personnel or equipment assessed to be on-hand (OH).
/// Example: /// Example: 7
/// Constraints: No constraints specified.
func (rcv *Equipment_Abridged) QtyOh() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(82))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

/// Relative to the parent entity, the total number of military personnel or equipment assessed to be on-hand (OH).
/// Example: /// Example: 7
/// Constraints: No constraints specified.
func (rcv *Equipment_Abridged) MutateQtyOh(n int32) bool {
	return rcv._tab.MutateInt32Slot(82, n)
}

/// A standard scheme for symbol coding enabling the transfer, display and use of symbols and graphics among information systems, as per MIL-STD 2525B, and supported by the element AFFILIATION.
/// Example: /// Example: SOGPU----------
/// Constraints: Minimum length = 0, Maximum length = 15
func (rcv *Equipment_Abridged) SymCode() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(84))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// A standard scheme for symbol coding enabling the transfer, display and use of symbols and graphics among information systems, as per MIL-STD 2525B, and supported by the element AFFILIATION.
/// Example: /// Example: SOGPU----------
/// Constraints: Minimum length = 0, Maximum length = 15
/// Indicates the importance of the equipment. Referenced, but not constrained to, the following class ratings type classifications.
/// 0 - Not of significant importance of the system
/// 1 - Primary importance to system
/// 2 - Secondary importance to system
/// 3 - Tertiary importance to system
/// O - Other. Explain in Remarks.
/// Example: /// Example: 1
/// Constraints: Minimum length = 0, Maximum length = 1
func (rcv *Equipment_Abridged) ClassRating() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(86))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Indicates the importance of the equipment. Referenced, but not constrained to, the following class ratings type classifications.
/// 0 - Not of significant importance of the system
/// 1 - Primary importance to system
/// 2 - Secondary importance to system
/// 3 - Tertiary importance to system
/// O - Other. Explain in Remarks.
/// Example: /// Example: 1
/// Constraints: Minimum length = 0, Maximum length = 1
/// Validity and currency of the data in the record to be used in conjunction with the other elements in the record as defined by SOPs. Referenced, but not constrained to, the following record status type classifications.
/// A - Active
/// I - Inactive
/// K - Acknowledged
/// L - Local
/// Q - A nominated (NOM) or Data Change Request (DCR) record
/// R - Production reduced by CMD decision
/// W - Working Record.
/// Example: /// Example: A
/// Constraints: Minimum length = 0, Maximum length = 1
func (rcv *Equipment_Abridged) RecStatus() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(88))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Validity and currency of the data in the record to be used in conjunction with the other elements in the record as defined by SOPs. Referenced, but not constrained to, the following record status type classifications.
/// A - Active
/// I - Inactive
/// K - Acknowledged
/// L - Local
/// Q - A nominated (NOM) or Data Change Request (DCR) record
/// R - Production reduced by CMD decision
/// W - Working Record.
/// Example: /// Example: A
/// Constraints: Minimum length = 0, Maximum length = 1
/// Date on which the data in the record was last reviewed by the responsible analyst for accuracy and currency.  This date cannot be greater than the current date.
/// Example: /// Example: 2008-06-10
/// Constraints: No constraints specified.
func (rcv *Equipment_Abridged) ReviewDate() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(90))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Date on which the data in the record was last reviewed by the responsible analyst for accuracy and currency.  This date cannot be greater than the current date.
/// Example: /// Example: 2008-06-10
/// Constraints: No constraints specified.
/// Responsible Producer - Organization that is responsible for the maintenance of the record.
/// Example: /// Example: RT
/// Constraints: Minimum length = 0, Maximum length = 4
func (rcv *Equipment_Abridged) ResProd() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(92))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Responsible Producer - Organization that is responsible for the maintenance of the record.
/// Example: /// Example: RT
/// Constraints: Minimum length = 0, Maximum length = 4
/// The reference documentiation that specifies the usage and enumerations contained in this record. If referenceDoc not provided, users may consult the data provider.
/// Example: /// Example: Provider Reference Documentation
/// Constraints: Minimum length = 0, Maximum length = 128
func (rcv *Equipment_Abridged) ReferenceDoc() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(94))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The reference documentiation that specifies the usage and enumerations contained in this record. If referenceDoc not provided, users may consult the data provider.
/// Example: /// Example: Provider Reference Documentation
/// Constraints: Minimum length = 0, Maximum length = 128
/// Array of UDL record types such as AIRCRAFT, VESSEL, EO, MTI that are related to this equipment record. See the associated 'srcIds' array for the record UUIDs, positionally corresponding to the record types in this array. The 'srcTyps' and 'srcIds' arrays must match in size.
/// Example: /// Example: ['AIRCRAFT']
/// Constraints: No constraints specified.
func (rcv *Equipment_Abridged) SrcTyps(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(96))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *Equipment_Abridged) SrcTypsLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(96))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

/// Array of UDL record types such as AIRCRAFT, VESSEL, EO, MTI that are related to this equipment record. See the associated 'srcIds' array for the record UUIDs, positionally corresponding to the record types in this array. The 'srcTyps' and 'srcIds' arrays must match in size.
/// Example: /// Example: ['AIRCRAFT']
/// Constraints: No constraints specified.
/// Array of UUID(s) of the UDL data record(s) that are related to this equipment record. See the associated 'srcTyps' array for the specific types of data, positionally corresponding to the UUIDs in this array. The 'srcTyps' and 'srcIds' arrays must match in size. See the corresponding srcTyps array element for the data type of the UUID and use the appropriate API operation to retrieve that object.
/// Example: /// Example: ['SRC_ID_1']
/// Constraints: No constraints specified.
func (rcv *Equipment_Abridged) SrcIds(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(98))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *Equipment_Abridged) SrcIdsLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(98))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

/// Array of UUID(s) of the UDL data record(s) that are related to this equipment record. See the associated 'srcTyps' array for the specific types of data, positionally corresponding to the UUIDs in this array. The 'srcTyps' and 'srcIds' arrays must match in size. See the corresponding srcTyps array element for the data type of the UUID and use the appropriate API operation to retrieve that object.
/// Example: /// Example: ['SRC_ID_1']
/// Constraints: No constraints specified.
/// Time the row was created in the database, auto-populated by the system.
/// Example: /// Example: 2018-01-01T16:00:00.123Z
/// Constraints: No constraints specified.
func (rcv *Equipment_Abridged) CreatedAt() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(100))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Time the row was created in the database, auto-populated by the system.
/// Example: /// Example: 2018-01-01T16:00:00.123Z
/// Constraints: No constraints specified.
/// Application user who created the row in the database, auto-populated by the system.
/// Example: /// Example: some.user
/// Constraints: Minimum length = 1, Maximum length = 64
func (rcv *Equipment_Abridged) CreatedBy() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(102))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Application user who created the row in the database, auto-populated by the system.
/// Example: /// Example: some.user
/// Constraints: Minimum length = 1, Maximum length = 64
/// Source of the data.
/// Example: /// Example: Bluestaq
/// Constraints: Minimum length = 1, Maximum length = 64
func (rcv *Equipment_Abridged) Source() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(104))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Source of the data.
/// Example: /// Example: Bluestaq
/// Constraints: Minimum length = 1, Maximum length = 64
/// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
/// Example: /// Example: THIRD_PARTY_DATASOURCE
/// Constraints: Minimum length = 0, Maximum length = 64
func (rcv *Equipment_Abridged) Origin() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(106))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
/// Example: /// Example: THIRD_PARTY_DATASOURCE
/// Constraints: Minimum length = 0, Maximum length = 64
/// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
/// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
/// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
/// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
/// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
/// Example: /// Example: TEST
/// Constraints: Minimum length = 1, Maximum length = 32
func (rcv *Equipment_Abridged) DataMode() Equipment_Abridged_dataMode_Enum {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(108))
	if o != 0 {
		return Equipment_Abridged_dataMode_Enum(rcv._tab.GetInt8(o + rcv._tab.Pos))
	}
	return 0
}

/// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
/// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
/// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
/// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
/// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
/// Example: /// Example: TEST
/// Constraints: Minimum length = 1, Maximum length = 32
func (rcv *Equipment_Abridged) MutateDataMode(n Equipment_Abridged_dataMode_Enum) bool {
	return rcv._tab.MutateInt8Slot(108, int8(n))
}

func Equipment_AbridgedStart(builder *flatbuffers.Builder) {
	builder.StartObject(53)
}
func Equipment_AbridgedAddId(builder *flatbuffers.Builder, id flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(id), 0)
}
func Equipment_AbridgedAddClassificationMarking(builder *flatbuffers.Builder, classificationMarking flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(classificationMarking), 0)
}
func Equipment_AbridgedAddIdParentEquipment(builder *flatbuffers.Builder, idParentEquipment flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(idParentEquipment), 0)
}
func Equipment_AbridgedAddIdSite(builder *flatbuffers.Builder, idSite flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(3, flatbuffers.UOffsetT(idSite), 0)
}
func Equipment_AbridgedAddIdOperatingUnit(builder *flatbuffers.Builder, idOperatingUnit flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(4, flatbuffers.UOffsetT(idOperatingUnit), 0)
}
func Equipment_AbridgedAddAltEqpId(builder *flatbuffers.Builder, altEqpId flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(5, flatbuffers.UOffsetT(altEqpId), 0)
}
func Equipment_AbridgedAddEqpCode(builder *flatbuffers.Builder, eqpCode flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(6, flatbuffers.UOffsetT(eqpCode), 0)
}
func Equipment_AbridgedAddEqpIdNum(builder *flatbuffers.Builder, eqpIdNum flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(7, flatbuffers.UOffsetT(eqpIdNum), 0)
}
func Equipment_AbridgedAddCountryCode(builder *flatbuffers.Builder, countryCode flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(8, flatbuffers.UOffsetT(countryCode), 0)
}
func Equipment_AbridgedAddAltCountryCode(builder *flatbuffers.Builder, altCountryCode flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(9, flatbuffers.UOffsetT(altCountryCode), 0)
}
func Equipment_AbridgedAddWac(builder *flatbuffers.Builder, wac flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(10, flatbuffers.UOffsetT(wac), 0)
}
func Equipment_AbridgedAddSeqNum(builder *flatbuffers.Builder, seqNum int32) {
	builder.PrependInt32Slot(11, seqNum, 0)
}
func Equipment_AbridgedAddNomen(builder *flatbuffers.Builder, nomen flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(12, flatbuffers.UOffsetT(nomen), 0)
}
func Equipment_AbridgedAddOperStatus(builder *flatbuffers.Builder, operStatus flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(13, flatbuffers.UOffsetT(operStatus), 0)
}
func Equipment_AbridgedAddCondition(builder *flatbuffers.Builder, condition flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(14, flatbuffers.UOffsetT(condition), 0)
}
func Equipment_AbridgedAddConditionAvail(builder *flatbuffers.Builder, conditionAvail flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(15, flatbuffers.UOffsetT(conditionAvail), 0)
}
func Equipment_AbridgedAddEval(builder *flatbuffers.Builder, eval int32) {
	builder.PrependInt32Slot(16, eval, 0)
}
func Equipment_AbridgedAddFpa(builder *flatbuffers.Builder, fpa flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(17, flatbuffers.UOffsetT(fpa), 0)
}
func Equipment_AbridgedAddFunction(builder *flatbuffers.Builder, function flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(18, flatbuffers.UOffsetT(function), 0)
}
func Equipment_AbridgedAddIdent(builder *flatbuffers.Builder, ident flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(19, flatbuffers.UOffsetT(ident), 0)
}
func Equipment_AbridgedAddAllegiance(builder *flatbuffers.Builder, allegiance flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(20, flatbuffers.UOffsetT(allegiance), 0)
}
func Equipment_AbridgedAddAltAllegiance(builder *flatbuffers.Builder, altAllegiance flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(21, flatbuffers.UOffsetT(altAllegiance), 0)
}
func Equipment_AbridgedAddLocReason(builder *flatbuffers.Builder, locReason flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(22, flatbuffers.UOffsetT(locReason), 0)
}
func Equipment_AbridgedAddOperAreaPrimary(builder *flatbuffers.Builder, operAreaPrimary flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(23, flatbuffers.UOffsetT(operAreaPrimary), 0)
}
func Equipment_AbridgedAddFunctPrimary(builder *flatbuffers.Builder, functPrimary flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(24, flatbuffers.UOffsetT(functPrimary), 0)
}
func Equipment_AbridgedAddCoordDatum(builder *flatbuffers.Builder, coordDatum flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(25, flatbuffers.UOffsetT(coordDatum), 0)
}
func Equipment_AbridgedAddCoord(builder *flatbuffers.Builder, coord flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(26, flatbuffers.UOffsetT(coord), 0)
}
func Equipment_AbridgedAddCoordDerivAcc(builder *flatbuffers.Builder, coordDerivAcc float64) {
	builder.PrependFloat64Slot(27, coordDerivAcc, 0.0)
}
func Equipment_AbridgedAddLat(builder *flatbuffers.Builder, lat float64) {
	builder.PrependFloat64Slot(28, lat, 0.0)
}
func Equipment_AbridgedAddLon(builder *flatbuffers.Builder, lon float64) {
	builder.PrependFloat64Slot(29, lon, 0.0)
}
func Equipment_AbridgedAddElevMsl(builder *flatbuffers.Builder, elevMsl float64) {
	builder.PrependFloat64Slot(30, elevMsl, 0.0)
}
func Equipment_AbridgedAddElevMslConfLvl(builder *flatbuffers.Builder, elevMslConfLvl int32) {
	builder.PrependInt32Slot(31, elevMslConfLvl, 0)
}
func Equipment_AbridgedAddElevMslDerivAcc(builder *flatbuffers.Builder, elevMslDerivAcc float64) {
	builder.PrependFloat64Slot(32, elevMslDerivAcc, 0.0)
}
func Equipment_AbridgedAddGeoidalMslSep(builder *flatbuffers.Builder, geoidalMslSep float64) {
	builder.PrependFloat64Slot(33, geoidalMslSep, 0.0)
}
func Equipment_AbridgedAddMilGridSys(builder *flatbuffers.Builder, milGridSys flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(34, flatbuffers.UOffsetT(milGridSys), 0)
}
func Equipment_AbridgedAddMilGrid(builder *flatbuffers.Builder, milGrid flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(35, flatbuffers.UOffsetT(milGrid), 0)
}
func Equipment_AbridgedAddUtm(builder *flatbuffers.Builder, utm flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(36, flatbuffers.UOffsetT(utm), 0)
}
func Equipment_AbridgedAddAirDefArea(builder *flatbuffers.Builder, airDefArea flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(37, flatbuffers.UOffsetT(airDefArea), 0)
}
func Equipment_AbridgedAddPolSubdiv(builder *flatbuffers.Builder, polSubdiv flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(38, flatbuffers.UOffsetT(polSubdiv), 0)
}
func Equipment_AbridgedAddQtyOh(builder *flatbuffers.Builder, qtyOh int32) {
	builder.PrependInt32Slot(39, qtyOh, 0)
}
func Equipment_AbridgedAddSymCode(builder *flatbuffers.Builder, symCode flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(40, flatbuffers.UOffsetT(symCode), 0)
}
func Equipment_AbridgedAddClassRating(builder *flatbuffers.Builder, classRating flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(41, flatbuffers.UOffsetT(classRating), 0)
}
func Equipment_AbridgedAddRecStatus(builder *flatbuffers.Builder, recStatus flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(42, flatbuffers.UOffsetT(recStatus), 0)
}
func Equipment_AbridgedAddReviewDate(builder *flatbuffers.Builder, reviewDate flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(43, flatbuffers.UOffsetT(reviewDate), 0)
}
func Equipment_AbridgedAddResProd(builder *flatbuffers.Builder, resProd flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(44, flatbuffers.UOffsetT(resProd), 0)
}
func Equipment_AbridgedAddReferenceDoc(builder *flatbuffers.Builder, referenceDoc flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(45, flatbuffers.UOffsetT(referenceDoc), 0)
}
func Equipment_AbridgedAddSrcTyps(builder *flatbuffers.Builder, srcTyps flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(46, flatbuffers.UOffsetT(srcTyps), 0)
}
func Equipment_AbridgedStartSrcTypsVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func Equipment_AbridgedAddSrcIds(builder *flatbuffers.Builder, srcIds flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(47, flatbuffers.UOffsetT(srcIds), 0)
}
func Equipment_AbridgedStartSrcIdsVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func Equipment_AbridgedAddCreatedAt(builder *flatbuffers.Builder, createdAt flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(48, flatbuffers.UOffsetT(createdAt), 0)
}
func Equipment_AbridgedAddCreatedBy(builder *flatbuffers.Builder, createdBy flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(49, flatbuffers.UOffsetT(createdBy), 0)
}
func Equipment_AbridgedAddSource(builder *flatbuffers.Builder, source flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(50, flatbuffers.UOffsetT(source), 0)
}
func Equipment_AbridgedAddOrigin(builder *flatbuffers.Builder, origin flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(51, flatbuffers.UOffsetT(origin), 0)
}
func Equipment_AbridgedAddDataMode(builder *flatbuffers.Builder, dataMode Equipment_Abridged_dataMode_Enum) {
	builder.PrependInt8Slot(52, int8(dataMode), 0)
}
func Equipment_AbridgedEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
