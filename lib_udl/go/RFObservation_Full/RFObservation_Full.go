// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package RFObservation_Full

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

/// /// Model representation of observation data for active/passive radio frequency (RF) based sensor phenomenologies. J2000 is the preferred coordinate frame for all observations, but in some cases observations may be in another frame depending on the provider. Please see the 'Discover' tab in the storefront to confirm coordinate frames by data provider. RF observations include several optional ordered arrays which are used to provide detailed information on recorded signals such as power spectral density lists or active signals (code taps/fills, etc). In these cases, the sizes of the arrays must match and can be assumed to have consistent indexing across arrays (e.g. powers[0] is the measured power at frequencies[0]).
type RFObservation_Full struct {
	_tab flatbuffers.Table
}

const RFObservation_FullIdentifier = "RFOB"

func GetRootAsRFObservation_Full(buf []byte, offset flatbuffers.UOffsetT) *RFObservation_Full {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &RFObservation_Full{}
	x.Init(buf, n+offset)
	return x
}

func FinishRFObservation_FullBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	identifierBytes := []byte(RFObservation_FullIdentifier)
	builder.FinishWithFileIdentifier(offset, identifierBytes)
}

func RFObservation_FullBufferHasIdentifier(buf []byte) bool {
	return flatbuffers.BufferHasIdentifier(buf, RFObservation_FullIdentifier)
}

func GetSizePrefixedRootAsRFObservation_Full(buf []byte, offset flatbuffers.UOffsetT) *RFObservation_Full {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &RFObservation_Full{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedRFObservation_FullBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	identifierBytes := []byte(RFObservation_FullIdentifier)
	builder.FinishSizePrefixedWithFileIdentifier(offset, identifierBytes)
}

func SizePrefixedRFObservation_FullBufferHasIdentifier(buf []byte) bool {
	return flatbuffers.SizePrefixedBufferHasIdentifier(buf, RFObservation_FullIdentifier)
}

func (rcv *RFObservation_Full) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *RFObservation_Full) Table() flatbuffers.Table {
	return rcv._tab
}

/// Unique identifier of the record, auto-generated by the system.
/// Example: /// Example: RFOBSERVATION-ID
/// Constraints: Minimum length = 1, Maximum length = 36
func (rcv *RFObservation_Full) Id() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Unique identifier of the record, auto-generated by the system.
/// Example: /// Example: RFOBSERVATION-ID
/// Constraints: Minimum length = 1, Maximum length = 36
/// Classification marking of the data in IC/CAPCO Portion-marked format.
/// Example: /// Example: U
/// Constraints: Minimum length = 1, Maximum length = 128
func (rcv *RFObservation_Full) ClassificationMarking() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Classification marking of the data in IC/CAPCO Portion-marked format.
/// Example: /// Example: U
/// Constraints: Minimum length = 1, Maximum length = 128
/// Ob detection time in ISO 8601 UTC with microsecond precision.
/// Example: /// Example: 2018-01-01T16:00:00.123456Z
/// Constraints: No constraints specified.
func (rcv *RFObservation_Full) ObTime() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Ob detection time in ISO 8601 UTC with microsecond precision.
/// Example: /// Example: 2018-01-01T16:00:00.123456Z
/// Constraints: No constraints specified.
/// Unique identifier of the target on-orbit object, if correlated.
/// Example: /// Example: ONORBIT-ID
/// Constraints: Minimum length = 0, Maximum length = 36
func (rcv *RFObservation_Full) IdOnOrbit() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Unique identifier of the target on-orbit object, if correlated.
/// Example: /// Example: ONORBIT-ID
/// Constraints: Minimum length = 0, Maximum length = 36
/// Unique identifier of the reporting sensor.
/// Example: /// Example: SENSOR-ID
/// Constraints: Minimum length = 0, Maximum length = 36
func (rcv *RFObservation_Full) IdSensor() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Unique identifier of the reporting sensor.
/// Example: /// Example: SENSOR-ID
/// Constraints: Minimum length = 0, Maximum length = 36
/// Type of RF ob (e.g. RF, RF-SOSI, PSD, RFI, SPOOF, etc).
/// Example: /// Example: RF
/// Constraints: Minimum length = 1, Maximum length = 32
func (rcv *RFObservation_Full) Type() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Type of RF ob (e.g. RF, RF-SOSI, PSD, RFI, SPOOF, etc).
/// Example: /// Example: RF
/// Constraints: Minimum length = 1, Maximum length = 32
/// Satellite/Catalog number of the target on-orbit object.
/// Example: /// Example: 32258
/// Constraints: No constraints specified.
func (rcv *RFObservation_Full) SatNo() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

/// Satellite/Catalog number of the target on-orbit object.
/// Example: /// Example: 32258
/// Constraints: No constraints specified.
func (rcv *RFObservation_Full) MutateSatNo(n int32) bool {
	return rcv._tab.MutateInt32Slot(16, n)
}

/// Optional identifier to indicate the specific tasking which produced this observation.
/// Example: /// Example: TASK-ID
/// Constraints: Minimum length = 0, Maximum length = 36
func (rcv *RFObservation_Full) TaskId() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(18))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Optional identifier to indicate the specific tasking which produced this observation.
/// Example: /// Example: TASK-ID
/// Constraints: Minimum length = 0, Maximum length = 36
/// Optional identifier to track a commercial or marketplace transaction executed to produce this data.
/// Example: /// Example: TRANSACTION-ID
/// Constraints: Minimum length = 0, Maximum length = 64
func (rcv *RFObservation_Full) TransactionId() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(20))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Optional identifier to track a commercial or marketplace transaction executed to produce this data.
/// Example: /// Example: TRANSACTION-ID
/// Constraints: Minimum length = 0, Maximum length = 64
/// Optional identifier of the track to which this observation belongs.
/// Example: /// Example: TRACK-ID
/// Constraints: Minimum length = 0, Maximum length = 36
func (rcv *RFObservation_Full) TrackId() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(22))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Optional identifier of the track to which this observation belongs.
/// Example: /// Example: TRACK-ID
/// Constraints: Minimum length = 0, Maximum length = 36
/// Optional identifier provided by observation source to indicate the target onorbit object of this observation. This may be an internal identifier and not necessarily a valid satellite number.
/// Example: /// Example: ORIG-OBJECT-ID
/// Constraints: Minimum length = 0, Maximum length = 64
func (rcv *RFObservation_Full) OrigObjectId() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(24))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Optional identifier provided by observation source to indicate the target onorbit object of this observation. This may be an internal identifier and not necessarily a valid satellite number.
/// Example: /// Example: ORIG-OBJECT-ID
/// Constraints: Minimum length = 0, Maximum length = 64
/// Optional identifier provided by observation source to indicate the sensor identifier which produced this observation. This may be an internal identifier and not necessarily a valid sensor ID.
/// Example: /// Example: ORIG-SENSOR-ID
/// Constraints: Minimum length = 0, Maximum length = 64
func (rcv *RFObservation_Full) OrigSensorId() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(26))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Optional identifier provided by observation source to indicate the sensor identifier which produced this observation. This may be an internal identifier and not necessarily a valid sensor ID.
/// Example: /// Example: ORIG-SENSOR-ID
/// Constraints: Minimum length = 0, Maximum length = 64
/// Boolean indicating this observation is part of an uncorrelated track or was unable to be correlated to a known object. This flag should only be set to true by data providers after an attempt to correlate to an on-orbit object was made and failed. If unable to correlate, the 'origObjectId' field may be populated with an internal data provider specific identifier.
/// Example: /// Example: False
/// Constraints: No constraints specified.
func (rcv *RFObservation_Full) Uct() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(28))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

/// Boolean indicating this observation is part of an uncorrelated track or was unable to be correlated to a known object. This flag should only be set to true by data providers after an attempt to correlate to an on-orbit object was made and failed. If unable to correlate, the 'origObjectId' field may be populated with an internal data provider specific identifier.
/// Example: /// Example: False
/// Constraints: No constraints specified.
func (rcv *RFObservation_Full) MutateUct(n bool) bool {
	return rcv._tab.MutateBoolSlot(28, n)
}

/// Optional identifier provided by observation source to indicate the transponder used for this measurement.
/// Example: /// Example: TRANSPONDER-A
/// Constraints: Minimum length = 0, Maximum length = 64
func (rcv *RFObservation_Full) Transponder() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(30))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Optional identifier provided by observation source to indicate the transponder used for this measurement.
/// Example: /// Example: TRANSPONDER-A
/// Constraints: Minimum length = 0, Maximum length = 64
/// azimuth angle in degrees and J2000 coordinate frame.
/// Example: /// Example: 10.1
/// Constraints: No constraints specified.
func (rcv *RFObservation_Full) Azimuth() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(32))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// azimuth angle in degrees and J2000 coordinate frame.
/// Example: /// Example: 10.1
/// Constraints: No constraints specified.
func (rcv *RFObservation_Full) MutateAzimuth(n float64) bool {
	return rcv._tab.MutateFloat64Slot(32, n)
}

/// One sigma uncertainty in the azimuth angle measurement, in degrees.
/// Example: /// Example: 2.1
/// Constraints: No constraints specified.
func (rcv *RFObservation_Full) AzimuthUnc() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(34))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// One sigma uncertainty in the azimuth angle measurement, in degrees.
/// Example: /// Example: 2.1
/// Constraints: No constraints specified.
func (rcv *RFObservation_Full) MutateAzimuthUnc(n float64) bool {
	return rcv._tab.MutateFloat64Slot(34, n)
}

/// Rate of change of the azimuth in degrees per second.
/// Example: /// Example: 1.1
/// Constraints: No constraints specified.
func (rcv *RFObservation_Full) AzimuthRate() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(36))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Rate of change of the azimuth in degrees per second.
/// Example: /// Example: 1.1
/// Constraints: No constraints specified.
func (rcv *RFObservation_Full) MutateAzimuthRate(n float64) bool {
	return rcv._tab.MutateFloat64Slot(36, n)
}

/// elevation in degrees and J2000 coordinate frame.
/// Example: /// Example: 10.1
/// Constraints: No constraints specified.
func (rcv *RFObservation_Full) Elevation() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(38))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// elevation in degrees and J2000 coordinate frame.
/// Example: /// Example: 10.1
/// Constraints: No constraints specified.
func (rcv *RFObservation_Full) MutateElevation(n float64) bool {
	return rcv._tab.MutateFloat64Slot(38, n)
}

/// One sigma uncertainty in the elevation angle measurement, in degrees.
/// Example: /// Example: 10.1
/// Constraints: No constraints specified.
func (rcv *RFObservation_Full) ElevationUnc() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(40))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// One sigma uncertainty in the elevation angle measurement, in degrees.
/// Example: /// Example: 10.1
/// Constraints: No constraints specified.
func (rcv *RFObservation_Full) MutateElevationUnc(n float64) bool {
	return rcv._tab.MutateFloat64Slot(40, n)
}

/// Rate of change of the elevation in degrees per second.
/// Example: /// Example: 10.1
/// Constraints: No constraints specified.
func (rcv *RFObservation_Full) ElevationRate() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(42))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Rate of change of the elevation in degrees per second.
/// Example: /// Example: 10.1
/// Constraints: No constraints specified.
func (rcv *RFObservation_Full) MutateElevationRate(n float64) bool {
	return rcv._tab.MutateFloat64Slot(42, n)
}

/// Target range in km.
/// Example: /// Example: 10.1
/// Constraints: No constraints specified.
func (rcv *RFObservation_Full) Range() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(44))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Target range in km.
/// Example: /// Example: 10.1
/// Constraints: No constraints specified.
func (rcv *RFObservation_Full) MutateRange(n float64) bool {
	return rcv._tab.MutateFloat64Slot(44, n)
}

/// One sigma uncertainty in the range measurement, in kilometers.
/// Example: /// Example: 10.1
/// Constraints: No constraints specified.
func (rcv *RFObservation_Full) RangeUnc() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(46))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// One sigma uncertainty in the range measurement, in kilometers.
/// Example: /// Example: 10.1
/// Constraints: No constraints specified.
func (rcv *RFObservation_Full) MutateRangeUnc(n float64) bool {
	return rcv._tab.MutateFloat64Slot(46, n)
}

/// Rate of change of the range in km/sec.
/// Example: /// Example: 10.1
/// Constraints: No constraints specified.
func (rcv *RFObservation_Full) RangeRate() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(48))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Rate of change of the range in km/sec.
/// Example: /// Example: 10.1
/// Constraints: No constraints specified.
func (rcv *RFObservation_Full) MutateRangeRate(n float64) bool {
	return rcv._tab.MutateFloat64Slot(48, n)
}

/// One sigma uncertainty in the range rate measurement, in kilometers/second.
/// Example: /// Example: 10.1
/// Constraints: No constraints specified.
func (rcv *RFObservation_Full) RangeRateUnc() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(50))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// One sigma uncertainty in the range rate measurement, in kilometers/second.
/// Example: /// Example: 10.1
/// Constraints: No constraints specified.
func (rcv *RFObservation_Full) MutateRangeRateUnc(n float64) bool {
	return rcv._tab.MutateFloat64Slot(50, n)
}

/// Target track or apparent range in km.
/// Example: /// Example: 10.1
/// Constraints: No constraints specified.
func (rcv *RFObservation_Full) TrackRange() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(52))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Target track or apparent range in km.
/// Example: /// Example: 10.1
/// Constraints: No constraints specified.
func (rcv *RFObservation_Full) MutateTrackRange(n float64) bool {
	return rcv._tab.MutateFloat64Slot(52, n)
}

/// Sensor WGS84 latitude at obTime (if mobile/onorbit) in degrees. If null, can be obtained from sensor info. -90 to 90 degrees (negative values south of equator).
/// Example: /// Example: 45.2
/// Constraints: No constraints specified.
func (rcv *RFObservation_Full) Senlat() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(54))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Sensor WGS84 latitude at obTime (if mobile/onorbit) in degrees. If null, can be obtained from sensor info. -90 to 90 degrees (negative values south of equator).
/// Example: /// Example: 45.2
/// Constraints: No constraints specified.
func (rcv *RFObservation_Full) MutateSenlat(n float64) bool {
	return rcv._tab.MutateFloat64Slot(54, n)
}

/// Sensor WGS84 longitude at obTime (if mobile/onorbit) in degrees. If null, can be obtained from sensor info. -180 to 180 degrees (negative values west of Prime Meridian).
/// Example: /// Example: 80.3
/// Constraints: No constraints specified.
func (rcv *RFObservation_Full) Senlon() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(56))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Sensor WGS84 longitude at obTime (if mobile/onorbit) in degrees. If null, can be obtained from sensor info. -180 to 180 degrees (negative values west of Prime Meridian).
/// Example: /// Example: 80.3
/// Constraints: No constraints specified.
func (rcv *RFObservation_Full) MutateSenlon(n float64) bool {
	return rcv._tab.MutateFloat64Slot(56, n)
}

/// Sensor altitude at obTime (if mobile/onorbit) in km. If null, can be obtained from sensor info.
/// Example: /// Example: 10.1
/// Constraints: No constraints specified.
func (rcv *RFObservation_Full) Senalt() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(58))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Sensor altitude at obTime (if mobile/onorbit) in km. If null, can be obtained from sensor info.
/// Example: /// Example: 10.1
/// Constraints: No constraints specified.
func (rcv *RFObservation_Full) MutateSenalt(n float64) bool {
	return rcv._tab.MutateFloat64Slot(58, n)
}

/// ELINT notation.
/// Example: /// Example: Ex. ELINT
/// Constraints: Minimum length = 0, Maximum length = 10
func (rcv *RFObservation_Full) Elnot() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(60))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// ELINT notation.
/// Example: /// Example: Ex. ELINT
/// Constraints: Minimum length = 0, Maximum length = 10
/// Center carrier frequency in Hz.
/// Example: /// Example: 10.1
/// Constraints: No constraints specified.
func (rcv *RFObservation_Full) Frequency() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(62))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Center carrier frequency in Hz.
/// Example: /// Example: 10.1
/// Constraints: No constraints specified.
func (rcv *RFObservation_Full) MutateFrequency(n float64) bool {
	return rcv._tab.MutateFloat64Slot(62, n)
}

/// Nominal or expected center carrier frequency in Hz.
/// Example: /// Example: 10.1
/// Constraints: No constraints specified.
func (rcv *RFObservation_Full) NominalFrequency() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(64))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Nominal or expected center carrier frequency in Hz.
/// Example: /// Example: 10.1
/// Constraints: No constraints specified.
func (rcv *RFObservation_Full) MutateNominalFrequency(n float64) bool {
	return rcv._tab.MutateFloat64Slot(64, n)
}

/// Start carrier frequency in Hz.
/// Example: /// Example: 10.1
/// Constraints: No constraints specified.
func (rcv *RFObservation_Full) StartFrequency() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(66))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Start carrier frequency in Hz.
/// Example: /// Example: 10.1
/// Constraints: No constraints specified.
func (rcv *RFObservation_Full) MutateStartFrequency(n float64) bool {
	return rcv._tab.MutateFloat64Slot(66, n)
}

/// End carrier frequency in Hz.
/// Example: /// Example: 10.1
/// Constraints: No constraints specified.
func (rcv *RFObservation_Full) EndFrequency() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(68))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// End carrier frequency in Hz.
/// Example: /// Example: 10.1
/// Constraints: No constraints specified.
func (rcv *RFObservation_Full) MutateEndFrequency(n float64) bool {
	return rcv._tab.MutateFloat64Slot(68, n)
}

/// Measured power of the center carrier frequency in dBW.
/// Example: /// Example: 10.1
/// Constraints: No constraints specified.
func (rcv *RFObservation_Full) RelativeCarrierPower() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(70))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Measured power of the center carrier frequency in dBW.
/// Example: /// Example: 10.1
/// Constraints: No constraints specified.
func (rcv *RFObservation_Full) MutateRelativeCarrierPower(n float64) bool {
	return rcv._tab.MutateFloat64Slot(70, n)
}

/// Measured spectrum analyzer power of the center carrier frequency in dBW.
/// Example: /// Example: 10.1
/// Constraints: No constraints specified.
func (rcv *RFObservation_Full) SpectrumAnalyzerPower() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(72))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Measured spectrum analyzer power of the center carrier frequency in dBW.
/// Example: /// Example: 10.1
/// Constraints: No constraints specified.
func (rcv *RFObservation_Full) MutateSpectrumAnalyzerPower(n float64) bool {
	return rcv._tab.MutateFloat64Slot(72, n)
}

/// The measure of the signal created from the sum of all the noise sources and unwanted signals within the measurement system, in dBW.
/// Example: /// Example: 10.1
/// Constraints: No constraints specified.
func (rcv *RFObservation_Full) RelativeNoiseFloor() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(74))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// The measure of the signal created from the sum of all the noise sources and unwanted signals within the measurement system, in dBW.
/// Example: /// Example: 10.1
/// Constraints: No constraints specified.
func (rcv *RFObservation_Full) MutateRelativeNoiseFloor(n float64) bool {
	return rcv._tab.MutateFloat64Slot(74, n)
}

/// Reference signal level, in dBW.
/// Example: /// Example: 10.1
/// Constraints: No constraints specified.
func (rcv *RFObservation_Full) ReferenceLevel() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(76))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Reference signal level, in dBW.
/// Example: /// Example: 10.1
/// Constraints: No constraints specified.
func (rcv *RFObservation_Full) MutateReferenceLevel(n float64) bool {
	return rcv._tab.MutateFloat64Slot(76, n)
}

/// A pulse group repetition interval (PGRI) is a pulse train in which there are groups of closely spaced pulses separated by much longer times between these pulse groups.
/// Example: /// Example: 10.1
/// Constraints: No constraints specified.
func (rcv *RFObservation_Full) Pgri() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(78))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// A pulse group repetition interval (PGRI) is a pulse train in which there are groups of closely spaced pulses separated by much longer times between these pulse groups.
/// Example: /// Example: 10.1
/// Constraints: No constraints specified.
func (rcv *RFObservation_Full) MutatePgri(n float64) bool {
	return rcv._tab.MutateFloat64Slot(78, n)
}

/// Confidence in the signal and its measurements and characterization.
/// Example: /// Example: 10.1
/// Constraints: No constraints specified.
func (rcv *RFObservation_Full) Confidence() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(80))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Confidence in the signal and its measurements and characterization.
/// Example: /// Example: 10.1
/// Constraints: No constraints specified.
func (rcv *RFObservation_Full) MutateConfidence(n float64) bool {
	return rcv._tab.MutateFloat64Slot(80, n)
}

/// True if the signal is incoming, false if outgoing.
/// Example: /// Example: False
/// Constraints: No constraints specified.
func (rcv *RFObservation_Full) Incoming() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(82))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

/// True if the signal is incoming, false if outgoing.
/// Example: /// Example: False
/// Constraints: No constraints specified.
func (rcv *RFObservation_Full) MutateIncoming(n bool) bool {
	return rcv._tab.MutateBoolSlot(82, n)
}

/// Switch Point of the RFObservation record.
/// Example: /// Example: 10
/// Constraints: No constraints specified.
func (rcv *RFObservation_Full) SwitchPoint() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(84))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

/// Switch Point of the RFObservation record.
/// Example: /// Example: 10
/// Constraints: No constraints specified.
func (rcv *RFObservation_Full) MutateSwitchPoint(n int32) bool {
	return rcv._tab.MutateInt32Slot(84, n)
}

/// Baud rate is the number of symbol changes, waveform changes, or signaling events, across the transmission medium per second.
/// Example: /// Example: 10.1
/// Constraints: No constraints specified.
func (rcv *RFObservation_Full) BaudRate() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(86))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Baud rate is the number of symbol changes, waveform changes, or signaling events, across the transmission medium per second.
/// Example: /// Example: 10.1
/// Constraints: No constraints specified.
func (rcv *RFObservation_Full) MutateBaudRate(n float64) bool {
	return rcv._tab.MutateFloat64Slot(86, n)
}

/// Signal to noise ratio, in dB.
/// Example: /// Example: 10.1
/// Constraints: No constraints specified.
func (rcv *RFObservation_Full) Snr() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(88))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Signal to noise ratio, in dB.
/// Example: /// Example: 10.1
/// Constraints: No constraints specified.
func (rcv *RFObservation_Full) MutateSnr(n float64) bool {
	return rcv._tab.MutateFloat64Slot(88, n)
}

/// Nominal or expected signal to noise ratio, in dB.
/// Example: /// Example: 10.1
/// Constraints: No constraints specified.
func (rcv *RFObservation_Full) NominalSnr() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(90))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Nominal or expected signal to noise ratio, in dB.
/// Example: /// Example: 10.1
/// Constraints: No constraints specified.
func (rcv *RFObservation_Full) MutateNominalSnr(n float64) bool {
	return rcv._tab.MutateFloat64Slot(90, n)
}

/// The antenna pointing dependent polarizer angle, in degrees.
/// Example: /// Example: 10.1
/// Constraints: No constraints specified.
func (rcv *RFObservation_Full) Polarity() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(92))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// The antenna pointing dependent polarizer angle, in degrees.
/// Example: /// Example: 10.1
/// Constraints: No constraints specified.
func (rcv *RFObservation_Full) MutatePolarity(n float64) bool {
	return rcv._tab.MutateFloat64Slot(92, n)
}

/// Transponder polarization e.g. H - (Horizontally Polarized) Perpendicular to Earth's surface, V - (Vertically Polarized) Parallel to Earth's surface, L - (Left Hand Circularly Polarized) Rotating left relative to the earth's surface, R - (Right Hand Circularly Polarized) Rotating right relative to the earth's surface.
/// Example: /// Example: H
/// Constraints: Minimum length = 0, Maximum length = 16
func (rcv *RFObservation_Full) PolarityType() RFObservation_Full_polarityType_Enum {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(94))
	if o != 0 {
		return RFObservation_Full_polarityType_Enum(rcv._tab.GetInt8(o + rcv._tab.Pos))
	}
	return 0
}

/// Transponder polarization e.g. H - (Horizontally Polarized) Perpendicular to Earth's surface, V - (Vertically Polarized) Parallel to Earth's surface, L - (Left Hand Circularly Polarized) Rotating left relative to the earth's surface, R - (Right Hand Circularly Polarized) Rotating right relative to the earth's surface.
/// Example: /// Example: H
/// Constraints: Minimum length = 0, Maximum length = 16
func (rcv *RFObservation_Full) MutatePolarityType(n RFObservation_Full_polarityType_Enum) bool {
	return rcv._tab.MutateInt8Slot(94, int8(n))
}

/// Channel of the RFObservation record.
/// Example: /// Example: 10
/// Constraints: No constraints specified.
func (rcv *RFObservation_Full) Channel() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(96))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

/// Channel of the RFObservation record.
/// Example: /// Example: 10
/// Constraints: No constraints specified.
func (rcv *RFObservation_Full) MutateChannel(n int32) bool {
	return rcv._tab.MutateInt32Slot(96, n)
}

/// Measured carrier power over noise (dBW/Hz).
/// Example: /// Example: 10.1
/// Constraints: No constraints specified.
func (rcv *RFObservation_Full) PowerOverNoise() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(98))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Measured carrier power over noise (dBW/Hz).
/// Example: /// Example: 10.1
/// Constraints: No constraints specified.
func (rcv *RFObservation_Full) MutatePowerOverNoise(n float64) bool {
	return rcv._tab.MutateFloat64Slot(98, n)
}

/// Expected carrier power over noise (dBW/Hz).
/// Example: /// Example: 10.1
/// Constraints: No constraints specified.
func (rcv *RFObservation_Full) NominalPowerOverNoise() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(100))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Expected carrier power over noise (dBW/Hz).
/// Example: /// Example: 10.1
/// Constraints: No constraints specified.
func (rcv *RFObservation_Full) MutateNominalPowerOverNoise(n float64) bool {
	return rcv._tab.MutateFloat64Slot(100, n)
}

/// Measured bandwidth in Hz.
/// Example: /// Example: 10.1
/// Constraints: No constraints specified.
func (rcv *RFObservation_Full) Bandwidth() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(102))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Measured bandwidth in Hz.
/// Example: /// Example: 10.1
/// Constraints: No constraints specified.
func (rcv *RFObservation_Full) MutateBandwidth(n float64) bool {
	return rcv._tab.MutateFloat64Slot(102, n)
}

/// Expected bandwidth in Hz.
/// Example: /// Example: 10.1
/// Constraints: No constraints specified.
func (rcv *RFObservation_Full) NominalBandwidth() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(104))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Expected bandwidth in Hz.
/// Example: /// Example: 10.1
/// Constraints: No constraints specified.
func (rcv *RFObservation_Full) MutateNominalBandwidth(n float64) bool {
	return rcv._tab.MutateFloat64Slot(104, n)
}

/// Resolution bandwidth in Hz.
/// Example: /// Example: 10.1
/// Constraints: No constraints specified.
func (rcv *RFObservation_Full) ResolutionBandwidth() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(106))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Resolution bandwidth in Hz.
/// Example: /// Example: 10.1
/// Constraints: No constraints specified.
func (rcv *RFObservation_Full) MutateResolutionBandwidth(n float64) bool {
	return rcv._tab.MutateFloat64Slot(106, n)
}

/// Video bandwidth in Hz.
/// Example: /// Example: 10.1
/// Constraints: No constraints specified.
func (rcv *RFObservation_Full) VideoBandwidth() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(108))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Video bandwidth in Hz.
/// Example: /// Example: 10.1
/// Constraints: No constraints specified.
func (rcv *RFObservation_Full) MutateVideoBandwidth(n float64) bool {
	return rcv._tab.MutateFloat64Slot(108, n)
}

/// Measured Equivalent Isotopically Radiated Power in dBW.
/// Example: /// Example: 10.1
/// Constraints: No constraints specified.
func (rcv *RFObservation_Full) Eirp() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(110))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Measured Equivalent Isotopically Radiated Power in dBW.
/// Example: /// Example: 10.1
/// Constraints: No constraints specified.
func (rcv *RFObservation_Full) MutateEirp(n float64) bool {
	return rcv._tab.MutateFloat64Slot(110, n)
}

/// Expected Equivalent Isotopically Radiated Power in dBW.
/// Example: /// Example: 10.1
/// Constraints: No constraints specified.
func (rcv *RFObservation_Full) NominalEirp() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(112))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Expected Equivalent Isotopically Radiated Power in dBW.
/// Example: /// Example: 10.1
/// Constraints: No constraints specified.
func (rcv *RFObservation_Full) MutateNominalEirp(n float64) bool {
	return rcv._tab.MutateFloat64Slot(112, n)
}

/// Minimum measured PSD value of the trace in dBW.
/// Example: /// Example: 10.1
/// Constraints: No constraints specified.
func (rcv *RFObservation_Full) MinPsd() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(114))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Minimum measured PSD value of the trace in dBW.
/// Example: /// Example: 10.1
/// Constraints: No constraints specified.
func (rcv *RFObservation_Full) MutateMinPsd(n float64) bool {
	return rcv._tab.MutateFloat64Slot(114, n)
}

/// Maximum measured PSD value of the trace in dBW.
/// Example: /// Example: 10.1
/// Constraints: No constraints specified.
func (rcv *RFObservation_Full) MaxPsd() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(116))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Maximum measured PSD value of the trace in dBW.
/// Example: /// Example: 10.1
/// Constraints: No constraints specified.
func (rcv *RFObservation_Full) MutateMaxPsd(n float64) bool {
	return rcv._tab.MutateFloat64Slot(116, n)
}

/// Frequency Shift of the RFObservation record.
/// Example: /// Example: 10.1
/// Constraints: No constraints specified.
func (rcv *RFObservation_Full) FrequencyShift() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(118))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Frequency Shift of the RFObservation record.
/// Example: /// Example: 10.1
/// Constraints: No constraints specified.
func (rcv *RFObservation_Full) MutateFrequencyShift(n float64) bool {
	return rcv._tab.MutateFloat64Slot(118, n)
}

/// Peak of the RFObservation record.
/// Example: /// Example: False
/// Constraints: No constraints specified.
func (rcv *RFObservation_Full) Peak() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(120))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

/// Peak of the RFObservation record.
/// Example: /// Example: False
/// Constraints: No constraints specified.
func (rcv *RFObservation_Full) MutatePeak(n bool) bool {
	return rcv._tab.MutateBoolSlot(120, n)
}

/// Antenna name of the RFObservation record.
/// Example: /// Example: Antenna1
/// Constraints: Minimum length = 0, Maximum length = 64
func (rcv *RFObservation_Full) AntennaName() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(122))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Antenna name of the RFObservation record.
/// Example: /// Example: Antenna1
/// Constraints: Minimum length = 0, Maximum length = 64
/// Detection status (e.g. DETECTED, CARRIER_ACQUIRING, CARRIER_DETECTED, NOT_DETECTED, etc).
/// Example: /// Example: DETECTED
/// Constraints: Minimum length = 0, Maximum length = 32
func (rcv *RFObservation_Full) DetectionStatus() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(124))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Detection status (e.g. DETECTED, CARRIER_ACQUIRING, CARRIER_DETECTED, NOT_DETECTED, etc).
/// Example: /// Example: DETECTED
/// Constraints: Minimum length = 0, Maximum length = 32
/// Collection mode (e.g. SURVEY, SPOT_SEARCH, NEIGHBORHOOD_WATCH, DIRECTED_SEARCH, MANUAL, etc).
/// Example: /// Example: SURVEY
/// Constraints: Minimum length = 0, Maximum length = 32
func (rcv *RFObservation_Full) CollectionMode() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(126))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Collection mode (e.g. SURVEY, SPOT_SEARCH, NEIGHBORHOOD_WATCH, DIRECTED_SEARCH, MANUAL, etc).
/// Example: /// Example: SURVEY
/// Constraints: Minimum length = 0, Maximum length = 32
/// Optional URI location in the document repository of the raw file parsed by the system to produce this record. To download the raw file, prepend https://udl-hostname/scs/download?id= to this value.
/// Example: /// Example: Example URI
/// Constraints: Minimum length = 0, Maximum length = 256
func (rcv *RFObservation_Full) RawFileUri() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(128))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Optional URI location in the document repository of the raw file parsed by the system to produce this record. To download the raw file, prepend https://udl-hostname/scs/download?id= to this value.
/// Example: /// Example: Example URI
/// Constraints: Minimum length = 0, Maximum length = 256
/// Source of the data.
/// Example: /// Example: Bluestaq
/// Constraints: Minimum length = 1, Maximum length = 64
func (rcv *RFObservation_Full) Source() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(130))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Source of the data.
/// Example: /// Example: Bluestaq
/// Constraints: Minimum length = 1, Maximum length = 64
/// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
/// Example: /// Example: THIRD_PARTY_DATASOURCE
/// Constraints: Minimum length = 0, Maximum length = 64
func (rcv *RFObservation_Full) Origin() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(132))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
/// Example: /// Example: THIRD_PARTY_DATASOURCE
/// Constraints: Minimum length = 0, Maximum length = 64
/// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
/// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
/// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
/// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
/// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
/// Example: /// Example: TEST
/// Constraints: Minimum length = 1, Maximum length = 32
func (rcv *RFObservation_Full) DataMode() RFObservation_Full_dataMode_Enum {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(134))
	if o != 0 {
		return RFObservation_Full_dataMode_Enum(rcv._tab.GetInt8(o + rcv._tab.Pos))
	}
	return 0
}

/// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
/// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
/// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
/// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
/// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
/// Example: /// Example: TEST
/// Constraints: Minimum length = 1, Maximum length = 32
func (rcv *RFObservation_Full) MutateDataMode(n RFObservation_Full_dataMode_Enum) bool {
	return rcv._tab.MutateInt8Slot(134, int8(n))
}

/// Optional array of provider/source specific tags for this data, where each element is no longer than 32 characters, used for implementing data owner conditional access controls to restrict access to the data. Should be left null by data providers unless conditional access controls are coordinated with the UDL team.
/// Example: /// Example: ['PROVIDER_TAG1', 'PROVIDER_TAG2']
/// Constraints: No constraints specified.
func (rcv *RFObservation_Full) Tags(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(136))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *RFObservation_Full) TagsLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(136))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

/// Optional array of provider/source specific tags for this data, where each element is no longer than 32 characters, used for implementing data owner conditional access controls to restrict access to the data. Should be left null by data providers unless conditional access controls are coordinated with the UDL team.
/// Example: /// Example: ['PROVIDER_TAG1', 'PROVIDER_TAG2']
/// Constraints: No constraints specified.
/// Time the row was created in the database, auto-populated by the system.
/// Example: /// Example: 2018-01-01T16:00:00.123Z
/// Constraints: No constraints specified.
func (rcv *RFObservation_Full) CreatedAt() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(138))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Time the row was created in the database, auto-populated by the system.
/// Example: /// Example: 2018-01-01T16:00:00.123Z
/// Constraints: No constraints specified.
/// Application user who created the row in the database, auto-populated by the system.
/// Example: /// Example: some.user
/// Constraints: Minimum length = 1, Maximum length = 64
func (rcv *RFObservation_Full) CreatedBy() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(140))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Application user who created the row in the database, auto-populated by the system.
/// Example: /// Example: some.user
/// Constraints: Minimum length = 1, Maximum length = 64
/// Noise power density, in dBW-Hz.
/// Example: /// Example: 10.1
/// Constraints: No constraints specified.
func (rcv *RFObservation_Full) NoisePwrDensity() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(142))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Noise power density, in dBW-Hz.
/// Example: /// Example: 10.1
/// Constraints: No constraints specified.
func (rcv *RFObservation_Full) MutateNoisePwrDensity(n float64) bool {
	return rcv._tab.MutateFloat64Slot(142, n)
}

/// Carrier standard (e.g. DVB-S2, 802.11g, etc.).
/// Example: /// Example: DVB-S2
/// Constraints: Minimum length = 0, Maximum length = 10
func (rcv *RFObservation_Full) CarrierStandard() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(144))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Carrier standard (e.g. DVB-S2, 802.11g, etc.).
/// Example: /// Example: DVB-S2
/// Constraints: Minimum length = 0, Maximum length = 10
/// Transponder modulation (e.g. Auto, QPSK, 8PSK, etc).
/// Example: /// Example: Auto
/// Constraints: Minimum length = 0, Maximum length = 10
func (rcv *RFObservation_Full) Modulation() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(146))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Transponder modulation (e.g. Auto, QPSK, 8PSK, etc).
/// Example: /// Example: Auto
/// Constraints: Minimum length = 0, Maximum length = 10
/// Inner forward error correction rate:  0 = Auto, 1 = 1/2, 2 = 2/3, 3 = 3/4, 4 = 5/6, 5 = 7/8, 6 = 8/9, 7 = 3/5, 8 = 4/5, 9 = 9/10, 15 = None.
/// Example: /// Example: 7
/// Constraints: No constraints specified.
func (rcv *RFObservation_Full) InnerCodingRate() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(148))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

/// Inner forward error correction rate:  0 = Auto, 1 = 1/2, 2 = 2/3, 3 = 3/4, 4 = 5/6, 5 = 7/8, 6 = 8/9, 7 = 3/5, 8 = 4/5, 9 = 9/10, 15 = None.
/// Example: /// Example: 7
/// Constraints: No constraints specified.
func (rcv *RFObservation_Full) MutateInnerCodingRate(n int32) bool {
	return rcv._tab.MutateInt32Slot(148, n)
}

/// Outer forward error correction rate:  0 = Auto, 1 = 1/2, 2 = 2/3, 3 = 3/4, 4 = 5/6, 5 = 7/8, 6 = 8/9, 7 = 3/5, 8 = 4/5, 9 = 9/10, 15 = None.
/// Example: /// Example: 4
/// Constraints: No constraints specified.
func (rcv *RFObservation_Full) OuterCodingRate() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(150))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

/// Outer forward error correction rate:  0 = Auto, 1 = 1/2, 2 = 2/3, 3 = 3/4, 4 = 5/6, 5 = 7/8, 6 = 8/9, 7 = 3/5, 8 = 4/5, 9 = 9/10, 15 = None.
/// Example: /// Example: 4
/// Constraints: No constraints specified.
func (rcv *RFObservation_Full) MutateOuterCodingRate(n int32) bool {
	return rcv._tab.MutateInt32Slot(150, n)
}

/// Transmit pulse shaping filter typ (e.g. RRC).
/// Example: /// Example: RRC
/// Constraints: Minimum length = 0, Maximum length = 10
func (rcv *RFObservation_Full) TransmitFilterType() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(152))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Transmit pulse shaping filter typ (e.g. RRC).
/// Example: /// Example: RRC
/// Constraints: Minimum length = 0, Maximum length = 10
/// Transmit pulse shaping filter roll-off value.
/// Example: /// Example: 10.1
/// Constraints: No constraints specified.
func (rcv *RFObservation_Full) TransmitFilterRollOff() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(154))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Transmit pulse shaping filter roll-off value.
/// Example: /// Example: 10.1
/// Constraints: No constraints specified.
func (rcv *RFObservation_Full) MutateTransmitFilterRollOff(n float64) bool {
	return rcv._tab.MutateFloat64Slot(154, n)
}

/// Symbol to noise ratio, in dB.
/// Example: /// Example: 10.1
/// Constraints: No constraints specified.
func (rcv *RFObservation_Full) SymbolToNoiseRatio() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(156))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Symbol to noise ratio, in dB.
/// Example: /// Example: 10.1
/// Constraints: No constraints specified.
func (rcv *RFObservation_Full) MutateSymbolToNoiseRatio(n float64) bool {
	return rcv._tab.MutateFloat64Slot(156, n)
}

/// The ratio of bit errors per number of received bits.
/// Example: /// Example: 10.1
/// Constraints: No constraints specified.
func (rcv *RFObservation_Full) BitErrorRate() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(158))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// The ratio of bit errors per number of received bits.
/// Example: /// Example: 10.1
/// Constraints: No constraints specified.
func (rcv *RFObservation_Full) MutateBitErrorRate(n float64) bool {
	return rcv._tab.MutateFloat64Slot(158, n)
}

/// The originating source network on which this record was created, auto-populated by the system.
/// Example: /// Example: ORIG
/// Constraints: Minimum length = 1, Maximum length = 32
func (rcv *RFObservation_Full) OrigNetwork() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(160))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The originating source network on which this record was created, auto-populated by the system.
/// Example: /// Example: ORIG
/// Constraints: Minimum length = 1, Maximum length = 32
/// The source data library from which this record was received. This could be a remote or tactical UDL or another data library. If null, the record should be assumed to have originated from the primary Enterprise UDL.
/// Example: /// Example: AXE
/// Constraints: Minimum length = 0, Maximum length = 64
func (rcv *RFObservation_Full) SourceDl() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(162))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The source data library from which this record was received. This could be a remote or tactical UDL or another data library. If null, the record should be assumed to have originated from the primary Enterprise UDL.
/// Example: /// Example: AXE
/// Constraints: Minimum length = 0, Maximum length = 64
/// No description provided.
/// Example: /// Example: No example provided.
/// Constraints: No constraints specified.
func (rcv *RFObservation_Full) OnOrbit() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(164))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// No description provided.
/// Example: /// Example: No example provided.
/// Constraints: No constraints specified.
/// Optional source-provided and searchable metadata or descriptor of the data.
/// Example: /// Example: descriptor
/// Constraints: Minimum length = 0, Maximum length = 64
func (rcv *RFObservation_Full) Descriptor() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(166))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Optional source-provided and searchable metadata or descriptor of the data.
/// Example: /// Example: descriptor
/// Constraints: Minimum length = 0, Maximum length = 64
/// Optional URL containing additional information on this observation.
/// Example: /// Example: https://some-url
/// Constraints: Minimum length = 0, Maximum length = 2048
func (rcv *RFObservation_Full) Url() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(168))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Optional URL containing additional information on this observation.
/// Example: /// Example: https://some-url
/// Constraints: Minimum length = 0, Maximum length = 2048
func RFObservation_FullStart(builder *flatbuffers.Builder) {
	builder.StartObject(83)
}
func RFObservation_FullAddId(builder *flatbuffers.Builder, id flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(id), 0)
}
func RFObservation_FullAddClassificationMarking(builder *flatbuffers.Builder, classificationMarking flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(classificationMarking), 0)
}
func RFObservation_FullAddObTime(builder *flatbuffers.Builder, obTime flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(obTime), 0)
}
func RFObservation_FullAddIdOnOrbit(builder *flatbuffers.Builder, idOnOrbit flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(3, flatbuffers.UOffsetT(idOnOrbit), 0)
}
func RFObservation_FullAddIdSensor(builder *flatbuffers.Builder, idSensor flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(4, flatbuffers.UOffsetT(idSensor), 0)
}
func RFObservation_FullAddType(builder *flatbuffers.Builder, type_ flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(5, flatbuffers.UOffsetT(type_), 0)
}
func RFObservation_FullAddSatNo(builder *flatbuffers.Builder, satNo int32) {
	builder.PrependInt32Slot(6, satNo, 0)
}
func RFObservation_FullAddTaskId(builder *flatbuffers.Builder, taskId flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(7, flatbuffers.UOffsetT(taskId), 0)
}
func RFObservation_FullAddTransactionId(builder *flatbuffers.Builder, transactionId flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(8, flatbuffers.UOffsetT(transactionId), 0)
}
func RFObservation_FullAddTrackId(builder *flatbuffers.Builder, trackId flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(9, flatbuffers.UOffsetT(trackId), 0)
}
func RFObservation_FullAddOrigObjectId(builder *flatbuffers.Builder, origObjectId flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(10, flatbuffers.UOffsetT(origObjectId), 0)
}
func RFObservation_FullAddOrigSensorId(builder *flatbuffers.Builder, origSensorId flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(11, flatbuffers.UOffsetT(origSensorId), 0)
}
func RFObservation_FullAddUct(builder *flatbuffers.Builder, uct bool) {
	builder.PrependBoolSlot(12, uct, false)
}
func RFObservation_FullAddTransponder(builder *flatbuffers.Builder, transponder flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(13, flatbuffers.UOffsetT(transponder), 0)
}
func RFObservation_FullAddAzimuth(builder *flatbuffers.Builder, azimuth float64) {
	builder.PrependFloat64Slot(14, azimuth, 0.0)
}
func RFObservation_FullAddAzimuthUnc(builder *flatbuffers.Builder, azimuthUnc float64) {
	builder.PrependFloat64Slot(15, azimuthUnc, 0.0)
}
func RFObservation_FullAddAzimuthRate(builder *flatbuffers.Builder, azimuthRate float64) {
	builder.PrependFloat64Slot(16, azimuthRate, 0.0)
}
func RFObservation_FullAddElevation(builder *flatbuffers.Builder, elevation float64) {
	builder.PrependFloat64Slot(17, elevation, 0.0)
}
func RFObservation_FullAddElevationUnc(builder *flatbuffers.Builder, elevationUnc float64) {
	builder.PrependFloat64Slot(18, elevationUnc, 0.0)
}
func RFObservation_FullAddElevationRate(builder *flatbuffers.Builder, elevationRate float64) {
	builder.PrependFloat64Slot(19, elevationRate, 0.0)
}
func RFObservation_FullAddRange(builder *flatbuffers.Builder, range_ float64) {
	builder.PrependFloat64Slot(20, range_, 0.0)
}
func RFObservation_FullAddRangeUnc(builder *flatbuffers.Builder, rangeUnc float64) {
	builder.PrependFloat64Slot(21, rangeUnc, 0.0)
}
func RFObservation_FullAddRangeRate(builder *flatbuffers.Builder, rangeRate float64) {
	builder.PrependFloat64Slot(22, rangeRate, 0.0)
}
func RFObservation_FullAddRangeRateUnc(builder *flatbuffers.Builder, rangeRateUnc float64) {
	builder.PrependFloat64Slot(23, rangeRateUnc, 0.0)
}
func RFObservation_FullAddTrackRange(builder *flatbuffers.Builder, trackRange float64) {
	builder.PrependFloat64Slot(24, trackRange, 0.0)
}
func RFObservation_FullAddSenlat(builder *flatbuffers.Builder, senlat float64) {
	builder.PrependFloat64Slot(25, senlat, 0.0)
}
func RFObservation_FullAddSenlon(builder *flatbuffers.Builder, senlon float64) {
	builder.PrependFloat64Slot(26, senlon, 0.0)
}
func RFObservation_FullAddSenalt(builder *flatbuffers.Builder, senalt float64) {
	builder.PrependFloat64Slot(27, senalt, 0.0)
}
func RFObservation_FullAddElnot(builder *flatbuffers.Builder, elnot flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(28, flatbuffers.UOffsetT(elnot), 0)
}
func RFObservation_FullAddFrequency(builder *flatbuffers.Builder, frequency float64) {
	builder.PrependFloat64Slot(29, frequency, 0.0)
}
func RFObservation_FullAddNominalFrequency(builder *flatbuffers.Builder, nominalFrequency float64) {
	builder.PrependFloat64Slot(30, nominalFrequency, 0.0)
}
func RFObservation_FullAddStartFrequency(builder *flatbuffers.Builder, startFrequency float64) {
	builder.PrependFloat64Slot(31, startFrequency, 0.0)
}
func RFObservation_FullAddEndFrequency(builder *flatbuffers.Builder, endFrequency float64) {
	builder.PrependFloat64Slot(32, endFrequency, 0.0)
}
func RFObservation_FullAddRelativeCarrierPower(builder *flatbuffers.Builder, relativeCarrierPower float64) {
	builder.PrependFloat64Slot(33, relativeCarrierPower, 0.0)
}
func RFObservation_FullAddSpectrumAnalyzerPower(builder *flatbuffers.Builder, spectrumAnalyzerPower float64) {
	builder.PrependFloat64Slot(34, spectrumAnalyzerPower, 0.0)
}
func RFObservation_FullAddRelativeNoiseFloor(builder *flatbuffers.Builder, relativeNoiseFloor float64) {
	builder.PrependFloat64Slot(35, relativeNoiseFloor, 0.0)
}
func RFObservation_FullAddReferenceLevel(builder *flatbuffers.Builder, referenceLevel float64) {
	builder.PrependFloat64Slot(36, referenceLevel, 0.0)
}
func RFObservation_FullAddPgri(builder *flatbuffers.Builder, pgri float64) {
	builder.PrependFloat64Slot(37, pgri, 0.0)
}
func RFObservation_FullAddConfidence(builder *flatbuffers.Builder, confidence float64) {
	builder.PrependFloat64Slot(38, confidence, 0.0)
}
func RFObservation_FullAddIncoming(builder *flatbuffers.Builder, incoming bool) {
	builder.PrependBoolSlot(39, incoming, false)
}
func RFObservation_FullAddSwitchPoint(builder *flatbuffers.Builder, switchPoint int32) {
	builder.PrependInt32Slot(40, switchPoint, 0)
}
func RFObservation_FullAddBaudRate(builder *flatbuffers.Builder, baudRate float64) {
	builder.PrependFloat64Slot(41, baudRate, 0.0)
}
func RFObservation_FullAddSnr(builder *flatbuffers.Builder, snr float64) {
	builder.PrependFloat64Slot(42, snr, 0.0)
}
func RFObservation_FullAddNominalSnr(builder *flatbuffers.Builder, nominalSnr float64) {
	builder.PrependFloat64Slot(43, nominalSnr, 0.0)
}
func RFObservation_FullAddPolarity(builder *flatbuffers.Builder, polarity float64) {
	builder.PrependFloat64Slot(44, polarity, 0.0)
}
func RFObservation_FullAddPolarityType(builder *flatbuffers.Builder, polarityType RFObservation_Full_polarityType_Enum) {
	builder.PrependInt8Slot(45, int8(polarityType), 0)
}
func RFObservation_FullAddChannel(builder *flatbuffers.Builder, channel int32) {
	builder.PrependInt32Slot(46, channel, 0)
}
func RFObservation_FullAddPowerOverNoise(builder *flatbuffers.Builder, powerOverNoise float64) {
	builder.PrependFloat64Slot(47, powerOverNoise, 0.0)
}
func RFObservation_FullAddNominalPowerOverNoise(builder *flatbuffers.Builder, nominalPowerOverNoise float64) {
	builder.PrependFloat64Slot(48, nominalPowerOverNoise, 0.0)
}
func RFObservation_FullAddBandwidth(builder *flatbuffers.Builder, bandwidth float64) {
	builder.PrependFloat64Slot(49, bandwidth, 0.0)
}
func RFObservation_FullAddNominalBandwidth(builder *flatbuffers.Builder, nominalBandwidth float64) {
	builder.PrependFloat64Slot(50, nominalBandwidth, 0.0)
}
func RFObservation_FullAddResolutionBandwidth(builder *flatbuffers.Builder, resolutionBandwidth float64) {
	builder.PrependFloat64Slot(51, resolutionBandwidth, 0.0)
}
func RFObservation_FullAddVideoBandwidth(builder *flatbuffers.Builder, videoBandwidth float64) {
	builder.PrependFloat64Slot(52, videoBandwidth, 0.0)
}
func RFObservation_FullAddEirp(builder *flatbuffers.Builder, eirp float64) {
	builder.PrependFloat64Slot(53, eirp, 0.0)
}
func RFObservation_FullAddNominalEirp(builder *flatbuffers.Builder, nominalEirp float64) {
	builder.PrependFloat64Slot(54, nominalEirp, 0.0)
}
func RFObservation_FullAddMinPsd(builder *flatbuffers.Builder, minPsd float64) {
	builder.PrependFloat64Slot(55, minPsd, 0.0)
}
func RFObservation_FullAddMaxPsd(builder *flatbuffers.Builder, maxPsd float64) {
	builder.PrependFloat64Slot(56, maxPsd, 0.0)
}
func RFObservation_FullAddFrequencyShift(builder *flatbuffers.Builder, frequencyShift float64) {
	builder.PrependFloat64Slot(57, frequencyShift, 0.0)
}
func RFObservation_FullAddPeak(builder *flatbuffers.Builder, peak bool) {
	builder.PrependBoolSlot(58, peak, false)
}
func RFObservation_FullAddAntennaName(builder *flatbuffers.Builder, antennaName flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(59, flatbuffers.UOffsetT(antennaName), 0)
}
func RFObservation_FullAddDetectionStatus(builder *flatbuffers.Builder, detectionStatus flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(60, flatbuffers.UOffsetT(detectionStatus), 0)
}
func RFObservation_FullAddCollectionMode(builder *flatbuffers.Builder, collectionMode flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(61, flatbuffers.UOffsetT(collectionMode), 0)
}
func RFObservation_FullAddRawFileUri(builder *flatbuffers.Builder, rawFileUri flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(62, flatbuffers.UOffsetT(rawFileUri), 0)
}
func RFObservation_FullAddSource(builder *flatbuffers.Builder, source flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(63, flatbuffers.UOffsetT(source), 0)
}
func RFObservation_FullAddOrigin(builder *flatbuffers.Builder, origin flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(64, flatbuffers.UOffsetT(origin), 0)
}
func RFObservation_FullAddDataMode(builder *flatbuffers.Builder, dataMode RFObservation_Full_dataMode_Enum) {
	builder.PrependInt8Slot(65, int8(dataMode), 0)
}
func RFObservation_FullAddTags(builder *flatbuffers.Builder, tags flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(66, flatbuffers.UOffsetT(tags), 0)
}
func RFObservation_FullStartTagsVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func RFObservation_FullAddCreatedAt(builder *flatbuffers.Builder, createdAt flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(67, flatbuffers.UOffsetT(createdAt), 0)
}
func RFObservation_FullAddCreatedBy(builder *flatbuffers.Builder, createdBy flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(68, flatbuffers.UOffsetT(createdBy), 0)
}
func RFObservation_FullAddNoisePwrDensity(builder *flatbuffers.Builder, noisePwrDensity float64) {
	builder.PrependFloat64Slot(69, noisePwrDensity, 0.0)
}
func RFObservation_FullAddCarrierStandard(builder *flatbuffers.Builder, carrierStandard flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(70, flatbuffers.UOffsetT(carrierStandard), 0)
}
func RFObservation_FullAddModulation(builder *flatbuffers.Builder, modulation flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(71, flatbuffers.UOffsetT(modulation), 0)
}
func RFObservation_FullAddInnerCodingRate(builder *flatbuffers.Builder, innerCodingRate int32) {
	builder.PrependInt32Slot(72, innerCodingRate, 0)
}
func RFObservation_FullAddOuterCodingRate(builder *flatbuffers.Builder, outerCodingRate int32) {
	builder.PrependInt32Slot(73, outerCodingRate, 0)
}
func RFObservation_FullAddTransmitFilterType(builder *flatbuffers.Builder, transmitFilterType flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(74, flatbuffers.UOffsetT(transmitFilterType), 0)
}
func RFObservation_FullAddTransmitFilterRollOff(builder *flatbuffers.Builder, transmitFilterRollOff float64) {
	builder.PrependFloat64Slot(75, transmitFilterRollOff, 0.0)
}
func RFObservation_FullAddSymbolToNoiseRatio(builder *flatbuffers.Builder, symbolToNoiseRatio float64) {
	builder.PrependFloat64Slot(76, symbolToNoiseRatio, 0.0)
}
func RFObservation_FullAddBitErrorRate(builder *flatbuffers.Builder, bitErrorRate float64) {
	builder.PrependFloat64Slot(77, bitErrorRate, 0.0)
}
func RFObservation_FullAddOrigNetwork(builder *flatbuffers.Builder, origNetwork flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(78, flatbuffers.UOffsetT(origNetwork), 0)
}
func RFObservation_FullAddSourceDl(builder *flatbuffers.Builder, sourceDl flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(79, flatbuffers.UOffsetT(sourceDl), 0)
}
func RFObservation_FullAddOnOrbit(builder *flatbuffers.Builder, onOrbit flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(80, flatbuffers.UOffsetT(onOrbit), 0)
}
func RFObservation_FullAddDescriptor(builder *flatbuffers.Builder, descriptor flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(81, flatbuffers.UOffsetT(descriptor), 0)
}
func RFObservation_FullAddUrl(builder *flatbuffers.Builder, url flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(82, flatbuffers.UOffsetT(url), 0)
}
func RFObservation_FullEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
