// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package LogisticsStocks_Abridged

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

/// /// The supply stocks for this support item.
type LogisticsStocks_Abridged struct {
	_tab flatbuffers.Table
}

const LogisticsStocks_AbridgedIdentifier = "LOGI"

func GetRootAsLogisticsStocks_Abridged(buf []byte, offset flatbuffers.UOffsetT) *LogisticsStocks_Abridged {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &LogisticsStocks_Abridged{}
	x.Init(buf, n+offset)
	return x
}

func FinishLogisticsStocks_AbridgedBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	identifierBytes := []byte(LogisticsStocks_AbridgedIdentifier)
	builder.FinishWithFileIdentifier(offset, identifierBytes)
}

func LogisticsStocks_AbridgedBufferHasIdentifier(buf []byte) bool {
	return flatbuffers.BufferHasIdentifier(buf, LogisticsStocks_AbridgedIdentifier)
}

func GetSizePrefixedRootAsLogisticsStocks_Abridged(buf []byte, offset flatbuffers.UOffsetT) *LogisticsStocks_Abridged {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &LogisticsStocks_Abridged{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedLogisticsStocks_AbridgedBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	identifierBytes := []byte(LogisticsStocks_AbridgedIdentifier)
	builder.FinishSizePrefixedWithFileIdentifier(offset, identifierBytes)
}

func SizePrefixedLogisticsStocks_AbridgedBufferHasIdentifier(buf []byte) bool {
	return flatbuffers.SizePrefixedBufferHasIdentifier(buf, LogisticsStocks_AbridgedIdentifier)
}

func (rcv *LogisticsStocks_Abridged) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *LogisticsStocks_Abridged) Table() flatbuffers.Table {
	return rcv._tab
}

/// The ICAO code for the primary location with available parts.
/// Example: /// Example: PHIK
/// Constraints: Minimum length = 0, Maximum length = 4
func (rcv *LogisticsStocks_Abridged) SourceIcao() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The ICAO code for the primary location with available parts.
/// Example: /// Example: PHIK
/// Constraints: Minimum length = 0, Maximum length = 4
/// The quantity of available parts needed from sourceICAO.
/// Example: /// Example: 4
/// Constraints: No constraints specified.
func (rcv *LogisticsStocks_Abridged) Quantity() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

/// The quantity of available parts needed from sourceICAO.
/// Example: /// Example: 4
/// Constraints: No constraints specified.
func (rcv *LogisticsStocks_Abridged) MutateQuantity(n int32) bool {
	return rcv._tab.MutateInt32Slot(6, n)
}

/// The datetime when the parts were sourced, in ISO 8601 UTC format with millisecond precision.
/// Example: /// Example: 2023-07-13T13:47:00.123Z
/// Constraints: No constraints specified.
func (rcv *LogisticsStocks_Abridged) StockCheckTime() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The datetime when the parts were sourced, in ISO 8601 UTC format with millisecond precision.
/// Example: /// Example: 2023-07-13T13:47:00.123Z
/// Constraints: No constraints specified.
/// The point of contact at the sourced location.
/// Example: /// Example: SMITH, JOHN J
/// Constraints: Minimum length = 0, Maximum length = 68
func (rcv *LogisticsStocks_Abridged) StockPoc() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The point of contact at the sourced location.
/// Example: /// Example: SMITH, JOHN J
/// Constraints: Minimum length = 0, Maximum length = 68
func LogisticsStocks_AbridgedStart(builder *flatbuffers.Builder) {
	builder.StartObject(4)
}
func LogisticsStocks_AbridgedAddSourceIcao(builder *flatbuffers.Builder, sourceIcao flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(sourceIcao), 0)
}
func LogisticsStocks_AbridgedAddQuantity(builder *flatbuffers.Builder, quantity int32) {
	builder.PrependInt32Slot(1, quantity, 0)
}
func LogisticsStocks_AbridgedAddStockCheckTime(builder *flatbuffers.Builder, stockCheckTime flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(stockCheckTime), 0)
}
func LogisticsStocks_AbridgedAddStockPoc(builder *flatbuffers.Builder, stockPoc flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(3, flatbuffers.UOffsetT(stockPoc), 0)
}
func LogisticsStocks_AbridgedEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
