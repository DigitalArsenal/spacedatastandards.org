// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package RoutePoints_Full

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

/// /// Points identified within the route.
type RoutePoints_Full struct {
	_tab flatbuffers.Table
}

const RoutePoints_FullIdentifier = "ROUT"

func GetRootAsRoutePoints_Full(buf []byte, offset flatbuffers.UOffsetT) *RoutePoints_Full {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &RoutePoints_Full{}
	x.Init(buf, n+offset)
	return x
}

func FinishRoutePoints_FullBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	identifierBytes := []byte(RoutePoints_FullIdentifier)
	builder.FinishWithFileIdentifier(offset, identifierBytes)
}

func RoutePoints_FullBufferHasIdentifier(buf []byte) bool {
	return flatbuffers.BufferHasIdentifier(buf, RoutePoints_FullIdentifier)
}

func GetSizePrefixedRootAsRoutePoints_Full(buf []byte, offset flatbuffers.UOffsetT) *RoutePoints_Full {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &RoutePoints_Full{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedRoutePoints_FullBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	identifierBytes := []byte(RoutePoints_FullIdentifier)
	builder.FinishSizePrefixedWithFileIdentifier(offset, identifierBytes)
}

func SizePrefixedRoutePoints_FullBufferHasIdentifier(buf []byte) bool {
	return flatbuffers.SizePrefixedBufferHasIdentifier(buf, RoutePoints_FullIdentifier)
}

func (rcv *RoutePoints_Full) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *RoutePoints_Full) Table() flatbuffers.Table {
	return rcv._tab
}

/// Sequencing field for the track route. This is the identifier representing the sequence of waypoints associated to the track route.
/// Example: /// Example: 1
/// Constraints: No constraints specified.
func (rcv *RoutePoints_Full) PtSequenceId() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

/// Sequencing field for the track route. This is the identifier representing the sequence of waypoints associated to the track route.
/// Example: /// Example: 1
/// Constraints: No constraints specified.
func (rcv *RoutePoints_Full) MutatePtSequenceId(n int32) bool {
	return rcv._tab.MutateInt32Slot(4, n)
}

/// Code representation of the point within the track route (ex. EP, EX, CP, IP, etc.).
/// Example: /// Example: EP
/// Constraints: Minimum length = 0, Maximum length = 16
func (rcv *RoutePoints_Full) PtTypeCode() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Code representation of the point within the track route (ex. EP, EX, CP, IP, etc.).
/// Example: /// Example: EP
/// Constraints: Minimum length = 0, Maximum length = 16
/// The name that represents the point within the track route (ex. ENTRY POINT, EXIT POINT, CONTROL POINT, INITIAL POINT, etc.).
/// Example: /// Example: ENTRY POINT
/// Constraints: Minimum length = 0, Maximum length = 36
func (rcv *RoutePoints_Full) PtTypeName() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The name that represents the point within the track route (ex. ENTRY POINT, EXIT POINT, CONTROL POINT, INITIAL POINT, etc.).
/// Example: /// Example: ENTRY POINT
/// Constraints: Minimum length = 0, Maximum length = 36
/// Name of a waypoint which identifies the location of the point.
/// Example: /// Example: KCHS
/// Constraints: Minimum length = 0, Maximum length = 32
func (rcv *RoutePoints_Full) WaypointName() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Name of a waypoint which identifies the location of the point.
/// Example: /// Example: KCHS
/// Constraints: Minimum length = 0, Maximum length = 32
/// Flag indicating this is a Digital Aeronautical Flight Information File (DAFIF) point.
/// Example: /// Example: True
/// Constraints: No constraints specified.
func (rcv *RoutePoints_Full) DafifPt() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

/// Flag indicating this is a Digital Aeronautical Flight Information File (DAFIF) point.
/// Example: /// Example: True
/// Constraints: No constraints specified.
func (rcv *RoutePoints_Full) MutateDafifPt(n bool) bool {
	return rcv._tab.MutateBoolSlot(12, n)
}

/// WGS84 latitude of the point location, in degrees. -90 to 90 degrees (negative values south of equator).
/// Example: /// Example: 45.23
/// Constraints: No constraints specified.
func (rcv *RoutePoints_Full) PtLat() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// WGS84 latitude of the point location, in degrees. -90 to 90 degrees (negative values south of equator).
/// Example: /// Example: 45.23
/// Constraints: No constraints specified.
func (rcv *RoutePoints_Full) MutatePtLat(n float64) bool {
	return rcv._tab.MutateFloat64Slot(14, n)
}

/// WGS84 longitude of the point location, in degrees. -180 to 180 degrees (negative values west of Prime Meridian).
/// Example: /// Example: 179.1
/// Constraints: No constraints specified.
func (rcv *RoutePoints_Full) PtLon() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// WGS84 longitude of the point location, in degrees. -180 to 180 degrees (negative values west of Prime Meridian).
/// Example: /// Example: 179.1
/// Constraints: No constraints specified.
func (rcv *RoutePoints_Full) MutatePtLon(n float64) bool {
	return rcv._tab.MutateFloat64Slot(16, n)
}

/// The magnetic declination/variation of the route point location from true north, in degrees. Positive values east of true north and negative values west of true north.
/// Example: /// Example: 7.35
/// Constraints: No constraints specified.
func (rcv *RoutePoints_Full) MagDec() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(18))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// The magnetic declination/variation of the route point location from true north, in degrees. Positive values east of true north and negative values west of true north.
/// Example: /// Example: 7.35
/// Constraints: No constraints specified.
func (rcv *RoutePoints_Full) MutateMagDec(n float64) bool {
	return rcv._tab.MutateFloat64Slot(18, n)
}

/// The length of the course from the Navigational Aid (NAVAID) in nautical miles.
/// Example: /// Example: 100.2
/// Constraints: No constraints specified.
func (rcv *RoutePoints_Full) NavaidLength() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(20))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// The length of the course from the Navigational Aid (NAVAID) in nautical miles.
/// Example: /// Example: 100.2
/// Constraints: No constraints specified.
func (rcv *RoutePoints_Full) MutateNavaidLength(n float64) bool {
	return rcv._tab.MutateFloat64Slot(20, n)
}

/// Navigational Aid (NAVAID) identification code.
/// Example: /// Example: HTO
/// Constraints: Minimum length = 0, Maximum length = 16
func (rcv *RoutePoints_Full) Navaid() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(22))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Navigational Aid (NAVAID) identification code.
/// Example: /// Example: HTO
/// Constraints: Minimum length = 0, Maximum length = 16
/// The DoD Standard Country Code designator for the country where the route point resides. This field should be set to "OTHR" if the source value does not match a UDL country code value (ISO-3166-ALPHA-2).
/// Example: /// Example: NL
/// Constraints: Minimum length = 0, Maximum length = 4
func (rcv *RoutePoints_Full) CountryCode() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(24))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The DoD Standard Country Code designator for the country where the route point resides. This field should be set to "OTHR" if the source value does not match a UDL country code value (ISO-3166-ALPHA-2).
/// Example: /// Example: NL
/// Constraints: Minimum length = 0, Maximum length = 4
/// Specifies an alternate country code if the data provider code is not part of an official NAVAID Country Code standard such as ISO-3166 or FIPS. This field will be set to the value provided by the source and should be used for all Queries specifying a Country Code.
/// Example: /// Example: IZ
/// Constraints: Minimum length = 0, Maximum length = 16
func (rcv *RoutePoints_Full) AltCountryCode() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(26))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Specifies an alternate country code if the data provider code is not part of an official NAVAID Country Code standard such as ISO-3166 or FIPS. This field will be set to the value provided by the source and should be used for all Queries specifying a Country Code.
/// Example: /// Example: IZ
/// Constraints: Minimum length = 0, Maximum length = 16
/// The NAVAID type of this route point (ex. VOR, VORTAC, TACAN, etc.).
/// Example: /// Example: VORTAC
/// Constraints: Minimum length = 0, Maximum length = 12
func (rcv *RoutePoints_Full) NavaidType() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(28))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The NAVAID type of this route point (ex. VOR, VORTAC, TACAN, etc.).
/// Example: /// Example: VORTAC
/// Constraints: Minimum length = 0, Maximum length = 12
func RoutePoints_FullStart(builder *flatbuffers.Builder) {
	builder.StartObject(13)
}
func RoutePoints_FullAddPtSequenceId(builder *flatbuffers.Builder, ptSequenceId int32) {
	builder.PrependInt32Slot(0, ptSequenceId, 0)
}
func RoutePoints_FullAddPtTypeCode(builder *flatbuffers.Builder, ptTypeCode flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(ptTypeCode), 0)
}
func RoutePoints_FullAddPtTypeName(builder *flatbuffers.Builder, ptTypeName flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(ptTypeName), 0)
}
func RoutePoints_FullAddWaypointName(builder *flatbuffers.Builder, waypointName flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(3, flatbuffers.UOffsetT(waypointName), 0)
}
func RoutePoints_FullAddDafifPt(builder *flatbuffers.Builder, dafifPt bool) {
	builder.PrependBoolSlot(4, dafifPt, false)
}
func RoutePoints_FullAddPtLat(builder *flatbuffers.Builder, ptLat float64) {
	builder.PrependFloat64Slot(5, ptLat, 0.0)
}
func RoutePoints_FullAddPtLon(builder *flatbuffers.Builder, ptLon float64) {
	builder.PrependFloat64Slot(6, ptLon, 0.0)
}
func RoutePoints_FullAddMagDec(builder *flatbuffers.Builder, magDec float64) {
	builder.PrependFloat64Slot(7, magDec, 0.0)
}
func RoutePoints_FullAddNavaidLength(builder *flatbuffers.Builder, navaidLength float64) {
	builder.PrependFloat64Slot(8, navaidLength, 0.0)
}
func RoutePoints_FullAddNavaid(builder *flatbuffers.Builder, navaid flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(9, flatbuffers.UOffsetT(navaid), 0)
}
func RoutePoints_FullAddCountryCode(builder *flatbuffers.Builder, countryCode flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(10, flatbuffers.UOffsetT(countryCode), 0)
}
func RoutePoints_FullAddAltCountryCode(builder *flatbuffers.Builder, altCountryCode flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(11, flatbuffers.UOffsetT(altCountryCode), 0)
}
func RoutePoints_FullAddNavaidType(builder *flatbuffers.Builder, navaidType flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(12, flatbuffers.UOffsetT(navaidType), 0)
}
func RoutePoints_FullEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
