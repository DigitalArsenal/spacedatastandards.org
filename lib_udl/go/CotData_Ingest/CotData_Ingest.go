// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package CotData_Ingest

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

/// /// Schema for the CotData to post.
type CotData_Ingest struct {
	_tab flatbuffers.Table
}

const CotData_IngestIdentifier = "COTD"

func GetRootAsCotData_Ingest(buf []byte, offset flatbuffers.UOffsetT) *CotData_Ingest {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &CotData_Ingest{}
	x.Init(buf, n+offset)
	return x
}

func FinishCotData_IngestBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	identifierBytes := []byte(CotData_IngestIdentifier)
	builder.FinishWithFileIdentifier(offset, identifierBytes)
}

func CotData_IngestBufferHasIdentifier(buf []byte) bool {
	return flatbuffers.BufferHasIdentifier(buf, CotData_IngestIdentifier)
}

func GetSizePrefixedRootAsCotData_Ingest(buf []byte, offset flatbuffers.UOffsetT) *CotData_Ingest {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &CotData_Ingest{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedCotData_IngestBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	identifierBytes := []byte(CotData_IngestIdentifier)
	builder.FinishSizePrefixedWithFileIdentifier(offset, identifierBytes)
}

func SizePrefixedCotData_IngestBufferHasIdentifier(buf []byte) bool {
	return flatbuffers.SizePrefixedBufferHasIdentifier(buf, CotData_IngestIdentifier)
}

func (rcv *CotData_Ingest) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *CotData_Ingest) Table() flatbuffers.Table {
	return rcv._tab
}

/// Identifier of the sender of the cot message which should remain the same on subsequent POI records of the same point of interest.
/// Example: /// Example: POI-ID
/// Constraints: No constraints specified.
func (rcv *CotData_Ingest) SenderUid() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Identifier of the sender of the cot message which should remain the same on subsequent POI records of the same point of interest.
/// Example: /// Example: POI-ID
/// Constraints: No constraints specified.
/// How the event point was generated, in CoT object heirarchy notation (optional, CoT).
/// Example: /// Example: h-e
/// Constraints: No constraints specified.
func (rcv *CotData_Ingest) How() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// How the event point was generated, in CoT object heirarchy notation (optional, CoT).
/// Example: /// Example: h-e
/// Constraints: No constraints specified.
/// Radius of circular area about lat/lon point, in meters (1-sigma, if representing error).
/// Example: /// Example: 10.23
/// Constraints: No constraints specified.
func (rcv *CotData_Ingest) Ce() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Radius of circular area about lat/lon point, in meters (1-sigma, if representing error).
/// Example: /// Example: 10.23
/// Constraints: No constraints specified.
func (rcv *CotData_Ingest) MutateCe(n float64) bool {
	return rcv._tab.MutateFloat64Slot(8, n)
}

/// Height above lat/lon point, in meters (1-sigma, if representing linear error).
/// Example: /// Example: 10.23
/// Constraints: No constraints specified.
func (rcv *CotData_Ingest) Le() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Height above lat/lon point, in meters (1-sigma, if representing linear error).
/// Example: /// Example: 10.23
/// Constraints: No constraints specified.
func (rcv *CotData_Ingest) MutateLe(n float64) bool {
	return rcv._tab.MutateFloat64Slot(10, n)
}

/// Stale timestamp (optional), in ISO8601 UTC format.
/// Example: /// Example: 2020-01-01T16:00:00.123456Z
/// Constraints: No constraints specified.
func (rcv *CotData_Ingest) Stale() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Stale timestamp (optional), in ISO8601 UTC format.
/// Example: /// Example: 2020-01-01T16:00:00.123456Z
/// Constraints: No constraints specified.
/// Start time of event validity (optional), in ISO8601 UTC format.
/// Example: /// Example: 2020-01-01T16:00:00.123456Z
/// Constraints: No constraints specified.
func (rcv *CotData_Ingest) Start() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Start time of event validity (optional), in ISO8601 UTC format.
/// Example: /// Example: 2020-01-01T16:00:00.123456Z
/// Constraints: No constraints specified.
/// WGS-84 latitude of the POI, in degrees (+N, -S), -90 to 90.
/// Example: /// Example: 45.23
/// Constraints: No constraints specified.
func (rcv *CotData_Ingest) Lat() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// WGS-84 latitude of the POI, in degrees (+N, -S), -90 to 90.
/// Example: /// Example: 45.23
/// Constraints: No constraints specified.
func (rcv *CotData_Ingest) MutateLat(n float64) bool {
	return rcv._tab.MutateFloat64Slot(16, n)
}

/// WGS-84 longitude of the POI, in degrees (+E, -W), -180 to 180.
/// Example: /// Example: 45.23
/// Constraints: No constraints specified.
func (rcv *CotData_Ingest) Lon() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(18))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// WGS-84 longitude of the POI, in degrees (+E, -W), -180 to 180.
/// Example: /// Example: 45.23
/// Constraints: No constraints specified.
func (rcv *CotData_Ingest) MutateLon(n float64) bool {
	return rcv._tab.MutateFloat64Slot(18, n)
}

/// Event type, in CoT object heirarchy notation (optional, CoT).
/// Example: /// Example: a-h-G
/// Constraints: No constraints specified.
func (rcv *CotData_Ingest) Type() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(20))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Event type, in CoT object heirarchy notation (optional, CoT).
/// Example: /// Example: a-h-G
/// Constraints: No constraints specified.
/// Point height above ellipsoid (WGS-84), in meters.
/// Example: /// Example: 5.23
/// Constraints: No constraints specified.
func (rcv *CotData_Ingest) Alt() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(22))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Point height above ellipsoid (WGS-84), in meters.
/// Example: /// Example: 5.23
/// Constraints: No constraints specified.
func (rcv *CotData_Ingest) MutateAlt(n float64) bool {
	return rcv._tab.MutateFloat64Slot(22, n)
}

/// No description provided.
/// Example: /// Example: No example provided.
/// Constraints: No constraints specified.
func (rcv *CotData_Ingest) CotPositionData() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(24))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// No description provided.
/// Example: /// Example: No example provided.
/// Constraints: No constraints specified.
/// No description provided.
/// Example: /// Example: No example provided.
/// Constraints: No constraints specified.
func (rcv *CotData_Ingest) CotChatData() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(26))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// No description provided.
/// Example: /// Example: No example provided.
/// Constraints: No constraints specified.
/// Optional list of call signs to send message to directly.
/// Example: /// Example: No example provided.
/// Constraints: No constraints specified.
func (rcv *CotData_Ingest) CallSigns(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(28))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *CotData_Ingest) CallSignsLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(28))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

/// Optional list of call signs to send message to directly.
/// Example: /// Example: No example provided.
/// Constraints: No constraints specified.
/// Optional list of TAK user ids to send message to directly.
/// Example: /// Example: No example provided.
/// Constraints: No constraints specified.
func (rcv *CotData_Ingest) Uids(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(30))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *CotData_Ingest) UidsLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(30))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

/// Optional list of TAK user ids to send message to directly.
/// Example: /// Example: No example provided.
/// Constraints: No constraints specified.
/// Optional set of groups to send message to specifically.  If not specified, the message will be sent to the default _ANON_ group.
/// Example: /// Example: No example provided.
/// Constraints: No constraints specified.
func (rcv *CotData_Ingest) Groups(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(32))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *CotData_Ingest) GroupsLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(32))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

/// Optional set of groups to send message to specifically.  If not specified, the message will be sent to the default _ANON_ group.
/// Example: /// Example: No example provided.
/// Constraints: No constraints specified.
func CotData_IngestStart(builder *flatbuffers.Builder) {
	builder.StartObject(15)
}
func CotData_IngestAddSenderUid(builder *flatbuffers.Builder, senderUid flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(senderUid), 0)
}
func CotData_IngestAddHow(builder *flatbuffers.Builder, how flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(how), 0)
}
func CotData_IngestAddCe(builder *flatbuffers.Builder, ce float64) {
	builder.PrependFloat64Slot(2, ce, 0.0)
}
func CotData_IngestAddLe(builder *flatbuffers.Builder, le float64) {
	builder.PrependFloat64Slot(3, le, 0.0)
}
func CotData_IngestAddStale(builder *flatbuffers.Builder, stale flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(4, flatbuffers.UOffsetT(stale), 0)
}
func CotData_IngestAddStart(builder *flatbuffers.Builder, start flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(5, flatbuffers.UOffsetT(start), 0)
}
func CotData_IngestAddLat(builder *flatbuffers.Builder, lat float64) {
	builder.PrependFloat64Slot(6, lat, 0.0)
}
func CotData_IngestAddLon(builder *flatbuffers.Builder, lon float64) {
	builder.PrependFloat64Slot(7, lon, 0.0)
}
func CotData_IngestAddType(builder *flatbuffers.Builder, type_ flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(8, flatbuffers.UOffsetT(type_), 0)
}
func CotData_IngestAddAlt(builder *flatbuffers.Builder, alt float64) {
	builder.PrependFloat64Slot(9, alt, 0.0)
}
func CotData_IngestAddCotPositionData(builder *flatbuffers.Builder, cotPositionData flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(10, flatbuffers.UOffsetT(cotPositionData), 0)
}
func CotData_IngestAddCotChatData(builder *flatbuffers.Builder, cotChatData flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(11, flatbuffers.UOffsetT(cotChatData), 0)
}
func CotData_IngestAddCallSigns(builder *flatbuffers.Builder, callSigns flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(12, flatbuffers.UOffsetT(callSigns), 0)
}
func CotData_IngestStartCallSignsVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func CotData_IngestAddUids(builder *flatbuffers.Builder, uids flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(13, flatbuffers.UOffsetT(uids), 0)
}
func CotData_IngestStartUidsVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func CotData_IngestAddGroups(builder *flatbuffers.Builder, groups flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(14, flatbuffers.UOffsetT(groups), 0)
}
func CotData_IngestStartGroupsVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func CotData_IngestEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
