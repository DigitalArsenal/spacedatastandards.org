// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package Item_Full

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

/// /// No description available.
type Item_Full struct {
	_tab flatbuffers.Table
}

const Item_FullIdentifier = "ITEM"

func GetRootAsItem_Full(buf []byte, offset flatbuffers.UOffsetT) *Item_Full {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &Item_Full{}
	x.Init(buf, n+offset)
	return x
}

func FinishItem_FullBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	identifierBytes := []byte(Item_FullIdentifier)
	builder.FinishWithFileIdentifier(offset, identifierBytes)
}

func Item_FullBufferHasIdentifier(buf []byte) bool {
	return flatbuffers.BufferHasIdentifier(buf, Item_FullIdentifier)
}

func GetSizePrefixedRootAsItem_Full(buf []byte, offset flatbuffers.UOffsetT) *Item_Full {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &Item_Full{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedItem_FullBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	identifierBytes := []byte(Item_FullIdentifier)
	builder.FinishSizePrefixedWithFileIdentifier(offset, identifierBytes)
}

func SizePrefixedItem_FullBufferHasIdentifier(buf []byte) bool {
	return flatbuffers.SizePrefixedBufferHasIdentifier(buf, Item_FullIdentifier)
}

func (rcv *Item_Full) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *Item_Full) Table() flatbuffers.Table {
	return rcv._tab
}

/// Unique identifier of the record, auto-generated by the system if not provided on create operations.
/// Example: /// Example: 22f1f6da-a568-655a-ea37-76d013d04853
/// Constraints: Minimum length = 1, Maximum length = 36
func (rcv *Item_Full) Id() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Unique identifier of the record, auto-generated by the system if not provided on create operations.
/// Example: /// Example: 22f1f6da-a568-655a-ea37-76d013d04853
/// Constraints: Minimum length = 1, Maximum length = 36
/// Classification marking of the data in IC/CAPCO Portion-marked format.
/// Example: /// Example: U
/// Constraints: Minimum length = 1, Maximum length = 128
func (rcv *Item_Full) ClassificationMarking() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Classification marking of the data in IC/CAPCO Portion-marked format.
/// Example: /// Example: U
/// Constraints: Minimum length = 1, Maximum length = 128
/// The UDL ID of the air load plan this item is associated with.
/// Example: /// Example: 1038c389-d38e-270f-51cc-6a12e905abe8
/// Constraints: Minimum length = 0, Maximum length = 36
func (rcv *Item_Full) IdAirLoadPlan() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The UDL ID of the air load plan this item is associated with.
/// Example: /// Example: 1038c389-d38e-270f-51cc-6a12e905abe8
/// Constraints: Minimum length = 0, Maximum length = 36
/// The tracking identifier of an item or person. May be similar in representation of a barcode or UPC. If no scanCode or tracking number equivalent is available, 'NONE' should be used.
/// Example: /// Example: 12345ABCD
/// Constraints: Minimum length = 1, Maximum length = 36
func (rcv *Item_Full) ScanCode() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The tracking identifier of an item or person. May be similar in representation of a barcode or UPC. If no scanCode or tracking number equivalent is available, 'NONE' should be used.
/// Example: /// Example: 12345ABCD
/// Constraints: Minimum length = 1, Maximum length = 36
/// The algorithm name or standard that generated the scanCode (e.g. UPC-A, EAN-13, GTIN, SSCC, bID, JAN, etc.).
/// Example: /// Example: bID
/// Constraints: Minimum length = 0, Maximum length = 36
func (rcv *Item_Full) ScGenTool() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The algorithm name or standard that generated the scanCode (e.g. UPC-A, EAN-13, GTIN, SSCC, bID, JAN, etc.).
/// Example: /// Example: bID
/// Constraints: Minimum length = 0, Maximum length = 36
/// The item type of this record (e.g. EQUIPMENT, CARGO, PASSENGER).
/// Example: /// Example: CARGO
/// Constraints: Minimum length = 1, Maximum length = 32
func (rcv *Item_Full) Type() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The item type of this record (e.g. EQUIPMENT, CARGO, PASSENGER).
/// Example: /// Example: CARGO
/// Constraints: Minimum length = 1, Maximum length = 32
/// The type of cargo (e.g. PALLET, ROLLING STOCK, LOOSE, OTHER). Applicable for cargo item types only.
/// Example: /// Example: PALLET
/// Constraints: Minimum length = 0, Maximum length = 32
func (rcv *Item_Full) CargoType() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The type of cargo (e.g. PALLET, ROLLING STOCK, LOOSE, OTHER). Applicable for cargo item types only.
/// Example: /// Example: PALLET
/// Constraints: Minimum length = 0, Maximum length = 32
/// Name of the item. Applicable for equipment and cargo item types only.
/// Example: /// Example: Product Name
/// Constraints: Minimum length = 0, Maximum length = 100
func (rcv *Item_Full) Name() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(18))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Name of the item. Applicable for equipment and cargo item types only.
/// Example: /// Example: Product Name
/// Constraints: Minimum length = 0, Maximum length = 100
/// The destination of the item, typically an ICAO or port code. Applicable for cargo and passenger item types only.
/// Example: /// Example: RMS
/// Constraints: Minimum length = 0, Maximum length = 36
func (rcv *Item_Full) Destination() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(20))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The destination of the item, typically an ICAO or port code. Applicable for cargo and passenger item types only.
/// Example: /// Example: RMS
/// Constraints: Minimum length = 0, Maximum length = 36
/// The departure code or location where this item has left or is leaving.
/// Example: /// Example: CHS
/// Constraints: Minimum length = 0, Maximum length = 36
func (rcv *Item_Full) Departure() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(22))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The departure code or location where this item has left or is leaving.
/// Example: /// Example: CHS
/// Constraints: Minimum length = 0, Maximum length = 36
/// The name of the unit receiving this item.
/// Example: /// Example: 50 SBN
/// Constraints: Minimum length = 0, Maximum length = 100
func (rcv *Item_Full) ReceivingUnit() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(24))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The name of the unit receiving this item.
/// Example: /// Example: 50 SBN
/// Constraints: Minimum length = 0, Maximum length = 100
/// The military branch receiving this item.
/// Example: /// Example: Air Force
/// Constraints: Minimum length = 0, Maximum length = 32
func (rcv *Item_Full) ReceivingBranch() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(26))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The military branch receiving this item.
/// Example: /// Example: Air Force
/// Constraints: Minimum length = 0, Maximum length = 32
/// The latest acceptable arrival date of the item at the destination, in ISO 8601 date-only format (e.g. YYYY-MM-DD).
/// Example: /// Example: 2023-03-13
/// Constraints: No constraints specified.
func (rcv *Item_Full) LastArrDate() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(28))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The latest acceptable arrival date of the item at the destination, in ISO 8601 date-only format (e.g. YYYY-MM-DD).
/// Example: /// Example: 2023-03-13
/// Constraints: No constraints specified.
/// The unit line number of this item.
/// Example: /// Example: T01ME01
/// Constraints: Minimum length = 0, Maximum length = 16
func (rcv *Item_Full) Uln() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(30))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The unit line number of this item.
/// Example: /// Example: T01ME01
/// Constraints: Minimum length = 0, Maximum length = 16
/// Weight of the item in kilograms (if item is a passenger, include on-person bags).
/// Example: /// Example: 5443.335
/// Constraints: No constraints specified.
func (rcv *Item_Full) Weight() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(32))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Weight of the item in kilograms (if item is a passenger, include on-person bags).
/// Example: /// Example: 5443.335
/// Constraints: No constraints specified.
func (rcv *Item_Full) MutateWeight(n float64) bool {
	return rcv._tab.MutateFloat64Slot(32, n)
}

/// Timestamp when the weight was taken, in ISO 8601 UTC format with millisecond precision.
/// Example: /// Example: 2023-03-13T16:06:00.123Z
/// Constraints: No constraints specified.
func (rcv *Item_Full) WeightTs() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(34))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Timestamp when the weight was taken, in ISO 8601 UTC format with millisecond precision.
/// Example: /// Example: 2023-03-13T16:06:00.123Z
/// Constraints: No constraints specified.
/// The classification code of the commodity or group of commodities.
/// Example: /// Example: 2304116
/// Constraints: Minimum length = 0, Maximum length = 50
func (rcv *Item_Full) CommodityCode() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(36))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The classification code of the commodity or group of commodities.
/// Example: /// Example: 2304116
/// Constraints: Minimum length = 0, Maximum length = 50
/// The classification system denoting the commodity code, commodityCode (e.g. AIR, WATER, NMFC, UFC, STCC, DODUNQ, etc.).
/// Example: /// Example: STCC
/// Constraints: Minimum length = 0, Maximum length = 36
func (rcv *Item_Full) CommoditySys() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(38))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The classification system denoting the commodity code, commodityCode (e.g. AIR, WATER, NMFC, UFC, STCC, DODUNQ, etc.).
/// Example: /// Example: STCC
/// Constraints: Minimum length = 0, Maximum length = 36
/// The code denoting the type of material item.
/// Example: /// Example: 530500234
/// Constraints: Minimum length = 0, Maximum length = 36
func (rcv *Item_Full) ProductCode() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(40))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The code denoting the type of material item.
/// Example: /// Example: 530500234
/// Constraints: Minimum length = 0, Maximum length = 36
/// The assigning system that denotes the type of material item, productCode (e.g. NSN-national stock number, NDC-national drug code, MPN-manufacturer part number, etc.).
/// Example: /// Example: NSN
/// Constraints: Minimum length = 0, Maximum length = 32
func (rcv *Item_Full) ProductSys() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(42))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The assigning system that denotes the type of material item, productCode (e.g. NSN-national stock number, NDC-national drug code, MPN-manufacturer part number, etc.).
/// Example: /// Example: NSN
/// Constraints: Minimum length = 0, Maximum length = 32
/// Width of the cargo in meters. Applicable for cargo item types only.
/// Example: /// Example: 1.1
/// Constraints: No constraints specified.
func (rcv *Item_Full) Width() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(44))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Width of the cargo in meters. Applicable for cargo item types only.
/// Example: /// Example: 1.1
/// Constraints: No constraints specified.
func (rcv *Item_Full) MutateWidth(n float64) bool {
	return rcv._tab.MutateFloat64Slot(44, n)
}

/// Length of the cargo in meters. Applicable for cargo item types only.
/// Example: /// Example: 1.1
/// Constraints: No constraints specified.
func (rcv *Item_Full) Length() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(46))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Length of the cargo in meters. Applicable for cargo item types only.
/// Example: /// Example: 1.1
/// Constraints: No constraints specified.
func (rcv *Item_Full) MutateLength(n float64) bool {
	return rcv._tab.MutateFloat64Slot(46, n)
}

/// Height of the cargo in meters. Applicable for cargo item types only.
/// Example: /// Example: 1.1
/// Constraints: No constraints specified.
func (rcv *Item_Full) Height() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(48))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Height of the cargo in meters. Applicable for cargo item types only.
/// Example: /// Example: 1.1
/// Constraints: No constraints specified.
func (rcv *Item_Full) MutateHeight(n float64) bool {
	return rcv._tab.MutateFloat64Slot(48, n)
}

/// The volume of the item, in cubic meters. Applicable for cargo item types only.
/// Example: /// Example: 7.8902
/// Constraints: No constraints specified.
func (rcv *Item_Full) Volume() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(50))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// The volume of the item, in cubic meters. Applicable for cargo item types only.
/// Example: /// Example: 7.8902
/// Constraints: No constraints specified.
func (rcv *Item_Full) MutateVolume(n float64) bool {
	return rcv._tab.MutateFloat64Slot(50, n)
}

/// Center of gravity position of the item, measured from the item's front datum, in centimeters.
/// Example: /// Example: 112.014
/// Constraints: No constraints specified.
func (rcv *Item_Full) Cg() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(52))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Center of gravity position of the item, measured from the item's front datum, in centimeters.
/// Example: /// Example: 112.014
/// Constraints: No constraints specified.
func (rcv *Item_Full) MutateCg(n float64) bool {
	return rcv._tab.MutateFloat64Slot(52, n)
}

/// The fuselage station of the item measured from the reference datum, in centimeters. Applicable for cargo and passenger item types only.
/// Example: /// Example: 412.1
/// Constraints: No constraints specified.
func (rcv *Item_Full) Fs() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(54))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// The fuselage station of the item measured from the reference datum, in centimeters. Applicable for cargo and passenger item types only.
/// Example: /// Example: 412.1
/// Constraints: No constraints specified.
func (rcv *Item_Full) MutateFs(n float64) bool {
	return rcv._tab.MutateFloat64Slot(54, n)
}

/// How far left or right of centerline is the item in meters. Applicable for cargo and passenger item types only.
/// Example: /// Example: 3.1
/// Constraints: No constraints specified.
func (rcv *Item_Full) CenterlineOffset() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(56))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// How far left or right of centerline is the item in meters. Applicable for cargo and passenger item types only.
/// Example: /// Example: 3.1
/// Constraints: No constraints specified.
func (rcv *Item_Full) MutateCenterlineOffset(n float64) bool {
	return rcv._tab.MutateFloat64Slot(56, n)
}

/// Moment of the item in Newton-meters. Applicable for equipment and cargo item types only.
/// Example: /// Example: 4000.1
/// Constraints: No constraints specified.
func (rcv *Item_Full) Moment() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(58))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Moment of the item in Newton-meters. Applicable for equipment and cargo item types only.
/// Example: /// Example: 4000.1
/// Constraints: No constraints specified.
func (rcv *Item_Full) MutateMoment(n float64) bool {
	return rcv._tab.MutateFloat64Slot(58, n)
}

/// Flag indicating this item is planned to be airdropped. Applicable for cargo and passenger item types only.
/// Example: /// Example: True
/// Constraints: No constraints specified.
func (rcv *Item_Full) Airdrop() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(60))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

/// Flag indicating this item is planned to be airdropped. Applicable for cargo and passenger item types only.
/// Example: /// Example: True
/// Constraints: No constraints specified.
func (rcv *Item_Full) MutateAirdrop(n bool) bool {
	return rcv._tab.MutateBoolSlot(60, n)
}

/// Transportation Control Number of the cargo. Applicable for cargo item types only.
/// Example: /// Example: M1358232245912XXX
/// Constraints: Minimum length = 0, Maximum length = 17
func (rcv *Item_Full) Tcn() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(62))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Transportation Control Number of the cargo. Applicable for cargo item types only.
/// Example: /// Example: M1358232245912XXX
/// Constraints: Minimum length = 0, Maximum length = 17
/// Array of UN hazard classes or division codes that apply to this item.
/// Example: /// Example: [1.1, 1.2]
/// Constraints: No constraints specified.
func (rcv *Item_Full) HazCodes(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(64))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *Item_Full) HazCodesLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(64))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

/// Array of UN hazard classes or division codes that apply to this item.
/// Example: /// Example: [1.1, 1.2]
/// Constraints: No constraints specified.
/// Net explosive weight of the item, in kilograms.
/// Example: /// Example: 51.437
/// Constraints: No constraints specified.
func (rcv *Item_Full) NetExpWt() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(66))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Net explosive weight of the item, in kilograms.
/// Example: /// Example: 51.437
/// Constraints: No constraints specified.
func (rcv *Item_Full) MutateNetExpWt(n float64) bool {
	return rcv._tab.MutateFloat64Slot(66, n)
}

/// Flag indicating this item acts as a container and contains additional items.
/// Example: /// Example: True
/// Constraints: No constraints specified.
func (rcv *Item_Full) Container() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(68))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

/// Flag indicating this item acts as a container and contains additional items.
/// Example: /// Example: True
/// Constraints: No constraints specified.
func (rcv *Item_Full) MutateContainer(n bool) bool {
	return rcv._tab.MutateBoolSlot(68, n)
}

/// Array of tracking identifiers that are contained within this item.
/// Example: /// Example: ['2UJ8843K', '745YV1T65']
/// Constraints: No constraints specified.
func (rcv *Item_Full) ItemContains(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(70))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *Item_Full) ItemContainsLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(70))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

/// Array of tracking identifiers that are contained within this item.
/// Example: /// Example: ['2UJ8843K', '745YV1T65']
/// Constraints: No constraints specified.
/// Number of pallet positions or equivalent on the aircraft, ship, or conveyance equipment that this item occupies.
/// Example: /// Example: 2
/// Constraints: No constraints specified.
func (rcv *Item_Full) NumPalletPos() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(72))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

/// Number of pallet positions or equivalent on the aircraft, ship, or conveyance equipment that this item occupies.
/// Example: /// Example: 2
/// Constraints: No constraints specified.
func (rcv *Item_Full) MutateNumPalletPos(n int32) bool {
	return rcv._tab.MutateInt32Slot(72, n)
}

/// United States Distinguished Visitor Code, only applicable to people.
/// Example: /// Example: DV-2
/// Constraints: Minimum length = 0, Maximum length = 16
func (rcv *Item_Full) DvCode() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(74))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// United States Distinguished Visitor Code, only applicable to people.
/// Example: /// Example: DV-2
/// Constraints: Minimum length = 0, Maximum length = 16
/// Optional notes or comments about this item.
/// Example: /// Example: Example notes
/// Constraints: Minimum length = 0, Maximum length = 1024
func (rcv *Item_Full) Notes() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(76))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Optional notes or comments about this item.
/// Example: /// Example: Example notes
/// Constraints: Minimum length = 0, Maximum length = 1024
/// Array of keys that may be associated to this item. The entries in this array must correspond to the position index in the values array. This array must be the same length as values..
/// Example: /// Example: ['key1', 'key2']
/// Constraints: No constraints specified.
func (rcv *Item_Full) Keys(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(78))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *Item_Full) KeysLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(78))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

/// Array of keys that may be associated to this item. The entries in this array must correspond to the position index in the values array. This array must be the same length as values..
/// Example: /// Example: ['key1', 'key2']
/// Constraints: No constraints specified.
/// Array of values for the keys that may be associated to this tracked item. The entries in this array must correspond to the position index in the keys array. This array must be the same length as keys.
/// Example: /// Example: ['value1', 'value2']
/// Constraints: No constraints specified.
func (rcv *Item_Full) Values(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(80))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *Item_Full) ValuesLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(80))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

/// Array of values for the keys that may be associated to this tracked item. The entries in this array must correspond to the position index in the keys array. This array must be the same length as keys.
/// Example: /// Example: ['value1', 'value2']
/// Constraints: No constraints specified.
/// Name of the additional data format so downstream consuming applications can know how to parse it. Typically includes the source system name and the format name.
/// Example: /// Example: Alt Data Format
/// Constraints: Minimum length = 0, Maximum length = 100
func (rcv *Item_Full) AltDataFormat() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(82))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Name of the additional data format so downstream consuming applications can know how to parse it. Typically includes the source system name and the format name.
/// Example: /// Example: Alt Data Format
/// Constraints: Minimum length = 0, Maximum length = 100
/// Name of the system that accepted this item from a customer. Where a user or application could go look for additional information.
/// Example: /// Example: Accepting System
/// Constraints: Minimum length = 0, Maximum length = 100
func (rcv *Item_Full) AccSystem() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(84))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Name of the system that accepted this item from a customer. Where a user or application could go look for additional information.
/// Example: /// Example: Accepting System
/// Constraints: Minimum length = 0, Maximum length = 100
/// Additional data required to find this item in the accepting system.
/// Example: /// Example: Accepting System Notes
/// Constraints: Minimum length = 0, Maximum length = 1024
func (rcv *Item_Full) AccSysNotes() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(86))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Additional data required to find this item in the accepting system.
/// Example: /// Example: Accepting System Notes
/// Constraints: Minimum length = 0, Maximum length = 1024
/// Array of keys that may be associated to the accepting system data. The entries in this array must correspond to the position index in accSysValues array. This array must be the same length as accSysValues.
/// Example: /// Example: ['System key1', 'System key2']
/// Constraints: No constraints specified.
func (rcv *Item_Full) AccSysKeys(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(88))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *Item_Full) AccSysKeysLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(88))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

/// Array of keys that may be associated to the accepting system data. The entries in this array must correspond to the position index in accSysValues array. This array must be the same length as accSysValues.
/// Example: /// Example: ['System key1', 'System key2']
/// Constraints: No constraints specified.
/// Array of values for the keys that may be associated to the accepting system data. The entries in this array must correspond to the position index in accSysKeys array. This array must be the same length as accSysKeys.
/// Example: /// Example: ['System value1', 'System value2']
/// Constraints: No constraints specified.
func (rcv *Item_Full) AccSysValues(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(90))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *Item_Full) AccSysValuesLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(90))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

/// Array of values for the keys that may be associated to the accepting system data. The entries in this array must correspond to the position index in accSysKeys array. This array must be the same length as accSysKeys.
/// Example: /// Example: ['System value1', 'System value2']
/// Constraints: No constraints specified.
/// Time the row was created in the database, auto-populated by the system.
/// Example: /// Example: 2023-03-21T16:00:00.123Z
/// Constraints: No constraints specified.
func (rcv *Item_Full) CreatedAt() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(92))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Time the row was created in the database, auto-populated by the system.
/// Example: /// Example: 2023-03-21T16:00:00.123Z
/// Constraints: No constraints specified.
/// Application user who created the row in the database, auto-populated by the system.
/// Example: /// Example: some.user
/// Constraints: Minimum length = 1, Maximum length = 64
func (rcv *Item_Full) CreatedBy() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(94))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Application user who created the row in the database, auto-populated by the system.
/// Example: /// Example: some.user
/// Constraints: Minimum length = 1, Maximum length = 64
/// Time the row was last updated in the database, auto-populated by the system.
/// Example: /// Example: 2022-01-01T16:00:00.123Z
/// Constraints: No constraints specified.
func (rcv *Item_Full) UpdatedAt() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(96))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Time the row was last updated in the database, auto-populated by the system.
/// Example: /// Example: 2022-01-01T16:00:00.123Z
/// Constraints: No constraints specified.
/// Application user who updated the row in the database, auto-populated by the system.
/// Example: /// Example: some.user
/// Constraints: Minimum length = 0, Maximum length = 64
func (rcv *Item_Full) UpdatedBy() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(98))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Application user who updated the row in the database, auto-populated by the system.
/// Example: /// Example: some.user
/// Constraints: Minimum length = 0, Maximum length = 64
/// The source data library from which this record was received. This could be a remote or tactical UDL or another data library. If null, the record should be assumed to have originated from the primary Enterprise UDL.
/// Example: /// Example: AXE
/// Constraints: Minimum length = 0, Maximum length = 64
func (rcv *Item_Full) SourceDl() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(100))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The source data library from which this record was received. This could be a remote or tactical UDL or another data library. If null, the record should be assumed to have originated from the primary Enterprise UDL.
/// Example: /// Example: AXE
/// Constraints: Minimum length = 0, Maximum length = 64
/// Source of the data.
/// Example: /// Example: Bluestaq
/// Constraints: Minimum length = 1, Maximum length = 36
func (rcv *Item_Full) Source() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(102))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Source of the data.
/// Example: /// Example: Bluestaq
/// Constraints: Minimum length = 1, Maximum length = 36
/// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
/// Example: /// Example: THIRD_PARTY_DATASOURCE
/// Constraints: Minimum length = 0, Maximum length = 64
func (rcv *Item_Full) Origin() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(104))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
/// Example: /// Example: THIRD_PARTY_DATASOURCE
/// Constraints: Minimum length = 0, Maximum length = 64
/// The originating source network on which this record was created, auto-populated by the system.
/// Example: /// Example: OPS1
/// Constraints: Minimum length = 1, Maximum length = 32
func (rcv *Item_Full) OrigNetwork() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(106))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The originating source network on which this record was created, auto-populated by the system.
/// Example: /// Example: OPS1
/// Constraints: Minimum length = 1, Maximum length = 32
/// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
/// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
/// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
/// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
/// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
/// Example: /// Example: TEST
/// Constraints: Minimum length = 1, Maximum length = 32
func (rcv *Item_Full) DataMode() Item_Full_dataMode_Enum {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(108))
	if o != 0 {
		return Item_Full_dataMode_Enum(rcv._tab.GetInt8(o + rcv._tab.Pos))
	}
	return 0
}

/// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
/// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
/// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
/// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
/// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
/// Example: /// Example: TEST
/// Constraints: Minimum length = 1, Maximum length = 32
func (rcv *Item_Full) MutateDataMode(n Item_Full_dataMode_Enum) bool {
	return rcv._tab.MutateInt8Slot(108, int8(n))
}

func Item_FullStart(builder *flatbuffers.Builder) {
	builder.StartObject(53)
}
func Item_FullAddId(builder *flatbuffers.Builder, id flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(id), 0)
}
func Item_FullAddClassificationMarking(builder *flatbuffers.Builder, classificationMarking flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(classificationMarking), 0)
}
func Item_FullAddIdAirLoadPlan(builder *flatbuffers.Builder, idAirLoadPlan flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(idAirLoadPlan), 0)
}
func Item_FullAddScanCode(builder *flatbuffers.Builder, scanCode flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(3, flatbuffers.UOffsetT(scanCode), 0)
}
func Item_FullAddScGenTool(builder *flatbuffers.Builder, scGenTool flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(4, flatbuffers.UOffsetT(scGenTool), 0)
}
func Item_FullAddType(builder *flatbuffers.Builder, type_ flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(5, flatbuffers.UOffsetT(type_), 0)
}
func Item_FullAddCargoType(builder *flatbuffers.Builder, cargoType flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(6, flatbuffers.UOffsetT(cargoType), 0)
}
func Item_FullAddName(builder *flatbuffers.Builder, name flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(7, flatbuffers.UOffsetT(name), 0)
}
func Item_FullAddDestination(builder *flatbuffers.Builder, destination flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(8, flatbuffers.UOffsetT(destination), 0)
}
func Item_FullAddDeparture(builder *flatbuffers.Builder, departure flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(9, flatbuffers.UOffsetT(departure), 0)
}
func Item_FullAddReceivingUnit(builder *flatbuffers.Builder, receivingUnit flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(10, flatbuffers.UOffsetT(receivingUnit), 0)
}
func Item_FullAddReceivingBranch(builder *flatbuffers.Builder, receivingBranch flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(11, flatbuffers.UOffsetT(receivingBranch), 0)
}
func Item_FullAddLastArrDate(builder *flatbuffers.Builder, lastArrDate flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(12, flatbuffers.UOffsetT(lastArrDate), 0)
}
func Item_FullAddUln(builder *flatbuffers.Builder, uln flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(13, flatbuffers.UOffsetT(uln), 0)
}
func Item_FullAddWeight(builder *flatbuffers.Builder, weight float64) {
	builder.PrependFloat64Slot(14, weight, 0.0)
}
func Item_FullAddWeightTs(builder *flatbuffers.Builder, weightTs flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(15, flatbuffers.UOffsetT(weightTs), 0)
}
func Item_FullAddCommodityCode(builder *flatbuffers.Builder, commodityCode flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(16, flatbuffers.UOffsetT(commodityCode), 0)
}
func Item_FullAddCommoditySys(builder *flatbuffers.Builder, commoditySys flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(17, flatbuffers.UOffsetT(commoditySys), 0)
}
func Item_FullAddProductCode(builder *flatbuffers.Builder, productCode flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(18, flatbuffers.UOffsetT(productCode), 0)
}
func Item_FullAddProductSys(builder *flatbuffers.Builder, productSys flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(19, flatbuffers.UOffsetT(productSys), 0)
}
func Item_FullAddWidth(builder *flatbuffers.Builder, width float64) {
	builder.PrependFloat64Slot(20, width, 0.0)
}
func Item_FullAddLength(builder *flatbuffers.Builder, length float64) {
	builder.PrependFloat64Slot(21, length, 0.0)
}
func Item_FullAddHeight(builder *flatbuffers.Builder, height float64) {
	builder.PrependFloat64Slot(22, height, 0.0)
}
func Item_FullAddVolume(builder *flatbuffers.Builder, volume float64) {
	builder.PrependFloat64Slot(23, volume, 0.0)
}
func Item_FullAddCg(builder *flatbuffers.Builder, cg float64) {
	builder.PrependFloat64Slot(24, cg, 0.0)
}
func Item_FullAddFs(builder *flatbuffers.Builder, fs float64) {
	builder.PrependFloat64Slot(25, fs, 0.0)
}
func Item_FullAddCenterlineOffset(builder *flatbuffers.Builder, centerlineOffset float64) {
	builder.PrependFloat64Slot(26, centerlineOffset, 0.0)
}
func Item_FullAddMoment(builder *flatbuffers.Builder, moment float64) {
	builder.PrependFloat64Slot(27, moment, 0.0)
}
func Item_FullAddAirdrop(builder *flatbuffers.Builder, airdrop bool) {
	builder.PrependBoolSlot(28, airdrop, false)
}
func Item_FullAddTcn(builder *flatbuffers.Builder, tcn flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(29, flatbuffers.UOffsetT(tcn), 0)
}
func Item_FullAddHazCodes(builder *flatbuffers.Builder, hazCodes flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(30, flatbuffers.UOffsetT(hazCodes), 0)
}
func Item_FullStartHazCodesVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func Item_FullAddNetExpWt(builder *flatbuffers.Builder, netExpWt float64) {
	builder.PrependFloat64Slot(31, netExpWt, 0.0)
}
func Item_FullAddContainer(builder *flatbuffers.Builder, container bool) {
	builder.PrependBoolSlot(32, container, false)
}
func Item_FullAddItemContains(builder *flatbuffers.Builder, itemContains flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(33, flatbuffers.UOffsetT(itemContains), 0)
}
func Item_FullStartItemContainsVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func Item_FullAddNumPalletPos(builder *flatbuffers.Builder, numPalletPos int32) {
	builder.PrependInt32Slot(34, numPalletPos, 0)
}
func Item_FullAddDvCode(builder *flatbuffers.Builder, dvCode flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(35, flatbuffers.UOffsetT(dvCode), 0)
}
func Item_FullAddNotes(builder *flatbuffers.Builder, notes flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(36, flatbuffers.UOffsetT(notes), 0)
}
func Item_FullAddKeys(builder *flatbuffers.Builder, keys flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(37, flatbuffers.UOffsetT(keys), 0)
}
func Item_FullStartKeysVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func Item_FullAddValues(builder *flatbuffers.Builder, values flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(38, flatbuffers.UOffsetT(values), 0)
}
func Item_FullStartValuesVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func Item_FullAddAltDataFormat(builder *flatbuffers.Builder, altDataFormat flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(39, flatbuffers.UOffsetT(altDataFormat), 0)
}
func Item_FullAddAccSystem(builder *flatbuffers.Builder, accSystem flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(40, flatbuffers.UOffsetT(accSystem), 0)
}
func Item_FullAddAccSysNotes(builder *flatbuffers.Builder, accSysNotes flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(41, flatbuffers.UOffsetT(accSysNotes), 0)
}
func Item_FullAddAccSysKeys(builder *flatbuffers.Builder, accSysKeys flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(42, flatbuffers.UOffsetT(accSysKeys), 0)
}
func Item_FullStartAccSysKeysVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func Item_FullAddAccSysValues(builder *flatbuffers.Builder, accSysValues flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(43, flatbuffers.UOffsetT(accSysValues), 0)
}
func Item_FullStartAccSysValuesVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func Item_FullAddCreatedAt(builder *flatbuffers.Builder, createdAt flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(44, flatbuffers.UOffsetT(createdAt), 0)
}
func Item_FullAddCreatedBy(builder *flatbuffers.Builder, createdBy flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(45, flatbuffers.UOffsetT(createdBy), 0)
}
func Item_FullAddUpdatedAt(builder *flatbuffers.Builder, updatedAt flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(46, flatbuffers.UOffsetT(updatedAt), 0)
}
func Item_FullAddUpdatedBy(builder *flatbuffers.Builder, updatedBy flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(47, flatbuffers.UOffsetT(updatedBy), 0)
}
func Item_FullAddSourceDl(builder *flatbuffers.Builder, sourceDl flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(48, flatbuffers.UOffsetT(sourceDl), 0)
}
func Item_FullAddSource(builder *flatbuffers.Builder, source flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(49, flatbuffers.UOffsetT(source), 0)
}
func Item_FullAddOrigin(builder *flatbuffers.Builder, origin flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(50, flatbuffers.UOffsetT(origin), 0)
}
func Item_FullAddOrigNetwork(builder *flatbuffers.Builder, origNetwork flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(51, flatbuffers.UOffsetT(origNetwork), 0)
}
func Item_FullAddDataMode(builder *flatbuffers.Builder, dataMode Item_Full_dataMode_Enum) {
	builder.PrependInt8Slot(52, int8(dataMode), 0)
}
func Item_FullEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
