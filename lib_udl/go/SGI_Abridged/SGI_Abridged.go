// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package SGI_Abridged

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

/// /// Model representation of space weather/solar, geomagnetic, and radiation belt indices.
type SGI_Abridged struct {
	_tab flatbuffers.Table
}

const SGI_AbridgedIdentifier = "SGIA"

func GetRootAsSGI_Abridged(buf []byte, offset flatbuffers.UOffsetT) *SGI_Abridged {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &SGI_Abridged{}
	x.Init(buf, n+offset)
	return x
}

func FinishSGI_AbridgedBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	identifierBytes := []byte(SGI_AbridgedIdentifier)
	builder.FinishWithFileIdentifier(offset, identifierBytes)
}

func SGI_AbridgedBufferHasIdentifier(buf []byte) bool {
	return flatbuffers.BufferHasIdentifier(buf, SGI_AbridgedIdentifier)
}

func GetSizePrefixedRootAsSGI_Abridged(buf []byte, offset flatbuffers.UOffsetT) *SGI_Abridged {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &SGI_Abridged{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedSGI_AbridgedBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	identifierBytes := []byte(SGI_AbridgedIdentifier)
	builder.FinishSizePrefixedWithFileIdentifier(offset, identifierBytes)
}

func SizePrefixedSGI_AbridgedBufferHasIdentifier(buf []byte) bool {
	return flatbuffers.SizePrefixedBufferHasIdentifier(buf, SGI_AbridgedIdentifier)
}

func (rcv *SGI_Abridged) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *SGI_Abridged) Table() flatbuffers.Table {
	return rcv._tab
}

/// Unique identifier of the record, auto-generated by the system.
/// Example: /// Example: SGI-ID
/// Constraints: Minimum length = 1, Maximum length = 36
func (rcv *SGI_Abridged) Id() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Unique identifier of the record, auto-generated by the system.
/// Example: /// Example: SGI-ID
/// Constraints: Minimum length = 1, Maximum length = 36
/// Classification marking of the data in IC/CAPCO Portion-marked format.
/// Example: /// Example: U
/// Constraints: Minimum length = 1, Maximum length = 128
func (rcv *SGI_Abridged) ClassificationMarking() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Classification marking of the data in IC/CAPCO Portion-marked format.
/// Example: /// Example: U
/// Constraints: Minimum length = 1, Maximum length = 128
/// ISO8601 UTC Time the data was received and processed from the source. Typically a source provides data for a date window with each transmission including past, present, and future predicted values.
/// Example: /// Example: 2018-01-01T16:00:00.123Z
/// Constraints: No constraints specified.
func (rcv *SGI_Abridged) EffectiveDate() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// ISO8601 UTC Time the data was received and processed from the source. Typically a source provides data for a date window with each transmission including past, present, and future predicted values.
/// Example: /// Example: 2018-01-01T16:00:00.123Z
/// Constraints: No constraints specified.
/// ISO8601 UTC Time of the index value. This could be a past, current, or future predicted value. Note: sgiDate defines the start time of the time window for this  data record.
/// Example: /// Example: 2018-01-01T16:00:00.123Z
/// Constraints: No constraints specified.
func (rcv *SGI_Abridged) SgiDate() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// ISO8601 UTC Time of the index value. This could be a past, current, or future predicted value. Note: sgiDate defines the start time of the time window for this  data record.
/// Example: /// Example: 2018-01-01T16:00:00.123Z
/// Constraints: No constraints specified.
/// The type of data contained in this record (e.g. HASDM, JBH09, K-Index, PSD-dB, RBI, RFI-SFU, etc).
/// Example: /// Example: JBH09
/// Constraints: Minimum length = 0, Maximum length = 32
func (rcv *SGI_Abridged) Type() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The type of data contained in this record (e.g. HASDM, JBH09, K-Index, PSD-dB, RBI, RFI-SFU, etc).
/// Example: /// Example: JBH09
/// Constraints: Minimum length = 0, Maximum length = 32
/// State indicating Issued (I), Nowcast (N), or Predicted (P) values for this record.
/// Example: /// Example: I
/// Constraints: Minimum length = 0, Maximum length = 1
func (rcv *SGI_Abridged) State() SGI_Abridged_state_Enum {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return SGI_Abridged_state_Enum(rcv._tab.GetInt8(o + rcv._tab.Pos))
	}
	return 0
}

/// State indicating Issued (I), Nowcast (N), or Predicted (P) values for this record.
/// Example: /// Example: I
/// Constraints: Minimum length = 0, Maximum length = 1
func (rcv *SGI_Abridged) MutateState(n SGI_Abridged_state_Enum) bool {
	return rcv._tab.MutateInt8Slot(14, int8(n))
}

/// The name/location of the station that collected the geomagnetic data for this record.
/// Example: /// Example: Boulder
/// Constraints: Minimum length = 0, Maximum length = 24
func (rcv *SGI_Abridged) StationName() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The name/location of the station that collected the geomagnetic data for this record.
/// Example: /// Example: Boulder
/// Constraints: Minimum length = 0, Maximum length = 24
/// Unique identifier of the reporting sensor.
/// Example: /// Example: 57c96c97-e076-48af-a068-73ee2cb37e65
/// Constraints: Minimum length = 0, Maximum length = 36
func (rcv *SGI_Abridged) IdSensor() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(18))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Unique identifier of the reporting sensor.
/// Example: /// Example: 57c96c97-e076-48af-a068-73ee2cb37e65
/// Constraints: Minimum length = 0, Maximum length = 36
/// Optional identifier provided by the reporting source to indicate the sensor identifier which produced this data. This may be an internal identifier and not necessarily a valid sensor ID.
/// Example: /// Example: ORIGSENSOR-ID
/// Constraints: Minimum length = 0, Maximum length = 64
func (rcv *SGI_Abridged) OrigSensorId() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(20))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Optional identifier provided by the reporting source to indicate the sensor identifier which produced this data. This may be an internal identifier and not necessarily a valid sensor ID.
/// Example: /// Example: ORIGSENSOR-ID
/// Constraints: Minimum length = 0, Maximum length = 64
/// The transmitted DCA mode of the record (1-3).
/// Example: /// Example: 1
/// Constraints: No constraints specified.
func (rcv *SGI_Abridged) Mode() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(22))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

/// The transmitted DCA mode of the record (1-3).
/// Example: /// Example: 1
/// Constraints: No constraints specified.
func (rcv *SGI_Abridged) MutateMode(n int32) bool {
	return rcv._tab.MutateInt32Slot(22, n)
}

/// The precedence of data in this record (O = Immediate, P = Priority, R = Routine, Y = Emergency, Z = Flash).
/// Example: /// Example: R
/// Constraints: Minimum length = 0, Maximum length = 1
func (rcv *SGI_Abridged) Precedence() SGI_Abridged_precedence_Enum {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(24))
	if o != 0 {
		return SGI_Abridged_precedence_Enum(rcv._tab.GetInt8(o + rcv._tab.Pos))
	}
	return 0
}

/// The precedence of data in this record (O = Immediate, P = Priority, R = Routine, Y = Emergency, Z = Flash).
/// Example: /// Example: R
/// Constraints: Minimum length = 0, Maximum length = 1
func (rcv *SGI_Abridged) MutatePrecedence(n SGI_Abridged_precedence_Enum) bool {
	return rcv._tab.MutateInt8Slot(24, int8(n))
}

/// Array containing the degree of the temperature coefficients. The coeffDegree and coeffOrder arrays must be the same length.
/// Example: /// Example: [1, 2, 3]
/// Constraints: No constraints specified.
func (rcv *SGI_Abridged) CoeffDegree(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(26))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *SGI_Abridged) CoeffDegreeLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(26))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

/// Array containing the degree of the temperature coefficients. The coeffDegree and coeffOrder arrays must be the same length.
/// Example: /// Example: [1, 2, 3]
/// Constraints: No constraints specified.
/// Array containing the order of the temperature coefficients. The coeffDegree and coeffOrder arrays must be the same length.
/// Example: /// Example: [1, 2, 3]
/// Constraints: No constraints specified.
func (rcv *SGI_Abridged) CoeffOrder(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(28))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *SGI_Abridged) CoeffOrderLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(28))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

/// Array containing the order of the temperature coefficients. The coeffDegree and coeffOrder arrays must be the same length.
/// Example: /// Example: [1, 2, 3]
/// Constraints: No constraints specified.
/// Array containing the cosine spherical-harmonic coefficients for Exospheric temperature (DTC) difference.  Each array element corresponds to the positional index of the coeffDegree and coeffOrder arrays.
/// Example: /// Example: [1.23, 342.3, 1.32]
/// Constraints: No constraints specified.
func (rcv *SGI_Abridged) Ctce(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(30))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *SGI_Abridged) CtceLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(30))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

/// Array containing the cosine spherical-harmonic coefficients for Exospheric temperature (DTC) difference.  Each array element corresponds to the positional index of the coeffDegree and coeffOrder arrays.
/// Example: /// Example: [1.23, 342.3, 1.32]
/// Constraints: No constraints specified.
/// Array containing the sine spherical-harmonic coefficients for Exospheric temperature (DTC) difference.  Each array element corresponds to the positional index of the coeffDegree and coeffOrder arrays.
/// Example: /// Example: [1.23, 342.3, 1.32]
/// Constraints: No constraints specified.
func (rcv *SGI_Abridged) Stce(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(32))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *SGI_Abridged) StceLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(32))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

/// Array containing the sine spherical-harmonic coefficients for Exospheric temperature (DTC) difference.  Each array element corresponds to the positional index of the coeffDegree and coeffOrder arrays.
/// Example: /// Example: [1.23, 342.3, 1.32]
/// Constraints: No constraints specified.
/// Array containing the cosine spherical-harmonic coefficients for Inflection temperature (DTX) difference.  Each array element corresponds to the positional index of the coeffDegree and coeffOrder arrays.
/// Example: /// Example: [1.23, 342.3, 1.32]
/// Constraints: No constraints specified.
func (rcv *SGI_Abridged) Ctci(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(34))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *SGI_Abridged) CtciLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(34))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

/// Array containing the cosine spherical-harmonic coefficients for Inflection temperature (DTX) difference.  Each array element corresponds to the positional index of the coeffDegree and coeffOrder arrays.
/// Example: /// Example: [1.23, 342.3, 1.32]
/// Constraints: No constraints specified.
/// Array containing the sine spherical harmonic coefficients for Inflection temperature (DTX) difference.  Each array element corresponds to the positional index of the coeffDegree and coeffOrder arrays.
/// Example: /// Example: [1.23, 342.3, 1.32]
/// Constraints: No constraints specified.
func (rcv *SGI_Abridged) Stci(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(36))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *SGI_Abridged) StciLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(36))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

/// Array containing the sine spherical harmonic coefficients for Inflection temperature (DTX) difference.  Each array element corresponds to the positional index of the coeffDegree and coeffOrder arrays.
/// Example: /// Example: [1.23, 342.3, 1.32]
/// Constraints: No constraints specified.
/// Extreme Ultraviolet (EUV) proxy, E10.7, in x10-22 Watts per meter squared per Hertz, is the integrated solar EUV energy flux at the top of atmosphere and normalized to solar flux units.
/// Example: /// Example: 1.23
/// Constraints: No constraints specified.
func (rcv *SGI_Abridged) E10() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(38))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Extreme Ultraviolet (EUV) proxy, E10.7, in x10-22 Watts per meter squared per Hertz, is the integrated solar EUV energy flux at the top of atmosphere and normalized to solar flux units.
/// Example: /// Example: 1.23
/// Constraints: No constraints specified.
func (rcv *SGI_Abridged) MutateE10(n float64) bool {
	return rcv._tab.MutateFloat64Slot(38, n)
}

/// E54 (E10-Bar), in x10-22 Watts per meter squared per Hertz, uses the past 54-days E10 values to determine the E10 average.
/// Example: /// Example: 1.23
/// Constraints: No constraints specified.
func (rcv *SGI_Abridged) E54() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(40))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// E54 (E10-Bar), in x10-22 Watts per meter squared per Hertz, uses the past 54-days E10 values to determine the E10 average.
/// Example: /// Example: 1.23
/// Constraints: No constraints specified.
func (rcv *SGI_Abridged) MutateE54(n float64) bool {
	return rcv._tab.MutateFloat64Slot(40, n)
}

/// Daily S10.7 index for >200 km heating of O by solar chromosphere. 28.4-30.4 nm emissions in x10-22 Watts per meter squared per Hertz.
/// Example: /// Example: 1.23
/// Constraints: No constraints specified.
func (rcv *SGI_Abridged) S10() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(42))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Daily S10.7 index for >200 km heating of O by solar chromosphere. 28.4-30.4 nm emissions in x10-22 Watts per meter squared per Hertz.
/// Example: /// Example: 1.23
/// Constraints: No constraints specified.
func (rcv *SGI_Abridged) MutateS10(n float64) bool {
	return rcv._tab.MutateFloat64Slot(42, n)
}

/// 54 day S10.7 index for >200 km heating of O by solar chromosphere. 28.4-30.4 nm emissions in x10-22 Watts per meter squared per Hertz.
/// Example: /// Example: 1.23
/// Constraints: No constraints specified.
func (rcv *SGI_Abridged) S54() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(44))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// 54 day S10.7 index for >200 km heating of O by solar chromosphere. 28.4-30.4 nm emissions in x10-22 Watts per meter squared per Hertz.
/// Example: /// Example: 1.23
/// Constraints: No constraints specified.
func (rcv *SGI_Abridged) MutateS54(n float64) bool {
	return rcv._tab.MutateFloat64Slot(44, n)
}

/// Daily M10.7 index for 100-110 km heating of O2 by solar photosphere. 160 nm SRC emissions in x10-22 Watts per meter squared per Hertz.
/// Example: /// Example: 1.23
/// Constraints: No constraints specified.
func (rcv *SGI_Abridged) M10() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(46))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Daily M10.7 index for 100-110 km heating of O2 by solar photosphere. 160 nm SRC emissions in x10-22 Watts per meter squared per Hertz.
/// Example: /// Example: 1.23
/// Constraints: No constraints specified.
func (rcv *SGI_Abridged) MutateM10(n float64) bool {
	return rcv._tab.MutateFloat64Slot(46, n)
}

/// 54 day M10.7 index for 100-110 km heating of O2 by solar photosphere. 160 nm SRC emissions in x10-22 Watts per meter squared per Hertz.
/// Example: /// Example: 1.23
/// Constraints: No constraints specified.
func (rcv *SGI_Abridged) M54() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(48))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// 54 day M10.7 index for 100-110 km heating of O2 by solar photosphere. 160 nm SRC emissions in x10-22 Watts per meter squared per Hertz.
/// Example: /// Example: 1.23
/// Constraints: No constraints specified.
func (rcv *SGI_Abridged) MutateM54(n float64) bool {
	return rcv._tab.MutateFloat64Slot(48, n)
}

/// Daily Y10.7 index for 85-90 km heating of N2, O2, H2O, NO by solar coronal. 0.1-0.8 nm and Lya 121 nm emissions in x10-22 Watts per meter squared per Hertz.
/// Example: /// Example: 1.23
/// Constraints: No constraints specified.
func (rcv *SGI_Abridged) Y10() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(50))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Daily Y10.7 index for 85-90 km heating of N2, O2, H2O, NO by solar coronal. 0.1-0.8 nm and Lya 121 nm emissions in x10-22 Watts per meter squared per Hertz.
/// Example: /// Example: 1.23
/// Constraints: No constraints specified.
func (rcv *SGI_Abridged) MutateY10(n float64) bool {
	return rcv._tab.MutateFloat64Slot(50, n)
}

/// 54 day Y10.7 index for 85-90 km heating of N2, O2, H2O, NO by solar coronal. 0.1-0.8 nm and Lya 121 nm emissions in x10-22 Watts per meter squared per Hertz.
/// Example: /// Example: 1.23
/// Constraints: No constraints specified.
func (rcv *SGI_Abridged) Y54() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(52))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// 54 day Y10.7 index for 85-90 km heating of N2, O2, H2O, NO by solar coronal. 0.1-0.8 nm and Lya 121 nm emissions in x10-22 Watts per meter squared per Hertz.
/// Example: /// Example: 1.23
/// Constraints: No constraints specified.
func (rcv *SGI_Abridged) MutateY54(n float64) bool {
	return rcv._tab.MutateFloat64Slot(52, n)
}

/// Daily solar 10.7 cm radio flux in x10-22 Watts per meter squared per Hertz.
/// Example: /// Example: 1.23
/// Constraints: No constraints specified.
func (rcv *SGI_Abridged) F10() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(54))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Daily solar 10.7 cm radio flux in x10-22 Watts per meter squared per Hertz.
/// Example: /// Example: 1.23
/// Constraints: No constraints specified.
func (rcv *SGI_Abridged) MutateF10(n float64) bool {
	return rcv._tab.MutateFloat64Slot(54, n)
}

/// 54 day solar 10.7 cm radio flux in x10-22 Watts per meter squared per Hertz.
/// Example: /// Example: 1.23
/// Constraints: No constraints specified.
func (rcv *SGI_Abridged) F54() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(56))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// 54 day solar 10.7 cm radio flux in x10-22 Watts per meter squared per Hertz.
/// Example: /// Example: 1.23
/// Constraints: No constraints specified.
func (rcv *SGI_Abridged) MutateF54(n float64) bool {
	return rcv._tab.MutateFloat64Slot(56, n)
}

/// 81 day solar 10.7 cm radio flux in x10-22 Watts per meter squared per Hertz.
/// Example: /// Example: 1.23
/// Constraints: No constraints specified.
func (rcv *SGI_Abridged) F81() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(58))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// 81 day solar 10.7 cm radio flux in x10-22 Watts per meter squared per Hertz.
/// Example: /// Example: 1.23
/// Constraints: No constraints specified.
func (rcv *SGI_Abridged) MutateF81(n float64) bool {
	return rcv._tab.MutateFloat64Slot(58, n)
}

/// Ap is the planetary geomagnetic 2 nT index (00-21 UT) for the timespan specified in apDuration. If apDuration is null, a 3 hour duration should be assumed.
/// Example: /// Example: 1.23
/// Constraints: No constraints specified.
func (rcv *SGI_Abridged) Ap() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(60))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Ap is the planetary geomagnetic 2 nT index (00-21 UT) for the timespan specified in apDuration. If apDuration is null, a 3 hour duration should be assumed.
/// Example: /// Example: 1.23
/// Constraints: No constraints specified.
func (rcv *SGI_Abridged) MutateAp(n float64) bool {
	return rcv._tab.MutateFloat64Slot(60, n)
}

/// The time, in hours, for which the Ap index value is valid. If null, a span of 3 hours is assumed.
/// Example: /// Example: 3
/// Constraints: No constraints specified.
func (rcv *SGI_Abridged) ApDuration() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(62))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

/// The time, in hours, for which the Ap index value is valid. If null, a span of 3 hours is assumed.
/// Example: /// Example: 3
/// Constraints: No constraints specified.
func (rcv *SGI_Abridged) MutateApDuration(n int32) bool {
	return rcv._tab.MutateInt32Slot(62, n)
}

/// The maximum measured K-Index at the associated station during the kpDuration timespan. The K-Index is a unitless measure (0 - 9) of the deviation in the Earth's magnetic field from normal at the station geographic location, with 0 indicating the absence of geomagnetic disturbance, and 9 indicating the most significant disturbance. If kpDuration is null, a 3 hour duration should be assumed.
/// Example: /// Example: 1
/// Constraints: No constraints specified.
func (rcv *SGI_Abridged) KIndex() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(64))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

/// The maximum measured K-Index at the associated station during the kpDuration timespan. The K-Index is a unitless measure (0 - 9) of the deviation in the Earth's magnetic field from normal at the station geographic location, with 0 indicating the absence of geomagnetic disturbance, and 9 indicating the most significant disturbance. If kpDuration is null, a 3 hour duration should be assumed.
/// Example: /// Example: 1
/// Constraints: No constraints specified.
func (rcv *SGI_Abridged) MutateKIndex(n int32) bool {
	return rcv._tab.MutateInt32Slot(64, n)
}

/// The Planetary K-index (Kp) over the kpDuration timespan. The Kp-Index is the average K-Index for the entire Earth, utilizing a unitless scale (0-9, in incremenets of 1/3), with 0 indicating the absence of geomagnetic disturbance, and 9 indicating the most significant disturbance. If kpDuration is null, a 3 hour duration should be assumed.
/// Example: /// Example: 4.66
/// Constraints: No constraints specified.
func (rcv *SGI_Abridged) Kp() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(66))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// The Planetary K-index (Kp) over the kpDuration timespan. The Kp-Index is the average K-Index for the entire Earth, utilizing a unitless scale (0-9, in incremenets of 1/3), with 0 indicating the absence of geomagnetic disturbance, and 9 indicating the most significant disturbance. If kpDuration is null, a 3 hour duration should be assumed.
/// Example: /// Example: 4.66
/// Constraints: No constraints specified.
func (rcv *SGI_Abridged) MutateKp(n float64) bool {
	return rcv._tab.MutateFloat64Slot(66, n)
}

/// The time, in hours, over which the K, Kp, and/or gamma index values are measured.  If null, a span of 3 hours is assumed.
/// Example: /// Example: 3
/// Constraints: No constraints specified.
func (rcv *SGI_Abridged) KpDuration() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(68))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

/// The time, in hours, over which the K, Kp, and/or gamma index values are measured.  If null, a span of 3 hours is assumed.
/// Example: /// Example: 3
/// Constraints: No constraints specified.
func (rcv *SGI_Abridged) MutateKpDuration(n int32) bool {
	return rcv._tab.MutateInt32Slot(68, n)
}

/// The maximum measured gamma deflection during the kpDuration timespan. If kpDuration is null, a 3 hour duration should be assumed.
/// Example: /// Example: 25
/// Constraints: No constraints specified.
func (rcv *SGI_Abridged) Gamma() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(70))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

/// The maximum measured gamma deflection during the kpDuration timespan. If kpDuration is null, a 3 hour duration should be assumed.
/// Example: /// Example: 25
/// Constraints: No constraints specified.
func (rcv *SGI_Abridged) MutateGamma(n int32) bool {
	return rcv._tab.MutateInt32Slot(70, n)
}

/// Disturbance Storm Time geomagnetic index in nT.
/// Example: /// Example: 1.23
/// Constraints: No constraints specified.
func (rcv *SGI_Abridged) Dst() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(72))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Disturbance Storm Time geomagnetic index in nT.
/// Example: /// Example: 1.23
/// Constraints: No constraints specified.
func (rcv *SGI_Abridged) MutateDst(n float64) bool {
	return rcv._tab.MutateFloat64Slot(72, n)
}

/// delta exospheric temperature correction in units of K.
/// Example: /// Example: 1.23
/// Constraints: No constraints specified.
func (rcv *SGI_Abridged) Dtc() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(74))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// delta exospheric temperature correction in units of K.
/// Example: /// Example: 1.23
/// Constraints: No constraints specified.
func (rcv *SGI_Abridged) MutateDtc(n float64) bool {
	return rcv._tab.MutateFloat64Slot(74, n)
}

/// Region code for the associated radiation belt index. This is the code associated with the corresponding radiation belt location. See the provider card for reference to specific region code definitions.
/// Example: /// Example: 2
/// Constraints: No constraints specified.
func (rcv *SGI_Abridged) RbRegionCode() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(76))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

/// Region code for the associated radiation belt index. This is the code associated with the corresponding radiation belt location. See the provider card for reference to specific region code definitions.
/// Example: /// Example: 2
/// Constraints: No constraints specified.
func (rcv *SGI_Abridged) MutateRbRegionCode(n int32) bool {
	return rcv._tab.MutateInt32Slot(76, n)
}

/// The value of the radiation belt index. This is the ratio of current intensity of a radiation belt to long-term average value. It's long-term average should be close to 1. Depending on the type of belt sensor, this ratio may measure Flux (number of particles / (cm^2 sec energy solid-angle)), dose rate (rad per second), or relative counts of particles per time (counts per second). The index value may also be normalized, the normalization value typically represents an average of the sensor measurements taken within a region over a given time interval. See the normFactor field for the specific normalization factor, if provided.
/// Example: /// Example: 1.02947164506
/// Constraints: No constraints specified.
func (rcv *SGI_Abridged) RbIndex() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(78))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// The value of the radiation belt index. This is the ratio of current intensity of a radiation belt to long-term average value. It's long-term average should be close to 1. Depending on the type of belt sensor, this ratio may measure Flux (number of particles / (cm^2 sec energy solid-angle)), dose rate (rad per second), or relative counts of particles per time (counts per second). The index value may also be normalized, the normalization value typically represents an average of the sensor measurements taken within a region over a given time interval. See the normFactor field for the specific normalization factor, if provided.
/// Example: /// Example: 1.02947164506
/// Constraints: No constraints specified.
func (rcv *SGI_Abridged) MutateRbIndex(n float64) bool {
	return rcv._tab.MutateFloat64Slot(78, n)
}

/// The normalization factor that has already been applied to the index value prior to record ingest. Typically used to normalize the index value to a particular interval. Units of the normalization factor may vary depending on the provider of this data (REACH, POES, CEASE3, etc.).
/// Example: /// Example: 2.12679e-07
/// Constraints: No constraints specified.
func (rcv *SGI_Abridged) NormFactor() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(80))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// The normalization factor that has already been applied to the index value prior to record ingest. Typically used to normalize the index value to a particular interval. Units of the normalization factor may vary depending on the provider of this data (REACH, POES, CEASE3, etc.).
/// Example: /// Example: 2.12679e-07
/// Constraints: No constraints specified.
func (rcv *SGI_Abridged) MutateNormFactor(n float64) bool {
	return rcv._tab.MutateFloat64Slot(80, n)
}

/// The timespan over which the associated radiation belt index is factored. If rbDuration is null, a 24 hour duration should be assumed. Note: rbDuration defines the length of the time window for this data record. The time window start time is defined by sgiDate, and the time window end time is defined by sgiDate plus rbDuration.
/// Example: /// Example: 24
/// Constraints: No constraints specified.
func (rcv *SGI_Abridged) RbDuration() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(82))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

/// The timespan over which the associated radiation belt index is factored. If rbDuration is null, a 24 hour duration should be assumed. Note: rbDuration defines the length of the time window for this data record. The time window start time is defined by sgiDate, and the time window end time is defined by sgiDate plus rbDuration.
/// Example: /// Example: 24
/// Constraints: No constraints specified.
func (rcv *SGI_Abridged) MutateRbDuration(n int32) bool {
	return rcv._tab.MutateInt32Slot(82, n)
}

/// Signal analyzer's input attenuation level, in decibels. Attenuation is a setting on the hardware that measures the power of a signal.
/// Example: /// Example: 5.1
/// Constraints: No constraints specified.
func (rcv *SGI_Abridged) AnalyzerAttenuation() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(84))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Signal analyzer's input attenuation level, in decibels. Attenuation is a setting on the hardware that measures the power of a signal.
/// Example: /// Example: 5.1
/// Constraints: No constraints specified.
func (rcv *SGI_Abridged) MutateAnalyzerAttenuation(n float64) bool {
	return rcv._tab.MutateFloat64Slot(84, n)
}

/// Optional URI location in the document repository of the raw file parsed by the system to produce this record. To download the raw file, prepend https://udl-hostname/scs/download?id= to this value.
/// Example: /// Example: rawFileURI
/// Constraints: Minimum length = 0, Maximum length = 256
func (rcv *SGI_Abridged) RawFileUri() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(86))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Optional URI location in the document repository of the raw file parsed by the system to produce this record. To download the raw file, prepend https://udl-hostname/scs/download?id= to this value.
/// Example: /// Example: rawFileURI
/// Constraints: Minimum length = 0, Maximum length = 256
/// Optional identifier to track a commercial or marketplace transaction executed to produce this data.
/// Example: /// Example: TRANSACTION-ID
/// Constraints: Minimum length = 0, Maximum length = 64
func (rcv *SGI_Abridged) TransactionId() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(88))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Optional identifier to track a commercial or marketplace transaction executed to produce this data.
/// Example: /// Example: TRANSACTION-ID
/// Constraints: Minimum length = 0, Maximum length = 64
/// Source of the data.
/// Example: /// Example: Bluestaq
/// Constraints: Minimum length = 1, Maximum length = 64
func (rcv *SGI_Abridged) Source() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(90))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Source of the data.
/// Example: /// Example: Bluestaq
/// Constraints: Minimum length = 1, Maximum length = 64
/// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
/// Example: /// Example: THIRD_PARTY_DATASOURCE
/// Constraints: Minimum length = 0, Maximum length = 64
func (rcv *SGI_Abridged) Origin() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(92))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
/// Example: /// Example: THIRD_PARTY_DATASOURCE
/// Constraints: Minimum length = 0, Maximum length = 64
/// The originating source network on which this record was created, auto-populated by the system.
/// Example: /// Example: ORIG
/// Constraints: Minimum length = 1, Maximum length = 32
func (rcv *SGI_Abridged) OrigNetwork() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(94))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The originating source network on which this record was created, auto-populated by the system.
/// Example: /// Example: ORIG
/// Constraints: Minimum length = 1, Maximum length = 32
/// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
/// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
/// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
/// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
/// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
/// Example: /// Example: TEST
/// Constraints: Minimum length = 1, Maximum length = 32
func (rcv *SGI_Abridged) DataMode() SGI_Abridged_dataMode_Enum {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(96))
	if o != 0 {
		return SGI_Abridged_dataMode_Enum(rcv._tab.GetInt8(o + rcv._tab.Pos))
	}
	return 0
}

/// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
/// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
/// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
/// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
/// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
/// Example: /// Example: TEST
/// Constraints: Minimum length = 1, Maximum length = 32
func (rcv *SGI_Abridged) MutateDataMode(n SGI_Abridged_dataMode_Enum) bool {
	return rcv._tab.MutateInt8Slot(96, int8(n))
}

/// Time the row was created in the database, auto-populated by the system.
/// Example: /// Example: 2018-01-01T16:00:00.123Z
/// Constraints: No constraints specified.
func (rcv *SGI_Abridged) CreatedAt() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(98))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Time the row was created in the database, auto-populated by the system.
/// Example: /// Example: 2018-01-01T16:00:00.123Z
/// Constraints: No constraints specified.
/// Application user who created the row in the database, auto-populated by the system.
/// Example: /// Example: some.user
/// Constraints: Minimum length = 1, Maximum length = 64
func (rcv *SGI_Abridged) CreatedBy() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(100))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Application user who created the row in the database, auto-populated by the system.
/// Example: /// Example: some.user
/// Constraints: Minimum length = 1, Maximum length = 64
func SGI_AbridgedStart(builder *flatbuffers.Builder) {
	builder.StartObject(49)
}
func SGI_AbridgedAddId(builder *flatbuffers.Builder, id flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(id), 0)
}
func SGI_AbridgedAddClassificationMarking(builder *flatbuffers.Builder, classificationMarking flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(classificationMarking), 0)
}
func SGI_AbridgedAddEffectiveDate(builder *flatbuffers.Builder, effectiveDate flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(effectiveDate), 0)
}
func SGI_AbridgedAddSgiDate(builder *flatbuffers.Builder, sgiDate flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(3, flatbuffers.UOffsetT(sgiDate), 0)
}
func SGI_AbridgedAddType(builder *flatbuffers.Builder, type_ flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(4, flatbuffers.UOffsetT(type_), 0)
}
func SGI_AbridgedAddState(builder *flatbuffers.Builder, state SGI_Abridged_state_Enum) {
	builder.PrependInt8Slot(5, int8(state), 0)
}
func SGI_AbridgedAddStationName(builder *flatbuffers.Builder, stationName flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(6, flatbuffers.UOffsetT(stationName), 0)
}
func SGI_AbridgedAddIdSensor(builder *flatbuffers.Builder, idSensor flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(7, flatbuffers.UOffsetT(idSensor), 0)
}
func SGI_AbridgedAddOrigSensorId(builder *flatbuffers.Builder, origSensorId flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(8, flatbuffers.UOffsetT(origSensorId), 0)
}
func SGI_AbridgedAddMode(builder *flatbuffers.Builder, mode int32) {
	builder.PrependInt32Slot(9, mode, 0)
}
func SGI_AbridgedAddPrecedence(builder *flatbuffers.Builder, precedence SGI_Abridged_precedence_Enum) {
	builder.PrependInt8Slot(10, int8(precedence), 0)
}
func SGI_AbridgedAddCoeffDegree(builder *flatbuffers.Builder, coeffDegree flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(11, flatbuffers.UOffsetT(coeffDegree), 0)
}
func SGI_AbridgedStartCoeffDegreeVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func SGI_AbridgedAddCoeffOrder(builder *flatbuffers.Builder, coeffOrder flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(12, flatbuffers.UOffsetT(coeffOrder), 0)
}
func SGI_AbridgedStartCoeffOrderVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func SGI_AbridgedAddCtce(builder *flatbuffers.Builder, ctce flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(13, flatbuffers.UOffsetT(ctce), 0)
}
func SGI_AbridgedStartCtceVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func SGI_AbridgedAddStce(builder *flatbuffers.Builder, stce flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(14, flatbuffers.UOffsetT(stce), 0)
}
func SGI_AbridgedStartStceVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func SGI_AbridgedAddCtci(builder *flatbuffers.Builder, ctci flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(15, flatbuffers.UOffsetT(ctci), 0)
}
func SGI_AbridgedStartCtciVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func SGI_AbridgedAddStci(builder *flatbuffers.Builder, stci flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(16, flatbuffers.UOffsetT(stci), 0)
}
func SGI_AbridgedStartStciVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func SGI_AbridgedAddE10(builder *flatbuffers.Builder, e10 float64) {
	builder.PrependFloat64Slot(17, e10, 0.0)
}
func SGI_AbridgedAddE54(builder *flatbuffers.Builder, e54 float64) {
	builder.PrependFloat64Slot(18, e54, 0.0)
}
func SGI_AbridgedAddS10(builder *flatbuffers.Builder, s10 float64) {
	builder.PrependFloat64Slot(19, s10, 0.0)
}
func SGI_AbridgedAddS54(builder *flatbuffers.Builder, s54 float64) {
	builder.PrependFloat64Slot(20, s54, 0.0)
}
func SGI_AbridgedAddM10(builder *flatbuffers.Builder, m10 float64) {
	builder.PrependFloat64Slot(21, m10, 0.0)
}
func SGI_AbridgedAddM54(builder *flatbuffers.Builder, m54 float64) {
	builder.PrependFloat64Slot(22, m54, 0.0)
}
func SGI_AbridgedAddY10(builder *flatbuffers.Builder, y10 float64) {
	builder.PrependFloat64Slot(23, y10, 0.0)
}
func SGI_AbridgedAddY54(builder *flatbuffers.Builder, y54 float64) {
	builder.PrependFloat64Slot(24, y54, 0.0)
}
func SGI_AbridgedAddF10(builder *flatbuffers.Builder, f10 float64) {
	builder.PrependFloat64Slot(25, f10, 0.0)
}
func SGI_AbridgedAddF54(builder *flatbuffers.Builder, f54 float64) {
	builder.PrependFloat64Slot(26, f54, 0.0)
}
func SGI_AbridgedAddF81(builder *flatbuffers.Builder, f81 float64) {
	builder.PrependFloat64Slot(27, f81, 0.0)
}
func SGI_AbridgedAddAp(builder *flatbuffers.Builder, ap float64) {
	builder.PrependFloat64Slot(28, ap, 0.0)
}
func SGI_AbridgedAddApDuration(builder *flatbuffers.Builder, apDuration int32) {
	builder.PrependInt32Slot(29, apDuration, 0)
}
func SGI_AbridgedAddKIndex(builder *flatbuffers.Builder, kIndex int32) {
	builder.PrependInt32Slot(30, kIndex, 0)
}
func SGI_AbridgedAddKp(builder *flatbuffers.Builder, kp float64) {
	builder.PrependFloat64Slot(31, kp, 0.0)
}
func SGI_AbridgedAddKpDuration(builder *flatbuffers.Builder, kpDuration int32) {
	builder.PrependInt32Slot(32, kpDuration, 0)
}
func SGI_AbridgedAddGamma(builder *flatbuffers.Builder, gamma int32) {
	builder.PrependInt32Slot(33, gamma, 0)
}
func SGI_AbridgedAddDst(builder *flatbuffers.Builder, dst float64) {
	builder.PrependFloat64Slot(34, dst, 0.0)
}
func SGI_AbridgedAddDtc(builder *flatbuffers.Builder, dtc float64) {
	builder.PrependFloat64Slot(35, dtc, 0.0)
}
func SGI_AbridgedAddRbRegionCode(builder *flatbuffers.Builder, rbRegionCode int32) {
	builder.PrependInt32Slot(36, rbRegionCode, 0)
}
func SGI_AbridgedAddRbIndex(builder *flatbuffers.Builder, rbIndex float64) {
	builder.PrependFloat64Slot(37, rbIndex, 0.0)
}
func SGI_AbridgedAddNormFactor(builder *flatbuffers.Builder, normFactor float64) {
	builder.PrependFloat64Slot(38, normFactor, 0.0)
}
func SGI_AbridgedAddRbDuration(builder *flatbuffers.Builder, rbDuration int32) {
	builder.PrependInt32Slot(39, rbDuration, 0)
}
func SGI_AbridgedAddAnalyzerAttenuation(builder *flatbuffers.Builder, analyzerAttenuation float64) {
	builder.PrependFloat64Slot(40, analyzerAttenuation, 0.0)
}
func SGI_AbridgedAddRawFileUri(builder *flatbuffers.Builder, rawFileUri flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(41, flatbuffers.UOffsetT(rawFileUri), 0)
}
func SGI_AbridgedAddTransactionId(builder *flatbuffers.Builder, transactionId flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(42, flatbuffers.UOffsetT(transactionId), 0)
}
func SGI_AbridgedAddSource(builder *flatbuffers.Builder, source flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(43, flatbuffers.UOffsetT(source), 0)
}
func SGI_AbridgedAddOrigin(builder *flatbuffers.Builder, origin flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(44, flatbuffers.UOffsetT(origin), 0)
}
func SGI_AbridgedAddOrigNetwork(builder *flatbuffers.Builder, origNetwork flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(45, flatbuffers.UOffsetT(origNetwork), 0)
}
func SGI_AbridgedAddDataMode(builder *flatbuffers.Builder, dataMode SGI_Abridged_dataMode_Enum) {
	builder.PrependInt8Slot(46, int8(dataMode), 0)
}
func SGI_AbridgedAddCreatedAt(builder *flatbuffers.Builder, createdAt flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(47, flatbuffers.UOffsetT(createdAt), 0)
}
func SGI_AbridgedAddCreatedBy(builder *flatbuffers.Builder, createdBy flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(48, flatbuffers.UOffsetT(createdBy), 0)
}
func SGI_AbridgedEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
