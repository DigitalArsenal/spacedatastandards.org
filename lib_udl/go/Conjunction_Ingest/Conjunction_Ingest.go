// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package Conjunction_Ingest

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

/// /// Stores the results of a particular Conjunction Assessment (CA) run.
type Conjunction_Ingest struct {
	_tab flatbuffers.Table
}

const Conjunction_IngestIdentifier = "CONJ"

func GetRootAsConjunction_Ingest(buf []byte, offset flatbuffers.UOffsetT) *Conjunction_Ingest {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &Conjunction_Ingest{}
	x.Init(buf, n+offset)
	return x
}

func FinishConjunction_IngestBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	identifierBytes := []byte(Conjunction_IngestIdentifier)
	builder.FinishWithFileIdentifier(offset, identifierBytes)
}

func Conjunction_IngestBufferHasIdentifier(buf []byte) bool {
	return flatbuffers.BufferHasIdentifier(buf, Conjunction_IngestIdentifier)
}

func GetSizePrefixedRootAsConjunction_Ingest(buf []byte, offset flatbuffers.UOffsetT) *Conjunction_Ingest {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &Conjunction_Ingest{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedConjunction_IngestBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	identifierBytes := []byte(Conjunction_IngestIdentifier)
	builder.FinishSizePrefixedWithFileIdentifier(offset, identifierBytes)
}

func SizePrefixedConjunction_IngestBufferHasIdentifier(buf []byte) bool {
	return flatbuffers.SizePrefixedBufferHasIdentifier(buf, Conjunction_IngestIdentifier)
}

func (rcv *Conjunction_Ingest) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *Conjunction_Ingest) Table() flatbuffers.Table {
	return rcv._tab
}

/// Unique identifier of the record, auto-generated by the system.
/// Example: /// Example: CONJUNCTION-ID
/// Constraints: Minimum length = 0, Maximum length = 36
func (rcv *Conjunction_Ingest) Id() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Unique identifier of the record, auto-generated by the system.
/// Example: /// Example: CONJUNCTION-ID
/// Constraints: Minimum length = 0, Maximum length = 36
/// Classification marking of the data in IC/CAPCO Portion-marked format.
/// Example: /// Example: U
/// Constraints: Minimum length = 1, Maximum length = 128
func (rcv *Conjunction_Ingest) ClassificationMarking() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Classification marking of the data in IC/CAPCO Portion-marked format.
/// Example: /// Example: U
/// Constraints: Minimum length = 1, Maximum length = 128
/// Unique identifier of the primary satellite on-orbit object, if correlated.
/// Example: /// Example: ONORBIT1-ID
/// Constraints: Minimum length = 0, Maximum length = 36
func (rcv *Conjunction_Ingest) IdOnOrbit1() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Unique identifier of the primary satellite on-orbit object, if correlated.
/// Example: /// Example: ONORBIT1-ID
/// Constraints: Minimum length = 0, Maximum length = 36
/// Unique identifier of the secondary satellite on-orbit object, if correlated.
/// Example: /// Example: ONORBIT2-ID
/// Constraints: Minimum length = 0, Maximum length = 36
func (rcv *Conjunction_Ingest) IdOnOrbit2() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Unique identifier of the secondary satellite on-orbit object, if correlated.
/// Example: /// Example: ONORBIT2-ID
/// Constraints: Minimum length = 0, Maximum length = 36
/// The type of data represented in this conjunction record (e.g. CONJUNCTION, CARA-WORKLIST, etc.).  If type is null the record is assumed to be a Conjunction.
/// Example: /// Example: CONJUNCTION
/// Constraints: Minimum length = 0, Maximum length = 24
func (rcv *Conjunction_Ingest) Type() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The type of data represented in this conjunction record (e.g. CONJUNCTION, CARA-WORKLIST, etc.).  If type is null the record is assumed to be a Conjunction.
/// Example: /// Example: CONJUNCTION
/// Constraints: Minimum length = 0, Maximum length = 24
/// Time of closest approach (TCA) in UTC.
/// Example: /// Example: 2021-01-01T01:01:01.123456Z
/// Constraints: No constraints specified.
func (rcv *Conjunction_Ingest) Tca() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Time of closest approach (TCA) in UTC.
/// Example: /// Example: 2021-01-01T01:01:01.123456Z
/// Constraints: No constraints specified.
/// Distance between objects at Time of Closest Approach (TCA) in meters.
/// Example: /// Example: 1.1
/// Constraints: No constraints specified.
func (rcv *Conjunction_Ingest) MissDistance() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Distance between objects at Time of Closest Approach (TCA) in meters.
/// Example: /// Example: 1.1
/// Constraints: No constraints specified.
func (rcv *Conjunction_Ingest) MutateMissDistance(n float64) bool {
	return rcv._tab.MutateFloat64Slot(16, n)
}

/// Probability of Collision is the probability (denoted p, where 0.0<=p<=1.0), that Object1 and Object2 will collide.
/// Example: /// Example: 0.5
/// Constraints: No constraints specified.
func (rcv *Conjunction_Ingest) CollisionProb() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(18))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Probability of Collision is the probability (denoted p, where 0.0<=p<=1.0), that Object1 and Object2 will collide.
/// Example: /// Example: 0.5
/// Constraints: No constraints specified.
func (rcv *Conjunction_Ingest) MutateCollisionProb(n float64) bool {
	return rcv._tab.MutateFloat64Slot(18, n)
}

/// The method that was used to calculate the collision probability, ex. FOSTER-1992.
/// Example: /// Example: FOSTER-1992
/// Constraints: Minimum length = 0, Maximum length = 32
func (rcv *Conjunction_Ingest) CollisionProbMethod() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(20))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The method that was used to calculate the collision probability, ex. FOSTER-1992.
/// Example: /// Example: FOSTER-1992
/// Constraints: Minimum length = 0, Maximum length = 32
/// The filename of the primary (object1) ephemeris used in the screening, if applicable.
/// Example: /// Example: MEME_SPCFT_ABC_2180000_ops_nomnvr_unclassified.oem
/// Constraints: Minimum length = 0, Maximum length = 64
func (rcv *Conjunction_Ingest) EphemName1() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(22))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The filename of the primary (object1) ephemeris used in the screening, if applicable.
/// Example: /// Example: MEME_SPCFT_ABC_2180000_ops_nomnvr_unclassified.oem
/// Constraints: Minimum length = 0, Maximum length = 64
/// Unique identifier of the parent Ephemeris Set of the primary (object1) ephemeris used in the screening, if applicable.
/// Example: /// Example: a2ae2356-6d83-4e4b-896d-ddd1958800fa
/// Constraints: Minimum length = 0, Maximum length = 36
func (rcv *Conjunction_Ingest) EsId1() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(24))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Unique identifier of the parent Ephemeris Set of the primary (object1) ephemeris used in the screening, if applicable.
/// Example: /// Example: a2ae2356-6d83-4e4b-896d-ddd1958800fa
/// Constraints: Minimum length = 0, Maximum length = 36
/// The filename of the secondary (object2) ephemeris used in the screening, if applicable.
/// Example: /// Example: MEME_SPCFT_DEF_2170000_ops_nomnvr_unclassified.txt
/// Constraints: Minimum length = 0, Maximum length = 64
func (rcv *Conjunction_Ingest) EphemName2() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(26))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The filename of the secondary (object2) ephemeris used in the screening, if applicable.
/// Example: /// Example: MEME_SPCFT_DEF_2170000_ops_nomnvr_unclassified.txt
/// Constraints: Minimum length = 0, Maximum length = 64
/// Unique identifier of the parent Ephemeris Set of the secondary (object2) ephemeris used in the screening, if applicable.
/// Example: /// Example: 6fa31433-8beb-4b9b-8bf9-326dbd041c3f
/// Constraints: Minimum length = 0, Maximum length = 36
func (rcv *Conjunction_Ingest) EsId2() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(28))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Unique identifier of the parent Ephemeris Set of the secondary (object2) ephemeris used in the screening, if applicable.
/// Example: /// Example: 6fa31433-8beb-4b9b-8bf9-326dbd041c3f
/// Constraints: Minimum length = 0, Maximum length = 36
/// Distance between objects along Radial Vector at Time of Closest Approach in meters.
/// Example: /// Example: 1.1
/// Constraints: No constraints specified.
func (rcv *Conjunction_Ingest) RelPosR() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(30))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Distance between objects along Radial Vector at Time of Closest Approach in meters.
/// Example: /// Example: 1.1
/// Constraints: No constraints specified.
func (rcv *Conjunction_Ingest) MutateRelPosR(n float64) bool {
	return rcv._tab.MutateFloat64Slot(30, n)
}

/// Distance between objects along Tangential Vector in meters.
/// Example: /// Example: 1.1
/// Constraints: No constraints specified.
func (rcv *Conjunction_Ingest) RelPosT() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(32))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Distance between objects along Tangential Vector in meters.
/// Example: /// Example: 1.1
/// Constraints: No constraints specified.
func (rcv *Conjunction_Ingest) MutateRelPosT(n float64) bool {
	return rcv._tab.MutateFloat64Slot(32, n)
}

/// Distance between objects along Normal vector in meters.
/// Example: /// Example: 1.1
/// Constraints: No constraints specified.
func (rcv *Conjunction_Ingest) RelPosN() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(34))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Distance between objects along Normal vector in meters.
/// Example: /// Example: 1.1
/// Constraints: No constraints specified.
func (rcv *Conjunction_Ingest) MutateRelPosN(n float64) bool {
	return rcv._tab.MutateFloat64Slot(34, n)
}

/// Closing velocity magnitude (relative speed) at Time of Closest Approach in meters/sec.
/// Example: /// Example: 1.1
/// Constraints: No constraints specified.
func (rcv *Conjunction_Ingest) RelVelMag() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(36))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Closing velocity magnitude (relative speed) at Time of Closest Approach in meters/sec.
/// Example: /// Example: 1.1
/// Constraints: No constraints specified.
func (rcv *Conjunction_Ingest) MutateRelVelMag(n float64) bool {
	return rcv._tab.MutateFloat64Slot(36, n)
}

/// Closing velocity between objects along Radial Vector at Time of Closest Approach in meters/sec.
/// Example: /// Example: 1.1
/// Constraints: No constraints specified.
func (rcv *Conjunction_Ingest) RelVelR() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(38))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Closing velocity between objects along Radial Vector at Time of Closest Approach in meters/sec.
/// Example: /// Example: 1.1
/// Constraints: No constraints specified.
func (rcv *Conjunction_Ingest) MutateRelVelR(n float64) bool {
	return rcv._tab.MutateFloat64Slot(38, n)
}

/// Closing velocity between objects along Tangential Vector in meters/sec.
/// Example: /// Example: 1.1
/// Constraints: No constraints specified.
func (rcv *Conjunction_Ingest) RelVelT() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(40))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Closing velocity between objects along Tangential Vector in meters/sec.
/// Example: /// Example: 1.1
/// Constraints: No constraints specified.
func (rcv *Conjunction_Ingest) MutateRelVelT(n float64) bool {
	return rcv._tab.MutateFloat64Slot(40, n)
}

/// Closing velocity between objects along Normal Vector in meters/sec.
/// Example: /// Example: 1.1
/// Constraints: No constraints specified.
func (rcv *Conjunction_Ingest) RelVelN() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(42))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Closing velocity between objects along Normal Vector in meters/sec.
/// Example: /// Example: 1.1
/// Constraints: No constraints specified.
func (rcv *Conjunction_Ingest) MutateRelVelN(n float64) bool {
	return rcv._tab.MutateFloat64Slot(42, n)
}

/// The start time in UTC of the screening period for the conjunction assessment.
/// Example: /// Example: 2021-01-01T01:01:01.123456Z
/// Constraints: No constraints specified.
func (rcv *Conjunction_Ingest) ScreenEntryTime() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(44))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The start time in UTC of the screening period for the conjunction assessment.
/// Example: /// Example: 2021-01-01T01:01:01.123456Z
/// Constraints: No constraints specified.
/// The stop time in UTC of the screening period for the conjunction assessment.
/// Example: /// Example: 2021-01-01T01:01:01.123456Z
/// Constraints: No constraints specified.
func (rcv *Conjunction_Ingest) ScreenExitTime() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(46))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The stop time in UTC of the screening period for the conjunction assessment.
/// Example: /// Example: 2021-01-01T01:01:01.123456Z
/// Constraints: No constraints specified.
/// Component size of screen in X component of  RTN (Radial, Transverse and Normal) frame in meters.
/// Example: /// Example: 1.1
/// Constraints: No constraints specified.
func (rcv *Conjunction_Ingest) ScreenVolumeX() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(48))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Component size of screen in X component of  RTN (Radial, Transverse and Normal) frame in meters.
/// Example: /// Example: 1.1
/// Constraints: No constraints specified.
func (rcv *Conjunction_Ingest) MutateScreenVolumeX(n float64) bool {
	return rcv._tab.MutateFloat64Slot(48, n)
}

/// Component size of screen in Y component of  RTN (Radial, Transverse and Normal) frame in meters.
/// Example: /// Example: 1.1
/// Constraints: No constraints specified.
func (rcv *Conjunction_Ingest) ScreenVolumeY() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(50))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Component size of screen in Y component of  RTN (Radial, Transverse and Normal) frame in meters.
/// Example: /// Example: 1.1
/// Constraints: No constraints specified.
func (rcv *Conjunction_Ingest) MutateScreenVolumeY(n float64) bool {
	return rcv._tab.MutateFloat64Slot(50, n)
}

/// Component size of screen in Z component of  RTN (Radial, Transverse and Normal) frame in meters.
/// Example: /// Example: 1.1
/// Constraints: No constraints specified.
func (rcv *Conjunction_Ingest) ScreenVolumeZ() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(52))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Component size of screen in Z component of  RTN (Radial, Transverse and Normal) frame in meters.
/// Example: /// Example: 1.1
/// Constraints: No constraints specified.
func (rcv *Conjunction_Ingest) MutateScreenVolumeZ(n float64) bool {
	return rcv._tab.MutateFloat64Slot(52, n)
}

/// The shape (BOX, ELLIPSOID) of the screening volume.
/// Example: /// Example: ELLIPSOID
/// Constraints: Minimum length = 0, Maximum length = 12
func (rcv *Conjunction_Ingest) VolShape() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(54))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The shape (BOX, ELLIPSOID) of the screening volume.
/// Example: /// Example: ELLIPSOID
/// Constraints: Minimum length = 0, Maximum length = 12
/// The time at which the secondary (object2) enters the screening volume, in ISO 8601 UTC format with microsecond precision.
/// Example: /// Example: 2021-01-01T01:02:01.123456Z
/// Constraints: No constraints specified.
func (rcv *Conjunction_Ingest) VolEntryTime() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(56))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The time at which the secondary (object2) enters the screening volume, in ISO 8601 UTC format with microsecond precision.
/// Example: /// Example: 2021-01-01T01:02:01.123456Z
/// Constraints: No constraints specified.
/// The time at which the secondary (object2) exits the screening volume, in ISO 8601 UTC format with microsecond precision.
/// Example: /// Example: 2021-01-01T01:02:28.123456Z
/// Constraints: No constraints specified.
func (rcv *Conjunction_Ingest) VolExitTime() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(58))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The time at which the secondary (object2) exits the screening volume, in ISO 8601 UTC format with microsecond precision.
/// Example: /// Example: 2021-01-01T01:02:28.123456Z
/// Constraints: No constraints specified.
/// Penetration Level Sigma.
/// Example: /// Example: 1.1
/// Constraints: No constraints specified.
func (rcv *Conjunction_Ingest) PenetrationLevelSigma() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(60))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Penetration Level Sigma.
/// Example: /// Example: 1.1
/// Constraints: No constraints specified.
func (rcv *Conjunction_Ingest) MutatePenetrationLevelSigma(n float64) bool {
	return rcv._tab.MutateFloat64Slot(60, n)
}

/// Optional ID of the UDL State Vector at TCA of the primary object. When performing a create, this id will be ignored in favor of the UDL generated id of the stateVector1.
/// Example: /// Example: REF-STATEVECTOR1-ID
/// Constraints: Minimum length = 0, Maximum length = 36
func (rcv *Conjunction_Ingest) IdStateVector1() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(62))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Optional ID of the UDL State Vector at TCA of the primary object. When performing a create, this id will be ignored in favor of the UDL generated id of the stateVector1.
/// Example: /// Example: REF-STATEVECTOR1-ID
/// Constraints: Minimum length = 0, Maximum length = 36
/// Time of last positive metric observation of the primary satellite.
/// Example: /// Example: 2021-01-01T01:01:01.123456Z
/// Constraints: No constraints specified.
func (rcv *Conjunction_Ingest) LastObTime1() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(64))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Time of last positive metric observation of the primary satellite.
/// Example: /// Example: 2021-01-01T01:01:01.123456Z
/// Constraints: No constraints specified.
/// The value of the primary (object1) Area times the drag coefficient over the object Mass, expressed in m^2/kg, used for propagation of the primary state vector and covariance to TCA.
/// Example: /// Example: 0.016386
/// Constraints: No constraints specified.
func (rcv *Conjunction_Ingest) CdAoM1() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(66))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// The value of the primary (object1) Area times the drag coefficient over the object Mass, expressed in m^2/kg, used for propagation of the primary state vector and covariance to TCA.
/// Example: /// Example: 0.016386
/// Constraints: No constraints specified.
func (rcv *Conjunction_Ingest) MutateCdAoM1(n float64) bool {
	return rcv._tab.MutateFloat64Slot(66, n)
}

/// The value of the primary (object1) Area times the solar radiation pressure coefficient over the object Mass, expressed in m^2/kg, used for propagation of the primary state vector and covariance to TCA.  This parameter is sometimes referred to as AGOM.
/// Example: /// Example: 0.013814
/// Constraints: No constraints specified.
func (rcv *Conjunction_Ingest) CrAoM1() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(68))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// The value of the primary (object1) Area times the solar radiation pressure coefficient over the object Mass, expressed in m^2/kg, used for propagation of the primary state vector and covariance to TCA.  This parameter is sometimes referred to as AGOM.
/// Example: /// Example: 0.013814
/// Constraints: No constraints specified.
func (rcv *Conjunction_Ingest) MutateCrAoM1(n float64) bool {
	return rcv._tab.MutateFloat64Slot(68, n)
}

/// The primary (object1) acceleration, expressed in m/s^2, due to in-track thrust used to propagate the primary state vector and covariance to TCA.
/// Example: /// Example: 0.033814
/// Constraints: No constraints specified.
func (rcv *Conjunction_Ingest) ThrustAccel1() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(70))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// The primary (object1) acceleration, expressed in m/s^2, due to in-track thrust used to propagate the primary state vector and covariance to TCA.
/// Example: /// Example: 0.033814
/// Constraints: No constraints specified.
func (rcv *Conjunction_Ingest) MutateThrustAccel1(n float64) bool {
	return rcv._tab.MutateFloat64Slot(70, n)
}

/// Optional ID of the UDL State Vector at TCA of the secondary object. When performing a create, this id will be ignored in favor of the UDL generated id of the stateVector2.
/// Example: /// Example: REF-STATEVECTOR2-ID
/// Constraints: Minimum length = 0, Maximum length = 36
func (rcv *Conjunction_Ingest) IdStateVector2() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(72))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Optional ID of the UDL State Vector at TCA of the secondary object. When performing a create, this id will be ignored in favor of the UDL generated id of the stateVector2.
/// Example: /// Example: REF-STATEVECTOR2-ID
/// Constraints: Minimum length = 0, Maximum length = 36
/// Time of last positive metric observation of the secondary satellite.
/// Example: /// Example: 2021-01-01T01:01:01.123456Z
/// Constraints: No constraints specified.
func (rcv *Conjunction_Ingest) LastObTime2() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(74))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Time of last positive metric observation of the secondary satellite.
/// Example: /// Example: 2021-01-01T01:01:01.123456Z
/// Constraints: No constraints specified.
/// The value of the secondary (object2) Area times the drag coefficient over the object Mass, expressed in m^2/kg, used for propagation of the primary state vector and covariance to TCA.
/// Example: /// Example: 0.016386
/// Constraints: No constraints specified.
func (rcv *Conjunction_Ingest) CdAoM2() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(76))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// The value of the secondary (object2) Area times the drag coefficient over the object Mass, expressed in m^2/kg, used for propagation of the primary state vector and covariance to TCA.
/// Example: /// Example: 0.016386
/// Constraints: No constraints specified.
func (rcv *Conjunction_Ingest) MutateCdAoM2(n float64) bool {
	return rcv._tab.MutateFloat64Slot(76, n)
}

/// The value of the secondary (object2) Area times the solar radiation pressure coefficient over the object Mass, expressed in m^2/kg, used for propagation of the primary state vector and covariance to TCA.  This parameter is sometimes referred to as AGOM.
/// Example: /// Example: 0.013814
/// Constraints: No constraints specified.
func (rcv *Conjunction_Ingest) CrAoM2() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(78))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// The value of the secondary (object2) Area times the solar radiation pressure coefficient over the object Mass, expressed in m^2/kg, used for propagation of the primary state vector and covariance to TCA.  This parameter is sometimes referred to as AGOM.
/// Example: /// Example: 0.013814
/// Constraints: No constraints specified.
func (rcv *Conjunction_Ingest) MutateCrAoM2(n float64) bool {
	return rcv._tab.MutateFloat64Slot(78, n)
}

/// The secondary (object2) acceleration, expressed in m/s^2, due to in-track thrust used to propagate the primary state vector and covariance to TCA.
/// Example: /// Example: 0.033814
/// Constraints: No constraints specified.
func (rcv *Conjunction_Ingest) ThrustAccel2() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(80))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// The secondary (object2) acceleration, expressed in m/s^2, due to in-track thrust used to propagate the primary state vector and covariance to TCA.
/// Example: /// Example: 0.033814
/// Constraints: No constraints specified.
func (rcv *Conjunction_Ingest) MutateThrustAccel2(n float64) bool {
	return rcv._tab.MutateFloat64Slot(80, n)
}

/// Additional notes from data providers.
/// Example: /// Example: Example notes
/// Constraints: Minimum length = 0, Maximum length = 1024
func (rcv *Conjunction_Ingest) Comments() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(82))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Additional notes from data providers.
/// Example: /// Example: Example notes
/// Constraints: Minimum length = 0, Maximum length = 1024
/// Commander's critical information requirements notes.
/// Example: /// Example: Example notes
/// Constraints: Minimum length = 0, Maximum length = 128
func (rcv *Conjunction_Ingest) Ccir() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(84))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Commander's critical information requirements notes.
/// Example: /// Example: Example notes
/// Constraints: Minimum length = 0, Maximum length = 128
/// Emergency comments.
/// Example: /// Example: Example notes
/// Constraints: Minimum length = 0, Maximum length = 256
func (rcv *Conjunction_Ingest) ConcernNotes() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(86))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Emergency comments.
/// Example: /// Example: Example notes
/// Constraints: Minimum length = 0, Maximum length = 256
/// Flag indicating if State department was notified.
/// Example: /// Example: False
/// Constraints: No constraints specified.
func (rcv *Conjunction_Ingest) StateDeptNotified() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(88))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

/// Flag indicating if State department was notified.
/// Example: /// Example: False
/// Constraints: No constraints specified.
func (rcv *Conjunction_Ingest) MutateStateDeptNotified(n bool) bool {
	return rcv._tab.MutateBoolSlot(88, n)
}

/// Flag indicating if owner was contacted.
/// Example: /// Example: False
/// Constraints: No constraints specified.
func (rcv *Conjunction_Ingest) OwnerContacted() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(90))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

/// Flag indicating if owner was contacted.
/// Example: /// Example: False
/// Constraints: No constraints specified.
func (rcv *Conjunction_Ingest) MutateOwnerContacted(n bool) bool {
	return rcv._tab.MutateBoolSlot(90, n)
}

/// Link to filename associated with JMS record.
/// Example: /// Example: Example link
/// Constraints: Minimum length = 0, Maximum length = 64
func (rcv *Conjunction_Ingest) RawFileUri() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(92))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Link to filename associated with JMS record.
/// Example: /// Example: Example link
/// Constraints: Minimum length = 0, Maximum length = 64
/// Spacecraft name(s) for which the Collision message is provided.
/// Example: /// Example: Message for space craft A
/// Constraints: Minimum length = 0, Maximum length = 64
func (rcv *Conjunction_Ingest) MessageFor() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(94))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Spacecraft name(s) for which the Collision message is provided.
/// Example: /// Example: Message for space craft A
/// Constraints: Minimum length = 0, Maximum length = 64
/// JMS provided message ID link.
/// Example: /// Example: MESSAGE-ID
/// Constraints: Minimum length = 0, Maximum length = 64
func (rcv *Conjunction_Ingest) MessageId() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(96))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// JMS provided message ID link.
/// Example: /// Example: MESSAGE-ID
/// Constraints: Minimum length = 0, Maximum length = 64
/// Used for probability of collision calculation, not Warning/Alert Threshold notifications.
/// Example: /// Example: False
/// Constraints: No constraints specified.
func (rcv *Conjunction_Ingest) UvwWarn() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(98))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

/// Used for probability of collision calculation, not Warning/Alert Threshold notifications.
/// Example: /// Example: False
/// Constraints: No constraints specified.
func (rcv *Conjunction_Ingest) MutateUvwWarn(n bool) bool {
	return rcv._tab.MutateBoolSlot(98, n)
}

/// Used for probability of collision calculation, not Warning/Alert Threshold notifications.
/// Example: /// Example: False
/// Constraints: No constraints specified.
func (rcv *Conjunction_Ingest) SmallRelVelWarning() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(100))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

/// Used for probability of collision calculation, not Warning/Alert Threshold notifications.
/// Example: /// Example: False
/// Constraints: No constraints specified.
func (rcv *Conjunction_Ingest) MutateSmallRelVelWarning(n bool) bool {
	return rcv._tab.MutateBoolSlot(100, n)
}

/// Used for probability of collision calculation, not Warning/Alert Threshold notifications.
/// Example: /// Example: False
/// Constraints: No constraints specified.
func (rcv *Conjunction_Ingest) LargeRelPosWarning() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(102))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

/// Used for probability of collision calculation, not Warning/Alert Threshold notifications.
/// Example: /// Example: False
/// Constraints: No constraints specified.
func (rcv *Conjunction_Ingest) MutateLargeRelPosWarning(n bool) bool {
	return rcv._tab.MutateBoolSlot(102, n)
}

/// Used for probability of collision calculation, not Warning/Alert Threshold notifications.
/// Example: /// Example: False
/// Constraints: No constraints specified.
func (rcv *Conjunction_Ingest) SmallCovWarning() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(104))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

/// Used for probability of collision calculation, not Warning/Alert Threshold notifications.
/// Example: /// Example: False
/// Constraints: No constraints specified.
func (rcv *Conjunction_Ingest) MutateSmallCovWarning(n bool) bool {
	return rcv._tab.MutateBoolSlot(104, n)
}

/// Used for probability of collision calculation, not Warning/Alert Threshold notifications.
/// Example: /// Example: False
/// Constraints: No constraints specified.
func (rcv *Conjunction_Ingest) LargeCovWarning() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(106))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

/// Used for probability of collision calculation, not Warning/Alert Threshold notifications.
/// Example: /// Example: False
/// Constraints: No constraints specified.
func (rcv *Conjunction_Ingest) MutateLargeCovWarning(n bool) bool {
	return rcv._tab.MutateBoolSlot(106, n)
}

/// Optional identifier to track a commercial or marketplace transaction executed to produce this data.
/// Example: /// Example: TRANSACTION-ID
/// Constraints: Minimum length = 0, Maximum length = 64
func (rcv *Conjunction_Ingest) TransactionId() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(108))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Optional identifier to track a commercial or marketplace transaction executed to produce this data.
/// Example: /// Example: TRANSACTION-ID
/// Constraints: Minimum length = 0, Maximum length = 64
/// Source of the data.
/// Example: /// Example: Bluestaq
/// Constraints: Minimum length = 1, Maximum length = 64
func (rcv *Conjunction_Ingest) Source() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(110))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Source of the data.
/// Example: /// Example: Bluestaq
/// Constraints: Minimum length = 1, Maximum length = 64
/// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
/// Example: /// Example: THIRD_PARTY_DATASOURCE
/// Constraints: Minimum length = 0, Maximum length = 64
func (rcv *Conjunction_Ingest) Origin() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(112))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
/// Example: /// Example: THIRD_PARTY_DATASOURCE
/// Constraints: Minimum length = 0, Maximum length = 64
/// Creating agency or owner/operator (may be different than provider who submitted the conjunction message).
/// Example: /// Example: some.user
/// Constraints: Minimum length = 0, Maximum length = 64
func (rcv *Conjunction_Ingest) Originator() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(114))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Creating agency or owner/operator (may be different than provider who submitted the conjunction message).
/// Example: /// Example: some.user
/// Constraints: Minimum length = 0, Maximum length = 64
/// Optional source-provided identifier for this conjunction event. In the case where multiple conjunction records are submitted for the same event, this field can be used to tie them together to the same event.
/// Example: /// Example: some.user
/// Constraints: Minimum length = 0, Maximum length = 64
func (rcv *Conjunction_Ingest) EventId() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(116))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Optional source-provided identifier for this conjunction event. In the case where multiple conjunction records are submitted for the same event, this field can be used to tie them together to the same event.
/// Example: /// Example: some.user
/// Constraints: Minimum length = 0, Maximum length = 64
/// Optional source-provided and searchable metadata or descriptor of the data.
/// Example: /// Example: sample_descriptor here
/// Constraints: Minimum length = 0, Maximum length = 64
func (rcv *Conjunction_Ingest) Descriptor() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(118))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Optional source-provided and searchable metadata or descriptor of the data.
/// Example: /// Example: sample_descriptor here
/// Constraints: Minimum length = 0, Maximum length = 64
/// Optional array of provider/source specific tags for this data, where each element is no longer than 32 characters, used for implementing data owner conditional access controls to restrict access to the data. Should be left null by data providers unless conditional access controls are coordinated with the UDL team.
/// Example: /// Example: ['PROVIDER_TAG1', 'PROVIDER_TAG1']
/// Constraints: No constraints specified.
func (rcv *Conjunction_Ingest) Tags(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(120))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *Conjunction_Ingest) TagsLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(120))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

/// Optional array of provider/source specific tags for this data, where each element is no longer than 32 characters, used for implementing data owner conditional access controls to restrict access to the data. Should be left null by data providers unless conditional access controls are coordinated with the UDL team.
/// Example: /// Example: ['PROVIDER_TAG1', 'PROVIDER_TAG1']
/// Constraints: No constraints specified.
/// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
/// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
/// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
/// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
/// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
/// Example: /// Example: TEST
/// Constraints: Minimum length = 1, Maximum length = 32
func (rcv *Conjunction_Ingest) DataMode() Conjunction_Ingest_dataMode_Enum {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(122))
	if o != 0 {
		return Conjunction_Ingest_dataMode_Enum(rcv._tab.GetInt8(o + rcv._tab.Pos))
	}
	return 0
}

/// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
/// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
/// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
/// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
/// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
/// Example: /// Example: TEST
/// Constraints: Minimum length = 1, Maximum length = 32
func (rcv *Conjunction_Ingest) MutateDataMode(n Conjunction_Ingest_dataMode_Enum) bool {
	return rcv._tab.MutateInt8Slot(122, int8(n))
}

/// Time the row was created in the database.
/// Example: /// Example: 2018-01-01T16:00:00.123Z
/// Constraints: No constraints specified.
func (rcv *Conjunction_Ingest) CreatedAt() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(124))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Time the row was created in the database.
/// Example: /// Example: 2018-01-01T16:00:00.123Z
/// Constraints: No constraints specified.
/// Application user who created the row in the database.
/// Example: /// Example: some.user
/// Constraints: Minimum length = 1, Maximum length = 64
func (rcv *Conjunction_Ingest) CreatedBy() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(126))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Application user who created the row in the database.
/// Example: /// Example: some.user
/// Constraints: Minimum length = 1, Maximum length = 64
/// No description provided.
/// Example: /// Example: No example provided.
/// Constraints: No constraints specified.
func (rcv *Conjunction_Ingest) StateVector1() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(128))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// No description provided.
/// Example: /// Example: No example provided.
/// Constraints: No constraints specified.
/// No description provided.
/// Example: /// Example: No example provided.
/// Constraints: No constraints specified.
func (rcv *Conjunction_Ingest) StateVector2() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(130))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// No description provided.
/// Example: /// Example: No example provided.
/// Constraints: No constraints specified.
/// Satellite/catalog number of the target on-orbit primary object.
/// Example: /// Example: 1
/// Constraints: No constraints specified.
func (rcv *Conjunction_Ingest) SatNo1() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(132))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

/// Satellite/catalog number of the target on-orbit primary object.
/// Example: /// Example: 1
/// Constraints: No constraints specified.
func (rcv *Conjunction_Ingest) MutateSatNo1(n int32) bool {
	return rcv._tab.MutateInt32Slot(132, n)
}

/// Satellite/catalog number of the target on-orbit secondary object.
/// Example: /// Example: 2
/// Constraints: No constraints specified.
func (rcv *Conjunction_Ingest) SatNo2() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(134))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

/// Satellite/catalog number of the target on-orbit secondary object.
/// Example: /// Example: 2
/// Constraints: No constraints specified.
func (rcv *Conjunction_Ingest) MutateSatNo2(n int32) bool {
	return rcv._tab.MutateInt32Slot(134, n)
}

/// Optional place holder for an OnOrbit ID that does not exist in UDL.
/// Example: /// Example: ORIGONORBIT1-ID
/// Constraints: Minimum length = 0, Maximum length = 36
func (rcv *Conjunction_Ingest) OrigIdOnOrbit1() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(136))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Optional place holder for an OnOrbit ID that does not exist in UDL.
/// Example: /// Example: ORIGONORBIT1-ID
/// Constraints: Minimum length = 0, Maximum length = 36
/// Optional place holder for an OnOrbit ID that does not exist in UDL.
/// Example: /// Example: ORIGONORBIT2-ID
/// Constraints: Minimum length = 0, Maximum length = 36
func (rcv *Conjunction_Ingest) OrigIdOnOrbit2() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(138))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Optional place holder for an OnOrbit ID that does not exist in UDL.
/// Example: /// Example: ORIGONORBIT2-ID
/// Constraints: Minimum length = 0, Maximum length = 36
/// The originating source network on which this record was created, auto-populated by the system.
/// Example: /// Example: ORIG
/// Constraints: Minimum length = 0, Maximum length = 32
func (rcv *Conjunction_Ingest) OrigNetwork() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(140))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The originating source network on which this record was created, auto-populated by the system.
/// Example: /// Example: ORIG
/// Constraints: Minimum length = 0, Maximum length = 32
func Conjunction_IngestStart(builder *flatbuffers.Builder) {
	builder.StartObject(69)
}
func Conjunction_IngestAddId(builder *flatbuffers.Builder, id flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(id), 0)
}
func Conjunction_IngestAddClassificationMarking(builder *flatbuffers.Builder, classificationMarking flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(classificationMarking), 0)
}
func Conjunction_IngestAddIdOnOrbit1(builder *flatbuffers.Builder, idOnOrbit1 flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(idOnOrbit1), 0)
}
func Conjunction_IngestAddIdOnOrbit2(builder *flatbuffers.Builder, idOnOrbit2 flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(3, flatbuffers.UOffsetT(idOnOrbit2), 0)
}
func Conjunction_IngestAddType(builder *flatbuffers.Builder, type_ flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(4, flatbuffers.UOffsetT(type_), 0)
}
func Conjunction_IngestAddTca(builder *flatbuffers.Builder, tca flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(5, flatbuffers.UOffsetT(tca), 0)
}
func Conjunction_IngestAddMissDistance(builder *flatbuffers.Builder, missDistance float64) {
	builder.PrependFloat64Slot(6, missDistance, 0.0)
}
func Conjunction_IngestAddCollisionProb(builder *flatbuffers.Builder, collisionProb float64) {
	builder.PrependFloat64Slot(7, collisionProb, 0.0)
}
func Conjunction_IngestAddCollisionProbMethod(builder *flatbuffers.Builder, collisionProbMethod flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(8, flatbuffers.UOffsetT(collisionProbMethod), 0)
}
func Conjunction_IngestAddEphemName1(builder *flatbuffers.Builder, ephemName1 flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(9, flatbuffers.UOffsetT(ephemName1), 0)
}
func Conjunction_IngestAddEsId1(builder *flatbuffers.Builder, esId1 flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(10, flatbuffers.UOffsetT(esId1), 0)
}
func Conjunction_IngestAddEphemName2(builder *flatbuffers.Builder, ephemName2 flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(11, flatbuffers.UOffsetT(ephemName2), 0)
}
func Conjunction_IngestAddEsId2(builder *flatbuffers.Builder, esId2 flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(12, flatbuffers.UOffsetT(esId2), 0)
}
func Conjunction_IngestAddRelPosR(builder *flatbuffers.Builder, relPosR float64) {
	builder.PrependFloat64Slot(13, relPosR, 0.0)
}
func Conjunction_IngestAddRelPosT(builder *flatbuffers.Builder, relPosT float64) {
	builder.PrependFloat64Slot(14, relPosT, 0.0)
}
func Conjunction_IngestAddRelPosN(builder *flatbuffers.Builder, relPosN float64) {
	builder.PrependFloat64Slot(15, relPosN, 0.0)
}
func Conjunction_IngestAddRelVelMag(builder *flatbuffers.Builder, relVelMag float64) {
	builder.PrependFloat64Slot(16, relVelMag, 0.0)
}
func Conjunction_IngestAddRelVelR(builder *flatbuffers.Builder, relVelR float64) {
	builder.PrependFloat64Slot(17, relVelR, 0.0)
}
func Conjunction_IngestAddRelVelT(builder *flatbuffers.Builder, relVelT float64) {
	builder.PrependFloat64Slot(18, relVelT, 0.0)
}
func Conjunction_IngestAddRelVelN(builder *flatbuffers.Builder, relVelN float64) {
	builder.PrependFloat64Slot(19, relVelN, 0.0)
}
func Conjunction_IngestAddScreenEntryTime(builder *flatbuffers.Builder, screenEntryTime flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(20, flatbuffers.UOffsetT(screenEntryTime), 0)
}
func Conjunction_IngestAddScreenExitTime(builder *flatbuffers.Builder, screenExitTime flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(21, flatbuffers.UOffsetT(screenExitTime), 0)
}
func Conjunction_IngestAddScreenVolumeX(builder *flatbuffers.Builder, screenVolumeX float64) {
	builder.PrependFloat64Slot(22, screenVolumeX, 0.0)
}
func Conjunction_IngestAddScreenVolumeY(builder *flatbuffers.Builder, screenVolumeY float64) {
	builder.PrependFloat64Slot(23, screenVolumeY, 0.0)
}
func Conjunction_IngestAddScreenVolumeZ(builder *flatbuffers.Builder, screenVolumeZ float64) {
	builder.PrependFloat64Slot(24, screenVolumeZ, 0.0)
}
func Conjunction_IngestAddVolShape(builder *flatbuffers.Builder, volShape flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(25, flatbuffers.UOffsetT(volShape), 0)
}
func Conjunction_IngestAddVolEntryTime(builder *flatbuffers.Builder, volEntryTime flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(26, flatbuffers.UOffsetT(volEntryTime), 0)
}
func Conjunction_IngestAddVolExitTime(builder *flatbuffers.Builder, volExitTime flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(27, flatbuffers.UOffsetT(volExitTime), 0)
}
func Conjunction_IngestAddPenetrationLevelSigma(builder *flatbuffers.Builder, penetrationLevelSigma float64) {
	builder.PrependFloat64Slot(28, penetrationLevelSigma, 0.0)
}
func Conjunction_IngestAddIdStateVector1(builder *flatbuffers.Builder, idStateVector1 flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(29, flatbuffers.UOffsetT(idStateVector1), 0)
}
func Conjunction_IngestAddLastObTime1(builder *flatbuffers.Builder, lastObTime1 flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(30, flatbuffers.UOffsetT(lastObTime1), 0)
}
func Conjunction_IngestAddCdAoM1(builder *flatbuffers.Builder, cdAoM1 float64) {
	builder.PrependFloat64Slot(31, cdAoM1, 0.0)
}
func Conjunction_IngestAddCrAoM1(builder *flatbuffers.Builder, crAoM1 float64) {
	builder.PrependFloat64Slot(32, crAoM1, 0.0)
}
func Conjunction_IngestAddThrustAccel1(builder *flatbuffers.Builder, thrustAccel1 float64) {
	builder.PrependFloat64Slot(33, thrustAccel1, 0.0)
}
func Conjunction_IngestAddIdStateVector2(builder *flatbuffers.Builder, idStateVector2 flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(34, flatbuffers.UOffsetT(idStateVector2), 0)
}
func Conjunction_IngestAddLastObTime2(builder *flatbuffers.Builder, lastObTime2 flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(35, flatbuffers.UOffsetT(lastObTime2), 0)
}
func Conjunction_IngestAddCdAoM2(builder *flatbuffers.Builder, cdAoM2 float64) {
	builder.PrependFloat64Slot(36, cdAoM2, 0.0)
}
func Conjunction_IngestAddCrAoM2(builder *flatbuffers.Builder, crAoM2 float64) {
	builder.PrependFloat64Slot(37, crAoM2, 0.0)
}
func Conjunction_IngestAddThrustAccel2(builder *flatbuffers.Builder, thrustAccel2 float64) {
	builder.PrependFloat64Slot(38, thrustAccel2, 0.0)
}
func Conjunction_IngestAddComments(builder *flatbuffers.Builder, comments flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(39, flatbuffers.UOffsetT(comments), 0)
}
func Conjunction_IngestAddCcir(builder *flatbuffers.Builder, ccir flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(40, flatbuffers.UOffsetT(ccir), 0)
}
func Conjunction_IngestAddConcernNotes(builder *flatbuffers.Builder, concernNotes flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(41, flatbuffers.UOffsetT(concernNotes), 0)
}
func Conjunction_IngestAddStateDeptNotified(builder *flatbuffers.Builder, stateDeptNotified bool) {
	builder.PrependBoolSlot(42, stateDeptNotified, false)
}
func Conjunction_IngestAddOwnerContacted(builder *flatbuffers.Builder, ownerContacted bool) {
	builder.PrependBoolSlot(43, ownerContacted, false)
}
func Conjunction_IngestAddRawFileUri(builder *flatbuffers.Builder, rawFileUri flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(44, flatbuffers.UOffsetT(rawFileUri), 0)
}
func Conjunction_IngestAddMessageFor(builder *flatbuffers.Builder, messageFor flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(45, flatbuffers.UOffsetT(messageFor), 0)
}
func Conjunction_IngestAddMessageId(builder *flatbuffers.Builder, messageId flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(46, flatbuffers.UOffsetT(messageId), 0)
}
func Conjunction_IngestAddUvwWarn(builder *flatbuffers.Builder, uvwWarn bool) {
	builder.PrependBoolSlot(47, uvwWarn, false)
}
func Conjunction_IngestAddSmallRelVelWarning(builder *flatbuffers.Builder, smallRelVelWarning bool) {
	builder.PrependBoolSlot(48, smallRelVelWarning, false)
}
func Conjunction_IngestAddLargeRelPosWarning(builder *flatbuffers.Builder, largeRelPosWarning bool) {
	builder.PrependBoolSlot(49, largeRelPosWarning, false)
}
func Conjunction_IngestAddSmallCovWarning(builder *flatbuffers.Builder, smallCovWarning bool) {
	builder.PrependBoolSlot(50, smallCovWarning, false)
}
func Conjunction_IngestAddLargeCovWarning(builder *flatbuffers.Builder, largeCovWarning bool) {
	builder.PrependBoolSlot(51, largeCovWarning, false)
}
func Conjunction_IngestAddTransactionId(builder *flatbuffers.Builder, transactionId flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(52, flatbuffers.UOffsetT(transactionId), 0)
}
func Conjunction_IngestAddSource(builder *flatbuffers.Builder, source flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(53, flatbuffers.UOffsetT(source), 0)
}
func Conjunction_IngestAddOrigin(builder *flatbuffers.Builder, origin flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(54, flatbuffers.UOffsetT(origin), 0)
}
func Conjunction_IngestAddOriginator(builder *flatbuffers.Builder, originator flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(55, flatbuffers.UOffsetT(originator), 0)
}
func Conjunction_IngestAddEventId(builder *flatbuffers.Builder, eventId flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(56, flatbuffers.UOffsetT(eventId), 0)
}
func Conjunction_IngestAddDescriptor(builder *flatbuffers.Builder, descriptor flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(57, flatbuffers.UOffsetT(descriptor), 0)
}
func Conjunction_IngestAddTags(builder *flatbuffers.Builder, tags flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(58, flatbuffers.UOffsetT(tags), 0)
}
func Conjunction_IngestStartTagsVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func Conjunction_IngestAddDataMode(builder *flatbuffers.Builder, dataMode Conjunction_Ingest_dataMode_Enum) {
	builder.PrependInt8Slot(59, int8(dataMode), 0)
}
func Conjunction_IngestAddCreatedAt(builder *flatbuffers.Builder, createdAt flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(60, flatbuffers.UOffsetT(createdAt), 0)
}
func Conjunction_IngestAddCreatedBy(builder *flatbuffers.Builder, createdBy flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(61, flatbuffers.UOffsetT(createdBy), 0)
}
func Conjunction_IngestAddStateVector1(builder *flatbuffers.Builder, stateVector1 flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(62, flatbuffers.UOffsetT(stateVector1), 0)
}
func Conjunction_IngestAddStateVector2(builder *flatbuffers.Builder, stateVector2 flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(63, flatbuffers.UOffsetT(stateVector2), 0)
}
func Conjunction_IngestAddSatNo1(builder *flatbuffers.Builder, satNo1 int32) {
	builder.PrependInt32Slot(64, satNo1, 0)
}
func Conjunction_IngestAddSatNo2(builder *flatbuffers.Builder, satNo2 int32) {
	builder.PrependInt32Slot(65, satNo2, 0)
}
func Conjunction_IngestAddOrigIdOnOrbit1(builder *flatbuffers.Builder, origIdOnOrbit1 flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(66, flatbuffers.UOffsetT(origIdOnOrbit1), 0)
}
func Conjunction_IngestAddOrigIdOnOrbit2(builder *flatbuffers.Builder, origIdOnOrbit2 flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(67, flatbuffers.UOffsetT(origIdOnOrbit2), 0)
}
func Conjunction_IngestAddOrigNetwork(builder *flatbuffers.Builder, origNetwork flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(68, flatbuffers.UOffsetT(origNetwork), 0)
}
func Conjunction_IngestEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
