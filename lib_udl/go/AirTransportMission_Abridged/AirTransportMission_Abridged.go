// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package AirTransportMission_Abridged

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

/// /// The information in an Air Transport Mission contains unique identification, description of the mission objective, aircraft and crew assignments, mission alias, embarkation/debarkation cargo locations, priority, and other mission characteristics.
type AirTransportMission_Abridged struct {
	_tab flatbuffers.Table
}

const AirTransportMission_AbridgedIdentifier = "AIRT"

func GetRootAsAirTransportMission_Abridged(buf []byte, offset flatbuffers.UOffsetT) *AirTransportMission_Abridged {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &AirTransportMission_Abridged{}
	x.Init(buf, n+offset)
	return x
}

func FinishAirTransportMission_AbridgedBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	identifierBytes := []byte(AirTransportMission_AbridgedIdentifier)
	builder.FinishWithFileIdentifier(offset, identifierBytes)
}

func AirTransportMission_AbridgedBufferHasIdentifier(buf []byte) bool {
	return flatbuffers.BufferHasIdentifier(buf, AirTransportMission_AbridgedIdentifier)
}

func GetSizePrefixedRootAsAirTransportMission_Abridged(buf []byte, offset flatbuffers.UOffsetT) *AirTransportMission_Abridged {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &AirTransportMission_Abridged{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedAirTransportMission_AbridgedBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	identifierBytes := []byte(AirTransportMission_AbridgedIdentifier)
	builder.FinishSizePrefixedWithFileIdentifier(offset, identifierBytes)
}

func SizePrefixedAirTransportMission_AbridgedBufferHasIdentifier(buf []byte) bool {
	return flatbuffers.SizePrefixedBufferHasIdentifier(buf, AirTransportMission_AbridgedIdentifier)
}

func (rcv *AirTransportMission_Abridged) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *AirTransportMission_Abridged) Table() flatbuffers.Table {
	return rcv._tab
}

/// Unique identifier of the record, auto-generated by the system.
/// Example: /// Example: bdad6945-c9e4-b829-f7be-1ad075541921
/// Constraints: Minimum length = 1, Maximum length = 36
func (rcv *AirTransportMission_Abridged) Id() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Unique identifier of the record, auto-generated by the system.
/// Example: /// Example: bdad6945-c9e4-b829-f7be-1ad075541921
/// Constraints: Minimum length = 1, Maximum length = 36
/// Classification marking of the data in IC/CAPCO Portion-marked format.
/// Example: /// Example: U
/// Constraints: Minimum length = 1, Maximum length = 128
func (rcv *AirTransportMission_Abridged) ClassificationMarking() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Classification marking of the data in IC/CAPCO Portion-marked format.
/// Example: /// Example: U
/// Constraints: Minimum length = 1, Maximum length = 128
/// The mission identifier provided by the originating source.
/// Example: /// Example: 614bebb6-a62e-053c-ca51-e79f8a402b28
/// Constraints: Minimum length = 0, Maximum length = 36
func (rcv *AirTransportMission_Abridged) OrigMissionId() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The mission identifier provided by the originating source.
/// Example: /// Example: 614bebb6-a62e-053c-ca51-e79f8a402b28
/// Constraints: Minimum length = 0, Maximum length = 36
/// Air Mobility Command (AMC) mission identifier according to Mobility Air Forces (MAF) Encode/Decode procedures.
/// Example: /// Example: AJM7939B1123
/// Constraints: Minimum length = 0, Maximum length = 36
func (rcv *AirTransportMission_Abridged) AmcMissionId() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Air Mobility Command (AMC) mission identifier according to Mobility Air Forces (MAF) Encode/Decode procedures.
/// Example: /// Example: AJM7939B1123
/// Constraints: Minimum length = 0, Maximum length = 36
/// Global Decision Support System (GDSS) mission unique identifier.
/// Example: /// Example: 1e6edeec-72e9-aaec-d33c-51147cb5ffdd
/// Constraints: Minimum length = 0, Maximum length = 36
func (rcv *AirTransportMission_Abridged) GdssMissionId() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Global Decision Support System (GDSS) mission unique identifier.
/// Example: /// Example: 1e6edeec-72e9-aaec-d33c-51147cb5ffdd
/// Constraints: Minimum length = 0, Maximum length = 36
/// Unique identifier of the previous air transport mission provided by the originating source. Provides a method for the data provider to link air transport missions together chronologically for tasking and planning purposes.
/// Example: /// Example: a77055df-edc3-4047-a5fa-604f80b9fe3c
/// Constraints: Minimum length = 0, Maximum length = 36
func (rcv *AirTransportMission_Abridged) PrevMissionId() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Unique identifier of the previous air transport mission provided by the originating source. Provides a method for the data provider to link air transport missions together chronologically for tasking and planning purposes.
/// Example: /// Example: a77055df-edc3-4047-a5fa-604f80b9fe3c
/// Constraints: Minimum length = 0, Maximum length = 36
/// Air Mobility Command (AMC) mission identifier of the previous air transport mission. Provides a method for AMC to link air transport missions together chronologically for tasking and planning purposes.
/// Example: /// Example: AJM7939B1122
/// Constraints: Minimum length = 0, Maximum length = 36
func (rcv *AirTransportMission_Abridged) PrevAmcmissionId() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Air Mobility Command (AMC) mission identifier of the previous air transport mission. Provides a method for AMC to link air transport missions together chronologically for tasking and planning purposes.
/// Example: /// Example: AJM7939B1122
/// Constraints: Minimum length = 0, Maximum length = 36
/// Unique identifier of the next mission provided by the originating source. Provides a method for the data provider to link air transport missions together chronologically for tasking and planning purposes.
/// Example: /// Example: 186e5658-1079-45c0-bccc-02d2fa31b663
/// Constraints: Minimum length = 0, Maximum length = 36
func (rcv *AirTransportMission_Abridged) NextMissionId() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(18))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Unique identifier of the next mission provided by the originating source. Provides a method for the data provider to link air transport missions together chronologically for tasking and planning purposes.
/// Example: /// Example: 186e5658-1079-45c0-bccc-02d2fa31b663
/// Constraints: Minimum length = 0, Maximum length = 36
/// Air Mobility Command (AMC) mission identifier of the next air transport mission. Provides a method for AMC to link air transport missions together chronologically for tasking and planning purposes.
/// Example: /// Example: AJM7939B1124
/// Constraints: Minimum length = 0, Maximum length = 36
func (rcv *AirTransportMission_Abridged) NextAmcmissionId() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(20))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Air Mobility Command (AMC) mission identifier of the next air transport mission. Provides a method for AMC to link air transport missions together chronologically for tasking and planning purposes.
/// Example: /// Example: AJM7939B1124
/// Constraints: Minimum length = 0, Maximum length = 36
/// A description of this mission's objective.
/// Example: /// Example: Deliver water to island X.
/// Constraints: Minimum length = 0, Maximum length = 1024
func (rcv *AirTransportMission_Abridged) Objective() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(22))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// A description of this mission's objective.
/// Example: /// Example: Deliver water to island X.
/// Constraints: Minimum length = 0, Maximum length = 1024
/// A description of this mission's purpose (e.g. why this mission needs to happen, what is the mission supporting, etc.).
/// Example: /// Example: People at island X need water ASAP. Two previous attempts failed due to weather.
/// Constraints: Minimum length = 0, Maximum length = 1024
func (rcv *AirTransportMission_Abridged) Purpose() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(24))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// A description of this mission's purpose (e.g. why this mission needs to happen, what is the mission supporting, etc.).
/// Example: /// Example: People at island X need water ASAP. Two previous attempts failed due to weather.
/// Constraints: Minimum length = 0, Maximum length = 1024
/// Highest Joint Chiefs of Staff priority of this mission.
/// Example: /// Example: 1A3
/// Constraints: Minimum length = 3, Maximum length = 3
func (rcv *AirTransportMission_Abridged) JcsPriority() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(26))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Highest Joint Chiefs of Staff priority of this mission.
/// Example: /// Example: 1A3
/// Constraints: Minimum length = 3, Maximum length = 3
/// Flag indicating this is a close watch mission.
/// Example: /// Example: True
/// Constraints: No constraints specified.
func (rcv *AirTransportMission_Abridged) Cw() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(28))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

/// Flag indicating this is a close watch mission.
/// Example: /// Example: True
/// Constraints: No constraints specified.
func (rcv *AirTransportMission_Abridged) MutateCw(n bool) bool {
	return rcv._tab.MutateBoolSlot(28, n)
}

/// The type of mission (e.g. SAAM, CHNL, etc.).
/// Example: /// Example: SAAM
/// Constraints: Minimum length = 0, Maximum length = 32
func (rcv *AirTransportMission_Abridged) Type() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(30))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The type of mission (e.g. SAAM, CHNL, etc.).
/// Example: /// Example: SAAM
/// Constraints: Minimum length = 0, Maximum length = 32
/// The International Civil Aviation Organization (ICAO) site code of first cargo pick up.
/// Example: /// Example: KFAY
/// Constraints: Minimum length = 4, Maximum length = 4
func (rcv *AirTransportMission_Abridged) FirstPickUp() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(32))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The International Civil Aviation Organization (ICAO) site code of first cargo pick up.
/// Example: /// Example: KFAY
/// Constraints: Minimum length = 4, Maximum length = 4
/// The International Civil Aviation Organization (ICAO) site code of last cargo drop off.
/// Example: /// Example: PGUA
/// Constraints: Minimum length = 4, Maximum length = 4
func (rcv *AirTransportMission_Abridged) LastDropOff() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(34))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The International Civil Aviation Organization (ICAO) site code of last cargo drop off.
/// Example: /// Example: PGUA
/// Constraints: Minimum length = 4, Maximum length = 4
/// Mission alias.
/// Example: /// Example: PACIFIC DEPLOY / CHAP 3 MOVEMENT
/// Constraints: Minimum length = 0, Maximum length = 48
func (rcv *AirTransportMission_Abridged) Alias() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(36))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Mission alias.
/// Example: /// Example: PACIFIC DEPLOY / CHAP 3 MOVEMENT
/// Constraints: Minimum length = 0, Maximum length = 48
/// The call sign for this mission.
/// Example: /// Example: RCH123
/// Constraints: Minimum length = 0, Maximum length = 32
func (rcv *AirTransportMission_Abridged) CallSign() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(38))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The call sign for this mission.
/// Example: /// Example: RCH123
/// Constraints: Minimum length = 0, Maximum length = 32
/// The name of the operation that this mission supports.
/// Example: /// Example: Golden Eye
/// Constraints: Minimum length = 0, Maximum length = 100
func (rcv *AirTransportMission_Abridged) Operation() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(40))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The name of the operation that this mission supports.
/// Example: /// Example: Golden Eye
/// Constraints: Minimum length = 0, Maximum length = 100
/// Numbered Air Force (NAF) organization that owns the mission.
/// Example: /// Example: 18AF
/// Constraints: Minimum length = 0, Maximum length = 100
func (rcv *AirTransportMission_Abridged) Naf() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(42))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Numbered Air Force (NAF) organization that owns the mission.
/// Example: /// Example: 18AF
/// Constraints: Minimum length = 0, Maximum length = 100
/// The unit the mission is allocated to.
/// Example: /// Example: 437 AEW
/// Constraints: Minimum length = 0, Maximum length = 256
func (rcv *AirTransportMission_Abridged) AllocatedUnit() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(44))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The unit the mission is allocated to.
/// Example: /// Example: 437 AEW
/// Constraints: Minimum length = 0, Maximum length = 256
/// Load type of this mission (e.g. CARGO, MIXED, PASSENGER).
/// Example: /// Example: MIXED
/// Constraints: Minimum length = 0, Maximum length = 32
func (rcv *AirTransportMission_Abridged) LoadCategoryType() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(46))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Load type of this mission (e.g. CARGO, MIXED, PASSENGER).
/// Example: /// Example: MIXED
/// Constraints: Minimum length = 0, Maximum length = 32
/// Current state of the mission.
/// Example: /// Example: EXECUTION
/// Constraints: Minimum length = 0, Maximum length = 32
func (rcv *AirTransportMission_Abridged) State() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(48))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Current state of the mission.
/// Example: /// Example: EXECUTION
/// Constraints: Minimum length = 0, Maximum length = 32
/// The number of minutes a mission is off schedule based on the source system's business rules. Positive numbers are early, negative numbers are late.
/// Example: /// Example: -90.12
/// Constraints: No constraints specified.
func (rcv *AirTransportMission_Abridged) SourceSysDeviation() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(50))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// The number of minutes a mission is off schedule based on the source system's business rules. Positive numbers are early, negative numbers are late.
/// Example: /// Example: -90.12
/// Constraints: No constraints specified.
func (rcv *AirTransportMission_Abridged) MutateSourceSysDeviation(n float64) bool {
	return rcv._tab.MutateFloat64Slot(50, n)
}

/// The Aircraft and Personnel Automated Clearance System (APACS) system identifier used to process and approve clearance requests.
/// Example: /// Example: 1083034
/// Constraints: Minimum length = 0, Maximum length = 64
func (rcv *AirTransportMission_Abridged) ApacsId() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(52))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The Aircraft and Personnel Automated Clearance System (APACS) system identifier used to process and approve clearance requests.
/// Example: /// Example: 1083034
/// Constraints: Minimum length = 0, Maximum length = 64
/// Identifier of the Diplomatic Clearance Worksheet used to coordinate aircraft clearance requests.
/// Example: /// Example: G2-182402-AB
/// Constraints: Minimum length = 0, Maximum length = 256
func (rcv *AirTransportMission_Abridged) DipWorksheetName() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(54))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Identifier of the Diplomatic Clearance Worksheet used to coordinate aircraft clearance requests.
/// Example: /// Example: G2-182402-AB
/// Constraints: Minimum length = 0, Maximum length = 256
/// Time the row was created in the database, auto-populated by the system.
/// Example: /// Example: 2022-01-01T16:00:00.123Z
/// Constraints: No constraints specified.
func (rcv *AirTransportMission_Abridged) CreatedAt() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(56))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Time the row was created in the database, auto-populated by the system.
/// Example: /// Example: 2022-01-01T16:00:00.123Z
/// Constraints: No constraints specified.
/// Application user who created the row in the database, auto-populated by the system.
/// Example: /// Example: some.user
/// Constraints: Minimum length = 1, Maximum length = 64
func (rcv *AirTransportMission_Abridged) CreatedBy() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(58))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Application user who created the row in the database, auto-populated by the system.
/// Example: /// Example: some.user
/// Constraints: Minimum length = 1, Maximum length = 64
/// Time the row was updated in the database, auto-populated by the system.
/// Example: /// Example: 2022-01-01T16:00:00.123Z
/// Constraints: No constraints specified.
func (rcv *AirTransportMission_Abridged) UpdatedAt() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(60))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Time the row was updated in the database, auto-populated by the system.
/// Example: /// Example: 2022-01-01T16:00:00.123Z
/// Constraints: No constraints specified.
/// Application user who updated the row in the database, auto-populated by the system.
/// Example: /// Example: some.user
/// Constraints: Minimum length = 1, Maximum length = 64
func (rcv *AirTransportMission_Abridged) UpdatedBy() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(62))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Application user who updated the row in the database, auto-populated by the system.
/// Example: /// Example: some.user
/// Constraints: Minimum length = 1, Maximum length = 64
/// The source data library from which this record was received. This could be a remote or tactical UDL or another data library. If null, the record should be assumed to have originated from the primary Enterprise UDL.
/// Example: /// Example: AXE
/// Constraints: Minimum length = 0, Maximum length = 64
func (rcv *AirTransportMission_Abridged) SourceDl() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(64))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The source data library from which this record was received. This could be a remote or tactical UDL or another data library. If null, the record should be assumed to have originated from the primary Enterprise UDL.
/// Example: /// Example: AXE
/// Constraints: Minimum length = 0, Maximum length = 64
/// Source of the data.
/// Example: /// Example: Bluestaq
/// Constraints: Minimum length = 1, Maximum length = 36
func (rcv *AirTransportMission_Abridged) Source() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(66))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Source of the data.
/// Example: /// Example: Bluestaq
/// Constraints: Minimum length = 1, Maximum length = 36
/// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
/// Example: /// Example: THIRD_PARTY_DATASOURCE
/// Constraints: Minimum length = 0, Maximum length = 64
func (rcv *AirTransportMission_Abridged) Origin() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(68))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
/// Example: /// Example: THIRD_PARTY_DATASOURCE
/// Constraints: Minimum length = 0, Maximum length = 64
/// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
/// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
/// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
/// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
/// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
/// Example: /// Example: TEST
/// Constraints: Minimum length = 1, Maximum length = 32
func (rcv *AirTransportMission_Abridged) DataMode() AirTransportMission_Abridged_dataMode_Enum {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(70))
	if o != 0 {
		return AirTransportMission_Abridged_dataMode_Enum(rcv._tab.GetInt8(o + rcv._tab.Pos))
	}
	return 0
}

/// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
/// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
/// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
/// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
/// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
/// Example: /// Example: TEST
/// Constraints: Minimum length = 1, Maximum length = 32
func (rcv *AirTransportMission_Abridged) MutateDataMode(n AirTransportMission_Abridged_dataMode_Enum) bool {
	return rcv._tab.MutateInt8Slot(70, int8(n))
}

/// The originating source network on which this record was created, auto-populated by the system.
/// Example: /// Example: OPS1
/// Constraints: Minimum length = 0, Maximum length = 32
func (rcv *AirTransportMission_Abridged) OrigNetwork() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(72))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The originating source network on which this record was created, auto-populated by the system.
/// Example: /// Example: OPS1
/// Constraints: Minimum length = 0, Maximum length = 32
/// Information related to the planning, load, status, and deployment or dispatch of one aircraft to carry out a mission.
/// Example: /// Example: No example provided.
/// Constraints: No constraints specified.
func (rcv *AirTransportMission_Abridged) Requirements(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(74))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *AirTransportMission_Abridged) RequirementsLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(74))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

/// Information related to the planning, load, status, and deployment or dispatch of one aircraft to carry out a mission.
/// Example: /// Example: No example provided.
/// Constraints: No constraints specified.
/// Information related to the planning, load, status, and deployment or dispatch of one aircraft to carry out a mission.
/// Example: /// Example: No example provided.
/// Constraints: No constraints specified.
func (rcv *AirTransportMission_Abridged) Remarks(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(76))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *AirTransportMission_Abridged) RemarksLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(76))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

/// Information related to the planning, load, status, and deployment or dispatch of one aircraft to carry out a mission.
/// Example: /// Example: No example provided.
/// Constraints: No constraints specified.
/// Collection of Hazardous Material information associated with this Air Transport Mission.
/// Example: /// Example: No example provided.
/// Constraints: No constraints specified.
func (rcv *AirTransportMission_Abridged) HazMat(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(78))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *AirTransportMission_Abridged) HazMatLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(78))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

/// Collection of Hazardous Material information associated with this Air Transport Mission.
/// Example: /// Example: No example provided.
/// Constraints: No constraints specified.
func AirTransportMission_AbridgedStart(builder *flatbuffers.Builder) {
	builder.StartObject(38)
}
func AirTransportMission_AbridgedAddId(builder *flatbuffers.Builder, id flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(id), 0)
}
func AirTransportMission_AbridgedAddClassificationMarking(builder *flatbuffers.Builder, classificationMarking flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(classificationMarking), 0)
}
func AirTransportMission_AbridgedAddOrigMissionId(builder *flatbuffers.Builder, origMissionId flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(origMissionId), 0)
}
func AirTransportMission_AbridgedAddAmcMissionId(builder *flatbuffers.Builder, amcMissionId flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(3, flatbuffers.UOffsetT(amcMissionId), 0)
}
func AirTransportMission_AbridgedAddGdssMissionId(builder *flatbuffers.Builder, gdssMissionId flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(4, flatbuffers.UOffsetT(gdssMissionId), 0)
}
func AirTransportMission_AbridgedAddPrevMissionId(builder *flatbuffers.Builder, prevMissionId flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(5, flatbuffers.UOffsetT(prevMissionId), 0)
}
func AirTransportMission_AbridgedAddPrevAmcmissionId(builder *flatbuffers.Builder, prevAmcmissionId flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(6, flatbuffers.UOffsetT(prevAmcmissionId), 0)
}
func AirTransportMission_AbridgedAddNextMissionId(builder *flatbuffers.Builder, nextMissionId flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(7, flatbuffers.UOffsetT(nextMissionId), 0)
}
func AirTransportMission_AbridgedAddNextAmcmissionId(builder *flatbuffers.Builder, nextAmcmissionId flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(8, flatbuffers.UOffsetT(nextAmcmissionId), 0)
}
func AirTransportMission_AbridgedAddObjective(builder *flatbuffers.Builder, objective flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(9, flatbuffers.UOffsetT(objective), 0)
}
func AirTransportMission_AbridgedAddPurpose(builder *flatbuffers.Builder, purpose flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(10, flatbuffers.UOffsetT(purpose), 0)
}
func AirTransportMission_AbridgedAddJcsPriority(builder *flatbuffers.Builder, jcsPriority flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(11, flatbuffers.UOffsetT(jcsPriority), 0)
}
func AirTransportMission_AbridgedAddCw(builder *flatbuffers.Builder, cw bool) {
	builder.PrependBoolSlot(12, cw, false)
}
func AirTransportMission_AbridgedAddType(builder *flatbuffers.Builder, type_ flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(13, flatbuffers.UOffsetT(type_), 0)
}
func AirTransportMission_AbridgedAddFirstPickUp(builder *flatbuffers.Builder, firstPickUp flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(14, flatbuffers.UOffsetT(firstPickUp), 0)
}
func AirTransportMission_AbridgedAddLastDropOff(builder *flatbuffers.Builder, lastDropOff flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(15, flatbuffers.UOffsetT(lastDropOff), 0)
}
func AirTransportMission_AbridgedAddAlias(builder *flatbuffers.Builder, alias flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(16, flatbuffers.UOffsetT(alias), 0)
}
func AirTransportMission_AbridgedAddCallSign(builder *flatbuffers.Builder, callSign flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(17, flatbuffers.UOffsetT(callSign), 0)
}
func AirTransportMission_AbridgedAddOperation(builder *flatbuffers.Builder, operation flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(18, flatbuffers.UOffsetT(operation), 0)
}
func AirTransportMission_AbridgedAddNaf(builder *flatbuffers.Builder, naf flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(19, flatbuffers.UOffsetT(naf), 0)
}
func AirTransportMission_AbridgedAddAllocatedUnit(builder *flatbuffers.Builder, allocatedUnit flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(20, flatbuffers.UOffsetT(allocatedUnit), 0)
}
func AirTransportMission_AbridgedAddLoadCategoryType(builder *flatbuffers.Builder, loadCategoryType flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(21, flatbuffers.UOffsetT(loadCategoryType), 0)
}
func AirTransportMission_AbridgedAddState(builder *flatbuffers.Builder, state flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(22, flatbuffers.UOffsetT(state), 0)
}
func AirTransportMission_AbridgedAddSourceSysDeviation(builder *flatbuffers.Builder, sourceSysDeviation float64) {
	builder.PrependFloat64Slot(23, sourceSysDeviation, 0.0)
}
func AirTransportMission_AbridgedAddApacsId(builder *flatbuffers.Builder, apacsId flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(24, flatbuffers.UOffsetT(apacsId), 0)
}
func AirTransportMission_AbridgedAddDipWorksheetName(builder *flatbuffers.Builder, dipWorksheetName flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(25, flatbuffers.UOffsetT(dipWorksheetName), 0)
}
func AirTransportMission_AbridgedAddCreatedAt(builder *flatbuffers.Builder, createdAt flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(26, flatbuffers.UOffsetT(createdAt), 0)
}
func AirTransportMission_AbridgedAddCreatedBy(builder *flatbuffers.Builder, createdBy flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(27, flatbuffers.UOffsetT(createdBy), 0)
}
func AirTransportMission_AbridgedAddUpdatedAt(builder *flatbuffers.Builder, updatedAt flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(28, flatbuffers.UOffsetT(updatedAt), 0)
}
func AirTransportMission_AbridgedAddUpdatedBy(builder *flatbuffers.Builder, updatedBy flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(29, flatbuffers.UOffsetT(updatedBy), 0)
}
func AirTransportMission_AbridgedAddSourceDl(builder *flatbuffers.Builder, sourceDl flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(30, flatbuffers.UOffsetT(sourceDl), 0)
}
func AirTransportMission_AbridgedAddSource(builder *flatbuffers.Builder, source flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(31, flatbuffers.UOffsetT(source), 0)
}
func AirTransportMission_AbridgedAddOrigin(builder *flatbuffers.Builder, origin flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(32, flatbuffers.UOffsetT(origin), 0)
}
func AirTransportMission_AbridgedAddDataMode(builder *flatbuffers.Builder, dataMode AirTransportMission_Abridged_dataMode_Enum) {
	builder.PrependInt8Slot(33, int8(dataMode), 0)
}
func AirTransportMission_AbridgedAddOrigNetwork(builder *flatbuffers.Builder, origNetwork flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(34, flatbuffers.UOffsetT(origNetwork), 0)
}
func AirTransportMission_AbridgedAddRequirements(builder *flatbuffers.Builder, requirements flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(35, flatbuffers.UOffsetT(requirements), 0)
}
func AirTransportMission_AbridgedStartRequirementsVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func AirTransportMission_AbridgedAddRemarks(builder *flatbuffers.Builder, remarks flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(36, flatbuffers.UOffsetT(remarks), 0)
}
func AirTransportMission_AbridgedStartRemarksVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func AirTransportMission_AbridgedAddHazMat(builder *flatbuffers.Builder, hazMat flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(37, flatbuffers.UOffsetT(hazMat), 0)
}
func AirTransportMission_AbridgedStartHazMatVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func AirTransportMission_AbridgedEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
