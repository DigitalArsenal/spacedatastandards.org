// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package IndividualAircraftTasking_Ingest

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

/// /// Collection that specifies the naval flight operations for this ATO.
type IndividualAircraftTasking_Ingest struct {
	_tab flatbuffers.Table
}

const IndividualAircraftTasking_IngestIdentifier = "INDI"

func GetRootAsIndividualAircraftTasking_Ingest(buf []byte, offset flatbuffers.UOffsetT) *IndividualAircraftTasking_Ingest {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &IndividualAircraftTasking_Ingest{}
	x.Init(buf, n+offset)
	return x
}

func FinishIndividualAircraftTasking_IngestBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	identifierBytes := []byte(IndividualAircraftTasking_IngestIdentifier)
	builder.FinishWithFileIdentifier(offset, identifierBytes)
}

func IndividualAircraftTasking_IngestBufferHasIdentifier(buf []byte) bool {
	return flatbuffers.BufferHasIdentifier(buf, IndividualAircraftTasking_IngestIdentifier)
}

func GetSizePrefixedRootAsIndividualAircraftTasking_Ingest(buf []byte, offset flatbuffers.UOffsetT) *IndividualAircraftTasking_Ingest {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &IndividualAircraftTasking_Ingest{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedIndividualAircraftTasking_IngestBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	identifierBytes := []byte(IndividualAircraftTasking_IngestIdentifier)
	builder.FinishSizePrefixedWithFileIdentifier(offset, identifierBytes)
}

func SizePrefixedIndividualAircraftTasking_IngestBufferHasIdentifier(buf []byte) bool {
	return flatbuffers.SizePrefixedBufferHasIdentifier(buf, IndividualAircraftTasking_IngestIdentifier)
}

func (rcv *IndividualAircraftTasking_Ingest) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *IndividualAircraftTasking_Ingest) Table() flatbuffers.Table {
	return rcv._tab
}

/// The number of aircraft participating in this mission.
/// Example: /// Example: 2
/// Constraints: No constraints specified.
func (rcv *IndividualAircraftTasking_Ingest) NumAcft() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

/// The number of aircraft participating in this mission.
/// Example: /// Example: 2
/// Constraints: No constraints specified.
func (rcv *IndividualAircraftTasking_Ingest) MutateNumAcft(n int32) bool {
	return rcv._tab.MutateInt32Slot(4, n)
}

/// The type and model number for the aircraft. The field may specify a value of an aircraft not yet assigned an aircraft code contained in the aircraft codes list.
/// Example: /// Example: F35A
/// Constraints: Minimum length = 1, Maximum length = 36
func (rcv *IndividualAircraftTasking_Ingest) AcftType() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The type and model number for the aircraft. The field may specify a value of an aircraft not yet assigned an aircraft code contained in the aircraft codes list.
/// Example: /// Example: F35A
/// Constraints: Minimum length = 1, Maximum length = 36
/// The call sign assigned to this mission aircraft.
/// Example: /// Example: EAGLE47
/// Constraints: Minimum length = 0, Maximum length = 24
func (rcv *IndividualAircraftTasking_Ingest) CallSign() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The call sign assigned to this mission aircraft.
/// Example: /// Example: EAGLE47
/// Constraints: Minimum length = 0, Maximum length = 24
/// The code that indicates the ordinance mix carried on this mission aircraft.
/// Example: /// Example: 6A2W3
/// Constraints: Minimum length = 0, Maximum length = 48
func (rcv *IndividualAircraftTasking_Ingest) PriConfigCode() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The code that indicates the ordinance mix carried on this mission aircraft.
/// Example: /// Example: 6A2W3
/// Constraints: Minimum length = 0, Maximum length = 48
/// The code for the secondary ordinance mix carried on this mission aircraft.
/// Example: /// Example: 2S2WG
/// Constraints: Minimum length = 0, Maximum length = 48
func (rcv *IndividualAircraftTasking_Ingest) SecConfigCode() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The code for the secondary ordinance mix carried on this mission aircraft.
/// Example: /// Example: 2S2WG
/// Constraints: Minimum length = 0, Maximum length = 48
/// The Link 16 abbreviated call sign assigned to the ACA. This is normally the first and last letter and the last two numbers of the call sign.
/// Example: /// Example: EE47
/// Constraints: Minimum length = 0, Maximum length = 8
func (rcv *IndividualAircraftTasking_Ingest) Link16CallSign() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The Link 16 abbreviated call sign assigned to the ACA. This is normally the first and last letter and the last two numbers of the call sign.
/// Example: /// Example: EE47
/// Constraints: Minimum length = 0, Maximum length = 8
/// The TACAN channel assigned to this mission aircraft.
/// Example: /// Example: 123
/// Constraints: No constraints specified.
func (rcv *IndividualAircraftTasking_Ingest) TacanChan() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

/// The TACAN channel assigned to this mission aircraft.
/// Example: /// Example: 123
/// Constraints: No constraints specified.
func (rcv *IndividualAircraftTasking_Ingest) MutateTacanChan(n int32) bool {
	return rcv._tab.MutateInt32Slot(16, n)
}

/// An optional array of link 16 octal track numbers assigned as the primary JTIDS Unit (JU) address for the mission aircraft.
/// Example: /// Example: 12345
/// Constraints: No constraints specified.
func (rcv *IndividualAircraftTasking_Ingest) JuAddress(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(18))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *IndividualAircraftTasking_Ingest) JuAddressLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(18))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

/// An optional array of link 16 octal track numbers assigned as the primary JTIDS Unit (JU) address for the mission aircraft.
/// Example: /// Example: 12345
/// Constraints: No constraints specified.
/// The mode 1 and code of the Identification Friend or FOE (IFF) or Selective Identification Feature (SIF).
/// Example: /// Example: 111
/// Constraints: Minimum length = 0, Maximum length = 8
func (rcv *IndividualAircraftTasking_Ingest) IffSifMode1Code() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(20))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The mode 1 and code of the Identification Friend or FOE (IFF) or Selective Identification Feature (SIF).
/// Example: /// Example: 111
/// Constraints: Minimum length = 0, Maximum length = 8
/// The mode 2 and code of the Identification Friend or FOE (IFF) or Selective Identification Feature (SIF).
/// Example: /// Example: 20147
/// Constraints: Minimum length = 0, Maximum length = 8
func (rcv *IndividualAircraftTasking_Ingest) IffSifMode2Code() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(22))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The mode 2 and code of the Identification Friend or FOE (IFF) or Selective Identification Feature (SIF).
/// Example: /// Example: 20147
/// Constraints: Minimum length = 0, Maximum length = 8
/// The mode 3 and code of the Identification Friend or FOE (IFF) or Selective Identification Feature (SIF).
/// Example: /// Example: 30147
/// Constraints: Minimum length = 0, Maximum length = 8
func (rcv *IndividualAircraftTasking_Ingest) IffSifMode3Code() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(24))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The mode 3 and code of the Identification Friend or FOE (IFF) or Selective Identification Feature (SIF).
/// Example: /// Example: 30147
/// Constraints: Minimum length = 0, Maximum length = 8
func IndividualAircraftTasking_IngestStart(builder *flatbuffers.Builder) {
	builder.StartObject(11)
}
func IndividualAircraftTasking_IngestAddNumAcft(builder *flatbuffers.Builder, numAcft int32) {
	builder.PrependInt32Slot(0, numAcft, 0)
}
func IndividualAircraftTasking_IngestAddAcftType(builder *flatbuffers.Builder, acftType flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(acftType), 0)
}
func IndividualAircraftTasking_IngestAddCallSign(builder *flatbuffers.Builder, callSign flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(callSign), 0)
}
func IndividualAircraftTasking_IngestAddPriConfigCode(builder *flatbuffers.Builder, priConfigCode flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(3, flatbuffers.UOffsetT(priConfigCode), 0)
}
func IndividualAircraftTasking_IngestAddSecConfigCode(builder *flatbuffers.Builder, secConfigCode flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(4, flatbuffers.UOffsetT(secConfigCode), 0)
}
func IndividualAircraftTasking_IngestAddLink16CallSign(builder *flatbuffers.Builder, link16CallSign flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(5, flatbuffers.UOffsetT(link16CallSign), 0)
}
func IndividualAircraftTasking_IngestAddTacanChan(builder *flatbuffers.Builder, tacanChan int32) {
	builder.PrependInt32Slot(6, tacanChan, 0)
}
func IndividualAircraftTasking_IngestAddJuAddress(builder *flatbuffers.Builder, juAddress flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(7, flatbuffers.UOffsetT(juAddress), 0)
}
func IndividualAircraftTasking_IngestStartJuAddressVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func IndividualAircraftTasking_IngestAddIffSifMode1Code(builder *flatbuffers.Builder, iffSifMode1Code flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(8, flatbuffers.UOffsetT(iffSifMode1Code), 0)
}
func IndividualAircraftTasking_IngestAddIffSifMode2Code(builder *flatbuffers.Builder, iffSifMode2Code flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(9, flatbuffers.UOffsetT(iffSifMode2Code), 0)
}
func IndividualAircraftTasking_IngestAddIffSifMode3Code(builder *flatbuffers.Builder, iffSifMode3Code flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(10, flatbuffers.UOffsetT(iffSifMode3Code), 0)
}
func IndividualAircraftTasking_IngestEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
