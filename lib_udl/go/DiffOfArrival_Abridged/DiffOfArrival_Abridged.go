// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package DiffOfArrival_Abridged

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

/// /// Model representation of Signal time and frequency difference of arrival (TDOA/FDOA) information obtained by using passive RF based sensor phenomenologies and sensor triangulation.
type DiffOfArrival_Abridged struct {
	_tab flatbuffers.Table
}

const DiffOfArrival_AbridgedIdentifier = "DIFF"

func GetRootAsDiffOfArrival_Abridged(buf []byte, offset flatbuffers.UOffsetT) *DiffOfArrival_Abridged {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &DiffOfArrival_Abridged{}
	x.Init(buf, n+offset)
	return x
}

func FinishDiffOfArrival_AbridgedBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	identifierBytes := []byte(DiffOfArrival_AbridgedIdentifier)
	builder.FinishWithFileIdentifier(offset, identifierBytes)
}

func DiffOfArrival_AbridgedBufferHasIdentifier(buf []byte) bool {
	return flatbuffers.BufferHasIdentifier(buf, DiffOfArrival_AbridgedIdentifier)
}

func GetSizePrefixedRootAsDiffOfArrival_Abridged(buf []byte, offset flatbuffers.UOffsetT) *DiffOfArrival_Abridged {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &DiffOfArrival_Abridged{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedDiffOfArrival_AbridgedBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	identifierBytes := []byte(DiffOfArrival_AbridgedIdentifier)
	builder.FinishSizePrefixedWithFileIdentifier(offset, identifierBytes)
}

func SizePrefixedDiffOfArrival_AbridgedBufferHasIdentifier(buf []byte) bool {
	return flatbuffers.SizePrefixedBufferHasIdentifier(buf, DiffOfArrival_AbridgedIdentifier)
}

func (rcv *DiffOfArrival_Abridged) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *DiffOfArrival_Abridged) Table() flatbuffers.Table {
	return rcv._tab
}

/// Unique identifier of the record, auto-generated by the system.
/// Example: /// Example: DIFFOFARRIVAL-ID
/// Constraints: Minimum length = 1, Maximum length = 36
func (rcv *DiffOfArrival_Abridged) Id() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Unique identifier of the record, auto-generated by the system.
/// Example: /// Example: DIFFOFARRIVAL-ID
/// Constraints: Minimum length = 1, Maximum length = 36
/// Classification marking of the data in IC/CAPCO Portion-marked format.
/// Example: /// Example: U
/// Constraints: Minimum length = 1, Maximum length = 128
func (rcv *DiffOfArrival_Abridged) ClassificationMarking() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Classification marking of the data in IC/CAPCO Portion-marked format.
/// Example: /// Example: U
/// Constraints: Minimum length = 1, Maximum length = 128
/// Ob detection time in ISO 8601 UTC with microsecond precision.
/// Example: /// Example: 2018-01-01T16:00:00.123456Z
/// Constraints: No constraints specified.
func (rcv *DiffOfArrival_Abridged) ObTime() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Ob detection time in ISO 8601 UTC with microsecond precision.
/// Example: /// Example: 2018-01-01T16:00:00.123456Z
/// Constraints: No constraints specified.
/// Unique identifier of the target on-orbit object, if correlated.
/// Example: /// Example: ONORBIT-ID
/// Constraints: Minimum length = 0, Maximum length = 36
func (rcv *DiffOfArrival_Abridged) IdOnOrbit() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Unique identifier of the target on-orbit object, if correlated.
/// Example: /// Example: ONORBIT-ID
/// Constraints: Minimum length = 0, Maximum length = 36
/// Sensor ID of the primary/1st sensor used for this measurement.
/// Example: /// Example: SENSOR1-ID
/// Constraints: Minimum length = 0, Maximum length = 36
func (rcv *DiffOfArrival_Abridged) IdSensor1() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Sensor ID of the primary/1st sensor used for this measurement.
/// Example: /// Example: SENSOR1-ID
/// Constraints: Minimum length = 0, Maximum length = 36
/// Sensor ID of the secondary/2nd sensor used for this measurement.
/// Example: /// Example: SENSOR2-ID
/// Constraints: Minimum length = 0, Maximum length = 36
func (rcv *DiffOfArrival_Abridged) IdSensor2() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Sensor ID of the secondary/2nd sensor used for this measurement.
/// Example: /// Example: SENSOR2-ID
/// Constraints: Minimum length = 0, Maximum length = 36
/// Catalog number of the target on-orbit object.
/// Example: /// Example: 25544
/// Constraints: No constraints specified.
func (rcv *DiffOfArrival_Abridged) SatNo() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

/// Catalog number of the target on-orbit object.
/// Example: /// Example: 25544
/// Constraints: No constraints specified.
func (rcv *DiffOfArrival_Abridged) MutateSatNo(n int32) bool {
	return rcv._tab.MutateInt32Slot(16, n)
}

/// Optional identifier to indicate the specific tasking which produced this observation.
/// Example: /// Example: TASK-ID
/// Constraints: Minimum length = 0, Maximum length = 36
func (rcv *DiffOfArrival_Abridged) TaskId() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(18))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Optional identifier to indicate the specific tasking which produced this observation.
/// Example: /// Example: TASK-ID
/// Constraints: Minimum length = 0, Maximum length = 36
/// Optional identifier provided by observation source to indicate the target onorbit object of this observation. This may be an internal identifier and not necessarily a valid satellite number.
/// Example: /// Example: ORIGOBJECT-ID
/// Constraints: Minimum length = 0, Maximum length = 64
func (rcv *DiffOfArrival_Abridged) OrigObjectId() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(20))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Optional identifier provided by observation source to indicate the target onorbit object of this observation. This may be an internal identifier and not necessarily a valid satellite number.
/// Example: /// Example: ORIGOBJECT-ID
/// Constraints: Minimum length = 0, Maximum length = 64
/// Optional identifier provided by DOA source to indicate the primary/1st sensor identifier used for this measurement. This may be an internal identifier and not necessarily a valid sensor ID.
/// Example: /// Example: ORIGSENSOR1-ID
/// Constraints: Minimum length = 0, Maximum length = 64
func (rcv *DiffOfArrival_Abridged) OrigSensorId1() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(22))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Optional identifier provided by DOA source to indicate the primary/1st sensor identifier used for this measurement. This may be an internal identifier and not necessarily a valid sensor ID.
/// Example: /// Example: ORIGSENSOR1-ID
/// Constraints: Minimum length = 0, Maximum length = 64
/// Optional identifier provided by DOA source to indicate the secondary/2nd sensor identifier used for this this observation. This may be an internal identifier and not necessarily a valid sensor ID.
/// Example: /// Example: ORIGSENSOR2-ID
/// Constraints: Minimum length = 0, Maximum length = 64
func (rcv *DiffOfArrival_Abridged) OrigSensorId2() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(24))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Optional identifier provided by DOA source to indicate the secondary/2nd sensor identifier used for this this observation. This may be an internal identifier and not necessarily a valid sensor ID.
/// Example: /// Example: ORIGSENSOR2-ID
/// Constraints: Minimum length = 0, Maximum length = 64
/// Boolean indicating this observation is part of an uncorrelated track or was unable to be correlated to a known object. This flag should only be set to true by data providers after an attempt to correlate to an on-orbit object was made and failed. If unable to correlate, the 'origObjectId' field may be populated with an internal data provider specific identifier.
/// Example: /// Example: False
/// Constraints: No constraints specified.
func (rcv *DiffOfArrival_Abridged) Uct() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(26))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

/// Boolean indicating this observation is part of an uncorrelated track or was unable to be correlated to a known object. This flag should only be set to true by data providers after an attempt to correlate to an on-orbit object was made and failed. If unable to correlate, the 'origObjectId' field may be populated with an internal data provider specific identifier.
/// Example: /// Example: False
/// Constraints: No constraints specified.
func (rcv *DiffOfArrival_Abridged) MutateUct(n bool) bool {
	return rcv._tab.MutateBoolSlot(26, n)
}

/// The signal arrival delay relative to sensor 1 in seconds.
/// Example: /// Example: 1.1
/// Constraints: No constraints specified.
func (rcv *DiffOfArrival_Abridged) Sensor1Delay() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(28))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// The signal arrival delay relative to sensor 1 in seconds.
/// Example: /// Example: 1.1
/// Constraints: No constraints specified.
func (rcv *DiffOfArrival_Abridged) MutateSensor1Delay(n float64) bool {
	return rcv._tab.MutateFloat64Slot(28, n)
}

/// The signal arrival delay relative to sensor 2 in seconds.
/// Example: /// Example: 1.1
/// Constraints: No constraints specified.
func (rcv *DiffOfArrival_Abridged) Sensor2Delay() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(30))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// The signal arrival delay relative to sensor 2 in seconds.
/// Example: /// Example: 1.1
/// Constraints: No constraints specified.
func (rcv *DiffOfArrival_Abridged) MutateSensor2Delay(n float64) bool {
	return rcv._tab.MutateFloat64Slot(30, n)
}

/// Sensor WGS84 latitude at obTime (if mobile/onorbit) in degrees. If null, can be obtained from sensor info. -90 to 90 degrees (negative values south of equator).
/// Example: /// Example: 45.1
/// Constraints: No constraints specified.
func (rcv *DiffOfArrival_Abridged) Senlat() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(32))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Sensor WGS84 latitude at obTime (if mobile/onorbit) in degrees. If null, can be obtained from sensor info. -90 to 90 degrees (negative values south of equator).
/// Example: /// Example: 45.1
/// Constraints: No constraints specified.
func (rcv *DiffOfArrival_Abridged) MutateSenlat(n float64) bool {
	return rcv._tab.MutateFloat64Slot(32, n)
}

/// Sensor WGS84 longitude at obTime (if mobile/onorbit) in degrees. If null, can be obtained from sensor info. -180 to 180 degrees (negative values west of Prime Meridian).
/// Example: /// Example: 120.1
/// Constraints: No constraints specified.
func (rcv *DiffOfArrival_Abridged) Senlon() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(34))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Sensor WGS84 longitude at obTime (if mobile/onorbit) in degrees. If null, can be obtained from sensor info. -180 to 180 degrees (negative values west of Prime Meridian).
/// Example: /// Example: 120.1
/// Constraints: No constraints specified.
func (rcv *DiffOfArrival_Abridged) MutateSenlon(n float64) bool {
	return rcv._tab.MutateFloat64Slot(34, n)
}

/// Sensor altitude at obTime (if mobile/onorbit) in km. If null, can be obtained from sensor info.
/// Example: /// Example: 1.1
/// Constraints: No constraints specified.
func (rcv *DiffOfArrival_Abridged) Senalt() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(36))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Sensor altitude at obTime (if mobile/onorbit) in km. If null, can be obtained from sensor info.
/// Example: /// Example: 1.1
/// Constraints: No constraints specified.
func (rcv *DiffOfArrival_Abridged) MutateSenalt(n float64) bool {
	return rcv._tab.MutateFloat64Slot(36, n)
}

/// Sensor 2 WGS84 latitude at obTime (if mobile/onorbit) in degrees. If null, can be obtained from sensor info.
/// Example: /// Example: 1.1
/// Constraints: No constraints specified.
func (rcv *DiffOfArrival_Abridged) Sen2lat() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(38))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Sensor 2 WGS84 latitude at obTime (if mobile/onorbit) in degrees. If null, can be obtained from sensor info.
/// Example: /// Example: 1.1
/// Constraints: No constraints specified.
func (rcv *DiffOfArrival_Abridged) MutateSen2lat(n float64) bool {
	return rcv._tab.MutateFloat64Slot(38, n)
}

/// Sensor 2 WGS84 longitude at obTime (if mobile/onorbit) in degrees. If null, can be obtained from sensor info.
/// Example: /// Example: 1.1
/// Constraints: No constraints specified.
func (rcv *DiffOfArrival_Abridged) Sen2lon() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(40))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Sensor 2 WGS84 longitude at obTime (if mobile/onorbit) in degrees. If null, can be obtained from sensor info.
/// Example: /// Example: 1.1
/// Constraints: No constraints specified.
func (rcv *DiffOfArrival_Abridged) MutateSen2lon(n float64) bool {
	return rcv._tab.MutateFloat64Slot(40, n)
}

/// Sensor 2 altitude at obTime (if mobile/onorbit) in km. If null, can be obtained from sensor info.
/// Example: /// Example: 1.1
/// Constraints: No constraints specified.
func (rcv *DiffOfArrival_Abridged) Sen2alt() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(42))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Sensor 2 altitude at obTime (if mobile/onorbit) in km. If null, can be obtained from sensor info.
/// Example: /// Example: 1.1
/// Constraints: No constraints specified.
func (rcv *DiffOfArrival_Abridged) MutateSen2alt(n float64) bool {
	return rcv._tab.MutateFloat64Slot(42, n)
}

/// Center frequency of the collect in Hz.
/// Example: /// Example: 1.1
/// Constraints: No constraints specified.
func (rcv *DiffOfArrival_Abridged) Frequency() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(44))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Center frequency of the collect in Hz.
/// Example: /// Example: 1.1
/// Constraints: No constraints specified.
func (rcv *DiffOfArrival_Abridged) MutateFrequency(n float64) bool {
	return rcv._tab.MutateFloat64Slot(44, n)
}

/// Bandwidth of the signal in Hz.
/// Example: /// Example: 1.1
/// Constraints: No constraints specified.
func (rcv *DiffOfArrival_Abridged) Bandwidth() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(46))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Bandwidth of the signal in Hz.
/// Example: /// Example: 1.1
/// Constraints: No constraints specified.
func (rcv *DiffOfArrival_Abridged) MutateBandwidth(n float64) bool {
	return rcv._tab.MutateFloat64Slot(46, n)
}

/// Delta range, in km. Delta range calculation convention is (sensor2 - sensor1).
/// Example: /// Example: 1.1
/// Constraints: No constraints specified.
func (rcv *DiffOfArrival_Abridged) DeltaRange() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(48))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Delta range, in km. Delta range calculation convention is (sensor2 - sensor1).
/// Example: /// Example: 1.1
/// Constraints: No constraints specified.
func (rcv *DiffOfArrival_Abridged) MutateDeltaRange(n float64) bool {
	return rcv._tab.MutateFloat64Slot(48, n)
}

/// One sigma uncertainty in delta range, in km.
/// Example: /// Example: 1.1
/// Constraints: No constraints specified.
func (rcv *DiffOfArrival_Abridged) DeltaRangeUnc() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(50))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// One sigma uncertainty in delta range, in km.
/// Example: /// Example: 1.1
/// Constraints: No constraints specified.
func (rcv *DiffOfArrival_Abridged) MutateDeltaRangeUnc(n float64) bool {
	return rcv._tab.MutateFloat64Slot(50, n)
}

/// Delta range rate, in km/sec. Delta range rate calculation convention is (sensor2 - sensor1).
/// Example: /// Example: 1.1
/// Constraints: No constraints specified.
func (rcv *DiffOfArrival_Abridged) DeltaRangeRate() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(52))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Delta range rate, in km/sec. Delta range rate calculation convention is (sensor2 - sensor1).
/// Example: /// Example: 1.1
/// Constraints: No constraints specified.
func (rcv *DiffOfArrival_Abridged) MutateDeltaRangeRate(n float64) bool {
	return rcv._tab.MutateFloat64Slot(52, n)
}

/// One sigma uncertainty in the delta range rate, in km/sec.
/// Example: /// Example: 1.1
/// Constraints: No constraints specified.
func (rcv *DiffOfArrival_Abridged) DeltaRangeRateUnc() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(54))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// One sigma uncertainty in the delta range rate, in km/sec.
/// Example: /// Example: 1.1
/// Constraints: No constraints specified.
func (rcv *DiffOfArrival_Abridged) MutateDeltaRangeRateUnc(n float64) bool {
	return rcv._tab.MutateFloat64Slot(54, n)
}

/// Signal to noise ratio, in dB.
/// Example: /// Example: 1.1
/// Constraints: No constraints specified.
func (rcv *DiffOfArrival_Abridged) Snr() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(56))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Signal to noise ratio, in dB.
/// Example: /// Example: 1.1
/// Constraints: No constraints specified.
func (rcv *DiffOfArrival_Abridged) MutateSnr(n float64) bool {
	return rcv._tab.MutateFloat64Slot(56, n)
}

/// Time difference of arrival of the center frequency signal, in seconds.  TDOA calculation convention is (sensor2 - sensor1).
/// Example: /// Example: 1.1
/// Constraints: No constraints specified.
func (rcv *DiffOfArrival_Abridged) Tdoa() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(58))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Time difference of arrival of the center frequency signal, in seconds.  TDOA calculation convention is (sensor2 - sensor1).
/// Example: /// Example: 1.1
/// Constraints: No constraints specified.
func (rcv *DiffOfArrival_Abridged) MutateTdoa(n float64) bool {
	return rcv._tab.MutateFloat64Slot(58, n)
}

/// One sigma uncertainty in time difference of arrival of the center frequency signal, in seconds.
/// Example: /// Example: 1.1
/// Constraints: No constraints specified.
func (rcv *DiffOfArrival_Abridged) TdoaUnc() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(60))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// One sigma uncertainty in time difference of arrival of the center frequency signal, in seconds.
/// Example: /// Example: 1.1
/// Constraints: No constraints specified.
func (rcv *DiffOfArrival_Abridged) MutateTdoaUnc(n float64) bool {
	return rcv._tab.MutateFloat64Slot(60, n)
}

/// Frequency difference of arrival of the center frequency signal, in Hz.  FDOA calculation convention is (sensor2 - sensor1).
/// Example: /// Example: 1.1
/// Constraints: No constraints specified.
func (rcv *DiffOfArrival_Abridged) Fdoa() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(62))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Frequency difference of arrival of the center frequency signal, in Hz.  FDOA calculation convention is (sensor2 - sensor1).
/// Example: /// Example: 1.1
/// Constraints: No constraints specified.
func (rcv *DiffOfArrival_Abridged) MutateFdoa(n float64) bool {
	return rcv._tab.MutateFloat64Slot(62, n)
}

/// One sigma uncertainty in frequency difference of arrival of the center frequency signal, in Hz.
/// Example: /// Example: 1.1
/// Constraints: No constraints specified.
func (rcv *DiffOfArrival_Abridged) FdoaUnc() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(64))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// One sigma uncertainty in frequency difference of arrival of the center frequency signal, in Hz.
/// Example: /// Example: 1.1
/// Constraints: No constraints specified.
func (rcv *DiffOfArrival_Abridged) MutateFdoaUnc(n float64) bool {
	return rcv._tab.MutateFloat64Slot(64, n)
}

/// Collection mode (e.g. SURVEY, SPOT_SEARCH, NEIGHBORHOOD_WATCH, DIRECTED_SEARCH, MANUAL, etc).
/// Example: /// Example: SURVEY
/// Constraints: Minimum length = 0, Maximum length = 32
func (rcv *DiffOfArrival_Abridged) CollectionMode() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(66))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Collection mode (e.g. SURVEY, SPOT_SEARCH, NEIGHBORHOOD_WATCH, DIRECTED_SEARCH, MANUAL, etc).
/// Example: /// Example: SURVEY
/// Constraints: Minimum length = 0, Maximum length = 32
/// Source of the data.
/// Example: /// Example: Bluestaq
/// Constraints: Minimum length = 1, Maximum length = 64
func (rcv *DiffOfArrival_Abridged) Source() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(68))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Source of the data.
/// Example: /// Example: Bluestaq
/// Constraints: Minimum length = 1, Maximum length = 64
/// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
/// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
/// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
/// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
/// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
/// Example: /// Example: TEST
/// Constraints: Minimum length = 1, Maximum length = 32
func (rcv *DiffOfArrival_Abridged) DataMode() DiffOfArrival_Abridged_dataMode_Enum {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(70))
	if o != 0 {
		return DiffOfArrival_Abridged_dataMode_Enum(rcv._tab.GetInt8(o + rcv._tab.Pos))
	}
	return 0
}

/// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
/// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
/// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
/// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
/// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
/// Example: /// Example: TEST
/// Constraints: Minimum length = 1, Maximum length = 32
func (rcv *DiffOfArrival_Abridged) MutateDataMode(n DiffOfArrival_Abridged_dataMode_Enum) bool {
	return rcv._tab.MutateInt8Slot(70, int8(n))
}

/// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
/// Example: /// Example: THIRD_PARTY_DATASOURCE
/// Constraints: Minimum length = 0, Maximum length = 64
func (rcv *DiffOfArrival_Abridged) Origin() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(72))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
/// Example: /// Example: THIRD_PARTY_DATASOURCE
/// Constraints: Minimum length = 0, Maximum length = 64
/// Time the row was created in the database, auto-populated by the system.
/// Example: /// Example: 2018-01-01T16:00:00.123Z
/// Constraints: No constraints specified.
func (rcv *DiffOfArrival_Abridged) CreatedAt() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(74))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Time the row was created in the database, auto-populated by the system.
/// Example: /// Example: 2018-01-01T16:00:00.123Z
/// Constraints: No constraints specified.
/// Application user who created the row in the database, auto-populated by the system.
/// Example: /// Example: some.user
/// Constraints: Minimum length = 1, Maximum length = 64
func (rcv *DiffOfArrival_Abridged) CreatedBy() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(76))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Application user who created the row in the database, auto-populated by the system.
/// Example: /// Example: some.user
/// Constraints: Minimum length = 1, Maximum length = 64
/// Optional source-provided and searchable metadata or descriptor of the data.
/// Example: /// Example: Example descriptor
/// Constraints: Minimum length = 0, Maximum length = 64
func (rcv *DiffOfArrival_Abridged) Descriptor() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(78))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Optional source-provided and searchable metadata or descriptor of the data.
/// Example: /// Example: Example descriptor
/// Constraints: Minimum length = 0, Maximum length = 64
/// Optional identifier to track a commercial or marketplace transaction executed to produce this data.
/// Example: /// Example: TRANSACTION-ID
/// Constraints: Minimum length = 0, Maximum length = 64
func (rcv *DiffOfArrival_Abridged) TransactionId() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(80))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Optional identifier to track a commercial or marketplace transaction executed to produce this data.
/// Example: /// Example: TRANSACTION-ID
/// Constraints: Minimum length = 0, Maximum length = 64
/// The originating source network on which this record was created, auto-populated by the system.
/// Example: /// Example: ORIG
/// Constraints: Minimum length = 0, Maximum length = 32
func (rcv *DiffOfArrival_Abridged) OrigNetwork() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(82))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The originating source network on which this record was created, auto-populated by the system.
/// Example: /// Example: ORIG
/// Constraints: Minimum length = 0, Maximum length = 32
/// The source data library from which this record was received. This could be a remote or tactical UDL or another data library. If null, the record should be assumed to have originated from the primary Enterprise UDL.
/// Example: /// Example: AXE
/// Constraints: Minimum length = 0, Maximum length = 64
func (rcv *DiffOfArrival_Abridged) SourceDl() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(84))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The source data library from which this record was received. This could be a remote or tactical UDL or another data library. If null, the record should be assumed to have originated from the primary Enterprise UDL.
/// Example: /// Example: AXE
/// Constraints: Minimum length = 0, Maximum length = 64
func DiffOfArrival_AbridgedStart(builder *flatbuffers.Builder) {
	builder.StartObject(41)
}
func DiffOfArrival_AbridgedAddId(builder *flatbuffers.Builder, id flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(id), 0)
}
func DiffOfArrival_AbridgedAddClassificationMarking(builder *flatbuffers.Builder, classificationMarking flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(classificationMarking), 0)
}
func DiffOfArrival_AbridgedAddObTime(builder *flatbuffers.Builder, obTime flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(obTime), 0)
}
func DiffOfArrival_AbridgedAddIdOnOrbit(builder *flatbuffers.Builder, idOnOrbit flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(3, flatbuffers.UOffsetT(idOnOrbit), 0)
}
func DiffOfArrival_AbridgedAddIdSensor1(builder *flatbuffers.Builder, idSensor1 flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(4, flatbuffers.UOffsetT(idSensor1), 0)
}
func DiffOfArrival_AbridgedAddIdSensor2(builder *flatbuffers.Builder, idSensor2 flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(5, flatbuffers.UOffsetT(idSensor2), 0)
}
func DiffOfArrival_AbridgedAddSatNo(builder *flatbuffers.Builder, satNo int32) {
	builder.PrependInt32Slot(6, satNo, 0)
}
func DiffOfArrival_AbridgedAddTaskId(builder *flatbuffers.Builder, taskId flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(7, flatbuffers.UOffsetT(taskId), 0)
}
func DiffOfArrival_AbridgedAddOrigObjectId(builder *flatbuffers.Builder, origObjectId flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(8, flatbuffers.UOffsetT(origObjectId), 0)
}
func DiffOfArrival_AbridgedAddOrigSensorId1(builder *flatbuffers.Builder, origSensorId1 flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(9, flatbuffers.UOffsetT(origSensorId1), 0)
}
func DiffOfArrival_AbridgedAddOrigSensorId2(builder *flatbuffers.Builder, origSensorId2 flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(10, flatbuffers.UOffsetT(origSensorId2), 0)
}
func DiffOfArrival_AbridgedAddUct(builder *flatbuffers.Builder, uct bool) {
	builder.PrependBoolSlot(11, uct, false)
}
func DiffOfArrival_AbridgedAddSensor1Delay(builder *flatbuffers.Builder, sensor1Delay float64) {
	builder.PrependFloat64Slot(12, sensor1Delay, 0.0)
}
func DiffOfArrival_AbridgedAddSensor2Delay(builder *flatbuffers.Builder, sensor2Delay float64) {
	builder.PrependFloat64Slot(13, sensor2Delay, 0.0)
}
func DiffOfArrival_AbridgedAddSenlat(builder *flatbuffers.Builder, senlat float64) {
	builder.PrependFloat64Slot(14, senlat, 0.0)
}
func DiffOfArrival_AbridgedAddSenlon(builder *flatbuffers.Builder, senlon float64) {
	builder.PrependFloat64Slot(15, senlon, 0.0)
}
func DiffOfArrival_AbridgedAddSenalt(builder *flatbuffers.Builder, senalt float64) {
	builder.PrependFloat64Slot(16, senalt, 0.0)
}
func DiffOfArrival_AbridgedAddSen2lat(builder *flatbuffers.Builder, sen2lat float64) {
	builder.PrependFloat64Slot(17, sen2lat, 0.0)
}
func DiffOfArrival_AbridgedAddSen2lon(builder *flatbuffers.Builder, sen2lon float64) {
	builder.PrependFloat64Slot(18, sen2lon, 0.0)
}
func DiffOfArrival_AbridgedAddSen2alt(builder *flatbuffers.Builder, sen2alt float64) {
	builder.PrependFloat64Slot(19, sen2alt, 0.0)
}
func DiffOfArrival_AbridgedAddFrequency(builder *flatbuffers.Builder, frequency float64) {
	builder.PrependFloat64Slot(20, frequency, 0.0)
}
func DiffOfArrival_AbridgedAddBandwidth(builder *flatbuffers.Builder, bandwidth float64) {
	builder.PrependFloat64Slot(21, bandwidth, 0.0)
}
func DiffOfArrival_AbridgedAddDeltaRange(builder *flatbuffers.Builder, deltaRange float64) {
	builder.PrependFloat64Slot(22, deltaRange, 0.0)
}
func DiffOfArrival_AbridgedAddDeltaRangeUnc(builder *flatbuffers.Builder, deltaRangeUnc float64) {
	builder.PrependFloat64Slot(23, deltaRangeUnc, 0.0)
}
func DiffOfArrival_AbridgedAddDeltaRangeRate(builder *flatbuffers.Builder, deltaRangeRate float64) {
	builder.PrependFloat64Slot(24, deltaRangeRate, 0.0)
}
func DiffOfArrival_AbridgedAddDeltaRangeRateUnc(builder *flatbuffers.Builder, deltaRangeRateUnc float64) {
	builder.PrependFloat64Slot(25, deltaRangeRateUnc, 0.0)
}
func DiffOfArrival_AbridgedAddSnr(builder *flatbuffers.Builder, snr float64) {
	builder.PrependFloat64Slot(26, snr, 0.0)
}
func DiffOfArrival_AbridgedAddTdoa(builder *flatbuffers.Builder, tdoa float64) {
	builder.PrependFloat64Slot(27, tdoa, 0.0)
}
func DiffOfArrival_AbridgedAddTdoaUnc(builder *flatbuffers.Builder, tdoaUnc float64) {
	builder.PrependFloat64Slot(28, tdoaUnc, 0.0)
}
func DiffOfArrival_AbridgedAddFdoa(builder *flatbuffers.Builder, fdoa float64) {
	builder.PrependFloat64Slot(29, fdoa, 0.0)
}
func DiffOfArrival_AbridgedAddFdoaUnc(builder *flatbuffers.Builder, fdoaUnc float64) {
	builder.PrependFloat64Slot(30, fdoaUnc, 0.0)
}
func DiffOfArrival_AbridgedAddCollectionMode(builder *flatbuffers.Builder, collectionMode flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(31, flatbuffers.UOffsetT(collectionMode), 0)
}
func DiffOfArrival_AbridgedAddSource(builder *flatbuffers.Builder, source flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(32, flatbuffers.UOffsetT(source), 0)
}
func DiffOfArrival_AbridgedAddDataMode(builder *flatbuffers.Builder, dataMode DiffOfArrival_Abridged_dataMode_Enum) {
	builder.PrependInt8Slot(33, int8(dataMode), 0)
}
func DiffOfArrival_AbridgedAddOrigin(builder *flatbuffers.Builder, origin flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(34, flatbuffers.UOffsetT(origin), 0)
}
func DiffOfArrival_AbridgedAddCreatedAt(builder *flatbuffers.Builder, createdAt flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(35, flatbuffers.UOffsetT(createdAt), 0)
}
func DiffOfArrival_AbridgedAddCreatedBy(builder *flatbuffers.Builder, createdBy flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(36, flatbuffers.UOffsetT(createdBy), 0)
}
func DiffOfArrival_AbridgedAddDescriptor(builder *flatbuffers.Builder, descriptor flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(37, flatbuffers.UOffsetT(descriptor), 0)
}
func DiffOfArrival_AbridgedAddTransactionId(builder *flatbuffers.Builder, transactionId flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(38, flatbuffers.UOffsetT(transactionId), 0)
}
func DiffOfArrival_AbridgedAddOrigNetwork(builder *flatbuffers.Builder, origNetwork flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(39, flatbuffers.UOffsetT(origNetwork), 0)
}
func DiffOfArrival_AbridgedAddSourceDl(builder *flatbuffers.Builder, sourceDl flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(40, flatbuffers.UOffsetT(sourceDl), 0)
}
func DiffOfArrival_AbridgedEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
