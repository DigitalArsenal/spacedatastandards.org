// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package Surface_Full

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

/// /// Surface information contains properties related to an airfield's runway, taxiway, and parking. The surface types and characteristics can dictate the airfield's capability of hosting a specific aircraft.
type Surface_Full struct {
	_tab flatbuffers.Table
}

const Surface_FullIdentifier = "SURF"

func GetRootAsSurface_Full(buf []byte, offset flatbuffers.UOffsetT) *Surface_Full {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &Surface_Full{}
	x.Init(buf, n+offset)
	return x
}

func FinishSurface_FullBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	identifierBytes := []byte(Surface_FullIdentifier)
	builder.FinishWithFileIdentifier(offset, identifierBytes)
}

func Surface_FullBufferHasIdentifier(buf []byte) bool {
	return flatbuffers.BufferHasIdentifier(buf, Surface_FullIdentifier)
}

func GetSizePrefixedRootAsSurface_Full(buf []byte, offset flatbuffers.UOffsetT) *Surface_Full {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &Surface_Full{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedSurface_FullBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	identifierBytes := []byte(Surface_FullIdentifier)
	builder.FinishSizePrefixedWithFileIdentifier(offset, identifierBytes)
}

func SizePrefixedSurface_FullBufferHasIdentifier(buf []byte) bool {
	return flatbuffers.SizePrefixedBufferHasIdentifier(buf, Surface_FullIdentifier)
}

func (rcv *Surface_Full) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *Surface_Full) Table() flatbuffers.Table {
	return rcv._tab
}

/// Unique identifier of the record, auto-generated by the system.
/// Example: /// Example: be831d39-1822-da9f-7ace-6cc5643397dc
/// Constraints: Minimum length = 1, Maximum length = 36
func (rcv *Surface_Full) Id() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Unique identifier of the record, auto-generated by the system.
/// Example: /// Example: be831d39-1822-da9f-7ace-6cc5643397dc
/// Constraints: Minimum length = 1, Maximum length = 36
/// Classification marking of the data in IC/CAPCO Portion-marked format.
/// Example: /// Example: U
/// Constraints: Minimum length = 1, Maximum length = 128
func (rcv *Surface_Full) ClassificationMarking() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Classification marking of the data in IC/CAPCO Portion-marked format.
/// Example: /// Example: U
/// Constraints: Minimum length = 1, Maximum length = 128
/// The surface name or identifier.
/// Example: /// Example: West lot
/// Constraints: Minimum length = 1, Maximum length = 64
func (rcv *Surface_Full) Name() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The surface name or identifier.
/// Example: /// Example: West lot
/// Constraints: Minimum length = 1, Maximum length = 64
/// The surface type of this record (e.g. RUNWAY, TAXIWAY, PARKING).
/// Example: /// Example: PARKING
/// Constraints: Minimum length = 1, Maximum length = 7
func (rcv *Surface_Full) Type() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The surface type of this record (e.g. RUNWAY, TAXIWAY, PARKING).
/// Example: /// Example: PARKING
/// Constraints: Minimum length = 1, Maximum length = 7
/// The ID of the site where this surface is located.
/// Example: /// Example: SITE-ID
/// Constraints: Minimum length = 0, Maximum length = 36
func (rcv *Surface_Full) IdSite() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The ID of the site where this surface is located.
/// Example: /// Example: SITE-ID
/// Constraints: Minimum length = 0, Maximum length = 36
/// Alternate site identifier provided by the source.
/// Example: /// Example: ORIG-SITE-ID
/// Constraints: Minimum length = 0, Maximum length = 36
func (rcv *Surface_Full) AltSiteId() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Alternate site identifier provided by the source.
/// Example: /// Example: ORIG-SITE-ID
/// Constraints: Minimum length = 0, Maximum length = 36
/// Flag indicating this is the primary runway.  Applicable for runway surface types only.
/// Example: /// Example: True
/// Constraints: No constraints specified.
func (rcv *Surface_Full) Primary() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

/// Flag indicating this is the primary runway.  Applicable for runway surface types only.
/// Example: /// Example: True
/// Constraints: No constraints specified.
func (rcv *Surface_Full) MutatePrimary(n bool) bool {
	return rcv._tab.MutateBoolSlot(16, n)
}

/// The length of the surface type, in feet.  Applicable for runway and parking surface types.
/// Example: /// Example: 1500
/// Constraints: No constraints specified.
func (rcv *Surface_Full) LengthFt() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(18))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

/// The length of the surface type, in feet.  Applicable for runway and parking surface types.
/// Example: /// Example: 1500
/// Constraints: No constraints specified.
func (rcv *Surface_Full) MutateLengthFt(n int32) bool {
	return rcv._tab.MutateInt32Slot(18, n)
}

/// The landing distance available for the runway, in feet.  Applicable for runway surface types only.
/// Example: /// Example: 475
/// Constraints: No constraints specified.
func (rcv *Surface_Full) LdaFt() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(20))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

/// The landing distance available for the runway, in feet.  Applicable for runway surface types only.
/// Example: /// Example: 475
/// Constraints: No constraints specified.
func (rcv *Surface_Full) MutateLdaFt(n int32) bool {
	return rcv._tab.MutateInt32Slot(20, n)
}

/// The width of the surface type, in feet.
/// Example: /// Example: 220
/// Constraints: No constraints specified.
func (rcv *Surface_Full) WidthFt() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(22))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

/// The width of the surface type, in feet.
/// Example: /// Example: 220
/// Constraints: No constraints specified.
func (rcv *Surface_Full) MutateWidthFt(n int32) bool {
	return rcv._tab.MutateInt32Slot(22, n)
}

/// The length of the surface type, in meters.  Applicable for runway and parking surface types.
/// Example: /// Example: 457
/// Constraints: No constraints specified.
func (rcv *Surface_Full) LengthM() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(24))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

/// The length of the surface type, in meters.  Applicable for runway and parking surface types.
/// Example: /// Example: 457
/// Constraints: No constraints specified.
func (rcv *Surface_Full) MutateLengthM(n int32) bool {
	return rcv._tab.MutateInt32Slot(24, n)
}

/// The landing distance available for the runway, in meters.  Applicable for runway surface types only.
/// Example: /// Example: 145
/// Constraints: No constraints specified.
func (rcv *Surface_Full) LdaM() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(26))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

/// The landing distance available for the runway, in meters.  Applicable for runway surface types only.
/// Example: /// Example: 145
/// Constraints: No constraints specified.
func (rcv *Surface_Full) MutateLdaM(n int32) bool {
	return rcv._tab.MutateInt32Slot(26, n)
}

/// The width of the surface type, in meters.
/// Example: /// Example: 67
/// Constraints: No constraints specified.
func (rcv *Surface_Full) WidthM() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(28))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

/// The width of the surface type, in meters.
/// Example: /// Example: 67
/// Constraints: No constraints specified.
func (rcv *Surface_Full) MutateWidthM(n int32) bool {
	return rcv._tab.MutateInt32Slot(28, n)
}

/// The surface material (e.g. Asphalt, Concrete, Dirt).
/// Example: /// Example: Concrete
/// Constraints: Minimum length = 0, Maximum length = 16
func (rcv *Surface_Full) Material() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(30))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The surface material (e.g. Asphalt, Concrete, Dirt).
/// Example: /// Example: Concrete
/// Constraints: Minimum length = 0, Maximum length = 16
/// The surface condition (e.g. GOOD, FAIR, POOR, SERIOUS, FAILED, CLOSED, UNKNOWN).
/// Example: /// Example: GOOD
/// Constraints: Minimum length = 0, Maximum length = 16
func (rcv *Surface_Full) Condition() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(32))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The surface condition (e.g. GOOD, FAIR, POOR, SERIOUS, FAILED, CLOSED, UNKNOWN).
/// Example: /// Example: GOOD
/// Constraints: Minimum length = 0, Maximum length = 16
/// Raw weight bearing capacity value or pavement strength.
/// Example: /// Example: LCN 42
/// Constraints: Minimum length = 0, Maximum length = 16
func (rcv *Surface_Full) RawWbc() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(34))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Raw weight bearing capacity value or pavement strength.
/// Example: /// Example: LCN 42
/// Constraints: Minimum length = 0, Maximum length = 16
/// Pavement classification number (PCN) and tire pressure code.
/// Example: /// Example: 73RBWT
/// Constraints: Minimum length = 0, Maximum length = 16
func (rcv *Surface_Full) Pcn() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(36))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Pavement classification number (PCN) and tire pressure code.
/// Example: /// Example: 73RBWT
/// Constraints: Minimum length = 0, Maximum length = 16
/// Load classification number or pavement rating which ranks aircraft on a scale of 1 to 120.
/// Example: /// Example: 50
/// Constraints: No constraints specified.
func (rcv *Surface_Full) Lcn() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(38))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

/// Load classification number or pavement rating which ranks aircraft on a scale of 1 to 120.
/// Example: /// Example: 50
/// Constraints: No constraints specified.
func (rcv *Surface_Full) MutateLcn(n int32) bool {
	return rcv._tab.MutateInt32Slot(38, n)
}

/// The max weight allowable on this surface type for an S-type (single) landing gear configuration, in kilopounds (kip). Note: The corresponding equivalent field is not converted by the UDL and may or may not be supplied by the provider. The provider/consumer is responsible for all unit conversions.
/// Example: /// Example: 143
/// Constraints: No constraints specified.
func (rcv *Surface_Full) SWtKip() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(40))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

/// The max weight allowable on this surface type for an S-type (single) landing gear configuration, in kilopounds (kip). Note: The corresponding equivalent field is not converted by the UDL and may or may not be supplied by the provider. The provider/consumer is responsible for all unit conversions.
/// Example: /// Example: 143
/// Constraints: No constraints specified.
func (rcv *Surface_Full) MutateSWtKip(n int32) bool {
	return rcv._tab.MutateInt32Slot(40, n)
}

/// The max weight allowable on this surface type for a T-type (twin (dual)) landing gear configuration, in kilopounds (kip).Note: The corresponding equivalent field is not converted by the UDL and may or may not be supplied by the provider. The provider/consumer is responsible for all unit conversions.
/// Example: /// Example: 188
/// Constraints: No constraints specified.
func (rcv *Surface_Full) TWtKip() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(42))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

/// The max weight allowable on this surface type for a T-type (twin (dual)) landing gear configuration, in kilopounds (kip).Note: The corresponding equivalent field is not converted by the UDL and may or may not be supplied by the provider. The provider/consumer is responsible for all unit conversions.
/// Example: /// Example: 188
/// Constraints: No constraints specified.
func (rcv *Surface_Full) MutateTWtKip(n int32) bool {
	return rcv._tab.MutateInt32Slot(42, n)
}

/// The max weight allowable on this surface type for an ST-type (single tandem) landing gear configuration, in kilopounds (kip).Note: The corresponding equivalent field is not converted by the UDL and may or may not be supplied by the provider. The provider/consumer is responsible for all unit conversions.
/// Example: /// Example: 195
/// Constraints: No constraints specified.
func (rcv *Surface_Full) StWtKip() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(44))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

/// The max weight allowable on this surface type for an ST-type (single tandem) landing gear configuration, in kilopounds (kip).Note: The corresponding equivalent field is not converted by the UDL and may or may not be supplied by the provider. The provider/consumer is responsible for all unit conversions.
/// Example: /// Example: 195
/// Constraints: No constraints specified.
func (rcv *Surface_Full) MutateStWtKip(n int32) bool {
	return rcv._tab.MutateInt32Slot(44, n)
}

/// The max weight allowable on this surface type for a GDSS TT-type (twin tandem) landing gear configuration, in kilopounds (kip).Note: The corresponding equivalent field is not converted by the UDL and may or may not be supplied by the provider. The provider/consumer is responsible for all unit conversions.
/// Example: /// Example: 414
/// Constraints: No constraints specified.
func (rcv *Surface_Full) TtWtKip() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(46))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

/// The max weight allowable on this surface type for a GDSS TT-type (twin tandem) landing gear configuration, in kilopounds (kip).Note: The corresponding equivalent field is not converted by the UDL and may or may not be supplied by the provider. The provider/consumer is responsible for all unit conversions.
/// Example: /// Example: 414
/// Constraints: No constraints specified.
func (rcv *Surface_Full) MutateTtWtKip(n int32) bool {
	return rcv._tab.MutateInt32Slot(46, n)
}

/// The max weight allowable on this surface type for an FAA 2D-type (twin tandem) landing gear configuration, in kilopounds (kip).Note: The corresponding equivalent field is not converted by the UDL and may or may not be supplied by the provider. The provider/consumer is responsible for all unit conversions.
/// Example: /// Example: 416
/// Constraints: No constraints specified.
func (rcv *Surface_Full) DdWtKip() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(48))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

/// The max weight allowable on this surface type for an FAA 2D-type (twin tandem) landing gear configuration, in kilopounds (kip).Note: The corresponding equivalent field is not converted by the UDL and may or may not be supplied by the provider. The provider/consumer is responsible for all unit conversions.
/// Example: /// Example: 416
/// Constraints: No constraints specified.
func (rcv *Surface_Full) MutateDdWtKip(n int32) bool {
	return rcv._tab.MutateInt32Slot(48, n)
}

/// The max weight allowable on this surface type for an SBTT-type (single belly twin tandem) landing gear configuration, in kilopounds (kip).Note: The corresponding equivalent field is not converted by the UDL and may or may not be supplied by the provider. The provider/consumer is responsible for all unit conversions.
/// Example: /// Example: 603
/// Constraints: No constraints specified.
func (rcv *Surface_Full) SbttWtKip() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(50))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

/// The max weight allowable on this surface type for an SBTT-type (single belly twin tandem) landing gear configuration, in kilopounds (kip).Note: The corresponding equivalent field is not converted by the UDL and may or may not be supplied by the provider. The provider/consumer is responsible for all unit conversions.
/// Example: /// Example: 603
/// Constraints: No constraints specified.
func (rcv *Surface_Full) MutateSbttWtKip(n int32) bool {
	return rcv._tab.MutateInt32Slot(50, n)
}

/// The max weight allowable on this surface type for a TDT-type (twin delta tandem) landing gear configuration, in kilopounds (kip).Note: The corresponding equivalent field is not converted by the UDL and may or may not be supplied by the provider. The provider/consumer is responsible for all unit conversions.
/// Example: /// Example: 870
/// Constraints: No constraints specified.
func (rcv *Surface_Full) TdtWtkip() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(52))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

/// The max weight allowable on this surface type for a TDT-type (twin delta tandem) landing gear configuration, in kilopounds (kip).Note: The corresponding equivalent field is not converted by the UDL and may or may not be supplied by the provider. The provider/consumer is responsible for all unit conversions.
/// Example: /// Example: 870
/// Constraints: No constraints specified.
func (rcv *Surface_Full) MutateTdtWtkip(n int32) bool {
	return rcv._tab.MutateInt32Slot(52, n)
}

/// The max weight allowable on this surface type for a TRT-type (triple tandem) landing gear configuration, in kilopounds (kip).Note: The corresponding equivalent field is not converted by the UDL and may or may not be supplied by the provider. The provider/consumer is responsible for all unit conversions.
/// Example: /// Example: 622
/// Constraints: No constraints specified.
func (rcv *Surface_Full) TrtWtKip() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(54))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

/// The max weight allowable on this surface type for a TRT-type (triple tandem) landing gear configuration, in kilopounds (kip).Note: The corresponding equivalent field is not converted by the UDL and may or may not be supplied by the provider. The provider/consumer is responsible for all unit conversions.
/// Example: /// Example: 622
/// Constraints: No constraints specified.
func (rcv *Surface_Full) MutateTrtWtKip(n int32) bool {
	return rcv._tab.MutateInt32Slot(54, n)
}

/// The max weight allowable on this surface type for a DDT-type (double dual tandem) landing gear configuration, in kilopounds (kip).Note: The corresponding equivalent field is not converted by the UDL and may or may not be supplied by the provider. The provider/consumer is responsible for all unit conversions.
/// Example: /// Example: 833
/// Constraints: No constraints specified.
func (rcv *Surface_Full) DdtWtKip() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(56))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

/// The max weight allowable on this surface type for a DDT-type (double dual tandem) landing gear configuration, in kilopounds (kip).Note: The corresponding equivalent field is not converted by the UDL and may or may not be supplied by the provider. The provider/consumer is responsible for all unit conversions.
/// Example: /// Example: 833
/// Constraints: No constraints specified.
func (rcv *Surface_Full) MutateDdtWtKip(n int32) bool {
	return rcv._tab.MutateInt32Slot(56, n)
}

/// The max weight allowable on this surface type for an S-type (single) landing gear configuration, in kilonewtons (kN).Note: The corresponding equivalent field is not converted by the UDL and may or may not be supplied by the provider. The provider/consumer is responsible for all unit conversions.
/// Example: /// Example: 636
/// Constraints: No constraints specified.
func (rcv *Surface_Full) SWtKn() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(58))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

/// The max weight allowable on this surface type for an S-type (single) landing gear configuration, in kilonewtons (kN).Note: The corresponding equivalent field is not converted by the UDL and may or may not be supplied by the provider. The provider/consumer is responsible for all unit conversions.
/// Example: /// Example: 636
/// Constraints: No constraints specified.
func (rcv *Surface_Full) MutateSWtKn(n int32) bool {
	return rcv._tab.MutateInt32Slot(58, n)
}

/// The max weight allowable on this surface type for a T-type (twin (dual)) landing gear configuration, in kilonewtons (kN).Note: The corresponding equivalent field is not converted by the UDL and may or may not be supplied by the provider. The provider/consumer is responsible for all unit conversions.
/// Example: /// Example: 836
/// Constraints: No constraints specified.
func (rcv *Surface_Full) TWtKn() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(60))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

/// The max weight allowable on this surface type for a T-type (twin (dual)) landing gear configuration, in kilonewtons (kN).Note: The corresponding equivalent field is not converted by the UDL and may or may not be supplied by the provider. The provider/consumer is responsible for all unit conversions.
/// Example: /// Example: 836
/// Constraints: No constraints specified.
func (rcv *Surface_Full) MutateTWtKn(n int32) bool {
	return rcv._tab.MutateInt32Slot(60, n)
}

/// The max weight allowable on this surface type for an ST-type (single tandem) landing gear configuration, in kilonewtons (kN).Note: The corresponding equivalent field is not converted by the UDL and may or may not be supplied by the provider. The provider/consumer is responsible for all unit conversions.
/// Example: /// Example: 867
/// Constraints: No constraints specified.
func (rcv *Surface_Full) StWtKn() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(62))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

/// The max weight allowable on this surface type for an ST-type (single tandem) landing gear configuration, in kilonewtons (kN).Note: The corresponding equivalent field is not converted by the UDL and may or may not be supplied by the provider. The provider/consumer is responsible for all unit conversions.
/// Example: /// Example: 867
/// Constraints: No constraints specified.
func (rcv *Surface_Full) MutateStWtKn(n int32) bool {
	return rcv._tab.MutateInt32Slot(62, n)
}

/// The max weight allowable on this surface type for a GDSS TT-type (twin tandem) landing gear configuration, in kilonewtons (kN).Note: The corresponding equivalent field is not converted by the UDL and may or may not be supplied by the provider. The provider/consumer is responsible for all unit conversions.
/// Example: /// Example: 1842
/// Constraints: No constraints specified.
func (rcv *Surface_Full) TtWtKn() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(64))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

/// The max weight allowable on this surface type for a GDSS TT-type (twin tandem) landing gear configuration, in kilonewtons (kN).Note: The corresponding equivalent field is not converted by the UDL and may or may not be supplied by the provider. The provider/consumer is responsible for all unit conversions.
/// Example: /// Example: 1842
/// Constraints: No constraints specified.
func (rcv *Surface_Full) MutateTtWtKn(n int32) bool {
	return rcv._tab.MutateInt32Slot(64, n)
}

/// The max weight allowable on this surface type for an FAA 2D-type (twin tandem) landing gear configuration, in kilonewtons (kN).Note: The corresponding equivalent field is not converted by the UDL and may or may not be supplied by the provider. The provider/consumer is responsible for all unit conversions.
/// Example: /// Example: 1850
/// Constraints: No constraints specified.
func (rcv *Surface_Full) DdWtKn() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(66))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

/// The max weight allowable on this surface type for an FAA 2D-type (twin tandem) landing gear configuration, in kilonewtons (kN).Note: The corresponding equivalent field is not converted by the UDL and may or may not be supplied by the provider. The provider/consumer is responsible for all unit conversions.
/// Example: /// Example: 1850
/// Constraints: No constraints specified.
func (rcv *Surface_Full) MutateDdWtKn(n int32) bool {
	return rcv._tab.MutateInt32Slot(66, n)
}

/// The max weight allowable on this surface type for an SBTT-type (single belly twin tandem) landing gear configuration, in kilonewtons (kN).Note: The corresponding equivalent field is not converted by the UDL and may or may not be supplied by the provider. The provider/consumer is responsible for all unit conversions.
/// Example: /// Example: 2682
/// Constraints: No constraints specified.
func (rcv *Surface_Full) SbttWtKn() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(68))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

/// The max weight allowable on this surface type for an SBTT-type (single belly twin tandem) landing gear configuration, in kilonewtons (kN).Note: The corresponding equivalent field is not converted by the UDL and may or may not be supplied by the provider. The provider/consumer is responsible for all unit conversions.
/// Example: /// Example: 2682
/// Constraints: No constraints specified.
func (rcv *Surface_Full) MutateSbttWtKn(n int32) bool {
	return rcv._tab.MutateInt32Slot(68, n)
}

/// The max weight allowable on this surface type for a TDT-type (twin delta tandem) landing gear configuration, in kilonewtons (kN).Note: The corresponding equivalent field is not converted by the UDL and may or may not be supplied by the provider. The provider/consumer is responsible for all unit conversions.
/// Example: /// Example: 3870
/// Constraints: No constraints specified.
func (rcv *Surface_Full) TdtWtKn() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(70))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

/// The max weight allowable on this surface type for a TDT-type (twin delta tandem) landing gear configuration, in kilonewtons (kN).Note: The corresponding equivalent field is not converted by the UDL and may or may not be supplied by the provider. The provider/consumer is responsible for all unit conversions.
/// Example: /// Example: 3870
/// Constraints: No constraints specified.
func (rcv *Surface_Full) MutateTdtWtKn(n int32) bool {
	return rcv._tab.MutateInt32Slot(70, n)
}

/// The max weight allowable on this surface type for a TRT-type (triple tandem) landing gear configuration, in kilonewtons (kN).Note: The corresponding equivalent field is not converted by the UDL and may or may not be supplied by the provider. The provider/consumer is responsible for all unit conversions.
/// Example: /// Example: 2767
/// Constraints: No constraints specified.
func (rcv *Surface_Full) TrtWtKn() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(72))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

/// The max weight allowable on this surface type for a TRT-type (triple tandem) landing gear configuration, in kilonewtons (kN).Note: The corresponding equivalent field is not converted by the UDL and may or may not be supplied by the provider. The provider/consumer is responsible for all unit conversions.
/// Example: /// Example: 2767
/// Constraints: No constraints specified.
func (rcv *Surface_Full) MutateTrtWtKn(n int32) bool {
	return rcv._tab.MutateInt32Slot(72, n)
}

/// The max weight allowable on this surface type for a DDT-type (double dual tandem) landing gear configuration, in kilonewtons (kN).Note: The corresponding equivalent field is not converted by the UDL and may or may not be supplied by the provider. The provider/consumer is responsible for all unit conversions.
/// Example: /// Example: 3705
/// Constraints: No constraints specified.
func (rcv *Surface_Full) DdtWtKn() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(74))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

/// The max weight allowable on this surface type for a DDT-type (double dual tandem) landing gear configuration, in kilonewtons (kN).Note: The corresponding equivalent field is not converted by the UDL and may or may not be supplied by the provider. The provider/consumer is responsible for all unit conversions.
/// Example: /// Example: 3705
/// Constraints: No constraints specified.
func (rcv *Surface_Full) MutateDdtWtKn(n int32) bool {
	return rcv._tab.MutateInt32Slot(74, n)
}

/// Flag indicating the surface has lighting.
/// Example: /// Example: True
/// Constraints: No constraints specified.
func (rcv *Surface_Full) Lighting() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(76))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

/// Flag indicating the surface has lighting.
/// Example: /// Example: True
/// Constraints: No constraints specified.
func (rcv *Surface_Full) MutateLighting(n bool) bool {
	return rcv._tab.MutateBoolSlot(76, n)
}

/// Flag indicating the runway lighting is unknown. Applicable for runway surface types only.
/// Example: /// Example: False
/// Constraints: No constraints specified.
func (rcv *Surface_Full) LightsUnkn() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(78))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

/// Flag indicating the runway lighting is unknown. Applicable for runway surface types only.
/// Example: /// Example: False
/// Constraints: No constraints specified.
func (rcv *Surface_Full) MutateLightsUnkn(n bool) bool {
	return rcv._tab.MutateBoolSlot(78, n)
}

/// Flag indicating the runway has approach lights. Applicable for runway surface types only.
/// Example: /// Example: True
/// Constraints: No constraints specified.
func (rcv *Surface_Full) LightsAprch() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(80))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

/// Flag indicating the runway has approach lights. Applicable for runway surface types only.
/// Example: /// Example: True
/// Constraints: No constraints specified.
func (rcv *Surface_Full) MutateLightsAprch(n bool) bool {
	return rcv._tab.MutateBoolSlot(80, n)
}

/// Flag indicating the runway has Visual Approach Slope Indicator (VASI) lights. Applicable for runway surface types only.
/// Example: /// Example: True
/// Constraints: No constraints specified.
func (rcv *Surface_Full) LightsVasi() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(82))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

/// Flag indicating the runway has Visual Approach Slope Indicator (VASI) lights. Applicable for runway surface types only.
/// Example: /// Example: True
/// Constraints: No constraints specified.
func (rcv *Surface_Full) MutateLightsVasi(n bool) bool {
	return rcv._tab.MutateBoolSlot(82, n)
}

/// Flag indicating the runway has Precision Approach Path Indicator (PAPI) lights. Applicable for runway surface types only.
/// Example: /// Example: True
/// Constraints: No constraints specified.
func (rcv *Surface_Full) LightsPapi() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(84))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

/// Flag indicating the runway has Precision Approach Path Indicator (PAPI) lights. Applicable for runway surface types only.
/// Example: /// Example: True
/// Constraints: No constraints specified.
func (rcv *Surface_Full) MutateLightsPapi(n bool) bool {
	return rcv._tab.MutateBoolSlot(84, n)
}

/// Flag indicating the runway has Optical Landing System (OLS) lights. Applicable for runway surface types only.
/// Example: /// Example: True
/// Constraints: No constraints specified.
func (rcv *Surface_Full) LightsOls() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(86))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

/// Flag indicating the runway has Optical Landing System (OLS) lights. Applicable for runway surface types only.
/// Example: /// Example: True
/// Constraints: No constraints specified.
func (rcv *Surface_Full) MutateLightsOls(n bool) bool {
	return rcv._tab.MutateBoolSlot(86, n)
}

/// Flag indicating the runway has Runway End Identifier Lights (REIL). Applicable for runway surface types only.
/// Example: /// Example: True
/// Constraints: No constraints specified.
func (rcv *Surface_Full) LightsReil() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(88))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

/// Flag indicating the runway has Runway End Identifier Lights (REIL). Applicable for runway surface types only.
/// Example: /// Example: True
/// Constraints: No constraints specified.
func (rcv *Surface_Full) MutateLightsReil(n bool) bool {
	return rcv._tab.MutateBoolSlot(88, n)
}

/// Flag indicating the runway has Touchdown Zone lights. Applicable for runway surface types only.
/// Example: /// Example: True
/// Constraints: No constraints specified.
func (rcv *Surface_Full) LightsTdzl() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(90))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

/// Flag indicating the runway has Touchdown Zone lights. Applicable for runway surface types only.
/// Example: /// Example: True
/// Constraints: No constraints specified.
func (rcv *Surface_Full) MutateLightsTdzl(n bool) bool {
	return rcv._tab.MutateBoolSlot(90, n)
}

/// Flag indicating the runway has centerline lights. Applicable for runway surface types only.
/// Example: /// Example: True
/// Constraints: No constraints specified.
func (rcv *Surface_Full) LightsCl() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(92))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

/// Flag indicating the runway has centerline lights. Applicable for runway surface types only.
/// Example: /// Example: True
/// Constraints: No constraints specified.
func (rcv *Surface_Full) MutateLightsCl(n bool) bool {
	return rcv._tab.MutateBoolSlot(92, n)
}

/// Flag indicating the surface type has an obstacle. Applicable for taxiway and parking surface types.
/// Example: /// Example: True
/// Constraints: No constraints specified.
func (rcv *Surface_Full) Obstacle() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(94))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

/// Flag indicating the surface type has an obstacle. Applicable for taxiway and parking surface types.
/// Example: /// Example: True
/// Constraints: No constraints specified.
func (rcv *Surface_Full) MutateObstacle(n bool) bool {
	return rcv._tab.MutateBoolSlot(94, n)
}

/// Time the row was created in the database, auto-populated by the system.
/// Example: /// Example: 2022-01-01T16:00:00.123Z
/// Constraints: No constraints specified.
func (rcv *Surface_Full) CreatedAt() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(96))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Time the row was created in the database, auto-populated by the system.
/// Example: /// Example: 2022-01-01T16:00:00.123Z
/// Constraints: No constraints specified.
/// Application user who created the row in the database, auto-populated by the system.
/// Example: /// Example: some.user
/// Constraints: Minimum length = 1, Maximum length = 64
func (rcv *Surface_Full) CreatedBy() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(98))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Application user who created the row in the database, auto-populated by the system.
/// Example: /// Example: some.user
/// Constraints: Minimum length = 1, Maximum length = 64
/// Time the row was updated in the database, auto-populated by the system.
/// Example: /// Example: 2022-01-01T16:00:00.123Z
/// Constraints: No constraints specified.
func (rcv *Surface_Full) UpdatedAt() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(100))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Time the row was updated in the database, auto-populated by the system.
/// Example: /// Example: 2022-01-01T16:00:00.123Z
/// Constraints: No constraints specified.
/// Application user who updated the row in the database, auto-populated by the system.
/// Example: /// Example: some.user
/// Constraints: Minimum length = 0, Maximum length = 64
func (rcv *Surface_Full) UpdatedBy() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(102))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Application user who updated the row in the database, auto-populated by the system.
/// Example: /// Example: some.user
/// Constraints: Minimum length = 0, Maximum length = 64
/// Source of the data.
/// Example: /// Example: Bluestaq
/// Constraints: Minimum length = 1, Maximum length = 64
func (rcv *Surface_Full) Source() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(104))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Source of the data.
/// Example: /// Example: Bluestaq
/// Constraints: Minimum length = 1, Maximum length = 64
/// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
/// Example: /// Example: THIRD_PARTY_DATASOURCE
/// Constraints: Minimum length = 0, Maximum length = 64
func (rcv *Surface_Full) Origin() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(106))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
/// Example: /// Example: THIRD_PARTY_DATASOURCE
/// Constraints: Minimum length = 0, Maximum length = 64
/// The originating source network on which this record was created, auto-populated by the system.
/// Example: /// Example: OPS1
/// Constraints: Minimum length = 1, Maximum length = 32
func (rcv *Surface_Full) OrigNetwork() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(108))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The originating source network on which this record was created, auto-populated by the system.
/// Example: /// Example: OPS1
/// Constraints: Minimum length = 1, Maximum length = 32
/// Indicator of whether the data is REAL, TEST, SIMULATED, or EXERCISE data.
/// Example: /// Example: TEST
/// Constraints: Minimum length = 1, Maximum length = 32
func (rcv *Surface_Full) DataMode() Surface_Full_dataMode_Enum {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(110))
	if o != 0 {
		return Surface_Full_dataMode_Enum(rcv._tab.GetInt8(o + rcv._tab.Pos))
	}
	return 0
}

/// Indicator of whether the data is REAL, TEST, SIMULATED, or EXERCISE data.
/// Example: /// Example: TEST
/// Constraints: Minimum length = 1, Maximum length = 32
func (rcv *Surface_Full) MutateDataMode(n Surface_Full_dataMode_Enum) bool {
	return rcv._tab.MutateInt8Slot(110, int8(n))
}

func Surface_FullStart(builder *flatbuffers.Builder) {
	builder.StartObject(54)
}
func Surface_FullAddId(builder *flatbuffers.Builder, id flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(id), 0)
}
func Surface_FullAddClassificationMarking(builder *flatbuffers.Builder, classificationMarking flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(classificationMarking), 0)
}
func Surface_FullAddName(builder *flatbuffers.Builder, name flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(name), 0)
}
func Surface_FullAddType(builder *flatbuffers.Builder, type_ flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(3, flatbuffers.UOffsetT(type_), 0)
}
func Surface_FullAddIdSite(builder *flatbuffers.Builder, idSite flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(4, flatbuffers.UOffsetT(idSite), 0)
}
func Surface_FullAddAltSiteId(builder *flatbuffers.Builder, altSiteId flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(5, flatbuffers.UOffsetT(altSiteId), 0)
}
func Surface_FullAddPrimary(builder *flatbuffers.Builder, primary bool) {
	builder.PrependBoolSlot(6, primary, false)
}
func Surface_FullAddLengthFt(builder *flatbuffers.Builder, lengthFt int32) {
	builder.PrependInt32Slot(7, lengthFt, 0)
}
func Surface_FullAddLdaFt(builder *flatbuffers.Builder, ldaFt int32) {
	builder.PrependInt32Slot(8, ldaFt, 0)
}
func Surface_FullAddWidthFt(builder *flatbuffers.Builder, widthFt int32) {
	builder.PrependInt32Slot(9, widthFt, 0)
}
func Surface_FullAddLengthM(builder *flatbuffers.Builder, lengthM int32) {
	builder.PrependInt32Slot(10, lengthM, 0)
}
func Surface_FullAddLdaM(builder *flatbuffers.Builder, ldaM int32) {
	builder.PrependInt32Slot(11, ldaM, 0)
}
func Surface_FullAddWidthM(builder *flatbuffers.Builder, widthM int32) {
	builder.PrependInt32Slot(12, widthM, 0)
}
func Surface_FullAddMaterial(builder *flatbuffers.Builder, material flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(13, flatbuffers.UOffsetT(material), 0)
}
func Surface_FullAddCondition(builder *flatbuffers.Builder, condition flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(14, flatbuffers.UOffsetT(condition), 0)
}
func Surface_FullAddRawWbc(builder *flatbuffers.Builder, rawWbc flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(15, flatbuffers.UOffsetT(rawWbc), 0)
}
func Surface_FullAddPcn(builder *flatbuffers.Builder, pcn flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(16, flatbuffers.UOffsetT(pcn), 0)
}
func Surface_FullAddLcn(builder *flatbuffers.Builder, lcn int32) {
	builder.PrependInt32Slot(17, lcn, 0)
}
func Surface_FullAddSWtKip(builder *flatbuffers.Builder, sWtKip int32) {
	builder.PrependInt32Slot(18, sWtKip, 0)
}
func Surface_FullAddTWtKip(builder *flatbuffers.Builder, tWtKip int32) {
	builder.PrependInt32Slot(19, tWtKip, 0)
}
func Surface_FullAddStWtKip(builder *flatbuffers.Builder, stWtKip int32) {
	builder.PrependInt32Slot(20, stWtKip, 0)
}
func Surface_FullAddTtWtKip(builder *flatbuffers.Builder, ttWtKip int32) {
	builder.PrependInt32Slot(21, ttWtKip, 0)
}
func Surface_FullAddDdWtKip(builder *flatbuffers.Builder, ddWtKip int32) {
	builder.PrependInt32Slot(22, ddWtKip, 0)
}
func Surface_FullAddSbttWtKip(builder *flatbuffers.Builder, sbttWtKip int32) {
	builder.PrependInt32Slot(23, sbttWtKip, 0)
}
func Surface_FullAddTdtWtkip(builder *flatbuffers.Builder, tdtWtkip int32) {
	builder.PrependInt32Slot(24, tdtWtkip, 0)
}
func Surface_FullAddTrtWtKip(builder *flatbuffers.Builder, trtWtKip int32) {
	builder.PrependInt32Slot(25, trtWtKip, 0)
}
func Surface_FullAddDdtWtKip(builder *flatbuffers.Builder, ddtWtKip int32) {
	builder.PrependInt32Slot(26, ddtWtKip, 0)
}
func Surface_FullAddSWtKn(builder *flatbuffers.Builder, sWtKn int32) {
	builder.PrependInt32Slot(27, sWtKn, 0)
}
func Surface_FullAddTWtKn(builder *flatbuffers.Builder, tWtKn int32) {
	builder.PrependInt32Slot(28, tWtKn, 0)
}
func Surface_FullAddStWtKn(builder *flatbuffers.Builder, stWtKn int32) {
	builder.PrependInt32Slot(29, stWtKn, 0)
}
func Surface_FullAddTtWtKn(builder *flatbuffers.Builder, ttWtKn int32) {
	builder.PrependInt32Slot(30, ttWtKn, 0)
}
func Surface_FullAddDdWtKn(builder *flatbuffers.Builder, ddWtKn int32) {
	builder.PrependInt32Slot(31, ddWtKn, 0)
}
func Surface_FullAddSbttWtKn(builder *flatbuffers.Builder, sbttWtKn int32) {
	builder.PrependInt32Slot(32, sbttWtKn, 0)
}
func Surface_FullAddTdtWtKn(builder *flatbuffers.Builder, tdtWtKn int32) {
	builder.PrependInt32Slot(33, tdtWtKn, 0)
}
func Surface_FullAddTrtWtKn(builder *flatbuffers.Builder, trtWtKn int32) {
	builder.PrependInt32Slot(34, trtWtKn, 0)
}
func Surface_FullAddDdtWtKn(builder *flatbuffers.Builder, ddtWtKn int32) {
	builder.PrependInt32Slot(35, ddtWtKn, 0)
}
func Surface_FullAddLighting(builder *flatbuffers.Builder, lighting bool) {
	builder.PrependBoolSlot(36, lighting, false)
}
func Surface_FullAddLightsUnkn(builder *flatbuffers.Builder, lightsUnkn bool) {
	builder.PrependBoolSlot(37, lightsUnkn, false)
}
func Surface_FullAddLightsAprch(builder *flatbuffers.Builder, lightsAprch bool) {
	builder.PrependBoolSlot(38, lightsAprch, false)
}
func Surface_FullAddLightsVasi(builder *flatbuffers.Builder, lightsVasi bool) {
	builder.PrependBoolSlot(39, lightsVasi, false)
}
func Surface_FullAddLightsPapi(builder *flatbuffers.Builder, lightsPapi bool) {
	builder.PrependBoolSlot(40, lightsPapi, false)
}
func Surface_FullAddLightsOls(builder *flatbuffers.Builder, lightsOls bool) {
	builder.PrependBoolSlot(41, lightsOls, false)
}
func Surface_FullAddLightsReil(builder *flatbuffers.Builder, lightsReil bool) {
	builder.PrependBoolSlot(42, lightsReil, false)
}
func Surface_FullAddLightsTdzl(builder *flatbuffers.Builder, lightsTdzl bool) {
	builder.PrependBoolSlot(43, lightsTdzl, false)
}
func Surface_FullAddLightsCl(builder *flatbuffers.Builder, lightsCl bool) {
	builder.PrependBoolSlot(44, lightsCl, false)
}
func Surface_FullAddObstacle(builder *flatbuffers.Builder, obstacle bool) {
	builder.PrependBoolSlot(45, obstacle, false)
}
func Surface_FullAddCreatedAt(builder *flatbuffers.Builder, createdAt flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(46, flatbuffers.UOffsetT(createdAt), 0)
}
func Surface_FullAddCreatedBy(builder *flatbuffers.Builder, createdBy flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(47, flatbuffers.UOffsetT(createdBy), 0)
}
func Surface_FullAddUpdatedAt(builder *flatbuffers.Builder, updatedAt flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(48, flatbuffers.UOffsetT(updatedAt), 0)
}
func Surface_FullAddUpdatedBy(builder *flatbuffers.Builder, updatedBy flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(49, flatbuffers.UOffsetT(updatedBy), 0)
}
func Surface_FullAddSource(builder *flatbuffers.Builder, source flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(50, flatbuffers.UOffsetT(source), 0)
}
func Surface_FullAddOrigin(builder *flatbuffers.Builder, origin flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(51, flatbuffers.UOffsetT(origin), 0)
}
func Surface_FullAddOrigNetwork(builder *flatbuffers.Builder, origNetwork flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(52, flatbuffers.UOffsetT(origNetwork), 0)
}
func Surface_FullAddDataMode(builder *flatbuffers.Builder, dataMode Surface_Full_dataMode_Enum) {
	builder.PrependInt8Slot(53, int8(dataMode), 0)
}
func Surface_FullEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
