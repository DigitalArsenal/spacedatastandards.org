// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package OpticalSOIObservation_Full

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

/// /// An Optical SOI record contains observation information taken from a sensor about a Space Object.
type OpticalSOIObservation_Full struct {
	_tab flatbuffers.Table
}

const OpticalSOIObservation_FullIdentifier = "OPTI"

func GetRootAsOpticalSOIObservation_Full(buf []byte, offset flatbuffers.UOffsetT) *OpticalSOIObservation_Full {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &OpticalSOIObservation_Full{}
	x.Init(buf, n+offset)
	return x
}

func FinishOpticalSOIObservation_FullBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	identifierBytes := []byte(OpticalSOIObservation_FullIdentifier)
	builder.FinishWithFileIdentifier(offset, identifierBytes)
}

func OpticalSOIObservation_FullBufferHasIdentifier(buf []byte) bool {
	return flatbuffers.BufferHasIdentifier(buf, OpticalSOIObservation_FullIdentifier)
}

func GetSizePrefixedRootAsOpticalSOIObservation_Full(buf []byte, offset flatbuffers.UOffsetT) *OpticalSOIObservation_Full {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &OpticalSOIObservation_Full{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedOpticalSOIObservation_FullBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	identifierBytes := []byte(OpticalSOIObservation_FullIdentifier)
	builder.FinishSizePrefixedWithFileIdentifier(offset, identifierBytes)
}

func SizePrefixedOpticalSOIObservation_FullBufferHasIdentifier(buf []byte) bool {
	return flatbuffers.SizePrefixedBufferHasIdentifier(buf, OpticalSOIObservation_FullIdentifier)
}

func (rcv *OpticalSOIObservation_Full) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *OpticalSOIObservation_Full) Table() flatbuffers.Table {
	return rcv._tab
}

/// Observation detection start time in ISO 8601 UTC with microsecond precision.
/// Example: /// Example: 2018-01-01T16:00:00.888456Z
/// Constraints: No constraints specified.
func (rcv *OpticalSOIObservation_Full) ObStartTime() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Observation detection start time in ISO 8601 UTC with microsecond precision.
/// Example: /// Example: 2018-01-01T16:00:00.888456Z
/// Constraints: No constraints specified.
/// Array of start times for each intensity measurement. The 1st value in the array will match obStartTime.
/// Example: /// Example: ['2018-01-01T16:00:00.888456Z', '2018-01-01T16:00:00.898456Z', '2018-01-01T16:00:00.998456Z']
/// Constraints: No constraints specified.
func (rcv *OpticalSOIObservation_Full) IntensityTimes(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *OpticalSOIObservation_Full) IntensityTimesLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

/// Array of start times for each intensity measurement. The 1st value in the array will match obStartTime.
/// Example: /// Example: ['2018-01-01T16:00:00.888456Z', '2018-01-01T16:00:00.898456Z', '2018-01-01T16:00:00.998456Z']
/// Constraints: No constraints specified.
/// The reference number, x, where x ranges from 1 to n, where n is the number specified in spectralFilters that corresponds to the spectral filter used.
/// Example: /// Example: 0
/// Constraints: No constraints specified.
func (rcv *OpticalSOIObservation_Full) CurrentSpectralFilterNum() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

/// The reference number, x, where x ranges from 1 to n, where n is the number specified in spectralFilters that corresponds to the spectral filter used.
/// Example: /// Example: 0
/// Constraints: No constraints specified.
func (rcv *OpticalSOIObservation_Full) MutateCurrentSpectralFilterNum(n int32) bool {
	return rcv._tab.MutateInt32Slot(8, n)
}

/// Image exposure duration in seconds.
/// Example: /// Example: 0.455
/// Constraints: No constraints specified.
func (rcv *OpticalSOIObservation_Full) ExpDuration() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Image exposure duration in seconds.
/// Example: /// Example: 0.455
/// Constraints: No constraints specified.
func (rcv *OpticalSOIObservation_Full) MutateExpDuration(n float64) bool {
	return rcv._tab.MutateFloat64Slot(10, n)
}

/// Array of intensities of the Space Object for observations, in kilowatts per steradian per micrometer.
/// Example: /// Example: [1.1, 1.1, 1.1]
/// Constraints: No constraints specified.
func (rcv *OpticalSOIObservation_Full) Intensities(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *OpticalSOIObservation_Full) IntensitiesLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

/// Array of intensities of the Space Object for observations, in kilowatts per steradian per micrometer.
/// Example: /// Example: [1.1, 1.1, 1.1]
/// Constraints: No constraints specified.
/// Array of coefficients for how much signal would be lost to atmospheric attenuation for a star at zenith for each element in intensities, in magnitudes per air mass.
/// Example: /// Example: [0.32, 0.32, 0.32]
/// Constraints: No constraints specified.
func (rcv *OpticalSOIObservation_Full) ExtinctionCoeffs(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *OpticalSOIObservation_Full) ExtinctionCoeffsLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

/// Array of coefficients for how much signal would be lost to atmospheric attenuation for a star at zenith for each element in intensities, in magnitudes per air mass.
/// Example: /// Example: [0.32, 0.32, 0.32]
/// Constraints: No constraints specified.
/// Array of extinction coefficient uncertainties for each element in intensities. Each value represents the difference between the measured brightness and predicted brightness of the star with the extinction removed, making it exo-atmospheric (e.g. -5.0 to 30.0).
/// Example: /// Example: [0.06, 0.06, 0.06]
/// Constraints: No constraints specified.
func (rcv *OpticalSOIObservation_Full) ExtinctionCoeffsUnc(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *OpticalSOIObservation_Full) ExtinctionCoeffsUncLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

/// Array of extinction coefficient uncertainties for each element in intensities. Each value represents the difference between the measured brightness and predicted brightness of the star with the extinction removed, making it exo-atmospheric (e.g. -5.0 to 30.0).
/// Example: /// Example: [0.06, 0.06, 0.06]
/// Constraints: No constraints specified.
/// Array of average Sky Background signals, in magnitudes, with a value corresponding to the time of each intensity measurement. Sky Background refers to the incoming light from an apparently empty part of the night sky.
/// Example: /// Example: [100625.375, 100625.375, 100625.375]
/// Constraints: No constraints specified.
func (rcv *OpticalSOIObservation_Full) SkyBgs(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(18))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *OpticalSOIObservation_Full) SkyBgsLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(18))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

/// Array of average Sky Background signals, in magnitudes, with a value corresponding to the time of each intensity measurement. Sky Background refers to the incoming light from an apparently empty part of the night sky.
/// Example: /// Example: [100625.375, 100625.375, 100625.375]
/// Constraints: No constraints specified.
/// Array of local average Sky Background signals, in magnitudes, with a value corresponding to the time of each intensity measurement. Sky Background refers to the incoming light from an apparently empty part of the night sky.
/// Example: /// Example: [100625.375, 100625.375, 100625.375]
/// Constraints: No constraints specified.
func (rcv *OpticalSOIObservation_Full) LocalSkyBgs(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(20))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *OpticalSOIObservation_Full) LocalSkyBgsLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(20))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

/// Array of local average Sky Background signals, in magnitudes, with a value corresponding to the time of each intensity measurement. Sky Background refers to the incoming light from an apparently empty part of the night sky.
/// Example: /// Example: [100625.375, 100625.375, 100625.375]
/// Constraints: No constraints specified.
/// Array of uncertainty of the local average Sky Background signal, in magnitudes, with a value corresponding to the time of each intensity measurement.
/// Example: /// Example: [0.065, 0.065, 0.065]
/// Constraints: No constraints specified.
func (rcv *OpticalSOIObservation_Full) LocalSkyBgsUnc(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(22))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *OpticalSOIObservation_Full) LocalSkyBgsUncLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(22))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

/// Array of uncertainty of the local average Sky Background signal, in magnitudes, with a value corresponding to the time of each intensity measurement.
/// Example: /// Example: [0.065, 0.065, 0.065]
/// Constraints: No constraints specified.
/// Array of the number of detected stars in the FOV with a value for each element in the intensities field.
/// Example: /// Example: [6, 6, 6]
/// Constraints: No constraints specified.
func (rcv *OpticalSOIObservation_Full) NumDetectedStars(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(24))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *OpticalSOIObservation_Full) NumDetectedStarsLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(24))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

/// Array of the number of detected stars in the FOV with a value for each element in the intensities field.
/// Example: /// Example: [6, 6, 6]
/// Constraints: No constraints specified.
/// Array of the number of correlated stars in the FOV with a value for each element in the intensities field.
/// Example: /// Example: [3, 3, 3]
/// Constraints: No constraints specified.
func (rcv *OpticalSOIObservation_Full) NumCorrelatedStars(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(26))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *OpticalSOIObservation_Full) NumCorrelatedStarsLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(26))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

/// Array of the number of correlated stars in the FOV with a value for each element in the intensities field.
/// Example: /// Example: [3, 3, 3]
/// Constraints: No constraints specified.
/// Array of values for the zero-point in magnitudes, calculated at the time of each intensity measurement. It is the difference between the catalog mag and instrumental mag for a set of standard stars (e.g. -5.0 to 30.0).
/// Example: /// Example: [24.711, 24.711, 24.711]
/// Constraints: No constraints specified.
func (rcv *OpticalSOIObservation_Full) ZeroPoints(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(28))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *OpticalSOIObservation_Full) ZeroPointsLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(28))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

/// Array of values for the zero-point in magnitudes, calculated at the time of each intensity measurement. It is the difference between the catalog mag and instrumental mag for a set of standard stars (e.g. -5.0 to 30.0).
/// Example: /// Example: [24.711, 24.711, 24.711]
/// Constraints: No constraints specified.
/// Array of right ascension values, in degrees, of the Target object from the frame of reference of the sensor. A value is provided for each element in the intensities field.
/// Example: /// Example: [107.4, 107.4, 107.4]
/// Constraints: No constraints specified.
func (rcv *OpticalSOIObservation_Full) Ras(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(30))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *OpticalSOIObservation_Full) RasLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(30))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

/// Array of right ascension values, in degrees, of the Target object from the frame of reference of the sensor. A value is provided for each element in the intensities field.
/// Example: /// Example: [107.4, 107.4, 107.4]
/// Constraints: No constraints specified.
/// Array of declination values, in degrees, of the Target object from the frame of reference of the sensor. A value is provided for each element in the intensities field, at the middle of the frame’s exposure time.
/// Example: /// Example: [-0.45, -0.45, -0.45]
/// Constraints: No constraints specified.
func (rcv *OpticalSOIObservation_Full) Declinations(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(32))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *OpticalSOIObservation_Full) DeclinationsLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(32))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

/// Array of declination values, in degrees, of the Target object from the frame of reference of the sensor. A value is provided for each element in the intensities field, at the middle of the frame’s exposure time.
/// Example: /// Example: [-0.45, -0.45, -0.45]
/// Constraints: No constraints specified.
/// Array of right ascension rate values, in degrees per second, measuring the rate the telescope is moving to track the Target object from the frame of reference of the sensor, for each element in the intensities field, at the middle of the frame’s exposure time.
/// Example: /// Example: [0, 0, 0]
/// Constraints: No constraints specified.
func (rcv *OpticalSOIObservation_Full) RaRates(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(34))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *OpticalSOIObservation_Full) RaRatesLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(34))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

/// Array of right ascension rate values, in degrees per second, measuring the rate the telescope is moving to track the Target object from the frame of reference of the sensor, for each element in the intensities field, at the middle of the frame’s exposure time.
/// Example: /// Example: [0, 0, 0]
/// Constraints: No constraints specified.
/// Array of values giving the percent of pixels that make up the object signal that are beyond the saturation point for the sensor, with a value for each element in the intensities field.
/// Example: /// Example: [0.1, 0.2, 1]
/// Constraints: No constraints specified.
func (rcv *OpticalSOIObservation_Full) PercentSats(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(36))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *OpticalSOIObservation_Full) PercentSatsLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(36))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

/// Array of values giving the percent of pixels that make up the object signal that are beyond the saturation point for the sensor, with a value for each element in the intensities field.
/// Example: /// Example: [0.1, 0.2, 1]
/// Constraints: No constraints specified.
func OpticalSOIObservation_FullStart(builder *flatbuffers.Builder) {
	builder.StartObject(17)
}
func OpticalSOIObservation_FullAddObStartTime(builder *flatbuffers.Builder, obStartTime flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(obStartTime), 0)
}
func OpticalSOIObservation_FullAddIntensityTimes(builder *flatbuffers.Builder, intensityTimes flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(intensityTimes), 0)
}
func OpticalSOIObservation_FullStartIntensityTimesVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func OpticalSOIObservation_FullAddCurrentSpectralFilterNum(builder *flatbuffers.Builder, currentSpectralFilterNum int32) {
	builder.PrependInt32Slot(2, currentSpectralFilterNum, 0)
}
func OpticalSOIObservation_FullAddExpDuration(builder *flatbuffers.Builder, expDuration float64) {
	builder.PrependFloat64Slot(3, expDuration, 0.0)
}
func OpticalSOIObservation_FullAddIntensities(builder *flatbuffers.Builder, intensities flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(4, flatbuffers.UOffsetT(intensities), 0)
}
func OpticalSOIObservation_FullStartIntensitiesVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func OpticalSOIObservation_FullAddExtinctionCoeffs(builder *flatbuffers.Builder, extinctionCoeffs flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(5, flatbuffers.UOffsetT(extinctionCoeffs), 0)
}
func OpticalSOIObservation_FullStartExtinctionCoeffsVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func OpticalSOIObservation_FullAddExtinctionCoeffsUnc(builder *flatbuffers.Builder, extinctionCoeffsUnc flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(6, flatbuffers.UOffsetT(extinctionCoeffsUnc), 0)
}
func OpticalSOIObservation_FullStartExtinctionCoeffsUncVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func OpticalSOIObservation_FullAddSkyBgs(builder *flatbuffers.Builder, skyBgs flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(7, flatbuffers.UOffsetT(skyBgs), 0)
}
func OpticalSOIObservation_FullStartSkyBgsVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func OpticalSOIObservation_FullAddLocalSkyBgs(builder *flatbuffers.Builder, localSkyBgs flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(8, flatbuffers.UOffsetT(localSkyBgs), 0)
}
func OpticalSOIObservation_FullStartLocalSkyBgsVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func OpticalSOIObservation_FullAddLocalSkyBgsUnc(builder *flatbuffers.Builder, localSkyBgsUnc flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(9, flatbuffers.UOffsetT(localSkyBgsUnc), 0)
}
func OpticalSOIObservation_FullStartLocalSkyBgsUncVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func OpticalSOIObservation_FullAddNumDetectedStars(builder *flatbuffers.Builder, numDetectedStars flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(10, flatbuffers.UOffsetT(numDetectedStars), 0)
}
func OpticalSOIObservation_FullStartNumDetectedStarsVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func OpticalSOIObservation_FullAddNumCorrelatedStars(builder *flatbuffers.Builder, numCorrelatedStars flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(11, flatbuffers.UOffsetT(numCorrelatedStars), 0)
}
func OpticalSOIObservation_FullStartNumCorrelatedStarsVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func OpticalSOIObservation_FullAddZeroPoints(builder *flatbuffers.Builder, zeroPoints flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(12, flatbuffers.UOffsetT(zeroPoints), 0)
}
func OpticalSOIObservation_FullStartZeroPointsVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func OpticalSOIObservation_FullAddRas(builder *flatbuffers.Builder, ras flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(13, flatbuffers.UOffsetT(ras), 0)
}
func OpticalSOIObservation_FullStartRasVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func OpticalSOIObservation_FullAddDeclinations(builder *flatbuffers.Builder, declinations flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(14, flatbuffers.UOffsetT(declinations), 0)
}
func OpticalSOIObservation_FullStartDeclinationsVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func OpticalSOIObservation_FullAddRaRates(builder *flatbuffers.Builder, raRates flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(15, flatbuffers.UOffsetT(raRates), 0)
}
func OpticalSOIObservation_FullStartRaRatesVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func OpticalSOIObservation_FullAddPercentSats(builder *flatbuffers.Builder, percentSats flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(16, flatbuffers.UOffsetT(percentSats), 0)
}
func OpticalSOIObservation_FullStartPercentSatsVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func OpticalSOIObservation_FullEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
