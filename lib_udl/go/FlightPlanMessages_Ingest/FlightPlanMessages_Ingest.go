// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package FlightPlanMessages_Ingest

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

/// /// Collection of messages associated with this flight plan indicating the severity, the point where the message was generated, the path (Primary, Alternate, etc.), and the text of the message.
type FlightPlanMessages_Ingest struct {
	_tab flatbuffers.Table
}

const FlightPlanMessages_IngestIdentifier = "FLIG"

func GetRootAsFlightPlanMessages_Ingest(buf []byte, offset flatbuffers.UOffsetT) *FlightPlanMessages_Ingest {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &FlightPlanMessages_Ingest{}
	x.Init(buf, n+offset)
	return x
}

func FinishFlightPlanMessages_IngestBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	identifierBytes := []byte(FlightPlanMessages_IngestIdentifier)
	builder.FinishWithFileIdentifier(offset, identifierBytes)
}

func FlightPlanMessages_IngestBufferHasIdentifier(buf []byte) bool {
	return flatbuffers.BufferHasIdentifier(buf, FlightPlanMessages_IngestIdentifier)
}

func GetSizePrefixedRootAsFlightPlanMessages_Ingest(buf []byte, offset flatbuffers.UOffsetT) *FlightPlanMessages_Ingest {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &FlightPlanMessages_Ingest{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedFlightPlanMessages_IngestBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	identifierBytes := []byte(FlightPlanMessages_IngestIdentifier)
	builder.FinishSizePrefixedWithFileIdentifier(offset, identifierBytes)
}

func SizePrefixedFlightPlanMessages_IngestBufferHasIdentifier(buf []byte) bool {
	return flatbuffers.SizePrefixedBufferHasIdentifier(buf, FlightPlanMessages_IngestIdentifier)
}

func (rcv *FlightPlanMessages_Ingest) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *FlightPlanMessages_Ingest) Table() flatbuffers.Table {
	return rcv._tab
}

/// The severity of the message.
/// Example: /// Example: SEVERE
/// Constraints: Minimum length = 0, Maximum length = 16
func (rcv *FlightPlanMessages_Ingest) Severity() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The severity of the message.
/// Example: /// Example: SEVERE
/// Constraints: Minimum length = 0, Maximum length = 16
/// The waypoint number for which the message was generated, or enter "PLAN" for a message impacting the entire route.
/// Example: /// Example: 20
/// Constraints: Minimum length = 0, Maximum length = 8
func (rcv *FlightPlanMessages_Ingest) WpNum() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The waypoint number for which the message was generated, or enter "PLAN" for a message impacting the entire route.
/// Example: /// Example: 20
/// Constraints: Minimum length = 0, Maximum length = 8
/// The flight path that generated the message (PRIMARY, ALTERNATE, etc.).
/// Example: /// Example: PRIMARY
/// Constraints: Minimum length = 0, Maximum length = 16
func (rcv *FlightPlanMessages_Ingest) RoutePath() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The flight path that generated the message (PRIMARY, ALTERNATE, etc.).
/// Example: /// Example: PRIMARY
/// Constraints: Minimum length = 0, Maximum length = 16
/// The text of the message.
/// Example: /// Example: Message text
/// Constraints: Minimum length = 0, Maximum length = 256
func (rcv *FlightPlanMessages_Ingest) MsgText() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The text of the message.
/// Example: /// Example: Message text
/// Constraints: Minimum length = 0, Maximum length = 256
func FlightPlanMessages_IngestStart(builder *flatbuffers.Builder) {
	builder.StartObject(4)
}
func FlightPlanMessages_IngestAddSeverity(builder *flatbuffers.Builder, severity flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(severity), 0)
}
func FlightPlanMessages_IngestAddWpNum(builder *flatbuffers.Builder, wpNum flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(wpNum), 0)
}
func FlightPlanMessages_IngestAddRoutePath(builder *flatbuffers.Builder, routePath flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(routePath), 0)
}
func FlightPlanMessages_IngestAddMsgText(builder *flatbuffers.Builder, msgText flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(3, flatbuffers.UOffsetT(msgText), 0)
}
func FlightPlanMessages_IngestEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
