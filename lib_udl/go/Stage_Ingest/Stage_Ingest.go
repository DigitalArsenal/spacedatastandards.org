// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package Stage_Ingest

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

/// /// Launch stage information for a particular launch vehicle. A launch vehicle can have several stages, each with 1 to many engines.
type Stage_Ingest struct {
	_tab flatbuffers.Table
}

const Stage_IngestIdentifier = "STAG"

func GetRootAsStage_Ingest(buf []byte, offset flatbuffers.UOffsetT) *Stage_Ingest {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &Stage_Ingest{}
	x.Init(buf, n+offset)
	return x
}

func FinishStage_IngestBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	identifierBytes := []byte(Stage_IngestIdentifier)
	builder.FinishWithFileIdentifier(offset, identifierBytes)
}

func Stage_IngestBufferHasIdentifier(buf []byte) bool {
	return flatbuffers.BufferHasIdentifier(buf, Stage_IngestIdentifier)
}

func GetSizePrefixedRootAsStage_Ingest(buf []byte, offset flatbuffers.UOffsetT) *Stage_Ingest {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &Stage_Ingest{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedStage_IngestBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	identifierBytes := []byte(Stage_IngestIdentifier)
	builder.FinishSizePrefixedWithFileIdentifier(offset, identifierBytes)
}

func SizePrefixedStage_IngestBufferHasIdentifier(buf []byte) bool {
	return flatbuffers.SizePrefixedBufferHasIdentifier(buf, Stage_IngestIdentifier)
}

func (rcv *Stage_Ingest) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *Stage_Ingest) Table() flatbuffers.Table {
	return rcv._tab
}

/// Unique identifier of the record, auto-generated by the system.
/// Example: /// Example: STAGE-ID
/// Constraints: Minimum length = 1, Maximum length = 36
func (rcv *Stage_Ingest) Id() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Unique identifier of the record, auto-generated by the system.
/// Example: /// Example: STAGE-ID
/// Constraints: Minimum length = 1, Maximum length = 36
/// Identifier of the launch vehicle record for this stage.
/// Example: /// Example: LAUNCHVEHICLE-ID
/// Constraints: Minimum length = 1, Maximum length = 36
func (rcv *Stage_Ingest) IdLaunchVehicle() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Identifier of the launch vehicle record for this stage.
/// Example: /// Example: LAUNCHVEHICLE-ID
/// Constraints: Minimum length = 1, Maximum length = 36
/// Identifier of the Engine record for this stage.
/// Example: /// Example: ENGINE-ID
/// Constraints: Minimum length = 1, Maximum length = 36
func (rcv *Stage_Ingest) IdEngine() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Identifier of the Engine record for this stage.
/// Example: /// Example: ENGINE-ID
/// Constraints: Minimum length = 1, Maximum length = 36
/// Classification marking of the data in IC/CAPCO Portion-marked format.
/// Example: /// Example: U
/// Constraints: Minimum length = 1, Maximum length = 128
func (rcv *Stage_Ingest) ClassificationMarking() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Classification marking of the data in IC/CAPCO Portion-marked format.
/// Example: /// Example: U
/// Constraints: Minimum length = 1, Maximum length = 128
/// The stage number of this launch stage.
/// Example: /// Example: 2
/// Constraints: No constraints specified.
func (rcv *Stage_Ingest) StageNumber() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

/// The stage number of this launch stage.
/// Example: /// Example: 2
/// Constraints: No constraints specified.
func (rcv *Stage_Ingest) MutateStageNumber(n int32) bool {
	return rcv._tab.MutateInt32Slot(12, n)
}

/// Engine cycle type (e.g. Electrostatic Ion, Pressure Fed, Hall, Catalytic Decomposition, etc.).
/// Example: /// Example: Electrostatic Ion
/// Constraints: Minimum length = 0, Maximum length = 64
func (rcv *Stage_Ingest) Type() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Engine cycle type (e.g. Electrostatic Ion, Pressure Fed, Hall, Catalytic Decomposition, etc.).
/// Example: /// Example: Electrostatic Ion
/// Constraints: Minimum length = 0, Maximum length = 64
/// ID of the organization that manufactures this launch stage.
/// Example: /// Example: 5feed5d7-d131-57e5-a3fd-acc173bca736
/// Constraints: Minimum length = 0, Maximum length = 36
func (rcv *Stage_Ingest) ManufacturerOrgId() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// ID of the organization that manufactures this launch stage.
/// Example: /// Example: 5feed5d7-d131-57e5-a3fd-acc173bca736
/// Constraints: Minimum length = 0, Maximum length = 36
/// The number of the specified engines on this launch stage.
/// Example: /// Example: 1
/// Constraints: No constraints specified.
func (rcv *Stage_Ingest) NumEngines() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(18))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

/// The number of the specified engines on this launch stage.
/// Example: /// Example: 1
/// Constraints: No constraints specified.
func (rcv *Stage_Ingest) MutateNumEngines(n int32) bool {
	return rcv._tab.MutateInt32Slot(18, n)
}

/// Stage length in meters.
/// Example: /// Example: 25.13
/// Constraints: No constraints specified.
func (rcv *Stage_Ingest) Length() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(20))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Stage length in meters.
/// Example: /// Example: 25.13
/// Constraints: No constraints specified.
func (rcv *Stage_Ingest) MutateLength(n float64) bool {
	return rcv._tab.MutateFloat64Slot(20, n)
}

/// Stage maximum external diameter in meters.
/// Example: /// Example: 3.95
/// Constraints: No constraints specified.
func (rcv *Stage_Ingest) Diameter() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(22))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Stage maximum external diameter in meters.
/// Example: /// Example: 3.95
/// Constraints: No constraints specified.
func (rcv *Stage_Ingest) MutateDiameter(n float64) bool {
	return rcv._tab.MutateFloat64Slot(22, n)
}

/// Stage gross mass in kg.
/// Example: /// Example: 9956.1
/// Constraints: No constraints specified.
func (rcv *Stage_Ingest) Mass() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(24))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Stage gross mass in kg.
/// Example: /// Example: 9956.1
/// Constraints: No constraints specified.
func (rcv *Stage_Ingest) MutateMass(n float64) bool {
	return rcv._tab.MutateFloat64Slot(24, n)
}

/// Engine vernier or additional engine type.
/// Example: /// Example: vernier
/// Constraints: Minimum length = 0, Maximum length = 32
func (rcv *Stage_Ingest) Vernier() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(26))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Engine vernier or additional engine type.
/// Example: /// Example: vernier
/// Constraints: Minimum length = 0, Maximum length = 32
/// Number of vernier or additional engines.
/// Example: /// Example: 3
/// Constraints: No constraints specified.
func (rcv *Stage_Ingest) NumVernier() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(28))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

/// Number of vernier or additional engines.
/// Example: /// Example: 3
/// Constraints: No constraints specified.
func (rcv *Stage_Ingest) MutateNumVernier(n int32) bool {
	return rcv._tab.MutateInt32Slot(28, n)
}

/// Thrust of the stage main engine at sea level in kN.
/// Example: /// Example: 733.4
/// Constraints: No constraints specified.
func (rcv *Stage_Ingest) MainEngineThrustSeaLevel() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(30))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Thrust of the stage main engine at sea level in kN.
/// Example: /// Example: 733.4
/// Constraints: No constraints specified.
func (rcv *Stage_Ingest) MutateMainEngineThrustSeaLevel(n float64) bool {
	return rcv._tab.MutateFloat64Slot(30, n)
}

/// Thrust of the stage main engine in a vacuum in kN.
/// Example: /// Example: 733.4
/// Constraints: No constraints specified.
func (rcv *Stage_Ingest) MainEngineThrustVacuum() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(32))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Thrust of the stage main engine in a vacuum in kN.
/// Example: /// Example: 733.4
/// Constraints: No constraints specified.
func (rcv *Stage_Ingest) MutateMainEngineThrustVacuum(n float64) bool {
	return rcv._tab.MutateFloat64Slot(32, n)
}

/// Total thrust of the stage at sea level in kN.
/// Example: /// Example: 733.4
/// Constraints: No constraints specified.
func (rcv *Stage_Ingest) ThrustSeaLevel() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(34))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Total thrust of the stage at sea level in kN.
/// Example: /// Example: 733.4
/// Constraints: No constraints specified.
func (rcv *Stage_Ingest) MutateThrustSeaLevel(n float64) bool {
	return rcv._tab.MutateFloat64Slot(34, n)
}

/// Total thrust of the stage in a vacuum in kN.
/// Example: /// Example: 733.4
/// Constraints: No constraints specified.
func (rcv *Stage_Ingest) ThrustVacuum() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(36))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Total thrust of the stage in a vacuum in kN.
/// Example: /// Example: 733.4
/// Constraints: No constraints specified.
func (rcv *Stage_Ingest) MutateThrustVacuum(n float64) bool {
	return rcv._tab.MutateFloat64Slot(36, n)
}

/// Total burn time of the stage engines in seconds.
/// Example: /// Example: 256.3
/// Constraints: No constraints specified.
func (rcv *Stage_Ingest) BurnTime() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(38))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Total burn time of the stage engines in seconds.
/// Example: /// Example: 256.3
/// Constraints: No constraints specified.
func (rcv *Stage_Ingest) MutateBurnTime(n float64) bool {
	return rcv._tab.MutateFloat64Slot(38, n)
}

/// Number of burns for the stage engines.
/// Example: /// Example: 1
/// Constraints: No constraints specified.
func (rcv *Stage_Ingest) NumBurns() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(40))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

/// Number of burns for the stage engines.
/// Example: /// Example: 1
/// Constraints: No constraints specified.
func (rcv *Stage_Ingest) MutateNumBurns(n int32) bool {
	return rcv._tab.MutateInt32Slot(40, n)
}

/// Total burn time of the vernier or additional stage engines in seconds.
/// Example: /// Example: 1.1
/// Constraints: No constraints specified.
func (rcv *Stage_Ingest) VernierBurnTime() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(42))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Total burn time of the vernier or additional stage engines in seconds.
/// Example: /// Example: 1.1
/// Constraints: No constraints specified.
func (rcv *Stage_Ingest) MutateVernierBurnTime(n float64) bool {
	return rcv._tab.MutateFloat64Slot(42, n)
}

/// Total number of burns of the vernier or additional stage engines.
/// Example: /// Example: 4
/// Constraints: No constraints specified.
func (rcv *Stage_Ingest) VernierNumBurns() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(44))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

/// Total number of burns of the vernier or additional stage engines.
/// Example: /// Example: 4
/// Constraints: No constraints specified.
func (rcv *Stage_Ingest) MutateVernierNumBurns(n int32) bool {
	return rcv._tab.MutateInt32Slot(44, n)
}

/// Total thrust of one of the vernier or additional engines at sea level in kN.
/// Example: /// Example: 4.1
/// Constraints: No constraints specified.
func (rcv *Stage_Ingest) VernierThrustSeaLevel() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(46))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Total thrust of one of the vernier or additional engines at sea level in kN.
/// Example: /// Example: 4.1
/// Constraints: No constraints specified.
func (rcv *Stage_Ingest) MutateVernierThrustSeaLevel(n float64) bool {
	return rcv._tab.MutateFloat64Slot(46, n)
}

/// Total thrust of one of the vernier or additional engines in a vacuum in kN.
/// Example: /// Example: 3.2
/// Constraints: No constraints specified.
func (rcv *Stage_Ingest) VernierThrustVacuum() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(48))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Total thrust of one of the vernier or additional engines in a vacuum in kN.
/// Example: /// Example: 3.2
/// Constraints: No constraints specified.
func (rcv *Stage_Ingest) MutateVernierThrustVacuum(n float64) bool {
	return rcv._tab.MutateFloat64Slot(48, n)
}

/// Number of launch stage elements used in this stage.
/// Example: /// Example: 2
/// Constraints: No constraints specified.
func (rcv *Stage_Ingest) NumStageElements() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(50))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

/// Number of launch stage elements used in this stage.
/// Example: /// Example: 2
/// Constraints: No constraints specified.
func (rcv *Stage_Ingest) MutateNumStageElements(n int32) bool {
	return rcv._tab.MutateInt32Slot(50, n)
}

/// Boolean indicating if this launch stage is reusable.
/// Example: /// Example: True
/// Constraints: No constraints specified.
func (rcv *Stage_Ingest) Reusable() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(52))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

/// Boolean indicating if this launch stage is reusable.
/// Example: /// Example: True
/// Constraints: No constraints specified.
func (rcv *Stage_Ingest) MutateReusable(n bool) bool {
	return rcv._tab.MutateBoolSlot(52, n)
}

/// Boolean indicating if this launch stage can be restarted.
/// Example: /// Example: True
/// Constraints: No constraints specified.
func (rcv *Stage_Ingest) Restartable() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(54))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

/// Boolean indicating if this launch stage can be restarted.
/// Example: /// Example: True
/// Constraints: No constraints specified.
func (rcv *Stage_Ingest) MutateRestartable(n bool) bool {
	return rcv._tab.MutateBoolSlot(54, n)
}

/// Control thruster 1 type.
/// Example: /// Example: controlThruster1
/// Constraints: Minimum length = 0, Maximum length = 64
func (rcv *Stage_Ingest) ControlThruster1() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(56))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Control thruster 1 type.
/// Example: /// Example: controlThruster1
/// Constraints: Minimum length = 0, Maximum length = 64
/// Number of type control thruster 1.
/// Example: /// Example: 1
/// Constraints: No constraints specified.
func (rcv *Stage_Ingest) NumControlThruster1() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(58))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

/// Number of type control thruster 1.
/// Example: /// Example: 1
/// Constraints: No constraints specified.
func (rcv *Stage_Ingest) MutateNumControlThruster1(n int32) bool {
	return rcv._tab.MutateInt32Slot(58, n)
}

/// Control thruster 2 type.
/// Example: /// Example: controlThruster2
/// Constraints: Minimum length = 0, Maximum length = 64
func (rcv *Stage_Ingest) ControlThruster2() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(60))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Control thruster 2 type.
/// Example: /// Example: controlThruster2
/// Constraints: Minimum length = 0, Maximum length = 64
/// Number of type control thruster 2.
/// Example: /// Example: 1
/// Constraints: No constraints specified.
func (rcv *Stage_Ingest) NumControlThruster2() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(62))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

/// Number of type control thruster 2.
/// Example: /// Example: 1
/// Constraints: No constraints specified.
func (rcv *Stage_Ingest) MutateNumControlThruster2(n int32) bool {
	return rcv._tab.MutateInt32Slot(62, n)
}

/// Array of URLs of photos of the stage.
/// Example: /// Example: ['photoURL']
/// Constraints: No constraints specified.
func (rcv *Stage_Ingest) PhotoUrls(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(64))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *Stage_Ingest) PhotoUrlsLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(64))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

/// Array of URLs of photos of the stage.
/// Example: /// Example: ['photoURL']
/// Constraints: No constraints specified.
/// Description/notes of the stage.
/// Example: /// Example: Sample Notes
/// Constraints: Minimum length = 0, Maximum length = 256
func (rcv *Stage_Ingest) Notes() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(66))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Description/notes of the stage.
/// Example: /// Example: Sample Notes
/// Constraints: Minimum length = 0, Maximum length = 256
/// Description/notes of the stage avionics.
/// Example: /// Example: Sample Notes
/// Constraints: Minimum length = 0, Maximum length = 256
func (rcv *Stage_Ingest) AvionicsNotes() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(68))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Description/notes of the stage avionics.
/// Example: /// Example: Sample Notes
/// Constraints: Minimum length = 0, Maximum length = 256
/// Optional array of provider/source specific tags for this data, where each element is no longer than 32 characters, used for implementing data owner conditional access controls to restrict access to the data. Should be left null by data providers unless conditional access controls are coordinated with the UDL team.
/// Example: /// Example: ['TAG1', 'TAG2']
/// Constraints: No constraints specified.
func (rcv *Stage_Ingest) Tags(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(70))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *Stage_Ingest) TagsLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(70))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

/// Optional array of provider/source specific tags for this data, where each element is no longer than 32 characters, used for implementing data owner conditional access controls to restrict access to the data. Should be left null by data providers unless conditional access controls are coordinated with the UDL team.
/// Example: /// Example: ['TAG1', 'TAG2']
/// Constraints: No constraints specified.
/// Time the row was created in the database, auto-populated by the system.
/// Example: /// Example: 2018-01-01T16:00:00.123Z
/// Constraints: No constraints specified.
func (rcv *Stage_Ingest) CreatedAt() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(72))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Time the row was created in the database, auto-populated by the system.
/// Example: /// Example: 2018-01-01T16:00:00.123Z
/// Constraints: No constraints specified.
/// Application user who created the row in the database, auto-populated by the system.
/// Example: /// Example: some.user
/// Constraints: Minimum length = 1, Maximum length = 64
func (rcv *Stage_Ingest) CreatedBy() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(74))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Application user who created the row in the database, auto-populated by the system.
/// Example: /// Example: some.user
/// Constraints: Minimum length = 1, Maximum length = 64
/// Source of the data.
/// Example: /// Example: Bluestaq
/// Constraints: Minimum length = 1, Maximum length = 64
func (rcv *Stage_Ingest) Source() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(76))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Source of the data.
/// Example: /// Example: Bluestaq
/// Constraints: Minimum length = 1, Maximum length = 64
/// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
/// Example: /// Example: THIRD_PARTY_DATASOURCE
/// Constraints: Minimum length = 0, Maximum length = 64
func (rcv *Stage_Ingest) Origin() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(78))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
/// Example: /// Example: THIRD_PARTY_DATASOURCE
/// Constraints: Minimum length = 0, Maximum length = 64
/// The originating source network on which this record was created, auto-populated by the system.
/// Example: /// Example: ORIG
/// Constraints: Minimum length = 1, Maximum length = 32
func (rcv *Stage_Ingest) OrigNetwork() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(80))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The originating source network on which this record was created, auto-populated by the system.
/// Example: /// Example: ORIG
/// Constraints: Minimum length = 1, Maximum length = 32
/// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
/// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
/// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
/// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
/// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
/// Example: /// Example: TEST
/// Constraints: Minimum length = 1, Maximum length = 32
func (rcv *Stage_Ingest) DataMode() Stage_Ingest_dataMode_Enum {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(82))
	if o != 0 {
		return Stage_Ingest_dataMode_Enum(rcv._tab.GetInt8(o + rcv._tab.Pos))
	}
	return 0
}

/// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
/// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
/// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
/// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
/// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
/// Example: /// Example: TEST
/// Constraints: Minimum length = 1, Maximum length = 32
func (rcv *Stage_Ingest) MutateDataMode(n Stage_Ingest_dataMode_Enum) bool {
	return rcv._tab.MutateInt8Slot(82, int8(n))
}

func Stage_IngestStart(builder *flatbuffers.Builder) {
	builder.StartObject(40)
}
func Stage_IngestAddId(builder *flatbuffers.Builder, id flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(id), 0)
}
func Stage_IngestAddIdLaunchVehicle(builder *flatbuffers.Builder, idLaunchVehicle flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(idLaunchVehicle), 0)
}
func Stage_IngestAddIdEngine(builder *flatbuffers.Builder, idEngine flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(idEngine), 0)
}
func Stage_IngestAddClassificationMarking(builder *flatbuffers.Builder, classificationMarking flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(3, flatbuffers.UOffsetT(classificationMarking), 0)
}
func Stage_IngestAddStageNumber(builder *flatbuffers.Builder, stageNumber int32) {
	builder.PrependInt32Slot(4, stageNumber, 0)
}
func Stage_IngestAddType(builder *flatbuffers.Builder, type_ flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(5, flatbuffers.UOffsetT(type_), 0)
}
func Stage_IngestAddManufacturerOrgId(builder *flatbuffers.Builder, manufacturerOrgId flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(6, flatbuffers.UOffsetT(manufacturerOrgId), 0)
}
func Stage_IngestAddNumEngines(builder *flatbuffers.Builder, numEngines int32) {
	builder.PrependInt32Slot(7, numEngines, 0)
}
func Stage_IngestAddLength(builder *flatbuffers.Builder, length float64) {
	builder.PrependFloat64Slot(8, length, 0.0)
}
func Stage_IngestAddDiameter(builder *flatbuffers.Builder, diameter float64) {
	builder.PrependFloat64Slot(9, diameter, 0.0)
}
func Stage_IngestAddMass(builder *flatbuffers.Builder, mass float64) {
	builder.PrependFloat64Slot(10, mass, 0.0)
}
func Stage_IngestAddVernier(builder *flatbuffers.Builder, vernier flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(11, flatbuffers.UOffsetT(vernier), 0)
}
func Stage_IngestAddNumVernier(builder *flatbuffers.Builder, numVernier int32) {
	builder.PrependInt32Slot(12, numVernier, 0)
}
func Stage_IngestAddMainEngineThrustSeaLevel(builder *flatbuffers.Builder, mainEngineThrustSeaLevel float64) {
	builder.PrependFloat64Slot(13, mainEngineThrustSeaLevel, 0.0)
}
func Stage_IngestAddMainEngineThrustVacuum(builder *flatbuffers.Builder, mainEngineThrustVacuum float64) {
	builder.PrependFloat64Slot(14, mainEngineThrustVacuum, 0.0)
}
func Stage_IngestAddThrustSeaLevel(builder *flatbuffers.Builder, thrustSeaLevel float64) {
	builder.PrependFloat64Slot(15, thrustSeaLevel, 0.0)
}
func Stage_IngestAddThrustVacuum(builder *flatbuffers.Builder, thrustVacuum float64) {
	builder.PrependFloat64Slot(16, thrustVacuum, 0.0)
}
func Stage_IngestAddBurnTime(builder *flatbuffers.Builder, burnTime float64) {
	builder.PrependFloat64Slot(17, burnTime, 0.0)
}
func Stage_IngestAddNumBurns(builder *flatbuffers.Builder, numBurns int32) {
	builder.PrependInt32Slot(18, numBurns, 0)
}
func Stage_IngestAddVernierBurnTime(builder *flatbuffers.Builder, vernierBurnTime float64) {
	builder.PrependFloat64Slot(19, vernierBurnTime, 0.0)
}
func Stage_IngestAddVernierNumBurns(builder *flatbuffers.Builder, vernierNumBurns int32) {
	builder.PrependInt32Slot(20, vernierNumBurns, 0)
}
func Stage_IngestAddVernierThrustSeaLevel(builder *flatbuffers.Builder, vernierThrustSeaLevel float64) {
	builder.PrependFloat64Slot(21, vernierThrustSeaLevel, 0.0)
}
func Stage_IngestAddVernierThrustVacuum(builder *flatbuffers.Builder, vernierThrustVacuum float64) {
	builder.PrependFloat64Slot(22, vernierThrustVacuum, 0.0)
}
func Stage_IngestAddNumStageElements(builder *flatbuffers.Builder, numStageElements int32) {
	builder.PrependInt32Slot(23, numStageElements, 0)
}
func Stage_IngestAddReusable(builder *flatbuffers.Builder, reusable bool) {
	builder.PrependBoolSlot(24, reusable, false)
}
func Stage_IngestAddRestartable(builder *flatbuffers.Builder, restartable bool) {
	builder.PrependBoolSlot(25, restartable, false)
}
func Stage_IngestAddControlThruster1(builder *flatbuffers.Builder, controlThruster1 flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(26, flatbuffers.UOffsetT(controlThruster1), 0)
}
func Stage_IngestAddNumControlThruster1(builder *flatbuffers.Builder, numControlThruster1 int32) {
	builder.PrependInt32Slot(27, numControlThruster1, 0)
}
func Stage_IngestAddControlThruster2(builder *flatbuffers.Builder, controlThruster2 flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(28, flatbuffers.UOffsetT(controlThruster2), 0)
}
func Stage_IngestAddNumControlThruster2(builder *flatbuffers.Builder, numControlThruster2 int32) {
	builder.PrependInt32Slot(29, numControlThruster2, 0)
}
func Stage_IngestAddPhotoUrls(builder *flatbuffers.Builder, photoUrls flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(30, flatbuffers.UOffsetT(photoUrls), 0)
}
func Stage_IngestStartPhotoUrlsVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func Stage_IngestAddNotes(builder *flatbuffers.Builder, notes flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(31, flatbuffers.UOffsetT(notes), 0)
}
func Stage_IngestAddAvionicsNotes(builder *flatbuffers.Builder, avionicsNotes flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(32, flatbuffers.UOffsetT(avionicsNotes), 0)
}
func Stage_IngestAddTags(builder *flatbuffers.Builder, tags flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(33, flatbuffers.UOffsetT(tags), 0)
}
func Stage_IngestStartTagsVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func Stage_IngestAddCreatedAt(builder *flatbuffers.Builder, createdAt flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(34, flatbuffers.UOffsetT(createdAt), 0)
}
func Stage_IngestAddCreatedBy(builder *flatbuffers.Builder, createdBy flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(35, flatbuffers.UOffsetT(createdBy), 0)
}
func Stage_IngestAddSource(builder *flatbuffers.Builder, source flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(36, flatbuffers.UOffsetT(source), 0)
}
func Stage_IngestAddOrigin(builder *flatbuffers.Builder, origin flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(37, flatbuffers.UOffsetT(origin), 0)
}
func Stage_IngestAddOrigNetwork(builder *flatbuffers.Builder, origNetwork flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(38, flatbuffers.UOffsetT(origNetwork), 0)
}
func Stage_IngestAddDataMode(builder *flatbuffers.Builder, dataMode Stage_Ingest_dataMode_Enum) {
	builder.PrependInt8Slot(39, int8(dataMode), 0)
}
func Stage_IngestEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
