// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package AltitudeBlocks_Full

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

/// /// Minimum and maximum altitude bounds for the track.
type AltitudeBlocks_Full struct {
	_tab flatbuffers.Table
}

const AltitudeBlocks_FullIdentifier = "ALTI"

func GetRootAsAltitudeBlocks_Full(buf []byte, offset flatbuffers.UOffsetT) *AltitudeBlocks_Full {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &AltitudeBlocks_Full{}
	x.Init(buf, n+offset)
	return x
}

func FinishAltitudeBlocks_FullBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	identifierBytes := []byte(AltitudeBlocks_FullIdentifier)
	builder.FinishWithFileIdentifier(offset, identifierBytes)
}

func AltitudeBlocks_FullBufferHasIdentifier(buf []byte) bool {
	return flatbuffers.BufferHasIdentifier(buf, AltitudeBlocks_FullIdentifier)
}

func GetSizePrefixedRootAsAltitudeBlocks_Full(buf []byte, offset flatbuffers.UOffsetT) *AltitudeBlocks_Full {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &AltitudeBlocks_Full{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedAltitudeBlocks_FullBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	identifierBytes := []byte(AltitudeBlocks_FullIdentifier)
	builder.FinishSizePrefixedWithFileIdentifier(offset, identifierBytes)
}

func SizePrefixedAltitudeBlocks_FullBufferHasIdentifier(buf []byte) bool {
	return flatbuffers.SizePrefixedBufferHasIdentifier(buf, AltitudeBlocks_FullIdentifier)
}

func (rcv *AltitudeBlocks_Full) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *AltitudeBlocks_Full) Table() flatbuffers.Table {
	return rcv._tab
}

/// Sequencing field for the altitude block.
/// Example: /// Example: A1
/// Constraints: Minimum length = 0, Maximum length = 24
func (rcv *AltitudeBlocks_Full) AltitudeSequenceId() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Sequencing field for the altitude block.
/// Example: /// Example: A1
/// Constraints: Minimum length = 0, Maximum length = 24
/// Lowest altitude of the track route altitude block above mean sea level in feet.
/// Example: /// Example: 27000.1
/// Constraints: No constraints specified.
func (rcv *AltitudeBlocks_Full) LowerAltitude() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Lowest altitude of the track route altitude block above mean sea level in feet.
/// Example: /// Example: 27000.1
/// Constraints: No constraints specified.
func (rcv *AltitudeBlocks_Full) MutateLowerAltitude(n float64) bool {
	return rcv._tab.MutateFloat64Slot(6, n)
}

/// Highest altitude of the track route altitude block above mean sea level in feet.
/// Example: /// Example: 27200.5
/// Constraints: No constraints specified.
func (rcv *AltitudeBlocks_Full) UpperAltitude() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Highest altitude of the track route altitude block above mean sea level in feet.
/// Example: /// Example: 27200.5
/// Constraints: No constraints specified.
func (rcv *AltitudeBlocks_Full) MutateUpperAltitude(n float64) bool {
	return rcv._tab.MutateFloat64Slot(8, n)
}

func AltitudeBlocks_FullStart(builder *flatbuffers.Builder) {
	builder.StartObject(3)
}
func AltitudeBlocks_FullAddAltitudeSequenceId(builder *flatbuffers.Builder, altitudeSequenceId flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(altitudeSequenceId), 0)
}
func AltitudeBlocks_FullAddLowerAltitude(builder *flatbuffers.Builder, lowerAltitude float64) {
	builder.PrependFloat64Slot(1, lowerAltitude, 0.0)
}
func AltitudeBlocks_FullAddUpperAltitude(builder *flatbuffers.Builder, upperAltitude float64) {
	builder.PrependFloat64Slot(2, upperAltitude, 0.0)
}
func AltitudeBlocks_FullEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
