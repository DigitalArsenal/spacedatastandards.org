// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package AircraftSortie_Abridged

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

/// /// Information related to the planning, load, status, and deployment or dispatch of one aircraft to carry out a mission.
type AircraftSortie_Abridged struct {
	_tab flatbuffers.Table
}

const AircraftSortie_AbridgedIdentifier = "AIRC"

func GetRootAsAircraftSortie_Abridged(buf []byte, offset flatbuffers.UOffsetT) *AircraftSortie_Abridged {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &AircraftSortie_Abridged{}
	x.Init(buf, n+offset)
	return x
}

func FinishAircraftSortie_AbridgedBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	identifierBytes := []byte(AircraftSortie_AbridgedIdentifier)
	builder.FinishWithFileIdentifier(offset, identifierBytes)
}

func AircraftSortie_AbridgedBufferHasIdentifier(buf []byte) bool {
	return flatbuffers.BufferHasIdentifier(buf, AircraftSortie_AbridgedIdentifier)
}

func GetSizePrefixedRootAsAircraftSortie_Abridged(buf []byte, offset flatbuffers.UOffsetT) *AircraftSortie_Abridged {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &AircraftSortie_Abridged{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedAircraftSortie_AbridgedBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	identifierBytes := []byte(AircraftSortie_AbridgedIdentifier)
	builder.FinishSizePrefixedWithFileIdentifier(offset, identifierBytes)
}

func SizePrefixedAircraftSortie_AbridgedBufferHasIdentifier(buf []byte) bool {
	return flatbuffers.SizePrefixedBufferHasIdentifier(buf, AircraftSortie_AbridgedIdentifier)
}

func (rcv *AircraftSortie_Abridged) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *AircraftSortie_Abridged) Table() flatbuffers.Table {
	return rcv._tab
}

/// Unique identifier of the record, auto-generated by the system.
/// Example: /// Example: AIRCRAFTSORTIE-ID
/// Constraints: Minimum length = 1, Maximum length = 36
func (rcv *AircraftSortie_Abridged) Id() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Unique identifier of the record, auto-generated by the system.
/// Example: /// Example: AIRCRAFTSORTIE-ID
/// Constraints: Minimum length = 1, Maximum length = 36
/// Classification marking of the data in IC/CAPCO Portion-marked format.
/// Example: /// Example: U
/// Constraints: Minimum length = 1, Maximum length = 128
func (rcv *AircraftSortie_Abridged) ClassificationMarking() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Classification marking of the data in IC/CAPCO Portion-marked format.
/// Example: /// Example: U
/// Constraints: Minimum length = 1, Maximum length = 128
/// The sortie identifier provided by the originating source.
/// Example: /// Example: A0640
/// Constraints: Minimum length = 0, Maximum length = 36
func (rcv *AircraftSortie_Abridged) OrigSortieId() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The sortie identifier provided by the originating source.
/// Example: /// Example: A0640
/// Constraints: Minimum length = 0, Maximum length = 36
/// Unique identifier of the aircraft.
/// Example: /// Example: REF-AIRCRAFT-ID
/// Constraints: Minimum length = 0, Maximum length = 36
func (rcv *AircraftSortie_Abridged) IdAircraft() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Unique identifier of the aircraft.
/// Example: /// Example: REF-AIRCRAFT-ID
/// Constraints: Minimum length = 0, Maximum length = 36
/// Alternate Aircraft Identifier provided by source.
/// Example: /// Example: ALT-AIRCRAFT-ID
/// Constraints: Minimum length = 0, Maximum length = 36
func (rcv *AircraftSortie_Abridged) AircraftAltId() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Alternate Aircraft Identifier provided by source.
/// Example: /// Example: ALT-AIRCRAFT-ID
/// Constraints: Minimum length = 0, Maximum length = 36
/// The tail number of the aircraft assigned to this sortie.
/// Example: /// Example: Tail_1
/// Constraints: Minimum length = 0, Maximum length = 16
func (rcv *AircraftSortie_Abridged) TailNumber() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The tail number of the aircraft assigned to this sortie.
/// Example: /// Example: Tail_1
/// Constraints: Minimum length = 0, Maximum length = 16
/// The aircraft Model Design Series designation assigned to this sortie.
/// Example: /// Example: C017A
/// Constraints: Minimum length = 0, Maximum length = 36
func (rcv *AircraftSortie_Abridged) AircraftMds() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The aircraft Model Design Series designation assigned to this sortie.
/// Example: /// Example: C017A
/// Constraints: Minimum length = 0, Maximum length = 36
/// The Automatic Dependent Surveillance-Broadcast (ADS-B) device identifier.
/// Example: /// Example: AE123C
/// Constraints: Minimum length = 0, Maximum length = 16
func (rcv *AircraftSortie_Abridged) AircraftAdsb() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(18))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The Automatic Dependent Surveillance-Broadcast (ADS-B) device identifier.
/// Example: /// Example: AE123C
/// Constraints: Minimum length = 0, Maximum length = 16
/// The scheduled UTC date for this sortie, in ISO 8601 date-only format (ex. YYYY-MM-DD).
/// Example: /// Example: 2021-01-01
/// Constraints: No constraints specified.
func (rcv *AircraftSortie_Abridged) SortieDate() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(20))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The scheduled UTC date for this sortie, in ISO 8601 date-only format (ex. YYYY-MM-DD).
/// Example: /// Example: 2021-01-01
/// Constraints: No constraints specified.
/// The external system line number of this sortie.
/// Example: /// Example: 99
/// Constraints: No constraints specified.
func (rcv *AircraftSortie_Abridged) LineNumber() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(22))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

/// The external system line number of this sortie.
/// Example: /// Example: 99
/// Constraints: No constraints specified.
func (rcv *AircraftSortie_Abridged) MutateLineNumber(n int32) bool {
	return rcv._tab.MutateInt32Slot(22, n)
}

/// The unique identifier of the mission to which this sortie is assigned.
/// Example: /// Example: fa18d96e-91ea-60da-a7a8-1af6500066c8
/// Constraints: Minimum length = 0, Maximum length = 36
func (rcv *AircraftSortie_Abridged) IdMission() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(24))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The unique identifier of the mission to which this sortie is assigned.
/// Example: /// Example: fa18d96e-91ea-60da-a7a8-1af6500066c8
/// Constraints: Minimum length = 0, Maximum length = 36
/// The mission ID according to the source system.
/// Example: /// Example: ABLE
/// Constraints: Minimum length = 0, Maximum length = 24
func (rcv *AircraftSortie_Abridged) MissionId() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(26))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The mission ID according to the source system.
/// Example: /// Example: ABLE
/// Constraints: Minimum length = 0, Maximum length = 24
/// The Air Mobility Command (AMC) mission number of the sortie.
/// Example: /// Example: AJM512571333
/// Constraints: Minimum length = 0, Maximum length = 36
func (rcv *AircraftSortie_Abridged) AmcMsnNum() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(28))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The Air Mobility Command (AMC) mission number of the sortie.
/// Example: /// Example: AJM512571333
/// Constraints: Minimum length = 0, Maximum length = 36
/// The type of mission (e.g. SAAM, CHNL, etc.).
/// Example: /// Example: SAAM
/// Constraints: Minimum length = 0, Maximum length = 36
func (rcv *AircraftSortie_Abridged) AmcMsnType() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(30))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The type of mission (e.g. SAAM, CHNL, etc.).
/// Example: /// Example: SAAM
/// Constraints: Minimum length = 0, Maximum length = 36
/// The call sign assigned to the aircraft on this sortie.
/// Example: /// Example: BAKER
/// Constraints: Minimum length = 0, Maximum length = 24
func (rcv *AircraftSortie_Abridged) CallSign() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(32))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The call sign assigned to the aircraft on this sortie.
/// Example: /// Example: BAKER
/// Constraints: Minimum length = 0, Maximum length = 24
/// Joint Chiefs of Staff priority of this sortie.
/// Example: /// Example: 1A3
/// Constraints: Minimum length = 0, Maximum length = 3
func (rcv *AircraftSortie_Abridged) JcsPriority() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(34))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Joint Chiefs of Staff priority of this sortie.
/// Example: /// Example: 1A3
/// Constraints: Minimum length = 0, Maximum length = 3
/// The planned primary Standard Conventional Load of the aircraft for this sortie.
/// Example: /// Example: ABC
/// Constraints: Minimum length = 0, Maximum length = 24
func (rcv *AircraftSortie_Abridged) PrimaryScl() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(36))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The planned primary Standard Conventional Load of the aircraft for this sortie.
/// Example: /// Example: ABC
/// Constraints: Minimum length = 0, Maximum length = 24
/// The planned secondary Standard Conventional Load of the aircraft for this sortie.
/// Example: /// Example: ABC
/// Constraints: Minimum length = 0, Maximum length = 24
func (rcv *AircraftSortie_Abridged) SecondaryScl() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(38))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The planned secondary Standard Conventional Load of the aircraft for this sortie.
/// Example: /// Example: ABC
/// Constraints: Minimum length = 0, Maximum length = 24
/// Aircraft configuration required for the mission.
/// Example: /// Example: C-1
/// Constraints: Minimum length = 0, Maximum length = 8
func (rcv *AircraftSortie_Abridged) ReqConfig() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(40))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Aircraft configuration required for the mission.
/// Example: /// Example: C-1
/// Constraints: Minimum length = 0, Maximum length = 8
/// Description of the cargo configuration (e.g. C-1, C-2, C-3, DV-1, DV-2, AE-1, etc.) currently on board the aircraft. Configuration meanings are determined by the data source.
/// Example: /// Example: C-1
/// Constraints: Minimum length = 0, Maximum length = 8
func (rcv *AircraftSortie_Abridged) CargoConfig() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(42))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Description of the cargo configuration (e.g. C-1, C-2, C-3, DV-1, DV-2, AE-1, etc.) currently on board the aircraft. Configuration meanings are determined by the data source.
/// Example: /// Example: C-1
/// Constraints: Minimum length = 0, Maximum length = 8
/// Mass of fuel required for this leg of the sortie, in kilograms.
/// Example: /// Example: 20000.1
/// Constraints: No constraints specified.
func (rcv *AircraftSortie_Abridged) FuelReq() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(44))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Mass of fuel required for this leg of the sortie, in kilograms.
/// Example: /// Example: 20000.1
/// Constraints: No constraints specified.
func (rcv *AircraftSortie_Abridged) MutateFuelReq(n float64) bool {
	return rcv._tab.MutateFloat64Slot(44, n)
}

/// Liquid oxygen required on the aircraft for the crew compartment, in liters.
/// Example: /// Example: 12.3
/// Constraints: No constraints specified.
func (rcv *AircraftSortie_Abridged) OxyReqCrew() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(46))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Liquid oxygen required on the aircraft for the crew compartment, in liters.
/// Example: /// Example: 12.3
/// Constraints: No constraints specified.
func (rcv *AircraftSortie_Abridged) MutateOxyReqCrew(n float64) bool {
	return rcv._tab.MutateFloat64Slot(46, n)
}

/// Liquid oxygen onboard the aircraft for the crew compartment, in liters.
/// Example: /// Example: 12.3
/// Constraints: No constraints specified.
func (rcv *AircraftSortie_Abridged) OxyOnCrew() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(48))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Liquid oxygen onboard the aircraft for the crew compartment, in liters.
/// Example: /// Example: 12.3
/// Constraints: No constraints specified.
func (rcv *AircraftSortie_Abridged) MutateOxyOnCrew(n float64) bool {
	return rcv._tab.MutateFloat64Slot(48, n)
}

/// Liquid oxygen required on the aircraft for the troop compartment, in liters.
/// Example: /// Example: 12.3
/// Constraints: No constraints specified.
func (rcv *AircraftSortie_Abridged) OxyReqPax() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(50))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Liquid oxygen required on the aircraft for the troop compartment, in liters.
/// Example: /// Example: 12.3
/// Constraints: No constraints specified.
func (rcv *AircraftSortie_Abridged) MutateOxyReqPax(n float64) bool {
	return rcv._tab.MutateFloat64Slot(50, n)
}

/// Liquid oxygen onboard the aircraft for the troop compartment, in liters.
/// Example: /// Example: 12.3
/// Constraints: No constraints specified.
func (rcv *AircraftSortie_Abridged) OxyOnPax() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(52))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Liquid oxygen onboard the aircraft for the troop compartment, in liters.
/// Example: /// Example: 12.3
/// Constraints: No constraints specified.
func (rcv *AircraftSortie_Abridged) MutateOxyOnPax(n float64) bool {
	return rcv._tab.MutateFloat64Slot(52, n)
}

/// The Alert Status code.
/// Example: /// Example: C1
/// Constraints: Minimum length = 0, Maximum length = 24
func (rcv *AircraftSortie_Abridged) AlertStatusCode() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(54))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The Alert Status code.
/// Example: /// Example: C1
/// Constraints: Minimum length = 0, Maximum length = 24
/// The amount of time allowed between launch order and takeoff, in seconds.
/// Example: /// Example: 22
/// Constraints: No constraints specified.
func (rcv *AircraftSortie_Abridged) AlertStatus() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(56))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

/// The amount of time allowed between launch order and takeoff, in seconds.
/// Example: /// Example: 22
/// Constraints: No constraints specified.
func (rcv *AircraftSortie_Abridged) MutateAlertStatus(n int32) bool {
	return rcv._tab.MutateInt32Slot(56, n)
}

/// The current state of this sortie.
/// Example: /// Example: Park
/// Constraints: Minimum length = 0, Maximum length = 32
func (rcv *AircraftSortie_Abridged) CurrentState() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(58))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The current state of this sortie.
/// Example: /// Example: Park
/// Constraints: Minimum length = 0, Maximum length = 32
/// The itinerary identifier of the departure location.
/// Example: /// Example: 100
/// Constraints: No constraints specified.
func (rcv *AircraftSortie_Abridged) DepItinerary() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(60))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

/// The itinerary identifier of the departure location.
/// Example: /// Example: 100
/// Constraints: No constraints specified.
func (rcv *AircraftSortie_Abridged) MutateDepItinerary(n int32) bool {
	return rcv._tab.MutateInt32Slot(60, n)
}

/// The departure International Civil Aviation Organization (ICAO) of this sortie.
/// Example: /// Example: KCOS
/// Constraints: Minimum length = 0, Maximum length = 4
func (rcv *AircraftSortie_Abridged) DepIcao() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(62))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The departure International Civil Aviation Organization (ICAO) of this sortie.
/// Example: /// Example: KCOS
/// Constraints: Minimum length = 0, Maximum length = 4
/// The departure International Aviation Transport Association (IATA) code of this sortie.
/// Example: /// Example: AAA
/// Constraints: Minimum length = 0, Maximum length = 3
func (rcv *AircraftSortie_Abridged) DepIata() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(64))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The departure International Aviation Transport Association (IATA) code of this sortie.
/// Example: /// Example: AAA
/// Constraints: Minimum length = 0, Maximum length = 3
/// The departure Federal Aviation Administration (FAA) code of this sortie.
/// Example: /// Example: FAA1
/// Constraints: Minimum length = 0, Maximum length = 5
func (rcv *AircraftSortie_Abridged) DepFaa() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(66))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The departure Federal Aviation Administration (FAA) code of this sortie.
/// Example: /// Example: FAA1
/// Constraints: Minimum length = 0, Maximum length = 5
/// The scheduled time that the Aircraft sortie is planned to depart, in ISO 8601 UTC format with millisecond precision.
/// Example: /// Example: 2021-01-01T01:01:01.123Z
/// Constraints: No constraints specified.
func (rcv *AircraftSortie_Abridged) PlannedDepTime() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(68))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The scheduled time that the Aircraft sortie is planned to depart, in ISO 8601 UTC format with millisecond precision.
/// Example: /// Example: 2021-01-01T01:01:01.123Z
/// Constraints: No constraints specified.
/// The current estimated time that the Aircraft is planned to depart, in ISO 8601 UTC format with millisecond precision.
/// Example: /// Example: 2021-01-01T01:01:01.123Z
/// Constraints: No constraints specified.
func (rcv *AircraftSortie_Abridged) EstDepTime() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(70))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The current estimated time that the Aircraft is planned to depart, in ISO 8601 UTC format with millisecond precision.
/// Example: /// Example: 2021-01-01T01:01:01.123Z
/// Constraints: No constraints specified.
/// The actual departure time, in ISO 8601 UTC format.
/// Example: /// Example: 2021-01-01T01:01:01.123Z
/// Constraints: No constraints specified.
func (rcv *AircraftSortie_Abridged) ActualDepTime() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(72))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The actual departure time, in ISO 8601 UTC format.
/// Example: /// Example: 2021-01-01T01:01:01.123Z
/// Constraints: No constraints specified.
/// The estimated time the Aircraft will begin to taxi from its parking position, in ISO 8601 UTC format with millisecond precision.
/// Example: /// Example: 2021-01-01T00:55:01.123Z
/// Constraints: No constraints specified.
func (rcv *AircraftSortie_Abridged) EstBlockOutTime() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(74))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The estimated time the Aircraft will begin to taxi from its parking position, in ISO 8601 UTC format with millisecond precision.
/// Example: /// Example: 2021-01-01T00:55:01.123Z
/// Constraints: No constraints specified.
/// The actual time the Aircraft begins to taxi from its parking position, in ISO 8601 UTC format with millisecond precision.
/// Example: /// Example: 2021-01-01T00:55:01.123Z
/// Constraints: No constraints specified.
func (rcv *AircraftSortie_Abridged) ActualBlockOutTime() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(76))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The actual time the Aircraft begins to taxi from its parking position, in ISO 8601 UTC format with millisecond precision.
/// Example: /// Example: 2021-01-01T00:55:01.123Z
/// Constraints: No constraints specified.
/// Purpose code at the departure location of this sortie.
/// Example: /// Example: P
/// Constraints: Minimum length = 0, Maximum length = 10
func (rcv *AircraftSortie_Abridged) DepPurposeCode() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(78))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Purpose code at the departure location of this sortie.
/// Example: /// Example: P
/// Constraints: Minimum length = 0, Maximum length = 10
/// The itinerary identifier of the arrival location.
/// Example: /// Example: 101
/// Constraints: No constraints specified.
func (rcv *AircraftSortie_Abridged) ArrItinerary() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(80))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

/// The itinerary identifier of the arrival location.
/// Example: /// Example: 101
/// Constraints: No constraints specified.
func (rcv *AircraftSortie_Abridged) MutateArrItinerary(n int32) bool {
	return rcv._tab.MutateInt32Slot(80, n)
}

/// The arrival International Civil Aviation Organization (ICAO) of this sortie.
/// Example: /// Example: KCOS
/// Constraints: Minimum length = 0, Maximum length = 4
func (rcv *AircraftSortie_Abridged) ArrIcao() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(82))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The arrival International Civil Aviation Organization (ICAO) of this sortie.
/// Example: /// Example: KCOS
/// Constraints: Minimum length = 0, Maximum length = 4
/// The arrival International Aviation Transport Association (IATA) code of this sortie.
/// Example: /// Example: AAA
/// Constraints: Minimum length = 0, Maximum length = 3
func (rcv *AircraftSortie_Abridged) ArrIata() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(84))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The arrival International Aviation Transport Association (IATA) code of this sortie.
/// Example: /// Example: AAA
/// Constraints: Minimum length = 0, Maximum length = 3
/// The arrival Federal Aviation Administration (FAA) code of this sortie.
/// Example: /// Example: FAA1
/// Constraints: Minimum length = 0, Maximum length = 5
func (rcv *AircraftSortie_Abridged) ArrFaa() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(86))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The arrival Federal Aviation Administration (FAA) code of this sortie.
/// Example: /// Example: FAA1
/// Constraints: Minimum length = 0, Maximum length = 5
/// The scheduled time that the Aircraft sortie is planned to arrive,  in ISO 8601 UTC format with millisecond precision.
/// Example: /// Example: 2021-01-01T01:01:01.123Z
/// Constraints: No constraints specified.
func (rcv *AircraftSortie_Abridged) PlannedArrTime() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(88))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The scheduled time that the Aircraft sortie is planned to arrive,  in ISO 8601 UTC format with millisecond precision.
/// Example: /// Example: 2021-01-01T01:01:01.123Z
/// Constraints: No constraints specified.
/// The current estimated time that the Aircraft is planned to arrive, in ISO 8601 UTC format with millisecond precision.
/// Example: /// Example: 2021-01-01T01:01:01.123Z
/// Constraints: No constraints specified.
func (rcv *AircraftSortie_Abridged) EstArrTime() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(90))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The current estimated time that the Aircraft is planned to arrive, in ISO 8601 UTC format with millisecond precision.
/// Example: /// Example: 2021-01-01T01:01:01.123Z
/// Constraints: No constraints specified.
/// The actual arrival time, in ISO 8601 UTC format with millisecond precision.
/// Example: /// Example: 2021-01-01T01:01:01.123Z
/// Constraints: No constraints specified.
func (rcv *AircraftSortie_Abridged) ActualArrTime() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(92))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The actual arrival time, in ISO 8601 UTC format with millisecond precision.
/// Example: /// Example: 2021-01-01T01:01:01.123Z
/// Constraints: No constraints specified.
/// The estimated time the Aircraft will come to a complete stop in its parking position, in ISO 8601 UTC format with millisecond precision.
/// Example: /// Example: 2021-01-01T01:06:01.123Z
/// Constraints: No constraints specified.
func (rcv *AircraftSortie_Abridged) EstBlockInTime() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(94))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The estimated time the Aircraft will come to a complete stop in its parking position, in ISO 8601 UTC format with millisecond precision.
/// Example: /// Example: 2021-01-01T01:06:01.123Z
/// Constraints: No constraints specified.
/// The actual time the Aircraft comes to a complete stop in its parking position, in ISO 8601 UTC format with millisecond precision.
/// Example: /// Example: 2021-01-01T01:06:01.123Z
/// Constraints: No constraints specified.
func (rcv *AircraftSortie_Abridged) ActualBlockInTime() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(96))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The actual time the Aircraft comes to a complete stop in its parking position, in ISO 8601 UTC format with millisecond precision.
/// Example: /// Example: 2021-01-01T01:06:01.123Z
/// Constraints: No constraints specified.
/// Purpose code at the arrival location of this sortie.
/// Example: /// Example: O
/// Constraints: Minimum length = 0, Maximum length = 10
func (rcv *AircraftSortie_Abridged) ArrPurposeCode() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(98))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Purpose code at the arrival location of this sortie.
/// Example: /// Example: O
/// Constraints: Minimum length = 0, Maximum length = 10
/// Due home date by which the aircraft must return to its home station, in ISO 8601 UTC format with millisecond precision.
/// Example: /// Example: 2021-01-03T01:01:01.123Z
/// Constraints: No constraints specified.
func (rcv *AircraftSortie_Abridged) Dhd() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(100))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Due home date by which the aircraft must return to its home station, in ISO 8601 UTC format with millisecond precision.
/// Example: /// Example: 2021-01-03T01:01:01.123Z
/// Constraints: No constraints specified.
/// Reason the aircraft must return to home station by its due home date.
/// Example: /// Example: Due for maintenance
/// Constraints: Minimum length = 0, Maximum length = 32
func (rcv *AircraftSortie_Abridged) DhdReason() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(102))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Reason the aircraft must return to home station by its due home date.
/// Example: /// Example: Due for maintenance
/// Constraints: Minimum length = 0, Maximum length = 32
/// Aircraft event text.
/// Example: /// Example: Example event
/// Constraints: Minimum length = 0, Maximum length = 128
func (rcv *AircraftSortie_Abridged) AircraftEvent() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(104))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Aircraft event text.
/// Example: /// Example: Example event
/// Constraints: Minimum length = 0, Maximum length = 128
/// Indicates the group responsible for recording the completion time of the next event in the sequence of events assigned to this sortie (e.g. OPS - Operations, MX - Maintenance, TR - Transportation, etc.).
/// Example: /// Example: OPS
/// Constraints: Minimum length = 0, Maximum length = 16
func (rcv *AircraftSortie_Abridged) Soe() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(106))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Indicates the group responsible for recording the completion time of the next event in the sequence of events assigned to this sortie (e.g. OPS - Operations, MX - Maintenance, TR - Transportation, etc.).
/// Example: /// Example: OPS
/// Constraints: Minimum length = 0, Maximum length = 16
/// The leg number of this sortie.
/// Example: /// Example: 14
/// Constraints: No constraints specified.
func (rcv *AircraftSortie_Abridged) LegNum() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(108))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

/// The leg number of this sortie.
/// Example: /// Example: 14
/// Constraints: No constraints specified.
func (rcv *AircraftSortie_Abridged) MutateLegNum(n int32) bool {
	return rcv._tab.MutateInt32Slot(108, n)
}

/// The planned flight time for this sortie, in minutes.
/// Example: /// Example: 104.5
/// Constraints: No constraints specified.
func (rcv *AircraftSortie_Abridged) FlightTime() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(110))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// The planned flight time for this sortie, in minutes.
/// Example: /// Example: 104.5
/// Constraints: No constraints specified.
func (rcv *AircraftSortie_Abridged) MutateFlightTime(n float64) bool {
	return rcv._tab.MutateFloat64Slot(110, n)
}

/// Scheduled ground time, in minutes.
/// Example: /// Example: 387.8
/// Constraints: No constraints specified.
func (rcv *AircraftSortie_Abridged) GndTime() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(112))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Scheduled ground time, in minutes.
/// Example: /// Example: 387.8
/// Constraints: No constraints specified.
func (rcv *AircraftSortie_Abridged) MutateGndTime(n float64) bool {
	return rcv._tab.MutateFloat64Slot(112, n)
}

/// When crew papers are associated to this sortie, the system updates this value. This field is the URI location in the document repository of that raw file. To download the raw file, prepend https://udl-hostname/scs/download?id= to this field's value.
/// Example: /// Example: Example URI
/// Constraints: Minimum length = 0, Maximum length = 256
func (rcv *AircraftSortie_Abridged) RawFileUri() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(114))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// When crew papers are associated to this sortie, the system updates this value. This field is the URI location in the document repository of that raw file. To download the raw file, prepend https://udl-hostname/scs/download?id= to this field's value.
/// Example: /// Example: Example URI
/// Constraints: Minimum length = 0, Maximum length = 256
/// The version number of the crew paper.
/// Example: /// Example: 1.1
/// Constraints: Minimum length = 0, Maximum length = 16
func (rcv *AircraftSortie_Abridged) PapersVersion() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(116))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The version number of the crew paper.
/// Example: /// Example: 1.1
/// Constraints: Minimum length = 0, Maximum length = 16
/// Name of the uploaded PDF.
/// Example: /// Example: ExampleFileName
/// Constraints: Minimum length = 0, Maximum length = 512
func (rcv *AircraftSortie_Abridged) Filename() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(118))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Name of the uploaded PDF.
/// Example: /// Example: ExampleFileName
/// Constraints: Minimum length = 0, Maximum length = 512
/// Size of the supporting PDF, in bytes.
/// Example: /// Example: 12
/// Constraints: No constraints specified.
func (rcv *AircraftSortie_Abridged) Filesize() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(120))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

/// Size of the supporting PDF, in bytes.
/// Example: /// Example: 12
/// Constraints: No constraints specified.
func (rcv *AircraftSortie_Abridged) MutateFilesize(n int32) bool {
	return rcv._tab.MutateInt32Slot(120, n)
}

/// The status of the supporting document.
/// Example: /// Example: PUBLISHED
/// Constraints: Minimum length = 0, Maximum length = 9
func (rcv *AircraftSortie_Abridged) PaperStatus() AircraftSortie_Abridged_paperStatus_Enum {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(122))
	if o != 0 {
		return AircraftSortie_Abridged_paperStatus_Enum(rcv._tab.GetInt8(o + rcv._tab.Pos))
	}
	return 0
}

/// The status of the supporting document.
/// Example: /// Example: PUBLISHED
/// Constraints: Minimum length = 0, Maximum length = 9
func (rcv *AircraftSortie_Abridged) MutatePaperStatus(n AircraftSortie_Abridged_paperStatus_Enum) bool {
	return rcv._tab.MutateInt8Slot(122, int8(n))
}

/// The prior permission required (PPR) status.
/// Example: /// Example: PENDING
/// Constraints: Minimum length = 0, Maximum length = 22
func (rcv *AircraftSortie_Abridged) PprStatus() AircraftSortie_Abridged_pprStatus_Enum {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(124))
	if o != 0 {
		return AircraftSortie_Abridged_pprStatus_Enum(rcv._tab.GetInt8(o + rcv._tab.Pos))
	}
	return 0
}

/// The prior permission required (PPR) status.
/// Example: /// Example: PENDING
/// Constraints: Minimum length = 0, Maximum length = 22
func (rcv *AircraftSortie_Abridged) MutatePprStatus(n AircraftSortie_Abridged_pprStatus_Enum) bool {
	return rcv._tab.MutateInt8Slot(124, int8(n))
}

/// Time the associated mission data was last updated in relation to the aircraft assignment, in ISO 8601 UTC format with millisecond precision. If this time is coming from an external system, it may not sync with the latest mission time associated to this record.
/// Example: /// Example: 2024-09-09T01:01:01.123Z
/// Constraints: No constraints specified.
func (rcv *AircraftSortie_Abridged) MissionUpdate() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(126))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Time the associated mission data was last updated in relation to the aircraft assignment, in ISO 8601 UTC format with millisecond precision. If this time is coming from an external system, it may not sync with the latest mission time associated to this record.
/// Example: /// Example: 2024-09-09T01:01:01.123Z
/// Constraints: No constraints specified.
/// The primary delay code.
/// Example: /// Example: 500
/// Constraints: Minimum length = 0, Maximum length = 10
func (rcv *AircraftSortie_Abridged) DelayCode() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(128))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The primary delay code.
/// Example: /// Example: 500
/// Constraints: Minimum length = 0, Maximum length = 10
/// The last name of the aircraft commander.
/// Example: /// Example: Smith
/// Constraints: Minimum length = 0, Maximum length = 36
func (rcv *AircraftSortie_Abridged) CommanderName() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(130))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The last name of the aircraft commander.
/// Example: /// Example: Smith
/// Constraints: Minimum length = 0, Maximum length = 36
/// Desk phone number of the flight manager assigned to the sortie. Null when no flight manager is assigned.
/// Example: /// Example: 7198675309
/// Constraints: Minimum length = 0, Maximum length = 45
func (rcv *AircraftSortie_Abridged) FmDeskNum() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(132))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Desk phone number of the flight manager assigned to the sortie. Null when no flight manager is assigned.
/// Example: /// Example: 7198675309
/// Constraints: Minimum length = 0, Maximum length = 45
/// Last name of the flight manager assigned to the sortie. Null when no flight manager is assigned.
/// Example: /// Example: Smith
/// Constraints: Minimum length = 0, Maximum length = 64
func (rcv *AircraftSortie_Abridged) FmName() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(134))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Last name of the flight manager assigned to the sortie. Null when no flight manager is assigned.
/// Example: /// Example: Smith
/// Constraints: Minimum length = 0, Maximum length = 64
/// Type of Ravens required for this sortie (N - None, R - Raven (Security Team) required, C6 - Consider ravens (Ground time over 6 hours), R6 - Ravens required (Ground time over 6 hours)).
/// Example: /// Example: R
/// Constraints: Minimum length = 0, Maximum length = 2
func (rcv *AircraftSortie_Abridged) RvnReq() AircraftSortie_Abridged_rvnReq_Enum {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(136))
	if o != 0 {
		return AircraftSortie_Abridged_rvnReq_Enum(rcv._tab.GetInt8(o + rcv._tab.Pos))
	}
	return 0
}

/// Type of Ravens required for this sortie (N - None, R - Raven (Security Team) required, C6 - Consider ravens (Ground time over 6 hours), R6 - Ravens required (Ground time over 6 hours)).
/// Example: /// Example: R
/// Constraints: Minimum length = 0, Maximum length = 2
func (rcv *AircraftSortie_Abridged) MutateRvnReq(n AircraftSortie_Abridged_rvnReq_Enum) bool {
	return rcv._tab.MutateInt8Slot(136, int8(n))
}

/// The number of passengers tasked for this sortie.
/// Example: /// Example: 17
/// Constraints: No constraints specified.
func (rcv *AircraftSortie_Abridged) Passengers() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(138))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

/// The number of passengers tasked for this sortie.
/// Example: /// Example: 17
/// Constraints: No constraints specified.
func (rcv *AircraftSortie_Abridged) MutatePassengers(n int32) bool {
	return rcv._tab.MutateInt32Slot(138, n)
}

/// The POI parking location.
/// Example: /// Example: KCOS
/// Constraints: Minimum length = 0, Maximum length = 32
func (rcv *AircraftSortie_Abridged) ParkingLoc() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(140))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The POI parking location.
/// Example: /// Example: KCOS
/// Constraints: Minimum length = 0, Maximum length = 32
/// Remarks concerning the sortie objective.
/// Example: /// Example: Some objective remark about aircraft A
/// Constraints: Minimum length = 0, Maximum length = 512
func (rcv *AircraftSortie_Abridged) ObjectiveRemarks() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(142))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Remarks concerning the sortie objective.
/// Example: /// Example: Some objective remark about aircraft A
/// Constraints: Minimum length = 0, Maximum length = 512
/// Remarks concerning the aircraft.
/// Example: /// Example: Some remark about aircraft A
/// Constraints: Minimum length = 0, Maximum length = 512
func (rcv *AircraftSortie_Abridged) AircraftRemarks() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(144))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Remarks concerning the aircraft.
/// Example: /// Example: Some remark about aircraft A
/// Constraints: Minimum length = 0, Maximum length = 512
/// Remarks concerning the schedule.
/// Example: /// Example: Some schedule remark about aircraft A
/// Constraints: Minimum length = 0, Maximum length = 512
func (rcv *AircraftSortie_Abridged) ScheduleRemarks() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(146))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Remarks concerning the schedule.
/// Example: /// Example: Some schedule remark about aircraft A
/// Constraints: Minimum length = 0, Maximum length = 512
/// Remarks concerning the results of this sortie.
/// Example: /// Example: Some remark about aircraft A
/// Constraints: Minimum length = 0, Maximum length = 512
func (rcv *AircraftSortie_Abridged) ResultRemarks() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(148))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Remarks concerning the results of this sortie.
/// Example: /// Example: Some remark about aircraft A
/// Constraints: Minimum length = 0, Maximum length = 512
/// Time the row was created in the database, auto-populated by the system.
/// Example: /// Example: 2022-01-01T16:00:00.123Z
/// Constraints: No constraints specified.
func (rcv *AircraftSortie_Abridged) CreatedAt() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(150))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Time the row was created in the database, auto-populated by the system.
/// Example: /// Example: 2022-01-01T16:00:00.123Z
/// Constraints: No constraints specified.
/// Application user who created the row in the database, auto-populated by the system.
/// Example: /// Example: some.user
/// Constraints: Minimum length = 1, Maximum length = 64
func (rcv *AircraftSortie_Abridged) CreatedBy() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(152))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Application user who created the row in the database, auto-populated by the system.
/// Example: /// Example: some.user
/// Constraints: Minimum length = 1, Maximum length = 64
/// The source data library from which this record was received. This could be a remote or tactical UDL or another data library. If null, the record should be assumed to have originated from the primary Enterprise UDL.
/// Example: /// Example: AXE
/// Constraints: Minimum length = 0, Maximum length = 64
func (rcv *AircraftSortie_Abridged) SourceDl() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(154))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The source data library from which this record was received. This could be a remote or tactical UDL or another data library. If null, the record should be assumed to have originated from the primary Enterprise UDL.
/// Example: /// Example: AXE
/// Constraints: Minimum length = 0, Maximum length = 64
/// Source of the data.
/// Example: /// Example: Bluestaq
/// Constraints: Minimum length = 1, Maximum length = 64
func (rcv *AircraftSortie_Abridged) Source() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(156))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Source of the data.
/// Example: /// Example: Bluestaq
/// Constraints: Minimum length = 1, Maximum length = 64
/// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
/// Example: /// Example: THIRD_PARTY_DATASOURCE
/// Constraints: Minimum length = 0, Maximum length = 64
func (rcv *AircraftSortie_Abridged) Origin() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(158))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
/// Example: /// Example: THIRD_PARTY_DATASOURCE
/// Constraints: Minimum length = 0, Maximum length = 64
/// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
/// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
/// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
/// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
/// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
/// Example: /// Example: TEST
/// Constraints: Minimum length = 1, Maximum length = 32
func (rcv *AircraftSortie_Abridged) DataMode() AircraftSortie_Abridged_dataMode_Enum {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(160))
	if o != 0 {
		return AircraftSortie_Abridged_dataMode_Enum(rcv._tab.GetInt8(o + rcv._tab.Pos))
	}
	return 0
}

/// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
/// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
/// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
/// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
/// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
/// Example: /// Example: TEST
/// Constraints: Minimum length = 1, Maximum length = 32
func (rcv *AircraftSortie_Abridged) MutateDataMode(n AircraftSortie_Abridged_dataMode_Enum) bool {
	return rcv._tab.MutateInt8Slot(160, int8(n))
}

/// The originating source network on which this record was created, auto-populated by the system.
/// Example: /// Example: OPS1
/// Constraints: Minimum length = 1, Maximum length = 32
func (rcv *AircraftSortie_Abridged) OrigNetwork() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(162))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The originating source network on which this record was created, auto-populated by the system.
/// Example: /// Example: OPS1
/// Constraints: Minimum length = 1, Maximum length = 32
func AircraftSortie_AbridgedStart(builder *flatbuffers.Builder) {
	builder.StartObject(80)
}
func AircraftSortie_AbridgedAddId(builder *flatbuffers.Builder, id flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(id), 0)
}
func AircraftSortie_AbridgedAddClassificationMarking(builder *flatbuffers.Builder, classificationMarking flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(classificationMarking), 0)
}
func AircraftSortie_AbridgedAddOrigSortieId(builder *flatbuffers.Builder, origSortieId flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(origSortieId), 0)
}
func AircraftSortie_AbridgedAddIdAircraft(builder *flatbuffers.Builder, idAircraft flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(3, flatbuffers.UOffsetT(idAircraft), 0)
}
func AircraftSortie_AbridgedAddAircraftAltId(builder *flatbuffers.Builder, aircraftAltId flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(4, flatbuffers.UOffsetT(aircraftAltId), 0)
}
func AircraftSortie_AbridgedAddTailNumber(builder *flatbuffers.Builder, tailNumber flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(5, flatbuffers.UOffsetT(tailNumber), 0)
}
func AircraftSortie_AbridgedAddAircraftMds(builder *flatbuffers.Builder, aircraftMds flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(6, flatbuffers.UOffsetT(aircraftMds), 0)
}
func AircraftSortie_AbridgedAddAircraftAdsb(builder *flatbuffers.Builder, aircraftAdsb flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(7, flatbuffers.UOffsetT(aircraftAdsb), 0)
}
func AircraftSortie_AbridgedAddSortieDate(builder *flatbuffers.Builder, sortieDate flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(8, flatbuffers.UOffsetT(sortieDate), 0)
}
func AircraftSortie_AbridgedAddLineNumber(builder *flatbuffers.Builder, lineNumber int32) {
	builder.PrependInt32Slot(9, lineNumber, 0)
}
func AircraftSortie_AbridgedAddIdMission(builder *flatbuffers.Builder, idMission flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(10, flatbuffers.UOffsetT(idMission), 0)
}
func AircraftSortie_AbridgedAddMissionId(builder *flatbuffers.Builder, missionId flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(11, flatbuffers.UOffsetT(missionId), 0)
}
func AircraftSortie_AbridgedAddAmcMsnNum(builder *flatbuffers.Builder, amcMsnNum flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(12, flatbuffers.UOffsetT(amcMsnNum), 0)
}
func AircraftSortie_AbridgedAddAmcMsnType(builder *flatbuffers.Builder, amcMsnType flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(13, flatbuffers.UOffsetT(amcMsnType), 0)
}
func AircraftSortie_AbridgedAddCallSign(builder *flatbuffers.Builder, callSign flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(14, flatbuffers.UOffsetT(callSign), 0)
}
func AircraftSortie_AbridgedAddJcsPriority(builder *flatbuffers.Builder, jcsPriority flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(15, flatbuffers.UOffsetT(jcsPriority), 0)
}
func AircraftSortie_AbridgedAddPrimaryScl(builder *flatbuffers.Builder, primaryScl flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(16, flatbuffers.UOffsetT(primaryScl), 0)
}
func AircraftSortie_AbridgedAddSecondaryScl(builder *flatbuffers.Builder, secondaryScl flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(17, flatbuffers.UOffsetT(secondaryScl), 0)
}
func AircraftSortie_AbridgedAddReqConfig(builder *flatbuffers.Builder, reqConfig flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(18, flatbuffers.UOffsetT(reqConfig), 0)
}
func AircraftSortie_AbridgedAddCargoConfig(builder *flatbuffers.Builder, cargoConfig flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(19, flatbuffers.UOffsetT(cargoConfig), 0)
}
func AircraftSortie_AbridgedAddFuelReq(builder *flatbuffers.Builder, fuelReq float64) {
	builder.PrependFloat64Slot(20, fuelReq, 0.0)
}
func AircraftSortie_AbridgedAddOxyReqCrew(builder *flatbuffers.Builder, oxyReqCrew float64) {
	builder.PrependFloat64Slot(21, oxyReqCrew, 0.0)
}
func AircraftSortie_AbridgedAddOxyOnCrew(builder *flatbuffers.Builder, oxyOnCrew float64) {
	builder.PrependFloat64Slot(22, oxyOnCrew, 0.0)
}
func AircraftSortie_AbridgedAddOxyReqPax(builder *flatbuffers.Builder, oxyReqPax float64) {
	builder.PrependFloat64Slot(23, oxyReqPax, 0.0)
}
func AircraftSortie_AbridgedAddOxyOnPax(builder *flatbuffers.Builder, oxyOnPax float64) {
	builder.PrependFloat64Slot(24, oxyOnPax, 0.0)
}
func AircraftSortie_AbridgedAddAlertStatusCode(builder *flatbuffers.Builder, alertStatusCode flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(25, flatbuffers.UOffsetT(alertStatusCode), 0)
}
func AircraftSortie_AbridgedAddAlertStatus(builder *flatbuffers.Builder, alertStatus int32) {
	builder.PrependInt32Slot(26, alertStatus, 0)
}
func AircraftSortie_AbridgedAddCurrentState(builder *flatbuffers.Builder, currentState flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(27, flatbuffers.UOffsetT(currentState), 0)
}
func AircraftSortie_AbridgedAddDepItinerary(builder *flatbuffers.Builder, depItinerary int32) {
	builder.PrependInt32Slot(28, depItinerary, 0)
}
func AircraftSortie_AbridgedAddDepIcao(builder *flatbuffers.Builder, depIcao flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(29, flatbuffers.UOffsetT(depIcao), 0)
}
func AircraftSortie_AbridgedAddDepIata(builder *flatbuffers.Builder, depIata flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(30, flatbuffers.UOffsetT(depIata), 0)
}
func AircraftSortie_AbridgedAddDepFaa(builder *flatbuffers.Builder, depFaa flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(31, flatbuffers.UOffsetT(depFaa), 0)
}
func AircraftSortie_AbridgedAddPlannedDepTime(builder *flatbuffers.Builder, plannedDepTime flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(32, flatbuffers.UOffsetT(plannedDepTime), 0)
}
func AircraftSortie_AbridgedAddEstDepTime(builder *flatbuffers.Builder, estDepTime flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(33, flatbuffers.UOffsetT(estDepTime), 0)
}
func AircraftSortie_AbridgedAddActualDepTime(builder *flatbuffers.Builder, actualDepTime flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(34, flatbuffers.UOffsetT(actualDepTime), 0)
}
func AircraftSortie_AbridgedAddEstBlockOutTime(builder *flatbuffers.Builder, estBlockOutTime flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(35, flatbuffers.UOffsetT(estBlockOutTime), 0)
}
func AircraftSortie_AbridgedAddActualBlockOutTime(builder *flatbuffers.Builder, actualBlockOutTime flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(36, flatbuffers.UOffsetT(actualBlockOutTime), 0)
}
func AircraftSortie_AbridgedAddDepPurposeCode(builder *flatbuffers.Builder, depPurposeCode flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(37, flatbuffers.UOffsetT(depPurposeCode), 0)
}
func AircraftSortie_AbridgedAddArrItinerary(builder *flatbuffers.Builder, arrItinerary int32) {
	builder.PrependInt32Slot(38, arrItinerary, 0)
}
func AircraftSortie_AbridgedAddArrIcao(builder *flatbuffers.Builder, arrIcao flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(39, flatbuffers.UOffsetT(arrIcao), 0)
}
func AircraftSortie_AbridgedAddArrIata(builder *flatbuffers.Builder, arrIata flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(40, flatbuffers.UOffsetT(arrIata), 0)
}
func AircraftSortie_AbridgedAddArrFaa(builder *flatbuffers.Builder, arrFaa flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(41, flatbuffers.UOffsetT(arrFaa), 0)
}
func AircraftSortie_AbridgedAddPlannedArrTime(builder *flatbuffers.Builder, plannedArrTime flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(42, flatbuffers.UOffsetT(plannedArrTime), 0)
}
func AircraftSortie_AbridgedAddEstArrTime(builder *flatbuffers.Builder, estArrTime flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(43, flatbuffers.UOffsetT(estArrTime), 0)
}
func AircraftSortie_AbridgedAddActualArrTime(builder *flatbuffers.Builder, actualArrTime flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(44, flatbuffers.UOffsetT(actualArrTime), 0)
}
func AircraftSortie_AbridgedAddEstBlockInTime(builder *flatbuffers.Builder, estBlockInTime flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(45, flatbuffers.UOffsetT(estBlockInTime), 0)
}
func AircraftSortie_AbridgedAddActualBlockInTime(builder *flatbuffers.Builder, actualBlockInTime flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(46, flatbuffers.UOffsetT(actualBlockInTime), 0)
}
func AircraftSortie_AbridgedAddArrPurposeCode(builder *flatbuffers.Builder, arrPurposeCode flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(47, flatbuffers.UOffsetT(arrPurposeCode), 0)
}
func AircraftSortie_AbridgedAddDhd(builder *flatbuffers.Builder, dhd flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(48, flatbuffers.UOffsetT(dhd), 0)
}
func AircraftSortie_AbridgedAddDhdReason(builder *flatbuffers.Builder, dhdReason flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(49, flatbuffers.UOffsetT(dhdReason), 0)
}
func AircraftSortie_AbridgedAddAircraftEvent(builder *flatbuffers.Builder, aircraftEvent flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(50, flatbuffers.UOffsetT(aircraftEvent), 0)
}
func AircraftSortie_AbridgedAddSoe(builder *flatbuffers.Builder, soe flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(51, flatbuffers.UOffsetT(soe), 0)
}
func AircraftSortie_AbridgedAddLegNum(builder *flatbuffers.Builder, legNum int32) {
	builder.PrependInt32Slot(52, legNum, 0)
}
func AircraftSortie_AbridgedAddFlightTime(builder *flatbuffers.Builder, flightTime float64) {
	builder.PrependFloat64Slot(53, flightTime, 0.0)
}
func AircraftSortie_AbridgedAddGndTime(builder *flatbuffers.Builder, gndTime float64) {
	builder.PrependFloat64Slot(54, gndTime, 0.0)
}
func AircraftSortie_AbridgedAddRawFileUri(builder *flatbuffers.Builder, rawFileUri flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(55, flatbuffers.UOffsetT(rawFileUri), 0)
}
func AircraftSortie_AbridgedAddPapersVersion(builder *flatbuffers.Builder, papersVersion flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(56, flatbuffers.UOffsetT(papersVersion), 0)
}
func AircraftSortie_AbridgedAddFilename(builder *flatbuffers.Builder, filename flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(57, flatbuffers.UOffsetT(filename), 0)
}
func AircraftSortie_AbridgedAddFilesize(builder *flatbuffers.Builder, filesize int32) {
	builder.PrependInt32Slot(58, filesize, 0)
}
func AircraftSortie_AbridgedAddPaperStatus(builder *flatbuffers.Builder, paperStatus AircraftSortie_Abridged_paperStatus_Enum) {
	builder.PrependInt8Slot(59, int8(paperStatus), 0)
}
func AircraftSortie_AbridgedAddPprStatus(builder *flatbuffers.Builder, pprStatus AircraftSortie_Abridged_pprStatus_Enum) {
	builder.PrependInt8Slot(60, int8(pprStatus), 0)
}
func AircraftSortie_AbridgedAddMissionUpdate(builder *flatbuffers.Builder, missionUpdate flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(61, flatbuffers.UOffsetT(missionUpdate), 0)
}
func AircraftSortie_AbridgedAddDelayCode(builder *flatbuffers.Builder, delayCode flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(62, flatbuffers.UOffsetT(delayCode), 0)
}
func AircraftSortie_AbridgedAddCommanderName(builder *flatbuffers.Builder, commanderName flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(63, flatbuffers.UOffsetT(commanderName), 0)
}
func AircraftSortie_AbridgedAddFmDeskNum(builder *flatbuffers.Builder, fmDeskNum flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(64, flatbuffers.UOffsetT(fmDeskNum), 0)
}
func AircraftSortie_AbridgedAddFmName(builder *flatbuffers.Builder, fmName flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(65, flatbuffers.UOffsetT(fmName), 0)
}
func AircraftSortie_AbridgedAddRvnReq(builder *flatbuffers.Builder, rvnReq AircraftSortie_Abridged_rvnReq_Enum) {
	builder.PrependInt8Slot(66, int8(rvnReq), 0)
}
func AircraftSortie_AbridgedAddPassengers(builder *flatbuffers.Builder, passengers int32) {
	builder.PrependInt32Slot(67, passengers, 0)
}
func AircraftSortie_AbridgedAddParkingLoc(builder *flatbuffers.Builder, parkingLoc flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(68, flatbuffers.UOffsetT(parkingLoc), 0)
}
func AircraftSortie_AbridgedAddObjectiveRemarks(builder *flatbuffers.Builder, objectiveRemarks flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(69, flatbuffers.UOffsetT(objectiveRemarks), 0)
}
func AircraftSortie_AbridgedAddAircraftRemarks(builder *flatbuffers.Builder, aircraftRemarks flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(70, flatbuffers.UOffsetT(aircraftRemarks), 0)
}
func AircraftSortie_AbridgedAddScheduleRemarks(builder *flatbuffers.Builder, scheduleRemarks flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(71, flatbuffers.UOffsetT(scheduleRemarks), 0)
}
func AircraftSortie_AbridgedAddResultRemarks(builder *flatbuffers.Builder, resultRemarks flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(72, flatbuffers.UOffsetT(resultRemarks), 0)
}
func AircraftSortie_AbridgedAddCreatedAt(builder *flatbuffers.Builder, createdAt flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(73, flatbuffers.UOffsetT(createdAt), 0)
}
func AircraftSortie_AbridgedAddCreatedBy(builder *flatbuffers.Builder, createdBy flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(74, flatbuffers.UOffsetT(createdBy), 0)
}
func AircraftSortie_AbridgedAddSourceDl(builder *flatbuffers.Builder, sourceDl flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(75, flatbuffers.UOffsetT(sourceDl), 0)
}
func AircraftSortie_AbridgedAddSource(builder *flatbuffers.Builder, source flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(76, flatbuffers.UOffsetT(source), 0)
}
func AircraftSortie_AbridgedAddOrigin(builder *flatbuffers.Builder, origin flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(77, flatbuffers.UOffsetT(origin), 0)
}
func AircraftSortie_AbridgedAddDataMode(builder *flatbuffers.Builder, dataMode AircraftSortie_Abridged_dataMode_Enum) {
	builder.PrependInt8Slot(78, int8(dataMode), 0)
}
func AircraftSortie_AbridgedAddOrigNetwork(builder *flatbuffers.Builder, origNetwork flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(79, flatbuffers.UOffsetT(origNetwork), 0)
}
func AircraftSortie_AbridgedEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
