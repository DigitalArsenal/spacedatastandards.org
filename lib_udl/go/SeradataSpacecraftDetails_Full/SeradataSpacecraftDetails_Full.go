// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package SeradataSpacecraftDetails_Full

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

/// /// On-orbit spacecraft details compiled by Seradata for a particular satellite.
type SeradataSpacecraftDetails_Full struct {
	_tab flatbuffers.Table
}

const SeradataSpacecraftDetails_FullIdentifier = "SERA"

func GetRootAsSeradataSpacecraftDetails_Full(buf []byte, offset flatbuffers.UOffsetT) *SeradataSpacecraftDetails_Full {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &SeradataSpacecraftDetails_Full{}
	x.Init(buf, n+offset)
	return x
}

func FinishSeradataSpacecraftDetails_FullBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	identifierBytes := []byte(SeradataSpacecraftDetails_FullIdentifier)
	builder.FinishWithFileIdentifier(offset, identifierBytes)
}

func SeradataSpacecraftDetails_FullBufferHasIdentifier(buf []byte) bool {
	return flatbuffers.BufferHasIdentifier(buf, SeradataSpacecraftDetails_FullIdentifier)
}

func GetSizePrefixedRootAsSeradataSpacecraftDetails_Full(buf []byte, offset flatbuffers.UOffsetT) *SeradataSpacecraftDetails_Full {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &SeradataSpacecraftDetails_Full{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedSeradataSpacecraftDetails_FullBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	identifierBytes := []byte(SeradataSpacecraftDetails_FullIdentifier)
	builder.FinishSizePrefixedWithFileIdentifier(offset, identifierBytes)
}

func SizePrefixedSeradataSpacecraftDetails_FullBufferHasIdentifier(buf []byte) bool {
	return flatbuffers.SizePrefixedBufferHasIdentifier(buf, SeradataSpacecraftDetails_FullIdentifier)
}

func (rcv *SeradataSpacecraftDetails_Full) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *SeradataSpacecraftDetails_Full) Table() flatbuffers.Table {
	return rcv._tab
}

/// Unique identifier of the record, auto-generated by the system.
/// Example: /// Example: SERADATASPACECRAFTDETAILS-ID
/// Constraints: Minimum length = 1, Maximum length = 36
func (rcv *SeradataSpacecraftDetails_Full) Id() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Unique identifier of the record, auto-generated by the system.
/// Example: /// Example: SERADATASPACECRAFTDETAILS-ID
/// Constraints: Minimum length = 1, Maximum length = 36
/// UUID of the parent Onorbit record, if available.
/// Example: /// Example: 503
/// Constraints: Minimum length = 0, Maximum length = 36
func (rcv *SeradataSpacecraftDetails_Full) IdOnOrbit() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// UUID of the parent Onorbit record, if available.
/// Example: /// Example: 503
/// Constraints: Minimum length = 0, Maximum length = 36
/// Classification marking of the data in IC/CAPCO Portion-marked format.
/// Example: /// Example: U
/// Constraints: Minimum length = 1, Maximum length = 128
func (rcv *SeradataSpacecraftDetails_Full) ClassificationMarking() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Classification marking of the data in IC/CAPCO Portion-marked format.
/// Example: /// Example: U
/// Constraints: Minimum length = 1, Maximum length = 128
/// Spacecraft name.
/// Example: /// Example: name
/// Constraints: Minimum length = 1, Maximum length = 64
func (rcv *SeradataSpacecraftDetails_Full) Name() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Spacecraft name.
/// Example: /// Example: name
/// Constraints: Minimum length = 1, Maximum length = 64
/// Description associated with the spacecraft.
/// Example: /// Example: description
/// Constraints: Minimum length = 0, Maximum length = 2147483647
func (rcv *SeradataSpacecraftDetails_Full) Description() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Description associated with the spacecraft.
/// Example: /// Example: description
/// Constraints: Minimum length = 0, Maximum length = 2147483647
/// Seradata international number.
/// Example: /// Example: number
/// Constraints: Minimum length = 0, Maximum length = 16
func (rcv *SeradataSpacecraftDetails_Full) IntlNumber() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Seradata international number.
/// Example: /// Example: number
/// Constraints: Minimum length = 0, Maximum length = 16
/// Seradata sector (e.g. Commercial, Military, Civil/Other).
/// Example: /// Example: Commercial
/// Constraints: Minimum length = 0, Maximum length = 16
func (rcv *SeradataSpacecraftDetails_Full) Sector() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Seradata sector (e.g. Commercial, Military, Civil/Other).
/// Example: /// Example: Commercial
/// Constraints: Minimum length = 0, Maximum length = 16
/// Apogee in km.
/// Example: /// Example: 1.23
/// Constraints: No constraints specified.
func (rcv *SeradataSpacecraftDetails_Full) Apogee() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(18))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Apogee in km.
/// Example: /// Example: 1.23
/// Constraints: No constraints specified.
func (rcv *SeradataSpacecraftDetails_Full) MutateApogee(n float64) bool {
	return rcv._tab.MutateFloat64Slot(18, n)
}

/// Perigee in km.
/// Example: /// Example: 1.23
/// Constraints: No constraints specified.
func (rcv *SeradataSpacecraftDetails_Full) Perigee() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(20))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Perigee in km.
/// Example: /// Example: 1.23
/// Constraints: No constraints specified.
func (rcv *SeradataSpacecraftDetails_Full) MutatePerigee(n float64) bool {
	return rcv._tab.MutateFloat64Slot(20, n)
}

/// Spacecraft period in minutes.
/// Example: /// Example: 1.23
/// Constraints: No constraints specified.
func (rcv *SeradataSpacecraftDetails_Full) Period() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(22))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Spacecraft period in minutes.
/// Example: /// Example: 1.23
/// Constraints: No constraints specified.
func (rcv *SeradataSpacecraftDetails_Full) MutatePeriod(n float64) bool {
	return rcv._tab.MutateFloat64Slot(22, n)
}

/// Seradata provided inclination in degrees.
/// Example: /// Example: 1.23
/// Constraints: No constraints specified.
func (rcv *SeradataSpacecraftDetails_Full) Inclination() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(24))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Seradata provided inclination in degrees.
/// Example: /// Example: 1.23
/// Constraints: No constraints specified.
func (rcv *SeradataSpacecraftDetails_Full) MutateInclination(n float64) bool {
	return rcv._tab.MutateFloat64Slot(24, n)
}

/// UUID of the prime manufacturer organization, if available.
/// Example: /// Example: 05c43360-382e-4aa2-b875-ed28945ff2e5
/// Constraints: Minimum length = 0, Maximum length = 36
func (rcv *SeradataSpacecraftDetails_Full) PrimeManufacturerOrgId() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(26))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// UUID of the prime manufacturer organization, if available.
/// Example: /// Example: 05c43360-382e-4aa2-b875-ed28945ff2e5
/// Constraints: Minimum length = 0, Maximum length = 36
/// Spacecraft stabilizer (e.g. 3-Axis, Gravity Gradiant, etc).
/// Example: /// Example: 3-Axis
/// Constraints: Minimum length = 0, Maximum length = 32
func (rcv *SeradataSpacecraftDetails_Full) Stabilizer() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(28))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Spacecraft stabilizer (e.g. 3-Axis, Gravity Gradiant, etc).
/// Example: /// Example: 3-Axis
/// Constraints: Minimum length = 0, Maximum length = 32
/// Spacecraft design life in days.
/// Example: /// Example: 231
/// Constraints: No constraints specified.
func (rcv *SeradataSpacecraftDetails_Full) DesignLife() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(30))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

/// Spacecraft design life in days.
/// Example: /// Example: 231
/// Constraints: No constraints specified.
func (rcv *SeradataSpacecraftDetails_Full) MutateDesignLife(n int32) bool {
	return rcv._tab.MutateInt32Slot(30, n)
}

/// Spacecraft expected life in days.
/// Example: /// Example: 231
/// Constraints: No constraints specified.
func (rcv *SeradataSpacecraftDetails_Full) ExpectedLife() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(32))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

/// Spacecraft expected life in days.
/// Example: /// Example: 231
/// Constraints: No constraints specified.
func (rcv *SeradataSpacecraftDetails_Full) MutateExpectedLife(n int32) bool {
	return rcv._tab.MutateInt32Slot(32, n)
}

/// Boolean indicating if the spacecraft was insured at launch.
/// Example: /// Example: True
/// Constraints: No constraints specified.
func (rcv *SeradataSpacecraftDetails_Full) InsuredAtLaunch() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(34))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

/// Boolean indicating if the spacecraft was insured at launch.
/// Example: /// Example: True
/// Constraints: No constraints specified.
func (rcv *SeradataSpacecraftDetails_Full) MutateInsuredAtLaunch(n bool) bool {
	return rcv._tab.MutateBoolSlot(34, n)
}

/// Mass at launch in kg.
/// Example: /// Example: 1.23
/// Constraints: No constraints specified.
func (rcv *SeradataSpacecraftDetails_Full) LaunchMass() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(36))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Mass at launch in kg.
/// Example: /// Example: 1.23
/// Constraints: No constraints specified.
func (rcv *SeradataSpacecraftDetails_Full) MutateLaunchMass(n float64) bool {
	return rcv._tab.MutateFloat64Slot(36, n)
}

/// Mass dry in kg.
/// Example: /// Example: 1.23
/// Constraints: No constraints specified.
func (rcv *SeradataSpacecraftDetails_Full) DryMass() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(38))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Mass dry in kg.
/// Example: /// Example: 1.23
/// Constraints: No constraints specified.
func (rcv *SeradataSpacecraftDetails_Full) MutateDryMass(n float64) bool {
	return rcv._tab.MutateFloat64Slot(38, n)
}

/// NORAD satellite number if available.
/// Example: /// Example: 1
/// Constraints: No constraints specified.
func (rcv *SeradataSpacecraftDetails_Full) CatalogNumber() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(40))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

/// NORAD satellite number if available.
/// Example: /// Example: 1
/// Constraints: No constraints specified.
func (rcv *SeradataSpacecraftDetails_Full) MutateCatalogNumber(n int32) bool {
	return rcv._tab.MutateInt32Slot(40, n)
}

/// Mass dry in kg.
/// Example: /// Example: 1.23
/// Constraints: No constraints specified.
func (rcv *SeradataSpacecraftDetails_Full) TotalPayloadPower() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(42))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Mass dry in kg.
/// Example: /// Example: 1.23
/// Constraints: No constraints specified.
func (rcv *SeradataSpacecraftDetails_Full) MutateTotalPayloadPower(n float64) bool {
	return rcv._tab.MutateFloat64Slot(42, n)
}

/// Spacecraft constellation.
/// Example: /// Example: GPS
/// Constraints: Minimum length = 0, Maximum length = 64
func (rcv *SeradataSpacecraftDetails_Full) Constellation() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(44))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Spacecraft constellation.
/// Example: /// Example: GPS
/// Constraints: Minimum length = 0, Maximum length = 64
/// Spacecraft orbit category (e.g GEO, LEO, etc).
/// Example: /// Example: GEO
/// Constraints: Minimum length = 0, Maximum length = 64
func (rcv *SeradataSpacecraftDetails_Full) OrbitCategory() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(46))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Spacecraft orbit category (e.g GEO, LEO, etc).
/// Example: /// Example: GEO
/// Constraints: Minimum length = 0, Maximum length = 64
/// Spacecraft sub orbit category (e.g LEO - Sun-synchronous, Geostationary, etc).
/// Example: /// Example: Geostationary
/// Constraints: Minimum length = 0, Maximum length = 64
func (rcv *SeradataSpacecraftDetails_Full) OrbitSubCategory() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(48))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Spacecraft sub orbit category (e.g LEO - Sun-synchronous, Geostationary, etc).
/// Example: /// Example: Geostationary
/// Constraints: Minimum length = 0, Maximum length = 64
/// Cost of launch in M USD.
/// Example: /// Example: 1.23
/// Constraints: No constraints specified.
func (rcv *SeradataSpacecraftDetails_Full) LaunchCost() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(50))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Cost of launch in M USD.
/// Example: /// Example: 1.23
/// Constraints: No constraints specified.
func (rcv *SeradataSpacecraftDetails_Full) MutateLaunchCost(n float64) bool {
	return rcv._tab.MutateFloat64Slot(50, n)
}

/// Boolean indicating if the spacecraft launch cost is estimated.
/// Example: /// Example: True
/// Constraints: No constraints specified.
func (rcv *SeradataSpacecraftDetails_Full) LaunchCostEstimated() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(52))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

/// Boolean indicating if the spacecraft launch cost is estimated.
/// Example: /// Example: True
/// Constraints: No constraints specified.
func (rcv *SeradataSpacecraftDetails_Full) MutateLaunchCostEstimated(n bool) bool {
	return rcv._tab.MutateBoolSlot(52, n)
}

/// Boolean indicating if the spacecraft cost is estimated.
/// Example: /// Example: True
/// Constraints: No constraints specified.
func (rcv *SeradataSpacecraftDetails_Full) CostEstimated() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(54))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

/// Boolean indicating if the spacecraft cost is estimated.
/// Example: /// Example: True
/// Constraints: No constraints specified.
func (rcv *SeradataSpacecraftDetails_Full) MutateCostEstimated(n bool) bool {
	return rcv._tab.MutateBoolSlot(54, n)
}

/// Cost of spacecraft at new in M USD.
/// Example: /// Example: 1.23
/// Constraints: No constraints specified.
func (rcv *SeradataSpacecraftDetails_Full) NewCost() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(56))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Cost of spacecraft at new in M USD.
/// Example: /// Example: 1.23
/// Constraints: No constraints specified.
func (rcv *SeradataSpacecraftDetails_Full) MutateNewCost(n float64) bool {
	return rcv._tab.MutateFloat64Slot(56, n)
}

/// Combined cost of spacecraft at new in M USD.
/// Example: /// Example: 1.23
/// Constraints: No constraints specified.
func (rcv *SeradataSpacecraftDetails_Full) CombinedNewCost() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(58))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Combined cost of spacecraft at new in M USD.
/// Example: /// Example: 1.23
/// Constraints: No constraints specified.
func (rcv *SeradataSpacecraftDetails_Full) MutateCombinedNewCost(n float64) bool {
	return rcv._tab.MutateFloat64Slot(58, n)
}

/// Boolean indicating if the spacecraft combined new cost is estimated.
/// Example: /// Example: True
/// Constraints: No constraints specified.
func (rcv *SeradataSpacecraftDetails_Full) CombinedCostEstimated() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(60))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

/// Boolean indicating if the spacecraft combined new cost is estimated.
/// Example: /// Example: True
/// Constraints: No constraints specified.
func (rcv *SeradataSpacecraftDetails_Full) MutateCombinedCostEstimated(n bool) bool {
	return rcv._tab.MutateBoolSlot(60, n)
}

/// Insured value of spacecraft at launch in M USD.
/// Example: /// Example: 1.23
/// Constraints: No constraints specified.
func (rcv *SeradataSpacecraftDetails_Full) InsuredValueAtLaunch() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(62))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Insured value of spacecraft at launch in M USD.
/// Example: /// Example: 1.23
/// Constraints: No constraints specified.
func (rcv *SeradataSpacecraftDetails_Full) MutateInsuredValueAtLaunch(n float64) bool {
	return rcv._tab.MutateFloat64Slot(62, n)
}

/// Boolean indicating if the spacecraft insured value at launch is estimated.
/// Example: /// Example: True
/// Constraints: No constraints specified.
func (rcv *SeradataSpacecraftDetails_Full) InsuredValueLaunchEstimated() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(64))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

/// Boolean indicating if the spacecraft insured value at launch is estimated.
/// Example: /// Example: True
/// Constraints: No constraints specified.
func (rcv *SeradataSpacecraftDetails_Full) MutateInsuredValueLaunchEstimated(n bool) bool {
	return rcv._tab.MutateBoolSlot(64, n)
}

/// Annual insured depreciaion factor as a percent fraction.
/// Example: /// Example: 1.23
/// Constraints: No constraints specified.
func (rcv *SeradataSpacecraftDetails_Full) AnnualInsuredDepreciationFactor() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(66))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Annual insured depreciaion factor as a percent fraction.
/// Example: /// Example: 1.23
/// Constraints: No constraints specified.
func (rcv *SeradataSpacecraftDetails_Full) MutateAnnualInsuredDepreciationFactor(n float64) bool {
	return rcv._tab.MutateFloat64Slot(66, n)
}

/// Boolean indicating if the spacecraft annualInsuredDepreciationFactor is estimated.
/// Example: /// Example: True
/// Constraints: No constraints specified.
func (rcv *SeradataSpacecraftDetails_Full) AnnualInsuredDepreciationFactorEstimated() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(68))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

/// Boolean indicating if the spacecraft annualInsuredDepreciationFactor is estimated.
/// Example: /// Example: True
/// Constraints: No constraints specified.
func (rcv *SeradataSpacecraftDetails_Full) MutateAnnualInsuredDepreciationFactorEstimated(n bool) bool {
	return rcv._tab.MutateBoolSlot(68, n)
}

/// Insurance premium at launch in M USD.
/// Example: /// Example: 1.23
/// Constraints: No constraints specified.
func (rcv *SeradataSpacecraftDetails_Full) InsurancePremiumAtLaunch() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(70))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Insurance premium at launch in M USD.
/// Example: /// Example: 1.23
/// Constraints: No constraints specified.
func (rcv *SeradataSpacecraftDetails_Full) MutateInsurancePremiumAtLaunch(n float64) bool {
	return rcv._tab.MutateFloat64Slot(70, n)
}

/// Boolean indicating if the spacecraft insurancePremiumAtLaunch is estimated.
/// Example: /// Example: True
/// Constraints: No constraints specified.
func (rcv *SeradataSpacecraftDetails_Full) InsurancePremiumAtLaunchEstimated() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(72))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

/// Boolean indicating if the spacecraft insurancePremiumAtLaunch is estimated.
/// Example: /// Example: True
/// Constraints: No constraints specified.
func (rcv *SeradataSpacecraftDetails_Full) MutateInsurancePremiumAtLaunchEstimated(n bool) bool {
	return rcv._tab.MutateBoolSlot(72, n)
}

/// Number of humans carried on spacecraft.
/// Example: /// Example: 1
/// Constraints: No constraints specified.
func (rcv *SeradataSpacecraftDetails_Full) NumHumans() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(74))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

/// Number of humans carried on spacecraft.
/// Example: /// Example: 1
/// Constraints: No constraints specified.
func (rcv *SeradataSpacecraftDetails_Full) MutateNumHumans(n int32) bool {
	return rcv._tab.MutateInt32Slot(74, n)
}

/// Cubesat dispenser type.
/// Example: /// Example: cubesatDispenserType
/// Constraints: Minimum length = 0, Maximum length = 64
func (rcv *SeradataSpacecraftDetails_Full) CubesatDispenserType() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(76))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Cubesat dispenser type.
/// Example: /// Example: cubesatDispenserType
/// Constraints: Minimum length = 0, Maximum length = 64
/// Mass category (e.g.  2500 - 3500kg  - Large Satellite, 10 - 100 kg - Microsatellite, etc).
/// Example: /// Example: 2500 - 3500kg  - Large Satellite
/// Constraints: Minimum length = 0, Maximum length = 64
func (rcv *SeradataSpacecraftDetails_Full) MassCategory() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(78))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Mass category (e.g.  2500 - 3500kg  - Large Satellite, 10 - 100 kg - Microsatellite, etc).
/// Example: /// Example: 2500 - 3500kg  - Large Satellite
/// Constraints: Minimum length = 0, Maximum length = 64
/// Seradata launch ID.
/// Example: /// Example: 11573
/// Constraints: Minimum length = 0, Maximum length = 32
func (rcv *SeradataSpacecraftDetails_Full) LaunchId() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(80))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Seradata launch ID.
/// Example: /// Example: 11573
/// Constraints: Minimum length = 0, Maximum length = 32
/// Seradata launch ID.
/// Example: /// Example: 123
/// Constraints: Minimum length = 0, Maximum length = 36
func (rcv *SeradataSpacecraftDetails_Full) LaunchVehicleId() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(82))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Seradata launch ID.
/// Example: /// Example: 123
/// Constraints: Minimum length = 0, Maximum length = 36
/// Seradata launch vehicle family.
/// Example: /// Example: launchProviderFlightNumber
/// Constraints: Minimum length = 0, Maximum length = 64
func (rcv *SeradataSpacecraftDetails_Full) LaunchProviderFlightNumber() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(84))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Seradata launch vehicle family.
/// Example: /// Example: launchProviderFlightNumber
/// Constraints: Minimum length = 0, Maximum length = 64
/// Launch Site Name.
/// Example: /// Example: launchSiteName
/// Constraints: Minimum length = 0, Maximum length = 64
func (rcv *SeradataSpacecraftDetails_Full) LaunchSiteName() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(86))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Launch Site Name.
/// Example: /// Example: launchSiteName
/// Constraints: Minimum length = 0, Maximum length = 64
/// Seradata Launch Site ID.
/// Example: /// Example: 28
/// Constraints: Minimum length = 0, Maximum length = 32
func (rcv *SeradataSpacecraftDetails_Full) LaunchSiteId() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(88))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Seradata Launch Site ID.
/// Example: /// Example: 28
/// Constraints: Minimum length = 0, Maximum length = 32
/// Seradata launch country.
/// Example: /// Example: USA
/// Constraints: Minimum length = 0, Maximum length = 32
func (rcv *SeradataSpacecraftDetails_Full) LaunchCountry() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(90))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Seradata launch country.
/// Example: /// Example: USA
/// Constraints: Minimum length = 0, Maximum length = 32
/// Seradata launch provider.
/// Example: /// Example: launchProvider
/// Constraints: Minimum length = 0, Maximum length = 128
func (rcv *SeradataSpacecraftDetails_Full) LaunchProvider() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(92))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Seradata launch provider.
/// Example: /// Example: launchProvider
/// Constraints: Minimum length = 0, Maximum length = 128
/// Seradata launch provider country.
/// Example: /// Example: USA
/// Constraints: Minimum length = 0, Maximum length = 32
func (rcv *SeradataSpacecraftDetails_Full) LaunchProviderCountry() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(94))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Seradata launch provider country.
/// Example: /// Example: USA
/// Constraints: Minimum length = 0, Maximum length = 32
/// Boolean indicating if the launch was commercial.
/// Example: /// Example: True
/// Constraints: No constraints specified.
func (rcv *SeradataSpacecraftDetails_Full) CommercialLaunch() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(96))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

/// Boolean indicating if the launch was commercial.
/// Example: /// Example: True
/// Constraints: No constraints specified.
func (rcv *SeradataSpacecraftDetails_Full) MutateCommercialLaunch(n bool) bool {
	return rcv._tab.MutateBoolSlot(96, n)
}

/// Seradata launch type (e.g. Launched, Future, etc).
/// Example: /// Example: Future
/// Constraints: Minimum length = 0, Maximum length = 32
func (rcv *SeradataSpacecraftDetails_Full) LaunchType() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(98))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Seradata launch type (e.g. Launched, Future, etc).
/// Example: /// Example: Future
/// Constraints: Minimum length = 0, Maximum length = 32
/// Seradata launch characteristic (e.g. Expendable, Reusable (New), etc).
/// Example: /// Example: Expendable
/// Constraints: Minimum length = 0, Maximum length = 64
func (rcv *SeradataSpacecraftDetails_Full) LaunchCharacteristic() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(100))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Seradata launch characteristic (e.g. Expendable, Reusable (New), etc).
/// Example: /// Example: Expendable
/// Constraints: Minimum length = 0, Maximum length = 64
/// Seradata launch number.
/// Example: /// Example: FN040
/// Constraints: Minimum length = 0, Maximum length = 16
func (rcv *SeradataSpacecraftDetails_Full) LaunchNumber() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(102))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Seradata launch number.
/// Example: /// Example: FN040
/// Constraints: Minimum length = 0, Maximum length = 16
/// Launch date.
/// Example: /// Example: 2018-01-01T16:00:00.123Z
/// Constraints: No constraints specified.
func (rcv *SeradataSpacecraftDetails_Full) LaunchDate() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(104))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Launch date.
/// Example: /// Example: 2018-01-01T16:00:00.123Z
/// Constraints: No constraints specified.
/// Seradata remarks on launch date.
/// Example: /// Example: launchDateRemarks
/// Constraints: Minimum length = 0, Maximum length = 64
func (rcv *SeradataSpacecraftDetails_Full) LaunchDateRemarks() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(106))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Seradata remarks on launch date.
/// Example: /// Example: launchDateRemarks
/// Constraints: Minimum length = 0, Maximum length = 64
/// Youtube link of launch.
/// Example: /// Example: youtubeLaunchLink
/// Constraints: Minimum length = 0, Maximum length = 32
func (rcv *SeradataSpacecraftDetails_Full) YoutubeLaunchLink() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(108))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Youtube link of launch.
/// Example: /// Example: youtubeLaunchLink
/// Constraints: Minimum length = 0, Maximum length = 32
/// Spacecraft status (e.g. Inactive - Retired, Inactive - Re-entered, Active, etc).
/// Example: /// Example: Inactive - Retired
/// Constraints: Minimum length = 0, Maximum length = 64
func (rcv *SeradataSpacecraftDetails_Full) Status() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(110))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Spacecraft status (e.g. Inactive - Retired, Inactive - Re-entered, Active, etc).
/// Example: /// Example: Inactive - Retired
/// Constraints: Minimum length = 0, Maximum length = 64
/// Spacecraft owner name.
/// Example: /// Example: owner
/// Constraints: Minimum length = 0, Maximum length = 128
func (rcv *SeradataSpacecraftDetails_Full) Owner() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(112))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Spacecraft owner name.
/// Example: /// Example: owner
/// Constraints: Minimum length = 0, Maximum length = 128
/// Spacecraft owner country.
/// Example: /// Example: USA
/// Constraints: Minimum length = 0, Maximum length = 64
func (rcv *SeradataSpacecraftDetails_Full) OwnerCountry() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(114))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Spacecraft owner country.
/// Example: /// Example: USA
/// Constraints: Minimum length = 0, Maximum length = 64
/// Spacecraft operator name.
/// Example: /// Example: operator
/// Constraints: Minimum length = 0, Maximum length = 128
func (rcv *SeradataSpacecraftDetails_Full) Operator() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(116))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Spacecraft operator name.
/// Example: /// Example: operator
/// Constraints: Minimum length = 0, Maximum length = 128
/// Spacecraft operator country.
/// Example: /// Example: USA
/// Constraints: Minimum length = 0, Maximum length = 64
func (rcv *SeradataSpacecraftDetails_Full) OperatorCountry() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(118))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Spacecraft operator country.
/// Example: /// Example: USA
/// Constraints: Minimum length = 0, Maximum length = 64
/// Boolean indicating if the spacecraft was leased.
/// Example: /// Example: True
/// Constraints: No constraints specified.
func (rcv *SeradataSpacecraftDetails_Full) Leased() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(120))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

/// Boolean indicating if the spacecraft was leased.
/// Example: /// Example: True
/// Constraints: No constraints specified.
func (rcv *SeradataSpacecraftDetails_Full) MutateLeased(n bool) bool {
	return rcv._tab.MutateBoolSlot(120, n)
}

/// Spacecraft order date.
/// Example: /// Example: 2018-01-01T16:00:00.123Z
/// Constraints: No constraints specified.
func (rcv *SeradataSpacecraftDetails_Full) OrderDate() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(122))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Spacecraft order date.
/// Example: /// Example: 2018-01-01T16:00:00.123Z
/// Constraints: No constraints specified.
/// Total capability lost as a percent fraction.
/// Example: /// Example: 1.23
/// Constraints: No constraints specified.
func (rcv *SeradataSpacecraftDetails_Full) CapabilityLost() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(124))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Total capability lost as a percent fraction.
/// Example: /// Example: 1.23
/// Constraints: No constraints specified.
func (rcv *SeradataSpacecraftDetails_Full) MutateCapabilityLost(n float64) bool {
	return rcv._tab.MutateFloat64Slot(124, n)
}

/// Total capacity lost as a percent fraction.
/// Example: /// Example: 1.23
/// Constraints: No constraints specified.
func (rcv *SeradataSpacecraftDetails_Full) CapacityLost() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(126))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Total capacity lost as a percent fraction.
/// Example: /// Example: 1.23
/// Constraints: No constraints specified.
func (rcv *SeradataSpacecraftDetails_Full) MutateCapacityLost(n float64) bool {
	return rcv._tab.MutateFloat64Slot(126, n)
}

/// Spacecraft primary mission and group.
/// Example: /// Example: primaryMissionGroup
/// Constraints: Minimum length = 0, Maximum length = 64
func (rcv *SeradataSpacecraftDetails_Full) PrimaryMissionGroup() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(128))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Spacecraft primary mission and group.
/// Example: /// Example: primaryMissionGroup
/// Constraints: Minimum length = 0, Maximum length = 64
/// Spacecraft additional missions and groups.
/// Example: /// Example: additionalMissionsGroups
/// Constraints: Minimum length = 0, Maximum length = 256
func (rcv *SeradataSpacecraftDetails_Full) AdditionalMissionsGroups() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(130))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Spacecraft additional missions and groups.
/// Example: /// Example: additionalMissionsGroups
/// Constraints: Minimum length = 0, Maximum length = 256
/// Number of insurance claims for this spacecraft.
/// Example: /// Example: 1
/// Constraints: No constraints specified.
func (rcv *SeradataSpacecraftDetails_Full) TotalClaims() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(132))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

/// Number of insurance claims for this spacecraft.
/// Example: /// Example: 1
/// Constraints: No constraints specified.
func (rcv *SeradataSpacecraftDetails_Full) MutateTotalClaims(n int32) bool {
	return rcv._tab.MutateInt32Slot(132, n)
}

/// Number of injuries related to this spacecraft.
/// Example: /// Example: 1
/// Constraints: No constraints specified.
func (rcv *SeradataSpacecraftDetails_Full) TotalInjuries() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(134))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

/// Number of injuries related to this spacecraft.
/// Example: /// Example: 1
/// Constraints: No constraints specified.
func (rcv *SeradataSpacecraftDetails_Full) MutateTotalInjuries(n int32) bool {
	return rcv._tab.MutateInt32Slot(134, n)
}

/// Number of fatalities related to this spacecraft.
/// Example: /// Example: 1
/// Constraints: No constraints specified.
func (rcv *SeradataSpacecraftDetails_Full) TotalFatalities() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(136))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

/// Number of fatalities related to this spacecraft.
/// Example: /// Example: 1
/// Constraints: No constraints specified.
func (rcv *SeradataSpacecraftDetails_Full) MutateTotalFatalities(n int32) bool {
	return rcv._tab.MutateInt32Slot(136, n)
}

/// Spacecraft name at launch.
/// Example: /// Example: nameAtLaunch
/// Constraints: Minimum length = 0, Maximum length = 64
func (rcv *SeradataSpacecraftDetails_Full) NameAtLaunch() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(138))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Spacecraft name at launch.
/// Example: /// Example: nameAtLaunch
/// Constraints: Minimum length = 0, Maximum length = 64
/// Spacecraft Bus ID.
/// Example: /// Example: BUS-ID
/// Constraints: Minimum length = 0, Maximum length = 36
func (rcv *SeradataSpacecraftDetails_Full) BusId() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(140))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Spacecraft Bus ID.
/// Example: /// Example: BUS-ID
/// Constraints: Minimum length = 0, Maximum length = 36
/// Current age in years.
/// Example: /// Example: 5.898630136986301
/// Constraints: No constraints specified.
func (rcv *SeradataSpacecraftDetails_Full) CurrentAge() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(142))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Current age in years.
/// Example: /// Example: 5.898630136986301
/// Constraints: No constraints specified.
func (rcv *SeradataSpacecraftDetails_Full) MutateCurrentAge(n float64) bool {
	return rcv._tab.MutateFloat64Slot(142, n)
}

/// Spacecraft life lost as a percent fraction.
/// Example: /// Example: 1.23
/// Constraints: No constraints specified.
func (rcv *SeradataSpacecraftDetails_Full) LifeLost() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(144))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Spacecraft life lost as a percent fraction.
/// Example: /// Example: 1.23
/// Constraints: No constraints specified.
func (rcv *SeradataSpacecraftDetails_Full) MutateLifeLost(n float64) bool {
	return rcv._tab.MutateFloat64Slot(144, n)
}

/// WGS84 longitude of the spacecraft’s latest GEO position, in degrees. -180 to 180 degrees (negative values west of Prime Meridian).
/// Example: /// Example: -8.23
/// Constraints: No constraints specified.
func (rcv *SeradataSpacecraftDetails_Full) GeoPosition() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(146))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// WGS84 longitude of the spacecraft’s latest GEO position, in degrees. -180 to 180 degrees (negative values west of Prime Meridian).
/// Example: /// Example: -8.23
/// Constraints: No constraints specified.
func (rcv *SeradataSpacecraftDetails_Full) MutateGeoPosition(n float64) bool {
	return rcv._tab.MutateFloat64Slot(146, n)
}

/// Spacecraft total insurance losses as a fraction.
/// Example: /// Example: 0.393
/// Constraints: No constraints specified.
func (rcv *SeradataSpacecraftDetails_Full) InsuranceLossesTotal() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(148))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Spacecraft total insurance losses as a fraction.
/// Example: /// Example: 0.393
/// Constraints: No constraints specified.
func (rcv *SeradataSpacecraftDetails_Full) MutateInsuranceLossesTotal(n float64) bool {
	return rcv._tab.MutateFloat64Slot(148, n)
}

/// Spacecraft launch arranger.
/// Example: /// Example: launchArranger
/// Constraints: Minimum length = 0, Maximum length = 64
func (rcv *SeradataSpacecraftDetails_Full) LaunchArranger() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(150))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Spacecraft launch arranger.
/// Example: /// Example: launchArranger
/// Constraints: Minimum length = 0, Maximum length = 64
/// Spacecraft launch arranger country.
/// Example: /// Example: USA
/// Constraints: Minimum length = 0, Maximum length = 64
func (rcv *SeradataSpacecraftDetails_Full) LaunchArrangerCountry() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(152))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Spacecraft launch arranger country.
/// Example: /// Example: USA
/// Constraints: Minimum length = 0, Maximum length = 64
/// Spacecraft serial number.
/// Example: /// Example: serialNumber
/// Constraints: Minimum length = 0, Maximum length = 64
func (rcv *SeradataSpacecraftDetails_Full) SerialNumber() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(154))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Spacecraft serial number.
/// Example: /// Example: serialNumber
/// Constraints: Minimum length = 0, Maximum length = 64
/// Spacecraft program name.
/// Example: /// Example: programName
/// Constraints: Minimum length = 0, Maximum length = 64
func (rcv *SeradataSpacecraftDetails_Full) ProgramName() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(156))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Spacecraft program name.
/// Example: /// Example: programName
/// Constraints: Minimum length = 0, Maximum length = 64
/// Spacecraft reused hull name.
/// Example: /// Example: reusedHullName
/// Constraints: Minimum length = 0, Maximum length = 64
func (rcv *SeradataSpacecraftDetails_Full) ReusedHullName() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(158))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Spacecraft reused hull name.
/// Example: /// Example: reusedHullName
/// Constraints: Minimum length = 0, Maximum length = 64
/// Spacecraft date of observation.
/// Example: /// Example: 2018-01-01T16:00:00.123Z
/// Constraints: No constraints specified.
func (rcv *SeradataSpacecraftDetails_Full) DateOfObservation() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(160))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Spacecraft date of observation.
/// Example: /// Example: 2018-01-01T16:00:00.123Z
/// Constraints: No constraints specified.
/// Spacecraft latest latitude in degrees.
/// Example: /// Example: 1.23
/// Constraints: No constraints specified.
func (rcv *SeradataSpacecraftDetails_Full) Lat() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(162))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Spacecraft latest latitude in degrees.
/// Example: /// Example: 1.23
/// Constraints: No constraints specified.
func (rcv *SeradataSpacecraftDetails_Full) MutateLat(n float64) bool {
	return rcv._tab.MutateFloat64Slot(162, n)
}

/// Spacecraft latest longitude in degrees.
/// Example: /// Example: 1.23
/// Constraints: No constraints specified.
func (rcv *SeradataSpacecraftDetails_Full) Lon() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(164))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Spacecraft latest longitude in degrees.
/// Example: /// Example: 1.23
/// Constraints: No constraints specified.
func (rcv *SeradataSpacecraftDetails_Full) MutateLon(n float64) bool {
	return rcv._tab.MutateFloat64Slot(164, n)
}

/// Spacecraft latest altitude in km.
/// Example: /// Example: 36036.6330576414
/// Constraints: No constraints specified.
func (rcv *SeradataSpacecraftDetails_Full) Altitude() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(166))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Spacecraft latest altitude in km.
/// Example: /// Example: 36036.6330576414
/// Constraints: No constraints specified.
func (rcv *SeradataSpacecraftDetails_Full) MutateAltitude(n float64) bool {
	return rcv._tab.MutateFloat64Slot(166, n)
}

/// Spacecraft collision risk 1mm sqm latest.
/// Example: /// Example: 1.33
/// Constraints: No constraints specified.
func (rcv *SeradataSpacecraftDetails_Full) CollisionRiskMm() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(168))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Spacecraft collision risk 1mm sqm latest.
/// Example: /// Example: 1.33
/// Constraints: No constraints specified.
func (rcv *SeradataSpacecraftDetails_Full) MutateCollisionRiskMm(n float64) bool {
	return rcv._tab.MutateFloat64Slot(168, n)
}

/// Spacecraft collision risk 1cm sqm latest.
/// Example: /// Example: 1.43
/// Constraints: No constraints specified.
func (rcv *SeradataSpacecraftDetails_Full) CollisionRiskCm() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(170))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Spacecraft collision risk 1cm sqm latest.
/// Example: /// Example: 1.43
/// Constraints: No constraints specified.
func (rcv *SeradataSpacecraftDetails_Full) MutateCollisionRiskCm(n float64) bool {
	return rcv._tab.MutateFloat64Slot(170, n)
}

/// Spacecraft quantity.
/// Example: /// Example: 1
/// Constraints: No constraints specified.
func (rcv *SeradataSpacecraftDetails_Full) Quantity() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(172))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

/// Spacecraft quantity.
/// Example: /// Example: 1
/// Constraints: No constraints specified.
func (rcv *SeradataSpacecraftDetails_Full) MutateQuantity(n int32) bool {
	return rcv._tab.MutateInt32Slot(172, n)
}

/// Spacecraft reusable flights.
/// Example: /// Example: reusableFlights
/// Constraints: Minimum length = 0, Maximum length = 64
func (rcv *SeradataSpacecraftDetails_Full) ReusableFlights() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(174))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Spacecraft reusable flights.
/// Example: /// Example: reusableFlights
/// Constraints: Minimum length = 0, Maximum length = 64
/// Notes on the spacecraft.
/// Example: /// Example: Sample Notes
/// Constraints: Minimum length = 0, Maximum length = 2147483647
func (rcv *SeradataSpacecraftDetails_Full) Notes() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(176))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Notes on the spacecraft.
/// Example: /// Example: Sample Notes
/// Constraints: Minimum length = 0, Maximum length = 2147483647
/// Insurance notes for the spacecraft.
/// Example: /// Example: Sample Notes
/// Constraints: Minimum length = 0, Maximum length = 2147483647
func (rcv *SeradataSpacecraftDetails_Full) InsuranceNotes() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(178))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Insurance notes for the spacecraft.
/// Example: /// Example: Sample Notes
/// Constraints: Minimum length = 0, Maximum length = 2147483647
/// Insurance notes for the spacecraft.
/// Example: /// Example: Sample Notes
/// Constraints: Minimum length = 0, Maximum length = 2147483647
func (rcv *SeradataSpacecraftDetails_Full) LaunchNotes() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(180))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Insurance notes for the spacecraft.
/// Example: /// Example: Sample Notes
/// Constraints: Minimum length = 0, Maximum length = 2147483647
/// Source of the data.
/// Example: /// Example: Bluestaq
/// Constraints: Minimum length = 1, Maximum length = 64
func (rcv *SeradataSpacecraftDetails_Full) Source() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(182))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Source of the data.
/// Example: /// Example: Bluestaq
/// Constraints: Minimum length = 1, Maximum length = 64
/// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
/// Example: /// Example: THIRD_PARTY_DATASOURCE
/// Constraints: Minimum length = 0, Maximum length = 64
func (rcv *SeradataSpacecraftDetails_Full) Origin() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(184))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
/// Example: /// Example: THIRD_PARTY_DATASOURCE
/// Constraints: Minimum length = 0, Maximum length = 64
/// The originating source network on which this record was created, auto-populated by the system.
/// Example: /// Example: ORIG
/// Constraints: Minimum length = 1, Maximum length = 32
func (rcv *SeradataSpacecraftDetails_Full) OrigNetwork() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(186))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The originating source network on which this record was created, auto-populated by the system.
/// Example: /// Example: ORIG
/// Constraints: Minimum length = 1, Maximum length = 32
/// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
/// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
/// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
/// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
/// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
/// Example: /// Example: TEST
/// Constraints: Minimum length = 1, Maximum length = 32
func (rcv *SeradataSpacecraftDetails_Full) DataMode() SeradataSpacecraftDetails_Full_dataMode_Enum {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(188))
	if o != 0 {
		return SeradataSpacecraftDetails_Full_dataMode_Enum(rcv._tab.GetInt8(o + rcv._tab.Pos))
	}
	return 0
}

/// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
/// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
/// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
/// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
/// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
/// Example: /// Example: TEST
/// Constraints: Minimum length = 1, Maximum length = 32
func (rcv *SeradataSpacecraftDetails_Full) MutateDataMode(n SeradataSpacecraftDetails_Full_dataMode_Enum) bool {
	return rcv._tab.MutateInt8Slot(188, int8(n))
}

/// Time the row was created in the database, auto-populated by the system.
/// Example: /// Example: 2018-01-01T16:00:00.123Z
/// Constraints: No constraints specified.
func (rcv *SeradataSpacecraftDetails_Full) CreatedAt() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(190))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Time the row was created in the database, auto-populated by the system.
/// Example: /// Example: 2018-01-01T16:00:00.123Z
/// Constraints: No constraints specified.
/// Application user who created the row in the database, auto-populated by the system.
/// Example: /// Example: some.user
/// Constraints: Minimum length = 1, Maximum length = 64
func (rcv *SeradataSpacecraftDetails_Full) CreatedBy() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(192))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Application user who created the row in the database, auto-populated by the system.
/// Example: /// Example: some.user
/// Constraints: Minimum length = 1, Maximum length = 64
/// Time the row was last updated in the database, auto-populated by the system.
/// Example: /// Example: 2018-01-01T16:00:00.123Z
/// Constraints: No constraints specified.
func (rcv *SeradataSpacecraftDetails_Full) UpdatedAt() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(194))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Time the row was last updated in the database, auto-populated by the system.
/// Example: /// Example: 2018-01-01T16:00:00.123Z
/// Constraints: No constraints specified.
/// Application user who updated the row in the database, auto-populated by the system.
/// Example: /// Example: some.user
/// Constraints: Minimum length = 1, Maximum length = 64
func (rcv *SeradataSpacecraftDetails_Full) UpdatedBy() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(196))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Application user who updated the row in the database, auto-populated by the system.
/// Example: /// Example: some.user
/// Constraints: Minimum length = 1, Maximum length = 64
/// Read-only details of the SeradataSigIntPayload object, only used during detail queries (not to be provided on create/update operations).
/// Example: /// Example: No example provided.
/// Constraints: No constraints specified.
func (rcv *SeradataSpacecraftDetails_Full) SeradataSigIntPayload(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(198))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *SeradataSpacecraftDetails_Full) SeradataSigIntPayloadLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(198))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

/// Read-only details of the SeradataSigIntPayload object, only used during detail queries (not to be provided on create/update operations).
/// Example: /// Example: No example provided.
/// Constraints: No constraints specified.
/// Read-only details of the SeradataRadarPayload object, only used during detail queries (not to be provided on create/update operations).
/// Example: /// Example: No example provided.
/// Constraints: No constraints specified.
func (rcv *SeradataSpacecraftDetails_Full) SeradataRadarPayload(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(200))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *SeradataSpacecraftDetails_Full) SeradataRadarPayloadLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(200))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

/// Read-only details of the SeradataRadarPayload object, only used during detail queries (not to be provided on create/update operations).
/// Example: /// Example: No example provided.
/// Constraints: No constraints specified.
/// Read-only details of the SeradataNavigation object, only used during detail queries (not to be provided on create/update operations).
/// Example: /// Example: No example provided.
/// Constraints: No constraints specified.
func (rcv *SeradataSpacecraftDetails_Full) SeradataNavigation(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(202))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *SeradataSpacecraftDetails_Full) SeradataNavigationLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(202))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

/// Read-only details of the SeradataNavigation object, only used during detail queries (not to be provided on create/update operations).
/// Example: /// Example: No example provided.
/// Constraints: No constraints specified.
/// Read-only details of the SeradataOpticalPayload object, only used during detail queries (not to be provided on create/update operations).
/// Example: /// Example: No example provided.
/// Constraints: No constraints specified.
func (rcv *SeradataSpacecraftDetails_Full) SeradataOpticalPayload(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(204))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *SeradataSpacecraftDetails_Full) SeradataOpticalPayloadLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(204))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

/// Read-only details of the SeradataOpticalPayload object, only used during detail queries (not to be provided on create/update operations).
/// Example: /// Example: No example provided.
/// Constraints: No constraints specified.
/// Read-only details of the SeradataEarlyWarning object, only used during detail queries (not to be provided on create/update operations).
/// Example: /// Example: No example provided.
/// Constraints: No constraints specified.
func (rcv *SeradataSpacecraftDetails_Full) SeradataEarlyWarning(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(206))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *SeradataSpacecraftDetails_Full) SeradataEarlyWarningLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(206))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

/// Read-only details of the SeradataEarlyWarning object, only used during detail queries (not to be provided on create/update operations).
/// Example: /// Example: No example provided.
/// Constraints: No constraints specified.
/// Read-only details of the Scientific object, only used during detail queries (not to be provided on create/update operations).
/// Example: /// Example: No example provided.
/// Constraints: No constraints specified.
func (rcv *SeradataSpacecraftDetails_Full) Scientific(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(208))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *SeradataSpacecraftDetails_Full) ScientificLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(208))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

/// Read-only details of the Scientific object, only used during detail queries (not to be provided on create/update operations).
/// Example: /// Example: No example provided.
/// Constraints: No constraints specified.
/// Read-only details of the SeradataCommDetails object, only used during detail queries (not to be provided on create/update operations).
/// Example: /// Example: No example provided.
/// Constraints: No constraints specified.
func (rcv *SeradataSpacecraftDetails_Full) SeradataCommDetails(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(210))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *SeradataSpacecraftDetails_Full) SeradataCommDetailsLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(210))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

/// Read-only details of the SeradataCommDetails object, only used during detail queries (not to be provided on create/update operations).
/// Example: /// Example: No example provided.
/// Constraints: No constraints specified.
/// No description provided.
/// Example: /// Example: No example provided.
/// Constraints: No constraints specified.
func (rcv *SeradataSpacecraftDetails_Full) OnOrbit() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(212))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// No description provided.
/// Example: /// Example: No example provided.
/// Constraints: No constraints specified.
func SeradataSpacecraftDetails_FullStart(builder *flatbuffers.Builder) {
	builder.StartObject(105)
}
func SeradataSpacecraftDetails_FullAddId(builder *flatbuffers.Builder, id flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(id), 0)
}
func SeradataSpacecraftDetails_FullAddIdOnOrbit(builder *flatbuffers.Builder, idOnOrbit flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(idOnOrbit), 0)
}
func SeradataSpacecraftDetails_FullAddClassificationMarking(builder *flatbuffers.Builder, classificationMarking flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(classificationMarking), 0)
}
func SeradataSpacecraftDetails_FullAddName(builder *flatbuffers.Builder, name flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(3, flatbuffers.UOffsetT(name), 0)
}
func SeradataSpacecraftDetails_FullAddDescription(builder *flatbuffers.Builder, description flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(4, flatbuffers.UOffsetT(description), 0)
}
func SeradataSpacecraftDetails_FullAddIntlNumber(builder *flatbuffers.Builder, intlNumber flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(5, flatbuffers.UOffsetT(intlNumber), 0)
}
func SeradataSpacecraftDetails_FullAddSector(builder *flatbuffers.Builder, sector flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(6, flatbuffers.UOffsetT(sector), 0)
}
func SeradataSpacecraftDetails_FullAddApogee(builder *flatbuffers.Builder, apogee float64) {
	builder.PrependFloat64Slot(7, apogee, 0.0)
}
func SeradataSpacecraftDetails_FullAddPerigee(builder *flatbuffers.Builder, perigee float64) {
	builder.PrependFloat64Slot(8, perigee, 0.0)
}
func SeradataSpacecraftDetails_FullAddPeriod(builder *flatbuffers.Builder, period float64) {
	builder.PrependFloat64Slot(9, period, 0.0)
}
func SeradataSpacecraftDetails_FullAddInclination(builder *flatbuffers.Builder, inclination float64) {
	builder.PrependFloat64Slot(10, inclination, 0.0)
}
func SeradataSpacecraftDetails_FullAddPrimeManufacturerOrgId(builder *flatbuffers.Builder, primeManufacturerOrgId flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(11, flatbuffers.UOffsetT(primeManufacturerOrgId), 0)
}
func SeradataSpacecraftDetails_FullAddStabilizer(builder *flatbuffers.Builder, stabilizer flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(12, flatbuffers.UOffsetT(stabilizer), 0)
}
func SeradataSpacecraftDetails_FullAddDesignLife(builder *flatbuffers.Builder, designLife int32) {
	builder.PrependInt32Slot(13, designLife, 0)
}
func SeradataSpacecraftDetails_FullAddExpectedLife(builder *flatbuffers.Builder, expectedLife int32) {
	builder.PrependInt32Slot(14, expectedLife, 0)
}
func SeradataSpacecraftDetails_FullAddInsuredAtLaunch(builder *flatbuffers.Builder, insuredAtLaunch bool) {
	builder.PrependBoolSlot(15, insuredAtLaunch, false)
}
func SeradataSpacecraftDetails_FullAddLaunchMass(builder *flatbuffers.Builder, launchMass float64) {
	builder.PrependFloat64Slot(16, launchMass, 0.0)
}
func SeradataSpacecraftDetails_FullAddDryMass(builder *flatbuffers.Builder, dryMass float64) {
	builder.PrependFloat64Slot(17, dryMass, 0.0)
}
func SeradataSpacecraftDetails_FullAddCatalogNumber(builder *flatbuffers.Builder, catalogNumber int32) {
	builder.PrependInt32Slot(18, catalogNumber, 0)
}
func SeradataSpacecraftDetails_FullAddTotalPayloadPower(builder *flatbuffers.Builder, totalPayloadPower float64) {
	builder.PrependFloat64Slot(19, totalPayloadPower, 0.0)
}
func SeradataSpacecraftDetails_FullAddConstellation(builder *flatbuffers.Builder, constellation flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(20, flatbuffers.UOffsetT(constellation), 0)
}
func SeradataSpacecraftDetails_FullAddOrbitCategory(builder *flatbuffers.Builder, orbitCategory flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(21, flatbuffers.UOffsetT(orbitCategory), 0)
}
func SeradataSpacecraftDetails_FullAddOrbitSubCategory(builder *flatbuffers.Builder, orbitSubCategory flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(22, flatbuffers.UOffsetT(orbitSubCategory), 0)
}
func SeradataSpacecraftDetails_FullAddLaunchCost(builder *flatbuffers.Builder, launchCost float64) {
	builder.PrependFloat64Slot(23, launchCost, 0.0)
}
func SeradataSpacecraftDetails_FullAddLaunchCostEstimated(builder *flatbuffers.Builder, launchCostEstimated bool) {
	builder.PrependBoolSlot(24, launchCostEstimated, false)
}
func SeradataSpacecraftDetails_FullAddCostEstimated(builder *flatbuffers.Builder, costEstimated bool) {
	builder.PrependBoolSlot(25, costEstimated, false)
}
func SeradataSpacecraftDetails_FullAddNewCost(builder *flatbuffers.Builder, newCost float64) {
	builder.PrependFloat64Slot(26, newCost, 0.0)
}
func SeradataSpacecraftDetails_FullAddCombinedNewCost(builder *flatbuffers.Builder, combinedNewCost float64) {
	builder.PrependFloat64Slot(27, combinedNewCost, 0.0)
}
func SeradataSpacecraftDetails_FullAddCombinedCostEstimated(builder *flatbuffers.Builder, combinedCostEstimated bool) {
	builder.PrependBoolSlot(28, combinedCostEstimated, false)
}
func SeradataSpacecraftDetails_FullAddInsuredValueAtLaunch(builder *flatbuffers.Builder, insuredValueAtLaunch float64) {
	builder.PrependFloat64Slot(29, insuredValueAtLaunch, 0.0)
}
func SeradataSpacecraftDetails_FullAddInsuredValueLaunchEstimated(builder *flatbuffers.Builder, insuredValueLaunchEstimated bool) {
	builder.PrependBoolSlot(30, insuredValueLaunchEstimated, false)
}
func SeradataSpacecraftDetails_FullAddAnnualInsuredDepreciationFactor(builder *flatbuffers.Builder, annualInsuredDepreciationFactor float64) {
	builder.PrependFloat64Slot(31, annualInsuredDepreciationFactor, 0.0)
}
func SeradataSpacecraftDetails_FullAddAnnualInsuredDepreciationFactorEstimated(builder *flatbuffers.Builder, annualInsuredDepreciationFactorEstimated bool) {
	builder.PrependBoolSlot(32, annualInsuredDepreciationFactorEstimated, false)
}
func SeradataSpacecraftDetails_FullAddInsurancePremiumAtLaunch(builder *flatbuffers.Builder, insurancePremiumAtLaunch float64) {
	builder.PrependFloat64Slot(33, insurancePremiumAtLaunch, 0.0)
}
func SeradataSpacecraftDetails_FullAddInsurancePremiumAtLaunchEstimated(builder *flatbuffers.Builder, insurancePremiumAtLaunchEstimated bool) {
	builder.PrependBoolSlot(34, insurancePremiumAtLaunchEstimated, false)
}
func SeradataSpacecraftDetails_FullAddNumHumans(builder *flatbuffers.Builder, numHumans int32) {
	builder.PrependInt32Slot(35, numHumans, 0)
}
func SeradataSpacecraftDetails_FullAddCubesatDispenserType(builder *flatbuffers.Builder, cubesatDispenserType flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(36, flatbuffers.UOffsetT(cubesatDispenserType), 0)
}
func SeradataSpacecraftDetails_FullAddMassCategory(builder *flatbuffers.Builder, massCategory flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(37, flatbuffers.UOffsetT(massCategory), 0)
}
func SeradataSpacecraftDetails_FullAddLaunchId(builder *flatbuffers.Builder, launchId flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(38, flatbuffers.UOffsetT(launchId), 0)
}
func SeradataSpacecraftDetails_FullAddLaunchVehicleId(builder *flatbuffers.Builder, launchVehicleId flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(39, flatbuffers.UOffsetT(launchVehicleId), 0)
}
func SeradataSpacecraftDetails_FullAddLaunchProviderFlightNumber(builder *flatbuffers.Builder, launchProviderFlightNumber flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(40, flatbuffers.UOffsetT(launchProviderFlightNumber), 0)
}
func SeradataSpacecraftDetails_FullAddLaunchSiteName(builder *flatbuffers.Builder, launchSiteName flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(41, flatbuffers.UOffsetT(launchSiteName), 0)
}
func SeradataSpacecraftDetails_FullAddLaunchSiteId(builder *flatbuffers.Builder, launchSiteId flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(42, flatbuffers.UOffsetT(launchSiteId), 0)
}
func SeradataSpacecraftDetails_FullAddLaunchCountry(builder *flatbuffers.Builder, launchCountry flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(43, flatbuffers.UOffsetT(launchCountry), 0)
}
func SeradataSpacecraftDetails_FullAddLaunchProvider(builder *flatbuffers.Builder, launchProvider flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(44, flatbuffers.UOffsetT(launchProvider), 0)
}
func SeradataSpacecraftDetails_FullAddLaunchProviderCountry(builder *flatbuffers.Builder, launchProviderCountry flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(45, flatbuffers.UOffsetT(launchProviderCountry), 0)
}
func SeradataSpacecraftDetails_FullAddCommercialLaunch(builder *flatbuffers.Builder, commercialLaunch bool) {
	builder.PrependBoolSlot(46, commercialLaunch, false)
}
func SeradataSpacecraftDetails_FullAddLaunchType(builder *flatbuffers.Builder, launchType flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(47, flatbuffers.UOffsetT(launchType), 0)
}
func SeradataSpacecraftDetails_FullAddLaunchCharacteristic(builder *flatbuffers.Builder, launchCharacteristic flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(48, flatbuffers.UOffsetT(launchCharacteristic), 0)
}
func SeradataSpacecraftDetails_FullAddLaunchNumber(builder *flatbuffers.Builder, launchNumber flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(49, flatbuffers.UOffsetT(launchNumber), 0)
}
func SeradataSpacecraftDetails_FullAddLaunchDate(builder *flatbuffers.Builder, launchDate flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(50, flatbuffers.UOffsetT(launchDate), 0)
}
func SeradataSpacecraftDetails_FullAddLaunchDateRemarks(builder *flatbuffers.Builder, launchDateRemarks flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(51, flatbuffers.UOffsetT(launchDateRemarks), 0)
}
func SeradataSpacecraftDetails_FullAddYoutubeLaunchLink(builder *flatbuffers.Builder, youtubeLaunchLink flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(52, flatbuffers.UOffsetT(youtubeLaunchLink), 0)
}
func SeradataSpacecraftDetails_FullAddStatus(builder *flatbuffers.Builder, status flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(53, flatbuffers.UOffsetT(status), 0)
}
func SeradataSpacecraftDetails_FullAddOwner(builder *flatbuffers.Builder, owner flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(54, flatbuffers.UOffsetT(owner), 0)
}
func SeradataSpacecraftDetails_FullAddOwnerCountry(builder *flatbuffers.Builder, ownerCountry flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(55, flatbuffers.UOffsetT(ownerCountry), 0)
}
func SeradataSpacecraftDetails_FullAddOperator(builder *flatbuffers.Builder, operator flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(56, flatbuffers.UOffsetT(operator), 0)
}
func SeradataSpacecraftDetails_FullAddOperatorCountry(builder *flatbuffers.Builder, operatorCountry flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(57, flatbuffers.UOffsetT(operatorCountry), 0)
}
func SeradataSpacecraftDetails_FullAddLeased(builder *flatbuffers.Builder, leased bool) {
	builder.PrependBoolSlot(58, leased, false)
}
func SeradataSpacecraftDetails_FullAddOrderDate(builder *flatbuffers.Builder, orderDate flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(59, flatbuffers.UOffsetT(orderDate), 0)
}
func SeradataSpacecraftDetails_FullAddCapabilityLost(builder *flatbuffers.Builder, capabilityLost float64) {
	builder.PrependFloat64Slot(60, capabilityLost, 0.0)
}
func SeradataSpacecraftDetails_FullAddCapacityLost(builder *flatbuffers.Builder, capacityLost float64) {
	builder.PrependFloat64Slot(61, capacityLost, 0.0)
}
func SeradataSpacecraftDetails_FullAddPrimaryMissionGroup(builder *flatbuffers.Builder, primaryMissionGroup flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(62, flatbuffers.UOffsetT(primaryMissionGroup), 0)
}
func SeradataSpacecraftDetails_FullAddAdditionalMissionsGroups(builder *flatbuffers.Builder, additionalMissionsGroups flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(63, flatbuffers.UOffsetT(additionalMissionsGroups), 0)
}
func SeradataSpacecraftDetails_FullAddTotalClaims(builder *flatbuffers.Builder, totalClaims int32) {
	builder.PrependInt32Slot(64, totalClaims, 0)
}
func SeradataSpacecraftDetails_FullAddTotalInjuries(builder *flatbuffers.Builder, totalInjuries int32) {
	builder.PrependInt32Slot(65, totalInjuries, 0)
}
func SeradataSpacecraftDetails_FullAddTotalFatalities(builder *flatbuffers.Builder, totalFatalities int32) {
	builder.PrependInt32Slot(66, totalFatalities, 0)
}
func SeradataSpacecraftDetails_FullAddNameAtLaunch(builder *flatbuffers.Builder, nameAtLaunch flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(67, flatbuffers.UOffsetT(nameAtLaunch), 0)
}
func SeradataSpacecraftDetails_FullAddBusId(builder *flatbuffers.Builder, busId flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(68, flatbuffers.UOffsetT(busId), 0)
}
func SeradataSpacecraftDetails_FullAddCurrentAge(builder *flatbuffers.Builder, currentAge float64) {
	builder.PrependFloat64Slot(69, currentAge, 0.0)
}
func SeradataSpacecraftDetails_FullAddLifeLost(builder *flatbuffers.Builder, lifeLost float64) {
	builder.PrependFloat64Slot(70, lifeLost, 0.0)
}
func SeradataSpacecraftDetails_FullAddGeoPosition(builder *flatbuffers.Builder, geoPosition float64) {
	builder.PrependFloat64Slot(71, geoPosition, 0.0)
}
func SeradataSpacecraftDetails_FullAddInsuranceLossesTotal(builder *flatbuffers.Builder, insuranceLossesTotal float64) {
	builder.PrependFloat64Slot(72, insuranceLossesTotal, 0.0)
}
func SeradataSpacecraftDetails_FullAddLaunchArranger(builder *flatbuffers.Builder, launchArranger flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(73, flatbuffers.UOffsetT(launchArranger), 0)
}
func SeradataSpacecraftDetails_FullAddLaunchArrangerCountry(builder *flatbuffers.Builder, launchArrangerCountry flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(74, flatbuffers.UOffsetT(launchArrangerCountry), 0)
}
func SeradataSpacecraftDetails_FullAddSerialNumber(builder *flatbuffers.Builder, serialNumber flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(75, flatbuffers.UOffsetT(serialNumber), 0)
}
func SeradataSpacecraftDetails_FullAddProgramName(builder *flatbuffers.Builder, programName flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(76, flatbuffers.UOffsetT(programName), 0)
}
func SeradataSpacecraftDetails_FullAddReusedHullName(builder *flatbuffers.Builder, reusedHullName flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(77, flatbuffers.UOffsetT(reusedHullName), 0)
}
func SeradataSpacecraftDetails_FullAddDateOfObservation(builder *flatbuffers.Builder, dateOfObservation flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(78, flatbuffers.UOffsetT(dateOfObservation), 0)
}
func SeradataSpacecraftDetails_FullAddLat(builder *flatbuffers.Builder, lat float64) {
	builder.PrependFloat64Slot(79, lat, 0.0)
}
func SeradataSpacecraftDetails_FullAddLon(builder *flatbuffers.Builder, lon float64) {
	builder.PrependFloat64Slot(80, lon, 0.0)
}
func SeradataSpacecraftDetails_FullAddAltitude(builder *flatbuffers.Builder, altitude float64) {
	builder.PrependFloat64Slot(81, altitude, 0.0)
}
func SeradataSpacecraftDetails_FullAddCollisionRiskMm(builder *flatbuffers.Builder, collisionRiskMm float64) {
	builder.PrependFloat64Slot(82, collisionRiskMm, 0.0)
}
func SeradataSpacecraftDetails_FullAddCollisionRiskCm(builder *flatbuffers.Builder, collisionRiskCm float64) {
	builder.PrependFloat64Slot(83, collisionRiskCm, 0.0)
}
func SeradataSpacecraftDetails_FullAddQuantity(builder *flatbuffers.Builder, quantity int32) {
	builder.PrependInt32Slot(84, quantity, 0)
}
func SeradataSpacecraftDetails_FullAddReusableFlights(builder *flatbuffers.Builder, reusableFlights flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(85, flatbuffers.UOffsetT(reusableFlights), 0)
}
func SeradataSpacecraftDetails_FullAddNotes(builder *flatbuffers.Builder, notes flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(86, flatbuffers.UOffsetT(notes), 0)
}
func SeradataSpacecraftDetails_FullAddInsuranceNotes(builder *flatbuffers.Builder, insuranceNotes flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(87, flatbuffers.UOffsetT(insuranceNotes), 0)
}
func SeradataSpacecraftDetails_FullAddLaunchNotes(builder *flatbuffers.Builder, launchNotes flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(88, flatbuffers.UOffsetT(launchNotes), 0)
}
func SeradataSpacecraftDetails_FullAddSource(builder *flatbuffers.Builder, source flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(89, flatbuffers.UOffsetT(source), 0)
}
func SeradataSpacecraftDetails_FullAddOrigin(builder *flatbuffers.Builder, origin flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(90, flatbuffers.UOffsetT(origin), 0)
}
func SeradataSpacecraftDetails_FullAddOrigNetwork(builder *flatbuffers.Builder, origNetwork flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(91, flatbuffers.UOffsetT(origNetwork), 0)
}
func SeradataSpacecraftDetails_FullAddDataMode(builder *flatbuffers.Builder, dataMode SeradataSpacecraftDetails_Full_dataMode_Enum) {
	builder.PrependInt8Slot(92, int8(dataMode), 0)
}
func SeradataSpacecraftDetails_FullAddCreatedAt(builder *flatbuffers.Builder, createdAt flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(93, flatbuffers.UOffsetT(createdAt), 0)
}
func SeradataSpacecraftDetails_FullAddCreatedBy(builder *flatbuffers.Builder, createdBy flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(94, flatbuffers.UOffsetT(createdBy), 0)
}
func SeradataSpacecraftDetails_FullAddUpdatedAt(builder *flatbuffers.Builder, updatedAt flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(95, flatbuffers.UOffsetT(updatedAt), 0)
}
func SeradataSpacecraftDetails_FullAddUpdatedBy(builder *flatbuffers.Builder, updatedBy flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(96, flatbuffers.UOffsetT(updatedBy), 0)
}
func SeradataSpacecraftDetails_FullAddSeradataSigIntPayload(builder *flatbuffers.Builder, seradataSigIntPayload flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(97, flatbuffers.UOffsetT(seradataSigIntPayload), 0)
}
func SeradataSpacecraftDetails_FullStartSeradataSigIntPayloadVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func SeradataSpacecraftDetails_FullAddSeradataRadarPayload(builder *flatbuffers.Builder, seradataRadarPayload flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(98, flatbuffers.UOffsetT(seradataRadarPayload), 0)
}
func SeradataSpacecraftDetails_FullStartSeradataRadarPayloadVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func SeradataSpacecraftDetails_FullAddSeradataNavigation(builder *flatbuffers.Builder, seradataNavigation flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(99, flatbuffers.UOffsetT(seradataNavigation), 0)
}
func SeradataSpacecraftDetails_FullStartSeradataNavigationVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func SeradataSpacecraftDetails_FullAddSeradataOpticalPayload(builder *flatbuffers.Builder, seradataOpticalPayload flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(100, flatbuffers.UOffsetT(seradataOpticalPayload), 0)
}
func SeradataSpacecraftDetails_FullStartSeradataOpticalPayloadVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func SeradataSpacecraftDetails_FullAddSeradataEarlyWarning(builder *flatbuffers.Builder, seradataEarlyWarning flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(101, flatbuffers.UOffsetT(seradataEarlyWarning), 0)
}
func SeradataSpacecraftDetails_FullStartSeradataEarlyWarningVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func SeradataSpacecraftDetails_FullAddScientific(builder *flatbuffers.Builder, scientific flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(102, flatbuffers.UOffsetT(scientific), 0)
}
func SeradataSpacecraftDetails_FullStartScientificVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func SeradataSpacecraftDetails_FullAddSeradataCommDetails(builder *flatbuffers.Builder, seradataCommDetails flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(103, flatbuffers.UOffsetT(seradataCommDetails), 0)
}
func SeradataSpacecraftDetails_FullStartSeradataCommDetailsVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func SeradataSpacecraftDetails_FullAddOnOrbit(builder *flatbuffers.Builder, onOrbit flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(104, flatbuffers.UOffsetT(onOrbit), 0)
}
func SeradataSpacecraftDetails_FullEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
