// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package DataLinkOps_Full

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

/// /// Collection of information describing the establishment and detailed operation of tactical data links. There can be 0 to many DataLinkOps collections within the datalink service.
type DataLinkOps_Full struct {
	_tab flatbuffers.Table
}

const DataLinkOps_FullIdentifier = "DATA"

func GetRootAsDataLinkOps_Full(buf []byte, offset flatbuffers.UOffsetT) *DataLinkOps_Full {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &DataLinkOps_Full{}
	x.Init(buf, n+offset)
	return x
}

func FinishDataLinkOps_FullBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	identifierBytes := []byte(DataLinkOps_FullIdentifier)
	builder.FinishWithFileIdentifier(offset, identifierBytes)
}

func DataLinkOps_FullBufferHasIdentifier(buf []byte) bool {
	return flatbuffers.BufferHasIdentifier(buf, DataLinkOps_FullIdentifier)
}

func GetSizePrefixedRootAsDataLinkOps_Full(buf []byte, offset flatbuffers.UOffsetT) *DataLinkOps_Full {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &DataLinkOps_Full{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedDataLinkOps_FullBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	identifierBytes := []byte(DataLinkOps_FullIdentifier)
	builder.FinishSizePrefixedWithFileIdentifier(offset, identifierBytes)
}

func SizePrefixedDataLinkOps_FullBufferHasIdentifier(buf []byte) bool {
	return flatbuffers.SizePrefixedBufferHasIdentifier(buf, DataLinkOps_FullIdentifier)
}

func (rcv *DataLinkOps_Full) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *DataLinkOps_Full) Table() flatbuffers.Table {
	return rcv._tab
}

/// Name of the data link.
/// Example: /// Example: Link-16
/// Constraints: Minimum length = 0, Maximum length = 24
func (rcv *DataLinkOps_Full) LinkName() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Name of the data link.
/// Example: /// Example: Link-16
/// Constraints: Minimum length = 0, Maximum length = 24
/// The start of the effective time period of the data link, in ISO 8601 UTC format with millisecond precision.
/// Example: /// Example: 2024-01-07T13:55:43.123Z
/// Constraints: No constraints specified.
func (rcv *DataLinkOps_Full) LinkStartTime() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The start of the effective time period of the data link, in ISO 8601 UTC format with millisecond precision.
/// Example: /// Example: 2024-01-07T13:55:43.123Z
/// Constraints: No constraints specified.
/// The end of the effective time period of the data link, in ISO 8601 UTC format with millisecond precision.
/// Example: /// Example: 2024-01-08T13:55:43.123Z
/// Constraints: No constraints specified.
func (rcv *DataLinkOps_Full) LinkStopTime() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The end of the effective time period of the data link, in ISO 8601 UTC format with millisecond precision.
/// Example: /// Example: 2024-01-08T13:55:43.123Z
/// Constraints: No constraints specified.
/// A qualifier for the end of the effective time period of this data link, such as AFTER, ASOF, NLT, etc. Used with field linkStopTimeMod to indicate a relative time.
/// Example: /// Example: AFTER
/// Constraints: Minimum length = 0, Maximum length = 8
func (rcv *DataLinkOps_Full) LinkStopTimeMod() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// A qualifier for the end of the effective time period of this data link, such as AFTER, ASOF, NLT, etc. Used with field linkStopTimeMod to indicate a relative time.
/// Example: /// Example: AFTER
/// Constraints: Minimum length = 0, Maximum length = 8
/// Detailed characteristics of the data link.
/// Example: /// Example: Link details
/// Constraints: Minimum length = 0, Maximum length = 3000
func (rcv *DataLinkOps_Full) LinkDetails() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Detailed characteristics of the data link.
/// Example: /// Example: Link details
/// Constraints: Minimum length = 0, Maximum length = 3000
func DataLinkOps_FullStart(builder *flatbuffers.Builder) {
	builder.StartObject(5)
}
func DataLinkOps_FullAddLinkName(builder *flatbuffers.Builder, linkName flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(linkName), 0)
}
func DataLinkOps_FullAddLinkStartTime(builder *flatbuffers.Builder, linkStartTime flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(linkStartTime), 0)
}
func DataLinkOps_FullAddLinkStopTime(builder *flatbuffers.Builder, linkStopTime flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(linkStopTime), 0)
}
func DataLinkOps_FullAddLinkStopTimeMod(builder *flatbuffers.Builder, linkStopTimeMod flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(3, flatbuffers.UOffsetT(linkStopTimeMod), 0)
}
func DataLinkOps_FullAddLinkDetails(builder *flatbuffers.Builder, linkDetails flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(4, flatbuffers.UOffsetT(linkDetails), 0)
}
func DataLinkOps_FullEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
