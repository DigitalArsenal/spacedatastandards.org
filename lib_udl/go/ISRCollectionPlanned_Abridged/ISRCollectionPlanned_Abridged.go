// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package ISRCollectionPlanned_Abridged

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

/// /// Planned start and stop for the collection.
type ISRCollectionPlanned_Abridged struct {
	_tab flatbuffers.Table
}

const ISRCollectionPlanned_AbridgedIdentifier = "ISRC"

func GetRootAsISRCollectionPlanned_Abridged(buf []byte, offset flatbuffers.UOffsetT) *ISRCollectionPlanned_Abridged {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &ISRCollectionPlanned_Abridged{}
	x.Init(buf, n+offset)
	return x
}

func FinishISRCollectionPlanned_AbridgedBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	identifierBytes := []byte(ISRCollectionPlanned_AbridgedIdentifier)
	builder.FinishWithFileIdentifier(offset, identifierBytes)
}

func ISRCollectionPlanned_AbridgedBufferHasIdentifier(buf []byte) bool {
	return flatbuffers.BufferHasIdentifier(buf, ISRCollectionPlanned_AbridgedIdentifier)
}

func GetSizePrefixedRootAsISRCollectionPlanned_Abridged(buf []byte, offset flatbuffers.UOffsetT) *ISRCollectionPlanned_Abridged {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &ISRCollectionPlanned_Abridged{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedISRCollectionPlanned_AbridgedBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	identifierBytes := []byte(ISRCollectionPlanned_AbridgedIdentifier)
	builder.FinishSizePrefixedWithFileIdentifier(offset, identifierBytes)
}

func SizePrefixedISRCollectionPlanned_AbridgedBufferHasIdentifier(buf []byte) bool {
	return flatbuffers.SizePrefixedBufferHasIdentifier(buf, ISRCollectionPlanned_AbridgedIdentifier)
}

func (rcv *ISRCollectionPlanned_Abridged) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *ISRCollectionPlanned_Abridged) Table() flatbuffers.Table {
	return rcv._tab
}

/// Start time of collection, in ISO 8601 UTC format.
/// Example: /// Example: 2021-01-19T01:01:15.001Z
/// Constraints: No constraints specified.
func (rcv *ISRCollectionPlanned_Abridged) Start() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Start time of collection, in ISO 8601 UTC format.
/// Example: /// Example: 2021-01-19T01:01:15.001Z
/// Constraints: No constraints specified.
/// Stop time of collection, in ISO 8601 UTC format.
/// Example: /// Example: 2021-01-19T01:01:15.001Z
/// Constraints: No constraints specified.
func (rcv *ISRCollectionPlanned_Abridged) Stop() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Stop time of collection, in ISO 8601 UTC format.
/// Example: /// Example: 2021-01-19T01:01:15.001Z
/// Constraints: No constraints specified.
/// Additional start and stop for the collection.
/// Example: /// Example: No example provided.
/// Constraints: No constraints specified.
func (rcv *ISRCollectionPlanned_Abridged) Additional(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *ISRCollectionPlanned_Abridged) AdditionalLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

/// Additional start and stop for the collection.
/// Example: /// Example: No example provided.
/// Constraints: No constraints specified.
func ISRCollectionPlanned_AbridgedStart(builder *flatbuffers.Builder) {
	builder.StartObject(3)
}
func ISRCollectionPlanned_AbridgedAddStart(builder *flatbuffers.Builder, start flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(start), 0)
}
func ISRCollectionPlanned_AbridgedAddStop(builder *flatbuffers.Builder, stop flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(stop), 0)
}
func ISRCollectionPlanned_AbridgedAddAdditional(builder *flatbuffers.Builder, additional flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(additional), 0)
}
func ISRCollectionPlanned_AbridgedStartAdditionalVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func ISRCollectionPlanned_AbridgedEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
