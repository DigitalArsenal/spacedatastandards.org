// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package MtiJobDefinition_Full

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

/// /// The means for the platform to pass information pertaining to the sensor job that will be performed and details of the location parameters (terrain elevation model and geoid model) used in the measurement.
type MtiJobDefinition_Full struct {
	_tab flatbuffers.Table
}

const MtiJobDefinition_FullIdentifier = "MTIJ"

func GetRootAsMtiJobDefinition_Full(buf []byte, offset flatbuffers.UOffsetT) *MtiJobDefinition_Full {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &MtiJobDefinition_Full{}
	x.Init(buf, n+offset)
	return x
}

func FinishMtiJobDefinition_FullBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	identifierBytes := []byte(MtiJobDefinition_FullIdentifier)
	builder.FinishWithFileIdentifier(offset, identifierBytes)
}

func MtiJobDefinition_FullBufferHasIdentifier(buf []byte) bool {
	return flatbuffers.BufferHasIdentifier(buf, MtiJobDefinition_FullIdentifier)
}

func GetSizePrefixedRootAsMtiJobDefinition_Full(buf []byte, offset flatbuffers.UOffsetT) *MtiJobDefinition_Full {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &MtiJobDefinition_Full{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedMtiJobDefinition_FullBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	identifierBytes := []byte(MtiJobDefinition_FullIdentifier)
	builder.FinishSizePrefixedWithFileIdentifier(offset, identifierBytes)
}

func SizePrefixedMtiJobDefinition_FullBufferHasIdentifier(buf []byte) bool {
	return flatbuffers.SizePrefixedBufferHasIdentifier(buf, MtiJobDefinition_FullIdentifier)
}

func (rcv *MtiJobDefinition_Full) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *MtiJobDefinition_Full) Table() flatbuffers.Table {
	return rcv._tab
}

/// A platform assigned number identifying the specific request or task to which the specific dwell pertains.
/// Example: /// Example: 1234567890
/// Constraints: No constraints specified.
func (rcv *MtiJobDefinition_Full) J1() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

/// A platform assigned number identifying the specific request or task to which the specific dwell pertains.
/// Example: /// Example: 1234567890
/// Constraints: No constraints specified.
func (rcv *MtiJobDefinition_Full) MutateJ1(n int64) bool {
	return rcv._tab.MutateInt64Slot(4, n)
}

/// The type of sensor or the platform.
/// Example: /// Example: TYPE
/// Constraints: Minimum length = 0, Maximum length = 32
func (rcv *MtiJobDefinition_Full) J2() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The type of sensor or the platform.
/// Example: /// Example: TYPE
/// Constraints: Minimum length = 0, Maximum length = 32
/// Identifier of the particular variant of the sensor type.
/// Example: /// Example: J3-ID
/// Constraints: Minimum length = 0, Maximum length = 8
func (rcv *MtiJobDefinition_Full) J3() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Identifier of the particular variant of the sensor type.
/// Example: /// Example: J3-ID
/// Constraints: Minimum length = 0, Maximum length = 8
/// Flag field indicating whether filtering has been applied to the targets detected within the dwell area.
/// Example: /// Example: 3
/// Constraints: No constraints specified.
func (rcv *MtiJobDefinition_Full) J4() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

/// Flag field indicating whether filtering has been applied to the targets detected within the dwell area.
/// Example: /// Example: 3
/// Constraints: No constraints specified.
func (rcv *MtiJobDefinition_Full) MutateJ4(n int32) bool {
	return rcv._tab.MutateInt32Slot(10, n)
}

/// Priority of this tasking request relative to all other active tasking requests scheduled for execution on the specified platform.
/// Example: /// Example: 1
/// Constraints: No constraints specified.
func (rcv *MtiJobDefinition_Full) J5() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

/// Priority of this tasking request relative to all other active tasking requests scheduled for execution on the specified platform.
/// Example: /// Example: 1
/// Constraints: No constraints specified.
func (rcv *MtiJobDefinition_Full) MutateJ5(n int32) bool {
	return rcv._tab.MutateInt32Slot(12, n)
}

/// North-South position of the first corner (Point A) defining the area for sensor service, expressed as degrees North (positive) or South (negative) of the Equator.
/// Example: /// Example: 10.23
/// Constraints: No constraints specified.
func (rcv *MtiJobDefinition_Full) J6() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// North-South position of the first corner (Point A) defining the area for sensor service, expressed as degrees North (positive) or South (negative) of the Equator.
/// Example: /// Example: 10.23
/// Constraints: No constraints specified.
func (rcv *MtiJobDefinition_Full) MutateJ6(n float64) bool {
	return rcv._tab.MutateFloat64Slot(14, n)
}

///  East-West position of the first corner (Point A) defining the area for sensor service, expressed as degrees East (positive, 0 to 180) or West (negative, 0 to -180) of the Prime Meridian.
/// Example: /// Example: 10.23
/// Constraints: No constraints specified.
func (rcv *MtiJobDefinition_Full) J7() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

///  East-West position of the first corner (Point A) defining the area for sensor service, expressed as degrees East (positive, 0 to 180) or West (negative, 0 to -180) of the Prime Meridian.
/// Example: /// Example: 10.23
/// Constraints: No constraints specified.
func (rcv *MtiJobDefinition_Full) MutateJ7(n float64) bool {
	return rcv._tab.MutateFloat64Slot(16, n)
}

///  North-South position of the second corner (Point B) defining the area for sensor service, expressed as degrees North (positive) or South (negative) of the Equator.
/// Example: /// Example: 10.23
/// Constraints: No constraints specified.
func (rcv *MtiJobDefinition_Full) J8() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(18))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

///  North-South position of the second corner (Point B) defining the area for sensor service, expressed as degrees North (positive) or South (negative) of the Equator.
/// Example: /// Example: 10.23
/// Constraints: No constraints specified.
func (rcv *MtiJobDefinition_Full) MutateJ8(n float64) bool {
	return rcv._tab.MutateFloat64Slot(18, n)
}

/// East-West position of the second corner (Point B) defining the area for sensor service, expressed as degrees East (positive, 0 to 180) or West (negative, 0 to -180) of the Prime Meridian.
/// Example: /// Example: 10.23
/// Constraints: No constraints specified.
func (rcv *MtiJobDefinition_Full) J9() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(20))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// East-West position of the second corner (Point B) defining the area for sensor service, expressed as degrees East (positive, 0 to 180) or West (negative, 0 to -180) of the Prime Meridian.
/// Example: /// Example: 10.23
/// Constraints: No constraints specified.
func (rcv *MtiJobDefinition_Full) MutateJ9(n float64) bool {
	return rcv._tab.MutateFloat64Slot(20, n)
}

/// North-South position of the third corner (Point C) defining the area for sensor service, expressed as degrees North (positive) or South (negative) of the Equator.
/// Example: /// Example: 10.23
/// Constraints: No constraints specified.
func (rcv *MtiJobDefinition_Full) J10() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(22))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// North-South position of the third corner (Point C) defining the area for sensor service, expressed as degrees North (positive) or South (negative) of the Equator.
/// Example: /// Example: 10.23
/// Constraints: No constraints specified.
func (rcv *MtiJobDefinition_Full) MutateJ10(n float64) bool {
	return rcv._tab.MutateFloat64Slot(22, n)
}

/// East-West position of the third corner (Point C) defining the area for sensor service, expressed as degrees East (positive, 0 to 180) or West (negative, 0 to -180) of the Prime Meridian.
/// Example: /// Example: 10.23
/// Constraints: No constraints specified.
func (rcv *MtiJobDefinition_Full) J11() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(24))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// East-West position of the third corner (Point C) defining the area for sensor service, expressed as degrees East (positive, 0 to 180) or West (negative, 0 to -180) of the Prime Meridian.
/// Example: /// Example: 10.23
/// Constraints: No constraints specified.
func (rcv *MtiJobDefinition_Full) MutateJ11(n float64) bool {
	return rcv._tab.MutateFloat64Slot(24, n)
}

/// North-South position of the fourth corner (Point D) defining the area for sensor service, expressed as degrees North (positive) or South (negative) of the Equator.
/// Example: /// Example: 10.23
/// Constraints: No constraints specified.
func (rcv *MtiJobDefinition_Full) J12() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(26))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// North-South position of the fourth corner (Point D) defining the area for sensor service, expressed as degrees North (positive) or South (negative) of the Equator.
/// Example: /// Example: 10.23
/// Constraints: No constraints specified.
func (rcv *MtiJobDefinition_Full) MutateJ12(n float64) bool {
	return rcv._tab.MutateFloat64Slot(26, n)
}

/// East-West position of the fourth corner (Point D) defining the area for sensor service, expressed as degrees East (positive, 0 to 180) or West (negative, 0 to -180) of the Prime Meridian.
/// Example: /// Example: 10.23
/// Constraints: No constraints specified.
func (rcv *MtiJobDefinition_Full) J13() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(28))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// East-West position of the fourth corner (Point D) defining the area for sensor service, expressed as degrees East (positive, 0 to 180) or West (negative, 0 to -180) of the Prime Meridian.
/// Example: /// Example: 10.23
/// Constraints: No constraints specified.
func (rcv *MtiJobDefinition_Full) MutateJ13(n float64) bool {
	return rcv._tab.MutateFloat64Slot(28, n)
}

/// Mode in which the radar will operate for the given job ID.
/// Example: /// Example: MODE
/// Constraints: Minimum length = 0, Maximum length = 32
func (rcv *MtiJobDefinition_Full) J14() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(30))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Mode in which the radar will operate for the given job ID.
/// Example: /// Example: MODE
/// Constraints: Minimum length = 0, Maximum length = 32
/// The nominal revisit interval for the job ID, expressed in deciseconds.  Value of zero, indicates that the sensor is not revisiting the previous area.
/// Example: /// Example: 100
/// Constraints: No constraints specified.
func (rcv *MtiJobDefinition_Full) J15() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(32))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

/// The nominal revisit interval for the job ID, expressed in deciseconds.  Value of zero, indicates that the sensor is not revisiting the previous area.
/// Example: /// Example: 100
/// Constraints: No constraints specified.
func (rcv *MtiJobDefinition_Full) MutateJ15(n int32) bool {
	return rcv._tab.MutateInt32Slot(32, n)
}

/// Nominal estimate of the standard deviation in the estimated horizontal (along track) sensor location, expressed in decimeters.   measured along the sensor track direction defined in the Dwell segment.
/// Example: /// Example: 100
/// Constraints: No constraints specified.
func (rcv *MtiJobDefinition_Full) J16() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(34))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

/// Nominal estimate of the standard deviation in the estimated horizontal (along track) sensor location, expressed in decimeters.   measured along the sensor track direction defined in the Dwell segment.
/// Example: /// Example: 100
/// Constraints: No constraints specified.
func (rcv *MtiJobDefinition_Full) MutateJ16(n int32) bool {
	return rcv._tab.MutateInt32Slot(34, n)
}

/// Nominal estimate of the standard deviation in the estimated horizontal sensor location, measured orthogonal to the track direction, expressed in decimeters.
/// Example: /// Example: 100
/// Constraints: No constraints specified.
func (rcv *MtiJobDefinition_Full) J17() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(36))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

/// Nominal estimate of the standard deviation in the estimated horizontal sensor location, measured orthogonal to the track direction, expressed in decimeters.
/// Example: /// Example: 100
/// Constraints: No constraints specified.
func (rcv *MtiJobDefinition_Full) MutateJ17(n int32) bool {
	return rcv._tab.MutateInt32Slot(36, n)
}

/// Nominal estimate of the standard deviation of the measured sensor altitude, expressed in decimeters.
/// Example: /// Example: 100
/// Constraints: No constraints specified.
func (rcv *MtiJobDefinition_Full) J18() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(38))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

/// Nominal estimate of the standard deviation of the measured sensor altitude, expressed in decimeters.
/// Example: /// Example: 100
/// Constraints: No constraints specified.
func (rcv *MtiJobDefinition_Full) MutateJ18(n int32) bool {
	return rcv._tab.MutateInt32Slot(38, n)
}

/// Standard deviation of the estimate of sensor track heading, expressed in degrees.
/// Example: /// Example: 10
/// Constraints: No constraints specified.
func (rcv *MtiJobDefinition_Full) J19() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(40))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

/// Standard deviation of the estimate of sensor track heading, expressed in degrees.
/// Example: /// Example: 10
/// Constraints: No constraints specified.
func (rcv *MtiJobDefinition_Full) MutateJ19(n int32) bool {
	return rcv._tab.MutateInt32Slot(40, n)
}

/// Nominal standard deviation of the estimate of sensor speed, expressed in millimeters per second.
/// Example: /// Example: 10
/// Constraints: No constraints specified.
func (rcv *MtiJobDefinition_Full) J20() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(42))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

/// Nominal standard deviation of the estimate of sensor speed, expressed in millimeters per second.
/// Example: /// Example: 10
/// Constraints: No constraints specified.
func (rcv *MtiJobDefinition_Full) MutateJ20(n int32) bool {
	return rcv._tab.MutateInt32Slot(42, n)
}

/// Nominal standard deviation of the slant range of the reported detection, expressed in centimeters.
/// Example: /// Example: 10
/// Constraints: No constraints specified.
func (rcv *MtiJobDefinition_Full) J21() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(44))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

/// Nominal standard deviation of the slant range of the reported detection, expressed in centimeters.
/// Example: /// Example: 10
/// Constraints: No constraints specified.
func (rcv *MtiJobDefinition_Full) MutateJ21(n int32) bool {
	return rcv._tab.MutateInt32Slot(44, n)
}

/// Nominal standard deviation of the measured cross angle to the reported detection, expressed in degrees.
/// Example: /// Example: 10.23
/// Constraints: No constraints specified.
func (rcv *MtiJobDefinition_Full) J22() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(46))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Nominal standard deviation of the measured cross angle to the reported detection, expressed in degrees.
/// Example: /// Example: 10.23
/// Constraints: No constraints specified.
func (rcv *MtiJobDefinition_Full) MutateJ22(n float64) bool {
	return rcv._tab.MutateFloat64Slot(46, n)
}

/// Nominal standard deviation of the velocity line-of-sight component, expressed in centimeters per second.
/// Example: /// Example: 10
/// Constraints: No constraints specified.
func (rcv *MtiJobDefinition_Full) J23() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(48))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

/// Nominal standard deviation of the velocity line-of-sight component, expressed in centimeters per second.
/// Example: /// Example: 10
/// Constraints: No constraints specified.
func (rcv *MtiJobDefinition_Full) MutateJ23(n int32) bool {
	return rcv._tab.MutateInt32Slot(48, n)
}

/// Nominal minimum velocity component along the line of sight, which can be detected by the sensor, expressed in decimeters per second.
/// Example: /// Example: 10
/// Constraints: No constraints specified.
func (rcv *MtiJobDefinition_Full) J24() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(50))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

/// Nominal minimum velocity component along the line of sight, which can be detected by the sensor, expressed in decimeters per second.
/// Example: /// Example: 10
/// Constraints: No constraints specified.
func (rcv *MtiJobDefinition_Full) MutateJ24(n int32) bool {
	return rcv._tab.MutateInt32Slot(50, n)
}

/// Nominal probability that an unobscured ten square-meter target will be detected within the given area of surveillance.
/// Example: /// Example: 10
/// Constraints: No constraints specified.
func (rcv *MtiJobDefinition_Full) J25() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(52))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

/// Nominal probability that an unobscured ten square-meter target will be detected within the given area of surveillance.
/// Example: /// Example: 10
/// Constraints: No constraints specified.
func (rcv *MtiJobDefinition_Full) MutateJ25(n int32) bool {
	return rcv._tab.MutateInt32Slot(52, n)
}

/// The expected density of False Alarms (FA), expressed as the negative of the decibel value.
/// Example: /// Example: 10
/// Constraints: No constraints specified.
func (rcv *MtiJobDefinition_Full) J26() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(54))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

/// The expected density of False Alarms (FA), expressed as the negative of the decibel value.
/// Example: /// Example: 10
/// Constraints: No constraints specified.
func (rcv *MtiJobDefinition_Full) MutateJ26(n int32) bool {
	return rcv._tab.MutateInt32Slot(54, n)
}

/// The terrain elevation model used for developing the target reports.
/// Example: /// Example: MODEL
/// Constraints: Minimum length = 0, Maximum length = 64
func (rcv *MtiJobDefinition_Full) J27() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(56))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The terrain elevation model used for developing the target reports.
/// Example: /// Example: MODEL
/// Constraints: Minimum length = 0, Maximum length = 64
/// The geoid model used for developing the target reports.
/// Example: /// Example: MODEL
/// Constraints: Minimum length = 0, Maximum length = 64
func (rcv *MtiJobDefinition_Full) J28() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(58))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The geoid model used for developing the target reports.
/// Example: /// Example: MODEL
/// Constraints: Minimum length = 0, Maximum length = 64
func MtiJobDefinition_FullStart(builder *flatbuffers.Builder) {
	builder.StartObject(28)
}
func MtiJobDefinition_FullAddJ1(builder *flatbuffers.Builder, j1 int64) {
	builder.PrependInt64Slot(0, j1, 0)
}
func MtiJobDefinition_FullAddJ2(builder *flatbuffers.Builder, j2 flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(j2), 0)
}
func MtiJobDefinition_FullAddJ3(builder *flatbuffers.Builder, j3 flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(j3), 0)
}
func MtiJobDefinition_FullAddJ4(builder *flatbuffers.Builder, j4 int32) {
	builder.PrependInt32Slot(3, j4, 0)
}
func MtiJobDefinition_FullAddJ5(builder *flatbuffers.Builder, j5 int32) {
	builder.PrependInt32Slot(4, j5, 0)
}
func MtiJobDefinition_FullAddJ6(builder *flatbuffers.Builder, j6 float64) {
	builder.PrependFloat64Slot(5, j6, 0.0)
}
func MtiJobDefinition_FullAddJ7(builder *flatbuffers.Builder, j7 float64) {
	builder.PrependFloat64Slot(6, j7, 0.0)
}
func MtiJobDefinition_FullAddJ8(builder *flatbuffers.Builder, j8 float64) {
	builder.PrependFloat64Slot(7, j8, 0.0)
}
func MtiJobDefinition_FullAddJ9(builder *flatbuffers.Builder, j9 float64) {
	builder.PrependFloat64Slot(8, j9, 0.0)
}
func MtiJobDefinition_FullAddJ10(builder *flatbuffers.Builder, j10 float64) {
	builder.PrependFloat64Slot(9, j10, 0.0)
}
func MtiJobDefinition_FullAddJ11(builder *flatbuffers.Builder, j11 float64) {
	builder.PrependFloat64Slot(10, j11, 0.0)
}
func MtiJobDefinition_FullAddJ12(builder *flatbuffers.Builder, j12 float64) {
	builder.PrependFloat64Slot(11, j12, 0.0)
}
func MtiJobDefinition_FullAddJ13(builder *flatbuffers.Builder, j13 float64) {
	builder.PrependFloat64Slot(12, j13, 0.0)
}
func MtiJobDefinition_FullAddJ14(builder *flatbuffers.Builder, j14 flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(13, flatbuffers.UOffsetT(j14), 0)
}
func MtiJobDefinition_FullAddJ15(builder *flatbuffers.Builder, j15 int32) {
	builder.PrependInt32Slot(14, j15, 0)
}
func MtiJobDefinition_FullAddJ16(builder *flatbuffers.Builder, j16 int32) {
	builder.PrependInt32Slot(15, j16, 0)
}
func MtiJobDefinition_FullAddJ17(builder *flatbuffers.Builder, j17 int32) {
	builder.PrependInt32Slot(16, j17, 0)
}
func MtiJobDefinition_FullAddJ18(builder *flatbuffers.Builder, j18 int32) {
	builder.PrependInt32Slot(17, j18, 0)
}
func MtiJobDefinition_FullAddJ19(builder *flatbuffers.Builder, j19 int32) {
	builder.PrependInt32Slot(18, j19, 0)
}
func MtiJobDefinition_FullAddJ20(builder *flatbuffers.Builder, j20 int32) {
	builder.PrependInt32Slot(19, j20, 0)
}
func MtiJobDefinition_FullAddJ21(builder *flatbuffers.Builder, j21 int32) {
	builder.PrependInt32Slot(20, j21, 0)
}
func MtiJobDefinition_FullAddJ22(builder *flatbuffers.Builder, j22 float64) {
	builder.PrependFloat64Slot(21, j22, 0.0)
}
func MtiJobDefinition_FullAddJ23(builder *flatbuffers.Builder, j23 int32) {
	builder.PrependInt32Slot(22, j23, 0)
}
func MtiJobDefinition_FullAddJ24(builder *flatbuffers.Builder, j24 int32) {
	builder.PrependInt32Slot(23, j24, 0)
}
func MtiJobDefinition_FullAddJ25(builder *flatbuffers.Builder, j25 int32) {
	builder.PrependInt32Slot(24, j25, 0)
}
func MtiJobDefinition_FullAddJ26(builder *flatbuffers.Builder, j26 int32) {
	builder.PrependInt32Slot(25, j26, 0)
}
func MtiJobDefinition_FullAddJ27(builder *flatbuffers.Builder, j27 flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(26, flatbuffers.UOffsetT(j27), 0)
}
func MtiJobDefinition_FullAddJ28(builder *flatbuffers.Builder, j28 flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(27, flatbuffers.UOffsetT(j28), 0)
}
func MtiJobDefinition_FullEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
