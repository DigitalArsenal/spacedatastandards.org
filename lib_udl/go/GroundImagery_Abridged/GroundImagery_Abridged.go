// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package GroundImagery_Abridged

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

/// /// Imagery of terrestrial regions from on-orbit, air, and other sensors.
type GroundImagery_Abridged struct {
	_tab flatbuffers.Table
}

const GroundImagery_AbridgedIdentifier = "GROU"

func GetRootAsGroundImagery_Abridged(buf []byte, offset flatbuffers.UOffsetT) *GroundImagery_Abridged {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &GroundImagery_Abridged{}
	x.Init(buf, n+offset)
	return x
}

func FinishGroundImagery_AbridgedBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	identifierBytes := []byte(GroundImagery_AbridgedIdentifier)
	builder.FinishWithFileIdentifier(offset, identifierBytes)
}

func GroundImagery_AbridgedBufferHasIdentifier(buf []byte) bool {
	return flatbuffers.BufferHasIdentifier(buf, GroundImagery_AbridgedIdentifier)
}

func GetSizePrefixedRootAsGroundImagery_Abridged(buf []byte, offset flatbuffers.UOffsetT) *GroundImagery_Abridged {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &GroundImagery_Abridged{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedGroundImagery_AbridgedBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	identifierBytes := []byte(GroundImagery_AbridgedIdentifier)
	builder.FinishSizePrefixedWithFileIdentifier(offset, identifierBytes)
}

func SizePrefixedGroundImagery_AbridgedBufferHasIdentifier(buf []byte) bool {
	return flatbuffers.SizePrefixedBufferHasIdentifier(buf, GroundImagery_AbridgedIdentifier)
}

func (rcv *GroundImagery_Abridged) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *GroundImagery_Abridged) Table() flatbuffers.Table {
	return rcv._tab
}

/// Unique identifier of the record, auto-generated by the system.
/// Example: /// Example: GROUNDIMAGERY-ID
/// Constraints: Minimum length = 1, Maximum length = 36
func (rcv *GroundImagery_Abridged) Id() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Unique identifier of the record, auto-generated by the system.
/// Example: /// Example: GROUNDIMAGERY-ID
/// Constraints: Minimum length = 1, Maximum length = 36
/// Optional ID of the sensor that produced this ground image.
/// Example: /// Example: SENSOR-ID
/// Constraints: Minimum length = 0, Maximum length = 36
func (rcv *GroundImagery_Abridged) IdSensor() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Optional ID of the sensor that produced this ground image.
/// Example: /// Example: SENSOR-ID
/// Constraints: Minimum length = 0, Maximum length = 36
/// Classification marking of the data in IC/CAPCO Portion-marked format.
/// Example: /// Example: U
/// Constraints: Minimum length = 1, Maximum length = 128
func (rcv *GroundImagery_Abridged) ClassificationMarking() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Classification marking of the data in IC/CAPCO Portion-marked format.
/// Example: /// Example: U
/// Constraints: Minimum length = 1, Maximum length = 128
/// Timestamp the image was captured/produced.
/// Example: /// Example: 2021-01-01T01:01:01.123456Z
/// Constraints: No constraints specified.
func (rcv *GroundImagery_Abridged) ImageTime() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Timestamp the image was captured/produced.
/// Example: /// Example: 2021-01-01T01:01:01.123456Z
/// Constraints: No constraints specified.
/// Name of the image file.
/// Example: /// Example: Example file name
/// Constraints: Minimum length = 1, Maximum length = 128
func (rcv *GroundImagery_Abridged) Filename() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Name of the image file.
/// Example: /// Example: Example file name
/// Constraints: Minimum length = 1, Maximum length = 128
/// Geographical region or polygon (lon/lat pairs), as depicted by the Well-Known Text representation of the geometry/geography, of the image as projected on the ground. WKT reference: https://www.opengeospatial.org/standards/wkt-crs. Ignored if included with a create operation that also specifies a valid region.
/// Example: /// Example: POLYGON((67.3291113966927 26.156175339112,67.2580009640721 26.091022064271,67.1795862381682 26.6637992964562,67.2501237475598 26.730115808233,67.3291113966927 26.156175339112))
/// Constraints: Minimum length = 0, Maximum length = 65535
func (rcv *GroundImagery_Abridged) RegionText() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Geographical region or polygon (lon/lat pairs), as depicted by the Well-Known Text representation of the geometry/geography, of the image as projected on the ground. WKT reference: https://www.opengeospatial.org/standards/wkt-crs. Ignored if included with a create operation that also specifies a valid region.
/// Example: /// Example: POLYGON((67.3291113966927 26.156175339112,67.2580009640721 26.091022064271,67.1795862381682 26.6637992964562,67.2501237475598 26.730115808233,67.3291113966927 26.156175339112))
/// Constraints: Minimum length = 0, Maximum length = 65535
/// Geographical region or polygon (lat/lon pairs), as depicted by the GeoJSON representation of the geometry/geography, of the image as projected on the ground. Reference: https://geojson.org/. Ignored if included with a create operation that also specifies a valid region or regionText.
/// Example: /// Example: {"type":"Polygon","coordinates":[[[67.3291113966927,26.156175339112],[67.2580009640721,26.091022064271],[67.1795862381682,26.6637992964562],[67.2501237475598,26.730115808233],[67.3291113966927,26.156175339112]]]}
/// Constraints: Minimum length = 0, Maximum length = 65535
func (rcv *GroundImagery_Abridged) RegionGeoJson() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Geographical region or polygon (lat/lon pairs), as depicted by the GeoJSON representation of the geometry/geography, of the image as projected on the ground. Reference: https://geojson.org/. Ignored if included with a create operation that also specifies a valid region or regionText.
/// Example: /// Example: {"type":"Polygon","coordinates":[[[67.3291113966927,26.156175339112],[67.2580009640721,26.091022064271],[67.1795862381682,26.6637992964562],[67.2501237475598,26.730115808233],[67.3291113966927,26.156175339112]]]}
/// Constraints: Minimum length = 0, Maximum length = 65535
/// Type of region as projected on the ground.
/// Example: /// Example: Polygon
/// Constraints: Minimum length = 0, Maximum length = 64
func (rcv *GroundImagery_Abridged) RegionType() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(18))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Type of region as projected on the ground.
/// Example: /// Example: Polygon
/// Constraints: Minimum length = 0, Maximum length = 64
/// Number of dimensions of the geometry depicted by region.
/// Example: /// Example: 2
/// Constraints: No constraints specified.
func (rcv *GroundImagery_Abridged) RegionNdims() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(20))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

/// Number of dimensions of the geometry depicted by region.
/// Example: /// Example: 2
/// Constraints: No constraints specified.
func (rcv *GroundImagery_Abridged) MutateRegionNdims(n int32) bool {
	return rcv._tab.MutateInt32Slot(20, n)
}

/// Geographical spatial_ref_sys for region.
/// Example: /// Example: 4326
/// Constraints: No constraints specified.
func (rcv *GroundImagery_Abridged) RegionSrid() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(22))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

/// Geographical spatial_ref_sys for region.
/// Example: /// Example: 4326
/// Constraints: No constraints specified.
func (rcv *GroundImagery_Abridged) MutateRegionSrid(n int32) bool {
	return rcv._tab.MutateInt32Slot(22, n)
}

/// Optional identifier provided by source to indicate the sensor identifier used to detect this event. This may be an internal identifier and not necessarily a valid sensor ID.
/// Example: /// Example: ORIGSENSOR-ID
/// Constraints: Minimum length = 0, Maximum length = 36
func (rcv *GroundImagery_Abridged) OrigSensorId() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(24))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Optional identifier provided by source to indicate the sensor identifier used to detect this event. This may be an internal identifier and not necessarily a valid sensor ID.
/// Example: /// Example: ORIGSENSOR-ID
/// Constraints: Minimum length = 0, Maximum length = 36
/// Optional identifier of the subject/target of the image, useful for correlating multiple images of the same subject.
/// Example: /// Example: SUBJECT-ID
/// Constraints: Minimum length = 0, Maximum length = 36
func (rcv *GroundImagery_Abridged) SubjectId() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(26))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Optional identifier of the subject/target of the image, useful for correlating multiple images of the same subject.
/// Example: /// Example: SUBJECT-ID
/// Constraints: Minimum length = 0, Maximum length = 36
/// Optional name/description associated with this image.
/// Example: /// Example: Example name
/// Constraints: Minimum length = 0, Maximum length = 128
func (rcv *GroundImagery_Abridged) Name() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(28))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Optional name/description associated with this image.
/// Example: /// Example: Example name
/// Constraints: Minimum length = 0, Maximum length = 128
/// Source of the data.
/// Example: /// Example: Bluestaq
/// Constraints: Minimum length = 1, Maximum length = 64
func (rcv *GroundImagery_Abridged) Source() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(30))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Source of the data.
/// Example: /// Example: Bluestaq
/// Constraints: Minimum length = 1, Maximum length = 64
/// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
/// Example: /// Example: THIRD_PARTY_DATASOURCE
/// Constraints: Minimum length = 0, Maximum length = 64
func (rcv *GroundImagery_Abridged) Origin() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(32))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
/// Example: /// Example: THIRD_PARTY_DATASOURCE
/// Constraints: Minimum length = 0, Maximum length = 64
/// The originating source network on which this record was created, auto-populated by the system.
/// Example: /// Example: ORIG
/// Constraints: Minimum length = 1, Maximum length = 32
func (rcv *GroundImagery_Abridged) OrigNetwork() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(34))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The originating source network on which this record was created, auto-populated by the system.
/// Example: /// Example: ORIG
/// Constraints: Minimum length = 1, Maximum length = 32
/// The source data library from which this record was received. This could be a remote or tactical UDL or another data library. If null, the record should be assumed to have originated from the primary Enterprise UDL.
/// Example: /// Example: AXE
/// Constraints: Minimum length = 0, Maximum length = 64
func (rcv *GroundImagery_Abridged) SourceDl() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(36))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The source data library from which this record was received. This could be a remote or tactical UDL or another data library. If null, the record should be assumed to have originated from the primary Enterprise UDL.
/// Example: /// Example: AXE
/// Constraints: Minimum length = 0, Maximum length = 64
/// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
/// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
/// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
/// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
/// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
/// Example: /// Example: TEST
/// Constraints: Minimum length = 1, Maximum length = 32
func (rcv *GroundImagery_Abridged) DataMode() GroundImagery_Abridged_dataMode_Enum {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(38))
	if o != 0 {
		return GroundImagery_Abridged_dataMode_Enum(rcv._tab.GetInt8(o + rcv._tab.Pos))
	}
	return 0
}

/// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
/// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
/// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
/// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
/// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
/// Example: /// Example: TEST
/// Constraints: Minimum length = 1, Maximum length = 32
func (rcv *GroundImagery_Abridged) MutateDataMode(n GroundImagery_Abridged_dataMode_Enum) bool {
	return rcv._tab.MutateInt8Slot(38, int8(n))
}

/// Time the row was created in the database, auto-populated by the system.
/// Example: /// Example: 2018-01-01T16:00:00.123Z
/// Constraints: No constraints specified.
func (rcv *GroundImagery_Abridged) CreatedAt() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(40))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Time the row was created in the database, auto-populated by the system.
/// Example: /// Example: 2018-01-01T16:00:00.123Z
/// Constraints: No constraints specified.
/// Application user who created the row in the database, auto-populated by the system.
/// Example: /// Example: some.user
/// Constraints: Minimum length = 1, Maximum length = 64
func (rcv *GroundImagery_Abridged) CreatedBy() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(42))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Application user who created the row in the database, auto-populated by the system.
/// Example: /// Example: some.user
/// Constraints: Minimum length = 1, Maximum length = 64
/// Optional identifier to track a commercial or marketplace transaction executed to produce this data.
/// Example: /// Example: 37bdef1f-5a4f-4776-bee4-7a1e0ec7d35a
/// Constraints: Minimum length = 0, Maximum length = 64
func (rcv *GroundImagery_Abridged) TransactionId() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(44))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Optional identifier to track a commercial or marketplace transaction executed to produce this data.
/// Example: /// Example: 37bdef1f-5a4f-4776-bee4-7a1e0ec7d35a
/// Constraints: Minimum length = 0, Maximum length = 64
/// Description and notes of the image.
/// Example: /// Example: Example notes
/// Constraints: Minimum length = 0, Maximum length = 1024
func (rcv *GroundImagery_Abridged) Notes() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(46))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Description and notes of the image.
/// Example: /// Example: Example notes
/// Constraints: Minimum length = 0, Maximum length = 1024
/// Optional, field indicating type of image, NITF, PNG, etc.
/// Example: /// Example: PNG
/// Constraints: Minimum length = 1, Maximum length = 16
func (rcv *GroundImagery_Abridged) Format() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(48))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Optional, field indicating type of image, NITF, PNG, etc.
/// Example: /// Example: PNG
/// Constraints: Minimum length = 1, Maximum length = 16
/// Size of the image file. Units in bytes. If filesize is provided without an associated file, it defaults to 0.
/// Example: /// Example: 0
/// Constraints: No constraints specified.
func (rcv *GroundImagery_Abridged) Filesize() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(50))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

/// Size of the image file. Units in bytes. If filesize is provided without an associated file, it defaults to 0.
/// Example: /// Example: 0
/// Constraints: No constraints specified.
func (rcv *GroundImagery_Abridged) MutateFilesize(n int64) bool {
	return rcv._tab.MutateInt64Slot(50, n)
}

/// MD5 value of the file. The ingest/create operation will automatically generate the value.
/// Example: /// Example: 120EA8A25E5D487BF68B5F7096440019
/// Constraints: Minimum length = 1, Maximum length = 256
func (rcv *GroundImagery_Abridged) ChecksumValue() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(52))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// MD5 value of the file. The ingest/create operation will automatically generate the value.
/// Example: /// Example: 120EA8A25E5D487BF68B5F7096440019
/// Constraints: Minimum length = 1, Maximum length = 256
func GroundImagery_AbridgedStart(builder *flatbuffers.Builder) {
	builder.StartObject(25)
}
func GroundImagery_AbridgedAddId(builder *flatbuffers.Builder, id flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(id), 0)
}
func GroundImagery_AbridgedAddIdSensor(builder *flatbuffers.Builder, idSensor flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(idSensor), 0)
}
func GroundImagery_AbridgedAddClassificationMarking(builder *flatbuffers.Builder, classificationMarking flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(classificationMarking), 0)
}
func GroundImagery_AbridgedAddImageTime(builder *flatbuffers.Builder, imageTime flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(3, flatbuffers.UOffsetT(imageTime), 0)
}
func GroundImagery_AbridgedAddFilename(builder *flatbuffers.Builder, filename flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(4, flatbuffers.UOffsetT(filename), 0)
}
func GroundImagery_AbridgedAddRegionText(builder *flatbuffers.Builder, regionText flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(5, flatbuffers.UOffsetT(regionText), 0)
}
func GroundImagery_AbridgedAddRegionGeoJson(builder *flatbuffers.Builder, regionGeoJson flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(6, flatbuffers.UOffsetT(regionGeoJson), 0)
}
func GroundImagery_AbridgedAddRegionType(builder *flatbuffers.Builder, regionType flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(7, flatbuffers.UOffsetT(regionType), 0)
}
func GroundImagery_AbridgedAddRegionNdims(builder *flatbuffers.Builder, regionNdims int32) {
	builder.PrependInt32Slot(8, regionNdims, 0)
}
func GroundImagery_AbridgedAddRegionSrid(builder *flatbuffers.Builder, regionSrid int32) {
	builder.PrependInt32Slot(9, regionSrid, 0)
}
func GroundImagery_AbridgedAddOrigSensorId(builder *flatbuffers.Builder, origSensorId flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(10, flatbuffers.UOffsetT(origSensorId), 0)
}
func GroundImagery_AbridgedAddSubjectId(builder *flatbuffers.Builder, subjectId flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(11, flatbuffers.UOffsetT(subjectId), 0)
}
func GroundImagery_AbridgedAddName(builder *flatbuffers.Builder, name flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(12, flatbuffers.UOffsetT(name), 0)
}
func GroundImagery_AbridgedAddSource(builder *flatbuffers.Builder, source flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(13, flatbuffers.UOffsetT(source), 0)
}
func GroundImagery_AbridgedAddOrigin(builder *flatbuffers.Builder, origin flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(14, flatbuffers.UOffsetT(origin), 0)
}
func GroundImagery_AbridgedAddOrigNetwork(builder *flatbuffers.Builder, origNetwork flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(15, flatbuffers.UOffsetT(origNetwork), 0)
}
func GroundImagery_AbridgedAddSourceDl(builder *flatbuffers.Builder, sourceDl flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(16, flatbuffers.UOffsetT(sourceDl), 0)
}
func GroundImagery_AbridgedAddDataMode(builder *flatbuffers.Builder, dataMode GroundImagery_Abridged_dataMode_Enum) {
	builder.PrependInt8Slot(17, int8(dataMode), 0)
}
func GroundImagery_AbridgedAddCreatedAt(builder *flatbuffers.Builder, createdAt flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(18, flatbuffers.UOffsetT(createdAt), 0)
}
func GroundImagery_AbridgedAddCreatedBy(builder *flatbuffers.Builder, createdBy flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(19, flatbuffers.UOffsetT(createdBy), 0)
}
func GroundImagery_AbridgedAddTransactionId(builder *flatbuffers.Builder, transactionId flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(20, flatbuffers.UOffsetT(transactionId), 0)
}
func GroundImagery_AbridgedAddNotes(builder *flatbuffers.Builder, notes flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(21, flatbuffers.UOffsetT(notes), 0)
}
func GroundImagery_AbridgedAddFormat(builder *flatbuffers.Builder, format flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(22, flatbuffers.UOffsetT(format), 0)
}
func GroundImagery_AbridgedAddFilesize(builder *flatbuffers.Builder, filesize int64) {
	builder.PrependInt64Slot(23, filesize, 0)
}
func GroundImagery_AbridgedAddChecksumValue(builder *flatbuffers.Builder, checksumValue flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(24, flatbuffers.UOffsetT(checksumValue), 0)
}
func GroundImagery_AbridgedEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
