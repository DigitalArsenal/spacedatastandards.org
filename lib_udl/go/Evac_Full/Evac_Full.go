// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package Evac_Full

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

/// /// Casualty report and evacuation request. Used to report and request support to evacuate friendly and enemy casualties.
type Evac_Full struct {
	_tab flatbuffers.Table
}

const Evac_FullIdentifier = "EVAC"

func GetRootAsEvac_Full(buf []byte, offset flatbuffers.UOffsetT) *Evac_Full {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &Evac_Full{}
	x.Init(buf, n+offset)
	return x
}

func FinishEvac_FullBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	identifierBytes := []byte(Evac_FullIdentifier)
	builder.FinishWithFileIdentifier(offset, identifierBytes)
}

func Evac_FullBufferHasIdentifier(buf []byte) bool {
	return flatbuffers.BufferHasIdentifier(buf, Evac_FullIdentifier)
}

func GetSizePrefixedRootAsEvac_Full(buf []byte, offset flatbuffers.UOffsetT) *Evac_Full {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &Evac_Full{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedEvac_FullBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	identifierBytes := []byte(Evac_FullIdentifier)
	builder.FinishSizePrefixedWithFileIdentifier(offset, identifierBytes)
}

func SizePrefixedEvac_FullBufferHasIdentifier(buf []byte) bool {
	return flatbuffers.SizePrefixedBufferHasIdentifier(buf, Evac_FullIdentifier)
}

func (rcv *Evac_Full) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *Evac_Full) Table() flatbuffers.Table {
	return rcv._tab
}

/// Unique identifier of the record, auto-generated by the system.
/// Example: /// Example: MEDEVACEVENT-ID
/// Constraints: Minimum length = 1, Maximum length = 36
func (rcv *Evac_Full) Id() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Unique identifier of the record, auto-generated by the system.
/// Example: /// Example: MEDEVACEVENT-ID
/// Constraints: Minimum length = 1, Maximum length = 36
/// Classification marking of the data in IC/CAPCO Portion-marked format.
/// Example: /// Example: U
/// Constraints: Minimum length = 1, Maximum length = 128
func (rcv *Evac_Full) ClassificationMarking() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Classification marking of the data in IC/CAPCO Portion-marked format.
/// Example: /// Example: U
/// Constraints: Minimum length = 1, Maximum length = 128
/// UUID identifying the medevac mission, which should remain the same on subsequent posts related to the same medevac mission.
/// Example: /// Example: MedEvac-ID
/// Constraints: Minimum length = 0, Maximum length = 36
func (rcv *Evac_Full) MedevacId() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// UUID identifying the medevac mission, which should remain the same on subsequent posts related to the same medevac mission.
/// Example: /// Example: MedEvac-ID
/// Constraints: Minimum length = 0, Maximum length = 36
/// The type of this medevac record (REQUEST, RESPONSE).
/// Example: /// Example: REQUEST
/// Constraints: Minimum length = 1, Maximum length = 8
func (rcv *Evac_Full) Type() Evac_Full_type_Enum {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return Evac_Full_type_Enum(rcv._tab.GetInt8(o + rcv._tab.Pos))
	}
	return 0
}

/// The type of this medevac record (REQUEST, RESPONSE).
/// Example: /// Example: REQUEST
/// Constraints: Minimum length = 1, Maximum length = 8
func (rcv *Evac_Full) MutateType(n Evac_Full_type_Enum) bool {
	return rcv._tab.MutateInt8Slot(10, int8(n))
}

/// The operation type of the evacuation. (NOT SPECIFIED, AIR, GROUND, SURFACE).
/// Example: /// Example: GROUND
/// Constraints: Minimum length = 0, Maximum length = 8
func (rcv *Evac_Full) MissionType() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The operation type of the evacuation. (NOT SPECIFIED, AIR, GROUND, SURFACE).
/// Example: /// Example: GROUND
/// Constraints: Minimum length = 0, Maximum length = 8
/// Unique identifier of a weather report associated with this evacuation.
/// Example: /// Example: WeatherReport-ID
/// Constraints: Minimum length = 0, Maximum length = 36
func (rcv *Evac_Full) IdWeatherReport() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Unique identifier of a weather report associated with this evacuation.
/// Example: /// Example: WeatherReport-ID
/// Constraints: Minimum length = 0, Maximum length = 36
/// Number of people Killed In Action.
/// Example: /// Example: 0
/// Constraints: No constraints specified.
func (rcv *Evac_Full) NumKia() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

/// Number of people Killed In Action.
/// Example: /// Example: 0
/// Constraints: No constraints specified.
func (rcv *Evac_Full) MutateNumKia(n int32) bool {
	return rcv._tab.MutateInt32Slot(16, n)
}

/// Number of people Wounded In Action.
/// Example: /// Example: 3
/// Constraints: No constraints specified.
func (rcv *Evac_Full) NumWia() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(18))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

/// Number of people Wounded In Action.
/// Example: /// Example: 3
/// Constraints: No constraints specified.
func (rcv *Evac_Full) MutateNumWia(n int32) bool {
	return rcv._tab.MutateInt32Slot(18, n)
}

/// Number of littered personnel requiring evacuation.
/// Example: /// Example: 0
/// Constraints: No constraints specified.
func (rcv *Evac_Full) NumLitter() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(20))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

/// Number of littered personnel requiring evacuation.
/// Example: /// Example: 0
/// Constraints: No constraints specified.
func (rcv *Evac_Full) MutateNumLitter(n int32) bool {
	return rcv._tab.MutateInt32Slot(20, n)
}

/// Number of ambulatory personnel requiring evacuation.
/// Example: /// Example: 5
/// Constraints: No constraints specified.
func (rcv *Evac_Full) NumAmbulatory() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(22))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

/// Number of ambulatory personnel requiring evacuation.
/// Example: /// Example: 5
/// Constraints: No constraints specified.
func (rcv *Evac_Full) MutateNumAmbulatory(n int32) bool {
	return rcv._tab.MutateInt32Slot(22, n)
}

/// Flag indicating whether the mission requires medical personnel.
/// Example: /// Example: True
/// Constraints: No constraints specified.
func (rcv *Evac_Full) MedicReq() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(24))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

/// Flag indicating whether the mission requires medical personnel.
/// Example: /// Example: True
/// Constraints: No constraints specified.
func (rcv *Evac_Full) MutateMedicReq(n bool) bool {
	return rcv._tab.MutateBoolSlot(24, n)
}

/// Externally provided Medevac request number (e.g. MED.1.223908).
/// Example: /// Example: MED.1.234567
/// Constraints: Minimum length = 0, Maximum length = 36
func (rcv *Evac_Full) ReqNum() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(26))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Externally provided Medevac request number (e.g. MED.1.223908).
/// Example: /// Example: MED.1.234567
/// Constraints: Minimum length = 0, Maximum length = 36
/// The request time, in ISO 8601 UTC format.
/// Example: /// Example: 2021-10-15T16:00:00.123Z
/// Constraints: No constraints specified.
func (rcv *Evac_Full) ReqTime() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(28))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The request time, in ISO 8601 UTC format.
/// Example: /// Example: 2021-10-15T16:00:00.123Z
/// Constraints: No constraints specified.
/// The call sign of this medevac requestor.
/// Example: /// Example: Bravo
/// Constraints: Minimum length = 0, Maximum length = 36
func (rcv *Evac_Full) ReqCallSign() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(30))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The call sign of this medevac requestor.
/// Example: /// Example: Bravo
/// Constraints: Minimum length = 0, Maximum length = 36
/// The expected pickup time, in ISO 8601 UTC format.
/// Example: /// Example: 2021-10-20T16:00:00.123Z
/// Constraints: No constraints specified.
func (rcv *Evac_Full) PickupTime() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(32))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The expected pickup time, in ISO 8601 UTC format.
/// Example: /// Example: 2021-10-20T16:00:00.123Z
/// Constraints: No constraints specified.
/// WGS-84 latitude of the pickup location, in degrees. -90 to 90 degrees (negative values south of equator).
/// Example: /// Example: 75.1234
/// Constraints: No constraints specified.
func (rcv *Evac_Full) PickupLat() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(34))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// WGS-84 latitude of the pickup location, in degrees. -90 to 90 degrees (negative values south of equator).
/// Example: /// Example: 75.1234
/// Constraints: No constraints specified.
func (rcv *Evac_Full) MutatePickupLat(n float64) bool {
	return rcv._tab.MutateFloat64Slot(34, n)
}

/// WGS-84 longitude of the pickup location, in degrees. -180 to 180 degrees (negative values west of Prime Meridian).
/// Example: /// Example: 175.1234
/// Constraints: No constraints specified.
func (rcv *Evac_Full) PickupLon() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(36))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// WGS-84 longitude of the pickup location, in degrees. -180 to 180 degrees (negative values west of Prime Meridian).
/// Example: /// Example: 175.1234
/// Constraints: No constraints specified.
func (rcv *Evac_Full) MutatePickupLon(n float64) bool {
	return rcv._tab.MutateFloat64Slot(36, n)
}

/// Altitude relative to WGS-84 ellipsoid, in meters. Positive values indicate a point height above ellipsoid, and negative values indicate a point height below ellipsoid.
/// Example: /// Example: 30.1234
/// Constraints: No constraints specified.
func (rcv *Evac_Full) PickupAlt() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(38))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Altitude relative to WGS-84 ellipsoid, in meters. Positive values indicate a point height above ellipsoid, and negative values indicate a point height below ellipsoid.
/// Example: /// Example: 30.1234
/// Constraints: No constraints specified.
func (rcv *Evac_Full) MutatePickupAlt(n float64) bool {
	return rcv._tab.MutateFloat64Slot(38, n)
}

/// Radius of circular area about lat/lon point, in meters (1-sigma, if representing error).
/// Example: /// Example: 10.1234
/// Constraints: No constraints specified.
func (rcv *Evac_Full) Ce() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(40))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Radius of circular area about lat/lon point, in meters (1-sigma, if representing error).
/// Example: /// Example: 10.1234
/// Constraints: No constraints specified.
func (rcv *Evac_Full) MutateCe(n float64) bool {
	return rcv._tab.MutateFloat64Slot(40, n)
}

/// Height above lat/lon point, in meters (1-sigma, if representing linear error).
/// Example: /// Example: 5.1234
/// Constraints: No constraints specified.
func (rcv *Evac_Full) Le() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(42))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Height above lat/lon point, in meters (1-sigma, if representing linear error).
/// Example: /// Example: 5.1234
/// Constraints: No constraints specified.
func (rcv *Evac_Full) MutateLe(n float64) bool {
	return rcv._tab.MutateFloat64Slot(42, n)
}

/// Short description of the terrain features of the pickup location (WOODS, TREES, PLOWED FIELDS, FLAT, STANDING WATER, MARSH, URBAN BUILT-UP AREA, MOUNTAIN, HILL, SAND TD, ROCKY, VALLEY, METAMORPHIC ICE, UNKNOWN TD, SEA, NO STATEMENT).
/// Example: /// Example: ROCKY
/// Constraints: Minimum length = 0, Maximum length = 32
func (rcv *Evac_Full) Terrain() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(44))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Short description of the terrain features of the pickup location (WOODS, TREES, PLOWED FIELDS, FLAT, STANDING WATER, MARSH, URBAN BUILT-UP AREA, MOUNTAIN, HILL, SAND TD, ROCKY, VALLEY, METAMORPHIC ICE, UNKNOWN TD, SEA, NO STATEMENT).
/// Example: /// Example: ROCKY
/// Constraints: Minimum length = 0, Maximum length = 32
/// Amplifying data for the terrain describing important obstacles in or around the zone.
/// Example: /// Example: N/A
/// Constraints: Minimum length = 0, Maximum length = 64
func (rcv *Evac_Full) ObstaclesRemarks() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(46))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Amplifying data for the terrain describing important obstacles in or around the zone.
/// Example: /// Example: N/A
/// Constraints: Minimum length = 0, Maximum length = 64
/// Amplifying data for the terrain describing any notable additional terrain features.
/// Example: /// Example: N/A
/// Constraints: Minimum length = 0, Maximum length = 64
func (rcv *Evac_Full) TerrainRemarks() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(48))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Amplifying data for the terrain describing any notable additional terrain features.
/// Example: /// Example: N/A
/// Constraints: Minimum length = 0, Maximum length = 64
/// The name of the zone.
/// Example: /// Example: example-zone
/// Constraints: Minimum length = 0, Maximum length = 128
func (rcv *Evac_Full) ZoneName() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(50))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The name of the zone.
/// Example: /// Example: example-zone
/// Constraints: Minimum length = 0, Maximum length = 128
/// The expected marker identifying the pickup site (SMOKE ZONE MARKING, FLARES, MIRROR, GLIDE ANGLE INDICATOR LIGHT, LIGHT ZONE MARKING, PANELS, FIRE, LASER DESIGNATOR,  STROBE LIGHTS, VEHICLE LIGHTS, COLORED SMOKE, WHITE PHOSPHERUS, INFRARED, ILLUMINATION, FRATRICIDE FENCE).
/// Example: /// Example: ILLUMINATION
/// Constraints: Minimum length = 0, Maximum length = 64
func (rcv *Evac_Full) ZoneMarking() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(52))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The expected marker identifying the pickup site (SMOKE ZONE MARKING, FLARES, MIRROR, GLIDE ANGLE INDICATOR LIGHT, LIGHT ZONE MARKING, PANELS, FIRE, LASER DESIGNATOR,  STROBE LIGHTS, VEHICLE LIGHTS, COLORED SMOKE, WHITE PHOSPHERUS, INFRARED, ILLUMINATION, FRATRICIDE FENCE).
/// Example: /// Example: ILLUMINATION
/// Constraints: Minimum length = 0, Maximum length = 64
/// The pickup site security (UNKNOWN ZONESECURITY, NO ENEMY, POSSIBLE ENEMY, ENEMY IN AREA USE CAUTION, ENEMY IN AREA ARMED ESCORT REQUIRED).
/// Example: /// Example: NO ENEMY
/// Constraints: Minimum length = 0, Maximum length = 64
func (rcv *Evac_Full) ZoneSecurity() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(54))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The pickup site security (UNKNOWN ZONESECURITY, NO ENEMY, POSSIBLE ENEMY, ENEMY IN AREA USE CAUTION, ENEMY IN AREA ARMED ESCORT REQUIRED).
/// Example: /// Example: NO ENEMY
/// Constraints: Minimum length = 0, Maximum length = 64
/// Color used for the pickup site marking (RED, WHITE, BLUE, YELLOW, GREEN, ORANGE, BLACK, PURPLE, BROWN, TAN, GRAY, SILVER, CAMOUFLAGE, OTHER COLOR).
/// Example: /// Example: RED
/// Constraints: Minimum length = 0, Maximum length = 32
func (rcv *Evac_Full) ZoneMarkingColor() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(56))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Color used for the pickup site marking (RED, WHITE, BLUE, YELLOW, GREEN, ORANGE, BLACK, PURPLE, BROWN, TAN, GRAY, SILVER, CAMOUFLAGE, OTHER COLOR).
/// Example: /// Example: RED
/// Constraints: Minimum length = 0, Maximum length = 32
/// Flag indicating that the pickup site is hot and hostiles are in the area.
/// Example: /// Example: False
/// Constraints: No constraints specified.
func (rcv *Evac_Full) ZoneHot() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(58))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

/// Flag indicating that the pickup site is hot and hostiles are in the area.
/// Example: /// Example: False
/// Constraints: No constraints specified.
func (rcv *Evac_Full) MutateZoneHot(n bool) bool {
	return rcv._tab.MutateBoolSlot(58, n)
}

/// The contact frequency, in Hz, of the agency or zone controller.
/// Example: /// Example: 3.11
/// Constraints: No constraints specified.
func (rcv *Evac_Full) CntctFreq() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(60))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// The contact frequency, in Hz, of the agency or zone controller.
/// Example: /// Example: 3.11
/// Constraints: No constraints specified.
func (rcv *Evac_Full) MutateCntctFreq(n float64) bool {
	return rcv._tab.MutateFloat64Slot(60, n)
}

/// The call sign of the zone controller.
/// Example: /// Example: Tango
/// Constraints: Minimum length = 0, Maximum length = 128
func (rcv *Evac_Full) ZoneContrCallSign() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(62))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The call sign of the zone controller.
/// Example: /// Example: Tango
/// Constraints: Minimum length = 0, Maximum length = 128
/// The count of people requiring medevac.
/// Example: /// Example: 5
/// Constraints: No constraints specified.
func (rcv *Evac_Full) NumCasualties() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(64))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

/// The count of people requiring medevac.
/// Example: /// Example: 5
/// Constraints: No constraints specified.
func (rcv *Evac_Full) MutateNumCasualties(n int32) bool {
	return rcv._tab.MutateInt32Slot(64, n)
}

/// Additional comments for the medevac mission.
/// Example: /// Example: Comments concerning mission
/// Constraints: Minimum length = 0, Maximum length = 1024
func (rcv *Evac_Full) Comments() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(66))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Additional comments for the medevac mission.
/// Example: /// Example: Comments concerning mission
/// Constraints: Minimum length = 0, Maximum length = 1024
/// No description provided.
/// Example: /// Example: No example provided.
/// Constraints: No constraints specified.
func (rcv *Evac_Full) CasualtyInfo(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(68))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *Evac_Full) CasualtyInfoLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(68))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

/// No description provided.
/// Example: /// Example: No example provided.
/// Constraints: No constraints specified.
/// No description provided.
/// Example: /// Example: No example provided.
/// Constraints: No constraints specified.
func (rcv *Evac_Full) EnemyData(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(70))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *Evac_Full) EnemyDataLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(70))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

/// No description provided.
/// Example: /// Example: No example provided.
/// Constraints: No constraints specified.
/// Related document ids.
/// Example: /// Example: No example provided.
/// Constraints: No constraints specified.
func (rcv *Evac_Full) RelatedDocs(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(72))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *Evac_Full) RelatedDocsLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(72))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

/// Related document ids.
/// Example: /// Example: No example provided.
/// Constraints: No constraints specified.
/// The originating source network on which this record was created, auto-populated by the system.
/// Example: /// Example: ORIG
/// Constraints: Minimum length = 0, Maximum length = 32
func (rcv *Evac_Full) OrigNetwork() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(74))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The originating source network on which this record was created, auto-populated by the system.
/// Example: /// Example: ORIG
/// Constraints: Minimum length = 0, Maximum length = 32
/// Time the row was created in the database, auto-populated by the system.
/// Example: /// Example: 2018-01-01T16:00:00.123Z
/// Constraints: No constraints specified.
func (rcv *Evac_Full) CreatedAt() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(76))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Time the row was created in the database, auto-populated by the system.
/// Example: /// Example: 2018-01-01T16:00:00.123Z
/// Constraints: No constraints specified.
/// Application user who created the row in the database, auto-populated by the system.
/// Example: /// Example: some.user
/// Constraints: Minimum length = 0, Maximum length = 64
func (rcv *Evac_Full) CreatedBy() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(78))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Application user who created the row in the database, auto-populated by the system.
/// Example: /// Example: some.user
/// Constraints: Minimum length = 0, Maximum length = 64
/// Source of the data.
/// Example: /// Example: Bluestaq
/// Constraints: Minimum length = 1, Maximum length = 64
func (rcv *Evac_Full) Source() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(80))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Source of the data.
/// Example: /// Example: Bluestaq
/// Constraints: Minimum length = 1, Maximum length = 64
/// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
/// Example: /// Example: THIRD_PARTY_DATASOURCE
/// Constraints: Minimum length = 0, Maximum length = 64
func (rcv *Evac_Full) Origin() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(82))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
/// Example: /// Example: THIRD_PARTY_DATASOURCE
/// Constraints: Minimum length = 0, Maximum length = 64
/// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
/// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
/// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
/// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
/// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
/// Example: /// Example: TEST
/// Constraints: Minimum length = 1, Maximum length = 32
func (rcv *Evac_Full) DataMode() Evac_Full_dataMode_Enum {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(84))
	if o != 0 {
		return Evac_Full_dataMode_Enum(rcv._tab.GetInt8(o + rcv._tab.Pos))
	}
	return 0
}

/// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
/// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
/// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
/// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
/// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
/// Example: /// Example: TEST
/// Constraints: Minimum length = 1, Maximum length = 32
func (rcv *Evac_Full) MutateDataMode(n Evac_Full_dataMode_Enum) bool {
	return rcv._tab.MutateInt8Slot(84, int8(n))
}

func Evac_FullStart(builder *flatbuffers.Builder) {
	builder.StartObject(41)
}
func Evac_FullAddId(builder *flatbuffers.Builder, id flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(id), 0)
}
func Evac_FullAddClassificationMarking(builder *flatbuffers.Builder, classificationMarking flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(classificationMarking), 0)
}
func Evac_FullAddMedevacId(builder *flatbuffers.Builder, medevacId flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(medevacId), 0)
}
func Evac_FullAddType(builder *flatbuffers.Builder, type_ Evac_Full_type_Enum) {
	builder.PrependInt8Slot(3, int8(type_), 0)
}
func Evac_FullAddMissionType(builder *flatbuffers.Builder, missionType flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(4, flatbuffers.UOffsetT(missionType), 0)
}
func Evac_FullAddIdWeatherReport(builder *flatbuffers.Builder, idWeatherReport flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(5, flatbuffers.UOffsetT(idWeatherReport), 0)
}
func Evac_FullAddNumKia(builder *flatbuffers.Builder, numKia int32) {
	builder.PrependInt32Slot(6, numKia, 0)
}
func Evac_FullAddNumWia(builder *flatbuffers.Builder, numWia int32) {
	builder.PrependInt32Slot(7, numWia, 0)
}
func Evac_FullAddNumLitter(builder *flatbuffers.Builder, numLitter int32) {
	builder.PrependInt32Slot(8, numLitter, 0)
}
func Evac_FullAddNumAmbulatory(builder *flatbuffers.Builder, numAmbulatory int32) {
	builder.PrependInt32Slot(9, numAmbulatory, 0)
}
func Evac_FullAddMedicReq(builder *flatbuffers.Builder, medicReq bool) {
	builder.PrependBoolSlot(10, medicReq, false)
}
func Evac_FullAddReqNum(builder *flatbuffers.Builder, reqNum flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(11, flatbuffers.UOffsetT(reqNum), 0)
}
func Evac_FullAddReqTime(builder *flatbuffers.Builder, reqTime flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(12, flatbuffers.UOffsetT(reqTime), 0)
}
func Evac_FullAddReqCallSign(builder *flatbuffers.Builder, reqCallSign flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(13, flatbuffers.UOffsetT(reqCallSign), 0)
}
func Evac_FullAddPickupTime(builder *flatbuffers.Builder, pickupTime flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(14, flatbuffers.UOffsetT(pickupTime), 0)
}
func Evac_FullAddPickupLat(builder *flatbuffers.Builder, pickupLat float64) {
	builder.PrependFloat64Slot(15, pickupLat, 0.0)
}
func Evac_FullAddPickupLon(builder *flatbuffers.Builder, pickupLon float64) {
	builder.PrependFloat64Slot(16, pickupLon, 0.0)
}
func Evac_FullAddPickupAlt(builder *flatbuffers.Builder, pickupAlt float64) {
	builder.PrependFloat64Slot(17, pickupAlt, 0.0)
}
func Evac_FullAddCe(builder *flatbuffers.Builder, ce float64) {
	builder.PrependFloat64Slot(18, ce, 0.0)
}
func Evac_FullAddLe(builder *flatbuffers.Builder, le float64) {
	builder.PrependFloat64Slot(19, le, 0.0)
}
func Evac_FullAddTerrain(builder *flatbuffers.Builder, terrain flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(20, flatbuffers.UOffsetT(terrain), 0)
}
func Evac_FullAddObstaclesRemarks(builder *flatbuffers.Builder, obstaclesRemarks flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(21, flatbuffers.UOffsetT(obstaclesRemarks), 0)
}
func Evac_FullAddTerrainRemarks(builder *flatbuffers.Builder, terrainRemarks flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(22, flatbuffers.UOffsetT(terrainRemarks), 0)
}
func Evac_FullAddZoneName(builder *flatbuffers.Builder, zoneName flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(23, flatbuffers.UOffsetT(zoneName), 0)
}
func Evac_FullAddZoneMarking(builder *flatbuffers.Builder, zoneMarking flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(24, flatbuffers.UOffsetT(zoneMarking), 0)
}
func Evac_FullAddZoneSecurity(builder *flatbuffers.Builder, zoneSecurity flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(25, flatbuffers.UOffsetT(zoneSecurity), 0)
}
func Evac_FullAddZoneMarkingColor(builder *flatbuffers.Builder, zoneMarkingColor flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(26, flatbuffers.UOffsetT(zoneMarkingColor), 0)
}
func Evac_FullAddZoneHot(builder *flatbuffers.Builder, zoneHot bool) {
	builder.PrependBoolSlot(27, zoneHot, false)
}
func Evac_FullAddCntctFreq(builder *flatbuffers.Builder, cntctFreq float64) {
	builder.PrependFloat64Slot(28, cntctFreq, 0.0)
}
func Evac_FullAddZoneContrCallSign(builder *flatbuffers.Builder, zoneContrCallSign flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(29, flatbuffers.UOffsetT(zoneContrCallSign), 0)
}
func Evac_FullAddNumCasualties(builder *flatbuffers.Builder, numCasualties int32) {
	builder.PrependInt32Slot(30, numCasualties, 0)
}
func Evac_FullAddComments(builder *flatbuffers.Builder, comments flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(31, flatbuffers.UOffsetT(comments), 0)
}
func Evac_FullAddCasualtyInfo(builder *flatbuffers.Builder, casualtyInfo flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(32, flatbuffers.UOffsetT(casualtyInfo), 0)
}
func Evac_FullStartCasualtyInfoVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func Evac_FullAddEnemyData(builder *flatbuffers.Builder, enemyData flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(33, flatbuffers.UOffsetT(enemyData), 0)
}
func Evac_FullStartEnemyDataVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func Evac_FullAddRelatedDocs(builder *flatbuffers.Builder, relatedDocs flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(34, flatbuffers.UOffsetT(relatedDocs), 0)
}
func Evac_FullStartRelatedDocsVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func Evac_FullAddOrigNetwork(builder *flatbuffers.Builder, origNetwork flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(35, flatbuffers.UOffsetT(origNetwork), 0)
}
func Evac_FullAddCreatedAt(builder *flatbuffers.Builder, createdAt flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(36, flatbuffers.UOffsetT(createdAt), 0)
}
func Evac_FullAddCreatedBy(builder *flatbuffers.Builder, createdBy flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(37, flatbuffers.UOffsetT(createdBy), 0)
}
func Evac_FullAddSource(builder *flatbuffers.Builder, source flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(38, flatbuffers.UOffsetT(source), 0)
}
func Evac_FullAddOrigin(builder *flatbuffers.Builder, origin flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(39, flatbuffers.UOffsetT(origin), 0)
}
func Evac_FullAddDataMode(builder *flatbuffers.Builder, dataMode Evac_Full_dataMode_Enum) {
	builder.PrependInt8Slot(40, int8(dataMode), 0)
}
func Evac_FullEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
