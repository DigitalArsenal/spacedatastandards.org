// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package ObjectOfInterest_Abridged

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

/// /// OnOrbit objects of interest, which include information about the last known state of the object.
type ObjectOfInterest_Abridged struct {
	_tab flatbuffers.Table
}

const ObjectOfInterest_AbridgedIdentifier = "OBJE"

func GetRootAsObjectOfInterest_Abridged(buf []byte, offset flatbuffers.UOffsetT) *ObjectOfInterest_Abridged {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &ObjectOfInterest_Abridged{}
	x.Init(buf, n+offset)
	return x
}

func FinishObjectOfInterest_AbridgedBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	identifierBytes := []byte(ObjectOfInterest_AbridgedIdentifier)
	builder.FinishWithFileIdentifier(offset, identifierBytes)
}

func ObjectOfInterest_AbridgedBufferHasIdentifier(buf []byte) bool {
	return flatbuffers.BufferHasIdentifier(buf, ObjectOfInterest_AbridgedIdentifier)
}

func GetSizePrefixedRootAsObjectOfInterest_Abridged(buf []byte, offset flatbuffers.UOffsetT) *ObjectOfInterest_Abridged {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &ObjectOfInterest_Abridged{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedObjectOfInterest_AbridgedBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	identifierBytes := []byte(ObjectOfInterest_AbridgedIdentifier)
	builder.FinishSizePrefixedWithFileIdentifier(offset, identifierBytes)
}

func SizePrefixedObjectOfInterest_AbridgedBufferHasIdentifier(buf []byte) bool {
	return flatbuffers.SizePrefixedBufferHasIdentifier(buf, ObjectOfInterest_AbridgedIdentifier)
}

func (rcv *ObjectOfInterest_Abridged) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *ObjectOfInterest_Abridged) Table() flatbuffers.Table {
	return rcv._tab
}

/// Unique identifier of the record, auto-generated by the system.
/// Example: /// Example: OBJECTOFINTEREST-ID
/// Constraints: Minimum length = 1, Maximum length = 36
func (rcv *ObjectOfInterest_Abridged) Id() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Unique identifier of the record, auto-generated by the system.
/// Example: /// Example: OBJECTOFINTEREST-ID
/// Constraints: Minimum length = 1, Maximum length = 36
/// Classification marking of the data in IC/CAPCO Portion-marked format.
/// Example: /// Example: U
/// Constraints: Minimum length = 1, Maximum length = 128
func (rcv *ObjectOfInterest_Abridged) ClassificationMarking() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Classification marking of the data in IC/CAPCO Portion-marked format.
/// Example: /// Example: U
/// Constraints: Minimum length = 1, Maximum length = 128
/// UUID of the parent Onorbit record.
/// Example: /// Example: REF-ONORBIT-ID
/// Constraints: Minimum length = 1, Maximum length = 36
func (rcv *ObjectOfInterest_Abridged) IdOnOrbit() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// UUID of the parent Onorbit record.
/// Example: /// Example: REF-ONORBIT-ID
/// Constraints: Minimum length = 1, Maximum length = 36
/// Satellite/Catalog number of the target on-orbit object.
/// Example: /// Example: 12
/// Constraints: No constraints specified.
func (rcv *ObjectOfInterest_Abridged) SatNo() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

/// Satellite/Catalog number of the target on-orbit object.
/// Example: /// Example: 12
/// Constraints: No constraints specified.
func (rcv *ObjectOfInterest_Abridged) MutateSatNo(n int32) bool {
	return rcv._tab.MutateInt32Slot(10, n)
}

/// Unique name of the object of interest event.
/// Example: /// Example: Example_name
/// Constraints: Minimum length = 0, Maximum length = 128
func (rcv *ObjectOfInterest_Abridged) Name() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Unique name of the object of interest event.
/// Example: /// Example: Example_name
/// Constraints: Minimum length = 0, Maximum length = 128
/// Sensor tasking start time for object of interest.
/// Example: /// Example: 2021-01-01T01:01:01.123Z
/// Constraints: No constraints specified.
func (rcv *ObjectOfInterest_Abridged) SensorTaskingStartTime() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Sensor tasking start time for object of interest.
/// Example: /// Example: 2021-01-01T01:01:01.123Z
/// Constraints: No constraints specified.
/// Sensor tasking stop time for object of interest.
/// Example: /// Example: 2021-01-01T01:01:01.123Z
/// Constraints: No constraints specified.
func (rcv *ObjectOfInterest_Abridged) SensorTaskingStopTime() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Sensor tasking stop time for object of interest.
/// Example: /// Example: 2021-01-01T01:01:01.123Z
/// Constraints: No constraints specified.
/// Priority of the object of interest as an integer (1=highest priority).
/// Example: /// Example: 7
/// Constraints: No constraints specified.
func (rcv *ObjectOfInterest_Abridged) Priority() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(18))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

/// Priority of the object of interest as an integer (1=highest priority).
/// Example: /// Example: 7
/// Constraints: No constraints specified.
func (rcv *ObjectOfInterest_Abridged) MutatePriority(n int32) bool {
	return rcv._tab.MutateInt32Slot(18, n)
}

/// Status of the object of interest event (e.g. OPEN, CLOSED, CANCELLED).
/// Example: /// Example: OPEN
/// Constraints: Minimum length = 0, Maximum length = 16
func (rcv *ObjectOfInterest_Abridged) Status() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(20))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Status of the object of interest event (e.g. OPEN, CLOSED, CANCELLED).
/// Example: /// Example: OPEN
/// Constraints: Minimum length = 0, Maximum length = 16
/// Time of last status change of the object of interest event.
/// Example: /// Example: 2021-01-01T01:01:01.123Z
/// Constraints: No constraints specified.
func (rcv *ObjectOfInterest_Abridged) StatusDate() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(22))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Time of last status change of the object of interest event.
/// Example: /// Example: 2021-01-01T01:01:01.123Z
/// Constraints: No constraints specified.
/// Description of the object of interest event.
/// Example: /// Example: Example description
/// Constraints: Minimum length = 0, Maximum length = 256
func (rcv *ObjectOfInterest_Abridged) Description() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(24))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Description of the object of interest event.
/// Example: /// Example: Example description
/// Constraints: Minimum length = 0, Maximum length = 256
/// Last reported observation time in ISO 8601 UTC time, with microsecond precision.
/// Example: /// Example: 2021-01-01T01:01:01.123456Z
/// Constraints: No constraints specified.
func (rcv *ObjectOfInterest_Abridged) LastObTime() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(26))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Last reported observation time in ISO 8601 UTC time, with microsecond precision.
/// Example: /// Example: 2021-01-01T01:01:01.123456Z
/// Constraints: No constraints specified.
/// The time at which an attempted observation of the object of interest noticed it was missing, in ISO 8601 UTC time, with microsecond precision.
/// Example: /// Example: 2021-01-01T01:01:01.123456Z
/// Constraints: No constraints specified.
func (rcv *ObjectOfInterest_Abridged) MissedObTime() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(28))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The time at which an attempted observation of the object of interest noticed it was missing, in ISO 8601 UTC time, with microsecond precision.
/// Example: /// Example: 2021-01-01T01:01:01.123456Z
/// Constraints: No constraints specified.
/// Possible delta V applications for the object of interest, in km/sec.
/// Example: /// Example: [1.1, 2.2, 3.3]
/// Constraints: No constraints specified.
func (rcv *ObjectOfInterest_Abridged) DeltaVs(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(30))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *ObjectOfInterest_Abridged) DeltaVsLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(30))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

/// Possible delta V applications for the object of interest, in km/sec.
/// Example: /// Example: [1.1, 2.2, 3.3]
/// Constraints: No constraints specified.
/// Possible delta time applications for the object of interest, in seconds.
/// Example: /// Example: [1.1, 2.2, 3.3]
/// Constraints: No constraints specified.
func (rcv *ObjectOfInterest_Abridged) DeltaTs(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(32))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *ObjectOfInterest_Abridged) DeltaTsLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(32))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

/// Possible delta time applications for the object of interest, in seconds.
/// Example: /// Example: [1.1, 2.2, 3.3]
/// Constraints: No constraints specified.
/// Last reported state vector epoch time in ISO 8601 UTC time, with microsecond precision.
/// Example: /// Example: 2021-01-01T01:01:01.123456Z
/// Constraints: No constraints specified.
func (rcv *ObjectOfInterest_Abridged) SvEpoch() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(34))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Last reported state vector epoch time in ISO 8601 UTC time, with microsecond precision.
/// Example: /// Example: 2021-01-01T01:01:01.123456Z
/// Constraints: No constraints specified.
/// Last reported x position of the object in km, in J2000 coordinates.
/// Example: /// Example: 123.4
/// Constraints: No constraints specified.
func (rcv *ObjectOfInterest_Abridged) X() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(36))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Last reported x position of the object in km, in J2000 coordinates.
/// Example: /// Example: 123.4
/// Constraints: No constraints specified.
func (rcv *ObjectOfInterest_Abridged) MutateX(n float64) bool {
	return rcv._tab.MutateFloat64Slot(36, n)
}

/// Last reported y position of the object in km, in J2000 coordinates.
/// Example: /// Example: 123.4
/// Constraints: No constraints specified.
func (rcv *ObjectOfInterest_Abridged) Y() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(38))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Last reported y position of the object in km, in J2000 coordinates.
/// Example: /// Example: 123.4
/// Constraints: No constraints specified.
func (rcv *ObjectOfInterest_Abridged) MutateY(n float64) bool {
	return rcv._tab.MutateFloat64Slot(38, n)
}

/// Last reported z position of the object in km, in J2000 coordinates.
/// Example: /// Example: 123.4
/// Constraints: No constraints specified.
func (rcv *ObjectOfInterest_Abridged) Z() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(40))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Last reported z position of the object in km, in J2000 coordinates.
/// Example: /// Example: 123.4
/// Constraints: No constraints specified.
func (rcv *ObjectOfInterest_Abridged) MutateZ(n float64) bool {
	return rcv._tab.MutateFloat64Slot(40, n)
}

/// Last reported x velocity of the object in km/sec, in J2000 coordinates.
/// Example: /// Example: 123.4
/// Constraints: No constraints specified.
func (rcv *ObjectOfInterest_Abridged) Xvel() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(42))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Last reported x velocity of the object in km/sec, in J2000 coordinates.
/// Example: /// Example: 123.4
/// Constraints: No constraints specified.
func (rcv *ObjectOfInterest_Abridged) MutateXvel(n float64) bool {
	return rcv._tab.MutateFloat64Slot(42, n)
}

/// Last reported y velocity of the object in km/sec, in J2000 coordinates.
/// Example: /// Example: 123.4
/// Constraints: No constraints specified.
func (rcv *ObjectOfInterest_Abridged) Yvel() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(44))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Last reported y velocity of the object in km/sec, in J2000 coordinates.
/// Example: /// Example: 123.4
/// Constraints: No constraints specified.
func (rcv *ObjectOfInterest_Abridged) MutateYvel(n float64) bool {
	return rcv._tab.MutateFloat64Slot(44, n)
}

/// Last reported z velocity of the object in km/sec, in J2000 coordinates.
/// Example: /// Example: 123.4
/// Constraints: No constraints specified.
func (rcv *ObjectOfInterest_Abridged) Zvel() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(46))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Last reported z velocity of the object in km/sec, in J2000 coordinates.
/// Example: /// Example: 123.4
/// Constraints: No constraints specified.
func (rcv *ObjectOfInterest_Abridged) MutateZvel(n float64) bool {
	return rcv._tab.MutateFloat64Slot(46, n)
}

/// Last reported elset epoch time in ISO 8601 UTC time, with microsecond precision.
/// Example: /// Example: 2021-01-01T01:01:01.123456Z
/// Constraints: No constraints specified.
func (rcv *ObjectOfInterest_Abridged) ElsetEpoch() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(48))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Last reported elset epoch time in ISO 8601 UTC time, with microsecond precision.
/// Example: /// Example: 2021-01-01T01:01:01.123456Z
/// Constraints: No constraints specified.
/// Last reported mean motion of the object. Mean motion is the angular speed required for a body to complete one orbit, assuming constant speed in a circular orbit which completes in the same time as the variable speed, elliptical orbit of the actual body. Measured in revolutions per day.
/// Example: /// Example: 123.4
/// Constraints: No constraints specified.
func (rcv *ObjectOfInterest_Abridged) MeanMotion() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(50))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Last reported mean motion of the object. Mean motion is the angular speed required for a body to complete one orbit, assuming constant speed in a circular orbit which completes in the same time as the variable speed, elliptical orbit of the actual body. Measured in revolutions per day.
/// Example: /// Example: 123.4
/// Constraints: No constraints specified.
func (rcv *ObjectOfInterest_Abridged) MutateMeanMotion(n float64) bool {
	return rcv._tab.MutateFloat64Slot(50, n)
}

/// Last reported eccentricity of the object. The orbital eccentricity of an astronomical object is a parameter that determines the amount by which its orbit around another body deviates from a perfect circle. A value of 0 is a circular orbit, values between 0 and 1 form an elliptic orbit, 1 is a parabolic escape orbit, and greater than 1 is a hyperbolic escape orbit.
/// Example: /// Example: 123.4
/// Constraints: No constraints specified.
func (rcv *ObjectOfInterest_Abridged) Eccentricity() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(52))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Last reported eccentricity of the object. The orbital eccentricity of an astronomical object is a parameter that determines the amount by which its orbit around another body deviates from a perfect circle. A value of 0 is a circular orbit, values between 0 and 1 form an elliptic orbit, 1 is a parabolic escape orbit, and greater than 1 is a hyperbolic escape orbit.
/// Example: /// Example: 123.4
/// Constraints: No constraints specified.
func (rcv *ObjectOfInterest_Abridged) MutateEccentricity(n float64) bool {
	return rcv._tab.MutateFloat64Slot(52, n)
}

/// Last reported inclination of the object. Inclination is the angle between the equator and the orbit when looking from the center of the Earth. If the orbit went exactly around the equator from left to right, then the inclination would be 0. The inclination ranges from 0 to 180 degrees.
/// Example: /// Example: 123.4
/// Constraints: No constraints specified.
func (rcv *ObjectOfInterest_Abridged) Inclination() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(54))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Last reported inclination of the object. Inclination is the angle between the equator and the orbit when looking from the center of the Earth. If the orbit went exactly around the equator from left to right, then the inclination would be 0. The inclination ranges from 0 to 180 degrees.
/// Example: /// Example: 123.4
/// Constraints: No constraints specified.
func (rcv *ObjectOfInterest_Abridged) MutateInclination(n float64) bool {
	return rcv._tab.MutateFloat64Slot(54, n)
}

/// Last reported raan.  Right ascension of the ascending node, or RAAN is the angle as measured in degrees eastwards (or, as seen from the north, counterclockwise) from the First Point of Aries to the ascending node, which is where the orbit crosses the equator when traveling north.
/// Example: /// Example: 123.4
/// Constraints: No constraints specified.
func (rcv *ObjectOfInterest_Abridged) Raan() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(56))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Last reported raan.  Right ascension of the ascending node, or RAAN is the angle as measured in degrees eastwards (or, as seen from the north, counterclockwise) from the First Point of Aries to the ascending node, which is where the orbit crosses the equator when traveling north.
/// Example: /// Example: 123.4
/// Constraints: No constraints specified.
func (rcv *ObjectOfInterest_Abridged) MutateRaan(n float64) bool {
	return rcv._tab.MutateFloat64Slot(56, n)
}

/// Last reported argument of perigee. The argument of perigee is the angle in degrees formed between the perigee and the ascending node. If the perigee would occur at the ascending node, the argument of perigee would be 0.
/// Example: /// Example: 123.4
/// Constraints: No constraints specified.
func (rcv *ObjectOfInterest_Abridged) ArgOfPerigee() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(58))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Last reported argument of perigee. The argument of perigee is the angle in degrees formed between the perigee and the ascending node. If the perigee would occur at the ascending node, the argument of perigee would be 0.
/// Example: /// Example: 123.4
/// Constraints: No constraints specified.
func (rcv *ObjectOfInterest_Abridged) MutateArgOfPerigee(n float64) bool {
	return rcv._tab.MutateFloat64Slot(58, n)
}

/// Last reported meanAnomaly. Mean anomoly is where the satellite is in its orbital path. The mean anomaly ranges from 0 to 360 degrees. The mean anomaly is referenced to the perigee. If the satellite were at the perigee, the mean anomaly would be 0.
/// Example: /// Example: 123.4
/// Constraints: No constraints specified.
func (rcv *ObjectOfInterest_Abridged) MeanAnomaly() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(60))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Last reported meanAnomaly. Mean anomoly is where the satellite is in its orbital path. The mean anomaly ranges from 0 to 360 degrees. The mean anomaly is referenced to the perigee. If the satellite were at the perigee, the mean anomaly would be 0.
/// Example: /// Example: 123.4
/// Constraints: No constraints specified.
func (rcv *ObjectOfInterest_Abridged) MutateMeanAnomaly(n float64) bool {
	return rcv._tab.MutateFloat64Slot(60, n)
}

/// The last reported revolution number. The value is incremented when a satellite crosses the equator on an ascending pass.
/// Example: /// Example: 123
/// Constraints: No constraints specified.
func (rcv *ObjectOfInterest_Abridged) RevNo() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(62))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

/// The last reported revolution number. The value is incremented when a satellite crosses the equator on an ascending pass.
/// Example: /// Example: 123
/// Constraints: No constraints specified.
func (rcv *ObjectOfInterest_Abridged) MutateRevNo(n int32) bool {
	return rcv._tab.MutateInt32Slot(62, n)
}

/// Last reported drag term for SGP4 orbital model, used for calculating decay constants for altitude, eccentricity etc, measured in inverse earth radii.
/// Example: /// Example: 123.4
/// Constraints: No constraints specified.
func (rcv *ObjectOfInterest_Abridged) BStar() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(64))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Last reported drag term for SGP4 orbital model, used for calculating decay constants for altitude, eccentricity etc, measured in inverse earth radii.
/// Example: /// Example: 123.4
/// Constraints: No constraints specified.
func (rcv *ObjectOfInterest_Abridged) MutateBStar(n float64) bool {
	return rcv._tab.MutateFloat64Slot(64, n)
}

/// Last reported 1st derivative of the mean motion with respect to time. Units are revolutions per day squared.
/// Example: /// Example: 123.4
/// Constraints: No constraints specified.
func (rcv *ObjectOfInterest_Abridged) MeanMotionDot() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(66))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Last reported 1st derivative of the mean motion with respect to time. Units are revolutions per day squared.
/// Example: /// Example: 123.4
/// Constraints: No constraints specified.
func (rcv *ObjectOfInterest_Abridged) MutateMeanMotionDot(n float64) bool {
	return rcv._tab.MutateFloat64Slot(66, n)
}

/// Last reported 2nd derivative of the mean motion with respect to time. Units are revolutions per day cubed.
/// Example: /// Example: 123.4
/// Constraints: No constraints specified.
func (rcv *ObjectOfInterest_Abridged) MeanMotionDdot() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(68))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Last reported 2nd derivative of the mean motion with respect to time. Units are revolutions per day cubed.
/// Example: /// Example: 123.4
/// Constraints: No constraints specified.
func (rcv *ObjectOfInterest_Abridged) MutateMeanMotionDdot(n float64) bool {
	return rcv._tab.MutateFloat64Slot(68, n)
}

/// Last reported semi major axis, which is the sum of the periapsis and apoapsis distances divided by two. For circular orbits, the semimajor axis is the distance between the centers of the bodies, not the distance of the bodies from the center of mass.
/// Example: /// Example: 123.4
/// Constraints: No constraints specified.
func (rcv *ObjectOfInterest_Abridged) SemiMajorAxis() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(70))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Last reported semi major axis, which is the sum of the periapsis and apoapsis distances divided by two. For circular orbits, the semimajor axis is the distance between the centers of the bodies, not the distance of the bodies from the center of mass.
/// Example: /// Example: 123.4
/// Constraints: No constraints specified.
func (rcv *ObjectOfInterest_Abridged) MutateSemiMajorAxis(n float64) bool {
	return rcv._tab.MutateFloat64Slot(70, n)
}

/// Last reported orbit period. Period of the orbit is equal to inverse of mean motion.
/// Example: /// Example: 123.4
/// Constraints: No constraints specified.
func (rcv *ObjectOfInterest_Abridged) Period() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(72))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Last reported orbit period. Period of the orbit is equal to inverse of mean motion.
/// Example: /// Example: 123.4
/// Constraints: No constraints specified.
func (rcv *ObjectOfInterest_Abridged) MutatePeriod(n float64) bool {
	return rcv._tab.MutateFloat64Slot(72, n)
}

/// Last reported apogee. The Orbit point furthest from the center of the earth in kilometers.
/// Example: /// Example: 123.4
/// Constraints: No constraints specified.
func (rcv *ObjectOfInterest_Abridged) Apogee() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(74))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Last reported apogee. The Orbit point furthest from the center of the earth in kilometers.
/// Example: /// Example: 123.4
/// Constraints: No constraints specified.
func (rcv *ObjectOfInterest_Abridged) MutateApogee(n float64) bool {
	return rcv._tab.MutateFloat64Slot(74, n)
}

/// Last reported perigee. The orbit point nearest to the center of the earth in kilometers.
/// Example: /// Example: 123.4
/// Constraints: No constraints specified.
func (rcv *ObjectOfInterest_Abridged) Perigee() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(76))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Last reported perigee. The orbit point nearest to the center of the earth in kilometers.
/// Example: /// Example: 123.4
/// Constraints: No constraints specified.
func (rcv *ObjectOfInterest_Abridged) MutatePerigee(n float64) bool {
	return rcv._tab.MutateFloat64Slot(76, n)
}

/// Time the row was created in the database, auto-populated by the system.
/// Example: /// Example: 2018-01-01T16:00:00.123Z
/// Constraints: No constraints specified.
func (rcv *ObjectOfInterest_Abridged) CreatedAt() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(78))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Time the row was created in the database, auto-populated by the system.
/// Example: /// Example: 2018-01-01T16:00:00.123Z
/// Constraints: No constraints specified.
/// Application user who created the row in the database, auto-populated by the system.
/// Example: /// Example: some.user
/// Constraints: Minimum length = 1, Maximum length = 64
func (rcv *ObjectOfInterest_Abridged) CreatedBy() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(80))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Application user who created the row in the database, auto-populated by the system.
/// Example: /// Example: some.user
/// Constraints: Minimum length = 1, Maximum length = 64
/// Source of the data.
/// Example: /// Example: Bluestaq
/// Constraints: Minimum length = 1, Maximum length = 64
func (rcv *ObjectOfInterest_Abridged) Source() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(82))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Source of the data.
/// Example: /// Example: Bluestaq
/// Constraints: Minimum length = 1, Maximum length = 64
/// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
/// Example: /// Example: THIRD_PARTY_DATASOURCE
/// Constraints: Minimum length = 0, Maximum length = 64
func (rcv *ObjectOfInterest_Abridged) Origin() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(84))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
/// Example: /// Example: THIRD_PARTY_DATASOURCE
/// Constraints: Minimum length = 0, Maximum length = 64
/// The originating source network on which this record was created, auto-populated by the system.
/// Example: /// Example: ORIG
/// Constraints: Minimum length = 1, Maximum length = 32
func (rcv *ObjectOfInterest_Abridged) OrigNetwork() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(86))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The originating source network on which this record was created, auto-populated by the system.
/// Example: /// Example: ORIG
/// Constraints: Minimum length = 1, Maximum length = 32
/// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
/// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
/// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
/// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
/// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
/// Example: /// Example: TEST
/// Constraints: Minimum length = 1, Maximum length = 32
func (rcv *ObjectOfInterest_Abridged) DataMode() ObjectOfInterest_Abridged_dataMode_Enum {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(88))
	if o != 0 {
		return ObjectOfInterest_Abridged_dataMode_Enum(rcv._tab.GetInt8(o + rcv._tab.Pos))
	}
	return 0
}

/// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
/// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
/// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
/// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
/// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
/// Example: /// Example: TEST
/// Constraints: Minimum length = 1, Maximum length = 32
func (rcv *ObjectOfInterest_Abridged) MutateDataMode(n ObjectOfInterest_Abridged_dataMode_Enum) bool {
	return rcv._tab.MutateInt8Slot(88, int8(n))
}

func ObjectOfInterest_AbridgedStart(builder *flatbuffers.Builder) {
	builder.StartObject(43)
}
func ObjectOfInterest_AbridgedAddId(builder *flatbuffers.Builder, id flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(id), 0)
}
func ObjectOfInterest_AbridgedAddClassificationMarking(builder *flatbuffers.Builder, classificationMarking flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(classificationMarking), 0)
}
func ObjectOfInterest_AbridgedAddIdOnOrbit(builder *flatbuffers.Builder, idOnOrbit flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(idOnOrbit), 0)
}
func ObjectOfInterest_AbridgedAddSatNo(builder *flatbuffers.Builder, satNo int32) {
	builder.PrependInt32Slot(3, satNo, 0)
}
func ObjectOfInterest_AbridgedAddName(builder *flatbuffers.Builder, name flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(4, flatbuffers.UOffsetT(name), 0)
}
func ObjectOfInterest_AbridgedAddSensorTaskingStartTime(builder *flatbuffers.Builder, sensorTaskingStartTime flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(5, flatbuffers.UOffsetT(sensorTaskingStartTime), 0)
}
func ObjectOfInterest_AbridgedAddSensorTaskingStopTime(builder *flatbuffers.Builder, sensorTaskingStopTime flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(6, flatbuffers.UOffsetT(sensorTaskingStopTime), 0)
}
func ObjectOfInterest_AbridgedAddPriority(builder *flatbuffers.Builder, priority int32) {
	builder.PrependInt32Slot(7, priority, 0)
}
func ObjectOfInterest_AbridgedAddStatus(builder *flatbuffers.Builder, status flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(8, flatbuffers.UOffsetT(status), 0)
}
func ObjectOfInterest_AbridgedAddStatusDate(builder *flatbuffers.Builder, statusDate flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(9, flatbuffers.UOffsetT(statusDate), 0)
}
func ObjectOfInterest_AbridgedAddDescription(builder *flatbuffers.Builder, description flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(10, flatbuffers.UOffsetT(description), 0)
}
func ObjectOfInterest_AbridgedAddLastObTime(builder *flatbuffers.Builder, lastObTime flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(11, flatbuffers.UOffsetT(lastObTime), 0)
}
func ObjectOfInterest_AbridgedAddMissedObTime(builder *flatbuffers.Builder, missedObTime flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(12, flatbuffers.UOffsetT(missedObTime), 0)
}
func ObjectOfInterest_AbridgedAddDeltaVs(builder *flatbuffers.Builder, deltaVs flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(13, flatbuffers.UOffsetT(deltaVs), 0)
}
func ObjectOfInterest_AbridgedStartDeltaVsVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func ObjectOfInterest_AbridgedAddDeltaTs(builder *flatbuffers.Builder, deltaTs flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(14, flatbuffers.UOffsetT(deltaTs), 0)
}
func ObjectOfInterest_AbridgedStartDeltaTsVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func ObjectOfInterest_AbridgedAddSvEpoch(builder *flatbuffers.Builder, svEpoch flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(15, flatbuffers.UOffsetT(svEpoch), 0)
}
func ObjectOfInterest_AbridgedAddX(builder *flatbuffers.Builder, x float64) {
	builder.PrependFloat64Slot(16, x, 0.0)
}
func ObjectOfInterest_AbridgedAddY(builder *flatbuffers.Builder, y float64) {
	builder.PrependFloat64Slot(17, y, 0.0)
}
func ObjectOfInterest_AbridgedAddZ(builder *flatbuffers.Builder, z float64) {
	builder.PrependFloat64Slot(18, z, 0.0)
}
func ObjectOfInterest_AbridgedAddXvel(builder *flatbuffers.Builder, xvel float64) {
	builder.PrependFloat64Slot(19, xvel, 0.0)
}
func ObjectOfInterest_AbridgedAddYvel(builder *flatbuffers.Builder, yvel float64) {
	builder.PrependFloat64Slot(20, yvel, 0.0)
}
func ObjectOfInterest_AbridgedAddZvel(builder *flatbuffers.Builder, zvel float64) {
	builder.PrependFloat64Slot(21, zvel, 0.0)
}
func ObjectOfInterest_AbridgedAddElsetEpoch(builder *flatbuffers.Builder, elsetEpoch flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(22, flatbuffers.UOffsetT(elsetEpoch), 0)
}
func ObjectOfInterest_AbridgedAddMeanMotion(builder *flatbuffers.Builder, meanMotion float64) {
	builder.PrependFloat64Slot(23, meanMotion, 0.0)
}
func ObjectOfInterest_AbridgedAddEccentricity(builder *flatbuffers.Builder, eccentricity float64) {
	builder.PrependFloat64Slot(24, eccentricity, 0.0)
}
func ObjectOfInterest_AbridgedAddInclination(builder *flatbuffers.Builder, inclination float64) {
	builder.PrependFloat64Slot(25, inclination, 0.0)
}
func ObjectOfInterest_AbridgedAddRaan(builder *flatbuffers.Builder, raan float64) {
	builder.PrependFloat64Slot(26, raan, 0.0)
}
func ObjectOfInterest_AbridgedAddArgOfPerigee(builder *flatbuffers.Builder, argOfPerigee float64) {
	builder.PrependFloat64Slot(27, argOfPerigee, 0.0)
}
func ObjectOfInterest_AbridgedAddMeanAnomaly(builder *flatbuffers.Builder, meanAnomaly float64) {
	builder.PrependFloat64Slot(28, meanAnomaly, 0.0)
}
func ObjectOfInterest_AbridgedAddRevNo(builder *flatbuffers.Builder, revNo int32) {
	builder.PrependInt32Slot(29, revNo, 0)
}
func ObjectOfInterest_AbridgedAddBStar(builder *flatbuffers.Builder, bStar float64) {
	builder.PrependFloat64Slot(30, bStar, 0.0)
}
func ObjectOfInterest_AbridgedAddMeanMotionDot(builder *flatbuffers.Builder, meanMotionDot float64) {
	builder.PrependFloat64Slot(31, meanMotionDot, 0.0)
}
func ObjectOfInterest_AbridgedAddMeanMotionDdot(builder *flatbuffers.Builder, meanMotionDdot float64) {
	builder.PrependFloat64Slot(32, meanMotionDdot, 0.0)
}
func ObjectOfInterest_AbridgedAddSemiMajorAxis(builder *flatbuffers.Builder, semiMajorAxis float64) {
	builder.PrependFloat64Slot(33, semiMajorAxis, 0.0)
}
func ObjectOfInterest_AbridgedAddPeriod(builder *flatbuffers.Builder, period float64) {
	builder.PrependFloat64Slot(34, period, 0.0)
}
func ObjectOfInterest_AbridgedAddApogee(builder *flatbuffers.Builder, apogee float64) {
	builder.PrependFloat64Slot(35, apogee, 0.0)
}
func ObjectOfInterest_AbridgedAddPerigee(builder *flatbuffers.Builder, perigee float64) {
	builder.PrependFloat64Slot(36, perigee, 0.0)
}
func ObjectOfInterest_AbridgedAddCreatedAt(builder *flatbuffers.Builder, createdAt flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(37, flatbuffers.UOffsetT(createdAt), 0)
}
func ObjectOfInterest_AbridgedAddCreatedBy(builder *flatbuffers.Builder, createdBy flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(38, flatbuffers.UOffsetT(createdBy), 0)
}
func ObjectOfInterest_AbridgedAddSource(builder *flatbuffers.Builder, source flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(39, flatbuffers.UOffsetT(source), 0)
}
func ObjectOfInterest_AbridgedAddOrigin(builder *flatbuffers.Builder, origin flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(40, flatbuffers.UOffsetT(origin), 0)
}
func ObjectOfInterest_AbridgedAddOrigNetwork(builder *flatbuffers.Builder, origNetwork flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(41, flatbuffers.UOffsetT(origNetwork), 0)
}
func ObjectOfInterest_AbridgedAddDataMode(builder *flatbuffers.Builder, dataMode ObjectOfInterest_Abridged_dataMode_Enum) {
	builder.PrependInt8Slot(42, int8(dataMode), 0)
}
func ObjectOfInterest_AbridgedEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
