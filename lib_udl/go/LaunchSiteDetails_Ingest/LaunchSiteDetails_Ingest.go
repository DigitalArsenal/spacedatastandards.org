// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package LaunchSiteDetails_Ingest

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

/// /// Model representation of details compiled/collected on a launch site by a particular source. A launch site may have several details records.
type LaunchSiteDetails_Ingest struct {
	_tab flatbuffers.Table
}

const LaunchSiteDetails_IngestIdentifier = "LAUN"

func GetRootAsLaunchSiteDetails_Ingest(buf []byte, offset flatbuffers.UOffsetT) *LaunchSiteDetails_Ingest {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &LaunchSiteDetails_Ingest{}
	x.Init(buf, n+offset)
	return x
}

func FinishLaunchSiteDetails_IngestBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	identifierBytes := []byte(LaunchSiteDetails_IngestIdentifier)
	builder.FinishWithFileIdentifier(offset, identifierBytes)
}

func LaunchSiteDetails_IngestBufferHasIdentifier(buf []byte) bool {
	return flatbuffers.BufferHasIdentifier(buf, LaunchSiteDetails_IngestIdentifier)
}

func GetSizePrefixedRootAsLaunchSiteDetails_Ingest(buf []byte, offset flatbuffers.UOffsetT) *LaunchSiteDetails_Ingest {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &LaunchSiteDetails_Ingest{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedLaunchSiteDetails_IngestBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	identifierBytes := []byte(LaunchSiteDetails_IngestIdentifier)
	builder.FinishSizePrefixedWithFileIdentifier(offset, identifierBytes)
}

func SizePrefixedLaunchSiteDetails_IngestBufferHasIdentifier(buf []byte) bool {
	return flatbuffers.SizePrefixedBufferHasIdentifier(buf, LaunchSiteDetails_IngestIdentifier)
}

func (rcv *LaunchSiteDetails_Ingest) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *LaunchSiteDetails_Ingest) Table() flatbuffers.Table {
	return rcv._tab
}

/// Unique identifier of the record, auto-generated by the system.
/// Example: /// Example: LAUNCHSITEDETAILS-ID
/// Constraints: Minimum length = 1, Maximum length = 36
func (rcv *LaunchSiteDetails_Ingest) Id() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Unique identifier of the record, auto-generated by the system.
/// Example: /// Example: LAUNCHSITEDETAILS-ID
/// Constraints: Minimum length = 1, Maximum length = 36
/// Identifier of the parent launch site record.
/// Example: /// Example: LAUNCHSITE-ID
/// Constraints: Minimum length = 1, Maximum length = 36
func (rcv *LaunchSiteDetails_Ingest) IdLaunchSite() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Identifier of the parent launch site record.
/// Example: /// Example: LAUNCHSITE-ID
/// Constraints: Minimum length = 1, Maximum length = 36
/// Classification marking of the data in IC/CAPCO Portion-marked format.
/// Example: /// Example: U
/// Constraints: Minimum length = 1, Maximum length = 128
func (rcv *LaunchSiteDetails_Ingest) ClassificationMarking() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Classification marking of the data in IC/CAPCO Portion-marked format.
/// Example: /// Example: U
/// Constraints: Minimum length = 1, Maximum length = 128
/// ID of the location data for the launch site, or null if mobile (e.g. sea launch platform in international waters).
/// Example: /// Example: LOCATION-ID
/// Constraints: Minimum length = 0, Maximum length = 36
func (rcv *LaunchSiteDetails_Ingest) IdLocation() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// ID of the location data for the launch site, or null if mobile (e.g. sea launch platform in international waters).
/// Example: /// Example: LOCATION-ID
/// Constraints: Minimum length = 0, Maximum length = 36
/// Launch site group name. Multiple launch sites may be colocated within a launch ''group''.
/// Example: /// Example: Example-group-name
/// Constraints: Minimum length = 0, Maximum length = 64
func (rcv *LaunchSiteDetails_Ingest) LaunchGroup() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Launch site group name. Multiple launch sites may be colocated within a launch ''group''.
/// Example: /// Example: Example-group-name
/// Constraints: Minimum length = 0, Maximum length = 64
/// Array of supported launch inclinations known for this site. The array is always sized as a multiple of two and includes start/end values to support ranges.  For example, if a site support inclinations of 10 and 12-14, the array would have the following values: [10,10, 12,14].
/// Example: /// Example: [10.23, 10.23, 12.23, 14.23]
/// Constraints: No constraints specified.
func (rcv *LaunchSiteDetails_Ingest) AvailableInclinations(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *LaunchSiteDetails_Ingest) AvailableInclinationsLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

/// Array of supported launch inclinations known for this site. The array is always sized as a multiple of two and includes start/end values to support ranges.  For example, if a site support inclinations of 10 and 12-14, the array would have the following values: [10,10, 12,14].
/// Example: /// Example: [10.23, 10.23, 12.23, 14.23]
/// Constraints: No constraints specified.
/// Notes/description of the launch site.
/// Example: /// Example: Example notes
/// Constraints: Minimum length = 0, Maximum length = 256
func (rcv *LaunchSiteDetails_Ingest) Description() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Notes/description of the launch site.
/// Example: /// Example: Example notes
/// Constraints: Minimum length = 0, Maximum length = 256
/// Time the row was created in the database, auto-populated by the system.
/// Example: /// Example: 2018-01-01T16:00:00.123Z
/// Constraints: No constraints specified.
func (rcv *LaunchSiteDetails_Ingest) CreatedAt() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(18))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Time the row was created in the database, auto-populated by the system.
/// Example: /// Example: 2018-01-01T16:00:00.123Z
/// Constraints: No constraints specified.
/// Application user who created the row in the database, auto-populated by the system.
/// Example: /// Example: some.user
/// Constraints: Minimum length = 1, Maximum length = 64
func (rcv *LaunchSiteDetails_Ingest) CreatedBy() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(20))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Application user who created the row in the database, auto-populated by the system.
/// Example: /// Example: some.user
/// Constraints: Minimum length = 1, Maximum length = 64
/// Source of the data.
/// Example: /// Example: Bluestaq
/// Constraints: Minimum length = 1, Maximum length = 64
func (rcv *LaunchSiteDetails_Ingest) Source() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(22))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Source of the data.
/// Example: /// Example: Bluestaq
/// Constraints: Minimum length = 1, Maximum length = 64
/// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
/// Example: /// Example: THIRD_PARTY_DATASOURCE
/// Constraints: Minimum length = 0, Maximum length = 64
func (rcv *LaunchSiteDetails_Ingest) Origin() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(24))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
/// Example: /// Example: THIRD_PARTY_DATASOURCE
/// Constraints: Minimum length = 0, Maximum length = 64
/// The originating source network on which this record was created, auto-populated by the system.
/// Example: /// Example: ORIG
/// Constraints: Minimum length = 1, Maximum length = 32
func (rcv *LaunchSiteDetails_Ingest) OrigNetwork() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(26))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The originating source network on which this record was created, auto-populated by the system.
/// Example: /// Example: ORIG
/// Constraints: Minimum length = 1, Maximum length = 32
/// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
/// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
/// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
/// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
/// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
/// Example: /// Example: TEST
/// Constraints: Minimum length = 1, Maximum length = 32
func (rcv *LaunchSiteDetails_Ingest) DataMode() LaunchSiteDetails_Ingest_dataMode_Enum {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(28))
	if o != 0 {
		return LaunchSiteDetails_Ingest_dataMode_Enum(rcv._tab.GetInt8(o + rcv._tab.Pos))
	}
	return 0
}

/// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
/// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
/// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
/// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
/// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
/// Example: /// Example: TEST
/// Constraints: Minimum length = 1, Maximum length = 32
func (rcv *LaunchSiteDetails_Ingest) MutateDataMode(n LaunchSiteDetails_Ingest_dataMode_Enum) bool {
	return rcv._tab.MutateInt8Slot(28, int8(n))
}

/// No description provided.
/// Example: /// Example: No example provided.
/// Constraints: No constraints specified.
func (rcv *LaunchSiteDetails_Ingest) Location() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(30))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// No description provided.
/// Example: /// Example: No example provided.
/// Constraints: No constraints specified.
func LaunchSiteDetails_IngestStart(builder *flatbuffers.Builder) {
	builder.StartObject(14)
}
func LaunchSiteDetails_IngestAddId(builder *flatbuffers.Builder, id flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(id), 0)
}
func LaunchSiteDetails_IngestAddIdLaunchSite(builder *flatbuffers.Builder, idLaunchSite flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(idLaunchSite), 0)
}
func LaunchSiteDetails_IngestAddClassificationMarking(builder *flatbuffers.Builder, classificationMarking flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(classificationMarking), 0)
}
func LaunchSiteDetails_IngestAddIdLocation(builder *flatbuffers.Builder, idLocation flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(3, flatbuffers.UOffsetT(idLocation), 0)
}
func LaunchSiteDetails_IngestAddLaunchGroup(builder *flatbuffers.Builder, launchGroup flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(4, flatbuffers.UOffsetT(launchGroup), 0)
}
func LaunchSiteDetails_IngestAddAvailableInclinations(builder *flatbuffers.Builder, availableInclinations flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(5, flatbuffers.UOffsetT(availableInclinations), 0)
}
func LaunchSiteDetails_IngestStartAvailableInclinationsVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func LaunchSiteDetails_IngestAddDescription(builder *flatbuffers.Builder, description flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(6, flatbuffers.UOffsetT(description), 0)
}
func LaunchSiteDetails_IngestAddCreatedAt(builder *flatbuffers.Builder, createdAt flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(7, flatbuffers.UOffsetT(createdAt), 0)
}
func LaunchSiteDetails_IngestAddCreatedBy(builder *flatbuffers.Builder, createdBy flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(8, flatbuffers.UOffsetT(createdBy), 0)
}
func LaunchSiteDetails_IngestAddSource(builder *flatbuffers.Builder, source flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(9, flatbuffers.UOffsetT(source), 0)
}
func LaunchSiteDetails_IngestAddOrigin(builder *flatbuffers.Builder, origin flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(10, flatbuffers.UOffsetT(origin), 0)
}
func LaunchSiteDetails_IngestAddOrigNetwork(builder *flatbuffers.Builder, origNetwork flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(11, flatbuffers.UOffsetT(origNetwork), 0)
}
func LaunchSiteDetails_IngestAddDataMode(builder *flatbuffers.Builder, dataMode LaunchSiteDetails_Ingest_dataMode_Enum) {
	builder.PrependInt8Slot(12, int8(dataMode), 0)
}
func LaunchSiteDetails_IngestAddLocation(builder *flatbuffers.Builder, location flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(13, flatbuffers.UOffsetT(location), 0)
}
func LaunchSiteDetails_IngestEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
