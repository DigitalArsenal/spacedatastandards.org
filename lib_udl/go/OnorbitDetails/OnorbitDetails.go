// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package OnorbitDetails

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

/// /// Contains details of the OnOrbit object.
type OnorbitDetails struct {
	_tab flatbuffers.Table
}

const OnorbitDetailsIdentifier = "ONOR"

func GetRootAsOnorbitDetails(buf []byte, offset flatbuffers.UOffsetT) *OnorbitDetails {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &OnorbitDetails{}
	x.Init(buf, n+offset)
	return x
}

func FinishOnorbitDetailsBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	identifierBytes := []byte(OnorbitDetailsIdentifier)
	builder.FinishWithFileIdentifier(offset, identifierBytes)
}

func OnorbitDetailsBufferHasIdentifier(buf []byte) bool {
	return flatbuffers.BufferHasIdentifier(buf, OnorbitDetailsIdentifier)
}

func GetSizePrefixedRootAsOnorbitDetails(buf []byte, offset flatbuffers.UOffsetT) *OnorbitDetails {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &OnorbitDetails{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedOnorbitDetailsBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	identifierBytes := []byte(OnorbitDetailsIdentifier)
	builder.FinishSizePrefixedWithFileIdentifier(offset, identifierBytes)
}

func SizePrefixedOnorbitDetailsBufferHasIdentifier(buf []byte) bool {
	return flatbuffers.SizePrefixedBufferHasIdentifier(buf, OnorbitDetailsIdentifier)
}

func (rcv *OnorbitDetails) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *OnorbitDetails) Table() flatbuffers.Table {
	return rcv._tab
}

/// Unique identifier of the record, auto-generated by the system.
/// Example: /// Example: ONORBITDETAILS-ID
/// Constraints: Minimum length = 1, Maximum length = 36
func (rcv *OnorbitDetails) Id() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Unique identifier of the record, auto-generated by the system.
/// Example: /// Example: ONORBITDETAILS-ID
/// Constraints: Minimum length = 1, Maximum length = 36
/// UUID of the parent Onorbit record.
/// Example: /// Example: REF-ONORBIT-ID
/// Constraints: Minimum length = 1, Maximum length = 36
func (rcv *OnorbitDetails) IdOnOrbit() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// UUID of the parent Onorbit record.
/// Example: /// Example: REF-ONORBIT-ID
/// Constraints: Minimum length = 1, Maximum length = 36
/// Classification marking of the data in IC/CAPCO Portion-marked format.
/// Example: /// Example: U
/// Constraints: Minimum length = 1, Maximum length = 128
func (rcv *OnorbitDetails) ClassificationMarking() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Classification marking of the data in IC/CAPCO Portion-marked format.
/// Example: /// Example: U
/// Constraints: Minimum length = 1, Maximum length = 128
/// Time of last reported observation for this object in ISO 8601 UTC with microsecond precision.
/// Example: /// Example: 2021-01-01T01:01:01.123456Z
/// Constraints: No constraints specified.
func (rcv *OnorbitDetails) LastObTime() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Time of last reported observation for this object in ISO 8601 UTC with microsecond precision.
/// Example: /// Example: 2021-01-01T01:01:01.123456Z
/// Constraints: No constraints specified.
/// Current/latest visual magnitude in M.
/// Example: /// Example: 10.23
/// Constraints: No constraints specified.
func (rcv *OnorbitDetails) Vismag() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Current/latest visual magnitude in M.
/// Example: /// Example: 10.23
/// Constraints: No constraints specified.
func (rcv *OnorbitDetails) MutateVismag(n float64) bool {
	return rcv._tab.MutateFloat64Slot(12, n)
}

/// Minimum visual magnitude in M.
/// Example: /// Example: 5.23
/// Constraints: No constraints specified.
func (rcv *OnorbitDetails) VismagMin() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Minimum visual magnitude in M.
/// Example: /// Example: 5.23
/// Constraints: No constraints specified.
func (rcv *OnorbitDetails) MutateVismagMin(n float64) bool {
	return rcv._tab.MutateFloat64Slot(14, n)
}

/// Maximum visual magnitude in M.
/// Example: /// Example: 15.23
/// Constraints: No constraints specified.
func (rcv *OnorbitDetails) VismagMax() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Maximum visual magnitude in M.
/// Example: /// Example: 15.23
/// Constraints: No constraints specified.
func (rcv *OnorbitDetails) MutateVismagMax(n float64) bool {
	return rcv._tab.MutateFloat64Slot(16, n)
}

/// Mean visual magnitude in M.
/// Example: /// Example: 10.23
/// Constraints: No constraints specified.
func (rcv *OnorbitDetails) VismagMean() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(18))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Mean visual magnitude in M.
/// Example: /// Example: 10.23
/// Constraints: No constraints specified.
func (rcv *OnorbitDetails) MutateVismagMean(n float64) bool {
	return rcv._tab.MutateFloat64Slot(18, n)
}

/// Current/latest radar cross section in meters squared.
/// Example: /// Example: 10.23
/// Constraints: No constraints specified.
func (rcv *OnorbitDetails) Rcs() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(20))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Current/latest radar cross section in meters squared.
/// Example: /// Example: 10.23
/// Constraints: No constraints specified.
func (rcv *OnorbitDetails) MutateRcs(n float64) bool {
	return rcv._tab.MutateFloat64Slot(20, n)
}

/// Minimum radar cross section in meters squared.
/// Example: /// Example: 5.23
/// Constraints: No constraints specified.
func (rcv *OnorbitDetails) RcsMin() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(22))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Minimum radar cross section in meters squared.
/// Example: /// Example: 5.23
/// Constraints: No constraints specified.
func (rcv *OnorbitDetails) MutateRcsMin(n float64) bool {
	return rcv._tab.MutateFloat64Slot(22, n)
}

/// Maximum radar cross section in meters squared.
/// Example: /// Example: 15.23
/// Constraints: No constraints specified.
func (rcv *OnorbitDetails) RcsMax() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(24))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Maximum radar cross section in meters squared.
/// Example: /// Example: 15.23
/// Constraints: No constraints specified.
func (rcv *OnorbitDetails) MutateRcsMax(n float64) bool {
	return rcv._tab.MutateFloat64Slot(24, n)
}

/// Mean radar cross section in meters squared.
/// Example: /// Example: 10.23
/// Constraints: No constraints specified.
func (rcv *OnorbitDetails) RcsMean() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(26))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Mean radar cross section in meters squared.
/// Example: /// Example: 10.23
/// Constraints: No constraints specified.
func (rcv *OnorbitDetails) MutateRcsMean(n float64) bool {
	return rcv._tab.MutateFloat64Slot(26, n)
}

/// The total beginning of life delta V of the spacecraft, in meters per second.
/// Example: /// Example: 1000.1
/// Constraints: No constraints specified.
func (rcv *OnorbitDetails) BolDeltaV() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(28))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// The total beginning of life delta V of the spacecraft, in meters per second.
/// Example: /// Example: 1000.1
/// Constraints: No constraints specified.
func (rcv *OnorbitDetails) MutateBolDeltaV(n float64) bool {
	return rcv._tab.MutateFloat64Slot(28, n)
}

/// Maximum delta V available for this on-orbit spacecraft, in meters per second.
/// Example: /// Example: 10.23
/// Constraints: No constraints specified.
func (rcv *OnorbitDetails) MaxDeltaV() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(30))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Maximum delta V available for this on-orbit spacecraft, in meters per second.
/// Example: /// Example: 10.23
/// Constraints: No constraints specified.
func (rcv *OnorbitDetails) MutateMaxDeltaV(n float64) bool {
	return rcv._tab.MutateFloat64Slot(30, n)
}

/// The 1-sigma uncertainty of the total spacecraft delta V, in meters per second.
/// Example: /// Example: 50.1
/// Constraints: No constraints specified.
func (rcv *OnorbitDetails) DeltaVunc() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(32))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// The 1-sigma uncertainty of the total spacecraft delta V, in meters per second.
/// Example: /// Example: 50.1
/// Constraints: No constraints specified.
func (rcv *OnorbitDetails) MutateDeltaVunc(n float64) bool {
	return rcv._tab.MutateFloat64Slot(32, n)
}

/// Estimated maximum burn duration for the object, in seconds.
/// Example: /// Example: 10.23
/// Constraints: No constraints specified.
func (rcv *OnorbitDetails) EstDeltaVduration() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(34))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Estimated maximum burn duration for the object, in seconds.
/// Example: /// Example: 10.23
/// Constraints: No constraints specified.
func (rcv *OnorbitDetails) MutateEstDeltaVduration(n float64) bool {
	return rcv._tab.MutateFloat64Slot(34, n)
}

/// The number of distinct missions the spacecraft performs.
/// Example: /// Example: 2
/// Constraints: No constraints specified.
func (rcv *OnorbitDetails) NumMission() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(36))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

/// The number of distinct missions the spacecraft performs.
/// Example: /// Example: 2
/// Constraints: No constraints specified.
func (rcv *OnorbitDetails) MutateNumMission(n int32) bool {
	return rcv._tab.MutateInt32Slot(36, n)
}

/// Array of the type of missions the spacecraft performs. Must contain the same number of elements as the value of numMission.
/// Example: /// Example: ['Weather', 'Space Weather']
/// Constraints: No constraints specified.
func (rcv *OnorbitDetails) MissionTypes(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(38))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *OnorbitDetails) MissionTypesLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(38))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

/// Array of the type of missions the spacecraft performs. Must contain the same number of elements as the value of numMission.
/// Example: /// Example: ['Weather', 'Space Weather']
/// Constraints: No constraints specified.
/// Type of the bus on the spacecraft.
/// Example: /// Example: A2100
/// Constraints: Minimum length = 0, Maximum length = 32
func (rcv *OnorbitDetails) BusType() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(40))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Type of the bus on the spacecraft.
/// Example: /// Example: A2100
/// Constraints: Minimum length = 0, Maximum length = 32
/// GEO slot if applicable, in degrees. -180 (West of Prime Meridian) to 180 degrees (East of Prime Meridian). Prime Meridian is 0.
/// Example: /// Example: 90.23
/// Constraints: No constraints specified.
func (rcv *OnorbitDetails) GeoSlot() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(42))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// GEO slot if applicable, in degrees. -180 (West of Prime Meridian) to 180 degrees (East of Prime Meridian). Prime Meridian is 0.
/// Example: /// Example: 90.23
/// Constraints: No constraints specified.
func (rcv *OnorbitDetails) MutateGeoSlot(n float64) bool {
	return rcv._tab.MutateFloat64Slot(42, n)
}

/// GEO drift rate, if applicable in degrees per day.
/// Example: /// Example: 1.23
/// Constraints: No constraints specified.
func (rcv *OnorbitDetails) DriftRate() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(44))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// GEO drift rate, if applicable in degrees per day.
/// Example: /// Example: 1.23
/// Constraints: No constraints specified.
func (rcv *OnorbitDetails) MutateDriftRate(n float64) bool {
	return rcv._tab.MutateFloat64Slot(44, n)
}

/// Spacecraft dry mass (without fuel or disposables) in kilograms.
/// Example: /// Example: 10.23
/// Constraints: No constraints specified.
func (rcv *OnorbitDetails) DryMass() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(46))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Spacecraft dry mass (without fuel or disposables) in kilograms.
/// Example: /// Example: 10.23
/// Constraints: No constraints specified.
func (rcv *OnorbitDetails) MutateDryMass(n float64) bool {
	return rcv._tab.MutateFloat64Slot(46, n)
}

/// Mass of fuel and disposables at launch time in kilograms.
/// Example: /// Example: 10.23
/// Constraints: No constraints specified.
func (rcv *OnorbitDetails) AdditionalMass() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(48))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Mass of fuel and disposables at launch time in kilograms.
/// Example: /// Example: 10.23
/// Constraints: No constraints specified.
func (rcv *OnorbitDetails) MutateAdditionalMass(n float64) bool {
	return rcv._tab.MutateFloat64Slot(48, n)
}

/// Minimum (estimated) mass of spacecraft and fuel at launch time, in kilograms.
/// Example: /// Example: 5.23
/// Constraints: No constraints specified.
func (rcv *OnorbitDetails) LaunchMassMin() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(50))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Minimum (estimated) mass of spacecraft and fuel at launch time, in kilograms.
/// Example: /// Example: 5.23
/// Constraints: No constraints specified.
func (rcv *OnorbitDetails) MutateLaunchMassMin(n float64) bool {
	return rcv._tab.MutateFloat64Slot(50, n)
}

/// Nominal mass of spacecraft and fuel at launch time, in kilograms.
/// Example: /// Example: 10.23
/// Constraints: No constraints specified.
func (rcv *OnorbitDetails) LaunchMass() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(52))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Nominal mass of spacecraft and fuel at launch time, in kilograms.
/// Example: /// Example: 10.23
/// Constraints: No constraints specified.
func (rcv *OnorbitDetails) MutateLaunchMass(n float64) bool {
	return rcv._tab.MutateFloat64Slot(52, n)
}

/// Maximum (estimated) mass of spacecraft and fuel at launch time, in kilograms.
/// Example: /// Example: 15.23
/// Constraints: No constraints specified.
func (rcv *OnorbitDetails) LaunchMassMax() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(54))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Maximum (estimated) mass of spacecraft and fuel at launch time, in kilograms.
/// Example: /// Example: 15.23
/// Constraints: No constraints specified.
func (rcv *OnorbitDetails) MutateLaunchMassMax(n float64) bool {
	return rcv._tab.MutateFloat64Slot(54, n)
}

/// Spacecraft beginning of life fuel mass, in orbit, in kilograms.
/// Example: /// Example: 10.23
/// Constraints: No constraints specified.
func (rcv *OnorbitDetails) BolFuelMass() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(56))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Spacecraft beginning of life fuel mass, in orbit, in kilograms.
/// Example: /// Example: 10.23
/// Constraints: No constraints specified.
func (rcv *OnorbitDetails) MutateBolFuelMass(n float64) bool {
	return rcv._tab.MutateFloat64Slot(56, n)
}

/// The estimated total current mass of the spacecraft, in kilograms.
/// Example: /// Example: 500
/// Constraints: No constraints specified.
func (rcv *OnorbitDetails) CurrentMass() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(58))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// The estimated total current mass of the spacecraft, in kilograms.
/// Example: /// Example: 500
/// Constraints: No constraints specified.
func (rcv *OnorbitDetails) MutateCurrentMass(n float64) bool {
	return rcv._tab.MutateFloat64Slot(58, n)
}

/// The 1-sigma uncertainty of the total spacecraft mass, in kilograms.
/// Example: /// Example: 50.1
/// Constraints: No constraints specified.
func (rcv *OnorbitDetails) TotalMassUnc() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(60))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// The 1-sigma uncertainty of the total spacecraft mass, in kilograms.
/// Example: /// Example: 50.1
/// Constraints: No constraints specified.
func (rcv *OnorbitDetails) MutateTotalMassUnc(n float64) bool {
	return rcv._tab.MutateFloat64Slot(60, n)
}

/// Spacecraft deployed area of solar array in meters squared.
/// Example: /// Example: 10.23
/// Constraints: No constraints specified.
func (rcv *OnorbitDetails) SolarArrayArea() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(62))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Spacecraft deployed area of solar array in meters squared.
/// Example: /// Example: 10.23
/// Constraints: No constraints specified.
func (rcv *OnorbitDetails) MutateSolarArrayArea(n float64) bool {
	return rcv._tab.MutateFloat64Slot(62, n)
}

/// Boolean indicating whether a spacecraft is maneuverable. Note that a spacecraft may have propulsion capability but may not be maneuverable due to lack of fuel, anomalous condition, or other operational constraints.
/// Example: /// Example: False
/// Constraints: No constraints specified.
func (rcv *OnorbitDetails) Maneuverable() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(64))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

/// Boolean indicating whether a spacecraft is maneuverable. Note that a spacecraft may have propulsion capability but may not be maneuverable due to lack of fuel, anomalous condition, or other operational constraints.
/// Example: /// Example: False
/// Constraints: No constraints specified.
func (rcv *OnorbitDetails) MutateManeuverable(n bool) bool {
	return rcv._tab.MutateBoolSlot(64, n)
}

/// Estimated remaining fuel for the object in kilograms.
/// Example: /// Example: 10.23
/// Constraints: No constraints specified.
func (rcv *OnorbitDetails) FuelRemaining() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(66))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Estimated remaining fuel for the object in kilograms.
/// Example: /// Example: 10.23
/// Constraints: No constraints specified.
func (rcv *OnorbitDetails) MutateFuelRemaining(n float64) bool {
	return rcv._tab.MutateFloat64Slot(66, n)
}

/// Average cross sectional area in meters squared.
/// Example: /// Example: 10.23
/// Constraints: No constraints specified.
func (rcv *OnorbitDetails) CrossSection() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(68))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Average cross sectional area in meters squared.
/// Example: /// Example: 10.23
/// Constraints: No constraints specified.
func (rcv *OnorbitDetails) MutateCrossSection(n float64) bool {
	return rcv._tab.MutateFloat64Slot(68, n)
}

/// Average cross sectional area of the bus in meters squared.
/// Example: /// Example: 10.23
/// Constraints: No constraints specified.
func (rcv *OnorbitDetails) BusCrossSection() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(70))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Average cross sectional area of the bus in meters squared.
/// Example: /// Example: 10.23
/// Constraints: No constraints specified.
func (rcv *OnorbitDetails) MutateBusCrossSection(n float64) bool {
	return rcv._tab.MutateFloat64Slot(70, n)
}

/// Maximum dimension across the spacecraft (e.g., tip-to-tip across the solar panel arrays) in meters.
/// Example: /// Example: 10.23
/// Constraints: No constraints specified.
func (rcv *OnorbitDetails) MaxRadius() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(72))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Maximum dimension across the spacecraft (e.g., tip-to-tip across the solar panel arrays) in meters.
/// Example: /// Example: 10.23
/// Constraints: No constraints specified.
func (rcv *OnorbitDetails) MutateMaxRadius(n float64) bool {
	return rcv._tab.MutateFloat64Slot(72, n)
}

/// Maximum dimension of the box circumscribing the spacecraft (d = sqrt(a*a + b*b + c*c) where a is the tip-to-tip dimension, b and c are perpendicular to that.) in meters.
/// Example: /// Example: 10.23
/// Constraints: No constraints specified.
func (rcv *OnorbitDetails) ColaRadius() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(74))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Maximum dimension of the box circumscribing the spacecraft (d = sqrt(a*a + b*b + c*c) where a is the tip-to-tip dimension, b and c are perpendicular to that.) in meters.
/// Example: /// Example: 10.23
/// Constraints: No constraints specified.
func (rcv *OnorbitDetails) MutateColaRadius(n float64) bool {
	return rcv._tab.MutateFloat64Slot(74, n)
}

/// The radius used for long-term debris environment projection analyses that is not as conservative as COLA Radius, in meters.
/// Example: /// Example: 10.23
/// Constraints: No constraints specified.
func (rcv *OnorbitDetails) AdeptRadius() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(76))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// The radius used for long-term debris environment projection analyses that is not as conservative as COLA Radius, in meters.
/// Example: /// Example: 10.23
/// Constraints: No constraints specified.
func (rcv *OnorbitDetails) MutateAdeptRadius(n float64) bool {
	return rcv._tab.MutateFloat64Slot(76, n)
}

/// The number of sub-satellites or deployable objects on the spacecraft.
/// Example: /// Example: 2
/// Constraints: No constraints specified.
func (rcv *OnorbitDetails) NumDeployable() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(78))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

/// The number of sub-satellites or deployable objects on the spacecraft.
/// Example: /// Example: 2
/// Constraints: No constraints specified.
func (rcv *OnorbitDetails) MutateNumDeployable(n int32) bool {
	return rcv._tab.MutateInt32Slot(78, n)
}

/// Array of satellite deployable objects. Must contain the same number of elements as the value of numDeployable.
/// Example: /// Example: ['GOES-18A', 'GOES-18B']
/// Constraints: No constraints specified.
func (rcv *OnorbitDetails) DepNames(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(80))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *OnorbitDetails) DepNamesLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(80))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

/// Array of satellite deployable objects. Must contain the same number of elements as the value of numDeployable.
/// Example: /// Example: ['GOES-18A', 'GOES-18B']
/// Constraints: No constraints specified.
/// Array of the estimated mass of each deployable object, in kilograms. Must contain the same number of elements as the value of numDeployable.
/// Example: /// Example: [20, 21]
/// Constraints: No constraints specified.
func (rcv *OnorbitDetails) DepEstMasses(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(82))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *OnorbitDetails) DepEstMassesLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(82))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

/// Array of the estimated mass of each deployable object, in kilograms. Must contain the same number of elements as the value of numDeployable.
/// Example: /// Example: [20, 21]
/// Constraints: No constraints specified.
/// Array of the 1-sigma uncertainty of the mass for each deployable object, in kilograms. Must contain the same number of elements as the value of numDeployable.
/// Example: /// Example: [10, 5]
/// Constraints: No constraints specified.
func (rcv *OnorbitDetails) DepMassUncs(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(84))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *OnorbitDetails) DepMassUncsLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(84))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

/// Array of the 1-sigma uncertainty of the mass for each deployable object, in kilograms. Must contain the same number of elements as the value of numDeployable.
/// Example: /// Example: [10, 5]
/// Constraints: No constraints specified.
/// Source of the data.
/// Example: /// Example: Bluestaq
/// Constraints: Minimum length = 1, Maximum length = 64
func (rcv *OnorbitDetails) Source() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(86))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Source of the data.
/// Example: /// Example: Bluestaq
/// Constraints: Minimum length = 1, Maximum length = 64
/// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
/// Example: /// Example: THIRD_PARTY_DATASOURCE
/// Constraints: Minimum length = 0, Maximum length = 64
func (rcv *OnorbitDetails) Origin() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(88))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
/// Example: /// Example: THIRD_PARTY_DATASOURCE
/// Constraints: Minimum length = 0, Maximum length = 64
/// The name of the source who last provided an observation for this idOnOrbit.
/// Example: /// Example: THIRD_PARTY_DATASOURCE
/// Constraints: Minimum length = 0, Maximum length = 64
func (rcv *OnorbitDetails) LastObSource() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(90))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The name of the source who last provided an observation for this idOnOrbit.
/// Example: /// Example: THIRD_PARTY_DATASOURCE
/// Constraints: Minimum length = 0, Maximum length = 64
/// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
/// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
/// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
/// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
/// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
/// Example: /// Example: TEST
/// Constraints: Minimum length = 1, Maximum length = 32
func (rcv *OnorbitDetails) DataMode() OnorbitDetails_dataMode_Enum {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(92))
	if o != 0 {
		return OnorbitDetails_dataMode_Enum(rcv._tab.GetInt8(o + rcv._tab.Pos))
	}
	return 0
}

/// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
/// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
/// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
/// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
/// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
/// Example: /// Example: TEST
/// Constraints: Minimum length = 1, Maximum length = 32
func (rcv *OnorbitDetails) MutateDataMode(n OnorbitDetails_dataMode_Enum) bool {
	return rcv._tab.MutateInt8Slot(92, int8(n))
}

/// Time the row was created in the database, auto-populated by the system.
/// Example: /// Example: 2018-01-01T16:00:00.123Z
/// Constraints: No constraints specified.
func (rcv *OnorbitDetails) CreatedAt() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(94))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Time the row was created in the database, auto-populated by the system.
/// Example: /// Example: 2018-01-01T16:00:00.123Z
/// Constraints: No constraints specified.
/// Application user who created the row in the database, auto-populated by the system.
/// Example: /// Example: some.user
/// Constraints: Minimum length = 1, Maximum length = 64
func (rcv *OnorbitDetails) CreatedBy() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(96))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Application user who created the row in the database, auto-populated by the system.
/// Example: /// Example: some.user
/// Constraints: Minimum length = 1, Maximum length = 64
/// Time the row was last updated in the database, auto-populated by the system.
/// Example: /// Example: 2018-01-01T16:00:00.123Z
/// Constraints: No constraints specified.
func (rcv *OnorbitDetails) UpdatedAt() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(98))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Time the row was last updated in the database, auto-populated by the system.
/// Example: /// Example: 2018-01-01T16:00:00.123Z
/// Constraints: No constraints specified.
/// Application user who updated the row in the database, auto-populated by the system.
/// Example: /// Example: some.user
/// Constraints: Minimum length = 0, Maximum length = 64
func (rcv *OnorbitDetails) UpdatedBy() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(100))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Application user who updated the row in the database, auto-populated by the system.
/// Example: /// Example: some.user
/// Constraints: Minimum length = 0, Maximum length = 64
/// The originating source network on which this record was created, auto-populated by the system.
/// Example: /// Example: OPS1
/// Constraints: Minimum length = 1, Maximum length = 32
func (rcv *OnorbitDetails) OrigNetwork() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(102))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The originating source network on which this record was created, auto-populated by the system.
/// Example: /// Example: OPS1
/// Constraints: Minimum length = 1, Maximum length = 32
func OnorbitDetailsStart(builder *flatbuffers.Builder) {
	builder.StartObject(50)
}
func OnorbitDetailsAddId(builder *flatbuffers.Builder, id flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(id), 0)
}
func OnorbitDetailsAddIdOnOrbit(builder *flatbuffers.Builder, idOnOrbit flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(idOnOrbit), 0)
}
func OnorbitDetailsAddClassificationMarking(builder *flatbuffers.Builder, classificationMarking flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(classificationMarking), 0)
}
func OnorbitDetailsAddLastObTime(builder *flatbuffers.Builder, lastObTime flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(3, flatbuffers.UOffsetT(lastObTime), 0)
}
func OnorbitDetailsAddVismag(builder *flatbuffers.Builder, vismag float64) {
	builder.PrependFloat64Slot(4, vismag, 0.0)
}
func OnorbitDetailsAddVismagMin(builder *flatbuffers.Builder, vismagMin float64) {
	builder.PrependFloat64Slot(5, vismagMin, 0.0)
}
func OnorbitDetailsAddVismagMax(builder *flatbuffers.Builder, vismagMax float64) {
	builder.PrependFloat64Slot(6, vismagMax, 0.0)
}
func OnorbitDetailsAddVismagMean(builder *flatbuffers.Builder, vismagMean float64) {
	builder.PrependFloat64Slot(7, vismagMean, 0.0)
}
func OnorbitDetailsAddRcs(builder *flatbuffers.Builder, rcs float64) {
	builder.PrependFloat64Slot(8, rcs, 0.0)
}
func OnorbitDetailsAddRcsMin(builder *flatbuffers.Builder, rcsMin float64) {
	builder.PrependFloat64Slot(9, rcsMin, 0.0)
}
func OnorbitDetailsAddRcsMax(builder *flatbuffers.Builder, rcsMax float64) {
	builder.PrependFloat64Slot(10, rcsMax, 0.0)
}
func OnorbitDetailsAddRcsMean(builder *flatbuffers.Builder, rcsMean float64) {
	builder.PrependFloat64Slot(11, rcsMean, 0.0)
}
func OnorbitDetailsAddBolDeltaV(builder *flatbuffers.Builder, bolDeltaV float64) {
	builder.PrependFloat64Slot(12, bolDeltaV, 0.0)
}
func OnorbitDetailsAddMaxDeltaV(builder *flatbuffers.Builder, maxDeltaV float64) {
	builder.PrependFloat64Slot(13, maxDeltaV, 0.0)
}
func OnorbitDetailsAddDeltaVunc(builder *flatbuffers.Builder, deltaVunc float64) {
	builder.PrependFloat64Slot(14, deltaVunc, 0.0)
}
func OnorbitDetailsAddEstDeltaVduration(builder *flatbuffers.Builder, estDeltaVduration float64) {
	builder.PrependFloat64Slot(15, estDeltaVduration, 0.0)
}
func OnorbitDetailsAddNumMission(builder *flatbuffers.Builder, numMission int32) {
	builder.PrependInt32Slot(16, numMission, 0)
}
func OnorbitDetailsAddMissionTypes(builder *flatbuffers.Builder, missionTypes flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(17, flatbuffers.UOffsetT(missionTypes), 0)
}
func OnorbitDetailsStartMissionTypesVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func OnorbitDetailsAddBusType(builder *flatbuffers.Builder, busType flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(18, flatbuffers.UOffsetT(busType), 0)
}
func OnorbitDetailsAddGeoSlot(builder *flatbuffers.Builder, geoSlot float64) {
	builder.PrependFloat64Slot(19, geoSlot, 0.0)
}
func OnorbitDetailsAddDriftRate(builder *flatbuffers.Builder, driftRate float64) {
	builder.PrependFloat64Slot(20, driftRate, 0.0)
}
func OnorbitDetailsAddDryMass(builder *flatbuffers.Builder, dryMass float64) {
	builder.PrependFloat64Slot(21, dryMass, 0.0)
}
func OnorbitDetailsAddAdditionalMass(builder *flatbuffers.Builder, additionalMass float64) {
	builder.PrependFloat64Slot(22, additionalMass, 0.0)
}
func OnorbitDetailsAddLaunchMassMin(builder *flatbuffers.Builder, launchMassMin float64) {
	builder.PrependFloat64Slot(23, launchMassMin, 0.0)
}
func OnorbitDetailsAddLaunchMass(builder *flatbuffers.Builder, launchMass float64) {
	builder.PrependFloat64Slot(24, launchMass, 0.0)
}
func OnorbitDetailsAddLaunchMassMax(builder *flatbuffers.Builder, launchMassMax float64) {
	builder.PrependFloat64Slot(25, launchMassMax, 0.0)
}
func OnorbitDetailsAddBolFuelMass(builder *flatbuffers.Builder, bolFuelMass float64) {
	builder.PrependFloat64Slot(26, bolFuelMass, 0.0)
}
func OnorbitDetailsAddCurrentMass(builder *flatbuffers.Builder, currentMass float64) {
	builder.PrependFloat64Slot(27, currentMass, 0.0)
}
func OnorbitDetailsAddTotalMassUnc(builder *flatbuffers.Builder, totalMassUnc float64) {
	builder.PrependFloat64Slot(28, totalMassUnc, 0.0)
}
func OnorbitDetailsAddSolarArrayArea(builder *flatbuffers.Builder, solarArrayArea float64) {
	builder.PrependFloat64Slot(29, solarArrayArea, 0.0)
}
func OnorbitDetailsAddManeuverable(builder *flatbuffers.Builder, maneuverable bool) {
	builder.PrependBoolSlot(30, maneuverable, false)
}
func OnorbitDetailsAddFuelRemaining(builder *flatbuffers.Builder, fuelRemaining float64) {
	builder.PrependFloat64Slot(31, fuelRemaining, 0.0)
}
func OnorbitDetailsAddCrossSection(builder *flatbuffers.Builder, crossSection float64) {
	builder.PrependFloat64Slot(32, crossSection, 0.0)
}
func OnorbitDetailsAddBusCrossSection(builder *flatbuffers.Builder, busCrossSection float64) {
	builder.PrependFloat64Slot(33, busCrossSection, 0.0)
}
func OnorbitDetailsAddMaxRadius(builder *flatbuffers.Builder, maxRadius float64) {
	builder.PrependFloat64Slot(34, maxRadius, 0.0)
}
func OnorbitDetailsAddColaRadius(builder *flatbuffers.Builder, colaRadius float64) {
	builder.PrependFloat64Slot(35, colaRadius, 0.0)
}
func OnorbitDetailsAddAdeptRadius(builder *flatbuffers.Builder, adeptRadius float64) {
	builder.PrependFloat64Slot(36, adeptRadius, 0.0)
}
func OnorbitDetailsAddNumDeployable(builder *flatbuffers.Builder, numDeployable int32) {
	builder.PrependInt32Slot(37, numDeployable, 0)
}
func OnorbitDetailsAddDepNames(builder *flatbuffers.Builder, depNames flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(38, flatbuffers.UOffsetT(depNames), 0)
}
func OnorbitDetailsStartDepNamesVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func OnorbitDetailsAddDepEstMasses(builder *flatbuffers.Builder, depEstMasses flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(39, flatbuffers.UOffsetT(depEstMasses), 0)
}
func OnorbitDetailsStartDepEstMassesVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func OnorbitDetailsAddDepMassUncs(builder *flatbuffers.Builder, depMassUncs flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(40, flatbuffers.UOffsetT(depMassUncs), 0)
}
func OnorbitDetailsStartDepMassUncsVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func OnorbitDetailsAddSource(builder *flatbuffers.Builder, source flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(41, flatbuffers.UOffsetT(source), 0)
}
func OnorbitDetailsAddOrigin(builder *flatbuffers.Builder, origin flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(42, flatbuffers.UOffsetT(origin), 0)
}
func OnorbitDetailsAddLastObSource(builder *flatbuffers.Builder, lastObSource flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(43, flatbuffers.UOffsetT(lastObSource), 0)
}
func OnorbitDetailsAddDataMode(builder *flatbuffers.Builder, dataMode OnorbitDetails_dataMode_Enum) {
	builder.PrependInt8Slot(44, int8(dataMode), 0)
}
func OnorbitDetailsAddCreatedAt(builder *flatbuffers.Builder, createdAt flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(45, flatbuffers.UOffsetT(createdAt), 0)
}
func OnorbitDetailsAddCreatedBy(builder *flatbuffers.Builder, createdBy flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(46, flatbuffers.UOffsetT(createdBy), 0)
}
func OnorbitDetailsAddUpdatedAt(builder *flatbuffers.Builder, updatedAt flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(47, flatbuffers.UOffsetT(updatedAt), 0)
}
func OnorbitDetailsAddUpdatedBy(builder *flatbuffers.Builder, updatedBy flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(48, flatbuffers.UOffsetT(updatedBy), 0)
}
func OnorbitDetailsAddOrigNetwork(builder *flatbuffers.Builder, origNetwork flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(49, flatbuffers.UOffsetT(origNetwork), 0)
}
func OnorbitDetailsEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
