// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package MtiHRR_Ingest

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

/// /// Data on High-Range Resolution (HRR) targets or High Range Resolution Range Doppler Maps (RDM) for a specified area.
type MtiHRR_Ingest struct {
	_tab flatbuffers.Table
}

const MtiHRR_IngestIdentifier = "MTIH"

func GetRootAsMtiHRR_Ingest(buf []byte, offset flatbuffers.UOffsetT) *MtiHRR_Ingest {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &MtiHRR_Ingest{}
	x.Init(buf, n+offset)
	return x
}

func FinishMtiHRR_IngestBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	identifierBytes := []byte(MtiHRR_IngestIdentifier)
	builder.FinishWithFileIdentifier(offset, identifierBytes)
}

func MtiHRR_IngestBufferHasIdentifier(buf []byte) bool {
	return flatbuffers.BufferHasIdentifier(buf, MtiHRR_IngestIdentifier)
}

func GetSizePrefixedRootAsMtiHRR_Ingest(buf []byte, offset flatbuffers.UOffsetT) *MtiHRR_Ingest {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &MtiHRR_Ingest{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedMtiHRR_IngestBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	identifierBytes := []byte(MtiHRR_IngestIdentifier)
	builder.FinishSizePrefixedWithFileIdentifier(offset, identifierBytes)
}

func SizePrefixedMtiHRR_IngestBufferHasIdentifier(buf []byte) bool {
	return flatbuffers.SizePrefixedBufferHasIdentifier(buf, MtiHRR_IngestIdentifier)
}

func (rcv *MtiHRR_Ingest) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *MtiHRR_Ingest) Table() flatbuffers.Table {
	return rcv._tab
}

/// Sequential count of a revisit of the bounding area for a given job ID.
/// Example: /// Example: 12
/// Constraints: No constraints specified.
func (rcv *MtiHRR_Ingest) H2() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

/// Sequential count of a revisit of the bounding area for a given job ID.
/// Example: /// Example: 12
/// Constraints: No constraints specified.
func (rcv *MtiHRR_Ingest) MutateH2(n int32) bool {
	return rcv._tab.MutateInt32Slot(4, n)
}

/// Sequential count of a dwell within the revisit of a particular bounding area for a given job ID.
/// Example: /// Example: 12
/// Constraints: No constraints specified.
func (rcv *MtiHRR_Ingest) H3() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

/// Sequential count of a dwell within the revisit of a particular bounding area for a given job ID.
/// Example: /// Example: 12
/// Constraints: No constraints specified.
func (rcv *MtiHRR_Ingest) MutateH3(n int32) bool {
	return rcv._tab.MutateInt32Slot(6, n)
}

/// Flag to indicate the last dwell of the revisit.
/// Example: /// Example: True
/// Constraints: No constraints specified.
func (rcv *MtiHRR_Ingest) H4() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

/// Flag to indicate the last dwell of the revisit.
/// Example: /// Example: True
/// Constraints: No constraints specified.
func (rcv *MtiHRR_Ingest) MutateH4(n bool) bool {
	return rcv._tab.MutateBoolSlot(8, n)
}

/// Sequential index of the associated MTI Report.
/// Example: /// Example: 12
/// Constraints: No constraints specified.
func (rcv *MtiHRR_Ingest) H5() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

/// Sequential index of the associated MTI Report.
/// Example: /// Example: 12
/// Constraints: No constraints specified.
func (rcv *MtiHRR_Ingest) MutateH5(n int32) bool {
	return rcv._tab.MutateInt32Slot(10, n)
}

/// Number of Range Doppler pixels that exceed target scatterer threshold and are reported in this segment.
/// Example: /// Example: 12
/// Constraints: No constraints specified.
func (rcv *MtiHRR_Ingest) H6() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

/// Number of Range Doppler pixels that exceed target scatterer threshold and are reported in this segment.
/// Example: /// Example: 12
/// Constraints: No constraints specified.
func (rcv *MtiHRR_Ingest) MutateH6(n int32) bool {
	return rcv._tab.MutateInt32Slot(12, n)
}

/// Number of Range Bins/Samples in a Range Doppler Chip.
/// Example: /// Example: 12
/// Constraints: No constraints specified.
func (rcv *MtiHRR_Ingest) H7() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

/// Number of Range Bins/Samples in a Range Doppler Chip.
/// Example: /// Example: 12
/// Constraints: No constraints specified.
func (rcv *MtiHRR_Ingest) MutateH7(n int32) bool {
	return rcv._tab.MutateInt32Slot(14, n)
}

/// Number of Doppler bins in a Range-Doppler chip.
/// Example: /// Example: 12
/// Constraints: No constraints specified.
func (rcv *MtiHRR_Ingest) H8() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

/// Number of Doppler bins in a Range-Doppler chip.
/// Example: /// Example: 12
/// Constraints: No constraints specified.
func (rcv *MtiHRR_Ingest) MutateH8(n int32) bool {
	return rcv._tab.MutateInt32Slot(16, n)
}

/// The Peak Scatter returns the maximum power level (e.g. in milliwatts, or dBm) registered by the sensor.
/// Example: /// Example: 1
/// Constraints: No constraints specified.
func (rcv *MtiHRR_Ingest) H9() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(18))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

/// The Peak Scatter returns the maximum power level (e.g. in milliwatts, or dBm) registered by the sensor.
/// Example: /// Example: 1
/// Constraints: No constraints specified.
func (rcv *MtiHRR_Ingest) MutateH9(n int32) bool {
	return rcv._tab.MutateInt32Slot(18, n)
}

/// Detection threshold used to isolate significant target scatterer pixels, expressed as power relative to clutter mean in negative quarter-decibels.
/// Example: /// Example: 1
/// Constraints: No constraints specified.
func (rcv *MtiHRR_Ingest) H10() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(20))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

/// Detection threshold used to isolate significant target scatterer pixels, expressed as power relative to clutter mean in negative quarter-decibels.
/// Example: /// Example: 1
/// Constraints: No constraints specified.
func (rcv *MtiHRR_Ingest) MutateH10(n int32) bool {
	return rcv._tab.MutateInt32Slot(20, n)
}

/// 3dB range impulse response of the radar, expressed in centimeters.
/// Example: /// Example: 12.23
/// Constraints: No constraints specified.
func (rcv *MtiHRR_Ingest) H11() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(22))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// 3dB range impulse response of the radar, expressed in centimeters.
/// Example: /// Example: 12.23
/// Constraints: No constraints specified.
func (rcv *MtiHRR_Ingest) MutateH11(n float64) bool {
	return rcv._tab.MutateFloat64Slot(22, n)
}

/// Slant Range pixel spacing after over sampling, expressed in centimeters.
/// Example: /// Example: 12.23
/// Constraints: No constraints specified.
func (rcv *MtiHRR_Ingest) H12() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(24))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Slant Range pixel spacing after over sampling, expressed in centimeters.
/// Example: /// Example: 12.23
/// Constraints: No constraints specified.
func (rcv *MtiHRR_Ingest) MutateH12(n float64) bool {
	return rcv._tab.MutateFloat64Slot(24, n)
}

/// 3dB Doppler resolution of the radar, expressed in Hertz.
/// Example: /// Example: 12.23
/// Constraints: No constraints specified.
func (rcv *MtiHRR_Ingest) H13() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(26))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// 3dB Doppler resolution of the radar, expressed in Hertz.
/// Example: /// Example: 12.23
/// Constraints: No constraints specified.
func (rcv *MtiHRR_Ingest) MutateH13(n float64) bool {
	return rcv._tab.MutateFloat64Slot(26, n)
}

/// Doppler pixel spacing after over sampling, expressed in Hertz.
/// Example: /// Example: 12.23
/// Constraints: No constraints specified.
func (rcv *MtiHRR_Ingest) H14() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(28))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Doppler pixel spacing after over sampling, expressed in Hertz.
/// Example: /// Example: 12.23
/// Constraints: No constraints specified.
func (rcv *MtiHRR_Ingest) MutateH14(n float64) bool {
	return rcv._tab.MutateFloat64Slot(28, n)
}

/// Center Frequency of the radar in GHz.
/// Example: /// Example: 12.23
/// Constraints: No constraints specified.
func (rcv *MtiHRR_Ingest) H15() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(30))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Center Frequency of the radar in GHz.
/// Example: /// Example: 12.23
/// Constraints: No constraints specified.
func (rcv *MtiHRR_Ingest) MutateH15(n float64) bool {
	return rcv._tab.MutateFloat64Slot(30, n)
}

/// Enumeration table denoting the compression technique used.
/// Example: /// Example: TABLE
/// Constraints: Minimum length = 0, Maximum length = 32
func (rcv *MtiHRR_Ingest) H16() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(32))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Enumeration table denoting the compression technique used.
/// Example: /// Example: TABLE
/// Constraints: Minimum length = 0, Maximum length = 32
/// Enumeration table indicating the spectral weighting used in the range compression process.
/// Example: /// Example: TABLE
/// Constraints: Minimum length = 0, Maximum length = 32
func (rcv *MtiHRR_Ingest) H17() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(34))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Enumeration table indicating the spectral weighting used in the range compression process.
/// Example: /// Example: TABLE
/// Constraints: Minimum length = 0, Maximum length = 32
/// Enumeration table indicating the spectral weighting used in the cross-range or Doppler compression process.
/// Example: /// Example: TABLE
/// Constraints: Minimum length = 0, Maximum length = 32
func (rcv *MtiHRR_Ingest) H18() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(36))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Enumeration table indicating the spectral weighting used in the cross-range or Doppler compression process.
/// Example: /// Example: TABLE
/// Constraints: Minimum length = 0, Maximum length = 32
/// Initial power of the peak scatterer, expressed in dB.
/// Example: /// Example: 12.23
/// Constraints: No constraints specified.
func (rcv *MtiHRR_Ingest) H19() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(38))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Initial power of the peak scatterer, expressed in dB.
/// Example: /// Example: 12.23
/// Constraints: No constraints specified.
func (rcv *MtiHRR_Ingest) MutateH19(n float64) bool {
	return rcv._tab.MutateFloat64Slot(38, n)
}

/// RCS of the peak scatterer, expressed in half-decibels (dB/2).
/// Example: /// Example: 117
/// Constraints: No constraints specified.
func (rcv *MtiHRR_Ingest) H20() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(40))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

/// RCS of the peak scatterer, expressed in half-decibels (dB/2).
/// Example: /// Example: 117
/// Constraints: No constraints specified.
func (rcv *MtiHRR_Ingest) MutateH20(n int32) bool {
	return rcv._tab.MutateInt32Slot(40, n)
}

/// When the RDM does not correlate to a single MTI report index or when the center range bin does not correlate to the center of the dwell; provide the range sample offset in meters from Dwell Center (positive is away from the sensor) of the first scatterer record.
/// Example: /// Example: 1
/// Constraints: No constraints specified.
func (rcv *MtiHRR_Ingest) H21() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(42))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

/// When the RDM does not correlate to a single MTI report index or when the center range bin does not correlate to the center of the dwell; provide the range sample offset in meters from Dwell Center (positive is away from the sensor) of the first scatterer record.
/// Example: /// Example: 1
/// Constraints: No constraints specified.
func (rcv *MtiHRR_Ingest) MutateH21(n int32) bool {
	return rcv._tab.MutateInt32Slot(42, n)
}

/// When the RDM does not correlate to a single MTI report index or the center doppler bin does not correlate to the doppler centroid of the dwell; Doppler sample value in Hz of the first scatterer record.
/// Example: /// Example: 1
/// Constraints: No constraints specified.
func (rcv *MtiHRR_Ingest) H22() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(44))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

/// When the RDM does not correlate to a single MTI report index or the center doppler bin does not correlate to the doppler centroid of the dwell; Doppler sample value in Hz of the first scatterer record.
/// Example: /// Example: 1
/// Constraints: No constraints specified.
func (rcv *MtiHRR_Ingest) MutateH22(n int32) bool {
	return rcv._tab.MutateInt32Slot(44, n)
}

/// Enumeration field which designates the type of data being delivered.
/// Example: /// Example: FIELD
/// Constraints: Minimum length = 0, Maximum length = 32
func (rcv *MtiHRR_Ingest) H23() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(46))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Enumeration field which designates the type of data being delivered.
/// Example: /// Example: FIELD
/// Constraints: Minimum length = 0, Maximum length = 32
/// Flag field to indicate the additional signal processing techniques applied to the data.
/// Example: /// Example: FLAG
/// Constraints: Minimum length = 0, Maximum length = 64
func (rcv *MtiHRR_Ingest) H24() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(48))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Flag field to indicate the additional signal processing techniques applied to the data.
/// Example: /// Example: FLAG
/// Constraints: Minimum length = 0, Maximum length = 64
/// Number of pixels in the range dimension of the chip.
/// Example: /// Example: 1
/// Constraints: No constraints specified.
func (rcv *MtiHRR_Ingest) H27() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(50))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

/// Number of pixels in the range dimension of the chip.
/// Example: /// Example: 1
/// Constraints: No constraints specified.
func (rcv *MtiHRR_Ingest) MutateH27(n int32) bool {
	return rcv._tab.MutateInt32Slot(50, n)
}

/// Distance from Range Bin to closest edge in the entire chip, expressed in centimeters.
/// Example: /// Example: 1234567890
/// Constraints: No constraints specified.
func (rcv *MtiHRR_Ingest) H28() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(52))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

/// Distance from Range Bin to closest edge in the entire chip, expressed in centimeters.
/// Example: /// Example: 1234567890
/// Constraints: No constraints specified.
func (rcv *MtiHRR_Ingest) MutateH28(n int64) bool {
	return rcv._tab.MutateInt64Slot(52, n)
}

/// Relative velocity to skin line.
/// Example: /// Example: 1
/// Constraints: No constraints specified.
func (rcv *MtiHRR_Ingest) H29() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(54))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

/// Relative velocity to skin line.
/// Example: /// Example: 1
/// Constraints: No constraints specified.
func (rcv *MtiHRR_Ingest) MutateH29(n int32) bool {
	return rcv._tab.MutateInt32Slot(54, n)
}

/// Computed object length based upon HRR profile, in meters.
/// Example: /// Example: 22
/// Constraints: No constraints specified.
func (rcv *MtiHRR_Ingest) H30() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(56))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

/// Computed object length based upon HRR profile, in meters.
/// Example: /// Example: 22
/// Constraints: No constraints specified.
func (rcv *MtiHRR_Ingest) MutateH30(n int32) bool {
	return rcv._tab.MutateInt32Slot(56, n)
}

/// Standard deviation of estimate of the object length, expressed in meters.
/// Example: /// Example: 55
/// Constraints: No constraints specified.
func (rcv *MtiHRR_Ingest) H31() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(58))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

/// Standard deviation of estimate of the object length, expressed in meters.
/// Example: /// Example: 55
/// Constraints: No constraints specified.
func (rcv *MtiHRR_Ingest) MutateH31(n int32) bool {
	return rcv._tab.MutateInt32Slot(58, n)
}

/// Standard deviation of estimate of the object length, expressed in meters.
/// Example: /// Example: No example provided.
/// Constraints: No constraints specified.
func (rcv *MtiHRR_Ingest) H32(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(60))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *MtiHRR_Ingest) H32Length() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(60))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

/// Standard deviation of estimate of the object length, expressed in meters.
/// Example: /// Example: No example provided.
/// Constraints: No constraints specified.
func MtiHRR_IngestStart(builder *flatbuffers.Builder) {
	builder.StartObject(29)
}
func MtiHRR_IngestAddH2(builder *flatbuffers.Builder, h2 int32) {
	builder.PrependInt32Slot(0, h2, 0)
}
func MtiHRR_IngestAddH3(builder *flatbuffers.Builder, h3 int32) {
	builder.PrependInt32Slot(1, h3, 0)
}
func MtiHRR_IngestAddH4(builder *flatbuffers.Builder, h4 bool) {
	builder.PrependBoolSlot(2, h4, false)
}
func MtiHRR_IngestAddH5(builder *flatbuffers.Builder, h5 int32) {
	builder.PrependInt32Slot(3, h5, 0)
}
func MtiHRR_IngestAddH6(builder *flatbuffers.Builder, h6 int32) {
	builder.PrependInt32Slot(4, h6, 0)
}
func MtiHRR_IngestAddH7(builder *flatbuffers.Builder, h7 int32) {
	builder.PrependInt32Slot(5, h7, 0)
}
func MtiHRR_IngestAddH8(builder *flatbuffers.Builder, h8 int32) {
	builder.PrependInt32Slot(6, h8, 0)
}
func MtiHRR_IngestAddH9(builder *flatbuffers.Builder, h9 int32) {
	builder.PrependInt32Slot(7, h9, 0)
}
func MtiHRR_IngestAddH10(builder *flatbuffers.Builder, h10 int32) {
	builder.PrependInt32Slot(8, h10, 0)
}
func MtiHRR_IngestAddH11(builder *flatbuffers.Builder, h11 float64) {
	builder.PrependFloat64Slot(9, h11, 0.0)
}
func MtiHRR_IngestAddH12(builder *flatbuffers.Builder, h12 float64) {
	builder.PrependFloat64Slot(10, h12, 0.0)
}
func MtiHRR_IngestAddH13(builder *flatbuffers.Builder, h13 float64) {
	builder.PrependFloat64Slot(11, h13, 0.0)
}
func MtiHRR_IngestAddH14(builder *flatbuffers.Builder, h14 float64) {
	builder.PrependFloat64Slot(12, h14, 0.0)
}
func MtiHRR_IngestAddH15(builder *flatbuffers.Builder, h15 float64) {
	builder.PrependFloat64Slot(13, h15, 0.0)
}
func MtiHRR_IngestAddH16(builder *flatbuffers.Builder, h16 flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(14, flatbuffers.UOffsetT(h16), 0)
}
func MtiHRR_IngestAddH17(builder *flatbuffers.Builder, h17 flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(15, flatbuffers.UOffsetT(h17), 0)
}
func MtiHRR_IngestAddH18(builder *flatbuffers.Builder, h18 flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(16, flatbuffers.UOffsetT(h18), 0)
}
func MtiHRR_IngestAddH19(builder *flatbuffers.Builder, h19 float64) {
	builder.PrependFloat64Slot(17, h19, 0.0)
}
func MtiHRR_IngestAddH20(builder *flatbuffers.Builder, h20 int32) {
	builder.PrependInt32Slot(18, h20, 0)
}
func MtiHRR_IngestAddH21(builder *flatbuffers.Builder, h21 int32) {
	builder.PrependInt32Slot(19, h21, 0)
}
func MtiHRR_IngestAddH22(builder *flatbuffers.Builder, h22 int32) {
	builder.PrependInt32Slot(20, h22, 0)
}
func MtiHRR_IngestAddH23(builder *flatbuffers.Builder, h23 flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(21, flatbuffers.UOffsetT(h23), 0)
}
func MtiHRR_IngestAddH24(builder *flatbuffers.Builder, h24 flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(22, flatbuffers.UOffsetT(h24), 0)
}
func MtiHRR_IngestAddH27(builder *flatbuffers.Builder, h27 int32) {
	builder.PrependInt32Slot(23, h27, 0)
}
func MtiHRR_IngestAddH28(builder *flatbuffers.Builder, h28 int64) {
	builder.PrependInt64Slot(24, h28, 0)
}
func MtiHRR_IngestAddH29(builder *flatbuffers.Builder, h29 int32) {
	builder.PrependInt32Slot(25, h29, 0)
}
func MtiHRR_IngestAddH30(builder *flatbuffers.Builder, h30 int32) {
	builder.PrependInt32Slot(26, h30, 0)
}
func MtiHRR_IngestAddH31(builder *flatbuffers.Builder, h31 int32) {
	builder.PrependInt32Slot(27, h31, 0)
}
func MtiHRR_IngestAddH32(builder *flatbuffers.Builder, h32 flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(28, flatbuffers.UOffsetT(h32), 0)
}
func MtiHRR_IngestStartH32Vector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func MtiHRR_IngestEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
