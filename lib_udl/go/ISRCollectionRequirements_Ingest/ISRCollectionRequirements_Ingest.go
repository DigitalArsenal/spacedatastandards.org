// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package ISRCollectionRequirements_Ingest

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

/// /// Tasking desired collection requirements.
type ISRCollectionRequirements_Ingest struct {
	_tab flatbuffers.Table
}

const ISRCollectionRequirements_IngestIdentifier = "ISRC"

func GetRootAsISRCollectionRequirements_Ingest(buf []byte, offset flatbuffers.UOffsetT) *ISRCollectionRequirements_Ingest {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &ISRCollectionRequirements_Ingest{}
	x.Init(buf, n+offset)
	return x
}

func FinishISRCollectionRequirements_IngestBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	identifierBytes := []byte(ISRCollectionRequirements_IngestIdentifier)
	builder.FinishWithFileIdentifier(offset, identifierBytes)
}

func ISRCollectionRequirements_IngestBufferHasIdentifier(buf []byte) bool {
	return flatbuffers.BufferHasIdentifier(buf, ISRCollectionRequirements_IngestIdentifier)
}

func GetSizePrefixedRootAsISRCollectionRequirements_Ingest(buf []byte, offset flatbuffers.UOffsetT) *ISRCollectionRequirements_Ingest {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &ISRCollectionRequirements_Ingest{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedISRCollectionRequirements_IngestBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	identifierBytes := []byte(ISRCollectionRequirements_IngestIdentifier)
	builder.FinishSizePrefixedWithFileIdentifier(offset, identifierBytes)
}

func SizePrefixedISRCollectionRequirements_IngestBufferHasIdentifier(buf []byte) bool {
	return flatbuffers.SizePrefixedBufferHasIdentifier(buf, ISRCollectionRequirements_IngestIdentifier)
}

func (rcv *ISRCollectionRequirements_Ingest) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *ISRCollectionRequirements_Ingest) Table() flatbuffers.Table {
	return rcv._tab
}

/// Collection Requirement Unique Identifier.
/// Example: /// Example: ISCRCOLLECTIONREQUIREMENTS
/// Constraints: Minimum length = 0, Maximum length = 36
func (rcv *ISRCollectionRequirements_Ingest) Id() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Collection Requirement Unique Identifier.
/// Example: /// Example: ISCRCOLLECTIONREQUIREMENTS
/// Constraints: Minimum length = 0, Maximum length = 36
/// Encryption hashing algorithm.
/// Example: /// Example: HASH
/// Constraints: Minimum length = 0, Maximum length = 128
func (rcv *ISRCollectionRequirements_Ingest) Hash() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Encryption hashing algorithm.
/// Example: /// Example: HASH
/// Constraints: Minimum length = 0, Maximum length = 128
/// Type collection this requirement applies to.
/// Example: /// Example: COLLECTION_TYPE
/// Constraints: Minimum length = 0, Maximum length = 128
func (rcv *ISRCollectionRequirements_Ingest) Type() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Type collection this requirement applies to.
/// Example: /// Example: COLLECTION_TYPE
/// Constraints: Minimum length = 0, Maximum length = 128
/// Collection Requirement Unique Identifier.
/// Example: /// Example: CRID
/// Constraints: Minimum length = 0, Maximum length = 256
func (rcv *ISRCollectionRequirements_Ingest) CridNumbers() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Collection Requirement Unique Identifier.
/// Example: /// Example: CRID
/// Constraints: Minimum length = 0, Maximum length = 256
/// 1-n priority for this collection requirement.
/// Example: /// Example: 20.23
/// Constraints: No constraints specified.
func (rcv *ISRCollectionRequirements_Ingest) Priority() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// 1-n priority for this collection requirement.
/// Example: /// Example: 20.23
/// Constraints: No constraints specified.
func (rcv *ISRCollectionRequirements_Ingest) MutatePriority(n float64) bool {
	return rcv._tab.MutateFloat64Slot(12, n)
}

/// Record id.
/// Example: /// Example: RECORD-ID
/// Constraints: Minimum length = 0, Maximum length = 36
func (rcv *ISRCollectionRequirements_Ingest) RecordId() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Record id.
/// Example: /// Example: RECORD-ID
/// Constraints: Minimum length = 0, Maximum length = 36
/// Reconnaissance Survey information the operator needs.
/// Example: /// Example: SURVEY_INFO
/// Constraints: Minimum length = 0, Maximum length = 32
func (rcv *ISRCollectionRequirements_Ingest) ReconSurvey() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Reconnaissance Survey information the operator needs.
/// Example: /// Example: SURVEY_INFO
/// Constraints: Minimum length = 0, Maximum length = 32
/// Primary type of intelligence to be collected for this requirement.
/// Example: /// Example: Sig
/// Constraints: Minimum length = 0, Maximum length = 32
func (rcv *ISRCollectionRequirements_Ingest) IntelDiscipline() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(18))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Primary type of intelligence to be collected for this requirement.
/// Example: /// Example: Sig
/// Constraints: Minimum length = 0, Maximum length = 32
/// Sub category of primary intelligence to be collected for this requirement.
/// Example: /// Example: False
/// Constraints: No constraints specified.
func (rcv *ISRCollectionRequirements_Ingest) Secondary() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(20))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

/// Sub category of primary intelligence to be collected for this requirement.
/// Example: /// Example: False
/// Constraints: No constraints specified.
func (rcv *ISRCollectionRequirements_Ingest) MutateSecondary(n bool) bool {
	return rcv._tab.MutateBoolSlot(20, n)
}

/// Is this collection requirement an emphasized/critical requirement.
/// Example: /// Example: False
/// Constraints: No constraints specified.
func (rcv *ISRCollectionRequirements_Ingest) Emphasized() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(22))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

/// Is this collection requirement an emphasized/critical requirement.
/// Example: /// Example: False
/// Constraints: No constraints specified.
func (rcv *ISRCollectionRequirements_Ingest) MutateEmphasized(n bool) bool {
	return rcv._tab.MutateBoolSlot(22, n)
}

/// Is this collection request for the Prism system?.
/// Example: /// Example: True
/// Constraints: No constraints specified.
func (rcv *ISRCollectionRequirements_Ingest) IsPrismCr() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(24))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

/// Is this collection request for the Prism system?.
/// Example: /// Example: True
/// Constraints: No constraints specified.
func (rcv *ISRCollectionRequirements_Ingest) MutateIsPrismCr(n bool) bool {
	return rcv._tab.MutateBoolSlot(24, n)
}

/// Start time for this requirement, should be within the mission time window.
/// Example: /// Example: 2021-01-19T01:01:15.001Z
/// Constraints: No constraints specified.
func (rcv *ISRCollectionRequirements_Ingest) Start() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(26))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Start time for this requirement, should be within the mission time window.
/// Example: /// Example: 2021-01-19T01:01:15.001Z
/// Constraints: No constraints specified.
/// Stop time for this requirement, should be within the mission time window.
/// Example: /// Example: 2021-01-19T01:20:01.001Z
/// Constraints: No constraints specified.
func (rcv *ISRCollectionRequirements_Ingest) Stop() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(28))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Stop time for this requirement, should be within the mission time window.
/// Example: /// Example: 2021-01-19T01:20:01.001Z
/// Constraints: No constraints specified.
/// Human readable name for this operation.
/// Example: /// Example: NAME
/// Constraints: Minimum length = 0, Maximum length = 32
func (rcv *ISRCollectionRequirements_Ingest) Operation() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(30))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Human readable name for this operation.
/// Example: /// Example: NAME
/// Constraints: Minimum length = 0, Maximum length = 32
/// The name of the military unit that this assigned collection requirement will support.
/// Example: /// Example: UNIT
/// Constraints: Minimum length = 0, Maximum length = 32
func (rcv *ISRCollectionRequirements_Ingest) SupportedUnit() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(32))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The name of the military unit that this assigned collection requirement will support.
/// Example: /// Example: UNIT
/// Constraints: Minimum length = 0, Maximum length = 32
/// Country code of the collection requirement. A Country may represent countries, multi-national consortiums, and international organizations.
/// Example: /// Example: COUNTRY_CODE
/// Constraints: Minimum length = 0, Maximum length = 4
func (rcv *ISRCollectionRequirements_Ingest) Country() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(34))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Country code of the collection requirement. A Country may represent countries, multi-national consortiums, and international organizations.
/// Example: /// Example: COUNTRY_CODE
/// Constraints: Minimum length = 0, Maximum length = 4
/// Region of the collection requirement.
/// Example: /// Example: REGION
/// Constraints: Minimum length = 0, Maximum length = 32
func (rcv *ISRCollectionRequirements_Ingest) Region() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(36))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Region of the collection requirement.
/// Example: /// Example: REGION
/// Constraints: Minimum length = 0, Maximum length = 32
/// Subregion of the collection requirement.
/// Example: /// Example: SUBREGION
/// Constraints: Minimum length = 0, Maximum length = 32
func (rcv *ISRCollectionRequirements_Ingest) Subregion() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(38))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Subregion of the collection requirement.
/// Example: /// Example: SUBREGION
/// Constraints: Minimum length = 0, Maximum length = 32
/// Free text field for the user to specify special instructions needed for this collection.
/// Example: /// Example: TEXT
/// Constraints: Minimum length = 0, Maximum length = 256
func (rcv *ISRCollectionRequirements_Ingest) SpecialComGuidance() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(40))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Free text field for the user to specify special instructions needed for this collection.
/// Example: /// Example: TEXT
/// Constraints: Minimum length = 0, Maximum length = 256
/// No description provided.
/// Example: /// Example: No example provided.
/// Constraints: No constraints specified.
func (rcv *ISRCollectionRequirements_Ingest) CriticalTimes() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(42))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// No description provided.
/// Example: /// Example: No example provided.
/// Constraints: No constraints specified.
/// No description provided.
/// Example: /// Example: No example provided.
/// Constraints: No constraints specified.
func (rcv *ISRCollectionRequirements_Ingest) ExploitationRequirement() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(44))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// No description provided.
/// Example: /// Example: No example provided.
/// Constraints: No constraints specified.
/// Array of POI Id's for the targets being tasked.
/// Example: /// Example: No example provided.
/// Constraints: No constraints specified.
func (rcv *ISRCollectionRequirements_Ingest) TargetList(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(46))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *ISRCollectionRequirements_Ingest) TargetListLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(46))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

/// Array of POI Id's for the targets being tasked.
/// Example: /// Example: No example provided.
/// Constraints: No constraints specified.
func ISRCollectionRequirements_IngestStart(builder *flatbuffers.Builder) {
	builder.StartObject(22)
}
func ISRCollectionRequirements_IngestAddId(builder *flatbuffers.Builder, id flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(id), 0)
}
func ISRCollectionRequirements_IngestAddHash(builder *flatbuffers.Builder, hash flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(hash), 0)
}
func ISRCollectionRequirements_IngestAddType(builder *flatbuffers.Builder, type_ flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(type_), 0)
}
func ISRCollectionRequirements_IngestAddCridNumbers(builder *flatbuffers.Builder, cridNumbers flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(3, flatbuffers.UOffsetT(cridNumbers), 0)
}
func ISRCollectionRequirements_IngestAddPriority(builder *flatbuffers.Builder, priority float64) {
	builder.PrependFloat64Slot(4, priority, 0.0)
}
func ISRCollectionRequirements_IngestAddRecordId(builder *flatbuffers.Builder, recordId flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(5, flatbuffers.UOffsetT(recordId), 0)
}
func ISRCollectionRequirements_IngestAddReconSurvey(builder *flatbuffers.Builder, reconSurvey flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(6, flatbuffers.UOffsetT(reconSurvey), 0)
}
func ISRCollectionRequirements_IngestAddIntelDiscipline(builder *flatbuffers.Builder, intelDiscipline flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(7, flatbuffers.UOffsetT(intelDiscipline), 0)
}
func ISRCollectionRequirements_IngestAddSecondary(builder *flatbuffers.Builder, secondary bool) {
	builder.PrependBoolSlot(8, secondary, false)
}
func ISRCollectionRequirements_IngestAddEmphasized(builder *flatbuffers.Builder, emphasized bool) {
	builder.PrependBoolSlot(9, emphasized, false)
}
func ISRCollectionRequirements_IngestAddIsPrismCr(builder *flatbuffers.Builder, isPrismCr bool) {
	builder.PrependBoolSlot(10, isPrismCr, false)
}
func ISRCollectionRequirements_IngestAddStart(builder *flatbuffers.Builder, start flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(11, flatbuffers.UOffsetT(start), 0)
}
func ISRCollectionRequirements_IngestAddStop(builder *flatbuffers.Builder, stop flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(12, flatbuffers.UOffsetT(stop), 0)
}
func ISRCollectionRequirements_IngestAddOperation(builder *flatbuffers.Builder, operation flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(13, flatbuffers.UOffsetT(operation), 0)
}
func ISRCollectionRequirements_IngestAddSupportedUnit(builder *flatbuffers.Builder, supportedUnit flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(14, flatbuffers.UOffsetT(supportedUnit), 0)
}
func ISRCollectionRequirements_IngestAddCountry(builder *flatbuffers.Builder, country flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(15, flatbuffers.UOffsetT(country), 0)
}
func ISRCollectionRequirements_IngestAddRegion(builder *flatbuffers.Builder, region flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(16, flatbuffers.UOffsetT(region), 0)
}
func ISRCollectionRequirements_IngestAddSubregion(builder *flatbuffers.Builder, subregion flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(17, flatbuffers.UOffsetT(subregion), 0)
}
func ISRCollectionRequirements_IngestAddSpecialComGuidance(builder *flatbuffers.Builder, specialComGuidance flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(18, flatbuffers.UOffsetT(specialComGuidance), 0)
}
func ISRCollectionRequirements_IngestAddCriticalTimes(builder *flatbuffers.Builder, criticalTimes flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(19, flatbuffers.UOffsetT(criticalTimes), 0)
}
func ISRCollectionRequirements_IngestAddExploitationRequirement(builder *flatbuffers.Builder, exploitationRequirement flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(20, flatbuffers.UOffsetT(exploitationRequirement), 0)
}
func ISRCollectionRequirements_IngestAddTargetList(builder *flatbuffers.Builder, targetList flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(21, flatbuffers.UOffsetT(targetList), 0)
}
func ISRCollectionRequirements_IngestStartTargetListVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func ISRCollectionRequirements_IngestEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
