// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package LaunchVehicleDetails_Full

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

/// /// Model representation of launch vehicle details and characteristics, compiled by a particular source. A vehicle may have multiple details records from various sources.
type LaunchVehicleDetails_Full struct {
	_tab flatbuffers.Table
}

const LaunchVehicleDetails_FullIdentifier = "LAUN"

func GetRootAsLaunchVehicleDetails_Full(buf []byte, offset flatbuffers.UOffsetT) *LaunchVehicleDetails_Full {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &LaunchVehicleDetails_Full{}
	x.Init(buf, n+offset)
	return x
}

func FinishLaunchVehicleDetails_FullBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	identifierBytes := []byte(LaunchVehicleDetails_FullIdentifier)
	builder.FinishWithFileIdentifier(offset, identifierBytes)
}

func LaunchVehicleDetails_FullBufferHasIdentifier(buf []byte) bool {
	return flatbuffers.BufferHasIdentifier(buf, LaunchVehicleDetails_FullIdentifier)
}

func GetSizePrefixedRootAsLaunchVehicleDetails_Full(buf []byte, offset flatbuffers.UOffsetT) *LaunchVehicleDetails_Full {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &LaunchVehicleDetails_Full{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedLaunchVehicleDetails_FullBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	identifierBytes := []byte(LaunchVehicleDetails_FullIdentifier)
	builder.FinishSizePrefixedWithFileIdentifier(offset, identifierBytes)
}

func SizePrefixedLaunchVehicleDetails_FullBufferHasIdentifier(buf []byte) bool {
	return flatbuffers.SizePrefixedBufferHasIdentifier(buf, LaunchVehicleDetails_FullIdentifier)
}

func (rcv *LaunchVehicleDetails_Full) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *LaunchVehicleDetails_Full) Table() flatbuffers.Table {
	return rcv._tab
}

/// Unique identifier of the record, auto-generated by the system.
/// Example: /// Example: LAUNCHVEHICLEDETAILS-ID
/// Constraints: Minimum length = 1, Maximum length = 36
func (rcv *LaunchVehicleDetails_Full) Id() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Unique identifier of the record, auto-generated by the system.
/// Example: /// Example: LAUNCHVEHICLEDETAILS-ID
/// Constraints: Minimum length = 1, Maximum length = 36
/// Identifier of the parent launch vehicle record.
/// Example: /// Example: LAUNCHVEHICLE-ID
/// Constraints: Minimum length = 1, Maximum length = 36
func (rcv *LaunchVehicleDetails_Full) IdLaunchVehicle() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Identifier of the parent launch vehicle record.
/// Example: /// Example: LAUNCHVEHICLE-ID
/// Constraints: Minimum length = 1, Maximum length = 36
/// Classification marking of the data in IC/CAPCO Portion-marked format.
/// Example: /// Example: U
/// Constraints: Minimum length = 1, Maximum length = 128
func (rcv *LaunchVehicleDetails_Full) ClassificationMarking() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Classification marking of the data in IC/CAPCO Portion-marked format.
/// Example: /// Example: U
/// Constraints: Minimum length = 1, Maximum length = 128
/// Vehicle variant.
/// Example: /// Example: Example-variant
/// Constraints: Minimum length = 0, Maximum length = 64
func (rcv *LaunchVehicleDetails_Full) Variant() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Vehicle variant.
/// Example: /// Example: Example-variant
/// Constraints: Minimum length = 0, Maximum length = 64
/// Vehicle minor variant.
/// Example: /// Example: Example-minor-variant
/// Constraints: Minimum length = 0, Maximum length = 64
func (rcv *LaunchVehicleDetails_Full) MinorVariant() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Vehicle minor variant.
/// Example: /// Example: Example-minor-variant
/// Constraints: Minimum length = 0, Maximum length = 64
/// Vehicle category.
/// Example: /// Example: Example-category
/// Constraints: Minimum length = 0, Maximum length = 64
func (rcv *LaunchVehicleDetails_Full) Category() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Vehicle category.
/// Example: /// Example: Example-category
/// Constraints: Minimum length = 0, Maximum length = 64
/// ID of the organization that manufactures the launch vehicle.
/// Example: /// Example: MANUFACTURERORG-ID
/// Constraints: Minimum length = 0, Maximum length = 36
func (rcv *LaunchVehicleDetails_Full) ManufacturerOrgId() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// ID of the organization that manufactures the launch vehicle.
/// Example: /// Example: MANUFACTURERORG-ID
/// Constraints: Minimum length = 0, Maximum length = 36
/// Vehicle launch prefix.
/// Example: /// Example: AX011
/// Constraints: Minimum length = 0, Maximum length = 8
func (rcv *LaunchVehicleDetails_Full) LaunchPrefix() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(18))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Vehicle launch prefix.
/// Example: /// Example: AX011
/// Constraints: Minimum length = 0, Maximum length = 8
/// Vehicle family.
/// Example: /// Example: Example-family
/// Constraints: Minimum length = 0, Maximum length = 64
func (rcv *LaunchVehicleDetails_Full) Family() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(20))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Vehicle family.
/// Example: /// Example: Example-family
/// Constraints: Minimum length = 0, Maximum length = 64
/// Propellant type.
/// Example: /// Example: Nitrogen
/// Constraints: Minimum length = 0, Maximum length = 64
func (rcv *LaunchVehicleDetails_Full) Propellant() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(22))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Propellant type.
/// Example: /// Example: Nitrogen
/// Constraints: Minimum length = 0, Maximum length = 64
/// Oxidizer type.
/// Example: /// Example: Bromine
/// Constraints: Minimum length = 0, Maximum length = 64
func (rcv *LaunchVehicleDetails_Full) Oxidizer() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(24))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Oxidizer type.
/// Example: /// Example: Bromine
/// Constraints: Minimum length = 0, Maximum length = 64
/// Vehicle length in meters.
/// Example: /// Example: 10.23
/// Constraints: No constraints specified.
func (rcv *LaunchVehicleDetails_Full) Length() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(26))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Vehicle length in meters.
/// Example: /// Example: 10.23
/// Constraints: No constraints specified.
func (rcv *LaunchVehicleDetails_Full) MutateLength(n float64) bool {
	return rcv._tab.MutateFloat64Slot(26, n)
}

/// Vehicle diameter in meters.
/// Example: /// Example: 10.23
/// Constraints: No constraints specified.
func (rcv *LaunchVehicleDetails_Full) Diameter() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(28))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Vehicle diameter in meters.
/// Example: /// Example: 10.23
/// Constraints: No constraints specified.
func (rcv *LaunchVehicleDetails_Full) MutateDiameter(n float64) bool {
	return rcv._tab.MutateFloat64Slot(28, n)
}

/// Vehicle total mass at launch time in kg (including all boosters).
/// Example: /// Example: 10.23
/// Constraints: No constraints specified.
func (rcv *LaunchVehicleDetails_Full) LaunchMass() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(30))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Vehicle total mass at launch time in kg (including all boosters).
/// Example: /// Example: 10.23
/// Constraints: No constraints specified.
func (rcv *LaunchVehicleDetails_Full) MutateLaunchMass(n float64) bool {
	return rcv._tab.MutateFloat64Slot(30, n)
}

/// Maximum vehicle payload mass to GEO orbit in kg.
/// Example: /// Example: 10.23
/// Constraints: No constraints specified.
func (rcv *LaunchVehicleDetails_Full) GeoPayloadMass() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(32))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Maximum vehicle payload mass to GEO orbit in kg.
/// Example: /// Example: 10.23
/// Constraints: No constraints specified.
func (rcv *LaunchVehicleDetails_Full) MutateGeoPayloadMass(n float64) bool {
	return rcv._tab.MutateFloat64Slot(32, n)
}

/// Max vehicle payload mass to Geo-Transfer Orbit in kg.
/// Example: /// Example: 10.23
/// Constraints: No constraints specified.
func (rcv *LaunchVehicleDetails_Full) GtoPayloadMass() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(34))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Max vehicle payload mass to Geo-Transfer Orbit in kg.
/// Example: /// Example: 10.23
/// Constraints: No constraints specified.
func (rcv *LaunchVehicleDetails_Full) MutateGtoPayloadMass(n float64) bool {
	return rcv._tab.MutateFloat64Slot(34, n)
}

/// Max vehicle payload mass to LEO orbit in kg.
/// Example: /// Example: 10.23
/// Constraints: No constraints specified.
func (rcv *LaunchVehicleDetails_Full) LeoPayloadMass() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(36))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Max vehicle payload mass to LEO orbit in kg.
/// Example: /// Example: 10.23
/// Constraints: No constraints specified.
func (rcv *LaunchVehicleDetails_Full) MutateLeoPayloadMass(n float64) bool {
	return rcv._tab.MutateFloat64Slot(36, n)
}

/// Max vehicle payload mass to Sun-Synchronous Orbit in kg.
/// Example: /// Example: 10.23
/// Constraints: No constraints specified.
func (rcv *LaunchVehicleDetails_Full) SsoPayloadMass() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(38))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Max vehicle payload mass to Sun-Synchronous Orbit in kg.
/// Example: /// Example: 10.23
/// Constraints: No constraints specified.
func (rcv *LaunchVehicleDetails_Full) MutateSsoPayloadMass(n float64) bool {
	return rcv._tab.MutateFloat64Slot(38, n)
}

/// Vehicle fairing length in meters.
/// Example: /// Example: 10.23
/// Constraints: No constraints specified.
func (rcv *LaunchVehicleDetails_Full) FairingLength() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(40))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Vehicle fairing length in meters.
/// Example: /// Example: 10.23
/// Constraints: No constraints specified.
func (rcv *LaunchVehicleDetails_Full) MutateFairingLength(n float64) bool {
	return rcv._tab.MutateFloat64Slot(40, n)
}

/// Name of the fairing.
/// Example: /// Example: Example-fairing-name
/// Constraints: Minimum length = 0, Maximum length = 64
func (rcv *LaunchVehicleDetails_Full) FairingName() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(42))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Name of the fairing.
/// Example: /// Example: Example-fairing-name
/// Constraints: Minimum length = 0, Maximum length = 64
/// Vehicle fairing maximum external diameter in meters.
/// Example: /// Example: 10.23
/// Constraints: No constraints specified.
func (rcv *LaunchVehicleDetails_Full) FairingExternalDiameter() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(44))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Vehicle fairing maximum external diameter in meters.
/// Example: /// Example: 10.23
/// Constraints: No constraints specified.
func (rcv *LaunchVehicleDetails_Full) MutateFairingExternalDiameter(n float64) bool {
	return rcv._tab.MutateFloat64Slot(44, n)
}

/// Vehicle fairing maximum internal diameter in meters.
/// Example: /// Example: 10.23
/// Constraints: No constraints specified.
func (rcv *LaunchVehicleDetails_Full) FairingInternalDiameter() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(46))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Vehicle fairing maximum internal diameter in meters.
/// Example: /// Example: 10.23
/// Constraints: No constraints specified.
func (rcv *LaunchVehicleDetails_Full) MutateFairingInternalDiameter(n float64) bool {
	return rcv._tab.MutateFloat64Slot(46, n)
}

/// Vehicle fairing mass in kg.
/// Example: /// Example: 10.23
/// Constraints: No constraints specified.
func (rcv *LaunchVehicleDetails_Full) FairingMass() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(48))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Vehicle fairing mass in kg.
/// Example: /// Example: 10.23
/// Constraints: No constraints specified.
func (rcv *LaunchVehicleDetails_Full) MutateFairingMass(n float64) bool {
	return rcv._tab.MutateFloat64Slot(48, n)
}

/// Fairing material.
/// Example: /// Example: Example-fairing-material
/// Constraints: Minimum length = 0, Maximum length = 64
func (rcv *LaunchVehicleDetails_Full) FairingMaterial() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(50))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Fairing material.
/// Example: /// Example: Example-fairing-material
/// Constraints: Minimum length = 0, Maximum length = 64
/// Vehicle maximum acceleration load in g.
/// Example: /// Example: 10.23
/// Constraints: No constraints specified.
func (rcv *LaunchVehicleDetails_Full) MaxAccelLoad() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(52))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Vehicle maximum acceleration load in g.
/// Example: /// Example: 10.23
/// Constraints: No constraints specified.
func (rcv *LaunchVehicleDetails_Full) MutateMaxAccelLoad(n float64) bool {
	return rcv._tab.MutateFloat64Slot(52, n)
}

/// Vehicle maximum payload lateral frequency in Hz.
/// Example: /// Example: 10.23
/// Constraints: No constraints specified.
func (rcv *LaunchVehicleDetails_Full) MaxPayloadFreqLat() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(54))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Vehicle maximum payload lateral frequency in Hz.
/// Example: /// Example: 10.23
/// Constraints: No constraints specified.
func (rcv *LaunchVehicleDetails_Full) MutateMaxPayloadFreqLat(n float64) bool {
	return rcv._tab.MutateFloat64Slot(54, n)
}

/// Vehicle maximum payload longitudinal frequency in Hz.
/// Example: /// Example: 10.23
/// Constraints: No constraints specified.
func (rcv *LaunchVehicleDetails_Full) MaxPayloadFreqLon() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(56))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Vehicle maximum payload longitudinal frequency in Hz.
/// Example: /// Example: 10.23
/// Constraints: No constraints specified.
func (rcv *LaunchVehicleDetails_Full) MutateMaxPayloadFreqLon(n float64) bool {
	return rcv._tab.MutateFloat64Slot(56, n)
}

/// Vehicle maximum acoustic level in dB.
/// Example: /// Example: 10.23
/// Constraints: No constraints specified.
func (rcv *LaunchVehicleDetails_Full) MaxAcousticLevel() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(58))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Vehicle maximum acoustic level in dB.
/// Example: /// Example: 10.23
/// Constraints: No constraints specified.
func (rcv *LaunchVehicleDetails_Full) MutateMaxAcousticLevel(n float64) bool {
	return rcv._tab.MutateFloat64Slot(58, n)
}

/// Vehicle maximum acoustic level range in Hz.
/// Example: /// Example: 10.23
/// Constraints: No constraints specified.
func (rcv *LaunchVehicleDetails_Full) MaxAcousticLevelRange() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(60))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Vehicle maximum acoustic level range in Hz.
/// Example: /// Example: 10.23
/// Constraints: No constraints specified.
func (rcv *LaunchVehicleDetails_Full) MutateMaxAcousticLevelRange(n float64) bool {
	return rcv._tab.MutateFloat64Slot(60, n)
}

/// Vehicle overall sound pressure level in dB.
/// Example: /// Example: 10.23
/// Constraints: No constraints specified.
func (rcv *LaunchVehicleDetails_Full) SoundPressureLevel() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(62))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Vehicle overall sound pressure level in dB.
/// Example: /// Example: 10.23
/// Constraints: No constraints specified.
func (rcv *LaunchVehicleDetails_Full) MutateSoundPressureLevel(n float64) bool {
	return rcv._tab.MutateFloat64Slot(62, n)
}

/// Vehicle maximum flight shock force in g.
/// Example: /// Example: 10.23
/// Constraints: No constraints specified.
func (rcv *LaunchVehicleDetails_Full) MaxFlightShockForce() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(64))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Vehicle maximum flight shock force in g.
/// Example: /// Example: 10.23
/// Constraints: No constraints specified.
func (rcv *LaunchVehicleDetails_Full) MutateMaxFlightShockForce(n float64) bool {
	return rcv._tab.MutateFloat64Slot(64, n)
}

/// Vehicle maximum flight shock frequency in Hz.
/// Example: /// Example: 10.23
/// Constraints: No constraints specified.
func (rcv *LaunchVehicleDetails_Full) MaxFlightShockFreq() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(66))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Vehicle maximum flight shock frequency in Hz.
/// Example: /// Example: 10.23
/// Constraints: No constraints specified.
func (rcv *LaunchVehicleDetails_Full) MutateMaxFlightShockFreq(n float64) bool {
	return rcv._tab.MutateFloat64Slot(66, n)
}

/// Vehicle fairing maximum pressure change in kPa/sec.
/// Example: /// Example: 10.23
/// Constraints: No constraints specified.
func (rcv *LaunchVehicleDetails_Full) MaxFairingPressureChange() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(68))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Vehicle fairing maximum pressure change in kPa/sec.
/// Example: /// Example: 10.23
/// Constraints: No constraints specified.
func (rcv *LaunchVehicleDetails_Full) MutateMaxFairingPressureChange(n float64) bool {
	return rcv._tab.MutateFloat64Slot(68, n)
}

/// Launch vehicle estimated launch price in US dollars.
/// Example: /// Example: 10.23
/// Constraints: No constraints specified.
func (rcv *LaunchVehicleDetails_Full) EstLaunchPrice() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(70))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Launch vehicle estimated launch price in US dollars.
/// Example: /// Example: 10.23
/// Constraints: No constraints specified.
func (rcv *LaunchVehicleDetails_Full) MutateEstLaunchPrice(n float64) bool {
	return rcv._tab.MutateFloat64Slot(70, n)
}

/// Launch vehicle typical estimated launch price in US dollars.
/// Example: /// Example: 10.23
/// Constraints: No constraints specified.
func (rcv *LaunchVehicleDetails_Full) EstLaunchPriceTypical() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(72))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Launch vehicle typical estimated launch price in US dollars.
/// Example: /// Example: 10.23
/// Constraints: No constraints specified.
func (rcv *LaunchVehicleDetails_Full) MutateEstLaunchPriceTypical(n float64) bool {
	return rcv._tab.MutateFloat64Slot(72, n)
}

/// Launch vehicle GTO Injection 3 Sigma Accuracy Apogee Target (degrees).
/// Example: /// Example: 10.23
/// Constraints: No constraints specified.
func (rcv *LaunchVehicleDetails_Full) GtoInj3SigAccuracyApogeeTarget() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(74))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Launch vehicle GTO Injection 3 Sigma Accuracy Apogee Target (degrees).
/// Example: /// Example: 10.23
/// Constraints: No constraints specified.
func (rcv *LaunchVehicleDetails_Full) MutateGtoInj3SigAccuracyApogeeTarget(n float64) bool {
	return rcv._tab.MutateFloat64Slot(74, n)
}

/// Launch vehicle GTO Injection 3 Sigma Accuracy Apogee Margin (degrees).
/// Example: /// Example: 10.23
/// Constraints: No constraints specified.
func (rcv *LaunchVehicleDetails_Full) GtoInj3SigAccuracyApogeeMargin() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(76))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Launch vehicle GTO Injection 3 Sigma Accuracy Apogee Margin (degrees).
/// Example: /// Example: 10.23
/// Constraints: No constraints specified.
func (rcv *LaunchVehicleDetails_Full) MutateGtoInj3SigAccuracyApogeeMargin(n float64) bool {
	return rcv._tab.MutateFloat64Slot(76, n)
}

/// Launch vehicle GTO Injection 3 Sigma Accuracy Perigee Target (degrees).
/// Example: /// Example: 10.23
/// Constraints: No constraints specified.
func (rcv *LaunchVehicleDetails_Full) GtoInj3SigAccuracyPerigeeTarget() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(78))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Launch vehicle GTO Injection 3 Sigma Accuracy Perigee Target (degrees).
/// Example: /// Example: 10.23
/// Constraints: No constraints specified.
func (rcv *LaunchVehicleDetails_Full) MutateGtoInj3SigAccuracyPerigeeTarget(n float64) bool {
	return rcv._tab.MutateFloat64Slot(78, n)
}

/// Launch vehicle GTO Injection 3 Sigma Accuracy Perigee Margin (degrees).
/// Example: /// Example: 10.23
/// Constraints: No constraints specified.
func (rcv *LaunchVehicleDetails_Full) GtoInj3SigAccuracyPerigeeMargin() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(80))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Launch vehicle GTO Injection 3 Sigma Accuracy Perigee Margin (degrees).
/// Example: /// Example: 10.23
/// Constraints: No constraints specified.
func (rcv *LaunchVehicleDetails_Full) MutateGtoInj3SigAccuracyPerigeeMargin(n float64) bool {
	return rcv._tab.MutateFloat64Slot(80, n)
}

/// Launch vehicle GTO Injection 3 Sigma Accuracy Inclination Target (degrees).
/// Example: /// Example: 10.23
/// Constraints: No constraints specified.
func (rcv *LaunchVehicleDetails_Full) GtoInj3SigAccuracyInclinationTarget() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(82))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Launch vehicle GTO Injection 3 Sigma Accuracy Inclination Target (degrees).
/// Example: /// Example: 10.23
/// Constraints: No constraints specified.
func (rcv *LaunchVehicleDetails_Full) MutateGtoInj3SigAccuracyInclinationTarget(n float64) bool {
	return rcv._tab.MutateFloat64Slot(82, n)
}

/// Launch vehicle GTO Injection 3 Sigma Accuracy Inclination Margin (degrees).
/// Example: /// Example: 10.23
/// Constraints: No constraints specified.
func (rcv *LaunchVehicleDetails_Full) GtoInj3SigAccuracyInclinationMargin() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(84))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Launch vehicle GTO Injection 3 Sigma Accuracy Inclination Margin (degrees).
/// Example: /// Example: 10.23
/// Constraints: No constraints specified.
func (rcv *LaunchVehicleDetails_Full) MutateGtoInj3SigAccuracyInclinationMargin(n float64) bool {
	return rcv._tab.MutateFloat64Slot(84, n)
}

/// Launch vehicle attitude accuracy (degrees).
/// Example: /// Example: 10.23
/// Constraints: No constraints specified.
func (rcv *LaunchVehicleDetails_Full) AttitudeAccuracy() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(86))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Launch vehicle attitude accuracy (degrees).
/// Example: /// Example: 10.23
/// Constraints: No constraints specified.
func (rcv *LaunchVehicleDetails_Full) MutateAttitudeAccuracy(n float64) bool {
	return rcv._tab.MutateFloat64Slot(86, n)
}

/// Launch vehicle payload separation rate in m/s.
/// Example: /// Example: 10.23
/// Constraints: No constraints specified.
func (rcv *LaunchVehicleDetails_Full) PayloadSeparationRate() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(88))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Launch vehicle payload separation rate in m/s.
/// Example: /// Example: 10.23
/// Constraints: No constraints specified.
func (rcv *LaunchVehicleDetails_Full) MutatePayloadSeparationRate(n float64) bool {
	return rcv._tab.MutateFloat64Slot(88, n)
}

/// Launch vehicle deployment rotation rate in RPM.
/// Example: /// Example: 10.23
/// Constraints: No constraints specified.
func (rcv *LaunchVehicleDetails_Full) DeploymentRotationRate() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(90))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Launch vehicle deployment rotation rate in RPM.
/// Example: /// Example: 10.23
/// Constraints: No constraints specified.
func (rcv *LaunchVehicleDetails_Full) MutateDeploymentRotationRate(n float64) bool {
	return rcv._tab.MutateFloat64Slot(90, n)
}

/// Optional URL for additional information on the vehicle.
/// Example: /// Example: Example URL
/// Constraints: Minimum length = 0, Maximum length = 256
func (rcv *LaunchVehicleDetails_Full) SourceUrl() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(92))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Optional URL for additional information on the vehicle.
/// Example: /// Example: Example URL
/// Constraints: Minimum length = 0, Maximum length = 256
/// Notes/Description of the launch vehicle.
/// Example: /// Example: Example notes
/// Constraints: Minimum length = 0, Maximum length = 512
func (rcv *LaunchVehicleDetails_Full) Notes() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(94))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Notes/Description of the launch vehicle.
/// Example: /// Example: Example notes
/// Constraints: Minimum length = 0, Maximum length = 512
/// Notes/Description of the launch vehicle fairing.
/// Example: /// Example: Example notes
/// Constraints: Minimum length = 0, Maximum length = 512
func (rcv *LaunchVehicleDetails_Full) FairingNotes() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(96))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Notes/Description of the launch vehicle fairing.
/// Example: /// Example: Example notes
/// Constraints: Minimum length = 0, Maximum length = 512
/// Notes/Description of the launch vehicle payload.
/// Example: /// Example: Example notes
/// Constraints: Minimum length = 0, Maximum length = 512
func (rcv *LaunchVehicleDetails_Full) PayloadNotes() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(98))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Notes/Description of the launch vehicle payload.
/// Example: /// Example: Example notes
/// Constraints: Minimum length = 0, Maximum length = 512
/// Time the row was created in the database, auto-populated by the system.
/// Example: /// Example: 2018-01-01T16:00:00.123Z
/// Constraints: No constraints specified.
func (rcv *LaunchVehicleDetails_Full) CreatedAt() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(100))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Time the row was created in the database, auto-populated by the system.
/// Example: /// Example: 2018-01-01T16:00:00.123Z
/// Constraints: No constraints specified.
/// Application user who created the row in the database, auto-populated by the system.
/// Example: /// Example: some.user
/// Constraints: Minimum length = 1, Maximum length = 64
func (rcv *LaunchVehicleDetails_Full) CreatedBy() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(102))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Application user who created the row in the database, auto-populated by the system.
/// Example: /// Example: some.user
/// Constraints: Minimum length = 1, Maximum length = 64
/// Time the row was last updated in the database, auto-populated by the system.
/// Example: /// Example: 2018-01-01T16:00:00.123Z
/// Constraints: No constraints specified.
func (rcv *LaunchVehicleDetails_Full) UpdatedAt() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(104))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Time the row was last updated in the database, auto-populated by the system.
/// Example: /// Example: 2018-01-01T16:00:00.123Z
/// Constraints: No constraints specified.
/// Application user who updated the row in the database, auto-populated by the system.
/// Example: /// Example: some.user
/// Constraints: Minimum length = 0, Maximum length = 64
func (rcv *LaunchVehicleDetails_Full) UpdatedBy() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(106))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Application user who updated the row in the database, auto-populated by the system.
/// Example: /// Example: some.user
/// Constraints: Minimum length = 0, Maximum length = 64
/// Source of the data.
/// Example: /// Example: Bluestaq
/// Constraints: Minimum length = 1, Maximum length = 64
func (rcv *LaunchVehicleDetails_Full) Source() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(108))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Source of the data.
/// Example: /// Example: Bluestaq
/// Constraints: Minimum length = 1, Maximum length = 64
/// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
/// Example: /// Example: THIRD_PARTY_DATASOURCE
/// Constraints: Minimum length = 0, Maximum length = 64
func (rcv *LaunchVehicleDetails_Full) Origin() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(110))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
/// Example: /// Example: THIRD_PARTY_DATASOURCE
/// Constraints: Minimum length = 0, Maximum length = 64
/// The originating source network on which this record was created, auto-populated by the system.
/// Example: /// Example: ORIG
/// Constraints: Minimum length = 1, Maximum length = 32
func (rcv *LaunchVehicleDetails_Full) OrigNetwork() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(112))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The originating source network on which this record was created, auto-populated by the system.
/// Example: /// Example: ORIG
/// Constraints: Minimum length = 1, Maximum length = 32
/// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
/// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
/// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
/// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
/// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
/// Example: /// Example: TEST
/// Constraints: Minimum length = 1, Maximum length = 32
func (rcv *LaunchVehicleDetails_Full) DataMode() LaunchVehicleDetails_Full_dataMode_Enum {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(114))
	if o != 0 {
		return LaunchVehicleDetails_Full_dataMode_Enum(rcv._tab.GetInt8(o + rcv._tab.Pos))
	}
	return 0
}

/// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
/// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
/// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
/// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
/// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
/// Example: /// Example: TEST
/// Constraints: Minimum length = 1, Maximum length = 32
func (rcv *LaunchVehicleDetails_Full) MutateDataMode(n LaunchVehicleDetails_Full_dataMode_Enum) bool {
	return rcv._tab.MutateInt8Slot(114, int8(n))
}

/// Optional array of provider/source specific tags for this data, where each element is no longer than 32 characters, used for implementing data owner conditional access controls to restrict access to the data. Should be left null by data providers unless conditional access controls are coordinated with the UDL team.
/// Example: /// Example: ['PROVIDER_TAG1', 'PROVIDER_TAG2']
/// Constraints: No constraints specified.
func (rcv *LaunchVehicleDetails_Full) Tags(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(116))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *LaunchVehicleDetails_Full) TagsLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(116))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

/// Optional array of provider/source specific tags for this data, where each element is no longer than 32 characters, used for implementing data owner conditional access controls to restrict access to the data. Should be left null by data providers unless conditional access controls are coordinated with the UDL team.
/// Example: /// Example: ['PROVIDER_TAG1', 'PROVIDER_TAG2']
/// Constraints: No constraints specified.
/// No description provided.
/// Example: /// Example: No example provided.
/// Constraints: No constraints specified.
func (rcv *LaunchVehicleDetails_Full) ManufacturerOrg() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(118))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// No description provided.
/// Example: /// Example: No example provided.
/// Constraints: No constraints specified.
func LaunchVehicleDetails_FullStart(builder *flatbuffers.Builder) {
	builder.StartObject(58)
}
func LaunchVehicleDetails_FullAddId(builder *flatbuffers.Builder, id flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(id), 0)
}
func LaunchVehicleDetails_FullAddIdLaunchVehicle(builder *flatbuffers.Builder, idLaunchVehicle flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(idLaunchVehicle), 0)
}
func LaunchVehicleDetails_FullAddClassificationMarking(builder *flatbuffers.Builder, classificationMarking flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(classificationMarking), 0)
}
func LaunchVehicleDetails_FullAddVariant(builder *flatbuffers.Builder, variant flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(3, flatbuffers.UOffsetT(variant), 0)
}
func LaunchVehicleDetails_FullAddMinorVariant(builder *flatbuffers.Builder, minorVariant flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(4, flatbuffers.UOffsetT(minorVariant), 0)
}
func LaunchVehicleDetails_FullAddCategory(builder *flatbuffers.Builder, category flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(5, flatbuffers.UOffsetT(category), 0)
}
func LaunchVehicleDetails_FullAddManufacturerOrgId(builder *flatbuffers.Builder, manufacturerOrgId flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(6, flatbuffers.UOffsetT(manufacturerOrgId), 0)
}
func LaunchVehicleDetails_FullAddLaunchPrefix(builder *flatbuffers.Builder, launchPrefix flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(7, flatbuffers.UOffsetT(launchPrefix), 0)
}
func LaunchVehicleDetails_FullAddFamily(builder *flatbuffers.Builder, family flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(8, flatbuffers.UOffsetT(family), 0)
}
func LaunchVehicleDetails_FullAddPropellant(builder *flatbuffers.Builder, propellant flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(9, flatbuffers.UOffsetT(propellant), 0)
}
func LaunchVehicleDetails_FullAddOxidizer(builder *flatbuffers.Builder, oxidizer flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(10, flatbuffers.UOffsetT(oxidizer), 0)
}
func LaunchVehicleDetails_FullAddLength(builder *flatbuffers.Builder, length float64) {
	builder.PrependFloat64Slot(11, length, 0.0)
}
func LaunchVehicleDetails_FullAddDiameter(builder *flatbuffers.Builder, diameter float64) {
	builder.PrependFloat64Slot(12, diameter, 0.0)
}
func LaunchVehicleDetails_FullAddLaunchMass(builder *flatbuffers.Builder, launchMass float64) {
	builder.PrependFloat64Slot(13, launchMass, 0.0)
}
func LaunchVehicleDetails_FullAddGeoPayloadMass(builder *flatbuffers.Builder, geoPayloadMass float64) {
	builder.PrependFloat64Slot(14, geoPayloadMass, 0.0)
}
func LaunchVehicleDetails_FullAddGtoPayloadMass(builder *flatbuffers.Builder, gtoPayloadMass float64) {
	builder.PrependFloat64Slot(15, gtoPayloadMass, 0.0)
}
func LaunchVehicleDetails_FullAddLeoPayloadMass(builder *flatbuffers.Builder, leoPayloadMass float64) {
	builder.PrependFloat64Slot(16, leoPayloadMass, 0.0)
}
func LaunchVehicleDetails_FullAddSsoPayloadMass(builder *flatbuffers.Builder, ssoPayloadMass float64) {
	builder.PrependFloat64Slot(17, ssoPayloadMass, 0.0)
}
func LaunchVehicleDetails_FullAddFairingLength(builder *flatbuffers.Builder, fairingLength float64) {
	builder.PrependFloat64Slot(18, fairingLength, 0.0)
}
func LaunchVehicleDetails_FullAddFairingName(builder *flatbuffers.Builder, fairingName flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(19, flatbuffers.UOffsetT(fairingName), 0)
}
func LaunchVehicleDetails_FullAddFairingExternalDiameter(builder *flatbuffers.Builder, fairingExternalDiameter float64) {
	builder.PrependFloat64Slot(20, fairingExternalDiameter, 0.0)
}
func LaunchVehicleDetails_FullAddFairingInternalDiameter(builder *flatbuffers.Builder, fairingInternalDiameter float64) {
	builder.PrependFloat64Slot(21, fairingInternalDiameter, 0.0)
}
func LaunchVehicleDetails_FullAddFairingMass(builder *flatbuffers.Builder, fairingMass float64) {
	builder.PrependFloat64Slot(22, fairingMass, 0.0)
}
func LaunchVehicleDetails_FullAddFairingMaterial(builder *flatbuffers.Builder, fairingMaterial flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(23, flatbuffers.UOffsetT(fairingMaterial), 0)
}
func LaunchVehicleDetails_FullAddMaxAccelLoad(builder *flatbuffers.Builder, maxAccelLoad float64) {
	builder.PrependFloat64Slot(24, maxAccelLoad, 0.0)
}
func LaunchVehicleDetails_FullAddMaxPayloadFreqLat(builder *flatbuffers.Builder, maxPayloadFreqLat float64) {
	builder.PrependFloat64Slot(25, maxPayloadFreqLat, 0.0)
}
func LaunchVehicleDetails_FullAddMaxPayloadFreqLon(builder *flatbuffers.Builder, maxPayloadFreqLon float64) {
	builder.PrependFloat64Slot(26, maxPayloadFreqLon, 0.0)
}
func LaunchVehicleDetails_FullAddMaxAcousticLevel(builder *flatbuffers.Builder, maxAcousticLevel float64) {
	builder.PrependFloat64Slot(27, maxAcousticLevel, 0.0)
}
func LaunchVehicleDetails_FullAddMaxAcousticLevelRange(builder *flatbuffers.Builder, maxAcousticLevelRange float64) {
	builder.PrependFloat64Slot(28, maxAcousticLevelRange, 0.0)
}
func LaunchVehicleDetails_FullAddSoundPressureLevel(builder *flatbuffers.Builder, soundPressureLevel float64) {
	builder.PrependFloat64Slot(29, soundPressureLevel, 0.0)
}
func LaunchVehicleDetails_FullAddMaxFlightShockForce(builder *flatbuffers.Builder, maxFlightShockForce float64) {
	builder.PrependFloat64Slot(30, maxFlightShockForce, 0.0)
}
func LaunchVehicleDetails_FullAddMaxFlightShockFreq(builder *flatbuffers.Builder, maxFlightShockFreq float64) {
	builder.PrependFloat64Slot(31, maxFlightShockFreq, 0.0)
}
func LaunchVehicleDetails_FullAddMaxFairingPressureChange(builder *flatbuffers.Builder, maxFairingPressureChange float64) {
	builder.PrependFloat64Slot(32, maxFairingPressureChange, 0.0)
}
func LaunchVehicleDetails_FullAddEstLaunchPrice(builder *flatbuffers.Builder, estLaunchPrice float64) {
	builder.PrependFloat64Slot(33, estLaunchPrice, 0.0)
}
func LaunchVehicleDetails_FullAddEstLaunchPriceTypical(builder *flatbuffers.Builder, estLaunchPriceTypical float64) {
	builder.PrependFloat64Slot(34, estLaunchPriceTypical, 0.0)
}
func LaunchVehicleDetails_FullAddGtoInj3SigAccuracyApogeeTarget(builder *flatbuffers.Builder, gtoInj3SigAccuracyApogeeTarget float64) {
	builder.PrependFloat64Slot(35, gtoInj3SigAccuracyApogeeTarget, 0.0)
}
func LaunchVehicleDetails_FullAddGtoInj3SigAccuracyApogeeMargin(builder *flatbuffers.Builder, gtoInj3SigAccuracyApogeeMargin float64) {
	builder.PrependFloat64Slot(36, gtoInj3SigAccuracyApogeeMargin, 0.0)
}
func LaunchVehicleDetails_FullAddGtoInj3SigAccuracyPerigeeTarget(builder *flatbuffers.Builder, gtoInj3SigAccuracyPerigeeTarget float64) {
	builder.PrependFloat64Slot(37, gtoInj3SigAccuracyPerigeeTarget, 0.0)
}
func LaunchVehicleDetails_FullAddGtoInj3SigAccuracyPerigeeMargin(builder *flatbuffers.Builder, gtoInj3SigAccuracyPerigeeMargin float64) {
	builder.PrependFloat64Slot(38, gtoInj3SigAccuracyPerigeeMargin, 0.0)
}
func LaunchVehicleDetails_FullAddGtoInj3SigAccuracyInclinationTarget(builder *flatbuffers.Builder, gtoInj3SigAccuracyInclinationTarget float64) {
	builder.PrependFloat64Slot(39, gtoInj3SigAccuracyInclinationTarget, 0.0)
}
func LaunchVehicleDetails_FullAddGtoInj3SigAccuracyInclinationMargin(builder *flatbuffers.Builder, gtoInj3SigAccuracyInclinationMargin float64) {
	builder.PrependFloat64Slot(40, gtoInj3SigAccuracyInclinationMargin, 0.0)
}
func LaunchVehicleDetails_FullAddAttitudeAccuracy(builder *flatbuffers.Builder, attitudeAccuracy float64) {
	builder.PrependFloat64Slot(41, attitudeAccuracy, 0.0)
}
func LaunchVehicleDetails_FullAddPayloadSeparationRate(builder *flatbuffers.Builder, payloadSeparationRate float64) {
	builder.PrependFloat64Slot(42, payloadSeparationRate, 0.0)
}
func LaunchVehicleDetails_FullAddDeploymentRotationRate(builder *flatbuffers.Builder, deploymentRotationRate float64) {
	builder.PrependFloat64Slot(43, deploymentRotationRate, 0.0)
}
func LaunchVehicleDetails_FullAddSourceUrl(builder *flatbuffers.Builder, sourceUrl flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(44, flatbuffers.UOffsetT(sourceUrl), 0)
}
func LaunchVehicleDetails_FullAddNotes(builder *flatbuffers.Builder, notes flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(45, flatbuffers.UOffsetT(notes), 0)
}
func LaunchVehicleDetails_FullAddFairingNotes(builder *flatbuffers.Builder, fairingNotes flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(46, flatbuffers.UOffsetT(fairingNotes), 0)
}
func LaunchVehicleDetails_FullAddPayloadNotes(builder *flatbuffers.Builder, payloadNotes flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(47, flatbuffers.UOffsetT(payloadNotes), 0)
}
func LaunchVehicleDetails_FullAddCreatedAt(builder *flatbuffers.Builder, createdAt flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(48, flatbuffers.UOffsetT(createdAt), 0)
}
func LaunchVehicleDetails_FullAddCreatedBy(builder *flatbuffers.Builder, createdBy flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(49, flatbuffers.UOffsetT(createdBy), 0)
}
func LaunchVehicleDetails_FullAddUpdatedAt(builder *flatbuffers.Builder, updatedAt flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(50, flatbuffers.UOffsetT(updatedAt), 0)
}
func LaunchVehicleDetails_FullAddUpdatedBy(builder *flatbuffers.Builder, updatedBy flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(51, flatbuffers.UOffsetT(updatedBy), 0)
}
func LaunchVehicleDetails_FullAddSource(builder *flatbuffers.Builder, source flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(52, flatbuffers.UOffsetT(source), 0)
}
func LaunchVehicleDetails_FullAddOrigin(builder *flatbuffers.Builder, origin flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(53, flatbuffers.UOffsetT(origin), 0)
}
func LaunchVehicleDetails_FullAddOrigNetwork(builder *flatbuffers.Builder, origNetwork flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(54, flatbuffers.UOffsetT(origNetwork), 0)
}
func LaunchVehicleDetails_FullAddDataMode(builder *flatbuffers.Builder, dataMode LaunchVehicleDetails_Full_dataMode_Enum) {
	builder.PrependInt8Slot(55, int8(dataMode), 0)
}
func LaunchVehicleDetails_FullAddTags(builder *flatbuffers.Builder, tags flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(56, flatbuffers.UOffsetT(tags), 0)
}
func LaunchVehicleDetails_FullStartTagsVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func LaunchVehicleDetails_FullAddManufacturerOrg(builder *flatbuffers.Builder, manufacturerOrg flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(57, flatbuffers.UOffsetT(manufacturerOrg), 0)
}
func LaunchVehicleDetails_FullEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
