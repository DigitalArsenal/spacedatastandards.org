// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package Site_Ingest

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

/// /// Properties and characteristics of a site entity, such as an airbase, airfield, naval station, etc.
type Site_Ingest struct {
	_tab flatbuffers.Table
}

const Site_IngestIdentifier = "SITE"

func GetRootAsSite_Ingest(buf []byte, offset flatbuffers.UOffsetT) *Site_Ingest {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &Site_Ingest{}
	x.Init(buf, n+offset)
	return x
}

func FinishSite_IngestBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	identifierBytes := []byte(Site_IngestIdentifier)
	builder.FinishWithFileIdentifier(offset, identifierBytes)
}

func Site_IngestBufferHasIdentifier(buf []byte) bool {
	return flatbuffers.BufferHasIdentifier(buf, Site_IngestIdentifier)
}

func GetSizePrefixedRootAsSite_Ingest(buf []byte, offset flatbuffers.UOffsetT) *Site_Ingest {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &Site_Ingest{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedSite_IngestBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	identifierBytes := []byte(Site_IngestIdentifier)
	builder.FinishSizePrefixedWithFileIdentifier(offset, identifierBytes)
}

func SizePrefixedSite_IngestBufferHasIdentifier(buf []byte) bool {
	return flatbuffers.SizePrefixedBufferHasIdentifier(buf, Site_IngestIdentifier)
}

func (rcv *Site_Ingest) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *Site_Ingest) Table() flatbuffers.Table {
	return rcv._tab
}

/// Unique identifier of the record, auto-generated by the system.
/// Example: /// Example: SITE-ID
/// Constraints: Minimum length = 1, Maximum length = 36
func (rcv *Site_Ingest) Id() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Unique identifier of the record, auto-generated by the system.
/// Example: /// Example: SITE-ID
/// Constraints: Minimum length = 1, Maximum length = 36
/// No description provided.
/// Example: /// Example: No example provided.
/// Constraints: No constraints specified.
func (rcv *Site_Ingest) Entity() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// No description provided.
/// Example: /// Example: No example provided.
/// Constraints: No constraints specified.
/// Unique identifier of the parent entity. idEntity is required for Put.
/// Example: /// Example: ENTITY-ID
/// Constraints: Minimum length = 0, Maximum length = 36
func (rcv *Site_Ingest) IdEntity() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Unique identifier of the parent entity. idEntity is required for Put.
/// Example: /// Example: ENTITY-ID
/// Constraints: Minimum length = 0, Maximum length = 36
/// Unique identifier of the Parent Site record associated with this Site record.
/// Example: /// Example: ID-Parent-Site
/// Constraints: Minimum length = 0, Maximum length = 36
func (rcv *Site_Ingest) IdParentSite() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Unique identifier of the Parent Site record associated with this Site record.
/// Example: /// Example: ID-Parent-Site
/// Constraints: Minimum length = 0, Maximum length = 36
/// Classification marking of the data in IC/CAPCO Portion-marked format.
/// Example: /// Example: U
/// Constraints: Minimum length = 1, Maximum length = 128
func (rcv *Site_Ingest) ClassificationMarking() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Classification marking of the data in IC/CAPCO Portion-marked format.
/// Example: /// Example: U
/// Constraints: Minimum length = 1, Maximum length = 128
/// Unique identifier of the Site record from the originating system.
/// Example: /// Example: ORIG-SITE-ID
/// Constraints: Minimum length = 0, Maximum length = 36
func (rcv *Site_Ingest) OrigSiteId() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Unique identifier of the Site record from the originating system.
/// Example: /// Example: ORIG-SITE-ID
/// Constraints: Minimum length = 0, Maximum length = 36
/// Unique identifier of the LZ record from the originating system.
/// Example: /// Example: ORIG-LZ-ID
/// Constraints: Minimum length = 0, Maximum length = 36
func (rcv *Site_Ingest) OrigLzId() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Unique identifier of the LZ record from the originating system.
/// Example: /// Example: ORIG-LZ-ID
/// Constraints: Minimum length = 0, Maximum length = 36
/// Site number of a specific electronic site or its associated equipment.
/// Example: /// Example: 25200
/// Constraints: Minimum length = 0, Maximum length = 5
func (rcv *Site_Ingest) Pin() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(18))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Site number of a specific electronic site or its associated equipment.
/// Example: /// Example: 25200
/// Constraints: Minimum length = 0, Maximum length = 5
/// The type of this site (AIRBASE, AIRFIELD, AIRPORT, NAVAL STATION, etc.).
/// Example: /// Example: AIRBASE
/// Constraints: Minimum length = 0, Maximum length = 16
func (rcv *Site_Ingest) Type() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(20))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The type of this site (AIRBASE, AIRFIELD, AIRPORT, NAVAL STATION, etc.).
/// Example: /// Example: AIRBASE
/// Constraints: Minimum length = 0, Maximum length = 16
/// The use authorization type of this site (e.g MILITARY, CIVIL, JOINT-USE, etc.).
/// Example: /// Example: MILITARY
/// Constraints: Minimum length = 0, Maximum length = 16
func (rcv *Site_Ingest) Usage() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(22))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The use authorization type of this site (e.g MILITARY, CIVIL, JOINT-USE, etc.).
/// Example: /// Example: MILITARY
/// Constraints: Minimum length = 0, Maximum length = 16
/// Indicates the normal usage of the Landing Zone (LZ).  Intended as, but not constrained to MIDB Helocopter Landing Area usage value definitions:
/// AF - Airfield
/// FD - Field
/// HC - High Crop.  1 meter and over.
/// HY - Highway
/// LB - Lake Bed
/// LC - Low Crop.  0-1 meters
/// O - Other. Explain In Remarks.
/// PD - Paddy
/// PK - Park
/// PS - Pasture
/// RB - Riverbed
/// SP - Sport Field
/// U - Unknown
/// Z - Inconclusive Analysis.
/// Example: /// Example: AF
/// Constraints: Minimum length = 0, Maximum length = 3
func (rcv *Site_Ingest) LzUsage() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(24))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Indicates the normal usage of the Landing Zone (LZ).  Intended as, but not constrained to MIDB Helocopter Landing Area usage value definitions:
/// AF - Airfield
/// FD - Field
/// HC - High Crop.  1 meter and over.
/// HY - Highway
/// LB - Lake Bed
/// LC - Low Crop.  0-1 meters
/// O - Other. Explain In Remarks.
/// PD - Paddy
/// PK - Park
/// PS - Pasture
/// RB - Riverbed
/// SP - Sport Field
/// U - Unknown
/// Z - Inconclusive Analysis.
/// Example: /// Example: AF
/// Constraints: Minimum length = 0, Maximum length = 3
/// The name of this site.
/// Example: /// Example: Site Name
/// Constraints: Minimum length = 1, Maximum length = 128
func (rcv *Site_Ingest) Name() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(26))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The name of this site.
/// Example: /// Example: Site Name
/// Constraints: Minimum length = 1, Maximum length = 128
/// A mathematical model of the earth used to calculate coordinates on a map. US Forces use the World Geodetic System 1984 (WGS 84), but also use maps by allied countries with local datums. The datum must be specified to ensure accuracy of coordinates. The specific usage and enumerations contained in this field may be found in the documentation provided in the referenceDoc field.  If referenceDoc not provided, users may consult the data provider.
/// Example: /// Example: WGS
/// Constraints: Minimum length = 0, Maximum length = 3
func (rcv *Site_Ingest) CoordDatum() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(28))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// A mathematical model of the earth used to calculate coordinates on a map. US Forces use the World Geodetic System 1984 (WGS 84), but also use maps by allied countries with local datums. The datum must be specified to ensure accuracy of coordinates. The specific usage and enumerations contained in this field may be found in the documentation provided in the referenceDoc field.  If referenceDoc not provided, users may consult the data provider.
/// Example: /// Example: WGS
/// Constraints: Minimum length = 0, Maximum length = 3
/// Indicates any of the magnitudes that serve to define the position of a point by reference to a fixed figure, system of lines, etc.
/// Pos. 1-2.  Latitude Degrees     [00-90]
/// Pos. 3-4.  Latitude Minutes     [00-59]
/// Pos. 5-6.  Latitude Seconds     [00-59]
/// Pos. 7-9.  Latitude Thousandths Of Seconds   [000-999]  
/// Pos. 10. Latitude Hemisphere       [NS] 
/// Pos. 11-13. Longitude Degrees     [00-180] 
/// Pos. 14-15. Longitude Minutes     [00-59] 
/// Pos. 16-17. Longitude Seconds     [00-59] 
/// Pos. 18-20. Longitude Thousandths Of Seconds      [000-999]
/// Pos. 21. Longitude Hemisphere     [EW]
/// Pos. 1-21.  Unknown Latitude and Unknown Longitude [000000000U000000000U].
/// Example: /// Example: 340000000N0430000000E
/// Constraints: Minimum length = 0, Maximum length = 21
func (rcv *Site_Ingest) Coord() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(30))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Indicates any of the magnitudes that serve to define the position of a point by reference to a fixed figure, system of lines, etc.
/// Pos. 1-2.  Latitude Degrees     [00-90]
/// Pos. 3-4.  Latitude Minutes     [00-59]
/// Pos. 5-6.  Latitude Seconds     [00-59]
/// Pos. 7-9.  Latitude Thousandths Of Seconds   [000-999]  
/// Pos. 10. Latitude Hemisphere       [NS] 
/// Pos. 11-13. Longitude Degrees     [00-180] 
/// Pos. 14-15. Longitude Minutes     [00-59] 
/// Pos. 16-17. Longitude Seconds     [00-59] 
/// Pos. 18-20. Longitude Thousandths Of Seconds      [000-999]
/// Pos. 21. Longitude Hemisphere     [EW]
/// Pos. 1-21.  Unknown Latitude and Unknown Longitude [000000000U000000000U].
/// Example: /// Example: 340000000N0430000000E
/// Constraints: Minimum length = 0, Maximum length = 21
/// Indicates the plus or minus error assessed against the method used to derive the coordinate.
/// Example: /// Example: 12.345
/// Constraints: No constraints specified.
func (rcv *Site_Ingest) CoordDerivAcc() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(32))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Indicates the plus or minus error assessed against the method used to derive the coordinate.
/// Example: /// Example: 12.345
/// Constraints: No constraints specified.
func (rcv *Site_Ingest) MutateCoordDerivAcc(n float64) bool {
	return rcv._tab.MutateFloat64Slot(32, n)
}

/// The O-suffix associated with this site. The O-suffix is a five-character alpha/numeric system used to identify a site, or demographic area, within an installation. The Installation Basic Encyclopedia (beNumber), in conjunction with the O-suffix, uniquely identifies the Site. The Installation beNumber and oSuffix are also used in conjunction with the catCode to classify the function or purpose of the facility.
/// Example: /// Example: BB002
/// Constraints: Minimum length = 0, Maximum length = 5
func (rcv *Site_Ingest) Osuffix() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(34))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The O-suffix associated with this site. The O-suffix is a five-character alpha/numeric system used to identify a site, or demographic area, within an installation. The Installation Basic Encyclopedia (beNumber), in conjunction with the O-suffix, uniquely identifies the Site. The Installation beNumber and oSuffix are also used in conjunction with the catCode to classify the function or purpose of the facility.
/// Example: /// Example: BB002
/// Constraints: Minimum length = 0, Maximum length = 5
/// The International Air Transport Association (IATA) code of this site, if applicable.
/// Example: /// Example: AAA
/// Constraints: Minimum length = 0, Maximum length = 3
func (rcv *Site_Ingest) Iata() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(36))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The International Air Transport Association (IATA) code of this site, if applicable.
/// Example: /// Example: AAA
/// Constraints: Minimum length = 0, Maximum length = 3
/// The International Civil Aviation Organization (ICAO) code of this site, if applicable.
/// Example: /// Example: ICA1
/// Constraints: Minimum length = 0, Maximum length = 4
func (rcv *Site_Ingest) Icao() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(38))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The International Civil Aviation Organization (ICAO) code of this site, if applicable.
/// Example: /// Example: ICA1
/// Constraints: Minimum length = 0, Maximum length = 4
/// The Federal Aviation Administration (FAA) Location ID of this site, if applicable.
/// Example: /// Example: FAA1
/// Constraints: Minimum length = 0, Maximum length = 5
func (rcv *Site_Ingest) Faa() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(40))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The Federal Aviation Administration (FAA) Location ID of this site, if applicable.
/// Example: /// Example: FAA1
/// Constraints: Minimum length = 0, Maximum length = 5
/// Air Defense District (ADD) or Air Defense Area (ADA) in which the geographic coordinates reside.
/// Example: /// Example: AL006
/// Constraints: Minimum length = 0, Maximum length = 5
func (rcv *Site_Ingest) AirDefArea() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(42))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Air Defense District (ADD) or Air Defense Area (ADA) in which the geographic coordinates reside.
/// Example: /// Example: AL006
/// Constraints: Minimum length = 0, Maximum length = 5
/// Universal Transverse Mercator (UTM) grid coordinates.
/// Pos. 1-2, UTM Zone Column   [01-60
/// Pos. 3, UTM Zone Row   [C-HJ-NP-X]
/// Pos. 4, UTM False Easting   [0-9]
/// Pos. 5-9, UTM Meter Easting    [0-9][0-9][0-9][0-9][0-9]
/// Pos. 10-11, UTM False Northing    [0-9][0-9]
/// Pos. 12-16, UTM Meter Northing    [0-9][0-9][0-9][0-9][0-9].
/// Example: /// Example: 19P4390691376966
/// Constraints: Minimum length = 0, Maximum length = 16
func (rcv *Site_Ingest) Utm() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(44))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Universal Transverse Mercator (UTM) grid coordinates.
/// Pos. 1-2, UTM Zone Column   [01-60
/// Pos. 3, UTM Zone Row   [C-HJ-NP-X]
/// Pos. 4, UTM False Easting   [0-9]
/// Pos. 5-9, UTM Meter Easting    [0-9][0-9][0-9][0-9][0-9]
/// Pos. 10-11, UTM False Northing    [0-9][0-9]
/// Pos. 12-16, UTM Meter Northing    [0-9][0-9][0-9][0-9][0-9].
/// Example: /// Example: 19P4390691376966
/// Constraints: Minimum length = 0, Maximum length = 16
/// Indicates the grid system used in the development of the milGrid coordinates. Values are:
/// UPS - Universal Polar System
/// UTM - Universal Transverse Mercator.
/// Example: /// Example: UTM
/// Constraints: Minimum length = 0, Maximum length = 3
func (rcv *Site_Ingest) MilGridSys() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(46))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Indicates the grid system used in the development of the milGrid coordinates. Values are:
/// UPS - Universal Polar System
/// UTM - Universal Transverse Mercator.
/// Example: /// Example: UTM
/// Constraints: Minimum length = 0, Maximum length = 3
/// The Military Grid Reference System is the geocoordinate standard used by NATO militaries for locating points on Earth. The MGRS is derived from the Universal Transverse Mercator (UTM) grid system and the Universal Polar Stereographic (UPS) grid system, but uses a different labeling convention. The MGRS is used as geocode for the entire Earth. Example of an milgrid coordinate, or grid reference, would be 4QFJ12345678, which consists of three parts:
/// 4Q (grid zone designator, GZD)
/// FJ (the 100,000-meter square identifier)
/// 12345678 (numerical location; easting is 1234 and northing is 5678, in this case specifying a location with 10 m resolution).
/// Example: /// Example: 4QFJ12345678
/// Constraints: Minimum length = 0, Maximum length = 15
func (rcv *Site_Ingest) MilGrid() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(48))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The Military Grid Reference System is the geocoordinate standard used by NATO militaries for locating points on Earth. The MGRS is derived from the Universal Transverse Mercator (UTM) grid system and the Universal Polar Stereographic (UPS) grid system, but uses a different labeling convention. The MGRS is used as geocode for the entire Earth. Example of an milgrid coordinate, or grid reference, would be 4QFJ12345678, which consists of three parts:
/// 4Q (grid zone designator, GZD)
/// FJ (the 100,000-meter square identifier)
/// 12345678 (numerical location; easting is 1234 and northing is 5678, in this case specifying a location with 10 m resolution).
/// Example: /// Example: 4QFJ12345678
/// Constraints: Minimum length = 0, Maximum length = 15
/// The category code that represents the associated site purpose within the target system.
/// Example: /// Example: 20345
/// Constraints: Minimum length = 0, Maximum length = 16
func (rcv *Site_Ingest) CatCode() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(50))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The category code that represents the associated site purpose within the target system.
/// Example: /// Example: 20345
/// Constraints: Minimum length = 0, Maximum length = 16
/// Textual Description of Site catCode.
/// Example: /// Example: Radar Facility, General
/// Constraints: Minimum length = 0, Maximum length = 148
func (rcv *Site_Ingest) CatText() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(52))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Textual Description of Site catCode.
/// Example: /// Example: Radar Facility, General
/// Constraints: Minimum length = 0, Maximum length = 148
/// World Aeronautical Chart identifier for the area in which a designated place is located.
/// Example: /// Example: 0427
/// Constraints: Minimum length = 0, Maximum length = 4
func (rcv *Site_Ingest) Wac() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(54))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// World Aeronautical Chart identifier for the area in which a designated place is located.
/// Example: /// Example: 0427
/// Constraints: Minimum length = 0, Maximum length = 4
/// Political subdivision in which the geographic coordinates reside. The specific usage and enumerations contained in this field may be found in the documentation provided in the referenceDoc field. If referenceDoc not provided, users may consult the data provider.
/// Example: /// Example: IZO7
/// Constraints: Minimum length = 0, Maximum length = 7
func (rcv *Site_Ingest) PolSubdiv() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(56))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Political subdivision in which the geographic coordinates reside. The specific usage and enumerations contained in this field may be found in the documentation provided in the referenceDoc field. If referenceDoc not provided, users may consult the data provider.
/// Example: /// Example: IZO7
/// Constraints: Minimum length = 0, Maximum length = 7
/// Geographical region code used by the Requirements Management System (RMS) as specified by National Geospatial Agency (NGA) in Flight Information Publications (FIPS) 10-4, Appendix 3 - Country Code and Geographic Region Codes. The specific usage and enumerations contained in this field may be found in the documentation provided in the referenceDoc field. If referenceDoc not provided, users may consult the data provider.
/// Example: /// Example: E2
/// Constraints: Minimum length = 0, Maximum length = 2
func (rcv *Site_Ingest) GeoArea() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(58))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Geographical region code used by the Requirements Management System (RMS) as specified by National Geospatial Agency (NGA) in Flight Information Publications (FIPS) 10-4, Appendix 3 - Country Code and Geographic Region Codes. The specific usage and enumerations contained in this field may be found in the documentation provided in the referenceDoc field. If referenceDoc not provided, users may consult the data provider.
/// Example: /// Example: E2
/// Constraints: Minimum length = 0, Maximum length = 2
/// The distance between Mean Sea Level and a referenced ellipsoid, in meters.
/// Example: /// Example: 12.34
/// Constraints: No constraints specified.
func (rcv *Site_Ingest) GeoidalMslSep() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(60))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// The distance between Mean Sea Level and a referenced ellipsoid, in meters.
/// Example: /// Example: 12.34
/// Constraints: No constraints specified.
func (rcv *Site_Ingest) MutateGeoidalMslSep(n float64) bool {
	return rcv._tab.MutateFloat64Slot(60, n)
}

/// The DoD Standard Country Code designator for the country or political entity to which the site owes its allegiance. This field will be set to "OTHR" if the source value does not match a UDL Country code value (ISO-3166-ALPHA-2).
/// Example: /// Example: OTHR
/// Constraints: Minimum length = 0, Maximum length = 4
func (rcv *Site_Ingest) Allegiance() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(62))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The DoD Standard Country Code designator for the country or political entity to which the site owes its allegiance. This field will be set to "OTHR" if the source value does not match a UDL Country code value (ISO-3166-ALPHA-2).
/// Example: /// Example: OTHR
/// Constraints: Minimum length = 0, Maximum length = 4
/// Specifies an alternate allegiance code if the data provider code is not part of an official Country Code standard such as ISO-3166 or FIPS. This field will be set to the value provided by the source and should be used for all Queries specifying allegiance.
/// Example: /// Example: HL
/// Constraints: Minimum length = 0, Maximum length = 4
func (rcv *Site_Ingest) AltAllegiance() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(64))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Specifies an alternate allegiance code if the data provider code is not part of an official Country Code standard such as ISO-3166 or FIPS. This field will be set to the value provided by the source and should be used for all Queries specifying allegiance.
/// Example: /// Example: HL
/// Constraints: Minimum length = 0, Maximum length = 4
/// Indicates the importance of the entity to the OES or MIR system.  This data element is restricted to update by DIA (DB-4). Valid values are:
/// 0 - Does not meet criteria above
/// 1 - Primary importance to system
/// 2 - Secondary importance to system
/// 3 - Tertiary importance to system
/// O - Other. Explain in Remarks.
/// Example: /// Example: 1
/// Constraints: Minimum length = 0, Maximum length = 1
func (rcv *Site_Ingest) ClassRating() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(66))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Indicates the importance of the entity to the OES or MIR system.  This data element is restricted to update by DIA (DB-4). Valid values are:
/// 0 - Does not meet criteria above
/// 1 - Primary importance to system
/// 2 - Secondary importance to system
/// 3 - Tertiary importance to system
/// O - Other. Explain in Remarks.
/// Example: /// Example: 1
/// Constraints: Minimum length = 0, Maximum length = 1
/// Functional Production Area (FPA) under the Shared Production Program (SPP). Producers are defined per country per FPA. The specific usage and enumerations contained in this field may be found in the documentation provided in the referenceDoc field. If referenceDoc not provided, users may consult the data provider.
/// Example: /// Example: EOB
/// Constraints: Minimum length = 0, Maximum length = 5
func (rcv *Site_Ingest) Fpa() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(68))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Functional Production Area (FPA) under the Shared Production Program (SPP). Producers are defined per country per FPA. The specific usage and enumerations contained in this field may be found in the documentation provided in the referenceDoc field. If referenceDoc not provided, users may consult the data provider.
/// Example: /// Example: EOB
/// Constraints: Minimum length = 0, Maximum length = 5
/// The Basic Encyclopedia Number associated with the Site. Uniquely identifies the installation of a site. The beNumber is generated based on the value input for the COORD to determine the appropriate World Aeronautical Chart (WAC) location identifier, the system assigned record originator and a one-up-number.
/// Example: /// Example: 0427RT1030
/// Constraints: Minimum length = 0, Maximum length = 10
func (rcv *Site_Ingest) BeNumber() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(70))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The Basic Encyclopedia Number associated with the Site. Uniquely identifies the installation of a site. The beNumber is generated based on the value input for the COORD to determine the appropriate World Aeronautical Chart (WAC) location identifier, the system assigned record originator and a one-up-number.
/// Example: /// Example: 0427RT1030
/// Constraints: Minimum length = 0, Maximum length = 10
/// The number of runways at the site, if applicable.
/// Example: /// Example: 5
/// Constraints: No constraints specified.
func (rcv *Site_Ingest) Runways() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(72))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

/// The number of runways at the site, if applicable.
/// Example: /// Example: 5
/// Constraints: No constraints specified.
func (rcv *Site_Ingest) MutateRunways(n int32) bool {
	return rcv._tab.MutateInt32Slot(72, n)
}

/// The length of the longest runway at this site, if applicable, in meters.
/// Example: /// Example: 1000
/// Constraints: No constraints specified.
func (rcv *Site_Ingest) MaxRunwayLength() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(74))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

/// The length of the longest runway at this site, if applicable, in meters.
/// Example: /// Example: 1000
/// Constraints: No constraints specified.
func (rcv *Site_Ingest) MutateMaxRunwayLength(n int32) bool {
	return rcv._tab.MutateInt32Slot(74, n)
}

/// The physical manner of being or state of existence of the entity. A physical condition that must be considered in the determining of a course of action. The specific usage and enumerations contained in this field may be found in the documentation provided in the referenceDoc field. If referenceDoc not provided, users may consult the data provider.
/// Example: /// Example: RDY
/// Constraints: Minimum length = 0, Maximum length = 4
func (rcv *Site_Ingest) Condition() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(76))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The physical manner of being or state of existence of the entity. A physical condition that must be considered in the determining of a course of action. The specific usage and enumerations contained in this field may be found in the documentation provided in the referenceDoc field. If referenceDoc not provided, users may consult the data provider.
/// Example: /// Example: RDY
/// Constraints: Minimum length = 0, Maximum length = 4
/// Availability of the entity relative to its condition. Indicates the reason the entity is not fully operational. The specific usage and enumerations contained in this field may be found in the documentation provided in the referenceDoc field. If referenceDoc not provided, users may consult the data provider.
/// Example: /// Example: A
/// Constraints: Minimum length = 0, Maximum length = 4
func (rcv *Site_Ingest) ConditionAvail() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(78))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Availability of the entity relative to its condition. Indicates the reason the entity is not fully operational. The specific usage and enumerations contained in this field may be found in the documentation provided in the referenceDoc field. If referenceDoc not provided, users may consult the data provider.
/// Example: /// Example: A
/// Constraints: Minimum length = 0, Maximum length = 4
/// The Degree to which an entity is ready to perform the overall operational mission(s) for which it was organized and equipped. The specific usage and enumerations contained in this field may be found in the documentation provided in the referenceDoc field. If referenceDoc not provided, users may consult the data provider.
/// Example: /// Example: OPR
/// Constraints: Minimum length = 0, Maximum length = 3
func (rcv *Site_Ingest) OperStatus() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(80))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The Degree to which an entity is ready to perform the overall operational mission(s) for which it was organized and equipped. The specific usage and enumerations contained in this field may be found in the documentation provided in the referenceDoc field. If referenceDoc not provided, users may consult the data provider.
/// Example: /// Example: OPR
/// Constraints: Minimum length = 0, Maximum length = 3
/// Indicates the amount or degree of deviation from the horizontal represented as a percent.  Grade is determined by the formula: vertical distance (VD) divided by horizontal distance (HD) times 100. VD is the difference between the highest and  lowest elevation within the entity. HD is the linear distance between the highest and lowest elevation.
/// Example: /// Example: 5
/// Constraints: No constraints specified.
func (rcv *Site_Ingest) Grade() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(82))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

/// Indicates the amount or degree of deviation from the horizontal represented as a percent.  Grade is determined by the formula: vertical distance (VD) divided by horizontal distance (HD) times 100. VD is the difference between the highest and  lowest elevation within the entity. HD is the linear distance between the highest and lowest elevation.
/// Example: /// Example: 5
/// Constraints: No constraints specified.
func (rcv *Site_Ingest) MutateGrade(n int32) bool {
	return rcv._tab.MutateInt32Slot(82, n)
}

/// Indicates the function or mission of an entity, which that entity may or may not be engaged in at any particular time. Typically refers to a unit, organization, or installation/site performing a specific function or mission such as a redistribution center or naval shipyard. The specific usage and enumerations contained in this field may be found in the documentation provided in the referenceDoc field. If referenceDoc not provided, users may consult the data provider.
/// Example: /// Example: OCC
/// Constraints: Minimum length = 0, Maximum length = 3
func (rcv *Site_Ingest) Activity() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(84))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Indicates the function or mission of an entity, which that entity may or may not be engaged in at any particular time. Typically refers to a unit, organization, or installation/site performing a specific function or mission such as a redistribution center or naval shipyard. The specific usage and enumerations contained in this field may be found in the documentation provided in the referenceDoc field. If referenceDoc not provided, users may consult the data provider.
/// Example: /// Example: OCC
/// Constraints: Minimum length = 0, Maximum length = 3
/// Principal operational function being performed. The specific usage and enumerations contained in this field may be found in the documentation provided in the referenceDoc field. If referenceDoc not provided, users may consult the data provider.
/// Example: /// Example: JG
/// Constraints: Minimum length = 0, Maximum length = 4
func (rcv *Site_Ingest) FunctPrimary() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(86))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Principal operational function being performed. The specific usage and enumerations contained in this field may be found in the documentation provided in the referenceDoc field. If referenceDoc not provided, users may consult the data provider.
/// Example: /// Example: JG
/// Constraints: Minimum length = 0, Maximum length = 4
/// Indicates the principal type of mission that an entity is organized and equipped to perform. The specific usage and enumerations contained in this field may be found in the documentation provided in the referenceDoc field. If referenceDoc not provided, users may consult the data provider.
/// Example: /// Example: AA
/// Constraints: Minimum length = 0, Maximum length = 4
func (rcv *Site_Ingest) MsnPrimary() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(88))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Indicates the principal type of mission that an entity is organized and equipped to perform. The specific usage and enumerations contained in this field may be found in the documentation provided in the referenceDoc field. If referenceDoc not provided, users may consult the data provider.
/// Example: /// Example: AA
/// Constraints: Minimum length = 0, Maximum length = 4
/// Indicates the principal specialty type of mission that an entity is organized and equipped to perform. The specific usage and enumerations contained in this field may be found in the documentation provided in the referenceDoc field.  If referenceDoc not provided, users may consult the data provider.
/// Example: /// Example: AB
/// Constraints: Minimum length = 0, Maximum length = 4
func (rcv *Site_Ingest) MsnPrimarySpec() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(90))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Indicates the principal specialty type of mission that an entity is organized and equipped to perform. The specific usage and enumerations contained in this field may be found in the documentation provided in the referenceDoc field.  If referenceDoc not provided, users may consult the data provider.
/// Example: /// Example: AB
/// Constraints: Minimum length = 0, Maximum length = 4
/// A sites ability to conduct nuclear warfare. Valid Values are:
/// A - Nuclear Ammo Or Warheads Available
/// N - No Nuclear Offense
/// O - Other. Explain in Remarks
/// U - Unknown
/// W - Nuclear Weapons Available
/// Y - Nuclear Warfare Offensive Capability
/// Z - Inconclusive Analysis.
/// Example: /// Example: A
/// Constraints: Minimum length = 0, Maximum length = 1
func (rcv *Site_Ingest) NucCap() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(92))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// A sites ability to conduct nuclear warfare. Valid Values are:
/// A - Nuclear Ammo Or Warheads Available
/// N - No Nuclear Offense
/// O - Other. Explain in Remarks
/// U - Unknown
/// W - Nuclear Weapons Available
/// Y - Nuclear Warfare Offensive Capability
/// Z - Inconclusive Analysis.
/// Example: /// Example: A
/// Constraints: Minimum length = 0, Maximum length = 1
/// Estimated identity of the Site (ASSUMED FRIEND, FRIEND, HOSTILE, FAKER, JOKER, NEUTRAL, PENDING, SUSPECT, UNKNOWN): 
/// ASSUMED FRIEND: Track assumed to be a friend due to the object characteristics, behavior, and/or origin.
/// FRIEND: Track object supporting friendly forces and belonging to a declared friendly nation or entity.
/// HOSTILE: Track object belonging to an opposing nation, party, group, or entity deemed to contribute to a threat to friendly forces or their mission due to its behavior, characteristics, nationality, or origin.
/// FAKER: Friendly track, object, or entity acting as an exercise hostile.
/// JOKER: Friendly track, object, or entity acting as an exercise suspect.
/// NEUTRAL: Track object whose characteristics, behavior, nationality, and/or origin indicate that it is neither supporting nor opposing friendly forces or their mission.
/// PENDING: Track object which has not been evaluated.
/// SUSPECT: Track object deemed potentially hostile due to the object characteristics, behavior, nationality, and/or origin.
/// UNKNOWN: Track object which has been evaluated and does not meet criteria for any standard identity.
/// Example: /// Example: FRIEND
/// Constraints: Minimum length = 0, Maximum length = 32
func (rcv *Site_Ingest) Ident() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(94))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Estimated identity of the Site (ASSUMED FRIEND, FRIEND, HOSTILE, FAKER, JOKER, NEUTRAL, PENDING, SUSPECT, UNKNOWN): 
/// ASSUMED FRIEND: Track assumed to be a friend due to the object characteristics, behavior, and/or origin.
/// FRIEND: Track object supporting friendly forces and belonging to a declared friendly nation or entity.
/// HOSTILE: Track object belonging to an opposing nation, party, group, or entity deemed to contribute to a threat to friendly forces or their mission due to its behavior, characteristics, nationality, or origin.
/// FAKER: Friendly track, object, or entity acting as an exercise hostile.
/// JOKER: Friendly track, object, or entity acting as an exercise suspect.
/// NEUTRAL: Track object whose characteristics, behavior, nationality, and/or origin indicate that it is neither supporting nor opposing friendly forces or their mission.
/// PENDING: Track object which has not been evaluated.
/// SUSPECT: Track object deemed potentially hostile due to the object characteristics, behavior, nationality, and/or origin.
/// UNKNOWN: Track object which has been evaluated and does not meet criteria for any standard identity.
/// Example: /// Example: FRIEND
/// Constraints: Minimum length = 0, Maximum length = 32
/// Ground elevation of the geographic coordinates referenced to (above or below) Mean Sea Level (MSL) vertical datum, in meters.
/// Example: /// Example: 123.45
/// Constraints: No constraints specified.
func (rcv *Site_Ingest) ElevMsl() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(96))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Ground elevation of the geographic coordinates referenced to (above or below) Mean Sea Level (MSL) vertical datum, in meters.
/// Example: /// Example: 123.45
/// Constraints: No constraints specified.
func (rcv *Site_Ingest) MutateElevMsl(n float64) bool {
	return rcv._tab.MutateFloat64Slot(96, n)
}

/// Indicates the confidence level expressed as a percent that a specific geometric spatial element, ELEVATION_MSL linear accuracy, has been vertically positioned to within a specified vertical accuracy.
/// Example: /// Example: 50
/// Constraints: No constraints specified.
func (rcv *Site_Ingest) ElevMslConfLvl() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(98))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

/// Indicates the confidence level expressed as a percent that a specific geometric spatial element, ELEVATION_MSL linear accuracy, has been vertically positioned to within a specified vertical accuracy.
/// Example: /// Example: 50
/// Constraints: No constraints specified.
func (rcv *Site_Ingest) MutateElevMslConfLvl(n int32) bool {
	return rcv._tab.MutateInt32Slot(98, n)
}

/// Indicates the plus or minus error assessed against the method used to derive the elevation.
/// Example: /// Example: 12.34
/// Constraints: No constraints specified.
func (rcv *Site_Ingest) ElevMslDerivAcc() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(100))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Indicates the plus or minus error assessed against the method used to derive the elevation.
/// Example: /// Example: 12.34
/// Constraints: No constraints specified.
func (rcv *Site_Ingest) MutateElevMslDerivAcc(n float64) bool {
	return rcv._tab.MutateFloat64Slot(100, n)
}

/// Maximum expected height of the vegetation in the Landing Zone (LZ), in meters.
/// Example: /// Example: 3
/// Constraints: No constraints specified.
func (rcv *Site_Ingest) VegHt() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(102))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Maximum expected height of the vegetation in the Landing Zone (LZ), in meters.
/// Example: /// Example: 3
/// Constraints: No constraints specified.
func (rcv *Site_Ingest) MutateVegHt(n float64) bool {
	return rcv._tab.MutateFloat64Slot(102, n)
}

/// The predominant vegetation found in the Landing Zone (LZ). The specific usage and enumerations contained in this field may be found in the documentation provided in the referenceDoc field. If referenceDoc not provided, users may consult the data provider.
/// Example: /// Example: FR
/// Constraints: Minimum length = 0, Maximum length = 4
func (rcv *Site_Ingest) VegType() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(104))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The predominant vegetation found in the Landing Zone (LZ). The specific usage and enumerations contained in this field may be found in the documentation provided in the referenceDoc field. If referenceDoc not provided, users may consult the data provider.
/// Example: /// Example: FR
/// Constraints: Minimum length = 0, Maximum length = 4
/// Indicates whether the facility is in or outside of a populated area. True, the facility is in or within 5 NM of a populated area. False, the facility is outside a populated area.
/// Example: /// Example: True
/// Constraints: No constraints specified.
func (rcv *Site_Ingest) PopArea() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(106))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

/// Indicates whether the facility is in or outside of a populated area. True, the facility is in or within 5 NM of a populated area. False, the facility is outside a populated area.
/// Example: /// Example: True
/// Constraints: No constraints specified.
func (rcv *Site_Ingest) MutatePopArea(n bool) bool {
	return rcv._tab.MutateBoolSlot(106, n)
}

/// Indicates the distance to nearest populated area (over 1,000 people) in nautical miles.
/// Example: /// Example: 12.345
/// Constraints: No constraints specified.
func (rcv *Site_Ingest) PopAreaProx() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(108))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Indicates the distance to nearest populated area (over 1,000 people) in nautical miles.
/// Example: /// Example: 12.345
/// Constraints: No constraints specified.
func (rcv *Site_Ingest) MutatePopAreaProx(n float64) bool {
	return rcv._tab.MutateFloat64Slot(108, n)
}

/// Optional notes/comments for the site.
/// Example: /// Example: Example Notes
/// Constraints: Minimum length = 0, Maximum length = 1024
func (rcv *Site_Ingest) Notes() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(110))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Optional notes/comments for the site.
/// Example: /// Example: Example Notes
/// Constraints: Minimum length = 0, Maximum length = 1024
/// Responsible Producer - Organization that is responsible for the maintenance of the record.
/// Example: /// Example: RT
/// Constraints: Minimum length = 0, Maximum length = 4
func (rcv *Site_Ingest) ResProd() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(112))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Responsible Producer - Organization that is responsible for the maintenance of the record.
/// Example: /// Example: RT
/// Constraints: Minimum length = 0, Maximum length = 4
/// Eval represents the Intelligence Confidence Level or the Reliability/degree of confidence that the analyst has assigned to the data within this record. The numerical range is from 1 to 9 with 1 representing the highest confidence level.
/// Example: /// Example: 7
/// Constraints: No constraints specified.
func (rcv *Site_Ingest) Eval() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(114))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

/// Eval represents the Intelligence Confidence Level or the Reliability/degree of confidence that the analyst has assigned to the data within this record. The numerical range is from 1 to 9 with 1 representing the highest confidence level.
/// Example: /// Example: 7
/// Constraints: No constraints specified.
func (rcv *Site_Ingest) MutateEval(n int32) bool {
	return rcv._tab.MutateInt32Slot(114, n)
}

/// Date on which the data in the record was last reviewed by the responsible analyst for accuracy and currency, in ISO8601 UTC format. This date cannot be greater than the current date.
/// Example: /// Example: 2008-06-10
/// Constraints: No constraints specified.
func (rcv *Site_Ingest) ReviewDate() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(116))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Date on which the data in the record was last reviewed by the responsible analyst for accuracy and currency, in ISO8601 UTC format. This date cannot be greater than the current date.
/// Example: /// Example: 2008-06-10
/// Constraints: No constraints specified.
/// Validity and currency of the data in the record to be used in conjunction with the other elements in the record as defined by SOPs.
/// A - Active
/// I - Inactive
/// K - Acknowledged
/// L - Local
/// Q - A nominated (NOM) or Data Change Request (DCR) record
/// R - Production reduced by CMD decision
/// W - Working Record.
/// Example: /// Example: A
/// Constraints: Minimum length = 0, Maximum length = 1
func (rcv *Site_Ingest) RecStatus() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(118))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Validity and currency of the data in the record to be used in conjunction with the other elements in the record as defined by SOPs.
/// A - Active
/// I - Inactive
/// K - Acknowledged
/// L - Local
/// Q - A nominated (NOM) or Data Change Request (DCR) record
/// R - Production reduced by CMD decision
/// W - Working Record.
/// Example: /// Example: A
/// Constraints: Minimum length = 0, Maximum length = 1
/// A standard scheme for symbol coding enabling the transfer, display and use of symbols and graphics among information systems, as per MIL-STD 2525B, and supported by the element ident.
/// Example: /// Example: SOGPU----------
/// Constraints: Minimum length = 0, Maximum length = 15
func (rcv *Site_Ingest) SymCode() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(120))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// A standard scheme for symbol coding enabling the transfer, display and use of symbols and graphics among information systems, as per MIL-STD 2525B, and supported by the element ident.
/// Example: /// Example: SOGPU----------
/// Constraints: Minimum length = 0, Maximum length = 15
/// The reference documentation that specifies the usage and enumerations contained in this record. If referenceDoc not provided, users may consult the data provider.
/// Example: /// Example: Provider Reference Documentation
/// Constraints: Minimum length = 0, Maximum length = 128
func (rcv *Site_Ingest) ReferenceDoc() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(122))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The reference documentation that specifies the usage and enumerations contained in this record. If referenceDoc not provided, users may consult the data provider.
/// Example: /// Example: Provider Reference Documentation
/// Constraints: Minimum length = 0, Maximum length = 128
/// Time the row was created in the database, auto-populated by the system.
/// Example: /// Example: 2018-01-01T16:00:00.123Z
/// Constraints: No constraints specified.
func (rcv *Site_Ingest) CreatedAt() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(124))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Time the row was created in the database, auto-populated by the system.
/// Example: /// Example: 2018-01-01T16:00:00.123Z
/// Constraints: No constraints specified.
/// Application user who created the row in the database, auto-populated by the system.
/// Example: /// Example: some.user
/// Constraints: Minimum length = 1, Maximum length = 64
func (rcv *Site_Ingest) CreatedBy() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(126))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Application user who created the row in the database, auto-populated by the system.
/// Example: /// Example: some.user
/// Constraints: Minimum length = 1, Maximum length = 64
/// Source of the data.
/// Example: /// Example: Bluestaq
/// Constraints: Minimum length = 1, Maximum length = 64
func (rcv *Site_Ingest) Source() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(128))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Source of the data.
/// Example: /// Example: Bluestaq
/// Constraints: Minimum length = 1, Maximum length = 64
/// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
/// Example: /// Example: THIRD_PARTY_DATASOURCE
/// Constraints: Minimum length = 0, Maximum length = 64
func (rcv *Site_Ingest) Origin() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(130))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
/// Example: /// Example: THIRD_PARTY_DATASOURCE
/// Constraints: Minimum length = 0, Maximum length = 64
/// The originating source network on which this record was created, auto-populated by the system.
/// Example: /// Example: ORIG
/// Constraints: Minimum length = 1, Maximum length = 32
func (rcv *Site_Ingest) OrigNetwork() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(132))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The originating source network on which this record was created, auto-populated by the system.
/// Example: /// Example: ORIG
/// Constraints: Minimum length = 1, Maximum length = 32
/// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
/// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
/// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
/// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
/// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
/// Example: /// Example: TEST
/// Constraints: Minimum length = 1, Maximum length = 32
func (rcv *Site_Ingest) DataMode() Site_Ingest_dataMode_Enum {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(134))
	if o != 0 {
		return Site_Ingest_dataMode_Enum(rcv._tab.GetInt8(o + rcv._tab.Pos))
	}
	return 0
}

/// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
/// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
/// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
/// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
/// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
/// Example: /// Example: TEST
/// Constraints: Minimum length = 1, Maximum length = 32
func (rcv *Site_Ingest) MutateDataMode(n Site_Ingest_dataMode_Enum) bool {
	return rcv._tab.MutateInt8Slot(134, int8(n))
}

func Site_IngestStart(builder *flatbuffers.Builder) {
	builder.StartObject(66)
}
func Site_IngestAddId(builder *flatbuffers.Builder, id flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(id), 0)
}
func Site_IngestAddEntity(builder *flatbuffers.Builder, entity flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(entity), 0)
}
func Site_IngestAddIdEntity(builder *flatbuffers.Builder, idEntity flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(idEntity), 0)
}
func Site_IngestAddIdParentSite(builder *flatbuffers.Builder, idParentSite flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(3, flatbuffers.UOffsetT(idParentSite), 0)
}
func Site_IngestAddClassificationMarking(builder *flatbuffers.Builder, classificationMarking flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(4, flatbuffers.UOffsetT(classificationMarking), 0)
}
func Site_IngestAddOrigSiteId(builder *flatbuffers.Builder, origSiteId flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(5, flatbuffers.UOffsetT(origSiteId), 0)
}
func Site_IngestAddOrigLzId(builder *flatbuffers.Builder, origLzId flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(6, flatbuffers.UOffsetT(origLzId), 0)
}
func Site_IngestAddPin(builder *flatbuffers.Builder, pin flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(7, flatbuffers.UOffsetT(pin), 0)
}
func Site_IngestAddType(builder *flatbuffers.Builder, type_ flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(8, flatbuffers.UOffsetT(type_), 0)
}
func Site_IngestAddUsage(builder *flatbuffers.Builder, usage flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(9, flatbuffers.UOffsetT(usage), 0)
}
func Site_IngestAddLzUsage(builder *flatbuffers.Builder, lzUsage flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(10, flatbuffers.UOffsetT(lzUsage), 0)
}
func Site_IngestAddName(builder *flatbuffers.Builder, name flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(11, flatbuffers.UOffsetT(name), 0)
}
func Site_IngestAddCoordDatum(builder *flatbuffers.Builder, coordDatum flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(12, flatbuffers.UOffsetT(coordDatum), 0)
}
func Site_IngestAddCoord(builder *flatbuffers.Builder, coord flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(13, flatbuffers.UOffsetT(coord), 0)
}
func Site_IngestAddCoordDerivAcc(builder *flatbuffers.Builder, coordDerivAcc float64) {
	builder.PrependFloat64Slot(14, coordDerivAcc, 0.0)
}
func Site_IngestAddOsuffix(builder *flatbuffers.Builder, osuffix flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(15, flatbuffers.UOffsetT(osuffix), 0)
}
func Site_IngestAddIata(builder *flatbuffers.Builder, iata flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(16, flatbuffers.UOffsetT(iata), 0)
}
func Site_IngestAddIcao(builder *flatbuffers.Builder, icao flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(17, flatbuffers.UOffsetT(icao), 0)
}
func Site_IngestAddFaa(builder *flatbuffers.Builder, faa flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(18, flatbuffers.UOffsetT(faa), 0)
}
func Site_IngestAddAirDefArea(builder *flatbuffers.Builder, airDefArea flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(19, flatbuffers.UOffsetT(airDefArea), 0)
}
func Site_IngestAddUtm(builder *flatbuffers.Builder, utm flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(20, flatbuffers.UOffsetT(utm), 0)
}
func Site_IngestAddMilGridSys(builder *flatbuffers.Builder, milGridSys flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(21, flatbuffers.UOffsetT(milGridSys), 0)
}
func Site_IngestAddMilGrid(builder *flatbuffers.Builder, milGrid flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(22, flatbuffers.UOffsetT(milGrid), 0)
}
func Site_IngestAddCatCode(builder *flatbuffers.Builder, catCode flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(23, flatbuffers.UOffsetT(catCode), 0)
}
func Site_IngestAddCatText(builder *flatbuffers.Builder, catText flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(24, flatbuffers.UOffsetT(catText), 0)
}
func Site_IngestAddWac(builder *flatbuffers.Builder, wac flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(25, flatbuffers.UOffsetT(wac), 0)
}
func Site_IngestAddPolSubdiv(builder *flatbuffers.Builder, polSubdiv flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(26, flatbuffers.UOffsetT(polSubdiv), 0)
}
func Site_IngestAddGeoArea(builder *flatbuffers.Builder, geoArea flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(27, flatbuffers.UOffsetT(geoArea), 0)
}
func Site_IngestAddGeoidalMslSep(builder *flatbuffers.Builder, geoidalMslSep float64) {
	builder.PrependFloat64Slot(28, geoidalMslSep, 0.0)
}
func Site_IngestAddAllegiance(builder *flatbuffers.Builder, allegiance flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(29, flatbuffers.UOffsetT(allegiance), 0)
}
func Site_IngestAddAltAllegiance(builder *flatbuffers.Builder, altAllegiance flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(30, flatbuffers.UOffsetT(altAllegiance), 0)
}
func Site_IngestAddClassRating(builder *flatbuffers.Builder, classRating flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(31, flatbuffers.UOffsetT(classRating), 0)
}
func Site_IngestAddFpa(builder *flatbuffers.Builder, fpa flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(32, flatbuffers.UOffsetT(fpa), 0)
}
func Site_IngestAddBeNumber(builder *flatbuffers.Builder, beNumber flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(33, flatbuffers.UOffsetT(beNumber), 0)
}
func Site_IngestAddRunways(builder *flatbuffers.Builder, runways int32) {
	builder.PrependInt32Slot(34, runways, 0)
}
func Site_IngestAddMaxRunwayLength(builder *flatbuffers.Builder, maxRunwayLength int32) {
	builder.PrependInt32Slot(35, maxRunwayLength, 0)
}
func Site_IngestAddCondition(builder *flatbuffers.Builder, condition flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(36, flatbuffers.UOffsetT(condition), 0)
}
func Site_IngestAddConditionAvail(builder *flatbuffers.Builder, conditionAvail flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(37, flatbuffers.UOffsetT(conditionAvail), 0)
}
func Site_IngestAddOperStatus(builder *flatbuffers.Builder, operStatus flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(38, flatbuffers.UOffsetT(operStatus), 0)
}
func Site_IngestAddGrade(builder *flatbuffers.Builder, grade int32) {
	builder.PrependInt32Slot(39, grade, 0)
}
func Site_IngestAddActivity(builder *flatbuffers.Builder, activity flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(40, flatbuffers.UOffsetT(activity), 0)
}
func Site_IngestAddFunctPrimary(builder *flatbuffers.Builder, functPrimary flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(41, flatbuffers.UOffsetT(functPrimary), 0)
}
func Site_IngestAddMsnPrimary(builder *flatbuffers.Builder, msnPrimary flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(42, flatbuffers.UOffsetT(msnPrimary), 0)
}
func Site_IngestAddMsnPrimarySpec(builder *flatbuffers.Builder, msnPrimarySpec flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(43, flatbuffers.UOffsetT(msnPrimarySpec), 0)
}
func Site_IngestAddNucCap(builder *flatbuffers.Builder, nucCap flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(44, flatbuffers.UOffsetT(nucCap), 0)
}
func Site_IngestAddIdent(builder *flatbuffers.Builder, ident flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(45, flatbuffers.UOffsetT(ident), 0)
}
func Site_IngestAddElevMsl(builder *flatbuffers.Builder, elevMsl float64) {
	builder.PrependFloat64Slot(46, elevMsl, 0.0)
}
func Site_IngestAddElevMslConfLvl(builder *flatbuffers.Builder, elevMslConfLvl int32) {
	builder.PrependInt32Slot(47, elevMslConfLvl, 0)
}
func Site_IngestAddElevMslDerivAcc(builder *flatbuffers.Builder, elevMslDerivAcc float64) {
	builder.PrependFloat64Slot(48, elevMslDerivAcc, 0.0)
}
func Site_IngestAddVegHt(builder *flatbuffers.Builder, vegHt float64) {
	builder.PrependFloat64Slot(49, vegHt, 0.0)
}
func Site_IngestAddVegType(builder *flatbuffers.Builder, vegType flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(50, flatbuffers.UOffsetT(vegType), 0)
}
func Site_IngestAddPopArea(builder *flatbuffers.Builder, popArea bool) {
	builder.PrependBoolSlot(51, popArea, false)
}
func Site_IngestAddPopAreaProx(builder *flatbuffers.Builder, popAreaProx float64) {
	builder.PrependFloat64Slot(52, popAreaProx, 0.0)
}
func Site_IngestAddNotes(builder *flatbuffers.Builder, notes flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(53, flatbuffers.UOffsetT(notes), 0)
}
func Site_IngestAddResProd(builder *flatbuffers.Builder, resProd flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(54, flatbuffers.UOffsetT(resProd), 0)
}
func Site_IngestAddEval(builder *flatbuffers.Builder, eval int32) {
	builder.PrependInt32Slot(55, eval, 0)
}
func Site_IngestAddReviewDate(builder *flatbuffers.Builder, reviewDate flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(56, flatbuffers.UOffsetT(reviewDate), 0)
}
func Site_IngestAddRecStatus(builder *flatbuffers.Builder, recStatus flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(57, flatbuffers.UOffsetT(recStatus), 0)
}
func Site_IngestAddSymCode(builder *flatbuffers.Builder, symCode flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(58, flatbuffers.UOffsetT(symCode), 0)
}
func Site_IngestAddReferenceDoc(builder *flatbuffers.Builder, referenceDoc flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(59, flatbuffers.UOffsetT(referenceDoc), 0)
}
func Site_IngestAddCreatedAt(builder *flatbuffers.Builder, createdAt flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(60, flatbuffers.UOffsetT(createdAt), 0)
}
func Site_IngestAddCreatedBy(builder *flatbuffers.Builder, createdBy flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(61, flatbuffers.UOffsetT(createdBy), 0)
}
func Site_IngestAddSource(builder *flatbuffers.Builder, source flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(62, flatbuffers.UOffsetT(source), 0)
}
func Site_IngestAddOrigin(builder *flatbuffers.Builder, origin flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(63, flatbuffers.UOffsetT(origin), 0)
}
func Site_IngestAddOrigNetwork(builder *flatbuffers.Builder, origNetwork flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(64, flatbuffers.UOffsetT(origNetwork), 0)
}
func Site_IngestAddDataMode(builder *flatbuffers.Builder, dataMode Site_Ingest_dataMode_Enum) {
	builder.PrependInt8Slot(65, int8(dataMode), 0)
}
func Site_IngestEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
