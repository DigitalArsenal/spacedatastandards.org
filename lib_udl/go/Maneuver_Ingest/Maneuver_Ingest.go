// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package Maneuver_Ingest

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

/// /// Model representation of on-orbit object maneuver information for detected, possible, and confirmed maneuvers.
type Maneuver_Ingest struct {
	_tab flatbuffers.Table
}

const Maneuver_IngestIdentifier = "MANE"

func GetRootAsManeuver_Ingest(buf []byte, offset flatbuffers.UOffsetT) *Maneuver_Ingest {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &Maneuver_Ingest{}
	x.Init(buf, n+offset)
	return x
}

func FinishManeuver_IngestBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	identifierBytes := []byte(Maneuver_IngestIdentifier)
	builder.FinishWithFileIdentifier(offset, identifierBytes)
}

func Maneuver_IngestBufferHasIdentifier(buf []byte) bool {
	return flatbuffers.BufferHasIdentifier(buf, Maneuver_IngestIdentifier)
}

func GetSizePrefixedRootAsManeuver_Ingest(buf []byte, offset flatbuffers.UOffsetT) *Maneuver_Ingest {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &Maneuver_Ingest{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedManeuver_IngestBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	identifierBytes := []byte(Maneuver_IngestIdentifier)
	builder.FinishSizePrefixedWithFileIdentifier(offset, identifierBytes)
}

func SizePrefixedManeuver_IngestBufferHasIdentifier(buf []byte) bool {
	return flatbuffers.SizePrefixedBufferHasIdentifier(buf, Maneuver_IngestIdentifier)
}

func (rcv *Maneuver_Ingest) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *Maneuver_Ingest) Table() flatbuffers.Table {
	return rcv._tab
}

/// Unique identifier of the record, auto-generated by the system.
/// Example: /// Example: MANEUVER-ID
/// Constraints: Minimum length = 1, Maximum length = 36
func (rcv *Maneuver_Ingest) Id() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Unique identifier of the record, auto-generated by the system.
/// Example: /// Example: MANEUVER-ID
/// Constraints: Minimum length = 1, Maximum length = 36
/// Classification marking of the data in IC/CAPCO Portion-marked format.
/// Example: /// Example: U
/// Constraints: Minimum length = 1, Maximum length = 128
func (rcv *Maneuver_Ingest) ClassificationMarking() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Classification marking of the data in IC/CAPCO Portion-marked format.
/// Example: /// Example: U
/// Constraints: Minimum length = 1, Maximum length = 128
/// Satellite/Catalog number of the target on-orbit object.
/// Example: /// Example: 12
/// Constraints: No constraints specified.
func (rcv *Maneuver_Ingest) SatNo() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

/// Satellite/Catalog number of the target on-orbit object.
/// Example: /// Example: 12
/// Constraints: No constraints specified.
func (rcv *Maneuver_Ingest) MutateSatNo(n int32) bool {
	return rcv._tab.MutateInt32Slot(8, n)
}

/// The time that the report or alert of this maneuver was generated, in ISO 8601 UTC format.
/// Example: /// Example: 2023-11-16T04:15:00.0001Z
/// Constraints: No constraints specified.
func (rcv *Maneuver_Ingest) ReportTime() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The time that the report or alert of this maneuver was generated, in ISO 8601 UTC format.
/// Example: /// Example: 2023-11-16T04:15:00.0001Z
/// Constraints: No constraints specified.
/// Maneuver event start time in ISO 8601 UTC with microsecond precision. For maneuvers without start and end times, the start time is considered to be the maneuver event time.
/// Example: /// Example: 2023-11-16T01:05:16.835689Z
/// Constraints: No constraints specified.
func (rcv *Maneuver_Ingest) EventStartTime() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Maneuver event start time in ISO 8601 UTC with microsecond precision. For maneuvers without start and end times, the start time is considered to be the maneuver event time.
/// Example: /// Example: 2023-11-16T01:05:16.835689Z
/// Constraints: No constraints specified.
/// Maneuver event end time in ISO 8601 UTC with microsecond precision.
/// Example: /// Example: 2023-11-16T01:09:01.350012Z
/// Constraints: No constraints specified.
func (rcv *Maneuver_Ingest) EventEndTime() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Maneuver event end time in ISO 8601 UTC with microsecond precision.
/// Example: /// Example: 2023-11-16T01:09:01.350012Z
/// Constraints: No constraints specified.
/// The estimated total active burn time of a maneuver, in seconds. This includes the sum of all burns in numAccelPoints. Not to be confused with the total duration of the maneuver.
/// Example: /// Example: 600.72
/// Constraints: No constraints specified.
func (rcv *Maneuver_Ingest) TotalBurnTime() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// The estimated total active burn time of a maneuver, in seconds. This includes the sum of all burns in numAccelPoints. Not to be confused with the total duration of the maneuver.
/// Example: /// Example: 600.72
/// Constraints: No constraints specified.
func (rcv *Maneuver_Ingest) MutateTotalBurnTime(n float64) bool {
	return rcv._tab.MutateFloat64Slot(16, n)
}

/// Maneuver orbit determination fit data end time in ISO 8601 UTC with microsecond precision.
/// Example: /// Example: 2023-11-16T03:55:51Z
/// Constraints: No constraints specified.
func (rcv *Maneuver_Ingest) OdFitEndTime() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(18))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Maneuver orbit determination fit data end time in ISO 8601 UTC with microsecond precision.
/// Example: /// Example: 2023-11-16T03:55:51Z
/// Constraints: No constraints specified.
/// Target maneuvering on-orbit object. For the public catalog, the idOnOrbit is typically the satellite number as a string, but may be a UUID for analyst or other unknown or untracked satellites.
/// Example: /// Example: 12
/// Constraints: Minimum length = 0, Maximum length = 36
func (rcv *Maneuver_Ingest) IdOnOrbit() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(20))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Target maneuvering on-orbit object. For the public catalog, the idOnOrbit is typically the satellite number as a string, but may be a UUID for analyst or other unknown or untracked satellites.
/// Example: /// Example: 12
/// Constraints: Minimum length = 0, Maximum length = 36
/// Optional ID of the sensor that detected this maneuver (for example, if detected by passive RF anomalies).
/// Example: /// Example: SENSOR-ID
/// Constraints: Minimum length = 0, Maximum length = 36
func (rcv *Maneuver_Ingest) IdSensor() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(22))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Optional ID of the sensor that detected this maneuver (for example, if detected by passive RF anomalies).
/// Example: /// Example: SENSOR-ID
/// Constraints: Minimum length = 0, Maximum length = 36
/// Boolean indicating this maneuver was unable to be correlated to a known object. This flag should only be set to true by data providers after an attempt to correlate to an on-orbit object was made and failed. If unable to correlate, the 'origObjectId' field may be populated with an internal data provider specific identifier.
/// Example: /// Example: False
/// Constraints: No constraints specified.
func (rcv *Maneuver_Ingest) Uct() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(24))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

/// Boolean indicating this maneuver was unable to be correlated to a known object. This flag should only be set to true by data providers after an attempt to correlate to an on-orbit object was made and failed. If unable to correlate, the 'origObjectId' field may be populated with an internal data provider specific identifier.
/// Example: /// Example: False
/// Constraints: No constraints specified.
func (rcv *Maneuver_Ingest) MutateUct(n bool) bool {
	return rcv._tab.MutateBoolSlot(24, n)
}

/// Uncertainty in the occurrence of this maneuver (0 - 1).
/// Example: /// Example: 0.5
/// Constraints: No constraints specified.
func (rcv *Maneuver_Ingest) ManeuverUnc() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(26))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Uncertainty in the occurrence of this maneuver (0 - 1).
/// Example: /// Example: 0.5
/// Constraints: No constraints specified.
func (rcv *Maneuver_Ingest) MutateManeuverUnc(n float64) bool {
	return rcv._tab.MutateFloat64Slot(26, n)
}

/// Optional purpose of the maneuver if known (e.g. North-South Station Keeping, East-West Station Keeping, Longitude Shift, Unknown).
/// Example: /// Example: North-South Station Keeping
/// Constraints: Minimum length = 0, Maximum length = 64
func (rcv *Maneuver_Ingest) Characterization() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(28))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Optional purpose of the maneuver if known (e.g. North-South Station Keeping, East-West Station Keeping, Longitude Shift, Unknown).
/// Example: /// Example: North-South Station Keeping
/// Constraints: Minimum length = 0, Maximum length = 64
/// Uncertainty in the characterization or purpose assessment of this maneuver (0 - 1).
/// Example: /// Example: 0.15
/// Constraints: No constraints specified.
func (rcv *Maneuver_Ingest) CharacterizationUnc() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(30))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Uncertainty in the characterization or purpose assessment of this maneuver (0 - 1).
/// Example: /// Example: 0.15
/// Constraints: No constraints specified.
func (rcv *Maneuver_Ingest) MutateCharacterizationUnc(n float64) bool {
	return rcv._tab.MutateFloat64Slot(30, n)
}

/// Optional source-provided identifier for this maneuver event. In the case where multiple maneuver records are submitted for the same event, this field can be used to tie them together to the same event.
/// Example: /// Example: EVENT-ID
/// Constraints: Minimum length = 0, Maximum length = 64
func (rcv *Maneuver_Ingest) EventId() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(32))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Optional source-provided identifier for this maneuver event. In the case where multiple maneuver records are submitted for the same event, this field can be used to tie them together to the same event.
/// Example: /// Example: EVENT-ID
/// Constraints: Minimum length = 0, Maximum length = 64
/// Identifier provided by source to indicate the target on-orbit object performing this maneuver. This may be an internal identifier and not necessarily a valid satellite number/ID.
/// Example: /// Example: ORIGOBJECT-ID
/// Constraints: Minimum length = 0, Maximum length = 64
func (rcv *Maneuver_Ingest) OrigObjectId() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(34))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Identifier provided by source to indicate the target on-orbit object performing this maneuver. This may be an internal identifier and not necessarily a valid satellite number/ID.
/// Example: /// Example: ORIGOBJECT-ID
/// Constraints: Minimum length = 0, Maximum length = 64
/// Optional identifier provided by source to indicate the sensor identifier used to detect this event. This may be an internal identifier and not necessarily a valid sensor ID.
/// Example: /// Example: ORIGSENSOR-ID
/// Constraints: Minimum length = 0, Maximum length = 64
func (rcv *Maneuver_Ingest) OrigSensorId() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(36))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Optional identifier provided by source to indicate the sensor identifier used to detect this event. This may be an internal identifier and not necessarily a valid sensor ID.
/// Example: /// Example: ORIGSENSOR-ID
/// Constraints: Minimum length = 0, Maximum length = 64
/// Status of this maneuver (CANCELLED, PLANNED, POSSIBLE, REDACTED, VERIFIED).
/// CANCELLED:  A previously planned maneuver whose execution was cancelled.
/// PLANNED:  A maneuver planned to take place at the eventStartTime.
/// POSSIBLE:  A possible maneuver detected by observation of the spacecraft or by evaluation of the spacecraft orbit.
/// REDACTED:  A redaction of a reported possible maneuver that has been determined to have not taken place after further observation/evaluation.
/// VERIFIED:  A maneuver whose execution has been verified, either by the owner/operator or observation/evaluation.
/// Example: /// Example: POSSIBLE
/// Constraints: Minimum length = 0, Maximum length = 32
func (rcv *Maneuver_Ingest) Status() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(38))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Status of this maneuver (CANCELLED, PLANNED, POSSIBLE, REDACTED, VERIFIED).
/// CANCELLED:  A previously planned maneuver whose execution was cancelled.
/// PLANNED:  A maneuver planned to take place at the eventStartTime.
/// POSSIBLE:  A possible maneuver detected by observation of the spacecraft or by evaluation of the spacecraft orbit.
/// REDACTED:  A redaction of a reported possible maneuver that has been determined to have not taken place after further observation/evaluation.
/// VERIFIED:  A maneuver whose execution has been verified, either by the owner/operator or observation/evaluation.
/// Example: /// Example: POSSIBLE
/// Constraints: Minimum length = 0, Maximum length = 32
/// Magnitude, in km, of the difference in the pre- and post-maneuver position vectors at the maneuver event time.
/// Example: /// Example: 0.715998327
/// Constraints: No constraints specified.
func (rcv *Maneuver_Ingest) DeltaPos() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(40))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Magnitude, in km, of the difference in the pre- and post-maneuver position vectors at the maneuver event time.
/// Example: /// Example: 0.715998327
/// Constraints: No constraints specified.
func (rcv *Maneuver_Ingest) MutateDeltaPos(n float64) bool {
	return rcv._tab.MutateFloat64Slot(40, n)
}

/// Magnitude, in km, of the difference in the pre- and post-maneuver position vectors in the direction of the pre-maneuver 'U' unit vector at the maneuver event time.
/// Example: /// Example: -0.022172844
/// Constraints: No constraints specified.
func (rcv *Maneuver_Ingest) DeltaPosU() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(42))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Magnitude, in km, of the difference in the pre- and post-maneuver position vectors in the direction of the pre-maneuver 'U' unit vector at the maneuver event time.
/// Example: /// Example: -0.022172844
/// Constraints: No constraints specified.
func (rcv *Maneuver_Ingest) MutateDeltaPosU(n float64) bool {
	return rcv._tab.MutateFloat64Slot(42, n)
}

/// Magnitude, in km, of the difference in the pre- and post-maneuver position vectors in the direction of the pre-maneuver 'V' unit vector at the maneuver event time.
/// Example: /// Example: -0.033700154
/// Constraints: No constraints specified.
func (rcv *Maneuver_Ingest) DeltaPosV() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(44))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Magnitude, in km, of the difference in the pre- and post-maneuver position vectors in the direction of the pre-maneuver 'V' unit vector at the maneuver event time.
/// Example: /// Example: -0.033700154
/// Constraints: No constraints specified.
func (rcv *Maneuver_Ingest) MutateDeltaPosV(n float64) bool {
	return rcv._tab.MutateFloat64Slot(44, n)
}

/// Magnitude, in km, of the difference in the pre- and post-maneuver position vectors in the direction of the pre-maneuver 'W' unit vector at the maneuver event time.
/// Example: /// Example: -0.714861014
/// Constraints: No constraints specified.
func (rcv *Maneuver_Ingest) DeltaPosW() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(46))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Magnitude, in km, of the difference in the pre- and post-maneuver position vectors in the direction of the pre-maneuver 'W' unit vector at the maneuver event time.
/// Example: /// Example: -0.714861014
/// Constraints: No constraints specified.
func (rcv *Maneuver_Ingest) MutateDeltaPosW(n float64) bool {
	return rcv._tab.MutateFloat64Slot(46, n)
}

/// Magnitude, in km/sec, of the difference in the pre- and post-maneuver velocity vectors at the maneuver event time.
/// Example: /// Example: 0.000631505
/// Constraints: No constraints specified.
func (rcv *Maneuver_Ingest) DeltaVel() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(48))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Magnitude, in km/sec, of the difference in the pre- and post-maneuver velocity vectors at the maneuver event time.
/// Example: /// Example: 0.000631505
/// Constraints: No constraints specified.
func (rcv *Maneuver_Ingest) MutateDeltaVel(n float64) bool {
	return rcv._tab.MutateFloat64Slot(48, n)
}

/// Magnitude, in km/sec, of the difference in the pre- and post-maneuver velocity vectors in the direction of the pre-maneuver 'U' unit vector at the maneuver event time.
/// Example: /// Example: 3.50165629389647e-05
/// Constraints: No constraints specified.
func (rcv *Maneuver_Ingest) DeltaVelU() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(50))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Magnitude, in km/sec, of the difference in the pre- and post-maneuver velocity vectors in the direction of the pre-maneuver 'U' unit vector at the maneuver event time.
/// Example: /// Example: 3.50165629389647e-05
/// Constraints: No constraints specified.
func (rcv *Maneuver_Ingest) MutateDeltaVelU(n float64) bool {
	return rcv._tab.MutateFloat64Slot(50, n)
}

/// Magnitude, in km/sec, of the difference in the pre- and post-maneuver velocity vectors in the direction of the pre-maneuver 'V' unit vector at the maneuver event time.
/// Example: /// Example: 0.000544413
/// Constraints: No constraints specified.
func (rcv *Maneuver_Ingest) DeltaVelV() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(52))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Magnitude, in km/sec, of the difference in the pre- and post-maneuver velocity vectors in the direction of the pre-maneuver 'V' unit vector at the maneuver event time.
/// Example: /// Example: 0.000544413
/// Constraints: No constraints specified.
func (rcv *Maneuver_Ingest) MutateDeltaVelV(n float64) bool {
	return rcv._tab.MutateFloat64Slot(52, n)
}

/// Magnitude, in km/sec, of the difference in the pre- and post-maneuver velocity vectors in the direction of the pre-maneuver 'W' unit vector at the maneuver event time.
/// Example: /// Example: -0.000318099
/// Constraints: No constraints specified.
func (rcv *Maneuver_Ingest) DeltaVelW() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(54))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Magnitude, in km/sec, of the difference in the pre- and post-maneuver velocity vectors in the direction of the pre-maneuver 'W' unit vector at the maneuver event time.
/// Example: /// Example: -0.000318099
/// Constraints: No constraints specified.
func (rcv *Maneuver_Ingest) MutateDeltaVelW(n float64) bool {
	return rcv._tab.MutateFloat64Slot(54, n)
}

/// Difference in mass before and after the maneuver, in kg.
/// Example: /// Example: 0.15
/// Constraints: No constraints specified.
func (rcv *Maneuver_Ingest) DeltaMass() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(56))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Difference in mass before and after the maneuver, in kg.
/// Example: /// Example: 0.15
/// Constraints: No constraints specified.
func (rcv *Maneuver_Ingest) MutateDeltaMass(n float64) bool {
	return rcv._tab.MutateFloat64Slot(56, n)
}

/// Optional identifier of the element set for the pre-maneuver orbit.
/// Example: /// Example: 80e544b7-6a17-4554-8abf-7301e98f8e5d
/// Constraints: Minimum length = 0, Maximum length = 36
func (rcv *Maneuver_Ingest) PreEventIdElset() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(58))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Optional identifier of the element set for the pre-maneuver orbit.
/// Example: /// Example: 80e544b7-6a17-4554-8abf-7301e98f8e5d
/// Constraints: Minimum length = 0, Maximum length = 36
/// No description provided.
/// Example: /// Example: No example provided.
/// Constraints: No constraints specified.
func (rcv *Maneuver_Ingest) PreEventElset() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(60))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// No description provided.
/// Example: /// Example: No example provided.
/// Constraints: No constraints specified.
/// Optional identifier of the state vector for the pre-maneuver trajectory of the spacecraft.
/// Example: /// Example: 6e291992-8ae3-4592-bb0f-055715bf4803
/// Constraints: Minimum length = 0, Maximum length = 36
func (rcv *Maneuver_Ingest) PreEventIdStateVector() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(62))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Optional identifier of the state vector for the pre-maneuver trajectory of the spacecraft.
/// Example: /// Example: 6e291992-8ae3-4592-bb0f-055715bf4803
/// Constraints: Minimum length = 0, Maximum length = 36
/// No description provided.
/// Example: /// Example: No example provided.
/// Constraints: No constraints specified.
func (rcv *Maneuver_Ingest) PreEventStateVector() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(64))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// No description provided.
/// Example: /// Example: No example provided.
/// Constraints: No constraints specified.
/// Pre-event X component of position in ECI space, in km.
/// Example: /// Example: 3584.432545
/// Constraints: No constraints specified.
func (rcv *Maneuver_Ingest) PrePosX() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(66))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Pre-event X component of position in ECI space, in km.
/// Example: /// Example: 3584.432545
/// Constraints: No constraints specified.
func (rcv *Maneuver_Ingest) MutatePrePosX(n float64) bool {
	return rcv._tab.MutateFloat64Slot(66, n)
}

/// Pre-event Y component of position in ECI space, in km.
/// Example: /// Example: 42028.43245
/// Constraints: No constraints specified.
func (rcv *Maneuver_Ingest) PrePosY() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(68))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Pre-event Y component of position in ECI space, in km.
/// Example: /// Example: 42028.43245
/// Constraints: No constraints specified.
func (rcv *Maneuver_Ingest) MutatePrePosY(n float64) bool {
	return rcv._tab.MutateFloat64Slot(68, n)
}

/// Pre-event Z component of position in ECI space, in km.
/// Example: /// Example: -1.97765
/// Constraints: No constraints specified.
func (rcv *Maneuver_Ingest) PrePosZ() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(70))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Pre-event Z component of position in ECI space, in km.
/// Example: /// Example: -1.97765
/// Constraints: No constraints specified.
func (rcv *Maneuver_Ingest) MutatePrePosZ(n float64) bool {
	return rcv._tab.MutateFloat64Slot(70, n)
}

/// Pre-event X component of velocity in ECI space, in km/sec.
/// Example: /// Example: -2.543266
/// Constraints: No constraints specified.
func (rcv *Maneuver_Ingest) PreVelX() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(72))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Pre-event X component of velocity in ECI space, in km/sec.
/// Example: /// Example: -2.543266
/// Constraints: No constraints specified.
func (rcv *Maneuver_Ingest) MutatePreVelX(n float64) bool {
	return rcv._tab.MutateFloat64Slot(72, n)
}

/// Pre-event Y component of velocity in ECI space, in km/sec.
/// Example: /// Example: 0.24876
/// Constraints: No constraints specified.
func (rcv *Maneuver_Ingest) PreVelY() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(74))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Pre-event Y component of velocity in ECI space, in km/sec.
/// Example: /// Example: 0.24876
/// Constraints: No constraints specified.
func (rcv *Maneuver_Ingest) MutatePreVelY(n float64) bool {
	return rcv._tab.MutateFloat64Slot(74, n)
}

/// Pre-event Z component of velocity in ECI space, in km/sec.
/// Example: /// Example: 0.0067352
/// Constraints: No constraints specified.
func (rcv *Maneuver_Ingest) PreVelZ() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(76))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Pre-event Z component of velocity in ECI space, in km/sec.
/// Example: /// Example: 0.0067352
/// Constraints: No constraints specified.
func (rcv *Maneuver_Ingest) MutatePreVelZ(n float64) bool {
	return rcv._tab.MutateFloat64Slot(76, n)
}

/// Pre-event radiation pressure coefficient. The units of the radiation pressure coefficient vary depending on provider. Users should consult the data provider to verify the units of the radiation pressure coefficient.
/// Example: /// Example: 4.51e-07
/// Constraints: No constraints specified.
func (rcv *Maneuver_Ingest) PreRadiationPressCoeff() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(78))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Pre-event radiation pressure coefficient. The units of the radiation pressure coefficient vary depending on provider. Users should consult the data provider to verify the units of the radiation pressure coefficient.
/// Example: /// Example: 4.51e-07
/// Constraints: No constraints specified.
func (rcv *Maneuver_Ingest) MutatePreRadiationPressCoeff(n float64) bool {
	return rcv._tab.MutateFloat64Slot(78, n)
}

/// Pre-event ballistic coefficient. The units of the ballistic coefficient vary depending on provider. Users should consult the data provider to verify the units of the ballistic coefficient.
/// Example: /// Example: 0.000437116
/// Constraints: No constraints specified.
func (rcv *Maneuver_Ingest) PreBallisticCoeff() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(80))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Pre-event ballistic coefficient. The units of the ballistic coefficient vary depending on provider. Users should consult the data provider to verify the units of the ballistic coefficient.
/// Example: /// Example: 0.000437116
/// Constraints: No constraints specified.
func (rcv *Maneuver_Ingest) MutatePreBallisticCoeff(n float64) bool {
	return rcv._tab.MutateFloat64Slot(80, n)
}

/// Pre-event spacecraft apogee (measured from Earth center), in kilometers.
/// Example: /// Example: 35802
/// Constraints: No constraints specified.
func (rcv *Maneuver_Ingest) PreApogee() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(82))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Pre-event spacecraft apogee (measured from Earth center), in kilometers.
/// Example: /// Example: 35802
/// Constraints: No constraints specified.
func (rcv *Maneuver_Ingest) MutatePreApogee(n float64) bool {
	return rcv._tab.MutateFloat64Slot(82, n)
}

/// Pre-event spacecraft perigee (measured from Earth center), in kilometers.
/// Example: /// Example: 35786.5
/// Constraints: No constraints specified.
func (rcv *Maneuver_Ingest) PrePerigee() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(84))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Pre-event spacecraft perigee (measured from Earth center), in kilometers.
/// Example: /// Example: 35786.5
/// Constraints: No constraints specified.
func (rcv *Maneuver_Ingest) MutatePrePerigee(n float64) bool {
	return rcv._tab.MutateFloat64Slot(84, n)
}

/// Pre-event spacecraft orbital inclination, in degrees. 0-180.
/// Example: /// Example: 0.0336
/// Constraints: No constraints specified.
func (rcv *Maneuver_Ingest) PreInclination() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(86))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Pre-event spacecraft orbital inclination, in degrees. 0-180.
/// Example: /// Example: 0.0336
/// Constraints: No constraints specified.
func (rcv *Maneuver_Ingest) MutatePreInclination(n float64) bool {
	return rcv._tab.MutateFloat64Slot(86, n)
}

/// Pre-event spacecraft eccentricity.
/// Example: /// Example: 0.00017
/// Constraints: No constraints specified.
func (rcv *Maneuver_Ingest) PreEccentricity() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(88))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Pre-event spacecraft eccentricity.
/// Example: /// Example: 0.00017
/// Constraints: No constraints specified.
func (rcv *Maneuver_Ingest) MutatePreEccentricity(n float64) bool {
	return rcv._tab.MutateFloat64Slot(88, n)
}

/// Pre-event spacecraft orbital period, in minutes.
/// Example: /// Example: 1436.12
/// Constraints: No constraints specified.
func (rcv *Maneuver_Ingest) PrePeriod() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(90))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Pre-event spacecraft orbital period, in minutes.
/// Example: /// Example: 1436.12
/// Constraints: No constraints specified.
func (rcv *Maneuver_Ingest) MutatePrePeriod(n float64) bool {
	return rcv._tab.MutateFloat64Slot(90, n)
}

/// Pre-event spacecraft Right Ascension of the Ascending Node (RAAN), in degrees.
/// Example: /// Example: 98.3336
/// Constraints: No constraints specified.
func (rcv *Maneuver_Ingest) PreRaan() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(92))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Pre-event spacecraft Right Ascension of the Ascending Node (RAAN), in degrees.
/// Example: /// Example: 98.3336
/// Constraints: No constraints specified.
func (rcv *Maneuver_Ingest) MutatePreRaan(n float64) bool {
	return rcv._tab.MutateFloat64Slot(92, n)
}

/// Pre-event spacecraft orbital Semi-Major Axis (SMA), in kilometers.
/// Example: /// Example: 42165.1
/// Constraints: No constraints specified.
func (rcv *Maneuver_Ingest) PreSma() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(94))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Pre-event spacecraft orbital Semi-Major Axis (SMA), in kilometers.
/// Example: /// Example: 42165.1
/// Constraints: No constraints specified.
func (rcv *Maneuver_Ingest) MutatePreSma(n float64) bool {
	return rcv._tab.MutateFloat64Slot(94, n)
}

/// Pre-event spacecraft WGS-84 GEO belt longitude, represented as -180 to 180 degrees (negative values west of Prime Meridian).
/// Example: /// Example: -93.12
/// Constraints: No constraints specified.
func (rcv *Maneuver_Ingest) PreGeoLongitude() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(96))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Pre-event spacecraft WGS-84 GEO belt longitude, represented as -180 to 180 degrees (negative values west of Prime Meridian).
/// Example: /// Example: -93.12
/// Constraints: No constraints specified.
func (rcv *Maneuver_Ingest) MutatePreGeoLongitude(n float64) bool {
	return rcv._tab.MutateFloat64Slot(96, n)
}

/// Pre-event GEO drift rate of the spacecraft, in degrees per day. Negative values indicate westward drift.
/// Example: /// Example: -0.0125
/// Constraints: No constraints specified.
func (rcv *Maneuver_Ingest) PreDriftRate() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(98))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Pre-event GEO drift rate of the spacecraft, in degrees per day. Negative values indicate westward drift.
/// Example: /// Example: -0.0125
/// Constraints: No constraints specified.
func (rcv *Maneuver_Ingest) MutatePreDriftRate(n float64) bool {
	return rcv._tab.MutateFloat64Slot(98, n)
}

/// Pre-event standard deviation, in kilometers, of spacecraft position in the 'U' unit vector direction.
/// Example: /// Example: 0.215
/// Constraints: No constraints specified.
func (rcv *Maneuver_Ingest) PreSigmaU() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(100))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Pre-event standard deviation, in kilometers, of spacecraft position in the 'U' unit vector direction.
/// Example: /// Example: 0.215
/// Constraints: No constraints specified.
func (rcv *Maneuver_Ingest) MutatePreSigmaU(n float64) bool {
	return rcv._tab.MutateFloat64Slot(100, n)
}

/// Pre-event standard deviation, in kilometers, of spacecraft position in the 'V' unit vector direction.
/// Example: /// Example: 1.97
/// Constraints: No constraints specified.
func (rcv *Maneuver_Ingest) PreSigmaV() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(102))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Pre-event standard deviation, in kilometers, of spacecraft position in the 'V' unit vector direction.
/// Example: /// Example: 1.97
/// Constraints: No constraints specified.
func (rcv *Maneuver_Ingest) MutatePreSigmaV(n float64) bool {
	return rcv._tab.MutateFloat64Slot(102, n)
}

/// Pre-event standard deviation, in kilometers, of spacecraft position in the 'W' unit vector direction.
/// Example: /// Example: 0.208
/// Constraints: No constraints specified.
func (rcv *Maneuver_Ingest) PreSigmaW() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(104))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Pre-event standard deviation, in kilometers, of spacecraft position in the 'W' unit vector direction.
/// Example: /// Example: 0.208
/// Constraints: No constraints specified.
func (rcv *Maneuver_Ingest) MutatePreSigmaW(n float64) bool {
	return rcv._tab.MutateFloat64Slot(104, n)
}

/// Optional identifier of the element set for the post-maneuver orbit.
/// Example: /// Example: 225adf4c-8606-40a8-929e-63e22cffe220
/// Constraints: Minimum length = 0, Maximum length = 36
func (rcv *Maneuver_Ingest) PostEventIdElset() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(106))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Optional identifier of the element set for the post-maneuver orbit.
/// Example: /// Example: 225adf4c-8606-40a8-929e-63e22cffe220
/// Constraints: Minimum length = 0, Maximum length = 36
/// No description provided.
/// Example: /// Example: No example provided.
/// Constraints: No constraints specified.
func (rcv *Maneuver_Ingest) PostEventElset() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(108))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// No description provided.
/// Example: /// Example: No example provided.
/// Constraints: No constraints specified.
/// Optional identifier of the state vector for the post-maneuver trajectory of the spacecraft.
/// Example: /// Example: d83a23f8-1496-485a-bd88-ec5808c73299
/// Constraints: Minimum length = 0, Maximum length = 36
func (rcv *Maneuver_Ingest) PostEventIdStateVector() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(110))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Optional identifier of the state vector for the post-maneuver trajectory of the spacecraft.
/// Example: /// Example: d83a23f8-1496-485a-bd88-ec5808c73299
/// Constraints: Minimum length = 0, Maximum length = 36
/// No description provided.
/// Example: /// Example: No example provided.
/// Constraints: No constraints specified.
func (rcv *Maneuver_Ingest) PostEventStateVector() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(112))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// No description provided.
/// Example: /// Example: No example provided.
/// Constraints: No constraints specified.
/// Post-event X component of position in ECI space, in km.
/// Example: /// Example: 3589.351957
/// Constraints: No constraints specified.
func (rcv *Maneuver_Ingest) PostPosX() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(114))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Post-event X component of position in ECI space, in km.
/// Example: /// Example: 3589.351957
/// Constraints: No constraints specified.
func (rcv *Maneuver_Ingest) MutatePostPosX(n float64) bool {
	return rcv._tab.MutateFloat64Slot(114, n)
}

/// Post-event Y component of position in ECI space, in km.
/// Example: /// Example: 42017.26823
/// Constraints: No constraints specified.
func (rcv *Maneuver_Ingest) PostPosY() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(116))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Post-event Y component of position in ECI space, in km.
/// Example: /// Example: 42017.26823
/// Constraints: No constraints specified.
func (rcv *Maneuver_Ingest) MutatePostPosY(n float64) bool {
	return rcv._tab.MutateFloat64Slot(116, n)
}

/// Post-event Z component of position in ECI space, in km.
/// Example: /// Example: -1.27161796
/// Constraints: No constraints specified.
func (rcv *Maneuver_Ingest) PostPosZ() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(118))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Post-event Z component of position in ECI space, in km.
/// Example: /// Example: -1.27161796
/// Constraints: No constraints specified.
func (rcv *Maneuver_Ingest) MutatePostPosZ(n float64) bool {
	return rcv._tab.MutateFloat64Slot(118, n)
}

/// Post-event X component of velocity in ECI space, in km/sec.
/// Example: /// Example: -3.063152826
/// Constraints: No constraints specified.
func (rcv *Maneuver_Ingest) PostVelX() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(120))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Post-event X component of velocity in ECI space, in km/sec.
/// Example: /// Example: -3.063152826
/// Constraints: No constraints specified.
func (rcv *Maneuver_Ingest) MutatePostVelX(n float64) bool {
	return rcv._tab.MutateFloat64Slot(120, n)
}

/// Post-event Y component of velocity in ECI space, in km/sec.
/// Example: /// Example: 0.261586769
/// Constraints: No constraints specified.
func (rcv *Maneuver_Ingest) PostVelY() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(122))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Post-event Y component of velocity in ECI space, in km/sec.
/// Example: /// Example: 0.261586769
/// Constraints: No constraints specified.
func (rcv *Maneuver_Ingest) MutatePostVelY(n float64) bool {
	return rcv._tab.MutateFloat64Slot(122, n)
}

/// Post-event Z component of velocity in ECI space, in km/sec.
/// Example: /// Example: 0.006842148
/// Constraints: No constraints specified.
func (rcv *Maneuver_Ingest) PostVelZ() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(124))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Post-event Z component of velocity in ECI space, in km/sec.
/// Example: /// Example: 0.006842148
/// Constraints: No constraints specified.
func (rcv *Maneuver_Ingest) MutatePostVelZ(n float64) bool {
	return rcv._tab.MutateFloat64Slot(124, n)
}

/// Post-event radiation pressure coefficient. The units of the radiation pressure coefficient vary depending on provider. Users should consult the data provider to verify the units of the radiation pressure coefficient.
/// Example: /// Example: 4.51e-07
/// Constraints: No constraints specified.
func (rcv *Maneuver_Ingest) PostRadiationPressCoeff() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(126))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Post-event radiation pressure coefficient. The units of the radiation pressure coefficient vary depending on provider. Users should consult the data provider to verify the units of the radiation pressure coefficient.
/// Example: /// Example: 4.51e-07
/// Constraints: No constraints specified.
func (rcv *Maneuver_Ingest) MutatePostRadiationPressCoeff(n float64) bool {
	return rcv._tab.MutateFloat64Slot(126, n)
}

/// Post-event ballistic coefficient. The units of the ballistic coefficient vary depending on provider. Users should consult the data provider to verify the units of the ballistic coefficient.
/// Example: /// Example: 0.000433209
/// Constraints: No constraints specified.
func (rcv *Maneuver_Ingest) PostBallisticCoeff() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(128))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Post-event ballistic coefficient. The units of the ballistic coefficient vary depending on provider. Users should consult the data provider to verify the units of the ballistic coefficient.
/// Example: /// Example: 0.000433209
/// Constraints: No constraints specified.
func (rcv *Maneuver_Ingest) MutatePostBallisticCoeff(n float64) bool {
	return rcv._tab.MutateFloat64Slot(128, n)
}

/// Post-event spacecraft apogee (measured from Earth center), in kilometers.
/// Example: /// Example: 35800.1
/// Constraints: No constraints specified.
func (rcv *Maneuver_Ingest) PostApogee() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(130))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Post-event spacecraft apogee (measured from Earth center), in kilometers.
/// Example: /// Example: 35800.1
/// Constraints: No constraints specified.
func (rcv *Maneuver_Ingest) MutatePostApogee(n float64) bool {
	return rcv._tab.MutateFloat64Slot(130, n)
}

/// Post-event spacecraft perigee (measured from Earth center), in kilometers.
/// Example: /// Example: 35787.9
/// Constraints: No constraints specified.
func (rcv *Maneuver_Ingest) PostPerigee() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(132))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Post-event spacecraft perigee (measured from Earth center), in kilometers.
/// Example: /// Example: 35787.9
/// Constraints: No constraints specified.
func (rcv *Maneuver_Ingest) MutatePostPerigee(n float64) bool {
	return rcv._tab.MutateFloat64Slot(132, n)
}

/// Post-event spacecraft orbital inclination, in degrees. 0-180.
/// Example: /// Example: 0.0327
/// Constraints: No constraints specified.
func (rcv *Maneuver_Ingest) PostInclination() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(134))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Post-event spacecraft orbital inclination, in degrees. 0-180.
/// Example: /// Example: 0.0327
/// Constraints: No constraints specified.
func (rcv *Maneuver_Ingest) MutatePostInclination(n float64) bool {
	return rcv._tab.MutateFloat64Slot(134, n)
}

/// Post-event spacecraft eccentricity.
/// Example: /// Example: 0.000164
/// Constraints: No constraints specified.
func (rcv *Maneuver_Ingest) PostEccentricity() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(136))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Post-event spacecraft eccentricity.
/// Example: /// Example: 0.000164
/// Constraints: No constraints specified.
func (rcv *Maneuver_Ingest) MutatePostEccentricity(n float64) bool {
	return rcv._tab.MutateFloat64Slot(136, n)
}

/// Post-event spacecraft orbital period, in minutes.
/// Example: /// Example: 1436.01
/// Constraints: No constraints specified.
func (rcv *Maneuver_Ingest) PostPeriod() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(138))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Post-event spacecraft orbital period, in minutes.
/// Example: /// Example: 1436.01
/// Constraints: No constraints specified.
func (rcv *Maneuver_Ingest) MutatePostPeriod(n float64) bool {
	return rcv._tab.MutateFloat64Slot(138, n)
}

/// Post-event spacecraft Right Ascension of the Ascending Node (RAAN), in degrees.
/// Example: /// Example: 98.3335
/// Constraints: No constraints specified.
func (rcv *Maneuver_Ingest) PostRaan() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(140))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Post-event spacecraft Right Ascension of the Ascending Node (RAAN), in degrees.
/// Example: /// Example: 98.3335
/// Constraints: No constraints specified.
func (rcv *Maneuver_Ingest) MutatePostRaan(n float64) bool {
	return rcv._tab.MutateFloat64Slot(140, n)
}

/// Post-event spacecraft Semi-Major Axis (SMA), in kilometers.
/// Example: /// Example: 42164.87
/// Constraints: No constraints specified.
func (rcv *Maneuver_Ingest) PostSma() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(142))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Post-event spacecraft Semi-Major Axis (SMA), in kilometers.
/// Example: /// Example: 42164.87
/// Constraints: No constraints specified.
func (rcv *Maneuver_Ingest) MutatePostSma(n float64) bool {
	return rcv._tab.MutateFloat64Slot(142, n)
}

/// Post-event spacecraft WGS-84 GEO belt longitude, represented as -180 to 180 degrees (negative values west of Prime Meridian).
/// Example: /// Example: -93.15
/// Constraints: No constraints specified.
func (rcv *Maneuver_Ingest) PostGeoLongitude() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(144))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Post-event spacecraft WGS-84 GEO belt longitude, represented as -180 to 180 degrees (negative values west of Prime Meridian).
/// Example: /// Example: -93.15
/// Constraints: No constraints specified.
func (rcv *Maneuver_Ingest) MutatePostGeoLongitude(n float64) bool {
	return rcv._tab.MutateFloat64Slot(144, n)
}

/// Post-event GEO drift rate of the spacecraft, in degrees per day. Negative values indicate westward drift.
/// Example: /// Example: -0.0125
/// Constraints: No constraints specified.
func (rcv *Maneuver_Ingest) PostDriftRate() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(146))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Post-event GEO drift rate of the spacecraft, in degrees per day. Negative values indicate westward drift.
/// Example: /// Example: -0.0125
/// Constraints: No constraints specified.
func (rcv *Maneuver_Ingest) MutatePostDriftRate(n float64) bool {
	return rcv._tab.MutateFloat64Slot(146, n)
}

/// Post-event standard deviation, in kilometers, of spacecraft position in the 'U' unit vector direction.
/// Example: /// Example: 12.285
/// Constraints: No constraints specified.
func (rcv *Maneuver_Ingest) PostSigmaU() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(148))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Post-event standard deviation, in kilometers, of spacecraft position in the 'U' unit vector direction.
/// Example: /// Example: 12.285
/// Constraints: No constraints specified.
func (rcv *Maneuver_Ingest) MutatePostSigmaU(n float64) bool {
	return rcv._tab.MutateFloat64Slot(148, n)
}

/// Post-event standard deviation, in kilometers, of spacecraft position in the 'V' unit vector direction.
/// Example: /// Example: 71.339
/// Constraints: No constraints specified.
func (rcv *Maneuver_Ingest) PostSigmaV() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(150))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Post-event standard deviation, in kilometers, of spacecraft position in the 'V' unit vector direction.
/// Example: /// Example: 71.339
/// Constraints: No constraints specified.
func (rcv *Maneuver_Ingest) MutatePostSigmaV(n float64) bool {
	return rcv._tab.MutateFloat64Slot(150, n)
}

/// Post-event standard deviation, in kilometers, of spacecraft position in the 'W' unit vector direction.
/// Example: /// Example: 12.77
/// Constraints: No constraints specified.
func (rcv *Maneuver_Ingest) PostSigmaW() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(152))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Post-event standard deviation, in kilometers, of spacecraft position in the 'W' unit vector direction.
/// Example: /// Example: 12.77
/// Constraints: No constraints specified.
func (rcv *Maneuver_Ingest) MutatePostSigmaW(n float64) bool {
	return rcv._tab.MutateFloat64Slot(152, n)
}

/// Optional maneuver cross-track/radial/in-track covariance array, in meter and second based units, in the following order: CR_R, CI_R, CI_I, CC_R, CC_I, CC_C, CT_R, CT_I, CT_C, CT_T.
/// Example: /// Example: No example provided.
/// Constraints: No constraints specified.
func (rcv *Maneuver_Ingest) Cov(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(154))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *Maneuver_Ingest) CovLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(154))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

/// Optional maneuver cross-track/radial/in-track covariance array, in meter and second based units, in the following order: CR_R, CI_R, CI_I, CC_R, CC_I, CC_C, CT_R, CT_I, CT_C, CT_T.
/// Example: /// Example: No example provided.
/// Constraints: No constraints specified.
///  Estimated mass of the object following the maneuver, in kg.
/// Example: /// Example: 1844.5
/// Constraints: No constraints specified.
func (rcv *Maneuver_Ingest) PostMass() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(156))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

///  Estimated mass of the object following the maneuver, in kg.
/// Example: /// Example: 1844.5
/// Constraints: No constraints specified.
func (rcv *Maneuver_Ingest) MutatePostMass(n float64) bool {
	return rcv._tab.MutateFloat64Slot(156, n)
}

/// Estimated area of the object following the maneuver, in meters squared.
/// Example: /// Example: 35.77
/// Constraints: No constraints specified.
func (rcv *Maneuver_Ingest) PostArea() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(158))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Estimated area of the object following the maneuver, in meters squared.
/// Example: /// Example: 35.77
/// Constraints: No constraints specified.
func (rcv *Maneuver_Ingest) MutatePostArea(n float64) bool {
	return rcv._tab.MutateFloat64Slot(158, n)
}

/// Number of observations used to generate the maneuver data.
/// Example: /// Example: 10
/// Constraints: No constraints specified.
func (rcv *Maneuver_Ingest) NumObs() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(160))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

/// Number of observations used to generate the maneuver data.
/// Example: /// Example: 10
/// Constraints: No constraints specified.
func (rcv *Maneuver_Ingest) MutateNumObs(n int32) bool {
	return rcv._tab.MutateInt32Slot(160, n)
}

/// Description and notes of the maneuver.
/// Example: /// Example: Example notes
/// Constraints: Minimum length = 0, Maximum length = 256
func (rcv *Maneuver_Ingest) Description() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(162))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Description and notes of the maneuver.
/// Example: /// Example: Example notes
/// Constraints: Minimum length = 0, Maximum length = 256
/// Optional source-provided and searchable metadata or descriptor of the data.
/// Example: /// Example: Example descriptor
/// Constraints: Minimum length = 0, Maximum length = 64
func (rcv *Maneuver_Ingest) Descriptor() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(164))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Optional source-provided and searchable metadata or descriptor of the data.
/// Example: /// Example: Example descriptor
/// Constraints: Minimum length = 0, Maximum length = 64
/// Name of the state model used to generate the maneuver data.
/// Example: /// Example: Example name
/// Constraints: Minimum length = 0, Maximum length = 32
func (rcv *Maneuver_Ingest) StateModel() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(166))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Name of the state model used to generate the maneuver data.
/// Example: /// Example: Example name
/// Constraints: Minimum length = 0, Maximum length = 32
/// Version of the state model used to generate the maneuver data.
/// Example: /// Example: 3
/// Constraints: No constraints specified.
func (rcv *Maneuver_Ingest) StateModelVersion() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(168))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Version of the state model used to generate the maneuver data.
/// Example: /// Example: 3
/// Constraints: No constraints specified.
func (rcv *Maneuver_Ingest) MutateStateModelVersion(n float64) bool {
	return rcv._tab.MutateFloat64Slot(168, n)
}

/// The total number of estimated acceleration points during the maneuver.
/// Example: /// Example: 3
/// Constraints: No constraints specified.
func (rcv *Maneuver_Ingest) NumAccelPoints() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(170))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

/// The total number of estimated acceleration points during the maneuver.
/// Example: /// Example: 3
/// Constraints: No constraints specified.
func (rcv *Maneuver_Ingest) MutateNumAccelPoints(n int32) bool {
	return rcv._tab.MutateInt32Slot(170, n)
}

/// Array of elapsed times, in seconds from maneuver start time, at which each acceleration point is estimated. Number of elements must match the numAccelPoints.
/// Example: /// Example: [10.25, 50.56, 150.78]
/// Constraints: No constraints specified.
func (rcv *Maneuver_Ingest) MnvrAccelTimes(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(172))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *Maneuver_Ingest) MnvrAccelTimesLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(172))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

/// Array of elapsed times, in seconds from maneuver start time, at which each acceleration point is estimated. Number of elements must match the numAccelPoints.
/// Example: /// Example: [10.25, 50.56, 150.78]
/// Constraints: No constraints specified.
/// Array of estimated acceleration values, in meters per second squared. Number of elements must match the numAccelPoints.
/// Example: /// Example: [0.05, 0.1, 0.05]
/// Constraints: No constraints specified.
func (rcv *Maneuver_Ingest) MnvrAccels(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(174))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *Maneuver_Ingest) MnvrAccelsLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(174))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

/// Array of estimated acceleration values, in meters per second squared. Number of elements must match the numAccelPoints.
/// Example: /// Example: [0.05, 0.1, 0.05]
/// Constraints: No constraints specified.
/// Array of the 1-sigma uncertainties in estimated accelerations, in meters per second squared. Number of elements must match the numAccelPoints.
/// Example: /// Example: [0.0005, 0.001, 0.0005]
/// Constraints: No constraints specified.
func (rcv *Maneuver_Ingest) MnvrAccelUncs(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(176))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *Maneuver_Ingest) MnvrAccelUncsLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(176))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

/// Array of the 1-sigma uncertainties in estimated accelerations, in meters per second squared. Number of elements must match the numAccelPoints.
/// Example: /// Example: [0.0005, 0.001, 0.0005]
/// Constraints: No constraints specified.
/// Source of the data.
/// Example: /// Example: Bluestaq
/// Constraints: Minimum length = 1, Maximum length = 64
func (rcv *Maneuver_Ingest) Source() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(178))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Source of the data.
/// Example: /// Example: Bluestaq
/// Constraints: Minimum length = 1, Maximum length = 64
/// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
/// Example: /// Example: THIRD_PARTY_DATASOURCE
/// Constraints: Minimum length = 0, Maximum length = 64
func (rcv *Maneuver_Ingest) Origin() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(180))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
/// Example: /// Example: THIRD_PARTY_DATASOURCE
/// Constraints: Minimum length = 0, Maximum length = 64
/// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
/// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
/// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
/// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
/// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
/// Example: /// Example: TEST
/// Constraints: Minimum length = 1, Maximum length = 32
func (rcv *Maneuver_Ingest) DataMode() Maneuver_Ingest_dataMode_Enum {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(182))
	if o != 0 {
		return Maneuver_Ingest_dataMode_Enum(rcv._tab.GetInt8(o + rcv._tab.Pos))
	}
	return 0
}

/// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
/// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
/// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
/// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
/// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
/// Example: /// Example: TEST
/// Constraints: Minimum length = 1, Maximum length = 32
func (rcv *Maneuver_Ingest) MutateDataMode(n Maneuver_Ingest_dataMode_Enum) bool {
	return rcv._tab.MutateInt8Slot(182, int8(n))
}

/// Time the row was created in the database, auto-populated by the system.
/// Example: /// Example: 2018-01-01T16:00:00.123Z
/// Constraints: No constraints specified.
func (rcv *Maneuver_Ingest) CreatedAt() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(184))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Time the row was created in the database, auto-populated by the system.
/// Example: /// Example: 2018-01-01T16:00:00.123Z
/// Constraints: No constraints specified.
/// Application user who created the row in the database, auto-populated by the system.
/// Example: /// Example: some.user
/// Constraints: Minimum length = 1, Maximum length = 64
func (rcv *Maneuver_Ingest) CreatedBy() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(186))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Application user who created the row in the database, auto-populated by the system.
/// Example: /// Example: some.user
/// Constraints: Minimum length = 1, Maximum length = 64
/// Optional array of provider/source specific tags for this data, where each element is no longer than 32 characters, used for implementing data owner conditional access controls to restrict access to the data. Should be left null by data providers unless conditional access controls are coordinated with the UDL team.
/// Example: /// Example: ['PROVIDER_TAG1', 'PROVIDERTAG2']
/// Constraints: No constraints specified.
func (rcv *Maneuver_Ingest) Tags(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(188))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *Maneuver_Ingest) TagsLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(188))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

/// Optional array of provider/source specific tags for this data, where each element is no longer than 32 characters, used for implementing data owner conditional access controls to restrict access to the data. Should be left null by data providers unless conditional access controls are coordinated with the UDL team.
/// Example: /// Example: ['PROVIDER_TAG1', 'PROVIDERTAG2']
/// Constraints: No constraints specified.
/// Optional algorithm used to produce this record.
/// Example: /// Example: Example algorithm
/// Constraints: Minimum length = 0, Maximum length = 64
func (rcv *Maneuver_Ingest) Algorithm() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(190))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Optional algorithm used to produce this record.
/// Example: /// Example: Example algorithm
/// Constraints: Minimum length = 0, Maximum length = 64
/// Optional array of UDL data (elsets, state vectors, etc) UUIDs used to build this maneuver. See the associated sourcedDataTypes array for the specific types of data for the positionally corresponding UUIDs in this array (the two arrays must match in size).
/// Example: /// Example: ['SOURCEDDATA-ID', 'SOURCEDDATA-ID']
/// Constraints: No constraints specified.
func (rcv *Maneuver_Ingest) SourcedData(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(192))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *Maneuver_Ingest) SourcedDataLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(192))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

/// Optional array of UDL data (elsets, state vectors, etc) UUIDs used to build this maneuver. See the associated sourcedDataTypes array for the specific types of data for the positionally corresponding UUIDs in this array (the two arrays must match in size).
/// Example: /// Example: ['SOURCEDDATA-ID', 'SOURCEDDATA-ID']
/// Constraints: No constraints specified.
/// Optional array of UDL data types used to build this maneuver (e.g. EO, RADAR, RF, DOA, ELSET, SV). See the associated sourcedData array for the specific UUIDs of data for the positionally corresponding data types in this array (the two arrays must match in size).
/// Example: /// Example: ['EO', 'RADAR']
/// Constraints: No constraints specified.
func (rcv *Maneuver_Ingest) SourcedDataTypes() Maneuver_Ingest_sourcedDataTypes_Enum {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(194))
	if o != 0 {
		return Maneuver_Ingest_sourcedDataTypes_Enum(rcv._tab.GetInt8(o + rcv._tab.Pos))
	}
	return 0
}

/// Optional array of UDL data types used to build this maneuver (e.g. EO, RADAR, RF, DOA, ELSET, SV). See the associated sourcedData array for the specific UUIDs of data for the positionally corresponding data types in this array (the two arrays must match in size).
/// Example: /// Example: ['EO', 'RADAR']
/// Constraints: No constraints specified.
func (rcv *Maneuver_Ingest) MutateSourcedDataTypes(n Maneuver_Ingest_sourcedDataTypes_Enum) bool {
	return rcv._tab.MutateInt8Slot(194, int8(n))
}

/// Optional identifier to track a commercial or marketplace transaction executed to produce this data.
/// Example: /// Example: TRANSACTION-ID
/// Constraints: Minimum length = 0, Maximum length = 64
func (rcv *Maneuver_Ingest) TransactionId() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(196))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Optional identifier to track a commercial or marketplace transaction executed to produce this data.
/// Example: /// Example: TRANSACTION-ID
/// Constraints: Minimum length = 0, Maximum length = 64
/// The originating source network on which this record was created, auto-populated by the system.
/// Example: /// Example: ORIG
/// Constraints: Minimum length = 1, Maximum length = 32
func (rcv *Maneuver_Ingest) OrigNetwork() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(198))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The originating source network on which this record was created, auto-populated by the system.
/// Example: /// Example: ORIG
/// Constraints: Minimum length = 1, Maximum length = 32
func Maneuver_IngestStart(builder *flatbuffers.Builder) {
	builder.StartObject(98)
}
func Maneuver_IngestAddId(builder *flatbuffers.Builder, id flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(id), 0)
}
func Maneuver_IngestAddClassificationMarking(builder *flatbuffers.Builder, classificationMarking flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(classificationMarking), 0)
}
func Maneuver_IngestAddSatNo(builder *flatbuffers.Builder, satNo int32) {
	builder.PrependInt32Slot(2, satNo, 0)
}
func Maneuver_IngestAddReportTime(builder *flatbuffers.Builder, reportTime flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(3, flatbuffers.UOffsetT(reportTime), 0)
}
func Maneuver_IngestAddEventStartTime(builder *flatbuffers.Builder, eventStartTime flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(4, flatbuffers.UOffsetT(eventStartTime), 0)
}
func Maneuver_IngestAddEventEndTime(builder *flatbuffers.Builder, eventEndTime flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(5, flatbuffers.UOffsetT(eventEndTime), 0)
}
func Maneuver_IngestAddTotalBurnTime(builder *flatbuffers.Builder, totalBurnTime float64) {
	builder.PrependFloat64Slot(6, totalBurnTime, 0.0)
}
func Maneuver_IngestAddOdFitEndTime(builder *flatbuffers.Builder, odFitEndTime flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(7, flatbuffers.UOffsetT(odFitEndTime), 0)
}
func Maneuver_IngestAddIdOnOrbit(builder *flatbuffers.Builder, idOnOrbit flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(8, flatbuffers.UOffsetT(idOnOrbit), 0)
}
func Maneuver_IngestAddIdSensor(builder *flatbuffers.Builder, idSensor flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(9, flatbuffers.UOffsetT(idSensor), 0)
}
func Maneuver_IngestAddUct(builder *flatbuffers.Builder, uct bool) {
	builder.PrependBoolSlot(10, uct, false)
}
func Maneuver_IngestAddManeuverUnc(builder *flatbuffers.Builder, maneuverUnc float64) {
	builder.PrependFloat64Slot(11, maneuverUnc, 0.0)
}
func Maneuver_IngestAddCharacterization(builder *flatbuffers.Builder, characterization flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(12, flatbuffers.UOffsetT(characterization), 0)
}
func Maneuver_IngestAddCharacterizationUnc(builder *flatbuffers.Builder, characterizationUnc float64) {
	builder.PrependFloat64Slot(13, characterizationUnc, 0.0)
}
func Maneuver_IngestAddEventId(builder *flatbuffers.Builder, eventId flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(14, flatbuffers.UOffsetT(eventId), 0)
}
func Maneuver_IngestAddOrigObjectId(builder *flatbuffers.Builder, origObjectId flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(15, flatbuffers.UOffsetT(origObjectId), 0)
}
func Maneuver_IngestAddOrigSensorId(builder *flatbuffers.Builder, origSensorId flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(16, flatbuffers.UOffsetT(origSensorId), 0)
}
func Maneuver_IngestAddStatus(builder *flatbuffers.Builder, status flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(17, flatbuffers.UOffsetT(status), 0)
}
func Maneuver_IngestAddDeltaPos(builder *flatbuffers.Builder, deltaPos float64) {
	builder.PrependFloat64Slot(18, deltaPos, 0.0)
}
func Maneuver_IngestAddDeltaPosU(builder *flatbuffers.Builder, deltaPosU float64) {
	builder.PrependFloat64Slot(19, deltaPosU, 0.0)
}
func Maneuver_IngestAddDeltaPosV(builder *flatbuffers.Builder, deltaPosV float64) {
	builder.PrependFloat64Slot(20, deltaPosV, 0.0)
}
func Maneuver_IngestAddDeltaPosW(builder *flatbuffers.Builder, deltaPosW float64) {
	builder.PrependFloat64Slot(21, deltaPosW, 0.0)
}
func Maneuver_IngestAddDeltaVel(builder *flatbuffers.Builder, deltaVel float64) {
	builder.PrependFloat64Slot(22, deltaVel, 0.0)
}
func Maneuver_IngestAddDeltaVelU(builder *flatbuffers.Builder, deltaVelU float64) {
	builder.PrependFloat64Slot(23, deltaVelU, 0.0)
}
func Maneuver_IngestAddDeltaVelV(builder *flatbuffers.Builder, deltaVelV float64) {
	builder.PrependFloat64Slot(24, deltaVelV, 0.0)
}
func Maneuver_IngestAddDeltaVelW(builder *flatbuffers.Builder, deltaVelW float64) {
	builder.PrependFloat64Slot(25, deltaVelW, 0.0)
}
func Maneuver_IngestAddDeltaMass(builder *flatbuffers.Builder, deltaMass float64) {
	builder.PrependFloat64Slot(26, deltaMass, 0.0)
}
func Maneuver_IngestAddPreEventIdElset(builder *flatbuffers.Builder, preEventIdElset flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(27, flatbuffers.UOffsetT(preEventIdElset), 0)
}
func Maneuver_IngestAddPreEventElset(builder *flatbuffers.Builder, preEventElset flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(28, flatbuffers.UOffsetT(preEventElset), 0)
}
func Maneuver_IngestAddPreEventIdStateVector(builder *flatbuffers.Builder, preEventIdStateVector flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(29, flatbuffers.UOffsetT(preEventIdStateVector), 0)
}
func Maneuver_IngestAddPreEventStateVector(builder *flatbuffers.Builder, preEventStateVector flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(30, flatbuffers.UOffsetT(preEventStateVector), 0)
}
func Maneuver_IngestAddPrePosX(builder *flatbuffers.Builder, prePosX float64) {
	builder.PrependFloat64Slot(31, prePosX, 0.0)
}
func Maneuver_IngestAddPrePosY(builder *flatbuffers.Builder, prePosY float64) {
	builder.PrependFloat64Slot(32, prePosY, 0.0)
}
func Maneuver_IngestAddPrePosZ(builder *flatbuffers.Builder, prePosZ float64) {
	builder.PrependFloat64Slot(33, prePosZ, 0.0)
}
func Maneuver_IngestAddPreVelX(builder *flatbuffers.Builder, preVelX float64) {
	builder.PrependFloat64Slot(34, preVelX, 0.0)
}
func Maneuver_IngestAddPreVelY(builder *flatbuffers.Builder, preVelY float64) {
	builder.PrependFloat64Slot(35, preVelY, 0.0)
}
func Maneuver_IngestAddPreVelZ(builder *flatbuffers.Builder, preVelZ float64) {
	builder.PrependFloat64Slot(36, preVelZ, 0.0)
}
func Maneuver_IngestAddPreRadiationPressCoeff(builder *flatbuffers.Builder, preRadiationPressCoeff float64) {
	builder.PrependFloat64Slot(37, preRadiationPressCoeff, 0.0)
}
func Maneuver_IngestAddPreBallisticCoeff(builder *flatbuffers.Builder, preBallisticCoeff float64) {
	builder.PrependFloat64Slot(38, preBallisticCoeff, 0.0)
}
func Maneuver_IngestAddPreApogee(builder *flatbuffers.Builder, preApogee float64) {
	builder.PrependFloat64Slot(39, preApogee, 0.0)
}
func Maneuver_IngestAddPrePerigee(builder *flatbuffers.Builder, prePerigee float64) {
	builder.PrependFloat64Slot(40, prePerigee, 0.0)
}
func Maneuver_IngestAddPreInclination(builder *flatbuffers.Builder, preInclination float64) {
	builder.PrependFloat64Slot(41, preInclination, 0.0)
}
func Maneuver_IngestAddPreEccentricity(builder *flatbuffers.Builder, preEccentricity float64) {
	builder.PrependFloat64Slot(42, preEccentricity, 0.0)
}
func Maneuver_IngestAddPrePeriod(builder *flatbuffers.Builder, prePeriod float64) {
	builder.PrependFloat64Slot(43, prePeriod, 0.0)
}
func Maneuver_IngestAddPreRaan(builder *flatbuffers.Builder, preRaan float64) {
	builder.PrependFloat64Slot(44, preRaan, 0.0)
}
func Maneuver_IngestAddPreSma(builder *flatbuffers.Builder, preSma float64) {
	builder.PrependFloat64Slot(45, preSma, 0.0)
}
func Maneuver_IngestAddPreGeoLongitude(builder *flatbuffers.Builder, preGeoLongitude float64) {
	builder.PrependFloat64Slot(46, preGeoLongitude, 0.0)
}
func Maneuver_IngestAddPreDriftRate(builder *flatbuffers.Builder, preDriftRate float64) {
	builder.PrependFloat64Slot(47, preDriftRate, 0.0)
}
func Maneuver_IngestAddPreSigmaU(builder *flatbuffers.Builder, preSigmaU float64) {
	builder.PrependFloat64Slot(48, preSigmaU, 0.0)
}
func Maneuver_IngestAddPreSigmaV(builder *flatbuffers.Builder, preSigmaV float64) {
	builder.PrependFloat64Slot(49, preSigmaV, 0.0)
}
func Maneuver_IngestAddPreSigmaW(builder *flatbuffers.Builder, preSigmaW float64) {
	builder.PrependFloat64Slot(50, preSigmaW, 0.0)
}
func Maneuver_IngestAddPostEventIdElset(builder *flatbuffers.Builder, postEventIdElset flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(51, flatbuffers.UOffsetT(postEventIdElset), 0)
}
func Maneuver_IngestAddPostEventElset(builder *flatbuffers.Builder, postEventElset flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(52, flatbuffers.UOffsetT(postEventElset), 0)
}
func Maneuver_IngestAddPostEventIdStateVector(builder *flatbuffers.Builder, postEventIdStateVector flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(53, flatbuffers.UOffsetT(postEventIdStateVector), 0)
}
func Maneuver_IngestAddPostEventStateVector(builder *flatbuffers.Builder, postEventStateVector flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(54, flatbuffers.UOffsetT(postEventStateVector), 0)
}
func Maneuver_IngestAddPostPosX(builder *flatbuffers.Builder, postPosX float64) {
	builder.PrependFloat64Slot(55, postPosX, 0.0)
}
func Maneuver_IngestAddPostPosY(builder *flatbuffers.Builder, postPosY float64) {
	builder.PrependFloat64Slot(56, postPosY, 0.0)
}
func Maneuver_IngestAddPostPosZ(builder *flatbuffers.Builder, postPosZ float64) {
	builder.PrependFloat64Slot(57, postPosZ, 0.0)
}
func Maneuver_IngestAddPostVelX(builder *flatbuffers.Builder, postVelX float64) {
	builder.PrependFloat64Slot(58, postVelX, 0.0)
}
func Maneuver_IngestAddPostVelY(builder *flatbuffers.Builder, postVelY float64) {
	builder.PrependFloat64Slot(59, postVelY, 0.0)
}
func Maneuver_IngestAddPostVelZ(builder *flatbuffers.Builder, postVelZ float64) {
	builder.PrependFloat64Slot(60, postVelZ, 0.0)
}
func Maneuver_IngestAddPostRadiationPressCoeff(builder *flatbuffers.Builder, postRadiationPressCoeff float64) {
	builder.PrependFloat64Slot(61, postRadiationPressCoeff, 0.0)
}
func Maneuver_IngestAddPostBallisticCoeff(builder *flatbuffers.Builder, postBallisticCoeff float64) {
	builder.PrependFloat64Slot(62, postBallisticCoeff, 0.0)
}
func Maneuver_IngestAddPostApogee(builder *flatbuffers.Builder, postApogee float64) {
	builder.PrependFloat64Slot(63, postApogee, 0.0)
}
func Maneuver_IngestAddPostPerigee(builder *flatbuffers.Builder, postPerigee float64) {
	builder.PrependFloat64Slot(64, postPerigee, 0.0)
}
func Maneuver_IngestAddPostInclination(builder *flatbuffers.Builder, postInclination float64) {
	builder.PrependFloat64Slot(65, postInclination, 0.0)
}
func Maneuver_IngestAddPostEccentricity(builder *flatbuffers.Builder, postEccentricity float64) {
	builder.PrependFloat64Slot(66, postEccentricity, 0.0)
}
func Maneuver_IngestAddPostPeriod(builder *flatbuffers.Builder, postPeriod float64) {
	builder.PrependFloat64Slot(67, postPeriod, 0.0)
}
func Maneuver_IngestAddPostRaan(builder *flatbuffers.Builder, postRaan float64) {
	builder.PrependFloat64Slot(68, postRaan, 0.0)
}
func Maneuver_IngestAddPostSma(builder *flatbuffers.Builder, postSma float64) {
	builder.PrependFloat64Slot(69, postSma, 0.0)
}
func Maneuver_IngestAddPostGeoLongitude(builder *flatbuffers.Builder, postGeoLongitude float64) {
	builder.PrependFloat64Slot(70, postGeoLongitude, 0.0)
}
func Maneuver_IngestAddPostDriftRate(builder *flatbuffers.Builder, postDriftRate float64) {
	builder.PrependFloat64Slot(71, postDriftRate, 0.0)
}
func Maneuver_IngestAddPostSigmaU(builder *flatbuffers.Builder, postSigmaU float64) {
	builder.PrependFloat64Slot(72, postSigmaU, 0.0)
}
func Maneuver_IngestAddPostSigmaV(builder *flatbuffers.Builder, postSigmaV float64) {
	builder.PrependFloat64Slot(73, postSigmaV, 0.0)
}
func Maneuver_IngestAddPostSigmaW(builder *flatbuffers.Builder, postSigmaW float64) {
	builder.PrependFloat64Slot(74, postSigmaW, 0.0)
}
func Maneuver_IngestAddCov(builder *flatbuffers.Builder, cov flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(75, flatbuffers.UOffsetT(cov), 0)
}
func Maneuver_IngestStartCovVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func Maneuver_IngestAddPostMass(builder *flatbuffers.Builder, postMass float64) {
	builder.PrependFloat64Slot(76, postMass, 0.0)
}
func Maneuver_IngestAddPostArea(builder *flatbuffers.Builder, postArea float64) {
	builder.PrependFloat64Slot(77, postArea, 0.0)
}
func Maneuver_IngestAddNumObs(builder *flatbuffers.Builder, numObs int32) {
	builder.PrependInt32Slot(78, numObs, 0)
}
func Maneuver_IngestAddDescription(builder *flatbuffers.Builder, description flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(79, flatbuffers.UOffsetT(description), 0)
}
func Maneuver_IngestAddDescriptor(builder *flatbuffers.Builder, descriptor flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(80, flatbuffers.UOffsetT(descriptor), 0)
}
func Maneuver_IngestAddStateModel(builder *flatbuffers.Builder, stateModel flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(81, flatbuffers.UOffsetT(stateModel), 0)
}
func Maneuver_IngestAddStateModelVersion(builder *flatbuffers.Builder, stateModelVersion float64) {
	builder.PrependFloat64Slot(82, stateModelVersion, 0.0)
}
func Maneuver_IngestAddNumAccelPoints(builder *flatbuffers.Builder, numAccelPoints int32) {
	builder.PrependInt32Slot(83, numAccelPoints, 0)
}
func Maneuver_IngestAddMnvrAccelTimes(builder *flatbuffers.Builder, mnvrAccelTimes flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(84, flatbuffers.UOffsetT(mnvrAccelTimes), 0)
}
func Maneuver_IngestStartMnvrAccelTimesVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func Maneuver_IngestAddMnvrAccels(builder *flatbuffers.Builder, mnvrAccels flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(85, flatbuffers.UOffsetT(mnvrAccels), 0)
}
func Maneuver_IngestStartMnvrAccelsVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func Maneuver_IngestAddMnvrAccelUncs(builder *flatbuffers.Builder, mnvrAccelUncs flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(86, flatbuffers.UOffsetT(mnvrAccelUncs), 0)
}
func Maneuver_IngestStartMnvrAccelUncsVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func Maneuver_IngestAddSource(builder *flatbuffers.Builder, source flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(87, flatbuffers.UOffsetT(source), 0)
}
func Maneuver_IngestAddOrigin(builder *flatbuffers.Builder, origin flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(88, flatbuffers.UOffsetT(origin), 0)
}
func Maneuver_IngestAddDataMode(builder *flatbuffers.Builder, dataMode Maneuver_Ingest_dataMode_Enum) {
	builder.PrependInt8Slot(89, int8(dataMode), 0)
}
func Maneuver_IngestAddCreatedAt(builder *flatbuffers.Builder, createdAt flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(90, flatbuffers.UOffsetT(createdAt), 0)
}
func Maneuver_IngestAddCreatedBy(builder *flatbuffers.Builder, createdBy flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(91, flatbuffers.UOffsetT(createdBy), 0)
}
func Maneuver_IngestAddTags(builder *flatbuffers.Builder, tags flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(92, flatbuffers.UOffsetT(tags), 0)
}
func Maneuver_IngestStartTagsVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func Maneuver_IngestAddAlgorithm(builder *flatbuffers.Builder, algorithm flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(93, flatbuffers.UOffsetT(algorithm), 0)
}
func Maneuver_IngestAddSourcedData(builder *flatbuffers.Builder, sourcedData flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(94, flatbuffers.UOffsetT(sourcedData), 0)
}
func Maneuver_IngestStartSourcedDataVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func Maneuver_IngestAddSourcedDataTypes(builder *flatbuffers.Builder, sourcedDataTypes Maneuver_Ingest_sourcedDataTypes_Enum) {
	builder.PrependInt8Slot(95, int8(sourcedDataTypes), 0)
}
func Maneuver_IngestAddTransactionId(builder *flatbuffers.Builder, transactionId flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(96, flatbuffers.UOffsetT(transactionId), 0)
}
func Maneuver_IngestAddOrigNetwork(builder *flatbuffers.Builder, origNetwork flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(97, flatbuffers.UOffsetT(origNetwork), 0)
}
func Maneuver_IngestEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
