// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package FlightPlanMessages_Abridged

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

/// /// Collection of messages associated with this flight plan indicating the severity, the point where the message was generated, the path (Primary, Alternate, etc.), and the text of the message.
type FlightPlanMessages_Abridged struct {
	_tab flatbuffers.Table
}

const FlightPlanMessages_AbridgedIdentifier = "FLIG"

func GetRootAsFlightPlanMessages_Abridged(buf []byte, offset flatbuffers.UOffsetT) *FlightPlanMessages_Abridged {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &FlightPlanMessages_Abridged{}
	x.Init(buf, n+offset)
	return x
}

func FinishFlightPlanMessages_AbridgedBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	identifierBytes := []byte(FlightPlanMessages_AbridgedIdentifier)
	builder.FinishWithFileIdentifier(offset, identifierBytes)
}

func FlightPlanMessages_AbridgedBufferHasIdentifier(buf []byte) bool {
	return flatbuffers.BufferHasIdentifier(buf, FlightPlanMessages_AbridgedIdentifier)
}

func GetSizePrefixedRootAsFlightPlanMessages_Abridged(buf []byte, offset flatbuffers.UOffsetT) *FlightPlanMessages_Abridged {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &FlightPlanMessages_Abridged{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedFlightPlanMessages_AbridgedBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	identifierBytes := []byte(FlightPlanMessages_AbridgedIdentifier)
	builder.FinishSizePrefixedWithFileIdentifier(offset, identifierBytes)
}

func SizePrefixedFlightPlanMessages_AbridgedBufferHasIdentifier(buf []byte) bool {
	return flatbuffers.SizePrefixedBufferHasIdentifier(buf, FlightPlanMessages_AbridgedIdentifier)
}

func (rcv *FlightPlanMessages_Abridged) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *FlightPlanMessages_Abridged) Table() flatbuffers.Table {
	return rcv._tab
}

/// The severity of the message.
/// Example: /// Example: SEVERE
/// Constraints: Minimum length = 0, Maximum length = 16
func (rcv *FlightPlanMessages_Abridged) Severity() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The severity of the message.
/// Example: /// Example: SEVERE
/// Constraints: Minimum length = 0, Maximum length = 16
/// The waypoint number for which the message was generated, or enter "PLAN" for a message impacting the entire route.
/// Example: /// Example: 20
/// Constraints: Minimum length = 0, Maximum length = 8
func (rcv *FlightPlanMessages_Abridged) WpNum() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The waypoint number for which the message was generated, or enter "PLAN" for a message impacting the entire route.
/// Example: /// Example: 20
/// Constraints: Minimum length = 0, Maximum length = 8
/// The flight path that generated the message (PRIMARY, ALTERNATE, etc.).
/// Example: /// Example: PRIMARY
/// Constraints: Minimum length = 0, Maximum length = 16
func (rcv *FlightPlanMessages_Abridged) RoutePath() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The flight path that generated the message (PRIMARY, ALTERNATE, etc.).
/// Example: /// Example: PRIMARY
/// Constraints: Minimum length = 0, Maximum length = 16
/// The text of the message.
/// Example: /// Example: Message text
/// Constraints: Minimum length = 0, Maximum length = 256
func (rcv *FlightPlanMessages_Abridged) MsgText() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The text of the message.
/// Example: /// Example: Message text
/// Constraints: Minimum length = 0, Maximum length = 256
func FlightPlanMessages_AbridgedStart(builder *flatbuffers.Builder) {
	builder.StartObject(4)
}
func FlightPlanMessages_AbridgedAddSeverity(builder *flatbuffers.Builder, severity flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(severity), 0)
}
func FlightPlanMessages_AbridgedAddWpNum(builder *flatbuffers.Builder, wpNum flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(wpNum), 0)
}
func FlightPlanMessages_AbridgedAddRoutePath(builder *flatbuffers.Builder, routePath flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(routePath), 0)
}
func FlightPlanMessages_AbridgedAddMsgText(builder *flatbuffers.Builder, msgText flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(3, flatbuffers.UOffsetT(msgText), 0)
}
func FlightPlanMessages_AbridgedEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
