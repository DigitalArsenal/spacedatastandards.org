// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package DataLink_Ingest

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

/// /// Beta Version DataLink: Detailed instructions regarding the operations of data links.
type DataLink_Ingest struct {
	_tab flatbuffers.Table
}

const DataLink_IngestIdentifier = "DATA"

func GetRootAsDataLink_Ingest(buf []byte, offset flatbuffers.UOffsetT) *DataLink_Ingest {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &DataLink_Ingest{}
	x.Init(buf, n+offset)
	return x
}

func FinishDataLink_IngestBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	identifierBytes := []byte(DataLink_IngestIdentifier)
	builder.FinishWithFileIdentifier(offset, identifierBytes)
}

func DataLink_IngestBufferHasIdentifier(buf []byte) bool {
	return flatbuffers.BufferHasIdentifier(buf, DataLink_IngestIdentifier)
}

func GetSizePrefixedRootAsDataLink_Ingest(buf []byte, offset flatbuffers.UOffsetT) *DataLink_Ingest {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &DataLink_Ingest{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedDataLink_IngestBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	identifierBytes := []byte(DataLink_IngestIdentifier)
	builder.FinishSizePrefixedWithFileIdentifier(offset, identifierBytes)
}

func SizePrefixedDataLink_IngestBufferHasIdentifier(buf []byte) bool {
	return flatbuffers.SizePrefixedBufferHasIdentifier(buf, DataLink_IngestIdentifier)
}

func (rcv *DataLink_Ingest) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *DataLink_Ingest) Table() flatbuffers.Table {
	return rcv._tab
}

/// Unique identifier of the record, auto-generated by the system if not provided on create operations.
/// Example: /// Example: 026dd511-8ba5-47d3-9909-836149f87686
/// Constraints: Minimum length = 1, Maximum length = 36
func (rcv *DataLink_Ingest) Id() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Unique identifier of the record, auto-generated by the system if not provided on create operations.
/// Example: /// Example: 026dd511-8ba5-47d3-9909-836149f87686
/// Constraints: Minimum length = 1, Maximum length = 36
/// Classification marking of the data in IC/CAPCO Portion-marked format.
/// Example: /// Example: U
/// Constraints: Minimum length = 1, Maximum length = 128
func (rcv *DataLink_Ingest) ClassificationMarking() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Classification marking of the data in IC/CAPCO Portion-marked format.
/// Example: /// Example: U
/// Constraints: Minimum length = 1, Maximum length = 128
/// Specifies the unique operation or exercise name, nickname, or codeword assigned to a joint exercise or operation plan.
/// Example: /// Example: DESERT WIND
/// Constraints: Minimum length = 1, Maximum length = 64
func (rcv *DataLink_Ingest) OpExName() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Specifies the unique operation or exercise name, nickname, or codeword assigned to a joint exercise or operation plan.
/// Example: /// Example: DESERT WIND
/// Constraints: Minimum length = 1, Maximum length = 64
/// The identifier of the originator of this message.
/// Example: /// Example: USCENTCOM
/// Constraints: Minimum length = 1, Maximum length = 36
func (rcv *DataLink_Ingest) Originator() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The identifier of the originator of this message.
/// Example: /// Example: USCENTCOM
/// Constraints: Minimum length = 1, Maximum length = 36
/// The start of the effective time period of this data link message, in ISO 8601 UTC format with millisecond precision.
/// Example: /// Example: 2024-01-07T13:55:43.123Z
/// Constraints: No constraints specified.
func (rcv *DataLink_Ingest) StartTime() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The start of the effective time period of this data link message, in ISO 8601 UTC format with millisecond precision.
/// Example: /// Example: 2024-01-07T13:55:43.123Z
/// Constraints: No constraints specified.
/// The end of the effective time period of this data link message, in ISO 8601 UTC format with millisecond precision. This may be a relative stop time if used with stopTimeMod.
/// Example: /// Example: 2024-01-08T13:55:43.123Z
/// Constraints: No constraints specified.
func (rcv *DataLink_Ingest) StopTime() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The end of the effective time period of this data link message, in ISO 8601 UTC format with millisecond precision. This may be a relative stop time if used with stopTimeMod.
/// Example: /// Example: 2024-01-08T13:55:43.123Z
/// Constraints: No constraints specified.
/// A qualifier for the end of the effective time period of this data link message, such as AFTER, ASOF, NLT, etc. Used with field stopTime to indicate a relative time.
/// Example: /// Example: AFTER
/// Constraints: Minimum length = 0, Maximum length = 8
func (rcv *DataLink_Ingest) StopTimeMod() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// A qualifier for the end of the effective time period of this data link message, such as AFTER, ASOF, NLT, etc. Used with field stopTime to indicate a relative time.
/// Example: /// Example: AFTER
/// Constraints: Minimum length = 0, Maximum length = 8
/// The official identifier of the military establishment responsible for the operation plan and the identification number assigned to this plan.
/// Example: /// Example: SACEUR 106
/// Constraints: Minimum length = 0, Maximum length = 36
func (rcv *DataLink_Ingest) PlanOrigNum() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(18))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The official identifier of the military establishment responsible for the operation plan and the identification number assigned to this plan.
/// Example: /// Example: SACEUR 106
/// Constraints: Minimum length = 0, Maximum length = 36
/// Provides an additional caveat further identifying the exercise or modifies the exercise nickname.
/// Example: /// Example: CONTROL
/// Constraints: Minimum length = 0, Maximum length = 32
func (rcv *DataLink_Ingest) OpExInfo() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(20))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Provides an additional caveat further identifying the exercise or modifies the exercise nickname.
/// Example: /// Example: CONTROL
/// Constraints: Minimum length = 0, Maximum length = 32
/// The secondary nickname of the option or the alternative of the operational plan or order.
/// Example: /// Example: ORANGE
/// Constraints: Minimum length = 0, Maximum length = 24
func (rcv *DataLink_Ingest) OpExInfoAlt() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(22))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The secondary nickname of the option or the alternative of the operational plan or order.
/// Example: /// Example: ORANGE
/// Constraints: Minimum length = 0, Maximum length = 24
/// The unique message identifier assigned by the originator.
/// Example: /// Example: 1201003
/// Constraints: Minimum length = 0, Maximum length = 16
func (rcv *DataLink_Ingest) SerialNum() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(24))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The unique message identifier assigned by the originator.
/// Example: /// Example: 1201003
/// Constraints: Minimum length = 0, Maximum length = 16
/// The month in which this message originated.
/// Example: /// Example: OCT
/// Constraints: Minimum length = 0, Maximum length = 12
func (rcv *DataLink_Ingest) Month() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(26))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The month in which this message originated.
/// Example: /// Example: OCT
/// Constraints: Minimum length = 0, Maximum length = 12
/// The qualifier which caveats the message status such as AMP (Amplification), CHG (Change), etc.
/// Example: /// Example: CHG
/// Constraints: Minimum length = 0, Maximum length = 8
func (rcv *DataLink_Ingest) Qualifier() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(28))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The qualifier which caveats the message status such as AMP (Amplification), CHG (Change), etc.
/// Example: /// Example: CHG
/// Constraints: Minimum length = 0, Maximum length = 8
/// The serial number associated with the message qualifier.
/// Example: /// Example: 1
/// Constraints: No constraints specified.
func (rcv *DataLink_Ingest) QualSn() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(30))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

/// The serial number associated with the message qualifier.
/// Example: /// Example: 1
/// Constraints: No constraints specified.
func (rcv *DataLink_Ingest) MutateQualSn(n int32) bool {
	return rcv._tab.MutateInt32Slot(30, n)
}

/// Collection of reference information. There can be 0 to many DataLinkReferences collections within the datalink service.
/// Example: /// Example: No example provided.
/// Constraints: No constraints specified.
func (rcv *DataLink_Ingest) References(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(32))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *DataLink_Ingest) ReferencesLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(32))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

/// Collection of reference information. There can be 0 to many DataLinkReferences collections within the datalink service.
/// Example: /// Example: No example provided.
/// Constraints: No constraints specified.
/// The identifier for this data link message cancellation.
/// Example: /// Example: ABSTAT
/// Constraints: Minimum length = 0, Maximum length = 20
func (rcv *DataLink_Ingest) CanxId() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(34))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The identifier for this data link message cancellation.
/// Example: /// Example: ABSTAT
/// Constraints: Minimum length = 0, Maximum length = 20
/// The originator of this data link message cancellation.
/// Example: /// Example: 505 AOC
/// Constraints: Minimum length = 0, Maximum length = 30
func (rcv *DataLink_Ingest) CanxOriginator() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(36))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The originator of this data link message cancellation.
/// Example: /// Example: 505 AOC
/// Constraints: Minimum length = 0, Maximum length = 30
/// Timestamp of the data link message cancellation, in ISO 8601 UTC format with millisecond precision.
/// Example: /// Example: 2024-01-07T13:55:43.123Z
/// Constraints: No constraints specified.
func (rcv *DataLink_Ingest) CanxTs() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(38))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Timestamp of the data link message cancellation, in ISO 8601 UTC format with millisecond precision.
/// Example: /// Example: 2024-01-07T13:55:43.123Z
/// Constraints: No constraints specified.
/// Serial number assigned to this data link message cancellation.
/// Example: /// Example: ABC1234567
/// Constraints: Minimum length = 0, Maximum length = 10
func (rcv *DataLink_Ingest) CanxSerialNum() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(40))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Serial number assigned to this data link message cancellation.
/// Example: /// Example: ABC1234567
/// Constraints: Minimum length = 0, Maximum length = 10
/// Indicates any special actions, restrictions, guidance, or information relating to this data link message cancellation.
/// Example: /// Example: PASEP
/// Constraints: Minimum length = 0, Maximum length = 5
func (rcv *DataLink_Ingest) CanxSpecialNotation() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(42))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Indicates any special actions, restrictions, guidance, or information relating to this data link message cancellation.
/// Example: /// Example: PASEP
/// Constraints: Minimum length = 0, Maximum length = 5
/// Array of NATO Subject Indicator Codes (SIC) or filing numbers of this data link message or document being cancelled.
/// Example: /// Example: ['RDU', 'X234BS']
/// Constraints: No constraints specified.
func (rcv *DataLink_Ingest) CanxSics(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(44))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *DataLink_Ingest) CanxSicsLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(44))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

/// Array of NATO Subject Indicator Codes (SIC) or filing numbers of this data link message or document being cancelled.
/// Example: /// Example: ['RDU', 'X234BS']
/// Constraints: No constraints specified.
/// The name of the point of contact for this data link message.
/// Example: /// Example: F. BURNS
/// Constraints: Minimum length = 0, Maximum length = 32
func (rcv *DataLink_Ingest) PocName() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(46))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The name of the point of contact for this data link message.
/// Example: /// Example: F. BURNS
/// Constraints: Minimum length = 0, Maximum length = 32
/// The rank or position of the point of contact for this data link message in a military or civilian organization.
/// Example: /// Example: MAJ
/// Constraints: Minimum length = 0, Maximum length = 16
func (rcv *DataLink_Ingest) PocRank() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(48))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The rank or position of the point of contact for this data link message in a military or civilian organization.
/// Example: /// Example: MAJ
/// Constraints: Minimum length = 0, Maximum length = 16
/// The unit identifier or call sign of the point of contact for this data link message.
/// Example: /// Example: 4077 MASH
/// Constraints: Minimum length = 0, Maximum length = 38
func (rcv *DataLink_Ingest) PocCallSign() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(50))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The unit identifier or call sign of the point of contact for this data link message.
/// Example: /// Example: 4077 MASH
/// Constraints: Minimum length = 0, Maximum length = 38
/// The location name of the point of contact for this data link message.
/// Example: /// Example: CAMP SWAMPY
/// Constraints: Minimum length = 0, Maximum length = 20
func (rcv *DataLink_Ingest) PocLocName() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(52))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The location name of the point of contact for this data link message.
/// Example: /// Example: CAMP SWAMPY
/// Constraints: Minimum length = 0, Maximum length = 20
/// WGS84 latitude of the point of contact for this data link message, in degrees. -90 to 90 degrees (negative values south of equator).
/// Example: /// Example: 45.23
/// Constraints: No constraints specified.
func (rcv *DataLink_Ingest) PocLat() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(54))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// WGS84 latitude of the point of contact for this data link message, in degrees. -90 to 90 degrees (negative values south of equator).
/// Example: /// Example: 45.23
/// Constraints: No constraints specified.
func (rcv *DataLink_Ingest) MutatePocLat(n float64) bool {
	return rcv._tab.MutateFloat64Slot(54, n)
}

/// WGS84 longitude of the point of contact for this data link message, in degrees. -180 to 180 degrees (negative values west of Prime Meridian).
/// Example: /// Example: 179.1
/// Constraints: No constraints specified.
func (rcv *DataLink_Ingest) PocLon() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(56))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// WGS84 longitude of the point of contact for this data link message, in degrees. -180 to 180 degrees (negative values west of Prime Meridian).
/// Example: /// Example: 179.1
/// Constraints: No constraints specified.
func (rcv *DataLink_Ingest) MutatePocLon(n float64) bool {
	return rcv._tab.MutateFloat64Slot(56, n)
}

/// Array of telephone numbers, radio frequency values, or email addresses of the point of contact for this data link message.
/// Example: /// Example: ['TEL:804-555-4142', 'TEL:804-867-5309']
/// Constraints: No constraints specified.
func (rcv *DataLink_Ingest) PocNums(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(58))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *DataLink_Ingest) PocNumsLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(58))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

/// Array of telephone numbers, radio frequency values, or email addresses of the point of contact for this data link message.
/// Example: /// Example: ['TEL:804-555-4142', 'TEL:804-867-5309']
/// Constraints: No constraints specified.
/// The code for the point of reference from which the coordinates and networks are computed.
/// Example: /// Example: EUR-T
/// Constraints: Minimum length = 0, Maximum length = 5
func (rcv *DataLink_Ingest) GeoDatum() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(60))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The code for the point of reference from which the coordinates and networks are computed.
/// Example: /// Example: EUR-T
/// Constraints: Minimum length = 0, Maximum length = 5
/// Collection that identifies points of reference used in the establishment of the data links. There can be 1 to many DataLinkRefPoints collections within the datalink service.
/// Example: /// Example: No example provided.
/// Constraints: No constraints specified.
func (rcv *DataLink_Ingest) RefPoints(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(62))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *DataLink_Ingest) RefPointsLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(62))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

/// Collection that identifies points of reference used in the establishment of the data links. There can be 1 to many DataLinkRefPoints collections within the datalink service.
/// Example: /// Example: No example provided.
/// Constraints: No constraints specified.
/// Collection of information regarding the function, frequency, and priority of interface control and coordination nets for this data link message. There can be 1 to many DataLinkVoiceCoord collections within the datalink service.
/// Example: /// Example: No example provided.
/// Constraints: No constraints specified.
func (rcv *DataLink_Ingest) VoiceCoord(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(64))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *DataLink_Ingest) VoiceCoordLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(64))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

/// Collection of information regarding the function, frequency, and priority of interface control and coordination nets for this data link message. There can be 1 to many DataLinkVoiceCoord collections within the datalink service.
/// Example: /// Example: No example provided.
/// Constraints: No constraints specified.
/// Indicates the data terminal settings the system defaults to, either automatic correlation/decorrelation (AUTO) or manual (MAN).
/// Example: /// Example: MAN
/// Constraints: Minimum length = 0, Maximum length = 4
func (rcv *DataLink_Ingest) SysDefaultCode() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(66))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Indicates the data terminal settings the system defaults to, either automatic correlation/decorrelation (AUTO) or manual (MAN).
/// Example: /// Example: MAN
/// Constraints: Minimum length = 0, Maximum length = 4
/// The correlation window size multiplier to stretch or reduce the window size. Required if sysDefaultCode field is "MAN". Allowable entries are 0.5 to 3.0 in increments of 0.1.
/// Example: /// Example: 2.1
/// Constraints: No constraints specified.
func (rcv *DataLink_Ingest) WinSizeMult() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(68))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// The correlation window size multiplier to stretch or reduce the window size. Required if sysDefaultCode field is "MAN". Allowable entries are 0.5 to 3.0 in increments of 0.1.
/// Example: /// Example: 2.1
/// Constraints: No constraints specified.
func (rcv *DataLink_Ingest) MutateWinSizeMult(n float64) bool {
	return rcv._tab.MutateFloat64Slot(68, n)
}

/// Number added to the basic window calculated from track qualities to ensure that windows still allow valid correlations. Required if sysDefaultCode field is "MAN". Allowable entries are 0.0 to 2.0 in increments of 0.25.
/// Example: /// Example: 1.25
/// Constraints: No constraints specified.
func (rcv *DataLink_Ingest) WinSizeMin() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(70))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Number added to the basic window calculated from track qualities to ensure that windows still allow valid correlations. Required if sysDefaultCode field is "MAN". Allowable entries are 0.0 to 2.0 in increments of 0.25.
/// Example: /// Example: 1.25
/// Constraints: No constraints specified.
func (rcv *DataLink_Ingest) MutateWinSizeMin(n float64) bool {
	return rcv._tab.MutateFloat64Slot(70, n)
}

/// Track quality to prevent correlation windows from being unrealistically large. Required if sysDefaultCode field is "MAN". Allowable entries are integers from 3 to 7.
/// Example: /// Example: 6
/// Constraints: No constraints specified.
func (rcv *DataLink_Ingest) MinTrackQual() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(72))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

/// Track quality to prevent correlation windows from being unrealistically large. Required if sysDefaultCode field is "MAN". Allowable entries are integers from 3 to 7.
/// Example: /// Example: 6
/// Constraints: No constraints specified.
func (rcv *DataLink_Ingest) MutateMinTrackQual(n int32) bool {
	return rcv._tab.MutateInt32Slot(72, n)
}

/// Track quality to prevent correlation windows from being unrealistically small. Required if sysDefaultCode field is "MAN". Allowable entries are integers from 8 to 15.
/// Example: /// Example: 12
/// Constraints: No constraints specified.
func (rcv *DataLink_Ingest) MaxTrackQual() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(74))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

/// Track quality to prevent correlation windows from being unrealistically small. Required if sysDefaultCode field is "MAN". Allowable entries are integers from 8 to 15.
/// Example: /// Example: 12
/// Constraints: No constraints specified.
func (rcv *DataLink_Ingest) MutateMaxTrackQual(n int32) bool {
	return rcv._tab.MutateInt32Slot(74, n)
}

/// Track quality to enter if too many duals involving low track quality tracks are occurring. Required if sysDefaultCode field is "MAN". Allowable entries are integers from 2 to 6.
/// Example: /// Example: 3
/// Constraints: No constraints specified.
func (rcv *DataLink_Ingest) ResTrackQual() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(76))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

/// Track quality to enter if too many duals involving low track quality tracks are occurring. Required if sysDefaultCode field is "MAN". Allowable entries are integers from 2 to 6.
/// Example: /// Example: 3
/// Constraints: No constraints specified.
func (rcv *DataLink_Ingest) MutateResTrackQual(n int32) bool {
	return rcv._tab.MutateInt32Slot(76, n)
}

/// Maximum difference between the reported course of the remote track and the calculated course of the local track. Required if sysDefaultCode field is "MAN". Allowable entries are 15 to 90 in increments of 15 degrees.
/// Example: /// Example: 60
/// Constraints: No constraints specified.
func (rcv *DataLink_Ingest) CourseDiff() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(78))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

/// Maximum difference between the reported course of the remote track and the calculated course of the local track. Required if sysDefaultCode field is "MAN". Allowable entries are 15 to 90 in increments of 15 degrees.
/// Example: /// Example: 60
/// Constraints: No constraints specified.
func (rcv *DataLink_Ingest) MutateCourseDiff(n int32) bool {
	return rcv._tab.MutateInt32Slot(78, n)
}

/// Maximum percentage the faster track speed may differ from the slower track speed. Required if sysDefaultCode field is "MAN". Allowable entries are 10 to 100 in increments of 10.
/// Example: /// Example: 50
/// Constraints: No constraints specified.
func (rcv *DataLink_Ingest) SpeedDiff() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(80))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

/// Maximum percentage the faster track speed may differ from the slower track speed. Required if sysDefaultCode field is "MAN". Allowable entries are 10 to 100 in increments of 10.
/// Example: /// Example: 50
/// Constraints: No constraints specified.
func (rcv *DataLink_Ingest) MutateSpeedDiff(n int32) bool {
	return rcv._tab.MutateInt32Slot(80, n)
}

/// Maximum altitude difference between two air tracks, in thousands of feet. Required if sysDefaultCode field is "MAN". Allowable entires are 5 to 50 in increments of 5000 feet.
/// Example: /// Example: 20
/// Constraints: No constraints specified.
func (rcv *DataLink_Ingest) AltDiff() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(82))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

/// Maximum altitude difference between two air tracks, in thousands of feet. Required if sysDefaultCode field is "MAN". Allowable entires are 5 to 50 in increments of 5000 feet.
/// Example: /// Example: 20
/// Constraints: No constraints specified.
func (rcv *DataLink_Ingest) MutateAltDiff(n int32) bool {
	return rcv._tab.MutateInt32Slot(82, n)
}

/// Number used for minimum geodetic position quality. Required if sysDefaultCode field is "MAN". Allowable entries are integers from 1 to 5.
/// Example: /// Example: 3
/// Constraints: No constraints specified.
func (rcv *DataLink_Ingest) MinGeoPosQual() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(84))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

/// Number used for minimum geodetic position quality. Required if sysDefaultCode field is "MAN". Allowable entries are integers from 1 to 5.
/// Example: /// Example: 3
/// Constraints: No constraints specified.
func (rcv *DataLink_Ingest) MutateMinGeoPosQual(n int32) bool {
	return rcv._tab.MutateInt32Slot(84, n)
}

/// Number used for maximum geodetic position quality. Required if sysDefaultCode field is "MAN". Allowable entires are integers from 1 to 15.
/// Example: /// Example: 12
/// Constraints: No constraints specified.
func (rcv *DataLink_Ingest) MaxGeoPosQual() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(86))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

/// Number used for maximum geodetic position quality. Required if sysDefaultCode field is "MAN". Allowable entires are integers from 1 to 15.
/// Example: /// Example: 12
/// Constraints: No constraints specified.
func (rcv *DataLink_Ingest) MutateMaxGeoPosQual(n int32) bool {
	return rcv._tab.MutateInt32Slot(86, n)
}

/// Distance between the common and remote track is to exceed the applicable correlation window for the two tracks in order to be decorrelated. Required if sysDefaultCode field is "MAN". Allowable entries are 1.0 to 2.0 in increments of 0.1.
/// Example: /// Example: 1.7
/// Constraints: No constraints specified.
func (rcv *DataLink_Ingest) DecorrWinMult() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(88))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Distance between the common and remote track is to exceed the applicable correlation window for the two tracks in order to be decorrelated. Required if sysDefaultCode field is "MAN". Allowable entries are 1.0 to 2.0 in increments of 0.1.
/// Example: /// Example: 1.7
/// Constraints: No constraints specified.
func (rcv *DataLink_Ingest) MutateDecorrWinMult(n float64) bool {
	return rcv._tab.MutateFloat64Slot(88, n)
}

/// Number of consecutive remote track reports that must meet the decorrelation criteria before the decorrelation is executed. Required if sysDefaultCode field is "MAN". Allowable entries are integers from 1 to 5.
/// Example: /// Example: 3
/// Constraints: No constraints specified.
func (rcv *DataLink_Ingest) ConsecDecorr() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(90))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

/// Number of consecutive remote track reports that must meet the decorrelation criteria before the decorrelation is executed. Required if sysDefaultCode field is "MAN". Allowable entries are integers from 1 to 5.
/// Example: /// Example: 3
/// Constraints: No constraints specified.
func (rcv *DataLink_Ingest) MutateConsecDecorr(n int32) bool {
	return rcv._tab.MutateInt32Slot(90, n)
}

/// Collection of contact and identification information for designated multilink coordinator duty assignments. There can be 0 to many DataLinkMultiDuty collections within the datalink service.
/// Example: /// Example: No example provided.
/// Constraints: No constraints specified.
func (rcv *DataLink_Ingest) MultiDuty(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(92))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *DataLink_Ingest) MultiDutyLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(92))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

/// Collection of contact and identification information for designated multilink coordinator duty assignments. There can be 0 to many DataLinkMultiDuty collections within the datalink service.
/// Example: /// Example: No example provided.
/// Constraints: No constraints specified.
/// Collection of information describing the establishment and detailed operation of tactical data links. There can be 0 to many DataLinkOps collections within the datalink service.
/// Example: /// Example: No example provided.
/// Constraints: No constraints specified.
func (rcv *DataLink_Ingest) Ops(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(94))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *DataLink_Ingest) OpsLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(94))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

/// Collection of information describing the establishment and detailed operation of tactical data links. There can be 0 to many DataLinkOps collections within the datalink service.
/// Example: /// Example: No example provided.
/// Constraints: No constraints specified.
/// Designator of the unit for Joint Range Extension (JRE).
/// Example: /// Example: CVN-72
/// Constraints: Minimum length = 0, Maximum length = 30
func (rcv *DataLink_Ingest) JreUnitDes() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(96))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Designator of the unit for Joint Range Extension (JRE).
/// Example: /// Example: CVN-72
/// Constraints: Minimum length = 0, Maximum length = 30
/// Call sign which identifies one or more communications facilities, commands, authorities, or activities for Joint Range Extension (JRE) units.
/// Example: /// Example: CHARLIE ONE
/// Constraints: Minimum length = 0, Maximum length = 38
func (rcv *DataLink_Ingest) JreCallSign() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(98))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Call sign which identifies one or more communications facilities, commands, authorities, or activities for Joint Range Extension (JRE) units.
/// Example: /// Example: CHARLIE ONE
/// Constraints: Minimum length = 0, Maximum length = 38
/// Link-16 octal track number assigned as the primary JTIDS unit address.
/// Example: /// Example: 71777
/// Constraints: No constraints specified.
func (rcv *DataLink_Ingest) JrePriAdd() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(100))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

/// Link-16 octal track number assigned as the primary JTIDS unit address.
/// Example: /// Example: 71777
/// Constraints: No constraints specified.
func (rcv *DataLink_Ingest) MutateJrePriAdd(n int32) bool {
	return rcv._tab.MutateInt32Slot(100, n)
}

/// Link-16 octal track number assigned as the secondary JTIDS unit address.
/// Example: /// Example: 77771
/// Constraints: No constraints specified.
func (rcv *DataLink_Ingest) JreSecAdd() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(102))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

/// Link-16 octal track number assigned as the secondary JTIDS unit address.
/// Example: /// Example: 77771
/// Constraints: No constraints specified.
func (rcv *DataLink_Ingest) MutateJreSecAdd(n int32) bool {
	return rcv._tab.MutateInt32Slot(102, n)
}

/// Joint Range Extension (JRE) unit details.
/// Example: /// Example: JRE details
/// Constraints: Minimum length = 0, Maximum length = 3000
func (rcv *DataLink_Ingest) JreDetails() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(104))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Joint Range Extension (JRE) unit details.
/// Example: /// Example: JRE details
/// Constraints: Minimum length = 0, Maximum length = 3000
/// Collection of special track numbers used on the data links. There can be 0 to many DataLinkSpecTracks collections within the datalink service.
/// Example: /// Example: No example provided.
/// Constraints: No constraints specified.
func (rcv *DataLink_Ingest) SpecTracks(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(106))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *DataLink_Ingest) SpecTracksLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(106))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

/// Collection of special track numbers used on the data links. There can be 0 to many DataLinkSpecTracks collections within the datalink service.
/// Example: /// Example: No example provided.
/// Constraints: No constraints specified.
/// Array of non-link specific data unit designators.
/// Example: /// Example: ['CS:GRAY GHOST', 'CS:WHITE WHALE']
/// Constraints: No constraints specified.
func (rcv *DataLink_Ingest) NonLinkUnitDes(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(108))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *DataLink_Ingest) NonLinkUnitDesLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(108))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

/// Array of non-link specific data unit designators.
/// Example: /// Example: ['CS:GRAY GHOST', 'CS:WHITE WHALE']
/// Constraints: No constraints specified.
/// Array of Link-16 octal track numbers used as the lower limit of a track block.
/// Example: /// Example: [1234, 2345]
/// Constraints: No constraints specified.
func (rcv *DataLink_Ingest) TrackNumBlockLls(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(110))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *DataLink_Ingest) TrackNumBlockLlsLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(110))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

/// Array of Link-16 octal track numbers used as the lower limit of a track block.
/// Example: /// Example: [1234, 2345]
/// Constraints: No constraints specified.
/// Array of defined ranges of Link-11/11B track numbers assigned to a participating unit or reporting unit.
/// Example: /// Example: ['0200-0300', '0400-4412']
/// Constraints: No constraints specified.
func (rcv *DataLink_Ingest) TrackNumBlocks(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(112))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *DataLink_Ingest) TrackNumBlocksLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(112))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

/// Array of defined ranges of Link-11/11B track numbers assigned to a participating unit or reporting unit.
/// Example: /// Example: ['0200-0300', '0400-4412']
/// Constraints: No constraints specified.
/// Data link management code word.
/// Example: /// Example: VICTOR
/// Constraints: Minimum length = 0, Maximum length = 15
func (rcv *DataLink_Ingest) MgmtCode() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(114))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Data link management code word.
/// Example: /// Example: VICTOR
/// Constraints: Minimum length = 0, Maximum length = 15
/// Data link management code word meaning.
/// Example: /// Example: ORBIT AT POINT BRAVO
/// Constraints: Minimum length = 0, Maximum length = 50
func (rcv *DataLink_Ingest) MgmtCodeMeaning() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(116))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Data link management code word meaning.
/// Example: /// Example: ORBIT AT POINT BRAVO
/// Constraints: Minimum length = 0, Maximum length = 50
/// Flag Indicating if formal acknowledgement is required for the particular data link message being sent.
/// Example: /// Example: True
/// Constraints: No constraints specified.
func (rcv *DataLink_Ingest) AckReq() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(118))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

/// Flag Indicating if formal acknowledgement is required for the particular data link message being sent.
/// Example: /// Example: True
/// Constraints: No constraints specified.
func (rcv *DataLink_Ingest) MutateAckReq(n bool) bool {
	return rcv._tab.MutateBoolSlot(118, n)
}

/// Array of instructions for acknowledging and the force or units required to acknowledge the data link message being sent.
/// Example: /// Example: ['AOC EXT 2345', '317 AW']
/// Constraints: No constraints specified.
func (rcv *DataLink_Ingest) AckInstUnits(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(120))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *DataLink_Ingest) AckInstUnitsLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(120))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

/// Array of instructions for acknowledging and the force or units required to acknowledge the data link message being sent.
/// Example: /// Example: ['AOC EXT 2345', '317 AW']
/// Constraints: No constraints specified.
/// Markings that define the source material or the original classification authority for this data link message.
/// Example: /// Example: USJFCOM EXORD SOLID WASTE 98
/// Constraints: Minimum length = 0, Maximum length = 55
func (rcv *DataLink_Ingest) ClassSource() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(122))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Markings that define the source material or the original classification authority for this data link message.
/// Example: /// Example: USJFCOM EXORD SOLID WASTE 98
/// Constraints: Minimum length = 0, Maximum length = 55
/// Array of codes that indicate the reasons material is classified.
/// Example: /// Example: ['15C', '15D']
/// Constraints: No constraints specified.
func (rcv *DataLink_Ingest) ClassReasons(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(124))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *DataLink_Ingest) ClassReasonsLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(124))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

/// Array of codes that indicate the reasons material is classified.
/// Example: /// Example: ['15C', '15D']
/// Constraints: No constraints specified.
/// Array of markings that provide the literal guidance or dates for the downgrading or declassification of this data link message.
/// Example: /// Example: ['AT EXERCISE ENDEX', 'DATE:25NOV1997']
/// Constraints: No constraints specified.
func (rcv *DataLink_Ingest) DecInstDates(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(126))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *DataLink_Ingest) DecInstDatesLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(126))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

/// Array of markings that provide the literal guidance or dates for the downgrading or declassification of this data link message.
/// Example: /// Example: ['AT EXERCISE ENDEX', 'DATE:25NOV1997']
/// Constraints: No constraints specified.
/// Array of codes that provide justification for exemption from automatic downgrading or declassification.
/// Example: /// Example: ['X1', 'X2']
/// Constraints: No constraints specified.
func (rcv *DataLink_Ingest) DecExemptCodes(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(128))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *DataLink_Ingest) DecExemptCodesLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(128))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

/// Array of codes that provide justification for exemption from automatic downgrading or declassification.
/// Example: /// Example: ['X1', 'X2']
/// Constraints: No constraints specified.
/// Collection of remarks associated with this data link message.
/// Example: /// Example: No example provided.
/// Constraints: No constraints specified.
func (rcv *DataLink_Ingest) Remarks(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(130))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *DataLink_Ingest) RemarksLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(130))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

/// Collection of remarks associated with this data link message.
/// Example: /// Example: No example provided.
/// Constraints: No constraints specified.
/// Optional URI location in the document repository of the raw file parsed by the system to produce this record. To download the raw file, prepend https://udl-hostname/scs/download?id= to this value.
/// Example: /// Example: Example URI
/// Constraints: Minimum length = 0, Maximum length = 256
func (rcv *DataLink_Ingest) RawFileUri() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(132))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Optional URI location in the document repository of the raw file parsed by the system to produce this record. To download the raw file, prepend https://udl-hostname/scs/download?id= to this value.
/// Example: /// Example: Example URI
/// Constraints: Minimum length = 0, Maximum length = 256
/// Time the row was created in the database, auto-populated by the system.
/// Example: /// Example: 2018-01-01T16:00:00.123Z
/// Constraints: No constraints specified.
func (rcv *DataLink_Ingest) CreatedAt() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(134))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Time the row was created in the database, auto-populated by the system.
/// Example: /// Example: 2018-01-01T16:00:00.123Z
/// Constraints: No constraints specified.
/// Application user who created the row in the database, auto-populated by the system.
/// Example: /// Example: some.user
/// Constraints: Minimum length = 1, Maximum length = 64
func (rcv *DataLink_Ingest) CreatedBy() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(136))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Application user who created the row in the database, auto-populated by the system.
/// Example: /// Example: some.user
/// Constraints: Minimum length = 1, Maximum length = 64
/// Time the row was updated in the database, auto-populated by the system.
/// Example: /// Example: 2018-01-01T16:00:00.123Z
/// Constraints: No constraints specified.
func (rcv *DataLink_Ingest) UpdatedAt() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(138))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Time the row was updated in the database, auto-populated by the system.
/// Example: /// Example: 2018-01-01T16:00:00.123Z
/// Constraints: No constraints specified.
/// Application user who updated the row in the database, auto-populated by the system.
/// Example: /// Example: some.user
/// Constraints: Minimum length = 0, Maximum length = 64
func (rcv *DataLink_Ingest) UpdatedBy() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(140))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Application user who updated the row in the database, auto-populated by the system.
/// Example: /// Example: some.user
/// Constraints: Minimum length = 0, Maximum length = 64
/// The source data library from which this record was received. This could be a remote or tactical UDL or another data library. If null, the record should be assumed to have originated from the primary Enterprise UDL.
/// Example: /// Example: AXE
/// Constraints: Minimum length = 0, Maximum length = 64
func (rcv *DataLink_Ingest) SourceDl() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(142))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The source data library from which this record was received. This could be a remote or tactical UDL or another data library. If null, the record should be assumed to have originated from the primary Enterprise UDL.
/// Example: /// Example: AXE
/// Constraints: Minimum length = 0, Maximum length = 64
/// Source of the data.
/// Example: /// Example: Bluestaq
/// Constraints: Minimum length = 1, Maximum length = 64
func (rcv *DataLink_Ingest) Source() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(144))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Source of the data.
/// Example: /// Example: Bluestaq
/// Constraints: Minimum length = 1, Maximum length = 64
/// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
/// Example: /// Example: THIRD_PARTY_DATASOURCE
/// Constraints: Minimum length = 0, Maximum length = 64
func (rcv *DataLink_Ingest) Origin() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(146))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
/// Example: /// Example: THIRD_PARTY_DATASOURCE
/// Constraints: Minimum length = 0, Maximum length = 64
/// The originating source network on which this record was created, auto-populated by the system.
/// Example: /// Example: OPS1
/// Constraints: Minimum length = 0, Maximum length = 32
func (rcv *DataLink_Ingest) OrigNetwork() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(148))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The originating source network on which this record was created, auto-populated by the system.
/// Example: /// Example: OPS1
/// Constraints: Minimum length = 0, Maximum length = 32
/// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
/// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
/// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
/// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
/// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
/// Example: /// Example: TEST
/// Constraints: Minimum length = 1, Maximum length = 32
func (rcv *DataLink_Ingest) DataMode() DataLink_Ingest_dataMode_Enum {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(150))
	if o != 0 {
		return DataLink_Ingest_dataMode_Enum(rcv._tab.GetInt8(o + rcv._tab.Pos))
	}
	return 0
}

/// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
/// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
/// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
/// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
/// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
/// Example: /// Example: TEST
/// Constraints: Minimum length = 1, Maximum length = 32
func (rcv *DataLink_Ingest) MutateDataMode(n DataLink_Ingest_dataMode_Enum) bool {
	return rcv._tab.MutateInt8Slot(150, int8(n))
}

func DataLink_IngestStart(builder *flatbuffers.Builder) {
	builder.StartObject(74)
}
func DataLink_IngestAddId(builder *flatbuffers.Builder, id flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(id), 0)
}
func DataLink_IngestAddClassificationMarking(builder *flatbuffers.Builder, classificationMarking flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(classificationMarking), 0)
}
func DataLink_IngestAddOpExName(builder *flatbuffers.Builder, opExName flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(opExName), 0)
}
func DataLink_IngestAddOriginator(builder *flatbuffers.Builder, originator flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(3, flatbuffers.UOffsetT(originator), 0)
}
func DataLink_IngestAddStartTime(builder *flatbuffers.Builder, startTime flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(4, flatbuffers.UOffsetT(startTime), 0)
}
func DataLink_IngestAddStopTime(builder *flatbuffers.Builder, stopTime flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(5, flatbuffers.UOffsetT(stopTime), 0)
}
func DataLink_IngestAddStopTimeMod(builder *flatbuffers.Builder, stopTimeMod flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(6, flatbuffers.UOffsetT(stopTimeMod), 0)
}
func DataLink_IngestAddPlanOrigNum(builder *flatbuffers.Builder, planOrigNum flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(7, flatbuffers.UOffsetT(planOrigNum), 0)
}
func DataLink_IngestAddOpExInfo(builder *flatbuffers.Builder, opExInfo flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(8, flatbuffers.UOffsetT(opExInfo), 0)
}
func DataLink_IngestAddOpExInfoAlt(builder *flatbuffers.Builder, opExInfoAlt flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(9, flatbuffers.UOffsetT(opExInfoAlt), 0)
}
func DataLink_IngestAddSerialNum(builder *flatbuffers.Builder, serialNum flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(10, flatbuffers.UOffsetT(serialNum), 0)
}
func DataLink_IngestAddMonth(builder *flatbuffers.Builder, month flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(11, flatbuffers.UOffsetT(month), 0)
}
func DataLink_IngestAddQualifier(builder *flatbuffers.Builder, qualifier flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(12, flatbuffers.UOffsetT(qualifier), 0)
}
func DataLink_IngestAddQualSn(builder *flatbuffers.Builder, qualSn int32) {
	builder.PrependInt32Slot(13, qualSn, 0)
}
func DataLink_IngestAddReferences(builder *flatbuffers.Builder, references flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(14, flatbuffers.UOffsetT(references), 0)
}
func DataLink_IngestStartReferencesVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func DataLink_IngestAddCanxId(builder *flatbuffers.Builder, canxId flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(15, flatbuffers.UOffsetT(canxId), 0)
}
func DataLink_IngestAddCanxOriginator(builder *flatbuffers.Builder, canxOriginator flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(16, flatbuffers.UOffsetT(canxOriginator), 0)
}
func DataLink_IngestAddCanxTs(builder *flatbuffers.Builder, canxTs flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(17, flatbuffers.UOffsetT(canxTs), 0)
}
func DataLink_IngestAddCanxSerialNum(builder *flatbuffers.Builder, canxSerialNum flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(18, flatbuffers.UOffsetT(canxSerialNum), 0)
}
func DataLink_IngestAddCanxSpecialNotation(builder *flatbuffers.Builder, canxSpecialNotation flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(19, flatbuffers.UOffsetT(canxSpecialNotation), 0)
}
func DataLink_IngestAddCanxSics(builder *flatbuffers.Builder, canxSics flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(20, flatbuffers.UOffsetT(canxSics), 0)
}
func DataLink_IngestStartCanxSicsVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func DataLink_IngestAddPocName(builder *flatbuffers.Builder, pocName flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(21, flatbuffers.UOffsetT(pocName), 0)
}
func DataLink_IngestAddPocRank(builder *flatbuffers.Builder, pocRank flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(22, flatbuffers.UOffsetT(pocRank), 0)
}
func DataLink_IngestAddPocCallSign(builder *flatbuffers.Builder, pocCallSign flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(23, flatbuffers.UOffsetT(pocCallSign), 0)
}
func DataLink_IngestAddPocLocName(builder *flatbuffers.Builder, pocLocName flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(24, flatbuffers.UOffsetT(pocLocName), 0)
}
func DataLink_IngestAddPocLat(builder *flatbuffers.Builder, pocLat float64) {
	builder.PrependFloat64Slot(25, pocLat, 0.0)
}
func DataLink_IngestAddPocLon(builder *flatbuffers.Builder, pocLon float64) {
	builder.PrependFloat64Slot(26, pocLon, 0.0)
}
func DataLink_IngestAddPocNums(builder *flatbuffers.Builder, pocNums flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(27, flatbuffers.UOffsetT(pocNums), 0)
}
func DataLink_IngestStartPocNumsVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func DataLink_IngestAddGeoDatum(builder *flatbuffers.Builder, geoDatum flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(28, flatbuffers.UOffsetT(geoDatum), 0)
}
func DataLink_IngestAddRefPoints(builder *flatbuffers.Builder, refPoints flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(29, flatbuffers.UOffsetT(refPoints), 0)
}
func DataLink_IngestStartRefPointsVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func DataLink_IngestAddVoiceCoord(builder *flatbuffers.Builder, voiceCoord flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(30, flatbuffers.UOffsetT(voiceCoord), 0)
}
func DataLink_IngestStartVoiceCoordVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func DataLink_IngestAddSysDefaultCode(builder *flatbuffers.Builder, sysDefaultCode flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(31, flatbuffers.UOffsetT(sysDefaultCode), 0)
}
func DataLink_IngestAddWinSizeMult(builder *flatbuffers.Builder, winSizeMult float64) {
	builder.PrependFloat64Slot(32, winSizeMult, 0.0)
}
func DataLink_IngestAddWinSizeMin(builder *flatbuffers.Builder, winSizeMin float64) {
	builder.PrependFloat64Slot(33, winSizeMin, 0.0)
}
func DataLink_IngestAddMinTrackQual(builder *flatbuffers.Builder, minTrackQual int32) {
	builder.PrependInt32Slot(34, minTrackQual, 0)
}
func DataLink_IngestAddMaxTrackQual(builder *flatbuffers.Builder, maxTrackQual int32) {
	builder.PrependInt32Slot(35, maxTrackQual, 0)
}
func DataLink_IngestAddResTrackQual(builder *flatbuffers.Builder, resTrackQual int32) {
	builder.PrependInt32Slot(36, resTrackQual, 0)
}
func DataLink_IngestAddCourseDiff(builder *flatbuffers.Builder, courseDiff int32) {
	builder.PrependInt32Slot(37, courseDiff, 0)
}
func DataLink_IngestAddSpeedDiff(builder *flatbuffers.Builder, speedDiff int32) {
	builder.PrependInt32Slot(38, speedDiff, 0)
}
func DataLink_IngestAddAltDiff(builder *flatbuffers.Builder, altDiff int32) {
	builder.PrependInt32Slot(39, altDiff, 0)
}
func DataLink_IngestAddMinGeoPosQual(builder *flatbuffers.Builder, minGeoPosQual int32) {
	builder.PrependInt32Slot(40, minGeoPosQual, 0)
}
func DataLink_IngestAddMaxGeoPosQual(builder *flatbuffers.Builder, maxGeoPosQual int32) {
	builder.PrependInt32Slot(41, maxGeoPosQual, 0)
}
func DataLink_IngestAddDecorrWinMult(builder *flatbuffers.Builder, decorrWinMult float64) {
	builder.PrependFloat64Slot(42, decorrWinMult, 0.0)
}
func DataLink_IngestAddConsecDecorr(builder *flatbuffers.Builder, consecDecorr int32) {
	builder.PrependInt32Slot(43, consecDecorr, 0)
}
func DataLink_IngestAddMultiDuty(builder *flatbuffers.Builder, multiDuty flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(44, flatbuffers.UOffsetT(multiDuty), 0)
}
func DataLink_IngestStartMultiDutyVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func DataLink_IngestAddOps(builder *flatbuffers.Builder, ops flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(45, flatbuffers.UOffsetT(ops), 0)
}
func DataLink_IngestStartOpsVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func DataLink_IngestAddJreUnitDes(builder *flatbuffers.Builder, jreUnitDes flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(46, flatbuffers.UOffsetT(jreUnitDes), 0)
}
func DataLink_IngestAddJreCallSign(builder *flatbuffers.Builder, jreCallSign flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(47, flatbuffers.UOffsetT(jreCallSign), 0)
}
func DataLink_IngestAddJrePriAdd(builder *flatbuffers.Builder, jrePriAdd int32) {
	builder.PrependInt32Slot(48, jrePriAdd, 0)
}
func DataLink_IngestAddJreSecAdd(builder *flatbuffers.Builder, jreSecAdd int32) {
	builder.PrependInt32Slot(49, jreSecAdd, 0)
}
func DataLink_IngestAddJreDetails(builder *flatbuffers.Builder, jreDetails flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(50, flatbuffers.UOffsetT(jreDetails), 0)
}
func DataLink_IngestAddSpecTracks(builder *flatbuffers.Builder, specTracks flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(51, flatbuffers.UOffsetT(specTracks), 0)
}
func DataLink_IngestStartSpecTracksVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func DataLink_IngestAddNonLinkUnitDes(builder *flatbuffers.Builder, nonLinkUnitDes flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(52, flatbuffers.UOffsetT(nonLinkUnitDes), 0)
}
func DataLink_IngestStartNonLinkUnitDesVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func DataLink_IngestAddTrackNumBlockLls(builder *flatbuffers.Builder, trackNumBlockLls flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(53, flatbuffers.UOffsetT(trackNumBlockLls), 0)
}
func DataLink_IngestStartTrackNumBlockLlsVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func DataLink_IngestAddTrackNumBlocks(builder *flatbuffers.Builder, trackNumBlocks flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(54, flatbuffers.UOffsetT(trackNumBlocks), 0)
}
func DataLink_IngestStartTrackNumBlocksVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func DataLink_IngestAddMgmtCode(builder *flatbuffers.Builder, mgmtCode flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(55, flatbuffers.UOffsetT(mgmtCode), 0)
}
func DataLink_IngestAddMgmtCodeMeaning(builder *flatbuffers.Builder, mgmtCodeMeaning flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(56, flatbuffers.UOffsetT(mgmtCodeMeaning), 0)
}
func DataLink_IngestAddAckReq(builder *flatbuffers.Builder, ackReq bool) {
	builder.PrependBoolSlot(57, ackReq, false)
}
func DataLink_IngestAddAckInstUnits(builder *flatbuffers.Builder, ackInstUnits flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(58, flatbuffers.UOffsetT(ackInstUnits), 0)
}
func DataLink_IngestStartAckInstUnitsVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func DataLink_IngestAddClassSource(builder *flatbuffers.Builder, classSource flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(59, flatbuffers.UOffsetT(classSource), 0)
}
func DataLink_IngestAddClassReasons(builder *flatbuffers.Builder, classReasons flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(60, flatbuffers.UOffsetT(classReasons), 0)
}
func DataLink_IngestStartClassReasonsVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func DataLink_IngestAddDecInstDates(builder *flatbuffers.Builder, decInstDates flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(61, flatbuffers.UOffsetT(decInstDates), 0)
}
func DataLink_IngestStartDecInstDatesVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func DataLink_IngestAddDecExemptCodes(builder *flatbuffers.Builder, decExemptCodes flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(62, flatbuffers.UOffsetT(decExemptCodes), 0)
}
func DataLink_IngestStartDecExemptCodesVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func DataLink_IngestAddRemarks(builder *flatbuffers.Builder, remarks flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(63, flatbuffers.UOffsetT(remarks), 0)
}
func DataLink_IngestStartRemarksVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func DataLink_IngestAddRawFileUri(builder *flatbuffers.Builder, rawFileUri flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(64, flatbuffers.UOffsetT(rawFileUri), 0)
}
func DataLink_IngestAddCreatedAt(builder *flatbuffers.Builder, createdAt flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(65, flatbuffers.UOffsetT(createdAt), 0)
}
func DataLink_IngestAddCreatedBy(builder *flatbuffers.Builder, createdBy flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(66, flatbuffers.UOffsetT(createdBy), 0)
}
func DataLink_IngestAddUpdatedAt(builder *flatbuffers.Builder, updatedAt flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(67, flatbuffers.UOffsetT(updatedAt), 0)
}
func DataLink_IngestAddUpdatedBy(builder *flatbuffers.Builder, updatedBy flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(68, flatbuffers.UOffsetT(updatedBy), 0)
}
func DataLink_IngestAddSourceDl(builder *flatbuffers.Builder, sourceDl flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(69, flatbuffers.UOffsetT(sourceDl), 0)
}
func DataLink_IngestAddSource(builder *flatbuffers.Builder, source flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(70, flatbuffers.UOffsetT(source), 0)
}
func DataLink_IngestAddOrigin(builder *flatbuffers.Builder, origin flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(71, flatbuffers.UOffsetT(origin), 0)
}
func DataLink_IngestAddOrigNetwork(builder *flatbuffers.Builder, origNetwork flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(72, flatbuffers.UOffsetT(origNetwork), 0)
}
func DataLink_IngestAddDataMode(builder *flatbuffers.Builder, dataMode DataLink_Ingest_dataMode_Enum) {
	builder.PrependInt8Slot(73, int8(dataMode), 0)
}
func DataLink_IngestEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
