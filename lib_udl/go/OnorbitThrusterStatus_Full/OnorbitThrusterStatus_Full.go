// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package OnorbitThrusterStatus_Full

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

/// /// Status information for OnorbitThruster objects.
type OnorbitThrusterStatus_Full struct {
	_tab flatbuffers.Table
}

const OnorbitThrusterStatus_FullIdentifier = "ONOR"

func GetRootAsOnorbitThrusterStatus_Full(buf []byte, offset flatbuffers.UOffsetT) *OnorbitThrusterStatus_Full {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &OnorbitThrusterStatus_Full{}
	x.Init(buf, n+offset)
	return x
}

func FinishOnorbitThrusterStatus_FullBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	identifierBytes := []byte(OnorbitThrusterStatus_FullIdentifier)
	builder.FinishWithFileIdentifier(offset, identifierBytes)
}

func OnorbitThrusterStatus_FullBufferHasIdentifier(buf []byte) bool {
	return flatbuffers.BufferHasIdentifier(buf, OnorbitThrusterStatus_FullIdentifier)
}

func GetSizePrefixedRootAsOnorbitThrusterStatus_Full(buf []byte, offset flatbuffers.UOffsetT) *OnorbitThrusterStatus_Full {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &OnorbitThrusterStatus_Full{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedOnorbitThrusterStatus_FullBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	identifierBytes := []byte(OnorbitThrusterStatus_FullIdentifier)
	builder.FinishSizePrefixedWithFileIdentifier(offset, identifierBytes)
}

func SizePrefixedOnorbitThrusterStatus_FullBufferHasIdentifier(buf []byte) bool {
	return flatbuffers.SizePrefixedBufferHasIdentifier(buf, OnorbitThrusterStatus_FullIdentifier)
}

func (rcv *OnorbitThrusterStatus_Full) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *OnorbitThrusterStatus_Full) Table() flatbuffers.Table {
	return rcv._tab
}

/// Unique identifier of the record, auto-generated by the system.
/// Example: /// Example: af103c-1f917dc-002c1bd
/// Constraints: Minimum length = 1, Maximum length = 36
func (rcv *OnorbitThrusterStatus_Full) Id() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Unique identifier of the record, auto-generated by the system.
/// Example: /// Example: af103c-1f917dc-002c1bd
/// Constraints: Minimum length = 1, Maximum length = 36
/// Classification marking of the data in IC/CAPCO Portion-marked format.
/// Example: /// Example: U
/// Constraints: Minimum length = 1, Maximum length = 128
func (rcv *OnorbitThrusterStatus_Full) ClassificationMarking() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Classification marking of the data in IC/CAPCO Portion-marked format.
/// Example: /// Example: U
/// Constraints: Minimum length = 1, Maximum length = 128
/// ID of the associated OnorbitThruster record. This ID can be used to obtain additional information on an onorbit thruster object using the 'get  by ID' operation (e.g. /udl/onorbitthruster/{id}). For example, the OnorbitThruster object with idOnorbitThruster = abc would be queried as /udl/onorbitthruster/abc.
/// Example: /// Example: ff7dc909-e8b4-4a54-8529-1963d4e9b353
/// Constraints: Minimum length = 1, Maximum length = 36
func (rcv *OnorbitThrusterStatus_Full) IdOnorbitThruster() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// ID of the associated OnorbitThruster record. This ID can be used to obtain additional information on an onorbit thruster object using the 'get  by ID' operation (e.g. /udl/onorbitthruster/{id}). For example, the OnorbitThruster object with idOnorbitThruster = abc would be queried as /udl/onorbitthruster/abc.
/// Example: /// Example: ff7dc909-e8b4-4a54-8529-1963d4e9b353
/// Constraints: Minimum length = 1, Maximum length = 36
/// Identifier of this thruster.
/// Example: /// Example: REA1
/// Constraints: Minimum length = 0, Maximum length = 32
func (rcv *OnorbitThrusterStatus_Full) Name() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Identifier of this thruster.
/// Example: /// Example: REA1
/// Constraints: Minimum length = 0, Maximum length = 32
/// Datetime of the thruster status observation in ISO 8601 UTC datetime format with millisecond precision.
/// Example: /// Example: 2024-01-01T16:00:00.123Z
/// Constraints: No constraints specified.
func (rcv *OnorbitThrusterStatus_Full) StatusTime() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Datetime of the thruster status observation in ISO 8601 UTC datetime format with millisecond precision.
/// Example: /// Example: 2024-01-01T16:00:00.123Z
/// Constraints: No constraints specified.
/// Minimum available propellant mass for this thruster's type, in kilograms.
/// Example: /// Example: 0.1
/// Constraints: No constraints specified.
func (rcv *OnorbitThrusterStatus_Full) PropMassMin() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Minimum available propellant mass for this thruster's type, in kilograms.
/// Example: /// Example: 0.1
/// Constraints: No constraints specified.
func (rcv *OnorbitThrusterStatus_Full) MutatePropMassMin(n float64) bool {
	return rcv._tab.MutateFloat64Slot(14, n)
}

/// Average available propellant mass for this thruster's type, in kilograms.
/// Example: /// Example: 907.6
/// Constraints: No constraints specified.
func (rcv *OnorbitThrusterStatus_Full) PropMassAvg() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Average available propellant mass for this thruster's type, in kilograms.
/// Example: /// Example: 907.6
/// Constraints: No constraints specified.
func (rcv *OnorbitThrusterStatus_Full) MutatePropMassAvg(n float64) bool {
	return rcv._tab.MutateFloat64Slot(16, n)
}

/// Median available propellant mass for this thruster's type, in kilograms.
/// Example: /// Example: 200.1
/// Constraints: No constraints specified.
func (rcv *OnorbitThrusterStatus_Full) PropMassMedian() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(18))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Median available propellant mass for this thruster's type, in kilograms.
/// Example: /// Example: 200.1
/// Constraints: No constraints specified.
func (rcv *OnorbitThrusterStatus_Full) MutatePropMassMedian(n float64) bool {
	return rcv._tab.MutateFloat64Slot(18, n)
}

/// Maximum available propellant mass for this thruster's type, in kilograms.
/// Example: /// Example: 2333.3
/// Constraints: No constraints specified.
func (rcv *OnorbitThrusterStatus_Full) PropMassMax() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(20))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Maximum available propellant mass for this thruster's type, in kilograms.
/// Example: /// Example: 2333.3
/// Constraints: No constraints specified.
func (rcv *OnorbitThrusterStatus_Full) MutatePropMassMax(n float64) bool {
	return rcv._tab.MutateFloat64Slot(20, n)
}

/// Total fuel mass available for this thruster's type, in kilograms.
/// Example: /// Example: 100.1
/// Constraints: No constraints specified.
func (rcv *OnorbitThrusterStatus_Full) FuelMass() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(22))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Total fuel mass available for this thruster's type, in kilograms.
/// Example: /// Example: 100.1
/// Constraints: No constraints specified.
func (rcv *OnorbitThrusterStatus_Full) MutateFuelMass(n float64) bool {
	return rcv._tab.MutateFloat64Slot(22, n)
}

/// 1-sigma uncertainty of the total fuel mass available for this thruster type, in kilograms.
/// Example: /// Example: 10.1
/// Constraints: No constraints specified.
func (rcv *OnorbitThrusterStatus_Full) FuelMassUnc() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(24))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// 1-sigma uncertainty of the total fuel mass available for this thruster type, in kilograms.
/// Example: /// Example: 10.1
/// Constraints: No constraints specified.
func (rcv *OnorbitThrusterStatus_Full) MutateFuelMassUnc(n float64) bool {
	return rcv._tab.MutateFloat64Slot(24, n)
}

/// Total delta-velocity available for this thruster's type, in meters per second.
/// Example: /// Example: 100.1
/// Constraints: No constraints specified.
func (rcv *OnorbitThrusterStatus_Full) TotalDeltaV() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(26))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Total delta-velocity available for this thruster's type, in meters per second.
/// Example: /// Example: 100.1
/// Constraints: No constraints specified.
func (rcv *OnorbitThrusterStatus_Full) MutateTotalDeltaV(n float64) bool {
	return rcv._tab.MutateFloat64Slot(26, n)
}

/// Minimum available delta-velocity for this thruster, in meters per second.
/// Example: /// Example: 0.1
/// Constraints: No constraints specified.
func (rcv *OnorbitThrusterStatus_Full) MinDeltaV() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(28))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Minimum available delta-velocity for this thruster, in meters per second.
/// Example: /// Example: 0.1
/// Constraints: No constraints specified.
func (rcv *OnorbitThrusterStatus_Full) MutateMinDeltaV(n float64) bool {
	return rcv._tab.MutateFloat64Slot(28, n)
}

/// Estimated available delta-velocity for this thruster, in meters per second.
/// Example: /// Example: 10.1
/// Constraints: No constraints specified.
func (rcv *OnorbitThrusterStatus_Full) EstDeltaV() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(30))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Estimated available delta-velocity for this thruster, in meters per second.
/// Example: /// Example: 10.1
/// Constraints: No constraints specified.
func (rcv *OnorbitThrusterStatus_Full) MutateEstDeltaV(n float64) bool {
	return rcv._tab.MutateFloat64Slot(30, n)
}

/// Maximum available delta-velocity for this thruster, in meters per second.
/// Example: /// Example: 100.1
/// Constraints: No constraints specified.
func (rcv *OnorbitThrusterStatus_Full) MaxDeltaV() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(32))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Maximum available delta-velocity for this thruster, in meters per second.
/// Example: /// Example: 100.1
/// Constraints: No constraints specified.
func (rcv *OnorbitThrusterStatus_Full) MutateMaxDeltaV(n float64) bool {
	return rcv._tab.MutateFloat64Slot(32, n)
}

/// Maximum available thrust for this thruster, in newtons.
/// Example: /// Example: 22.1
/// Constraints: No constraints specified.
func (rcv *OnorbitThrusterStatus_Full) ThrustMax() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(34))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Maximum available thrust for this thruster, in newtons.
/// Example: /// Example: 22.1
/// Constraints: No constraints specified.
func (rcv *OnorbitThrusterStatus_Full) MutateThrustMax(n float64) bool {
	return rcv._tab.MutateFloat64Slot(34, n)
}

/// Specific impulse for this thruster, in seconds.
/// Example: /// Example: 300.1
/// Constraints: No constraints specified.
func (rcv *OnorbitThrusterStatus_Full) Isp() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(36))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Specific impulse for this thruster, in seconds.
/// Example: /// Example: 300.1
/// Constraints: No constraints specified.
func (rcv *OnorbitThrusterStatus_Full) MutateIsp(n float64) bool {
	return rcv._tab.MutateFloat64Slot(36, n)
}

/// Flag indicating if this thruster is operational.
/// Example: /// Example: True
/// Constraints: No constraints specified.
func (rcv *OnorbitThrusterStatus_Full) Operational() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(38))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

/// Flag indicating if this thruster is operational.
/// Example: /// Example: True
/// Constraints: No constraints specified.
func (rcv *OnorbitThrusterStatus_Full) MutateOperational(n bool) bool {
	return rcv._tab.MutateBoolSlot(38, n)
}

/// Time the row was created in the database, auto-populated by the system.
/// Example: /// Example: 2018-01-01T16:00:00.123Z
/// Constraints: No constraints specified.
func (rcv *OnorbitThrusterStatus_Full) CreatedAt() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(40))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Time the row was created in the database, auto-populated by the system.
/// Example: /// Example: 2018-01-01T16:00:00.123Z
/// Constraints: No constraints specified.
/// Application user who created the row in the database, auto-populated by the system.
/// Example: /// Example: some.user
/// Constraints: Minimum length = 1, Maximum length = 64
func (rcv *OnorbitThrusterStatus_Full) CreatedBy() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(42))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Application user who created the row in the database, auto-populated by the system.
/// Example: /// Example: some.user
/// Constraints: Minimum length = 1, Maximum length = 64
/// Source of the data.
/// Example: /// Example: Bluestaq
/// Constraints: Minimum length = 1, Maximum length = 36
func (rcv *OnorbitThrusterStatus_Full) Source() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(44))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Source of the data.
/// Example: /// Example: Bluestaq
/// Constraints: Minimum length = 1, Maximum length = 36
/// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
/// Example: /// Example: THIRD_PARTY_DATASOURCE
/// Constraints: Minimum length = 0, Maximum length = 64
func (rcv *OnorbitThrusterStatus_Full) Origin() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(46))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
/// Example: /// Example: THIRD_PARTY_DATASOURCE
/// Constraints: Minimum length = 0, Maximum length = 64
/// The originating source network on which this record was created, auto-populated by the system.
/// Example: /// Example: ORIG
/// Constraints: Minimum length = 0, Maximum length = 32
func (rcv *OnorbitThrusterStatus_Full) OrigNetwork() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(48))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The originating source network on which this record was created, auto-populated by the system.
/// Example: /// Example: ORIG
/// Constraints: Minimum length = 0, Maximum length = 32
/// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
/// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
/// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
/// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
/// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
/// Example: /// Example: TEST
/// Constraints: Minimum length = 1, Maximum length = 32
func (rcv *OnorbitThrusterStatus_Full) DataMode() OnorbitThrusterStatus_Full_dataMode_Enum {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(50))
	if o != 0 {
		return OnorbitThrusterStatus_Full_dataMode_Enum(rcv._tab.GetInt8(o + rcv._tab.Pos))
	}
	return 0
}

/// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
/// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
/// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
/// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
/// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
/// Example: /// Example: TEST
/// Constraints: Minimum length = 1, Maximum length = 32
func (rcv *OnorbitThrusterStatus_Full) MutateDataMode(n OnorbitThrusterStatus_Full_dataMode_Enum) bool {
	return rcv._tab.MutateInt8Slot(50, int8(n))
}

func OnorbitThrusterStatus_FullStart(builder *flatbuffers.Builder) {
	builder.StartObject(24)
}
func OnorbitThrusterStatus_FullAddId(builder *flatbuffers.Builder, id flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(id), 0)
}
func OnorbitThrusterStatus_FullAddClassificationMarking(builder *flatbuffers.Builder, classificationMarking flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(classificationMarking), 0)
}
func OnorbitThrusterStatus_FullAddIdOnorbitThruster(builder *flatbuffers.Builder, idOnorbitThruster flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(idOnorbitThruster), 0)
}
func OnorbitThrusterStatus_FullAddName(builder *flatbuffers.Builder, name flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(3, flatbuffers.UOffsetT(name), 0)
}
func OnorbitThrusterStatus_FullAddStatusTime(builder *flatbuffers.Builder, statusTime flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(4, flatbuffers.UOffsetT(statusTime), 0)
}
func OnorbitThrusterStatus_FullAddPropMassMin(builder *flatbuffers.Builder, propMassMin float64) {
	builder.PrependFloat64Slot(5, propMassMin, 0.0)
}
func OnorbitThrusterStatus_FullAddPropMassAvg(builder *flatbuffers.Builder, propMassAvg float64) {
	builder.PrependFloat64Slot(6, propMassAvg, 0.0)
}
func OnorbitThrusterStatus_FullAddPropMassMedian(builder *flatbuffers.Builder, propMassMedian float64) {
	builder.PrependFloat64Slot(7, propMassMedian, 0.0)
}
func OnorbitThrusterStatus_FullAddPropMassMax(builder *flatbuffers.Builder, propMassMax float64) {
	builder.PrependFloat64Slot(8, propMassMax, 0.0)
}
func OnorbitThrusterStatus_FullAddFuelMass(builder *flatbuffers.Builder, fuelMass float64) {
	builder.PrependFloat64Slot(9, fuelMass, 0.0)
}
func OnorbitThrusterStatus_FullAddFuelMassUnc(builder *flatbuffers.Builder, fuelMassUnc float64) {
	builder.PrependFloat64Slot(10, fuelMassUnc, 0.0)
}
func OnorbitThrusterStatus_FullAddTotalDeltaV(builder *flatbuffers.Builder, totalDeltaV float64) {
	builder.PrependFloat64Slot(11, totalDeltaV, 0.0)
}
func OnorbitThrusterStatus_FullAddMinDeltaV(builder *flatbuffers.Builder, minDeltaV float64) {
	builder.PrependFloat64Slot(12, minDeltaV, 0.0)
}
func OnorbitThrusterStatus_FullAddEstDeltaV(builder *flatbuffers.Builder, estDeltaV float64) {
	builder.PrependFloat64Slot(13, estDeltaV, 0.0)
}
func OnorbitThrusterStatus_FullAddMaxDeltaV(builder *flatbuffers.Builder, maxDeltaV float64) {
	builder.PrependFloat64Slot(14, maxDeltaV, 0.0)
}
func OnorbitThrusterStatus_FullAddThrustMax(builder *flatbuffers.Builder, thrustMax float64) {
	builder.PrependFloat64Slot(15, thrustMax, 0.0)
}
func OnorbitThrusterStatus_FullAddIsp(builder *flatbuffers.Builder, isp float64) {
	builder.PrependFloat64Slot(16, isp, 0.0)
}
func OnorbitThrusterStatus_FullAddOperational(builder *flatbuffers.Builder, operational bool) {
	builder.PrependBoolSlot(17, operational, false)
}
func OnorbitThrusterStatus_FullAddCreatedAt(builder *flatbuffers.Builder, createdAt flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(18, flatbuffers.UOffsetT(createdAt), 0)
}
func OnorbitThrusterStatus_FullAddCreatedBy(builder *flatbuffers.Builder, createdBy flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(19, flatbuffers.UOffsetT(createdBy), 0)
}
func OnorbitThrusterStatus_FullAddSource(builder *flatbuffers.Builder, source flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(20, flatbuffers.UOffsetT(source), 0)
}
func OnorbitThrusterStatus_FullAddOrigin(builder *flatbuffers.Builder, origin flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(21, flatbuffers.UOffsetT(origin), 0)
}
func OnorbitThrusterStatus_FullAddOrigNetwork(builder *flatbuffers.Builder, origNetwork flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(22, flatbuffers.UOffsetT(origNetwork), 0)
}
func OnorbitThrusterStatus_FullAddDataMode(builder *flatbuffers.Builder, dataMode OnorbitThrusterStatus_Full_dataMode_Enum) {
	builder.PrependInt8Slot(23, int8(dataMode), 0)
}
func OnorbitThrusterStatus_FullEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
