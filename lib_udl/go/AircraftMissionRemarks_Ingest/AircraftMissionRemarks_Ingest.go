// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package AircraftMissionRemarks_Ingest

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

/// /// Collection of Remarks associated with this Air Transport Mission.
type AircraftMissionRemarks_Ingest struct {
	_tab flatbuffers.Table
}

const AircraftMissionRemarks_IngestIdentifier = "AIRC"

func GetRootAsAircraftMissionRemarks_Ingest(buf []byte, offset flatbuffers.UOffsetT) *AircraftMissionRemarks_Ingest {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &AircraftMissionRemarks_Ingest{}
	x.Init(buf, n+offset)
	return x
}

func FinishAircraftMissionRemarks_IngestBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	identifierBytes := []byte(AircraftMissionRemarks_IngestIdentifier)
	builder.FinishWithFileIdentifier(offset, identifierBytes)
}

func AircraftMissionRemarks_IngestBufferHasIdentifier(buf []byte) bool {
	return flatbuffers.BufferHasIdentifier(buf, AircraftMissionRemarks_IngestIdentifier)
}

func GetSizePrefixedRootAsAircraftMissionRemarks_Ingest(buf []byte, offset flatbuffers.UOffsetT) *AircraftMissionRemarks_Ingest {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &AircraftMissionRemarks_Ingest{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedAircraftMissionRemarks_IngestBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	identifierBytes := []byte(AircraftMissionRemarks_IngestIdentifier)
	builder.FinishSizePrefixedWithFileIdentifier(offset, identifierBytes)
}

func SizePrefixedAircraftMissionRemarks_IngestBufferHasIdentifier(buf []byte) bool {
	return flatbuffers.SizePrefixedBufferHasIdentifier(buf, AircraftMissionRemarks_IngestIdentifier)
}

func (rcv *AircraftMissionRemarks_Ingest) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *AircraftMissionRemarks_Ingest) Table() flatbuffers.Table {
	return rcv._tab
}

/// Global Decision Support System (GDSS) remark identifier.
/// Example: /// Example: GDSSREMARK-ID
/// Constraints: Minimum length = 0, Maximum length = 36
func (rcv *AircraftMissionRemarks_Ingest) GdssRemarkId() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Global Decision Support System (GDSS) remark identifier.
/// Example: /// Example: GDSSREMARK-ID
/// Constraints: Minimum length = 0, Maximum length = 36
/// Remark type.
/// Example: /// Example: MP
/// Constraints: Minimum length = 0, Maximum length = 20
func (rcv *AircraftMissionRemarks_Ingest) Type() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Remark type.
/// Example: /// Example: MP
/// Constraints: Minimum length = 0, Maximum length = 20
/// Text of the remark.
/// Example: /// Example: Example mission remarks.
/// Constraints: Minimum length = 0, Maximum length = 1024
func (rcv *AircraftMissionRemarks_Ingest) Text() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Text of the remark.
/// Example: /// Example: Example mission remarks.
/// Constraints: Minimum length = 0, Maximum length = 1024
/// Date the remark was published, in ISO 8601 UTC format, with millisecond precision.
/// Example: /// Example: 2022-01-01T16:00:00.123Z
/// Constraints: No constraints specified.
func (rcv *AircraftMissionRemarks_Ingest) Date() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Date the remark was published, in ISO 8601 UTC format, with millisecond precision.
/// Example: /// Example: 2022-01-01T16:00:00.123Z
/// Constraints: No constraints specified.
/// User who published the remark.
/// Example: /// Example: John Doe
/// Constraints: Minimum length = 0, Maximum length = 20
func (rcv *AircraftMissionRemarks_Ingest) User() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// User who published the remark.
/// Example: /// Example: John Doe
/// Constraints: Minimum length = 0, Maximum length = 20
/// If the remark is sortie specific, this is the number of the sortie it applies to.
/// Example: /// Example: 825
/// Constraints: No constraints specified.
func (rcv *AircraftMissionRemarks_Ingest) ItineraryNum() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

/// If the remark is sortie specific, this is the number of the sortie it applies to.
/// Example: /// Example: 825
/// Constraints: No constraints specified.
func (rcv *AircraftMissionRemarks_Ingest) MutateItineraryNum(n int32) bool {
	return rcv._tab.MutateInt32Slot(14, n)
}

func AircraftMissionRemarks_IngestStart(builder *flatbuffers.Builder) {
	builder.StartObject(6)
}
func AircraftMissionRemarks_IngestAddGdssRemarkId(builder *flatbuffers.Builder, gdssRemarkId flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(gdssRemarkId), 0)
}
func AircraftMissionRemarks_IngestAddType(builder *flatbuffers.Builder, type_ flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(type_), 0)
}
func AircraftMissionRemarks_IngestAddText(builder *flatbuffers.Builder, text flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(text), 0)
}
func AircraftMissionRemarks_IngestAddDate(builder *flatbuffers.Builder, date flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(3, flatbuffers.UOffsetT(date), 0)
}
func AircraftMissionRemarks_IngestAddUser(builder *flatbuffers.Builder, user flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(4, flatbuffers.UOffsetT(user), 0)
}
func AircraftMissionRemarks_IngestAddItineraryNum(builder *flatbuffers.Builder, itineraryNum int32) {
	builder.PrependInt32Slot(5, itineraryNum, 0)
}
func AircraftMissionRemarks_IngestEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
