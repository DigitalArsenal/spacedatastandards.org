// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package MissileTrackVector_Ingest

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

/// /// Schema for Missile Track Vector data.
type MissileTrackVector_Ingest struct {
	_tab flatbuffers.Table
}

const MissileTrackVector_IngestIdentifier = "MISS"

func GetRootAsMissileTrackVector_Ingest(buf []byte, offset flatbuffers.UOffsetT) *MissileTrackVector_Ingest {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &MissileTrackVector_Ingest{}
	x.Init(buf, n+offset)
	return x
}

func FinishMissileTrackVector_IngestBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	identifierBytes := []byte(MissileTrackVector_IngestIdentifier)
	builder.FinishWithFileIdentifier(offset, identifierBytes)
}

func MissileTrackVector_IngestBufferHasIdentifier(buf []byte) bool {
	return flatbuffers.BufferHasIdentifier(buf, MissileTrackVector_IngestIdentifier)
}

func GetSizePrefixedRootAsMissileTrackVector_Ingest(buf []byte, offset flatbuffers.UOffsetT) *MissileTrackVector_Ingest {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &MissileTrackVector_Ingest{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedMissileTrackVector_IngestBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	identifierBytes := []byte(MissileTrackVector_IngestIdentifier)
	builder.FinishSizePrefixedWithFileIdentifier(offset, identifierBytes)
}

func SizePrefixedMissileTrackVector_IngestBufferHasIdentifier(buf []byte) bool {
	return flatbuffers.SizePrefixedBufferHasIdentifier(buf, MissileTrackVector_IngestIdentifier)
}

func (rcv *MissileTrackVector_Ingest) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *MissileTrackVector_Ingest) Table() flatbuffers.Table {
	return rcv._tab
}

/// Type of vector represented (e.g. LOS, PREDICTED, STATE).
/// Example: /// Example: STATE
/// Constraints: Minimum length = 0, Maximum length = 16
func (rcv *MissileTrackVector_Ingest) Type() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Type of vector represented (e.g. LOS, PREDICTED, STATE).
/// Example: /// Example: STATE
/// Constraints: Minimum length = 0, Maximum length = 16
/// Object to which this vector applies.
/// Example: /// Example: TARGET
/// Constraints: Minimum length = 0, Maximum length = 16
func (rcv *MissileTrackVector_Ingest) Object() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Object to which this vector applies.
/// Example: /// Example: TARGET
/// Constraints: Minimum length = 0, Maximum length = 16
/// Vector timestamp in ISO8601 UTC format, with microsecond precision.
/// Example: /// Example: 2024-03-30T15:02:39.346768Z
/// Constraints: No constraints specified.
func (rcv *MissileTrackVector_Ingest) Epoch() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Vector timestamp in ISO8601 UTC format, with microsecond precision.
/// Example: /// Example: 2024-03-30T15:02:39.346768Z
/// Constraints: No constraints specified.
/// Unique identifier of the reporting sensor of the object.
/// Example: /// Example: a7e99418-b6d6-29ab-e767-440a989cce26
/// Constraints: Minimum length = 0, Maximum length = 36
func (rcv *MissileTrackVector_Ingest) IdSensor() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Unique identifier of the reporting sensor of the object.
/// Example: /// Example: a7e99418-b6d6-29ab-e767-440a989cce26
/// Constraints: Minimum length = 0, Maximum length = 36
/// Optional identifier provided by the source to indicate the reporting sensor of the object. This may be an internal identifier and not necessarily a valid sensor ID.
/// Example: /// Example: ORIGSENSOR-ID
/// Constraints: Minimum length = 0, Maximum length = 46
func (rcv *MissileTrackVector_Ingest) OrigSensorId() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Optional identifier provided by the source to indicate the reporting sensor of the object. This may be an internal identifier and not necessarily a valid sensor ID.
/// Example: /// Example: ORIGSENSOR-ID
/// Constraints: Minimum length = 0, Maximum length = 46
/// Three element array, expressing the cartesian position vector of the target object, in kilometers, in the specified referenceFrame. If referenceFrame is null then ECEF should be assumed. The array element order is [x, y, z].
/// Example: /// Example: [-1456.91592, -2883.54041, 6165.55186]
/// Constraints: No constraints specified.
func (rcv *MissileTrackVector_Ingest) Pos(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *MissileTrackVector_Ingest) PosLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

/// Three element array, expressing the cartesian position vector of the target object, in kilometers, in the specified referenceFrame. If referenceFrame is null then ECEF should be assumed. The array element order is [x, y, z].
/// Example: /// Example: [-1456.91592, -2883.54041, 6165.55186]
/// Constraints: No constraints specified.
/// Three element array, expressing the cartesian velocity vector of the target object, in kilometers/second, in the specified referenceFrame. If referenceFrame is null then ECEF should be assumed. The array element order is [x', y', z'].
/// Example: /// Example: [-1.21981, -6.60208, -3.36515]
/// Constraints: No constraints specified.
func (rcv *MissileTrackVector_Ingest) Vel(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *MissileTrackVector_Ingest) VelLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

/// Three element array, expressing the cartesian velocity vector of the target object, in kilometers/second, in the specified referenceFrame. If referenceFrame is null then ECEF should be assumed. The array element order is [x', y', z'].
/// Example: /// Example: [-1.21981, -6.60208, -3.36515]
/// Constraints: No constraints specified.
/// Three element array, expressing the cartesian acceleration vector of the target object, in kilometers/second^2, in the specified referenceFrame. If referenceFrame is null then ECEF should be assumed. The array element order is [x'', y'', z''].
/// Example: /// Example: [0.59236, -0.03537, 0.35675]
/// Constraints: No constraints specified.
func (rcv *MissileTrackVector_Ingest) Accel(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(18))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *MissileTrackVector_Ingest) AccelLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(18))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

/// Three element array, expressing the cartesian acceleration vector of the target object, in kilometers/second^2, in the specified referenceFrame. If referenceFrame is null then ECEF should be assumed. The array element order is [x'', y'', z''].
/// Example: /// Example: [0.59236, -0.03537, 0.35675]
/// Constraints: No constraints specified.
/// Track object course, in degrees clockwise from true north.
/// Example: /// Example: 7.3580153
/// Constraints: No constraints specified.
func (rcv *MissileTrackVector_Ingest) Course() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(20))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Track object course, in degrees clockwise from true north.
/// Example: /// Example: 7.3580153
/// Constraints: No constraints specified.
func (rcv *MissileTrackVector_Ingest) MutateCourse(n float64) bool {
	return rcv._tab.MutateFloat64Slot(20, n)
}

/// Track object speed, in kilometers/sec.
/// Example: /// Example: 15.03443
/// Constraints: No constraints specified.
func (rcv *MissileTrackVector_Ingest) Spd() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(22))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Track object speed, in kilometers/sec.
/// Example: /// Example: 15.03443
/// Constraints: No constraints specified.
func (rcv *MissileTrackVector_Ingest) MutateSpd(n float64) bool {
	return rcv._tab.MutateFloat64Slot(22, n)
}

/// The reference frame of the cartesian vector (ECEF, J2000). If the referenceFrame is null it is assumed to be ECEF.
/// Example: /// Example: ECEF
/// Constraints: Minimum length = 0, Maximum length = 24
func (rcv *MissileTrackVector_Ingest) ReferenceFrame() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(24))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The reference frame of the cartesian vector (ECEF, J2000). If the referenceFrame is null it is assumed to be ECEF.
/// Example: /// Example: ECEF
/// Constraints: Minimum length = 0, Maximum length = 24
/// Covariance matrix, in kilometer and second based units, in the specified covReferenceFrame.
/// If the covReferenceFrame is null it is assumed to be UVW. The array values (1-45) represent the upper triangular half of the position-velocity-acceleration covariance matrix.
/// The covariance elements are position dependent within the array with values ordered as follows:
/// &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;x&nbsp;&nbsp;&nbsp;&nbsp;y&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;z&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;x'&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;y'&nbsp;&nbsp;&nbsp;&nbsp;z'&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;x"&nbsp;&nbsp;&nbsp;&nbsp;y"&nbsp;&nbsp;&nbsp;&nbsp;z"
/// x&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1&nbsp;&nbsp;&nbsp;&nbsp;2&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;3&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;4&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;5&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;6&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;7&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;8&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;9
/// y&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;10&nbsp;&nbsp;&nbsp;11&nbsp;&nbsp;&nbsp;12&nbsp;&nbsp;&nbsp;13&nbsp;&nbsp;&nbsp;14&nbsp;&nbsp;&nbsp;15&nbsp;&nbsp;&nbsp;16&nbsp;&nbsp;&nbsp;17
/// z&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;18&nbsp;&nbsp;&nbsp;19&nbsp;&nbsp;&nbsp;20&nbsp;&nbsp;&nbsp;21&nbsp;&nbsp;&nbsp;22&nbsp;&nbsp;&nbsp;23&nbsp;&nbsp;&nbsp;24
/// x'&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;25&nbsp;&nbsp;&nbsp;26&nbsp;&nbsp;&nbsp;27&nbsp;&nbsp;&nbsp;28&nbsp;&nbsp;&nbsp;29&nbsp;&nbsp;&nbsp;30
/// y'&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;31&nbsp;&nbsp;&nbsp;32&nbsp;&nbsp;&nbsp;33&nbsp;&nbsp;&nbsp;34&nbsp;&nbsp;&nbsp;35
/// z'&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;36&nbsp;&nbsp;&nbsp;37&nbsp;&nbsp;&nbsp;38&nbsp;&nbsp;&nbsp;39
/// x"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;40&nbsp;&nbsp;&nbsp;41&nbsp;&nbsp;&nbsp;42
/// y"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;43&nbsp;&nbsp;&nbsp;44
/// z"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;45
/// The cov array should contain only the upper right triangle values from top left down to bottom right, in order.
/// Example: /// Example: [1.1, 2.2, 3.3]
/// Constraints: No constraints specified.
func (rcv *MissileTrackVector_Ingest) Cov(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(26))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *MissileTrackVector_Ingest) CovLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(26))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

/// Covariance matrix, in kilometer and second based units, in the specified covReferenceFrame.
/// If the covReferenceFrame is null it is assumed to be UVW. The array values (1-45) represent the upper triangular half of the position-velocity-acceleration covariance matrix.
/// The covariance elements are position dependent within the array with values ordered as follows:
/// &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;x&nbsp;&nbsp;&nbsp;&nbsp;y&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;z&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;x'&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;y'&nbsp;&nbsp;&nbsp;&nbsp;z'&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;x"&nbsp;&nbsp;&nbsp;&nbsp;y"&nbsp;&nbsp;&nbsp;&nbsp;z"
/// x&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1&nbsp;&nbsp;&nbsp;&nbsp;2&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;3&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;4&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;5&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;6&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;7&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;8&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;9
/// y&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;10&nbsp;&nbsp;&nbsp;11&nbsp;&nbsp;&nbsp;12&nbsp;&nbsp;&nbsp;13&nbsp;&nbsp;&nbsp;14&nbsp;&nbsp;&nbsp;15&nbsp;&nbsp;&nbsp;16&nbsp;&nbsp;&nbsp;17
/// z&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;18&nbsp;&nbsp;&nbsp;19&nbsp;&nbsp;&nbsp;20&nbsp;&nbsp;&nbsp;21&nbsp;&nbsp;&nbsp;22&nbsp;&nbsp;&nbsp;23&nbsp;&nbsp;&nbsp;24
/// x'&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;25&nbsp;&nbsp;&nbsp;26&nbsp;&nbsp;&nbsp;27&nbsp;&nbsp;&nbsp;28&nbsp;&nbsp;&nbsp;29&nbsp;&nbsp;&nbsp;30
/// y'&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;31&nbsp;&nbsp;&nbsp;32&nbsp;&nbsp;&nbsp;33&nbsp;&nbsp;&nbsp;34&nbsp;&nbsp;&nbsp;35
/// z'&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;36&nbsp;&nbsp;&nbsp;37&nbsp;&nbsp;&nbsp;38&nbsp;&nbsp;&nbsp;39
/// x"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;40&nbsp;&nbsp;&nbsp;41&nbsp;&nbsp;&nbsp;42
/// y"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;43&nbsp;&nbsp;&nbsp;44
/// z"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;45
/// The cov array should contain only the upper right triangle values from top left down to bottom right, in order.
/// Example: /// Example: [1.1, 2.2, 3.3]
/// Constraints: No constraints specified.
/// The reference frame of the covariance elements (ECEF, J2000, UVW). If the referenceFrame is null it is assumed to be UVW.
/// Example: /// Example: ECEF
/// Constraints: Minimum length = 0, Maximum length = 24
func (rcv *MissileTrackVector_Ingest) CovReferenceFrame() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(28))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The reference frame of the covariance elements (ECEF, J2000, UVW). If the referenceFrame is null it is assumed to be UVW.
/// Example: /// Example: ECEF
/// Constraints: Minimum length = 0, Maximum length = 24
/// WGS-84 object latitude subpoint at epoch, represented as -90 to 90 degrees (negative values south of equator).
/// Example: /// Example: 45.0
/// Constraints: No constraints specified.
func (rcv *MissileTrackVector_Ingest) VectorLat() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(30))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// WGS-84 object latitude subpoint at epoch, represented as -90 to 90 degrees (negative values south of equator).
/// Example: /// Example: 45.0
/// Constraints: No constraints specified.
func (rcv *MissileTrackVector_Ingest) MutateVectorLat(n float64) bool {
	return rcv._tab.MutateFloat64Slot(30, n)
}

/// WGS-84 object longitude subpoint at epoch, represented as -180 to 180 degrees (negative values west of Prime Meridian).
/// Example: /// Example: 150.0
/// Constraints: No constraints specified.
func (rcv *MissileTrackVector_Ingest) VectorLon() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(32))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// WGS-84 object longitude subpoint at epoch, represented as -180 to 180 degrees (negative values west of Prime Meridian).
/// Example: /// Example: 150.0
/// Constraints: No constraints specified.
func (rcv *MissileTrackVector_Ingest) MutateVectorLon(n float64) bool {
	return rcv._tab.MutateFloat64Slot(32, n)
}

/// Object altitude at epoch, expressed in kilometers above WGS-84 ellipsoid.
/// Example: /// Example: 25.0
/// Constraints: No constraints specified.
func (rcv *MissileTrackVector_Ingest) VectorAlt() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(34))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Object altitude at epoch, expressed in kilometers above WGS-84 ellipsoid.
/// Example: /// Example: 25.0
/// Constraints: No constraints specified.
func (rcv *MissileTrackVector_Ingest) MutateVectorAlt(n float64) bool {
	return rcv._tab.MutateFloat64Slot(34, n)
}

/// Confidence of the vector, 0-100.
/// Example: /// Example: 100
/// Constraints: No constraints specified.
func (rcv *MissileTrackVector_Ingest) Confidence() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(36))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

/// Confidence of the vector, 0-100.
/// Example: /// Example: 100
/// Constraints: No constraints specified.
func (rcv *MissileTrackVector_Ingest) MutateConfidence(n int32) bool {
	return rcv._tab.MutateInt32Slot(36, n)
}

/// Status of the vector (e.g. INITIAL, UPDATE).
/// Example: /// Example: INITIAL
/// Constraints: Minimum length = 0, Maximum length = 24
func (rcv *MissileTrackVector_Ingest) Status() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(38))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Status of the vector (e.g. INITIAL, UPDATE).
/// Example: /// Example: INITIAL
/// Constraints: Minimum length = 0, Maximum length = 24
/// Source of the time value.
/// Example: /// Example: Sensor 1
/// Constraints: Minimum length = 0, Maximum length = 24
func (rcv *MissileTrackVector_Ingest) TimeSource() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(40))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Source of the time value.
/// Example: /// Example: Sensor 1
/// Constraints: Minimum length = 0, Maximum length = 24
/// The quaternion describing the attitude of the spacecraft with respect to the reference frame listed in the 'referenceFrame' field. The array element order convention is the three vector components, followed by the scalar component.
/// Example: /// Example: [0.03, 0.02, 0.01, 0.012]
/// Constraints: No constraints specified.
func (rcv *MissileTrackVector_Ingest) Quat(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(42))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *MissileTrackVector_Ingest) QuatLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(42))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

/// The quaternion describing the attitude of the spacecraft with respect to the reference frame listed in the 'referenceFrame' field. The array element order convention is the three vector components, followed by the scalar component.
/// Example: /// Example: [0.03, 0.02, 0.01, 0.012]
/// Constraints: No constraints specified.
/// The flight azimuth associated with the current state vector (0-360 degrees).
/// Example: /// Example: 45.23
/// Constraints: No constraints specified.
func (rcv *MissileTrackVector_Ingest) FlightAz() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(44))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// The flight azimuth associated with the current state vector (0-360 degrees).
/// Example: /// Example: 45.23
/// Constraints: No constraints specified.
func (rcv *MissileTrackVector_Ingest) MutateFlightAz(n float64) bool {
	return rcv._tab.MutateFloat64Slot(44, n)
}

func MissileTrackVector_IngestStart(builder *flatbuffers.Builder) {
	builder.StartObject(21)
}
func MissileTrackVector_IngestAddType(builder *flatbuffers.Builder, type_ flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(type_), 0)
}
func MissileTrackVector_IngestAddObject(builder *flatbuffers.Builder, object flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(object), 0)
}
func MissileTrackVector_IngestAddEpoch(builder *flatbuffers.Builder, epoch flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(epoch), 0)
}
func MissileTrackVector_IngestAddIdSensor(builder *flatbuffers.Builder, idSensor flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(3, flatbuffers.UOffsetT(idSensor), 0)
}
func MissileTrackVector_IngestAddOrigSensorId(builder *flatbuffers.Builder, origSensorId flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(4, flatbuffers.UOffsetT(origSensorId), 0)
}
func MissileTrackVector_IngestAddPos(builder *flatbuffers.Builder, pos flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(5, flatbuffers.UOffsetT(pos), 0)
}
func MissileTrackVector_IngestStartPosVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func MissileTrackVector_IngestAddVel(builder *flatbuffers.Builder, vel flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(6, flatbuffers.UOffsetT(vel), 0)
}
func MissileTrackVector_IngestStartVelVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func MissileTrackVector_IngestAddAccel(builder *flatbuffers.Builder, accel flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(7, flatbuffers.UOffsetT(accel), 0)
}
func MissileTrackVector_IngestStartAccelVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func MissileTrackVector_IngestAddCourse(builder *flatbuffers.Builder, course float64) {
	builder.PrependFloat64Slot(8, course, 0.0)
}
func MissileTrackVector_IngestAddSpd(builder *flatbuffers.Builder, spd float64) {
	builder.PrependFloat64Slot(9, spd, 0.0)
}
func MissileTrackVector_IngestAddReferenceFrame(builder *flatbuffers.Builder, referenceFrame flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(10, flatbuffers.UOffsetT(referenceFrame), 0)
}
func MissileTrackVector_IngestAddCov(builder *flatbuffers.Builder, cov flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(11, flatbuffers.UOffsetT(cov), 0)
}
func MissileTrackVector_IngestStartCovVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func MissileTrackVector_IngestAddCovReferenceFrame(builder *flatbuffers.Builder, covReferenceFrame flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(12, flatbuffers.UOffsetT(covReferenceFrame), 0)
}
func MissileTrackVector_IngestAddVectorLat(builder *flatbuffers.Builder, vectorLat float64) {
	builder.PrependFloat64Slot(13, vectorLat, 0.0)
}
func MissileTrackVector_IngestAddVectorLon(builder *flatbuffers.Builder, vectorLon float64) {
	builder.PrependFloat64Slot(14, vectorLon, 0.0)
}
func MissileTrackVector_IngestAddVectorAlt(builder *flatbuffers.Builder, vectorAlt float64) {
	builder.PrependFloat64Slot(15, vectorAlt, 0.0)
}
func MissileTrackVector_IngestAddConfidence(builder *flatbuffers.Builder, confidence int32) {
	builder.PrependInt32Slot(16, confidence, 0)
}
func MissileTrackVector_IngestAddStatus(builder *flatbuffers.Builder, status flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(17, flatbuffers.UOffsetT(status), 0)
}
func MissileTrackVector_IngestAddTimeSource(builder *flatbuffers.Builder, timeSource flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(18, flatbuffers.UOffsetT(timeSource), 0)
}
func MissileTrackVector_IngestAddQuat(builder *flatbuffers.Builder, quat flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(19, flatbuffers.UOffsetT(quat), 0)
}
func MissileTrackVector_IngestStartQuatVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func MissileTrackVector_IngestAddFlightAz(builder *flatbuffers.Builder, flightAz float64) {
	builder.PrependFloat64Slot(20, flightAz, 0.0)
}
func MissileTrackVector_IngestEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
