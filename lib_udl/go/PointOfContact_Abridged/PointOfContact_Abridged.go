// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package PointOfContact_Abridged

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

/// /// Point of contacts for scheduling or modifying the route.
type PointOfContact_Abridged struct {
	_tab flatbuffers.Table
}

const PointOfContact_AbridgedIdentifier = "POIN"

func GetRootAsPointOfContact_Abridged(buf []byte, offset flatbuffers.UOffsetT) *PointOfContact_Abridged {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &PointOfContact_Abridged{}
	x.Init(buf, n+offset)
	return x
}

func FinishPointOfContact_AbridgedBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	identifierBytes := []byte(PointOfContact_AbridgedIdentifier)
	builder.FinishWithFileIdentifier(offset, identifierBytes)
}

func PointOfContact_AbridgedBufferHasIdentifier(buf []byte) bool {
	return flatbuffers.BufferHasIdentifier(buf, PointOfContact_AbridgedIdentifier)
}

func GetSizePrefixedRootAsPointOfContact_Abridged(buf []byte, offset flatbuffers.UOffsetT) *PointOfContact_Abridged {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &PointOfContact_Abridged{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedPointOfContact_AbridgedBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	identifierBytes := []byte(PointOfContact_AbridgedIdentifier)
	builder.FinishSizePrefixedWithFileIdentifier(offset, identifierBytes)
}

func SizePrefixedPointOfContact_AbridgedBufferHasIdentifier(buf []byte) bool {
	return flatbuffers.SizePrefixedBufferHasIdentifier(buf, PointOfContact_AbridgedIdentifier)
}

func (rcv *PointOfContact_Abridged) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *PointOfContact_Abridged) Table() flatbuffers.Table {
	return rcv._tab
}

/// Sequencing field for point of contact.
/// Example: /// Example: 1
/// Constraints: No constraints specified.
func (rcv *PointOfContact_Abridged) PocSequenceId() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

/// Sequencing field for point of contact.
/// Example: /// Example: 1
/// Constraints: No constraints specified.
func (rcv *PointOfContact_Abridged) MutatePocSequenceId(n int32) bool {
	return rcv._tab.MutateInt32Slot(4, n)
}

/// A code or name that represents the contact's role in association to the track route (ex. Originator, Scheduler, Maintainer, etc.).
/// Example: /// Example: Originator
/// Constraints: Minimum length = 0, Maximum length = 36
func (rcv *PointOfContact_Abridged) PocTypeName() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// A code or name that represents the contact's role in association to the track route (ex. Originator, Scheduler, Maintainer, etc.).
/// Example: /// Example: Originator
/// Constraints: Minimum length = 0, Maximum length = 36
/// The name of the contact.
/// Example: /// Example: Fred Smith
/// Constraints: Minimum length = 0, Maximum length = 36
func (rcv *PointOfContact_Abridged) PocName() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The name of the contact.
/// Example: /// Example: Fred Smith
/// Constraints: Minimum length = 0, Maximum length = 36
/// Office name for which the contact belongs.
/// Example: /// Example: A34
/// Constraints: Minimum length = 0, Maximum length = 36
func (rcv *PointOfContact_Abridged) Office() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Office name for which the contact belongs.
/// Example: /// Example: A34
/// Constraints: Minimum length = 0, Maximum length = 36
/// The username of the contact.
/// Example: /// Example: fgsmith
/// Constraints: Minimum length = 0, Maximum length = 64
func (rcv *PointOfContact_Abridged) Username() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The username of the contact.
/// Example: /// Example: fgsmith
/// Constraints: Minimum length = 0, Maximum length = 64
/// The rank of contact.
/// Example: /// Example: Capt
/// Constraints: Minimum length = 0, Maximum length = 32
func (rcv *PointOfContact_Abridged) Rank() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The rank of contact.
/// Example: /// Example: Capt
/// Constraints: Minimum length = 0, Maximum length = 32
/// Organization name for which the contact belongs.
/// Example: /// Example: HQAF
/// Constraints: Minimum length = 0, Maximum length = 36
func (rcv *PointOfContact_Abridged) PocOrg() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Organization name for which the contact belongs.
/// Example: /// Example: HQAF
/// Constraints: Minimum length = 0, Maximum length = 36
/// Phone number of the contact.
/// Example: /// Example: 8675309
/// Constraints: Minimum length = 0, Maximum length = 45
func (rcv *PointOfContact_Abridged) Phone() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(18))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Phone number of the contact.
/// Example: /// Example: 8675309
/// Constraints: Minimum length = 0, Maximum length = 45
/// Text of the remark.
/// Example: /// Example: POC remark.
/// Constraints: Minimum length = 0, Maximum length = 1024
func (rcv *PointOfContact_Abridged) Remark() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(20))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Text of the remark.
/// Example: /// Example: POC remark.
/// Constraints: Minimum length = 0, Maximum length = 1024
func PointOfContact_AbridgedStart(builder *flatbuffers.Builder) {
	builder.StartObject(9)
}
func PointOfContact_AbridgedAddPocSequenceId(builder *flatbuffers.Builder, pocSequenceId int32) {
	builder.PrependInt32Slot(0, pocSequenceId, 0)
}
func PointOfContact_AbridgedAddPocTypeName(builder *flatbuffers.Builder, pocTypeName flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(pocTypeName), 0)
}
func PointOfContact_AbridgedAddPocName(builder *flatbuffers.Builder, pocName flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(pocName), 0)
}
func PointOfContact_AbridgedAddOffice(builder *flatbuffers.Builder, office flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(3, flatbuffers.UOffsetT(office), 0)
}
func PointOfContact_AbridgedAddUsername(builder *flatbuffers.Builder, username flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(4, flatbuffers.UOffsetT(username), 0)
}
func PointOfContact_AbridgedAddRank(builder *flatbuffers.Builder, rank flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(5, flatbuffers.UOffsetT(rank), 0)
}
func PointOfContact_AbridgedAddPocOrg(builder *flatbuffers.Builder, pocOrg flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(6, flatbuffers.UOffsetT(pocOrg), 0)
}
func PointOfContact_AbridgedAddPhone(builder *flatbuffers.Builder, phone flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(7, flatbuffers.UOffsetT(phone), 0)
}
func PointOfContact_AbridgedAddRemark(builder *flatbuffers.Builder, remark flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(8, flatbuffers.UOffsetT(remark), 0)
}
func PointOfContact_AbridgedEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
