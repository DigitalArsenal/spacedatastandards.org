// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package DiplomaticClearance_Full

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

/// /// A diplomatic clearance is an authorization for an aircraft to traverse or land within a specified country.
type DiplomaticClearance_Full struct {
	_tab flatbuffers.Table
}

const DiplomaticClearance_FullIdentifier = "DIPL"

func GetRootAsDiplomaticClearance_Full(buf []byte, offset flatbuffers.UOffsetT) *DiplomaticClearance_Full {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &DiplomaticClearance_Full{}
	x.Init(buf, n+offset)
	return x
}

func FinishDiplomaticClearance_FullBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	identifierBytes := []byte(DiplomaticClearance_FullIdentifier)
	builder.FinishWithFileIdentifier(offset, identifierBytes)
}

func DiplomaticClearance_FullBufferHasIdentifier(buf []byte) bool {
	return flatbuffers.BufferHasIdentifier(buf, DiplomaticClearance_FullIdentifier)
}

func GetSizePrefixedRootAsDiplomaticClearance_Full(buf []byte, offset flatbuffers.UOffsetT) *DiplomaticClearance_Full {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &DiplomaticClearance_Full{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedDiplomaticClearance_FullBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	identifierBytes := []byte(DiplomaticClearance_FullIdentifier)
	builder.FinishSizePrefixedWithFileIdentifier(offset, identifierBytes)
}

func SizePrefixedDiplomaticClearance_FullBufferHasIdentifier(buf []byte) bool {
	return flatbuffers.SizePrefixedBufferHasIdentifier(buf, DiplomaticClearance_FullIdentifier)
}

func (rcv *DiplomaticClearance_Full) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *DiplomaticClearance_Full) Table() flatbuffers.Table {
	return rcv._tab
}

/// Unique identifier of the record, auto-generated by the system if not provided on create operations.
/// Example: /// Example: 25059135-4afc-45c2-b78b-d6e843dbd96d
/// Constraints: Minimum length = 1, Maximum length = 36
func (rcv *DiplomaticClearance_Full) Id() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Unique identifier of the record, auto-generated by the system if not provided on create operations.
/// Example: /// Example: 25059135-4afc-45c2-b78b-d6e843dbd96d
/// Constraints: Minimum length = 1, Maximum length = 36
/// Classification marking of the data in IC/CAPCO Portion-marked format.
/// Example: /// Example: U
/// Constraints: Minimum length = 1, Maximum length = 128
func (rcv *DiplomaticClearance_Full) ClassificationMarking() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Classification marking of the data in IC/CAPCO Portion-marked format.
/// Example: /// Example: U
/// Constraints: Minimum length = 1, Maximum length = 128
/// Unique identifier of the Mission associated with this diplomatic clearance record.
/// Example: /// Example: 0dba1363-2d09-49fa-a784-4bb4cbb1674a
/// Constraints: Minimum length = 1, Maximum length = 36
func (rcv *DiplomaticClearance_Full) IdMission() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Unique identifier of the Mission associated with this diplomatic clearance record.
/// Example: /// Example: 0dba1363-2d09-49fa-a784-4bb4cbb1674a
/// Constraints: Minimum length = 1, Maximum length = 36
/// Optional diplomatic clearance worksheet ID from external systems. This field has no meaning within UDL and is provided as a convenience for systems that require tracking of an internal system generated ID.
/// Example: /// Example: 990ae849089e3d6cad69655324176bb6
/// Constraints: Minimum length = 0, Maximum length = 36
func (rcv *DiplomaticClearance_Full) ExternalWorksheetId() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Optional diplomatic clearance worksheet ID from external systems. This field has no meaning within UDL and is provided as a convenience for systems that require tracking of an internal system generated ID.
/// Example: /// Example: 990ae849089e3d6cad69655324176bb6
/// Constraints: Minimum length = 0, Maximum length = 36
/// Identifier of the Diplomatic Clearance Worksheet used to coordinate aircraft clearance requests.
/// Example: /// Example: G2-939911-AC
/// Constraints: Minimum length = 0, Maximum length = 256
func (rcv *DiplomaticClearance_Full) DipWorksheetName() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Identifier of the Diplomatic Clearance Worksheet used to coordinate aircraft clearance requests.
/// Example: /// Example: G2-939911-AC
/// Constraints: Minimum length = 0, Maximum length = 256
/// The First Departure Date (FDD) the mission is scheduled for departure, in ISO 8601 UTC format with millisecond precision.
/// Example: /// Example: 2024-01-01T01:01:01.123Z
/// Constraints: No constraints specified.
func (rcv *DiplomaticClearance_Full) FirstDepDate() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The First Departure Date (FDD) the mission is scheduled for departure, in ISO 8601 UTC format with millisecond precision.
/// Example: /// Example: 2024-01-01T01:01:01.123Z
/// Constraints: No constraints specified.
/// Suspense date for the diplomatic clearance worksheet to be worked, in ISO 8601 UTC format with millisecond precision.
/// Example: /// Example: 2024-01-01T01:01:01.123Z
/// Constraints: No constraints specified.
func (rcv *DiplomaticClearance_Full) DocDeadline() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Suspense date for the diplomatic clearance worksheet to be worked, in ISO 8601 UTC format with millisecond precision.
/// Example: /// Example: 2024-01-01T01:01:01.123Z
/// Constraints: No constraints specified.
/// The Aircraft and Personnel Automated Clearance System (APACS) system identifier used to process and approve this clearance request.
/// Example: /// Example: 1083034
/// Constraints: Minimum length = 0, Maximum length = 40
func (rcv *DiplomaticClearance_Full) ApacsId() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(18))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The Aircraft and Personnel Automated Clearance System (APACS) system identifier used to process and approve this clearance request.
/// Example: /// Example: 1083034
/// Constraints: Minimum length = 0, Maximum length = 40
/// Collection of diplomatic clearance details.
/// Example: /// Example: No example provided.
/// Constraints: No constraints specified.
func (rcv *DiplomaticClearance_Full) DiplomaticClearanceDetails(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(20))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *DiplomaticClearance_Full) DiplomaticClearanceDetailsLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(20))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

/// Collection of diplomatic clearance details.
/// Example: /// Example: No example provided.
/// Constraints: No constraints specified.
/// Collection of diplomatic clearance remarks.
/// Example: /// Example: No example provided.
/// Constraints: No constraints specified.
func (rcv *DiplomaticClearance_Full) DiplomaticClearanceRemarks(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(22))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *DiplomaticClearance_Full) DiplomaticClearanceRemarksLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(22))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

/// Collection of diplomatic clearance remarks.
/// Example: /// Example: No example provided.
/// Constraints: No constraints specified.
/// Time the row was created in the database, auto-populated by the system.
/// Example: /// Example: 2018-01-01T16:00:00.123Z
/// Constraints: No constraints specified.
func (rcv *DiplomaticClearance_Full) CreatedAt() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(24))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Time the row was created in the database, auto-populated by the system.
/// Example: /// Example: 2018-01-01T16:00:00.123Z
/// Constraints: No constraints specified.
/// Application user who created the row in the database, auto-populated by the system.
/// Example: /// Example: some.user
/// Constraints: Minimum length = 1, Maximum length = 64
func (rcv *DiplomaticClearance_Full) CreatedBy() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(26))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Application user who created the row in the database, auto-populated by the system.
/// Example: /// Example: some.user
/// Constraints: Minimum length = 1, Maximum length = 64
/// Time the row was updated in the database, auto-populated by the system.
/// Example: /// Example: 2018-01-01T16:00:00.123Z
/// Constraints: No constraints specified.
func (rcv *DiplomaticClearance_Full) UpdatedAt() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(28))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Time the row was updated in the database, auto-populated by the system.
/// Example: /// Example: 2018-01-01T16:00:00.123Z
/// Constraints: No constraints specified.
/// Application user who updated the row in the database, auto-populated by the system.
/// Example: /// Example: some.user
/// Constraints: Minimum length = 0, Maximum length = 64
func (rcv *DiplomaticClearance_Full) UpdatedBy() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(30))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Application user who updated the row in the database, auto-populated by the system.
/// Example: /// Example: some.user
/// Constraints: Minimum length = 0, Maximum length = 64
/// The source data library from which this record was received. This could be a remote or tactical UDL or another data library. If null, the record should be assumed to have originated from the primary Enterprise UDL.
/// Example: /// Example: AXE
/// Constraints: Minimum length = 0, Maximum length = 64
func (rcv *DiplomaticClearance_Full) SourceDl() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(32))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The source data library from which this record was received. This could be a remote or tactical UDL or another data library. If null, the record should be assumed to have originated from the primary Enterprise UDL.
/// Example: /// Example: AXE
/// Constraints: Minimum length = 0, Maximum length = 64
/// Source of the data.
/// Example: /// Example: Bluestaq
/// Constraints: Minimum length = 1, Maximum length = 64
func (rcv *DiplomaticClearance_Full) Source() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(34))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Source of the data.
/// Example: /// Example: Bluestaq
/// Constraints: Minimum length = 1, Maximum length = 64
/// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
/// Example: /// Example: THIRD_PARTY_DATASOURCE
/// Constraints: Minimum length = 0, Maximum length = 64
func (rcv *DiplomaticClearance_Full) Origin() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(36))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
/// Example: /// Example: THIRD_PARTY_DATASOURCE
/// Constraints: Minimum length = 0, Maximum length = 64
/// The originating source network on which this record was created, auto-populated by the system.
/// Example: /// Example: ORIG
/// Constraints: Minimum length = 0, Maximum length = 32
func (rcv *DiplomaticClearance_Full) OrigNetwork() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(38))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The originating source network on which this record was created, auto-populated by the system.
/// Example: /// Example: ORIG
/// Constraints: Minimum length = 0, Maximum length = 32
/// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
/// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
/// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
/// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
/// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
/// Example: /// Example: TEST
/// Constraints: Minimum length = 1, Maximum length = 32
func (rcv *DiplomaticClearance_Full) DataMode() DiplomaticClearance_Full_dataMode_Enum {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(40))
	if o != 0 {
		return DiplomaticClearance_Full_dataMode_Enum(rcv._tab.GetInt8(o + rcv._tab.Pos))
	}
	return 0
}

/// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
/// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
/// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
/// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
/// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
/// Example: /// Example: TEST
/// Constraints: Minimum length = 1, Maximum length = 32
func (rcv *DiplomaticClearance_Full) MutateDataMode(n DiplomaticClearance_Full_dataMode_Enum) bool {
	return rcv._tab.MutateInt8Slot(40, int8(n))
}

func DiplomaticClearance_FullStart(builder *flatbuffers.Builder) {
	builder.StartObject(19)
}
func DiplomaticClearance_FullAddId(builder *flatbuffers.Builder, id flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(id), 0)
}
func DiplomaticClearance_FullAddClassificationMarking(builder *flatbuffers.Builder, classificationMarking flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(classificationMarking), 0)
}
func DiplomaticClearance_FullAddIdMission(builder *flatbuffers.Builder, idMission flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(idMission), 0)
}
func DiplomaticClearance_FullAddExternalWorksheetId(builder *flatbuffers.Builder, externalWorksheetId flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(3, flatbuffers.UOffsetT(externalWorksheetId), 0)
}
func DiplomaticClearance_FullAddDipWorksheetName(builder *flatbuffers.Builder, dipWorksheetName flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(4, flatbuffers.UOffsetT(dipWorksheetName), 0)
}
func DiplomaticClearance_FullAddFirstDepDate(builder *flatbuffers.Builder, firstDepDate flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(5, flatbuffers.UOffsetT(firstDepDate), 0)
}
func DiplomaticClearance_FullAddDocDeadline(builder *flatbuffers.Builder, docDeadline flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(6, flatbuffers.UOffsetT(docDeadline), 0)
}
func DiplomaticClearance_FullAddApacsId(builder *flatbuffers.Builder, apacsId flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(7, flatbuffers.UOffsetT(apacsId), 0)
}
func DiplomaticClearance_FullAddDiplomaticClearanceDetails(builder *flatbuffers.Builder, diplomaticClearanceDetails flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(8, flatbuffers.UOffsetT(diplomaticClearanceDetails), 0)
}
func DiplomaticClearance_FullStartDiplomaticClearanceDetailsVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func DiplomaticClearance_FullAddDiplomaticClearanceRemarks(builder *flatbuffers.Builder, diplomaticClearanceRemarks flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(9, flatbuffers.UOffsetT(diplomaticClearanceRemarks), 0)
}
func DiplomaticClearance_FullStartDiplomaticClearanceRemarksVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func DiplomaticClearance_FullAddCreatedAt(builder *flatbuffers.Builder, createdAt flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(10, flatbuffers.UOffsetT(createdAt), 0)
}
func DiplomaticClearance_FullAddCreatedBy(builder *flatbuffers.Builder, createdBy flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(11, flatbuffers.UOffsetT(createdBy), 0)
}
func DiplomaticClearance_FullAddUpdatedAt(builder *flatbuffers.Builder, updatedAt flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(12, flatbuffers.UOffsetT(updatedAt), 0)
}
func DiplomaticClearance_FullAddUpdatedBy(builder *flatbuffers.Builder, updatedBy flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(13, flatbuffers.UOffsetT(updatedBy), 0)
}
func DiplomaticClearance_FullAddSourceDl(builder *flatbuffers.Builder, sourceDl flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(14, flatbuffers.UOffsetT(sourceDl), 0)
}
func DiplomaticClearance_FullAddSource(builder *flatbuffers.Builder, source flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(15, flatbuffers.UOffsetT(source), 0)
}
func DiplomaticClearance_FullAddOrigin(builder *flatbuffers.Builder, origin flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(16, flatbuffers.UOffsetT(origin), 0)
}
func DiplomaticClearance_FullAddOrigNetwork(builder *flatbuffers.Builder, origNetwork flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(17, flatbuffers.UOffsetT(origNetwork), 0)
}
func DiplomaticClearance_FullAddDataMode(builder *flatbuffers.Builder, dataMode DiplomaticClearance_Full_dataMode_Enum) {
	builder.PrependInt8Slot(18, int8(dataMode), 0)
}
func DiplomaticClearance_FullEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
