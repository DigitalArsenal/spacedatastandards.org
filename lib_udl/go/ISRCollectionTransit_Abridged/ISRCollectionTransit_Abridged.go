// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package ISRCollectionTransit_Abridged

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

/// /// Object for data dissemination.
type ISRCollectionTransit_Abridged struct {
	_tab flatbuffers.Table
}

const ISRCollectionTransit_AbridgedIdentifier = "ISRC"

func GetRootAsISRCollectionTransit_Abridged(buf []byte, offset flatbuffers.UOffsetT) *ISRCollectionTransit_Abridged {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &ISRCollectionTransit_Abridged{}
	x.Init(buf, n+offset)
	return x
}

func FinishISRCollectionTransit_AbridgedBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	identifierBytes := []byte(ISRCollectionTransit_AbridgedIdentifier)
	builder.FinishWithFileIdentifier(offset, identifierBytes)
}

func ISRCollectionTransit_AbridgedBufferHasIdentifier(buf []byte) bool {
	return flatbuffers.BufferHasIdentifier(buf, ISRCollectionTransit_AbridgedIdentifier)
}

func GetSizePrefixedRootAsISRCollectionTransit_Abridged(buf []byte, offset flatbuffers.UOffsetT) *ISRCollectionTransit_Abridged {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &ISRCollectionTransit_Abridged{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedISRCollectionTransit_AbridgedBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	identifierBytes := []byte(ISRCollectionTransit_AbridgedIdentifier)
	builder.FinishSizePrefixedWithFileIdentifier(offset, identifierBytes)
}

func SizePrefixedISRCollectionTransit_AbridgedBufferHasIdentifier(buf []byte) bool {
	return flatbuffers.SizePrefixedBufferHasIdentifier(buf, ISRCollectionTransit_AbridgedIdentifier)
}

func (rcv *ISRCollectionTransit_Abridged) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *ISRCollectionTransit_Abridged) Table() flatbuffers.Table {
	return rcv._tab
}

/// Transit Unique Identifier.
/// Example: /// Example: ISRCOLLECTIONTRANSIT-ID
/// Constraints: Minimum length = 0, Maximum length = 36
func (rcv *ISRCollectionTransit_Abridged) Id() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Transit Unique Identifier.
/// Example: /// Example: ISRCOLLECTIONTRANSIT-ID
/// Constraints: Minimum length = 0, Maximum length = 36
/// Military Base to transmit the dissemination of this data.
/// Example: /// Example: ENVOYS
/// Constraints: Minimum length = 0, Maximum length = 32
func (rcv *ISRCollectionTransit_Abridged) Base() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Military Base to transmit the dissemination of this data.
/// Example: /// Example: ENVOYS
/// Constraints: Minimum length = 0, Maximum length = 32
/// Length of mission in milliseconds.
/// Example: /// Example: 200.23
/// Constraints: No constraints specified.
func (rcv *ISRCollectionTransit_Abridged) Duration() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Length of mission in milliseconds.
/// Example: /// Example: 200.23
/// Constraints: No constraints specified.
func (rcv *ISRCollectionTransit_Abridged) MutateDuration(n float64) bool {
	return rcv._tab.MutateFloat64Slot(8, n)
}

func ISRCollectionTransit_AbridgedStart(builder *flatbuffers.Builder) {
	builder.StartObject(3)
}
func ISRCollectionTransit_AbridgedAddId(builder *flatbuffers.Builder, id flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(id), 0)
}
func ISRCollectionTransit_AbridgedAddBase(builder *flatbuffers.Builder, base flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(base), 0)
}
func ISRCollectionTransit_AbridgedAddDuration(builder *flatbuffers.Builder, duration float64) {
	builder.PrependFloat64Slot(2, duration, 0.0)
}
func ISRCollectionTransit_AbridgedEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
