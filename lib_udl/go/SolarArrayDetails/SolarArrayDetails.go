// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package SolarArrayDetails

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

/// /// Model representation of Information on spacecraft SolarArrayDetails. A SolarArray may have multiple details records compiled by various sources.
type SolarArrayDetails struct {
	_tab flatbuffers.Table
}

const SolarArrayDetailsIdentifier = "SOLA"

func GetRootAsSolarArrayDetails(buf []byte, offset flatbuffers.UOffsetT) *SolarArrayDetails {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &SolarArrayDetails{}
	x.Init(buf, n+offset)
	return x
}

func FinishSolarArrayDetailsBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	identifierBytes := []byte(SolarArrayDetailsIdentifier)
	builder.FinishWithFileIdentifier(offset, identifierBytes)
}

func SolarArrayDetailsBufferHasIdentifier(buf []byte) bool {
	return flatbuffers.BufferHasIdentifier(buf, SolarArrayDetailsIdentifier)
}

func GetSizePrefixedRootAsSolarArrayDetails(buf []byte, offset flatbuffers.UOffsetT) *SolarArrayDetails {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &SolarArrayDetails{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedSolarArrayDetailsBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	identifierBytes := []byte(SolarArrayDetailsIdentifier)
	builder.FinishSizePrefixedWithFileIdentifier(offset, identifierBytes)
}

func SizePrefixedSolarArrayDetailsBufferHasIdentifier(buf []byte) bool {
	return flatbuffers.SizePrefixedBufferHasIdentifier(buf, SolarArrayDetailsIdentifier)
}

func (rcv *SolarArrayDetails) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *SolarArrayDetails) Table() flatbuffers.Table {
	return rcv._tab
}

/// Unique identifier of the record, auto-generated by the system.
/// Example: /// Example: SOLARARRAYDETAILS-ID
/// Constraints: Minimum length = 1, Maximum length = 36
func (rcv *SolarArrayDetails) Id() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Unique identifier of the record, auto-generated by the system.
/// Example: /// Example: SOLARARRAYDETAILS-ID
/// Constraints: Minimum length = 1, Maximum length = 36
/// Unique identifier of the parent SolarArray.
/// Example: /// Example: SOLARARRAY-ID
/// Constraints: Minimum length = 1, Maximum length = 36
func (rcv *SolarArrayDetails) IdSolarArray() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Unique identifier of the parent SolarArray.
/// Example: /// Example: SOLARARRAY-ID
/// Constraints: Minimum length = 1, Maximum length = 36
/// Classification marking of the data in IC/CAPCO Portion-marked format.
/// Example: /// Example: U
/// Constraints: Minimum length = 1, Maximum length = 128
func (rcv *SolarArrayDetails) ClassificationMarking() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Classification marking of the data in IC/CAPCO Portion-marked format.
/// Example: /// Example: U
/// Constraints: Minimum length = 1, Maximum length = 128
/// Type of solar array (e.g. U Shaped).
/// Example: /// Example: U Shaped
/// Constraints: Minimum length = 0, Maximum length = 64
func (rcv *SolarArrayDetails) Type() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Type of solar array (e.g. U Shaped).
/// Example: /// Example: U Shaped
/// Constraints: Minimum length = 0, Maximum length = 64
/// Solar array technology (e.g. Ga-As).
/// Example: /// Example: Ga-As
/// Constraints: Minimum length = 0, Maximum length = 64
func (rcv *SolarArrayDetails) Technology() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Solar array technology (e.g. Ga-As).
/// Example: /// Example: Ga-As
/// Constraints: Minimum length = 0, Maximum length = 64
/// Solar array junction technology (e.g. Triple).
/// Example: /// Example: Triple
/// Constraints: Minimum length = 0, Maximum length = 64
func (rcv *SolarArrayDetails) JunctionTechnology() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Solar array junction technology (e.g. Triple).
/// Example: /// Example: Triple
/// Constraints: Minimum length = 0, Maximum length = 64
/// Unique identifier of the organization that manufactures the solar array.
/// Example: /// Example: MANUFACTURERORG-ID
/// Constraints: Minimum length = 0, Maximum length = 36
func (rcv *SolarArrayDetails) ManufacturerOrgId() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Unique identifier of the organization that manufactures the solar array.
/// Example: /// Example: MANUFACTURERORG-ID
/// Constraints: Minimum length = 0, Maximum length = 36
/// Solar Array span in meters.
/// Example: /// Example: 123.4
/// Constraints: No constraints specified.
func (rcv *SolarArrayDetails) Span() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(18))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Solar Array span in meters.
/// Example: /// Example: 123.4
/// Constraints: No constraints specified.
func (rcv *SolarArrayDetails) MutateSpan(n float64) bool {
	return rcv._tab.MutateFloat64Slot(18, n)
}

/// Solar Array area in square meters.
/// Example: /// Example: 123.4
/// Constraints: No constraints specified.
func (rcv *SolarArrayDetails) Area() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(20))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Solar Array area in square meters.
/// Example: /// Example: 123.4
/// Constraints: No constraints specified.
func (rcv *SolarArrayDetails) MutateArea(n float64) bool {
	return rcv._tab.MutateFloat64Slot(20, n)
}

/// Solar array description/notes.
/// Example: /// Example: Example notes
/// Constraints: Minimum length = 0, Maximum length = 2147483647
func (rcv *SolarArrayDetails) Description() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(22))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Solar array description/notes.
/// Example: /// Example: Example notes
/// Constraints: Minimum length = 0, Maximum length = 2147483647
/// Time the row was created in the database, auto-populated by the system.
/// Example: /// Example: 2018-01-01T16:00:00.123Z
/// Constraints: No constraints specified.
func (rcv *SolarArrayDetails) CreatedAt() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(24))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Time the row was created in the database, auto-populated by the system.
/// Example: /// Example: 2018-01-01T16:00:00.123Z
/// Constraints: No constraints specified.
/// Application user who created the row in the database, auto-populated by the system.
/// Example: /// Example: some.user
/// Constraints: Minimum length = 1, Maximum length = 64
func (rcv *SolarArrayDetails) CreatedBy() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(26))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Application user who created the row in the database, auto-populated by the system.
/// Example: /// Example: some.user
/// Constraints: Minimum length = 1, Maximum length = 64
/// Time the row was last updated in the database, auto-populated by the system.
/// Example: /// Example: 2018-01-01T16:00:00.123Z
/// Constraints: No constraints specified.
func (rcv *SolarArrayDetails) UpdatedAt() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(28))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Time the row was last updated in the database, auto-populated by the system.
/// Example: /// Example: 2018-01-01T16:00:00.123Z
/// Constraints: No constraints specified.
/// Application user who updated the row in the database, auto-populated by the system.
/// Example: /// Example: some.user
/// Constraints: Minimum length = 0, Maximum length = 64
func (rcv *SolarArrayDetails) UpdatedBy() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(30))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Application user who updated the row in the database, auto-populated by the system.
/// Example: /// Example: some.user
/// Constraints: Minimum length = 0, Maximum length = 64
/// Source of the data.
/// Example: /// Example: Bluestaq
/// Constraints: Minimum length = 1, Maximum length = 64
func (rcv *SolarArrayDetails) Source() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(32))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Source of the data.
/// Example: /// Example: Bluestaq
/// Constraints: Minimum length = 1, Maximum length = 64
/// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
/// Example: /// Example: THIRD_PARTY_DATASOURCE
/// Constraints: Minimum length = 0, Maximum length = 64
func (rcv *SolarArrayDetails) Origin() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(34))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
/// Example: /// Example: THIRD_PARTY_DATASOURCE
/// Constraints: Minimum length = 0, Maximum length = 64
/// The originating source network on which this record was created, auto-populated by the system.
/// Example: /// Example: ORIG
/// Constraints: Minimum length = 1, Maximum length = 32
func (rcv *SolarArrayDetails) OrigNetwork() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(36))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The originating source network on which this record was created, auto-populated by the system.
/// Example: /// Example: ORIG
/// Constraints: Minimum length = 1, Maximum length = 32
/// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
/// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
/// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
/// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
/// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
/// Example: /// Example: TEST
/// Constraints: Minimum length = 1, Maximum length = 32
func (rcv *SolarArrayDetails) DataMode() SolarArrayDetails_dataMode_Enum {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(38))
	if o != 0 {
		return SolarArrayDetails_dataMode_Enum(rcv._tab.GetInt8(o + rcv._tab.Pos))
	}
	return 0
}

/// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
/// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
/// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
/// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
/// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
/// Example: /// Example: TEST
/// Constraints: Minimum length = 1, Maximum length = 32
func (rcv *SolarArrayDetails) MutateDataMode(n SolarArrayDetails_dataMode_Enum) bool {
	return rcv._tab.MutateInt8Slot(38, int8(n))
}

/// Optional array of provider/source specific tags for this data, where each element is no longer than 32 characters, used for implementing data owner conditional access controls to restrict access to the data. Should be left null by data providers unless conditional access controls are coordinated with the UDL team.
/// Example: /// Example: ['TAG1', 'TAG2']
/// Constraints: No constraints specified.
func (rcv *SolarArrayDetails) Tags(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(40))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *SolarArrayDetails) TagsLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(40))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

/// Optional array of provider/source specific tags for this data, where each element is no longer than 32 characters, used for implementing data owner conditional access controls to restrict access to the data. Should be left null by data providers unless conditional access controls are coordinated with the UDL team.
/// Example: /// Example: ['TAG1', 'TAG2']
/// Constraints: No constraints specified.
/// No description provided.
/// Example: /// Example: No example provided.
/// Constraints: No constraints specified.
func (rcv *SolarArrayDetails) ManufacturerOrg() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(42))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// No description provided.
/// Example: /// Example: No example provided.
/// Constraints: No constraints specified.
func SolarArrayDetailsStart(builder *flatbuffers.Builder) {
	builder.StartObject(20)
}
func SolarArrayDetailsAddId(builder *flatbuffers.Builder, id flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(id), 0)
}
func SolarArrayDetailsAddIdSolarArray(builder *flatbuffers.Builder, idSolarArray flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(idSolarArray), 0)
}
func SolarArrayDetailsAddClassificationMarking(builder *flatbuffers.Builder, classificationMarking flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(classificationMarking), 0)
}
func SolarArrayDetailsAddType(builder *flatbuffers.Builder, type_ flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(3, flatbuffers.UOffsetT(type_), 0)
}
func SolarArrayDetailsAddTechnology(builder *flatbuffers.Builder, technology flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(4, flatbuffers.UOffsetT(technology), 0)
}
func SolarArrayDetailsAddJunctionTechnology(builder *flatbuffers.Builder, junctionTechnology flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(5, flatbuffers.UOffsetT(junctionTechnology), 0)
}
func SolarArrayDetailsAddManufacturerOrgId(builder *flatbuffers.Builder, manufacturerOrgId flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(6, flatbuffers.UOffsetT(manufacturerOrgId), 0)
}
func SolarArrayDetailsAddSpan(builder *flatbuffers.Builder, span float64) {
	builder.PrependFloat64Slot(7, span, 0.0)
}
func SolarArrayDetailsAddArea(builder *flatbuffers.Builder, area float64) {
	builder.PrependFloat64Slot(8, area, 0.0)
}
func SolarArrayDetailsAddDescription(builder *flatbuffers.Builder, description flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(9, flatbuffers.UOffsetT(description), 0)
}
func SolarArrayDetailsAddCreatedAt(builder *flatbuffers.Builder, createdAt flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(10, flatbuffers.UOffsetT(createdAt), 0)
}
func SolarArrayDetailsAddCreatedBy(builder *flatbuffers.Builder, createdBy flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(11, flatbuffers.UOffsetT(createdBy), 0)
}
func SolarArrayDetailsAddUpdatedAt(builder *flatbuffers.Builder, updatedAt flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(12, flatbuffers.UOffsetT(updatedAt), 0)
}
func SolarArrayDetailsAddUpdatedBy(builder *flatbuffers.Builder, updatedBy flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(13, flatbuffers.UOffsetT(updatedBy), 0)
}
func SolarArrayDetailsAddSource(builder *flatbuffers.Builder, source flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(14, flatbuffers.UOffsetT(source), 0)
}
func SolarArrayDetailsAddOrigin(builder *flatbuffers.Builder, origin flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(15, flatbuffers.UOffsetT(origin), 0)
}
func SolarArrayDetailsAddOrigNetwork(builder *flatbuffers.Builder, origNetwork flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(16, flatbuffers.UOffsetT(origNetwork), 0)
}
func SolarArrayDetailsAddDataMode(builder *flatbuffers.Builder, dataMode SolarArrayDetails_dataMode_Enum) {
	builder.PrependInt8Slot(17, int8(dataMode), 0)
}
func SolarArrayDetailsAddTags(builder *flatbuffers.Builder, tags flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(18, flatbuffers.UOffsetT(tags), 0)
}
func SolarArrayDetailsStartTagsVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func SolarArrayDetailsAddManufacturerOrg(builder *flatbuffers.Builder, manufacturerOrg flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(19, flatbuffers.UOffsetT(manufacturerOrg), 0)
}
func SolarArrayDetailsEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
