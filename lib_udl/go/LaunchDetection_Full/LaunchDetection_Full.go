// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package LaunchDetection_Full

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

/// /// Data to analyze launch detections.
type LaunchDetection_Full struct {
	_tab flatbuffers.Table
}

const LaunchDetection_FullIdentifier = "LAUN"

func GetRootAsLaunchDetection_Full(buf []byte, offset flatbuffers.UOffsetT) *LaunchDetection_Full {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &LaunchDetection_Full{}
	x.Init(buf, n+offset)
	return x
}

func FinishLaunchDetection_FullBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	identifierBytes := []byte(LaunchDetection_FullIdentifier)
	builder.FinishWithFileIdentifier(offset, identifierBytes)
}

func LaunchDetection_FullBufferHasIdentifier(buf []byte) bool {
	return flatbuffers.BufferHasIdentifier(buf, LaunchDetection_FullIdentifier)
}

func GetSizePrefixedRootAsLaunchDetection_Full(buf []byte, offset flatbuffers.UOffsetT) *LaunchDetection_Full {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &LaunchDetection_Full{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedLaunchDetection_FullBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	identifierBytes := []byte(LaunchDetection_FullIdentifier)
	builder.FinishSizePrefixedWithFileIdentifier(offset, identifierBytes)
}

func SizePrefixedLaunchDetection_FullBufferHasIdentifier(buf []byte) bool {
	return flatbuffers.SizePrefixedBufferHasIdentifier(buf, LaunchDetection_FullIdentifier)
}

func (rcv *LaunchDetection_Full) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *LaunchDetection_Full) Table() flatbuffers.Table {
	return rcv._tab
}

/// Unique identifier of the record, auto-generated by the system.
/// Example: /// Example: LAUNCHDETECTION-ID
/// Constraints: Minimum length = 1, Maximum length = 36
func (rcv *LaunchDetection_Full) Id() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Unique identifier of the record, auto-generated by the system.
/// Example: /// Example: LAUNCHDETECTION-ID
/// Constraints: Minimum length = 1, Maximum length = 36
/// Classification marking of the data in IC/CAPCO Portion-marked format.
/// Example: /// Example: U
/// Constraints: Minimum length = 1, Maximum length = 128
func (rcv *LaunchDetection_Full) ClassificationMarking() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Classification marking of the data in IC/CAPCO Portion-marked format.
/// Example: /// Example: U
/// Constraints: Minimum length = 1, Maximum length = 128
/// Time of Launch.
/// Example: /// Example: 2018-01-01T16:00:00.123Z
/// Constraints: No constraints specified.
func (rcv *LaunchDetection_Full) LaunchTime() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Time of Launch.
/// Example: /// Example: 2018-01-01T16:00:00.123Z
/// Constraints: No constraints specified.
/// Type of message for the data.
/// Example: /// Example: Example-Msg-Type
/// Constraints: Minimum length = 1, Maximum length = 16
func (rcv *LaunchDetection_Full) MessageType() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Type of message for the data.
/// Example: /// Example: Example-Msg-Type
/// Constraints: Minimum length = 1, Maximum length = 16
/// Geodetic Latitude of launch origin (in Degrees). -90 to 90 degrees (negative values south of equator).
/// Example: /// Example: 1.23
/// Constraints: No constraints specified.
func (rcv *LaunchDetection_Full) LaunchLatitude() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Geodetic Latitude of launch origin (in Degrees). -90 to 90 degrees (negative values south of equator).
/// Example: /// Example: 1.23
/// Constraints: No constraints specified.
func (rcv *LaunchDetection_Full) MutateLaunchLatitude(n float64) bool {
	return rcv._tab.MutateFloat64Slot(12, n)
}

/// Geodetic Longitude of launch origin (in Degrees). -180 to 180 degrees (negative values west of Prime Meridian).
/// Example: /// Example: 1.23
/// Constraints: No constraints specified.
func (rcv *LaunchDetection_Full) LaunchLongitude() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Geodetic Longitude of launch origin (in Degrees). -180 to 180 degrees (negative values west of Prime Meridian).
/// Example: /// Example: 1.23
/// Constraints: No constraints specified.
func (rcv *LaunchDetection_Full) MutateLaunchLongitude(n float64) bool {
	return rcv._tab.MutateFloat64Slot(14, n)
}

/// Angle measured clockwise from North for the launch heading (in Degrees).
/// Example: /// Example: 1.23
/// Constraints: No constraints specified.
func (rcv *LaunchDetection_Full) LaunchAzimuth() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Angle measured clockwise from North for the launch heading (in Degrees).
/// Example: /// Example: 1.23
/// Constraints: No constraints specified.
func (rcv *LaunchDetection_Full) MutateLaunchAzimuth(n float64) bool {
	return rcv._tab.MutateFloat64Slot(16, n)
}

/// Orbit Right Ascension of Ascending Node (in Degrees).
/// Example: /// Example: 1.23
/// Constraints: No constraints specified.
func (rcv *LaunchDetection_Full) Raan() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(18))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Orbit Right Ascension of Ascending Node (in Degrees).
/// Example: /// Example: 1.23
/// Constraints: No constraints specified.
func (rcv *LaunchDetection_Full) MutateRaan(n float64) bool {
	return rcv._tab.MutateFloat64Slot(18, n)
}

/// Orbit Inclination (in Degrees).
/// Example: /// Example: 1.23
/// Constraints: No constraints specified.
func (rcv *LaunchDetection_Full) Inclination() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(20))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Orbit Inclination (in Degrees).
/// Example: /// Example: 1.23
/// Constraints: No constraints specified.
func (rcv *LaunchDetection_Full) MutateInclination(n float64) bool {
	return rcv._tab.MutateFloat64Slot(20, n)
}

/// Time of observation.
/// Example: /// Example: 2018-01-01T16:00:00.123Z
/// Constraints: No constraints specified.
func (rcv *LaunchDetection_Full) ObservationTime() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(22))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Time of observation.
/// Example: /// Example: 2018-01-01T16:00:00.123Z
/// Constraints: No constraints specified.
/// Latitude of launch vehicle at observation time (in Degrees). -90 to 90 degrees (negative values south of equator).
/// Example: /// Example: 45.23
/// Constraints: No constraints specified.
func (rcv *LaunchDetection_Full) ObservationLatitude() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(24))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Latitude of launch vehicle at observation time (in Degrees). -90 to 90 degrees (negative values south of equator).
/// Example: /// Example: 45.23
/// Constraints: No constraints specified.
func (rcv *LaunchDetection_Full) MutateObservationLatitude(n float64) bool {
	return rcv._tab.MutateFloat64Slot(24, n)
}

/// Longitude of launch vehicle at observation time (in Degrees).
/// Example: /// Example: 1.23
/// Constraints: No constraints specified.
func (rcv *LaunchDetection_Full) ObservationLongitude() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(26))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Longitude of launch vehicle at observation time (in Degrees).
/// Example: /// Example: 1.23
/// Constraints: No constraints specified.
func (rcv *LaunchDetection_Full) MutateObservationLongitude(n float64) bool {
	return rcv._tab.MutateFloat64Slot(26, n)
}

/// Altitude of launch vehicle at observation time (in KM).
/// Example: /// Example: 1.23
/// Constraints: No constraints specified.
func (rcv *LaunchDetection_Full) ObservationAltitude() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(28))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Altitude of launch vehicle at observation time (in KM).
/// Example: /// Example: 1.23
/// Constraints: No constraints specified.
func (rcv *LaunchDetection_Full) MutateObservationAltitude(n float64) bool {
	return rcv._tab.MutateFloat64Slot(28, n)
}

/// Flag indicating multiple observers were used.
/// Example: /// Example: False
/// Constraints: No constraints specified.
func (rcv *LaunchDetection_Full) StereoFlag() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(30))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

/// Flag indicating multiple observers were used.
/// Example: /// Example: False
/// Constraints: No constraints specified.
func (rcv *LaunchDetection_Full) MutateStereoFlag(n bool) bool {
	return rcv._tab.MutateBoolSlot(30, n)
}

/// Flag indicating that the Launch azimuth is uncertain due to near vertical flight path.
/// Example: /// Example: False
/// Constraints: No constraints specified.
func (rcv *LaunchDetection_Full) HighZenithAzimuth() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(32))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

/// Flag indicating that the Launch azimuth is uncertain due to near vertical flight path.
/// Example: /// Example: False
/// Constraints: No constraints specified.
func (rcv *LaunchDetection_Full) MutateHighZenithAzimuth(n bool) bool {
	return rcv._tab.MutateBoolSlot(32, n)
}

/// Integer indicating how messages should be sequenced for a specific event.
/// Example: /// Example: 5
/// Constraints: No constraints specified.
func (rcv *LaunchDetection_Full) SequenceNumber() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(34))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

/// Integer indicating how messages should be sequenced for a specific event.
/// Example: /// Example: 5
/// Constraints: No constraints specified.
func (rcv *LaunchDetection_Full) MutateSequenceNumber(n int32) bool {
	return rcv._tab.MutateInt32Slot(34, n)
}

/// Id to be able to correlate different messages to a specific event.
/// Example: /// Example: EVENT-ID
/// Constraints: Minimum length = 0, Maximum length = 36
func (rcv *LaunchDetection_Full) EventId() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(36))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Id to be able to correlate different messages to a specific event.
/// Example: /// Example: EVENT-ID
/// Constraints: Minimum length = 0, Maximum length = 36
/// Source of the data.
/// Example: /// Example: Bluestaq
/// Constraints: Minimum length = 1, Maximum length = 64
func (rcv *LaunchDetection_Full) Source() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(38))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Source of the data.
/// Example: /// Example: Bluestaq
/// Constraints: Minimum length = 1, Maximum length = 64
/// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
/// Example: /// Example: THIRD_PARTY_DATASOURCE
/// Constraints: Minimum length = 0, Maximum length = 64
func (rcv *LaunchDetection_Full) Origin() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(40))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
/// Example: /// Example: THIRD_PARTY_DATASOURCE
/// Constraints: Minimum length = 0, Maximum length = 64
/// Optional source-provided and searchable metadata or descriptor of the data.
/// Example: /// Example: Example descriptor
/// Constraints: Minimum length = 0, Maximum length = 64
func (rcv *LaunchDetection_Full) Descriptor() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(42))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Optional source-provided and searchable metadata or descriptor of the data.
/// Example: /// Example: Example descriptor
/// Constraints: Minimum length = 0, Maximum length = 64
/// Optional array of provider/source specific tags for this data, where each element is no longer than 32 characters, used for implementing data owner conditional access controls to restrict access to the data. Should be left null by data providers unless conditional access controls are coordinated with the UDL team.
/// Example: /// Example: ['PROVIDER_TAG1', 'PROVIDER_TAG2']
/// Constraints: No constraints specified.
func (rcv *LaunchDetection_Full) Tags(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(44))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *LaunchDetection_Full) TagsLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(44))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

/// Optional array of provider/source specific tags for this data, where each element is no longer than 32 characters, used for implementing data owner conditional access controls to restrict access to the data. Should be left null by data providers unless conditional access controls are coordinated with the UDL team.
/// Example: /// Example: ['PROVIDER_TAG1', 'PROVIDER_TAG2']
/// Constraints: No constraints specified.
/// The originating source network on which this record was created, auto-populated by the system.
/// Example: /// Example: ORIG
/// Constraints: Minimum length = 1, Maximum length = 32
func (rcv *LaunchDetection_Full) OrigNetwork() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(46))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The originating source network on which this record was created, auto-populated by the system.
/// Example: /// Example: ORIG
/// Constraints: Minimum length = 1, Maximum length = 32
/// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
/// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
/// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
/// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
/// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
/// Example: /// Example: TEST
/// Constraints: Minimum length = 1, Maximum length = 32
func (rcv *LaunchDetection_Full) DataMode() LaunchDetection_Full_dataMode_Enum {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(48))
	if o != 0 {
		return LaunchDetection_Full_dataMode_Enum(rcv._tab.GetInt8(o + rcv._tab.Pos))
	}
	return 0
}

/// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
/// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
/// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
/// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
/// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
/// Example: /// Example: TEST
/// Constraints: Minimum length = 1, Maximum length = 32
func (rcv *LaunchDetection_Full) MutateDataMode(n LaunchDetection_Full_dataMode_Enum) bool {
	return rcv._tab.MutateInt8Slot(48, int8(n))
}

/// Time the row was created in the database.
/// Example: /// Example: 2018-01-01T16:00:00.123Z
/// Constraints: No constraints specified.
func (rcv *LaunchDetection_Full) CreatedAt() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(50))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Time the row was created in the database.
/// Example: /// Example: 2018-01-01T16:00:00.123Z
/// Constraints: No constraints specified.
/// Application user who created the row in the database.
/// Example: /// Example: some.user
/// Constraints: Minimum length = 1, Maximum length = 64
func (rcv *LaunchDetection_Full) CreatedBy() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(52))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Application user who created the row in the database.
/// Example: /// Example: some.user
/// Constraints: Minimum length = 1, Maximum length = 64
/// Read-only time the row was updated in the database, set automatically by the system on update.
/// Example: /// Example: 2018-01-01T16:00:00.123Z
/// Constraints: No constraints specified.
func (rcv *LaunchDetection_Full) UpdatedAt() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(54))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Read-only time the row was updated in the database, set automatically by the system on update.
/// Example: /// Example: 2018-01-01T16:00:00.123Z
/// Constraints: No constraints specified.
/// Application user who last updated the row in the database, set by the system automatically and ignored on create/edit operations.
/// Example: /// Example: some.user
/// Constraints: Minimum length = 0, Maximum length = 64
func (rcv *LaunchDetection_Full) UpdatedBy() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(56))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Application user who last updated the row in the database, set by the system automatically and ignored on create/edit operations.
/// Example: /// Example: some.user
/// Constraints: Minimum length = 0, Maximum length = 64
func LaunchDetection_FullStart(builder *flatbuffers.Builder) {
	builder.StartObject(27)
}
func LaunchDetection_FullAddId(builder *flatbuffers.Builder, id flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(id), 0)
}
func LaunchDetection_FullAddClassificationMarking(builder *flatbuffers.Builder, classificationMarking flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(classificationMarking), 0)
}
func LaunchDetection_FullAddLaunchTime(builder *flatbuffers.Builder, launchTime flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(launchTime), 0)
}
func LaunchDetection_FullAddMessageType(builder *flatbuffers.Builder, messageType flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(3, flatbuffers.UOffsetT(messageType), 0)
}
func LaunchDetection_FullAddLaunchLatitude(builder *flatbuffers.Builder, launchLatitude float64) {
	builder.PrependFloat64Slot(4, launchLatitude, 0.0)
}
func LaunchDetection_FullAddLaunchLongitude(builder *flatbuffers.Builder, launchLongitude float64) {
	builder.PrependFloat64Slot(5, launchLongitude, 0.0)
}
func LaunchDetection_FullAddLaunchAzimuth(builder *flatbuffers.Builder, launchAzimuth float64) {
	builder.PrependFloat64Slot(6, launchAzimuth, 0.0)
}
func LaunchDetection_FullAddRaan(builder *flatbuffers.Builder, raan float64) {
	builder.PrependFloat64Slot(7, raan, 0.0)
}
func LaunchDetection_FullAddInclination(builder *flatbuffers.Builder, inclination float64) {
	builder.PrependFloat64Slot(8, inclination, 0.0)
}
func LaunchDetection_FullAddObservationTime(builder *flatbuffers.Builder, observationTime flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(9, flatbuffers.UOffsetT(observationTime), 0)
}
func LaunchDetection_FullAddObservationLatitude(builder *flatbuffers.Builder, observationLatitude float64) {
	builder.PrependFloat64Slot(10, observationLatitude, 0.0)
}
func LaunchDetection_FullAddObservationLongitude(builder *flatbuffers.Builder, observationLongitude float64) {
	builder.PrependFloat64Slot(11, observationLongitude, 0.0)
}
func LaunchDetection_FullAddObservationAltitude(builder *flatbuffers.Builder, observationAltitude float64) {
	builder.PrependFloat64Slot(12, observationAltitude, 0.0)
}
func LaunchDetection_FullAddStereoFlag(builder *flatbuffers.Builder, stereoFlag bool) {
	builder.PrependBoolSlot(13, stereoFlag, false)
}
func LaunchDetection_FullAddHighZenithAzimuth(builder *flatbuffers.Builder, highZenithAzimuth bool) {
	builder.PrependBoolSlot(14, highZenithAzimuth, false)
}
func LaunchDetection_FullAddSequenceNumber(builder *flatbuffers.Builder, sequenceNumber int32) {
	builder.PrependInt32Slot(15, sequenceNumber, 0)
}
func LaunchDetection_FullAddEventId(builder *flatbuffers.Builder, eventId flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(16, flatbuffers.UOffsetT(eventId), 0)
}
func LaunchDetection_FullAddSource(builder *flatbuffers.Builder, source flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(17, flatbuffers.UOffsetT(source), 0)
}
func LaunchDetection_FullAddOrigin(builder *flatbuffers.Builder, origin flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(18, flatbuffers.UOffsetT(origin), 0)
}
func LaunchDetection_FullAddDescriptor(builder *flatbuffers.Builder, descriptor flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(19, flatbuffers.UOffsetT(descriptor), 0)
}
func LaunchDetection_FullAddTags(builder *flatbuffers.Builder, tags flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(20, flatbuffers.UOffsetT(tags), 0)
}
func LaunchDetection_FullStartTagsVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func LaunchDetection_FullAddOrigNetwork(builder *flatbuffers.Builder, origNetwork flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(21, flatbuffers.UOffsetT(origNetwork), 0)
}
func LaunchDetection_FullAddDataMode(builder *flatbuffers.Builder, dataMode LaunchDetection_Full_dataMode_Enum) {
	builder.PrependInt8Slot(22, int8(dataMode), 0)
}
func LaunchDetection_FullAddCreatedAt(builder *flatbuffers.Builder, createdAt flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(23, flatbuffers.UOffsetT(createdAt), 0)
}
func LaunchDetection_FullAddCreatedBy(builder *flatbuffers.Builder, createdBy flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(24, flatbuffers.UOffsetT(createdBy), 0)
}
func LaunchDetection_FullAddUpdatedAt(builder *flatbuffers.Builder, updatedAt flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(25, flatbuffers.UOffsetT(updatedAt), 0)
}
func LaunchDetection_FullAddUpdatedBy(builder *flatbuffers.Builder, updatedBy flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(26, flatbuffers.UOffsetT(updatedBy), 0)
}
func LaunchDetection_FullEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
