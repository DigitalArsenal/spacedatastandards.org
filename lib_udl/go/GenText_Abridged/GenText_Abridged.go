// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package GenText_Abridged

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

/// /// Collection that details special instructions, important information, guidance, and amplifying information regarding this ATO.
type GenText_Abridged struct {
	_tab flatbuffers.Table
}

const GenText_AbridgedIdentifier = "GENT"

func GetRootAsGenText_Abridged(buf []byte, offset flatbuffers.UOffsetT) *GenText_Abridged {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &GenText_Abridged{}
	x.Init(buf, n+offset)
	return x
}

func FinishGenText_AbridgedBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	identifierBytes := []byte(GenText_AbridgedIdentifier)
	builder.FinishWithFileIdentifier(offset, identifierBytes)
}

func GenText_AbridgedBufferHasIdentifier(buf []byte) bool {
	return flatbuffers.BufferHasIdentifier(buf, GenText_AbridgedIdentifier)
}

func GetSizePrefixedRootAsGenText_Abridged(buf []byte, offset flatbuffers.UOffsetT) *GenText_Abridged {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &GenText_Abridged{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedGenText_AbridgedBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	identifierBytes := []byte(GenText_AbridgedIdentifier)
	builder.FinishSizePrefixedWithFileIdentifier(offset, identifierBytes)
}

func SizePrefixedGenText_AbridgedBufferHasIdentifier(buf []byte) bool {
	return flatbuffers.SizePrefixedBufferHasIdentifier(buf, GenText_AbridgedIdentifier)
}

func (rcv *GenText_Abridged) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *GenText_Abridged) Table() flatbuffers.Table {
	return rcv._tab
}

/// The indicator for the general text block. Examples include "OPENING REMARKS" and "GENERAL SPINS INFORMATION".
/// Example: /// Example: OPENING REMARKS
/// Constraints: Minimum length = 0, Maximum length = 64
func (rcv *GenText_Abridged) TextInd() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The indicator for the general text block. Examples include "OPENING REMARKS" and "GENERAL SPINS INFORMATION".
/// Example: /// Example: OPENING REMARKS
/// Constraints: Minimum length = 0, Maximum length = 64
/// The free text that describes the information specific to the text indicator.
/// Example: /// Example: FREE-TEXT
/// Constraints: Minimum length = 0, Maximum length = 1024
func (rcv *GenText_Abridged) Text() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The free text that describes the information specific to the text indicator.
/// Example: /// Example: FREE-TEXT
/// Constraints: Minimum length = 0, Maximum length = 1024
func GenText_AbridgedStart(builder *flatbuffers.Builder) {
	builder.StartObject(2)
}
func GenText_AbridgedAddTextInd(builder *flatbuffers.Builder, textInd flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(textInd), 0)
}
func GenText_AbridgedAddText(builder *flatbuffers.Builder, text flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(text), 0)
}
func GenText_AbridgedEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
