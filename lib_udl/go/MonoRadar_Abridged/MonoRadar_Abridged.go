// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package MonoRadar_Abridged

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

/// /// A monoradar record contains the raw, and in some cases, processed target reports from primary and secondary air surveillance radars.  All target positions for monoradar reports are recorded as range and azimuth from geographical North relative to the detecting radar site.  In the case of secondary surveillance radars, interrogation response codes are provided as well as quality and validation characteristics, when available in the particular record type used to generate the record.
type MonoRadar_Abridged struct {
	_tab flatbuffers.Table
}

const MonoRadar_AbridgedIdentifier = "MONO"

func GetRootAsMonoRadar_Abridged(buf []byte, offset flatbuffers.UOffsetT) *MonoRadar_Abridged {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &MonoRadar_Abridged{}
	x.Init(buf, n+offset)
	return x
}

func FinishMonoRadar_AbridgedBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	identifierBytes := []byte(MonoRadar_AbridgedIdentifier)
	builder.FinishWithFileIdentifier(offset, identifierBytes)
}

func MonoRadar_AbridgedBufferHasIdentifier(buf []byte) bool {
	return flatbuffers.BufferHasIdentifier(buf, MonoRadar_AbridgedIdentifier)
}

func GetSizePrefixedRootAsMonoRadar_Abridged(buf []byte, offset flatbuffers.UOffsetT) *MonoRadar_Abridged {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &MonoRadar_Abridged{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedMonoRadar_AbridgedBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	identifierBytes := []byte(MonoRadar_AbridgedIdentifier)
	builder.FinishSizePrefixedWithFileIdentifier(offset, identifierBytes)
}

func SizePrefixedMonoRadar_AbridgedBufferHasIdentifier(buf []byte) bool {
	return flatbuffers.SizePrefixedBufferHasIdentifier(buf, MonoRadar_AbridgedIdentifier)
}

func (rcv *MonoRadar_Abridged) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *MonoRadar_Abridged) Table() flatbuffers.Table {
	return rcv._tab
}

/// Unique identifier of the record, auto-generated by the system.
/// Example: /// Example: MONORADAR-ID
/// Constraints: Minimum length = 1, Maximum length = 36
func (rcv *MonoRadar_Abridged) Id() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Unique identifier of the record, auto-generated by the system.
/// Example: /// Example: MONORADAR-ID
/// Constraints: Minimum length = 1, Maximum length = 36
/// Classification marking of the data in IC/CAPCO Portion-marked format.
/// Example: /// Example: U
/// Constraints: Minimum length = 1, Maximum length = 128
func (rcv *MonoRadar_Abridged) ClassificationMarking() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Classification marking of the data in IC/CAPCO Portion-marked format.
/// Example: /// Example: U
/// Constraints: Minimum length = 1, Maximum length = 128
/// Test target indicator.
/// Example: /// Example: TTI
/// Constraints: Minimum length = 0, Maximum length = 16
func (rcv *MonoRadar_Abridged) Tti() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Test target indicator.
/// Example: /// Example: TTI
/// Constraints: Minimum length = 0, Maximum length = 16
/// ID of the radar site or station providing the data.
/// Example: /// Example: REF-SENSOR-ID
/// Constraints: Minimum length = 0, Maximum length = 36
func (rcv *MonoRadar_Abridged) IdSensor() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// ID of the radar site or station providing the data.
/// Example: /// Example: REF-SENSOR-ID
/// Constraints: Minimum length = 0, Maximum length = 36
/// Sensor WGS84 latitude, in degrees, at time of observation (ts). -90 to 90 degrees (negative values south of equator).
/// Example: /// Example: 45.23
/// Constraints: No constraints specified.
func (rcv *MonoRadar_Abridged) Senlat() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Sensor WGS84 latitude, in degrees, at time of observation (ts). -90 to 90 degrees (negative values south of equator).
/// Example: /// Example: 45.23
/// Constraints: No constraints specified.
func (rcv *MonoRadar_Abridged) MutateSenlat(n float64) bool {
	return rcv._tab.MutateFloat64Slot(12, n)
}

/// Sensor WGS84 longitude, in degrees, at time of observation (ts).  -180 to 180 degrees (negative values west of Prime Meridian).
/// Example: /// Example: 45.23
/// Constraints: No constraints specified.
func (rcv *MonoRadar_Abridged) Senlon() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Sensor WGS84 longitude, in degrees, at time of observation (ts).  -180 to 180 degrees (negative values west of Prime Meridian).
/// Example: /// Example: 45.23
/// Constraints: No constraints specified.
func (rcv *MonoRadar_Abridged) MutateSenlon(n float64) bool {
	return rcv._tab.MutateFloat64Slot(14, n)
}

/// Sensor altitude, in kilometers, at time of observation (ts).
/// Example: /// Example: 100.23
/// Constraints: No constraints specified.
func (rcv *MonoRadar_Abridged) Senalt() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Sensor altitude, in kilometers, at time of observation (ts).
/// Example: /// Example: 100.23
/// Constraints: No constraints specified.
func (rcv *MonoRadar_Abridged) MutateSenalt(n float64) bool {
	return rcv._tab.MutateFloat64Slot(16, n)
}

/// System Area Code.
/// Example: /// Example: 10
/// Constraints: No constraints specified.
func (rcv *MonoRadar_Abridged) Sac() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(18))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

/// System Area Code.
/// Example: /// Example: 10
/// Constraints: No constraints specified.
func (rcv *MonoRadar_Abridged) MutateSac(n int32) bool {
	return rcv._tab.MutateInt32Slot(18, n)
}

/// System Identification Code.
/// Example: /// Example: 40
/// Constraints: No constraints specified.
func (rcv *MonoRadar_Abridged) Sic() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(20))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

/// System Identification Code.
/// Example: /// Example: 40
/// Constraints: No constraints specified.
func (rcv *MonoRadar_Abridged) MutateSic(n int32) bool {
	return rcv._tab.MutateInt32Slot(20, n)
}

/// Aircraft identification from an aircraft equipped with a Mode S transponder.
/// Example: /// Example: TGT-ID
/// Constraints: Minimum length = 0, Maximum length = 16
func (rcv *MonoRadar_Abridged) Tgtid() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(22))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Aircraft identification from an aircraft equipped with a Mode S transponder.
/// Example: /// Example: TGT-ID
/// Constraints: Minimum length = 0, Maximum length = 16
/// Aircraft address (24-bits Mode S address) assigned uniquely to each aircraft.
/// Example: /// Example: ADDR-ID
/// Constraints: Minimum length = 0, Maximum length = 16
func (rcv *MonoRadar_Abridged) Addr() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(24))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Aircraft address (24-bits Mode S address) assigned uniquely to each aircraft.
/// Example: /// Example: ADDR-ID
/// Constraints: Minimum length = 0, Maximum length = 16
/// Message format received (i.e. 'ASR9', 'CAT48', 'TPS70', etc..).
/// Example: /// Example: CAT48
/// Constraints: Minimum length = 1, Maximum length = 16
func (rcv *MonoRadar_Abridged) Msgfmt() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(26))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Message format received (i.e. 'ASR9', 'CAT48', 'TPS70', etc..).
/// Example: /// Example: CAT48
/// Constraints: Minimum length = 1, Maximum length = 16
/// Message report type received (i.e. 'SRCH', 'BCN', 'REINF', 'BRTQC', 'PSR', etc..).
/// Example: /// Example: BCN
/// Constraints: Minimum length = 1, Maximum length = 16
func (rcv *MonoRadar_Abridged) Msgtyp() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(28))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Message report type received (i.e. 'SRCH', 'BCN', 'REINF', 'BRTQC', 'PSR', etc..).
/// Example: /// Example: BCN
/// Constraints: Minimum length = 1, Maximum length = 16
/// Flag indicating military message.
/// Example: /// Example: True
/// Constraints: No constraints specified.
func (rcv *MonoRadar_Abridged) Af() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(30))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

/// Flag indicating military message.
/// Example: /// Example: True
/// Constraints: No constraints specified.
func (rcv *MonoRadar_Abridged) MutateAf(n bool) bool {
	return rcv._tab.MutateBoolSlot(30, n)
}

/// Flag indicating FAA/Civ message.
/// Example: /// Example: True
/// Constraints: No constraints specified.
func (rcv *MonoRadar_Abridged) Faa() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(32))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

/// Flag indicating FAA/Civ message.
/// Example: /// Example: True
/// Constraints: No constraints specified.
func (rcv *MonoRadar_Abridged) MutateFaa(n bool) bool {
	return rcv._tab.MutateBoolSlot(32, n)
}

/// Flag indicating whether Special Position Indicator (SPI) present in interrogation response.
/// Example: /// Example: True
/// Constraints: No constraints specified.
func (rcv *MonoRadar_Abridged) Spi() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(34))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

/// Flag indicating whether Special Position Indicator (SPI) present in interrogation response.
/// Example: /// Example: True
/// Constraints: No constraints specified.
func (rcv *MonoRadar_Abridged) MutateSpi(n bool) bool {
	return rcv._tab.MutateBoolSlot(34, n)
}

/// Flag indicating whether AIMS present.
/// Example: /// Example: True
/// Constraints: No constraints specified.
func (rcv *MonoRadar_Abridged) Aims() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(36))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

/// Flag indicating whether AIMS present.
/// Example: /// Example: True
/// Constraints: No constraints specified.
func (rcv *MonoRadar_Abridged) MutateAims(n bool) bool {
	return rcv._tab.MutateBoolSlot(36, n)
}

/// Flag indicating that target was detected using data from an MTI receiver.
/// Example: /// Example: True
/// Constraints: No constraints specified.
func (rcv *MonoRadar_Abridged) Mti() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(38))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

/// Flag indicating that target was detected using data from an MTI receiver.
/// Example: /// Example: True
/// Constraints: No constraints specified.
func (rcv *MonoRadar_Abridged) MutateMti(n bool) bool {
	return rcv._tab.MutateBoolSlot(38, n)
}

/// Number of beacon hits received on the target.
/// Example: /// Example: 12
/// Constraints: No constraints specified.
func (rcv *MonoRadar_Abridged) Bcnhits() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(40))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

/// Number of beacon hits received on the target.
/// Example: /// Example: 12
/// Constraints: No constraints specified.
func (rcv *MonoRadar_Abridged) MutateBcnhits(n int32) bool {
	return rcv._tab.MutateInt32Slot(40, n)
}

/// Target detection time, in ISO 8601 UTC format with microsecond precision.
/// Example: /// Example: 2021-01-01T01:01:01.123456Z
/// Constraints: No constraints specified.
func (rcv *MonoRadar_Abridged) Ts() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(42))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Target detection time, in ISO 8601 UTC format with microsecond precision.
/// Example: /// Example: 2021-01-01T01:01:01.123456Z
/// Constraints: No constraints specified.
/// Message time, in ISO 8601 UTC format with microsecond precision. This is the time that the data message was released from the site.
/// Example: /// Example: 2021-01-01T01:01:01.123456Z
/// Constraints: No constraints specified.
func (rcv *MonoRadar_Abridged) Msgts() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(44))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Message time, in ISO 8601 UTC format with microsecond precision. This is the time that the data message was released from the site.
/// Example: /// Example: 2021-01-01T01:01:01.123456Z
/// Constraints: No constraints specified.
/// Measured slant range to target from the observing site, in km.
/// Example: /// Example: 100.23
/// Constraints: No constraints specified.
func (rcv *MonoRadar_Abridged) Rng() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(46))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Measured slant range to target from the observing site, in km.
/// Example: /// Example: 100.23
/// Constraints: No constraints specified.
func (rcv *MonoRadar_Abridged) MutateRng(n float64) bool {
	return rcv._tab.MutateFloat64Slot(46, n)
}

/// Target azimuth, measured from the observing site, in degrees from true North.  If Azimuth Change Pulse (acp) count is provided, az represents the computed angle.
/// Example: /// Example: 100.23
/// Constraints: No constraints specified.
func (rcv *MonoRadar_Abridged) Az() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(48))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Target azimuth, measured from the observing site, in degrees from true North.  If Azimuth Change Pulse (acp) count is provided, az represents the computed angle.
/// Example: /// Example: 100.23
/// Constraints: No constraints specified.
func (rcv *MonoRadar_Abridged) MutateAz(n float64) bool {
	return rcv._tab.MutateFloat64Slot(48, n)
}

/// Azimuth Change Pulse count at target detection.
/// Example: /// Example: 100
/// Constraints: No constraints specified.
func (rcv *MonoRadar_Abridged) Acp() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(50))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

/// Azimuth Change Pulse count at target detection.
/// Example: /// Example: 100
/// Constraints: No constraints specified.
func (rcv *MonoRadar_Abridged) MutateAcp(n int32) bool {
	return rcv._tab.MutateInt32Slot(50, n)
}

/// Measured height of the target, in km. (for 3D radars).
/// Example: /// Example: 100.23
/// Constraints: No constraints specified.
func (rcv *MonoRadar_Abridged) Alt3d() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(52))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Measured height of the target, in km. (for 3D radars).
/// Example: /// Example: 100.23
/// Constraints: No constraints specified.
func (rcv *MonoRadar_Abridged) MutateAlt3d(n float64) bool {
	return rcv._tab.MutateFloat64Slot(52, n)
}

/// Mode-C altitude (uncorrected pressure altitude), in km.
/// Example: /// Example: 100.23
/// Constraints: No constraints specified.
func (rcv *MonoRadar_Abridged) Mc() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(54))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Mode-C altitude (uncorrected pressure altitude), in km.
/// Example: /// Example: 100.23
/// Constraints: No constraints specified.
func (rcv *MonoRadar_Abridged) MutateMc(n float64) bool {
	return rcv._tab.MutateFloat64Slot(54, n)
}

/// Status of the mode-C validity bit.
/// Example: /// Example: MCV
/// Constraints: Minimum length = 0, Maximum length = 16
func (rcv *MonoRadar_Abridged) Mcv() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(56))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Status of the mode-C validity bit.
/// Example: /// Example: MCV
/// Constraints: Minimum length = 0, Maximum length = 16
/// Indicator that the mode-C response was garbled.
/// Example: /// Example: True
/// Constraints: No constraints specified.
func (rcv *MonoRadar_Abridged) Mcg() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(58))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

/// Indicator that the mode-C response was garbled.
/// Example: /// Example: True
/// Constraints: No constraints specified.
func (rcv *MonoRadar_Abridged) MutateMcg(n bool) bool {
	return rcv._tab.MutateBoolSlot(58, n)
}

/// Mode-1 interrogation response (mission code).
/// Example: /// Example: MISSION_CODE
/// Constraints: Minimum length = 0, Maximum length = 128
func (rcv *MonoRadar_Abridged) M1() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(60))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Mode-1 interrogation response (mission code).
/// Example: /// Example: MISSION_CODE
/// Constraints: Minimum length = 0, Maximum length = 128
/// Status of the mode-1 validity bit.
/// Example: /// Example: M1V
/// Constraints: Minimum length = 0, Maximum length = 16
func (rcv *MonoRadar_Abridged) M1v() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(62))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Status of the mode-1 validity bit.
/// Example: /// Example: M1V
/// Constraints: Minimum length = 0, Maximum length = 16
/// Indicator that the mode-1 response was garbled.
/// Example: /// Example: True
/// Constraints: No constraints specified.
func (rcv *MonoRadar_Abridged) M1g() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(64))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

/// Indicator that the mode-1 response was garbled.
/// Example: /// Example: True
/// Constraints: No constraints specified.
func (rcv *MonoRadar_Abridged) MutateM1g(n bool) bool {
	return rcv._tab.MutateBoolSlot(64, n)
}

/// Mode-2 interrogation response (military identification code).
/// Example: /// Example: MILITARY_ID_CODE
/// Constraints: Minimum length = 0, Maximum length = 128
func (rcv *MonoRadar_Abridged) M2() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(66))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Mode-2 interrogation response (military identification code).
/// Example: /// Example: MILITARY_ID_CODE
/// Constraints: Minimum length = 0, Maximum length = 128
/// Status of the mode-2 validity bit.
/// Example: /// Example: M2V
/// Constraints: Minimum length = 0, Maximum length = 16
func (rcv *MonoRadar_Abridged) M2v() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(68))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Status of the mode-2 validity bit.
/// Example: /// Example: M2V
/// Constraints: Minimum length = 0, Maximum length = 16
/// Status of the mode-2 X-Pulse response validation.
/// Example: /// Example: M2XV
/// Constraints: Minimum length = 0, Maximum length = 16
func (rcv *MonoRadar_Abridged) M2xv() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(70))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Status of the mode-2 X-Pulse response validation.
/// Example: /// Example: M2XV
/// Constraints: Minimum length = 0, Maximum length = 16
/// Indicator that the mode-2 response was garbled.
/// Example: /// Example: True
/// Constraints: No constraints specified.
func (rcv *MonoRadar_Abridged) M2g() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(72))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

/// Indicator that the mode-2 response was garbled.
/// Example: /// Example: True
/// Constraints: No constraints specified.
func (rcv *MonoRadar_Abridged) MutateM2g(n bool) bool {
	return rcv._tab.MutateBoolSlot(72, n)
}

/// Mode-3/A interrogation response (aircraft identification).
/// Example: /// Example: AIRCRAFT_ID
/// Constraints: Minimum length = 0, Maximum length = 128
func (rcv *MonoRadar_Abridged) M3a() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(74))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Mode-3/A interrogation response (aircraft identification).
/// Example: /// Example: AIRCRAFT_ID
/// Constraints: Minimum length = 0, Maximum length = 128
/// Status of the mode-3/A validity bit.
/// Example: /// Example: M3AV
/// Constraints: Minimum length = 0, Maximum length = 16
func (rcv *MonoRadar_Abridged) M3av() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(76))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Status of the mode-3/A validity bit.
/// Example: /// Example: M3AV
/// Constraints: Minimum length = 0, Maximum length = 16
/// Indicator that the mode-3/A response was garbled.
/// Example: /// Example: True
/// Constraints: No constraints specified.
func (rcv *MonoRadar_Abridged) M3ag() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(78))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

/// Indicator that the mode-3/A response was garbled.
/// Example: /// Example: True
/// Constraints: No constraints specified.
func (rcv *MonoRadar_Abridged) MutateM3ag(n bool) bool {
	return rcv._tab.MutateBoolSlot(78, n)
}

/// Status of the mode-3 X-Pulse response validation.
/// Example: /// Example: M3AXV
/// Constraints: Minimum length = 0, Maximum length = 16
func (rcv *MonoRadar_Abridged) M3axv() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(80))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Status of the mode-3 X-Pulse response validation.
/// Example: /// Example: M3AXV
/// Constraints: Minimum length = 0, Maximum length = 16
/// Mode-4 interrogation response (Identification Friend/Foe).
/// Example: /// Example: ID_FRIEND
/// Constraints: Minimum length = 0, Maximum length = 24
func (rcv *MonoRadar_Abridged) M4() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(82))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Mode-4 interrogation response (Identification Friend/Foe).
/// Example: /// Example: ID_FRIEND
/// Constraints: Minimum length = 0, Maximum length = 24
/// Status of the mode-4 validity bit.
/// Example: /// Example: M4V
/// Constraints: Minimum length = 0, Maximum length = 16
func (rcv *MonoRadar_Abridged) M4v() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(84))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Status of the mode-4 validity bit.
/// Example: /// Example: M4V
/// Constraints: Minimum length = 0, Maximum length = 16
/// Mode-4 D1 & D2 response status.
/// Example: /// Example: STATUS
/// Constraints: Minimum length = 0, Maximum length = 8
func (rcv *MonoRadar_Abridged) M4d1d2() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(86))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Mode-4 D1 & D2 response status.
/// Example: /// Example: STATUS
/// Constraints: Minimum length = 0, Maximum length = 8
/// Mode-S Comm B message data.
/// Example: /// Example: MSCOMMB
/// Constraints: Minimum length = 0, Maximum length = 16
func (rcv *MonoRadar_Abridged) Mscommb() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(88))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Mode-S Comm B message data.
/// Example: /// Example: MSCOMMB
/// Constraints: Minimum length = 0, Maximum length = 16
/// Flag indicating military emergency.
/// Example: /// Example: False
/// Constraints: No constraints specified.
func (rcv *MonoRadar_Abridged) Milemrgcy() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(90))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

/// Flag indicating military emergency.
/// Example: /// Example: False
/// Constraints: No constraints specified.
func (rcv *MonoRadar_Abridged) MutateMilemrgcy(n bool) bool {
	return rcv._tab.MutateBoolSlot(90, n)
}

/// 7500 squawk present (hijack).
/// Example: /// Example: False
/// Constraints: No constraints specified.
func (rcv *MonoRadar_Abridged) Code7500() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(92))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

/// 7500 squawk present (hijack).
/// Example: /// Example: False
/// Constraints: No constraints specified.
func (rcv *MonoRadar_Abridged) MutateCode7500(n bool) bool {
	return rcv._tab.MutateBoolSlot(92, n)
}

/// 7600 squawk present (loss of comm).
/// Example: /// Example: False
/// Constraints: No constraints specified.
func (rcv *MonoRadar_Abridged) Code7600() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(94))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

/// 7600 squawk present (loss of comm).
/// Example: /// Example: False
/// Constraints: No constraints specified.
func (rcv *MonoRadar_Abridged) MutateCode7600(n bool) bool {
	return rcv._tab.MutateBoolSlot(94, n)
}

/// 7700 squawk present (general emergency).
/// Example: /// Example: False
/// Constraints: No constraints specified.
func (rcv *MonoRadar_Abridged) Code7700() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(96))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

/// 7700 squawk present (general emergency).
/// Example: /// Example: False
/// Constraints: No constraints specified.
func (rcv *MonoRadar_Abridged) MutateCode7700(n bool) bool {
	return rcv._tab.MutateBoolSlot(96, n)
}

/// Target ground speed, in meters/second.
/// Example: /// Example: 30.23
/// Constraints: No constraints specified.
func (rcv *MonoRadar_Abridged) Grndspd() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(98))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Target ground speed, in meters/second.
/// Example: /// Example: 30.23
/// Constraints: No constraints specified.
func (rcv *MonoRadar_Abridged) MutateGrndspd(n float64) bool {
	return rcv._tab.MutateFloat64Slot(98, n)
}

/// Target heading, in degrees from true North at the target position.
/// Example: /// Example: 30.23
/// Constraints: No constraints specified.
func (rcv *MonoRadar_Abridged) Hdng() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(100))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Target heading, in degrees from true North at the target position.
/// Example: /// Example: 30.23
/// Constraints: No constraints specified.
func (rcv *MonoRadar_Abridged) MutateHdng(n float64) bool {
	return rcv._tab.MutateFloat64Slot(100, n)
}

/// Value representing a unique reference to a track record within a particular track file.  Included when the  radar station outputs tracks.
/// Example: /// Example: 30
/// Constraints: No constraints specified.
func (rcv *MonoRadar_Abridged) Trknum() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(102))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

/// Value representing a unique reference to a track record within a particular track file.  Included when the  radar station outputs tracks.
/// Example: /// Example: 30
/// Constraints: No constraints specified.
func (rcv *MonoRadar_Abridged) MutateTrknum(n int32) bool {
	return rcv._tab.MutateInt32Slot(102, n)
}

/// Type of sensor(s) maintaining track.
/// Example: /// Example: RAD
/// Constraints: Minimum length = 0, Maximum length = 16
func (rcv *MonoRadar_Abridged) Rad() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(104))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Type of sensor(s) maintaining track.
/// Example: /// Example: RAD
/// Constraints: Minimum length = 0, Maximum length = 16
/// Indication of Horizontal Maneuver detection.
/// Example: /// Example: MAH
/// Constraints: Minimum length = 0, Maximum length = 16
func (rcv *MonoRadar_Abridged) Mah() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(106))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Indication of Horizontal Maneuver detection.
/// Example: /// Example: MAH
/// Constraints: Minimum length = 0, Maximum length = 16
/// Climbing/Descending mode indicator.
/// Example: /// Example: CDM
/// Constraints: Minimum length = 0, Maximum length = 24
func (rcv *MonoRadar_Abridged) Cdm() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(108))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Climbing/Descending mode indicator.
/// Example: /// Example: CDM
/// Constraints: Minimum length = 0, Maximum length = 24
/// Array of local 2d-cartesian [x, y] coordinates of target, in km.
/// Example: /// Example: [1.2, 2.2]
/// Constraints: No constraints specified.
func (rcv *MonoRadar_Abridged) Cartpos(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(110))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *MonoRadar_Abridged) CartposLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(110))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

/// Array of local 2d-cartesian [x, y] coordinates of target, in km.
/// Example: /// Example: [1.2, 2.2]
/// Constraints: No constraints specified.
/// Runlength of the primary surveillance radar track, in degrees.
/// Example: /// Example: 44.23
/// Constraints: No constraints specified.
func (rcv *MonoRadar_Abridged) Psrrl() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(112))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Runlength of the primary surveillance radar track, in degrees.
/// Example: /// Example: 44.23
/// Constraints: No constraints specified.
func (rcv *MonoRadar_Abridged) MutatePsrrl(n float64) bool {
	return rcv._tab.MutateFloat64Slot(112, n)
}

/// Runlength of the secondary surveillance radar track, in degrees.
/// Example: /// Example: 44.23
/// Constraints: No constraints specified.
func (rcv *MonoRadar_Abridged) Ssrl() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(114))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Runlength of the secondary surveillance radar track, in degrees.
/// Example: /// Example: 44.23
/// Constraints: No constraints specified.
func (rcv *MonoRadar_Abridged) MutateSsrl(n float64) bool {
	return rcv._tab.MutateFloat64Slot(114, n)
}

/// Target range delta between PSR and SSR (reference PSR-SSR), in km.
/// Example: /// Example: 44.23
/// Constraints: No constraints specified.
func (rcv *MonoRadar_Abridged) Rngdelt() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(116))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Target range delta between PSR and SSR (reference PSR-SSR), in km.
/// Example: /// Example: 44.23
/// Constraints: No constraints specified.
func (rcv *MonoRadar_Abridged) MutateRngdelt(n float64) bool {
	return rcv._tab.MutateFloat64Slot(116, n)
}

/// Target azimuth delta between PSR and SSR (reference PSR-SSR), in degrees.
/// Example: /// Example: 44.23
/// Constraints: No constraints specified.
func (rcv *MonoRadar_Abridged) Azdelt() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(118))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Target azimuth delta between PSR and SSR (reference PSR-SSR), in degrees.
/// Example: /// Example: 44.23
/// Constraints: No constraints specified.
func (rcv *MonoRadar_Abridged) MutateAzdelt(n float64) bool {
	return rcv._tab.MutateFloat64Slot(118, n)
}

/// Warning/Error Conditions and Target Classification.
/// Example: /// Example: ['WARNING', 'WARNING']
/// Constraints: No constraints specified.
func (rcv *MonoRadar_Abridged) Wectc(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(120))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *MonoRadar_Abridged) WectcLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(120))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

/// Warning/Error Conditions and Target Classification.
/// Example: /// Example: ['WARNING', 'WARNING']
/// Constraints: No constraints specified.
/// Flag indicating report separated from different responses at same range.  Azimuth may have larger than normal error when present.
/// Example: /// Example: True
/// Constraints: No constraints specified.
func (rcv *MonoRadar_Abridged) Mrgrpt() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(122))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

/// Flag indicating report separated from different responses at same range.  Azimuth may have larger than normal error when present.
/// Example: /// Example: True
/// Constraints: No constraints specified.
func (rcv *MonoRadar_Abridged) MutateMrgrpt(n bool) bool {
	return rcv._tab.MutateBoolSlot(122, n)
}

/// ARTS quality.
/// Example: /// Example: QUALITY
/// Constraints: Minimum length = 0, Maximum length = 64
func (rcv *MonoRadar_Abridged) Artsqual() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(124))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// ARTS quality.
/// Example: /// Example: QUALITY
/// Constraints: Minimum length = 0, Maximum length = 64
/// Track eligibility flag.
/// Example: /// Example: ELIGIBILITY
/// Constraints: Minimum length = 0, Maximum length = 24
func (rcv *MonoRadar_Abridged) Trkelig() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(126))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Track eligibility flag.
/// Example: /// Example: ELIGIBILITY
/// Constraints: Minimum length = 0, Maximum length = 24
/// Target confidence.
/// Example: /// Example: CONFIDENCE
/// Constraints: Minimum length = 0, Maximum length = 24
func (rcv *MonoRadar_Abridged) Tgtconf() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(128))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Target confidence.
/// Example: /// Example: CONFIDENCE
/// Constraints: Minimum length = 0, Maximum length = 24
/// Target correlation flag.
/// Example: /// Example: CORRELATION
/// Constraints: Minimum length = 0, Maximum length = 16
func (rcv *MonoRadar_Abridged) Tgtcorr() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(130))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Target correlation flag.
/// Example: /// Example: CORRELATION
/// Constraints: Minimum length = 0, Maximum length = 16
/// Data time-in-storage, in seconds. This is the amount of time elapsed between target detection and message transmission.
/// Example: /// Example: 0.4
/// Constraints: No constraints specified.
func (rcv *MonoRadar_Abridged) Tis() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(132))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Data time-in-storage, in seconds. This is the amount of time elapsed between target detection and message transmission.
/// Example: /// Example: 0.4
/// Constraints: No constraints specified.
func (rcv *MonoRadar_Abridged) MutateTis(n float64) bool {
	return rcv._tab.MutateFloat64Slot(132, n)
}

/// Optional array of provider/source specific tags for this data, where each element is no longer than 32 characters, used for implementing data owner conditional access controls to restrict access to the data. Should be left null by data providers unless conditional access controls are coordinated with the UDL team.
/// Example: /// Example: ['TAG1', 'TAG2']
/// Constraints: No constraints specified.
func (rcv *MonoRadar_Abridged) Tags(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(134))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *MonoRadar_Abridged) TagsLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(134))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

/// Optional array of provider/source specific tags for this data, where each element is no longer than 32 characters, used for implementing data owner conditional access controls to restrict access to the data. Should be left null by data providers unless conditional access controls are coordinated with the UDL team.
/// Example: /// Example: ['TAG1', 'TAG2']
/// Constraints: No constraints specified.
/// Optional identifier provided by observation source to indicate the sensor identifier which produced this observation.This may be an internal identifier and not necessarily a valid sensor ID.
/// Example: /// Example: ORIGSENSOR-ID
/// Constraints: Minimum length = 0, Maximum length = 64
func (rcv *MonoRadar_Abridged) OrigSensorId() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(136))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Optional identifier provided by observation source to indicate the sensor identifier which produced this observation.This may be an internal identifier and not necessarily a valid sensor ID.
/// Example: /// Example: ORIGSENSOR-ID
/// Constraints: Minimum length = 0, Maximum length = 64
/// Source of the data.
/// Example: /// Example: Bluestaq
/// Constraints: Minimum length = 1, Maximum length = 64
func (rcv *MonoRadar_Abridged) Source() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(138))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Source of the data.
/// Example: /// Example: Bluestaq
/// Constraints: Minimum length = 1, Maximum length = 64
/// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
/// Example: /// Example: THIRD_PARTY_DATASOURCE
/// Constraints: Minimum length = 0, Maximum length = 64
func (rcv *MonoRadar_Abridged) Origin() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(140))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
/// Example: /// Example: THIRD_PARTY_DATASOURCE
/// Constraints: Minimum length = 0, Maximum length = 64
/// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
/// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
/// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
/// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
/// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
/// Example: /// Example: TEST
/// Constraints: Minimum length = 1, Maximum length = 32
func (rcv *MonoRadar_Abridged) DataMode() MonoRadar_Abridged_dataMode_Enum {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(142))
	if o != 0 {
		return MonoRadar_Abridged_dataMode_Enum(rcv._tab.GetInt8(o + rcv._tab.Pos))
	}
	return 0
}

/// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
/// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
/// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
/// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
/// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
/// Example: /// Example: TEST
/// Constraints: Minimum length = 1, Maximum length = 32
func (rcv *MonoRadar_Abridged) MutateDataMode(n MonoRadar_Abridged_dataMode_Enum) bool {
	return rcv._tab.MutateInt8Slot(142, int8(n))
}

/// Time the row was created in the database.
/// Example: /// Example: 2018-01-01T16:00:00.123Z
/// Constraints: No constraints specified.
func (rcv *MonoRadar_Abridged) CreatedAt() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(144))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Time the row was created in the database.
/// Example: /// Example: 2018-01-01T16:00:00.123Z
/// Constraints: No constraints specified.
/// Application user who created the row in the database.
/// Example: /// Example: some.user
/// Constraints: Minimum length = 1, Maximum length = 64
func (rcv *MonoRadar_Abridged) CreatedBy() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(146))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Application user who created the row in the database.
/// Example: /// Example: some.user
/// Constraints: Minimum length = 1, Maximum length = 64
/// The originating source network on which this record was created, auto-populated by the system.
/// Example: /// Example: ORIG
/// Constraints: Minimum length = 1, Maximum length = 32
func (rcv *MonoRadar_Abridged) OrigNetwork() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(148))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The originating source network on which this record was created, auto-populated by the system.
/// Example: /// Example: ORIG
/// Constraints: Minimum length = 1, Maximum length = 32
func MonoRadar_AbridgedStart(builder *flatbuffers.Builder) {
	builder.StartObject(73)
}
func MonoRadar_AbridgedAddId(builder *flatbuffers.Builder, id flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(id), 0)
}
func MonoRadar_AbridgedAddClassificationMarking(builder *flatbuffers.Builder, classificationMarking flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(classificationMarking), 0)
}
func MonoRadar_AbridgedAddTti(builder *flatbuffers.Builder, tti flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(tti), 0)
}
func MonoRadar_AbridgedAddIdSensor(builder *flatbuffers.Builder, idSensor flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(3, flatbuffers.UOffsetT(idSensor), 0)
}
func MonoRadar_AbridgedAddSenlat(builder *flatbuffers.Builder, senlat float64) {
	builder.PrependFloat64Slot(4, senlat, 0.0)
}
func MonoRadar_AbridgedAddSenlon(builder *flatbuffers.Builder, senlon float64) {
	builder.PrependFloat64Slot(5, senlon, 0.0)
}
func MonoRadar_AbridgedAddSenalt(builder *flatbuffers.Builder, senalt float64) {
	builder.PrependFloat64Slot(6, senalt, 0.0)
}
func MonoRadar_AbridgedAddSac(builder *flatbuffers.Builder, sac int32) {
	builder.PrependInt32Slot(7, sac, 0)
}
func MonoRadar_AbridgedAddSic(builder *flatbuffers.Builder, sic int32) {
	builder.PrependInt32Slot(8, sic, 0)
}
func MonoRadar_AbridgedAddTgtid(builder *flatbuffers.Builder, tgtid flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(9, flatbuffers.UOffsetT(tgtid), 0)
}
func MonoRadar_AbridgedAddAddr(builder *flatbuffers.Builder, addr flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(10, flatbuffers.UOffsetT(addr), 0)
}
func MonoRadar_AbridgedAddMsgfmt(builder *flatbuffers.Builder, msgfmt flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(11, flatbuffers.UOffsetT(msgfmt), 0)
}
func MonoRadar_AbridgedAddMsgtyp(builder *flatbuffers.Builder, msgtyp flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(12, flatbuffers.UOffsetT(msgtyp), 0)
}
func MonoRadar_AbridgedAddAf(builder *flatbuffers.Builder, af bool) {
	builder.PrependBoolSlot(13, af, false)
}
func MonoRadar_AbridgedAddFaa(builder *flatbuffers.Builder, faa bool) {
	builder.PrependBoolSlot(14, faa, false)
}
func MonoRadar_AbridgedAddSpi(builder *flatbuffers.Builder, spi bool) {
	builder.PrependBoolSlot(15, spi, false)
}
func MonoRadar_AbridgedAddAims(builder *flatbuffers.Builder, aims bool) {
	builder.PrependBoolSlot(16, aims, false)
}
func MonoRadar_AbridgedAddMti(builder *flatbuffers.Builder, mti bool) {
	builder.PrependBoolSlot(17, mti, false)
}
func MonoRadar_AbridgedAddBcnhits(builder *flatbuffers.Builder, bcnhits int32) {
	builder.PrependInt32Slot(18, bcnhits, 0)
}
func MonoRadar_AbridgedAddTs(builder *flatbuffers.Builder, ts flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(19, flatbuffers.UOffsetT(ts), 0)
}
func MonoRadar_AbridgedAddMsgts(builder *flatbuffers.Builder, msgts flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(20, flatbuffers.UOffsetT(msgts), 0)
}
func MonoRadar_AbridgedAddRng(builder *flatbuffers.Builder, rng float64) {
	builder.PrependFloat64Slot(21, rng, 0.0)
}
func MonoRadar_AbridgedAddAz(builder *flatbuffers.Builder, az float64) {
	builder.PrependFloat64Slot(22, az, 0.0)
}
func MonoRadar_AbridgedAddAcp(builder *flatbuffers.Builder, acp int32) {
	builder.PrependInt32Slot(23, acp, 0)
}
func MonoRadar_AbridgedAddAlt3d(builder *flatbuffers.Builder, alt3d float64) {
	builder.PrependFloat64Slot(24, alt3d, 0.0)
}
func MonoRadar_AbridgedAddMc(builder *flatbuffers.Builder, mc float64) {
	builder.PrependFloat64Slot(25, mc, 0.0)
}
func MonoRadar_AbridgedAddMcv(builder *flatbuffers.Builder, mcv flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(26, flatbuffers.UOffsetT(mcv), 0)
}
func MonoRadar_AbridgedAddMcg(builder *flatbuffers.Builder, mcg bool) {
	builder.PrependBoolSlot(27, mcg, false)
}
func MonoRadar_AbridgedAddM1(builder *flatbuffers.Builder, m1 flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(28, flatbuffers.UOffsetT(m1), 0)
}
func MonoRadar_AbridgedAddM1v(builder *flatbuffers.Builder, m1v flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(29, flatbuffers.UOffsetT(m1v), 0)
}
func MonoRadar_AbridgedAddM1g(builder *flatbuffers.Builder, m1g bool) {
	builder.PrependBoolSlot(30, m1g, false)
}
func MonoRadar_AbridgedAddM2(builder *flatbuffers.Builder, m2 flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(31, flatbuffers.UOffsetT(m2), 0)
}
func MonoRadar_AbridgedAddM2v(builder *flatbuffers.Builder, m2v flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(32, flatbuffers.UOffsetT(m2v), 0)
}
func MonoRadar_AbridgedAddM2xv(builder *flatbuffers.Builder, m2xv flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(33, flatbuffers.UOffsetT(m2xv), 0)
}
func MonoRadar_AbridgedAddM2g(builder *flatbuffers.Builder, m2g bool) {
	builder.PrependBoolSlot(34, m2g, false)
}
func MonoRadar_AbridgedAddM3a(builder *flatbuffers.Builder, m3a flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(35, flatbuffers.UOffsetT(m3a), 0)
}
func MonoRadar_AbridgedAddM3av(builder *flatbuffers.Builder, m3av flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(36, flatbuffers.UOffsetT(m3av), 0)
}
func MonoRadar_AbridgedAddM3ag(builder *flatbuffers.Builder, m3ag bool) {
	builder.PrependBoolSlot(37, m3ag, false)
}
func MonoRadar_AbridgedAddM3axv(builder *flatbuffers.Builder, m3axv flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(38, flatbuffers.UOffsetT(m3axv), 0)
}
func MonoRadar_AbridgedAddM4(builder *flatbuffers.Builder, m4 flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(39, flatbuffers.UOffsetT(m4), 0)
}
func MonoRadar_AbridgedAddM4v(builder *flatbuffers.Builder, m4v flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(40, flatbuffers.UOffsetT(m4v), 0)
}
func MonoRadar_AbridgedAddM4d1d2(builder *flatbuffers.Builder, m4d1d2 flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(41, flatbuffers.UOffsetT(m4d1d2), 0)
}
func MonoRadar_AbridgedAddMscommb(builder *flatbuffers.Builder, mscommb flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(42, flatbuffers.UOffsetT(mscommb), 0)
}
func MonoRadar_AbridgedAddMilemrgcy(builder *flatbuffers.Builder, milemrgcy bool) {
	builder.PrependBoolSlot(43, milemrgcy, false)
}
func MonoRadar_AbridgedAddCode7500(builder *flatbuffers.Builder, code7500 bool) {
	builder.PrependBoolSlot(44, code7500, false)
}
func MonoRadar_AbridgedAddCode7600(builder *flatbuffers.Builder, code7600 bool) {
	builder.PrependBoolSlot(45, code7600, false)
}
func MonoRadar_AbridgedAddCode7700(builder *flatbuffers.Builder, code7700 bool) {
	builder.PrependBoolSlot(46, code7700, false)
}
func MonoRadar_AbridgedAddGrndspd(builder *flatbuffers.Builder, grndspd float64) {
	builder.PrependFloat64Slot(47, grndspd, 0.0)
}
func MonoRadar_AbridgedAddHdng(builder *flatbuffers.Builder, hdng float64) {
	builder.PrependFloat64Slot(48, hdng, 0.0)
}
func MonoRadar_AbridgedAddTrknum(builder *flatbuffers.Builder, trknum int32) {
	builder.PrependInt32Slot(49, trknum, 0)
}
func MonoRadar_AbridgedAddRad(builder *flatbuffers.Builder, rad flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(50, flatbuffers.UOffsetT(rad), 0)
}
func MonoRadar_AbridgedAddMah(builder *flatbuffers.Builder, mah flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(51, flatbuffers.UOffsetT(mah), 0)
}
func MonoRadar_AbridgedAddCdm(builder *flatbuffers.Builder, cdm flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(52, flatbuffers.UOffsetT(cdm), 0)
}
func MonoRadar_AbridgedAddCartpos(builder *flatbuffers.Builder, cartpos flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(53, flatbuffers.UOffsetT(cartpos), 0)
}
func MonoRadar_AbridgedStartCartposVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func MonoRadar_AbridgedAddPsrrl(builder *flatbuffers.Builder, psrrl float64) {
	builder.PrependFloat64Slot(54, psrrl, 0.0)
}
func MonoRadar_AbridgedAddSsrl(builder *flatbuffers.Builder, ssrl float64) {
	builder.PrependFloat64Slot(55, ssrl, 0.0)
}
func MonoRadar_AbridgedAddRngdelt(builder *flatbuffers.Builder, rngdelt float64) {
	builder.PrependFloat64Slot(56, rngdelt, 0.0)
}
func MonoRadar_AbridgedAddAzdelt(builder *flatbuffers.Builder, azdelt float64) {
	builder.PrependFloat64Slot(57, azdelt, 0.0)
}
func MonoRadar_AbridgedAddWectc(builder *flatbuffers.Builder, wectc flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(58, flatbuffers.UOffsetT(wectc), 0)
}
func MonoRadar_AbridgedStartWectcVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func MonoRadar_AbridgedAddMrgrpt(builder *flatbuffers.Builder, mrgrpt bool) {
	builder.PrependBoolSlot(59, mrgrpt, false)
}
func MonoRadar_AbridgedAddArtsqual(builder *flatbuffers.Builder, artsqual flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(60, flatbuffers.UOffsetT(artsqual), 0)
}
func MonoRadar_AbridgedAddTrkelig(builder *flatbuffers.Builder, trkelig flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(61, flatbuffers.UOffsetT(trkelig), 0)
}
func MonoRadar_AbridgedAddTgtconf(builder *flatbuffers.Builder, tgtconf flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(62, flatbuffers.UOffsetT(tgtconf), 0)
}
func MonoRadar_AbridgedAddTgtcorr(builder *flatbuffers.Builder, tgtcorr flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(63, flatbuffers.UOffsetT(tgtcorr), 0)
}
func MonoRadar_AbridgedAddTis(builder *flatbuffers.Builder, tis float64) {
	builder.PrependFloat64Slot(64, tis, 0.0)
}
func MonoRadar_AbridgedAddTags(builder *flatbuffers.Builder, tags flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(65, flatbuffers.UOffsetT(tags), 0)
}
func MonoRadar_AbridgedStartTagsVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func MonoRadar_AbridgedAddOrigSensorId(builder *flatbuffers.Builder, origSensorId flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(66, flatbuffers.UOffsetT(origSensorId), 0)
}
func MonoRadar_AbridgedAddSource(builder *flatbuffers.Builder, source flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(67, flatbuffers.UOffsetT(source), 0)
}
func MonoRadar_AbridgedAddOrigin(builder *flatbuffers.Builder, origin flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(68, flatbuffers.UOffsetT(origin), 0)
}
func MonoRadar_AbridgedAddDataMode(builder *flatbuffers.Builder, dataMode MonoRadar_Abridged_dataMode_Enum) {
	builder.PrependInt8Slot(69, int8(dataMode), 0)
}
func MonoRadar_AbridgedAddCreatedAt(builder *flatbuffers.Builder, createdAt flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(70, flatbuffers.UOffsetT(createdAt), 0)
}
func MonoRadar_AbridgedAddCreatedBy(builder *flatbuffers.Builder, createdBy flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(71, flatbuffers.UOffsetT(createdBy), 0)
}
func MonoRadar_AbridgedAddOrigNetwork(builder *flatbuffers.Builder, origNetwork flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(72, flatbuffers.UOffsetT(origNetwork), 0)
}
func MonoRadar_AbridgedEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
