// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package LinkStatus_Abridged

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

/// /// Captures link status.
type LinkStatus_Abridged struct {
	_tab flatbuffers.Table
}

const LinkStatus_AbridgedIdentifier = "LINK"

func GetRootAsLinkStatus_Abridged(buf []byte, offset flatbuffers.UOffsetT) *LinkStatus_Abridged {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &LinkStatus_Abridged{}
	x.Init(buf, n+offset)
	return x
}

func FinishLinkStatus_AbridgedBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	identifierBytes := []byte(LinkStatus_AbridgedIdentifier)
	builder.FinishWithFileIdentifier(offset, identifierBytes)
}

func LinkStatus_AbridgedBufferHasIdentifier(buf []byte) bool {
	return flatbuffers.BufferHasIdentifier(buf, LinkStatus_AbridgedIdentifier)
}

func GetSizePrefixedRootAsLinkStatus_Abridged(buf []byte, offset flatbuffers.UOffsetT) *LinkStatus_Abridged {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &LinkStatus_Abridged{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedLinkStatus_AbridgedBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	identifierBytes := []byte(LinkStatus_AbridgedIdentifier)
	builder.FinishSizePrefixedWithFileIdentifier(offset, identifierBytes)
}

func SizePrefixedLinkStatus_AbridgedBufferHasIdentifier(buf []byte) bool {
	return flatbuffers.SizePrefixedBufferHasIdentifier(buf, LinkStatus_AbridgedIdentifier)
}

func (rcv *LinkStatus_Abridged) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *LinkStatus_Abridged) Table() flatbuffers.Table {
	return rcv._tab
}

/// Unique identifier of the record, auto-generated by the system.
/// Example: /// Example: LINKSTATUS-ID
/// Constraints: Minimum length = 1, Maximum length = 36
func (rcv *LinkStatus_Abridged) Id() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Unique identifier of the record, auto-generated by the system.
/// Example: /// Example: LINKSTATUS-ID
/// Constraints: Minimum length = 1, Maximum length = 36
/// Classification marking of the data in IC/CAPCO Portion-marked format.
/// Example: /// Example: U
/// Constraints: Minimum length = 1, Maximum length = 128
func (rcv *LinkStatus_Abridged) ClassificationMarking() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Classification marking of the data in IC/CAPCO Portion-marked format.
/// Example: /// Example: U
/// Constraints: Minimum length = 1, Maximum length = 128
/// Unique ID of the on-orbit satellite (Sat-1) forming the link.  A null value for idOnOrbit1 indicates that the link is formed over a LEO/MEO constellation.
/// Example: /// Example: REF-ONORBIT1-ID
/// Constraints: Minimum length = 0, Maximum length = 36
func (rcv *LinkStatus_Abridged) IdOnOrbit1() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Unique ID of the on-orbit satellite (Sat-1) forming the link.  A null value for idOnOrbit1 indicates that the link is formed over a LEO/MEO constellation.
/// Example: /// Example: REF-ONORBIT1-ID
/// Constraints: Minimum length = 0, Maximum length = 36
/// Unique ID of the on-orbit satellite (Sat-2) forming the link.  A null value for idOnOrbit2 indicates either a link employing only Sat-1 or a link formed over a LEO/MEO constellation.
/// Example: /// Example: REF-ONORBIT2-ID
/// Constraints: Minimum length = 0, Maximum length = 36
func (rcv *LinkStatus_Abridged) IdOnOrbit2() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Unique ID of the on-orbit satellite (Sat-2) forming the link.  A null value for idOnOrbit2 indicates either a link employing only Sat-1 or a link formed over a LEO/MEO constellation.
/// Example: /// Example: REF-ONORBIT2-ID
/// Constraints: Minimum length = 0, Maximum length = 36
/// The link establishment time, or the time that the link becomes available for use, in ISO8601 UTC format.
/// Example: /// Example: 2021-01-01T01:01:01.123456Z
/// Constraints: No constraints specified.
func (rcv *LinkStatus_Abridged) LinkStartTime() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The link establishment time, or the time that the link becomes available for use, in ISO8601 UTC format.
/// Example: /// Example: 2021-01-01T01:01:01.123456Z
/// Constraints: No constraints specified.
/// The link termination time, or the time that the link becomes unavailable for use, in ISO8601 UTC format.
/// Example: /// Example: 2021-01-01T01:01:01.123456Z
/// Constraints: No constraints specified.
func (rcv *LinkStatus_Abridged) LinkStopTime() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The link termination time, or the time that the link becomes unavailable for use, in ISO8601 UTC format.
/// Example: /// Example: 2021-01-01T01:01:01.123456Z
/// Constraints: No constraints specified.
/// The constellation name if the link is established over a LEO/MEO constellation.  In this case, idOnOrbit1 and idOnOrbit2 will be null.
/// Example: /// Example: Fornax
/// Constraints: Minimum length = 0, Maximum length = 128
func (rcv *LinkStatus_Abridged) Constellation() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The constellation name if the link is established over a LEO/MEO constellation.  In this case, idOnOrbit1 and idOnOrbit2 will be null.
/// Example: /// Example: Fornax
/// Constraints: Minimum length = 0, Maximum length = 128
/// The name or description of the link.
/// Example: /// Example: Example description
/// Constraints: Minimum length = 1, Maximum length = 64
func (rcv *LinkStatus_Abridged) LinkName() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(18))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The name or description of the link.
/// Example: /// Example: Example description
/// Constraints: Minimum length = 1, Maximum length = 64
/// The type of the link.
/// Example: /// Example: Example link
/// Constraints: Minimum length = 0, Maximum length = 64
func (rcv *LinkStatus_Abridged) LinkType() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(20))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The type of the link.
/// Example: /// Example: Example link
/// Constraints: Minimum length = 0, Maximum length = 64
/// The RF band employed by the link (e.g. MIL-KA, COM-KA, X-BAND, C-BAND, etc.).
/// Example: /// Example: MIL-KA
/// Constraints: Minimum length = 0, Maximum length = 24
func (rcv *LinkStatus_Abridged) Band() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(22))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The RF band employed by the link (e.g. MIL-KA, COM-KA, X-BAND, C-BAND, etc.).
/// Example: /// Example: MIL-KA
/// Constraints: Minimum length = 0, Maximum length = 24
/// The ID of beam-1 forming the link.  In the case of two sat link, beam-1 corresponds to Sat-1.
/// Example: /// Example: REF-BEAM1-ID
/// Constraints: Minimum length = 0, Maximum length = 36
func (rcv *LinkStatus_Abridged) IdBeam1() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(24))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The ID of beam-1 forming the link.  In the case of two sat link, beam-1 corresponds to Sat-1.
/// Example: /// Example: REF-BEAM1-ID
/// Constraints: Minimum length = 0, Maximum length = 36
/// The name or description of link endpoint-1, corresponding to beam-1.
/// Example: /// Example: Example endpoint
/// Constraints: Minimum length = 1, Maximum length = 64
func (rcv *LinkStatus_Abridged) EndPoint1Name() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(26))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The name or description of link endpoint-1, corresponding to beam-1.
/// Example: /// Example: Example endpoint
/// Constraints: Minimum length = 1, Maximum length = 64
/// Latitude of link endpoint-1, WGS-84 in degrees. -90 to 90 degrees (negative values south of equator).
/// Example: /// Example: 45.23
/// Constraints: No constraints specified.
func (rcv *LinkStatus_Abridged) EndPoint1Lat() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(28))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Latitude of link endpoint-1, WGS-84 in degrees. -90 to 90 degrees (negative values south of equator).
/// Example: /// Example: 45.23
/// Constraints: No constraints specified.
func (rcv *LinkStatus_Abridged) MutateEndPoint1Lat(n float64) bool {
	return rcv._tab.MutateFloat64Slot(28, n)
}

/// Longitude of link endpoint-1, WGS-84 longitude in degrees. -180 to 180 degrees (negative values west of Prime Meridian).
/// Example: /// Example: 80.23
/// Constraints: No constraints specified.
func (rcv *LinkStatus_Abridged) EndPoint1Lon() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(30))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Longitude of link endpoint-1, WGS-84 longitude in degrees. -180 to 180 degrees (negative values west of Prime Meridian).
/// Example: /// Example: 80.23
/// Constraints: No constraints specified.
func (rcv *LinkStatus_Abridged) MutateEndPoint1Lon(n float64) bool {
	return rcv._tab.MutateFloat64Slot(30, n)
}

/// The ID of beam-2 forming the link.  In the case of two sat link, beam-2 corresponds to Sat-2.
/// Example: /// Example: REF-BEAM2-ID
/// Constraints: Minimum length = 0, Maximum length = 36
func (rcv *LinkStatus_Abridged) IdBeam2() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(32))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The ID of beam-2 forming the link.  In the case of two sat link, beam-2 corresponds to Sat-2.
/// Example: /// Example: REF-BEAM2-ID
/// Constraints: Minimum length = 0, Maximum length = 36
/// The name or description of link endpoint-2, corresponding to beam-2.
/// Example: /// Example: Example description
/// Constraints: Minimum length = 1, Maximum length = 64
func (rcv *LinkStatus_Abridged) EndPoint2Name() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(34))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The name or description of link endpoint-2, corresponding to beam-2.
/// Example: /// Example: Example description
/// Constraints: Minimum length = 1, Maximum length = 64
/// Latitude of link endpoint-2, WGS-84 in degrees. -90 to 90 degrees (negative values south of equator).
/// Example: /// Example: 45.23
/// Constraints: No constraints specified.
func (rcv *LinkStatus_Abridged) EndPoint2Lat() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(36))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Latitude of link endpoint-2, WGS-84 in degrees. -90 to 90 degrees (negative values south of equator).
/// Example: /// Example: 45.23
/// Constraints: No constraints specified.
func (rcv *LinkStatus_Abridged) MutateEndPoint2Lat(n float64) bool {
	return rcv._tab.MutateFloat64Slot(36, n)
}

/// Longitude of link endpoint-2, WGS-84 longitude in degrees. -180 to 180 degrees (negative values west of Prime Meridian).
/// Example: /// Example: 80.23
/// Constraints: No constraints specified.
func (rcv *LinkStatus_Abridged) EndPoint2Lon() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(38))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Longitude of link endpoint-2, WGS-84 longitude in degrees. -180 to 180 degrees (negative values west of Prime Meridian).
/// Example: /// Example: 80.23
/// Constraints: No constraints specified.
func (rcv *LinkStatus_Abridged) MutateEndPoint2Lon(n float64) bool {
	return rcv._tab.MutateFloat64Slot(38, n)
}

/// The endpoint-1 to endpoint-2 data rate, in kbps.
/// Example: /// Example: 10.23
/// Constraints: No constraints specified.
func (rcv *LinkStatus_Abridged) DataRate1To2() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(40))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// The endpoint-1 to endpoint-2 data rate, in kbps.
/// Example: /// Example: 10.23
/// Constraints: No constraints specified.
func (rcv *LinkStatus_Abridged) MutateDataRate1To2(n float64) bool {
	return rcv._tab.MutateFloat64Slot(40, n)
}

/// The endpoint-2 to endpoint-1 data rate, in kbps.
/// Example: /// Example: 10.23
/// Constraints: No constraints specified.
func (rcv *LinkStatus_Abridged) DataRate2To1() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(42))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// The endpoint-2 to endpoint-1 data rate, in kbps.
/// Example: /// Example: 10.23
/// Constraints: No constraints specified.
func (rcv *LinkStatus_Abridged) MutateDataRate2To1(n float64) bool {
	return rcv._tab.MutateFloat64Slot(42, n)
}

/// The state of the link (e.g. OK, DEGRADED-WEATHER, DEGRADED-EMI, etc.).
/// Example: /// Example: DEGRADED-WEATHER
/// Constraints: Minimum length = 0, Maximum length = 24
func (rcv *LinkStatus_Abridged) LinkState() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(44))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The state of the link (e.g. OK, DEGRADED-WEATHER, DEGRADED-EMI, etc.).
/// Example: /// Example: DEGRADED-WEATHER
/// Constraints: Minimum length = 0, Maximum length = 24
/// The SYSCAP mission status of the system(s) forming the link.
/// Example: /// Example: Example status
/// Constraints: Minimum length = 0, Maximum length = 24
func (rcv *LinkStatus_Abridged) SysCap() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(46))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The SYSCAP mission status of the system(s) forming the link.
/// Example: /// Example: Example status
/// Constraints: Minimum length = 0, Maximum length = 24
/// The OPSCAP mission status of the system(s) forming the link.
/// Example: /// Example: Example status
/// Constraints: Minimum length = 0, Maximum length = 24
func (rcv *LinkStatus_Abridged) OpsCap() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(48))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The OPSCAP mission status of the system(s) forming the link.
/// Example: /// Example: Example status
/// Constraints: Minimum length = 0, Maximum length = 24
/// Time the row was created in the database, auto-populated by the system.
/// Example: /// Example: 2018-01-01T16:00:00.123Z
/// Constraints: No constraints specified.
func (rcv *LinkStatus_Abridged) CreatedAt() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(50))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Time the row was created in the database, auto-populated by the system.
/// Example: /// Example: 2018-01-01T16:00:00.123Z
/// Constraints: No constraints specified.
/// Application user who created the row in the database, auto-populated by the system.
/// Example: /// Example: some.user
/// Constraints: Minimum length = 1, Maximum length = 64
func (rcv *LinkStatus_Abridged) CreatedBy() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(52))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Application user who created the row in the database, auto-populated by the system.
/// Example: /// Example: some.user
/// Constraints: Minimum length = 1, Maximum length = 64
/// Source of the data.
/// Example: /// Example: Bluestaq
/// Constraints: Minimum length = 1, Maximum length = 64
func (rcv *LinkStatus_Abridged) Source() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(54))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Source of the data.
/// Example: /// Example: Bluestaq
/// Constraints: Minimum length = 1, Maximum length = 64
/// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
/// Example: /// Example: THIRD_PARTY_DATASOURCE
/// Constraints: Minimum length = 0, Maximum length = 64
func (rcv *LinkStatus_Abridged) Origin() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(56))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
/// Example: /// Example: THIRD_PARTY_DATASOURCE
/// Constraints: Minimum length = 0, Maximum length = 64
/// The originating source network on which this record was created, auto-populated by the system.
/// Example: /// Example: ORIG
/// Constraints: Minimum length = 1, Maximum length = 32
func (rcv *LinkStatus_Abridged) OrigNetwork() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(58))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The originating source network on which this record was created, auto-populated by the system.
/// Example: /// Example: ORIG
/// Constraints: Minimum length = 1, Maximum length = 32
/// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
/// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
/// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
/// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
/// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
/// Example: /// Example: TEST
/// Constraints: Minimum length = 1, Maximum length = 32
func (rcv *LinkStatus_Abridged) DataMode() LinkStatus_Abridged_dataMode_Enum {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(60))
	if o != 0 {
		return LinkStatus_Abridged_dataMode_Enum(rcv._tab.GetInt8(o + rcv._tab.Pos))
	}
	return 0
}

/// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
/// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
/// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
/// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
/// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
/// Example: /// Example: TEST
/// Constraints: Minimum length = 1, Maximum length = 32
func (rcv *LinkStatus_Abridged) MutateDataMode(n LinkStatus_Abridged_dataMode_Enum) bool {
	return rcv._tab.MutateInt8Slot(60, int8(n))
}

/// Satellite/catalog number of the target on-orbit primary object.
/// Example: /// Example: 1
/// Constraints: No constraints specified.
func (rcv *LinkStatus_Abridged) SatNo1() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(62))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

/// Satellite/catalog number of the target on-orbit primary object.
/// Example: /// Example: 1
/// Constraints: No constraints specified.
func (rcv *LinkStatus_Abridged) MutateSatNo1(n int32) bool {
	return rcv._tab.MutateInt32Slot(62, n)
}

/// Satellite/catalog number of the target on-orbit secondary object.
/// Example: /// Example: 2
/// Constraints: No constraints specified.
func (rcv *LinkStatus_Abridged) SatNo2() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(64))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

/// Satellite/catalog number of the target on-orbit secondary object.
/// Example: /// Example: 2
/// Constraints: No constraints specified.
func (rcv *LinkStatus_Abridged) MutateSatNo2(n int32) bool {
	return rcv._tab.MutateInt32Slot(64, n)
}

func LinkStatus_AbridgedStart(builder *flatbuffers.Builder) {
	builder.StartObject(31)
}
func LinkStatus_AbridgedAddId(builder *flatbuffers.Builder, id flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(id), 0)
}
func LinkStatus_AbridgedAddClassificationMarking(builder *flatbuffers.Builder, classificationMarking flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(classificationMarking), 0)
}
func LinkStatus_AbridgedAddIdOnOrbit1(builder *flatbuffers.Builder, idOnOrbit1 flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(idOnOrbit1), 0)
}
func LinkStatus_AbridgedAddIdOnOrbit2(builder *flatbuffers.Builder, idOnOrbit2 flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(3, flatbuffers.UOffsetT(idOnOrbit2), 0)
}
func LinkStatus_AbridgedAddLinkStartTime(builder *flatbuffers.Builder, linkStartTime flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(4, flatbuffers.UOffsetT(linkStartTime), 0)
}
func LinkStatus_AbridgedAddLinkStopTime(builder *flatbuffers.Builder, linkStopTime flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(5, flatbuffers.UOffsetT(linkStopTime), 0)
}
func LinkStatus_AbridgedAddConstellation(builder *flatbuffers.Builder, constellation flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(6, flatbuffers.UOffsetT(constellation), 0)
}
func LinkStatus_AbridgedAddLinkName(builder *flatbuffers.Builder, linkName flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(7, flatbuffers.UOffsetT(linkName), 0)
}
func LinkStatus_AbridgedAddLinkType(builder *flatbuffers.Builder, linkType flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(8, flatbuffers.UOffsetT(linkType), 0)
}
func LinkStatus_AbridgedAddBand(builder *flatbuffers.Builder, band flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(9, flatbuffers.UOffsetT(band), 0)
}
func LinkStatus_AbridgedAddIdBeam1(builder *flatbuffers.Builder, idBeam1 flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(10, flatbuffers.UOffsetT(idBeam1), 0)
}
func LinkStatus_AbridgedAddEndPoint1Name(builder *flatbuffers.Builder, endPoint1Name flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(11, flatbuffers.UOffsetT(endPoint1Name), 0)
}
func LinkStatus_AbridgedAddEndPoint1Lat(builder *flatbuffers.Builder, endPoint1Lat float64) {
	builder.PrependFloat64Slot(12, endPoint1Lat, 0.0)
}
func LinkStatus_AbridgedAddEndPoint1Lon(builder *flatbuffers.Builder, endPoint1Lon float64) {
	builder.PrependFloat64Slot(13, endPoint1Lon, 0.0)
}
func LinkStatus_AbridgedAddIdBeam2(builder *flatbuffers.Builder, idBeam2 flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(14, flatbuffers.UOffsetT(idBeam2), 0)
}
func LinkStatus_AbridgedAddEndPoint2Name(builder *flatbuffers.Builder, endPoint2Name flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(15, flatbuffers.UOffsetT(endPoint2Name), 0)
}
func LinkStatus_AbridgedAddEndPoint2Lat(builder *flatbuffers.Builder, endPoint2Lat float64) {
	builder.PrependFloat64Slot(16, endPoint2Lat, 0.0)
}
func LinkStatus_AbridgedAddEndPoint2Lon(builder *flatbuffers.Builder, endPoint2Lon float64) {
	builder.PrependFloat64Slot(17, endPoint2Lon, 0.0)
}
func LinkStatus_AbridgedAddDataRate1To2(builder *flatbuffers.Builder, dataRate1To2 float64) {
	builder.PrependFloat64Slot(18, dataRate1To2, 0.0)
}
func LinkStatus_AbridgedAddDataRate2To1(builder *flatbuffers.Builder, dataRate2To1 float64) {
	builder.PrependFloat64Slot(19, dataRate2To1, 0.0)
}
func LinkStatus_AbridgedAddLinkState(builder *flatbuffers.Builder, linkState flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(20, flatbuffers.UOffsetT(linkState), 0)
}
func LinkStatus_AbridgedAddSysCap(builder *flatbuffers.Builder, sysCap flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(21, flatbuffers.UOffsetT(sysCap), 0)
}
func LinkStatus_AbridgedAddOpsCap(builder *flatbuffers.Builder, opsCap flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(22, flatbuffers.UOffsetT(opsCap), 0)
}
func LinkStatus_AbridgedAddCreatedAt(builder *flatbuffers.Builder, createdAt flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(23, flatbuffers.UOffsetT(createdAt), 0)
}
func LinkStatus_AbridgedAddCreatedBy(builder *flatbuffers.Builder, createdBy flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(24, flatbuffers.UOffsetT(createdBy), 0)
}
func LinkStatus_AbridgedAddSource(builder *flatbuffers.Builder, source flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(25, flatbuffers.UOffsetT(source), 0)
}
func LinkStatus_AbridgedAddOrigin(builder *flatbuffers.Builder, origin flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(26, flatbuffers.UOffsetT(origin), 0)
}
func LinkStatus_AbridgedAddOrigNetwork(builder *flatbuffers.Builder, origNetwork flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(27, flatbuffers.UOffsetT(origNetwork), 0)
}
func LinkStatus_AbridgedAddDataMode(builder *flatbuffers.Builder, dataMode LinkStatus_Abridged_dataMode_Enum) {
	builder.PrependInt8Slot(28, int8(dataMode), 0)
}
func LinkStatus_AbridgedAddSatNo1(builder *flatbuffers.Builder, satNo1 int32) {
	builder.PrependInt32Slot(29, satNo1, 0)
}
func LinkStatus_AbridgedAddSatNo2(builder *flatbuffers.Builder, satNo2 int32) {
	builder.PrependInt32Slot(30, satNo2, 0)
}
func LinkStatus_AbridgedEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
