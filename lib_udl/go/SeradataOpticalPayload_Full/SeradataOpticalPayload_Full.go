// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package SeradataOpticalPayload_Full

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

/// /// Details for an optical payload from  Seradata.
type SeradataOpticalPayload_Full struct {
	_tab flatbuffers.Table
}

const SeradataOpticalPayload_FullIdentifier = "SERA"

func GetRootAsSeradataOpticalPayload_Full(buf []byte, offset flatbuffers.UOffsetT) *SeradataOpticalPayload_Full {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &SeradataOpticalPayload_Full{}
	x.Init(buf, n+offset)
	return x
}

func FinishSeradataOpticalPayload_FullBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	identifierBytes := []byte(SeradataOpticalPayload_FullIdentifier)
	builder.FinishWithFileIdentifier(offset, identifierBytes)
}

func SeradataOpticalPayload_FullBufferHasIdentifier(buf []byte) bool {
	return flatbuffers.BufferHasIdentifier(buf, SeradataOpticalPayload_FullIdentifier)
}

func GetSizePrefixedRootAsSeradataOpticalPayload_Full(buf []byte, offset flatbuffers.UOffsetT) *SeradataOpticalPayload_Full {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &SeradataOpticalPayload_Full{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedSeradataOpticalPayload_FullBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	identifierBytes := []byte(SeradataOpticalPayload_FullIdentifier)
	builder.FinishSizePrefixedWithFileIdentifier(offset, identifierBytes)
}

func SizePrefixedSeradataOpticalPayload_FullBufferHasIdentifier(buf []byte) bool {
	return flatbuffers.SizePrefixedBufferHasIdentifier(buf, SeradataOpticalPayload_FullIdentifier)
}

func (rcv *SeradataOpticalPayload_Full) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *SeradataOpticalPayload_Full) Table() flatbuffers.Table {
	return rcv._tab
}

/// Unique identifier of the record, auto-generated by the system.
/// Example: /// Example: SERADATAOPTICALPAYLOAD-ID
/// Constraints: Minimum length = 1, Maximum length = 36
func (rcv *SeradataOpticalPayload_Full) Id() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Unique identifier of the record, auto-generated by the system.
/// Example: /// Example: SERADATAOPTICALPAYLOAD-ID
/// Constraints: Minimum length = 1, Maximum length = 36
/// Classification marking of the data in IC/CAPCO Portion-marked format.
/// Example: /// Example: U
/// Constraints: Minimum length = 1, Maximum length = 128
func (rcv *SeradataOpticalPayload_Full) ClassificationMarking() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Classification marking of the data in IC/CAPCO Portion-marked format.
/// Example: /// Example: U
/// Constraints: Minimum length = 1, Maximum length = 128
/// Seradata ID of the spacecraft (SeradataSpacecraftDetails ID).
/// Example: /// Example: spacecraftId
/// Constraints: Minimum length = 1, Maximum length = 36
func (rcv *SeradataOpticalPayload_Full) SpacecraftId() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Seradata ID of the spacecraft (SeradataSpacecraftDetails ID).
/// Example: /// Example: spacecraftId
/// Constraints: Minimum length = 1, Maximum length = 36
/// UUID of the Sensor record.
/// Example: /// Example: idSensor
/// Constraints: Minimum length = 0, Maximum length = 36
func (rcv *SeradataOpticalPayload_Full) IdSensor() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// UUID of the Sensor record.
/// Example: /// Example: idSensor
/// Constraints: Minimum length = 0, Maximum length = 36
/// Hosted for company/Organization Id.
/// Example: /// Example: hostedForCompanyOrgId
/// Constraints: Minimum length = 0, Maximum length = 36
func (rcv *SeradataOpticalPayload_Full) HostedForCompanyOrgId() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Hosted for company/Organization Id.
/// Example: /// Example: hostedForCompanyOrgId
/// Constraints: Minimum length = 0, Maximum length = 36
/// Manufacturer Organization Id.
/// Example: /// Example: manufacturerOrgId
/// Constraints: Minimum length = 0, Maximum length = 36
func (rcv *SeradataOpticalPayload_Full) ManufacturerOrgId() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Manufacturer Organization Id.
/// Example: /// Example: manufacturerOrgId
/// Constraints: Minimum length = 0, Maximum length = 36
/// Imaging category for this payload, e.g. Multispectral, Infrared, Panchromatic.
/// Example: /// Example: Infrared
/// Constraints: Minimum length = 0, Maximum length = 50
func (rcv *SeradataOpticalPayload_Full) ImagingPayloadCategory() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Imaging category for this payload, e.g. Multispectral, Infrared, Panchromatic.
/// Example: /// Example: Infrared
/// Constraints: Minimum length = 0, Maximum length = 50
/// Sensor name from Seradata, e.g. TOURNESOL, MESSR (Multispectral Self-Scanning Radiometer), AWFI, etc.
/// Example: /// Example: TOURNESOL
/// Constraints: Minimum length = 0, Maximum length = 50
func (rcv *SeradataOpticalPayload_Full) Name() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(18))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Sensor name from Seradata, e.g. TOURNESOL, MESSR (Multispectral Self-Scanning Radiometer), AWFI, etc.
/// Example: /// Example: TOURNESOL
/// Constraints: Minimum length = 0, Maximum length = 50
/// Spectral Band supported by this payload, e.g. Green, Red, Mid-wave infrared, etc.
/// Example: /// Example: Green
/// Constraints: Minimum length = 0, Maximum length = 20
func (rcv *SeradataOpticalPayload_Full) SpectralBand() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(20))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Spectral Band supported by this payload, e.g. Green, Red, Mid-wave infrared, etc.
/// Example: /// Example: Green
/// Constraints: Minimum length = 0, Maximum length = 20
/// Frequency limit for this payload, e.g. 0.51 - 0.59.
/// Example: /// Example: 0.51
/// Constraints: Minimum length = 0, Maximum length = 50
func (rcv *SeradataOpticalPayload_Full) SpectralFrequencyLimits() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(22))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Frequency limit for this payload, e.g. 0.51 - 0.59.
/// Example: /// Example: 0.51
/// Constraints: Minimum length = 0, Maximum length = 50
/// Number of film return canisters.
/// Example: /// Example: 1
/// Constraints: No constraints specified.
func (rcv *SeradataOpticalPayload_Full) NumberOfFilmReturnCanisters() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(24))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

/// Number of film return canisters.
/// Example: /// Example: 1
/// Constraints: No constraints specified.
func (rcv *SeradataOpticalPayload_Full) MutateNumberOfFilmReturnCanisters(n int32) bool {
	return rcv._tab.MutateInt32Slot(24, n)
}

/// Best resolution.
/// Example: /// Example: 1.23
/// Constraints: No constraints specified.
func (rcv *SeradataOpticalPayload_Full) BestResolution() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(26))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Best resolution.
/// Example: /// Example: 1.23
/// Constraints: No constraints specified.
func (rcv *SeradataOpticalPayload_Full) MutateBestResolution(n float64) bool {
	return rcv._tab.MutateFloat64Slot(26, n)
}

/// Swath width in kilometers.
/// Example: /// Example: 1.23
/// Constraints: No constraints specified.
func (rcv *SeradataOpticalPayload_Full) SwathWidth() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(28))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Swath width in kilometers.
/// Example: /// Example: 1.23
/// Constraints: No constraints specified.
func (rcv *SeradataOpticalPayload_Full) MutateSwathWidth(n float64) bool {
	return rcv._tab.MutateFloat64Slot(28, n)
}

/// Recorder size.
/// Example: /// Example: 1024
/// Constraints: Minimum length = 0, Maximum length = 50
func (rcv *SeradataOpticalPayload_Full) RecorderSize() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(30))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Recorder size.
/// Example: /// Example: 1024
/// Constraints: Minimum length = 0, Maximum length = 50
/// Field of view of this radar in kilometers.
/// Example: /// Example: 1.23
/// Constraints: No constraints specified.
func (rcv *SeradataOpticalPayload_Full) FieldOfView() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(32))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Field of view of this radar in kilometers.
/// Example: /// Example: 1.23
/// Constraints: No constraints specified.
func (rcv *SeradataOpticalPayload_Full) MutateFieldOfView(n float64) bool {
	return rcv._tab.MutateFloat64Slot(32, n)
}

/// Field of regard of this radar in degrees.
/// Example: /// Example: 1.23
/// Constraints: No constraints specified.
func (rcv *SeradataOpticalPayload_Full) FieldOfRegard() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(34))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Field of regard of this radar in degrees.
/// Example: /// Example: 1.23
/// Constraints: No constraints specified.
func (rcv *SeradataOpticalPayload_Full) MutateFieldOfRegard(n float64) bool {
	return rcv._tab.MutateFloat64Slot(34, n)
}

/// Point method for this radar, e.g. Spacecraft.
/// Example: /// Example: Spacecraft
/// Constraints: Minimum length = 0, Maximum length = 50
func (rcv *SeradataOpticalPayload_Full) PointingMethod() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(36))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Point method for this radar, e.g. Spacecraft.
/// Example: /// Example: Spacecraft
/// Constraints: Minimum length = 0, Maximum length = 50
/// Ground Station info for this payload.
/// Example: /// Example: groundStations
/// Constraints: Minimum length = 0, Maximum length = 256
func (rcv *SeradataOpticalPayload_Full) GroundStations() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(38))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Ground Station info for this payload.
/// Example: /// Example: groundStations
/// Constraints: Minimum length = 0, Maximum length = 256
/// Ground Station Locations for this payload.
/// Example: /// Example: groundStationLocations
/// Constraints: Minimum length = 0, Maximum length = 128
func (rcv *SeradataOpticalPayload_Full) GroundStationLocations() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(40))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Ground Station Locations for this payload.
/// Example: /// Example: groundStationLocations
/// Constraints: Minimum length = 0, Maximum length = 128
/// Payload notes.
/// Example: /// Example: Sample Notes
/// Constraints: Minimum length = 0, Maximum length = 2147483647
func (rcv *SeradataOpticalPayload_Full) Notes() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(42))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Payload notes.
/// Example: /// Example: Sample Notes
/// Constraints: Minimum length = 0, Maximum length = 2147483647
/// Time the row was created in the database, auto-populated by the system.
/// Example: /// Example: 2018-01-01T16:00:00.123Z
/// Constraints: No constraints specified.
func (rcv *SeradataOpticalPayload_Full) CreatedAt() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(44))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Time the row was created in the database, auto-populated by the system.
/// Example: /// Example: 2018-01-01T16:00:00.123Z
/// Constraints: No constraints specified.
/// Application user who created the row in the database, auto-populated by the system.
/// Example: /// Example: some.user
/// Constraints: Minimum length = 1, Maximum length = 64
func (rcv *SeradataOpticalPayload_Full) CreatedBy() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(46))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Application user who created the row in the database, auto-populated by the system.
/// Example: /// Example: some.user
/// Constraints: Minimum length = 1, Maximum length = 64
/// Time the row was last updated in the database, auto-populated by the system.
/// Example: /// Example: 2018-01-01T16:00:00.123Z
/// Constraints: No constraints specified.
func (rcv *SeradataOpticalPayload_Full) UpdatedAt() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(48))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Time the row was last updated in the database, auto-populated by the system.
/// Example: /// Example: 2018-01-01T16:00:00.123Z
/// Constraints: No constraints specified.
/// Application user who updated the row in the database, auto-populated by the system.
/// Example: /// Example: some.user
/// Constraints: Minimum length = 1, Maximum length = 64
func (rcv *SeradataOpticalPayload_Full) UpdatedBy() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(50))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Application user who updated the row in the database, auto-populated by the system.
/// Example: /// Example: some.user
/// Constraints: Minimum length = 1, Maximum length = 64
/// Source of the data.
/// Example: /// Example: Bluestaq
/// Constraints: Minimum length = 1, Maximum length = 64
func (rcv *SeradataOpticalPayload_Full) Source() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(52))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Source of the data.
/// Example: /// Example: Bluestaq
/// Constraints: Minimum length = 1, Maximum length = 64
/// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
/// Example: /// Example: THIRD_PARTY_DATASOURCE
/// Constraints: Minimum length = 0, Maximum length = 64
func (rcv *SeradataOpticalPayload_Full) Origin() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(54))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
/// Example: /// Example: THIRD_PARTY_DATASOURCE
/// Constraints: Minimum length = 0, Maximum length = 64
/// The originating source network on which this record was created, auto-populated by the system.
/// Example: /// Example: ORIG
/// Constraints: Minimum length = 1, Maximum length = 32
func (rcv *SeradataOpticalPayload_Full) OrigNetwork() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(56))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The originating source network on which this record was created, auto-populated by the system.
/// Example: /// Example: ORIG
/// Constraints: Minimum length = 1, Maximum length = 32
/// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
/// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
/// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
/// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
/// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
/// Example: /// Example: TEST
/// Constraints: Minimum length = 1, Maximum length = 32
func (rcv *SeradataOpticalPayload_Full) DataMode() SeradataOpticalPayload_Full_dataMode_Enum {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(58))
	if o != 0 {
		return SeradataOpticalPayload_Full_dataMode_Enum(rcv._tab.GetInt8(o + rcv._tab.Pos))
	}
	return 0
}

/// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
/// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
/// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
/// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
/// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
/// Example: /// Example: TEST
/// Constraints: Minimum length = 1, Maximum length = 32
func (rcv *SeradataOpticalPayload_Full) MutateDataMode(n SeradataOpticalPayload_Full_dataMode_Enum) bool {
	return rcv._tab.MutateInt8Slot(58, int8(n))
}

func SeradataOpticalPayload_FullStart(builder *flatbuffers.Builder) {
	builder.StartObject(28)
}
func SeradataOpticalPayload_FullAddId(builder *flatbuffers.Builder, id flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(id), 0)
}
func SeradataOpticalPayload_FullAddClassificationMarking(builder *flatbuffers.Builder, classificationMarking flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(classificationMarking), 0)
}
func SeradataOpticalPayload_FullAddSpacecraftId(builder *flatbuffers.Builder, spacecraftId flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(spacecraftId), 0)
}
func SeradataOpticalPayload_FullAddIdSensor(builder *flatbuffers.Builder, idSensor flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(3, flatbuffers.UOffsetT(idSensor), 0)
}
func SeradataOpticalPayload_FullAddHostedForCompanyOrgId(builder *flatbuffers.Builder, hostedForCompanyOrgId flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(4, flatbuffers.UOffsetT(hostedForCompanyOrgId), 0)
}
func SeradataOpticalPayload_FullAddManufacturerOrgId(builder *flatbuffers.Builder, manufacturerOrgId flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(5, flatbuffers.UOffsetT(manufacturerOrgId), 0)
}
func SeradataOpticalPayload_FullAddImagingPayloadCategory(builder *flatbuffers.Builder, imagingPayloadCategory flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(6, flatbuffers.UOffsetT(imagingPayloadCategory), 0)
}
func SeradataOpticalPayload_FullAddName(builder *flatbuffers.Builder, name flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(7, flatbuffers.UOffsetT(name), 0)
}
func SeradataOpticalPayload_FullAddSpectralBand(builder *flatbuffers.Builder, spectralBand flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(8, flatbuffers.UOffsetT(spectralBand), 0)
}
func SeradataOpticalPayload_FullAddSpectralFrequencyLimits(builder *flatbuffers.Builder, spectralFrequencyLimits flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(9, flatbuffers.UOffsetT(spectralFrequencyLimits), 0)
}
func SeradataOpticalPayload_FullAddNumberOfFilmReturnCanisters(builder *flatbuffers.Builder, numberOfFilmReturnCanisters int32) {
	builder.PrependInt32Slot(10, numberOfFilmReturnCanisters, 0)
}
func SeradataOpticalPayload_FullAddBestResolution(builder *flatbuffers.Builder, bestResolution float64) {
	builder.PrependFloat64Slot(11, bestResolution, 0.0)
}
func SeradataOpticalPayload_FullAddSwathWidth(builder *flatbuffers.Builder, swathWidth float64) {
	builder.PrependFloat64Slot(12, swathWidth, 0.0)
}
func SeradataOpticalPayload_FullAddRecorderSize(builder *flatbuffers.Builder, recorderSize flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(13, flatbuffers.UOffsetT(recorderSize), 0)
}
func SeradataOpticalPayload_FullAddFieldOfView(builder *flatbuffers.Builder, fieldOfView float64) {
	builder.PrependFloat64Slot(14, fieldOfView, 0.0)
}
func SeradataOpticalPayload_FullAddFieldOfRegard(builder *flatbuffers.Builder, fieldOfRegard float64) {
	builder.PrependFloat64Slot(15, fieldOfRegard, 0.0)
}
func SeradataOpticalPayload_FullAddPointingMethod(builder *flatbuffers.Builder, pointingMethod flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(16, flatbuffers.UOffsetT(pointingMethod), 0)
}
func SeradataOpticalPayload_FullAddGroundStations(builder *flatbuffers.Builder, groundStations flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(17, flatbuffers.UOffsetT(groundStations), 0)
}
func SeradataOpticalPayload_FullAddGroundStationLocations(builder *flatbuffers.Builder, groundStationLocations flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(18, flatbuffers.UOffsetT(groundStationLocations), 0)
}
func SeradataOpticalPayload_FullAddNotes(builder *flatbuffers.Builder, notes flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(19, flatbuffers.UOffsetT(notes), 0)
}
func SeradataOpticalPayload_FullAddCreatedAt(builder *flatbuffers.Builder, createdAt flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(20, flatbuffers.UOffsetT(createdAt), 0)
}
func SeradataOpticalPayload_FullAddCreatedBy(builder *flatbuffers.Builder, createdBy flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(21, flatbuffers.UOffsetT(createdBy), 0)
}
func SeradataOpticalPayload_FullAddUpdatedAt(builder *flatbuffers.Builder, updatedAt flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(22, flatbuffers.UOffsetT(updatedAt), 0)
}
func SeradataOpticalPayload_FullAddUpdatedBy(builder *flatbuffers.Builder, updatedBy flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(23, flatbuffers.UOffsetT(updatedBy), 0)
}
func SeradataOpticalPayload_FullAddSource(builder *flatbuffers.Builder, source flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(24, flatbuffers.UOffsetT(source), 0)
}
func SeradataOpticalPayload_FullAddOrigin(builder *flatbuffers.Builder, origin flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(25, flatbuffers.UOffsetT(origin), 0)
}
func SeradataOpticalPayload_FullAddOrigNetwork(builder *flatbuffers.Builder, origNetwork flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(26, flatbuffers.UOffsetT(origNetwork), 0)
}
func SeradataOpticalPayload_FullAddDataMode(builder *flatbuffers.Builder, dataMode SeradataOpticalPayload_Full_dataMode_Enum) {
	builder.PrependInt8Slot(27, int8(dataMode), 0)
}
func SeradataOpticalPayload_FullEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
