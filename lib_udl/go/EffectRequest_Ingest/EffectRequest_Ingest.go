// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package EffectRequest_Ingest

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

/// /// A request for various effects on a target.
type EffectRequest_Ingest struct {
	_tab flatbuffers.Table
}

const EffectRequest_IngestIdentifier = "EFFE"

func GetRootAsEffectRequest_Ingest(buf []byte, offset flatbuffers.UOffsetT) *EffectRequest_Ingest {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &EffectRequest_Ingest{}
	x.Init(buf, n+offset)
	return x
}

func FinishEffectRequest_IngestBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	identifierBytes := []byte(EffectRequest_IngestIdentifier)
	builder.FinishWithFileIdentifier(offset, identifierBytes)
}

func EffectRequest_IngestBufferHasIdentifier(buf []byte) bool {
	return flatbuffers.BufferHasIdentifier(buf, EffectRequest_IngestIdentifier)
}

func GetSizePrefixedRootAsEffectRequest_Ingest(buf []byte, offset flatbuffers.UOffsetT) *EffectRequest_Ingest {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &EffectRequest_Ingest{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedEffectRequest_IngestBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	identifierBytes := []byte(EffectRequest_IngestIdentifier)
	builder.FinishSizePrefixedWithFileIdentifier(offset, identifierBytes)
}

func SizePrefixedEffectRequest_IngestBufferHasIdentifier(buf []byte) bool {
	return flatbuffers.SizePrefixedBufferHasIdentifier(buf, EffectRequest_IngestIdentifier)
}

func (rcv *EffectRequest_Ingest) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *EffectRequest_Ingest) Table() flatbuffers.Table {
	return rcv._tab
}

/// Unique identifier of the record, auto-generated by the system.
/// Example: /// Example: EFFECTREQUEST-ID
/// Constraints: Minimum length = 1, Maximum length = 36
func (rcv *EffectRequest_Ingest) Id() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Unique identifier of the record, auto-generated by the system.
/// Example: /// Example: EFFECTREQUEST-ID
/// Constraints: Minimum length = 1, Maximum length = 36
/// Classification marking of the data in IC/CAPCO Portion-marked format.
/// Example: /// Example: U
/// Constraints: Minimum length = 1, Maximum length = 128
func (rcv *EffectRequest_Ingest) ClassificationMarking() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Classification marking of the data in IC/CAPCO Portion-marked format.
/// Example: /// Example: U
/// Constraints: Minimum length = 1, Maximum length = 128
/// The extenal system identifier of this request. A human readable unique id.
/// Example: /// Example: EXTERNALREQUEST-ID
/// Constraints: Minimum length = 0, Maximum length = 36
func (rcv *EffectRequest_Ingest) ExternalRequestId() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The extenal system identifier of this request. A human readable unique id.
/// Example: /// Example: EXTERNALREQUEST-ID
/// Constraints: Minimum length = 0, Maximum length = 36
/// List of effects to be achieved on the target (e.g. COVER, DECEIVE, DEGRADE, DENY, DESTROY, DISRUPT, DIVERSION, DIVERT, FIX, INSPECT, INTERCEPT, ISOLATE, MANIPULATE, NEUTRALIZE, SHADOW, SUPPRESS, etc.).  The effects included in this list are connected by implied AND.
/// Example: /// Example: ['COVER', 'DECEIVE']
/// Constraints: No constraints specified.
func (rcv *EffectRequest_Ingest) EffectList(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *EffectRequest_Ingest) EffectListLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

/// List of effects to be achieved on the target (e.g. COVER, DECEIVE, DEGRADE, DENY, DESTROY, DISRUPT, DIVERSION, DIVERT, FIX, INSPECT, INTERCEPT, ISOLATE, MANIPULATE, NEUTRALIZE, SHADOW, SUPPRESS, etc.).  The effects included in this list are connected by implied AND.
/// Example: /// Example: ['COVER', 'DECEIVE']
/// Constraints: No constraints specified.
/// State of this effect request (e.g. CREATED, UPDATED, DELETED, etc.).
/// Example: /// Example: CREATED
/// Constraints: Minimum length = 0, Maximum length = 24
func (rcv *EffectRequest_Ingest) State() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// State of this effect request (e.g. CREATED, UPDATED, DELETED, etc.).
/// Example: /// Example: CREATED
/// Constraints: Minimum length = 0, Maximum length = 24
/// Specific descriptive instantiation of the effect, e.g., playbook to be used.
/// Example: /// Example: Example Notes
/// Constraints: Minimum length = 0, Maximum length = 256
func (rcv *EffectRequest_Ingest) Context() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Specific descriptive instantiation of the effect, e.g., playbook to be used.
/// Example: /// Example: Example Notes
/// Constraints: Minimum length = 0, Maximum length = 256
/// The time the effect should start, in ISO8601 UTC format.
/// Example: /// Example: 2018-01-01T16:00:00.123456Z
/// Constraints: No constraints specified.
func (rcv *EffectRequest_Ingest) StartTime() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The time the effect should start, in ISO8601 UTC format.
/// Example: /// Example: 2018-01-01T16:00:00.123456Z
/// Constraints: No constraints specified.
/// The time the effect should end, in ISO8601 UTC format.
/// Example: /// Example: 2018-01-01T16:00:00.123456Z
/// Constraints: No constraints specified.
func (rcv *EffectRequest_Ingest) EndTime() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(18))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The time the effect should end, in ISO8601 UTC format.
/// Example: /// Example: 2018-01-01T16:00:00.123456Z
/// Constraints: No constraints specified.
/// The indicator of deadline of the bid request (e.g. BETWEEN, IMMEDIATE, NOEARLIERTHAN, NOLATERTHAN, etc.):
/// BETWEEN:&nbsp;Produce effect any time between the given start and end times, equal penalty for being early or late
/// IMMEDIATE:&nbsp;Start as soon as possible, earlier is always better
/// NOEARLIERTHAN:&nbsp;Produce effect at this time or later. Large penalty for being earlier, no reward for being later
/// NOLATERTHAN:&nbsp;Produce effect no later than the given startTime. Large penalty for being later, no reward for being even earlier as long as the effect starts by the given time.
/// Example: /// Example: NoLaterThan
/// Constraints: Minimum length = 0, Maximum length = 24
func (rcv *EffectRequest_Ingest) DeadlineType() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(20))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The indicator of deadline of the bid request (e.g. BETWEEN, IMMEDIATE, NOEARLIERTHAN, NOLATERTHAN, etc.):
/// BETWEEN:&nbsp;Produce effect any time between the given start and end times, equal penalty for being early or late
/// IMMEDIATE:&nbsp;Start as soon as possible, earlier is always better
/// NOEARLIERTHAN:&nbsp;Produce effect at this time or later. Large penalty for being earlier, no reward for being later
/// NOLATERTHAN:&nbsp;Produce effect no later than the given startTime. Large penalty for being later, no reward for being even earlier as long as the effect starts by the given time.
/// Example: /// Example: NoLaterThan
/// Constraints: Minimum length = 0, Maximum length = 24
/// The source type of the targetId identifier (POI, TRACK).
/// Example: /// Example: POI
/// Constraints: Minimum length = 0, Maximum length = 24
func (rcv *EffectRequest_Ingest) TargetSrcType() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(22))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The source type of the targetId identifier (POI, TRACK).
/// Example: /// Example: POI
/// Constraints: Minimum length = 0, Maximum length = 24
/// The record ID, depending on the type identified in targetSrcType, of the requested target. This identifier corresponds to either poi.poiid or track.trkId from their respective schemas.
/// Example: /// Example: TARGETSRC-ID
/// Constraints: Minimum length = 0, Maximum length = 36
func (rcv *EffectRequest_Ingest) TargetSrcId() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(24))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The record ID, depending on the type identified in targetSrcType, of the requested target. This identifier corresponds to either poi.poiid or track.trkId from their respective schemas.
/// Example: /// Example: TARGETSRC-ID
/// Constraints: Minimum length = 0, Maximum length = 36
/// The priority (LOW, MEDIUM, HIGH) of this request.
/// Example: /// Example: LOW
/// Constraints: Minimum length = 0, Maximum length = 24
func (rcv *EffectRequest_Ingest) Priority() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(26))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The priority (LOW, MEDIUM, HIGH) of this request.
/// Example: /// Example: LOW
/// Constraints: Minimum length = 0, Maximum length = 24
/// The type or class of the preference model used to evaluate this offer.
/// Example: /// Example: Preference model
/// Constraints: Minimum length = 0, Maximum length = 256
func (rcv *EffectRequest_Ingest) ModelClass() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(28))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The type or class of the preference model used to evaluate this offer.
/// Example: /// Example: Preference model
/// Constraints: Minimum length = 0, Maximum length = 256
/// Array of the the metric classes to be evaluated (e.g. Cost, GoalAchievement, OpportunityCost, Risk, Timeliness, Unavailable, etc.).  See the associated 'metricWeights' array for the weighting values, positionally corresponding to these types.  The 'metricTypes' and 'metricWeights' arrays must match in size.
/// Example: /// Example: ['COST', 'RISK']
/// Constraints: No constraints specified.
func (rcv *EffectRequest_Ingest) MetricTypes(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(30))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *EffectRequest_Ingest) MetricTypesLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(30))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

/// Array of the the metric classes to be evaluated (e.g. Cost, GoalAchievement, OpportunityCost, Risk, Timeliness, Unavailable, etc.).  See the associated 'metricWeights' array for the weighting values, positionally corresponding to these types.  The 'metricTypes' and 'metricWeights' arrays must match in size.
/// Example: /// Example: ['COST', 'RISK']
/// Constraints: No constraints specified.
/// Array of the weights for the metric in the final evaluation score. Normalized (0 to 1).  See the associated 'metricTypes' array for the metric classes, positionally corresponding to these values.  The 'metricTypes' and 'metricWeights' arrays must match in size.
/// Example: /// Example: [0.5, 0.6]
/// Constraints: No constraints specified.
func (rcv *EffectRequest_Ingest) MetricWeights(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(32))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *EffectRequest_Ingest) MetricWeightsLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(32))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

/// Array of the weights for the metric in the final evaluation score. Normalized (0 to 1).  See the associated 'metricTypes' array for the metric classes, positionally corresponding to these values.  The 'metricTypes' and 'metricWeights' arrays must match in size.
/// Example: /// Example: [0.5, 0.6]
/// Constraints: No constraints specified.
/// Time the row was created in the database, auto-populated by the system.
/// Example: /// Example: 2018-01-01T16:00:00.123Z
/// Constraints: No constraints specified.
func (rcv *EffectRequest_Ingest) CreatedAt() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(34))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Time the row was created in the database, auto-populated by the system.
/// Example: /// Example: 2018-01-01T16:00:00.123Z
/// Constraints: No constraints specified.
/// Application user who created the row in the database, auto-populated by the system.
/// Example: /// Example: some.user
/// Constraints: Minimum length = 0, Maximum length = 64
func (rcv *EffectRequest_Ingest) CreatedBy() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(36))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Application user who created the row in the database, auto-populated by the system.
/// Example: /// Example: some.user
/// Constraints: Minimum length = 0, Maximum length = 64
/// Source of the data.
/// Example: /// Example: Bluestaq
/// Constraints: Minimum length = 1, Maximum length = 64
func (rcv *EffectRequest_Ingest) Source() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(38))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Source of the data.
/// Example: /// Example: Bluestaq
/// Constraints: Minimum length = 1, Maximum length = 64
/// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
/// Example: /// Example: THIRD_PARTY_DATASOURCE
/// Constraints: Minimum length = 0, Maximum length = 64
func (rcv *EffectRequest_Ingest) Origin() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(40))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
/// Example: /// Example: THIRD_PARTY_DATASOURCE
/// Constraints: Minimum length = 0, Maximum length = 64
/// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
/// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
/// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
/// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
/// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
/// Example: /// Example: TEST
/// Constraints: Minimum length = 1, Maximum length = 32
func (rcv *EffectRequest_Ingest) DataMode() EffectRequest_Ingest_dataMode_Enum {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(42))
	if o != 0 {
		return EffectRequest_Ingest_dataMode_Enum(rcv._tab.GetInt8(o + rcv._tab.Pos))
	}
	return 0
}

/// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
/// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
/// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
/// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
/// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
/// Example: /// Example: TEST
/// Constraints: Minimum length = 1, Maximum length = 32
func (rcv *EffectRequest_Ingest) MutateDataMode(n EffectRequest_Ingest_dataMode_Enum) bool {
	return rcv._tab.MutateInt8Slot(42, int8(n))
}

/// The originating source network on which this record was created, auto-populated by the system.
/// Example: /// Example: ORIG
/// Constraints: Minimum length = 1, Maximum length = 32
func (rcv *EffectRequest_Ingest) OrigNetwork() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(44))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The originating source network on which this record was created, auto-populated by the system.
/// Example: /// Example: ORIG
/// Constraints: Minimum length = 1, Maximum length = 32
func EffectRequest_IngestStart(builder *flatbuffers.Builder) {
	builder.StartObject(21)
}
func EffectRequest_IngestAddId(builder *flatbuffers.Builder, id flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(id), 0)
}
func EffectRequest_IngestAddClassificationMarking(builder *flatbuffers.Builder, classificationMarking flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(classificationMarking), 0)
}
func EffectRequest_IngestAddExternalRequestId(builder *flatbuffers.Builder, externalRequestId flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(externalRequestId), 0)
}
func EffectRequest_IngestAddEffectList(builder *flatbuffers.Builder, effectList flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(3, flatbuffers.UOffsetT(effectList), 0)
}
func EffectRequest_IngestStartEffectListVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func EffectRequest_IngestAddState(builder *flatbuffers.Builder, state flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(4, flatbuffers.UOffsetT(state), 0)
}
func EffectRequest_IngestAddContext(builder *flatbuffers.Builder, context flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(5, flatbuffers.UOffsetT(context), 0)
}
func EffectRequest_IngestAddStartTime(builder *flatbuffers.Builder, startTime flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(6, flatbuffers.UOffsetT(startTime), 0)
}
func EffectRequest_IngestAddEndTime(builder *flatbuffers.Builder, endTime flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(7, flatbuffers.UOffsetT(endTime), 0)
}
func EffectRequest_IngestAddDeadlineType(builder *flatbuffers.Builder, deadlineType flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(8, flatbuffers.UOffsetT(deadlineType), 0)
}
func EffectRequest_IngestAddTargetSrcType(builder *flatbuffers.Builder, targetSrcType flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(9, flatbuffers.UOffsetT(targetSrcType), 0)
}
func EffectRequest_IngestAddTargetSrcId(builder *flatbuffers.Builder, targetSrcId flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(10, flatbuffers.UOffsetT(targetSrcId), 0)
}
func EffectRequest_IngestAddPriority(builder *flatbuffers.Builder, priority flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(11, flatbuffers.UOffsetT(priority), 0)
}
func EffectRequest_IngestAddModelClass(builder *flatbuffers.Builder, modelClass flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(12, flatbuffers.UOffsetT(modelClass), 0)
}
func EffectRequest_IngestAddMetricTypes(builder *flatbuffers.Builder, metricTypes flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(13, flatbuffers.UOffsetT(metricTypes), 0)
}
func EffectRequest_IngestStartMetricTypesVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func EffectRequest_IngestAddMetricWeights(builder *flatbuffers.Builder, metricWeights flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(14, flatbuffers.UOffsetT(metricWeights), 0)
}
func EffectRequest_IngestStartMetricWeightsVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func EffectRequest_IngestAddCreatedAt(builder *flatbuffers.Builder, createdAt flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(15, flatbuffers.UOffsetT(createdAt), 0)
}
func EffectRequest_IngestAddCreatedBy(builder *flatbuffers.Builder, createdBy flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(16, flatbuffers.UOffsetT(createdBy), 0)
}
func EffectRequest_IngestAddSource(builder *flatbuffers.Builder, source flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(17, flatbuffers.UOffsetT(source), 0)
}
func EffectRequest_IngestAddOrigin(builder *flatbuffers.Builder, origin flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(18, flatbuffers.UOffsetT(origin), 0)
}
func EffectRequest_IngestAddDataMode(builder *flatbuffers.Builder, dataMode EffectRequest_Ingest_dataMode_Enum) {
	builder.PrependInt8Slot(19, int8(dataMode), 0)
}
func EffectRequest_IngestAddOrigNetwork(builder *flatbuffers.Builder, origNetwork flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(20, flatbuffers.UOffsetT(origNetwork), 0)
}
func EffectRequest_IngestEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
