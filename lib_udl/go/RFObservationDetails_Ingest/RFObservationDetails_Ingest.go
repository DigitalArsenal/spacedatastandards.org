// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package RFObservationDetails_Ingest

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

/// /// Model representation of observation data for active/passive radio frequency (RF) based sensor phenomenologies. J2000 is the preferred coordinate frame for all observations, but in some cases observations may be in another frame depending on the provider. Please see the 'Discover' tab in the storefront to confirm coordinate frames by data provider. RF observations include several optional ordered arrays which are used to provide detailed information on recorded signals such as power spectral density lists or active signals (code taps/fills, etc). In these cases, the sizes of the arrays must match and can be assumed to have consistent indexing across arrays (e.g. powers[0] is the measured power at frequencies[0]).
type RFObservationDetails_Ingest struct {
	_tab flatbuffers.Table
}

const RFObservationDetails_IngestIdentifier = "RFOB"

func GetRootAsRFObservationDetails_Ingest(buf []byte, offset flatbuffers.UOffsetT) *RFObservationDetails_Ingest {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &RFObservationDetails_Ingest{}
	x.Init(buf, n+offset)
	return x
}

func FinishRFObservationDetails_IngestBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	identifierBytes := []byte(RFObservationDetails_IngestIdentifier)
	builder.FinishWithFileIdentifier(offset, identifierBytes)
}

func RFObservationDetails_IngestBufferHasIdentifier(buf []byte) bool {
	return flatbuffers.BufferHasIdentifier(buf, RFObservationDetails_IngestIdentifier)
}

func GetSizePrefixedRootAsRFObservationDetails_Ingest(buf []byte, offset flatbuffers.UOffsetT) *RFObservationDetails_Ingest {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &RFObservationDetails_Ingest{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedRFObservationDetails_IngestBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	identifierBytes := []byte(RFObservationDetails_IngestIdentifier)
	builder.FinishSizePrefixedWithFileIdentifier(offset, identifierBytes)
}

func SizePrefixedRFObservationDetails_IngestBufferHasIdentifier(buf []byte) bool {
	return flatbuffers.SizePrefixedBufferHasIdentifier(buf, RFObservationDetails_IngestIdentifier)
}

func (rcv *RFObservationDetails_Ingest) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *RFObservationDetails_Ingest) Table() flatbuffers.Table {
	return rcv._tab
}

/// Unique identifier of the record, auto-generated by the system.
/// Example: /// Example: RFOBSERVATION-ID
/// Constraints: Minimum length = 1, Maximum length = 36
func (rcv *RFObservationDetails_Ingest) Id() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Unique identifier of the record, auto-generated by the system.
/// Example: /// Example: RFOBSERVATION-ID
/// Constraints: Minimum length = 1, Maximum length = 36
/// Classification marking of the data in IC/CAPCO Portion-marked format.
/// Example: /// Example: U
/// Constraints: Minimum length = 1, Maximum length = 128
func (rcv *RFObservationDetails_Ingest) ClassificationMarking() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Classification marking of the data in IC/CAPCO Portion-marked format.
/// Example: /// Example: U
/// Constraints: Minimum length = 1, Maximum length = 128
/// Ob detection time in ISO 8601 UTC with microsecond precision.
/// Example: /// Example: 2018-01-01T16:00:00.123456Z
/// Constraints: No constraints specified.
func (rcv *RFObservationDetails_Ingest) ObTime() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Ob detection time in ISO 8601 UTC with microsecond precision.
/// Example: /// Example: 2018-01-01T16:00:00.123456Z
/// Constraints: No constraints specified.
/// Unique identifier of the target on-orbit object, if correlated.
/// Example: /// Example: ONORBIT-ID
/// Constraints: Minimum length = 0, Maximum length = 36
func (rcv *RFObservationDetails_Ingest) IdOnOrbit() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Unique identifier of the target on-orbit object, if correlated.
/// Example: /// Example: ONORBIT-ID
/// Constraints: Minimum length = 0, Maximum length = 36
/// Unique identifier of the reporting sensor.
/// Example: /// Example: SENSOR-ID
/// Constraints: Minimum length = 0, Maximum length = 36
func (rcv *RFObservationDetails_Ingest) IdSensor() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Unique identifier of the reporting sensor.
/// Example: /// Example: SENSOR-ID
/// Constraints: Minimum length = 0, Maximum length = 36
/// Type of RF ob (e.g. RF, RF-SOSI, PSD, RFI, SPOOF, etc).
/// Example: /// Example: RF
/// Constraints: Minimum length = 1, Maximum length = 32
func (rcv *RFObservationDetails_Ingest) Type() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Type of RF ob (e.g. RF, RF-SOSI, PSD, RFI, SPOOF, etc).
/// Example: /// Example: RF
/// Constraints: Minimum length = 1, Maximum length = 32
/// Satellite/Catalog number of the target on-orbit object.
/// Example: /// Example: 32258
/// Constraints: No constraints specified.
func (rcv *RFObservationDetails_Ingest) SatNo() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

/// Satellite/Catalog number of the target on-orbit object.
/// Example: /// Example: 32258
/// Constraints: No constraints specified.
func (rcv *RFObservationDetails_Ingest) MutateSatNo(n int32) bool {
	return rcv._tab.MutateInt32Slot(16, n)
}

/// Optional identifier to indicate the specific tasking which produced this observation.
/// Example: /// Example: TASK-ID
/// Constraints: Minimum length = 0, Maximum length = 36
func (rcv *RFObservationDetails_Ingest) TaskId() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(18))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Optional identifier to indicate the specific tasking which produced this observation.
/// Example: /// Example: TASK-ID
/// Constraints: Minimum length = 0, Maximum length = 36
/// Optional identifier to track a commercial or marketplace transaction executed to produce this data.
/// Example: /// Example: TRANSACTION-ID
/// Constraints: Minimum length = 0, Maximum length = 64
func (rcv *RFObservationDetails_Ingest) TransactionId() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(20))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Optional identifier to track a commercial or marketplace transaction executed to produce this data.
/// Example: /// Example: TRANSACTION-ID
/// Constraints: Minimum length = 0, Maximum length = 64
/// Optional identifier of the track to which this observation belongs.
/// Example: /// Example: TRACK-ID
/// Constraints: Minimum length = 0, Maximum length = 36
func (rcv *RFObservationDetails_Ingest) TrackId() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(22))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Optional identifier of the track to which this observation belongs.
/// Example: /// Example: TRACK-ID
/// Constraints: Minimum length = 0, Maximum length = 36
/// Optional identifier provided by observation source to indicate the target onorbit object of this observation. This may be an internal identifier and not necessarily a valid satellite number.
/// Example: /// Example: ORIG-OBJECT-ID
/// Constraints: Minimum length = 0, Maximum length = 64
func (rcv *RFObservationDetails_Ingest) OrigObjectId() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(24))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Optional identifier provided by observation source to indicate the target onorbit object of this observation. This may be an internal identifier and not necessarily a valid satellite number.
/// Example: /// Example: ORIG-OBJECT-ID
/// Constraints: Minimum length = 0, Maximum length = 64
/// Optional identifier provided by observation source to indicate the sensor identifier which produced this observation. This may be an internal identifier and not necessarily a valid sensor ID.
/// Example: /// Example: ORIG-SENSOR-ID
/// Constraints: Minimum length = 0, Maximum length = 64
func (rcv *RFObservationDetails_Ingest) OrigSensorId() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(26))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Optional identifier provided by observation source to indicate the sensor identifier which produced this observation. This may be an internal identifier and not necessarily a valid sensor ID.
/// Example: /// Example: ORIG-SENSOR-ID
/// Constraints: Minimum length = 0, Maximum length = 64
/// Boolean indicating this observation is part of an uncorrelated track or was unable to be correlated to a known object. This flag should only be set to true by data providers after an attempt to correlate to an on-orbit object was made and failed. If unable to correlate, the 'origObjectId' field may be populated with an internal data provider specific identifier.
/// Example: /// Example: False
/// Constraints: No constraints specified.
func (rcv *RFObservationDetails_Ingest) Uct() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(28))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

/// Boolean indicating this observation is part of an uncorrelated track or was unable to be correlated to a known object. This flag should only be set to true by data providers after an attempt to correlate to an on-orbit object was made and failed. If unable to correlate, the 'origObjectId' field may be populated with an internal data provider specific identifier.
/// Example: /// Example: False
/// Constraints: No constraints specified.
func (rcv *RFObservationDetails_Ingest) MutateUct(n bool) bool {
	return rcv._tab.MutateBoolSlot(28, n)
}

/// Optional identifier provided by observation source to indicate the transponder used for this measurement.
/// Example: /// Example: TRANSPONDER-A
/// Constraints: Minimum length = 0, Maximum length = 64
func (rcv *RFObservationDetails_Ingest) Transponder() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(30))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Optional identifier provided by observation source to indicate the transponder used for this measurement.
/// Example: /// Example: TRANSPONDER-A
/// Constraints: Minimum length = 0, Maximum length = 64
/// azimuth angle in degrees and J2000 coordinate frame.
/// Example: /// Example: 10.1
/// Constraints: No constraints specified.
func (rcv *RFObservationDetails_Ingest) Azimuth() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(32))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// azimuth angle in degrees and J2000 coordinate frame.
/// Example: /// Example: 10.1
/// Constraints: No constraints specified.
func (rcv *RFObservationDetails_Ingest) MutateAzimuth(n float64) bool {
	return rcv._tab.MutateFloat64Slot(32, n)
}

/// One sigma uncertainty in the azimuth angle measurement, in degrees.
/// Example: /// Example: 2.1
/// Constraints: No constraints specified.
func (rcv *RFObservationDetails_Ingest) AzimuthUnc() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(34))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// One sigma uncertainty in the azimuth angle measurement, in degrees.
/// Example: /// Example: 2.1
/// Constraints: No constraints specified.
func (rcv *RFObservationDetails_Ingest) MutateAzimuthUnc(n float64) bool {
	return rcv._tab.MutateFloat64Slot(34, n)
}

/// Rate of change of the azimuth in degrees per second.
/// Example: /// Example: 1.1
/// Constraints: No constraints specified.
func (rcv *RFObservationDetails_Ingest) AzimuthRate() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(36))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Rate of change of the azimuth in degrees per second.
/// Example: /// Example: 1.1
/// Constraints: No constraints specified.
func (rcv *RFObservationDetails_Ingest) MutateAzimuthRate(n float64) bool {
	return rcv._tab.MutateFloat64Slot(36, n)
}

/// elevation in degrees and J2000 coordinate frame.
/// Example: /// Example: 10.1
/// Constraints: No constraints specified.
func (rcv *RFObservationDetails_Ingest) Elevation() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(38))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// elevation in degrees and J2000 coordinate frame.
/// Example: /// Example: 10.1
/// Constraints: No constraints specified.
func (rcv *RFObservationDetails_Ingest) MutateElevation(n float64) bool {
	return rcv._tab.MutateFloat64Slot(38, n)
}

/// One sigma uncertainty in the elevation angle measurement, in degrees.
/// Example: /// Example: 10.1
/// Constraints: No constraints specified.
func (rcv *RFObservationDetails_Ingest) ElevationUnc() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(40))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// One sigma uncertainty in the elevation angle measurement, in degrees.
/// Example: /// Example: 10.1
/// Constraints: No constraints specified.
func (rcv *RFObservationDetails_Ingest) MutateElevationUnc(n float64) bool {
	return rcv._tab.MutateFloat64Slot(40, n)
}

/// Rate of change of the elevation in degrees per second.
/// Example: /// Example: 10.1
/// Constraints: No constraints specified.
func (rcv *RFObservationDetails_Ingest) ElevationRate() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(42))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Rate of change of the elevation in degrees per second.
/// Example: /// Example: 10.1
/// Constraints: No constraints specified.
func (rcv *RFObservationDetails_Ingest) MutateElevationRate(n float64) bool {
	return rcv._tab.MutateFloat64Slot(42, n)
}

/// Target range in km.
/// Example: /// Example: 10.1
/// Constraints: No constraints specified.
func (rcv *RFObservationDetails_Ingest) Range() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(44))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Target range in km.
/// Example: /// Example: 10.1
/// Constraints: No constraints specified.
func (rcv *RFObservationDetails_Ingest) MutateRange(n float64) bool {
	return rcv._tab.MutateFloat64Slot(44, n)
}

/// One sigma uncertainty in the range measurement, in kilometers.
/// Example: /// Example: 10.1
/// Constraints: No constraints specified.
func (rcv *RFObservationDetails_Ingest) RangeUnc() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(46))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// One sigma uncertainty in the range measurement, in kilometers.
/// Example: /// Example: 10.1
/// Constraints: No constraints specified.
func (rcv *RFObservationDetails_Ingest) MutateRangeUnc(n float64) bool {
	return rcv._tab.MutateFloat64Slot(46, n)
}

/// Rate of change of the range in km/sec.
/// Example: /// Example: 10.1
/// Constraints: No constraints specified.
func (rcv *RFObservationDetails_Ingest) RangeRate() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(48))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Rate of change of the range in km/sec.
/// Example: /// Example: 10.1
/// Constraints: No constraints specified.
func (rcv *RFObservationDetails_Ingest) MutateRangeRate(n float64) bool {
	return rcv._tab.MutateFloat64Slot(48, n)
}

/// One sigma uncertainty in the range rate measurement, in kilometers/second.
/// Example: /// Example: 10.1
/// Constraints: No constraints specified.
func (rcv *RFObservationDetails_Ingest) RangeRateUnc() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(50))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// One sigma uncertainty in the range rate measurement, in kilometers/second.
/// Example: /// Example: 10.1
/// Constraints: No constraints specified.
func (rcv *RFObservationDetails_Ingest) MutateRangeRateUnc(n float64) bool {
	return rcv._tab.MutateFloat64Slot(50, n)
}

/// Target track or apparent range in km.
/// Example: /// Example: 10.1
/// Constraints: No constraints specified.
func (rcv *RFObservationDetails_Ingest) TrackRange() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(52))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Target track or apparent range in km.
/// Example: /// Example: 10.1
/// Constraints: No constraints specified.
func (rcv *RFObservationDetails_Ingest) MutateTrackRange(n float64) bool {
	return rcv._tab.MutateFloat64Slot(52, n)
}

/// Sensor WGS84 latitude at obTime (if mobile/onorbit) in degrees. If null, can be obtained from sensor info. -90 to 90 degrees (negative values south of equator).
/// Example: /// Example: 45.2
/// Constraints: No constraints specified.
func (rcv *RFObservationDetails_Ingest) Senlat() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(54))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Sensor WGS84 latitude at obTime (if mobile/onorbit) in degrees. If null, can be obtained from sensor info. -90 to 90 degrees (negative values south of equator).
/// Example: /// Example: 45.2
/// Constraints: No constraints specified.
func (rcv *RFObservationDetails_Ingest) MutateSenlat(n float64) bool {
	return rcv._tab.MutateFloat64Slot(54, n)
}

/// Sensor WGS84 longitude at obTime (if mobile/onorbit) in degrees. If null, can be obtained from sensor info. -180 to 180 degrees (negative values west of Prime Meridian).
/// Example: /// Example: 80.3
/// Constraints: No constraints specified.
func (rcv *RFObservationDetails_Ingest) Senlon() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(56))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Sensor WGS84 longitude at obTime (if mobile/onorbit) in degrees. If null, can be obtained from sensor info. -180 to 180 degrees (negative values west of Prime Meridian).
/// Example: /// Example: 80.3
/// Constraints: No constraints specified.
func (rcv *RFObservationDetails_Ingest) MutateSenlon(n float64) bool {
	return rcv._tab.MutateFloat64Slot(56, n)
}

/// Sensor altitude at obTime (if mobile/onorbit) in km. If null, can be obtained from sensor info.
/// Example: /// Example: 10.1
/// Constraints: No constraints specified.
func (rcv *RFObservationDetails_Ingest) Senalt() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(58))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Sensor altitude at obTime (if mobile/onorbit) in km. If null, can be obtained from sensor info.
/// Example: /// Example: 10.1
/// Constraints: No constraints specified.
func (rcv *RFObservationDetails_Ingest) MutateSenalt(n float64) bool {
	return rcv._tab.MutateFloat64Slot(58, n)
}

/// ELINT notation.
/// Example: /// Example: Ex. ELINT
/// Constraints: Minimum length = 0, Maximum length = 10
func (rcv *RFObservationDetails_Ingest) Elnot() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(60))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// ELINT notation.
/// Example: /// Example: Ex. ELINT
/// Constraints: Minimum length = 0, Maximum length = 10
/// Center carrier frequency in Hz.
/// Example: /// Example: 10.1
/// Constraints: No constraints specified.
func (rcv *RFObservationDetails_Ingest) Frequency() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(62))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Center carrier frequency in Hz.
/// Example: /// Example: 10.1
/// Constraints: No constraints specified.
func (rcv *RFObservationDetails_Ingest) MutateFrequency(n float64) bool {
	return rcv._tab.MutateFloat64Slot(62, n)
}

/// Nominal or expected center carrier frequency in Hz.
/// Example: /// Example: 10.1
/// Constraints: No constraints specified.
func (rcv *RFObservationDetails_Ingest) NominalFrequency() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(64))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Nominal or expected center carrier frequency in Hz.
/// Example: /// Example: 10.1
/// Constraints: No constraints specified.
func (rcv *RFObservationDetails_Ingest) MutateNominalFrequency(n float64) bool {
	return rcv._tab.MutateFloat64Slot(64, n)
}

/// Start carrier frequency in Hz.
/// Example: /// Example: 10.1
/// Constraints: No constraints specified.
func (rcv *RFObservationDetails_Ingest) StartFrequency() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(66))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Start carrier frequency in Hz.
/// Example: /// Example: 10.1
/// Constraints: No constraints specified.
func (rcv *RFObservationDetails_Ingest) MutateStartFrequency(n float64) bool {
	return rcv._tab.MutateFloat64Slot(66, n)
}

/// End carrier frequency in Hz.
/// Example: /// Example: 10.1
/// Constraints: No constraints specified.
func (rcv *RFObservationDetails_Ingest) EndFrequency() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(68))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// End carrier frequency in Hz.
/// Example: /// Example: 10.1
/// Constraints: No constraints specified.
func (rcv *RFObservationDetails_Ingest) MutateEndFrequency(n float64) bool {
	return rcv._tab.MutateFloat64Slot(68, n)
}

/// Measured power of the center carrier frequency in dBW.
/// Example: /// Example: 10.1
/// Constraints: No constraints specified.
func (rcv *RFObservationDetails_Ingest) RelativeCarrierPower() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(70))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Measured power of the center carrier frequency in dBW.
/// Example: /// Example: 10.1
/// Constraints: No constraints specified.
func (rcv *RFObservationDetails_Ingest) MutateRelativeCarrierPower(n float64) bool {
	return rcv._tab.MutateFloat64Slot(70, n)
}

/// Measured spectrum analyzer power of the center carrier frequency in dBW.
/// Example: /// Example: 10.1
/// Constraints: No constraints specified.
func (rcv *RFObservationDetails_Ingest) SpectrumAnalyzerPower() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(72))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Measured spectrum analyzer power of the center carrier frequency in dBW.
/// Example: /// Example: 10.1
/// Constraints: No constraints specified.
func (rcv *RFObservationDetails_Ingest) MutateSpectrumAnalyzerPower(n float64) bool {
	return rcv._tab.MutateFloat64Slot(72, n)
}

/// The measure of the signal created from the sum of all the noise sources and unwanted signals within the measurement system, in dBW.
/// Example: /// Example: 10.1
/// Constraints: No constraints specified.
func (rcv *RFObservationDetails_Ingest) RelativeNoiseFloor() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(74))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// The measure of the signal created from the sum of all the noise sources and unwanted signals within the measurement system, in dBW.
/// Example: /// Example: 10.1
/// Constraints: No constraints specified.
func (rcv *RFObservationDetails_Ingest) MutateRelativeNoiseFloor(n float64) bool {
	return rcv._tab.MutateFloat64Slot(74, n)
}

/// Reference signal level, in dBW.
/// Example: /// Example: 10.1
/// Constraints: No constraints specified.
func (rcv *RFObservationDetails_Ingest) ReferenceLevel() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(76))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Reference signal level, in dBW.
/// Example: /// Example: 10.1
/// Constraints: No constraints specified.
func (rcv *RFObservationDetails_Ingest) MutateReferenceLevel(n float64) bool {
	return rcv._tab.MutateFloat64Slot(76, n)
}

/// A pulse group repetition interval (PGRI) is a pulse train in which there are groups of closely spaced pulses separated by much longer times between these pulse groups.
/// Example: /// Example: 10.1
/// Constraints: No constraints specified.
func (rcv *RFObservationDetails_Ingest) Pgri() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(78))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// A pulse group repetition interval (PGRI) is a pulse train in which there are groups of closely spaced pulses separated by much longer times between these pulse groups.
/// Example: /// Example: 10.1
/// Constraints: No constraints specified.
func (rcv *RFObservationDetails_Ingest) MutatePgri(n float64) bool {
	return rcv._tab.MutateFloat64Slot(78, n)
}

/// Confidence in the signal and its measurements and characterization.
/// Example: /// Example: 10.1
/// Constraints: No constraints specified.
func (rcv *RFObservationDetails_Ingest) Confidence() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(80))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Confidence in the signal and its measurements and characterization.
/// Example: /// Example: 10.1
/// Constraints: No constraints specified.
func (rcv *RFObservationDetails_Ingest) MutateConfidence(n float64) bool {
	return rcv._tab.MutateFloat64Slot(80, n)
}

/// True if the signal is incoming, false if outgoing.
/// Example: /// Example: False
/// Constraints: No constraints specified.
func (rcv *RFObservationDetails_Ingest) Incoming() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(82))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

/// True if the signal is incoming, false if outgoing.
/// Example: /// Example: False
/// Constraints: No constraints specified.
func (rcv *RFObservationDetails_Ingest) MutateIncoming(n bool) bool {
	return rcv._tab.MutateBoolSlot(82, n)
}

/// Switch Point of the RFObservation record.
/// Example: /// Example: 10
/// Constraints: No constraints specified.
func (rcv *RFObservationDetails_Ingest) SwitchPoint() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(84))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

/// Switch Point of the RFObservation record.
/// Example: /// Example: 10
/// Constraints: No constraints specified.
func (rcv *RFObservationDetails_Ingest) MutateSwitchPoint(n int32) bool {
	return rcv._tab.MutateInt32Slot(84, n)
}

/// Baud rate is the number of symbol changes, waveform changes, or signaling events, across the transmission medium per second.
/// Example: /// Example: 10.1
/// Constraints: No constraints specified.
func (rcv *RFObservationDetails_Ingest) BaudRate() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(86))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Baud rate is the number of symbol changes, waveform changes, or signaling events, across the transmission medium per second.
/// Example: /// Example: 10.1
/// Constraints: No constraints specified.
func (rcv *RFObservationDetails_Ingest) MutateBaudRate(n float64) bool {
	return rcv._tab.MutateFloat64Slot(86, n)
}

/// Signal to noise ratio, in dB.
/// Example: /// Example: 10.1
/// Constraints: No constraints specified.
func (rcv *RFObservationDetails_Ingest) Snr() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(88))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Signal to noise ratio, in dB.
/// Example: /// Example: 10.1
/// Constraints: No constraints specified.
func (rcv *RFObservationDetails_Ingest) MutateSnr(n float64) bool {
	return rcv._tab.MutateFloat64Slot(88, n)
}

/// Nominal or expected signal to noise ratio, in dB.
/// Example: /// Example: 10.1
/// Constraints: No constraints specified.
func (rcv *RFObservationDetails_Ingest) NominalSnr() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(90))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Nominal or expected signal to noise ratio, in dB.
/// Example: /// Example: 10.1
/// Constraints: No constraints specified.
func (rcv *RFObservationDetails_Ingest) MutateNominalSnr(n float64) bool {
	return rcv._tab.MutateFloat64Slot(90, n)
}

/// The antenna pointing dependent polarizer angle, in degrees.
/// Example: /// Example: 10.1
/// Constraints: No constraints specified.
func (rcv *RFObservationDetails_Ingest) Polarity() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(92))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// The antenna pointing dependent polarizer angle, in degrees.
/// Example: /// Example: 10.1
/// Constraints: No constraints specified.
func (rcv *RFObservationDetails_Ingest) MutatePolarity(n float64) bool {
	return rcv._tab.MutateFloat64Slot(92, n)
}

/// Transponder polarization e.g. H - (Horizontally Polarized) Perpendicular to Earth's surface, V - (Vertically Polarized) Parallel to Earth's surface, L - (Left Hand Circularly Polarized) Rotating left relative to the earth's surface, R - (Right Hand Circularly Polarized) Rotating right relative to the earth's surface.
/// Example: /// Example: H
/// Constraints: Minimum length = 0, Maximum length = 16
func (rcv *RFObservationDetails_Ingest) PolarityType() RFObservationDetails_Ingest_polarityType_Enum {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(94))
	if o != 0 {
		return RFObservationDetails_Ingest_polarityType_Enum(rcv._tab.GetInt8(o + rcv._tab.Pos))
	}
	return 0
}

/// Transponder polarization e.g. H - (Horizontally Polarized) Perpendicular to Earth's surface, V - (Vertically Polarized) Parallel to Earth's surface, L - (Left Hand Circularly Polarized) Rotating left relative to the earth's surface, R - (Right Hand Circularly Polarized) Rotating right relative to the earth's surface.
/// Example: /// Example: H
/// Constraints: Minimum length = 0, Maximum length = 16
func (rcv *RFObservationDetails_Ingest) MutatePolarityType(n RFObservationDetails_Ingest_polarityType_Enum) bool {
	return rcv._tab.MutateInt8Slot(94, int8(n))
}

/// Channel of the RFObservation record.
/// Example: /// Example: 10
/// Constraints: No constraints specified.
func (rcv *RFObservationDetails_Ingest) Channel() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(96))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

/// Channel of the RFObservation record.
/// Example: /// Example: 10
/// Constraints: No constraints specified.
func (rcv *RFObservationDetails_Ingest) MutateChannel(n int32) bool {
	return rcv._tab.MutateInt32Slot(96, n)
}

/// Measured carrier power over noise (dBW/Hz).
/// Example: /// Example: 10.1
/// Constraints: No constraints specified.
func (rcv *RFObservationDetails_Ingest) PowerOverNoise() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(98))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Measured carrier power over noise (dBW/Hz).
/// Example: /// Example: 10.1
/// Constraints: No constraints specified.
func (rcv *RFObservationDetails_Ingest) MutatePowerOverNoise(n float64) bool {
	return rcv._tab.MutateFloat64Slot(98, n)
}

/// Expected carrier power over noise (dBW/Hz).
/// Example: /// Example: 10.1
/// Constraints: No constraints specified.
func (rcv *RFObservationDetails_Ingest) NominalPowerOverNoise() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(100))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Expected carrier power over noise (dBW/Hz).
/// Example: /// Example: 10.1
/// Constraints: No constraints specified.
func (rcv *RFObservationDetails_Ingest) MutateNominalPowerOverNoise(n float64) bool {
	return rcv._tab.MutateFloat64Slot(100, n)
}

/// Measured bandwidth in Hz.
/// Example: /// Example: 10.1
/// Constraints: No constraints specified.
func (rcv *RFObservationDetails_Ingest) Bandwidth() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(102))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Measured bandwidth in Hz.
/// Example: /// Example: 10.1
/// Constraints: No constraints specified.
func (rcv *RFObservationDetails_Ingest) MutateBandwidth(n float64) bool {
	return rcv._tab.MutateFloat64Slot(102, n)
}

/// Expected bandwidth in Hz.
/// Example: /// Example: 10.1
/// Constraints: No constraints specified.
func (rcv *RFObservationDetails_Ingest) NominalBandwidth() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(104))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Expected bandwidth in Hz.
/// Example: /// Example: 10.1
/// Constraints: No constraints specified.
func (rcv *RFObservationDetails_Ingest) MutateNominalBandwidth(n float64) bool {
	return rcv._tab.MutateFloat64Slot(104, n)
}

/// Resolution bandwidth in Hz.
/// Example: /// Example: 10.1
/// Constraints: No constraints specified.
func (rcv *RFObservationDetails_Ingest) ResolutionBandwidth() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(106))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Resolution bandwidth in Hz.
/// Example: /// Example: 10.1
/// Constraints: No constraints specified.
func (rcv *RFObservationDetails_Ingest) MutateResolutionBandwidth(n float64) bool {
	return rcv._tab.MutateFloat64Slot(106, n)
}

/// Video bandwidth in Hz.
/// Example: /// Example: 10.1
/// Constraints: No constraints specified.
func (rcv *RFObservationDetails_Ingest) VideoBandwidth() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(108))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Video bandwidth in Hz.
/// Example: /// Example: 10.1
/// Constraints: No constraints specified.
func (rcv *RFObservationDetails_Ingest) MutateVideoBandwidth(n float64) bool {
	return rcv._tab.MutateFloat64Slot(108, n)
}

/// Measured Equivalent Isotopically Radiated Power in dBW.
/// Example: /// Example: 10.1
/// Constraints: No constraints specified.
func (rcv *RFObservationDetails_Ingest) Eirp() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(110))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Measured Equivalent Isotopically Radiated Power in dBW.
/// Example: /// Example: 10.1
/// Constraints: No constraints specified.
func (rcv *RFObservationDetails_Ingest) MutateEirp(n float64) bool {
	return rcv._tab.MutateFloat64Slot(110, n)
}

/// Expected Equivalent Isotopically Radiated Power in dBW.
/// Example: /// Example: 10.1
/// Constraints: No constraints specified.
func (rcv *RFObservationDetails_Ingest) NominalEirp() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(112))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Expected Equivalent Isotopically Radiated Power in dBW.
/// Example: /// Example: 10.1
/// Constraints: No constraints specified.
func (rcv *RFObservationDetails_Ingest) MutateNominalEirp(n float64) bool {
	return rcv._tab.MutateFloat64Slot(112, n)
}

/// Minimum measured PSD value of the trace in dBW.
/// Example: /// Example: 10.1
/// Constraints: No constraints specified.
func (rcv *RFObservationDetails_Ingest) MinPsd() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(114))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Minimum measured PSD value of the trace in dBW.
/// Example: /// Example: 10.1
/// Constraints: No constraints specified.
func (rcv *RFObservationDetails_Ingest) MutateMinPsd(n float64) bool {
	return rcv._tab.MutateFloat64Slot(114, n)
}

/// Maximum measured PSD value of the trace in dBW.
/// Example: /// Example: 10.1
/// Constraints: No constraints specified.
func (rcv *RFObservationDetails_Ingest) MaxPsd() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(116))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Maximum measured PSD value of the trace in dBW.
/// Example: /// Example: 10.1
/// Constraints: No constraints specified.
func (rcv *RFObservationDetails_Ingest) MutateMaxPsd(n float64) bool {
	return rcv._tab.MutateFloat64Slot(116, n)
}

/// Frequency Shift of the RFObservation record.
/// Example: /// Example: 10.1
/// Constraints: No constraints specified.
func (rcv *RFObservationDetails_Ingest) FrequencyShift() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(118))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Frequency Shift of the RFObservation record.
/// Example: /// Example: 10.1
/// Constraints: No constraints specified.
func (rcv *RFObservationDetails_Ingest) MutateFrequencyShift(n float64) bool {
	return rcv._tab.MutateFloat64Slot(118, n)
}

/// Peak of the RFObservation record.
/// Example: /// Example: False
/// Constraints: No constraints specified.
func (rcv *RFObservationDetails_Ingest) Peak() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(120))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

/// Peak of the RFObservation record.
/// Example: /// Example: False
/// Constraints: No constraints specified.
func (rcv *RFObservationDetails_Ingest) MutatePeak(n bool) bool {
	return rcv._tab.MutateBoolSlot(120, n)
}

/// Antenna name of the RFObservation record.
/// Example: /// Example: Antenna1
/// Constraints: Minimum length = 0, Maximum length = 64
func (rcv *RFObservationDetails_Ingest) AntennaName() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(122))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Antenna name of the RFObservation record.
/// Example: /// Example: Antenna1
/// Constraints: Minimum length = 0, Maximum length = 64
/// Detection status (e.g. DETECTED, CARRIER_ACQUIRING, CARRIER_DETECTED, NOT_DETECTED, etc).
/// Example: /// Example: DETECTED
/// Constraints: Minimum length = 0, Maximum length = 32
func (rcv *RFObservationDetails_Ingest) DetectionStatus() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(124))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Detection status (e.g. DETECTED, CARRIER_ACQUIRING, CARRIER_DETECTED, NOT_DETECTED, etc).
/// Example: /// Example: DETECTED
/// Constraints: Minimum length = 0, Maximum length = 32
/// Collection mode (e.g. SURVEY, SPOT_SEARCH, NEIGHBORHOOD_WATCH, DIRECTED_SEARCH, MANUAL, etc).
/// Example: /// Example: SURVEY
/// Constraints: Minimum length = 0, Maximum length = 32
func (rcv *RFObservationDetails_Ingest) CollectionMode() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(126))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Collection mode (e.g. SURVEY, SPOT_SEARCH, NEIGHBORHOOD_WATCH, DIRECTED_SEARCH, MANUAL, etc).
/// Example: /// Example: SURVEY
/// Constraints: Minimum length = 0, Maximum length = 32
/// Optional URI location in the document repository of the raw file parsed by the system to produce this record. To download the raw file, prepend https://udl-hostname/scs/download?id= to this value.
/// Example: /// Example: Example URI
/// Constraints: Minimum length = 0, Maximum length = 256
func (rcv *RFObservationDetails_Ingest) RawFileUri() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(128))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Optional URI location in the document repository of the raw file parsed by the system to produce this record. To download the raw file, prepend https://udl-hostname/scs/download?id= to this value.
/// Example: /// Example: Example URI
/// Constraints: Minimum length = 0, Maximum length = 256
/// Source of the data.
/// Example: /// Example: Bluestaq
/// Constraints: Minimum length = 1, Maximum length = 64
func (rcv *RFObservationDetails_Ingest) Source() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(130))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Source of the data.
/// Example: /// Example: Bluestaq
/// Constraints: Minimum length = 1, Maximum length = 64
/// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
/// Example: /// Example: THIRD_PARTY_DATASOURCE
/// Constraints: Minimum length = 0, Maximum length = 64
func (rcv *RFObservationDetails_Ingest) Origin() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(132))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
/// Example: /// Example: THIRD_PARTY_DATASOURCE
/// Constraints: Minimum length = 0, Maximum length = 64
/// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
/// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
/// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
/// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
/// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
/// Example: /// Example: TEST
/// Constraints: Minimum length = 1, Maximum length = 32
func (rcv *RFObservationDetails_Ingest) DataMode() RFObservationDetails_Ingest_dataMode_Enum {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(134))
	if o != 0 {
		return RFObservationDetails_Ingest_dataMode_Enum(rcv._tab.GetInt8(o + rcv._tab.Pos))
	}
	return 0
}

/// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
/// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
/// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
/// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
/// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
/// Example: /// Example: TEST
/// Constraints: Minimum length = 1, Maximum length = 32
func (rcv *RFObservationDetails_Ingest) MutateDataMode(n RFObservationDetails_Ingest_dataMode_Enum) bool {
	return rcv._tab.MutateInt8Slot(134, int8(n))
}

/// Optional array of provider/source specific tags for this data, where each element is no longer than 32 characters, used for implementing data owner conditional access controls to restrict access to the data. Should be left null by data providers unless conditional access controls are coordinated with the UDL team.
/// Example: /// Example: ['PROVIDER_TAG1', 'PROVIDER_TAG2']
/// Constraints: No constraints specified.
func (rcv *RFObservationDetails_Ingest) Tags(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(136))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *RFObservationDetails_Ingest) TagsLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(136))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

/// Optional array of provider/source specific tags for this data, where each element is no longer than 32 characters, used for implementing data owner conditional access controls to restrict access to the data. Should be left null by data providers unless conditional access controls are coordinated with the UDL team.
/// Example: /// Example: ['PROVIDER_TAG1', 'PROVIDER_TAG2']
/// Constraints: No constraints specified.
/// Time the row was created in the database, auto-populated by the system.
/// Example: /// Example: 2018-01-01T16:00:00.123Z
/// Constraints: No constraints specified.
func (rcv *RFObservationDetails_Ingest) CreatedAt() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(138))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Time the row was created in the database, auto-populated by the system.
/// Example: /// Example: 2018-01-01T16:00:00.123Z
/// Constraints: No constraints specified.
/// Application user who created the row in the database, auto-populated by the system.
/// Example: /// Example: some.user
/// Constraints: Minimum length = 1, Maximum length = 64
func (rcv *RFObservationDetails_Ingest) CreatedBy() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(140))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Application user who created the row in the database, auto-populated by the system.
/// Example: /// Example: some.user
/// Constraints: Minimum length = 1, Maximum length = 64
/// Noise power density, in dBW-Hz.
/// Example: /// Example: 10.1
/// Constraints: No constraints specified.
func (rcv *RFObservationDetails_Ingest) NoisePwrDensity() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(142))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Noise power density, in dBW-Hz.
/// Example: /// Example: 10.1
/// Constraints: No constraints specified.
func (rcv *RFObservationDetails_Ingest) MutateNoisePwrDensity(n float64) bool {
	return rcv._tab.MutateFloat64Slot(142, n)
}

/// Carrier standard (e.g. DVB-S2, 802.11g, etc.).
/// Example: /// Example: DVB-S2
/// Constraints: Minimum length = 0, Maximum length = 10
func (rcv *RFObservationDetails_Ingest) CarrierStandard() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(144))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Carrier standard (e.g. DVB-S2, 802.11g, etc.).
/// Example: /// Example: DVB-S2
/// Constraints: Minimum length = 0, Maximum length = 10
/// Transponder modulation (e.g. Auto, QPSK, 8PSK, etc).
/// Example: /// Example: Auto
/// Constraints: Minimum length = 0, Maximum length = 10
func (rcv *RFObservationDetails_Ingest) Modulation() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(146))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Transponder modulation (e.g. Auto, QPSK, 8PSK, etc).
/// Example: /// Example: Auto
/// Constraints: Minimum length = 0, Maximum length = 10
/// Inner forward error correction rate:  0 = Auto, 1 = 1/2, 2 = 2/3, 3 = 3/4, 4 = 5/6, 5 = 7/8, 6 = 8/9, 7 = 3/5, 8 = 4/5, 9 = 9/10, 15 = None.
/// Example: /// Example: 7
/// Constraints: No constraints specified.
func (rcv *RFObservationDetails_Ingest) InnerCodingRate() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(148))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

/// Inner forward error correction rate:  0 = Auto, 1 = 1/2, 2 = 2/3, 3 = 3/4, 4 = 5/6, 5 = 7/8, 6 = 8/9, 7 = 3/5, 8 = 4/5, 9 = 9/10, 15 = None.
/// Example: /// Example: 7
/// Constraints: No constraints specified.
func (rcv *RFObservationDetails_Ingest) MutateInnerCodingRate(n int32) bool {
	return rcv._tab.MutateInt32Slot(148, n)
}

/// Outer forward error correction rate:  0 = Auto, 1 = 1/2, 2 = 2/3, 3 = 3/4, 4 = 5/6, 5 = 7/8, 6 = 8/9, 7 = 3/5, 8 = 4/5, 9 = 9/10, 15 = None.
/// Example: /// Example: 4
/// Constraints: No constraints specified.
func (rcv *RFObservationDetails_Ingest) OuterCodingRate() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(150))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

/// Outer forward error correction rate:  0 = Auto, 1 = 1/2, 2 = 2/3, 3 = 3/4, 4 = 5/6, 5 = 7/8, 6 = 8/9, 7 = 3/5, 8 = 4/5, 9 = 9/10, 15 = None.
/// Example: /// Example: 4
/// Constraints: No constraints specified.
func (rcv *RFObservationDetails_Ingest) MutateOuterCodingRate(n int32) bool {
	return rcv._tab.MutateInt32Slot(150, n)
}

/// Transmit pulse shaping filter typ (e.g. RRC).
/// Example: /// Example: RRC
/// Constraints: Minimum length = 0, Maximum length = 10
func (rcv *RFObservationDetails_Ingest) TransmitFilterType() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(152))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Transmit pulse shaping filter typ (e.g. RRC).
/// Example: /// Example: RRC
/// Constraints: Minimum length = 0, Maximum length = 10
/// Transmit pulse shaping filter roll-off value.
/// Example: /// Example: 10.1
/// Constraints: No constraints specified.
func (rcv *RFObservationDetails_Ingest) TransmitFilterRollOff() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(154))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Transmit pulse shaping filter roll-off value.
/// Example: /// Example: 10.1
/// Constraints: No constraints specified.
func (rcv *RFObservationDetails_Ingest) MutateTransmitFilterRollOff(n float64) bool {
	return rcv._tab.MutateFloat64Slot(154, n)
}

/// Symbol to noise ratio, in dB.
/// Example: /// Example: 10.1
/// Constraints: No constraints specified.
func (rcv *RFObservationDetails_Ingest) SymbolToNoiseRatio() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(156))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Symbol to noise ratio, in dB.
/// Example: /// Example: 10.1
/// Constraints: No constraints specified.
func (rcv *RFObservationDetails_Ingest) MutateSymbolToNoiseRatio(n float64) bool {
	return rcv._tab.MutateFloat64Slot(156, n)
}

/// The ratio of bit errors per number of received bits.
/// Example: /// Example: 10.1
/// Constraints: No constraints specified.
func (rcv *RFObservationDetails_Ingest) BitErrorRate() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(158))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// The ratio of bit errors per number of received bits.
/// Example: /// Example: 10.1
/// Constraints: No constraints specified.
func (rcv *RFObservationDetails_Ingest) MutateBitErrorRate(n float64) bool {
	return rcv._tab.MutateFloat64Slot(158, n)
}

/// The originating source network on which this record was created, auto-populated by the system.
/// Example: /// Example: ORIG
/// Constraints: Minimum length = 1, Maximum length = 32
func (rcv *RFObservationDetails_Ingest) OrigNetwork() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(160))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The originating source network on which this record was created, auto-populated by the system.
/// Example: /// Example: ORIG
/// Constraints: Minimum length = 1, Maximum length = 32
/// The source data library from which this record was received. This could be a remote or tactical UDL or another data library. If null, the record should be assumed to have originated from the primary Enterprise UDL.
/// Example: /// Example: AXE
/// Constraints: Minimum length = 0, Maximum length = 64
func (rcv *RFObservationDetails_Ingest) SourceDl() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(162))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The source data library from which this record was received. This could be a remote or tactical UDL or another data library. If null, the record should be assumed to have originated from the primary Enterprise UDL.
/// Example: /// Example: AXE
/// Constraints: Minimum length = 0, Maximum length = 64
/// Optional source-provided and searchable metadata or descriptor of the data.
/// Example: /// Example: descriptor
/// Constraints: Minimum length = 0, Maximum length = 64
func (rcv *RFObservationDetails_Ingest) Descriptor() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(164))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Optional source-provided and searchable metadata or descriptor of the data.
/// Example: /// Example: descriptor
/// Constraints: Minimum length = 0, Maximum length = 64
/// Optional URL containing additional information on this observation.
/// Example: /// Example: https://some-url
/// Constraints: Minimum length = 0, Maximum length = 2048
func (rcv *RFObservationDetails_Ingest) Url() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(166))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Optional URL containing additional information on this observation.
/// Example: /// Example: https://some-url
/// Constraints: Minimum length = 0, Maximum length = 2048
/// Array of individual PSD frequencies of the signal in Hz. This array should correspond with the same-sized array of powers.
/// Example: /// Example: [1.1, 2.2]
/// Constraints: No constraints specified.
func (rcv *RFObservationDetails_Ingest) Frequencies(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(168))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *RFObservationDetails_Ingest) FrequenciesLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(168))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

/// Array of individual PSD frequencies of the signal in Hz. This array should correspond with the same-sized array of powers.
/// Example: /// Example: [1.1, 2.2]
/// Constraints: No constraints specified.
/// Array of individual measured PSD powers of the signal in dBW. This array should correspond with the same-sized array of frequencies.
/// Example: /// Example: [1.1, 2.2]
/// Constraints: No constraints specified.
func (rcv *RFObservationDetails_Ingest) Powers(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(170))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *RFObservationDetails_Ingest) PowersLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(170))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

/// Array of individual measured PSD powers of the signal in dBW. This array should correspond with the same-sized array of frequencies.
/// Example: /// Example: [1.1, 2.2]
/// Constraints: No constraints specified.
/// Array of signal to noise ratios of the signals, in dB.
/// Example: /// Example: [1.1, 2.2]
/// Constraints: No constraints specified.
func (rcv *RFObservationDetails_Ingest) Snrs(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(172))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *RFObservationDetails_Ingest) SnrsLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(172))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

/// Array of signal to noise ratios of the signals, in dB.
/// Example: /// Example: [1.1, 2.2]
/// Constraints: No constraints specified.
/// Array of measurement confidences.
/// Example: /// Example: [1.1, 2.2]
/// Constraints: No constraints specified.
func (rcv *RFObservationDetails_Ingest) Confidences(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(174))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *RFObservationDetails_Ingest) ConfidencesLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(174))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

/// Array of measurement confidences.
/// Example: /// Example: [1.1, 2.2]
/// Constraints: No constraints specified.
/// Array of detection statuses (e.g. DETECTED, CARRIER_DETECTED, NOT_DETECTED) for each measured signal.
/// Example: /// Example: ['DETECTED']
/// Constraints: No constraints specified.
func (rcv *RFObservationDetails_Ingest) DetectionStatuses(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(176))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *RFObservationDetails_Ingest) DetectionStatusesLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(176))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

/// Array of detection statuses (e.g. DETECTED, CARRIER_DETECTED, NOT_DETECTED) for each measured signal.
/// Example: /// Example: ['DETECTED']
/// Constraints: No constraints specified.
/// Array of chipRates.
/// Example: /// Example: [1.1, 2.2]
/// Constraints: No constraints specified.
func (rcv *RFObservationDetails_Ingest) ChipRates(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(178))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *RFObservationDetails_Ingest) ChipRatesLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(178))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

/// Array of chipRates.
/// Example: /// Example: [1.1, 2.2]
/// Constraints: No constraints specified.
/// Array of code taps.
/// Example: /// Example: ['TAG1', 'TAG2']
/// Constraints: No constraints specified.
func (rcv *RFObservationDetails_Ingest) CodeTaps(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(180))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *RFObservationDetails_Ingest) CodeTapsLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(180))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

/// Array of code taps.
/// Example: /// Example: ['TAG1', 'TAG2']
/// Constraints: No constraints specified.
/// Array of code fills.
/// Example: /// Example: ['TAG1', 'TAG2']
/// Constraints: No constraints specified.
func (rcv *RFObservationDetails_Ingest) CodeFills(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(182))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *RFObservationDetails_Ingest) CodeFillsLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(182))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

/// Array of code fills.
/// Example: /// Example: ['TAG1', 'TAG2']
/// Constraints: No constraints specified.
/// Array of code lengths.
/// Example: /// Example: [1.1, 2.2]
/// Constraints: No constraints specified.
func (rcv *RFObservationDetails_Ingest) CodeLengths(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(184))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *RFObservationDetails_Ingest) CodeLengthsLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(184))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

/// Array of code lengths.
/// Example: /// Example: [1.1, 2.2]
/// Constraints: No constraints specified.
/// Array of pnOrder.
/// Example: /// Example: [1, 2]
/// Constraints: No constraints specified.
func (rcv *RFObservationDetails_Ingest) PnOrders(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(186))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *RFObservationDetails_Ingest) PnOrdersLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(186))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

/// Array of pnOrder.
/// Example: /// Example: [1, 2]
/// Constraints: No constraints specified.
/// Array of optional source provided identifiers of the measurements/signals.
/// Example: /// Example: ['ID1', 'ID2']
/// Constraints: No constraints specified.
func (rcv *RFObservationDetails_Ingest) SignalIds(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(188))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *RFObservationDetails_Ingest) SignalIdsLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(188))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

/// Array of optional source provided identifiers of the measurements/signals.
/// Example: /// Example: ['ID1', 'ID2']
/// Constraints: No constraints specified.
/// Array of measured signal baud rates.
/// Example: /// Example: [1.1, 2.2]
/// Constraints: No constraints specified.
func (rcv *RFObservationDetails_Ingest) BaudRates(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(190))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *RFObservationDetails_Ingest) BaudRatesLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(190))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

/// Array of measured signal baud rates.
/// Example: /// Example: [1.1, 2.2]
/// Constraints: No constraints specified.
/// Array of optional source provided telemetry identifiers of the measurements/signals.
/// Example: /// Example: ['ID1', 'ID2']
/// Constraints: No constraints specified.
func (rcv *RFObservationDetails_Ingest) TelemetryIds(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(192))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *RFObservationDetails_Ingest) TelemetryIdsLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(192))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

/// Array of optional source provided telemetry identifiers of the measurements/signals.
/// Example: /// Example: ['ID1', 'ID2']
/// Constraints: No constraints specified.
/// Array of individual x-coordinates for demodulated signal constellation. This array should correspond with the same-sized array of constellationYPoints.
/// Example: /// Example: [1.1, 2.2]
/// Constraints: No constraints specified.
func (rcv *RFObservationDetails_Ingest) ConstellationXpoints(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(194))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *RFObservationDetails_Ingest) ConstellationXpointsLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(194))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

/// Array of individual x-coordinates for demodulated signal constellation. This array should correspond with the same-sized array of constellationYPoints.
/// Example: /// Example: [1.1, 2.2]
/// Constraints: No constraints specified.
/// Array of individual y-coordinates for demodulated signal constellation. This array should correspond with the same-sized array of constellationXPoints.
/// Example: /// Example: [1.1, 2.2]
/// Constraints: No constraints specified.
func (rcv *RFObservationDetails_Ingest) ConstellationYpoints(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(196))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *RFObservationDetails_Ingest) ConstellationYpointsLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(196))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

/// Array of individual y-coordinates for demodulated signal constellation. This array should correspond with the same-sized array of constellationXPoints.
/// Example: /// Example: [1.1, 2.2]
/// Constraints: No constraints specified.
func RFObservationDetails_IngestStart(builder *flatbuffers.Builder) {
	builder.StartObject(97)
}
func RFObservationDetails_IngestAddId(builder *flatbuffers.Builder, id flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(id), 0)
}
func RFObservationDetails_IngestAddClassificationMarking(builder *flatbuffers.Builder, classificationMarking flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(classificationMarking), 0)
}
func RFObservationDetails_IngestAddObTime(builder *flatbuffers.Builder, obTime flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(obTime), 0)
}
func RFObservationDetails_IngestAddIdOnOrbit(builder *flatbuffers.Builder, idOnOrbit flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(3, flatbuffers.UOffsetT(idOnOrbit), 0)
}
func RFObservationDetails_IngestAddIdSensor(builder *flatbuffers.Builder, idSensor flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(4, flatbuffers.UOffsetT(idSensor), 0)
}
func RFObservationDetails_IngestAddType(builder *flatbuffers.Builder, type_ flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(5, flatbuffers.UOffsetT(type_), 0)
}
func RFObservationDetails_IngestAddSatNo(builder *flatbuffers.Builder, satNo int32) {
	builder.PrependInt32Slot(6, satNo, 0)
}
func RFObservationDetails_IngestAddTaskId(builder *flatbuffers.Builder, taskId flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(7, flatbuffers.UOffsetT(taskId), 0)
}
func RFObservationDetails_IngestAddTransactionId(builder *flatbuffers.Builder, transactionId flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(8, flatbuffers.UOffsetT(transactionId), 0)
}
func RFObservationDetails_IngestAddTrackId(builder *flatbuffers.Builder, trackId flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(9, flatbuffers.UOffsetT(trackId), 0)
}
func RFObservationDetails_IngestAddOrigObjectId(builder *flatbuffers.Builder, origObjectId flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(10, flatbuffers.UOffsetT(origObjectId), 0)
}
func RFObservationDetails_IngestAddOrigSensorId(builder *flatbuffers.Builder, origSensorId flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(11, flatbuffers.UOffsetT(origSensorId), 0)
}
func RFObservationDetails_IngestAddUct(builder *flatbuffers.Builder, uct bool) {
	builder.PrependBoolSlot(12, uct, false)
}
func RFObservationDetails_IngestAddTransponder(builder *flatbuffers.Builder, transponder flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(13, flatbuffers.UOffsetT(transponder), 0)
}
func RFObservationDetails_IngestAddAzimuth(builder *flatbuffers.Builder, azimuth float64) {
	builder.PrependFloat64Slot(14, azimuth, 0.0)
}
func RFObservationDetails_IngestAddAzimuthUnc(builder *flatbuffers.Builder, azimuthUnc float64) {
	builder.PrependFloat64Slot(15, azimuthUnc, 0.0)
}
func RFObservationDetails_IngestAddAzimuthRate(builder *flatbuffers.Builder, azimuthRate float64) {
	builder.PrependFloat64Slot(16, azimuthRate, 0.0)
}
func RFObservationDetails_IngestAddElevation(builder *flatbuffers.Builder, elevation float64) {
	builder.PrependFloat64Slot(17, elevation, 0.0)
}
func RFObservationDetails_IngestAddElevationUnc(builder *flatbuffers.Builder, elevationUnc float64) {
	builder.PrependFloat64Slot(18, elevationUnc, 0.0)
}
func RFObservationDetails_IngestAddElevationRate(builder *flatbuffers.Builder, elevationRate float64) {
	builder.PrependFloat64Slot(19, elevationRate, 0.0)
}
func RFObservationDetails_IngestAddRange(builder *flatbuffers.Builder, range_ float64) {
	builder.PrependFloat64Slot(20, range_, 0.0)
}
func RFObservationDetails_IngestAddRangeUnc(builder *flatbuffers.Builder, rangeUnc float64) {
	builder.PrependFloat64Slot(21, rangeUnc, 0.0)
}
func RFObservationDetails_IngestAddRangeRate(builder *flatbuffers.Builder, rangeRate float64) {
	builder.PrependFloat64Slot(22, rangeRate, 0.0)
}
func RFObservationDetails_IngestAddRangeRateUnc(builder *flatbuffers.Builder, rangeRateUnc float64) {
	builder.PrependFloat64Slot(23, rangeRateUnc, 0.0)
}
func RFObservationDetails_IngestAddTrackRange(builder *flatbuffers.Builder, trackRange float64) {
	builder.PrependFloat64Slot(24, trackRange, 0.0)
}
func RFObservationDetails_IngestAddSenlat(builder *flatbuffers.Builder, senlat float64) {
	builder.PrependFloat64Slot(25, senlat, 0.0)
}
func RFObservationDetails_IngestAddSenlon(builder *flatbuffers.Builder, senlon float64) {
	builder.PrependFloat64Slot(26, senlon, 0.0)
}
func RFObservationDetails_IngestAddSenalt(builder *flatbuffers.Builder, senalt float64) {
	builder.PrependFloat64Slot(27, senalt, 0.0)
}
func RFObservationDetails_IngestAddElnot(builder *flatbuffers.Builder, elnot flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(28, flatbuffers.UOffsetT(elnot), 0)
}
func RFObservationDetails_IngestAddFrequency(builder *flatbuffers.Builder, frequency float64) {
	builder.PrependFloat64Slot(29, frequency, 0.0)
}
func RFObservationDetails_IngestAddNominalFrequency(builder *flatbuffers.Builder, nominalFrequency float64) {
	builder.PrependFloat64Slot(30, nominalFrequency, 0.0)
}
func RFObservationDetails_IngestAddStartFrequency(builder *flatbuffers.Builder, startFrequency float64) {
	builder.PrependFloat64Slot(31, startFrequency, 0.0)
}
func RFObservationDetails_IngestAddEndFrequency(builder *flatbuffers.Builder, endFrequency float64) {
	builder.PrependFloat64Slot(32, endFrequency, 0.0)
}
func RFObservationDetails_IngestAddRelativeCarrierPower(builder *flatbuffers.Builder, relativeCarrierPower float64) {
	builder.PrependFloat64Slot(33, relativeCarrierPower, 0.0)
}
func RFObservationDetails_IngestAddSpectrumAnalyzerPower(builder *flatbuffers.Builder, spectrumAnalyzerPower float64) {
	builder.PrependFloat64Slot(34, spectrumAnalyzerPower, 0.0)
}
func RFObservationDetails_IngestAddRelativeNoiseFloor(builder *flatbuffers.Builder, relativeNoiseFloor float64) {
	builder.PrependFloat64Slot(35, relativeNoiseFloor, 0.0)
}
func RFObservationDetails_IngestAddReferenceLevel(builder *flatbuffers.Builder, referenceLevel float64) {
	builder.PrependFloat64Slot(36, referenceLevel, 0.0)
}
func RFObservationDetails_IngestAddPgri(builder *flatbuffers.Builder, pgri float64) {
	builder.PrependFloat64Slot(37, pgri, 0.0)
}
func RFObservationDetails_IngestAddConfidence(builder *flatbuffers.Builder, confidence float64) {
	builder.PrependFloat64Slot(38, confidence, 0.0)
}
func RFObservationDetails_IngestAddIncoming(builder *flatbuffers.Builder, incoming bool) {
	builder.PrependBoolSlot(39, incoming, false)
}
func RFObservationDetails_IngestAddSwitchPoint(builder *flatbuffers.Builder, switchPoint int32) {
	builder.PrependInt32Slot(40, switchPoint, 0)
}
func RFObservationDetails_IngestAddBaudRate(builder *flatbuffers.Builder, baudRate float64) {
	builder.PrependFloat64Slot(41, baudRate, 0.0)
}
func RFObservationDetails_IngestAddSnr(builder *flatbuffers.Builder, snr float64) {
	builder.PrependFloat64Slot(42, snr, 0.0)
}
func RFObservationDetails_IngestAddNominalSnr(builder *flatbuffers.Builder, nominalSnr float64) {
	builder.PrependFloat64Slot(43, nominalSnr, 0.0)
}
func RFObservationDetails_IngestAddPolarity(builder *flatbuffers.Builder, polarity float64) {
	builder.PrependFloat64Slot(44, polarity, 0.0)
}
func RFObservationDetails_IngestAddPolarityType(builder *flatbuffers.Builder, polarityType RFObservationDetails_Ingest_polarityType_Enum) {
	builder.PrependInt8Slot(45, int8(polarityType), 0)
}
func RFObservationDetails_IngestAddChannel(builder *flatbuffers.Builder, channel int32) {
	builder.PrependInt32Slot(46, channel, 0)
}
func RFObservationDetails_IngestAddPowerOverNoise(builder *flatbuffers.Builder, powerOverNoise float64) {
	builder.PrependFloat64Slot(47, powerOverNoise, 0.0)
}
func RFObservationDetails_IngestAddNominalPowerOverNoise(builder *flatbuffers.Builder, nominalPowerOverNoise float64) {
	builder.PrependFloat64Slot(48, nominalPowerOverNoise, 0.0)
}
func RFObservationDetails_IngestAddBandwidth(builder *flatbuffers.Builder, bandwidth float64) {
	builder.PrependFloat64Slot(49, bandwidth, 0.0)
}
func RFObservationDetails_IngestAddNominalBandwidth(builder *flatbuffers.Builder, nominalBandwidth float64) {
	builder.PrependFloat64Slot(50, nominalBandwidth, 0.0)
}
func RFObservationDetails_IngestAddResolutionBandwidth(builder *flatbuffers.Builder, resolutionBandwidth float64) {
	builder.PrependFloat64Slot(51, resolutionBandwidth, 0.0)
}
func RFObservationDetails_IngestAddVideoBandwidth(builder *flatbuffers.Builder, videoBandwidth float64) {
	builder.PrependFloat64Slot(52, videoBandwidth, 0.0)
}
func RFObservationDetails_IngestAddEirp(builder *flatbuffers.Builder, eirp float64) {
	builder.PrependFloat64Slot(53, eirp, 0.0)
}
func RFObservationDetails_IngestAddNominalEirp(builder *flatbuffers.Builder, nominalEirp float64) {
	builder.PrependFloat64Slot(54, nominalEirp, 0.0)
}
func RFObservationDetails_IngestAddMinPsd(builder *flatbuffers.Builder, minPsd float64) {
	builder.PrependFloat64Slot(55, minPsd, 0.0)
}
func RFObservationDetails_IngestAddMaxPsd(builder *flatbuffers.Builder, maxPsd float64) {
	builder.PrependFloat64Slot(56, maxPsd, 0.0)
}
func RFObservationDetails_IngestAddFrequencyShift(builder *flatbuffers.Builder, frequencyShift float64) {
	builder.PrependFloat64Slot(57, frequencyShift, 0.0)
}
func RFObservationDetails_IngestAddPeak(builder *flatbuffers.Builder, peak bool) {
	builder.PrependBoolSlot(58, peak, false)
}
func RFObservationDetails_IngestAddAntennaName(builder *flatbuffers.Builder, antennaName flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(59, flatbuffers.UOffsetT(antennaName), 0)
}
func RFObservationDetails_IngestAddDetectionStatus(builder *flatbuffers.Builder, detectionStatus flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(60, flatbuffers.UOffsetT(detectionStatus), 0)
}
func RFObservationDetails_IngestAddCollectionMode(builder *flatbuffers.Builder, collectionMode flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(61, flatbuffers.UOffsetT(collectionMode), 0)
}
func RFObservationDetails_IngestAddRawFileUri(builder *flatbuffers.Builder, rawFileUri flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(62, flatbuffers.UOffsetT(rawFileUri), 0)
}
func RFObservationDetails_IngestAddSource(builder *flatbuffers.Builder, source flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(63, flatbuffers.UOffsetT(source), 0)
}
func RFObservationDetails_IngestAddOrigin(builder *flatbuffers.Builder, origin flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(64, flatbuffers.UOffsetT(origin), 0)
}
func RFObservationDetails_IngestAddDataMode(builder *flatbuffers.Builder, dataMode RFObservationDetails_Ingest_dataMode_Enum) {
	builder.PrependInt8Slot(65, int8(dataMode), 0)
}
func RFObservationDetails_IngestAddTags(builder *flatbuffers.Builder, tags flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(66, flatbuffers.UOffsetT(tags), 0)
}
func RFObservationDetails_IngestStartTagsVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func RFObservationDetails_IngestAddCreatedAt(builder *flatbuffers.Builder, createdAt flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(67, flatbuffers.UOffsetT(createdAt), 0)
}
func RFObservationDetails_IngestAddCreatedBy(builder *flatbuffers.Builder, createdBy flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(68, flatbuffers.UOffsetT(createdBy), 0)
}
func RFObservationDetails_IngestAddNoisePwrDensity(builder *flatbuffers.Builder, noisePwrDensity float64) {
	builder.PrependFloat64Slot(69, noisePwrDensity, 0.0)
}
func RFObservationDetails_IngestAddCarrierStandard(builder *flatbuffers.Builder, carrierStandard flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(70, flatbuffers.UOffsetT(carrierStandard), 0)
}
func RFObservationDetails_IngestAddModulation(builder *flatbuffers.Builder, modulation flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(71, flatbuffers.UOffsetT(modulation), 0)
}
func RFObservationDetails_IngestAddInnerCodingRate(builder *flatbuffers.Builder, innerCodingRate int32) {
	builder.PrependInt32Slot(72, innerCodingRate, 0)
}
func RFObservationDetails_IngestAddOuterCodingRate(builder *flatbuffers.Builder, outerCodingRate int32) {
	builder.PrependInt32Slot(73, outerCodingRate, 0)
}
func RFObservationDetails_IngestAddTransmitFilterType(builder *flatbuffers.Builder, transmitFilterType flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(74, flatbuffers.UOffsetT(transmitFilterType), 0)
}
func RFObservationDetails_IngestAddTransmitFilterRollOff(builder *flatbuffers.Builder, transmitFilterRollOff float64) {
	builder.PrependFloat64Slot(75, transmitFilterRollOff, 0.0)
}
func RFObservationDetails_IngestAddSymbolToNoiseRatio(builder *flatbuffers.Builder, symbolToNoiseRatio float64) {
	builder.PrependFloat64Slot(76, symbolToNoiseRatio, 0.0)
}
func RFObservationDetails_IngestAddBitErrorRate(builder *flatbuffers.Builder, bitErrorRate float64) {
	builder.PrependFloat64Slot(77, bitErrorRate, 0.0)
}
func RFObservationDetails_IngestAddOrigNetwork(builder *flatbuffers.Builder, origNetwork flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(78, flatbuffers.UOffsetT(origNetwork), 0)
}
func RFObservationDetails_IngestAddSourceDl(builder *flatbuffers.Builder, sourceDl flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(79, flatbuffers.UOffsetT(sourceDl), 0)
}
func RFObservationDetails_IngestAddDescriptor(builder *flatbuffers.Builder, descriptor flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(80, flatbuffers.UOffsetT(descriptor), 0)
}
func RFObservationDetails_IngestAddUrl(builder *flatbuffers.Builder, url flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(81, flatbuffers.UOffsetT(url), 0)
}
func RFObservationDetails_IngestAddFrequencies(builder *flatbuffers.Builder, frequencies flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(82, flatbuffers.UOffsetT(frequencies), 0)
}
func RFObservationDetails_IngestStartFrequenciesVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func RFObservationDetails_IngestAddPowers(builder *flatbuffers.Builder, powers flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(83, flatbuffers.UOffsetT(powers), 0)
}
func RFObservationDetails_IngestStartPowersVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func RFObservationDetails_IngestAddSnrs(builder *flatbuffers.Builder, snrs flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(84, flatbuffers.UOffsetT(snrs), 0)
}
func RFObservationDetails_IngestStartSnrsVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func RFObservationDetails_IngestAddConfidences(builder *flatbuffers.Builder, confidences flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(85, flatbuffers.UOffsetT(confidences), 0)
}
func RFObservationDetails_IngestStartConfidencesVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func RFObservationDetails_IngestAddDetectionStatuses(builder *flatbuffers.Builder, detectionStatuses flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(86, flatbuffers.UOffsetT(detectionStatuses), 0)
}
func RFObservationDetails_IngestStartDetectionStatusesVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func RFObservationDetails_IngestAddChipRates(builder *flatbuffers.Builder, chipRates flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(87, flatbuffers.UOffsetT(chipRates), 0)
}
func RFObservationDetails_IngestStartChipRatesVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func RFObservationDetails_IngestAddCodeTaps(builder *flatbuffers.Builder, codeTaps flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(88, flatbuffers.UOffsetT(codeTaps), 0)
}
func RFObservationDetails_IngestStartCodeTapsVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func RFObservationDetails_IngestAddCodeFills(builder *flatbuffers.Builder, codeFills flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(89, flatbuffers.UOffsetT(codeFills), 0)
}
func RFObservationDetails_IngestStartCodeFillsVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func RFObservationDetails_IngestAddCodeLengths(builder *flatbuffers.Builder, codeLengths flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(90, flatbuffers.UOffsetT(codeLengths), 0)
}
func RFObservationDetails_IngestStartCodeLengthsVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func RFObservationDetails_IngestAddPnOrders(builder *flatbuffers.Builder, pnOrders flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(91, flatbuffers.UOffsetT(pnOrders), 0)
}
func RFObservationDetails_IngestStartPnOrdersVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func RFObservationDetails_IngestAddSignalIds(builder *flatbuffers.Builder, signalIds flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(92, flatbuffers.UOffsetT(signalIds), 0)
}
func RFObservationDetails_IngestStartSignalIdsVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func RFObservationDetails_IngestAddBaudRates(builder *flatbuffers.Builder, baudRates flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(93, flatbuffers.UOffsetT(baudRates), 0)
}
func RFObservationDetails_IngestStartBaudRatesVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func RFObservationDetails_IngestAddTelemetryIds(builder *flatbuffers.Builder, telemetryIds flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(94, flatbuffers.UOffsetT(telemetryIds), 0)
}
func RFObservationDetails_IngestStartTelemetryIdsVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func RFObservationDetails_IngestAddConstellationXpoints(builder *flatbuffers.Builder, constellationXpoints flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(95, flatbuffers.UOffsetT(constellationXpoints), 0)
}
func RFObservationDetails_IngestStartConstellationXpointsVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func RFObservationDetails_IngestAddConstellationYpoints(builder *flatbuffers.Builder, constellationYpoints flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(96, flatbuffers.UOffsetT(constellationYpoints), 0)
}
func RFObservationDetails_IngestStartConstellationYpointsVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func RFObservationDetails_IngestEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
