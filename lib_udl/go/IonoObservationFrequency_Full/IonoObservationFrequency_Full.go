// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package IonoObservationFrequency_Full

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

/// /// Array of transmit frequencies for the power received in MHz.
type IonoObservationFrequency_Full struct {
	_tab flatbuffers.Table
}

const IonoObservationFrequency_FullIdentifier = "IONO"

func GetRootAsIonoObservationFrequency_Full(buf []byte, offset flatbuffers.UOffsetT) *IonoObservationFrequency_Full {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &IonoObservationFrequency_Full{}
	x.Init(buf, n+offset)
	return x
}

func FinishIonoObservationFrequency_FullBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	identifierBytes := []byte(IonoObservationFrequency_FullIdentifier)
	builder.FinishWithFileIdentifier(offset, identifierBytes)
}

func IonoObservationFrequency_FullBufferHasIdentifier(buf []byte) bool {
	return flatbuffers.BufferHasIdentifier(buf, IonoObservationFrequency_FullIdentifier)
}

func GetSizePrefixedRootAsIonoObservationFrequency_Full(buf []byte, offset flatbuffers.UOffsetT) *IonoObservationFrequency_Full {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &IonoObservationFrequency_Full{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedIonoObservationFrequency_FullBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	identifierBytes := []byte(IonoObservationFrequency_FullIdentifier)
	builder.FinishSizePrefixedWithFileIdentifier(offset, identifierBytes)
}

func SizePrefixedIonoObservationFrequency_FullBufferHasIdentifier(buf []byte) bool {
	return flatbuffers.SizePrefixedBufferHasIdentifier(buf, IonoObservationFrequency_FullIdentifier)
}

func (rcv *IonoObservationFrequency_Full) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *IonoObservationFrequency_Full) Table() flatbuffers.Table {
	return rcv._tab
}

/// Notes for the frequency data.
/// Example: /// Example: NOTES
/// Constraints: Minimum length = 0, Maximum length = 512
func (rcv *IonoObservationFrequency_Full) Notes() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Notes for the frequency data.
/// Example: /// Example: NOTES
/// Constraints: Minimum length = 0, Maximum length = 512
/// Array of integers of the frequency array dimensions.
/// Example: /// Example: [1, 2]
/// Constraints: No constraints specified.
func (rcv *IonoObservationFrequency_Full) Dimensions(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *IonoObservationFrequency_Full) DimensionsLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

/// Array of integers of the frequency array dimensions.
/// Example: /// Example: [1, 2]
/// Constraints: No constraints specified.
/// Array of names for frequency dimensions.
/// Example: /// Example: ['NAME1', 'NAME2']
/// Constraints: No constraints specified.
func (rcv *IonoObservationFrequency_Full) DimensionName(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *IonoObservationFrequency_Full) DimensionNameLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

/// Array of names for frequency dimensions.
/// Example: /// Example: ['NAME1', 'NAME2']
/// Constraints: No constraints specified.
/// Array of frequency data.
/// Example: /// Example: [[[[[[[0.02, 0.034]]]]]]]
/// Constraints: No constraints specified.
func (rcv *IonoObservationFrequency_Full) Data(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *IonoObservationFrequency_Full) DataLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

/// Array of frequency data.
/// Example: /// Example: [[[[[[[0.02, 0.034]]]]]]]
/// Constraints: No constraints specified.
func IonoObservationFrequency_FullStart(builder *flatbuffers.Builder) {
	builder.StartObject(4)
}
func IonoObservationFrequency_FullAddNotes(builder *flatbuffers.Builder, notes flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(notes), 0)
}
func IonoObservationFrequency_FullAddDimensions(builder *flatbuffers.Builder, dimensions flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(dimensions), 0)
}
func IonoObservationFrequency_FullStartDimensionsVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func IonoObservationFrequency_FullAddDimensionName(builder *flatbuffers.Builder, dimensionName flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(dimensionName), 0)
}
func IonoObservationFrequency_FullStartDimensionNameVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func IonoObservationFrequency_FullAddData(builder *flatbuffers.Builder, data flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(3, flatbuffers.UOffsetT(data), 0)
}
func IonoObservationFrequency_FullStartDataVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func IonoObservationFrequency_FullEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
