// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package AirEventTankers_Full

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

/// /// Collection of tanker aircraft associated with this Air Event.
type AirEventTankers_Full struct {
	_tab flatbuffers.Table
}

const AirEventTankers_FullIdentifier = "AIRE"

func GetRootAsAirEventTankers_Full(buf []byte, offset flatbuffers.UOffsetT) *AirEventTankers_Full {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &AirEventTankers_Full{}
	x.Init(buf, n+offset)
	return x
}

func FinishAirEventTankers_FullBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	identifierBytes := []byte(AirEventTankers_FullIdentifier)
	builder.FinishWithFileIdentifier(offset, identifierBytes)
}

func AirEventTankers_FullBufferHasIdentifier(buf []byte) bool {
	return flatbuffers.BufferHasIdentifier(buf, AirEventTankers_FullIdentifier)
}

func GetSizePrefixedRootAsAirEventTankers_Full(buf []byte, offset flatbuffers.UOffsetT) *AirEventTankers_Full {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &AirEventTankers_Full{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedAirEventTankers_FullBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	identifierBytes := []byte(AirEventTankers_FullIdentifier)
	builder.FinishSizePrefixedWithFileIdentifier(offset, identifierBytes)
}

func SizePrefixedAirEventTankers_FullBufferHasIdentifier(buf []byte) bool {
	return flatbuffers.SizePrefixedBufferHasIdentifier(buf, AirEventTankers_FullIdentifier)
}

func (rcv *AirEventTankers_Full) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *AirEventTankers_Full) Table() flatbuffers.Table {
	return rcv._tab
}

/// The UDL ID of the aircraft sortie this tanker is associated with for this event.
/// Example: /// Example: d833a4bc-756b-41d5-8845-f146fe563387
/// Constraints: Minimum length = 0, Maximum length = 36
func (rcv *AirEventTankers_Full) IdTankerSortie() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The UDL ID of the aircraft sortie this tanker is associated with for this event.
/// Example: /// Example: d833a4bc-756b-41d5-8845-f146fe563387
/// Constraints: Minimum length = 0, Maximum length = 36
/// The UDL ID of the mission this tanker is associated with for this event.
/// Example: /// Example: edef700c-9917-4dbf-a153-89ffd4446fe9
/// Constraints: Minimum length = 0, Maximum length = 36
func (rcv *AirEventTankers_Full) IdTankerMission() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The UDL ID of the mission this tanker is associated with for this event.
/// Example: /// Example: edef700c-9917-4dbf-a153-89ffd4446fe9
/// Constraints: Minimum length = 0, Maximum length = 36
/// The UDL ID of the airfield this tanker is associated with for this event.
/// Example: /// Example: b33955d2-67d3-42be-8316-263e284ce6cc
/// Constraints: Minimum length = 0, Maximum length = 36
func (rcv *AirEventTankers_Full) IdTankerAirfield() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The UDL ID of the airfield this tanker is associated with for this event.
/// Example: /// Example: b33955d2-67d3-42be-8316-263e284ce6cc
/// Constraints: Minimum length = 0, Maximum length = 36
/// Optional tanker identifier from external systems. This field has no meaning within UDL and is provided as a convenience for systems that require tracking of an internal system generated ID.
/// Example: /// Example: ca673c580fb949a5b733f0e0b67ffab2
/// Constraints: Minimum length = 0, Maximum length = 36
func (rcv *AirEventTankers_Full) ExternalTankerId() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Optional tanker identifier from external systems. This field has no meaning within UDL and is provided as a convenience for systems that require tracking of an internal system generated ID.
/// Example: /// Example: ca673c580fb949a5b733f0e0b67ffab2
/// Constraints: Minimum length = 0, Maximum length = 36
/// Coordination record identifier of this tanker.
/// Example: /// Example: TTC601
/// Constraints: Minimum length = 0, Maximum length = 6
func (rcv *AirEventTankers_Full) TankerCoord() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Coordination record identifier of this tanker.
/// Example: /// Example: TTC601
/// Constraints: Minimum length = 0, Maximum length = 6
/// The Model Design Series designation of this tanker.
/// Example: /// Example: KC135R
/// Constraints: Minimum length = 0, Maximum length = 128
func (rcv *AirEventTankers_Full) TankerMds() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The Model Design Series designation of this tanker.
/// Example: /// Example: KC135R
/// Constraints: Minimum length = 0, Maximum length = 128
/// The Air Mobility Command (AMC) mission identifier of this tanker.
/// Example: /// Example: 8PH000B1S052
/// Constraints: Minimum length = 0, Maximum length = 36
func (rcv *AirEventTankers_Full) AmcTankerMissionId() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The Air Mobility Command (AMC) mission identifier of this tanker.
/// Example: /// Example: 8PH000B1S052
/// Constraints: Minimum length = 0, Maximum length = 36
/// Alternate mission identifier of this tanker provided by source.
/// Example: /// Example: 1UN05201L121
/// Constraints: Minimum length = 0, Maximum length = 32
func (rcv *AirEventTankers_Full) AltTankerMissionId() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(18))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Alternate mission identifier of this tanker provided by source.
/// Example: /// Example: 1UN05201L121
/// Constraints: Minimum length = 0, Maximum length = 32
/// The call sign assigned to this tanker.
/// Example: /// Example: BAKER
/// Constraints: Minimum length = 0, Maximum length = 24
func (rcv *AirEventTankers_Full) TankerCallSign() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(20))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The call sign assigned to this tanker.
/// Example: /// Example: BAKER
/// Constraints: Minimum length = 0, Maximum length = 24
/// The wing or unit that owns this tanker.
/// Example: /// Example: 117ARW
/// Constraints: Minimum length = 0, Maximum length = 256
func (rcv *AirEventTankers_Full) TankerOwner() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(22))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The wing or unit that owns this tanker.
/// Example: /// Example: 117ARW
/// Constraints: Minimum length = 0, Maximum length = 256
/// The name and/or number of the point of contact for this tanker.
/// Example: /// Example: JOHN SMITH (555)555-5555
/// Constraints: Minimum length = 0, Maximum length = 68
func (rcv *AirEventTankers_Full) TankerPoc() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(24))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The name and/or number of the point of contact for this tanker.
/// Example: /// Example: JOHN SMITH (555)555-5555
/// Constraints: Minimum length = 0, Maximum length = 68
/// Identifies the itinerary point of a mission that this tanker is linked to.
/// Example: /// Example: 825
/// Constraints: No constraints specified.
func (rcv *AirEventTankers_Full) TankerLegNum() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(26))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

/// Identifies the itinerary point of a mission that this tanker is linked to.
/// Example: /// Example: 825
/// Constraints: No constraints specified.
func (rcv *AirEventTankers_Full) MutateTankerLegNum(n int32) bool {
	return rcv._tab.MutateInt32Slot(26, n)
}

/// Location the tanker has been deployed to in preparation for an air refueling event.
/// Example: /// Example: KOFF
/// Constraints: Minimum length = 0, Maximum length = 4
func (rcv *AirEventTankers_Full) TankerDeployedIcao() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(28))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Location the tanker has been deployed to in preparation for an air refueling event.
/// Example: /// Example: KOFF
/// Constraints: Minimum length = 0, Maximum length = 4
/// Type of fuel delivery method used by the tanker during an air refueling event (BOOM, DROGUE, BOTH).
/// Example: /// Example: DROGUE
/// Constraints: Minimum length = 0, Maximum length = 6
func (rcv *AirEventTankers_Full) TankerDeliveryMethod() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(30))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Type of fuel delivery method used by the tanker during an air refueling event (BOOM, DROGUE, BOTH).
/// Example: /// Example: DROGUE
/// Constraints: Minimum length = 0, Maximum length = 6
/// Total weight of the fuel transferred from this tanker during an air refueling event, in pounds.
/// Example: /// Example: 15000000.1
/// Constraints: No constraints specified.
func (rcv *AirEventTankers_Full) FuelOff() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(32))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Total weight of the fuel transferred from this tanker during an air refueling event, in pounds.
/// Example: /// Example: 15000000.1
/// Constraints: No constraints specified.
func (rcv *AirEventTankers_Full) MutateFuelOff(n float64) bool {
	return rcv._tab.MutateFloat64Slot(32, n)
}

/// Position of this tanker within a group of tankers in an air refueling event.
/// Example: /// Example: 2
/// Constraints: No constraints specified.
func (rcv *AirEventTankers_Full) TankerCellPosition() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(34))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

/// Position of this tanker within a group of tankers in an air refueling event.
/// Example: /// Example: 2
/// Constraints: No constraints specified.
func (rcv *AirEventTankers_Full) MutateTankerCellPosition(n int32) bool {
	return rcv._tab.MutateInt32Slot(34, n)
}

/// Type of fuel being transferred from the tanker in an air refueling event.
/// Example: /// Example: JP8
/// Constraints: Minimum length = 0, Maximum length = 3
func (rcv *AirEventTankers_Full) TankerFuelType() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(36))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Type of fuel being transferred from the tanker in an air refueling event.
/// Example: /// Example: JP8
/// Constraints: Minimum length = 0, Maximum length = 3
/// Flag indicating that this tanker is flying a dual role mission in an air refueling event.
/// Example: /// Example: True
/// Constraints: No constraints specified.
func (rcv *AirEventTankers_Full) DualRole() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(38))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

/// Flag indicating that this tanker is flying a dual role mission in an air refueling event.
/// Example: /// Example: True
/// Constraints: No constraints specified.
func (rcv *AirEventTankers_Full) MutateDualRole(n bool) bool {
	return rcv._tab.MutateBoolSlot(38, n)
}

func AirEventTankers_FullStart(builder *flatbuffers.Builder) {
	builder.StartObject(18)
}
func AirEventTankers_FullAddIdTankerSortie(builder *flatbuffers.Builder, idTankerSortie flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(idTankerSortie), 0)
}
func AirEventTankers_FullAddIdTankerMission(builder *flatbuffers.Builder, idTankerMission flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(idTankerMission), 0)
}
func AirEventTankers_FullAddIdTankerAirfield(builder *flatbuffers.Builder, idTankerAirfield flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(idTankerAirfield), 0)
}
func AirEventTankers_FullAddExternalTankerId(builder *flatbuffers.Builder, externalTankerId flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(3, flatbuffers.UOffsetT(externalTankerId), 0)
}
func AirEventTankers_FullAddTankerCoord(builder *flatbuffers.Builder, tankerCoord flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(4, flatbuffers.UOffsetT(tankerCoord), 0)
}
func AirEventTankers_FullAddTankerMds(builder *flatbuffers.Builder, tankerMds flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(5, flatbuffers.UOffsetT(tankerMds), 0)
}
func AirEventTankers_FullAddAmcTankerMissionId(builder *flatbuffers.Builder, amcTankerMissionId flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(6, flatbuffers.UOffsetT(amcTankerMissionId), 0)
}
func AirEventTankers_FullAddAltTankerMissionId(builder *flatbuffers.Builder, altTankerMissionId flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(7, flatbuffers.UOffsetT(altTankerMissionId), 0)
}
func AirEventTankers_FullAddTankerCallSign(builder *flatbuffers.Builder, tankerCallSign flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(8, flatbuffers.UOffsetT(tankerCallSign), 0)
}
func AirEventTankers_FullAddTankerOwner(builder *flatbuffers.Builder, tankerOwner flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(9, flatbuffers.UOffsetT(tankerOwner), 0)
}
func AirEventTankers_FullAddTankerPoc(builder *flatbuffers.Builder, tankerPoc flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(10, flatbuffers.UOffsetT(tankerPoc), 0)
}
func AirEventTankers_FullAddTankerLegNum(builder *flatbuffers.Builder, tankerLegNum int32) {
	builder.PrependInt32Slot(11, tankerLegNum, 0)
}
func AirEventTankers_FullAddTankerDeployedIcao(builder *flatbuffers.Builder, tankerDeployedIcao flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(12, flatbuffers.UOffsetT(tankerDeployedIcao), 0)
}
func AirEventTankers_FullAddTankerDeliveryMethod(builder *flatbuffers.Builder, tankerDeliveryMethod flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(13, flatbuffers.UOffsetT(tankerDeliveryMethod), 0)
}
func AirEventTankers_FullAddFuelOff(builder *flatbuffers.Builder, fuelOff float64) {
	builder.PrependFloat64Slot(14, fuelOff, 0.0)
}
func AirEventTankers_FullAddTankerCellPosition(builder *flatbuffers.Builder, tankerCellPosition int32) {
	builder.PrependInt32Slot(15, tankerCellPosition, 0)
}
func AirEventTankers_FullAddTankerFuelType(builder *flatbuffers.Builder, tankerFuelType flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(16, flatbuffers.UOffsetT(tankerFuelType), 0)
}
func AirEventTankers_FullAddDualRole(builder *flatbuffers.Builder, dualRole bool) {
	builder.PrependBoolSlot(17, dualRole, false)
}
func AirEventTankers_FullEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
