// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package Eop_Full

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

/// /// Model representation of Earth Orientation Parameters (EOP) produced by the IERS (International Earth Rotation and Reference Systems Service). Earth Orientation Parameters describe the irregularities of the earth's rotation. Technically, they are the parameters which provide the rotation of the ITRS (International Terrestrial Reference System) to the ICRS (International Celestial Reference System) as a function of time.
/// Universal time -- Universal time (UT1) is the time of the earth clock, which performs one revolution in about 24h. It is practically proportional to the sidereal time. The excess revolution time is called length of day (LOD).
/// Coordinates of the pole -- x and y are the coordinates of the Celestial Ephemeris Pole (CEP) relative to the IRP, the IERS Reference Pole. The CEP differs from the instantaneous rotation axis by quasi-diurnal terms with amplitudes under 0.01" (see Seidelmann, 1982). The x-axis is in the direction of the ITRF zero-meridian; the y-axis is in the direction 90 degrees West longitude.
/// Celestial pole offsets -- Celestial pole offsets are described in the IAU Precession and Nutation models. The observed differences with respect to the conventional celestial pole position defined by the models are monitored and reported by the IERS.
/// IERS Bulletins A and B provide current information on the Earth's orientation in the IERS Reference System.  This includes Universal Time, coordinates of the terrestrial pole, and celestial pole offsets.  Bulletin A gives an advanced solution updated weekly; the standard solution is given monthly in Bulletin B. Fields suffixed with 'B' are Bulletin B values. All solutions are continuous within their respective uncertainties.  Bulletin A is issued by the IERS Rapid Service/Prediction Centre at the U.S. Naval Observatory, Washington, DC and Bulletin B is issued by the IERS Earth Orientation Centre at the Paris Observatory. IERS Bulletin A reports the latest determinations for polar motion, UT1-UTC, and nutation offsets at daily intervals based on a combination of contributed analysis results using data from Very Long Baseline Interferometry (VLBI), Satellite Laser Ranging (SLR), Global Positioning System (GPS) satellites, and Lunar Laser Ranging (LLR). Predictions for variations a year into the future are also provided. Meteorological predictions of variations in Atmospheric Angular Momentum (AAM) are used to aid in the prediction of near-term UT1-UTC changes. This publication is prepared by the IERS Rapid Service/Prediction Center.
type Eop_Full struct {
	_tab flatbuffers.Table
}

const Eop_FullIdentifier = "EOPF"

func GetRootAsEop_Full(buf []byte, offset flatbuffers.UOffsetT) *Eop_Full {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &Eop_Full{}
	x.Init(buf, n+offset)
	return x
}

func FinishEop_FullBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	identifierBytes := []byte(Eop_FullIdentifier)
	builder.FinishWithFileIdentifier(offset, identifierBytes)
}

func Eop_FullBufferHasIdentifier(buf []byte) bool {
	return flatbuffers.BufferHasIdentifier(buf, Eop_FullIdentifier)
}

func GetSizePrefixedRootAsEop_Full(buf []byte, offset flatbuffers.UOffsetT) *Eop_Full {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &Eop_Full{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedEop_FullBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	identifierBytes := []byte(Eop_FullIdentifier)
	builder.FinishSizePrefixedWithFileIdentifier(offset, identifierBytes)
}

func SizePrefixedEop_FullBufferHasIdentifier(buf []byte) bool {
	return flatbuffers.SizePrefixedBufferHasIdentifier(buf, Eop_FullIdentifier)
}

func (rcv *Eop_Full) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *Eop_Full) Table() flatbuffers.Table {
	return rcv._tab
}

/// Unique identifier of the record, auto-generated by the system.
/// Example: /// Example: EOP-ID
/// Constraints: Minimum length = 1, Maximum length = 36
func (rcv *Eop_Full) Id() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Unique identifier of the record, auto-generated by the system.
/// Example: /// Example: EOP-ID
/// Constraints: Minimum length = 1, Maximum length = 36
/// Classification marking of the data in IC/CAPCO Portion-marked format.
/// Example: /// Example: U
/// Constraints: Minimum length = 1, Maximum length = 128
func (rcv *Eop_Full) ClassificationMarking() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Classification marking of the data in IC/CAPCO Portion-marked format.
/// Example: /// Example: U
/// Constraints: Minimum length = 1, Maximum length = 128
/// Effective date/time for the EOP values in ISO8601 UTC format.  The values could be current or predicted.
/// Example: /// Example: 2018-01-01T16:00:00.123Z
/// Constraints: No constraints specified.
func (rcv *Eop_Full) EopDate() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Effective date/time for the EOP values in ISO8601 UTC format.  The values could be current or predicted.
/// Example: /// Example: 2018-01-01T16:00:00.123Z
/// Constraints: No constraints specified.
/// Flag indicating Issued (I), or Predicted (P) for this record's polar motion values.
/// Example: /// Example: I
/// Constraints: Minimum length = 0, Maximum length = 1
func (rcv *Eop_Full) PolarMotionState() Eop_Full_polarMotionState_Enum {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return Eop_Full_polarMotionState_Enum(rcv._tab.GetInt8(o + rcv._tab.Pos))
	}
	return 0
}

/// Flag indicating Issued (I), or Predicted (P) for this record's polar motion values.
/// Example: /// Example: I
/// Constraints: Minimum length = 0, Maximum length = 1
func (rcv *Eop_Full) MutatePolarMotionState(n Eop_Full_polarMotionState_Enum) bool {
	return rcv._tab.MutateInt8Slot(10, int8(n))
}

/// The Bulletin A X coordinate value of earth polar motion at eopDate. Polar motion of the Earth is the motion of the Earth's rotational axis relative to its crust. This is measured with respect to a reference frame in which the solid Earth is fixed (a so-called Earth-centered, Earth-fixed or ECEF reference frame). Measured in arc seconds.
/// Example: /// Example: 0.182987
/// Constraints: No constraints specified.
func (rcv *Eop_Full) PolarMotionX() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// The Bulletin A X coordinate value of earth polar motion at eopDate. Polar motion of the Earth is the motion of the Earth's rotational axis relative to its crust. This is measured with respect to a reference frame in which the solid Earth is fixed (a so-called Earth-centered, Earth-fixed or ECEF reference frame). Measured in arc seconds.
/// Example: /// Example: 0.182987
/// Constraints: No constraints specified.
func (rcv *Eop_Full) MutatePolarMotionX(n float64) bool {
	return rcv._tab.MutateFloat64Slot(12, n)
}

/// Estimated uncertainty/error in polarMotionX value in arc seconds.
/// Example: /// Example: 0.000672
/// Constraints: No constraints specified.
func (rcv *Eop_Full) PolarMotionXunc() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Estimated uncertainty/error in polarMotionX value in arc seconds.
/// Example: /// Example: 0.000672
/// Constraints: No constraints specified.
func (rcv *Eop_Full) MutatePolarMotionXunc(n float64) bool {
	return rcv._tab.MutateFloat64Slot(14, n)
}

/// The Bulletin A Y coordinate value of earth polar motion at eopDate. Polar motion of the Earth is the motion of the Earth's rotational axis relative to its crust. This is measured with respect to a reference frame in which the solid Earth is fixed (a so-called Earth-centered, Earth-fixed or ECEF reference frame). Measured in arc seconds.
/// Example: /// Example: 0.168775
/// Constraints: No constraints specified.
func (rcv *Eop_Full) PolarMotionY() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// The Bulletin A Y coordinate value of earth polar motion at eopDate. Polar motion of the Earth is the motion of the Earth's rotational axis relative to its crust. This is measured with respect to a reference frame in which the solid Earth is fixed (a so-called Earth-centered, Earth-fixed or ECEF reference frame). Measured in arc seconds.
/// Example: /// Example: 0.168775
/// Constraints: No constraints specified.
func (rcv *Eop_Full) MutatePolarMotionY(n float64) bool {
	return rcv._tab.MutateFloat64Slot(16, n)
}

/// Estimated uncertainty/error in polarMotionY value in arc seconds.
/// Example: /// Example: 0.000345
/// Constraints: No constraints specified.
func (rcv *Eop_Full) PolarMotionYunc() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(18))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Estimated uncertainty/error in polarMotionY value in arc seconds.
/// Example: /// Example: 0.000345
/// Constraints: No constraints specified.
func (rcv *Eop_Full) MutatePolarMotionYunc(n float64) bool {
	return rcv._tab.MutateFloat64Slot(18, n)
}

/// Flag indicating Issued (I), or Predicted (P) for this record''s Bulletin A UT1-UTC values.
/// Example: /// Example: I
/// Constraints: Minimum length = 0, Maximum length = 1
func (rcv *Eop_Full) Ut1Utcstate() Eop_Full_ut1UTCState_Enum {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(20))
	if o != 0 {
		return Eop_Full_ut1UTCState_Enum(rcv._tab.GetInt8(o + rcv._tab.Pos))
	}
	return 0
}

/// Flag indicating Issued (I), or Predicted (P) for this record''s Bulletin A UT1-UTC values.
/// Example: /// Example: I
/// Constraints: Minimum length = 0, Maximum length = 1
func (rcv *Eop_Full) MutateUt1Utcstate(n Eop_Full_ut1UTCState_Enum) bool {
	return rcv._tab.MutateInt8Slot(20, int8(n))
}

/// The difference between the Bulletin A UT1 and UTC time scales as of eopDate in seconds.
/// Example: /// Example: -0.1251659
/// Constraints: No constraints specified.
func (rcv *Eop_Full) Ut1Utc() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(22))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// The difference between the Bulletin A UT1 and UTC time scales as of eopDate in seconds.
/// Example: /// Example: -0.1251659
/// Constraints: No constraints specified.
func (rcv *Eop_Full) MutateUt1Utc(n float64) bool {
	return rcv._tab.MutateFloat64Slot(22, n)
}

/// The estimated uncertainty/error in the ut1UTC value in seconds.
/// Example: /// Example: 2.07e-05
/// Constraints: No constraints specified.
func (rcv *Eop_Full) Ut1Utcunc() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(24))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// The estimated uncertainty/error in the ut1UTC value in seconds.
/// Example: /// Example: 2.07e-05
/// Constraints: No constraints specified.
func (rcv *Eop_Full) MutateUt1Utcunc(n float64) bool {
	return rcv._tab.MutateFloat64Slot(24, n)
}

/// Bulletin A length of day or LOD in milliseconds. Universal time (UT1) is the time of the earth clock, which performs one revolution in about 24h. It is practically proportional to the sidereal time. The excess revolution time is called length of day (LOD).
/// Example: /// Example: 1.8335
/// Constraints: No constraints specified.
func (rcv *Eop_Full) Lod() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(26))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Bulletin A length of day or LOD in milliseconds. Universal time (UT1) is the time of the earth clock, which performs one revolution in about 24h. It is practically proportional to the sidereal time. The excess revolution time is called length of day (LOD).
/// Example: /// Example: 1.8335
/// Constraints: No constraints specified.
func (rcv *Eop_Full) MutateLod(n float64) bool {
	return rcv._tab.MutateFloat64Slot(26, n)
}

/// The estimated uncertainty/error in the lod value in seconds.
/// Example: /// Example: 0.0201
/// Constraints: No constraints specified.
func (rcv *Eop_Full) LodUnc() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(28))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// The estimated uncertainty/error in the lod value in seconds.
/// Example: /// Example: 0.0201
/// Constraints: No constraints specified.
func (rcv *Eop_Full) MutateLodUnc(n float64) bool {
	return rcv._tab.MutateFloat64Slot(28, n)
}

/// Flag indicating Issued (I), or Predicted (P) for this record's nutation values (dPSI and dEpsilon).
/// Example: /// Example: I
/// Constraints: Minimum length = 0, Maximum length = 1
func (rcv *Eop_Full) NutationState() Eop_Full_nutationState_Enum {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(30))
	if o != 0 {
		return Eop_Full_nutationState_Enum(rcv._tab.GetInt8(o + rcv._tab.Pos))
	}
	return 0
}

/// Flag indicating Issued (I), or Predicted (P) for this record's nutation values (dPSI and dEpsilon).
/// Example: /// Example: I
/// Constraints: Minimum length = 0, Maximum length = 1
func (rcv *Eop_Full) MutateNutationState(n Eop_Full_nutationState_Enum) bool {
	return rcv._tab.MutateInt8Slot(30, int8(n))
}

/// The Bulletin A offset in longitude dDy1980 with respect to the IAU 1976 Theory of Precession and the IAU 1980 Theory of Nutation, measured in milliseconds of arc. Note: dPSI is not used when this record represents IAU 2000 data.
/// Example: /// Example: -10.437
/// Constraints: No constraints specified.
func (rcv *Eop_Full) DPsi() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(32))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// The Bulletin A offset in longitude dDy1980 with respect to the IAU 1976 Theory of Precession and the IAU 1980 Theory of Nutation, measured in milliseconds of arc. Note: dPSI is not used when this record represents IAU 2000 data.
/// Example: /// Example: -10.437
/// Constraints: No constraints specified.
func (rcv *Eop_Full) MutateDPsi(n float64) bool {
	return rcv._tab.MutateFloat64Slot(32, n)
}

/// The estimated uncertainty/error in the dPSI value in milliseconds of arc.
/// Example: /// Example: 0.507
/// Constraints: No constraints specified.
func (rcv *Eop_Full) DPsiunc() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(34))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// The estimated uncertainty/error in the dPSI value in milliseconds of arc.
/// Example: /// Example: 0.507
/// Constraints: No constraints specified.
func (rcv *Eop_Full) MutateDPsiunc(n float64) bool {
	return rcv._tab.MutateFloat64Slot(34, n)
}

/// The Bulletin A offset in obliquity dDe1980 with respect to the IAU 1976 Theory of Precession and the IAU 1980 Theory of Nutation, measured in milliseconds of arc. Note: dEpsilon is not used when this record represents IAU 2000 data.
/// Example: /// Example: -0.917
/// Constraints: No constraints specified.
func (rcv *Eop_Full) DEpsilon() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(36))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// The Bulletin A offset in obliquity dDe1980 with respect to the IAU 1976 Theory of Precession and the IAU 1980 Theory of Nutation, measured in milliseconds of arc. Note: dEpsilon is not used when this record represents IAU 2000 data.
/// Example: /// Example: -0.917
/// Constraints: No constraints specified.
func (rcv *Eop_Full) MutateDEpsilon(n float64) bool {
	return rcv._tab.MutateFloat64Slot(36, n)
}

/// The estimated uncertainty/error in the dEpsilon value in milliseconds of arc.
/// Example: /// Example: 0.165
/// Constraints: No constraints specified.
func (rcv *Eop_Full) DEpsilonUnc() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(38))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// The estimated uncertainty/error in the dEpsilon value in milliseconds of arc.
/// Example: /// Example: 0.165
/// Constraints: No constraints specified.
func (rcv *Eop_Full) MutateDEpsilonUnc(n float64) bool {
	return rcv._tab.MutateFloat64Slot(38, n)
}

/// The Bulletin A celestial pole offset along x-axis with respect to the IAU 2000A Theory of Precession and Nutation, measured in milliseconds of arc. Note: dX is not used when this record represents IAU 1980 data.
/// Example: /// Example: -0.086
/// Constraints: No constraints specified.
func (rcv *Eop_Full) DX() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(40))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// The Bulletin A celestial pole offset along x-axis with respect to the IAU 2000A Theory of Precession and Nutation, measured in milliseconds of arc. Note: dX is not used when this record represents IAU 1980 data.
/// Example: /// Example: -0.086
/// Constraints: No constraints specified.
func (rcv *Eop_Full) MutateDX(n float64) bool {
	return rcv._tab.MutateFloat64Slot(40, n)
}

/// The estimated uncertainty/error in the Bulletin A dX value, in milliseconds of arc.
/// Example: /// Example: 0.202
/// Constraints: No constraints specified.
func (rcv *Eop_Full) DXunc() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(42))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// The estimated uncertainty/error in the Bulletin A dX value, in milliseconds of arc.
/// Example: /// Example: 0.202
/// Constraints: No constraints specified.
func (rcv *Eop_Full) MutateDXunc(n float64) bool {
	return rcv._tab.MutateFloat64Slot(42, n)
}

/// The Bulletin A celestial pole offset along y-axis with respect to the IAU 2000A Theory of Precession and Nutation, measured in milliseconds of arc. Note: dY is not used when this record represents IAU 1980 data.
/// Example: /// Example: 0.13
/// Constraints: No constraints specified.
func (rcv *Eop_Full) DY() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(44))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// The Bulletin A celestial pole offset along y-axis with respect to the IAU 2000A Theory of Precession and Nutation, measured in milliseconds of arc. Note: dY is not used when this record represents IAU 1980 data.
/// Example: /// Example: 0.13
/// Constraints: No constraints specified.
func (rcv *Eop_Full) MutateDY(n float64) bool {
	return rcv._tab.MutateFloat64Slot(44, n)
}

/// The estimated uncertainty/error in the Bulletin A dY value, in milliseconds of arc.
/// Example: /// Example: 0.165
/// Constraints: No constraints specified.
func (rcv *Eop_Full) DYunc() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(46))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// The estimated uncertainty/error in the Bulletin A dY value, in milliseconds of arc.
/// Example: /// Example: 0.165
/// Constraints: No constraints specified.
func (rcv *Eop_Full) MutateDYunc(n float64) bool {
	return rcv._tab.MutateFloat64Slot(46, n)
}

/// Bulletin B X coordinate value of earth polar motion at eopDate. Polar motion of the Earth is the motion of the Earth's rotational axis relative to its crust. This is measured with respect to a reference frame in which the solid Earth is fixed (a so-called Earth-centered, Earth-fixed or ECEF reference frame). Measured in arc seconds.
/// Example: /// Example: 0.1824
/// Constraints: No constraints specified.
func (rcv *Eop_Full) PolarMotionXb() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(48))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Bulletin B X coordinate value of earth polar motion at eopDate. Polar motion of the Earth is the motion of the Earth's rotational axis relative to its crust. This is measured with respect to a reference frame in which the solid Earth is fixed (a so-called Earth-centered, Earth-fixed or ECEF reference frame). Measured in arc seconds.
/// Example: /// Example: 0.1824
/// Constraints: No constraints specified.
func (rcv *Eop_Full) MutatePolarMotionXb(n float64) bool {
	return rcv._tab.MutateFloat64Slot(48, n)
}

/// Bulletin B Y coordinate value of earth polar motion at eopDate. Polar motion of the Earth is the motion of the Earth's rotational axis relative to its crust. This is measured with respect to a reference frame in which the solid Earth is fixed (a so-called Earth-centered, Earth-fixed or ECEF reference frame). Measured in arc seconds.
/// Example: /// Example: 0.1679
/// Constraints: No constraints specified.
func (rcv *Eop_Full) PolarMotionYb() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(50))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Bulletin B Y coordinate value of earth polar motion at eopDate. Polar motion of the Earth is the motion of the Earth's rotational axis relative to its crust. This is measured with respect to a reference frame in which the solid Earth is fixed (a so-called Earth-centered, Earth-fixed or ECEF reference frame). Measured in arc seconds.
/// Example: /// Example: 0.1679
/// Constraints: No constraints specified.
func (rcv *Eop_Full) MutatePolarMotionYb(n float64) bool {
	return rcv._tab.MutateFloat64Slot(50, n)
}

/// The Bulletin B difference between the UT1 and UTC time scales as of eopDate in seconds.
/// Example: /// Example: -0.1253
/// Constraints: No constraints specified.
func (rcv *Eop_Full) Ut1Utcb() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(52))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// The Bulletin B difference between the UT1 and UTC time scales as of eopDate in seconds.
/// Example: /// Example: -0.1253
/// Constraints: No constraints specified.
func (rcv *Eop_Full) MutateUt1Utcb(n float64) bool {
	return rcv._tab.MutateFloat64Slot(52, n)
}

/// The Bulletin B offset in longitude dDy1980 with respect to the IAU 1976 Theory of Precession and the IAU 1980 Theory of Nutation, measured in milliseconds of arc. Note: dPSIB is not used when this record represents IAU 2000 data.
/// Example: /// Example: -9.9
/// Constraints: No constraints specified.
func (rcv *Eop_Full) DPsib() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(54))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// The Bulletin B offset in longitude dDy1980 with respect to the IAU 1976 Theory of Precession and the IAU 1980 Theory of Nutation, measured in milliseconds of arc. Note: dPSIB is not used when this record represents IAU 2000 data.
/// Example: /// Example: -9.9
/// Constraints: No constraints specified.
func (rcv *Eop_Full) MutateDPsib(n float64) bool {
	return rcv._tab.MutateFloat64Slot(54, n)
}

/// The Bulletin B offset in obliquity dDe1980 with respect to the IAU 1976 Theory of Precession and the IAU 1980 Theory of Nutation, measured in milliseconds of arc. Note: dEpsilonB is not used when this record represents IAU 2000 data.
/// Example: /// Example: -1.7
/// Constraints: No constraints specified.
func (rcv *Eop_Full) DEpsilonB() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(56))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// The Bulletin B offset in obliquity dDe1980 with respect to the IAU 1976 Theory of Precession and the IAU 1980 Theory of Nutation, measured in milliseconds of arc. Note: dEpsilonB is not used when this record represents IAU 2000 data.
/// Example: /// Example: -1.7
/// Constraints: No constraints specified.
func (rcv *Eop_Full) MutateDEpsilonB(n float64) bool {
	return rcv._tab.MutateFloat64Slot(56, n)
}

/// The Bulletin B celestial pole offset along the X-axis with respect to the IAU 2000A Theory of Precession and Nutation, measured in milliseconds of arc. Note: dXB is not used when this record represents IAU 1980 data.
/// Example: /// Example: 0.129
/// Constraints: No constraints specified.
func (rcv *Eop_Full) DXb() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(58))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// The Bulletin B celestial pole offset along the X-axis with respect to the IAU 2000A Theory of Precession and Nutation, measured in milliseconds of arc. Note: dXB is not used when this record represents IAU 1980 data.
/// Example: /// Example: 0.129
/// Constraints: No constraints specified.
func (rcv *Eop_Full) MutateDXb(n float64) bool {
	return rcv._tab.MutateFloat64Slot(58, n)
}

/// The Bulletin B celestial pole offset along the Y-axis with respect to the IAU 2000A Theory of Precession and Nutation, measured in milliseconds of arc. Note: dYB is not used when this record represents IAU 1980 data.
/// Example: /// Example: -0.653
/// Constraints: No constraints specified.
func (rcv *Eop_Full) DYb() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(60))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// The Bulletin B celestial pole offset along the Y-axis with respect to the IAU 2000A Theory of Precession and Nutation, measured in milliseconds of arc. Note: dYB is not used when this record represents IAU 1980 data.
/// Example: /// Example: -0.653
/// Constraints: No constraints specified.
func (rcv *Eop_Full) MutateDYb(n float64) bool {
	return rcv._tab.MutateFloat64Slot(60, n)
}

/// The IAU Theory of Precession and Theory of Nutation applied to the data in this record. IAU1980 records employ the IAU 1976 Theory of Precession and IAU 1980 Theory of Nutation, and IAU2000 records employ the IAU 2000A Theory of Precession and Nutation.
/// Example: /// Example: IAU1980
/// Constraints: Minimum length = 0, Maximum length = 10
func (rcv *Eop_Full) PrecessionNutationStd() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(62))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The IAU Theory of Precession and Theory of Nutation applied to the data in this record. IAU1980 records employ the IAU 1976 Theory of Precession and IAU 1980 Theory of Nutation, and IAU2000 records employ the IAU 2000A Theory of Precession and Nutation.
/// Example: /// Example: IAU1980
/// Constraints: Minimum length = 0, Maximum length = 10
/// Optional URI location in the document repository of the raw file parsed by the system to produce this record. To download the raw file, prepend https://udl-hostname/scs/download?id= to this value.
/// Example: /// Example: Example URI
/// Constraints: Minimum length = 0, Maximum length = 256
func (rcv *Eop_Full) RawFileUri() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(64))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Optional URI location in the document repository of the raw file parsed by the system to produce this record. To download the raw file, prepend https://udl-hostname/scs/download?id= to this value.
/// Example: /// Example: Example URI
/// Constraints: Minimum length = 0, Maximum length = 256
/// Source of the data.
/// Example: /// Example: Bluestaq
/// Constraints: Minimum length = 1, Maximum length = 64
func (rcv *Eop_Full) Source() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(66))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Source of the data.
/// Example: /// Example: Bluestaq
/// Constraints: Minimum length = 1, Maximum length = 64
/// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
/// Example: /// Example: THIRD_PARTY_DATASOURCE
/// Constraints: Minimum length = 0, Maximum length = 64
func (rcv *Eop_Full) Origin() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(68))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
/// Example: /// Example: THIRD_PARTY_DATASOURCE
/// Constraints: Minimum length = 0, Maximum length = 64
/// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
/// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
/// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
/// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
/// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
/// Example: /// Example: TEST
/// Constraints: Minimum length = 1, Maximum length = 32
func (rcv *Eop_Full) DataMode() Eop_Full_dataMode_Enum {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(70))
	if o != 0 {
		return Eop_Full_dataMode_Enum(rcv._tab.GetInt8(o + rcv._tab.Pos))
	}
	return 0
}

/// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
/// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
/// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
/// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
/// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
/// Example: /// Example: TEST
/// Constraints: Minimum length = 1, Maximum length = 32
func (rcv *Eop_Full) MutateDataMode(n Eop_Full_dataMode_Enum) bool {
	return rcv._tab.MutateInt8Slot(70, int8(n))
}

/// Time the row was created in the database, auto-populated by the system.
/// Example: /// Example: 2018-01-01T16:00:00.123Z
/// Constraints: No constraints specified.
func (rcv *Eop_Full) CreatedAt() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(72))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Time the row was created in the database, auto-populated by the system.
/// Example: /// Example: 2018-01-01T16:00:00.123Z
/// Constraints: No constraints specified.
/// Application user who created the row in the database, auto-populated by the system.
/// Example: /// Example: some.user
/// Constraints: Minimum length = 1, Maximum length = 64
func (rcv *Eop_Full) CreatedBy() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(74))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Application user who created the row in the database, auto-populated by the system.
/// Example: /// Example: some.user
/// Constraints: Minimum length = 1, Maximum length = 64
/// Time the row was last updated in the database, auto-populated by the system.
/// Example: /// Example: 2018-01-01T16:00:00.123Z
/// Constraints: No constraints specified.
func (rcv *Eop_Full) UpdatedAt() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(76))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Time the row was last updated in the database, auto-populated by the system.
/// Example: /// Example: 2018-01-01T16:00:00.123Z
/// Constraints: No constraints specified.
/// Application user who updated the row in the database, auto-populated by the system.
/// Example: /// Example: some.user
/// Constraints: Minimum length = 0, Maximum length = 64
func (rcv *Eop_Full) UpdatedBy() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(78))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Application user who updated the row in the database, auto-populated by the system.
/// Example: /// Example: some.user
/// Constraints: Minimum length = 0, Maximum length = 64
/// The originating source network on which this record was created, auto-populated by the system.
/// Example: /// Example: ORIG
/// Constraints: Minimum length = 0, Maximum length = 32
func (rcv *Eop_Full) OrigNetwork() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(80))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The originating source network on which this record was created, auto-populated by the system.
/// Example: /// Example: ORIG
/// Constraints: Minimum length = 0, Maximum length = 32
func Eop_FullStart(builder *flatbuffers.Builder) {
	builder.StartObject(39)
}
func Eop_FullAddId(builder *flatbuffers.Builder, id flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(id), 0)
}
func Eop_FullAddClassificationMarking(builder *flatbuffers.Builder, classificationMarking flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(classificationMarking), 0)
}
func Eop_FullAddEopDate(builder *flatbuffers.Builder, eopDate flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(eopDate), 0)
}
func Eop_FullAddPolarMotionState(builder *flatbuffers.Builder, polarMotionState Eop_Full_polarMotionState_Enum) {
	builder.PrependInt8Slot(3, int8(polarMotionState), 0)
}
func Eop_FullAddPolarMotionX(builder *flatbuffers.Builder, polarMotionX float64) {
	builder.PrependFloat64Slot(4, polarMotionX, 0.0)
}
func Eop_FullAddPolarMotionXunc(builder *flatbuffers.Builder, polarMotionXunc float64) {
	builder.PrependFloat64Slot(5, polarMotionXunc, 0.0)
}
func Eop_FullAddPolarMotionY(builder *flatbuffers.Builder, polarMotionY float64) {
	builder.PrependFloat64Slot(6, polarMotionY, 0.0)
}
func Eop_FullAddPolarMotionYunc(builder *flatbuffers.Builder, polarMotionYunc float64) {
	builder.PrependFloat64Slot(7, polarMotionYunc, 0.0)
}
func Eop_FullAddUt1Utcstate(builder *flatbuffers.Builder, ut1Utcstate Eop_Full_ut1UTCState_Enum) {
	builder.PrependInt8Slot(8, int8(ut1Utcstate), 0)
}
func Eop_FullAddUt1Utc(builder *flatbuffers.Builder, ut1Utc float64) {
	builder.PrependFloat64Slot(9, ut1Utc, 0.0)
}
func Eop_FullAddUt1Utcunc(builder *flatbuffers.Builder, ut1Utcunc float64) {
	builder.PrependFloat64Slot(10, ut1Utcunc, 0.0)
}
func Eop_FullAddLod(builder *flatbuffers.Builder, lod float64) {
	builder.PrependFloat64Slot(11, lod, 0.0)
}
func Eop_FullAddLodUnc(builder *flatbuffers.Builder, lodUnc float64) {
	builder.PrependFloat64Slot(12, lodUnc, 0.0)
}
func Eop_FullAddNutationState(builder *flatbuffers.Builder, nutationState Eop_Full_nutationState_Enum) {
	builder.PrependInt8Slot(13, int8(nutationState), 0)
}
func Eop_FullAddDPsi(builder *flatbuffers.Builder, dPsi float64) {
	builder.PrependFloat64Slot(14, dPsi, 0.0)
}
func Eop_FullAddDPsiunc(builder *flatbuffers.Builder, dPsiunc float64) {
	builder.PrependFloat64Slot(15, dPsiunc, 0.0)
}
func Eop_FullAddDEpsilon(builder *flatbuffers.Builder, dEpsilon float64) {
	builder.PrependFloat64Slot(16, dEpsilon, 0.0)
}
func Eop_FullAddDEpsilonUnc(builder *flatbuffers.Builder, dEpsilonUnc float64) {
	builder.PrependFloat64Slot(17, dEpsilonUnc, 0.0)
}
func Eop_FullAddDX(builder *flatbuffers.Builder, dX float64) {
	builder.PrependFloat64Slot(18, dX, 0.0)
}
func Eop_FullAddDXunc(builder *flatbuffers.Builder, dXunc float64) {
	builder.PrependFloat64Slot(19, dXunc, 0.0)
}
func Eop_FullAddDY(builder *flatbuffers.Builder, dY float64) {
	builder.PrependFloat64Slot(20, dY, 0.0)
}
func Eop_FullAddDYunc(builder *flatbuffers.Builder, dYunc float64) {
	builder.PrependFloat64Slot(21, dYunc, 0.0)
}
func Eop_FullAddPolarMotionXb(builder *flatbuffers.Builder, polarMotionXb float64) {
	builder.PrependFloat64Slot(22, polarMotionXb, 0.0)
}
func Eop_FullAddPolarMotionYb(builder *flatbuffers.Builder, polarMotionYb float64) {
	builder.PrependFloat64Slot(23, polarMotionYb, 0.0)
}
func Eop_FullAddUt1Utcb(builder *flatbuffers.Builder, ut1Utcb float64) {
	builder.PrependFloat64Slot(24, ut1Utcb, 0.0)
}
func Eop_FullAddDPsib(builder *flatbuffers.Builder, dPsib float64) {
	builder.PrependFloat64Slot(25, dPsib, 0.0)
}
func Eop_FullAddDEpsilonB(builder *flatbuffers.Builder, dEpsilonB float64) {
	builder.PrependFloat64Slot(26, dEpsilonB, 0.0)
}
func Eop_FullAddDXb(builder *flatbuffers.Builder, dXb float64) {
	builder.PrependFloat64Slot(27, dXb, 0.0)
}
func Eop_FullAddDYb(builder *flatbuffers.Builder, dYb float64) {
	builder.PrependFloat64Slot(28, dYb, 0.0)
}
func Eop_FullAddPrecessionNutationStd(builder *flatbuffers.Builder, precessionNutationStd flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(29, flatbuffers.UOffsetT(precessionNutationStd), 0)
}
func Eop_FullAddRawFileUri(builder *flatbuffers.Builder, rawFileUri flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(30, flatbuffers.UOffsetT(rawFileUri), 0)
}
func Eop_FullAddSource(builder *flatbuffers.Builder, source flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(31, flatbuffers.UOffsetT(source), 0)
}
func Eop_FullAddOrigin(builder *flatbuffers.Builder, origin flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(32, flatbuffers.UOffsetT(origin), 0)
}
func Eop_FullAddDataMode(builder *flatbuffers.Builder, dataMode Eop_Full_dataMode_Enum) {
	builder.PrependInt8Slot(33, int8(dataMode), 0)
}
func Eop_FullAddCreatedAt(builder *flatbuffers.Builder, createdAt flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(34, flatbuffers.UOffsetT(createdAt), 0)
}
func Eop_FullAddCreatedBy(builder *flatbuffers.Builder, createdBy flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(35, flatbuffers.UOffsetT(createdBy), 0)
}
func Eop_FullAddUpdatedAt(builder *flatbuffers.Builder, updatedAt flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(36, flatbuffers.UOffsetT(updatedAt), 0)
}
func Eop_FullAddUpdatedBy(builder *flatbuffers.Builder, updatedBy flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(37, flatbuffers.UOffsetT(updatedBy), 0)
}
func Eop_FullAddOrigNetwork(builder *flatbuffers.Builder, origNetwork flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(38, flatbuffers.UOffsetT(origNetwork), 0)
}
func Eop_FullEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
