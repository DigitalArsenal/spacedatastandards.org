// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package EventEvolution_Abridged

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

/// /// Event Evolution is a unique service supporting the association of UDL records of various data types to a common event or activity. The associations may be a one time summary, aggregating sources of a past event, or of an ongoing activity that evolves over a period of time.
type EventEvolution_Abridged struct {
	_tab flatbuffers.Table
}

const EventEvolution_AbridgedIdentifier = "EVEN"

func GetRootAsEventEvolution_Abridged(buf []byte, offset flatbuffers.UOffsetT) *EventEvolution_Abridged {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &EventEvolution_Abridged{}
	x.Init(buf, n+offset)
	return x
}

func FinishEventEvolution_AbridgedBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	identifierBytes := []byte(EventEvolution_AbridgedIdentifier)
	builder.FinishWithFileIdentifier(offset, identifierBytes)
}

func EventEvolution_AbridgedBufferHasIdentifier(buf []byte) bool {
	return flatbuffers.BufferHasIdentifier(buf, EventEvolution_AbridgedIdentifier)
}

func GetSizePrefixedRootAsEventEvolution_Abridged(buf []byte, offset flatbuffers.UOffsetT) *EventEvolution_Abridged {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &EventEvolution_Abridged{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedEventEvolution_AbridgedBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	identifierBytes := []byte(EventEvolution_AbridgedIdentifier)
	builder.FinishSizePrefixedWithFileIdentifier(offset, identifierBytes)
}

func SizePrefixedEventEvolution_AbridgedBufferHasIdentifier(buf []byte) bool {
	return flatbuffers.SizePrefixedBufferHasIdentifier(buf, EventEvolution_AbridgedIdentifier)
}

func (rcv *EventEvolution_Abridged) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *EventEvolution_Abridged) Table() flatbuffers.Table {
	return rcv._tab
}

/// Unique identifier of the record, auto-generated by the system.
/// Example: /// Example: EVENT_EVOL_ID
/// Constraints: Minimum length = 1, Maximum length = 36
func (rcv *EventEvolution_Abridged) Id() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Unique identifier of the record, auto-generated by the system.
/// Example: /// Example: EVENT_EVOL_ID
/// Constraints: Minimum length = 1, Maximum length = 36
/// Classification marking of the data in IC/CAPCO Portion-marked format.
/// Example: /// Example: U
/// Constraints: Minimum length = 1, Maximum length = 128
func (rcv *EventEvolution_Abridged) ClassificationMarking() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Classification marking of the data in IC/CAPCO Portion-marked format.
/// Example: /// Example: U
/// Constraints: Minimum length = 1, Maximum length = 128
/// User-provided unique identifier of this activity or event. This ID should remain the same on subsequent updates in order to associate all records pertaining to the activity or event.
/// Example: /// Example: EVENT_ID
/// Constraints: Minimum length = 1, Maximum length = 36
func (rcv *EventEvolution_Abridged) EventId() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// User-provided unique identifier of this activity or event. This ID should remain the same on subsequent updates in order to associate all records pertaining to the activity or event.
/// Example: /// Example: EVENT_ID
/// Constraints: Minimum length = 1, Maximum length = 36
/// The activity or event type associated with this record (e.g. BREAKUP, DIRECT FIRE, IED, LAUNCH, PROTEST, etc.). For Significant Activities, recommended but not constrained to, CAMEO.Manual.1.1b3 Chapter 6. Note that the evolution of an event may incorporate records of various types, for example, a LAUNCH event may evolve into a BREAKUP event.
/// Example: /// Example: PROTEST
/// Constraints: Minimum length = 0, Maximum length = 128
func (rcv *EventEvolution_Abridged) Category() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The activity or event type associated with this record (e.g. BREAKUP, DIRECT FIRE, IED, LAUNCH, PROTEST, etc.). For Significant Activities, recommended but not constrained to, CAMEO.Manual.1.1b3 Chapter 6. Note that the evolution of an event may incorporate records of various types, for example, a LAUNCH event may evolve into a BREAKUP event.
/// Example: /// Example: PROTEST
/// Constraints: Minimum length = 0, Maximum length = 128
/// Summary or description of the activity or event.
/// Example: /// Example: Example summary of the event.
/// Constraints: Minimum length = 1, Maximum length = 4096
func (rcv *EventEvolution_Abridged) Summary() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Summary or description of the activity or event.
/// Example: /// Example: Example summary of the event.
/// Constraints: Minimum length = 1, Maximum length = 4096
/// The actual or estimated start time of the activity or event, in ISO 8601 UTC format.
/// Example: /// Example: 2021-12-02T16:00:00.123Z
/// Constraints: No constraints specified.
func (rcv *EventEvolution_Abridged) StartTime() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The actual or estimated start time of the activity or event, in ISO 8601 UTC format.
/// Example: /// Example: 2021-12-02T16:00:00.123Z
/// Constraints: No constraints specified.
/// The actual or estimated start time of the activity or event, in ISO 8601 UTC format.
/// Example: /// Example: 2021-12-03T16:00:00.123Z
/// Constraints: No constraints specified.
func (rcv *EventEvolution_Abridged) EndTime() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The actual or estimated start time of the activity or event, in ISO 8601 UTC format.
/// Example: /// Example: 2021-12-03T16:00:00.123Z
/// Constraints: No constraints specified.
/// The status of this activity or event.  (ACTIVE, CONCLUDED, UNKNOWN).
/// Example: /// Example: UNKNOWN
/// Constraints: Minimum length = 0, Maximum length = 24
func (rcv *EventEvolution_Abridged) Status() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(18))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The status of this activity or event.  (ACTIVE, CONCLUDED, UNKNOWN).
/// Example: /// Example: UNKNOWN
/// Constraints: Minimum length = 0, Maximum length = 24
/// The country code. This value is typically the ISO 3166 Alpha-2 two-character country code, however it can also represent various consortiums that do not appear in the ISO document. The code must correspond to an existing country in the UDL’s country API. Call udl/country/{code} to get any associated FIPS code, ISO Alpha-3 code, or alternate code values that exist for the specified country code.
/// Example: /// Example: US
/// Constraints: Minimum length = 0, Maximum length = 4
func (rcv *EventEvolution_Abridged) CountryCode() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(20))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The country code. This value is typically the ISO 3166 Alpha-2 two-character country code, however it can also represent various consortiums that do not appear in the ISO document. The code must correspond to an existing country in the UDL’s country API. Call udl/country/{code} to get any associated FIPS code, ISO Alpha-3 code, or alternate code values that exist for the specified country code.
/// Example: /// Example: US
/// Constraints: Minimum length = 0, Maximum length = 4
/// Administrative boundaries of the first sub-national level. Level 1 is simply the largest demarcation under whatever demarcation criteria has been determined by the governing body. For example this may be the state/province in which a terrestrial event takes place, or with which the event is attributed for non-localized or non-terrestrial activity.
/// Example: /// Example: Colorado
/// Constraints: Minimum length = 0, Maximum length = 128
func (rcv *EventEvolution_Abridged) GeoAdminLevel1() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(22))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Administrative boundaries of the first sub-national level. Level 1 is simply the largest demarcation under whatever demarcation criteria has been determined by the governing body. For example this may be the state/province in which a terrestrial event takes place, or with which the event is attributed for non-localized or non-terrestrial activity.
/// Example: /// Example: Colorado
/// Constraints: Minimum length = 0, Maximum length = 128
/// Administrative boundaries of the second sub-national level. Level 2 is simply the second largest demarcation under whatever demarcation criteria has been determined by the governing body. For example this may be the city/district in which a terrestrial event takes place, or with which the event is attributed for non-localized or non-terrestrial activity.
/// Example: /// Example: El Paso County
/// Constraints: Minimum length = 0, Maximum length = 128
func (rcv *EventEvolution_Abridged) GeoAdminLevel2() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(24))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Administrative boundaries of the second sub-national level. Level 2 is simply the second largest demarcation under whatever demarcation criteria has been determined by the governing body. For example this may be the city/district in which a terrestrial event takes place, or with which the event is attributed for non-localized or non-terrestrial activity.
/// Example: /// Example: El Paso County
/// Constraints: Minimum length = 0, Maximum length = 128
/// Administrative boundaries of the third sub-national level. Level 3 is simply the third largest demarcation under whatever demarcation criteria has been determined by the governing body.
/// Example: /// Example: Colorado Springs
/// Constraints: Minimum length = 0, Maximum length = 128
func (rcv *EventEvolution_Abridged) GeoAdminLevel3() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(26))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Administrative boundaries of the third sub-national level. Level 3 is simply the third largest demarcation under whatever demarcation criteria has been determined by the governing body.
/// Example: /// Example: Colorado Springs
/// Constraints: Minimum length = 0, Maximum length = 128
/// Flag indicating that this record is for the purpose of redacting one or more previously specified records from association with this activity or event.  If this flag is set then all records indicated in srcTyps/srcIds should be removed from event association.
/// Example: /// Example: False
/// Constraints: No constraints specified.
func (rcv *EventEvolution_Abridged) Redact() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(28))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

/// Flag indicating that this record is for the purpose of redacting one or more previously specified records from association with this activity or event.  If this flag is set then all records indicated in srcTyps/srcIds should be removed from event association.
/// Example: /// Example: False
/// Constraints: No constraints specified.
func (rcv *EventEvolution_Abridged) MutateRedact(n bool) bool {
	return rcv._tab.MutateBoolSlot(28, n)
}

/// Array of UDL record types (AIS, CONJUNCTION, DOA, ELSET, EO, ESID, GROUNDIMAGE, POI, MANEUVER, MTI, NOTIFICATION, RADAR, RF, SIGACT, SKYIMAGE, SV, TRACK) that are related to this activity or event. See the associated 'srcIds' array for the record UUIDs, positionally corresponding to the record types in this array. The 'srcTyps' and 'srcIds' arrays must match in size.
/// Example: /// Example: ['AIS', 'CONJUNCTION']
/// Constraints: No constraints specified.
func (rcv *EventEvolution_Abridged) SrcTyps(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(30))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *EventEvolution_Abridged) SrcTypsLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(30))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

/// Array of UDL record types (AIS, CONJUNCTION, DOA, ELSET, EO, ESID, GROUNDIMAGE, POI, MANEUVER, MTI, NOTIFICATION, RADAR, RF, SIGACT, SKYIMAGE, SV, TRACK) that are related to this activity or event. See the associated 'srcIds' array for the record UUIDs, positionally corresponding to the record types in this array. The 'srcTyps' and 'srcIds' arrays must match in size.
/// Example: /// Example: ['AIS', 'CONJUNCTION']
/// Constraints: No constraints specified.
/// Array of UUIDs of the UDL data records that are related to the determination of this activity or event. See the associated 'srcTyps' array for the specific types of data, positionally corresponding to the UUIDs in this array. The 'srcTyps' and 'srcIds' arrays must match in size. See the corresponding srcTyps array element for the data type of the UUID and use the appropriate API operation to retrieve that object.
/// Example: /// Example: ['SRC_ID_1', 'SRC_ID_2']
/// Constraints: No constraints specified.
func (rcv *EventEvolution_Abridged) SrcIds(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(32))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *EventEvolution_Abridged) SrcIdsLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(32))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

/// Array of UUIDs of the UDL data records that are related to the determination of this activity or event. See the associated 'srcTyps' array for the specific types of data, positionally corresponding to the UUIDs in this array. The 'srcTyps' and 'srcIds' arrays must match in size. See the corresponding srcTyps array element for the data type of the UUID and use the appropriate API operation to retrieve that object.
/// Example: /// Example: ['SRC_ID_1', 'SRC_ID_2']
/// Constraints: No constraints specified.
/// Optional description of the relationship between the records provided in the srcTyps/srcIds and the activity or event.
/// Example: /// Example: Description of relationship between srcTyps and srcIds
/// Constraints: Minimum length = 0, Maximum length = 2056
func (rcv *EventEvolution_Abridged) DataDescription() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(34))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Optional description of the relationship between the records provided in the srcTyps/srcIds and the activity or event.
/// Example: /// Example: Description of relationship between srcTyps and srcIds
/// Constraints: Minimum length = 0, Maximum length = 2056
/// Geographical region or polygon (lon/lat pairs), as depicted by the Well-Known Text representation of the geometry/geography, of the image as projected on the ground. WKT reference: https://www.opengeospatial.org/standards/wkt-crs. Ignored if included with a POST or PUT request that also specifies a valid 'area' field.
/// Example: /// Example: POLYGON((67.3291113966927 26.156175339112,67.2580009640721 26.091022064271,67.1795862381682 26.6637992964562,67.2501237475598 26.730115808233,67.3291113966927 26.156175339112))
/// Constraints: No constraints specified.
func (rcv *EventEvolution_Abridged) Atext() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(36))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Geographical region or polygon (lon/lat pairs), as depicted by the Well-Known Text representation of the geometry/geography, of the image as projected on the ground. WKT reference: https://www.opengeospatial.org/standards/wkt-crs. Ignored if included with a POST or PUT request that also specifies a valid 'area' field.
/// Example: /// Example: POLYGON((67.3291113966927 26.156175339112,67.2580009640721 26.091022064271,67.1795862381682 26.6637992964562,67.2501237475598 26.730115808233,67.3291113966927 26.156175339112))
/// Constraints: No constraints specified.
/// Geographical region or polygon (lat/lon pairs), as depicted by the GeoJSON representation of the geometry/geography, of the image as projected on the ground. GeoJSON Reference: https://geojson.org/. Ignored if included with a POST or PUT request that also specifies a valid 'area' or 'atext' field.
/// Example: /// Example: {"type":"Polygon","coordinates":[[[67.3291113966927,26.156175339112],[67.2580009640721,26.091022064271],[67.1795862381682,26.6637992964562],[67.2501237475598,26.730115808233],[67.3291113966927,26.156175339112]]]}
/// Constraints: No constraints specified.
func (rcv *EventEvolution_Abridged) Agjson() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(38))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Geographical region or polygon (lat/lon pairs), as depicted by the GeoJSON representation of the geometry/geography, of the image as projected on the ground. GeoJSON Reference: https://geojson.org/. Ignored if included with a POST or PUT request that also specifies a valid 'area' or 'atext' field.
/// Example: /// Example: {"type":"Polygon","coordinates":[[[67.3291113966927,26.156175339112],[67.2580009640721,26.091022064271],[67.1795862381682,26.6637992964562],[67.2501237475598,26.730115808233],[67.3291113966927,26.156175339112]]]}
/// Constraints: No constraints specified.
/// Type of region as projected on the ground.
/// Example: /// Example: POLYGON
/// Constraints: Minimum length = 0, Maximum length = 128
func (rcv *EventEvolution_Abridged) Atype() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(40))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Type of region as projected on the ground.
/// Example: /// Example: POLYGON
/// Constraints: Minimum length = 0, Maximum length = 128
/// Number of dimensions of the geometry depicted by region.
/// Example: /// Example: 2
/// Constraints: No constraints specified.
func (rcv *EventEvolution_Abridged) Andims() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(42))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

/// Number of dimensions of the geometry depicted by region.
/// Example: /// Example: 2
/// Constraints: No constraints specified.
func (rcv *EventEvolution_Abridged) MutateAndims(n int32) bool {
	return rcv._tab.MutateInt32Slot(42, n)
}

/// Geographical spatial_ref_sys for region.
/// Example: /// Example: 4326
/// Constraints: No constraints specified.
func (rcv *EventEvolution_Abridged) Asrid() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(44))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

/// Geographical spatial_ref_sys for region.
/// Example: /// Example: 4326
/// Constraints: No constraints specified.
func (rcv *EventEvolution_Abridged) MutateAsrid(n int32) bool {
	return rcv._tab.MutateInt32Slot(44, n)
}

/// List of URLs to before/after images of this point of interest entity.
/// Example: /// Example: ['URL1', 'URL2']
/// Constraints: No constraints specified.
func (rcv *EventEvolution_Abridged) Url(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(46))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *EventEvolution_Abridged) UrlLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(46))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

/// List of URLs to before/after images of this point of interest entity.
/// Example: /// Example: ['URL1', 'URL2']
/// Constraints: No constraints specified.
/// Optional array of provider/source specific tags for this data, where each element is no longer than 32 characters, used for implementing data owner conditional access controls to restrict access to the data. Should be left null by data providers unless conditional access controls are coordinated with the UDL team.
/// Example: /// Example: ['TAG1', 'TAG2']
/// Constraints: No constraints specified.
func (rcv *EventEvolution_Abridged) Tags(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(48))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *EventEvolution_Abridged) TagsLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(48))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

/// Optional array of provider/source specific tags for this data, where each element is no longer than 32 characters, used for implementing data owner conditional access controls to restrict access to the data. Should be left null by data providers unless conditional access controls are coordinated with the UDL team.
/// Example: /// Example: ['TAG1', 'TAG2']
/// Constraints: No constraints specified.
/// Time the row was created in the database, auto-populated by the system.
/// Example: /// Example: 2021-12-02T16:00:00.123Z
/// Constraints: No constraints specified.
func (rcv *EventEvolution_Abridged) CreatedAt() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(50))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Time the row was created in the database, auto-populated by the system.
/// Example: /// Example: 2021-12-02T16:00:00.123Z
/// Constraints: No constraints specified.
/// Application user who created the row in the database, auto-populated by the system.
/// Example: /// Example: some.user
/// Constraints: Minimum length = 0, Maximum length = 64
func (rcv *EventEvolution_Abridged) CreatedBy() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(52))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Application user who created the row in the database, auto-populated by the system.
/// Example: /// Example: some.user
/// Constraints: Minimum length = 0, Maximum length = 64
/// Source of the data.
/// Example: /// Example: Bluestaq
/// Constraints: Minimum length = 1, Maximum length = 36
func (rcv *EventEvolution_Abridged) Source() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(54))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Source of the data.
/// Example: /// Example: Bluestaq
/// Constraints: Minimum length = 1, Maximum length = 36
/// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
/// Example: /// Example: THIRD_PARTY_DATASOURCE
/// Constraints: Minimum length = 0, Maximum length = 64
func (rcv *EventEvolution_Abridged) Origin() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(56))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
/// Example: /// Example: THIRD_PARTY_DATASOURCE
/// Constraints: Minimum length = 0, Maximum length = 64
/// The originating source network on which this record was created, auto-populated by the system.
/// Example: /// Example: ORIG
/// Constraints: Minimum length = 1, Maximum length = 32
func (rcv *EventEvolution_Abridged) OrigNetwork() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(58))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The originating source network on which this record was created, auto-populated by the system.
/// Example: /// Example: ORIG
/// Constraints: Minimum length = 1, Maximum length = 32
/// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
/// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
/// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
/// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
/// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
/// Example: /// Example: TEST
/// Constraints: Minimum length = 1, Maximum length = 32
func (rcv *EventEvolution_Abridged) DataMode() EventEvolution_Abridged_dataMode_Enum {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(60))
	if o != 0 {
		return EventEvolution_Abridged_dataMode_Enum(rcv._tab.GetInt8(o + rcv._tab.Pos))
	}
	return 0
}

/// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
/// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
/// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
/// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
/// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
/// Example: /// Example: TEST
/// Constraints: Minimum length = 1, Maximum length = 32
func (rcv *EventEvolution_Abridged) MutateDataMode(n EventEvolution_Abridged_dataMode_Enum) bool {
	return rcv._tab.MutateInt8Slot(60, int8(n))
}

func EventEvolution_AbridgedStart(builder *flatbuffers.Builder) {
	builder.StartObject(29)
}
func EventEvolution_AbridgedAddId(builder *flatbuffers.Builder, id flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(id), 0)
}
func EventEvolution_AbridgedAddClassificationMarking(builder *flatbuffers.Builder, classificationMarking flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(classificationMarking), 0)
}
func EventEvolution_AbridgedAddEventId(builder *flatbuffers.Builder, eventId flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(eventId), 0)
}
func EventEvolution_AbridgedAddCategory(builder *flatbuffers.Builder, category flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(3, flatbuffers.UOffsetT(category), 0)
}
func EventEvolution_AbridgedAddSummary(builder *flatbuffers.Builder, summary flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(4, flatbuffers.UOffsetT(summary), 0)
}
func EventEvolution_AbridgedAddStartTime(builder *flatbuffers.Builder, startTime flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(5, flatbuffers.UOffsetT(startTime), 0)
}
func EventEvolution_AbridgedAddEndTime(builder *flatbuffers.Builder, endTime flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(6, flatbuffers.UOffsetT(endTime), 0)
}
func EventEvolution_AbridgedAddStatus(builder *flatbuffers.Builder, status flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(7, flatbuffers.UOffsetT(status), 0)
}
func EventEvolution_AbridgedAddCountryCode(builder *flatbuffers.Builder, countryCode flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(8, flatbuffers.UOffsetT(countryCode), 0)
}
func EventEvolution_AbridgedAddGeoAdminLevel1(builder *flatbuffers.Builder, geoAdminLevel1 flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(9, flatbuffers.UOffsetT(geoAdminLevel1), 0)
}
func EventEvolution_AbridgedAddGeoAdminLevel2(builder *flatbuffers.Builder, geoAdminLevel2 flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(10, flatbuffers.UOffsetT(geoAdminLevel2), 0)
}
func EventEvolution_AbridgedAddGeoAdminLevel3(builder *flatbuffers.Builder, geoAdminLevel3 flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(11, flatbuffers.UOffsetT(geoAdminLevel3), 0)
}
func EventEvolution_AbridgedAddRedact(builder *flatbuffers.Builder, redact bool) {
	builder.PrependBoolSlot(12, redact, false)
}
func EventEvolution_AbridgedAddSrcTyps(builder *flatbuffers.Builder, srcTyps flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(13, flatbuffers.UOffsetT(srcTyps), 0)
}
func EventEvolution_AbridgedStartSrcTypsVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func EventEvolution_AbridgedAddSrcIds(builder *flatbuffers.Builder, srcIds flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(14, flatbuffers.UOffsetT(srcIds), 0)
}
func EventEvolution_AbridgedStartSrcIdsVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func EventEvolution_AbridgedAddDataDescription(builder *flatbuffers.Builder, dataDescription flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(15, flatbuffers.UOffsetT(dataDescription), 0)
}
func EventEvolution_AbridgedAddAtext(builder *flatbuffers.Builder, atext flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(16, flatbuffers.UOffsetT(atext), 0)
}
func EventEvolution_AbridgedAddAgjson(builder *flatbuffers.Builder, agjson flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(17, flatbuffers.UOffsetT(agjson), 0)
}
func EventEvolution_AbridgedAddAtype(builder *flatbuffers.Builder, atype flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(18, flatbuffers.UOffsetT(atype), 0)
}
func EventEvolution_AbridgedAddAndims(builder *flatbuffers.Builder, andims int32) {
	builder.PrependInt32Slot(19, andims, 0)
}
func EventEvolution_AbridgedAddAsrid(builder *flatbuffers.Builder, asrid int32) {
	builder.PrependInt32Slot(20, asrid, 0)
}
func EventEvolution_AbridgedAddUrl(builder *flatbuffers.Builder, url flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(21, flatbuffers.UOffsetT(url), 0)
}
func EventEvolution_AbridgedStartUrlVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func EventEvolution_AbridgedAddTags(builder *flatbuffers.Builder, tags flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(22, flatbuffers.UOffsetT(tags), 0)
}
func EventEvolution_AbridgedStartTagsVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func EventEvolution_AbridgedAddCreatedAt(builder *flatbuffers.Builder, createdAt flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(23, flatbuffers.UOffsetT(createdAt), 0)
}
func EventEvolution_AbridgedAddCreatedBy(builder *flatbuffers.Builder, createdBy flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(24, flatbuffers.UOffsetT(createdBy), 0)
}
func EventEvolution_AbridgedAddSource(builder *flatbuffers.Builder, source flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(25, flatbuffers.UOffsetT(source), 0)
}
func EventEvolution_AbridgedAddOrigin(builder *flatbuffers.Builder, origin flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(26, flatbuffers.UOffsetT(origin), 0)
}
func EventEvolution_AbridgedAddOrigNetwork(builder *flatbuffers.Builder, origNetwork flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(27, flatbuffers.UOffsetT(origNetwork), 0)
}
func EventEvolution_AbridgedAddDataMode(builder *flatbuffers.Builder, dataMode EventEvolution_Abridged_dataMode_Enum) {
	builder.PrependInt8Slot(28, int8(dataMode), 0)
}
func EventEvolution_AbridgedEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
