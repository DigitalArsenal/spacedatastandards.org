// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package OpticalSOIObservation_Ingest

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

/// /// An Optical SOI record contains observation information taken from a sensor about a Space Object.
type OpticalSOIObservation_Ingest struct {
	_tab flatbuffers.Table
}

const OpticalSOIObservation_IngestIdentifier = "OPTI"

func GetRootAsOpticalSOIObservation_Ingest(buf []byte, offset flatbuffers.UOffsetT) *OpticalSOIObservation_Ingest {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &OpticalSOIObservation_Ingest{}
	x.Init(buf, n+offset)
	return x
}

func FinishOpticalSOIObservation_IngestBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	identifierBytes := []byte(OpticalSOIObservation_IngestIdentifier)
	builder.FinishWithFileIdentifier(offset, identifierBytes)
}

func OpticalSOIObservation_IngestBufferHasIdentifier(buf []byte) bool {
	return flatbuffers.BufferHasIdentifier(buf, OpticalSOIObservation_IngestIdentifier)
}

func GetSizePrefixedRootAsOpticalSOIObservation_Ingest(buf []byte, offset flatbuffers.UOffsetT) *OpticalSOIObservation_Ingest {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &OpticalSOIObservation_Ingest{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedOpticalSOIObservation_IngestBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	identifierBytes := []byte(OpticalSOIObservation_IngestIdentifier)
	builder.FinishSizePrefixedWithFileIdentifier(offset, identifierBytes)
}

func SizePrefixedOpticalSOIObservation_IngestBufferHasIdentifier(buf []byte) bool {
	return flatbuffers.SizePrefixedBufferHasIdentifier(buf, OpticalSOIObservation_IngestIdentifier)
}

func (rcv *OpticalSOIObservation_Ingest) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *OpticalSOIObservation_Ingest) Table() flatbuffers.Table {
	return rcv._tab
}

/// Observation detection start time in ISO 8601 UTC with microsecond precision.
/// Example: /// Example: 2018-01-01T16:00:00.888456Z
/// Constraints: No constraints specified.
func (rcv *OpticalSOIObservation_Ingest) ObStartTime() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Observation detection start time in ISO 8601 UTC with microsecond precision.
/// Example: /// Example: 2018-01-01T16:00:00.888456Z
/// Constraints: No constraints specified.
/// Array of start times for each intensity measurement. The 1st value in the array will match obStartTime.
/// Example: /// Example: ['2018-01-01T16:00:00.888456Z', '2018-01-01T16:00:00.898456Z', '2018-01-01T16:00:00.998456Z']
/// Constraints: No constraints specified.
func (rcv *OpticalSOIObservation_Ingest) IntensityTimes(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *OpticalSOIObservation_Ingest) IntensityTimesLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

/// Array of start times for each intensity measurement. The 1st value in the array will match obStartTime.
/// Example: /// Example: ['2018-01-01T16:00:00.888456Z', '2018-01-01T16:00:00.898456Z', '2018-01-01T16:00:00.998456Z']
/// Constraints: No constraints specified.
/// The reference number, x, where x ranges from 1 to n, where n is the number specified in spectralFilters that corresponds to the spectral filter used.
/// Example: /// Example: 0
/// Constraints: No constraints specified.
func (rcv *OpticalSOIObservation_Ingest) CurrentSpectralFilterNum() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

/// The reference number, x, where x ranges from 1 to n, where n is the number specified in spectralFilters that corresponds to the spectral filter used.
/// Example: /// Example: 0
/// Constraints: No constraints specified.
func (rcv *OpticalSOIObservation_Ingest) MutateCurrentSpectralFilterNum(n int32) bool {
	return rcv._tab.MutateInt32Slot(8, n)
}

/// Image exposure duration in seconds.
/// Example: /// Example: 0.455
/// Constraints: No constraints specified.
func (rcv *OpticalSOIObservation_Ingest) ExpDuration() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Image exposure duration in seconds.
/// Example: /// Example: 0.455
/// Constraints: No constraints specified.
func (rcv *OpticalSOIObservation_Ingest) MutateExpDuration(n float64) bool {
	return rcv._tab.MutateFloat64Slot(10, n)
}

/// Array of intensities of the Space Object for observations, in kilowatts per steradian per micrometer.
/// Example: /// Example: [1.1, 1.1, 1.1]
/// Constraints: No constraints specified.
func (rcv *OpticalSOIObservation_Ingest) Intensities(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *OpticalSOIObservation_Ingest) IntensitiesLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

/// Array of intensities of the Space Object for observations, in kilowatts per steradian per micrometer.
/// Example: /// Example: [1.1, 1.1, 1.1]
/// Constraints: No constraints specified.
/// Array of coefficients for how much signal would be lost to atmospheric attenuation for a star at zenith for each element in intensities, in magnitudes per air mass.
/// Example: /// Example: [0.32, 0.32, 0.32]
/// Constraints: No constraints specified.
func (rcv *OpticalSOIObservation_Ingest) ExtinctionCoeffs(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *OpticalSOIObservation_Ingest) ExtinctionCoeffsLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

/// Array of coefficients for how much signal would be lost to atmospheric attenuation for a star at zenith for each element in intensities, in magnitudes per air mass.
/// Example: /// Example: [0.32, 0.32, 0.32]
/// Constraints: No constraints specified.
/// Array of extinction coefficient uncertainties for each element in intensities. Each value represents the difference between the measured brightness and predicted brightness of the star with the extinction removed, making it exo-atmospheric (e.g. -5.0 to 30.0).
/// Example: /// Example: [0.06, 0.06, 0.06]
/// Constraints: No constraints specified.
func (rcv *OpticalSOIObservation_Ingest) ExtinctionCoeffsUnc(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *OpticalSOIObservation_Ingest) ExtinctionCoeffsUncLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

/// Array of extinction coefficient uncertainties for each element in intensities. Each value represents the difference between the measured brightness and predicted brightness of the star with the extinction removed, making it exo-atmospheric (e.g. -5.0 to 30.0).
/// Example: /// Example: [0.06, 0.06, 0.06]
/// Constraints: No constraints specified.
/// Array of average Sky Background signals, in magnitudes, with a value corresponding to the time of each intensity measurement. Sky Background refers to the incoming light from an apparently empty part of the night sky.
/// Example: /// Example: [100625.375, 100625.375, 100625.375]
/// Constraints: No constraints specified.
func (rcv *OpticalSOIObservation_Ingest) SkyBgs(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(18))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *OpticalSOIObservation_Ingest) SkyBgsLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(18))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

/// Array of average Sky Background signals, in magnitudes, with a value corresponding to the time of each intensity measurement. Sky Background refers to the incoming light from an apparently empty part of the night sky.
/// Example: /// Example: [100625.375, 100625.375, 100625.375]
/// Constraints: No constraints specified.
/// Array of local average Sky Background signals, in magnitudes, with a value corresponding to the time of each intensity measurement. Sky Background refers to the incoming light from an apparently empty part of the night sky.
/// Example: /// Example: [100625.375, 100625.375, 100625.375]
/// Constraints: No constraints specified.
func (rcv *OpticalSOIObservation_Ingest) LocalSkyBgs(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(20))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *OpticalSOIObservation_Ingest) LocalSkyBgsLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(20))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

/// Array of local average Sky Background signals, in magnitudes, with a value corresponding to the time of each intensity measurement. Sky Background refers to the incoming light from an apparently empty part of the night sky.
/// Example: /// Example: [100625.375, 100625.375, 100625.375]
/// Constraints: No constraints specified.
/// Array of uncertainty of the local average Sky Background signal, in magnitudes, with a value corresponding to the time of each intensity measurement.
/// Example: /// Example: [0.065, 0.065, 0.065]
/// Constraints: No constraints specified.
func (rcv *OpticalSOIObservation_Ingest) LocalSkyBgsUnc(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(22))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *OpticalSOIObservation_Ingest) LocalSkyBgsUncLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(22))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

/// Array of uncertainty of the local average Sky Background signal, in magnitudes, with a value corresponding to the time of each intensity measurement.
/// Example: /// Example: [0.065, 0.065, 0.065]
/// Constraints: No constraints specified.
/// Array of the number of detected stars in the FOV with a value for each element in the intensities field.
/// Example: /// Example: [6, 6, 6]
/// Constraints: No constraints specified.
func (rcv *OpticalSOIObservation_Ingest) NumDetectedStars(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(24))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *OpticalSOIObservation_Ingest) NumDetectedStarsLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(24))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

/// Array of the number of detected stars in the FOV with a value for each element in the intensities field.
/// Example: /// Example: [6, 6, 6]
/// Constraints: No constraints specified.
/// Array of the number of correlated stars in the FOV with a value for each element in the intensities field.
/// Example: /// Example: [3, 3, 3]
/// Constraints: No constraints specified.
func (rcv *OpticalSOIObservation_Ingest) NumCorrelatedStars(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(26))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *OpticalSOIObservation_Ingest) NumCorrelatedStarsLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(26))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

/// Array of the number of correlated stars in the FOV with a value for each element in the intensities field.
/// Example: /// Example: [3, 3, 3]
/// Constraints: No constraints specified.
/// Array of values for the zero-point in magnitudes, calculated at the time of each intensity measurement. It is the difference between the catalog mag and instrumental mag for a set of standard stars (e.g. -5.0 to 30.0).
/// Example: /// Example: [24.711, 24.711, 24.711]
/// Constraints: No constraints specified.
func (rcv *OpticalSOIObservation_Ingest) ZeroPoints(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(28))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *OpticalSOIObservation_Ingest) ZeroPointsLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(28))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

/// Array of values for the zero-point in magnitudes, calculated at the time of each intensity measurement. It is the difference between the catalog mag and instrumental mag for a set of standard stars (e.g. -5.0 to 30.0).
/// Example: /// Example: [24.711, 24.711, 24.711]
/// Constraints: No constraints specified.
/// Array of right ascension values, in degrees, of the Target object from the frame of reference of the sensor. A value is provided for each element in the intensities field.
/// Example: /// Example: [107.4, 107.4, 107.4]
/// Constraints: No constraints specified.
func (rcv *OpticalSOIObservation_Ingest) Ras(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(30))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *OpticalSOIObservation_Ingest) RasLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(30))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

/// Array of right ascension values, in degrees, of the Target object from the frame of reference of the sensor. A value is provided for each element in the intensities field.
/// Example: /// Example: [107.4, 107.4, 107.4]
/// Constraints: No constraints specified.
/// Array of declination values, in degrees, of the Target object from the frame of reference of the sensor. A value is provided for each element in the intensities field, at the middle of the frame’s exposure time.
/// Example: /// Example: [-0.45, -0.45, -0.45]
/// Constraints: No constraints specified.
func (rcv *OpticalSOIObservation_Ingest) Declinations(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(32))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *OpticalSOIObservation_Ingest) DeclinationsLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(32))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

/// Array of declination values, in degrees, of the Target object from the frame of reference of the sensor. A value is provided for each element in the intensities field, at the middle of the frame’s exposure time.
/// Example: /// Example: [-0.45, -0.45, -0.45]
/// Constraints: No constraints specified.
/// Array of right ascension rate values, in degrees per second, measuring the rate the telescope is moving to track the Target object from the frame of reference of the sensor, for each element in the intensities field, at the middle of the frame’s exposure time.
/// Example: /// Example: [0, 0, 0]
/// Constraints: No constraints specified.
func (rcv *OpticalSOIObservation_Ingest) RaRates(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(34))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *OpticalSOIObservation_Ingest) RaRatesLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(34))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

/// Array of right ascension rate values, in degrees per second, measuring the rate the telescope is moving to track the Target object from the frame of reference of the sensor, for each element in the intensities field, at the middle of the frame’s exposure time.
/// Example: /// Example: [0, 0, 0]
/// Constraints: No constraints specified.
/// Array of values giving the percent of pixels that make up the object signal that are beyond the saturation point for the sensor, with a value for each element in the intensities field.
/// Example: /// Example: [0.1, 0.2, 1]
/// Constraints: No constraints specified.
func (rcv *OpticalSOIObservation_Ingest) PercentSats(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(36))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *OpticalSOIObservation_Ingest) PercentSatsLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(36))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

/// Array of values giving the percent of pixels that make up the object signal that are beyond the saturation point for the sensor, with a value for each element in the intensities field.
/// Example: /// Example: [0.1, 0.2, 1]
/// Constraints: No constraints specified.
func OpticalSOIObservation_IngestStart(builder *flatbuffers.Builder) {
	builder.StartObject(17)
}
func OpticalSOIObservation_IngestAddObStartTime(builder *flatbuffers.Builder, obStartTime flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(obStartTime), 0)
}
func OpticalSOIObservation_IngestAddIntensityTimes(builder *flatbuffers.Builder, intensityTimes flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(intensityTimes), 0)
}
func OpticalSOIObservation_IngestStartIntensityTimesVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func OpticalSOIObservation_IngestAddCurrentSpectralFilterNum(builder *flatbuffers.Builder, currentSpectralFilterNum int32) {
	builder.PrependInt32Slot(2, currentSpectralFilterNum, 0)
}
func OpticalSOIObservation_IngestAddExpDuration(builder *flatbuffers.Builder, expDuration float64) {
	builder.PrependFloat64Slot(3, expDuration, 0.0)
}
func OpticalSOIObservation_IngestAddIntensities(builder *flatbuffers.Builder, intensities flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(4, flatbuffers.UOffsetT(intensities), 0)
}
func OpticalSOIObservation_IngestStartIntensitiesVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func OpticalSOIObservation_IngestAddExtinctionCoeffs(builder *flatbuffers.Builder, extinctionCoeffs flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(5, flatbuffers.UOffsetT(extinctionCoeffs), 0)
}
func OpticalSOIObservation_IngestStartExtinctionCoeffsVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func OpticalSOIObservation_IngestAddExtinctionCoeffsUnc(builder *flatbuffers.Builder, extinctionCoeffsUnc flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(6, flatbuffers.UOffsetT(extinctionCoeffsUnc), 0)
}
func OpticalSOIObservation_IngestStartExtinctionCoeffsUncVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func OpticalSOIObservation_IngestAddSkyBgs(builder *flatbuffers.Builder, skyBgs flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(7, flatbuffers.UOffsetT(skyBgs), 0)
}
func OpticalSOIObservation_IngestStartSkyBgsVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func OpticalSOIObservation_IngestAddLocalSkyBgs(builder *flatbuffers.Builder, localSkyBgs flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(8, flatbuffers.UOffsetT(localSkyBgs), 0)
}
func OpticalSOIObservation_IngestStartLocalSkyBgsVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func OpticalSOIObservation_IngestAddLocalSkyBgsUnc(builder *flatbuffers.Builder, localSkyBgsUnc flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(9, flatbuffers.UOffsetT(localSkyBgsUnc), 0)
}
func OpticalSOIObservation_IngestStartLocalSkyBgsUncVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func OpticalSOIObservation_IngestAddNumDetectedStars(builder *flatbuffers.Builder, numDetectedStars flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(10, flatbuffers.UOffsetT(numDetectedStars), 0)
}
func OpticalSOIObservation_IngestStartNumDetectedStarsVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func OpticalSOIObservation_IngestAddNumCorrelatedStars(builder *flatbuffers.Builder, numCorrelatedStars flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(11, flatbuffers.UOffsetT(numCorrelatedStars), 0)
}
func OpticalSOIObservation_IngestStartNumCorrelatedStarsVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func OpticalSOIObservation_IngestAddZeroPoints(builder *flatbuffers.Builder, zeroPoints flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(12, flatbuffers.UOffsetT(zeroPoints), 0)
}
func OpticalSOIObservation_IngestStartZeroPointsVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func OpticalSOIObservation_IngestAddRas(builder *flatbuffers.Builder, ras flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(13, flatbuffers.UOffsetT(ras), 0)
}
func OpticalSOIObservation_IngestStartRasVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func OpticalSOIObservation_IngestAddDeclinations(builder *flatbuffers.Builder, declinations flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(14, flatbuffers.UOffsetT(declinations), 0)
}
func OpticalSOIObservation_IngestStartDeclinationsVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func OpticalSOIObservation_IngestAddRaRates(builder *flatbuffers.Builder, raRates flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(15, flatbuffers.UOffsetT(raRates), 0)
}
func OpticalSOIObservation_IngestStartRaRatesVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func OpticalSOIObservation_IngestAddPercentSats(builder *flatbuffers.Builder, percentSats flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(16, flatbuffers.UOffsetT(percentSats), 0)
}
func OpticalSOIObservation_IngestStartPercentSatsVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func OpticalSOIObservation_IngestEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
