// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package SeradataNavigation_Full

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

/// /// Details for a navigation payload from  Seradata.
type SeradataNavigation_Full struct {
	_tab flatbuffers.Table
}

const SeradataNavigation_FullIdentifier = "SERA"

func GetRootAsSeradataNavigation_Full(buf []byte, offset flatbuffers.UOffsetT) *SeradataNavigation_Full {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &SeradataNavigation_Full{}
	x.Init(buf, n+offset)
	return x
}

func FinishSeradataNavigation_FullBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	identifierBytes := []byte(SeradataNavigation_FullIdentifier)
	builder.FinishWithFileIdentifier(offset, identifierBytes)
}

func SeradataNavigation_FullBufferHasIdentifier(buf []byte) bool {
	return flatbuffers.BufferHasIdentifier(buf, SeradataNavigation_FullIdentifier)
}

func GetSizePrefixedRootAsSeradataNavigation_Full(buf []byte, offset flatbuffers.UOffsetT) *SeradataNavigation_Full {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &SeradataNavigation_Full{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedSeradataNavigation_FullBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	identifierBytes := []byte(SeradataNavigation_FullIdentifier)
	builder.FinishSizePrefixedWithFileIdentifier(offset, identifierBytes)
}

func SizePrefixedSeradataNavigation_FullBufferHasIdentifier(buf []byte) bool {
	return flatbuffers.SizePrefixedBufferHasIdentifier(buf, SeradataNavigation_FullIdentifier)
}

func (rcv *SeradataNavigation_Full) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *SeradataNavigation_Full) Table() flatbuffers.Table {
	return rcv._tab
}

/// Unique identifier of the record, auto-generated by the system.
/// Example: /// Example: SERADATANAVIGATION-ID
/// Constraints: Minimum length = 1, Maximum length = 36
func (rcv *SeradataNavigation_Full) Id() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Unique identifier of the record, auto-generated by the system.
/// Example: /// Example: SERADATANAVIGATION-ID
/// Constraints: Minimum length = 1, Maximum length = 36
/// Classification marking of the data in IC/CAPCO Portion-marked format.
/// Example: /// Example: U
/// Constraints: Minimum length = 1, Maximum length = 128
func (rcv *SeradataNavigation_Full) ClassificationMarking() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Classification marking of the data in IC/CAPCO Portion-marked format.
/// Example: /// Example: U
/// Constraints: Minimum length = 1, Maximum length = 128
/// UUID of the parent Navigation record.
/// Example: /// Example: idNavigation
/// Constraints: Minimum length = 0, Maximum length = 36
func (rcv *SeradataNavigation_Full) IdNavigation() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// UUID of the parent Navigation record.
/// Example: /// Example: idNavigation
/// Constraints: Minimum length = 0, Maximum length = 36
/// Seradata ID of the spacecraft (SeradataSpacecraftDetails ID).
/// Example: /// Example: spacecraftId
/// Constraints: Minimum length = 1, Maximum length = 36
func (rcv *SeradataNavigation_Full) SpacecraftId() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Seradata ID of the spacecraft (SeradataSpacecraftDetails ID).
/// Example: /// Example: spacecraftId
/// Constraints: Minimum length = 1, Maximum length = 36
/// Hosted for company/Organization Id.
/// Example: /// Example: hostedForCompanyOrgId
/// Constraints: Minimum length = 0, Maximum length = 36
func (rcv *SeradataNavigation_Full) HostedForCompanyOrgId() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Hosted for company/Organization Id.
/// Example: /// Example: hostedForCompanyOrgId
/// Constraints: Minimum length = 0, Maximum length = 36
/// Manufacturer Organization Id.
/// Example: /// Example: manufacturerOrgId
/// Constraints: Minimum length = 0, Maximum length = 36
func (rcv *SeradataNavigation_Full) ManufacturerOrgId() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Manufacturer Organization Id.
/// Example: /// Example: manufacturerOrgId
/// Constraints: Minimum length = 0, Maximum length = 36
/// Navigation payload type, e.g. WAAS, GAGAN, etc.
/// Example: /// Example: WAAS
/// Constraints: Minimum length = 0, Maximum length = 100
func (rcv *SeradataNavigation_Full) PayloadType() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Navigation payload type, e.g. WAAS, GAGAN, etc.
/// Example: /// Example: WAAS
/// Constraints: Minimum length = 0, Maximum length = 100
/// Modes of operation.
/// Example: /// Example: Military
/// Constraints: Minimum length = 0, Maximum length = 100
func (rcv *SeradataNavigation_Full) Modes() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(18))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Modes of operation.
/// Example: /// Example: Military
/// Constraints: Minimum length = 0, Maximum length = 100
/// Frequency for this payload.
/// Example: /// Example: 1234
/// Constraints: Minimum length = 0, Maximum length = 100
func (rcv *SeradataNavigation_Full) ModeFrequency() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(20))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Frequency for this payload.
/// Example: /// Example: 1234
/// Constraints: Minimum length = 0, Maximum length = 100
/// Location accuracy in meters.
/// Example: /// Example: 1.23
/// Constraints: No constraints specified.
func (rcv *SeradataNavigation_Full) LocationAccuracy() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(22))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Location accuracy in meters.
/// Example: /// Example: 1.23
/// Constraints: No constraints specified.
func (rcv *SeradataNavigation_Full) MutateLocationAccuracy(n float64) bool {
	return rcv._tab.MutateFloat64Slot(22, n)
}

/// Seradata ID of the spacecraft (SeradataSpacecraftDetails ID).
/// Example: /// Example: partnerSpacecraftId
/// Constraints: Minimum length = 0, Maximum length = 36
func (rcv *SeradataNavigation_Full) PartnerSpacecraftId() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(24))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Seradata ID of the spacecraft (SeradataSpacecraftDetails ID).
/// Example: /// Example: partnerSpacecraftId
/// Constraints: Minimum length = 0, Maximum length = 36
/// Area of coverage, e.g. Worldwide, India, etc.
/// Example: /// Example: Worldwide
/// Constraints: Minimum length = 0, Maximum length = 50
func (rcv *SeradataNavigation_Full) AreaCoverage() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(26))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Area of coverage, e.g. Worldwide, India, etc.
/// Example: /// Example: Worldwide
/// Constraints: Minimum length = 0, Maximum length = 50
/// Payload notes.
/// Example: /// Example: Sample Notes
/// Constraints: Minimum length = 0, Maximum length = 2147483647
func (rcv *SeradataNavigation_Full) Notes() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(28))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Payload notes.
/// Example: /// Example: Sample Notes
/// Constraints: Minimum length = 0, Maximum length = 2147483647
/// Sensor name from Seradata, e.g. WAAS GEO-5, etc.
/// Example: /// Example: WAAS GEO-5
/// Constraints: Minimum length = 0, Maximum length = 50
func (rcv *SeradataNavigation_Full) Name() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(30))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Sensor name from Seradata, e.g. WAAS GEO-5, etc.
/// Example: /// Example: WAAS GEO-5
/// Constraints: Minimum length = 0, Maximum length = 50
/// Type of clock, e.g. Rubidium, Hydrogen Maser, etc.
/// Example: /// Example: Rubidium
/// Constraints: Minimum length = 0, Maximum length = 20
func (rcv *SeradataNavigation_Full) ClockType() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(32))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Type of clock, e.g. Rubidium, Hydrogen Maser, etc.
/// Example: /// Example: Rubidium
/// Constraints: Minimum length = 0, Maximum length = 20
/// Time the row was created in the database, auto-populated by the system.
/// Example: /// Example: 2018-01-01T16:00:00.123Z
/// Constraints: No constraints specified.
func (rcv *SeradataNavigation_Full) CreatedAt() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(34))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Time the row was created in the database, auto-populated by the system.
/// Example: /// Example: 2018-01-01T16:00:00.123Z
/// Constraints: No constraints specified.
/// Application user who created the row in the database, auto-populated by the system.
/// Example: /// Example: some.user
/// Constraints: Minimum length = 1, Maximum length = 64
func (rcv *SeradataNavigation_Full) CreatedBy() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(36))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Application user who created the row in the database, auto-populated by the system.
/// Example: /// Example: some.user
/// Constraints: Minimum length = 1, Maximum length = 64
/// Time the row was last updated in the database, auto-populated by the system.
/// Example: /// Example: 2018-01-01T16:00:00.123Z
/// Constraints: No constraints specified.
func (rcv *SeradataNavigation_Full) UpdatedAt() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(38))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Time the row was last updated in the database, auto-populated by the system.
/// Example: /// Example: 2018-01-01T16:00:00.123Z
/// Constraints: No constraints specified.
/// Application user who updated the row in the database, auto-populated by the system.
/// Example: /// Example: some.user
/// Constraints: Minimum length = 1, Maximum length = 64
func (rcv *SeradataNavigation_Full) UpdatedBy() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(40))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Application user who updated the row in the database, auto-populated by the system.
/// Example: /// Example: some.user
/// Constraints: Minimum length = 1, Maximum length = 64
/// Source of the data.
/// Example: /// Example: Bluestaq
/// Constraints: Minimum length = 1, Maximum length = 64
func (rcv *SeradataNavigation_Full) Source() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(42))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Source of the data.
/// Example: /// Example: Bluestaq
/// Constraints: Minimum length = 1, Maximum length = 64
/// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
/// Example: /// Example: THIRD_PARTY_DATASOURCE
/// Constraints: Minimum length = 0, Maximum length = 64
func (rcv *SeradataNavigation_Full) Origin() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(44))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
/// Example: /// Example: THIRD_PARTY_DATASOURCE
/// Constraints: Minimum length = 0, Maximum length = 64
/// The originating source network on which this record was created, auto-populated by the system.
/// Example: /// Example: ORIG
/// Constraints: Minimum length = 1, Maximum length = 32
func (rcv *SeradataNavigation_Full) OrigNetwork() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(46))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The originating source network on which this record was created, auto-populated by the system.
/// Example: /// Example: ORIG
/// Constraints: Minimum length = 1, Maximum length = 32
/// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
/// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
/// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
/// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
/// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
/// Example: /// Example: TEST
/// Constraints: Minimum length = 1, Maximum length = 32
func (rcv *SeradataNavigation_Full) DataMode() SeradataNavigation_Full_dataMode_Enum {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(48))
	if o != 0 {
		return SeradataNavigation_Full_dataMode_Enum(rcv._tab.GetInt8(o + rcv._tab.Pos))
	}
	return 0
}

/// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
/// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
/// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
/// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
/// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
/// Example: /// Example: TEST
/// Constraints: Minimum length = 1, Maximum length = 32
func (rcv *SeradataNavigation_Full) MutateDataMode(n SeradataNavigation_Full_dataMode_Enum) bool {
	return rcv._tab.MutateInt8Slot(48, int8(n))
}

func SeradataNavigation_FullStart(builder *flatbuffers.Builder) {
	builder.StartObject(23)
}
func SeradataNavigation_FullAddId(builder *flatbuffers.Builder, id flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(id), 0)
}
func SeradataNavigation_FullAddClassificationMarking(builder *flatbuffers.Builder, classificationMarking flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(classificationMarking), 0)
}
func SeradataNavigation_FullAddIdNavigation(builder *flatbuffers.Builder, idNavigation flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(idNavigation), 0)
}
func SeradataNavigation_FullAddSpacecraftId(builder *flatbuffers.Builder, spacecraftId flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(3, flatbuffers.UOffsetT(spacecraftId), 0)
}
func SeradataNavigation_FullAddHostedForCompanyOrgId(builder *flatbuffers.Builder, hostedForCompanyOrgId flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(4, flatbuffers.UOffsetT(hostedForCompanyOrgId), 0)
}
func SeradataNavigation_FullAddManufacturerOrgId(builder *flatbuffers.Builder, manufacturerOrgId flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(5, flatbuffers.UOffsetT(manufacturerOrgId), 0)
}
func SeradataNavigation_FullAddPayloadType(builder *flatbuffers.Builder, payloadType flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(6, flatbuffers.UOffsetT(payloadType), 0)
}
func SeradataNavigation_FullAddModes(builder *flatbuffers.Builder, modes flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(7, flatbuffers.UOffsetT(modes), 0)
}
func SeradataNavigation_FullAddModeFrequency(builder *flatbuffers.Builder, modeFrequency flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(8, flatbuffers.UOffsetT(modeFrequency), 0)
}
func SeradataNavigation_FullAddLocationAccuracy(builder *flatbuffers.Builder, locationAccuracy float64) {
	builder.PrependFloat64Slot(9, locationAccuracy, 0.0)
}
func SeradataNavigation_FullAddPartnerSpacecraftId(builder *flatbuffers.Builder, partnerSpacecraftId flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(10, flatbuffers.UOffsetT(partnerSpacecraftId), 0)
}
func SeradataNavigation_FullAddAreaCoverage(builder *flatbuffers.Builder, areaCoverage flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(11, flatbuffers.UOffsetT(areaCoverage), 0)
}
func SeradataNavigation_FullAddNotes(builder *flatbuffers.Builder, notes flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(12, flatbuffers.UOffsetT(notes), 0)
}
func SeradataNavigation_FullAddName(builder *flatbuffers.Builder, name flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(13, flatbuffers.UOffsetT(name), 0)
}
func SeradataNavigation_FullAddClockType(builder *flatbuffers.Builder, clockType flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(14, flatbuffers.UOffsetT(clockType), 0)
}
func SeradataNavigation_FullAddCreatedAt(builder *flatbuffers.Builder, createdAt flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(15, flatbuffers.UOffsetT(createdAt), 0)
}
func SeradataNavigation_FullAddCreatedBy(builder *flatbuffers.Builder, createdBy flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(16, flatbuffers.UOffsetT(createdBy), 0)
}
func SeradataNavigation_FullAddUpdatedAt(builder *flatbuffers.Builder, updatedAt flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(17, flatbuffers.UOffsetT(updatedAt), 0)
}
func SeradataNavigation_FullAddUpdatedBy(builder *flatbuffers.Builder, updatedBy flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(18, flatbuffers.UOffsetT(updatedBy), 0)
}
func SeradataNavigation_FullAddSource(builder *flatbuffers.Builder, source flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(19, flatbuffers.UOffsetT(source), 0)
}
func SeradataNavigation_FullAddOrigin(builder *flatbuffers.Builder, origin flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(20, flatbuffers.UOffsetT(origin), 0)
}
func SeradataNavigation_FullAddOrigNetwork(builder *flatbuffers.Builder, origNetwork flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(21, flatbuffers.UOffsetT(origNetwork), 0)
}
func SeradataNavigation_FullAddDataMode(builder *flatbuffers.Builder, dataMode SeradataNavigation_Full_dataMode_Enum) {
	builder.PrependInt8Slot(22, int8(dataMode), 0)
}
func SeradataNavigation_FullEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
