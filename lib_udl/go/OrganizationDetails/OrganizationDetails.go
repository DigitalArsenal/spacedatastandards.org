// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package OrganizationDetails

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

/// /// Model representation of additional detailed organization data as collected by a particular source.
type OrganizationDetails struct {
	_tab flatbuffers.Table
}

const OrganizationDetailsIdentifier = "ORGA"

func GetRootAsOrganizationDetails(buf []byte, offset flatbuffers.UOffsetT) *OrganizationDetails {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &OrganizationDetails{}
	x.Init(buf, n+offset)
	return x
}

func FinishOrganizationDetailsBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	identifierBytes := []byte(OrganizationDetailsIdentifier)
	builder.FinishWithFileIdentifier(offset, identifierBytes)
}

func OrganizationDetailsBufferHasIdentifier(buf []byte) bool {
	return flatbuffers.BufferHasIdentifier(buf, OrganizationDetailsIdentifier)
}

func GetSizePrefixedRootAsOrganizationDetails(buf []byte, offset flatbuffers.UOffsetT) *OrganizationDetails {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &OrganizationDetails{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedOrganizationDetailsBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	identifierBytes := []byte(OrganizationDetailsIdentifier)
	builder.FinishSizePrefixedWithFileIdentifier(offset, identifierBytes)
}

func SizePrefixedOrganizationDetailsBufferHasIdentifier(buf []byte) bool {
	return flatbuffers.SizePrefixedBufferHasIdentifier(buf, OrganizationDetailsIdentifier)
}

func (rcv *OrganizationDetails) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *OrganizationDetails) Table() flatbuffers.Table {
	return rcv._tab
}

/// Unique identifier of the record, auto-generated by the system.
/// Example: /// Example: ORGANIZATIONDETAILS-ID
/// Constraints: Minimum length = 1, Maximum length = 36
func (rcv *OrganizationDetails) Id() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Unique identifier of the record, auto-generated by the system.
/// Example: /// Example: ORGANIZATIONDETAILS-ID
/// Constraints: Minimum length = 1, Maximum length = 36
/// Unique identifier of the parent organization.
/// Example: /// Example: ORGANIZATION-ID
/// Constraints: Minimum length = 1, Maximum length = 36
func (rcv *OrganizationDetails) IdOrganization() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Unique identifier of the parent organization.
/// Example: /// Example: ORGANIZATION-ID
/// Constraints: Minimum length = 1, Maximum length = 36
/// Classification marking of the data in IC/CAPCO Portion-marked format.
/// Example: /// Example: U
/// Constraints: Minimum length = 1, Maximum length = 128
func (rcv *OrganizationDetails) ClassificationMarking() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Classification marking of the data in IC/CAPCO Portion-marked format.
/// Example: /// Example: U
/// Constraints: Minimum length = 1, Maximum length = 128
/// Organization details name.
/// Example: /// Example: some.user
/// Constraints: Minimum length = 1, Maximum length = 128
func (rcv *OrganizationDetails) Name() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Organization details name.
/// Example: /// Example: some.user
/// Constraints: Minimum length = 1, Maximum length = 128
/// Listed contact email address for the organization.
/// Example: /// Example: some_organization@organization.com
/// Constraints: Minimum length = 0, Maximum length = 320
func (rcv *OrganizationDetails) Email() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Listed contact email address for the organization.
/// Example: /// Example: some_organization@organization.com
/// Constraints: Minimum length = 0, Maximum length = 320
/// Street number of the organization.
/// Example: /// Example: 123 Main Street
/// Constraints: Minimum length = 0, Maximum length = 120
func (rcv *OrganizationDetails) Address1() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Street number of the organization.
/// Example: /// Example: 123 Main Street
/// Constraints: Minimum length = 0, Maximum length = 120
/// Field for additional organization address information such as PO Box and unit number.
/// Example: /// Example: Apt 4B
/// Constraints: Minimum length = 0, Maximum length = 120
func (rcv *OrganizationDetails) Address2() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Field for additional organization address information such as PO Box and unit number.
/// Example: /// Example: Apt 4B
/// Constraints: Minimum length = 0, Maximum length = 120
/// Contains the third line of address information for an organization.
/// Example: /// Example: Colorado Springs CO, 80903
/// Constraints: Minimum length = 0, Maximum length = 120
func (rcv *OrganizationDetails) Address3() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(18))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Contains the third line of address information for an organization.
/// Example: /// Example: Colorado Springs CO, 80903
/// Constraints: Minimum length = 0, Maximum length = 120
/// Administrative boundaries of the first sub-national level. Level 1 is simply the largest demarcation under whatever demarcation criteria has been determined by the governing body. For example, this may be a state or province.
/// Example: /// Example: Colorado
/// Constraints: Minimum length = 0, Maximum length = 120
func (rcv *OrganizationDetails) GeoAdminLevel1() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(20))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Administrative boundaries of the first sub-national level. Level 1 is simply the largest demarcation under whatever demarcation criteria has been determined by the governing body. For example, this may be a state or province.
/// Example: /// Example: Colorado
/// Constraints: Minimum length = 0, Maximum length = 120
/// Administrative boundaries of the second sub-national level. Level 2 is simply the second largest demarcation under whatever demarcation criteria has been determined by the governing body. For example, this may be a county or district.
/// Example: /// Example: El Paso County
/// Constraints: Minimum length = 0, Maximum length = 120
func (rcv *OrganizationDetails) GeoAdminLevel2() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(22))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Administrative boundaries of the second sub-national level. Level 2 is simply the second largest demarcation under whatever demarcation criteria has been determined by the governing body. For example, this may be a county or district.
/// Example: /// Example: El Paso County
/// Constraints: Minimum length = 0, Maximum length = 120
/// Administrative boundaries of the third sub-national level. Level 3 is simply the third largest demarcation under whatever demarcation criteria has been determined by the governing body. For example, this may be a city or township.
/// Example: /// Example: Colorado Springs
/// Constraints: Minimum length = 0, Maximum length = 120
func (rcv *OrganizationDetails) GeoAdminLevel3() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(24))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Administrative boundaries of the third sub-national level. Level 3 is simply the third largest demarcation under whatever demarcation criteria has been determined by the governing body. For example, this may be a city or township.
/// Example: /// Example: Colorado Springs
/// Constraints: Minimum length = 0, Maximum length = 120
/// A postal code, such as PIN or ZIP Code, is a series of letters or digits or both included in the postal address of the organization.
/// Example: /// Example: 80903
/// Constraints: Minimum length = 0, Maximum length = 32
func (rcv *OrganizationDetails) PostalCode() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(26))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// A postal code, such as PIN or ZIP Code, is a series of letters or digits or both included in the postal address of the organization.
/// Example: /// Example: 80903
/// Constraints: Minimum length = 0, Maximum length = 32
/// Organization description.
/// Example: /// Example: Example description
/// Constraints: Minimum length = 0, Maximum length = 2147483647
func (rcv *OrganizationDetails) Description() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(28))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Organization description.
/// Example: /// Example: Example description
/// Constraints: Minimum length = 0, Maximum length = 2147483647
/// Former organization ID (if this organization previously existed as another organization).
/// Example: /// Example: FORMERORG-ID
/// Constraints: Minimum length = 0, Maximum length = 36
func (rcv *OrganizationDetails) FormerOrgId() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(30))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Former organization ID (if this organization previously existed as another organization).
/// Example: /// Example: FORMERORG-ID
/// Constraints: Minimum length = 0, Maximum length = 36
/// Parent organization ID of this organization if it is a child organization.
/// Example: /// Example: PARENTORG-ID
/// Constraints: Minimum length = 0, Maximum length = 36
func (rcv *OrganizationDetails) ParentOrgId() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(32))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Parent organization ID of this organization if it is a child organization.
/// Example: /// Example: PARENTORG-ID
/// Constraints: Minimum length = 0, Maximum length = 36
/// For organizations of type CORPORATION, the effective financial year end date for revenue, EBITDA, and profit values.
/// Example: /// Example: 2021-01-01T01:01:01.123Z
/// Constraints: No constraints specified.
func (rcv *OrganizationDetails) FinancialYearEndDate() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(34))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// For organizations of type CORPORATION, the effective financial year end date for revenue, EBITDA, and profit values.
/// Example: /// Example: 2021-01-01T01:01:01.123Z
/// Constraints: No constraints specified.
/// For organizations of type CORPORATION, total annual revenue as of financialYearEndDate in US Dollars.
/// Example: /// Example: 123.4
/// Constraints: No constraints specified.
func (rcv *OrganizationDetails) Revenue() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(36))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// For organizations of type CORPORATION, total annual revenue as of financialYearEndDate in US Dollars.
/// Example: /// Example: 123.4
/// Constraints: No constraints specified.
func (rcv *OrganizationDetails) MutateRevenue(n float64) bool {
	return rcv._tab.MutateFloat64Slot(36, n)
}

/// For organizations of type CORPORATION, total annual profit as of financialYearEndDate in US Dollars.
/// Example: /// Example: 123.4
/// Constraints: No constraints specified.
func (rcv *OrganizationDetails) Profit() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(38))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// For organizations of type CORPORATION, total annual profit as of financialYearEndDate in US Dollars.
/// Example: /// Example: 123.4
/// Constraints: No constraints specified.
func (rcv *OrganizationDetails) MutateProfit(n float64) bool {
	return rcv._tab.MutateFloat64Slot(38, n)
}

/// For organizations of type CORPORATION, the company EBITDA value as of financialYearEndDate in US Dollars.
/// Example: /// Example: 123.4
/// Constraints: No constraints specified.
func (rcv *OrganizationDetails) Ebitda() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(40))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// For organizations of type CORPORATION, the company EBITDA value as of financialYearEndDate in US Dollars.
/// Example: /// Example: 123.4
/// Constraints: No constraints specified.
func (rcv *OrganizationDetails) MutateEbitda(n float64) bool {
	return rcv._tab.MutateFloat64Slot(40, n)
}

/// Total number of FTEs in this organization.
/// Example: /// Example: 123
/// Constraints: No constraints specified.
func (rcv *OrganizationDetails) Ftes() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(42))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

/// Total number of FTEs in this organization.
/// Example: /// Example: 123
/// Constraints: No constraints specified.
func (rcv *OrganizationDetails) MutateFtes(n int32) bool {
	return rcv._tab.MutateInt32Slot(42, n)
}

/// Designated broker for this organization.
/// Example: /// Example: some.user
/// Constraints: Minimum length = 0, Maximum length = 128
func (rcv *OrganizationDetails) Broker() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(44))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Designated broker for this organization.
/// Example: /// Example: some.user
/// Constraints: Minimum length = 0, Maximum length = 128
/// For organizations of type CORPORATION, the name of the Chief Executive Officer.
/// Example: /// Example: some.user
/// Constraints: Minimum length = 0, Maximum length = 128
func (rcv *OrganizationDetails) Ceo() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(46))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// For organizations of type CORPORATION, the name of the Chief Executive Officer.
/// Example: /// Example: some.user
/// Constraints: Minimum length = 0, Maximum length = 128
/// For organizations of type CORPORATION, the name of the Chief Financial Officer.
/// Example: /// Example: some.user
/// Constraints: Minimum length = 0, Maximum length = 128
func (rcv *OrganizationDetails) Cfo() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(48))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// For organizations of type CORPORATION, the name of the Chief Financial Officer.
/// Example: /// Example: some.user
/// Constraints: Minimum length = 0, Maximum length = 128
/// For organizations of type CORPORATION, the name of the Chief Technology Officer.
/// Example: /// Example: some.user
/// Constraints: Minimum length = 0, Maximum length = 128
func (rcv *OrganizationDetails) Cto() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(50))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// For organizations of type CORPORATION, the name of the Chief Technology Officer.
/// Example: /// Example: some.user
/// Constraints: Minimum length = 0, Maximum length = 128
/// The name of the risk manager for the organization.
/// Example: /// Example: some.user
/// Constraints: Minimum length = 0, Maximum length = 128
func (rcv *OrganizationDetails) RiskManager() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(52))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The name of the risk manager for the organization.
/// Example: /// Example: some.user
/// Constraints: Minimum length = 0, Maximum length = 128
/// Mass ranking for this organization.
/// Example: /// Example: 123
/// Constraints: No constraints specified.
func (rcv *OrganizationDetails) MassRanking() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(54))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

/// Mass ranking for this organization.
/// Example: /// Example: 123
/// Constraints: No constraints specified.
func (rcv *OrganizationDetails) MutateMassRanking(n int32) bool {
	return rcv._tab.MutateInt32Slot(54, n)
}

/// Revenue ranking for this organization.
/// Example: /// Example: 123
/// Constraints: No constraints specified.
func (rcv *OrganizationDetails) RevenueRanking() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(56))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

/// Revenue ranking for this organization.
/// Example: /// Example: 123
/// Constraints: No constraints specified.
func (rcv *OrganizationDetails) MutateRevenueRanking(n int32) bool {
	return rcv._tab.MutateInt32Slot(56, n)
}

/// For organizations of type CORPORATION, notes on company financials.
/// Example: /// Example: Example notes
/// Constraints: Minimum length = 0, Maximum length = 2147483647
func (rcv *OrganizationDetails) FinancialNotes() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(58))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// For organizations of type CORPORATION, notes on company financials.
/// Example: /// Example: Example notes
/// Constraints: Minimum length = 0, Maximum length = 2147483647
/// Notes on the services provided by the organization.
/// Example: /// Example: Example notes
/// Constraints: Minimum length = 0, Maximum length = 2147483647
func (rcv *OrganizationDetails) ServicesNotes() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(60))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Notes on the services provided by the organization.
/// Example: /// Example: Example notes
/// Constraints: Minimum length = 0, Maximum length = 2147483647
/// Satellite fleet planning notes for this organization.
/// Example: /// Example: Example notes
/// Constraints: Minimum length = 0, Maximum length = 2147483647
func (rcv *OrganizationDetails) FleetPlanNotes() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(62))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Satellite fleet planning notes for this organization.
/// Example: /// Example: Example notes
/// Constraints: Minimum length = 0, Maximum length = 2147483647
/// Source of the data.
/// Example: /// Example: some.user
/// Constraints: Minimum length = 1, Maximum length = 64
func (rcv *OrganizationDetails) Source() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(64))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Source of the data.
/// Example: /// Example: some.user
/// Constraints: Minimum length = 1, Maximum length = 64
/// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
/// Example: /// Example: some.user
/// Constraints: Minimum length = 0, Maximum length = 64
func (rcv *OrganizationDetails) Origin() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(66))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
/// Example: /// Example: some.user
/// Constraints: Minimum length = 0, Maximum length = 64
/// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
/// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
/// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
/// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
/// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
/// Example: /// Example: TEST
/// Constraints: Minimum length = 1, Maximum length = 32
func (rcv *OrganizationDetails) DataMode() OrganizationDetails_dataMode_Enum {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(68))
	if o != 0 {
		return OrganizationDetails_dataMode_Enum(rcv._tab.GetInt8(o + rcv._tab.Pos))
	}
	return 0
}

/// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
/// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
/// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
/// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
/// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
/// Example: /// Example: TEST
/// Constraints: Minimum length = 1, Maximum length = 32
func (rcv *OrganizationDetails) MutateDataMode(n OrganizationDetails_dataMode_Enum) bool {
	return rcv._tab.MutateInt8Slot(68, int8(n))
}

/// Optional array of provider/source specific tags for this data, where each element is no longer than 32 characters, used for implementing data owner conditional access controls to restrict access to the data. Should be left null by data providers unless conditional access controls are coordinated with the UDL team.
/// Example: /// Example: ['PROVIDER_TAG1', 'PROVIDER_TAG2']
/// Constraints: No constraints specified.
func (rcv *OrganizationDetails) Tags(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(70))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *OrganizationDetails) TagsLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(70))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

/// Optional array of provider/source specific tags for this data, where each element is no longer than 32 characters, used for implementing data owner conditional access controls to restrict access to the data. Should be left null by data providers unless conditional access controls are coordinated with the UDL team.
/// Example: /// Example: ['PROVIDER_TAG1', 'PROVIDER_TAG2']
/// Constraints: No constraints specified.
/// Time the row was created in the database, auto-populated by the system.
/// Example: /// Example: 2018-01-01T16:00:00.123Z
/// Constraints: No constraints specified.
func (rcv *OrganizationDetails) CreatedAt() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(72))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Time the row was created in the database, auto-populated by the system.
/// Example: /// Example: 2018-01-01T16:00:00.123Z
/// Constraints: No constraints specified.
/// Application user who created the row in the database, auto-populated by the system.
/// Example: /// Example: some.user
/// Constraints: Minimum length = 1, Maximum length = 64
func (rcv *OrganizationDetails) CreatedBy() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(74))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Application user who created the row in the database, auto-populated by the system.
/// Example: /// Example: some.user
/// Constraints: Minimum length = 1, Maximum length = 64
/// Time the row was last updated in the database, auto-populated by the system.
/// Example: /// Example: 2018-01-01T16:00:00.123Z
/// Constraints: No constraints specified.
func (rcv *OrganizationDetails) UpdatedAt() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(76))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Time the row was last updated in the database, auto-populated by the system.
/// Example: /// Example: 2018-01-01T16:00:00.123Z
/// Constraints: No constraints specified.
/// Application user who updated the row in the database, auto-populated by the system.
/// Example: /// Example: some.user
/// Constraints: Minimum length = 0, Maximum length = 64
func (rcv *OrganizationDetails) UpdatedBy() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(78))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Application user who updated the row in the database, auto-populated by the system.
/// Example: /// Example: some.user
/// Constraints: Minimum length = 0, Maximum length = 64
/// The originating source network on which this record was created, auto-populated by the system.
/// Example: /// Example: OPS1
/// Constraints: Minimum length = 1, Maximum length = 32
func (rcv *OrganizationDetails) OrigNetwork() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(80))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The originating source network on which this record was created, auto-populated by the system.
/// Example: /// Example: OPS1
/// Constraints: Minimum length = 1, Maximum length = 32
func OrganizationDetailsStart(builder *flatbuffers.Builder) {
	builder.StartObject(39)
}
func OrganizationDetailsAddId(builder *flatbuffers.Builder, id flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(id), 0)
}
func OrganizationDetailsAddIdOrganization(builder *flatbuffers.Builder, idOrganization flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(idOrganization), 0)
}
func OrganizationDetailsAddClassificationMarking(builder *flatbuffers.Builder, classificationMarking flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(classificationMarking), 0)
}
func OrganizationDetailsAddName(builder *flatbuffers.Builder, name flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(3, flatbuffers.UOffsetT(name), 0)
}
func OrganizationDetailsAddEmail(builder *flatbuffers.Builder, email flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(4, flatbuffers.UOffsetT(email), 0)
}
func OrganizationDetailsAddAddress1(builder *flatbuffers.Builder, address1 flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(5, flatbuffers.UOffsetT(address1), 0)
}
func OrganizationDetailsAddAddress2(builder *flatbuffers.Builder, address2 flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(6, flatbuffers.UOffsetT(address2), 0)
}
func OrganizationDetailsAddAddress3(builder *flatbuffers.Builder, address3 flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(7, flatbuffers.UOffsetT(address3), 0)
}
func OrganizationDetailsAddGeoAdminLevel1(builder *flatbuffers.Builder, geoAdminLevel1 flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(8, flatbuffers.UOffsetT(geoAdminLevel1), 0)
}
func OrganizationDetailsAddGeoAdminLevel2(builder *flatbuffers.Builder, geoAdminLevel2 flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(9, flatbuffers.UOffsetT(geoAdminLevel2), 0)
}
func OrganizationDetailsAddGeoAdminLevel3(builder *flatbuffers.Builder, geoAdminLevel3 flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(10, flatbuffers.UOffsetT(geoAdminLevel3), 0)
}
func OrganizationDetailsAddPostalCode(builder *flatbuffers.Builder, postalCode flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(11, flatbuffers.UOffsetT(postalCode), 0)
}
func OrganizationDetailsAddDescription(builder *flatbuffers.Builder, description flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(12, flatbuffers.UOffsetT(description), 0)
}
func OrganizationDetailsAddFormerOrgId(builder *flatbuffers.Builder, formerOrgId flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(13, flatbuffers.UOffsetT(formerOrgId), 0)
}
func OrganizationDetailsAddParentOrgId(builder *flatbuffers.Builder, parentOrgId flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(14, flatbuffers.UOffsetT(parentOrgId), 0)
}
func OrganizationDetailsAddFinancialYearEndDate(builder *flatbuffers.Builder, financialYearEndDate flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(15, flatbuffers.UOffsetT(financialYearEndDate), 0)
}
func OrganizationDetailsAddRevenue(builder *flatbuffers.Builder, revenue float64) {
	builder.PrependFloat64Slot(16, revenue, 0.0)
}
func OrganizationDetailsAddProfit(builder *flatbuffers.Builder, profit float64) {
	builder.PrependFloat64Slot(17, profit, 0.0)
}
func OrganizationDetailsAddEbitda(builder *flatbuffers.Builder, ebitda float64) {
	builder.PrependFloat64Slot(18, ebitda, 0.0)
}
func OrganizationDetailsAddFtes(builder *flatbuffers.Builder, ftes int32) {
	builder.PrependInt32Slot(19, ftes, 0)
}
func OrganizationDetailsAddBroker(builder *flatbuffers.Builder, broker flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(20, flatbuffers.UOffsetT(broker), 0)
}
func OrganizationDetailsAddCeo(builder *flatbuffers.Builder, ceo flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(21, flatbuffers.UOffsetT(ceo), 0)
}
func OrganizationDetailsAddCfo(builder *flatbuffers.Builder, cfo flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(22, flatbuffers.UOffsetT(cfo), 0)
}
func OrganizationDetailsAddCto(builder *flatbuffers.Builder, cto flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(23, flatbuffers.UOffsetT(cto), 0)
}
func OrganizationDetailsAddRiskManager(builder *flatbuffers.Builder, riskManager flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(24, flatbuffers.UOffsetT(riskManager), 0)
}
func OrganizationDetailsAddMassRanking(builder *flatbuffers.Builder, massRanking int32) {
	builder.PrependInt32Slot(25, massRanking, 0)
}
func OrganizationDetailsAddRevenueRanking(builder *flatbuffers.Builder, revenueRanking int32) {
	builder.PrependInt32Slot(26, revenueRanking, 0)
}
func OrganizationDetailsAddFinancialNotes(builder *flatbuffers.Builder, financialNotes flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(27, flatbuffers.UOffsetT(financialNotes), 0)
}
func OrganizationDetailsAddServicesNotes(builder *flatbuffers.Builder, servicesNotes flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(28, flatbuffers.UOffsetT(servicesNotes), 0)
}
func OrganizationDetailsAddFleetPlanNotes(builder *flatbuffers.Builder, fleetPlanNotes flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(29, flatbuffers.UOffsetT(fleetPlanNotes), 0)
}
func OrganizationDetailsAddSource(builder *flatbuffers.Builder, source flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(30, flatbuffers.UOffsetT(source), 0)
}
func OrganizationDetailsAddOrigin(builder *flatbuffers.Builder, origin flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(31, flatbuffers.UOffsetT(origin), 0)
}
func OrganizationDetailsAddDataMode(builder *flatbuffers.Builder, dataMode OrganizationDetails_dataMode_Enum) {
	builder.PrependInt8Slot(32, int8(dataMode), 0)
}
func OrganizationDetailsAddTags(builder *flatbuffers.Builder, tags flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(33, flatbuffers.UOffsetT(tags), 0)
}
func OrganizationDetailsStartTagsVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func OrganizationDetailsAddCreatedAt(builder *flatbuffers.Builder, createdAt flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(34, flatbuffers.UOffsetT(createdAt), 0)
}
func OrganizationDetailsAddCreatedBy(builder *flatbuffers.Builder, createdBy flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(35, flatbuffers.UOffsetT(createdBy), 0)
}
func OrganizationDetailsAddUpdatedAt(builder *flatbuffers.Builder, updatedAt flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(36, flatbuffers.UOffsetT(updatedAt), 0)
}
func OrganizationDetailsAddUpdatedBy(builder *flatbuffers.Builder, updatedBy flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(37, flatbuffers.UOffsetT(updatedBy), 0)
}
func OrganizationDetailsAddOrigNetwork(builder *flatbuffers.Builder, origNetwork flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(38, flatbuffers.UOffsetT(origNetwork), 0)
}
func OrganizationDetailsEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
