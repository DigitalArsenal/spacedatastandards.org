// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package SWIR_Abridged

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

/// /// Data representing observed short wave infrared (SWIR) measurements.
type SWIR_Abridged struct {
	_tab flatbuffers.Table
}

const SWIR_AbridgedIdentifier = "SWIR"

func GetRootAsSWIR_Abridged(buf []byte, offset flatbuffers.UOffsetT) *SWIR_Abridged {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &SWIR_Abridged{}
	x.Init(buf, n+offset)
	return x
}

func FinishSWIR_AbridgedBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	identifierBytes := []byte(SWIR_AbridgedIdentifier)
	builder.FinishWithFileIdentifier(offset, identifierBytes)
}

func SWIR_AbridgedBufferHasIdentifier(buf []byte) bool {
	return flatbuffers.BufferHasIdentifier(buf, SWIR_AbridgedIdentifier)
}

func GetSizePrefixedRootAsSWIR_Abridged(buf []byte, offset flatbuffers.UOffsetT) *SWIR_Abridged {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &SWIR_Abridged{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedSWIR_AbridgedBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	identifierBytes := []byte(SWIR_AbridgedIdentifier)
	builder.FinishSizePrefixedWithFileIdentifier(offset, identifierBytes)
}

func SizePrefixedSWIR_AbridgedBufferHasIdentifier(buf []byte) bool {
	return flatbuffers.SizePrefixedBufferHasIdentifier(buf, SWIR_AbridgedIdentifier)
}

func (rcv *SWIR_Abridged) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *SWIR_Abridged) Table() flatbuffers.Table {
	return rcv._tab
}

/// Unique identifier of the record, auto-generated by the system.
/// Example: /// Example: SWIR-ID
/// Constraints: Minimum length = 1, Maximum length = 36
func (rcv *SWIR_Abridged) Id() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Unique identifier of the record, auto-generated by the system.
/// Example: /// Example: SWIR-ID
/// Constraints: Minimum length = 1, Maximum length = 36
/// Classification marking of the data in IC/CAPCO Portion-marked format.
/// Example: /// Example: U
/// Constraints: Minimum length = 1, Maximum length = 128
func (rcv *SWIR_Abridged) ClassificationMarking() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Classification marking of the data in IC/CAPCO Portion-marked format.
/// Example: /// Example: U
/// Constraints: Minimum length = 1, Maximum length = 128
/// Unique identifier of the target on-orbit object.
/// Example: /// Example: 45234
/// Constraints: Minimum length = 0, Maximum length = 36
func (rcv *SWIR_Abridged) IdOnOrbit() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Unique identifier of the target on-orbit object.
/// Example: /// Example: 45234
/// Constraints: Minimum length = 0, Maximum length = 36
/// Data timestamp in ISO8601 UTC format.
/// Example: /// Example: 2021-01-01T01:01:01.123456Z
/// Constraints: No constraints specified.
func (rcv *SWIR_Abridged) Ts() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Data timestamp in ISO8601 UTC format.
/// Example: /// Example: 2021-01-01T01:01:01.123456Z
/// Constraints: No constraints specified.
/// The angle, in degrees, between the target-to-observer vector and the target-to-sun vector.
/// Example: /// Example: 1.23
/// Constraints: No constraints specified.
func (rcv *SWIR_Abridged) SolarPhaseAngle() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// The angle, in degrees, between the target-to-observer vector and the target-to-sun vector.
/// Example: /// Example: 1.23
/// Constraints: No constraints specified.
func (rcv *SWIR_Abridged) MutateSolarPhaseAngle(n float64) bool {
	return rcv._tab.MutateFloat64Slot(12, n)
}

/// Spacecraft WGS84 latitude, in degrees at obTime. -90 to 90 degrees (negative values south of equator).
/// Example: /// Example: 70.55208
/// Constraints: No constraints specified.
func (rcv *SWIR_Abridged) Lat() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Spacecraft WGS84 latitude, in degrees at obTime. -90 to 90 degrees (negative values south of equator).
/// Example: /// Example: 70.55208
/// Constraints: No constraints specified.
func (rcv *SWIR_Abridged) MutateLat(n float64) bool {
	return rcv._tab.MutateFloat64Slot(14, n)
}

/// Spacecraft WGS84 longitude at ob time, in degrees. -180 to 180 degrees (negative values west of Prime Meridian).
/// Example: /// Example: 81.18191
/// Constraints: No constraints specified.
func (rcv *SWIR_Abridged) Lon() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Spacecraft WGS84 longitude at ob time, in degrees. -180 to 180 degrees (negative values west of Prime Meridian).
/// Example: /// Example: 81.18191
/// Constraints: No constraints specified.
func (rcv *SWIR_Abridged) MutateLon(n float64) bool {
	return rcv._tab.MutateFloat64Slot(16, n)
}

/// Location/name of the observing sensor.
/// Example: /// Example: AeroTel
/// Constraints: Minimum length = 0, Maximum length = 64
func (rcv *SWIR_Abridged) LocationName() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(18))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Location/name of the observing sensor.
/// Example: /// Example: AeroTel
/// Constraints: Minimum length = 0, Maximum length = 64
/// User comments concerning sensor or data limitations.
/// Example: /// Example: Example Comments
/// Constraints: Minimum length = 0, Maximum length = 64
func (rcv *SWIR_Abridged) BadWave() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(20))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// User comments concerning sensor or data limitations.
/// Example: /// Example: Example Comments
/// Constraints: Minimum length = 0, Maximum length = 64
/// Original object ID or Catalog Number provided by source.
/// Example: /// Example: WildBlue-1
/// Constraints: Minimum length = 0, Maximum length = 36
func (rcv *SWIR_Abridged) OrigObjectId() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(22))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Original object ID or Catalog Number provided by source.
/// Example: /// Example: WildBlue-1
/// Constraints: Minimum length = 0, Maximum length = 36
/// Source of the data.
/// Example: /// Example: Bluestaq
/// Constraints: Minimum length = 1, Maximum length = 64
func (rcv *SWIR_Abridged) Source() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(24))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Source of the data.
/// Example: /// Example: Bluestaq
/// Constraints: Minimum length = 1, Maximum length = 64
/// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
/// Example: /// Example: THIRD_PARTY_DATASOURCE
/// Constraints: Minimum length = 0, Maximum length = 64
func (rcv *SWIR_Abridged) Origin() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(26))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
/// Example: /// Example: THIRD_PARTY_DATASOURCE
/// Constraints: Minimum length = 0, Maximum length = 64
/// Satellite/catalog number of the target on-orbit object.
/// Example: /// Example: 25544
/// Constraints: No constraints specified.
func (rcv *SWIR_Abridged) SatNo() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(28))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

/// Satellite/catalog number of the target on-orbit object.
/// Example: /// Example: 25544
/// Constraints: No constraints specified.
func (rcv *SWIR_Abridged) MutateSatNo(n int32) bool {
	return rcv._tab.MutateInt32Slot(28, n)
}

/// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
/// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
/// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
/// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
/// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
/// Example: /// Example: TEST
/// Constraints: Minimum length = 1, Maximum length = 32
func (rcv *SWIR_Abridged) DataMode() SWIR_Abridged_dataMode_Enum {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(30))
	if o != 0 {
		return SWIR_Abridged_dataMode_Enum(rcv._tab.GetInt8(o + rcv._tab.Pos))
	}
	return 0
}

/// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
/// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
/// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
/// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
/// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
/// Example: /// Example: TEST
/// Constraints: Minimum length = 1, Maximum length = 32
func (rcv *SWIR_Abridged) MutateDataMode(n SWIR_Abridged_dataMode_Enum) bool {
	return rcv._tab.MutateInt8Slot(30, int8(n))
}

/// Time the row was created in the database, auto-populated by the system.
/// Example: /// Example: 2018-01-01T16:00:00.123Z
/// Constraints: No constraints specified.
func (rcv *SWIR_Abridged) CreatedAt() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(32))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Time the row was created in the database, auto-populated by the system.
/// Example: /// Example: 2018-01-01T16:00:00.123Z
/// Constraints: No constraints specified.
/// Application user who created the row in the database, auto-populated by the system.
/// Example: /// Example: some.user
/// Constraints: Minimum length = 1, Maximum length = 64
func (rcv *SWIR_Abridged) CreatedBy() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(34))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Application user who created the row in the database, auto-populated by the system.
/// Example: /// Example: some.user
/// Constraints: Minimum length = 1, Maximum length = 64
/// The originating source network on which this record was created, auto-populated by the system.
/// Example: /// Example: ORIG
/// Constraints: Minimum length = 1, Maximum length = 32
func (rcv *SWIR_Abridged) OrigNetwork() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(36))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The originating source network on which this record was created, auto-populated by the system.
/// Example: /// Example: ORIG
/// Constraints: Minimum length = 1, Maximum length = 32
func SWIR_AbridgedStart(builder *flatbuffers.Builder) {
	builder.StartObject(17)
}
func SWIR_AbridgedAddId(builder *flatbuffers.Builder, id flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(id), 0)
}
func SWIR_AbridgedAddClassificationMarking(builder *flatbuffers.Builder, classificationMarking flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(classificationMarking), 0)
}
func SWIR_AbridgedAddIdOnOrbit(builder *flatbuffers.Builder, idOnOrbit flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(idOnOrbit), 0)
}
func SWIR_AbridgedAddTs(builder *flatbuffers.Builder, ts flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(3, flatbuffers.UOffsetT(ts), 0)
}
func SWIR_AbridgedAddSolarPhaseAngle(builder *flatbuffers.Builder, solarPhaseAngle float64) {
	builder.PrependFloat64Slot(4, solarPhaseAngle, 0.0)
}
func SWIR_AbridgedAddLat(builder *flatbuffers.Builder, lat float64) {
	builder.PrependFloat64Slot(5, lat, 0.0)
}
func SWIR_AbridgedAddLon(builder *flatbuffers.Builder, lon float64) {
	builder.PrependFloat64Slot(6, lon, 0.0)
}
func SWIR_AbridgedAddLocationName(builder *flatbuffers.Builder, locationName flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(7, flatbuffers.UOffsetT(locationName), 0)
}
func SWIR_AbridgedAddBadWave(builder *flatbuffers.Builder, badWave flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(8, flatbuffers.UOffsetT(badWave), 0)
}
func SWIR_AbridgedAddOrigObjectId(builder *flatbuffers.Builder, origObjectId flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(9, flatbuffers.UOffsetT(origObjectId), 0)
}
func SWIR_AbridgedAddSource(builder *flatbuffers.Builder, source flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(10, flatbuffers.UOffsetT(source), 0)
}
func SWIR_AbridgedAddOrigin(builder *flatbuffers.Builder, origin flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(11, flatbuffers.UOffsetT(origin), 0)
}
func SWIR_AbridgedAddSatNo(builder *flatbuffers.Builder, satNo int32) {
	builder.PrependInt32Slot(12, satNo, 0)
}
func SWIR_AbridgedAddDataMode(builder *flatbuffers.Builder, dataMode SWIR_Abridged_dataMode_Enum) {
	builder.PrependInt8Slot(13, int8(dataMode), 0)
}
func SWIR_AbridgedAddCreatedAt(builder *flatbuffers.Builder, createdAt flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(14, flatbuffers.UOffsetT(createdAt), 0)
}
func SWIR_AbridgedAddCreatedBy(builder *flatbuffers.Builder, createdBy flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(15, flatbuffers.UOffsetT(createdBy), 0)
}
func SWIR_AbridgedAddOrigNetwork(builder *flatbuffers.Builder, origNetwork flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(16, flatbuffers.UOffsetT(origNetwork), 0)
}
func SWIR_AbridgedEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
