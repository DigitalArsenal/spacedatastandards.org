// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package WeatherData_Ingest

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

/// /// These services provide for posting and querying Weather Data. Weather Data integrates dynamic data measured by Doppler/CG such as signal power and noise levels, to produce useful weather information.
type WeatherData_Ingest struct {
	_tab flatbuffers.Table
}

const WeatherData_IngestIdentifier = "WEAT"

func GetRootAsWeatherData_Ingest(buf []byte, offset flatbuffers.UOffsetT) *WeatherData_Ingest {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &WeatherData_Ingest{}
	x.Init(buf, n+offset)
	return x
}

func FinishWeatherData_IngestBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	identifierBytes := []byte(WeatherData_IngestIdentifier)
	builder.FinishWithFileIdentifier(offset, identifierBytes)
}

func WeatherData_IngestBufferHasIdentifier(buf []byte) bool {
	return flatbuffers.BufferHasIdentifier(buf, WeatherData_IngestIdentifier)
}

func GetSizePrefixedRootAsWeatherData_Ingest(buf []byte, offset flatbuffers.UOffsetT) *WeatherData_Ingest {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &WeatherData_Ingest{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedWeatherData_IngestBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	identifierBytes := []byte(WeatherData_IngestIdentifier)
	builder.FinishSizePrefixedWithFileIdentifier(offset, identifierBytes)
}

func SizePrefixedWeatherData_IngestBufferHasIdentifier(buf []byte) bool {
	return flatbuffers.SizePrefixedBufferHasIdentifier(buf, WeatherData_IngestIdentifier)
}

func (rcv *WeatherData_Ingest) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *WeatherData_Ingest) Table() flatbuffers.Table {
	return rcv._tab
}

/// Unique identifier of the record, auto-generated by the system.
/// Example: /// Example: WEATHER-DATA-ID
/// Constraints: Minimum length = 1, Maximum length = 36
func (rcv *WeatherData_Ingest) Id() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Unique identifier of the record, auto-generated by the system.
/// Example: /// Example: WEATHER-DATA-ID
/// Constraints: Minimum length = 1, Maximum length = 36
/// Classification marking of the data in IC/CAPCO Portion-marked format.
/// Example: /// Example: U
/// Constraints: Minimum length = 1, Maximum length = 128
func (rcv *WeatherData_Ingest) ClassificationMarking() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Classification marking of the data in IC/CAPCO Portion-marked format.
/// Example: /// Example: U
/// Constraints: Minimum length = 1, Maximum length = 128
/// Unique identifier of the sensor making the weather measurement.
/// Example: /// Example: 0129f577-e04c-441e-65ca-0a04a750bed9
/// Constraints: Minimum length = 0, Maximum length = 36
func (rcv *WeatherData_Ingest) IdSensor() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Unique identifier of the sensor making the weather measurement.
/// Example: /// Example: 0129f577-e04c-441e-65ca-0a04a750bed9
/// Constraints: Minimum length = 0, Maximum length = 36
/// Optional identifier provided by the record source. This may be an internal identifier and not necessarily a valid sensor ID.
/// Example: /// Example: ORIGSENSOR-ID
/// Constraints: Minimum length = 0, Maximum length = 64
func (rcv *WeatherData_Ingest) OrigSensorId() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Optional identifier provided by the record source. This may be an internal identifier and not necessarily a valid sensor ID.
/// Example: /// Example: ORIGSENSOR-ID
/// Constraints: Minimum length = 0, Maximum length = 64
/// Datetime of the weather observation in ISO 8601 UTC datetime format with microsecond precision.
/// Example: /// Example: 2018-01-01T16:00:00.123456Z
/// Constraints: No constraints specified.
func (rcv *WeatherData_Ingest) ObTime() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Datetime of the weather observation in ISO 8601 UTC datetime format with microsecond precision.
/// Example: /// Example: 2018-01-01T16:00:00.123456Z
/// Constraints: No constraints specified.
/// Array of signal power(s) measured by the sensor, in decibels. Users should consult the data provider for information on the signal powers array structure.
/// Example: /// Example: [116.5, 121.6]
/// Constraints: No constraints specified.
func (rcv *WeatherData_Ingest) SigPwrs(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *WeatherData_Ingest) SigPwrsLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

/// Array of signal power(s) measured by the sensor, in decibels. Users should consult the data provider for information on the signal powers array structure.
/// Example: /// Example: [116.5, 121.6]
/// Constraints: No constraints specified.
/// Array of noise level(s) measured by radar, in decibels. Users should consult the data provider for information on the noise levels array structure.
/// Example: /// Example: [58.2, 58.3]
/// Constraints: No constraints specified.
func (rcv *WeatherData_Ingest) NoiseLvls(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *WeatherData_Ingest) NoiseLvlsLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

/// Array of noise level(s) measured by radar, in decibels. Users should consult the data provider for information on the noise levels array structure.
/// Example: /// Example: [58.2, 58.3]
/// Constraints: No constraints specified.
/// Array of width(s) of the distribution in Doppler velocity measured by radar, in meters/second. Spectral width depends on the particle size distribution, the wind shear across the radar beam, and turbulence. Users should consult the data provider for information on the spectral widths array structure.
/// Example: /// Example: [0.3, 0.6]
/// Constraints: No constraints specified.
func (rcv *WeatherData_Ingest) SpecWidths(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(18))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *WeatherData_Ingest) SpecWidthsLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(18))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

/// Array of width(s) of the distribution in Doppler velocity measured by radar, in meters/second. Spectral width depends on the particle size distribution, the wind shear across the radar beam, and turbulence. Users should consult the data provider for information on the spectral widths array structure.
/// Example: /// Example: [0.3, 0.6]
/// Constraints: No constraints specified.
/// Array of average maximum number(s) of consecutive instances in which the same first guess velocity is used in radar data processing to estimate wind speed. Users should consult the data provider for information on the first guess averages array structure.
/// Example: /// Example: [16, 1]
/// Constraints: No constraints specified.
func (rcv *WeatherData_Ingest) FirstGuessAvgs(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(20))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *WeatherData_Ingest) FirstGuessAvgsLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(20))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

/// Array of average maximum number(s) of consecutive instances in which the same first guess velocity is used in radar data processing to estimate wind speed. Users should consult the data provider for information on the first guess averages array structure.
/// Example: /// Example: [16, 1]
/// Constraints: No constraints specified.
/// Quality control flag value, as defined by the data provider.
/// Example: /// Example: 4
/// Constraints: No constraints specified.
func (rcv *WeatherData_Ingest) QcValue() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(22))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

/// Quality control flag value, as defined by the data provider.
/// Example: /// Example: 4
/// Constraints: No constraints specified.
func (rcv *WeatherData_Ingest) MutateQcValue(n int32) bool {
	return rcv._tab.MutateInt32Slot(22, n)
}

/// Datetime the system files were created.
/// Example: /// Example: 2018-01-01T16:00:00.123456Z
/// Constraints: No constraints specified.
func (rcv *WeatherData_Ingest) FileCreation() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(24))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Datetime the system files were created.
/// Example: /// Example: 2018-01-01T16:00:00.123456Z
/// Constraints: No constraints specified.
/// Last altitude with recorded measurements in this record, in meters.
/// Example: /// Example: 19505.1
/// Constraints: No constraints specified.
func (rcv *WeatherData_Ingest) TermAlt() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(26))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Last altitude with recorded measurements in this record, in meters.
/// Example: /// Example: 19505.1
/// Constraints: No constraints specified.
func (rcv *WeatherData_Ingest) MutateTermAlt(n float64) bool {
	return rcv._tab.MutateFloat64Slot(26, n)
}

/// Average transmitted power of the radar, in kilowatts.
/// Example: /// Example: 20.23
/// Constraints: No constraints specified.
func (rcv *WeatherData_Ingest) AvgTxPwr() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(28))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Average transmitted power of the radar, in kilowatts.
/// Example: /// Example: 20.23
/// Constraints: No constraints specified.
func (rcv *WeatherData_Ingest) MutateAvgTxPwr(n float64) bool {
	return rcv._tab.MutateFloat64Slot(28, n)
}

/// Average power of the reflected signal received by the radar, in Watts.
/// Example: /// Example: 714.9
/// Constraints: No constraints specified.
func (rcv *WeatherData_Ingest) AvgRefPwr() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(30))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Average power of the reflected signal received by the radar, in Watts.
/// Example: /// Example: 714.9
/// Constraints: No constraints specified.
func (rcv *WeatherData_Ingest) MutateAvgRefPwr(n float64) bool {
	return rcv._tab.MutateFloat64Slot(30, n)
}

/// Number of sectors within the radar coverage area, each containing a number of antennas.
/// Example: /// Example: 20
/// Constraints: No constraints specified.
func (rcv *WeatherData_Ingest) SectorNum() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(32))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

/// Number of sectors within the radar coverage area, each containing a number of antennas.
/// Example: /// Example: 20
/// Constraints: No constraints specified.
func (rcv *WeatherData_Ingest) MutateSectorNum(n int32) bool {
	return rcv._tab.MutateInt32Slot(32, n)
}

/// Number of antennas across all sectors within the radar coverage area.
/// Example: /// Example: 640
/// Constraints: No constraints specified.
func (rcv *WeatherData_Ingest) NumElements() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(34))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

/// Number of antennas across all sectors within the radar coverage area.
/// Example: /// Example: 640
/// Constraints: No constraints specified.
func (rcv *WeatherData_Ingest) MutateNumElements(n int32) bool {
	return rcv._tab.MutateInt32Slot(34, n)
}

/// Array of the number(s) of radar samples used in time domain averaging for radar data processing. Time domain averaging improves the quality of the measured signal by reducing random noise and enhancing the signal-to-noise ratio. Users should consult the data provider for information on the time domain sample numbers array structure.
/// Example: /// Example: [32, 30]
/// Constraints: No constraints specified.
func (rcv *WeatherData_Ingest) TdAvgSampleNums(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(36))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *WeatherData_Ingest) TdAvgSampleNumsLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(36))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

/// Array of the number(s) of radar samples used in time domain averaging for radar data processing. Time domain averaging improves the quality of the measured signal by reducing random noise and enhancing the signal-to-noise ratio. Users should consult the data provider for information on the time domain sample numbers array structure.
/// Example: /// Example: [32, 30]
/// Constraints: No constraints specified.
/// Checksum value for the data.
/// Example: /// Example: 133
/// Constraints: No constraints specified.
func (rcv *WeatherData_Ingest) Checksum() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(38))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

/// Checksum value for the data.
/// Example: /// Example: 133
/// Constraints: No constraints specified.
func (rcv *WeatherData_Ingest) MutateChecksum(n int32) bool {
	return rcv._tab.MutateInt32Slot(38, n)
}

/// Array of the number(s) of measurements used in coherent integrations used for radar data processing. Users should consult the data provider for information on the coherent integrations array structure.
/// Example: /// Example: [4, 3]
/// Constraints: No constraints specified.
func (rcv *WeatherData_Ingest) CoIntegs(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(40))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *WeatherData_Ingest) CoIntegsLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(40))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

/// Array of the number(s) of measurements used in coherent integrations used for radar data processing. Users should consult the data provider for information on the coherent integrations array structure.
/// Example: /// Example: [4, 3]
/// Constraints: No constraints specified.
/// Array of the number(s) of spectral averages used in radar data processing. Users should consult the data provider for information on the spectral averages array structure.
/// Example: /// Example: [4, 3]
/// Constraints: No constraints specified.
func (rcv *WeatherData_Ingest) SpecAvgs(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(42))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *WeatherData_Ingest) SpecAvgsLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(42))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

/// Array of the number(s) of spectral averages used in radar data processing. Users should consult the data provider for information on the spectral averages array structure.
/// Example: /// Example: [4, 3]
/// Constraints: No constraints specified.
/// Array of the elapsed time(s) from the beginning of one pulse to the beginning of the next pulse for a radar beam, in microseconds. Users should consult the data provider for information on the interpulse periods array structure.
/// Example: /// Example: [1000.3, 1000.2]
/// Constraints: No constraints specified.
func (rcv *WeatherData_Ingest) InterpulsePeriods(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(44))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *WeatherData_Ingest) InterpulsePeriodsLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(44))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

/// Array of the elapsed time(s) from the beginning of one pulse to the beginning of the next pulse for a radar beam, in microseconds. Users should consult the data provider for information on the interpulse periods array structure.
/// Example: /// Example: [1000.3, 1000.2]
/// Constraints: No constraints specified.
/// Array of full scale Nyquist Doppler velocities measured by radar, in meters per second. Nyquist velocity refers to the maximum velocity magnitude that the radar system can unambiguously detect. Doppler velocities with absolute values exceeding the Nyquist threshold suffer from aliasing at the time of collection. Users should consult the data provider for information on the doppler velocities array structure.
/// Example: /// Example: [44.4, 467.3]
/// Constraints: No constraints specified.
func (rcv *WeatherData_Ingest) DoppVels(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(46))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *WeatherData_Ingest) DoppVelsLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(46))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

/// Array of full scale Nyquist Doppler velocities measured by radar, in meters per second. Nyquist velocity refers to the maximum velocity magnitude that the radar system can unambiguously detect. Doppler velocities with absolute values exceeding the Nyquist threshold suffer from aliasing at the time of collection. Users should consult the data provider for information on the doppler velocities array structure.
/// Example: /// Example: [44.4, 467.3]
/// Constraints: No constraints specified.
/// Array of the number(s) of records in consensus for a radar beam. Users should consult the data provider for information on the consensus records array structure.
/// Example: /// Example: [5, 2]
/// Constraints: No constraints specified.
func (rcv *WeatherData_Ingest) ConsRecs(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(48))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *WeatherData_Ingest) ConsRecsLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(48))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

/// Array of the number(s) of records in consensus for a radar beam. Users should consult the data provider for information on the consensus records array structure.
/// Example: /// Example: [5, 2]
/// Constraints: No constraints specified.
/// Array of signal to noise ratio(s) for a radar beam, in decibels. Users should consult the data provider for information on the signal to noise ratios array structure.
/// Example: /// Example: [14.5, -16.2]
/// Constraints: No constraints specified.
func (rcv *WeatherData_Ingest) Snrs(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(50))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *WeatherData_Ingest) SnrsLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(50))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

/// Array of signal to noise ratio(s) for a radar beam, in decibels. Users should consult the data provider for information on the signal to noise ratios array structure.
/// Example: /// Example: [14.5, -16.2]
/// Constraints: No constraints specified.
/// Signal strength of the electromagnetic energy received due to a lightning event, in kiloamps.
/// Example: /// Example: 163.7
/// Constraints: No constraints specified.
func (rcv *WeatherData_Ingest) SigStrength() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(52))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Signal strength of the electromagnetic energy received due to a lightning event, in kiloamps.
/// Example: /// Example: 163.7
/// Constraints: No constraints specified.
func (rcv *WeatherData_Ingest) MutateSigStrength(n float64) bool {
	return rcv._tab.MutateFloat64Slot(52, n)
}

/// Semi-major axis of the 50% positional confidence ellipse, in kilometers.
/// Example: /// Example: 3.4
/// Constraints: No constraints specified.
func (rcv *WeatherData_Ingest) SemiMajorAxis() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(54))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Semi-major axis of the 50% positional confidence ellipse, in kilometers.
/// Example: /// Example: 3.4
/// Constraints: No constraints specified.
func (rcv *WeatherData_Ingest) MutateSemiMajorAxis(n float64) bool {
	return rcv._tab.MutateFloat64Slot(54, n)
}

/// Semi-minor axis of the 50% positional confidence ellipse, in kilometers.
/// Example: /// Example: 0.3
/// Constraints: No constraints specified.
func (rcv *WeatherData_Ingest) SemiMinorAxis() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(56))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Semi-minor axis of the 50% positional confidence ellipse, in kilometers.
/// Example: /// Example: 0.3
/// Constraints: No constraints specified.
func (rcv *WeatherData_Ingest) MutateSemiMinorAxis(n float64) bool {
	return rcv._tab.MutateFloat64Slot(56, n)
}

/// Angle of orientation of the 50% positional confidence ellipse, in degrees clockwise from true north.
/// Example: /// Example: 75.7
/// Constraints: No constraints specified.
func (rcv *WeatherData_Ingest) AngleOrientation() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(58))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Angle of orientation of the 50% positional confidence ellipse, in degrees clockwise from true north.
/// Example: /// Example: 75.7
/// Constraints: No constraints specified.
func (rcv *WeatherData_Ingest) MutateAngleOrientation(n float64) bool {
	return rcv._tab.MutateFloat64Slot(58, n)
}

/// Number of sensors used in the lightning event location solution.
/// Example: /// Example: 9
/// Constraints: No constraints specified.
func (rcv *WeatherData_Ingest) LightEventNum() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(60))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

/// Number of sensors used in the lightning event location solution.
/// Example: /// Example: 9
/// Constraints: No constraints specified.
func (rcv *WeatherData_Ingest) MutateLightEventNum(n int32) bool {
	return rcv._tab.MutateInt32Slot(60, n)
}

/// Array of sensor(s) that participated in the lightning event location determination.
/// Example: /// Example: [11, 28, 190]
/// Constraints: No constraints specified.
func (rcv *WeatherData_Ingest) LightDetSensors(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(62))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *WeatherData_Ingest) LightDetSensorsLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(62))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

/// Array of sensor(s) that participated in the lightning event location determination.
/// Example: /// Example: [11, 28, 190]
/// Constraints: No constraints specified.
/// The positional confidence of the calculated lightning event location using the chi-square statistical method.
/// Example: /// Example: 0.1
/// Constraints: No constraints specified.
func (rcv *WeatherData_Ingest) PosConfidence() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(64))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// The positional confidence of the calculated lightning event location using the chi-square statistical method.
/// Example: /// Example: 0.1
/// Constraints: No constraints specified.
func (rcv *WeatherData_Ingest) MutatePosConfidence(n float64) bool {
	return rcv._tab.MutateFloat64Slot(64, n)
}

/// Array of UDL record types (SENSOR, WEATHERREPORT) that are related to this WeatherData record. See the associated 'srcIds' array for the record UUIDs, positionally corresponding to the record types in this array. The 'srcTyps' and 'srcIds' arrays must match in size.
/// Example: /// Example: ['SENSOR', 'WEATHERREPORT']
/// Constraints: No constraints specified.
func (rcv *WeatherData_Ingest) SrcTyps(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(66))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *WeatherData_Ingest) SrcTypsLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(66))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

/// Array of UDL record types (SENSOR, WEATHERREPORT) that are related to this WeatherData record. See the associated 'srcIds' array for the record UUIDs, positionally corresponding to the record types in this array. The 'srcTyps' and 'srcIds' arrays must match in size.
/// Example: /// Example: ['SENSOR', 'WEATHERREPORT']
/// Constraints: No constraints specified.
/// Array of UUID(s) of the UDL data record(s) that are related to this WeatherData record. See the associated 'srcTyps' array for the specific types of data, positionally corresponding to the UUIDs in this array. The 'srcTyps' and 'srcIds' arrays must match in size. See the corresponding srcTyps array element for the data type of the UUID and use the appropriate API operation to retrieve that object.
/// Example: /// Example: ['1b23ba93-0957-4654-b5ca-8c3703f3ec57', '32944ee4-0437-4d94-95ce-2f2823ffa001']
/// Constraints: No constraints specified.
func (rcv *WeatherData_Ingest) SrcIds(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(68))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *WeatherData_Ingest) SrcIdsLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(68))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

/// Array of UUID(s) of the UDL data record(s) that are related to this WeatherData record. See the associated 'srcTyps' array for the specific types of data, positionally corresponding to the UUIDs in this array. The 'srcTyps' and 'srcIds' arrays must match in size. See the corresponding srcTyps array element for the data type of the UUID and use the appropriate API operation to retrieve that object.
/// Example: /// Example: ['1b23ba93-0957-4654-b5ca-8c3703f3ec57', '32944ee4-0437-4d94-95ce-2f2823ffa001']
/// Constraints: No constraints specified.
/// The originating source network on which this record was created, auto-populated by the system.
/// Example: /// Example: OPS1
/// Constraints: Minimum length = 1, Maximum length = 32
func (rcv *WeatherData_Ingest) OrigNetwork() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(70))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The originating source network on which this record was created, auto-populated by the system.
/// Example: /// Example: OPS1
/// Constraints: Minimum length = 1, Maximum length = 32
/// Time the row was created in the database.
/// Example: /// Example: 2018-01-01T16:00:00.123Z
/// Constraints: No constraints specified.
func (rcv *WeatherData_Ingest) CreatedAt() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(72))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Time the row was created in the database.
/// Example: /// Example: 2018-01-01T16:00:00.123Z
/// Constraints: No constraints specified.
/// Application user who created the row in the database.
/// Example: /// Example: some.user
/// Constraints: Minimum length = 1, Maximum length = 64
func (rcv *WeatherData_Ingest) CreatedBy() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(74))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Application user who created the row in the database.
/// Example: /// Example: some.user
/// Constraints: Minimum length = 1, Maximum length = 64
/// Source of the data.
/// Example: /// Example: Bluestaq
/// Constraints: Minimum length = 1, Maximum length = 36
func (rcv *WeatherData_Ingest) Source() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(76))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Source of the data.
/// Example: /// Example: Bluestaq
/// Constraints: Minimum length = 1, Maximum length = 36
/// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
/// Example: /// Example: THIRD_PARTY_DATASOURCE
/// Constraints: Minimum length = 0, Maximum length = 64
func (rcv *WeatherData_Ingest) Origin() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(78))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
/// Example: /// Example: THIRD_PARTY_DATASOURCE
/// Constraints: Minimum length = 0, Maximum length = 64
/// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
/// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
/// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
/// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
/// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
/// Example: /// Example: TEST
/// Constraints: Minimum length = 1, Maximum length = 32
func (rcv *WeatherData_Ingest) DataMode() WeatherData_Ingest_dataMode_Enum {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(80))
	if o != 0 {
		return WeatherData_Ingest_dataMode_Enum(rcv._tab.GetInt8(o + rcv._tab.Pos))
	}
	return 0
}

/// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
/// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
/// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
/// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
/// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
/// Example: /// Example: TEST
/// Constraints: Minimum length = 1, Maximum length = 32
func (rcv *WeatherData_Ingest) MutateDataMode(n WeatherData_Ingest_dataMode_Enum) bool {
	return rcv._tab.MutateInt8Slot(80, int8(n))
}

func WeatherData_IngestStart(builder *flatbuffers.Builder) {
	builder.StartObject(39)
}
func WeatherData_IngestAddId(builder *flatbuffers.Builder, id flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(id), 0)
}
func WeatherData_IngestAddClassificationMarking(builder *flatbuffers.Builder, classificationMarking flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(classificationMarking), 0)
}
func WeatherData_IngestAddIdSensor(builder *flatbuffers.Builder, idSensor flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(idSensor), 0)
}
func WeatherData_IngestAddOrigSensorId(builder *flatbuffers.Builder, origSensorId flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(3, flatbuffers.UOffsetT(origSensorId), 0)
}
func WeatherData_IngestAddObTime(builder *flatbuffers.Builder, obTime flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(4, flatbuffers.UOffsetT(obTime), 0)
}
func WeatherData_IngestAddSigPwrs(builder *flatbuffers.Builder, sigPwrs flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(5, flatbuffers.UOffsetT(sigPwrs), 0)
}
func WeatherData_IngestStartSigPwrsVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func WeatherData_IngestAddNoiseLvls(builder *flatbuffers.Builder, noiseLvls flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(6, flatbuffers.UOffsetT(noiseLvls), 0)
}
func WeatherData_IngestStartNoiseLvlsVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func WeatherData_IngestAddSpecWidths(builder *flatbuffers.Builder, specWidths flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(7, flatbuffers.UOffsetT(specWidths), 0)
}
func WeatherData_IngestStartSpecWidthsVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func WeatherData_IngestAddFirstGuessAvgs(builder *flatbuffers.Builder, firstGuessAvgs flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(8, flatbuffers.UOffsetT(firstGuessAvgs), 0)
}
func WeatherData_IngestStartFirstGuessAvgsVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func WeatherData_IngestAddQcValue(builder *flatbuffers.Builder, qcValue int32) {
	builder.PrependInt32Slot(9, qcValue, 0)
}
func WeatherData_IngestAddFileCreation(builder *flatbuffers.Builder, fileCreation flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(10, flatbuffers.UOffsetT(fileCreation), 0)
}
func WeatherData_IngestAddTermAlt(builder *flatbuffers.Builder, termAlt float64) {
	builder.PrependFloat64Slot(11, termAlt, 0.0)
}
func WeatherData_IngestAddAvgTxPwr(builder *flatbuffers.Builder, avgTxPwr float64) {
	builder.PrependFloat64Slot(12, avgTxPwr, 0.0)
}
func WeatherData_IngestAddAvgRefPwr(builder *flatbuffers.Builder, avgRefPwr float64) {
	builder.PrependFloat64Slot(13, avgRefPwr, 0.0)
}
func WeatherData_IngestAddSectorNum(builder *flatbuffers.Builder, sectorNum int32) {
	builder.PrependInt32Slot(14, sectorNum, 0)
}
func WeatherData_IngestAddNumElements(builder *flatbuffers.Builder, numElements int32) {
	builder.PrependInt32Slot(15, numElements, 0)
}
func WeatherData_IngestAddTdAvgSampleNums(builder *flatbuffers.Builder, tdAvgSampleNums flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(16, flatbuffers.UOffsetT(tdAvgSampleNums), 0)
}
func WeatherData_IngestStartTdAvgSampleNumsVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func WeatherData_IngestAddChecksum(builder *flatbuffers.Builder, checksum int32) {
	builder.PrependInt32Slot(17, checksum, 0)
}
func WeatherData_IngestAddCoIntegs(builder *flatbuffers.Builder, coIntegs flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(18, flatbuffers.UOffsetT(coIntegs), 0)
}
func WeatherData_IngestStartCoIntegsVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func WeatherData_IngestAddSpecAvgs(builder *flatbuffers.Builder, specAvgs flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(19, flatbuffers.UOffsetT(specAvgs), 0)
}
func WeatherData_IngestStartSpecAvgsVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func WeatherData_IngestAddInterpulsePeriods(builder *flatbuffers.Builder, interpulsePeriods flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(20, flatbuffers.UOffsetT(interpulsePeriods), 0)
}
func WeatherData_IngestStartInterpulsePeriodsVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func WeatherData_IngestAddDoppVels(builder *flatbuffers.Builder, doppVels flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(21, flatbuffers.UOffsetT(doppVels), 0)
}
func WeatherData_IngestStartDoppVelsVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func WeatherData_IngestAddConsRecs(builder *flatbuffers.Builder, consRecs flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(22, flatbuffers.UOffsetT(consRecs), 0)
}
func WeatherData_IngestStartConsRecsVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func WeatherData_IngestAddSnrs(builder *flatbuffers.Builder, snrs flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(23, flatbuffers.UOffsetT(snrs), 0)
}
func WeatherData_IngestStartSnrsVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func WeatherData_IngestAddSigStrength(builder *flatbuffers.Builder, sigStrength float64) {
	builder.PrependFloat64Slot(24, sigStrength, 0.0)
}
func WeatherData_IngestAddSemiMajorAxis(builder *flatbuffers.Builder, semiMajorAxis float64) {
	builder.PrependFloat64Slot(25, semiMajorAxis, 0.0)
}
func WeatherData_IngestAddSemiMinorAxis(builder *flatbuffers.Builder, semiMinorAxis float64) {
	builder.PrependFloat64Slot(26, semiMinorAxis, 0.0)
}
func WeatherData_IngestAddAngleOrientation(builder *flatbuffers.Builder, angleOrientation float64) {
	builder.PrependFloat64Slot(27, angleOrientation, 0.0)
}
func WeatherData_IngestAddLightEventNum(builder *flatbuffers.Builder, lightEventNum int32) {
	builder.PrependInt32Slot(28, lightEventNum, 0)
}
func WeatherData_IngestAddLightDetSensors(builder *flatbuffers.Builder, lightDetSensors flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(29, flatbuffers.UOffsetT(lightDetSensors), 0)
}
func WeatherData_IngestStartLightDetSensorsVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func WeatherData_IngestAddPosConfidence(builder *flatbuffers.Builder, posConfidence float64) {
	builder.PrependFloat64Slot(30, posConfidence, 0.0)
}
func WeatherData_IngestAddSrcTyps(builder *flatbuffers.Builder, srcTyps flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(31, flatbuffers.UOffsetT(srcTyps), 0)
}
func WeatherData_IngestStartSrcTypsVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func WeatherData_IngestAddSrcIds(builder *flatbuffers.Builder, srcIds flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(32, flatbuffers.UOffsetT(srcIds), 0)
}
func WeatherData_IngestStartSrcIdsVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func WeatherData_IngestAddOrigNetwork(builder *flatbuffers.Builder, origNetwork flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(33, flatbuffers.UOffsetT(origNetwork), 0)
}
func WeatherData_IngestAddCreatedAt(builder *flatbuffers.Builder, createdAt flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(34, flatbuffers.UOffsetT(createdAt), 0)
}
func WeatherData_IngestAddCreatedBy(builder *flatbuffers.Builder, createdBy flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(35, flatbuffers.UOffsetT(createdBy), 0)
}
func WeatherData_IngestAddSource(builder *flatbuffers.Builder, source flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(36, flatbuffers.UOffsetT(source), 0)
}
func WeatherData_IngestAddOrigin(builder *flatbuffers.Builder, origin flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(37, flatbuffers.UOffsetT(origin), 0)
}
func WeatherData_IngestAddDataMode(builder *flatbuffers.Builder, dataMode WeatherData_Ingest_dataMode_Enum) {
	builder.PrependInt8Slot(38, int8(dataMode), 0)
}
func WeatherData_IngestEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
