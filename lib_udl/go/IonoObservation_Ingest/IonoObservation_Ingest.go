// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package IonoObservation_Ingest

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

/// /// These services provide operations for posting and querying ionospheric observation data. Characteristics are defined by the CHARS: URSI IIWG format for archiving monthly ionospheric characteristics, INAG Bulletin No. 62 specification. Qualifying and Descriptive letters are defined by the URSI Handbook for Ionogram Interpretation and reduction, Report UAG, No. 23A specification.
type IonoObservation_Ingest struct {
	_tab flatbuffers.Table
}

const IonoObservation_IngestIdentifier = "IONO"

func GetRootAsIonoObservation_Ingest(buf []byte, offset flatbuffers.UOffsetT) *IonoObservation_Ingest {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &IonoObservation_Ingest{}
	x.Init(buf, n+offset)
	return x
}

func FinishIonoObservation_IngestBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	identifierBytes := []byte(IonoObservation_IngestIdentifier)
	builder.FinishWithFileIdentifier(offset, identifierBytes)
}

func IonoObservation_IngestBufferHasIdentifier(buf []byte) bool {
	return flatbuffers.BufferHasIdentifier(buf, IonoObservation_IngestIdentifier)
}

func GetSizePrefixedRootAsIonoObservation_Ingest(buf []byte, offset flatbuffers.UOffsetT) *IonoObservation_Ingest {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &IonoObservation_Ingest{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedIonoObservation_IngestBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	identifierBytes := []byte(IonoObservation_IngestIdentifier)
	builder.FinishSizePrefixedWithFileIdentifier(offset, identifierBytes)
}

func SizePrefixedIonoObservation_IngestBufferHasIdentifier(buf []byte) bool {
	return flatbuffers.SizePrefixedBufferHasIdentifier(buf, IonoObservation_IngestIdentifier)
}

func (rcv *IonoObservation_Ingest) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *IonoObservation_Ingest) Table() flatbuffers.Table {
	return rcv._tab
}

/// Unique identifier of the record, auto-generated by the system.
/// Example: /// Example: IONOOBSERVATION-ID
/// Constraints: Minimum length = 1, Maximum length = 36
func (rcv *IonoObservation_Ingest) Id() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Unique identifier of the record, auto-generated by the system.
/// Example: /// Example: IONOOBSERVATION-ID
/// Constraints: Minimum length = 1, Maximum length = 36
/// Classification marking of the data in IC/CAPCO Portion-marked format.
/// Example: /// Example: U
/// Constraints: Minimum length = 1, Maximum length = 128
func (rcv *IonoObservation_Ingest) ClassificationMarking() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Classification marking of the data in IC/CAPCO Portion-marked format.
/// Example: /// Example: U
/// Constraints: Minimum length = 1, Maximum length = 128
/// Unique identifier of the reporting sensor.
/// Example: /// Example: SENSOR-ID
/// Constraints: Minimum length = 0, Maximum length = 36
func (rcv *IonoObservation_Ingest) IdSensor() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Unique identifier of the reporting sensor.
/// Example: /// Example: SENSOR-ID
/// Constraints: Minimum length = 0, Maximum length = 36
/// Optional identifier provided by observation source to indicate the sensor identifier which produced this observation. This may be an internal identifier and not necessarily a valid sensor ID.
/// Example: /// Example: ORIGSENSOR-ID
/// Constraints: Minimum length = 0, Maximum length = 64
func (rcv *IonoObservation_Ingest) OrigSensorId() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Optional identifier provided by observation source to indicate the sensor identifier which produced this observation. This may be an internal identifier and not necessarily a valid sensor ID.
/// Example: /// Example: ORIGSENSOR-ID
/// Constraints: Minimum length = 0, Maximum length = 64
/// Ionosonde hardware type or data collection type together with possible additional descriptors.
/// Example: /// Example: Example hardware type
/// Constraints: Minimum length = 1, Maximum length = 64
func (rcv *IonoObservation_Ingest) System() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Ionosonde hardware type or data collection type together with possible additional descriptors.
/// Example: /// Example: Example hardware type
/// Constraints: Minimum length = 1, Maximum length = 64
/// Name of the algorithm used for the electron density profile.
/// Example: /// Example: NH
/// Constraints: Minimum length = 0, Maximum length = 64
func (rcv *IonoObservation_Ingest) NeProfileName() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Name of the algorithm used for the electron density profile.
/// Example: /// Example: NH
/// Constraints: Minimum length = 0, Maximum length = 64
/// Version of the algorithm used for the electron density profile.
/// Example: /// Example: 4.32
/// Constraints: No constraints specified.
func (rcv *IonoObservation_Ingest) NeProfileVersion() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Version of the algorithm used for the electron density profile.
/// Example: /// Example: 4.32
/// Constraints: No constraints specified.
func (rcv *IonoObservation_Ingest) MutateNeProfileVersion(n float64) bool {
	return rcv._tab.MutateFloat64Slot(16, n)
}

/// No description provided.
/// Example: /// Example: No example provided.
/// Constraints: No constraints specified.
func (rcv *IonoObservation_Ingest) ScalerInfo() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(18))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// No description provided.
/// Example: /// Example: No example provided.
/// Constraints: No constraints specified.
/// No description provided.
/// Example: /// Example: No example provided.
/// Constraints: No constraints specified.
func (rcv *IonoObservation_Ingest) DensityProfile() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(20))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// No description provided.
/// Example: /// Example: No example provided.
/// Constraints: No constraints specified.
/// URSI code for station or stations producing the ionosonde.
/// Example: /// Example: STATION-ID
/// Constraints: Minimum length = 1, Maximum length = 64
func (rcv *IonoObservation_Ingest) StationId() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(22))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// URSI code for station or stations producing the ionosonde.
/// Example: /// Example: STATION-ID
/// Constraints: Minimum length = 1, Maximum length = 64
/// Sounding Start time in ISO8601 UTC format.
/// Example: /// Example: 2021-01-01T01:01:01.123456Z
/// Constraints: No constraints specified.
func (rcv *IonoObservation_Ingest) StartTimeUtc() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(24))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Sounding Start time in ISO8601 UTC format.
/// Example: /// Example: 2021-01-01T01:01:01.123456Z
/// Constraints: No constraints specified.
/// Names of settings.
/// Example: /// Example: Example settings
/// Constraints: Minimum length = 1, Maximum length = 1024
func (rcv *IonoObservation_Ingest) SystemInfo() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(26))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Names of settings.
/// Example: /// Example: Example settings
/// Constraints: Minimum length = 1, Maximum length = 1024
/// Details concerning the composition/intention/interpretation/audience/etc. of any data recorded here. This field may contain all of the intended information e.g. info on signal waveforms used, antenna setup, etc. OR may describe the data/settings to be provided in the “data” field.
/// Example: /// Example: Example notes
/// Constraints: Minimum length = 0, Maximum length = 1024
func (rcv *IonoObservation_Ingest) SystemNotes() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(28))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Details concerning the composition/intention/interpretation/audience/etc. of any data recorded here. This field may contain all of the intended information e.g. info on signal waveforms used, antenna setup, etc. OR may describe the data/settings to be provided in the “data” field.
/// Example: /// Example: Example notes
/// Constraints: Minimum length = 0, Maximum length = 1024
/// List of Geodetic Latitude, Longitude, and Altitude coordinates in km of the receiver. Coordinates List must always have 3 elements. Valid ranges are -90.0 to 90.0 for Latitude and -180.0 to 180.0 for Longitude. Altitude is in km and its value must be 0 or greater.
/// Example: /// Example: [[45.5, 179.3, 35.6], [-80.2, -20.5, 43.2]]
/// Constraints: No constraints specified.
func (rcv *IonoObservation_Ingest) TransmitCoordinates(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(30))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *IonoObservation_Ingest) TransmitCoordinatesLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(30))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

/// List of Geodetic Latitude, Longitude, and Altitude coordinates in km of the receiver. Coordinates List must always have 3 elements. Valid ranges are -90.0 to 90.0 for Latitude and -180.0 to 180.0 for Longitude. Altitude is in km and its value must be 0 or greater.
/// Example: /// Example: [[45.5, 179.3, 35.6], [-80.2, -20.5, 43.2]]
/// Constraints: No constraints specified.
/// Enums: Mobile, Static.
/// Example: /// Example: Mobile
/// Constraints: Minimum length = 0, Maximum length = 16
func (rcv *IonoObservation_Ingest) TransmitSensorType() IonoObservation_Ingest_transmitSensorType_Enum {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(32))
	if o != 0 {
		return IonoObservation_Ingest_transmitSensorType_Enum(rcv._tab.GetInt8(o + rcv._tab.Pos))
	}
	return 0
}

/// Enums: Mobile, Static.
/// Example: /// Example: Mobile
/// Constraints: Minimum length = 0, Maximum length = 16
func (rcv *IonoObservation_Ingest) MutateTransmitSensorType(n IonoObservation_Ingest_transmitSensorType_Enum) bool {
	return rcv._tab.MutateInt8Slot(32, int8(n))
}

/// List of Geodetic Latitude, Longitude, and Altitude coordinates in km of the receiver. Coordinates List must always have 3 elements. Valid ranges are -90.0 to 90.0 for Latitude and -180.0 to 180.0 for Longitude. Altitude is in km and its value must be 0 or greater.
/// Example: /// Example: [[45.5, 179.3, 35.6], [-80.2, -20.5, 43.2]]
/// Constraints: No constraints specified.
func (rcv *IonoObservation_Ingest) ReceiveCoordinates(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(34))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *IonoObservation_Ingest) ReceiveCoordinatesLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(34))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

/// List of Geodetic Latitude, Longitude, and Altitude coordinates in km of the receiver. Coordinates List must always have 3 elements. Valid ranges are -90.0 to 90.0 for Latitude and -180.0 to 180.0 for Longitude. Altitude is in km and its value must be 0 or greater.
/// Example: /// Example: [[45.5, 179.3, 35.6], [-80.2, -20.5, 43.2]]
/// Constraints: No constraints specified.
/// Enums: Mobile, Static.
/// Example: /// Example: Mobile
/// Constraints: Minimum length = 0, Maximum length = 16
func (rcv *IonoObservation_Ingest) ReceiveSensorType() IonoObservation_Ingest_receiveSensorType_Enum {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(36))
	if o != 0 {
		return IonoObservation_Ingest_receiveSensorType_Enum(rcv._tab.GetInt8(o + rcv._tab.Pos))
	}
	return 0
}

/// Enums: Mobile, Static.
/// Example: /// Example: Mobile
/// Constraints: Minimum length = 0, Maximum length = 16
func (rcv *IonoObservation_Ingest) MutateReceiveSensorType(n IonoObservation_Ingest_receiveSensorType_Enum) bool {
	return rcv._tab.MutateInt8Slot(36, int8(n))
}

/// No description provided.
/// Example: /// Example: No example provided.
/// Constraints: No constraints specified.
func (rcv *IonoObservation_Ingest) AntennaElementPosition() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(38))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// No description provided.
/// Example: /// Example: No example provided.
/// Constraints: No constraints specified.
/// Enums: J2000, ECR/ECEF, TEME, GCRF, WGS84 (GEODetic lat, long, alt), GEOCentric (lat, long, radii).
/// Example: /// Example: J2000
/// Constraints: Minimum length = 0, Maximum length = 32
func (rcv *IonoObservation_Ingest) AntennaElementPositionCoordinateSystem() IonoObservation_Ingest_antennaElementPositionCoordinateSystem_Enum {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(40))
	if o != 0 {
		return IonoObservation_Ingest_antennaElementPositionCoordinateSystem_Enum(rcv._tab.GetInt8(o + rcv._tab.Pos))
	}
	return 0
}

/// Enums: J2000, ECR/ECEF, TEME, GCRF, WGS84 (GEODetic lat, long, alt), GEOCentric (lat, long, radii).
/// Example: /// Example: J2000
/// Constraints: Minimum length = 0, Maximum length = 32
func (rcv *IonoObservation_Ingest) MutateAntennaElementPositionCoordinateSystem(n IonoObservation_Ingest_antennaElementPositionCoordinateSystem_Enum) bool {
	return rcv._tab.MutateInt8Slot(40, int8(n))
}

/// No description provided.
/// Example: /// Example: No example provided.
/// Constraints: No constraints specified.
func (rcv *IonoObservation_Ingest) Power() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(42))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// No description provided.
/// Example: /// Example: No example provided.
/// Constraints: No constraints specified.
/// No description provided.
/// Example: /// Example: No example provided.
/// Constraints: No constraints specified.
func (rcv *IonoObservation_Ingest) Range() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(44))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// No description provided.
/// Example: /// Example: No example provided.
/// Constraints: No constraints specified.
/// No description provided.
/// Example: /// Example: No example provided.
/// Constraints: No constraints specified.
func (rcv *IonoObservation_Ingest) Frequency() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(46))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// No description provided.
/// Example: /// Example: No example provided.
/// Constraints: No constraints specified.
/// No description provided.
/// Example: /// Example: No example provided.
/// Constraints: No constraints specified.
func (rcv *IonoObservation_Ingest) Polarization() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(48))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// No description provided.
/// Example: /// Example: No example provided.
/// Constraints: No constraints specified.
/// No description provided.
/// Example: /// Example: No example provided.
/// Constraints: No constraints specified.
func (rcv *IonoObservation_Ingest) Azimuth() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(50))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// No description provided.
/// Example: /// Example: No example provided.
/// Constraints: No constraints specified.
/// No description provided.
/// Example: /// Example: No example provided.
/// Constraints: No constraints specified.
func (rcv *IonoObservation_Ingest) Elevation() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(52))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// No description provided.
/// Example: /// Example: No example provided.
/// Constraints: No constraints specified.
/// Array of restricted frequencies.
/// Example: /// Example: [12.5, 34.5, 45.3]
/// Constraints: No constraints specified.
func (rcv *IonoObservation_Ingest) RestrictedFrequency(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(54))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *IonoObservation_Ingest) RestrictedFrequencyLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(54))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

/// Array of restricted frequencies.
/// Example: /// Example: [12.5, 34.5, 45.3]
/// Constraints: No constraints specified.
/// Notes for the restrictedFrequency data.
/// Example: /// Example: Example notes
/// Constraints: Minimum length = 0, Maximum length = 512
func (rcv *IonoObservation_Ingest) RestrictedFrequencyNotes() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(56))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Notes for the restrictedFrequency data.
/// Example: /// Example: Example notes
/// Constraints: Minimum length = 0, Maximum length = 512
/// No description provided.
/// Example: /// Example: No example provided.
/// Constraints: No constraints specified.
func (rcv *IonoObservation_Ingest) Doppler() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(58))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// No description provided.
/// Example: /// Example: No example provided.
/// Constraints: No constraints specified.
/// No description provided.
/// Example: /// Example: No example provided.
/// Constraints: No constraints specified.
func (rcv *IonoObservation_Ingest) Time() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(60))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// No description provided.
/// Example: /// Example: No example provided.
/// Constraints: No constraints specified.
/// No description provided.
/// Example: /// Example: No example provided.
/// Constraints: No constraints specified.
func (rcv *IonoObservation_Ingest) Stokes() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(62))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// No description provided.
/// Example: /// Example: No example provided.
/// Constraints: No constraints specified.
/// No description provided.
/// Example: /// Example: No example provided.
/// Constraints: No constraints specified.
func (rcv *IonoObservation_Ingest) Amplitude() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(64))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// No description provided.
/// Example: /// Example: No example provided.
/// Constraints: No constraints specified.
/// No description provided.
/// Example: /// Example: No example provided.
/// Constraints: No constraints specified.
func (rcv *IonoObservation_Ingest) Phase() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(66))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// No description provided.
/// Example: /// Example: No example provided.
/// Constraints: No constraints specified.
/// The ordinary wave critical frequency of the highest stratification in the F region, specified in MHz. URSI ID: 00.
/// Example: /// Example: 6.75
/// Constraints: No constraints specified.
func (rcv *IonoObservation_Ingest) FoF2() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(68))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// The ordinary wave critical frequency of the highest stratification in the F region, specified in MHz. URSI ID: 00.
/// Example: /// Example: 6.75
/// Constraints: No constraints specified.
func (rcv *IonoObservation_Ingest) MutateFoF2(n float64) bool {
	return rcv._tab.MutateFloat64Slot(68, n)
}

/// The ordinary wave F1 critical frequency, in MHz. URSI ID: 10.
/// Example: /// Example: 8.2
/// Constraints: No constraints specified.
func (rcv *IonoObservation_Ingest) FoF1() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(70))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// The ordinary wave F1 critical frequency, in MHz. URSI ID: 10.
/// Example: /// Example: 8.2
/// Constraints: No constraints specified.
func (rcv *IonoObservation_Ingest) MutateFoF1(n float64) bool {
	return rcv._tab.MutateFloat64Slot(70, n)
}

/// The extraordinary wave F2 critical frequency, in MHz. URSI ID: 01.
/// Example: /// Example: 4.5
/// Constraints: No constraints specified.
func (rcv *IonoObservation_Ingest) FxF2() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(72))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// The extraordinary wave F2 critical frequency, in MHz. URSI ID: 01.
/// Example: /// Example: 4.5
/// Constraints: No constraints specified.
func (rcv *IonoObservation_Ingest) MutateFxF2(n float64) bool {
	return rcv._tab.MutateFloat64Slot(72, n)
}

/// The extraordinary wave F1 critical frequency, in MHz. URSI ID: 11.
/// Example: /// Example: 4.2
/// Constraints: No constraints specified.
func (rcv *IonoObservation_Ingest) FxF1() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(74))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// The extraordinary wave F1 critical frequency, in MHz. URSI ID: 11.
/// Example: /// Example: 4.2
/// Constraints: No constraints specified.
func (rcv *IonoObservation_Ingest) MutateFxF1(n float64) bool {
	return rcv._tab.MutateFloat64Slot(74, n)
}

/// MUF(D)/foF2.
/// Example: /// Example: 1.1
/// Constraints: No constraints specified.
func (rcv *IonoObservation_Ingest) Md() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(76))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// MUF(D)/foF2.
/// Example: /// Example: 1.1
/// Constraints: No constraints specified.
func (rcv *IonoObservation_Ingest) MutateMd(n float64) bool {
	return rcv._tab.MutateFloat64Slot(76, n)
}

/// Lowest usable frequency.
/// Example: /// Example: 1.1
/// Constraints: No constraints specified.
func (rcv *IonoObservation_Ingest) Luf() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(78))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Lowest usable frequency.
/// Example: /// Example: 1.1
/// Constraints: No constraints specified.
func (rcv *IonoObservation_Ingest) MutateLuf(n float64) bool {
	return rcv._tab.MutateFloat64Slot(78, n)
}

/// Maximum Usable Frequency for ground distance D in MHz.
/// Example: /// Example: 1.1
/// Constraints: No constraints specified.
func (rcv *IonoObservation_Ingest) Mufd() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(80))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Maximum Usable Frequency for ground distance D in MHz.
/// Example: /// Example: 1.1
/// Constraints: No constraints specified.
func (rcv *IonoObservation_Ingest) MutateMufd(n float64) bool {
	return rcv._tab.MutateFloat64Slot(80, n)
}

/// Lowest frequency at which echo traces are observed on the ionogram, in MHz. URSI ID: 42.
/// Example: /// Example: 2.025
/// Constraints: No constraints specified.
func (rcv *IonoObservation_Ingest) Fmin() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(82))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Lowest frequency at which echo traces are observed on the ionogram, in MHz. URSI ID: 42.
/// Example: /// Example: 2.025
/// Constraints: No constraints specified.
func (rcv *IonoObservation_Ingest) MutateFmin(n float64) bool {
	return rcv._tab.MutateFloat64Slot(82, n)
}

/// Highest ordinary wave frequency at which a mainly continuous Es trace is observed, in MHz. URSI ID: 30.
/// Example: /// Example: 2.35
/// Constraints: No constraints specified.
func (rcv *IonoObservation_Ingest) FoEs() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(84))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Highest ordinary wave frequency at which a mainly continuous Es trace is observed, in MHz. URSI ID: 30.
/// Example: /// Example: 2.35
/// Constraints: No constraints specified.
func (rcv *IonoObservation_Ingest) MutateFoEs(n float64) bool {
	return rcv._tab.MutateFloat64Slot(84, n)
}

/// Minimum frequency of F layer echoes in MHz. URSI ID: 80.
/// Example: /// Example: 2.7
/// Constraints: No constraints specified.
func (rcv *IonoObservation_Ingest) FminF() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(86))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Minimum frequency of F layer echoes in MHz. URSI ID: 80.
/// Example: /// Example: 2.7
/// Constraints: No constraints specified.
func (rcv *IonoObservation_Ingest) MutateFminF(n float64) bool {
	return rcv._tab.MutateFloat64Slot(86, n)
}

/// Minimum frequency of E layer echoes in MHz. URSI ID: 81.
/// Example: /// Example: 2.025
/// Constraints: No constraints specified.
func (rcv *IonoObservation_Ingest) FminE() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(88))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Minimum frequency of E layer echoes in MHz. URSI ID: 81.
/// Example: /// Example: 2.025
/// Constraints: No constraints specified.
func (rcv *IonoObservation_Ingest) MutateFminE(n float64) bool {
	return rcv._tab.MutateFloat64Slot(88, n)
}

/// The ordinary wave critical frequency of the lowest thick layer which causes a discontinuity, in MHz. URSI ID: 20.
/// Example: /// Example: 1.1
/// Constraints: No constraints specified.
func (rcv *IonoObservation_Ingest) FoE() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(90))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// The ordinary wave critical frequency of the lowest thick layer which causes a discontinuity, in MHz. URSI ID: 20.
/// Example: /// Example: 1.1
/// Constraints: No constraints specified.
func (rcv *IonoObservation_Ingest) MutateFoE(n float64) bool {
	return rcv._tab.MutateFloat64Slot(90, n)
}

/// The extraordinary wave E critical frequency, in MHz. URSI ID: 21.
/// Example: /// Example: 1.1
/// Constraints: No constraints specified.
func (rcv *IonoObservation_Ingest) FxE() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(92))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// The extraordinary wave E critical frequency, in MHz. URSI ID: 21.
/// Example: /// Example: 1.1
/// Constraints: No constraints specified.
func (rcv *IonoObservation_Ingest) MutateFxE(n float64) bool {
	return rcv._tab.MutateFloat64Slot(92, n)
}

/// The highest frequency of F-trace in MHz. Note: fxI is with capital i. URSI ID: 51.
/// Example: /// Example: 7.525
/// Constraints: No constraints specified.
func (rcv *IonoObservation_Ingest) FxI() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(94))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// The highest frequency of F-trace in MHz. Note: fxI is with capital i. URSI ID: 51.
/// Example: /// Example: 7.525
/// Constraints: No constraints specified.
func (rcv *IonoObservation_Ingest) MutateFxI(n float64) bool {
	return rcv._tab.MutateFloat64Slot(94, n)
}

/// The minimum virtual height of the ordinary wave trace taken as a whole, in km. URSI ID: 16.
/// Example: /// Example: 238.5
/// Constraints: No constraints specified.
func (rcv *IonoObservation_Ingest) HprimeF() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(96))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// The minimum virtual height of the ordinary wave trace taken as a whole, in km. URSI ID: 16.
/// Example: /// Example: 238.5
/// Constraints: No constraints specified.
func (rcv *IonoObservation_Ingest) MutateHprimeF(n float64) bool {
	return rcv._tab.MutateFloat64Slot(96, n)
}

/// The minimum virtual height of ordinary wave trace for the highest stable stratification in the F region in km. URSI ID: 4.
/// Example: /// Example: 238.5
/// Constraints: No constraints specified.
func (rcv *IonoObservation_Ingest) HprimeF2() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(98))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// The minimum virtual height of ordinary wave trace for the highest stable stratification in the F region in km. URSI ID: 4.
/// Example: /// Example: 238.5
/// Constraints: No constraints specified.
func (rcv *IonoObservation_Ingest) MutateHprimeF2(n float64) bool {
	return rcv._tab.MutateFloat64Slot(98, n)
}

/// The minimum virtual height of reflection at a point where the trace is horizontal in the F region in km. URSI ID: 14.
/// Example: /// Example: 230.1
/// Constraints: No constraints specified.
func (rcv *IonoObservation_Ingest) HprimeF1() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(100))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// The minimum virtual height of reflection at a point where the trace is horizontal in the F region in km. URSI ID: 14.
/// Example: /// Example: 230.1
/// Constraints: No constraints specified.
func (rcv *IonoObservation_Ingest) MutateHprimeF1(n float64) bool {
	return rcv._tab.MutateFloat64Slot(100, n)
}

/// The minimum virtual height of the normal E layer trace in km. URSI ID: 24.
/// Example: /// Example: 98.47
/// Constraints: No constraints specified.
func (rcv *IonoObservation_Ingest) HprimeE() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(102))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// The minimum virtual height of the normal E layer trace in km. URSI ID: 24.
/// Example: /// Example: 98.47
/// Constraints: No constraints specified.
func (rcv *IonoObservation_Ingest) MutateHprimeE(n float64) bool {
	return rcv._tab.MutateFloat64Slot(102, n)
}

/// The minimum height of the trace used to give foEs in km. URSI ID: 34.
/// Example: /// Example: 95
/// Constraints: No constraints specified.
func (rcv *IonoObservation_Ingest) HprimeEs() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(104))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// The minimum height of the trace used to give foEs in km. URSI ID: 34.
/// Example: /// Example: 95
/// Constraints: No constraints specified.
func (rcv *IonoObservation_Ingest) MutateHprimeEs(n float64) bool {
	return rcv._tab.MutateFloat64Slot(104, n)
}

/// Peak height of E-layer in km. URSI ID: 90.
/// Example: /// Example: 91.744
/// Constraints: No constraints specified.
func (rcv *IonoObservation_Ingest) ZmE() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(106))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Peak height of E-layer in km. URSI ID: 90.
/// Example: /// Example: 91.744
/// Constraints: No constraints specified.
func (rcv *IonoObservation_Ingest) MutateZmE(n float64) bool {
	return rcv._tab.MutateFloat64Slot(106, n)
}

/// Parabolic E layer semi-thickness in km. URSI ID: 83.
/// Example: /// Example: 1.722
/// Constraints: No constraints specified.
func (rcv *IonoObservation_Ingest) YE() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(108))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Parabolic E layer semi-thickness in km. URSI ID: 83.
/// Example: /// Example: 1.722
/// Constraints: No constraints specified.
func (rcv *IonoObservation_Ingest) MutateYE(n float64) bool {
	return rcv._tab.MutateFloat64Slot(108, n)
}

/// Average range spread of F layer in km. URSI ID: 84.
/// Example: /// Example: 1.83
/// Constraints: No constraints specified.
func (rcv *IonoObservation_Ingest) Qf() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(110))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Average range spread of F layer in km. URSI ID: 84.
/// Example: /// Example: 1.83
/// Constraints: No constraints specified.
func (rcv *IonoObservation_Ingest) MutateQf(n float64) bool {
	return rcv._tab.MutateFloat64Slot(110, n)
}

/// Average range spread of E layer in km. URSI ID: 85.
/// Example: /// Example: 0.95
/// Constraints: No constraints specified.
func (rcv *IonoObservation_Ingest) Qe() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(112))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Average range spread of E layer in km. URSI ID: 85.
/// Example: /// Example: 0.95
/// Constraints: No constraints specified.
func (rcv *IonoObservation_Ingest) MutateQe(n float64) bool {
	return rcv._tab.MutateFloat64Slot(112, n)
}

/// Lowering of F trace to the leading edge in km.
/// Example: /// Example: 1.1
/// Constraints: No constraints specified.
func (rcv *IonoObservation_Ingest) DownF() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(114))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Lowering of F trace to the leading edge in km.
/// Example: /// Example: 1.1
/// Constraints: No constraints specified.
func (rcv *IonoObservation_Ingest) MutateDownF(n float64) bool {
	return rcv._tab.MutateFloat64Slot(114, n)
}

/// Lowering of E trace to the leading edge in km.
/// Example: /// Example: 1.1
/// Constraints: No constraints specified.
func (rcv *IonoObservation_Ingest) DownE() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(116))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Lowering of E trace to the leading edge in km.
/// Example: /// Example: 1.1
/// Constraints: No constraints specified.
func (rcv *IonoObservation_Ingest) MutateDownE(n float64) bool {
	return rcv._tab.MutateFloat64Slot(116, n)
}

/// Lowering of Es trace to the leading edge in km.
/// Example: /// Example: 1.1
/// Constraints: No constraints specified.
func (rcv *IonoObservation_Ingest) DownEs() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(118))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Lowering of Es trace to the leading edge in km.
/// Example: /// Example: 1.1
/// Constraints: No constraints specified.
func (rcv *IonoObservation_Ingest) MutateDownEs(n float64) bool {
	return rcv._tab.MutateFloat64Slot(118, n)
}

/// Frequency spread between fxF2 and FxI in MHz. URSI ID: 86.
/// Example: /// Example: 0.075
/// Constraints: No constraints specified.
func (rcv *IonoObservation_Ingest) Ff() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(120))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Frequency spread between fxF2 and FxI in MHz. URSI ID: 86.
/// Example: /// Example: 0.075
/// Constraints: No constraints specified.
func (rcv *IonoObservation_Ingest) MutateFf(n float64) bool {
	return rcv._tab.MutateFloat64Slot(120, n)
}

/// Frequency spread beyond foE in MHz. URSI ID: 87.
/// Example: /// Example: 1.23
/// Constraints: No constraints specified.
func (rcv *IonoObservation_Ingest) Fe() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(122))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Frequency spread beyond foE in MHz. URSI ID: 87.
/// Example: /// Example: 1.23
/// Constraints: No constraints specified.
func (rcv *IonoObservation_Ingest) MutateFe(n float64) bool {
	return rcv._tab.MutateFloat64Slot(122, n)
}

/// Distance for MUF calculation in km.
/// Example: /// Example: 1.1
/// Constraints: No constraints specified.
func (rcv *IonoObservation_Ingest) D() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(124))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Distance for MUF calculation in km.
/// Example: /// Example: 1.1
/// Constraints: No constraints specified.
func (rcv *IonoObservation_Ingest) MutateD(n float64) bool {
	return rcv._tab.MutateFloat64Slot(124, n)
}

/// MUF/OblFactor in MHz.
/// Example: /// Example: 1.1
/// Constraints: No constraints specified.
func (rcv *IonoObservation_Ingest) Fmuf() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(126))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// MUF/OblFactor in MHz.
/// Example: /// Example: 1.1
/// Constraints: No constraints specified.
func (rcv *IonoObservation_Ingest) MutateFmuf(n float64) bool {
	return rcv._tab.MutateFloat64Slot(126, n)
}

/// Virtual height at MUF/OblFactor frequency in MHz.
/// Example: /// Example: 1.1
/// Constraints: No constraints specified.
func (rcv *IonoObservation_Ingest) HprimefMuf() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(128))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Virtual height at MUF/OblFactor frequency in MHz.
/// Example: /// Example: 1.1
/// Constraints: No constraints specified.
func (rcv *IonoObservation_Ingest) MutateHprimefMuf(n float64) bool {
	return rcv._tab.MutateFloat64Slot(128, n)
}

/// Adjustment to the scaled foF2 during profile inversion in MHz.
/// Example: /// Example: 1.1
/// Constraints: No constraints specified.
func (rcv *IonoObservation_Ingest) DeltafoF2() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(130))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Adjustment to the scaled foF2 during profile inversion in MHz.
/// Example: /// Example: 1.1
/// Constraints: No constraints specified.
func (rcv *IonoObservation_Ingest) MutateDeltafoF2(n float64) bool {
	return rcv._tab.MutateFloat64Slot(130, n)
}

/// Predicted value of foE in MHz.
/// Example: /// Example: 1.1
/// Constraints: No constraints specified.
func (rcv *IonoObservation_Ingest) FoEp() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(132))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Predicted value of foE in MHz.
/// Example: /// Example: 1.1
/// Constraints: No constraints specified.
func (rcv *IonoObservation_Ingest) MutateFoEp(n float64) bool {
	return rcv._tab.MutateFloat64Slot(132, n)
}

/// The frequency at which hprimeF is measured in MHz. URSI ID: 61.
/// Example: /// Example: 2.5
/// Constraints: No constraints specified.
func (rcv *IonoObservation_Ingest) FhprimeF() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(134))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// The frequency at which hprimeF is measured in MHz. URSI ID: 61.
/// Example: /// Example: 2.5
/// Constraints: No constraints specified.
func (rcv *IonoObservation_Ingest) MutateFhprimeF(n float64) bool {
	return rcv._tab.MutateFloat64Slot(134, n)
}

/// The frequency at which hprimeF2 is measured in MHz. URSI ID: 60.
/// Example: /// Example: 2.5
/// Constraints: No constraints specified.
func (rcv *IonoObservation_Ingest) FhprimeF2() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(136))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// The frequency at which hprimeF2 is measured in MHz. URSI ID: 60.
/// Example: /// Example: 2.5
/// Constraints: No constraints specified.
func (rcv *IonoObservation_Ingest) MutateFhprimeF2(n float64) bool {
	return rcv._tab.MutateFloat64Slot(136, n)
}

/// Predicted value of foF1 in MHz.
/// Example: /// Example: 1.1
/// Constraints: No constraints specified.
func (rcv *IonoObservation_Ingest) FoF1p() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(138))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Predicted value of foF1 in MHz.
/// Example: /// Example: 1.1
/// Constraints: No constraints specified.
func (rcv *IonoObservation_Ingest) MutateFoF1p(n float64) bool {
	return rcv._tab.MutateFloat64Slot(138, n)
}

/// Predicted value of foF2 in MHz.
/// Example: /// Example: 1.1
/// Constraints: No constraints specified.
func (rcv *IonoObservation_Ingest) FoF2p() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(140))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Predicted value of foF2 in MHz.
/// Example: /// Example: 1.1
/// Constraints: No constraints specified.
func (rcv *IonoObservation_Ingest) MutateFoF2p(n float64) bool {
	return rcv._tab.MutateFloat64Slot(140, n)
}

/// True height of the F2 peak in km. URSI ID: AE.
/// Example: /// Example: 240.498
/// Constraints: No constraints specified.
func (rcv *IonoObservation_Ingest) HmF2() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(142))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// True height of the F2 peak in km. URSI ID: AE.
/// Example: /// Example: 240.498
/// Constraints: No constraints specified.
func (rcv *IonoObservation_Ingest) MutateHmF2(n float64) bool {
	return rcv._tab.MutateFloat64Slot(142, n)
}

/// True height of the F1 peak in km. URSI ID: BE.
/// Example: /// Example: 230.128
/// Constraints: No constraints specified.
func (rcv *IonoObservation_Ingest) HmF1() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(144))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// True height of the F1 peak in km. URSI ID: BE.
/// Example: /// Example: 230.128
/// Constraints: No constraints specified.
func (rcv *IonoObservation_Ingest) MutateHmF1(n float64) bool {
	return rcv._tab.MutateFloat64Slot(144, n)
}

/// True height of the E peak in km. URSI ID: CE.
/// Example: /// Example: 215.643
/// Constraints: No constraints specified.
func (rcv *IonoObservation_Ingest) HmE() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(146))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// True height of the E peak in km. URSI ID: CE.
/// Example: /// Example: 215.643
/// Constraints: No constraints specified.
func (rcv *IonoObservation_Ingest) MutateHmE(n float64) bool {
	return rcv._tab.MutateFloat64Slot(146, n)
}

/// True height at half peak electron density in the F2 layer in km. URSI ID: 93.
/// Example: /// Example: 240.498
/// Constraints: No constraints specified.
func (rcv *IonoObservation_Ingest) ZhalfNm() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(148))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// True height at half peak electron density in the F2 layer in km. URSI ID: 93.
/// Example: /// Example: 240.498
/// Constraints: No constraints specified.
func (rcv *IonoObservation_Ingest) MutateZhalfNm(n float64) bool {
	return rcv._tab.MutateFloat64Slot(148, n)
}

/// Minimum frequency of Es layer in MHz.
/// Example: /// Example: 1.1
/// Constraints: No constraints specified.
func (rcv *IonoObservation_Ingest) FminEs() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(150))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Minimum frequency of Es layer in MHz.
/// Example: /// Example: 1.1
/// Constraints: No constraints specified.
func (rcv *IonoObservation_Ingest) MutateFminEs(n float64) bool {
	return rcv._tab.MutateFloat64Slot(150, n)
}

/// Parabolic F2 layer semi-thickness in km. URSI ID: 94.
/// Example: /// Example: 62.178
/// Constraints: No constraints specified.
func (rcv *IonoObservation_Ingest) YF2() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(152))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Parabolic F2 layer semi-thickness in km. URSI ID: 94.
/// Example: /// Example: 62.178
/// Constraints: No constraints specified.
func (rcv *IonoObservation_Ingest) MutateYF2(n float64) bool {
	return rcv._tab.MutateFloat64Slot(152, n)
}

/// Parabolic F1 layer semi-thickness in km. URSI ID: 95.
/// Example: /// Example: 55.645
/// Constraints: No constraints specified.
func (rcv *IonoObservation_Ingest) YF1() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(154))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Parabolic F1 layer semi-thickness in km. URSI ID: 95.
/// Example: /// Example: 55.645
/// Constraints: No constraints specified.
func (rcv *IonoObservation_Ingest) MutateYF1(n float64) bool {
	return rcv._tab.MutateFloat64Slot(154, n)
}

/// Total Ionospheric Electron Content *10^16e/m^2. 1 TEC Unit (TECU) = 10^16 electrons/m^2. URSI ID: 72.
/// Example: /// Example: 24.673
/// Constraints: No constraints specified.
func (rcv *IonoObservation_Ingest) Tec() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(156))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Total Ionospheric Electron Content *10^16e/m^2. 1 TEC Unit (TECU) = 10^16 electrons/m^2. URSI ID: 72.
/// Example: /// Example: 24.673
/// Constraints: No constraints specified.
func (rcv *IonoObservation_Ingest) MutateTec(n float64) bool {
	return rcv._tab.MutateFloat64Slot(156, n)
}

/// Effective scale height at hmF2 Titheridge method in km. URSI ID: 69.
/// Example: /// Example: 35.613
/// Constraints: No constraints specified.
func (rcv *IonoObservation_Ingest) ScaleHeightF2Peak() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(158))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Effective scale height at hmF2 Titheridge method in km. URSI ID: 69.
/// Example: /// Example: 35.613
/// Constraints: No constraints specified.
func (rcv *IonoObservation_Ingest) MutateScaleHeightF2Peak(n float64) bool {
	return rcv._tab.MutateFloat64Slot(158, n)
}

/// IRI thickness parameter in km. URSI ID: D0.
/// Example: /// Example: 68.07
/// Constraints: No constraints specified.
func (rcv *IonoObservation_Ingest) B0() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(160))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// IRI thickness parameter in km. URSI ID: D0.
/// Example: /// Example: 68.07
/// Constraints: No constraints specified.
func (rcv *IonoObservation_Ingest) MutateB0(n float64) bool {
	return rcv._tab.MutateFloat64Slot(160, n)
}

/// IRI profile shape parameter. URSI ID: D1.
/// Example: /// Example: 1.87
/// Constraints: No constraints specified.
func (rcv *IonoObservation_Ingest) B1() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(162))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// IRI profile shape parameter. URSI ID: D1.
/// Example: /// Example: 1.87
/// Constraints: No constraints specified.
func (rcv *IonoObservation_Ingest) MutateB1(n float64) bool {
	return rcv._tab.MutateFloat64Slot(162, n)
}

/// IRI profile shape parameter, F1 layer. URSI ID: D2.
/// Example: /// Example: 1.94
/// Constraints: No constraints specified.
func (rcv *IonoObservation_Ingest) D1() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(164))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// IRI profile shape parameter, F1 layer. URSI ID: D2.
/// Example: /// Example: 1.94
/// Constraints: No constraints specified.
func (rcv *IonoObservation_Ingest) MutateD1(n float64) bool {
	return rcv._tab.MutateFloat64Slot(164, n)
}

/// Critical frequency of night time auroral E layer in MHz. URSI ID: 23.
/// Example: /// Example: 45.764
/// Constraints: No constraints specified.
func (rcv *IonoObservation_Ingest) FoEa() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(166))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Critical frequency of night time auroral E layer in MHz. URSI ID: 23.
/// Example: /// Example: 45.764
/// Constraints: No constraints specified.
func (rcv *IonoObservation_Ingest) MutateFoEa(n float64) bool {
	return rcv._tab.MutateFloat64Slot(166, n)
}

/// Minimum virtual height of night time auroral E layer trace in km. URSI ID: 27.
/// Example: /// Example: 102.6
/// Constraints: No constraints specified.
func (rcv *IonoObservation_Ingest) HprimeEa() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(168))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Minimum virtual height of night time auroral E layer trace in km. URSI ID: 27.
/// Example: /// Example: 102.6
/// Constraints: No constraints specified.
func (rcv *IonoObservation_Ingest) MutateHprimeEa(n float64) bool {
	return rcv._tab.MutateFloat64Slot(168, n)
}

/// Highest ordinary wave critical frequency of F region patch trace in MHz. URSI ID: 55.
/// Example: /// Example: 87.21
/// Constraints: No constraints specified.
func (rcv *IonoObservation_Ingest) FoP() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(170))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Highest ordinary wave critical frequency of F region patch trace in MHz. URSI ID: 55.
/// Example: /// Example: 87.21
/// Constraints: No constraints specified.
func (rcv *IonoObservation_Ingest) MutateFoP(n float64) bool {
	return rcv._tab.MutateFloat64Slot(170, n)
}

/// Minimum virtual height of the trace used to determine foP in km. URSI ID: 56.
/// Example: /// Example: 89.45
/// Constraints: No constraints specified.
func (rcv *IonoObservation_Ingest) HprimeP() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(172))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Minimum virtual height of the trace used to determine foP in km. URSI ID: 56.
/// Example: /// Example: 89.45
/// Constraints: No constraints specified.
func (rcv *IonoObservation_Ingest) MutateHprimeP(n float64) bool {
	return rcv._tab.MutateFloat64Slot(172, n)
}

/// The blanketing frequency of layer used to derive foEs in MHz. URSI ID: 32.
/// Example: /// Example: 34.867
/// Constraints: No constraints specified.
func (rcv *IonoObservation_Ingest) FbEs() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(174))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// The blanketing frequency of layer used to derive foEs in MHz. URSI ID: 32.
/// Example: /// Example: 34.867
/// Constraints: No constraints specified.
func (rcv *IonoObservation_Ingest) MutateFbEs(n float64) bool {
	return rcv._tab.MutateFloat64Slot(174, n)
}

/// Characterization of the shape of Es trace. URSI ID: 36.
/// Example: /// Example: Auroral
/// Constraints: Minimum length = 0, Maximum length = 25
func (rcv *IonoObservation_Ingest) TypeEs() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(176))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Characterization of the shape of Es trace. URSI ID: 36.
/// Example: /// Example: Auroral
/// Constraints: Minimum length = 0, Maximum length = 25
/// List of attributes that are associated with the specified characteristics. Characteristics are defined by the CHARS: URSI IIWG format for archiving monthly ionospheric characteristics, INAG Bulletin No. 62 specification. 
/// Qualifying and Descriptive letters are defined by the URSI Handbook for Ionogram Interpretation and reduction, Report UAG, No. 23A specification.
/// Example: /// Example: No example provided.
/// Constraints: No constraints specified.
func (rcv *IonoObservation_Ingest) CharAtts(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(178))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *IonoObservation_Ingest) CharAttsLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(178))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

/// List of attributes that are associated with the specified characteristics. Characteristics are defined by the CHARS: URSI IIWG format for archiving monthly ionospheric characteristics, INAG Bulletin No. 62 specification. 
/// Qualifying and Descriptive letters are defined by the URSI Handbook for Ionogram Interpretation and reduction, Report UAG, No. 23A specification.
/// Example: /// Example: No example provided.
/// Constraints: No constraints specified.
/// Array of altitudes above station level for plasma frequency/density arrays in km (must match the size of the plasmaFrequency and electronDensity Arrays).
/// Example: /// Example: [1.1, 2.1, 3.1]
/// Constraints: No constraints specified.
func (rcv *IonoObservation_Ingest) Height(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(180))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *IonoObservation_Ingest) HeightLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(180))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

/// Array of altitudes above station level for plasma frequency/density arrays in km (must match the size of the plasmaFrequency and electronDensity Arrays).
/// Example: /// Example: [1.1, 2.1, 3.1]
/// Constraints: No constraints specified.
/// Array of plasma frequencies in MHz (must match the size of the height and electronDensity arrays).
/// Example: /// Example: [1.1, 2.1, 3.1]
/// Constraints: No constraints specified.
func (rcv *IonoObservation_Ingest) PlasmaFrequency(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(182))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *IonoObservation_Ingest) PlasmaFrequencyLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(182))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

/// Array of plasma frequencies in MHz (must match the size of the height and electronDensity arrays).
/// Example: /// Example: [1.1, 2.1, 3.1]
/// Constraints: No constraints specified.
/// Uncertainty in specifying the electron plasma frequency at each height point of the profile (must match the size of the plasmaFrequency array).
/// Example: /// Example: [0.8, 0.2, 0.5]
/// Constraints: No constraints specified.
func (rcv *IonoObservation_Ingest) PlasmaFrequencyUncertainty(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(184))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *IonoObservation_Ingest) PlasmaFrequencyUncertaintyLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(184))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

/// Uncertainty in specifying the electron plasma frequency at each height point of the profile (must match the size of the plasmaFrequency array).
/// Example: /// Example: [0.8, 0.2, 0.5]
/// Constraints: No constraints specified.
/// Array of electron densities in cm^-3 (must match the size of the height and plasmaFrequency arrays).
/// Example: /// Example: [1.1, 2.1, 3.1]
/// Constraints: No constraints specified.
func (rcv *IonoObservation_Ingest) ElectronDensity(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(186))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *IonoObservation_Ingest) ElectronDensityLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(186))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

/// Array of electron densities in cm^-3 (must match the size of the height and plasmaFrequency arrays).
/// Example: /// Example: [1.1, 2.1, 3.1]
/// Constraints: No constraints specified.
/// Uncertainty in specifying the electron density at each height point of the profile (must match the size of the electronDensity array).
/// Example: /// Example: [0.8, 0.2, 0.5]
/// Constraints: No constraints specified.
func (rcv *IonoObservation_Ingest) ElectronDensityUncertainty(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(188))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *IonoObservation_Ingest) ElectronDensityUncertaintyLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(188))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

/// Uncertainty in specifying the electron density at each height point of the profile (must match the size of the electronDensity array).
/// Example: /// Example: [0.8, 0.2, 0.5]
/// Constraints: No constraints specified.
/// Array of Legacy Artist Flags.
/// Example: /// Example: [1, 2, 3]
/// Constraints: No constraints specified.
func (rcv *IonoObservation_Ingest) ArtistFlags(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(190))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *IonoObservation_Ingest) ArtistFlagsLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(190))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

/// Array of Legacy Artist Flags.
/// Example: /// Example: [1, 2, 3]
/// Constraints: No constraints specified.
/// No description provided.
/// Example: /// Example: No example provided.
/// Constraints: No constraints specified.
func (rcv *IonoObservation_Ingest) TraceGeneric() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(192))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// No description provided.
/// Example: /// Example: No example provided.
/// Constraints: No constraints specified.
/// Array of speed in m/s at which the disturbance travels through the ionosphere.
/// Example: /// Example: [1.1, 2.1, 3.1]
/// Constraints: No constraints specified.
func (rcv *IonoObservation_Ingest) TidPhaseSpeeds(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(194))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *IonoObservation_Ingest) TidPhaseSpeedsLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(194))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

/// Array of speed in m/s at which the disturbance travels through the ionosphere.
/// Example: /// Example: [1.1, 2.1, 3.1]
/// Constraints: No constraints specified.
/// Array of degrees clockwise from true North of the TID.
/// Example: /// Example: [1.1, 2.1, 3.1]
/// Constraints: No constraints specified.
func (rcv *IonoObservation_Ingest) TidAzimuth(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(196))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *IonoObservation_Ingest) TidAzimuthLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(196))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

/// Array of degrees clockwise from true North of the TID.
/// Example: /// Example: [1.1, 2.1, 3.1]
/// Constraints: No constraints specified.
/// Array of 1/frequency of the TID wave.
/// Example: /// Example: [1.1, 2.1, 3.1]
/// Constraints: No constraints specified.
func (rcv *IonoObservation_Ingest) TidPeriods(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(198))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *IonoObservation_Ingest) TidPeriodsLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(198))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

/// Array of 1/frequency of the TID wave.
/// Example: /// Example: [1.1, 2.1, 3.1]
/// Constraints: No constraints specified.
/// No description provided.
/// Example: /// Example: No example provided.
/// Constraints: No constraints specified.
func (rcv *IonoObservation_Ingest) Datum() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(200))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// No description provided.
/// Example: /// Example: No example provided.
/// Constraints: No constraints specified.
/// Equipment location.
/// Example: /// Example: Millstone Hill
/// Constraints: Minimum length = 0, Maximum length = 512
func (rcv *IonoObservation_Ingest) PlatformName() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(202))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Equipment location.
/// Example: /// Example: Millstone Hill
/// Constraints: Minimum length = 0, Maximum length = 512
/// Time the row was created in the database, auto-populated by the system.
/// Example: /// Example: 2018-01-01T16:00:00.123Z
/// Constraints: No constraints specified.
func (rcv *IonoObservation_Ingest) CreatedAt() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(204))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Time the row was created in the database, auto-populated by the system.
/// Example: /// Example: 2018-01-01T16:00:00.123Z
/// Constraints: No constraints specified.
/// Application user who created the row in the database, auto-populated by the system.
/// Example: /// Example: some.user
/// Constraints: Minimum length = 0, Maximum length = 64
func (rcv *IonoObservation_Ingest) CreatedBy() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(206))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Application user who created the row in the database, auto-populated by the system.
/// Example: /// Example: some.user
/// Constraints: Minimum length = 0, Maximum length = 64
/// Time the row was updated in the database, auto-populated by the system, example = 2018-01-01T16:00:00.123Z.
/// Example: /// Example: 2018-01-01T16:00:00.123Z
/// Constraints: No constraints specified.
func (rcv *IonoObservation_Ingest) UpdatedAt() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(208))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Time the row was updated in the database, auto-populated by the system, example = 2018-01-01T16:00:00.123Z.
/// Example: /// Example: 2018-01-01T16:00:00.123Z
/// Constraints: No constraints specified.
/// Application user who updated the row in the database, auto-populated by the system.
/// Example: /// Example: some.user
/// Constraints: Minimum length = 0, Maximum length = 64
func (rcv *IonoObservation_Ingest) UpdatedBy() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(210))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Application user who updated the row in the database, auto-populated by the system.
/// Example: /// Example: some.user
/// Constraints: Minimum length = 0, Maximum length = 64
/// Source of the data.
/// Example: /// Example: Bluestaq
/// Constraints: Minimum length = 1, Maximum length = 64
func (rcv *IonoObservation_Ingest) Source() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(212))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Source of the data.
/// Example: /// Example: Bluestaq
/// Constraints: Minimum length = 1, Maximum length = 64
/// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
/// Example: /// Example: THIRD_PARTY_DATASOURCE
/// Constraints: Minimum length = 0, Maximum length = 64
func (rcv *IonoObservation_Ingest) Origin() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(214))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
/// Example: /// Example: THIRD_PARTY_DATASOURCE
/// Constraints: Minimum length = 0, Maximum length = 64
/// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
/// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
/// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
/// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
/// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
/// Example: /// Example: TEST
/// Constraints: Minimum length = 1, Maximum length = 32
func (rcv *IonoObservation_Ingest) DataMode() IonoObservation_Ingest_dataMode_Enum {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(216))
	if o != 0 {
		return IonoObservation_Ingest_dataMode_Enum(rcv._tab.GetInt8(o + rcv._tab.Pos))
	}
	return 0
}

/// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
/// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
/// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
/// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
/// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
/// Example: /// Example: TEST
/// Constraints: Minimum length = 1, Maximum length = 32
func (rcv *IonoObservation_Ingest) MutateDataMode(n IonoObservation_Ingest_dataMode_Enum) bool {
	return rcv._tab.MutateInt8Slot(216, int8(n))
}

/// The originating source network on which this record was created, auto-populated by the system.
/// Example: /// Example: ORIG
/// Constraints: Minimum length = 1, Maximum length = 32
func (rcv *IonoObservation_Ingest) OrigNetwork() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(218))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The originating source network on which this record was created, auto-populated by the system.
/// Example: /// Example: ORIG
/// Constraints: Minimum length = 1, Maximum length = 32
func IonoObservation_IngestStart(builder *flatbuffers.Builder) {
	builder.StartObject(108)
}
func IonoObservation_IngestAddId(builder *flatbuffers.Builder, id flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(id), 0)
}
func IonoObservation_IngestAddClassificationMarking(builder *flatbuffers.Builder, classificationMarking flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(classificationMarking), 0)
}
func IonoObservation_IngestAddIdSensor(builder *flatbuffers.Builder, idSensor flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(idSensor), 0)
}
func IonoObservation_IngestAddOrigSensorId(builder *flatbuffers.Builder, origSensorId flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(3, flatbuffers.UOffsetT(origSensorId), 0)
}
func IonoObservation_IngestAddSystem(builder *flatbuffers.Builder, system flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(4, flatbuffers.UOffsetT(system), 0)
}
func IonoObservation_IngestAddNeProfileName(builder *flatbuffers.Builder, neProfileName flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(5, flatbuffers.UOffsetT(neProfileName), 0)
}
func IonoObservation_IngestAddNeProfileVersion(builder *flatbuffers.Builder, neProfileVersion float64) {
	builder.PrependFloat64Slot(6, neProfileVersion, 0.0)
}
func IonoObservation_IngestAddScalerInfo(builder *flatbuffers.Builder, scalerInfo flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(7, flatbuffers.UOffsetT(scalerInfo), 0)
}
func IonoObservation_IngestAddDensityProfile(builder *flatbuffers.Builder, densityProfile flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(8, flatbuffers.UOffsetT(densityProfile), 0)
}
func IonoObservation_IngestAddStationId(builder *flatbuffers.Builder, stationId flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(9, flatbuffers.UOffsetT(stationId), 0)
}
func IonoObservation_IngestAddStartTimeUtc(builder *flatbuffers.Builder, startTimeUtc flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(10, flatbuffers.UOffsetT(startTimeUtc), 0)
}
func IonoObservation_IngestAddSystemInfo(builder *flatbuffers.Builder, systemInfo flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(11, flatbuffers.UOffsetT(systemInfo), 0)
}
func IonoObservation_IngestAddSystemNotes(builder *flatbuffers.Builder, systemNotes flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(12, flatbuffers.UOffsetT(systemNotes), 0)
}
func IonoObservation_IngestAddTransmitCoordinates(builder *flatbuffers.Builder, transmitCoordinates flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(13, flatbuffers.UOffsetT(transmitCoordinates), 0)
}
func IonoObservation_IngestStartTransmitCoordinatesVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func IonoObservation_IngestAddTransmitSensorType(builder *flatbuffers.Builder, transmitSensorType IonoObservation_Ingest_transmitSensorType_Enum) {
	builder.PrependInt8Slot(14, int8(transmitSensorType), 0)
}
func IonoObservation_IngestAddReceiveCoordinates(builder *flatbuffers.Builder, receiveCoordinates flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(15, flatbuffers.UOffsetT(receiveCoordinates), 0)
}
func IonoObservation_IngestStartReceiveCoordinatesVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func IonoObservation_IngestAddReceiveSensorType(builder *flatbuffers.Builder, receiveSensorType IonoObservation_Ingest_receiveSensorType_Enum) {
	builder.PrependInt8Slot(16, int8(receiveSensorType), 0)
}
func IonoObservation_IngestAddAntennaElementPosition(builder *flatbuffers.Builder, antennaElementPosition flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(17, flatbuffers.UOffsetT(antennaElementPosition), 0)
}
func IonoObservation_IngestAddAntennaElementPositionCoordinateSystem(builder *flatbuffers.Builder, antennaElementPositionCoordinateSystem IonoObservation_Ingest_antennaElementPositionCoordinateSystem_Enum) {
	builder.PrependInt8Slot(18, int8(antennaElementPositionCoordinateSystem), 0)
}
func IonoObservation_IngestAddPower(builder *flatbuffers.Builder, power flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(19, flatbuffers.UOffsetT(power), 0)
}
func IonoObservation_IngestAddRange(builder *flatbuffers.Builder, range_ flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(20, flatbuffers.UOffsetT(range_), 0)
}
func IonoObservation_IngestAddFrequency(builder *flatbuffers.Builder, frequency flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(21, flatbuffers.UOffsetT(frequency), 0)
}
func IonoObservation_IngestAddPolarization(builder *flatbuffers.Builder, polarization flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(22, flatbuffers.UOffsetT(polarization), 0)
}
func IonoObservation_IngestAddAzimuth(builder *flatbuffers.Builder, azimuth flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(23, flatbuffers.UOffsetT(azimuth), 0)
}
func IonoObservation_IngestAddElevation(builder *flatbuffers.Builder, elevation flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(24, flatbuffers.UOffsetT(elevation), 0)
}
func IonoObservation_IngestAddRestrictedFrequency(builder *flatbuffers.Builder, restrictedFrequency flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(25, flatbuffers.UOffsetT(restrictedFrequency), 0)
}
func IonoObservation_IngestStartRestrictedFrequencyVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func IonoObservation_IngestAddRestrictedFrequencyNotes(builder *flatbuffers.Builder, restrictedFrequencyNotes flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(26, flatbuffers.UOffsetT(restrictedFrequencyNotes), 0)
}
func IonoObservation_IngestAddDoppler(builder *flatbuffers.Builder, doppler flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(27, flatbuffers.UOffsetT(doppler), 0)
}
func IonoObservation_IngestAddTime(builder *flatbuffers.Builder, time flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(28, flatbuffers.UOffsetT(time), 0)
}
func IonoObservation_IngestAddStokes(builder *flatbuffers.Builder, stokes flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(29, flatbuffers.UOffsetT(stokes), 0)
}
func IonoObservation_IngestAddAmplitude(builder *flatbuffers.Builder, amplitude flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(30, flatbuffers.UOffsetT(amplitude), 0)
}
func IonoObservation_IngestAddPhase(builder *flatbuffers.Builder, phase flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(31, flatbuffers.UOffsetT(phase), 0)
}
func IonoObservation_IngestAddFoF2(builder *flatbuffers.Builder, foF2 float64) {
	builder.PrependFloat64Slot(32, foF2, 0.0)
}
func IonoObservation_IngestAddFoF1(builder *flatbuffers.Builder, foF1 float64) {
	builder.PrependFloat64Slot(33, foF1, 0.0)
}
func IonoObservation_IngestAddFxF2(builder *flatbuffers.Builder, fxF2 float64) {
	builder.PrependFloat64Slot(34, fxF2, 0.0)
}
func IonoObservation_IngestAddFxF1(builder *flatbuffers.Builder, fxF1 float64) {
	builder.PrependFloat64Slot(35, fxF1, 0.0)
}
func IonoObservation_IngestAddMd(builder *flatbuffers.Builder, md float64) {
	builder.PrependFloat64Slot(36, md, 0.0)
}
func IonoObservation_IngestAddLuf(builder *flatbuffers.Builder, luf float64) {
	builder.PrependFloat64Slot(37, luf, 0.0)
}
func IonoObservation_IngestAddMufd(builder *flatbuffers.Builder, mufd float64) {
	builder.PrependFloat64Slot(38, mufd, 0.0)
}
func IonoObservation_IngestAddFmin(builder *flatbuffers.Builder, fmin float64) {
	builder.PrependFloat64Slot(39, fmin, 0.0)
}
func IonoObservation_IngestAddFoEs(builder *flatbuffers.Builder, foEs float64) {
	builder.PrependFloat64Slot(40, foEs, 0.0)
}
func IonoObservation_IngestAddFminF(builder *flatbuffers.Builder, fminF float64) {
	builder.PrependFloat64Slot(41, fminF, 0.0)
}
func IonoObservation_IngestAddFminE(builder *flatbuffers.Builder, fminE float64) {
	builder.PrependFloat64Slot(42, fminE, 0.0)
}
func IonoObservation_IngestAddFoE(builder *flatbuffers.Builder, foE float64) {
	builder.PrependFloat64Slot(43, foE, 0.0)
}
func IonoObservation_IngestAddFxE(builder *flatbuffers.Builder, fxE float64) {
	builder.PrependFloat64Slot(44, fxE, 0.0)
}
func IonoObservation_IngestAddFxI(builder *flatbuffers.Builder, fxI float64) {
	builder.PrependFloat64Slot(45, fxI, 0.0)
}
func IonoObservation_IngestAddHprimeF(builder *flatbuffers.Builder, hprimeF float64) {
	builder.PrependFloat64Slot(46, hprimeF, 0.0)
}
func IonoObservation_IngestAddHprimeF2(builder *flatbuffers.Builder, hprimeF2 float64) {
	builder.PrependFloat64Slot(47, hprimeF2, 0.0)
}
func IonoObservation_IngestAddHprimeF1(builder *flatbuffers.Builder, hprimeF1 float64) {
	builder.PrependFloat64Slot(48, hprimeF1, 0.0)
}
func IonoObservation_IngestAddHprimeE(builder *flatbuffers.Builder, hprimeE float64) {
	builder.PrependFloat64Slot(49, hprimeE, 0.0)
}
func IonoObservation_IngestAddHprimeEs(builder *flatbuffers.Builder, hprimeEs float64) {
	builder.PrependFloat64Slot(50, hprimeEs, 0.0)
}
func IonoObservation_IngestAddZmE(builder *flatbuffers.Builder, zmE float64) {
	builder.PrependFloat64Slot(51, zmE, 0.0)
}
func IonoObservation_IngestAddYE(builder *flatbuffers.Builder, yE float64) {
	builder.PrependFloat64Slot(52, yE, 0.0)
}
func IonoObservation_IngestAddQf(builder *flatbuffers.Builder, qf float64) {
	builder.PrependFloat64Slot(53, qf, 0.0)
}
func IonoObservation_IngestAddQe(builder *flatbuffers.Builder, qe float64) {
	builder.PrependFloat64Slot(54, qe, 0.0)
}
func IonoObservation_IngestAddDownF(builder *flatbuffers.Builder, downF float64) {
	builder.PrependFloat64Slot(55, downF, 0.0)
}
func IonoObservation_IngestAddDownE(builder *flatbuffers.Builder, downE float64) {
	builder.PrependFloat64Slot(56, downE, 0.0)
}
func IonoObservation_IngestAddDownEs(builder *flatbuffers.Builder, downEs float64) {
	builder.PrependFloat64Slot(57, downEs, 0.0)
}
func IonoObservation_IngestAddFf(builder *flatbuffers.Builder, ff float64) {
	builder.PrependFloat64Slot(58, ff, 0.0)
}
func IonoObservation_IngestAddFe(builder *flatbuffers.Builder, fe float64) {
	builder.PrependFloat64Slot(59, fe, 0.0)
}
func IonoObservation_IngestAddD(builder *flatbuffers.Builder, d float64) {
	builder.PrependFloat64Slot(60, d, 0.0)
}
func IonoObservation_IngestAddFmuf(builder *flatbuffers.Builder, fmuf float64) {
	builder.PrependFloat64Slot(61, fmuf, 0.0)
}
func IonoObservation_IngestAddHprimefMuf(builder *flatbuffers.Builder, hprimefMuf float64) {
	builder.PrependFloat64Slot(62, hprimefMuf, 0.0)
}
func IonoObservation_IngestAddDeltafoF2(builder *flatbuffers.Builder, deltafoF2 float64) {
	builder.PrependFloat64Slot(63, deltafoF2, 0.0)
}
func IonoObservation_IngestAddFoEp(builder *flatbuffers.Builder, foEp float64) {
	builder.PrependFloat64Slot(64, foEp, 0.0)
}
func IonoObservation_IngestAddFhprimeF(builder *flatbuffers.Builder, fhprimeF float64) {
	builder.PrependFloat64Slot(65, fhprimeF, 0.0)
}
func IonoObservation_IngestAddFhprimeF2(builder *flatbuffers.Builder, fhprimeF2 float64) {
	builder.PrependFloat64Slot(66, fhprimeF2, 0.0)
}
func IonoObservation_IngestAddFoF1p(builder *flatbuffers.Builder, foF1p float64) {
	builder.PrependFloat64Slot(67, foF1p, 0.0)
}
func IonoObservation_IngestAddFoF2p(builder *flatbuffers.Builder, foF2p float64) {
	builder.PrependFloat64Slot(68, foF2p, 0.0)
}
func IonoObservation_IngestAddHmF2(builder *flatbuffers.Builder, hmF2 float64) {
	builder.PrependFloat64Slot(69, hmF2, 0.0)
}
func IonoObservation_IngestAddHmF1(builder *flatbuffers.Builder, hmF1 float64) {
	builder.PrependFloat64Slot(70, hmF1, 0.0)
}
func IonoObservation_IngestAddHmE(builder *flatbuffers.Builder, hmE float64) {
	builder.PrependFloat64Slot(71, hmE, 0.0)
}
func IonoObservation_IngestAddZhalfNm(builder *flatbuffers.Builder, zhalfNm float64) {
	builder.PrependFloat64Slot(72, zhalfNm, 0.0)
}
func IonoObservation_IngestAddFminEs(builder *flatbuffers.Builder, fminEs float64) {
	builder.PrependFloat64Slot(73, fminEs, 0.0)
}
func IonoObservation_IngestAddYF2(builder *flatbuffers.Builder, yF2 float64) {
	builder.PrependFloat64Slot(74, yF2, 0.0)
}
func IonoObservation_IngestAddYF1(builder *flatbuffers.Builder, yF1 float64) {
	builder.PrependFloat64Slot(75, yF1, 0.0)
}
func IonoObservation_IngestAddTec(builder *flatbuffers.Builder, tec float64) {
	builder.PrependFloat64Slot(76, tec, 0.0)
}
func IonoObservation_IngestAddScaleHeightF2Peak(builder *flatbuffers.Builder, scaleHeightF2Peak float64) {
	builder.PrependFloat64Slot(77, scaleHeightF2Peak, 0.0)
}
func IonoObservation_IngestAddB0(builder *flatbuffers.Builder, b0 float64) {
	builder.PrependFloat64Slot(78, b0, 0.0)
}
func IonoObservation_IngestAddB1(builder *flatbuffers.Builder, b1 float64) {
	builder.PrependFloat64Slot(79, b1, 0.0)
}
func IonoObservation_IngestAddD1(builder *flatbuffers.Builder, d1 float64) {
	builder.PrependFloat64Slot(80, d1, 0.0)
}
func IonoObservation_IngestAddFoEa(builder *flatbuffers.Builder, foEa float64) {
	builder.PrependFloat64Slot(81, foEa, 0.0)
}
func IonoObservation_IngestAddHprimeEa(builder *flatbuffers.Builder, hprimeEa float64) {
	builder.PrependFloat64Slot(82, hprimeEa, 0.0)
}
func IonoObservation_IngestAddFoP(builder *flatbuffers.Builder, foP float64) {
	builder.PrependFloat64Slot(83, foP, 0.0)
}
func IonoObservation_IngestAddHprimeP(builder *flatbuffers.Builder, hprimeP float64) {
	builder.PrependFloat64Slot(84, hprimeP, 0.0)
}
func IonoObservation_IngestAddFbEs(builder *flatbuffers.Builder, fbEs float64) {
	builder.PrependFloat64Slot(85, fbEs, 0.0)
}
func IonoObservation_IngestAddTypeEs(builder *flatbuffers.Builder, typeEs flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(86, flatbuffers.UOffsetT(typeEs), 0)
}
func IonoObservation_IngestAddCharAtts(builder *flatbuffers.Builder, charAtts flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(87, flatbuffers.UOffsetT(charAtts), 0)
}
func IonoObservation_IngestStartCharAttsVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func IonoObservation_IngestAddHeight(builder *flatbuffers.Builder, height flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(88, flatbuffers.UOffsetT(height), 0)
}
func IonoObservation_IngestStartHeightVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func IonoObservation_IngestAddPlasmaFrequency(builder *flatbuffers.Builder, plasmaFrequency flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(89, flatbuffers.UOffsetT(plasmaFrequency), 0)
}
func IonoObservation_IngestStartPlasmaFrequencyVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func IonoObservation_IngestAddPlasmaFrequencyUncertainty(builder *flatbuffers.Builder, plasmaFrequencyUncertainty flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(90, flatbuffers.UOffsetT(plasmaFrequencyUncertainty), 0)
}
func IonoObservation_IngestStartPlasmaFrequencyUncertaintyVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func IonoObservation_IngestAddElectronDensity(builder *flatbuffers.Builder, electronDensity flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(91, flatbuffers.UOffsetT(electronDensity), 0)
}
func IonoObservation_IngestStartElectronDensityVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func IonoObservation_IngestAddElectronDensityUncertainty(builder *flatbuffers.Builder, electronDensityUncertainty flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(92, flatbuffers.UOffsetT(electronDensityUncertainty), 0)
}
func IonoObservation_IngestStartElectronDensityUncertaintyVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func IonoObservation_IngestAddArtistFlags(builder *flatbuffers.Builder, artistFlags flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(93, flatbuffers.UOffsetT(artistFlags), 0)
}
func IonoObservation_IngestStartArtistFlagsVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func IonoObservation_IngestAddTraceGeneric(builder *flatbuffers.Builder, traceGeneric flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(94, flatbuffers.UOffsetT(traceGeneric), 0)
}
func IonoObservation_IngestAddTidPhaseSpeeds(builder *flatbuffers.Builder, tidPhaseSpeeds flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(95, flatbuffers.UOffsetT(tidPhaseSpeeds), 0)
}
func IonoObservation_IngestStartTidPhaseSpeedsVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func IonoObservation_IngestAddTidAzimuth(builder *flatbuffers.Builder, tidAzimuth flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(96, flatbuffers.UOffsetT(tidAzimuth), 0)
}
func IonoObservation_IngestStartTidAzimuthVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func IonoObservation_IngestAddTidPeriods(builder *flatbuffers.Builder, tidPeriods flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(97, flatbuffers.UOffsetT(tidPeriods), 0)
}
func IonoObservation_IngestStartTidPeriodsVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func IonoObservation_IngestAddDatum(builder *flatbuffers.Builder, datum flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(98, flatbuffers.UOffsetT(datum), 0)
}
func IonoObservation_IngestAddPlatformName(builder *flatbuffers.Builder, platformName flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(99, flatbuffers.UOffsetT(platformName), 0)
}
func IonoObservation_IngestAddCreatedAt(builder *flatbuffers.Builder, createdAt flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(100, flatbuffers.UOffsetT(createdAt), 0)
}
func IonoObservation_IngestAddCreatedBy(builder *flatbuffers.Builder, createdBy flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(101, flatbuffers.UOffsetT(createdBy), 0)
}
func IonoObservation_IngestAddUpdatedAt(builder *flatbuffers.Builder, updatedAt flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(102, flatbuffers.UOffsetT(updatedAt), 0)
}
func IonoObservation_IngestAddUpdatedBy(builder *flatbuffers.Builder, updatedBy flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(103, flatbuffers.UOffsetT(updatedBy), 0)
}
func IonoObservation_IngestAddSource(builder *flatbuffers.Builder, source flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(104, flatbuffers.UOffsetT(source), 0)
}
func IonoObservation_IngestAddOrigin(builder *flatbuffers.Builder, origin flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(105, flatbuffers.UOffsetT(origin), 0)
}
func IonoObservation_IngestAddDataMode(builder *flatbuffers.Builder, dataMode IonoObservation_Ingest_dataMode_Enum) {
	builder.PrependInt8Slot(106, int8(dataMode), 0)
}
func IonoObservation_IngestAddOrigNetwork(builder *flatbuffers.Builder, origNetwork flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(107, flatbuffers.UOffsetT(origNetwork), 0)
}
func IonoObservation_IngestEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
