// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package ISRCollectionPeriods_Full

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

/// /// Tasking collection periods.
type ISRCollectionPeriods_Full struct {
	_tab flatbuffers.Table
}

const ISRCollectionPeriods_FullIdentifier = "ISRC"

func GetRootAsISRCollectionPeriods_Full(buf []byte, offset flatbuffers.UOffsetT) *ISRCollectionPeriods_Full {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &ISRCollectionPeriods_Full{}
	x.Init(buf, n+offset)
	return x
}

func FinishISRCollectionPeriods_FullBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	identifierBytes := []byte(ISRCollectionPeriods_FullIdentifier)
	builder.FinishWithFileIdentifier(offset, identifierBytes)
}

func ISRCollectionPeriods_FullBufferHasIdentifier(buf []byte) bool {
	return flatbuffers.BufferHasIdentifier(buf, ISRCollectionPeriods_FullIdentifier)
}

func GetSizePrefixedRootAsISRCollectionPeriods_Full(buf []byte, offset flatbuffers.UOffsetT) *ISRCollectionPeriods_Full {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &ISRCollectionPeriods_Full{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedISRCollectionPeriods_FullBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	identifierBytes := []byte(ISRCollectionPeriods_FullIdentifier)
	builder.FinishSizePrefixedWithFileIdentifier(offset, identifierBytes)
}

func SizePrefixedISRCollectionPeriods_FullBufferHasIdentifier(buf []byte) bool {
	return flatbuffers.SizePrefixedBufferHasIdentifier(buf, ISRCollectionPeriods_FullIdentifier)
}

func (rcv *ISRCollectionPeriods_Full) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *ISRCollectionPeriods_Full) Table() flatbuffers.Table {
	return rcv._tab
}

/// No description provided.
/// Example: /// Example: No example provided.
/// Constraints: No constraints specified.
func (rcv *ISRCollectionPeriods_Full) Planned() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// No description provided.
/// Example: /// Example: No example provided.
/// Constraints: No constraints specified.
/// Actual start and stop for the collection.
/// Example: /// Example: No example provided.
/// Constraints: No constraints specified.
func (rcv *ISRCollectionPeriods_Full) Actual(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *ISRCollectionPeriods_Full) ActualLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

/// Actual start and stop for the collection.
/// Example: /// Example: No example provided.
/// Constraints: No constraints specified.
func ISRCollectionPeriods_FullStart(builder *flatbuffers.Builder) {
	builder.StartObject(2)
}
func ISRCollectionPeriods_FullAddPlanned(builder *flatbuffers.Builder, planned flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(planned), 0)
}
func ISRCollectionPeriods_FullAddActual(builder *flatbuffers.Builder, actual flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(actual), 0)
}
func ISRCollectionPeriods_FullStartActualVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func ISRCollectionPeriods_FullEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
