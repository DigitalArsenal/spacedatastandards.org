// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package MtiMission_Ingest

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

/// /// Information on the mission and flight plans, the type and configuration of the platform, and the reference time.
type MtiMission_Ingest struct {
	_tab flatbuffers.Table
}

const MtiMission_IngestIdentifier = "MTIM"

func GetRootAsMtiMission_Ingest(buf []byte, offset flatbuffers.UOffsetT) *MtiMission_Ingest {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &MtiMission_Ingest{}
	x.Init(buf, n+offset)
	return x
}

func FinishMtiMission_IngestBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	identifierBytes := []byte(MtiMission_IngestIdentifier)
	builder.FinishWithFileIdentifier(offset, identifierBytes)
}

func MtiMission_IngestBufferHasIdentifier(buf []byte) bool {
	return flatbuffers.BufferHasIdentifier(buf, MtiMission_IngestIdentifier)
}

func GetSizePrefixedRootAsMtiMission_Ingest(buf []byte, offset flatbuffers.UOffsetT) *MtiMission_Ingest {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &MtiMission_Ingest{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedMtiMission_IngestBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	identifierBytes := []byte(MtiMission_IngestIdentifier)
	builder.FinishSizePrefixedWithFileIdentifier(offset, identifierBytes)
}

func SizePrefixedMtiMission_IngestBufferHasIdentifier(buf []byte) bool {
	return flatbuffers.SizePrefixedBufferHasIdentifier(buf, MtiMission_IngestIdentifier)
}

func (rcv *MtiMission_Ingest) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *MtiMission_Ingest) Table() flatbuffers.Table {
	return rcv._tab
}

/// The mission plan id.
/// Example: /// Example: M1-ID
/// Constraints: Minimum length = 0, Maximum length = 64
func (rcv *MtiMission_Ingest) M1() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The mission plan id.
/// Example: /// Example: M1-ID
/// Constraints: Minimum length = 0, Maximum length = 64
/// Unique identification of the flight plan.
/// Example: /// Example: M2-ID
/// Constraints: Minimum length = 0, Maximum length = 64
func (rcv *MtiMission_Ingest) M2() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Unique identification of the flight plan.
/// Example: /// Example: M2-ID
/// Constraints: Minimum length = 0, Maximum length = 64
/// Platform type that originated the data.
/// Example: /// Example: PLATFORM
/// Constraints: Minimum length = 0, Maximum length = 64
func (rcv *MtiMission_Ingest) M3() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Platform type that originated the data.
/// Example: /// Example: PLATFORM
/// Constraints: Minimum length = 0, Maximum length = 64
/// Identification of the platform variant, modifications, etc.
/// Example: /// Example: IDENT
/// Constraints: Minimum length = 0, Maximum length = 16
func (rcv *MtiMission_Ingest) M4() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Identification of the platform variant, modifications, etc.
/// Example: /// Example: IDENT
/// Constraints: Minimum length = 0, Maximum length = 16
/// Mission origination date.
/// Example: /// Example: 2018-01-01
/// Constraints: No constraints specified.
func (rcv *MtiMission_Ingest) MsnRefTs() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Mission origination date.
/// Example: /// Example: 2018-01-01
/// Constraints: No constraints specified.
func MtiMission_IngestStart(builder *flatbuffers.Builder) {
	builder.StartObject(5)
}
func MtiMission_IngestAddM1(builder *flatbuffers.Builder, m1 flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(m1), 0)
}
func MtiMission_IngestAddM2(builder *flatbuffers.Builder, m2 flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(m2), 0)
}
func MtiMission_IngestAddM3(builder *flatbuffers.Builder, m3 flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(m3), 0)
}
func MtiMission_IngestAddM4(builder *flatbuffers.Builder, m4 flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(3, flatbuffers.UOffsetT(m4), 0)
}
func MtiMission_IngestAddMsnRefTs(builder *flatbuffers.Builder, msnRefTs flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(4, flatbuffers.UOffsetT(msnRefTs), 0)
}
func MtiMission_IngestEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
