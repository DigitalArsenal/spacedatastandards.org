// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package SOIObservationSet_Full

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

/// /// These services provide operations for posting space object idenfification observation sets.
type SOIObservationSet_Full struct {
	_tab flatbuffers.Table
}

const SOIObservationSet_FullIdentifier = "SOIO"

func GetRootAsSOIObservationSet_Full(buf []byte, offset flatbuffers.UOffsetT) *SOIObservationSet_Full {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &SOIObservationSet_Full{}
	x.Init(buf, n+offset)
	return x
}

func FinishSOIObservationSet_FullBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	identifierBytes := []byte(SOIObservationSet_FullIdentifier)
	builder.FinishWithFileIdentifier(offset, identifierBytes)
}

func SOIObservationSet_FullBufferHasIdentifier(buf []byte) bool {
	return flatbuffers.BufferHasIdentifier(buf, SOIObservationSet_FullIdentifier)
}

func GetSizePrefixedRootAsSOIObservationSet_Full(buf []byte, offset flatbuffers.UOffsetT) *SOIObservationSet_Full {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &SOIObservationSet_Full{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedSOIObservationSet_FullBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	identifierBytes := []byte(SOIObservationSet_FullIdentifier)
	builder.FinishSizePrefixedWithFileIdentifier(offset, identifierBytes)
}

func SizePrefixedSOIObservationSet_FullBufferHasIdentifier(buf []byte) bool {
	return flatbuffers.SizePrefixedBufferHasIdentifier(buf, SOIObservationSet_FullIdentifier)
}

func (rcv *SOIObservationSet_Full) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *SOIObservationSet_Full) Table() flatbuffers.Table {
	return rcv._tab
}

/// Unique identifier of the record, auto-generated by the system.
/// Example: /// Example: 026dd511-8ba5-47d3-9909-836149f87686
/// Constraints: Minimum length = 1, Maximum length = 36
func (rcv *SOIObservationSet_Full) Id() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Unique identifier of the record, auto-generated by the system.
/// Example: /// Example: 026dd511-8ba5-47d3-9909-836149f87686
/// Constraints: Minimum length = 1, Maximum length = 36
/// Classification marking of the data in IC/CAPCO Portion-marked format.
/// Example: /// Example: U
/// Constraints: Minimum length = 1, Maximum length = 128
func (rcv *SOIObservationSet_Full) ClassificationMarking() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Classification marking of the data in IC/CAPCO Portion-marked format.
/// Example: /// Example: U
/// Constraints: Minimum length = 1, Maximum length = 128
/// SOI msgCreateDate time in ISO 8601 UTC time, with millisecond precision.
/// Example: /// Example: 2022-07-07T16:00:00.123Z
/// Constraints: No constraints specified.
func (rcv *SOIObservationSet_Full) MsgCreateDate() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// SOI msgCreateDate time in ISO 8601 UTC time, with millisecond precision.
/// Example: /// Example: 2022-07-07T16:00:00.123Z
/// Constraints: No constraints specified.
/// ID of the observing sensor.
/// Example: /// Example: SENSOR-ID
/// Constraints: Minimum length = 0, Maximum length = 36
func (rcv *SOIObservationSet_Full) IdSensor() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// ID of the observing sensor.
/// Example: /// Example: SENSOR-ID
/// Constraints: Minimum length = 0, Maximum length = 36
/// Optional identifier provided by the record source to indicate the sensor identifier to which this attitude set applies if this set is reporting a single sensor orientation. This may be an internal identifier and not necessarily a valid sensor ID.
/// Example: /// Example: ORIGSENSOR-ID
/// Constraints: Minimum length = 0, Maximum length = 64
func (rcv *SOIObservationSet_Full) OrigSensorId() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Optional identifier provided by the record source to indicate the sensor identifier to which this attitude set applies if this set is reporting a single sensor orientation. This may be an internal identifier and not necessarily a valid sensor ID.
/// Example: /// Example: ORIGSENSOR-ID
/// Constraints: Minimum length = 0, Maximum length = 64
/// ID of the AttitudeSet record for the observing sensor.
/// Example: /// Example: 026dd511-8ba5-47d3-9909-836149f87686
/// Constraints: Minimum length = 0, Maximum length = 36
func (rcv *SOIObservationSet_Full) SensorAsId() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// ID of the AttitudeSet record for the observing sensor.
/// Example: /// Example: 026dd511-8ba5-47d3-9909-836149f87686
/// Constraints: Minimum length = 0, Maximum length = 36
/// Unique identifier of the target on-orbit object, if correlated.
/// Example: /// Example: ONORBIT-ID
/// Constraints: Minimum length = 0, Maximum length = 36
func (rcv *SOIObservationSet_Full) IdOnOrbit() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Unique identifier of the target on-orbit object, if correlated.
/// Example: /// Example: ONORBIT-ID
/// Constraints: Minimum length = 0, Maximum length = 36
/// Satellite/catalog number of the target on-orbit object.
/// Example: /// Example: 101
/// Constraints: No constraints specified.
func (rcv *SOIObservationSet_Full) SatNo() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(18))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

/// Satellite/catalog number of the target on-orbit object.
/// Example: /// Example: 101
/// Constraints: No constraints specified.
func (rcv *SOIObservationSet_Full) MutateSatNo(n int32) bool {
	return rcv._tab.MutateInt32Slot(18, n)
}

/// Optional identifier provided by observation source to indicate the target onorbit object of this observation. This may be an internal identifier and not necessarily a valid satellite number.
/// Example: /// Example: ORIGOBJECT-ID
/// Constraints: Minimum length = 0, Maximum length = 36
func (rcv *SOIObservationSet_Full) OrigObjectId() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(20))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Optional identifier provided by observation source to indicate the target onorbit object of this observation. This may be an internal identifier and not necessarily a valid satellite number.
/// Example: /// Example: ORIGOBJECT-ID
/// Constraints: Minimum length = 0, Maximum length = 36
/// Sensor WGS84 latitude at startTime (if mobile/onorbit) in degrees. If null, can be obtained from sensor info. -90 to 90 degrees (negative values south of equator).
/// Example: /// Example: 45.1
/// Constraints: No constraints specified.
func (rcv *SOIObservationSet_Full) Senlat() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(22))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Sensor WGS84 latitude at startTime (if mobile/onorbit) in degrees. If null, can be obtained from sensor info. -90 to 90 degrees (negative values south of equator).
/// Example: /// Example: 45.1
/// Constraints: No constraints specified.
func (rcv *SOIObservationSet_Full) MutateSenlat(n float64) bool {
	return rcv._tab.MutateFloat64Slot(22, n)
}

/// Sensor WGS84 longitude at startTime (if mobile/onorbit) in degrees. If null, can be obtained from sensor info. -180 to 180 degrees (negative values south of equator).
/// Example: /// Example: 179.1
/// Constraints: No constraints specified.
func (rcv *SOIObservationSet_Full) Senlon() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(24))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Sensor WGS84 longitude at startTime (if mobile/onorbit) in degrees. If null, can be obtained from sensor info. -180 to 180 degrees (negative values south of equator).
/// Example: /// Example: 179.1
/// Constraints: No constraints specified.
func (rcv *SOIObservationSet_Full) MutateSenlon(n float64) bool {
	return rcv._tab.MutateFloat64Slot(24, n)
}

/// Sensor altitude at startTime (if mobile/onorbit) in kilometers.
/// Example: /// Example: 1.1
/// Constraints: No constraints specified.
func (rcv *SOIObservationSet_Full) Senalt() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(26))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Sensor altitude at startTime (if mobile/onorbit) in kilometers.
/// Example: /// Example: 1.1
/// Constraints: No constraints specified.
func (rcv *SOIObservationSet_Full) MutateSenalt(n float64) bool {
	return rcv._tab.MutateFloat64Slot(26, n)
}

/// Cartesian X position of the observing mobile/onorbit sensor at startTime, in kilometers, in the specified senReferenceFrame. If senReferenceFrame is null then J2K should be assumed.
/// Example: /// Example: 1.1
/// Constraints: No constraints specified.
func (rcv *SOIObservationSet_Full) Senx() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(28))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Cartesian X position of the observing mobile/onorbit sensor at startTime, in kilometers, in the specified senReferenceFrame. If senReferenceFrame is null then J2K should be assumed.
/// Example: /// Example: 1.1
/// Constraints: No constraints specified.
func (rcv *SOIObservationSet_Full) MutateSenx(n float64) bool {
	return rcv._tab.MutateFloat64Slot(28, n)
}

/// Cartesian Y position of the observing mobile/onorbit sensor at startTime, in kilometers, in the specified senReferenceFrame. If senReferenceFrame is null then J2K should be assumed.
/// Example: /// Example: 1.1
/// Constraints: No constraints specified.
func (rcv *SOIObservationSet_Full) Seny() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(30))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Cartesian Y position of the observing mobile/onorbit sensor at startTime, in kilometers, in the specified senReferenceFrame. If senReferenceFrame is null then J2K should be assumed.
/// Example: /// Example: 1.1
/// Constraints: No constraints specified.
func (rcv *SOIObservationSet_Full) MutateSeny(n float64) bool {
	return rcv._tab.MutateFloat64Slot(30, n)
}

/// Cartesian Z position of the observing mobile/onorbit sensor at startTime, in kilometers, in the specified senReferenceFrame. If senReferenceFrame is null then J2K should be assumed.
/// Example: /// Example: 1.1
/// Constraints: No constraints specified.
func (rcv *SOIObservationSet_Full) Senz() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(32))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Cartesian Z position of the observing mobile/onorbit sensor at startTime, in kilometers, in the specified senReferenceFrame. If senReferenceFrame is null then J2K should be assumed.
/// Example: /// Example: 1.1
/// Constraints: No constraints specified.
func (rcv *SOIObservationSet_Full) MutateSenz(n float64) bool {
	return rcv._tab.MutateFloat64Slot(32, n)
}

/// Cartesian X velocity of the observing mobile/onorbit sensor at startTime, in kilometers per second, in the specified senReferenceFrame. If senReferenceFrame is null then J2K should be assumed.
/// Example: /// Example: 1.1
/// Constraints: No constraints specified.
func (rcv *SOIObservationSet_Full) Senvelx() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(34))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Cartesian X velocity of the observing mobile/onorbit sensor at startTime, in kilometers per second, in the specified senReferenceFrame. If senReferenceFrame is null then J2K should be assumed.
/// Example: /// Example: 1.1
/// Constraints: No constraints specified.
func (rcv *SOIObservationSet_Full) MutateSenvelx(n float64) bool {
	return rcv._tab.MutateFloat64Slot(34, n)
}

/// Cartesian Y velocity of the observing mobile/onorbit sensor at startTime, in kilometers per second, in the specified senReferenceFrame. If senReferenceFrame is null then J2K should be assumed.
/// Example: /// Example: 1.1
/// Constraints: No constraints specified.
func (rcv *SOIObservationSet_Full) Senvely() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(36))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Cartesian Y velocity of the observing mobile/onorbit sensor at startTime, in kilometers per second, in the specified senReferenceFrame. If senReferenceFrame is null then J2K should be assumed.
/// Example: /// Example: 1.1
/// Constraints: No constraints specified.
func (rcv *SOIObservationSet_Full) MutateSenvely(n float64) bool {
	return rcv._tab.MutateFloat64Slot(36, n)
}

/// Cartesian Z velocity of the observing mobile/onorbit sensor at startTime, in kilometers per second, in the specified senReferenceFrame. If senReferenceFrame is null then J2K should be assumed.
/// Example: /// Example: 1.1
/// Constraints: No constraints specified.
func (rcv *SOIObservationSet_Full) Senvelz() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(38))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Cartesian Z velocity of the observing mobile/onorbit sensor at startTime, in kilometers per second, in the specified senReferenceFrame. If senReferenceFrame is null then J2K should be assumed.
/// Example: /// Example: 1.1
/// Constraints: No constraints specified.
func (rcv *SOIObservationSet_Full) MutateSenvelz(n float64) bool {
	return rcv._tab.MutateFloat64Slot(38, n)
}

/// ID of the UDL Elset of the Space Object under observation.
/// Example: /// Example: REF-ELSET-ID
/// Constraints: Minimum length = 0, Maximum length = 36
func (rcv *SOIObservationSet_Full) IdElset() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(40))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// ID of the UDL Elset of the Space Object under observation.
/// Example: /// Example: REF-ELSET-ID
/// Constraints: Minimum length = 0, Maximum length = 36
/// Observation set detection start time in ISO 8601 UTC with microsecond precision.
/// Example: /// Example: 2018-01-01T16:00:00.123456Z
/// Constraints: No constraints specified.
func (rcv *SOIObservationSet_Full) StartTime() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(42))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Observation set detection start time in ISO 8601 UTC with microsecond precision.
/// Example: /// Example: 2018-01-01T16:00:00.123456Z
/// Constraints: No constraints specified.
/// Observation set detection end time in ISO 8601 UTC with microsecond precision.
/// Example: /// Example: 2018-01-01T16:00:00.123456Z
/// Constraints: No constraints specified.
func (rcv *SOIObservationSet_Full) EndTime() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(44))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Observation set detection end time in ISO 8601 UTC with microsecond precision.
/// Example: /// Example: 2018-01-01T16:00:00.123456Z
/// Constraints: No constraints specified.
/// The number of observation records in the set.
/// Example: /// Example: 1
/// Constraints: No constraints specified.
func (rcv *SOIObservationSet_Full) NumObs() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(46))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

/// The number of observation records in the set.
/// Example: /// Example: 1
/// Constraints: No constraints specified.
func (rcv *SOIObservationSet_Full) MutateNumObs(n int32) bool {
	return rcv._tab.MutateInt32Slot(46, n)
}

/// Observation type (OPTICAL, RADAR).
/// Example: /// Example: OPTICAL
/// Constraints: Minimum length = 1, Maximum length = 24
func (rcv *SOIObservationSet_Full) Type() SOIObservationSet_Full_type_Enum {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(48))
	if o != 0 {
		return SOIObservationSet_Full_type_Enum(rcv._tab.GetInt8(o + rcv._tab.Pos))
	}
	return 0
}

/// Observation type (OPTICAL, RADAR).
/// Example: /// Example: OPTICAL
/// Constraints: Minimum length = 1, Maximum length = 24
func (rcv *SOIObservationSet_Full) MutateType(n SOIObservationSet_Full_type_Enum) bool {
	return rcv._tab.MutateInt8Slot(48, int8(n))
}

/// Polar angle of the gimbal/mount at observation set detection start time in degrees.
/// Example: /// Example: 1.1
/// Constraints: No constraints specified.
func (rcv *SOIObservationSet_Full) PolarAngleStart() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(50))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Polar angle of the gimbal/mount at observation set detection start time in degrees.
/// Example: /// Example: 1.1
/// Constraints: No constraints specified.
func (rcv *SOIObservationSet_Full) MutatePolarAngleStart(n float64) bool {
	return rcv._tab.MutateFloat64Slot(50, n)
}

/// Polar angle of the gimbal/mount at observation set detection end time in degrees.
/// Example: /// Example: 1.1
/// Constraints: No constraints specified.
func (rcv *SOIObservationSet_Full) PolarAngleEnd() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(52))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Polar angle of the gimbal/mount at observation set detection end time in degrees.
/// Example: /// Example: 1.1
/// Constraints: No constraints specified.
func (rcv *SOIObservationSet_Full) MutatePolarAngleEnd(n float64) bool {
	return rcv._tab.MutateFloat64Slot(52, n)
}

/// The reference frame of the observation measurements. If the referenceFrame is null it is assumed to be J2000.
/// Example: /// Example: J2000
/// Constraints: Minimum length = 0, Maximum length = 24
func (rcv *SOIObservationSet_Full) ReferenceFrame() SOIObservationSet_Full_referenceFrame_Enum {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(54))
	if o != 0 {
		return SOIObservationSet_Full_referenceFrame_Enum(rcv._tab.GetInt8(o + rcv._tab.Pos))
	}
	return 0
}

/// The reference frame of the observation measurements. If the referenceFrame is null it is assumed to be J2000.
/// Example: /// Example: J2000
/// Constraints: Minimum length = 0, Maximum length = 24
func (rcv *SOIObservationSet_Full) MutateReferenceFrame(n SOIObservationSet_Full_referenceFrame_Enum) bool {
	return rcv._tab.MutateInt8Slot(54, int8(n))
}

/// The reference frame of the observing sensor state. If the senReferenceFrame is null it is assumed to be J2000.
/// Example: /// Example: J2000
/// Constraints: Minimum length = 0, Maximum length = 24
func (rcv *SOIObservationSet_Full) SenReferenceFrame() SOIObservationSet_Full_senReferenceFrame_Enum {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(56))
	if o != 0 {
		return SOIObservationSet_Full_senReferenceFrame_Enum(rcv._tab.GetInt8(o + rcv._tab.Pos))
	}
	return 0
}

/// The reference frame of the observing sensor state. If the senReferenceFrame is null it is assumed to be J2000.
/// Example: /// Example: J2000
/// Constraints: Minimum length = 0, Maximum length = 24
func (rcv *SOIObservationSet_Full) MutateSenReferenceFrame(n SOIObservationSet_Full_senReferenceFrame_Enum) bool {
	return rcv._tab.MutateInt8Slot(56, int8(n))
}

/// Line of sight declination at observation set detection start time. Specified in degrees, in the specified referenceFrame. If referenceFrame is null then J2K should be assumed (e.g -30 to 130.0).
/// Example: /// Example: 1.1
/// Constraints: No constraints specified.
func (rcv *SOIObservationSet_Full) LosDeclinationStart() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(58))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Line of sight declination at observation set detection start time. Specified in degrees, in the specified referenceFrame. If referenceFrame is null then J2K should be assumed (e.g -30 to 130.0).
/// Example: /// Example: 1.1
/// Constraints: No constraints specified.
func (rcv *SOIObservationSet_Full) MutateLosDeclinationStart(n float64) bool {
	return rcv._tab.MutateFloat64Slot(58, n)
}

/// Line of sight declination at observation set detection end time. Specified in degrees, in the specified referenceFrame. If referenceFrame is null then J2K should be assumed (e.g -30 to 130.0).
/// Example: /// Example: 1.1
/// Constraints: No constraints specified.
func (rcv *SOIObservationSet_Full) LosDeclinationEnd() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(60))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Line of sight declination at observation set detection end time. Specified in degrees, in the specified referenceFrame. If referenceFrame is null then J2K should be assumed (e.g -30 to 130.0).
/// Example: /// Example: 1.1
/// Constraints: No constraints specified.
func (rcv *SOIObservationSet_Full) MutateLosDeclinationEnd(n float64) bool {
	return rcv._tab.MutateFloat64Slot(60, n)
}

/// Pointing angle of the Azimuth gimbal/mount at observation set detection start time. Specified in degrees.
/// Example: /// Example: 1.1
/// Constraints: No constraints specified.
func (rcv *SOIObservationSet_Full) PointingAngleAzStart() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(62))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Pointing angle of the Azimuth gimbal/mount at observation set detection start time. Specified in degrees.
/// Example: /// Example: 1.1
/// Constraints: No constraints specified.
func (rcv *SOIObservationSet_Full) MutatePointingAngleAzStart(n float64) bool {
	return rcv._tab.MutateFloat64Slot(62, n)
}

/// Pointing angle of the Azimuth gimbal/mount at observation set detection end time. Specified in degrees.
/// Example: /// Example: 1.1
/// Constraints: No constraints specified.
func (rcv *SOIObservationSet_Full) PointingAngleAzEnd() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(64))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Pointing angle of the Azimuth gimbal/mount at observation set detection end time. Specified in degrees.
/// Example: /// Example: 1.1
/// Constraints: No constraints specified.
func (rcv *SOIObservationSet_Full) MutatePointingAngleAzEnd(n float64) bool {
	return rcv._tab.MutateFloat64Slot(64, n)
}

/// Pointing angle of the Elevation gimbal/mount at observation set detection start time. Specified in degrees.
/// Example: /// Example: 1.1
/// Constraints: No constraints specified.
func (rcv *SOIObservationSet_Full) PointingAngleElStart() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(66))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Pointing angle of the Elevation gimbal/mount at observation set detection start time. Specified in degrees.
/// Example: /// Example: 1.1
/// Constraints: No constraints specified.
func (rcv *SOIObservationSet_Full) MutatePointingAngleElStart(n float64) bool {
	return rcv._tab.MutateFloat64Slot(66, n)
}

/// Pointing angle of the Elevation gimbal/mount at observation set detection end time. Specified in degrees.
/// Example: /// Example: 1.1
/// Constraints: No constraints specified.
func (rcv *SOIObservationSet_Full) PointingAngleElEnd() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(68))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Pointing angle of the Elevation gimbal/mount at observation set detection end time. Specified in degrees.
/// Example: /// Example: 1.1
/// Constraints: No constraints specified.
func (rcv *SOIObservationSet_Full) MutatePointingAngleElEnd(n float64) bool {
	return rcv._tab.MutateFloat64Slot(68, n)
}

/// Pixel array size (width) in pixels.
/// Example: /// Example: 32
/// Constraints: No constraints specified.
func (rcv *SOIObservationSet_Full) PixelArrayWidth() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(70))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

/// Pixel array size (width) in pixels.
/// Example: /// Example: 32
/// Constraints: No constraints specified.
func (rcv *SOIObservationSet_Full) MutatePixelArrayWidth(n int32) bool {
	return rcv._tab.MutateInt32Slot(70, n)
}

/// Pixel array size (height) in pixels.
/// Example: /// Example: 32
/// Constraints: No constraints specified.
func (rcv *SOIObservationSet_Full) PixelArrayHeight() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(72))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

/// Pixel array size (height) in pixels.
/// Example: /// Example: 32
/// Constraints: No constraints specified.
func (rcv *SOIObservationSet_Full) MutatePixelArrayHeight(n int32) bool {
	return rcv._tab.MutateInt32Slot(72, n)
}

/// The value is the number of spectral filters used.
/// Example: /// Example: 10
/// Constraints: No constraints specified.
func (rcv *SOIObservationSet_Full) NumSpectralFilters() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(74))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

/// The value is the number of spectral filters used.
/// Example: /// Example: 10
/// Constraints: No constraints specified.
func (rcv *SOIObservationSet_Full) MutateNumSpectralFilters(n int32) bool {
	return rcv._tab.MutateInt32Slot(74, n)
}

/// Array of the SpectralFilters keywords, must be present for all values n=1 to numSpectralFilters, in incrementing order of n, and for no other values of n.
/// Example: /// Example: ['Keyword1', 'Keyword2']
/// Constraints: No constraints specified.
func (rcv *SOIObservationSet_Full) SpectralFilters(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(76))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *SOIObservationSet_Full) SpectralFiltersLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(76))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

/// Array of the SpectralFilters keywords, must be present for all values n=1 to numSpectralFilters, in incrementing order of n, and for no other values of n.
/// Example: /// Example: ['Keyword1', 'Keyword2']
/// Constraints: No constraints specified.
/// Mode indicating telescope movement during collection (AUTOTRACK, MANUAL AUTOTRACK, MANUAL RATE TRACK, MANUAL SIDEREAL, SIDEREAL, RATE TRACK).
/// Example: /// Example: RATE TRACK
/// Constraints: Minimum length = 0, Maximum length = 32
func (rcv *SOIObservationSet_Full) CollectionMode() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(78))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Mode indicating telescope movement during collection (AUTOTRACK, MANUAL AUTOTRACK, MANUAL RATE TRACK, MANUAL SIDEREAL, SIDEREAL, RATE TRACK).
/// Example: /// Example: RATE TRACK
/// Constraints: Minimum length = 0, Maximum length = 32
/// The gain used during the collection, in units of photoelectrons per analog-to-digital unit (e-/ADU). If no gain is used, the value = 1.
/// Example: /// Example: 234.2
/// Constraints: No constraints specified.
func (rcv *SOIObservationSet_Full) Gain() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(80))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// The gain used during the collection, in units of photoelectrons per analog-to-digital unit (e-/ADU). If no gain is used, the value = 1.
/// Example: /// Example: 234.2
/// Constraints: No constraints specified.
func (rcv *SOIObservationSet_Full) MutateGain(n float64) bool {
	return rcv._tab.MutateFloat64Slot(80, n)
}

/// The number of pixels binned horizontally.
/// Example: /// Example: 2
/// Constraints: No constraints specified.
func (rcv *SOIObservationSet_Full) BinningHoriz() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(82))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

/// The number of pixels binned horizontally.
/// Example: /// Example: 2
/// Constraints: No constraints specified.
func (rcv *SOIObservationSet_Full) MutateBinningHoriz(n int32) bool {
	return rcv._tab.MutateInt32Slot(82, n)
}

/// The number of pixels binned vertically.
/// Example: /// Example: 2
/// Constraints: No constraints specified.
func (rcv *SOIObservationSet_Full) BinningVert() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(84))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

/// The number of pixels binned vertically.
/// Example: /// Example: 2
/// Constraints: No constraints specified.
func (rcv *SOIObservationSet_Full) MutateBinningVert(n int32) bool {
	return rcv._tab.MutateInt32Slot(84, n)
}

/// The in-band solar magnitude at 1 A.U.
/// Example: /// Example: -26.91
/// Constraints: No constraints specified.
func (rcv *SOIObservationSet_Full) SolarMag() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(86))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// The in-band solar magnitude at 1 A.U.
/// Example: /// Example: -26.91
/// Constraints: No constraints specified.
func (rcv *SOIObservationSet_Full) MutateSolarMag(n float64) bool {
	return rcv._tab.MutateFloat64Slot(86, n)
}

/// The minimum valid pixel value.
/// Example: /// Example: 0
/// Constraints: No constraints specified.
func (rcv *SOIObservationSet_Full) PixelMin() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(88))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

/// The minimum valid pixel value.
/// Example: /// Example: 0
/// Constraints: No constraints specified.
func (rcv *SOIObservationSet_Full) MutatePixelMin(n int32) bool {
	return rcv._tab.MutateInt32Slot(88, n)
}

/// The maximum valid pixel value.
/// Example: /// Example: 16383
/// Constraints: No constraints specified.
func (rcv *SOIObservationSet_Full) PixelMax() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(90))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

/// The maximum valid pixel value.
/// Example: /// Example: 16383
/// Constraints: No constraints specified.
func (rcv *SOIObservationSet_Full) MutatePixelMax(n int32) bool {
	return rcv._tab.MutateInt32Slot(90, n)
}

/// Software Version used to Capture, Process, and Deliver the data.
/// Example: /// Example: GSV99/17-1
/// Constraints: Minimum length = 0, Maximum length = 70
func (rcv *SOIObservationSet_Full) SoftwareVersion() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(92))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Software Version used to Capture, Process, and Deliver the data.
/// Example: /// Example: GSV99/17-1
/// Constraints: Minimum length = 0, Maximum length = 70
/// Name of the target satellite.
/// Example: /// Example: TITAN 3C TRANSTAGE R/B
/// Constraints: Minimum length = 0, Maximum length = 70
func (rcv *SOIObservationSet_Full) SatelliteName() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(94))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Name of the target satellite.
/// Example: /// Example: TITAN 3C TRANSTAGE R/B
/// Constraints: Minimum length = 0, Maximum length = 70
/// Name of the Star Catalog used for photometry and astrometry.
/// Example: /// Example: SSTRC5
/// Constraints: Minimum length = 0, Maximum length = 70
func (rcv *SOIObservationSet_Full) StarCatName() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(96))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Name of the Star Catalog used for photometry and astrometry.
/// Example: /// Example: SSTRC5
/// Constraints: Minimum length = 0, Maximum length = 70
/// Object Correlation Quality value. Measures how close the observed object's orbit is to matching an object in the catalog. The scale of this field may vary depending on provider. Users should consult the data provider to verify the meaning of the value (e.g. A value of 0.0 indicates a high/strong correlation, while a value closer to 1.0 indicates low/weak correlation).
/// Example: /// Example: 0.327
/// Constraints: No constraints specified.
func (rcv *SOIObservationSet_Full) CorrQuality() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(98))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Object Correlation Quality value. Measures how close the observed object's orbit is to matching an object in the catalog. The scale of this field may vary depending on provider. Users should consult the data provider to verify the meaning of the value (e.g. A value of 0.0 indicates a high/strong correlation, while a value closer to 1.0 indicates low/weak correlation).
/// Example: /// Example: 0.327
/// Constraints: No constraints specified.
func (rcv *SOIObservationSet_Full) MutateCorrQuality(n float64) bool {
	return rcv._tab.MutateFloat64Slot(98, n)
}

/// Boolean indicating whether the target object was unable to be correlated to a known object. This flag should only be set to true by data providers after an attempt to correlate to an OnOrbit object was made and failed. If unable to correlate, the 'origObjectId' field may be populated with an internal data provider specific identifier.
/// Example: /// Example: True
/// Constraints: No constraints specified.
func (rcv *SOIObservationSet_Full) Uct() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(100))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

/// Boolean indicating whether the target object was unable to be correlated to a known object. This flag should only be set to true by data providers after an attempt to correlate to an OnOrbit object was made and failed. If unable to correlate, the 'origObjectId' field may be populated with an internal data provider specific identifier.
/// Example: /// Example: True
/// Constraints: No constraints specified.
func (rcv *SOIObservationSet_Full) MutateUct(n bool) bool {
	return rcv._tab.MutateBoolSlot(100, n)
}

/// Key to indicate which, if any of, the pre/post photometer calibrations are valid for use when generating data for the EOSSA file. If the field is not populated, then the provided calibration data will be used when generating the EOSSA file (e.g. PRE, POST, BOTH, NONE).
/// Example: /// Example: BOTH
/// Constraints: Minimum length = 0, Maximum length = 16
func (rcv *SOIObservationSet_Full) ValidCalibrations() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(102))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Key to indicate which, if any of, the pre/post photometer calibrations are valid for use when generating data for the EOSSA file. If the field is not populated, then the provided calibration data will be used when generating the EOSSA file (e.g. PRE, POST, BOTH, NONE).
/// Example: /// Example: BOTH
/// Constraints: Minimum length = 0, Maximum length = 16
/// Type of calibration used by the Sensor (e.g. ALL SKY, DIFFERENTIAL, DEFAULT, NONE).
/// Example: /// Example: ALL SKY
/// Constraints: Minimum length = 0, Maximum length = 32
func (rcv *SOIObservationSet_Full) CalibrationType() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(104))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Type of calibration used by the Sensor (e.g. ALL SKY, DIFFERENTIAL, DEFAULT, NONE).
/// Example: /// Example: ALL SKY
/// Constraints: Minimum length = 0, Maximum length = 32
/// A threshold for percent of pixels that make up object signal that are beyond the saturation point for the sensor that are removed in the EOSSA file, in range of 0 to 1.
/// Example: /// Example: 0.1
/// Constraints: No constraints specified.
func (rcv *SOIObservationSet_Full) PercentSatThreshold() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(106))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// A threshold for percent of pixels that make up object signal that are beyond the saturation point for the sensor that are removed in the EOSSA file, in range of 0 to 1.
/// Example: /// Example: 0.1
/// Constraints: No constraints specified.
func (rcv *SOIObservationSet_Full) MutatePercentSatThreshold(n float64) bool {
	return rcv._tab.MutateFloat64Slot(106, n)
}

/// Boolean indicating if any change event was detected, based on historical collection data for the object.
/// Example: /// Example: True
/// Constraints: No constraints specified.
func (rcv *SOIObservationSet_Full) ChangeDetected() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(108))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

/// Boolean indicating if any change event was detected, based on historical collection data for the object.
/// Example: /// Example: True
/// Constraints: No constraints specified.
func (rcv *SOIObservationSet_Full) MutateChangeDetected(n bool) bool {
	return rcv._tab.MutateBoolSlot(108, n)
}

/// Boolean indicating if a periodicity change event was detected, based on historical collection data for the object.
/// Example: /// Example: True
/// Constraints: No constraints specified.
func (rcv *SOIObservationSet_Full) PeriodicityChangeDetected() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(110))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

/// Boolean indicating if a periodicity change event was detected, based on historical collection data for the object.
/// Example: /// Example: True
/// Constraints: No constraints specified.
func (rcv *SOIObservationSet_Full) MutatePeriodicityChangeDetected(n bool) bool {
	return rcv._tab.MutateBoolSlot(110, n)
}

/// Boolean indicating if a brightness variance change event was detected, based on historical collection data for the object.
/// Example: /// Example: True
/// Constraints: No constraints specified.
func (rcv *SOIObservationSet_Full) BrightnessVarianceChangeDetected() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(112))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

/// Boolean indicating if a brightness variance change event was detected, based on historical collection data for the object.
/// Example: /// Example: True
/// Constraints: No constraints specified.
func (rcv *SOIObservationSet_Full) MutateBrightnessVarianceChangeDetected(n bool) bool {
	return rcv._tab.MutateBoolSlot(112, n)
}

/// Boolean indicating if a solar phase angle brightness change event was detected, based on historical collection data for the object.
/// Example: /// Example: True
/// Constraints: No constraints specified.
func (rcv *SOIObservationSet_Full) SolarPhaseAngleBrightnessChangeDetected() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(114))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

/// Boolean indicating if a solar phase angle brightness change event was detected, based on historical collection data for the object.
/// Example: /// Example: True
/// Constraints: No constraints specified.
func (rcv *SOIObservationSet_Full) MutateSolarPhaseAngleBrightnessChangeDetected(n bool) bool {
	return rcv._tab.MutateBoolSlot(114, n)
}

/// Overall qualitative confidence assessment of change detection results (e.g. HIGH, MEDIUM, LOW).
/// Example: /// Example: MEDIUM
/// Constraints: Minimum length = 0, Maximum length = 16
func (rcv *SOIObservationSet_Full) ChangeConf() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(116))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Overall qualitative confidence assessment of change detection results (e.g. HIGH, MEDIUM, LOW).
/// Example: /// Example: MEDIUM
/// Constraints: Minimum length = 0, Maximum length = 16
/// Qualitative Collection Density assessment, with respect to confidence of detecting a change event (e.g. HIGH, MEDIUM, LOW).
/// Example: /// Example: MEDIUM
/// Constraints: Minimum length = 0, Maximum length = 16
func (rcv *SOIObservationSet_Full) CollectionDensityConf() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(118))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Qualitative Collection Density assessment, with respect to confidence of detecting a change event (e.g. HIGH, MEDIUM, LOW).
/// Example: /// Example: MEDIUM
/// Constraints: Minimum length = 0, Maximum length = 16
/// Qualitative Periodicity Sampling assessment, with respect to confidence of detecting a change event (e.g. HIGH, MEDIUM, LOW).
/// Example: /// Example: MEDIUM
/// Constraints: Minimum length = 0, Maximum length = 16
func (rcv *SOIObservationSet_Full) PeriodicitySamplingConf() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(120))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Qualitative Periodicity Sampling assessment, with respect to confidence of detecting a change event (e.g. HIGH, MEDIUM, LOW).
/// Example: /// Example: MEDIUM
/// Constraints: Minimum length = 0, Maximum length = 16
/// Qualitative assessment of the periodicity detection results from the Attitude and Shape Retrieval (ASR) Periodicity Assessment (PA) Tool (e.g. HIGH, MEDIUM, LOW).
/// Example: /// Example: MEDIUM
/// Constraints: Minimum length = 0, Maximum length = 16
func (rcv *SOIObservationSet_Full) PeriodicityDetectionConf() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(122))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Qualitative assessment of the periodicity detection results from the Attitude and Shape Retrieval (ASR) Periodicity Assessment (PA) Tool (e.g. HIGH, MEDIUM, LOW).
/// Example: /// Example: MEDIUM
/// Constraints: Minimum length = 0, Maximum length = 16
/// Universally Unique collection ID. Mechanism to correlate Single Point Photometry (SPP) JSON files to images.
/// Example: /// Example: b5133288-ab63-4b15-81f6-c7eec0cdb0c0
/// Constraints: Minimum length = 0, Maximum length = 36
func (rcv *SOIObservationSet_Full) CollectionId() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(124))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Universally Unique collection ID. Mechanism to correlate Single Point Photometry (SPP) JSON files to images.
/// Example: /// Example: b5133288-ab63-4b15-81f6-c7eec0cdb0c0
/// Constraints: Minimum length = 0, Maximum length = 36
/// Array of SOI Calibrations associated with this SOIObservationSet.
/// Example: /// Example: No example provided.
/// Constraints: No constraints specified.
func (rcv *SOIObservationSet_Full) Calibrations(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(126))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *SOIObservationSet_Full) CalibrationsLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(126))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

/// Array of SOI Calibrations associated with this SOIObservationSet.
/// Example: /// Example: No example provided.
/// Constraints: No constraints specified.
/// Optional array of provider/source specific tags for this data, where each element is no longer than 32 characters, used for implementing data owner conditional access controls to restrict access to the data. Should be left null by data providers unless conditional access controls are coordinated with the UDL team.
/// Example: /// Example: ['TAG1', 'TAG2']
/// Constraints: No constraints specified.
func (rcv *SOIObservationSet_Full) Tags(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(128))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *SOIObservationSet_Full) TagsLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(128))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

/// Optional array of provider/source specific tags for this data, where each element is no longer than 32 characters, used for implementing data owner conditional access controls to restrict access to the data. Should be left null by data providers unless conditional access controls are coordinated with the UDL team.
/// Example: /// Example: ['TAG1', 'TAG2']
/// Constraints: No constraints specified.
/// Optional identifier to track a commercial or marketplace transaction executed to produce this data.
/// Example: /// Example: TRANSACTION-ID
/// Constraints: Minimum length = 0, Maximum length = 64
func (rcv *SOIObservationSet_Full) TransactionId() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(130))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Optional identifier to track a commercial or marketplace transaction executed to produce this data.
/// Example: /// Example: TRANSACTION-ID
/// Constraints: Minimum length = 0, Maximum length = 64
/// OpticalSOIObservations associated with this SOIObservationSet.
/// Example: /// Example: No example provided.
/// Constraints: No constraints specified.
func (rcv *SOIObservationSet_Full) OpticalSoiobservationList(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(132))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *SOIObservationSet_Full) OpticalSoiobservationListLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(132))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

/// OpticalSOIObservations associated with this SOIObservationSet.
/// Example: /// Example: No example provided.
/// Constraints: No constraints specified.
/// RadarSOIObservations associated with this RadarSOIObservationSet.
/// Example: /// Example: No example provided.
/// Constraints: No constraints specified.
func (rcv *SOIObservationSet_Full) RadarSoiobservationList(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(134))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *SOIObservationSet_Full) RadarSoiobservationListLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(134))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

/// RadarSOIObservations associated with this RadarSOIObservationSet.
/// Example: /// Example: No example provided.
/// Constraints: No constraints specified.
/// Time the row was created in the database, auto-populated by the system.
/// Example: /// Example: 2018-01-01T16:00:00.123Z
/// Constraints: No constraints specified.
func (rcv *SOIObservationSet_Full) CreatedAt() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(136))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Time the row was created in the database, auto-populated by the system.
/// Example: /// Example: 2018-01-01T16:00:00.123Z
/// Constraints: No constraints specified.
/// Application user who created the row in the database, auto-populated by the system.
/// Example: /// Example: some.user
/// Constraints: Minimum length = 0, Maximum length = 64
func (rcv *SOIObservationSet_Full) CreatedBy() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(138))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Application user who created the row in the database, auto-populated by the system.
/// Example: /// Example: some.user
/// Constraints: Minimum length = 0, Maximum length = 64
/// Source of the data.
/// Example: /// Example: Bluestaq
/// Constraints: Minimum length = 1, Maximum length = 64
func (rcv *SOIObservationSet_Full) Source() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(140))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Source of the data.
/// Example: /// Example: Bluestaq
/// Constraints: Minimum length = 1, Maximum length = 64
/// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
/// Example: /// Example: THIRD_PARTY_DATASOURCE
/// Constraints: Minimum length = 0, Maximum length = 64
func (rcv *SOIObservationSet_Full) Origin() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(142))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
/// Example: /// Example: THIRD_PARTY_DATASOURCE
/// Constraints: Minimum length = 0, Maximum length = 64
/// The originating source network on which this record was created, auto-populated by the system.
/// Example: /// Example: OPS1
/// Constraints: Minimum length = 1, Maximum length = 32
func (rcv *SOIObservationSet_Full) OrigNetwork() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(144))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The originating source network on which this record was created, auto-populated by the system.
/// Example: /// Example: OPS1
/// Constraints: Minimum length = 1, Maximum length = 32
/// The source data library from which this record was received. This could be a remote or tactical UDL or another data library. If null, the record should be assumed to have originated from the primary Enterprise UDL.
/// Example: /// Example: AXE
/// Constraints: Minimum length = 0, Maximum length = 64
func (rcv *SOIObservationSet_Full) SourceDl() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(146))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The source data library from which this record was received. This could be a remote or tactical UDL or another data library. If null, the record should be assumed to have originated from the primary Enterprise UDL.
/// Example: /// Example: AXE
/// Constraints: Minimum length = 0, Maximum length = 64
/// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
/// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
/// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
/// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
/// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
/// Example: /// Example: TEST
/// Constraints: Minimum length = 1, Maximum length = 32
func (rcv *SOIObservationSet_Full) DataMode() SOIObservationSet_Full_dataMode_Enum {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(148))
	if o != 0 {
		return SOIObservationSet_Full_dataMode_Enum(rcv._tab.GetInt8(o + rcv._tab.Pos))
	}
	return 0
}

/// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
/// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
/// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
/// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
/// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
/// Example: /// Example: TEST
/// Constraints: Minimum length = 1, Maximum length = 32
func (rcv *SOIObservationSet_Full) MutateDataMode(n SOIObservationSet_Full_dataMode_Enum) bool {
	return rcv._tab.MutateInt8Slot(148, int8(n))
}

func SOIObservationSet_FullStart(builder *flatbuffers.Builder) {
	builder.StartObject(73)
}
func SOIObservationSet_FullAddId(builder *flatbuffers.Builder, id flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(id), 0)
}
func SOIObservationSet_FullAddClassificationMarking(builder *flatbuffers.Builder, classificationMarking flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(classificationMarking), 0)
}
func SOIObservationSet_FullAddMsgCreateDate(builder *flatbuffers.Builder, msgCreateDate flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(msgCreateDate), 0)
}
func SOIObservationSet_FullAddIdSensor(builder *flatbuffers.Builder, idSensor flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(3, flatbuffers.UOffsetT(idSensor), 0)
}
func SOIObservationSet_FullAddOrigSensorId(builder *flatbuffers.Builder, origSensorId flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(4, flatbuffers.UOffsetT(origSensorId), 0)
}
func SOIObservationSet_FullAddSensorAsId(builder *flatbuffers.Builder, sensorAsId flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(5, flatbuffers.UOffsetT(sensorAsId), 0)
}
func SOIObservationSet_FullAddIdOnOrbit(builder *flatbuffers.Builder, idOnOrbit flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(6, flatbuffers.UOffsetT(idOnOrbit), 0)
}
func SOIObservationSet_FullAddSatNo(builder *flatbuffers.Builder, satNo int32) {
	builder.PrependInt32Slot(7, satNo, 0)
}
func SOIObservationSet_FullAddOrigObjectId(builder *flatbuffers.Builder, origObjectId flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(8, flatbuffers.UOffsetT(origObjectId), 0)
}
func SOIObservationSet_FullAddSenlat(builder *flatbuffers.Builder, senlat float64) {
	builder.PrependFloat64Slot(9, senlat, 0.0)
}
func SOIObservationSet_FullAddSenlon(builder *flatbuffers.Builder, senlon float64) {
	builder.PrependFloat64Slot(10, senlon, 0.0)
}
func SOIObservationSet_FullAddSenalt(builder *flatbuffers.Builder, senalt float64) {
	builder.PrependFloat64Slot(11, senalt, 0.0)
}
func SOIObservationSet_FullAddSenx(builder *flatbuffers.Builder, senx float64) {
	builder.PrependFloat64Slot(12, senx, 0.0)
}
func SOIObservationSet_FullAddSeny(builder *flatbuffers.Builder, seny float64) {
	builder.PrependFloat64Slot(13, seny, 0.0)
}
func SOIObservationSet_FullAddSenz(builder *flatbuffers.Builder, senz float64) {
	builder.PrependFloat64Slot(14, senz, 0.0)
}
func SOIObservationSet_FullAddSenvelx(builder *flatbuffers.Builder, senvelx float64) {
	builder.PrependFloat64Slot(15, senvelx, 0.0)
}
func SOIObservationSet_FullAddSenvely(builder *flatbuffers.Builder, senvely float64) {
	builder.PrependFloat64Slot(16, senvely, 0.0)
}
func SOIObservationSet_FullAddSenvelz(builder *flatbuffers.Builder, senvelz float64) {
	builder.PrependFloat64Slot(17, senvelz, 0.0)
}
func SOIObservationSet_FullAddIdElset(builder *flatbuffers.Builder, idElset flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(18, flatbuffers.UOffsetT(idElset), 0)
}
func SOIObservationSet_FullAddStartTime(builder *flatbuffers.Builder, startTime flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(19, flatbuffers.UOffsetT(startTime), 0)
}
func SOIObservationSet_FullAddEndTime(builder *flatbuffers.Builder, endTime flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(20, flatbuffers.UOffsetT(endTime), 0)
}
func SOIObservationSet_FullAddNumObs(builder *flatbuffers.Builder, numObs int32) {
	builder.PrependInt32Slot(21, numObs, 0)
}
func SOIObservationSet_FullAddType(builder *flatbuffers.Builder, type_ SOIObservationSet_Full_type_Enum) {
	builder.PrependInt8Slot(22, int8(type_), 0)
}
func SOIObservationSet_FullAddPolarAngleStart(builder *flatbuffers.Builder, polarAngleStart float64) {
	builder.PrependFloat64Slot(23, polarAngleStart, 0.0)
}
func SOIObservationSet_FullAddPolarAngleEnd(builder *flatbuffers.Builder, polarAngleEnd float64) {
	builder.PrependFloat64Slot(24, polarAngleEnd, 0.0)
}
func SOIObservationSet_FullAddReferenceFrame(builder *flatbuffers.Builder, referenceFrame SOIObservationSet_Full_referenceFrame_Enum) {
	builder.PrependInt8Slot(25, int8(referenceFrame), 0)
}
func SOIObservationSet_FullAddSenReferenceFrame(builder *flatbuffers.Builder, senReferenceFrame SOIObservationSet_Full_senReferenceFrame_Enum) {
	builder.PrependInt8Slot(26, int8(senReferenceFrame), 0)
}
func SOIObservationSet_FullAddLosDeclinationStart(builder *flatbuffers.Builder, losDeclinationStart float64) {
	builder.PrependFloat64Slot(27, losDeclinationStart, 0.0)
}
func SOIObservationSet_FullAddLosDeclinationEnd(builder *flatbuffers.Builder, losDeclinationEnd float64) {
	builder.PrependFloat64Slot(28, losDeclinationEnd, 0.0)
}
func SOIObservationSet_FullAddPointingAngleAzStart(builder *flatbuffers.Builder, pointingAngleAzStart float64) {
	builder.PrependFloat64Slot(29, pointingAngleAzStart, 0.0)
}
func SOIObservationSet_FullAddPointingAngleAzEnd(builder *flatbuffers.Builder, pointingAngleAzEnd float64) {
	builder.PrependFloat64Slot(30, pointingAngleAzEnd, 0.0)
}
func SOIObservationSet_FullAddPointingAngleElStart(builder *flatbuffers.Builder, pointingAngleElStart float64) {
	builder.PrependFloat64Slot(31, pointingAngleElStart, 0.0)
}
func SOIObservationSet_FullAddPointingAngleElEnd(builder *flatbuffers.Builder, pointingAngleElEnd float64) {
	builder.PrependFloat64Slot(32, pointingAngleElEnd, 0.0)
}
func SOIObservationSet_FullAddPixelArrayWidth(builder *flatbuffers.Builder, pixelArrayWidth int32) {
	builder.PrependInt32Slot(33, pixelArrayWidth, 0)
}
func SOIObservationSet_FullAddPixelArrayHeight(builder *flatbuffers.Builder, pixelArrayHeight int32) {
	builder.PrependInt32Slot(34, pixelArrayHeight, 0)
}
func SOIObservationSet_FullAddNumSpectralFilters(builder *flatbuffers.Builder, numSpectralFilters int32) {
	builder.PrependInt32Slot(35, numSpectralFilters, 0)
}
func SOIObservationSet_FullAddSpectralFilters(builder *flatbuffers.Builder, spectralFilters flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(36, flatbuffers.UOffsetT(spectralFilters), 0)
}
func SOIObservationSet_FullStartSpectralFiltersVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func SOIObservationSet_FullAddCollectionMode(builder *flatbuffers.Builder, collectionMode flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(37, flatbuffers.UOffsetT(collectionMode), 0)
}
func SOIObservationSet_FullAddGain(builder *flatbuffers.Builder, gain float64) {
	builder.PrependFloat64Slot(38, gain, 0.0)
}
func SOIObservationSet_FullAddBinningHoriz(builder *flatbuffers.Builder, binningHoriz int32) {
	builder.PrependInt32Slot(39, binningHoriz, 0)
}
func SOIObservationSet_FullAddBinningVert(builder *flatbuffers.Builder, binningVert int32) {
	builder.PrependInt32Slot(40, binningVert, 0)
}
func SOIObservationSet_FullAddSolarMag(builder *flatbuffers.Builder, solarMag float64) {
	builder.PrependFloat64Slot(41, solarMag, 0.0)
}
func SOIObservationSet_FullAddPixelMin(builder *flatbuffers.Builder, pixelMin int32) {
	builder.PrependInt32Slot(42, pixelMin, 0)
}
func SOIObservationSet_FullAddPixelMax(builder *flatbuffers.Builder, pixelMax int32) {
	builder.PrependInt32Slot(43, pixelMax, 0)
}
func SOIObservationSet_FullAddSoftwareVersion(builder *flatbuffers.Builder, softwareVersion flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(44, flatbuffers.UOffsetT(softwareVersion), 0)
}
func SOIObservationSet_FullAddSatelliteName(builder *flatbuffers.Builder, satelliteName flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(45, flatbuffers.UOffsetT(satelliteName), 0)
}
func SOIObservationSet_FullAddStarCatName(builder *flatbuffers.Builder, starCatName flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(46, flatbuffers.UOffsetT(starCatName), 0)
}
func SOIObservationSet_FullAddCorrQuality(builder *flatbuffers.Builder, corrQuality float64) {
	builder.PrependFloat64Slot(47, corrQuality, 0.0)
}
func SOIObservationSet_FullAddUct(builder *flatbuffers.Builder, uct bool) {
	builder.PrependBoolSlot(48, uct, false)
}
func SOIObservationSet_FullAddValidCalibrations(builder *flatbuffers.Builder, validCalibrations flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(49, flatbuffers.UOffsetT(validCalibrations), 0)
}
func SOIObservationSet_FullAddCalibrationType(builder *flatbuffers.Builder, calibrationType flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(50, flatbuffers.UOffsetT(calibrationType), 0)
}
func SOIObservationSet_FullAddPercentSatThreshold(builder *flatbuffers.Builder, percentSatThreshold float64) {
	builder.PrependFloat64Slot(51, percentSatThreshold, 0.0)
}
func SOIObservationSet_FullAddChangeDetected(builder *flatbuffers.Builder, changeDetected bool) {
	builder.PrependBoolSlot(52, changeDetected, false)
}
func SOIObservationSet_FullAddPeriodicityChangeDetected(builder *flatbuffers.Builder, periodicityChangeDetected bool) {
	builder.PrependBoolSlot(53, periodicityChangeDetected, false)
}
func SOIObservationSet_FullAddBrightnessVarianceChangeDetected(builder *flatbuffers.Builder, brightnessVarianceChangeDetected bool) {
	builder.PrependBoolSlot(54, brightnessVarianceChangeDetected, false)
}
func SOIObservationSet_FullAddSolarPhaseAngleBrightnessChangeDetected(builder *flatbuffers.Builder, solarPhaseAngleBrightnessChangeDetected bool) {
	builder.PrependBoolSlot(55, solarPhaseAngleBrightnessChangeDetected, false)
}
func SOIObservationSet_FullAddChangeConf(builder *flatbuffers.Builder, changeConf flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(56, flatbuffers.UOffsetT(changeConf), 0)
}
func SOIObservationSet_FullAddCollectionDensityConf(builder *flatbuffers.Builder, collectionDensityConf flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(57, flatbuffers.UOffsetT(collectionDensityConf), 0)
}
func SOIObservationSet_FullAddPeriodicitySamplingConf(builder *flatbuffers.Builder, periodicitySamplingConf flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(58, flatbuffers.UOffsetT(periodicitySamplingConf), 0)
}
func SOIObservationSet_FullAddPeriodicityDetectionConf(builder *flatbuffers.Builder, periodicityDetectionConf flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(59, flatbuffers.UOffsetT(periodicityDetectionConf), 0)
}
func SOIObservationSet_FullAddCollectionId(builder *flatbuffers.Builder, collectionId flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(60, flatbuffers.UOffsetT(collectionId), 0)
}
func SOIObservationSet_FullAddCalibrations(builder *flatbuffers.Builder, calibrations flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(61, flatbuffers.UOffsetT(calibrations), 0)
}
func SOIObservationSet_FullStartCalibrationsVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func SOIObservationSet_FullAddTags(builder *flatbuffers.Builder, tags flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(62, flatbuffers.UOffsetT(tags), 0)
}
func SOIObservationSet_FullStartTagsVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func SOIObservationSet_FullAddTransactionId(builder *flatbuffers.Builder, transactionId flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(63, flatbuffers.UOffsetT(transactionId), 0)
}
func SOIObservationSet_FullAddOpticalSoiobservationList(builder *flatbuffers.Builder, opticalSoiobservationList flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(64, flatbuffers.UOffsetT(opticalSoiobservationList), 0)
}
func SOIObservationSet_FullStartOpticalSoiobservationListVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func SOIObservationSet_FullAddRadarSoiobservationList(builder *flatbuffers.Builder, radarSoiobservationList flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(65, flatbuffers.UOffsetT(radarSoiobservationList), 0)
}
func SOIObservationSet_FullStartRadarSoiobservationListVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func SOIObservationSet_FullAddCreatedAt(builder *flatbuffers.Builder, createdAt flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(66, flatbuffers.UOffsetT(createdAt), 0)
}
func SOIObservationSet_FullAddCreatedBy(builder *flatbuffers.Builder, createdBy flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(67, flatbuffers.UOffsetT(createdBy), 0)
}
func SOIObservationSet_FullAddSource(builder *flatbuffers.Builder, source flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(68, flatbuffers.UOffsetT(source), 0)
}
func SOIObservationSet_FullAddOrigin(builder *flatbuffers.Builder, origin flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(69, flatbuffers.UOffsetT(origin), 0)
}
func SOIObservationSet_FullAddOrigNetwork(builder *flatbuffers.Builder, origNetwork flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(70, flatbuffers.UOffsetT(origNetwork), 0)
}
func SOIObservationSet_FullAddSourceDl(builder *flatbuffers.Builder, sourceDl flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(71, flatbuffers.UOffsetT(sourceDl), 0)
}
func SOIObservationSet_FullAddDataMode(builder *flatbuffers.Builder, dataMode SOIObservationSet_Full_dataMode_Enum) {
	builder.PrependInt8Slot(72, int8(dataMode), 0)
}
func SOIObservationSet_FullEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
