// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package EvacVitalSignData_Ingest

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

/// /// Information obtained for vital signs.
type EvacVitalSignData_Ingest struct {
	_tab flatbuffers.Table
}

const EvacVitalSignData_IngestIdentifier = "EVAC"

func GetRootAsEvacVitalSignData_Ingest(buf []byte, offset flatbuffers.UOffsetT) *EvacVitalSignData_Ingest {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &EvacVitalSignData_Ingest{}
	x.Init(buf, n+offset)
	return x
}

func FinishEvacVitalSignData_IngestBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	identifierBytes := []byte(EvacVitalSignData_IngestIdentifier)
	builder.FinishWithFileIdentifier(offset, identifierBytes)
}

func EvacVitalSignData_IngestBufferHasIdentifier(buf []byte) bool {
	return flatbuffers.BufferHasIdentifier(buf, EvacVitalSignData_IngestIdentifier)
}

func GetSizePrefixedRootAsEvacVitalSignData_Ingest(buf []byte, offset flatbuffers.UOffsetT) *EvacVitalSignData_Ingest {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &EvacVitalSignData_Ingest{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedEvacVitalSignData_IngestBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	identifierBytes := []byte(EvacVitalSignData_IngestIdentifier)
	builder.FinishSizePrefixedWithFileIdentifier(offset, identifierBytes)
}

func SizePrefixedEvacVitalSignData_IngestBufferHasIdentifier(buf []byte) bool {
	return flatbuffers.SizePrefixedBufferHasIdentifier(buf, EvacVitalSignData_IngestIdentifier)
}

func (rcv *EvacVitalSignData_Ingest) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *EvacVitalSignData_Ingest) Table() flatbuffers.Table {
	return rcv._tab
}

/// Patient vital sign measured (e.g. HEART RATE, PULSE RATE, RESPIRATION RATE, TEMPERATURE CORE, etc.).
/// Example: /// Example: HEART RATE
/// Constraints: Minimum length = 0, Maximum length = 32
func (rcv *EvacVitalSignData_Ingest) VitalSign() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Patient vital sign measured (e.g. HEART RATE, PULSE RATE, RESPIRATION RATE, TEMPERATURE CORE, etc.).
/// Example: /// Example: HEART RATE
/// Constraints: Minimum length = 0, Maximum length = 32
/// Vital sign value 1.  The content of this field is dependent on the type of vital sign being measured (see the vitalSign field).
/// Example: /// Example: 120
/// Constraints: No constraints specified.
func (rcv *EvacVitalSignData_Ingest) VitalSign1() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Vital sign value 1.  The content of this field is dependent on the type of vital sign being measured (see the vitalSign field).
/// Example: /// Example: 120
/// Constraints: No constraints specified.
func (rcv *EvacVitalSignData_Ingest) MutateVitalSign1(n float64) bool {
	return rcv._tab.MutateFloat64Slot(6, n)
}

/// Vital sign value 2.  The content of this field is dependent on the type of vital sign being measured (see the vitalSign field).
/// Example: /// Example: 80
/// Constraints: No constraints specified.
func (rcv *EvacVitalSignData_Ingest) VitalSign2() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Vital sign value 2.  The content of this field is dependent on the type of vital sign being measured (see the vitalSign field).
/// Example: /// Example: 80
/// Constraints: No constraints specified.
func (rcv *EvacVitalSignData_Ingest) MutateVitalSign2(n float64) bool {
	return rcv._tab.MutateFloat64Slot(8, n)
}

/// Medical confidence factor.
/// Example: /// Example: 1
/// Constraints: No constraints specified.
func (rcv *EvacVitalSignData_Ingest) MedConfFactor() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

/// Medical confidence factor.
/// Example: /// Example: 1
/// Constraints: No constraints specified.
func (rcv *EvacVitalSignData_Ingest) MutateMedConfFactor(n int32) bool {
	return rcv._tab.MutateInt32Slot(10, n)
}

/// Datetime of the vital sign measurement in ISO 8601 UTC datetime format.
/// Example: /// Example: 2021-10-15T16:00:00.123Z
/// Constraints: No constraints specified.
func (rcv *EvacVitalSignData_Ingest) Time() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Datetime of the vital sign measurement in ISO 8601 UTC datetime format.
/// Example: /// Example: 2021-10-15T16:00:00.123Z
/// Constraints: No constraints specified.
func EvacVitalSignData_IngestStart(builder *flatbuffers.Builder) {
	builder.StartObject(5)
}
func EvacVitalSignData_IngestAddVitalSign(builder *flatbuffers.Builder, vitalSign flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(vitalSign), 0)
}
func EvacVitalSignData_IngestAddVitalSign1(builder *flatbuffers.Builder, vitalSign1 float64) {
	builder.PrependFloat64Slot(1, vitalSign1, 0.0)
}
func EvacVitalSignData_IngestAddVitalSign2(builder *flatbuffers.Builder, vitalSign2 float64) {
	builder.PrependFloat64Slot(2, vitalSign2, 0.0)
}
func EvacVitalSignData_IngestAddMedConfFactor(builder *flatbuffers.Builder, medConfFactor int32) {
	builder.PrependInt32Slot(3, medConfFactor, 0)
}
func EvacVitalSignData_IngestAddTime(builder *flatbuffers.Builder, time flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(4, flatbuffers.UOffsetT(time), 0)
}
func EvacVitalSignData_IngestEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
