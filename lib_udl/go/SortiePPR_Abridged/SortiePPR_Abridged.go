// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package SortiePPR_Abridged

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

/// /// SortiePPR is a regulatory requirement where operators must obtain permissions to full operational access to a runway, taxiway, or airport service.
type SortiePPR_Abridged struct {
	_tab flatbuffers.Table
}

const SortiePPR_AbridgedIdentifier = "SORT"

func GetRootAsSortiePPR_Abridged(buf []byte, offset flatbuffers.UOffsetT) *SortiePPR_Abridged {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &SortiePPR_Abridged{}
	x.Init(buf, n+offset)
	return x
}

func FinishSortiePPR_AbridgedBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	identifierBytes := []byte(SortiePPR_AbridgedIdentifier)
	builder.FinishWithFileIdentifier(offset, identifierBytes)
}

func SortiePPR_AbridgedBufferHasIdentifier(buf []byte) bool {
	return flatbuffers.BufferHasIdentifier(buf, SortiePPR_AbridgedIdentifier)
}

func GetSizePrefixedRootAsSortiePPR_Abridged(buf []byte, offset flatbuffers.UOffsetT) *SortiePPR_Abridged {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &SortiePPR_Abridged{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedSortiePPR_AbridgedBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	identifierBytes := []byte(SortiePPR_AbridgedIdentifier)
	builder.FinishSizePrefixedWithFileIdentifier(offset, identifierBytes)
}

func SizePrefixedSortiePPR_AbridgedBufferHasIdentifier(buf []byte) bool {
	return flatbuffers.SizePrefixedBufferHasIdentifier(buf, SortiePPR_AbridgedIdentifier)
}

func (rcv *SortiePPR_Abridged) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *SortiePPR_Abridged) Table() flatbuffers.Table {
	return rcv._tab
}

/// Unique identifier of the record, auto-generated by the system.
/// Example: /// Example: SORTIEPPR-ID
/// Constraints: Minimum length = 1, Maximum length = 36
func (rcv *SortiePPR_Abridged) Id() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Unique identifier of the record, auto-generated by the system.
/// Example: /// Example: SORTIEPPR-ID
/// Constraints: Minimum length = 1, Maximum length = 36
/// Classification marking of the data in IC/CAPCO Portion-marked format.
/// Example: /// Example: U
/// Constraints: Minimum length = 1, Maximum length = 128
func (rcv *SortiePPR_Abridged) ClassificationMarking() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Classification marking of the data in IC/CAPCO Portion-marked format.
/// Example: /// Example: U
/// Constraints: Minimum length = 1, Maximum length = 128
/// Unique identifier of the Aircraft Sortie associated with this prior permission required (PPR) record.
/// Example: /// Example: 4ef3d1e8-ab08-ab70-498f-edc479734e5c
/// Constraints: Minimum length = 1, Maximum length = 36
func (rcv *SortiePPR_Abridged) IdSortie() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Unique identifier of the Aircraft Sortie associated with this prior permission required (PPR) record.
/// Example: /// Example: 4ef3d1e8-ab08-ab70-498f-edc479734e5c
/// Constraints: Minimum length = 1, Maximum length = 36
/// Optional ID from external systems. This field has no meaning within UDL and is provided as a convenience for systems that require tracking of an internal system generated ID.
/// Example: /// Example: aa714f4d52a37ab1a00b21af9566e379
/// Constraints: Minimum length = 0, Maximum length = 36
func (rcv *SortiePPR_Abridged) ExternalId() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Optional ID from external systems. This field has no meaning within UDL and is provided as a convenience for systems that require tracking of an internal system generated ID.
/// Example: /// Example: aa714f4d52a37ab1a00b21af9566e379
/// Constraints: Minimum length = 0, Maximum length = 36
/// The prior permission required (PPR) number issued by the airfield for a sortie.
/// Example: /// Example: 07-21-07W
/// Constraints: Minimum length = 0, Maximum length = 16
func (rcv *SortiePPR_Abridged) Number() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The prior permission required (PPR) number issued by the airfield for a sortie.
/// Example: /// Example: 07-21-07W
/// Constraints: Minimum length = 0, Maximum length = 16
/// Time the prior permission required (PPR) valid window begins, in ISO 8601 UTC format with millisecond precision.
/// Example: /// Example: 2024-01-01T01:01:01.123Z
/// Constraints: No constraints specified.
func (rcv *SortiePPR_Abridged) StartTime() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Time the prior permission required (PPR) valid window begins, in ISO 8601 UTC format with millisecond precision.
/// Example: /// Example: 2024-01-01T01:01:01.123Z
/// Constraints: No constraints specified.
/// Time the prior permission required (PPR) valid window ends, in ISO 8601 UTC format with millisecond precision.
/// Example: /// Example: 2024-01-01T01:01:01.123Z
/// Constraints: No constraints specified.
func (rcv *SortiePPR_Abridged) EndTime() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Time the prior permission required (PPR) valid window ends, in ISO 8601 UTC format with millisecond precision.
/// Example: /// Example: 2024-01-01T01:01:01.123Z
/// Constraints: No constraints specified.
/// The username of the prior permission required (PPR) requestor.
/// Example: /// Example: jsmith1
/// Constraints: Minimum length = 0, Maximum length = 32
func (rcv *SortiePPR_Abridged) Requestor() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(18))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The username of the prior permission required (PPR) requestor.
/// Example: /// Example: jsmith1
/// Constraints: Minimum length = 0, Maximum length = 32
/// Identifier of the prior permission required (PPR) grantor.
/// Example: /// Example: SMITH
/// Constraints: Minimum length = 0, Maximum length = 32
func (rcv *SortiePPR_Abridged) Grantor() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(20))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Identifier of the prior permission required (PPR) grantor.
/// Example: /// Example: SMITH
/// Constraints: Minimum length = 0, Maximum length = 32
/// Type of prior permission required (PPR) for a sortie (M - Military or C - Civilian). Enum: [M, C].
/// Example: /// Example: M
/// Constraints: Minimum length = 0, Maximum length = 1
func (rcv *SortiePPR_Abridged) Type() SortiePPR_Abridged_type_Enum {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(22))
	if o != 0 {
		return SortiePPR_Abridged_type_Enum(rcv._tab.GetInt8(o + rcv._tab.Pos))
	}
	return 0
}

/// Type of prior permission required (PPR) for a sortie (M - Military or C - Civilian). Enum: [M, C].
/// Example: /// Example: M
/// Constraints: Minimum length = 0, Maximum length = 1
func (rcv *SortiePPR_Abridged) MutateType(n SortiePPR_Abridged_type_Enum) bool {
	return rcv._tab.MutateInt8Slot(22, int8(n))
}

/// Remarks concerning the prior permission required (PPR) for a sortie.
/// Example: /// Example: PPR remark
/// Constraints: Minimum length = 0, Maximum length = 512
func (rcv *SortiePPR_Abridged) Remarks() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(24))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Remarks concerning the prior permission required (PPR) for a sortie.
/// Example: /// Example: PPR remark
/// Constraints: Minimum length = 0, Maximum length = 512
/// Time the row was created in the database, auto-populated by the system.
/// Example: /// Example: 2022-01-01T16:00:00.123Z
/// Constraints: No constraints specified.
func (rcv *SortiePPR_Abridged) CreatedAt() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(26))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Time the row was created in the database, auto-populated by the system.
/// Example: /// Example: 2022-01-01T16:00:00.123Z
/// Constraints: No constraints specified.
/// Application user who created the row in the database, auto-populated by the system.
/// Example: /// Example: some.user
/// Constraints: Minimum length = 1, Maximum length = 64
func (rcv *SortiePPR_Abridged) CreatedBy() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(28))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Application user who created the row in the database, auto-populated by the system.
/// Example: /// Example: some.user
/// Constraints: Minimum length = 1, Maximum length = 64
/// The source data library from which this record was received. This could be a remote or tactical UDL or another data library. If null, the record should be assumed to have originated from the primary Enterprise UDL.
/// Example: /// Example: AXE
/// Constraints: Minimum length = 0, Maximum length = 64
func (rcv *SortiePPR_Abridged) SourceDl() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(30))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The source data library from which this record was received. This could be a remote or tactical UDL or another data library. If null, the record should be assumed to have originated from the primary Enterprise UDL.
/// Example: /// Example: AXE
/// Constraints: Minimum length = 0, Maximum length = 64
/// Source of the data.
/// Example: /// Example: Bluestaq
/// Constraints: Minimum length = 1, Maximum length = 64
func (rcv *SortiePPR_Abridged) Source() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(32))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Source of the data.
/// Example: /// Example: Bluestaq
/// Constraints: Minimum length = 1, Maximum length = 64
/// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
/// Example: /// Example: THIRD_PARTY_DATASOURCE
/// Constraints: Minimum length = 0, Maximum length = 64
func (rcv *SortiePPR_Abridged) Origin() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(34))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
/// Example: /// Example: THIRD_PARTY_DATASOURCE
/// Constraints: Minimum length = 0, Maximum length = 64
/// The originating source network on which this record was created, auto-populated by the system.
/// Example: /// Example: OPS1
/// Constraints: Minimum length = 1, Maximum length = 32
func (rcv *SortiePPR_Abridged) OrigNetwork() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(36))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The originating source network on which this record was created, auto-populated by the system.
/// Example: /// Example: OPS1
/// Constraints: Minimum length = 1, Maximum length = 32
/// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
/// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
/// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
/// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
/// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
/// Example: /// Example: TEST
/// Constraints: Minimum length = 1, Maximum length = 32
func (rcv *SortiePPR_Abridged) DataMode() SortiePPR_Abridged_dataMode_Enum {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(38))
	if o != 0 {
		return SortiePPR_Abridged_dataMode_Enum(rcv._tab.GetInt8(o + rcv._tab.Pos))
	}
	return 0
}

/// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
/// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
/// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
/// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
/// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
/// Example: /// Example: TEST
/// Constraints: Minimum length = 1, Maximum length = 32
func (rcv *SortiePPR_Abridged) MutateDataMode(n SortiePPR_Abridged_dataMode_Enum) bool {
	return rcv._tab.MutateInt8Slot(38, int8(n))
}

func SortiePPR_AbridgedStart(builder *flatbuffers.Builder) {
	builder.StartObject(18)
}
func SortiePPR_AbridgedAddId(builder *flatbuffers.Builder, id flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(id), 0)
}
func SortiePPR_AbridgedAddClassificationMarking(builder *flatbuffers.Builder, classificationMarking flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(classificationMarking), 0)
}
func SortiePPR_AbridgedAddIdSortie(builder *flatbuffers.Builder, idSortie flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(idSortie), 0)
}
func SortiePPR_AbridgedAddExternalId(builder *flatbuffers.Builder, externalId flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(3, flatbuffers.UOffsetT(externalId), 0)
}
func SortiePPR_AbridgedAddNumber(builder *flatbuffers.Builder, number flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(4, flatbuffers.UOffsetT(number), 0)
}
func SortiePPR_AbridgedAddStartTime(builder *flatbuffers.Builder, startTime flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(5, flatbuffers.UOffsetT(startTime), 0)
}
func SortiePPR_AbridgedAddEndTime(builder *flatbuffers.Builder, endTime flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(6, flatbuffers.UOffsetT(endTime), 0)
}
func SortiePPR_AbridgedAddRequestor(builder *flatbuffers.Builder, requestor flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(7, flatbuffers.UOffsetT(requestor), 0)
}
func SortiePPR_AbridgedAddGrantor(builder *flatbuffers.Builder, grantor flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(8, flatbuffers.UOffsetT(grantor), 0)
}
func SortiePPR_AbridgedAddType(builder *flatbuffers.Builder, type_ SortiePPR_Abridged_type_Enum) {
	builder.PrependInt8Slot(9, int8(type_), 0)
}
func SortiePPR_AbridgedAddRemarks(builder *flatbuffers.Builder, remarks flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(10, flatbuffers.UOffsetT(remarks), 0)
}
func SortiePPR_AbridgedAddCreatedAt(builder *flatbuffers.Builder, createdAt flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(11, flatbuffers.UOffsetT(createdAt), 0)
}
func SortiePPR_AbridgedAddCreatedBy(builder *flatbuffers.Builder, createdBy flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(12, flatbuffers.UOffsetT(createdBy), 0)
}
func SortiePPR_AbridgedAddSourceDl(builder *flatbuffers.Builder, sourceDl flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(13, flatbuffers.UOffsetT(sourceDl), 0)
}
func SortiePPR_AbridgedAddSource(builder *flatbuffers.Builder, source flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(14, flatbuffers.UOffsetT(source), 0)
}
func SortiePPR_AbridgedAddOrigin(builder *flatbuffers.Builder, origin flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(15, flatbuffers.UOffsetT(origin), 0)
}
func SortiePPR_AbridgedAddOrigNetwork(builder *flatbuffers.Builder, origNetwork flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(16, flatbuffers.UOffsetT(origNetwork), 0)
}
func SortiePPR_AbridgedAddDataMode(builder *flatbuffers.Builder, dataMode SortiePPR_Abridged_dataMode_Enum) {
	builder.PrependInt8Slot(17, int8(dataMode), 0)
}
func SortiePPR_AbridgedEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
