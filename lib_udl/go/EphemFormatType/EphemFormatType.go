// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package EphemFormatType

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

/// /// No description available.
type EphemFormatType struct {
	_tab flatbuffers.Table
}

const EphemFormatTypeIdentifier = "EPHE"

func GetRootAsEphemFormatType(buf []byte, offset flatbuffers.UOffsetT) *EphemFormatType {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &EphemFormatType{}
	x.Init(buf, n+offset)
	return x
}

func FinishEphemFormatTypeBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	identifierBytes := []byte(EphemFormatTypeIdentifier)
	builder.FinishWithFileIdentifier(offset, identifierBytes)
}

func EphemFormatTypeBufferHasIdentifier(buf []byte) bool {
	return flatbuffers.BufferHasIdentifier(buf, EphemFormatTypeIdentifier)
}

func GetSizePrefixedRootAsEphemFormatType(buf []byte, offset flatbuffers.UOffsetT) *EphemFormatType {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &EphemFormatType{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedEphemFormatTypeBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	identifierBytes := []byte(EphemFormatTypeIdentifier)
	builder.FinishSizePrefixedWithFileIdentifier(offset, identifierBytes)
}

func SizePrefixedEphemFormatTypeBufferHasIdentifier(buf []byte) bool {
	return flatbuffers.SizePrefixedBufferHasIdentifier(buf, EphemFormatTypeIdentifier)
}

func (rcv *EphemFormatType) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *EphemFormatType) Table() flatbuffers.Table {
	return rcv._tab
}

func EphemFormatTypeStart(builder *flatbuffers.Builder) {
	builder.StartObject(0)
}
func EphemFormatTypeEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
