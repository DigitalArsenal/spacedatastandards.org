// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package Entity_Ingest

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

/// /// An entity is a generic representation of any object within a space/SSA system such as sensors, on-orbit objects, RF Emitters, space craft buses, etc. An entity can have an operating unit, a location (if terrestrial), and statuses.
type Entity_Ingest struct {
	_tab flatbuffers.Table
}

const Entity_IngestIdentifier = "ENTI"

func GetRootAsEntity_Ingest(buf []byte, offset flatbuffers.UOffsetT) *Entity_Ingest {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &Entity_Ingest{}
	x.Init(buf, n+offset)
	return x
}

func FinishEntity_IngestBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	identifierBytes := []byte(Entity_IngestIdentifier)
	builder.FinishWithFileIdentifier(offset, identifierBytes)
}

func Entity_IngestBufferHasIdentifier(buf []byte) bool {
	return flatbuffers.BufferHasIdentifier(buf, Entity_IngestIdentifier)
}

func GetSizePrefixedRootAsEntity_Ingest(buf []byte, offset flatbuffers.UOffsetT) *Entity_Ingest {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &Entity_Ingest{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedEntity_IngestBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	identifierBytes := []byte(Entity_IngestIdentifier)
	builder.FinishSizePrefixedWithFileIdentifier(offset, identifierBytes)
}

func SizePrefixedEntity_IngestBufferHasIdentifier(buf []byte) bool {
	return flatbuffers.SizePrefixedBufferHasIdentifier(buf, Entity_IngestIdentifier)
}

func (rcv *Entity_Ingest) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *Entity_Ingest) Table() flatbuffers.Table {
	return rcv._tab
}

/// Unique identifier of the record.
/// Example: /// Example: ENTITY-ID
/// Constraints: Minimum length = 1, Maximum length = 36
func (rcv *Entity_Ingest) IdEntity() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Unique identifier of the record.
/// Example: /// Example: ENTITY-ID
/// Constraints: Minimum length = 1, Maximum length = 36
/// Unique entity name.
/// Example: /// Example: Example name
/// Constraints: Minimum length = 1, Maximum length = 128
func (rcv *Entity_Ingest) Name() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Unique entity name.
/// Example: /// Example: Example name
/// Constraints: Minimum length = 1, Maximum length = 128
/// Classification marking of the data in IC/CAPCO Portion-marked format.
/// Example: /// Example: U
/// Constraints: Minimum length = 1, Maximum length = 128
func (rcv *Entity_Ingest) ClassificationMarking() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Classification marking of the data in IC/CAPCO Portion-marked format.
/// Example: /// Example: U
/// Constraints: Minimum length = 1, Maximum length = 128
/// The type of entity represented by this record (AIRCRAFT, BUS, COMM, IR, NAVIGATION, ONORBIT, RFEMITTER, SCIENTIFIC, SENSOR, SITE, VESSEL).
/// Example: /// Example: ONORBIT
/// Constraints: Minimum length = 1, Maximum length = 45
func (rcv *Entity_Ingest) Type() Entity_Ingest_type_Enum {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return Entity_Ingest_type_Enum(rcv._tab.GetInt8(o + rcv._tab.Pos))
	}
	return 0
}

/// The type of entity represented by this record (AIRCRAFT, BUS, COMM, IR, NAVIGATION, ONORBIT, RFEMITTER, SCIENTIFIC, SENSOR, SITE, VESSEL).
/// Example: /// Example: ONORBIT
/// Constraints: Minimum length = 1, Maximum length = 45
func (rcv *Entity_Ingest) MutateType(n Entity_Ingest_type_Enum) bool {
	return rcv._tab.MutateInt8Slot(10, int8(n))
}

/// Unique identifier of the entity location, if terrestrial/fixed.
/// Example: /// Example: LOCATION-ID
/// Constraints: Minimum length = 0, Maximum length = 36
func (rcv *Entity_Ingest) IdLocation() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Unique identifier of the entity location, if terrestrial/fixed.
/// Example: /// Example: LOCATION-ID
/// Constraints: Minimum length = 0, Maximum length = 36
/// The country code. This value is typically the ISO 3166 Alpha-2 two-character country code, however it can also represent various consortiums that do not appear in the ISO document. The code must correspond to an existing country in the UDL’s country API. Call udl/country/{code} to get any associated FIPS code, ISO Alpha-3 code, or alternate code values that exist for the specified country code.
/// Example: /// Example: US
/// Constraints: Minimum length = 0, Maximum length = 4
func (rcv *Entity_Ingest) CountryCode() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The country code. This value is typically the ISO 3166 Alpha-2 two-character country code, however it can also represent various consortiums that do not appear in the ISO document. The code must correspond to an existing country in the UDL’s country API. Call udl/country/{code} to get any associated FIPS code, ISO Alpha-3 code, or alternate code values that exist for the specified country code.
/// Example: /// Example: US
/// Constraints: Minimum length = 0, Maximum length = 4
/// Type of organization which owns this entity (e.g. Commercial, Government, Academic, Consortium, etc).
/// Example: /// Example: Commercial
/// Constraints: Minimum length = 0, Maximum length = 32
func (rcv *Entity_Ingest) OwnerType() Entity_Ingest_ownerType_Enum {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		return Entity_Ingest_ownerType_Enum(rcv._tab.GetInt8(o + rcv._tab.Pos))
	}
	return 0
}

/// Type of organization which owns this entity (e.g. Commercial, Government, Academic, Consortium, etc).
/// Example: /// Example: Commercial
/// Constraints: Minimum length = 0, Maximum length = 32
func (rcv *Entity_Ingest) MutateOwnerType(n Entity_Ingest_ownerType_Enum) bool {
	return rcv._tab.MutateInt8Slot(16, int8(n))
}

/// Boolean indicating if this entity is taskable.
/// Example: /// Example: False
/// Constraints: No constraints specified.
func (rcv *Entity_Ingest) Taskable() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(18))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

/// Boolean indicating if this entity is taskable.
/// Example: /// Example: False
/// Constraints: No constraints specified.
func (rcv *Entity_Ingest) MutateTaskable(n bool) bool {
	return rcv._tab.MutateBoolSlot(18, n)
}

/// List of URLs to additional details/documents for this entity.
/// Example: /// Example: ['URL1', 'URL2']
/// Constraints: No constraints specified.
func (rcv *Entity_Ingest) Urls(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(20))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *Entity_Ingest) UrlsLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(20))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

/// List of URLs to additional details/documents for this entity.
/// Example: /// Example: ['URL1', 'URL2']
/// Constraints: No constraints specified.
/// Time the row was created in the database, auto-populated by the system.
/// Example: /// Example: 2018-01-01T16:00:00.123Z
/// Constraints: No constraints specified.
func (rcv *Entity_Ingest) CreatedAt() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(22))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Time the row was created in the database, auto-populated by the system.
/// Example: /// Example: 2018-01-01T16:00:00.123Z
/// Constraints: No constraints specified.
/// Application user who created the row in the database, auto-populated by the system.
/// Example: /// Example: some.user
/// Constraints: Minimum length = 1, Maximum length = 64
func (rcv *Entity_Ingest) CreatedBy() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(24))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Application user who created the row in the database, auto-populated by the system.
/// Example: /// Example: some.user
/// Constraints: Minimum length = 1, Maximum length = 64
/// Source of the data.
/// Example: /// Example: Bluestaq
/// Constraints: Minimum length = 1, Maximum length = 64
func (rcv *Entity_Ingest) Source() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(26))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Source of the data.
/// Example: /// Example: Bluestaq
/// Constraints: Minimum length = 1, Maximum length = 64
/// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
/// Example: /// Example: THIRD_PARTY_DATASOURCE
/// Constraints: Minimum length = 0, Maximum length = 64
func (rcv *Entity_Ingest) Origin() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(28))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
/// Example: /// Example: THIRD_PARTY_DATASOURCE
/// Constraints: Minimum length = 0, Maximum length = 64
/// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
/// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
/// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
/// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
/// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
/// Example: /// Example: TEST
/// Constraints: Minimum length = 1, Maximum length = 32
func (rcv *Entity_Ingest) DataMode() Entity_Ingest_dataMode_Enum {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(30))
	if o != 0 {
		return Entity_Ingest_dataMode_Enum(rcv._tab.GetInt8(o + rcv._tab.Pos))
	}
	return 0
}

/// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
/// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
/// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
/// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
/// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
/// Example: /// Example: TEST
/// Constraints: Minimum length = 1, Maximum length = 32
func (rcv *Entity_Ingest) MutateDataMode(n Entity_Ingest_dataMode_Enum) bool {
	return rcv._tab.MutateInt8Slot(30, int8(n))
}

/// No description provided.
/// Example: /// Example: No example provided.
/// Constraints: No constraints specified.
func (rcv *Entity_Ingest) Location() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(32))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// No description provided.
/// Example: /// Example: No example provided.
/// Constraints: No constraints specified.
/// No description provided.
/// Example: /// Example: No example provided.
/// Constraints: No constraints specified.
func (rcv *Entity_Ingest) OnOrbit() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(34))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// No description provided.
/// Example: /// Example: No example provided.
/// Constraints: No constraints specified.
/// Onorbit identifier if this entity is part of an on-orbit object. For the public catalog, the idOnOrbit is typically the satellite number as a string, but may be a UUID for analyst or other unknown or untracked satellites.
/// Example: /// Example: ONORBIT-ID
/// Constraints: Minimum length = 0, Maximum length = 36
func (rcv *Entity_Ingest) IdOnOrbit() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(36))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Onorbit identifier if this entity is part of an on-orbit object. For the public catalog, the idOnOrbit is typically the satellite number as a string, but may be a UUID for analyst or other unknown or untracked satellites.
/// Example: /// Example: ONORBIT-ID
/// Constraints: Minimum length = 0, Maximum length = 36
/// Unique identifier of the associated operating unit object.
/// Example: /// Example: OPERATINGUNIT-ID
/// Constraints: Minimum length = 0, Maximum length = 36
func (rcv *Entity_Ingest) IdOperatingUnit() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(38))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Unique identifier of the associated operating unit object.
/// Example: /// Example: OPERATINGUNIT-ID
/// Constraints: Minimum length = 0, Maximum length = 36
/// The originating source network on which this record was created, auto-populated by the system.
/// Example: /// Example: OPS1
/// Constraints: Minimum length = 1, Maximum length = 32
func (rcv *Entity_Ingest) OrigNetwork() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(40))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The originating source network on which this record was created, auto-populated by the system.
/// Example: /// Example: OPS1
/// Constraints: Minimum length = 1, Maximum length = 32
func Entity_IngestStart(builder *flatbuffers.Builder) {
	builder.StartObject(19)
}
func Entity_IngestAddIdEntity(builder *flatbuffers.Builder, idEntity flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(idEntity), 0)
}
func Entity_IngestAddName(builder *flatbuffers.Builder, name flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(name), 0)
}
func Entity_IngestAddClassificationMarking(builder *flatbuffers.Builder, classificationMarking flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(classificationMarking), 0)
}
func Entity_IngestAddType(builder *flatbuffers.Builder, type_ Entity_Ingest_type_Enum) {
	builder.PrependInt8Slot(3, int8(type_), 0)
}
func Entity_IngestAddIdLocation(builder *flatbuffers.Builder, idLocation flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(4, flatbuffers.UOffsetT(idLocation), 0)
}
func Entity_IngestAddCountryCode(builder *flatbuffers.Builder, countryCode flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(5, flatbuffers.UOffsetT(countryCode), 0)
}
func Entity_IngestAddOwnerType(builder *flatbuffers.Builder, ownerType Entity_Ingest_ownerType_Enum) {
	builder.PrependInt8Slot(6, int8(ownerType), 0)
}
func Entity_IngestAddTaskable(builder *flatbuffers.Builder, taskable bool) {
	builder.PrependBoolSlot(7, taskable, false)
}
func Entity_IngestAddUrls(builder *flatbuffers.Builder, urls flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(8, flatbuffers.UOffsetT(urls), 0)
}
func Entity_IngestStartUrlsVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func Entity_IngestAddCreatedAt(builder *flatbuffers.Builder, createdAt flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(9, flatbuffers.UOffsetT(createdAt), 0)
}
func Entity_IngestAddCreatedBy(builder *flatbuffers.Builder, createdBy flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(10, flatbuffers.UOffsetT(createdBy), 0)
}
func Entity_IngestAddSource(builder *flatbuffers.Builder, source flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(11, flatbuffers.UOffsetT(source), 0)
}
func Entity_IngestAddOrigin(builder *flatbuffers.Builder, origin flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(12, flatbuffers.UOffsetT(origin), 0)
}
func Entity_IngestAddDataMode(builder *flatbuffers.Builder, dataMode Entity_Ingest_dataMode_Enum) {
	builder.PrependInt8Slot(13, int8(dataMode), 0)
}
func Entity_IngestAddLocation(builder *flatbuffers.Builder, location flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(14, flatbuffers.UOffsetT(location), 0)
}
func Entity_IngestAddOnOrbit(builder *flatbuffers.Builder, onOrbit flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(15, flatbuffers.UOffsetT(onOrbit), 0)
}
func Entity_IngestAddIdOnOrbit(builder *flatbuffers.Builder, idOnOrbit flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(16, flatbuffers.UOffsetT(idOnOrbit), 0)
}
func Entity_IngestAddIdOperatingUnit(builder *flatbuffers.Builder, idOperatingUnit flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(17, flatbuffers.UOffsetT(idOperatingUnit), 0)
}
func Entity_IngestAddOrigNetwork(builder *flatbuffers.Builder, origNetwork flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(18, flatbuffers.UOffsetT(origNetwork), 0)
}
func Entity_IngestEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
