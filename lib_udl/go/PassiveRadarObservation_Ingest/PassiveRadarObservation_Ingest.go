// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package PassiveRadarObservation_Ingest

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

/// /// Model representation of observation data for passive radar based sensor phenomenologies. Passive radar is a form of radar that instead of using a dedicated transmitter, as is the case for traditional radar, utilizes radio frequency (RF) energy already in the environment. With an abundance of existing energy available from geographically diverse sources, passive radar offers wide field of view coverage and long observation times. A passive radar system is comprised of separately located transmitter (for example, FM radio stations), a reference receiver, and a surveillance sensor. The transmitted signal illuminates multiple targets over a broad angular extent as well as providing a signal at the reference site. The reflected energy is received at the surveillance site for processing with the reference signal. The long observation durations that are possible with this technology enables an accurate orbit to be determined within a single pass.
type PassiveRadarObservation_Ingest struct {
	_tab flatbuffers.Table
}

const PassiveRadarObservation_IngestIdentifier = "PASS"

func GetRootAsPassiveRadarObservation_Ingest(buf []byte, offset flatbuffers.UOffsetT) *PassiveRadarObservation_Ingest {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &PassiveRadarObservation_Ingest{}
	x.Init(buf, n+offset)
	return x
}

func FinishPassiveRadarObservation_IngestBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	identifierBytes := []byte(PassiveRadarObservation_IngestIdentifier)
	builder.FinishWithFileIdentifier(offset, identifierBytes)
}

func PassiveRadarObservation_IngestBufferHasIdentifier(buf []byte) bool {
	return flatbuffers.BufferHasIdentifier(buf, PassiveRadarObservation_IngestIdentifier)
}

func GetSizePrefixedRootAsPassiveRadarObservation_Ingest(buf []byte, offset flatbuffers.UOffsetT) *PassiveRadarObservation_Ingest {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &PassiveRadarObservation_Ingest{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedPassiveRadarObservation_IngestBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	identifierBytes := []byte(PassiveRadarObservation_IngestIdentifier)
	builder.FinishSizePrefixedWithFileIdentifier(offset, identifierBytes)
}

func SizePrefixedPassiveRadarObservation_IngestBufferHasIdentifier(buf []byte) bool {
	return flatbuffers.SizePrefixedBufferHasIdentifier(buf, PassiveRadarObservation_IngestIdentifier)
}

func (rcv *PassiveRadarObservation_Ingest) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *PassiveRadarObservation_Ingest) Table() flatbuffers.Table {
	return rcv._tab
}

/// Unique identifier of the record, auto-generated by the system.
/// Example: /// Example: bdcacfb0-3c47-4bd0-9d6c-9fa7d2c4fbb0
/// Constraints: Minimum length = 1, Maximum length = 36
func (rcv *PassiveRadarObservation_Ingest) Id() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Unique identifier of the record, auto-generated by the system.
/// Example: /// Example: bdcacfb0-3c47-4bd0-9d6c-9fa7d2c4fbb0
/// Constraints: Minimum length = 1, Maximum length = 36
/// Classification marking of the data in IC/CAPCO Portion-marked format.
/// Example: /// Example: U
/// Constraints: Minimum length = 1, Maximum length = 128
func (rcv *PassiveRadarObservation_Ingest) ClassificationMarking() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Classification marking of the data in IC/CAPCO Portion-marked format.
/// Example: /// Example: U
/// Constraints: Minimum length = 1, Maximum length = 128
/// Ob detection time in ISO 8601 UTC with microsecond precision.
/// Example: /// Example: 2023-01-24T23:35:26.518152Z
/// Constraints: No constraints specified.
func (rcv *PassiveRadarObservation_Ingest) ObTime() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Ob detection time in ISO 8601 UTC with microsecond precision.
/// Example: /// Example: 2023-01-24T23:35:26.518152Z
/// Constraints: No constraints specified.
/// Unique identifier of the target satellite on-orbit object. This ID can be used to obtain additional information on an OnOrbit object using the 'get by ID' operation (e.g. /udl/onorbit/{id}). For example, the OnOrbit with idOnOrbit = 25544 would be queried as /udl/onorbit/25544.
/// Example: /// Example: 40699
/// Constraints: Minimum length = 0, Maximum length = 36
func (rcv *PassiveRadarObservation_Ingest) IdOnOrbit() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Unique identifier of the target satellite on-orbit object. This ID can be used to obtain additional information on an OnOrbit object using the 'get by ID' operation (e.g. /udl/onorbit/{id}). For example, the OnOrbit with idOnOrbit = 25544 would be queried as /udl/onorbit/25544.
/// Example: /// Example: 40699
/// Constraints: Minimum length = 0, Maximum length = 36
/// Satellite/Catalog number of the target on-orbit object.
/// Example: /// Example: 40699
/// Constraints: No constraints specified.
func (rcv *PassiveRadarObservation_Ingest) SatNo() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

/// Satellite/Catalog number of the target on-orbit object.
/// Example: /// Example: 40699
/// Constraints: No constraints specified.
func (rcv *PassiveRadarObservation_Ingest) MutateSatNo(n int32) bool {
	return rcv._tab.MutateInt32Slot(12, n)
}

/// Optional identifier provided by observation source to indicate the target onorbit object of this observation. This may be an internal identifier and not necessarily a valid satellite number.
/// Example: /// Example: ORIGOBJECT-ID
/// Constraints: Minimum length = 0, Maximum length = 64
func (rcv *PassiveRadarObservation_Ingest) OrigObjectId() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Optional identifier provided by observation source to indicate the target onorbit object of this observation. This may be an internal identifier and not necessarily a valid satellite number.
/// Example: /// Example: ORIGOBJECT-ID
/// Constraints: Minimum length = 0, Maximum length = 64
/// Unique identifier of the reporting surveillance sensor. This ID can be used to obtain additional information on a sensor using the 'get by ID' operation (e.g. /udl/sensor/{id}). For example, the sensor with idSensor = abc would be queried as /udl/sensor/abc.
/// Example: /// Example: OCULUSA
/// Constraints: Minimum length = 0, Maximum length = 36
func (rcv *PassiveRadarObservation_Ingest) IdSensor() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Unique identifier of the reporting surveillance sensor. This ID can be used to obtain additional information on a sensor using the 'get by ID' operation (e.g. /udl/sensor/{id}). For example, the sensor with idSensor = abc would be queried as /udl/sensor/abc.
/// Example: /// Example: OCULUSA
/// Constraints: Minimum length = 0, Maximum length = 36
/// Optional identifier provided by observation source to indicate the sensor identifier which produced this observation. This may be an internal identifier and not necessarily a valid sensor ID.
/// Example: /// Example: ORIGSENSOR-ID
/// Constraints: Minimum length = 0, Maximum length = 64
func (rcv *PassiveRadarObservation_Ingest) OrigSensorId() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(18))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Optional identifier provided by observation source to indicate the sensor identifier which produced this observation. This may be an internal identifier and not necessarily a valid sensor ID.
/// Example: /// Example: ORIGSENSOR-ID
/// Constraints: Minimum length = 0, Maximum length = 64
/// Unique identifier of the transmitter. This ID can be used to obtain additional information on an RFEmitter using the 'get by ID' operation (e.g. /udl/rfemitter/{id}). For example, the RFEmitter with idRFEmitter = abc would be queried as /udl/rfemitter/abc.
/// Example: /// Example: RED_CLIFFS_3ABCRN
/// Constraints: Minimum length = 0, Maximum length = 36
func (rcv *PassiveRadarObservation_Ingest) IdRfemitter() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(20))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Unique identifier of the transmitter. This ID can be used to obtain additional information on an RFEmitter using the 'get by ID' operation (e.g. /udl/rfemitter/{id}). For example, the RFEmitter with idRFEmitter = abc would be queried as /udl/rfemitter/abc.
/// Example: /// Example: RED_CLIFFS_3ABCRN
/// Constraints: Minimum length = 0, Maximum length = 36
/// Unique identifier of the reference receiver sensor. This ID can be used to obtain additional information on a sensor using the 'get by ID' operation (e.g. /udl/sensor/{id}). For example, the sensor with idSensor = abc would be queried as /udl/sensor/abc.
/// Example: /// Example: OculusRef1
/// Constraints: Minimum length = 0, Maximum length = 36
func (rcv *PassiveRadarObservation_Ingest) IdSensorRefReceiver() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(22))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Unique identifier of the reference receiver sensor. This ID can be used to obtain additional information on a sensor using the 'get by ID' operation (e.g. /udl/sensor/{id}). For example, the sensor with idSensor = abc would be queried as /udl/sensor/abc.
/// Example: /// Example: OculusRef1
/// Constraints: Minimum length = 0, Maximum length = 36
/// Optional external observation identifier provided by the source.
/// Example: /// Example: 26892
/// Constraints: Minimum length = 0, Maximum length = 36
func (rcv *PassiveRadarObservation_Ingest) ExtObservationId() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(24))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Optional external observation identifier provided by the source.
/// Example: /// Example: 26892
/// Constraints: Minimum length = 0, Maximum length = 36
/// Optional identifier to indicate the specific tasking which produced this observation.
/// Example: /// Example: TASK-ID
/// Constraints: Minimum length = 0, Maximum length = 36
func (rcv *PassiveRadarObservation_Ingest) TaskId() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(26))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Optional identifier to indicate the specific tasking which produced this observation.
/// Example: /// Example: TASK-ID
/// Constraints: Minimum length = 0, Maximum length = 36
/// Unique identifier of a track that represents a tracklet for this observation.
/// Example: /// Example: 12212
/// Constraints: Minimum length = 0, Maximum length = 36
func (rcv *PassiveRadarObservation_Ingest) TrackId() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(28))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Unique identifier of a track that represents a tracklet for this observation.
/// Example: /// Example: 12212
/// Constraints: Minimum length = 0, Maximum length = 36
/// The position of this observation within a track (FENCE, FIRST, IN, LAST, SINGLE).  This identifier is optional and, if null, no assumption should be made regarding whether other observations may or may not exist to compose a track.
/// Example: /// Example: FIRST
/// Constraints: Minimum length = 0, Maximum length = 8
func (rcv *PassiveRadarObservation_Ingest) ObPosition() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(30))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The position of this observation within a track (FENCE, FIRST, IN, LAST, SINGLE).  This identifier is optional and, if null, no assumption should be made regarding whether other observations may or may not exist to compose a track.
/// Example: /// Example: FIRST
/// Constraints: Minimum length = 0, Maximum length = 8
/// Boolean indicating this observation is part of an uncorrelated track or was unable to be correlated to a known object. This flag should only be set to true by data providers after an attempt to correlate to an on-orbit object was made and failed. If unable to correlate, the 'origObjectId' field may be populated with an internal data provider specific identifier.
/// Example: /// Example: False
/// Constraints: No constraints specified.
func (rcv *PassiveRadarObservation_Ingest) Uct() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(32))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

/// Boolean indicating this observation is part of an uncorrelated track or was unable to be correlated to a known object. This flag should only be set to true by data providers after an attempt to correlate to an on-orbit object was made and failed. If unable to correlate, the 'origObjectId' field may be populated with an internal data provider specific identifier.
/// Example: /// Example: False
/// Constraints: No constraints specified.
func (rcv *PassiveRadarObservation_Ingest) MutateUct(n bool) bool {
	return rcv._tab.MutateBoolSlot(32, n)
}

/// Line of sight azimuth angle in degrees and topocentric frame.
/// Example: /// Example: 134.5
/// Constraints: No constraints specified.
func (rcv *PassiveRadarObservation_Ingest) Azimuth() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(34))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Line of sight azimuth angle in degrees and topocentric frame.
/// Example: /// Example: 134.5
/// Constraints: No constraints specified.
func (rcv *PassiveRadarObservation_Ingest) MutateAzimuth(n float64) bool {
	return rcv._tab.MutateFloat64Slot(34, n)
}

/// One sigma uncertainty in the line of sight azimuth angle measurement, in degrees.
/// Example: /// Example: 0.5
/// Constraints: No constraints specified.
func (rcv *PassiveRadarObservation_Ingest) AzimuthUnc() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(36))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// One sigma uncertainty in the line of sight azimuth angle measurement, in degrees.
/// Example: /// Example: 0.5
/// Constraints: No constraints specified.
func (rcv *PassiveRadarObservation_Ingest) MutateAzimuthUnc(n float64) bool {
	return rcv._tab.MutateFloat64Slot(36, n)
}

/// Sensor azimuth angle bias in degrees.
/// Example: /// Example: 0.123
/// Constraints: No constraints specified.
func (rcv *PassiveRadarObservation_Ingest) AzimuthBias() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(38))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Sensor azimuth angle bias in degrees.
/// Example: /// Example: 0.123
/// Constraints: No constraints specified.
func (rcv *PassiveRadarObservation_Ingest) MutateAzimuthBias(n float64) bool {
	return rcv._tab.MutateFloat64Slot(38, n)
}

/// Rate of change of the line of sight azimuth in degrees per second.
/// Example: /// Example: 0.5
/// Constraints: No constraints specified.
func (rcv *PassiveRadarObservation_Ingest) AzimuthRate() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(40))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Rate of change of the line of sight azimuth in degrees per second.
/// Example: /// Example: 0.5
/// Constraints: No constraints specified.
func (rcv *PassiveRadarObservation_Ingest) MutateAzimuthRate(n float64) bool {
	return rcv._tab.MutateFloat64Slot(40, n)
}

/// Line of sight elevation in degrees and topocentric frame.
/// Example: /// Example: 76.1
/// Constraints: No constraints specified.
func (rcv *PassiveRadarObservation_Ingest) Elevation() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(42))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Line of sight elevation in degrees and topocentric frame.
/// Example: /// Example: 76.1
/// Constraints: No constraints specified.
func (rcv *PassiveRadarObservation_Ingest) MutateElevation(n float64) bool {
	return rcv._tab.MutateFloat64Slot(42, n)
}

/// One sigma uncertainty in the line of sight elevation angle measurement, in degrees.
/// Example: /// Example: 0.5
/// Constraints: No constraints specified.
func (rcv *PassiveRadarObservation_Ingest) ElevationUnc() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(44))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// One sigma uncertainty in the line of sight elevation angle measurement, in degrees.
/// Example: /// Example: 0.5
/// Constraints: No constraints specified.
func (rcv *PassiveRadarObservation_Ingest) MutateElevationUnc(n float64) bool {
	return rcv._tab.MutateFloat64Slot(44, n)
}

/// Sensor elevation bias in degrees.
/// Example: /// Example: 0.123
/// Constraints: No constraints specified.
func (rcv *PassiveRadarObservation_Ingest) ElevationBias() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(46))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Sensor elevation bias in degrees.
/// Example: /// Example: 0.123
/// Constraints: No constraints specified.
func (rcv *PassiveRadarObservation_Ingest) MutateElevationBias(n float64) bool {
	return rcv._tab.MutateFloat64Slot(46, n)
}

/// Rate of change of the line of sight elevation in degrees per second.
/// Example: /// Example: 0.5
/// Constraints: No constraints specified.
func (rcv *PassiveRadarObservation_Ingest) ElevationRate() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(48))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Rate of change of the line of sight elevation in degrees per second.
/// Example: /// Example: 0.5
/// Constraints: No constraints specified.
func (rcv *PassiveRadarObservation_Ingest) MutateElevationRate(n float64) bool {
	return rcv._tab.MutateFloat64Slot(48, n)
}

/// The time difference, in seconds, between the signal collected at the surveillance site (after being reflected from the target) and the reference site (direct path line-of-sight signal).
/// Example: /// Example: 0.00505820232809312
/// Constraints: No constraints specified.
func (rcv *PassiveRadarObservation_Ingest) Delay() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(50))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// The time difference, in seconds, between the signal collected at the surveillance site (after being reflected from the target) and the reference site (direct path line-of-sight signal).
/// Example: /// Example: 0.00505820232809312
/// Constraints: No constraints specified.
func (rcv *PassiveRadarObservation_Ingest) MutateDelay(n float64) bool {
	return rcv._tab.MutateFloat64Slot(50, n)
}

/// One sigma uncertainty in the delay measurement, in seconds.
/// Example: /// Example: 3.1e-06
/// Constraints: No constraints specified.
func (rcv *PassiveRadarObservation_Ingest) DelayUnc() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(52))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// One sigma uncertainty in the delay measurement, in seconds.
/// Example: /// Example: 3.1e-06
/// Constraints: No constraints specified.
func (rcv *PassiveRadarObservation_Ingest) MutateDelayUnc(n float64) bool {
	return rcv._tab.MutateFloat64Slot(52, n)
}

/// Delay bias in seconds.
/// Example: /// Example: 1.23e-06
/// Constraints: No constraints specified.
func (rcv *PassiveRadarObservation_Ingest) DelayBias() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(54))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Delay bias in seconds.
/// Example: /// Example: 1.23e-06
/// Constraints: No constraints specified.
func (rcv *PassiveRadarObservation_Ingest) MutateDelayBias(n float64) bool {
	return rcv._tab.MutateFloat64Slot(54, n)
}

/// Target bistatic path distance in kilometers. This is the transmitter-to-target-to-surveillance site distance.
/// Example: /// Example: 754.8212
/// Constraints: No constraints specified.
func (rcv *PassiveRadarObservation_Ingest) BistaticRange() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(56))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Target bistatic path distance in kilometers. This is the transmitter-to-target-to-surveillance site distance.
/// Example: /// Example: 754.8212
/// Constraints: No constraints specified.
func (rcv *PassiveRadarObservation_Ingest) MutateBistaticRange(n float64) bool {
	return rcv._tab.MutateFloat64Slot(56, n)
}

/// One sigma uncertainty in bistatic range in kilometers.
/// Example: /// Example: 5.1
/// Constraints: No constraints specified.
func (rcv *PassiveRadarObservation_Ingest) BistaticRangeUnc() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(58))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// One sigma uncertainty in bistatic range in kilometers.
/// Example: /// Example: 5.1
/// Constraints: No constraints specified.
func (rcv *PassiveRadarObservation_Ingest) MutateBistaticRangeUnc(n float64) bool {
	return rcv._tab.MutateFloat64Slot(58, n)
}

/// Sensor bistatic range bias in kilometers.
/// Example: /// Example: 2.34
/// Constraints: No constraints specified.
func (rcv *PassiveRadarObservation_Ingest) BistaticRangeBias() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(60))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Sensor bistatic range bias in kilometers.
/// Example: /// Example: 2.34
/// Constraints: No constraints specified.
func (rcv *PassiveRadarObservation_Ingest) MutateBistaticRangeBias(n float64) bool {
	return rcv._tab.MutateFloat64Slot(60, n)
}

/// Rate of change of the bistatic path in kilometers/sec.
/// Example: /// Example: -0.30222
/// Constraints: No constraints specified.
func (rcv *PassiveRadarObservation_Ingest) BistaticRangeRate() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(62))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Rate of change of the bistatic path in kilometers/sec.
/// Example: /// Example: -0.30222
/// Constraints: No constraints specified.
func (rcv *PassiveRadarObservation_Ingest) MutateBistaticRangeRate(n float64) bool {
	return rcv._tab.MutateFloat64Slot(62, n)
}

/// One sigma uncertainty in rate of change of the bistatic path in kilometers/sec.
/// Example: /// Example: 0.123
/// Constraints: No constraints specified.
func (rcv *PassiveRadarObservation_Ingest) BistaticRangeRateUnc() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(64))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// One sigma uncertainty in rate of change of the bistatic path in kilometers/sec.
/// Example: /// Example: 0.123
/// Constraints: No constraints specified.
func (rcv *PassiveRadarObservation_Ingest) MutateBistaticRangeRateUnc(n float64) bool {
	return rcv._tab.MutateFloat64Slot(64, n)
}

/// Bistatic range acceleration in kilometers/sec^2.
/// Example: /// Example: 1.23
/// Constraints: No constraints specified.
func (rcv *PassiveRadarObservation_Ingest) BistaticRangeAccel() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(66))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Bistatic range acceleration in kilometers/sec^2.
/// Example: /// Example: 1.23
/// Constraints: No constraints specified.
func (rcv *PassiveRadarObservation_Ingest) MutateBistaticRangeAccel(n float64) bool {
	return rcv._tab.MutateFloat64Slot(66, n)
}

/// One sigma uncertainty in the bistatic range acceleration measurement, in kilometers/sec^2.
/// Example: /// Example: 0.1
/// Constraints: No constraints specified.
func (rcv *PassiveRadarObservation_Ingest) BistaticRangeAccelUnc() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(68))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// One sigma uncertainty in the bistatic range acceleration measurement, in kilometers/sec^2.
/// Example: /// Example: 0.1
/// Constraints: No constraints specified.
func (rcv *PassiveRadarObservation_Ingest) MutateBistaticRangeAccelUnc(n float64) bool {
	return rcv._tab.MutateFloat64Slot(68, n)
}

/// Doppler measurement in hertz.
/// Example: /// Example: -101.781641000597
/// Constraints: No constraints specified.
func (rcv *PassiveRadarObservation_Ingest) Doppler() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(70))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Doppler measurement in hertz.
/// Example: /// Example: -101.781641000597
/// Constraints: No constraints specified.
func (rcv *PassiveRadarObservation_Ingest) MutateDoppler(n float64) bool {
	return rcv._tab.MutateFloat64Slot(70, n)
}

/// One sigma uncertainty in the Doppler measurement in hertz.
/// Example: /// Example: 0.2
/// Constraints: No constraints specified.
func (rcv *PassiveRadarObservation_Ingest) DopplerUnc() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(72))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// One sigma uncertainty in the Doppler measurement in hertz.
/// Example: /// Example: 0.2
/// Constraints: No constraints specified.
func (rcv *PassiveRadarObservation_Ingest) MutateDopplerUnc(n float64) bool {
	return rcv._tab.MutateFloat64Slot(72, n)
}

/// Coning angle in degrees.
/// Example: /// Example: 60.1
/// Constraints: No constraints specified.
func (rcv *PassiveRadarObservation_Ingest) Coning() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(74))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Coning angle in degrees.
/// Example: /// Example: 60.1
/// Constraints: No constraints specified.
func (rcv *PassiveRadarObservation_Ingest) MutateConing(n float64) bool {
	return rcv._tab.MutateFloat64Slot(74, n)
}

/// One sigma uncertainty in the coning angle measurement, in degrees.
/// Example: /// Example: 0.5
/// Constraints: No constraints specified.
func (rcv *PassiveRadarObservation_Ingest) ConingUnc() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(76))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// One sigma uncertainty in the coning angle measurement, in degrees.
/// Example: /// Example: 0.5
/// Constraints: No constraints specified.
func (rcv *PassiveRadarObservation_Ingest) MutateConingUnc(n float64) bool {
	return rcv._tab.MutateFloat64Slot(76, n)
}

/// Time of flight (TOF) in seconds. This is the calculated propagation time from transmitter-to-target-to-surveillance site.
/// Example: /// Example: 0.00592856674135648
/// Constraints: No constraints specified.
func (rcv *PassiveRadarObservation_Ingest) Tof() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(78))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Time of flight (TOF) in seconds. This is the calculated propagation time from transmitter-to-target-to-surveillance site.
/// Example: /// Example: 0.00592856674135648
/// Constraints: No constraints specified.
func (rcv *PassiveRadarObservation_Ingest) MutateTof(n float64) bool {
	return rcv._tab.MutateFloat64Slot(78, n)
}

/// One sigma uncertainty in time of flight in seconds.
/// Example: /// Example: 3.1e-06
/// Constraints: No constraints specified.
func (rcv *PassiveRadarObservation_Ingest) TofUnc() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(80))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// One sigma uncertainty in time of flight in seconds.
/// Example: /// Example: 3.1e-06
/// Constraints: No constraints specified.
func (rcv *PassiveRadarObservation_Ingest) MutateTofUnc(n float64) bool {
	return rcv._tab.MutateFloat64Slot(80, n)
}

/// The Time of Flight (TOF) bias in seconds.
/// Example: /// Example: 1.23e-06
/// Constraints: No constraints specified.
func (rcv *PassiveRadarObservation_Ingest) TofBias() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(82))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// The Time of Flight (TOF) bias in seconds.
/// Example: /// Example: 1.23e-06
/// Constraints: No constraints specified.
func (rcv *PassiveRadarObservation_Ingest) MutateTofBias(n float64) bool {
	return rcv._tab.MutateFloat64Slot(82, n)
}

/// The target Acceleration measurement in kilometers/sec^2 for this observation.
/// Example: /// Example: 1.23
/// Constraints: No constraints specified.
func (rcv *PassiveRadarObservation_Ingest) Accel() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(84))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// The target Acceleration measurement in kilometers/sec^2 for this observation.
/// Example: /// Example: 1.23
/// Constraints: No constraints specified.
func (rcv *PassiveRadarObservation_Ingest) MutateAccel(n float64) bool {
	return rcv._tab.MutateFloat64Slot(84, n)
}

/// The target Acceleration uncertainty measurement in kilometers/sec^2 for this observation.
/// Example: /// Example: 0.1
/// Constraints: No constraints specified.
func (rcv *PassiveRadarObservation_Ingest) AccelUnc() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(86))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// The target Acceleration uncertainty measurement in kilometers/sec^2 for this observation.
/// Example: /// Example: 0.1
/// Constraints: No constraints specified.
func (rcv *PassiveRadarObservation_Ingest) MutateAccelUnc(n float64) bool {
	return rcv._tab.MutateFloat64Slot(86, n)
}

/// Line of sight right ascension in degrees and J2000 coordinate frame.
/// Example: /// Example: 1.23
/// Constraints: No constraints specified.
func (rcv *PassiveRadarObservation_Ingest) Ra() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(88))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Line of sight right ascension in degrees and J2000 coordinate frame.
/// Example: /// Example: 1.23
/// Constraints: No constraints specified.
func (rcv *PassiveRadarObservation_Ingest) MutateRa(n float64) bool {
	return rcv._tab.MutateFloat64Slot(88, n)
}

/// Line of sight declination angle in degrees and J2000 coordinate frame.
/// Example: /// Example: 10.23
/// Constraints: No constraints specified.
func (rcv *PassiveRadarObservation_Ingest) Declination() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(90))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Line of sight declination angle in degrees and J2000 coordinate frame.
/// Example: /// Example: 10.23
/// Constraints: No constraints specified.
func (rcv *PassiveRadarObservation_Ingest) MutateDeclination(n float64) bool {
	return rcv._tab.MutateFloat64Slot(90, n)
}

/// WGS-84 target latitude sub-point at observation time (obTime), represented as -90 to 90 degrees (negative values south of equator).
/// Example: /// Example: -35.1181763996856
/// Constraints: No constraints specified.
func (rcv *PassiveRadarObservation_Ingest) Lat() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(92))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// WGS-84 target latitude sub-point at observation time (obTime), represented as -90 to 90 degrees (negative values south of equator).
/// Example: /// Example: -35.1181763996856
/// Constraints: No constraints specified.
func (rcv *PassiveRadarObservation_Ingest) MutateLat(n float64) bool {
	return rcv._tab.MutateFloat64Slot(92, n)
}

/// WGS-84 target longitude sub-point at observation time (obTime), represented as -180 to 180 degrees (negative values west of Prime Meridian).
/// Example: /// Example: 139.613567052763
/// Constraints: No constraints specified.
func (rcv *PassiveRadarObservation_Ingest) Lon() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(94))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// WGS-84 target longitude sub-point at observation time (obTime), represented as -180 to 180 degrees (negative values west of Prime Meridian).
/// Example: /// Example: 139.613567052763
/// Constraints: No constraints specified.
func (rcv *PassiveRadarObservation_Ingest) MutateLon(n float64) bool {
	return rcv._tab.MutateFloat64Slot(94, n)
}

/// The target altitude relative to WGS-84 ellipsoid, in kilometers for this observation.
/// Example: /// Example: 478.056378
/// Constraints: No constraints specified.
func (rcv *PassiveRadarObservation_Ingest) Alt() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(96))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// The target altitude relative to WGS-84 ellipsoid, in kilometers for this observation.
/// Example: /// Example: 478.056378
/// Constraints: No constraints specified.
func (rcv *PassiveRadarObservation_Ingest) MutateAlt(n float64) bool {
	return rcv._tab.MutateFloat64Slot(96, n)
}

/// X velocity of target in kilometers/sec in J2000 coordinate frame.
/// Example: /// Example: 1.23
/// Constraints: No constraints specified.
func (rcv *PassiveRadarObservation_Ingest) Xvel() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(98))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// X velocity of target in kilometers/sec in J2000 coordinate frame.
/// Example: /// Example: 1.23
/// Constraints: No constraints specified.
func (rcv *PassiveRadarObservation_Ingest) MutateXvel(n float64) bool {
	return rcv._tab.MutateFloat64Slot(98, n)
}

/// Y velocity of target in kilometers/sec in J2000 coordinate frame.
/// Example: /// Example: 3.21
/// Constraints: No constraints specified.
func (rcv *PassiveRadarObservation_Ingest) Yvel() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(100))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Y velocity of target in kilometers/sec in J2000 coordinate frame.
/// Example: /// Example: 3.21
/// Constraints: No constraints specified.
func (rcv *PassiveRadarObservation_Ingest) MutateYvel(n float64) bool {
	return rcv._tab.MutateFloat64Slot(100, n)
}

/// Z velocity of target in kilometers/sec in J2000 coordinate frame.
/// Example: /// Example: 3.12
/// Constraints: No constraints specified.
func (rcv *PassiveRadarObservation_Ingest) Zvel() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(102))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Z velocity of target in kilometers/sec in J2000 coordinate frame.
/// Example: /// Example: 3.12
/// Constraints: No constraints specified.
func (rcv *PassiveRadarObservation_Ingest) MutateZvel(n float64) bool {
	return rcv._tab.MutateFloat64Slot(102, n)
}

/// Radar cross section in meters squared for polarization principal.
/// Example: /// Example: 100.23
/// Constraints: No constraints specified.
func (rcv *PassiveRadarObservation_Ingest) Rcs() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(104))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Radar cross section in meters squared for polarization principal.
/// Example: /// Example: 100.23
/// Constraints: No constraints specified.
func (rcv *PassiveRadarObservation_Ingest) MutateRcs(n float64) bool {
	return rcv._tab.MutateFloat64Slot(104, n)
}

/// One sigma uncertainty in principal polarization Radar Cross Section, in meters^2.
/// Example: /// Example: 1.23
/// Constraints: No constraints specified.
func (rcv *PassiveRadarObservation_Ingest) RcsUnc() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(106))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// One sigma uncertainty in principal polarization Radar Cross Section, in meters^2.
/// Example: /// Example: 1.23
/// Constraints: No constraints specified.
func (rcv *PassiveRadarObservation_Ingest) MutateRcsUnc(n float64) bool {
	return rcv._tab.MutateFloat64Slot(106, n)
}

/// Radar cross section in meters squared for orthogonal polarization.
/// Example: /// Example: 10.23
/// Constraints: No constraints specified.
func (rcv *PassiveRadarObservation_Ingest) OrthogonalRcs() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(108))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Radar cross section in meters squared for orthogonal polarization.
/// Example: /// Example: 10.23
/// Constraints: No constraints specified.
func (rcv *PassiveRadarObservation_Ingest) MutateOrthogonalRcs(n float64) bool {
	return rcv._tab.MutateFloat64Slot(108, n)
}

/// One sigma uncertainty in orthogonal polarization Radar Cross Section, in meters^2.
/// Example: /// Example: 1.23
/// Constraints: No constraints specified.
func (rcv *PassiveRadarObservation_Ingest) OrthogonalRcsUnc() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(110))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// One sigma uncertainty in orthogonal polarization Radar Cross Section, in meters^2.
/// Example: /// Example: 1.23
/// Constraints: No constraints specified.
func (rcv *PassiveRadarObservation_Ingest) MutateOrthogonalRcsUnc(n float64) bool {
	return rcv._tab.MutateFloat64Slot(110, n)
}

/// Signal to noise ratio, in dB.
/// Example: /// Example: 17.292053
/// Constraints: No constraints specified.
func (rcv *PassiveRadarObservation_Ingest) Snr() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(112))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Signal to noise ratio, in dB.
/// Example: /// Example: 17.292053
/// Constraints: No constraints specified.
func (rcv *PassiveRadarObservation_Ingest) MutateSnr(n float64) bool {
	return rcv._tab.MutateFloat64Slot(112, n)
}

/// Sensor timing bias in seconds.
/// Example: /// Example: 1.23
/// Constraints: No constraints specified.
func (rcv *PassiveRadarObservation_Ingest) TimingBias() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(114))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Sensor timing bias in seconds.
/// Example: /// Example: 1.23
/// Constraints: No constraints specified.
func (rcv *PassiveRadarObservation_Ingest) MutateTimingBias(n float64) bool {
	return rcv._tab.MutateFloat64Slot(114, n)
}

/// Optional array of provider/source specific tags for this data, where each element is no longer than 32 characters, used for implementing data owner conditional access controls to restrict access to the data. Should be left null by data providers unless conditional access controls are coordinated with the UDL team.
/// Example: /// Example: ['TAG1', 'TAG2']
/// Constraints: No constraints specified.
func (rcv *PassiveRadarObservation_Ingest) Tags(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(116))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *PassiveRadarObservation_Ingest) TagsLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(116))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

/// Optional array of provider/source specific tags for this data, where each element is no longer than 32 characters, used for implementing data owner conditional access controls to restrict access to the data. Should be left null by data providers unless conditional access controls are coordinated with the UDL team.
/// Example: /// Example: ['TAG1', 'TAG2']
/// Constraints: No constraints specified.
/// Optional identifier to track a commercial or marketplace transaction executed to produce this data.
/// Example: /// Example: TRANSACTION-ID
/// Constraints: Minimum length = 0, Maximum length = 64
func (rcv *PassiveRadarObservation_Ingest) TransactionId() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(118))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Optional identifier to track a commercial or marketplace transaction executed to produce this data.
/// Example: /// Example: TRANSACTION-ID
/// Constraints: Minimum length = 0, Maximum length = 64
/// Optional source-provided and searchable metadata or descriptor of the data.
/// Example: /// Example: Descriptor
/// Constraints: Minimum length = 0, Maximum length = 64
func (rcv *PassiveRadarObservation_Ingest) Descriptor() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(120))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Optional source-provided and searchable metadata or descriptor of the data.
/// Example: /// Example: Descriptor
/// Constraints: Minimum length = 0, Maximum length = 64
/// Time the row was created in the database, auto-populated by the system.
/// Example: /// Example: 2018-01-01T16:00:00.123Z
/// Constraints: No constraints specified.
func (rcv *PassiveRadarObservation_Ingest) CreatedAt() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(122))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Time the row was created in the database, auto-populated by the system.
/// Example: /// Example: 2018-01-01T16:00:00.123Z
/// Constraints: No constraints specified.
/// Application user who created the row in the database, auto-populated by the system.
/// Example: /// Example: some.user
/// Constraints: Minimum length = 1, Maximum length = 64
func (rcv *PassiveRadarObservation_Ingest) CreatedBy() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(124))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Application user who created the row in the database, auto-populated by the system.
/// Example: /// Example: some.user
/// Constraints: Minimum length = 1, Maximum length = 64
/// Source of the data.
/// Example: /// Example: Bluestaq
/// Constraints: Minimum length = 1, Maximum length = 64
func (rcv *PassiveRadarObservation_Ingest) Source() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(126))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Source of the data.
/// Example: /// Example: Bluestaq
/// Constraints: Minimum length = 1, Maximum length = 64
/// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
/// Example: /// Example: THIRD_PARTY_DATASOURCE
/// Constraints: Minimum length = 0, Maximum length = 64
func (rcv *PassiveRadarObservation_Ingest) Origin() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(128))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
/// Example: /// Example: THIRD_PARTY_DATASOURCE
/// Constraints: Minimum length = 0, Maximum length = 64
/// The originating source network on which this record was created, auto-populated by the system.
/// Example: /// Example: ORIG
/// Constraints: Minimum length = 1, Maximum length = 32
func (rcv *PassiveRadarObservation_Ingest) OrigNetwork() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(130))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The originating source network on which this record was created, auto-populated by the system.
/// Example: /// Example: ORIG
/// Constraints: Minimum length = 1, Maximum length = 32
/// The source data library from which this record was received. This could be a remote or tactical UDL or another data library. If null, the record should be assumed to have originated from the primary Enterprise UDL.
/// Example: /// Example: AXE
/// Constraints: Minimum length = 0, Maximum length = 64
func (rcv *PassiveRadarObservation_Ingest) SourceDl() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(132))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The source data library from which this record was received. This could be a remote or tactical UDL or another data library. If null, the record should be assumed to have originated from the primary Enterprise UDL.
/// Example: /// Example: AXE
/// Constraints: Minimum length = 0, Maximum length = 64
/// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
/// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
/// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
/// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
/// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
/// Example: /// Example: TEST
/// Constraints: Minimum length = 1, Maximum length = 32
func (rcv *PassiveRadarObservation_Ingest) DataMode() PassiveRadarObservation_Ingest_dataMode_Enum {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(134))
	if o != 0 {
		return PassiveRadarObservation_Ingest_dataMode_Enum(rcv._tab.GetInt8(o + rcv._tab.Pos))
	}
	return 0
}

/// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
/// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
/// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
/// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
/// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
/// Example: /// Example: TEST
/// Constraints: Minimum length = 1, Maximum length = 32
func (rcv *PassiveRadarObservation_Ingest) MutateDataMode(n PassiveRadarObservation_Ingest_dataMode_Enum) bool {
	return rcv._tab.MutateInt8Slot(134, int8(n))
}

/// Read only enumeration specifying the type of observation (e.g. OPTICAL, RADAR, RF, etc).
/// Example: /// Example: RADAR
/// Constraints: No constraints specified.
func (rcv *PassiveRadarObservation_Ingest) Type() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(136))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Read only enumeration specifying the type of observation (e.g. OPTICAL, RADAR, RF, etc).
/// Example: /// Example: RADAR
/// Constraints: No constraints specified.
func PassiveRadarObservation_IngestStart(builder *flatbuffers.Builder) {
	builder.StartObject(67)
}
func PassiveRadarObservation_IngestAddId(builder *flatbuffers.Builder, id flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(id), 0)
}
func PassiveRadarObservation_IngestAddClassificationMarking(builder *flatbuffers.Builder, classificationMarking flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(classificationMarking), 0)
}
func PassiveRadarObservation_IngestAddObTime(builder *flatbuffers.Builder, obTime flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(obTime), 0)
}
func PassiveRadarObservation_IngestAddIdOnOrbit(builder *flatbuffers.Builder, idOnOrbit flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(3, flatbuffers.UOffsetT(idOnOrbit), 0)
}
func PassiveRadarObservation_IngestAddSatNo(builder *flatbuffers.Builder, satNo int32) {
	builder.PrependInt32Slot(4, satNo, 0)
}
func PassiveRadarObservation_IngestAddOrigObjectId(builder *flatbuffers.Builder, origObjectId flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(5, flatbuffers.UOffsetT(origObjectId), 0)
}
func PassiveRadarObservation_IngestAddIdSensor(builder *flatbuffers.Builder, idSensor flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(6, flatbuffers.UOffsetT(idSensor), 0)
}
func PassiveRadarObservation_IngestAddOrigSensorId(builder *flatbuffers.Builder, origSensorId flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(7, flatbuffers.UOffsetT(origSensorId), 0)
}
func PassiveRadarObservation_IngestAddIdRfemitter(builder *flatbuffers.Builder, idRfemitter flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(8, flatbuffers.UOffsetT(idRfemitter), 0)
}
func PassiveRadarObservation_IngestAddIdSensorRefReceiver(builder *flatbuffers.Builder, idSensorRefReceiver flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(9, flatbuffers.UOffsetT(idSensorRefReceiver), 0)
}
func PassiveRadarObservation_IngestAddExtObservationId(builder *flatbuffers.Builder, extObservationId flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(10, flatbuffers.UOffsetT(extObservationId), 0)
}
func PassiveRadarObservation_IngestAddTaskId(builder *flatbuffers.Builder, taskId flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(11, flatbuffers.UOffsetT(taskId), 0)
}
func PassiveRadarObservation_IngestAddTrackId(builder *flatbuffers.Builder, trackId flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(12, flatbuffers.UOffsetT(trackId), 0)
}
func PassiveRadarObservation_IngestAddObPosition(builder *flatbuffers.Builder, obPosition flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(13, flatbuffers.UOffsetT(obPosition), 0)
}
func PassiveRadarObservation_IngestAddUct(builder *flatbuffers.Builder, uct bool) {
	builder.PrependBoolSlot(14, uct, false)
}
func PassiveRadarObservation_IngestAddAzimuth(builder *flatbuffers.Builder, azimuth float64) {
	builder.PrependFloat64Slot(15, azimuth, 0.0)
}
func PassiveRadarObservation_IngestAddAzimuthUnc(builder *flatbuffers.Builder, azimuthUnc float64) {
	builder.PrependFloat64Slot(16, azimuthUnc, 0.0)
}
func PassiveRadarObservation_IngestAddAzimuthBias(builder *flatbuffers.Builder, azimuthBias float64) {
	builder.PrependFloat64Slot(17, azimuthBias, 0.0)
}
func PassiveRadarObservation_IngestAddAzimuthRate(builder *flatbuffers.Builder, azimuthRate float64) {
	builder.PrependFloat64Slot(18, azimuthRate, 0.0)
}
func PassiveRadarObservation_IngestAddElevation(builder *flatbuffers.Builder, elevation float64) {
	builder.PrependFloat64Slot(19, elevation, 0.0)
}
func PassiveRadarObservation_IngestAddElevationUnc(builder *flatbuffers.Builder, elevationUnc float64) {
	builder.PrependFloat64Slot(20, elevationUnc, 0.0)
}
func PassiveRadarObservation_IngestAddElevationBias(builder *flatbuffers.Builder, elevationBias float64) {
	builder.PrependFloat64Slot(21, elevationBias, 0.0)
}
func PassiveRadarObservation_IngestAddElevationRate(builder *flatbuffers.Builder, elevationRate float64) {
	builder.PrependFloat64Slot(22, elevationRate, 0.0)
}
func PassiveRadarObservation_IngestAddDelay(builder *flatbuffers.Builder, delay float64) {
	builder.PrependFloat64Slot(23, delay, 0.0)
}
func PassiveRadarObservation_IngestAddDelayUnc(builder *flatbuffers.Builder, delayUnc float64) {
	builder.PrependFloat64Slot(24, delayUnc, 0.0)
}
func PassiveRadarObservation_IngestAddDelayBias(builder *flatbuffers.Builder, delayBias float64) {
	builder.PrependFloat64Slot(25, delayBias, 0.0)
}
func PassiveRadarObservation_IngestAddBistaticRange(builder *flatbuffers.Builder, bistaticRange float64) {
	builder.PrependFloat64Slot(26, bistaticRange, 0.0)
}
func PassiveRadarObservation_IngestAddBistaticRangeUnc(builder *flatbuffers.Builder, bistaticRangeUnc float64) {
	builder.PrependFloat64Slot(27, bistaticRangeUnc, 0.0)
}
func PassiveRadarObservation_IngestAddBistaticRangeBias(builder *flatbuffers.Builder, bistaticRangeBias float64) {
	builder.PrependFloat64Slot(28, bistaticRangeBias, 0.0)
}
func PassiveRadarObservation_IngestAddBistaticRangeRate(builder *flatbuffers.Builder, bistaticRangeRate float64) {
	builder.PrependFloat64Slot(29, bistaticRangeRate, 0.0)
}
func PassiveRadarObservation_IngestAddBistaticRangeRateUnc(builder *flatbuffers.Builder, bistaticRangeRateUnc float64) {
	builder.PrependFloat64Slot(30, bistaticRangeRateUnc, 0.0)
}
func PassiveRadarObservation_IngestAddBistaticRangeAccel(builder *flatbuffers.Builder, bistaticRangeAccel float64) {
	builder.PrependFloat64Slot(31, bistaticRangeAccel, 0.0)
}
func PassiveRadarObservation_IngestAddBistaticRangeAccelUnc(builder *flatbuffers.Builder, bistaticRangeAccelUnc float64) {
	builder.PrependFloat64Slot(32, bistaticRangeAccelUnc, 0.0)
}
func PassiveRadarObservation_IngestAddDoppler(builder *flatbuffers.Builder, doppler float64) {
	builder.PrependFloat64Slot(33, doppler, 0.0)
}
func PassiveRadarObservation_IngestAddDopplerUnc(builder *flatbuffers.Builder, dopplerUnc float64) {
	builder.PrependFloat64Slot(34, dopplerUnc, 0.0)
}
func PassiveRadarObservation_IngestAddConing(builder *flatbuffers.Builder, coning float64) {
	builder.PrependFloat64Slot(35, coning, 0.0)
}
func PassiveRadarObservation_IngestAddConingUnc(builder *flatbuffers.Builder, coningUnc float64) {
	builder.PrependFloat64Slot(36, coningUnc, 0.0)
}
func PassiveRadarObservation_IngestAddTof(builder *flatbuffers.Builder, tof float64) {
	builder.PrependFloat64Slot(37, tof, 0.0)
}
func PassiveRadarObservation_IngestAddTofUnc(builder *flatbuffers.Builder, tofUnc float64) {
	builder.PrependFloat64Slot(38, tofUnc, 0.0)
}
func PassiveRadarObservation_IngestAddTofBias(builder *flatbuffers.Builder, tofBias float64) {
	builder.PrependFloat64Slot(39, tofBias, 0.0)
}
func PassiveRadarObservation_IngestAddAccel(builder *flatbuffers.Builder, accel float64) {
	builder.PrependFloat64Slot(40, accel, 0.0)
}
func PassiveRadarObservation_IngestAddAccelUnc(builder *flatbuffers.Builder, accelUnc float64) {
	builder.PrependFloat64Slot(41, accelUnc, 0.0)
}
func PassiveRadarObservation_IngestAddRa(builder *flatbuffers.Builder, ra float64) {
	builder.PrependFloat64Slot(42, ra, 0.0)
}
func PassiveRadarObservation_IngestAddDeclination(builder *flatbuffers.Builder, declination float64) {
	builder.PrependFloat64Slot(43, declination, 0.0)
}
func PassiveRadarObservation_IngestAddLat(builder *flatbuffers.Builder, lat float64) {
	builder.PrependFloat64Slot(44, lat, 0.0)
}
func PassiveRadarObservation_IngestAddLon(builder *flatbuffers.Builder, lon float64) {
	builder.PrependFloat64Slot(45, lon, 0.0)
}
func PassiveRadarObservation_IngestAddAlt(builder *flatbuffers.Builder, alt float64) {
	builder.PrependFloat64Slot(46, alt, 0.0)
}
func PassiveRadarObservation_IngestAddXvel(builder *flatbuffers.Builder, xvel float64) {
	builder.PrependFloat64Slot(47, xvel, 0.0)
}
func PassiveRadarObservation_IngestAddYvel(builder *flatbuffers.Builder, yvel float64) {
	builder.PrependFloat64Slot(48, yvel, 0.0)
}
func PassiveRadarObservation_IngestAddZvel(builder *flatbuffers.Builder, zvel float64) {
	builder.PrependFloat64Slot(49, zvel, 0.0)
}
func PassiveRadarObservation_IngestAddRcs(builder *flatbuffers.Builder, rcs float64) {
	builder.PrependFloat64Slot(50, rcs, 0.0)
}
func PassiveRadarObservation_IngestAddRcsUnc(builder *flatbuffers.Builder, rcsUnc float64) {
	builder.PrependFloat64Slot(51, rcsUnc, 0.0)
}
func PassiveRadarObservation_IngestAddOrthogonalRcs(builder *flatbuffers.Builder, orthogonalRcs float64) {
	builder.PrependFloat64Slot(52, orthogonalRcs, 0.0)
}
func PassiveRadarObservation_IngestAddOrthogonalRcsUnc(builder *flatbuffers.Builder, orthogonalRcsUnc float64) {
	builder.PrependFloat64Slot(53, orthogonalRcsUnc, 0.0)
}
func PassiveRadarObservation_IngestAddSnr(builder *flatbuffers.Builder, snr float64) {
	builder.PrependFloat64Slot(54, snr, 0.0)
}
func PassiveRadarObservation_IngestAddTimingBias(builder *flatbuffers.Builder, timingBias float64) {
	builder.PrependFloat64Slot(55, timingBias, 0.0)
}
func PassiveRadarObservation_IngestAddTags(builder *flatbuffers.Builder, tags flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(56, flatbuffers.UOffsetT(tags), 0)
}
func PassiveRadarObservation_IngestStartTagsVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func PassiveRadarObservation_IngestAddTransactionId(builder *flatbuffers.Builder, transactionId flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(57, flatbuffers.UOffsetT(transactionId), 0)
}
func PassiveRadarObservation_IngestAddDescriptor(builder *flatbuffers.Builder, descriptor flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(58, flatbuffers.UOffsetT(descriptor), 0)
}
func PassiveRadarObservation_IngestAddCreatedAt(builder *flatbuffers.Builder, createdAt flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(59, flatbuffers.UOffsetT(createdAt), 0)
}
func PassiveRadarObservation_IngestAddCreatedBy(builder *flatbuffers.Builder, createdBy flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(60, flatbuffers.UOffsetT(createdBy), 0)
}
func PassiveRadarObservation_IngestAddSource(builder *flatbuffers.Builder, source flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(61, flatbuffers.UOffsetT(source), 0)
}
func PassiveRadarObservation_IngestAddOrigin(builder *flatbuffers.Builder, origin flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(62, flatbuffers.UOffsetT(origin), 0)
}
func PassiveRadarObservation_IngestAddOrigNetwork(builder *flatbuffers.Builder, origNetwork flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(63, flatbuffers.UOffsetT(origNetwork), 0)
}
func PassiveRadarObservation_IngestAddSourceDl(builder *flatbuffers.Builder, sourceDl flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(64, flatbuffers.UOffsetT(sourceDl), 0)
}
func PassiveRadarObservation_IngestAddDataMode(builder *flatbuffers.Builder, dataMode PassiveRadarObservation_Ingest_dataMode_Enum) {
	builder.PrependInt8Slot(65, int8(dataMode), 0)
}
func PassiveRadarObservation_IngestAddType(builder *flatbuffers.Builder, type_ flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(66, flatbuffers.UOffsetT(type_), 0)
}
func PassiveRadarObservation_IngestEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
