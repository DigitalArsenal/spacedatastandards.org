// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package IonoObservationPhase_Ingest

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

/// /// Multi-dimensional array with the same dimensions as power plus one additional dimension for antenna_element (where each array element corresponds to a single antenna element). This variable is enabled for post-process polarization and/or antenna array determination. Note: this phase_array can be combined with power_array or amplitude_array to create a phasor.
type IonoObservationPhase_Ingest struct {
	_tab flatbuffers.Table
}

const IonoObservationPhase_IngestIdentifier = "IONO"

func GetRootAsIonoObservationPhase_Ingest(buf []byte, offset flatbuffers.UOffsetT) *IonoObservationPhase_Ingest {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &IonoObservationPhase_Ingest{}
	x.Init(buf, n+offset)
	return x
}

func FinishIonoObservationPhase_IngestBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	identifierBytes := []byte(IonoObservationPhase_IngestIdentifier)
	builder.FinishWithFileIdentifier(offset, identifierBytes)
}

func IonoObservationPhase_IngestBufferHasIdentifier(buf []byte) bool {
	return flatbuffers.BufferHasIdentifier(buf, IonoObservationPhase_IngestIdentifier)
}

func GetSizePrefixedRootAsIonoObservationPhase_Ingest(buf []byte, offset flatbuffers.UOffsetT) *IonoObservationPhase_Ingest {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &IonoObservationPhase_Ingest{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedIonoObservationPhase_IngestBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	identifierBytes := []byte(IonoObservationPhase_IngestIdentifier)
	builder.FinishSizePrefixedWithFileIdentifier(offset, identifierBytes)
}

func SizePrefixedIonoObservationPhase_IngestBufferHasIdentifier(buf []byte) bool {
	return flatbuffers.SizePrefixedBufferHasIdentifier(buf, IonoObservationPhase_IngestIdentifier)
}

func (rcv *IonoObservationPhase_Ingest) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *IonoObservationPhase_Ingest) Table() flatbuffers.Table {
	return rcv._tab
}

/// Notes for the phase data. Orientation and position for each antenna element across the antenna_element dimension.
/// Example: /// Example: NOTES
/// Constraints: Minimum length = 0, Maximum length = 512
func (rcv *IonoObservationPhase_Ingest) Notes() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Notes for the phase data. Orientation and position for each antenna element across the antenna_element dimension.
/// Example: /// Example: NOTES
/// Constraints: Minimum length = 0, Maximum length = 512
/// Array of integers of the phase array dimensions.
/// Example: /// Example: [1, 2]
/// Constraints: No constraints specified.
func (rcv *IonoObservationPhase_Ingest) Dimensions(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *IonoObservationPhase_Ingest) DimensionsLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

/// Array of integers of the phase array dimensions.
/// Example: /// Example: [1, 2]
/// Constraints: No constraints specified.
/// Array of names for phase dimensions.
/// Example: /// Example: ['NAME1', 'NAME2']
/// Constraints: No constraints specified.
func (rcv *IonoObservationPhase_Ingest) DimensionName(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *IonoObservationPhase_Ingest) DimensionNameLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

/// Array of names for phase dimensions.
/// Example: /// Example: ['NAME1', 'NAME2']
/// Constraints: No constraints specified.
/// Array of phase data.
/// Example: /// Example: [[[[[[[0.02, 0.034]]]]]]]
/// Constraints: No constraints specified.
func (rcv *IonoObservationPhase_Ingest) Data(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *IonoObservationPhase_Ingest) DataLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

/// Array of phase data.
/// Example: /// Example: [[[[[[[0.02, 0.034]]]]]]]
/// Constraints: No constraints specified.
func IonoObservationPhase_IngestStart(builder *flatbuffers.Builder) {
	builder.StartObject(4)
}
func IonoObservationPhase_IngestAddNotes(builder *flatbuffers.Builder, notes flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(notes), 0)
}
func IonoObservationPhase_IngestAddDimensions(builder *flatbuffers.Builder, dimensions flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(dimensions), 0)
}
func IonoObservationPhase_IngestStartDimensionsVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func IonoObservationPhase_IngestAddDimensionName(builder *flatbuffers.Builder, dimensionName flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(dimensionName), 0)
}
func IonoObservationPhase_IngestStartDimensionNameVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func IonoObservationPhase_IngestAddData(builder *flatbuffers.Builder, data flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(3, flatbuffers.UOffsetT(data), 0)
}
func IonoObservationPhase_IngestStartDataVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func IonoObservationPhase_IngestEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
