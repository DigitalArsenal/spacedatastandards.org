// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package SeradataEarlyWarning_Ingest

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

/// /// Details for an early warning payload from  Seradata.
type SeradataEarlyWarning_Ingest struct {
	_tab flatbuffers.Table
}

const SeradataEarlyWarning_IngestIdentifier = "SERA"

func GetRootAsSeradataEarlyWarning_Ingest(buf []byte, offset flatbuffers.UOffsetT) *SeradataEarlyWarning_Ingest {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &SeradataEarlyWarning_Ingest{}
	x.Init(buf, n+offset)
	return x
}

func FinishSeradataEarlyWarning_IngestBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	identifierBytes := []byte(SeradataEarlyWarning_IngestIdentifier)
	builder.FinishWithFileIdentifier(offset, identifierBytes)
}

func SeradataEarlyWarning_IngestBufferHasIdentifier(buf []byte) bool {
	return flatbuffers.BufferHasIdentifier(buf, SeradataEarlyWarning_IngestIdentifier)
}

func GetSizePrefixedRootAsSeradataEarlyWarning_Ingest(buf []byte, offset flatbuffers.UOffsetT) *SeradataEarlyWarning_Ingest {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &SeradataEarlyWarning_Ingest{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedSeradataEarlyWarning_IngestBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	identifierBytes := []byte(SeradataEarlyWarning_IngestIdentifier)
	builder.FinishSizePrefixedWithFileIdentifier(offset, identifierBytes)
}

func SizePrefixedSeradataEarlyWarning_IngestBufferHasIdentifier(buf []byte) bool {
	return flatbuffers.SizePrefixedBufferHasIdentifier(buf, SeradataEarlyWarning_IngestIdentifier)
}

func (rcv *SeradataEarlyWarning_Ingest) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *SeradataEarlyWarning_Ingest) Table() flatbuffers.Table {
	return rcv._tab
}

/// Unique identifier of the record, auto-generated by the system.
/// Example: /// Example: SERADATAEARLYWARNING-ID
/// Constraints: Minimum length = 1, Maximum length = 36
func (rcv *SeradataEarlyWarning_Ingest) Id() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Unique identifier of the record, auto-generated by the system.
/// Example: /// Example: SERADATAEARLYWARNING-ID
/// Constraints: Minimum length = 1, Maximum length = 36
/// Classification marking of the data in IC/CAPCO Portion-marked format.
/// Example: /// Example: U
/// Constraints: Minimum length = 1, Maximum length = 128
func (rcv *SeradataEarlyWarning_Ingest) ClassificationMarking() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Classification marking of the data in IC/CAPCO Portion-marked format.
/// Example: /// Example: U
/// Constraints: Minimum length = 1, Maximum length = 128
/// UUID of the parent IR record.
/// Example: /// Example: idIR
/// Constraints: Minimum length = 0, Maximum length = 36
func (rcv *SeradataEarlyWarning_Ingest) IdIr() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// UUID of the parent IR record.
/// Example: /// Example: idIR
/// Constraints: Minimum length = 0, Maximum length = 36
/// Seradata ID of the spacecraft (SeradataSpacecraftDetails ID).
/// Example: /// Example: spacecraftId
/// Constraints: Minimum length = 1, Maximum length = 36
func (rcv *SeradataEarlyWarning_Ingest) SpacecraftId() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Seradata ID of the spacecraft (SeradataSpacecraftDetails ID).
/// Example: /// Example: spacecraftId
/// Constraints: Minimum length = 1, Maximum length = 36
/// Hosted for company/Organization Id.
/// Example: /// Example: hostedForCompanyOrgId
/// Constraints: Minimum length = 0, Maximum length = 36
func (rcv *SeradataEarlyWarning_Ingest) HostedForCompanyOrgId() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Hosted for company/Organization Id.
/// Example: /// Example: hostedForCompanyOrgId
/// Constraints: Minimum length = 0, Maximum length = 36
/// Manufacturer Organization Id.
/// Example: /// Example: manufacturerOrgId
/// Constraints: Minimum length = 0, Maximum length = 36
func (rcv *SeradataEarlyWarning_Ingest) ManufacturerOrgId() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Manufacturer Organization Id.
/// Example: /// Example: manufacturerOrgId
/// Constraints: Minimum length = 0, Maximum length = 36
/// Sensor name from Seradata, e.g. Infra red telescope, Schmidt Telescope, etc.
/// Example: /// Example: Infra red telescope
/// Constraints: Minimum length = 0, Maximum length = 50
func (rcv *SeradataEarlyWarning_Ingest) Name() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Sensor name from Seradata, e.g. Infra red telescope, Schmidt Telescope, etc.
/// Example: /// Example: Infra red telescope
/// Constraints: Minimum length = 0, Maximum length = 50
/// Spectral Bands, e.g. Infra-Red.
/// Example: /// Example: Infra-Red
/// Constraints: Minimum length = 0, Maximum length = 50
func (rcv *SeradataEarlyWarning_Ingest) SpectralBands() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(18))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Spectral Bands, e.g. Infra-Red.
/// Example: /// Example: Infra-Red
/// Constraints: Minimum length = 0, Maximum length = 50
/// Frequency Limits for this IR.
/// Example: /// Example: frequencyLimits
/// Constraints: Minimum length = 0, Maximum length = 50
func (rcv *SeradataEarlyWarning_Ingest) FrequencyLimits() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(20))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Frequency Limits for this IR.
/// Example: /// Example: frequencyLimits
/// Constraints: Minimum length = 0, Maximum length = 50
/// Best resolution for this IR in meters.
/// Example: /// Example: 1.23
/// Constraints: No constraints specified.
func (rcv *SeradataEarlyWarning_Ingest) BestResolution() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(22))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Best resolution for this IR in meters.
/// Example: /// Example: 1.23
/// Constraints: No constraints specified.
func (rcv *SeradataEarlyWarning_Ingest) MutateBestResolution(n float64) bool {
	return rcv._tab.MutateFloat64Slot(22, n)
}

/// Ground Station info for this IR.
/// Example: /// Example: groundStations
/// Constraints: Minimum length = 0, Maximum length = 128
func (rcv *SeradataEarlyWarning_Ingest) GroundStations() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(24))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Ground Station info for this IR.
/// Example: /// Example: groundStations
/// Constraints: Minimum length = 0, Maximum length = 128
/// Ground Station Locations for this IR.
/// Example: /// Example: groundStationLocations
/// Constraints: Minimum length = 0, Maximum length = 64
func (rcv *SeradataEarlyWarning_Ingest) GroundStationLocations() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(26))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Ground Station Locations for this IR.
/// Example: /// Example: groundStationLocations
/// Constraints: Minimum length = 0, Maximum length = 64
/// Missile Launch Phase Detection Ability.
/// Example: /// Example: missileLaunchPhaseDetectionAbility
/// Constraints: Minimum length = 0, Maximum length = 64
func (rcv *SeradataEarlyWarning_Ingest) MissileLaunchPhaseDetectionAbility() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(28))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Missile Launch Phase Detection Ability.
/// Example: /// Example: missileLaunchPhaseDetectionAbility
/// Constraints: Minimum length = 0, Maximum length = 64
/// Is the sensor Earth Pointing.
/// Example: /// Example: True
/// Constraints: No constraints specified.
func (rcv *SeradataEarlyWarning_Ingest) EarthPointing() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(30))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

/// Is the sensor Earth Pointing.
/// Example: /// Example: True
/// Constraints: No constraints specified.
func (rcv *SeradataEarlyWarning_Ingest) MutateEarthPointing(n bool) bool {
	return rcv._tab.MutateBoolSlot(30, n)
}

/// Seradata ID of the spacecraft (SeradataSpacecraftDetails ID).
/// Example: /// Example: partnerSpacecraftId
/// Constraints: Minimum length = 0, Maximum length = 36
func (rcv *SeradataEarlyWarning_Ingest) PartnerSpacecraftId() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(32))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Seradata ID of the spacecraft (SeradataSpacecraftDetails ID).
/// Example: /// Example: partnerSpacecraftId
/// Constraints: Minimum length = 0, Maximum length = 36
/// Payload notes.
/// Example: /// Example: Sample Notes
/// Constraints: Minimum length = 0, Maximum length = 2147483647
func (rcv *SeradataEarlyWarning_Ingest) PayloadNotes() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(34))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Payload notes.
/// Example: /// Example: Sample Notes
/// Constraints: Minimum length = 0, Maximum length = 2147483647
/// Time the row was created in the database, auto-populated by the system.
/// Example: /// Example: 2018-01-01T16:00:00.123Z
/// Constraints: No constraints specified.
func (rcv *SeradataEarlyWarning_Ingest) CreatedAt() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(36))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Time the row was created in the database, auto-populated by the system.
/// Example: /// Example: 2018-01-01T16:00:00.123Z
/// Constraints: No constraints specified.
/// Application user who created the row in the database, auto-populated by the system.
/// Example: /// Example: some.user
/// Constraints: Minimum length = 1, Maximum length = 64
func (rcv *SeradataEarlyWarning_Ingest) CreatedBy() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(38))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Application user who created the row in the database, auto-populated by the system.
/// Example: /// Example: some.user
/// Constraints: Minimum length = 1, Maximum length = 64
/// Source of the data.
/// Example: /// Example: Bluestaq
/// Constraints: Minimum length = 1, Maximum length = 64
func (rcv *SeradataEarlyWarning_Ingest) Source() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(40))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Source of the data.
/// Example: /// Example: Bluestaq
/// Constraints: Minimum length = 1, Maximum length = 64
/// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
/// Example: /// Example: THIRD_PARTY_DATASOURCE
/// Constraints: Minimum length = 0, Maximum length = 64
func (rcv *SeradataEarlyWarning_Ingest) Origin() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(42))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
/// Example: /// Example: THIRD_PARTY_DATASOURCE
/// Constraints: Minimum length = 0, Maximum length = 64
/// The originating source network on which this record was created, auto-populated by the system.
/// Example: /// Example: ORIG
/// Constraints: Minimum length = 0, Maximum length = 32
func (rcv *SeradataEarlyWarning_Ingest) OrigNetwork() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(44))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The originating source network on which this record was created, auto-populated by the system.
/// Example: /// Example: ORIG
/// Constraints: Minimum length = 0, Maximum length = 32
/// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
/// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
/// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
/// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
/// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
/// Example: /// Example: TEST
/// Constraints: Minimum length = 1, Maximum length = 32
func (rcv *SeradataEarlyWarning_Ingest) DataMode() SeradataEarlyWarning_Ingest_dataMode_Enum {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(46))
	if o != 0 {
		return SeradataEarlyWarning_Ingest_dataMode_Enum(rcv._tab.GetInt8(o + rcv._tab.Pos))
	}
	return 0
}

/// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
/// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
/// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
/// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
/// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
/// Example: /// Example: TEST
/// Constraints: Minimum length = 1, Maximum length = 32
func (rcv *SeradataEarlyWarning_Ingest) MutateDataMode(n SeradataEarlyWarning_Ingest_dataMode_Enum) bool {
	return rcv._tab.MutateInt8Slot(46, int8(n))
}

func SeradataEarlyWarning_IngestStart(builder *flatbuffers.Builder) {
	builder.StartObject(22)
}
func SeradataEarlyWarning_IngestAddId(builder *flatbuffers.Builder, id flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(id), 0)
}
func SeradataEarlyWarning_IngestAddClassificationMarking(builder *flatbuffers.Builder, classificationMarking flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(classificationMarking), 0)
}
func SeradataEarlyWarning_IngestAddIdIr(builder *flatbuffers.Builder, idIr flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(idIr), 0)
}
func SeradataEarlyWarning_IngestAddSpacecraftId(builder *flatbuffers.Builder, spacecraftId flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(3, flatbuffers.UOffsetT(spacecraftId), 0)
}
func SeradataEarlyWarning_IngestAddHostedForCompanyOrgId(builder *flatbuffers.Builder, hostedForCompanyOrgId flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(4, flatbuffers.UOffsetT(hostedForCompanyOrgId), 0)
}
func SeradataEarlyWarning_IngestAddManufacturerOrgId(builder *flatbuffers.Builder, manufacturerOrgId flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(5, flatbuffers.UOffsetT(manufacturerOrgId), 0)
}
func SeradataEarlyWarning_IngestAddName(builder *flatbuffers.Builder, name flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(6, flatbuffers.UOffsetT(name), 0)
}
func SeradataEarlyWarning_IngestAddSpectralBands(builder *flatbuffers.Builder, spectralBands flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(7, flatbuffers.UOffsetT(spectralBands), 0)
}
func SeradataEarlyWarning_IngestAddFrequencyLimits(builder *flatbuffers.Builder, frequencyLimits flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(8, flatbuffers.UOffsetT(frequencyLimits), 0)
}
func SeradataEarlyWarning_IngestAddBestResolution(builder *flatbuffers.Builder, bestResolution float64) {
	builder.PrependFloat64Slot(9, bestResolution, 0.0)
}
func SeradataEarlyWarning_IngestAddGroundStations(builder *flatbuffers.Builder, groundStations flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(10, flatbuffers.UOffsetT(groundStations), 0)
}
func SeradataEarlyWarning_IngestAddGroundStationLocations(builder *flatbuffers.Builder, groundStationLocations flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(11, flatbuffers.UOffsetT(groundStationLocations), 0)
}
func SeradataEarlyWarning_IngestAddMissileLaunchPhaseDetectionAbility(builder *flatbuffers.Builder, missileLaunchPhaseDetectionAbility flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(12, flatbuffers.UOffsetT(missileLaunchPhaseDetectionAbility), 0)
}
func SeradataEarlyWarning_IngestAddEarthPointing(builder *flatbuffers.Builder, earthPointing bool) {
	builder.PrependBoolSlot(13, earthPointing, false)
}
func SeradataEarlyWarning_IngestAddPartnerSpacecraftId(builder *flatbuffers.Builder, partnerSpacecraftId flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(14, flatbuffers.UOffsetT(partnerSpacecraftId), 0)
}
func SeradataEarlyWarning_IngestAddPayloadNotes(builder *flatbuffers.Builder, payloadNotes flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(15, flatbuffers.UOffsetT(payloadNotes), 0)
}
func SeradataEarlyWarning_IngestAddCreatedAt(builder *flatbuffers.Builder, createdAt flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(16, flatbuffers.UOffsetT(createdAt), 0)
}
func SeradataEarlyWarning_IngestAddCreatedBy(builder *flatbuffers.Builder, createdBy flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(17, flatbuffers.UOffsetT(createdBy), 0)
}
func SeradataEarlyWarning_IngestAddSource(builder *flatbuffers.Builder, source flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(18, flatbuffers.UOffsetT(source), 0)
}
func SeradataEarlyWarning_IngestAddOrigin(builder *flatbuffers.Builder, origin flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(19, flatbuffers.UOffsetT(origin), 0)
}
func SeradataEarlyWarning_IngestAddOrigNetwork(builder *flatbuffers.Builder, origNetwork flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(20, flatbuffers.UOffsetT(origNetwork), 0)
}
func SeradataEarlyWarning_IngestAddDataMode(builder *flatbuffers.Builder, dataMode SeradataEarlyWarning_Ingest_dataMode_Enum) {
	builder.PrependInt8Slot(21, int8(dataMode), 0)
}
func SeradataEarlyWarning_IngestEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
