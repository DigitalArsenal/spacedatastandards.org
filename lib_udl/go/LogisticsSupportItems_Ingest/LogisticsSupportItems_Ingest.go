// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package LogisticsSupportItems_Ingest

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

/// /// Support items associated with this LogisticsSupport record.
type LogisticsSupportItems_Ingest struct {
	_tab flatbuffers.Table
}

const LogisticsSupportItems_IngestIdentifier = "LOGI"

func GetRootAsLogisticsSupportItems_Ingest(buf []byte, offset flatbuffers.UOffsetT) *LogisticsSupportItems_Ingest {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &LogisticsSupportItems_Ingest{}
	x.Init(buf, n+offset)
	return x
}

func FinishLogisticsSupportItems_IngestBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	identifierBytes := []byte(LogisticsSupportItems_IngestIdentifier)
	builder.FinishWithFileIdentifier(offset, identifierBytes)
}

func LogisticsSupportItems_IngestBufferHasIdentifier(buf []byte) bool {
	return flatbuffers.BufferHasIdentifier(buf, LogisticsSupportItems_IngestIdentifier)
}

func GetSizePrefixedRootAsLogisticsSupportItems_Ingest(buf []byte, offset flatbuffers.UOffsetT) *LogisticsSupportItems_Ingest {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &LogisticsSupportItems_Ingest{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedLogisticsSupportItems_IngestBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	identifierBytes := []byte(LogisticsSupportItems_IngestIdentifier)
	builder.FinishSizePrefixedWithFileIdentifier(offset, identifierBytes)
}

func SizePrefixedLogisticsSupportItems_IngestBufferHasIdentifier(buf []byte) bool {
	return flatbuffers.SizePrefixedBufferHasIdentifier(buf, LogisticsSupportItems_IngestIdentifier)
}

func (rcv *LogisticsSupportItems_Ingest) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *LogisticsSupportItems_Ingest) Table() flatbuffers.Table {
	return rcv._tab
}

/// The type of recovery request needed. Contact the source provider for details.
/// Example: /// Example: E
/// Constraints: Minimum length = 1, Maximum length = 1
func (rcv *LogisticsSupportItems_Ingest) RecoveryRequestTypeCode() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The type of recovery request needed. Contact the source provider for details.
/// Example: /// Example: E
/// Constraints: Minimum length = 1, Maximum length = 1
/// The request or record number for this item type (Equipent, Part, or MRT).
/// Example: /// Example: 89208
/// Constraints: Minimum length = 0, Maximum length = 5
func (rcv *LogisticsSupportItems_Ingest) RequestNumber() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The request or record number for this item type (Equipent, Part, or MRT).
/// Example: /// Example: 89208
/// Constraints: Minimum length = 0, Maximum length = 5
/// Military aircraft discrepancy logistics requisition ordered quantity. The quantity of equipment ordered that is required to fix the aircraft.
/// Example: /// Example: 1
/// Constraints: No constraints specified.
func (rcv *LogisticsSupportItems_Ingest) Quantity() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

/// Military aircraft discrepancy logistics requisition ordered quantity. The quantity of equipment ordered that is required to fix the aircraft.
/// Example: /// Example: 1
/// Constraints: No constraints specified.
func (rcv *LogisticsSupportItems_Ingest) MutateQuantity(n int32) bool {
	return rcv._tab.MutateInt32Slot(8, n)
}

/// The technical order name of the part ordered.
/// Example: /// Example: HOIST ADAPTER KIT
/// Constraints: Minimum length = 0, Maximum length = 150
func (rcv *LogisticsSupportItems_Ingest) Description() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The technical order name of the part ordered.
/// Example: /// Example: HOIST ADAPTER KIT
/// Constraints: Minimum length = 0, Maximum length = 150
/// Shipment Unit Identifier is the Transportation Control Number (TCN) for shipping that piece of equipment being requested.
/// Example: /// Example: FB44273196X501XXX
/// Constraints: Minimum length = 0, Maximum length = 17
func (rcv *LogisticsSupportItems_Ingest) ShipmentUnitId() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Shipment Unit Identifier is the Transportation Control Number (TCN) for shipping that piece of equipment being requested.
/// Example: /// Example: FB44273196X501XXX
/// Constraints: Minimum length = 0, Maximum length = 17
/// This is the Redeploy (return) Transportation Control Number/Tracking Reference Number for the selected item.
/// Example: /// Example: X400LA31949108
/// Constraints: Minimum length = 0, Maximum length = 17
func (rcv *LogisticsSupportItems_Ingest) RedeployShipmentUnitId() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// This is the Redeploy (return) Transportation Control Number/Tracking Reference Number for the selected item.
/// Example: /// Example: X400LA31949108
/// Constraints: Minimum length = 0, Maximum length = 17
/// A number assigned by Job Control to monitor and record maintenance actions required to correct the associated aircraft maintenance discrepancy.  It is seven, nine or twelve characters, depending on the base-specific numbering scheme.  If seven characters: characters 1-3 are Julian date, 4-7 are sequence numbers.  If nine characters: characters 1-2 are last two digits of the year, characters 3-5 are Julian date, 6-9 are sequence numbers.  If twelve characters: characters 1-2 are last two digits of the year, 3-5 are Julian date, 6-9 are sequence numbers, and 10-12 are a three-digit supplemental number.
/// Example: /// Example: 231942400
/// Constraints: Minimum length = 0, Maximum length = 12
func (rcv *LogisticsSupportItems_Ingest) JobControlNumber() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// A number assigned by Job Control to monitor and record maintenance actions required to correct the associated aircraft maintenance discrepancy.  It is seven, nine or twelve characters, depending on the base-specific numbering scheme.  If seven characters: characters 1-3 are Julian date, 4-7 are sequence numbers.  If nine characters: characters 1-2 are last two digits of the year, characters 3-5 are Julian date, 6-9 are sequence numbers.  If twelve characters: characters 1-2 are last two digits of the year, 3-5 are Julian date, 6-9 are sequence numbers, and 10-12 are a three-digit supplemental number.
/// Example: /// Example: 231942400
/// Constraints: Minimum length = 0, Maximum length = 12
/// The code that represents the International Civil Aviation Organization (ICAO) designations of an airport.
/// Example: /// Example: PHIK
/// Constraints: Minimum length = 0, Maximum length = 4
func (rcv *LogisticsSupportItems_Ingest) SourceIcao() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(18))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The code that represents the International Civil Aviation Organization (ICAO) designations of an airport.
/// Example: /// Example: PHIK
/// Constraints: Minimum length = 0, Maximum length = 4
/// System generated reference id for the transportation plan.  Format: TXXXXXNNNN  T - Transportation, Sequence Number, Node Id.
/// Example: /// Example: T89003
/// Constraints: Minimum length = 0, Maximum length = 10
func (rcv *LogisticsSupportItems_Ingest) DeployPlanNumber() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(20))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// System generated reference id for the transportation plan.  Format: TXXXXXNNNN  T - Transportation, Sequence Number, Node Id.
/// Example: /// Example: T89003
/// Constraints: Minimum length = 0, Maximum length = 10
/// System generated reference id for the transportation plan.  Format: TXXXXXNNNN  T - Transportation, Sequence Number, Node Id.
/// Example: /// Example: T89003
/// Constraints: Minimum length = 0, Maximum length = 10
func (rcv *LogisticsSupportItems_Ingest) RedeployPlanNumber() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(22))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// System generated reference id for the transportation plan.  Format: TXXXXXNNNN  T - Transportation, Sequence Number, Node Id.
/// Example: /// Example: T89003
/// Constraints: Minimum length = 0, Maximum length = 10
/// This element indicates whether or not the supplied item is contained within another item.
/// Example: /// Example: True
/// Constraints: No constraints specified.
func (rcv *LogisticsSupportItems_Ingest) Cannibalized() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(24))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

/// This element indicates whether or not the supplied item is contained within another item.
/// Example: /// Example: True
/// Constraints: No constraints specified.
func (rcv *LogisticsSupportItems_Ingest) MutateCannibalized(n bool) bool {
	return rcv._tab.MutateBoolSlot(24, n)
}

/// The point of contact is a free text field to add information about the individual(s) with knowledge of the referenced requested or supplied item(s). The default value for this field is the last name, first name, and middle initial of the operator who created the records and/or generated the transaction.
/// Example: /// Example: SMITH, JOHN J
/// Constraints: Minimum length = 0, Maximum length = 68
func (rcv *LogisticsSupportItems_Ingest) SiPoc() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(26))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The point of contact is a free text field to add information about the individual(s) with knowledge of the referenced requested or supplied item(s). The default value for this field is the last name, first name, and middle initial of the operator who created the records and/or generated the transaction.
/// Example: /// Example: SMITH, JOHN J
/// Constraints: Minimum length = 0, Maximum length = 68
/// The time the item is ready, in ISO 8601 UTC format with millisecond precision.
/// Example: /// Example: 2023-07-17T19:04:00.123Z
/// Constraints: No constraints specified.
func (rcv *LogisticsSupportItems_Ingest) ReadyTime() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(28))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The time the item is ready, in ISO 8601 UTC format with millisecond precision.
/// Example: /// Example: 2023-07-17T19:04:00.123Z
/// Constraints: No constraints specified.
/// The time the item is received, in ISO 8601 UTC format with millisecond precision.
/// Example: /// Example: 2023-07-17T19:04:00.123Z
/// Constraints: No constraints specified.
func (rcv *LogisticsSupportItems_Ingest) ReceivedTime() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(30))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The time the item is received, in ISO 8601 UTC format with millisecond precision.
/// Example: /// Example: 2023-07-17T19:04:00.123Z
/// Constraints: No constraints specified.
/// This element indicates if the supplied item is characterized as additional support.
/// Example: /// Example: True
/// Constraints: No constraints specified.
func (rcv *LogisticsSupportItems_Ingest) ResupportFlag() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(32))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

/// This element indicates if the supplied item is characterized as additional support.
/// Example: /// Example: True
/// Constraints: No constraints specified.
func (rcv *LogisticsSupportItems_Ingest) MutateResupportFlag(n bool) bool {
	return rcv._tab.MutateBoolSlot(32, n)
}

/// The last time this supported item was updated, in ISO 8601 UTC format with millisecond precision.
/// Example: /// Example: 2023-07-17T19:04:00.123Z
/// Constraints: No constraints specified.
func (rcv *LogisticsSupportItems_Ingest) ItemLastChangedDate() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(34))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The last time this supported item was updated, in ISO 8601 UTC format with millisecond precision.
/// Example: /// Example: 2023-07-17T19:04:00.123Z
/// Constraints: No constraints specified.
/// The parts associated with this support item.
/// Example: /// Example: No example provided.
/// Constraints: No constraints specified.
func (rcv *LogisticsSupportItems_Ingest) LogisticsParts(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(36))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *LogisticsSupportItems_Ingest) LogisticsPartsLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(36))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

/// The parts associated with this support item.
/// Example: /// Example: No example provided.
/// Constraints: No constraints specified.
/// The specialties required to implement this support item.
/// Example: /// Example: No example provided.
/// Constraints: No constraints specified.
func (rcv *LogisticsSupportItems_Ingest) LogisticsSpecialties(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(38))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *LogisticsSupportItems_Ingest) LogisticsSpecialtiesLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(38))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

/// The specialties required to implement this support item.
/// Example: /// Example: No example provided.
/// Constraints: No constraints specified.
/// Remarks associated with this support item.
/// Example: /// Example: No example provided.
/// Constraints: No constraints specified.
func (rcv *LogisticsSupportItems_Ingest) LogisticsRemarks(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(40))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *LogisticsSupportItems_Ingest) LogisticsRemarksLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(40))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

/// Remarks associated with this support item.
/// Example: /// Example: No example provided.
/// Constraints: No constraints specified.
func LogisticsSupportItems_IngestStart(builder *flatbuffers.Builder) {
	builder.StartObject(19)
}
func LogisticsSupportItems_IngestAddRecoveryRequestTypeCode(builder *flatbuffers.Builder, recoveryRequestTypeCode flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(recoveryRequestTypeCode), 0)
}
func LogisticsSupportItems_IngestAddRequestNumber(builder *flatbuffers.Builder, requestNumber flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(requestNumber), 0)
}
func LogisticsSupportItems_IngestAddQuantity(builder *flatbuffers.Builder, quantity int32) {
	builder.PrependInt32Slot(2, quantity, 0)
}
func LogisticsSupportItems_IngestAddDescription(builder *flatbuffers.Builder, description flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(3, flatbuffers.UOffsetT(description), 0)
}
func LogisticsSupportItems_IngestAddShipmentUnitId(builder *flatbuffers.Builder, shipmentUnitId flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(4, flatbuffers.UOffsetT(shipmentUnitId), 0)
}
func LogisticsSupportItems_IngestAddRedeployShipmentUnitId(builder *flatbuffers.Builder, redeployShipmentUnitId flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(5, flatbuffers.UOffsetT(redeployShipmentUnitId), 0)
}
func LogisticsSupportItems_IngestAddJobControlNumber(builder *flatbuffers.Builder, jobControlNumber flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(6, flatbuffers.UOffsetT(jobControlNumber), 0)
}
func LogisticsSupportItems_IngestAddSourceIcao(builder *flatbuffers.Builder, sourceIcao flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(7, flatbuffers.UOffsetT(sourceIcao), 0)
}
func LogisticsSupportItems_IngestAddDeployPlanNumber(builder *flatbuffers.Builder, deployPlanNumber flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(8, flatbuffers.UOffsetT(deployPlanNumber), 0)
}
func LogisticsSupportItems_IngestAddRedeployPlanNumber(builder *flatbuffers.Builder, redeployPlanNumber flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(9, flatbuffers.UOffsetT(redeployPlanNumber), 0)
}
func LogisticsSupportItems_IngestAddCannibalized(builder *flatbuffers.Builder, cannibalized bool) {
	builder.PrependBoolSlot(10, cannibalized, false)
}
func LogisticsSupportItems_IngestAddSiPoc(builder *flatbuffers.Builder, siPoc flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(11, flatbuffers.UOffsetT(siPoc), 0)
}
func LogisticsSupportItems_IngestAddReadyTime(builder *flatbuffers.Builder, readyTime flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(12, flatbuffers.UOffsetT(readyTime), 0)
}
func LogisticsSupportItems_IngestAddReceivedTime(builder *flatbuffers.Builder, receivedTime flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(13, flatbuffers.UOffsetT(receivedTime), 0)
}
func LogisticsSupportItems_IngestAddResupportFlag(builder *flatbuffers.Builder, resupportFlag bool) {
	builder.PrependBoolSlot(14, resupportFlag, false)
}
func LogisticsSupportItems_IngestAddItemLastChangedDate(builder *flatbuffers.Builder, itemLastChangedDate flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(15, flatbuffers.UOffsetT(itemLastChangedDate), 0)
}
func LogisticsSupportItems_IngestAddLogisticsParts(builder *flatbuffers.Builder, logisticsParts flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(16, flatbuffers.UOffsetT(logisticsParts), 0)
}
func LogisticsSupportItems_IngestStartLogisticsPartsVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func LogisticsSupportItems_IngestAddLogisticsSpecialties(builder *flatbuffers.Builder, logisticsSpecialties flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(17, flatbuffers.UOffsetT(logisticsSpecialties), 0)
}
func LogisticsSupportItems_IngestStartLogisticsSpecialtiesVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func LogisticsSupportItems_IngestAddLogisticsRemarks(builder *flatbuffers.Builder, logisticsRemarks flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(18, flatbuffers.UOffsetT(logisticsRemarks), 0)
}
func LogisticsSupportItems_IngestStartLogisticsRemarksVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func LogisticsSupportItems_IngestEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
