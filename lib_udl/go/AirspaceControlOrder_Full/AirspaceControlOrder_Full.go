// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package AirspaceControlOrder_Full

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

/// /// Beta Version Airspace Control Order: Contains airspace coordination information and instructions that have been issued by an airspace control authority.
type AirspaceControlOrder_Full struct {
	_tab flatbuffers.Table
}

const AirspaceControlOrder_FullIdentifier = "AIRS"

func GetRootAsAirspaceControlOrder_Full(buf []byte, offset flatbuffers.UOffsetT) *AirspaceControlOrder_Full {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &AirspaceControlOrder_Full{}
	x.Init(buf, n+offset)
	return x
}

func FinishAirspaceControlOrder_FullBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	identifierBytes := []byte(AirspaceControlOrder_FullIdentifier)
	builder.FinishWithFileIdentifier(offset, identifierBytes)
}

func AirspaceControlOrder_FullBufferHasIdentifier(buf []byte) bool {
	return flatbuffers.BufferHasIdentifier(buf, AirspaceControlOrder_FullIdentifier)
}

func GetSizePrefixedRootAsAirspaceControlOrder_Full(buf []byte, offset flatbuffers.UOffsetT) *AirspaceControlOrder_Full {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &AirspaceControlOrder_Full{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedAirspaceControlOrder_FullBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	identifierBytes := []byte(AirspaceControlOrder_FullIdentifier)
	builder.FinishSizePrefixedWithFileIdentifier(offset, identifierBytes)
}

func SizePrefixedAirspaceControlOrder_FullBufferHasIdentifier(buf []byte) bool {
	return flatbuffers.SizePrefixedBufferHasIdentifier(buf, AirspaceControlOrder_FullIdentifier)
}

func (rcv *AirspaceControlOrder_Full) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *AirspaceControlOrder_Full) Table() flatbuffers.Table {
	return rcv._tab
}

/// Unique identifier of the record, auto-generated by the system if not provided on create operations.
/// Example: /// Example: c44b0a80-9fef-63d9-6267-79037fb93e4c
/// Constraints: Minimum length = 1, Maximum length = 36
func (rcv *AirspaceControlOrder_Full) Id() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Unique identifier of the record, auto-generated by the system if not provided on create operations.
/// Example: /// Example: c44b0a80-9fef-63d9-6267-79037fb93e4c
/// Constraints: Minimum length = 1, Maximum length = 36
/// Classification marking of the data in IC/CAPCO Portion-marked format.
/// Example: /// Example: U
/// Constraints: Minimum length = 1, Maximum length = 128
func (rcv *AirspaceControlOrder_Full) ClassificationMarking() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Classification marking of the data in IC/CAPCO Portion-marked format.
/// Example: /// Example: U
/// Constraints: Minimum length = 1, Maximum length = 128
/// Optional URI location in the document repository of the raw file parsed by the system to produce this record. To download the raw file, prepend https://udl-hostname/scs/download?id= to this value.
/// Example: /// Example: EXAMPLE URI
/// Constraints: Minimum length = 0, Maximum length = 256
func (rcv *AirspaceControlOrder_Full) RawFileUri() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Optional URI location in the document repository of the raw file parsed by the system to produce this record. To download the raw file, prepend https://udl-hostname/scs/download?id= to this value.
/// Example: /// Example: EXAMPLE URI
/// Constraints: Minimum length = 0, Maximum length = 256
/// Specifies the code name or nickname assigned to a joint exercise or plan to designate message traffic.
/// Example: /// Example: DESERT WIND
/// Constraints: Minimum length = 1, Maximum length = 64
func (rcv *AirspaceControlOrder_Full) OpExName() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Specifies the code name or nickname assigned to a joint exercise or plan to designate message traffic.
/// Example: /// Example: DESERT WIND
/// Constraints: Minimum length = 1, Maximum length = 64
/// The originator of this reference.
/// Example: /// Example: USCENTCOM
/// Constraints: Minimum length = 1, Maximum length = 36
func (rcv *AirspaceControlOrder_Full) Originator() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The originator of this reference.
/// Example: /// Example: USCENTCOM
/// Constraints: Minimum length = 1, Maximum length = 36
/// The start of the effective time period of this airspace control order, in ISO 8601 UTC format with millisecond precision.
/// Example: /// Example: 2024-01-07T13:55:43.123Z
/// Constraints: No constraints specified.
func (rcv *AirspaceControlOrder_Full) StartTime() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The start of the effective time period of this airspace control order, in ISO 8601 UTC format with millisecond precision.
/// Example: /// Example: 2024-01-07T13:55:43.123Z
/// Constraints: No constraints specified.
/// The end of the effective time period of this airspace control order, in ISO 8601 UTC format with millisecond precision.
/// Example: /// Example: 2024-01-08T13:55:43.123Z
/// Constraints: No constraints specified.
func (rcv *AirspaceControlOrder_Full) StopTime() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The end of the effective time period of this airspace control order, in ISO 8601 UTC format with millisecond precision.
/// Example: /// Example: 2024-01-08T13:55:43.123Z
/// Constraints: No constraints specified.
/// A qualifier for the end of the effective time period of this airspace control order, such as AFTER, ASOF, NLT, etc. Used with field stopTime to indicate a relative time.
/// Example: /// Example: AFTER
/// Constraints: Minimum length = 0, Maximum length = 8
func (rcv *AirspaceControlOrder_Full) StopQualifier() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(18))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// A qualifier for the end of the effective time period of this airspace control order, such as AFTER, ASOF, NLT, etc. Used with field stopTime to indicate a relative time.
/// Example: /// Example: AFTER
/// Constraints: Minimum length = 0, Maximum length = 8
/// Supplementary name that can be used to further identify exercise nicknames, or to provide the primary nickname of the option or the alternative of an operational plan.
/// Example: /// Example: CONTROL
/// Constraints: Minimum length = 0, Maximum length = 32
func (rcv *AirspaceControlOrder_Full) OpExInfo() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(20))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Supplementary name that can be used to further identify exercise nicknames, or to provide the primary nickname of the option or the alternative of an operational plan.
/// Example: /// Example: CONTROL
/// Constraints: Minimum length = 0, Maximum length = 32
/// The secondary supplementary nickname of the option or the alternative of the operational plan or order.
/// Example: /// Example: ORANGE
/// Constraints: Minimum length = 0, Maximum length = 24
func (rcv *AirspaceControlOrder_Full) OpExInfoAlt() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(22))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The secondary supplementary nickname of the option or the alternative of the operational plan or order.
/// Example: /// Example: ORANGE
/// Constraints: Minimum length = 0, Maximum length = 24
/// The official identifier of the military establishment responsible for the operation plan and the identification number assigned to this plan.
/// Example: /// Example: SACEUR 106
/// Constraints: Minimum length = 0, Maximum length = 36
func (rcv *AirspaceControlOrder_Full) PlanOrigNum() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(24))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The official identifier of the military establishment responsible for the operation plan and the identification number assigned to this plan.
/// Example: /// Example: SACEUR 106
/// Constraints: Minimum length = 0, Maximum length = 36
/// The unique message identifier sequentially assigned by the originator.
/// Example: /// Example: 1201003
/// Constraints: Minimum length = 0, Maximum length = 16
func (rcv *AirspaceControlOrder_Full) SerialNum() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(26))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The unique message identifier sequentially assigned by the originator.
/// Example: /// Example: 1201003
/// Constraints: Minimum length = 0, Maximum length = 16
/// The month in which the message originated.
/// Example: /// Example: OCT
/// Constraints: Minimum length = 0, Maximum length = 12
func (rcv *AirspaceControlOrder_Full) Month() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(28))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The month in which the message originated.
/// Example: /// Example: OCT
/// Constraints: Minimum length = 0, Maximum length = 12
/// The qualifier which caveats the message status.
/// Example: /// Example: CHG
/// Constraints: Minimum length = 0, Maximum length = 8
func (rcv *AirspaceControlOrder_Full) Qualifier() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(30))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The qualifier which caveats the message status.
/// Example: /// Example: CHG
/// Constraints: Minimum length = 0, Maximum length = 8
/// The serial number associated with the message qualifier.
/// Example: /// Example: 1
/// Constraints: No constraints specified.
func (rcv *AirspaceControlOrder_Full) QualSn() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(32))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

/// The serial number associated with the message qualifier.
/// Example: /// Example: 1
/// Constraints: No constraints specified.
func (rcv *AirspaceControlOrder_Full) MutateQualSn(n int32) bool {
	return rcv._tab.MutateInt32Slot(32, n)
}

/// Name of the area of the command for which the ACO is valid.
/// Example: /// Example: FORT BRAGG
/// Constraints: Minimum length = 0, Maximum length = 32
func (rcv *AirspaceControlOrder_Full) AreaOfValidity() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(34))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Name of the area of the command for which the ACO is valid.
/// Example: /// Example: FORT BRAGG
/// Constraints: Minimum length = 0, Maximum length = 32
/// The serial number of this airspace control order.
/// Example: /// Example: 27B
/// Constraints: Minimum length = 0, Maximum length = 8
func (rcv *AirspaceControlOrder_Full) AcoSerialNum() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(36))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The serial number of this airspace control order.
/// Example: /// Example: 27B
/// Constraints: Minimum length = 0, Maximum length = 8
/// Specifies the geodetic datum by which the spatial coordinates of the controlled airspace are calculated.
/// Example: /// Example: EUR-T
/// Constraints: Minimum length = 0, Maximum length = 8
func (rcv *AirspaceControlOrder_Full) GeoDatum() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(38))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Specifies the geodetic datum by which the spatial coordinates of the controlled airspace are calculated.
/// Example: /// Example: EUR-T
/// Constraints: Minimum length = 0, Maximum length = 8
/// Free text information expressed in natural language.
/// Example: /// Example: CHOKE POINTS
/// Constraints: Minimum length = 0, Maximum length = 128
func (rcv *AirspaceControlOrder_Full) AcoComments() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(40))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Free text information expressed in natural language.
/// Example: /// Example: CHOKE POINTS
/// Constraints: Minimum length = 0, Maximum length = 128
/// The airspaceControlReferences set provides both USMTF and non-USMTF references for this airspace control order.
/// Example: /// Example: No example provided.
/// Constraints: No constraints specified.
func (rcv *AirspaceControlOrder_Full) AirspaceControlOrderReferences(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(42))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *AirspaceControlOrder_Full) AirspaceControlOrderReferencesLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(42))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

/// The airspaceControlReferences set provides both USMTF and non-USMTF references for this airspace control order.
/// Example: /// Example: No example provided.
/// Constraints: No constraints specified.
/// Mandatory nested segment to report multiple airspace control means statuses within an ACOID.
/// Example: /// Example: No example provided.
/// Constraints: No constraints specified.
func (rcv *AirspaceControlOrder_Full) AirspaceControlMeansStatus(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(44))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *AirspaceControlOrder_Full) AirspaceControlMeansStatusLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(44))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

/// Mandatory nested segment to report multiple airspace control means statuses within an ACOID.
/// Example: /// Example: No example provided.
/// Constraints: No constraints specified.
/// Collection of unique link 16 identifier that will be assigned to a future airspace control means.
/// Example: /// Example: ['A2467', 'A3466', 'AA232']
/// Constraints: No constraints specified.
func (rcv *AirspaceControlOrder_Full) UndLnkTrk(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(46))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *AirspaceControlOrder_Full) UndLnkTrkLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(46))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

/// Collection of unique link 16 identifier that will be assigned to a future airspace control means.
/// Example: /// Example: ['A2467', 'A3466', 'AA232']
/// Constraints: No constraints specified.
/// Markings defining the source material or the original classification authority for the ACO message.
/// Example: /// Example: ORIG:USJFCOM
/// Constraints: Minimum length = 0, Maximum length = 64
func (rcv *AirspaceControlOrder_Full) ClassSource() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(48))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Markings defining the source material or the original classification authority for the ACO message.
/// Example: /// Example: ORIG:USJFCOM
/// Constraints: Minimum length = 0, Maximum length = 64
/// Mandatory if classSource uses the "IORIG" designator. Must be a REASON FOR CLASSIFICATION code.
/// Example: /// Example: ['15C', '10C']
/// Constraints: No constraints specified.
func (rcv *AirspaceControlOrder_Full) ClassReason(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(50))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *AirspaceControlOrder_Full) ClassReasonLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(50))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

/// Mandatory if classSource uses the "IORIG" designator. Must be a REASON FOR CLASSIFICATION code.
/// Example: /// Example: ['15C', '10C']
/// Constraints: No constraints specified.
/// Markings providing the literal guidance or date for downgrading or declassifying the airspace control order. Manditory if declassExemptionCode is nul.
/// Example: /// Example: ['NST:AT EXERCISE ENDEX', 'DATE:25NOV1997']
/// Constraints: No constraints specified.
func (rcv *AirspaceControlOrder_Full) DowngradeInsDate(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(52))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *AirspaceControlOrder_Full) DowngradeInsDateLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(52))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

/// Markings providing the literal guidance or date for downgrading or declassifying the airspace control order. Manditory if declassExemptionCode is nul.
/// Example: /// Example: ['NST:AT EXERCISE ENDEX', 'DATE:25NOV1997']
/// Constraints: No constraints specified.
/// Coded entries that provide justification for exemption from automatic downgrading or declassification of the airspace control order.
/// Example: /// Example: ['X1', 'X2']
/// Constraints: No constraints specified.
func (rcv *AirspaceControlOrder_Full) DeclassExemptionCode(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(54))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *AirspaceControlOrder_Full) DeclassExemptionCodeLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(54))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

/// Coded entries that provide justification for exemption from automatic downgrading or declassification of the airspace control order.
/// Example: /// Example: ['X1', 'X2']
/// Constraints: No constraints specified.
/// Time the row was created in the database, auto-populated by the system.
/// Example: /// Example: 2018-01-01T16:00:00.123Z
/// Constraints: No constraints specified.
func (rcv *AirspaceControlOrder_Full) CreatedAt() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(56))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Time the row was created in the database, auto-populated by the system.
/// Example: /// Example: 2018-01-01T16:00:00.123Z
/// Constraints: No constraints specified.
/// Application user who created the row in the database, auto-populated by the system.
/// Example: /// Example: some.user
/// Constraints: Minimum length = 1, Maximum length = 64
func (rcv *AirspaceControlOrder_Full) CreatedBy() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(58))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Application user who created the row in the database, auto-populated by the system.
/// Example: /// Example: some.user
/// Constraints: Minimum length = 1, Maximum length = 64
/// The source data library from which this record was received. This could be a remote or tactical UDL or another data library. If null, the record should be assumed to have originated from the primary Enterprise UDL.
/// Example: /// Example: AXE
/// Constraints: Minimum length = 0, Maximum length = 64
func (rcv *AirspaceControlOrder_Full) SourceDl() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(60))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The source data library from which this record was received. This could be a remote or tactical UDL or another data library. If null, the record should be assumed to have originated from the primary Enterprise UDL.
/// Example: /// Example: AXE
/// Constraints: Minimum length = 0, Maximum length = 64
/// Source of the data.
/// Example: /// Example: Bluestaq
/// Constraints: Minimum length = 1, Maximum length = 64
func (rcv *AirspaceControlOrder_Full) Source() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(62))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Source of the data.
/// Example: /// Example: Bluestaq
/// Constraints: Minimum length = 1, Maximum length = 64
/// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
/// Example: /// Example: THIRD_PARTY_DATASOURCE
/// Constraints: Minimum length = 0, Maximum length = 64
func (rcv *AirspaceControlOrder_Full) Origin() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(64))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
/// Example: /// Example: THIRD_PARTY_DATASOURCE
/// Constraints: Minimum length = 0, Maximum length = 64
/// The originating source network on which this record was created, auto-populated by the system.
/// Example: /// Example: ORIG
/// Constraints: Minimum length = 0, Maximum length = 32
func (rcv *AirspaceControlOrder_Full) OrigNetwork() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(66))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The originating source network on which this record was created, auto-populated by the system.
/// Example: /// Example: ORIG
/// Constraints: Minimum length = 0, Maximum length = 32
/// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
/// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
/// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
/// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
/// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
/// Example: /// Example: TEST
/// Constraints: Minimum length = 1, Maximum length = 32
func (rcv *AirspaceControlOrder_Full) DataMode() AirspaceControlOrder_Full_dataMode_Enum {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(68))
	if o != 0 {
		return AirspaceControlOrder_Full_dataMode_Enum(rcv._tab.GetInt8(o + rcv._tab.Pos))
	}
	return 0
}

/// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
/// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
/// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
/// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
/// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
/// Example: /// Example: TEST
/// Constraints: Minimum length = 1, Maximum length = 32
func (rcv *AirspaceControlOrder_Full) MutateDataMode(n AirspaceControlOrder_Full_dataMode_Enum) bool {
	return rcv._tab.MutateInt8Slot(68, int8(n))
}

func AirspaceControlOrder_FullStart(builder *flatbuffers.Builder) {
	builder.StartObject(33)
}
func AirspaceControlOrder_FullAddId(builder *flatbuffers.Builder, id flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(id), 0)
}
func AirspaceControlOrder_FullAddClassificationMarking(builder *flatbuffers.Builder, classificationMarking flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(classificationMarking), 0)
}
func AirspaceControlOrder_FullAddRawFileUri(builder *flatbuffers.Builder, rawFileUri flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(rawFileUri), 0)
}
func AirspaceControlOrder_FullAddOpExName(builder *flatbuffers.Builder, opExName flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(3, flatbuffers.UOffsetT(opExName), 0)
}
func AirspaceControlOrder_FullAddOriginator(builder *flatbuffers.Builder, originator flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(4, flatbuffers.UOffsetT(originator), 0)
}
func AirspaceControlOrder_FullAddStartTime(builder *flatbuffers.Builder, startTime flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(5, flatbuffers.UOffsetT(startTime), 0)
}
func AirspaceControlOrder_FullAddStopTime(builder *flatbuffers.Builder, stopTime flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(6, flatbuffers.UOffsetT(stopTime), 0)
}
func AirspaceControlOrder_FullAddStopQualifier(builder *flatbuffers.Builder, stopQualifier flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(7, flatbuffers.UOffsetT(stopQualifier), 0)
}
func AirspaceControlOrder_FullAddOpExInfo(builder *flatbuffers.Builder, opExInfo flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(8, flatbuffers.UOffsetT(opExInfo), 0)
}
func AirspaceControlOrder_FullAddOpExInfoAlt(builder *flatbuffers.Builder, opExInfoAlt flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(9, flatbuffers.UOffsetT(opExInfoAlt), 0)
}
func AirspaceControlOrder_FullAddPlanOrigNum(builder *flatbuffers.Builder, planOrigNum flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(10, flatbuffers.UOffsetT(planOrigNum), 0)
}
func AirspaceControlOrder_FullAddSerialNum(builder *flatbuffers.Builder, serialNum flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(11, flatbuffers.UOffsetT(serialNum), 0)
}
func AirspaceControlOrder_FullAddMonth(builder *flatbuffers.Builder, month flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(12, flatbuffers.UOffsetT(month), 0)
}
func AirspaceControlOrder_FullAddQualifier(builder *flatbuffers.Builder, qualifier flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(13, flatbuffers.UOffsetT(qualifier), 0)
}
func AirspaceControlOrder_FullAddQualSn(builder *flatbuffers.Builder, qualSn int32) {
	builder.PrependInt32Slot(14, qualSn, 0)
}
func AirspaceControlOrder_FullAddAreaOfValidity(builder *flatbuffers.Builder, areaOfValidity flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(15, flatbuffers.UOffsetT(areaOfValidity), 0)
}
func AirspaceControlOrder_FullAddAcoSerialNum(builder *flatbuffers.Builder, acoSerialNum flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(16, flatbuffers.UOffsetT(acoSerialNum), 0)
}
func AirspaceControlOrder_FullAddGeoDatum(builder *flatbuffers.Builder, geoDatum flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(17, flatbuffers.UOffsetT(geoDatum), 0)
}
func AirspaceControlOrder_FullAddAcoComments(builder *flatbuffers.Builder, acoComments flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(18, flatbuffers.UOffsetT(acoComments), 0)
}
func AirspaceControlOrder_FullAddAirspaceControlOrderReferences(builder *flatbuffers.Builder, airspaceControlOrderReferences flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(19, flatbuffers.UOffsetT(airspaceControlOrderReferences), 0)
}
func AirspaceControlOrder_FullStartAirspaceControlOrderReferencesVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func AirspaceControlOrder_FullAddAirspaceControlMeansStatus(builder *flatbuffers.Builder, airspaceControlMeansStatus flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(20, flatbuffers.UOffsetT(airspaceControlMeansStatus), 0)
}
func AirspaceControlOrder_FullStartAirspaceControlMeansStatusVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func AirspaceControlOrder_FullAddUndLnkTrk(builder *flatbuffers.Builder, undLnkTrk flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(21, flatbuffers.UOffsetT(undLnkTrk), 0)
}
func AirspaceControlOrder_FullStartUndLnkTrkVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func AirspaceControlOrder_FullAddClassSource(builder *flatbuffers.Builder, classSource flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(22, flatbuffers.UOffsetT(classSource), 0)
}
func AirspaceControlOrder_FullAddClassReason(builder *flatbuffers.Builder, classReason flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(23, flatbuffers.UOffsetT(classReason), 0)
}
func AirspaceControlOrder_FullStartClassReasonVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func AirspaceControlOrder_FullAddDowngradeInsDate(builder *flatbuffers.Builder, downgradeInsDate flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(24, flatbuffers.UOffsetT(downgradeInsDate), 0)
}
func AirspaceControlOrder_FullStartDowngradeInsDateVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func AirspaceControlOrder_FullAddDeclassExemptionCode(builder *flatbuffers.Builder, declassExemptionCode flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(25, flatbuffers.UOffsetT(declassExemptionCode), 0)
}
func AirspaceControlOrder_FullStartDeclassExemptionCodeVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func AirspaceControlOrder_FullAddCreatedAt(builder *flatbuffers.Builder, createdAt flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(26, flatbuffers.UOffsetT(createdAt), 0)
}
func AirspaceControlOrder_FullAddCreatedBy(builder *flatbuffers.Builder, createdBy flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(27, flatbuffers.UOffsetT(createdBy), 0)
}
func AirspaceControlOrder_FullAddSourceDl(builder *flatbuffers.Builder, sourceDl flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(28, flatbuffers.UOffsetT(sourceDl), 0)
}
func AirspaceControlOrder_FullAddSource(builder *flatbuffers.Builder, source flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(29, flatbuffers.UOffsetT(source), 0)
}
func AirspaceControlOrder_FullAddOrigin(builder *flatbuffers.Builder, origin flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(30, flatbuffers.UOffsetT(origin), 0)
}
func AirspaceControlOrder_FullAddOrigNetwork(builder *flatbuffers.Builder, origNetwork flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(31, flatbuffers.UOffsetT(origNetwork), 0)
}
func AirspaceControlOrder_FullAddDataMode(builder *flatbuffers.Builder, dataMode AirspaceControlOrder_Full_dataMode_Enum) {
	builder.PrependInt8Slot(32, int8(dataMode), 0)
}
func AirspaceControlOrder_FullEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
