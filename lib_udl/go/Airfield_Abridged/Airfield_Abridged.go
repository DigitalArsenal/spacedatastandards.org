// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package Airfield_Abridged

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

/// /// Properties and characteristics of an airfield, which includes location, airfield codes, suitability codes, and remarks.
type Airfield_Abridged struct {
	_tab flatbuffers.Table
}

const Airfield_AbridgedIdentifier = "AIRF"

func GetRootAsAirfield_Abridged(buf []byte, offset flatbuffers.UOffsetT) *Airfield_Abridged {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &Airfield_Abridged{}
	x.Init(buf, n+offset)
	return x
}

func FinishAirfield_AbridgedBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	identifierBytes := []byte(Airfield_AbridgedIdentifier)
	builder.FinishWithFileIdentifier(offset, identifierBytes)
}

func Airfield_AbridgedBufferHasIdentifier(buf []byte) bool {
	return flatbuffers.BufferHasIdentifier(buf, Airfield_AbridgedIdentifier)
}

func GetSizePrefixedRootAsAirfield_Abridged(buf []byte, offset flatbuffers.UOffsetT) *Airfield_Abridged {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &Airfield_Abridged{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedAirfield_AbridgedBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	identifierBytes := []byte(Airfield_AbridgedIdentifier)
	builder.FinishSizePrefixedWithFileIdentifier(offset, identifierBytes)
}

func SizePrefixedAirfield_AbridgedBufferHasIdentifier(buf []byte) bool {
	return flatbuffers.SizePrefixedBufferHasIdentifier(buf, Airfield_AbridgedIdentifier)
}

func (rcv *Airfield_Abridged) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *Airfield_Abridged) Table() flatbuffers.Table {
	return rcv._tab
}

/// Unique identifier of the record, auto-generated by the system.
/// Example: /// Example: 3f28f60b-3a50-2aef-ac88-8e9d0e39912b
/// Constraints: Minimum length = 1, Maximum length = 36
func (rcv *Airfield_Abridged) Id() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Unique identifier of the record, auto-generated by the system.
/// Example: /// Example: 3f28f60b-3a50-2aef-ac88-8e9d0e39912b
/// Constraints: Minimum length = 1, Maximum length = 36
/// Classification marking of the data in IC/CAPCO Portion-marked format.
/// Example: /// Example: U
/// Constraints: Minimum length = 1, Maximum length = 128
func (rcv *Airfield_Abridged) ClassificationMarking() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Classification marking of the data in IC/CAPCO Portion-marked format.
/// Example: /// Example: U
/// Constraints: Minimum length = 1, Maximum length = 128
/// The ID of the parent site.
/// Example: /// Example: a150b3ee-884b-b9ac-60a0-6408b4b16088
/// Constraints: Minimum length = 0, Maximum length = 36
func (rcv *Airfield_Abridged) IdSite() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The ID of the parent site.
/// Example: /// Example: a150b3ee-884b-b9ac-60a0-6408b4b16088
/// Constraints: Minimum length = 0, Maximum length = 36
/// Alternate Airfield identifier provided by source.
/// Example: /// Example: 45301
/// Constraints: Minimum length = 0, Maximum length = 36
func (rcv *Airfield_Abridged) AltAirfieldId() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Alternate Airfield identifier provided by source.
/// Example: /// Example: 45301
/// Constraints: Minimum length = 0, Maximum length = 36
/// The airfield's World Area Code installation number (WAC-INNR).
/// Example: /// Example: 0409-00039
/// Constraints: Minimum length = 0, Maximum length = 32
func (rcv *Airfield_Abridged) WacInnr() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The airfield's World Area Code installation number (WAC-INNR).
/// Example: /// Example: 0409-00039
/// Constraints: Minimum length = 0, Maximum length = 32
/// Air Mobility Command (AMC) Zone availability Report identifier.
/// Example: /// Example: 231
/// Constraints: Minimum length = 0, Maximum length = 32
func (rcv *Airfield_Abridged) ZarId() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Air Mobility Command (AMC) Zone availability Report identifier.
/// Example: /// Example: 231
/// Constraints: Minimum length = 0, Maximum length = 32
/// The International Civil Aviation Organization (ICAO) code of the airfield.
/// Example: /// Example: KCOS
/// Constraints: Minimum length = 0, Maximum length = 4
func (rcv *Airfield_Abridged) Icao() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The International Civil Aviation Organization (ICAO) code of the airfield.
/// Example: /// Example: KCOS
/// Constraints: Minimum length = 0, Maximum length = 4
/// The International Aviation Transport Association (IATA) code of the airfield.
/// Example: /// Example: AAA
/// Constraints: Minimum length = 0, Maximum length = 3
func (rcv *Airfield_Abridged) Iata() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(18))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The International Aviation Transport Association (IATA) code of the airfield.
/// Example: /// Example: AAA
/// Constraints: Minimum length = 0, Maximum length = 3
/// The Federal Aviation Administration (FAA) location identifier of this airfield.
/// Example: /// Example: FAA1
/// Constraints: Minimum length = 0, Maximum length = 5
func (rcv *Airfield_Abridged) Faa() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(20))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The Federal Aviation Administration (FAA) location identifier of this airfield.
/// Example: /// Example: FAA1
/// Constraints: Minimum length = 0, Maximum length = 5
/// The host nation code of this airfield, used for non-DoD/FAA locations.
/// Example: /// Example: ZPU
/// Constraints: Minimum length = 0, Maximum length = 16
func (rcv *Airfield_Abridged) HostNatCode() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(22))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The host nation code of this airfield, used for non-DoD/FAA locations.
/// Example: /// Example: ZPU
/// Constraints: Minimum length = 0, Maximum length = 16
/// The name of the airfield.
/// Example: /// Example: USAF Academy AFLD
/// Constraints: Minimum length = 1, Maximum length = 64
func (rcv *Airfield_Abridged) Name() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(24))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The name of the airfield.
/// Example: /// Example: USAF Academy AFLD
/// Constraints: Minimum length = 1, Maximum length = 64
/// The airfield activity use type (e.g. Commercial, Airport, Heliport, Gliderport, etc.).
/// Example: /// Example: Commercial
/// Constraints: Minimum length = 1, Maximum length = 32
func (rcv *Airfield_Abridged) Type() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(26))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The airfield activity use type (e.g. Commercial, Airport, Heliport, Gliderport, etc.).
/// Example: /// Example: Commercial
/// Constraints: Minimum length = 1, Maximum length = 32
/// WGS84 latitude of the location, in degrees. -90 to 90 degrees (negative values south of equator).
/// Example: /// Example: 45.23
/// Constraints: No constraints specified.
func (rcv *Airfield_Abridged) Lat() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(28))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// WGS84 latitude of the location, in degrees. -90 to 90 degrees (negative values south of equator).
/// Example: /// Example: 45.23
/// Constraints: No constraints specified.
func (rcv *Airfield_Abridged) MutateLat(n float64) bool {
	return rcv._tab.MutateFloat64Slot(28, n)
}

/// WGS84 longitude of the location, in degrees. -180 to 180 degrees (negative values west of Prime Meridian).
/// Example: /// Example: 179.1
/// Constraints: No constraints specified.
func (rcv *Airfield_Abridged) Lon() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(30))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// WGS84 longitude of the location, in degrees. -180 to 180 degrees (negative values west of Prime Meridian).
/// Example: /// Example: 179.1
/// Constraints: No constraints specified.
func (rcv *Airfield_Abridged) MutateLon(n float64) bool {
	return rcv._tab.MutateFloat64Slot(30, n)
}

/// Elevation of the airfield above mean sea level, in feet.
/// Note: The corresponding equivalent field is not converted by the UDL and may or may not be supplied by the provider. The provider/consumer is responsible for all unit conversions.
/// Example: /// Example: 33.562
/// Constraints: No constraints specified.
func (rcv *Airfield_Abridged) ElevFt() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(32))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Elevation of the airfield above mean sea level, in feet.
/// Note: The corresponding equivalent field is not converted by the UDL and may or may not be supplied by the provider. The provider/consumer is responsible for all unit conversions.
/// Example: /// Example: 33.562
/// Constraints: No constraints specified.
func (rcv *Airfield_Abridged) MutateElevFt(n float64) bool {
	return rcv._tab.MutateFloat64Slot(32, n)
}

/// Elevation of the airfield above mean sea level, in meters.
/// Note: The corresponding equivalent field is not converted by the UDL and may or may not be supplied by the provider. The provider/consumer is responsible for all unit conversions.
/// Example: /// Example: 10.29
/// Constraints: No constraints specified.
func (rcv *Airfield_Abridged) ElevM() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(34))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Elevation of the airfield above mean sea level, in meters.
/// Note: The corresponding equivalent field is not converted by the UDL and may or may not be supplied by the provider. The provider/consumer is responsible for all unit conversions.
/// Example: /// Example: 10.29
/// Constraints: No constraints specified.
func (rcv *Airfield_Abridged) MutateElevM(n float64) bool {
	return rcv._tab.MutateFloat64Slot(34, n)
}

/// The magnetic declination/variation of the airfield's location from true north, in degrees.  Positive values east of true north and negative values west of true north.
/// Example: /// Example: 7.35
/// Constraints: No constraints specified.
func (rcv *Airfield_Abridged) MagDec() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(36))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// The magnetic declination/variation of the airfield's location from true north, in degrees.  Positive values east of true north and negative values west of true north.
/// Example: /// Example: 7.35
/// Constraints: No constraints specified.
func (rcv *Airfield_Abridged) MutateMagDec(n float64) bool {
	return rcv._tab.MutateFloat64Slot(36, n)
}

/// Region where the airfield resides.
/// Example: /// Example: North America
/// Constraints: Minimum length = 0, Maximum length = 32
func (rcv *Airfield_Abridged) RegionName() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(38))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Region where the airfield resides.
/// Example: /// Example: North America
/// Constraints: Minimum length = 0, Maximum length = 32
/// The country code. This value is typically the ISO 3166 Alpha-2 two-character country code, however it can also represent various consortiums that do not appear in the ISO document. The code must correspond to an existing country in the UDL’s country API. Call udl/country/{code} to get any associated FIPS code, ISO Alpha-3 code, or alternate code values that exist for the specified country code.
/// Example: /// Example: US
/// Constraints: Minimum length = 0, Maximum length = 4
func (rcv *Airfield_Abridged) CountryCode() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(40))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The country code. This value is typically the ISO 3166 Alpha-2 two-character country code, however it can also represent various consortiums that do not appear in the ISO document. The code must correspond to an existing country in the UDL’s country API. Call udl/country/{code} to get any associated FIPS code, ISO Alpha-3 code, or alternate code values that exist for the specified country code.
/// Example: /// Example: US
/// Constraints: Minimum length = 0, Maximum length = 4
/// Closest city to the airfield's location.
/// Example: /// Example: Colorado Springs
/// Constraints: Minimum length = 0, Maximum length = 64
func (rcv *Airfield_Abridged) City() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(42))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Closest city to the airfield's location.
/// Example: /// Example: Colorado Springs
/// Constraints: Minimum length = 0, Maximum length = 64
/// State or province of the airfield's location.
/// Example: /// Example: Colorado
/// Constraints: Minimum length = 0, Maximum length = 32
func (rcv *Airfield_Abridged) State() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(44))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// State or province of the airfield's location.
/// Example: /// Example: Colorado
/// Constraints: Minimum length = 0, Maximum length = 32
/// Air Force geographic location code of the airfield.
/// Example: /// Example: XLSX
/// Constraints: Minimum length = 0, Maximum length = 16
func (rcv *Airfield_Abridged) Geoloc() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(46))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Air Force geographic location code of the airfield.
/// Example: /// Example: XLSX
/// Constraints: Minimum length = 0, Maximum length = 16
/// Time difference between the location of the airfield and the Greenwich Mean Time (GMT), expressed as +/-HH:MM. Time zones east of Greenwich have positive offsets and time zones west of Greenwich are negative.
/// Example: /// Example: -4:30
/// Constraints: Minimum length = 0, Maximum length = 6
func (rcv *Airfield_Abridged) GmtOffset() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(48))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Time difference between the location of the airfield and the Greenwich Mean Time (GMT), expressed as +/-HH:MM. Time zones east of Greenwich have positive offsets and time zones west of Greenwich are negative.
/// Example: /// Example: -4:30
/// Constraints: Minimum length = 0, Maximum length = 6
/// Associated suitability codes according to the Airfield Suitability and Restrictions Report (ASRR) for this airfield.
/// Example: /// Example: ABCDEF
/// Constraints: Minimum length = 0, Maximum length = 36
func (rcv *Airfield_Abridged) SuitabilityCodes() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(50))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Associated suitability codes according to the Airfield Suitability and Restrictions Report (ASRR) for this airfield.
/// Example: /// Example: ABCDEF
/// Constraints: Minimum length = 0, Maximum length = 36
/// Applicable miscellaneous codes according to the Airfield Suitability and Restrictions Report (ASRR) for this airfield.
/// Example: /// Example: AMZ
/// Constraints: Minimum length = 0, Maximum length = 36
func (rcv *Airfield_Abridged) MiscCodes() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(52))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Applicable miscellaneous codes according to the Airfield Suitability and Restrictions Report (ASRR) for this airfield.
/// Example: /// Example: AMZ
/// Constraints: Minimum length = 0, Maximum length = 36
/// The number of runways at the site.
/// Example: /// Example: 5
/// Constraints: No constraints specified.
func (rcv *Airfield_Abridged) Runways() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(54))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

/// The number of runways at the site.
/// Example: /// Example: 5
/// Constraints: No constraints specified.
func (rcv *Airfield_Abridged) MutateRunways(n int32) bool {
	return rcv._tab.MutateInt32Slot(54, n)
}

/// The length of the longest runway at this airfield in feet.
/// Example: /// Example: 1000
/// Constraints: No constraints specified.
func (rcv *Airfield_Abridged) MaxRunwayLength() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(56))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

/// The length of the longest runway at this airfield in feet.
/// Example: /// Example: 1000
/// Constraints: No constraints specified.
func (rcv *Airfield_Abridged) MutateMaxRunwayLength(n int32) bool {
	return rcv._tab.MutateInt32Slot(56, n)
}

/// The URL link to information about airfield.
/// Example: /// Example: URL Link to the Airfield
/// Constraints: Minimum length = 0, Maximum length = 256
func (rcv *Airfield_Abridged) InfoUrl() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(58))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The URL link to information about airfield.
/// Example: /// Example: URL Link to the Airfield
/// Constraints: Minimum length = 0, Maximum length = 256
/// Time the row was created in the database, auto-populated by the system.
/// Example: /// Example: 2022-01-01T16:00:00.123Z
/// Constraints: No constraints specified.
func (rcv *Airfield_Abridged) CreatedAt() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(60))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Time the row was created in the database, auto-populated by the system.
/// Example: /// Example: 2022-01-01T16:00:00.123Z
/// Constraints: No constraints specified.
/// Application user who created the row in the database, auto-populated by the system.
/// Example: /// Example: some.user
/// Constraints: Minimum length = 1, Maximum length = 64
func (rcv *Airfield_Abridged) CreatedBy() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(62))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Application user who created the row in the database, auto-populated by the system.
/// Example: /// Example: some.user
/// Constraints: Minimum length = 1, Maximum length = 64
/// The source data library from which this record was received. This could be a remote or tactical UDL or another data library. If null, the record should be assumed to have originated from the primary Enterprise UDL.
/// Example: /// Example: AXE
/// Constraints: Minimum length = 0, Maximum length = 64
func (rcv *Airfield_Abridged) SourceDl() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(64))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The source data library from which this record was received. This could be a remote or tactical UDL or another data library. If null, the record should be assumed to have originated from the primary Enterprise UDL.
/// Example: /// Example: AXE
/// Constraints: Minimum length = 0, Maximum length = 64
/// Source of the data.
/// Example: /// Example: Bluestaq
/// Constraints: Minimum length = 1, Maximum length = 64
func (rcv *Airfield_Abridged) Source() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(66))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Source of the data.
/// Example: /// Example: Bluestaq
/// Constraints: Minimum length = 1, Maximum length = 64
/// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
/// Example: /// Example: THIRD_PARTY_DATASOURCE
/// Constraints: Minimum length = 0, Maximum length = 64
func (rcv *Airfield_Abridged) Origin() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(68))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
/// Example: /// Example: THIRD_PARTY_DATASOURCE
/// Constraints: Minimum length = 0, Maximum length = 64
/// The originating source network on which this record was created, auto-populated by the system.
/// Example: /// Example: OPS1
/// Constraints: Minimum length = 1, Maximum length = 32
func (rcv *Airfield_Abridged) OrigNetwork() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(70))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The originating source network on which this record was created, auto-populated by the system.
/// Example: /// Example: OPS1
/// Constraints: Minimum length = 1, Maximum length = 32
/// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
/// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
/// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
/// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
/// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
/// Example: /// Example: TEST
/// Constraints: Minimum length = 1, Maximum length = 32
func (rcv *Airfield_Abridged) DataMode() Airfield_Abridged_dataMode_Enum {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(72))
	if o != 0 {
		return Airfield_Abridged_dataMode_Enum(rcv._tab.GetInt8(o + rcv._tab.Pos))
	}
	return 0
}

/// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
/// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
/// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
/// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
/// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
/// Example: /// Example: TEST
/// Constraints: Minimum length = 1, Maximum length = 32
func (rcv *Airfield_Abridged) MutateDataMode(n Airfield_Abridged_dataMode_Enum) bool {
	return rcv._tab.MutateInt8Slot(72, int8(n))
}

func Airfield_AbridgedStart(builder *flatbuffers.Builder) {
	builder.StartObject(35)
}
func Airfield_AbridgedAddId(builder *flatbuffers.Builder, id flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(id), 0)
}
func Airfield_AbridgedAddClassificationMarking(builder *flatbuffers.Builder, classificationMarking flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(classificationMarking), 0)
}
func Airfield_AbridgedAddIdSite(builder *flatbuffers.Builder, idSite flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(idSite), 0)
}
func Airfield_AbridgedAddAltAirfieldId(builder *flatbuffers.Builder, altAirfieldId flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(3, flatbuffers.UOffsetT(altAirfieldId), 0)
}
func Airfield_AbridgedAddWacInnr(builder *flatbuffers.Builder, wacInnr flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(4, flatbuffers.UOffsetT(wacInnr), 0)
}
func Airfield_AbridgedAddZarId(builder *flatbuffers.Builder, zarId flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(5, flatbuffers.UOffsetT(zarId), 0)
}
func Airfield_AbridgedAddIcao(builder *flatbuffers.Builder, icao flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(6, flatbuffers.UOffsetT(icao), 0)
}
func Airfield_AbridgedAddIata(builder *flatbuffers.Builder, iata flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(7, flatbuffers.UOffsetT(iata), 0)
}
func Airfield_AbridgedAddFaa(builder *flatbuffers.Builder, faa flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(8, flatbuffers.UOffsetT(faa), 0)
}
func Airfield_AbridgedAddHostNatCode(builder *flatbuffers.Builder, hostNatCode flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(9, flatbuffers.UOffsetT(hostNatCode), 0)
}
func Airfield_AbridgedAddName(builder *flatbuffers.Builder, name flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(10, flatbuffers.UOffsetT(name), 0)
}
func Airfield_AbridgedAddType(builder *flatbuffers.Builder, type_ flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(11, flatbuffers.UOffsetT(type_), 0)
}
func Airfield_AbridgedAddLat(builder *flatbuffers.Builder, lat float64) {
	builder.PrependFloat64Slot(12, lat, 0.0)
}
func Airfield_AbridgedAddLon(builder *flatbuffers.Builder, lon float64) {
	builder.PrependFloat64Slot(13, lon, 0.0)
}
func Airfield_AbridgedAddElevFt(builder *flatbuffers.Builder, elevFt float64) {
	builder.PrependFloat64Slot(14, elevFt, 0.0)
}
func Airfield_AbridgedAddElevM(builder *flatbuffers.Builder, elevM float64) {
	builder.PrependFloat64Slot(15, elevM, 0.0)
}
func Airfield_AbridgedAddMagDec(builder *flatbuffers.Builder, magDec float64) {
	builder.PrependFloat64Slot(16, magDec, 0.0)
}
func Airfield_AbridgedAddRegionName(builder *flatbuffers.Builder, regionName flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(17, flatbuffers.UOffsetT(regionName), 0)
}
func Airfield_AbridgedAddCountryCode(builder *flatbuffers.Builder, countryCode flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(18, flatbuffers.UOffsetT(countryCode), 0)
}
func Airfield_AbridgedAddCity(builder *flatbuffers.Builder, city flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(19, flatbuffers.UOffsetT(city), 0)
}
func Airfield_AbridgedAddState(builder *flatbuffers.Builder, state flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(20, flatbuffers.UOffsetT(state), 0)
}
func Airfield_AbridgedAddGeoloc(builder *flatbuffers.Builder, geoloc flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(21, flatbuffers.UOffsetT(geoloc), 0)
}
func Airfield_AbridgedAddGmtOffset(builder *flatbuffers.Builder, gmtOffset flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(22, flatbuffers.UOffsetT(gmtOffset), 0)
}
func Airfield_AbridgedAddSuitabilityCodes(builder *flatbuffers.Builder, suitabilityCodes flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(23, flatbuffers.UOffsetT(suitabilityCodes), 0)
}
func Airfield_AbridgedAddMiscCodes(builder *flatbuffers.Builder, miscCodes flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(24, flatbuffers.UOffsetT(miscCodes), 0)
}
func Airfield_AbridgedAddRunways(builder *flatbuffers.Builder, runways int32) {
	builder.PrependInt32Slot(25, runways, 0)
}
func Airfield_AbridgedAddMaxRunwayLength(builder *flatbuffers.Builder, maxRunwayLength int32) {
	builder.PrependInt32Slot(26, maxRunwayLength, 0)
}
func Airfield_AbridgedAddInfoUrl(builder *flatbuffers.Builder, infoUrl flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(27, flatbuffers.UOffsetT(infoUrl), 0)
}
func Airfield_AbridgedAddCreatedAt(builder *flatbuffers.Builder, createdAt flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(28, flatbuffers.UOffsetT(createdAt), 0)
}
func Airfield_AbridgedAddCreatedBy(builder *flatbuffers.Builder, createdBy flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(29, flatbuffers.UOffsetT(createdBy), 0)
}
func Airfield_AbridgedAddSourceDl(builder *flatbuffers.Builder, sourceDl flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(30, flatbuffers.UOffsetT(sourceDl), 0)
}
func Airfield_AbridgedAddSource(builder *flatbuffers.Builder, source flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(31, flatbuffers.UOffsetT(source), 0)
}
func Airfield_AbridgedAddOrigin(builder *flatbuffers.Builder, origin flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(32, flatbuffers.UOffsetT(origin), 0)
}
func Airfield_AbridgedAddOrigNetwork(builder *flatbuffers.Builder, origNetwork flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(33, flatbuffers.UOffsetT(origNetwork), 0)
}
func Airfield_AbridgedAddDataMode(builder *flatbuffers.Builder, dataMode Airfield_Abridged_dataMode_Enum) {
	builder.PrependInt8Slot(34, int8(dataMode), 0)
}
func Airfield_AbridgedEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
