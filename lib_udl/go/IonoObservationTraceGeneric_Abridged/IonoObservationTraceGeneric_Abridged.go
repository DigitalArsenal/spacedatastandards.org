// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package IonoObservationTraceGeneric_Abridged

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

/// /// Multi dimensional array of trace generic data.
type IonoObservationTraceGeneric_Abridged struct {
	_tab flatbuffers.Table
}

const IonoObservationTraceGeneric_AbridgedIdentifier = "IONO"

func GetRootAsIonoObservationTraceGeneric_Abridged(buf []byte, offset flatbuffers.UOffsetT) *IonoObservationTraceGeneric_Abridged {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &IonoObservationTraceGeneric_Abridged{}
	x.Init(buf, n+offset)
	return x
}

func FinishIonoObservationTraceGeneric_AbridgedBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	identifierBytes := []byte(IonoObservationTraceGeneric_AbridgedIdentifier)
	builder.FinishWithFileIdentifier(offset, identifierBytes)
}

func IonoObservationTraceGeneric_AbridgedBufferHasIdentifier(buf []byte) bool {
	return flatbuffers.BufferHasIdentifier(buf, IonoObservationTraceGeneric_AbridgedIdentifier)
}

func GetSizePrefixedRootAsIonoObservationTraceGeneric_Abridged(buf []byte, offset flatbuffers.UOffsetT) *IonoObservationTraceGeneric_Abridged {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &IonoObservationTraceGeneric_Abridged{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedIonoObservationTraceGeneric_AbridgedBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	identifierBytes := []byte(IonoObservationTraceGeneric_AbridgedIdentifier)
	builder.FinishSizePrefixedWithFileIdentifier(offset, identifierBytes)
}

func SizePrefixedIonoObservationTraceGeneric_AbridgedBufferHasIdentifier(buf []byte) bool {
	return flatbuffers.SizePrefixedBufferHasIdentifier(buf, IonoObservationTraceGeneric_AbridgedIdentifier)
}

func (rcv *IonoObservationTraceGeneric_Abridged) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *IonoObservationTraceGeneric_Abridged) Table() flatbuffers.Table {
	return rcv._tab
}

/// Multi-dimensional Array. The 1st dimension spans points along the trace while the 2nd dimension spans frequency-range pairs.
/// Example: /// Example: [[[1.23, 1.0903]]]
/// Constraints: No constraints specified.
func (rcv *IonoObservationTraceGeneric_Abridged) Data(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *IonoObservationTraceGeneric_Abridged) DataLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

/// Multi-dimensional Array. The 1st dimension spans points along the trace while the 2nd dimension spans frequency-range pairs.
/// Example: /// Example: [[[1.23, 1.0903]]]
/// Constraints: No constraints specified.
/// Array of dimension names for trace generic data.
/// Example: /// Example: ['NAME1', 'NAME2']
/// Constraints: No constraints specified.
func (rcv *IonoObservationTraceGeneric_Abridged) DimensionName(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *IonoObservationTraceGeneric_Abridged) DimensionNameLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

/// Array of dimension names for trace generic data.
/// Example: /// Example: ['NAME1', 'NAME2']
/// Constraints: No constraints specified.
/// Notes for the trace generic data.
/// Example: /// Example: NOTES
/// Constraints: Minimum length = 0, Maximum length = 512
func (rcv *IonoObservationTraceGeneric_Abridged) Notes() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Notes for the trace generic data.
/// Example: /// Example: NOTES
/// Constraints: Minimum length = 0, Maximum length = 512
func IonoObservationTraceGeneric_AbridgedStart(builder *flatbuffers.Builder) {
	builder.StartObject(3)
}
func IonoObservationTraceGeneric_AbridgedAddData(builder *flatbuffers.Builder, data flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(data), 0)
}
func IonoObservationTraceGeneric_AbridgedStartDataVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func IonoObservationTraceGeneric_AbridgedAddDimensionName(builder *flatbuffers.Builder, dimensionName flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(dimensionName), 0)
}
func IonoObservationTraceGeneric_AbridgedStartDimensionNameVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func IonoObservationTraceGeneric_AbridgedAddNotes(builder *flatbuffers.Builder, notes flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(notes), 0)
}
func IonoObservationTraceGeneric_AbridgedEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
