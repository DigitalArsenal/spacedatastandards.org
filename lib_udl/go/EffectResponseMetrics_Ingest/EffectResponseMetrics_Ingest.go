// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package EffectResponseMetrics_Ingest

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

/// /// List of COA metrics associated with this effect response.
type EffectResponseMetrics_Ingest struct {
	_tab flatbuffers.Table
}

const EffectResponseMetrics_IngestIdentifier = "EFFE"

func GetRootAsEffectResponseMetrics_Ingest(buf []byte, offset flatbuffers.UOffsetT) *EffectResponseMetrics_Ingest {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &EffectResponseMetrics_Ingest{}
	x.Init(buf, n+offset)
	return x
}

func FinishEffectResponseMetrics_IngestBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	identifierBytes := []byte(EffectResponseMetrics_IngestIdentifier)
	builder.FinishWithFileIdentifier(offset, identifierBytes)
}

func EffectResponseMetrics_IngestBufferHasIdentifier(buf []byte) bool {
	return flatbuffers.BufferHasIdentifier(buf, EffectResponseMetrics_IngestIdentifier)
}

func GetSizePrefixedRootAsEffectResponseMetrics_Ingest(buf []byte, offset flatbuffers.UOffsetT) *EffectResponseMetrics_Ingest {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &EffectResponseMetrics_Ingest{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedEffectResponseMetrics_IngestBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	identifierBytes := []byte(EffectResponseMetrics_IngestIdentifier)
	builder.FinishSizePrefixedWithFileIdentifier(offset, identifierBytes)
}

func SizePrefixedEffectResponseMetrics_IngestBufferHasIdentifier(buf []byte) bool {
	return flatbuffers.SizePrefixedBufferHasIdentifier(buf, EffectResponseMetrics_IngestIdentifier)
}

func (rcv *EffectResponseMetrics_Ingest) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *EffectResponseMetrics_Ingest) Table() flatbuffers.Table {
	return rcv._tab
}

/// The type of the metric (e.g. CollateralDamage, GoalAchievement, OpportunityCost, Timeliness, Unavailable, etc.).
/// Example: /// Example: GoalAchievement
/// Constraints: Minimum length = 0, Maximum length = 64
func (rcv *EffectResponseMetrics_Ingest) MetricType() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The type of the metric (e.g. CollateralDamage, GoalAchievement, OpportunityCost, Timeliness, Unavailable, etc.).
/// Example: /// Example: GoalAchievement
/// Constraints: Minimum length = 0, Maximum length = 64
/// The metric score specific to its domain.
/// Example: /// Example: 10.1
/// Constraints: No constraints specified.
func (rcv *EffectResponseMetrics_Ingest) DomainValue() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// The metric score specific to its domain.
/// Example: /// Example: 10.1
/// Constraints: No constraints specified.
func (rcv *EffectResponseMetrics_Ingest) MutateDomainValue(n float64) bool {
	return rcv._tab.MutateFloat64Slot(6, n)
}

/// The metric score adjusted to be relative and comparable to other domains.
/// Example: /// Example: 10.1
/// Constraints: No constraints specified.
func (rcv *EffectResponseMetrics_Ingest) RelativeValue() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// The metric score adjusted to be relative and comparable to other domains.
/// Example: /// Example: 10.1
/// Constraints: No constraints specified.
func (rcv *EffectResponseMetrics_Ingest) MutateRelativeValue(n float64) bool {
	return rcv._tab.MutateFloat64Slot(8, n)
}

/// The metric that was used to score this task.
/// Example: /// Example: Example metric
/// Constraints: Minimum length = 0, Maximum length = 1024
func (rcv *EffectResponseMetrics_Ingest) Provenance() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The metric that was used to score this task.
/// Example: /// Example: Example metric
/// Constraints: Minimum length = 0, Maximum length = 1024
func EffectResponseMetrics_IngestStart(builder *flatbuffers.Builder) {
	builder.StartObject(4)
}
func EffectResponseMetrics_IngestAddMetricType(builder *flatbuffers.Builder, metricType flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(metricType), 0)
}
func EffectResponseMetrics_IngestAddDomainValue(builder *flatbuffers.Builder, domainValue float64) {
	builder.PrependFloat64Slot(1, domainValue, 0.0)
}
func EffectResponseMetrics_IngestAddRelativeValue(builder *flatbuffers.Builder, relativeValue float64) {
	builder.PrependFloat64Slot(2, relativeValue, 0.0)
}
func EffectResponseMetrics_IngestAddProvenance(builder *flatbuffers.Builder, provenance flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(3, flatbuffers.UOffsetT(provenance), 0)
}
func EffectResponseMetrics_IngestEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
