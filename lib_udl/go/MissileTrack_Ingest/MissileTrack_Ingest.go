// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package MissileTrack_Ingest

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

/// /// These services provide operations for querying of all available missile track details and amplifying missile data. A missile track is a position and optionally a heading/velocity of an object across all environments at a particular timestamp. It also includes optional information regarding the identity/type of missile, impact location, launch location and other amplifying object data, if known.
type MissileTrack_Ingest struct {
	_tab flatbuffers.Table
}

const MissileTrack_IngestIdentifier = "MISS"

func GetRootAsMissileTrack_Ingest(buf []byte, offset flatbuffers.UOffsetT) *MissileTrack_Ingest {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &MissileTrack_Ingest{}
	x.Init(buf, n+offset)
	return x
}

func FinishMissileTrack_IngestBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	identifierBytes := []byte(MissileTrack_IngestIdentifier)
	builder.FinishWithFileIdentifier(offset, identifierBytes)
}

func MissileTrack_IngestBufferHasIdentifier(buf []byte) bool {
	return flatbuffers.BufferHasIdentifier(buf, MissileTrack_IngestIdentifier)
}

func GetSizePrefixedRootAsMissileTrack_Ingest(buf []byte, offset flatbuffers.UOffsetT) *MissileTrack_Ingest {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &MissileTrack_Ingest{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedMissileTrack_IngestBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	identifierBytes := []byte(MissileTrack_IngestIdentifier)
	builder.FinishSizePrefixedWithFileIdentifier(offset, identifierBytes)
}

func SizePrefixedMissileTrack_IngestBufferHasIdentifier(buf []byte) bool {
	return flatbuffers.SizePrefixedBufferHasIdentifier(buf, MissileTrack_IngestIdentifier)
}

func (rcv *MissileTrack_Ingest) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *MissileTrack_Ingest) Table() flatbuffers.Table {
	return rcv._tab
}

/// Unique identifier of the record, auto-generated by the system if not provided on create operations.
/// Example: /// Example: MissileTrack_ID
/// Constraints: Minimum length = 1, Maximum length = 36
func (rcv *MissileTrack_Ingest) Id() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Unique identifier of the record, auto-generated by the system if not provided on create operations.
/// Example: /// Example: MissileTrack_ID
/// Constraints: Minimum length = 1, Maximum length = 36
/// Classification marking of the data in IC/CAPCO Portion-marked format.
/// Example: /// Example: U
/// Constraints: Minimum length = 1, Maximum length = 128
func (rcv *MissileTrack_Ingest) ClassificationMarking() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Classification marking of the data in IC/CAPCO Portion-marked format.
/// Example: /// Example: U
/// Constraints: Minimum length = 1, Maximum length = 128
/// The type of external message from which this request originated.
/// Example: /// Example: MSG-TYPE
/// Constraints: Minimum length = 0, Maximum length = 16
func (rcv *MissileTrack_Ingest) MsgType() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The type of external message from which this request originated.
/// Example: /// Example: MSG-TYPE
/// Constraints: Minimum length = 0, Maximum length = 16
/// The message subtype is a finer grain categorization of message types as many messages can contain a variety of data content within the same structure.  Examples include but are not limited to Initial, Final, Launch, Update, etc.  Users should consult the appropriate documentation, based on the message type, for the definitions of the subtypes that apply to that message.
/// Example: /// Example: Update
/// Constraints: Minimum length = 0, Maximum length = 32
func (rcv *MissileTrack_Ingest) MsgSubType() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The message subtype is a finer grain categorization of message types as many messages can contain a variety of data content within the same structure.  Examples include but are not limited to Initial, Final, Launch, Update, etc.  Users should consult the appropriate documentation, based on the message type, for the definitions of the subtypes that apply to that message.
/// Example: /// Example: Update
/// Constraints: Minimum length = 0, Maximum length = 32
/// The timestamp of the external message from which this request originated, if applicable, in ISO8601 UTC format with millisecond precision.
/// Example: /// Example: 2024-04-25T08:17:01.346Z
/// Constraints: No constraints specified.
func (rcv *MissileTrack_Ingest) MsgCreateDate() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The timestamp of the external message from which this request originated, if applicable, in ISO8601 UTC format with millisecond precision.
/// Example: /// Example: 2024-04-25T08:17:01.346Z
/// Constraints: No constraints specified.
/// The track environment type (AIR, LAND, SPACE, SUBSURFACE, SURFACE, UNKNOWN):
///  AIR: Between sea level and the Kármán line, which has an altitude of 100 kilometers (62 miles).
///  LAND: On the surface of dry land.
///  SPACE: Above the Kármán line, which has an altitude of 100 kilometers (62 miles).
///  SURFACE: On the surface of a body of water.
///  SUBSURFACE: Below the surface of a body of water.
///  UNKNOWN: Environment is not known.
/// Example: /// Example: AIR
/// Constraints: Minimum length = 0, Maximum length = 16
func (rcv *MissileTrack_Ingest) Env() MissileTrack_Ingest_env_Enum {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return MissileTrack_Ingest_env_Enum(rcv._tab.GetInt8(o + rcv._tab.Pos))
	}
	return 0
}

/// The track environment type (AIR, LAND, SPACE, SUBSURFACE, SURFACE, UNKNOWN):
///  AIR: Between sea level and the Kármán line, which has an altitude of 100 kilometers (62 miles).
///  LAND: On the surface of dry land.
///  SPACE: Above the Kármán line, which has an altitude of 100 kilometers (62 miles).
///  SURFACE: On the surface of a body of water.
///  SUBSURFACE: Below the surface of a body of water.
///  UNKNOWN: Environment is not known.
/// Example: /// Example: AIR
/// Constraints: Minimum length = 0, Maximum length = 16
func (rcv *MissileTrack_Ingest) MutateEnv(n MissileTrack_Ingest_env_Enum) bool {
	return rcv._tab.MutateInt8Slot(14, int8(n))
}

/// The type of object to which this record refers. The object type may be updated in later records based on assessment of additional data.
/// Example: /// Example: Ballistic
/// Constraints: Minimum length = 0, Maximum length = 32
func (rcv *MissileTrack_Ingest) ObjType() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The type of object to which this record refers. The object type may be updated in later records based on assessment of additional data.
/// Example: /// Example: Ballistic
/// Constraints: Minimum length = 0, Maximum length = 32
/// Confidence of the object type, 0-100.
/// Example: /// Example: 90
/// Constraints: No constraints specified.
func (rcv *MissileTrack_Ingest) ObjTypeConf() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(18))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

/// Confidence of the object type, 0-100.
/// Example: /// Example: 90
/// Constraints: No constraints specified.
func (rcv *MissileTrack_Ingest) MutateObjTypeConf(n int32) bool {
	return rcv._tab.MutateInt32Slot(18, n)
}

/// Space Platform field along with the Space Activity field further defines the identity of a Space track (examples: SATELLITE, WEAPON, PATROL). The object platform type. Intended as, but not constrained to, MIL-STD-6016 environment dependent platform type designations. The platform type can be reported as either a combination of the code and environment (e.g. 14/LAND) or as the descriptive representations (e.g. COMBAT VEHICLE), which are equivalent.
/// Example: /// Example: WEAPON
/// Constraints: Minimum length = 0, Maximum length = 32
func (rcv *MissileTrack_Ingest) ObjPlat() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(20))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Space Platform field along with the Space Activity field further defines the identity of a Space track (examples: SATELLITE, WEAPON, PATROL). The object platform type. Intended as, but not constrained to, MIL-STD-6016 environment dependent platform type designations. The platform type can be reported as either a combination of the code and environment (e.g. 14/LAND) or as the descriptive representations (e.g. COMBAT VEHICLE), which are equivalent.
/// Example: /// Example: WEAPON
/// Constraints: Minimum length = 0, Maximum length = 32
/// The estimated identity of the track object (ASSUMED FRIEND, FRIEND, HOSTILE, NEUTRAL, PENDING, SUSPECT, UNKNOWN):
///  ASSUMED FRIEND: Track assumed to be a friend due to the object characteristics, behavior, and/or origin.
///  FRIEND: Track object supporting friendly forces and belonging to a declared friendly nation or entity.
///  HOSTILE: Track object belonging to an opposing nation, party, group, or entity deemed to contribute to a threat to friendly forces or their mission due to its behavior, characteristics, nationality, or origin.
///  NEUTRAL: Track object whose characteristics, behavior, nationality, and/or origin indicate that it is neither supporting nor opposing friendly forces or their mission.
///  PENDING: Track object which has not been evaluated.
///  SUSPECT: Track object deemed potentially hostile due to the object characteristics, behavior, nationality, and/or origin.
///  UNKNOWN: Track object which has been evaluated and does not meet criteria for any standard identity.
/// Example: /// Example: FRIEND
/// Constraints: Minimum length = 0, Maximum length = 32
func (rcv *MissileTrack_Ingest) ObjIdent() MissileTrack_Ingest_objIdent_Enum {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(22))
	if o != 0 {
		return MissileTrack_Ingest_objIdent_Enum(rcv._tab.GetInt8(o + rcv._tab.Pos))
	}
	return 0
}

/// The estimated identity of the track object (ASSUMED FRIEND, FRIEND, HOSTILE, NEUTRAL, PENDING, SUSPECT, UNKNOWN):
///  ASSUMED FRIEND: Track assumed to be a friend due to the object characteristics, behavior, and/or origin.
///  FRIEND: Track object supporting friendly forces and belonging to a declared friendly nation or entity.
///  HOSTILE: Track object belonging to an opposing nation, party, group, or entity deemed to contribute to a threat to friendly forces or their mission due to its behavior, characteristics, nationality, or origin.
///  NEUTRAL: Track object whose characteristics, behavior, nationality, and/or origin indicate that it is neither supporting nor opposing friendly forces or their mission.
///  PENDING: Track object which has not been evaluated.
///  SUSPECT: Track object deemed potentially hostile due to the object characteristics, behavior, nationality, and/or origin.
///  UNKNOWN: Track object which has been evaluated and does not meet criteria for any standard identity.
/// Example: /// Example: FRIEND
/// Constraints: Minimum length = 0, Maximum length = 32
func (rcv *MissileTrack_Ingest) MutateObjIdent(n MissileTrack_Ingest_objIdent_Enum) bool {
	return rcv._tab.MutateInt8Slot(22, int8(n))
}

/// Space amplification indicates additional information on the space environment being reported (examples: NUCLEAR WARHEAD, FUEL-AIR EXPLOSIVE WARHEAD, DEBRIS).
/// Example: /// Example: NUCLEAR WARHEAD
/// Constraints: Minimum length = 0, Maximum length = 32
func (rcv *MissileTrack_Ingest) SpaceAmp() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(24))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Space amplification indicates additional information on the space environment being reported (examples: NUCLEAR WARHEAD, FUEL-AIR EXPLOSIVE WARHEAD, DEBRIS).
/// Example: /// Example: NUCLEAR WARHEAD
/// Constraints: Minimum length = 0, Maximum length = 32
/// Space activity (examples: RECONNAISSANCE, ANTISPACE WARFARE, TELEVISION). The activity in which the track object is engaged. Intended as, but not constrained to, MIL-STD-6016 environment dependent activity designations. The activity can be reported as either a combination of the code and environment (e.g. 65/AIR) or as the descriptive enumeration (e.g. DIVERTING), which are equivalent.
/// Example: /// Example: HOLDING
/// Constraints: Minimum length = 0, Maximum length = 32
func (rcv *MissileTrack_Ingest) ObjAct() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(26))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Space activity (examples: RECONNAISSANCE, ANTISPACE WARFARE, TELEVISION). The activity in which the track object is engaged. Intended as, but not constrained to, MIL-STD-6016 environment dependent activity designations. The activity can be reported as either a combination of the code and environment (e.g. 65/AIR) or as the descriptive enumeration (e.g. DIVERTING), which are equivalent.
/// Example: /// Example: HOLDING
/// Constraints: Minimum length = 0, Maximum length = 32
/// Specific type of point or track with an environment of space.
/// Example: /// Example: SS-21_MOD_2_CRBM
/// Constraints: Minimum length = 0, Maximum length = 32
func (rcv *MissileTrack_Ingest) SpaceSpecType() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(28))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Specific type of point or track with an environment of space.
/// Example: /// Example: SS-21_MOD_2_CRBM
/// Constraints: Minimum length = 0, Maximum length = 32
/// Subtype is a finer grain categorization of missile types. Examples include but are not limited to SRBM, MRBM, IRBM, LRBM, ICBM, SLBM. 
/// &nbsp;SRBM - Short-Range Ballistic Missile
/// &nbsp;MRBM - Medium-Range Ballistic Missile
/// &nbsp;IRBM - Intermediate-Range Ballistic Missile
/// &nbsp;LRBM - Long-Range Ballistic Missile
/// &nbsp;ICBM - Intercontinental Ballistic Missile
/// &nbsp;SLBM - Submarine-Launched Ballistic Missile.
/// Example: /// Example: SLBM
/// Constraints: Minimum length = 0, Maximum length = 16
func (rcv *MissileTrack_Ingest) AcftSubType() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(30))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Subtype is a finer grain categorization of missile types. Examples include but are not limited to SRBM, MRBM, IRBM, LRBM, ICBM, SLBM. 
/// &nbsp;SRBM - Short-Range Ballistic Missile
/// &nbsp;MRBM - Medium-Range Ballistic Missile
/// &nbsp;IRBM - Intermediate-Range Ballistic Missile
/// &nbsp;LRBM - Long-Range Ballistic Missile
/// &nbsp;ICBM - Intercontinental Ballistic Missile
/// &nbsp;SLBM - Submarine-Launched Ballistic Missile.
/// Example: /// Example: SLBM
/// Constraints: Minimum length = 0, Maximum length = 16
/// Track name.
/// Example: /// Example: TRACK-NAME
/// Constraints: Minimum length = 0, Maximum length = 48
func (rcv *MissileTrack_Ingest) Name() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(32))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Track name.
/// Example: /// Example: TRACK-NAME
/// Constraints: Minimum length = 0, Maximum length = 48
/// The call sign currently assigned to the track object.
/// Example: /// Example: Charlie
/// Constraints: Minimum length = 0, Maximum length = 24
func (rcv *MissileTrack_Ingest) CallSign() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(34))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The call sign currently assigned to the track object.
/// Example: /// Example: Charlie
/// Constraints: Minimum length = 0, Maximum length = 24
/// Indicates whether or not the missile is considered lost.
/// Example: /// Example: False
/// Constraints: No constraints specified.
func (rcv *MissileTrack_Ingest) LostTrkInd() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(36))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

/// Indicates whether or not the missile is considered lost.
/// Example: /// Example: False
/// Constraints: No constraints specified.
func (rcv *MissileTrack_Ingest) MutateLostTrkInd(n bool) bool {
	return rcv._tab.MutateBoolSlot(36, n)
}

/// Track ID within the originating system.
/// Example: /// Example: 102288
/// Constraints: Minimum length = 0, Maximum length = 36
func (rcv *MissileTrack_Ingest) TrackId() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(38))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Track ID within the originating system.
/// Example: /// Example: 102288
/// Constraints: Minimum length = 0, Maximum length = 36
/// Track ID of the parent track, within the originating system, from which the track was developed.
/// Example: /// Example: 102288
/// Constraints: Minimum length = 0, Maximum length = 36
func (rcv *MissileTrack_Ingest) ParentTrackId() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(40))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Track ID of the parent track, within the originating system, from which the track was developed.
/// Example: /// Example: 102288
/// Constraints: Minimum length = 0, Maximum length = 36
/// Track ID for the source of the missile-unique identifier.
/// Example: /// Example: MUID-SRC-ID
/// Constraints: Minimum length = 0, Maximum length = 36
func (rcv *MissileTrack_Ingest) MuidSrcTrk() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(42))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Track ID for the source of the missile-unique identifier.
/// Example: /// Example: MUID-SRC-ID
/// Constraints: Minimum length = 0, Maximum length = 36
/// Source of the missile-unique identifier (MUID).
/// Example: /// Example: MUID-SRC
/// Constraints: Minimum length = 0, Maximum length = 36
func (rcv *MissileTrack_Ingest) MuidSrc() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(44))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Source of the missile-unique identifier (MUID).
/// Example: /// Example: MUID-SRC
/// Constraints: Minimum length = 0, Maximum length = 36
/// A track may be designated as a non-alert track or an alert track.
/// Examples include but are not limited to:
/// &nbsp;Non-alert tracks – choose None (Blank).
/// &nbsp;Alert tracks – enter the proper alert classification:
/// &nbsp;HIT - High Interest Track
/// &nbsp;TGT - Target
/// &nbsp;SUS - Suspect Carrier
/// &nbsp;NSP - Cleared Suspect.
/// Example: /// Example: HIT
/// Constraints: Minimum length = 0, Maximum length = 4
func (rcv *MissileTrack_Ingest) Alert() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(46))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// A track may be designated as a non-alert track or an alert track.
/// Examples include but are not limited to:
/// &nbsp;Non-alert tracks – choose None (Blank).
/// &nbsp;Alert tracks – enter the proper alert classification:
/// &nbsp;HIT - High Interest Track
/// &nbsp;TGT - Target
/// &nbsp;SUS - Suspect Carrier
/// &nbsp;NSP - Cleared Suspect.
/// Example: /// Example: HIT
/// Constraints: Minimum length = 0, Maximum length = 4
/// Missile status enumeration examples include but are not limited to:
/// &nbsp;AT LAUNCH 
/// &nbsp;AT OBSERVATION 
/// &nbsp;FLYING 
/// &nbsp;IMPACTED 
/// &nbsp;LOST 
/// &nbsp;STALE
/// &nbsp;DEBRIS.
/// Example: /// Example: AT LAUNCH
/// Constraints: Minimum length = 0, Maximum length = 32
func (rcv *MissileTrack_Ingest) MslStatus() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(48))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Missile status enumeration examples include but are not limited to:
/// &nbsp;AT LAUNCH 
/// &nbsp;AT OBSERVATION 
/// &nbsp;FLYING 
/// &nbsp;IMPACTED 
/// &nbsp;LOST 
/// &nbsp;STALE
/// &nbsp;DEBRIS.
/// Example: /// Example: AT LAUNCH
/// Constraints: Minimum length = 0, Maximum length = 32
/// The receipt time of the data by the processing system, in ISO8601 UTC format with microsecond precision.
/// Example: /// Example: 2021-02-25T12:00:00.123456Z
/// Constraints: No constraints specified.
func (rcv *MissileTrack_Ingest) Ts() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(50))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The receipt time of the data by the processing system, in ISO8601 UTC format with microsecond precision.
/// Example: /// Example: 2021-02-25T12:00:00.123456Z
/// Constraints: No constraints specified.
/// The Area of Uncertainty (AoU) type (BEARING, ELLIPSE, OTHER) definition. This type defines the elements of the aouEllp array and is required if aouEllp is not null. See the aouEllp field definition for specific information.
/// Example: /// Example: ELLIPSE
/// Constraints: Minimum length = 0, Maximum length = 40
func (rcv *MissileTrack_Ingest) AouRptType() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(52))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The Area of Uncertainty (AoU) type (BEARING, ELLIPSE, OTHER) definition. This type defines the elements of the aouEllp array and is required if aouEllp is not null. See the aouEllp field definition for specific information.
/// Example: /// Example: ELLIPSE
/// Constraints: Minimum length = 0, Maximum length = 40
/// Three element array representing an Area of Uncertainty (AoU). The array element definitions and units are type specific depending on the aouType specified in this record:
/// &nbsp;ELLIPSE:
/// &nbsp;&nbsp;brg - orientation in degrees of the ellipse
/// &nbsp;&nbsp;a1 - semi-major axis in kilometers
/// &nbsp;&nbsp;a2 - semi-minor axis in kilometers
/// &nbsp;BEARING (BEARING BOX or MTST BEARING BOX):
/// &nbsp;&nbsp;brg - orientation in degrees of the bearing box
/// &nbsp;&nbsp;a1 - length of bearing box in kilometers
/// &nbsp;&nbsp;a2 - half-width of bearing box in kilometers
/// &nbsp;OTHER (All other type values):
/// &nbsp;&nbsp;brg - line of bearing in degrees true
/// &nbsp;&nbsp;a1 - bearing error in degrees
/// &nbsp;&nbsp;a2 - estimated range in kilometers.
/// Example: /// Example: [34.3, 26.5, 1.2]
/// Constraints: No constraints specified.
func (rcv *MissileTrack_Ingest) AouRptData(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(54))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *MissileTrack_Ingest) AouRptDataLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(54))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

/// Three element array representing an Area of Uncertainty (AoU). The array element definitions and units are type specific depending on the aouType specified in this record:
/// &nbsp;ELLIPSE:
/// &nbsp;&nbsp;brg - orientation in degrees of the ellipse
/// &nbsp;&nbsp;a1 - semi-major axis in kilometers
/// &nbsp;&nbsp;a2 - semi-minor axis in kilometers
/// &nbsp;BEARING (BEARING BOX or MTST BEARING BOX):
/// &nbsp;&nbsp;brg - orientation in degrees of the bearing box
/// &nbsp;&nbsp;a1 - length of bearing box in kilometers
/// &nbsp;&nbsp;a2 - half-width of bearing box in kilometers
/// &nbsp;OTHER (All other type values):
/// &nbsp;&nbsp;brg - line of bearing in degrees true
/// &nbsp;&nbsp;a1 - bearing error in degrees
/// &nbsp;&nbsp;a2 - estimated range in kilometers.
/// Example: /// Example: [34.3, 26.5, 1.2]
/// Constraints: No constraints specified.
/// The percentage of time that the estimated AoU will "cover" the true position of the track.
/// Example: /// Example: 90.64
/// Constraints: No constraints specified.
func (rcv *MissileTrack_Ingest) Containment() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(56))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// The percentage of time that the estimated AoU will "cover" the true position of the track.
/// Example: /// Example: 90.64
/// Constraints: No constraints specified.
func (rcv *MissileTrack_Ingest) MutateContainment(n float64) bool {
	return rcv._tab.MutateFloat64Slot(56, n)
}

/// Overall track confidence estimate (not standardized, but typically a value between 0 and 1, with 0 indicating lowest confidence).
/// Example: /// Example: 0.95
/// Constraints: No constraints specified.
func (rcv *MissileTrack_Ingest) TrkConf() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(58))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Overall track confidence estimate (not standardized, but typically a value between 0 and 1, with 0 indicating lowest confidence).
/// Example: /// Example: 0.95
/// Constraints: No constraints specified.
func (rcv *MissileTrack_Ingest) MutateTrkConf(n float64) bool {
	return rcv._tab.MutateFloat64Slot(58, n)
}

/// Track Quality is reported as an integer from 0-15. Track Quality specifies the reliability of the positional information of a reported track, with higher values indicating higher track quality; i.e., lower errors in reported position.
/// Example: /// Example: 1
/// Constraints: No constraints specified.
func (rcv *MissileTrack_Ingest) TrkQual() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(60))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

/// Track Quality is reported as an integer from 0-15. Track Quality specifies the reliability of the positional information of a reported track, with higher values indicating higher track quality; i.e., lower errors in reported position.
/// Example: /// Example: 1
/// Constraints: No constraints specified.
func (rcv *MissileTrack_Ingest) MutateTrkQual(n int32) bool {
	return rcv._tab.MutateInt32Slot(60, n)
}

/// Angle of elevation/depression between observer and missile in degrees.
/// Example: /// Example: 15.2
/// Constraints: No constraints specified.
func (rcv *MissileTrack_Ingest) AngElev() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(62))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Angle of elevation/depression between observer and missile in degrees.
/// Example: /// Example: 15.2
/// Constraints: No constraints specified.
func (rcv *MissileTrack_Ingest) MutateAngElev(n float64) bool {
	return rcv._tab.MutateFloat64Slot(62, n)
}

/// Last report type received from the sensor (for example, OBSBO = observation burnout).
/// Example: /// Example: OBSBO
/// Constraints: Minimum length = 0, Maximum length = 64
func (rcv *MissileTrack_Ingest) SenMode() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(64))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Last report type received from the sensor (for example, OBSBO = observation burnout).
/// Example: /// Example: OBSBO
/// Constraints: Minimum length = 0, Maximum length = 64
/// Source code for source of information used to detect track.
/// Example: /// Example: S1
/// Constraints: Minimum length = 0, Maximum length = 64
func (rcv *MissileTrack_Ingest) InfoSource() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(66))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Source code for source of information used to detect track.
/// Example: /// Example: S1
/// Constraints: Minimum length = 0, Maximum length = 64
/// Indicates whether or not the missile is currently in a state of boosting.
/// Example: /// Example: True
/// Constraints: No constraints specified.
func (rcv *MissileTrack_Ingest) Boosting() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(68))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

/// Indicates whether or not the missile is currently in a state of boosting.
/// Example: /// Example: True
/// Constraints: No constraints specified.
func (rcv *MissileTrack_Ingest) MutateBoosting(n bool) bool {
	return rcv._tab.MutateBoolSlot(68, n)
}

/// Azimuth corridor reference point latitude.
/// Example: /// Example: 19.88550102
/// Constraints: No constraints specified.
func (rcv *MissileTrack_Ingest) PolarSingLocLat() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(70))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Azimuth corridor reference point latitude.
/// Example: /// Example: 19.88550102
/// Constraints: No constraints specified.
func (rcv *MissileTrack_Ingest) MutatePolarSingLocLat(n float64) bool {
	return rcv._tab.MutateFloat64Slot(70, n)
}

/// Azimuth corridor reference point longitude.
/// Example: /// Example: 46.74596844
/// Constraints: No constraints specified.
func (rcv *MissileTrack_Ingest) PolarSingLocLon() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(72))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Azimuth corridor reference point longitude.
/// Example: /// Example: 46.74596844
/// Constraints: No constraints specified.
func (rcv *MissileTrack_Ingest) MutatePolarSingLocLon(n float64) bool {
	return rcv._tab.MutateFloat64Slot(72, n)
}

/// Indicates whether or not a track has an emergency.
/// Example: /// Example: True
/// Constraints: No constraints specified.
func (rcv *MissileTrack_Ingest) EmgInd() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(74))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

/// Indicates whether or not a track has an emergency.
/// Example: /// Example: True
/// Constraints: No constraints specified.
func (rcv *MissileTrack_Ingest) MutateEmgInd(n bool) bool {
	return rcv._tab.MutateBoolSlot(74, n)
}

/// The drop-point indicator setting.
/// Example: /// Example: True
/// Constraints: No constraints specified.
func (rcv *MissileTrack_Ingest) DropPtInd() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(76))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

/// The drop-point indicator setting.
/// Example: /// Example: True
/// Constraints: No constraints specified.
func (rcv *MissileTrack_Ingest) MutateDropPtInd(n bool) bool {
	return rcv._tab.MutateBoolSlot(76, n)
}

/// Confidence level of the amplifying characteristics. Values range from 0 to 6.
/// Example: /// Example: 6
/// Constraints: No constraints specified.
func (rcv *MissileTrack_Ingest) SpaceAmpConf() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(78))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

/// Confidence level of the amplifying characteristics. Values range from 0 to 6.
/// Example: /// Example: 6
/// Constraints: No constraints specified.
func (rcv *MissileTrack_Ingest) MutateSpaceAmpConf(n int32) bool {
	return rcv._tab.MutateInt32Slot(78, n)
}

/// Missile launch timestamp in ISO8601 UTC format with microsecond precision.
/// Example: /// Example: 2021-02-25T12:00:00.123456Z
/// Constraints: No constraints specified.
func (rcv *MissileTrack_Ingest) LaunchTime() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(80))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Missile launch timestamp in ISO8601 UTC format with microsecond precision.
/// Example: /// Example: 2021-02-25T12:00:00.123456Z
/// Constraints: No constraints specified.
/// WGS-84 latitude of the missile launch point, in degrees. -90 to 90 degrees (negative values south of equator).
/// Example: /// Example: 19.88550102
/// Constraints: No constraints specified.
func (rcv *MissileTrack_Ingest) LaunchLat() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(82))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// WGS-84 latitude of the missile launch point, in degrees. -90 to 90 degrees (negative values south of equator).
/// Example: /// Example: 19.88550102
/// Constraints: No constraints specified.
func (rcv *MissileTrack_Ingest) MutateLaunchLat(n float64) bool {
	return rcv._tab.MutateFloat64Slot(82, n)
}

/// WGS-84 longitude of the missile launch point, in degrees. -180 to 180 degrees (negative values west of Prime Meridian).
/// Example: /// Example: 46.74596844
/// Constraints: No constraints specified.
func (rcv *MissileTrack_Ingest) LaunchLon() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(84))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// WGS-84 longitude of the missile launch point, in degrees. -180 to 180 degrees (negative values west of Prime Meridian).
/// Example: /// Example: 46.74596844
/// Constraints: No constraints specified.
func (rcv *MissileTrack_Ingest) MutateLaunchLon(n float64) bool {
	return rcv._tab.MutateFloat64Slot(84, n)
}

/// Missile azimuth corridor data.
/// Example: /// Example: 12.876
/// Constraints: No constraints specified.
func (rcv *MissileTrack_Ingest) AzCorr() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(86))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Missile azimuth corridor data.
/// Example: /// Example: 12.876
/// Constraints: No constraints specified.
func (rcv *MissileTrack_Ingest) MutateAzCorr(n float64) bool {
	return rcv._tab.MutateFloat64Slot(86, n)
}

/// Track point burnout altitude relative to WGS-84 ellipsoid, in kilometers.
/// Example: /// Example: 30567.452
/// Constraints: No constraints specified.
func (rcv *MissileTrack_Ingest) BurnoutAlt() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(88))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Track point burnout altitude relative to WGS-84 ellipsoid, in kilometers.
/// Example: /// Example: 30567.452
/// Constraints: No constraints specified.
func (rcv *MissileTrack_Ingest) MutateBurnoutAlt(n float64) bool {
	return rcv._tab.MutateFloat64Slot(88, n)
}

/// The Area of Uncertainty (AoU) type (BEARING, ELLIPSE, OTHER) definition. This type defines the elements of the aouEllp array and is required if aouEllp is not null. See the aouEllp field definition for specific information.
/// Example: /// Example: ELLIPSE
/// Constraints: Minimum length = 0, Maximum length = 40
func (rcv *MissileTrack_Ingest) LaunchAouType() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(90))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The Area of Uncertainty (AoU) type (BEARING, ELLIPSE, OTHER) definition. This type defines the elements of the aouEllp array and is required if aouEllp is not null. See the aouEllp field definition for specific information.
/// Example: /// Example: ELLIPSE
/// Constraints: Minimum length = 0, Maximum length = 40
/// Three element array representing an Area of Uncertainty (AoU). The array element definitions and units are type specific depending on the aouType specified in this record:
/// &nbsp;ELLIPSE:
/// &nbsp;&nbsp;brg - orientation in degrees of the ellipse
/// &nbsp;&nbsp;a1 - semi-major axis in kilometers
/// &nbsp;&nbsp;a2 - semi-minor axis in kilometers
/// &nbsp;BEARING (BEARING BOX or MTST BEARING BOX):
/// &nbsp;&nbsp;brg - orientation in degrees of the bearing box
/// &nbsp;&nbsp;a1 - length of bearing box in kilometers
/// &nbsp;&nbsp;a2 - half-width of bearing box in kilometers
/// &nbsp;OTHER (All other type values):
/// &nbsp;&nbsp;brg - line of bearing in degrees true
/// &nbsp;&nbsp;a1 - bearing error in degrees
/// &nbsp;&nbsp;a2 - estimated range in kilometers.
/// Example: /// Example: [1.23, 2.34, 3.45]
/// Constraints: No constraints specified.
func (rcv *MissileTrack_Ingest) LaunchAouData(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(92))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *MissileTrack_Ingest) LaunchAouDataLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(92))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

/// Three element array representing an Area of Uncertainty (AoU). The array element definitions and units are type specific depending on the aouType specified in this record:
/// &nbsp;ELLIPSE:
/// &nbsp;&nbsp;brg - orientation in degrees of the ellipse
/// &nbsp;&nbsp;a1 - semi-major axis in kilometers
/// &nbsp;&nbsp;a2 - semi-minor axis in kilometers
/// &nbsp;BEARING (BEARING BOX or MTST BEARING BOX):
/// &nbsp;&nbsp;brg - orientation in degrees of the bearing box
/// &nbsp;&nbsp;a1 - length of bearing box in kilometers
/// &nbsp;&nbsp;a2 - half-width of bearing box in kilometers
/// &nbsp;OTHER (All other type values):
/// &nbsp;&nbsp;brg - line of bearing in degrees true
/// &nbsp;&nbsp;a1 - bearing error in degrees
/// &nbsp;&nbsp;a2 - estimated range in kilometers.
/// Example: /// Example: [1.23, 2.34, 3.45]
/// Constraints: No constraints specified.
/// Estimated time of impact timestamp in ISO8601 UTC format with microsecond precision.
/// Example: /// Example: 2021-02-25T12:00:00.123456Z
/// Constraints: No constraints specified.
func (rcv *MissileTrack_Ingest) ImpactTime() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(94))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Estimated time of impact timestamp in ISO8601 UTC format with microsecond precision.
/// Example: /// Example: 2021-02-25T12:00:00.123456Z
/// Constraints: No constraints specified.
/// WGS-84 latitude of the missile object impact point, in degrees. -90 to 90 degrees (negative values south of equator).
/// Example: /// Example: 19.88550102
/// Constraints: No constraints specified.
func (rcv *MissileTrack_Ingest) ImpactLat() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(96))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// WGS-84 latitude of the missile object impact point, in degrees. -90 to 90 degrees (negative values south of equator).
/// Example: /// Example: 19.88550102
/// Constraints: No constraints specified.
func (rcv *MissileTrack_Ingest) MutateImpactLat(n float64) bool {
	return rcv._tab.MutateFloat64Slot(96, n)
}

/// WGS-84 longitude of the missile object impact point, in degrees. -180 to 180 degrees (negative values west of Prime Meridian).
/// Example: /// Example: 46.74596844
/// Constraints: No constraints specified.
func (rcv *MissileTrack_Ingest) ImpactLon() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(98))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// WGS-84 longitude of the missile object impact point, in degrees. -180 to 180 degrees (negative values west of Prime Meridian).
/// Example: /// Example: 46.74596844
/// Constraints: No constraints specified.
func (rcv *MissileTrack_Ingest) MutateImpactLon(n float64) bool {
	return rcv._tab.MutateFloat64Slot(98, n)
}

/// The Area of Uncertainty (AoU) type (BEARING, ELLIPSE, OTHER) definition. This type defines the elements of the aouEllp array and is required if aouEllp is not null. See the aouEllp field definition for specific information.
/// Example: /// Example: ELLIPSE
/// Constraints: Minimum length = 0, Maximum length = 40
func (rcv *MissileTrack_Ingest) ImpactAouType() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(100))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The Area of Uncertainty (AoU) type (BEARING, ELLIPSE, OTHER) definition. This type defines the elements of the aouEllp array and is required if aouEllp is not null. See the aouEllp field definition for specific information.
/// Example: /// Example: ELLIPSE
/// Constraints: Minimum length = 0, Maximum length = 40
/// Three element array representing an Area of Uncertainty (AoU). The array element definitions and units are type specific depending on the aouType specified in this record:
/// &nbsp;ELLIPSE:
/// &nbsp;&nbsp;brg - orientation in degrees of the ellipse
/// &nbsp;&nbsp;a1 - semi-major axis in kilometers
/// &nbsp;&nbsp;a2 - semi-minor axis in kilometers
/// &nbsp;BEARING (BEARING BOX or MTST BEARING BOX):
/// &nbsp;&nbsp;brg - orientation in degrees of the bearing box
/// &nbsp;&nbsp;a1 - length of bearing box in kilometers
/// &nbsp;&nbsp;a2 - half-width of bearing box in kilometers
/// &nbsp;OTHER (All other type values):
/// &nbsp;&nbsp;brg - line of bearing in degrees true
/// &nbsp;&nbsp;a1 - bearing error in degrees
/// &nbsp;&nbsp;a2 - estimated range in kilometers.
/// Example: /// Example: [34.3, 26.5, 1.2]
/// Constraints: No constraints specified.
func (rcv *MissileTrack_Ingest) ImpactAouData(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(102))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *MissileTrack_Ingest) ImpactAouDataLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(102))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

/// Three element array representing an Area of Uncertainty (AoU). The array element definitions and units are type specific depending on the aouType specified in this record:
/// &nbsp;ELLIPSE:
/// &nbsp;&nbsp;brg - orientation in degrees of the ellipse
/// &nbsp;&nbsp;a1 - semi-major axis in kilometers
/// &nbsp;&nbsp;a2 - semi-minor axis in kilometers
/// &nbsp;BEARING (BEARING BOX or MTST BEARING BOX):
/// &nbsp;&nbsp;brg - orientation in degrees of the bearing box
/// &nbsp;&nbsp;a1 - length of bearing box in kilometers
/// &nbsp;&nbsp;a2 - half-width of bearing box in kilometers
/// &nbsp;OTHER (All other type values):
/// &nbsp;&nbsp;brg - line of bearing in degrees true
/// &nbsp;&nbsp;a1 - bearing error in degrees
/// &nbsp;&nbsp;a2 - estimated range in kilometers.
/// Example: /// Example: [34.3, 26.5, 1.2]
/// Constraints: No constraints specified.
/// Array of MissileTrackVector objects. Missile track vectors are cartesian vectors of position, velocity, and acceleration that, together with their time, 'epoch', uniquely determine the trajectory of the missile. ECEF is the preferred coordinate frame but in some cases data may be in another frame as specified by 'referenceFrame', depending on the provider.
/// Example: /// Example: No example provided.
/// Constraints: No constraints specified.
func (rcv *MissileTrack_Ingest) Vectors(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(104))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *MissileTrack_Ingest) VectorsLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(104))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

/// Array of MissileTrackVector objects. Missile track vectors are cartesian vectors of position, velocity, and acceleration that, together with their time, 'epoch', uniquely determine the trajectory of the missile. ECEF is the preferred coordinate frame but in some cases data may be in another frame as specified by 'referenceFrame', depending on the provider.
/// Example: /// Example: No example provided.
/// Constraints: No constraints specified.
/// The originating source network on which this record was created, auto-populated by the system.
/// Example: /// Example: ORIG
/// Constraints: Minimum length = 0, Maximum length = 32
func (rcv *MissileTrack_Ingest) OrigNetwork() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(106))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The originating source network on which this record was created, auto-populated by the system.
/// Example: /// Example: ORIG
/// Constraints: Minimum length = 0, Maximum length = 32
/// Time the row was created in the database.
/// Example: /// Example: 2021-02-25T12:00:00.123Z
/// Constraints: No constraints specified.
func (rcv *MissileTrack_Ingest) CreatedAt() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(108))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Time the row was created in the database.
/// Example: /// Example: 2021-02-25T12:00:00.123Z
/// Constraints: No constraints specified.
/// Application user who created the row in the database.
/// Example: /// Example: some.user
/// Constraints: Minimum length = 1, Maximum length = 64
func (rcv *MissileTrack_Ingest) CreatedBy() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(110))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Application user who created the row in the database.
/// Example: /// Example: some.user
/// Constraints: Minimum length = 1, Maximum length = 64
/// Source of the data.
/// Example: /// Example: Bluestaq
/// Constraints: Minimum length = 1, Maximum length = 64
func (rcv *MissileTrack_Ingest) Source() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(112))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Source of the data.
/// Example: /// Example: Bluestaq
/// Constraints: Minimum length = 1, Maximum length = 64
/// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
/// Example: /// Example: THIRD_PARTY_DATASOURCE
/// Constraints: Minimum length = 0, Maximum length = 64
func (rcv *MissileTrack_Ingest) Origin() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(114))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
/// Example: /// Example: THIRD_PARTY_DATASOURCE
/// Constraints: Minimum length = 0, Maximum length = 64
/// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
/// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
/// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
/// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
/// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
/// Example: /// Example: TEST
/// Constraints: Minimum length = 1, Maximum length = 32
func (rcv *MissileTrack_Ingest) DataMode() MissileTrack_Ingest_dataMode_Enum {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(116))
	if o != 0 {
		return MissileTrack_Ingest_dataMode_Enum(rcv._tab.GetInt8(o + rcv._tab.Pos))
	}
	return 0
}

/// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
/// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
/// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
/// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
/// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
/// Example: /// Example: TEST
/// Constraints: Minimum length = 1, Maximum length = 32
func (rcv *MissileTrack_Ingest) MutateDataMode(n MissileTrack_Ingest_dataMode_Enum) bool {
	return rcv._tab.MutateInt8Slot(116, int8(n))
}

func MissileTrack_IngestStart(builder *flatbuffers.Builder) {
	builder.StartObject(57)
}
func MissileTrack_IngestAddId(builder *flatbuffers.Builder, id flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(id), 0)
}
func MissileTrack_IngestAddClassificationMarking(builder *flatbuffers.Builder, classificationMarking flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(classificationMarking), 0)
}
func MissileTrack_IngestAddMsgType(builder *flatbuffers.Builder, msgType flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(msgType), 0)
}
func MissileTrack_IngestAddMsgSubType(builder *flatbuffers.Builder, msgSubType flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(3, flatbuffers.UOffsetT(msgSubType), 0)
}
func MissileTrack_IngestAddMsgCreateDate(builder *flatbuffers.Builder, msgCreateDate flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(4, flatbuffers.UOffsetT(msgCreateDate), 0)
}
func MissileTrack_IngestAddEnv(builder *flatbuffers.Builder, env MissileTrack_Ingest_env_Enum) {
	builder.PrependInt8Slot(5, int8(env), 0)
}
func MissileTrack_IngestAddObjType(builder *flatbuffers.Builder, objType flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(6, flatbuffers.UOffsetT(objType), 0)
}
func MissileTrack_IngestAddObjTypeConf(builder *flatbuffers.Builder, objTypeConf int32) {
	builder.PrependInt32Slot(7, objTypeConf, 0)
}
func MissileTrack_IngestAddObjPlat(builder *flatbuffers.Builder, objPlat flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(8, flatbuffers.UOffsetT(objPlat), 0)
}
func MissileTrack_IngestAddObjIdent(builder *flatbuffers.Builder, objIdent MissileTrack_Ingest_objIdent_Enum) {
	builder.PrependInt8Slot(9, int8(objIdent), 0)
}
func MissileTrack_IngestAddSpaceAmp(builder *flatbuffers.Builder, spaceAmp flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(10, flatbuffers.UOffsetT(spaceAmp), 0)
}
func MissileTrack_IngestAddObjAct(builder *flatbuffers.Builder, objAct flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(11, flatbuffers.UOffsetT(objAct), 0)
}
func MissileTrack_IngestAddSpaceSpecType(builder *flatbuffers.Builder, spaceSpecType flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(12, flatbuffers.UOffsetT(spaceSpecType), 0)
}
func MissileTrack_IngestAddAcftSubType(builder *flatbuffers.Builder, acftSubType flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(13, flatbuffers.UOffsetT(acftSubType), 0)
}
func MissileTrack_IngestAddName(builder *flatbuffers.Builder, name flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(14, flatbuffers.UOffsetT(name), 0)
}
func MissileTrack_IngestAddCallSign(builder *flatbuffers.Builder, callSign flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(15, flatbuffers.UOffsetT(callSign), 0)
}
func MissileTrack_IngestAddLostTrkInd(builder *flatbuffers.Builder, lostTrkInd bool) {
	builder.PrependBoolSlot(16, lostTrkInd, false)
}
func MissileTrack_IngestAddTrackId(builder *flatbuffers.Builder, trackId flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(17, flatbuffers.UOffsetT(trackId), 0)
}
func MissileTrack_IngestAddParentTrackId(builder *flatbuffers.Builder, parentTrackId flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(18, flatbuffers.UOffsetT(parentTrackId), 0)
}
func MissileTrack_IngestAddMuidSrcTrk(builder *flatbuffers.Builder, muidSrcTrk flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(19, flatbuffers.UOffsetT(muidSrcTrk), 0)
}
func MissileTrack_IngestAddMuidSrc(builder *flatbuffers.Builder, muidSrc flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(20, flatbuffers.UOffsetT(muidSrc), 0)
}
func MissileTrack_IngestAddAlert(builder *flatbuffers.Builder, alert flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(21, flatbuffers.UOffsetT(alert), 0)
}
func MissileTrack_IngestAddMslStatus(builder *flatbuffers.Builder, mslStatus flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(22, flatbuffers.UOffsetT(mslStatus), 0)
}
func MissileTrack_IngestAddTs(builder *flatbuffers.Builder, ts flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(23, flatbuffers.UOffsetT(ts), 0)
}
func MissileTrack_IngestAddAouRptType(builder *flatbuffers.Builder, aouRptType flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(24, flatbuffers.UOffsetT(aouRptType), 0)
}
func MissileTrack_IngestAddAouRptData(builder *flatbuffers.Builder, aouRptData flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(25, flatbuffers.UOffsetT(aouRptData), 0)
}
func MissileTrack_IngestStartAouRptDataVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func MissileTrack_IngestAddContainment(builder *flatbuffers.Builder, containment float64) {
	builder.PrependFloat64Slot(26, containment, 0.0)
}
func MissileTrack_IngestAddTrkConf(builder *flatbuffers.Builder, trkConf float64) {
	builder.PrependFloat64Slot(27, trkConf, 0.0)
}
func MissileTrack_IngestAddTrkQual(builder *flatbuffers.Builder, trkQual int32) {
	builder.PrependInt32Slot(28, trkQual, 0)
}
func MissileTrack_IngestAddAngElev(builder *flatbuffers.Builder, angElev float64) {
	builder.PrependFloat64Slot(29, angElev, 0.0)
}
func MissileTrack_IngestAddSenMode(builder *flatbuffers.Builder, senMode flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(30, flatbuffers.UOffsetT(senMode), 0)
}
func MissileTrack_IngestAddInfoSource(builder *flatbuffers.Builder, infoSource flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(31, flatbuffers.UOffsetT(infoSource), 0)
}
func MissileTrack_IngestAddBoosting(builder *flatbuffers.Builder, boosting bool) {
	builder.PrependBoolSlot(32, boosting, false)
}
func MissileTrack_IngestAddPolarSingLocLat(builder *flatbuffers.Builder, polarSingLocLat float64) {
	builder.PrependFloat64Slot(33, polarSingLocLat, 0.0)
}
func MissileTrack_IngestAddPolarSingLocLon(builder *flatbuffers.Builder, polarSingLocLon float64) {
	builder.PrependFloat64Slot(34, polarSingLocLon, 0.0)
}
func MissileTrack_IngestAddEmgInd(builder *flatbuffers.Builder, emgInd bool) {
	builder.PrependBoolSlot(35, emgInd, false)
}
func MissileTrack_IngestAddDropPtInd(builder *flatbuffers.Builder, dropPtInd bool) {
	builder.PrependBoolSlot(36, dropPtInd, false)
}
func MissileTrack_IngestAddSpaceAmpConf(builder *flatbuffers.Builder, spaceAmpConf int32) {
	builder.PrependInt32Slot(37, spaceAmpConf, 0)
}
func MissileTrack_IngestAddLaunchTime(builder *flatbuffers.Builder, launchTime flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(38, flatbuffers.UOffsetT(launchTime), 0)
}
func MissileTrack_IngestAddLaunchLat(builder *flatbuffers.Builder, launchLat float64) {
	builder.PrependFloat64Slot(39, launchLat, 0.0)
}
func MissileTrack_IngestAddLaunchLon(builder *flatbuffers.Builder, launchLon float64) {
	builder.PrependFloat64Slot(40, launchLon, 0.0)
}
func MissileTrack_IngestAddAzCorr(builder *flatbuffers.Builder, azCorr float64) {
	builder.PrependFloat64Slot(41, azCorr, 0.0)
}
func MissileTrack_IngestAddBurnoutAlt(builder *flatbuffers.Builder, burnoutAlt float64) {
	builder.PrependFloat64Slot(42, burnoutAlt, 0.0)
}
func MissileTrack_IngestAddLaunchAouType(builder *flatbuffers.Builder, launchAouType flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(43, flatbuffers.UOffsetT(launchAouType), 0)
}
func MissileTrack_IngestAddLaunchAouData(builder *flatbuffers.Builder, launchAouData flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(44, flatbuffers.UOffsetT(launchAouData), 0)
}
func MissileTrack_IngestStartLaunchAouDataVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func MissileTrack_IngestAddImpactTime(builder *flatbuffers.Builder, impactTime flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(45, flatbuffers.UOffsetT(impactTime), 0)
}
func MissileTrack_IngestAddImpactLat(builder *flatbuffers.Builder, impactLat float64) {
	builder.PrependFloat64Slot(46, impactLat, 0.0)
}
func MissileTrack_IngestAddImpactLon(builder *flatbuffers.Builder, impactLon float64) {
	builder.PrependFloat64Slot(47, impactLon, 0.0)
}
func MissileTrack_IngestAddImpactAouType(builder *flatbuffers.Builder, impactAouType flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(48, flatbuffers.UOffsetT(impactAouType), 0)
}
func MissileTrack_IngestAddImpactAouData(builder *flatbuffers.Builder, impactAouData flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(49, flatbuffers.UOffsetT(impactAouData), 0)
}
func MissileTrack_IngestStartImpactAouDataVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func MissileTrack_IngestAddVectors(builder *flatbuffers.Builder, vectors flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(50, flatbuffers.UOffsetT(vectors), 0)
}
func MissileTrack_IngestStartVectorsVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func MissileTrack_IngestAddOrigNetwork(builder *flatbuffers.Builder, origNetwork flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(51, flatbuffers.UOffsetT(origNetwork), 0)
}
func MissileTrack_IngestAddCreatedAt(builder *flatbuffers.Builder, createdAt flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(52, flatbuffers.UOffsetT(createdAt), 0)
}
func MissileTrack_IngestAddCreatedBy(builder *flatbuffers.Builder, createdBy flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(53, flatbuffers.UOffsetT(createdBy), 0)
}
func MissileTrack_IngestAddSource(builder *flatbuffers.Builder, source flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(54, flatbuffers.UOffsetT(source), 0)
}
func MissileTrack_IngestAddOrigin(builder *flatbuffers.Builder, origin flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(55, flatbuffers.UOffsetT(origin), 0)
}
func MissileTrack_IngestAddDataMode(builder *flatbuffers.Builder, dataMode MissileTrack_Ingest_dataMode_Enum) {
	builder.PrependInt8Slot(56, int8(dataMode), 0)
}
func MissileTrack_IngestEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
