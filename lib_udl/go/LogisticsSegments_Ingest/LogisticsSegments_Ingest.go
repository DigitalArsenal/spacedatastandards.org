// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package LogisticsSegments_Ingest

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

/// /// Remarks associated with this LogisticsSupport record.
type LogisticsSegments_Ingest struct {
	_tab flatbuffers.Table
}

const LogisticsSegments_IngestIdentifier = "LOGI"

func GetRootAsLogisticsSegments_Ingest(buf []byte, offset flatbuffers.UOffsetT) *LogisticsSegments_Ingest {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &LogisticsSegments_Ingest{}
	x.Init(buf, n+offset)
	return x
}

func FinishLogisticsSegments_IngestBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	identifierBytes := []byte(LogisticsSegments_IngestIdentifier)
	builder.FinishWithFileIdentifier(offset, identifierBytes)
}

func LogisticsSegments_IngestBufferHasIdentifier(buf []byte) bool {
	return flatbuffers.BufferHasIdentifier(buf, LogisticsSegments_IngestIdentifier)
}

func GetSizePrefixedRootAsLogisticsSegments_Ingest(buf []byte, offset flatbuffers.UOffsetT) *LogisticsSegments_Ingest {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &LogisticsSegments_Ingest{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedLogisticsSegments_IngestBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	identifierBytes := []byte(LogisticsSegments_IngestIdentifier)
	builder.FinishSizePrefixedWithFileIdentifier(offset, identifierBytes)
}

func SizePrefixedLogisticsSegments_IngestBufferHasIdentifier(buf []byte) bool {
	return flatbuffers.SizePrefixedBufferHasIdentifier(buf, LogisticsSegments_IngestIdentifier)
}

func (rcv *LogisticsSegments_Ingest) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *LogisticsSegments_Ingest) Table() flatbuffers.Table {
	return rcv._tab
}

/// Used to sequence the segments in the transportation plan.
/// Example: /// Example: 3
/// Constraints: No constraints specified.
func (rcv *LogisticsSegments_Ingest) SegmentNumber() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

/// Used to sequence the segments in the transportation plan.
/// Example: /// Example: 3
/// Constraints: No constraints specified.
func (rcv *LogisticsSegments_Ingest) MutateSegmentNumber(n int32) bool {
	return rcv._tab.MutateInt32Slot(4, n)
}

/// Transportation mode.  AMC airlift, Commercial airlift, Other, or surface transportation.
/// Example: /// Example: A
/// Constraints: Minimum length = 1, Maximum length = 1
func (rcv *LogisticsSegments_Ingest) ModeCode() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Transportation mode.  AMC airlift, Commercial airlift, Other, or surface transportation.
/// Example: /// Example: A
/// Constraints: Minimum length = 1, Maximum length = 1
/// The type of mission (e.g. SAAM, CHNL, etc.).
/// Example: /// Example: SAAM
/// Constraints: Minimum length = 0, Maximum length = 6
func (rcv *LogisticsSegments_Ingest) MissionType() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The type of mission (e.g. SAAM, CHNL, etc.).
/// Example: /// Example: SAAM
/// Constraints: Minimum length = 0, Maximum length = 6
/// The unique identifier of the mission to which this logistics record is assigned.
/// Example: /// Example: EXAMPLE-UUID
/// Constraints: Minimum length = 0, Maximum length = 32
func (rcv *LogisticsSegments_Ingest) IdMission() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The unique identifier of the mission to which this logistics record is assigned.
/// Example: /// Example: EXAMPLE-UUID
/// Constraints: Minimum length = 0, Maximum length = 32
/// The GDSS mission ID for this segment.
/// Example: /// Example: 2001101RF01202307062205
/// Constraints: Minimum length = 0, Maximum length = 24
func (rcv *LogisticsSegments_Ingest) ExtMissionId() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The GDSS mission ID for this segment.
/// Example: /// Example: 2001101RF01202307062205
/// Constraints: Minimum length = 0, Maximum length = 24
/// The user generated identifier for an air mission subgroup.
/// Example: /// Example: TAM308901196
/// Constraints: Minimum length = 0, Maximum length = 12
func (rcv *LogisticsSegments_Ingest) MissionNumber() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The user generated identifier for an air mission subgroup.
/// Example: /// Example: TAM308901196
/// Constraints: Minimum length = 0, Maximum length = 12
/// Start air mission itinerary point identifier.
/// Example: /// Example: 200
/// Constraints: No constraints specified.
func (rcv *LogisticsSegments_Ingest) Itin() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

/// Start air mission itinerary point identifier.
/// Example: /// Example: 200
/// Constraints: No constraints specified.
func (rcv *LogisticsSegments_Ingest) MutateItin(n int32) bool {
	return rcv._tab.MutateInt32Slot(16, n)
}

/// The identifier that represents a specific aircraft within an aircraft type.
/// Example: /// Example: N819AX
/// Constraints: Minimum length = 0, Maximum length = 7
func (rcv *LogisticsSegments_Ingest) SegTailNumber() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(18))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The identifier that represents a specific aircraft within an aircraft type.
/// Example: /// Example: N819AX
/// Constraints: Minimum length = 0, Maximum length = 7
/// The aircraft Model Design Series (MDS) designation (e.g. E-2C HAWKEYE, F-15 EAGLE, KC-130 HERCULES, etc.) of this aircraft. Intended as, but not constrained to, MIL-STD-6016 environment dependent specific type designations.
/// Example: /// Example: B7772E
/// Constraints: Minimum length = 0, Maximum length = 30
func (rcv *LogisticsSegments_Ingest) SegAircraftMds() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(20))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The aircraft Model Design Series (MDS) designation (e.g. E-2C HAWKEYE, F-15 EAGLE, KC-130 HERCULES, etc.) of this aircraft. Intended as, but not constrained to, MIL-STD-6016 environment dependent specific type designations.
/// Example: /// Example: B7772E
/// Constraints: Minimum length = 0, Maximum length = 30
/// Airport ICAO departure code.
/// Example: /// Example: PHIK
/// Constraints: Minimum length = 0, Maximum length = 4
func (rcv *LogisticsSegments_Ingest) DepartureIcao() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(22))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Airport ICAO departure code.
/// Example: /// Example: PHIK
/// Constraints: Minimum length = 0, Maximum length = 4
/// Actual departure time to the segment destination, in ISO 8601 UTC format with millisecond precision.
/// Example: /// Example: 2023-07-17T19:20:00.123Z
/// Constraints: No constraints specified.
func (rcv *LogisticsSegments_Ingest) SegActDepTime() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(24))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Actual departure time to the segment destination, in ISO 8601 UTC format with millisecond precision.
/// Example: /// Example: 2023-07-17T19:20:00.123Z
/// Constraints: No constraints specified.
/// Airport ICAO arrival code.
/// Example: /// Example: YBCS
/// Constraints: Minimum length = 0, Maximum length = 4
func (rcv *LogisticsSegments_Ingest) ArrivalIcao() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(26))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Airport ICAO arrival code.
/// Example: /// Example: YBCS
/// Constraints: Minimum length = 0, Maximum length = 4
/// Actual arrival time to segment destination, in ISO 8601 UTC format with millisecond precision.
/// Example: /// Example: 2023-07-17T19:20:00.123Z
/// Constraints: No constraints specified.
func (rcv *LogisticsSegments_Ingest) SegActArrTime() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(28))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Actual arrival time to segment destination, in ISO 8601 UTC format with millisecond precision.
/// Example: /// Example: 2023-07-17T19:20:00.123Z
/// Constraints: No constraints specified.
/// GC. LGTPS_C_DT_EST_DEP.  GD2: Estimated departure time from the segment origin. Only supplied when the segment is not attached to a Mission, otherwise the ETD is derived from the Mission segment origin point. This datetime should be in ISO 8601 UTC format with millisecond precision.
/// Example: /// Example: 2023-07-17T19:20:00.123Z
/// Constraints: No constraints specified.
func (rcv *LogisticsSegments_Ingest) SegEstDepTime() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(30))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// GC. LGTPS_C_DT_EST_DEP.  GD2: Estimated departure time from the segment origin. Only supplied when the segment is not attached to a Mission, otherwise the ETD is derived from the Mission segment origin point. This datetime should be in ISO 8601 UTC format with millisecond precision.
/// Example: /// Example: 2023-07-17T19:20:00.123Z
/// Constraints: No constraints specified.
/// GC. LGTPS_C_DT_EST_ARR.  GD2: Estimated arrival time to the segment destination. Only supplied when the segment is not attached to a Mission, otherwise the ETA is derived from the Mission segment destination point. This datetime should be in ISO 8601 UTC format with millisecond precision.
/// Example: /// Example: 2023-07-17T19:20:00.123Z
/// Constraints: No constraints specified.
func (rcv *LogisticsSegments_Ingest) SegEstArrTime() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(32))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// GC. LGTPS_C_DT_EST_ARR.  GD2: Estimated arrival time to the segment destination. Only supplied when the segment is not attached to a Mission, otherwise the ETA is derived from the Mission segment destination point. This datetime should be in ISO 8601 UTC format with millisecond precision.
/// Example: /// Example: 2023-07-17T19:20:00.123Z
/// Constraints: No constraints specified.
func LogisticsSegments_IngestStart(builder *flatbuffers.Builder) {
	builder.StartObject(15)
}
func LogisticsSegments_IngestAddSegmentNumber(builder *flatbuffers.Builder, segmentNumber int32) {
	builder.PrependInt32Slot(0, segmentNumber, 0)
}
func LogisticsSegments_IngestAddModeCode(builder *flatbuffers.Builder, modeCode flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(modeCode), 0)
}
func LogisticsSegments_IngestAddMissionType(builder *flatbuffers.Builder, missionType flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(missionType), 0)
}
func LogisticsSegments_IngestAddIdMission(builder *flatbuffers.Builder, idMission flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(3, flatbuffers.UOffsetT(idMission), 0)
}
func LogisticsSegments_IngestAddExtMissionId(builder *flatbuffers.Builder, extMissionId flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(4, flatbuffers.UOffsetT(extMissionId), 0)
}
func LogisticsSegments_IngestAddMissionNumber(builder *flatbuffers.Builder, missionNumber flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(5, flatbuffers.UOffsetT(missionNumber), 0)
}
func LogisticsSegments_IngestAddItin(builder *flatbuffers.Builder, itin int32) {
	builder.PrependInt32Slot(6, itin, 0)
}
func LogisticsSegments_IngestAddSegTailNumber(builder *flatbuffers.Builder, segTailNumber flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(7, flatbuffers.UOffsetT(segTailNumber), 0)
}
func LogisticsSegments_IngestAddSegAircraftMds(builder *flatbuffers.Builder, segAircraftMds flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(8, flatbuffers.UOffsetT(segAircraftMds), 0)
}
func LogisticsSegments_IngestAddDepartureIcao(builder *flatbuffers.Builder, departureIcao flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(9, flatbuffers.UOffsetT(departureIcao), 0)
}
func LogisticsSegments_IngestAddSegActDepTime(builder *flatbuffers.Builder, segActDepTime flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(10, flatbuffers.UOffsetT(segActDepTime), 0)
}
func LogisticsSegments_IngestAddArrivalIcao(builder *flatbuffers.Builder, arrivalIcao flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(11, flatbuffers.UOffsetT(arrivalIcao), 0)
}
func LogisticsSegments_IngestAddSegActArrTime(builder *flatbuffers.Builder, segActArrTime flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(12, flatbuffers.UOffsetT(segActArrTime), 0)
}
func LogisticsSegments_IngestAddSegEstDepTime(builder *flatbuffers.Builder, segEstDepTime flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(13, flatbuffers.UOffsetT(segEstDepTime), 0)
}
func LogisticsSegments_IngestAddSegEstArrTime(builder *flatbuffers.Builder, segEstArrTime flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(14, flatbuffers.UOffsetT(segEstArrTime), 0)
}
func LogisticsSegments_IngestEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
