// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package Channel_Ingest

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

/// /// Channel information on a particular transponder.
type Channel_Ingest struct {
	_tab flatbuffers.Table
}

const Channel_IngestIdentifier = "CHAN"

func GetRootAsChannel_Ingest(buf []byte, offset flatbuffers.UOffsetT) *Channel_Ingest {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &Channel_Ingest{}
	x.Init(buf, n+offset)
	return x
}

func FinishChannel_IngestBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	identifierBytes := []byte(Channel_IngestIdentifier)
	builder.FinishWithFileIdentifier(offset, identifierBytes)
}

func Channel_IngestBufferHasIdentifier(buf []byte) bool {
	return flatbuffers.BufferHasIdentifier(buf, Channel_IngestIdentifier)
}

func GetSizePrefixedRootAsChannel_Ingest(buf []byte, offset flatbuffers.UOffsetT) *Channel_Ingest {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &Channel_Ingest{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedChannel_IngestBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	identifierBytes := []byte(Channel_IngestIdentifier)
	builder.FinishSizePrefixedWithFileIdentifier(offset, identifierBytes)
}

func SizePrefixedChannel_IngestBufferHasIdentifier(buf []byte) bool {
	return flatbuffers.SizePrefixedBufferHasIdentifier(buf, Channel_IngestIdentifier)
}

func (rcv *Channel_Ingest) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *Channel_Ingest) Table() flatbuffers.Table {
	return rcv._tab
}

/// Unique identifier of the record, auto-generated by the system.
/// Example: /// Example: CHANNEL-ID
/// Constraints: Minimum length = 1, Maximum length = 36
func (rcv *Channel_Ingest) Id() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Unique identifier of the record, auto-generated by the system.
/// Example: /// Example: CHANNEL-ID
/// Constraints: Minimum length = 1, Maximum length = 36
/// ID of the parent transponder object for this Channel.
/// Example: /// Example: REF-TRANSPONDER-ID
/// Constraints: Minimum length = 1, Maximum length = 36
func (rcv *Channel_Ingest) IdTransponder() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// ID of the parent transponder object for this Channel.
/// Example: /// Example: REF-TRANSPONDER-ID
/// Constraints: Minimum length = 1, Maximum length = 36
/// Channel name.
/// Example: /// Example: Example name
/// Constraints: Minimum length = 1, Maximum length = 128
func (rcv *Channel_Ingest) Name() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Channel name.
/// Example: /// Example: Example name
/// Constraints: Minimum length = 1, Maximum length = 128
/// Classification marking of the data in IC/CAPCO Portion-marked format.
/// Example: /// Example: U
/// Constraints: Minimum length = 1, Maximum length = 128
func (rcv *Channel_Ingest) ClassificationMarking() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Classification marking of the data in IC/CAPCO Portion-marked format.
/// Example: /// Example: U
/// Constraints: Minimum length = 1, Maximum length = 128
/// Channel type.
/// Example: /// Example: Example type
/// Constraints: Minimum length = 0, Maximum length = 45
func (rcv *Channel_Ingest) Type() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Channel type.
/// Example: /// Example: Example type
/// Constraints: Minimum length = 0, Maximum length = 45
/// Identifier of the particular beam for this channel.
/// Example: /// Example: REF-BEAM-ID
/// Constraints: Minimum length = 0, Maximum length = 36
func (rcv *Channel_Ingest) IdBeam() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Identifier of the particular beam for this channel.
/// Example: /// Example: REF-BEAM-ID
/// Constraints: Minimum length = 0, Maximum length = 36
/// The antenna beam ID of the particular beam for this channel.  beamName is not unique across payloads.
/// Example: /// Example: B8VD
/// Constraints: Minimum length = 0, Maximum length = 36
func (rcv *Channel_Ingest) BeamName() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The antenna beam ID of the particular beam for this channel.  beamName is not unique across payloads.
/// Example: /// Example: B8VD
/// Constraints: Minimum length = 0, Maximum length = 36
/// ID of the RF Band object for this channel.
/// Example: /// Example: REF-RFBAND-ID
/// Constraints: Minimum length = 0, Maximum length = 36
func (rcv *Channel_Ingest) IdRfband() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(18))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// ID of the RF Band object for this channel.
/// Example: /// Example: REF-RFBAND-ID
/// Constraints: Minimum length = 0, Maximum length = 36
/// Channel encryption.
/// Example: /// Example: Example encryption
/// Constraints: Minimum length = 0, Maximum length = 45
func (rcv *Channel_Ingest) Encryption() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(20))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Channel encryption.
/// Example: /// Example: Example encryption
/// Constraints: Minimum length = 0, Maximum length = 45
/// Pkg.
/// Example: /// Example: Example pkg
/// Constraints: Minimum length = 0, Maximum length = 45
func (rcv *Channel_Ingest) Pkg() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(22))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Pkg.
/// Example: /// Example: Example pkg
/// Constraints: Minimum length = 0, Maximum length = 45
/// Res.
/// Example: /// Example: Example res
/// Constraints: Minimum length = 0, Maximum length = 45
func (rcv *Channel_Ingest) Res() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(24))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Res.
/// Example: /// Example: Example res
/// Constraints: Minimum length = 0, Maximum length = 45
/// Channel compression.
/// Example: /// Example: Example compression
/// Constraints: Minimum length = 0, Maximum length = 45
func (rcv *Channel_Ingest) Compression() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(26))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Channel compression.
/// Example: /// Example: Example compression
/// Constraints: Minimum length = 0, Maximum length = 45
/// Channel vPid.
/// Example: /// Example: VP-ID
/// Constraints: Minimum length = 0, Maximum length = 45
func (rcv *Channel_Ingest) Vpid() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(28))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Channel vPid.
/// Example: /// Example: VP-ID
/// Constraints: Minimum length = 0, Maximum length = 45
/// Channel aPid.
/// Example: /// Example: AP-ID
/// Constraints: Minimum length = 0, Maximum length = 45
func (rcv *Channel_Ingest) Apid() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(30))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Channel aPid.
/// Example: /// Example: AP-ID
/// Constraints: Minimum length = 0, Maximum length = 45
/// SID.
/// Example: /// Example: S-ID
/// Constraints: Minimum length = 0, Maximum length = 45
func (rcv *Channel_Ingest) Sid() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(32))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// SID.
/// Example: /// Example: S-ID
/// Constraints: Minimum length = 0, Maximum length = 45
/// Owner.
/// Example: /// Example: example_owner
/// Constraints: Minimum length = 0, Maximum length = 128
func (rcv *Channel_Ingest) Owner() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(34))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Owner.
/// Example: /// Example: example_owner
/// Constraints: Minimum length = 0, Maximum length = 128
/// Source of the data.
/// Example: /// Example: system.source
/// Constraints: Minimum length = 1, Maximum length = 64
func (rcv *Channel_Ingest) Source() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(36))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Source of the data.
/// Example: /// Example: system.source
/// Constraints: Minimum length = 1, Maximum length = 64
/// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
/// Example: /// Example: example_origin
/// Constraints: Minimum length = 0, Maximum length = 64
func (rcv *Channel_Ingest) Origin() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(38))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
/// Example: /// Example: example_origin
/// Constraints: Minimum length = 0, Maximum length = 64
/// The originating source network on which this record was created, auto-populated by the system.
/// Example: /// Example: ORIG
/// Constraints: Minimum length = 1, Maximum length = 32
func (rcv *Channel_Ingest) OrigNetwork() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(40))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The originating source network on which this record was created, auto-populated by the system.
/// Example: /// Example: ORIG
/// Constraints: Minimum length = 1, Maximum length = 32
/// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
/// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
/// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
/// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
/// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
/// Example: /// Example: TEST
/// Constraints: Minimum length = 1, Maximum length = 32
func (rcv *Channel_Ingest) DataMode() Channel_Ingest_dataMode_Enum {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(42))
	if o != 0 {
		return Channel_Ingest_dataMode_Enum(rcv._tab.GetInt8(o + rcv._tab.Pos))
	}
	return 0
}

/// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
/// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
/// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
/// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
/// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
/// Example: /// Example: TEST
/// Constraints: Minimum length = 1, Maximum length = 32
func (rcv *Channel_Ingest) MutateDataMode(n Channel_Ingest_dataMode_Enum) bool {
	return rcv._tab.MutateInt8Slot(42, int8(n))
}

/// Time the row was created in the database, auto-populated by the system.
/// Example: /// Example: 2018-01-01T16:00:00.123Z
/// Constraints: No constraints specified.
func (rcv *Channel_Ingest) CreatedAt() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(44))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Time the row was created in the database, auto-populated by the system.
/// Example: /// Example: 2018-01-01T16:00:00.123Z
/// Constraints: No constraints specified.
/// Application user who created the row in the database, auto-populated by the system.
/// Example: /// Example: some.user
/// Constraints: Minimum length = 1, Maximum length = 64
func (rcv *Channel_Ingest) CreatedBy() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(46))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Application user who created the row in the database, auto-populated by the system.
/// Example: /// Example: some.user
/// Constraints: Minimum length = 1, Maximum length = 64
func Channel_IngestStart(builder *flatbuffers.Builder) {
	builder.StartObject(22)
}
func Channel_IngestAddId(builder *flatbuffers.Builder, id flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(id), 0)
}
func Channel_IngestAddIdTransponder(builder *flatbuffers.Builder, idTransponder flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(idTransponder), 0)
}
func Channel_IngestAddName(builder *flatbuffers.Builder, name flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(name), 0)
}
func Channel_IngestAddClassificationMarking(builder *flatbuffers.Builder, classificationMarking flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(3, flatbuffers.UOffsetT(classificationMarking), 0)
}
func Channel_IngestAddType(builder *flatbuffers.Builder, type_ flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(4, flatbuffers.UOffsetT(type_), 0)
}
func Channel_IngestAddIdBeam(builder *flatbuffers.Builder, idBeam flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(5, flatbuffers.UOffsetT(idBeam), 0)
}
func Channel_IngestAddBeamName(builder *flatbuffers.Builder, beamName flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(6, flatbuffers.UOffsetT(beamName), 0)
}
func Channel_IngestAddIdRfband(builder *flatbuffers.Builder, idRfband flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(7, flatbuffers.UOffsetT(idRfband), 0)
}
func Channel_IngestAddEncryption(builder *flatbuffers.Builder, encryption flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(8, flatbuffers.UOffsetT(encryption), 0)
}
func Channel_IngestAddPkg(builder *flatbuffers.Builder, pkg flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(9, flatbuffers.UOffsetT(pkg), 0)
}
func Channel_IngestAddRes(builder *flatbuffers.Builder, res flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(10, flatbuffers.UOffsetT(res), 0)
}
func Channel_IngestAddCompression(builder *flatbuffers.Builder, compression flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(11, flatbuffers.UOffsetT(compression), 0)
}
func Channel_IngestAddVpid(builder *flatbuffers.Builder, vpid flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(12, flatbuffers.UOffsetT(vpid), 0)
}
func Channel_IngestAddApid(builder *flatbuffers.Builder, apid flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(13, flatbuffers.UOffsetT(apid), 0)
}
func Channel_IngestAddSid(builder *flatbuffers.Builder, sid flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(14, flatbuffers.UOffsetT(sid), 0)
}
func Channel_IngestAddOwner(builder *flatbuffers.Builder, owner flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(15, flatbuffers.UOffsetT(owner), 0)
}
func Channel_IngestAddSource(builder *flatbuffers.Builder, source flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(16, flatbuffers.UOffsetT(source), 0)
}
func Channel_IngestAddOrigin(builder *flatbuffers.Builder, origin flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(17, flatbuffers.UOffsetT(origin), 0)
}
func Channel_IngestAddOrigNetwork(builder *flatbuffers.Builder, origNetwork flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(18, flatbuffers.UOffsetT(origNetwork), 0)
}
func Channel_IngestAddDataMode(builder *flatbuffers.Builder, dataMode Channel_Ingest_dataMode_Enum) {
	builder.PrependInt8Slot(19, int8(dataMode), 0)
}
func Channel_IngestAddCreatedAt(builder *flatbuffers.Builder, createdAt flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(20, flatbuffers.UOffsetT(createdAt), 0)
}
func Channel_IngestAddCreatedBy(builder *flatbuffers.Builder, createdBy flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(21, flatbuffers.UOffsetT(createdBy), 0)
}
func Channel_IngestEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
