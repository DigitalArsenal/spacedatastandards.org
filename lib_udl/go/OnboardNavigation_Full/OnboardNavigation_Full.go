// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package OnboardNavigation_Full

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

/// /// These services provide spacecraft positional data derived from on-board navigational sensors.  Navigational points are provided in kilometers and in a user specified reference frame, with ECI J2K being preferred.
type OnboardNavigation_Full struct {
	_tab flatbuffers.Table
}

const OnboardNavigation_FullIdentifier = "ONBO"

func GetRootAsOnboardNavigation_Full(buf []byte, offset flatbuffers.UOffsetT) *OnboardNavigation_Full {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &OnboardNavigation_Full{}
	x.Init(buf, n+offset)
	return x
}

func FinishOnboardNavigation_FullBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	identifierBytes := []byte(OnboardNavigation_FullIdentifier)
	builder.FinishWithFileIdentifier(offset, identifierBytes)
}

func OnboardNavigation_FullBufferHasIdentifier(buf []byte) bool {
	return flatbuffers.BufferHasIdentifier(buf, OnboardNavigation_FullIdentifier)
}

func GetSizePrefixedRootAsOnboardNavigation_Full(buf []byte, offset flatbuffers.UOffsetT) *OnboardNavigation_Full {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &OnboardNavigation_Full{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedOnboardNavigation_FullBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	identifierBytes := []byte(OnboardNavigation_FullIdentifier)
	builder.FinishSizePrefixedWithFileIdentifier(offset, identifierBytes)
}

func SizePrefixedOnboardNavigation_FullBufferHasIdentifier(buf []byte) bool {
	return flatbuffers.SizePrefixedBufferHasIdentifier(buf, OnboardNavigation_FullIdentifier)
}

func (rcv *OnboardNavigation_Full) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *OnboardNavigation_Full) Table() flatbuffers.Table {
	return rcv._tab
}

/// Unique identifier of the record, auto-generated by the system.
/// Example: /// Example: ONBOARD-NAVIGATION-ID
/// Constraints: Minimum length = 0, Maximum length = 36
func (rcv *OnboardNavigation_Full) Id() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Unique identifier of the record, auto-generated by the system.
/// Example: /// Example: ONBOARD-NAVIGATION-ID
/// Constraints: Minimum length = 0, Maximum length = 36
/// Classification marking of the data in IC/CAPCO Portion-marked format.
/// Example: /// Example: U
/// Constraints: Minimum length = 1, Maximum length = 128
func (rcv *OnboardNavigation_Full) ClassificationMarking() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Classification marking of the data in IC/CAPCO Portion-marked format.
/// Example: /// Example: U
/// Constraints: Minimum length = 1, Maximum length = 128
/// Unique identifier of the primary satellite on-orbit object.
/// Example: /// Example: ONORBIT-ID
/// Constraints: Minimum length = 0, Maximum length = 36
func (rcv *OnboardNavigation_Full) IdOnOrbit() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Unique identifier of the primary satellite on-orbit object.
/// Example: /// Example: ONORBIT-ID
/// Constraints: Minimum length = 0, Maximum length = 36
/// Satellite/catalog number of the target on-orbit object.
/// Example: /// Example: 101
/// Constraints: No constraints specified.
func (rcv *OnboardNavigation_Full) SatNo() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

/// Satellite/catalog number of the target on-orbit object.
/// Example: /// Example: 101
/// Constraints: No constraints specified.
func (rcv *OnboardNavigation_Full) MutateSatNo(n int32) bool {
	return rcv._tab.MutateInt32Slot(10, n)
}

/// No description provided.
/// Example: /// Example: No example provided.
/// Constraints: No constraints specified.
func (rcv *OnboardNavigation_Full) OnOrbit() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// No description provided.
/// Example: /// Example: No example provided.
/// Constraints: No constraints specified.
/// Optional identifier provided by the data source to indicate the target object of this record. This may be an internal identifier and not necessarily map to a valid satellite number.
/// Example: /// Example: ORIGOBJECT-ID
/// Constraints: Minimum length = 0, Maximum length = 36
func (rcv *OnboardNavigation_Full) OrigObjectId() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Optional identifier provided by the data source to indicate the target object of this record. This may be an internal identifier and not necessarily map to a valid satellite number.
/// Example: /// Example: ORIGOBJECT-ID
/// Constraints: Minimum length = 0, Maximum length = 36
/// Start time of the sensor data, in ISO 8601 UTC format.
/// Example: /// Example: 2021-07-20T01:02:03.123456Z
/// Constraints: No constraints specified.
func (rcv *OnboardNavigation_Full) StartTime() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Start time of the sensor data, in ISO 8601 UTC format.
/// Example: /// Example: 2021-07-20T01:02:03.123456Z
/// Constraints: No constraints specified.
/// End time of the sensor data, in ISO 8601 UTC format.
/// Example: /// Example: 2021-07-20T01:02:03.123456Z
/// Constraints: No constraints specified.
func (rcv *OnboardNavigation_Full) EndTime() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(18))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// End time of the sensor data, in ISO 8601 UTC format.
/// Example: /// Example: 2021-07-20T01:02:03.123456Z
/// Constraints: No constraints specified.
/// Unique identifier of the parent EphemerisSet, if this data is correlated with an Ephemeris.  If multiple nav sensor records are required, this ID may be associated with each of those records if each is synced to the ephemeris points.
/// Example: /// Example: EPHEMERISSET-ID
/// Constraints: Minimum length = 0, Maximum length = 36
func (rcv *OnboardNavigation_Full) EsId() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(20))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Unique identifier of the parent EphemerisSet, if this data is correlated with an Ephemeris.  If multiple nav sensor records are required, this ID may be associated with each of those records if each is synced to the ephemeris points.
/// Example: /// Example: EPHEMERISSET-ID
/// Constraints: Minimum length = 0, Maximum length = 36
/// The name or identifier the star catalog in use.
/// Example: /// Example: STAR-CAT-NAME
/// Constraints: Minimum length = 0, Maximum length = 24
func (rcv *OnboardNavigation_Full) StarCatName() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(22))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The name or identifier the star catalog in use.
/// Example: /// Example: STAR-CAT-NAME
/// Constraints: Minimum length = 0, Maximum length = 24
/// The last load time of the current star catalog onboard this spacecraft.
/// Example: /// Example: 2021-07-21T01:02:03.123Z
/// Constraints: No constraints specified.
func (rcv *OnboardNavigation_Full) StarCatLoadTime() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(24))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The last load time of the current star catalog onboard this spacecraft.
/// Example: /// Example: 2021-07-21T01:02:03.123Z
/// Constraints: No constraints specified.
/// Unique identifier of the last onboard state vector.
/// Example: /// Example: STATE-VECTOR-ID
/// Constraints: Minimum length = 0, Maximum length = 36
func (rcv *OnboardNavigation_Full) IdStateVector() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(26))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Unique identifier of the last onboard state vector.
/// Example: /// Example: STATE-VECTOR-ID
/// Constraints: Minimum length = 0, Maximum length = 36
/// Array of epochs of the observations, in ISO 8601 UTC format.  The epochs are assumed to correspond to all sensor data in this record.  If sensors do not share a common epoch then separate records should be generated.
/// Example: /// Example: ['2021-07-21T01:02:03.120003Z']
/// Constraints: No constraints specified.
func (rcv *OnboardNavigation_Full) Ts(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(28))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *OnboardNavigation_Full) TsLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(28))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

/// Array of epochs of the observations, in ISO 8601 UTC format.  The epochs are assumed to correspond to all sensor data in this record.  If sensors do not share a common epoch then separate records should be generated.
/// Example: /// Example: ['2021-07-21T01:02:03.120003Z']
/// Constraints: No constraints specified.
/// The reference frame in which the sensor derived positions are provided. If the referenceFrame is null it is assumed to be J2000.  Note that this frame is assumed to apply to all of the sensor data in this record.  If onboard sensors process positional estimates in different frames then separate records should be generated.
/// Example: /// Example: J2000
/// Constraints: Minimum length = 0, Maximum length = 24
func (rcv *OnboardNavigation_Full) ReferenceFrame() OnboardNavigation_Full_referenceFrame_Enum {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(30))
	if o != 0 {
		return OnboardNavigation_Full_referenceFrame_Enum(rcv._tab.GetInt8(o + rcv._tab.Pos))
	}
	return 0
}

/// The reference frame in which the sensor derived positions are provided. If the referenceFrame is null it is assumed to be J2000.  Note that this frame is assumed to apply to all of the sensor data in this record.  If onboard sensors process positional estimates in different frames then separate records should be generated.
/// Example: /// Example: J2000
/// Constraints: Minimum length = 0, Maximum length = 24
func (rcv *OnboardNavigation_Full) MutateReferenceFrame(n OnboardNavigation_Full_referenceFrame_Enum) bool {
	return rcv._tab.MutateInt8Slot(30, int8(n))
}

/// Arrays of spacecraft position (X, Y, Z), in km, in the specified referenceFrame, based on the onboard sun sensor, at each epoch.
/// Example: /// Example: [[1.1, 2.2, 3.3]]
/// Constraints: No constraints specified.
func (rcv *OnboardNavigation_Full) SunSensor(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(32))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *OnboardNavigation_Full) SunSensorLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(32))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

/// Arrays of spacecraft position (X, Y, Z), in km, in the specified referenceFrame, based on the onboard sun sensor, at each epoch.
/// Example: /// Example: [[1.1, 2.2, 3.3]]
/// Constraints: No constraints specified.
/// Arrays of spacecraft position (X, Y, Z), in km, in the specified referenceFrame, based on the onboard magnetometer, at each epoch.
/// Example: /// Example: [[1.1, 2.2, 3.3]]
/// Constraints: No constraints specified.
func (rcv *OnboardNavigation_Full) Mag(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(34))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *OnboardNavigation_Full) MagLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(34))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

/// Arrays of spacecraft position (X, Y, Z), in km, in the specified referenceFrame, based on the onboard magnetometer, at each epoch.
/// Example: /// Example: [[1.1, 2.2, 3.3]]
/// Constraints: No constraints specified.
/// Arrays of spacecraft position (X, Y, Z), in km, in the specified referenceFrame, based on the onboard star tracker, at each epoch.
/// Example: /// Example: [[1.1, 2.2, 3.3]]
/// Constraints: No constraints specified.
func (rcv *OnboardNavigation_Full) StarTracker(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(36))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *OnboardNavigation_Full) StarTrackerLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(36))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

/// Arrays of spacecraft position (X, Y, Z), in km, in the specified referenceFrame, based on the onboard star tracker, at each epoch.
/// Example: /// Example: [[1.1, 2.2, 3.3]]
/// Constraints: No constraints specified.
/// Arrays of spacecraft delta position (X, Y, Z), in km, in the specified referenceFrame, between the onboard state and the last accepted sensor position.
/// Example: /// Example: [[1.1, 2.2, 3.3]]
/// Constraints: No constraints specified.
func (rcv *OnboardNavigation_Full) DeltaPos(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(38))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *OnboardNavigation_Full) DeltaPosLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(38))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

/// Arrays of spacecraft delta position (X, Y, Z), in km, in the specified referenceFrame, between the onboard state and the last accepted sensor position.
/// Example: /// Example: [[1.1, 2.2, 3.3]]
/// Constraints: No constraints specified.
/// Time the row was created in the database, auto-populated by the system.
/// Example: /// Example: 2018-01-01T16:00:00.123Z
/// Constraints: No constraints specified.
func (rcv *OnboardNavigation_Full) CreatedAt() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(40))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Time the row was created in the database, auto-populated by the system.
/// Example: /// Example: 2018-01-01T16:00:00.123Z
/// Constraints: No constraints specified.
/// Application user who created the row in the database, auto-populated by the system.
/// Example: /// Example: some.user
/// Constraints: Minimum length = 1, Maximum length = 64
func (rcv *OnboardNavigation_Full) CreatedBy() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(42))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Application user who created the row in the database, auto-populated by the system.
/// Example: /// Example: some.user
/// Constraints: Minimum length = 1, Maximum length = 64
/// Source of the data.
/// Example: /// Example: Bluestaq
/// Constraints: Minimum length = 1, Maximum length = 36
func (rcv *OnboardNavigation_Full) Source() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(44))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Source of the data.
/// Example: /// Example: Bluestaq
/// Constraints: Minimum length = 1, Maximum length = 36
/// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
/// Example: /// Example: THIRD_PARTY_DATASOURCE
/// Constraints: Minimum length = 0, Maximum length = 64
func (rcv *OnboardNavigation_Full) Origin() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(46))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
/// Example: /// Example: THIRD_PARTY_DATASOURCE
/// Constraints: Minimum length = 0, Maximum length = 64
/// The originating source network on which this record was created, auto-populated by the system.
/// Example: /// Example: ORIG
/// Constraints: Minimum length = 1, Maximum length = 32
func (rcv *OnboardNavigation_Full) OrigNetwork() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(48))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The originating source network on which this record was created, auto-populated by the system.
/// Example: /// Example: ORIG
/// Constraints: Minimum length = 1, Maximum length = 32
/// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
/// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
/// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
/// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
/// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
/// Example: /// Example: TEST
/// Constraints: Minimum length = 1, Maximum length = 36
func (rcv *OnboardNavigation_Full) DataMode() OnboardNavigation_Full_dataMode_Enum {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(50))
	if o != 0 {
		return OnboardNavigation_Full_dataMode_Enum(rcv._tab.GetInt8(o + rcv._tab.Pos))
	}
	return 0
}

/// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
/// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
/// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
/// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
/// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
/// Example: /// Example: TEST
/// Constraints: Minimum length = 1, Maximum length = 36
func (rcv *OnboardNavigation_Full) MutateDataMode(n OnboardNavigation_Full_dataMode_Enum) bool {
	return rcv._tab.MutateInt8Slot(50, int8(n))
}

func OnboardNavigation_FullStart(builder *flatbuffers.Builder) {
	builder.StartObject(24)
}
func OnboardNavigation_FullAddId(builder *flatbuffers.Builder, id flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(id), 0)
}
func OnboardNavigation_FullAddClassificationMarking(builder *flatbuffers.Builder, classificationMarking flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(classificationMarking), 0)
}
func OnboardNavigation_FullAddIdOnOrbit(builder *flatbuffers.Builder, idOnOrbit flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(idOnOrbit), 0)
}
func OnboardNavigation_FullAddSatNo(builder *flatbuffers.Builder, satNo int32) {
	builder.PrependInt32Slot(3, satNo, 0)
}
func OnboardNavigation_FullAddOnOrbit(builder *flatbuffers.Builder, onOrbit flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(4, flatbuffers.UOffsetT(onOrbit), 0)
}
func OnboardNavigation_FullAddOrigObjectId(builder *flatbuffers.Builder, origObjectId flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(5, flatbuffers.UOffsetT(origObjectId), 0)
}
func OnboardNavigation_FullAddStartTime(builder *flatbuffers.Builder, startTime flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(6, flatbuffers.UOffsetT(startTime), 0)
}
func OnboardNavigation_FullAddEndTime(builder *flatbuffers.Builder, endTime flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(7, flatbuffers.UOffsetT(endTime), 0)
}
func OnboardNavigation_FullAddEsId(builder *flatbuffers.Builder, esId flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(8, flatbuffers.UOffsetT(esId), 0)
}
func OnboardNavigation_FullAddStarCatName(builder *flatbuffers.Builder, starCatName flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(9, flatbuffers.UOffsetT(starCatName), 0)
}
func OnboardNavigation_FullAddStarCatLoadTime(builder *flatbuffers.Builder, starCatLoadTime flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(10, flatbuffers.UOffsetT(starCatLoadTime), 0)
}
func OnboardNavigation_FullAddIdStateVector(builder *flatbuffers.Builder, idStateVector flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(11, flatbuffers.UOffsetT(idStateVector), 0)
}
func OnboardNavigation_FullAddTs(builder *flatbuffers.Builder, ts flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(12, flatbuffers.UOffsetT(ts), 0)
}
func OnboardNavigation_FullStartTsVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func OnboardNavigation_FullAddReferenceFrame(builder *flatbuffers.Builder, referenceFrame OnboardNavigation_Full_referenceFrame_Enum) {
	builder.PrependInt8Slot(13, int8(referenceFrame), 0)
}
func OnboardNavigation_FullAddSunSensor(builder *flatbuffers.Builder, sunSensor flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(14, flatbuffers.UOffsetT(sunSensor), 0)
}
func OnboardNavigation_FullStartSunSensorVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func OnboardNavigation_FullAddMag(builder *flatbuffers.Builder, mag flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(15, flatbuffers.UOffsetT(mag), 0)
}
func OnboardNavigation_FullStartMagVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func OnboardNavigation_FullAddStarTracker(builder *flatbuffers.Builder, starTracker flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(16, flatbuffers.UOffsetT(starTracker), 0)
}
func OnboardNavigation_FullStartStarTrackerVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func OnboardNavigation_FullAddDeltaPos(builder *flatbuffers.Builder, deltaPos flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(17, flatbuffers.UOffsetT(deltaPos), 0)
}
func OnboardNavigation_FullStartDeltaPosVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func OnboardNavigation_FullAddCreatedAt(builder *flatbuffers.Builder, createdAt flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(18, flatbuffers.UOffsetT(createdAt), 0)
}
func OnboardNavigation_FullAddCreatedBy(builder *flatbuffers.Builder, createdBy flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(19, flatbuffers.UOffsetT(createdBy), 0)
}
func OnboardNavigation_FullAddSource(builder *flatbuffers.Builder, source flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(20, flatbuffers.UOffsetT(source), 0)
}
func OnboardNavigation_FullAddOrigin(builder *flatbuffers.Builder, origin flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(21, flatbuffers.UOffsetT(origin), 0)
}
func OnboardNavigation_FullAddOrigNetwork(builder *flatbuffers.Builder, origNetwork flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(22, flatbuffers.UOffsetT(origNetwork), 0)
}
func OnboardNavigation_FullAddDataMode(builder *flatbuffers.Builder, dataMode OnboardNavigation_Full_dataMode_Enum) {
	builder.PrependInt8Slot(23, int8(dataMode), 0)
}
func OnboardNavigation_FullEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
