// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package NavalFlightOperations_Abridged

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

/// /// Collection that specifies the naval flight operations for this ATO.
type NavalFlightOperations_Abridged struct {
	_tab flatbuffers.Table
}

const NavalFlightOperations_AbridgedIdentifier = "NAVA"

func GetRootAsNavalFlightOperations_Abridged(buf []byte, offset flatbuffers.UOffsetT) *NavalFlightOperations_Abridged {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &NavalFlightOperations_Abridged{}
	x.Init(buf, n+offset)
	return x
}

func FinishNavalFlightOperations_AbridgedBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	identifierBytes := []byte(NavalFlightOperations_AbridgedIdentifier)
	builder.FinishWithFileIdentifier(offset, identifierBytes)
}

func NavalFlightOperations_AbridgedBufferHasIdentifier(buf []byte) bool {
	return flatbuffers.BufferHasIdentifier(buf, NavalFlightOperations_AbridgedIdentifier)
}

func GetSizePrefixedRootAsNavalFlightOperations_Abridged(buf []byte, offset flatbuffers.UOffsetT) *NavalFlightOperations_Abridged {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &NavalFlightOperations_Abridged{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedNavalFlightOperations_AbridgedBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	identifierBytes := []byte(NavalFlightOperations_AbridgedIdentifier)
	builder.FinishSizePrefixedWithFileIdentifier(offset, identifierBytes)
}

func SizePrefixedNavalFlightOperations_AbridgedBufferHasIdentifier(buf []byte) bool {
	return flatbuffers.SizePrefixedBufferHasIdentifier(buf, NavalFlightOperations_AbridgedIdentifier)
}

func (rcv *NavalFlightOperations_Abridged) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *NavalFlightOperations_Abridged) Table() flatbuffers.Table {
	return rcv._tab
}

/// The name of a ship or maritime vessel. Specify UNKNOWN if name is not known.
/// Example: /// Example: USS WASP
/// Constraints: Minimum length = 1, Maximum length = 48
func (rcv *NavalFlightOperations_Abridged) ShipName() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The name of a ship or maritime vessel. Specify UNKNOWN if name is not known.
/// Example: /// Example: USS WASP
/// Constraints: Minimum length = 1, Maximum length = 48
/// The time when flight operations begin in ISO8601 UTC format with millisecond precision.
/// Example: /// Example: 2021-02-25T12:00:00.123Z
/// Constraints: No constraints specified.
func (rcv *NavalFlightOperations_Abridged) FltOpStart() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The time when flight operations begin in ISO8601 UTC format with millisecond precision.
/// Example: /// Example: 2021-02-25T12:00:00.123Z
/// Constraints: No constraints specified.
/// The time when flight operations end in ISO8601 UTC format with millisecond precision.
/// Example: /// Example: 2021-02-25T12:00:00.123Z
/// Constraints: No constraints specified.
func (rcv *NavalFlightOperations_Abridged) FltOpStop() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The time when flight operations end in ISO8601 UTC format with millisecond precision.
/// Example: /// Example: 2021-02-25T12:00:00.123Z
/// Constraints: No constraints specified.
/// An array of times at which an aircraft will be launched and/or recovered in ISO8601 UTC format with millisecond precision.
/// Example: /// Example: ['2021-02-25T12:00:00.123Z']
/// Constraints: No constraints specified.
func (rcv *NavalFlightOperations_Abridged) SchdLaunchRcvyTime(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *NavalFlightOperations_Abridged) SchdLaunchRcvyTimeLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

/// An array of times at which an aircraft will be launched and/or recovered in ISO8601 UTC format with millisecond precision.
/// Example: /// Example: ['2021-02-25T12:00:00.123Z']
/// Constraints: No constraints specified.
func NavalFlightOperations_AbridgedStart(builder *flatbuffers.Builder) {
	builder.StartObject(4)
}
func NavalFlightOperations_AbridgedAddShipName(builder *flatbuffers.Builder, shipName flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(shipName), 0)
}
func NavalFlightOperations_AbridgedAddFltOpStart(builder *flatbuffers.Builder, fltOpStart flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(fltOpStart), 0)
}
func NavalFlightOperations_AbridgedAddFltOpStop(builder *flatbuffers.Builder, fltOpStop flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(fltOpStop), 0)
}
func NavalFlightOperations_AbridgedAddSchdLaunchRcvyTime(builder *flatbuffers.Builder, schdLaunchRcvyTime flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(3, flatbuffers.UOffsetT(schdLaunchRcvyTime), 0)
}
func NavalFlightOperations_AbridgedStartSchdLaunchRcvyTimeVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func NavalFlightOperations_AbridgedEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
