// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package AircraftMissionLocationTasking_Abridged

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

/// /// Collection of aircraft mission location information for this aircraft mission tasking.
type AircraftMissionLocationTasking_Abridged struct {
	_tab flatbuffers.Table
}

const AircraftMissionLocationTasking_AbridgedIdentifier = "AIRC"

func GetRootAsAircraftMissionLocationTasking_Abridged(buf []byte, offset flatbuffers.UOffsetT) *AircraftMissionLocationTasking_Abridged {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &AircraftMissionLocationTasking_Abridged{}
	x.Init(buf, n+offset)
	return x
}

func FinishAircraftMissionLocationTasking_AbridgedBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	identifierBytes := []byte(AircraftMissionLocationTasking_AbridgedIdentifier)
	builder.FinishWithFileIdentifier(offset, identifierBytes)
}

func AircraftMissionLocationTasking_AbridgedBufferHasIdentifier(buf []byte) bool {
	return flatbuffers.BufferHasIdentifier(buf, AircraftMissionLocationTasking_AbridgedIdentifier)
}

func GetSizePrefixedRootAsAircraftMissionLocationTasking_Abridged(buf []byte, offset flatbuffers.UOffsetT) *AircraftMissionLocationTasking_Abridged {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &AircraftMissionLocationTasking_Abridged{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedAircraftMissionLocationTasking_AbridgedBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	identifierBytes := []byte(AircraftMissionLocationTasking_AbridgedIdentifier)
	builder.FinishSizePrefixedWithFileIdentifier(offset, identifierBytes)
}

func SizePrefixedAircraftMissionLocationTasking_AbridgedBufferHasIdentifier(buf []byte) bool {
	return flatbuffers.SizePrefixedBufferHasIdentifier(buf, AircraftMissionLocationTasking_AbridgedIdentifier)
}

func (rcv *AircraftMissionLocationTasking_Abridged) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *AircraftMissionLocationTasking_Abridged) Table() flatbuffers.Table {
	return rcv._tab
}

/// The start time of this mission in ISO 8601 UTC format with millisecond precision.
/// Example: /// Example: 2021-10-25T12:00:00.123Z
/// Constraints: No constraints specified.
func (rcv *AircraftMissionLocationTasking_Abridged) StartTime() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The start time of this mission in ISO 8601 UTC format with millisecond precision.
/// Example: /// Example: 2021-10-25T12:00:00.123Z
/// Constraints: No constraints specified.
/// The end time of this mission in ISO 8601 UTC format with millisecond precision.
/// Example: /// Example: 2021-10-25T12:00:00.123Z
/// Constraints: No constraints specified.
func (rcv *AircraftMissionLocationTasking_Abridged) EndTime() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The end time of this mission in ISO 8601 UTC format with millisecond precision.
/// Example: /// Example: 2021-10-25T12:00:00.123Z
/// Constraints: No constraints specified.
/// The name that identifies the location at which this mission is to be performed. This can be the name of a general target area, orbit, cap point, station, etc.
/// Example: /// Example: KLSV
/// Constraints: Minimum length = 0, Maximum length = 24
func (rcv *AircraftMissionLocationTasking_Abridged) MsnLocName() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The name that identifies the location at which this mission is to be performed. This can be the name of a general target area, orbit, cap point, station, etc.
/// Example: /// Example: KLSV
/// Constraints: Minimum length = 0, Maximum length = 24
/// The altitude for this mission represented as hundreds of feet above MSL.
/// Example: /// Example: 210
/// Constraints: No constraints specified.
func (rcv *AircraftMissionLocationTasking_Abridged) Alt() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

/// The altitude for this mission represented as hundreds of feet above MSL.
/// Example: /// Example: 210
/// Constraints: No constraints specified.
func (rcv *AircraftMissionLocationTasking_Abridged) MutateAlt(n int32) bool {
	return rcv._tab.MutateInt32Slot(10, n)
}

/// The code for the priority assigned to this mission.
/// Example: /// Example: 1A
/// Constraints: Minimum length = 0, Maximum length = 8
func (rcv *AircraftMissionLocationTasking_Abridged) AirMsnPri() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The code for the priority assigned to this mission.
/// Example: /// Example: 1A
/// Constraints: Minimum length = 0, Maximum length = 8
/// The radius of the circle around the location being reported in feet.
/// Example: /// Example: 1000
/// Constraints: No constraints specified.
func (rcv *AircraftMissionLocationTasking_Abridged) AreaGeoRad() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

/// The radius of the circle around the location being reported in feet.
/// Example: /// Example: 1000
/// Constraints: No constraints specified.
func (rcv *AircraftMissionLocationTasking_Abridged) MutateAreaGeoRad(n int32) bool {
	return rcv._tab.MutateInt32Slot(14, n)
}

/// The location name for this mission.
/// Example: /// Example: PT ALFA
/// Constraints: Minimum length = 0, Maximum length = 36
func (rcv *AircraftMissionLocationTasking_Abridged) MsnLocPtName() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The location name for this mission.
/// Example: /// Example: PT ALFA
/// Constraints: Minimum length = 0, Maximum length = 36
/// WGS-84 latitude of the mission location, in degrees. -90 to 90 degrees (negative values south of equator) for this tasked air mission.
/// Example: /// Example: 35.123
/// Constraints: No constraints specified.
func (rcv *AircraftMissionLocationTasking_Abridged) MsnLocPtLat() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(18))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// WGS-84 latitude of the mission location, in degrees. -90 to 90 degrees (negative values south of equator) for this tasked air mission.
/// Example: /// Example: 35.123
/// Constraints: No constraints specified.
func (rcv *AircraftMissionLocationTasking_Abridged) MutateMsnLocPtLat(n float64) bool {
	return rcv._tab.MutateFloat64Slot(18, n)
}

/// WGS-84 longitude of the mission location, in degrees. -180 to 180 degrees (negative values west of Prime Meridian) for this tasked air mission.
/// Example: /// Example: 79.01
/// Constraints: No constraints specified.
func (rcv *AircraftMissionLocationTasking_Abridged) MsnLocPtLon() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(20))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// WGS-84 longitude of the mission location, in degrees. -180 to 180 degrees (negative values west of Prime Meridian) for this tasked air mission.
/// Example: /// Example: 79.01
/// Constraints: No constraints specified.
func (rcv *AircraftMissionLocationTasking_Abridged) MutateMsnLocPtLon(n float64) bool {
	return rcv._tab.MutateFloat64Slot(20, n)
}

/// The alpha-numeric specified location for this mission specified as a bearing angle in degrees relative to true north and a range in nautical miles (NM).
/// Example: /// Example: 330T-PT ALFA-50NM
/// Constraints: Minimum length = 0, Maximum length = 36
func (rcv *AircraftMissionLocationTasking_Abridged) MsnLocPtBarT() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(22))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The alpha-numeric specified location for this mission specified as a bearing angle in degrees relative to true north and a range in nautical miles (NM).
/// Example: /// Example: 330T-PT ALFA-50NM
/// Constraints: Minimum length = 0, Maximum length = 36
func AircraftMissionLocationTasking_AbridgedStart(builder *flatbuffers.Builder) {
	builder.StartObject(10)
}
func AircraftMissionLocationTasking_AbridgedAddStartTime(builder *flatbuffers.Builder, startTime flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(startTime), 0)
}
func AircraftMissionLocationTasking_AbridgedAddEndTime(builder *flatbuffers.Builder, endTime flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(endTime), 0)
}
func AircraftMissionLocationTasking_AbridgedAddMsnLocName(builder *flatbuffers.Builder, msnLocName flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(msnLocName), 0)
}
func AircraftMissionLocationTasking_AbridgedAddAlt(builder *flatbuffers.Builder, alt int32) {
	builder.PrependInt32Slot(3, alt, 0)
}
func AircraftMissionLocationTasking_AbridgedAddAirMsnPri(builder *flatbuffers.Builder, airMsnPri flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(4, flatbuffers.UOffsetT(airMsnPri), 0)
}
func AircraftMissionLocationTasking_AbridgedAddAreaGeoRad(builder *flatbuffers.Builder, areaGeoRad int32) {
	builder.PrependInt32Slot(5, areaGeoRad, 0)
}
func AircraftMissionLocationTasking_AbridgedAddMsnLocPtName(builder *flatbuffers.Builder, msnLocPtName flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(6, flatbuffers.UOffsetT(msnLocPtName), 0)
}
func AircraftMissionLocationTasking_AbridgedAddMsnLocPtLat(builder *flatbuffers.Builder, msnLocPtLat float64) {
	builder.PrependFloat64Slot(7, msnLocPtLat, 0.0)
}
func AircraftMissionLocationTasking_AbridgedAddMsnLocPtLon(builder *flatbuffers.Builder, msnLocPtLon float64) {
	builder.PrependFloat64Slot(8, msnLocPtLon, 0.0)
}
func AircraftMissionLocationTasking_AbridgedAddMsnLocPtBarT(builder *flatbuffers.Builder, msnLocPtBarT flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(9, flatbuffers.UOffsetT(msnLocPtBarT), 0)
}
func AircraftMissionLocationTasking_AbridgedEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
