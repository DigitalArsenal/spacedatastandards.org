// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package Vessel_Abridged

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

/// /// This service provides operations for manipulation and querying of maritime Vessel data. Vessel contains the static data of the specific vessel: mmsi, cruise speed, max speed, etc.
type Vessel_Abridged struct {
	_tab flatbuffers.Table
}

const Vessel_AbridgedIdentifier = "VESS"

func GetRootAsVessel_Abridged(buf []byte, offset flatbuffers.UOffsetT) *Vessel_Abridged {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &Vessel_Abridged{}
	x.Init(buf, n+offset)
	return x
}

func FinishVessel_AbridgedBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	identifierBytes := []byte(Vessel_AbridgedIdentifier)
	builder.FinishWithFileIdentifier(offset, identifierBytes)
}

func Vessel_AbridgedBufferHasIdentifier(buf []byte) bool {
	return flatbuffers.BufferHasIdentifier(buf, Vessel_AbridgedIdentifier)
}

func GetSizePrefixedRootAsVessel_Abridged(buf []byte, offset flatbuffers.UOffsetT) *Vessel_Abridged {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &Vessel_Abridged{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedVessel_AbridgedBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	identifierBytes := []byte(Vessel_AbridgedIdentifier)
	builder.FinishSizePrefixedWithFileIdentifier(offset, identifierBytes)
}

func SizePrefixedVessel_AbridgedBufferHasIdentifier(buf []byte) bool {
	return flatbuffers.SizePrefixedBufferHasIdentifier(buf, Vessel_AbridgedIdentifier)
}

func (rcv *Vessel_Abridged) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *Vessel_Abridged) Table() flatbuffers.Table {
	return rcv._tab
}

/// Unique identifier of the record, auto-generated by the system.
/// Example: /// Example: 0167f577-e06c-358e-85aa-0a07a730bdd0
/// Constraints: Minimum length = 1, Maximum length = 36
func (rcv *Vessel_Abridged) Id() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Unique identifier of the record, auto-generated by the system.
/// Example: /// Example: 0167f577-e06c-358e-85aa-0a07a730bdd0
/// Constraints: Minimum length = 1, Maximum length = 36
/// Classification marking of the data in IC/CAPCO Portion-marked format.
/// Example: /// Example: U
/// Constraints: Minimum length = 1, Maximum length = 128
func (rcv *Vessel_Abridged) ClassificationMarking() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Classification marking of the data in IC/CAPCO Portion-marked format.
/// Example: /// Example: U
/// Constraints: Minimum length = 1, Maximum length = 128
/// Unique identifier of the parent entity. idEntity is required for Put.
/// Example: /// Example: ENTITY-ID
/// Constraints: Minimum length = 0, Maximum length = 36
func (rcv *Vessel_Abridged) IdEntity() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Unique identifier of the parent entity. idEntity is required for Put.
/// Example: /// Example: ENTITY-ID
/// Constraints: Minimum length = 0, Maximum length = 36
/// The original source Id for this vessel.
/// Example: /// Example: 590b5194fc32e75dd00682ba
/// Constraints: Minimum length = 0, Maximum length = 36
func (rcv *Vessel_Abridged) AltVesselId() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The original source Id for this vessel.
/// Example: /// Example: 590b5194fc32e75dd00682ba
/// Constraints: Minimum length = 0, Maximum length = 36
/// The UDL ID of the organization that owns the vessel.
/// Example: /// Example: 0147f777-w09a-835f-85aa-0a07a730fgg0
/// Constraints: Minimum length = 0, Maximum length = 36
func (rcv *Vessel_Abridged) IdOrganization() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The UDL ID of the organization that owns the vessel.
/// Example: /// Example: 0147f777-w09a-835f-85aa-0a07a730fgg0
/// Constraints: Minimum length = 0, Maximum length = 36
/// The name of this vessel. Vessel names that exceed the AIS 20 character are shortened (not truncated) to 15 character-spaces, followed by an underscore and the last 4 characters-spaces of the vessel full name.
/// Example: /// Example: DORNUM
/// Constraints: Minimum length = 0, Maximum length = 24
func (rcv *Vessel_Abridged) VesselName() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The name of this vessel. Vessel names that exceed the AIS 20 character are shortened (not truncated) to 15 character-spaces, followed by an underscore and the last 4 characters-spaces of the vessel full name.
/// Example: /// Example: DORNUM
/// Constraints: Minimum length = 0, Maximum length = 24
/// The reported ship type (e.g. Passenger, Tanker, Cargo, Other, etc.).
/// Example: /// Example: Passenger
/// Constraints: Minimum length = 0, Maximum length = 48
func (rcv *Vessel_Abridged) VesselType() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The reported ship type (e.g. Passenger, Tanker, Cargo, Other, etc.).
/// Example: /// Example: Passenger
/// Constraints: Minimum length = 0, Maximum length = 48
/// The common name for a group of ships with similar design, usually named for the first vessel of the class.
/// Example: /// Example: Nimitz
/// Constraints: Minimum length = 0, Maximum length = 64
func (rcv *Vessel_Abridged) VesselClass() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(18))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The common name for a group of ships with similar design, usually named for the first vessel of the class.
/// Example: /// Example: Nimitz
/// Constraints: Minimum length = 0, Maximum length = 64
/// Further description or explanation of the vessel or type.
/// Example: /// Example: Search and Rescue Vessel
/// Constraints: Minimum length = 0, Maximum length = 100
func (rcv *Vessel_Abridged) VesselDescription() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(20))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Further description or explanation of the vessel or type.
/// Example: /// Example: Search and Rescue Vessel
/// Constraints: Minimum length = 0, Maximum length = 100
/// The Ship Control Number (SCONUM) is a naval vessel identification number (alphanumeric code) assigned by the Office of Naval Intelligence. SCONUM is sometimes referred to as NOIC ID. SCONUMs are typically of the form A#####, where A is an alpha character and # is numerical.
/// Example: /// Example: B45524
/// Constraints: Minimum length = 0, Maximum length = 36
func (rcv *Vessel_Abridged) Sconum() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(22))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The Ship Control Number (SCONUM) is a naval vessel identification number (alphanumeric code) assigned by the Office of Naval Intelligence. SCONUM is sometimes referred to as NOIC ID. SCONUMs are typically of the form A#####, where A is an alpha character and # is numerical.
/// Example: /// Example: B45524
/// Constraints: Minimum length = 0, Maximum length = 36
/// The International Maritime Organization Number of the vessel. IMON is a seven-digit number that uniquely identifies the vessel.
/// Example: /// Example: 9566356
/// Constraints: No constraints specified.
func (rcv *Vessel_Abridged) Imon() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(24))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

/// The International Maritime Organization Number of the vessel. IMON is a seven-digit number that uniquely identifies the vessel.
/// Example: /// Example: 9566356
/// Constraints: No constraints specified.
func (rcv *Vessel_Abridged) MutateImon(n int32) bool {
	return rcv._tab.MutateInt32Slot(24, n)
}

/// The Maritime Mobile Service Identity of the vessel. MMSI is a nine-digit number that identifies the transmitter station of the vessel.
/// Example: /// Example: 416450000
/// Constraints: Minimum length = 0, Maximum length = 9
func (rcv *Vessel_Abridged) Mmsi() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(26))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The Maritime Mobile Service Identity of the vessel. MMSI is a nine-digit number that identifies the transmitter station of the vessel.
/// Example: /// Example: 416450000
/// Constraints: Minimum length = 0, Maximum length = 9
/// A uniquely designated identifier for the vessel's transmitter station. All radio transmissions must be individually identified by the call sign. Merchant and naval vessels are assigned call signs by their national licensing authorities.
/// Example: /// Example: V2OZ
/// Constraints: Minimum length = 0, Maximum length = 24
func (rcv *Vessel_Abridged) Callsign() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(28))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// A uniquely designated identifier for the vessel's transmitter station. All radio transmissions must be individually identified by the call sign. Merchant and naval vessels are assigned call signs by their national licensing authorities.
/// Example: /// Example: V2OZ
/// Constraints: Minimum length = 0, Maximum length = 24
/// The flag of the subject vessel.
/// Example: /// Example: United States
/// Constraints: Minimum length = 0, Maximum length = 36
func (rcv *Vessel_Abridged) VesselFlag() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(30))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The flag of the subject vessel.
/// Example: /// Example: United States
/// Constraints: Minimum length = 0, Maximum length = 36
/// Year the vessel went into service.
/// Example: /// Example: 2014
/// Constraints: Minimum length = 0, Maximum length = 4
func (rcv *Vessel_Abridged) YearBuilt() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(32))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Year the vessel went into service.
/// Example: /// Example: 2014
/// Constraints: Minimum length = 0, Maximum length = 4
/// The shipbuilder who built this vessel.
/// Example: /// Example: Samsung Heavy Inds - Geoje
/// Constraints: Minimum length = 0, Maximum length = 64
func (rcv *Vessel_Abridged) VesselBuilder() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(34))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The shipbuilder who built this vessel.
/// Example: /// Example: Samsung Heavy Inds - Geoje
/// Constraints: Minimum length = 0, Maximum length = 64
/// The status of this vessel.
/// Example: /// Example: In Service/Commission
/// Constraints: Minimum length = 0, Maximum length = 64
func (rcv *Vessel_Abridged) Status() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(36))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The status of this vessel.
/// Example: /// Example: In Service/Commission
/// Constraints: Minimum length = 0, Maximum length = 64
/// The date this vessel was first seen.
/// Example: /// Example: 2018-01-01T16:00:00.123Z
/// Constraints: No constraints specified.
func (rcv *Vessel_Abridged) FirstSeen() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(38))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The date this vessel was first seen.
/// Example: /// Example: 2018-01-01T16:00:00.123Z
/// Constraints: No constraints specified.
/// The overall length of the vessel, in meters. A value of 511 indicates a vessel length of 511 meters or greater.
/// Example: /// Example: 511.1
/// Constraints: No constraints specified.
func (rcv *Vessel_Abridged) Length() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(40))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// The overall length of the vessel, in meters. A value of 511 indicates a vessel length of 511 meters or greater.
/// Example: /// Example: 511.1
/// Constraints: No constraints specified.
func (rcv *Vessel_Abridged) MutateLength(n float64) bool {
	return rcv._tab.MutateFloat64Slot(40, n)
}

/// The breadth of the vessel, in meters. A value of 63 indicates a vessel breadth of 63 meters or greater.
/// Example: /// Example: 24.1
/// Constraints: No constraints specified.
func (rcv *Vessel_Abridged) Width() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(42))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// The breadth of the vessel, in meters. A value of 63 indicates a vessel breadth of 63 meters or greater.
/// Example: /// Example: 24.1
/// Constraints: No constraints specified.
func (rcv *Vessel_Abridged) MutateWidth(n float64) bool {
	return rcv._tab.MutateFloat64Slot(42, n)
}

/// The maximum static draught, in meters, of the vessel defined as the distance between the ship’s keel and the waterline of the vessel.
/// Example: /// Example: 21.1
/// Constraints: No constraints specified.
func (rcv *Vessel_Abridged) MaxDraught() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(44))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// The maximum static draught, in meters, of the vessel defined as the distance between the ship’s keel and the waterline of the vessel.
/// Example: /// Example: 21.1
/// Constraints: No constraints specified.
func (rcv *Vessel_Abridged) MutateMaxDraught(n float64) bool {
	return rcv._tab.MutateFloat64Slot(44, n)
}

/// The weight in tons, of this vessel.
/// Example: /// Example: 3423.76
/// Constraints: No constraints specified.
func (rcv *Vessel_Abridged) VslWt() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(46))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// The weight in tons, of this vessel.
/// Example: /// Example: 3423.76
/// Constraints: No constraints specified.
func (rcv *Vessel_Abridged) MutateVslWt(n float64) bool {
	return rcv._tab.MutateFloat64Slot(46, n)
}

/// The maximum possible speed of this vessel in meters per second.
/// Example: /// Example: 32.5
/// Constraints: No constraints specified.
func (rcv *Vessel_Abridged) MaxSpeed() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(48))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// The maximum possible speed of this vessel in meters per second.
/// Example: /// Example: 32.5
/// Constraints: No constraints specified.
func (rcv *Vessel_Abridged) MutateMaxSpeed(n float64) bool {
	return rcv._tab.MutateFloat64Slot(48, n)
}

/// The stern type code (Counter, Cruiser) associated with this vessel.
/// Example: /// Example: Cruiser
/// Constraints: Minimum length = 0, Maximum length = 16
func (rcv *Vessel_Abridged) SternType() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(50))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The stern type code (Counter, Cruiser) associated with this vessel.
/// Example: /// Example: Cruiser
/// Constraints: Minimum length = 0, Maximum length = 16
/// The number of blades per shaft for this vessel.
/// Example: /// Example: 4
/// Constraints: No constraints specified.
func (rcv *Vessel_Abridged) NumBlades() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(52))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

/// The number of blades per shaft for this vessel.
/// Example: /// Example: 4
/// Constraints: No constraints specified.
func (rcv *Vessel_Abridged) MutateNumBlades(n int32) bool {
	return rcv._tab.MutateInt32Slot(52, n)
}

/// The number of shafts on this vessel.
/// Example: /// Example: 3
/// Constraints: No constraints specified.
func (rcv *Vessel_Abridged) NumShafts() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(54))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

/// The number of shafts on this vessel.
/// Example: /// Example: 3
/// Constraints: No constraints specified.
func (rcv *Vessel_Abridged) MutateNumShafts(n int32) bool {
	return rcv._tab.MutateInt32Slot(54, n)
}

/// The type of propulsion employed by this vessel.
/// Example: /// Example: Diesel
/// Constraints: Minimum length = 0, Maximum length = 6
func (rcv *Vessel_Abridged) PropType() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(56))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The type of propulsion employed by this vessel.
/// Example: /// Example: Diesel
/// Constraints: Minimum length = 0, Maximum length = 6
/// The vessel hull number designation of this maritime vessel. The hull number is a 1-6 character alphanumeric entry assigned to a ship and painted on the hull.
/// Example: /// Example: A30081
/// Constraints: Minimum length = 0, Maximum length = 7
func (rcv *Vessel_Abridged) HullNum() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(58))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The vessel hull number designation of this maritime vessel. The hull number is a 1-6 character alphanumeric entry assigned to a ship and painted on the hull.
/// Example: /// Example: A30081
/// Constraints: Minimum length = 0, Maximum length = 7
/// Time the row was created in the database, auto-populated by the system.
/// Example: /// Example: 2018-01-01T16:00:00.123Z
/// Constraints: No constraints specified.
func (rcv *Vessel_Abridged) CreatedAt() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(60))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Time the row was created in the database, auto-populated by the system.
/// Example: /// Example: 2018-01-01T16:00:00.123Z
/// Constraints: No constraints specified.
/// Application user who created the row in the database, auto-populated by the system.
/// Example: /// Example: some.user
/// Constraints: Minimum length = 1, Maximum length = 64
func (rcv *Vessel_Abridged) CreatedBy() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(62))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Application user who created the row in the database, auto-populated by the system.
/// Example: /// Example: some.user
/// Constraints: Minimum length = 1, Maximum length = 64
/// Source of the data.
/// Example: /// Example: Bluestaq
/// Constraints: Minimum length = 1, Maximum length = 64
func (rcv *Vessel_Abridged) Source() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(64))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Source of the data.
/// Example: /// Example: Bluestaq
/// Constraints: Minimum length = 1, Maximum length = 64
/// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
/// Example: /// Example: THIRD_PARTY_DATASOURCE
/// Constraints: Minimum length = 0, Maximum length = 64
func (rcv *Vessel_Abridged) Origin() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(66))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
/// Example: /// Example: THIRD_PARTY_DATASOURCE
/// Constraints: Minimum length = 0, Maximum length = 64
/// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
/// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
/// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
/// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
/// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
/// Example: /// Example: TEST
/// Constraints: Minimum length = 1, Maximum length = 64
func (rcv *Vessel_Abridged) DataMode() Vessel_Abridged_dataMode_Enum {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(68))
	if o != 0 {
		return Vessel_Abridged_dataMode_Enum(rcv._tab.GetInt8(o + rcv._tab.Pos))
	}
	return 0
}

/// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
/// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
/// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
/// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
/// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
/// Example: /// Example: TEST
/// Constraints: Minimum length = 1, Maximum length = 64
func (rcv *Vessel_Abridged) MutateDataMode(n Vessel_Abridged_dataMode_Enum) bool {
	return rcv._tab.MutateInt8Slot(68, int8(n))
}

/// The originating source network on which this record was created, auto-populated by the system.
/// Example: /// Example: OPS1
/// Constraints: Minimum length = 1, Maximum length = 32
func (rcv *Vessel_Abridged) OrigNetwork() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(70))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The originating source network on which this record was created, auto-populated by the system.
/// Example: /// Example: OPS1
/// Constraints: Minimum length = 1, Maximum length = 32
func Vessel_AbridgedStart(builder *flatbuffers.Builder) {
	builder.StartObject(34)
}
func Vessel_AbridgedAddId(builder *flatbuffers.Builder, id flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(id), 0)
}
func Vessel_AbridgedAddClassificationMarking(builder *flatbuffers.Builder, classificationMarking flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(classificationMarking), 0)
}
func Vessel_AbridgedAddIdEntity(builder *flatbuffers.Builder, idEntity flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(idEntity), 0)
}
func Vessel_AbridgedAddAltVesselId(builder *flatbuffers.Builder, altVesselId flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(3, flatbuffers.UOffsetT(altVesselId), 0)
}
func Vessel_AbridgedAddIdOrganization(builder *flatbuffers.Builder, idOrganization flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(4, flatbuffers.UOffsetT(idOrganization), 0)
}
func Vessel_AbridgedAddVesselName(builder *flatbuffers.Builder, vesselName flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(5, flatbuffers.UOffsetT(vesselName), 0)
}
func Vessel_AbridgedAddVesselType(builder *flatbuffers.Builder, vesselType flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(6, flatbuffers.UOffsetT(vesselType), 0)
}
func Vessel_AbridgedAddVesselClass(builder *flatbuffers.Builder, vesselClass flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(7, flatbuffers.UOffsetT(vesselClass), 0)
}
func Vessel_AbridgedAddVesselDescription(builder *flatbuffers.Builder, vesselDescription flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(8, flatbuffers.UOffsetT(vesselDescription), 0)
}
func Vessel_AbridgedAddSconum(builder *flatbuffers.Builder, sconum flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(9, flatbuffers.UOffsetT(sconum), 0)
}
func Vessel_AbridgedAddImon(builder *flatbuffers.Builder, imon int32) {
	builder.PrependInt32Slot(10, imon, 0)
}
func Vessel_AbridgedAddMmsi(builder *flatbuffers.Builder, mmsi flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(11, flatbuffers.UOffsetT(mmsi), 0)
}
func Vessel_AbridgedAddCallsign(builder *flatbuffers.Builder, callsign flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(12, flatbuffers.UOffsetT(callsign), 0)
}
func Vessel_AbridgedAddVesselFlag(builder *flatbuffers.Builder, vesselFlag flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(13, flatbuffers.UOffsetT(vesselFlag), 0)
}
func Vessel_AbridgedAddYearBuilt(builder *flatbuffers.Builder, yearBuilt flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(14, flatbuffers.UOffsetT(yearBuilt), 0)
}
func Vessel_AbridgedAddVesselBuilder(builder *flatbuffers.Builder, vesselBuilder flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(15, flatbuffers.UOffsetT(vesselBuilder), 0)
}
func Vessel_AbridgedAddStatus(builder *flatbuffers.Builder, status flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(16, flatbuffers.UOffsetT(status), 0)
}
func Vessel_AbridgedAddFirstSeen(builder *flatbuffers.Builder, firstSeen flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(17, flatbuffers.UOffsetT(firstSeen), 0)
}
func Vessel_AbridgedAddLength(builder *flatbuffers.Builder, length float64) {
	builder.PrependFloat64Slot(18, length, 0.0)
}
func Vessel_AbridgedAddWidth(builder *flatbuffers.Builder, width float64) {
	builder.PrependFloat64Slot(19, width, 0.0)
}
func Vessel_AbridgedAddMaxDraught(builder *flatbuffers.Builder, maxDraught float64) {
	builder.PrependFloat64Slot(20, maxDraught, 0.0)
}
func Vessel_AbridgedAddVslWt(builder *flatbuffers.Builder, vslWt float64) {
	builder.PrependFloat64Slot(21, vslWt, 0.0)
}
func Vessel_AbridgedAddMaxSpeed(builder *flatbuffers.Builder, maxSpeed float64) {
	builder.PrependFloat64Slot(22, maxSpeed, 0.0)
}
func Vessel_AbridgedAddSternType(builder *flatbuffers.Builder, sternType flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(23, flatbuffers.UOffsetT(sternType), 0)
}
func Vessel_AbridgedAddNumBlades(builder *flatbuffers.Builder, numBlades int32) {
	builder.PrependInt32Slot(24, numBlades, 0)
}
func Vessel_AbridgedAddNumShafts(builder *flatbuffers.Builder, numShafts int32) {
	builder.PrependInt32Slot(25, numShafts, 0)
}
func Vessel_AbridgedAddPropType(builder *flatbuffers.Builder, propType flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(26, flatbuffers.UOffsetT(propType), 0)
}
func Vessel_AbridgedAddHullNum(builder *flatbuffers.Builder, hullNum flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(27, flatbuffers.UOffsetT(hullNum), 0)
}
func Vessel_AbridgedAddCreatedAt(builder *flatbuffers.Builder, createdAt flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(28, flatbuffers.UOffsetT(createdAt), 0)
}
func Vessel_AbridgedAddCreatedBy(builder *flatbuffers.Builder, createdBy flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(29, flatbuffers.UOffsetT(createdBy), 0)
}
func Vessel_AbridgedAddSource(builder *flatbuffers.Builder, source flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(30, flatbuffers.UOffsetT(source), 0)
}
func Vessel_AbridgedAddOrigin(builder *flatbuffers.Builder, origin flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(31, flatbuffers.UOffsetT(origin), 0)
}
func Vessel_AbridgedAddDataMode(builder *flatbuffers.Builder, dataMode Vessel_Abridged_dataMode_Enum) {
	builder.PrependInt8Slot(32, int8(dataMode), 0)
}
func Vessel_AbridgedAddOrigNetwork(builder *flatbuffers.Builder, origNetwork flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(33, flatbuffers.UOffsetT(origNetwork), 0)
}
func Vessel_AbridgedEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
