// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package MissionAssignment_Ingest

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

/// /// Platform mission assignment data.
type MissionAssignment_Ingest struct {
	_tab flatbuffers.Table
}

const MissionAssignment_IngestIdentifier = "MISS"

func GetRootAsMissionAssignment_Ingest(buf []byte, offset flatbuffers.UOffsetT) *MissionAssignment_Ingest {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &MissionAssignment_Ingest{}
	x.Init(buf, n+offset)
	return x
}

func FinishMissionAssignment_IngestBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	identifierBytes := []byte(MissionAssignment_IngestIdentifier)
	builder.FinishWithFileIdentifier(offset, identifierBytes)
}

func MissionAssignment_IngestBufferHasIdentifier(buf []byte) bool {
	return flatbuffers.BufferHasIdentifier(buf, MissionAssignment_IngestIdentifier)
}

func GetSizePrefixedRootAsMissionAssignment_Ingest(buf []byte, offset flatbuffers.UOffsetT) *MissionAssignment_Ingest {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &MissionAssignment_Ingest{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedMissionAssignment_IngestBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	identifierBytes := []byte(MissionAssignment_IngestIdentifier)
	builder.FinishSizePrefixedWithFileIdentifier(offset, identifierBytes)
}

func SizePrefixedMissionAssignment_IngestBufferHasIdentifier(buf []byte) bool {
	return flatbuffers.SizePrefixedBufferHasIdentifier(buf, MissionAssignment_IngestIdentifier)
}

func (rcv *MissionAssignment_Ingest) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *MissionAssignment_Ingest) Table() flatbuffers.Table {
	return rcv._tab
}

/// Unique identifier of the record, auto-generated by the system.
/// Example: /// Example: MISSIONASSIGNMENT-ID
/// Constraints: Minimum length = 1, Maximum length = 36
func (rcv *MissionAssignment_Ingest) Id() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Unique identifier of the record, auto-generated by the system.
/// Example: /// Example: MISSIONASSIGNMENT-ID
/// Constraints: Minimum length = 1, Maximum length = 36
/// Classification marking of the data in IC/CAPCO Portion-marked format.
/// Example: /// Example: U
/// Constraints: Minimum length = 1, Maximum length = 128
func (rcv *MissionAssignment_Ingest) ClassificationMarking() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Classification marking of the data in IC/CAPCO Portion-marked format.
/// Example: /// Example: U
/// Constraints: Minimum length = 1, Maximum length = 128
/// The track ID that the status is referencing, addressee.
/// Example: /// Example: TRK-ID
/// Constraints: Minimum length = 0, Maximum length = 36
func (rcv *MissionAssignment_Ingest) TrkId() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The track ID that the status is referencing, addressee.
/// Example: /// Example: TRK-ID
/// Constraints: Minimum length = 0, Maximum length = 36
/// The timestamp of the mission data, in ISO 8601 UTC format.
/// Example: /// Example: 2021-01-01T01:01:01.123456Z
/// Constraints: No constraints specified.
func (rcv *MissionAssignment_Ingest) Ts() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The timestamp of the mission data, in ISO 8601 UTC format.
/// Example: /// Example: 2021-01-01T01:01:01.123456Z
/// Constraints: No constraints specified.
/// The mission assignment discrete value.
/// Example: /// Example: MAD
/// Constraints: Minimum length = 1, Maximum length = 16
func (rcv *MissionAssignment_Ingest) Mad() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The mission assignment discrete value.
/// Example: /// Example: MAD
/// Constraints: Minimum length = 1, Maximum length = 16
/// Receipt/Compliance, values from TABLE B-9.
/// Example: /// Example: RC-123
/// Constraints: Minimum length = 0, Maximum length = 16
func (rcv *MissionAssignment_Ingest) Rc() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Receipt/Compliance, values from TABLE B-9.
/// Example: /// Example: RC-123
/// Constraints: Minimum length = 0, Maximum length = 16
/// Recurrence rate, receipt/compliance.
/// Example: /// Example: 2
/// Constraints: No constraints specified.
func (rcv *MissionAssignment_Ingest) Rr() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

/// Recurrence rate, receipt/compliance.
/// Example: /// Example: 2
/// Constraints: No constraints specified.
func (rcv *MissionAssignment_Ingest) MutateRr(n int32) bool {
	return rcv._tab.MutateInt32Slot(16, n)
}

/// Track number objective.
/// Example: /// Example: TRACK_NUMBER
/// Constraints: No constraints specified.
func (rcv *MissionAssignment_Ingest) Tno() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(18))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Track number objective.
/// Example: /// Example: TRACK_NUMBER
/// Constraints: No constraints specified.
/// Threat warning environment.
/// Example: /// Example: THREAT_WARNING
/// Constraints: Minimum length = 0, Maximum length = 16
func (rcv *MissionAssignment_Ingest) Twenv() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(20))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Threat warning environment.
/// Example: /// Example: THREAT_WARNING
/// Constraints: Minimum length = 0, Maximum length = 16
/// WGS84 latitude, in degrees. -90 to 90 degrees (negative values south of equator).
/// Example: /// Example: 45.23
/// Constraints: No constraints specified.
func (rcv *MissionAssignment_Ingest) Lat() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(22))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// WGS84 latitude, in degrees. -90 to 90 degrees (negative values south of equator).
/// Example: /// Example: 45.23
/// Constraints: No constraints specified.
func (rcv *MissionAssignment_Ingest) MutateLat(n float64) bool {
	return rcv._tab.MutateFloat64Slot(22, n)
}

/// WGS84 longitude, in degrees. -180 to 180 degrees (negative values west of Prime Meridian).
/// Example: /// Example: 45.23
/// Constraints: No constraints specified.
func (rcv *MissionAssignment_Ingest) Lon() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(24))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// WGS84 longitude, in degrees. -180 to 180 degrees (negative values west of Prime Meridian).
/// Example: /// Example: 45.23
/// Constraints: No constraints specified.
func (rcv *MissionAssignment_Ingest) MutateLon(n float64) bool {
	return rcv._tab.MutateFloat64Slot(24, n)
}

/// Origin of index number.
/// Example: /// Example: ORIGIN
/// Constraints: Minimum length = 0, Maximum length = 16
func (rcv *MissionAssignment_Ingest) Orginx() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(26))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Origin of index number.
/// Example: /// Example: ORIGIN
/// Constraints: Minimum length = 0, Maximum length = 16
/// Environment.
/// Example: /// Example: ENV
/// Constraints: Minimum length = 0, Maximum length = 16
func (rcv *MissionAssignment_Ingest) Env() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(28))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Environment.
/// Example: /// Example: ENV
/// Constraints: Minimum length = 0, Maximum length = 16
/// Strength.
/// Example: /// Example: STRENGTH
/// Constraints: Minimum length = 0, Maximum length = 16
func (rcv *MissionAssignment_Ingest) Sz() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(30))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Strength.
/// Example: /// Example: STRENGTH
/// Constraints: Minimum length = 0, Maximum length = 16
/// Index number.
/// Example: /// Example: 5
/// Constraints: No constraints specified.
func (rcv *MissionAssignment_Ingest) Index() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(32))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

/// Index number.
/// Example: /// Example: 5
/// Constraints: No constraints specified.
func (rcv *MissionAssignment_Ingest) MutateIndex(n int32) bool {
	return rcv._tab.MutateInt32Slot(32, n)
}

/// TARGET POSITION CONTINUATION WORD - number of associated dmpis.
/// Example: /// Example: 3
/// Constraints: No constraints specified.
func (rcv *MissionAssignment_Ingest) C1associateddmpis() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(34))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

/// TARGET POSITION CONTINUATION WORD - number of associated dmpis.
/// Example: /// Example: 3
/// Constraints: No constraints specified.
func (rcv *MissionAssignment_Ingest) MutateC1associateddmpis(n int32) bool {
	return rcv._tab.MutateInt32Slot(34, n)
}

/// TARGET DATA CONTINUATION WORD - space specific type, see TABLE B-39.
/// Example: /// Example: C2SPC
/// Constraints: No constraints specified.
func (rcv *MissionAssignment_Ingest) C2spc() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(36))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// TARGET DATA CONTINUATION WORD - space specific type, see TABLE B-39.
/// Example: /// Example: C2SPC
/// Constraints: No constraints specified.
/// TARGET DATA CONTINUATION WORD - air specific type, see TABLE B-21.
/// Example: /// Example: C2AIR
/// Constraints: No constraints specified.
func (rcv *MissionAssignment_Ingest) C2air() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(38))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// TARGET DATA CONTINUATION WORD - air specific type, see TABLE B-21.
/// Example: /// Example: C2AIR
/// Constraints: No constraints specified.
/// TARGET DATA CONTINUATION WORD - surface specific type, see TABLE B-21.
/// Example: /// Example: C2SUR
/// Constraints: No constraints specified.
func (rcv *MissionAssignment_Ingest) C2sur() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(40))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// TARGET DATA CONTINUATION WORD - surface specific type, see TABLE B-21.
/// Example: /// Example: C2SUR
/// Constraints: No constraints specified.
/// TARGET DATA CONTINUATION WORD - land specific type, see TABLE B-21.
/// Example: /// Example: C2LND
/// Constraints: No constraints specified.
func (rcv *MissionAssignment_Ingest) C2lnd() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(42))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// TARGET DATA CONTINUATION WORD - land specific type, see TABLE B-21.
/// Example: /// Example: C2LND
/// Constraints: No constraints specified.
/// TARGET DATA CONTINUATION WORD - identity.
/// Example: /// Example: C2ID
/// Constraints: Minimum length = 0, Maximum length = 16
func (rcv *MissionAssignment_Ingest) C2id() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(44))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// TARGET DATA CONTINUATION WORD - identity.
/// Example: /// Example: C2ID
/// Constraints: Minimum length = 0, Maximum length = 16
/// TARGET DATA CONTINUATION WORD - identity amplifying descriptor.
/// Example: /// Example: C2IDAMP
/// Constraints: Minimum length = 0, Maximum length = 16
func (rcv *MissionAssignment_Ingest) C2idamplifyingdescriptor() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(46))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// TARGET DATA CONTINUATION WORD - identity amplifying descriptor.
/// Example: /// Example: C2IDAMP
/// Constraints: Minimum length = 0, Maximum length = 16
/// TARGET DATA CONTINUATION WORD - altitude, 100 FT, 2047=NS.
/// Example: /// Example: 3
/// Constraints: No constraints specified.
func (rcv *MissionAssignment_Ingest) C2alt() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(48))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

/// TARGET DATA CONTINUATION WORD - altitude, 100 FT, 2047=NS.
/// Example: /// Example: 3
/// Constraints: No constraints specified.
func (rcv *MissionAssignment_Ingest) MutateC2alt(n int32) bool {
	return rcv._tab.MutateInt32Slot(48, n)
}

/// TARGET DATA CONTINUATION WORD - course in increments of 1 degree.
/// Example: /// Example: 3
/// Constraints: No constraints specified.
func (rcv *MissionAssignment_Ingest) C2crs() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(50))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

/// TARGET DATA CONTINUATION WORD - course in increments of 1 degree.
/// Example: /// Example: 3
/// Constraints: No constraints specified.
func (rcv *MissionAssignment_Ingest) MutateC2crs(n int32) bool {
	return rcv._tab.MutateInt32Slot(50, n)
}

/// TARGET DATA CONTINUATION WORD - speed in 2 DM/HR, 2047=NS.
/// Example: /// Example: 3
/// Constraints: No constraints specified.
func (rcv *MissionAssignment_Ingest) C2spd() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(52))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

/// TARGET DATA CONTINUATION WORD - speed in 2 DM/HR, 2047=NS.
/// Example: /// Example: 3
/// Constraints: No constraints specified.
func (rcv *MissionAssignment_Ingest) MutateC2spd(n int32) bool {
	return rcv._tab.MutateInt32Slot(52, n)
}

/// TARGET DATA CONTINUATION WORD - special interest indicator.
/// Example: /// Example: C2SPECIAL
/// Constraints: Minimum length = 0, Maximum length = 16
func (rcv *MissionAssignment_Ingest) C2specialinterestindicator() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(54))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// TARGET DATA CONTINUATION WORD - special interest indicator.
/// Example: /// Example: C2SPECIAL
/// Constraints: Minimum length = 0, Maximum length = 16
/// TARGET DATA CONTINUATION WORD - exercise indicator.
/// Example: /// Example: C2EXERCISE
/// Constraints: Minimum length = 0, Maximum length = 16
func (rcv *MissionAssignment_Ingest) C2exerciseindicator() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(56))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// TARGET DATA CONTINUATION WORD - exercise indicator.
/// Example: /// Example: C2EXERCISE
/// Constraints: Minimum length = 0, Maximum length = 16
/// TARGET DATA CONTINUATION WORD - method of fire.
/// Example: /// Example: MOF
/// Constraints: Minimum length = 0, Maximum length = 16
func (rcv *MissionAssignment_Ingest) C2exercisemof() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(58))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// TARGET DATA CONTINUATION WORD - method of fire.
/// Example: /// Example: MOF
/// Constraints: Minimum length = 0, Maximum length = 16
/// POINT LOCATION CONTINUATION WORD - latitude, 0.0013 MINUTE.
/// Example: /// Example: 10.23
/// Constraints: No constraints specified.
func (rcv *MissionAssignment_Ingest) C3lat() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(60))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// POINT LOCATION CONTINUATION WORD - latitude, 0.0013 MINUTE.
/// Example: /// Example: 10.23
/// Constraints: No constraints specified.
func (rcv *MissionAssignment_Ingest) MutateC3lat(n float64) bool {
	return rcv._tab.MutateFloat64Slot(60, n)
}

/// POINT LOCATION CONTINUATION WORD - longitude, 0.0013 MINUTE.
/// Example: /// Example: 10.23
/// Constraints: No constraints specified.
func (rcv *MissionAssignment_Ingest) C3lon() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(62))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// POINT LOCATION CONTINUATION WORD - longitude, 0.0013 MINUTE.
/// Example: /// Example: 10.23
/// Constraints: No constraints specified.
func (rcv *MissionAssignment_Ingest) MutateC3lon(n float64) bool {
	return rcv._tab.MutateFloat64Slot(62, n)
}

/// POINT LOCATION CONTINUATION WORD - elevation, 25 FT, 1023=NS.
/// Example: /// Example: 10.23
/// Constraints: No constraints specified.
func (rcv *MissionAssignment_Ingest) C3elv() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(64))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// POINT LOCATION CONTINUATION WORD - elevation, 25 FT, 1023=NS.
/// Example: /// Example: 10.23
/// Constraints: No constraints specified.
func (rcv *MissionAssignment_Ingest) MutateC3elv(n float64) bool {
	return rcv._tab.MutateFloat64Slot(64, n)
}

/// TARGET DATA CONTINUATION WORD - point type 1.
/// Example: /// Example: C3PTL
/// Constraints: Minimum length = 0, Maximum length = 16
func (rcv *MissionAssignment_Ingest) C3ptl() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(66))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// TARGET DATA CONTINUATION WORD - point type 1.
/// Example: /// Example: C3PTL
/// Constraints: Minimum length = 0, Maximum length = 16
/// TARGET DATA CONTINUATION WORD - point number.
/// Example: /// Example: C3PTNUM
/// Constraints: Minimum length = 0, Maximum length = 16
func (rcv *MissionAssignment_Ingest) C3ptnum() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(68))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// TARGET DATA CONTINUATION WORD - point number.
/// Example: /// Example: C3PTNUM
/// Constraints: Minimum length = 0, Maximum length = 16
/// SURFACE ATTACK CONTINUATION WORD - target type - see TABLE B-32.
/// Example: /// Example: C4TGT
/// Constraints: Minimum length = 0, Maximum length = 16
func (rcv *MissionAssignment_Ingest) C4tgt() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(70))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// SURFACE ATTACK CONTINUATION WORD - target type - see TABLE B-32.
/// Example: /// Example: C4TGT
/// Constraints: Minimum length = 0, Maximum length = 16
/// SURFACE ATTACK CONTINUATION WORD - target defenses.
/// Example: /// Example: C4DEF
/// Constraints: Minimum length = 0, Maximum length = 16
func (rcv *MissionAssignment_Ingest) C4def() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(72))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// SURFACE ATTACK CONTINUATION WORD - target defenses.
/// Example: /// Example: C4DEF
/// Constraints: Minimum length = 0, Maximum length = 16
/// SURFACE ATTACK CONTINUATION WORD - run in heading, NS=511.
/// Example: /// Example: 5
/// Constraints: No constraints specified.
func (rcv *MissionAssignment_Ingest) C4runin() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(74))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

/// SURFACE ATTACK CONTINUATION WORD - run in heading, NS=511.
/// Example: /// Example: 5
/// Constraints: No constraints specified.
func (rcv *MissionAssignment_Ingest) MutateC4runin(n int32) bool {
	return rcv._tab.MutateInt32Slot(74, n)
}

/// SURFACE ATTACK CONTINUATION WORD - run in heading, NS=511.
/// Example: /// Example: 4
/// Constraints: No constraints specified.
func (rcv *MissionAssignment_Ingest) C4egress() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(76))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

/// SURFACE ATTACK CONTINUATION WORD - run in heading, NS=511.
/// Example: /// Example: 4
/// Constraints: No constraints specified.
func (rcv *MissionAssignment_Ingest) MutateC4egress(n int32) bool {
	return rcv._tab.MutateInt32Slot(76, n)
}

/// SURFACE ATTACK CONTINUATION WORD - number of stores, NS=63.
/// Example: /// Example: 3
/// Constraints: No constraints specified.
func (rcv *MissionAssignment_Ingest) C4numberofstores() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(78))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

/// SURFACE ATTACK CONTINUATION WORD - number of stores, NS=63.
/// Example: /// Example: 3
/// Constraints: No constraints specified.
func (rcv *MissionAssignment_Ingest) MutateC4numberofstores(n int32) bool {
	return rcv._tab.MutateInt32Slot(78, n)
}

/// SURFACE ATTACK CONTINUATION WORD - type of stores.
/// Example: /// Example: 2
/// Constraints: No constraints specified.
func (rcv *MissionAssignment_Ingest) C4typeofstores() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(80))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

/// SURFACE ATTACK CONTINUATION WORD - type of stores.
/// Example: /// Example: 2
/// Constraints: No constraints specified.
func (rcv *MissionAssignment_Ingest) MutateC4typeofstores(n int32) bool {
	return rcv._tab.MutateInt32Slot(80, n)
}

/// SURFACE ATTACK CONTINUATION WORD - time discrete.
/// Example: /// Example: C4TIMED
/// Constraints: Minimum length = 0, Maximum length = 16
func (rcv *MissionAssignment_Ingest) C4timediscrete() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(82))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// SURFACE ATTACK CONTINUATION WORD - time discrete.
/// Example: /// Example: C4TIMED
/// Constraints: Minimum length = 0, Maximum length = 16
/// SURFACE ATTACK CONTINUATION WORD - hour.
/// Example: /// Example: 4
/// Constraints: No constraints specified.
func (rcv *MissionAssignment_Ingest) C4tm() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(84))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

/// SURFACE ATTACK CONTINUATION WORD - hour.
/// Example: /// Example: 4
/// Constraints: No constraints specified.
func (rcv *MissionAssignment_Ingest) MutateC4tm(n int32) bool {
	return rcv._tab.MutateInt32Slot(84, n)
}

/// SURFACE ATTACK CONTINUATION WORD - minute.
/// Example: /// Example: 5
/// Constraints: No constraints specified.
func (rcv *MissionAssignment_Ingest) C4colon() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(86))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

/// SURFACE ATTACK CONTINUATION WORD - minute.
/// Example: /// Example: 5
/// Constraints: No constraints specified.
func (rcv *MissionAssignment_Ingest) MutateC4colon(n int32) bool {
	return rcv._tab.MutateInt32Slot(86, n)
}

/// SURFACE ATTACK CONTINUATION WORD - mode of delivery.
/// Example: /// Example: 5
/// Constraints: No constraints specified.
func (rcv *MissionAssignment_Ingest) C4mod() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(88))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

/// SURFACE ATTACK CONTINUATION WORD - mode of delivery.
/// Example: /// Example: 5
/// Constraints: No constraints specified.
func (rcv *MissionAssignment_Ingest) MutateC4mod(n int32) bool {
	return rcv._tab.MutateInt32Slot(88, n)
}

/// CONTINUATION WORD - hae adjustment, measured in 3.125 FT.
/// Example: /// Example: 5
/// Constraints: No constraints specified.
func (rcv *MissionAssignment_Ingest) C5haeadj() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(90))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

/// CONTINUATION WORD - hae adjustment, measured in 3.125 FT.
/// Example: /// Example: 5
/// Constraints: No constraints specified.
func (rcv *MissionAssignment_Ingest) MutateC5haeadj(n int32) bool {
	return rcv._tab.MutateInt32Slot(90, n)
}

/// CONTINUATION WORD - time window.
/// Example: /// Example: 5
/// Constraints: No constraints specified.
func (rcv *MissionAssignment_Ingest) C5tw() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(92))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

/// CONTINUATION WORD - time window.
/// Example: /// Example: 5
/// Constraints: No constraints specified.
func (rcv *MissionAssignment_Ingest) MutateC5tw(n int32) bool {
	return rcv._tab.MutateInt32Slot(92, n)
}

/// CONTINUATION WORD - target bearing.
/// Example: /// Example: 5
/// Constraints: No constraints specified.
func (rcv *MissionAssignment_Ingest) C5tgtbrng() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(94))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

/// CONTINUATION WORD - target bearing.
/// Example: /// Example: 5
/// Constraints: No constraints specified.
func (rcv *MissionAssignment_Ingest) MutateC5tgtbrng(n int32) bool {
	return rcv._tab.MutateInt32Slot(94, n)
}

/// CONTINUATION WORD - used with c3_lat to double precision to approx 4 ft.
/// Example: /// Example: 5
/// Constraints: No constraints specified.
func (rcv *MissionAssignment_Ingest) C5latlsb() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(96))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

/// CONTINUATION WORD - used with c3_lat to double precision to approx 4 ft.
/// Example: /// Example: 5
/// Constraints: No constraints specified.
func (rcv *MissionAssignment_Ingest) MutateC5latlsb(n int32) bool {
	return rcv._tab.MutateInt32Slot(96, n)
}

/// CONTINUATION WORD - used with c3_lon to double precision to approx 4 ft.
/// Example: /// Example: 5
/// Constraints: No constraints specified.
func (rcv *MissionAssignment_Ingest) C5lonlsb() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(98))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

/// CONTINUATION WORD - used with c3_lon to double precision to approx 4 ft.
/// Example: /// Example: 5
/// Constraints: No constraints specified.
func (rcv *MissionAssignment_Ingest) MutateC5lonlsb(n int32) bool {
	return rcv._tab.MutateInt32Slot(98, n)
}

/// CONTINUATION WORD - used with c3_elv to double precision to approx 3 ft.
/// Example: /// Example: 5
/// Constraints: No constraints specified.
func (rcv *MissionAssignment_Ingest) C5elevationlsbs() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(100))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

/// CONTINUATION WORD - used with c3_elv to double precision to approx 3 ft.
/// Example: /// Example: 5
/// Constraints: No constraints specified.
func (rcv *MissionAssignment_Ingest) MutateC5elevationlsbs(n int32) bool {
	return rcv._tab.MutateInt32Slot(100, n)
}

/// SURFACE ATTACK CONTINUATION WORD - seconds in increments of 1 sec.
/// Example: /// Example: 5
/// Constraints: No constraints specified.
func (rcv *MissionAssignment_Ingest) C5colon() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(102))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

/// SURFACE ATTACK CONTINUATION WORD - seconds in increments of 1 sec.
/// Example: /// Example: 5
/// Constraints: No constraints specified.
func (rcv *MissionAssignment_Ingest) MutateC5colon(n int32) bool {
	return rcv._tab.MutateInt32Slot(102, n)
}

/// TARGETING CONTINUATION WORD - laser illuminator code.
/// Example: /// Example: 5
/// Constraints: No constraints specified.
func (rcv *MissionAssignment_Ingest) C6laser() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(104))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

/// TARGETING CONTINUATION WORD - laser illuminator code.
/// Example: /// Example: 5
/// Constraints: No constraints specified.
func (rcv *MissionAssignment_Ingest) MutateC6laser(n int32) bool {
	return rcv._tab.MutateInt32Slot(104, n)
}

/// TARGETING CONTINUATION WORD - index number, related, 0=NS.
/// Example: /// Example: 5
/// Constraints: No constraints specified.
func (rcv *MissionAssignment_Ingest) C6intel() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(106))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

/// TARGETING CONTINUATION WORD - index number, related, 0=NS.
/// Example: /// Example: 5
/// Constraints: No constraints specified.
func (rcv *MissionAssignment_Ingest) MutateC6intel(n int32) bool {
	return rcv._tab.MutateInt32Slot(106, n)
}

/// TARGETING CONTINUATION WORD - track number, related to 3.
/// Example: /// Example: 5
/// Constraints: No constraints specified.
func (rcv *MissionAssignment_Ingest) C6tnr3() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(108))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

/// TARGETING CONTINUATION WORD - track number, related to 3.
/// Example: /// Example: 5
/// Constraints: No constraints specified.
func (rcv *MissionAssignment_Ingest) MutateC6tnr3(n int32) bool {
	return rcv._tab.MutateInt32Slot(108, n)
}

/// TARGETING CONTINUATION WORD - designator/seeker pulse code type.
/// Example: /// Example: C6DSPCT
/// Constraints: Minimum length = 0, Maximum length = 16
func (rcv *MissionAssignment_Ingest) C6dspct() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(110))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// TARGETING CONTINUATION WORD - designator/seeker pulse code type.
/// Example: /// Example: C6DSPCT
/// Constraints: Minimum length = 0, Maximum length = 16
/// TARGETING CONTINUATION WORD - designator/seeker pulse code.
/// Example: /// Example: C6DSPC
/// Constraints: Minimum length = 0, Maximum length = 16
func (rcv *MissionAssignment_Ingest) C6dspc() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(112))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// TARGETING CONTINUATION WORD - designator/seeker pulse code.
/// Example: /// Example: C6DSPC
/// Constraints: Minimum length = 0, Maximum length = 16
/// TARGETING CONTINUATION WORD - first pulse/last pulse mode.
/// Example: /// Example: C6FPLPM
/// Constraints: Minimum length = 0, Maximum length = 16
func (rcv *MissionAssignment_Ingest) C6fplpm() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(114))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// TARGETING CONTINUATION WORD - first pulse/last pulse mode.
/// Example: /// Example: C6FPLPM
/// Constraints: Minimum length = 0, Maximum length = 16
/// TARGETING CONTINUATION WORD - long pulse mode.
/// Example: /// Example: C6LONGPM
/// Constraints: Minimum length = 0, Maximum length = 16
func (rcv *MissionAssignment_Ingest) C6longpm() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(116))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// TARGETING CONTINUATION WORD - long pulse mode.
/// Example: /// Example: C6LONGPM
/// Constraints: Minimum length = 0, Maximum length = 16
/// THIRD PARTY CONTINUATION WORD  - track number, index originator.
/// Example: /// Example: C7TNOR
/// Constraints: No constraints specified.
func (rcv *MissionAssignment_Ingest) C7tnor() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(118))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// THIRD PARTY CONTINUATION WORD  - track number, index originator.
/// Example: /// Example: C7TNOR
/// Constraints: No constraints specified.
/// THIRD PARTY CONTINUATION WORD  - index number, third party.
/// Example: /// Example: 3
/// Constraints: No constraints specified.
func (rcv *MissionAssignment_Ingest) C7in3p() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(120))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

/// THIRD PARTY CONTINUATION WORD  - index number, third party.
/// Example: /// Example: 3
/// Constraints: No constraints specified.
func (rcv *MissionAssignment_Ingest) MutateC7in3p(n int32) bool {
	return rcv._tab.MutateInt32Slot(120, n)
}

/// THIRD PARTY CONTINUATION WORD  - elevation angle, 2.
/// Example: /// Example: 5.23
/// Constraints: No constraints specified.
func (rcv *MissionAssignment_Ingest) C7elang2() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(122))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// THIRD PARTY CONTINUATION WORD  - elevation angle, 2.
/// Example: /// Example: 5.23
/// Constraints: No constraints specified.
func (rcv *MissionAssignment_Ingest) MutateC7elang2(n float64) bool {
	return rcv._tab.MutateFloat64Slot(122, n)
}

/// Time the row was created in the database, auto-populated by the system.
/// Example: /// Example: 2018-01-01T16:00:00.123Z
/// Constraints: No constraints specified.
func (rcv *MissionAssignment_Ingest) CreatedAt() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(124))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Time the row was created in the database, auto-populated by the system.
/// Example: /// Example: 2018-01-01T16:00:00.123Z
/// Constraints: No constraints specified.
/// Application user who created the row in the database, auto-populated by the system.
/// Example: /// Example: some.user
/// Constraints: Minimum length = 1, Maximum length = 64
func (rcv *MissionAssignment_Ingest) CreatedBy() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(126))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Application user who created the row in the database, auto-populated by the system.
/// Example: /// Example: some.user
/// Constraints: Minimum length = 1, Maximum length = 64
/// Source of the data.
/// Example: /// Example: Bluestaq
/// Constraints: Minimum length = 1, Maximum length = 64
func (rcv *MissionAssignment_Ingest) Source() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(128))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Source of the data.
/// Example: /// Example: Bluestaq
/// Constraints: Minimum length = 1, Maximum length = 64
/// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
/// Example: /// Example: THIRD_PARTY_DATASOURCE
/// Constraints: Minimum length = 0, Maximum length = 64
func (rcv *MissionAssignment_Ingest) Origin() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(130))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
/// Example: /// Example: THIRD_PARTY_DATASOURCE
/// Constraints: Minimum length = 0, Maximum length = 64
/// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
/// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
/// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
/// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
/// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
/// Example: /// Example: TEST
/// Constraints: Minimum length = 1, Maximum length = 32
func (rcv *MissionAssignment_Ingest) DataMode() MissionAssignment_Ingest_dataMode_Enum {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(132))
	if o != 0 {
		return MissionAssignment_Ingest_dataMode_Enum(rcv._tab.GetInt8(o + rcv._tab.Pos))
	}
	return 0
}

/// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
/// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
/// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
/// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
/// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
/// Example: /// Example: TEST
/// Constraints: Minimum length = 1, Maximum length = 32
func (rcv *MissionAssignment_Ingest) MutateDataMode(n MissionAssignment_Ingest_dataMode_Enum) bool {
	return rcv._tab.MutateInt8Slot(132, int8(n))
}

/// The originating source network on which this record was created, auto-populated by the system.
/// Example: /// Example: ORIG
/// Constraints: Minimum length = 1, Maximum length = 32
func (rcv *MissionAssignment_Ingest) OrigNetwork() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(134))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The originating source network on which this record was created, auto-populated by the system.
/// Example: /// Example: ORIG
/// Constraints: Minimum length = 1, Maximum length = 32
func MissionAssignment_IngestStart(builder *flatbuffers.Builder) {
	builder.StartObject(66)
}
func MissionAssignment_IngestAddId(builder *flatbuffers.Builder, id flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(id), 0)
}
func MissionAssignment_IngestAddClassificationMarking(builder *flatbuffers.Builder, classificationMarking flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(classificationMarking), 0)
}
func MissionAssignment_IngestAddTrkId(builder *flatbuffers.Builder, trkId flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(trkId), 0)
}
func MissionAssignment_IngestAddTs(builder *flatbuffers.Builder, ts flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(3, flatbuffers.UOffsetT(ts), 0)
}
func MissionAssignment_IngestAddMad(builder *flatbuffers.Builder, mad flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(4, flatbuffers.UOffsetT(mad), 0)
}
func MissionAssignment_IngestAddRc(builder *flatbuffers.Builder, rc flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(5, flatbuffers.UOffsetT(rc), 0)
}
func MissionAssignment_IngestAddRr(builder *flatbuffers.Builder, rr int32) {
	builder.PrependInt32Slot(6, rr, 0)
}
func MissionAssignment_IngestAddTno(builder *flatbuffers.Builder, tno flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(7, flatbuffers.UOffsetT(tno), 0)
}
func MissionAssignment_IngestAddTwenv(builder *flatbuffers.Builder, twenv flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(8, flatbuffers.UOffsetT(twenv), 0)
}
func MissionAssignment_IngestAddLat(builder *flatbuffers.Builder, lat float64) {
	builder.PrependFloat64Slot(9, lat, 0.0)
}
func MissionAssignment_IngestAddLon(builder *flatbuffers.Builder, lon float64) {
	builder.PrependFloat64Slot(10, lon, 0.0)
}
func MissionAssignment_IngestAddOrginx(builder *flatbuffers.Builder, orginx flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(11, flatbuffers.UOffsetT(orginx), 0)
}
func MissionAssignment_IngestAddEnv(builder *flatbuffers.Builder, env flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(12, flatbuffers.UOffsetT(env), 0)
}
func MissionAssignment_IngestAddSz(builder *flatbuffers.Builder, sz flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(13, flatbuffers.UOffsetT(sz), 0)
}
func MissionAssignment_IngestAddIndex(builder *flatbuffers.Builder, index int32) {
	builder.PrependInt32Slot(14, index, 0)
}
func MissionAssignment_IngestAddC1associateddmpis(builder *flatbuffers.Builder, c1associateddmpis int32) {
	builder.PrependInt32Slot(15, c1associateddmpis, 0)
}
func MissionAssignment_IngestAddC2spc(builder *flatbuffers.Builder, c2spc flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(16, flatbuffers.UOffsetT(c2spc), 0)
}
func MissionAssignment_IngestAddC2air(builder *flatbuffers.Builder, c2air flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(17, flatbuffers.UOffsetT(c2air), 0)
}
func MissionAssignment_IngestAddC2sur(builder *flatbuffers.Builder, c2sur flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(18, flatbuffers.UOffsetT(c2sur), 0)
}
func MissionAssignment_IngestAddC2lnd(builder *flatbuffers.Builder, c2lnd flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(19, flatbuffers.UOffsetT(c2lnd), 0)
}
func MissionAssignment_IngestAddC2id(builder *flatbuffers.Builder, c2id flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(20, flatbuffers.UOffsetT(c2id), 0)
}
func MissionAssignment_IngestAddC2idamplifyingdescriptor(builder *flatbuffers.Builder, c2idamplifyingdescriptor flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(21, flatbuffers.UOffsetT(c2idamplifyingdescriptor), 0)
}
func MissionAssignment_IngestAddC2alt(builder *flatbuffers.Builder, c2alt int32) {
	builder.PrependInt32Slot(22, c2alt, 0)
}
func MissionAssignment_IngestAddC2crs(builder *flatbuffers.Builder, c2crs int32) {
	builder.PrependInt32Slot(23, c2crs, 0)
}
func MissionAssignment_IngestAddC2spd(builder *flatbuffers.Builder, c2spd int32) {
	builder.PrependInt32Slot(24, c2spd, 0)
}
func MissionAssignment_IngestAddC2specialinterestindicator(builder *flatbuffers.Builder, c2specialinterestindicator flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(25, flatbuffers.UOffsetT(c2specialinterestindicator), 0)
}
func MissionAssignment_IngestAddC2exerciseindicator(builder *flatbuffers.Builder, c2exerciseindicator flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(26, flatbuffers.UOffsetT(c2exerciseindicator), 0)
}
func MissionAssignment_IngestAddC2exercisemof(builder *flatbuffers.Builder, c2exercisemof flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(27, flatbuffers.UOffsetT(c2exercisemof), 0)
}
func MissionAssignment_IngestAddC3lat(builder *flatbuffers.Builder, c3lat float64) {
	builder.PrependFloat64Slot(28, c3lat, 0.0)
}
func MissionAssignment_IngestAddC3lon(builder *flatbuffers.Builder, c3lon float64) {
	builder.PrependFloat64Slot(29, c3lon, 0.0)
}
func MissionAssignment_IngestAddC3elv(builder *flatbuffers.Builder, c3elv float64) {
	builder.PrependFloat64Slot(30, c3elv, 0.0)
}
func MissionAssignment_IngestAddC3ptl(builder *flatbuffers.Builder, c3ptl flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(31, flatbuffers.UOffsetT(c3ptl), 0)
}
func MissionAssignment_IngestAddC3ptnum(builder *flatbuffers.Builder, c3ptnum flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(32, flatbuffers.UOffsetT(c3ptnum), 0)
}
func MissionAssignment_IngestAddC4tgt(builder *flatbuffers.Builder, c4tgt flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(33, flatbuffers.UOffsetT(c4tgt), 0)
}
func MissionAssignment_IngestAddC4def(builder *flatbuffers.Builder, c4def flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(34, flatbuffers.UOffsetT(c4def), 0)
}
func MissionAssignment_IngestAddC4runin(builder *flatbuffers.Builder, c4runin int32) {
	builder.PrependInt32Slot(35, c4runin, 0)
}
func MissionAssignment_IngestAddC4egress(builder *flatbuffers.Builder, c4egress int32) {
	builder.PrependInt32Slot(36, c4egress, 0)
}
func MissionAssignment_IngestAddC4numberofstores(builder *flatbuffers.Builder, c4numberofstores int32) {
	builder.PrependInt32Slot(37, c4numberofstores, 0)
}
func MissionAssignment_IngestAddC4typeofstores(builder *flatbuffers.Builder, c4typeofstores int32) {
	builder.PrependInt32Slot(38, c4typeofstores, 0)
}
func MissionAssignment_IngestAddC4timediscrete(builder *flatbuffers.Builder, c4timediscrete flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(39, flatbuffers.UOffsetT(c4timediscrete), 0)
}
func MissionAssignment_IngestAddC4tm(builder *flatbuffers.Builder, c4tm int32) {
	builder.PrependInt32Slot(40, c4tm, 0)
}
func MissionAssignment_IngestAddC4colon(builder *flatbuffers.Builder, c4colon int32) {
	builder.PrependInt32Slot(41, c4colon, 0)
}
func MissionAssignment_IngestAddC4mod(builder *flatbuffers.Builder, c4mod int32) {
	builder.PrependInt32Slot(42, c4mod, 0)
}
func MissionAssignment_IngestAddC5haeadj(builder *flatbuffers.Builder, c5haeadj int32) {
	builder.PrependInt32Slot(43, c5haeadj, 0)
}
func MissionAssignment_IngestAddC5tw(builder *flatbuffers.Builder, c5tw int32) {
	builder.PrependInt32Slot(44, c5tw, 0)
}
func MissionAssignment_IngestAddC5tgtbrng(builder *flatbuffers.Builder, c5tgtbrng int32) {
	builder.PrependInt32Slot(45, c5tgtbrng, 0)
}
func MissionAssignment_IngestAddC5latlsb(builder *flatbuffers.Builder, c5latlsb int32) {
	builder.PrependInt32Slot(46, c5latlsb, 0)
}
func MissionAssignment_IngestAddC5lonlsb(builder *flatbuffers.Builder, c5lonlsb int32) {
	builder.PrependInt32Slot(47, c5lonlsb, 0)
}
func MissionAssignment_IngestAddC5elevationlsbs(builder *flatbuffers.Builder, c5elevationlsbs int32) {
	builder.PrependInt32Slot(48, c5elevationlsbs, 0)
}
func MissionAssignment_IngestAddC5colon(builder *flatbuffers.Builder, c5colon int32) {
	builder.PrependInt32Slot(49, c5colon, 0)
}
func MissionAssignment_IngestAddC6laser(builder *flatbuffers.Builder, c6laser int32) {
	builder.PrependInt32Slot(50, c6laser, 0)
}
func MissionAssignment_IngestAddC6intel(builder *flatbuffers.Builder, c6intel int32) {
	builder.PrependInt32Slot(51, c6intel, 0)
}
func MissionAssignment_IngestAddC6tnr3(builder *flatbuffers.Builder, c6tnr3 int32) {
	builder.PrependInt32Slot(52, c6tnr3, 0)
}
func MissionAssignment_IngestAddC6dspct(builder *flatbuffers.Builder, c6dspct flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(53, flatbuffers.UOffsetT(c6dspct), 0)
}
func MissionAssignment_IngestAddC6dspc(builder *flatbuffers.Builder, c6dspc flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(54, flatbuffers.UOffsetT(c6dspc), 0)
}
func MissionAssignment_IngestAddC6fplpm(builder *flatbuffers.Builder, c6fplpm flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(55, flatbuffers.UOffsetT(c6fplpm), 0)
}
func MissionAssignment_IngestAddC6longpm(builder *flatbuffers.Builder, c6longpm flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(56, flatbuffers.UOffsetT(c6longpm), 0)
}
func MissionAssignment_IngestAddC7tnor(builder *flatbuffers.Builder, c7tnor flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(57, flatbuffers.UOffsetT(c7tnor), 0)
}
func MissionAssignment_IngestAddC7in3p(builder *flatbuffers.Builder, c7in3p int32) {
	builder.PrependInt32Slot(58, c7in3p, 0)
}
func MissionAssignment_IngestAddC7elang2(builder *flatbuffers.Builder, c7elang2 float64) {
	builder.PrependFloat64Slot(59, c7elang2, 0.0)
}
func MissionAssignment_IngestAddCreatedAt(builder *flatbuffers.Builder, createdAt flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(60, flatbuffers.UOffsetT(createdAt), 0)
}
func MissionAssignment_IngestAddCreatedBy(builder *flatbuffers.Builder, createdBy flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(61, flatbuffers.UOffsetT(createdBy), 0)
}
func MissionAssignment_IngestAddSource(builder *flatbuffers.Builder, source flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(62, flatbuffers.UOffsetT(source), 0)
}
func MissionAssignment_IngestAddOrigin(builder *flatbuffers.Builder, origin flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(63, flatbuffers.UOffsetT(origin), 0)
}
func MissionAssignment_IngestAddDataMode(builder *flatbuffers.Builder, dataMode MissionAssignment_Ingest_dataMode_Enum) {
	builder.PrependInt8Slot(64, int8(dataMode), 0)
}
func MissionAssignment_IngestAddOrigNetwork(builder *flatbuffers.Builder, origNetwork flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(65, flatbuffers.UOffsetT(origNetwork), 0)
}
func MissionAssignment_IngestEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
