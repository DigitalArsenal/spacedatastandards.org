// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package AircraftMissionTasking_Abridged

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

/// /// Collection that specifies the tasked country, tasked service, unit and mission level tasking for this ATO.
type AircraftMissionTasking_Abridged struct {
	_tab flatbuffers.Table
}

const AircraftMissionTasking_AbridgedIdentifier = "AIRC"

func GetRootAsAircraftMissionTasking_Abridged(buf []byte, offset flatbuffers.UOffsetT) *AircraftMissionTasking_Abridged {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &AircraftMissionTasking_Abridged{}
	x.Init(buf, n+offset)
	return x
}

func FinishAircraftMissionTasking_AbridgedBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	identifierBytes := []byte(AircraftMissionTasking_AbridgedIdentifier)
	builder.FinishWithFileIdentifier(offset, identifierBytes)
}

func AircraftMissionTasking_AbridgedBufferHasIdentifier(buf []byte) bool {
	return flatbuffers.BufferHasIdentifier(buf, AircraftMissionTasking_AbridgedIdentifier)
}

func GetSizePrefixedRootAsAircraftMissionTasking_Abridged(buf []byte, offset flatbuffers.UOffsetT) *AircraftMissionTasking_Abridged {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &AircraftMissionTasking_Abridged{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedAircraftMissionTasking_AbridgedBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	identifierBytes := []byte(AircraftMissionTasking_AbridgedIdentifier)
	builder.FinishSizePrefixedWithFileIdentifier(offset, identifierBytes)
}

func SizePrefixedAircraftMissionTasking_AbridgedBufferHasIdentifier(buf []byte) bool {
	return flatbuffers.SizePrefixedBufferHasIdentifier(buf, AircraftMissionTasking_AbridgedIdentifier)
}

func (rcv *AircraftMissionTasking_Abridged) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *AircraftMissionTasking_Abridged) Table() flatbuffers.Table {
	return rcv._tab
}

/// The country code responsible for conducting this aircraft mission tasking for the exercise or operation.
/// Example: /// Example: US
/// Constraints: Minimum length = 1, Maximum length = 4
func (rcv *AircraftMissionTasking_Abridged) CountryCode() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The country code responsible for conducting this aircraft mission tasking for the exercise or operation.
/// Example: /// Example: US
/// Constraints: Minimum length = 1, Maximum length = 4
/// The service tasked with conducting this aircraft mission tasking for the exercise or operation.
/// Example: /// Example: A
/// Constraints: Minimum length = 1, Maximum length = 1
func (rcv *AircraftMissionTasking_Abridged) TaskedService() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The service tasked with conducting this aircraft mission tasking for the exercise or operation.
/// Example: /// Example: A
/// Constraints: Minimum length = 1, Maximum length = 1
/// The designator of the unit that is tasked to perform this aircraft mission tasking.
/// Example: /// Example: AMPHIB5DIV
/// Constraints: Minimum length = 1, Maximum length = 36
func (rcv *AircraftMissionTasking_Abridged) UnitDesignator() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The designator of the unit that is tasked to perform this aircraft mission tasking.
/// Example: /// Example: AMPHIB5DIV
/// Constraints: Minimum length = 1, Maximum length = 36
/// The tasked units location expressed as an ICAO or a place name.
/// Example: /// Example: ICAO:KXXQ
/// Constraints: Minimum length = 0, Maximum length = 36
func (rcv *AircraftMissionTasking_Abridged) UnitLocName() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The tasked units location expressed as an ICAO or a place name.
/// Example: /// Example: ICAO:KXXQ
/// Constraints: Minimum length = 0, Maximum length = 36
/// An indicator of whether a mission is or will be a residual mission.
/// Example: /// Example: N
/// Constraints: Minimum length = 0, Maximum length = 1
func (rcv *AircraftMissionTasking_Abridged) ResMsnInd() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// An indicator of whether a mission is or will be a residual mission.
/// Example: /// Example: N
/// Constraints: Minimum length = 0, Maximum length = 1
/// The AMC number assigned to identify one aircraft from another.
/// Example: /// Example: AMC:JJXD123HA045
/// Constraints: Minimum length = 0, Maximum length = 16
func (rcv *AircraftMissionTasking_Abridged) AmcMsnNum() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The AMC number assigned to identify one aircraft from another.
/// Example: /// Example: AMC:JJXD123HA045
/// Constraints: Minimum length = 0, Maximum length = 16
/// The identifier for the composite set of missions for this operation/exercise.
/// Example: /// Example: ZZ
/// Constraints: Minimum length = 0, Maximum length = 8
func (rcv *AircraftMissionTasking_Abridged) PkgId() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The identifier for the composite set of missions for this operation/exercise.
/// Example: /// Example: ZZ
/// Constraints: Minimum length = 0, Maximum length = 8
/// The commander responsible for the planning and execution of the forces necessary to achieve desired objectives.
/// Example: /// Example: MC
/// Constraints: Minimum length = 0, Maximum length = 8
func (rcv *AircraftMissionTasking_Abridged) MsnCommander() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(18))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The commander responsible for the planning and execution of the forces necessary to achieve desired objectives.
/// Example: /// Example: MC
/// Constraints: Minimum length = 0, Maximum length = 8
/// The mission number assigned to this mission.
/// Example: /// Example: D123HA
/// Constraints: Minimum length = 0, Maximum length = 8
func (rcv *AircraftMissionTasking_Abridged) MsnNum() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(20))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The mission number assigned to this mission.
/// Example: /// Example: D123HA
/// Constraints: Minimum length = 0, Maximum length = 8
/// The code for the preferred type or designator for a tasked air mission.
/// Example: /// Example: CAS
/// Constraints: Minimum length = 0, Maximum length = 8
func (rcv *AircraftMissionTasking_Abridged) PriMsnType() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(22))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The code for the preferred type or designator for a tasked air mission.
/// Example: /// Example: CAS
/// Constraints: Minimum length = 0, Maximum length = 8
/// The code for the alternative type of a tasked air mission.
/// Example: /// Example: SEAD
/// Constraints: Minimum length = 0, Maximum length = 8
func (rcv *AircraftMissionTasking_Abridged) SecMsnType() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(24))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The code for the alternative type of a tasked air mission.
/// Example: /// Example: SEAD
/// Constraints: Minimum length = 0, Maximum length = 8
/// The readiness status expressed in time (minutes) for an aircraft to be airborne after the launch order is received or the time required for a missile unit to assume battle stations.
/// Example: /// Example: 30
/// Constraints: No constraints specified.
func (rcv *AircraftMissionTasking_Abridged) AlertStatus() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(26))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

/// The readiness status expressed in time (minutes) for an aircraft to be airborne after the launch order is received or the time required for a missile unit to assume battle stations.
/// Example: /// Example: 30
/// Constraints: No constraints specified.
func (rcv *AircraftMissionTasking_Abridged) MutateAlertStatus(n int32) bool {
	return rcv._tab.MutateInt32Slot(26, n)
}

/// The location or name specified for the departure of the tasked air mission.
/// Example: /// Example: ICAO:KBIF
/// Constraints: Minimum length = 0, Maximum length = 36
func (rcv *AircraftMissionTasking_Abridged) DepLocName() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(28))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The location or name specified for the departure of the tasked air mission.
/// Example: /// Example: ICAO:KBIF
/// Constraints: Minimum length = 0, Maximum length = 36
/// The departure location specified in UTM (100 meter) coordinates for the tasked air mission.
/// Example: /// Example: 32WDL123123
/// Constraints: Minimum length = 0, Maximum length = 36
func (rcv *AircraftMissionTasking_Abridged) DepLocUtm() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(30))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The departure location specified in UTM (100 meter) coordinates for the tasked air mission.
/// Example: /// Example: 32WDL123123
/// Constraints: Minimum length = 0, Maximum length = 36
/// WGS-84 latitude of the departure location, in degrees. -90 to 90 degrees (negative values south of equator) for this tasked air mission.
/// Example: /// Example: 35.123
/// Constraints: No constraints specified.
func (rcv *AircraftMissionTasking_Abridged) DepLocLat() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(32))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// WGS-84 latitude of the departure location, in degrees. -90 to 90 degrees (negative values south of equator) for this tasked air mission.
/// Example: /// Example: 35.123
/// Constraints: No constraints specified.
func (rcv *AircraftMissionTasking_Abridged) MutateDepLocLat(n float64) bool {
	return rcv._tab.MutateFloat64Slot(32, n)
}

/// WGS-84 longitude of the departure location, in degrees. -180 to 180 degrees (negative values west of Prime Meridian) for this tasked air mission.
/// Example: /// Example: 79.2354
/// Constraints: No constraints specified.
func (rcv *AircraftMissionTasking_Abridged) DepLocLon() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(34))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// WGS-84 longitude of the departure location, in degrees. -180 to 180 degrees (negative values west of Prime Meridian) for this tasked air mission.
/// Example: /// Example: 79.2354
/// Constraints: No constraints specified.
func (rcv *AircraftMissionTasking_Abridged) MutateDepLocLon(n float64) bool {
	return rcv._tab.MutateFloat64Slot(34, n)
}

/// The time of departure for the tasked air mission in ISO8601 UTC format with millisecond precision.
/// Example: /// Example: 2021-10-25T12:00:00.123Z
/// Constraints: No constraints specified.
func (rcv *AircraftMissionTasking_Abridged) DepTime() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(36))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The time of departure for the tasked air mission in ISO8601 UTC format with millisecond precision.
/// Example: /// Example: 2021-10-25T12:00:00.123Z
/// Constraints: No constraints specified.
/// An array of locations specified for the recovery of the tasked air mission represented by varying formats.
/// Example: /// Example: ['ARRLOC:KBIF', 'ARRLOC:KDZ7']
/// Constraints: No constraints specified.
func (rcv *AircraftMissionTasking_Abridged) RcvyLocName(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(38))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *AircraftMissionTasking_Abridged) RcvyLocNameLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(38))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

/// An array of locations specified for the recovery of the tasked air mission represented by varying formats.
/// Example: /// Example: ['ARRLOC:KBIF', 'ARRLOC:KDZ7']
/// Constraints: No constraints specified.
/// An array of recovery locations specified in UTM (100 meter) coordinates for the tasked air mission.
/// Example: /// Example: ['ARRUTMO:32WDL123123', 'ARRUTMO:32WDL321321']
/// Constraints: No constraints specified.
func (rcv *AircraftMissionTasking_Abridged) RcvyLocUtm(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(40))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *AircraftMissionTasking_Abridged) RcvyLocUtmLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(40))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

/// An array of recovery locations specified in UTM (100 meter) coordinates for the tasked air mission.
/// Example: /// Example: ['ARRUTMO:32WDL123123', 'ARRUTMO:32WDL321321']
/// Constraints: No constraints specified.
/// An array of WGS-84 latitude of the recovery locations, in degrees. -90 to 90 degrees (negative values south of equator) for this tasked air mission.
/// Example: /// Example: [48.8584, 40.7554]
/// Constraints: No constraints specified.
func (rcv *AircraftMissionTasking_Abridged) RcvyLocLat(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(42))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *AircraftMissionTasking_Abridged) RcvyLocLatLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(42))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

/// An array of WGS-84 latitude of the recovery locations, in degrees. -90 to 90 degrees (negative values south of equator) for this tasked air mission.
/// Example: /// Example: [48.8584, 40.7554]
/// Constraints: No constraints specified.
/// An array of WGS-84 longitude of the recovery locations, in degrees. -180 to 180 degrees (negative values west of Prime Meridian) for this tasked air mission.
/// Example: /// Example: [2.2945, -73.9866]
/// Constraints: No constraints specified.
func (rcv *AircraftMissionTasking_Abridged) RcvyLocLon(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(44))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *AircraftMissionTasking_Abridged) RcvyLocLonLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(44))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

/// An array of WGS-84 longitude of the recovery locations, in degrees. -180 to 180 degrees (negative values west of Prime Meridian) for this tasked air mission.
/// Example: /// Example: [2.2945, -73.9866]
/// Constraints: No constraints specified.
/// An array of recovery times for the tasked air mission in ISO8601 UTC format with millisecond precision.
/// Example: /// Example: ['2021-10-25T16:00:00.234Z', '2021-10-26T16:00:00.234Z']
/// Constraints: No constraints specified.
func (rcv *AircraftMissionTasking_Abridged) RcvyTime(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(46))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *AircraftMissionTasking_Abridged) RcvyTimeLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(46))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

/// An array of recovery times for the tasked air mission in ISO8601 UTC format with millisecond precision.
/// Example: /// Example: ['2021-10-25T16:00:00.234Z', '2021-10-26T16:00:00.234Z']
/// Constraints: No constraints specified.
/// A collection of the individual aircraft assigned to this aircraft mission tasking.
/// Example: /// Example: No example provided.
/// Constraints: No constraints specified.
func (rcv *AircraftMissionTasking_Abridged) IndActasking(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(48))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *AircraftMissionTasking_Abridged) IndActaskingLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(48))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

/// A collection of the individual aircraft assigned to this aircraft mission tasking.
/// Example: /// Example: No example provided.
/// Constraints: No constraints specified.
/// A collection of aircraft mission location information for this aircraft mission tasking.
/// Example: /// Example: No example provided.
/// Constraints: No constraints specified.
func (rcv *AircraftMissionTasking_Abridged) AcMsnLocSeg(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(50))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *AircraftMissionTasking_Abridged) AcMsnLocSegLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(50))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

/// A collection of aircraft mission location information for this aircraft mission tasking.
/// Example: /// Example: No example provided.
/// Constraints: No constraints specified.
func AircraftMissionTasking_AbridgedStart(builder *flatbuffers.Builder) {
	builder.StartObject(24)
}
func AircraftMissionTasking_AbridgedAddCountryCode(builder *flatbuffers.Builder, countryCode flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(countryCode), 0)
}
func AircraftMissionTasking_AbridgedAddTaskedService(builder *flatbuffers.Builder, taskedService flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(taskedService), 0)
}
func AircraftMissionTasking_AbridgedAddUnitDesignator(builder *flatbuffers.Builder, unitDesignator flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(unitDesignator), 0)
}
func AircraftMissionTasking_AbridgedAddUnitLocName(builder *flatbuffers.Builder, unitLocName flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(3, flatbuffers.UOffsetT(unitLocName), 0)
}
func AircraftMissionTasking_AbridgedAddResMsnInd(builder *flatbuffers.Builder, resMsnInd flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(4, flatbuffers.UOffsetT(resMsnInd), 0)
}
func AircraftMissionTasking_AbridgedAddAmcMsnNum(builder *flatbuffers.Builder, amcMsnNum flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(5, flatbuffers.UOffsetT(amcMsnNum), 0)
}
func AircraftMissionTasking_AbridgedAddPkgId(builder *flatbuffers.Builder, pkgId flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(6, flatbuffers.UOffsetT(pkgId), 0)
}
func AircraftMissionTasking_AbridgedAddMsnCommander(builder *flatbuffers.Builder, msnCommander flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(7, flatbuffers.UOffsetT(msnCommander), 0)
}
func AircraftMissionTasking_AbridgedAddMsnNum(builder *flatbuffers.Builder, msnNum flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(8, flatbuffers.UOffsetT(msnNum), 0)
}
func AircraftMissionTasking_AbridgedAddPriMsnType(builder *flatbuffers.Builder, priMsnType flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(9, flatbuffers.UOffsetT(priMsnType), 0)
}
func AircraftMissionTasking_AbridgedAddSecMsnType(builder *flatbuffers.Builder, secMsnType flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(10, flatbuffers.UOffsetT(secMsnType), 0)
}
func AircraftMissionTasking_AbridgedAddAlertStatus(builder *flatbuffers.Builder, alertStatus int32) {
	builder.PrependInt32Slot(11, alertStatus, 0)
}
func AircraftMissionTasking_AbridgedAddDepLocName(builder *flatbuffers.Builder, depLocName flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(12, flatbuffers.UOffsetT(depLocName), 0)
}
func AircraftMissionTasking_AbridgedAddDepLocUtm(builder *flatbuffers.Builder, depLocUtm flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(13, flatbuffers.UOffsetT(depLocUtm), 0)
}
func AircraftMissionTasking_AbridgedAddDepLocLat(builder *flatbuffers.Builder, depLocLat float64) {
	builder.PrependFloat64Slot(14, depLocLat, 0.0)
}
func AircraftMissionTasking_AbridgedAddDepLocLon(builder *flatbuffers.Builder, depLocLon float64) {
	builder.PrependFloat64Slot(15, depLocLon, 0.0)
}
func AircraftMissionTasking_AbridgedAddDepTime(builder *flatbuffers.Builder, depTime flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(16, flatbuffers.UOffsetT(depTime), 0)
}
func AircraftMissionTasking_AbridgedAddRcvyLocName(builder *flatbuffers.Builder, rcvyLocName flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(17, flatbuffers.UOffsetT(rcvyLocName), 0)
}
func AircraftMissionTasking_AbridgedStartRcvyLocNameVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func AircraftMissionTasking_AbridgedAddRcvyLocUtm(builder *flatbuffers.Builder, rcvyLocUtm flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(18, flatbuffers.UOffsetT(rcvyLocUtm), 0)
}
func AircraftMissionTasking_AbridgedStartRcvyLocUtmVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func AircraftMissionTasking_AbridgedAddRcvyLocLat(builder *flatbuffers.Builder, rcvyLocLat flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(19, flatbuffers.UOffsetT(rcvyLocLat), 0)
}
func AircraftMissionTasking_AbridgedStartRcvyLocLatVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func AircraftMissionTasking_AbridgedAddRcvyLocLon(builder *flatbuffers.Builder, rcvyLocLon flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(20, flatbuffers.UOffsetT(rcvyLocLon), 0)
}
func AircraftMissionTasking_AbridgedStartRcvyLocLonVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func AircraftMissionTasking_AbridgedAddRcvyTime(builder *flatbuffers.Builder, rcvyTime flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(21, flatbuffers.UOffsetT(rcvyTime), 0)
}
func AircraftMissionTasking_AbridgedStartRcvyTimeVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func AircraftMissionTasking_AbridgedAddIndActasking(builder *flatbuffers.Builder, indActasking flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(22, flatbuffers.UOffsetT(indActasking), 0)
}
func AircraftMissionTasking_AbridgedStartIndActaskingVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func AircraftMissionTasking_AbridgedAddAcMsnLocSeg(builder *flatbuffers.Builder, acMsnLocSeg flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(23, flatbuffers.UOffsetT(acMsnLocSeg), 0)
}
func AircraftMissionTasking_AbridgedStartAcMsnLocSegVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func AircraftMissionTasking_AbridgedEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
