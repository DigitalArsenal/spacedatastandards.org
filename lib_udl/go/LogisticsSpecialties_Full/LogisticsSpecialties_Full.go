// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package LogisticsSpecialties_Full

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

/// /// The specialties required to implement this support item.
type LogisticsSpecialties_Full struct {
	_tab flatbuffers.Table
}

const LogisticsSpecialties_FullIdentifier = "LOGI"

func GetRootAsLogisticsSpecialties_Full(buf []byte, offset flatbuffers.UOffsetT) *LogisticsSpecialties_Full {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &LogisticsSpecialties_Full{}
	x.Init(buf, n+offset)
	return x
}

func FinishLogisticsSpecialties_FullBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	identifierBytes := []byte(LogisticsSpecialties_FullIdentifier)
	builder.FinishWithFileIdentifier(offset, identifierBytes)
}

func LogisticsSpecialties_FullBufferHasIdentifier(buf []byte) bool {
	return flatbuffers.BufferHasIdentifier(buf, LogisticsSpecialties_FullIdentifier)
}

func GetSizePrefixedRootAsLogisticsSpecialties_Full(buf []byte, offset flatbuffers.UOffsetT) *LogisticsSpecialties_Full {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &LogisticsSpecialties_Full{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedLogisticsSpecialties_FullBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	identifierBytes := []byte(LogisticsSpecialties_FullIdentifier)
	builder.FinishSizePrefixedWithFileIdentifier(offset, identifierBytes)
}

func SizePrefixedLogisticsSpecialties_FullBufferHasIdentifier(buf []byte) bool {
	return flatbuffers.SizePrefixedBufferHasIdentifier(buf, LogisticsSpecialties_FullIdentifier)
}

func (rcv *LogisticsSpecialties_Full) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *LogisticsSpecialties_Full) Table() flatbuffers.Table {
	return rcv._tab
}

/// Indicates where the repairs will be performed, or which shop specialty has been assigned responsibility for correcting the discrepancy. Shop specialties are normally listed in abbreviated format.
/// Example: /// Example: ELEN
/// Constraints: Minimum length = 0, Maximum length = 4
func (rcv *LogisticsSpecialties_Full) Specialty() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Indicates where the repairs will be performed, or which shop specialty has been assigned responsibility for correcting the discrepancy. Shop specialties are normally listed in abbreviated format.
/// Example: /// Example: ELEN
/// Constraints: Minimum length = 0, Maximum length = 4
/// Skill level of the mission response team member.
/// Example: /// Example: 3
/// Constraints: No constraints specified.
func (rcv *LogisticsSpecialties_Full) SkillLevel() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

/// Skill level of the mission response team member.
/// Example: /// Example: 3
/// Constraints: No constraints specified.
func (rcv *LogisticsSpecialties_Full) MutateSkillLevel(n int32) bool {
	return rcv._tab.MutateInt32Slot(6, n)
}

/// The first name of the specialist.
/// Example: /// Example: JOHN
/// Constraints: Minimum length = 0, Maximum length = 20
func (rcv *LogisticsSpecialties_Full) FirstName() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The first name of the specialist.
/// Example: /// Example: JOHN
/// Constraints: Minimum length = 0, Maximum length = 20
/// The last name of the specialist.
/// Example: /// Example: SMITH
/// Constraints: Minimum length = 0, Maximum length = 30
func (rcv *LogisticsSpecialties_Full) LastName() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The last name of the specialist.
/// Example: /// Example: SMITH
/// Constraints: Minimum length = 0, Maximum length = 30
/// Military service rank designation.
/// Example: /// Example: MAJ
/// Constraints: Minimum length = 0, Maximum length = 6
func (rcv *LogisticsSpecialties_Full) RankCode() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Military service rank designation.
/// Example: /// Example: MAJ
/// Constraints: Minimum length = 0, Maximum length = 6
/// The last four digits of the specialist's social security number.
/// Example: /// Example: 9999
/// Constraints: Minimum length = 0, Maximum length = 4
func (rcv *LogisticsSpecialties_Full) Last4Ssn() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The last four digits of the specialist's social security number.
/// Example: /// Example: 9999
/// Constraints: Minimum length = 0, Maximum length = 4
/// Type code that determines role of the mission response team member. TC - Team Chief, TM - Team Member.
/// Example: /// Example: TC
/// Constraints: Minimum length = 0, Maximum length = 2
func (rcv *LogisticsSpecialties_Full) RoleTypeCode() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Type code that determines role of the mission response team member. TC - Team Chief, TM - Team Member.
/// Example: /// Example: TC
/// Constraints: Minimum length = 0, Maximum length = 2
func LogisticsSpecialties_FullStart(builder *flatbuffers.Builder) {
	builder.StartObject(7)
}
func LogisticsSpecialties_FullAddSpecialty(builder *flatbuffers.Builder, specialty flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(specialty), 0)
}
func LogisticsSpecialties_FullAddSkillLevel(builder *flatbuffers.Builder, skillLevel int32) {
	builder.PrependInt32Slot(1, skillLevel, 0)
}
func LogisticsSpecialties_FullAddFirstName(builder *flatbuffers.Builder, firstName flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(firstName), 0)
}
func LogisticsSpecialties_FullAddLastName(builder *flatbuffers.Builder, lastName flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(3, flatbuffers.UOffsetT(lastName), 0)
}
func LogisticsSpecialties_FullAddRankCode(builder *flatbuffers.Builder, rankCode flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(4, flatbuffers.UOffsetT(rankCode), 0)
}
func LogisticsSpecialties_FullAddLast4Ssn(builder *flatbuffers.Builder, last4Ssn flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(5, flatbuffers.UOffsetT(last4Ssn), 0)
}
func LogisticsSpecialties_FullAddRoleTypeCode(builder *flatbuffers.Builder, roleTypeCode flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(6, flatbuffers.UOffsetT(roleTypeCode), 0)
}
func LogisticsSpecialties_FullEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
