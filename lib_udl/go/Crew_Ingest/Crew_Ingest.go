// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package Crew_Ingest

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

/// /// Crew Services.
type Crew_Ingest struct {
	_tab flatbuffers.Table
}

const Crew_IngestIdentifier = "CREW"

func GetRootAsCrew_Ingest(buf []byte, offset flatbuffers.UOffsetT) *Crew_Ingest {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &Crew_Ingest{}
	x.Init(buf, n+offset)
	return x
}

func FinishCrew_IngestBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	identifierBytes := []byte(Crew_IngestIdentifier)
	builder.FinishWithFileIdentifier(offset, identifierBytes)
}

func Crew_IngestBufferHasIdentifier(buf []byte) bool {
	return flatbuffers.BufferHasIdentifier(buf, Crew_IngestIdentifier)
}

func GetSizePrefixedRootAsCrew_Ingest(buf []byte, offset flatbuffers.UOffsetT) *Crew_Ingest {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &Crew_Ingest{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedCrew_IngestBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	identifierBytes := []byte(Crew_IngestIdentifier)
	builder.FinishSizePrefixedWithFileIdentifier(offset, identifierBytes)
}

func SizePrefixedCrew_IngestBufferHasIdentifier(buf []byte) bool {
	return flatbuffers.SizePrefixedBufferHasIdentifier(buf, Crew_IngestIdentifier)
}

func (rcv *Crew_Ingest) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *Crew_Ingest) Table() flatbuffers.Table {
	return rcv._tab
}

/// Unique identifier of the record, auto-generated by the system.
/// Example: /// Example: bdad6945-c9e4-b829-f7be-1ad075541921
/// Constraints: Minimum length = 1, Maximum length = 36
func (rcv *Crew_Ingest) Id() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Unique identifier of the record, auto-generated by the system.
/// Example: /// Example: bdad6945-c9e4-b829-f7be-1ad075541921
/// Constraints: Minimum length = 1, Maximum length = 36
/// Classification marking of the data in IC/CAPCO Portion-marked format.
/// Example: /// Example: U
/// Constraints: Minimum length = 1, Maximum length = 128
func (rcv *Crew_Ingest) ClassificationMarking() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Classification marking of the data in IC/CAPCO Portion-marked format.
/// Example: /// Example: U
/// Constraints: Minimum length = 1, Maximum length = 128
/// Unique identifier of the formed crew provided by the originating source. Provided for systems that require tracking of an internal system generated ID.
/// Example: /// Example: JHJDHjhuu929o92
/// Constraints: Minimum length = 1, Maximum length = 36
func (rcv *Crew_Ingest) OrigCrewId() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Unique identifier of the formed crew provided by the originating source. Provided for systems that require tracking of an internal system generated ID.
/// Example: /// Example: JHJDHjhuu929o92
/// Constraints: Minimum length = 1, Maximum length = 36
/// Name of the formed crew.
/// Example: /// Example: falcon
/// Constraints: Minimum length = 0, Maximum length = 36
func (rcv *Crew_Ingest) CrewName() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Name of the formed crew.
/// Example: /// Example: falcon
/// Constraints: Minimum length = 0, Maximum length = 36
/// Crew Status (e.g. APPROVED, PENDING).
/// Example: /// Example: APPROVED
/// Constraints: Minimum length = 0, Maximum length = 64
func (rcv *Crew_Ingest) Status() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Crew Status (e.g. APPROVED, PENDING).
/// Example: /// Example: APPROVED
/// Constraints: Minimum length = 0, Maximum length = 64
/// Unique identifier of the Aircraft Sortie associated with this crew record.
/// Example: /// Example: 4ef3d1e8-ab08-ab70-498f-edc479734e5c
/// Constraints: Minimum length = 0, Maximum length = 36
func (rcv *Crew_Ingest) IdSortie() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Unique identifier of the Aircraft Sortie associated with this crew record.
/// Example: /// Example: 4ef3d1e8-ab08-ab70-498f-edc479734e5c
/// Constraints: Minimum length = 0, Maximum length = 36
/// Time the crew is legal for alert, in ISO8601 UTC format, with millisecond precision.
/// Example: /// Example: 2022-01-01T16:00:00.123Z
/// Constraints: No constraints specified.
func (rcv *Crew_Ingest) LegalAlertTime() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Time the crew is legal for alert, in ISO8601 UTC format, with millisecond precision.
/// Example: /// Example: 2022-01-01T16:00:00.123Z
/// Constraints: No constraints specified.
/// Time the crew is legal for bravo, in ISO8601 UTC format, with millisecond precision.
/// Example: /// Example: 2022-01-01T16:00:00.123Z
/// Constraints: No constraints specified.
func (rcv *Crew_Ingest) LegalBravoTime() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(18))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Time the crew is legal for bravo, in ISO8601 UTC format, with millisecond precision.
/// Example: /// Example: 2022-01-01T16:00:00.123Z
/// Constraints: No constraints specified.
/// Time the crew was alerted, in ISO8601 UTC format, with millisecond precision.
/// Example: /// Example: 2022-01-01T16:00:00.123Z
/// Constraints: No constraints specified.
func (rcv *Crew_Ingest) AlertedTime() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(20))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Time the crew was alerted, in ISO8601 UTC format, with millisecond precision.
/// Example: /// Example: 2022-01-01T16:00:00.123Z
/// Constraints: No constraints specified.
/// Scheduled return time, in ISO8601 UTC format, with millisecond precision.
/// Example: /// Example: 2022-01-01T16:00:00.123Z
/// Constraints: No constraints specified.
func (rcv *Crew_Ingest) ReturnTime() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(22))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Scheduled return time, in ISO8601 UTC format, with millisecond precision.
/// Example: /// Example: 2022-01-01T16:00:00.123Z
/// Constraints: No constraints specified.
/// Crew Flight Duty Period (FDP) eligibility type.
/// Example: /// Example: A
/// Constraints: Minimum length = 0, Maximum length = 32
func (rcv *Crew_Ingest) FdpEligType() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(24))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Crew Flight Duty Period (FDP) eligibility type.
/// Example: /// Example: A
/// Constraints: Minimum length = 0, Maximum length = 32
/// Flight Duty Period (FDP) type.
/// Example: /// Example: A
/// Constraints: Minimum length = 0, Maximum length = 32
func (rcv *Crew_Ingest) FdpType() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(26))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Flight Duty Period (FDP) type.
/// Example: /// Example: A
/// Constraints: Minimum length = 0, Maximum length = 32
/// Crew type.
/// Example: /// Example: AIRLAND
/// Constraints: Minimum length = 0, Maximum length = 32
func (rcv *Crew_Ingest) CrewType() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(28))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Crew type.
/// Example: /// Example: AIRLAND
/// Constraints: Minimum length = 0, Maximum length = 32
/// The crew's Aviation Resource Management System (ARMS) unit.  If multiple units exist, use the Aircraft Commander's Unit.
/// Example: /// Example: 00016ALSQ
/// Constraints: Minimum length = 0, Maximum length = 32
func (rcv *Crew_Ingest) ArmsCrewUnit() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(30))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The crew's Aviation Resource Management System (ARMS) unit.  If multiple units exist, use the Aircraft Commander's Unit.
/// Example: /// Example: 00016ALSQ
/// Constraints: Minimum length = 0, Maximum length = 32
/// CrewMembers Collection.
/// Example: /// Example: No example provided.
/// Constraints: No constraints specified.
func (rcv *Crew_Ingest) CrewMembers(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(32))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *Crew_Ingest) CrewMembersLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(32))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

/// CrewMembers Collection.
/// Example: /// Example: No example provided.
/// Constraints: No constraints specified.
/// Time the row was created in the database, auto-populated by the system.
/// Example: /// Example: 2022-01-01T16:00:00.123Z
/// Constraints: No constraints specified.
func (rcv *Crew_Ingest) CreatedAt() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(34))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Time the row was created in the database, auto-populated by the system.
/// Example: /// Example: 2022-01-01T16:00:00.123Z
/// Constraints: No constraints specified.
/// Application user who created the row in the database, auto-populated by the system.
/// Example: /// Example: some.user
/// Constraints: Minimum length = 1, Maximum length = 64
func (rcv *Crew_Ingest) CreatedBy() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(36))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Application user who created the row in the database, auto-populated by the system.
/// Example: /// Example: some.user
/// Constraints: Minimum length = 1, Maximum length = 64
/// Time the row was created in the database, auto-populated by the system.
/// Example: /// Example: 2022-01-01T16:00:00.123Z
/// Constraints: No constraints specified.
func (rcv *Crew_Ingest) UpdatedAt() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(38))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Time the row was created in the database, auto-populated by the system.
/// Example: /// Example: 2022-01-01T16:00:00.123Z
/// Constraints: No constraints specified.
/// Application user who created the row in the database, auto-populated by the system.
/// Example: /// Example: some.user
/// Constraints: Minimum length = 0, Maximum length = 64
func (rcv *Crew_Ingest) UpdatedBy() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(40))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Application user who created the row in the database, auto-populated by the system.
/// Example: /// Example: some.user
/// Constraints: Minimum length = 0, Maximum length = 64
/// Source of the data.
/// Example: /// Example: Bluestaq
/// Constraints: Minimum length = 1, Maximum length = 64
func (rcv *Crew_Ingest) Source() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(42))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Source of the data.
/// Example: /// Example: Bluestaq
/// Constraints: Minimum length = 1, Maximum length = 64
/// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
/// Example: /// Example: THIRD_PARTY_DATASOURCE
/// Constraints: Minimum length = 0, Maximum length = 64
func (rcv *Crew_Ingest) Origin() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(44))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
/// Example: /// Example: THIRD_PARTY_DATASOURCE
/// Constraints: Minimum length = 0, Maximum length = 64
/// The originating source network on which this record was created, auto-populated by the system.
/// Example: /// Example: OPS1
/// Constraints: Minimum length = 0, Maximum length = 32
func (rcv *Crew_Ingest) OrigNetwork() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(46))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The originating source network on which this record was created, auto-populated by the system.
/// Example: /// Example: OPS1
/// Constraints: Minimum length = 0, Maximum length = 32
/// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
/// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
/// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
/// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
/// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
/// Example: /// Example: TEST
/// Constraints: Minimum length = 1, Maximum length = 32
func (rcv *Crew_Ingest) DataMode() Crew_Ingest_dataMode_Enum {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(48))
	if o != 0 {
		return Crew_Ingest_dataMode_Enum(rcv._tab.GetInt8(o + rcv._tab.Pos))
	}
	return 0
}

/// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
/// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
/// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
/// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
/// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
/// Example: /// Example: TEST
/// Constraints: Minimum length = 1, Maximum length = 32
func (rcv *Crew_Ingest) MutateDataMode(n Crew_Ingest_dataMode_Enum) bool {
	return rcv._tab.MutateInt8Slot(48, int8(n))
}

func Crew_IngestStart(builder *flatbuffers.Builder) {
	builder.StartObject(23)
}
func Crew_IngestAddId(builder *flatbuffers.Builder, id flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(id), 0)
}
func Crew_IngestAddClassificationMarking(builder *flatbuffers.Builder, classificationMarking flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(classificationMarking), 0)
}
func Crew_IngestAddOrigCrewId(builder *flatbuffers.Builder, origCrewId flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(origCrewId), 0)
}
func Crew_IngestAddCrewName(builder *flatbuffers.Builder, crewName flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(3, flatbuffers.UOffsetT(crewName), 0)
}
func Crew_IngestAddStatus(builder *flatbuffers.Builder, status flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(4, flatbuffers.UOffsetT(status), 0)
}
func Crew_IngestAddIdSortie(builder *flatbuffers.Builder, idSortie flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(5, flatbuffers.UOffsetT(idSortie), 0)
}
func Crew_IngestAddLegalAlertTime(builder *flatbuffers.Builder, legalAlertTime flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(6, flatbuffers.UOffsetT(legalAlertTime), 0)
}
func Crew_IngestAddLegalBravoTime(builder *flatbuffers.Builder, legalBravoTime flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(7, flatbuffers.UOffsetT(legalBravoTime), 0)
}
func Crew_IngestAddAlertedTime(builder *flatbuffers.Builder, alertedTime flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(8, flatbuffers.UOffsetT(alertedTime), 0)
}
func Crew_IngestAddReturnTime(builder *flatbuffers.Builder, returnTime flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(9, flatbuffers.UOffsetT(returnTime), 0)
}
func Crew_IngestAddFdpEligType(builder *flatbuffers.Builder, fdpEligType flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(10, flatbuffers.UOffsetT(fdpEligType), 0)
}
func Crew_IngestAddFdpType(builder *flatbuffers.Builder, fdpType flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(11, flatbuffers.UOffsetT(fdpType), 0)
}
func Crew_IngestAddCrewType(builder *flatbuffers.Builder, crewType flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(12, flatbuffers.UOffsetT(crewType), 0)
}
func Crew_IngestAddArmsCrewUnit(builder *flatbuffers.Builder, armsCrewUnit flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(13, flatbuffers.UOffsetT(armsCrewUnit), 0)
}
func Crew_IngestAddCrewMembers(builder *flatbuffers.Builder, crewMembers flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(14, flatbuffers.UOffsetT(crewMembers), 0)
}
func Crew_IngestStartCrewMembersVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func Crew_IngestAddCreatedAt(builder *flatbuffers.Builder, createdAt flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(15, flatbuffers.UOffsetT(createdAt), 0)
}
func Crew_IngestAddCreatedBy(builder *flatbuffers.Builder, createdBy flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(16, flatbuffers.UOffsetT(createdBy), 0)
}
func Crew_IngestAddUpdatedAt(builder *flatbuffers.Builder, updatedAt flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(17, flatbuffers.UOffsetT(updatedAt), 0)
}
func Crew_IngestAddUpdatedBy(builder *flatbuffers.Builder, updatedBy flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(18, flatbuffers.UOffsetT(updatedBy), 0)
}
func Crew_IngestAddSource(builder *flatbuffers.Builder, source flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(19, flatbuffers.UOffsetT(source), 0)
}
func Crew_IngestAddOrigin(builder *flatbuffers.Builder, origin flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(20, flatbuffers.UOffsetT(origin), 0)
}
func Crew_IngestAddOrigNetwork(builder *flatbuffers.Builder, origNetwork flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(21, flatbuffers.UOffsetT(origNetwork), 0)
}
func Crew_IngestAddDataMode(builder *flatbuffers.Builder, dataMode Crew_Ingest_dataMode_Enum) {
	builder.PrependInt8Slot(22, int8(dataMode), 0)
}
func Crew_IngestEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
