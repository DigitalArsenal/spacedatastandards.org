// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package EvacAllergy_Abridged

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

/// /// Allergy information.
type EvacAllergy_Abridged struct {
	_tab flatbuffers.Table
}

const EvacAllergy_AbridgedIdentifier = "EVAC"

func GetRootAsEvacAllergy_Abridged(buf []byte, offset flatbuffers.UOffsetT) *EvacAllergy_Abridged {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &EvacAllergy_Abridged{}
	x.Init(buf, n+offset)
	return x
}

func FinishEvacAllergy_AbridgedBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	identifierBytes := []byte(EvacAllergy_AbridgedIdentifier)
	builder.FinishWithFileIdentifier(offset, identifierBytes)
}

func EvacAllergy_AbridgedBufferHasIdentifier(buf []byte) bool {
	return flatbuffers.BufferHasIdentifier(buf, EvacAllergy_AbridgedIdentifier)
}

func GetSizePrefixedRootAsEvacAllergy_Abridged(buf []byte, offset flatbuffers.UOffsetT) *EvacAllergy_Abridged {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &EvacAllergy_Abridged{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedEvacAllergy_AbridgedBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	identifierBytes := []byte(EvacAllergy_AbridgedIdentifier)
	builder.FinishSizePrefixedWithFileIdentifier(offset, identifierBytes)
}

func SizePrefixedEvacAllergy_AbridgedBufferHasIdentifier(buf []byte) bool {
	return flatbuffers.SizePrefixedBufferHasIdentifier(buf, EvacAllergy_AbridgedIdentifier)
}

func (rcv *EvacAllergy_Abridged) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *EvacAllergy_Abridged) Table() flatbuffers.Table {
	return rcv._tab
}

/// Type of patient allergy (e.g.  PENICILLIN, SULFA, OTHER).
/// Example: /// Example: PENICILLIN
/// Constraints: Minimum length = 0, Maximum length = 64
func (rcv *EvacAllergy_Abridged) Type() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Type of patient allergy (e.g.  PENICILLIN, SULFA, OTHER).
/// Example: /// Example: PENICILLIN
/// Constraints: Minimum length = 0, Maximum length = 64
/// Additional comments on the  patient's allergy information.
/// Example: /// Example: Comments on the patient's allergies.
/// Constraints: Minimum length = 0, Maximum length = 1024
func (rcv *EvacAllergy_Abridged) Comments() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Additional comments on the  patient's allergy information.
/// Example: /// Example: Comments on the patient's allergies.
/// Constraints: Minimum length = 0, Maximum length = 1024
func EvacAllergy_AbridgedStart(builder *flatbuffers.Builder) {
	builder.StartObject(2)
}
func EvacAllergy_AbridgedAddType(builder *flatbuffers.Builder, type_ flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(type_), 0)
}
func EvacAllergy_AbridgedAddComments(builder *flatbuffers.Builder, comments flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(comments), 0)
}
func EvacAllergy_AbridgedEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
