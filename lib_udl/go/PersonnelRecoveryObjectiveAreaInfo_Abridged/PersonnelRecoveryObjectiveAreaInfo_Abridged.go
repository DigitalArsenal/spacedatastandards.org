// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package PersonnelRecoveryObjectiveAreaInfo_Abridged

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

/// /// Objective Area Information.
type PersonnelRecoveryObjectiveAreaInfo_Abridged struct {
	_tab flatbuffers.Table
}

const PersonnelRecoveryObjectiveAreaInfo_AbridgedIdentifier = "PERS"

func GetRootAsPersonnelRecoveryObjectiveAreaInfo_Abridged(buf []byte, offset flatbuffers.UOffsetT) *PersonnelRecoveryObjectiveAreaInfo_Abridged {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &PersonnelRecoveryObjectiveAreaInfo_Abridged{}
	x.Init(buf, n+offset)
	return x
}

func FinishPersonnelRecoveryObjectiveAreaInfo_AbridgedBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	identifierBytes := []byte(PersonnelRecoveryObjectiveAreaInfo_AbridgedIdentifier)
	builder.FinishWithFileIdentifier(offset, identifierBytes)
}

func PersonnelRecoveryObjectiveAreaInfo_AbridgedBufferHasIdentifier(buf []byte) bool {
	return flatbuffers.BufferHasIdentifier(buf, PersonnelRecoveryObjectiveAreaInfo_AbridgedIdentifier)
}

func GetSizePrefixedRootAsPersonnelRecoveryObjectiveAreaInfo_Abridged(buf []byte, offset flatbuffers.UOffsetT) *PersonnelRecoveryObjectiveAreaInfo_Abridged {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &PersonnelRecoveryObjectiveAreaInfo_Abridged{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedPersonnelRecoveryObjectiveAreaInfo_AbridgedBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	identifierBytes := []byte(PersonnelRecoveryObjectiveAreaInfo_AbridgedIdentifier)
	builder.FinishSizePrefixedWithFileIdentifier(offset, identifierBytes)
}

func SizePrefixedPersonnelRecoveryObjectiveAreaInfo_AbridgedBufferHasIdentifier(buf []byte) bool {
	return flatbuffers.SizePrefixedBufferHasIdentifier(buf, PersonnelRecoveryObjectiveAreaInfo_AbridgedIdentifier)
}

func (rcv *PersonnelRecoveryObjectiveAreaInfo_Abridged) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *PersonnelRecoveryObjectiveAreaInfo_Abridged) Table() flatbuffers.Table {
	return rcv._tab
}

/// Array of the WGS-84 latitude (-90 to 90, negative values south of the equator) in degrees, longitude (-180 to 180, negative values west of Prime Meridian) in degrees, and altitude, in meters, of the pz location.  This array must contain a minimum of 2 elements (latitude and longitude), and may contain an optional 3rd element (altitude).
/// Example: /// Example: [103.23, 30.445]
/// Constraints: No constraints specified.
func (rcv *PersonnelRecoveryObjectiveAreaInfo_Abridged) PzLocation(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *PersonnelRecoveryObjectiveAreaInfo_Abridged) PzLocationLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

/// Array of the WGS-84 latitude (-90 to 90, negative values south of the equator) in degrees, longitude (-180 to 180, negative values west of Prime Meridian) in degrees, and altitude, in meters, of the pz location.  This array must contain a minimum of 2 elements (latitude and longitude), and may contain an optional 3rd element (altitude).
/// Example: /// Example: [103.23, 30.445]
/// Constraints: No constraints specified.
/// Description of the pickup zone location.
/// Example: /// Example: Near the lake.
/// Constraints: Minimum length = 0, Maximum length = 1024
func (rcv *PersonnelRecoveryObjectiveAreaInfo_Abridged) PzDesc() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Description of the pickup zone location.
/// Example: /// Example: Near the lake.
/// Constraints: Minimum length = 0, Maximum length = 1024
/// The call sign of the on-scene commander.
/// Example: /// Example: STARFOX
/// Constraints: Minimum length = 0, Maximum length = 128
func (rcv *PersonnelRecoveryObjectiveAreaInfo_Abridged) OscCallSign() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The call sign of the on-scene commander.
/// Example: /// Example: STARFOX
/// Constraints: Minimum length = 0, Maximum length = 128
/// The radio frequency of the on-scene commander.
/// Example: /// Example: 12.55
/// Constraints: No constraints specified.
func (rcv *PersonnelRecoveryObjectiveAreaInfo_Abridged) OscFreq() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// The radio frequency of the on-scene commander.
/// Example: /// Example: 12.55
/// Constraints: No constraints specified.
func (rcv *PersonnelRecoveryObjectiveAreaInfo_Abridged) MutateOscFreq(n float64) bool {
	return rcv._tab.MutateFloat64Slot(10, n)
}

/// Information detailing knowledge of enemies in the area.
/// Example: /// Example: No example provided.
/// Constraints: No constraints specified.
func (rcv *PersonnelRecoveryObjectiveAreaInfo_Abridged) EnemyData(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *PersonnelRecoveryObjectiveAreaInfo_Abridged) EnemyDataLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

/// Information detailing knowledge of enemies in the area.
/// Example: /// Example: No example provided.
/// Constraints: No constraints specified.
func PersonnelRecoveryObjectiveAreaInfo_AbridgedStart(builder *flatbuffers.Builder) {
	builder.StartObject(5)
}
func PersonnelRecoveryObjectiveAreaInfo_AbridgedAddPzLocation(builder *flatbuffers.Builder, pzLocation flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(pzLocation), 0)
}
func PersonnelRecoveryObjectiveAreaInfo_AbridgedStartPzLocationVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func PersonnelRecoveryObjectiveAreaInfo_AbridgedAddPzDesc(builder *flatbuffers.Builder, pzDesc flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(pzDesc), 0)
}
func PersonnelRecoveryObjectiveAreaInfo_AbridgedAddOscCallSign(builder *flatbuffers.Builder, oscCallSign flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(oscCallSign), 0)
}
func PersonnelRecoveryObjectiveAreaInfo_AbridgedAddOscFreq(builder *flatbuffers.Builder, oscFreq float64) {
	builder.PrependFloat64Slot(3, oscFreq, 0.0)
}
func PersonnelRecoveryObjectiveAreaInfo_AbridgedAddEnemyData(builder *flatbuffers.Builder, enemyData flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(4, flatbuffers.UOffsetT(enemyData), 0)
}
func PersonnelRecoveryObjectiveAreaInfo_AbridgedStartEnemyDataVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func PersonnelRecoveryObjectiveAreaInfo_AbridgedEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
