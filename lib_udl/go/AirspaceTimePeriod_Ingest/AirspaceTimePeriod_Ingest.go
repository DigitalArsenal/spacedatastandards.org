// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package AirspaceTimePeriod_Ingest

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

/// /// The timePeriod set describes the effective datetime for a given airspace control means.
type AirspaceTimePeriod_Ingest struct {
	_tab flatbuffers.Table
}

const AirspaceTimePeriod_IngestIdentifier = "AIRS"

func GetRootAsAirspaceTimePeriod_Ingest(buf []byte, offset flatbuffers.UOffsetT) *AirspaceTimePeriod_Ingest {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &AirspaceTimePeriod_Ingest{}
	x.Init(buf, n+offset)
	return x
}

func FinishAirspaceTimePeriod_IngestBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	identifierBytes := []byte(AirspaceTimePeriod_IngestIdentifier)
	builder.FinishWithFileIdentifier(offset, identifierBytes)
}

func AirspaceTimePeriod_IngestBufferHasIdentifier(buf []byte) bool {
	return flatbuffers.BufferHasIdentifier(buf, AirspaceTimePeriod_IngestIdentifier)
}

func GetSizePrefixedRootAsAirspaceTimePeriod_Ingest(buf []byte, offset flatbuffers.UOffsetT) *AirspaceTimePeriod_Ingest {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &AirspaceTimePeriod_Ingest{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedAirspaceTimePeriod_IngestBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	identifierBytes := []byte(AirspaceTimePeriod_IngestIdentifier)
	builder.FinishSizePrefixedWithFileIdentifier(offset, identifierBytes)
}

func SizePrefixedAirspaceTimePeriod_IngestBufferHasIdentifier(buf []byte) bool {
	return flatbuffers.SizePrefixedBufferHasIdentifier(buf, AirspaceTimePeriod_IngestIdentifier)
}

func (rcv *AirspaceTimePeriod_Ingest) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *AirspaceTimePeriod_Ingest) Table() flatbuffers.Table {
	return rcv._tab
}

/// The airspace time code associated with the ACO. Can be DISCRETE, a fixed time block, or INTERVAL, a repeating time block.
/// Example: /// Example: DISCRETE
/// Constraints: Minimum length = 0, Maximum length = 8
func (rcv *AirspaceTimePeriod_Ingest) TimeMode() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The airspace time code associated with the ACO. Can be DISCRETE, a fixed time block, or INTERVAL, a repeating time block.
/// Example: /// Example: DISCRETE
/// Constraints: Minimum length = 0, Maximum length = 8
/// The start time designating that the airspace control order is active.
/// Example: /// Example: 141325ZFEB2002
/// Constraints: Minimum length = 0, Maximum length = 16
func (rcv *AirspaceTimePeriod_Ingest) TimeStart() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The start time designating that the airspace control order is active.
/// Example: /// Example: 141325ZFEB2002
/// Constraints: Minimum length = 0, Maximum length = 16
/// The end time designating that the airspace control order is no longer active. Can contain datetime information or a stop time qualifier code, such as AFTER, NET, UFN, etc.
/// Example: /// Example: 141325ZFEB2002
/// Constraints: Minimum length = 0, Maximum length = 16
func (rcv *AirspaceTimePeriod_Ingest) TimeEnd() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The end time designating that the airspace control order is no longer active. Can contain datetime information or a stop time qualifier code, such as AFTER, NET, UFN, etc.
/// Example: /// Example: 141325ZFEB2002
/// Constraints: Minimum length = 0, Maximum length = 16
/// Mandatory if timeMode is INTERVAL. Can be on of the interval frequency codes, such as BIWEEKLY, DAILY, YEARLY, etc.
/// Example: /// Example: ['WEEKLY']
/// Constraints: No constraints specified.
func (rcv *AirspaceTimePeriod_Ingest) IntFreq(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *AirspaceTimePeriod_Ingest) IntFreqLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

/// Mandatory if timeMode is INTERVAL. Can be on of the interval frequency codes, such as BIWEEKLY, DAILY, YEARLY, etc.
/// Example: /// Example: ['WEEKLY']
/// Constraints: No constraints specified.
/// Mandatory if timeMode is INTERVAL. Can be a numerical multiplier on an interval frequency code, a stop time qualifier code such as AFTER, NET, UFN, etc, or a datetime like string.
/// Example: /// Example: ['65WK']
/// Constraints: No constraints specified.
func (rcv *AirspaceTimePeriod_Ingest) IntDur(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *AirspaceTimePeriod_Ingest) IntDurLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

/// Mandatory if timeMode is INTERVAL. Can be a numerical multiplier on an interval frequency code, a stop time qualifier code such as AFTER, NET, UFN, etc, or a datetime like string.
/// Example: /// Example: ['65WK']
/// Constraints: No constraints specified.
func AirspaceTimePeriod_IngestStart(builder *flatbuffers.Builder) {
	builder.StartObject(5)
}
func AirspaceTimePeriod_IngestAddTimeMode(builder *flatbuffers.Builder, timeMode flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(timeMode), 0)
}
func AirspaceTimePeriod_IngestAddTimeStart(builder *flatbuffers.Builder, timeStart flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(timeStart), 0)
}
func AirspaceTimePeriod_IngestAddTimeEnd(builder *flatbuffers.Builder, timeEnd flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(timeEnd), 0)
}
func AirspaceTimePeriod_IngestAddIntFreq(builder *flatbuffers.Builder, intFreq flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(3, flatbuffers.UOffsetT(intFreq), 0)
}
func AirspaceTimePeriod_IngestStartIntFreqVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func AirspaceTimePeriod_IngestAddIntDur(builder *flatbuffers.Builder, intDur flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(4, flatbuffers.UOffsetT(intDur), 0)
}
func AirspaceTimePeriod_IngestStartIntDurVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func AirspaceTimePeriod_IngestEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
