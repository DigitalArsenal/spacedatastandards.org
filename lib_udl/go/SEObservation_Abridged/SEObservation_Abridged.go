// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package SEObservation_Abridged

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

/// /// A single space environment observation.
type SEObservation_Abridged struct {
	_tab flatbuffers.Table
}

const SEObservation_AbridgedIdentifier = "SEOB"

func GetRootAsSEObservation_Abridged(buf []byte, offset flatbuffers.UOffsetT) *SEObservation_Abridged {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &SEObservation_Abridged{}
	x.Init(buf, n+offset)
	return x
}

func FinishSEObservation_AbridgedBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	identifierBytes := []byte(SEObservation_AbridgedIdentifier)
	builder.FinishWithFileIdentifier(offset, identifierBytes)
}

func SEObservation_AbridgedBufferHasIdentifier(buf []byte) bool {
	return flatbuffers.BufferHasIdentifier(buf, SEObservation_AbridgedIdentifier)
}

func GetSizePrefixedRootAsSEObservation_Abridged(buf []byte, offset flatbuffers.UOffsetT) *SEObservation_Abridged {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &SEObservation_Abridged{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedSEObservation_AbridgedBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	identifierBytes := []byte(SEObservation_AbridgedIdentifier)
	builder.FinishSizePrefixedWithFileIdentifier(offset, identifierBytes)
}

func SizePrefixedSEObservation_AbridgedBufferHasIdentifier(buf []byte) bool {
	return flatbuffers.SizePrefixedBufferHasIdentifier(buf, SEObservation_AbridgedIdentifier)
}

func (rcv *SEObservation_Abridged) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *SEObservation_Abridged) Table() flatbuffers.Table {
	return rcv._tab
}

/// The type of observation associated with this record.
/// Example: /// Example: INTEGRAL FLUX
/// Constraints: Minimum length = 1, Maximum length = 24
func (rcv *SEObservation_Abridged) ObType() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The type of observation associated with this record.
/// Example: /// Example: INTEGRAL FLUX
/// Constraints: Minimum length = 1, Maximum length = 24
/// The Unit of Measure associated with this observation. If there are no physical units associated with the measurement, a value of NONE should be specified.
/// Example: /// Example: particles/cm^2/s/sr
/// Constraints: Minimum length = 1, Maximum length = 32
func (rcv *SEObservation_Abridged) ObUoM() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The Unit of Measure associated with this observation. If there are no physical units associated with the measurement, a value of NONE should be specified.
/// Example: /// Example: particles/cm^2/s/sr
/// Constraints: Minimum length = 1, Maximum length = 32
/// A single observation value expressed in the specified unit of measure (obUoM). Because of the variability of the Space Environment data types, each record may employ a numeric observation value (obValue), a string observation value (obString), a Boolean observation value (obBool), an array of numeric observation values (obArray), or any combination of these.
/// Example: /// Example: 0.487687826
/// Constraints: No constraints specified.
func (rcv *SEObservation_Abridged) ObValue() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// A single observation value expressed in the specified unit of measure (obUoM). Because of the variability of the Space Environment data types, each record may employ a numeric observation value (obValue), a string observation value (obString), a Boolean observation value (obBool), an array of numeric observation values (obArray), or any combination of these.
/// Example: /// Example: 0.487687826
/// Constraints: No constraints specified.
func (rcv *SEObservation_Abridged) MutateObValue(n float64) bool {
	return rcv._tab.MutateFloat64Slot(8, n)
}

/// A single observation string expressed in the specified unit of measure (obUoM). Because of the variability of the Space Environment data types, each record may employ a numeric observation value (obValue), a string observation value (obString), a Boolean observation value (obBool), an array of numeric observation values (obArray), or any combination of these.
/// Example: /// Example: C1.3
/// Constraints: Minimum length = 0, Maximum length = 64
func (rcv *SEObservation_Abridged) ObString() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// A single observation string expressed in the specified unit of measure (obUoM). Because of the variability of the Space Environment data types, each record may employ a numeric observation value (obValue), a string observation value (obString), a Boolean observation value (obBool), an array of numeric observation values (obArray), or any combination of these.
/// Example: /// Example: C1.3
/// Constraints: Minimum length = 0, Maximum length = 64
/// An array of observation values expressed in the specified unit of measure (obUoM). Because of the variability of the Space Environment data types, each record may employ a numeric observation value (obValue), a string observation value (obString), a Boolean observation value (obBool), an array of numeric observation values (obArray), or any combination of these.
/// Example: /// Example: [1.7, 35.6, 21.2, 19.01]
/// Constraints: No constraints specified.
func (rcv *SEObservation_Abridged) ObArray(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *SEObservation_Abridged) ObArrayLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

/// An array of observation values expressed in the specified unit of measure (obUoM). Because of the variability of the Space Environment data types, each record may employ a numeric observation value (obValue), a string observation value (obString), a Boolean observation value (obBool), an array of numeric observation values (obArray), or any combination of these.
/// Example: /// Example: [1.7, 35.6, 21.2, 19.01]
/// Constraints: No constraints specified.
/// A Boolean observation. Because of the variability of the Space Environment data types, each record may employ a numeric observation value (obValue), a string observation value (obString), a Boolean observation value (obBool), an array of numeric observation values (obArray), or any combination of these.
/// Example: /// Example: True
/// Constraints: No constraints specified.
func (rcv *SEObservation_Abridged) ObBool() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

/// A Boolean observation. Because of the variability of the Space Environment data types, each record may employ a numeric observation value (obValue), a string observation value (obString), a Boolean observation value (obBool), an array of numeric observation values (obArray), or any combination of these.
/// Example: /// Example: True
/// Constraints: No constraints specified.
func (rcv *SEObservation_Abridged) MutateObBool(n bool) bool {
	return rcv._tab.MutateBoolSlot(14, n)
}

/// The quality of this individual observation. The observation quality indicator value may vary among providers and may be a generalized statement (BAD, GOOD, UNCERTAIN, UNKNOWN) or a numeric value. Users should consult the data provider to verify the usage of the observation.
/// Example: /// Example: GOOD
/// Constraints: Minimum length = 0, Maximum length = 16
func (rcv *SEObservation_Abridged) ObQuality() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The quality of this individual observation. The observation quality indicator value may vary among providers and may be a generalized statement (BAD, GOOD, UNCERTAIN, UNKNOWN) or a numeric value. Users should consult the data provider to verify the usage of the observation.
/// Example: /// Example: GOOD
/// Constraints: Minimum length = 0, Maximum length = 16
/// Descriptive or additional information associated with this individual observation.
/// Example: /// Example: Observation Description Text
/// Constraints: Minimum length = 0, Maximum length = 512
func (rcv *SEObservation_Abridged) ObDescription() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(18))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Descriptive or additional information associated with this individual observation.
/// Example: /// Example: Observation Description Text
/// Constraints: Minimum length = 0, Maximum length = 512
func SEObservation_AbridgedStart(builder *flatbuffers.Builder) {
	builder.StartObject(8)
}
func SEObservation_AbridgedAddObType(builder *flatbuffers.Builder, obType flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(obType), 0)
}
func SEObservation_AbridgedAddObUoM(builder *flatbuffers.Builder, obUoM flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(obUoM), 0)
}
func SEObservation_AbridgedAddObValue(builder *flatbuffers.Builder, obValue float64) {
	builder.PrependFloat64Slot(2, obValue, 0.0)
}
func SEObservation_AbridgedAddObString(builder *flatbuffers.Builder, obString flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(3, flatbuffers.UOffsetT(obString), 0)
}
func SEObservation_AbridgedAddObArray(builder *flatbuffers.Builder, obArray flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(4, flatbuffers.UOffsetT(obArray), 0)
}
func SEObservation_AbridgedStartObArrayVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func SEObservation_AbridgedAddObBool(builder *flatbuffers.Builder, obBool bool) {
	builder.PrependBoolSlot(5, obBool, false)
}
func SEObservation_AbridgedAddObQuality(builder *flatbuffers.Builder, obQuality flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(6, flatbuffers.UOffsetT(obQuality), 0)
}
func SEObservation_AbridgedAddObDescription(builder *flatbuffers.Builder, obDescription flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(7, flatbuffers.UOffsetT(obDescription), 0)
}
func SEObservation_AbridgedEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
