// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package ISRCollectionTaskings_Ingest

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

/// /// Individual taskings to complete the mission.
type ISRCollectionTaskings_Ingest struct {
	_tab flatbuffers.Table
}

const ISRCollectionTaskings_IngestIdentifier = "ISRC"

func GetRootAsISRCollectionTaskings_Ingest(buf []byte, offset flatbuffers.UOffsetT) *ISRCollectionTaskings_Ingest {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &ISRCollectionTaskings_Ingest{}
	x.Init(buf, n+offset)
	return x
}

func FinishISRCollectionTaskings_IngestBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	identifierBytes := []byte(ISRCollectionTaskings_IngestIdentifier)
	builder.FinishWithFileIdentifier(offset, identifierBytes)
}

func ISRCollectionTaskings_IngestBufferHasIdentifier(buf []byte) bool {
	return flatbuffers.BufferHasIdentifier(buf, ISRCollectionTaskings_IngestIdentifier)
}

func GetSizePrefixedRootAsISRCollectionTaskings_Ingest(buf []byte, offset flatbuffers.UOffsetT) *ISRCollectionTaskings_Ingest {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &ISRCollectionTaskings_Ingest{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedISRCollectionTaskings_IngestBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	identifierBytes := []byte(ISRCollectionTaskings_IngestIdentifier)
	builder.FinishSizePrefixedWithFileIdentifier(offset, identifierBytes)
}

func SizePrefixedISRCollectionTaskings_IngestBufferHasIdentifier(buf []byte) bool {
	return flatbuffers.SizePrefixedBufferHasIdentifier(buf, ISRCollectionTaskings_IngestIdentifier)
}

func (rcv *ISRCollectionTaskings_Ingest) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *ISRCollectionTaskings_Ingest) Table() flatbuffers.Table {
	return rcv._tab
}

/// Tasking Unique Identifier.
/// Example: /// Example: ISRCOLLECTIONTASKINGS-ID
/// Constraints: Minimum length = 0, Maximum length = 36
func (rcv *ISRCollectionTaskings_Ingest) Id() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Tasking Unique Identifier.
/// Example: /// Example: ISRCOLLECTIONTASKINGS-ID
/// Constraints: Minimum length = 0, Maximum length = 36
/// Type of tasking.
/// Example: /// Example: Deliberate
/// Constraints: Minimum length = 1, Maximum length = 16
func (rcv *ISRCollectionTaskings_Ingest) Type() ISRCollectionTaskings_Ingest_type_Enum {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return ISRCollectionTaskings_Ingest_type_Enum(rcv._tab.GetInt8(o + rcv._tab.Pos))
	}
	return 0
}

/// Type of tasking.
/// Example: /// Example: Deliberate
/// Constraints: Minimum length = 1, Maximum length = 16
func (rcv *ISRCollectionTaskings_Ingest) MutateType(n ISRCollectionTaskings_Ingest_type_Enum) bool {
	return rcv._tab.MutateInt8Slot(6, int8(n))
}

/// Type of collection tasked.
/// Example: /// Example: Simultaneous
/// Constraints: Minimum length = 1, Maximum length = 16
func (rcv *ISRCollectionTaskings_Ingest) CollectionType() ISRCollectionTaskings_Ingest_collectionType_Enum {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return ISRCollectionTaskings_Ingest_collectionType_Enum(rcv._tab.GetInt8(o + rcv._tab.Pos))
	}
	return 0
}

/// Type of collection tasked.
/// Example: /// Example: Simultaneous
/// Constraints: Minimum length = 1, Maximum length = 16
func (rcv *ISRCollectionTaskings_Ingest) MutateCollectionType(n ISRCollectionTaskings_Ingest_collectionType_Enum) bool {
	return rcv._tab.MutateInt8Slot(8, int8(n))
}

/// Human readable definition of this taskings Area Of Responsibility.
/// Example: /// Example: Kandahar
/// Constraints: Minimum length = 0, Maximum length = 32
func (rcv *ISRCollectionTaskings_Ingest) TaskingAor() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Human readable definition of this taskings Area Of Responsibility.
/// Example: /// Example: Kandahar
/// Constraints: Minimum length = 0, Maximum length = 32
/// Eight line.
/// Example: /// Example: No example provided.
/// Constraints: Minimum length = 0, Maximum length = 256
func (rcv *ISRCollectionTaskings_Ingest) EightLine() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Eight line.
/// Example: /// Example: No example provided.
/// Constraints: Minimum length = 0, Maximum length = 256
/// Primary type of intelligence to be collected during the mission.
/// Example: /// Example: Sig
/// Constraints: Minimum length = 0, Maximum length = 32
func (rcv *ISRCollectionTaskings_Ingest) TaskingPrimaryIntelDiscipline() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Primary type of intelligence to be collected during the mission.
/// Example: /// Example: Sig
/// Constraints: Minimum length = 0, Maximum length = 32
/// Sub category of primary intelligence to be collected.
/// Example: /// Example: FMV
/// Constraints: Minimum length = 0, Maximum length = 32
func (rcv *ISRCollectionTaskings_Ingest) TaskingPrimarySubCategory() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Sub category of primary intelligence to be collected.
/// Example: /// Example: FMV
/// Constraints: Minimum length = 0, Maximum length = 32
/// Type of tasking intelligence to be collected second.
/// Example: /// Example: Intelligence_2
/// Constraints: Minimum length = 0, Maximum length = 32
func (rcv *ISRCollectionTaskings_Ingest) TaskingSecondaryIntelDiscipline() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(18))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Type of tasking intelligence to be collected second.
/// Example: /// Example: Intelligence_2
/// Constraints: Minimum length = 0, Maximum length = 32
/// Mission sub category for secondary intelligence discipline to be collected.
/// Example: /// Example: Convoy
/// Constraints: Minimum length = 0, Maximum length = 32
func (rcv *ISRCollectionTaskings_Ingest) TaskingSecondarySubCategory() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(20))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Mission sub category for secondary intelligence discipline to be collected.
/// Example: /// Example: Convoy
/// Constraints: Minimum length = 0, Maximum length = 32
/// What is the primary objective(Role) of this task.
/// Example: /// Example: Provide Targeting of Lead Vehicle
/// Constraints: Minimum length = 0, Maximum length = 32
func (rcv *ISRCollectionTaskings_Ingest) TaskingRole() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(22))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// What is the primary objective(Role) of this task.
/// Example: /// Example: Provide Targeting of Lead Vehicle
/// Constraints: Minimum length = 0, Maximum length = 32
/// Tasking operation name.
/// Example: /// Example: OP-HONEY-BADGER
/// Constraints: Minimum length = 0, Maximum length = 32
func (rcv *ISRCollectionTaskings_Ingest) TaskingOperation() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(24))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Tasking operation name.
/// Example: /// Example: OP-HONEY-BADGER
/// Constraints: Minimum length = 0, Maximum length = 32
/// Tasking Priority (1-n).
/// Example: /// Example: 10.23
/// Constraints: No constraints specified.
func (rcv *ISRCollectionTaskings_Ingest) TaskingPriority() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(26))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Tasking Priority (1-n).
/// Example: /// Example: 10.23
/// Constraints: No constraints specified.
func (rcv *ISRCollectionTaskings_Ingest) MutateTaskingPriority(n float64) bool {
	return rcv._tab.MutateFloat64Slot(26, n)
}

/// Military Base to transmit the dissemination of this data.
/// Example: /// Example: ENVOYS
/// Constraints: Minimum length = 0, Maximum length = 32
func (rcv *ISRCollectionTaskings_Ingest) TaskingSupportedUnit() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(28))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Military Base to transmit the dissemination of this data.
/// Example: /// Example: ENVOYS
/// Constraints: Minimum length = 0, Maximum length = 32
/// Tasking emphasis.
/// Example: /// Example: EMPHASIS
/// Constraints: Minimum length = 0, Maximum length = 32
func (rcv *ISRCollectionTaskings_Ingest) TaskingEmphasis() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(30))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Tasking emphasis.
/// Example: /// Example: EMPHASIS
/// Constraints: Minimum length = 0, Maximum length = 32
/// Time of retasking, in ISO 8601 UTC format.
/// Example: /// Example: 2021-01-19T01:01:15.001Z
/// Constraints: No constraints specified.
func (rcv *ISRCollectionTaskings_Ingest) TaskingRetaskTime() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(32))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Time of retasking, in ISO 8601 UTC format.
/// Example: /// Example: 2021-01-19T01:01:15.001Z
/// Constraints: No constraints specified.
/// WGS-84 latitude of the start position, in degrees. -90 to 90 degrees (negative values south of equator).
/// Example: /// Example: 45.23
/// Constraints: No constraints specified.
func (rcv *ISRCollectionTaskings_Ingest) TaskingStartPointLat() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(34))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// WGS-84 latitude of the start position, in degrees. -90 to 90 degrees (negative values south of equator).
/// Example: /// Example: 45.23
/// Constraints: No constraints specified.
func (rcv *ISRCollectionTaskings_Ingest) MutateTaskingStartPointLat(n float64) bool {
	return rcv._tab.MutateFloat64Slot(34, n)
}

/// WGS-84 longitude of the start position, in degrees. -180 to 180 degrees (negative values west of Prime Meridian).
/// Example: /// Example: 45.23
/// Constraints: No constraints specified.
func (rcv *ISRCollectionTaskings_Ingest) TaskingStartPointLong() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(36))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// WGS-84 longitude of the start position, in degrees. -180 to 180 degrees (negative values west of Prime Meridian).
/// Example: /// Example: 45.23
/// Constraints: No constraints specified.
func (rcv *ISRCollectionTaskings_Ingest) MutateTaskingStartPointLong(n float64) bool {
	return rcv._tab.MutateFloat64Slot(36, n)
}

/// Tasking geographical collection area.
/// Example: /// Example: AREA
/// Constraints: No constraints specified.
func (rcv *ISRCollectionTaskings_Ingest) TaskingCollectionArea() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(38))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Tasking geographical collection area.
/// Example: /// Example: AREA
/// Constraints: No constraints specified.
/// Joint Operations Area.
/// Example: /// Example: AREA
/// Constraints: Minimum length = 0, Maximum length = 32
func (rcv *ISRCollectionTaskings_Ingest) TaskingJoa() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(40))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Joint Operations Area.
/// Example: /// Example: AREA
/// Constraints: Minimum length = 0, Maximum length = 32
/// A synchronization matrix is used to organize the logistics synchronization process during a mission.
/// Example: /// Example: MATRIX
/// Constraints: Minimum length = 0, Maximum length = 32
func (rcv *ISRCollectionTaskings_Ingest) TaskingSyncMatrixBin() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(42))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// A synchronization matrix is used to organize the logistics synchronization process during a mission.
/// Example: /// Example: MATRIX
/// Constraints: Minimum length = 0, Maximum length = 32
/// Country code of the tasking.  A Country may represent countries, multi-national consortiums, and international organizations.
/// Example: /// Example: CODE
/// Constraints: Minimum length = 0, Maximum length = 4
func (rcv *ISRCollectionTaskings_Ingest) TaskingCountry() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(44))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Country code of the tasking.  A Country may represent countries, multi-national consortiums, and international organizations.
/// Example: /// Example: CODE
/// Constraints: Minimum length = 0, Maximum length = 4
/// Region of the tasking.
/// Example: /// Example: REGION
/// Constraints: Minimum length = 0, Maximum length = 32
func (rcv *ISRCollectionTaskings_Ingest) TaskingRegion() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(46))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Region of the tasking.
/// Example: /// Example: REGION
/// Constraints: Minimum length = 0, Maximum length = 32
/// Subregion of the tasking.
/// Example: /// Example: SUBREGION
/// Constraints: Minimum length = 0, Maximum length = 32
func (rcv *ISRCollectionTaskings_Ingest) TaskingSubRegion() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(48))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Subregion of the tasking.
/// Example: /// Example: SUBREGION
/// Constraints: Minimum length = 0, Maximum length = 32
/// Value of the Sensitive Reconnaissance Operations Track.
/// Example: /// Example: SRO
/// Constraints: Minimum length = 0, Maximum length = 32
func (rcv *ISRCollectionTaskings_Ingest) SroTrack() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(50))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Value of the Sensitive Reconnaissance Operations Track.
/// Example: /// Example: SRO
/// Constraints: Minimum length = 0, Maximum length = 32
/// Free text field for the user to specify special instructions needed for this collection.
/// Example: /// Example: TEXT
/// Constraints: Minimum length = 0, Maximum length = 256
func (rcv *ISRCollectionTaskings_Ingest) SpecialComGuidance() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(52))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Free text field for the user to specify special instructions needed for this collection.
/// Example: /// Example: TEXT
/// Constraints: Minimum length = 0, Maximum length = 256
/// No description provided.
/// Example: /// Example: No example provided.
/// Constraints: No constraints specified.
func (rcv *ISRCollectionTaskings_Ingest) CollectionPeriods() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(54))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// No description provided.
/// Example: /// Example: No example provided.
/// Constraints: No constraints specified.
/// Tasking desired collection requirements.
/// Example: /// Example: No example provided.
/// Constraints: No constraints specified.
func (rcv *ISRCollectionTaskings_Ingest) TaskingCollectionRequirements(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(56))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *ISRCollectionTaskings_Ingest) TaskingCollectionRequirementsLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(56))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

/// Tasking desired collection requirements.
/// Example: /// Example: No example provided.
/// Constraints: No constraints specified.
func ISRCollectionTaskings_IngestStart(builder *flatbuffers.Builder) {
	builder.StartObject(27)
}
func ISRCollectionTaskings_IngestAddId(builder *flatbuffers.Builder, id flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(id), 0)
}
func ISRCollectionTaskings_IngestAddType(builder *flatbuffers.Builder, type_ ISRCollectionTaskings_Ingest_type_Enum) {
	builder.PrependInt8Slot(1, int8(type_), 0)
}
func ISRCollectionTaskings_IngestAddCollectionType(builder *flatbuffers.Builder, collectionType ISRCollectionTaskings_Ingest_collectionType_Enum) {
	builder.PrependInt8Slot(2, int8(collectionType), 0)
}
func ISRCollectionTaskings_IngestAddTaskingAor(builder *flatbuffers.Builder, taskingAor flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(3, flatbuffers.UOffsetT(taskingAor), 0)
}
func ISRCollectionTaskings_IngestAddEightLine(builder *flatbuffers.Builder, eightLine flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(4, flatbuffers.UOffsetT(eightLine), 0)
}
func ISRCollectionTaskings_IngestAddTaskingPrimaryIntelDiscipline(builder *flatbuffers.Builder, taskingPrimaryIntelDiscipline flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(5, flatbuffers.UOffsetT(taskingPrimaryIntelDiscipline), 0)
}
func ISRCollectionTaskings_IngestAddTaskingPrimarySubCategory(builder *flatbuffers.Builder, taskingPrimarySubCategory flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(6, flatbuffers.UOffsetT(taskingPrimarySubCategory), 0)
}
func ISRCollectionTaskings_IngestAddTaskingSecondaryIntelDiscipline(builder *flatbuffers.Builder, taskingSecondaryIntelDiscipline flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(7, flatbuffers.UOffsetT(taskingSecondaryIntelDiscipline), 0)
}
func ISRCollectionTaskings_IngestAddTaskingSecondarySubCategory(builder *flatbuffers.Builder, taskingSecondarySubCategory flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(8, flatbuffers.UOffsetT(taskingSecondarySubCategory), 0)
}
func ISRCollectionTaskings_IngestAddTaskingRole(builder *flatbuffers.Builder, taskingRole flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(9, flatbuffers.UOffsetT(taskingRole), 0)
}
func ISRCollectionTaskings_IngestAddTaskingOperation(builder *flatbuffers.Builder, taskingOperation flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(10, flatbuffers.UOffsetT(taskingOperation), 0)
}
func ISRCollectionTaskings_IngestAddTaskingPriority(builder *flatbuffers.Builder, taskingPriority float64) {
	builder.PrependFloat64Slot(11, taskingPriority, 0.0)
}
func ISRCollectionTaskings_IngestAddTaskingSupportedUnit(builder *flatbuffers.Builder, taskingSupportedUnit flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(12, flatbuffers.UOffsetT(taskingSupportedUnit), 0)
}
func ISRCollectionTaskings_IngestAddTaskingEmphasis(builder *flatbuffers.Builder, taskingEmphasis flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(13, flatbuffers.UOffsetT(taskingEmphasis), 0)
}
func ISRCollectionTaskings_IngestAddTaskingRetaskTime(builder *flatbuffers.Builder, taskingRetaskTime flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(14, flatbuffers.UOffsetT(taskingRetaskTime), 0)
}
func ISRCollectionTaskings_IngestAddTaskingStartPointLat(builder *flatbuffers.Builder, taskingStartPointLat float64) {
	builder.PrependFloat64Slot(15, taskingStartPointLat, 0.0)
}
func ISRCollectionTaskings_IngestAddTaskingStartPointLong(builder *flatbuffers.Builder, taskingStartPointLong float64) {
	builder.PrependFloat64Slot(16, taskingStartPointLong, 0.0)
}
func ISRCollectionTaskings_IngestAddTaskingCollectionArea(builder *flatbuffers.Builder, taskingCollectionArea flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(17, flatbuffers.UOffsetT(taskingCollectionArea), 0)
}
func ISRCollectionTaskings_IngestAddTaskingJoa(builder *flatbuffers.Builder, taskingJoa flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(18, flatbuffers.UOffsetT(taskingJoa), 0)
}
func ISRCollectionTaskings_IngestAddTaskingSyncMatrixBin(builder *flatbuffers.Builder, taskingSyncMatrixBin flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(19, flatbuffers.UOffsetT(taskingSyncMatrixBin), 0)
}
func ISRCollectionTaskings_IngestAddTaskingCountry(builder *flatbuffers.Builder, taskingCountry flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(20, flatbuffers.UOffsetT(taskingCountry), 0)
}
func ISRCollectionTaskings_IngestAddTaskingRegion(builder *flatbuffers.Builder, taskingRegion flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(21, flatbuffers.UOffsetT(taskingRegion), 0)
}
func ISRCollectionTaskings_IngestAddTaskingSubRegion(builder *flatbuffers.Builder, taskingSubRegion flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(22, flatbuffers.UOffsetT(taskingSubRegion), 0)
}
func ISRCollectionTaskings_IngestAddSroTrack(builder *flatbuffers.Builder, sroTrack flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(23, flatbuffers.UOffsetT(sroTrack), 0)
}
func ISRCollectionTaskings_IngestAddSpecialComGuidance(builder *flatbuffers.Builder, specialComGuidance flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(24, flatbuffers.UOffsetT(specialComGuidance), 0)
}
func ISRCollectionTaskings_IngestAddCollectionPeriods(builder *flatbuffers.Builder, collectionPeriods flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(25, flatbuffers.UOffsetT(collectionPeriods), 0)
}
func ISRCollectionTaskings_IngestAddTaskingCollectionRequirements(builder *flatbuffers.Builder, taskingCollectionRequirements flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(26, flatbuffers.UOffsetT(taskingCollectionRequirements), 0)
}
func ISRCollectionTaskings_IngestStartTaskingCollectionRequirementsVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func ISRCollectionTaskings_IngestEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
