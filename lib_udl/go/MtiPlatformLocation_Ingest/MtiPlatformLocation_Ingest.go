// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package MtiPlatformLocation_Ingest

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

/// /// Provides information pertaining to the location of the sensor platform during periods when the sensor is not collecting data. It shall be sent as required during periods in which the sensor is not collecting data, such as enroute to an orbit location, during a turn, or any other time at which platform location is required.
type MtiPlatformLocation_Ingest struct {
	_tab flatbuffers.Table
}

const MtiPlatformLocation_IngestIdentifier = "MTIP"

func GetRootAsMtiPlatformLocation_Ingest(buf []byte, offset flatbuffers.UOffsetT) *MtiPlatformLocation_Ingest {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &MtiPlatformLocation_Ingest{}
	x.Init(buf, n+offset)
	return x
}

func FinishMtiPlatformLocation_IngestBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	identifierBytes := []byte(MtiPlatformLocation_IngestIdentifier)
	builder.FinishWithFileIdentifier(offset, identifierBytes)
}

func MtiPlatformLocation_IngestBufferHasIdentifier(buf []byte) bool {
	return flatbuffers.BufferHasIdentifier(buf, MtiPlatformLocation_IngestIdentifier)
}

func GetSizePrefixedRootAsMtiPlatformLocation_Ingest(buf []byte, offset flatbuffers.UOffsetT) *MtiPlatformLocation_Ingest {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &MtiPlatformLocation_Ingest{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedMtiPlatformLocation_IngestBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	identifierBytes := []byte(MtiPlatformLocation_IngestIdentifier)
	builder.FinishSizePrefixedWithFileIdentifier(offset, identifierBytes)
}

func SizePrefixedMtiPlatformLocation_IngestBufferHasIdentifier(buf []byte) bool {
	return flatbuffers.SizePrefixedBufferHasIdentifier(buf, MtiPlatformLocation_IngestIdentifier)
}

func (rcv *MtiPlatformLocation_Ingest) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *MtiPlatformLocation_Ingest) Table() flatbuffers.Table {
	return rcv._tab
}

/// Elapsed time, expressed in milliseconds, from midnight at the beginning of the day specified in the Reference Time fields of the Mission Segment to the time the report is prepared.
/// Example: /// Example: 1234567890
/// Constraints: No constraints specified.
func (rcv *MtiPlatformLocation_Ingest) L1() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

/// Elapsed time, expressed in milliseconds, from midnight at the beginning of the day specified in the Reference Time fields of the Mission Segment to the time the report is prepared.
/// Example: /// Example: 1234567890
/// Constraints: No constraints specified.
func (rcv *MtiPlatformLocation_Ingest) MutateL1(n int64) bool {
	return rcv._tab.MutateInt64Slot(4, n)
}

/// North-South position of the platform at the time the report is prepared, expressed as degrees North (positive) or South (negative) of the Equator.
/// Example: /// Example: 45.23
/// Constraints: No constraints specified.
func (rcv *MtiPlatformLocation_Ingest) L2() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// North-South position of the platform at the time the report is prepared, expressed as degrees North (positive) or South (negative) of the Equator.
/// Example: /// Example: 45.23
/// Constraints: No constraints specified.
func (rcv *MtiPlatformLocation_Ingest) MutateL2(n float64) bool {
	return rcv._tab.MutateFloat64Slot(6, n)
}

/// East-West position of the platform at the time the report is prepared, expressed as degrees East (positive) from the Prime Meridian.
/// Example: /// Example: 45.23
/// Constraints: No constraints specified.
func (rcv *MtiPlatformLocation_Ingest) L3() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// East-West position of the platform at the time the report is prepared, expressed as degrees East (positive) from the Prime Meridian.
/// Example: /// Example: 45.23
/// Constraints: No constraints specified.
func (rcv *MtiPlatformLocation_Ingest) MutateL3(n float64) bool {
	return rcv._tab.MutateFloat64Slot(8, n)
}

/// Altitude of the platform at the time the report is prepared, referenced to its position above the WGS-84 ellipsoid, in centimeters.
/// Example: /// Example: 45
/// Constraints: No constraints specified.
func (rcv *MtiPlatformLocation_Ingest) L4() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

/// Altitude of the platform at the time the report is prepared, referenced to its position above the WGS-84 ellipsoid, in centimeters.
/// Example: /// Example: 45
/// Constraints: No constraints specified.
func (rcv *MtiPlatformLocation_Ingest) MutateL4(n int32) bool {
	return rcv._tab.MutateInt32Slot(10, n)
}

/// Ground track of the platform at the time the report is prepared, expressed as the angle in degrees (clockwise) from True North.
/// Example: /// Example: 45.23
/// Constraints: No constraints specified.
func (rcv *MtiPlatformLocation_Ingest) L5() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Ground track of the platform at the time the report is prepared, expressed as the angle in degrees (clockwise) from True North.
/// Example: /// Example: 45.23
/// Constraints: No constraints specified.
func (rcv *MtiPlatformLocation_Ingest) MutateL5(n float64) bool {
	return rcv._tab.MutateFloat64Slot(12, n)
}

/// Ground speed of the platform at the time the report is prepared, expressed as millimeters per second.
/// Example: /// Example: 50
/// Constraints: No constraints specified.
func (rcv *MtiPlatformLocation_Ingest) L6() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

/// Ground speed of the platform at the time the report is prepared, expressed as millimeters per second.
/// Example: /// Example: 50
/// Constraints: No constraints specified.
func (rcv *MtiPlatformLocation_Ingest) MutateL6(n int32) bool {
	return rcv._tab.MutateInt32Slot(14, n)
}

/// Velocity of the platform in the vertical direction, expressed as decimeters per second.
/// Example: /// Example: 82
/// Constraints: No constraints specified.
func (rcv *MtiPlatformLocation_Ingest) L7() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

/// Velocity of the platform in the vertical direction, expressed as decimeters per second.
/// Example: /// Example: 82
/// Constraints: No constraints specified.
func (rcv *MtiPlatformLocation_Ingest) MutateL7(n int32) bool {
	return rcv._tab.MutateInt32Slot(16, n)
}

/// Platform location timestamp in ISO8601 UTC format.
/// Example: /// Example: No example provided.
/// Constraints: No constraints specified.
func (rcv *MtiPlatformLocation_Ingest) Platlocts() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(18))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Platform location timestamp in ISO8601 UTC format.
/// Example: /// Example: No example provided.
/// Constraints: No constraints specified.
func MtiPlatformLocation_IngestStart(builder *flatbuffers.Builder) {
	builder.StartObject(8)
}
func MtiPlatformLocation_IngestAddL1(builder *flatbuffers.Builder, l1 int64) {
	builder.PrependInt64Slot(0, l1, 0)
}
func MtiPlatformLocation_IngestAddL2(builder *flatbuffers.Builder, l2 float64) {
	builder.PrependFloat64Slot(1, l2, 0.0)
}
func MtiPlatformLocation_IngestAddL3(builder *flatbuffers.Builder, l3 float64) {
	builder.PrependFloat64Slot(2, l3, 0.0)
}
func MtiPlatformLocation_IngestAddL4(builder *flatbuffers.Builder, l4 int32) {
	builder.PrependInt32Slot(3, l4, 0)
}
func MtiPlatformLocation_IngestAddL5(builder *flatbuffers.Builder, l5 float64) {
	builder.PrependFloat64Slot(4, l5, 0.0)
}
func MtiPlatformLocation_IngestAddL6(builder *flatbuffers.Builder, l6 int32) {
	builder.PrependInt32Slot(5, l6, 0)
}
func MtiPlatformLocation_IngestAddL7(builder *flatbuffers.Builder, l7 int32) {
	builder.PrependInt32Slot(6, l7, 0)
}
func MtiPlatformLocation_IngestAddPlatlocts(builder *flatbuffers.Builder, platlocts flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(7, flatbuffers.UOffsetT(platlocts), 0)
}
func MtiPlatformLocation_IngestEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
