// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package GNSSRawIF_Ingest

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

/// /// Global Navigation Satellite System (GNSS) Raw Intermediate Frequency (IF) data are the recorded streams of raw signal samples after down-conversion of the received signal to IF and prior to any processing onboard the receiving spacecraft.  These data sets are processed in various geophysical applications and used to characterize Electromagnetic Interference (EMI) in the operating environment.
type GNSSRawIF_Ingest struct {
	_tab flatbuffers.Table
}

const GNSSRawIF_IngestIdentifier = "GNSS"

func GetRootAsGNSSRawIF_Ingest(buf []byte, offset flatbuffers.UOffsetT) *GNSSRawIF_Ingest {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &GNSSRawIF_Ingest{}
	x.Init(buf, n+offset)
	return x
}

func FinishGNSSRawIF_IngestBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	identifierBytes := []byte(GNSSRawIF_IngestIdentifier)
	builder.FinishWithFileIdentifier(offset, identifierBytes)
}

func GNSSRawIF_IngestBufferHasIdentifier(buf []byte) bool {
	return flatbuffers.BufferHasIdentifier(buf, GNSSRawIF_IngestIdentifier)
}

func GetSizePrefixedRootAsGNSSRawIF_Ingest(buf []byte, offset flatbuffers.UOffsetT) *GNSSRawIF_Ingest {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &GNSSRawIF_Ingest{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedGNSSRawIF_IngestBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	identifierBytes := []byte(GNSSRawIF_IngestIdentifier)
	builder.FinishSizePrefixedWithFileIdentifier(offset, identifierBytes)
}

func SizePrefixedGNSSRawIF_IngestBufferHasIdentifier(buf []byte) bool {
	return flatbuffers.SizePrefixedBufferHasIdentifier(buf, GNSSRawIF_IngestIdentifier)
}

func (rcv *GNSSRawIF_Ingest) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *GNSSRawIF_Ingest) Table() flatbuffers.Table {
	return rcv._tab
}

/// Unique identifier of the record, auto-generated by the system.
/// Example: /// Example: GNSSRawIF-ID
/// Constraints: Minimum length = 1, Maximum length = 36
func (rcv *GNSSRawIF_Ingest) Id() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Unique identifier of the record, auto-generated by the system.
/// Example: /// Example: GNSSRawIF-ID
/// Constraints: Minimum length = 1, Maximum length = 36
/// Classification marking of the data in IC/CAPCO Portion-marked format.
/// Example: /// Example: U
/// Constraints: Minimum length = 1, Maximum length = 128
func (rcv *GNSSRawIF_Ingest) ClassificationMarking() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Classification marking of the data in IC/CAPCO Portion-marked format.
/// Example: /// Example: U
/// Constraints: Minimum length = 1, Maximum length = 128
/// Unique identifier of the primary satellite on-orbit object.
/// Example: /// Example: 32375
/// Constraints: Minimum length = 0, Maximum length = 36
func (rcv *GNSSRawIF_Ingest) IdOnOrbit() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Unique identifier of the primary satellite on-orbit object.
/// Example: /// Example: 32375
/// Constraints: Minimum length = 0, Maximum length = 36
/// Satellite/catalog number of the target on-orbit object.
/// Example: /// Example: 32375
/// Constraints: No constraints specified.
func (rcv *GNSSRawIF_Ingest) SatNo() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

/// Satellite/catalog number of the target on-orbit object.
/// Example: /// Example: 32375
/// Constraints: No constraints specified.
func (rcv *GNSSRawIF_Ingest) MutateSatNo(n int32) bool {
	return rcv._tab.MutateInt32Slot(10, n)
}

/// Optional identifier provided by the data source to indicate the target object of this record. This may be an internal identifier and not necessarily map to a valid satellite number.
/// Example: /// Example: L2045
/// Constraints: Minimum length = 0, Maximum length = 36
func (rcv *GNSSRawIF_Ingest) OrigObjectId() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Optional identifier provided by the data source to indicate the target object of this record. This may be an internal identifier and not necessarily map to a valid satellite number.
/// Example: /// Example: L2045
/// Constraints: Minimum length = 0, Maximum length = 36
/// Unique identifier of the parent Ephemeris Set, if this data is correlated with an Ephemeris. If reporting for a spacecraft with multiple onboard GNSS receivers, this ID may be associated with multiple GNSS Raw IF records if each receiver is synced to the ephemeris points.
/// Example: /// Example: 60f7a241-b7be-48d8-acf3-786670af53f9
/// Constraints: Minimum length = 0, Maximum length = 36
func (rcv *GNSSRawIF_Ingest) EsId() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Unique identifier of the parent Ephemeris Set, if this data is correlated with an Ephemeris. If reporting for a spacecraft with multiple onboard GNSS receivers, this ID may be associated with multiple GNSS Raw IF records if each receiver is synced to the ephemeris points.
/// Example: /// Example: 60f7a241-b7be-48d8-acf3-786670af53f9
/// Constraints: Minimum length = 0, Maximum length = 36
/// The number or ID of the GNSS receiver associated with this data.  If reporting for multiple receivers a separate record should be generated for each. If null, it  is assumed to indicate that only one receiver is present, or reported.
/// Example: /// Example: GPS1
/// Constraints: Minimum length = 0, Maximum length = 36
func (rcv *GNSSRawIF_Ingest) Receiver() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The number or ID of the GNSS receiver associated with this data.  If reporting for multiple receivers a separate record should be generated for each. If null, it  is assumed to indicate that only one receiver is present, or reported.
/// Example: /// Example: GPS1
/// Constraints: Minimum length = 0, Maximum length = 36
/// Unit vector of the outward facing direction of the receiver boresight in a body-fixed coordinate system.
/// Example: /// Example: [0, 1, 0]
/// Constraints: No constraints specified.
func (rcv *GNSSRawIF_Ingest) Boresight(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(18))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *GNSSRawIF_Ingest) BoresightLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(18))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

/// Unit vector of the outward facing direction of the receiver boresight in a body-fixed coordinate system.
/// Example: /// Example: [0, 1, 0]
/// Constraints: No constraints specified.
/// The quaternion describing the rotation of the body-fixed frame used for this system into the local geodetic frame, at the sample start time (startTime). The array element order convention is scalar component first, followed by the three vector components. For a vector u in the body-fixed frame, the corresponding vector u' in the geodetic frame should satisfy u' = quq*, where q is this quaternion. The quaternion should be normalized to 1.
/// Example: /// Example: [0, -0.2734104, 0.1562345, 0.9491246]
/// Constraints: No constraints specified.
func (rcv *GNSSRawIF_Ingest) Quat(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(20))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *GNSSRawIF_Ingest) QuatLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(20))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

/// The quaternion describing the rotation of the body-fixed frame used for this system into the local geodetic frame, at the sample start time (startTime). The array element order convention is scalar component first, followed by the three vector components. For a vector u in the body-fixed frame, the corresponding vector u' in the geodetic frame should satisfy u' = quq*, where q is this quaternion. The quaternion should be normalized to 1.
/// Example: /// Example: [0, -0.2734104, 0.1562345, 0.9491246]
/// Constraints: No constraints specified.
/// The index of the sample within the associated binary file that corresponds to the startTime indicated in this record.  This is especially useful on high sample-rate sensors when some samples are less than one microsecond before the value of startTime.  This index is 0-based.  If null, the startIndex is assumed to be 0.
/// Example: /// Example: 2
/// Constraints: No constraints specified.
func (rcv *GNSSRawIF_Ingest) StartIndex() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(22))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

/// The index of the sample within the associated binary file that corresponds to the startTime indicated in this record.  This is especially useful on high sample-rate sensors when some samples are less than one microsecond before the value of startTime.  This index is 0-based.  If null, the startIndex is assumed to be 0.
/// Example: /// Example: 2
/// Constraints: No constraints specified.
func (rcv *GNSSRawIF_Ingest) MutateStartIndex(n int32) bool {
	return rcv._tab.MutateInt32Slot(22, n)
}

/// Start time of the data contained in the associated binary file, in ISO 8601 UTC format with microsecond precision.
/// Example: /// Example: 2022-04-09T18:11:28.919768Z
/// Constraints: No constraints specified.
func (rcv *GNSSRawIF_Ingest) StartTime() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(24))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Start time of the data contained in the associated binary file, in ISO 8601 UTC format with microsecond precision.
/// Example: /// Example: 2022-04-09T18:11:28.919768Z
/// Constraints: No constraints specified.
/// End time of the data contained in the associated binary file, in ISO 8601 UTC format with microsecond precision.
/// Example: /// Example: 2022-04-09T18:12:28.919768Z
/// Constraints: No constraints specified.
func (rcv *GNSSRawIF_Ingest) EndTime() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(26))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// End time of the data contained in the associated binary file, in ISO 8601 UTC format with microsecond precision.
/// Example: /// Example: 2022-04-09T18:12:28.919768Z
/// Constraints: No constraints specified.
/// WGS-84 spacecraft latitude sub-point at start time (startTime), represented as -90 to 90 degrees (negative values south of equator).
/// Example: /// Example: 38.834
/// Constraints: No constraints specified.
func (rcv *GNSSRawIF_Ingest) StartLat() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(28))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// WGS-84 spacecraft latitude sub-point at start time (startTime), represented as -90 to 90 degrees (negative values south of equator).
/// Example: /// Example: 38.834
/// Constraints: No constraints specified.
func (rcv *GNSSRawIF_Ingest) MutateStartLat(n float64) bool {
	return rcv._tab.MutateFloat64Slot(28, n)
}

/// WGS-84 spacecraft longitude sub-point at start time (startTime), represented as -180 to 180 degrees (negative values west of Prime Meridian).
/// Example: /// Example: -104.821
/// Constraints: No constraints specified.
func (rcv *GNSSRawIF_Ingest) StartLon() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(30))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// WGS-84 spacecraft longitude sub-point at start time (startTime), represented as -180 to 180 degrees (negative values west of Prime Meridian).
/// Example: /// Example: -104.821
/// Constraints: No constraints specified.
func (rcv *GNSSRawIF_Ingest) MutateStartLon(n float64) bool {
	return rcv._tab.MutateFloat64Slot(30, n)
}

/// Spacecraft altitude at start time (startTime), expressed in kilometers above WGS-84 ellipsoid.
/// Example: /// Example: 525.664
/// Constraints: No constraints specified.
func (rcv *GNSSRawIF_Ingest) StartAlt() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(32))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Spacecraft altitude at start time (startTime), expressed in kilometers above WGS-84 ellipsoid.
/// Example: /// Example: 525.664
/// Constraints: No constraints specified.
func (rcv *GNSSRawIF_Ingest) MutateStartAlt(n float64) bool {
	return rcv._tab.MutateFloat64Slot(32, n)
}

/// WGS-84 spacecraft latitude sub-point at end time (endTime), represented as -90 to 90 degrees (negative values south of equator).
/// Example: /// Example: 38.922
/// Constraints: No constraints specified.
func (rcv *GNSSRawIF_Ingest) EndLat() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(34))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// WGS-84 spacecraft latitude sub-point at end time (endTime), represented as -90 to 90 degrees (negative values south of equator).
/// Example: /// Example: 38.922
/// Constraints: No constraints specified.
func (rcv *GNSSRawIF_Ingest) MutateEndLat(n float64) bool {
	return rcv._tab.MutateFloat64Slot(34, n)
}

/// WGS-84 spacecraft longitude sub-point at end time (endTime), represented as -180 to 180 degrees (negative values west of Prime Meridian).
/// Example: /// Example: -104.67
/// Constraints: No constraints specified.
func (rcv *GNSSRawIF_Ingest) EndLon() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(36))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// WGS-84 spacecraft longitude sub-point at end time (endTime), represented as -180 to 180 degrees (negative values west of Prime Meridian).
/// Example: /// Example: -104.67
/// Constraints: No constraints specified.
func (rcv *GNSSRawIF_Ingest) MutateEndLon(n float64) bool {
	return rcv._tab.MutateFloat64Slot(36, n)
}

/// Spacecraft altitude at end time (endTime), expressed in kilometers above WGS-84 ellipsoid.
/// Example: /// Example: 525.626
/// Constraints: No constraints specified.
func (rcv *GNSSRawIF_Ingest) EndAlt() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(38))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Spacecraft altitude at end time (endTime), expressed in kilometers above WGS-84 ellipsoid.
/// Example: /// Example: 525.626
/// Constraints: No constraints specified.
func (rcv *GNSSRawIF_Ingest) MutateEndAlt(n float64) bool {
	return rcv._tab.MutateFloat64Slot(38, n)
}

/// The center frequency, in MHz, of the observation bands.  More than one band may be reported in each binary file, so this is an array of the center frequency of each band (including an array of length 1 if only one band is present).
/// Example: /// Example: [1227.6, 1575.4]
/// Constraints: No constraints specified.
func (rcv *GNSSRawIF_Ingest) CenterFreq(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(40))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *GNSSRawIF_Ingest) CenterFreqLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(40))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

/// The center frequency, in MHz, of the observation bands.  More than one band may be reported in each binary file, so this is an array of the center frequency of each band (including an array of length 1 if only one band is present).
/// Example: /// Example: [1227.6, 1575.4]
/// Constraints: No constraints specified.
/// The center frequency, in MHz, after downconversion to intermediate frequency.  If provided, this array should have the same length as centerFreqs.
/// Example: /// Example: [4.09, 5.87]
/// Constraints: No constraints specified.
func (rcv *GNSSRawIF_Ingest) IfFreq(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(42))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *GNSSRawIF_Ingest) IfFreqLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(42))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

/// The center frequency, in MHz, after downconversion to intermediate frequency.  If provided, this array should have the same length as centerFreqs.
/// Example: /// Example: [4.09, 5.87]
/// Constraints: No constraints specified.
/// The number of samples taken per second.
/// Example: /// Example: [8000, 9000]
/// Constraints: No constraints specified.
func (rcv *GNSSRawIF_Ingest) SampleRate(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(44))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *GNSSRawIF_Ingest) SampleRateLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(44))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

/// The number of samples taken per second.
/// Example: /// Example: [8000, 9000]
/// Constraints: No constraints specified.
/// After converting the raw data in the file, to generate (frequency-space) spectra some sets require an additional transformation or correction based on details of the hardware that recorded it.  This field marks any such transformations.  Currently supported options are NONE (no correction) and MIRRORED (frequency axis is flipped around the corresponding value of ifFreq). If null, it is assumed that NONE applies to all frequency bands.
/// Example: /// Example: ['NONE', 'NONE']
/// Constraints: No constraints specified.
func (rcv *GNSSRawIF_Ingest) PostFourier(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(46))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *GNSSRawIF_Ingest) PostFourierLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(46))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

/// After converting the raw data in the file, to generate (frequency-space) spectra some sets require an additional transformation or correction based on details of the hardware that recorded it.  This field marks any such transformations.  Currently supported options are NONE (no correction) and MIRRORED (frequency axis is flipped around the corresponding value of ifFreq). If null, it is assumed that NONE applies to all frequency bands.
/// Example: /// Example: ['NONE', 'NONE']
/// Constraints: No constraints specified.
/// The sample type associated with the IF data.  REAL for data with only an I-component or COMPLEX for data with both I & Q components.
/// Example: /// Example: COMPLEX
/// Constraints: Minimum length = 0, Maximum length = 10
func (rcv *GNSSRawIF_Ingest) SampleType() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(48))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The sample type associated with the IF data.  REAL for data with only an I-component or COMPLEX for data with both I & Q components.
/// Example: /// Example: COMPLEX
/// Constraints: Minimum length = 0, Maximum length = 10
/// The number of bits in each datum, for example 2 for 2-bit integers or 8 for 8-bit integers.
/// Example: /// Example: 8
/// Constraints: No constraints specified.
func (rcv *GNSSRawIF_Ingest) BitDepth() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(50))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

/// The number of bits in each datum, for example 2 for 2-bit integers or 8 for 8-bit integers.
/// Example: /// Example: 8
/// Constraints: No constraints specified.
func (rcv *GNSSRawIF_Ingest) MutateBitDepth(n int32) bool {
	return rcv._tab.MutateInt32Slot(50, n)
}

/// Differential Code Biases (DCBs) are the systematic errors, or biases, between two GNSS code observations at the same or different frequencies.  If applicable, this field should contain an array of DBC with length equal to the number of frequencies in the binary file.  The reference frequency should show DCB equal to 0.  If null, it is assumed that there is no DCB (all values are 0).
/// Example: /// Example: [0.0271, 0.0016]
/// Constraints: No constraints specified.
func (rcv *GNSSRawIF_Ingest) DiffCodeBias(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(52))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *GNSSRawIF_Ingest) DiffCodeBiasLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(52))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

/// Differential Code Biases (DCBs) are the systematic errors, or biases, between two GNSS code observations at the same or different frequencies.  If applicable, this field should contain an array of DBC with length equal to the number of frequencies in the binary file.  The reference frequency should show DCB equal to 0.  If null, it is assumed that there is no DCB (all values are 0).
/// Example: /// Example: [0.0271, 0.0016]
/// Constraints: No constraints specified.
/// The amount of data generated per unit time, expressed in Megabytes/minute.
/// Example: /// Example: 0.205
/// Constraints: No constraints specified.
func (rcv *GNSSRawIF_Ingest) DataRate() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(54))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// The amount of data generated per unit time, expressed in Megabytes/minute.
/// Example: /// Example: 0.205
/// Constraints: No constraints specified.
func (rcv *GNSSRawIF_Ingest) MutateDataRate(n float64) bool {
	return rcv._tab.MutateFloat64Slot(54, n)
}

/// User-defined ID of a set or sequence of records/files.  Used to associate a set of related raw IF records.
/// Example: /// Example: 2b0b1b1a-a3c0-4267-894a-0c40cb84a5af
/// Constraints: No constraints specified.
func (rcv *GNSSRawIF_Ingest) SetId() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(56))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// User-defined ID of a set or sequence of records/files.  Used to associate a set of related raw IF records.
/// Example: /// Example: 2b0b1b1a-a3c0-4267-894a-0c40cb84a5af
/// Constraints: No constraints specified.
/// The number of raw IF records/files in a set.
/// Example: /// Example: 7
/// Constraints: No constraints specified.
func (rcv *GNSSRawIF_Ingest) SetLength() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(58))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

/// The number of raw IF records/files in a set.
/// Example: /// Example: 7
/// Constraints: No constraints specified.
func (rcv *GNSSRawIF_Ingest) MutateSetLength(n int32) bool {
	return rcv._tab.MutateInt32Slot(58, n)
}

/// The sequence number of a raw IF record/file within a set.  Sequence number should start at 1.  If null, then it is assumed that the order of records within a raw IF set is not relevant.
/// Example: /// Example: 1
/// Constraints: No constraints specified.
func (rcv *GNSSRawIF_Ingest) SequenceId() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(60))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

/// The sequence number of a raw IF record/file within a set.  Sequence number should start at 1.  If null, then it is assumed that the order of records within a raw IF set is not relevant.
/// Example: /// Example: 1
/// Constraints: No constraints specified.
func (rcv *GNSSRawIF_Ingest) MutateSequenceId(n int32) bool {
	return rcv._tab.MutateInt32Slot(60, n)
}

/// The file name of the Raw IF Binary file.  The files should be in the Hierarchical Data Format (HDF5).
/// Example: /// Example: somefile.hdf5
/// Constraints: Minimum length = 0, Maximum length = 128
func (rcv *GNSSRawIF_Ingest) FileName() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(62))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The file name of the Raw IF Binary file.  The files should be in the Hierarchical Data Format (HDF5).
/// Example: /// Example: somefile.hdf5
/// Constraints: Minimum length = 0, Maximum length = 128
/// Array of UDL record types (GNSSSET) associated with this GNSSRawIF record. See the associated 'srcIds' array for the record UUIDs, positionally corresponding to the record types in this array. The 'srcTyps' and 'srcIds' arrays must match in size.
/// Example: /// Example: ['GNSSSET']
/// Constraints: No constraints specified.
func (rcv *GNSSRawIF_Ingest) SrcTyps(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(64))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *GNSSRawIF_Ingest) SrcTypsLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(64))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

/// Array of UDL record types (GNSSSET) associated with this GNSSRawIF record. See the associated 'srcIds' array for the record UUIDs, positionally corresponding to the record types in this array. The 'srcTyps' and 'srcIds' arrays must match in size.
/// Example: /// Example: ['GNSSSET']
/// Constraints: No constraints specified.
/// Array of UUIDs of the UDL data records associated with this GNSSRawIF record. See the associated 'srcTyps' array for the specific types of data, positionally corresponding to the UUIDs in this array. The 'srcTyps' and 'srcIds' arrays must match in size. See the corresponding srcTyps array element for the data type of the UUID and use the appropriate API operation to retrieve that object (e.g. /udl/gnssobservationset/{uuid}).
/// Example: /// Example: ['GNSSSET_ID']
/// Constraints: No constraints specified.
func (rcv *GNSSRawIF_Ingest) SrcIds(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(66))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *GNSSRawIF_Ingest) SrcIdsLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(66))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

/// Array of UUIDs of the UDL data records associated with this GNSSRawIF record. See the associated 'srcTyps' array for the specific types of data, positionally corresponding to the UUIDs in this array. The 'srcTyps' and 'srcIds' arrays must match in size. See the corresponding srcTyps array element for the data type of the UUID and use the appropriate API operation to retrieve that object (e.g. /udl/gnssobservationset/{uuid}).
/// Example: /// Example: ['GNSSSET_ID']
/// Constraints: No constraints specified.
/// The binary file size, in bytes, auto-populated by the system.  The maximum file size for this service is 5,000,000 Bytes (5 MB). Files exceeding the maximum size will be rejected.
/// Example: /// Example: 3168895
/// Constraints: No constraints specified.
func (rcv *GNSSRawIF_Ingest) FileSize() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(68))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

/// The binary file size, in bytes, auto-populated by the system.  The maximum file size for this service is 5,000,000 Bytes (5 MB). Files exceeding the maximum size will be rejected.
/// Example: /// Example: 3168895
/// Constraints: No constraints specified.
func (rcv *GNSSRawIF_Ingest) MutateFileSize(n int64) bool {
	return rcv._tab.MutateInt64Slot(68, n)
}

/// Optional array of provider/source specific tags for this data, where each element is no longer than 32 characters, used for implementing data owner conditional access controls to restrict access to the data. Should be left null by data providers unless conditional access controls are coordinated with the UDL team.
/// Example: /// Example: ['TAG1', 'TAG2']
/// Constraints: No constraints specified.
func (rcv *GNSSRawIF_Ingest) Tags(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(70))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *GNSSRawIF_Ingest) TagsLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(70))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

/// Optional array of provider/source specific tags for this data, where each element is no longer than 32 characters, used for implementing data owner conditional access controls to restrict access to the data. Should be left null by data providers unless conditional access controls are coordinated with the UDL team.
/// Example: /// Example: ['TAG1', 'TAG2']
/// Constraints: No constraints specified.
/// Time the row was created in the database, auto-populated by the system.
/// Example: /// Example: 2018-01-01T16:00:00.123Z
/// Constraints: No constraints specified.
func (rcv *GNSSRawIF_Ingest) CreatedAt() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(72))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Time the row was created in the database, auto-populated by the system.
/// Example: /// Example: 2018-01-01T16:00:00.123Z
/// Constraints: No constraints specified.
/// Application user who created the row in the database, auto-populated by the system.
/// Example: /// Example: some.user
/// Constraints: Minimum length = 1, Maximum length = 64
func (rcv *GNSSRawIF_Ingest) CreatedBy() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(74))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Application user who created the row in the database, auto-populated by the system.
/// Example: /// Example: some.user
/// Constraints: Minimum length = 1, Maximum length = 64
/// Source of the data.
/// Example: /// Example: Bluestaq
/// Constraints: Minimum length = 1, Maximum length = 64
func (rcv *GNSSRawIF_Ingest) Source() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(76))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Source of the data.
/// Example: /// Example: Bluestaq
/// Constraints: Minimum length = 1, Maximum length = 64
/// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
/// Example: /// Example: THIRD_PARTY_DATASOURCE
/// Constraints: Minimum length = 0, Maximum length = 64
func (rcv *GNSSRawIF_Ingest) Origin() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(78))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
/// Example: /// Example: THIRD_PARTY_DATASOURCE
/// Constraints: Minimum length = 0, Maximum length = 64
/// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
/// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
/// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
/// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
/// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
/// Example: /// Example: TEST
/// Constraints: Minimum length = 1, Maximum length = 32
func (rcv *GNSSRawIF_Ingest) DataMode() GNSSRawIF_Ingest_dataMode_Enum {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(80))
	if o != 0 {
		return GNSSRawIF_Ingest_dataMode_Enum(rcv._tab.GetInt8(o + rcv._tab.Pos))
	}
	return 0
}

/// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
/// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
/// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
/// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
/// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
/// Example: /// Example: TEST
/// Constraints: Minimum length = 1, Maximum length = 32
func (rcv *GNSSRawIF_Ingest) MutateDataMode(n GNSSRawIF_Ingest_dataMode_Enum) bool {
	return rcv._tab.MutateInt8Slot(80, int8(n))
}

/// The originating source network on which this record was created, auto-populated by the system.
/// Example: /// Example: ORIG
/// Constraints: Minimum length = 1, Maximum length = 32
func (rcv *GNSSRawIF_Ingest) OrigNetwork() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(82))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The originating source network on which this record was created, auto-populated by the system.
/// Example: /// Example: ORIG
/// Constraints: Minimum length = 1, Maximum length = 32
func GNSSRawIF_IngestStart(builder *flatbuffers.Builder) {
	builder.StartObject(40)
}
func GNSSRawIF_IngestAddId(builder *flatbuffers.Builder, id flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(id), 0)
}
func GNSSRawIF_IngestAddClassificationMarking(builder *flatbuffers.Builder, classificationMarking flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(classificationMarking), 0)
}
func GNSSRawIF_IngestAddIdOnOrbit(builder *flatbuffers.Builder, idOnOrbit flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(idOnOrbit), 0)
}
func GNSSRawIF_IngestAddSatNo(builder *flatbuffers.Builder, satNo int32) {
	builder.PrependInt32Slot(3, satNo, 0)
}
func GNSSRawIF_IngestAddOrigObjectId(builder *flatbuffers.Builder, origObjectId flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(4, flatbuffers.UOffsetT(origObjectId), 0)
}
func GNSSRawIF_IngestAddEsId(builder *flatbuffers.Builder, esId flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(5, flatbuffers.UOffsetT(esId), 0)
}
func GNSSRawIF_IngestAddReceiver(builder *flatbuffers.Builder, receiver flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(6, flatbuffers.UOffsetT(receiver), 0)
}
func GNSSRawIF_IngestAddBoresight(builder *flatbuffers.Builder, boresight flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(7, flatbuffers.UOffsetT(boresight), 0)
}
func GNSSRawIF_IngestStartBoresightVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func GNSSRawIF_IngestAddQuat(builder *flatbuffers.Builder, quat flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(8, flatbuffers.UOffsetT(quat), 0)
}
func GNSSRawIF_IngestStartQuatVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func GNSSRawIF_IngestAddStartIndex(builder *flatbuffers.Builder, startIndex int32) {
	builder.PrependInt32Slot(9, startIndex, 0)
}
func GNSSRawIF_IngestAddStartTime(builder *flatbuffers.Builder, startTime flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(10, flatbuffers.UOffsetT(startTime), 0)
}
func GNSSRawIF_IngestAddEndTime(builder *flatbuffers.Builder, endTime flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(11, flatbuffers.UOffsetT(endTime), 0)
}
func GNSSRawIF_IngestAddStartLat(builder *flatbuffers.Builder, startLat float64) {
	builder.PrependFloat64Slot(12, startLat, 0.0)
}
func GNSSRawIF_IngestAddStartLon(builder *flatbuffers.Builder, startLon float64) {
	builder.PrependFloat64Slot(13, startLon, 0.0)
}
func GNSSRawIF_IngestAddStartAlt(builder *flatbuffers.Builder, startAlt float64) {
	builder.PrependFloat64Slot(14, startAlt, 0.0)
}
func GNSSRawIF_IngestAddEndLat(builder *flatbuffers.Builder, endLat float64) {
	builder.PrependFloat64Slot(15, endLat, 0.0)
}
func GNSSRawIF_IngestAddEndLon(builder *flatbuffers.Builder, endLon float64) {
	builder.PrependFloat64Slot(16, endLon, 0.0)
}
func GNSSRawIF_IngestAddEndAlt(builder *flatbuffers.Builder, endAlt float64) {
	builder.PrependFloat64Slot(17, endAlt, 0.0)
}
func GNSSRawIF_IngestAddCenterFreq(builder *flatbuffers.Builder, centerFreq flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(18, flatbuffers.UOffsetT(centerFreq), 0)
}
func GNSSRawIF_IngestStartCenterFreqVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func GNSSRawIF_IngestAddIfFreq(builder *flatbuffers.Builder, ifFreq flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(19, flatbuffers.UOffsetT(ifFreq), 0)
}
func GNSSRawIF_IngestStartIfFreqVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func GNSSRawIF_IngestAddSampleRate(builder *flatbuffers.Builder, sampleRate flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(20, flatbuffers.UOffsetT(sampleRate), 0)
}
func GNSSRawIF_IngestStartSampleRateVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func GNSSRawIF_IngestAddPostFourier(builder *flatbuffers.Builder, postFourier flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(21, flatbuffers.UOffsetT(postFourier), 0)
}
func GNSSRawIF_IngestStartPostFourierVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func GNSSRawIF_IngestAddSampleType(builder *flatbuffers.Builder, sampleType flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(22, flatbuffers.UOffsetT(sampleType), 0)
}
func GNSSRawIF_IngestAddBitDepth(builder *flatbuffers.Builder, bitDepth int32) {
	builder.PrependInt32Slot(23, bitDepth, 0)
}
func GNSSRawIF_IngestAddDiffCodeBias(builder *flatbuffers.Builder, diffCodeBias flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(24, flatbuffers.UOffsetT(diffCodeBias), 0)
}
func GNSSRawIF_IngestStartDiffCodeBiasVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func GNSSRawIF_IngestAddDataRate(builder *flatbuffers.Builder, dataRate float64) {
	builder.PrependFloat64Slot(25, dataRate, 0.0)
}
func GNSSRawIF_IngestAddSetId(builder *flatbuffers.Builder, setId flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(26, flatbuffers.UOffsetT(setId), 0)
}
func GNSSRawIF_IngestAddSetLength(builder *flatbuffers.Builder, setLength int32) {
	builder.PrependInt32Slot(27, setLength, 0)
}
func GNSSRawIF_IngestAddSequenceId(builder *flatbuffers.Builder, sequenceId int32) {
	builder.PrependInt32Slot(28, sequenceId, 0)
}
func GNSSRawIF_IngestAddFileName(builder *flatbuffers.Builder, fileName flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(29, flatbuffers.UOffsetT(fileName), 0)
}
func GNSSRawIF_IngestAddSrcTyps(builder *flatbuffers.Builder, srcTyps flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(30, flatbuffers.UOffsetT(srcTyps), 0)
}
func GNSSRawIF_IngestStartSrcTypsVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func GNSSRawIF_IngestAddSrcIds(builder *flatbuffers.Builder, srcIds flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(31, flatbuffers.UOffsetT(srcIds), 0)
}
func GNSSRawIF_IngestStartSrcIdsVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func GNSSRawIF_IngestAddFileSize(builder *flatbuffers.Builder, fileSize int64) {
	builder.PrependInt64Slot(32, fileSize, 0)
}
func GNSSRawIF_IngestAddTags(builder *flatbuffers.Builder, tags flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(33, flatbuffers.UOffsetT(tags), 0)
}
func GNSSRawIF_IngestStartTagsVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func GNSSRawIF_IngestAddCreatedAt(builder *flatbuffers.Builder, createdAt flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(34, flatbuffers.UOffsetT(createdAt), 0)
}
func GNSSRawIF_IngestAddCreatedBy(builder *flatbuffers.Builder, createdBy flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(35, flatbuffers.UOffsetT(createdBy), 0)
}
func GNSSRawIF_IngestAddSource(builder *flatbuffers.Builder, source flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(36, flatbuffers.UOffsetT(source), 0)
}
func GNSSRawIF_IngestAddOrigin(builder *flatbuffers.Builder, origin flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(37, flatbuffers.UOffsetT(origin), 0)
}
func GNSSRawIF_IngestAddDataMode(builder *flatbuffers.Builder, dataMode GNSSRawIF_Ingest_dataMode_Enum) {
	builder.PrependInt8Slot(38, int8(dataMode), 0)
}
func GNSSRawIF_IngestAddOrigNetwork(builder *flatbuffers.Builder, origNetwork flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(39, flatbuffers.UOffsetT(origNetwork), 0)
}
func GNSSRawIF_IngestEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
