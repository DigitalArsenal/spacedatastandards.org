// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package FlightPlanWaypoints_Ingest

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

/// /// Collection of waypoints associated with this flight plan.
type FlightPlanWaypoints_Ingest struct {
	_tab flatbuffers.Table
}

const FlightPlanWaypoints_IngestIdentifier = "FLIG"

func GetRootAsFlightPlanWaypoints_Ingest(buf []byte, offset flatbuffers.UOffsetT) *FlightPlanWaypoints_Ingest {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &FlightPlanWaypoints_Ingest{}
	x.Init(buf, n+offset)
	return x
}

func FinishFlightPlanWaypoints_IngestBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	identifierBytes := []byte(FlightPlanWaypoints_IngestIdentifier)
	builder.FinishWithFileIdentifier(offset, identifierBytes)
}

func FlightPlanWaypoints_IngestBufferHasIdentifier(buf []byte) bool {
	return flatbuffers.BufferHasIdentifier(buf, FlightPlanWaypoints_IngestIdentifier)
}

func GetSizePrefixedRootAsFlightPlanWaypoints_Ingest(buf []byte, offset flatbuffers.UOffsetT) *FlightPlanWaypoints_Ingest {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &FlightPlanWaypoints_Ingest{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedFlightPlanWaypoints_IngestBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	identifierBytes := []byte(FlightPlanWaypoints_IngestIdentifier)
	builder.FinishSizePrefixedWithFileIdentifier(offset, identifierBytes)
}

func SizePrefixedFlightPlanWaypoints_IngestBufferHasIdentifier(buf []byte) bool {
	return flatbuffers.SizePrefixedBufferHasIdentifier(buf, FlightPlanWaypoints_IngestIdentifier)
}

func (rcv *FlightPlanWaypoints_Ingest) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *FlightPlanWaypoints_Ingest) Table() flatbuffers.Table {
	return rcv._tab
}

/// Points are designated by type as either a comment point or a waypoint. A comment point conveys important information about the point for pilots but is not entered into a flight management system. A waypoint is a point that is entered into a flight management system and/or filed with Air Traffic Control.
/// Example: /// Example: COMMENT
/// Constraints: Minimum length = 1, Maximum length = 16
func (rcv *FlightPlanWaypoints_Ingest) Type() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Points are designated by type as either a comment point or a waypoint. A comment point conveys important information about the point for pilots but is not entered into a flight management system. A waypoint is a point that is entered into a flight management system and/or filed with Air Traffic Control.
/// Example: /// Example: COMMENT
/// Constraints: Minimum length = 1, Maximum length = 16
/// Name of the point. The name of a comment point identifies important information about that point, e.g. Top of Climb. The name of a waypoint identifies the location of that point.
/// Example: /// Example: KCHS
/// Constraints: Minimum length = 1, Maximum length = 32
func (rcv *FlightPlanWaypoints_Ingest) WaypointName() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Name of the point. The name of a comment point identifies important information about that point, e.g. Top of Climb. The name of a waypoint identifies the location of that point.
/// Example: /// Example: KCHS
/// Constraints: Minimum length = 1, Maximum length = 32
/// The waypoint number on the route. Comment points do not get a waypoint number.
/// Example: /// Example: 20
/// Constraints: No constraints specified.
func (rcv *FlightPlanWaypoints_Ingest) WaypointNum() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

/// The waypoint number on the route. Comment points do not get a waypoint number.
/// Example: /// Example: 20
/// Constraints: No constraints specified.
func (rcv *FlightPlanWaypoints_Ingest) MutateWaypointNum(n int32) bool {
	return rcv._tab.MutateInt32Slot(8, n)
}

/// The flight path flown for this leg.
/// Example: /// Example: W15
/// Constraints: Minimum length = 0, Maximum length = 16
func (rcv *FlightPlanWaypoints_Ingest) Airway() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The flight path flown for this leg.
/// Example: /// Example: W15
/// Constraints: Minimum length = 0, Maximum length = 16
/// Point identifying an air refueling track/anchor or fixed track.
/// Example: /// Example: ARIP
/// Constraints: Minimum length = 0, Maximum length = 16
func (rcv *FlightPlanWaypoints_Ingest) Arpt() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Point identifying an air refueling track/anchor or fixed track.
/// Example: /// Example: ARIP
/// Constraints: Minimum length = 0, Maximum length = 16
/// WGS84 latitude of the point location, in degrees. -90 to 90 degrees (negative values south of equator).
/// Example: /// Example: 45.23
/// Constraints: No constraints specified.
func (rcv *FlightPlanWaypoints_Ingest) Lat() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// WGS84 latitude of the point location, in degrees. -90 to 90 degrees (negative values south of equator).
/// Example: /// Example: 45.23
/// Constraints: No constraints specified.
func (rcv *FlightPlanWaypoints_Ingest) MutateLat(n float64) bool {
	return rcv._tab.MutateFloat64Slot(14, n)
}

/// WGS84 longitude of the point location, in degrees. -180 to 180 degrees (negative values west of Prime Meridian).
/// Example: /// Example: 179.1
/// Constraints: No constraints specified.
func (rcv *FlightPlanWaypoints_Ingest) Lon() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// WGS84 longitude of the point location, in degrees. -180 to 180 degrees (negative values west of Prime Meridian).
/// Example: /// Example: 179.1
/// Constraints: No constraints specified.
func (rcv *FlightPlanWaypoints_Ingest) MutateLon(n float64) bool {
	return rcv._tab.MutateFloat64Slot(16, n)
}

/// The ID of the air refueling track/anchor or fixed track.
/// Example: /// Example: AR202
/// Constraints: Minimum length = 0, Maximum length = 16
func (rcv *FlightPlanWaypoints_Ingest) ArId() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(18))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The ID of the air refueling track/anchor or fixed track.
/// Example: /// Example: AR202
/// Constraints: Minimum length = 0, Maximum length = 16
/// Navigational Aid (NAVAID) identification code.
/// Example: /// Example: HTO
/// Constraints: Minimum length = 0, Maximum length = 16
func (rcv *FlightPlanWaypoints_Ingest) Navaid() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(20))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Navigational Aid (NAVAID) identification code.
/// Example: /// Example: HTO
/// Constraints: Minimum length = 0, Maximum length = 16
/// Tactical Air Navigation (TACAN) channel for the Navigational Aid (NAVAID).
/// Example: /// Example: 83X
/// Constraints: Minimum length = 0, Maximum length = 16
func (rcv *FlightPlanWaypoints_Ingest) TacanChannel() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(22))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Tactical Air Navigation (TACAN) channel for the Navigational Aid (NAVAID).
/// Example: /// Example: 83X
/// Constraints: Minimum length = 0, Maximum length = 16
/// VHF Omni-directional Range (VOR) frequency for the Navigational Aid (NAVAID) in megahertz.
/// Example: /// Example: 113.6
/// Constraints: No constraints specified.
func (rcv *FlightPlanWaypoints_Ingest) VorFreq() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(24))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// VHF Omni-directional Range (VOR) frequency for the Navigational Aid (NAVAID) in megahertz.
/// Example: /// Example: 113.6
/// Constraints: No constraints specified.
func (rcv *FlightPlanWaypoints_Ingest) MutateVorFreq(n float64) bool {
	return rcv._tab.MutateFloat64Slot(24, n)
}

/// The turbulence intensity classification for this flight (LIGHT, MODERATE, etc).
/// Example: /// Example: EXTREME
/// Constraints: Minimum length = 0, Maximum length = 16
func (rcv *FlightPlanWaypoints_Ingest) TurbCat() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(26))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The turbulence intensity classification for this flight (LIGHT, MODERATE, etc).
/// Example: /// Example: EXTREME
/// Constraints: Minimum length = 0, Maximum length = 16
/// The icing intensity classification for this flight (LIGHT, MODERATE, etc).
/// Example: /// Example: MODERATE
/// Constraints: Minimum length = 0, Maximum length = 16
func (rcv *FlightPlanWaypoints_Ingest) IceCat() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(28))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The icing intensity classification for this flight (LIGHT, MODERATE, etc).
/// Example: /// Example: MODERATE
/// Constraints: Minimum length = 0, Maximum length = 16
/// The thunderstorm intensity classification for this flight (LIGHT, MODERATE, etc).
/// Example: /// Example: MODERATE
/// Constraints: Minimum length = 0, Maximum length = 16
func (rcv *FlightPlanWaypoints_Ingest) ThunderCat() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(30))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The thunderstorm intensity classification for this flight (LIGHT, MODERATE, etc).
/// Example: /// Example: MODERATE
/// Constraints: Minimum length = 0, Maximum length = 16
/// Altitude of a level, point, or object measured in feet above mean sea level.
/// Example: /// Example: 27000.1
/// Constraints: No constraints specified.
func (rcv *FlightPlanWaypoints_Ingest) Alt() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(32))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Altitude of a level, point, or object measured in feet above mean sea level.
/// Example: /// Example: 27000.1
/// Constraints: No constraints specified.
func (rcv *FlightPlanWaypoints_Ingest) MutateAlt(n float64) bool {
	return rcv._tab.MutateFloat64Slot(32, n)
}

/// Average temperature deviation from standard day profile for this leg in degrees Celsius.
/// Example: /// Example: 12.1
/// Constraints: No constraints specified.
func (rcv *FlightPlanWaypoints_Ingest) TempDev() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(34))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Average temperature deviation from standard day profile for this leg in degrees Celsius.
/// Example: /// Example: 12.1
/// Constraints: No constraints specified.
func (rcv *FlightPlanWaypoints_Ingest) MutateTempDev(n float64) bool {
	return rcv._tab.MutateFloat64Slot(34, n)
}

/// The fuel degrade percentage used for this leg.
/// Example: /// Example: 10.1
/// Constraints: No constraints specified.
func (rcv *FlightPlanWaypoints_Ingest) LegFuelDegrade() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(36))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// The fuel degrade percentage used for this leg.
/// Example: /// Example: 10.1
/// Constraints: No constraints specified.
func (rcv *FlightPlanWaypoints_Ingest) MutateLegFuelDegrade(n float64) bool {
	return rcv._tab.MutateFloat64Slot(36, n)
}

/// The average Mach speed for this leg.
/// Example: /// Example: 0.74
/// Constraints: No constraints specified.
func (rcv *FlightPlanWaypoints_Ingest) LegMach() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(38))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// The average Mach speed for this leg.
/// Example: /// Example: 0.74
/// Constraints: No constraints specified.
func (rcv *FlightPlanWaypoints_Ingest) MutateLegMach(n float64) bool {
	return rcv._tab.MutateFloat64Slot(38, n)
}

/// The mission index value for this leg. The mission index is the ratio of time-related cost of aircraft operation to the cost of fuel.
/// Example: /// Example: 65
/// Constraints: No constraints specified.
func (rcv *FlightPlanWaypoints_Ingest) LegMsnIndex() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(40))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// The mission index value for this leg. The mission index is the ratio of time-related cost of aircraft operation to the cost of fuel.
/// Example: /// Example: 65
/// Constraints: No constraints specified.
func (rcv *FlightPlanWaypoints_Ingest) MutateLegMsnIndex(n float64) bool {
	return rcv._tab.MutateFloat64Slot(40, n)
}

/// The percent degrade due to drag for this aircraft for this leg.
/// Example: /// Example: 1.2
/// Constraints: No constraints specified.
func (rcv *FlightPlanWaypoints_Ingest) LegDragIndex() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(42))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// The percent degrade due to drag for this aircraft for this leg.
/// Example: /// Example: 1.2
/// Constraints: No constraints specified.
func (rcv *FlightPlanWaypoints_Ingest) MutateLegDragIndex(n float64) bool {
	return rcv._tab.MutateFloat64Slot(42, n)
}

/// The average calibrated airspeed (CAS) for this leg in knots.
/// Example: /// Example: 200.1
/// Constraints: No constraints specified.
func (rcv *FlightPlanWaypoints_Ingest) AvgCalAirspeed() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(44))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// The average calibrated airspeed (CAS) for this leg in knots.
/// Example: /// Example: 200.1
/// Constraints: No constraints specified.
func (rcv *FlightPlanWaypoints_Ingest) MutateAvgCalAirspeed(n float64) bool {
	return rcv._tab.MutateFloat64Slot(44, n)
}

/// The average true airspeed (TAS) for this leg in knots.
/// Example: /// Example: 210.1
/// Constraints: No constraints specified.
func (rcv *FlightPlanWaypoints_Ingest) AvgTrueAirspeed() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(46))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// The average true airspeed (TAS) for this leg in knots.
/// Example: /// Example: 210.1
/// Constraints: No constraints specified.
func (rcv *FlightPlanWaypoints_Ingest) MutateAvgTrueAirspeed(n float64) bool {
	return rcv._tab.MutateFloat64Slot(46, n)
}

/// The average ground speed for this leg in knots.
/// Example: /// Example: 300.1
/// Constraints: No constraints specified.
func (rcv *FlightPlanWaypoints_Ingest) AvgGroundSpeed() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(48))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// The average ground speed for this leg in knots.
/// Example: /// Example: 300.1
/// Constraints: No constraints specified.
func (rcv *FlightPlanWaypoints_Ingest) MutateAvgGroundSpeed(n float64) bool {
	return rcv._tab.MutateFloat64Slot(48, n)
}

/// The primary UHF radio frequency used for the air refueling track or anchor in megahertz.
/// Example: /// Example: 357.5
/// Constraints: No constraints specified.
func (rcv *FlightPlanWaypoints_Ingest) PriFreq() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(50))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// The primary UHF radio frequency used for the air refueling track or anchor in megahertz.
/// Example: /// Example: 357.5
/// Constraints: No constraints specified.
func (rcv *FlightPlanWaypoints_Ingest) MutatePriFreq(n float64) bool {
	return rcv._tab.MutateFloat64Slot(50, n)
}

/// The wind direction at this specific point in degrees from true north.
/// Example: /// Example: 165.5
/// Constraints: No constraints specified.
func (rcv *FlightPlanWaypoints_Ingest) PointWindDir() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(52))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// The wind direction at this specific point in degrees from true north.
/// Example: /// Example: 165.5
/// Constraints: No constraints specified.
func (rcv *FlightPlanWaypoints_Ingest) MutatePointWindDir(n float64) bool {
	return rcv._tab.MutateFloat64Slot(52, n)
}

/// The wind velocity at this specific point in knots.
/// Example: /// Example: 14.4
/// Constraints: No constraints specified.
func (rcv *FlightPlanWaypoints_Ingest) PointWindSpeed() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(54))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// The wind velocity at this specific point in knots.
/// Example: /// Example: 14.4
/// Constraints: No constraints specified.
func (rcv *FlightPlanWaypoints_Ingest) MutatePointWindSpeed(n float64) bool {
	return rcv._tab.MutateFloat64Slot(54, n)
}

/// The average wind direction for this leg in degrees from true north.
/// Example: /// Example: 165.5
/// Constraints: No constraints specified.
func (rcv *FlightPlanWaypoints_Ingest) AvgWindDir() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(56))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// The average wind direction for this leg in degrees from true north.
/// Example: /// Example: 165.5
/// Constraints: No constraints specified.
func (rcv *FlightPlanWaypoints_Ingest) MutateAvgWindDir(n float64) bool {
	return rcv._tab.MutateFloat64Slot(56, n)
}

/// The average wind speed for this leg in knots.
/// Example: /// Example: 14.4
/// Constraints: No constraints specified.
func (rcv *FlightPlanWaypoints_Ingest) AvgWindSpeed() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(58))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// The average wind speed for this leg in knots.
/// Example: /// Example: 14.4
/// Constraints: No constraints specified.
func (rcv *FlightPlanWaypoints_Ingest) MutateAvgWindSpeed(n float64) bool {
	return rcv._tab.MutateFloat64Slot(58, n)
}

/// The wind factor for this leg in knots. A positive value indicates a headwind, while a negative value indicates a tailwind.
/// Example: /// Example: -32.1
/// Constraints: No constraints specified.
func (rcv *FlightPlanWaypoints_Ingest) LegWindFac() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(60))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// The wind factor for this leg in knots. A positive value indicates a headwind, while a negative value indicates a tailwind.
/// Example: /// Example: -32.1
/// Constraints: No constraints specified.
func (rcv *FlightPlanWaypoints_Ingest) MutateLegWindFac(n float64) bool {
	return rcv._tab.MutateFloat64Slot(60, n)
}

/// The average drift angle for this leg in degrees from true north.
/// Example: /// Example: -3.2
/// Constraints: No constraints specified.
func (rcv *FlightPlanWaypoints_Ingest) AvgDriftAng() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(62))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// The average drift angle for this leg in degrees from true north.
/// Example: /// Example: -3.2
/// Constraints: No constraints specified.
func (rcv *FlightPlanWaypoints_Ingest) MutateAvgDriftAng(n float64) bool {
	return rcv._tab.MutateFloat64Slot(62, n)
}

/// The secondary UHF radio frequency used for the air refueling track or anchor in megahertz.
/// Example: /// Example: 357.5
/// Constraints: No constraints specified.
func (rcv *FlightPlanWaypoints_Ingest) SecFreq() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(64))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// The secondary UHF radio frequency used for the air refueling track or anchor in megahertz.
/// Example: /// Example: 357.5
/// Constraints: No constraints specified.
func (rcv *FlightPlanWaypoints_Ingest) MutateSecFreq(n float64) bool {
	return rcv._tab.MutateFloat64Slot(64, n)
}

/// The magnetic course at leg midpoint in degrees from true north.
/// Example: /// Example: 338.1
/// Constraints: No constraints specified.
func (rcv *FlightPlanWaypoints_Ingest) MagCourse() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(66))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// The magnetic course at leg midpoint in degrees from true north.
/// Example: /// Example: 338.1
/// Constraints: No constraints specified.
func (rcv *FlightPlanWaypoints_Ingest) MutateMagCourse(n float64) bool {
	return rcv._tab.MutateFloat64Slot(66, n)
}

/// The true course at leg midpoint in degrees from true north.
/// Example: /// Example: 328.1
/// Constraints: No constraints specified.
func (rcv *FlightPlanWaypoints_Ingest) TrueCourse() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(68))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// The true course at leg midpoint in degrees from true north.
/// Example: /// Example: 328.1
/// Constraints: No constraints specified.
func (rcv *FlightPlanWaypoints_Ingest) MutateTrueCourse(n float64) bool {
	return rcv._tab.MutateFloat64Slot(68, n)
}

/// The magnetic heading at leg midpoint in degrees from true north.
/// Example: /// Example: 212.1
/// Constraints: No constraints specified.
func (rcv *FlightPlanWaypoints_Ingest) MagHeading() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(70))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// The magnetic heading at leg midpoint in degrees from true north.
/// Example: /// Example: 212.1
/// Constraints: No constraints specified.
func (rcv *FlightPlanWaypoints_Ingest) MutateMagHeading(n float64) bool {
	return rcv._tab.MutateFloat64Slot(70, n)
}

/// The air-to-air Tactical Air Navigation (TACAN) channels used by the receiver/tanker during air refueling.
/// Example: /// Example: 31/94
/// Constraints: Minimum length = 0, Maximum length = 16
func (rcv *FlightPlanWaypoints_Ingest) AaTacanChannel() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(72))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The air-to-air Tactical Air Navigation (TACAN) channels used by the receiver/tanker during air refueling.
/// Example: /// Example: 31/94
/// Constraints: Minimum length = 0, Maximum length = 16
/// The zone/leg distance flown in nautical miles.
/// Example: /// Example: 212.1
/// Constraints: No constraints specified.
func (rcv *FlightPlanWaypoints_Ingest) ZoneDistance() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(74))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// The zone/leg distance flown in nautical miles.
/// Example: /// Example: 212.1
/// Constraints: No constraints specified.
func (rcv *FlightPlanWaypoints_Ingest) MutateZoneDistance(n float64) bool {
	return rcv._tab.MutateFloat64Slot(74, n)
}

/// The total distance flown to this waypoint calculated from point of departure in nautical miles.
/// Example: /// Example: 688.1
/// Constraints: No constraints specified.
func (rcv *FlightPlanWaypoints_Ingest) TotalFlownDistance() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(76))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// The total distance flown to this waypoint calculated from point of departure in nautical miles.
/// Example: /// Example: 688.1
/// Constraints: No constraints specified.
func (rcv *FlightPlanWaypoints_Ingest) MutateTotalFlownDistance(n float64) bool {
	return rcv._tab.MutateFloat64Slot(76, n)
}

/// The total distance remaining from this waypoint to the point of arrival in nautical miles.
/// Example: /// Example: 1288.1
/// Constraints: No constraints specified.
func (rcv *FlightPlanWaypoints_Ingest) TotalRemDistance() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(78))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// The total distance remaining from this waypoint to the point of arrival in nautical miles.
/// Example: /// Example: 1288.1
/// Constraints: No constraints specified.
func (rcv *FlightPlanWaypoints_Ingest) MutateTotalRemDistance(n float64) bool {
	return rcv._tab.MutateFloat64Slot(78, n)
}

/// The time to fly this zone/leg in minutes.
/// Example: /// Example: 36.1
/// Constraints: No constraints specified.
func (rcv *FlightPlanWaypoints_Ingest) ZoneTime() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(80))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// The time to fly this zone/leg in minutes.
/// Example: /// Example: 36.1
/// Constraints: No constraints specified.
func (rcv *FlightPlanWaypoints_Ingest) MutateZoneTime(n float64) bool {
	return rcv._tab.MutateFloat64Slot(80, n)
}

/// The total time accumulated from takeoff to this waypoint expressed as HH:MM.
/// Example: /// Example: 08:45
/// Constraints: Minimum length = 0, Maximum length = 6
func (rcv *FlightPlanWaypoints_Ingest) TotalTime() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(82))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The total time accumulated from takeoff to this waypoint expressed as HH:MM.
/// Example: /// Example: 08:45
/// Constraints: Minimum length = 0, Maximum length = 6
/// The total time remaining from this waypoint to the point of arrival expressed as HH:MM.
/// Example: /// Example: 01:43
/// Constraints: Minimum length = 0, Maximum length = 6
func (rcv *FlightPlanWaypoints_Ingest) TotalTimeRem() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(84))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The total time remaining from this waypoint to the point of arrival expressed as HH:MM.
/// Example: /// Example: 01:43
/// Constraints: Minimum length = 0, Maximum length = 6
/// The amount of fuel used on this zone/leg in pounds.
/// Example: /// Example: 1120.1
/// Constraints: No constraints specified.
func (rcv *FlightPlanWaypoints_Ingest) ZoneFuel() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(86))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// The amount of fuel used on this zone/leg in pounds.
/// Example: /// Example: 1120.1
/// Constraints: No constraints specified.
func (rcv *FlightPlanWaypoints_Ingest) MutateZoneFuel(n float64) bool {
	return rcv._tab.MutateFloat64Slot(86, n)
}

/// The total fuel used to this waypoint from point of departure in pounds.
/// Example: /// Example: 70431.1
/// Constraints: No constraints specified.
func (rcv *FlightPlanWaypoints_Ingest) TotalUsedFuel() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(88))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// The total fuel used to this waypoint from point of departure in pounds.
/// Example: /// Example: 70431.1
/// Constraints: No constraints specified.
func (rcv *FlightPlanWaypoints_Ingest) MutateTotalUsedFuel(n float64) bool {
	return rcv._tab.MutateFloat64Slot(88, n)
}

/// The total fuel remaining at this waypoint in pounds.
/// Example: /// Example: 30453.1
/// Constraints: No constraints specified.
func (rcv *FlightPlanWaypoints_Ingest) TotalRemFuel() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(90))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// The total fuel remaining at this waypoint in pounds.
/// Example: /// Example: 30453.1
/// Constraints: No constraints specified.
func (rcv *FlightPlanWaypoints_Ingest) MutateTotalRemFuel(n float64) bool {
	return rcv._tab.MutateFloat64Slot(90, n)
}

/// The amount of fuel onloaded or offloaded at this waypoint in pounds (negative value for offload).
/// Example: /// Example: -30400.1
/// Constraints: No constraints specified.
func (rcv *FlightPlanWaypoints_Ingest) ExchangedFuel() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(92))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// The amount of fuel onloaded or offloaded at this waypoint in pounds (negative value for offload).
/// Example: /// Example: -30400.1
/// Constraints: No constraints specified.
func (rcv *FlightPlanWaypoints_Ingest) MutateExchangedFuel(n float64) bool {
	return rcv._tab.MutateFloat64Slot(92, n)
}

/// The air distance of this leg in nautical miles.
/// Example: /// Example: 321.1
/// Constraints: No constraints specified.
func (rcv *FlightPlanWaypoints_Ingest) AirDistance() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(94))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// The air distance of this leg in nautical miles.
/// Example: /// Example: 321.1
/// Constraints: No constraints specified.
func (rcv *FlightPlanWaypoints_Ingest) MutateAirDistance(n float64) bool {
	return rcv._tab.MutateFloat64Slot(94, n)
}

/// The total air distance to this waypoint in nautical miles.
/// Example: /// Example: 3251.1
/// Constraints: No constraints specified.
func (rcv *FlightPlanWaypoints_Ingest) TotalAirDistance() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(96))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// The total air distance to this waypoint in nautical miles.
/// Example: /// Example: 3251.1
/// Constraints: No constraints specified.
func (rcv *FlightPlanWaypoints_Ingest) MutateTotalAirDistance(n float64) bool {
	return rcv._tab.MutateFloat64Slot(96, n)
}

/// The total weight of the aircraft at this waypoint in pounds.
/// Example: /// Example: 207123.1
/// Constraints: No constraints specified.
func (rcv *FlightPlanWaypoints_Ingest) TotalWeight() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(98))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// The total weight of the aircraft at this waypoint in pounds.
/// Example: /// Example: 207123.1
/// Constraints: No constraints specified.
func (rcv *FlightPlanWaypoints_Ingest) MutateTotalWeight(n float64) bool {
	return rcv._tab.MutateFloat64Slot(98, n)
}

/// Estimated Time of Arrival (ETA) at this waypoint in ISO 8601 UTC format, with millisecond precision.
/// Example: /// Example: 2023-09-09T01:00:00.123Z
/// Constraints: No constraints specified.
func (rcv *FlightPlanWaypoints_Ingest) Eta() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(100))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Estimated Time of Arrival (ETA) at this waypoint in ISO 8601 UTC format, with millisecond precision.
/// Example: /// Example: 2023-09-09T01:00:00.123Z
/// Constraints: No constraints specified.
/// Actual Time of Arrival (ATA) at this waypoint in ISO 8601 UTC format, with millisecond precision.
/// Example: /// Example: 2023-09-09T01:00:00.123Z
/// Constraints: No constraints specified.
func (rcv *FlightPlanWaypoints_Ingest) Ata() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(102))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Actual Time of Arrival (ATA) at this waypoint in ISO 8601 UTC format, with millisecond precision.
/// Example: /// Example: 2023-09-09T01:00:00.123Z
/// Constraints: No constraints specified.
/// The leg fuel flow in pounds per hour.
/// Example: /// Example: 17654.1
/// Constraints: No constraints specified.
func (rcv *FlightPlanWaypoints_Ingest) FuelFlow() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(104))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// The leg fuel flow in pounds per hour.
/// Example: /// Example: 17654.1
/// Constraints: No constraints specified.
func (rcv *FlightPlanWaypoints_Ingest) MutateFuelFlow(n float64) bool {
	return rcv._tab.MutateFloat64Slot(104, n)
}

/// The planned alternate leg based on user-defined constraints, International Civil Aviation Organization (ICAO) code preferred.
/// Example: /// Example: KCHS
/// Constraints: Minimum length = 0, Maximum length = 16
func (rcv *FlightPlanWaypoints_Ingest) LegAlternate() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(106))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The planned alternate leg based on user-defined constraints, International Civil Aviation Organization (ICAO) code preferred.
/// Example: /// Example: KCHS
/// Constraints: Minimum length = 0, Maximum length = 16
/// The magnetic variation for this leg in degrees.
/// Example: /// Example: -13.2
/// Constraints: No constraints specified.
func (rcv *FlightPlanWaypoints_Ingest) MagVar() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(108))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// The magnetic variation for this leg in degrees.
/// Example: /// Example: -13.2
/// Constraints: No constraints specified.
func (rcv *FlightPlanWaypoints_Ingest) MutateMagVar(n float64) bool {
	return rcv._tab.MutateFloat64Slot(108, n)
}

/// The day low level altitude in feet above sea level for the leg ending at this waypoint.
/// Example: /// Example: 1500.1
/// Constraints: No constraints specified.
func (rcv *FlightPlanWaypoints_Ingest) DayLowAlt() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(110))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// The day low level altitude in feet above sea level for the leg ending at this waypoint.
/// Example: /// Example: 1500.1
/// Constraints: No constraints specified.
func (rcv *FlightPlanWaypoints_Ingest) MutateDayLowAlt(n float64) bool {
	return rcv._tab.MutateFloat64Slot(110, n)
}

/// The night low level altitude in feet above sea level for the leg ending at this waypoint.
/// Example: /// Example: 2300.1
/// Constraints: No constraints specified.
func (rcv *FlightPlanWaypoints_Ingest) NightLowAlt() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(112))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// The night low level altitude in feet above sea level for the leg ending at this waypoint.
/// Example: /// Example: 2300.1
/// Constraints: No constraints specified.
func (rcv *FlightPlanWaypoints_Ingest) MutateNightLowAlt(n float64) bool {
	return rcv._tab.MutateFloat64Slot(112, n)
}

/// The night vision goggle low level altitude in feet above sea level for the leg ending at this waypoint.
/// Example: /// Example: 2450.1
/// Constraints: No constraints specified.
func (rcv *FlightPlanWaypoints_Ingest) NvgLowAlt() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(114))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// The night vision goggle low level altitude in feet above sea level for the leg ending at this waypoint.
/// Example: /// Example: 2450.1
/// Constraints: No constraints specified.
func (rcv *FlightPlanWaypoints_Ingest) MutateNvgLowAlt(n float64) bool {
	return rcv._tab.MutateFloat64Slot(114, n)
}

func FlightPlanWaypoints_IngestStart(builder *flatbuffers.Builder) {
	builder.StartObject(56)
}
func FlightPlanWaypoints_IngestAddType(builder *flatbuffers.Builder, type_ flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(type_), 0)
}
func FlightPlanWaypoints_IngestAddWaypointName(builder *flatbuffers.Builder, waypointName flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(waypointName), 0)
}
func FlightPlanWaypoints_IngestAddWaypointNum(builder *flatbuffers.Builder, waypointNum int32) {
	builder.PrependInt32Slot(2, waypointNum, 0)
}
func FlightPlanWaypoints_IngestAddAirway(builder *flatbuffers.Builder, airway flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(3, flatbuffers.UOffsetT(airway), 0)
}
func FlightPlanWaypoints_IngestAddArpt(builder *flatbuffers.Builder, arpt flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(4, flatbuffers.UOffsetT(arpt), 0)
}
func FlightPlanWaypoints_IngestAddLat(builder *flatbuffers.Builder, lat float64) {
	builder.PrependFloat64Slot(5, lat, 0.0)
}
func FlightPlanWaypoints_IngestAddLon(builder *flatbuffers.Builder, lon float64) {
	builder.PrependFloat64Slot(6, lon, 0.0)
}
func FlightPlanWaypoints_IngestAddArId(builder *flatbuffers.Builder, arId flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(7, flatbuffers.UOffsetT(arId), 0)
}
func FlightPlanWaypoints_IngestAddNavaid(builder *flatbuffers.Builder, navaid flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(8, flatbuffers.UOffsetT(navaid), 0)
}
func FlightPlanWaypoints_IngestAddTacanChannel(builder *flatbuffers.Builder, tacanChannel flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(9, flatbuffers.UOffsetT(tacanChannel), 0)
}
func FlightPlanWaypoints_IngestAddVorFreq(builder *flatbuffers.Builder, vorFreq float64) {
	builder.PrependFloat64Slot(10, vorFreq, 0.0)
}
func FlightPlanWaypoints_IngestAddTurbCat(builder *flatbuffers.Builder, turbCat flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(11, flatbuffers.UOffsetT(turbCat), 0)
}
func FlightPlanWaypoints_IngestAddIceCat(builder *flatbuffers.Builder, iceCat flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(12, flatbuffers.UOffsetT(iceCat), 0)
}
func FlightPlanWaypoints_IngestAddThunderCat(builder *flatbuffers.Builder, thunderCat flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(13, flatbuffers.UOffsetT(thunderCat), 0)
}
func FlightPlanWaypoints_IngestAddAlt(builder *flatbuffers.Builder, alt float64) {
	builder.PrependFloat64Slot(14, alt, 0.0)
}
func FlightPlanWaypoints_IngestAddTempDev(builder *flatbuffers.Builder, tempDev float64) {
	builder.PrependFloat64Slot(15, tempDev, 0.0)
}
func FlightPlanWaypoints_IngestAddLegFuelDegrade(builder *flatbuffers.Builder, legFuelDegrade float64) {
	builder.PrependFloat64Slot(16, legFuelDegrade, 0.0)
}
func FlightPlanWaypoints_IngestAddLegMach(builder *flatbuffers.Builder, legMach float64) {
	builder.PrependFloat64Slot(17, legMach, 0.0)
}
func FlightPlanWaypoints_IngestAddLegMsnIndex(builder *flatbuffers.Builder, legMsnIndex float64) {
	builder.PrependFloat64Slot(18, legMsnIndex, 0.0)
}
func FlightPlanWaypoints_IngestAddLegDragIndex(builder *flatbuffers.Builder, legDragIndex float64) {
	builder.PrependFloat64Slot(19, legDragIndex, 0.0)
}
func FlightPlanWaypoints_IngestAddAvgCalAirspeed(builder *flatbuffers.Builder, avgCalAirspeed float64) {
	builder.PrependFloat64Slot(20, avgCalAirspeed, 0.0)
}
func FlightPlanWaypoints_IngestAddAvgTrueAirspeed(builder *flatbuffers.Builder, avgTrueAirspeed float64) {
	builder.PrependFloat64Slot(21, avgTrueAirspeed, 0.0)
}
func FlightPlanWaypoints_IngestAddAvgGroundSpeed(builder *flatbuffers.Builder, avgGroundSpeed float64) {
	builder.PrependFloat64Slot(22, avgGroundSpeed, 0.0)
}
func FlightPlanWaypoints_IngestAddPriFreq(builder *flatbuffers.Builder, priFreq float64) {
	builder.PrependFloat64Slot(23, priFreq, 0.0)
}
func FlightPlanWaypoints_IngestAddPointWindDir(builder *flatbuffers.Builder, pointWindDir float64) {
	builder.PrependFloat64Slot(24, pointWindDir, 0.0)
}
func FlightPlanWaypoints_IngestAddPointWindSpeed(builder *flatbuffers.Builder, pointWindSpeed float64) {
	builder.PrependFloat64Slot(25, pointWindSpeed, 0.0)
}
func FlightPlanWaypoints_IngestAddAvgWindDir(builder *flatbuffers.Builder, avgWindDir float64) {
	builder.PrependFloat64Slot(26, avgWindDir, 0.0)
}
func FlightPlanWaypoints_IngestAddAvgWindSpeed(builder *flatbuffers.Builder, avgWindSpeed float64) {
	builder.PrependFloat64Slot(27, avgWindSpeed, 0.0)
}
func FlightPlanWaypoints_IngestAddLegWindFac(builder *flatbuffers.Builder, legWindFac float64) {
	builder.PrependFloat64Slot(28, legWindFac, 0.0)
}
func FlightPlanWaypoints_IngestAddAvgDriftAng(builder *flatbuffers.Builder, avgDriftAng float64) {
	builder.PrependFloat64Slot(29, avgDriftAng, 0.0)
}
func FlightPlanWaypoints_IngestAddSecFreq(builder *flatbuffers.Builder, secFreq float64) {
	builder.PrependFloat64Slot(30, secFreq, 0.0)
}
func FlightPlanWaypoints_IngestAddMagCourse(builder *flatbuffers.Builder, magCourse float64) {
	builder.PrependFloat64Slot(31, magCourse, 0.0)
}
func FlightPlanWaypoints_IngestAddTrueCourse(builder *flatbuffers.Builder, trueCourse float64) {
	builder.PrependFloat64Slot(32, trueCourse, 0.0)
}
func FlightPlanWaypoints_IngestAddMagHeading(builder *flatbuffers.Builder, magHeading float64) {
	builder.PrependFloat64Slot(33, magHeading, 0.0)
}
func FlightPlanWaypoints_IngestAddAaTacanChannel(builder *flatbuffers.Builder, aaTacanChannel flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(34, flatbuffers.UOffsetT(aaTacanChannel), 0)
}
func FlightPlanWaypoints_IngestAddZoneDistance(builder *flatbuffers.Builder, zoneDistance float64) {
	builder.PrependFloat64Slot(35, zoneDistance, 0.0)
}
func FlightPlanWaypoints_IngestAddTotalFlownDistance(builder *flatbuffers.Builder, totalFlownDistance float64) {
	builder.PrependFloat64Slot(36, totalFlownDistance, 0.0)
}
func FlightPlanWaypoints_IngestAddTotalRemDistance(builder *flatbuffers.Builder, totalRemDistance float64) {
	builder.PrependFloat64Slot(37, totalRemDistance, 0.0)
}
func FlightPlanWaypoints_IngestAddZoneTime(builder *flatbuffers.Builder, zoneTime float64) {
	builder.PrependFloat64Slot(38, zoneTime, 0.0)
}
func FlightPlanWaypoints_IngestAddTotalTime(builder *flatbuffers.Builder, totalTime flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(39, flatbuffers.UOffsetT(totalTime), 0)
}
func FlightPlanWaypoints_IngestAddTotalTimeRem(builder *flatbuffers.Builder, totalTimeRem flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(40, flatbuffers.UOffsetT(totalTimeRem), 0)
}
func FlightPlanWaypoints_IngestAddZoneFuel(builder *flatbuffers.Builder, zoneFuel float64) {
	builder.PrependFloat64Slot(41, zoneFuel, 0.0)
}
func FlightPlanWaypoints_IngestAddTotalUsedFuel(builder *flatbuffers.Builder, totalUsedFuel float64) {
	builder.PrependFloat64Slot(42, totalUsedFuel, 0.0)
}
func FlightPlanWaypoints_IngestAddTotalRemFuel(builder *flatbuffers.Builder, totalRemFuel float64) {
	builder.PrependFloat64Slot(43, totalRemFuel, 0.0)
}
func FlightPlanWaypoints_IngestAddExchangedFuel(builder *flatbuffers.Builder, exchangedFuel float64) {
	builder.PrependFloat64Slot(44, exchangedFuel, 0.0)
}
func FlightPlanWaypoints_IngestAddAirDistance(builder *flatbuffers.Builder, airDistance float64) {
	builder.PrependFloat64Slot(45, airDistance, 0.0)
}
func FlightPlanWaypoints_IngestAddTotalAirDistance(builder *flatbuffers.Builder, totalAirDistance float64) {
	builder.PrependFloat64Slot(46, totalAirDistance, 0.0)
}
func FlightPlanWaypoints_IngestAddTotalWeight(builder *flatbuffers.Builder, totalWeight float64) {
	builder.PrependFloat64Slot(47, totalWeight, 0.0)
}
func FlightPlanWaypoints_IngestAddEta(builder *flatbuffers.Builder, eta flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(48, flatbuffers.UOffsetT(eta), 0)
}
func FlightPlanWaypoints_IngestAddAta(builder *flatbuffers.Builder, ata flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(49, flatbuffers.UOffsetT(ata), 0)
}
func FlightPlanWaypoints_IngestAddFuelFlow(builder *flatbuffers.Builder, fuelFlow float64) {
	builder.PrependFloat64Slot(50, fuelFlow, 0.0)
}
func FlightPlanWaypoints_IngestAddLegAlternate(builder *flatbuffers.Builder, legAlternate flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(51, flatbuffers.UOffsetT(legAlternate), 0)
}
func FlightPlanWaypoints_IngestAddMagVar(builder *flatbuffers.Builder, magVar float64) {
	builder.PrependFloat64Slot(52, magVar, 0.0)
}
func FlightPlanWaypoints_IngestAddDayLowAlt(builder *flatbuffers.Builder, dayLowAlt float64) {
	builder.PrependFloat64Slot(53, dayLowAlt, 0.0)
}
func FlightPlanWaypoints_IngestAddNightLowAlt(builder *flatbuffers.Builder, nightLowAlt float64) {
	builder.PrependFloat64Slot(54, nightLowAlt, 0.0)
}
func FlightPlanWaypoints_IngestAddNvgLowAlt(builder *flatbuffers.Builder, nvgLowAlt float64) {
	builder.PrependFloat64Slot(55, nvgLowAlt, 0.0)
}
func FlightPlanWaypoints_IngestEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
