// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package SiteStatus_Full

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

/// /// No description available.
type SiteStatus_Full struct {
	_tab flatbuffers.Table
}

const SiteStatus_FullIdentifier = "SITE"

func GetRootAsSiteStatus_Full(buf []byte, offset flatbuffers.UOffsetT) *SiteStatus_Full {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &SiteStatus_Full{}
	x.Init(buf, n+offset)
	return x
}

func FinishSiteStatus_FullBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	identifierBytes := []byte(SiteStatus_FullIdentifier)
	builder.FinishWithFileIdentifier(offset, identifierBytes)
}

func SiteStatus_FullBufferHasIdentifier(buf []byte) bool {
	return flatbuffers.BufferHasIdentifier(buf, SiteStatus_FullIdentifier)
}

func GetSizePrefixedRootAsSiteStatus_Full(buf []byte, offset flatbuffers.UOffsetT) *SiteStatus_Full {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &SiteStatus_Full{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedSiteStatus_FullBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	identifierBytes := []byte(SiteStatus_FullIdentifier)
	builder.FinishSizePrefixedWithFileIdentifier(offset, identifierBytes)
}

func SizePrefixedSiteStatus_FullBufferHasIdentifier(buf []byte) bool {
	return flatbuffers.SizePrefixedBufferHasIdentifier(buf, SiteStatus_FullIdentifier)
}

func (rcv *SiteStatus_Full) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *SiteStatus_Full) Table() flatbuffers.Table {
	return rcv._tab
}

/// Unique identifier of the record, auto-generated by the system.
/// Example: /// Example: SITESTATUS-ID
/// Constraints: Minimum length = 1, Maximum length = 36
func (rcv *SiteStatus_Full) Id() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Unique identifier of the record, auto-generated by the system.
/// Example: /// Example: SITESTATUS-ID
/// Constraints: Minimum length = 1, Maximum length = 36
/// Classification marking of the data in IC/CAPCO Portion-marked format.
/// Example: /// Example: U
/// Constraints: Minimum length = 1, Maximum length = 128
func (rcv *SiteStatus_Full) ClassificationMarking() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Classification marking of the data in IC/CAPCO Portion-marked format.
/// Example: /// Example: U
/// Constraints: Minimum length = 1, Maximum length = 128
/// The ID of the site, if this status is associated with a fixed site or platform.
/// Example: /// Example: 41e3e554-9790-40b9-bd7b-f30d864dcad8
/// Constraints: Minimum length = 1, Maximum length = 36
func (rcv *SiteStatus_Full) IdSite() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The ID of the site, if this status is associated with a fixed site or platform.
/// Example: /// Example: 41e3e554-9790-40b9-bd7b-f30d864dcad8
/// Constraints: Minimum length = 1, Maximum length = 36
/// Optional site type or further detail of type.  Intended for, but not limited to, Link-16 site type specifications (e.g. ADOC, GACC, SOC, TACC, etc.).
/// Example: /// Example: ADOC
/// Constraints: Minimum length = 0, Maximum length = 36
func (rcv *SiteStatus_Full) SiteType() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Optional site type or further detail of type.  Intended for, but not limited to, Link-16 site type specifications (e.g. ADOC, GACC, SOC, TACC, etc.).
/// Example: /// Example: ADOC
/// Constraints: Minimum length = 0, Maximum length = 36
/// Alternate Identifier for a mobile or transportable platform provided by source.
/// Example: /// Example: MOBILEALT-ID
/// Constraints: Minimum length = 0, Maximum length = 36
func (rcv *SiteStatus_Full) MobileAltId() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Alternate Identifier for a mobile or transportable platform provided by source.
/// Example: /// Example: MOBILEALT-ID
/// Constraints: Minimum length = 0, Maximum length = 36
/// The POI (point of interest) ID related to this platform, if available.
/// Example: /// Example: d4a91864-6140-4b8d-67cd-45421c75f696
/// Constraints: Minimum length = 0, Maximum length = 36
func (rcv *SiteStatus_Full) Poiid() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The POI (point of interest) ID related to this platform, if available.
/// Example: /// Example: d4a91864-6140-4b8d-67cd-45421c75f696
/// Constraints: Minimum length = 0, Maximum length = 36
/// The track ID related to this platform (if mobile or transportable), if available.
/// Example: /// Example: PCM4923-1656174732-4-1-257
/// Constraints: Minimum length = 0, Maximum length = 36
func (rcv *SiteStatus_Full) TrackId() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The track ID related to this platform (if mobile or transportable), if available.
/// Example: /// Example: PCM4923-1656174732-4-1-257
/// Constraints: Minimum length = 0, Maximum length = 36
/// Link-16 specific reference track number.
/// Example: /// Example: TrkNm
/// Constraints: Minimum length = 0, Maximum length = 5
func (rcv *SiteStatus_Full) TrackRefL16() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(18))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Link-16 specific reference track number.
/// Example: /// Example: TrkNm
/// Constraints: Minimum length = 0, Maximum length = 5
/// The operational status of the platform (e.g. Fully Operational, Partially Operational, Not Operational, etc.).
/// Example: /// Example: Fully Operational
/// Constraints: Minimum length = 0, Maximum length = 24
func (rcv *SiteStatus_Full) OpsCapability() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(20))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The operational status of the platform (e.g. Fully Operational, Partially Operational, Not Operational, etc.).
/// Example: /// Example: Fully Operational
/// Constraints: Minimum length = 0, Maximum length = 24
/// The status of the installation.
/// FMC - Fully Mission Capable
///  PMC - Partially Mission Capable
/// NMC - Non Mission Capable
/// UNK - Unknown.
/// Example: /// Example: PMC
/// Constraints: Minimum length = 0, Maximum length = 3
func (rcv *SiteStatus_Full) InstStatus() SiteStatus_Full_instStatus_Enum {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(22))
	if o != 0 {
		return SiteStatus_Full_instStatus_Enum(rcv._tab.GetInt8(o + rcv._tab.Pos))
	}
	return 0
}

/// The status of the installation.
/// FMC - Fully Mission Capable
///  PMC - Partially Mission Capable
/// NMC - Non Mission Capable
/// UNK - Unknown.
/// Example: /// Example: PMC
/// Constraints: Minimum length = 0, Maximum length = 3
func (rcv *SiteStatus_Full) MutateInstStatus(n SiteStatus_Full_instStatus_Enum) bool {
	return rcv._tab.MutateInt8Slot(22, int8(n))
}

/// Force Protection Condition (FPCON).
/// NORMAL - Applies when a general global threat of possible terrorist activity exists and warrants a routine security posture.
/// ALPHA - Applies when an increased general threat of possible terrorist activity against personnel or facilities. Nature and extent of threat are unpredictable.
/// BRAVO - Applies when an increased or predictable threat of terrorist activity exists.
/// CHARLIE - Applies when an incident occurs or intelligence is received indicating some form of terrorist action against personnel and facilities is imminent.
/// DELTA - Applies in the immediate area where an attack has occurred or when intelligence is received indicating terrorist action against a location is imminent.
/// Example: /// Example: BRAVO
/// Constraints: Minimum length = 0, Maximum length = 7
func (rcv *SiteStatus_Full) Fpcon() SiteStatus_Full_fpcon_Enum {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(24))
	if o != 0 {
		return SiteStatus_Full_fpcon_Enum(rcv._tab.GetInt8(o + rcv._tab.Pos))
	}
	return 0
}

/// Force Protection Condition (FPCON).
/// NORMAL - Applies when a general global threat of possible terrorist activity exists and warrants a routine security posture.
/// ALPHA - Applies when an increased general threat of possible terrorist activity against personnel or facilities. Nature and extent of threat are unpredictable.
/// BRAVO - Applies when an increased or predictable threat of terrorist activity exists.
/// CHARLIE - Applies when an incident occurs or intelligence is received indicating some form of terrorist action against personnel and facilities is imminent.
/// DELTA - Applies in the immediate area where an attack has occurred or when intelligence is received indicating terrorist action against a location is imminent.
/// Example: /// Example: BRAVO
/// Constraints: Minimum length = 0, Maximum length = 7
func (rcv *SiteStatus_Full) MutateFpcon(n SiteStatus_Full_fpcon_Enum) bool {
	return rcv._tab.MutateInt8Slot(24, int8(n))
}

/// Health Protection Condition (HPCON).
/// 0 - Routine, no community transmission.
/// ALPHA - Limited, community transmission beginning.
/// BRAVO - Moderate, increased community transmission.
/// CHARLIE - Substantial, sustained community transmission.
/// DELTA - Severe, widespread community transmission.
/// Example: /// Example: CHARLIE
/// Constraints: Minimum length = 0, Maximum length = 7
func (rcv *SiteStatus_Full) Hpcon() SiteStatus_Full_hpcon_Enum {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(26))
	if o != 0 {
		return SiteStatus_Full_hpcon_Enum(rcv._tab.GetInt8(o + rcv._tab.Pos))
	}
	return 0
}

/// Health Protection Condition (HPCON).
/// 0 - Routine, no community transmission.
/// ALPHA - Limited, community transmission beginning.
/// BRAVO - Moderate, increased community transmission.
/// CHARLIE - Substantial, sustained community transmission.
/// DELTA - Severe, widespread community transmission.
/// Example: /// Example: CHARLIE
/// Constraints: Minimum length = 0, Maximum length = 7
func (rcv *SiteStatus_Full) MutateHpcon(n SiteStatus_Full_hpcon_Enum) bool {
	return rcv._tab.MutateInt8Slot(26, int8(n))
}

/// Cyberspace Protection Condition (CPCON).
/// 1 - VERY HIGH - Critical functions.
/// 2 - HIGH - Critical and essential functions.
/// 3 - MEDIUM - Critical, essential, and support functions.
/// 4 - LOW - All functions.
/// 5 - VERY LOW - All functions.
/// Example: /// Example: 4
/// Constraints: Minimum length = 0, Maximum length = 1
func (rcv *SiteStatus_Full) Cpcon() SiteStatus_Full_cpcon_Enum {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(28))
	if o != 0 {
		return SiteStatus_Full_cpcon_Enum(rcv._tab.GetInt8(o + rcv._tab.Pos))
	}
	return 0
}

/// Cyberspace Protection Condition (CPCON).
/// 1 - VERY HIGH - Critical functions.
/// 2 - HIGH - Critical and essential functions.
/// 3 - MEDIUM - Critical, essential, and support functions.
/// 4 - LOW - All functions.
/// 5 - VERY LOW - All functions.
/// Example: /// Example: 4
/// Constraints: Minimum length = 0, Maximum length = 1
func (rcv *SiteStatus_Full) MutateCpcon(n SiteStatus_Full_cpcon_Enum) bool {
	return rcv._tab.MutateInt8Slot(28, int8(n))
}

/// Time of report, in ISO8601 UTC format.
/// Example: /// Example: 2021-01-01T01:01:01.123Z
/// Constraints: No constraints specified.
func (rcv *SiteStatus_Full) ReportTime() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(30))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Time of report, in ISO8601 UTC format.
/// Example: /// Example: 2021-01-01T01:01:01.123Z
/// Constraints: No constraints specified.
/// Description of the time function associated with the reportTime (e.g. Activation, Deactivation, Arrival, Departure, etc.), if applicable.
/// Example: /// Example: Activation
/// Constraints: Minimum length = 0, Maximum length = 24
func (rcv *SiteStatus_Full) TimeFunction() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(32))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Description of the time function associated with the reportTime (e.g. Activation, Deactivation, Arrival, Departure, etc.), if applicable.
/// Example: /// Example: Activation
/// Constraints: Minimum length = 0, Maximum length = 24
/// Description of the current weather conditions over a site.
/// Example: /// Example: Heavy rain
/// Constraints: Minimum length = 0, Maximum length = 512
func (rcv *SiteStatus_Full) WeatherMessage() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(34))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Description of the current weather conditions over a site.
/// Example: /// Example: Heavy rain
/// Constraints: Minimum length = 0, Maximum length = 512
/// Position Engagement Status flag, Indicating whether this platform is initiating multiple simultaneous engagements.  A value of 1/True indicates the platform is initiating multiple simultaneous engagements.
/// Example: /// Example: True
/// Constraints: No constraints specified.
func (rcv *SiteStatus_Full) Pes() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(36))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

/// Position Engagement Status flag, Indicating whether this platform is initiating multiple simultaneous engagements.  A value of 1/True indicates the platform is initiating multiple simultaneous engagements.
/// Example: /// Example: True
/// Constraints: No constraints specified.
func (rcv *SiteStatus_Full) MutatePes(n bool) bool {
	return rcv._tab.MutateBoolSlot(36, n)
}

/// Estimated number of hot missiles of all types remaining in weapons system inventory.
/// Example: /// Example: 1
/// Constraints: No constraints specified.
func (rcv *SiteStatus_Full) HotInventory() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(38))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

/// Estimated number of hot missiles of all types remaining in weapons system inventory.
/// Example: /// Example: 1
/// Constraints: No constraints specified.
func (rcv *SiteStatus_Full) MutateHotInventory(n int32) bool {
	return rcv._tab.MutateInt32Slot(38, n)
}

/// Estimated number of cold missiles of all types remaining in weapons system inventory.
/// Example: /// Example: 1
/// Constraints: No constraints specified.
func (rcv *SiteStatus_Full) ColdInventory() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(40))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

/// Estimated number of cold missiles of all types remaining in weapons system inventory.
/// Example: /// Example: 1
/// Constraints: No constraints specified.
func (rcv *SiteStatus_Full) MutateColdInventory(n int32) bool {
	return rcv._tab.MutateInt32Slot(40, n)
}

/// The state of a SAM unit (e.g. Initialization, Standby, Reorientation, etc.).
/// Example: /// Example: Initialization
/// Constraints: Minimum length = 0, Maximum length = 48
func (rcv *SiteStatus_Full) SamMode() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(42))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The state of a SAM unit (e.g. Initialization, Standby, Reorientation, etc.).
/// Example: /// Example: Initialization
/// Constraints: Minimum length = 0, Maximum length = 48
/// SAM sensor radar surveillance mode (Active, Passive, Off).
/// Example: /// Example: Active
/// Constraints: Minimum length = 0, Maximum length = 24
func (rcv *SiteStatus_Full) RadiateMode() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(44))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// SAM sensor radar surveillance mode (Active, Passive, Off).
/// Example: /// Example: Active
/// Constraints: Minimum length = 0, Maximum length = 24
/// The primary component degrading the operational capability of the platform or system.
/// Example: /// Example: opsImpairment
/// Constraints: Minimum length = 0, Maximum length = 48
func (rcv *SiteStatus_Full) OpsImpairment() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(46))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The primary component degrading the operational capability of the platform or system.
/// Example: /// Example: opsImpairment
/// Constraints: Minimum length = 0, Maximum length = 48
/// The communications component causing the platform or system to be less than fully operational.
/// Example: /// Example: commImpairment
/// Constraints: Minimum length = 0, Maximum length = 24
func (rcv *SiteStatus_Full) CommImpairment() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(48))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The communications component causing the platform or system to be less than fully operational.
/// Example: /// Example: commImpairment
/// Constraints: Minimum length = 0, Maximum length = 24
/// Crisis Action Team (CAT).
/// COLD - Not in use.
/// WARM - Facility prepped/possible skeleton crew.
/// HOT - Fully active.
/// Example: /// Example: COLD
/// Constraints: Minimum length = 0, Maximum length = 4
func (rcv *SiteStatus_Full) Cat() SiteStatus_Full_cat_Enum {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(50))
	if o != 0 {
		return SiteStatus_Full_cat_Enum(rcv._tab.GetInt8(o + rcv._tab.Pos))
	}
	return 0
}

/// Crisis Action Team (CAT).
/// COLD - Not in use.
/// WARM - Facility prepped/possible skeleton crew.
/// HOT - Fully active.
/// Example: /// Example: COLD
/// Constraints: Minimum length = 0, Maximum length = 4
func (rcv *SiteStatus_Full) MutateCat(n SiteStatus_Full_cat_Enum) bool {
	return rcv._tab.MutateInt8Slot(50, int8(n))
}

/// Emergency Operations Center (EOC) status.
/// COLD - Not in use.
/// WARM - Facility prepped/possible skeleton crew.
/// HOT - Fully active.
/// Example: /// Example: WARM
/// Constraints: Minimum length = 0, Maximum length = 4
func (rcv *SiteStatus_Full) Eoc() SiteStatus_Full_eoc_Enum {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(52))
	if o != 0 {
		return SiteStatus_Full_eoc_Enum(rcv._tab.GetInt8(o + rcv._tab.Pos))
	}
	return 0
}

/// Emergency Operations Center (EOC) status.
/// COLD - Not in use.
/// WARM - Facility prepped/possible skeleton crew.
/// HOT - Fully active.
/// Example: /// Example: WARM
/// Constraints: Minimum length = 0, Maximum length = 4
func (rcv *SiteStatus_Full) MutateEoc(n SiteStatus_Full_eoc_Enum) bool {
	return rcv._tab.MutateInt8Slot(52, int8(n))
}

/// Array of Link item(s) for which status is available and reported (ATDL, IJMS,  LINK-1, LINK-11, LINK-11B, LINK-16).  This array must be the same length as the linkStatus array.
/// Example: /// Example: ['ATDL', 'IJMS', 'LINK-1']
/// Constraints: No constraints specified.
func (rcv *SiteStatus_Full) Link(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(54))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *SiteStatus_Full) LinkLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(54))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

/// Array of Link item(s) for which status is available and reported (ATDL, IJMS,  LINK-1, LINK-11, LINK-11B, LINK-16).  This array must be the same length as the linkStatus array.
/// Example: /// Example: ['ATDL', 'IJMS', 'LINK-1']
/// Constraints: No constraints specified.
/// Array of the status (AVAILABLE, DEGRADED, NOT AVAILABLE, etc.) for each links in the link array. This array must be the same length as the link array, and the status must correspond to the appropriate position index in the link array.
/// Example: /// Example: ['AVAILABLE', 'DEGRADED', 'NOT AVAILABLE']
/// Constraints: No constraints specified.
func (rcv *SiteStatus_Full) LinkStatus(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(56))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *SiteStatus_Full) LinkStatusLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(56))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

/// Array of the status (AVAILABLE, DEGRADED, NOT AVAILABLE, etc.) for each links in the link array. This array must be the same length as the link array, and the status must correspond to the appropriate position index in the link array.
/// Example: /// Example: ['AVAILABLE', 'DEGRADED', 'NOT AVAILABLE']
/// Constraints: No constraints specified.
/// Array of radar system(s) for which status is available and reported (ACQUISITION, IFFSIF, ILLUMINATING, MODE-4, PRIMARY SURVEILLANCE, SECONDARY SURVEILLANCE, TERTIARY SURVEILLANCE). This array must be the same length as the radarStatus array.
/// Example: /// Example: ['ILLUMINATING', 'MODE-4', 'MODE-3']
/// Constraints: No constraints specified.
func (rcv *SiteStatus_Full) RadarSystem(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(58))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *SiteStatus_Full) RadarSystemLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(58))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

/// Array of radar system(s) for which status is available and reported (ACQUISITION, IFFSIF, ILLUMINATING, MODE-4, PRIMARY SURVEILLANCE, SECONDARY SURVEILLANCE, TERTIARY SURVEILLANCE). This array must be the same length as the radarStatus array.
/// Example: /// Example: ['ILLUMINATING', 'MODE-4', 'MODE-3']
/// Constraints: No constraints specified.
/// Array of the status (NON-OPERATIONAL, OPERATIONAL, OFF) for each radar system in the radarSystem array. This array must be the same length as the radarSystem array, and the status must correspond to the appropriate position index in the radarSystem array.
/// Example: /// Example: ['OPERATIONAL', 'OFF', 'NON-OPERATIONAL']
/// Constraints: No constraints specified.
func (rcv *SiteStatus_Full) RadarStatus(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(60))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *SiteStatus_Full) RadarStatusLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(60))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

/// Array of the status (NON-OPERATIONAL, OPERATIONAL, OFF) for each radar system in the radarSystem array. This array must be the same length as the radarSystem array, and the status must correspond to the appropriate position index in the radarSystem array.
/// Example: /// Example: ['OPERATIONAL', 'OFF', 'NON-OPERATIONAL']
/// Constraints: No constraints specified.
/// Array of specific missile types for which an estimated inventory count is available (e.g. GMD TYPE A, HARPOON, TOMAHAWK, etc.).  This array must be the same length as the missileInventory array.
/// Example: /// Example: ['GMD', 'HARPOON', 'JAVELIN']
/// Constraints: No constraints specified.
func (rcv *SiteStatus_Full) Missile(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(62))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *SiteStatus_Full) MissileLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(62))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

/// Array of specific missile types for which an estimated inventory count is available (e.g. GMD TYPE A, HARPOON, TOMAHAWK, etc.).  This array must be the same length as the missileInventory array.
/// Example: /// Example: ['GMD', 'HARPOON', 'JAVELIN']
/// Constraints: No constraints specified.
/// Array of the quantity of each of the missile items.  This array must be the same length as the missile array, and the values must correspond to appropriate position index in the missile array.
/// Example: /// Example: [5, 10, 100]
/// Constraints: No constraints specified.
func (rcv *SiteStatus_Full) MissileInventory(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(64))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *SiteStatus_Full) MissileInventoryLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(64))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

/// Array of the quantity of each of the missile items.  This array must be the same length as the missile array, and the values must correspond to appropriate position index in the missile array.
/// Example: /// Example: [5, 10, 100]
/// Constraints: No constraints specified.
/// Time the row was created in the database, auto-populated by the system.
/// Example: /// Example: 2018-01-01T16:00:00.123Z
/// Constraints: No constraints specified.
func (rcv *SiteStatus_Full) CreatedAt() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(66))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Time the row was created in the database, auto-populated by the system.
/// Example: /// Example: 2018-01-01T16:00:00.123Z
/// Constraints: No constraints specified.
/// Application user who created the row in the database, auto-populated by the system.
/// Example: /// Example: some.user
/// Constraints: Minimum length = 1, Maximum length = 64
func (rcv *SiteStatus_Full) CreatedBy() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(68))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Application user who created the row in the database, auto-populated by the system.
/// Example: /// Example: some.user
/// Constraints: Minimum length = 1, Maximum length = 64
/// Time the row was updated in the database, auto-populated by the system.
/// Example: /// Example: 2018-01-01T16:00:00.123Z
/// Constraints: No constraints specified.
func (rcv *SiteStatus_Full) UpdatedAt() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(70))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Time the row was updated in the database, auto-populated by the system.
/// Example: /// Example: 2018-01-01T16:00:00.123Z
/// Constraints: No constraints specified.
/// Application user who updated the row in the database, auto-populated by the system.
/// Example: /// Example: some.user
/// Constraints: Minimum length = 0, Maximum length = 64
func (rcv *SiteStatus_Full) UpdatedBy() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(72))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Application user who updated the row in the database, auto-populated by the system.
/// Example: /// Example: some.user
/// Constraints: Minimum length = 0, Maximum length = 64
/// Source of the data.
/// Example: /// Example: Bluestaq
/// Constraints: Minimum length = 1, Maximum length = 64
func (rcv *SiteStatus_Full) Source() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(74))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Source of the data.
/// Example: /// Example: Bluestaq
/// Constraints: Minimum length = 1, Maximum length = 64
/// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
/// Example: /// Example: THIRD_PARTY_DATASOURCE
/// Constraints: Minimum length = 0, Maximum length = 64
func (rcv *SiteStatus_Full) Origin() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(76))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
/// Example: /// Example: THIRD_PARTY_DATASOURCE
/// Constraints: Minimum length = 0, Maximum length = 64
/// The originating source network on which this record was created, auto-populated by the system.
/// Example: /// Example: ORIG
/// Constraints: Minimum length = 1, Maximum length = 32
func (rcv *SiteStatus_Full) OrigNetwork() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(78))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The originating source network on which this record was created, auto-populated by the system.
/// Example: /// Example: ORIG
/// Constraints: Minimum length = 1, Maximum length = 32
/// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
/// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
/// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
/// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
/// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
/// Example: /// Example: TEST
/// Constraints: Minimum length = 1, Maximum length = 32
func (rcv *SiteStatus_Full) DataMode() SiteStatus_Full_dataMode_Enum {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(80))
	if o != 0 {
		return SiteStatus_Full_dataMode_Enum(rcv._tab.GetInt8(o + rcv._tab.Pos))
	}
	return 0
}

/// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
/// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
/// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
/// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
/// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
/// Example: /// Example: TEST
/// Constraints: Minimum length = 1, Maximum length = 32
func (rcv *SiteStatus_Full) MutateDataMode(n SiteStatus_Full_dataMode_Enum) bool {
	return rcv._tab.MutateInt8Slot(80, int8(n))
}

func SiteStatus_FullStart(builder *flatbuffers.Builder) {
	builder.StartObject(39)
}
func SiteStatus_FullAddId(builder *flatbuffers.Builder, id flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(id), 0)
}
func SiteStatus_FullAddClassificationMarking(builder *flatbuffers.Builder, classificationMarking flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(classificationMarking), 0)
}
func SiteStatus_FullAddIdSite(builder *flatbuffers.Builder, idSite flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(idSite), 0)
}
func SiteStatus_FullAddSiteType(builder *flatbuffers.Builder, siteType flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(3, flatbuffers.UOffsetT(siteType), 0)
}
func SiteStatus_FullAddMobileAltId(builder *flatbuffers.Builder, mobileAltId flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(4, flatbuffers.UOffsetT(mobileAltId), 0)
}
func SiteStatus_FullAddPoiid(builder *flatbuffers.Builder, poiid flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(5, flatbuffers.UOffsetT(poiid), 0)
}
func SiteStatus_FullAddTrackId(builder *flatbuffers.Builder, trackId flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(6, flatbuffers.UOffsetT(trackId), 0)
}
func SiteStatus_FullAddTrackRefL16(builder *flatbuffers.Builder, trackRefL16 flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(7, flatbuffers.UOffsetT(trackRefL16), 0)
}
func SiteStatus_FullAddOpsCapability(builder *flatbuffers.Builder, opsCapability flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(8, flatbuffers.UOffsetT(opsCapability), 0)
}
func SiteStatus_FullAddInstStatus(builder *flatbuffers.Builder, instStatus SiteStatus_Full_instStatus_Enum) {
	builder.PrependInt8Slot(9, int8(instStatus), 0)
}
func SiteStatus_FullAddFpcon(builder *flatbuffers.Builder, fpcon SiteStatus_Full_fpcon_Enum) {
	builder.PrependInt8Slot(10, int8(fpcon), 0)
}
func SiteStatus_FullAddHpcon(builder *flatbuffers.Builder, hpcon SiteStatus_Full_hpcon_Enum) {
	builder.PrependInt8Slot(11, int8(hpcon), 0)
}
func SiteStatus_FullAddCpcon(builder *flatbuffers.Builder, cpcon SiteStatus_Full_cpcon_Enum) {
	builder.PrependInt8Slot(12, int8(cpcon), 0)
}
func SiteStatus_FullAddReportTime(builder *flatbuffers.Builder, reportTime flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(13, flatbuffers.UOffsetT(reportTime), 0)
}
func SiteStatus_FullAddTimeFunction(builder *flatbuffers.Builder, timeFunction flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(14, flatbuffers.UOffsetT(timeFunction), 0)
}
func SiteStatus_FullAddWeatherMessage(builder *flatbuffers.Builder, weatherMessage flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(15, flatbuffers.UOffsetT(weatherMessage), 0)
}
func SiteStatus_FullAddPes(builder *flatbuffers.Builder, pes bool) {
	builder.PrependBoolSlot(16, pes, false)
}
func SiteStatus_FullAddHotInventory(builder *flatbuffers.Builder, hotInventory int32) {
	builder.PrependInt32Slot(17, hotInventory, 0)
}
func SiteStatus_FullAddColdInventory(builder *flatbuffers.Builder, coldInventory int32) {
	builder.PrependInt32Slot(18, coldInventory, 0)
}
func SiteStatus_FullAddSamMode(builder *flatbuffers.Builder, samMode flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(19, flatbuffers.UOffsetT(samMode), 0)
}
func SiteStatus_FullAddRadiateMode(builder *flatbuffers.Builder, radiateMode flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(20, flatbuffers.UOffsetT(radiateMode), 0)
}
func SiteStatus_FullAddOpsImpairment(builder *flatbuffers.Builder, opsImpairment flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(21, flatbuffers.UOffsetT(opsImpairment), 0)
}
func SiteStatus_FullAddCommImpairment(builder *flatbuffers.Builder, commImpairment flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(22, flatbuffers.UOffsetT(commImpairment), 0)
}
func SiteStatus_FullAddCat(builder *flatbuffers.Builder, cat SiteStatus_Full_cat_Enum) {
	builder.PrependInt8Slot(23, int8(cat), 0)
}
func SiteStatus_FullAddEoc(builder *flatbuffers.Builder, eoc SiteStatus_Full_eoc_Enum) {
	builder.PrependInt8Slot(24, int8(eoc), 0)
}
func SiteStatus_FullAddLink(builder *flatbuffers.Builder, link flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(25, flatbuffers.UOffsetT(link), 0)
}
func SiteStatus_FullStartLinkVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func SiteStatus_FullAddLinkStatus(builder *flatbuffers.Builder, linkStatus flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(26, flatbuffers.UOffsetT(linkStatus), 0)
}
func SiteStatus_FullStartLinkStatusVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func SiteStatus_FullAddRadarSystem(builder *flatbuffers.Builder, radarSystem flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(27, flatbuffers.UOffsetT(radarSystem), 0)
}
func SiteStatus_FullStartRadarSystemVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func SiteStatus_FullAddRadarStatus(builder *flatbuffers.Builder, radarStatus flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(28, flatbuffers.UOffsetT(radarStatus), 0)
}
func SiteStatus_FullStartRadarStatusVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func SiteStatus_FullAddMissile(builder *flatbuffers.Builder, missile flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(29, flatbuffers.UOffsetT(missile), 0)
}
func SiteStatus_FullStartMissileVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func SiteStatus_FullAddMissileInventory(builder *flatbuffers.Builder, missileInventory flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(30, flatbuffers.UOffsetT(missileInventory), 0)
}
func SiteStatus_FullStartMissileInventoryVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func SiteStatus_FullAddCreatedAt(builder *flatbuffers.Builder, createdAt flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(31, flatbuffers.UOffsetT(createdAt), 0)
}
func SiteStatus_FullAddCreatedBy(builder *flatbuffers.Builder, createdBy flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(32, flatbuffers.UOffsetT(createdBy), 0)
}
func SiteStatus_FullAddUpdatedAt(builder *flatbuffers.Builder, updatedAt flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(33, flatbuffers.UOffsetT(updatedAt), 0)
}
func SiteStatus_FullAddUpdatedBy(builder *flatbuffers.Builder, updatedBy flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(34, flatbuffers.UOffsetT(updatedBy), 0)
}
func SiteStatus_FullAddSource(builder *flatbuffers.Builder, source flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(35, flatbuffers.UOffsetT(source), 0)
}
func SiteStatus_FullAddOrigin(builder *flatbuffers.Builder, origin flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(36, flatbuffers.UOffsetT(origin), 0)
}
func SiteStatus_FullAddOrigNetwork(builder *flatbuffers.Builder, origNetwork flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(37, flatbuffers.UOffsetT(origNetwork), 0)
}
func SiteStatus_FullAddDataMode(builder *flatbuffers.Builder, dataMode SiteStatus_Full_dataMode_Enum) {
	builder.PrependInt8Slot(38, int8(dataMode), 0)
}
func SiteStatus_FullEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
