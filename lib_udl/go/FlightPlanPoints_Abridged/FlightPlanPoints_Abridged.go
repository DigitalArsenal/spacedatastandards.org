// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package FlightPlanPoints_Abridged

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

/// /// Array of point data for this Point Group.
type FlightPlanPoints_Abridged struct {
	_tab flatbuffers.Table
}

const FlightPlanPoints_AbridgedIdentifier = "FLIG"

func GetRootAsFlightPlanPoints_Abridged(buf []byte, offset flatbuffers.UOffsetT) *FlightPlanPoints_Abridged {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &FlightPlanPoints_Abridged{}
	x.Init(buf, n+offset)
	return x
}

func FinishFlightPlanPoints_AbridgedBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	identifierBytes := []byte(FlightPlanPoints_AbridgedIdentifier)
	builder.FinishWithFileIdentifier(offset, identifierBytes)
}

func FlightPlanPoints_AbridgedBufferHasIdentifier(buf []byte) bool {
	return flatbuffers.BufferHasIdentifier(buf, FlightPlanPoints_AbridgedIdentifier)
}

func GetSizePrefixedRootAsFlightPlanPoints_Abridged(buf []byte, offset flatbuffers.UOffsetT) *FlightPlanPoints_Abridged {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &FlightPlanPoints_Abridged{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedFlightPlanPoints_AbridgedBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	identifierBytes := []byte(FlightPlanPoints_AbridgedIdentifier)
	builder.FinishSizePrefixedWithFileIdentifier(offset, identifierBytes)
}

func SizePrefixedFlightPlanPoints_AbridgedBufferHasIdentifier(buf []byte) bool {
	return flatbuffers.SizePrefixedBufferHasIdentifier(buf, FlightPlanPoints_AbridgedIdentifier)
}

func (rcv *FlightPlanPoints_Abridged) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *FlightPlanPoints_Abridged) Table() flatbuffers.Table {
	return rcv._tab
}

/// Name of this point.
/// Example: /// Example: CRUISE ALTITUDE ETP
/// Constraints: Minimum length = 0, Maximum length = 36
func (rcv *FlightPlanPoints_Abridged) PointName() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Name of this point.
/// Example: /// Example: CRUISE ALTITUDE ETP
/// Constraints: Minimum length = 0, Maximum length = 36
/// WGS84 latitude of the point location, in degrees. -90 to 90 degrees (negative values south of equator).
/// Example: /// Example: 45.23
/// Constraints: No constraints specified.
func (rcv *FlightPlanPoints_Abridged) FppLat() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// WGS84 latitude of the point location, in degrees. -90 to 90 degrees (negative values south of equator).
/// Example: /// Example: 45.23
/// Constraints: No constraints specified.
func (rcv *FlightPlanPoints_Abridged) MutateFppLat(n float64) bool {
	return rcv._tab.MutateFloat64Slot(6, n)
}

/// WGS84 longitude of the point location, in degrees. -180 to 180 degrees (negative values west of Prime Meridian).
/// Example: /// Example: 179.1
/// Constraints: No constraints specified.
func (rcv *FlightPlanPoints_Abridged) FppLon() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// WGS84 longitude of the point location, in degrees. -180 to 180 degrees (negative values west of Prime Meridian).
/// Example: /// Example: 179.1
/// Constraints: No constraints specified.
func (rcv *FlightPlanPoints_Abridged) MutateFppLon(n float64) bool {
	return rcv._tab.MutateFloat64Slot(8, n)
}

/// Estimated Time of Arrival (ETA) at this point in ISO 8601 UTC format, with millisecond precision.
/// Example: /// Example: 2023-09-09T01:00:00.123Z
/// Constraints: No constraints specified.
func (rcv *FlightPlanPoints_Abridged) FppEta() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Estimated Time of Arrival (ETA) at this point in ISO 8601 UTC format, with millisecond precision.
/// Example: /// Example: 2023-09-09T01:00:00.123Z
/// Constraints: No constraints specified.
/// Fuel required at this point to execute an Equal Time Point (ETP) or Extended Operations (ETOPS) plan in pounds.
/// Example: /// Example: 4250.1
/// Constraints: No constraints specified.
func (rcv *FlightPlanPoints_Abridged) FppReqFuel() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Fuel required at this point to execute an Equal Time Point (ETP) or Extended Operations (ETOPS) plan in pounds.
/// Example: /// Example: 4250.1
/// Constraints: No constraints specified.
func (rcv *FlightPlanPoints_Abridged) MutateFppReqFuel(n float64) bool {
	return rcv._tab.MutateFloat64Slot(12, n)
}

func FlightPlanPoints_AbridgedStart(builder *flatbuffers.Builder) {
	builder.StartObject(5)
}
func FlightPlanPoints_AbridgedAddPointName(builder *flatbuffers.Builder, pointName flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(pointName), 0)
}
func FlightPlanPoints_AbridgedAddFppLat(builder *flatbuffers.Builder, fppLat float64) {
	builder.PrependFloat64Slot(1, fppLat, 0.0)
}
func FlightPlanPoints_AbridgedAddFppLon(builder *flatbuffers.Builder, fppLon float64) {
	builder.PrependFloat64Slot(2, fppLon, 0.0)
}
func FlightPlanPoints_AbridgedAddFppEta(builder *flatbuffers.Builder, fppEta flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(3, flatbuffers.UOffsetT(fppEta), 0)
}
func FlightPlanPoints_AbridgedAddFppReqFuel(builder *flatbuffers.Builder, fppReqFuel float64) {
	builder.PrependFloat64Slot(4, fppReqFuel, 0.0)
}
func FlightPlanPoints_AbridgedEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
