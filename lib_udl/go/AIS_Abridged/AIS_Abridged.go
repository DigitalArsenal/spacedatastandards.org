// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package AIS_Abridged

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

/// /// Self-reported information obtained from Automatic Identification System (AIS) equipment. This contains information such as unique identification, status, position, course, and speed. The AIS is an automatic tracking system that uses transceivers on ships and is used by vessel traffic services. Although technically and operationally distinct, the AIS system is analogous to ADS-B that performs a similar function for aircraft. AIS is intended to assist a vessel's watchstanding officers and allow maritime authorities to track and monitor vessel movements. AIS integrates a standardized VHF transceiver with a positioning system such as Global Positioning System receiver, with other electronic navigation sensors, such as gyrocompass or rate of turn indicator. Vessels fitted with AIS transceivers can be tracked by AIS base stations located along coast lines or, when out of range of terrestrial networks, through a growing number of satellites that are fitted with special AIS receivers which are capable of deconflicting a large number of signatures.
type AIS_Abridged struct {
	_tab flatbuffers.Table
}

const AIS_AbridgedIdentifier = "AISA"

func GetRootAsAIS_Abridged(buf []byte, offset flatbuffers.UOffsetT) *AIS_Abridged {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &AIS_Abridged{}
	x.Init(buf, n+offset)
	return x
}

func FinishAIS_AbridgedBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	identifierBytes := []byte(AIS_AbridgedIdentifier)
	builder.FinishWithFileIdentifier(offset, identifierBytes)
}

func AIS_AbridgedBufferHasIdentifier(buf []byte) bool {
	return flatbuffers.BufferHasIdentifier(buf, AIS_AbridgedIdentifier)
}

func GetSizePrefixedRootAsAIS_Abridged(buf []byte, offset flatbuffers.UOffsetT) *AIS_Abridged {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &AIS_Abridged{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedAIS_AbridgedBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	identifierBytes := []byte(AIS_AbridgedIdentifier)
	builder.FinishSizePrefixedWithFileIdentifier(offset, identifierBytes)
}

func SizePrefixedAIS_AbridgedBufferHasIdentifier(buf []byte) bool {
	return flatbuffers.SizePrefixedBufferHasIdentifier(buf, AIS_AbridgedIdentifier)
}

func (rcv *AIS_Abridged) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *AIS_Abridged) Table() flatbuffers.Table {
	return rcv._tab
}

/// Unique identifier of the record, auto-generated by the system.
/// Example: /// Example: AIS-ID
/// Constraints: Minimum length = 1, Maximum length = 36
func (rcv *AIS_Abridged) Id() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Unique identifier of the record, auto-generated by the system.
/// Example: /// Example: AIS-ID
/// Constraints: Minimum length = 1, Maximum length = 36
/// Classification marking of the data in IC/CAPCO Portion-marked format.
/// Example: /// Example: U
/// Constraints: Minimum length = 1, Maximum length = 128
func (rcv *AIS_Abridged) ClassificationMarking() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Classification marking of the data in IC/CAPCO Portion-marked format.
/// Example: /// Example: U
/// Constraints: Minimum length = 1, Maximum length = 128
/// Unique identifier of the Track.
/// Example: /// Example: TRACK-ID
/// Constraints: Minimum length = 0, Maximum length = 36
func (rcv *AIS_Abridged) IdTrack() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Unique identifier of the Track.
/// Example: /// Example: TRACK-ID
/// Constraints: Minimum length = 0, Maximum length = 36
/// Unique identifier of the vessel.
/// Example: /// Example: VESSEL-ID
/// Constraints: Minimum length = 0, Maximum length = 36
func (rcv *AIS_Abridged) IdVessel() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Unique identifier of the vessel.
/// Example: /// Example: VESSEL-ID
/// Constraints: Minimum length = 0, Maximum length = 36
/// The Maritime Mobile Service Identity of the vessel.  MMSI is a nine-digit number that identifies the transmitter station of the vessel.
/// Example: /// Example: 304010417
/// Constraints: No constraints specified.
func (rcv *AIS_Abridged) Mmsi() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

/// The Maritime Mobile Service Identity of the vessel.  MMSI is a nine-digit number that identifies the transmitter station of the vessel.
/// Example: /// Example: 304010417
/// Constraints: No constraints specified.
func (rcv *AIS_Abridged) MutateMmsi(n int64) bool {
	return rcv._tab.MutateInt64Slot(12, n)
}

/// The International Maritime Organization Number of the vessel.  IMON is a seven-digit number that uniquely identifies the vessel.
/// Example: /// Example: 9015462
/// Constraints: No constraints specified.
func (rcv *AIS_Abridged) Imon() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

/// The International Maritime Organization Number of the vessel.  IMON is a seven-digit number that uniquely identifies the vessel.
/// Example: /// Example: 9015462
/// Constraints: No constraints specified.
func (rcv *AIS_Abridged) MutateImon(n int64) bool {
	return rcv._tab.MutateInt64Slot(14, n)
}

/// The timestamp that the vessel position was recorded, in ISO 8601 UTC format.
/// Example: /// Example: 2021-02-25T12:00:00.123456Z
/// Constraints: No constraints specified.
func (rcv *AIS_Abridged) Ts() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The timestamp that the vessel position was recorded, in ISO 8601 UTC format.
/// Example: /// Example: 2021-02-25T12:00:00.123456Z
/// Constraints: No constraints specified.
/// The name of the vessel.  Vessel names that exceed the AIS 20 character are shortened (not truncated) to 15 character-spaces, followed by an underscore and the last 4 characters-spaces of the vessel full name.
/// Example: /// Example: DORNUM
/// Constraints: Minimum length = 0, Maximum length = 24
func (rcv *AIS_Abridged) ShipName() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(18))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The name of the vessel.  Vessel names that exceed the AIS 20 character are shortened (not truncated) to 15 character-spaces, followed by an underscore and the last 4 characters-spaces of the vessel full name.
/// Example: /// Example: DORNUM
/// Constraints: Minimum length = 0, Maximum length = 24
/// The reported ship type (e.g. Passenger, Tanker, Cargo, Other, etc.).  See the engagedIn and specialCraft entries for additional information on certain types of vessels.
/// Example: /// Example: Passenger
/// Constraints: Minimum length = 0, Maximum length = 48
func (rcv *AIS_Abridged) ShipType() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(20))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The reported ship type (e.g. Passenger, Tanker, Cargo, Other, etc.).  See the engagedIn and specialCraft entries for additional information on certain types of vessels.
/// Example: /// Example: Passenger
/// Constraints: Minimum length = 0, Maximum length = 48
/// The activity that the vessel is engaged in.  This entry applies only when the shipType = Other.
/// Example: /// Example: Cargo
/// Constraints: Minimum length = 0, Maximum length = 48
func (rcv *AIS_Abridged) EngagedIn() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(22))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The activity that the vessel is engaged in.  This entry applies only when the shipType = Other.
/// Example: /// Example: Cargo
/// Constraints: Minimum length = 0, Maximum length = 48
/// The type of special craft designation of the vessel.  This entry applies only when the shipType = Special Craft.
/// Example: /// Example: Tug
/// Constraints: Minimum length = 0, Maximum length = 48
func (rcv *AIS_Abridged) SpecialCraft() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(24))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The type of special craft designation of the vessel.  This entry applies only when the shipType = Special Craft.
/// Example: /// Example: Tug
/// Constraints: Minimum length = 0, Maximum length = 48
/// The reported cargo type. Intended as, but not constrained to, the USCG NAVCEN AIS cargo definitions. Users should refer to USCG Navigation Center documentation for specific definitions associated with ship and cargo types. USCG NAVCEN documentation may be found at https://www.navcen.uscg.gov.
/// Example: /// Example: Freight
/// Constraints: Minimum length = 0, Maximum length = 48
func (rcv *AIS_Abridged) CargoType() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(26))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The reported cargo type. Intended as, but not constrained to, the USCG NAVCEN AIS cargo definitions. Users should refer to USCG Navigation Center documentation for specific definitions associated with ship and cargo types. USCG NAVCEN documentation may be found at https://www.navcen.uscg.gov.
/// Example: /// Example: Freight
/// Constraints: Minimum length = 0, Maximum length = 48
/// A uniquely designated identifier for the vessel's transmitter station.
/// Example: /// Example: V2OZ
/// Constraints: Minimum length = 0, Maximum length = 24
func (rcv *AIS_Abridged) CallSign() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(28))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// A uniquely designated identifier for the vessel's transmitter station.
/// Example: /// Example: V2OZ
/// Constraints: Minimum length = 0, Maximum length = 24
/// The flag of the subject vessel according to AIS transmission.
/// Example: /// Example: United States
/// Constraints: Minimum length = 0, Maximum length = 36
func (rcv *AIS_Abridged) VesselFlag() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(30))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The flag of the subject vessel according to AIS transmission.
/// Example: /// Example: United States
/// Constraints: Minimum length = 0, Maximum length = 36
/// WGS-84 latitude of the vessel position, in degrees.  -90 to 90 degrees (negative values south of equator).
/// Example: /// Example: 47.758499
/// Constraints: No constraints specified.
func (rcv *AIS_Abridged) Lat() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(32))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// WGS-84 latitude of the vessel position, in degrees.  -90 to 90 degrees (negative values south of equator).
/// Example: /// Example: 47.758499
/// Constraints: No constraints specified.
func (rcv *AIS_Abridged) MutateLat(n float64) bool {
	return rcv._tab.MutateFloat64Slot(32, n)
}

/// WGS-84 longitude of the vessel position, in degrees.  -180 to 180 degrees (negative values west of Prime Meridian).
/// Example: /// Example: -5.154223
/// Constraints: No constraints specified.
func (rcv *AIS_Abridged) Lon() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(34))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// WGS-84 longitude of the vessel position, in degrees.  -180 to 180 degrees (negative values west of Prime Meridian).
/// Example: /// Example: -5.154223
/// Constraints: No constraints specified.
func (rcv *AIS_Abridged) MutateLon(n float64) bool {
	return rcv._tab.MutateFloat64Slot(34, n)
}

/// Flag indicating high reported position accuracy (less than or equal to 10 meters).  A value of 0/false indicates low accuracy (greater than 10 meters).
/// Example: /// Example: True
/// Constraints: No constraints specified.
func (rcv *AIS_Abridged) PosHiAccuracy() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(36))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

/// Flag indicating high reported position accuracy (less than or equal to 10 meters).  A value of 0/false indicates low accuracy (greater than 10 meters).
/// Example: /// Example: True
/// Constraints: No constraints specified.
func (rcv *AIS_Abridged) MutatePosHiAccuracy(n bool) bool {
	return rcv._tab.MutateBoolSlot(36, n)
}

/// Flag indicating high reported position latency (greater than 5 seconds).  A value of 0/false indicates low latency (less than 5 seconds).
/// Example: /// Example: True
/// Constraints: No constraints specified.
func (rcv *AIS_Abridged) PosHiLatency() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(38))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

/// Flag indicating high reported position latency (greater than 5 seconds).  A value of 0/false indicates low latency (less than 5 seconds).
/// Example: /// Example: True
/// Constraints: No constraints specified.
func (rcv *AIS_Abridged) MutatePosHiLatency(n bool) bool {
	return rcv._tab.MutateBoolSlot(38, n)
}

/// The speed-over-ground reported by the vessel, in kilometers/hour.
/// Example: /// Example: 10.5
/// Constraints: No constraints specified.
func (rcv *AIS_Abridged) Speed() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(40))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// The speed-over-ground reported by the vessel, in kilometers/hour.
/// Example: /// Example: 10.5
/// Constraints: No constraints specified.
func (rcv *AIS_Abridged) MutateSpeed(n float64) bool {
	return rcv._tab.MutateFloat64Slot(40, n)
}

/// The true heading reported by the vessel, in degrees.
/// Example: /// Example: 329.1
/// Constraints: No constraints specified.
func (rcv *AIS_Abridged) TrueHeading() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(42))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// The true heading reported by the vessel, in degrees.
/// Example: /// Example: 329.1
/// Constraints: No constraints specified.
func (rcv *AIS_Abridged) MutateTrueHeading(n float64) bool {
	return rcv._tab.MutateFloat64Slot(42, n)
}

/// The course-over-ground reported by the vessel, in degrees.
/// Example: /// Example: 157.1
/// Constraints: No constraints specified.
func (rcv *AIS_Abridged) Course() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(44))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// The course-over-ground reported by the vessel, in degrees.
/// Example: /// Example: 157.1
/// Constraints: No constraints specified.
func (rcv *AIS_Abridged) MutateCourse(n float64) bool {
	return rcv._tab.MutateFloat64Slot(44, n)
}

/// The Rate-of-Turn for the vessel, in degrees/minute.  Positive value indicates that the vessel is turning right.
/// Example: /// Example: 22.1
/// Constraints: No constraints specified.
func (rcv *AIS_Abridged) RateOfTurn() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(46))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// The Rate-of-Turn for the vessel, in degrees/minute.  Positive value indicates that the vessel is turning right.
/// Example: /// Example: 22.1
/// Constraints: No constraints specified.
func (rcv *AIS_Abridged) MutateRateOfTurn(n float64) bool {
	return rcv._tab.MutateFloat64Slot(46, n)
}

/// Flag indicating that the vessel is engaged in a special maneuver (e.g. Waterway Navigation).
/// Example: /// Example: False
/// Constraints: No constraints specified.
func (rcv *AIS_Abridged) SpecialManeuver() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(48))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

/// Flag indicating that the vessel is engaged in a special maneuver (e.g. Waterway Navigation).
/// Example: /// Example: False
/// Constraints: No constraints specified.
func (rcv *AIS_Abridged) MutateSpecialManeuver(n bool) bool {
	return rcv._tab.MutateBoolSlot(48, n)
}

/// The AIS Navigational Status of the vessel (e.g. Underway Using Engine, Moored, Aground, etc.). Intended as, but not constrained to, the USCG NAVCEN navigation status definitions. Users should refer to USCG Navigation Center documentation for specific definitions associated with navigation status. USCG NAVCEN documentation may be found at https://www.navcen.uscg.gov.
/// Example: /// Example: Underway Using Engine
/// Constraints: Minimum length = 0, Maximum length = 64
func (rcv *AIS_Abridged) NavStatus() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(50))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The AIS Navigational Status of the vessel (e.g. Underway Using Engine, Moored, Aground, etc.). Intended as, but not constrained to, the USCG NAVCEN navigation status definitions. Users should refer to USCG Navigation Center documentation for specific definitions associated with navigation status. USCG NAVCEN documentation may be found at https://www.navcen.uscg.gov.
/// Example: /// Example: Underway Using Engine
/// Constraints: Minimum length = 0, Maximum length = 64
/// The type of electronic position fixing device (e.g. GPS, GLONASS, etc.). Intended as, but not constrained to, the USCG NAVCEN electronic position fixing device definitions. Users should refer to USCG Navigation Center documentation for specific device type information. USCG NAVCEN documentation may be found at https://www.navcen.uscg.gov.
/// Example: /// Example: GPS
/// Constraints: Minimum length = 0, Maximum length = 24
func (rcv *AIS_Abridged) PosDeviceType() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(52))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The type of electronic position fixing device (e.g. GPS, GLONASS, etc.). Intended as, but not constrained to, the USCG NAVCEN electronic position fixing device definitions. Users should refer to USCG Navigation Center documentation for specific device type information. USCG NAVCEN documentation may be found at https://www.navcen.uscg.gov.
/// Example: /// Example: GPS
/// Constraints: Minimum length = 0, Maximum length = 24
/// The reference dimensions of the vessel, reported as [A, B, C, D], in meters.  Where the array values represent the distance fore (A), aft (B), to port (C), and to starboard (D) of the navigation antenna.  Array with values A = C = 0 and B, D > 0 indicate the length (B) and width (D) of the vessel without antenna position reference.
/// Example: /// Example: [50.1, 50.1, 20.1, 20.1]
/// Constraints: No constraints specified.
func (rcv *AIS_Abridged) AntennaRefDimensions(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(54))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *AIS_Abridged) AntennaRefDimensionsLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(54))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

/// The reference dimensions of the vessel, reported as [A, B, C, D], in meters.  Where the array values represent the distance fore (A), aft (B), to port (C), and to starboard (D) of the navigation antenna.  Array with values A = C = 0 and B, D > 0 indicate the length (B) and width (D) of the vessel without antenna position reference.
/// Example: /// Example: [50.1, 50.1, 20.1, 20.1]
/// Constraints: No constraints specified.
/// The overall length of the vessel, in meters.  A value of 511 indicates a vessel length of 511 meters or greater.
/// Example: /// Example: 511.1
/// Constraints: No constraints specified.
func (rcv *AIS_Abridged) Length() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(56))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// The overall length of the vessel, in meters.  A value of 511 indicates a vessel length of 511 meters or greater.
/// Example: /// Example: 511.1
/// Constraints: No constraints specified.
func (rcv *AIS_Abridged) MutateLength(n float64) bool {
	return rcv._tab.MutateFloat64Slot(56, n)
}

/// The breadth of the vessel, in meters.  A value of 63 indicates a vessel breadth of 63 meters or greater.
/// Example: /// Example: 24.1
/// Constraints: No constraints specified.
func (rcv *AIS_Abridged) Width() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(58))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// The breadth of the vessel, in meters.  A value of 63 indicates a vessel breadth of 63 meters or greater.
/// Example: /// Example: 24.1
/// Constraints: No constraints specified.
func (rcv *AIS_Abridged) MutateWidth(n float64) bool {
	return rcv._tab.MutateFloat64Slot(58, n)
}

/// The maximum static draught, in meters, of the vessel according to the AIS transmission.
/// Example: /// Example: 21.1
/// Constraints: No constraints specified.
func (rcv *AIS_Abridged) Draught() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(60))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// The maximum static draught, in meters, of the vessel according to the AIS transmission.
/// Example: /// Example: 21.1
/// Constraints: No constraints specified.
func (rcv *AIS_Abridged) MutateDraught(n float64) bool {
	return rcv._tab.MutateFloat64Slot(60, n)
}

/// Further description or explanation of the vessel or type.
/// Example: /// Example: Search and rescue vessels
/// Constraints: Minimum length = 0, Maximum length = 100
func (rcv *AIS_Abridged) ShipDescription() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(62))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Further description or explanation of the vessel or type.
/// Example: /// Example: Search and rescue vessels
/// Constraints: Minimum length = 0, Maximum length = 100
/// The destination of the vessel according to the AIS transmission.
/// Example: /// Example: USCLE
/// Constraints: Minimum length = 0, Maximum length = 20
func (rcv *AIS_Abridged) Destination() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(64))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The destination of the vessel according to the AIS transmission.
/// Example: /// Example: USCLE
/// Constraints: Minimum length = 0, Maximum length = 20
/// The Estimated Time of Arrival of the vessel at the destination, in ISO 8601 UTC format.
/// Example: /// Example: 2021-02-25T12:00:00.123456Z
/// Constraints: No constraints specified.
func (rcv *AIS_Abridged) DestinationEta() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(66))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The Estimated Time of Arrival of the vessel at the destination, in ISO 8601 UTC format.
/// Example: /// Example: 2021-02-25T12:00:00.123456Z
/// Constraints: No constraints specified.
/// The US Geographic Unique Identifier of the current port hosting the vessel.
/// Example: /// Example: 0ABC
/// Constraints: Minimum length = 0, Maximum length = 4
func (rcv *AIS_Abridged) CurrentPortGuid() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(68))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The US Geographic Unique Identifier of the current port hosting the vessel.
/// Example: /// Example: 0ABC
/// Constraints: Minimum length = 0, Maximum length = 4
/// The UN Location Code of the current port hosting the vessel.
/// Example: /// Example: XF013
/// Constraints: Minimum length = 0, Maximum length = 5
func (rcv *AIS_Abridged) CurrentPortLocode() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(70))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The UN Location Code of the current port hosting the vessel.
/// Example: /// Example: XF013
/// Constraints: Minimum length = 0, Maximum length = 5
/// The US Geographic Unique Identifier of the last port visited by the vessel.
/// Example: /// Example: 0VAX
/// Constraints: Minimum length = 0, Maximum length = 4
func (rcv *AIS_Abridged) LastPortGuid() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(72))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The US Geographic Unique Identifier of the last port visited by the vessel.
/// Example: /// Example: 0VAX
/// Constraints: Minimum length = 0, Maximum length = 4
/// The UN Location Code of the last port visited by the vessel.
/// Example: /// Example: USSKY
/// Constraints: Minimum length = 0, Maximum length = 5
func (rcv *AIS_Abridged) LastPortLocode() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(74))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The UN Location Code of the last port visited by the vessel.
/// Example: /// Example: USSKY
/// Constraints: Minimum length = 0, Maximum length = 5
/// The US Geographic Unique Identifier of the next destination port of the vessel.
/// Example: /// Example: 0Z8Q
/// Constraints: Minimum length = 0, Maximum length = 4
func (rcv *AIS_Abridged) NextPortGuid() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(76))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The US Geographic Unique Identifier of the next destination port of the vessel.
/// Example: /// Example: 0Z8Q
/// Constraints: Minimum length = 0, Maximum length = 4
/// The UN  Location Code of the next destination port of the vessel.
/// Example: /// Example: USCLE
/// Constraints: Minimum length = 0, Maximum length = 5
func (rcv *AIS_Abridged) NextPortLocode() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(78))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The UN  Location Code of the next destination port of the vessel.
/// Example: /// Example: USCLE
/// Constraints: Minimum length = 0, Maximum length = 5
/// The Estimated Time of Arrival of the vessel at the destination port, according to MarineTraffic calculations, in ISO 8601 UTC format.
/// Example: /// Example: 2021-02-25T12:00:00.123456Z
/// Constraints: No constraints specified.
func (rcv *AIS_Abridged) EtaCalculated() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(80))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The Estimated Time of Arrival of the vessel at the destination port, according to MarineTraffic calculations, in ISO 8601 UTC format.
/// Example: /// Example: 2021-02-25T12:00:00.123456Z
/// Constraints: No constraints specified.
/// The date and time that the ETA was calculated by MarineTraffic, in ISO 8601 UTC format.
/// Example: /// Example: 2021-02-25T12:00:00.123456Z
/// Constraints: No constraints specified.
func (rcv *AIS_Abridged) EtaUpdated() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(82))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The date and time that the ETA was calculated by MarineTraffic, in ISO 8601 UTC format.
/// Example: /// Example: 2021-02-25T12:00:00.123456Z
/// Constraints: No constraints specified.
/// The remaining distance, in kilometers, for the vessel to reach the reported destination.
/// Example: /// Example: 150.5
/// Constraints: No constraints specified.
func (rcv *AIS_Abridged) DistanceToGo() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(84))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// The remaining distance, in kilometers, for the vessel to reach the reported destination.
/// Example: /// Example: 150.5
/// Constraints: No constraints specified.
func (rcv *AIS_Abridged) MutateDistanceToGo(n float64) bool {
	return rcv._tab.MutateFloat64Slot(84, n)
}

/// The distance, in kilometers, that the vessel has travelled since departing the last port.
/// Example: /// Example: 200.3
/// Constraints: No constraints specified.
func (rcv *AIS_Abridged) DistanceTravelled() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(86))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// The distance, in kilometers, that the vessel has travelled since departing the last port.
/// Example: /// Example: 200.3
/// Constraints: No constraints specified.
func (rcv *AIS_Abridged) MutateDistanceTravelled(n float64) bool {
	return rcv._tab.MutateFloat64Slot(86, n)
}

/// The average speed, in kilometers/hour, calculated for the subject vessel during the latest voyage (port to port).
/// Example: /// Example: 12.1
/// Constraints: No constraints specified.
func (rcv *AIS_Abridged) AvgSpeed() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(88))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// The average speed, in kilometers/hour, calculated for the subject vessel during the latest voyage (port to port).
/// Example: /// Example: 12.1
/// Constraints: No constraints specified.
func (rcv *AIS_Abridged) MutateAvgSpeed(n float64) bool {
	return rcv._tab.MutateFloat64Slot(88, n)
}

/// The maximum speed, in kilometers/hour, reported by the subject vessel during the latest voyage (port to port).
/// Example: /// Example: 13.3
/// Constraints: No constraints specified.
func (rcv *AIS_Abridged) MaxSpeed() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(90))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// The maximum speed, in kilometers/hour, reported by the subject vessel during the latest voyage (port to port).
/// Example: /// Example: 13.3
/// Constraints: No constraints specified.
func (rcv *AIS_Abridged) MutateMaxSpeed(n float64) bool {
	return rcv._tab.MutateFloat64Slot(90, n)
}

/// Time the row was created in the database, auto-populated by the system.
/// Example: /// Example: 2018-01-01T16:00:00.123Z
/// Constraints: No constraints specified.
func (rcv *AIS_Abridged) CreatedAt() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(92))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Time the row was created in the database, auto-populated by the system.
/// Example: /// Example: 2018-01-01T16:00:00.123Z
/// Constraints: No constraints specified.
/// Application user who created the row in the database, auto-populated by the system.
/// Example: /// Example: some.user
/// Constraints: Minimum length = 1, Maximum length = 64
func (rcv *AIS_Abridged) CreatedBy() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(94))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Application user who created the row in the database, auto-populated by the system.
/// Example: /// Example: some.user
/// Constraints: Minimum length = 1, Maximum length = 64
/// Source of the data.
/// Example: /// Example: Bluestaq
/// Constraints: Minimum length = 1, Maximum length = 36
func (rcv *AIS_Abridged) Source() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(96))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Source of the data.
/// Example: /// Example: Bluestaq
/// Constraints: Minimum length = 1, Maximum length = 36
/// The source data library from which this record was received. This could be a remote or tactical UDL or another data library. If null, the record should be assumed to have originated from the primary Enterprise UDL.
/// Example: /// Example: AXE
/// Constraints: Minimum length = 0, Maximum length = 64
func (rcv *AIS_Abridged) SourceDl() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(98))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The source data library from which this record was received. This could be a remote or tactical UDL or another data library. If null, the record should be assumed to have originated from the primary Enterprise UDL.
/// Example: /// Example: AXE
/// Constraints: Minimum length = 0, Maximum length = 64
/// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
/// Example: /// Example: THIRD_PARTY_DATASOURCE
/// Constraints: Minimum length = 0, Maximum length = 64
func (rcv *AIS_Abridged) Origin() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(100))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
/// Example: /// Example: THIRD_PARTY_DATASOURCE
/// Constraints: Minimum length = 0, Maximum length = 64
/// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
/// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
/// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
/// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
/// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
/// Example: /// Example: TEST
/// Constraints: Minimum length = 1, Maximum length = 32
func (rcv *AIS_Abridged) DataMode() AIS_Abridged_dataMode_Enum {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(102))
	if o != 0 {
		return AIS_Abridged_dataMode_Enum(rcv._tab.GetInt8(o + rcv._tab.Pos))
	}
	return 0
}

/// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
/// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
/// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
/// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
/// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
/// Example: /// Example: TEST
/// Constraints: Minimum length = 1, Maximum length = 32
func (rcv *AIS_Abridged) MutateDataMode(n AIS_Abridged_dataMode_Enum) bool {
	return rcv._tab.MutateInt8Slot(102, int8(n))
}

/// The originating source network on which this record was created, auto-populated by the system.
/// Example: /// Example: ORIG
/// Constraints: Minimum length = 1, Maximum length = 32
func (rcv *AIS_Abridged) OrigNetwork() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(104))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The originating source network on which this record was created, auto-populated by the system.
/// Example: /// Example: ORIG
/// Constraints: Minimum length = 1, Maximum length = 32
func AIS_AbridgedStart(builder *flatbuffers.Builder) {
	builder.StartObject(51)
}
func AIS_AbridgedAddId(builder *flatbuffers.Builder, id flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(id), 0)
}
func AIS_AbridgedAddClassificationMarking(builder *flatbuffers.Builder, classificationMarking flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(classificationMarking), 0)
}
func AIS_AbridgedAddIdTrack(builder *flatbuffers.Builder, idTrack flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(idTrack), 0)
}
func AIS_AbridgedAddIdVessel(builder *flatbuffers.Builder, idVessel flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(3, flatbuffers.UOffsetT(idVessel), 0)
}
func AIS_AbridgedAddMmsi(builder *flatbuffers.Builder, mmsi int64) {
	builder.PrependInt64Slot(4, mmsi, 0)
}
func AIS_AbridgedAddImon(builder *flatbuffers.Builder, imon int64) {
	builder.PrependInt64Slot(5, imon, 0)
}
func AIS_AbridgedAddTs(builder *flatbuffers.Builder, ts flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(6, flatbuffers.UOffsetT(ts), 0)
}
func AIS_AbridgedAddShipName(builder *flatbuffers.Builder, shipName flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(7, flatbuffers.UOffsetT(shipName), 0)
}
func AIS_AbridgedAddShipType(builder *flatbuffers.Builder, shipType flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(8, flatbuffers.UOffsetT(shipType), 0)
}
func AIS_AbridgedAddEngagedIn(builder *flatbuffers.Builder, engagedIn flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(9, flatbuffers.UOffsetT(engagedIn), 0)
}
func AIS_AbridgedAddSpecialCraft(builder *flatbuffers.Builder, specialCraft flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(10, flatbuffers.UOffsetT(specialCraft), 0)
}
func AIS_AbridgedAddCargoType(builder *flatbuffers.Builder, cargoType flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(11, flatbuffers.UOffsetT(cargoType), 0)
}
func AIS_AbridgedAddCallSign(builder *flatbuffers.Builder, callSign flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(12, flatbuffers.UOffsetT(callSign), 0)
}
func AIS_AbridgedAddVesselFlag(builder *flatbuffers.Builder, vesselFlag flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(13, flatbuffers.UOffsetT(vesselFlag), 0)
}
func AIS_AbridgedAddLat(builder *flatbuffers.Builder, lat float64) {
	builder.PrependFloat64Slot(14, lat, 0.0)
}
func AIS_AbridgedAddLon(builder *flatbuffers.Builder, lon float64) {
	builder.PrependFloat64Slot(15, lon, 0.0)
}
func AIS_AbridgedAddPosHiAccuracy(builder *flatbuffers.Builder, posHiAccuracy bool) {
	builder.PrependBoolSlot(16, posHiAccuracy, false)
}
func AIS_AbridgedAddPosHiLatency(builder *flatbuffers.Builder, posHiLatency bool) {
	builder.PrependBoolSlot(17, posHiLatency, false)
}
func AIS_AbridgedAddSpeed(builder *flatbuffers.Builder, speed float64) {
	builder.PrependFloat64Slot(18, speed, 0.0)
}
func AIS_AbridgedAddTrueHeading(builder *flatbuffers.Builder, trueHeading float64) {
	builder.PrependFloat64Slot(19, trueHeading, 0.0)
}
func AIS_AbridgedAddCourse(builder *flatbuffers.Builder, course float64) {
	builder.PrependFloat64Slot(20, course, 0.0)
}
func AIS_AbridgedAddRateOfTurn(builder *flatbuffers.Builder, rateOfTurn float64) {
	builder.PrependFloat64Slot(21, rateOfTurn, 0.0)
}
func AIS_AbridgedAddSpecialManeuver(builder *flatbuffers.Builder, specialManeuver bool) {
	builder.PrependBoolSlot(22, specialManeuver, false)
}
func AIS_AbridgedAddNavStatus(builder *flatbuffers.Builder, navStatus flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(23, flatbuffers.UOffsetT(navStatus), 0)
}
func AIS_AbridgedAddPosDeviceType(builder *flatbuffers.Builder, posDeviceType flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(24, flatbuffers.UOffsetT(posDeviceType), 0)
}
func AIS_AbridgedAddAntennaRefDimensions(builder *flatbuffers.Builder, antennaRefDimensions flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(25, flatbuffers.UOffsetT(antennaRefDimensions), 0)
}
func AIS_AbridgedStartAntennaRefDimensionsVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func AIS_AbridgedAddLength(builder *flatbuffers.Builder, length float64) {
	builder.PrependFloat64Slot(26, length, 0.0)
}
func AIS_AbridgedAddWidth(builder *flatbuffers.Builder, width float64) {
	builder.PrependFloat64Slot(27, width, 0.0)
}
func AIS_AbridgedAddDraught(builder *flatbuffers.Builder, draught float64) {
	builder.PrependFloat64Slot(28, draught, 0.0)
}
func AIS_AbridgedAddShipDescription(builder *flatbuffers.Builder, shipDescription flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(29, flatbuffers.UOffsetT(shipDescription), 0)
}
func AIS_AbridgedAddDestination(builder *flatbuffers.Builder, destination flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(30, flatbuffers.UOffsetT(destination), 0)
}
func AIS_AbridgedAddDestinationEta(builder *flatbuffers.Builder, destinationEta flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(31, flatbuffers.UOffsetT(destinationEta), 0)
}
func AIS_AbridgedAddCurrentPortGuid(builder *flatbuffers.Builder, currentPortGuid flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(32, flatbuffers.UOffsetT(currentPortGuid), 0)
}
func AIS_AbridgedAddCurrentPortLocode(builder *flatbuffers.Builder, currentPortLocode flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(33, flatbuffers.UOffsetT(currentPortLocode), 0)
}
func AIS_AbridgedAddLastPortGuid(builder *flatbuffers.Builder, lastPortGuid flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(34, flatbuffers.UOffsetT(lastPortGuid), 0)
}
func AIS_AbridgedAddLastPortLocode(builder *flatbuffers.Builder, lastPortLocode flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(35, flatbuffers.UOffsetT(lastPortLocode), 0)
}
func AIS_AbridgedAddNextPortGuid(builder *flatbuffers.Builder, nextPortGuid flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(36, flatbuffers.UOffsetT(nextPortGuid), 0)
}
func AIS_AbridgedAddNextPortLocode(builder *flatbuffers.Builder, nextPortLocode flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(37, flatbuffers.UOffsetT(nextPortLocode), 0)
}
func AIS_AbridgedAddEtaCalculated(builder *flatbuffers.Builder, etaCalculated flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(38, flatbuffers.UOffsetT(etaCalculated), 0)
}
func AIS_AbridgedAddEtaUpdated(builder *flatbuffers.Builder, etaUpdated flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(39, flatbuffers.UOffsetT(etaUpdated), 0)
}
func AIS_AbridgedAddDistanceToGo(builder *flatbuffers.Builder, distanceToGo float64) {
	builder.PrependFloat64Slot(40, distanceToGo, 0.0)
}
func AIS_AbridgedAddDistanceTravelled(builder *flatbuffers.Builder, distanceTravelled float64) {
	builder.PrependFloat64Slot(41, distanceTravelled, 0.0)
}
func AIS_AbridgedAddAvgSpeed(builder *flatbuffers.Builder, avgSpeed float64) {
	builder.PrependFloat64Slot(42, avgSpeed, 0.0)
}
func AIS_AbridgedAddMaxSpeed(builder *flatbuffers.Builder, maxSpeed float64) {
	builder.PrependFloat64Slot(43, maxSpeed, 0.0)
}
func AIS_AbridgedAddCreatedAt(builder *flatbuffers.Builder, createdAt flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(44, flatbuffers.UOffsetT(createdAt), 0)
}
func AIS_AbridgedAddCreatedBy(builder *flatbuffers.Builder, createdBy flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(45, flatbuffers.UOffsetT(createdBy), 0)
}
func AIS_AbridgedAddSource(builder *flatbuffers.Builder, source flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(46, flatbuffers.UOffsetT(source), 0)
}
func AIS_AbridgedAddSourceDl(builder *flatbuffers.Builder, sourceDl flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(47, flatbuffers.UOffsetT(sourceDl), 0)
}
func AIS_AbridgedAddOrigin(builder *flatbuffers.Builder, origin flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(48, flatbuffers.UOffsetT(origin), 0)
}
func AIS_AbridgedAddDataMode(builder *flatbuffers.Builder, dataMode AIS_Abridged_dataMode_Enum) {
	builder.PrependInt8Slot(49, int8(dataMode), 0)
}
func AIS_AbridgedAddOrigNetwork(builder *flatbuffers.Builder, origNetwork flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(50, flatbuffers.UOffsetT(origNetwork), 0)
}
func AIS_AbridgedEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
