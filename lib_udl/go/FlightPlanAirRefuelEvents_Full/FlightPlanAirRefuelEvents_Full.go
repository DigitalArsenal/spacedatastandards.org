// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package FlightPlanAirRefuelEvents_Full

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

/// /// Collection of air refueling events occurring on this flight.
type FlightPlanAirRefuelEvents_Full struct {
	_tab flatbuffers.Table
}

const FlightPlanAirRefuelEvents_FullIdentifier = "FLIG"

func GetRootAsFlightPlanAirRefuelEvents_Full(buf []byte, offset flatbuffers.UOffsetT) *FlightPlanAirRefuelEvents_Full {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &FlightPlanAirRefuelEvents_Full{}
	x.Init(buf, n+offset)
	return x
}

func FinishFlightPlanAirRefuelEvents_FullBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	identifierBytes := []byte(FlightPlanAirRefuelEvents_FullIdentifier)
	builder.FinishWithFileIdentifier(offset, identifierBytes)
}

func FlightPlanAirRefuelEvents_FullBufferHasIdentifier(buf []byte) bool {
	return flatbuffers.BufferHasIdentifier(buf, FlightPlanAirRefuelEvents_FullIdentifier)
}

func GetSizePrefixedRootAsFlightPlanAirRefuelEvents_Full(buf []byte, offset flatbuffers.UOffsetT) *FlightPlanAirRefuelEvents_Full {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &FlightPlanAirRefuelEvents_Full{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedFlightPlanAirRefuelEvents_FullBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	identifierBytes := []byte(FlightPlanAirRefuelEvents_FullIdentifier)
	builder.FinishSizePrefixedWithFileIdentifier(offset, identifierBytes)
}

func SizePrefixedFlightPlanAirRefuelEvents_FullBufferHasIdentifier(buf []byte) bool {
	return flatbuffers.SizePrefixedBufferHasIdentifier(buf, FlightPlanAirRefuelEvents_FullIdentifier)
}

func (rcv *FlightPlanAirRefuelEvents_Full) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *FlightPlanAirRefuelEvents_Full) Table() flatbuffers.Table {
	return rcv._tab
}

/// Additional degrade for air refueling, cumulative with fuelDegrade field percent.
/// Example: /// Example: 3.1
/// Constraints: No constraints specified.
func (rcv *FlightPlanAirRefuelEvents_Full) ArDegrade() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Additional degrade for air refueling, cumulative with fuelDegrade field percent.
/// Example: /// Example: 3.1
/// Constraints: No constraints specified.
func (rcv *FlightPlanAirRefuelEvents_Full) MutateArDegrade(n float64) bool {
	return rcv._tab.MutateFloat64Slot(4, n)
}

/// The number of this air refueling event within the flight plan.
/// Example: /// Example: 2
/// Constraints: No constraints specified.
func (rcv *FlightPlanAirRefuelEvents_Full) ArNum() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

/// The number of this air refueling event within the flight plan.
/// Example: /// Example: 2
/// Constraints: No constraints specified.
func (rcv *FlightPlanAirRefuelEvents_Full) MutateArNum(n int32) bool {
	return rcv._tab.MutateInt32Slot(6, n)
}

/// Fuel onloaded (use positive numbers) or fuel offloaded (use negative numbers) in pounds.
/// Example: /// Example: 1500.1
/// Constraints: No constraints specified.
func (rcv *FlightPlanAirRefuelEvents_Full) ArExchangedFuel() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Fuel onloaded (use positive numbers) or fuel offloaded (use negative numbers) in pounds.
/// Example: /// Example: 1500.1
/// Constraints: No constraints specified.
func (rcv *FlightPlanAirRefuelEvents_Full) MutateArExchangedFuel(n float64) bool {
	return rcv._tab.MutateFloat64Slot(8, n)
}

/// Fuel required to fly from air refueling exit point to air refueling divert alternate airfield in pounds.
/// Example: /// Example: 143000.1
/// Constraints: No constraints specified.
func (rcv *FlightPlanAirRefuelEvents_Full) DivertFuel() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Fuel required to fly from air refueling exit point to air refueling divert alternate airfield in pounds.
/// Example: /// Example: 143000.1
/// Constraints: No constraints specified.
func (rcv *FlightPlanAirRefuelEvents_Full) MutateDivertFuel(n float64) bool {
	return rcv._tab.MutateFloat64Slot(10, n)
}

/// Fuel remaining at the air refueling exit in pounds.
/// Example: /// Example: 160000.1
/// Constraints: No constraints specified.
func (rcv *FlightPlanAirRefuelEvents_Full) ExitFuel() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Fuel remaining at the air refueling exit in pounds.
/// Example: /// Example: 160000.1
/// Constraints: No constraints specified.
func (rcv *FlightPlanAirRefuelEvents_Full) MutateExitFuel(n float64) bool {
	return rcv._tab.MutateFloat64Slot(12, n)
}

func FlightPlanAirRefuelEvents_FullStart(builder *flatbuffers.Builder) {
	builder.StartObject(5)
}
func FlightPlanAirRefuelEvents_FullAddArDegrade(builder *flatbuffers.Builder, arDegrade float64) {
	builder.PrependFloat64Slot(0, arDegrade, 0.0)
}
func FlightPlanAirRefuelEvents_FullAddArNum(builder *flatbuffers.Builder, arNum int32) {
	builder.PrependInt32Slot(1, arNum, 0)
}
func FlightPlanAirRefuelEvents_FullAddArExchangedFuel(builder *flatbuffers.Builder, arExchangedFuel float64) {
	builder.PrependFloat64Slot(2, arExchangedFuel, 0.0)
}
func FlightPlanAirRefuelEvents_FullAddDivertFuel(builder *flatbuffers.Builder, divertFuel float64) {
	builder.PrependFloat64Slot(3, divertFuel, 0.0)
}
func FlightPlanAirRefuelEvents_FullAddExitFuel(builder *flatbuffers.Builder, exitFuel float64) {
	builder.PrependFloat64Slot(4, exitFuel, 0.0)
}
func FlightPlanAirRefuelEvents_FullEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
