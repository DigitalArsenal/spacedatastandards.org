// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package SensorPlan_Abridged

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

/// /// A Plan is used to aggregate two or more of the same type of record to a parent entity, with the planId (UUID) being included in all of the subordinate records, enabling resolution back to the parent.
type SensorPlan_Abridged struct {
	_tab flatbuffers.Table
}

const SensorPlan_AbridgedIdentifier = "SENS"

func GetRootAsSensorPlan_Abridged(buf []byte, offset flatbuffers.UOffsetT) *SensorPlan_Abridged {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &SensorPlan_Abridged{}
	x.Init(buf, n+offset)
	return x
}

func FinishSensorPlan_AbridgedBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	identifierBytes := []byte(SensorPlan_AbridgedIdentifier)
	builder.FinishWithFileIdentifier(offset, identifierBytes)
}

func SensorPlan_AbridgedBufferHasIdentifier(buf []byte) bool {
	return flatbuffers.BufferHasIdentifier(buf, SensorPlan_AbridgedIdentifier)
}

func GetSizePrefixedRootAsSensorPlan_Abridged(buf []byte, offset flatbuffers.UOffsetT) *SensorPlan_Abridged {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &SensorPlan_Abridged{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedSensorPlan_AbridgedBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	identifierBytes := []byte(SensorPlan_AbridgedIdentifier)
	builder.FinishSizePrefixedWithFileIdentifier(offset, identifierBytes)
}

func SizePrefixedSensorPlan_AbridgedBufferHasIdentifier(buf []byte) bool {
	return flatbuffers.SizePrefixedBufferHasIdentifier(buf, SensorPlan_AbridgedIdentifier)
}

func (rcv *SensorPlan_Abridged) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *SensorPlan_Abridged) Table() flatbuffers.Table {
	return rcv._tab
}

/// Unique identifier of the record, auto-generated by the system.
/// Example: /// Example: SENSORPLAN-ID
/// Constraints: Minimum length = 1, Maximum length = 36
func (rcv *SensorPlan_Abridged) Id() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Unique identifier of the record, auto-generated by the system.
/// Example: /// Example: SENSORPLAN-ID
/// Constraints: Minimum length = 1, Maximum length = 36
/// Classification marking of the data in IC/CAPCO Portion-marked format.
/// Example: /// Example: U
/// Constraints: Minimum length = 1, Maximum length = 128
func (rcv *SensorPlan_Abridged) ClassificationMarking() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Classification marking of the data in IC/CAPCO Portion-marked format.
/// Example: /// Example: U
/// Constraints: Minimum length = 1, Maximum length = 128
/// The type of this sensor plan/schedule (PLAN, REQUEST, SCHEDULE).
/// Example: /// Example: PLAN
/// Constraints: Minimum length = 1, Maximum length = 12
func (rcv *SensorPlan_Abridged) Type() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The type of this sensor plan/schedule (PLAN, REQUEST, SCHEDULE).
/// Example: /// Example: PLAN
/// Constraints: Minimum length = 1, Maximum length = 12
/// The type of records that comprise this parent set (COLLECT, CONTACT).
/// Example: /// Example: COLLECT
/// Constraints: Minimum length = 1, Maximum length = 12
func (rcv *SensorPlan_Abridged) RecType() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The type of records that comprise this parent set (COLLECT, CONTACT).
/// Example: /// Example: COLLECT
/// Constraints: Minimum length = 1, Maximum length = 12
/// The start time of the plan or schedule, in ISO 8601 UTC format.
/// Example: /// Example: 2018-01-01T16:00:00.123456Z
/// Constraints: No constraints specified.
func (rcv *SensorPlan_Abridged) StartTime() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The start time of the plan or schedule, in ISO 8601 UTC format.
/// Example: /// Example: 2018-01-01T16:00:00.123456Z
/// Constraints: No constraints specified.
/// The end time of the plan or schedule, in ISO 8601 UTC format.
/// Example: /// Example: 2018-01-01T16:00:00.123456Z
/// Constraints: No constraints specified.
func (rcv *SensorPlan_Abridged) EndTime() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The end time of the plan or schedule, in ISO 8601 UTC format.
/// Example: /// Example: 2018-01-01T16:00:00.123456Z
/// Constraints: No constraints specified.
/// Name associated with this plan or schedule.
/// Example: /// Example: EXAMPLE NAME
/// Constraints: Minimum length = 0, Maximum length = 24
func (rcv *SensorPlan_Abridged) Name() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Name associated with this plan or schedule.
/// Example: /// Example: EXAMPLE NAME
/// Constraints: Minimum length = 0, Maximum length = 24
/// Unique identifier of the requested/schedule/planned sensor associated with this request.
/// Example: /// Example: REF-SENSOR-ID
/// Constraints: Minimum length = 0, Maximum length = 36
func (rcv *SensorPlan_Abridged) IdSensor() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(18))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Unique identifier of the requested/schedule/planned sensor associated with this request.
/// Example: /// Example: REF-SENSOR-ID
/// Constraints: Minimum length = 0, Maximum length = 36
/// Optional identifier provided by the source to indicate the sensor identifier requested/scheduled/planned for this request. This may be an internal identifier and not necessarily a valid sensor ID.
/// Example: /// Example: ORIGSENSOR-ID
/// Constraints: Minimum length = 0, Maximum length = 64
func (rcv *SensorPlan_Abridged) OrigSensorId() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(20))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Optional identifier provided by the source to indicate the sensor identifier requested/scheduled/planned for this request. This may be an internal identifier and not necessarily a valid sensor ID.
/// Example: /// Example: ORIGSENSOR-ID
/// Constraints: Minimum length = 0, Maximum length = 64
/// The purpose/description of this plan or schedule.
/// Example: /// Example: Example purpose
/// Constraints: Minimum length = 0, Maximum length = 256
func (rcv *SensorPlan_Abridged) Purpose() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(22))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The purpose/description of this plan or schedule.
/// Example: /// Example: Example purpose
/// Constraints: Minimum length = 0, Maximum length = 256
/// The sensor or ground network associated with this plan or schedule.
/// Example: /// Example: NETWORK
/// Constraints: Minimum length = 0, Maximum length = 24
func (rcv *SensorPlan_Abridged) SenNetwork() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(24))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The sensor or ground network associated with this plan or schedule.
/// Example: /// Example: NETWORK
/// Constraints: Minimum length = 0, Maximum length = 24
/// The total number of requests contained in this plan or schedule. Value of this field must match the size of collectRequest list if the list is provided and can be null or any value otherwise.
/// Example: /// Example: 2
/// Constraints: No constraints specified.
func (rcv *SensorPlan_Abridged) ReqTotal() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(26))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

/// The total number of requests contained in this plan or schedule. Value of this field must match the size of collectRequest list if the list is provided and can be null or any value otherwise.
/// Example: /// Example: 2
/// Constraints: No constraints specified.
func (rcv *SensorPlan_Abridged) MutateReqTotal(n int32) bool {
	return rcv._tab.MutateInt32Slot(26, n)
}

/// The customer for this plan or schedule.
/// Example: /// Example: CUSTOMER
/// Constraints: Minimum length = 0, Maximum length = 64
func (rcv *SensorPlan_Abridged) Customer() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(28))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The customer for this plan or schedule.
/// Example: /// Example: CUSTOMER
/// Constraints: Minimum length = 0, Maximum length = 64
/// The status of this plan or schedule (ACCEPTED, APPROVED, COMPLETED, PROPOSED, REJECTED, REQUESTED, SCHEDULED).
/// Example: /// Example: ACCEPTED
/// Constraints: Minimum length = 0, Maximum length = 24
func (rcv *SensorPlan_Abridged) Status() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(30))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The status of this plan or schedule (ACCEPTED, APPROVED, COMPLETED, PROPOSED, REJECTED, REQUESTED, SCHEDULED).
/// Example: /// Example: ACCEPTED
/// Constraints: Minimum length = 0, Maximum length = 24
/// Time the row was created in the database, auto-populated by the system.
/// Example: /// Example: 2018-01-01T16:00:00.123Z
/// Constraints: No constraints specified.
func (rcv *SensorPlan_Abridged) CreatedAt() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(32))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Time the row was created in the database, auto-populated by the system.
/// Example: /// Example: 2018-01-01T16:00:00.123Z
/// Constraints: No constraints specified.
/// Application user who created the row in the database, auto-populated by the system.
/// Example: /// Example: some.user
/// Constraints: Minimum length = 1, Maximum length = 64
func (rcv *SensorPlan_Abridged) CreatedBy() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(34))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Application user who created the row in the database, auto-populated by the system.
/// Example: /// Example: some.user
/// Constraints: Minimum length = 1, Maximum length = 64
/// Source of the data.
/// Example: /// Example: Bluestaq
/// Constraints: Minimum length = 1, Maximum length = 36
func (rcv *SensorPlan_Abridged) Source() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(36))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Source of the data.
/// Example: /// Example: Bluestaq
/// Constraints: Minimum length = 1, Maximum length = 36
/// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
/// Example: /// Example: THIRD_PARTY_DATASOURCE
/// Constraints: Minimum length = 0, Maximum length = 64
func (rcv *SensorPlan_Abridged) Origin() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(38))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
/// Example: /// Example: THIRD_PARTY_DATASOURCE
/// Constraints: Minimum length = 0, Maximum length = 64
/// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
/// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
/// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
/// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
/// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
/// Example: /// Example: TEST
/// Constraints: Minimum length = 1, Maximum length = 32
func (rcv *SensorPlan_Abridged) DataMode() SensorPlan_Abridged_dataMode_Enum {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(40))
	if o != 0 {
		return SensorPlan_Abridged_dataMode_Enum(rcv._tab.GetInt8(o + rcv._tab.Pos))
	}
	return 0
}

/// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
/// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
/// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
/// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
/// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
/// Example: /// Example: TEST
/// Constraints: Minimum length = 1, Maximum length = 32
func (rcv *SensorPlan_Abridged) MutateDataMode(n SensorPlan_Abridged_dataMode_Enum) bool {
	return rcv._tab.MutateInt8Slot(40, int8(n))
}

/// The originating source network on which this record was created, auto-populated by the system.
/// Example: /// Example: ORIG
/// Constraints: Minimum length = 0, Maximum length = 32
func (rcv *SensorPlan_Abridged) OrigNetwork() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(42))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The originating source network on which this record was created, auto-populated by the system.
/// Example: /// Example: ORIG
/// Constraints: Minimum length = 0, Maximum length = 32
func SensorPlan_AbridgedStart(builder *flatbuffers.Builder) {
	builder.StartObject(20)
}
func SensorPlan_AbridgedAddId(builder *flatbuffers.Builder, id flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(id), 0)
}
func SensorPlan_AbridgedAddClassificationMarking(builder *flatbuffers.Builder, classificationMarking flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(classificationMarking), 0)
}
func SensorPlan_AbridgedAddType(builder *flatbuffers.Builder, type_ flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(type_), 0)
}
func SensorPlan_AbridgedAddRecType(builder *flatbuffers.Builder, recType flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(3, flatbuffers.UOffsetT(recType), 0)
}
func SensorPlan_AbridgedAddStartTime(builder *flatbuffers.Builder, startTime flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(4, flatbuffers.UOffsetT(startTime), 0)
}
func SensorPlan_AbridgedAddEndTime(builder *flatbuffers.Builder, endTime flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(5, flatbuffers.UOffsetT(endTime), 0)
}
func SensorPlan_AbridgedAddName(builder *flatbuffers.Builder, name flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(6, flatbuffers.UOffsetT(name), 0)
}
func SensorPlan_AbridgedAddIdSensor(builder *flatbuffers.Builder, idSensor flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(7, flatbuffers.UOffsetT(idSensor), 0)
}
func SensorPlan_AbridgedAddOrigSensorId(builder *flatbuffers.Builder, origSensorId flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(8, flatbuffers.UOffsetT(origSensorId), 0)
}
func SensorPlan_AbridgedAddPurpose(builder *flatbuffers.Builder, purpose flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(9, flatbuffers.UOffsetT(purpose), 0)
}
func SensorPlan_AbridgedAddSenNetwork(builder *flatbuffers.Builder, senNetwork flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(10, flatbuffers.UOffsetT(senNetwork), 0)
}
func SensorPlan_AbridgedAddReqTotal(builder *flatbuffers.Builder, reqTotal int32) {
	builder.PrependInt32Slot(11, reqTotal, 0)
}
func SensorPlan_AbridgedAddCustomer(builder *flatbuffers.Builder, customer flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(12, flatbuffers.UOffsetT(customer), 0)
}
func SensorPlan_AbridgedAddStatus(builder *flatbuffers.Builder, status flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(13, flatbuffers.UOffsetT(status), 0)
}
func SensorPlan_AbridgedAddCreatedAt(builder *flatbuffers.Builder, createdAt flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(14, flatbuffers.UOffsetT(createdAt), 0)
}
func SensorPlan_AbridgedAddCreatedBy(builder *flatbuffers.Builder, createdBy flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(15, flatbuffers.UOffsetT(createdBy), 0)
}
func SensorPlan_AbridgedAddSource(builder *flatbuffers.Builder, source flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(16, flatbuffers.UOffsetT(source), 0)
}
func SensorPlan_AbridgedAddOrigin(builder *flatbuffers.Builder, origin flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(17, flatbuffers.UOffsetT(origin), 0)
}
func SensorPlan_AbridgedAddDataMode(builder *flatbuffers.Builder, dataMode SensorPlan_Abridged_dataMode_Enum) {
	builder.PrependInt8Slot(18, int8(dataMode), 0)
}
func SensorPlan_AbridgedAddOrigNetwork(builder *flatbuffers.Builder, origNetwork flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(19, flatbuffers.UOffsetT(origNetwork), 0)
}
func SensorPlan_AbridgedEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
