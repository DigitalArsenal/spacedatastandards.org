// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package AircraftStatus_Ingest

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

/// /// Aircraft readiness and status data. Contains the dynamic data associated with the specific aircraft status, either in-flight or on-ground, including remaining fuel, mission readiness, and inventory, etc.
type AircraftStatus_Ingest struct {
	_tab flatbuffers.Table
}

const AircraftStatus_IngestIdentifier = "AIRC"

func GetRootAsAircraftStatus_Ingest(buf []byte, offset flatbuffers.UOffsetT) *AircraftStatus_Ingest {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &AircraftStatus_Ingest{}
	x.Init(buf, n+offset)
	return x
}

func FinishAircraftStatus_IngestBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	identifierBytes := []byte(AircraftStatus_IngestIdentifier)
	builder.FinishWithFileIdentifier(offset, identifierBytes)
}

func AircraftStatus_IngestBufferHasIdentifier(buf []byte) bool {
	return flatbuffers.BufferHasIdentifier(buf, AircraftStatus_IngestIdentifier)
}

func GetSizePrefixedRootAsAircraftStatus_Ingest(buf []byte, offset flatbuffers.UOffsetT) *AircraftStatus_Ingest {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &AircraftStatus_Ingest{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedAircraftStatus_IngestBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	identifierBytes := []byte(AircraftStatus_IngestIdentifier)
	builder.FinishSizePrefixedWithFileIdentifier(offset, identifierBytes)
}

func SizePrefixedAircraftStatus_IngestBufferHasIdentifier(buf []byte) bool {
	return flatbuffers.SizePrefixedBufferHasIdentifier(buf, AircraftStatus_IngestIdentifier)
}

func (rcv *AircraftStatus_Ingest) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *AircraftStatus_Ingest) Table() flatbuffers.Table {
	return rcv._tab
}

/// Unique identifier of the record, auto-generated by the system.
/// Example: /// Example: 0167f577-e06c-358e-85aa-0a07a730bdd0
/// Constraints: Minimum length = 1, Maximum length = 36
func (rcv *AircraftStatus_Ingest) Id() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Unique identifier of the record, auto-generated by the system.
/// Example: /// Example: 0167f577-e06c-358e-85aa-0a07a730bdd0
/// Constraints: Minimum length = 1, Maximum length = 36
/// Classification marking of the data in IC/CAPCO Portion-marked format.
/// Example: /// Example: U
/// Constraints: Minimum length = 1, Maximum length = 128
func (rcv *AircraftStatus_Ingest) ClassificationMarking() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Classification marking of the data in IC/CAPCO Portion-marked format.
/// Example: /// Example: U
/// Constraints: Minimum length = 1, Maximum length = 128
/// Unique identifier of the aircraft.
/// Example: /// Example: 29232269-e4c2-45c9-aa21-039a33209340
/// Constraints: Minimum length = 1, Maximum length = 36
func (rcv *AircraftStatus_Ingest) IdAircraft() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Unique identifier of the aircraft.
/// Example: /// Example: 29232269-e4c2-45c9-aa21-039a33209340
/// Constraints: Minimum length = 1, Maximum length = 36
/// Alternate Aircraft Identifier provided by source.
/// Example: /// Example: ORIG-AIRCRAFT-ID
/// Constraints: Minimum length = 0, Maximum length = 36
func (rcv *AircraftStatus_Ingest) AltAircraftId() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Alternate Aircraft Identifier provided by source.
/// Example: /// Example: ORIG-AIRCRAFT-ID
/// Constraints: Minimum length = 0, Maximum length = 36
/// The current readiness state of the aircraft (e.g. AIRBORNE, ALERTCOCKED, AVAILABLE, BATTLESTATION, RUNWAY ALERT, SUITUP).
/// Example: /// Example: AVAILABLE
/// Constraints: Minimum length = 0, Maximum length = 32
func (rcv *AircraftStatus_Ingest) CurrentState() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The current readiness state of the aircraft (e.g. AIRBORNE, ALERTCOCKED, AVAILABLE, BATTLESTATION, RUNWAY ALERT, SUITUP).
/// Example: /// Example: AVAILABLE
/// Constraints: Minimum length = 0, Maximum length = 32
/// If not airborne, the unique identifier of the installation currently hosting the aircraft.
/// Example: /// Example: b89430e3-97d9-408c-9c89-fd3840c4b84d
/// Constraints: Minimum length = 0, Maximum length = 36
func (rcv *AircraftStatus_Ingest) IdAirfield() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// If not airborne, the unique identifier of the installation currently hosting the aircraft.
/// Example: /// Example: b89430e3-97d9-408c-9c89-fd3840c4b84d
/// Constraints: Minimum length = 0, Maximum length = 36
/// US Air Force geographic location code of the airfield where the aircraft is located.
/// Example: /// Example: AJJY
/// Constraints: Minimum length = 0, Maximum length = 16
func (rcv *AircraftStatus_Ingest) GeoLoc() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// US Air Force geographic location code of the airfield where the aircraft is located.
/// Example: /// Example: AJJY
/// Constraints: Minimum length = 0, Maximum length = 16
/// The International Civil Aviation Organization (ICAO) code at which this aircraft was previously located.
/// Example: /// Example: EGLL
/// Constraints: Minimum length = 0, Maximum length = 4
func (rcv *AircraftStatus_Ingest) PreviousIcao() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(18))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The International Civil Aviation Organization (ICAO) code at which this aircraft was previously located.
/// Example: /// Example: EGLL
/// Constraints: Minimum length = 0, Maximum length = 4
/// The International Civil Aviation Organization (ICAO) code at which this aircraft is currently located or has most recently departed, if airborne.
/// Example: /// Example: KCHS
/// Constraints: Minimum length = 0, Maximum length = 4
func (rcv *AircraftStatus_Ingest) CurrentIcao() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(20))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The International Civil Aviation Organization (ICAO) code at which this aircraft is currently located or has most recently departed, if airborne.
/// Example: /// Example: KCHS
/// Constraints: Minimum length = 0, Maximum length = 4
/// The International Civil Aviation Organization (ICAO) code of the next destination of this aircraft.
/// Example: /// Example: PHNL
/// Constraints: Minimum length = 0, Maximum length = 4
func (rcv *AircraftStatus_Ingest) NextIcao() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(22))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The International Civil Aviation Organization (ICAO) code of the next destination of this aircraft.
/// Example: /// Example: PHNL
/// Constraints: Minimum length = 0, Maximum length = 4
/// Current flight phase (e.g. AIR REFUELING, GROUND, LANDING, etc.) of the aircraft.
/// Example: /// Example: Landing
/// Constraints: Minimum length = 0, Maximum length = 16
func (rcv *AircraftStatus_Ingest) FlightPhase() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(24))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Current flight phase (e.g. AIR REFUELING, GROUND, LANDING, etc.) of the aircraft.
/// Example: /// Example: Landing
/// Constraints: Minimum length = 0, Maximum length = 16
/// The turnaround start time, in ISO 8601 UTC format with millisecond precision.
/// Example: /// Example: 2022-01-01T16:00:00.123Z
/// Constraints: No constraints specified.
func (rcv *AircraftStatus_Ingest) TaStartTime() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(26))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The turnaround start time, in ISO 8601 UTC format with millisecond precision.
/// Example: /// Example: 2022-01-01T16:00:00.123Z
/// Constraints: No constraints specified.
/// The earliest time that turnaround of the aircraft may complete, in ISO 8601 UTC format with millisecond precision.
/// Example: /// Example: 2022-01-01T16:00:00.123Z
/// Constraints: No constraints specified.
func (rcv *AircraftStatus_Ingest) EarliestTaendTime() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(28))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The earliest time that turnaround of the aircraft may complete, in ISO 8601 UTC format with millisecond precision.
/// Example: /// Example: 2022-01-01T16:00:00.123Z
/// Constraints: No constraints specified.
/// The Operational Capability of the reported aircraft (ABLE, LOFUEL, UNABLE).
/// Example: /// Example: ABLE
/// Constraints: Minimum length = 0, Maximum length = 16
func (rcv *AircraftStatus_Ingest) MissionReadiness() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(30))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The Operational Capability of the reported aircraft (ABLE, LOFUEL, UNABLE).
/// Example: /// Example: ABLE
/// Constraints: Minimum length = 0, Maximum length = 16
/// The mass of fuel remaining on the aircraft, in kilograms.
/// Example: /// Example: 10
/// Constraints: No constraints specified.
func (rcv *AircraftStatus_Ingest) Fuel() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(32))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

/// The mass of fuel remaining on the aircraft, in kilograms.
/// Example: /// Example: 10
/// Constraints: No constraints specified.
func (rcv *AircraftStatus_Ingest) MutateFuel(n int32) bool {
	return rcv._tab.MutateInt32Slot(32, n)
}

/// Used in conjunction with the fuel field to indicate either burnable or offload fuel.
/// Example: /// Example: Burn
/// Constraints: Minimum length = 0, Maximum length = 8
func (rcv *AircraftStatus_Ingest) FuelFunction() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(34))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Used in conjunction with the fuel field to indicate either burnable or offload fuel.
/// Example: /// Example: Burn
/// Constraints: Minimum length = 0, Maximum length = 8
/// Flag indicating that the aircraft is capable of making at least one gun pass.
/// Example: /// Example: True
/// Constraints: No constraints specified.
func (rcv *AircraftStatus_Ingest) GunCapable() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(36))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

/// Flag indicating that the aircraft is capable of making at least one gun pass.
/// Example: /// Example: True
/// Constraints: No constraints specified.
func (rcv *AircraftStatus_Ingest) MutateGunCapable(n bool) bool {
	return rcv._tab.MutateBoolSlot(36, n)
}

/// The type of gun rounds available (e.g. 7.62 MM, 20 MM, 25 MM, etc.).
/// Example: /// Example: 7.62 MM
/// Constraints: Minimum length = 0, Maximum length = 64
func (rcv *AircraftStatus_Ingest) GunRdsType() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(38))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The type of gun rounds available (e.g. 7.62 MM, 20 MM, 25 MM, etc.).
/// Example: /// Example: 7.62 MM
/// Constraints: Minimum length = 0, Maximum length = 64
/// The lower bound of the estimated number of gun rounds available.
/// Example: /// Example: 150
/// Constraints: No constraints specified.
func (rcv *AircraftStatus_Ingest) GunRdsMin() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(40))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

/// The lower bound of the estimated number of gun rounds available.
/// Example: /// Example: 150
/// Constraints: No constraints specified.
func (rcv *AircraftStatus_Ingest) MutateGunRdsMin(n int32) bool {
	return rcv._tab.MutateInt32Slot(40, n)
}

/// The upper bound of the estimated number of gun rounds available.
/// Example: /// Example: 550
/// Constraints: No constraints specified.
func (rcv *AircraftStatus_Ingest) GunRdsMax() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(42))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

/// The upper bound of the estimated number of gun rounds available.
/// Example: /// Example: 550
/// Constraints: No constraints specified.
func (rcv *AircraftStatus_Ingest) MutateGunRdsMax(n int32) bool {
	return rcv._tab.MutateInt32Slot(42, n)
}

/// The status of the air-to-air weapon release system (OPERATIONAL, NON-OPERATIONAL, OFF).
/// Example: /// Example: OPERATIONAL
/// Constraints: Minimum length = 0, Maximum length = 16
func (rcv *AircraftStatus_Ingest) AirToAirStatus() AircraftStatus_Ingest_airToAirStatus_Enum {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(44))
	if o != 0 {
		return AircraftStatus_Ingest_airToAirStatus_Enum(rcv._tab.GetInt8(o + rcv._tab.Pos))
	}
	return 0
}

/// The status of the air-to-air weapon release system (OPERATIONAL, NON-OPERATIONAL, OFF).
/// Example: /// Example: OPERATIONAL
/// Constraints: Minimum length = 0, Maximum length = 16
func (rcv *AircraftStatus_Ingest) MutateAirToAirStatus(n AircraftStatus_Ingest_airToAirStatus_Enum) bool {
	return rcv._tab.MutateInt8Slot(44, int8(n))
}

/// The status of the air-to-ground weapon release system (OPERATIONAL, NON-OPERATIONAL, OFF).
/// Example: /// Example: OPERATIONAL
/// Constraints: Minimum length = 0, Maximum length = 16
func (rcv *AircraftStatus_Ingest) AirToGroundStatus() AircraftStatus_Ingest_airToGroundStatus_Enum {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(46))
	if o != 0 {
		return AircraftStatus_Ingest_airToGroundStatus_Enum(rcv._tab.GetInt8(o + rcv._tab.Pos))
	}
	return 0
}

/// The status of the air-to-ground weapon release system (OPERATIONAL, NON-OPERATIONAL, OFF).
/// Example: /// Example: OPERATIONAL
/// Constraints: Minimum length = 0, Maximum length = 16
func (rcv *AircraftStatus_Ingest) MutateAirToGroundStatus(n AircraftStatus_Ingest_airToGroundStatus_Enum) bool {
	return rcv._tab.MutateInt8Slot(46, int8(n))
}

/// Array of inventory item(s) for which estimate(s) are available (e.g. AIM-9 SIDEWINDER, AIM-120 AMRAAM, AIM-92 STINGER, CHAFF DECOY, FLARE TP 400, etc.).  Intended as, but not constrained to, MIL-STD-6016 environment dependent specific/store type designations.  This array must be the same length as inventoryMin and inventoryMax.
/// Example: /// Example: ['AIM-9 SIDEWINDER', 'AIM-120 AMRAAM']
/// Constraints: No constraints specified.
func (rcv *AircraftStatus_Ingest) Inventory(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(48))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *AircraftStatus_Ingest) InventoryLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(48))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

/// Array of inventory item(s) for which estimate(s) are available (e.g. AIM-9 SIDEWINDER, AIM-120 AMRAAM, AIM-92 STINGER, CHAFF DECOY, FLARE TP 400, etc.).  Intended as, but not constrained to, MIL-STD-6016 environment dependent specific/store type designations.  This array must be the same length as inventoryMin and inventoryMax.
/// Example: /// Example: ['AIM-9 SIDEWINDER', 'AIM-120 AMRAAM']
/// Constraints: No constraints specified.
/// Array of the lower bound quantity for each of the inventory items. The values in this array must correspond to position index in the inventory array. This array must be the same length as inventory and inventoryMax.
/// Example: /// Example: [1, 2]
/// Constraints: No constraints specified.
func (rcv *AircraftStatus_Ingest) InventoryMin(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(50))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *AircraftStatus_Ingest) InventoryMinLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(50))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

/// Array of the lower bound quantity for each of the inventory items. The values in this array must correspond to position index in the inventory array. This array must be the same length as inventory and inventoryMax.
/// Example: /// Example: [1, 2]
/// Constraints: No constraints specified.
/// Array of the upper bound quantity for each of the inventory items. The values in this array must correspond to position index in the inventory array. This array must be the same length as inventory and inventoryMin.
/// Example: /// Example: [2, 2]
/// Constraints: No constraints specified.
func (rcv *AircraftStatus_Ingest) InventoryMax(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(52))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *AircraftStatus_Ingest) InventoryMaxLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(52))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

/// Array of the upper bound quantity for each of the inventory items. The values in this array must correspond to position index in the inventory array. This array must be the same length as inventory and inventoryMin.
/// Example: /// Example: [2, 2]
/// Constraints: No constraints specified.
/// List of unavailable systems that would normally be on this aircraft.
/// Example: /// Example: ['CMDS', 'AOC']
/// Constraints: No constraints specified.
func (rcv *AircraftStatus_Ingest) UnavailableSys(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(54))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *AircraftStatus_Ingest) UnavailableSysLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(54))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

/// List of unavailable systems that would normally be on this aircraft.
/// Example: /// Example: ['CMDS', 'AOC']
/// Constraints: No constraints specified.
/// List of additional operational systems on this aircraft beyond what is normally available.
/// Example: /// Example: ['ATOMS', 'TUDL', 'BLOS1']
/// Constraints: No constraints specified.
func (rcv *AircraftStatus_Ingest) AdditionalSys(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(56))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *AircraftStatus_Ingest) AdditionalSysLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(56))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

/// List of additional operational systems on this aircraft beyond what is normally available.
/// Example: /// Example: ['ATOMS', 'TUDL', 'BLOS1']
/// Constraints: No constraints specified.
/// Optional notes/comments concerning this aircraft status.
/// Example: /// Example: Some notes for aircraft A
/// Constraints: Minimum length = 0, Maximum length = 1024
func (rcv *AircraftStatus_Ingest) Notes() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(58))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Optional notes/comments concerning this aircraft status.
/// Example: /// Example: Some notes for aircraft A
/// Constraints: Minimum length = 0, Maximum length = 1024
/// Maintenance pacing remarks assocociated with this aircraft.
/// Example: /// Example: COM2 INOP
/// Constraints: Minimum length = 0, Maximum length = 1024
func (rcv *AircraftStatus_Ingest) MxRemark() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(60))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Maintenance pacing remarks assocociated with this aircraft.
/// Example: /// Example: COM2 INOP
/// Constraints: Minimum length = 0, Maximum length = 1024
/// The maintenance status of the aircraft.
/// Example: /// Example: maintenance status
/// Constraints: Minimum length = 0, Maximum length = 24
func (rcv *AircraftStatus_Ingest) MaintStatus() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(62))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The maintenance status of the aircraft.
/// Example: /// Example: maintenance status
/// Constraints: Minimum length = 0, Maximum length = 24
/// Indicates the maintenance discrepancy that drives the current maintenance status.
/// Example: /// Example: SCREW STUCK IN LEFT NLG TIRE
/// Constraints: Minimum length = 0, Maximum length = 128
func (rcv *AircraftStatus_Ingest) MaintStatusDriver() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(64))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Indicates the maintenance discrepancy that drives the current maintenance status.
/// Example: /// Example: SCREW STUCK IN LEFT NLG TIRE
/// Constraints: Minimum length = 0, Maximum length = 128
/// Indicates the priority of the maintenance effort.
/// Example: /// Example: 1
/// Constraints: Minimum length = 0, Maximum length = 1
func (rcv *AircraftStatus_Ingest) MaintPriority() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(66))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Indicates the priority of the maintenance effort.
/// Example: /// Example: 1
/// Constraints: Minimum length = 0, Maximum length = 1
/// Aircraft alpha status code that indicates the aircraft maintenance status estimated by the pilot.
/// Example: /// Example: A2
/// Constraints: Minimum length = 0, Maximum length = 2
func (rcv *AircraftStatus_Ingest) AlphaStatusCode() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(68))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Aircraft alpha status code that indicates the aircraft maintenance status estimated by the pilot.
/// Example: /// Example: A2
/// Constraints: Minimum length = 0, Maximum length = 2
/// The time of the last maintenance status update, in ISO 8601 UTC format with millisecond precision.
/// Example: /// Example: 2022-01-01T16:00:00.123Z
/// Constraints: No constraints specified.
func (rcv *AircraftStatus_Ingest) MaintStatusUpdate() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(70))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The time of the last maintenance status update, in ISO 8601 UTC format with millisecond precision.
/// Example: /// Example: 2022-01-01T16:00:00.123Z
/// Constraints: No constraints specified.
/// Date when the military aircraft inspection was last performed, in ISO 8601 UTC format with millisecond precision.
/// Example: /// Example: 2024-09-09T16:00:00.123Z
/// Constraints: No constraints specified.
func (rcv *AircraftStatus_Ingest) LastInspectionDate() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(72))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Date when the military aircraft inspection was last performed, in ISO 8601 UTC format with millisecond precision.
/// Example: /// Example: 2024-09-09T16:00:00.123Z
/// Constraints: No constraints specified.
/// Military aircraft maintenance point of contact for this aircraft.
/// Example: /// Example: PSUP NIGHT SHIFT 800-555-4412
/// Constraints: Minimum length = 0, Maximum length = 32
func (rcv *AircraftStatus_Ingest) MaintPoc() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(74))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Military aircraft maintenance point of contact for this aircraft.
/// Example: /// Example: PSUP NIGHT SHIFT 800-555-4412
/// Constraints: Minimum length = 0, Maximum length = 32
/// The ground status of the aircraft (e.g. ALERT, CREW READY, ENGINE START, HANGAR, etc.).
/// Example: /// Example: ALERT
/// Constraints: Minimum length = 0, Maximum length = 24
func (rcv *AircraftStatus_Ingest) GroundStatus() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(76))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The ground status of the aircraft (e.g. ALERT, CREW READY, ENGINE START, HANGAR, etc.).
/// Example: /// Example: ALERT
/// Constraints: Minimum length = 0, Maximum length = 24
/// The contamination status of the aircraft (e.g. CLEAR, CONTAMINATED, DECONTAMINATED, UNKNOWN, etc.).
/// Example: /// Example: CLEAR
/// Constraints: Minimum length = 0, Maximum length = 24
func (rcv *AircraftStatus_Ingest) ContaminationStatus() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(78))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The contamination status of the aircraft (e.g. CLEAR, CONTAMINATED, DECONTAMINATED, UNKNOWN, etc.).
/// Example: /// Example: CLEAR
/// Constraints: Minimum length = 0, Maximum length = 24
/// The state of the aircraft fuel status (e.g. DELIVERED, DUMPED, EMPTY, FULL, OTHER, REQUESTED, etc.).
/// Example: /// Example: DELIVERED
/// Constraints: Minimum length = 0, Maximum length = 24
func (rcv *AircraftStatus_Ingest) FuelStatus() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(80))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The state of the aircraft fuel status (e.g. DELIVERED, DUMPED, EMPTY, FULL, OTHER, REQUESTED, etc.).
/// Example: /// Example: DELIVERED
/// Constraints: Minimum length = 0, Maximum length = 24
/// The name or ID of the external user that updated this status.
/// Example: /// Example: some.user
/// Constraints: Minimum length = 0, Maximum length = 36
func (rcv *AircraftStatus_Ingest) LastUpdatedBy() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(82))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The name or ID of the external user that updated this status.
/// Example: /// Example: some.user
/// Constraints: Minimum length = 0, Maximum length = 36
/// Estimated Time for Completion (ETIC) of an aircraft issue, in ISO 8601 UTC format with millisecond precision. This is the estimated time when the course of action to resolve the issue will be determined.
/// Example: /// Example: 2022-01-01T16:00:00.123Z
/// Constraints: No constraints specified.
func (rcv *AircraftStatus_Ingest) TroubleshootEtic() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(84))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Estimated Time for Completion (ETIC) of an aircraft issue, in ISO 8601 UTC format with millisecond precision. This is the estimated time when the course of action to resolve the issue will be determined.
/// Example: /// Example: 2022-01-01T16:00:00.123Z
/// Constraints: No constraints specified.
/// The Expected Time in Commission (ETIC) for this aircraft, in ISO 8601 UTC format with millisecond precision. This is the estimated time when the issue will be resolved.
/// Example: /// Example: 2022-01-01T16:00:00.123Z
/// Constraints: No constraints specified.
func (rcv *AircraftStatus_Ingest) Etic() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(86))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The Expected Time in Commission (ETIC) for this aircraft, in ISO 8601 UTC format with millisecond precision. This is the estimated time when the issue will be resolved.
/// Example: /// Example: 2022-01-01T16:00:00.123Z
/// Constraints: No constraints specified.
/// The parking location of this aircraft.
/// Example: /// Example: B1
/// Constraints: Minimum length = 0, Maximum length = 24
func (rcv *AircraftStatus_Ingest) ParkLocation() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(88))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The parking location of this aircraft.
/// Example: /// Example: B1
/// Constraints: Minimum length = 0, Maximum length = 24
/// The system that designated the parking location (e.g. EMOC, GDSS, PEX, etc.).
/// Example: /// Example: GDSS
/// Constraints: Minimum length = 0, Maximum length = 24
func (rcv *AircraftStatus_Ingest) ParkLocationSystem() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(90))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The system that designated the parking location (e.g. EMOC, GDSS, PEX, etc.).
/// Example: /// Example: GDSS
/// Constraints: Minimum length = 0, Maximum length = 24
/// Unique identifier of the Point of Interest (POI) record related to this aircraft status. This will generally represent the location of an aircraft on the ground.
/// Example: /// Example: 0e52f081-a2e3-4b73-b822-88b882232691
/// Constraints: Minimum length = 0, Maximum length = 36
func (rcv *AircraftStatus_Ingest) IdPoi() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(92))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Unique identifier of the Point of Interest (POI) record related to this aircraft status. This will generally represent the location of an aircraft on the ground.
/// Example: /// Example: 0e52f081-a2e3-4b73-b822-88b882232691
/// Constraints: Minimum length = 0, Maximum length = 36
/// Time the row was created in the database, auto-populated by the system.
/// Example: /// Example: 2018-01-01T16:00:00.123Z
/// Constraints: No constraints specified.
func (rcv *AircraftStatus_Ingest) CreatedAt() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(94))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Time the row was created in the database, auto-populated by the system.
/// Example: /// Example: 2018-01-01T16:00:00.123Z
/// Constraints: No constraints specified.
/// Application user who created the row in the database, auto-populated by the system.
/// Example: /// Example: some.user
/// Constraints: Minimum length = 1, Maximum length = 64
func (rcv *AircraftStatus_Ingest) CreatedBy() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(96))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Application user who created the row in the database, auto-populated by the system.
/// Example: /// Example: some.user
/// Constraints: Minimum length = 1, Maximum length = 64
/// The source data library from which this record was received. This could be a remote or tactical UDL or another data library. If null, the record should be assumed to have originated from the primary Enterprise UDL.
/// Example: /// Example: AXE
/// Constraints: Minimum length = 0, Maximum length = 64
func (rcv *AircraftStatus_Ingest) SourceDl() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(98))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The source data library from which this record was received. This could be a remote or tactical UDL or another data library. If null, the record should be assumed to have originated from the primary Enterprise UDL.
/// Example: /// Example: AXE
/// Constraints: Minimum length = 0, Maximum length = 64
/// Source of the data.
/// Example: /// Example: Bluestaq
/// Constraints: Minimum length = 1, Maximum length = 64
func (rcv *AircraftStatus_Ingest) Source() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(100))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Source of the data.
/// Example: /// Example: Bluestaq
/// Constraints: Minimum length = 1, Maximum length = 64
/// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
/// Example: /// Example: THIRD_PARTY_DATASOURCE
/// Constraints: Minimum length = 0, Maximum length = 64
func (rcv *AircraftStatus_Ingest) Origin() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(102))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
/// Example: /// Example: THIRD_PARTY_DATASOURCE
/// Constraints: Minimum length = 0, Maximum length = 64
/// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
/// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
/// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
/// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
/// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
/// Example: /// Example: TEST
/// Constraints: Minimum length = 1, Maximum length = 32
func (rcv *AircraftStatus_Ingest) DataMode() AircraftStatus_Ingest_dataMode_Enum {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(104))
	if o != 0 {
		return AircraftStatus_Ingest_dataMode_Enum(rcv._tab.GetInt8(o + rcv._tab.Pos))
	}
	return 0
}

/// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
/// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
/// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
/// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
/// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
/// Example: /// Example: TEST
/// Constraints: Minimum length = 1, Maximum length = 32
func (rcv *AircraftStatus_Ingest) MutateDataMode(n AircraftStatus_Ingest_dataMode_Enum) bool {
	return rcv._tab.MutateInt8Slot(104, int8(n))
}

/// The originating source network on which this record was created, auto-populated by the system.
/// Example: /// Example: OPS1
/// Constraints: Minimum length = 1, Maximum length = 32
func (rcv *AircraftStatus_Ingest) OrigNetwork() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(106))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The originating source network on which this record was created, auto-populated by the system.
/// Example: /// Example: OPS1
/// Constraints: Minimum length = 1, Maximum length = 32
func AircraftStatus_IngestStart(builder *flatbuffers.Builder) {
	builder.StartObject(52)
}
func AircraftStatus_IngestAddId(builder *flatbuffers.Builder, id flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(id), 0)
}
func AircraftStatus_IngestAddClassificationMarking(builder *flatbuffers.Builder, classificationMarking flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(classificationMarking), 0)
}
func AircraftStatus_IngestAddIdAircraft(builder *flatbuffers.Builder, idAircraft flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(idAircraft), 0)
}
func AircraftStatus_IngestAddAltAircraftId(builder *flatbuffers.Builder, altAircraftId flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(3, flatbuffers.UOffsetT(altAircraftId), 0)
}
func AircraftStatus_IngestAddCurrentState(builder *flatbuffers.Builder, currentState flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(4, flatbuffers.UOffsetT(currentState), 0)
}
func AircraftStatus_IngestAddIdAirfield(builder *flatbuffers.Builder, idAirfield flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(5, flatbuffers.UOffsetT(idAirfield), 0)
}
func AircraftStatus_IngestAddGeoLoc(builder *flatbuffers.Builder, geoLoc flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(6, flatbuffers.UOffsetT(geoLoc), 0)
}
func AircraftStatus_IngestAddPreviousIcao(builder *flatbuffers.Builder, previousIcao flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(7, flatbuffers.UOffsetT(previousIcao), 0)
}
func AircraftStatus_IngestAddCurrentIcao(builder *flatbuffers.Builder, currentIcao flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(8, flatbuffers.UOffsetT(currentIcao), 0)
}
func AircraftStatus_IngestAddNextIcao(builder *flatbuffers.Builder, nextIcao flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(9, flatbuffers.UOffsetT(nextIcao), 0)
}
func AircraftStatus_IngestAddFlightPhase(builder *flatbuffers.Builder, flightPhase flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(10, flatbuffers.UOffsetT(flightPhase), 0)
}
func AircraftStatus_IngestAddTaStartTime(builder *flatbuffers.Builder, taStartTime flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(11, flatbuffers.UOffsetT(taStartTime), 0)
}
func AircraftStatus_IngestAddEarliestTaendTime(builder *flatbuffers.Builder, earliestTaendTime flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(12, flatbuffers.UOffsetT(earliestTaendTime), 0)
}
func AircraftStatus_IngestAddMissionReadiness(builder *flatbuffers.Builder, missionReadiness flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(13, flatbuffers.UOffsetT(missionReadiness), 0)
}
func AircraftStatus_IngestAddFuel(builder *flatbuffers.Builder, fuel int32) {
	builder.PrependInt32Slot(14, fuel, 0)
}
func AircraftStatus_IngestAddFuelFunction(builder *flatbuffers.Builder, fuelFunction flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(15, flatbuffers.UOffsetT(fuelFunction), 0)
}
func AircraftStatus_IngestAddGunCapable(builder *flatbuffers.Builder, gunCapable bool) {
	builder.PrependBoolSlot(16, gunCapable, false)
}
func AircraftStatus_IngestAddGunRdsType(builder *flatbuffers.Builder, gunRdsType flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(17, flatbuffers.UOffsetT(gunRdsType), 0)
}
func AircraftStatus_IngestAddGunRdsMin(builder *flatbuffers.Builder, gunRdsMin int32) {
	builder.PrependInt32Slot(18, gunRdsMin, 0)
}
func AircraftStatus_IngestAddGunRdsMax(builder *flatbuffers.Builder, gunRdsMax int32) {
	builder.PrependInt32Slot(19, gunRdsMax, 0)
}
func AircraftStatus_IngestAddAirToAirStatus(builder *flatbuffers.Builder, airToAirStatus AircraftStatus_Ingest_airToAirStatus_Enum) {
	builder.PrependInt8Slot(20, int8(airToAirStatus), 0)
}
func AircraftStatus_IngestAddAirToGroundStatus(builder *flatbuffers.Builder, airToGroundStatus AircraftStatus_Ingest_airToGroundStatus_Enum) {
	builder.PrependInt8Slot(21, int8(airToGroundStatus), 0)
}
func AircraftStatus_IngestAddInventory(builder *flatbuffers.Builder, inventory flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(22, flatbuffers.UOffsetT(inventory), 0)
}
func AircraftStatus_IngestStartInventoryVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func AircraftStatus_IngestAddInventoryMin(builder *flatbuffers.Builder, inventoryMin flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(23, flatbuffers.UOffsetT(inventoryMin), 0)
}
func AircraftStatus_IngestStartInventoryMinVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func AircraftStatus_IngestAddInventoryMax(builder *flatbuffers.Builder, inventoryMax flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(24, flatbuffers.UOffsetT(inventoryMax), 0)
}
func AircraftStatus_IngestStartInventoryMaxVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func AircraftStatus_IngestAddUnavailableSys(builder *flatbuffers.Builder, unavailableSys flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(25, flatbuffers.UOffsetT(unavailableSys), 0)
}
func AircraftStatus_IngestStartUnavailableSysVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func AircraftStatus_IngestAddAdditionalSys(builder *flatbuffers.Builder, additionalSys flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(26, flatbuffers.UOffsetT(additionalSys), 0)
}
func AircraftStatus_IngestStartAdditionalSysVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func AircraftStatus_IngestAddNotes(builder *flatbuffers.Builder, notes flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(27, flatbuffers.UOffsetT(notes), 0)
}
func AircraftStatus_IngestAddMxRemark(builder *flatbuffers.Builder, mxRemark flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(28, flatbuffers.UOffsetT(mxRemark), 0)
}
func AircraftStatus_IngestAddMaintStatus(builder *flatbuffers.Builder, maintStatus flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(29, flatbuffers.UOffsetT(maintStatus), 0)
}
func AircraftStatus_IngestAddMaintStatusDriver(builder *flatbuffers.Builder, maintStatusDriver flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(30, flatbuffers.UOffsetT(maintStatusDriver), 0)
}
func AircraftStatus_IngestAddMaintPriority(builder *flatbuffers.Builder, maintPriority flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(31, flatbuffers.UOffsetT(maintPriority), 0)
}
func AircraftStatus_IngestAddAlphaStatusCode(builder *flatbuffers.Builder, alphaStatusCode flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(32, flatbuffers.UOffsetT(alphaStatusCode), 0)
}
func AircraftStatus_IngestAddMaintStatusUpdate(builder *flatbuffers.Builder, maintStatusUpdate flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(33, flatbuffers.UOffsetT(maintStatusUpdate), 0)
}
func AircraftStatus_IngestAddLastInspectionDate(builder *flatbuffers.Builder, lastInspectionDate flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(34, flatbuffers.UOffsetT(lastInspectionDate), 0)
}
func AircraftStatus_IngestAddMaintPoc(builder *flatbuffers.Builder, maintPoc flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(35, flatbuffers.UOffsetT(maintPoc), 0)
}
func AircraftStatus_IngestAddGroundStatus(builder *flatbuffers.Builder, groundStatus flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(36, flatbuffers.UOffsetT(groundStatus), 0)
}
func AircraftStatus_IngestAddContaminationStatus(builder *flatbuffers.Builder, contaminationStatus flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(37, flatbuffers.UOffsetT(contaminationStatus), 0)
}
func AircraftStatus_IngestAddFuelStatus(builder *flatbuffers.Builder, fuelStatus flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(38, flatbuffers.UOffsetT(fuelStatus), 0)
}
func AircraftStatus_IngestAddLastUpdatedBy(builder *flatbuffers.Builder, lastUpdatedBy flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(39, flatbuffers.UOffsetT(lastUpdatedBy), 0)
}
func AircraftStatus_IngestAddTroubleshootEtic(builder *flatbuffers.Builder, troubleshootEtic flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(40, flatbuffers.UOffsetT(troubleshootEtic), 0)
}
func AircraftStatus_IngestAddEtic(builder *flatbuffers.Builder, etic flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(41, flatbuffers.UOffsetT(etic), 0)
}
func AircraftStatus_IngestAddParkLocation(builder *flatbuffers.Builder, parkLocation flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(42, flatbuffers.UOffsetT(parkLocation), 0)
}
func AircraftStatus_IngestAddParkLocationSystem(builder *flatbuffers.Builder, parkLocationSystem flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(43, flatbuffers.UOffsetT(parkLocationSystem), 0)
}
func AircraftStatus_IngestAddIdPoi(builder *flatbuffers.Builder, idPoi flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(44, flatbuffers.UOffsetT(idPoi), 0)
}
func AircraftStatus_IngestAddCreatedAt(builder *flatbuffers.Builder, createdAt flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(45, flatbuffers.UOffsetT(createdAt), 0)
}
func AircraftStatus_IngestAddCreatedBy(builder *flatbuffers.Builder, createdBy flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(46, flatbuffers.UOffsetT(createdBy), 0)
}
func AircraftStatus_IngestAddSourceDl(builder *flatbuffers.Builder, sourceDl flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(47, flatbuffers.UOffsetT(sourceDl), 0)
}
func AircraftStatus_IngestAddSource(builder *flatbuffers.Builder, source flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(48, flatbuffers.UOffsetT(source), 0)
}
func AircraftStatus_IngestAddOrigin(builder *flatbuffers.Builder, origin flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(49, flatbuffers.UOffsetT(origin), 0)
}
func AircraftStatus_IngestAddDataMode(builder *flatbuffers.Builder, dataMode AircraftStatus_Ingest_dataMode_Enum) {
	builder.PrependInt8Slot(50, int8(dataMode), 0)
}
func AircraftStatus_IngestAddOrigNetwork(builder *flatbuffers.Builder, origNetwork flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(51, flatbuffers.UOffsetT(origNetwork), 0)
}
func AircraftStatus_IngestEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
