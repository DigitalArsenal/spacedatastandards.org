// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package SpaceEnvObservation_Full

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

/// /// SpaceEnvObservation data.
type SpaceEnvObservation_Full struct {
	_tab flatbuffers.Table
}

const SpaceEnvObservation_FullIdentifier = "SPAC"

func GetRootAsSpaceEnvObservation_Full(buf []byte, offset flatbuffers.UOffsetT) *SpaceEnvObservation_Full {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &SpaceEnvObservation_Full{}
	x.Init(buf, n+offset)
	return x
}

func FinishSpaceEnvObservation_FullBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	identifierBytes := []byte(SpaceEnvObservation_FullIdentifier)
	builder.FinishWithFileIdentifier(offset, identifierBytes)
}

func SpaceEnvObservation_FullBufferHasIdentifier(buf []byte) bool {
	return flatbuffers.BufferHasIdentifier(buf, SpaceEnvObservation_FullIdentifier)
}

func GetSizePrefixedRootAsSpaceEnvObservation_Full(buf []byte, offset flatbuffers.UOffsetT) *SpaceEnvObservation_Full {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &SpaceEnvObservation_Full{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedSpaceEnvObservation_FullBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	identifierBytes := []byte(SpaceEnvObservation_FullIdentifier)
	builder.FinishSizePrefixedWithFileIdentifier(offset, identifierBytes)
}

func SizePrefixedSpaceEnvObservation_FullBufferHasIdentifier(buf []byte) bool {
	return flatbuffers.SizePrefixedBufferHasIdentifier(buf, SpaceEnvObservation_FullIdentifier)
}

func (rcv *SpaceEnvObservation_Full) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *SpaceEnvObservation_Full) Table() flatbuffers.Table {
	return rcv._tab
}

/// Unique identifier of the record, auto-generated by the system.
/// Example: /// Example: f13f82b8-5d2a-407a-b3f3-1fe30ca79eae
/// Constraints: Minimum length = 1, Maximum length = 36
func (rcv *SpaceEnvObservation_Full) Id() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Unique identifier of the record, auto-generated by the system.
/// Example: /// Example: f13f82b8-5d2a-407a-b3f3-1fe30ca79eae
/// Constraints: Minimum length = 1, Maximum length = 36
/// Classification marking of the data in IC/CAPCO Portion-marked format.
/// Example: /// Example: U
/// Constraints: Minimum length = 1, Maximum length = 128
func (rcv *SpaceEnvObservation_Full) ClassificationMarking() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Classification marking of the data in IC/CAPCO Portion-marked format.
/// Example: /// Example: U
/// Constraints: Minimum length = 1, Maximum length = 128
/// The type of message associated with this record.
/// Example: /// Example: SODM
/// Constraints: Minimum length = 0, Maximum length = 16
func (rcv *SpaceEnvObservation_Full) MsgType() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The type of message associated with this record.
/// Example: /// Example: SODM
/// Constraints: Minimum length = 0, Maximum length = 16
/// The external system which generated the message, if applicable.
/// Example: /// Example: System Name
/// Constraints: Minimum length = 0, Maximum length = 64
func (rcv *SpaceEnvObservation_Full) GenSystem() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The external system which generated the message, if applicable.
/// Example: /// Example: System Name
/// Constraints: Minimum length = 0, Maximum length = 64
/// Optional ID from external systems. This field has no meaning within UDL and is provided as a convenience for systems that require tracking of an internal system generated ID.
/// Example: /// Example: fe4ad5dc-0128-4ce8-b09c-0b404322025e
/// Constraints: Minimum length = 0, Maximum length = 36
func (rcv *SpaceEnvObservation_Full) ExternalId() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Optional ID from external systems. This field has no meaning within UDL and is provided as a convenience for systems that require tracking of an internal system generated ID.
/// Example: /// Example: fe4ad5dc-0128-4ce8-b09c-0b404322025e
/// Constraints: Minimum length = 0, Maximum length = 36
/// The data type (e.g. AP, AURORAL FLUX, ECP, KINDEX, PROPAGATED SOLAR WIND, XRAY FLUX, etc.) of observations in this record.
/// Example: /// Example: ECP
/// Constraints: Minimum length = 0, Maximum length = 64
func (rcv *SpaceEnvObservation_Full) DataType() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The data type (e.g. AP, AURORAL FLUX, ECP, KINDEX, PROPAGATED SOLAR WIND, XRAY FLUX, etc.) of observations in this record.
/// Example: /// Example: ECP
/// Constraints: Minimum length = 0, Maximum length = 64
/// The time at which the associated data message was generated, in ISO 8601 UTC format with millisecond precision.
/// Example: /// Example: 2023-02-10T19:48:09.934Z
/// Constraints: No constraints specified.
func (rcv *SpaceEnvObservation_Full) GenTime() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The time at which the associated data message was generated, in ISO 8601 UTC format with millisecond precision.
/// Example: /// Example: 2023-02-10T19:48:09.934Z
/// Constraints: No constraints specified.
/// Flag indicating that this record contains forecast data.
/// Example: /// Example: True
/// Constraints: No constraints specified.
func (rcv *SpaceEnvObservation_Full) Forecast() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(18))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

/// Flag indicating that this record contains forecast data.
/// Example: /// Example: True
/// Constraints: No constraints specified.
func (rcv *SpaceEnvObservation_Full) MutateForecast(n bool) bool {
	return rcv._tab.MutateBoolSlot(18, n)
}

/// Flag indicating that this record contains derived data.
/// Example: /// Example: False
/// Constraints: No constraints specified.
func (rcv *SpaceEnvObservation_Full) Derived() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(20))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

/// Flag indicating that this record contains derived data.
/// Example: /// Example: False
/// Constraints: No constraints specified.
func (rcv *SpaceEnvObservation_Full) MutateDerived(n bool) bool {
	return rcv._tab.MutateBoolSlot(20, n)
}

/// Unique identifier of the on-orbit satellite hosting the sensor which produced this data.
/// Example: /// Example: 41866
/// Constraints: Minimum length = 0, Maximum length = 36
func (rcv *SpaceEnvObservation_Full) IdOnOrbit() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(22))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Unique identifier of the on-orbit satellite hosting the sensor which produced this data.
/// Example: /// Example: 41866
/// Constraints: Minimum length = 0, Maximum length = 36
/// Satellite/catalog number of the on-orbit satellite hosting the sensor which produced this data.
/// Example: /// Example: 41866
/// Constraints: No constraints specified.
func (rcv *SpaceEnvObservation_Full) SatNo() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(24))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

/// Satellite/catalog number of the on-orbit satellite hosting the sensor which produced this data.
/// Example: /// Example: 41866
/// Constraints: No constraints specified.
func (rcv *SpaceEnvObservation_Full) MutateSatNo(n int32) bool {
	return rcv._tab.MutateInt32Slot(24, n)
}

/// Optional identifier provided by the record source to indicate the satellite hosting the sensor which produced this data. This may be an internal identifier and not necessarily map to a valid satellite number.
/// Example: /// Example: 41866
/// Constraints: Minimum length = 0, Maximum length = 36
func (rcv *SpaceEnvObservation_Full) OrigObjectId() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(26))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Optional identifier provided by the record source to indicate the satellite hosting the sensor which produced this data. This may be an internal identifier and not necessarily map to a valid satellite number.
/// Example: /// Example: 41866
/// Constraints: Minimum length = 0, Maximum length = 36
/// Unique identifier of the reporting sensor.
/// Example: /// Example: ECP-1
/// Constraints: Minimum length = 0, Maximum length = 36
func (rcv *SpaceEnvObservation_Full) IdSensor() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(28))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Unique identifier of the reporting sensor.
/// Example: /// Example: ECP-1
/// Constraints: Minimum length = 0, Maximum length = 36
/// Optional identifier provided by the observation source to indicate the sensor which produced this observation. This may be an internal identifier and not necessarily a valid sensor ID.
/// Example: /// Example: ECP-1
/// Constraints: Minimum length = 0, Maximum length = 36
func (rcv *SpaceEnvObservation_Full) OrigSensorId() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(30))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Optional identifier provided by the observation source to indicate the sensor which produced this observation. This may be an internal identifier and not necessarily a valid sensor ID.
/// Example: /// Example: ECP-1
/// Constraints: Minimum length = 0, Maximum length = 36
/// The type of observatory from which this data was collected (e.g. FACILITY, ONORBIT, NETWORK, etc.).
/// Example: /// Example: ONORBIT
/// Constraints: Minimum length = 0, Maximum length = 64
func (rcv *SpaceEnvObservation_Full) ObservatoryType() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(32))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The type of observatory from which this data was collected (e.g. FACILITY, ONORBIT, NETWORK, etc.).
/// Example: /// Example: ONORBIT
/// Constraints: Minimum length = 0, Maximum length = 64
/// The name of the observatory from which this data was collected.
/// Example: /// Example: GOES-16
/// Constraints: Minimum length = 0, Maximum length = 128
func (rcv *SpaceEnvObservation_Full) ObservatoryName() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(34))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The name of the observatory from which this data was collected.
/// Example: /// Example: GOES-16
/// Constraints: Minimum length = 0, Maximum length = 128
/// Additional notes concerning the observatory.
/// Example: /// Example: Notes
/// Constraints: Minimum length = 0, Maximum length = 256
func (rcv *SpaceEnvObservation_Full) ObservatoryNotes() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(36))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Additional notes concerning the observatory.
/// Example: /// Example: Notes
/// Constraints: Minimum length = 0, Maximum length = 256
/// The type of instrument from which this data was collected (e.g. ANTENNA, CHANNELTRON, INTERFEROMETER, MAGNETOMETER, RADIOMETER, etc.).
/// Example: /// Example: MAGNETOMETER
/// Constraints: Minimum length = 0, Maximum length = 64
func (rcv *SpaceEnvObservation_Full) InstrumentType() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(38))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The type of instrument from which this data was collected (e.g. ANTENNA, CHANNELTRON, INTERFEROMETER, MAGNETOMETER, RADIOMETER, etc.).
/// Example: /// Example: MAGNETOMETER
/// Constraints: Minimum length = 0, Maximum length = 64
/// WGS-84 spacecraft/sensor latitude sub-point at observation time, represented as -90 to 90 degrees (negative values south of equator).
/// Example: /// Example: 38.8339
/// Constraints: No constraints specified.
func (rcv *SpaceEnvObservation_Full) Lat() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(40))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// WGS-84 spacecraft/sensor latitude sub-point at observation time, represented as -90 to 90 degrees (negative values south of equator).
/// Example: /// Example: 38.8339
/// Constraints: No constraints specified.
func (rcv *SpaceEnvObservation_Full) MutateLat(n float64) bool {
	return rcv._tab.MutateFloat64Slot(40, n)
}

/// WGS-84 spacecraft/sensor longitude sub-point at observation time, represented as -180 to 180 degrees (negative values west of Prime Meridian).
/// Example: /// Example: -104.8214
/// Constraints: No constraints specified.
func (rcv *SpaceEnvObservation_Full) Lon() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(42))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// WGS-84 spacecraft/sensor longitude sub-point at observation time, represented as -180 to 180 degrees (negative values west of Prime Meridian).
/// Example: /// Example: -104.8214
/// Constraints: No constraints specified.
func (rcv *SpaceEnvObservation_Full) MutateLon(n float64) bool {
	return rcv._tab.MutateFloat64Slot(42, n)
}

/// Spacecraft/sensor altitude at observation time, expressed in kilometers above WGS-84 ellipsoid.
/// Example: /// Example: 35785.3732
/// Constraints: No constraints specified.
func (rcv *SpaceEnvObservation_Full) Alt() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(44))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Spacecraft/sensor altitude at observation time, expressed in kilometers above WGS-84 ellipsoid.
/// Example: /// Example: 35785.3732
/// Constraints: No constraints specified.
func (rcv *SpaceEnvObservation_Full) MutateAlt(n float64) bool {
	return rcv._tab.MutateFloat64Slot(44, n)
}

/// The reference frame of the observing spacecraft/sensor state. If the senReferenceFrame is null it is assumed to be J2000.
/// Example: /// Example: J2000
/// Constraints: Minimum length = 0, Maximum length = 24
func (rcv *SpaceEnvObservation_Full) SenReferenceFrame() SpaceEnvObservation_Full_senReferenceFrame_Enum {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(46))
	if o != 0 {
		return SpaceEnvObservation_Full_senReferenceFrame_Enum(rcv._tab.GetInt8(o + rcv._tab.Pos))
	}
	return 0
}

/// The reference frame of the observing spacecraft/sensor state. If the senReferenceFrame is null it is assumed to be J2000.
/// Example: /// Example: J2000
/// Constraints: Minimum length = 0, Maximum length = 24
func (rcv *SpaceEnvObservation_Full) MutateSenReferenceFrame(n SpaceEnvObservation_Full_senReferenceFrame_Enum) bool {
	return rcv._tab.MutateInt8Slot(46, int8(n))
}

/// Three element array, expressing the observing spacecraft/sensor position vector components at observation time, in kilometers, in the specified senReferenceFrame. If senReferenceFrame is null then J2000 should be assumed. The array element order is [xpos, ypos, zpos].
/// Example: /// Example: [4174.78541785946, -9969.69867853067, 40733.9284531208]
/// Constraints: No constraints specified.
func (rcv *SpaceEnvObservation_Full) SenPos(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(48))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *SpaceEnvObservation_Full) SenPosLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(48))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

/// Three element array, expressing the observing spacecraft/sensor position vector components at observation time, in kilometers, in the specified senReferenceFrame. If senReferenceFrame is null then J2000 should be assumed. The array element order is [xpos, ypos, zpos].
/// Example: /// Example: [4174.78541785946, -9969.69867853067, 40733.9284531208]
/// Constraints: No constraints specified.
/// Three element array, expressing the observing spacecraft/sensor velocity vector components at observation time, in kilometers/second, in the specified senReferenceFrame. If senReferenceFrame is null then J2000 should be assumed. The array element order is [xvel, yvel, zvel].
/// Example: /// Example: [0.727059797295872, 0.298037087322647, 0.00157064850994095]
/// Constraints: No constraints specified.
func (rcv *SpaceEnvObservation_Full) SenVel(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(50))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *SpaceEnvObservation_Full) SenVelLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(50))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

/// Three element array, expressing the observing spacecraft/sensor velocity vector components at observation time, in kilometers/second, in the specified senReferenceFrame. If senReferenceFrame is null then J2000 should be assumed. The array element order is [xvel, yvel, zvel].
/// Example: /// Example: [0.727059797295872, 0.298037087322647, 0.00157064850994095]
/// Constraints: No constraints specified.
/// The sensor measurement type of the observation data contained in this record.
/// Example: /// Example: ENERGETIC PARTICLES
/// Constraints: Minimum length = 0, Maximum length = 64
func (rcv *SpaceEnvObservation_Full) MeasType() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(52))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The sensor measurement type of the observation data contained in this record.
/// Example: /// Example: ENERGETIC PARTICLES
/// Constraints: Minimum length = 0, Maximum length = 64
/// The energy level bin of the sensor associated with this measurement.
/// Example: /// Example: 0500-700 keV
/// Constraints: Minimum length = 0, Maximum length = 64
func (rcv *SpaceEnvObservation_Full) SenEnergyLevel() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(54))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The energy level bin of the sensor associated with this measurement.
/// Example: /// Example: 0500-700 keV
/// Constraints: Minimum length = 0, Maximum length = 64
/// A user-defined name or ID of a set of observations, if applicable. Used for identifying multiple observation records as part of one observation set.
/// Example: /// Example: ECPOBSET-478125
/// Constraints: Minimum length = 0, Maximum length = 36
func (rcv *SpaceEnvObservation_Full) ObSetId() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(56))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// A user-defined name or ID of a set of observations, if applicable. Used for identifying multiple observation records as part of one observation set.
/// Example: /// Example: ECPOBSET-478125
/// Constraints: Minimum length = 0, Maximum length = 36
/// The particle type (AEROSOL, ALPHA PARTICLE, ATOM, DUST, ELECTRON, ION, MOLECULE, NEUTRON, POSITRON, PROTON) associated with this measurement.
/// Example: /// Example: PROTON
/// Constraints: Minimum length = 0, Maximum length = 24
func (rcv *SpaceEnvObservation_Full) ParticleType() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(58))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The particle type (AEROSOL, ALPHA PARTICLE, ATOM, DUST, ELECTRON, ION, MOLECULE, NEUTRON, POSITRON, PROTON) associated with this measurement.
/// Example: /// Example: PROTON
/// Constraints: Minimum length = 0, Maximum length = 24
/// Time of the observation, in ISO 8601 UTC format with millisecond precision.
/// Example: /// Example: 2023-06-07T14:17:39.653Z
/// Constraints: No constraints specified.
func (rcv *SpaceEnvObservation_Full) ObTime() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(60))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Time of the observation, in ISO 8601 UTC format with millisecond precision.
/// Example: /// Example: 2023-06-07T14:17:39.653Z
/// Constraints: No constraints specified.
/// A collection of individual space environment observations.
/// Example: /// Example: No example provided.
/// Constraints: No constraints specified.
func (rcv *SpaceEnvObservation_Full) SeoList(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(62))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *SpaceEnvObservation_Full) SeoListLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(62))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

/// A collection of individual space environment observations.
/// Example: /// Example: No example provided.
/// Constraints: No constraints specified.
/// The quality of the overall data contained in this record. The quality indicator value may vary among providers and may be a generalized statement (BAD, GOOD, UNCERTAIN, UNKNOWN) or a numeric value. Users should consult the data provider to verify the usage of the quality indicator.
/// Example: /// Example: GOOD
/// Constraints: Minimum length = 0, Maximum length = 16
func (rcv *SpaceEnvObservation_Full) Quality() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(64))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The quality of the overall data contained in this record. The quality indicator value may vary among providers and may be a generalized statement (BAD, GOOD, UNCERTAIN, UNKNOWN) or a numeric value. Users should consult the data provider to verify the usage of the quality indicator.
/// Example: /// Example: GOOD
/// Constraints: Minimum length = 0, Maximum length = 16
/// Descriptive or additional information associated with this observation record.
/// Example: /// Example: Observation Data Description Text
/// Constraints: Minimum length = 0, Maximum length = 512
func (rcv *SpaceEnvObservation_Full) Description() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(66))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Descriptive or additional information associated with this observation record.
/// Example: /// Example: Observation Data Description Text
/// Constraints: Minimum length = 0, Maximum length = 512
/// Optional source-provided and searchable metadata or descriptor of the data.
/// Example: /// Example: energetic charged particle
/// Constraints: Minimum length = 0, Maximum length = 64
func (rcv *SpaceEnvObservation_Full) Descriptor() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(68))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Optional source-provided and searchable metadata or descriptor of the data.
/// Example: /// Example: energetic charged particle
/// Constraints: Minimum length = 0, Maximum length = 64
/// Array of UDL record types (AIS, CONJUNCTION, DOA, ELSET, EO, ESID, GROUNDIMAGE, POI, MANEUVER, MTI, NOTIFICATION, RADAR, RF, SGI, SIGACT, SKYIMAGE, SPACEENVOB, SV, TRACK) that are related to this observation record. See the associated 'srcIds' array for the record UUIDs, positionally corresponding to the record types in this array. The 'srcTyps' and 'srcIds' arrays must match in size.
/// Example: /// Example: ['SPACEENVOB', 'SGI']
/// Constraints: No constraints specified.
func (rcv *SpaceEnvObservation_Full) SrcTyps(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(70))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *SpaceEnvObservation_Full) SrcTypsLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(70))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

/// Array of UDL record types (AIS, CONJUNCTION, DOA, ELSET, EO, ESID, GROUNDIMAGE, POI, MANEUVER, MTI, NOTIFICATION, RADAR, RF, SGI, SIGACT, SKYIMAGE, SPACEENVOB, SV, TRACK) that are related to this observation record. See the associated 'srcIds' array for the record UUIDs, positionally corresponding to the record types in this array. The 'srcTyps' and 'srcIds' arrays must match in size.
/// Example: /// Example: ['SPACEENVOB', 'SGI']
/// Constraints: No constraints specified.
/// Array of UUIDs of the UDL data records that are related to this observation record. See the associated 'srcTyps' array for specific types of data, positionally corresponding to the UUIDs in this array. The 'srcTyps' and 'srcIds' arrays must match in size. See the corresponding srcTyps array element of the data type of the UUID and use the appropriate API operation to retrieve that object.
/// Example: /// Example: ['615236d7-d464-4b8c-9b0b-45994e017d80', '8a38e3d6-35fd-4bda-b883-e3724e6bc6b9']
/// Constraints: No constraints specified.
func (rcv *SpaceEnvObservation_Full) SrcIds(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(72))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *SpaceEnvObservation_Full) SrcIdsLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(72))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

/// Array of UUIDs of the UDL data records that are related to this observation record. See the associated 'srcTyps' array for specific types of data, positionally corresponding to the UUIDs in this array. The 'srcTyps' and 'srcIds' arrays must match in size. See the corresponding srcTyps array element of the data type of the UUID and use the appropriate API operation to retrieve that object.
/// Example: /// Example: ['615236d7-d464-4b8c-9b0b-45994e017d80', '8a38e3d6-35fd-4bda-b883-e3724e6bc6b9']
/// Constraints: No constraints specified.
/// Time the row was created in the database, auto-populated by the system.
/// Example: /// Example: 2023-01-01T16:00:00.123Z
/// Constraints: No constraints specified.
func (rcv *SpaceEnvObservation_Full) CreatedAt() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(74))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Time the row was created in the database, auto-populated by the system.
/// Example: /// Example: 2023-01-01T16:00:00.123Z
/// Constraints: No constraints specified.
/// Application user who created the row in the database, auto-populated by the system.
/// Example: /// Example: some.user
/// Constraints: Minimum length = 1, Maximum length = 64
func (rcv *SpaceEnvObservation_Full) CreatedBy() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(76))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Application user who created the row in the database, auto-populated by the system.
/// Example: /// Example: some.user
/// Constraints: Minimum length = 1, Maximum length = 64
/// Source of the data.
/// Example: /// Example: Bluestaq
/// Constraints: Minimum length = 1, Maximum length = 36
func (rcv *SpaceEnvObservation_Full) Source() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(78))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Source of the data.
/// Example: /// Example: Bluestaq
/// Constraints: Minimum length = 1, Maximum length = 36
/// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
/// Example: /// Example: OPS1
/// Constraints: Minimum length = 0, Maximum length = 64
func (rcv *SpaceEnvObservation_Full) Origin() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(80))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
/// Example: /// Example: OPS1
/// Constraints: Minimum length = 0, Maximum length = 64
/// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
/// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
/// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
/// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
/// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
/// Example: /// Example: TEST
/// Constraints: Minimum length = 1, Maximum length = 32
func (rcv *SpaceEnvObservation_Full) DataMode() SpaceEnvObservation_Full_dataMode_Enum {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(82))
	if o != 0 {
		return SpaceEnvObservation_Full_dataMode_Enum(rcv._tab.GetInt8(o + rcv._tab.Pos))
	}
	return 0
}

/// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
/// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
/// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
/// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
/// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
/// Example: /// Example: TEST
/// Constraints: Minimum length = 1, Maximum length = 32
func (rcv *SpaceEnvObservation_Full) MutateDataMode(n SpaceEnvObservation_Full_dataMode_Enum) bool {
	return rcv._tab.MutateInt8Slot(82, int8(n))
}

/// The originating source network on which this record was created, auto-populated by the system.
/// Example: /// Example: ORIG
/// Constraints: Minimum length = 1, Maximum length = 32
func (rcv *SpaceEnvObservation_Full) OrigNetwork() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(84))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The originating source network on which this record was created, auto-populated by the system.
/// Example: /// Example: ORIG
/// Constraints: Minimum length = 1, Maximum length = 32
func SpaceEnvObservation_FullStart(builder *flatbuffers.Builder) {
	builder.StartObject(41)
}
func SpaceEnvObservation_FullAddId(builder *flatbuffers.Builder, id flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(id), 0)
}
func SpaceEnvObservation_FullAddClassificationMarking(builder *flatbuffers.Builder, classificationMarking flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(classificationMarking), 0)
}
func SpaceEnvObservation_FullAddMsgType(builder *flatbuffers.Builder, msgType flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(msgType), 0)
}
func SpaceEnvObservation_FullAddGenSystem(builder *flatbuffers.Builder, genSystem flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(3, flatbuffers.UOffsetT(genSystem), 0)
}
func SpaceEnvObservation_FullAddExternalId(builder *flatbuffers.Builder, externalId flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(4, flatbuffers.UOffsetT(externalId), 0)
}
func SpaceEnvObservation_FullAddDataType(builder *flatbuffers.Builder, dataType flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(5, flatbuffers.UOffsetT(dataType), 0)
}
func SpaceEnvObservation_FullAddGenTime(builder *flatbuffers.Builder, genTime flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(6, flatbuffers.UOffsetT(genTime), 0)
}
func SpaceEnvObservation_FullAddForecast(builder *flatbuffers.Builder, forecast bool) {
	builder.PrependBoolSlot(7, forecast, false)
}
func SpaceEnvObservation_FullAddDerived(builder *flatbuffers.Builder, derived bool) {
	builder.PrependBoolSlot(8, derived, false)
}
func SpaceEnvObservation_FullAddIdOnOrbit(builder *flatbuffers.Builder, idOnOrbit flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(9, flatbuffers.UOffsetT(idOnOrbit), 0)
}
func SpaceEnvObservation_FullAddSatNo(builder *flatbuffers.Builder, satNo int32) {
	builder.PrependInt32Slot(10, satNo, 0)
}
func SpaceEnvObservation_FullAddOrigObjectId(builder *flatbuffers.Builder, origObjectId flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(11, flatbuffers.UOffsetT(origObjectId), 0)
}
func SpaceEnvObservation_FullAddIdSensor(builder *flatbuffers.Builder, idSensor flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(12, flatbuffers.UOffsetT(idSensor), 0)
}
func SpaceEnvObservation_FullAddOrigSensorId(builder *flatbuffers.Builder, origSensorId flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(13, flatbuffers.UOffsetT(origSensorId), 0)
}
func SpaceEnvObservation_FullAddObservatoryType(builder *flatbuffers.Builder, observatoryType flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(14, flatbuffers.UOffsetT(observatoryType), 0)
}
func SpaceEnvObservation_FullAddObservatoryName(builder *flatbuffers.Builder, observatoryName flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(15, flatbuffers.UOffsetT(observatoryName), 0)
}
func SpaceEnvObservation_FullAddObservatoryNotes(builder *flatbuffers.Builder, observatoryNotes flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(16, flatbuffers.UOffsetT(observatoryNotes), 0)
}
func SpaceEnvObservation_FullAddInstrumentType(builder *flatbuffers.Builder, instrumentType flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(17, flatbuffers.UOffsetT(instrumentType), 0)
}
func SpaceEnvObservation_FullAddLat(builder *flatbuffers.Builder, lat float64) {
	builder.PrependFloat64Slot(18, lat, 0.0)
}
func SpaceEnvObservation_FullAddLon(builder *flatbuffers.Builder, lon float64) {
	builder.PrependFloat64Slot(19, lon, 0.0)
}
func SpaceEnvObservation_FullAddAlt(builder *flatbuffers.Builder, alt float64) {
	builder.PrependFloat64Slot(20, alt, 0.0)
}
func SpaceEnvObservation_FullAddSenReferenceFrame(builder *flatbuffers.Builder, senReferenceFrame SpaceEnvObservation_Full_senReferenceFrame_Enum) {
	builder.PrependInt8Slot(21, int8(senReferenceFrame), 0)
}
func SpaceEnvObservation_FullAddSenPos(builder *flatbuffers.Builder, senPos flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(22, flatbuffers.UOffsetT(senPos), 0)
}
func SpaceEnvObservation_FullStartSenPosVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func SpaceEnvObservation_FullAddSenVel(builder *flatbuffers.Builder, senVel flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(23, flatbuffers.UOffsetT(senVel), 0)
}
func SpaceEnvObservation_FullStartSenVelVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func SpaceEnvObservation_FullAddMeasType(builder *flatbuffers.Builder, measType flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(24, flatbuffers.UOffsetT(measType), 0)
}
func SpaceEnvObservation_FullAddSenEnergyLevel(builder *flatbuffers.Builder, senEnergyLevel flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(25, flatbuffers.UOffsetT(senEnergyLevel), 0)
}
func SpaceEnvObservation_FullAddObSetId(builder *flatbuffers.Builder, obSetId flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(26, flatbuffers.UOffsetT(obSetId), 0)
}
func SpaceEnvObservation_FullAddParticleType(builder *flatbuffers.Builder, particleType flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(27, flatbuffers.UOffsetT(particleType), 0)
}
func SpaceEnvObservation_FullAddObTime(builder *flatbuffers.Builder, obTime flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(28, flatbuffers.UOffsetT(obTime), 0)
}
func SpaceEnvObservation_FullAddSeoList(builder *flatbuffers.Builder, seoList flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(29, flatbuffers.UOffsetT(seoList), 0)
}
func SpaceEnvObservation_FullStartSeoListVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func SpaceEnvObservation_FullAddQuality(builder *flatbuffers.Builder, quality flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(30, flatbuffers.UOffsetT(quality), 0)
}
func SpaceEnvObservation_FullAddDescription(builder *flatbuffers.Builder, description flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(31, flatbuffers.UOffsetT(description), 0)
}
func SpaceEnvObservation_FullAddDescriptor(builder *flatbuffers.Builder, descriptor flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(32, flatbuffers.UOffsetT(descriptor), 0)
}
func SpaceEnvObservation_FullAddSrcTyps(builder *flatbuffers.Builder, srcTyps flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(33, flatbuffers.UOffsetT(srcTyps), 0)
}
func SpaceEnvObservation_FullStartSrcTypsVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func SpaceEnvObservation_FullAddSrcIds(builder *flatbuffers.Builder, srcIds flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(34, flatbuffers.UOffsetT(srcIds), 0)
}
func SpaceEnvObservation_FullStartSrcIdsVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func SpaceEnvObservation_FullAddCreatedAt(builder *flatbuffers.Builder, createdAt flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(35, flatbuffers.UOffsetT(createdAt), 0)
}
func SpaceEnvObservation_FullAddCreatedBy(builder *flatbuffers.Builder, createdBy flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(36, flatbuffers.UOffsetT(createdBy), 0)
}
func SpaceEnvObservation_FullAddSource(builder *flatbuffers.Builder, source flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(37, flatbuffers.UOffsetT(source), 0)
}
func SpaceEnvObservation_FullAddOrigin(builder *flatbuffers.Builder, origin flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(38, flatbuffers.UOffsetT(origin), 0)
}
func SpaceEnvObservation_FullAddDataMode(builder *flatbuffers.Builder, dataMode SpaceEnvObservation_Full_dataMode_Enum) {
	builder.PrependInt8Slot(39, int8(dataMode), 0)
}
func SpaceEnvObservation_FullAddOrigNetwork(builder *flatbuffers.Builder, origNetwork flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(40, flatbuffers.UOffsetT(origNetwork), 0)
}
func SpaceEnvObservation_FullEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
