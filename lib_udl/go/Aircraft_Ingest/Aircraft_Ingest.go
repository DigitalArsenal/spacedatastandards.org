// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package Aircraft_Ingest

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

/// /// General aircraft designation, characteristics, and capabilities. The aircraft schema contains static data of specific aircraft, including tail number, cruise speed, max speed, and minimum required runway length, etc.
type Aircraft_Ingest struct {
	_tab flatbuffers.Table
}

const Aircraft_IngestIdentifier = "AIRC"

func GetRootAsAircraft_Ingest(buf []byte, offset flatbuffers.UOffsetT) *Aircraft_Ingest {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &Aircraft_Ingest{}
	x.Init(buf, n+offset)
	return x
}

func FinishAircraft_IngestBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	identifierBytes := []byte(Aircraft_IngestIdentifier)
	builder.FinishWithFileIdentifier(offset, identifierBytes)
}

func Aircraft_IngestBufferHasIdentifier(buf []byte) bool {
	return flatbuffers.BufferHasIdentifier(buf, Aircraft_IngestIdentifier)
}

func GetSizePrefixedRootAsAircraft_Ingest(buf []byte, offset flatbuffers.UOffsetT) *Aircraft_Ingest {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &Aircraft_Ingest{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedAircraft_IngestBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	identifierBytes := []byte(Aircraft_IngestIdentifier)
	builder.FinishSizePrefixedWithFileIdentifier(offset, identifierBytes)
}

func SizePrefixedAircraft_IngestBufferHasIdentifier(buf []byte) bool {
	return flatbuffers.SizePrefixedBufferHasIdentifier(buf, Aircraft_IngestIdentifier)
}

func (rcv *Aircraft_Ingest) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *Aircraft_Ingest) Table() flatbuffers.Table {
	return rcv._tab
}

/// Unique identifier of the record, auto-generated by the system.
/// Example: /// Example: 0167f577-e06c-358e-85aa-0a07a730bdd0
/// Constraints: Minimum length = 1, Maximum length = 36
func (rcv *Aircraft_Ingest) Id() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Unique identifier of the record, auto-generated by the system.
/// Example: /// Example: 0167f577-e06c-358e-85aa-0a07a730bdd0
/// Constraints: Minimum length = 1, Maximum length = 36
/// Classification marking of the data in IC/CAPCO Portion-marked format.
/// Example: /// Example: U
/// Constraints: Minimum length = 1, Maximum length = 128
func (rcv *Aircraft_Ingest) ClassificationMarking() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Classification marking of the data in IC/CAPCO Portion-marked format.
/// Example: /// Example: U
/// Constraints: Minimum length = 1, Maximum length = 128
/// No description provided.
/// Example: /// Example: No example provided.
/// Constraints: No constraints specified.
func (rcv *Aircraft_Ingest) Entity() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// No description provided.
/// Example: /// Example: No example provided.
/// Constraints: No constraints specified.
/// ID of the parent entity for this aircraft.
/// Example: /// Example: 0167f577-e06c-358e-85aa-0a07a730bdd0
/// Constraints: Minimum length = 0, Maximum length = 36
func (rcv *Aircraft_Ingest) IdEntity() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// ID of the parent entity for this aircraft.
/// Example: /// Example: 0167f577-e06c-358e-85aa-0a07a730bdd0
/// Constraints: Minimum length = 0, Maximum length = 36
/// The aircraft Model Design Series (MDS) designation (e.g. E-2C HAWKEYE, F-15 EAGLE, KC-130 HERCULES, etc.) of this aircraft.  Intended as, but not constrained to, MIL-STD-6016 environment dependent specific type designations.
/// Example: /// Example: E-2C HAWKEYE
/// Constraints: Minimum length = 1, Maximum length = 128
func (rcv *Aircraft_Ingest) AircraftMds() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The aircraft Model Design Series (MDS) designation (e.g. E-2C HAWKEYE, F-15 EAGLE, KC-130 HERCULES, etc.) of this aircraft.  Intended as, but not constrained to, MIL-STD-6016 environment dependent specific type designations.
/// Example: /// Example: E-2C HAWKEYE
/// Constraints: Minimum length = 1, Maximum length = 128
/// The tail number of this aircraft.
/// Example: /// Example: N702JG
/// Constraints: Minimum length = 0, Maximum length = 16
func (rcv *Aircraft_Ingest) TailNumber() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The tail number of this aircraft.
/// Example: /// Example: N702JG
/// Constraints: Minimum length = 0, Maximum length = 16
/// Full serial number of the aircraft.
/// Example: /// Example: 7007187
/// Constraints: Minimum length = 0, Maximum length = 32
func (rcv *Aircraft_Ingest) SerialNumber() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Full serial number of the aircraft.
/// Example: /// Example: 7007187
/// Constraints: Minimum length = 0, Maximum length = 32
/// The wing or unit that owns the aircraft.
/// Example: /// Example: 437AW
/// Constraints: Minimum length = 0, Maximum length = 32
func (rcv *Aircraft_Ingest) Owner() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(18))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The wing or unit that owns the aircraft.
/// Example: /// Example: 437AW
/// Constraints: Minimum length = 0, Maximum length = 32
/// The Air Force major command (MAJCOM) overseeing the aircraft.
/// Example: /// Example: HQACC
/// Constraints: Minimum length = 0, Maximum length = 16
func (rcv *Aircraft_Ingest) Command() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(20))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The Air Force major command (MAJCOM) overseeing the aircraft.
/// Example: /// Example: HQACC
/// Constraints: Minimum length = 0, Maximum length = 16
/// The category of aircraft (e.g. M = Military, C = Commercial).
/// Example: /// Example: M
/// Constraints: Minimum length = 0, Maximum length = 1
func (rcv *Aircraft_Ingest) Category() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(22))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The category of aircraft (e.g. M = Military, C = Commercial).
/// Example: /// Example: M
/// Constraints: Minimum length = 0, Maximum length = 1
/// Military data network data transfer device ID for this aircraft.
/// Example: /// Example: 005
/// Constraints: Minimum length = 0, Maximum length = 16
func (rcv *Aircraft_Ingest) Dtd() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(24))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Military data network data transfer device ID for this aircraft.
/// Example: /// Example: 005
/// Constraints: Minimum length = 0, Maximum length = 16
/// The cruise speed of the aircraft, in kilometers/hour.
/// Example: /// Example: 915
/// Constraints: No constraints specified.
func (rcv *Aircraft_Ingest) CruiseSpeed() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(26))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// The cruise speed of the aircraft, in kilometers/hour.
/// Example: /// Example: 915
/// Constraints: No constraints specified.
func (rcv *Aircraft_Ingest) MutateCruiseSpeed(n float64) bool {
	return rcv._tab.MutateFloat64Slot(26, n)
}

/// The maximum air speed of the aircraft, in kilometers/hour.
/// Example: /// Example: 2655.1
/// Constraints: No constraints specified.
func (rcv *Aircraft_Ingest) MaxSpeed() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(28))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// The maximum air speed of the aircraft, in kilometers/hour.
/// Example: /// Example: 2655.1
/// Constraints: No constraints specified.
func (rcv *Aircraft_Ingest) MutateMaxSpeed(n float64) bool {
	return rcv._tab.MutateFloat64Slot(28, n)
}

/// The minimum length of runway required to land this aircraft, in meters. Note: The corresponding equivalent field is not converted by the UDL and may or may not be supplied by the provider. The provider/consumer is responsible for all unit conversions.
/// Example: /// Example: 1000
/// Constraints: No constraints specified.
func (rcv *Aircraft_Ingest) MinReqRunwayM() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(30))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

/// The minimum length of runway required to land this aircraft, in meters. Note: The corresponding equivalent field is not converted by the UDL and may or may not be supplied by the provider. The provider/consumer is responsible for all unit conversions.
/// Example: /// Example: 1000
/// Constraints: No constraints specified.
func (rcv *Aircraft_Ingest) MutateMinReqRunwayM(n int32) bool {
	return rcv._tab.MutateInt32Slot(30, n)
}

/// The minimum length of runway required to land this aircraft, in feet. Note: The corresponding equivalent field is not converted by the UDL and may or may not be supplied by the provider. The provider/consumer is responsible for all unit conversions.
/// Example: /// Example: 3000
/// Constraints: No constraints specified.
func (rcv *Aircraft_Ingest) MinReqRunwayFt() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(32))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

/// The minimum length of runway required to land this aircraft, in feet. Note: The corresponding equivalent field is not converted by the UDL and may or may not be supplied by the provider. The provider/consumer is responsible for all unit conversions.
/// Example: /// Example: 3000
/// Constraints: No constraints specified.
func (rcv *Aircraft_Ingest) MutateMinReqRunwayFt(n int32) bool {
	return rcv._tab.MutateInt32Slot(32, n)
}

/// The nominal turnaround time for this aircraft, in minutes.
/// Example: /// Example: 500
/// Constraints: No constraints specified.
func (rcv *Aircraft_Ingest) NominalTatime() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(34))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

/// The nominal turnaround time for this aircraft, in minutes.
/// Example: /// Example: 500
/// Constraints: No constraints specified.
func (rcv *Aircraft_Ingest) MutateNominalTatime(n int32) bool {
	return rcv._tab.MutateInt32Slot(34, n)
}

/// Optional notes/comments for this aircraft.
/// Example: /// Example: Notes for this aircraft
/// Constraints: Minimum length = 0, Maximum length = 1024
func (rcv *Aircraft_Ingest) Notes() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(36))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Optional notes/comments for this aircraft.
/// Example: /// Example: Notes for this aircraft
/// Constraints: Minimum length = 0, Maximum length = 1024
/// Time the row was created in the database, auto-populated by the system.
/// Example: /// Example: 2018-01-01T16:00:00.123Z
/// Constraints: No constraints specified.
func (rcv *Aircraft_Ingest) CreatedAt() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(38))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Time the row was created in the database, auto-populated by the system.
/// Example: /// Example: 2018-01-01T16:00:00.123Z
/// Constraints: No constraints specified.
/// Application user who created the row in the database, auto-populated by the system.
/// Example: /// Example: some.user
/// Constraints: Minimum length = 1, Maximum length = 64
func (rcv *Aircraft_Ingest) CreatedBy() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(40))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Application user who created the row in the database, auto-populated by the system.
/// Example: /// Example: some.user
/// Constraints: Minimum length = 1, Maximum length = 64
/// The source data library from which this record was received. This could be a remote or tactical UDL or another data library. If null, the record should be assumed to have originated from the primary Enterprise UDL.
/// Example: /// Example: AXE
/// Constraints: Minimum length = 0, Maximum length = 64
func (rcv *Aircraft_Ingest) SourceDl() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(42))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The source data library from which this record was received. This could be a remote or tactical UDL or another data library. If null, the record should be assumed to have originated from the primary Enterprise UDL.
/// Example: /// Example: AXE
/// Constraints: Minimum length = 0, Maximum length = 64
/// Source of the data.
/// Example: /// Example: Bluestaq
/// Constraints: Minimum length = 1, Maximum length = 64
func (rcv *Aircraft_Ingest) Source() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(44))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Source of the data.
/// Example: /// Example: Bluestaq
/// Constraints: Minimum length = 1, Maximum length = 64
/// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
/// Example: /// Example: THIRD_PARTY_DATASOURCE
/// Constraints: Minimum length = 0, Maximum length = 64
func (rcv *Aircraft_Ingest) Origin() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(46))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
/// Example: /// Example: THIRD_PARTY_DATASOURCE
/// Constraints: Minimum length = 0, Maximum length = 64
/// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
/// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
/// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
/// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
/// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
/// Example: /// Example: TEST
/// Constraints: Minimum length = 1, Maximum length = 64
func (rcv *Aircraft_Ingest) DataMode() Aircraft_Ingest_dataMode_Enum {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(48))
	if o != 0 {
		return Aircraft_Ingest_dataMode_Enum(rcv._tab.GetInt8(o + rcv._tab.Pos))
	}
	return 0
}

/// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
/// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
/// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
/// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
/// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
/// Example: /// Example: TEST
/// Constraints: Minimum length = 1, Maximum length = 64
func (rcv *Aircraft_Ingest) MutateDataMode(n Aircraft_Ingest_dataMode_Enum) bool {
	return rcv._tab.MutateInt8Slot(48, int8(n))
}

/// The originating source network on which this record was created, auto-populated by the system.
/// Example: /// Example: OPS1
/// Constraints: Minimum length = 1, Maximum length = 32
func (rcv *Aircraft_Ingest) OrigNetwork() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(50))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The originating source network on which this record was created, auto-populated by the system.
/// Example: /// Example: OPS1
/// Constraints: Minimum length = 1, Maximum length = 32
func Aircraft_IngestStart(builder *flatbuffers.Builder) {
	builder.StartObject(24)
}
func Aircraft_IngestAddId(builder *flatbuffers.Builder, id flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(id), 0)
}
func Aircraft_IngestAddClassificationMarking(builder *flatbuffers.Builder, classificationMarking flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(classificationMarking), 0)
}
func Aircraft_IngestAddEntity(builder *flatbuffers.Builder, entity flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(entity), 0)
}
func Aircraft_IngestAddIdEntity(builder *flatbuffers.Builder, idEntity flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(3, flatbuffers.UOffsetT(idEntity), 0)
}
func Aircraft_IngestAddAircraftMds(builder *flatbuffers.Builder, aircraftMds flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(4, flatbuffers.UOffsetT(aircraftMds), 0)
}
func Aircraft_IngestAddTailNumber(builder *flatbuffers.Builder, tailNumber flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(5, flatbuffers.UOffsetT(tailNumber), 0)
}
func Aircraft_IngestAddSerialNumber(builder *flatbuffers.Builder, serialNumber flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(6, flatbuffers.UOffsetT(serialNumber), 0)
}
func Aircraft_IngestAddOwner(builder *flatbuffers.Builder, owner flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(7, flatbuffers.UOffsetT(owner), 0)
}
func Aircraft_IngestAddCommand(builder *flatbuffers.Builder, command flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(8, flatbuffers.UOffsetT(command), 0)
}
func Aircraft_IngestAddCategory(builder *flatbuffers.Builder, category flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(9, flatbuffers.UOffsetT(category), 0)
}
func Aircraft_IngestAddDtd(builder *flatbuffers.Builder, dtd flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(10, flatbuffers.UOffsetT(dtd), 0)
}
func Aircraft_IngestAddCruiseSpeed(builder *flatbuffers.Builder, cruiseSpeed float64) {
	builder.PrependFloat64Slot(11, cruiseSpeed, 0.0)
}
func Aircraft_IngestAddMaxSpeed(builder *flatbuffers.Builder, maxSpeed float64) {
	builder.PrependFloat64Slot(12, maxSpeed, 0.0)
}
func Aircraft_IngestAddMinReqRunwayM(builder *flatbuffers.Builder, minReqRunwayM int32) {
	builder.PrependInt32Slot(13, minReqRunwayM, 0)
}
func Aircraft_IngestAddMinReqRunwayFt(builder *flatbuffers.Builder, minReqRunwayFt int32) {
	builder.PrependInt32Slot(14, minReqRunwayFt, 0)
}
func Aircraft_IngestAddNominalTatime(builder *flatbuffers.Builder, nominalTatime int32) {
	builder.PrependInt32Slot(15, nominalTatime, 0)
}
func Aircraft_IngestAddNotes(builder *flatbuffers.Builder, notes flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(16, flatbuffers.UOffsetT(notes), 0)
}
func Aircraft_IngestAddCreatedAt(builder *flatbuffers.Builder, createdAt flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(17, flatbuffers.UOffsetT(createdAt), 0)
}
func Aircraft_IngestAddCreatedBy(builder *flatbuffers.Builder, createdBy flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(18, flatbuffers.UOffsetT(createdBy), 0)
}
func Aircraft_IngestAddSourceDl(builder *flatbuffers.Builder, sourceDl flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(19, flatbuffers.UOffsetT(sourceDl), 0)
}
func Aircraft_IngestAddSource(builder *flatbuffers.Builder, source flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(20, flatbuffers.UOffsetT(source), 0)
}
func Aircraft_IngestAddOrigin(builder *flatbuffers.Builder, origin flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(21, flatbuffers.UOffsetT(origin), 0)
}
func Aircraft_IngestAddDataMode(builder *flatbuffers.Builder, dataMode Aircraft_Ingest_dataMode_Enum) {
	builder.PrependInt8Slot(22, int8(dataMode), 0)
}
func Aircraft_IngestAddOrigNetwork(builder *flatbuffers.Builder, origNetwork flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(23, flatbuffers.UOffsetT(origNetwork), 0)
}
func Aircraft_IngestEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
