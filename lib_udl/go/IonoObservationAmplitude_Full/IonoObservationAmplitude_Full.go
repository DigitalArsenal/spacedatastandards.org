// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package IonoObservationAmplitude_Full

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

/// /// Multi-dimensional array with the same dimensions as power plus one additional dimension antenna_element. This variable is enabled for post-process polarization or antenna array determination. Can be combined with phase to create a phasors and subsequently enable post-processing of polarization and/or antenna array determination.
type IonoObservationAmplitude_Full struct {
	_tab flatbuffers.Table
}

const IonoObservationAmplitude_FullIdentifier = "IONO"

func GetRootAsIonoObservationAmplitude_Full(buf []byte, offset flatbuffers.UOffsetT) *IonoObservationAmplitude_Full {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &IonoObservationAmplitude_Full{}
	x.Init(buf, n+offset)
	return x
}

func FinishIonoObservationAmplitude_FullBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	identifierBytes := []byte(IonoObservationAmplitude_FullIdentifier)
	builder.FinishWithFileIdentifier(offset, identifierBytes)
}

func IonoObservationAmplitude_FullBufferHasIdentifier(buf []byte) bool {
	return flatbuffers.BufferHasIdentifier(buf, IonoObservationAmplitude_FullIdentifier)
}

func GetSizePrefixedRootAsIonoObservationAmplitude_Full(buf []byte, offset flatbuffers.UOffsetT) *IonoObservationAmplitude_Full {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &IonoObservationAmplitude_Full{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedIonoObservationAmplitude_FullBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	identifierBytes := []byte(IonoObservationAmplitude_FullIdentifier)
	builder.FinishSizePrefixedWithFileIdentifier(offset, identifierBytes)
}

func SizePrefixedIonoObservationAmplitude_FullBufferHasIdentifier(buf []byte) bool {
	return flatbuffers.SizePrefixedBufferHasIdentifier(buf, IonoObservationAmplitude_FullIdentifier)
}

func (rcv *IonoObservationAmplitude_Full) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *IonoObservationAmplitude_Full) Table() flatbuffers.Table {
	return rcv._tab
}

/// Notes for the amplitude data.
/// Example: /// Example: NOTES
/// Constraints: Minimum length = 0, Maximum length = 512
func (rcv *IonoObservationAmplitude_Full) Notes() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Notes for the amplitude data.
/// Example: /// Example: NOTES
/// Constraints: Minimum length = 0, Maximum length = 512
/// Array of integers for amplitude dimensions.
/// Example: /// Example: [4, 5]
/// Constraints: No constraints specified.
func (rcv *IonoObservationAmplitude_Full) Dimensions(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *IonoObservationAmplitude_Full) DimensionsLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

/// Array of integers for amplitude dimensions.
/// Example: /// Example: [4, 5]
/// Constraints: No constraints specified.
/// Array of names for dimensions.
/// Example: /// Example: ['NAME1', 'NAME2']
/// Constraints: No constraints specified.
func (rcv *IonoObservationAmplitude_Full) DimensionName(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *IonoObservationAmplitude_Full) DimensionNameLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

/// Array of names for dimensions.
/// Example: /// Example: ['NAME1', 'NAME2']
/// Constraints: No constraints specified.
/// Array of amplitude data.
/// Example: /// Example: [[[[[[[0.02, 0.034]]]]]]]
/// Constraints: No constraints specified.
func (rcv *IonoObservationAmplitude_Full) Data(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *IonoObservationAmplitude_Full) DataLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

/// Array of amplitude data.
/// Example: /// Example: [[[[[[[0.02, 0.034]]]]]]]
/// Constraints: No constraints specified.
func IonoObservationAmplitude_FullStart(builder *flatbuffers.Builder) {
	builder.StartObject(4)
}
func IonoObservationAmplitude_FullAddNotes(builder *flatbuffers.Builder, notes flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(notes), 0)
}
func IonoObservationAmplitude_FullAddDimensions(builder *flatbuffers.Builder, dimensions flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(dimensions), 0)
}
func IonoObservationAmplitude_FullStartDimensionsVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func IonoObservationAmplitude_FullAddDimensionName(builder *flatbuffers.Builder, dimensionName flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(dimensionName), 0)
}
func IonoObservationAmplitude_FullStartDimensionNameVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func IonoObservationAmplitude_FullAddData(builder *flatbuffers.Builder, data flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(3, flatbuffers.UOffsetT(data), 0)
}
func IonoObservationAmplitude_FullStartDataVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func IonoObservationAmplitude_FullEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
