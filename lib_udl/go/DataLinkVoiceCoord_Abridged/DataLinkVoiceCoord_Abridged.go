// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package DataLinkVoiceCoord_Abridged

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

/// /// Collection of information regarding the function, frequency, and priority of interface control and coordination nets for this data link message. There can be 1 to many DataLinkVoiceCoord collections within the datalink service.
type DataLinkVoiceCoord_Abridged struct {
	_tab flatbuffers.Table
}

const DataLinkVoiceCoord_AbridgedIdentifier = "DATA"

func GetRootAsDataLinkVoiceCoord_Abridged(buf []byte, offset flatbuffers.UOffsetT) *DataLinkVoiceCoord_Abridged {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &DataLinkVoiceCoord_Abridged{}
	x.Init(buf, n+offset)
	return x
}

func FinishDataLinkVoiceCoord_AbridgedBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	identifierBytes := []byte(DataLinkVoiceCoord_AbridgedIdentifier)
	builder.FinishWithFileIdentifier(offset, identifierBytes)
}

func DataLinkVoiceCoord_AbridgedBufferHasIdentifier(buf []byte) bool {
	return flatbuffers.BufferHasIdentifier(buf, DataLinkVoiceCoord_AbridgedIdentifier)
}

func GetSizePrefixedRootAsDataLinkVoiceCoord_Abridged(buf []byte, offset flatbuffers.UOffsetT) *DataLinkVoiceCoord_Abridged {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &DataLinkVoiceCoord_Abridged{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedDataLinkVoiceCoord_AbridgedBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	identifierBytes := []byte(DataLinkVoiceCoord_AbridgedIdentifier)
	builder.FinishSizePrefixedWithFileIdentifier(offset, identifierBytes)
}

func SizePrefixedDataLinkVoiceCoord_AbridgedBufferHasIdentifier(buf []byte) bool {
	return flatbuffers.SizePrefixedBufferHasIdentifier(buf, DataLinkVoiceCoord_AbridgedIdentifier)
}

func (rcv *DataLinkVoiceCoord_Abridged) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *DataLinkVoiceCoord_Abridged) Table() flatbuffers.Table {
	return rcv._tab
}

/// Designator assigned to a voice interface control and coordination net for this data link message (e.g. ADCCN, DCN, VPN, etc.).
/// Example: /// Example: VPN
/// Constraints: Minimum length = 0, Maximum length = 5
func (rcv *DataLinkVoiceCoord_Abridged) VoiceNetDes() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Designator assigned to a voice interface control and coordination net for this data link message (e.g. ADCCN, DCN, VPN, etc.).
/// Example: /// Example: VPN
/// Constraints: Minimum length = 0, Maximum length = 5
/// Designator used in nonsecure communications to refer to a radio frequency for this data link message.
/// Example: /// Example: ST300A
/// Constraints: Minimum length = 0, Maximum length = 8
func (rcv *DataLinkVoiceCoord_Abridged) FreqDes() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Designator used in nonsecure communications to refer to a radio frequency for this data link message.
/// Example: /// Example: ST300A
/// Constraints: Minimum length = 0, Maximum length = 8
/// Priority of a communication circuit, channel or frequency for this data link message such as P (Primary), M (Monitor), etc.
/// Example: /// Example: P
/// Constraints: Minimum length = 0, Maximum length = 1
func (rcv *DataLinkVoiceCoord_Abridged) CommPri() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Priority of a communication circuit, channel or frequency for this data link message such as P (Primary), M (Monitor), etc.
/// Example: /// Example: P
/// Constraints: Minimum length = 0, Maximum length = 1
/// Array of telephone numbers or contact frequencies used for interface control for this data link message.
/// Example: /// Example: ['TEL:804-555-4142', 'TEL:804-867-5309']
/// Constraints: No constraints specified.
func (rcv *DataLinkVoiceCoord_Abridged) TeleFreqNums(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *DataLinkVoiceCoord_Abridged) TeleFreqNumsLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

/// Array of telephone numbers or contact frequencies used for interface control for this data link message.
/// Example: /// Example: ['TEL:804-555-4142', 'TEL:804-867-5309']
/// Constraints: No constraints specified.
func DataLinkVoiceCoord_AbridgedStart(builder *flatbuffers.Builder) {
	builder.StartObject(4)
}
func DataLinkVoiceCoord_AbridgedAddVoiceNetDes(builder *flatbuffers.Builder, voiceNetDes flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(voiceNetDes), 0)
}
func DataLinkVoiceCoord_AbridgedAddFreqDes(builder *flatbuffers.Builder, freqDes flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(freqDes), 0)
}
func DataLinkVoiceCoord_AbridgedAddCommPri(builder *flatbuffers.Builder, commPri flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(commPri), 0)
}
func DataLinkVoiceCoord_AbridgedAddTeleFreqNums(builder *flatbuffers.Builder, teleFreqNums flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(3, flatbuffers.UOffsetT(teleFreqNums), 0)
}
func DataLinkVoiceCoord_AbridgedStartTeleFreqNumsVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func DataLinkVoiceCoord_AbridgedEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
