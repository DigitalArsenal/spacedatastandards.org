// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package IonoObservationAntennaElementPosition_Abridged

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

/// /// For phased arrays, a 2D array. 1st dimension spans the dimension antenna_element (see phase or amplitude). 2nd dimension spans 3 (x, y, z) Cartesian coordinates.
type IonoObservationAntennaElementPosition_Abridged struct {
	_tab flatbuffers.Table
}

const IonoObservationAntennaElementPosition_AbridgedIdentifier = "IONO"

func GetRootAsIonoObservationAntennaElementPosition_Abridged(buf []byte, offset flatbuffers.UOffsetT) *IonoObservationAntennaElementPosition_Abridged {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &IonoObservationAntennaElementPosition_Abridged{}
	x.Init(buf, n+offset)
	return x
}

func FinishIonoObservationAntennaElementPosition_AbridgedBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	identifierBytes := []byte(IonoObservationAntennaElementPosition_AbridgedIdentifier)
	builder.FinishWithFileIdentifier(offset, identifierBytes)
}

func IonoObservationAntennaElementPosition_AbridgedBufferHasIdentifier(buf []byte) bool {
	return flatbuffers.BufferHasIdentifier(buf, IonoObservationAntennaElementPosition_AbridgedIdentifier)
}

func GetSizePrefixedRootAsIonoObservationAntennaElementPosition_Abridged(buf []byte, offset flatbuffers.UOffsetT) *IonoObservationAntennaElementPosition_Abridged {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &IonoObservationAntennaElementPosition_Abridged{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedIonoObservationAntennaElementPosition_AbridgedBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	identifierBytes := []byte(IonoObservationAntennaElementPosition_AbridgedIdentifier)
	builder.FinishSizePrefixedWithFileIdentifier(offset, identifierBytes)
}

func SizePrefixedIonoObservationAntennaElementPosition_AbridgedBufferHasIdentifier(buf []byte) bool {
	return flatbuffers.SizePrefixedBufferHasIdentifier(buf, IonoObservationAntennaElementPosition_AbridgedIdentifier)
}

func (rcv *IonoObservationAntennaElementPosition_Abridged) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *IonoObservationAntennaElementPosition_Abridged) Table() flatbuffers.Table {
	return rcv._tab
}

/// Array of integers of the antenna_element dimensions.
/// Example: /// Example: [3, 4]
/// Constraints: No constraints specified.
func (rcv *IonoObservationAntennaElementPosition_Abridged) Dimensions(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *IonoObservationAntennaElementPosition_Abridged) DimensionsLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

/// Array of integers of the antenna_element dimensions.
/// Example: /// Example: [3, 4]
/// Constraints: No constraints specified.
/// Array of names for dimensions.
/// Example: /// Example: ['NAME1', 'NAME2']
/// Constraints: No constraints specified.
func (rcv *IonoObservationAntennaElementPosition_Abridged) DimensionName(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *IonoObservationAntennaElementPosition_Abridged) DimensionNameLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

/// Array of names for dimensions.
/// Example: /// Example: ['NAME1', 'NAME2']
/// Constraints: No constraints specified.
/// Array of 3-element tuples (x,y,z) in km.
/// Example: /// Example: [[1.23, 0.123]]
/// Constraints: No constraints specified.
func (rcv *IonoObservationAntennaElementPosition_Abridged) Data(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *IonoObservationAntennaElementPosition_Abridged) DataLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

/// Array of 3-element tuples (x,y,z) in km.
/// Example: /// Example: [[1.23, 0.123]]
/// Constraints: No constraints specified.
func IonoObservationAntennaElementPosition_AbridgedStart(builder *flatbuffers.Builder) {
	builder.StartObject(3)
}
func IonoObservationAntennaElementPosition_AbridgedAddDimensions(builder *flatbuffers.Builder, dimensions flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(dimensions), 0)
}
func IonoObservationAntennaElementPosition_AbridgedStartDimensionsVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func IonoObservationAntennaElementPosition_AbridgedAddDimensionName(builder *flatbuffers.Builder, dimensionName flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(dimensionName), 0)
}
func IonoObservationAntennaElementPosition_AbridgedStartDimensionNameVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func IonoObservationAntennaElementPosition_AbridgedAddData(builder *flatbuffers.Builder, data flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(data), 0)
}
func IonoObservationAntennaElementPosition_AbridgedStartDataVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func IonoObservationAntennaElementPosition_AbridgedEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
