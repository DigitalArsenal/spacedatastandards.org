// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package Hazard_Full

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

/// /// Hazard contains information concerning the exposure of a geographic area to a Chemical, Biological, Radiological, or Nuclear (CBRN) contaminant. The Hazard schema includes the detection time and type of contamination as well as optional information regarding specific material properties, the extent of contamination, and identification of affected regions.
type Hazard_Full struct {
	_tab flatbuffers.Table
}

const Hazard_FullIdentifier = "HAZA"

func GetRootAsHazard_Full(buf []byte, offset flatbuffers.UOffsetT) *Hazard_Full {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &Hazard_Full{}
	x.Init(buf, n+offset)
	return x
}

func FinishHazard_FullBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	identifierBytes := []byte(Hazard_FullIdentifier)
	builder.FinishWithFileIdentifier(offset, identifierBytes)
}

func Hazard_FullBufferHasIdentifier(buf []byte) bool {
	return flatbuffers.BufferHasIdentifier(buf, Hazard_FullIdentifier)
}

func GetSizePrefixedRootAsHazard_Full(buf []byte, offset flatbuffers.UOffsetT) *Hazard_Full {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &Hazard_Full{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedHazard_FullBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	identifierBytes := []byte(Hazard_FullIdentifier)
	builder.FinishSizePrefixedWithFileIdentifier(offset, identifierBytes)
}

func SizePrefixedHazard_FullBufferHasIdentifier(buf []byte) bool {
	return flatbuffers.SizePrefixedBufferHasIdentifier(buf, Hazard_FullIdentifier)
}

func (rcv *Hazard_Full) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *Hazard_Full) Table() flatbuffers.Table {
	return rcv._tab
}

/// Unique identifier of the record, auto-generated by the system.
/// Example: /// Example: HAZARD-ID
/// Constraints: Minimum length = 1, Maximum length = 36
func (rcv *Hazard_Full) Id() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Unique identifier of the record, auto-generated by the system.
/// Example: /// Example: HAZARD-ID
/// Constraints: Minimum length = 1, Maximum length = 36
/// Classification marking of the data in IC/CAPCO Portion-marked format.
/// Example: /// Example: U
/// Constraints: Minimum length = 1, Maximum length = 128
func (rcv *Hazard_Full) ClassificationMarking() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Classification marking of the data in IC/CAPCO Portion-marked format.
/// Example: /// Example: U
/// Constraints: Minimum length = 1, Maximum length = 128
/// The type of hazard (Chemical, Biological, Radiological, Nuclear) detect associated with this record.
/// Example: /// Example: Chemical
/// Constraints: Minimum length = 1, Maximum length = 32
func (rcv *Hazard_Full) DetectType() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The type of hazard (Chemical, Biological, Radiological, Nuclear) detect associated with this record.
/// Example: /// Example: Chemical
/// Constraints: Minimum length = 1, Maximum length = 32
/// The detect time, in ISO 8601 UTC format, with millisecond precision.
/// Example: /// Example: 2022-03-07T14:51:39.653Z
/// Constraints: No constraints specified.
func (rcv *Hazard_Full) DetectTime() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The detect time, in ISO 8601 UTC format, with millisecond precision.
/// Example: /// Example: 2022-03-07T14:51:39.653Z
/// Constraints: No constraints specified.
/// Flag indicating whether this detection is harmful to humans.
/// Example: /// Example: False
/// Constraints: No constraints specified.
func (rcv *Hazard_Full) Harmful() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

/// Flag indicating whether this detection is harmful to humans.
/// Example: /// Example: False
/// Constraints: No constraints specified.
func (rcv *Hazard_Full) MutateHarmful(n bool) bool {
	return rcv._tab.MutateBoolSlot(12, n)
}

/// Array of the specific alarms associated with this detection. The alarms and alarmValues arrays must contain the same number of elements.
/// Example: /// Example: ['Alarm1', 'Alarm2']
/// Constraints: No constraints specified.
func (rcv *Hazard_Full) Alarms(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *Hazard_Full) AlarmsLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

/// Array of the specific alarms associated with this detection. The alarms and alarmValues arrays must contain the same number of elements.
/// Example: /// Example: ['Alarm1', 'Alarm2']
/// Constraints: No constraints specified.
/// Array of the values that correspond to each of the alarms contained in alarms. The alarms and alarmValues arrays must contain the same number of elements.
/// Example: /// Example: [2.7, 2.9]
/// Constraints: No constraints specified.
func (rcv *Hazard_Full) AlarmValues(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *Hazard_Full) AlarmValuesLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

/// Array of the values that correspond to each of the alarms contained in alarms. The alarms and alarmValues arrays must contain the same number of elements.
/// Example: /// Example: [2.7, 2.9]
/// Constraints: No constraints specified.
/// Array of the specific readings associated with this detection. The readings, readingUnits, and readingValues arrays must contain the same number of elements.
/// Example: /// Example: ['Rad1', 'Rad2']
/// Constraints: No constraints specified.
func (rcv *Hazard_Full) Readings(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(18))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *Hazard_Full) ReadingsLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(18))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

/// Array of the specific readings associated with this detection. The readings, readingUnits, and readingValues arrays must contain the same number of elements.
/// Example: /// Example: ['Rad1', 'Rad2']
/// Constraints: No constraints specified.
/// Array of the units that correspond to each of the readingValues. The readings, readingUnits, and readingValues arrays must contain the same number of elements.
/// Example: /// Example: ['Gray', 'Gray']
/// Constraints: No constraints specified.
func (rcv *Hazard_Full) ReadingUnits(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(20))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *Hazard_Full) ReadingUnitsLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(20))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

/// Array of the units that correspond to each of the readingValues. The readings, readingUnits, and readingValues arrays must contain the same number of elements.
/// Example: /// Example: ['Gray', 'Gray']
/// Constraints: No constraints specified.
/// Array of the values that correspond to each of the readings contained in readings. The readings, readingUnits, and readingValues arrays must contain the same number of elements.
/// Example: /// Example: [107.2, 124.1]
/// Constraints: No constraints specified.
func (rcv *Hazard_Full) ReadingValues(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(22))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *Hazard_Full) ReadingValuesLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(22))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

/// Array of the values that correspond to each of the readings contained in readings. The readings, readingUnits, and readingValues arrays must contain the same number of elements.
/// Example: /// Example: [107.2, 124.1]
/// Constraints: No constraints specified.
/// The specific material type (MT) or MT Code involved in this detection, when applicable. The material type is generally associated with radiological and/or nuclear detections. For further information, reference Nuclear Materials Management and Safeguards System (NMMSS) Users Guide Rev. 2.1.
/// Example: /// Example: 21
/// Constraints: Minimum length = 0, Maximum length = 48
func (rcv *Hazard_Full) MatType() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(24))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The specific material type (MT) or MT Code involved in this detection, when applicable. The material type is generally associated with radiological and/or nuclear detections. For further information, reference Nuclear Materials Management and Safeguards System (NMMSS) Users Guide Rev. 2.1.
/// Example: /// Example: 21
/// Constraints: Minimum length = 0, Maximum length = 48
/// The specific Material Class for the material associated with this detect. The material class is generally associated with chemical and biological detections.
/// Example: /// Example: Nerve Agent
/// Constraints: Minimum length = 0, Maximum length = 64
func (rcv *Hazard_Full) MatClass() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(26))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The specific Material Class for the material associated with this detect. The material class is generally associated with chemical and biological detections.
/// Example: /// Example: Nerve Agent
/// Constraints: Minimum length = 0, Maximum length = 64
/// The material common name associated with this detection.
/// Example: /// Example: VX
/// Constraints: Minimum length = 0, Maximum length = 64
func (rcv *Hazard_Full) MatName() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(28))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The material common name associated with this detection.
/// Example: /// Example: VX
/// Constraints: Minimum length = 0, Maximum length = 64
/// The Radiological Category (1 - 5) which applies to the material associated with this detection, according to the following definitions: 
/// Category 1: If not safely or securely managed, would be likely to cause permanent injury to a person who handled them or was otherwise in contact with them for more than a few minutes. It would probably be fatal to be close to this amount of unshielded material for a period of a few minutes to an hour. 
/// Category 2: If not safely or securely managed, could cause permanent injury to a person who handled them or was otherwise in contact with them for a short time (minutes to hours). It could possibly be fatal to be close to this amount of unshielded radioactive material for a period of hours to days. 
/// Category 3: If not safely or securely managed, could cause permanent injury to a person who handled them or was otherwise in contact with them for hours. It could possibly - although it is unlikely to be - fatal to be close to this amount of unshielded radioactive material for a period of days to weeks. 
/// Category 4: If not safely managed or securely protected, could possibly cause temporary injury to someone who handled them or was otherwise in contact with or close to them for a period of many weeks, though this is unlikely. It is very unlikely anyone would be permanently injured by this amount of radioactive material. 
/// Category 5: Cannot cause permanent injury. This category applies to x-ray fluorescence devices and electron capture devices.
/// Example: /// Example: 3
/// Constraints: No constraints specified.
func (rcv *Hazard_Full) MatCat() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(30))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

/// The Radiological Category (1 - 5) which applies to the material associated with this detection, according to the following definitions: 
/// Category 1: If not safely or securely managed, would be likely to cause permanent injury to a person who handled them or was otherwise in contact with them for more than a few minutes. It would probably be fatal to be close to this amount of unshielded material for a period of a few minutes to an hour. 
/// Category 2: If not safely or securely managed, could cause permanent injury to a person who handled them or was otherwise in contact with them for a short time (minutes to hours). It could possibly be fatal to be close to this amount of unshielded radioactive material for a period of hours to days. 
/// Category 3: If not safely or securely managed, could cause permanent injury to a person who handled them or was otherwise in contact with them for hours. It could possibly - although it is unlikely to be - fatal to be close to this amount of unshielded radioactive material for a period of days to weeks. 
/// Category 4: If not safely managed or securely protected, could possibly cause temporary injury to someone who handled them or was otherwise in contact with or close to them for a period of many weeks, though this is unlikely. It is very unlikely anyone would be permanently injured by this amount of radioactive material. 
/// Category 5: Cannot cause permanent injury. This category applies to x-ray fluorescence devices and electron capture devices.
/// Example: /// Example: 3
/// Constraints: No constraints specified.
func (rcv *Hazard_Full) MutateMatCat(n int32) bool {
	return rcv._tab.MutateInt32Slot(30, n)
}

/// The CAS Registry Number, also referred to as CAS Number or CAS RN, associated with the this detection. The CAS Number is a unique numerical identifier assigned by the Chemical Abstracts Service (CAS), to every chemical substance described in the open scientific literature. It includes organic and inorganic compounds, minerals, isotopes, alloys, mixtures, and nonstructurable materials (UVCBs, substances of unknown or variable composition, complex reaction products, or biological origin). For further information, reference https://www.cas.org/cas-data/cas-registry.
/// Example: /// Example: 64-17-5
/// Constraints: Minimum length = 0, Maximum length = 24
func (rcv *Hazard_Full) CasRn() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(32))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The CAS Registry Number, also referred to as CAS Number or CAS RN, associated with the this detection. The CAS Number is a unique numerical identifier assigned by the Chemical Abstracts Service (CAS), to every chemical substance described in the open scientific literature. It includes organic and inorganic compounds, minerals, isotopes, alloys, mixtures, and nonstructurable materials (UVCBs, substances of unknown or variable composition, complex reaction products, or biological origin). For further information, reference https://www.cas.org/cas-data/cas-registry.
/// Example: /// Example: 64-17-5
/// Constraints: Minimum length = 0, Maximum length = 24
/// Measure of the concentration of the material associated with this detection, in parts per million (units of contaminant mass per million parts of total mass).
/// Example: /// Example: 27129
/// Constraints: No constraints specified.
func (rcv *Hazard_Full) Ppm() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(34))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

/// Measure of the concentration of the material associated with this detection, in parts per million (units of contaminant mass per million parts of total mass).
/// Example: /// Example: 27129
/// Constraints: No constraints specified.
func (rcv *Hazard_Full) MutatePpm(n int32) bool {
	return rcv._tab.MutateInt32Slot(34, n)
}

/// Measure of density of the material associated with this detection, in kg/m^3.
/// Example: /// Example: 18900.2
/// Constraints: No constraints specified.
func (rcv *Hazard_Full) Density() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(36))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Measure of density of the material associated with this detection, in kg/m^3.
/// Example: /// Example: 18900.2
/// Constraints: No constraints specified.
func (rcv *Hazard_Full) MutateDensity(n float64) bool {
	return rcv._tab.MutateFloat64Slot(36, n)
}

/// Measure of radioactive concentration of the material associated with this detection, in becquerels/m^3. One becquerel (Bq) is equal to one nuclear decay per second.
/// Example: /// Example: 1.31
/// Constraints: No constraints specified.
func (rcv *Hazard_Full) RadCtrn() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(38))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Measure of radioactive concentration of the material associated with this detection, in becquerels/m^3. One becquerel (Bq) is equal to one nuclear decay per second.
/// Example: /// Example: 1.31
/// Constraints: No constraints specified.
func (rcv *Hazard_Full) MutateRadCtrn(n float64) bool {
	return rcv._tab.MutateFloat64Slot(38, n)
}

/// Chemical Agent Monitor (CAM) G-type agent measurement, in number of display bars. In G-mode, CAMs monitor for G-series nerve agents.
/// Example: /// Example: 2.5
/// Constraints: No constraints specified.
func (rcv *Hazard_Full) GBar() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(40))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Chemical Agent Monitor (CAM) G-type agent measurement, in number of display bars. In G-mode, CAMs monitor for G-series nerve agents.
/// Example: /// Example: 2.5
/// Constraints: No constraints specified.
func (rcv *Hazard_Full) MutateGBar(n float64) bool {
	return rcv._tab.MutateFloat64Slot(40, n)
}

/// Chemical Agent Monitor (CAM) H-type agent measurement, in number of display bars. In H-mode, CAMs monitor for blister agents.
/// Example: /// Example: 3.1
/// Constraints: No constraints specified.
func (rcv *Hazard_Full) HBar() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(42))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Chemical Agent Monitor (CAM) H-type agent measurement, in number of display bars. In H-mode, CAMs monitor for blister agents.
/// Example: /// Example: 3.1
/// Constraints: No constraints specified.
func (rcv *Hazard_Full) MutateHBar(n float64) bool {
	return rcv._tab.MutateFloat64Slot(42, n)
}

/// The Atomic Number of the material associated with this detection.
/// Example: /// Example: 92
/// Constraints: No constraints specified.
func (rcv *Hazard_Full) Z() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(44))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

/// The Atomic Number of the material associated with this detection.
/// Example: /// Example: 92
/// Constraints: No constraints specified.
func (rcv *Hazard_Full) MutateZ(n int32) bool {
	return rcv._tab.MutateInt32Slot(44, n)
}

/// The (rounded) Mass Number of the material associated with this detection. The rounded value is the mass number of the most abundant isotope of the element.
/// Example: /// Example: 238
/// Constraints: No constraints specified.
func (rcv *Hazard_Full) A() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(46))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

/// The (rounded) Mass Number of the material associated with this detection. The rounded value is the mass number of the most abundant isotope of the element.
/// Example: /// Example: 238
/// Constraints: No constraints specified.
func (rcv *Hazard_Full) MutateA(n int32) bool {
	return rcv._tab.MutateInt32Slot(46, n)
}

/// The specific bottle ID associated with this detection.
/// Example: /// Example: 6264
/// Constraints: Minimum length = 0, Maximum length = 16
func (rcv *Hazard_Full) BottleId() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(48))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The specific bottle ID associated with this detection.
/// Example: /// Example: 6264
/// Constraints: Minimum length = 0, Maximum length = 16
/// The applicable channel involved in this biological material detection (e.g. Digestive, Eyes, Respiratory, Skin, etc.) .
/// Example: /// Example: Skin
/// Constraints: Minimum length = 0, Maximum length = 64
func (rcv *Hazard_Full) Channel() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(50))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The applicable channel involved in this biological material detection (e.g. Digestive, Eyes, Respiratory, Skin, etc.) .
/// Example: /// Example: Skin
/// Constraints: Minimum length = 0, Maximum length = 64
/// The known or projected hazard duration, in seconds, associated with this material detection.
/// Example: /// Example: 14400
/// Constraints: No constraints specified.
func (rcv *Hazard_Full) Duration() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(52))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

/// The known or projected hazard duration, in seconds, associated with this material detection.
/// Example: /// Example: 14400
/// Constraints: No constraints specified.
func (rcv *Hazard_Full) MutateDuration(n int32) bool {
	return rcv._tab.MutateInt32Slot(52, n)
}

/// The radioactivity measurement of the material associated with this detection, in becquerels (Bq). One becquerel (Bq) is equal to one nuclear decay per second.
/// Example: /// Example: 120.1
/// Constraints: No constraints specified.
func (rcv *Hazard_Full) Activity() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(54))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// The radioactivity measurement of the material associated with this detection, in becquerels (Bq). One becquerel (Bq) is equal to one nuclear decay per second.
/// Example: /// Example: 120.1
/// Constraints: No constraints specified.
func (rcv *Hazard_Full) MutateActivity(n float64) bool {
	return rcv._tab.MutateFloat64Slot(54, n)
}

/// The deposition measurement of the contaminant to surface area, in kg/m^2.
/// Example: /// Example: 1.084
/// Constraints: No constraints specified.
func (rcv *Hazard_Full) Dep() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(56))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// The deposition measurement of the contaminant to surface area, in kg/m^2.
/// Example: /// Example: 1.084
/// Constraints: No constraints specified.
func (rcv *Hazard_Full) MutateDep(n float64) bool {
	return rcv._tab.MutateFloat64Slot(56, n)
}

/// The deposition concentration of the contaminant to surface area, in becquerels/m^2.
/// Example: /// Example: 86.1
/// Constraints: No constraints specified.
func (rcv *Hazard_Full) DepCtrn() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(58))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// The deposition concentration of the contaminant to surface area, in becquerels/m^2.
/// Example: /// Example: 86.1
/// Constraints: No constraints specified.
func (rcv *Hazard_Full) MutateDepCtrn(n float64) bool {
	return rcv._tab.MutateFloat64Slot(58, n)
}

/// Ratio of the chemical substance mass to the total mass of the mixture.
/// Example: /// Example: 0.029
/// Constraints: No constraints specified.
func (rcv *Hazard_Full) MassFrac() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(60))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Ratio of the chemical substance mass to the total mass of the mixture.
/// Example: /// Example: 0.029
/// Constraints: No constraints specified.
func (rcv *Hazard_Full) MutateMassFrac(n float64) bool {
	return rcv._tab.MutateFloat64Slot(60, n)
}

/// The dose associated with this detection, in gray. Dose is the measure of the energy deposited in matter by ionizing radiation per unit mass. One gray is defined as one Joule of energy absorbed per kilogram of matter.
/// Example: /// Example: 1.12
/// Constraints: No constraints specified.
func (rcv *Hazard_Full) Dose() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(62))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// The dose associated with this detection, in gray. Dose is the measure of the energy deposited in matter by ionizing radiation per unit mass. One gray is defined as one Joule of energy absorbed per kilogram of matter.
/// Example: /// Example: 1.12
/// Constraints: No constraints specified.
func (rcv *Hazard_Full) MutateDose(n float64) bool {
	return rcv._tab.MutateFloat64Slot(62, n)
}

/// The concentration time, in (kg/sec)/m^3, associated with this material detection.
/// Example: /// Example: 1.077
/// Constraints: No constraints specified.
func (rcv *Hazard_Full) CtrnTime() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(64))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// The concentration time, in (kg/sec)/m^3, associated with this material detection.
/// Example: /// Example: 1.077
/// Constraints: No constraints specified.
func (rcv *Hazard_Full) MutateCtrnTime(n float64) bool {
	return rcv._tab.MutateFloat64Slot(64, n)
}

/// The dose rate associated with this detection, in gray/sec. One gray is defined as one Joule of energy absorbed per kilogram of matter.
/// Example: /// Example: 1.0000001865
/// Constraints: No constraints specified.
func (rcv *Hazard_Full) DoseRate() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(66))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// The dose rate associated with this detection, in gray/sec. One gray is defined as one Joule of energy absorbed per kilogram of matter.
/// Example: /// Example: 1.0000001865
/// Constraints: No constraints specified.
func (rcv *Hazard_Full) MutateDoseRate(n float64) bool {
	return rcv._tab.MutateFloat64Slot(66, n)
}

/// ID of the Point of Interest (POI) record related to this hazard record.
/// Example: /// Example: POI-ID
/// Constraints: Minimum length = 0, Maximum length = 36
func (rcv *Hazard_Full) IdPoi() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(68))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// ID of the Point of Interest (POI) record related to this hazard record.
/// Example: /// Example: POI-ID
/// Constraints: Minimum length = 0, Maximum length = 36
/// ID of the Track record related to this hazard record.
/// Example: /// Example: TRACK-ID
/// Constraints: Minimum length = 0, Maximum length = 36
func (rcv *Hazard_Full) IdTrack() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(70))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// ID of the Track record related to this hazard record.
/// Example: /// Example: TRACK-ID
/// Constraints: Minimum length = 0, Maximum length = 36
/// Time the row was created in the database, auto-populated by the system.
/// Example: /// Example: 2018-01-01T16:00:00.123Z
/// Constraints: No constraints specified.
func (rcv *Hazard_Full) CreatedAt() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(72))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Time the row was created in the database, auto-populated by the system.
/// Example: /// Example: 2018-01-01T16:00:00.123Z
/// Constraints: No constraints specified.
/// Application user who created the row in the database, auto-populated by the system.
/// Example: /// Example: some.user
/// Constraints: Minimum length = 1, Maximum length = 64
func (rcv *Hazard_Full) CreatedBy() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(74))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Application user who created the row in the database, auto-populated by the system.
/// Example: /// Example: some.user
/// Constraints: Minimum length = 1, Maximum length = 64
/// Source of the data.
/// Example: /// Example: Bluestaq
/// Constraints: Minimum length = 1, Maximum length = 36
func (rcv *Hazard_Full) Source() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(76))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Source of the data.
/// Example: /// Example: Bluestaq
/// Constraints: Minimum length = 1, Maximum length = 36
/// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
/// Example: /// Example: THIRD_PARTY_DATASOURCE
/// Constraints: Minimum length = 0, Maximum length = 64
func (rcv *Hazard_Full) Origin() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(78))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
/// Example: /// Example: THIRD_PARTY_DATASOURCE
/// Constraints: Minimum length = 0, Maximum length = 64
/// The originating source network on which this record was created, auto-populated by the system.
/// Example: /// Example: ORIG
/// Constraints: Minimum length = 1, Maximum length = 32
func (rcv *Hazard_Full) OrigNetwork() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(80))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The originating source network on which this record was created, auto-populated by the system.
/// Example: /// Example: ORIG
/// Constraints: Minimum length = 1, Maximum length = 32
/// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
/// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
/// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
/// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
/// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
/// Example: /// Example: TEST
/// Constraints: Minimum length = 1, Maximum length = 32
func (rcv *Hazard_Full) DataMode() Hazard_Full_dataMode_Enum {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(82))
	if o != 0 {
		return Hazard_Full_dataMode_Enum(rcv._tab.GetInt8(o + rcv._tab.Pos))
	}
	return 0
}

/// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
/// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
/// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
/// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
/// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
/// Example: /// Example: TEST
/// Constraints: Minimum length = 1, Maximum length = 32
func (rcv *Hazard_Full) MutateDataMode(n Hazard_Full_dataMode_Enum) bool {
	return rcv._tab.MutateInt8Slot(82, int8(n))
}

func Hazard_FullStart(builder *flatbuffers.Builder) {
	builder.StartObject(40)
}
func Hazard_FullAddId(builder *flatbuffers.Builder, id flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(id), 0)
}
func Hazard_FullAddClassificationMarking(builder *flatbuffers.Builder, classificationMarking flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(classificationMarking), 0)
}
func Hazard_FullAddDetectType(builder *flatbuffers.Builder, detectType flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(detectType), 0)
}
func Hazard_FullAddDetectTime(builder *flatbuffers.Builder, detectTime flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(3, flatbuffers.UOffsetT(detectTime), 0)
}
func Hazard_FullAddHarmful(builder *flatbuffers.Builder, harmful bool) {
	builder.PrependBoolSlot(4, harmful, false)
}
func Hazard_FullAddAlarms(builder *flatbuffers.Builder, alarms flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(5, flatbuffers.UOffsetT(alarms), 0)
}
func Hazard_FullStartAlarmsVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func Hazard_FullAddAlarmValues(builder *flatbuffers.Builder, alarmValues flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(6, flatbuffers.UOffsetT(alarmValues), 0)
}
func Hazard_FullStartAlarmValuesVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func Hazard_FullAddReadings(builder *flatbuffers.Builder, readings flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(7, flatbuffers.UOffsetT(readings), 0)
}
func Hazard_FullStartReadingsVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func Hazard_FullAddReadingUnits(builder *flatbuffers.Builder, readingUnits flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(8, flatbuffers.UOffsetT(readingUnits), 0)
}
func Hazard_FullStartReadingUnitsVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func Hazard_FullAddReadingValues(builder *flatbuffers.Builder, readingValues flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(9, flatbuffers.UOffsetT(readingValues), 0)
}
func Hazard_FullStartReadingValuesVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func Hazard_FullAddMatType(builder *flatbuffers.Builder, matType flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(10, flatbuffers.UOffsetT(matType), 0)
}
func Hazard_FullAddMatClass(builder *flatbuffers.Builder, matClass flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(11, flatbuffers.UOffsetT(matClass), 0)
}
func Hazard_FullAddMatName(builder *flatbuffers.Builder, matName flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(12, flatbuffers.UOffsetT(matName), 0)
}
func Hazard_FullAddMatCat(builder *flatbuffers.Builder, matCat int32) {
	builder.PrependInt32Slot(13, matCat, 0)
}
func Hazard_FullAddCasRn(builder *flatbuffers.Builder, casRn flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(14, flatbuffers.UOffsetT(casRn), 0)
}
func Hazard_FullAddPpm(builder *flatbuffers.Builder, ppm int32) {
	builder.PrependInt32Slot(15, ppm, 0)
}
func Hazard_FullAddDensity(builder *flatbuffers.Builder, density float64) {
	builder.PrependFloat64Slot(16, density, 0.0)
}
func Hazard_FullAddRadCtrn(builder *flatbuffers.Builder, radCtrn float64) {
	builder.PrependFloat64Slot(17, radCtrn, 0.0)
}
func Hazard_FullAddGBar(builder *flatbuffers.Builder, gBar float64) {
	builder.PrependFloat64Slot(18, gBar, 0.0)
}
func Hazard_FullAddHBar(builder *flatbuffers.Builder, hBar float64) {
	builder.PrependFloat64Slot(19, hBar, 0.0)
}
func Hazard_FullAddZ(builder *flatbuffers.Builder, z int32) {
	builder.PrependInt32Slot(20, z, 0)
}
func Hazard_FullAddA(builder *flatbuffers.Builder, a int32) {
	builder.PrependInt32Slot(21, a, 0)
}
func Hazard_FullAddBottleId(builder *flatbuffers.Builder, bottleId flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(22, flatbuffers.UOffsetT(bottleId), 0)
}
func Hazard_FullAddChannel(builder *flatbuffers.Builder, channel flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(23, flatbuffers.UOffsetT(channel), 0)
}
func Hazard_FullAddDuration(builder *flatbuffers.Builder, duration int32) {
	builder.PrependInt32Slot(24, duration, 0)
}
func Hazard_FullAddActivity(builder *flatbuffers.Builder, activity float64) {
	builder.PrependFloat64Slot(25, activity, 0.0)
}
func Hazard_FullAddDep(builder *flatbuffers.Builder, dep float64) {
	builder.PrependFloat64Slot(26, dep, 0.0)
}
func Hazard_FullAddDepCtrn(builder *flatbuffers.Builder, depCtrn float64) {
	builder.PrependFloat64Slot(27, depCtrn, 0.0)
}
func Hazard_FullAddMassFrac(builder *flatbuffers.Builder, massFrac float64) {
	builder.PrependFloat64Slot(28, massFrac, 0.0)
}
func Hazard_FullAddDose(builder *flatbuffers.Builder, dose float64) {
	builder.PrependFloat64Slot(29, dose, 0.0)
}
func Hazard_FullAddCtrnTime(builder *flatbuffers.Builder, ctrnTime float64) {
	builder.PrependFloat64Slot(30, ctrnTime, 0.0)
}
func Hazard_FullAddDoseRate(builder *flatbuffers.Builder, doseRate float64) {
	builder.PrependFloat64Slot(31, doseRate, 0.0)
}
func Hazard_FullAddIdPoi(builder *flatbuffers.Builder, idPoi flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(32, flatbuffers.UOffsetT(idPoi), 0)
}
func Hazard_FullAddIdTrack(builder *flatbuffers.Builder, idTrack flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(33, flatbuffers.UOffsetT(idTrack), 0)
}
func Hazard_FullAddCreatedAt(builder *flatbuffers.Builder, createdAt flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(34, flatbuffers.UOffsetT(createdAt), 0)
}
func Hazard_FullAddCreatedBy(builder *flatbuffers.Builder, createdBy flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(35, flatbuffers.UOffsetT(createdBy), 0)
}
func Hazard_FullAddSource(builder *flatbuffers.Builder, source flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(36, flatbuffers.UOffsetT(source), 0)
}
func Hazard_FullAddOrigin(builder *flatbuffers.Builder, origin flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(37, flatbuffers.UOffsetT(origin), 0)
}
func Hazard_FullAddOrigNetwork(builder *flatbuffers.Builder, origNetwork flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(38, flatbuffers.UOffsetT(origNetwork), 0)
}
func Hazard_FullAddDataMode(builder *flatbuffers.Builder, dataMode Hazard_Full_dataMode_Enum) {
	builder.PrependInt8Slot(39, int8(dataMode), 0)
}
func Hazard_FullEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
