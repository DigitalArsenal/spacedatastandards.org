// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package RFEmitterDetails_Full

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

/// /// Details for a particular RF Emitter, collected by a particular source. An RF Emitter may have multiple details records from various sources.
type RFEmitterDetails_Full struct {
	_tab flatbuffers.Table
}

const RFEmitterDetails_FullIdentifier = "RFEM"

func GetRootAsRFEmitterDetails_Full(buf []byte, offset flatbuffers.UOffsetT) *RFEmitterDetails_Full {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &RFEmitterDetails_Full{}
	x.Init(buf, n+offset)
	return x
}

func FinishRFEmitterDetails_FullBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	identifierBytes := []byte(RFEmitterDetails_FullIdentifier)
	builder.FinishWithFileIdentifier(offset, identifierBytes)
}

func RFEmitterDetails_FullBufferHasIdentifier(buf []byte) bool {
	return flatbuffers.BufferHasIdentifier(buf, RFEmitterDetails_FullIdentifier)
}

func GetSizePrefixedRootAsRFEmitterDetails_Full(buf []byte, offset flatbuffers.UOffsetT) *RFEmitterDetails_Full {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &RFEmitterDetails_Full{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedRFEmitterDetails_FullBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	identifierBytes := []byte(RFEmitterDetails_FullIdentifier)
	builder.FinishSizePrefixedWithFileIdentifier(offset, identifierBytes)
}

func SizePrefixedRFEmitterDetails_FullBufferHasIdentifier(buf []byte) bool {
	return flatbuffers.SizePrefixedBufferHasIdentifier(buf, RFEmitterDetails_FullIdentifier)
}

func (rcv *RFEmitterDetails_Full) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *RFEmitterDetails_Full) Table() flatbuffers.Table {
	return rcv._tab
}

/// Unique identifier of the record, auto-generated by the system.
/// Example: /// Example: RFEMITTERDETAILS-ID
/// Constraints: Minimum length = 1, Maximum length = 36
func (rcv *RFEmitterDetails_Full) Id() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Unique identifier of the record, auto-generated by the system.
/// Example: /// Example: RFEMITTERDETAILS-ID
/// Constraints: Minimum length = 1, Maximum length = 36
/// Unique identifier of the parent RF Emitter.
/// Example: /// Example: RFEMITTER-ID
/// Constraints: Minimum length = 1, Maximum length = 36
func (rcv *RFEmitterDetails_Full) IdRfemitter() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Unique identifier of the parent RF Emitter.
/// Example: /// Example: RFEMITTER-ID
/// Constraints: Minimum length = 1, Maximum length = 36
/// Classification marking of the data in IC/CAPCO Portion-marked format.
/// Example: /// Example: U
/// Constraints: Minimum length = 1, Maximum length = 128
func (rcv *RFEmitterDetails_Full) ClassificationMarking() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Classification marking of the data in IC/CAPCO Portion-marked format.
/// Example: /// Example: U
/// Constraints: Minimum length = 1, Maximum length = 128
/// Designator of this RF Emitter.
/// Example: /// Example: DESIGNATOR
/// Constraints: Minimum length = 0, Maximum length = 128
func (rcv *RFEmitterDetails_Full) Designator() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Designator of this RF Emitter.
/// Example: /// Example: DESIGNATOR
/// Constraints: Minimum length = 0, Maximum length = 128
/// Optional alternate name or alias for this RF Emitter.
/// Example: /// Example: ALTERNATE_NAME
/// Constraints: Minimum length = 0, Maximum length = 128
func (rcv *RFEmitterDetails_Full) AltName() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Optional alternate name or alias for this RF Emitter.
/// Example: /// Example: ALTERNATE_NAME
/// Constraints: Minimum length = 0, Maximum length = 128
/// Family of this RF Emitter type.
/// Example: /// Example: FAMILY
/// Constraints: Minimum length = 0, Maximum length = 128
func (rcv *RFEmitterDetails_Full) Family() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Family of this RF Emitter type.
/// Example: /// Example: FAMILY
/// Constraints: Minimum length = 0, Maximum length = 128
/// Name of the production facility for this RF Emitter.
/// Example: /// Example: PRODUCTION_FACILITY
/// Constraints: Minimum length = 0, Maximum length = 128
func (rcv *RFEmitterDetails_Full) ProductionFacilityName() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Name of the production facility for this RF Emitter.
/// Example: /// Example: PRODUCTION_FACILITY
/// Constraints: Minimum length = 0, Maximum length = 128
/// Alternate facility name for this RF Emitter.
/// Example: /// Example: ALTERNATE_FACILITY_NAME
/// Constraints: Minimum length = 0, Maximum length = 128
func (rcv *RFEmitterDetails_Full) AlternateFacilityName() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(18))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Alternate facility name for this RF Emitter.
/// Example: /// Example: ALTERNATE_FACILITY_NAME
/// Constraints: Minimum length = 0, Maximum length = 128
/// Unique identifier of the organization which manufactures this RF Emitter.
/// Example: /// Example: MANUFACTURERORG-ID
/// Constraints: Minimum length = 0, Maximum length = 36
func (rcv *RFEmitterDetails_Full) ManufacturerOrgId() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(20))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Unique identifier of the organization which manufactures this RF Emitter.
/// Example: /// Example: MANUFACTURERORG-ID
/// Constraints: Minimum length = 0, Maximum length = 36
/// Unique identifier of the location of the production facility for this RF Emitter.
/// Example: /// Example: PRODUCTIONFACILITYLOCATION-ID
/// Constraints: Minimum length = 0, Maximum length = 36
func (rcv *RFEmitterDetails_Full) ProductionFacilityLocationId() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(22))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Unique identifier of the location of the production facility for this RF Emitter.
/// Example: /// Example: PRODUCTIONFACILITYLOCATION-ID
/// Constraints: Minimum length = 0, Maximum length = 36
/// Receiver sensitivity is the lowest power level at which the receiver can detect an RF signal and demodulate data. Sensitivity is purely a receiver specification and is independent of the transmitter. Start sensitivity range, in dBm.
/// Example: /// Example: 50.23
/// Constraints: No constraints specified.
func (rcv *RFEmitterDetails_Full) SystemSensitivityStart() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(24))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Receiver sensitivity is the lowest power level at which the receiver can detect an RF signal and demodulate data. Sensitivity is purely a receiver specification and is independent of the transmitter. Start sensitivity range, in dBm.
/// Example: /// Example: 50.23
/// Constraints: No constraints specified.
func (rcv *RFEmitterDetails_Full) MutateSystemSensitivityStart(n float64) bool {
	return rcv._tab.MutateFloat64Slot(24, n)
}

/// Receiver sensitivity is the lowest power level at which the receiver can detect an RF signal and demodulate data. Sensitivity is purely a receiver specification and is independent of the transmitter. End sensitivity range, in dBm.
/// Example: /// Example: 150.23
/// Constraints: No constraints specified.
func (rcv *RFEmitterDetails_Full) SystemSensitivityEnd() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(26))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Receiver sensitivity is the lowest power level at which the receiver can detect an RF signal and demodulate data. Sensitivity is purely a receiver specification and is independent of the transmitter. End sensitivity range, in dBm.
/// Example: /// Example: 150.23
/// Constraints: No constraints specified.
func (rcv *RFEmitterDetails_Full) MutateSystemSensitivityEnd(n float64) bool {
	return rcv._tab.MutateFloat64Slot(26, n)
}

/// Type or name of receiver.
/// Example: /// Example: RECEIVER_TYPE
/// Constraints: Minimum length = 0, Maximum length = 64
func (rcv *RFEmitterDetails_Full) ReceiverType() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(28))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Type or name of receiver.
/// Example: /// Example: RECEIVER_TYPE
/// Constraints: Minimum length = 0, Maximum length = 64
/// Receiver sensitivity in dBm.
/// Example: /// Example: 10.23
/// Constraints: No constraints specified.
func (rcv *RFEmitterDetails_Full) ReceiverSensitivity() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(30))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Receiver sensitivity in dBm.
/// Example: /// Example: 10.23
/// Constraints: No constraints specified.
func (rcv *RFEmitterDetails_Full) MutateReceiverSensitivity(n float64) bool {
	return rcv._tab.MutateFloat64Slot(30, n)
}

/// Receiver bandwidth in Mhz.
/// Example: /// Example: 15.23
/// Constraints: No constraints specified.
func (rcv *RFEmitterDetails_Full) ReceiverBandwidth() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(32))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Receiver bandwidth in Mhz.
/// Example: /// Example: 15.23
/// Constraints: No constraints specified.
func (rcv *RFEmitterDetails_Full) MutateReceiverBandwidth(n float64) bool {
	return rcv._tab.MutateFloat64Slot(32, n)
}

/// Transmitter frequency in Mhz.
/// Example: /// Example: 105.9
/// Constraints: No constraints specified.
func (rcv *RFEmitterDetails_Full) TransmitterFrequency() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(34))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Transmitter frequency in Mhz.
/// Example: /// Example: 105.9
/// Constraints: No constraints specified.
func (rcv *RFEmitterDetails_Full) MutateTransmitterFrequency(n float64) bool {
	return rcv._tab.MutateFloat64Slot(34, n)
}

/// Transmitter bandwidth in Mhz.
/// Example: /// Example: 0.125
/// Constraints: No constraints specified.
func (rcv *RFEmitterDetails_Full) TransmitterBandwidth() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(36))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Transmitter bandwidth in Mhz.
/// Example: /// Example: 0.125
/// Constraints: No constraints specified.
func (rcv *RFEmitterDetails_Full) MutateTransmitterBandwidth(n float64) bool {
	return rcv._tab.MutateFloat64Slot(36, n)
}

/// Transmit power in Watts.
/// Example: /// Example: 100.23
/// Constraints: No constraints specified.
func (rcv *RFEmitterDetails_Full) TransmitPower() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(38))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Transmit power in Watts.
/// Example: /// Example: 100.23
/// Constraints: No constraints specified.
func (rcv *RFEmitterDetails_Full) MutateTransmitPower(n float64) bool {
	return rcv._tab.MutateFloat64Slot(38, n)
}

/// Barrage noise bandwidth in Mhz.
/// Example: /// Example: 5.23
/// Constraints: No constraints specified.
func (rcv *RFEmitterDetails_Full) BarrageNoiseBandwidth() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(40))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Barrage noise bandwidth in Mhz.
/// Example: /// Example: 5.23
/// Constraints: No constraints specified.
func (rcv *RFEmitterDetails_Full) MutateBarrageNoiseBandwidth(n float64) bool {
	return rcv._tab.MutateFloat64Slot(40, n)
}

/// Doppler noise value in Mhz.
/// Example: /// Example: 10.23
/// Constraints: No constraints specified.
func (rcv *RFEmitterDetails_Full) DopplerNoise() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(42))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Doppler noise value in Mhz.
/// Example: /// Example: 10.23
/// Constraints: No constraints specified.
func (rcv *RFEmitterDetails_Full) MutateDopplerNoise(n float64) bool {
	return rcv._tab.MutateFloat64Slot(42, n)
}

/// Digital Form Radio Memory instantaneous bandwidth in Mhz.
/// Example: /// Example: 20.23
/// Constraints: No constraints specified.
func (rcv *RFEmitterDetails_Full) DrfmInstantaneousBandwidth() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(44))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Digital Form Radio Memory instantaneous bandwidth in Mhz.
/// Example: /// Example: 20.23
/// Constraints: No constraints specified.
func (rcv *RFEmitterDetails_Full) MutateDrfmInstantaneousBandwidth(n float64) bool {
	return rcv._tab.MutateFloat64Slot(44, n)
}

/// Number of channels.
/// Example: /// Example: 10
/// Constraints: No constraints specified.
func (rcv *RFEmitterDetails_Full) NumChannels() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(46))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

/// Number of channels.
/// Example: /// Example: 10
/// Constraints: No constraints specified.
func (rcv *RFEmitterDetails_Full) MutateNumChannels(n int32) bool {
	return rcv._tab.MutateInt32Slot(46, n)
}

/// Number of bits.
/// Example: /// Example: 256
/// Constraints: No constraints specified.
func (rcv *RFEmitterDetails_Full) NumBits() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(48))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

/// Number of bits.
/// Example: /// Example: 256
/// Constraints: No constraints specified.
func (rcv *RFEmitterDetails_Full) MutateNumBits(n int32) bool {
	return rcv._tab.MutateInt32Slot(48, n)
}

/// Array with 1-2 values specifying the length and width (for rectangular) and just length for dipole antennas in meters.
/// Example: /// Example: [1.1, 2.2]
/// Constraints: No constraints specified.
func (rcv *RFEmitterDetails_Full) AntennaSize(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(50))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *RFEmitterDetails_Full) AntennaSizeLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(50))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

/// Array with 1-2 values specifying the length and width (for rectangular) and just length for dipole antennas in meters.
/// Example: /// Example: [1.1, 2.2]
/// Constraints: No constraints specified.
/// For parabolic/dish antennas, the diameter of the antenna in meters.
/// Example: /// Example: 20.23
/// Constraints: No constraints specified.
func (rcv *RFEmitterDetails_Full) AntennaDiameter() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(52))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// For parabolic/dish antennas, the diameter of the antenna in meters.
/// Example: /// Example: 20.23
/// Constraints: No constraints specified.
func (rcv *RFEmitterDetails_Full) MutateAntennaDiameter(n float64) bool {
	return rcv._tab.MutateFloat64Slot(52, n)
}

/// Notes on the RF Emitter.
/// Example: /// Example: NOTES
/// Constraints: Minimum length = 0, Maximum length = 2147483647
func (rcv *RFEmitterDetails_Full) Notes() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(54))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Notes on the RF Emitter.
/// Example: /// Example: NOTES
/// Constraints: Minimum length = 0, Maximum length = 2147483647
/// Secondary notes on the RF Emitter.
/// Example: /// Example: MORE_NOTES
/// Constraints: Minimum length = 0, Maximum length = 2147483647
func (rcv *RFEmitterDetails_Full) SecondaryNotes() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(56))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Secondary notes on the RF Emitter.
/// Example: /// Example: MORE_NOTES
/// Constraints: Minimum length = 0, Maximum length = 2147483647
/// Detailed description of the RF Emitter.
/// Example: /// Example: DESCRIPTION
/// Constraints: Minimum length = 0, Maximum length = 2147483647
func (rcv *RFEmitterDetails_Full) Description() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(58))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Detailed description of the RF Emitter.
/// Example: /// Example: DESCRIPTION
/// Constraints: Minimum length = 0, Maximum length = 2147483647
/// Array of URLs containing additional information on this RF Emitter.
/// Example: /// Example: ['TAG1', 'TAG2']
/// Constraints: No constraints specified.
func (rcv *RFEmitterDetails_Full) Urls(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(60))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *RFEmitterDetails_Full) UrlsLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(60))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

/// Array of URLs containing additional information on this RF Emitter.
/// Example: /// Example: ['TAG1', 'TAG2']
/// Constraints: No constraints specified.
/// Source of the data.
/// Example: /// Example: Bluestaq
/// Constraints: Minimum length = 1, Maximum length = 64
func (rcv *RFEmitterDetails_Full) Source() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(62))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Source of the data.
/// Example: /// Example: Bluestaq
/// Constraints: Minimum length = 1, Maximum length = 64
/// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
/// Example: /// Example: THIRD_PARTY_DATASOURCE
/// Constraints: Minimum length = 0, Maximum length = 64
func (rcv *RFEmitterDetails_Full) Origin() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(64))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
/// Example: /// Example: THIRD_PARTY_DATASOURCE
/// Constraints: Minimum length = 0, Maximum length = 64
/// The originating source network on which this record was created, auto-populated by the system.
/// Example: /// Example: ORIG
/// Constraints: Minimum length = 1, Maximum length = 32
func (rcv *RFEmitterDetails_Full) OrigNetwork() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(66))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The originating source network on which this record was created, auto-populated by the system.
/// Example: /// Example: ORIG
/// Constraints: Minimum length = 1, Maximum length = 32
/// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
/// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
/// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
/// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
/// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
/// Example: /// Example: TEST
/// Constraints: Minimum length = 1, Maximum length = 32
func (rcv *RFEmitterDetails_Full) DataMode() RFEmitterDetails_Full_dataMode_Enum {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(68))
	if o != 0 {
		return RFEmitterDetails_Full_dataMode_Enum(rcv._tab.GetInt8(o + rcv._tab.Pos))
	}
	return 0
}

/// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
/// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
/// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
/// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
/// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
/// Example: /// Example: TEST
/// Constraints: Minimum length = 1, Maximum length = 32
func (rcv *RFEmitterDetails_Full) MutateDataMode(n RFEmitterDetails_Full_dataMode_Enum) bool {
	return rcv._tab.MutateInt8Slot(68, int8(n))
}

/// Time the row was created in the database, auto-populated by the system.
/// Example: /// Example: 2018-01-01T16:00:00.123Z
/// Constraints: No constraints specified.
func (rcv *RFEmitterDetails_Full) CreatedAt() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(70))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Time the row was created in the database, auto-populated by the system.
/// Example: /// Example: 2018-01-01T16:00:00.123Z
/// Constraints: No constraints specified.
/// Application user who created the row in the database, auto-populated by the system.
/// Example: /// Example: some.user
/// Constraints: Minimum length = 1, Maximum length = 64
func (rcv *RFEmitterDetails_Full) CreatedBy() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(72))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Application user who created the row in the database, auto-populated by the system.
/// Example: /// Example: some.user
/// Constraints: Minimum length = 1, Maximum length = 64
/// Time the row was last updated in the database, auto-populated by the system.
/// Example: /// Example: 2018-01-01T16:00:00.123Z
/// Constraints: No constraints specified.
func (rcv *RFEmitterDetails_Full) UpdatedAt() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(74))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Time the row was last updated in the database, auto-populated by the system.
/// Example: /// Example: 2018-01-01T16:00:00.123Z
/// Constraints: No constraints specified.
/// Application user who updated the row in the database, auto-populated by the system.
/// Example: /// Example: some.user
/// Constraints: Minimum length = 0, Maximum length = 64
func (rcv *RFEmitterDetails_Full) UpdatedBy() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(76))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Application user who updated the row in the database, auto-populated by the system.
/// Example: /// Example: some.user
/// Constraints: Minimum length = 0, Maximum length = 64
/// No description provided.
/// Example: /// Example: No example provided.
/// Constraints: No constraints specified.
func (rcv *RFEmitterDetails_Full) ProductionFacilityLocation() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(78))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// No description provided.
/// Example: /// Example: No example provided.
/// Constraints: No constraints specified.
/// No description provided.
/// Example: /// Example: No example provided.
/// Constraints: No constraints specified.
func (rcv *RFEmitterDetails_Full) ManufacturerOrg() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(80))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// No description provided.
/// Example: /// Example: No example provided.
/// Constraints: No constraints specified.
func RFEmitterDetails_FullStart(builder *flatbuffers.Builder) {
	builder.StartObject(39)
}
func RFEmitterDetails_FullAddId(builder *flatbuffers.Builder, id flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(id), 0)
}
func RFEmitterDetails_FullAddIdRfemitter(builder *flatbuffers.Builder, idRfemitter flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(idRfemitter), 0)
}
func RFEmitterDetails_FullAddClassificationMarking(builder *flatbuffers.Builder, classificationMarking flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(classificationMarking), 0)
}
func RFEmitterDetails_FullAddDesignator(builder *flatbuffers.Builder, designator flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(3, flatbuffers.UOffsetT(designator), 0)
}
func RFEmitterDetails_FullAddAltName(builder *flatbuffers.Builder, altName flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(4, flatbuffers.UOffsetT(altName), 0)
}
func RFEmitterDetails_FullAddFamily(builder *flatbuffers.Builder, family flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(5, flatbuffers.UOffsetT(family), 0)
}
func RFEmitterDetails_FullAddProductionFacilityName(builder *flatbuffers.Builder, productionFacilityName flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(6, flatbuffers.UOffsetT(productionFacilityName), 0)
}
func RFEmitterDetails_FullAddAlternateFacilityName(builder *flatbuffers.Builder, alternateFacilityName flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(7, flatbuffers.UOffsetT(alternateFacilityName), 0)
}
func RFEmitterDetails_FullAddManufacturerOrgId(builder *flatbuffers.Builder, manufacturerOrgId flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(8, flatbuffers.UOffsetT(manufacturerOrgId), 0)
}
func RFEmitterDetails_FullAddProductionFacilityLocationId(builder *flatbuffers.Builder, productionFacilityLocationId flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(9, flatbuffers.UOffsetT(productionFacilityLocationId), 0)
}
func RFEmitterDetails_FullAddSystemSensitivityStart(builder *flatbuffers.Builder, systemSensitivityStart float64) {
	builder.PrependFloat64Slot(10, systemSensitivityStart, 0.0)
}
func RFEmitterDetails_FullAddSystemSensitivityEnd(builder *flatbuffers.Builder, systemSensitivityEnd float64) {
	builder.PrependFloat64Slot(11, systemSensitivityEnd, 0.0)
}
func RFEmitterDetails_FullAddReceiverType(builder *flatbuffers.Builder, receiverType flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(12, flatbuffers.UOffsetT(receiverType), 0)
}
func RFEmitterDetails_FullAddReceiverSensitivity(builder *flatbuffers.Builder, receiverSensitivity float64) {
	builder.PrependFloat64Slot(13, receiverSensitivity, 0.0)
}
func RFEmitterDetails_FullAddReceiverBandwidth(builder *flatbuffers.Builder, receiverBandwidth float64) {
	builder.PrependFloat64Slot(14, receiverBandwidth, 0.0)
}
func RFEmitterDetails_FullAddTransmitterFrequency(builder *flatbuffers.Builder, transmitterFrequency float64) {
	builder.PrependFloat64Slot(15, transmitterFrequency, 0.0)
}
func RFEmitterDetails_FullAddTransmitterBandwidth(builder *flatbuffers.Builder, transmitterBandwidth float64) {
	builder.PrependFloat64Slot(16, transmitterBandwidth, 0.0)
}
func RFEmitterDetails_FullAddTransmitPower(builder *flatbuffers.Builder, transmitPower float64) {
	builder.PrependFloat64Slot(17, transmitPower, 0.0)
}
func RFEmitterDetails_FullAddBarrageNoiseBandwidth(builder *flatbuffers.Builder, barrageNoiseBandwidth float64) {
	builder.PrependFloat64Slot(18, barrageNoiseBandwidth, 0.0)
}
func RFEmitterDetails_FullAddDopplerNoise(builder *flatbuffers.Builder, dopplerNoise float64) {
	builder.PrependFloat64Slot(19, dopplerNoise, 0.0)
}
func RFEmitterDetails_FullAddDrfmInstantaneousBandwidth(builder *flatbuffers.Builder, drfmInstantaneousBandwidth float64) {
	builder.PrependFloat64Slot(20, drfmInstantaneousBandwidth, 0.0)
}
func RFEmitterDetails_FullAddNumChannels(builder *flatbuffers.Builder, numChannels int32) {
	builder.PrependInt32Slot(21, numChannels, 0)
}
func RFEmitterDetails_FullAddNumBits(builder *flatbuffers.Builder, numBits int32) {
	builder.PrependInt32Slot(22, numBits, 0)
}
func RFEmitterDetails_FullAddAntennaSize(builder *flatbuffers.Builder, antennaSize flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(23, flatbuffers.UOffsetT(antennaSize), 0)
}
func RFEmitterDetails_FullStartAntennaSizeVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func RFEmitterDetails_FullAddAntennaDiameter(builder *flatbuffers.Builder, antennaDiameter float64) {
	builder.PrependFloat64Slot(24, antennaDiameter, 0.0)
}
func RFEmitterDetails_FullAddNotes(builder *flatbuffers.Builder, notes flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(25, flatbuffers.UOffsetT(notes), 0)
}
func RFEmitterDetails_FullAddSecondaryNotes(builder *flatbuffers.Builder, secondaryNotes flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(26, flatbuffers.UOffsetT(secondaryNotes), 0)
}
func RFEmitterDetails_FullAddDescription(builder *flatbuffers.Builder, description flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(27, flatbuffers.UOffsetT(description), 0)
}
func RFEmitterDetails_FullAddUrls(builder *flatbuffers.Builder, urls flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(28, flatbuffers.UOffsetT(urls), 0)
}
func RFEmitterDetails_FullStartUrlsVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func RFEmitterDetails_FullAddSource(builder *flatbuffers.Builder, source flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(29, flatbuffers.UOffsetT(source), 0)
}
func RFEmitterDetails_FullAddOrigin(builder *flatbuffers.Builder, origin flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(30, flatbuffers.UOffsetT(origin), 0)
}
func RFEmitterDetails_FullAddOrigNetwork(builder *flatbuffers.Builder, origNetwork flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(31, flatbuffers.UOffsetT(origNetwork), 0)
}
func RFEmitterDetails_FullAddDataMode(builder *flatbuffers.Builder, dataMode RFEmitterDetails_Full_dataMode_Enum) {
	builder.PrependInt8Slot(32, int8(dataMode), 0)
}
func RFEmitterDetails_FullAddCreatedAt(builder *flatbuffers.Builder, createdAt flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(33, flatbuffers.UOffsetT(createdAt), 0)
}
func RFEmitterDetails_FullAddCreatedBy(builder *flatbuffers.Builder, createdBy flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(34, flatbuffers.UOffsetT(createdBy), 0)
}
func RFEmitterDetails_FullAddUpdatedAt(builder *flatbuffers.Builder, updatedAt flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(35, flatbuffers.UOffsetT(updatedAt), 0)
}
func RFEmitterDetails_FullAddUpdatedBy(builder *flatbuffers.Builder, updatedBy flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(36, flatbuffers.UOffsetT(updatedBy), 0)
}
func RFEmitterDetails_FullAddProductionFacilityLocation(builder *flatbuffers.Builder, productionFacilityLocation flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(37, flatbuffers.UOffsetT(productionFacilityLocation), 0)
}
func RFEmitterDetails_FullAddManufacturerOrg(builder *flatbuffers.Builder, manufacturerOrg flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(38, flatbuffers.UOffsetT(manufacturerOrg), 0)
}
func RFEmitterDetails_FullEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
