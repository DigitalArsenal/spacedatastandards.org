// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package StateVector_Ingest_sourcedDataTypes_Enum

import "strconv"

type StateVector_Ingest_sourcedDataTypes_Enum int8

const (
	/// No description available.
	StateVector_Ingest_sourcedDataTypes_EnumEO    StateVector_Ingest_sourcedDataTypes_Enum = 0
	/// No description available.
	StateVector_Ingest_sourcedDataTypes_EnumRADAR StateVector_Ingest_sourcedDataTypes_Enum = 1
	/// No description available.
	StateVector_Ingest_sourcedDataTypes_EnumRF    StateVector_Ingest_sourcedDataTypes_Enum = 2
	/// No description available.
	StateVector_Ingest_sourcedDataTypes_EnumDOA   StateVector_Ingest_sourcedDataTypes_Enum = 3
	/// No description available.
	StateVector_Ingest_sourcedDataTypes_EnumELSET StateVector_Ingest_sourcedDataTypes_Enum = 4
	/// No description available.
	StateVector_Ingest_sourcedDataTypes_EnumSV    StateVector_Ingest_sourcedDataTypes_Enum = 5
)

var EnumNamesStateVector_Ingest_sourcedDataTypes_Enum = map[StateVector_Ingest_sourcedDataTypes_Enum]string{
	StateVector_Ingest_sourcedDataTypes_EnumEO:    "EO",
	StateVector_Ingest_sourcedDataTypes_EnumRADAR: "RADAR",
	StateVector_Ingest_sourcedDataTypes_EnumRF:    "RF",
	StateVector_Ingest_sourcedDataTypes_EnumDOA:   "DOA",
	StateVector_Ingest_sourcedDataTypes_EnumELSET: "ELSET",
	StateVector_Ingest_sourcedDataTypes_EnumSV:    "SV",
}

var EnumValuesStateVector_Ingest_sourcedDataTypes_Enum = map[string]StateVector_Ingest_sourcedDataTypes_Enum{
	"EO":    StateVector_Ingest_sourcedDataTypes_EnumEO,
	"RADAR": StateVector_Ingest_sourcedDataTypes_EnumRADAR,
	"RF":    StateVector_Ingest_sourcedDataTypes_EnumRF,
	"DOA":   StateVector_Ingest_sourcedDataTypes_EnumDOA,
	"ELSET": StateVector_Ingest_sourcedDataTypes_EnumELSET,
	"SV":    StateVector_Ingest_sourcedDataTypes_EnumSV,
}

func (v StateVector_Ingest_sourcedDataTypes_Enum) String() string {
	if s, ok := EnumNamesStateVector_Ingest_sourcedDataTypes_Enum[v]; ok {
		return s
	}
	return "StateVector_Ingest_sourcedDataTypes_Enum(" + strconv.FormatInt(int64(v), 10) + ")"
}
