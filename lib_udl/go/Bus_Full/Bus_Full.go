// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package Bus_Full

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

/// /// A bus is the physical and software infrastructure backbone to which on-orbit satellite payloads are attached for power, control, and other support functions.
type Bus_Full struct {
	_tab flatbuffers.Table
}

const Bus_FullIdentifier = "BUSF"

func GetRootAsBus_Full(buf []byte, offset flatbuffers.UOffsetT) *Bus_Full {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &Bus_Full{}
	x.Init(buf, n+offset)
	return x
}

func FinishBus_FullBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	identifierBytes := []byte(Bus_FullIdentifier)
	builder.FinishWithFileIdentifier(offset, identifierBytes)
}

func Bus_FullBufferHasIdentifier(buf []byte) bool {
	return flatbuffers.BufferHasIdentifier(buf, Bus_FullIdentifier)
}

func GetSizePrefixedRootAsBus_Full(buf []byte, offset flatbuffers.UOffsetT) *Bus_Full {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &Bus_Full{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedBus_FullBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	identifierBytes := []byte(Bus_FullIdentifier)
	builder.FinishSizePrefixedWithFileIdentifier(offset, identifierBytes)
}

func SizePrefixedBus_FullBufferHasIdentifier(buf []byte) bool {
	return flatbuffers.SizePrefixedBufferHasIdentifier(buf, Bus_FullIdentifier)
}

func (rcv *Bus_Full) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *Bus_Full) Table() flatbuffers.Table {
	return rcv._tab
}

/// Unique identifier of the record, auto-generated by the system.
/// Example: /// Example: BUS-ID
/// Constraints: Minimum length = 1, Maximum length = 36
func (rcv *Bus_Full) Id() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Unique identifier of the record, auto-generated by the system.
/// Example: /// Example: BUS-ID
/// Constraints: Minimum length = 1, Maximum length = 36
/// Name of this bus.
/// Example: /// Example: Example name
/// Constraints: Minimum length = 1, Maximum length = 128
func (rcv *Bus_Full) Name() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Name of this bus.
/// Example: /// Example: Example name
/// Constraints: Minimum length = 1, Maximum length = 128
/// Classification marking of the data in IC/CAPCO Portion-marked format.
/// Example: /// Example: U
/// Constraints: Minimum length = 1, Maximum length = 128
func (rcv *Bus_Full) ClassificationMarking() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Classification marking of the data in IC/CAPCO Portion-marked format.
/// Example: /// Example: U
/// Constraints: Minimum length = 1, Maximum length = 128
/// ID of the parent entity for this bus.
/// Example: /// Example: 0167f577-e06c-358e-85aa-0a07a730bdd0
/// Constraints: Minimum length = 0, Maximum length = 36
func (rcv *Bus_Full) IdEntity() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// ID of the parent entity for this bus.
/// Example: /// Example: 0167f577-e06c-358e-85aa-0a07a730bdd0
/// Constraints: Minimum length = 0, Maximum length = 36
/// Type of this bus.
/// Example: /// Example: Example type
/// Constraints: Minimum length = 0, Maximum length = 128
func (rcv *Bus_Full) Type() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Type of this bus.
/// Example: /// Example: Example type
/// Constraints: Minimum length = 0, Maximum length = 128
/// Maximum mass at launch, lower bounds, in kilograms.
/// Example: /// Example: 10.1
/// Constraints: No constraints specified.
func (rcv *Bus_Full) MaxLaunchMassLower() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Maximum mass at launch, lower bounds, in kilograms.
/// Example: /// Example: 10.1
/// Constraints: No constraints specified.
func (rcv *Bus_Full) MutateMaxLaunchMassLower(n float64) bool {
	return rcv._tab.MutateFloat64Slot(14, n)
}

/// Maximum mass at launch, upper bounds, in kilograms.
/// Example: /// Example: 10.1
/// Constraints: No constraints specified.
func (rcv *Bus_Full) MaxLaunchMassUpper() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Maximum mass at launch, upper bounds, in kilograms.
/// Example: /// Example: 10.1
/// Constraints: No constraints specified.
func (rcv *Bus_Full) MutateMaxLaunchMassUpper(n float64) bool {
	return rcv._tab.MutateFloat64Slot(16, n)
}

/// Maximum mass on station at beginning of life, in kilograms.
/// Example: /// Example: 10.1
/// Constraints: No constraints specified.
func (rcv *Bus_Full) MaxBolstationMass() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(18))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Maximum mass on station at beginning of life, in kilograms.
/// Example: /// Example: 10.1
/// Constraints: No constraints specified.
func (rcv *Bus_Full) MutateMaxBolstationMass(n float64) bool {
	return rcv._tab.MutateFloat64Slot(18, n)
}

/// Average mass available on this bus for payloads, in kilograms.
/// Example: /// Example: 10.1
/// Constraints: No constraints specified.
func (rcv *Bus_Full) AvgPayloadMass() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(20))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Average mass available on this bus for payloads, in kilograms.
/// Example: /// Example: 10.1
/// Constraints: No constraints specified.
func (rcv *Bus_Full) MutateAvgPayloadMass(n float64) bool {
	return rcv._tab.MutateFloat64Slot(20, n)
}

/// Maximum payload mass available, in kilograms.
/// Example: /// Example: 10.1
/// Constraints: No constraints specified.
func (rcv *Bus_Full) MaxPayloadMass() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(22))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Maximum payload mass available, in kilograms.
/// Example: /// Example: 10.1
/// Constraints: No constraints specified.
func (rcv *Bus_Full) MutateMaxPayloadMass(n float64) bool {
	return rcv._tab.MutateFloat64Slot(22, n)
}

/// Minimum mass of this bus without payloads or fuel, in kilograms.
/// Example: /// Example: 2858.1
/// Constraints: No constraints specified.
func (rcv *Bus_Full) MinDryMass() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(24))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Minimum mass of this bus without payloads or fuel, in kilograms.
/// Example: /// Example: 2858.1
/// Constraints: No constraints specified.
func (rcv *Bus_Full) MutateMinDryMass(n float64) bool {
	return rcv._tab.MutateFloat64Slot(24, n)
}

/// Average mass of this bus without payloads or fuel, in kilograms.
/// Example: /// Example: 2879.1
/// Constraints: No constraints specified.
func (rcv *Bus_Full) AvgDryMass() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(26))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Average mass of this bus without payloads or fuel, in kilograms.
/// Example: /// Example: 2879.1
/// Constraints: No constraints specified.
func (rcv *Bus_Full) MutateAvgDryMass(n float64) bool {
	return rcv._tab.MutateFloat64Slot(26, n)
}

/// Median mass of this bus without payloads or fuel, in kilograms.
/// Example: /// Example: 2950.1
/// Constraints: No constraints specified.
func (rcv *Bus_Full) MedianDryMass() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(28))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Median mass of this bus without payloads or fuel, in kilograms.
/// Example: /// Example: 2950.1
/// Constraints: No constraints specified.
func (rcv *Bus_Full) MutateMedianDryMass(n float64) bool {
	return rcv._tab.MutateFloat64Slot(28, n)
}

/// Maximum mass of this bus without payloads or fuel, in kilograms.
/// Example: /// Example: 2900.1
/// Constraints: No constraints specified.
func (rcv *Bus_Full) MaxDryMass() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(30))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Maximum mass of this bus without payloads or fuel, in kilograms.
/// Example: /// Example: 2900.1
/// Constraints: No constraints specified.
func (rcv *Bus_Full) MutateMaxDryMass(n float64) bool {
	return rcv._tab.MutateFloat64Slot(30, n)
}

/// Minimum mass of this bus with fuel, but without payloads, in kilograms.
/// Example: /// Example: 5192.1
/// Constraints: No constraints specified.
func (rcv *Bus_Full) MinWetMass() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(32))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Minimum mass of this bus with fuel, but without payloads, in kilograms.
/// Example: /// Example: 5192.1
/// Constraints: No constraints specified.
func (rcv *Bus_Full) MutateMinWetMass(n float64) bool {
	return rcv._tab.MutateFloat64Slot(32, n)
}

/// Average mass of this bus with fuel, but without payloads, in kilograms.
/// Example: /// Example: 5246.1
/// Constraints: No constraints specified.
func (rcv *Bus_Full) AvgWetMass() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(34))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Average mass of this bus with fuel, but without payloads, in kilograms.
/// Example: /// Example: 5246.1
/// Constraints: No constraints specified.
func (rcv *Bus_Full) MutateAvgWetMass(n float64) bool {
	return rcv._tab.MutateFloat64Slot(34, n)
}

/// Median mass of this bus with fuel, but without payloads, in kilograms.
/// Example: /// Example: 5260.1
/// Constraints: No constraints specified.
func (rcv *Bus_Full) MedianWetMass() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(36))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Median mass of this bus with fuel, but without payloads, in kilograms.
/// Example: /// Example: 5260.1
/// Constraints: No constraints specified.
func (rcv *Bus_Full) MutateMedianWetMass(n float64) bool {
	return rcv._tab.MutateFloat64Slot(36, n)
}

/// Maximum mass of this bus with fuel, but without payloads, in kilograms.
/// Example: /// Example: 5300.0
/// Constraints: No constraints specified.
func (rcv *Bus_Full) MaxWetMass() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(38))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Maximum mass of this bus with fuel, but without payloads, in kilograms.
/// Example: /// Example: 5300.0
/// Constraints: No constraints specified.
func (rcv *Bus_Full) MutateMaxWetMass(n float64) bool {
	return rcv._tab.MutateFloat64Slot(38, n)
}

/// Maximum power at beginning of life, lower bounds, in kilowatts.
/// Example: /// Example: 10.1
/// Constraints: No constraints specified.
func (rcv *Bus_Full) MaxBolpowerLower() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(40))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Maximum power at beginning of life, lower bounds, in kilowatts.
/// Example: /// Example: 10.1
/// Constraints: No constraints specified.
func (rcv *Bus_Full) MutateMaxBolpowerLower(n float64) bool {
	return rcv._tab.MutateFloat64Slot(40, n)
}

/// Maximum power at beginning of life, upper bounds, in kilowatts.
/// Example: /// Example: 10.1
/// Constraints: No constraints specified.
func (rcv *Bus_Full) MaxBolpowerUpper() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(42))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Maximum power at beginning of life, upper bounds, in kilowatts.
/// Example: /// Example: 10.1
/// Constraints: No constraints specified.
func (rcv *Bus_Full) MutateMaxBolpowerUpper(n float64) bool {
	return rcv._tab.MutateFloat64Slot(42, n)
}

/// Maximum power at end of life, lower bounds, in kilowatts.
/// Example: /// Example: 10.1
/// Constraints: No constraints specified.
func (rcv *Bus_Full) MaxEolpowerLower() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(44))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Maximum power at end of life, lower bounds, in kilowatts.
/// Example: /// Example: 10.1
/// Constraints: No constraints specified.
func (rcv *Bus_Full) MutateMaxEolpowerLower(n float64) bool {
	return rcv._tab.MutateFloat64Slot(44, n)
}

/// Maximum power at end of life, upper bounds, in kilowatts.
/// Example: /// Example: 10.1
/// Constraints: No constraints specified.
func (rcv *Bus_Full) MaxEolpowerUpper() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(46))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Maximum power at end of life, upper bounds, in kilowatts.
/// Example: /// Example: 10.1
/// Constraints: No constraints specified.
func (rcv *Bus_Full) MutateMaxEolpowerUpper(n float64) bool {
	return rcv._tab.MutateFloat64Slot(46, n)
}

/// Average power available on this bus, in kilowatts.
/// Example: /// Example: 10.1
/// Constraints: No constraints specified.
func (rcv *Bus_Full) AvgSpacecraftPower() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(48))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Average power available on this bus, in kilowatts.
/// Example: /// Example: 10.1
/// Constraints: No constraints specified.
func (rcv *Bus_Full) MutateAvgSpacecraftPower(n float64) bool {
	return rcv._tab.MutateFloat64Slot(48, n)
}

/// Maximum power available on this bus, in kilowatts.
/// Example: /// Example: 10.1
/// Constraints: No constraints specified.
func (rcv *Bus_Full) MaxSpacecraftPower() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(50))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Maximum power available on this bus, in kilowatts.
/// Example: /// Example: 10.1
/// Constraints: No constraints specified.
func (rcv *Bus_Full) MutateMaxSpacecraftPower(n float64) bool {
	return rcv._tab.MutateFloat64Slot(50, n)
}

/// Orbit averaged power (the power averaged over one orbit) available on this bus, in kilowatts.
/// Example: /// Example: 10.1
/// Constraints: No constraints specified.
func (rcv *Bus_Full) OapSpacecraftPower() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(52))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Orbit averaged power (the power averaged over one orbit) available on this bus, in kilowatts.
/// Example: /// Example: 10.1
/// Constraints: No constraints specified.
func (rcv *Bus_Full) MutateOapSpacecraftPower(n float64) bool {
	return rcv._tab.MutateFloat64Slot(52, n)
}

/// Average power available on this bus for payloads, in kilowatts.
/// Example: /// Example: 10.1
/// Constraints: No constraints specified.
func (rcv *Bus_Full) AvgPayloadPower() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(54))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Average power available on this bus for payloads, in kilowatts.
/// Example: /// Example: 10.1
/// Constraints: No constraints specified.
func (rcv *Bus_Full) MutateAvgPayloadPower(n float64) bool {
	return rcv._tab.MutateFloat64Slot(54, n)
}

/// Maximum payload power available, in kilowatts.
/// Example: /// Example: 10.1
/// Constraints: No constraints specified.
func (rcv *Bus_Full) MaxPayloadPower() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(56))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Maximum payload power available, in kilowatts.
/// Example: /// Example: 10.1
/// Constraints: No constraints specified.
func (rcv *Bus_Full) MutateMaxPayloadPower(n float64) bool {
	return rcv._tab.MutateFloat64Slot(56, n)
}

/// Orbit averaged power (the power averaged over one orbit) available on this bus for payloads, in kilowatts.
/// Example: /// Example: 10.1
/// Constraints: No constraints specified.
func (rcv *Bus_Full) OapPayloadPower() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(58))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Orbit averaged power (the power averaged over one orbit) available on this bus for payloads, in kilowatts.
/// Example: /// Example: 10.1
/// Constraints: No constraints specified.
func (rcv *Bus_Full) MutateOapPayloadPower(n float64) bool {
	return rcv._tab.MutateFloat64Slot(58, n)
}

/// Body dimension in X direction pertaining to length, in meters.
/// Example: /// Example: 10.1
/// Constraints: No constraints specified.
func (rcv *Bus_Full) BodyDimensionX() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(60))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Body dimension in X direction pertaining to length, in meters.
/// Example: /// Example: 10.1
/// Constraints: No constraints specified.
func (rcv *Bus_Full) MutateBodyDimensionX(n float64) bool {
	return rcv._tab.MutateFloat64Slot(60, n)
}

/// Body dimension in Y direction pertaining to height, in meters.
/// Example: /// Example: 10.1
/// Constraints: No constraints specified.
func (rcv *Bus_Full) BodyDimensionY() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(62))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Body dimension in Y direction pertaining to height, in meters.
/// Example: /// Example: 10.1
/// Constraints: No constraints specified.
func (rcv *Bus_Full) MutateBodyDimensionY(n float64) bool {
	return rcv._tab.MutateFloat64Slot(62, n)
}

/// Body dimension in Z direction pertaining to width, in meters.
/// Example: /// Example: 10.1
/// Constraints: No constraints specified.
func (rcv *Bus_Full) BodyDimensionZ() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(64))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Body dimension in Z direction pertaining to width, in meters.
/// Example: /// Example: 10.1
/// Constraints: No constraints specified.
func (rcv *Bus_Full) MutateBodyDimensionZ(n float64) bool {
	return rcv._tab.MutateFloat64Slot(64, n)
}

/// The radial dimension available on this bus for payloads, in meters.
/// Example: /// Example: 1.1
/// Constraints: No constraints specified.
func (rcv *Bus_Full) PayloadDimensionX() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(66))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// The radial dimension available on this bus for payloads, in meters.
/// Example: /// Example: 1.1
/// Constraints: No constraints specified.
func (rcv *Bus_Full) MutatePayloadDimensionX(n float64) bool {
	return rcv._tab.MutateFloat64Slot(66, n)
}

/// The in-track dimension available on this bus for payloads, in meters.
/// Example: /// Example: 1.1
/// Constraints: No constraints specified.
func (rcv *Bus_Full) PayloadDimensionY() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(68))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// The in-track dimension available on this bus for payloads, in meters.
/// Example: /// Example: 1.1
/// Constraints: No constraints specified.
func (rcv *Bus_Full) MutatePayloadDimensionY(n float64) bool {
	return rcv._tab.MutateFloat64Slot(68, n)
}

/// The cross-track dimension available on this bus for payloads, in meters.
/// Example: /// Example: 1.1
/// Constraints: No constraints specified.
func (rcv *Bus_Full) PayloadDimensionZ() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(70))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// The cross-track dimension available on this bus for payloads, in meters.
/// Example: /// Example: 1.1
/// Constraints: No constraints specified.
func (rcv *Bus_Full) MutatePayloadDimensionZ(n float64) bool {
	return rcv._tab.MutateFloat64Slot(70, n)
}

/// The volume available on this bus for payloads, in cubic meters.
/// Example: /// Example: 1.1
/// Constraints: No constraints specified.
func (rcv *Bus_Full) PayloadVolume() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(72))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// The volume available on this bus for payloads, in cubic meters.
/// Example: /// Example: 1.1
/// Constraints: No constraints specified.
func (rcv *Bus_Full) MutatePayloadVolume(n float64) bool {
	return rcv._tab.MutateFloat64Slot(72, n)
}

/// Launch envelope dimension in X direction, in meters.
/// Example: /// Example: 10.1
/// Constraints: No constraints specified.
func (rcv *Bus_Full) LaunchEnvelopeDimensionX() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(74))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Launch envelope dimension in X direction, in meters.
/// Example: /// Example: 10.1
/// Constraints: No constraints specified.
func (rcv *Bus_Full) MutateLaunchEnvelopeDimensionX(n float64) bool {
	return rcv._tab.MutateFloat64Slot(74, n)
}

/// Launch envelope dimension in Y direction, in meters.
/// Example: /// Example: 10.1
/// Constraints: No constraints specified.
func (rcv *Bus_Full) LaunchEnvelopeDimensionY() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(76))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Launch envelope dimension in Y direction, in meters.
/// Example: /// Example: 10.1
/// Constraints: No constraints specified.
func (rcv *Bus_Full) MutateLaunchEnvelopeDimensionY(n float64) bool {
	return rcv._tab.MutateFloat64Slot(76, n)
}

/// Launch envelope dimension in Z direction, in meters.
/// Example: /// Example: 10.1
/// Constraints: No constraints specified.
func (rcv *Bus_Full) LaunchEnvelopeDimensionZ() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(78))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Launch envelope dimension in Z direction, in meters.
/// Example: /// Example: 10.1
/// Constraints: No constraints specified.
func (rcv *Bus_Full) MutateLaunchEnvelopeDimensionZ(n float64) bool {
	return rcv._tab.MutateFloat64Slot(78, n)
}

/// The number of orbit types this bus can support.
/// Example: /// Example: 3
/// Constraints: No constraints specified.
func (rcv *Bus_Full) NumOrbitType() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(80))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

/// The number of orbit types this bus can support.
/// Example: /// Example: 3
/// Constraints: No constraints specified.
func (rcv *Bus_Full) MutateNumOrbitType(n int32) bool {
	return rcv._tab.MutateInt32Slot(80, n)
}

/// Array of orbit types this bus can support (e.g. GEO, LEO, etc.). Must contain the same number of elements as the value of numOrbitType.
/// Example: /// Example: ['LEO', 'HEO', 'GEO']
/// Constraints: No constraints specified.
func (rcv *Bus_Full) OrbitTypes(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(82))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *Bus_Full) OrbitTypesLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(82))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

/// Array of orbit types this bus can support (e.g. GEO, LEO, etc.). Must contain the same number of elements as the value of numOrbitType.
/// Example: /// Example: ['LEO', 'HEO', 'GEO']
/// Constraints: No constraints specified.
/// Unique identifier of the organization which manufactures the telemetry tracking and command subsystem for this bus.
/// Example: /// Example: TELEMETRYTRACKINGMANUFACTURERORG-ID
/// Constraints: Minimum length = 0, Maximum length = 36
func (rcv *Bus_Full) TelemetryTrackingManufacturerOrgId() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(84))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Unique identifier of the organization which manufactures the telemetry tracking and command subsystem for this bus.
/// Example: /// Example: TELEMETRYTRACKINGMANUFACTURERORG-ID
/// Constraints: Minimum length = 0, Maximum length = 36
/// Unique identifier of the organization which manufactures the main onboard computer for this bus.
/// Example: /// Example: MAINCOMPUTERMANUFACTURERORG-ID
/// Constraints: Minimum length = 0, Maximum length = 36
func (rcv *Bus_Full) MainComputerManufacturerOrgId() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(86))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Unique identifier of the organization which manufactures the main onboard computer for this bus.
/// Example: /// Example: MAINCOMPUTERMANUFACTURERORG-ID
/// Constraints: Minimum length = 0, Maximum length = 36
/// Unique identifier of the organization which manufactures this bus.
/// Example: /// Example: MANUFACTURERORG-ID
/// Constraints: Minimum length = 0, Maximum length = 36
func (rcv *Bus_Full) ManufacturerOrgId() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(88))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Unique identifier of the organization which manufactures this bus.
/// Example: /// Example: MANUFACTURERORG-ID
/// Constraints: Minimum length = 0, Maximum length = 36
/// Unique identifier of the organization which designs the bus kit.
/// Example: /// Example: BUSKITDESIGNERORG-ID
/// Constraints: Minimum length = 0, Maximum length = 36
func (rcv *Bus_Full) BusKitDesignerOrgId() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(90))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Unique identifier of the organization which designs the bus kit.
/// Example: /// Example: BUSKITDESIGNERORG-ID
/// Constraints: Minimum length = 0, Maximum length = 36
/// Country where this bus was manufactured. This value is typically the ISO 3166 Alpha-2 two-character country code, however it can also represent various consortiums that do not appear in the ISO document. The code must correspond to an existing country in the UDL’s country API. Call udl/country/{code} to get any associated FIPS code, ISO Alpha-3 code, or alternate code values that exist for the specified country code.
/// Example: /// Example: US
/// Constraints: Minimum length = 0, Maximum length = 4
func (rcv *Bus_Full) CountryCode() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(92))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Country where this bus was manufactured. This value is typically the ISO 3166 Alpha-2 two-character country code, however it can also represent various consortiums that do not appear in the ISO document. The code must correspond to an existing country in the UDL’s country API. Call udl/country/{code} to get any associated FIPS code, ISO Alpha-3 code, or alternate code values that exist for the specified country code.
/// Example: /// Example: US
/// Constraints: Minimum length = 0, Maximum length = 4
/// Mass category of this bus (e.g. 1 - 10 kg: Nanosatellite, 10 - 100 kg: Microsatellite, 100 - 500 kg: Minisatellite, 1000 - 2500kg: Medium satellite, etc.).
/// Example: /// Example: Nanosatellite
/// Constraints: Minimum length = 0, Maximum length = 64
func (rcv *Bus_Full) MassCategory() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(94))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Mass category of this bus (e.g. 1 - 10 kg: Nanosatellite, 10 - 100 kg: Microsatellite, 100 - 500 kg: Minisatellite, 1000 - 2500kg: Medium satellite, etc.).
/// Example: /// Example: Nanosatellite
/// Constraints: Minimum length = 0, Maximum length = 64
/// Power category of this bus (e.g. 0-1kW low power, etc).
/// Example: /// Example: low power
/// Constraints: Minimum length = 0, Maximum length = 64
func (rcv *Bus_Full) PowerCategory() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(96))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Power category of this bus (e.g. 0-1kW low power, etc).
/// Example: /// Example: low power
/// Constraints: Minimum length = 0, Maximum length = 64
/// Boolean indicating if this bus is generic.
/// Example: /// Example: False
/// Constraints: No constraints specified.
func (rcv *Bus_Full) Generic() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(98))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

/// Boolean indicating if this bus is generic.
/// Example: /// Example: False
/// Constraints: No constraints specified.
func (rcv *Bus_Full) MutateGeneric(n bool) bool {
	return rcv._tab.MutateBoolSlot(98, n)
}

/// Notes/description of the bus.
/// Example: /// Example: Dedicated small spacecraft bus.
/// Constraints: Minimum length = 0, Maximum length = 128
func (rcv *Bus_Full) Description() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(100))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Notes/description of the bus.
/// Example: /// Example: Dedicated small spacecraft bus.
/// Constraints: Minimum length = 0, Maximum length = 128
/// Attitude and Orbital Control Notes/description for the bus.
/// Example: /// Example: Example notes
/// Constraints: Minimum length = 0, Maximum length = 256
func (rcv *Bus_Full) AocsNotes() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(102))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Attitude and Orbital Control Notes/description for the bus.
/// Example: /// Example: Example notes
/// Constraints: Minimum length = 0, Maximum length = 256
/// Source of the data.
/// Example: /// Example: Bluestaq
/// Constraints: Minimum length = 1, Maximum length = 64
func (rcv *Bus_Full) Source() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(104))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Source of the data.
/// Example: /// Example: Bluestaq
/// Constraints: Minimum length = 1, Maximum length = 64
/// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
/// Example: /// Example: THIRD_PARTY_DATASOURCE
/// Constraints: Minimum length = 0, Maximum length = 64
func (rcv *Bus_Full) Origin() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(106))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
/// Example: /// Example: THIRD_PARTY_DATASOURCE
/// Constraints: Minimum length = 0, Maximum length = 64
/// The originating source network on which this record was created, auto-populated by the system.
/// Example: /// Example: ORIG
/// Constraints: Minimum length = 1, Maximum length = 32
func (rcv *Bus_Full) OrigNetwork() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(108))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The originating source network on which this record was created, auto-populated by the system.
/// Example: /// Example: ORIG
/// Constraints: Minimum length = 1, Maximum length = 32
/// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
/// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
/// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
/// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
/// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
/// Example: /// Example: TEST
/// Constraints: Minimum length = 1, Maximum length = 32
func (rcv *Bus_Full) DataMode() Bus_Full_dataMode_Enum {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(110))
	if o != 0 {
		return Bus_Full_dataMode_Enum(rcv._tab.GetInt8(o + rcv._tab.Pos))
	}
	return 0
}

/// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
/// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
/// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
/// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
/// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
/// Example: /// Example: TEST
/// Constraints: Minimum length = 1, Maximum length = 32
func (rcv *Bus_Full) MutateDataMode(n Bus_Full_dataMode_Enum) bool {
	return rcv._tab.MutateInt8Slot(110, int8(n))
}

/// Time the row was created in the database, auto-populated by the system.
/// Example: /// Example: 2018-01-01T16:00:00.123Z
/// Constraints: No constraints specified.
func (rcv *Bus_Full) CreatedAt() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(112))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Time the row was created in the database, auto-populated by the system.
/// Example: /// Example: 2018-01-01T16:00:00.123Z
/// Constraints: No constraints specified.
/// Application user who created the row in the database, auto-populated by the system.
/// Example: /// Example: some.user
/// Constraints: Minimum length = 1, Maximum length = 64
func (rcv *Bus_Full) CreatedBy() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(114))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Application user who created the row in the database, auto-populated by the system.
/// Example: /// Example: some.user
/// Constraints: Minimum length = 1, Maximum length = 64
/// Time the row was last updated in the database, auto-populated by the system.
/// Example: /// Example: 2018-01-01T16:00:00.123Z
/// Constraints: No constraints specified.
func (rcv *Bus_Full) UpdatedAt() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(116))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Time the row was last updated in the database, auto-populated by the system.
/// Example: /// Example: 2018-01-01T16:00:00.123Z
/// Constraints: No constraints specified.
/// Application user who updated the row in the database, auto-populated by the system.
/// Example: /// Example: some.user
/// Constraints: Minimum length = 0, Maximum length = 64
func (rcv *Bus_Full) UpdatedBy() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(118))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Application user who updated the row in the database, auto-populated by the system.
/// Example: /// Example: some.user
/// Constraints: Minimum length = 0, Maximum length = 64
/// No description provided.
/// Example: /// Example: No example provided.
/// Constraints: No constraints specified.
func (rcv *Bus_Full) Entity() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(120))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// No description provided.
/// Example: /// Example: No example provided.
/// Constraints: No constraints specified.
func Bus_FullStart(builder *flatbuffers.Builder) {
	builder.StartObject(59)
}
func Bus_FullAddId(builder *flatbuffers.Builder, id flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(id), 0)
}
func Bus_FullAddName(builder *flatbuffers.Builder, name flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(name), 0)
}
func Bus_FullAddClassificationMarking(builder *flatbuffers.Builder, classificationMarking flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(classificationMarking), 0)
}
func Bus_FullAddIdEntity(builder *flatbuffers.Builder, idEntity flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(3, flatbuffers.UOffsetT(idEntity), 0)
}
func Bus_FullAddType(builder *flatbuffers.Builder, type_ flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(4, flatbuffers.UOffsetT(type_), 0)
}
func Bus_FullAddMaxLaunchMassLower(builder *flatbuffers.Builder, maxLaunchMassLower float64) {
	builder.PrependFloat64Slot(5, maxLaunchMassLower, 0.0)
}
func Bus_FullAddMaxLaunchMassUpper(builder *flatbuffers.Builder, maxLaunchMassUpper float64) {
	builder.PrependFloat64Slot(6, maxLaunchMassUpper, 0.0)
}
func Bus_FullAddMaxBolstationMass(builder *flatbuffers.Builder, maxBolstationMass float64) {
	builder.PrependFloat64Slot(7, maxBolstationMass, 0.0)
}
func Bus_FullAddAvgPayloadMass(builder *flatbuffers.Builder, avgPayloadMass float64) {
	builder.PrependFloat64Slot(8, avgPayloadMass, 0.0)
}
func Bus_FullAddMaxPayloadMass(builder *flatbuffers.Builder, maxPayloadMass float64) {
	builder.PrependFloat64Slot(9, maxPayloadMass, 0.0)
}
func Bus_FullAddMinDryMass(builder *flatbuffers.Builder, minDryMass float64) {
	builder.PrependFloat64Slot(10, minDryMass, 0.0)
}
func Bus_FullAddAvgDryMass(builder *flatbuffers.Builder, avgDryMass float64) {
	builder.PrependFloat64Slot(11, avgDryMass, 0.0)
}
func Bus_FullAddMedianDryMass(builder *flatbuffers.Builder, medianDryMass float64) {
	builder.PrependFloat64Slot(12, medianDryMass, 0.0)
}
func Bus_FullAddMaxDryMass(builder *flatbuffers.Builder, maxDryMass float64) {
	builder.PrependFloat64Slot(13, maxDryMass, 0.0)
}
func Bus_FullAddMinWetMass(builder *flatbuffers.Builder, minWetMass float64) {
	builder.PrependFloat64Slot(14, minWetMass, 0.0)
}
func Bus_FullAddAvgWetMass(builder *flatbuffers.Builder, avgWetMass float64) {
	builder.PrependFloat64Slot(15, avgWetMass, 0.0)
}
func Bus_FullAddMedianWetMass(builder *flatbuffers.Builder, medianWetMass float64) {
	builder.PrependFloat64Slot(16, medianWetMass, 0.0)
}
func Bus_FullAddMaxWetMass(builder *flatbuffers.Builder, maxWetMass float64) {
	builder.PrependFloat64Slot(17, maxWetMass, 0.0)
}
func Bus_FullAddMaxBolpowerLower(builder *flatbuffers.Builder, maxBolpowerLower float64) {
	builder.PrependFloat64Slot(18, maxBolpowerLower, 0.0)
}
func Bus_FullAddMaxBolpowerUpper(builder *flatbuffers.Builder, maxBolpowerUpper float64) {
	builder.PrependFloat64Slot(19, maxBolpowerUpper, 0.0)
}
func Bus_FullAddMaxEolpowerLower(builder *flatbuffers.Builder, maxEolpowerLower float64) {
	builder.PrependFloat64Slot(20, maxEolpowerLower, 0.0)
}
func Bus_FullAddMaxEolpowerUpper(builder *flatbuffers.Builder, maxEolpowerUpper float64) {
	builder.PrependFloat64Slot(21, maxEolpowerUpper, 0.0)
}
func Bus_FullAddAvgSpacecraftPower(builder *flatbuffers.Builder, avgSpacecraftPower float64) {
	builder.PrependFloat64Slot(22, avgSpacecraftPower, 0.0)
}
func Bus_FullAddMaxSpacecraftPower(builder *flatbuffers.Builder, maxSpacecraftPower float64) {
	builder.PrependFloat64Slot(23, maxSpacecraftPower, 0.0)
}
func Bus_FullAddOapSpacecraftPower(builder *flatbuffers.Builder, oapSpacecraftPower float64) {
	builder.PrependFloat64Slot(24, oapSpacecraftPower, 0.0)
}
func Bus_FullAddAvgPayloadPower(builder *flatbuffers.Builder, avgPayloadPower float64) {
	builder.PrependFloat64Slot(25, avgPayloadPower, 0.0)
}
func Bus_FullAddMaxPayloadPower(builder *flatbuffers.Builder, maxPayloadPower float64) {
	builder.PrependFloat64Slot(26, maxPayloadPower, 0.0)
}
func Bus_FullAddOapPayloadPower(builder *flatbuffers.Builder, oapPayloadPower float64) {
	builder.PrependFloat64Slot(27, oapPayloadPower, 0.0)
}
func Bus_FullAddBodyDimensionX(builder *flatbuffers.Builder, bodyDimensionX float64) {
	builder.PrependFloat64Slot(28, bodyDimensionX, 0.0)
}
func Bus_FullAddBodyDimensionY(builder *flatbuffers.Builder, bodyDimensionY float64) {
	builder.PrependFloat64Slot(29, bodyDimensionY, 0.0)
}
func Bus_FullAddBodyDimensionZ(builder *flatbuffers.Builder, bodyDimensionZ float64) {
	builder.PrependFloat64Slot(30, bodyDimensionZ, 0.0)
}
func Bus_FullAddPayloadDimensionX(builder *flatbuffers.Builder, payloadDimensionX float64) {
	builder.PrependFloat64Slot(31, payloadDimensionX, 0.0)
}
func Bus_FullAddPayloadDimensionY(builder *flatbuffers.Builder, payloadDimensionY float64) {
	builder.PrependFloat64Slot(32, payloadDimensionY, 0.0)
}
func Bus_FullAddPayloadDimensionZ(builder *flatbuffers.Builder, payloadDimensionZ float64) {
	builder.PrependFloat64Slot(33, payloadDimensionZ, 0.0)
}
func Bus_FullAddPayloadVolume(builder *flatbuffers.Builder, payloadVolume float64) {
	builder.PrependFloat64Slot(34, payloadVolume, 0.0)
}
func Bus_FullAddLaunchEnvelopeDimensionX(builder *flatbuffers.Builder, launchEnvelopeDimensionX float64) {
	builder.PrependFloat64Slot(35, launchEnvelopeDimensionX, 0.0)
}
func Bus_FullAddLaunchEnvelopeDimensionY(builder *flatbuffers.Builder, launchEnvelopeDimensionY float64) {
	builder.PrependFloat64Slot(36, launchEnvelopeDimensionY, 0.0)
}
func Bus_FullAddLaunchEnvelopeDimensionZ(builder *flatbuffers.Builder, launchEnvelopeDimensionZ float64) {
	builder.PrependFloat64Slot(37, launchEnvelopeDimensionZ, 0.0)
}
func Bus_FullAddNumOrbitType(builder *flatbuffers.Builder, numOrbitType int32) {
	builder.PrependInt32Slot(38, numOrbitType, 0)
}
func Bus_FullAddOrbitTypes(builder *flatbuffers.Builder, orbitTypes flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(39, flatbuffers.UOffsetT(orbitTypes), 0)
}
func Bus_FullStartOrbitTypesVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func Bus_FullAddTelemetryTrackingManufacturerOrgId(builder *flatbuffers.Builder, telemetryTrackingManufacturerOrgId flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(40, flatbuffers.UOffsetT(telemetryTrackingManufacturerOrgId), 0)
}
func Bus_FullAddMainComputerManufacturerOrgId(builder *flatbuffers.Builder, mainComputerManufacturerOrgId flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(41, flatbuffers.UOffsetT(mainComputerManufacturerOrgId), 0)
}
func Bus_FullAddManufacturerOrgId(builder *flatbuffers.Builder, manufacturerOrgId flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(42, flatbuffers.UOffsetT(manufacturerOrgId), 0)
}
func Bus_FullAddBusKitDesignerOrgId(builder *flatbuffers.Builder, busKitDesignerOrgId flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(43, flatbuffers.UOffsetT(busKitDesignerOrgId), 0)
}
func Bus_FullAddCountryCode(builder *flatbuffers.Builder, countryCode flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(44, flatbuffers.UOffsetT(countryCode), 0)
}
func Bus_FullAddMassCategory(builder *flatbuffers.Builder, massCategory flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(45, flatbuffers.UOffsetT(massCategory), 0)
}
func Bus_FullAddPowerCategory(builder *flatbuffers.Builder, powerCategory flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(46, flatbuffers.UOffsetT(powerCategory), 0)
}
func Bus_FullAddGeneric(builder *flatbuffers.Builder, generic bool) {
	builder.PrependBoolSlot(47, generic, false)
}
func Bus_FullAddDescription(builder *flatbuffers.Builder, description flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(48, flatbuffers.UOffsetT(description), 0)
}
func Bus_FullAddAocsNotes(builder *flatbuffers.Builder, aocsNotes flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(49, flatbuffers.UOffsetT(aocsNotes), 0)
}
func Bus_FullAddSource(builder *flatbuffers.Builder, source flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(50, flatbuffers.UOffsetT(source), 0)
}
func Bus_FullAddOrigin(builder *flatbuffers.Builder, origin flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(51, flatbuffers.UOffsetT(origin), 0)
}
func Bus_FullAddOrigNetwork(builder *flatbuffers.Builder, origNetwork flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(52, flatbuffers.UOffsetT(origNetwork), 0)
}
func Bus_FullAddDataMode(builder *flatbuffers.Builder, dataMode Bus_Full_dataMode_Enum) {
	builder.PrependInt8Slot(53, int8(dataMode), 0)
}
func Bus_FullAddCreatedAt(builder *flatbuffers.Builder, createdAt flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(54, flatbuffers.UOffsetT(createdAt), 0)
}
func Bus_FullAddCreatedBy(builder *flatbuffers.Builder, createdBy flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(55, flatbuffers.UOffsetT(createdBy), 0)
}
func Bus_FullAddUpdatedAt(builder *flatbuffers.Builder, updatedAt flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(56, flatbuffers.UOffsetT(updatedAt), 0)
}
func Bus_FullAddUpdatedBy(builder *flatbuffers.Builder, updatedBy flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(57, flatbuffers.UOffsetT(updatedBy), 0)
}
func Bus_FullAddEntity(builder *flatbuffers.Builder, entity flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(58, flatbuffers.UOffsetT(entity), 0)
}
func Bus_FullEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
