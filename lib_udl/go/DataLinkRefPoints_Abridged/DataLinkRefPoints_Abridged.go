// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package DataLinkRefPoints_Abridged

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

/// /// Collection that identifies points of reference used in the establishment of the data links. There can be 1 to many DataLinkRefPoints collections within the datalink service.
type DataLinkRefPoints_Abridged struct {
	_tab flatbuffers.Table
}

const DataLinkRefPoints_AbridgedIdentifier = "DATA"

func GetRootAsDataLinkRefPoints_Abridged(buf []byte, offset flatbuffers.UOffsetT) *DataLinkRefPoints_Abridged {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &DataLinkRefPoints_Abridged{}
	x.Init(buf, n+offset)
	return x
}

func FinishDataLinkRefPoints_AbridgedBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	identifierBytes := []byte(DataLinkRefPoints_AbridgedIdentifier)
	builder.FinishWithFileIdentifier(offset, identifierBytes)
}

func DataLinkRefPoints_AbridgedBufferHasIdentifier(buf []byte) bool {
	return flatbuffers.BufferHasIdentifier(buf, DataLinkRefPoints_AbridgedIdentifier)
}

func GetSizePrefixedRootAsDataLinkRefPoints_Abridged(buf []byte, offset flatbuffers.UOffsetT) *DataLinkRefPoints_Abridged {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &DataLinkRefPoints_Abridged{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedDataLinkRefPoints_AbridgedBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	identifierBytes := []byte(DataLinkRefPoints_AbridgedIdentifier)
	builder.FinishSizePrefixedWithFileIdentifier(offset, identifierBytes)
}

func SizePrefixedDataLinkRefPoints_AbridgedBufferHasIdentifier(buf []byte) bool {
	return flatbuffers.SizePrefixedBufferHasIdentifier(buf, DataLinkRefPoints_AbridgedIdentifier)
}

func (rcv *DataLinkRefPoints_Abridged) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *DataLinkRefPoints_Abridged) Table() flatbuffers.Table {
	return rcv._tab
}

/// Type of data link reference point or grid origin.
/// Example: /// Example: DLRP
/// Constraints: Minimum length = 0, Maximum length = 7
func (rcv *DataLinkRefPoints_Abridged) RefPointType() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Type of data link reference point or grid origin.
/// Example: /// Example: DLRP
/// Constraints: Minimum length = 0, Maximum length = 7
/// Identifier to designate a reference point.
/// Example: /// Example: L5
/// Constraints: Minimum length = 0, Maximum length = 20
func (rcv *DataLinkRefPoints_Abridged) RefDes() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Identifier to designate a reference point.
/// Example: /// Example: L5
/// Constraints: Minimum length = 0, Maximum length = 20
/// The location name of the point of reference for this data link message.
/// Example: /// Example: FORT BRAGG
/// Constraints: Minimum length = 0, Maximum length = 20
func (rcv *DataLinkRefPoints_Abridged) RefLocName() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The location name of the point of reference for this data link message.
/// Example: /// Example: FORT BRAGG
/// Constraints: Minimum length = 0, Maximum length = 20
/// WGS84 latitude of the reference point for this data link message, in degrees. -90 to 90 degrees (negative values south of equator).
/// Example: /// Example: 45.23
/// Constraints: No constraints specified.
func (rcv *DataLinkRefPoints_Abridged) RefLat() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// WGS84 latitude of the reference point for this data link message, in degrees. -90 to 90 degrees (negative values south of equator).
/// Example: /// Example: 45.23
/// Constraints: No constraints specified.
func (rcv *DataLinkRefPoints_Abridged) MutateRefLat(n float64) bool {
	return rcv._tab.MutateFloat64Slot(10, n)
}

/// WGS84 longitude of the reference point for this data link message, in degrees. -90 to 90 degrees (negative values south of equator).
/// Example: /// Example: 179.1
/// Constraints: No constraints specified.
func (rcv *DataLinkRefPoints_Abridged) RefLon() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// WGS84 longitude of the reference point for this data link message, in degrees. -90 to 90 degrees (negative values south of equator).
/// Example: /// Example: 179.1
/// Constraints: No constraints specified.
func (rcv *DataLinkRefPoints_Abridged) MutateRefLon(n float64) bool {
	return rcv._tab.MutateFloat64Slot(12, n)
}

/// Indicates when a particular event or nickname becomes effective or the old event or nickname is deleted, in ISO 8601 UTC format with millisecond precision.
/// Example: /// Example: 2024-01-08T13:55:43.123Z
/// Constraints: No constraints specified.
func (rcv *DataLinkRefPoints_Abridged) EffEventTime() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Indicates when a particular event or nickname becomes effective or the old event or nickname is deleted, in ISO 8601 UTC format with millisecond precision.
/// Example: /// Example: 2024-01-08T13:55:43.123Z
/// Constraints: No constraints specified.
func DataLinkRefPoints_AbridgedStart(builder *flatbuffers.Builder) {
	builder.StartObject(6)
}
func DataLinkRefPoints_AbridgedAddRefPointType(builder *flatbuffers.Builder, refPointType flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(refPointType), 0)
}
func DataLinkRefPoints_AbridgedAddRefDes(builder *flatbuffers.Builder, refDes flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(refDes), 0)
}
func DataLinkRefPoints_AbridgedAddRefLocName(builder *flatbuffers.Builder, refLocName flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(refLocName), 0)
}
func DataLinkRefPoints_AbridgedAddRefLat(builder *flatbuffers.Builder, refLat float64) {
	builder.PrependFloat64Slot(3, refLat, 0.0)
}
func DataLinkRefPoints_AbridgedAddRefLon(builder *flatbuffers.Builder, refLon float64) {
	builder.PrependFloat64Slot(4, refLon, 0.0)
}
func DataLinkRefPoints_AbridgedAddEffEventTime(builder *flatbuffers.Builder, effEventTime flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(5, flatbuffers.UOffsetT(effEventTime), 0)
}
func DataLinkRefPoints_AbridgedEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
