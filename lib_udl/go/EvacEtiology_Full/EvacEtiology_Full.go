// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package EvacEtiology_Full

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

/// /// Medical condition causation information.
type EvacEtiology_Full struct {
	_tab flatbuffers.Table
}

const EvacEtiology_FullIdentifier = "EVAC"

func GetRootAsEvacEtiology_Full(buf []byte, offset flatbuffers.UOffsetT) *EvacEtiology_Full {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &EvacEtiology_Full{}
	x.Init(buf, n+offset)
	return x
}

func FinishEvacEtiology_FullBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	identifierBytes := []byte(EvacEtiology_FullIdentifier)
	builder.FinishWithFileIdentifier(offset, identifierBytes)
}

func EvacEtiology_FullBufferHasIdentifier(buf []byte) bool {
	return flatbuffers.BufferHasIdentifier(buf, EvacEtiology_FullIdentifier)
}

func GetSizePrefixedRootAsEvacEtiology_Full(buf []byte, offset flatbuffers.UOffsetT) *EvacEtiology_Full {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &EvacEtiology_Full{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedEvacEtiology_FullBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	identifierBytes := []byte(EvacEtiology_FullIdentifier)
	builder.FinishSizePrefixedWithFileIdentifier(offset, identifierBytes)
}

func SizePrefixedEvacEtiology_FullBufferHasIdentifier(buf []byte) bool {
	return flatbuffers.SizePrefixedBufferHasIdentifier(buf, EvacEtiology_FullIdentifier)
}

func (rcv *EvacEtiology_Full) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *EvacEtiology_Full) Table() flatbuffers.Table {
	return rcv._tab
}

/// The cause or manner of causation of the medical condition.  Intended as, but not constrained to, K07.1 EtiologyType Enumeration (e.g. ASSAULT, BUILDING COLLAPSE, BURN CHEMICAL, BURN ELECTRICAL, BURN, BURN HOT LIQUID, BURN RADIATION, BURN THERMAL, etc.).
/// Example: /// Example: BURN
/// Constraints: Minimum length = 0, Maximum length = 32
func (rcv *EvacEtiology_Full) Type() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The cause or manner of causation of the medical condition.  Intended as, but not constrained to, K07.1 EtiologyType Enumeration (e.g. ASSAULT, BUILDING COLLAPSE, BURN CHEMICAL, BURN ELECTRICAL, BURN, BURN HOT LIQUID, BURN RADIATION, BURN THERMAL, etc.).
/// Example: /// Example: BURN
/// Constraints: Minimum length = 0, Maximum length = 32
/// The body part or location affected from the etiology.  Intended as, but not constrained to, K07.1 Body Location Enumeration (e.g. ANKLE LEFT BACK, ANKLE LEFT FRONT, ANKLE RIGHT BACK, ANKLE RIGHT FRONT, ARM LEFT BACK, ARM LEFT ELBOW BACK, ARM LEFT ELBOW FRONT, ARM LEFT FRONT, ARM LEFT LOWER BACK, etc.).
/// Example: /// Example: ARM LEFT FRONT
/// Constraints: Minimum length = 0, Maximum length = 32
func (rcv *EvacEtiology_Full) BodyPart() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The body part or location affected from the etiology.  Intended as, but not constrained to, K07.1 Body Location Enumeration (e.g. ANKLE LEFT BACK, ANKLE LEFT FRONT, ANKLE RIGHT BACK, ANKLE RIGHT FRONT, ARM LEFT BACK, ARM LEFT ELBOW BACK, ARM LEFT ELBOW FRONT, ARM LEFT FRONT, ARM LEFT LOWER BACK, etc.).
/// Example: /// Example: ARM LEFT FRONT
/// Constraints: Minimum length = 0, Maximum length = 32
/// Datetime of the discovery of the etiology state in ISO 8601 UTC format.
/// Example: /// Example: 2021-10-16T16:00:00.123Z
/// Constraints: No constraints specified.
func (rcv *EvacEtiology_Full) Time() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Datetime of the discovery of the etiology state in ISO 8601 UTC format.
/// Example: /// Example: 2021-10-16T16:00:00.123Z
/// Constraints: No constraints specified.
/// Additional comments on the patient's etiology information.
/// Example: /// Example: Comments on the etiology info.
/// Constraints: Minimum length = 0, Maximum length = 1024
func (rcv *EvacEtiology_Full) Comments() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Additional comments on the patient's etiology information.
/// Example: /// Example: Comments on the etiology info.
/// Constraints: Minimum length = 0, Maximum length = 1024
func EvacEtiology_FullStart(builder *flatbuffers.Builder) {
	builder.StartObject(4)
}
func EvacEtiology_FullAddType(builder *flatbuffers.Builder, type_ flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(type_), 0)
}
func EvacEtiology_FullAddBodyPart(builder *flatbuffers.Builder, bodyPart flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(bodyPart), 0)
}
func EvacEtiology_FullAddTime(builder *flatbuffers.Builder, time flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(time), 0)
}
func EvacEtiology_FullAddComments(builder *flatbuffers.Builder, comments flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(3, flatbuffers.UOffsetT(comments), 0)
}
func EvacEtiology_FullEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
