// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package RFGeoLocation_Abridged

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

/// /// Model representation of geolocation data for a radio frequency (RF) signal or emitter.
type RFGeoLocation_Abridged struct {
	_tab flatbuffers.Table
}

const RFGeoLocation_AbridgedIdentifier = "RFGE"

func GetRootAsRFGeoLocation_Abridged(buf []byte, offset flatbuffers.UOffsetT) *RFGeoLocation_Abridged {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &RFGeoLocation_Abridged{}
	x.Init(buf, n+offset)
	return x
}

func FinishRFGeoLocation_AbridgedBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	identifierBytes := []byte(RFGeoLocation_AbridgedIdentifier)
	builder.FinishWithFileIdentifier(offset, identifierBytes)
}

func RFGeoLocation_AbridgedBufferHasIdentifier(buf []byte) bool {
	return flatbuffers.BufferHasIdentifier(buf, RFGeoLocation_AbridgedIdentifier)
}

func GetSizePrefixedRootAsRFGeoLocation_Abridged(buf []byte, offset flatbuffers.UOffsetT) *RFGeoLocation_Abridged {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &RFGeoLocation_Abridged{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedRFGeoLocation_AbridgedBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	identifierBytes := []byte(RFGeoLocation_AbridgedIdentifier)
	builder.FinishSizePrefixedWithFileIdentifier(offset, identifierBytes)
}

func SizePrefixedRFGeoLocation_AbridgedBufferHasIdentifier(buf []byte) bool {
	return flatbuffers.SizePrefixedBufferHasIdentifier(buf, RFGeoLocation_AbridgedIdentifier)
}

func (rcv *RFGeoLocation_Abridged) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *RFGeoLocation_Abridged) Table() flatbuffers.Table {
	return rcv._tab
}

/// Unique identifier of the record, auto-generated by the system.
/// Example: /// Example: 026dd511-8ba5-47d3-9909-836149f87686
/// Constraints: Minimum length = 1, Maximum length = 36
func (rcv *RFGeoLocation_Abridged) Id() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Unique identifier of the record, auto-generated by the system.
/// Example: /// Example: 026dd511-8ba5-47d3-9909-836149f87686
/// Constraints: Minimum length = 1, Maximum length = 36
/// Classification marking of the data in IC/CAPCO Portion-marked format.
/// Example: /// Example: U
/// Constraints: Minimum length = 1, Maximum length = 128
func (rcv *RFGeoLocation_Abridged) ClassificationMarking() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Classification marking of the data in IC/CAPCO Portion-marked format.
/// Example: /// Example: U
/// Constraints: Minimum length = 1, Maximum length = 128
/// The order identifier for this RF Geo Location data set.
/// Example: /// Example: 155240
/// Constraints: Minimum length = 1, Maximum length = 36
func (rcv *RFGeoLocation_Abridged) OrderId() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The order identifier for this RF Geo Location data set.
/// Example: /// Example: 155240
/// Constraints: Minimum length = 1, Maximum length = 36
/// Specifies the creation time associated with the order in ISO 8601 UTC with microsecond precision.
/// Example: /// Example: 2024-05-31T23:06:18.123456Z
/// Constraints: No constraints specified.
func (rcv *RFGeoLocation_Abridged) CreatedTs() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Specifies the creation time associated with the order in ISO 8601 UTC with microsecond precision.
/// Example: /// Example: 2024-05-31T23:06:18.123456Z
/// Constraints: No constraints specified.
/// The time representing the mean of the constituent single-burst observations in ISO 8601 UTC with microsecond precision.
/// Example: /// Example: 2024-05-31T21:16:58.123456Z
/// Constraints: No constraints specified.
func (rcv *RFGeoLocation_Abridged) ReceivedTs() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The time representing the mean of the constituent single-burst observations in ISO 8601 UTC with microsecond precision.
/// Example: /// Example: 2024-05-31T21:16:58.123456Z
/// Constraints: No constraints specified.
/// The order start time for this RF Geo Location data set in ISO 8601 UTC with microsecond precision.
/// Example: /// Example: 2024-05-31T21:12:12.123456Z
/// Constraints: No constraints specified.
func (rcv *RFGeoLocation_Abridged) StartTime() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The order start time for this RF Geo Location data set in ISO 8601 UTC with microsecond precision.
/// Example: /// Example: 2024-05-31T21:12:12.123456Z
/// Constraints: No constraints specified.
/// The order end time for this RF Geo Location data set in ISO 8601 UTC with microsecond precision.
/// Example: /// Example: 2024-05-31T21:16:15.123456Z
/// Constraints: No constraints specified.
func (rcv *RFGeoLocation_Abridged) EndTime() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The order end time for this RF Geo Location data set in ISO 8601 UTC with microsecond precision.
/// Example: /// Example: 2024-05-31T21:16:15.123456Z
/// Constraints: No constraints specified.
/// Unique identifier of the satellite used to identify and geolocate RF signals of interest. This ID can be used to obtain additional information on an OnOrbit object using the 'get by ID' operation (e.g. /udl/onorbit/{id}). For example, the onorbit object with idOnOrbit = abc would be queried as /udl/onorbit/abc.
/// Example: /// Example: HawkEye360-7
/// Constraints: Minimum length = 0, Maximum length = 36
func (rcv *RFGeoLocation_Abridged) IdOnOrbit() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(18))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Unique identifier of the satellite used to identify and geolocate RF signals of interest. This ID can be used to obtain additional information on an OnOrbit object using the 'get by ID' operation (e.g. /udl/onorbit/{id}). For example, the onorbit object with idOnOrbit = abc would be queried as /udl/onorbit/abc.
/// Example: /// Example: HawkEye360-7
/// Constraints: Minimum length = 0, Maximum length = 36
/// Satellite/catalog number of the target on-orbit object.
/// Example: /// Example: 101
/// Constraints: No constraints specified.
func (rcv *RFGeoLocation_Abridged) SatNo() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(20))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

/// Satellite/catalog number of the target on-orbit object.
/// Example: /// Example: 101
/// Constraints: No constraints specified.
func (rcv *RFGeoLocation_Abridged) MutateSatNo(n int32) bool {
	return rcv._tab.MutateInt32Slot(20, n)
}

/// Optional identifier of the satellite used to identify and geolocate RF signals of interest of this observation. This may be an internal identifier and not necessarily a valid satellite number.
/// Example: /// Example: ORIGOBJECT-ID
/// Constraints: Minimum length = 0, Maximum length = 64
func (rcv *RFGeoLocation_Abridged) OrigObjectId() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(22))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Optional identifier of the satellite used to identify and geolocate RF signals of interest of this observation. This may be an internal identifier and not necessarily a valid satellite number.
/// Example: /// Example: ORIGOBJECT-ID
/// Constraints: Minimum length = 0, Maximum length = 64
/// The name of the satellite constellation.
/// Example: /// Example: HawkEye360
/// Constraints: Minimum length = 0, Maximum length = 36
func (rcv *RFGeoLocation_Abridged) Constellation() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(24))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The name of the satellite constellation.
/// Example: /// Example: HawkEye360
/// Constraints: Minimum length = 0, Maximum length = 36
/// The name of the signal of interest.
/// Example: /// Example: GPS
/// Constraints: Minimum length = 0, Maximum length = 36
func (rcv *RFGeoLocation_Abridged) SignalOfInterest() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(26))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The name of the signal of interest.
/// Example: /// Example: GPS
/// Constraints: Minimum length = 0, Maximum length = 36
/// Optional identifier of the geolocated signal of interest RF Emitter for this observation. This ID can be used to obtain additional information on an RF Emitter object using the 'get by ID' operation (e.g. /udl/rfemitter/{id}). For example, the rfemitter object with idRFEmitter = abc would be queried as /udl/rfemitter/abc.
/// Example: /// Example: RFEMITTER-ID
/// Constraints: Minimum length = 0, Maximum length = 36
func (rcv *RFGeoLocation_Abridged) IdRfemitter() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(28))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Optional identifier of the geolocated signal of interest RF Emitter for this observation. This ID can be used to obtain additional information on an RF Emitter object using the 'get by ID' operation (e.g. /udl/rfemitter/{id}). For example, the rfemitter object with idRFEmitter = abc would be queried as /udl/rfemitter/abc.
/// Example: /// Example: RFEMITTER-ID
/// Constraints: Minimum length = 0, Maximum length = 36
/// Optional identifier of the emitter of interest for this observation. This may be an internal identifier and not necessarily a valid emitter Id.
/// Example: /// Example: ORIGRFEMITTER-ID
/// Constraints: Minimum length = 0, Maximum length = 36
func (rcv *RFGeoLocation_Abridged) OrigRfemitterId() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(30))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Optional identifier of the emitter of interest for this observation. This may be an internal identifier and not necessarily a valid emitter Id.
/// Example: /// Example: ORIGRFEMITTER-ID
/// Constraints: Minimum length = 0, Maximum length = 36
/// The count of single-burst observations used for this geolocation observation.
/// Example: /// Example: 17
/// Constraints: No constraints specified.
func (rcv *RFGeoLocation_Abridged) NumBursts() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(32))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

/// The count of single-burst observations used for this geolocation observation.
/// Example: /// Example: 17
/// Constraints: No constraints specified.
func (rcv *RFGeoLocation_Abridged) MutateNumBursts(n int32) bool {
	return rcv._tab.MutateInt32Slot(32, n)
}

/// The minimum detected frequency in megahertz.
/// Example: /// Example: 1575.42
/// Constraints: No constraints specified.
func (rcv *RFGeoLocation_Abridged) MinFreq() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(34))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// The minimum detected frequency in megahertz.
/// Example: /// Example: 1575.42
/// Constraints: No constraints specified.
func (rcv *RFGeoLocation_Abridged) MutateMinFreq(n float64) bool {
	return rcv._tab.MutateFloat64Slot(34, n)
}

/// The maximum detected frequency in megahertz.
/// Example: /// Example: 1575.42
/// Constraints: No constraints specified.
func (rcv *RFGeoLocation_Abridged) MaxFreq() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(36))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// The maximum detected frequency in megahertz.
/// Example: /// Example: 1575.42
/// Constraints: No constraints specified.
func (rcv *RFGeoLocation_Abridged) MutateMaxFreq(n float64) bool {
	return rcv._tab.MutateFloat64Slot(36, n)
}

/// The detected signal frequency in megahertz.
/// Example: /// Example: 1575.42
/// Constraints: No constraints specified.
func (rcv *RFGeoLocation_Abridged) CenterFreq() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(38))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// The detected signal frequency in megahertz.
/// Example: /// Example: 1575.42
/// Constraints: No constraints specified.
func (rcv *RFGeoLocation_Abridged) MutateCenterFreq(n float64) bool {
	return rcv._tab.MutateFloat64Slot(38, n)
}

/// WGS-84 latitude of the most likely emitter location coordinate point, in degrees. -90 to 90 degrees (negative values south of equator).
/// Example: /// Example: 41.172
/// Constraints: No constraints specified.
func (rcv *RFGeoLocation_Abridged) DetectLat() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(40))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// WGS-84 latitude of the most likely emitter location coordinate point, in degrees. -90 to 90 degrees (negative values south of equator).
/// Example: /// Example: 41.172
/// Constraints: No constraints specified.
func (rcv *RFGeoLocation_Abridged) MutateDetectLat(n float64) bool {
	return rcv._tab.MutateFloat64Slot(40, n)
}

/// WGS-84 longitude of the most likely emitter location coordinate point, in degrees. -180 to 180 degrees (negative values west of Prime Meridian).
/// Example: /// Example: 37.019
/// Constraints: No constraints specified.
func (rcv *RFGeoLocation_Abridged) DetectLon() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(42))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// WGS-84 longitude of the most likely emitter location coordinate point, in degrees. -180 to 180 degrees (negative values west of Prime Meridian).
/// Example: /// Example: 37.019
/// Constraints: No constraints specified.
func (rcv *RFGeoLocation_Abridged) MutateDetectLon(n float64) bool {
	return rcv._tab.MutateFloat64Slot(42, n)
}

/// The altitude relative to WGS-84 ellipsoid, in meters.
/// Example: /// Example: 123.456
/// Constraints: No constraints specified.
func (rcv *RFGeoLocation_Abridged) DetectAlt() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(44))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// The altitude relative to WGS-84 ellipsoid, in meters.
/// Example: /// Example: 123.456
/// Constraints: No constraints specified.
func (rcv *RFGeoLocation_Abridged) MutateDetectAlt(n float64) bool {
	return rcv._tab.MutateFloat64Slot(44, n)
}

/// Confidence ellipse semi-major axis about the detection location lat/lon point measured in meters.
/// Example: /// Example: 9435.896
/// Constraints: No constraints specified.
func (rcv *RFGeoLocation_Abridged) ConfSemiMajor() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(46))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Confidence ellipse semi-major axis about the detection location lat/lon point measured in meters.
/// Example: /// Example: 9435.896
/// Constraints: No constraints specified.
func (rcv *RFGeoLocation_Abridged) MutateConfSemiMajor(n float64) bool {
	return rcv._tab.MutateFloat64Slot(46, n)
}

/// Confidence ellipse semi-minor axis about the detection location lat/lon point measured in meters.
/// Example: /// Example: 2751.929
/// Constraints: No constraints specified.
func (rcv *RFGeoLocation_Abridged) ConfSemiMinor() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(48))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Confidence ellipse semi-minor axis about the detection location lat/lon point measured in meters.
/// Example: /// Example: 2751.929
/// Constraints: No constraints specified.
func (rcv *RFGeoLocation_Abridged) MutateConfSemiMinor(n float64) bool {
	return rcv._tab.MutateFloat64Slot(48, n)
}

/// Confidence ellipse orientation of semi-major axis about the detection location lat/lon point measured in degrees.
/// Example: /// Example: 89.852
/// Constraints: No constraints specified.
func (rcv *RFGeoLocation_Abridged) ConfOrientation() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(50))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Confidence ellipse orientation of semi-major axis about the detection location lat/lon point measured in degrees.
/// Example: /// Example: 89.852
/// Constraints: No constraints specified.
func (rcv *RFGeoLocation_Abridged) MutateConfOrientation(n float64) bool {
	return rcv._tab.MutateFloat64Slot(50, n)
}

/// The area of the confidence ellipse specified in meters squared to contain the emitter with a 95% probability.
/// Example: /// Example: 81577480.056
/// Constraints: No constraints specified.
func (rcv *RFGeoLocation_Abridged) ConfArea() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(52))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// The area of the confidence ellipse specified in meters squared to contain the emitter with a 95% probability.
/// Example: /// Example: 81577480.056
/// Constraints: No constraints specified.
func (rcv *RFGeoLocation_Abridged) MutateConfArea(n float64) bool {
	return rcv._tab.MutateFloat64Slot(52, n)
}

/// Type of region as projected on the ground.
/// Example: /// Example: MultiPolygon
/// Constraints: Minimum length = 0, Maximum length = 128
func (rcv *RFGeoLocation_Abridged) Atype() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(54))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Type of region as projected on the ground.
/// Example: /// Example: MultiPolygon
/// Constraints: Minimum length = 0, Maximum length = 128
/// Geographical region or polygon (lat/lon pairs), as depicted by the GeoJSON representation of the geometry/geography, of the image as projected on the ground. GeoJSON Reference: https://geojson.org/. Ignored if included with a POST or PUT request that also specifies a valid 'area' or 'atext' field.
/// Example: /// Example: {"type":"Polygon","coordinates":[[[67.3291113966927,26.156175339112],[67.2580009640721,26.091022064271],[67.1795862381682,26.6637992964562],[67.2501237475598,26.730115808233],[67.3291113966927,26.156175339112]]]}
/// Constraints: No constraints specified.
func (rcv *RFGeoLocation_Abridged) Agjson() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(56))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Geographical region or polygon (lat/lon pairs), as depicted by the GeoJSON representation of the geometry/geography, of the image as projected on the ground. GeoJSON Reference: https://geojson.org/. Ignored if included with a POST or PUT request that also specifies a valid 'area' or 'atext' field.
/// Example: /// Example: {"type":"Polygon","coordinates":[[[67.3291113966927,26.156175339112],[67.2580009640721,26.091022064271],[67.1795862381682,26.6637992964562],[67.2501237475598,26.730115808233],[67.3291113966927,26.156175339112]]]}
/// Constraints: No constraints specified.
/// Geographical region or polygon (lon/lat pairs), as depicted by the Well-Known Text representation of the geometry/geography, of the image as projected on the ground. WKT reference: https://www.opengeospatial.org/standards/wkt-crs. Ignored if included with a POST or PUT request that also specifies a valid 'area' field.
/// Example: /// Example: POLYGON((67.3291113966927 26.156175339112,67.2580009640721 26.091022064271,67.1795862381682 26.6637992964562,67.2501237475598 26.730115808233,67.3291113966927 26.156175339112))
/// Constraints: No constraints specified.
func (rcv *RFGeoLocation_Abridged) Atext() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(58))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Geographical region or polygon (lon/lat pairs), as depicted by the Well-Known Text representation of the geometry/geography, of the image as projected on the ground. WKT reference: https://www.opengeospatial.org/standards/wkt-crs. Ignored if included with a POST or PUT request that also specifies a valid 'area' field.
/// Example: /// Example: POLYGON((67.3291113966927 26.156175339112,67.2580009640721 26.091022064271,67.1795862381682 26.6637992964562,67.2501237475598 26.730115808233,67.3291113966927 26.156175339112))
/// Constraints: No constraints specified.
/// Number of dimensions of the geometry depicted by region.
/// Example: /// Example: 3
/// Constraints: No constraints specified.
func (rcv *RFGeoLocation_Abridged) Andims() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(60))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

/// Number of dimensions of the geometry depicted by region.
/// Example: /// Example: 3
/// Constraints: No constraints specified.
func (rcv *RFGeoLocation_Abridged) MutateAndims(n int32) bool {
	return rcv._tab.MutateInt32Slot(60, n)
}

/// Geographical spatial_ref_sys for region.
/// Example: /// Example: 3
/// Constraints: No constraints specified.
func (rcv *RFGeoLocation_Abridged) Asrid() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(62))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

/// Geographical spatial_ref_sys for region.
/// Example: /// Example: 3
/// Constraints: No constraints specified.
func (rcv *RFGeoLocation_Abridged) MutateAsrid(n int32) bool {
	return rcv._tab.MutateInt32Slot(62, n)
}

/// Optional external identifier referencing the entity used in the calculation of the geolocation.
/// Example: /// Example: 80fd25a8-8b41-448d-888a-91c9dfcd940b
/// Constraints: Minimum length = 0, Maximum length = 36
func (rcv *RFGeoLocation_Abridged) PassGroupId() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(64))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Optional external identifier referencing the entity used in the calculation of the geolocation.
/// Example: /// Example: 80fd25a8-8b41-448d-888a-91c9dfcd940b
/// Constraints: Minimum length = 0, Maximum length = 36
/// The RFGeo algorithm type and version used in geolocation calculations.
/// Example: /// Example: v1.0-3-gps_nb_3ball
/// Constraints: Minimum length = 0, Maximum length = 36
func (rcv *RFGeoLocation_Abridged) AlgVersion() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(66))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The RFGeo algorithm type and version used in geolocation calculations.
/// Example: /// Example: v1.0-3-gps_nb_3ball
/// Constraints: Minimum length = 0, Maximum length = 36
/// Optional ID from external systems. This field has no meaning within UDL and is provided as a convenience for systems that require tracking of an internal system generated ID.
/// Example: /// Example: 780180925
/// Constraints: Minimum length = 0, Maximum length = 36
func (rcv *RFGeoLocation_Abridged) ExternalId() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(68))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Optional ID from external systems. This field has no meaning within UDL and is provided as a convenience for systems that require tracking of an internal system generated ID.
/// Example: /// Example: 780180925
/// Constraints: Minimum length = 0, Maximum length = 36
/// Optional array of provider/source specific tags for this data, where each element is no longer than 32 characters, used for implementing data owner conditional access controls to restrict access to the data. Should be left null by data providers unless conditional access controls are coordinated with the UDL team.
/// Example: /// Example: ['TAG1', 'TAG2']
/// Constraints: No constraints specified.
func (rcv *RFGeoLocation_Abridged) Tags(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(70))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *RFGeoLocation_Abridged) TagsLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(70))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

/// Optional array of provider/source specific tags for this data, where each element is no longer than 32 characters, used for implementing data owner conditional access controls to restrict access to the data. Should be left null by data providers unless conditional access controls are coordinated with the UDL team.
/// Example: /// Example: ['TAG1', 'TAG2']
/// Constraints: No constraints specified.
/// Time the row was created in the database, auto-populated by the system.
/// Example: /// Example: 2018-01-01T16:00:00.123Z
/// Constraints: No constraints specified.
func (rcv *RFGeoLocation_Abridged) CreatedAt() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(72))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Time the row was created in the database, auto-populated by the system.
/// Example: /// Example: 2018-01-01T16:00:00.123Z
/// Constraints: No constraints specified.
/// Application user who created the row in the database, auto-populated by the system.
/// Example: /// Example: some.user
/// Constraints: Minimum length = 1, Maximum length = 64
func (rcv *RFGeoLocation_Abridged) CreatedBy() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(74))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Application user who created the row in the database, auto-populated by the system.
/// Example: /// Example: some.user
/// Constraints: Minimum length = 1, Maximum length = 64
/// Source of the data.
/// Example: /// Example: Bluestaq
/// Constraints: Minimum length = 1, Maximum length = 36
func (rcv *RFGeoLocation_Abridged) Source() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(76))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Source of the data.
/// Example: /// Example: Bluestaq
/// Constraints: Minimum length = 1, Maximum length = 36
/// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
/// Example: /// Example: THIRD_PARTY_DATASOURCE
/// Constraints: Minimum length = 0, Maximum length = 64
func (rcv *RFGeoLocation_Abridged) Origin() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(78))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
/// Example: /// Example: THIRD_PARTY_DATASOURCE
/// Constraints: Minimum length = 0, Maximum length = 64
/// The originating source network on which this record was created, auto-populated by the system.
/// Example: /// Example: OPS1
/// Constraints: Minimum length = 0, Maximum length = 32
func (rcv *RFGeoLocation_Abridged) OrigNetwork() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(80))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The originating source network on which this record was created, auto-populated by the system.
/// Example: /// Example: OPS1
/// Constraints: Minimum length = 0, Maximum length = 32
/// The source data library from which this record was received. This could be a remote or tactical UDL or another data library. If null, the record should be assumed to have originated from the primary Enterprise UDL.
/// Example: /// Example: AXE
/// Constraints: Minimum length = 0, Maximum length = 64
func (rcv *RFGeoLocation_Abridged) SourceDl() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(82))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The source data library from which this record was received. This could be a remote or tactical UDL or another data library. If null, the record should be assumed to have originated from the primary Enterprise UDL.
/// Example: /// Example: AXE
/// Constraints: Minimum length = 0, Maximum length = 64
/// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
/// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
/// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
/// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
/// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
/// Example: /// Example: TEST
/// Constraints: Minimum length = 1, Maximum length = 32
func (rcv *RFGeoLocation_Abridged) DataMode() RFGeoLocation_Abridged_dataMode_Enum {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(84))
	if o != 0 {
		return RFGeoLocation_Abridged_dataMode_Enum(rcv._tab.GetInt8(o + rcv._tab.Pos))
	}
	return 0
}

/// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
/// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
/// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
/// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
/// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
/// Example: /// Example: TEST
/// Constraints: Minimum length = 1, Maximum length = 32
func (rcv *RFGeoLocation_Abridged) MutateDataMode(n RFGeoLocation_Abridged_dataMode_Enum) bool {
	return rcv._tab.MutateInt8Slot(84, int8(n))
}

func RFGeoLocation_AbridgedStart(builder *flatbuffers.Builder) {
	builder.StartObject(41)
}
func RFGeoLocation_AbridgedAddId(builder *flatbuffers.Builder, id flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(id), 0)
}
func RFGeoLocation_AbridgedAddClassificationMarking(builder *flatbuffers.Builder, classificationMarking flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(classificationMarking), 0)
}
func RFGeoLocation_AbridgedAddOrderId(builder *flatbuffers.Builder, orderId flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(orderId), 0)
}
func RFGeoLocation_AbridgedAddCreatedTs(builder *flatbuffers.Builder, createdTs flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(3, flatbuffers.UOffsetT(createdTs), 0)
}
func RFGeoLocation_AbridgedAddReceivedTs(builder *flatbuffers.Builder, receivedTs flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(4, flatbuffers.UOffsetT(receivedTs), 0)
}
func RFGeoLocation_AbridgedAddStartTime(builder *flatbuffers.Builder, startTime flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(5, flatbuffers.UOffsetT(startTime), 0)
}
func RFGeoLocation_AbridgedAddEndTime(builder *flatbuffers.Builder, endTime flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(6, flatbuffers.UOffsetT(endTime), 0)
}
func RFGeoLocation_AbridgedAddIdOnOrbit(builder *flatbuffers.Builder, idOnOrbit flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(7, flatbuffers.UOffsetT(idOnOrbit), 0)
}
func RFGeoLocation_AbridgedAddSatNo(builder *flatbuffers.Builder, satNo int32) {
	builder.PrependInt32Slot(8, satNo, 0)
}
func RFGeoLocation_AbridgedAddOrigObjectId(builder *flatbuffers.Builder, origObjectId flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(9, flatbuffers.UOffsetT(origObjectId), 0)
}
func RFGeoLocation_AbridgedAddConstellation(builder *flatbuffers.Builder, constellation flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(10, flatbuffers.UOffsetT(constellation), 0)
}
func RFGeoLocation_AbridgedAddSignalOfInterest(builder *flatbuffers.Builder, signalOfInterest flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(11, flatbuffers.UOffsetT(signalOfInterest), 0)
}
func RFGeoLocation_AbridgedAddIdRfemitter(builder *flatbuffers.Builder, idRfemitter flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(12, flatbuffers.UOffsetT(idRfemitter), 0)
}
func RFGeoLocation_AbridgedAddOrigRfemitterId(builder *flatbuffers.Builder, origRfemitterId flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(13, flatbuffers.UOffsetT(origRfemitterId), 0)
}
func RFGeoLocation_AbridgedAddNumBursts(builder *flatbuffers.Builder, numBursts int32) {
	builder.PrependInt32Slot(14, numBursts, 0)
}
func RFGeoLocation_AbridgedAddMinFreq(builder *flatbuffers.Builder, minFreq float64) {
	builder.PrependFloat64Slot(15, minFreq, 0.0)
}
func RFGeoLocation_AbridgedAddMaxFreq(builder *flatbuffers.Builder, maxFreq float64) {
	builder.PrependFloat64Slot(16, maxFreq, 0.0)
}
func RFGeoLocation_AbridgedAddCenterFreq(builder *flatbuffers.Builder, centerFreq float64) {
	builder.PrependFloat64Slot(17, centerFreq, 0.0)
}
func RFGeoLocation_AbridgedAddDetectLat(builder *flatbuffers.Builder, detectLat float64) {
	builder.PrependFloat64Slot(18, detectLat, 0.0)
}
func RFGeoLocation_AbridgedAddDetectLon(builder *flatbuffers.Builder, detectLon float64) {
	builder.PrependFloat64Slot(19, detectLon, 0.0)
}
func RFGeoLocation_AbridgedAddDetectAlt(builder *flatbuffers.Builder, detectAlt float64) {
	builder.PrependFloat64Slot(20, detectAlt, 0.0)
}
func RFGeoLocation_AbridgedAddConfSemiMajor(builder *flatbuffers.Builder, confSemiMajor float64) {
	builder.PrependFloat64Slot(21, confSemiMajor, 0.0)
}
func RFGeoLocation_AbridgedAddConfSemiMinor(builder *flatbuffers.Builder, confSemiMinor float64) {
	builder.PrependFloat64Slot(22, confSemiMinor, 0.0)
}
func RFGeoLocation_AbridgedAddConfOrientation(builder *flatbuffers.Builder, confOrientation float64) {
	builder.PrependFloat64Slot(23, confOrientation, 0.0)
}
func RFGeoLocation_AbridgedAddConfArea(builder *flatbuffers.Builder, confArea float64) {
	builder.PrependFloat64Slot(24, confArea, 0.0)
}
func RFGeoLocation_AbridgedAddAtype(builder *flatbuffers.Builder, atype flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(25, flatbuffers.UOffsetT(atype), 0)
}
func RFGeoLocation_AbridgedAddAgjson(builder *flatbuffers.Builder, agjson flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(26, flatbuffers.UOffsetT(agjson), 0)
}
func RFGeoLocation_AbridgedAddAtext(builder *flatbuffers.Builder, atext flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(27, flatbuffers.UOffsetT(atext), 0)
}
func RFGeoLocation_AbridgedAddAndims(builder *flatbuffers.Builder, andims int32) {
	builder.PrependInt32Slot(28, andims, 0)
}
func RFGeoLocation_AbridgedAddAsrid(builder *flatbuffers.Builder, asrid int32) {
	builder.PrependInt32Slot(29, asrid, 0)
}
func RFGeoLocation_AbridgedAddPassGroupId(builder *flatbuffers.Builder, passGroupId flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(30, flatbuffers.UOffsetT(passGroupId), 0)
}
func RFGeoLocation_AbridgedAddAlgVersion(builder *flatbuffers.Builder, algVersion flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(31, flatbuffers.UOffsetT(algVersion), 0)
}
func RFGeoLocation_AbridgedAddExternalId(builder *flatbuffers.Builder, externalId flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(32, flatbuffers.UOffsetT(externalId), 0)
}
func RFGeoLocation_AbridgedAddTags(builder *flatbuffers.Builder, tags flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(33, flatbuffers.UOffsetT(tags), 0)
}
func RFGeoLocation_AbridgedStartTagsVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func RFGeoLocation_AbridgedAddCreatedAt(builder *flatbuffers.Builder, createdAt flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(34, flatbuffers.UOffsetT(createdAt), 0)
}
func RFGeoLocation_AbridgedAddCreatedBy(builder *flatbuffers.Builder, createdBy flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(35, flatbuffers.UOffsetT(createdBy), 0)
}
func RFGeoLocation_AbridgedAddSource(builder *flatbuffers.Builder, source flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(36, flatbuffers.UOffsetT(source), 0)
}
func RFGeoLocation_AbridgedAddOrigin(builder *flatbuffers.Builder, origin flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(37, flatbuffers.UOffsetT(origin), 0)
}
func RFGeoLocation_AbridgedAddOrigNetwork(builder *flatbuffers.Builder, origNetwork flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(38, flatbuffers.UOffsetT(origNetwork), 0)
}
func RFGeoLocation_AbridgedAddSourceDl(builder *flatbuffers.Builder, sourceDl flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(39, flatbuffers.UOffsetT(sourceDl), 0)
}
func RFGeoLocation_AbridgedAddDataMode(builder *flatbuffers.Builder, dataMode RFGeoLocation_Abridged_dataMode_Enum) {
	builder.PrependInt8Slot(40, int8(dataMode), 0)
}
func RFGeoLocation_AbridgedEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
