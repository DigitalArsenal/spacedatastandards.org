// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package CrewMembers_Ingest

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

/// /// Schema for Crew Member data.
type CrewMembers_Ingest struct {
	_tab flatbuffers.Table
}

const CrewMembers_IngestIdentifier = "CREW"

func GetRootAsCrewMembers_Ingest(buf []byte, offset flatbuffers.UOffsetT) *CrewMembers_Ingest {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &CrewMembers_Ingest{}
	x.Init(buf, n+offset)
	return x
}

func FinishCrewMembers_IngestBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	identifierBytes := []byte(CrewMembers_IngestIdentifier)
	builder.FinishWithFileIdentifier(offset, identifierBytes)
}

func CrewMembers_IngestBufferHasIdentifier(buf []byte) bool {
	return flatbuffers.BufferHasIdentifier(buf, CrewMembers_IngestIdentifier)
}

func GetSizePrefixedRootAsCrewMembers_Ingest(buf []byte, offset flatbuffers.UOffsetT) *CrewMembers_Ingest {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &CrewMembers_Ingest{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedCrewMembers_IngestBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	identifierBytes := []byte(CrewMembers_IngestIdentifier)
	builder.FinishSizePrefixedWithFileIdentifier(offset, identifierBytes)
}

func SizePrefixedCrewMembers_IngestBufferHasIdentifier(buf []byte) bool {
	return flatbuffers.SizePrefixedBufferHasIdentifier(buf, CrewMembers_IngestIdentifier)
}

func (rcv *CrewMembers_Ingest) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *CrewMembers_Ingest) Table() flatbuffers.Table {
	return rcv._tab
}

/// The last name of the crew member.
/// Example: /// Example: Smith
/// Constraints: Minimum length = 0, Maximum length = 64
func (rcv *CrewMembers_Ingest) LastName() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The last name of the crew member.
/// Example: /// Example: Smith
/// Constraints: Minimum length = 0, Maximum length = 64
/// The first name of the crew member.
/// Example: /// Example: Freddie
/// Constraints: Minimum length = 0, Maximum length = 64
func (rcv *CrewMembers_Ingest) FirstName() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The first name of the crew member.
/// Example: /// Example: Freddie
/// Constraints: Minimum length = 0, Maximum length = 64
/// The middle initial of the crew member.
/// Example: /// Example: G
/// Constraints: Minimum length = 0, Maximum length = 1
func (rcv *CrewMembers_Ingest) MiddleInitial() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The middle initial of the crew member.
/// Example: /// Example: G
/// Constraints: Minimum length = 0, Maximum length = 1
/// Unique identifier of the crew member assigned by the originating source.
/// Example: /// Example: 12345678abc
/// Constraints: Minimum length = 0, Maximum length = 32
func (rcv *CrewMembers_Ingest) MemberId() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Unique identifier of the crew member assigned by the originating source.
/// Example: /// Example: 12345678abc
/// Constraints: Minimum length = 0, Maximum length = 32
/// Flag indicating this crew member is a civilian or non-military person.
/// Example: /// Example: False
/// Constraints: No constraints specified.
func (rcv *CrewMembers_Ingest) Civilian() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

/// Flag indicating this crew member is a civilian or non-military person.
/// Example: /// Example: False
/// Constraints: No constraints specified.
func (rcv *CrewMembers_Ingest) MutateCivilian(n bool) bool {
	return rcv._tab.MutateBoolSlot(12, n)
}

/// Flag indicating this person is the aircraft commander.
/// Example: /// Example: False
/// Constraints: No constraints specified.
func (rcv *CrewMembers_Ingest) Commander() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

/// Flag indicating this person is the aircraft commander.
/// Example: /// Example: False
/// Constraints: No constraints specified.
func (rcv *CrewMembers_Ingest) MutateCommander(n bool) bool {
	return rcv._tab.MutateBoolSlot(14, n)
}

/// Last four digits of the crew member's social security number.
/// Example: /// Example: 1234
/// Constraints: Minimum length = 0, Maximum length = 4
func (rcv *CrewMembers_Ingest) Last4Ssn() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Last four digits of the crew member's social security number.
/// Example: /// Example: 1234
/// Constraints: Minimum length = 0, Maximum length = 4
/// The crew member's 10-digit DoD ID number.
/// Example: /// Example: 0123456789
/// Constraints: Minimum length = 0, Maximum length = 10
func (rcv *CrewMembers_Ingest) DodId() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(18))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The crew member's 10-digit DoD ID number.
/// Example: /// Example: 0123456789
/// Constraints: Minimum length = 0, Maximum length = 10
/// The duty position of the crew member.
/// Example: /// Example: IP
/// Constraints: Minimum length = 0, Maximum length = 32
func (rcv *CrewMembers_Ingest) DutyPosition() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(20))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The duty position of the crew member.
/// Example: /// Example: IP
/// Constraints: Minimum length = 0, Maximum length = 32
/// The crew position of the crew member.
/// Example: /// Example: EP A
/// Constraints: Minimum length = 0, Maximum length = 32
func (rcv *CrewMembers_Ingest) CrewPosition() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(22))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The crew position of the crew member.
/// Example: /// Example: EP A
/// Constraints: Minimum length = 0, Maximum length = 32
/// Amplifying details about the crew member type (e.g. RAVEN, FCC, COMCAM, AIRCREW, MEP, OTHER, etc.).
/// Example: /// Example: AIRCREW
/// Constraints: Minimum length = 0, Maximum length = 32
func (rcv *CrewMembers_Ingest) MemberType() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(24))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Amplifying details about the crew member type (e.g. RAVEN, FCC, COMCAM, AIRCREW, MEP, OTHER, etc.).
/// Example: /// Example: AIRCREW
/// Constraints: Minimum length = 0, Maximum length = 32
/// The military branch assignment of the crew member.
/// Example: /// Example: Air Force
/// Constraints: Minimum length = 0, Maximum length = 32
func (rcv *CrewMembers_Ingest) Branch() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(26))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The military branch assignment of the crew member.
/// Example: /// Example: Air Force
/// Constraints: Minimum length = 0, Maximum length = 32
/// The rank of the crew member.
/// Example: /// Example: Capt
/// Constraints: Minimum length = 0, Maximum length = 32
func (rcv *CrewMembers_Ingest) Rank() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(28))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The rank of the crew member.
/// Example: /// Example: Capt
/// Constraints: Minimum length = 0, Maximum length = 32
/// The wing the crew member serves.
/// Example: /// Example: 60AMW
/// Constraints: Minimum length = 0, Maximum length = 32
func (rcv *CrewMembers_Ingest) Wing() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(30))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The wing the crew member serves.
/// Example: /// Example: 60AMW
/// Constraints: Minimum length = 0, Maximum length = 32
/// The squadron the crew member serves.
/// Example: /// Example: 21AS
/// Constraints: Minimum length = 0, Maximum length = 32
func (rcv *CrewMembers_Ingest) Squadron() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(32))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The squadron the crew member serves.
/// Example: /// Example: 21AS
/// Constraints: Minimum length = 0, Maximum length = 32
/// Remarks concerning the crew member.
/// Example: /// Example: Crew member remark
/// Constraints: Minimum length = 0, Maximum length = 512
func (rcv *CrewMembers_Ingest) MemberRemarks() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(34))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Remarks concerning the crew member.
/// Example: /// Example: Crew member remark
/// Constraints: Minimum length = 0, Maximum length = 512
/// The Mattermost username of this crew member.
/// Example: /// Example: fgsmith
/// Constraints: Minimum length = 0, Maximum length = 64
func (rcv *CrewMembers_Ingest) Username() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(36))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The Mattermost username of this crew member.
/// Example: /// Example: fgsmith
/// Constraints: Minimum length = 0, Maximum length = 64
func CrewMembers_IngestStart(builder *flatbuffers.Builder) {
	builder.StartObject(17)
}
func CrewMembers_IngestAddLastName(builder *flatbuffers.Builder, lastName flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(lastName), 0)
}
func CrewMembers_IngestAddFirstName(builder *flatbuffers.Builder, firstName flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(firstName), 0)
}
func CrewMembers_IngestAddMiddleInitial(builder *flatbuffers.Builder, middleInitial flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(middleInitial), 0)
}
func CrewMembers_IngestAddMemberId(builder *flatbuffers.Builder, memberId flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(3, flatbuffers.UOffsetT(memberId), 0)
}
func CrewMembers_IngestAddCivilian(builder *flatbuffers.Builder, civilian bool) {
	builder.PrependBoolSlot(4, civilian, false)
}
func CrewMembers_IngestAddCommander(builder *flatbuffers.Builder, commander bool) {
	builder.PrependBoolSlot(5, commander, false)
}
func CrewMembers_IngestAddLast4Ssn(builder *flatbuffers.Builder, last4Ssn flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(6, flatbuffers.UOffsetT(last4Ssn), 0)
}
func CrewMembers_IngestAddDodId(builder *flatbuffers.Builder, dodId flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(7, flatbuffers.UOffsetT(dodId), 0)
}
func CrewMembers_IngestAddDutyPosition(builder *flatbuffers.Builder, dutyPosition flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(8, flatbuffers.UOffsetT(dutyPosition), 0)
}
func CrewMembers_IngestAddCrewPosition(builder *flatbuffers.Builder, crewPosition flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(9, flatbuffers.UOffsetT(crewPosition), 0)
}
func CrewMembers_IngestAddMemberType(builder *flatbuffers.Builder, memberType flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(10, flatbuffers.UOffsetT(memberType), 0)
}
func CrewMembers_IngestAddBranch(builder *flatbuffers.Builder, branch flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(11, flatbuffers.UOffsetT(branch), 0)
}
func CrewMembers_IngestAddRank(builder *flatbuffers.Builder, rank flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(12, flatbuffers.UOffsetT(rank), 0)
}
func CrewMembers_IngestAddWing(builder *flatbuffers.Builder, wing flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(13, flatbuffers.UOffsetT(wing), 0)
}
func CrewMembers_IngestAddSquadron(builder *flatbuffers.Builder, squadron flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(14, flatbuffers.UOffsetT(squadron), 0)
}
func CrewMembers_IngestAddMemberRemarks(builder *flatbuffers.Builder, memberRemarks flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(15, flatbuffers.UOffsetT(memberRemarks), 0)
}
func CrewMembers_IngestAddUsername(builder *flatbuffers.Builder, username flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(16, flatbuffers.UOffsetT(username), 0)
}
func CrewMembers_IngestEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
