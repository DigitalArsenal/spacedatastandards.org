// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package MtiDwell_Full

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

/// /// A grouping of zero or more target reports for which the sensor provides a single time, sensor position, reference position on the ground with simple estimates for the observed area at the reported time, and other pertinent data.
type MtiDwell_Full struct {
	_tab flatbuffers.Table
}

const MtiDwell_FullIdentifier = "MTID"

func GetRootAsMtiDwell_Full(buf []byte, offset flatbuffers.UOffsetT) *MtiDwell_Full {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &MtiDwell_Full{}
	x.Init(buf, n+offset)
	return x
}

func FinishMtiDwell_FullBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	identifierBytes := []byte(MtiDwell_FullIdentifier)
	builder.FinishWithFileIdentifier(offset, identifierBytes)
}

func MtiDwell_FullBufferHasIdentifier(buf []byte) bool {
	return flatbuffers.BufferHasIdentifier(buf, MtiDwell_FullIdentifier)
}

func GetSizePrefixedRootAsMtiDwell_Full(buf []byte, offset flatbuffers.UOffsetT) *MtiDwell_Full {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &MtiDwell_Full{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedMtiDwell_FullBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	identifierBytes := []byte(MtiDwell_FullIdentifier)
	builder.FinishSizePrefixedWithFileIdentifier(offset, identifierBytes)
}

func SizePrefixedMtiDwell_FullBufferHasIdentifier(buf []byte) bool {
	return flatbuffers.SizePrefixedBufferHasIdentifier(buf, MtiDwell_FullIdentifier)
}

func (rcv *MtiDwell_Full) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *MtiDwell_Full) Table() flatbuffers.Table {
	return rcv._tab
}

/// Sequential count of a revisit of the bounding area in the last sent Job Definition Segment, where a Revisit Index of '0' indicates the first revisit.
/// Example: /// Example: 12
/// Constraints: No constraints specified.
func (rcv *MtiDwell_Full) D2() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

/// Sequential count of a revisit of the bounding area in the last sent Job Definition Segment, where a Revisit Index of '0' indicates the first revisit.
/// Example: /// Example: 12
/// Constraints: No constraints specified.
func (rcv *MtiDwell_Full) MutateD2(n int32) bool {
	return rcv._tab.MutateInt32Slot(4, n)
}

/// Temporally sequential count of a dwell within the revisit of a particular bounding area for a given job ID.
/// Example: /// Example: 12
/// Constraints: No constraints specified.
func (rcv *MtiDwell_Full) D3() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

/// Temporally sequential count of a dwell within the revisit of a particular bounding area for a given job ID.
/// Example: /// Example: 12
/// Constraints: No constraints specified.
func (rcv *MtiDwell_Full) MutateD3(n int32) bool {
	return rcv._tab.MutateInt32Slot(6, n)
}

/// Flag indicating the last dwell of the revisit.
/// Example: /// Example: False
/// Constraints: No constraints specified.
func (rcv *MtiDwell_Full) D4() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

/// Flag indicating the last dwell of the revisit.
/// Example: /// Example: False
/// Constraints: No constraints specified.
func (rcv *MtiDwell_Full) MutateD4(n bool) bool {
	return rcv._tab.MutateBoolSlot(8, n)
}

/// Count of the total number of targets reported during this dwell and sent in this Dwell Segment.
/// Example: /// Example: 12
/// Constraints: No constraints specified.
func (rcv *MtiDwell_Full) D5() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

/// Count of the total number of targets reported during this dwell and sent in this Dwell Segment.
/// Example: /// Example: 12
/// Constraints: No constraints specified.
func (rcv *MtiDwell_Full) MutateD5(n int32) bool {
	return rcv._tab.MutateInt32Slot(10, n)
}

/// Elapsed time, expressed in milliseconds, from midnight at the beginning of the day specified in the Reference Time fields (missionRefTime) of the Mission Segment.
/// Example: /// Example: 1234567890
/// Constraints: No constraints specified.
func (rcv *MtiDwell_Full) D6() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

/// Elapsed time, expressed in milliseconds, from midnight at the beginning of the day specified in the Reference Time fields (missionRefTime) of the Mission Segment.
/// Example: /// Example: 1234567890
/// Constraints: No constraints specified.
func (rcv *MtiDwell_Full) MutateD6(n int64) bool {
	return rcv._tab.MutateInt64Slot(12, n)
}

/// North-South position of the sensor at the temporal center of the dwell, in degrees.
/// Example: /// Example: 1.2
/// Constraints: No constraints specified.
func (rcv *MtiDwell_Full) D7() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// North-South position of the sensor at the temporal center of the dwell, in degrees.
/// Example: /// Example: 1.2
/// Constraints: No constraints specified.
func (rcv *MtiDwell_Full) MutateD7(n float64) bool {
	return rcv._tab.MutateFloat64Slot(14, n)
}

/// The East-West position of the sensor at the temporal center of the dwell, in degrees East (positive, 0 to 180) or West (negative, 0 to -180) of the Prime Meridian.
/// Example: /// Example: 12
/// Constraints: No constraints specified.
func (rcv *MtiDwell_Full) D8() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// The East-West position of the sensor at the temporal center of the dwell, in degrees East (positive, 0 to 180) or West (negative, 0 to -180) of the Prime Meridian.
/// Example: /// Example: 12
/// Constraints: No constraints specified.
func (rcv *MtiDwell_Full) MutateD8(n float64) bool {
	return rcv._tab.MutateFloat64Slot(16, n)
}

/// The altitude of the sensor at temporal center of the dwell, above the WGS 84 ellipsoid, expressed in centimeters.
/// Example: /// Example: 12
/// Constraints: No constraints specified.
func (rcv *MtiDwell_Full) D9() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(18))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

/// The altitude of the sensor at temporal center of the dwell, above the WGS 84 ellipsoid, expressed in centimeters.
/// Example: /// Example: 12
/// Constraints: No constraints specified.
func (rcv *MtiDwell_Full) MutateD9(n int32) bool {
	return rcv._tab.MutateInt32Slot(18, n)
}

/// Factor which modifies the value of the reported target latitude (Delta Latitude, field D32.4).
/// Example: /// Example: 1.2
/// Constraints: No constraints specified.
func (rcv *MtiDwell_Full) D10() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(20))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Factor which modifies the value of the reported target latitude (Delta Latitude, field D32.4).
/// Example: /// Example: 1.2
/// Constraints: No constraints specified.
func (rcv *MtiDwell_Full) MutateD10(n float64) bool {
	return rcv._tab.MutateFloat64Slot(20, n)
}

/// Factor which modifies the value of the reported target longitude (Delta Longitude, field D32.5).
/// Example: /// Example: 1.2
/// Constraints: No constraints specified.
func (rcv *MtiDwell_Full) D11() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(22))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Factor which modifies the value of the reported target longitude (Delta Longitude, field D32.5).
/// Example: /// Example: 1.2
/// Constraints: No constraints specified.
func (rcv *MtiDwell_Full) MutateD11(n float64) bool {
	return rcv._tab.MutateFloat64Slot(22, n)
}

/// Standard deviation in the estimated horizontal sensor location at the time of the dwell, measured along the sensor track direction (field D15), in centimeters.
/// Example: /// Example: 12
/// Constraints: No constraints specified.
func (rcv *MtiDwell_Full) D12() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(24))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

/// Standard deviation in the estimated horizontal sensor location at the time of the dwell, measured along the sensor track direction (field D15), in centimeters.
/// Example: /// Example: 12
/// Constraints: No constraints specified.
func (rcv *MtiDwell_Full) MutateD12(n int32) bool {
	return rcv._tab.MutateInt32Slot(24, n)
}

/// Standard deviation in the estimated horizontal sensor location at the time of the dwell, measured orthogonal to the sensor track direction (field D15), in centimeters.
/// Example: /// Example: 12
/// Constraints: No constraints specified.
func (rcv *MtiDwell_Full) D13() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(26))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

/// Standard deviation in the estimated horizontal sensor location at the time of the dwell, measured orthogonal to the sensor track direction (field D15), in centimeters.
/// Example: /// Example: 12
/// Constraints: No constraints specified.
func (rcv *MtiDwell_Full) MutateD13(n int32) bool {
	return rcv._tab.MutateInt32Slot(26, n)
}

/// Standard deviation of the sensor altitude estimate (field D9), in centimeters.
/// Example: /// Example: 12
/// Constraints: No constraints specified.
func (rcv *MtiDwell_Full) D14() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(28))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

/// Standard deviation of the sensor altitude estimate (field D9), in centimeters.
/// Example: /// Example: 12
/// Constraints: No constraints specified.
func (rcv *MtiDwell_Full) MutateD14(n int32) bool {
	return rcv._tab.MutateInt32Slot(28, n)
}

/// Ground track of the sensor at the time of the dwell, as the angle in degrees (clockwise) from True North.
/// Example: /// Example: 1.2
/// Constraints: No constraints specified.
func (rcv *MtiDwell_Full) D15() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(30))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Ground track of the sensor at the time of the dwell, as the angle in degrees (clockwise) from True North.
/// Example: /// Example: 1.2
/// Constraints: No constraints specified.
func (rcv *MtiDwell_Full) MutateD15(n float64) bool {
	return rcv._tab.MutateFloat64Slot(30, n)
}

/// Ground speed of the sensor at the time of the dwell, in millimeters per second.
/// Example: /// Example: 12
/// Constraints: No constraints specified.
func (rcv *MtiDwell_Full) D16() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(32))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

/// Ground speed of the sensor at the time of the dwell, in millimeters per second.
/// Example: /// Example: 12
/// Constraints: No constraints specified.
func (rcv *MtiDwell_Full) MutateD16(n int32) bool {
	return rcv._tab.MutateInt32Slot(32, n)
}

/// Velocity of the sensor in the vertical direction, in decimeters per second.
/// Example: /// Example: 2
/// Constraints: No constraints specified.
func (rcv *MtiDwell_Full) D17() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(34))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

/// Velocity of the sensor in the vertical direction, in decimeters per second.
/// Example: /// Example: 2
/// Constraints: No constraints specified.
func (rcv *MtiDwell_Full) MutateD17(n int32) bool {
	return rcv._tab.MutateInt32Slot(34, n)
}

/// Standard deviation of the estimate of the sensor track, in degrees.
/// Example: /// Example: 2
/// Constraints: No constraints specified.
func (rcv *MtiDwell_Full) D18() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(36))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

/// Standard deviation of the estimate of the sensor track, in degrees.
/// Example: /// Example: 2
/// Constraints: No constraints specified.
func (rcv *MtiDwell_Full) MutateD18(n int32) bool {
	return rcv._tab.MutateInt32Slot(36, n)
}

/// Standard deviation of estimate of the sensor speed, in millimeters per second.
/// Example: /// Example: 12
/// Constraints: No constraints specified.
func (rcv *MtiDwell_Full) D19() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(38))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

/// Standard deviation of estimate of the sensor speed, in millimeters per second.
/// Example: /// Example: 12
/// Constraints: No constraints specified.
func (rcv *MtiDwell_Full) MutateD19(n int32) bool {
	return rcv._tab.MutateInt32Slot(38, n)
}

/// Standard deviation of estimate of the sensor vertical velocity, expressed in centimeters per second.
/// Example: /// Example: 12
/// Constraints: No constraints specified.
func (rcv *MtiDwell_Full) D20() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(40))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

/// Standard deviation of estimate of the sensor vertical velocity, expressed in centimeters per second.
/// Example: /// Example: 12
/// Constraints: No constraints specified.
func (rcv *MtiDwell_Full) MutateD20(n int32) bool {
	return rcv._tab.MutateInt32Slot(40, n)
}

/// Heading of the platform at the time of the dwell, as the angle in degrees (clockwise) from True North to the roll axis of the platform.
/// Example: /// Example: 1.2
/// Constraints: No constraints specified.
func (rcv *MtiDwell_Full) D21() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(42))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Heading of the platform at the time of the dwell, as the angle in degrees (clockwise) from True North to the roll axis of the platform.
/// Example: /// Example: 1.2
/// Constraints: No constraints specified.
func (rcv *MtiDwell_Full) MutateD21(n float64) bool {
	return rcv._tab.MutateFloat64Slot(42, n)
}

/// Pitch angle of the platform at the time of the dwell, in degrees.
/// Example: /// Example: 12.23
/// Constraints: No constraints specified.
func (rcv *MtiDwell_Full) D22() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(44))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Pitch angle of the platform at the time of the dwell, in degrees.
/// Example: /// Example: 12.23
/// Constraints: No constraints specified.
func (rcv *MtiDwell_Full) MutateD22(n float64) bool {
	return rcv._tab.MutateFloat64Slot(44, n)
}

/// Roll angle of the platform at the time of the dwell, in degrees.
/// Example: /// Example: 12.23
/// Constraints: No constraints specified.
func (rcv *MtiDwell_Full) D23() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(46))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Roll angle of the platform at the time of the dwell, in degrees.
/// Example: /// Example: 12.23
/// Constraints: No constraints specified.
func (rcv *MtiDwell_Full) MutateD23(n float64) bool {
	return rcv._tab.MutateFloat64Slot(46, n)
}

/// The North-South position of the center of the dwell area, expressed as degrees North (positive) or South (negative) of the Equator.
/// Example: /// Example: 12.23
/// Constraints: No constraints specified.
func (rcv *MtiDwell_Full) D24() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(48))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// The North-South position of the center of the dwell area, expressed as degrees North (positive) or South (negative) of the Equator.
/// Example: /// Example: 12.23
/// Constraints: No constraints specified.
func (rcv *MtiDwell_Full) MutateD24(n float64) bool {
	return rcv._tab.MutateFloat64Slot(48, n)
}

/// The East-West position of the center of the dwell area, expressed as degrees East (positive, 0 to 180) or West (negative, 0 to -180) of the Prime Meridian.
/// Example: /// Example: 12.23
/// Constraints: No constraints specified.
func (rcv *MtiDwell_Full) D25() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(50))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// The East-West position of the center of the dwell area, expressed as degrees East (positive, 0 to 180) or West (negative, 0 to -180) of the Prime Meridian.
/// Example: /// Example: 12.23
/// Constraints: No constraints specified.
func (rcv *MtiDwell_Full) MutateD25(n float64) bool {
	return rcv._tab.MutateFloat64Slot(50, n)
}

/// Distance on the earth surface, expressed in kilometers, from the near edge to the center of the dwell area.
/// Example: /// Example: 12.23
/// Constraints: No constraints specified.
func (rcv *MtiDwell_Full) D26() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(52))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Distance on the earth surface, expressed in kilometers, from the near edge to the center of the dwell area.
/// Example: /// Example: 12.23
/// Constraints: No constraints specified.
func (rcv *MtiDwell_Full) MutateD26(n float64) bool {
	return rcv._tab.MutateFloat64Slot(52, n)
}

/// For dwell based radars, one-half of the 3-dB beamwidth.  For non-dwell based radars, the angle between the beginning of the dwell to the center of the dwell.  Measured in degrees.
/// Example: /// Example: 12.23
/// Constraints: No constraints specified.
func (rcv *MtiDwell_Full) D27() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(54))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// For dwell based radars, one-half of the 3-dB beamwidth.  For non-dwell based radars, the angle between the beginning of the dwell to the center of the dwell.  Measured in degrees.
/// Example: /// Example: 12.23
/// Constraints: No constraints specified.
func (rcv *MtiDwell_Full) MutateD27(n float64) bool {
	return rcv._tab.MutateFloat64Slot(54, n)
}

/// Rotation of the sensor broadside face about the local vertical axis of the platform, in degrees.
/// Example: /// Example: 12.23
/// Constraints: No constraints specified.
func (rcv *MtiDwell_Full) D28() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(56))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Rotation of the sensor broadside face about the local vertical axis of the platform, in degrees.
/// Example: /// Example: 12.23
/// Constraints: No constraints specified.
func (rcv *MtiDwell_Full) MutateD28(n float64) bool {
	return rcv._tab.MutateFloat64Slot(56, n)
}

/// Rotation angle of the sensor about the transverse axis of the sensor broadside, in degrees.
/// Example: /// Example: 12.23
/// Constraints: No constraints specified.
func (rcv *MtiDwell_Full) D29() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(58))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Rotation angle of the sensor about the transverse axis of the sensor broadside, in degrees.
/// Example: /// Example: 12.23
/// Constraints: No constraints specified.
func (rcv *MtiDwell_Full) MutateD29(n float64) bool {
	return rcv._tab.MutateFloat64Slot(58, n)
}

/// Rotation angle of the sensor about the transverse axis of the sensor broadside, in degrees.
/// Example: /// Example: 12.23
/// Constraints: No constraints specified.
func (rcv *MtiDwell_Full) D30() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(60))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Rotation angle of the sensor about the transverse axis of the sensor broadside, in degrees.
/// Example: /// Example: 12.23
/// Constraints: No constraints specified.
func (rcv *MtiDwell_Full) MutateD30(n float64) bool {
	return rcv._tab.MutateFloat64Slot(60, n)
}

/// Minimum velocity component, along the line of sight, which can be detected by the sensor, in decimeters per second.
/// Example: /// Example: 1
/// Constraints: No constraints specified.
func (rcv *MtiDwell_Full) D31() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(62))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

/// Minimum velocity component, along the line of sight, which can be detected by the sensor, in decimeters per second.
/// Example: /// Example: 1
/// Constraints: No constraints specified.
func (rcv *MtiDwell_Full) MutateD31(n int32) bool {
	return rcv._tab.MutateInt32Slot(62, n)
}

/// Minimum velocity component, along the line of sight, which can be detected by the sensor, in decimeters per second.
/// Example: /// Example: No example provided.
/// Constraints: No constraints specified.
func (rcv *MtiDwell_Full) D32(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(64))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *MtiDwell_Full) D32Length() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(64))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

/// Minimum velocity component, along the line of sight, which can be detected by the sensor, in decimeters per second.
/// Example: /// Example: No example provided.
/// Constraints: No constraints specified.
/// Dwell timestamp in ISO8601 UTC format.
/// Example: /// Example: 2018-01-01T16:00:00.123Z
/// Constraints: No constraints specified.
func (rcv *MtiDwell_Full) Dwellts() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(66))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Dwell timestamp in ISO8601 UTC format.
/// Example: /// Example: 2018-01-01T16:00:00.123Z
/// Constraints: No constraints specified.
func MtiDwell_FullStart(builder *flatbuffers.Builder) {
	builder.StartObject(32)
}
func MtiDwell_FullAddD2(builder *flatbuffers.Builder, d2 int32) {
	builder.PrependInt32Slot(0, d2, 0)
}
func MtiDwell_FullAddD3(builder *flatbuffers.Builder, d3 int32) {
	builder.PrependInt32Slot(1, d3, 0)
}
func MtiDwell_FullAddD4(builder *flatbuffers.Builder, d4 bool) {
	builder.PrependBoolSlot(2, d4, false)
}
func MtiDwell_FullAddD5(builder *flatbuffers.Builder, d5 int32) {
	builder.PrependInt32Slot(3, d5, 0)
}
func MtiDwell_FullAddD6(builder *flatbuffers.Builder, d6 int64) {
	builder.PrependInt64Slot(4, d6, 0)
}
func MtiDwell_FullAddD7(builder *flatbuffers.Builder, d7 float64) {
	builder.PrependFloat64Slot(5, d7, 0.0)
}
func MtiDwell_FullAddD8(builder *flatbuffers.Builder, d8 float64) {
	builder.PrependFloat64Slot(6, d8, 0.0)
}
func MtiDwell_FullAddD9(builder *flatbuffers.Builder, d9 int32) {
	builder.PrependInt32Slot(7, d9, 0)
}
func MtiDwell_FullAddD10(builder *flatbuffers.Builder, d10 float64) {
	builder.PrependFloat64Slot(8, d10, 0.0)
}
func MtiDwell_FullAddD11(builder *flatbuffers.Builder, d11 float64) {
	builder.PrependFloat64Slot(9, d11, 0.0)
}
func MtiDwell_FullAddD12(builder *flatbuffers.Builder, d12 int32) {
	builder.PrependInt32Slot(10, d12, 0)
}
func MtiDwell_FullAddD13(builder *flatbuffers.Builder, d13 int32) {
	builder.PrependInt32Slot(11, d13, 0)
}
func MtiDwell_FullAddD14(builder *flatbuffers.Builder, d14 int32) {
	builder.PrependInt32Slot(12, d14, 0)
}
func MtiDwell_FullAddD15(builder *flatbuffers.Builder, d15 float64) {
	builder.PrependFloat64Slot(13, d15, 0.0)
}
func MtiDwell_FullAddD16(builder *flatbuffers.Builder, d16 int32) {
	builder.PrependInt32Slot(14, d16, 0)
}
func MtiDwell_FullAddD17(builder *flatbuffers.Builder, d17 int32) {
	builder.PrependInt32Slot(15, d17, 0)
}
func MtiDwell_FullAddD18(builder *flatbuffers.Builder, d18 int32) {
	builder.PrependInt32Slot(16, d18, 0)
}
func MtiDwell_FullAddD19(builder *flatbuffers.Builder, d19 int32) {
	builder.PrependInt32Slot(17, d19, 0)
}
func MtiDwell_FullAddD20(builder *flatbuffers.Builder, d20 int32) {
	builder.PrependInt32Slot(18, d20, 0)
}
func MtiDwell_FullAddD21(builder *flatbuffers.Builder, d21 float64) {
	builder.PrependFloat64Slot(19, d21, 0.0)
}
func MtiDwell_FullAddD22(builder *flatbuffers.Builder, d22 float64) {
	builder.PrependFloat64Slot(20, d22, 0.0)
}
func MtiDwell_FullAddD23(builder *flatbuffers.Builder, d23 float64) {
	builder.PrependFloat64Slot(21, d23, 0.0)
}
func MtiDwell_FullAddD24(builder *flatbuffers.Builder, d24 float64) {
	builder.PrependFloat64Slot(22, d24, 0.0)
}
func MtiDwell_FullAddD25(builder *flatbuffers.Builder, d25 float64) {
	builder.PrependFloat64Slot(23, d25, 0.0)
}
func MtiDwell_FullAddD26(builder *flatbuffers.Builder, d26 float64) {
	builder.PrependFloat64Slot(24, d26, 0.0)
}
func MtiDwell_FullAddD27(builder *flatbuffers.Builder, d27 float64) {
	builder.PrependFloat64Slot(25, d27, 0.0)
}
func MtiDwell_FullAddD28(builder *flatbuffers.Builder, d28 float64) {
	builder.PrependFloat64Slot(26, d28, 0.0)
}
func MtiDwell_FullAddD29(builder *flatbuffers.Builder, d29 float64) {
	builder.PrependFloat64Slot(27, d29, 0.0)
}
func MtiDwell_FullAddD30(builder *flatbuffers.Builder, d30 float64) {
	builder.PrependFloat64Slot(28, d30, 0.0)
}
func MtiDwell_FullAddD31(builder *flatbuffers.Builder, d31 int32) {
	builder.PrependInt32Slot(29, d31, 0)
}
func MtiDwell_FullAddD32(builder *flatbuffers.Builder, d32 flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(30, flatbuffers.UOffsetT(d32), 0)
}
func MtiDwell_FullStartD32Vector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func MtiDwell_FullAddDwellts(builder *flatbuffers.Builder, dwellts flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(31, flatbuffers.UOffsetT(dwellts), 0)
}
func MtiDwell_FullEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
