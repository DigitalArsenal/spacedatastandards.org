// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package PersonnelRecoveryExecutionInfo_Ingest

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

/// /// Information pertaining to the details of executing the recovery.
type PersonnelRecoveryExecutionInfo_Ingest struct {
	_tab flatbuffers.Table
}

const PersonnelRecoveryExecutionInfo_IngestIdentifier = "PERS"

func GetRootAsPersonnelRecoveryExecutionInfo_Ingest(buf []byte, offset flatbuffers.UOffsetT) *PersonnelRecoveryExecutionInfo_Ingest {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &PersonnelRecoveryExecutionInfo_Ingest{}
	x.Init(buf, n+offset)
	return x
}

func FinishPersonnelRecoveryExecutionInfo_IngestBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	identifierBytes := []byte(PersonnelRecoveryExecutionInfo_IngestIdentifier)
	builder.FinishWithFileIdentifier(offset, identifierBytes)
}

func PersonnelRecoveryExecutionInfo_IngestBufferHasIdentifier(buf []byte) bool {
	return flatbuffers.BufferHasIdentifier(buf, PersonnelRecoveryExecutionInfo_IngestIdentifier)
}

func GetSizePrefixedRootAsPersonnelRecoveryExecutionInfo_Ingest(buf []byte, offset flatbuffers.UOffsetT) *PersonnelRecoveryExecutionInfo_Ingest {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &PersonnelRecoveryExecutionInfo_Ingest{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedPersonnelRecoveryExecutionInfo_IngestBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	identifierBytes := []byte(PersonnelRecoveryExecutionInfo_IngestIdentifier)
	builder.FinishSizePrefixedWithFileIdentifier(offset, identifierBytes)
}

func SizePrefixedPersonnelRecoveryExecutionInfo_IngestBufferHasIdentifier(buf []byte) bool {
	return flatbuffers.SizePrefixedBufferHasIdentifier(buf, PersonnelRecoveryExecutionInfo_IngestIdentifier)
}

func (rcv *PersonnelRecoveryExecutionInfo_Ingest) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *PersonnelRecoveryExecutionInfo_Ingest) Table() flatbuffers.Table {
	return rcv._tab
}

/// Array of the WGS-84 latitude (-90 to 90, negative values south of the equator) in degrees, longitude (-180 to 180, negative values west of Prime Meridian) in degrees, and altitude, in meters, of the initial location. This array must contain a minimum of 2 elements (latitude and longitude), and may contain an optional 3rd element (altitude).
/// Example: /// Example: [103.23, 30.445]
/// Constraints: No constraints specified.
func (rcv *PersonnelRecoveryExecutionInfo_Ingest) InitialPoint(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *PersonnelRecoveryExecutionInfo_Ingest) InitialPointLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

/// Array of the WGS-84 latitude (-90 to 90, negative values south of the equator) in degrees, longitude (-180 to 180, negative values west of Prime Meridian) in degrees, and altitude, in meters, of the initial location. This array must contain a minimum of 2 elements (latitude and longitude), and may contain an optional 3rd element (altitude).
/// Example: /// Example: [103.23, 30.445]
/// Constraints: No constraints specified.
/// The heading, in degrees clockwise from North, of entering the recovery zone.
/// Example: /// Example: 35.66
/// Constraints: No constraints specified.
func (rcv *PersonnelRecoveryExecutionInfo_Ingest) Ingress() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// The heading, in degrees clockwise from North, of entering the recovery zone.
/// Example: /// Example: 35.66
/// Constraints: No constraints specified.
func (rcv *PersonnelRecoveryExecutionInfo_Ingest) MutateIngress(n float64) bool {
	return rcv._tab.MutateFloat64Slot(6, n)
}

/// Description of the objective strategy plan.
/// Example: /// Example: Description of strategy plan.
/// Constraints: Minimum length = 0, Maximum length = 1024
func (rcv *PersonnelRecoveryExecutionInfo_Ingest) ObjStrategy() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Description of the objective strategy plan.
/// Example: /// Example: Description of strategy plan.
/// Constraints: Minimum length = 0, Maximum length = 1024
/// Array of the WGS-84 latitude (-90 to 90, negative values south of the equator) in degrees, longitude (-180 to 180, negative values west of Prime Meridian) in degrees, and altitude, in meters, of the egress location. This array must contain a minimum of 2 elements (latitude and longitude), and may contain an optional 3rd element (altitude).
/// Example: /// Example: [107.23, 30.455]
/// Constraints: No constraints specified.
func (rcv *PersonnelRecoveryExecutionInfo_Ingest) EgressPoint(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *PersonnelRecoveryExecutionInfo_Ingest) EgressPointLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

/// Array of the WGS-84 latitude (-90 to 90, negative values south of the equator) in degrees, longitude (-180 to 180, negative values west of Prime Meridian) in degrees, and altitude, in meters, of the egress location. This array must contain a minimum of 2 elements (latitude and longitude), and may contain an optional 3rd element (altitude).
/// Example: /// Example: [107.23, 30.455]
/// Constraints: No constraints specified.
/// The heading, in degrees, of leaving the recovery zone.
/// Example: /// Example: 66.53
/// Constraints: No constraints specified.
func (rcv *PersonnelRecoveryExecutionInfo_Ingest) Egress() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// The heading, in degrees, of leaving the recovery zone.
/// Example: /// Example: 66.53
/// Constraints: No constraints specified.
func (rcv *PersonnelRecoveryExecutionInfo_Ingest) MutateEgress(n float64) bool {
	return rcv._tab.MutateFloat64Slot(12, n)
}

/// No description provided.
/// Example: /// Example: No example provided.
/// Constraints: No constraints specified.
func (rcv *PersonnelRecoveryExecutionInfo_Ingest) RecoveryVehicle() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// No description provided.
/// Example: /// Example: No example provided.
/// Constraints: No constraints specified.
/// No description provided.
/// Example: /// Example: No example provided.
/// Constraints: No constraints specified.
func (rcv *PersonnelRecoveryExecutionInfo_Ingest) EscortVehicle() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// No description provided.
/// Example: /// Example: No example provided.
/// Constraints: No constraints specified.
func PersonnelRecoveryExecutionInfo_IngestStart(builder *flatbuffers.Builder) {
	builder.StartObject(7)
}
func PersonnelRecoveryExecutionInfo_IngestAddInitialPoint(builder *flatbuffers.Builder, initialPoint flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(initialPoint), 0)
}
func PersonnelRecoveryExecutionInfo_IngestStartInitialPointVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func PersonnelRecoveryExecutionInfo_IngestAddIngress(builder *flatbuffers.Builder, ingress float64) {
	builder.PrependFloat64Slot(1, ingress, 0.0)
}
func PersonnelRecoveryExecutionInfo_IngestAddObjStrategy(builder *flatbuffers.Builder, objStrategy flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(objStrategy), 0)
}
func PersonnelRecoveryExecutionInfo_IngestAddEgressPoint(builder *flatbuffers.Builder, egressPoint flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(3, flatbuffers.UOffsetT(egressPoint), 0)
}
func PersonnelRecoveryExecutionInfo_IngestStartEgressPointVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func PersonnelRecoveryExecutionInfo_IngestAddEgress(builder *flatbuffers.Builder, egress float64) {
	builder.PrependFloat64Slot(4, egress, 0.0)
}
func PersonnelRecoveryExecutionInfo_IngestAddRecoveryVehicle(builder *flatbuffers.Builder, recoveryVehicle flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(5, flatbuffers.UOffsetT(recoveryVehicle), 0)
}
func PersonnelRecoveryExecutionInfo_IngestAddEscortVehicle(builder *flatbuffers.Builder, escortVehicle flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(6, flatbuffers.UOffsetT(escortVehicle), 0)
}
func PersonnelRecoveryExecutionInfo_IngestEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
