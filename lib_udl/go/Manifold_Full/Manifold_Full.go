// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package Manifold_Full

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

/// /// A manifold represents a set of possible/theoretical orbits for an object of interest based on a delta V and delta T.
type Manifold_Full struct {
	_tab flatbuffers.Table
}

const Manifold_FullIdentifier = "MANI"

func GetRootAsManifold_Full(buf []byte, offset flatbuffers.UOffsetT) *Manifold_Full {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &Manifold_Full{}
	x.Init(buf, n+offset)
	return x
}

func FinishManifold_FullBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	identifierBytes := []byte(Manifold_FullIdentifier)
	builder.FinishWithFileIdentifier(offset, identifierBytes)
}

func Manifold_FullBufferHasIdentifier(buf []byte) bool {
	return flatbuffers.BufferHasIdentifier(buf, Manifold_FullIdentifier)
}

func GetSizePrefixedRootAsManifold_Full(buf []byte, offset flatbuffers.UOffsetT) *Manifold_Full {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &Manifold_Full{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedManifold_FullBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	identifierBytes := []byte(Manifold_FullIdentifier)
	builder.FinishSizePrefixedWithFileIdentifier(offset, identifierBytes)
}

func SizePrefixedManifold_FullBufferHasIdentifier(buf []byte) bool {
	return flatbuffers.SizePrefixedBufferHasIdentifier(buf, Manifold_FullIdentifier)
}

func (rcv *Manifold_Full) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *Manifold_Full) Table() flatbuffers.Table {
	return rcv._tab
}

/// Unique identifier of the record, auto-generated by the system.
/// Example: /// Example: MANIFOLD-ID
/// Constraints: Minimum length = 1, Maximum length = 36
func (rcv *Manifold_Full) Id() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Unique identifier of the record, auto-generated by the system.
/// Example: /// Example: MANIFOLD-ID
/// Constraints: Minimum length = 1, Maximum length = 36
/// ID of the parent object of interest.
/// Example: /// Example: OBJECTOFINTEREST-ID
/// Constraints: Minimum length = 1, Maximum length = 36
func (rcv *Manifold_Full) IdObjectOfInterest() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// ID of the parent object of interest.
/// Example: /// Example: OBJECTOFINTEREST-ID
/// Constraints: Minimum length = 1, Maximum length = 36
/// Classification marking of the data in IC/CAPCO Portion-marked format.
/// Example: /// Example: U
/// Constraints: Minimum length = 1, Maximum length = 128
func (rcv *Manifold_Full) ClassificationMarking() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Classification marking of the data in IC/CAPCO Portion-marked format.
/// Example: /// Example: U
/// Constraints: Minimum length = 1, Maximum length = 128
/// Status of the manifold and its associated ManifoldElsets (e.g. PENDING, COMPLETE). PENDING status means element set generation is in progress and COMPLETE indicates all ManifoldElsets have been generated.
/// Example: /// Example: PENDING
/// Constraints: Minimum length = 0, Maximum length = 64
func (rcv *Manifold_Full) Status() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Status of the manifold and its associated ManifoldElsets (e.g. PENDING, COMPLETE). PENDING status means element set generation is in progress and COMPLETE indicates all ManifoldElsets have been generated.
/// Example: /// Example: PENDING
/// Constraints: Minimum length = 0, Maximum length = 64
/// Weight or probability of this manifold for prioritization purposes, between 0 and 1.
/// Example: /// Example: 0.3
/// Constraints: No constraints specified.
func (rcv *Manifold_Full) Weight() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Weight or probability of this manifold for prioritization purposes, between 0 and 1.
/// Example: /// Example: 0.3
/// Constraints: No constraints specified.
func (rcv *Manifold_Full) MutateWeight(n float64) bool {
	return rcv._tab.MutateFloat64Slot(12, n)
}

/// Applied delta V for this manifold's calculations, in km/sec.
/// Example: /// Example: 10.23
/// Constraints: No constraints specified.
func (rcv *Manifold_Full) DeltaV() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Applied delta V for this manifold's calculations, in km/sec.
/// Example: /// Example: 10.23
/// Constraints: No constraints specified.
func (rcv *Manifold_Full) MutateDeltaV(n float64) bool {
	return rcv._tab.MutateFloat64Slot(14, n)
}

/// Applied delta V duration for this manifold's calculations in seconds.
/// Example: /// Example: 10.23
/// Constraints: No constraints specified.
func (rcv *Manifold_Full) DeltaT() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Applied delta V duration for this manifold's calculations in seconds.
/// Example: /// Example: 10.23
/// Constraints: No constraints specified.
func (rcv *Manifold_Full) MutateDeltaT(n float64) bool {
	return rcv._tab.MutateFloat64Slot(16, n)
}

/// Time the row was created in the database, auto-populated by the system.
/// Example: /// Example: 2018-01-01T16:00:00.123Z
/// Constraints: No constraints specified.
func (rcv *Manifold_Full) CreatedAt() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(18))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Time the row was created in the database, auto-populated by the system.
/// Example: /// Example: 2018-01-01T16:00:00.123Z
/// Constraints: No constraints specified.
/// Application user who created the row in the database, auto-populated by the system.
/// Example: /// Example: some.user
/// Constraints: Minimum length = 1, Maximum length = 64
func (rcv *Manifold_Full) CreatedBy() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(20))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Application user who created the row in the database, auto-populated by the system.
/// Example: /// Example: some.user
/// Constraints: Minimum length = 1, Maximum length = 64
/// Read-only time the row was updated in the database, set automatically by the system on update.
/// Example: /// Example: 2018-01-01T16:00:00.123Z
/// Constraints: No constraints specified.
func (rcv *Manifold_Full) UpdatedAt() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(22))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Read-only time the row was updated in the database, set automatically by the system on update.
/// Example: /// Example: 2018-01-01T16:00:00.123Z
/// Constraints: No constraints specified.
/// Application user who last updated the row in the database, set by the system automatically and ignored on create/edit operations.
/// Example: /// Example: some.user
/// Constraints: Minimum length = 0, Maximum length = 64
func (rcv *Manifold_Full) UpdatedBy() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(24))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Application user who last updated the row in the database, set by the system automatically and ignored on create/edit operations.
/// Example: /// Example: some.user
/// Constraints: Minimum length = 0, Maximum length = 64
/// Source of the data.
/// Example: /// Example: Bluestaq
/// Constraints: Minimum length = 1, Maximum length = 64
func (rcv *Manifold_Full) Source() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(26))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Source of the data.
/// Example: /// Example: Bluestaq
/// Constraints: Minimum length = 1, Maximum length = 64
/// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
/// Example: /// Example: THIRD_PARTY_DATASOURCE
/// Constraints: Minimum length = 0, Maximum length = 64
func (rcv *Manifold_Full) Origin() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(28))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
/// Example: /// Example: THIRD_PARTY_DATASOURCE
/// Constraints: Minimum length = 0, Maximum length = 64
/// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
/// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
/// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
/// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
/// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
/// Example: /// Example: TEST
/// Constraints: Minimum length = 1, Maximum length = 32
func (rcv *Manifold_Full) DataMode() Manifold_Full_dataMode_Enum {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(30))
	if o != 0 {
		return Manifold_Full_dataMode_Enum(rcv._tab.GetInt8(o + rcv._tab.Pos))
	}
	return 0
}

/// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
/// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
/// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
/// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
/// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
/// Example: /// Example: TEST
/// Constraints: Minimum length = 1, Maximum length = 32
func (rcv *Manifold_Full) MutateDataMode(n Manifold_Full_dataMode_Enum) bool {
	return rcv._tab.MutateInt8Slot(30, int8(n))
}

/// The originating source network on which this record was created, auto-populated by the system.
/// Example: /// Example: ORIG
/// Constraints: Minimum length = 1, Maximum length = 32
func (rcv *Manifold_Full) OrigNetwork() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(32))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The originating source network on which this record was created, auto-populated by the system.
/// Example: /// Example: ORIG
/// Constraints: Minimum length = 1, Maximum length = 32
func Manifold_FullStart(builder *flatbuffers.Builder) {
	builder.StartObject(15)
}
func Manifold_FullAddId(builder *flatbuffers.Builder, id flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(id), 0)
}
func Manifold_FullAddIdObjectOfInterest(builder *flatbuffers.Builder, idObjectOfInterest flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(idObjectOfInterest), 0)
}
func Manifold_FullAddClassificationMarking(builder *flatbuffers.Builder, classificationMarking flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(classificationMarking), 0)
}
func Manifold_FullAddStatus(builder *flatbuffers.Builder, status flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(3, flatbuffers.UOffsetT(status), 0)
}
func Manifold_FullAddWeight(builder *flatbuffers.Builder, weight float64) {
	builder.PrependFloat64Slot(4, weight, 0.0)
}
func Manifold_FullAddDeltaV(builder *flatbuffers.Builder, deltaV float64) {
	builder.PrependFloat64Slot(5, deltaV, 0.0)
}
func Manifold_FullAddDeltaT(builder *flatbuffers.Builder, deltaT float64) {
	builder.PrependFloat64Slot(6, deltaT, 0.0)
}
func Manifold_FullAddCreatedAt(builder *flatbuffers.Builder, createdAt flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(7, flatbuffers.UOffsetT(createdAt), 0)
}
func Manifold_FullAddCreatedBy(builder *flatbuffers.Builder, createdBy flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(8, flatbuffers.UOffsetT(createdBy), 0)
}
func Manifold_FullAddUpdatedAt(builder *flatbuffers.Builder, updatedAt flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(9, flatbuffers.UOffsetT(updatedAt), 0)
}
func Manifold_FullAddUpdatedBy(builder *flatbuffers.Builder, updatedBy flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(10, flatbuffers.UOffsetT(updatedBy), 0)
}
func Manifold_FullAddSource(builder *flatbuffers.Builder, source flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(11, flatbuffers.UOffsetT(source), 0)
}
func Manifold_FullAddOrigin(builder *flatbuffers.Builder, origin flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(12, flatbuffers.UOffsetT(origin), 0)
}
func Manifold_FullAddDataMode(builder *flatbuffers.Builder, dataMode Manifold_Full_dataMode_Enum) {
	builder.PrependInt8Slot(13, int8(dataMode), 0)
}
func Manifold_FullAddOrigNetwork(builder *flatbuffers.Builder, origNetwork flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(14, flatbuffers.UOffsetT(origNetwork), 0)
}
func Manifold_FullEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
