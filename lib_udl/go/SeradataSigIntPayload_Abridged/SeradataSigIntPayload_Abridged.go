// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package SeradataSigIntPayload_Abridged

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

/// /// Details for an sigint payload from  Seradata.
type SeradataSigIntPayload_Abridged struct {
	_tab flatbuffers.Table
}

const SeradataSigIntPayload_AbridgedIdentifier = "SERA"

func GetRootAsSeradataSigIntPayload_Abridged(buf []byte, offset flatbuffers.UOffsetT) *SeradataSigIntPayload_Abridged {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &SeradataSigIntPayload_Abridged{}
	x.Init(buf, n+offset)
	return x
}

func FinishSeradataSigIntPayload_AbridgedBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	identifierBytes := []byte(SeradataSigIntPayload_AbridgedIdentifier)
	builder.FinishWithFileIdentifier(offset, identifierBytes)
}

func SeradataSigIntPayload_AbridgedBufferHasIdentifier(buf []byte) bool {
	return flatbuffers.BufferHasIdentifier(buf, SeradataSigIntPayload_AbridgedIdentifier)
}

func GetSizePrefixedRootAsSeradataSigIntPayload_Abridged(buf []byte, offset flatbuffers.UOffsetT) *SeradataSigIntPayload_Abridged {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &SeradataSigIntPayload_Abridged{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedSeradataSigIntPayload_AbridgedBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	identifierBytes := []byte(SeradataSigIntPayload_AbridgedIdentifier)
	builder.FinishSizePrefixedWithFileIdentifier(offset, identifierBytes)
}

func SizePrefixedSeradataSigIntPayload_AbridgedBufferHasIdentifier(buf []byte) bool {
	return flatbuffers.SizePrefixedBufferHasIdentifier(buf, SeradataSigIntPayload_AbridgedIdentifier)
}

func (rcv *SeradataSigIntPayload_Abridged) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *SeradataSigIntPayload_Abridged) Table() flatbuffers.Table {
	return rcv._tab
}

/// Unique identifier of the record, auto-generated by the system.
/// Example: /// Example: SERADATASIGINTPAYLOAD-ID
/// Constraints: Minimum length = 1, Maximum length = 36
func (rcv *SeradataSigIntPayload_Abridged) Id() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Unique identifier of the record, auto-generated by the system.
/// Example: /// Example: SERADATASIGINTPAYLOAD-ID
/// Constraints: Minimum length = 1, Maximum length = 36
/// Classification marking of the data in IC/CAPCO Portion-marked format.
/// Example: /// Example: U
/// Constraints: Minimum length = 1, Maximum length = 128
func (rcv *SeradataSigIntPayload_Abridged) ClassificationMarking() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Classification marking of the data in IC/CAPCO Portion-marked format.
/// Example: /// Example: U
/// Constraints: Minimum length = 1, Maximum length = 128
/// Seradata ID of the spacecraft (SeradataSpacecraftDetails ID).
/// Example: /// Example: spacecraftId
/// Constraints: Minimum length = 1, Maximum length = 36
func (rcv *SeradataSigIntPayload_Abridged) SpacecraftId() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Seradata ID of the spacecraft (SeradataSpacecraftDetails ID).
/// Example: /// Example: spacecraftId
/// Constraints: Minimum length = 1, Maximum length = 36
/// UUID of the Sensor record.
/// Example: /// Example: 0c5ec9c0-10cd-1d35-c46b-3764c4d76e13
/// Constraints: Minimum length = 0, Maximum length = 36
func (rcv *SeradataSigIntPayload_Abridged) IdSensor() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// UUID of the Sensor record.
/// Example: /// Example: 0c5ec9c0-10cd-1d35-c46b-3764c4d76e13
/// Constraints: Minimum length = 0, Maximum length = 36
/// Hosted for company/Organization Id.
/// Example: /// Example: hostedForCompanyOrgId
/// Constraints: Minimum length = 0, Maximum length = 36
func (rcv *SeradataSigIntPayload_Abridged) HostedForCompanyOrgId() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Hosted for company/Organization Id.
/// Example: /// Example: hostedForCompanyOrgId
/// Constraints: Minimum length = 0, Maximum length = 36
/// Manufacturer Organization Id.
/// Example: /// Example: manufacturerOrgId
/// Constraints: Minimum length = 0, Maximum length = 36
func (rcv *SeradataSigIntPayload_Abridged) ManufacturerOrgId() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Manufacturer Organization Id.
/// Example: /// Example: manufacturerOrgId
/// Constraints: Minimum length = 0, Maximum length = 36
/// SIGINT Payload type, e.g. Comint, Elint, etc.
/// Example: /// Example: Comint
/// Constraints: Minimum length = 0, Maximum length = 50
func (rcv *SeradataSigIntPayload_Abridged) Type() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// SIGINT Payload type, e.g. Comint, Elint, etc.
/// Example: /// Example: Comint
/// Constraints: Minimum length = 0, Maximum length = 50
/// Swath Width in kilometers.
/// Example: /// Example: 1.23
/// Constraints: No constraints specified.
func (rcv *SeradataSigIntPayload_Abridged) SwathWidth() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(18))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Swath Width in kilometers.
/// Example: /// Example: 1.23
/// Constraints: No constraints specified.
func (rcv *SeradataSigIntPayload_Abridged) MutateSwathWidth(n float64) bool {
	return rcv._tab.MutateFloat64Slot(18, n)
}

/// Ground Station info for this payload.
/// Example: /// Example: groundStations
/// Constraints: Minimum length = 0, Maximum length = 128
func (rcv *SeradataSigIntPayload_Abridged) GroundStations() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(20))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Ground Station info for this payload.
/// Example: /// Example: groundStations
/// Constraints: Minimum length = 0, Maximum length = 128
/// Ground Station Locations for this payload.
/// Example: /// Example: groundStationLocations
/// Constraints: Minimum length = 0, Maximum length = 64
func (rcv *SeradataSigIntPayload_Abridged) GroundStationLocations() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(22))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Ground Station Locations for this payload.
/// Example: /// Example: groundStationLocations
/// Constraints: Minimum length = 0, Maximum length = 64
/// Frequency coverage for this payload.
/// Example: /// Example: 1.1 to 3.3
/// Constraints: Minimum length = 0, Maximum length = 50
func (rcv *SeradataSigIntPayload_Abridged) FrequencyCoverage() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(24))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Frequency coverage for this payload.
/// Example: /// Example: 1.1 to 3.3
/// Constraints: Minimum length = 0, Maximum length = 50
/// Positional Accuracy for this payload.
/// Example: /// Example: positionalAccuracy
/// Constraints: Minimum length = 0, Maximum length = 50
func (rcv *SeradataSigIntPayload_Abridged) PositionalAccuracy() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(26))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Positional Accuracy for this payload.
/// Example: /// Example: positionalAccuracy
/// Constraints: Minimum length = 0, Maximum length = 50
/// Intercept parameters.
/// Example: /// Example: interceptParameters
/// Constraints: Minimum length = 0, Maximum length = 50
func (rcv *SeradataSigIntPayload_Abridged) InterceptParameters() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(28))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Intercept parameters.
/// Example: /// Example: interceptParameters
/// Constraints: Minimum length = 0, Maximum length = 50
/// Sensor name from Seradata.
/// Example: /// Example: Sensor Name
/// Constraints: Minimum length = 0, Maximum length = 50
func (rcv *SeradataSigIntPayload_Abridged) Name() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(30))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Sensor name from Seradata.
/// Example: /// Example: Sensor Name
/// Constraints: Minimum length = 0, Maximum length = 50
/// Payload notes.
/// Example: /// Example: Sample Notes
/// Constraints: Minimum length = 0, Maximum length = 2147483647
func (rcv *SeradataSigIntPayload_Abridged) Notes() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(32))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Payload notes.
/// Example: /// Example: Sample Notes
/// Constraints: Minimum length = 0, Maximum length = 2147483647
/// Time the row was created in the database, auto-populated by the system.
/// Example: /// Example: 2018-01-01T16:00:00.123Z
/// Constraints: No constraints specified.
func (rcv *SeradataSigIntPayload_Abridged) CreatedAt() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(34))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Time the row was created in the database, auto-populated by the system.
/// Example: /// Example: 2018-01-01T16:00:00.123Z
/// Constraints: No constraints specified.
/// Application user who created the row in the database, auto-populated by the system.
/// Example: /// Example: some.user
/// Constraints: Minimum length = 1, Maximum length = 64
func (rcv *SeradataSigIntPayload_Abridged) CreatedBy() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(36))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Application user who created the row in the database, auto-populated by the system.
/// Example: /// Example: some.user
/// Constraints: Minimum length = 1, Maximum length = 64
/// Source of the data.
/// Example: /// Example: Bluestaq
/// Constraints: Minimum length = 1, Maximum length = 64
func (rcv *SeradataSigIntPayload_Abridged) Source() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(38))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Source of the data.
/// Example: /// Example: Bluestaq
/// Constraints: Minimum length = 1, Maximum length = 64
/// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
/// Example: /// Example: THIRD_PARTY_DATASOURCE
/// Constraints: Minimum length = 0, Maximum length = 64
func (rcv *SeradataSigIntPayload_Abridged) Origin() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(40))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
/// Example: /// Example: THIRD_PARTY_DATASOURCE
/// Constraints: Minimum length = 0, Maximum length = 64
/// The originating source network on which this record was created, auto-populated by the system.
/// Example: /// Example: ORIG
/// Constraints: Minimum length = 1, Maximum length = 32
func (rcv *SeradataSigIntPayload_Abridged) OrigNetwork() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(42))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The originating source network on which this record was created, auto-populated by the system.
/// Example: /// Example: ORIG
/// Constraints: Minimum length = 1, Maximum length = 32
/// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
/// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
/// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
/// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
/// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
/// Example: /// Example: TEST
/// Constraints: Minimum length = 1, Maximum length = 32
func (rcv *SeradataSigIntPayload_Abridged) DataMode() SeradataSigIntPayload_Abridged_dataMode_Enum {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(44))
	if o != 0 {
		return SeradataSigIntPayload_Abridged_dataMode_Enum(rcv._tab.GetInt8(o + rcv._tab.Pos))
	}
	return 0
}

/// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
/// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
/// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
/// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
/// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
/// Example: /// Example: TEST
/// Constraints: Minimum length = 1, Maximum length = 32
func (rcv *SeradataSigIntPayload_Abridged) MutateDataMode(n SeradataSigIntPayload_Abridged_dataMode_Enum) bool {
	return rcv._tab.MutateInt8Slot(44, int8(n))
}

func SeradataSigIntPayload_AbridgedStart(builder *flatbuffers.Builder) {
	builder.StartObject(21)
}
func SeradataSigIntPayload_AbridgedAddId(builder *flatbuffers.Builder, id flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(id), 0)
}
func SeradataSigIntPayload_AbridgedAddClassificationMarking(builder *flatbuffers.Builder, classificationMarking flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(classificationMarking), 0)
}
func SeradataSigIntPayload_AbridgedAddSpacecraftId(builder *flatbuffers.Builder, spacecraftId flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(spacecraftId), 0)
}
func SeradataSigIntPayload_AbridgedAddIdSensor(builder *flatbuffers.Builder, idSensor flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(3, flatbuffers.UOffsetT(idSensor), 0)
}
func SeradataSigIntPayload_AbridgedAddHostedForCompanyOrgId(builder *flatbuffers.Builder, hostedForCompanyOrgId flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(4, flatbuffers.UOffsetT(hostedForCompanyOrgId), 0)
}
func SeradataSigIntPayload_AbridgedAddManufacturerOrgId(builder *flatbuffers.Builder, manufacturerOrgId flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(5, flatbuffers.UOffsetT(manufacturerOrgId), 0)
}
func SeradataSigIntPayload_AbridgedAddType(builder *flatbuffers.Builder, type_ flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(6, flatbuffers.UOffsetT(type_), 0)
}
func SeradataSigIntPayload_AbridgedAddSwathWidth(builder *flatbuffers.Builder, swathWidth float64) {
	builder.PrependFloat64Slot(7, swathWidth, 0.0)
}
func SeradataSigIntPayload_AbridgedAddGroundStations(builder *flatbuffers.Builder, groundStations flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(8, flatbuffers.UOffsetT(groundStations), 0)
}
func SeradataSigIntPayload_AbridgedAddGroundStationLocations(builder *flatbuffers.Builder, groundStationLocations flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(9, flatbuffers.UOffsetT(groundStationLocations), 0)
}
func SeradataSigIntPayload_AbridgedAddFrequencyCoverage(builder *flatbuffers.Builder, frequencyCoverage flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(10, flatbuffers.UOffsetT(frequencyCoverage), 0)
}
func SeradataSigIntPayload_AbridgedAddPositionalAccuracy(builder *flatbuffers.Builder, positionalAccuracy flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(11, flatbuffers.UOffsetT(positionalAccuracy), 0)
}
func SeradataSigIntPayload_AbridgedAddInterceptParameters(builder *flatbuffers.Builder, interceptParameters flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(12, flatbuffers.UOffsetT(interceptParameters), 0)
}
func SeradataSigIntPayload_AbridgedAddName(builder *flatbuffers.Builder, name flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(13, flatbuffers.UOffsetT(name), 0)
}
func SeradataSigIntPayload_AbridgedAddNotes(builder *flatbuffers.Builder, notes flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(14, flatbuffers.UOffsetT(notes), 0)
}
func SeradataSigIntPayload_AbridgedAddCreatedAt(builder *flatbuffers.Builder, createdAt flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(15, flatbuffers.UOffsetT(createdAt), 0)
}
func SeradataSigIntPayload_AbridgedAddCreatedBy(builder *flatbuffers.Builder, createdBy flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(16, flatbuffers.UOffsetT(createdBy), 0)
}
func SeradataSigIntPayload_AbridgedAddSource(builder *flatbuffers.Builder, source flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(17, flatbuffers.UOffsetT(source), 0)
}
func SeradataSigIntPayload_AbridgedAddOrigin(builder *flatbuffers.Builder, origin flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(18, flatbuffers.UOffsetT(origin), 0)
}
func SeradataSigIntPayload_AbridgedAddOrigNetwork(builder *flatbuffers.Builder, origNetwork flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(19, flatbuffers.UOffsetT(origNetwork), 0)
}
func SeradataSigIntPayload_AbridgedAddDataMode(builder *flatbuffers.Builder, dataMode SeradataSigIntPayload_Abridged_dataMode_Enum) {
	builder.PrependInt8Slot(20, int8(dataMode), 0)
}
func SeradataSigIntPayload_AbridgedEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
