// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package StarCatalog_Abridged

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

/// /// The star catalog provides the position, proper motion, parallax, and photometric magnitudes at various bandpasses of a star.
type StarCatalog_Abridged struct {
	_tab flatbuffers.Table
}

const StarCatalog_AbridgedIdentifier = "STAR"

func GetRootAsStarCatalog_Abridged(buf []byte, offset flatbuffers.UOffsetT) *StarCatalog_Abridged {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &StarCatalog_Abridged{}
	x.Init(buf, n+offset)
	return x
}

func FinishStarCatalog_AbridgedBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	identifierBytes := []byte(StarCatalog_AbridgedIdentifier)
	builder.FinishWithFileIdentifier(offset, identifierBytes)
}

func StarCatalog_AbridgedBufferHasIdentifier(buf []byte) bool {
	return flatbuffers.BufferHasIdentifier(buf, StarCatalog_AbridgedIdentifier)
}

func GetSizePrefixedRootAsStarCatalog_Abridged(buf []byte, offset flatbuffers.UOffsetT) *StarCatalog_Abridged {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &StarCatalog_Abridged{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedStarCatalog_AbridgedBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	identifierBytes := []byte(StarCatalog_AbridgedIdentifier)
	builder.FinishSizePrefixedWithFileIdentifier(offset, identifierBytes)
}

func SizePrefixedStarCatalog_AbridgedBufferHasIdentifier(buf []byte) bool {
	return flatbuffers.SizePrefixedBufferHasIdentifier(buf, StarCatalog_AbridgedIdentifier)
}

func (rcv *StarCatalog_Abridged) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *StarCatalog_Abridged) Table() flatbuffers.Table {
	return rcv._tab
}

/// Unique identifier of the record, auto-generated by the system.
/// Example: /// Example: STAR-CAT-DATASET-ID
/// Constraints: Minimum length = 1, Maximum length = 36
func (rcv *StarCatalog_Abridged) Id() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Unique identifier of the record, auto-generated by the system.
/// Example: /// Example: STAR-CAT-DATASET-ID
/// Constraints: Minimum length = 1, Maximum length = 36
/// Classification marking of the data in IC/CAPCO Portion-marked format.
/// Example: /// Example: U
/// Constraints: Minimum length = 1, Maximum length = 128
func (rcv *StarCatalog_Abridged) ClassificationMarking() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Classification marking of the data in IC/CAPCO Portion-marked format.
/// Example: /// Example: U
/// Constraints: Minimum length = 1, Maximum length = 128
/// The ID of this object in the specific catalog associated with this record.
/// Example: /// Example: 12345
/// Constraints: No constraints specified.
func (rcv *StarCatalog_Abridged) CsId() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

/// The ID of this object in the specific catalog associated with this record.
/// Example: /// Example: 12345
/// Constraints: No constraints specified.
func (rcv *StarCatalog_Abridged) MutateCsId(n int64) bool {
	return rcv._tab.MutateInt64Slot(8, n)
}

/// The ID of this object in the Guidance and Navagation Control (GNC) Catalog.
/// Example: /// Example: 12345
/// Constraints: No constraints specified.
func (rcv *StarCatalog_Abridged) GncCatId() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

/// The ID of this object in the Guidance and Navagation Control (GNC) Catalog.
/// Example: /// Example: 12345
/// Constraints: No constraints specified.
func (rcv *StarCatalog_Abridged) MutateGncCatId(n int32) bool {
	return rcv._tab.MutateInt32Slot(10, n)
}

/// The ID of this object in the Gaia DR3 Catalog.
/// Example: /// Example: 89012345678901
/// Constraints: No constraints specified.
func (rcv *StarCatalog_Abridged) Gaiadr3CatId() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

/// The ID of this object in the Gaia DR3 Catalog.
/// Example: /// Example: 89012345678901
/// Constraints: No constraints specified.
func (rcv *StarCatalog_Abridged) MutateGaiadr3CatId(n int64) bool {
	return rcv._tab.MutateInt64Slot(12, n)
}

/// The ID of this object in the Hipparcos Catalog.
/// Example: /// Example: 12345
/// Constraints: No constraints specified.
func (rcv *StarCatalog_Abridged) HipCatId() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

/// The ID of this object in the Hipparcos Catalog.
/// Example: /// Example: 12345
/// Constraints: No constraints specified.
func (rcv *StarCatalog_Abridged) MutateHipCatId(n int32) bool {
	return rcv._tab.MutateInt32Slot(14, n)
}

/// The version of the catalog associated with this object.
/// Example: /// Example: 1.23
/// Constraints: No constraints specified.
func (rcv *StarCatalog_Abridged) CatVersion() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The version of the catalog associated with this object.
/// Example: /// Example: 1.23
/// Constraints: No constraints specified.
/// Barycentric right ascension of the source in the International Celestial Reference System (ICRS) frame at the reference epoch, in degrees.
/// Example: /// Example: 14.43
/// Constraints: No constraints specified.
func (rcv *StarCatalog_Abridged) Ra() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(18))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Barycentric right ascension of the source in the International Celestial Reference System (ICRS) frame at the reference epoch, in degrees.
/// Example: /// Example: 14.43
/// Constraints: No constraints specified.
func (rcv *StarCatalog_Abridged) MutateRa(n float64) bool {
	return rcv._tab.MutateFloat64Slot(18, n)
}

/// Uncertainty of the right ascension of the source, in milliarcseconds, at the reference epoch.
/// Example: /// Example: 509.466
/// Constraints: No constraints specified.
func (rcv *StarCatalog_Abridged) RaUnc() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(20))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Uncertainty of the right ascension of the source, in milliarcseconds, at the reference epoch.
/// Example: /// Example: 509.466
/// Constraints: No constraints specified.
func (rcv *StarCatalog_Abridged) MutateRaUnc(n float64) bool {
	return rcv._tab.MutateFloat64Slot(20, n)
}

/// Barycentric declination of the source in International Celestial Reference System (ICRS) at the reference epoch, in degrees.
/// Example: /// Example: 21.8
/// Constraints: No constraints specified.
func (rcv *StarCatalog_Abridged) Dec() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(22))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Barycentric declination of the source in International Celestial Reference System (ICRS) at the reference epoch, in degrees.
/// Example: /// Example: 21.8
/// Constraints: No constraints specified.
func (rcv *StarCatalog_Abridged) MutateDec(n float64) bool {
	return rcv._tab.MutateFloat64Slot(22, n)
}

/// Uncertainty of the declination of the source, in milliarcseconds, at the reference epoch.
/// Example: /// Example: 40.996
/// Constraints: No constraints specified.
func (rcv *StarCatalog_Abridged) DecUnc() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(24))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Uncertainty of the declination of the source, in milliarcseconds, at the reference epoch.
/// Example: /// Example: 40.996
/// Constraints: No constraints specified.
func (rcv *StarCatalog_Abridged) MutateDecUnc(n float64) bool {
	return rcv._tab.MutateFloat64Slot(24, n)
}

/// Flag indicating that the position uncertainty in either ra or dec is greater than 100 milliarcseconds.
/// Example: /// Example: False
/// Constraints: No constraints specified.
func (rcv *StarCatalog_Abridged) PosUncFlag() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(26))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

/// Flag indicating that the position uncertainty in either ra or dec is greater than 100 milliarcseconds.
/// Example: /// Example: False
/// Constraints: No constraints specified.
func (rcv *StarCatalog_Abridged) MutatePosUncFlag(n bool) bool {
	return rcv._tab.MutateBoolSlot(26, n)
}

/// Absolute stellar parallax of the source, in milliarcseconds.
/// Example: /// Example: -6.8
/// Constraints: No constraints specified.
func (rcv *StarCatalog_Abridged) Parallax() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(28))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Absolute stellar parallax of the source, in milliarcseconds.
/// Example: /// Example: -6.8
/// Constraints: No constraints specified.
func (rcv *StarCatalog_Abridged) MutateParallax(n float64) bool {
	return rcv._tab.MutateFloat64Slot(28, n)
}

/// Uncertainty of the stellar parallax, in milliarcseconds.
/// Example: /// Example: 82.35
/// Constraints: No constraints specified.
func (rcv *StarCatalog_Abridged) ParallaxUnc() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(30))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Uncertainty of the stellar parallax, in milliarcseconds.
/// Example: /// Example: 82.35
/// Constraints: No constraints specified.
func (rcv *StarCatalog_Abridged) MutateParallaxUnc(n float64) bool {
	return rcv._tab.MutateFloat64Slot(30, n)
}

/// Proper motion in right ascension of the source, in milliarcseconds/year, at the reference epoch.
/// Example: /// Example: 1000.45
/// Constraints: No constraints specified.
func (rcv *StarCatalog_Abridged) Pmra() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(32))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Proper motion in right ascension of the source, in milliarcseconds/year, at the reference epoch.
/// Example: /// Example: 1000.45
/// Constraints: No constraints specified.
func (rcv *StarCatalog_Abridged) MutatePmra(n float64) bool {
	return rcv._tab.MutateFloat64Slot(32, n)
}

/// Uncertainty of proper motion in right ascension, in milliarcseconds/year.
/// Example: /// Example: 5.6
/// Constraints: No constraints specified.
func (rcv *StarCatalog_Abridged) PmraUnc() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(34))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Uncertainty of proper motion in right ascension, in milliarcseconds/year.
/// Example: /// Example: 5.6
/// Constraints: No constraints specified.
func (rcv *StarCatalog_Abridged) MutatePmraUnc(n float64) bool {
	return rcv._tab.MutateFloat64Slot(34, n)
}

/// Proper motion in declination of the source, in milliarcseconds/year, at the reference epoch.
/// Example: /// Example: -970.1003
/// Constraints: No constraints specified.
func (rcv *StarCatalog_Abridged) Pmdec() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(36))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Proper motion in declination of the source, in milliarcseconds/year, at the reference epoch.
/// Example: /// Example: -970.1003
/// Constraints: No constraints specified.
func (rcv *StarCatalog_Abridged) MutatePmdec(n float64) bool {
	return rcv._tab.MutateFloat64Slot(36, n)
}

/// Uncertainty of proper motion in declination, in milliarcseconds/year.
/// Example: /// Example: 1.22
/// Constraints: No constraints specified.
func (rcv *StarCatalog_Abridged) PmdecUnc() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(38))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Uncertainty of proper motion in declination, in milliarcseconds/year.
/// Example: /// Example: 1.22
/// Constraints: No constraints specified.
func (rcv *StarCatalog_Abridged) MutatePmdecUnc(n float64) bool {
	return rcv._tab.MutateFloat64Slot(38, n)
}

/// Flag indicating that the proper motion uncertainty in either ra or dec is greater than 10 milliarcseconds/year.
/// Example: /// Example: False
/// Constraints: No constraints specified.
func (rcv *StarCatalog_Abridged) PmUncFlag() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(40))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

/// Flag indicating that the proper motion uncertainty in either ra or dec is greater than 10 milliarcseconds/year.
/// Example: /// Example: False
/// Constraints: No constraints specified.
func (rcv *StarCatalog_Abridged) MutatePmUncFlag(n bool) bool {
	return rcv._tab.MutateBoolSlot(40, n)
}

/// Originating astrometric catalog for this object. Enum: [GAIADR3, HIPPARCOS, USNOBSC].
/// Example: /// Example: GAIADR3
/// Constraints: Minimum length = 1, Maximum length = 16
func (rcv *StarCatalog_Abridged) AstrometryOrigin() StarCatalog_Abridged_astrometryOrigin_Enum {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(42))
	if o != 0 {
		return StarCatalog_Abridged_astrometryOrigin_Enum(rcv._tab.GetInt8(o + rcv._tab.Pos))
	}
	return 0
}

/// Originating astrometric catalog for this object. Enum: [GAIADR3, HIPPARCOS, USNOBSC].
/// Example: /// Example: GAIADR3
/// Constraints: Minimum length = 1, Maximum length = 16
func (rcv *StarCatalog_Abridged) MutateAstrometryOrigin(n StarCatalog_Abridged_astrometryOrigin_Enum) bool {
	return rcv._tab.MutateInt8Slot(42, int8(n))
}

/// Reference epoch to which the astrometric source parameters are referred, expressed as Julian Year in Barycentric Coordinate Time (TCB).
/// Example: /// Example: 2016
/// Constraints: No constraints specified.
func (rcv *StarCatalog_Abridged) StarEpoch() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(44))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Reference epoch to which the astrometric source parameters are referred, expressed as Julian Year in Barycentric Coordinate Time (TCB).
/// Example: /// Example: 2016
/// Constraints: No constraints specified.
func (rcv *StarCatalog_Abridged) MutateStarEpoch(n float64) bool {
	return rcv._tab.MutateFloat64Slot(44, n)
}

/// Gaia DR3 optical photometric G-band magnitude in the Vega scale.
/// Example: /// Example: 0.0046
/// Constraints: No constraints specified.
func (rcv *StarCatalog_Abridged) Gmag() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(46))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Gaia DR3 optical photometric G-band magnitude in the Vega scale.
/// Example: /// Example: 0.0046
/// Constraints: No constraints specified.
func (rcv *StarCatalog_Abridged) MutateGmag(n float64) bool {
	return rcv._tab.MutateFloat64Slot(46, n)
}

/// Gaia DR3 optical photometric G-band magnitude uncertainty in the Vega scale.
/// Example: /// Example: 0.00292
/// Constraints: No constraints specified.
func (rcv *StarCatalog_Abridged) GmagUnc() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(48))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Gaia DR3 optical photometric G-band magnitude uncertainty in the Vega scale.
/// Example: /// Example: 0.00292
/// Constraints: No constraints specified.
func (rcv *StarCatalog_Abridged) MutateGmagUnc(n float64) bool {
	return rcv._tab.MutateFloat64Slot(48, n)
}

/// Gaia DR3 optical photometric Bp-band magnitude in the Vega scale.
/// Example: /// Example: 0.04559
/// Constraints: No constraints specified.
func (rcv *StarCatalog_Abridged) Bpmag() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(50))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Gaia DR3 optical photometric Bp-band magnitude in the Vega scale.
/// Example: /// Example: 0.04559
/// Constraints: No constraints specified.
func (rcv *StarCatalog_Abridged) MutateBpmag(n float64) bool {
	return rcv._tab.MutateFloat64Slot(50, n)
}

/// Gaia DR3 optical Bp-band magnitude uncertainty in the Vega scale.
/// Example: /// Example: 0.2227
/// Constraints: No constraints specified.
func (rcv *StarCatalog_Abridged) BpmagUnc() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(52))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Gaia DR3 optical Bp-band magnitude uncertainty in the Vega scale.
/// Example: /// Example: 0.2227
/// Constraints: No constraints specified.
func (rcv *StarCatalog_Abridged) MutateBpmagUnc(n float64) bool {
	return rcv._tab.MutateFloat64Slot(52, n)
}

/// Gaia DR3 optical Rp-band magnitude in the Vega scale.
/// Example: /// Example: 8.0047
/// Constraints: No constraints specified.
func (rcv *StarCatalog_Abridged) Rpmag() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(54))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Gaia DR3 optical Rp-band magnitude in the Vega scale.
/// Example: /// Example: 8.0047
/// Constraints: No constraints specified.
func (rcv *StarCatalog_Abridged) MutateRpmag(n float64) bool {
	return rcv._tab.MutateFloat64Slot(54, n)
}

/// Gaia DR3 optical photometric Rp-band magnitude uncertainty in the Vega scale.
/// Example: /// Example: 1.233
/// Constraints: No constraints specified.
func (rcv *StarCatalog_Abridged) RpmagUnc() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(56))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Gaia DR3 optical photometric Rp-band magnitude uncertainty in the Vega scale.
/// Example: /// Example: 1.233
/// Constraints: No constraints specified.
func (rcv *StarCatalog_Abridged) MutateRpmagUnc(n float64) bool {
	return rcv._tab.MutateFloat64Slot(56, n)
}

/// Two Micron All Sky Survey (2MASS) Point Source Catalog (PSC) near-infrared photometric J-band magnitude in the Vega scale.
/// Example: /// Example: 9.515
/// Constraints: No constraints specified.
func (rcv *StarCatalog_Abridged) Jmag() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(58))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Two Micron All Sky Survey (2MASS) Point Source Catalog (PSC) near-infrared photometric J-band magnitude in the Vega scale.
/// Example: /// Example: 9.515
/// Constraints: No constraints specified.
func (rcv *StarCatalog_Abridged) MutateJmag(n float64) bool {
	return rcv._tab.MutateFloat64Slot(58, n)
}

/// Two Micron All Sky Survey (2MASS) Point Source Catalog (PSC) near-infrared photometric J-band magnitude uncertainty in the Vega scale.
/// Example: /// Example: 7.559
/// Constraints: No constraints specified.
func (rcv *StarCatalog_Abridged) JmagUnc() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(60))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Two Micron All Sky Survey (2MASS) Point Source Catalog (PSC) near-infrared photometric J-band magnitude uncertainty in the Vega scale.
/// Example: /// Example: 7.559
/// Constraints: No constraints specified.
func (rcv *StarCatalog_Abridged) MutateJmagUnc(n float64) bool {
	return rcv._tab.MutateFloat64Slot(60, n)
}

/// Two Micron All Sky Survey (2MASS) Point Source Catalog (PSC) near-infrared photometric K-band magnitude in the Vega scale.
/// Example: /// Example: 13.545
/// Constraints: No constraints specified.
func (rcv *StarCatalog_Abridged) Kmag() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(62))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Two Micron All Sky Survey (2MASS) Point Source Catalog (PSC) near-infrared photometric K-band magnitude in the Vega scale.
/// Example: /// Example: 13.545
/// Constraints: No constraints specified.
func (rcv *StarCatalog_Abridged) MutateKmag(n float64) bool {
	return rcv._tab.MutateFloat64Slot(62, n)
}

/// Two Micron All Sky Survey (2MASS) Point Source Catalog (PSC) near-infrared photometric K-band magnitude uncertainty in the Vega scale.
/// Example: /// Example: 0.052
/// Constraints: No constraints specified.
func (rcv *StarCatalog_Abridged) KmagUnc() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(64))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Two Micron All Sky Survey (2MASS) Point Source Catalog (PSC) near-infrared photometric K-band magnitude uncertainty in the Vega scale.
/// Example: /// Example: 0.052
/// Constraints: No constraints specified.
func (rcv *StarCatalog_Abridged) MutateKmagUnc(n float64) bool {
	return rcv._tab.MutateFloat64Slot(64, n)
}

/// Two Micron All Sky Survey (2MASS) Point Source Catalog (PSC) near-infrared photometric H-band magnitude in the Vega scale.
/// Example: /// Example: 12.126
/// Constraints: No constraints specified.
func (rcv *StarCatalog_Abridged) Hmag() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(66))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Two Micron All Sky Survey (2MASS) Point Source Catalog (PSC) near-infrared photometric H-band magnitude in the Vega scale.
/// Example: /// Example: 12.126
/// Constraints: No constraints specified.
func (rcv *StarCatalog_Abridged) MutateHmag(n float64) bool {
	return rcv._tab.MutateFloat64Slot(66, n)
}

/// Two Micron All Sky Survey (2MASS) Point Source Catalog (PSC) near-infrared photometric H-band magnitude uncertainty in the Vega scale.
/// Example: /// Example: 5.722
/// Constraints: No constraints specified.
func (rcv *StarCatalog_Abridged) HmagUnc() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(68))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Two Micron All Sky Survey (2MASS) Point Source Catalog (PSC) near-infrared photometric H-band magnitude uncertainty in the Vega scale.
/// Example: /// Example: 5.722
/// Constraints: No constraints specified.
func (rcv *StarCatalog_Abridged) MutateHmagUnc(n float64) bool {
	return rcv._tab.MutateFloat64Slot(68, n)
}

/// Flag indicating that the source exhibits variable magnitude.
/// Example: /// Example: True
/// Constraints: No constraints specified.
func (rcv *StarCatalog_Abridged) VarFlag() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(70))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

/// Flag indicating that the source exhibits variable magnitude.
/// Example: /// Example: True
/// Constraints: No constraints specified.
func (rcv *StarCatalog_Abridged) MutateVarFlag(n bool) bool {
	return rcv._tab.MutateBoolSlot(70, n)
}

/// Flag indicating that this is a multiple object source.
/// Example: /// Example: True
/// Constraints: No constraints specified.
func (rcv *StarCatalog_Abridged) MultFlag() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(72))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

/// Flag indicating that this is a multiple object source.
/// Example: /// Example: True
/// Constraints: No constraints specified.
func (rcv *StarCatalog_Abridged) MutateMultFlag(n bool) bool {
	return rcv._tab.MutateBoolSlot(72, n)
}

/// The catalog ID of the nearest neighbor to this source.
/// Example: /// Example: 2456
/// Constraints: No constraints specified.
func (rcv *StarCatalog_Abridged) NeighborId() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(74))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

/// The catalog ID of the nearest neighbor to this source.
/// Example: /// Example: 2456
/// Constraints: No constraints specified.
func (rcv *StarCatalog_Abridged) MutateNeighborId(n int32) bool {
	return rcv._tab.MutateInt32Slot(74, n)
}

/// Flag indicating that the nearest catalog neighbor is closer than 4.6 arcseconds.
/// Example: /// Example: False
/// Constraints: No constraints specified.
func (rcv *StarCatalog_Abridged) NeighborFlag() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(76))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

/// Flag indicating that the nearest catalog neighbor is closer than 4.6 arcseconds.
/// Example: /// Example: False
/// Constraints: No constraints specified.
func (rcv *StarCatalog_Abridged) MutateNeighborFlag(n bool) bool {
	return rcv._tab.MutateBoolSlot(76, n)
}

/// Distance between source and nearest neighbor, in arcseconds.
/// Example: /// Example: 201.406
/// Constraints: No constraints specified.
func (rcv *StarCatalog_Abridged) NeighborDistance() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(78))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Distance between source and nearest neighbor, in arcseconds.
/// Example: /// Example: 201.406
/// Constraints: No constraints specified.
func (rcv *StarCatalog_Abridged) MutateNeighborDistance(n float64) bool {
	return rcv._tab.MutateFloat64Slot(78, n)
}

/// Flag indicating that the photocentric shift is greater than 50 milliarcseconds.
/// Example: /// Example: False
/// Constraints: No constraints specified.
func (rcv *StarCatalog_Abridged) ShiftFlag() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(80))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

/// Flag indicating that the photocentric shift is greater than 50 milliarcseconds.
/// Example: /// Example: False
/// Constraints: No constraints specified.
func (rcv *StarCatalog_Abridged) MutateShiftFlag(n bool) bool {
	return rcv._tab.MutateBoolSlot(80, n)
}

/// Photocentric shift caused by neighbors, in arcseconds.
/// Example: /// Example: 4.548
/// Constraints: No constraints specified.
func (rcv *StarCatalog_Abridged) Shift() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(82))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Photocentric shift caused by neighbors, in arcseconds.
/// Example: /// Example: 4.548
/// Constraints: No constraints specified.
func (rcv *StarCatalog_Abridged) MutateShift(n float64) bool {
	return rcv._tab.MutateFloat64Slot(82, n)
}

/// Time the row was created in the database, auto-populated by the system.
/// Example: /// Example: 2018-01-01T16:00:00.123Z
/// Constraints: No constraints specified.
func (rcv *StarCatalog_Abridged) CreatedAt() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(84))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Time the row was created in the database, auto-populated by the system.
/// Example: /// Example: 2018-01-01T16:00:00.123Z
/// Constraints: No constraints specified.
/// Application user who created the row in the database, auto-populated by the system.
/// Example: /// Example: some.user
/// Constraints: Minimum length = 1, Maximum length = 64
func (rcv *StarCatalog_Abridged) CreatedBy() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(86))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Application user who created the row in the database, auto-populated by the system.
/// Example: /// Example: some.user
/// Constraints: Minimum length = 1, Maximum length = 64
/// Time the row was updated in the database.
/// Example: /// Example: 2018-01-01T16:00:00.123Z
/// Constraints: No constraints specified.
func (rcv *StarCatalog_Abridged) UpdatedAt() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(88))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Time the row was updated in the database.
/// Example: /// Example: 2018-01-01T16:00:00.123Z
/// Constraints: No constraints specified.
/// Application user who updated the row in the database.
/// Example: /// Example: some.user
/// Constraints: Minimum length = 1, Maximum length = 64
func (rcv *StarCatalog_Abridged) UpdatedBy() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(90))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Application user who updated the row in the database.
/// Example: /// Example: some.user
/// Constraints: Minimum length = 1, Maximum length = 64
/// Source of the data.
/// Example: /// Example: Bluestaq
/// Constraints: Minimum length = 1, Maximum length = 36
func (rcv *StarCatalog_Abridged) Source() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(92))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Source of the data.
/// Example: /// Example: Bluestaq
/// Constraints: Minimum length = 1, Maximum length = 36
/// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
/// Example: /// Example: THIRD_PARTY_DATASOURCE
/// Constraints: Minimum length = 0, Maximum length = 64
func (rcv *StarCatalog_Abridged) Origin() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(94))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
/// Example: /// Example: THIRD_PARTY_DATASOURCE
/// Constraints: Minimum length = 0, Maximum length = 64
/// The originating source network on which this record was created, auto-populated by the system.
/// Example: /// Example: ORIG
/// Constraints: Minimum length = 0, Maximum length = 4
func (rcv *StarCatalog_Abridged) OrigNetwork() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(96))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The originating source network on which this record was created, auto-populated by the system.
/// Example: /// Example: ORIG
/// Constraints: Minimum length = 0, Maximum length = 4
/// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
/// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
/// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
/// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
/// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
/// Example: /// Example: TEST
/// Constraints: Minimum length = 1, Maximum length = 32
func (rcv *StarCatalog_Abridged) DataMode() StarCatalog_Abridged_dataMode_Enum {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(98))
	if o != 0 {
		return StarCatalog_Abridged_dataMode_Enum(rcv._tab.GetInt8(o + rcv._tab.Pos))
	}
	return 0
}

/// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
/// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
/// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
/// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
/// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
/// Example: /// Example: TEST
/// Constraints: Minimum length = 1, Maximum length = 32
func (rcv *StarCatalog_Abridged) MutateDataMode(n StarCatalog_Abridged_dataMode_Enum) bool {
	return rcv._tab.MutateInt8Slot(98, int8(n))
}

func StarCatalog_AbridgedStart(builder *flatbuffers.Builder) {
	builder.StartObject(48)
}
func StarCatalog_AbridgedAddId(builder *flatbuffers.Builder, id flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(id), 0)
}
func StarCatalog_AbridgedAddClassificationMarking(builder *flatbuffers.Builder, classificationMarking flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(classificationMarking), 0)
}
func StarCatalog_AbridgedAddCsId(builder *flatbuffers.Builder, csId int64) {
	builder.PrependInt64Slot(2, csId, 0)
}
func StarCatalog_AbridgedAddGncCatId(builder *flatbuffers.Builder, gncCatId int32) {
	builder.PrependInt32Slot(3, gncCatId, 0)
}
func StarCatalog_AbridgedAddGaiadr3CatId(builder *flatbuffers.Builder, gaiadr3CatId int64) {
	builder.PrependInt64Slot(4, gaiadr3CatId, 0)
}
func StarCatalog_AbridgedAddHipCatId(builder *flatbuffers.Builder, hipCatId int32) {
	builder.PrependInt32Slot(5, hipCatId, 0)
}
func StarCatalog_AbridgedAddCatVersion(builder *flatbuffers.Builder, catVersion flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(6, flatbuffers.UOffsetT(catVersion), 0)
}
func StarCatalog_AbridgedAddRa(builder *flatbuffers.Builder, ra float64) {
	builder.PrependFloat64Slot(7, ra, 0.0)
}
func StarCatalog_AbridgedAddRaUnc(builder *flatbuffers.Builder, raUnc float64) {
	builder.PrependFloat64Slot(8, raUnc, 0.0)
}
func StarCatalog_AbridgedAddDec(builder *flatbuffers.Builder, dec float64) {
	builder.PrependFloat64Slot(9, dec, 0.0)
}
func StarCatalog_AbridgedAddDecUnc(builder *flatbuffers.Builder, decUnc float64) {
	builder.PrependFloat64Slot(10, decUnc, 0.0)
}
func StarCatalog_AbridgedAddPosUncFlag(builder *flatbuffers.Builder, posUncFlag bool) {
	builder.PrependBoolSlot(11, posUncFlag, false)
}
func StarCatalog_AbridgedAddParallax(builder *flatbuffers.Builder, parallax float64) {
	builder.PrependFloat64Slot(12, parallax, 0.0)
}
func StarCatalog_AbridgedAddParallaxUnc(builder *flatbuffers.Builder, parallaxUnc float64) {
	builder.PrependFloat64Slot(13, parallaxUnc, 0.0)
}
func StarCatalog_AbridgedAddPmra(builder *flatbuffers.Builder, pmra float64) {
	builder.PrependFloat64Slot(14, pmra, 0.0)
}
func StarCatalog_AbridgedAddPmraUnc(builder *flatbuffers.Builder, pmraUnc float64) {
	builder.PrependFloat64Slot(15, pmraUnc, 0.0)
}
func StarCatalog_AbridgedAddPmdec(builder *flatbuffers.Builder, pmdec float64) {
	builder.PrependFloat64Slot(16, pmdec, 0.0)
}
func StarCatalog_AbridgedAddPmdecUnc(builder *flatbuffers.Builder, pmdecUnc float64) {
	builder.PrependFloat64Slot(17, pmdecUnc, 0.0)
}
func StarCatalog_AbridgedAddPmUncFlag(builder *flatbuffers.Builder, pmUncFlag bool) {
	builder.PrependBoolSlot(18, pmUncFlag, false)
}
func StarCatalog_AbridgedAddAstrometryOrigin(builder *flatbuffers.Builder, astrometryOrigin StarCatalog_Abridged_astrometryOrigin_Enum) {
	builder.PrependInt8Slot(19, int8(astrometryOrigin), 0)
}
func StarCatalog_AbridgedAddStarEpoch(builder *flatbuffers.Builder, starEpoch float64) {
	builder.PrependFloat64Slot(20, starEpoch, 0.0)
}
func StarCatalog_AbridgedAddGmag(builder *flatbuffers.Builder, gmag float64) {
	builder.PrependFloat64Slot(21, gmag, 0.0)
}
func StarCatalog_AbridgedAddGmagUnc(builder *flatbuffers.Builder, gmagUnc float64) {
	builder.PrependFloat64Slot(22, gmagUnc, 0.0)
}
func StarCatalog_AbridgedAddBpmag(builder *flatbuffers.Builder, bpmag float64) {
	builder.PrependFloat64Slot(23, bpmag, 0.0)
}
func StarCatalog_AbridgedAddBpmagUnc(builder *flatbuffers.Builder, bpmagUnc float64) {
	builder.PrependFloat64Slot(24, bpmagUnc, 0.0)
}
func StarCatalog_AbridgedAddRpmag(builder *flatbuffers.Builder, rpmag float64) {
	builder.PrependFloat64Slot(25, rpmag, 0.0)
}
func StarCatalog_AbridgedAddRpmagUnc(builder *flatbuffers.Builder, rpmagUnc float64) {
	builder.PrependFloat64Slot(26, rpmagUnc, 0.0)
}
func StarCatalog_AbridgedAddJmag(builder *flatbuffers.Builder, jmag float64) {
	builder.PrependFloat64Slot(27, jmag, 0.0)
}
func StarCatalog_AbridgedAddJmagUnc(builder *flatbuffers.Builder, jmagUnc float64) {
	builder.PrependFloat64Slot(28, jmagUnc, 0.0)
}
func StarCatalog_AbridgedAddKmag(builder *flatbuffers.Builder, kmag float64) {
	builder.PrependFloat64Slot(29, kmag, 0.0)
}
func StarCatalog_AbridgedAddKmagUnc(builder *flatbuffers.Builder, kmagUnc float64) {
	builder.PrependFloat64Slot(30, kmagUnc, 0.0)
}
func StarCatalog_AbridgedAddHmag(builder *flatbuffers.Builder, hmag float64) {
	builder.PrependFloat64Slot(31, hmag, 0.0)
}
func StarCatalog_AbridgedAddHmagUnc(builder *flatbuffers.Builder, hmagUnc float64) {
	builder.PrependFloat64Slot(32, hmagUnc, 0.0)
}
func StarCatalog_AbridgedAddVarFlag(builder *flatbuffers.Builder, varFlag bool) {
	builder.PrependBoolSlot(33, varFlag, false)
}
func StarCatalog_AbridgedAddMultFlag(builder *flatbuffers.Builder, multFlag bool) {
	builder.PrependBoolSlot(34, multFlag, false)
}
func StarCatalog_AbridgedAddNeighborId(builder *flatbuffers.Builder, neighborId int32) {
	builder.PrependInt32Slot(35, neighborId, 0)
}
func StarCatalog_AbridgedAddNeighborFlag(builder *flatbuffers.Builder, neighborFlag bool) {
	builder.PrependBoolSlot(36, neighborFlag, false)
}
func StarCatalog_AbridgedAddNeighborDistance(builder *flatbuffers.Builder, neighborDistance float64) {
	builder.PrependFloat64Slot(37, neighborDistance, 0.0)
}
func StarCatalog_AbridgedAddShiftFlag(builder *flatbuffers.Builder, shiftFlag bool) {
	builder.PrependBoolSlot(38, shiftFlag, false)
}
func StarCatalog_AbridgedAddShift(builder *flatbuffers.Builder, shift float64) {
	builder.PrependFloat64Slot(39, shift, 0.0)
}
func StarCatalog_AbridgedAddCreatedAt(builder *flatbuffers.Builder, createdAt flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(40, flatbuffers.UOffsetT(createdAt), 0)
}
func StarCatalog_AbridgedAddCreatedBy(builder *flatbuffers.Builder, createdBy flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(41, flatbuffers.UOffsetT(createdBy), 0)
}
func StarCatalog_AbridgedAddUpdatedAt(builder *flatbuffers.Builder, updatedAt flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(42, flatbuffers.UOffsetT(updatedAt), 0)
}
func StarCatalog_AbridgedAddUpdatedBy(builder *flatbuffers.Builder, updatedBy flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(43, flatbuffers.UOffsetT(updatedBy), 0)
}
func StarCatalog_AbridgedAddSource(builder *flatbuffers.Builder, source flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(44, flatbuffers.UOffsetT(source), 0)
}
func StarCatalog_AbridgedAddOrigin(builder *flatbuffers.Builder, origin flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(45, flatbuffers.UOffsetT(origin), 0)
}
func StarCatalog_AbridgedAddOrigNetwork(builder *flatbuffers.Builder, origNetwork flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(46, flatbuffers.UOffsetT(origNetwork), 0)
}
func StarCatalog_AbridgedAddDataMode(builder *flatbuffers.Builder, dataMode StarCatalog_Abridged_dataMode_Enum) {
	builder.PrependInt8Slot(47, int8(dataMode), 0)
}
func StarCatalog_AbridgedEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
